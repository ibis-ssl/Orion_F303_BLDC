
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000957c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  08009710  08009710  00019710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd4  08009dd4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009dd4  08009dd4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dd4  08009dd4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000013bc  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000159c  2000159c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022100  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043f6  00000000  00000000  0004230c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00019a6c  00000000  00000000  00046702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001040  00000000  00000000  00060170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002770  00000000  00000000  000611b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df6f  00000000  00000000  00063920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005ec8  00000000  00000000  0008188f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00087757  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b10  00000000  00000000  000877a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096f4 	.word	0x080096f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080096f4 	.word	0x080096f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c8a:	482d      	ldr	r0, [pc, #180]	; (8000d40 <MX_ADC1_Init+0xb8>)
 8000c8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c90:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
{
 8000c96:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c98:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c9a:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 8000c9c:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c9e:	6102      	str	r2, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ca0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca4:	2204      	movs	r2, #4
  ADC_MultiModeTypeDef multimode = {0};
 8000ca6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000cae:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000cb2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000cb6:	9309      	str	r3, [sp, #36]	; 0x24
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb8:	6083      	str	r3, [r0, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cba:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cbe:	60c3      	str	r3, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc0:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cc2:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.NbrOfConversion = 2;
 8000cc8:	2302      	movs	r3, #2
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cca:	8302      	strh	r2, [r0, #24]
  hadc1.Init.NbrOfConversion = 2;
 8000ccc:	61c3      	str	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd6:	f001 fbe7 	bl	80024a8 <HAL_ADC_Init>
 8000cda:	bb18      	cbnz	r0, 8000d24 <MX_ADC1_Init+0x9c>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cdc:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cde:	4818      	ldr	r0, [pc, #96]	; (8000d40 <MX_ADC1_Init+0xb8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce0:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce2:	a901      	add	r1, sp, #4
 8000ce4:	f001 ffe2 	bl	8002cac <HAL_ADCEx_MultiModeConfigChannel>
 8000ce8:	bb38      	cbnz	r0, 8000d3a <MX_ADC1_Init+0xb2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cea:	2201      	movs	r2, #1
 8000cec:	2301      	movs	r3, #1
 8000cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfa:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_ADC1_Init+0xb8>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_1;
 8000d02:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d06:	f001 fe07 	bl	8002918 <HAL_ADC_ConfigChannel>
 8000d0a:	b998      	cbnz	r0, 8000d34 <MX_ADC1_Init+0xac>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d10:	480b      	ldr	r0, [pc, #44]	; (8000d40 <MX_ADC1_Init+0xb8>)
 8000d12:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_4;
 8000d14:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	f001 fdfe 	bl	8002918 <HAL_ADC_ConfigChannel>
 8000d1c:	b928      	cbnz	r0, 8000d2a <MX_ADC1_Init+0xa2>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d1e:	b00b      	add	sp, #44	; 0x2c
 8000d20:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d24:	f000 ff3e 	bl	8001ba4 <Error_Handler>
 8000d28:	e7d8      	b.n	8000cdc <MX_ADC1_Init+0x54>
    Error_Handler();
 8000d2a:	f000 ff3b 	bl	8001ba4 <Error_Handler>
}
 8000d2e:	b00b      	add	sp, #44	; 0x2c
 8000d30:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d34:	f000 ff36 	bl	8001ba4 <Error_Handler>
 8000d38:	e7e8      	b.n	8000d0c <MX_ADC1_Init+0x84>
    Error_Handler();
 8000d3a:	f000 ff33 	bl	8001ba4 <Error_Handler>
 8000d3e:	e7d4      	b.n	8000cea <MX_ADC1_Init+0x62>
 8000d40:	20000200 	.word	0x20000200
 8000d44:	00000000 	.word	0x00000000

08000d48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d48:	b500      	push	{lr}
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8000dc8 <MX_ADC2_Init+0x80>
  hadc2.Instance = ADC2;
 8000d4e:	4822      	ldr	r0, [pc, #136]	; (8000dd8 <MX_ADC2_Init+0x90>)
 8000d50:	4922      	ldr	r1, [pc, #136]	; (8000ddc <MX_ADC2_Init+0x94>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d52:	2300      	movs	r3, #0
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
{
 8000d58:	b087      	sub	sp, #28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d5a:	e9c0 1200 	strd	r1, r2, [r0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5e:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 8000d62:	2101      	movs	r1, #1
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d64:	2204      	movs	r2, #4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d66:	8303      	strh	r3, [r0, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d68:	e9cd 3300 	strd	r3, r3, [sp]
 8000d6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000d70:	e9cd 3304 	strd	r3, r3, [sp, #16]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d74:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d76:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d78:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d7c:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d7e:	61c1      	str	r1, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d80:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d84:	6142      	str	r2, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d86:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d88:	f001 fb8e 	bl	80024a8 <HAL_ADC_Init>
 8000d8c:	b988      	cbnz	r0, 8000db2 <MX_ADC2_Init+0x6a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d8e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8000dd0 <MX_ADC2_Init+0x88>
 8000d92:	2200      	movs	r2, #0
 8000d94:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <MX_ADC2_Init+0x90>)
 8000d98:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_1;
 8000d9a:	ed8d 7b00 	vstr	d7, [sp]
 8000d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000da2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000da6:	f001 fdb7 	bl	8002918 <HAL_ADC_ConfigChannel>
 8000daa:	b928      	cbnz	r0, 8000db8 <MX_ADC2_Init+0x70>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dac:	b007      	add	sp, #28
 8000dae:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000db2:	f000 fef7 	bl	8001ba4 <Error_Handler>
 8000db6:	e7ea      	b.n	8000d8e <MX_ADC2_Init+0x46>
    Error_Handler();
 8000db8:	f000 fef4 	bl	8001ba4 <Error_Handler>
}
 8000dbc:	b007      	add	sp, #28
 8000dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dc2:	bf00      	nop
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	00000001 	.word	0x00000001
 8000dcc:	00000000 	.word	0x00000000
 8000dd0:	00000001 	.word	0x00000001
 8000dd4:	00000001 	.word	0x00000001
 8000dd8:	20000250 	.word	0x20000250
 8000ddc:	50000100 	.word	0x50000100

08000de0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000de0:	b500      	push	{lr}

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000de2:	4825      	ldr	r0, [pc, #148]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000de4:	4a25      	ldr	r2, [pc, #148]	; (8000e7c <MX_ADC3_Init+0x9c>)
{
 8000de6:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000de8:	2300      	movs	r3, #0
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dea:	e9c0 2300 	strd	r2, r3, [r0]
  ADC_MultiModeTypeDef multimode = {0};
 8000dee:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000df6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000dfa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000dfe:	9309      	str	r3, [sp, #36]	; 0x24
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e00:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e02:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e04:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e08:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e0a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e0e:	8303      	strh	r3, [r0, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e10:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e12:	2201      	movs	r2, #1
 8000e14:	2300      	movs	r3, #0
 8000e16:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc3.Init.NbrOfConversion = 1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61c3      	str	r3, [r0, #28]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e22:	f001 fb41 	bl	80024a8 <HAL_ADC_Init>
 8000e26:	b9c0      	cbnz	r0, 8000e5a <MX_ADC3_Init+0x7a>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e28:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000e2a:	4813      	ldr	r0, [pc, #76]	; (8000e78 <MX_ADC3_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e2c:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000e2e:	a901      	add	r1, sp, #4
 8000e30:	f001 ff3c 	bl	8002cac <HAL_ADCEx_MultiModeConfigChannel>
 8000e34:	b9c8      	cbnz	r0, 8000e6a <MX_ADC3_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e36:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8000e70 <MX_ADC3_Init+0x90>
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e40:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_5;
 8000e42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000e46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000e4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e4e:	f001 fd63 	bl	8002918 <HAL_ADC_ConfigChannel>
 8000e52:	b928      	cbnz	r0, 8000e60 <MX_ADC3_Init+0x80>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e54:	b00b      	add	sp, #44	; 0x2c
 8000e56:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e5a:	f000 fea3 	bl	8001ba4 <Error_Handler>
 8000e5e:	e7e3      	b.n	8000e28 <MX_ADC3_Init+0x48>
    Error_Handler();
 8000e60:	f000 fea0 	bl	8001ba4 <Error_Handler>
}
 8000e64:	b00b      	add	sp, #44	; 0x2c
 8000e66:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e6a:	f000 fe9b 	bl	8001ba4 <Error_Handler>
 8000e6e:	e7e2      	b.n	8000e36 <MX_ADC3_Init+0x56>
 8000e70:	00000005 	.word	0x00000005
 8000e74:	00000001 	.word	0x00000001
 8000e78:	200002a0 	.word	0x200002a0
 8000e7c:	50000400 	.word	0x50000400

08000e80 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e80:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000e82:	6802      	ldr	r2, [r0, #0]
{
 8000e84:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8000e88:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000e90:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000e94:	930a      	str	r3, [sp, #40]	; 0x28
  if(adcHandle->Instance==ADC1)
 8000e96:	d022      	beq.n	8000ede <HAL_ADC_MspInit+0x5e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_ADC_MspInit+0x138>)
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d004      	beq.n	8000ea8 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000e9e:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <HAL_ADC_MspInit+0x13c>)
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d068      	beq.n	8000f76 <HAL_ADC_MspInit+0xf6>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ea4:	b00d      	add	sp, #52	; 0x34
 8000ea6:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ea8:	4a45      	ldr	r2, [pc, #276]	; (8000fc0 <HAL_ADC_MspInit+0x140>)
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eae:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eb2:	d052      	beq.n	8000f5a <HAL_ADC_MspInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_ADC_MspInit+0x144>)
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ec6:	2410      	movs	r4, #16
 8000ec8:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	a906      	add	r1, sp, #24
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed0:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f002 fc75 	bl	80037c4 <HAL_GPIO_Init>
}
 8000eda:	b00d      	add	sp, #52	; 0x34
 8000edc:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ede:	4a38      	ldr	r2, [pc, #224]	; (8000fc0 <HAL_ADC_MspInit+0x140>)
 8000ee0:	6813      	ldr	r3, [r2, #0]
 8000ee2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	4604      	mov	r4, r0
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ee8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eea:	d02b      	beq.n	8000f44 <HAL_ADC_MspInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_ADC_MspInit+0x144>)
    hdma_adc1.Instance = DMA1_Channel1;
 8000eee:	4d36      	ldr	r5, [pc, #216]	; (8000fc8 <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000f00:	2209      	movs	r2, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	a906      	add	r1, sp, #24
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f002 fc58 	bl	80037c4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000f14:	492d      	ldr	r1, [pc, #180]	; (8000fcc <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f16:	2300      	movs	r3, #0
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f18:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1a:	e9c5 1300 	strd	r1, r3, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f1e:	e9c5 3202 	strd	r3, r2, [r5, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2a:	e9c5 1204 	strd	r1, r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f2e:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f30:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f36:	f002 fb31 	bl	800359c <HAL_DMA_Init>
 8000f3a:	b9c8      	cbnz	r0, 8000f70 <HAL_ADC_MspInit+0xf0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f3c:	63a5      	str	r5, [r4, #56]	; 0x38
 8000f3e:	626c      	str	r4, [r5, #36]	; 0x24
}
 8000f40:	b00d      	add	sp, #52	; 0x34
 8000f42:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <HAL_ADC_MspInit+0x144>)
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	9b00      	ldr	r3, [sp, #0]
 8000f58:	e7c8      	b.n	8000eec <HAL_ADC_MspInit+0x6c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_ADC_MspInit+0x144>)
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	9b02      	ldr	r3, [sp, #8]
 8000f6e:	e7a1      	b.n	8000eb4 <HAL_ADC_MspInit+0x34>
      Error_Handler();
 8000f70:	f000 fe18 	bl	8001ba4 <Error_Handler>
 8000f74:	e7e2      	b.n	8000f3c <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000f76:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8000f7a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f7e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000f82:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000f86:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000f92:	9204      	str	r2, [sp, #16]
 8000f94:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fa4:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000faa:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f002 fc08 	bl	80037c4 <HAL_GPIO_Init>
}
 8000fb4:	e776      	b.n	8000ea4 <HAL_ADC_MspInit+0x24>
 8000fb6:	bf00      	nop
 8000fb8:	50000100 	.word	0x50000100
 8000fbc:	50000400 	.word	0x50000400
 8000fc0:	200001fc 	.word	0x200001fc
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	200002f0 	.word	0x200002f0
 8000fcc:	40020008 	.word	0x40020008
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000fd4:	b510      	push	{r4, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_CAN_Init+0x34>)
 8000fd8:	4c0c      	ldr	r4, [pc, #48]	; (800100c <MX_CAN_Init+0x38>)
  hcan.Init.Prescaler = 3;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fda:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 3;
 8000fdc:	2203      	movs	r2, #3
 8000fde:	e9c0 4200 	strd	r4, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000fe2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000fe6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fea:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fec:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fee:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000ff2:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ff6:	f001 feed 	bl	8002dd4 <HAL_CAN_Init>
 8000ffa:	b900      	cbnz	r0, 8000ffe <MX_CAN_Init+0x2a>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001002:	f000 bdcf 	b.w	8001ba4 <Error_Handler>
 8001006:	bf00      	nop
 8001008:	20000334 	.word	0x20000334
 800100c:	40006400 	.word	0x40006400

08001010 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001010:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_CAN_MspInit+0xa4>)
 8001014:	6802      	ldr	r2, [r0, #0]
{
 8001016:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 800101a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001020:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001024:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN)
 8001026:	d001      	beq.n	800102c <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001028:	b009      	add	sp, #36	; 0x24
 800102a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 800102c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001032:	69da      	ldr	r2, [r3, #28]
 8001034:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001038:	61da      	str	r2, [r3, #28]
 800103a:	69da      	ldr	r2, [r3, #28]
 800103c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001040:	9200      	str	r2, [sp, #0]
 8001042:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001054:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001058:	2302      	movs	r3, #2
 800105a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001062:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001064:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001066:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f002 fbaa 	bl	80037c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8001070:	4622      	mov	r2, r4
 8001072:	4621      	mov	r1, r4
 8001074:	2013      	movs	r0, #19
 8001076:	f002 fa2b 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 800107a:	2013      	movs	r0, #19
 800107c:	f002 fa66 	bl	800354c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001080:	4622      	mov	r2, r4
 8001082:	4621      	mov	r1, r4
 8001084:	2014      	movs	r0, #20
 8001086:	f002 fa23 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800108a:	2014      	movs	r0, #20
 800108c:	f002 fa5e 	bl	800354c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 8001090:	4622      	mov	r2, r4
 8001092:	2101      	movs	r1, #1
 8001094:	2015      	movs	r0, #21
 8001096:	f002 fa1b 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800109a:	2015      	movs	r0, #21
 800109c:	f002 fa56 	bl	800354c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 80010a0:	4622      	mov	r2, r4
 80010a2:	2101      	movs	r1, #1
 80010a4:	2016      	movs	r0, #22
 80010a6:	f002 fa13 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80010aa:	2016      	movs	r0, #22
 80010ac:	f002 fa4e 	bl	800354c <HAL_NVIC_EnableIRQ>
}
 80010b0:	b009      	add	sp, #36	; 0x24
 80010b2:	bd30      	pop	{r4, r5, pc}
 80010b4:	40006400 	.word	0x40006400

080010b8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_DMA_Init+0x30>)
{
 80010ba:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010bc:	6959      	ldr	r1, [r3, #20]
 80010be:	f041 0101 	orr.w	r1, r1, #1
 80010c2:	6159      	str	r1, [r3, #20]
 80010c4:	695b      	ldr	r3, [r3, #20]
{
 80010c6:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010d0:	200b      	movs	r0, #11
 80010d2:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010d4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010d6:	f002 f9fb 	bl	80034d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010da:	200b      	movs	r0, #11

}
 80010dc:	b003      	add	sp, #12
 80010de:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010e2:	f002 ba33 	b.w	800354c <HAL_NVIC_EnableIRQ>
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ec:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	2400      	movs	r4, #0
{
 80010f2:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80010f8:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fc:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <MX_GPIO_Init+0xc4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001100:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001102:	4d2c      	ldr	r5, [pc, #176]	; (80011b4 <MX_GPIO_Init+0xc8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001104:	4e2c      	ldr	r6, [pc, #176]	; (80011b8 <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	695a      	ldr	r2, [r3, #20]
 800110e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001124:	9201      	str	r2, [sp, #4]
 8001126:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001136:	9202      	str	r2, [sp, #8]
 8001138:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	695a      	ldr	r2, [r3, #20]
 800113c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001148:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800114a:	4622      	mov	r2, r4
 800114c:	4628      	mov	r0, r5
 800114e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001154:	f002 fc26 	bl	80039a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001158:	4622      	mov	r2, r4
 800115a:	4630      	mov	r0, r6
 800115c:	21c0      	movs	r1, #192	; 0xc0
 800115e:	f002 fc21 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001162:	f04f 0800 	mov.w	r8, #0
 8001166:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800116a:	2301      	movs	r3, #1
 800116c:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	a904      	add	r1, sp, #16
 8001172:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001174:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001178:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f002 fb22 	bl	80037c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	4628      	mov	r0, r5
 8001184:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001186:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001188:	220f      	movs	r2, #15
 800118a:	2300      	movs	r3, #0
 800118c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001190:	f002 fb18 	bl	80037c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001194:	22c0      	movs	r2, #192	; 0xc0
 8001196:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	a904      	add	r1, sp, #16
 800119a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800119c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80011a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	f002 fb0e 	bl	80037c4 <HAL_GPIO_Init>

}
 80011a8:	b00a      	add	sp, #40	; 0x28
 80011aa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000
 80011b4:	48000800 	.word	0x48000800
 80011b8:	48000400 	.word	0x48000400

080011bc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int f getc(FILE *f)
#endif

void __io_putchar(uint8_t ch)
{
 80011bc:	b500      	push	{lr}
	HAL_UART_Transmit(&huart1, &ch, 1, 1);
 80011be:	2301      	movs	r3, #1
{
 80011c0:	b083      	sub	sp, #12
 80011c2:	4684      	mov	ip, r0
	HAL_UART_Transmit(&huart1, &ch, 1, 1);
 80011c4:	461a      	mov	r2, r3
 80011c6:	f10d 0107 	add.w	r1, sp, #7
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <__io_putchar+0x20>)
{
 80011cc:	f88d c007 	strb.w	ip, [sp, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 1);
 80011d0:	f004 fb4a 	bl	8005868 <HAL_UART_Transmit>
}
 80011d4:	b003      	add	sp, #12
 80011d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80011da:	bf00      	nop
 80011dc:	20001504 	.word	0x20001504

080011e0 <HAL_UART_RxCpltCallback>:
uint8_t uart_rx_buf[10] = {0};
bool uart_rx_flag = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uart_rx_flag = true;
 80011e0:	4b01      	ldr	r3, [pc, #4]	; (80011e8 <HAL_UART_RxCpltCallback+0x8>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
}
 80011e6:	4770      	bx	lr
 80011e8:	200013fa 	.word	0x200013fa
 80011ec:	00000000 	.word	0x00000000

080011f0 <setOutputPhaseRadian>:
	return rad_to_sin_cnv_array[(uint8_t)(rad / (M_PI * 2) * 256)];
}

int voltage_propotional_cnt;
void setOutputPhaseRadian(float out_rad, float voltage)
{
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	eef0 0ae0 	vabs.f32	s1, s1
	const int pwm_cnt_centor = 700;
	if (voltage < 0)
	{
		voltage = -voltage;
	}
	if (voltage > 24)
 80011f6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80011fa:	eef4 0ae7 	vcmpe.f32	s1, s15
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	ee10 4a10 	vmov	r4, s0
	if (voltage > 24)
 800120a:	dc5c      	bgt.n	80012c6 <setOutputPhaseRadian+0xd6>
	{
		voltage = 0;
	}
	voltage_propotional_cnt = voltage / 24 * pwm_cnt_centor;
 800120c:	eddf 7a34 	vldr	s15, [pc, #208]	; 80012e0 <setOutputPhaseRadian+0xf0>
 8001210:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8001214:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8001218:	ee17 3a90 	vmov	r3, s15
 800121c:	4d31      	ldr	r5, [pc, #196]	; (80012e4 <setOutputPhaseRadian+0xf4>)
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_cnt_centor + voltage_propotional_cnt * sin(out_rad - M_PI * 2 / 3));
	  */

	// not effect

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800121e:	4832      	ldr	r0, [pc, #200]	; (80012e8 <setOutputPhaseRadian+0xf8>)
	voltage_propotional_cnt = voltage / 24 * pwm_cnt_centor;
 8001220:	602b      	str	r3, [r5, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2140      	movs	r1, #64	; 0x40
 8001226:	f002 fbbd 	bl	80039a4 <HAL_GPIO_WritePin>
	uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff f98c 	bl	8000548 <__aeabi_f2d>
 8001230:	a327      	add	r3, pc, #156	; (adr r3, 80012d0 <setOutputPhaseRadian+0xe0>)
 8001232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001236:	f7ff f829 	bl	800028c <__adddf3>
 800123a:	a327      	add	r3, pc, #156	; (adr r3, 80012d8 <setOutputPhaseRadian+0xe8>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f9da 	bl	80005f8 <__aeabi_dmul>
 8001244:	f7ff fcb0 	bl	8000ba8 <__aeabi_d2uiz>
	htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <setOutputPhaseRadian+0xfc>)
 800124a:	ed95 8a00 	vldr	s16, [r5]
 800124e:	eddf 7a28 	vldr	s15, [pc, #160]	; 80012f0 <setOutputPhaseRadian+0x100>
 8001252:	4a28      	ldr	r2, [pc, #160]	; (80012f4 <setOutputPhaseRadian+0x104>)
	htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
	htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
	htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
	htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
	htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
	print_mapped = rad_mapped;
 8001254:	4d28      	ldr	r5, [pc, #160]	; (80012f8 <setOutputPhaseRadian+0x108>)
	htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8001256:	b2c0      	uxtb	r0, r0
 8001258:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 800125c:	ed91 7a00 	vldr	s14, [r1]
	htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8001260:	edd1 5a55 	vldr	s11, [r1, #340]	; 0x154
	htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8001264:	ed91 6aaa 	vldr	s12, [r1, #680]	; 0x2a8
	htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <setOutputPhaseRadian+0x10c>)
	print_mapped = rad_mapped;
 800126a:	4925      	ldr	r1, [pc, #148]	; (8001300 <setOutputPhaseRadian+0x110>)
	htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 800126c:	6810      	ldr	r0, [r2, #0]
	htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 800126e:	681c      	ldr	r4, [r3, #0]
	print_mapped = rad_mapped;
 8001270:	f8b1 c000 	ldrh.w	ip, [r1]
 8001274:	f8a5 c000 	strh.w	ip, [r5]
	htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8001278:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800127c:	eef0 6a67 	vmov.f32	s13, s15
 8001280:	eee8 6a07 	vfma.f32	s13, s16, s14
	//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwm_cnt_centor + voltage_propotional_cnt * fast_sin(out_rad));
	//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwm_cnt_centor + voltage_propotional_cnt * fast_sin(out_rad + M_PI * 2 / 3));
	//__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm_cnt_centor + voltage_propotional_cnt * fast_sin(out_rad - M_PI * 2 / 3));
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	2140      	movs	r1, #64	; 0x40
	htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8001288:	eeb0 7a67 	vmov.f32	s14, s15
 800128c:	eea8 7a25 	vfma.f32	s14, s16, s11
	htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8001290:	eee8 7a06 	vfma.f32	s15, s16, s12
}
 8001294:	ecbd 8b02 	vpop	{d8}
	htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8001298:	eefc 6ae6 	vcvt.u32.f32	s13, s13
	htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 800129c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80012a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80012a4:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
	htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80012a8:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
	htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80012ac:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
	htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80012b0:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <setOutputPhaseRadian+0xf8>)
	htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80012b6:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
	htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80012ba:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
}
 80012be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80012c2:	f002 bb6f 	b.w	80039a4 <HAL_GPIO_WritePin>
 80012c6:	2300      	movs	r3, #0
 80012c8:	e7a8      	b.n	800121c <setOutputPhaseRadian+0x2c>
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	54442d18 	.word	0x54442d18
 80012d4:	402921fb 	.word	0x402921fb
 80012d8:	3d5bfeba 	.word	0x3d5bfeba
 80012dc:	40444ad1 	.word	0x40444ad1
 80012e0:	41e95556 	.word	0x41e95556
 80012e4:	20001400 	.word	0x20001400
 80012e8:	48000400 	.word	0x48000400
 80012ec:	200003ec 	.word	0x200003ec
 80012f0:	442f0000 	.word	0x442f0000
 80012f4:	200014b8 	.word	0x200014b8
 80012f8:	200003e8 	.word	0x200003e8
 80012fc:	2000146c 	.word	0x2000146c
 8001300:	200003ea 	.word	0x200003ea
 8001304:	00000000 	.word	0x00000000

08001308 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001308:	b538      	push	{r3, r4, r5, lr}
	static uint32_t speed_calc_cycle = 0;
	static int32_t pre_diff_cnt = 0, diff_accel;
	if (htim == &htim8)
 800130a:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800130c:	4283      	cmp	r3, r0
 800130e:	d000      	beq.n	8001312 <HAL_TIM_PeriodElapsedCallback+0xa>
			{
				diff_accel_min = diff_accel;
			}
		}
	}
}
 8001310:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	483d      	ldr	r0, [pc, #244]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001318:	f002 fb44 	bl	80039a4 <HAL_GPIO_WritePin>
		enc_raw = hspi1.Instance->DR;
 800131c:	4a3c      	ldr	r2, [pc, #240]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800131e:	6812      	ldr	r2, [r2, #0]
		hspi1.Instance->DR = 0;
 8001320:	2300      	movs	r3, #0
		enc_raw = hspi1.Instance->DR;
 8001322:	68d1      	ldr	r1, [r2, #12]
		hspi1.Instance->DR = 0;
 8001324:	60d3      	str	r3, [r2, #12]
		while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001326:	6893      	ldr	r3, [r2, #8]
 8001328:	07db      	lsls	r3, r3, #31
 800132a:	d5fc      	bpl.n	8001326 <HAL_TIM_PeriodElapsedCallback+0x1e>
		enc_raw = hspi1.Instance->DR & 0xFFFC;
 800132c:	68d2      	ldr	r2, [r2, #12]
		enc_elec = 5461 - (enc_raw % 5461);
 800132e:	4b39      	ldr	r3, [pc, #228]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x10c>)
		enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001330:	4c39      	ldr	r4, [pc, #228]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001332:	f022 0203 	bic.w	r2, r2, #3
 8001336:	b292      	uxth	r2, r2
		enc_elec = 5461 - (enc_raw % 5461);
 8001338:	fba3 1302 	umull	r1, r3, r3, r2
 800133c:	1ad1      	subs	r1, r2, r3
 800133e:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8001342:	0b1b      	lsrs	r3, r3, #12
 8001344:	f241 5155 	movw	r1, #5461	; 0x1555
 8001348:	fb01 2313 	mls	r3, r1, r3, r2
 800134c:	1acb      	subs	r3, r1, r3
 800134e:	b29b      	uxth	r3, r3
		output_radian = (float)enc_elec / 5461 * 2 * M_PI;
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001358:	eddf 7a30 	vldr	s15, [pc, #192]	; 800141c <HAL_TIM_PeriodElapsedCallback+0x114>
		enc_elec = 5461 - (enc_raw % 5461);
 800135c:	4930      	ldr	r1, [pc, #192]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x118>)
		enc_raw = hspi1.Instance->DR & 0xFFFC;
 800135e:	8022      	strh	r2, [r4, #0]
		output_radian = (float)enc_elec / 5461 * 2 * M_PI;
 8001360:	ee67 7a27 	vmul.f32	s15, s14, s15
		enc_elec = 5461 - (enc_raw % 5461);
 8001364:	800b      	strh	r3, [r1, #0]
		output_radian = (float)enc_elec / 5461 * 2 * M_PI;
 8001366:	ee17 0a90 	vmov	r0, s15
 800136a:	f7ff f8ed 	bl	8000548 <__aeabi_f2d>
 800136e:	a324      	add	r3, pc, #144	; (adr r3, 8001400 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f940 	bl	80005f8 <__aeabi_dmul>
 8001378:	f7ff fc36 	bl	8000be8 <__aeabi_d2f>
		setOutputPhaseRadian(output_radian + offset_radian, output_voltage);
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800137e:	4a2a      	ldr	r2, [pc, #168]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001380:	ed93 0a00 	vldr	s0, [r3]
		output_radian = (float)enc_elec / 5461 * 2 * M_PI;
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x124>)
		setOutputPhaseRadian(output_radian + offset_radian, output_voltage);
 8001386:	edd2 0a00 	vldr	s1, [r2]
		output_radian = (float)enc_elec / 5461 * 2 * M_PI;
 800138a:	6018      	str	r0, [r3, #0]
 800138c:	ee07 0a90 	vmov	s15, r0
		setOutputPhaseRadian(output_radian + offset_radian, output_voltage);
 8001390:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001394:	f7ff ff2c 	bl	80011f0 <setOutputPhaseRadian>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001398:	2201      	movs	r2, #1
 800139a:	481c      	ldr	r0, [pc, #112]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	f002 fb01 	bl	80039a4 <HAL_GPIO_WritePin>
		speed_calc_cycle++;
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013a4:	6813      	ldr	r3, [r2, #0]
 80013a6:	3301      	adds	r3, #1
		if (speed_calc_cycle >= 200)
 80013a8:	2bc7      	cmp	r3, #199	; 0xc7
 80013aa:	d921      	bls.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0xe8>
			int temp_diff_cnt = enc_raw - pre_enc_raw;
 80013ac:	4921      	ldr	r1, [pc, #132]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80013ae:	8820      	ldrh	r0, [r4, #0]
 80013b0:	680b      	ldr	r3, [r1, #0]
			pre_enc_raw = enc_raw;
 80013b2:	6008      	str	r0, [r1, #0]
			speed_calc_cycle = 0;
 80013b4:	2400      	movs	r4, #0
			int temp_diff_cnt = enc_raw - pre_enc_raw;
 80013b6:	1ac3      	subs	r3, r0, r3
			speed_calc_cycle = 0;
 80013b8:	6014      	str	r4, [r2, #0]
			if (temp_diff_cnt > 30000)
 80013ba:	f247 5230 	movw	r2, #30000	; 0x7530
 80013be:	4293      	cmp	r3, r2
 80013c0:	dc18      	bgt.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0xec>
			else if (temp_diff_cnt < -30000)
 80013c2:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013c4:	4293      	cmp	r3, r2
				diff_cnt = temp_diff_cnt + 65535;
 80013c6:	bfb8      	it	lt
 80013c8:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80013cc:	4a1b      	ldr	r2, [pc, #108]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013ce:	bfb8      	it	lt
 80013d0:	33ff      	addlt	r3, #255	; 0xff
				diff_cnt = temp_diff_cnt;
 80013d2:	6013      	str	r3, [r2, #0]
			diff_accel = diff_cnt - pre_diff_cnt;
 80013d4:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x138>)
			if (diff_accel > diff_accel_max)
 80013d6:	491b      	ldr	r1, [pc, #108]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x13c>)
			diff_accel = diff_cnt - pre_diff_cnt;
 80013d8:	6814      	ldr	r4, [r2, #0]
			if (diff_accel > diff_accel_max)
 80013da:	6808      	ldr	r0, [r1, #0]
			pre_diff_cnt = 0;
 80013dc:	2500      	movs	r5, #0
			diff_accel = diff_cnt - pre_diff_cnt;
 80013de:	1b1b      	subs	r3, r3, r4
			pre_diff_cnt = 0;
 80013e0:	6015      	str	r5, [r2, #0]
			if (diff_accel < diff_accel_min)
 80013e2:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x140>)
			if (diff_accel > diff_accel_max)
 80013e4:	4283      	cmp	r3, r0
				diff_accel_max = diff_accel;
 80013e6:	bfc8      	it	gt
 80013e8:	600b      	strgt	r3, [r1, #0]
			if (diff_accel < diff_accel_min)
 80013ea:	6811      	ldr	r1, [r2, #0]
 80013ec:	428b      	cmp	r3, r1
 80013ee:	da8f      	bge.n	8001310 <HAL_TIM_PeriodElapsedCallback+0x8>
				diff_accel_min = diff_accel;
 80013f0:	6013      	str	r3, [r2, #0]
}
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
				diff_cnt = temp_diff_cnt - 65535;
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013f6:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80013fa:	3bff      	subs	r3, #255	; 0xff
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e7e9      	b.n	80013d4 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8001400:	54442d18 	.word	0x54442d18
 8001404:	400921fb 	.word	0x400921fb
 8001408:	200014b8 	.word	0x200014b8
 800140c:	48000400 	.word	0x48000400
 8001410:	20001404 	.word	0x20001404
 8001414:	80060019 	.word	0x80060019
 8001418:	200003be 	.word	0x200003be
 800141c:	39c00300 	.word	0x39c00300
 8001420:	200003bc 	.word	0x200003bc
 8001424:	200003d4 	.word	0x200003d4
 8001428:	200003dc 	.word	0x200003dc
 800142c:	200003d8 	.word	0x200003d8
 8001430:	200013ec 	.word	0x200013ec
 8001434:	200003e4 	.word	0x200003e4
 8001438:	ffff8ad0 	.word	0xffff8ad0
 800143c:	200003b8 	.word	0x200003b8
 8001440:	200003e0 	.word	0x200003e0
 8001444:	200003b0 	.word	0x200003b0
 8001448:	200003b4 	.word	0x200003b4

0800144c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t can_rx_cnt = 0;
uint8_t can_rx_data[8];
CAN_RxHeaderTypeDef   can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800144c:	b508      	push	{r3, lr}
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data) != HAL_OK)
 800144e:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001452:	2100      	movs	r1, #0
 8001454:	f001 fe4c 	bl	80030f0 <HAL_CAN_GetRxMessage>
 8001458:	b108      	cbz	r0, 800145e <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800145c:	e7fe      	b.n	800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
	can_rx_cnt++;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001460:	6813      	ldr	r3, [r2, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	6013      	str	r3, [r2, #0]
}
 8001466:	bd08      	pop	{r3, pc}
 8001468:	20000394 	.word	0x20000394
 800146c:	2000038c 	.word	0x2000038c
 8001470:	20000388 	.word	0x20000388
 8001474:	00000000 	.word	0x00000000

08001478 <runMode>:
{
 8001478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800147c:	ed2d 8b02 	vpush	{d8}
	if (offset_radian > M_PI * 2)
 8001480:	4d6f      	ldr	r5, [pc, #444]	; (8001640 <runMode+0x1c8>)
{
 8001482:	b089      	sub	sp, #36	; 0x24
	if (offset_radian > M_PI * 2)
 8001484:	6828      	ldr	r0, [r5, #0]
 8001486:	f7ff f85f 	bl	8000548 <__aeabi_f2d>
 800148a:	a367      	add	r3, pc, #412	; (adr r3, 8001628 <runMode+0x1b0>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff fb42 	bl	8000b18 <__aeabi_dcmpgt>
 8001494:	b108      	cbz	r0, 800149a <runMode+0x22>
		offset_radian = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	602b      	str	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 800149a:	486a      	ldr	r0, [pc, #424]	; (8001644 <runMode+0x1cc>)
		output_voltage = 2.0;
 800149c:	4c6a      	ldr	r4, [pc, #424]	; (8001648 <runMode+0x1d0>)
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 800149e:	2101      	movs	r1, #1
 80014a0:	f002 fa7a 	bl	8003998 <HAL_GPIO_ReadPin>
 80014a4:	b910      	cbnz	r0, 80014ac <runMode+0x34>
		output_voltage = 2.0;
 80014a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014aa:	6023      	str	r3, [r4, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 80014ac:	4865      	ldr	r0, [pc, #404]	; (8001644 <runMode+0x1cc>)
 80014ae:	2102      	movs	r1, #2
 80014b0:	f002 fa72 	bl	8003998 <HAL_GPIO_ReadPin>
 80014b4:	b910      	cbnz	r0, 80014bc <runMode+0x44>
		output_voltage = -2.0;
 80014b6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80014ba:	6023      	str	r3, [r4, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 80014bc:	4861      	ldr	r0, [pc, #388]	; (8001644 <runMode+0x1cc>)
 80014be:	2104      	movs	r1, #4
 80014c0:	f002 fa6a 	bl	8003998 <HAL_GPIO_ReadPin>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d17f      	bne.n	80015c8 <runMode+0x150>
		motor_accel = 0;
 80014c8:	4e60      	ldr	r6, [pc, #384]	; (800164c <runMode+0x1d4>)
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80014ca:	485e      	ldr	r0, [pc, #376]	; (8001644 <runMode+0x1cc>)
		motor_accel = 0;
 80014cc:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80014ce:	2108      	movs	r1, #8
		output_voltage = 0;
 80014d0:	6023      	str	r3, [r4, #0]
		motor_accel = 0;
 80014d2:	6033      	str	r3, [r6, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80014d4:	f002 fa60 	bl	8003998 <HAL_GPIO_ReadPin>
 80014d8:	2800      	cmp	r0, #0
 80014da:	f000 809c 	beq.w	8001616 <runMode+0x19e>
	if (output_voltage > 0)
 80014de:	edd4 7a00 	vldr	s15, [r4]
		offset_radian = 2.4 + user_offet_radian;
 80014e2:	4b5b      	ldr	r3, [pc, #364]	; (8001650 <runMode+0x1d8>)
	if (output_voltage > 0)
 80014e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		offset_radian = 2.4 + user_offet_radian;
 80014ec:	6818      	ldr	r0, [r3, #0]
	if (output_voltage > 0)
 80014ee:	dd08      	ble.n	8001502 <runMode+0x8a>
		offset_radian = 2.4 + user_offet_radian;
 80014f0:	f7ff f82a 	bl	8000548 <__aeabi_f2d>
 80014f4:	a34e      	add	r3, pc, #312	; (adr r3, 8001630 <runMode+0x1b8>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe fec7 	bl	800028c <__adddf3>
 80014fe:	f7ff fb73 	bl	8000be8 <__aeabi_d2f>
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001502:	4b54      	ldr	r3, [pc, #336]	; (8001654 <runMode+0x1dc>)
 8001504:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001658 <runMode+0x1e0>
 8001508:	ed93 8a00 	vldr	s16, [r3]
	if (max_speed_p < spd_rps)
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <runMode+0x1e4>)
 800150e:	6028      	str	r0, [r5, #0]
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001510:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	if (max_speed_p < spd_rps)
 8001514:	edd3 7a00 	vldr	s15, [r3]
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001518:	ee28 8a07 	vmul.f32	s16, s16, s14
	if (max_speed_p < spd_rps)
 800151c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	d444      	bmi.n	80015b0 <runMode+0x138>
	if (max_speed_m > spd_rps)
 8001526:	4a4e      	ldr	r2, [pc, #312]	; (8001660 <runMode+0x1e8>)
 8001528:	edd2 7a00 	vldr	s15, [r2]
 800152c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001534:	d505      	bpl.n	8001542 <runMode+0xca>
		max_speed_m = spd_rps;
 8001536:	ed82 8a00 	vstr	s16, [r2]
		max_offset_m = offset_radian;
 800153a:	4a4a      	ldr	r2, [pc, #296]	; (8001664 <runMode+0x1ec>)
 800153c:	6010      	str	r0, [r2, #0]
		max_speed_p = 0;
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
	printf("%8d %8d ",adc_raw_array[0],adc_raw_array[1]);
 8001542:	4b49      	ldr	r3, [pc, #292]	; (8001668 <runMode+0x1f0>)
 8001544:	4849      	ldr	r0, [pc, #292]	; (800166c <runMode+0x1f4>)
 8001546:	885a      	ldrh	r2, [r3, #2]
 8001548:	8819      	ldrh	r1, [r3, #0]
	printf("raw %6d max %+8d min %+8d rps = %+7.3f offset %4.3f, voltage %+6.3f, rx %8ld \n", enc_raw >> 2, diff_accel_max, diff_accel_min, spd_rps, offset_radian, output_voltage * 2.7,can_rx_cnt);
 800154a:	4e49      	ldr	r6, [pc, #292]	; (8001670 <runMode+0x1f8>)
 800154c:	4f49      	ldr	r7, [pc, #292]	; (8001674 <runMode+0x1fc>)
	printf("%8d %8d ",adc_raw_array[0],adc_raw_array[1]);
 800154e:	f005 ff99 	bl	8007484 <iprintf>
	printf("raw %6d max %+8d min %+8d rps = %+7.3f offset %4.3f, voltage %+6.3f, rx %8ld \n", enc_raw >> 2, diff_accel_max, diff_accel_min, spd_rps, offset_radian, output_voltage * 2.7,can_rx_cnt);
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <runMode+0x200>)
 8001554:	6820      	ldr	r0, [r4, #0]
 8001556:	881c      	ldrh	r4, [r3, #0]
 8001558:	4b48      	ldr	r3, [pc, #288]	; (800167c <runMode+0x204>)
 800155a:	f8d6 9000 	ldr.w	r9, [r6]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	9306      	str	r3, [sp, #24]
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	a334      	add	r3, pc, #208	; (adr r3, 8001638 <runMode+0x1c0>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7ff f844 	bl	80005f8 <__aeabi_dmul>
 8001570:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001574:	6828      	ldr	r0, [r5, #0]
 8001576:	f8d7 8000 	ldr.w	r8, [r7]
 800157a:	f7fe ffe5 	bl	8000548 <__aeabi_f2d>
 800157e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001582:	ee18 0a10 	vmov	r0, s16
 8001586:	f7fe ffdf 	bl	8000548 <__aeabi_f2d>
 800158a:	08a4      	lsrs	r4, r4, #2
 800158c:	e9cd 0100 	strd	r0, r1, [sp]
 8001590:	464b      	mov	r3, r9
 8001592:	4642      	mov	r2, r8
 8001594:	4621      	mov	r1, r4
 8001596:	483a      	ldr	r0, [pc, #232]	; (8001680 <runMode+0x208>)
 8001598:	f005 ff74 	bl	8007484 <iprintf>
	diff_accel_max = -5000;
 800159c:	4a39      	ldr	r2, [pc, #228]	; (8001684 <runMode+0x20c>)
 800159e:	603a      	str	r2, [r7, #0]
	diff_accel_min = 5000;
 80015a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80015a4:	6033      	str	r3, [r6, #0]
}
 80015a6:	b009      	add	sp, #36	; 0x24
 80015a8:	ecbd 8b02 	vpop	{d8}
 80015ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		max_offset_p = offset_radian;
 80015b0:	4a35      	ldr	r2, [pc, #212]	; (8001688 <runMode+0x210>)
		max_speed_m = 0;
 80015b2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800168c <runMode+0x214>
		max_offset_p = offset_radian;
 80015b6:	6010      	str	r0, [r2, #0]
		max_speed_m = 0;
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <runMode+0x1e8>)
		max_speed_p = spd_rps;
 80015ba:	ed83 8a00 	vstr	s16, [r3]
		max_speed_m = 0;
 80015be:	eef0 7a47 	vmov.f32	s15, s14
 80015c2:	ed82 7a00 	vstr	s14, [r2]
 80015c6:	e7b1      	b.n	800152c <runMode+0xb4>
	output_voltage += motor_accel;
 80015c8:	4e20      	ldr	r6, [pc, #128]	; (800164c <runMode+0x1d4>)
 80015ca:	edd4 7a00 	vldr	s15, [r4]
 80015ce:	edd6 6a00 	vldr	s13, [r6]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80015d2:	481c      	ldr	r0, [pc, #112]	; (8001644 <runMode+0x1cc>)
	output_voltage += motor_accel;
 80015d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
	if (output_voltage > 20.0)
 80015d8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80015dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (output_voltage < -20.0)
 80015e4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
		motor_accel = -0.5;
 80015e8:	bfc8      	it	gt
 80015ea:	f04f 433f 	movgt.w	r3, #3204448256	; 0xbf000000
	if (output_voltage < -20.0)
 80015ee:	eef4 7ac7 	vcmpe.f32	s15, s14
		motor_accel = -0.5;
 80015f2:	bfc8      	it	gt
 80015f4:	6033      	strgt	r3, [r6, #0]
	if (output_voltage < -20.0)
 80015f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		motor_accel = 0.5;
 80015fa:	bf48      	it	mi
 80015fc:	f04f 537c 	movmi.w	r3, #1056964608	; 0x3f000000
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 8001600:	f04f 0108 	mov.w	r1, #8
		motor_accel = 0.5;
 8001604:	bf48      	it	mi
 8001606:	6033      	strmi	r3, [r6, #0]
	output_voltage += motor_accel;
 8001608:	edc4 7a00 	vstr	s15, [r4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 800160c:	f002 f9c4 	bl	8003998 <HAL_GPIO_ReadPin>
 8001610:	2800      	cmp	r0, #0
 8001612:	f47f af64 	bne.w	80014de <runMode+0x66>
		motor_accel = 0.1;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <runMode+0x218>)
		printf("start auto speed!!\n");
 8001618:	481e      	ldr	r0, [pc, #120]	; (8001694 <runMode+0x21c>)
		motor_accel = 0.1;
 800161a:	6033      	str	r3, [r6, #0]
		printf("start auto speed!!\n");
 800161c:	f005 ffb8 	bl	8007590 <puts>
 8001620:	e75d      	b.n	80014de <runMode+0x66>
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	54442d18 	.word	0x54442d18
 800162c:	401921fb 	.word	0x401921fb
 8001630:	33333333 	.word	0x33333333
 8001634:	40033333 	.word	0x40033333
 8001638:	9999999a 	.word	0x9999999a
 800163c:	40059999 	.word	0x40059999
 8001640:	200003d4 	.word	0x200003d4
 8001644:	48000800 	.word	0x48000800
 8001648:	200003dc 	.word	0x200003dc
 800164c:	200003d0 	.word	0x200003d0
 8001650:	200013fc 	.word	0x200013fc
 8001654:	200003b8 	.word	0x200003b8
 8001658:	3ca280a2 	.word	0x3ca280a2
 800165c:	200003cc 	.word	0x200003cc
 8001660:	200003c8 	.word	0x200003c8
 8001664:	200003c0 	.word	0x200003c0
 8001668:	2000035c 	.word	0x2000035c
 800166c:	08009724 	.word	0x08009724
 8001670:	200003b4 	.word	0x200003b4
 8001674:	200003b0 	.word	0x200003b0
 8001678:	200003be 	.word	0x200003be
 800167c:	20000388 	.word	0x20000388
 8001680:	08009730 	.word	0x08009730
 8001684:	ffffec78 	.word	0xffffec78
 8001688:	200003c4 	.word	0x200003c4
 800168c:	00000000 	.word	0x00000000
 8001690:	3dcccccd 	.word	0x3dcccccd
 8001694:	08009710 	.word	0x08009710

08001698 <calibrationMode>:
{
 8001698:	b530      	push	{r4, r5, lr}
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 800169a:	4c1f      	ldr	r4, [pc, #124]	; (8001718 <calibrationMode+0x80>)
{
 800169c:	b085      	sub	sp, #20
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 800169e:	6820      	ldr	r0, [r4, #0]
 80016a0:	f7fe ff52 	bl	8000548 <__aeabi_f2d>
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <calibrationMode+0x84>)
 80016a6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001720 <calibrationMode+0x88>
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 80016b2:	4602      	mov	r2, r0
 80016b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b8:	460b      	mov	r3, r1
 80016ba:	ee17 0a90 	vmov	r0, s15
 80016be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016c2:	f7fe ff41 	bl	8000548 <__aeabi_f2d>
 80016c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80016ca:	e9cd 0100 	strd	r0, r1, [sp]
 80016ce:	4815      	ldr	r0, [pc, #84]	; (8001724 <calibrationMode+0x8c>)
 80016d0:	f005 fed8 	bl	8007484 <iprintf>
	offset_radian += 0.05;
 80016d4:	6820      	ldr	r0, [r4, #0]
 80016d6:	f7fe ff37 	bl	8000548 <__aeabi_f2d>
 80016da:	a30b      	add	r3, pc, #44	; (adr r3, 8001708 <calibrationMode+0x70>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe fdd4 	bl	800028c <__adddf3>
 80016e4:	f7ff fa80 	bl	8000be8 <__aeabi_d2f>
 80016e8:	4605      	mov	r5, r0
	if (offset_radian > M_PI * 2)
 80016ea:	f7fe ff2d 	bl	8000548 <__aeabi_f2d>
 80016ee:	a308      	add	r3, pc, #32	; (adr r3, 8001710 <calibrationMode+0x78>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7ff fa10 	bl	8000b18 <__aeabi_dcmpgt>
 80016f8:	b910      	cbnz	r0, 8001700 <calibrationMode+0x68>
	offset_radian += 0.05;
 80016fa:	6025      	str	r5, [r4, #0]
}
 80016fc:	b005      	add	sp, #20
 80016fe:	bd30      	pop	{r4, r5, pc}
		offset_radian = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	6023      	str	r3, [r4, #0]
}
 8001704:	b005      	add	sp, #20
 8001706:	bd30      	pop	{r4, r5, pc}
 8001708:	9999999a 	.word	0x9999999a
 800170c:	3fa99999 	.word	0x3fa99999
 8001710:	54442d18 	.word	0x54442d18
 8001714:	401921fb 	.word	0x401921fb
 8001718:	200003d4 	.word	0x200003d4
 800171c:	200003b8 	.word	0x200003b8
 8001720:	3ca280a2 	.word	0x3ca280a2
 8001724:	08009780 	.word	0x08009780

08001728 <SystemClock_Config>:
{
 8001728:	b510      	push	{r4, lr}
 800172a:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172c:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172e:	223c      	movs	r2, #60	; 0x3c
 8001730:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001732:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001736:	e9cd 1101 	strd	r1, r1, [sp, #4]
 800173a:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173e:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001740:	9100      	str	r1, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001744:	f005 fa2c 	bl	8006ba0 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001748:	2201      	movs	r2, #1
 800174a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001752:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001754:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001756:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800175a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001760:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001764:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001766:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001768:	f002 f922 	bl	80039b0 <HAL_RCC_OscConfig>
 800176c:	b108      	cbz	r0, 8001772 <SystemClock_Config+0x4a>
 800176e:	b672      	cpsid	i
	while (1)
 8001770:	e7fe      	b.n	8001770 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001772:	220f      	movs	r2, #15
 8001774:	2302      	movs	r3, #2
 8001776:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001780:	2200      	movs	r2, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001782:	4621      	mov	r1, r4
 8001784:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001786:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800178a:	f002 fbf9 	bl	8003f80 <HAL_RCC_ClockConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	b108      	cbz	r0, 8001796 <SystemClock_Config+0x6e>
 8001792:	b672      	cpsid	i
	while (1)
 8001794:	e7fe      	b.n	8001794 <SystemClock_Config+0x6c>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001796:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80017c0 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800179a:	f243 1101 	movw	r1, #12545	; 0x3101
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 800179e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a2:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80017a4:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80017a8:	9110      	str	r1, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80017aa:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80017ac:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ae:	f002 fd41 	bl	8004234 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	b108      	cbz	r0, 80017b8 <SystemClock_Config+0x90>
 80017b4:	b672      	cpsid	i
	while (1)
 80017b6:	e7fe      	b.n	80017b6 <SystemClock_Config+0x8e>
}
 80017b8:	b020      	add	sp, #128	; 0x80
 80017ba:	bd10      	pop	{r4, pc}
 80017bc:	f3af 8000 	nop.w
	...

080017c8 <main>:
{
 80017c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017cc:	ed2d 8b02 	vpush	{d8}
 80017d0:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80017d2:	f000 fd85 	bl	80022e0 <HAL_Init>
  SystemClock_Config();
 80017d6:	f7ff ffa7 	bl	8001728 <SystemClock_Config>
  MX_GPIO_Init();
 80017da:	f7ff fc87 	bl	80010ec <MX_GPIO_Init>
  MX_DMA_Init();
 80017de:	f7ff fc6b 	bl	80010b8 <MX_DMA_Init>
  MX_ADC1_Init();
 80017e2:	f7ff fa51 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017e6:	f7ff faaf 	bl	8000d48 <MX_ADC2_Init>
  MX_ADC3_Init();
 80017ea:	f7ff faf9 	bl	8000de0 <MX_ADC3_Init>
  MX_CAN_Init();
 80017ee:	f7ff fbf1 	bl	8000fd4 <MX_CAN_Init>
  MX_SPI1_Init();
 80017f2:	f000 f9d9 	bl	8001ba8 <MX_SPI1_Init>
  MX_TIM1_Init();
 80017f6:	f000 fb9f 	bl	8001f38 <MX_TIM1_Init>
  MX_TIM8_Init();
 80017fa:	f000 fc2d 	bl	8002058 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80017fe:	f000 fcc7 	bl	8002190 <MX_USART1_UART_Init>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001802:	2100      	movs	r1, #0
 8001804:	48b4      	ldr	r0, [pc, #720]	; (8001ad8 <main+0x310>)
		rad_to_sin_cnv_array[i] = sin(temp_rad);
 8001806:	4db5      	ldr	r5, [pc, #724]	; (8001adc <main+0x314>)
		float temp_rad = (float)i / 256 * M_PI * 2;
 8001808:	ed9f 8ab5 	vldr	s16, [pc, #724]	; 8001ae0 <main+0x318>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800180c:	f001 f83a 	bl	8002884 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc_raw_array,2);
 8001810:	49b4      	ldr	r1, [pc, #720]	; (8001ae4 <main+0x31c>)
 8001812:	48b1      	ldr	r0, [pc, #708]	; (8001ad8 <main+0x310>)
 8001814:	2202      	movs	r2, #2
 8001816:	f000 ff89 	bl	800272c <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800181a:	48b3      	ldr	r0, [pc, #716]	; (8001ae8 <main+0x320>)
 800181c:	2201      	movs	r2, #1
 800181e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001822:	f002 f8bf 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001826:	48b0      	ldr	r0, [pc, #704]	; (8001ae8 <main+0x320>)
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800182e:	f002 f8b9 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001832:	2201      	movs	r2, #1
 8001834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001838:	48ab      	ldr	r0, [pc, #684]	; (8001ae8 <main+0x320>)
 800183a:	f002 f8b3 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800183e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001842:	f000 fd71 	bl	8002328 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001846:	48a8      	ldr	r0, [pc, #672]	; (8001ae8 <main+0x320>)
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800184e:	f002 f8a9 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001852:	48a5      	ldr	r0, [pc, #660]	; (8001ae8 <main+0x320>)
 8001854:	2200      	movs	r2, #0
 8001856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800185a:	f002 f8a3 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800185e:	48a2      	ldr	r0, [pc, #648]	; (8001ae8 <main+0x320>)
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001866:	f002 f89d 	bl	80039a4 <HAL_GPIO_WritePin>
	printf("Orion VV driver V1 start! \n");
 800186a:	48a0      	ldr	r0, [pc, #640]	; (8001aec <main+0x324>)
 800186c:	f005 fe90 	bl	8007590 <puts>
		float temp_rad = (float)i / 256 * M_PI * 2;
 8001870:	a795      	add	r7, pc, #596	; (adr r7, 8001ac8 <main+0x300>)
 8001872:	e9d7 6700 	ldrd	r6, r7, [r7]
		rad_to_sin_cnv_array[i] = sin(temp_rad);
 8001876:	2300      	movs	r3, #0
 8001878:	f845 3b04 	str.w	r3, [r5], #4
	for (int i = 0; i < 1024; i++)
 800187c:	2401      	movs	r4, #1
		float temp_rad = (float)i / 256 * M_PI * 2;
 800187e:	ee07 4a90 	vmov	s15, r4
 8001882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for (int i = 0; i < 1024; i++)
 8001886:	3401      	adds	r4, #1
		float temp_rad = (float)i / 256 * M_PI * 2;
 8001888:	ee67 7a88 	vmul.f32	s15, s15, s16
 800188c:	ee17 0a90 	vmov	r0, s15
 8001890:	f7fe fe5a 	bl	8000548 <__aeabi_f2d>
 8001894:	4632      	mov	r2, r6
 8001896:	463b      	mov	r3, r7
 8001898:	f7fe feae 	bl	80005f8 <__aeabi_dmul>
 800189c:	f7ff f9a4 	bl	8000be8 <__aeabi_d2f>
		rad_to_sin_cnv_array[i] = sin(temp_rad);
 80018a0:	f7fe fe52 	bl	8000548 <__aeabi_f2d>
 80018a4:	ec41 0b10 	vmov	d0, r0, r1
 80018a8:	f004 f906 	bl	8005ab8 <sin>
 80018ac:	ec51 0b10 	vmov	r0, r1, d0
 80018b0:	f7ff f99a 	bl	8000be8 <__aeabi_d2f>
	for (int i = 0; i < 1024; i++)
 80018b4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		rad_to_sin_cnv_array[i] = sin(temp_rad);
 80018b8:	f845 0b04 	str.w	r0, [r5], #4
	for (int i = 0; i < 1024; i++)
 80018bc:	d1df      	bne.n	800187e <main+0xb6>
	enc_raw = hspi1.Instance->DR;
 80018be:	4b8c      	ldr	r3, [pc, #560]	; (8001af0 <main+0x328>)
 80018c0:	498c      	ldr	r1, [pc, #560]	; (8001af4 <main+0x32c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68d8      	ldr	r0, [r3, #12]
	__HAL_SPI_ENABLE(&hspi1);
 80018c6:	681c      	ldr	r4, [r3, #0]
	enc_raw = hspi1.Instance->DR;
 80018c8:	8008      	strh	r0, [r1, #0]
	__HAL_SPI_ENABLE(&hspi1);
 80018ca:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80018ce:	601c      	str	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	4888      	ldr	r0, [pc, #544]	; (8001af8 <main+0x330>)
 80018d6:	f002 f865 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Init(&htim8);
 80018da:	4888      	ldr	r0, [pc, #544]	; (8001afc <main+0x334>)
 80018dc:	f002 ff0c 	bl	80046f8 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80018e0:	2100      	movs	r1, #0
 80018e2:	4886      	ldr	r0, [pc, #536]	; (8001afc <main+0x334>)
 80018e4:	f002 ff90 	bl	8004808 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80018e8:	2100      	movs	r1, #0
 80018ea:	4884      	ldr	r0, [pc, #528]	; (8001afc <main+0x334>)
 80018ec:	f003 fa52 	bl	8004d94 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80018f0:	2104      	movs	r1, #4
 80018f2:	4882      	ldr	r0, [pc, #520]	; (8001afc <main+0x334>)
 80018f4:	f002 ff88 	bl	8004808 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80018f8:	2104      	movs	r1, #4
 80018fa:	4880      	ldr	r0, [pc, #512]	; (8001afc <main+0x334>)
 80018fc:	f003 fa4a 	bl	8004d94 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001900:	2108      	movs	r1, #8
 8001902:	487e      	ldr	r0, [pc, #504]	; (8001afc <main+0x334>)
 8001904:	f002 ff80 	bl	8004808 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8001908:	2108      	movs	r1, #8
 800190a:	487c      	ldr	r0, [pc, #496]	; (8001afc <main+0x334>)
 800190c:	f003 fa42 	bl	8004d94 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001910:	2100      	movs	r1, #0
 8001912:	487b      	ldr	r0, [pc, #492]	; (8001b00 <main+0x338>)
 8001914:	f002 ff78 	bl	8004808 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001918:	2100      	movs	r1, #0
 800191a:	4879      	ldr	r0, [pc, #484]	; (8001b00 <main+0x338>)
 800191c:	f003 fa3a 	bl	8004d94 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001920:	2104      	movs	r1, #4
 8001922:	4877      	ldr	r0, [pc, #476]	; (8001b00 <main+0x338>)
 8001924:	f002 ff70 	bl	8004808 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001928:	2104      	movs	r1, #4
 800192a:	4875      	ldr	r0, [pc, #468]	; (8001b00 <main+0x338>)
 800192c:	f003 fa32 	bl	8004d94 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001930:	2108      	movs	r1, #8
 8001932:	4873      	ldr	r0, [pc, #460]	; (8001b00 <main+0x338>)
 8001934:	f002 ff68 	bl	8004808 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001938:	2108      	movs	r1, #8
 800193a:	4871      	ldr	r0, [pc, #452]	; (8001b00 <main+0x338>)
 800193c:	f003 fa2a 	bl	8004d94 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8001940:	486f      	ldr	r0, [pc, #444]	; (8001b00 <main+0x338>)
 8001942:	f002 fe87 	bl	8004654 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8001946:	486d      	ldr	r0, [pc, #436]	; (8001afc <main+0x334>)
 8001948:	f002 fe84 	bl	8004654 <HAL_TIM_Base_Start_IT>
	sFilterConfig.FilterIdHigh = 0x100<<5;
 800194c:	f44f 5400 	mov.w	r4, #8192	; 0x2000
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8001950:	496c      	ldr	r1, [pc, #432]	; (8001b04 <main+0x33c>)
 8001952:	486d      	ldr	r0, [pc, #436]	; (8001b08 <main+0x340>)
 8001954:	2201      	movs	r2, #1
	sFilterConfig.FilterIdHigh = 0x100<<5;
 8001956:	f44f 45c0 	mov.w	r5, #24576	; 0x6000
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800195a:	f003 fb11 	bl	8004f80 <HAL_UART_Receive_IT>
	sFilterConfig.FilterIdHigh = 0x100<<5;
 800195e:	e9cd 4500 	strd	r4, r5, [sp]
 8001962:	f44f 7400 	mov.w	r4, #512	; 0x200
 8001966:	f44f 5508 	mov.w	r5, #8704	; 0x2200
 800196a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800196e:	2201      	movs	r2, #1
 8001970:	2300      	movs	r3, #0
 8001972:	2400      	movs	r4, #0
 8001974:	2500      	movs	r5, #0
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8001976:	4865      	ldr	r0, [pc, #404]	; (8001b0c <main+0x344>)
 8001978:	4669      	mov	r1, sp
	sFilterConfig.FilterIdHigh = 0x100<<5;
 800197a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800197e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001982:	e9cd 2308 	strd	r2, r3, [sp, #32]
	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8001986:	f001 faa5 	bl	8002ed4 <HAL_CAN_ConfigFilter>
 800198a:	b108      	cbz	r0, 8001990 <main+0x1c8>
 800198c:	b672      	cpsid	i
	while (1)
 800198e:	e7fe      	b.n	800198e <main+0x1c6>
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8001990:	485e      	ldr	r0, [pc, #376]	; (8001b0c <main+0x344>)
 8001992:	2102      	movs	r1, #2
 8001994:	f001 fc36 	bl	8003204 <HAL_CAN_ActivateNotification>
 8001998:	b108      	cbz	r0, 800199e <main+0x1d6>
 800199a:	b672      	cpsid	i
	while (1)
 800199c:	e7fe      	b.n	800199c <main+0x1d4>
	  HAL_CAN_Start(&hcan);
 800199e:	485b      	ldr	r0, [pc, #364]	; (8001b0c <main+0x344>)
 80019a0:	4d5b      	ldr	r5, [pc, #364]	; (8001b10 <main+0x348>)
 80019a2:	f8df a160 	ldr.w	sl, [pc, #352]	; 8001b04 <main+0x33c>
 80019a6:	4e5b      	ldr	r6, [pc, #364]	; (8001b14 <main+0x34c>)
 80019a8:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8001b38 <main+0x370>
 80019ac:	4c5a      	ldr	r4, [pc, #360]	; (8001b18 <main+0x350>)
 80019ae:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001b24 <main+0x35c>
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 80019b2:	4f5a      	ldr	r7, [pc, #360]	; (8001b1c <main+0x354>)
	  HAL_CAN_Start(&hcan);
 80019b4:	f001 fb06 	bl	8002fc4 <HAL_CAN_Start>
		if (uart_rx_flag)
 80019b8:	782b      	ldrb	r3, [r5, #0]
 80019ba:	b34b      	cbz	r3, 8001a10 <main+0x248>
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80019bc:	4951      	ldr	r1, [pc, #324]	; (8001b04 <main+0x33c>)
 80019be:	4852      	ldr	r0, [pc, #328]	; (8001b08 <main+0x340>)
			uart_rx_flag = false;
 80019c0:	f04f 0800 	mov.w	r8, #0
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80019c4:	2201      	movs	r2, #1
			uart_rx_flag = false;
 80019c6:	f885 8000 	strb.w	r8, [r5]
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80019ca:	f003 fad9 	bl	8004f80 <HAL_UART_Receive_IT>
			switch (uart_rx_buf[0])
 80019ce:	f89a 3000 	ldrb.w	r3, [sl]
 80019d2:	2b30      	cmp	r3, #48	; 0x30
 80019d4:	f000 80ba 	beq.w	8001b4c <main+0x384>
 80019d8:	3b61      	subs	r3, #97	; 0x61
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	2a16      	cmp	r2, #22
 80019de:	d817      	bhi.n	8001a10 <main+0x248>
 80019e0:	2b16      	cmp	r3, #22
 80019e2:	d815      	bhi.n	8001a10 <main+0x248>
 80019e4:	e8df f003 	tbb	[pc, r3]
 80019e8:	14421453 	.word	0x14421453
 80019ec:	14141414 	.word	0x14141414
 80019f0:	39141414 	.word	0x39141414
 80019f4:	aa141414 	.word	0xaa141414
 80019f8:	140c1461 	.word	0x140c1461
 80019fc:	1414      	.short	0x1414
 80019fe:	30          	.byte	0x30
 80019ff:	00          	.byte	0x00
				output_voltage -= 0.5;
 8001a00:	eddb 7a00 	vldr	s15, [fp]
 8001a04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a0c:	edcb 7a00 	vstr	s15, [fp]
		if (calibration_mode)
 8001a10:	f896 8000 	ldrb.w	r8, [r6]
 8001a14:	f1b8 0f00 	cmp.w	r8, #0
 8001a18:	d133      	bne.n	8001a82 <main+0x2ba>
			runMode();
 8001a1a:	f7ff fd2d 	bl	8001478 <runMode>
			HAL_Delay(1);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 fc82 	bl	8002328 <HAL_Delay>
			can_data[0] = 0;
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <main+0x358>)
 8001a26:	f8c9 3000 	str.w	r3, [r9]
			can_header.RTR = CAN_RTR_DATA;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	6123      	str	r3, [r4, #16]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001a2e:	4a3d      	ldr	r2, [pc, #244]	; (8001b24 <main+0x35c>)
 8001a30:	4939      	ldr	r1, [pc, #228]	; (8001b18 <main+0x350>)
			can_header.RTR = CAN_RTR_DATA;
 8001a32:	f8c4 800c 	str.w	r8, [r4, #12]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001a36:	463b      	mov	r3, r7
 8001a38:	4834      	ldr	r0, [pc, #208]	; (8001b0c <main+0x344>)
			can_header.StdId = 0x00;
 8001a3a:	f8c4 8000 	str.w	r8, [r4]
			can_header.TransmitGlobalTime = DISABLE;
 8001a3e:	f884 8014 	strb.w	r8, [r4, #20]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001a42:	f001 faf1 	bl	8003028 <HAL_CAN_AddTxMessage>
 8001a46:	e7b7      	b.n	80019b8 <main+0x1f0>
				output_voltage += 0.5;
 8001a48:	eddb 7a00 	vldr	s15, [fp]
 8001a4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a54:	edcb 7a00 	vstr	s15, [fp]
				break;
 8001a58:	e7da      	b.n	8001a10 <main+0x248>
				motor_accel = 0;
 8001a5a:	4a33      	ldr	r2, [pc, #204]	; (8001b28 <main+0x360>)
				printf("stop auto speed!!\n");
 8001a5c:	4833      	ldr	r0, [pc, #204]	; (8001b2c <main+0x364>)
				motor_accel = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	6013      	str	r3, [r2, #0]
				output_voltage = 0;
 8001a62:	f8cb 3000 	str.w	r3, [fp]
				printf("stop auto speed!!\n");
 8001a66:	f005 fd93 	bl	8007590 <puts>
				break;
 8001a6a:	e7d1      	b.n	8001a10 <main+0x248>
				user_offet_radian = 0;
 8001a6c:	4a30      	ldr	r2, [pc, #192]	; (8001b30 <main+0x368>)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	6013      	str	r3, [r2, #0]
				offset_radian = 0;
 8001a72:	4a30      	ldr	r2, [pc, #192]	; (8001b34 <main+0x36c>)
 8001a74:	6013      	str	r3, [r2, #0]
				calibration_mode = true;
 8001a76:	2301      	movs	r3, #1
 8001a78:	7033      	strb	r3, [r6, #0]
				output_voltage = 2.0;
 8001a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7e:	f8cb 3000 	str.w	r3, [fp]
			calibrationMode();
 8001a82:	f7ff fe09 	bl	8001698 <calibrationMode>
			HAL_Delay(100);
 8001a86:	2064      	movs	r0, #100	; 0x64
 8001a88:	f000 fc4e 	bl	8002328 <HAL_Delay>
 8001a8c:	e794      	b.n	80019b8 <main+0x1f0>
				user_offet_radian -= 0.05;
 8001a8e:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <main+0x368>)
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	f7fe fd59 	bl	8000548 <__aeabi_f2d>
 8001a96:	a30e      	add	r3, pc, #56	; (adr r3, 8001ad0 <main+0x308>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fbf4 	bl	8000288 <__aeabi_dsub>
 8001aa0:	f7ff f8a2 	bl	8000be8 <__aeabi_d2f>
 8001aa4:	4b22      	ldr	r3, [pc, #136]	; (8001b30 <main+0x368>)
 8001aa6:	6018      	str	r0, [r3, #0]
				break;
 8001aa8:	e7b2      	b.n	8001a10 <main+0x248>
				user_offet_radian += 0.05;
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <main+0x368>)
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	f7fe fd4b 	bl	8000548 <__aeabi_f2d>
 8001ab2:	a307      	add	r3, pc, #28	; (adr r3, 8001ad0 <main+0x308>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fbe8 	bl	800028c <__adddf3>
 8001abc:	f7ff f894 	bl	8000be8 <__aeabi_d2f>
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <main+0x368>)
 8001ac2:	6018      	str	r0, [r3, #0]
				break;
 8001ac4:	e7a4      	b.n	8001a10 <main+0x248>
 8001ac6:	bf00      	nop
 8001ac8:	54442d18 	.word	0x54442d18
 8001acc:	401921fb 	.word	0x401921fb
 8001ad0:	9999999a 	.word	0x9999999a
 8001ad4:	3fa99999 	.word	0x3fa99999
 8001ad8:	20000200 	.word	0x20000200
 8001adc:	200003ec 	.word	0x200003ec
 8001ae0:	3b800000 	.word	0x3b800000
 8001ae4:	2000035c 	.word	0x2000035c
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	080097a0 	.word	0x080097a0
 8001af0:	20001404 	.word	0x20001404
 8001af4:	200003be 	.word	0x200003be
 8001af8:	48000400 	.word	0x48000400
 8001afc:	200014b8 	.word	0x200014b8
 8001b00:	2000146c 	.word	0x2000146c
 8001b04:	200013f0 	.word	0x200013f0
 8001b08:	20001504 	.word	0x20001504
 8001b0c:	20000334 	.word	0x20000334
 8001b10:	200013fa 	.word	0x200013fa
 8001b14:	20000360 	.word	0x20000360
 8001b18:	2000036c 	.word	0x2000036c
 8001b1c:	20000384 	.word	0x20000384
 8001b20:	01010000 	.word	0x01010000
 8001b24:	20000364 	.word	0x20000364
 8001b28:	200003d0 	.word	0x200003d0
 8001b2c:	080097bc 	.word	0x080097bc
 8001b30:	200013fc 	.word	0x200013fc
 8001b34:	200003d4 	.word	0x200003d4
 8001b38:	200003dc 	.word	0x200003dc
				motor_accel = 0.5;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <main+0x3c8>)
				printf("start auto speed!!\n");
 8001b3e:	4815      	ldr	r0, [pc, #84]	; (8001b94 <main+0x3cc>)
				motor_accel = 0.5;
 8001b40:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001b44:	6013      	str	r3, [r2, #0]
				printf("start auto speed!!\n");
 8001b46:	f005 fd23 	bl	8007590 <puts>
				break;
 8001b4a:	e761      	b.n	8001a10 <main+0x248>
				HAL_TIM_Base_Stop_IT(&htim1);
 8001b4c:	4c12      	ldr	r4, [pc, #72]	; (8001b98 <main+0x3d0>)
				HAL_TIM_Base_Stop_IT(&htim8);
 8001b4e:	4d13      	ldr	r5, [pc, #76]	; (8001b9c <main+0x3d4>)
				printf("enter sleep!\n");
 8001b50:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <main+0x3d8>)
 8001b52:	f005 fd1d 	bl	8007590 <puts>
				HAL_TIM_Base_Stop_IT(&htim1);
 8001b56:	4620      	mov	r0, r4
 8001b58:	f002 fdb6 	bl	80046c8 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Stop_IT(&htim8);
 8001b5c:	4628      	mov	r0, r5
 8001b5e:	f002 fdb3 	bl	80046c8 <HAL_TIM_Base_Stop_IT>
				htim8.Instance->CCR1 = 0;
 8001b62:	6829      	ldr	r1, [r5, #0]
				htim1.Instance->CCR1 = 0;
 8001b64:	6822      	ldr	r2, [r4, #0]
				htim8.Instance->CCR1 = 0;
 8001b66:	f8c1 8034 	str.w	r8, [r1, #52]	; 0x34
				htim8.Instance->CCR2 = 0;
 8001b6a:	f8c1 8038 	str.w	r8, [r1, #56]	; 0x38
				htim8.Instance->CCR3 = 0;
 8001b6e:	f8c1 803c 	str.w	r8, [r1, #60]	; 0x3c
				htim1.Instance->CCR1 = 0;
 8001b72:	f8c2 8034 	str.w	r8, [r2, #52]	; 0x34
				htim1.Instance->CCR2 = 0;
 8001b76:	f8c2 8038 	str.w	r8, [r2, #56]	; 0x38
				htim1.Instance->CCR3 = 0;
 8001b7a:	f8c2 803c 	str.w	r8, [r2, #60]	; 0x3c
				__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 8001b7e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001b80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b84:	644b      	str	r3, [r1, #68]	; 0x44
				__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 8001b86:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8001b88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
				while (1)
 8001b8e:	e7fe      	b.n	8001b8e <main+0x3c6>
 8001b90:	200003d0 	.word	0x200003d0
 8001b94:	08009710 	.word	0x08009710
 8001b98:	2000146c 	.word	0x2000146c
 8001b9c:	200014b8 	.word	0x200014b8
 8001ba0:	080097d0 	.word	0x080097d0

08001ba4 <Error_Handler>:
 8001ba4:	b672      	cpsid	i
	while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <Error_Handler+0x2>

08001ba8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ba8:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001baa:	4811      	ldr	r0, [pc, #68]	; (8001bf0 <MX_SPI1_Init+0x48>)
 8001bac:	4c11      	ldr	r4, [pc, #68]	; (8001bf4 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bae:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bb2:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bb6:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb8:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001bba:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bbe:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bc0:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001bc6:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bca:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001bce:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001bd0:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd2:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bda:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001bde:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001be0:	f002 fc3e 	bl	8004460 <HAL_SPI_Init>
 8001be4:	b900      	cbnz	r0, 8001be8 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001be6:	bd10      	pop	{r4, pc}
 8001be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001bec:	f7ff bfda 	b.w	8001ba4 <Error_Handler>
 8001bf0:	20001404 	.word	0x20001404
 8001bf4:	40013000 	.word	0x40013000

08001bf8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001bf8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_SPI_MspInit+0x70>)
 8001bfc:	6801      	ldr	r1, [r0, #0]
{
 8001bfe:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8001c02:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001c08:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001c0c:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8001c0e:	d001      	beq.n	8001c14 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c10:	b008      	add	sp, #32
 8001c12:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c18:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c1c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001c60 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c20:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	4812      	ldr	r0, [pc, #72]	; (8001c6c <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c28:	619a      	str	r2, [r3, #24]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c3a:	615a      	str	r2, [r3, #20]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c42:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c44:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c46:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c4a:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f001 fdb6 	bl	80037c4 <HAL_GPIO_Init>
}
 8001c58:	b008      	add	sp, #32
 8001c5a:	bd10      	pop	{r4, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	00000038 	.word	0x00000038
 8001c64:	00000002 	.word	0x00000002
 8001c68:	40013000 	.word	0x40013000
 8001c6c:	48000400 	.word	0x48000400

08001c70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <HAL_MspInit+0x2c>)
 8001c72:	699a      	ldr	r2, [r3, #24]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	619a      	str	r2, [r3, #24]
 8001c7a:	699a      	ldr	r2, [r3, #24]
{
 8001c7c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	f002 0201 	and.w	r2, r2, #1
 8001c82:	9200      	str	r2, [sp, #0]
 8001c84:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	69da      	ldr	r2, [r3, #28]
 8001c88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c8c:	61da      	str	r2, [r3, #28]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c98:	b002      	add	sp, #8
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <NMI_Handler>
 8001ca2:	bf00      	nop

08001ca4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <HardFault_Handler>
 8001ca6:	bf00      	nop

08001ca8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <MemManage_Handler>
 8001caa:	bf00      	nop

08001cac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <BusFault_Handler>
 8001cae:	bf00      	nop

08001cb0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler>
 8001cb2:	bf00      	nop

08001cb4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <DebugMon_Handler>:
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <PendSV_Handler>:
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop

08001cc0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc0:	f000 bb20 	b.w	8002304 <HAL_IncTick>

08001cc4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cc4:	4801      	ldr	r0, [pc, #4]	; (8001ccc <DMA1_Channel1_IRQHandler+0x8>)
 8001cc6:	f001 bd33 	b.w	8003730 <HAL_DMA_IRQHandler>
 8001cca:	bf00      	nop
 8001ccc:	200002f0 	.word	0x200002f0

08001cd0 <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001cd0:	4801      	ldr	r0, [pc, #4]	; (8001cd8 <USB_HP_CAN_TX_IRQHandler+0x8>)
 8001cd2:	f001 bac1 	b.w	8003258 <HAL_CAN_IRQHandler>
 8001cd6:	bf00      	nop
 8001cd8:	20000334 	.word	0x20000334

08001cdc <USB_LP_CAN_RX0_IRQHandler>:
 8001cdc:	4801      	ldr	r0, [pc, #4]	; (8001ce4 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001cde:	f001 babb 	b.w	8003258 <HAL_CAN_IRQHandler>
 8001ce2:	bf00      	nop
 8001ce4:	20000334 	.word	0x20000334

08001ce8 <CAN_RX1_IRQHandler>:
 8001ce8:	4801      	ldr	r0, [pc, #4]	; (8001cf0 <CAN_RX1_IRQHandler+0x8>)
 8001cea:	f001 bab5 	b.w	8003258 <HAL_CAN_IRQHandler>
 8001cee:	bf00      	nop
 8001cf0:	20000334 	.word	0x20000334

08001cf4 <CAN_SCE_IRQHandler>:
 8001cf4:	4801      	ldr	r0, [pc, #4]	; (8001cfc <CAN_SCE_IRQHandler+0x8>)
 8001cf6:	f001 baaf 	b.w	8003258 <HAL_CAN_IRQHandler>
 8001cfa:	bf00      	nop
 8001cfc:	20000334 	.word	0x20000334

08001d00 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d00:	4801      	ldr	r0, [pc, #4]	; (8001d08 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001d02:	f002 be1b 	b.w	800493c <HAL_TIM_IRQHandler>
 8001d06:	bf00      	nop
 8001d08:	2000146c 	.word	0x2000146c

08001d0c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d0c:	4801      	ldr	r0, [pc, #4]	; (8001d14 <USART1_IRQHandler+0x8>)
 8001d0e:	f003 b9c1 	b.w	8005094 <HAL_UART_IRQHandler>
 8001d12:	bf00      	nop
 8001d14:	20001504 	.word	0x20001504

08001d18 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001d18:	4801      	ldr	r0, [pc, #4]	; (8001d20 <TIM8_UP_IRQHandler+0x8>)
 8001d1a:	f002 be0f 	b.w	800493c <HAL_TIM_IRQHandler>
 8001d1e:	bf00      	nop
 8001d20:	200014b8 	.word	0x200014b8

08001d24 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001d24:	2001      	movs	r0, #1
 8001d26:	4770      	bx	lr

08001d28 <_kill>:

int _kill(int pid, int sig)
{
 8001d28:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d2a:	f004 ff0f 	bl	8006b4c <__errno>
 8001d2e:	2316      	movs	r3, #22
 8001d30:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001d32:	f04f 30ff 	mov.w	r0, #4294967295
 8001d36:	bd08      	pop	{r3, pc}

08001d38 <_exit>:

void _exit (int status)
{
 8001d38:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001d3a:	f004 ff07 	bl	8006b4c <__errno>
 8001d3e:	2316      	movs	r3, #22
 8001d40:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001d42:	e7fe      	b.n	8001d42 <_exit+0xa>

08001d44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d44:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	1e16      	subs	r6, r2, #0
 8001d48:	dd07      	ble.n	8001d5a <_read+0x16>
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001d4e:	f3af 8000 	nop.w
 8001d52:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d56:	42a5      	cmp	r5, r4
 8001d58:	d1f9      	bne.n	8001d4e <_read+0xa>
	}

return len;
}
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	bd70      	pop	{r4, r5, r6, pc}
 8001d5e:	bf00      	nop

08001d60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d60:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d62:	1e16      	subs	r6, r2, #0
 8001d64:	dd07      	ble.n	8001d76 <_write+0x16>
 8001d66:	460c      	mov	r4, r1
 8001d68:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001d6a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001d6e:	f7ff fa25 	bl	80011bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d72:	42ac      	cmp	r4, r5
 8001d74:	d1f9      	bne.n	8001d6a <_write+0xa>
	}
	return len;
}
 8001d76:	4630      	mov	r0, r6
 8001d78:	bd70      	pop	{r4, r5, r6, pc}
 8001d7a:	bf00      	nop

08001d7c <_close>:

int _close(int file)
{
	return -1;
}
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop

08001d84 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d88:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop

08001d90 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d90:	2001      	movs	r0, #1
 8001d92:	4770      	bx	lr

08001d94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d94:	2000      	movs	r0, #0
 8001d96:	4770      	bx	lr

08001d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d98:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9a:	4c0c      	ldr	r4, [pc, #48]	; (8001dcc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <_sbrk+0x38>)
 8001d9e:	490d      	ldr	r1, [pc, #52]	; (8001dd4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001da0:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da2:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001da4:	b12a      	cbz	r2, 8001db2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4410      	add	r0, r2
 8001da8:	4288      	cmp	r0, r1
 8001daa:	d807      	bhi.n	8001dbc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001dac:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001dae:	4610      	mov	r0, r2
 8001db0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001db2:	4a09      	ldr	r2, [pc, #36]	; (8001dd8 <_sbrk+0x40>)
 8001db4:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4410      	add	r0, r2
 8001db8:	4288      	cmp	r0, r1
 8001dba:	d9f7      	bls.n	8001dac <_sbrk+0x14>
    errno = ENOMEM;
 8001dbc:	f004 fec6 	bl	8006b4c <__errno>
 8001dc0:	230c      	movs	r3, #12
    return (void *)-1;
 8001dc2:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8001dc6:	6003      	str	r3, [r0, #0]
}
 8001dc8:	4610      	mov	r0, r2
 8001dca:	bd10      	pop	{r4, pc}
 8001dcc:	20001468 	.word	0x20001468
 8001dd0:	20008000 	.word	0x20008000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	200015a0 	.word	0x200015a0

08001ddc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ddc:	4a03      	ldr	r2, [pc, #12]	; (8001dec <SystemInit+0x10>)
 8001dde:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001de2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001df0:	b500      	push	{lr}

  if(tim_pwmHandle->Instance==TIM1)
 8001df2:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_TIM_PWM_MspInit+0x6c>)
 8001df4:	6803      	ldr	r3, [r0, #0]
 8001df6:	4293      	cmp	r3, r2
{
 8001df8:	b083      	sub	sp, #12
  if(tim_pwmHandle->Instance==TIM1)
 8001dfa:	d005      	beq.n	8001e08 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM8)
 8001dfc:	4a18      	ldr	r2, [pc, #96]	; (8001e60 <HAL_TIM_PWM_MspInit+0x70>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d017      	beq.n	8001e32 <HAL_TIM_PWM_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001e02:	b003      	add	sp, #12
 8001e04:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_TIM_PWM_MspInit+0x74>)
 8001e0a:	6999      	ldr	r1, [r3, #24]
 8001e0c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001e10:	6199      	str	r1, [r3, #24]
 8001e12:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e14:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e1a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e1c:	2019      	movs	r0, #25
 8001e1e:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e20:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e22:	f001 fb55 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e26:	2019      	movs	r0, #25
}
 8001e28:	b003      	add	sp, #12
 8001e2a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001e2e:	f001 bb8d 	b.w	800354c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_TIM_PWM_MspInit+0x74>)
 8001e34:	6999      	ldr	r1, [r3, #24]
 8001e36:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001e3a:	6199      	str	r1, [r3, #24]
 8001e3c:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e44:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001e46:	202c      	movs	r0, #44	; 0x2c
 8001e48:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e4a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001e4c:	f001 fb40 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001e50:	202c      	movs	r0, #44	; 0x2c
}
 8001e52:	b003      	add	sp, #12
 8001e54:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001e58:	f001 bb78 	b.w	800354c <HAL_NVIC_EnableIRQ>
 8001e5c:	40012c00 	.word	0x40012c00
 8001e60:	40013400 	.word	0x40013400
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e68:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8001e6a:	6802      	ldr	r2, [r0, #0]
 8001e6c:	492e      	ldr	r1, [pc, #184]	; (8001f28 <HAL_TIM_MspPostInit+0xc0>)
{
 8001e6e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8001e72:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001e78:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001e7c:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8001e7e:	d004      	beq.n	8001e8a <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8001e80:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_TIM_MspPostInit+0xc4>)
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d032      	beq.n	8001eec <HAL_TIM_MspPostInit+0x84>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001e86:	b00a      	add	sp, #40	; 0x28
 8001e88:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e8e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e92:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ea2:	9201      	str	r2, [sp, #4]
 8001ea4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001eac:	615a      	str	r2, [r3, #20]
 8001eae:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001eb0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001eba:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8001ebe:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ec4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f001 fc7b 	bl	80037c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ece:	2203      	movs	r2, #3
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	4816      	ldr	r0, [pc, #88]	; (8001f30 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ed8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001eda:	2200      	movs	r2, #0
 8001edc:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ee0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f001 fc6e 	bl	80037c4 <HAL_GPIO_Init>
}
 8001ee8:	b00a      	add	sp, #40	; 0x28
 8001eea:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eec:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001ef0:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8001f20 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef4:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	480f      	ldr	r0, [pc, #60]	; (8001f34 <HAL_TIM_MspPostInit+0xcc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001efc:	615a      	str	r2, [r3, #20]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f04:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f06:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001f08:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001f0a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0e:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001f10:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f001 fc57 	bl	80037c4 <HAL_GPIO_Init>
}
 8001f16:	b00a      	add	sp, #40	; 0x28
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	bf00      	nop
 8001f1c:	f3af 8000 	nop.w
 8001f20:	00001dc0 	.word	0x00001dc0
 8001f24:	00000002 	.word	0x00000002
 8001f28:	40012c00 	.word	0x40012c00
 8001f2c:	40013400 	.word	0x40013400
 8001f30:	48000400 	.word	0x48000400
 8001f34:	48000800 	.word	0x48000800

08001f38 <MX_TIM1_Init>:
{
 8001f38:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3a:	2400      	movs	r4, #0
{
 8001f3c:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f3e:	222c      	movs	r2, #44	; 0x2c
 8001f40:	4621      	mov	r1, r4
 8001f42:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f48:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001f4c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001f50:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f54:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f56:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f58:	f004 fe22 	bl	8006ba0 <memset>
  htim1.Instance = TIM1;
 8001f5c:	483c      	ldr	r0, [pc, #240]	; (8002050 <MX_TIM1_Init+0x118>)
  htim1.Init.Prescaler = 1;
 8001f5e:	4a3d      	ldr	r2, [pc, #244]	; (8002054 <MX_TIM1_Init+0x11c>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f60:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 1400;
 8001f68:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001f6c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8001f70:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f74:	f002 fbc0 	bl	80046f8 <HAL_TIM_PWM_Init>
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d147      	bne.n	800200c <MX_TIM1_Init+0xd4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2200      	movs	r2, #0
 8001f80:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f84:	4832      	ldr	r0, [pc, #200]	; (8002050 <MX_TIM1_Init+0x118>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f86:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f88:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8a:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f8c:	f002 ff66 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001f90:	2800      	cmp	r0, #0
 8001f92:	d14e      	bne.n	8002032 <MX_TIM1_Init+0xfa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f94:	2060      	movs	r0, #96	; 0x60
 8001f96:	2100      	movs	r1, #0
 8001f98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001fa4:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fa8:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001faa:	4829      	ldr	r0, [pc, #164]	; (8002050 <MX_TIM1_Init+0x118>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fac:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fae:	a904      	add	r1, sp, #16
 8001fb0:	f002 fdbc 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d139      	bne.n	800202c <MX_TIM1_Init+0xf4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fb8:	4825      	ldr	r0, [pc, #148]	; (8002050 <MX_TIM1_Init+0x118>)
 8001fba:	2204      	movs	r2, #4
 8001fbc:	a904      	add	r1, sp, #16
 8001fbe:	f002 fdb5 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8001fc2:	bb80      	cbnz	r0, 8002026 <MX_TIM1_Init+0xee>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fc4:	4822      	ldr	r0, [pc, #136]	; (8002050 <MX_TIM1_Init+0x118>)
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	a904      	add	r1, sp, #16
 8001fca:	f002 fdaf 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 8001fce:	bb38      	cbnz	r0, 8002020 <MX_TIM1_Init+0xe8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fd0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8002038 <MX_TIM1_Init+0x100>
 8001fd4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001fd8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8002040 <MX_TIM1_Init+0x108>
 8001fdc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001fe0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8002048 <MX_TIM1_Init+0x110>
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fe8:	2400      	movs	r4, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fea:	4819      	ldr	r0, [pc, #100]	; (8002050 <MX_TIM1_Init+0x118>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fec:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fee:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ff0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001ff4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001ff8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ffc:	f002 ff74 	bl	8004ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002000:	b938      	cbnz	r0, 8002012 <MX_TIM1_Init+0xda>
  HAL_TIM_MspPostInit(&htim1);
 8002002:	4813      	ldr	r0, [pc, #76]	; (8002050 <MX_TIM1_Init+0x118>)
 8002004:	f7ff ff30 	bl	8001e68 <HAL_TIM_MspPostInit>
}
 8002008:	b018      	add	sp, #96	; 0x60
 800200a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800200c:	f7ff fdca 	bl	8001ba4 <Error_Handler>
 8002010:	e7b4      	b.n	8001f7c <MX_TIM1_Init+0x44>
    Error_Handler();
 8002012:	f7ff fdc7 	bl	8001ba4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002016:	480e      	ldr	r0, [pc, #56]	; (8002050 <MX_TIM1_Init+0x118>)
 8002018:	f7ff ff26 	bl	8001e68 <HAL_TIM_MspPostInit>
}
 800201c:	b018      	add	sp, #96	; 0x60
 800201e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002020:	f7ff fdc0 	bl	8001ba4 <Error_Handler>
 8002024:	e7d4      	b.n	8001fd0 <MX_TIM1_Init+0x98>
    Error_Handler();
 8002026:	f7ff fdbd 	bl	8001ba4 <Error_Handler>
 800202a:	e7cb      	b.n	8001fc4 <MX_TIM1_Init+0x8c>
    Error_Handler();
 800202c:	f7ff fdba 	bl	8001ba4 <Error_Handler>
 8002030:	e7c2      	b.n	8001fb8 <MX_TIM1_Init+0x80>
    Error_Handler();
 8002032:	f7ff fdb7 	bl	8001ba4 <Error_Handler>
 8002036:	e7ad      	b.n	8001f94 <MX_TIM1_Init+0x5c>
 8002038:	00000000 	.word	0x00000000
 800203c:	0000000a 	.word	0x0000000a
 8002040:	00000000 	.word	0x00000000
 8002044:	00002000 	.word	0x00002000
 8002048:	02000000 	.word	0x02000000
 800204c:	00000000 	.word	0x00000000
 8002050:	2000146c 	.word	0x2000146c
 8002054:	40012c00 	.word	0x40012c00

08002058 <MX_TIM8_Init>:
{
 8002058:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205a:	2400      	movs	r4, #0
{
 800205c:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800205e:	222c      	movs	r2, #44	; 0x2c
 8002060:	4621      	mov	r1, r4
 8002062:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002068:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800206c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002070:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002078:	f004 fd92 	bl	8006ba0 <memset>
  htim8.Instance = TIM8;
 800207c:	4842      	ldr	r0, [pc, #264]	; (8002188 <MX_TIM8_Init+0x130>)
  htim8.Init.Prescaler = 1;
 800207e:	4a43      	ldr	r2, [pc, #268]	; (800218c <MX_TIM8_Init+0x134>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 1400;
 8002088:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800208c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 8002090:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002094:	f002 fb30 	bl	80046f8 <HAL_TIM_PWM_Init>
 8002098:	2800      	cmp	r0, #0
 800209a:	d149      	bne.n	8002130 <MX_TIM8_Init+0xd8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	2200      	movs	r2, #0
 80020a0:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020a4:	4838      	ldr	r0, [pc, #224]	; (8002188 <MX_TIM8_Init+0x130>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020a8:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020aa:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020ac:	f002 fed6 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 80020b0:	2800      	cmp	r0, #0
 80020b2:	d150      	bne.n	8002156 <MX_TIM8_Init+0xfe>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b4:	2060      	movs	r0, #96	; 0x60
 80020b6:	2100      	movs	r1, #0
 80020b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80020bc:	2000      	movs	r0, #0
 80020be:	2100      	movs	r1, #0
 80020c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80020c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020c8:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ca:	482f      	ldr	r0, [pc, #188]	; (8002188 <MX_TIM8_Init+0x130>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020cc:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ce:	a904      	add	r1, sp, #16
 80020d0:	f002 fd2c 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d13b      	bne.n	8002150 <MX_TIM8_Init+0xf8>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020d8:	482b      	ldr	r0, [pc, #172]	; (8002188 <MX_TIM8_Init+0x130>)
 80020da:	2204      	movs	r2, #4
 80020dc:	a904      	add	r1, sp, #16
 80020de:	f002 fd25 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 80020e2:	bb90      	cbnz	r0, 800214a <MX_TIM8_Init+0xf2>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e4:	4828      	ldr	r0, [pc, #160]	; (8002188 <MX_TIM8_Init+0x130>)
 80020e6:	2208      	movs	r2, #8
 80020e8:	a904      	add	r1, sp, #16
 80020ea:	f002 fd1f 	bl	8004b2c <HAL_TIM_PWM_ConfigChannel>
 80020ee:	bb48      	cbnz	r0, 8002144 <MX_TIM8_Init+0xec>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020f0:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002160 <MX_TIM8_Init+0x108>
 80020f4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80020f8:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002168 <MX_TIM8_Init+0x110>
 80020fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002100:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002170 <MX_TIM8_Init+0x118>
 8002104:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002108:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002178 <MX_TIM8_Init+0x120>
 800210c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002110:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002180 <MX_TIM8_Init+0x128>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002114:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002116:	481c      	ldr	r0, [pc, #112]	; (8002188 <MX_TIM8_Init+0x130>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002118:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800211a:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800211c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002120:	f002 fee2 	bl	8004ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002124:	b938      	cbnz	r0, 8002136 <MX_TIM8_Init+0xde>
  HAL_TIM_MspPostInit(&htim8);
 8002126:	4818      	ldr	r0, [pc, #96]	; (8002188 <MX_TIM8_Init+0x130>)
 8002128:	f7ff fe9e 	bl	8001e68 <HAL_TIM_MspPostInit>
}
 800212c:	b018      	add	sp, #96	; 0x60
 800212e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002130:	f7ff fd38 	bl	8001ba4 <Error_Handler>
 8002134:	e7b2      	b.n	800209c <MX_TIM8_Init+0x44>
    Error_Handler();
 8002136:	f7ff fd35 	bl	8001ba4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 800213a:	4813      	ldr	r0, [pc, #76]	; (8002188 <MX_TIM8_Init+0x130>)
 800213c:	f7ff fe94 	bl	8001e68 <HAL_TIM_MspPostInit>
}
 8002140:	b018      	add	sp, #96	; 0x60
 8002142:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002144:	f7ff fd2e 	bl	8001ba4 <Error_Handler>
 8002148:	e7d2      	b.n	80020f0 <MX_TIM8_Init+0x98>
    Error_Handler();
 800214a:	f7ff fd2b 	bl	8001ba4 <Error_Handler>
 800214e:	e7c9      	b.n	80020e4 <MX_TIM8_Init+0x8c>
    Error_Handler();
 8002150:	f7ff fd28 	bl	8001ba4 <Error_Handler>
 8002154:	e7c0      	b.n	80020d8 <MX_TIM8_Init+0x80>
    Error_Handler();
 8002156:	f7ff fd25 	bl	8001ba4 <Error_Handler>
 800215a:	e7ab      	b.n	80020b4 <MX_TIM8_Init+0x5c>
 800215c:	f3af 8000 	nop.w
	...
 800216c:	0000000a 	.word	0x0000000a
 8002170:	00000000 	.word	0x00000000
 8002174:	00002000 	.word	0x00002000
 8002178:	00000004 	.word	0x00000004
 800217c:	00000000 	.word	0x00000000
 8002180:	02000000 	.word	0x02000000
 8002184:	00000004 	.word	0x00000004
 8002188:	200014b8 	.word	0x200014b8
 800218c:	40013400 	.word	0x40013400

08002190 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002190:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002192:	480b      	ldr	r0, [pc, #44]	; (80021c0 <MX_USART1_UART_Init+0x30>)
 8002194:	4c0b      	ldr	r4, [pc, #44]	; (80021c4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 8002196:	490c      	ldr	r1, [pc, #48]	; (80021c8 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002198:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800219a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 800219c:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a4:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ac:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b0:	f003 fc18 	bl	80059e4 <HAL_UART_Init>
 80021b4:	b900      	cbnz	r0, 80021b8 <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021b6:	bd10      	pop	{r4, pc}
 80021b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80021bc:	f7ff bcf2 	b.w	8001ba4 <Error_Handler>
 80021c0:	20001504 	.word	0x20001504
 80021c4:	40013800 	.word	0x40013800
 80021c8:	001e8480 	.word	0x001e8480

080021cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021cc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_UART_MspInit+0x70>)
 80021d0:	6802      	ldr	r2, [r0, #0]
{
 80021d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 80021d6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80021dc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80021e0:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021e4:	b009      	add	sp, #36	; 0x24
 80021e6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e8:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ec:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f0:	4813      	ldr	r0, [pc, #76]	; (8002240 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021f6:	619a      	str	r2, [r3, #24]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021fe:	9200      	str	r2, [sp, #0]
 8002200:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002208:	615a      	str	r2, [r3, #20]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002210:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002212:	2230      	movs	r2, #48	; 0x30
 8002214:	2302      	movs	r3, #2
 8002216:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800221a:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800221e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002224:	f001 face 	bl	80037c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002228:	4622      	mov	r2, r4
 800222a:	4621      	mov	r1, r4
 800222c:	2025      	movs	r0, #37	; 0x25
 800222e:	f001 f94f 	bl	80034d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002232:	2025      	movs	r0, #37	; 0x25
 8002234:	f001 f98a 	bl	800354c <HAL_NVIC_EnableIRQ>
}
 8002238:	b009      	add	sp, #36	; 0x24
 800223a:	bd30      	pop	{r4, r5, pc}
 800223c:	40013800 	.word	0x40013800
 8002240:	48000800 	.word	0x48000800

08002244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800227c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002248:	480d      	ldr	r0, [pc, #52]	; (8002280 <LoopForever+0x6>)
  ldr r1, =_edata
 800224a:	490e      	ldr	r1, [pc, #56]	; (8002284 <LoopForever+0xa>)
  ldr r2, =_sidata
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <LoopForever+0xe>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002250:	e002      	b.n	8002258 <LoopCopyDataInit>

08002252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002256:	3304      	adds	r3, #4

08002258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800225c:	d3f9      	bcc.n	8002252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002260:	4c0b      	ldr	r4, [pc, #44]	; (8002290 <LoopForever+0x16>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002264:	e001      	b.n	800226a <LoopFillZerobss>

08002266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002268:	3204      	adds	r2, #4

0800226a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800226c:	d3fb      	bcc.n	8002266 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800226e:	f7ff fdb5 	bl	8001ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002272:	f004 fc71 	bl	8006b58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002276:	f7ff faa7 	bl	80017c8 <main>

0800227a <LoopForever>:

LoopForever:
    b LoopForever
 800227a:	e7fe      	b.n	800227a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800227c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002284:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002288:	08009ddc 	.word	0x08009ddc
  ldr r2, =_sbss
 800228c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002290:	2000159c 	.word	0x2000159c

08002294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC1_2_IRQHandler>
	...

08002298 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800229a:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <HAL_InitTick+0x3c>)
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_InitTick+0x40>)
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
{
 80022a2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a8:	fbb0 f0f2 	udiv	r0, r0, r2
 80022ac:	fbb3 f0f0 	udiv	r0, r3, r0
 80022b0:	f001 f95a 	bl	8003568 <HAL_SYSTICK_Config>
 80022b4:	b908      	cbnz	r0, 80022ba <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	2d0f      	cmp	r5, #15
 80022b8:	d901      	bls.n	80022be <HAL_InitTick+0x26>
    return HAL_ERROR;
 80022ba:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80022bc:	bd38      	pop	{r3, r4, r5, pc}
 80022be:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	4602      	mov	r2, r0
 80022c2:	4629      	mov	r1, r5
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295
 80022c8:	f001 f902 	bl	80034d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_InitTick+0x44>)
 80022ce:	4620      	mov	r0, r4
 80022d0:	601d      	str	r5, [r3, #0]
}
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
 80022d4:	20000004 	.word	0x20000004
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000008 	.word	0x20000008

080022e0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <HAL_Init+0x20>)
{
 80022e2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e4:	6813      	ldr	r3, [r2, #0]
 80022e6:	f043 0310 	orr.w	r3, r3, #16
 80022ea:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f001 f8dd 	bl	80034ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f2:	200f      	movs	r0, #15
 80022f4:	f7ff ffd0 	bl	8002298 <HAL_InitTick>
  HAL_MspInit();
 80022f8:	f7ff fcba 	bl	8001c70 <HAL_MspInit>
}
 80022fc:	2000      	movs	r0, #0
 80022fe:	bd08      	pop	{r3, pc}
 8002300:	40022000 	.word	0x40022000

08002304 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002304:	4a03      	ldr	r2, [pc, #12]	; (8002314 <HAL_IncTick+0x10>)
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_IncTick+0x14>)
 8002308:	6811      	ldr	r1, [r2, #0]
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	440b      	add	r3, r1
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20001588 	.word	0x20001588
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800231c:	4b01      	ldr	r3, [pc, #4]	; (8002324 <HAL_GetTick+0x8>)
 800231e:	6818      	ldr	r0, [r3, #0]
}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20001588 	.word	0x20001588

08002328 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fff6 	bl	800231c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002330:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002332:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002334:	d002      	beq.n	800233c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <HAL_Delay+0x20>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	1b43      	subs	r3, r0, r5
 8002342:	42a3      	cmp	r3, r4
 8002344:	d3fa      	bcc.n	800233c <HAL_Delay+0x14>
  {
  }
}
 8002346:	bd38      	pop	{r3, r4, r5, pc}
 8002348:	20000004 	.word	0x20000004

0800234c <HAL_ADC_ConvCpltCallback>:
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop

08002350 <HAL_ADC_ConvHalfCpltCallback>:
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop

08002354 <HAL_ADC_ErrorCallback>:
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop

08002358 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002358:	6802      	ldr	r2, [r0, #0]
{
 800235a:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800235c:	6893      	ldr	r3, [r2, #8]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d001      	beq.n	800236a <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002366:	2000      	movs	r0, #0
}
 8002368:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800236a:	6811      	ldr	r1, [r2, #0]
 800236c:	07cc      	lsls	r4, r1, #31
 800236e:	d5fa      	bpl.n	8002366 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002370:	6891      	ldr	r1, [r2, #8]
 8002372:	f001 010d 	and.w	r1, r1, #13
 8002376:	2901      	cmp	r1, #1
 8002378:	4604      	mov	r4, r0
 800237a:	d009      	beq.n	8002390 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800237e:	f042 0210 	orr.w	r2, r2, #16
 8002382:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002384:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002386:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800238e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8002390:	6893      	ldr	r3, [r2, #8]
 8002392:	2103      	movs	r1, #3
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6093      	str	r3, [r2, #8]
 800239a:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 800239c:	f7ff ffbe 	bl	800231c <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80023a6:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023a8:	d403      	bmi.n	80023b2 <ADC_Disable+0x5a>
 80023aa:	e7dc      	b.n	8002366 <ADC_Disable+0xe>
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	07db      	lsls	r3, r3, #31
 80023b0:	d5d9      	bpl.n	8002366 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023b2:	f7ff ffb3 	bl	800231c <HAL_GetTick>
 80023b6:	1b40      	subs	r0, r0, r5
 80023b8:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023ba:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023bc:	d9f6      	bls.n	80023ac <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	07d2      	lsls	r2, r2, #31
 80023c2:	d5f3      	bpl.n	80023ac <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023c6:	f043 0310 	orr.w	r3, r3, #16
 80023ca:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80023ce:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d0:	4303      	orrs	r3, r0
 80023d2:	6463      	str	r3, [r4, #68]	; 0x44
}
 80023d4:	bd38      	pop	{r3, r4, r5, pc}
 80023d6:	bf00      	nop

080023d8 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023d8:	6802      	ldr	r2, [r0, #0]
{
 80023da:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023dc:	6893      	ldr	r3, [r2, #8]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b01      	cmp	r3, #1
{
 80023e4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023e6:	d025      	beq.n	8002434 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80023e8:	6891      	ldr	r1, [r2, #8]
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <ADC_Enable+0x68>)
 80023ec:	4219      	tst	r1, r3
 80023ee:	d008      	beq.n	8002402 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023f2:	f043 0310 	orr.w	r3, r3, #16
 80023f6:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023fc:	4303      	orrs	r3, r0
 80023fe:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002400:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002402:	6893      	ldr	r3, [r2, #8]
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800240a:	f7ff ff87 	bl	800231c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800240e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002410:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	07d9      	lsls	r1, r3, #31
 8002416:	d40b      	bmi.n	8002430 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002418:	f7ff ff80 	bl	800231c <HAL_GetTick>
 800241c:	1b43      	subs	r3, r0, r5
 800241e:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002420:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002422:	d9f6      	bls.n	8002412 <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	07d2      	lsls	r2, r2, #31
 8002428:	d5e2      	bpl.n	80023f0 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	07d9      	lsls	r1, r3, #31
 800242e:	d5f3      	bpl.n	8002418 <ADC_Enable+0x40>
  return HAL_OK;
 8002430:	2000      	movs	r0, #0
}
 8002432:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002434:	6813      	ldr	r3, [r2, #0]
 8002436:	07d8      	lsls	r0, r3, #31
 8002438:	d5d6      	bpl.n	80023e8 <ADC_Enable+0x10>
  return HAL_OK;
 800243a:	2000      	movs	r0, #0
 800243c:	e7f9      	b.n	8002432 <ADC_Enable+0x5a>
 800243e:	bf00      	nop
 8002440:	8000003f 	.word	0x8000003f

08002444 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002444:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002446:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800244c:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800244e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002450:	f043 0304 	orr.w	r3, r3, #4
 8002454:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8002456:	f7ff bf7d 	b.w	8002354 <HAL_ADC_ErrorCallback>
 800245a:	bf00      	nop

0800245c <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800245c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800245e:	f7ff bf77 	b.w	8002350 <HAL_ADC_ConvHalfCpltCallback>
 8002462:	bf00      	nop

08002464 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002464:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002468:	f012 0f50 	tst.w	r2, #80	; 0x50
 800246c:	d118      	bne.n	80024a0 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800246e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002470:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002476:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002478:	68ca      	ldr	r2, [r1, #12]
 800247a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800247e:	d10c      	bne.n	800249a <ADC_DMAConvCplt+0x36>
 8002480:	7e5a      	ldrb	r2, [r3, #25]
 8002482:	b952      	cbnz	r2, 800249a <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002486:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800248a:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800248c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248e:	04d2      	lsls	r2, r2, #19
 8002490:	d403      	bmi.n	800249a <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff bf56 	b.w	800234c <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	4718      	bx	r3
 80024a6:	bf00      	nop

080024a8 <HAL_ADC_Init>:
{
 80024a8:	b530      	push	{r4, r5, lr}
 80024aa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80024b0:	2800      	cmp	r0, #0
 80024b2:	f000 809c 	beq.w	80025ee <HAL_ADC_Init+0x146>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024b8:	f013 0310 	ands.w	r3, r3, #16
 80024bc:	4604      	mov	r4, r0
 80024be:	d118      	bne.n	80024f2 <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80024c0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80024c2:	2d00      	cmp	r5, #0
 80024c4:	f000 8096 	beq.w	80025f4 <HAL_ADC_Init+0x14c>
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80024c8:	6822      	ldr	r2, [r4, #0]
 80024ca:	6891      	ldr	r1, [r2, #8]
 80024cc:	00c9      	lsls	r1, r1, #3
 80024ce:	f140 8082 	bpl.w	80025d6 <HAL_ADC_Init+0x12e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80024d2:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80024d4:	008d      	lsls	r5, r1, #2
 80024d6:	d47e      	bmi.n	80025d6 <HAL_ADC_Init+0x12e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80024da:	06c8      	lsls	r0, r1, #27
 80024dc:	d400      	bmi.n	80024e0 <HAL_ADC_Init+0x38>
 80024de:	b163      	cbz	r3, 80024fa <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 80024e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024e2:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 80024e6:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80024e8:	f043 0310 	orr.w	r3, r3, #16
 80024ec:	6423      	str	r3, [r4, #64]	; 0x40
}
 80024ee:	b003      	add	sp, #12
 80024f0:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80024f4:	06da      	lsls	r2, r3, #27
 80024f6:	d4f3      	bmi.n	80024e0 <HAL_ADC_Init+0x38>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80024f8:	6802      	ldr	r2, [r0, #0]
 80024fa:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80024fc:	f010 0004 	ands.w	r0, r0, #4
 8002500:	d1ee      	bne.n	80024e0 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8002502:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002504:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002508:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800250c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8002510:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002512:	f000 80d9 	beq.w	80026c8 <HAL_ADC_Init+0x220>
 8002516:	4b7d      	ldr	r3, [pc, #500]	; (800270c <HAL_ADC_Init+0x264>)
 8002518:	429a      	cmp	r2, r3
 800251a:	f000 80dd 	beq.w	80026d8 <HAL_ADC_Init+0x230>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800251e:	497c      	ldr	r1, [pc, #496]	; (8002710 <HAL_ADC_Init+0x268>)
 8002520:	428a      	cmp	r2, r1
 8002522:	d074      	beq.n	800260e <HAL_ADC_Init+0x166>
 8002524:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_ADC_Init+0x26c>)
 8002526:	429a      	cmp	r2, r3
 8002528:	d072      	beq.n	8002610 <HAL_ADC_Init+0x168>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800252a:	6893      	ldr	r3, [r2, #8]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b01      	cmp	r3, #1
 8002532:	f000 80e3 	beq.w	80026fc <HAL_ADC_Init+0x254>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002536:	4d78      	ldr	r5, [pc, #480]	; (8002718 <HAL_ADC_Init+0x270>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002538:	68ab      	ldr	r3, [r5, #8]
 800253a:	6861      	ldr	r1, [r4, #4]
 800253c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002540:	430b      	orrs	r3, r1
 8002542:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002544:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002546:	68e1      	ldr	r1, [r4, #12]
 8002548:	7e65      	ldrb	r5, [r4, #25]
 800254a:	2b01      	cmp	r3, #1
 800254c:	68a3      	ldr	r3, [r4, #8]
 800254e:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002552:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002556:	bf18      	it	ne
 8002558:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800255c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002560:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002562:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002566:	f000 8093 	beq.w	8002690 <HAL_ADC_Init+0x1e8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800256a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800256c:	2901      	cmp	r1, #1
 800256e:	d00b      	beq.n	8002588 <HAL_ADC_Init+0xe0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002570:	4867      	ldr	r0, [pc, #412]	; (8002710 <HAL_ADC_Init+0x268>)
 8002572:	4282      	cmp	r2, r0
 8002574:	f000 809c 	beq.w	80026b0 <HAL_ADC_Init+0x208>
 8002578:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800257c:	4282      	cmp	r2, r0
 800257e:	f000 8097 	beq.w	80026b0 <HAL_ADC_Init+0x208>
 8002582:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002584:	4303      	orrs	r3, r0
 8002586:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002588:	6891      	ldr	r1, [r2, #8]
 800258a:	f011 0f0c 	tst.w	r1, #12
 800258e:	d10c      	bne.n	80025aa <HAL_ADC_Init+0x102>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002590:	68d1      	ldr	r1, [r2, #12]
 8002592:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8002596:	f021 0102 	bic.w	r1, r1, #2
 800259a:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800259c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80025a0:	7e20      	ldrb	r0, [r4, #24]
 80025a2:	0049      	lsls	r1, r1, #1
 80025a4:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80025a8:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80025aa:	68d0      	ldr	r0, [r2, #12]
 80025ac:	495b      	ldr	r1, [pc, #364]	; (800271c <HAL_ADC_Init+0x274>)
 80025ae:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b0:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80025b2:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b4:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 80025b6:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025b8:	d072      	beq.n	80026a0 <HAL_ADC_Init+0x1f8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80025bc:	f023 030f 	bic.w	r3, r3, #15
 80025c0:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80025c2:	2000      	movs	r0, #0
 80025c4:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80025c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025c8:	f023 0303 	bic.w	r3, r3, #3
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6423      	str	r3, [r4, #64]	; 0x40
}
 80025d2:	b003      	add	sp, #12
 80025d4:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80025d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025d8:	f023 0312 	bic.w	r3, r3, #18
 80025dc:	f043 0310 	orr.w	r3, r3, #16
 80025e0:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025ec:	e778      	b.n	80024e0 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 80025ee:	2001      	movs	r0, #1
}
 80025f0:	b003      	add	sp, #12
 80025f2:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 80025f4:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80025f8:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 80025fa:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80025fe:	f7fe fc3f 	bl	8000e80 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	6893      	ldr	r3, [r2, #8]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	d511      	bpl.n	800262e <HAL_ADC_Init+0x186>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800260a:	462b      	mov	r3, r5
 800260c:	e75d      	b.n	80024ca <HAL_ADC_Init+0x22>
 800260e:	4941      	ldr	r1, [pc, #260]	; (8002714 <HAL_ADC_Init+0x26c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002610:	4d41      	ldr	r5, [pc, #260]	; (8002718 <HAL_ADC_Init+0x270>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002612:	6893      	ldr	r3, [r2, #8]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b01      	cmp	r3, #1
 800261a:	d058      	beq.n	80026ce <HAL_ADC_Init+0x226>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800261c:	688b      	ldr	r3, [r1, #8]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d188      	bne.n	8002538 <HAL_ADC_Init+0x90>
 8002626:	680b      	ldr	r3, [r1, #0]
 8002628:	07db      	lsls	r3, r3, #31
 800262a:	d48b      	bmi.n	8002544 <HAL_ADC_Init+0x9c>
 800262c:	e784      	b.n	8002538 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 800262e:	4620      	mov	r0, r4
 8002630:	f7ff fe92 	bl	8002358 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002634:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 8002636:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002638:	06d0      	lsls	r0, r2, #27
 800263a:	f53f af45 	bmi.w	80024c8 <HAL_ADC_Init+0x20>
 800263e:	2b00      	cmp	r3, #0
 8002640:	f47f af42 	bne.w	80024c8 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8002644:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002646:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8002648:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 800264c:	f021 0102 	bic.w	r1, r1, #2
 8002650:	f041 0102 	orr.w	r1, r1, #2
 8002654:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002656:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002658:	4931      	ldr	r1, [pc, #196]	; (8002720 <HAL_ADC_Init+0x278>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800265a:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800265e:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002660:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002662:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002664:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002668:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800266a:	482e      	ldr	r0, [pc, #184]	; (8002724 <HAL_ADC_Init+0x27c>)
 800266c:	fba0 0101 	umull	r0, r1, r0, r1
 8002670:	0c89      	lsrs	r1, r1, #18
 8002672:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002676:	0049      	lsls	r1, r1, #1
 8002678:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800267a:	9901      	ldr	r1, [sp, #4]
 800267c:	2900      	cmp	r1, #0
 800267e:	f43f af24 	beq.w	80024ca <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8002682:	9901      	ldr	r1, [sp, #4]
 8002684:	3901      	subs	r1, #1
 8002686:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8002688:	9901      	ldr	r1, [sp, #4]
 800268a:	2900      	cmp	r1, #0
 800268c:	d1f9      	bne.n	8002682 <HAL_ADC_Init+0x1da>
 800268e:	e71c      	b.n	80024ca <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002690:	bb35      	cbnz	r5, 80026e0 <HAL_ADC_Init+0x238>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002692:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002694:	3901      	subs	r1, #1
 8002696:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	e764      	b.n	800256a <HAL_ADC_Init+0xc2>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80026a0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80026a2:	69e3      	ldr	r3, [r4, #28]
 80026a4:	f021 010f 	bic.w	r1, r1, #15
 80026a8:	3b01      	subs	r3, #1
 80026aa:	430b      	orrs	r3, r1
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	e788      	b.n	80025c2 <HAL_ADC_Init+0x11a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80026b0:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 80026b4:	d01f      	beq.n	80026f6 <HAL_ADC_Init+0x24e>
 80026b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80026ba:	d024      	beq.n	8002706 <HAL_ADC_Init+0x25e>
 80026bc:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 80026c0:	bf08      	it	eq
 80026c2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80026c6:	e75c      	b.n	8002582 <HAL_ADC_Init+0xda>
 80026c8:	4910      	ldr	r1, [pc, #64]	; (800270c <HAL_ADC_Init+0x264>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ca:	4d17      	ldr	r5, [pc, #92]	; (8002728 <HAL_ADC_Init+0x280>)
 80026cc:	e7a1      	b.n	8002612 <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80026ce:	6813      	ldr	r3, [r2, #0]
 80026d0:	07db      	lsls	r3, r3, #31
 80026d2:	f53f af37 	bmi.w	8002544 <HAL_ADC_Init+0x9c>
 80026d6:	e7a1      	b.n	800261c <HAL_ADC_Init+0x174>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d8:	4d13      	ldr	r5, [pc, #76]	; (8002728 <HAL_ADC_Init+0x280>)
 80026da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80026de:	e798      	b.n	8002612 <HAL_ADC_Init+0x16a>
        ADC_STATE_CLR_SET(hadc->State,
 80026e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026e2:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80026e6:	f041 0120 	orr.w	r1, r1, #32
 80026ea:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80026ee:	f041 0101 	orr.w	r1, r1, #1
 80026f2:	6461      	str	r1, [r4, #68]	; 0x44
 80026f4:	e739      	b.n	800256a <HAL_ADC_Init+0xc2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80026f6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80026fa:	e742      	b.n	8002582 <HAL_ADC_Init+0xda>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80026fc:	6813      	ldr	r3, [r2, #0]
 80026fe:	07d9      	lsls	r1, r3, #31
 8002700:	f53f af20 	bmi.w	8002544 <HAL_ADC_Init+0x9c>
 8002704:	e717      	b.n	8002536 <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002706:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800270a:	e73a      	b.n	8002582 <HAL_ADC_Init+0xda>
 800270c:	50000100 	.word	0x50000100
 8002710:	50000400 	.word	0x50000400
 8002714:	50000500 	.word	0x50000500
 8002718:	50000700 	.word	0x50000700
 800271c:	fff0c007 	.word	0xfff0c007
 8002720:	20000000 	.word	0x20000000
 8002724:	431bde83 	.word	0x431bde83
 8002728:	50000300 	.word	0x50000300

0800272c <HAL_ADC_Start_DMA>:
{
 800272c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272e:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002730:	6800      	ldr	r0, [r0, #0]
 8002732:	6885      	ldr	r5, [r0, #8]
 8002734:	076d      	lsls	r5, r5, #29
 8002736:	d423      	bmi.n	8002780 <HAL_ADC_Start_DMA+0x54>
    __HAL_LOCK(hadc);
 8002738:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d01f      	beq.n	8002780 <HAL_ADC_Start_DMA+0x54>
 8002740:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002742:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002746:	460f      	mov	r7, r1
 8002748:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 800274a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800274e:	d00f      	beq.n	8002770 <HAL_ADC_Start_DMA+0x44>
 8002750:	4b45      	ldr	r3, [pc, #276]	; (8002868 <HAL_ADC_Start_DMA+0x13c>)
 8002752:	4298      	cmp	r0, r3
 8002754:	d00c      	beq.n	8002770 <HAL_ADC_Start_DMA+0x44>
 8002756:	4b45      	ldr	r3, [pc, #276]	; (800286c <HAL_ADC_Start_DMA+0x140>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f013 0f1f 	tst.w	r3, #31
 800275e:	bf0c      	ite	eq
 8002760:	2301      	moveq	r3, #1
 8002762:	2300      	movne	r3, #0
 8002764:	b97b      	cbnz	r3, 8002786 <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 8002766:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 800276a:	2501      	movs	r5, #1
}
 800276c:	4628      	mov	r0, r5
 800276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002770:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <HAL_ADC_Start_DMA+0x144>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f013 0f1f 	tst.w	r3, #31
 8002778:	bf0c      	ite	eq
 800277a:	2301      	moveq	r3, #1
 800277c:	2300      	movne	r3, #0
 800277e:	e7f1      	b.n	8002764 <HAL_ADC_Start_DMA+0x38>
    tmp_hal_status = HAL_BUSY;
 8002780:	2502      	movs	r5, #2
}
 8002782:	4628      	mov	r0, r5
 8002784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002786:	4620      	mov	r0, r4
 8002788:	f7ff fe26 	bl	80023d8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800278c:	4605      	mov	r5, r0
 800278e:	2800      	cmp	r0, #0
 8002790:	d14d      	bne.n	800282e <HAL_ADC_Start_DMA+0x102>
        ADC_STATE_CLR_SET(hadc->State,
 8002792:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002794:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002796:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800279a:	f023 0301 	bic.w	r3, r3, #1
 800279e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027a2:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 80027a6:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027a8:	d053      	beq.n	8002852 <HAL_ADC_Start_DMA+0x126>
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_ADC_Start_DMA+0x13c>)
 80027ac:	4299      	cmp	r1, r3
 80027ae:	d042      	beq.n	8002836 <HAL_ADC_Start_DMA+0x10a>
 80027b0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	06d8      	lsls	r0, r3, #27
 80027b8:	d04d      	beq.n	8002856 <HAL_ADC_Start_DMA+0x12a>
 80027ba:	4a2e      	ldr	r2, [pc, #184]	; (8002874 <HAL_ADC_Start_DMA+0x148>)
 80027bc:	4291      	cmp	r1, r2
 80027be:	d04a      	beq.n	8002856 <HAL_ADC_Start_DMA+0x12a>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c6:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027c8:	68d3      	ldr	r3, [r2, #12]
 80027ca:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80027ce:	b12b      	cbz	r3, 80027dc <HAL_ADC_Start_DMA+0xb0>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027da:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027e0:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8002880 <HAL_ADC_Start_DMA+0x154>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027e4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027e8:	bf1c      	itt	ne
 80027ea:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 80027ec:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80027f0:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027f2:	463a      	mov	r2, r7
 80027f4:	4633      	mov	r3, r6
        __HAL_UNLOCK(hadc);
 80027f6:	f04f 0e00 	mov.w	lr, #0
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027fa:	4e1f      	ldr	r6, [pc, #124]	; (8002878 <HAL_ADC_Start_DMA+0x14c>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027fc:	4f1f      	ldr	r7, [pc, #124]	; (800287c <HAL_ADC_Start_DMA+0x150>)
        __HAL_UNLOCK(hadc);
 80027fe:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002802:	6306      	str	r6, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002804:	261c      	movs	r6, #28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002806:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800280a:	600e      	str	r6, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800280c:	684e      	ldr	r6, [r1, #4]
 800280e:	f046 0610 	orr.w	r6, r6, #16
 8002812:	604e      	str	r6, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002814:	68ce      	ldr	r6, [r1, #12]
 8002816:	f046 0601 	orr.w	r6, r6, #1
 800281a:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800281c:	3140      	adds	r1, #64	; 0x40
 800281e:	f000 ff01 	bl	8003624 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	6893      	ldr	r3, [r2, #8]
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6093      	str	r3, [r2, #8]
 800282c:	e79e      	b.n	800276c <HAL_ADC_Start_DMA+0x40>
        __HAL_UNLOCK(hadc);
 800282e:	2300      	movs	r3, #0
 8002830:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002834:	e79a      	b.n	800276c <HAL_ADC_Start_DMA+0x40>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002836:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <HAL_ADC_Start_DMA+0x144>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	06db      	lsls	r3, r3, #27
 800283c:	d00b      	beq.n	8002856 <HAL_ADC_Start_DMA+0x12a>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800283e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002840:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002844:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002846:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8002850:	e7bd      	b.n	80027ce <HAL_ADC_Start_DMA+0xa2>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002852:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_ADC_Start_DMA+0x144>)
 8002854:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002858:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800285c:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800285e:	68cb      	ldr	r3, [r1, #12]
 8002860:	019a      	lsls	r2, r3, #6
 8002862:	d5bb      	bpl.n	80027dc <HAL_ADC_Start_DMA+0xb0>
 8002864:	e7b4      	b.n	80027d0 <HAL_ADC_Start_DMA+0xa4>
 8002866:	bf00      	nop
 8002868:	50000100 	.word	0x50000100
 800286c:	50000700 	.word	0x50000700
 8002870:	50000300 	.word	0x50000300
 8002874:	50000400 	.word	0x50000400
 8002878:	08002445 	.word	0x08002445
 800287c:	0800245d 	.word	0x0800245d
 8002880:	08002465 	.word	0x08002465

08002884 <HAL_ADCEx_Calibration_Start>:
{
 8002884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002886:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d040      	beq.n	8002910 <HAL_ADCEx_Calibration_Start+0x8c>
 800288e:	2701      	movs	r7, #1
 8002890:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8002894:	4604      	mov	r4, r0
 8002896:	460d      	mov	r5, r1
 8002898:	f7ff fd5e 	bl	8002358 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 800289c:	4606      	mov	r6, r0
 800289e:	2800      	cmp	r0, #0
 80028a0:	d131      	bne.n	8002906 <HAL_ADCEx_Calibration_Start+0x82>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80028a2:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80028a4:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80028a6:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028a8:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80028aa:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80028ae:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028b0:	d103      	bne.n	80028ba <HAL_ADCEx_Calibration_Start+0x36>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028c0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80028c2:	f7ff fd2b 	bl	800231c <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80028c6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 80028c8:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da14      	bge.n	80028fa <HAL_ADCEx_Calibration_Start+0x76>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028d0:	f7ff fd24 	bl	800231c <HAL_GetTick>
 80028d4:	1b43      	subs	r3, r0, r5
 80028d6:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80028d8:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80028da:	d9f6      	bls.n	80028ca <HAL_ADCEx_Calibration_Start+0x46>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	2a00      	cmp	r2, #0
 80028e0:	daf3      	bge.n	80028ca <HAL_ADCEx_Calibration_Start+0x46>
          ADC_STATE_CLR_SET(hadc->State,
 80028e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 80028e4:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 80028e6:	f023 0312 	bic.w	r3, r3, #18
 80028ea:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 80028ee:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 80028f0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 80028f4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80028f6:	4630      	mov	r0, r6
 80028f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80028fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028fc:	f023 0303 	bic.w	r3, r3, #3
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002906:	2300      	movs	r3, #0
 8002908:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800290c:	4630      	mov	r0, r6
 800290e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8002910:	2602      	movs	r6, #2
}
 8002912:	4630      	mov	r0, r6
 8002914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002916:	bf00      	nop

08002918 <HAL_ADC_ConfigChannel>:
{
 8002918:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800291a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800291e:	68cc      	ldr	r4, [r1, #12]
{
 8002920:	b083      	sub	sp, #12
 8002922:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002924:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8002926:	f04f 0000 	mov.w	r0, #0
 800292a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800292c:	f000 8106 	beq.w	8002b3c <HAL_ADC_ConfigChannel+0x224>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002930:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8002932:	2001      	movs	r0, #1
 8002934:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002938:	6895      	ldr	r5, [r2, #8]
 800293a:	076d      	lsls	r5, r5, #29
 800293c:	d43a      	bmi.n	80029b4 <HAL_ADC_ConfigChannel+0x9c>
    if (sConfig->Rank < 5U)
 800293e:	6848      	ldr	r0, [r1, #4]
 8002940:	2804      	cmp	r0, #4
 8002942:	f200 808b 	bhi.w	8002a5c <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 8002946:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800294a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800294c:	680d      	ldr	r5, [r1, #0]
 800294e:	0040      	lsls	r0, r0, #1
 8002950:	f04f 0c1f 	mov.w	ip, #31
 8002954:	fa0c fc00 	lsl.w	ip, ip, r0
 8002958:	ea26 0c0c 	bic.w	ip, r6, ip
 800295c:	fa05 f000 	lsl.w	r0, r5, r0
 8002960:	ea4c 0000 	orr.w	r0, ip, r0
 8002964:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002966:	6890      	ldr	r0, [r2, #8]
 8002968:	f010 0f0c 	tst.w	r0, #12
 800296c:	d134      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800296e:	2d09      	cmp	r5, #9
 8002970:	f200 808b 	bhi.w	8002a8a <HAL_ADC_ConfigChannel+0x172>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002974:	6950      	ldr	r0, [r2, #20]
 8002976:	688e      	ldr	r6, [r1, #8]
 8002978:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800297c:	f04f 0c07 	mov.w	ip, #7
 8002980:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002984:	fa06 f60e 	lsl.w	r6, r6, lr
 8002988:	ea20 000c 	bic.w	r0, r0, ip
 800298c:	4330      	orrs	r0, r6
 800298e:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002990:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8002992:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002994:	694f      	ldr	r7, [r1, #20]
 8002996:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800299a:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 800299c:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800299e:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80029a2:	2e03      	cmp	r6, #3
 80029a4:	f200 8146 	bhi.w	8002c34 <HAL_ADC_ConfigChannel+0x31c>
 80029a8:	e8df f016 	tbh	[pc, r6, lsl #1]
 80029ac:	0108000d 	.word	0x0108000d
 80029b0:	00f400fe 	.word	0x00f400fe
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b6:	f042 0220 	orr.w	r2, r2, #32
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80029c2:	b003      	add	sp, #12
 80029c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 80029c6:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80029c8:	4ea9      	ldr	r6, [pc, #676]	; (8002c70 <HAL_ADC_ConfigChannel+0x358>)
 80029ca:	403e      	ands	r6, r7
 80029cc:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80029d0:	4330      	orrs	r0, r6
 80029d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80029d6:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029d8:	6890      	ldr	r0, [r2, #8]
 80029da:	f000 0003 	and.w	r0, r0, #3
 80029de:	2801      	cmp	r0, #1
 80029e0:	f000 80a7 	beq.w	8002b32 <HAL_ADC_ConfigChannel+0x21a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029e4:	2c01      	cmp	r4, #1
 80029e6:	f000 80ac 	beq.w	8002b42 <HAL_ADC_ConfigChannel+0x22a>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029ea:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80029ee:	2001      	movs	r0, #1
 80029f0:	40a8      	lsls	r0, r5
 80029f2:	ea21 0100 	bic.w	r1, r1, r0
 80029f6:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029fa:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80029fe:	d078      	beq.n	8002af2 <HAL_ADC_ConfigChannel+0x1da>
 8002a00:	499c      	ldr	r1, [pc, #624]	; (8002c74 <HAL_ADC_ConfigChannel+0x35c>)
 8002a02:	428a      	cmp	r2, r1
 8002a04:	d075      	beq.n	8002af2 <HAL_ADC_ConfigChannel+0x1da>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a06:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a08:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a0c:	d074      	beq.n	8002af8 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a0e:	2d11      	cmp	r5, #17
 8002a10:	f040 80ac 	bne.w	8002b6c <HAL_ADC_ConfigChannel+0x254>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a14:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a16:	01c4      	lsls	r4, r0, #7
 8002a18:	d471      	bmi.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a1a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002a1e:	d070      	beq.n	8002b02 <HAL_ADC_ConfigChannel+0x1ea>
 8002a20:	4894      	ldr	r0, [pc, #592]	; (8002c74 <HAL_ADC_ConfigChannel+0x35c>)
 8002a22:	4282      	cmp	r2, r0
 8002a24:	f000 80dd 	beq.w	8002be2 <HAL_ADC_ConfigChannel+0x2ca>
 8002a28:	4c93      	ldr	r4, [pc, #588]	; (8002c78 <HAL_ADC_ConfigChannel+0x360>)
 8002a2a:	42a2      	cmp	r2, r4
 8002a2c:	f000 80fc 	beq.w	8002c28 <HAL_ADC_ConfigChannel+0x310>
 8002a30:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002a34:	4282      	cmp	r2, r0
 8002a36:	d065      	beq.n	8002b04 <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a38:	6890      	ldr	r0, [r2, #8]
 8002a3a:	f000 0003 	and.w	r0, r0, #3
 8002a3e:	2801      	cmp	r0, #1
 8002a40:	f000 80f4 	beq.w	8002c2c <HAL_ADC_ConfigChannel+0x314>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a44:	2d10      	cmp	r5, #16
 8002a46:	d05a      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002a48:	2d11      	cmp	r5, #17
 8002a4a:	d058      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a4c:	2d12      	cmp	r5, #18
 8002a4e:	d156      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002a50:	688a      	ldr	r2, [r1, #8]
 8002a52:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a56:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002a58:	608a      	str	r2, [r1, #8]
 8002a5a:	e7af      	b.n	80029bc <HAL_ADC_ConfigChannel+0xa4>
    else if (sConfig->Rank < 10U)
 8002a5c:	2809      	cmp	r0, #9
 8002a5e:	d925      	bls.n	8002aac <HAL_ADC_ConfigChannel+0x194>
    else if (sConfig->Rank < 15U)
 8002a60:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a62:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a66:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8002a6a:	f200 8085 	bhi.w	8002b78 <HAL_ADC_ConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a6e:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8002a70:	680d      	ldr	r5, [r1, #0]
 8002a72:	383c      	subs	r0, #60	; 0x3c
 8002a74:	f04f 0c1f 	mov.w	ip, #31
 8002a78:	fa0c fc00 	lsl.w	ip, ip, r0
 8002a7c:	ea26 060c 	bic.w	r6, r6, ip
 8002a80:	fa05 f000 	lsl.w	r0, r5, r0
 8002a84:	4330      	orrs	r0, r6
 8002a86:	6390      	str	r0, [r2, #56]	; 0x38
 8002a88:	e76d      	b.n	8002966 <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a8a:	688f      	ldr	r7, [r1, #8]
 8002a8c:	6990      	ldr	r0, [r2, #24]
 8002a8e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8002a92:	3e1e      	subs	r6, #30
 8002a94:	f04f 0e07 	mov.w	lr, #7
 8002a98:	fa07 fc06 	lsl.w	ip, r7, r6
 8002a9c:	fa0e f606 	lsl.w	r6, lr, r6
 8002aa0:	ea20 0006 	bic.w	r0, r0, r6
 8002aa4:	ea40 000c 	orr.w	r0, r0, ip
 8002aa8:	6190      	str	r0, [r2, #24]
 8002aaa:	e771      	b.n	8002990 <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->SQR2,
 8002aac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ab0:	0040      	lsls	r0, r0, #1
 8002ab2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8002ab4:	680d      	ldr	r5, [r1, #0]
 8002ab6:	381e      	subs	r0, #30
 8002ab8:	f04f 0c1f 	mov.w	ip, #31
 8002abc:	fa0c fc00 	lsl.w	ip, ip, r0
 8002ac0:	ea26 060c 	bic.w	r6, r6, ip
 8002ac4:	fa05 f000 	lsl.w	r0, r5, r0
 8002ac8:	4330      	orrs	r0, r6
 8002aca:	6350      	str	r0, [r2, #52]	; 0x34
 8002acc:	e74b      	b.n	8002966 <HAL_ADC_ConfigChannel+0x4e>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ace:	1c6c      	adds	r4, r5, #1
 8002ad0:	688e      	ldr	r6, [r1, #8]
 8002ad2:	6950      	ldr	r0, [r2, #20]
 8002ad4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002ad8:	2107      	movs	r1, #7
 8002ada:	40a1      	lsls	r1, r4
 8002adc:	40a6      	lsls	r6, r4
 8002ade:	ea20 0101 	bic.w	r1, r0, r1
 8002ae2:	4331      	orrs	r1, r6
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ae4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ae8:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aea:	d008      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
 8002aec:	4961      	ldr	r1, [pc, #388]	; (8002c74 <HAL_ADC_ConfigChannel+0x35c>)
 8002aee:	428a      	cmp	r2, r1
 8002af0:	d105      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002af2:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af4:	4961      	ldr	r1, [pc, #388]	; (8002c7c <HAL_ADC_ConfigChannel+0x364>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002af6:	d18a      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0xf6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002af8:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002afa:	0206      	lsls	r6, r0, #8
 8002afc:	d58d      	bpl.n	8002a1a <HAL_ADC_ConfigChannel+0x102>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afe:	2000      	movs	r0, #0
 8002b00:	e75c      	b.n	80029bc <HAL_ADC_ConfigChannel+0xa4>
 8002b02:	4c5c      	ldr	r4, [pc, #368]	; (8002c74 <HAL_ADC_ConfigChannel+0x35c>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b04:	6890      	ldr	r0, [r2, #8]
 8002b06:	f000 0003 	and.w	r0, r0, #3
 8002b0a:	2801      	cmp	r0, #1
 8002b0c:	d060      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x2b8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b0e:	68a0      	ldr	r0, [r4, #8]
 8002b10:	f000 0003 	and.w	r0, r0, #3
 8002b14:	2801      	cmp	r0, #1
 8002b16:	d067      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0x2d0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b18:	2d10      	cmp	r5, #16
 8002b1a:	d069      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0x2d8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b1c:	2d11      	cmp	r5, #17
 8002b1e:	d195      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x134>
 8002b20:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002b24:	d1eb      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b26:	688a      	ldr	r2, [r1, #8]
 8002b28:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2c:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002b2e:	608a      	str	r2, [r1, #8]
 8002b30:	e744      	b.n	80029bc <HAL_ADC_ConfigChannel+0xa4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b32:	6810      	ldr	r0, [r2, #0]
 8002b34:	07c7      	lsls	r7, r0, #31
 8002b36:	f57f af55 	bpl.w	80029e4 <HAL_ADC_ConfigChannel+0xcc>
 8002b3a:	e7e0      	b.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
  __HAL_LOCK(hadc);
 8002b3c:	2002      	movs	r0, #2
}
 8002b3e:	b003      	add	sp, #12
 8002b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b42:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8002b46:	40ac      	lsls	r4, r5
 8002b48:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b4a:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002b4c:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b50:	d9bd      	bls.n	8002ace <HAL_ADC_ConfigChannel+0x1b6>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002b52:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8002b56:	688e      	ldr	r6, [r1, #8]
 8002b58:	6990      	ldr	r0, [r2, #24]
 8002b5a:	3c1b      	subs	r4, #27
 8002b5c:	2107      	movs	r1, #7
 8002b5e:	40a1      	lsls	r1, r4
 8002b60:	40a6      	lsls	r6, r4
 8002b62:	ea20 0101 	bic.w	r1, r0, r1
 8002b66:	4331      	orrs	r1, r6
 8002b68:	6191      	str	r1, [r2, #24]
 8002b6a:	e746      	b.n	80029fa <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b6c:	2d12      	cmp	r5, #18
 8002b6e:	d1c6      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002b70:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b72:	0240      	lsls	r0, r0, #9
 8002b74:	d4c3      	bmi.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
 8002b76:	e750      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002b78:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8002b7a:	680d      	ldr	r5, [r1, #0]
 8002b7c:	385a      	subs	r0, #90	; 0x5a
 8002b7e:	f04f 0c1f 	mov.w	ip, #31
 8002b82:	fa0c fc00 	lsl.w	ip, ip, r0
 8002b86:	ea26 060c 	bic.w	r6, r6, ip
 8002b8a:	fa05 f000 	lsl.w	r0, r5, r0
 8002b8e:	4330      	orrs	r0, r6
 8002b90:	63d0      	str	r0, [r2, #60]	; 0x3c
 8002b92:	e6e8      	b.n	8002966 <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002b94:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8002b96:	4e36      	ldr	r6, [pc, #216]	; (8002c70 <HAL_ADC_ConfigChannel+0x358>)
 8002b98:	403e      	ands	r6, r7
 8002b9a:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002b9e:	4330      	orrs	r0, r6
 8002ba0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002ba4:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8002ba6:	e717      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ba8:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8002baa:	4e31      	ldr	r6, [pc, #196]	; (8002c70 <HAL_ADC_ConfigChannel+0x358>)
 8002bac:	403e      	ands	r6, r7
 8002bae:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002bb2:	4330      	orrs	r0, r6
 8002bb4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002bb8:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8002bba:	e70d      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002bbc:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8002bbe:	4e2c      	ldr	r6, [pc, #176]	; (8002c70 <HAL_ADC_ConfigChannel+0x358>)
 8002bc0:	403e      	ands	r6, r7
 8002bc2:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002bc6:	4330      	orrs	r0, r6
 8002bc8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002bcc:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8002bce:	e703      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bd0:	6810      	ldr	r0, [r2, #0]
 8002bd2:	07c6      	lsls	r6, r0, #31
 8002bd4:	d59b      	bpl.n	8002b0e <HAL_ADC_ConfigChannel+0x1f6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd8:	f042 0220 	orr.w	r2, r2, #32
        tmp_hal_status = HAL_ERROR;
 8002bdc:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002be0:	e6ec      	b.n	80029bc <HAL_ADC_ConfigChannel+0xa4>
 8002be2:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8002be6:	e78d      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x1ec>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	07c0      	lsls	r0, r0, #31
 8002bec:	d4f3      	bmi.n	8002bd6 <HAL_ADC_ConfigChannel+0x2be>
 8002bee:	e793      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x200>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bf0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002bf4:	d183      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf6:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_ADC_ConfigChannel+0x368>)
 8002bf8:	4c22      	ldr	r4, [pc, #136]	; (8002c84 <HAL_ADC_ConfigChannel+0x36c>)
 8002bfa:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002bfc:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bfe:	fba4 4202 	umull	r4, r2, r4, r2
 8002c02:	0c92      	lsrs	r2, r2, #18
 8002c04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c08:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002c0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002c0e:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c10:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002c12:	9a01      	ldr	r2, [sp, #4]
 8002c14:	2a00      	cmp	r2, #0
 8002c16:	f43f af72 	beq.w	8002afe <HAL_ADC_ConfigChannel+0x1e6>
            wait_loop_index--;
 8002c1a:	9a01      	ldr	r2, [sp, #4]
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002c20:	9a01      	ldr	r2, [sp, #4]
 8002c22:	2a00      	cmp	r2, #0
 8002c24:	d1f9      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x302>
 8002c26:	e76a      	b.n	8002afe <HAL_ADC_ConfigChannel+0x1e6>
 8002c28:	4c17      	ldr	r4, [pc, #92]	; (8002c88 <HAL_ADC_ConfigChannel+0x370>)
 8002c2a:	e76b      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	07d7      	lsls	r7, r2, #31
 8002c30:	d4d1      	bmi.n	8002bd6 <HAL_ADC_ConfigChannel+0x2be>
 8002c32:	e707      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c34:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002c36:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002c3a:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8002c3e:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8002c42:	d023      	beq.n	8002c8c <HAL_ADC_ConfigChannel+0x374>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c44:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002c46:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002c4a:	4286      	cmp	r6, r0
 8002c4c:	d023      	beq.n	8002c96 <HAL_ADC_ConfigChannel+0x37e>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c4e:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002c50:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002c54:	4286      	cmp	r6, r0
 8002c56:	d023      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x388>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c58:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002c5a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002c5e:	4286      	cmp	r6, r0
 8002c60:	f47f aeba 	bne.w	80029d8 <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002c64:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002c66:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002c6a:	66d0      	str	r0, [r2, #108]	; 0x6c
 8002c6c:	e6b4      	b.n	80029d8 <HAL_ADC_ConfigChannel+0xc0>
 8002c6e:	bf00      	nop
 8002c70:	83fff000 	.word	0x83fff000
 8002c74:	50000100 	.word	0x50000100
 8002c78:	50000400 	.word	0x50000400
 8002c7c:	50000300 	.word	0x50000300
 8002c80:	20000000 	.word	0x20000000
 8002c84:	431bde83 	.word	0x431bde83
 8002c88:	50000500 	.word	0x50000500
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002c8c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002c8e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002c92:	6610      	str	r0, [r2, #96]	; 0x60
 8002c94:	e7d6      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x32c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002c96:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002c98:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002c9c:	6650      	str	r0, [r2, #100]	; 0x64
 8002c9e:	e7d6      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x336>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002ca0:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002ca2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002ca6:	6690      	str	r0, [r2, #104]	; 0x68
 8002ca8:	e7d6      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x340>
 8002caa:	bf00      	nop

08002cac <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cac:	6803      	ldr	r3, [r0, #0]
 8002cae:	4a45      	ldr	r2, [pc, #276]	; (8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8002cb4:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cb6:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8002cbe:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d04b      	beq.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8002cc6:	4c40      	ldr	r4, [pc, #256]	; (8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002cc8:	42a3      	cmp	r3, r4
 8002cca:	d005      	beq.n	8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8002ccc:	2201      	movs	r2, #1
} 
 8002cce:	4610      	mov	r0, r2
 8002cd0:	bcf0      	pop	{r4, r5, r6, r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8002cd8:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 8002cdc:	f1bc 0f01 	cmp.w	ip, #1
 8002ce0:	d043      	beq.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8002ce2:	2401      	movs	r4, #1
 8002ce4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ce8:	689c      	ldr	r4, [r3, #8]
 8002cea:	0766      	lsls	r6, r4, #29
 8002cec:	d50a      	bpl.n	8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002cf0:	f043 0320 	orr.w	r3, r3, #32
    tmp_hal_status = HAL_ERROR;
 8002cf4:	2201      	movs	r2, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf6:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
} 
 8002cfe:	bcf0      	pop	{r4, r5, r6, r7}
 8002d00:	4610      	mov	r0, r2
 8002d02:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002d04:	6894      	ldr	r4, [r2, #8]
 8002d06:	0764      	lsls	r4, r4, #29
 8002d08:	d4f1      	bmi.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0e:	d046      	beq.n	8002d9e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002d10:	4f2c      	ldr	r7, [pc, #176]	; (8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002d12:	4e2e      	ldr	r6, [pc, #184]	; (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002d14:	4c2e      	ldr	r4, [pc, #184]	; (8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002d16:	42bb      	cmp	r3, r7
 8002d18:	bf08      	it	eq
 8002d1a:	4634      	moveq	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d1c:	b34d      	cbz	r5, 8002d72 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d1e:	68a6      	ldr	r6, [r4, #8]
 8002d20:	684f      	ldr	r7, [r1, #4]
 8002d22:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 8002d26:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 8002d2a:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8002d2e:	ea46 060c 	orr.w	r6, r6, ip
 8002d32:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d34:	689e      	ldr	r6, [r3, #8]
 8002d36:	f006 0603 	and.w	r6, r6, #3
 8002d3a:	2e01      	cmp	r6, #1
 8002d3c:	d03d      	beq.n	8002dba <HAL_ADCEx_MultiModeConfigChannel+0x10e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d3e:	6893      	ldr	r3, [r2, #8]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d030      	beq.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d48:	68a2      	ldr	r2, [r4, #8]
 8002d4a:	688b      	ldr	r3, [r1, #8]
 8002d4c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002d50:	431d      	orrs	r5, r3
 8002d52:	f022 020f 	bic.w	r2, r2, #15
 8002d56:	4315      	orrs	r5, r2
 8002d58:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	e7cc      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 8002d5e:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 8002d62:	4a19      	ldr	r2, [pc, #100]	; (8002dc8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002d64:	f1bc 0f01 	cmp.w	ip, #1
 8002d68:	d1bb      	bne.n	8002ce2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002d6a:	2202      	movs	r2, #2
} 
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	bcf0      	pop	{r4, r5, r6, r7}
 8002d70:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d72:	68a1      	ldr	r1, [r4, #8]
 8002d74:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8002d78:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d7a:	6899      	ldr	r1, [r3, #8]
 8002d7c:	f001 0103 	and.w	r1, r1, #3
 8002d80:	2901      	cmp	r1, #1
 8002d82:	d016      	beq.n	8002db2 <HAL_ADCEx_MultiModeConfigChannel+0x106>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d84:	6893      	ldr	r3, [r2, #8]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d009      	beq.n	8002da2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002d8e:	68a3      	ldr	r3, [r4, #8]
 8002d90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d94:	f023 030f 	bic.w	r3, r3, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d98:	2200      	movs	r2, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002d9a:	60a3      	str	r3, [r4, #8]
 8002d9c:	e7ac      	b.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d9e:	4c0b      	ldr	r4, [pc, #44]	; (8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002da0:	e7bc      	b.n	8002d1c <HAL_ADCEx_MultiModeConfigChannel+0x70>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002da2:	6813      	ldr	r3, [r2, #0]
 8002da4:	07db      	lsls	r3, r3, #31
 8002da6:	d4d8      	bmi.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002da8:	e7f1      	b.n	8002d8e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002daa:	6813      	ldr	r3, [r2, #0]
 8002dac:	07de      	lsls	r6, r3, #31
 8002dae:	d4d4      	bmi.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002db0:	e7ca      	b.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	07d9      	lsls	r1, r3, #31
 8002db6:	d4d0      	bmi.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002db8:	e7e4      	b.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	07df      	lsls	r7, r3, #31
 8002dbe:	d5be      	bpl.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002dc0:	e7cb      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002dc2:	bf00      	nop
 8002dc4:	50000100 	.word	0x50000100
 8002dc8:	50000500 	.word	0x50000500
 8002dcc:	50000300 	.word	0x50000300
 8002dd0:	50000700 	.word	0x50000700

08002dd4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	d07b      	beq.n	8002ed0 <HAL_CAN_Init+0xfc>
{
 8002dd8:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dda:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002dde:	4604      	mov	r4, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d072      	beq.n	8002eca <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002de4:	6822      	ldr	r2, [r4, #0]
 8002de6:	6813      	ldr	r3, [r2, #0]
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dee:	f7ff fa95 	bl	800231c <HAL_GetTick>
 8002df2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002df4:	e004      	b.n	8002e00 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002df6:	f7ff fa91 	bl	800231c <HAL_GetTick>
 8002dfa:	1b43      	subs	r3, r0, r5
 8002dfc:	2b0a      	cmp	r3, #10
 8002dfe:	d85b      	bhi.n	8002eb8 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e00:	6823      	ldr	r3, [r4, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	07d1      	lsls	r1, r2, #31
 8002e06:	d5f6      	bpl.n	8002df6 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	f022 0202 	bic.w	r2, r2, #2
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e10:	f7ff fa84 	bl	800231c <HAL_GetTick>
 8002e14:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e16:	e004      	b.n	8002e22 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e18:	f7ff fa80 	bl	800231c <HAL_GetTick>
 8002e1c:	1b40      	subs	r0, r0, r5
 8002e1e:	280a      	cmp	r0, #10
 8002e20:	d84a      	bhi.n	8002eb8 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	0792      	lsls	r2, r2, #30
 8002e28:	d4f6      	bmi.n	8002e18 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002e2a:	7e22      	ldrb	r2, [r4, #24]
 8002e2c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	bf0c      	ite	eq
 8002e32:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e36:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e3c:	7e62      	ldrb	r2, [r4, #25]
 8002e3e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	bf0c      	ite	eq
 8002e44:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e48:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8002e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e4e:	7ea2      	ldrb	r2, [r4, #26]
 8002e50:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	bf0c      	ite	eq
 8002e56:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e5a:	f022 0220 	bicne.w	r2, r2, #32
 8002e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e60:	7ee2      	ldrb	r2, [r4, #27]
 8002e62:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	bf0c      	ite	eq
 8002e68:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e6c:	f042 0210 	orrne.w	r2, r2, #16
 8002e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e72:	7f22      	ldrb	r2, [r4, #28]
 8002e74:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	bf0c      	ite	eq
 8002e7a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e7e:	f022 0208 	bicne.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e84:	7f62      	ldrb	r2, [r4, #29]
 8002e86:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	bf0c      	ite	eq
 8002e8c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e90:	f022 0204 	bicne.w	r2, r2, #4
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e96:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8002e9a:	6921      	ldr	r1, [r4, #16]
 8002e9c:	4302      	orrs	r2, r0
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	6960      	ldr	r0, [r4, #20]
 8002ea2:	6861      	ldr	r1, [r4, #4]
 8002ea4:	4302      	orrs	r2, r0
 8002ea6:	3901      	subs	r1, #1
 8002ea8:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eaa:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002eac:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002eae:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002eb0:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002eb2:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eba:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ec2:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8002ec6:	2001      	movs	r0, #1
}
 8002ec8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8002eca:	f7fe f8a1 	bl	8001010 <HAL_CAN_MspInit>
 8002ece:	e789      	b.n	8002de4 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8002ed0:	2001      	movs	r0, #1
}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ed4:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	2a01      	cmp	r2, #1
{
 8002edc:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8002ede:	d905      	bls.n	8002eec <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ee0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002ee2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8002ee6:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002eea:	4770      	bx	lr
  CAN_TypeDef *can_ip = hcan->Instance;
 8002eec:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002eee:	6948      	ldr	r0, [r1, #20]
{
 8002ef0:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ef2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8002ef6:	f044 0401 	orr.w	r4, r4, #1
 8002efa:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002efe:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002f02:	2501      	movs	r5, #1
 8002f04:	f000 021f 	and.w	r2, r0, #31
 8002f08:	fa05 f202 	lsl.w	r2, r5, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f0c:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f0e:	ea24 0402 	bic.w	r4, r4, r2
 8002f12:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
 8002f16:	43d4      	mvns	r4, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f18:	2d00      	cmp	r5, #0
 8002f1a:	d13d      	bne.n	8002f98 <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f1c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f20:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f22:	4025      	ands	r5, r4
 8002f24:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f28:	888d      	ldrh	r5, [r1, #4]
 8002f2a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f2e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f32:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f36:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f38:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f3a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f3e:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002f42:	6988      	ldr	r0, [r1, #24]
 8002f44:	bb10      	cbnz	r0, 8002f8c <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f46:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8002f4a:	4020      	ands	r0, r4
 8002f4c:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f50:	6908      	ldr	r0, [r1, #16]
 8002f52:	b9a8      	cbnz	r0, 8002f80 <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f54:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8002f58:	4004      	ands	r4, r0
 8002f5a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f5e:	6a09      	ldr	r1, [r1, #32]
 8002f60:	2901      	cmp	r1, #1
 8002f62:	d104      	bne.n	8002f6e <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f64:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f6e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002f72:	f022 0201 	bic.w	r2, r2, #1
    return HAL_OK;
 8002f76:	2000      	movs	r0, #0
}
 8002f78:	bc70      	pop	{r4, r5, r6}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002f7e:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f80:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8002f84:	4310      	orrs	r0, r2
 8002f86:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8002f8a:	e7e8      	b.n	8002f5e <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f8c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8002f90:	4310      	orrs	r0, r2
 8002f92:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8002f96:	e7db      	b.n	8002f50 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f98:	2d01      	cmp	r5, #1
 8002f9a:	d1d2      	bne.n	8002f42 <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f9c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fa0:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002fa2:	4315      	orrs	r5, r2
 8002fa4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002fa8:	888d      	ldrh	r5, [r1, #4]
 8002faa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002fae:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002fb2:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fb6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002fb8:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002fba:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fbe:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
 8002fc2:	e7be      	b.n	8002f42 <HAL_CAN_ConfigFilter+0x6e>

08002fc4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fc4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fc6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002fca:	2b01      	cmp	r3, #1
{
 8002fcc:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8002fce:	d006      	beq.n	8002fde <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fd0:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002fd2:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fd8:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8002fda:	4630      	mov	r0, r6
 8002fdc:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fde:	6802      	ldr	r2, [r0, #0]
 8002fe0:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fe8:	6813      	ldr	r3, [r2, #0]
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002ff0:	f7ff f994 	bl	800231c <HAL_GetTick>
 8002ff4:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ff6:	e004      	b.n	8003002 <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ff8:	f7ff f990 	bl	800231c <HAL_GetTick>
 8002ffc:	1b43      	subs	r3, r0, r5
 8002ffe:	2b0a      	cmp	r3, #10
 8003000:	d808      	bhi.n	8003014 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003002:	6823      	ldr	r3, [r4, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f013 0301 	ands.w	r3, r3, #1
 800300a:	d1f5      	bne.n	8002ff8 <HAL_CAN_Start+0x34>
    return HAL_OK;
 800300c:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800300e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003010:	4630      	mov	r0, r6
 8003012:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003014:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003016:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800301c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800301e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8003022:	4630      	mov	r0, r6
 8003024:	bd70      	pop	{r4, r5, r6, pc}
 8003026:	bf00      	nop

08003028 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003028:	b430      	push	{r4, r5}
 800302a:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800302c:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003030:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003034:	3801      	subs	r0, #1
 8003036:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003038:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800303a:	d835      	bhi.n	80030a8 <HAL_CAN_AddTxMessage+0x80>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800303c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8003040:	d03b      	beq.n	80030ba <HAL_CAN_AddTxMessage+0x92>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003042:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003046:	2c03      	cmp	r4, #3
 8003048:	d049      	beq.n	80030de <HAL_CAN_AddTxMessage+0xb6>

        return HAL_ERROR;
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800304a:	2001      	movs	r0, #1
 800304c:	40a0      	lsls	r0, r4
 800304e:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003050:	688b      	ldr	r3, [r1, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d03a      	beq.n	80030cc <HAL_CAN_AddTxMessage+0xa4>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 8003056:	68c8      	ldr	r0, [r1, #12]
 8003058:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800305a:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 800305c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003060:	f104 0018 	add.w	r0, r4, #24
 8003064:	0100      	lsls	r0, r0, #4
 8003066:	502b      	str	r3, [r5, r0]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003068:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 800306c:	690b      	ldr	r3, [r1, #16]
 800306e:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003072:	7d09      	ldrb	r1, [r1, #20]
 8003074:	2901      	cmp	r1, #1
 8003076:	ea4f 1304 	mov.w	r3, r4, lsl #4
 800307a:	d105      	bne.n	8003088 <HAL_CAN_AddTxMessage+0x60>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800307c:	f8dc 1184 	ldr.w	r1, [ip, #388]	; 0x184
 8003080:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003084:	f8cc 1184 	str.w	r1, [ip, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003088:	442b      	add	r3, r5
 800308a:	6851      	ldr	r1, [r2, #4]
 800308c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003096:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 800309a:	f043 0301 	orr.w	r3, r3, #1

      /* Return function status */
      return HAL_OK;
 800309e:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80030a0:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030a2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 80030a6:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030a8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 80030b0:	2001      	movs	r0, #1
}
 80030b2:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030b4:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80030b8:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030ba:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80030be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      return HAL_ERROR;
 80030c2:	2001      	movs	r0, #1
}
 80030c4:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030c6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80030ca:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030cc:	68cb      	ldr	r3, [r1, #12]
 80030ce:	6808      	ldr	r0, [r1, #0]
 80030d0:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 80030d4:	f104 0318 	add.w	r3, r4, #24
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	50e8      	str	r0, [r5, r3]
 80030dc:	e7c4      	b.n	8003068 <HAL_CAN_AddTxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80030de:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80030e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
        return HAL_ERROR;
 80030e6:	2001      	movs	r0, #1
}
 80030e8:	bc30      	pop	{r4, r5}
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80030ea:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80030ee:	4770      	bx	lr

080030f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030f0:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80030f2:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80030fa:	f1be 0f01 	cmp.w	lr, #1
{
 80030fe:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003100:	d86d      	bhi.n	80031de <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003102:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003104:	b951      	cbnz	r1, 800311c <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003106:	68c4      	ldr	r4, [r0, #12]
 8003108:	07a5      	lsls	r5, r4, #30
 800310a:	d10a      	bne.n	8003122 <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800310c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 8003114:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003116:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800311a:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800311c:	6904      	ldr	r4, [r0, #16]
 800311e:	07a4      	lsls	r4, r4, #30
 8003120:	d0f4      	beq.n	800310c <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003122:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 8003126:	010c      	lsls	r4, r1, #4
 8003128:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800312c:	f005 0504 	and.w	r5, r5, #4
 8003130:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003132:	2d00      	cmp	r5, #0
 8003134:	d05a      	beq.n	80031ec <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003136:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800313a:	08ed      	lsrs	r5, r5, #3
 800313c:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800313e:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003142:	f005 0502 	and.w	r5, r5, #2
 8003146:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003148:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800314c:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003150:	f005 050f 	and.w	r5, r5, #15
 8003154:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003156:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003158:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800315c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8003160:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003162:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003164:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003168:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800316a:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800316c:	f8dc 2000 	ldr.w	r2, [ip]
 8003170:	4422      	add	r2, r4
 8003172:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003176:	0a12      	lsrs	r2, r2, #8
 8003178:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800317a:	f8dc 2000 	ldr.w	r2, [ip]
 800317e:	4422      	add	r2, r4
 8003180:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003184:	0c12      	lsrs	r2, r2, #16
 8003186:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003188:	f8dc 2000 	ldr.w	r2, [ip]
 800318c:	4422      	add	r2, r4
 800318e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003192:	0e12      	lsrs	r2, r2, #24
 8003194:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003196:	f8dc 2000 	ldr.w	r2, [ip]
 800319a:	4422      	add	r2, r4
 800319c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80031a0:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80031a2:	f8dc 2000 	ldr.w	r2, [ip]
 80031a6:	4422      	add	r2, r4
 80031a8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80031ac:	0a12      	lsrs	r2, r2, #8
 80031ae:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031b0:	f8dc 2000 	ldr.w	r2, [ip]
 80031b4:	4422      	add	r2, r4
 80031b6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80031ba:	0c12      	lsrs	r2, r2, #16
 80031bc:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031be:	f8dc 2000 	ldr.w	r2, [ip]
 80031c2:	4422      	add	r2, r4
 80031c4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80031c8:	0e12      	lsrs	r2, r2, #24
 80031ca:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031cc:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031d0:	b989      	cbnz	r1, 80031f6 <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031d2:	68d3      	ldr	r3, [r2, #12]
 80031d4:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80031d8:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031de:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80031e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 80031e4:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031e6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031ec:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80031f0:	0d6d      	lsrs	r5, r5, #21
 80031f2:	6015      	str	r5, [r2, #0]
 80031f4:	e7a3      	b.n	800313e <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80031f6:	6913      	ldr	r3, [r2, #16]
 80031f8:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80031fc:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80031fe:	6113      	str	r3, [r2, #16]
}
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	bf00      	nop

08003204 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003204:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003208:	3a01      	subs	r2, #1
 800320a:	2a01      	cmp	r2, #1
{
 800320c:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 800320e:	d905      	bls.n	800321c <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003210:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003212:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8003216:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800321a:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800321c:	6802      	ldr	r2, [r0, #0]
 800321e:	6953      	ldr	r3, [r2, #20]
 8003220:	4319      	orrs	r1, r3
    return HAL_OK;
 8003222:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003224:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8003226:	4770      	bx	lr

08003228 <HAL_CAN_TxMailbox0CompleteCallback>:
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop

0800322c <HAL_CAN_TxMailbox1CompleteCallback>:
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop

08003230 <HAL_CAN_TxMailbox2CompleteCallback>:
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop

08003234 <HAL_CAN_TxMailbox0AbortCallback>:
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop

08003238 <HAL_CAN_TxMailbox1AbortCallback>:
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop

0800323c <HAL_CAN_TxMailbox2AbortCallback>:
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <HAL_CAN_RxFifo0FullCallback>:
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop

08003244 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop

08003248 <HAL_CAN_RxFifo1FullCallback>:
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop

0800324c <HAL_CAN_SleepCallback>:
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop

08003250 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop

08003254 <HAL_CAN_ErrorCallback>:
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop

08003258 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003258:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800325c:	6803      	ldr	r3, [r0, #0]
 800325e:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003260:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003264:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003266:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800326a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800326e:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003272:	f014 0601 	ands.w	r6, r4, #1
{
 8003276:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003278:	d025      	beq.n	80032c6 <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800327a:	f017 0601 	ands.w	r6, r7, #1
 800327e:	f040 808f 	bne.w	80033a0 <HAL_CAN_IRQHandler+0x148>
 8003282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800328a:	05f8      	lsls	r0, r7, #23
 800328c:	d50d      	bpl.n	80032aa <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800328e:	682b      	ldr	r3, [r5, #0]
 8003290:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003294:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003296:	05bb      	lsls	r3, r7, #22
 8003298:	f100 80be 	bmi.w	8003418 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800329c:	0578      	lsls	r0, r7, #21
 800329e:	f100 80e4 	bmi.w	800346a <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80032a2:	053b      	lsls	r3, r7, #20
 80032a4:	f140 80f0 	bpl.w	8003488 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80032a8:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032aa:	03f8      	lsls	r0, r7, #15
 80032ac:	d50b      	bpl.n	80032c6 <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032ae:	682b      	ldr	r3, [r5, #0]
 80032b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80032b4:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032b6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80032b8:	f100 80ba 	bmi.w	8003430 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80032bc:	037a      	lsls	r2, r7, #13
 80032be:	f140 80cf 	bpl.w	8003460 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80032c2:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80032c6:	0727      	lsls	r7, r4, #28
 80032c8:	d502      	bpl.n	80032d0 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80032ca:	f01b 0f10 	tst.w	fp, #16
 80032ce:	d161      	bne.n	8003394 <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032d0:	0760      	lsls	r0, r4, #29
 80032d2:	d503      	bpl.n	80032dc <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032d4:	f01b 0f08 	tst.w	fp, #8
 80032d8:	f040 808c 	bne.w	80033f4 <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80032dc:	07a1      	lsls	r1, r4, #30
 80032de:	d504      	bpl.n	80032ea <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80032e0:	682b      	ldr	r3, [r5, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	079a      	lsls	r2, r3, #30
 80032e6:	f040 808c 	bne.w	8003402 <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80032ea:	0663      	lsls	r3, r4, #25
 80032ec:	d502      	bpl.n	80032f4 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80032ee:	f01a 0f10 	tst.w	sl, #16
 80032f2:	d149      	bne.n	8003388 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80032f4:	06a7      	lsls	r7, r4, #26
 80032f6:	d502      	bpl.n	80032fe <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80032f8:	f01a 0f08 	tst.w	sl, #8
 80032fc:	d173      	bne.n	80033e6 <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032fe:	06e0      	lsls	r0, r4, #27
 8003300:	d503      	bpl.n	800330a <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003302:	682b      	ldr	r3, [r5, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	0799      	lsls	r1, r3, #30
 8003308:	d162      	bne.n	80033d0 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800330a:	03a2      	lsls	r2, r4, #14
 800330c:	d502      	bpl.n	8003314 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800330e:	f018 0f10 	tst.w	r8, #16
 8003312:	d161      	bne.n	80033d8 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003314:	03e3      	lsls	r3, r4, #15
 8003316:	d502      	bpl.n	800331e <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003318:	f018 0f08 	tst.w	r8, #8
 800331c:	d175      	bne.n	800340a <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800331e:	0427      	lsls	r7, r4, #16
 8003320:	d505      	bpl.n	800332e <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003322:	f018 0f04 	tst.w	r8, #4
 8003326:	d106      	bne.n	8003336 <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003328:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800332a:	2204      	movs	r2, #4
 800332c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800332e:	2e00      	cmp	r6, #0
 8003330:	d146      	bne.n	80033c0 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003332:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003336:	05e0      	lsls	r0, r4, #23
 8003338:	d504      	bpl.n	8003344 <HAL_CAN_IRQHandler+0xec>
 800333a:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 800333e:	bf18      	it	ne
 8003340:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003344:	05a1      	lsls	r1, r4, #22
 8003346:	d504      	bpl.n	8003352 <HAL_CAN_IRQHandler+0xfa>
 8003348:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 800334c:	bf18      	it	ne
 800334e:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003352:	0562      	lsls	r2, r4, #21
 8003354:	d504      	bpl.n	8003360 <HAL_CAN_IRQHandler+0x108>
 8003356:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800335a:	bf18      	it	ne
 800335c:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003360:	0523      	lsls	r3, r4, #20
 8003362:	d5e1      	bpl.n	8003328 <HAL_CAN_IRQHandler+0xd0>
 8003364:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8003368:	d0de      	beq.n	8003328 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 800336a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800336e:	f000 809a 	beq.w	80034a6 <HAL_CAN_IRQHandler+0x24e>
 8003372:	d861      	bhi.n	8003438 <HAL_CAN_IRQHandler+0x1e0>
 8003374:	f1b9 0f20 	cmp.w	r9, #32
 8003378:	f000 8083 	beq.w	8003482 <HAL_CAN_IRQHandler+0x22a>
 800337c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8003380:	d168      	bne.n	8003454 <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003382:	f046 0620 	orr.w	r6, r6, #32
            break;
 8003386:	e05f      	b.n	8003448 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800338c:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	e7af      	b.n	80032f4 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003398:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	e797      	b.n	80032d0 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033a0:	2201      	movs	r2, #1
 80033a2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033a4:	07bb      	lsls	r3, r7, #30
 80033a6:	d43b      	bmi.n	8003420 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80033a8:	077e      	lsls	r6, r7, #29
 80033aa:	d460      	bmi.n	800346e <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80033ac:	f017 0608 	ands.w	r6, r7, #8
 80033b0:	d06e      	beq.n	8003490 <HAL_CAN_IRQHandler+0x238>
 80033b2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80033b6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80033ba:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80033be:	e764      	b.n	800328a <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 80033c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80033c2:	431e      	orrs	r6, r3
    HAL_CAN_ErrorCallback(hcan);
 80033c4:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80033c6:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80033c8:	f7ff ff44 	bl	8003254 <HAL_CAN_ErrorCallback>
}
 80033cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80033d0:	4628      	mov	r0, r5
 80033d2:	f7ff ff37 	bl	8003244 <HAL_CAN_RxFifo1MsgPendingCallback>
 80033d6:	e798      	b.n	800330a <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	2210      	movs	r2, #16
 80033dc:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80033de:	4628      	mov	r0, r5
 80033e0:	f7ff ff34 	bl	800324c <HAL_CAN_SleepCallback>
 80033e4:	e796      	b.n	8003314 <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80033e6:	682b      	ldr	r3, [r5, #0]
 80033e8:	2208      	movs	r2, #8
 80033ea:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80033ec:	4628      	mov	r0, r5
 80033ee:	f7ff ff2b 	bl	8003248 <HAL_CAN_RxFifo1FullCallback>
 80033f2:	e784      	b.n	80032fe <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	2208      	movs	r2, #8
 80033f8:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80033fa:	4628      	mov	r0, r5
 80033fc:	f7ff ff20 	bl	8003240 <HAL_CAN_RxFifo0FullCallback>
 8003400:	e76c      	b.n	80032dc <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003402:	4628      	mov	r0, r5
 8003404:	f7fe f822 	bl	800144c <HAL_CAN_RxFifo0MsgPendingCallback>
 8003408:	e76f      	b.n	80032ea <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800340a:	682b      	ldr	r3, [r5, #0]
 800340c:	2208      	movs	r2, #8
 800340e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003410:	4628      	mov	r0, r5
 8003412:	f7ff ff1d 	bl	8003250 <HAL_CAN_WakeUpFromRxMsgCallback>
 8003416:	e782      	b.n	800331e <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003418:	4628      	mov	r0, r5
 800341a:	f7ff ff07 	bl	800322c <HAL_CAN_TxMailbox1CompleteCallback>
 800341e:	e744      	b.n	80032aa <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003420:	f7ff ff02 	bl	8003228 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003424:	2600      	movs	r6, #0
 8003426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800342a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800342e:	e72c      	b.n	800328a <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003430:	4628      	mov	r0, r5
 8003432:	f7ff fefd 	bl	8003230 <HAL_CAN_TxMailbox2CompleteCallback>
 8003436:	e746      	b.n	80032c6 <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8003438:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 800343c:	d01e      	beq.n	800347c <HAL_CAN_IRQHandler+0x224>
 800343e:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8003442:	bf08      	it	eq
 8003444:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003450:	619a      	str	r2, [r3, #24]
 8003452:	e76a      	b.n	800332a <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 8003454:	f1b9 0f10 	cmp.w	r9, #16
 8003458:	d1f6      	bne.n	8003448 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 800345a:	f046 0608 	orr.w	r6, r6, #8
            break;
 800345e:	e7f3      	b.n	8003448 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003460:	033b      	lsls	r3, r7, #12
 8003462:	d51c      	bpl.n	800349e <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003464:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8003468:	e72d      	b.n	80032c6 <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800346a:	4616      	mov	r6, r2
 800346c:	e71d      	b.n	80032aa <HAL_CAN_IRQHandler+0x52>
 800346e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003472:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003476:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800347a:	e706      	b.n	800328a <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 800347c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8003480:	e7e2      	b.n	8003448 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003482:	f046 0610 	orr.w	r6, r6, #16
            break;
 8003486:	e7df      	b.n	8003448 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003488:	4628      	mov	r0, r5
 800348a:	f7ff fed5 	bl	8003238 <HAL_CAN_TxMailbox1AbortCallback>
 800348e:	e70c      	b.n	80032aa <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003490:	f7ff fed0 	bl	8003234 <HAL_CAN_TxMailbox0AbortCallback>
 8003494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800349c:	e6f5      	b.n	800328a <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800349e:	4628      	mov	r0, r5
 80034a0:	f7ff fecc 	bl	800323c <HAL_CAN_TxMailbox2AbortCallback>
 80034a4:	e70f      	b.n	80032c6 <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 80034a6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80034aa:	e7cd      	b.n	8003448 <HAL_CAN_IRQHandler+0x1f0>

080034ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034ac:	4907      	ldr	r1, [pc, #28]	; (80034cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80034ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ba:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034bc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034be:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80034c6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_NVIC_SetPriority+0x74>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034da:	f1c3 0e07 	rsb	lr, r3, #7
 80034de:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034e2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e6:	bf28      	it	cs
 80034e8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ec:	f1bc 0f06 	cmp.w	ip, #6
 80034f0:	d91b      	bls.n	800352a <HAL_NVIC_SetPriority+0x5a>
 80034f2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f4:	f04f 3cff 	mov.w	ip, #4294967295
 80034f8:	fa0c fc03 	lsl.w	ip, ip, r3
 80034fc:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	f04f 3cff 	mov.w	ip, #4294967295
 8003504:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003508:	ea21 010c 	bic.w	r1, r1, ip
 800350c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800350e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003514:	db0c      	blt.n	8003530 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003516:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800351a:	0109      	lsls	r1, r1, #4
 800351c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003520:	b2c9      	uxtb	r1, r1
 8003522:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003526:	f85d fb04 	ldr.w	pc, [sp], #4
 800352a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352c:	4613      	mov	r3, r2
 800352e:	e7e7      	b.n	8003500 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_NVIC_SetPriority+0x78>)
 8003532:	f000 000f 	and.w	r0, r0, #15
 8003536:	0109      	lsls	r1, r1, #4
 8003538:	4403      	add	r3, r0
 800353a:	b2c9      	uxtb	r1, r1
 800353c:	7619      	strb	r1, [r3, #24]
 800353e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00
 8003548:	e000ecfc 	.word	0xe000ecfc

0800354c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800354c:	2800      	cmp	r0, #0
 800354e:	db08      	blt.n	8003562 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003550:	0941      	lsrs	r1, r0, #5
 8003552:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_NVIC_EnableIRQ+0x18>)
 8003554:	f000 001f 	and.w	r0, r0, #31
 8003558:	2301      	movs	r3, #1
 800355a:	fa03 f000 	lsl.w	r0, r3, r0
 800355e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003562:	4770      	bx	lr
 8003564:	e000e100 	.word	0xe000e100

08003568 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003568:	3801      	subs	r0, #1
 800356a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800356e:	d210      	bcs.n	8003592 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003570:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003572:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003576:	4c08      	ldr	r4, [pc, #32]	; (8003598 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003578:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800357e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003582:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003584:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003586:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003588:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800358a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358e:	6119      	str	r1, [r3, #16]
 8003590:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003592:	2001      	movs	r0, #1
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800359c:	2800      	cmp	r0, #0
 800359e:	d035      	beq.n	800360c <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035a0:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 80035a4:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a6:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80035a8:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 80035aa:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ac:	6902      	ldr	r2, [r0, #16]
 80035ae:	4323      	orrs	r3, r4
 80035b0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b2:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 80035b6:	4323      	orrs	r3, r4
 80035b8:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ba:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035bc:	4c14      	ldr	r4, [pc, #80]	; (8003610 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 80035be:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 80035c0:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035c2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80035c6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80035ca:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035cc:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 80035ce:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035d0:	d912      	bls.n	80035f8 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035d2:	4b10      	ldr	r3, [pc, #64]	; (8003614 <HAL_DMA_Init+0x78>)
 80035d4:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 80035d6:	4c11      	ldr	r4, [pc, #68]	; (800361c <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035d8:	440b      	add	r3, r1
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 80035e2:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035e6:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 80035e8:	8401      	strh	r1, [r0, #32]
 80035ea:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ee:	6382      	str	r2, [r0, #56]	; 0x38
}  
 80035f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80035f4:	4610      	mov	r0, r2
}  
 80035f6:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035f8:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_DMA_Init+0x84>)
 80035fa:	4a07      	ldr	r2, [pc, #28]	; (8003618 <HAL_DMA_Init+0x7c>)
 80035fc:	440b      	add	r3, r1
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8003604:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003608:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800360a:	e7ea      	b.n	80035e2 <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
}  
 800360e:	4770      	bx	lr
 8003610:	40020407 	.word	0x40020407
 8003614:	bffdfbf8 	.word	0xbffdfbf8
 8003618:	cccccccd 	.word	0xcccccccd
 800361c:	40020400 	.word	0x40020400
 8003620:	bffdfff8 	.word	0xbffdfff8

08003624 <HAL_DMA_Start_IT>:
{
 8003624:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8003626:	f890 4020 	ldrb.w	r4, [r0, #32]
 800362a:	2c01      	cmp	r4, #1
 800362c:	d039      	beq.n	80036a2 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 800362e:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003632:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003634:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 8003636:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800363a:	d005      	beq.n	8003648 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 800363c:	2300      	movs	r3, #0
 800363e:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8003642:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8003644:	2002      	movs	r0, #2
} 
 8003646:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003648:	2502      	movs	r5, #2
 800364a:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800364e:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003650:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003652:	2500      	movs	r5, #0
 8003654:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003656:	6825      	ldr	r5, [r4, #0]
 8003658:	f025 0501 	bic.w	r5, r5, #1
 800365c:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800365e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003660:	fa0c f505 	lsl.w	r5, ip, r5
 8003664:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8003666:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003668:	6843      	ldr	r3, [r0, #4]
 800366a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800366c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 800366e:	bf0b      	itete	eq
 8003670:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003672:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003674:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003676:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003678:	b153      	cbz	r3, 8003690 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	f043 030e 	orr.w	r3, r3, #14
 8003680:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8003688:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800368a:	6023      	str	r3, [r4, #0]
} 
 800368c:	bc70      	pop	{r4, r5, r6}
 800368e:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	f043 030a 	orr.w	r3, r3, #10
 8003696:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	f023 0304 	bic.w	r3, r3, #4
 800369e:	6023      	str	r3, [r4, #0]
 80036a0:	e7ef      	b.n	8003682 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80036a2:	2002      	movs	r0, #2
} 
 80036a4:	bc70      	pop	{r4, r5, r6}
 80036a6:	4770      	bx	lr

080036a8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80036ac:	2a02      	cmp	r2, #2
{
 80036ae:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b0:	d006      	beq.n	80036c0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b2:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80036b4:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036b6:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80036b8:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80036bc:	2001      	movs	r0, #1
}
 80036be:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036c0:	6802      	ldr	r2, [r0, #0]
 80036c2:	6811      	ldr	r1, [r2, #0]
 80036c4:	f021 010e 	bic.w	r1, r1, #14
{
 80036c8:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80036ca:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80036cc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036ce:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80036d0:	6811      	ldr	r1, [r2, #0]
 80036d2:	f021 0101 	bic.w	r1, r1, #1
 80036d6:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80036d8:	2201      	movs	r2, #1
 80036da:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 80036dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80036e0:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 80036e2:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 80036e4:	2000      	movs	r0, #0
}
 80036e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036ec:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80036f0:	2a02      	cmp	r2, #2
 80036f2:	d003      	beq.n	80036fc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f4:	2204      	movs	r2, #4
 80036f6:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80036f8:	2001      	movs	r0, #1
}
 80036fa:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036fc:	6802      	ldr	r2, [r0, #0]
 80036fe:	6811      	ldr	r1, [r2, #0]
 8003700:	f021 010e 	bic.w	r1, r1, #14
{  
 8003704:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003706:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003708:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800370a:	6811      	ldr	r1, [r2, #0]
 800370c:	f021 0101 	bic.w	r1, r1, #1
 8003710:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003712:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003714:	2101      	movs	r1, #1
 8003716:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8003718:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800371a:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 800371c:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8003720:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003724:	b112      	cbz	r2, 800372c <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 8003726:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003728:	2000      	movs	r0, #0
}
 800372a:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	4610      	mov	r0, r2
}
 800372e:	bd10      	pop	{r4, pc}

08003730 <HAL_DMA_IRQHandler>:
{
 8003730:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003732:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003734:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003736:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003738:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800373a:	2304      	movs	r3, #4
 800373c:	4093      	lsls	r3, r2
 800373e:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8003740:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_IRQHandler+0x32>
 8003744:	f015 0f04 	tst.w	r5, #4
 8003748:	d00b      	beq.n	8003762 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	0692      	lsls	r2, r2, #26
 800374e:	d403      	bmi.n	8003758 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8003758:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800375a:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800375c:	b1ca      	cbz	r2, 8003792 <HAL_DMA_IRQHandler+0x62>
}  
 800375e:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8003760:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003762:	2302      	movs	r3, #2
 8003764:	4093      	lsls	r3, r2
 8003766:	420b      	tst	r3, r1
 8003768:	d015      	beq.n	8003796 <HAL_DMA_IRQHandler+0x66>
 800376a:	f015 0f02 	tst.w	r5, #2
 800376e:	d012      	beq.n	8003796 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003770:	6822      	ldr	r2, [r4, #0]
 8003772:	0692      	lsls	r2, r2, #26
 8003774:	d406      	bmi.n	8003784 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	f022 020a 	bic.w	r2, r2, #10
 800377c:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800377e:	2201      	movs	r2, #1
 8003780:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8003784:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003786:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8003788:	2100      	movs	r1, #0
 800378a:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800378e:	2a00      	cmp	r2, #0
 8003790:	d1e5      	bne.n	800375e <HAL_DMA_IRQHandler+0x2e>
}  
 8003792:	bc70      	pop	{r4, r5, r6}
 8003794:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003796:	2308      	movs	r3, #8
 8003798:	4093      	lsls	r3, r2
 800379a:	420b      	tst	r3, r1
 800379c:	d0f9      	beq.n	8003792 <HAL_DMA_IRQHandler+0x62>
 800379e:	072b      	lsls	r3, r5, #28
 80037a0:	d5f7      	bpl.n	8003792 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037a2:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 80037a4:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037a6:	f023 030e 	bic.w	r3, r3, #14
 80037aa:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037ac:	2301      	movs	r3, #1
 80037ae:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 80037b2:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037b6:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 80037b8:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037ba:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 80037bc:	2900      	cmp	r1, #0
 80037be:	d0e8      	beq.n	8003792 <HAL_DMA_IRQHandler+0x62>
}  
 80037c0:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80037c2:	4708      	bx	r1

080037c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037c8:	680c      	ldr	r4, [r1, #0]
{
 80037ca:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037cc:	2c00      	cmp	r4, #0
 80037ce:	d07e      	beq.n	80038ce <HAL_GPIO_Init+0x10a>
 80037d0:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037d4:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8003994 <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00u;
 80037d8:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037da:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037de:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037e0:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 80037e4:	ea15 0804 	ands.w	r8, r5, r4
 80037e8:	d06b      	beq.n	80038c2 <HAL_GPIO_Init+0xfe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037ea:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80037ee:	f007 0203 	and.w	r2, r7, #3
 80037f2:	1e51      	subs	r1, r2, #1
 80037f4:	2901      	cmp	r1, #1
 80037f6:	d96d      	bls.n	80038d4 <HAL_GPIO_Init+0x110>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f8:	2a03      	cmp	r2, #3
 80037fa:	f040 80ac 	bne.w	8003956 <HAL_GPIO_Init+0x192>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80037fe:	fa02 f20c 	lsl.w	r2, r2, ip
 8003802:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8003804:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003806:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003808:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800380a:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 800380e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003810:	d057      	beq.n	80038c2 <HAL_GPIO_Init+0xfe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003812:	f8da 2018 	ldr.w	r2, [sl, #24]
 8003816:	f042 0201 	orr.w	r2, r2, #1
 800381a:	f8ca 2018 	str.w	r2, [sl, #24]
 800381e:	f8da 2018 	ldr.w	r2, [sl, #24]
 8003822:	f002 0201 	and.w	r2, r2, #1
 8003826:	9203      	str	r2, [sp, #12]
 8003828:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003832:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003836:	f003 0103 	and.w	r1, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800383a:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800383c:	0089      	lsls	r1, r1, #2
 800383e:	260f      	movs	r6, #15
 8003840:	fa06 fe01 	lsl.w	lr, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003844:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003848:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800384c:	d015      	beq.n	800387a <HAL_GPIO_Init+0xb6>
 800384e:	4e4c      	ldr	r6, [pc, #304]	; (8003980 <HAL_GPIO_Init+0x1bc>)
 8003850:	42b0      	cmp	r0, r6
 8003852:	f000 808b 	beq.w	800396c <HAL_GPIO_Init+0x1a8>
 8003856:	4e4b      	ldr	r6, [pc, #300]	; (8003984 <HAL_GPIO_Init+0x1c0>)
 8003858:	42b0      	cmp	r0, r6
 800385a:	f000 808b 	beq.w	8003974 <HAL_GPIO_Init+0x1b0>
 800385e:	4e4a      	ldr	r6, [pc, #296]	; (8003988 <HAL_GPIO_Init+0x1c4>)
 8003860:	42b0      	cmp	r0, r6
 8003862:	d07d      	beq.n	8003960 <HAL_GPIO_Init+0x19c>
 8003864:	4e49      	ldr	r6, [pc, #292]	; (800398c <HAL_GPIO_Init+0x1c8>)
 8003866:	42b0      	cmp	r0, r6
 8003868:	bf0b      	itete	eq
 800386a:	f04f 0e04 	moveq.w	lr, #4
 800386e:	2605      	movne	r6, #5
 8003870:	fa0e f101 	lsleq.w	r1, lr, r1
 8003874:	fa06 f101 	lslne.w	r1, r6, r1
 8003878:	430d      	orrs	r5, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 800387a:	6095      	str	r5, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800387c:	4a44      	ldr	r2, [pc, #272]	; (8003990 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800387e:	4944      	ldr	r1, [pc, #272]	; (8003990 <HAL_GPIO_Init+0x1cc>)
        temp = EXTI->IMR;
 8003880:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8003882:	ea6f 0508 	mvn.w	r5, r8
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003886:	03fe      	lsls	r6, r7, #15
        temp &= ~(iocurrent);
 8003888:	bf54      	ite	pl
 800388a:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800388c:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 8003890:	600a      	str	r2, [r1, #0]

        temp = EXTI->EMR;
 8003892:	684a      	ldr	r2, [r1, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003894:	03b9      	lsls	r1, r7, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003896:	493e      	ldr	r1, [pc, #248]	; (8003990 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8003898:	bf54      	ite	pl
 800389a:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800389c:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 80038a0:	604a      	str	r2, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a2:	6889      	ldr	r1, [r1, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80038a4:	4a3a      	ldr	r2, [pc, #232]	; (8003990 <HAL_GPIO_Init+0x1cc>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038a6:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 80038a8:	bf54      	ite	pl
 80038aa:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80038ac:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 80038b0:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 80038b2:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038b4:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80038b6:	4936      	ldr	r1, [pc, #216]	; (8003990 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 80038b8:	bf54      	ite	pl
 80038ba:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80038bc:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 80038c0:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 80038c2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038c4:	fa34 f203 	lsrs.w	r2, r4, r3
 80038c8:	f10c 0c02 	add.w	ip, ip, #2
 80038cc:	d188      	bne.n	80037e0 <HAL_GPIO_Init+0x1c>
  }
}
 80038ce:	b005      	add	sp, #20
 80038d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80038d4:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d6:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038da:	f04f 0e03 	mov.w	lr, #3
 80038de:	fa0e fe0c 	lsl.w	lr, lr, ip
 80038e2:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038e6:	fa06 f60c 	lsl.w	r6, r6, ip
 80038ea:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 80038ec:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038ee:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 80038f2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038f6:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038fa:	f3c7 1500 	ubfx	r5, r7, #4, #1
 80038fe:	409d      	lsls	r5, r3
 8003900:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8003904:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8003906:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003908:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800390c:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8003910:	fa05 f50c 	lsl.w	r5, r5, ip
 8003914:	ea45 050e 	orr.w	r5, r5, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003918:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800391a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	fa02 f20c 	lsl.w	r2, r2, ip
 8003920:	f47f af70 	bne.w	8003804 <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 8003924:	08dd      	lsrs	r5, r3, #3
 8003926:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800392a:	9501      	str	r5, [sp, #4]
 800392c:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800392e:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3u];
 8003932:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003934:	f003 0e07 	and.w	lr, r3, #7
 8003938:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800393c:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800393e:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003942:	fa06 fe0e 	lsl.w	lr, r6, lr
 8003946:	9e00      	ldr	r6, [sp, #0]
 8003948:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 800394c:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800394e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003952:	6235      	str	r5, [r6, #32]
 8003954:	e756      	b.n	8003804 <HAL_GPIO_Init+0x40>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003956:	2103      	movs	r1, #3
 8003958:	fa01 f10c 	lsl.w	r1, r1, ip
 800395c:	43c9      	mvns	r1, r1
 800395e:	e7d2      	b.n	8003906 <HAL_GPIO_Init+0x142>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003960:	f04f 0e03 	mov.w	lr, #3
 8003964:	fa0e f101 	lsl.w	r1, lr, r1
 8003968:	430d      	orrs	r5, r1
 800396a:	e786      	b.n	800387a <HAL_GPIO_Init+0xb6>
 800396c:	fa0b f101 	lsl.w	r1, fp, r1
 8003970:	430d      	orrs	r5, r1
 8003972:	e782      	b.n	800387a <HAL_GPIO_Init+0xb6>
 8003974:	f04f 0e02 	mov.w	lr, #2
 8003978:	fa0e f101 	lsl.w	r1, lr, r1
 800397c:	430d      	orrs	r5, r1
 800397e:	e77c      	b.n	800387a <HAL_GPIO_Init+0xb6>
 8003980:	48000400 	.word	0x48000400
 8003984:	48000800 	.word	0x48000800
 8003988:	48000c00 	.word	0x48000c00
 800398c:	48001000 	.word	0x48001000
 8003990:	40010400 	.word	0x40010400
 8003994:	40021000 	.word	0x40021000

08003998 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003998:	6903      	ldr	r3, [r0, #16]
 800399a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800399c:	bf14      	ite	ne
 800399e:	2001      	movne	r0, #1
 80039a0:	2000      	moveq	r0, #0
 80039a2:	4770      	bx	lr

080039a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a4:	b10a      	cbz	r2, 80039aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039a6:	6181      	str	r1, [r0, #24]
 80039a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039aa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop

080039b0 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b0:	2800      	cmp	r0, #0
 80039b2:	f000 828c 	beq.w	8003ece <HAL_RCC_OscConfig+0x51e>
{
 80039b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	6803      	ldr	r3, [r0, #0]
 80039bc:	07d9      	lsls	r1, r3, #31
{
 80039be:	b083      	sub	sp, #12
 80039c0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c2:	d54f      	bpl.n	8003a64 <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039c4:	49b4      	ldr	r1, [pc, #720]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
 80039c6:	684a      	ldr	r2, [r1, #4]
 80039c8:	f002 020c 	and.w	r2, r2, #12
 80039cc:	2a04      	cmp	r2, #4
 80039ce:	f000 816d 	beq.w	8003cac <HAL_RCC_OscConfig+0x2fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039d2:	684a      	ldr	r2, [r1, #4]
 80039d4:	f002 020c 	and.w	r2, r2, #12
 80039d8:	2a08      	cmp	r2, #8
 80039da:	f000 8163 	beq.w	8003ca4 <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039de:	6863      	ldr	r3, [r4, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d017      	beq.n	8003a16 <HAL_RCC_OscConfig+0x66>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 819c 	beq.w	8003d24 <HAL_RCC_OscConfig+0x374>
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f0:	f000 8258 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x4f4>
 80039f4:	4ba8      	ldr	r3, [pc, #672]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a04:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a06:	4aa4      	ldr	r2, [pc, #656]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
 8003a08:	68a1      	ldr	r1, [r4, #8]
 8003a0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a0c:	f023 030f 	bic.w	r3, r3, #15
 8003a10:	430b      	orrs	r3, r1
 8003a12:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a14:	e00a      	b.n	8003a2c <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a16:	4aa0      	ldr	r2, [pc, #640]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a20:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a22:	68a1      	ldr	r1, [r4, #8]
 8003a24:	f023 030f 	bic.w	r3, r3, #15
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fc76 	bl	800231c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a30:	4f99      	ldr	r7, [pc, #612]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 8003a32:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a38:	2601      	movs	r6, #1
 8003a3a:	e005      	b.n	8003a48 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fc6e 	bl	800231c <HAL_GetTick>
 8003a40:	1b40      	subs	r0, r0, r5
 8003a42:	2864      	cmp	r0, #100	; 0x64
 8003a44:	f200 816a 	bhi.w	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003a48:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	fa98 f3a8 	rbit	r3, r8
 8003a52:	fab3 f383 	clz	r3, r3
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	fa06 f303 	lsl.w	r3, r6, r3
 8003a5e:	4213      	tst	r3, r2
 8003a60:	d0ec      	beq.n	8003a3c <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	079f      	lsls	r7, r3, #30
 8003a66:	d541      	bpl.n	8003aec <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a68:	4a8b      	ldr	r2, [pc, #556]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
 8003a6a:	6851      	ldr	r1, [r2, #4]
 8003a6c:	f011 0f0c 	tst.w	r1, #12
 8003a70:	f000 80c8 	beq.w	8003c04 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a74:	6851      	ldr	r1, [r2, #4]
 8003a76:	f001 010c 	and.w	r1, r1, #12
 8003a7a:	2908      	cmp	r1, #8
 8003a7c:	f000 80be 	beq.w	8003bfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a80:	6922      	ldr	r2, [r4, #16]
 8003a82:	2a00      	cmp	r2, #0
 8003a84:	f000 81ad 	beq.w	8003de2 <HAL_RCC_OscConfig+0x432>
 8003a88:	2501      	movs	r5, #1
 8003a8a:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a9a:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	4f7e      	ldr	r7, [pc, #504]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
        __HAL_RCC_HSI_ENABLE();
 8003a9e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003aa0:	f7fe fc3c 	bl	800231c <HAL_GetTick>
 8003aa4:	f04f 0802 	mov.w	r8, #2
 8003aa8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	e005      	b.n	8003ab8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aac:	f7fe fc36 	bl	800231c <HAL_GetTick>
 8003ab0:	1b80      	subs	r0, r0, r6
 8003ab2:	2802      	cmp	r0, #2
 8003ab4:	f200 8132 	bhi.w	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003ab8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	fa98 f3a8 	rbit	r3, r8
 8003ac2:	fab3 f383 	clz	r3, r3
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	fa05 f303 	lsl.w	r3, r5, r3
 8003ace:	4213      	tst	r3, r2
 8003ad0:	d0ec      	beq.n	8003aac <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	6839      	ldr	r1, [r7, #0]
 8003ad4:	22f8      	movs	r2, #248	; 0xf8
 8003ad6:	fa92 f2a2 	rbit	r2, r2
 8003ada:	6963      	ldr	r3, [r4, #20]
 8003adc:	fab2 f282 	clz	r2, r2
 8003ae0:	4093      	lsls	r3, r2
 8003ae2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	071d      	lsls	r5, r3, #28
 8003aee:	d421      	bmi.n	8003b34 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af0:	0758      	lsls	r0, r3, #29
 8003af2:	d54c      	bpl.n	8003b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af4:	4b68      	ldr	r3, [pc, #416]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
 8003af6:	69da      	ldr	r2, [r3, #28]
 8003af8:	00d1      	lsls	r1, r2, #3
 8003afa:	f140 80c1 	bpl.w	8003c80 <HAL_RCC_OscConfig+0x2d0>
    FlagStatus       pwrclkchanged = RESET;
 8003afe:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b02:	4d66      	ldr	r5, [pc, #408]	; (8003c9c <HAL_RCC_OscConfig+0x2ec>)
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	05da      	lsls	r2, r3, #23
 8003b08:	f140 80f8 	bpl.w	8003cfc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0c:	68e3      	ldr	r3, [r4, #12]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	f000 818d 	beq.w	8003e2e <HAL_RCC_OscConfig+0x47e>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 812e 	beq.w	8003d76 <HAL_RCC_OscConfig+0x3c6>
 8003b1a:	2b05      	cmp	r3, #5
 8003b1c:	4b5e      	ldr	r3, [pc, #376]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	f000 81cd 	beq.w	8003ebe <HAL_RCC_OscConfig+0x50e>
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	621a      	str	r2, [r3, #32]
 8003b2a:	6a1a      	ldr	r2, [r3, #32]
 8003b2c:	f022 0204 	bic.w	r2, r2, #4
 8003b30:	621a      	str	r2, [r3, #32]
 8003b32:	e181      	b.n	8003e38 <HAL_RCC_OscConfig+0x488>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b34:	69a2      	ldr	r2, [r4, #24]
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	d07b      	beq.n	8003c32 <HAL_RCC_OscConfig+0x282>
 8003b3a:	2501      	movs	r5, #1
 8003b3c:	fa95 f2a5 	rbit	r2, r5
      __HAL_RCC_LSI_ENABLE();
 8003b40:	4b57      	ldr	r3, [pc, #348]	; (8003ca0 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	4f55      	ldr	r7, [pc, #340]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_ENABLE();
 8003b44:	fab2 f282 	clz	r2, r2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f04f 0802 	mov.w	r8, #2
 8003b50:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8003b52:	f7fe fbe3 	bl	800231c <HAL_GetTick>
 8003b56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b58:	e005      	b.n	8003b66 <HAL_RCC_OscConfig+0x1b6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b5a:	f7fe fbdf 	bl	800231c <HAL_GetTick>
 8003b5e:	1b80      	subs	r0, r0, r6
 8003b60:	2802      	cmp	r0, #2
 8003b62:	f200 80db 	bhi.w	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003b66:	fa98 f3a8 	rbit	r3, r8
 8003b6a:	fa98 f3a8 	rbit	r3, r8
 8003b6e:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	fa98 f3a8 	rbit	r3, r8
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	f003 031f 	and.w	r3, r3, #31
 8003b80:	fa05 f303 	lsl.w	r3, r5, r3
 8003b84:	4213      	tst	r3, r2
 8003b86:	d0e8      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	0758      	lsls	r0, r3, #29
 8003b8c:	d4b2      	bmi.n	8003af4 <HAL_RCC_OscConfig+0x144>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b8e:	69e0      	ldr	r0, [r4, #28]
 8003b90:	b380      	cbz	r0, 8003bf4 <HAL_RCC_OscConfig+0x244>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b92:	4d41      	ldr	r5, [pc, #260]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
 8003b94:	686b      	ldr	r3, [r5, #4]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	f000 8171 	beq.w	8003e82 <HAL_RCC_OscConfig+0x4d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ba0:	2802      	cmp	r0, #2
 8003ba2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ba6:	f000 8194 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x522>
 8003baa:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bb6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7fe fbac 	bl	800231c <HAL_GetTick>
 8003bc4:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8003bc8:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bca:	2601      	movs	r6, #1
 8003bcc:	e005      	b.n	8003bda <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fe fba5 	bl	800231c <HAL_GetTick>
 8003bd2:	1b00      	subs	r0, r0, r4
 8003bd4:	2802      	cmp	r0, #2
 8003bd6:	f200 80a1 	bhi.w	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003bda:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bde:	682a      	ldr	r2, [r5, #0]
 8003be0:	fa97 f3a7 	rbit	r3, r7
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	fa06 f303 	lsl.w	r3, r6, r3
 8003bf0:	4213      	tst	r3, r2
 8003bf2:	d1ec      	bne.n	8003bce <HAL_RCC_OscConfig+0x21e>
        }
      }
    }
  }

  return HAL_OK;
 8003bf4:	2000      	movs	r0, #0
}
 8003bf6:	b003      	add	sp, #12
 8003bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003bfc:	6852      	ldr	r2, [r2, #4]
 8003bfe:	03d6      	lsls	r6, r2, #15
 8003c00:	f53f af3e 	bmi.w	8003a80 <HAL_RCC_OscConfig+0xd0>
 8003c04:	2202      	movs	r2, #2
 8003c06:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	4923      	ldr	r1, [pc, #140]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
 8003c0c:	6808      	ldr	r0, [r1, #0]
 8003c0e:	fa92 f2a2 	rbit	r2, r2
 8003c12:	fab2 f282 	clz	r2, r2
 8003c16:	f002 021f 	and.w	r2, r2, #31
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c20:	4202      	tst	r2, r0
 8003c22:	d05a      	beq.n	8003cda <HAL_RCC_OscConfig+0x32a>
 8003c24:	6922      	ldr	r2, [r4, #16]
 8003c26:	428a      	cmp	r2, r1
 8003c28:	d057      	beq.n	8003cda <HAL_RCC_OscConfig+0x32a>
        return HAL_ERROR;
 8003c2a:	2001      	movs	r0, #1
}
 8003c2c:	b003      	add	sp, #12
 8003c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c32:	2601      	movs	r6, #1
 8003c34:	fa96 f1a6 	rbit	r1, r6
      __HAL_RCC_LSI_DISABLE();
 8003c38:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3a:	4f17      	ldr	r7, [pc, #92]	; (8003c98 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_DISABLE();
 8003c3c:	fab1 f181 	clz	r1, r1
 8003c40:	440b      	add	r3, r1
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	f04f 0802 	mov.w	r8, #2
 8003c48:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fb67 	bl	800231c <HAL_GetTick>
 8003c4e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c50:	e004      	b.n	8003c5c <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c52:	f7fe fb63 	bl	800231c <HAL_GetTick>
 8003c56:	1b40      	subs	r0, r0, r5
 8003c58:	2802      	cmp	r0, #2
 8003c5a:	d85f      	bhi.n	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003c5c:	fa98 f3a8 	rbit	r3, r8
 8003c60:	fa98 f3a8 	rbit	r3, r8
 8003c64:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6a:	fa98 f3a8 	rbit	r3, r8
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	fa06 f303 	lsl.w	r3, r6, r3
 8003c7a:	4213      	tst	r3, r2
 8003c7c:	d1e9      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2a2>
 8003c7e:	e783      	b.n	8003b88 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c86:	61da      	str	r2, [r3, #28]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003c92:	f04f 0801 	mov.w	r8, #1
 8003c96:	e734      	b.n	8003b02 <HAL_RCC_OscConfig+0x152>
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ca4:	684a      	ldr	r2, [r1, #4]
 8003ca6:	03d2      	lsls	r2, r2, #15
 8003ca8:	f57f ae99 	bpl.w	80039de <HAL_RCC_OscConfig+0x2e>
 8003cac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb0:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	49b1      	ldr	r1, [pc, #708]	; (8003f7c <HAL_RCC_OscConfig+0x5cc>)
 8003cb6:	6808      	ldr	r0, [r1, #0]
 8003cb8:	fa92 f2a2 	rbit	r2, r2
 8003cbc:	fab2 f282 	clz	r2, r2
 8003cc0:	f002 021f 	and.w	r2, r2, #31
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cca:	4202      	tst	r2, r0
 8003ccc:	f43f aeca 	beq.w	8003a64 <HAL_RCC_OscConfig+0xb4>
 8003cd0:	6862      	ldr	r2, [r4, #4]
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	f47f aec6 	bne.w	8003a64 <HAL_RCC_OscConfig+0xb4>
 8003cd8:	e7a7      	b.n	8003c2a <HAL_RCC_OscConfig+0x27a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cda:	4da8      	ldr	r5, [pc, #672]	; (8003f7c <HAL_RCC_OscConfig+0x5cc>)
 8003cdc:	22f8      	movs	r2, #248	; 0xf8
 8003cde:	6828      	ldr	r0, [r5, #0]
 8003ce0:	fa92 f2a2 	rbit	r2, r2
 8003ce4:	fab2 f182 	clz	r1, r2
 8003ce8:	6962      	ldr	r2, [r4, #20]
 8003cea:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8003cee:	408a      	lsls	r2, r1
 8003cf0:	4302      	orrs	r2, r0
 8003cf2:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf4:	071d      	lsls	r5, r3, #28
 8003cf6:	f57f aefb 	bpl.w	8003af0 <HAL_RCC_OscConfig+0x140>
 8003cfa:	e71b      	b.n	8003b34 <HAL_RCC_OscConfig+0x184>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d02:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d04:	f7fe fb0a 	bl	800231c <HAL_GetTick>
 8003d08:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	682b      	ldr	r3, [r5, #0]
 8003d0c:	05db      	lsls	r3, r3, #23
 8003d0e:	f53f aefd 	bmi.w	8003b0c <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d12:	f7fe fb03 	bl	800231c <HAL_GetTick>
 8003d16:	1b80      	subs	r0, r0, r6
 8003d18:	2864      	cmp	r0, #100	; 0x64
 8003d1a:	d9f6      	bls.n	8003d0a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003d1c:	2003      	movs	r0, #3
}
 8003d1e:	b003      	add	sp, #12
 8003d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d24:	4d95      	ldr	r5, [pc, #596]	; (8003f7c <HAL_RCC_OscConfig+0x5cc>)
 8003d26:	682b      	ldr	r3, [r5, #0]
 8003d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2c:	602b      	str	r3, [r5, #0]
 8003d2e:	682b      	ldr	r3, [r5, #0]
 8003d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d34:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d36:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003d38:	68a2      	ldr	r2, [r4, #8]
 8003d3a:	f023 030f 	bic.w	r3, r3, #15
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8003d42:	f7fe faeb 	bl	800231c <HAL_GetTick>
 8003d46:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8003d4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4c:	2701      	movs	r7, #1
 8003d4e:	e004      	b.n	8003d5a <HAL_RCC_OscConfig+0x3aa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fe fae4 	bl	800231c <HAL_GetTick>
 8003d54:	1b80      	subs	r0, r0, r6
 8003d56:	2864      	cmp	r0, #100	; 0x64
 8003d58:	d8e0      	bhi.n	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003d5a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5e:	682a      	ldr	r2, [r5, #0]
 8003d60:	fa98 f3a8 	rbit	r3, r8
 8003d64:	fab3 f383 	clz	r3, r3
 8003d68:	f003 031f 	and.w	r3, r3, #31
 8003d6c:	fa07 f303 	lsl.w	r3, r7, r3
 8003d70:	4213      	tst	r3, r2
 8003d72:	d1ed      	bne.n	8003d50 <HAL_RCC_OscConfig+0x3a0>
 8003d74:	e675      	b.n	8003a62 <HAL_RCC_OscConfig+0xb2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d76:	4d81      	ldr	r5, [pc, #516]	; (8003f7c <HAL_RCC_OscConfig+0x5cc>)
 8003d78:	6a2b      	ldr	r3, [r5, #32]
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	622b      	str	r3, [r5, #32]
 8003d80:	6a2b      	ldr	r3, [r5, #32]
 8003d82:	f023 0304 	bic.w	r3, r3, #4
 8003d86:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003d88:	f7fe fac8 	bl	800231c <HAL_GetTick>
 8003d8c:	f04f 0902 	mov.w	r9, #2
 8003d90:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d92:	2701      	movs	r7, #1
 8003d94:	e013      	b.n	8003dbe <HAL_RCC_OscConfig+0x40e>
 8003d96:	fa99 f3a9 	rbit	r3, r9
 8003d9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003d9c:	fa99 f3a9 	rbit	r3, r9
 8003da0:	fab3 f383 	clz	r3, r3
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	fa07 f303 	lsl.w	r3, r7, r3
 8003dac:	4213      	tst	r3, r2
 8003dae:	d00e      	beq.n	8003dce <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db0:	f7fe fab4 	bl	800231c <HAL_GetTick>
 8003db4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003db8:	1b80      	subs	r0, r0, r6
 8003dba:	4298      	cmp	r0, r3
 8003dbc:	d8ae      	bhi.n	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003dbe:	fa99 f3a9 	rbit	r3, r9
 8003dc2:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0e5      	beq.n	8003d96 <HAL_RCC_OscConfig+0x3e6>
 8003dca:	6a2a      	ldr	r2, [r5, #32]
 8003dcc:	e7e6      	b.n	8003d9c <HAL_RCC_OscConfig+0x3ec>
    if(pwrclkchanged == SET)
 8003dce:	f1b8 0f00 	cmp.w	r8, #0
 8003dd2:	f43f aedc 	beq.w	8003b8e <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd6:	4a69      	ldr	r2, [pc, #420]	; (8003f7c <HAL_RCC_OscConfig+0x5cc>)
 8003dd8:	69d3      	ldr	r3, [r2, #28]
 8003dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dde:	61d3      	str	r3, [r2, #28]
 8003de0:	e6d5      	b.n	8003b8e <HAL_RCC_OscConfig+0x1de>
 8003de2:	2601      	movs	r6, #1
 8003de4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8003de8:	fab3 f383 	clz	r3, r3
 8003dec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003df0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003df4:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	4f61      	ldr	r7, [pc, #388]	; (8003f7c <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_HSI_DISABLE();
 8003df8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fa8f 	bl	800231c <HAL_GetTick>
 8003dfe:	f04f 0802 	mov.w	r8, #2
 8003e02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e04:	e004      	b.n	8003e10 <HAL_RCC_OscConfig+0x460>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e06:	f7fe fa89 	bl	800231c <HAL_GetTick>
 8003e0a:	1b40      	subs	r0, r0, r5
 8003e0c:	2802      	cmp	r0, #2
 8003e0e:	d885      	bhi.n	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003e10:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	fa98 f3a8 	rbit	r3, r8
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	fa06 f303 	lsl.w	r3, r6, r3
 8003e26:	4213      	tst	r3, r2
 8003e28:	d1ed      	bne.n	8003e06 <HAL_RCC_OscConfig+0x456>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	e65e      	b.n	8003aec <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2e:	4a53      	ldr	r2, [pc, #332]	; (8003f7c <HAL_RCC_OscConfig+0x5cc>)
 8003e30:	6a13      	ldr	r3, [r2, #32]
 8003e32:	f043 0301 	orr.w	r3, r3, #1
 8003e36:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003e38:	f7fe fa70 	bl	800231c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3c:	4f4f      	ldr	r7, [pc, #316]	; (8003f7c <HAL_RCC_OscConfig+0x5cc>)
      tickstart = HAL_GetTick();
 8003e3e:	4605      	mov	r5, r0
 8003e40:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e44:	2601      	movs	r6, #1
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x4c2>
 8003e48:	fa99 f3a9 	rbit	r3, r9
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4e:	fa99 f3a9 	rbit	r3, r9
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	fa06 f303 	lsl.w	r3, r6, r3
 8003e5e:	4213      	tst	r3, r2
 8003e60:	d1b5      	bne.n	8003dce <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e62:	f7fe fa5b 	bl	800231c <HAL_GetTick>
 8003e66:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e6a:	1b40      	subs	r0, r0, r5
 8003e6c:	4298      	cmp	r0, r3
 8003e6e:	f63f af55 	bhi.w	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003e72:	fa99 f3a9 	rbit	r3, r9
 8003e76:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0e4      	beq.n	8003e48 <HAL_RCC_OscConfig+0x498>
 8003e7e:	6a3a      	ldr	r2, [r7, #32]
 8003e80:	e7e5      	b.n	8003e4e <HAL_RCC_OscConfig+0x49e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e82:	2801      	cmp	r0, #1
 8003e84:	f43f aeb7 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x246>
        pll_config = RCC->CFGR;
 8003e88:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e8a:	6a22      	ldr	r2, [r4, #32]
 8003e8c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003e90:	4291      	cmp	r1, r2
 8003e92:	f47f aeca 	bne.w	8003c2a <HAL_RCC_OscConfig+0x27a>
 8003e96:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003e98:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003e9c:	1a18      	subs	r0, r3, r0
 8003e9e:	bf18      	it	ne
 8003ea0:	2001      	movne	r0, #1
 8003ea2:	e6a8      	b.n	8003bf6 <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ea8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e5a3      	b.n	8003a06 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebe:	f042 0204 	orr.w	r2, r2, #4
 8003ec2:	621a      	str	r2, [r3, #32]
 8003ec4:	6a1a      	ldr	r2, [r3, #32]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	621a      	str	r2, [r3, #32]
 8003ecc:	e7b4      	b.n	8003e38 <HAL_RCC_OscConfig+0x488>
    return HAL_ERROR;
 8003ece:	2001      	movs	r0, #1
}
 8003ed0:	4770      	bx	lr
 8003ed2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ede:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fa18 	bl	800231c <HAL_GetTick>
 8003eec:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8003ef0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef2:	2701      	movs	r7, #1
 8003ef4:	e005      	b.n	8003f02 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fe fa11 	bl	800231c <HAL_GetTick>
 8003efa:	1b80      	subs	r0, r0, r6
 8003efc:	2802      	cmp	r0, #2
 8003efe:	f63f af0d 	bhi.w	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003f02:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f06:	682a      	ldr	r2, [r5, #0]
 8003f08:	fa98 f3a8 	rbit	r3, r8
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa07 f303 	lsl.w	r3, r7, r3
 8003f18:	4213      	tst	r3, r2
 8003f1a:	d1ec      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1c:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8003f20:	686a      	ldr	r2, [r5, #4]
 8003f22:	430b      	orrs	r3, r1
 8003f24:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	606b      	str	r3, [r5, #4]
 8003f2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f30:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8003f34:	fab3 f383 	clz	r3, r3
 8003f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f40:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f42:	4d0e      	ldr	r5, [pc, #56]	; (8003f7c <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_PLL_ENABLE();
 8003f44:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8003f46:	f7fe f9e9 	bl	800231c <HAL_GetTick>
 8003f4a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8003f4e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f50:	2601      	movs	r6, #1
 8003f52:	e005      	b.n	8003f60 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fe f9e2 	bl	800231c <HAL_GetTick>
 8003f58:	1b00      	subs	r0, r0, r4
 8003f5a:	2802      	cmp	r0, #2
 8003f5c:	f63f aede 	bhi.w	8003d1c <HAL_RCC_OscConfig+0x36c>
 8003f60:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f64:	682a      	ldr	r2, [r5, #0]
 8003f66:	fa97 f3a7 	rbit	r3, r7
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	fa06 f303 	lsl.w	r3, r6, r3
 8003f76:	4213      	tst	r3, r2
 8003f78:	d0ec      	beq.n	8003f54 <HAL_RCC_OscConfig+0x5a4>
 8003f7a:	e63b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x244>
 8003f7c:	40021000 	.word	0x40021000

08003f80 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f80:	2800      	cmp	r0, #0
 8003f82:	f000 80c8 	beq.w	8004116 <HAL_RCC_ClockConfig+0x196>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f86:	4a6f      	ldr	r2, [pc, #444]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	6813      	ldr	r3, [r2, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	428b      	cmp	r3, r1
{
 8003f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f94:	460d      	mov	r5, r1
 8003f96:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f98:	d20c      	bcs.n	8003fb4 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	6813      	ldr	r3, [r2, #0]
 8003f9c:	f023 0307 	bic.w	r3, r3, #7
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa4:	6813      	ldr	r3, [r2, #0]
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	428b      	cmp	r3, r1
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003fae:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8003fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	079f      	lsls	r7, r3, #30
 8003fb8:	d506      	bpl.n	8003fc8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fba:	4963      	ldr	r1, [pc, #396]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	68a0      	ldr	r0, [r4, #8]
 8003fbe:	684a      	ldr	r2, [r1, #4]
 8003fc0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003fc4:	4302      	orrs	r2, r0
 8003fc6:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc8:	07de      	lsls	r6, r3, #31
 8003fca:	d52f      	bpl.n	800402c <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fcc:	6861      	ldr	r1, [r4, #4]
 8003fce:	2901      	cmp	r1, #1
 8003fd0:	f000 80a3 	beq.w	800411a <HAL_RCC_ClockConfig+0x19a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd4:	2902      	cmp	r1, #2
 8003fd6:	f000 808b 	beq.w	80040f0 <HAL_RCC_ClockConfig+0x170>
 8003fda:	2202      	movs	r2, #2
 8003fdc:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b59      	ldr	r3, [pc, #356]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	fa92 f2a2 	rbit	r2, r2
 8003fe8:	fab2 f282 	clz	r2, r2
 8003fec:	f002 021f 	and.w	r2, r2, #31
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	fa03 f202 	lsl.w	r2, r3, r2
 8003ff6:	4202      	tst	r2, r0
 8003ff8:	d0d9      	beq.n	8003fae <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ffa:	4e53      	ldr	r6, [pc, #332]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	6873      	ldr	r3, [r6, #4]
 8003ffe:	f023 0303 	bic.w	r3, r3, #3
 8004002:	430b      	orrs	r3, r1
 8004004:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004006:	f7fe f989 	bl	800231c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800400a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800400e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004010:	e005      	b.n	800401e <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004012:	f7fe f983 	bl	800231c <HAL_GetTick>
 8004016:	1bc0      	subs	r0, r0, r7
 8004018:	4540      	cmp	r0, r8
 800401a:	f200 8090 	bhi.w	800413e <HAL_RCC_ClockConfig+0x1be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	6873      	ldr	r3, [r6, #4]
 8004020:	6862      	ldr	r2, [r4, #4]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800402a:	d1f2      	bne.n	8004012 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4a45      	ldr	r2, [pc, #276]	; (8004144 <HAL_RCC_ClockConfig+0x1c4>)
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	42ab      	cmp	r3, r5
 8004036:	d909      	bls.n	800404c <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	432b      	orrs	r3, r5
 8004040:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004042:	6813      	ldr	r3, [r2, #0]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	42ab      	cmp	r3, r5
 800404a:	d1b0      	bne.n	8003fae <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	0758      	lsls	r0, r3, #29
 8004050:	d506      	bpl.n	8004060 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004052:	493d      	ldr	r1, [pc, #244]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8004054:	68e0      	ldr	r0, [r4, #12]
 8004056:	684a      	ldr	r2, [r1, #4]
 8004058:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800405c:	4302      	orrs	r2, r0
 800405e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004060:	0719      	lsls	r1, r3, #28
 8004062:	d507      	bpl.n	8004074 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004064:	4a38      	ldr	r2, [pc, #224]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	6921      	ldr	r1, [r4, #16]
 8004068:	6853      	ldr	r3, [r2, #4]
 800406a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800406e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004072:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004074:	4934      	ldr	r1, [pc, #208]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004078:	f002 030c 	and.w	r3, r2, #12
 800407c:	2b08      	cmp	r3, #8
 800407e:	d017      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004080:	4932      	ldr	r1, [pc, #200]	; (800414c <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004082:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8004084:	22f0      	movs	r2, #240	; 0xf0
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	fa92 f2a2 	rbit	r2, r2
 800408c:	fab2 f282 	clz	r2, r2
 8004090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004094:	40d3      	lsrs	r3, r2
 8004096:	4a2e      	ldr	r2, [pc, #184]	; (8004150 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8004098:	482e      	ldr	r0, [pc, #184]	; (8004154 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800409a:	5cd3      	ldrb	r3, [r2, r3]
 800409c:	4a2e      	ldr	r2, [pc, #184]	; (8004158 <HAL_RCC_ClockConfig+0x1d8>)
  HAL_InitTick (uwTickPrio);
 800409e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040a0:	fa21 f303 	lsr.w	r3, r1, r3
 80040a4:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80040a6:	f7fe f8f7 	bl	8002298 <HAL_InitTick>
  return HAL_OK;
 80040aa:	2000      	movs	r0, #0
}
 80040ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040b0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80040b4:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040b8:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 80040bc:	fab3 f383 	clz	r3, r3
 80040c0:	4c26      	ldr	r4, [pc, #152]	; (800415c <HAL_RCC_ClockConfig+0x1dc>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040c4:	fa20 f303 	lsr.w	r3, r0, r3
 80040c8:	200f      	movs	r0, #15
 80040ca:	5ce3      	ldrb	r3, [r4, r3]
 80040cc:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040d0:	fab0 f080 	clz	r0, r0
 80040d4:	f001 010f 	and.w	r1, r1, #15
 80040d8:	40c1      	lsrs	r1, r0
 80040da:	4c21      	ldr	r4, [pc, #132]	; (8004160 <HAL_RCC_ClockConfig+0x1e0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040dc:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040de:	5c60      	ldrb	r0, [r4, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040e0:	bf4a      	itet	mi
 80040e2:	491a      	ldrmi	r1, [pc, #104]	; (800414c <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040e4:	491f      	ldrpl	r1, [pc, #124]	; (8004164 <HAL_RCC_ClockConfig+0x1e4>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040e6:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040ea:	fb03 f101 	mul.w	r1, r3, r1
 80040ee:	e7c8      	b.n	8004082 <HAL_RCC_ClockConfig+0x102>
 80040f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040f4:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f8:	4a13      	ldr	r2, [pc, #76]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 80040fa:	6810      	ldr	r0, [r2, #0]
 80040fc:	fa93 f3a3 	rbit	r3, r3
 8004100:	fab3 f383 	clz	r3, r3
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2201      	movs	r2, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	4203      	tst	r3, r0
 8004110:	f47f af73 	bne.w	8003ffa <HAL_RCC_ClockConfig+0x7a>
 8004114:	e74b      	b.n	8003fae <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004116:	2001      	movs	r0, #1
}
 8004118:	4770      	bx	lr
 800411a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800411e:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_RCC_ClockConfig+0x1c8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	fa92 f2a2 	rbit	r2, r2
 800412a:	fab2 f282 	clz	r2, r2
 800412e:	f002 021f 	and.w	r2, r2, #31
 8004132:	fa01 f202 	lsl.w	r2, r1, r2
 8004136:	421a      	tst	r2, r3
 8004138:	f47f af5f 	bne.w	8003ffa <HAL_RCC_ClockConfig+0x7a>
 800413c:	e737      	b.n	8003fae <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800413e:	2003      	movs	r0, #3
 8004140:	e736      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x30>
 8004142:	bf00      	nop
 8004144:	40022000 	.word	0x40022000
 8004148:	40021000 	.word	0x40021000
 800414c:	007a1200 	.word	0x007a1200
 8004150:	080097e0 	.word	0x080097e0
 8004154:	20000008 	.word	0x20000008
 8004158:	20000000 	.word	0x20000000
 800415c:	080097f8 	.word	0x080097f8
 8004160:	08009808 	.word	0x08009808
 8004164:	003d0900 	.word	0x003d0900

08004168 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004168:	4915      	ldr	r1, [pc, #84]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x58>)
 800416a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800416c:	f003 020c 	and.w	r2, r3, #12
 8004170:	2a08      	cmp	r2, #8
 8004172:	d001      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004174:	4813      	ldr	r0, [pc, #76]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004176:	4770      	bx	lr
{
 8004178:	b410      	push	{r4}
 800417a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800417e:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004182:	fab2 f282 	clz	r2, r2
 8004186:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 800418a:	4c0f      	ldr	r4, [pc, #60]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x60>)
 800418c:	40d0      	lsrs	r0, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800418e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004190:	5c20      	ldrb	r0, [r4, r0]
 8004192:	210f      	movs	r1, #15
 8004194:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004198:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800419a:	fab1 f181 	clz	r1, r1
 800419e:	f002 020f 	and.w	r2, r2, #15
 80041a2:	4c0a      	ldr	r4, [pc, #40]	; (80041cc <HAL_RCC_GetSysClockFreq+0x64>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041a4:	bf4c      	ite	mi
 80041a6:	4b07      	ldrmi	r3, [pc, #28]	; (80041c4 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041a8:	4b09      	ldrpl	r3, [pc, #36]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041aa:	fa22 f201 	lsr.w	r2, r2, r1
 80041ae:	5ca2      	ldrb	r2, [r4, r2]
}
 80041b0:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041b4:	bf48      	it	mi
 80041b6:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041ba:	fb03 f000 	mul.w	r0, r3, r0
}
 80041be:	4770      	bx	lr
 80041c0:	40021000 	.word	0x40021000
 80041c4:	007a1200 	.word	0x007a1200
 80041c8:	080097f8 	.word	0x080097f8
 80041cc:	08009808 	.word	0x08009808
 80041d0:	003d0900 	.word	0x003d0900

080041d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	fa92 f2a2 	rbit	r2, r2
 80041e0:	fab2 f282 	clz	r2, r2
 80041e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041e8:	4904      	ldr	r1, [pc, #16]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80041ea:	4805      	ldr	r0, [pc, #20]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80041ec:	40d3      	lsrs	r3, r2
 80041ee:	6800      	ldr	r0, [r0, #0]
 80041f0:	5ccb      	ldrb	r3, [r1, r3]
}    
 80041f2:	40d8      	lsrs	r0, r3
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
 80041fc:	080097f0 	.word	0x080097f0
 8004200:	20000000 	.word	0x20000000

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004206:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	fa92 f2a2 	rbit	r2, r2
 8004210:	fab2 f282 	clz	r2, r2
 8004214:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004218:	4904      	ldr	r1, [pc, #16]	; (800422c <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 800421a:	4805      	ldr	r0, [pc, #20]	; (8004230 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800421c:	40d3      	lsrs	r3, r2
 800421e:	6800      	ldr	r0, [r0, #0]
 8004220:	5ccb      	ldrb	r3, [r1, r3]
} 
 8004222:	40d8      	lsrs	r0, r3
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000
 800422c:	080097f0 	.word	0x080097f0
 8004230:	20000000 	.word	0x20000000

08004234 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004238:	6803      	ldr	r3, [r0, #0]
 800423a:	03dd      	lsls	r5, r3, #15
{
 800423c:	b083      	sub	sp, #12
 800423e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004240:	d540      	bpl.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004242:	4b84      	ldr	r3, [pc, #528]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	00d0      	lsls	r0, r2, #3
 8004248:	f140 80ba 	bpl.w	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424c:	4e82      	ldr	r6, [pc, #520]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800424e:	6833      	ldr	r3, [r6, #0]
 8004250:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 8004252:	f04f 0500 	mov.w	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	f140 80c3 	bpl.w	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800425a:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>
 800425e:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004262:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004266:	d020      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004268:	6861      	ldr	r1, [r4, #4]
 800426a:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800426e:	429a      	cmp	r2, r3
 8004270:	d01c      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004272:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8004276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800427a:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800427e:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004282:	4f76      	ldr	r7, [pc, #472]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004284:	fab2 f282 	clz	r2, r2
 8004288:	443a      	add	r2, r7
 800428a:	0092      	lsls	r2, r2, #2
 800428c:	2601      	movs	r6, #1
 800428e:	6016      	str	r6, [r2, #0]
 8004290:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004294:	fab3 f383 	clz	r3, r3
 8004298:	443b      	add	r3, r7
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042a0:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80042a2:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042a6:	f100 80af 	bmi.w	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042aa:	6861      	ldr	r1, [r4, #4]
 80042ac:	4a69      	ldr	r2, [pc, #420]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042ae:	6a13      	ldr	r3, [r2, #32]
 80042b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042b8:	b11d      	cbz	r5, 80042c2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ba:	69d3      	ldr	r3, [r2, #28]
 80042bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	07df      	lsls	r7, r3, #31
 80042c6:	d506      	bpl.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042c8:	4962      	ldr	r1, [pc, #392]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042ca:	68a0      	ldr	r0, [r4, #8]
 80042cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80042ce:	f022 0203 	bic.w	r2, r2, #3
 80042d2:	4302      	orrs	r2, r0
 80042d4:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042d6:	079e      	lsls	r6, r3, #30
 80042d8:	d506      	bpl.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042da:	495e      	ldr	r1, [pc, #376]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042dc:	68e0      	ldr	r0, [r4, #12]
 80042de:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80042e0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80042e4:	4302      	orrs	r2, r0
 80042e6:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042e8:	075d      	lsls	r5, r3, #29
 80042ea:	d506      	bpl.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ec:	4959      	ldr	r1, [pc, #356]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042ee:	6920      	ldr	r0, [r4, #16]
 80042f0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80042f2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80042f6:	4302      	orrs	r2, r0
 80042f8:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042fa:	0698      	lsls	r0, r3, #26
 80042fc:	d506      	bpl.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fe:	4955      	ldr	r1, [pc, #340]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004300:	69e0      	ldr	r0, [r4, #28]
 8004302:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004304:	f022 0210 	bic.w	r2, r2, #16
 8004308:	4302      	orrs	r2, r0
 800430a:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800430c:	0399      	lsls	r1, r3, #14
 800430e:	d506      	bpl.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004310:	4950      	ldr	r1, [pc, #320]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004312:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004314:	684a      	ldr	r2, [r1, #4]
 8004316:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800431a:	4302      	orrs	r2, r0
 800431c:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800431e:	065a      	lsls	r2, r3, #25
 8004320:	d506      	bpl.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004322:	494c      	ldr	r1, [pc, #304]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004324:	6a20      	ldr	r0, [r4, #32]
 8004326:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004328:	f022 0220 	bic.w	r2, r2, #32
 800432c:	4302      	orrs	r2, r0
 800432e:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004330:	071f      	lsls	r7, r3, #28
 8004332:	d506      	bpl.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004334:	4947      	ldr	r1, [pc, #284]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004336:	6960      	ldr	r0, [r4, #20]
 8004338:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800433a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800433e:	4302      	orrs	r2, r0
 8004340:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004342:	06de      	lsls	r6, r3, #27
 8004344:	d506      	bpl.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004346:	4943      	ldr	r1, [pc, #268]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004348:	69a0      	ldr	r0, [r4, #24]
 800434a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800434c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004350:	4302      	orrs	r2, r0
 8004352:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004354:	059d      	lsls	r5, r3, #22
 8004356:	d506      	bpl.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004358:	493e      	ldr	r1, [pc, #248]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800435a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800435c:	684a      	ldr	r2, [r1, #4]
 800435e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004362:	4302      	orrs	r2, r0
 8004364:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004366:	0618      	lsls	r0, r3, #24
 8004368:	d506      	bpl.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800436a:	493a      	ldr	r1, [pc, #232]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800436c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800436e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004370:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8004374:	4302      	orrs	r2, r0
 8004376:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004378:	05d9      	lsls	r1, r3, #23
 800437a:	d506      	bpl.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800437c:	4935      	ldr	r1, [pc, #212]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800437e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004380:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004382:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8004386:	4302      	orrs	r2, r0
 8004388:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800438a:	04da      	lsls	r2, r3, #19
 800438c:	d506      	bpl.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800438e:	4931      	ldr	r1, [pc, #196]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004390:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004392:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004398:	4302      	orrs	r2, r0
 800439a:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800439c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 80043a0:	d103      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043a2:	4618      	mov	r0, r3
}
 80043a4:	b003      	add	sp, #12
 80043a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043aa:	4a2a      	ldr	r2, [pc, #168]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80043b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 80043b4:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80043ba:	b003      	add	sp, #12
 80043bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c0:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c2:	4e25      	ldr	r6, [pc, #148]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x224>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043c8:	61da      	str	r2, [r3, #28]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d0:	9301      	str	r3, [sp, #4]
 80043d2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d4:	6833      	ldr	r3, [r6, #0]
 80043d6:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 80043d8:	f04f 0501 	mov.w	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043dc:	f53f af3d 	bmi.w	800425a <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043e0:	6833      	ldr	r3, [r6, #0]
 80043e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80043e8:	f7fd ff98 	bl	800231c <HAL_GetTick>
 80043ec:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ee:	6833      	ldr	r3, [r6, #0]
 80043f0:	05da      	lsls	r2, r3, #23
 80043f2:	f53f af32 	bmi.w	800425a <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f6:	f7fd ff91 	bl	800231c <HAL_GetTick>
 80043fa:	1bc0      	subs	r0, r0, r7
 80043fc:	2864      	cmp	r0, #100	; 0x64
 80043fe:	d9f6      	bls.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 8004400:	2003      	movs	r0, #3
}
 8004402:	b003      	add	sp, #12
 8004404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8004408:	f7fd ff88 	bl	800231c <HAL_GetTick>
 800440c:	f04f 0902 	mov.w	r9, #2
 8004410:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004412:	e015      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004414:	fa99 f3a9 	rbit	r3, r9
 8004418:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800441c:	fa99 f3a9 	rbit	r3, r9
 8004420:	fab3 f383 	clz	r3, r3
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	fa06 f303 	lsl.w	r3, r6, r3
 800442c:	4213      	tst	r3, r2
 800442e:	f47f af3c 	bne.w	80042aa <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fd ff73 	bl	800231c <HAL_GetTick>
 8004436:	f241 3388 	movw	r3, #5000	; 0x1388
 800443a:	1bc0      	subs	r0, r0, r7
 800443c:	4298      	cmp	r0, r3
 800443e:	d8df      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004440:	fa99 f3a9 	rbit	r3, r9
 8004444:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0e3      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800444c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004450:	e7e4      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	40007000 	.word	0x40007000
 800445c:	10908100 	.word	0x10908100

08004460 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004460:	2800      	cmp	r0, #0
 8004462:	d077      	beq.n	8004554 <HAL_SPI_Init+0xf4>
{
 8004464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004468:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800446a:	4604      	mov	r4, r0
 800446c:	2e00      	cmp	r6, #0
 800446e:	d058      	beq.n	8004522 <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004470:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004472:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004476:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800447a:	2200      	movs	r2, #0
 800447c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800447e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004482:	2b00      	cmp	r3, #0
 8004484:	d059      	beq.n	800453a <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004486:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004488:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800448a:	2302      	movs	r3, #2
 800448c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004490:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004492:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004496:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800449a:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800449c:	d947      	bls.n	800452e <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800449e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80044a2:	d159      	bne.n	8004558 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044a6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044a8:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	6a27      	ldr	r7, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044b0:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044b4:	6862      	ldr	r2, [r4, #4]
 80044b6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044ba:	f402 7282 	and.w	r2, r2, #260	; 0x104
 80044be:	431a      	orrs	r2, r3
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	431a      	orrs	r2, r3
 80044c8:	6963      	ldr	r3, [r4, #20]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	f006 0c10 	and.w	ip, r6, #16
 80044da:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044de:	69a6      	ldr	r6, [r4, #24]
 80044e0:	69e3      	ldr	r3, [r4, #28]
 80044e2:	f003 0838 	and.w	r8, r3, #56	; 0x38
 80044e6:	f406 7300 	and.w	r3, r6, #512	; 0x200
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f007 0780 	and.w	r7, r7, #128	; 0x80
 80044f0:	ea43 0308 	orr.w	r3, r3, r8
 80044f4:	433b      	orrs	r3, r7
 80044f6:	432b      	orrs	r3, r5
 80044f8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044fa:	0c33      	lsrs	r3, r6, #16
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	ea4e 0303 	orr.w	r3, lr, r3
 8004504:	ea43 030c 	orr.w	r3, r3, ip
 8004508:	4303      	orrs	r3, r0
 800450a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800450c:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800450e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004510:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004514:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004516:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004518:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800451a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 800451e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004522:	6843      	ldr	r3, [r0, #4]
 8004524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004528:	d0a5      	beq.n	8004476 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452a:	61c6      	str	r6, [r0, #28]
 800452c:	e7a3      	b.n	8004476 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800452e:	d00b      	beq.n	8004548 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004530:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004534:	2500      	movs	r5, #0
 8004536:	62a5      	str	r5, [r4, #40]	; 0x28
 8004538:	e7b8      	b.n	80044ac <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 800453a:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800453e:	4620      	mov	r0, r4
 8004540:	f7fd fb5a 	bl	8001bf8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004544:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004546:	e79e      	b.n	8004486 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004548:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800454a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800454e:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8004552:	e7ab      	b.n	80044ac <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004554:	2001      	movs	r0, #1
}
 8004556:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004558:	2000      	movs	r0, #0
 800455a:	e7eb      	b.n	8004534 <HAL_SPI_Init+0xd4>

0800455c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455c:	6a03      	ldr	r3, [r0, #32]
 800455e:	f023 0301 	bic.w	r3, r3, #1
 8004562:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004564:	6a03      	ldr	r3, [r0, #32]
{
 8004566:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800456c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800456e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004572:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004576:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004578:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800457a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800457e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004580:	4d13      	ldr	r5, [pc, #76]	; (80045d0 <TIM_OC1_SetConfig+0x74>)
 8004582:	42a8      	cmp	r0, r5
 8004584:	d00f      	beq.n	80045a6 <TIM_OC1_SetConfig+0x4a>
 8004586:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800458a:	42a8      	cmp	r0, r5
 800458c:	d00b      	beq.n	80045a6 <TIM_OC1_SetConfig+0x4a>
 800458e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004592:	42a8      	cmp	r0, r5
 8004594:	d007      	beq.n	80045a6 <TIM_OC1_SetConfig+0x4a>
 8004596:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800459a:	42a8      	cmp	r0, r5
 800459c:	d003      	beq.n	80045a6 <TIM_OC1_SetConfig+0x4a>
 800459e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045a2:	42a8      	cmp	r0, r5
 80045a4:	d10d      	bne.n	80045c2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80045a8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80045ac:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ae:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80045b6:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ba:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80045be:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045c2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045c4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80045c6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80045c8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80045ca:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80045cc:	6203      	str	r3, [r0, #32]
}
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00

080045d4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045d4:	6a03      	ldr	r3, [r0, #32]
 80045d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045da:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045dc:	6a03      	ldr	r3, [r0, #32]
{
 80045de:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045e2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045ea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80045ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80045f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045fa:	4d15      	ldr	r5, [pc, #84]	; (8004650 <TIM_OC3_SetConfig+0x7c>)
 80045fc:	42a8      	cmp	r0, r5
 80045fe:	d010      	beq.n	8004622 <TIM_OC3_SetConfig+0x4e>
 8004600:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004604:	42a8      	cmp	r0, r5
 8004606:	d00c      	beq.n	8004622 <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004608:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800460c:	42a8      	cmp	r0, r5
 800460e:	d00f      	beq.n	8004630 <TIM_OC3_SetConfig+0x5c>
 8004610:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004614:	42a8      	cmp	r0, r5
 8004616:	d00b      	beq.n	8004630 <TIM_OC3_SetConfig+0x5c>
 8004618:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800461c:	42a8      	cmp	r0, r5
 800461e:	d10f      	bne.n	8004640 <TIM_OC3_SetConfig+0x6c>
 8004620:	e006      	b.n	8004630 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004622:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004624:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004628:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800462c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004630:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004634:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004638:	ea46 0c05 	orr.w	ip, r6, r5
 800463c:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004640:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004642:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004644:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004646:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8004648:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800464a:	6203      	str	r3, [r0, #32]
}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40012c00 	.word	0x40012c00

08004654 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004654:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004658:	2b01      	cmp	r3, #1
 800465a:	d122      	bne.n	80046a2 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800465c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465e:	4917      	ldr	r1, [pc, #92]	; (80046bc <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	2202      	movs	r2, #2
 8004662:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004666:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004668:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004670:	d019      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x52>
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004676:	d016      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x52>
 8004678:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <HAL_TIM_Base_Start_IT+0x6c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x52>
 800467e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x52>
 8004686:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x52>
 800468e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800469c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	4770      	bx	lr
    return HAL_ERROR;
 80046a2:	2001      	movs	r0, #1
 80046a4:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a6:	6899      	ldr	r1, [r3, #8]
 80046a8:	4a06      	ldr	r2, [pc, #24]	; (80046c4 <HAL_TIM_Base_Start_IT+0x70>)
 80046aa:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ac:	2a06      	cmp	r2, #6
 80046ae:	d002      	beq.n	80046b6 <HAL_TIM_Base_Start_IT+0x62>
 80046b0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80046b4:	d1ef      	bne.n	8004696 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 80046b6:	2000      	movs	r0, #0
}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40000400 	.word	0x40000400
 80046c4:	00010007 	.word	0x00010007

080046c8 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046c8:	6803      	ldr	r3, [r0, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	f241 1111 	movw	r1, #4369	; 0x1111
 80046d8:	420a      	tst	r2, r1
 80046da:	d108      	bne.n	80046ee <HAL_TIM_Base_Stop_IT+0x26>
 80046dc:	6a19      	ldr	r1, [r3, #32]
 80046de:	f240 4244 	movw	r2, #1092	; 0x444
 80046e2:	4211      	tst	r1, r2
 80046e4:	d103      	bne.n	80046ee <HAL_TIM_Base_Stop_IT+0x26>
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80046f4:	2000      	movs	r0, #0
 80046f6:	4770      	bx	lr

080046f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80046f8:	2800      	cmp	r0, #0
 80046fa:	f000 8081 	beq.w	8004800 <HAL_TIM_PWM_Init+0x108>
{
 80046fe:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004700:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004704:	4604      	mov	r4, r0
 8004706:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800470a:	2b00      	cmp	r3, #0
 800470c:	d06d      	beq.n	80047ea <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004710:	493c      	ldr	r1, [pc, #240]	; (8004804 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004712:	2302      	movs	r3, #2
 8004714:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004718:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800471a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800471c:	d051      	beq.n	80047c2 <HAL_TIM_PWM_Init+0xca>
 800471e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004722:	d021      	beq.n	8004768 <HAL_TIM_PWM_Init+0x70>
 8004724:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004728:	428a      	cmp	r2, r1
 800472a:	d01d      	beq.n	8004768 <HAL_TIM_PWM_Init+0x70>
 800472c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004730:	428a      	cmp	r2, r1
 8004732:	d019      	beq.n	8004768 <HAL_TIM_PWM_Init+0x70>
 8004734:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8004738:	428a      	cmp	r2, r1
 800473a:	d042      	beq.n	80047c2 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800473c:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8004740:	428a      	cmp	r2, r1
 8004742:	d057      	beq.n	80047f4 <HAL_TIM_PWM_Init+0xfc>
 8004744:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004748:	428a      	cmp	r2, r1
 800474a:	d053      	beq.n	80047f4 <HAL_TIM_PWM_Init+0xfc>
 800474c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004750:	428a      	cmp	r2, r1
 8004752:	d04f      	beq.n	80047f4 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004754:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004756:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800475e:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004760:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004762:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004764:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004766:	e010      	b.n	800478a <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8004768:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800476c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004770:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004776:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004778:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800477a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800477e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004780:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004782:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004784:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004786:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004788:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800478a:	2301      	movs	r3, #1
 800478c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800478e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004792:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004796:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800479a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800479e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80047a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80047ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047b2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80047b6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80047ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80047be:	2000      	movs	r0, #0
}
 80047c0:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80047c2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047c4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80047ca:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80047cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047d0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d2:	69a1      	ldr	r1, [r4, #24]
 80047d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80047da:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047dc:	68e3      	ldr	r3, [r4, #12]
 80047de:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80047e0:	6863      	ldr	r3, [r4, #4]
 80047e2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80047e4:	6963      	ldr	r3, [r4, #20]
 80047e6:	6313      	str	r3, [r2, #48]	; 0x30
 80047e8:	e7cf      	b.n	800478a <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80047ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80047ee:	f7fd faff 	bl	8001df0 <HAL_TIM_PWM_MspInit>
 80047f2:	e78c      	b.n	800470e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fc:	4303      	orrs	r3, r0
 80047fe:	e7e9      	b.n	80047d4 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8004800:	2001      	movs	r0, #1
}
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00

08004808 <HAL_TIM_PWM_Start>:
 8004808:	2900      	cmp	r1, #0
 800480a:	d14a      	bne.n	80048a2 <HAL_TIM_PWM_Start+0x9a>
 800480c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004810:	2b01      	cmp	r3, #1
 8004812:	d160      	bne.n	80048d6 <HAL_TIM_PWM_Start+0xce>
 8004814:	2302      	movs	r3, #2
 8004816:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800481a:	6803      	ldr	r3, [r0, #0]
 800481c:	2201      	movs	r2, #1
 800481e:	6a18      	ldr	r0, [r3, #32]
 8004820:	f001 011f 	and.w	r1, r1, #31
 8004824:	fa02 f101 	lsl.w	r1, r2, r1
 8004828:	ea20 0001 	bic.w	r0, r0, r1
 800482c:	6218      	str	r0, [r3, #32]
 800482e:	6a18      	ldr	r0, [r3, #32]
 8004830:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <HAL_TIM_PWM_Start+0x118>)
 8004832:	4301      	orrs	r1, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	6219      	str	r1, [r3, #32]
 8004838:	d059      	beq.n	80048ee <HAL_TIM_PWM_Start+0xe6>
 800483a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800483e:	4293      	cmp	r3, r2
 8004840:	d00b      	beq.n	800485a <HAL_TIM_PWM_Start+0x52>
 8004842:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004846:	4293      	cmp	r3, r2
 8004848:	d007      	beq.n	800485a <HAL_TIM_PWM_Start+0x52>
 800484a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800484e:	4293      	cmp	r3, r2
 8004850:	d003      	beq.n	800485a <HAL_TIM_PWM_Start+0x52>
 8004852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004856:	4293      	cmp	r3, r2
 8004858:	d103      	bne.n	8004862 <HAL_TIM_PWM_Start+0x5a>
 800485a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
 8004862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004866:	d00e      	beq.n	8004886 <HAL_TIM_PWM_Start+0x7e>
 8004868:	4a2e      	ldr	r2, [pc, #184]	; (8004924 <HAL_TIM_PWM_Start+0x11c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00b      	beq.n	8004886 <HAL_TIM_PWM_Start+0x7e>
 800486e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004872:	4293      	cmp	r3, r2
 8004874:	d007      	beq.n	8004886 <HAL_TIM_PWM_Start+0x7e>
 8004876:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800487a:	4293      	cmp	r3, r2
 800487c:	d003      	beq.n	8004886 <HAL_TIM_PWM_Start+0x7e>
 800487e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004882:	4293      	cmp	r3, r2
 8004884:	d107      	bne.n	8004896 <HAL_TIM_PWM_Start+0x8e>
 8004886:	6899      	ldr	r1, [r3, #8]
 8004888:	4a27      	ldr	r2, [pc, #156]	; (8004928 <HAL_TIM_PWM_Start+0x120>)
 800488a:	400a      	ands	r2, r1
 800488c:	2a06      	cmp	r2, #6
 800488e:	d024      	beq.n	80048da <HAL_TIM_PWM_Start+0xd2>
 8004890:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004894:	d021      	beq.n	80048da <HAL_TIM_PWM_Start+0xd2>
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	f042 0201 	orr.w	r2, r2, #1
 800489c:	2000      	movs	r0, #0
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	4770      	bx	lr
 80048a2:	2904      	cmp	r1, #4
 80048a4:	d01b      	beq.n	80048de <HAL_TIM_PWM_Start+0xd6>
 80048a6:	2908      	cmp	r1, #8
 80048a8:	d026      	beq.n	80048f8 <HAL_TIM_PWM_Start+0xf0>
 80048aa:	290c      	cmp	r1, #12
 80048ac:	d00f      	beq.n	80048ce <HAL_TIM_PWM_Start+0xc6>
 80048ae:	2910      	cmp	r1, #16
 80048b0:	d02e      	beq.n	8004910 <HAL_TIM_PWM_Start+0x108>
 80048b2:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d10d      	bne.n	80048d6 <HAL_TIM_PWM_Start+0xce>
 80048ba:	2908      	cmp	r1, #8
 80048bc:	d020      	beq.n	8004900 <HAL_TIM_PWM_Start+0xf8>
 80048be:	290c      	cmp	r1, #12
 80048c0:	d022      	beq.n	8004908 <HAL_TIM_PWM_Start+0x100>
 80048c2:	2910      	cmp	r1, #16
 80048c4:	d028      	beq.n	8004918 <HAL_TIM_PWM_Start+0x110>
 80048c6:	2302      	movs	r3, #2
 80048c8:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80048cc:	e7a5      	b.n	800481a <HAL_TIM_PWM_Start+0x12>
 80048ce:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d018      	beq.n	8004908 <HAL_TIM_PWM_Start+0x100>
 80048d6:	2001      	movs	r0, #1
 80048d8:	4770      	bx	lr
 80048da:	2000      	movs	r0, #0
 80048dc:	4770      	bx	lr
 80048de:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d1f7      	bne.n	80048d6 <HAL_TIM_PWM_Start+0xce>
 80048e6:	2302      	movs	r3, #2
 80048e8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80048ec:	e795      	b.n	800481a <HAL_TIM_PWM_Start+0x12>
 80048ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f4:	645a      	str	r2, [r3, #68]	; 0x44
 80048f6:	e7c6      	b.n	8004886 <HAL_TIM_PWM_Start+0x7e>
 80048f8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d1ea      	bne.n	80048d6 <HAL_TIM_PWM_Start+0xce>
 8004900:	2302      	movs	r3, #2
 8004902:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004906:	e788      	b.n	800481a <HAL_TIM_PWM_Start+0x12>
 8004908:	2302      	movs	r3, #2
 800490a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800490e:	e784      	b.n	800481a <HAL_TIM_PWM_Start+0x12>
 8004910:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004914:	2b01      	cmp	r3, #1
 8004916:	d1de      	bne.n	80048d6 <HAL_TIM_PWM_Start+0xce>
 8004918:	2302      	movs	r3, #2
 800491a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800491e:	e77c      	b.n	800481a <HAL_TIM_PWM_Start+0x12>
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40000400 	.word	0x40000400
 8004928:	00010007 	.word	0x00010007

0800492c <HAL_TIM_OC_DelayElapsedCallback>:
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop

08004930 <HAL_TIM_IC_CaptureCallback>:
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop

08004934 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop

08004938 <HAL_TIM_TriggerCallback>:
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop

0800493c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800493c:	6803      	ldr	r3, [r0, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	0791      	lsls	r1, r2, #30
{
 8004942:	b510      	push	{r4, lr}
 8004944:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004946:	d502      	bpl.n	800494e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	0792      	lsls	r2, r2, #30
 800494c:	d468      	bmi.n	8004a20 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	0752      	lsls	r2, r2, #29
 8004952:	d502      	bpl.n	800495a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	0750      	lsls	r0, r2, #29
 8004958:	d44f      	bmi.n	80049fa <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	0711      	lsls	r1, r2, #28
 800495e:	d502      	bpl.n	8004966 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	0712      	lsls	r2, r2, #28
 8004964:	d437      	bmi.n	80049d6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	06d0      	lsls	r0, r2, #27
 800496a:	d502      	bpl.n	8004972 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	06d1      	lsls	r1, r2, #27
 8004970:	d41e      	bmi.n	80049b0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	07d2      	lsls	r2, r2, #31
 8004976:	d502      	bpl.n	800497e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	07d0      	lsls	r0, r2, #31
 800497c:	d469      	bmi.n	8004a52 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	0611      	lsls	r1, r2, #24
 8004982:	d502      	bpl.n	800498a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	0612      	lsls	r2, r2, #24
 8004988:	d46b      	bmi.n	8004a62 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	05d0      	lsls	r0, r2, #23
 800498e:	d502      	bpl.n	8004996 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	0611      	lsls	r1, r2, #24
 8004994:	d46d      	bmi.n	8004a72 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	0652      	lsls	r2, r2, #25
 800499a:	d502      	bpl.n	80049a2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	0650      	lsls	r0, r2, #25
 80049a0:	d46f      	bmi.n	8004a82 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	0691      	lsls	r1, r2, #26
 80049a6:	d502      	bpl.n	80049ae <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	0692      	lsls	r2, r2, #26
 80049ac:	d449      	bmi.n	8004a42 <HAL_TIM_IRQHandler+0x106>
}
 80049ae:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049b8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80049c0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c2:	d16f      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c4:	f7ff ffb2 	bl	800492c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	4620      	mov	r0, r4
 80049ca:	f7ff ffb3 	bl	8004934 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	7722      	strb	r2, [r4, #28]
 80049d4:	e7cd      	b.n	8004972 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049d6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049da:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049dc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049de:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80049e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049e6:	d15a      	bne.n	8004a9e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e8:	f7ff ffa0 	bl	800492c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049ec:	4620      	mov	r0, r4
 80049ee:	f7ff ffa1 	bl	8004934 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049f4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f6:	7722      	strb	r2, [r4, #28]
 80049f8:	e7b5      	b.n	8004966 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049fa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fe:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a00:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a02:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a0c:	d144      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	f7ff ff8d 	bl	800492c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a12:	4620      	mov	r0, r4
 8004a14:	f7ff ff8e 	bl	8004934 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a18:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a1a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1c:	7722      	strb	r2, [r4, #28]
 8004a1e:	e79c      	b.n	800495a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a20:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a24:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a26:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a28:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	0799      	lsls	r1, r3, #30
 8004a2e:	d130      	bne.n	8004a92 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a30:	f7ff ff7c 	bl	800492c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a34:	4620      	mov	r0, r4
 8004a36:	f7ff ff7d 	bl	8004934 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a3c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a3e:	7722      	strb	r2, [r4, #28]
 8004a40:	e785      	b.n	800494e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a42:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004a46:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a48:	611a      	str	r2, [r3, #16]
}
 8004a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004a4e:	f000 ba91 	b.w	8004f74 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a52:	f06f 0201 	mvn.w	r2, #1
 8004a56:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7fc fc55 	bl	8001308 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	e78d      	b.n	800497e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a62:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004a68:	4620      	mov	r0, r4
 8004a6a:	f000 fa85 	bl	8004f78 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	e78b      	b.n	800498a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 fa7f 	bl	8004f7c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	e789      	b.n	8004996 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a86:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f7ff ff55 	bl	8004938 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	e787      	b.n	80049a2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	f7ff ff4d 	bl	8004930 <HAL_TIM_IC_CaptureCallback>
 8004a96:	e7d0      	b.n	8004a3a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a98:	f7ff ff4a 	bl	8004930 <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e7bc      	b.n	8004a18 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	f7ff ff47 	bl	8004930 <HAL_TIM_IC_CaptureCallback>
 8004aa2:	e7a6      	b.n	80049f2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa4:	f7ff ff44 	bl	8004930 <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e791      	b.n	80049ce <HAL_TIM_IRQHandler+0x92>
 8004aaa:	bf00      	nop

08004aac <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aac:	6a03      	ldr	r3, [r0, #32]
 8004aae:	f023 0310 	bic.w	r3, r3, #16
 8004ab2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004ab4:	6a03      	ldr	r3, [r0, #32]
{
 8004ab6:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8004ab8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004aba:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004abc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004abe:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004ac2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004acc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ad0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad4:	4d14      	ldr	r5, [pc, #80]	; (8004b28 <TIM_OC2_SetConfig+0x7c>)
 8004ad6:	42a8      	cmp	r0, r5
 8004ad8:	d010      	beq.n	8004afc <TIM_OC2_SetConfig+0x50>
 8004ada:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004ade:	42a8      	cmp	r0, r5
 8004ae0:	d00c      	beq.n	8004afc <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004ae6:	42a8      	cmp	r0, r5
 8004ae8:	d00f      	beq.n	8004b0a <TIM_OC2_SetConfig+0x5e>
 8004aea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004aee:	42a8      	cmp	r0, r5
 8004af0:	d00b      	beq.n	8004b0a <TIM_OC2_SetConfig+0x5e>
 8004af2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004af6:	42a8      	cmp	r0, r5
 8004af8:	d10f      	bne.n	8004b1a <TIM_OC2_SetConfig+0x6e>
 8004afa:	e006      	b.n	8004b0a <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004afc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b02:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b0a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b0e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b12:	ea46 0c05 	orr.w	ip, r6, r5
 8004b16:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004b1a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b1c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b1e:	6182      	str	r2, [r0, #24]
}
 8004b20:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8004b22:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004b24:	6203      	str	r3, [r0, #32]
}
 8004b26:	4770      	bx	lr
 8004b28:	40012c00 	.word	0x40012c00

08004b2c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004b2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	f000 812b 	beq.w	8004d8c <HAL_TIM_PWM_ConfigChannel+0x260>
 8004b36:	2301      	movs	r3, #1
{
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8004b3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004b42:	2a14      	cmp	r2, #20
 8004b44:	d816      	bhi.n	8004b74 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004b46:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004b4a:	005d      	.short	0x005d
 8004b4c:	00150015 	.word	0x00150015
 8004b50:	00720015 	.word	0x00720015
 8004b54:	00150015 	.word	0x00150015
 8004b58:	00880015 	.word	0x00880015
 8004b5c:	00150015 	.word	0x00150015
 8004b60:	009d0015 	.word	0x009d0015
 8004b64:	00150015 	.word	0x00150015
 8004b68:	00e00015 	.word	0x00e00015
 8004b6c:	00150015 	.word	0x00150015
 8004b70:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 8004b74:	2300      	movs	r3, #0
 8004b76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004b7a:	2001      	movs	r0, #1
}
 8004b7c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b7e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b80:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b82:	6a1a      	ldr	r2, [r3, #32]
 8004b84:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004b88:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004b8a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004b8c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004b8e:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b90:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004b94:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b98:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b9c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b9e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ba2:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba6:	4e7a      	ldr	r6, [pc, #488]	; (8004d90 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004ba8:	42b3      	cmp	r3, r6
 8004baa:	d00f      	beq.n	8004bcc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004bac:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004bb0:	42b3      	cmp	r3, r6
 8004bb2:	d00b      	beq.n	8004bcc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004bb4:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004bb8:	42b3      	cmp	r3, r6
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004bbc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004bc0:	42b3      	cmp	r3, r6
 8004bc2:	d003      	beq.n	8004bcc <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004bc4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004bc8:	42b3      	cmp	r3, r6
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_ConfigChannel+0xaa>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bcc:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bce:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bd2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd6:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bd8:	6559      	str	r1, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bda:	6869      	ldr	r1, [r5, #4]
 8004bdc:	65d9      	str	r1, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bde:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004be2:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004be4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004be8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004bec:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004bf0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bf2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bf4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2000      	movs	r0, #0
}
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c04:	6800      	ldr	r0, [r0, #0]
 8004c06:	f7ff fca9 	bl	800455c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c0a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c0c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c0e:	6999      	ldr	r1, [r3, #24]
 8004c10:	f041 0108 	orr.w	r1, r1, #8
 8004c14:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c16:	6999      	ldr	r1, [r3, #24]
 8004c18:	f021 0104 	bic.w	r1, r1, #4
 8004c1c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	4302      	orrs	r2, r0
 8004c22:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004c24:	2300      	movs	r3, #0
 8004c26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004c2a:	2000      	movs	r0, #0
}
 8004c2c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c2e:	6800      	ldr	r0, [r0, #0]
 8004c30:	f7ff ff3c 	bl	8004aac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c34:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c36:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c38:	6999      	ldr	r1, [r3, #24]
 8004c3a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004c3e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c40:	6999      	ldr	r1, [r3, #24]
 8004c42:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004c46:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004c4e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004c50:	2300      	movs	r3, #0
 8004c52:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2000      	movs	r0, #0
}
 8004c58:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c5a:	6800      	ldr	r0, [r0, #0]
 8004c5c:	f7ff fcba 	bl	80045d4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c60:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c62:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c64:	69d9      	ldr	r1, [r3, #28]
 8004c66:	f041 0108 	orr.w	r1, r1, #8
 8004c6a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c6c:	69d9      	ldr	r1, [r3, #28]
 8004c6e:	f021 0104 	bic.w	r1, r1, #4
 8004c72:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c74:	69da      	ldr	r2, [r3, #28]
 8004c76:	4302      	orrs	r2, r0
 8004c78:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004c80:	2000      	movs	r0, #0
}
 8004c82:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c84:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c86:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c8e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004c90:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004c92:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004c94:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c96:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004c9a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ca2:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004ca4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ca8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cac:	4e38      	ldr	r6, [pc, #224]	; (8004d90 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004cae:	42b3      	cmp	r3, r6
 8004cb0:	d00f      	beq.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004cb2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004cb6:	42b3      	cmp	r3, r6
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004cba:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004cbe:	42b3      	cmp	r3, r6
 8004cc0:	d007      	beq.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004cc2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004cc6:	42b3      	cmp	r3, r6
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004cca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004cce:	42b3      	cmp	r3, r6
 8004cd0:	d104      	bne.n	8004cdc <HAL_TIM_PWM_ConfigChannel+0x1b0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cd2:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cd4:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004cd8:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8004cdc:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004cde:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce0:	6869      	ldr	r1, [r5, #4]
 8004ce2:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004ce4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ce6:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ce8:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cea:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004cee:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cf0:	69d9      	ldr	r1, [r3, #28]
 8004cf2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004cf6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cf8:	69da      	ldr	r2, [r3, #28]
 8004cfa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004cfe:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004d00:	2300      	movs	r3, #0
 8004d02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2000      	movs	r0, #0
}
 8004d08:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004d0a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004d0c:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d14:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004d16:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004d18:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004d1a:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d1c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004d20:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8004d24:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d26:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8004d28:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d2c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	4e17      	ldr	r6, [pc, #92]	; (8004d90 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004d32:	42b3      	cmp	r3, r6
 8004d34:	d00f      	beq.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004d36:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004d3a:	42b3      	cmp	r3, r6
 8004d3c:	d00b      	beq.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004d3e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004d42:	42b3      	cmp	r3, r6
 8004d44:	d007      	beq.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004d46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d4a:	42b3      	cmp	r3, r6
 8004d4c:	d003      	beq.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004d4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d52:	42b3      	cmp	r3, r6
 8004d54:	d104      	bne.n	8004d60 <HAL_TIM_PWM_ConfigChannel+0x234>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d56:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d58:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d5c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8004d60:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004d62:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004d64:	6869      	ldr	r1, [r5, #4]
 8004d66:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8004d68:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d6a:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d6c:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d6e:	f041 0108 	orr.w	r1, r1, #8
 8004d72:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d76:	f021 0104 	bic.w	r1, r1, #4
 8004d7a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d7e:	432a      	orrs	r2, r5
 8004d80:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8004d82:	2300      	movs	r3, #0
 8004d84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004d88:	2000      	movs	r0, #0
}
 8004d8a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8004d8c:	2002      	movs	r0, #2
}
 8004d8e:	4770      	bx	lr
 8004d90:	40012c00 	.word	0x40012c00

08004d94 <HAL_TIMEx_PWMN_Start>:
 8004d94:	2900      	cmp	r1, #0
 8004d96:	d13a      	bne.n	8004e0e <HAL_TIMEx_PWMN_Start+0x7a>
 8004d98:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d142      	bne.n	8004e26 <HAL_TIMEx_PWMN_Start+0x92>
 8004da0:	2302      	movs	r3, #2
 8004da2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8004da6:	6803      	ldr	r3, [r0, #0]
 8004da8:	2204      	movs	r2, #4
 8004daa:	6a18      	ldr	r0, [r3, #32]
 8004dac:	f001 011f 	and.w	r1, r1, #31
 8004db0:	fa02 f101 	lsl.w	r1, r2, r1
 8004db4:	ea20 0001 	bic.w	r0, r0, r1
 8004db8:	6218      	str	r0, [r3, #32]
 8004dba:	6a1a      	ldr	r2, [r3, #32]
 8004dbc:	4824      	ldr	r0, [pc, #144]	; (8004e50 <HAL_TIMEx_PWMN_Start+0xbc>)
 8004dbe:	4311      	orrs	r1, r2
 8004dc0:	6219      	str	r1, [r3, #32]
 8004dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc4:	4283      	cmp	r3, r0
 8004dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
 8004dcc:	d011      	beq.n	8004df2 <HAL_TIMEx_PWMN_Start+0x5e>
 8004dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd2:	d00e      	beq.n	8004df2 <HAL_TIMEx_PWMN_Start+0x5e>
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <HAL_TIMEx_PWMN_Start+0xc0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <HAL_TIMEx_PWMN_Start+0x5e>
 8004dda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d007      	beq.n	8004df2 <HAL_TIMEx_PWMN_Start+0x5e>
 8004de2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d003      	beq.n	8004df2 <HAL_TIMEx_PWMN_Start+0x5e>
 8004dea:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d107      	bne.n	8004e02 <HAL_TIMEx_PWMN_Start+0x6e>
 8004df2:	6899      	ldr	r1, [r3, #8]
 8004df4:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <HAL_TIMEx_PWMN_Start+0xc4>)
 8004df6:	400a      	ands	r2, r1
 8004df8:	2a06      	cmp	r2, #6
 8004dfa:	d016      	beq.n	8004e2a <HAL_TIMEx_PWMN_Start+0x96>
 8004dfc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004e00:	d013      	beq.n	8004e2a <HAL_TIMEx_PWMN_Start+0x96>
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	2000      	movs	r0, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	4770      	bx	lr
 8004e0e:	2904      	cmp	r1, #4
 8004e10:	d00d      	beq.n	8004e2e <HAL_TIMEx_PWMN_Start+0x9a>
 8004e12:	2908      	cmp	r1, #8
 8004e14:	d013      	beq.n	8004e3e <HAL_TIMEx_PWMN_Start+0xaa>
 8004e16:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d103      	bne.n	8004e26 <HAL_TIMEx_PWMN_Start+0x92>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 8004e24:	e7bf      	b.n	8004da6 <HAL_TIMEx_PWMN_Start+0x12>
 8004e26:	2001      	movs	r0, #1
 8004e28:	4770      	bx	lr
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	4770      	bx	lr
 8004e2e:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d1f7      	bne.n	8004e26 <HAL_TIMEx_PWMN_Start+0x92>
 8004e36:	2302      	movs	r3, #2
 8004e38:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8004e3c:	e7b3      	b.n	8004da6 <HAL_TIMEx_PWMN_Start+0x12>
 8004e3e:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d1ef      	bne.n	8004e26 <HAL_TIMEx_PWMN_Start+0x92>
 8004e46:	2302      	movs	r3, #2
 8004e48:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8004e4c:	e7ab      	b.n	8004da6 <HAL_TIMEx_PWMN_Start+0x12>
 8004e4e:	bf00      	nop
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40000400 	.word	0x40000400
 8004e58:	00010007 	.word	0x00010007

08004e5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d03a      	beq.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 8004e64:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e66:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e68:	4d1d      	ldr	r5, [pc, #116]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e70:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8004e72:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e76:	d026      	beq.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8004e78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004e7c:	42aa      	cmp	r2, r5
 8004e7e:	d022      	beq.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e80:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e86:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e88:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8004e8c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8e:	d00c      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004e90:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d009      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004e96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d005      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004e9e:	42aa      	cmp	r2, r5
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004ea2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d104      	bne.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eaa:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eac:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eb0:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eb2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004eb4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ebc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004ec0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004ec2:	4618      	mov	r0, r3
}
 8004ec4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ec6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ec8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ecc:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ece:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed4:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8004ed6:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed8:	e7e7      	b.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8004eda:	2002      	movs	r0, #2
}
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40000400 	.word	0x40000400

08004ee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ee8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d03d      	beq.n	8004f6c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 8004ef0:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ef2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8004ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efa:	4602      	mov	r2, r0
 8004efc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004efe:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f00:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f06:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f0c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f0e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f14:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f16:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f1c:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f1e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f24:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f26:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f28:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f2c:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f32:	4c0f      	ldr	r4, [pc, #60]	; (8004f70 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8004f34:	42a0      	cmp	r0, r4
 8004f36:	d00b      	beq.n	8004f50 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8004f38:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d007      	beq.n	8004f50 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8004f40:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8004f42:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004f44:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8004f48:	4608      	mov	r0, r1
}
 8004f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f4e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f50:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004f52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f56:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f5a:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f5c:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f62:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f64:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	e7e9      	b.n	8004f40 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8004f6c:	2002      	movs	r0, #2
}
 8004f6e:	4770      	bx	lr
 8004f70:	40012c00 	.word	0x40012c00

08004f74 <HAL_TIMEx_CommutCallback>:
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop

08004f78 <HAL_TIMEx_BreakCallback>:
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <HAL_TIMEx_Break2Callback>:
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop

08004f80 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f80:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d159      	bne.n	800503a <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f86:	2900      	cmp	r1, #0
 8004f88:	d055      	beq.n	8005036 <HAL_UART_Receive_IT+0xb6>
 8004f8a:	2a00      	cmp	r2, #0
 8004f8c:	d053      	beq.n	8005036 <HAL_UART_Receive_IT+0xb6>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8004f8e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d051      	beq.n	800503a <HAL_UART_Receive_IT+0xba>
{
 8004f96:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8004f98:	2401      	movs	r4, #1
 8004f9a:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f9e:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa0:	2400      	movs	r4, #0
 8004fa2:	6604      	str	r4, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fa4:	685c      	ldr	r4, [r3, #4]
 8004fa6:	0224      	lsls	r4, r4, #8
 8004fa8:	d50e      	bpl.n	8004fc8 <HAL_UART_Receive_IT+0x48>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	e853 4f00 	ldrex	r4, [r3]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fae:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	e843 4500 	strex	r5, r4, [r3]
 8004fb6:	b13d      	cbz	r5, 8004fc8 <HAL_UART_Receive_IT+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	e853 cf00 	ldrex	ip, [r3]
 8004fbc:	f04c 6c80 	orr.w	ip, ip, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	e843 c400 	strex	r4, ip, [r3]
 8004fc4:	2c00      	cmp	r4, #0
 8004fc6:	d1f7      	bne.n	8004fb8 <HAL_UART_Receive_IT+0x38>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fc8:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8004fca:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 8004fcc:	2500      	movs	r5, #0
  UART_MASK_COMPUTATION(huart);
 8004fce:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8004fd2:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8004fd6:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004fda:	6645      	str	r5, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8004fdc:	d02f      	beq.n	800503e <HAL_UART_Receive_IT+0xbe>
 8004fde:	2c00      	cmp	r4, #0
 8004fe0:	d13c      	bne.n	800505c <HAL_UART_Receive_IT+0xdc>
 8004fe2:	6902      	ldr	r2, [r0, #16]
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	d13c      	bne.n	8005062 <HAL_UART_Receive_IT+0xe2>
 8004fe8:	22ff      	movs	r2, #255	; 0xff
 8004fea:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fee:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff0:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ff6:	67c2      	str	r2, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff8:	f103 0208 	add.w	r2, r3, #8
 8004ffc:	e852 2f00 	ldrex	r2, [r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005000:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	f103 0408 	add.w	r4, r3, #8
 8005008:	e844 2100 	strex	r1, r2, [r4]
 800500c:	2900      	cmp	r1, #0
 800500e:	d1f3      	bne.n	8004ff8 <HAL_UART_Receive_IT+0x78>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005010:	6882      	ldr	r2, [r0, #8]
 8005012:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005016:	d01a      	beq.n	800504e <HAL_UART_Receive_IT+0xce>
  {
    huart->RxISR = UART_RxISR_16BIT;
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005018:	4a14      	ldr	r2, [pc, #80]	; (800506c <HAL_UART_Receive_IT+0xec>)
 800501a:	6642      	str	r2, [r0, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800501c:	2100      	movs	r1, #0
 800501e:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	e853 2f00 	ldrex	r2, [r3]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005026:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	e843 2000 	strex	r0, r2, [r3]
 800502e:	2800      	cmp	r0, #0
 8005030:	d1f7      	bne.n	8005022 <HAL_UART_Receive_IT+0xa2>
}
 8005032:	bc30      	pop	{r4, r5}
 8005034:	4770      	bx	lr
      return HAL_ERROR;
 8005036:	2001      	movs	r0, #1
 8005038:	4770      	bx	lr
    return HAL_BUSY;
 800503a:	2002      	movs	r0, #2
}
 800503c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800503e:	6902      	ldr	r2, [r0, #16]
 8005040:	2a00      	cmp	r2, #0
 8005042:	d1d1      	bne.n	8004fe8 <HAL_UART_Receive_IT+0x68>
 8005044:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005048:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 800504c:	e7cf      	b.n	8004fee <HAL_UART_Receive_IT+0x6e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504e:	6904      	ldr	r4, [r0, #16]
    huart->RxISR = UART_RxISR_16BIT;
 8005050:	4a06      	ldr	r2, [pc, #24]	; (800506c <HAL_UART_Receive_IT+0xec>)
 8005052:	4907      	ldr	r1, [pc, #28]	; (8005070 <HAL_UART_Receive_IT+0xf0>)
 8005054:	2c00      	cmp	r4, #0
 8005056:	bf08      	it	eq
 8005058:	460a      	moveq	r2, r1
 800505a:	e7de      	b.n	800501a <HAL_UART_Receive_IT+0x9a>
  UART_MASK_COMPUTATION(huart);
 800505c:	f8a0 505c 	strh.w	r5, [r0, #92]	; 0x5c
 8005060:	e7c5      	b.n	8004fee <HAL_UART_Receive_IT+0x6e>
 8005062:	227f      	movs	r2, #127	; 0x7f
 8005064:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8005068:	e7c1      	b.n	8004fee <HAL_UART_Receive_IT+0x6e>
 800506a:	bf00      	nop
 800506c:	08005439 	.word	0x08005439
 8005070:	080053f9 	.word	0x080053f9

08005074 <HAL_UART_TxCpltCallback>:
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop

08005078 <HAL_UART_ErrorCallback>:
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop

0800507c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800507c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800507e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005086:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800508a:	f7ff fff5 	bl	8005078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800508e:	bd08      	pop	{r3, pc}

08005090 <HAL_UARTEx_RxEventCallback>:
}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop

08005094 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005094:	6803      	ldr	r3, [r0, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005098:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800509a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 800509e:	ea12 0f0c 	tst.w	r2, ip
{
 80050a2:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050a4:	689d      	ldr	r5, [r3, #8]
{
 80050a6:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80050a8:	d17c      	bne.n	80051a4 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80050aa:	0696      	lsls	r6, r2, #26
 80050ac:	d502      	bpl.n	80050b4 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80050ae:	068e      	lsls	r6, r1, #26
 80050b0:	f100 8110 	bmi.w	80052d4 <HAL_UART_IRQHandler+0x240>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80050b6:	2801      	cmp	r0, #1
 80050b8:	d024      	beq.n	8005104 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80050ba:	02d6      	lsls	r6, r2, #11
 80050bc:	d502      	bpl.n	80050c4 <HAL_UART_IRQHandler+0x30>
 80050be:	0268      	lsls	r0, r5, #9
 80050c0:	f100 810d 	bmi.w	80052de <HAL_UART_IRQHandler+0x24a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050c4:	0616      	lsls	r6, r2, #24
 80050c6:	d414      	bmi.n	80050f2 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050c8:	0650      	lsls	r0, r2, #25
 80050ca:	d501      	bpl.n	80050d0 <HAL_UART_IRQHandler+0x3c>
 80050cc:	064a      	lsls	r2, r1, #25
 80050ce:	d400      	bmi.n	80050d2 <HAL_UART_IRQHandler+0x3e>
}
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	e843 2100 	strex	r1, r2, [r3]
 80050de:	2900      	cmp	r1, #0
 80050e0:	d1f7      	bne.n	80050d2 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e2:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050e4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80050e6:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 80050e8:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ea:	4620      	mov	r0, r4
 80050ec:	f7ff ffc2 	bl	8005074 <HAL_UART_TxCpltCallback>
}
 80050f0:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050f2:	060d      	lsls	r5, r1, #24
 80050f4:	d5e8      	bpl.n	80050c8 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 80050f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0e9      	beq.n	80050d0 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 80050fc:	4620      	mov	r0, r4
}
 80050fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005102:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005104:	06d6      	lsls	r6, r2, #27
 8005106:	d5d8      	bpl.n	80050ba <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005108:	06c8      	lsls	r0, r1, #27
 800510a:	d5d6      	bpl.n	80050ba <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800510c:	2210      	movs	r2, #16
 800510e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	0652      	lsls	r2, r2, #25
 8005114:	f140 8100 	bpl.w	8005318 <HAL_UART_IRQHandler+0x284>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005118:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800511a:	6802      	ldr	r2, [r0, #0]
 800511c:	6852      	ldr	r2, [r2, #4]
 800511e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005120:	2a00      	cmp	r2, #0
 8005122:	d0d5      	beq.n	80050d0 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005124:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005128:	4291      	cmp	r1, r2
 800512a:	d9d1      	bls.n	80050d0 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 800512c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005130:	6982      	ldr	r2, [r0, #24]
 8005132:	2a20      	cmp	r2, #32
 8005134:	d02e      	beq.n	8005194 <HAL_UART_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800513a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	e843 2100 	strex	r1, r2, [r3]
 8005142:	2900      	cmp	r1, #0
 8005144:	d1f7      	bne.n	8005136 <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	f103 0208 	add.w	r2, r3, #8
 800514a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	f103 0508 	add.w	r5, r3, #8
 8005156:	e845 2100 	strex	r1, r2, [r5]
 800515a:	2900      	cmp	r1, #0
 800515c:	d1f3      	bne.n	8005146 <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	f103 0208 	add.w	r2, r3, #8
 8005162:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	f103 0508 	add.w	r5, r3, #8
 800516e:	e845 2100 	strex	r1, r2, [r5]
 8005172:	2900      	cmp	r1, #0
 8005174:	d1f3      	bne.n	800515e <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 8005176:	2220      	movs	r2, #32
 8005178:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005180:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	e843 2100 	strex	r1, r2, [r3]
 8005188:	2900      	cmp	r1, #0
 800518a:	d1f7      	bne.n	800517c <HAL_UART_IRQHandler+0xe8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800518c:	f7fe fa8c 	bl	80036a8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005190:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005194:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005198:	1ac9      	subs	r1, r1, r3
 800519a:	4620      	mov	r0, r4
 800519c:	b289      	uxth	r1, r1
 800519e:	f7ff ff77 	bl	8005090 <HAL_UARTEx_RxEventCallback>
}
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051a4:	4879      	ldr	r0, [pc, #484]	; (800538c <HAL_UART_IRQHandler+0x2f8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051a6:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051aa:	4008      	ands	r0, r1
 80051ac:	4330      	orrs	r0, r6
 80051ae:	d081      	beq.n	80050b4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051b0:	07d5      	lsls	r5, r2, #31
 80051b2:	d509      	bpl.n	80051c8 <HAL_UART_IRQHandler+0x134>
 80051b4:	05c8      	lsls	r0, r1, #23
 80051b6:	d507      	bpl.n	80051c8 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051b8:	2001      	movs	r0, #1
 80051ba:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051bc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80051c0:	f040 0001 	orr.w	r0, r0, #1
 80051c4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051c8:	0795      	lsls	r5, r2, #30
 80051ca:	d57e      	bpl.n	80052ca <HAL_UART_IRQHandler+0x236>
 80051cc:	b18e      	cbz	r6, 80051f2 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051ce:	2002      	movs	r0, #2
 80051d0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051d2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80051d6:	f040 0004 	orr.w	r0, r0, #4
 80051da:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051de:	0750      	lsls	r0, r2, #29
 80051e0:	d507      	bpl.n	80051f2 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051e2:	2004      	movs	r0, #4
 80051e4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80051ea:	f040 0002 	orr.w	r0, r0, #2
 80051ee:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051f2:	0710      	lsls	r0, r2, #28
 80051f4:	d50b      	bpl.n	800520e <HAL_UART_IRQHandler+0x17a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051f6:	f001 0020 	and.w	r0, r1, #32
 80051fa:	4330      	orrs	r0, r6
 80051fc:	d007      	beq.n	800520e <HAL_UART_IRQHandler+0x17a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051fe:	2008      	movs	r0, #8
 8005200:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005202:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005206:	f040 0008 	orr.w	r0, r0, #8
 800520a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800520e:	0516      	lsls	r6, r2, #20
 8005210:	d50a      	bpl.n	8005228 <HAL_UART_IRQHandler+0x194>
 8005212:	014d      	lsls	r5, r1, #5
 8005214:	d508      	bpl.n	8005228 <HAL_UART_IRQHandler+0x194>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005216:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800521a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800521c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005220:	f040 0020 	orr.w	r0, r0, #32
 8005224:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005228:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800522c:	2800      	cmp	r0, #0
 800522e:	f43f af4f 	beq.w	80050d0 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005232:	0690      	lsls	r0, r2, #26
 8005234:	d506      	bpl.n	8005244 <HAL_UART_IRQHandler+0x1b0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005236:	0689      	lsls	r1, r1, #26
 8005238:	d504      	bpl.n	8005244 <HAL_UART_IRQHandler+0x1b0>
        if (huart->RxISR != NULL)
 800523a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800523c:	b112      	cbz	r2, 8005244 <HAL_UART_IRQHandler+0x1b0>
          huart->RxISR(huart);
 800523e:	4620      	mov	r0, r4
 8005240:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005242:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005244:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005248:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800524a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800524e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005252:	4315      	orrs	r5, r2
 8005254:	f000 8094 	beq.w	8005380 <HAL_UART_IRQHandler+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	e843 2100 	strex	r1, r2, [r3]
 8005264:	2900      	cmp	r1, #0
 8005266:	d1f7      	bne.n	8005258 <HAL_UART_IRQHandler+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	f103 0208 	add.w	r2, r3, #8
 800526c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005270:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	f103 0008 	add.w	r0, r3, #8
 8005278:	e840 2100 	strex	r1, r2, [r0]
 800527c:	2900      	cmp	r1, #0
 800527e:	d1f3      	bne.n	8005268 <HAL_UART_IRQHandler+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005280:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005282:	2a01      	cmp	r2, #1
 8005284:	d033      	beq.n	80052ee <HAL_UART_IRQHandler+0x25a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005286:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005288:	2120      	movs	r1, #32
 800528a:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528c:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528e:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8005290:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005292:	064a      	lsls	r2, r1, #25
 8005294:	d53c      	bpl.n	8005310 <HAL_UART_IRQHandler+0x27c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	f103 0208 	add.w	r2, r3, #8
 800529a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800529e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	f103 0008 	add.w	r0, r3, #8
 80052a6:	e840 2100 	strex	r1, r2, [r0]
 80052aa:	2900      	cmp	r1, #0
 80052ac:	d1f3      	bne.n	8005296 <HAL_UART_IRQHandler+0x202>
          if (huart->hdmarx != NULL)
 80052ae:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80052b0:	b370      	cbz	r0, 8005310 <HAL_UART_IRQHandler+0x27c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052b2:	4b37      	ldr	r3, [pc, #220]	; (8005390 <HAL_UART_IRQHandler+0x2fc>)
 80052b4:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052b6:	f7fe fa19 	bl	80036ec <HAL_DMA_Abort_IT>
 80052ba:	2800      	cmp	r0, #0
 80052bc:	f43f af08 	beq.w	80050d0 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052c0:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 80052c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80052c8:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ca:	0755      	lsls	r5, r2, #29
 80052cc:	d591      	bpl.n	80051f2 <HAL_UART_IRQHandler+0x15e>
 80052ce:	2e00      	cmp	r6, #0
 80052d0:	d187      	bne.n	80051e2 <HAL_UART_IRQHandler+0x14e>
 80052d2:	e78e      	b.n	80051f2 <HAL_UART_IRQHandler+0x15e>
      if (huart->RxISR != NULL)
 80052d4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f47f af11 	bne.w	80050fe <HAL_UART_IRQHandler+0x6a>
 80052dc:	e6f8      	b.n	80050d0 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80052e2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80052ea:	f000 bbe3 	b.w	8005ab4 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ee:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	e843 2100 	strex	r1, r2, [r3]
 80052fa:	2900      	cmp	r1, #0
 80052fc:	d0c3      	beq.n	8005286 <HAL_UART_IRQHandler+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	e853 2f00 	ldrex	r2, [r3]
 8005302:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	e843 2100 	strex	r1, r2, [r3]
 800530a:	2900      	cmp	r1, #0
 800530c:	d1ef      	bne.n	80052ee <HAL_UART_IRQHandler+0x25a>
 800530e:	e7ba      	b.n	8005286 <HAL_UART_IRQHandler+0x1f2>
            HAL_UART_ErrorCallback(huart);
 8005310:	4620      	mov	r0, r4
 8005312:	f7ff feb1 	bl	8005078 <HAL_UART_ErrorCallback>
}
 8005316:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005318:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 800531c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8005320:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005322:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005324:	2a00      	cmp	r2, #0
 8005326:	f43f aed3 	beq.w	80050d0 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800532a:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 800532e:	1a51      	subs	r1, r2, r1
 8005330:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005332:	2900      	cmp	r1, #0
 8005334:	f43f aecc 	beq.w	80050d0 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800533c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	e843 2000 	strex	r0, r2, [r3]
 8005344:	2800      	cmp	r0, #0
 8005346:	d1f7      	bne.n	8005338 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	f103 0208 	add.w	r2, r3, #8
 800534c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005350:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	f103 0508 	add.w	r5, r3, #8
 8005358:	e845 2000 	strex	r0, r2, [r5]
 800535c:	2800      	cmp	r0, #0
 800535e:	d1f3      	bne.n	8005348 <HAL_UART_IRQHandler+0x2b4>
        huart->RxState = HAL_UART_STATE_READY;
 8005360:	2220      	movs	r2, #32
 8005362:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8005364:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	e843 2000 	strex	r0, r2, [r3]
 8005374:	2800      	cmp	r0, #0
 8005376:	d1f7      	bne.n	8005368 <HAL_UART_IRQHandler+0x2d4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005378:	4620      	mov	r0, r4
 800537a:	f7ff fe89 	bl	8005090 <HAL_UARTEx_RxEventCallback>
}
 800537e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005380:	4620      	mov	r0, r4
 8005382:	f7ff fe79 	bl	8005078 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005386:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	04000120 	.word	0x04000120
 8005390:	0800507d 	.word	0x0800507d

08005394 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8005394:	b508      	push	{r3, lr}
 8005396:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	e843 2100 	strex	r1, r2, [r3]
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d1f7      	bne.n	8005398 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	f103 0208 	add.w	r2, r3, #8
 80053ac:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	f103 0c08 	add.w	ip, r3, #8
 80053b8:	e84c 2100 	strex	r1, r2, [ip]
 80053bc:	2900      	cmp	r1, #0
 80053be:	d1f3      	bne.n	80053a8 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053c0:	2220      	movs	r2, #32
 80053c2:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c4:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 80053c6:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c8:	2a01      	cmp	r2, #1
 80053ca:	d112      	bne.n	80053f2 <UART_RxISR_16BIT.part.0+0x5e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053cc:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	e843 2100 	strex	r1, r2, [r3]
 80053da:	2900      	cmp	r1, #0
 80053dc:	d1f7      	bne.n	80053ce <UART_RxISR_16BIT.part.0+0x3a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053de:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053e4:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053e6:	bf44      	itt	mi
 80053e8:	2210      	movmi	r2, #16
 80053ea:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ec:	f7ff fe50 	bl	8005090 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053f0:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80053f2:	f7fb fef5 	bl	80011e0 <HAL_UART_RxCpltCallback>
}
 80053f6:	bd08      	pop	{r3, pc}

080053f8 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053f8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80053fa:	2a22      	cmp	r2, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053fc:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053fe:	d004      	beq.n	800540a <UART_RxISR_16BIT+0x12>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005400:	6993      	ldr	r3, [r2, #24]
 8005402:	f043 0308 	orr.w	r3, r3, #8
 8005406:	6193      	str	r3, [r2, #24]
  }
}
 8005408:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800540a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800540c:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 8005410:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005412:	ea02 020c 	and.w	r2, r2, ip
 8005416:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 800541a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 800541e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005420:	3a01      	subs	r2, #1
 8005422:	b292      	uxth	r2, r2
 8005424:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005428:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1ea      	bne.n	8005408 <UART_RxISR_16BIT+0x10>
 8005432:	f7ff bfaf 	b.w	8005394 <UART_RxISR_16BIT.part.0>
 8005436:	bf00      	nop

08005438 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005438:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800543a:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800543c:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800543e:	d004      	beq.n	800544a <UART_RxISR_8BIT+0x12>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005440:	6993      	ldr	r3, [r2, #24]
 8005442:	f043 0308 	orr.w	r3, r3, #8
 8005446:	6193      	str	r3, [r2, #24]
}
 8005448:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800544a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800544c:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 8005450:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005452:	ea02 020c 	and.w	r2, r2, ip
 8005456:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8005458:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800545c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800545e:	3a01      	subs	r2, #1
 8005460:	b292      	uxth	r2, r2
 8005462:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005466:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800546a:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 800546c:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 800546e:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8005470:	2a00      	cmp	r2, #0
 8005472:	d1e9      	bne.n	8005448 <UART_RxISR_8BIT+0x10>
 8005474:	f7ff bf8e 	b.w	8005394 <UART_RxISR_16BIT.part.0>

08005478 <UART_SetConfig>:
{
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800547c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800547e:	6883      	ldr	r3, [r0, #8]
 8005480:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005482:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005484:	69e1      	ldr	r1, [r4, #28]
 8005486:	432b      	orrs	r3, r5
 8005488:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800548a:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800548e:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005490:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005494:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005496:	4303      	orrs	r3, r0
 8005498:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800549a:	6853      	ldr	r3, [r2, #4]
 800549c:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 800549e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80054a4:	4303      	orrs	r3, r0
 80054a6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a8:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054aa:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ac:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80054b0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054b2:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b4:	487d      	ldr	r0, [pc, #500]	; (80056ac <UART_SetConfig+0x234>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054b6:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054b8:	4282      	cmp	r2, r0
 80054ba:	d046      	beq.n	800554a <UART_SetConfig+0xd2>
 80054bc:	4b7c      	ldr	r3, [pc, #496]	; (80056b0 <UART_SetConfig+0x238>)
 80054be:	429a      	cmp	r2, r3
 80054c0:	d00f      	beq.n	80054e2 <UART_SetConfig+0x6a>
 80054c2:	4b7c      	ldr	r3, [pc, #496]	; (80056b4 <UART_SetConfig+0x23c>)
 80054c4:	429a      	cmp	r2, r3
 80054c6:	f000 80a3 	beq.w	8005610 <UART_SetConfig+0x198>
 80054ca:	4b7b      	ldr	r3, [pc, #492]	; (80056b8 <UART_SetConfig+0x240>)
 80054cc:	429a      	cmp	r2, r3
 80054ce:	f000 80b4 	beq.w	800563a <UART_SetConfig+0x1c2>
 80054d2:	4b7a      	ldr	r3, [pc, #488]	; (80056bc <UART_SetConfig+0x244>)
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d063      	beq.n	80055a0 <UART_SetConfig+0x128>
  huart->RxISR = NULL;
 80054d8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80054da:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    switch (clocksource)
 80054de:	2001      	movs	r0, #1
}
 80054e0:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054e2:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054f0:	d069      	beq.n	80055c6 <UART_SetConfig+0x14e>
 80054f2:	d80f      	bhi.n	8005514 <UART_SetConfig+0x9c>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d05c      	beq.n	80055b2 <UART_SetConfig+0x13a>
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d1ec      	bne.n	80054d8 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005502:	d066      	beq.n	80055d2 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005504:	f7fe fe30 	bl	8004168 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005508:	b960      	cbnz	r0, 8005524 <UART_SetConfig+0xac>
  huart->RxISR = NULL;
 800550a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800550c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8005510:	2000      	movs	r0, #0
}
 8005512:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005514:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005518:	d1de      	bne.n	80054d8 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800551e:	f000 80c2 	beq.w	80056a6 <UART_SetConfig+0x22e>
    switch (clocksource)
 8005522:	4867      	ldr	r0, [pc, #412]	; (80056c0 <UART_SetConfig+0x248>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005524:	6863      	ldr	r3, [r4, #4]
 8005526:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800552a:	fbb0 f3f3 	udiv	r3, r0, r3
 800552e:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005530:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005534:	f1a3 0110 	sub.w	r1, r3, #16
 8005538:	4291      	cmp	r1, r2
 800553a:	d8cd      	bhi.n	80054d8 <UART_SetConfig+0x60>
        huart->Instance->BRR = usartdiv;
 800553c:	6822      	ldr	r2, [r4, #0]
 800553e:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8005540:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005542:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8005546:	2000      	movs	r0, #0
}
 8005548:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800554a:	4b5e      	ldr	r3, [pc, #376]	; (80056c4 <UART_SetConfig+0x24c>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	3b01      	subs	r3, #1
 8005554:	2b02      	cmp	r3, #2
 8005556:	d906      	bls.n	8005566 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005558:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800555c:	f000 8082 	beq.w	8005664 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005560:	f7fe fe50 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
        break;
 8005564:	e7d0      	b.n	8005508 <UART_SetConfig+0x90>
 8005566:	4a58      	ldr	r2, [pc, #352]	; (80056c8 <UART_SetConfig+0x250>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005568:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800556c:	5cd3      	ldrb	r3, [r2, r3]
 800556e:	d07f      	beq.n	8005670 <UART_SetConfig+0x1f8>
    switch (clocksource)
 8005570:	2b08      	cmp	r3, #8
 8005572:	d8b1      	bhi.n	80054d8 <UART_SetConfig+0x60>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <UART_SetConfig+0x104>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055b9 	.word	0x080055b9
 8005580:	08005561 	.word	0x08005561
 8005584:	08005523 	.word	0x08005523
 8005588:	080054d9 	.word	0x080054d9
 800558c:	08005505 	.word	0x08005505
 8005590:	080054d9 	.word	0x080054d9
 8005594:	080054d9 	.word	0x080054d9
 8005598:	080054d9 	.word	0x080054d9
 800559c:	080055cd 	.word	0x080055cd
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055a0:	4b48      	ldr	r3, [pc, #288]	; (80056c4 <UART_SetConfig+0x24c>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80055a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ac:	d00b      	beq.n	80055c6 <UART_SetConfig+0x14e>
 80055ae:	d82b      	bhi.n	8005608 <UART_SetConfig+0x190>
 80055b0:	b92b      	cbnz	r3, 80055be <UART_SetConfig+0x146>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055b2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80055b6:	d058      	beq.n	800566a <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b8:	f7fe fe0c 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
        break;
 80055bc:	e7a4      	b.n	8005508 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055c2:	d09c      	beq.n	80054fe <UART_SetConfig+0x86>
 80055c4:	e788      	b.n	80054d8 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80055ca:	d069      	beq.n	80056a0 <UART_SetConfig+0x228>
        pclk = (uint32_t) LSE_VALUE;
 80055cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80055d0:	e7a8      	b.n	8005524 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 80055d2:	f7fe fdc9 	bl	8004168 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d097      	beq.n	800550a <UART_SetConfig+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055da:	0043      	lsls	r3, r0, #1
 80055dc:	6862      	ldr	r2, [r4, #4]
 80055de:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80055e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055e6:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055e8:	f1a2 0010 	sub.w	r0, r2, #16
 80055ec:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80055f0:	4288      	cmp	r0, r1
 80055f2:	f63f af71 	bhi.w	80054d8 <UART_SetConfig+0x60>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055f6:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 80055fa:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055fc:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055fe:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8005602:	4313      	orrs	r3, r2
 8005604:	60cb      	str	r3, [r1, #12]
 8005606:	e780      	b.n	800550a <UART_SetConfig+0x92>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005608:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800560c:	d085      	beq.n	800551a <UART_SetConfig+0xa2>
 800560e:	e763      	b.n	80054d8 <UART_SetConfig+0x60>
 8005610:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800561a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800561e:	d0d2      	beq.n	80055c6 <UART_SetConfig+0x14e>
 8005620:	d806      	bhi.n	8005630 <UART_SetConfig+0x1b8>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0c5      	beq.n	80055b2 <UART_SetConfig+0x13a>
 8005626:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800562a:	f43f af68 	beq.w	80054fe <UART_SetConfig+0x86>
 800562e:	e753      	b.n	80054d8 <UART_SetConfig+0x60>
 8005630:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005634:	f43f af71 	beq.w	800551a <UART_SetConfig+0xa2>
 8005638:	e74e      	b.n	80054d8 <UART_SetConfig+0x60>
 800563a:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005648:	d0bd      	beq.n	80055c6 <UART_SetConfig+0x14e>
 800564a:	d806      	bhi.n	800565a <UART_SetConfig+0x1e2>
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0b0      	beq.n	80055b2 <UART_SetConfig+0x13a>
 8005650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005654:	f43f af53 	beq.w	80054fe <UART_SetConfig+0x86>
 8005658:	e73e      	b.n	80054d8 <UART_SetConfig+0x60>
 800565a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800565e:	f43f af5c 	beq.w	800551a <UART_SetConfig+0xa2>
 8005662:	e739      	b.n	80054d8 <UART_SetConfig+0x60>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7fe fdce 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
        break;
 8005668:	e7b5      	b.n	80055d6 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800566a:	f7fe fdb3 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
        break;
 800566e:	e7b2      	b.n	80055d6 <UART_SetConfig+0x15e>
    switch (clocksource)
 8005670:	2b08      	cmp	r3, #8
 8005672:	f63f af31 	bhi.w	80054d8 <UART_SetConfig+0x60>
 8005676:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x204>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	0800566b 	.word	0x0800566b
 8005680:	08005665 	.word	0x08005665
 8005684:	080056a7 	.word	0x080056a7
 8005688:	080054d9 	.word	0x080054d9
 800568c:	080055d3 	.word	0x080055d3
 8005690:	080054d9 	.word	0x080054d9
 8005694:	080054d9 	.word	0x080054d9
 8005698:	080054d9 	.word	0x080054d9
 800569c:	080056a1 	.word	0x080056a1
 80056a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056a4:	e79a      	b.n	80055dc <UART_SetConfig+0x164>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <UART_SetConfig+0x254>)
 80056a8:	e798      	b.n	80055dc <UART_SetConfig+0x164>
 80056aa:	bf00      	nop
 80056ac:	40013800 	.word	0x40013800
 80056b0:	40004400 	.word	0x40004400
 80056b4:	40004800 	.word	0x40004800
 80056b8:	40004c00 	.word	0x40004c00
 80056bc:	40005000 	.word	0x40005000
 80056c0:	007a1200 	.word	0x007a1200
 80056c4:	40021000 	.word	0x40021000
 80056c8:	08009818 	.word	0x08009818
 80056cc:	00f42400 	.word	0x00f42400

080056d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80056d2:	07da      	lsls	r2, r3, #31
{
 80056d4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056d6:	d506      	bpl.n	80056e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056d8:	6801      	ldr	r1, [r0, #0]
 80056da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80056dc:	684a      	ldr	r2, [r1, #4]
 80056de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80056e2:	4322      	orrs	r2, r4
 80056e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056e6:	079c      	lsls	r4, r3, #30
 80056e8:	d506      	bpl.n	80056f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ea:	6801      	ldr	r1, [r0, #0]
 80056ec:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80056ee:	684a      	ldr	r2, [r1, #4]
 80056f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80056f4:	4322      	orrs	r2, r4
 80056f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056f8:	0759      	lsls	r1, r3, #29
 80056fa:	d506      	bpl.n	800570a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056fc:	6801      	ldr	r1, [r0, #0]
 80056fe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005700:	684a      	ldr	r2, [r1, #4]
 8005702:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005706:	4322      	orrs	r2, r4
 8005708:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800570a:	071a      	lsls	r2, r3, #28
 800570c:	d506      	bpl.n	800571c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800570e:	6801      	ldr	r1, [r0, #0]
 8005710:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005712:	684a      	ldr	r2, [r1, #4]
 8005714:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005718:	4322      	orrs	r2, r4
 800571a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800571c:	06dc      	lsls	r4, r3, #27
 800571e:	d506      	bpl.n	800572e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005720:	6801      	ldr	r1, [r0, #0]
 8005722:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005724:	688a      	ldr	r2, [r1, #8]
 8005726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800572a:	4322      	orrs	r2, r4
 800572c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800572e:	0699      	lsls	r1, r3, #26
 8005730:	d506      	bpl.n	8005740 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005732:	6801      	ldr	r1, [r0, #0]
 8005734:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005736:	688a      	ldr	r2, [r1, #8]
 8005738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573c:	4322      	orrs	r2, r4
 800573e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005740:	065a      	lsls	r2, r3, #25
 8005742:	d509      	bpl.n	8005758 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005744:	6801      	ldr	r1, [r0, #0]
 8005746:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005748:	684a      	ldr	r2, [r1, #4]
 800574a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800574e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005750:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005754:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005756:	d00b      	beq.n	8005770 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	d506      	bpl.n	800576a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800575c:	6802      	ldr	r2, [r0, #0]
 800575e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005760:	6853      	ldr	r3, [r2, #4]
 8005762:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005766:	430b      	orrs	r3, r1
 8005768:	6053      	str	r3, [r2, #4]
}
 800576a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800576e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005770:	684a      	ldr	r2, [r1, #4]
 8005772:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005774:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005778:	4322      	orrs	r2, r4
 800577a:	604a      	str	r2, [r1, #4]
 800577c:	e7ec      	b.n	8005758 <UART_AdvFeatureConfig+0x88>
 800577e:	bf00      	nop

08005780 <UART_WaitOnFlagUntilTimeout>:
{
 8005780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005784:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005788:	6804      	ldr	r4, [r0, #0]
{
 800578a:	4607      	mov	r7, r0
 800578c:	460e      	mov	r6, r1
 800578e:	4615      	mov	r5, r2
 8005790:	4699      	mov	r9, r3
 8005792:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005796:	d10a      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005798:	69e3      	ldr	r3, [r4, #28]
 800579a:	ea36 0303 	bics.w	r3, r6, r3
 800579e:	bf0c      	ite	eq
 80057a0:	2301      	moveq	r3, #1
 80057a2:	2300      	movne	r3, #0
 80057a4:	429d      	cmp	r5, r3
 80057a6:	d0f7      	beq.n	8005798 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 80057a8:	2000      	movs	r0, #0
}
 80057aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ae:	69e3      	ldr	r3, [r4, #28]
 80057b0:	ea36 0303 	bics.w	r3, r6, r3
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	42ab      	cmp	r3, r5
 80057bc:	d1f4      	bne.n	80057a8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fc fdad 	bl	800231c <HAL_GetTick>
 80057c2:	eba0 0009 	sub.w	r0, r0, r9
 80057c6:	4540      	cmp	r0, r8
 80057c8:	d831      	bhi.n	800582e <UART_WaitOnFlagUntilTimeout+0xae>
 80057ca:	f1b8 0f00 	cmp.w	r8, #0
 80057ce:	d02e      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057d0:	683c      	ldr	r4, [r7, #0]
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	0759      	lsls	r1, r3, #29
 80057d6:	4622      	mov	r2, r4
 80057d8:	d5db      	bpl.n	8005792 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057da:	69e3      	ldr	r3, [r4, #28]
 80057dc:	051b      	lsls	r3, r3, #20
 80057de:	d5d8      	bpl.n	8005792 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057e4:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	e844 3100 	strex	r1, r3, [r4]
 80057f2:	b139      	cbz	r1, 8005804 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	e852 3f00 	ldrex	r3, [r2]
 80057f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fc:	e842 3100 	strex	r1, r3, [r2]
 8005800:	2900      	cmp	r1, #0
 8005802:	d1f7      	bne.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	f102 0308 	add.w	r3, r2, #8
 8005808:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	f102 0008 	add.w	r0, r2, #8
 8005814:	e840 3100 	strex	r1, r3, [r0]
 8005818:	2900      	cmp	r1, #0
 800581a:	d1f3      	bne.n	8005804 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800581c:	2320      	movs	r3, #32
 800581e:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8005820:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005824:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 8005826:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005828:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 800582c:	e7bd      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0x2a>
 800582e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	e842 3100 	strex	r1, r3, [r2]
 800583c:	2900      	cmp	r1, #0
 800583e:	d1f7      	bne.n	8005830 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	f102 0308 	add.w	r3, r2, #8
 8005844:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005848:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	f102 0008 	add.w	r0, r2, #8
 8005850:	e840 3100 	strex	r1, r3, [r0]
 8005854:	2900      	cmp	r1, #0
 8005856:	d1f3      	bne.n	8005840 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 8005858:	2320      	movs	r3, #32
 800585a:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800585c:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005860:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 8005862:	2003      	movs	r0, #3
 8005864:	e7a1      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0x2a>
 8005866:	bf00      	nop

08005868 <HAL_UART_Transmit>:
{
 8005868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800586c:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800586e:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005870:	2820      	cmp	r0, #32
{
 8005872:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8005874:	f040 808b 	bne.w	800598e <HAL_UART_Transmit+0x126>
    if ((pData == NULL) || (Size == 0U))
 8005878:	4689      	mov	r9, r1
 800587a:	2900      	cmp	r1, #0
 800587c:	d045      	beq.n	800590a <HAL_UART_Transmit+0xa2>
 800587e:	4614      	mov	r4, r2
 8005880:	2a00      	cmp	r2, #0
 8005882:	d042      	beq.n	800590a <HAL_UART_Transmit+0xa2>
 8005884:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8005886:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 800588a:	2b01      	cmp	r3, #1
 800588c:	d07f      	beq.n	800598e <HAL_UART_Transmit+0x126>
 800588e:	2301      	movs	r3, #1
 8005890:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005898:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800589a:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589e:	67ab      	str	r3, [r5, #120]	; 0x78
    tickstart = HAL_GetTick();
 80058a0:	f7fc fd3c 	bl	800231c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a4:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 80058a6:	f8a5 4050 	strh.w	r4, [r5, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80058ae:	f8a5 4052 	strh.w	r4, [r5, #82]	; 0x52
    tickstart = HAL_GetTick();
 80058b2:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b4:	d06f      	beq.n	8005996 <HAL_UART_Transmit+0x12e>
    while (huart->TxXferCount > 0U)
 80058b6:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    __HAL_UNLOCK(huart);
 80058ba:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80058bc:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80058be:	f885 2074 	strb.w	r2, [r5, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80058c2:	b1b3      	cbz	r3, 80058f2 <HAL_UART_Transmit+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	682c      	ldr	r4, [r5, #0]
 80058c6:	1c71      	adds	r1, r6, #1
 80058c8:	d123      	bne.n	8005912 <HAL_UART_Transmit+0xaa>
 80058ca:	69e2      	ldr	r2, [r4, #28]
 80058cc:	0612      	lsls	r2, r2, #24
 80058ce:	d5fc      	bpl.n	80058ca <HAL_UART_Transmit+0x62>
      if (pdata8bits == NULL)
 80058d0:	f1b9 0f00 	cmp.w	r9, #0
 80058d4:	d056      	beq.n	8005984 <HAL_UART_Transmit+0x11c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058d6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80058da:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80058dc:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80058e8:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e9      	bne.n	80058c6 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	9600      	str	r6, [sp, #0]
 80058f4:	463b      	mov	r3, r7
 80058f6:	2200      	movs	r2, #0
 80058f8:	2140      	movs	r1, #64	; 0x40
 80058fa:	4628      	mov	r0, r5
 80058fc:	f7ff ff40 	bl	8005780 <UART_WaitOnFlagUntilTimeout>
 8005900:	2800      	cmp	r0, #0
 8005902:	d16c      	bne.n	80059de <HAL_UART_Transmit+0x176>
    huart->gState = HAL_UART_STATE_READY;
 8005904:	2320      	movs	r3, #32
 8005906:	67ab      	str	r3, [r5, #120]	; 0x78
    return HAL_OK;
 8005908:	e000      	b.n	800590c <HAL_UART_Transmit+0xa4>
      return  HAL_ERROR;
 800590a:	2001      	movs	r0, #1
}
 800590c:	b003      	add	sp, #12
 800590e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005912:	69e3      	ldr	r3, [r4, #28]
 8005914:	061b      	lsls	r3, r3, #24
 8005916:	d4db      	bmi.n	80058d0 <HAL_UART_Transmit+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005918:	f7fc fd00 	bl	800231c <HAL_GetTick>
 800591c:	1bc0      	subs	r0, r0, r7
 800591e:	4286      	cmp	r6, r0
 8005920:	d33f      	bcc.n	80059a2 <HAL_UART_Transmit+0x13a>
 8005922:	2e00      	cmp	r6, #0
 8005924:	d03d      	beq.n	80059a2 <HAL_UART_Transmit+0x13a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005926:	682c      	ldr	r4, [r5, #0]
 8005928:	6822      	ldr	r2, [r4, #0]
 800592a:	0752      	lsls	r2, r2, #29
 800592c:	4623      	mov	r3, r4
 800592e:	d5ca      	bpl.n	80058c6 <HAL_UART_Transmit+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005930:	69e2      	ldr	r2, [r4, #28]
 8005932:	0510      	lsls	r0, r2, #20
 8005934:	d5c7      	bpl.n	80058c6 <HAL_UART_Transmit+0x5e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005936:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800593a:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005940:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	e844 2100 	strex	r1, r2, [r4]
 8005948:	b139      	cbz	r1, 800595a <HAL_UART_Transmit+0xf2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	e853 2f00 	ldrex	r2, [r3]
 800594e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	e843 2100 	strex	r1, r2, [r3]
 8005956:	2900      	cmp	r1, #0
 8005958:	d1f7      	bne.n	800594a <HAL_UART_Transmit+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	f103 0208 	add.w	r2, r3, #8
 800595e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005966:	f103 0008 	add.w	r0, r3, #8
 800596a:	e840 2100 	strex	r1, r2, [r0]
 800596e:	2900      	cmp	r1, #0
 8005970:	d1f3      	bne.n	800595a <HAL_UART_Transmit+0xf2>
          huart->gState = HAL_UART_STATE_READY;
 8005972:	2320      	movs	r3, #32
 8005974:	67ab      	str	r3, [r5, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8005976:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800597a:	67eb      	str	r3, [r5, #124]	; 0x7c
        return HAL_TIMEOUT;
 800597c:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800597e:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005982:	e7c3      	b.n	800590c <HAL_UART_Transmit+0xa4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005984:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800598c:	e7a5      	b.n	80058da <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 800598e:	2002      	movs	r0, #2
}
 8005990:	b003      	add	sp, #12
 8005992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005996:	692b      	ldr	r3, [r5, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d18c      	bne.n	80058b6 <HAL_UART_Transmit+0x4e>
 800599c:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 800599e:	4699      	mov	r9, r3
 80059a0:	e789      	b.n	80058b6 <HAL_UART_Transmit+0x4e>
 80059a2:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	e843 2100 	strex	r1, r2, [r3]
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d1f7      	bne.n	80059a4 <HAL_UART_Transmit+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b4:	f103 0208 	add.w	r2, r3, #8
 80059b8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	f103 0008 	add.w	r0, r3, #8
 80059c4:	e840 2100 	strex	r1, r2, [r0]
 80059c8:	2900      	cmp	r1, #0
 80059ca:	d1f3      	bne.n	80059b4 <HAL_UART_Transmit+0x14c>
        huart->gState = HAL_UART_STATE_READY;
 80059cc:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80059ce:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80059d0:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80059d2:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059d6:	67eb      	str	r3, [r5, #124]	; 0x7c
}
 80059d8:	b003      	add	sp, #12
 80059da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80059de:	2003      	movs	r0, #3
 80059e0:	e794      	b.n	800590c <HAL_UART_Transmit+0xa4>
 80059e2:	bf00      	nop

080059e4 <HAL_UART_Init>:
  if (huart == NULL)
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d062      	beq.n	8005aae <HAL_UART_Init+0xca>
{
 80059e8:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80059ea:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80059ec:	b082      	sub	sp, #8
 80059ee:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d049      	beq.n	8005a88 <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 80059f4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80059f6:	2324      	movs	r3, #36	; 0x24
 80059f8:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a00:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005a02:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a04:	f7ff fd38 	bl	8005478 <UART_SetConfig>
 8005a08:	2801      	cmp	r0, #1
 8005a0a:	d03a      	beq.n	8005a82 <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d133      	bne.n	8005a7a <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	6859      	ldr	r1, [r3, #4]
 8005a16:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8005a1a:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a1c:	6899      	ldr	r1, [r3, #8]
 8005a1e:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8005a22:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005a24:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a26:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8005a28:	f041 0101 	orr.w	r1, r1, #1
 8005a2c:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005a32:	f7fc fc73 	bl	800231c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8005a3c:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a3e:	d40c      	bmi.n	8005a5a <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	075b      	lsls	r3, r3, #29
 8005a44:	d425      	bmi.n	8005a92 <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a46:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005a48:	2220      	movs	r2, #32
 8005a4a:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005a4c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005a50:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8005a52:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a54:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005a56:	b002      	add	sp, #8
 8005a58:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	462a      	mov	r2, r5
 8005a62:	4603      	mov	r3, r0
 8005a64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f7ff fe89 	bl	8005780 <UART_WaitOnFlagUntilTimeout>
 8005a6e:	b9e0      	cbnz	r0, 8005aaa <HAL_UART_Init+0xc6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	075b      	lsls	r3, r3, #29
 8005a76:	d40c      	bmi.n	8005a92 <HAL_UART_Init+0xae>
 8005a78:	e7e5      	b.n	8005a46 <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7ff fe28 	bl	80056d0 <UART_AdvFeatureConfig>
 8005a80:	e7c7      	b.n	8005a12 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8005a82:	2001      	movs	r0, #1
}
 8005a84:	b002      	add	sp, #8
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8005a88:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8005a8c:	f7fc fb9e 	bl	80021cc <HAL_UART_MspInit>
 8005a90:	e7b0      	b.n	80059f4 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4633      	mov	r3, r6
 8005a9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f7ff fe6d 	bl	8005780 <UART_WaitOnFlagUntilTimeout>
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d0cd      	beq.n	8005a46 <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 8005aaa:	2003      	movs	r0, #3
 8005aac:	e7d3      	b.n	8005a56 <HAL_UART_Init+0x72>
    return HAL_ERROR;
 8005aae:	2001      	movs	r0, #1
}
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop

08005ab4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop

08005ab8 <sin>:
 8005ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005aba:	ec53 2b10 	vmov	r2, r3, d0
 8005abe:	4828      	ldr	r0, [pc, #160]	; (8005b60 <sin+0xa8>)
 8005ac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005ac4:	4281      	cmp	r1, r0
 8005ac6:	dc07      	bgt.n	8005ad8 <sin+0x20>
 8005ac8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005b58 <sin+0xa0>
 8005acc:	2000      	movs	r0, #0
 8005ace:	b005      	add	sp, #20
 8005ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ad4:	f000 be6c 	b.w	80067b0 <__kernel_sin>
 8005ad8:	4822      	ldr	r0, [pc, #136]	; (8005b64 <sin+0xac>)
 8005ada:	4281      	cmp	r1, r0
 8005adc:	dd09      	ble.n	8005af2 <sin+0x3a>
 8005ade:	ee10 0a10 	vmov	r0, s0
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f7fa fbd0 	bl	8000288 <__aeabi_dsub>
 8005ae8:	ec41 0b10 	vmov	d0, r0, r1
 8005aec:	b005      	add	sp, #20
 8005aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8005af2:	4668      	mov	r0, sp
 8005af4:	f000 f838 	bl	8005b68 <__ieee754_rem_pio2>
 8005af8:	f000 0003 	and.w	r0, r0, #3
 8005afc:	2801      	cmp	r0, #1
 8005afe:	d00c      	beq.n	8005b1a <sin+0x62>
 8005b00:	2802      	cmp	r0, #2
 8005b02:	d011      	beq.n	8005b28 <sin+0x70>
 8005b04:	b9f0      	cbnz	r0, 8005b44 <sin+0x8c>
 8005b06:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b0a:	ed9d 0b00 	vldr	d0, [sp]
 8005b0e:	2001      	movs	r0, #1
 8005b10:	f000 fe4e 	bl	80067b0 <__kernel_sin>
 8005b14:	ec51 0b10 	vmov	r0, r1, d0
 8005b18:	e7e6      	b.n	8005ae8 <sin+0x30>
 8005b1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b1e:	ed9d 0b00 	vldr	d0, [sp]
 8005b22:	f000 fa2d 	bl	8005f80 <__kernel_cos>
 8005b26:	e7f5      	b.n	8005b14 <sin+0x5c>
 8005b28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b2c:	ed9d 0b00 	vldr	d0, [sp]
 8005b30:	2001      	movs	r0, #1
 8005b32:	f000 fe3d 	bl	80067b0 <__kernel_sin>
 8005b36:	ec53 2b10 	vmov	r2, r3, d0
 8005b3a:	ee10 0a10 	vmov	r0, s0
 8005b3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005b42:	e7d1      	b.n	8005ae8 <sin+0x30>
 8005b44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b48:	ed9d 0b00 	vldr	d0, [sp]
 8005b4c:	f000 fa18 	bl	8005f80 <__kernel_cos>
 8005b50:	e7f1      	b.n	8005b36 <sin+0x7e>
 8005b52:	bf00      	nop
 8005b54:	f3af 8000 	nop.w
	...
 8005b60:	3fe921fb 	.word	0x3fe921fb
 8005b64:	7fefffff 	.word	0x7fefffff

08005b68 <__ieee754_rem_pio2>:
 8005b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6c:	ed2d 8b02 	vpush	{d8}
 8005b70:	ec55 4b10 	vmov	r4, r5, d0
 8005b74:	4bca      	ldr	r3, [pc, #808]	; (8005ea0 <__ieee754_rem_pio2+0x338>)
 8005b76:	b08b      	sub	sp, #44	; 0x2c
 8005b78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005b7c:	4598      	cmp	r8, r3
 8005b7e:	4682      	mov	sl, r0
 8005b80:	9502      	str	r5, [sp, #8]
 8005b82:	dc08      	bgt.n	8005b96 <__ieee754_rem_pio2+0x2e>
 8005b84:	2200      	movs	r2, #0
 8005b86:	2300      	movs	r3, #0
 8005b88:	ed80 0b00 	vstr	d0, [r0]
 8005b8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005b90:	f04f 0b00 	mov.w	fp, #0
 8005b94:	e028      	b.n	8005be8 <__ieee754_rem_pio2+0x80>
 8005b96:	4bc3      	ldr	r3, [pc, #780]	; (8005ea4 <__ieee754_rem_pio2+0x33c>)
 8005b98:	4598      	cmp	r8, r3
 8005b9a:	dc78      	bgt.n	8005c8e <__ieee754_rem_pio2+0x126>
 8005b9c:	9b02      	ldr	r3, [sp, #8]
 8005b9e:	4ec2      	ldr	r6, [pc, #776]	; (8005ea8 <__ieee754_rem_pio2+0x340>)
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	ee10 0a10 	vmov	r0, s0
 8005ba6:	a3b0      	add	r3, pc, #704	; (adr r3, 8005e68 <__ieee754_rem_pio2+0x300>)
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	4629      	mov	r1, r5
 8005bae:	dd39      	ble.n	8005c24 <__ieee754_rem_pio2+0xbc>
 8005bb0:	f7fa fb6a 	bl	8000288 <__aeabi_dsub>
 8005bb4:	45b0      	cmp	r8, r6
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	460d      	mov	r5, r1
 8005bba:	d01b      	beq.n	8005bf4 <__ieee754_rem_pio2+0x8c>
 8005bbc:	a3ac      	add	r3, pc, #688	; (adr r3, 8005e70 <__ieee754_rem_pio2+0x308>)
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f7fa fb61 	bl	8000288 <__aeabi_dsub>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	e9ca 2300 	strd	r2, r3, [sl]
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f7fa fb59 	bl	8000288 <__aeabi_dsub>
 8005bd6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005e70 <__ieee754_rem_pio2+0x308>)
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f7fa fb54 	bl	8000288 <__aeabi_dsub>
 8005be0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005be4:	f04f 0b01 	mov.w	fp, #1
 8005be8:	4658      	mov	r0, fp
 8005bea:	b00b      	add	sp, #44	; 0x2c
 8005bec:	ecbd 8b02 	vpop	{d8}
 8005bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	a3a0      	add	r3, pc, #640	; (adr r3, 8005e78 <__ieee754_rem_pio2+0x310>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa fb45 	bl	8000288 <__aeabi_dsub>
 8005bfe:	a3a0      	add	r3, pc, #640	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x318>)
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	4604      	mov	r4, r0
 8005c06:	460d      	mov	r5, r1
 8005c08:	f7fa fb3e 	bl	8000288 <__aeabi_dsub>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	460b      	mov	r3, r1
 8005c10:	e9ca 2300 	strd	r2, r3, [sl]
 8005c14:	4620      	mov	r0, r4
 8005c16:	4629      	mov	r1, r5
 8005c18:	f7fa fb36 	bl	8000288 <__aeabi_dsub>
 8005c1c:	a398      	add	r3, pc, #608	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x318>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	e7db      	b.n	8005bdc <__ieee754_rem_pio2+0x74>
 8005c24:	f7fa fb32 	bl	800028c <__adddf3>
 8005c28:	45b0      	cmp	r8, r6
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	460d      	mov	r5, r1
 8005c2e:	d016      	beq.n	8005c5e <__ieee754_rem_pio2+0xf6>
 8005c30:	a38f      	add	r3, pc, #572	; (adr r3, 8005e70 <__ieee754_rem_pio2+0x308>)
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	f7fa fb29 	bl	800028c <__adddf3>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	e9ca 2300 	strd	r2, r3, [sl]
 8005c42:	4620      	mov	r0, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	f7fa fb1f 	bl	8000288 <__aeabi_dsub>
 8005c4a:	a389      	add	r3, pc, #548	; (adr r3, 8005e70 <__ieee754_rem_pio2+0x308>)
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f7fa fb1c 	bl	800028c <__adddf3>
 8005c54:	f04f 3bff 	mov.w	fp, #4294967295
 8005c58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c5c:	e7c4      	b.n	8005be8 <__ieee754_rem_pio2+0x80>
 8005c5e:	a386      	add	r3, pc, #536	; (adr r3, 8005e78 <__ieee754_rem_pio2+0x310>)
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f7fa fb12 	bl	800028c <__adddf3>
 8005c68:	a385      	add	r3, pc, #532	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x318>)
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	4604      	mov	r4, r0
 8005c70:	460d      	mov	r5, r1
 8005c72:	f7fa fb0b 	bl	800028c <__adddf3>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	e9ca 2300 	strd	r2, r3, [sl]
 8005c7e:	4620      	mov	r0, r4
 8005c80:	4629      	mov	r1, r5
 8005c82:	f7fa fb01 	bl	8000288 <__aeabi_dsub>
 8005c86:	a37e      	add	r3, pc, #504	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x318>)
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	e7e0      	b.n	8005c50 <__ieee754_rem_pio2+0xe8>
 8005c8e:	4b87      	ldr	r3, [pc, #540]	; (8005eac <__ieee754_rem_pio2+0x344>)
 8005c90:	4598      	cmp	r8, r3
 8005c92:	f300 80d9 	bgt.w	8005e48 <__ieee754_rem_pio2+0x2e0>
 8005c96:	f000 fe49 	bl	800692c <fabs>
 8005c9a:	ec55 4b10 	vmov	r4, r5, d0
 8005c9e:	ee10 0a10 	vmov	r0, s0
 8005ca2:	a379      	add	r3, pc, #484	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x320>)
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa fca5 	bl	80005f8 <__aeabi_dmul>
 8005cae:	4b80      	ldr	r3, [pc, #512]	; (8005eb0 <__ieee754_rem_pio2+0x348>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f7fa faeb 	bl	800028c <__adddf3>
 8005cb6:	f7fa ff4f 	bl	8000b58 <__aeabi_d2iz>
 8005cba:	4683      	mov	fp, r0
 8005cbc:	f7fa fc32 	bl	8000524 <__aeabi_i2d>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	ec43 2b18 	vmov	d8, r2, r3
 8005cc8:	a367      	add	r3, pc, #412	; (adr r3, 8005e68 <__ieee754_rem_pio2+0x300>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fc93 	bl	80005f8 <__aeabi_dmul>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	4629      	mov	r1, r5
 8005cda:	f7fa fad5 	bl	8000288 <__aeabi_dsub>
 8005cde:	a364      	add	r3, pc, #400	; (adr r3, 8005e70 <__ieee754_rem_pio2+0x308>)
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	460f      	mov	r7, r1
 8005ce8:	ec51 0b18 	vmov	r0, r1, d8
 8005cec:	f7fa fc84 	bl	80005f8 <__aeabi_dmul>
 8005cf0:	f1bb 0f1f 	cmp.w	fp, #31
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	dc0d      	bgt.n	8005d16 <__ieee754_rem_pio2+0x1ae>
 8005cfa:	4b6e      	ldr	r3, [pc, #440]	; (8005eb4 <__ieee754_rem_pio2+0x34c>)
 8005cfc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d04:	4543      	cmp	r3, r8
 8005d06:	d006      	beq.n	8005d16 <__ieee754_rem_pio2+0x1ae>
 8005d08:	4622      	mov	r2, r4
 8005d0a:	462b      	mov	r3, r5
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	4639      	mov	r1, r7
 8005d10:	f7fa faba 	bl	8000288 <__aeabi_dsub>
 8005d14:	e00f      	b.n	8005d36 <__ieee754_rem_pio2+0x1ce>
 8005d16:	462b      	mov	r3, r5
 8005d18:	4622      	mov	r2, r4
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	4639      	mov	r1, r7
 8005d1e:	f7fa fab3 	bl	8000288 <__aeabi_dsub>
 8005d22:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005d26:	9303      	str	r3, [sp, #12]
 8005d28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005d30:	f1b8 0f10 	cmp.w	r8, #16
 8005d34:	dc02      	bgt.n	8005d3c <__ieee754_rem_pio2+0x1d4>
 8005d36:	e9ca 0100 	strd	r0, r1, [sl]
 8005d3a:	e039      	b.n	8005db0 <__ieee754_rem_pio2+0x248>
 8005d3c:	a34e      	add	r3, pc, #312	; (adr r3, 8005e78 <__ieee754_rem_pio2+0x310>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	ec51 0b18 	vmov	r0, r1, d8
 8005d46:	f7fa fc57 	bl	80005f8 <__aeabi_dmul>
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	460d      	mov	r5, r1
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4630      	mov	r0, r6
 8005d54:	4639      	mov	r1, r7
 8005d56:	f7fa fa97 	bl	8000288 <__aeabi_dsub>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4680      	mov	r8, r0
 8005d60:	4689      	mov	r9, r1
 8005d62:	4630      	mov	r0, r6
 8005d64:	4639      	mov	r1, r7
 8005d66:	f7fa fa8f 	bl	8000288 <__aeabi_dsub>
 8005d6a:	4622      	mov	r2, r4
 8005d6c:	462b      	mov	r3, r5
 8005d6e:	f7fa fa8b 	bl	8000288 <__aeabi_dsub>
 8005d72:	a343      	add	r3, pc, #268	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x318>)
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	4604      	mov	r4, r0
 8005d7a:	460d      	mov	r5, r1
 8005d7c:	ec51 0b18 	vmov	r0, r1, d8
 8005d80:	f7fa fc3a 	bl	80005f8 <__aeabi_dmul>
 8005d84:	4622      	mov	r2, r4
 8005d86:	462b      	mov	r3, r5
 8005d88:	f7fa fa7e 	bl	8000288 <__aeabi_dsub>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	4640      	mov	r0, r8
 8005d96:	4649      	mov	r1, r9
 8005d98:	f7fa fa76 	bl	8000288 <__aeabi_dsub>
 8005d9c:	9a03      	ldr	r2, [sp, #12]
 8005d9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b31      	cmp	r3, #49	; 0x31
 8005da6:	dc24      	bgt.n	8005df2 <__ieee754_rem_pio2+0x28a>
 8005da8:	e9ca 0100 	strd	r0, r1, [sl]
 8005dac:	4646      	mov	r6, r8
 8005dae:	464f      	mov	r7, r9
 8005db0:	e9da 8900 	ldrd	r8, r9, [sl]
 8005db4:	4630      	mov	r0, r6
 8005db6:	4642      	mov	r2, r8
 8005db8:	464b      	mov	r3, r9
 8005dba:	4639      	mov	r1, r7
 8005dbc:	f7fa fa64 	bl	8000288 <__aeabi_dsub>
 8005dc0:	462b      	mov	r3, r5
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	f7fa fa60 	bl	8000288 <__aeabi_dsub>
 8005dc8:	9b02      	ldr	r3, [sp, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005dd0:	f6bf af0a 	bge.w	8005be8 <__ieee754_rem_pio2+0x80>
 8005dd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005dd8:	f8ca 3004 	str.w	r3, [sl, #4]
 8005ddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005de0:	f8ca 8000 	str.w	r8, [sl]
 8005de4:	f8ca 0008 	str.w	r0, [sl, #8]
 8005de8:	f8ca 300c 	str.w	r3, [sl, #12]
 8005dec:	f1cb 0b00 	rsb	fp, fp, #0
 8005df0:	e6fa      	b.n	8005be8 <__ieee754_rem_pio2+0x80>
 8005df2:	a327      	add	r3, pc, #156	; (adr r3, 8005e90 <__ieee754_rem_pio2+0x328>)
 8005df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df8:	ec51 0b18 	vmov	r0, r1, d8
 8005dfc:	f7fa fbfc 	bl	80005f8 <__aeabi_dmul>
 8005e00:	4604      	mov	r4, r0
 8005e02:	460d      	mov	r5, r1
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	f7fa fa3c 	bl	8000288 <__aeabi_dsub>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	4640      	mov	r0, r8
 8005e1a:	4649      	mov	r1, r9
 8005e1c:	f7fa fa34 	bl	8000288 <__aeabi_dsub>
 8005e20:	4622      	mov	r2, r4
 8005e22:	462b      	mov	r3, r5
 8005e24:	f7fa fa30 	bl	8000288 <__aeabi_dsub>
 8005e28:	a31b      	add	r3, pc, #108	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x330>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	ec51 0b18 	vmov	r0, r1, d8
 8005e36:	f7fa fbdf 	bl	80005f8 <__aeabi_dmul>
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	462b      	mov	r3, r5
 8005e3e:	f7fa fa23 	bl	8000288 <__aeabi_dsub>
 8005e42:	4604      	mov	r4, r0
 8005e44:	460d      	mov	r5, r1
 8005e46:	e75f      	b.n	8005d08 <__ieee754_rem_pio2+0x1a0>
 8005e48:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <__ieee754_rem_pio2+0x350>)
 8005e4a:	4598      	cmp	r8, r3
 8005e4c:	dd36      	ble.n	8005ebc <__ieee754_rem_pio2+0x354>
 8005e4e:	ee10 2a10 	vmov	r2, s0
 8005e52:	462b      	mov	r3, r5
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa fa16 	bl	8000288 <__aeabi_dsub>
 8005e5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e60:	e9ca 0100 	strd	r0, r1, [sl]
 8005e64:	e694      	b.n	8005b90 <__ieee754_rem_pio2+0x28>
 8005e66:	bf00      	nop
 8005e68:	54400000 	.word	0x54400000
 8005e6c:	3ff921fb 	.word	0x3ff921fb
 8005e70:	1a626331 	.word	0x1a626331
 8005e74:	3dd0b461 	.word	0x3dd0b461
 8005e78:	1a600000 	.word	0x1a600000
 8005e7c:	3dd0b461 	.word	0x3dd0b461
 8005e80:	2e037073 	.word	0x2e037073
 8005e84:	3ba3198a 	.word	0x3ba3198a
 8005e88:	6dc9c883 	.word	0x6dc9c883
 8005e8c:	3fe45f30 	.word	0x3fe45f30
 8005e90:	2e000000 	.word	0x2e000000
 8005e94:	3ba3198a 	.word	0x3ba3198a
 8005e98:	252049c1 	.word	0x252049c1
 8005e9c:	397b839a 	.word	0x397b839a
 8005ea0:	3fe921fb 	.word	0x3fe921fb
 8005ea4:	4002d97b 	.word	0x4002d97b
 8005ea8:	3ff921fb 	.word	0x3ff921fb
 8005eac:	413921fb 	.word	0x413921fb
 8005eb0:	3fe00000 	.word	0x3fe00000
 8005eb4:	0800981c 	.word	0x0800981c
 8005eb8:	7fefffff 	.word	0x7fefffff
 8005ebc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005ec0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005ec4:	ee10 0a10 	vmov	r0, s0
 8005ec8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005ecc:	ee10 6a10 	vmov	r6, s0
 8005ed0:	460f      	mov	r7, r1
 8005ed2:	f7fa fe41 	bl	8000b58 <__aeabi_d2iz>
 8005ed6:	f7fa fb25 	bl	8000524 <__aeabi_i2d>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4630      	mov	r0, r6
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ee6:	f7fa f9cf 	bl	8000288 <__aeabi_dsub>
 8005eea:	4b23      	ldr	r3, [pc, #140]	; (8005f78 <__ieee754_rem_pio2+0x410>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	f7fa fb83 	bl	80005f8 <__aeabi_dmul>
 8005ef2:	460f      	mov	r7, r1
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	f7fa fe2f 	bl	8000b58 <__aeabi_d2iz>
 8005efa:	f7fa fb13 	bl	8000524 <__aeabi_i2d>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4630      	mov	r0, r6
 8005f04:	4639      	mov	r1, r7
 8005f06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005f0a:	f7fa f9bd 	bl	8000288 <__aeabi_dsub>
 8005f0e:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <__ieee754_rem_pio2+0x410>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	f7fa fb71 	bl	80005f8 <__aeabi_dmul>
 8005f16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f1a:	ad04      	add	r5, sp, #16
 8005f1c:	f04f 0803 	mov.w	r8, #3
 8005f20:	46a9      	mov	r9, r5
 8005f22:	2600      	movs	r6, #0
 8005f24:	2700      	movs	r7, #0
 8005f26:	4632      	mov	r2, r6
 8005f28:	463b      	mov	r3, r7
 8005f2a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005f2e:	46c3      	mov	fp, r8
 8005f30:	3d08      	subs	r5, #8
 8005f32:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f36:	f7fa fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d1f3      	bne.n	8005f26 <__ieee754_rem_pio2+0x3be>
 8005f3e:	4b0f      	ldr	r3, [pc, #60]	; (8005f7c <__ieee754_rem_pio2+0x414>)
 8005f40:	9301      	str	r3, [sp, #4]
 8005f42:	2302      	movs	r3, #2
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	4622      	mov	r2, r4
 8005f48:	465b      	mov	r3, fp
 8005f4a:	4651      	mov	r1, sl
 8005f4c:	4648      	mov	r0, r9
 8005f4e:	f000 f8df 	bl	8006110 <__kernel_rem_pio2>
 8005f52:	9b02      	ldr	r3, [sp, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	4683      	mov	fp, r0
 8005f58:	f6bf ae46 	bge.w	8005be8 <__ieee754_rem_pio2+0x80>
 8005f5c:	e9da 2100 	ldrd	r2, r1, [sl]
 8005f60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f64:	e9ca 2300 	strd	r2, r3, [sl]
 8005f68:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005f6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f70:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005f74:	e73a      	b.n	8005dec <__ieee754_rem_pio2+0x284>
 8005f76:	bf00      	nop
 8005f78:	41700000 	.word	0x41700000
 8005f7c:	0800989c 	.word	0x0800989c

08005f80 <__kernel_cos>:
 8005f80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	ec57 6b10 	vmov	r6, r7, d0
 8005f88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005f8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005f90:	ed8d 1b00 	vstr	d1, [sp]
 8005f94:	da07      	bge.n	8005fa6 <__kernel_cos+0x26>
 8005f96:	ee10 0a10 	vmov	r0, s0
 8005f9a:	4639      	mov	r1, r7
 8005f9c:	f7fa fddc 	bl	8000b58 <__aeabi_d2iz>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	f000 8088 	beq.w	80060b6 <__kernel_cos+0x136>
 8005fa6:	4632      	mov	r2, r6
 8005fa8:	463b      	mov	r3, r7
 8005faa:	4630      	mov	r0, r6
 8005fac:	4639      	mov	r1, r7
 8005fae:	f7fa fb23 	bl	80005f8 <__aeabi_dmul>
 8005fb2:	4b51      	ldr	r3, [pc, #324]	; (80060f8 <__kernel_cos+0x178>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	460d      	mov	r5, r1
 8005fba:	f7fa fb1d 	bl	80005f8 <__aeabi_dmul>
 8005fbe:	a340      	add	r3, pc, #256	; (adr r3, 80060c0 <__kernel_cos+0x140>)
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	468b      	mov	fp, r1
 8005fc8:	4620      	mov	r0, r4
 8005fca:	4629      	mov	r1, r5
 8005fcc:	f7fa fb14 	bl	80005f8 <__aeabi_dmul>
 8005fd0:	a33d      	add	r3, pc, #244	; (adr r3, 80060c8 <__kernel_cos+0x148>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f7fa f959 	bl	800028c <__adddf3>
 8005fda:	4622      	mov	r2, r4
 8005fdc:	462b      	mov	r3, r5
 8005fde:	f7fa fb0b 	bl	80005f8 <__aeabi_dmul>
 8005fe2:	a33b      	add	r3, pc, #236	; (adr r3, 80060d0 <__kernel_cos+0x150>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f7fa f94e 	bl	8000288 <__aeabi_dsub>
 8005fec:	4622      	mov	r2, r4
 8005fee:	462b      	mov	r3, r5
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	a338      	add	r3, pc, #224	; (adr r3, 80060d8 <__kernel_cos+0x158>)
 8005ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffa:	f7fa f947 	bl	800028c <__adddf3>
 8005ffe:	4622      	mov	r2, r4
 8006000:	462b      	mov	r3, r5
 8006002:	f7fa faf9 	bl	80005f8 <__aeabi_dmul>
 8006006:	a336      	add	r3, pc, #216	; (adr r3, 80060e0 <__kernel_cos+0x160>)
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f7fa f93c 	bl	8000288 <__aeabi_dsub>
 8006010:	4622      	mov	r2, r4
 8006012:	462b      	mov	r3, r5
 8006014:	f7fa faf0 	bl	80005f8 <__aeabi_dmul>
 8006018:	a333      	add	r3, pc, #204	; (adr r3, 80060e8 <__kernel_cos+0x168>)
 800601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601e:	f7fa f935 	bl	800028c <__adddf3>
 8006022:	4622      	mov	r2, r4
 8006024:	462b      	mov	r3, r5
 8006026:	f7fa fae7 	bl	80005f8 <__aeabi_dmul>
 800602a:	4622      	mov	r2, r4
 800602c:	462b      	mov	r3, r5
 800602e:	f7fa fae3 	bl	80005f8 <__aeabi_dmul>
 8006032:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006036:	4604      	mov	r4, r0
 8006038:	460d      	mov	r5, r1
 800603a:	4630      	mov	r0, r6
 800603c:	4639      	mov	r1, r7
 800603e:	f7fa fadb 	bl	80005f8 <__aeabi_dmul>
 8006042:	460b      	mov	r3, r1
 8006044:	4602      	mov	r2, r0
 8006046:	4629      	mov	r1, r5
 8006048:	4620      	mov	r0, r4
 800604a:	f7fa f91d 	bl	8000288 <__aeabi_dsub>
 800604e:	4b2b      	ldr	r3, [pc, #172]	; (80060fc <__kernel_cos+0x17c>)
 8006050:	4598      	cmp	r8, r3
 8006052:	4606      	mov	r6, r0
 8006054:	460f      	mov	r7, r1
 8006056:	dc10      	bgt.n	800607a <__kernel_cos+0xfa>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	4650      	mov	r0, sl
 800605e:	4659      	mov	r1, fp
 8006060:	f7fa f912 	bl	8000288 <__aeabi_dsub>
 8006064:	460b      	mov	r3, r1
 8006066:	4926      	ldr	r1, [pc, #152]	; (8006100 <__kernel_cos+0x180>)
 8006068:	4602      	mov	r2, r0
 800606a:	2000      	movs	r0, #0
 800606c:	f7fa f90c 	bl	8000288 <__aeabi_dsub>
 8006070:	ec41 0b10 	vmov	d0, r0, r1
 8006074:	b003      	add	sp, #12
 8006076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607a:	4b22      	ldr	r3, [pc, #136]	; (8006104 <__kernel_cos+0x184>)
 800607c:	4920      	ldr	r1, [pc, #128]	; (8006100 <__kernel_cos+0x180>)
 800607e:	4598      	cmp	r8, r3
 8006080:	bfcc      	ite	gt
 8006082:	4d21      	ldrgt	r5, [pc, #132]	; (8006108 <__kernel_cos+0x188>)
 8006084:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006088:	2400      	movs	r4, #0
 800608a:	4622      	mov	r2, r4
 800608c:	462b      	mov	r3, r5
 800608e:	2000      	movs	r0, #0
 8006090:	f7fa f8fa 	bl	8000288 <__aeabi_dsub>
 8006094:	4622      	mov	r2, r4
 8006096:	4680      	mov	r8, r0
 8006098:	4689      	mov	r9, r1
 800609a:	462b      	mov	r3, r5
 800609c:	4650      	mov	r0, sl
 800609e:	4659      	mov	r1, fp
 80060a0:	f7fa f8f2 	bl	8000288 <__aeabi_dsub>
 80060a4:	4632      	mov	r2, r6
 80060a6:	463b      	mov	r3, r7
 80060a8:	f7fa f8ee 	bl	8000288 <__aeabi_dsub>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4640      	mov	r0, r8
 80060b2:	4649      	mov	r1, r9
 80060b4:	e7da      	b.n	800606c <__kernel_cos+0xec>
 80060b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80060f0 <__kernel_cos+0x170>
 80060ba:	e7db      	b.n	8006074 <__kernel_cos+0xf4>
 80060bc:	f3af 8000 	nop.w
 80060c0:	be8838d4 	.word	0xbe8838d4
 80060c4:	bda8fae9 	.word	0xbda8fae9
 80060c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80060cc:	3e21ee9e 	.word	0x3e21ee9e
 80060d0:	809c52ad 	.word	0x809c52ad
 80060d4:	3e927e4f 	.word	0x3e927e4f
 80060d8:	19cb1590 	.word	0x19cb1590
 80060dc:	3efa01a0 	.word	0x3efa01a0
 80060e0:	16c15177 	.word	0x16c15177
 80060e4:	3f56c16c 	.word	0x3f56c16c
 80060e8:	5555554c 	.word	0x5555554c
 80060ec:	3fa55555 	.word	0x3fa55555
 80060f0:	00000000 	.word	0x00000000
 80060f4:	3ff00000 	.word	0x3ff00000
 80060f8:	3fe00000 	.word	0x3fe00000
 80060fc:	3fd33332 	.word	0x3fd33332
 8006100:	3ff00000 	.word	0x3ff00000
 8006104:	3fe90000 	.word	0x3fe90000
 8006108:	3fd20000 	.word	0x3fd20000
 800610c:	00000000 	.word	0x00000000

08006110 <__kernel_rem_pio2>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	ed2d 8b02 	vpush	{d8}
 8006118:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800611c:	f112 0f14 	cmn.w	r2, #20
 8006120:	9308      	str	r3, [sp, #32]
 8006122:	9101      	str	r1, [sp, #4]
 8006124:	4bc4      	ldr	r3, [pc, #784]	; (8006438 <__kernel_rem_pio2+0x328>)
 8006126:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006128:	900b      	str	r0, [sp, #44]	; 0x2c
 800612a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800612e:	9302      	str	r3, [sp, #8]
 8006130:	9b08      	ldr	r3, [sp, #32]
 8006132:	f103 33ff 	add.w	r3, r3, #4294967295
 8006136:	bfa8      	it	ge
 8006138:	1ed4      	subge	r4, r2, #3
 800613a:	9306      	str	r3, [sp, #24]
 800613c:	bfb2      	itee	lt
 800613e:	2400      	movlt	r4, #0
 8006140:	2318      	movge	r3, #24
 8006142:	fb94 f4f3 	sdivge	r4, r4, r3
 8006146:	f06f 0317 	mvn.w	r3, #23
 800614a:	fb04 3303 	mla	r3, r4, r3, r3
 800614e:	eb03 0a02 	add.w	sl, r3, r2
 8006152:	9b02      	ldr	r3, [sp, #8]
 8006154:	9a06      	ldr	r2, [sp, #24]
 8006156:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006428 <__kernel_rem_pio2+0x318>
 800615a:	eb03 0802 	add.w	r8, r3, r2
 800615e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006160:	1aa7      	subs	r7, r4, r2
 8006162:	ae22      	add	r6, sp, #136	; 0x88
 8006164:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006168:	2500      	movs	r5, #0
 800616a:	4545      	cmp	r5, r8
 800616c:	dd13      	ble.n	8006196 <__kernel_rem_pio2+0x86>
 800616e:	9b08      	ldr	r3, [sp, #32]
 8006170:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006428 <__kernel_rem_pio2+0x318>
 8006174:	aa22      	add	r2, sp, #136	; 0x88
 8006176:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800617a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800617e:	f04f 0800 	mov.w	r8, #0
 8006182:	9b02      	ldr	r3, [sp, #8]
 8006184:	4598      	cmp	r8, r3
 8006186:	dc2f      	bgt.n	80061e8 <__kernel_rem_pio2+0xd8>
 8006188:	ed8d 8b04 	vstr	d8, [sp, #16]
 800618c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006190:	462f      	mov	r7, r5
 8006192:	2600      	movs	r6, #0
 8006194:	e01b      	b.n	80061ce <__kernel_rem_pio2+0xbe>
 8006196:	42ef      	cmn	r7, r5
 8006198:	d407      	bmi.n	80061aa <__kernel_rem_pio2+0x9a>
 800619a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800619e:	f7fa f9c1 	bl	8000524 <__aeabi_i2d>
 80061a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80061a6:	3501      	adds	r5, #1
 80061a8:	e7df      	b.n	800616a <__kernel_rem_pio2+0x5a>
 80061aa:	ec51 0b18 	vmov	r0, r1, d8
 80061ae:	e7f8      	b.n	80061a2 <__kernel_rem_pio2+0x92>
 80061b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80061b8:	f7fa fa1e 	bl	80005f8 <__aeabi_dmul>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061c4:	f7fa f862 	bl	800028c <__adddf3>
 80061c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061cc:	3601      	adds	r6, #1
 80061ce:	9b06      	ldr	r3, [sp, #24]
 80061d0:	429e      	cmp	r6, r3
 80061d2:	f1a7 0708 	sub.w	r7, r7, #8
 80061d6:	ddeb      	ble.n	80061b0 <__kernel_rem_pio2+0xa0>
 80061d8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80061dc:	f108 0801 	add.w	r8, r8, #1
 80061e0:	ecab 7b02 	vstmia	fp!, {d7}
 80061e4:	3508      	adds	r5, #8
 80061e6:	e7cc      	b.n	8006182 <__kernel_rem_pio2+0x72>
 80061e8:	9b02      	ldr	r3, [sp, #8]
 80061ea:	aa0e      	add	r2, sp, #56	; 0x38
 80061ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061f0:	930d      	str	r3, [sp, #52]	; 0x34
 80061f2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80061f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80061f8:	9c02      	ldr	r4, [sp, #8]
 80061fa:	930c      	str	r3, [sp, #48]	; 0x30
 80061fc:	00e3      	lsls	r3, r4, #3
 80061fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006200:	ab9a      	add	r3, sp, #616	; 0x268
 8006202:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006206:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800620a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800620e:	ab72      	add	r3, sp, #456	; 0x1c8
 8006210:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006214:	46c3      	mov	fp, r8
 8006216:	46a1      	mov	r9, r4
 8006218:	f1b9 0f00 	cmp.w	r9, #0
 800621c:	f1a5 0508 	sub.w	r5, r5, #8
 8006220:	dc77      	bgt.n	8006312 <__kernel_rem_pio2+0x202>
 8006222:	ec47 6b10 	vmov	d0, r6, r7
 8006226:	4650      	mov	r0, sl
 8006228:	f000 fc0a 	bl	8006a40 <scalbn>
 800622c:	ec57 6b10 	vmov	r6, r7, d0
 8006230:	2200      	movs	r2, #0
 8006232:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006236:	ee10 0a10 	vmov	r0, s0
 800623a:	4639      	mov	r1, r7
 800623c:	f7fa f9dc 	bl	80005f8 <__aeabi_dmul>
 8006240:	ec41 0b10 	vmov	d0, r0, r1
 8006244:	f000 fb7c 	bl	8006940 <floor>
 8006248:	4b7c      	ldr	r3, [pc, #496]	; (800643c <__kernel_rem_pio2+0x32c>)
 800624a:	ec51 0b10 	vmov	r0, r1, d0
 800624e:	2200      	movs	r2, #0
 8006250:	f7fa f9d2 	bl	80005f8 <__aeabi_dmul>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4630      	mov	r0, r6
 800625a:	4639      	mov	r1, r7
 800625c:	f7fa f814 	bl	8000288 <__aeabi_dsub>
 8006260:	460f      	mov	r7, r1
 8006262:	4606      	mov	r6, r0
 8006264:	f7fa fc78 	bl	8000b58 <__aeabi_d2iz>
 8006268:	9004      	str	r0, [sp, #16]
 800626a:	f7fa f95b 	bl	8000524 <__aeabi_i2d>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4630      	mov	r0, r6
 8006274:	4639      	mov	r1, r7
 8006276:	f7fa f807 	bl	8000288 <__aeabi_dsub>
 800627a:	f1ba 0f00 	cmp.w	sl, #0
 800627e:	4606      	mov	r6, r0
 8006280:	460f      	mov	r7, r1
 8006282:	dd6d      	ble.n	8006360 <__kernel_rem_pio2+0x250>
 8006284:	1e62      	subs	r2, r4, #1
 8006286:	ab0e      	add	r3, sp, #56	; 0x38
 8006288:	9d04      	ldr	r5, [sp, #16]
 800628a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800628e:	f1ca 0118 	rsb	r1, sl, #24
 8006292:	fa40 f301 	asr.w	r3, r0, r1
 8006296:	441d      	add	r5, r3
 8006298:	408b      	lsls	r3, r1
 800629a:	1ac0      	subs	r0, r0, r3
 800629c:	ab0e      	add	r3, sp, #56	; 0x38
 800629e:	9504      	str	r5, [sp, #16]
 80062a0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80062a4:	f1ca 0317 	rsb	r3, sl, #23
 80062a8:	fa40 fb03 	asr.w	fp, r0, r3
 80062ac:	f1bb 0f00 	cmp.w	fp, #0
 80062b0:	dd65      	ble.n	800637e <__kernel_rem_pio2+0x26e>
 80062b2:	9b04      	ldr	r3, [sp, #16]
 80062b4:	2200      	movs	r2, #0
 80062b6:	3301      	adds	r3, #1
 80062b8:	9304      	str	r3, [sp, #16]
 80062ba:	4615      	mov	r5, r2
 80062bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80062c0:	4294      	cmp	r4, r2
 80062c2:	f300 809c 	bgt.w	80063fe <__kernel_rem_pio2+0x2ee>
 80062c6:	f1ba 0f00 	cmp.w	sl, #0
 80062ca:	dd07      	ble.n	80062dc <__kernel_rem_pio2+0x1cc>
 80062cc:	f1ba 0f01 	cmp.w	sl, #1
 80062d0:	f000 80c0 	beq.w	8006454 <__kernel_rem_pio2+0x344>
 80062d4:	f1ba 0f02 	cmp.w	sl, #2
 80062d8:	f000 80c6 	beq.w	8006468 <__kernel_rem_pio2+0x358>
 80062dc:	f1bb 0f02 	cmp.w	fp, #2
 80062e0:	d14d      	bne.n	800637e <__kernel_rem_pio2+0x26e>
 80062e2:	4632      	mov	r2, r6
 80062e4:	463b      	mov	r3, r7
 80062e6:	4956      	ldr	r1, [pc, #344]	; (8006440 <__kernel_rem_pio2+0x330>)
 80062e8:	2000      	movs	r0, #0
 80062ea:	f7f9 ffcd 	bl	8000288 <__aeabi_dsub>
 80062ee:	4606      	mov	r6, r0
 80062f0:	460f      	mov	r7, r1
 80062f2:	2d00      	cmp	r5, #0
 80062f4:	d043      	beq.n	800637e <__kernel_rem_pio2+0x26e>
 80062f6:	4650      	mov	r0, sl
 80062f8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006430 <__kernel_rem_pio2+0x320>
 80062fc:	f000 fba0 	bl	8006a40 <scalbn>
 8006300:	4630      	mov	r0, r6
 8006302:	4639      	mov	r1, r7
 8006304:	ec53 2b10 	vmov	r2, r3, d0
 8006308:	f7f9 ffbe 	bl	8000288 <__aeabi_dsub>
 800630c:	4606      	mov	r6, r0
 800630e:	460f      	mov	r7, r1
 8006310:	e035      	b.n	800637e <__kernel_rem_pio2+0x26e>
 8006312:	4b4c      	ldr	r3, [pc, #304]	; (8006444 <__kernel_rem_pio2+0x334>)
 8006314:	2200      	movs	r2, #0
 8006316:	4630      	mov	r0, r6
 8006318:	4639      	mov	r1, r7
 800631a:	f7fa f96d 	bl	80005f8 <__aeabi_dmul>
 800631e:	f7fa fc1b 	bl	8000b58 <__aeabi_d2iz>
 8006322:	f7fa f8ff 	bl	8000524 <__aeabi_i2d>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	ec43 2b18 	vmov	d8, r2, r3
 800632e:	4b46      	ldr	r3, [pc, #280]	; (8006448 <__kernel_rem_pio2+0x338>)
 8006330:	2200      	movs	r2, #0
 8006332:	f7fa f961 	bl	80005f8 <__aeabi_dmul>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4630      	mov	r0, r6
 800633c:	4639      	mov	r1, r7
 800633e:	f7f9 ffa3 	bl	8000288 <__aeabi_dsub>
 8006342:	f7fa fc09 	bl	8000b58 <__aeabi_d2iz>
 8006346:	e9d5 2300 	ldrd	r2, r3, [r5]
 800634a:	f84b 0b04 	str.w	r0, [fp], #4
 800634e:	ec51 0b18 	vmov	r0, r1, d8
 8006352:	f7f9 ff9b 	bl	800028c <__adddf3>
 8006356:	f109 39ff 	add.w	r9, r9, #4294967295
 800635a:	4606      	mov	r6, r0
 800635c:	460f      	mov	r7, r1
 800635e:	e75b      	b.n	8006218 <__kernel_rem_pio2+0x108>
 8006360:	d106      	bne.n	8006370 <__kernel_rem_pio2+0x260>
 8006362:	1e63      	subs	r3, r4, #1
 8006364:	aa0e      	add	r2, sp, #56	; 0x38
 8006366:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800636a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800636e:	e79d      	b.n	80062ac <__kernel_rem_pio2+0x19c>
 8006370:	4b36      	ldr	r3, [pc, #216]	; (800644c <__kernel_rem_pio2+0x33c>)
 8006372:	2200      	movs	r2, #0
 8006374:	f7fa fbc6 	bl	8000b04 <__aeabi_dcmpge>
 8006378:	2800      	cmp	r0, #0
 800637a:	d13d      	bne.n	80063f8 <__kernel_rem_pio2+0x2e8>
 800637c:	4683      	mov	fp, r0
 800637e:	2200      	movs	r2, #0
 8006380:	2300      	movs	r3, #0
 8006382:	4630      	mov	r0, r6
 8006384:	4639      	mov	r1, r7
 8006386:	f7fa fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800638a:	2800      	cmp	r0, #0
 800638c:	f000 80c0 	beq.w	8006510 <__kernel_rem_pio2+0x400>
 8006390:	1e65      	subs	r5, r4, #1
 8006392:	462b      	mov	r3, r5
 8006394:	2200      	movs	r2, #0
 8006396:	9902      	ldr	r1, [sp, #8]
 8006398:	428b      	cmp	r3, r1
 800639a:	da6c      	bge.n	8006476 <__kernel_rem_pio2+0x366>
 800639c:	2a00      	cmp	r2, #0
 800639e:	f000 8089 	beq.w	80064b4 <__kernel_rem_pio2+0x3a4>
 80063a2:	ab0e      	add	r3, sp, #56	; 0x38
 80063a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80063a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80ad 	beq.w	800650c <__kernel_rem_pio2+0x3fc>
 80063b2:	4650      	mov	r0, sl
 80063b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006430 <__kernel_rem_pio2+0x320>
 80063b8:	f000 fb42 	bl	8006a40 <scalbn>
 80063bc:	ab9a      	add	r3, sp, #616	; 0x268
 80063be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80063c2:	ec57 6b10 	vmov	r6, r7, d0
 80063c6:	00ec      	lsls	r4, r5, #3
 80063c8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80063cc:	46aa      	mov	sl, r5
 80063ce:	f1ba 0f00 	cmp.w	sl, #0
 80063d2:	f280 80d6 	bge.w	8006582 <__kernel_rem_pio2+0x472>
 80063d6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006428 <__kernel_rem_pio2+0x318>
 80063da:	462e      	mov	r6, r5
 80063dc:	2e00      	cmp	r6, #0
 80063de:	f2c0 8104 	blt.w	80065ea <__kernel_rem_pio2+0x4da>
 80063e2:	ab72      	add	r3, sp, #456	; 0x1c8
 80063e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80063e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006450 <__kernel_rem_pio2+0x340>
 80063ec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80063f0:	f04f 0800 	mov.w	r8, #0
 80063f4:	1baf      	subs	r7, r5, r6
 80063f6:	e0ea      	b.n	80065ce <__kernel_rem_pio2+0x4be>
 80063f8:	f04f 0b02 	mov.w	fp, #2
 80063fc:	e759      	b.n	80062b2 <__kernel_rem_pio2+0x1a2>
 80063fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006402:	b955      	cbnz	r5, 800641a <__kernel_rem_pio2+0x30a>
 8006404:	b123      	cbz	r3, 8006410 <__kernel_rem_pio2+0x300>
 8006406:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800640a:	f8c8 3000 	str.w	r3, [r8]
 800640e:	2301      	movs	r3, #1
 8006410:	3201      	adds	r2, #1
 8006412:	f108 0804 	add.w	r8, r8, #4
 8006416:	461d      	mov	r5, r3
 8006418:	e752      	b.n	80062c0 <__kernel_rem_pio2+0x1b0>
 800641a:	1acb      	subs	r3, r1, r3
 800641c:	f8c8 3000 	str.w	r3, [r8]
 8006420:	462b      	mov	r3, r5
 8006422:	e7f5      	b.n	8006410 <__kernel_rem_pio2+0x300>
 8006424:	f3af 8000 	nop.w
	...
 8006434:	3ff00000 	.word	0x3ff00000
 8006438:	080099e8 	.word	0x080099e8
 800643c:	40200000 	.word	0x40200000
 8006440:	3ff00000 	.word	0x3ff00000
 8006444:	3e700000 	.word	0x3e700000
 8006448:	41700000 	.word	0x41700000
 800644c:	3fe00000 	.word	0x3fe00000
 8006450:	080099a8 	.word	0x080099a8
 8006454:	1e62      	subs	r2, r4, #1
 8006456:	ab0e      	add	r3, sp, #56	; 0x38
 8006458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006460:	a90e      	add	r1, sp, #56	; 0x38
 8006462:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006466:	e739      	b.n	80062dc <__kernel_rem_pio2+0x1cc>
 8006468:	1e62      	subs	r2, r4, #1
 800646a:	ab0e      	add	r3, sp, #56	; 0x38
 800646c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006470:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006474:	e7f4      	b.n	8006460 <__kernel_rem_pio2+0x350>
 8006476:	a90e      	add	r1, sp, #56	; 0x38
 8006478:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800647c:	3b01      	subs	r3, #1
 800647e:	430a      	orrs	r2, r1
 8006480:	e789      	b.n	8006396 <__kernel_rem_pio2+0x286>
 8006482:	3301      	adds	r3, #1
 8006484:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006488:	2900      	cmp	r1, #0
 800648a:	d0fa      	beq.n	8006482 <__kernel_rem_pio2+0x372>
 800648c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800648e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006492:	446a      	add	r2, sp
 8006494:	3a98      	subs	r2, #152	; 0x98
 8006496:	920a      	str	r2, [sp, #40]	; 0x28
 8006498:	9a08      	ldr	r2, [sp, #32]
 800649a:	18e3      	adds	r3, r4, r3
 800649c:	18a5      	adds	r5, r4, r2
 800649e:	aa22      	add	r2, sp, #136	; 0x88
 80064a0:	f104 0801 	add.w	r8, r4, #1
 80064a4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80064a8:	9304      	str	r3, [sp, #16]
 80064aa:	9b04      	ldr	r3, [sp, #16]
 80064ac:	4543      	cmp	r3, r8
 80064ae:	da04      	bge.n	80064ba <__kernel_rem_pio2+0x3aa>
 80064b0:	461c      	mov	r4, r3
 80064b2:	e6a3      	b.n	80061fc <__kernel_rem_pio2+0xec>
 80064b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064b6:	2301      	movs	r3, #1
 80064b8:	e7e4      	b.n	8006484 <__kernel_rem_pio2+0x374>
 80064ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80064c0:	f7fa f830 	bl	8000524 <__aeabi_i2d>
 80064c4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80064c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ca:	46ab      	mov	fp, r5
 80064cc:	461c      	mov	r4, r3
 80064ce:	f04f 0900 	mov.w	r9, #0
 80064d2:	2600      	movs	r6, #0
 80064d4:	2700      	movs	r7, #0
 80064d6:	9b06      	ldr	r3, [sp, #24]
 80064d8:	4599      	cmp	r9, r3
 80064da:	dd06      	ble.n	80064ea <__kernel_rem_pio2+0x3da>
 80064dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064de:	e8e3 6702 	strd	r6, r7, [r3], #8
 80064e2:	f108 0801 	add.w	r8, r8, #1
 80064e6:	930a      	str	r3, [sp, #40]	; 0x28
 80064e8:	e7df      	b.n	80064aa <__kernel_rem_pio2+0x39a>
 80064ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80064ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80064f2:	f7fa f881 	bl	80005f8 <__aeabi_dmul>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4630      	mov	r0, r6
 80064fc:	4639      	mov	r1, r7
 80064fe:	f7f9 fec5 	bl	800028c <__adddf3>
 8006502:	f109 0901 	add.w	r9, r9, #1
 8006506:	4606      	mov	r6, r0
 8006508:	460f      	mov	r7, r1
 800650a:	e7e4      	b.n	80064d6 <__kernel_rem_pio2+0x3c6>
 800650c:	3d01      	subs	r5, #1
 800650e:	e748      	b.n	80063a2 <__kernel_rem_pio2+0x292>
 8006510:	ec47 6b10 	vmov	d0, r6, r7
 8006514:	f1ca 0000 	rsb	r0, sl, #0
 8006518:	f000 fa92 	bl	8006a40 <scalbn>
 800651c:	ec57 6b10 	vmov	r6, r7, d0
 8006520:	4ba0      	ldr	r3, [pc, #640]	; (80067a4 <__kernel_rem_pio2+0x694>)
 8006522:	ee10 0a10 	vmov	r0, s0
 8006526:	2200      	movs	r2, #0
 8006528:	4639      	mov	r1, r7
 800652a:	f7fa faeb 	bl	8000b04 <__aeabi_dcmpge>
 800652e:	b1f8      	cbz	r0, 8006570 <__kernel_rem_pio2+0x460>
 8006530:	4b9d      	ldr	r3, [pc, #628]	; (80067a8 <__kernel_rem_pio2+0x698>)
 8006532:	2200      	movs	r2, #0
 8006534:	4630      	mov	r0, r6
 8006536:	4639      	mov	r1, r7
 8006538:	f7fa f85e 	bl	80005f8 <__aeabi_dmul>
 800653c:	f7fa fb0c 	bl	8000b58 <__aeabi_d2iz>
 8006540:	4680      	mov	r8, r0
 8006542:	f7f9 ffef 	bl	8000524 <__aeabi_i2d>
 8006546:	4b97      	ldr	r3, [pc, #604]	; (80067a4 <__kernel_rem_pio2+0x694>)
 8006548:	2200      	movs	r2, #0
 800654a:	f7fa f855 	bl	80005f8 <__aeabi_dmul>
 800654e:	460b      	mov	r3, r1
 8006550:	4602      	mov	r2, r0
 8006552:	4639      	mov	r1, r7
 8006554:	4630      	mov	r0, r6
 8006556:	f7f9 fe97 	bl	8000288 <__aeabi_dsub>
 800655a:	f7fa fafd 	bl	8000b58 <__aeabi_d2iz>
 800655e:	1c65      	adds	r5, r4, #1
 8006560:	ab0e      	add	r3, sp, #56	; 0x38
 8006562:	f10a 0a18 	add.w	sl, sl, #24
 8006566:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800656a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800656e:	e720      	b.n	80063b2 <__kernel_rem_pio2+0x2a2>
 8006570:	4630      	mov	r0, r6
 8006572:	4639      	mov	r1, r7
 8006574:	f7fa faf0 	bl	8000b58 <__aeabi_d2iz>
 8006578:	ab0e      	add	r3, sp, #56	; 0x38
 800657a:	4625      	mov	r5, r4
 800657c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006580:	e717      	b.n	80063b2 <__kernel_rem_pio2+0x2a2>
 8006582:	ab0e      	add	r3, sp, #56	; 0x38
 8006584:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006588:	f7f9 ffcc 	bl	8000524 <__aeabi_i2d>
 800658c:	4632      	mov	r2, r6
 800658e:	463b      	mov	r3, r7
 8006590:	f7fa f832 	bl	80005f8 <__aeabi_dmul>
 8006594:	4b84      	ldr	r3, [pc, #528]	; (80067a8 <__kernel_rem_pio2+0x698>)
 8006596:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800659a:	2200      	movs	r2, #0
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	f7fa f82a 	bl	80005f8 <__aeabi_dmul>
 80065a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065a8:	4606      	mov	r6, r0
 80065aa:	460f      	mov	r7, r1
 80065ac:	e70f      	b.n	80063ce <__kernel_rem_pio2+0x2be>
 80065ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80065b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80065b6:	f7fa f81f 	bl	80005f8 <__aeabi_dmul>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065c2:	f7f9 fe63 	bl	800028c <__adddf3>
 80065c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065ca:	f108 0801 	add.w	r8, r8, #1
 80065ce:	9b02      	ldr	r3, [sp, #8]
 80065d0:	4598      	cmp	r8, r3
 80065d2:	dc01      	bgt.n	80065d8 <__kernel_rem_pio2+0x4c8>
 80065d4:	45b8      	cmp	r8, r7
 80065d6:	ddea      	ble.n	80065ae <__kernel_rem_pio2+0x49e>
 80065d8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80065dc:	ab4a      	add	r3, sp, #296	; 0x128
 80065de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80065e2:	ed87 7b00 	vstr	d7, [r7]
 80065e6:	3e01      	subs	r6, #1
 80065e8:	e6f8      	b.n	80063dc <__kernel_rem_pio2+0x2cc>
 80065ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	dc0b      	bgt.n	8006608 <__kernel_rem_pio2+0x4f8>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dc35      	bgt.n	8006660 <__kernel_rem_pio2+0x550>
 80065f4:	d059      	beq.n	80066aa <__kernel_rem_pio2+0x59a>
 80065f6:	9b04      	ldr	r3, [sp, #16]
 80065f8:	f003 0007 	and.w	r0, r3, #7
 80065fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006600:	ecbd 8b02 	vpop	{d8}
 8006604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006608:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800660a:	2b03      	cmp	r3, #3
 800660c:	d1f3      	bne.n	80065f6 <__kernel_rem_pio2+0x4e6>
 800660e:	ab4a      	add	r3, sp, #296	; 0x128
 8006610:	4423      	add	r3, r4
 8006612:	9306      	str	r3, [sp, #24]
 8006614:	461c      	mov	r4, r3
 8006616:	469a      	mov	sl, r3
 8006618:	9502      	str	r5, [sp, #8]
 800661a:	9b02      	ldr	r3, [sp, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f1aa 0a08 	sub.w	sl, sl, #8
 8006622:	dc6b      	bgt.n	80066fc <__kernel_rem_pio2+0x5ec>
 8006624:	46aa      	mov	sl, r5
 8006626:	f1ba 0f01 	cmp.w	sl, #1
 800662a:	f1a4 0408 	sub.w	r4, r4, #8
 800662e:	f300 8085 	bgt.w	800673c <__kernel_rem_pio2+0x62c>
 8006632:	9c06      	ldr	r4, [sp, #24]
 8006634:	2000      	movs	r0, #0
 8006636:	3408      	adds	r4, #8
 8006638:	2100      	movs	r1, #0
 800663a:	2d01      	cmp	r5, #1
 800663c:	f300 809d 	bgt.w	800677a <__kernel_rem_pio2+0x66a>
 8006640:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006644:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006648:	f1bb 0f00 	cmp.w	fp, #0
 800664c:	f040 809b 	bne.w	8006786 <__kernel_rem_pio2+0x676>
 8006650:	9b01      	ldr	r3, [sp, #4]
 8006652:	e9c3 5600 	strd	r5, r6, [r3]
 8006656:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800665a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800665e:	e7ca      	b.n	80065f6 <__kernel_rem_pio2+0x4e6>
 8006660:	3408      	adds	r4, #8
 8006662:	ab4a      	add	r3, sp, #296	; 0x128
 8006664:	441c      	add	r4, r3
 8006666:	462e      	mov	r6, r5
 8006668:	2000      	movs	r0, #0
 800666a:	2100      	movs	r1, #0
 800666c:	2e00      	cmp	r6, #0
 800666e:	da36      	bge.n	80066de <__kernel_rem_pio2+0x5ce>
 8006670:	f1bb 0f00 	cmp.w	fp, #0
 8006674:	d039      	beq.n	80066ea <__kernel_rem_pio2+0x5da>
 8006676:	4602      	mov	r2, r0
 8006678:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800667c:	9c01      	ldr	r4, [sp, #4]
 800667e:	e9c4 2300 	strd	r2, r3, [r4]
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800668a:	f7f9 fdfd 	bl	8000288 <__aeabi_dsub>
 800668e:	ae4c      	add	r6, sp, #304	; 0x130
 8006690:	2401      	movs	r4, #1
 8006692:	42a5      	cmp	r5, r4
 8006694:	da2c      	bge.n	80066f0 <__kernel_rem_pio2+0x5e0>
 8006696:	f1bb 0f00 	cmp.w	fp, #0
 800669a:	d002      	beq.n	80066a2 <__kernel_rem_pio2+0x592>
 800669c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066a0:	4619      	mov	r1, r3
 80066a2:	9b01      	ldr	r3, [sp, #4]
 80066a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80066a8:	e7a5      	b.n	80065f6 <__kernel_rem_pio2+0x4e6>
 80066aa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80066ae:	eb0d 0403 	add.w	r4, sp, r3
 80066b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80066b6:	2000      	movs	r0, #0
 80066b8:	2100      	movs	r1, #0
 80066ba:	2d00      	cmp	r5, #0
 80066bc:	da09      	bge.n	80066d2 <__kernel_rem_pio2+0x5c2>
 80066be:	f1bb 0f00 	cmp.w	fp, #0
 80066c2:	d002      	beq.n	80066ca <__kernel_rem_pio2+0x5ba>
 80066c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066c8:	4619      	mov	r1, r3
 80066ca:	9b01      	ldr	r3, [sp, #4]
 80066cc:	e9c3 0100 	strd	r0, r1, [r3]
 80066d0:	e791      	b.n	80065f6 <__kernel_rem_pio2+0x4e6>
 80066d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80066d6:	f7f9 fdd9 	bl	800028c <__adddf3>
 80066da:	3d01      	subs	r5, #1
 80066dc:	e7ed      	b.n	80066ba <__kernel_rem_pio2+0x5aa>
 80066de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80066e2:	f7f9 fdd3 	bl	800028c <__adddf3>
 80066e6:	3e01      	subs	r6, #1
 80066e8:	e7c0      	b.n	800666c <__kernel_rem_pio2+0x55c>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	e7c5      	b.n	800667c <__kernel_rem_pio2+0x56c>
 80066f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80066f4:	f7f9 fdca 	bl	800028c <__adddf3>
 80066f8:	3401      	adds	r4, #1
 80066fa:	e7ca      	b.n	8006692 <__kernel_rem_pio2+0x582>
 80066fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8006700:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006704:	9b02      	ldr	r3, [sp, #8]
 8006706:	3b01      	subs	r3, #1
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	4632      	mov	r2, r6
 800670c:	463b      	mov	r3, r7
 800670e:	4640      	mov	r0, r8
 8006710:	4649      	mov	r1, r9
 8006712:	f7f9 fdbb 	bl	800028c <__adddf3>
 8006716:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7f9 fdb1 	bl	8000288 <__aeabi_dsub>
 8006726:	4632      	mov	r2, r6
 8006728:	463b      	mov	r3, r7
 800672a:	f7f9 fdaf 	bl	800028c <__adddf3>
 800672e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006732:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006736:	ed8a 7b00 	vstr	d7, [sl]
 800673a:	e76e      	b.n	800661a <__kernel_rem_pio2+0x50a>
 800673c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006740:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006744:	4640      	mov	r0, r8
 8006746:	4632      	mov	r2, r6
 8006748:	463b      	mov	r3, r7
 800674a:	4649      	mov	r1, r9
 800674c:	f7f9 fd9e 	bl	800028c <__adddf3>
 8006750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4640      	mov	r0, r8
 800675a:	4649      	mov	r1, r9
 800675c:	f7f9 fd94 	bl	8000288 <__aeabi_dsub>
 8006760:	4632      	mov	r2, r6
 8006762:	463b      	mov	r3, r7
 8006764:	f7f9 fd92 	bl	800028c <__adddf3>
 8006768:	ed9d 7b02 	vldr	d7, [sp, #8]
 800676c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006770:	ed84 7b00 	vstr	d7, [r4]
 8006774:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006778:	e755      	b.n	8006626 <__kernel_rem_pio2+0x516>
 800677a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800677e:	f7f9 fd85 	bl	800028c <__adddf3>
 8006782:	3d01      	subs	r5, #1
 8006784:	e759      	b.n	800663a <__kernel_rem_pio2+0x52a>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	9a01      	ldr	r2, [sp, #4]
 800678a:	601d      	str	r5, [r3, #0]
 800678c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006790:	605c      	str	r4, [r3, #4]
 8006792:	609f      	str	r7, [r3, #8]
 8006794:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006798:	60d3      	str	r3, [r2, #12]
 800679a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800679e:	6110      	str	r0, [r2, #16]
 80067a0:	6153      	str	r3, [r2, #20]
 80067a2:	e728      	b.n	80065f6 <__kernel_rem_pio2+0x4e6>
 80067a4:	41700000 	.word	0x41700000
 80067a8:	3e700000 	.word	0x3e700000
 80067ac:	00000000 	.word	0x00000000

080067b0 <__kernel_sin>:
 80067b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b4:	ed2d 8b04 	vpush	{d8-d9}
 80067b8:	eeb0 8a41 	vmov.f32	s16, s2
 80067bc:	eef0 8a61 	vmov.f32	s17, s3
 80067c0:	ec55 4b10 	vmov	r4, r5, d0
 80067c4:	b083      	sub	sp, #12
 80067c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80067ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80067ce:	9001      	str	r0, [sp, #4]
 80067d0:	da06      	bge.n	80067e0 <__kernel_sin+0x30>
 80067d2:	ee10 0a10 	vmov	r0, s0
 80067d6:	4629      	mov	r1, r5
 80067d8:	f7fa f9be 	bl	8000b58 <__aeabi_d2iz>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d051      	beq.n	8006884 <__kernel_sin+0xd4>
 80067e0:	4622      	mov	r2, r4
 80067e2:	462b      	mov	r3, r5
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7f9 ff06 	bl	80005f8 <__aeabi_dmul>
 80067ec:	4682      	mov	sl, r0
 80067ee:	468b      	mov	fp, r1
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4620      	mov	r0, r4
 80067f6:	4629      	mov	r1, r5
 80067f8:	f7f9 fefe 	bl	80005f8 <__aeabi_dmul>
 80067fc:	a341      	add	r3, pc, #260	; (adr r3, 8006904 <__kernel_sin+0x154>)
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	4680      	mov	r8, r0
 8006804:	4689      	mov	r9, r1
 8006806:	4650      	mov	r0, sl
 8006808:	4659      	mov	r1, fp
 800680a:	f7f9 fef5 	bl	80005f8 <__aeabi_dmul>
 800680e:	a33f      	add	r3, pc, #252	; (adr r3, 800690c <__kernel_sin+0x15c>)
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f7f9 fd38 	bl	8000288 <__aeabi_dsub>
 8006818:	4652      	mov	r2, sl
 800681a:	465b      	mov	r3, fp
 800681c:	f7f9 feec 	bl	80005f8 <__aeabi_dmul>
 8006820:	a33c      	add	r3, pc, #240	; (adr r3, 8006914 <__kernel_sin+0x164>)
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f7f9 fd31 	bl	800028c <__adddf3>
 800682a:	4652      	mov	r2, sl
 800682c:	465b      	mov	r3, fp
 800682e:	f7f9 fee3 	bl	80005f8 <__aeabi_dmul>
 8006832:	a33a      	add	r3, pc, #232	; (adr r3, 800691c <__kernel_sin+0x16c>)
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f7f9 fd26 	bl	8000288 <__aeabi_dsub>
 800683c:	4652      	mov	r2, sl
 800683e:	465b      	mov	r3, fp
 8006840:	f7f9 feda 	bl	80005f8 <__aeabi_dmul>
 8006844:	a337      	add	r3, pc, #220	; (adr r3, 8006924 <__kernel_sin+0x174>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	f7f9 fd1f 	bl	800028c <__adddf3>
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
 8006854:	b9eb      	cbnz	r3, 8006892 <__kernel_sin+0xe2>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4650      	mov	r0, sl
 800685c:	4659      	mov	r1, fp
 800685e:	f7f9 fecb 	bl	80005f8 <__aeabi_dmul>
 8006862:	a325      	add	r3, pc, #148	; (adr r3, 80068f8 <__kernel_sin+0x148>)
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f7f9 fd0e 	bl	8000288 <__aeabi_dsub>
 800686c:	4642      	mov	r2, r8
 800686e:	464b      	mov	r3, r9
 8006870:	f7f9 fec2 	bl	80005f8 <__aeabi_dmul>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4620      	mov	r0, r4
 800687a:	4629      	mov	r1, r5
 800687c:	f7f9 fd06 	bl	800028c <__adddf3>
 8006880:	4604      	mov	r4, r0
 8006882:	460d      	mov	r5, r1
 8006884:	ec45 4b10 	vmov	d0, r4, r5
 8006888:	b003      	add	sp, #12
 800688a:	ecbd 8b04 	vpop	{d8-d9}
 800688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006892:	4b1b      	ldr	r3, [pc, #108]	; (8006900 <__kernel_sin+0x150>)
 8006894:	ec51 0b18 	vmov	r0, r1, d8
 8006898:	2200      	movs	r2, #0
 800689a:	f7f9 fead 	bl	80005f8 <__aeabi_dmul>
 800689e:	4632      	mov	r2, r6
 80068a0:	ec41 0b19 	vmov	d9, r0, r1
 80068a4:	463b      	mov	r3, r7
 80068a6:	4640      	mov	r0, r8
 80068a8:	4649      	mov	r1, r9
 80068aa:	f7f9 fea5 	bl	80005f8 <__aeabi_dmul>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	ec51 0b19 	vmov	r0, r1, d9
 80068b6:	f7f9 fce7 	bl	8000288 <__aeabi_dsub>
 80068ba:	4652      	mov	r2, sl
 80068bc:	465b      	mov	r3, fp
 80068be:	f7f9 fe9b 	bl	80005f8 <__aeabi_dmul>
 80068c2:	ec53 2b18 	vmov	r2, r3, d8
 80068c6:	f7f9 fcdf 	bl	8000288 <__aeabi_dsub>
 80068ca:	a30b      	add	r3, pc, #44	; (adr r3, 80068f8 <__kernel_sin+0x148>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	4606      	mov	r6, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	4640      	mov	r0, r8
 80068d6:	4649      	mov	r1, r9
 80068d8:	f7f9 fe8e 	bl	80005f8 <__aeabi_dmul>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	4630      	mov	r0, r6
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7f9 fcd2 	bl	800028c <__adddf3>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7f9 fcca 	bl	8000288 <__aeabi_dsub>
 80068f4:	e7c4      	b.n	8006880 <__kernel_sin+0xd0>
 80068f6:	bf00      	nop
 80068f8:	55555549 	.word	0x55555549
 80068fc:	3fc55555 	.word	0x3fc55555
 8006900:	3fe00000 	.word	0x3fe00000
 8006904:	5acfd57c 	.word	0x5acfd57c
 8006908:	3de5d93a 	.word	0x3de5d93a
 800690c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006910:	3e5ae5e6 	.word	0x3e5ae5e6
 8006914:	57b1fe7d 	.word	0x57b1fe7d
 8006918:	3ec71de3 	.word	0x3ec71de3
 800691c:	19c161d5 	.word	0x19c161d5
 8006920:	3f2a01a0 	.word	0x3f2a01a0
 8006924:	1110f8a6 	.word	0x1110f8a6
 8006928:	3f811111 	.word	0x3f811111

0800692c <fabs>:
 800692c:	ec51 0b10 	vmov	r0, r1, d0
 8006930:	ee10 2a10 	vmov	r2, s0
 8006934:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006938:	ec43 2b10 	vmov	d0, r2, r3
 800693c:	4770      	bx	lr
	...

08006940 <floor>:
 8006940:	ec51 0b10 	vmov	r0, r1, d0
 8006944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006948:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800694c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006950:	2e13      	cmp	r6, #19
 8006952:	ee10 5a10 	vmov	r5, s0
 8006956:	ee10 8a10 	vmov	r8, s0
 800695a:	460c      	mov	r4, r1
 800695c:	dc32      	bgt.n	80069c4 <floor+0x84>
 800695e:	2e00      	cmp	r6, #0
 8006960:	da14      	bge.n	800698c <floor+0x4c>
 8006962:	a333      	add	r3, pc, #204	; (adr r3, 8006a30 <floor+0xf0>)
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	f7f9 fc90 	bl	800028c <__adddf3>
 800696c:	2200      	movs	r2, #0
 800696e:	2300      	movs	r3, #0
 8006970:	f7fa f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8006974:	b138      	cbz	r0, 8006986 <floor+0x46>
 8006976:	2c00      	cmp	r4, #0
 8006978:	da57      	bge.n	8006a2a <floor+0xea>
 800697a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800697e:	431d      	orrs	r5, r3
 8006980:	d001      	beq.n	8006986 <floor+0x46>
 8006982:	4c2d      	ldr	r4, [pc, #180]	; (8006a38 <floor+0xf8>)
 8006984:	2500      	movs	r5, #0
 8006986:	4621      	mov	r1, r4
 8006988:	4628      	mov	r0, r5
 800698a:	e025      	b.n	80069d8 <floor+0x98>
 800698c:	4f2b      	ldr	r7, [pc, #172]	; (8006a3c <floor+0xfc>)
 800698e:	4137      	asrs	r7, r6
 8006990:	ea01 0307 	and.w	r3, r1, r7
 8006994:	4303      	orrs	r3, r0
 8006996:	d01f      	beq.n	80069d8 <floor+0x98>
 8006998:	a325      	add	r3, pc, #148	; (adr r3, 8006a30 <floor+0xf0>)
 800699a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699e:	f7f9 fc75 	bl	800028c <__adddf3>
 80069a2:	2200      	movs	r2, #0
 80069a4:	2300      	movs	r3, #0
 80069a6:	f7fa f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d0eb      	beq.n	8006986 <floor+0x46>
 80069ae:	2c00      	cmp	r4, #0
 80069b0:	bfbe      	ittt	lt
 80069b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80069b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80069ba:	19a4      	addlt	r4, r4, r6
 80069bc:	ea24 0407 	bic.w	r4, r4, r7
 80069c0:	2500      	movs	r5, #0
 80069c2:	e7e0      	b.n	8006986 <floor+0x46>
 80069c4:	2e33      	cmp	r6, #51	; 0x33
 80069c6:	dd0b      	ble.n	80069e0 <floor+0xa0>
 80069c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80069cc:	d104      	bne.n	80069d8 <floor+0x98>
 80069ce:	ee10 2a10 	vmov	r2, s0
 80069d2:	460b      	mov	r3, r1
 80069d4:	f7f9 fc5a 	bl	800028c <__adddf3>
 80069d8:	ec41 0b10 	vmov	d0, r0, r1
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80069e4:	f04f 33ff 	mov.w	r3, #4294967295
 80069e8:	fa23 f707 	lsr.w	r7, r3, r7
 80069ec:	4207      	tst	r7, r0
 80069ee:	d0f3      	beq.n	80069d8 <floor+0x98>
 80069f0:	a30f      	add	r3, pc, #60	; (adr r3, 8006a30 <floor+0xf0>)
 80069f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f6:	f7f9 fc49 	bl	800028c <__adddf3>
 80069fa:	2200      	movs	r2, #0
 80069fc:	2300      	movs	r3, #0
 80069fe:	f7fa f88b 	bl	8000b18 <__aeabi_dcmpgt>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d0bf      	beq.n	8006986 <floor+0x46>
 8006a06:	2c00      	cmp	r4, #0
 8006a08:	da02      	bge.n	8006a10 <floor+0xd0>
 8006a0a:	2e14      	cmp	r6, #20
 8006a0c:	d103      	bne.n	8006a16 <floor+0xd6>
 8006a0e:	3401      	adds	r4, #1
 8006a10:	ea25 0507 	bic.w	r5, r5, r7
 8006a14:	e7b7      	b.n	8006986 <floor+0x46>
 8006a16:	2301      	movs	r3, #1
 8006a18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006a1c:	fa03 f606 	lsl.w	r6, r3, r6
 8006a20:	4435      	add	r5, r6
 8006a22:	4545      	cmp	r5, r8
 8006a24:	bf38      	it	cc
 8006a26:	18e4      	addcc	r4, r4, r3
 8006a28:	e7f2      	b.n	8006a10 <floor+0xd0>
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	462c      	mov	r4, r5
 8006a2e:	e7aa      	b.n	8006986 <floor+0x46>
 8006a30:	8800759c 	.word	0x8800759c
 8006a34:	7e37e43c 	.word	0x7e37e43c
 8006a38:	bff00000 	.word	0xbff00000
 8006a3c:	000fffff 	.word	0x000fffff

08006a40 <scalbn>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	ec55 4b10 	vmov	r4, r5, d0
 8006a46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	b99a      	cbnz	r2, 8006a78 <scalbn+0x38>
 8006a50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a54:	4323      	orrs	r3, r4
 8006a56:	d036      	beq.n	8006ac6 <scalbn+0x86>
 8006a58:	4b39      	ldr	r3, [pc, #228]	; (8006b40 <scalbn+0x100>)
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	ee10 0a10 	vmov	r0, s0
 8006a60:	2200      	movs	r2, #0
 8006a62:	f7f9 fdc9 	bl	80005f8 <__aeabi_dmul>
 8006a66:	4b37      	ldr	r3, [pc, #220]	; (8006b44 <scalbn+0x104>)
 8006a68:	429e      	cmp	r6, r3
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	460d      	mov	r5, r1
 8006a6e:	da10      	bge.n	8006a92 <scalbn+0x52>
 8006a70:	a32b      	add	r3, pc, #172	; (adr r3, 8006b20 <scalbn+0xe0>)
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	e03a      	b.n	8006aee <scalbn+0xae>
 8006a78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006a7c:	428a      	cmp	r2, r1
 8006a7e:	d10c      	bne.n	8006a9a <scalbn+0x5a>
 8006a80:	ee10 2a10 	vmov	r2, s0
 8006a84:	4620      	mov	r0, r4
 8006a86:	4629      	mov	r1, r5
 8006a88:	f7f9 fc00 	bl	800028c <__adddf3>
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	460d      	mov	r5, r1
 8006a90:	e019      	b.n	8006ac6 <scalbn+0x86>
 8006a92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006a96:	460b      	mov	r3, r1
 8006a98:	3a36      	subs	r2, #54	; 0x36
 8006a9a:	4432      	add	r2, r6
 8006a9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006aa0:	428a      	cmp	r2, r1
 8006aa2:	dd08      	ble.n	8006ab6 <scalbn+0x76>
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	a120      	add	r1, pc, #128	; (adr r1, 8006b28 <scalbn+0xe8>)
 8006aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aac:	da1c      	bge.n	8006ae8 <scalbn+0xa8>
 8006aae:	a120      	add	r1, pc, #128	; (adr r1, 8006b30 <scalbn+0xf0>)
 8006ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab4:	e018      	b.n	8006ae8 <scalbn+0xa8>
 8006ab6:	2a00      	cmp	r2, #0
 8006ab8:	dd08      	ble.n	8006acc <scalbn+0x8c>
 8006aba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006abe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ac2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ac6:	ec45 4b10 	vmov	d0, r4, r5
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ad0:	da19      	bge.n	8006b06 <scalbn+0xc6>
 8006ad2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ad6:	429e      	cmp	r6, r3
 8006ad8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006adc:	dd0a      	ble.n	8006af4 <scalbn+0xb4>
 8006ade:	a112      	add	r1, pc, #72	; (adr r1, 8006b28 <scalbn+0xe8>)
 8006ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e2      	bne.n	8006aae <scalbn+0x6e>
 8006ae8:	a30f      	add	r3, pc, #60	; (adr r3, 8006b28 <scalbn+0xe8>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	f7f9 fd83 	bl	80005f8 <__aeabi_dmul>
 8006af2:	e7cb      	b.n	8006a8c <scalbn+0x4c>
 8006af4:	a10a      	add	r1, pc, #40	; (adr r1, 8006b20 <scalbn+0xe0>)
 8006af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0b8      	beq.n	8006a70 <scalbn+0x30>
 8006afe:	a10e      	add	r1, pc, #56	; (adr r1, 8006b38 <scalbn+0xf8>)
 8006b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b04:	e7b4      	b.n	8006a70 <scalbn+0x30>
 8006b06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b0a:	3236      	adds	r2, #54	; 0x36
 8006b0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006b14:	4620      	mov	r0, r4
 8006b16:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <scalbn+0x108>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	e7e8      	b.n	8006aee <scalbn+0xae>
 8006b1c:	f3af 8000 	nop.w
 8006b20:	c2f8f359 	.word	0xc2f8f359
 8006b24:	01a56e1f 	.word	0x01a56e1f
 8006b28:	8800759c 	.word	0x8800759c
 8006b2c:	7e37e43c 	.word	0x7e37e43c
 8006b30:	8800759c 	.word	0x8800759c
 8006b34:	fe37e43c 	.word	0xfe37e43c
 8006b38:	c2f8f359 	.word	0xc2f8f359
 8006b3c:	81a56e1f 	.word	0x81a56e1f
 8006b40:	43500000 	.word	0x43500000
 8006b44:	ffff3cb0 	.word	0xffff3cb0
 8006b48:	3c900000 	.word	0x3c900000

08006b4c <__errno>:
 8006b4c:	4b01      	ldr	r3, [pc, #4]	; (8006b54 <__errno+0x8>)
 8006b4e:	6818      	ldr	r0, [r3, #0]
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	2000000c 	.word	0x2000000c

08006b58 <__libc_init_array>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	4d0d      	ldr	r5, [pc, #52]	; (8006b90 <__libc_init_array+0x38>)
 8006b5c:	4c0d      	ldr	r4, [pc, #52]	; (8006b94 <__libc_init_array+0x3c>)
 8006b5e:	1b64      	subs	r4, r4, r5
 8006b60:	10a4      	asrs	r4, r4, #2
 8006b62:	2600      	movs	r6, #0
 8006b64:	42a6      	cmp	r6, r4
 8006b66:	d109      	bne.n	8006b7c <__libc_init_array+0x24>
 8006b68:	4d0b      	ldr	r5, [pc, #44]	; (8006b98 <__libc_init_array+0x40>)
 8006b6a:	4c0c      	ldr	r4, [pc, #48]	; (8006b9c <__libc_init_array+0x44>)
 8006b6c:	f002 fdc2 	bl	80096f4 <_init>
 8006b70:	1b64      	subs	r4, r4, r5
 8006b72:	10a4      	asrs	r4, r4, #2
 8006b74:	2600      	movs	r6, #0
 8006b76:	42a6      	cmp	r6, r4
 8006b78:	d105      	bne.n	8006b86 <__libc_init_array+0x2e>
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}
 8006b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b80:	4798      	blx	r3
 8006b82:	3601      	adds	r6, #1
 8006b84:	e7ee      	b.n	8006b64 <__libc_init_array+0xc>
 8006b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8a:	4798      	blx	r3
 8006b8c:	3601      	adds	r6, #1
 8006b8e:	e7f2      	b.n	8006b76 <__libc_init_array+0x1e>
 8006b90:	08009dd4 	.word	0x08009dd4
 8006b94:	08009dd4 	.word	0x08009dd4
 8006b98:	08009dd4 	.word	0x08009dd4
 8006b9c:	08009dd8 	.word	0x08009dd8

08006ba0 <memset>:
 8006ba0:	4402      	add	r2, r0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d100      	bne.n	8006baa <memset+0xa>
 8006ba8:	4770      	bx	lr
 8006baa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bae:	e7f9      	b.n	8006ba4 <memset+0x4>

08006bb0 <__cvt>:
 8006bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb4:	ec55 4b10 	vmov	r4, r5, d0
 8006bb8:	2d00      	cmp	r5, #0
 8006bba:	460e      	mov	r6, r1
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	462b      	mov	r3, r5
 8006bc0:	bfbb      	ittet	lt
 8006bc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bc6:	461d      	movlt	r5, r3
 8006bc8:	2300      	movge	r3, #0
 8006bca:	232d      	movlt	r3, #45	; 0x2d
 8006bcc:	700b      	strb	r3, [r1, #0]
 8006bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bd4:	4691      	mov	r9, r2
 8006bd6:	f023 0820 	bic.w	r8, r3, #32
 8006bda:	bfbc      	itt	lt
 8006bdc:	4622      	movlt	r2, r4
 8006bde:	4614      	movlt	r4, r2
 8006be0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006be4:	d005      	beq.n	8006bf2 <__cvt+0x42>
 8006be6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bea:	d100      	bne.n	8006bee <__cvt+0x3e>
 8006bec:	3601      	adds	r6, #1
 8006bee:	2102      	movs	r1, #2
 8006bf0:	e000      	b.n	8006bf4 <__cvt+0x44>
 8006bf2:	2103      	movs	r1, #3
 8006bf4:	ab03      	add	r3, sp, #12
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	ab02      	add	r3, sp, #8
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	ec45 4b10 	vmov	d0, r4, r5
 8006c00:	4653      	mov	r3, sl
 8006c02:	4632      	mov	r2, r6
 8006c04:	f000 fe18 	bl	8007838 <_dtoa_r>
 8006c08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	d102      	bne.n	8006c16 <__cvt+0x66>
 8006c10:	f019 0f01 	tst.w	r9, #1
 8006c14:	d022      	beq.n	8006c5c <__cvt+0xac>
 8006c16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c1a:	eb07 0906 	add.w	r9, r7, r6
 8006c1e:	d110      	bne.n	8006c42 <__cvt+0x92>
 8006c20:	783b      	ldrb	r3, [r7, #0]
 8006c22:	2b30      	cmp	r3, #48	; 0x30
 8006c24:	d10a      	bne.n	8006c3c <__cvt+0x8c>
 8006c26:	2200      	movs	r2, #0
 8006c28:	2300      	movs	r3, #0
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7f9 ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c32:	b918      	cbnz	r0, 8006c3c <__cvt+0x8c>
 8006c34:	f1c6 0601 	rsb	r6, r6, #1
 8006c38:	f8ca 6000 	str.w	r6, [sl]
 8006c3c:	f8da 3000 	ldr.w	r3, [sl]
 8006c40:	4499      	add	r9, r3
 8006c42:	2200      	movs	r2, #0
 8006c44:	2300      	movs	r3, #0
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c4e:	b108      	cbz	r0, 8006c54 <__cvt+0xa4>
 8006c50:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c54:	2230      	movs	r2, #48	; 0x30
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	454b      	cmp	r3, r9
 8006c5a:	d307      	bcc.n	8006c6c <__cvt+0xbc>
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c60:	1bdb      	subs	r3, r3, r7
 8006c62:	4638      	mov	r0, r7
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	b004      	add	sp, #16
 8006c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c6c:	1c59      	adds	r1, r3, #1
 8006c6e:	9103      	str	r1, [sp, #12]
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	e7f0      	b.n	8006c56 <__cvt+0xa6>

08006c74 <__exponent>:
 8006c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c76:	4603      	mov	r3, r0
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	bfb8      	it	lt
 8006c7c:	4249      	neglt	r1, r1
 8006c7e:	f803 2b02 	strb.w	r2, [r3], #2
 8006c82:	bfb4      	ite	lt
 8006c84:	222d      	movlt	r2, #45	; 0x2d
 8006c86:	222b      	movge	r2, #43	; 0x2b
 8006c88:	2909      	cmp	r1, #9
 8006c8a:	7042      	strb	r2, [r0, #1]
 8006c8c:	dd2a      	ble.n	8006ce4 <__exponent+0x70>
 8006c8e:	f10d 0407 	add.w	r4, sp, #7
 8006c92:	46a4      	mov	ip, r4
 8006c94:	270a      	movs	r7, #10
 8006c96:	46a6      	mov	lr, r4
 8006c98:	460a      	mov	r2, r1
 8006c9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c9e:	fb07 1516 	mls	r5, r7, r6, r1
 8006ca2:	3530      	adds	r5, #48	; 0x30
 8006ca4:	2a63      	cmp	r2, #99	; 0x63
 8006ca6:	f104 34ff 	add.w	r4, r4, #4294967295
 8006caa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006cae:	4631      	mov	r1, r6
 8006cb0:	dcf1      	bgt.n	8006c96 <__exponent+0x22>
 8006cb2:	3130      	adds	r1, #48	; 0x30
 8006cb4:	f1ae 0502 	sub.w	r5, lr, #2
 8006cb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cbc:	1c44      	adds	r4, r0, #1
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	4561      	cmp	r1, ip
 8006cc2:	d30a      	bcc.n	8006cda <__exponent+0x66>
 8006cc4:	f10d 0209 	add.w	r2, sp, #9
 8006cc8:	eba2 020e 	sub.w	r2, r2, lr
 8006ccc:	4565      	cmp	r5, ip
 8006cce:	bf88      	it	hi
 8006cd0:	2200      	movhi	r2, #0
 8006cd2:	4413      	add	r3, r2
 8006cd4:	1a18      	subs	r0, r3, r0
 8006cd6:	b003      	add	sp, #12
 8006cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ce2:	e7ed      	b.n	8006cc0 <__exponent+0x4c>
 8006ce4:	2330      	movs	r3, #48	; 0x30
 8006ce6:	3130      	adds	r1, #48	; 0x30
 8006ce8:	7083      	strb	r3, [r0, #2]
 8006cea:	70c1      	strb	r1, [r0, #3]
 8006cec:	1d03      	adds	r3, r0, #4
 8006cee:	e7f1      	b.n	8006cd4 <__exponent+0x60>

08006cf0 <_printf_float>:
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	ed2d 8b02 	vpush	{d8}
 8006cf8:	b08d      	sub	sp, #52	; 0x34
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d00:	4616      	mov	r6, r2
 8006d02:	461f      	mov	r7, r3
 8006d04:	4605      	mov	r5, r0
 8006d06:	f001 fd3d 	bl	8008784 <_localeconv_r>
 8006d0a:	f8d0 a000 	ldr.w	sl, [r0]
 8006d0e:	4650      	mov	r0, sl
 8006d10:	f7f9 fa5e 	bl	80001d0 <strlen>
 8006d14:	2300      	movs	r3, #0
 8006d16:	930a      	str	r3, [sp, #40]	; 0x28
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d24:	3307      	adds	r3, #7
 8006d26:	f023 0307 	bic.w	r3, r3, #7
 8006d2a:	f103 0208 	add.w	r2, r3, #8
 8006d2e:	f8c8 2000 	str.w	r2, [r8]
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d42:	9307      	str	r3, [sp, #28]
 8006d44:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d48:	ee08 0a10 	vmov	s16, r0
 8006d4c:	4b9f      	ldr	r3, [pc, #636]	; (8006fcc <_printf_float+0x2dc>)
 8006d4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d52:	f04f 32ff 	mov.w	r2, #4294967295
 8006d56:	f7f9 fee9 	bl	8000b2c <__aeabi_dcmpun>
 8006d5a:	bb88      	cbnz	r0, 8006dc0 <_printf_float+0xd0>
 8006d5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d60:	4b9a      	ldr	r3, [pc, #616]	; (8006fcc <_printf_float+0x2dc>)
 8006d62:	f04f 32ff 	mov.w	r2, #4294967295
 8006d66:	f7f9 fec3 	bl	8000af0 <__aeabi_dcmple>
 8006d6a:	bb48      	cbnz	r0, 8006dc0 <_printf_float+0xd0>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2300      	movs	r3, #0
 8006d70:	4640      	mov	r0, r8
 8006d72:	4649      	mov	r1, r9
 8006d74:	f7f9 feb2 	bl	8000adc <__aeabi_dcmplt>
 8006d78:	b110      	cbz	r0, 8006d80 <_printf_float+0x90>
 8006d7a:	232d      	movs	r3, #45	; 0x2d
 8006d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d80:	4b93      	ldr	r3, [pc, #588]	; (8006fd0 <_printf_float+0x2e0>)
 8006d82:	4894      	ldr	r0, [pc, #592]	; (8006fd4 <_printf_float+0x2e4>)
 8006d84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d88:	bf94      	ite	ls
 8006d8a:	4698      	movls	r8, r3
 8006d8c:	4680      	movhi	r8, r0
 8006d8e:	2303      	movs	r3, #3
 8006d90:	6123      	str	r3, [r4, #16]
 8006d92:	9b05      	ldr	r3, [sp, #20]
 8006d94:	f023 0204 	bic.w	r2, r3, #4
 8006d98:	6022      	str	r2, [r4, #0]
 8006d9a:	f04f 0900 	mov.w	r9, #0
 8006d9e:	9700      	str	r7, [sp, #0]
 8006da0:	4633      	mov	r3, r6
 8006da2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006da4:	4621      	mov	r1, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	f000 f9d8 	bl	800715c <_printf_common>
 8006dac:	3001      	adds	r0, #1
 8006dae:	f040 8090 	bne.w	8006ed2 <_printf_float+0x1e2>
 8006db2:	f04f 30ff 	mov.w	r0, #4294967295
 8006db6:	b00d      	add	sp, #52	; 0x34
 8006db8:	ecbd 8b02 	vpop	{d8}
 8006dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc0:	4642      	mov	r2, r8
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	f7f9 feb0 	bl	8000b2c <__aeabi_dcmpun>
 8006dcc:	b140      	cbz	r0, 8006de0 <_printf_float+0xf0>
 8006dce:	464b      	mov	r3, r9
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	bfbc      	itt	lt
 8006dd4:	232d      	movlt	r3, #45	; 0x2d
 8006dd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dda:	487f      	ldr	r0, [pc, #508]	; (8006fd8 <_printf_float+0x2e8>)
 8006ddc:	4b7f      	ldr	r3, [pc, #508]	; (8006fdc <_printf_float+0x2ec>)
 8006dde:	e7d1      	b.n	8006d84 <_printf_float+0x94>
 8006de0:	6863      	ldr	r3, [r4, #4]
 8006de2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006de6:	9206      	str	r2, [sp, #24]
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	d13f      	bne.n	8006e6c <_printf_float+0x17c>
 8006dec:	2306      	movs	r3, #6
 8006dee:	6063      	str	r3, [r4, #4]
 8006df0:	9b05      	ldr	r3, [sp, #20]
 8006df2:	6861      	ldr	r1, [r4, #4]
 8006df4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006df8:	2300      	movs	r3, #0
 8006dfa:	9303      	str	r3, [sp, #12]
 8006dfc:	ab0a      	add	r3, sp, #40	; 0x28
 8006dfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e02:	ab09      	add	r3, sp, #36	; 0x24
 8006e04:	ec49 8b10 	vmov	d0, r8, r9
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	6022      	str	r2, [r4, #0]
 8006e0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e10:	4628      	mov	r0, r5
 8006e12:	f7ff fecd 	bl	8006bb0 <__cvt>
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e1a:	2b47      	cmp	r3, #71	; 0x47
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	d108      	bne.n	8006e32 <_printf_float+0x142>
 8006e20:	1cc8      	adds	r0, r1, #3
 8006e22:	db02      	blt.n	8006e2a <_printf_float+0x13a>
 8006e24:	6863      	ldr	r3, [r4, #4]
 8006e26:	4299      	cmp	r1, r3
 8006e28:	dd41      	ble.n	8006eae <_printf_float+0x1be>
 8006e2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e2e:	fa5f fb8b 	uxtb.w	fp, fp
 8006e32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e36:	d820      	bhi.n	8006e7a <_printf_float+0x18a>
 8006e38:	3901      	subs	r1, #1
 8006e3a:	465a      	mov	r2, fp
 8006e3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e40:	9109      	str	r1, [sp, #36]	; 0x24
 8006e42:	f7ff ff17 	bl	8006c74 <__exponent>
 8006e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e48:	1813      	adds	r3, r2, r0
 8006e4a:	2a01      	cmp	r2, #1
 8006e4c:	4681      	mov	r9, r0
 8006e4e:	6123      	str	r3, [r4, #16]
 8006e50:	dc02      	bgt.n	8006e58 <_printf_float+0x168>
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	07d2      	lsls	r2, r2, #31
 8006e56:	d501      	bpl.n	8006e5c <_printf_float+0x16c>
 8006e58:	3301      	adds	r3, #1
 8006e5a:	6123      	str	r3, [r4, #16]
 8006e5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d09c      	beq.n	8006d9e <_printf_float+0xae>
 8006e64:	232d      	movs	r3, #45	; 0x2d
 8006e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6a:	e798      	b.n	8006d9e <_printf_float+0xae>
 8006e6c:	9a06      	ldr	r2, [sp, #24]
 8006e6e:	2a47      	cmp	r2, #71	; 0x47
 8006e70:	d1be      	bne.n	8006df0 <_printf_float+0x100>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1bc      	bne.n	8006df0 <_printf_float+0x100>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e7b9      	b.n	8006dee <_printf_float+0xfe>
 8006e7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e7e:	d118      	bne.n	8006eb2 <_printf_float+0x1c2>
 8006e80:	2900      	cmp	r1, #0
 8006e82:	6863      	ldr	r3, [r4, #4]
 8006e84:	dd0b      	ble.n	8006e9e <_printf_float+0x1ae>
 8006e86:	6121      	str	r1, [r4, #16]
 8006e88:	b913      	cbnz	r3, 8006e90 <_printf_float+0x1a0>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	07d0      	lsls	r0, r2, #31
 8006e8e:	d502      	bpl.n	8006e96 <_printf_float+0x1a6>
 8006e90:	3301      	adds	r3, #1
 8006e92:	440b      	add	r3, r1
 8006e94:	6123      	str	r3, [r4, #16]
 8006e96:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e98:	f04f 0900 	mov.w	r9, #0
 8006e9c:	e7de      	b.n	8006e5c <_printf_float+0x16c>
 8006e9e:	b913      	cbnz	r3, 8006ea6 <_printf_float+0x1b6>
 8006ea0:	6822      	ldr	r2, [r4, #0]
 8006ea2:	07d2      	lsls	r2, r2, #31
 8006ea4:	d501      	bpl.n	8006eaa <_printf_float+0x1ba>
 8006ea6:	3302      	adds	r3, #2
 8006ea8:	e7f4      	b.n	8006e94 <_printf_float+0x1a4>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e7f2      	b.n	8006e94 <_printf_float+0x1a4>
 8006eae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb4:	4299      	cmp	r1, r3
 8006eb6:	db05      	blt.n	8006ec4 <_printf_float+0x1d4>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	6121      	str	r1, [r4, #16]
 8006ebc:	07d8      	lsls	r0, r3, #31
 8006ebe:	d5ea      	bpl.n	8006e96 <_printf_float+0x1a6>
 8006ec0:	1c4b      	adds	r3, r1, #1
 8006ec2:	e7e7      	b.n	8006e94 <_printf_float+0x1a4>
 8006ec4:	2900      	cmp	r1, #0
 8006ec6:	bfd4      	ite	le
 8006ec8:	f1c1 0202 	rsble	r2, r1, #2
 8006ecc:	2201      	movgt	r2, #1
 8006ece:	4413      	add	r3, r2
 8006ed0:	e7e0      	b.n	8006e94 <_printf_float+0x1a4>
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	055a      	lsls	r2, r3, #21
 8006ed6:	d407      	bmi.n	8006ee8 <_printf_float+0x1f8>
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	4642      	mov	r2, r8
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d12c      	bne.n	8006f40 <_printf_float+0x250>
 8006ee6:	e764      	b.n	8006db2 <_printf_float+0xc2>
 8006ee8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006eec:	f240 80e0 	bls.w	80070b0 <_printf_float+0x3c0>
 8006ef0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f7f9 fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d034      	beq.n	8006f6a <_printf_float+0x27a>
 8006f00:	4a37      	ldr	r2, [pc, #220]	; (8006fe0 <_printf_float+0x2f0>)
 8006f02:	2301      	movs	r3, #1
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f43f af51 	beq.w	8006db2 <_printf_float+0xc2>
 8006f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f14:	429a      	cmp	r2, r3
 8006f16:	db02      	blt.n	8006f1e <_printf_float+0x22e>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	07d8      	lsls	r0, r3, #31
 8006f1c:	d510      	bpl.n	8006f40 <_printf_float+0x250>
 8006f1e:	ee18 3a10 	vmov	r3, s16
 8006f22:	4652      	mov	r2, sl
 8006f24:	4631      	mov	r1, r6
 8006f26:	4628      	mov	r0, r5
 8006f28:	47b8      	blx	r7
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	f43f af41 	beq.w	8006db2 <_printf_float+0xc2>
 8006f30:	f04f 0800 	mov.w	r8, #0
 8006f34:	f104 091a 	add.w	r9, r4, #26
 8006f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	dc09      	bgt.n	8006f54 <_printf_float+0x264>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	079b      	lsls	r3, r3, #30
 8006f44:	f100 8105 	bmi.w	8007152 <_printf_float+0x462>
 8006f48:	68e0      	ldr	r0, [r4, #12]
 8006f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f4c:	4298      	cmp	r0, r3
 8006f4e:	bfb8      	it	lt
 8006f50:	4618      	movlt	r0, r3
 8006f52:	e730      	b.n	8006db6 <_printf_float+0xc6>
 8006f54:	2301      	movs	r3, #1
 8006f56:	464a      	mov	r2, r9
 8006f58:	4631      	mov	r1, r6
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	47b8      	blx	r7
 8006f5e:	3001      	adds	r0, #1
 8006f60:	f43f af27 	beq.w	8006db2 <_printf_float+0xc2>
 8006f64:	f108 0801 	add.w	r8, r8, #1
 8006f68:	e7e6      	b.n	8006f38 <_printf_float+0x248>
 8006f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dc39      	bgt.n	8006fe4 <_printf_float+0x2f4>
 8006f70:	4a1b      	ldr	r2, [pc, #108]	; (8006fe0 <_printf_float+0x2f0>)
 8006f72:	2301      	movs	r3, #1
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	f43f af19 	beq.w	8006db2 <_printf_float+0xc2>
 8006f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f84:	4313      	orrs	r3, r2
 8006f86:	d102      	bne.n	8006f8e <_printf_float+0x29e>
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	07d9      	lsls	r1, r3, #31
 8006f8c:	d5d8      	bpl.n	8006f40 <_printf_float+0x250>
 8006f8e:	ee18 3a10 	vmov	r3, s16
 8006f92:	4652      	mov	r2, sl
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f43f af09 	beq.w	8006db2 <_printf_float+0xc2>
 8006fa0:	f04f 0900 	mov.w	r9, #0
 8006fa4:	f104 0a1a 	add.w	sl, r4, #26
 8006fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006faa:	425b      	negs	r3, r3
 8006fac:	454b      	cmp	r3, r9
 8006fae:	dc01      	bgt.n	8006fb4 <_printf_float+0x2c4>
 8006fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb2:	e792      	b.n	8006eda <_printf_float+0x1ea>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4652      	mov	r2, sl
 8006fb8:	4631      	mov	r1, r6
 8006fba:	4628      	mov	r0, r5
 8006fbc:	47b8      	blx	r7
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	f43f aef7 	beq.w	8006db2 <_printf_float+0xc2>
 8006fc4:	f109 0901 	add.w	r9, r9, #1
 8006fc8:	e7ee      	b.n	8006fa8 <_printf_float+0x2b8>
 8006fca:	bf00      	nop
 8006fcc:	7fefffff 	.word	0x7fefffff
 8006fd0:	080099fc 	.word	0x080099fc
 8006fd4:	08009a00 	.word	0x08009a00
 8006fd8:	08009a08 	.word	0x08009a08
 8006fdc:	08009a04 	.word	0x08009a04
 8006fe0:	08009a0c 	.word	0x08009a0c
 8006fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	bfa8      	it	ge
 8006fec:	461a      	movge	r2, r3
 8006fee:	2a00      	cmp	r2, #0
 8006ff0:	4691      	mov	r9, r2
 8006ff2:	dc37      	bgt.n	8007064 <_printf_float+0x374>
 8006ff4:	f04f 0b00 	mov.w	fp, #0
 8006ff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ffc:	f104 021a 	add.w	r2, r4, #26
 8007000:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007002:	9305      	str	r3, [sp, #20]
 8007004:	eba3 0309 	sub.w	r3, r3, r9
 8007008:	455b      	cmp	r3, fp
 800700a:	dc33      	bgt.n	8007074 <_printf_float+0x384>
 800700c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007010:	429a      	cmp	r2, r3
 8007012:	db3b      	blt.n	800708c <_printf_float+0x39c>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	07da      	lsls	r2, r3, #31
 8007018:	d438      	bmi.n	800708c <_printf_float+0x39c>
 800701a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800701c:	9a05      	ldr	r2, [sp, #20]
 800701e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007020:	1a9a      	subs	r2, r3, r2
 8007022:	eba3 0901 	sub.w	r9, r3, r1
 8007026:	4591      	cmp	r9, r2
 8007028:	bfa8      	it	ge
 800702a:	4691      	movge	r9, r2
 800702c:	f1b9 0f00 	cmp.w	r9, #0
 8007030:	dc35      	bgt.n	800709e <_printf_float+0x3ae>
 8007032:	f04f 0800 	mov.w	r8, #0
 8007036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800703a:	f104 0a1a 	add.w	sl, r4, #26
 800703e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	eba3 0309 	sub.w	r3, r3, r9
 8007048:	4543      	cmp	r3, r8
 800704a:	f77f af79 	ble.w	8006f40 <_printf_float+0x250>
 800704e:	2301      	movs	r3, #1
 8007050:	4652      	mov	r2, sl
 8007052:	4631      	mov	r1, r6
 8007054:	4628      	mov	r0, r5
 8007056:	47b8      	blx	r7
 8007058:	3001      	adds	r0, #1
 800705a:	f43f aeaa 	beq.w	8006db2 <_printf_float+0xc2>
 800705e:	f108 0801 	add.w	r8, r8, #1
 8007062:	e7ec      	b.n	800703e <_printf_float+0x34e>
 8007064:	4613      	mov	r3, r2
 8007066:	4631      	mov	r1, r6
 8007068:	4642      	mov	r2, r8
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	d1c0      	bne.n	8006ff4 <_printf_float+0x304>
 8007072:	e69e      	b.n	8006db2 <_printf_float+0xc2>
 8007074:	2301      	movs	r3, #1
 8007076:	4631      	mov	r1, r6
 8007078:	4628      	mov	r0, r5
 800707a:	9205      	str	r2, [sp, #20]
 800707c:	47b8      	blx	r7
 800707e:	3001      	adds	r0, #1
 8007080:	f43f ae97 	beq.w	8006db2 <_printf_float+0xc2>
 8007084:	9a05      	ldr	r2, [sp, #20]
 8007086:	f10b 0b01 	add.w	fp, fp, #1
 800708a:	e7b9      	b.n	8007000 <_printf_float+0x310>
 800708c:	ee18 3a10 	vmov	r3, s16
 8007090:	4652      	mov	r2, sl
 8007092:	4631      	mov	r1, r6
 8007094:	4628      	mov	r0, r5
 8007096:	47b8      	blx	r7
 8007098:	3001      	adds	r0, #1
 800709a:	d1be      	bne.n	800701a <_printf_float+0x32a>
 800709c:	e689      	b.n	8006db2 <_printf_float+0xc2>
 800709e:	9a05      	ldr	r2, [sp, #20]
 80070a0:	464b      	mov	r3, r9
 80070a2:	4442      	add	r2, r8
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	d1c1      	bne.n	8007032 <_printf_float+0x342>
 80070ae:	e680      	b.n	8006db2 <_printf_float+0xc2>
 80070b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070b2:	2a01      	cmp	r2, #1
 80070b4:	dc01      	bgt.n	80070ba <_printf_float+0x3ca>
 80070b6:	07db      	lsls	r3, r3, #31
 80070b8:	d538      	bpl.n	800712c <_printf_float+0x43c>
 80070ba:	2301      	movs	r3, #1
 80070bc:	4642      	mov	r2, r8
 80070be:	4631      	mov	r1, r6
 80070c0:	4628      	mov	r0, r5
 80070c2:	47b8      	blx	r7
 80070c4:	3001      	adds	r0, #1
 80070c6:	f43f ae74 	beq.w	8006db2 <_printf_float+0xc2>
 80070ca:	ee18 3a10 	vmov	r3, s16
 80070ce:	4652      	mov	r2, sl
 80070d0:	4631      	mov	r1, r6
 80070d2:	4628      	mov	r0, r5
 80070d4:	47b8      	blx	r7
 80070d6:	3001      	adds	r0, #1
 80070d8:	f43f ae6b 	beq.w	8006db2 <_printf_float+0xc2>
 80070dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070e0:	2200      	movs	r2, #0
 80070e2:	2300      	movs	r3, #0
 80070e4:	f7f9 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80070e8:	b9d8      	cbnz	r0, 8007122 <_printf_float+0x432>
 80070ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070ec:	f108 0201 	add.w	r2, r8, #1
 80070f0:	3b01      	subs	r3, #1
 80070f2:	4631      	mov	r1, r6
 80070f4:	4628      	mov	r0, r5
 80070f6:	47b8      	blx	r7
 80070f8:	3001      	adds	r0, #1
 80070fa:	d10e      	bne.n	800711a <_printf_float+0x42a>
 80070fc:	e659      	b.n	8006db2 <_printf_float+0xc2>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	47b8      	blx	r7
 8007108:	3001      	adds	r0, #1
 800710a:	f43f ae52 	beq.w	8006db2 <_printf_float+0xc2>
 800710e:	f108 0801 	add.w	r8, r8, #1
 8007112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007114:	3b01      	subs	r3, #1
 8007116:	4543      	cmp	r3, r8
 8007118:	dcf1      	bgt.n	80070fe <_printf_float+0x40e>
 800711a:	464b      	mov	r3, r9
 800711c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007120:	e6dc      	b.n	8006edc <_printf_float+0x1ec>
 8007122:	f04f 0800 	mov.w	r8, #0
 8007126:	f104 0a1a 	add.w	sl, r4, #26
 800712a:	e7f2      	b.n	8007112 <_printf_float+0x422>
 800712c:	2301      	movs	r3, #1
 800712e:	4642      	mov	r2, r8
 8007130:	e7df      	b.n	80070f2 <_printf_float+0x402>
 8007132:	2301      	movs	r3, #1
 8007134:	464a      	mov	r2, r9
 8007136:	4631      	mov	r1, r6
 8007138:	4628      	mov	r0, r5
 800713a:	47b8      	blx	r7
 800713c:	3001      	adds	r0, #1
 800713e:	f43f ae38 	beq.w	8006db2 <_printf_float+0xc2>
 8007142:	f108 0801 	add.w	r8, r8, #1
 8007146:	68e3      	ldr	r3, [r4, #12]
 8007148:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800714a:	1a5b      	subs	r3, r3, r1
 800714c:	4543      	cmp	r3, r8
 800714e:	dcf0      	bgt.n	8007132 <_printf_float+0x442>
 8007150:	e6fa      	b.n	8006f48 <_printf_float+0x258>
 8007152:	f04f 0800 	mov.w	r8, #0
 8007156:	f104 0919 	add.w	r9, r4, #25
 800715a:	e7f4      	b.n	8007146 <_printf_float+0x456>

0800715c <_printf_common>:
 800715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	4616      	mov	r6, r2
 8007162:	4699      	mov	r9, r3
 8007164:	688a      	ldr	r2, [r1, #8]
 8007166:	690b      	ldr	r3, [r1, #16]
 8007168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800716c:	4293      	cmp	r3, r2
 800716e:	bfb8      	it	lt
 8007170:	4613      	movlt	r3, r2
 8007172:	6033      	str	r3, [r6, #0]
 8007174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007178:	4607      	mov	r7, r0
 800717a:	460c      	mov	r4, r1
 800717c:	b10a      	cbz	r2, 8007182 <_printf_common+0x26>
 800717e:	3301      	adds	r3, #1
 8007180:	6033      	str	r3, [r6, #0]
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	0699      	lsls	r1, r3, #26
 8007186:	bf42      	ittt	mi
 8007188:	6833      	ldrmi	r3, [r6, #0]
 800718a:	3302      	addmi	r3, #2
 800718c:	6033      	strmi	r3, [r6, #0]
 800718e:	6825      	ldr	r5, [r4, #0]
 8007190:	f015 0506 	ands.w	r5, r5, #6
 8007194:	d106      	bne.n	80071a4 <_printf_common+0x48>
 8007196:	f104 0a19 	add.w	sl, r4, #25
 800719a:	68e3      	ldr	r3, [r4, #12]
 800719c:	6832      	ldr	r2, [r6, #0]
 800719e:	1a9b      	subs	r3, r3, r2
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	dc26      	bgt.n	80071f2 <_printf_common+0x96>
 80071a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071a8:	1e13      	subs	r3, r2, #0
 80071aa:	6822      	ldr	r2, [r4, #0]
 80071ac:	bf18      	it	ne
 80071ae:	2301      	movne	r3, #1
 80071b0:	0692      	lsls	r2, r2, #26
 80071b2:	d42b      	bmi.n	800720c <_printf_common+0xb0>
 80071b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071b8:	4649      	mov	r1, r9
 80071ba:	4638      	mov	r0, r7
 80071bc:	47c0      	blx	r8
 80071be:	3001      	adds	r0, #1
 80071c0:	d01e      	beq.n	8007200 <_printf_common+0xa4>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	68e5      	ldr	r5, [r4, #12]
 80071c6:	6832      	ldr	r2, [r6, #0]
 80071c8:	f003 0306 	and.w	r3, r3, #6
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	bf08      	it	eq
 80071d0:	1aad      	subeq	r5, r5, r2
 80071d2:	68a3      	ldr	r3, [r4, #8]
 80071d4:	6922      	ldr	r2, [r4, #16]
 80071d6:	bf0c      	ite	eq
 80071d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071dc:	2500      	movne	r5, #0
 80071de:	4293      	cmp	r3, r2
 80071e0:	bfc4      	itt	gt
 80071e2:	1a9b      	subgt	r3, r3, r2
 80071e4:	18ed      	addgt	r5, r5, r3
 80071e6:	2600      	movs	r6, #0
 80071e8:	341a      	adds	r4, #26
 80071ea:	42b5      	cmp	r5, r6
 80071ec:	d11a      	bne.n	8007224 <_printf_common+0xc8>
 80071ee:	2000      	movs	r0, #0
 80071f0:	e008      	b.n	8007204 <_printf_common+0xa8>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4652      	mov	r2, sl
 80071f6:	4649      	mov	r1, r9
 80071f8:	4638      	mov	r0, r7
 80071fa:	47c0      	blx	r8
 80071fc:	3001      	adds	r0, #1
 80071fe:	d103      	bne.n	8007208 <_printf_common+0xac>
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007208:	3501      	adds	r5, #1
 800720a:	e7c6      	b.n	800719a <_printf_common+0x3e>
 800720c:	18e1      	adds	r1, r4, r3
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	2030      	movs	r0, #48	; 0x30
 8007212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007216:	4422      	add	r2, r4
 8007218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800721c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007220:	3302      	adds	r3, #2
 8007222:	e7c7      	b.n	80071b4 <_printf_common+0x58>
 8007224:	2301      	movs	r3, #1
 8007226:	4622      	mov	r2, r4
 8007228:	4649      	mov	r1, r9
 800722a:	4638      	mov	r0, r7
 800722c:	47c0      	blx	r8
 800722e:	3001      	adds	r0, #1
 8007230:	d0e6      	beq.n	8007200 <_printf_common+0xa4>
 8007232:	3601      	adds	r6, #1
 8007234:	e7d9      	b.n	80071ea <_printf_common+0x8e>
	...

08007238 <_printf_i>:
 8007238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800723c:	7e0f      	ldrb	r7, [r1, #24]
 800723e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007240:	2f78      	cmp	r7, #120	; 0x78
 8007242:	4691      	mov	r9, r2
 8007244:	4680      	mov	r8, r0
 8007246:	460c      	mov	r4, r1
 8007248:	469a      	mov	sl, r3
 800724a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800724e:	d807      	bhi.n	8007260 <_printf_i+0x28>
 8007250:	2f62      	cmp	r7, #98	; 0x62
 8007252:	d80a      	bhi.n	800726a <_printf_i+0x32>
 8007254:	2f00      	cmp	r7, #0
 8007256:	f000 80d8 	beq.w	800740a <_printf_i+0x1d2>
 800725a:	2f58      	cmp	r7, #88	; 0x58
 800725c:	f000 80a3 	beq.w	80073a6 <_printf_i+0x16e>
 8007260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007268:	e03a      	b.n	80072e0 <_printf_i+0xa8>
 800726a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800726e:	2b15      	cmp	r3, #21
 8007270:	d8f6      	bhi.n	8007260 <_printf_i+0x28>
 8007272:	a101      	add	r1, pc, #4	; (adr r1, 8007278 <_printf_i+0x40>)
 8007274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007278:	080072d1 	.word	0x080072d1
 800727c:	080072e5 	.word	0x080072e5
 8007280:	08007261 	.word	0x08007261
 8007284:	08007261 	.word	0x08007261
 8007288:	08007261 	.word	0x08007261
 800728c:	08007261 	.word	0x08007261
 8007290:	080072e5 	.word	0x080072e5
 8007294:	08007261 	.word	0x08007261
 8007298:	08007261 	.word	0x08007261
 800729c:	08007261 	.word	0x08007261
 80072a0:	08007261 	.word	0x08007261
 80072a4:	080073f1 	.word	0x080073f1
 80072a8:	08007315 	.word	0x08007315
 80072ac:	080073d3 	.word	0x080073d3
 80072b0:	08007261 	.word	0x08007261
 80072b4:	08007261 	.word	0x08007261
 80072b8:	08007413 	.word	0x08007413
 80072bc:	08007261 	.word	0x08007261
 80072c0:	08007315 	.word	0x08007315
 80072c4:	08007261 	.word	0x08007261
 80072c8:	08007261 	.word	0x08007261
 80072cc:	080073db 	.word	0x080073db
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	1d1a      	adds	r2, r3, #4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	602a      	str	r2, [r5, #0]
 80072d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072e0:	2301      	movs	r3, #1
 80072e2:	e0a3      	b.n	800742c <_printf_i+0x1f4>
 80072e4:	6820      	ldr	r0, [r4, #0]
 80072e6:	6829      	ldr	r1, [r5, #0]
 80072e8:	0606      	lsls	r6, r0, #24
 80072ea:	f101 0304 	add.w	r3, r1, #4
 80072ee:	d50a      	bpl.n	8007306 <_printf_i+0xce>
 80072f0:	680e      	ldr	r6, [r1, #0]
 80072f2:	602b      	str	r3, [r5, #0]
 80072f4:	2e00      	cmp	r6, #0
 80072f6:	da03      	bge.n	8007300 <_printf_i+0xc8>
 80072f8:	232d      	movs	r3, #45	; 0x2d
 80072fa:	4276      	negs	r6, r6
 80072fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007300:	485e      	ldr	r0, [pc, #376]	; (800747c <_printf_i+0x244>)
 8007302:	230a      	movs	r3, #10
 8007304:	e019      	b.n	800733a <_printf_i+0x102>
 8007306:	680e      	ldr	r6, [r1, #0]
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800730e:	bf18      	it	ne
 8007310:	b236      	sxthne	r6, r6
 8007312:	e7ef      	b.n	80072f4 <_printf_i+0xbc>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	6820      	ldr	r0, [r4, #0]
 8007318:	1d19      	adds	r1, r3, #4
 800731a:	6029      	str	r1, [r5, #0]
 800731c:	0601      	lsls	r1, r0, #24
 800731e:	d501      	bpl.n	8007324 <_printf_i+0xec>
 8007320:	681e      	ldr	r6, [r3, #0]
 8007322:	e002      	b.n	800732a <_printf_i+0xf2>
 8007324:	0646      	lsls	r6, r0, #25
 8007326:	d5fb      	bpl.n	8007320 <_printf_i+0xe8>
 8007328:	881e      	ldrh	r6, [r3, #0]
 800732a:	4854      	ldr	r0, [pc, #336]	; (800747c <_printf_i+0x244>)
 800732c:	2f6f      	cmp	r7, #111	; 0x6f
 800732e:	bf0c      	ite	eq
 8007330:	2308      	moveq	r3, #8
 8007332:	230a      	movne	r3, #10
 8007334:	2100      	movs	r1, #0
 8007336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800733a:	6865      	ldr	r5, [r4, #4]
 800733c:	60a5      	str	r5, [r4, #8]
 800733e:	2d00      	cmp	r5, #0
 8007340:	bfa2      	ittt	ge
 8007342:	6821      	ldrge	r1, [r4, #0]
 8007344:	f021 0104 	bicge.w	r1, r1, #4
 8007348:	6021      	strge	r1, [r4, #0]
 800734a:	b90e      	cbnz	r6, 8007350 <_printf_i+0x118>
 800734c:	2d00      	cmp	r5, #0
 800734e:	d04d      	beq.n	80073ec <_printf_i+0x1b4>
 8007350:	4615      	mov	r5, r2
 8007352:	fbb6 f1f3 	udiv	r1, r6, r3
 8007356:	fb03 6711 	mls	r7, r3, r1, r6
 800735a:	5dc7      	ldrb	r7, [r0, r7]
 800735c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007360:	4637      	mov	r7, r6
 8007362:	42bb      	cmp	r3, r7
 8007364:	460e      	mov	r6, r1
 8007366:	d9f4      	bls.n	8007352 <_printf_i+0x11a>
 8007368:	2b08      	cmp	r3, #8
 800736a:	d10b      	bne.n	8007384 <_printf_i+0x14c>
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	07de      	lsls	r6, r3, #31
 8007370:	d508      	bpl.n	8007384 <_printf_i+0x14c>
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	6861      	ldr	r1, [r4, #4]
 8007376:	4299      	cmp	r1, r3
 8007378:	bfde      	ittt	le
 800737a:	2330      	movle	r3, #48	; 0x30
 800737c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007380:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007384:	1b52      	subs	r2, r2, r5
 8007386:	6122      	str	r2, [r4, #16]
 8007388:	f8cd a000 	str.w	sl, [sp]
 800738c:	464b      	mov	r3, r9
 800738e:	aa03      	add	r2, sp, #12
 8007390:	4621      	mov	r1, r4
 8007392:	4640      	mov	r0, r8
 8007394:	f7ff fee2 	bl	800715c <_printf_common>
 8007398:	3001      	adds	r0, #1
 800739a:	d14c      	bne.n	8007436 <_printf_i+0x1fe>
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	b004      	add	sp, #16
 80073a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a6:	4835      	ldr	r0, [pc, #212]	; (800747c <_printf_i+0x244>)
 80073a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073ac:	6829      	ldr	r1, [r5, #0]
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80073b4:	6029      	str	r1, [r5, #0]
 80073b6:	061d      	lsls	r5, r3, #24
 80073b8:	d514      	bpl.n	80073e4 <_printf_i+0x1ac>
 80073ba:	07df      	lsls	r7, r3, #31
 80073bc:	bf44      	itt	mi
 80073be:	f043 0320 	orrmi.w	r3, r3, #32
 80073c2:	6023      	strmi	r3, [r4, #0]
 80073c4:	b91e      	cbnz	r6, 80073ce <_printf_i+0x196>
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	f023 0320 	bic.w	r3, r3, #32
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	2310      	movs	r3, #16
 80073d0:	e7b0      	b.n	8007334 <_printf_i+0xfc>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	f043 0320 	orr.w	r3, r3, #32
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	2378      	movs	r3, #120	; 0x78
 80073dc:	4828      	ldr	r0, [pc, #160]	; (8007480 <_printf_i+0x248>)
 80073de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073e2:	e7e3      	b.n	80073ac <_printf_i+0x174>
 80073e4:	0659      	lsls	r1, r3, #25
 80073e6:	bf48      	it	mi
 80073e8:	b2b6      	uxthmi	r6, r6
 80073ea:	e7e6      	b.n	80073ba <_printf_i+0x182>
 80073ec:	4615      	mov	r5, r2
 80073ee:	e7bb      	b.n	8007368 <_printf_i+0x130>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	6826      	ldr	r6, [r4, #0]
 80073f4:	6961      	ldr	r1, [r4, #20]
 80073f6:	1d18      	adds	r0, r3, #4
 80073f8:	6028      	str	r0, [r5, #0]
 80073fa:	0635      	lsls	r5, r6, #24
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	d501      	bpl.n	8007404 <_printf_i+0x1cc>
 8007400:	6019      	str	r1, [r3, #0]
 8007402:	e002      	b.n	800740a <_printf_i+0x1d2>
 8007404:	0670      	lsls	r0, r6, #25
 8007406:	d5fb      	bpl.n	8007400 <_printf_i+0x1c8>
 8007408:	8019      	strh	r1, [r3, #0]
 800740a:	2300      	movs	r3, #0
 800740c:	6123      	str	r3, [r4, #16]
 800740e:	4615      	mov	r5, r2
 8007410:	e7ba      	b.n	8007388 <_printf_i+0x150>
 8007412:	682b      	ldr	r3, [r5, #0]
 8007414:	1d1a      	adds	r2, r3, #4
 8007416:	602a      	str	r2, [r5, #0]
 8007418:	681d      	ldr	r5, [r3, #0]
 800741a:	6862      	ldr	r2, [r4, #4]
 800741c:	2100      	movs	r1, #0
 800741e:	4628      	mov	r0, r5
 8007420:	f7f8 fede 	bl	80001e0 <memchr>
 8007424:	b108      	cbz	r0, 800742a <_printf_i+0x1f2>
 8007426:	1b40      	subs	r0, r0, r5
 8007428:	6060      	str	r0, [r4, #4]
 800742a:	6863      	ldr	r3, [r4, #4]
 800742c:	6123      	str	r3, [r4, #16]
 800742e:	2300      	movs	r3, #0
 8007430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007434:	e7a8      	b.n	8007388 <_printf_i+0x150>
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	462a      	mov	r2, r5
 800743a:	4649      	mov	r1, r9
 800743c:	4640      	mov	r0, r8
 800743e:	47d0      	blx	sl
 8007440:	3001      	adds	r0, #1
 8007442:	d0ab      	beq.n	800739c <_printf_i+0x164>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	079b      	lsls	r3, r3, #30
 8007448:	d413      	bmi.n	8007472 <_printf_i+0x23a>
 800744a:	68e0      	ldr	r0, [r4, #12]
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	4298      	cmp	r0, r3
 8007450:	bfb8      	it	lt
 8007452:	4618      	movlt	r0, r3
 8007454:	e7a4      	b.n	80073a0 <_printf_i+0x168>
 8007456:	2301      	movs	r3, #1
 8007458:	4632      	mov	r2, r6
 800745a:	4649      	mov	r1, r9
 800745c:	4640      	mov	r0, r8
 800745e:	47d0      	blx	sl
 8007460:	3001      	adds	r0, #1
 8007462:	d09b      	beq.n	800739c <_printf_i+0x164>
 8007464:	3501      	adds	r5, #1
 8007466:	68e3      	ldr	r3, [r4, #12]
 8007468:	9903      	ldr	r1, [sp, #12]
 800746a:	1a5b      	subs	r3, r3, r1
 800746c:	42ab      	cmp	r3, r5
 800746e:	dcf2      	bgt.n	8007456 <_printf_i+0x21e>
 8007470:	e7eb      	b.n	800744a <_printf_i+0x212>
 8007472:	2500      	movs	r5, #0
 8007474:	f104 0619 	add.w	r6, r4, #25
 8007478:	e7f5      	b.n	8007466 <_printf_i+0x22e>
 800747a:	bf00      	nop
 800747c:	08009a0e 	.word	0x08009a0e
 8007480:	08009a1f 	.word	0x08009a1f

08007484 <iprintf>:
 8007484:	b40f      	push	{r0, r1, r2, r3}
 8007486:	4b0a      	ldr	r3, [pc, #40]	; (80074b0 <iprintf+0x2c>)
 8007488:	b513      	push	{r0, r1, r4, lr}
 800748a:	681c      	ldr	r4, [r3, #0]
 800748c:	b124      	cbz	r4, 8007498 <iprintf+0x14>
 800748e:	69a3      	ldr	r3, [r4, #24]
 8007490:	b913      	cbnz	r3, 8007498 <iprintf+0x14>
 8007492:	4620      	mov	r0, r4
 8007494:	f001 f8d8 	bl	8008648 <__sinit>
 8007498:	ab05      	add	r3, sp, #20
 800749a:	9a04      	ldr	r2, [sp, #16]
 800749c:	68a1      	ldr	r1, [r4, #8]
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	4620      	mov	r0, r4
 80074a2:	f001 fe95 	bl	80091d0 <_vfiprintf_r>
 80074a6:	b002      	add	sp, #8
 80074a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ac:	b004      	add	sp, #16
 80074ae:	4770      	bx	lr
 80074b0:	2000000c 	.word	0x2000000c

080074b4 <_puts_r>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	460e      	mov	r6, r1
 80074b8:	4605      	mov	r5, r0
 80074ba:	b118      	cbz	r0, 80074c4 <_puts_r+0x10>
 80074bc:	6983      	ldr	r3, [r0, #24]
 80074be:	b90b      	cbnz	r3, 80074c4 <_puts_r+0x10>
 80074c0:	f001 f8c2 	bl	8008648 <__sinit>
 80074c4:	69ab      	ldr	r3, [r5, #24]
 80074c6:	68ac      	ldr	r4, [r5, #8]
 80074c8:	b913      	cbnz	r3, 80074d0 <_puts_r+0x1c>
 80074ca:	4628      	mov	r0, r5
 80074cc:	f001 f8bc 	bl	8008648 <__sinit>
 80074d0:	4b2c      	ldr	r3, [pc, #176]	; (8007584 <_puts_r+0xd0>)
 80074d2:	429c      	cmp	r4, r3
 80074d4:	d120      	bne.n	8007518 <_puts_r+0x64>
 80074d6:	686c      	ldr	r4, [r5, #4]
 80074d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074da:	07db      	lsls	r3, r3, #31
 80074dc:	d405      	bmi.n	80074ea <_puts_r+0x36>
 80074de:	89a3      	ldrh	r3, [r4, #12]
 80074e0:	0598      	lsls	r0, r3, #22
 80074e2:	d402      	bmi.n	80074ea <_puts_r+0x36>
 80074e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074e6:	f001 f952 	bl	800878e <__retarget_lock_acquire_recursive>
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	0719      	lsls	r1, r3, #28
 80074ee:	d51d      	bpl.n	800752c <_puts_r+0x78>
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	b1db      	cbz	r3, 800752c <_puts_r+0x78>
 80074f4:	3e01      	subs	r6, #1
 80074f6:	68a3      	ldr	r3, [r4, #8]
 80074f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074fc:	3b01      	subs	r3, #1
 80074fe:	60a3      	str	r3, [r4, #8]
 8007500:	bb39      	cbnz	r1, 8007552 <_puts_r+0x9e>
 8007502:	2b00      	cmp	r3, #0
 8007504:	da38      	bge.n	8007578 <_puts_r+0xc4>
 8007506:	4622      	mov	r2, r4
 8007508:	210a      	movs	r1, #10
 800750a:	4628      	mov	r0, r5
 800750c:	f000 f848 	bl	80075a0 <__swbuf_r>
 8007510:	3001      	adds	r0, #1
 8007512:	d011      	beq.n	8007538 <_puts_r+0x84>
 8007514:	250a      	movs	r5, #10
 8007516:	e011      	b.n	800753c <_puts_r+0x88>
 8007518:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <_puts_r+0xd4>)
 800751a:	429c      	cmp	r4, r3
 800751c:	d101      	bne.n	8007522 <_puts_r+0x6e>
 800751e:	68ac      	ldr	r4, [r5, #8]
 8007520:	e7da      	b.n	80074d8 <_puts_r+0x24>
 8007522:	4b1a      	ldr	r3, [pc, #104]	; (800758c <_puts_r+0xd8>)
 8007524:	429c      	cmp	r4, r3
 8007526:	bf08      	it	eq
 8007528:	68ec      	ldreq	r4, [r5, #12]
 800752a:	e7d5      	b.n	80074d8 <_puts_r+0x24>
 800752c:	4621      	mov	r1, r4
 800752e:	4628      	mov	r0, r5
 8007530:	f000 f888 	bl	8007644 <__swsetup_r>
 8007534:	2800      	cmp	r0, #0
 8007536:	d0dd      	beq.n	80074f4 <_puts_r+0x40>
 8007538:	f04f 35ff 	mov.w	r5, #4294967295
 800753c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800753e:	07da      	lsls	r2, r3, #31
 8007540:	d405      	bmi.n	800754e <_puts_r+0x9a>
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	059b      	lsls	r3, r3, #22
 8007546:	d402      	bmi.n	800754e <_puts_r+0x9a>
 8007548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800754a:	f001 f921 	bl	8008790 <__retarget_lock_release_recursive>
 800754e:	4628      	mov	r0, r5
 8007550:	bd70      	pop	{r4, r5, r6, pc}
 8007552:	2b00      	cmp	r3, #0
 8007554:	da04      	bge.n	8007560 <_puts_r+0xac>
 8007556:	69a2      	ldr	r2, [r4, #24]
 8007558:	429a      	cmp	r2, r3
 800755a:	dc06      	bgt.n	800756a <_puts_r+0xb6>
 800755c:	290a      	cmp	r1, #10
 800755e:	d004      	beq.n	800756a <_puts_r+0xb6>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	6022      	str	r2, [r4, #0]
 8007566:	7019      	strb	r1, [r3, #0]
 8007568:	e7c5      	b.n	80074f6 <_puts_r+0x42>
 800756a:	4622      	mov	r2, r4
 800756c:	4628      	mov	r0, r5
 800756e:	f000 f817 	bl	80075a0 <__swbuf_r>
 8007572:	3001      	adds	r0, #1
 8007574:	d1bf      	bne.n	80074f6 <_puts_r+0x42>
 8007576:	e7df      	b.n	8007538 <_puts_r+0x84>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	250a      	movs	r5, #10
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	6022      	str	r2, [r4, #0]
 8007580:	701d      	strb	r5, [r3, #0]
 8007582:	e7db      	b.n	800753c <_puts_r+0x88>
 8007584:	08009ae0 	.word	0x08009ae0
 8007588:	08009b00 	.word	0x08009b00
 800758c:	08009ac0 	.word	0x08009ac0

08007590 <puts>:
 8007590:	4b02      	ldr	r3, [pc, #8]	; (800759c <puts+0xc>)
 8007592:	4601      	mov	r1, r0
 8007594:	6818      	ldr	r0, [r3, #0]
 8007596:	f7ff bf8d 	b.w	80074b4 <_puts_r>
 800759a:	bf00      	nop
 800759c:	2000000c 	.word	0x2000000c

080075a0 <__swbuf_r>:
 80075a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a2:	460e      	mov	r6, r1
 80075a4:	4614      	mov	r4, r2
 80075a6:	4605      	mov	r5, r0
 80075a8:	b118      	cbz	r0, 80075b2 <__swbuf_r+0x12>
 80075aa:	6983      	ldr	r3, [r0, #24]
 80075ac:	b90b      	cbnz	r3, 80075b2 <__swbuf_r+0x12>
 80075ae:	f001 f84b 	bl	8008648 <__sinit>
 80075b2:	4b21      	ldr	r3, [pc, #132]	; (8007638 <__swbuf_r+0x98>)
 80075b4:	429c      	cmp	r4, r3
 80075b6:	d12b      	bne.n	8007610 <__swbuf_r+0x70>
 80075b8:	686c      	ldr	r4, [r5, #4]
 80075ba:	69a3      	ldr	r3, [r4, #24]
 80075bc:	60a3      	str	r3, [r4, #8]
 80075be:	89a3      	ldrh	r3, [r4, #12]
 80075c0:	071a      	lsls	r2, r3, #28
 80075c2:	d52f      	bpl.n	8007624 <__swbuf_r+0x84>
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	b36b      	cbz	r3, 8007624 <__swbuf_r+0x84>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	6820      	ldr	r0, [r4, #0]
 80075cc:	1ac0      	subs	r0, r0, r3
 80075ce:	6963      	ldr	r3, [r4, #20]
 80075d0:	b2f6      	uxtb	r6, r6
 80075d2:	4283      	cmp	r3, r0
 80075d4:	4637      	mov	r7, r6
 80075d6:	dc04      	bgt.n	80075e2 <__swbuf_r+0x42>
 80075d8:	4621      	mov	r1, r4
 80075da:	4628      	mov	r0, r5
 80075dc:	f000 ffa0 	bl	8008520 <_fflush_r>
 80075e0:	bb30      	cbnz	r0, 8007630 <__swbuf_r+0x90>
 80075e2:	68a3      	ldr	r3, [r4, #8]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	60a3      	str	r3, [r4, #8]
 80075e8:	6823      	ldr	r3, [r4, #0]
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	6022      	str	r2, [r4, #0]
 80075ee:	701e      	strb	r6, [r3, #0]
 80075f0:	6963      	ldr	r3, [r4, #20]
 80075f2:	3001      	adds	r0, #1
 80075f4:	4283      	cmp	r3, r0
 80075f6:	d004      	beq.n	8007602 <__swbuf_r+0x62>
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	07db      	lsls	r3, r3, #31
 80075fc:	d506      	bpl.n	800760c <__swbuf_r+0x6c>
 80075fe:	2e0a      	cmp	r6, #10
 8007600:	d104      	bne.n	800760c <__swbuf_r+0x6c>
 8007602:	4621      	mov	r1, r4
 8007604:	4628      	mov	r0, r5
 8007606:	f000 ff8b 	bl	8008520 <_fflush_r>
 800760a:	b988      	cbnz	r0, 8007630 <__swbuf_r+0x90>
 800760c:	4638      	mov	r0, r7
 800760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007610:	4b0a      	ldr	r3, [pc, #40]	; (800763c <__swbuf_r+0x9c>)
 8007612:	429c      	cmp	r4, r3
 8007614:	d101      	bne.n	800761a <__swbuf_r+0x7a>
 8007616:	68ac      	ldr	r4, [r5, #8]
 8007618:	e7cf      	b.n	80075ba <__swbuf_r+0x1a>
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <__swbuf_r+0xa0>)
 800761c:	429c      	cmp	r4, r3
 800761e:	bf08      	it	eq
 8007620:	68ec      	ldreq	r4, [r5, #12]
 8007622:	e7ca      	b.n	80075ba <__swbuf_r+0x1a>
 8007624:	4621      	mov	r1, r4
 8007626:	4628      	mov	r0, r5
 8007628:	f000 f80c 	bl	8007644 <__swsetup_r>
 800762c:	2800      	cmp	r0, #0
 800762e:	d0cb      	beq.n	80075c8 <__swbuf_r+0x28>
 8007630:	f04f 37ff 	mov.w	r7, #4294967295
 8007634:	e7ea      	b.n	800760c <__swbuf_r+0x6c>
 8007636:	bf00      	nop
 8007638:	08009ae0 	.word	0x08009ae0
 800763c:	08009b00 	.word	0x08009b00
 8007640:	08009ac0 	.word	0x08009ac0

08007644 <__swsetup_r>:
 8007644:	4b32      	ldr	r3, [pc, #200]	; (8007710 <__swsetup_r+0xcc>)
 8007646:	b570      	push	{r4, r5, r6, lr}
 8007648:	681d      	ldr	r5, [r3, #0]
 800764a:	4606      	mov	r6, r0
 800764c:	460c      	mov	r4, r1
 800764e:	b125      	cbz	r5, 800765a <__swsetup_r+0x16>
 8007650:	69ab      	ldr	r3, [r5, #24]
 8007652:	b913      	cbnz	r3, 800765a <__swsetup_r+0x16>
 8007654:	4628      	mov	r0, r5
 8007656:	f000 fff7 	bl	8008648 <__sinit>
 800765a:	4b2e      	ldr	r3, [pc, #184]	; (8007714 <__swsetup_r+0xd0>)
 800765c:	429c      	cmp	r4, r3
 800765e:	d10f      	bne.n	8007680 <__swsetup_r+0x3c>
 8007660:	686c      	ldr	r4, [r5, #4]
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007668:	0719      	lsls	r1, r3, #28
 800766a:	d42c      	bmi.n	80076c6 <__swsetup_r+0x82>
 800766c:	06dd      	lsls	r5, r3, #27
 800766e:	d411      	bmi.n	8007694 <__swsetup_r+0x50>
 8007670:	2309      	movs	r3, #9
 8007672:	6033      	str	r3, [r6, #0]
 8007674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	e03e      	b.n	80076fe <__swsetup_r+0xba>
 8007680:	4b25      	ldr	r3, [pc, #148]	; (8007718 <__swsetup_r+0xd4>)
 8007682:	429c      	cmp	r4, r3
 8007684:	d101      	bne.n	800768a <__swsetup_r+0x46>
 8007686:	68ac      	ldr	r4, [r5, #8]
 8007688:	e7eb      	b.n	8007662 <__swsetup_r+0x1e>
 800768a:	4b24      	ldr	r3, [pc, #144]	; (800771c <__swsetup_r+0xd8>)
 800768c:	429c      	cmp	r4, r3
 800768e:	bf08      	it	eq
 8007690:	68ec      	ldreq	r4, [r5, #12]
 8007692:	e7e6      	b.n	8007662 <__swsetup_r+0x1e>
 8007694:	0758      	lsls	r0, r3, #29
 8007696:	d512      	bpl.n	80076be <__swsetup_r+0x7a>
 8007698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800769a:	b141      	cbz	r1, 80076ae <__swsetup_r+0x6a>
 800769c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076a0:	4299      	cmp	r1, r3
 80076a2:	d002      	beq.n	80076aa <__swsetup_r+0x66>
 80076a4:	4630      	mov	r0, r6
 80076a6:	f001 fc89 	bl	8008fbc <_free_r>
 80076aa:	2300      	movs	r3, #0
 80076ac:	6363      	str	r3, [r4, #52]	; 0x34
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	2300      	movs	r3, #0
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	6923      	ldr	r3, [r4, #16]
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	f043 0308 	orr.w	r3, r3, #8
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	b94b      	cbnz	r3, 80076de <__swsetup_r+0x9a>
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d4:	d003      	beq.n	80076de <__swsetup_r+0x9a>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4630      	mov	r0, r6
 80076da:	f001 f87f 	bl	80087dc <__smakebuf_r>
 80076de:	89a0      	ldrh	r0, [r4, #12]
 80076e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076e4:	f010 0301 	ands.w	r3, r0, #1
 80076e8:	d00a      	beq.n	8007700 <__swsetup_r+0xbc>
 80076ea:	2300      	movs	r3, #0
 80076ec:	60a3      	str	r3, [r4, #8]
 80076ee:	6963      	ldr	r3, [r4, #20]
 80076f0:	425b      	negs	r3, r3
 80076f2:	61a3      	str	r3, [r4, #24]
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	b943      	cbnz	r3, 800770a <__swsetup_r+0xc6>
 80076f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076fc:	d1ba      	bne.n	8007674 <__swsetup_r+0x30>
 80076fe:	bd70      	pop	{r4, r5, r6, pc}
 8007700:	0781      	lsls	r1, r0, #30
 8007702:	bf58      	it	pl
 8007704:	6963      	ldrpl	r3, [r4, #20]
 8007706:	60a3      	str	r3, [r4, #8]
 8007708:	e7f4      	b.n	80076f4 <__swsetup_r+0xb0>
 800770a:	2000      	movs	r0, #0
 800770c:	e7f7      	b.n	80076fe <__swsetup_r+0xba>
 800770e:	bf00      	nop
 8007710:	2000000c 	.word	0x2000000c
 8007714:	08009ae0 	.word	0x08009ae0
 8007718:	08009b00 	.word	0x08009b00
 800771c:	08009ac0 	.word	0x08009ac0

08007720 <quorem>:
 8007720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	6903      	ldr	r3, [r0, #16]
 8007726:	690c      	ldr	r4, [r1, #16]
 8007728:	42a3      	cmp	r3, r4
 800772a:	4607      	mov	r7, r0
 800772c:	f2c0 8081 	blt.w	8007832 <quorem+0x112>
 8007730:	3c01      	subs	r4, #1
 8007732:	f101 0814 	add.w	r8, r1, #20
 8007736:	f100 0514 	add.w	r5, r0, #20
 800773a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007748:	3301      	adds	r3, #1
 800774a:	429a      	cmp	r2, r3
 800774c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007754:	fbb2 f6f3 	udiv	r6, r2, r3
 8007758:	d331      	bcc.n	80077be <quorem+0x9e>
 800775a:	f04f 0e00 	mov.w	lr, #0
 800775e:	4640      	mov	r0, r8
 8007760:	46ac      	mov	ip, r5
 8007762:	46f2      	mov	sl, lr
 8007764:	f850 2b04 	ldr.w	r2, [r0], #4
 8007768:	b293      	uxth	r3, r2
 800776a:	fb06 e303 	mla	r3, r6, r3, lr
 800776e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007772:	b29b      	uxth	r3, r3
 8007774:	ebaa 0303 	sub.w	r3, sl, r3
 8007778:	f8dc a000 	ldr.w	sl, [ip]
 800777c:	0c12      	lsrs	r2, r2, #16
 800777e:	fa13 f38a 	uxtah	r3, r3, sl
 8007782:	fb06 e202 	mla	r2, r6, r2, lr
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	9b00      	ldr	r3, [sp, #0]
 800778a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800778e:	b292      	uxth	r2, r2
 8007790:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007798:	f8bd 3000 	ldrh.w	r3, [sp]
 800779c:	4581      	cmp	r9, r0
 800779e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077a2:	f84c 3b04 	str.w	r3, [ip], #4
 80077a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80077aa:	d2db      	bcs.n	8007764 <quorem+0x44>
 80077ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80077b0:	b92b      	cbnz	r3, 80077be <quorem+0x9e>
 80077b2:	9b01      	ldr	r3, [sp, #4]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	429d      	cmp	r5, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	d32e      	bcc.n	800781a <quorem+0xfa>
 80077bc:	613c      	str	r4, [r7, #16]
 80077be:	4638      	mov	r0, r7
 80077c0:	f001 fae4 	bl	8008d8c <__mcmp>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	db24      	blt.n	8007812 <quorem+0xf2>
 80077c8:	3601      	adds	r6, #1
 80077ca:	4628      	mov	r0, r5
 80077cc:	f04f 0c00 	mov.w	ip, #0
 80077d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80077d4:	f8d0 e000 	ldr.w	lr, [r0]
 80077d8:	b293      	uxth	r3, r2
 80077da:	ebac 0303 	sub.w	r3, ip, r3
 80077de:	0c12      	lsrs	r2, r2, #16
 80077e0:	fa13 f38e 	uxtah	r3, r3, lr
 80077e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077f2:	45c1      	cmp	r9, r8
 80077f4:	f840 3b04 	str.w	r3, [r0], #4
 80077f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077fc:	d2e8      	bcs.n	80077d0 <quorem+0xb0>
 80077fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007806:	b922      	cbnz	r2, 8007812 <quorem+0xf2>
 8007808:	3b04      	subs	r3, #4
 800780a:	429d      	cmp	r5, r3
 800780c:	461a      	mov	r2, r3
 800780e:	d30a      	bcc.n	8007826 <quorem+0x106>
 8007810:	613c      	str	r4, [r7, #16]
 8007812:	4630      	mov	r0, r6
 8007814:	b003      	add	sp, #12
 8007816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800781a:	6812      	ldr	r2, [r2, #0]
 800781c:	3b04      	subs	r3, #4
 800781e:	2a00      	cmp	r2, #0
 8007820:	d1cc      	bne.n	80077bc <quorem+0x9c>
 8007822:	3c01      	subs	r4, #1
 8007824:	e7c7      	b.n	80077b6 <quorem+0x96>
 8007826:	6812      	ldr	r2, [r2, #0]
 8007828:	3b04      	subs	r3, #4
 800782a:	2a00      	cmp	r2, #0
 800782c:	d1f0      	bne.n	8007810 <quorem+0xf0>
 800782e:	3c01      	subs	r4, #1
 8007830:	e7eb      	b.n	800780a <quorem+0xea>
 8007832:	2000      	movs	r0, #0
 8007834:	e7ee      	b.n	8007814 <quorem+0xf4>
	...

08007838 <_dtoa_r>:
 8007838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	ed2d 8b04 	vpush	{d8-d9}
 8007840:	ec57 6b10 	vmov	r6, r7, d0
 8007844:	b093      	sub	sp, #76	; 0x4c
 8007846:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007848:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800784c:	9106      	str	r1, [sp, #24]
 800784e:	ee10 aa10 	vmov	sl, s0
 8007852:	4604      	mov	r4, r0
 8007854:	9209      	str	r2, [sp, #36]	; 0x24
 8007856:	930c      	str	r3, [sp, #48]	; 0x30
 8007858:	46bb      	mov	fp, r7
 800785a:	b975      	cbnz	r5, 800787a <_dtoa_r+0x42>
 800785c:	2010      	movs	r0, #16
 800785e:	f000 fffd 	bl	800885c <malloc>
 8007862:	4602      	mov	r2, r0
 8007864:	6260      	str	r0, [r4, #36]	; 0x24
 8007866:	b920      	cbnz	r0, 8007872 <_dtoa_r+0x3a>
 8007868:	4ba7      	ldr	r3, [pc, #668]	; (8007b08 <_dtoa_r+0x2d0>)
 800786a:	21ea      	movs	r1, #234	; 0xea
 800786c:	48a7      	ldr	r0, [pc, #668]	; (8007b0c <_dtoa_r+0x2d4>)
 800786e:	f001 fe45 	bl	80094fc <__assert_func>
 8007872:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007876:	6005      	str	r5, [r0, #0]
 8007878:	60c5      	str	r5, [r0, #12]
 800787a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800787c:	6819      	ldr	r1, [r3, #0]
 800787e:	b151      	cbz	r1, 8007896 <_dtoa_r+0x5e>
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	604a      	str	r2, [r1, #4]
 8007884:	2301      	movs	r3, #1
 8007886:	4093      	lsls	r3, r2
 8007888:	608b      	str	r3, [r1, #8]
 800788a:	4620      	mov	r0, r4
 800788c:	f001 f83c 	bl	8008908 <_Bfree>
 8007890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	1e3b      	subs	r3, r7, #0
 8007898:	bfaa      	itet	ge
 800789a:	2300      	movge	r3, #0
 800789c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80078a0:	f8c8 3000 	strge.w	r3, [r8]
 80078a4:	4b9a      	ldr	r3, [pc, #616]	; (8007b10 <_dtoa_r+0x2d8>)
 80078a6:	bfbc      	itt	lt
 80078a8:	2201      	movlt	r2, #1
 80078aa:	f8c8 2000 	strlt.w	r2, [r8]
 80078ae:	ea33 030b 	bics.w	r3, r3, fp
 80078b2:	d11b      	bne.n	80078ec <_dtoa_r+0xb4>
 80078b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078c0:	4333      	orrs	r3, r6
 80078c2:	f000 8592 	beq.w	80083ea <_dtoa_r+0xbb2>
 80078c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078c8:	b963      	cbnz	r3, 80078e4 <_dtoa_r+0xac>
 80078ca:	4b92      	ldr	r3, [pc, #584]	; (8007b14 <_dtoa_r+0x2dc>)
 80078cc:	e022      	b.n	8007914 <_dtoa_r+0xdc>
 80078ce:	4b92      	ldr	r3, [pc, #584]	; (8007b18 <_dtoa_r+0x2e0>)
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	3308      	adds	r3, #8
 80078d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	9801      	ldr	r0, [sp, #4]
 80078da:	b013      	add	sp, #76	; 0x4c
 80078dc:	ecbd 8b04 	vpop	{d8-d9}
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e4:	4b8b      	ldr	r3, [pc, #556]	; (8007b14 <_dtoa_r+0x2dc>)
 80078e6:	9301      	str	r3, [sp, #4]
 80078e8:	3303      	adds	r3, #3
 80078ea:	e7f3      	b.n	80078d4 <_dtoa_r+0x9c>
 80078ec:	2200      	movs	r2, #0
 80078ee:	2300      	movs	r3, #0
 80078f0:	4650      	mov	r0, sl
 80078f2:	4659      	mov	r1, fp
 80078f4:	f7f9 f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80078f8:	ec4b ab19 	vmov	d9, sl, fp
 80078fc:	4680      	mov	r8, r0
 80078fe:	b158      	cbz	r0, 8007918 <_dtoa_r+0xe0>
 8007900:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007902:	2301      	movs	r3, #1
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 856b 	beq.w	80083e4 <_dtoa_r+0xbac>
 800790e:	4883      	ldr	r0, [pc, #524]	; (8007b1c <_dtoa_r+0x2e4>)
 8007910:	6018      	str	r0, [r3, #0]
 8007912:	1e43      	subs	r3, r0, #1
 8007914:	9301      	str	r3, [sp, #4]
 8007916:	e7df      	b.n	80078d8 <_dtoa_r+0xa0>
 8007918:	ec4b ab10 	vmov	d0, sl, fp
 800791c:	aa10      	add	r2, sp, #64	; 0x40
 800791e:	a911      	add	r1, sp, #68	; 0x44
 8007920:	4620      	mov	r0, r4
 8007922:	f001 fad9 	bl	8008ed8 <__d2b>
 8007926:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800792a:	ee08 0a10 	vmov	s16, r0
 800792e:	2d00      	cmp	r5, #0
 8007930:	f000 8084 	beq.w	8007a3c <_dtoa_r+0x204>
 8007934:	ee19 3a90 	vmov	r3, s19
 8007938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800793c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007940:	4656      	mov	r6, sl
 8007942:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007946:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800794a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800794e:	4b74      	ldr	r3, [pc, #464]	; (8007b20 <_dtoa_r+0x2e8>)
 8007950:	2200      	movs	r2, #0
 8007952:	4630      	mov	r0, r6
 8007954:	4639      	mov	r1, r7
 8007956:	f7f8 fc97 	bl	8000288 <__aeabi_dsub>
 800795a:	a365      	add	r3, pc, #404	; (adr r3, 8007af0 <_dtoa_r+0x2b8>)
 800795c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007960:	f7f8 fe4a 	bl	80005f8 <__aeabi_dmul>
 8007964:	a364      	add	r3, pc, #400	; (adr r3, 8007af8 <_dtoa_r+0x2c0>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7f8 fc8f 	bl	800028c <__adddf3>
 800796e:	4606      	mov	r6, r0
 8007970:	4628      	mov	r0, r5
 8007972:	460f      	mov	r7, r1
 8007974:	f7f8 fdd6 	bl	8000524 <__aeabi_i2d>
 8007978:	a361      	add	r3, pc, #388	; (adr r3, 8007b00 <_dtoa_r+0x2c8>)
 800797a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797e:	f7f8 fe3b 	bl	80005f8 <__aeabi_dmul>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	4630      	mov	r0, r6
 8007988:	4639      	mov	r1, r7
 800798a:	f7f8 fc7f 	bl	800028c <__adddf3>
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	f7f9 f8e1 	bl	8000b58 <__aeabi_d2iz>
 8007996:	2200      	movs	r2, #0
 8007998:	9000      	str	r0, [sp, #0]
 800799a:	2300      	movs	r3, #0
 800799c:	4630      	mov	r0, r6
 800799e:	4639      	mov	r1, r7
 80079a0:	f7f9 f89c 	bl	8000adc <__aeabi_dcmplt>
 80079a4:	b150      	cbz	r0, 80079bc <_dtoa_r+0x184>
 80079a6:	9800      	ldr	r0, [sp, #0]
 80079a8:	f7f8 fdbc 	bl	8000524 <__aeabi_i2d>
 80079ac:	4632      	mov	r2, r6
 80079ae:	463b      	mov	r3, r7
 80079b0:	f7f9 f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 80079b4:	b910      	cbnz	r0, 80079bc <_dtoa_r+0x184>
 80079b6:	9b00      	ldr	r3, [sp, #0]
 80079b8:	3b01      	subs	r3, #1
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	9b00      	ldr	r3, [sp, #0]
 80079be:	2b16      	cmp	r3, #22
 80079c0:	d85a      	bhi.n	8007a78 <_dtoa_r+0x240>
 80079c2:	9a00      	ldr	r2, [sp, #0]
 80079c4:	4b57      	ldr	r3, [pc, #348]	; (8007b24 <_dtoa_r+0x2ec>)
 80079c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	ec51 0b19 	vmov	r0, r1, d9
 80079d2:	f7f9 f883 	bl	8000adc <__aeabi_dcmplt>
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d050      	beq.n	8007a7c <_dtoa_r+0x244>
 80079da:	9b00      	ldr	r3, [sp, #0]
 80079dc:	3b01      	subs	r3, #1
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	2300      	movs	r3, #0
 80079e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80079e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079e6:	1b5d      	subs	r5, r3, r5
 80079e8:	1e6b      	subs	r3, r5, #1
 80079ea:	9305      	str	r3, [sp, #20]
 80079ec:	bf45      	ittet	mi
 80079ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80079f2:	9304      	strmi	r3, [sp, #16]
 80079f4:	2300      	movpl	r3, #0
 80079f6:	2300      	movmi	r3, #0
 80079f8:	bf4c      	ite	mi
 80079fa:	9305      	strmi	r3, [sp, #20]
 80079fc:	9304      	strpl	r3, [sp, #16]
 80079fe:	9b00      	ldr	r3, [sp, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	db3d      	blt.n	8007a80 <_dtoa_r+0x248>
 8007a04:	9b05      	ldr	r3, [sp, #20]
 8007a06:	9a00      	ldr	r2, [sp, #0]
 8007a08:	920a      	str	r2, [sp, #40]	; 0x28
 8007a0a:	4413      	add	r3, r2
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9307      	str	r3, [sp, #28]
 8007a12:	9b06      	ldr	r3, [sp, #24]
 8007a14:	2b09      	cmp	r3, #9
 8007a16:	f200 8089 	bhi.w	8007b2c <_dtoa_r+0x2f4>
 8007a1a:	2b05      	cmp	r3, #5
 8007a1c:	bfc4      	itt	gt
 8007a1e:	3b04      	subgt	r3, #4
 8007a20:	9306      	strgt	r3, [sp, #24]
 8007a22:	9b06      	ldr	r3, [sp, #24]
 8007a24:	f1a3 0302 	sub.w	r3, r3, #2
 8007a28:	bfcc      	ite	gt
 8007a2a:	2500      	movgt	r5, #0
 8007a2c:	2501      	movle	r5, #1
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	f200 8087 	bhi.w	8007b42 <_dtoa_r+0x30a>
 8007a34:	e8df f003 	tbb	[pc, r3]
 8007a38:	59383a2d 	.word	0x59383a2d
 8007a3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a40:	441d      	add	r5, r3
 8007a42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	bfc1      	itttt	gt
 8007a4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a52:	fa0b f303 	lslgt.w	r3, fp, r3
 8007a56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a5a:	bfda      	itte	le
 8007a5c:	f1c3 0320 	rsble	r3, r3, #32
 8007a60:	fa06 f003 	lslle.w	r0, r6, r3
 8007a64:	4318      	orrgt	r0, r3
 8007a66:	f7f8 fd4d 	bl	8000504 <__aeabi_ui2d>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a72:	3d01      	subs	r5, #1
 8007a74:	930e      	str	r3, [sp, #56]	; 0x38
 8007a76:	e76a      	b.n	800794e <_dtoa_r+0x116>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e7b2      	b.n	80079e2 <_dtoa_r+0x1aa>
 8007a7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a7e:	e7b1      	b.n	80079e4 <_dtoa_r+0x1ac>
 8007a80:	9b04      	ldr	r3, [sp, #16]
 8007a82:	9a00      	ldr	r2, [sp, #0]
 8007a84:	1a9b      	subs	r3, r3, r2
 8007a86:	9304      	str	r3, [sp, #16]
 8007a88:	4253      	negs	r3, r2
 8007a8a:	9307      	str	r3, [sp, #28]
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a90:	e7bf      	b.n	8007a12 <_dtoa_r+0x1da>
 8007a92:	2300      	movs	r3, #0
 8007a94:	9308      	str	r3, [sp, #32]
 8007a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	dc55      	bgt.n	8007b48 <_dtoa_r+0x310>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8007aa6:	e00c      	b.n	8007ac2 <_dtoa_r+0x28a>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e7f3      	b.n	8007a94 <_dtoa_r+0x25c>
 8007aac:	2300      	movs	r3, #0
 8007aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ab0:	9308      	str	r3, [sp, #32]
 8007ab2:	9b00      	ldr	r3, [sp, #0]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	9302      	str	r3, [sp, #8]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	9303      	str	r3, [sp, #12]
 8007abe:	bfb8      	it	lt
 8007ac0:	2301      	movlt	r3, #1
 8007ac2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	6042      	str	r2, [r0, #4]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	f102 0614 	add.w	r6, r2, #20
 8007ace:	429e      	cmp	r6, r3
 8007ad0:	6841      	ldr	r1, [r0, #4]
 8007ad2:	d93d      	bls.n	8007b50 <_dtoa_r+0x318>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 fed7 	bl	8008888 <_Balloc>
 8007ada:	9001      	str	r0, [sp, #4]
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d13b      	bne.n	8007b58 <_dtoa_r+0x320>
 8007ae0:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <_dtoa_r+0x2f0>)
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ae8:	e6c0      	b.n	800786c <_dtoa_r+0x34>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e7df      	b.n	8007aae <_dtoa_r+0x276>
 8007aee:	bf00      	nop
 8007af0:	636f4361 	.word	0x636f4361
 8007af4:	3fd287a7 	.word	0x3fd287a7
 8007af8:	8b60c8b3 	.word	0x8b60c8b3
 8007afc:	3fc68a28 	.word	0x3fc68a28
 8007b00:	509f79fb 	.word	0x509f79fb
 8007b04:	3fd34413 	.word	0x3fd34413
 8007b08:	08009a3d 	.word	0x08009a3d
 8007b0c:	08009a54 	.word	0x08009a54
 8007b10:	7ff00000 	.word	0x7ff00000
 8007b14:	08009a39 	.word	0x08009a39
 8007b18:	08009a30 	.word	0x08009a30
 8007b1c:	08009a0d 	.word	0x08009a0d
 8007b20:	3ff80000 	.word	0x3ff80000
 8007b24:	08009ba8 	.word	0x08009ba8
 8007b28:	08009aaf 	.word	0x08009aaf
 8007b2c:	2501      	movs	r5, #1
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9306      	str	r3, [sp, #24]
 8007b32:	9508      	str	r5, [sp, #32]
 8007b34:	f04f 33ff 	mov.w	r3, #4294967295
 8007b38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2312      	movs	r3, #18
 8007b40:	e7b0      	b.n	8007aa4 <_dtoa_r+0x26c>
 8007b42:	2301      	movs	r3, #1
 8007b44:	9308      	str	r3, [sp, #32]
 8007b46:	e7f5      	b.n	8007b34 <_dtoa_r+0x2fc>
 8007b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b4e:	e7b8      	b.n	8007ac2 <_dtoa_r+0x28a>
 8007b50:	3101      	adds	r1, #1
 8007b52:	6041      	str	r1, [r0, #4]
 8007b54:	0052      	lsls	r2, r2, #1
 8007b56:	e7b8      	b.n	8007aca <_dtoa_r+0x292>
 8007b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b5a:	9a01      	ldr	r2, [sp, #4]
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	2b0e      	cmp	r3, #14
 8007b62:	f200 809d 	bhi.w	8007ca0 <_dtoa_r+0x468>
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	f000 809a 	beq.w	8007ca0 <_dtoa_r+0x468>
 8007b6c:	9b00      	ldr	r3, [sp, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	dd32      	ble.n	8007bd8 <_dtoa_r+0x3a0>
 8007b72:	4ab7      	ldr	r2, [pc, #732]	; (8007e50 <_dtoa_r+0x618>)
 8007b74:	f003 030f 	and.w	r3, r3, #15
 8007b78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b80:	9b00      	ldr	r3, [sp, #0]
 8007b82:	05d8      	lsls	r0, r3, #23
 8007b84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007b88:	d516      	bpl.n	8007bb8 <_dtoa_r+0x380>
 8007b8a:	4bb2      	ldr	r3, [pc, #712]	; (8007e54 <_dtoa_r+0x61c>)
 8007b8c:	ec51 0b19 	vmov	r0, r1, d9
 8007b90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b94:	f7f8 fe5a 	bl	800084c <__aeabi_ddiv>
 8007b98:	f007 070f 	and.w	r7, r7, #15
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	468b      	mov	fp, r1
 8007ba0:	2503      	movs	r5, #3
 8007ba2:	4eac      	ldr	r6, [pc, #688]	; (8007e54 <_dtoa_r+0x61c>)
 8007ba4:	b957      	cbnz	r7, 8007bbc <_dtoa_r+0x384>
 8007ba6:	4642      	mov	r2, r8
 8007ba8:	464b      	mov	r3, r9
 8007baa:	4650      	mov	r0, sl
 8007bac:	4659      	mov	r1, fp
 8007bae:	f7f8 fe4d 	bl	800084c <__aeabi_ddiv>
 8007bb2:	4682      	mov	sl, r0
 8007bb4:	468b      	mov	fp, r1
 8007bb6:	e028      	b.n	8007c0a <_dtoa_r+0x3d2>
 8007bb8:	2502      	movs	r5, #2
 8007bba:	e7f2      	b.n	8007ba2 <_dtoa_r+0x36a>
 8007bbc:	07f9      	lsls	r1, r7, #31
 8007bbe:	d508      	bpl.n	8007bd2 <_dtoa_r+0x39a>
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bc8:	f7f8 fd16 	bl	80005f8 <__aeabi_dmul>
 8007bcc:	3501      	adds	r5, #1
 8007bce:	4680      	mov	r8, r0
 8007bd0:	4689      	mov	r9, r1
 8007bd2:	107f      	asrs	r7, r7, #1
 8007bd4:	3608      	adds	r6, #8
 8007bd6:	e7e5      	b.n	8007ba4 <_dtoa_r+0x36c>
 8007bd8:	f000 809b 	beq.w	8007d12 <_dtoa_r+0x4da>
 8007bdc:	9b00      	ldr	r3, [sp, #0]
 8007bde:	4f9d      	ldr	r7, [pc, #628]	; (8007e54 <_dtoa_r+0x61c>)
 8007be0:	425e      	negs	r6, r3
 8007be2:	4b9b      	ldr	r3, [pc, #620]	; (8007e50 <_dtoa_r+0x618>)
 8007be4:	f006 020f 	and.w	r2, r6, #15
 8007be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	ec51 0b19 	vmov	r0, r1, d9
 8007bf4:	f7f8 fd00 	bl	80005f8 <__aeabi_dmul>
 8007bf8:	1136      	asrs	r6, r6, #4
 8007bfa:	4682      	mov	sl, r0
 8007bfc:	468b      	mov	fp, r1
 8007bfe:	2300      	movs	r3, #0
 8007c00:	2502      	movs	r5, #2
 8007c02:	2e00      	cmp	r6, #0
 8007c04:	d17a      	bne.n	8007cfc <_dtoa_r+0x4c4>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1d3      	bne.n	8007bb2 <_dtoa_r+0x37a>
 8007c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 8082 	beq.w	8007d16 <_dtoa_r+0x4de>
 8007c12:	4b91      	ldr	r3, [pc, #580]	; (8007e58 <_dtoa_r+0x620>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	4650      	mov	r0, sl
 8007c18:	4659      	mov	r1, fp
 8007c1a:	f7f8 ff5f 	bl	8000adc <__aeabi_dcmplt>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d079      	beq.n	8007d16 <_dtoa_r+0x4de>
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d076      	beq.n	8007d16 <_dtoa_r+0x4de>
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	dd36      	ble.n	8007c9c <_dtoa_r+0x464>
 8007c2e:	9b00      	ldr	r3, [sp, #0]
 8007c30:	4650      	mov	r0, sl
 8007c32:	4659      	mov	r1, fp
 8007c34:	1e5f      	subs	r7, r3, #1
 8007c36:	2200      	movs	r2, #0
 8007c38:	4b88      	ldr	r3, [pc, #544]	; (8007e5c <_dtoa_r+0x624>)
 8007c3a:	f7f8 fcdd 	bl	80005f8 <__aeabi_dmul>
 8007c3e:	9e02      	ldr	r6, [sp, #8]
 8007c40:	4682      	mov	sl, r0
 8007c42:	468b      	mov	fp, r1
 8007c44:	3501      	adds	r5, #1
 8007c46:	4628      	mov	r0, r5
 8007c48:	f7f8 fc6c 	bl	8000524 <__aeabi_i2d>
 8007c4c:	4652      	mov	r2, sl
 8007c4e:	465b      	mov	r3, fp
 8007c50:	f7f8 fcd2 	bl	80005f8 <__aeabi_dmul>
 8007c54:	4b82      	ldr	r3, [pc, #520]	; (8007e60 <_dtoa_r+0x628>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	f7f8 fb18 	bl	800028c <__adddf3>
 8007c5c:	46d0      	mov	r8, sl
 8007c5e:	46d9      	mov	r9, fp
 8007c60:	4682      	mov	sl, r0
 8007c62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	d158      	bne.n	8007d1c <_dtoa_r+0x4e4>
 8007c6a:	4b7e      	ldr	r3, [pc, #504]	; (8007e64 <_dtoa_r+0x62c>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4640      	mov	r0, r8
 8007c70:	4649      	mov	r1, r9
 8007c72:	f7f8 fb09 	bl	8000288 <__aeabi_dsub>
 8007c76:	4652      	mov	r2, sl
 8007c78:	465b      	mov	r3, fp
 8007c7a:	4680      	mov	r8, r0
 8007c7c:	4689      	mov	r9, r1
 8007c7e:	f7f8 ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	f040 8295 	bne.w	80081b2 <_dtoa_r+0x97a>
 8007c88:	4652      	mov	r2, sl
 8007c8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c8e:	4640      	mov	r0, r8
 8007c90:	4649      	mov	r1, r9
 8007c92:	f7f8 ff23 	bl	8000adc <__aeabi_dcmplt>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f040 8289 	bne.w	80081ae <_dtoa_r+0x976>
 8007c9c:	ec5b ab19 	vmov	sl, fp, d9
 8007ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f2c0 8148 	blt.w	8007f38 <_dtoa_r+0x700>
 8007ca8:	9a00      	ldr	r2, [sp, #0]
 8007caa:	2a0e      	cmp	r2, #14
 8007cac:	f300 8144 	bgt.w	8007f38 <_dtoa_r+0x700>
 8007cb0:	4b67      	ldr	r3, [pc, #412]	; (8007e50 <_dtoa_r+0x618>)
 8007cb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f280 80d5 	bge.w	8007e6c <_dtoa_r+0x634>
 8007cc2:	9b03      	ldr	r3, [sp, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f300 80d1 	bgt.w	8007e6c <_dtoa_r+0x634>
 8007cca:	f040 826f 	bne.w	80081ac <_dtoa_r+0x974>
 8007cce:	4b65      	ldr	r3, [pc, #404]	; (8007e64 <_dtoa_r+0x62c>)
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	4649      	mov	r1, r9
 8007cd6:	f7f8 fc8f 	bl	80005f8 <__aeabi_dmul>
 8007cda:	4652      	mov	r2, sl
 8007cdc:	465b      	mov	r3, fp
 8007cde:	f7f8 ff11 	bl	8000b04 <__aeabi_dcmpge>
 8007ce2:	9e03      	ldr	r6, [sp, #12]
 8007ce4:	4637      	mov	r7, r6
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	f040 8245 	bne.w	8008176 <_dtoa_r+0x93e>
 8007cec:	9d01      	ldr	r5, [sp, #4]
 8007cee:	2331      	movs	r3, #49	; 0x31
 8007cf0:	f805 3b01 	strb.w	r3, [r5], #1
 8007cf4:	9b00      	ldr	r3, [sp, #0]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	e240      	b.n	800817e <_dtoa_r+0x946>
 8007cfc:	07f2      	lsls	r2, r6, #31
 8007cfe:	d505      	bpl.n	8007d0c <_dtoa_r+0x4d4>
 8007d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d04:	f7f8 fc78 	bl	80005f8 <__aeabi_dmul>
 8007d08:	3501      	adds	r5, #1
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	1076      	asrs	r6, r6, #1
 8007d0e:	3708      	adds	r7, #8
 8007d10:	e777      	b.n	8007c02 <_dtoa_r+0x3ca>
 8007d12:	2502      	movs	r5, #2
 8007d14:	e779      	b.n	8007c0a <_dtoa_r+0x3d2>
 8007d16:	9f00      	ldr	r7, [sp, #0]
 8007d18:	9e03      	ldr	r6, [sp, #12]
 8007d1a:	e794      	b.n	8007c46 <_dtoa_r+0x40e>
 8007d1c:	9901      	ldr	r1, [sp, #4]
 8007d1e:	4b4c      	ldr	r3, [pc, #304]	; (8007e50 <_dtoa_r+0x618>)
 8007d20:	4431      	add	r1, r6
 8007d22:	910d      	str	r1, [sp, #52]	; 0x34
 8007d24:	9908      	ldr	r1, [sp, #32]
 8007d26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007d2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	d043      	beq.n	8007dba <_dtoa_r+0x582>
 8007d32:	494d      	ldr	r1, [pc, #308]	; (8007e68 <_dtoa_r+0x630>)
 8007d34:	2000      	movs	r0, #0
 8007d36:	f7f8 fd89 	bl	800084c <__aeabi_ddiv>
 8007d3a:	4652      	mov	r2, sl
 8007d3c:	465b      	mov	r3, fp
 8007d3e:	f7f8 faa3 	bl	8000288 <__aeabi_dsub>
 8007d42:	9d01      	ldr	r5, [sp, #4]
 8007d44:	4682      	mov	sl, r0
 8007d46:	468b      	mov	fp, r1
 8007d48:	4649      	mov	r1, r9
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	f7f8 ff04 	bl	8000b58 <__aeabi_d2iz>
 8007d50:	4606      	mov	r6, r0
 8007d52:	f7f8 fbe7 	bl	8000524 <__aeabi_i2d>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	f7f8 fa93 	bl	8000288 <__aeabi_dsub>
 8007d62:	3630      	adds	r6, #48	; 0x30
 8007d64:	f805 6b01 	strb.w	r6, [r5], #1
 8007d68:	4652      	mov	r2, sl
 8007d6a:	465b      	mov	r3, fp
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	4689      	mov	r9, r1
 8007d70:	f7f8 feb4 	bl	8000adc <__aeabi_dcmplt>
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d163      	bne.n	8007e40 <_dtoa_r+0x608>
 8007d78:	4642      	mov	r2, r8
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	4936      	ldr	r1, [pc, #216]	; (8007e58 <_dtoa_r+0x620>)
 8007d7e:	2000      	movs	r0, #0
 8007d80:	f7f8 fa82 	bl	8000288 <__aeabi_dsub>
 8007d84:	4652      	mov	r2, sl
 8007d86:	465b      	mov	r3, fp
 8007d88:	f7f8 fea8 	bl	8000adc <__aeabi_dcmplt>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	f040 80b5 	bne.w	8007efc <_dtoa_r+0x6c4>
 8007d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d94:	429d      	cmp	r5, r3
 8007d96:	d081      	beq.n	8007c9c <_dtoa_r+0x464>
 8007d98:	4b30      	ldr	r3, [pc, #192]	; (8007e5c <_dtoa_r+0x624>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	4659      	mov	r1, fp
 8007da0:	f7f8 fc2a 	bl	80005f8 <__aeabi_dmul>
 8007da4:	4b2d      	ldr	r3, [pc, #180]	; (8007e5c <_dtoa_r+0x624>)
 8007da6:	4682      	mov	sl, r0
 8007da8:	468b      	mov	fp, r1
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	2200      	movs	r2, #0
 8007db0:	f7f8 fc22 	bl	80005f8 <__aeabi_dmul>
 8007db4:	4680      	mov	r8, r0
 8007db6:	4689      	mov	r9, r1
 8007db8:	e7c6      	b.n	8007d48 <_dtoa_r+0x510>
 8007dba:	4650      	mov	r0, sl
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	f7f8 fc1b 	bl	80005f8 <__aeabi_dmul>
 8007dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc4:	9d01      	ldr	r5, [sp, #4]
 8007dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dc8:	4682      	mov	sl, r0
 8007dca:	468b      	mov	fp, r1
 8007dcc:	4649      	mov	r1, r9
 8007dce:	4640      	mov	r0, r8
 8007dd0:	f7f8 fec2 	bl	8000b58 <__aeabi_d2iz>
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	f7f8 fba5 	bl	8000524 <__aeabi_i2d>
 8007dda:	3630      	adds	r6, #48	; 0x30
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4640      	mov	r0, r8
 8007de2:	4649      	mov	r1, r9
 8007de4:	f7f8 fa50 	bl	8000288 <__aeabi_dsub>
 8007de8:	f805 6b01 	strb.w	r6, [r5], #1
 8007dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dee:	429d      	cmp	r5, r3
 8007df0:	4680      	mov	r8, r0
 8007df2:	4689      	mov	r9, r1
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	d124      	bne.n	8007e44 <_dtoa_r+0x60c>
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <_dtoa_r+0x630>)
 8007dfc:	4650      	mov	r0, sl
 8007dfe:	4659      	mov	r1, fp
 8007e00:	f7f8 fa44 	bl	800028c <__adddf3>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4640      	mov	r0, r8
 8007e0a:	4649      	mov	r1, r9
 8007e0c:	f7f8 fe84 	bl	8000b18 <__aeabi_dcmpgt>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d173      	bne.n	8007efc <_dtoa_r+0x6c4>
 8007e14:	4652      	mov	r2, sl
 8007e16:	465b      	mov	r3, fp
 8007e18:	4913      	ldr	r1, [pc, #76]	; (8007e68 <_dtoa_r+0x630>)
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	f7f8 fa34 	bl	8000288 <__aeabi_dsub>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4640      	mov	r0, r8
 8007e26:	4649      	mov	r1, r9
 8007e28:	f7f8 fe58 	bl	8000adc <__aeabi_dcmplt>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f43f af35 	beq.w	8007c9c <_dtoa_r+0x464>
 8007e32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e34:	1e6b      	subs	r3, r5, #1
 8007e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e3c:	2b30      	cmp	r3, #48	; 0x30
 8007e3e:	d0f8      	beq.n	8007e32 <_dtoa_r+0x5fa>
 8007e40:	9700      	str	r7, [sp, #0]
 8007e42:	e049      	b.n	8007ed8 <_dtoa_r+0x6a0>
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <_dtoa_r+0x624>)
 8007e46:	f7f8 fbd7 	bl	80005f8 <__aeabi_dmul>
 8007e4a:	4680      	mov	r8, r0
 8007e4c:	4689      	mov	r9, r1
 8007e4e:	e7bd      	b.n	8007dcc <_dtoa_r+0x594>
 8007e50:	08009ba8 	.word	0x08009ba8
 8007e54:	08009b80 	.word	0x08009b80
 8007e58:	3ff00000 	.word	0x3ff00000
 8007e5c:	40240000 	.word	0x40240000
 8007e60:	401c0000 	.word	0x401c0000
 8007e64:	40140000 	.word	0x40140000
 8007e68:	3fe00000 	.word	0x3fe00000
 8007e6c:	9d01      	ldr	r5, [sp, #4]
 8007e6e:	4656      	mov	r6, sl
 8007e70:	465f      	mov	r7, fp
 8007e72:	4642      	mov	r2, r8
 8007e74:	464b      	mov	r3, r9
 8007e76:	4630      	mov	r0, r6
 8007e78:	4639      	mov	r1, r7
 8007e7a:	f7f8 fce7 	bl	800084c <__aeabi_ddiv>
 8007e7e:	f7f8 fe6b 	bl	8000b58 <__aeabi_d2iz>
 8007e82:	4682      	mov	sl, r0
 8007e84:	f7f8 fb4e 	bl	8000524 <__aeabi_i2d>
 8007e88:	4642      	mov	r2, r8
 8007e8a:	464b      	mov	r3, r9
 8007e8c:	f7f8 fbb4 	bl	80005f8 <__aeabi_dmul>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4630      	mov	r0, r6
 8007e96:	4639      	mov	r1, r7
 8007e98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007e9c:	f7f8 f9f4 	bl	8000288 <__aeabi_dsub>
 8007ea0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ea4:	9e01      	ldr	r6, [sp, #4]
 8007ea6:	9f03      	ldr	r7, [sp, #12]
 8007ea8:	1bae      	subs	r6, r5, r6
 8007eaa:	42b7      	cmp	r7, r6
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	d135      	bne.n	8007f1e <_dtoa_r+0x6e6>
 8007eb2:	f7f8 f9eb 	bl	800028c <__adddf3>
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	464b      	mov	r3, r9
 8007eba:	4606      	mov	r6, r0
 8007ebc:	460f      	mov	r7, r1
 8007ebe:	f7f8 fe2b 	bl	8000b18 <__aeabi_dcmpgt>
 8007ec2:	b9d0      	cbnz	r0, 8007efa <_dtoa_r+0x6c2>
 8007ec4:	4642      	mov	r2, r8
 8007ec6:	464b      	mov	r3, r9
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4639      	mov	r1, r7
 8007ecc:	f7f8 fdfc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ed0:	b110      	cbz	r0, 8007ed8 <_dtoa_r+0x6a0>
 8007ed2:	f01a 0f01 	tst.w	sl, #1
 8007ed6:	d110      	bne.n	8007efa <_dtoa_r+0x6c2>
 8007ed8:	4620      	mov	r0, r4
 8007eda:	ee18 1a10 	vmov	r1, s16
 8007ede:	f000 fd13 	bl	8008908 <_Bfree>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9800      	ldr	r0, [sp, #0]
 8007ee6:	702b      	strb	r3, [r5, #0]
 8007ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eea:	3001      	adds	r0, #1
 8007eec:	6018      	str	r0, [r3, #0]
 8007eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f43f acf1 	beq.w	80078d8 <_dtoa_r+0xa0>
 8007ef6:	601d      	str	r5, [r3, #0]
 8007ef8:	e4ee      	b.n	80078d8 <_dtoa_r+0xa0>
 8007efa:	9f00      	ldr	r7, [sp, #0]
 8007efc:	462b      	mov	r3, r5
 8007efe:	461d      	mov	r5, r3
 8007f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f04:	2a39      	cmp	r2, #57	; 0x39
 8007f06:	d106      	bne.n	8007f16 <_dtoa_r+0x6de>
 8007f08:	9a01      	ldr	r2, [sp, #4]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d1f7      	bne.n	8007efe <_dtoa_r+0x6c6>
 8007f0e:	9901      	ldr	r1, [sp, #4]
 8007f10:	2230      	movs	r2, #48	; 0x30
 8007f12:	3701      	adds	r7, #1
 8007f14:	700a      	strb	r2, [r1, #0]
 8007f16:	781a      	ldrb	r2, [r3, #0]
 8007f18:	3201      	adds	r2, #1
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	e790      	b.n	8007e40 <_dtoa_r+0x608>
 8007f1e:	4ba6      	ldr	r3, [pc, #664]	; (80081b8 <_dtoa_r+0x980>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7f8 fb69 	bl	80005f8 <__aeabi_dmul>
 8007f26:	2200      	movs	r2, #0
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	460f      	mov	r7, r1
 8007f2e:	f7f8 fdcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	d09d      	beq.n	8007e72 <_dtoa_r+0x63a>
 8007f36:	e7cf      	b.n	8007ed8 <_dtoa_r+0x6a0>
 8007f38:	9a08      	ldr	r2, [sp, #32]
 8007f3a:	2a00      	cmp	r2, #0
 8007f3c:	f000 80d7 	beq.w	80080ee <_dtoa_r+0x8b6>
 8007f40:	9a06      	ldr	r2, [sp, #24]
 8007f42:	2a01      	cmp	r2, #1
 8007f44:	f300 80ba 	bgt.w	80080bc <_dtoa_r+0x884>
 8007f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f4a:	2a00      	cmp	r2, #0
 8007f4c:	f000 80b2 	beq.w	80080b4 <_dtoa_r+0x87c>
 8007f50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f54:	9e07      	ldr	r6, [sp, #28]
 8007f56:	9d04      	ldr	r5, [sp, #16]
 8007f58:	9a04      	ldr	r2, [sp, #16]
 8007f5a:	441a      	add	r2, r3
 8007f5c:	9204      	str	r2, [sp, #16]
 8007f5e:	9a05      	ldr	r2, [sp, #20]
 8007f60:	2101      	movs	r1, #1
 8007f62:	441a      	add	r2, r3
 8007f64:	4620      	mov	r0, r4
 8007f66:	9205      	str	r2, [sp, #20]
 8007f68:	f000 fd86 	bl	8008a78 <__i2b>
 8007f6c:	4607      	mov	r7, r0
 8007f6e:	2d00      	cmp	r5, #0
 8007f70:	dd0c      	ble.n	8007f8c <_dtoa_r+0x754>
 8007f72:	9b05      	ldr	r3, [sp, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dd09      	ble.n	8007f8c <_dtoa_r+0x754>
 8007f78:	42ab      	cmp	r3, r5
 8007f7a:	9a04      	ldr	r2, [sp, #16]
 8007f7c:	bfa8      	it	ge
 8007f7e:	462b      	movge	r3, r5
 8007f80:	1ad2      	subs	r2, r2, r3
 8007f82:	9204      	str	r2, [sp, #16]
 8007f84:	9a05      	ldr	r2, [sp, #20]
 8007f86:	1aed      	subs	r5, r5, r3
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	9305      	str	r3, [sp, #20]
 8007f8c:	9b07      	ldr	r3, [sp, #28]
 8007f8e:	b31b      	cbz	r3, 8007fd8 <_dtoa_r+0x7a0>
 8007f90:	9b08      	ldr	r3, [sp, #32]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 80af 	beq.w	80080f6 <_dtoa_r+0x8be>
 8007f98:	2e00      	cmp	r6, #0
 8007f9a:	dd13      	ble.n	8007fc4 <_dtoa_r+0x78c>
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	4632      	mov	r2, r6
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fe29 	bl	8008bf8 <__pow5mult>
 8007fa6:	ee18 2a10 	vmov	r2, s16
 8007faa:	4601      	mov	r1, r0
 8007fac:	4607      	mov	r7, r0
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 fd78 	bl	8008aa4 <__multiply>
 8007fb4:	ee18 1a10 	vmov	r1, s16
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fca4 	bl	8008908 <_Bfree>
 8007fc0:	ee08 8a10 	vmov	s16, r8
 8007fc4:	9b07      	ldr	r3, [sp, #28]
 8007fc6:	1b9a      	subs	r2, r3, r6
 8007fc8:	d006      	beq.n	8007fd8 <_dtoa_r+0x7a0>
 8007fca:	ee18 1a10 	vmov	r1, s16
 8007fce:	4620      	mov	r0, r4
 8007fd0:	f000 fe12 	bl	8008bf8 <__pow5mult>
 8007fd4:	ee08 0a10 	vmov	s16, r0
 8007fd8:	2101      	movs	r1, #1
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fd4c 	bl	8008a78 <__i2b>
 8007fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	f340 8088 	ble.w	80080fa <_dtoa_r+0x8c2>
 8007fea:	461a      	mov	r2, r3
 8007fec:	4601      	mov	r1, r0
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 fe02 	bl	8008bf8 <__pow5mult>
 8007ff4:	9b06      	ldr	r3, [sp, #24]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	f340 8081 	ble.w	8008100 <_dtoa_r+0x8c8>
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	6933      	ldr	r3, [r6, #16]
 8008004:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008008:	6918      	ldr	r0, [r3, #16]
 800800a:	f000 fce5 	bl	80089d8 <__hi0bits>
 800800e:	f1c0 0020 	rsb	r0, r0, #32
 8008012:	9b05      	ldr	r3, [sp, #20]
 8008014:	4418      	add	r0, r3
 8008016:	f010 001f 	ands.w	r0, r0, #31
 800801a:	f000 8092 	beq.w	8008142 <_dtoa_r+0x90a>
 800801e:	f1c0 0320 	rsb	r3, r0, #32
 8008022:	2b04      	cmp	r3, #4
 8008024:	f340 808a 	ble.w	800813c <_dtoa_r+0x904>
 8008028:	f1c0 001c 	rsb	r0, r0, #28
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	4403      	add	r3, r0
 8008030:	9304      	str	r3, [sp, #16]
 8008032:	9b05      	ldr	r3, [sp, #20]
 8008034:	4403      	add	r3, r0
 8008036:	4405      	add	r5, r0
 8008038:	9305      	str	r3, [sp, #20]
 800803a:	9b04      	ldr	r3, [sp, #16]
 800803c:	2b00      	cmp	r3, #0
 800803e:	dd07      	ble.n	8008050 <_dtoa_r+0x818>
 8008040:	ee18 1a10 	vmov	r1, s16
 8008044:	461a      	mov	r2, r3
 8008046:	4620      	mov	r0, r4
 8008048:	f000 fe30 	bl	8008cac <__lshift>
 800804c:	ee08 0a10 	vmov	s16, r0
 8008050:	9b05      	ldr	r3, [sp, #20]
 8008052:	2b00      	cmp	r3, #0
 8008054:	dd05      	ble.n	8008062 <_dtoa_r+0x82a>
 8008056:	4631      	mov	r1, r6
 8008058:	461a      	mov	r2, r3
 800805a:	4620      	mov	r0, r4
 800805c:	f000 fe26 	bl	8008cac <__lshift>
 8008060:	4606      	mov	r6, r0
 8008062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d06e      	beq.n	8008146 <_dtoa_r+0x90e>
 8008068:	ee18 0a10 	vmov	r0, s16
 800806c:	4631      	mov	r1, r6
 800806e:	f000 fe8d 	bl	8008d8c <__mcmp>
 8008072:	2800      	cmp	r0, #0
 8008074:	da67      	bge.n	8008146 <_dtoa_r+0x90e>
 8008076:	9b00      	ldr	r3, [sp, #0]
 8008078:	3b01      	subs	r3, #1
 800807a:	ee18 1a10 	vmov	r1, s16
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	220a      	movs	r2, #10
 8008082:	2300      	movs	r3, #0
 8008084:	4620      	mov	r0, r4
 8008086:	f000 fc61 	bl	800894c <__multadd>
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	ee08 0a10 	vmov	s16, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 81b1 	beq.w	80083f8 <_dtoa_r+0xbc0>
 8008096:	2300      	movs	r3, #0
 8008098:	4639      	mov	r1, r7
 800809a:	220a      	movs	r2, #10
 800809c:	4620      	mov	r0, r4
 800809e:	f000 fc55 	bl	800894c <__multadd>
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	4607      	mov	r7, r0
 80080a8:	f300 808e 	bgt.w	80081c8 <_dtoa_r+0x990>
 80080ac:	9b06      	ldr	r3, [sp, #24]
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	dc51      	bgt.n	8008156 <_dtoa_r+0x91e>
 80080b2:	e089      	b.n	80081c8 <_dtoa_r+0x990>
 80080b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080ba:	e74b      	b.n	8007f54 <_dtoa_r+0x71c>
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	1e5e      	subs	r6, r3, #1
 80080c0:	9b07      	ldr	r3, [sp, #28]
 80080c2:	42b3      	cmp	r3, r6
 80080c4:	bfbf      	itttt	lt
 80080c6:	9b07      	ldrlt	r3, [sp, #28]
 80080c8:	9607      	strlt	r6, [sp, #28]
 80080ca:	1af2      	sublt	r2, r6, r3
 80080cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80080ce:	bfb6      	itet	lt
 80080d0:	189b      	addlt	r3, r3, r2
 80080d2:	1b9e      	subge	r6, r3, r6
 80080d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80080d6:	9b03      	ldr	r3, [sp, #12]
 80080d8:	bfb8      	it	lt
 80080da:	2600      	movlt	r6, #0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bfb7      	itett	lt
 80080e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80080e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80080e8:	1a9d      	sublt	r5, r3, r2
 80080ea:	2300      	movlt	r3, #0
 80080ec:	e734      	b.n	8007f58 <_dtoa_r+0x720>
 80080ee:	9e07      	ldr	r6, [sp, #28]
 80080f0:	9d04      	ldr	r5, [sp, #16]
 80080f2:	9f08      	ldr	r7, [sp, #32]
 80080f4:	e73b      	b.n	8007f6e <_dtoa_r+0x736>
 80080f6:	9a07      	ldr	r2, [sp, #28]
 80080f8:	e767      	b.n	8007fca <_dtoa_r+0x792>
 80080fa:	9b06      	ldr	r3, [sp, #24]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	dc18      	bgt.n	8008132 <_dtoa_r+0x8fa>
 8008100:	f1ba 0f00 	cmp.w	sl, #0
 8008104:	d115      	bne.n	8008132 <_dtoa_r+0x8fa>
 8008106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800810a:	b993      	cbnz	r3, 8008132 <_dtoa_r+0x8fa>
 800810c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008110:	0d1b      	lsrs	r3, r3, #20
 8008112:	051b      	lsls	r3, r3, #20
 8008114:	b183      	cbz	r3, 8008138 <_dtoa_r+0x900>
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	3301      	adds	r3, #1
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	9b05      	ldr	r3, [sp, #20]
 800811e:	3301      	adds	r3, #1
 8008120:	9305      	str	r3, [sp, #20]
 8008122:	f04f 0801 	mov.w	r8, #1
 8008126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008128:	2b00      	cmp	r3, #0
 800812a:	f47f af6a 	bne.w	8008002 <_dtoa_r+0x7ca>
 800812e:	2001      	movs	r0, #1
 8008130:	e76f      	b.n	8008012 <_dtoa_r+0x7da>
 8008132:	f04f 0800 	mov.w	r8, #0
 8008136:	e7f6      	b.n	8008126 <_dtoa_r+0x8ee>
 8008138:	4698      	mov	r8, r3
 800813a:	e7f4      	b.n	8008126 <_dtoa_r+0x8ee>
 800813c:	f43f af7d 	beq.w	800803a <_dtoa_r+0x802>
 8008140:	4618      	mov	r0, r3
 8008142:	301c      	adds	r0, #28
 8008144:	e772      	b.n	800802c <_dtoa_r+0x7f4>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	dc37      	bgt.n	80081bc <_dtoa_r+0x984>
 800814c:	9b06      	ldr	r3, [sp, #24]
 800814e:	2b02      	cmp	r3, #2
 8008150:	dd34      	ble.n	80081bc <_dtoa_r+0x984>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	9302      	str	r3, [sp, #8]
 8008156:	9b02      	ldr	r3, [sp, #8]
 8008158:	b96b      	cbnz	r3, 8008176 <_dtoa_r+0x93e>
 800815a:	4631      	mov	r1, r6
 800815c:	2205      	movs	r2, #5
 800815e:	4620      	mov	r0, r4
 8008160:	f000 fbf4 	bl	800894c <__multadd>
 8008164:	4601      	mov	r1, r0
 8008166:	4606      	mov	r6, r0
 8008168:	ee18 0a10 	vmov	r0, s16
 800816c:	f000 fe0e 	bl	8008d8c <__mcmp>
 8008170:	2800      	cmp	r0, #0
 8008172:	f73f adbb 	bgt.w	8007cec <_dtoa_r+0x4b4>
 8008176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008178:	9d01      	ldr	r5, [sp, #4]
 800817a:	43db      	mvns	r3, r3
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	f04f 0800 	mov.w	r8, #0
 8008182:	4631      	mov	r1, r6
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fbbf 	bl	8008908 <_Bfree>
 800818a:	2f00      	cmp	r7, #0
 800818c:	f43f aea4 	beq.w	8007ed8 <_dtoa_r+0x6a0>
 8008190:	f1b8 0f00 	cmp.w	r8, #0
 8008194:	d005      	beq.n	80081a2 <_dtoa_r+0x96a>
 8008196:	45b8      	cmp	r8, r7
 8008198:	d003      	beq.n	80081a2 <_dtoa_r+0x96a>
 800819a:	4641      	mov	r1, r8
 800819c:	4620      	mov	r0, r4
 800819e:	f000 fbb3 	bl	8008908 <_Bfree>
 80081a2:	4639      	mov	r1, r7
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 fbaf 	bl	8008908 <_Bfree>
 80081aa:	e695      	b.n	8007ed8 <_dtoa_r+0x6a0>
 80081ac:	2600      	movs	r6, #0
 80081ae:	4637      	mov	r7, r6
 80081b0:	e7e1      	b.n	8008176 <_dtoa_r+0x93e>
 80081b2:	9700      	str	r7, [sp, #0]
 80081b4:	4637      	mov	r7, r6
 80081b6:	e599      	b.n	8007cec <_dtoa_r+0x4b4>
 80081b8:	40240000 	.word	0x40240000
 80081bc:	9b08      	ldr	r3, [sp, #32]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 80ca 	beq.w	8008358 <_dtoa_r+0xb20>
 80081c4:	9b03      	ldr	r3, [sp, #12]
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	dd05      	ble.n	80081d8 <_dtoa_r+0x9a0>
 80081cc:	4639      	mov	r1, r7
 80081ce:	462a      	mov	r2, r5
 80081d0:	4620      	mov	r0, r4
 80081d2:	f000 fd6b 	bl	8008cac <__lshift>
 80081d6:	4607      	mov	r7, r0
 80081d8:	f1b8 0f00 	cmp.w	r8, #0
 80081dc:	d05b      	beq.n	8008296 <_dtoa_r+0xa5e>
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	4620      	mov	r0, r4
 80081e2:	f000 fb51 	bl	8008888 <_Balloc>
 80081e6:	4605      	mov	r5, r0
 80081e8:	b928      	cbnz	r0, 80081f6 <_dtoa_r+0x9be>
 80081ea:	4b87      	ldr	r3, [pc, #540]	; (8008408 <_dtoa_r+0xbd0>)
 80081ec:	4602      	mov	r2, r0
 80081ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081f2:	f7ff bb3b 	b.w	800786c <_dtoa_r+0x34>
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	3202      	adds	r2, #2
 80081fa:	0092      	lsls	r2, r2, #2
 80081fc:	f107 010c 	add.w	r1, r7, #12
 8008200:	300c      	adds	r0, #12
 8008202:	f000 fb33 	bl	800886c <memcpy>
 8008206:	2201      	movs	r2, #1
 8008208:	4629      	mov	r1, r5
 800820a:	4620      	mov	r0, r4
 800820c:	f000 fd4e 	bl	8008cac <__lshift>
 8008210:	9b01      	ldr	r3, [sp, #4]
 8008212:	f103 0901 	add.w	r9, r3, #1
 8008216:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800821a:	4413      	add	r3, r2
 800821c:	9305      	str	r3, [sp, #20]
 800821e:	f00a 0301 	and.w	r3, sl, #1
 8008222:	46b8      	mov	r8, r7
 8008224:	9304      	str	r3, [sp, #16]
 8008226:	4607      	mov	r7, r0
 8008228:	4631      	mov	r1, r6
 800822a:	ee18 0a10 	vmov	r0, s16
 800822e:	f7ff fa77 	bl	8007720 <quorem>
 8008232:	4641      	mov	r1, r8
 8008234:	9002      	str	r0, [sp, #8]
 8008236:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800823a:	ee18 0a10 	vmov	r0, s16
 800823e:	f000 fda5 	bl	8008d8c <__mcmp>
 8008242:	463a      	mov	r2, r7
 8008244:	9003      	str	r0, [sp, #12]
 8008246:	4631      	mov	r1, r6
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fdbb 	bl	8008dc4 <__mdiff>
 800824e:	68c2      	ldr	r2, [r0, #12]
 8008250:	f109 3bff 	add.w	fp, r9, #4294967295
 8008254:	4605      	mov	r5, r0
 8008256:	bb02      	cbnz	r2, 800829a <_dtoa_r+0xa62>
 8008258:	4601      	mov	r1, r0
 800825a:	ee18 0a10 	vmov	r0, s16
 800825e:	f000 fd95 	bl	8008d8c <__mcmp>
 8008262:	4602      	mov	r2, r0
 8008264:	4629      	mov	r1, r5
 8008266:	4620      	mov	r0, r4
 8008268:	9207      	str	r2, [sp, #28]
 800826a:	f000 fb4d 	bl	8008908 <_Bfree>
 800826e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008272:	ea43 0102 	orr.w	r1, r3, r2
 8008276:	9b04      	ldr	r3, [sp, #16]
 8008278:	430b      	orrs	r3, r1
 800827a:	464d      	mov	r5, r9
 800827c:	d10f      	bne.n	800829e <_dtoa_r+0xa66>
 800827e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008282:	d02a      	beq.n	80082da <_dtoa_r+0xaa2>
 8008284:	9b03      	ldr	r3, [sp, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	dd02      	ble.n	8008290 <_dtoa_r+0xa58>
 800828a:	9b02      	ldr	r3, [sp, #8]
 800828c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008290:	f88b a000 	strb.w	sl, [fp]
 8008294:	e775      	b.n	8008182 <_dtoa_r+0x94a>
 8008296:	4638      	mov	r0, r7
 8008298:	e7ba      	b.n	8008210 <_dtoa_r+0x9d8>
 800829a:	2201      	movs	r2, #1
 800829c:	e7e2      	b.n	8008264 <_dtoa_r+0xa2c>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	db04      	blt.n	80082ae <_dtoa_r+0xa76>
 80082a4:	9906      	ldr	r1, [sp, #24]
 80082a6:	430b      	orrs	r3, r1
 80082a8:	9904      	ldr	r1, [sp, #16]
 80082aa:	430b      	orrs	r3, r1
 80082ac:	d122      	bne.n	80082f4 <_dtoa_r+0xabc>
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	ddee      	ble.n	8008290 <_dtoa_r+0xa58>
 80082b2:	ee18 1a10 	vmov	r1, s16
 80082b6:	2201      	movs	r2, #1
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 fcf7 	bl	8008cac <__lshift>
 80082be:	4631      	mov	r1, r6
 80082c0:	ee08 0a10 	vmov	s16, r0
 80082c4:	f000 fd62 	bl	8008d8c <__mcmp>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	dc03      	bgt.n	80082d4 <_dtoa_r+0xa9c>
 80082cc:	d1e0      	bne.n	8008290 <_dtoa_r+0xa58>
 80082ce:	f01a 0f01 	tst.w	sl, #1
 80082d2:	d0dd      	beq.n	8008290 <_dtoa_r+0xa58>
 80082d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082d8:	d1d7      	bne.n	800828a <_dtoa_r+0xa52>
 80082da:	2339      	movs	r3, #57	; 0x39
 80082dc:	f88b 3000 	strb.w	r3, [fp]
 80082e0:	462b      	mov	r3, r5
 80082e2:	461d      	mov	r5, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082ea:	2a39      	cmp	r2, #57	; 0x39
 80082ec:	d071      	beq.n	80083d2 <_dtoa_r+0xb9a>
 80082ee:	3201      	adds	r2, #1
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	e746      	b.n	8008182 <_dtoa_r+0x94a>
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	dd07      	ble.n	8008308 <_dtoa_r+0xad0>
 80082f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082fc:	d0ed      	beq.n	80082da <_dtoa_r+0xaa2>
 80082fe:	f10a 0301 	add.w	r3, sl, #1
 8008302:	f88b 3000 	strb.w	r3, [fp]
 8008306:	e73c      	b.n	8008182 <_dtoa_r+0x94a>
 8008308:	9b05      	ldr	r3, [sp, #20]
 800830a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800830e:	4599      	cmp	r9, r3
 8008310:	d047      	beq.n	80083a2 <_dtoa_r+0xb6a>
 8008312:	ee18 1a10 	vmov	r1, s16
 8008316:	2300      	movs	r3, #0
 8008318:	220a      	movs	r2, #10
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fb16 	bl	800894c <__multadd>
 8008320:	45b8      	cmp	r8, r7
 8008322:	ee08 0a10 	vmov	s16, r0
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	f04f 020a 	mov.w	r2, #10
 800832e:	4641      	mov	r1, r8
 8008330:	4620      	mov	r0, r4
 8008332:	d106      	bne.n	8008342 <_dtoa_r+0xb0a>
 8008334:	f000 fb0a 	bl	800894c <__multadd>
 8008338:	4680      	mov	r8, r0
 800833a:	4607      	mov	r7, r0
 800833c:	f109 0901 	add.w	r9, r9, #1
 8008340:	e772      	b.n	8008228 <_dtoa_r+0x9f0>
 8008342:	f000 fb03 	bl	800894c <__multadd>
 8008346:	4639      	mov	r1, r7
 8008348:	4680      	mov	r8, r0
 800834a:	2300      	movs	r3, #0
 800834c:	220a      	movs	r2, #10
 800834e:	4620      	mov	r0, r4
 8008350:	f000 fafc 	bl	800894c <__multadd>
 8008354:	4607      	mov	r7, r0
 8008356:	e7f1      	b.n	800833c <_dtoa_r+0xb04>
 8008358:	9b03      	ldr	r3, [sp, #12]
 800835a:	9302      	str	r3, [sp, #8]
 800835c:	9d01      	ldr	r5, [sp, #4]
 800835e:	ee18 0a10 	vmov	r0, s16
 8008362:	4631      	mov	r1, r6
 8008364:	f7ff f9dc 	bl	8007720 <quorem>
 8008368:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800836c:	9b01      	ldr	r3, [sp, #4]
 800836e:	f805 ab01 	strb.w	sl, [r5], #1
 8008372:	1aea      	subs	r2, r5, r3
 8008374:	9b02      	ldr	r3, [sp, #8]
 8008376:	4293      	cmp	r3, r2
 8008378:	dd09      	ble.n	800838e <_dtoa_r+0xb56>
 800837a:	ee18 1a10 	vmov	r1, s16
 800837e:	2300      	movs	r3, #0
 8008380:	220a      	movs	r2, #10
 8008382:	4620      	mov	r0, r4
 8008384:	f000 fae2 	bl	800894c <__multadd>
 8008388:	ee08 0a10 	vmov	s16, r0
 800838c:	e7e7      	b.n	800835e <_dtoa_r+0xb26>
 800838e:	9b02      	ldr	r3, [sp, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	bfc8      	it	gt
 8008394:	461d      	movgt	r5, r3
 8008396:	9b01      	ldr	r3, [sp, #4]
 8008398:	bfd8      	it	le
 800839a:	2501      	movle	r5, #1
 800839c:	441d      	add	r5, r3
 800839e:	f04f 0800 	mov.w	r8, #0
 80083a2:	ee18 1a10 	vmov	r1, s16
 80083a6:	2201      	movs	r2, #1
 80083a8:	4620      	mov	r0, r4
 80083aa:	f000 fc7f 	bl	8008cac <__lshift>
 80083ae:	4631      	mov	r1, r6
 80083b0:	ee08 0a10 	vmov	s16, r0
 80083b4:	f000 fcea 	bl	8008d8c <__mcmp>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	dc91      	bgt.n	80082e0 <_dtoa_r+0xaa8>
 80083bc:	d102      	bne.n	80083c4 <_dtoa_r+0xb8c>
 80083be:	f01a 0f01 	tst.w	sl, #1
 80083c2:	d18d      	bne.n	80082e0 <_dtoa_r+0xaa8>
 80083c4:	462b      	mov	r3, r5
 80083c6:	461d      	mov	r5, r3
 80083c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083cc:	2a30      	cmp	r2, #48	; 0x30
 80083ce:	d0fa      	beq.n	80083c6 <_dtoa_r+0xb8e>
 80083d0:	e6d7      	b.n	8008182 <_dtoa_r+0x94a>
 80083d2:	9a01      	ldr	r2, [sp, #4]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d184      	bne.n	80082e2 <_dtoa_r+0xaaa>
 80083d8:	9b00      	ldr	r3, [sp, #0]
 80083da:	3301      	adds	r3, #1
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	2331      	movs	r3, #49	; 0x31
 80083e0:	7013      	strb	r3, [r2, #0]
 80083e2:	e6ce      	b.n	8008182 <_dtoa_r+0x94a>
 80083e4:	4b09      	ldr	r3, [pc, #36]	; (800840c <_dtoa_r+0xbd4>)
 80083e6:	f7ff ba95 	b.w	8007914 <_dtoa_r+0xdc>
 80083ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f47f aa6e 	bne.w	80078ce <_dtoa_r+0x96>
 80083f2:	4b07      	ldr	r3, [pc, #28]	; (8008410 <_dtoa_r+0xbd8>)
 80083f4:	f7ff ba8e 	b.w	8007914 <_dtoa_r+0xdc>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	dcae      	bgt.n	800835c <_dtoa_r+0xb24>
 80083fe:	9b06      	ldr	r3, [sp, #24]
 8008400:	2b02      	cmp	r3, #2
 8008402:	f73f aea8 	bgt.w	8008156 <_dtoa_r+0x91e>
 8008406:	e7a9      	b.n	800835c <_dtoa_r+0xb24>
 8008408:	08009aaf 	.word	0x08009aaf
 800840c:	08009a0c 	.word	0x08009a0c
 8008410:	08009a30 	.word	0x08009a30

08008414 <__sflush_r>:
 8008414:	898a      	ldrh	r2, [r1, #12]
 8008416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800841a:	4605      	mov	r5, r0
 800841c:	0710      	lsls	r0, r2, #28
 800841e:	460c      	mov	r4, r1
 8008420:	d458      	bmi.n	80084d4 <__sflush_r+0xc0>
 8008422:	684b      	ldr	r3, [r1, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	dc05      	bgt.n	8008434 <__sflush_r+0x20>
 8008428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800842a:	2b00      	cmp	r3, #0
 800842c:	dc02      	bgt.n	8008434 <__sflush_r+0x20>
 800842e:	2000      	movs	r0, #0
 8008430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008436:	2e00      	cmp	r6, #0
 8008438:	d0f9      	beq.n	800842e <__sflush_r+0x1a>
 800843a:	2300      	movs	r3, #0
 800843c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008440:	682f      	ldr	r7, [r5, #0]
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	d032      	beq.n	80084ac <__sflush_r+0x98>
 8008446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	075a      	lsls	r2, r3, #29
 800844c:	d505      	bpl.n	800845a <__sflush_r+0x46>
 800844e:	6863      	ldr	r3, [r4, #4]
 8008450:	1ac0      	subs	r0, r0, r3
 8008452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008454:	b10b      	cbz	r3, 800845a <__sflush_r+0x46>
 8008456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008458:	1ac0      	subs	r0, r0, r3
 800845a:	2300      	movs	r3, #0
 800845c:	4602      	mov	r2, r0
 800845e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008460:	6a21      	ldr	r1, [r4, #32]
 8008462:	4628      	mov	r0, r5
 8008464:	47b0      	blx	r6
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	89a3      	ldrh	r3, [r4, #12]
 800846a:	d106      	bne.n	800847a <__sflush_r+0x66>
 800846c:	6829      	ldr	r1, [r5, #0]
 800846e:	291d      	cmp	r1, #29
 8008470:	d82c      	bhi.n	80084cc <__sflush_r+0xb8>
 8008472:	4a2a      	ldr	r2, [pc, #168]	; (800851c <__sflush_r+0x108>)
 8008474:	40ca      	lsrs	r2, r1
 8008476:	07d6      	lsls	r6, r2, #31
 8008478:	d528      	bpl.n	80084cc <__sflush_r+0xb8>
 800847a:	2200      	movs	r2, #0
 800847c:	6062      	str	r2, [r4, #4]
 800847e:	04d9      	lsls	r1, r3, #19
 8008480:	6922      	ldr	r2, [r4, #16]
 8008482:	6022      	str	r2, [r4, #0]
 8008484:	d504      	bpl.n	8008490 <__sflush_r+0x7c>
 8008486:	1c42      	adds	r2, r0, #1
 8008488:	d101      	bne.n	800848e <__sflush_r+0x7a>
 800848a:	682b      	ldr	r3, [r5, #0]
 800848c:	b903      	cbnz	r3, 8008490 <__sflush_r+0x7c>
 800848e:	6560      	str	r0, [r4, #84]	; 0x54
 8008490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008492:	602f      	str	r7, [r5, #0]
 8008494:	2900      	cmp	r1, #0
 8008496:	d0ca      	beq.n	800842e <__sflush_r+0x1a>
 8008498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800849c:	4299      	cmp	r1, r3
 800849e:	d002      	beq.n	80084a6 <__sflush_r+0x92>
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 fd8b 	bl	8008fbc <_free_r>
 80084a6:	2000      	movs	r0, #0
 80084a8:	6360      	str	r0, [r4, #52]	; 0x34
 80084aa:	e7c1      	b.n	8008430 <__sflush_r+0x1c>
 80084ac:	6a21      	ldr	r1, [r4, #32]
 80084ae:	2301      	movs	r3, #1
 80084b0:	4628      	mov	r0, r5
 80084b2:	47b0      	blx	r6
 80084b4:	1c41      	adds	r1, r0, #1
 80084b6:	d1c7      	bne.n	8008448 <__sflush_r+0x34>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0c4      	beq.n	8008448 <__sflush_r+0x34>
 80084be:	2b1d      	cmp	r3, #29
 80084c0:	d001      	beq.n	80084c6 <__sflush_r+0xb2>
 80084c2:	2b16      	cmp	r3, #22
 80084c4:	d101      	bne.n	80084ca <__sflush_r+0xb6>
 80084c6:	602f      	str	r7, [r5, #0]
 80084c8:	e7b1      	b.n	800842e <__sflush_r+0x1a>
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084d0:	81a3      	strh	r3, [r4, #12]
 80084d2:	e7ad      	b.n	8008430 <__sflush_r+0x1c>
 80084d4:	690f      	ldr	r7, [r1, #16]
 80084d6:	2f00      	cmp	r7, #0
 80084d8:	d0a9      	beq.n	800842e <__sflush_r+0x1a>
 80084da:	0793      	lsls	r3, r2, #30
 80084dc:	680e      	ldr	r6, [r1, #0]
 80084de:	bf08      	it	eq
 80084e0:	694b      	ldreq	r3, [r1, #20]
 80084e2:	600f      	str	r7, [r1, #0]
 80084e4:	bf18      	it	ne
 80084e6:	2300      	movne	r3, #0
 80084e8:	eba6 0807 	sub.w	r8, r6, r7
 80084ec:	608b      	str	r3, [r1, #8]
 80084ee:	f1b8 0f00 	cmp.w	r8, #0
 80084f2:	dd9c      	ble.n	800842e <__sflush_r+0x1a>
 80084f4:	6a21      	ldr	r1, [r4, #32]
 80084f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084f8:	4643      	mov	r3, r8
 80084fa:	463a      	mov	r2, r7
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b0      	blx	r6
 8008500:	2800      	cmp	r0, #0
 8008502:	dc06      	bgt.n	8008512 <__sflush_r+0xfe>
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800850a:	81a3      	strh	r3, [r4, #12]
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	e78e      	b.n	8008430 <__sflush_r+0x1c>
 8008512:	4407      	add	r7, r0
 8008514:	eba8 0800 	sub.w	r8, r8, r0
 8008518:	e7e9      	b.n	80084ee <__sflush_r+0xda>
 800851a:	bf00      	nop
 800851c:	20400001 	.word	0x20400001

08008520 <_fflush_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	690b      	ldr	r3, [r1, #16]
 8008524:	4605      	mov	r5, r0
 8008526:	460c      	mov	r4, r1
 8008528:	b913      	cbnz	r3, 8008530 <_fflush_r+0x10>
 800852a:	2500      	movs	r5, #0
 800852c:	4628      	mov	r0, r5
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	b118      	cbz	r0, 800853a <_fflush_r+0x1a>
 8008532:	6983      	ldr	r3, [r0, #24]
 8008534:	b90b      	cbnz	r3, 800853a <_fflush_r+0x1a>
 8008536:	f000 f887 	bl	8008648 <__sinit>
 800853a:	4b14      	ldr	r3, [pc, #80]	; (800858c <_fflush_r+0x6c>)
 800853c:	429c      	cmp	r4, r3
 800853e:	d11b      	bne.n	8008578 <_fflush_r+0x58>
 8008540:	686c      	ldr	r4, [r5, #4]
 8008542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0ef      	beq.n	800852a <_fflush_r+0xa>
 800854a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800854c:	07d0      	lsls	r0, r2, #31
 800854e:	d404      	bmi.n	800855a <_fflush_r+0x3a>
 8008550:	0599      	lsls	r1, r3, #22
 8008552:	d402      	bmi.n	800855a <_fflush_r+0x3a>
 8008554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008556:	f000 f91a 	bl	800878e <__retarget_lock_acquire_recursive>
 800855a:	4628      	mov	r0, r5
 800855c:	4621      	mov	r1, r4
 800855e:	f7ff ff59 	bl	8008414 <__sflush_r>
 8008562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008564:	07da      	lsls	r2, r3, #31
 8008566:	4605      	mov	r5, r0
 8008568:	d4e0      	bmi.n	800852c <_fflush_r+0xc>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	059b      	lsls	r3, r3, #22
 800856e:	d4dd      	bmi.n	800852c <_fflush_r+0xc>
 8008570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008572:	f000 f90d 	bl	8008790 <__retarget_lock_release_recursive>
 8008576:	e7d9      	b.n	800852c <_fflush_r+0xc>
 8008578:	4b05      	ldr	r3, [pc, #20]	; (8008590 <_fflush_r+0x70>)
 800857a:	429c      	cmp	r4, r3
 800857c:	d101      	bne.n	8008582 <_fflush_r+0x62>
 800857e:	68ac      	ldr	r4, [r5, #8]
 8008580:	e7df      	b.n	8008542 <_fflush_r+0x22>
 8008582:	4b04      	ldr	r3, [pc, #16]	; (8008594 <_fflush_r+0x74>)
 8008584:	429c      	cmp	r4, r3
 8008586:	bf08      	it	eq
 8008588:	68ec      	ldreq	r4, [r5, #12]
 800858a:	e7da      	b.n	8008542 <_fflush_r+0x22>
 800858c:	08009ae0 	.word	0x08009ae0
 8008590:	08009b00 	.word	0x08009b00
 8008594:	08009ac0 	.word	0x08009ac0

08008598 <std>:
 8008598:	2300      	movs	r3, #0
 800859a:	b510      	push	{r4, lr}
 800859c:	4604      	mov	r4, r0
 800859e:	e9c0 3300 	strd	r3, r3, [r0]
 80085a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085a6:	6083      	str	r3, [r0, #8]
 80085a8:	8181      	strh	r1, [r0, #12]
 80085aa:	6643      	str	r3, [r0, #100]	; 0x64
 80085ac:	81c2      	strh	r2, [r0, #14]
 80085ae:	6183      	str	r3, [r0, #24]
 80085b0:	4619      	mov	r1, r3
 80085b2:	2208      	movs	r2, #8
 80085b4:	305c      	adds	r0, #92	; 0x5c
 80085b6:	f7fe faf3 	bl	8006ba0 <memset>
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <std+0x38>)
 80085bc:	6263      	str	r3, [r4, #36]	; 0x24
 80085be:	4b05      	ldr	r3, [pc, #20]	; (80085d4 <std+0x3c>)
 80085c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80085c2:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <std+0x40>)
 80085c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085c6:	4b05      	ldr	r3, [pc, #20]	; (80085dc <std+0x44>)
 80085c8:	6224      	str	r4, [r4, #32]
 80085ca:	6323      	str	r3, [r4, #48]	; 0x30
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	bf00      	nop
 80085d0:	08009451 	.word	0x08009451
 80085d4:	08009473 	.word	0x08009473
 80085d8:	080094ab 	.word	0x080094ab
 80085dc:	080094cf 	.word	0x080094cf

080085e0 <_cleanup_r>:
 80085e0:	4901      	ldr	r1, [pc, #4]	; (80085e8 <_cleanup_r+0x8>)
 80085e2:	f000 b8af 	b.w	8008744 <_fwalk_reent>
 80085e6:	bf00      	nop
 80085e8:	08008521 	.word	0x08008521

080085ec <__sfmoreglue>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	2268      	movs	r2, #104	; 0x68
 80085f0:	1e4d      	subs	r5, r1, #1
 80085f2:	4355      	muls	r5, r2
 80085f4:	460e      	mov	r6, r1
 80085f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085fa:	f000 fd4b 	bl	8009094 <_malloc_r>
 80085fe:	4604      	mov	r4, r0
 8008600:	b140      	cbz	r0, 8008614 <__sfmoreglue+0x28>
 8008602:	2100      	movs	r1, #0
 8008604:	e9c0 1600 	strd	r1, r6, [r0]
 8008608:	300c      	adds	r0, #12
 800860a:	60a0      	str	r0, [r4, #8]
 800860c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008610:	f7fe fac6 	bl	8006ba0 <memset>
 8008614:	4620      	mov	r0, r4
 8008616:	bd70      	pop	{r4, r5, r6, pc}

08008618 <__sfp_lock_acquire>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__sfp_lock_acquire+0x8>)
 800861a:	f000 b8b8 	b.w	800878e <__retarget_lock_acquire_recursive>
 800861e:	bf00      	nop
 8008620:	2000158d 	.word	0x2000158d

08008624 <__sfp_lock_release>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__sfp_lock_release+0x8>)
 8008626:	f000 b8b3 	b.w	8008790 <__retarget_lock_release_recursive>
 800862a:	bf00      	nop
 800862c:	2000158d 	.word	0x2000158d

08008630 <__sinit_lock_acquire>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sinit_lock_acquire+0x8>)
 8008632:	f000 b8ac 	b.w	800878e <__retarget_lock_acquire_recursive>
 8008636:	bf00      	nop
 8008638:	2000158e 	.word	0x2000158e

0800863c <__sinit_lock_release>:
 800863c:	4801      	ldr	r0, [pc, #4]	; (8008644 <__sinit_lock_release+0x8>)
 800863e:	f000 b8a7 	b.w	8008790 <__retarget_lock_release_recursive>
 8008642:	bf00      	nop
 8008644:	2000158e 	.word	0x2000158e

08008648 <__sinit>:
 8008648:	b510      	push	{r4, lr}
 800864a:	4604      	mov	r4, r0
 800864c:	f7ff fff0 	bl	8008630 <__sinit_lock_acquire>
 8008650:	69a3      	ldr	r3, [r4, #24]
 8008652:	b11b      	cbz	r3, 800865c <__sinit+0x14>
 8008654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008658:	f7ff bff0 	b.w	800863c <__sinit_lock_release>
 800865c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008660:	6523      	str	r3, [r4, #80]	; 0x50
 8008662:	4b13      	ldr	r3, [pc, #76]	; (80086b0 <__sinit+0x68>)
 8008664:	4a13      	ldr	r2, [pc, #76]	; (80086b4 <__sinit+0x6c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	62a2      	str	r2, [r4, #40]	; 0x28
 800866a:	42a3      	cmp	r3, r4
 800866c:	bf04      	itt	eq
 800866e:	2301      	moveq	r3, #1
 8008670:	61a3      	streq	r3, [r4, #24]
 8008672:	4620      	mov	r0, r4
 8008674:	f000 f820 	bl	80086b8 <__sfp>
 8008678:	6060      	str	r0, [r4, #4]
 800867a:	4620      	mov	r0, r4
 800867c:	f000 f81c 	bl	80086b8 <__sfp>
 8008680:	60a0      	str	r0, [r4, #8]
 8008682:	4620      	mov	r0, r4
 8008684:	f000 f818 	bl	80086b8 <__sfp>
 8008688:	2200      	movs	r2, #0
 800868a:	60e0      	str	r0, [r4, #12]
 800868c:	2104      	movs	r1, #4
 800868e:	6860      	ldr	r0, [r4, #4]
 8008690:	f7ff ff82 	bl	8008598 <std>
 8008694:	68a0      	ldr	r0, [r4, #8]
 8008696:	2201      	movs	r2, #1
 8008698:	2109      	movs	r1, #9
 800869a:	f7ff ff7d 	bl	8008598 <std>
 800869e:	68e0      	ldr	r0, [r4, #12]
 80086a0:	2202      	movs	r2, #2
 80086a2:	2112      	movs	r1, #18
 80086a4:	f7ff ff78 	bl	8008598 <std>
 80086a8:	2301      	movs	r3, #1
 80086aa:	61a3      	str	r3, [r4, #24]
 80086ac:	e7d2      	b.n	8008654 <__sinit+0xc>
 80086ae:	bf00      	nop
 80086b0:	080099f8 	.word	0x080099f8
 80086b4:	080085e1 	.word	0x080085e1

080086b8 <__sfp>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	4607      	mov	r7, r0
 80086bc:	f7ff ffac 	bl	8008618 <__sfp_lock_acquire>
 80086c0:	4b1e      	ldr	r3, [pc, #120]	; (800873c <__sfp+0x84>)
 80086c2:	681e      	ldr	r6, [r3, #0]
 80086c4:	69b3      	ldr	r3, [r6, #24]
 80086c6:	b913      	cbnz	r3, 80086ce <__sfp+0x16>
 80086c8:	4630      	mov	r0, r6
 80086ca:	f7ff ffbd 	bl	8008648 <__sinit>
 80086ce:	3648      	adds	r6, #72	; 0x48
 80086d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	d503      	bpl.n	80086e0 <__sfp+0x28>
 80086d8:	6833      	ldr	r3, [r6, #0]
 80086da:	b30b      	cbz	r3, 8008720 <__sfp+0x68>
 80086dc:	6836      	ldr	r6, [r6, #0]
 80086de:	e7f7      	b.n	80086d0 <__sfp+0x18>
 80086e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086e4:	b9d5      	cbnz	r5, 800871c <__sfp+0x64>
 80086e6:	4b16      	ldr	r3, [pc, #88]	; (8008740 <__sfp+0x88>)
 80086e8:	60e3      	str	r3, [r4, #12]
 80086ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086ee:	6665      	str	r5, [r4, #100]	; 0x64
 80086f0:	f000 f84c 	bl	800878c <__retarget_lock_init_recursive>
 80086f4:	f7ff ff96 	bl	8008624 <__sfp_lock_release>
 80086f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008700:	6025      	str	r5, [r4, #0]
 8008702:	61a5      	str	r5, [r4, #24]
 8008704:	2208      	movs	r2, #8
 8008706:	4629      	mov	r1, r5
 8008708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800870c:	f7fe fa48 	bl	8006ba0 <memset>
 8008710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008718:	4620      	mov	r0, r4
 800871a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871c:	3468      	adds	r4, #104	; 0x68
 800871e:	e7d9      	b.n	80086d4 <__sfp+0x1c>
 8008720:	2104      	movs	r1, #4
 8008722:	4638      	mov	r0, r7
 8008724:	f7ff ff62 	bl	80085ec <__sfmoreglue>
 8008728:	4604      	mov	r4, r0
 800872a:	6030      	str	r0, [r6, #0]
 800872c:	2800      	cmp	r0, #0
 800872e:	d1d5      	bne.n	80086dc <__sfp+0x24>
 8008730:	f7ff ff78 	bl	8008624 <__sfp_lock_release>
 8008734:	230c      	movs	r3, #12
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	e7ee      	b.n	8008718 <__sfp+0x60>
 800873a:	bf00      	nop
 800873c:	080099f8 	.word	0x080099f8
 8008740:	ffff0001 	.word	0xffff0001

08008744 <_fwalk_reent>:
 8008744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008748:	4606      	mov	r6, r0
 800874a:	4688      	mov	r8, r1
 800874c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008750:	2700      	movs	r7, #0
 8008752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008756:	f1b9 0901 	subs.w	r9, r9, #1
 800875a:	d505      	bpl.n	8008768 <_fwalk_reent+0x24>
 800875c:	6824      	ldr	r4, [r4, #0]
 800875e:	2c00      	cmp	r4, #0
 8008760:	d1f7      	bne.n	8008752 <_fwalk_reent+0xe>
 8008762:	4638      	mov	r0, r7
 8008764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008768:	89ab      	ldrh	r3, [r5, #12]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d907      	bls.n	800877e <_fwalk_reent+0x3a>
 800876e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008772:	3301      	adds	r3, #1
 8008774:	d003      	beq.n	800877e <_fwalk_reent+0x3a>
 8008776:	4629      	mov	r1, r5
 8008778:	4630      	mov	r0, r6
 800877a:	47c0      	blx	r8
 800877c:	4307      	orrs	r7, r0
 800877e:	3568      	adds	r5, #104	; 0x68
 8008780:	e7e9      	b.n	8008756 <_fwalk_reent+0x12>
	...

08008784 <_localeconv_r>:
 8008784:	4800      	ldr	r0, [pc, #0]	; (8008788 <_localeconv_r+0x4>)
 8008786:	4770      	bx	lr
 8008788:	20000160 	.word	0x20000160

0800878c <__retarget_lock_init_recursive>:
 800878c:	4770      	bx	lr

0800878e <__retarget_lock_acquire_recursive>:
 800878e:	4770      	bx	lr

08008790 <__retarget_lock_release_recursive>:
 8008790:	4770      	bx	lr

08008792 <__swhatbuf_r>:
 8008792:	b570      	push	{r4, r5, r6, lr}
 8008794:	460e      	mov	r6, r1
 8008796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879a:	2900      	cmp	r1, #0
 800879c:	b096      	sub	sp, #88	; 0x58
 800879e:	4614      	mov	r4, r2
 80087a0:	461d      	mov	r5, r3
 80087a2:	da08      	bge.n	80087b6 <__swhatbuf_r+0x24>
 80087a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	602a      	str	r2, [r5, #0]
 80087ac:	061a      	lsls	r2, r3, #24
 80087ae:	d410      	bmi.n	80087d2 <__swhatbuf_r+0x40>
 80087b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087b4:	e00e      	b.n	80087d4 <__swhatbuf_r+0x42>
 80087b6:	466a      	mov	r2, sp
 80087b8:	f000 fee0 	bl	800957c <_fstat_r>
 80087bc:	2800      	cmp	r0, #0
 80087be:	dbf1      	blt.n	80087a4 <__swhatbuf_r+0x12>
 80087c0:	9a01      	ldr	r2, [sp, #4]
 80087c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087ca:	425a      	negs	r2, r3
 80087cc:	415a      	adcs	r2, r3
 80087ce:	602a      	str	r2, [r5, #0]
 80087d0:	e7ee      	b.n	80087b0 <__swhatbuf_r+0x1e>
 80087d2:	2340      	movs	r3, #64	; 0x40
 80087d4:	2000      	movs	r0, #0
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	b016      	add	sp, #88	; 0x58
 80087da:	bd70      	pop	{r4, r5, r6, pc}

080087dc <__smakebuf_r>:
 80087dc:	898b      	ldrh	r3, [r1, #12]
 80087de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087e0:	079d      	lsls	r5, r3, #30
 80087e2:	4606      	mov	r6, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	d507      	bpl.n	80087f8 <__smakebuf_r+0x1c>
 80087e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	2301      	movs	r3, #1
 80087f2:	6163      	str	r3, [r4, #20]
 80087f4:	b002      	add	sp, #8
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	ab01      	add	r3, sp, #4
 80087fa:	466a      	mov	r2, sp
 80087fc:	f7ff ffc9 	bl	8008792 <__swhatbuf_r>
 8008800:	9900      	ldr	r1, [sp, #0]
 8008802:	4605      	mov	r5, r0
 8008804:	4630      	mov	r0, r6
 8008806:	f000 fc45 	bl	8009094 <_malloc_r>
 800880a:	b948      	cbnz	r0, 8008820 <__smakebuf_r+0x44>
 800880c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008810:	059a      	lsls	r2, r3, #22
 8008812:	d4ef      	bmi.n	80087f4 <__smakebuf_r+0x18>
 8008814:	f023 0303 	bic.w	r3, r3, #3
 8008818:	f043 0302 	orr.w	r3, r3, #2
 800881c:	81a3      	strh	r3, [r4, #12]
 800881e:	e7e3      	b.n	80087e8 <__smakebuf_r+0xc>
 8008820:	4b0d      	ldr	r3, [pc, #52]	; (8008858 <__smakebuf_r+0x7c>)
 8008822:	62b3      	str	r3, [r6, #40]	; 0x28
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	6020      	str	r0, [r4, #0]
 8008828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882c:	81a3      	strh	r3, [r4, #12]
 800882e:	9b00      	ldr	r3, [sp, #0]
 8008830:	6163      	str	r3, [r4, #20]
 8008832:	9b01      	ldr	r3, [sp, #4]
 8008834:	6120      	str	r0, [r4, #16]
 8008836:	b15b      	cbz	r3, 8008850 <__smakebuf_r+0x74>
 8008838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800883c:	4630      	mov	r0, r6
 800883e:	f000 feaf 	bl	80095a0 <_isatty_r>
 8008842:	b128      	cbz	r0, 8008850 <__smakebuf_r+0x74>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	f023 0303 	bic.w	r3, r3, #3
 800884a:	f043 0301 	orr.w	r3, r3, #1
 800884e:	81a3      	strh	r3, [r4, #12]
 8008850:	89a0      	ldrh	r0, [r4, #12]
 8008852:	4305      	orrs	r5, r0
 8008854:	81a5      	strh	r5, [r4, #12]
 8008856:	e7cd      	b.n	80087f4 <__smakebuf_r+0x18>
 8008858:	080085e1 	.word	0x080085e1

0800885c <malloc>:
 800885c:	4b02      	ldr	r3, [pc, #8]	; (8008868 <malloc+0xc>)
 800885e:	4601      	mov	r1, r0
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	f000 bc17 	b.w	8009094 <_malloc_r>
 8008866:	bf00      	nop
 8008868:	2000000c 	.word	0x2000000c

0800886c <memcpy>:
 800886c:	440a      	add	r2, r1
 800886e:	4291      	cmp	r1, r2
 8008870:	f100 33ff 	add.w	r3, r0, #4294967295
 8008874:	d100      	bne.n	8008878 <memcpy+0xc>
 8008876:	4770      	bx	lr
 8008878:	b510      	push	{r4, lr}
 800887a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800887e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008882:	4291      	cmp	r1, r2
 8008884:	d1f9      	bne.n	800887a <memcpy+0xe>
 8008886:	bd10      	pop	{r4, pc}

08008888 <_Balloc>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800888c:	4604      	mov	r4, r0
 800888e:	460d      	mov	r5, r1
 8008890:	b976      	cbnz	r6, 80088b0 <_Balloc+0x28>
 8008892:	2010      	movs	r0, #16
 8008894:	f7ff ffe2 	bl	800885c <malloc>
 8008898:	4602      	mov	r2, r0
 800889a:	6260      	str	r0, [r4, #36]	; 0x24
 800889c:	b920      	cbnz	r0, 80088a8 <_Balloc+0x20>
 800889e:	4b18      	ldr	r3, [pc, #96]	; (8008900 <_Balloc+0x78>)
 80088a0:	4818      	ldr	r0, [pc, #96]	; (8008904 <_Balloc+0x7c>)
 80088a2:	2166      	movs	r1, #102	; 0x66
 80088a4:	f000 fe2a 	bl	80094fc <__assert_func>
 80088a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088ac:	6006      	str	r6, [r0, #0]
 80088ae:	60c6      	str	r6, [r0, #12]
 80088b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088b2:	68f3      	ldr	r3, [r6, #12]
 80088b4:	b183      	cbz	r3, 80088d8 <_Balloc+0x50>
 80088b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088be:	b9b8      	cbnz	r0, 80088f0 <_Balloc+0x68>
 80088c0:	2101      	movs	r1, #1
 80088c2:	fa01 f605 	lsl.w	r6, r1, r5
 80088c6:	1d72      	adds	r2, r6, #5
 80088c8:	0092      	lsls	r2, r2, #2
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 fb60 	bl	8008f90 <_calloc_r>
 80088d0:	b160      	cbz	r0, 80088ec <_Balloc+0x64>
 80088d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088d6:	e00e      	b.n	80088f6 <_Balloc+0x6e>
 80088d8:	2221      	movs	r2, #33	; 0x21
 80088da:	2104      	movs	r1, #4
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fb57 	bl	8008f90 <_calloc_r>
 80088e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088e4:	60f0      	str	r0, [r6, #12]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e4      	bne.n	80088b6 <_Balloc+0x2e>
 80088ec:	2000      	movs	r0, #0
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	6802      	ldr	r2, [r0, #0]
 80088f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088f6:	2300      	movs	r3, #0
 80088f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088fc:	e7f7      	b.n	80088ee <_Balloc+0x66>
 80088fe:	bf00      	nop
 8008900:	08009a3d 	.word	0x08009a3d
 8008904:	08009b20 	.word	0x08009b20

08008908 <_Bfree>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800890c:	4605      	mov	r5, r0
 800890e:	460c      	mov	r4, r1
 8008910:	b976      	cbnz	r6, 8008930 <_Bfree+0x28>
 8008912:	2010      	movs	r0, #16
 8008914:	f7ff ffa2 	bl	800885c <malloc>
 8008918:	4602      	mov	r2, r0
 800891a:	6268      	str	r0, [r5, #36]	; 0x24
 800891c:	b920      	cbnz	r0, 8008928 <_Bfree+0x20>
 800891e:	4b09      	ldr	r3, [pc, #36]	; (8008944 <_Bfree+0x3c>)
 8008920:	4809      	ldr	r0, [pc, #36]	; (8008948 <_Bfree+0x40>)
 8008922:	218a      	movs	r1, #138	; 0x8a
 8008924:	f000 fdea 	bl	80094fc <__assert_func>
 8008928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800892c:	6006      	str	r6, [r0, #0]
 800892e:	60c6      	str	r6, [r0, #12]
 8008930:	b13c      	cbz	r4, 8008942 <_Bfree+0x3a>
 8008932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008934:	6862      	ldr	r2, [r4, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800893c:	6021      	str	r1, [r4, #0]
 800893e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008942:	bd70      	pop	{r4, r5, r6, pc}
 8008944:	08009a3d 	.word	0x08009a3d
 8008948:	08009b20 	.word	0x08009b20

0800894c <__multadd>:
 800894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008950:	690d      	ldr	r5, [r1, #16]
 8008952:	4607      	mov	r7, r0
 8008954:	460c      	mov	r4, r1
 8008956:	461e      	mov	r6, r3
 8008958:	f101 0c14 	add.w	ip, r1, #20
 800895c:	2000      	movs	r0, #0
 800895e:	f8dc 3000 	ldr.w	r3, [ip]
 8008962:	b299      	uxth	r1, r3
 8008964:	fb02 6101 	mla	r1, r2, r1, r6
 8008968:	0c1e      	lsrs	r6, r3, #16
 800896a:	0c0b      	lsrs	r3, r1, #16
 800896c:	fb02 3306 	mla	r3, r2, r6, r3
 8008970:	b289      	uxth	r1, r1
 8008972:	3001      	adds	r0, #1
 8008974:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008978:	4285      	cmp	r5, r0
 800897a:	f84c 1b04 	str.w	r1, [ip], #4
 800897e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008982:	dcec      	bgt.n	800895e <__multadd+0x12>
 8008984:	b30e      	cbz	r6, 80089ca <__multadd+0x7e>
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	42ab      	cmp	r3, r5
 800898a:	dc19      	bgt.n	80089c0 <__multadd+0x74>
 800898c:	6861      	ldr	r1, [r4, #4]
 800898e:	4638      	mov	r0, r7
 8008990:	3101      	adds	r1, #1
 8008992:	f7ff ff79 	bl	8008888 <_Balloc>
 8008996:	4680      	mov	r8, r0
 8008998:	b928      	cbnz	r0, 80089a6 <__multadd+0x5a>
 800899a:	4602      	mov	r2, r0
 800899c:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <__multadd+0x84>)
 800899e:	480d      	ldr	r0, [pc, #52]	; (80089d4 <__multadd+0x88>)
 80089a0:	21b5      	movs	r1, #181	; 0xb5
 80089a2:	f000 fdab 	bl	80094fc <__assert_func>
 80089a6:	6922      	ldr	r2, [r4, #16]
 80089a8:	3202      	adds	r2, #2
 80089aa:	f104 010c 	add.w	r1, r4, #12
 80089ae:	0092      	lsls	r2, r2, #2
 80089b0:	300c      	adds	r0, #12
 80089b2:	f7ff ff5b 	bl	800886c <memcpy>
 80089b6:	4621      	mov	r1, r4
 80089b8:	4638      	mov	r0, r7
 80089ba:	f7ff ffa5 	bl	8008908 <_Bfree>
 80089be:	4644      	mov	r4, r8
 80089c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089c4:	3501      	adds	r5, #1
 80089c6:	615e      	str	r6, [r3, #20]
 80089c8:	6125      	str	r5, [r4, #16]
 80089ca:	4620      	mov	r0, r4
 80089cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d0:	08009aaf 	.word	0x08009aaf
 80089d4:	08009b20 	.word	0x08009b20

080089d8 <__hi0bits>:
 80089d8:	0c03      	lsrs	r3, r0, #16
 80089da:	041b      	lsls	r3, r3, #16
 80089dc:	b9d3      	cbnz	r3, 8008a14 <__hi0bits+0x3c>
 80089de:	0400      	lsls	r0, r0, #16
 80089e0:	2310      	movs	r3, #16
 80089e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089e6:	bf04      	itt	eq
 80089e8:	0200      	lsleq	r0, r0, #8
 80089ea:	3308      	addeq	r3, #8
 80089ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089f0:	bf04      	itt	eq
 80089f2:	0100      	lsleq	r0, r0, #4
 80089f4:	3304      	addeq	r3, #4
 80089f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089fa:	bf04      	itt	eq
 80089fc:	0080      	lsleq	r0, r0, #2
 80089fe:	3302      	addeq	r3, #2
 8008a00:	2800      	cmp	r0, #0
 8008a02:	db05      	blt.n	8008a10 <__hi0bits+0x38>
 8008a04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a08:	f103 0301 	add.w	r3, r3, #1
 8008a0c:	bf08      	it	eq
 8008a0e:	2320      	moveq	r3, #32
 8008a10:	4618      	mov	r0, r3
 8008a12:	4770      	bx	lr
 8008a14:	2300      	movs	r3, #0
 8008a16:	e7e4      	b.n	80089e2 <__hi0bits+0xa>

08008a18 <__lo0bits>:
 8008a18:	6803      	ldr	r3, [r0, #0]
 8008a1a:	f013 0207 	ands.w	r2, r3, #7
 8008a1e:	4601      	mov	r1, r0
 8008a20:	d00b      	beq.n	8008a3a <__lo0bits+0x22>
 8008a22:	07da      	lsls	r2, r3, #31
 8008a24:	d423      	bmi.n	8008a6e <__lo0bits+0x56>
 8008a26:	0798      	lsls	r0, r3, #30
 8008a28:	bf49      	itett	mi
 8008a2a:	085b      	lsrmi	r3, r3, #1
 8008a2c:	089b      	lsrpl	r3, r3, #2
 8008a2e:	2001      	movmi	r0, #1
 8008a30:	600b      	strmi	r3, [r1, #0]
 8008a32:	bf5c      	itt	pl
 8008a34:	600b      	strpl	r3, [r1, #0]
 8008a36:	2002      	movpl	r0, #2
 8008a38:	4770      	bx	lr
 8008a3a:	b298      	uxth	r0, r3
 8008a3c:	b9a8      	cbnz	r0, 8008a6a <__lo0bits+0x52>
 8008a3e:	0c1b      	lsrs	r3, r3, #16
 8008a40:	2010      	movs	r0, #16
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	b90a      	cbnz	r2, 8008a4a <__lo0bits+0x32>
 8008a46:	3008      	adds	r0, #8
 8008a48:	0a1b      	lsrs	r3, r3, #8
 8008a4a:	071a      	lsls	r2, r3, #28
 8008a4c:	bf04      	itt	eq
 8008a4e:	091b      	lsreq	r3, r3, #4
 8008a50:	3004      	addeq	r0, #4
 8008a52:	079a      	lsls	r2, r3, #30
 8008a54:	bf04      	itt	eq
 8008a56:	089b      	lsreq	r3, r3, #2
 8008a58:	3002      	addeq	r0, #2
 8008a5a:	07da      	lsls	r2, r3, #31
 8008a5c:	d403      	bmi.n	8008a66 <__lo0bits+0x4e>
 8008a5e:	085b      	lsrs	r3, r3, #1
 8008a60:	f100 0001 	add.w	r0, r0, #1
 8008a64:	d005      	beq.n	8008a72 <__lo0bits+0x5a>
 8008a66:	600b      	str	r3, [r1, #0]
 8008a68:	4770      	bx	lr
 8008a6a:	4610      	mov	r0, r2
 8008a6c:	e7e9      	b.n	8008a42 <__lo0bits+0x2a>
 8008a6e:	2000      	movs	r0, #0
 8008a70:	4770      	bx	lr
 8008a72:	2020      	movs	r0, #32
 8008a74:	4770      	bx	lr
	...

08008a78 <__i2b>:
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	f7ff ff03 	bl	8008888 <_Balloc>
 8008a82:	4602      	mov	r2, r0
 8008a84:	b928      	cbnz	r0, 8008a92 <__i2b+0x1a>
 8008a86:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <__i2b+0x24>)
 8008a88:	4805      	ldr	r0, [pc, #20]	; (8008aa0 <__i2b+0x28>)
 8008a8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a8e:	f000 fd35 	bl	80094fc <__assert_func>
 8008a92:	2301      	movs	r3, #1
 8008a94:	6144      	str	r4, [r0, #20]
 8008a96:	6103      	str	r3, [r0, #16]
 8008a98:	bd10      	pop	{r4, pc}
 8008a9a:	bf00      	nop
 8008a9c:	08009aaf 	.word	0x08009aaf
 8008aa0:	08009b20 	.word	0x08009b20

08008aa4 <__multiply>:
 8008aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa8:	4691      	mov	r9, r2
 8008aaa:	690a      	ldr	r2, [r1, #16]
 8008aac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	bfb8      	it	lt
 8008ab4:	460b      	movlt	r3, r1
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	bfbc      	itt	lt
 8008aba:	464c      	movlt	r4, r9
 8008abc:	4699      	movlt	r9, r3
 8008abe:	6927      	ldr	r7, [r4, #16]
 8008ac0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ac4:	68a3      	ldr	r3, [r4, #8]
 8008ac6:	6861      	ldr	r1, [r4, #4]
 8008ac8:	eb07 060a 	add.w	r6, r7, sl
 8008acc:	42b3      	cmp	r3, r6
 8008ace:	b085      	sub	sp, #20
 8008ad0:	bfb8      	it	lt
 8008ad2:	3101      	addlt	r1, #1
 8008ad4:	f7ff fed8 	bl	8008888 <_Balloc>
 8008ad8:	b930      	cbnz	r0, 8008ae8 <__multiply+0x44>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4b44      	ldr	r3, [pc, #272]	; (8008bf0 <__multiply+0x14c>)
 8008ade:	4845      	ldr	r0, [pc, #276]	; (8008bf4 <__multiply+0x150>)
 8008ae0:	f240 115d 	movw	r1, #349	; 0x15d
 8008ae4:	f000 fd0a 	bl	80094fc <__assert_func>
 8008ae8:	f100 0514 	add.w	r5, r0, #20
 8008aec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008af0:	462b      	mov	r3, r5
 8008af2:	2200      	movs	r2, #0
 8008af4:	4543      	cmp	r3, r8
 8008af6:	d321      	bcc.n	8008b3c <__multiply+0x98>
 8008af8:	f104 0314 	add.w	r3, r4, #20
 8008afc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b00:	f109 0314 	add.w	r3, r9, #20
 8008b04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b08:	9202      	str	r2, [sp, #8]
 8008b0a:	1b3a      	subs	r2, r7, r4
 8008b0c:	3a15      	subs	r2, #21
 8008b0e:	f022 0203 	bic.w	r2, r2, #3
 8008b12:	3204      	adds	r2, #4
 8008b14:	f104 0115 	add.w	r1, r4, #21
 8008b18:	428f      	cmp	r7, r1
 8008b1a:	bf38      	it	cc
 8008b1c:	2204      	movcc	r2, #4
 8008b1e:	9201      	str	r2, [sp, #4]
 8008b20:	9a02      	ldr	r2, [sp, #8]
 8008b22:	9303      	str	r3, [sp, #12]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d80c      	bhi.n	8008b42 <__multiply+0x9e>
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	dd03      	ble.n	8008b34 <__multiply+0x90>
 8008b2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d05a      	beq.n	8008bea <__multiply+0x146>
 8008b34:	6106      	str	r6, [r0, #16]
 8008b36:	b005      	add	sp, #20
 8008b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3c:	f843 2b04 	str.w	r2, [r3], #4
 8008b40:	e7d8      	b.n	8008af4 <__multiply+0x50>
 8008b42:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b46:	f1ba 0f00 	cmp.w	sl, #0
 8008b4a:	d024      	beq.n	8008b96 <__multiply+0xf2>
 8008b4c:	f104 0e14 	add.w	lr, r4, #20
 8008b50:	46a9      	mov	r9, r5
 8008b52:	f04f 0c00 	mov.w	ip, #0
 8008b56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b5a:	f8d9 1000 	ldr.w	r1, [r9]
 8008b5e:	fa1f fb82 	uxth.w	fp, r2
 8008b62:	b289      	uxth	r1, r1
 8008b64:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b6c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b70:	4461      	add	r1, ip
 8008b72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b76:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b7e:	b289      	uxth	r1, r1
 8008b80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b84:	4577      	cmp	r7, lr
 8008b86:	f849 1b04 	str.w	r1, [r9], #4
 8008b8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b8e:	d8e2      	bhi.n	8008b56 <__multiply+0xb2>
 8008b90:	9a01      	ldr	r2, [sp, #4]
 8008b92:	f845 c002 	str.w	ip, [r5, r2]
 8008b96:	9a03      	ldr	r2, [sp, #12]
 8008b98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b9c:	3304      	adds	r3, #4
 8008b9e:	f1b9 0f00 	cmp.w	r9, #0
 8008ba2:	d020      	beq.n	8008be6 <__multiply+0x142>
 8008ba4:	6829      	ldr	r1, [r5, #0]
 8008ba6:	f104 0c14 	add.w	ip, r4, #20
 8008baa:	46ae      	mov	lr, r5
 8008bac:	f04f 0a00 	mov.w	sl, #0
 8008bb0:	f8bc b000 	ldrh.w	fp, [ip]
 8008bb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bb8:	fb09 220b 	mla	r2, r9, fp, r2
 8008bbc:	4492      	add	sl, r2
 8008bbe:	b289      	uxth	r1, r1
 8008bc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008bc4:	f84e 1b04 	str.w	r1, [lr], #4
 8008bc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008bcc:	f8be 1000 	ldrh.w	r1, [lr]
 8008bd0:	0c12      	lsrs	r2, r2, #16
 8008bd2:	fb09 1102 	mla	r1, r9, r2, r1
 8008bd6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008bda:	4567      	cmp	r7, ip
 8008bdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008be0:	d8e6      	bhi.n	8008bb0 <__multiply+0x10c>
 8008be2:	9a01      	ldr	r2, [sp, #4]
 8008be4:	50a9      	str	r1, [r5, r2]
 8008be6:	3504      	adds	r5, #4
 8008be8:	e79a      	b.n	8008b20 <__multiply+0x7c>
 8008bea:	3e01      	subs	r6, #1
 8008bec:	e79c      	b.n	8008b28 <__multiply+0x84>
 8008bee:	bf00      	nop
 8008bf0:	08009aaf 	.word	0x08009aaf
 8008bf4:	08009b20 	.word	0x08009b20

08008bf8 <__pow5mult>:
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	4615      	mov	r5, r2
 8008bfe:	f012 0203 	ands.w	r2, r2, #3
 8008c02:	4606      	mov	r6, r0
 8008c04:	460f      	mov	r7, r1
 8008c06:	d007      	beq.n	8008c18 <__pow5mult+0x20>
 8008c08:	4c25      	ldr	r4, [pc, #148]	; (8008ca0 <__pow5mult+0xa8>)
 8008c0a:	3a01      	subs	r2, #1
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c12:	f7ff fe9b 	bl	800894c <__multadd>
 8008c16:	4607      	mov	r7, r0
 8008c18:	10ad      	asrs	r5, r5, #2
 8008c1a:	d03d      	beq.n	8008c98 <__pow5mult+0xa0>
 8008c1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008c1e:	b97c      	cbnz	r4, 8008c40 <__pow5mult+0x48>
 8008c20:	2010      	movs	r0, #16
 8008c22:	f7ff fe1b 	bl	800885c <malloc>
 8008c26:	4602      	mov	r2, r0
 8008c28:	6270      	str	r0, [r6, #36]	; 0x24
 8008c2a:	b928      	cbnz	r0, 8008c38 <__pow5mult+0x40>
 8008c2c:	4b1d      	ldr	r3, [pc, #116]	; (8008ca4 <__pow5mult+0xac>)
 8008c2e:	481e      	ldr	r0, [pc, #120]	; (8008ca8 <__pow5mult+0xb0>)
 8008c30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c34:	f000 fc62 	bl	80094fc <__assert_func>
 8008c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c3c:	6004      	str	r4, [r0, #0]
 8008c3e:	60c4      	str	r4, [r0, #12]
 8008c40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c48:	b94c      	cbnz	r4, 8008c5e <__pow5mult+0x66>
 8008c4a:	f240 2171 	movw	r1, #625	; 0x271
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7ff ff12 	bl	8008a78 <__i2b>
 8008c54:	2300      	movs	r3, #0
 8008c56:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	6003      	str	r3, [r0, #0]
 8008c5e:	f04f 0900 	mov.w	r9, #0
 8008c62:	07eb      	lsls	r3, r5, #31
 8008c64:	d50a      	bpl.n	8008c7c <__pow5mult+0x84>
 8008c66:	4639      	mov	r1, r7
 8008c68:	4622      	mov	r2, r4
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7ff ff1a 	bl	8008aa4 <__multiply>
 8008c70:	4639      	mov	r1, r7
 8008c72:	4680      	mov	r8, r0
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7ff fe47 	bl	8008908 <_Bfree>
 8008c7a:	4647      	mov	r7, r8
 8008c7c:	106d      	asrs	r5, r5, #1
 8008c7e:	d00b      	beq.n	8008c98 <__pow5mult+0xa0>
 8008c80:	6820      	ldr	r0, [r4, #0]
 8008c82:	b938      	cbnz	r0, 8008c94 <__pow5mult+0x9c>
 8008c84:	4622      	mov	r2, r4
 8008c86:	4621      	mov	r1, r4
 8008c88:	4630      	mov	r0, r6
 8008c8a:	f7ff ff0b 	bl	8008aa4 <__multiply>
 8008c8e:	6020      	str	r0, [r4, #0]
 8008c90:	f8c0 9000 	str.w	r9, [r0]
 8008c94:	4604      	mov	r4, r0
 8008c96:	e7e4      	b.n	8008c62 <__pow5mult+0x6a>
 8008c98:	4638      	mov	r0, r7
 8008c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c9e:	bf00      	nop
 8008ca0:	08009c70 	.word	0x08009c70
 8008ca4:	08009a3d 	.word	0x08009a3d
 8008ca8:	08009b20 	.word	0x08009b20

08008cac <__lshift>:
 8008cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	6849      	ldr	r1, [r1, #4]
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cba:	68a3      	ldr	r3, [r4, #8]
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	4691      	mov	r9, r2
 8008cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cc4:	f108 0601 	add.w	r6, r8, #1
 8008cc8:	42b3      	cmp	r3, r6
 8008cca:	db0b      	blt.n	8008ce4 <__lshift+0x38>
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f7ff fddb 	bl	8008888 <_Balloc>
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	b948      	cbnz	r0, 8008cea <__lshift+0x3e>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	4b2a      	ldr	r3, [pc, #168]	; (8008d84 <__lshift+0xd8>)
 8008cda:	482b      	ldr	r0, [pc, #172]	; (8008d88 <__lshift+0xdc>)
 8008cdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ce0:	f000 fc0c 	bl	80094fc <__assert_func>
 8008ce4:	3101      	adds	r1, #1
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	e7ee      	b.n	8008cc8 <__lshift+0x1c>
 8008cea:	2300      	movs	r3, #0
 8008cec:	f100 0114 	add.w	r1, r0, #20
 8008cf0:	f100 0210 	add.w	r2, r0, #16
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	4553      	cmp	r3, sl
 8008cf8:	db37      	blt.n	8008d6a <__lshift+0xbe>
 8008cfa:	6920      	ldr	r0, [r4, #16]
 8008cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d00:	f104 0314 	add.w	r3, r4, #20
 8008d04:	f019 091f 	ands.w	r9, r9, #31
 8008d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008d10:	d02f      	beq.n	8008d72 <__lshift+0xc6>
 8008d12:	f1c9 0e20 	rsb	lr, r9, #32
 8008d16:	468a      	mov	sl, r1
 8008d18:	f04f 0c00 	mov.w	ip, #0
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	fa02 f209 	lsl.w	r2, r2, r9
 8008d22:	ea42 020c 	orr.w	r2, r2, ip
 8008d26:	f84a 2b04 	str.w	r2, [sl], #4
 8008d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2e:	4298      	cmp	r0, r3
 8008d30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008d34:	d8f2      	bhi.n	8008d1c <__lshift+0x70>
 8008d36:	1b03      	subs	r3, r0, r4
 8008d38:	3b15      	subs	r3, #21
 8008d3a:	f023 0303 	bic.w	r3, r3, #3
 8008d3e:	3304      	adds	r3, #4
 8008d40:	f104 0215 	add.w	r2, r4, #21
 8008d44:	4290      	cmp	r0, r2
 8008d46:	bf38      	it	cc
 8008d48:	2304      	movcc	r3, #4
 8008d4a:	f841 c003 	str.w	ip, [r1, r3]
 8008d4e:	f1bc 0f00 	cmp.w	ip, #0
 8008d52:	d001      	beq.n	8008d58 <__lshift+0xac>
 8008d54:	f108 0602 	add.w	r6, r8, #2
 8008d58:	3e01      	subs	r6, #1
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	612e      	str	r6, [r5, #16]
 8008d5e:	4621      	mov	r1, r4
 8008d60:	f7ff fdd2 	bl	8008908 <_Bfree>
 8008d64:	4628      	mov	r0, r5
 8008d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d6e:	3301      	adds	r3, #1
 8008d70:	e7c1      	b.n	8008cf6 <__lshift+0x4a>
 8008d72:	3904      	subs	r1, #4
 8008d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d78:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d7c:	4298      	cmp	r0, r3
 8008d7e:	d8f9      	bhi.n	8008d74 <__lshift+0xc8>
 8008d80:	e7ea      	b.n	8008d58 <__lshift+0xac>
 8008d82:	bf00      	nop
 8008d84:	08009aaf 	.word	0x08009aaf
 8008d88:	08009b20 	.word	0x08009b20

08008d8c <__mcmp>:
 8008d8c:	b530      	push	{r4, r5, lr}
 8008d8e:	6902      	ldr	r2, [r0, #16]
 8008d90:	690c      	ldr	r4, [r1, #16]
 8008d92:	1b12      	subs	r2, r2, r4
 8008d94:	d10e      	bne.n	8008db4 <__mcmp+0x28>
 8008d96:	f100 0314 	add.w	r3, r0, #20
 8008d9a:	3114      	adds	r1, #20
 8008d9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008da0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008da4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008da8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008dac:	42a5      	cmp	r5, r4
 8008dae:	d003      	beq.n	8008db8 <__mcmp+0x2c>
 8008db0:	d305      	bcc.n	8008dbe <__mcmp+0x32>
 8008db2:	2201      	movs	r2, #1
 8008db4:	4610      	mov	r0, r2
 8008db6:	bd30      	pop	{r4, r5, pc}
 8008db8:	4283      	cmp	r3, r0
 8008dba:	d3f3      	bcc.n	8008da4 <__mcmp+0x18>
 8008dbc:	e7fa      	b.n	8008db4 <__mcmp+0x28>
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	e7f7      	b.n	8008db4 <__mcmp+0x28>

08008dc4 <__mdiff>:
 8008dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	460c      	mov	r4, r1
 8008dca:	4606      	mov	r6, r0
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4690      	mov	r8, r2
 8008dd2:	f7ff ffdb 	bl	8008d8c <__mcmp>
 8008dd6:	1e05      	subs	r5, r0, #0
 8008dd8:	d110      	bne.n	8008dfc <__mdiff+0x38>
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f7ff fd53 	bl	8008888 <_Balloc>
 8008de2:	b930      	cbnz	r0, 8008df2 <__mdiff+0x2e>
 8008de4:	4b3a      	ldr	r3, [pc, #232]	; (8008ed0 <__mdiff+0x10c>)
 8008de6:	4602      	mov	r2, r0
 8008de8:	f240 2132 	movw	r1, #562	; 0x232
 8008dec:	4839      	ldr	r0, [pc, #228]	; (8008ed4 <__mdiff+0x110>)
 8008dee:	f000 fb85 	bl	80094fc <__assert_func>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfc:	bfa4      	itt	ge
 8008dfe:	4643      	movge	r3, r8
 8008e00:	46a0      	movge	r8, r4
 8008e02:	4630      	mov	r0, r6
 8008e04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e08:	bfa6      	itte	ge
 8008e0a:	461c      	movge	r4, r3
 8008e0c:	2500      	movge	r5, #0
 8008e0e:	2501      	movlt	r5, #1
 8008e10:	f7ff fd3a 	bl	8008888 <_Balloc>
 8008e14:	b920      	cbnz	r0, 8008e20 <__mdiff+0x5c>
 8008e16:	4b2e      	ldr	r3, [pc, #184]	; (8008ed0 <__mdiff+0x10c>)
 8008e18:	4602      	mov	r2, r0
 8008e1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008e1e:	e7e5      	b.n	8008dec <__mdiff+0x28>
 8008e20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e24:	6926      	ldr	r6, [r4, #16]
 8008e26:	60c5      	str	r5, [r0, #12]
 8008e28:	f104 0914 	add.w	r9, r4, #20
 8008e2c:	f108 0514 	add.w	r5, r8, #20
 8008e30:	f100 0e14 	add.w	lr, r0, #20
 8008e34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e3c:	f108 0210 	add.w	r2, r8, #16
 8008e40:	46f2      	mov	sl, lr
 8008e42:	2100      	movs	r1, #0
 8008e44:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e4c:	fa1f f883 	uxth.w	r8, r3
 8008e50:	fa11 f18b 	uxtah	r1, r1, fp
 8008e54:	0c1b      	lsrs	r3, r3, #16
 8008e56:	eba1 0808 	sub.w	r8, r1, r8
 8008e5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e62:	fa1f f888 	uxth.w	r8, r8
 8008e66:	1419      	asrs	r1, r3, #16
 8008e68:	454e      	cmp	r6, r9
 8008e6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e6e:	f84a 3b04 	str.w	r3, [sl], #4
 8008e72:	d8e7      	bhi.n	8008e44 <__mdiff+0x80>
 8008e74:	1b33      	subs	r3, r6, r4
 8008e76:	3b15      	subs	r3, #21
 8008e78:	f023 0303 	bic.w	r3, r3, #3
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	3415      	adds	r4, #21
 8008e80:	42a6      	cmp	r6, r4
 8008e82:	bf38      	it	cc
 8008e84:	2304      	movcc	r3, #4
 8008e86:	441d      	add	r5, r3
 8008e88:	4473      	add	r3, lr
 8008e8a:	469e      	mov	lr, r3
 8008e8c:	462e      	mov	r6, r5
 8008e8e:	4566      	cmp	r6, ip
 8008e90:	d30e      	bcc.n	8008eb0 <__mdiff+0xec>
 8008e92:	f10c 0203 	add.w	r2, ip, #3
 8008e96:	1b52      	subs	r2, r2, r5
 8008e98:	f022 0203 	bic.w	r2, r2, #3
 8008e9c:	3d03      	subs	r5, #3
 8008e9e:	45ac      	cmp	ip, r5
 8008ea0:	bf38      	it	cc
 8008ea2:	2200      	movcc	r2, #0
 8008ea4:	441a      	add	r2, r3
 8008ea6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008eaa:	b17b      	cbz	r3, 8008ecc <__mdiff+0x108>
 8008eac:	6107      	str	r7, [r0, #16]
 8008eae:	e7a3      	b.n	8008df8 <__mdiff+0x34>
 8008eb0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008eb4:	fa11 f288 	uxtah	r2, r1, r8
 8008eb8:	1414      	asrs	r4, r2, #16
 8008eba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ebe:	b292      	uxth	r2, r2
 8008ec0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ec4:	f84e 2b04 	str.w	r2, [lr], #4
 8008ec8:	1421      	asrs	r1, r4, #16
 8008eca:	e7e0      	b.n	8008e8e <__mdiff+0xca>
 8008ecc:	3f01      	subs	r7, #1
 8008ece:	e7ea      	b.n	8008ea6 <__mdiff+0xe2>
 8008ed0:	08009aaf 	.word	0x08009aaf
 8008ed4:	08009b20 	.word	0x08009b20

08008ed8 <__d2b>:
 8008ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008edc:	4689      	mov	r9, r1
 8008ede:	2101      	movs	r1, #1
 8008ee0:	ec57 6b10 	vmov	r6, r7, d0
 8008ee4:	4690      	mov	r8, r2
 8008ee6:	f7ff fccf 	bl	8008888 <_Balloc>
 8008eea:	4604      	mov	r4, r0
 8008eec:	b930      	cbnz	r0, 8008efc <__d2b+0x24>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	4b25      	ldr	r3, [pc, #148]	; (8008f88 <__d2b+0xb0>)
 8008ef2:	4826      	ldr	r0, [pc, #152]	; (8008f8c <__d2b+0xb4>)
 8008ef4:	f240 310a 	movw	r1, #778	; 0x30a
 8008ef8:	f000 fb00 	bl	80094fc <__assert_func>
 8008efc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008f00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008f04:	bb35      	cbnz	r5, 8008f54 <__d2b+0x7c>
 8008f06:	2e00      	cmp	r6, #0
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	d028      	beq.n	8008f5e <__d2b+0x86>
 8008f0c:	4668      	mov	r0, sp
 8008f0e:	9600      	str	r6, [sp, #0]
 8008f10:	f7ff fd82 	bl	8008a18 <__lo0bits>
 8008f14:	9900      	ldr	r1, [sp, #0]
 8008f16:	b300      	cbz	r0, 8008f5a <__d2b+0x82>
 8008f18:	9a01      	ldr	r2, [sp, #4]
 8008f1a:	f1c0 0320 	rsb	r3, r0, #32
 8008f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f22:	430b      	orrs	r3, r1
 8008f24:	40c2      	lsrs	r2, r0
 8008f26:	6163      	str	r3, [r4, #20]
 8008f28:	9201      	str	r2, [sp, #4]
 8008f2a:	9b01      	ldr	r3, [sp, #4]
 8008f2c:	61a3      	str	r3, [r4, #24]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	bf14      	ite	ne
 8008f32:	2202      	movne	r2, #2
 8008f34:	2201      	moveq	r2, #1
 8008f36:	6122      	str	r2, [r4, #16]
 8008f38:	b1d5      	cbz	r5, 8008f70 <__d2b+0x98>
 8008f3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f3e:	4405      	add	r5, r0
 8008f40:	f8c9 5000 	str.w	r5, [r9]
 8008f44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f48:	f8c8 0000 	str.w	r0, [r8]
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	b003      	add	sp, #12
 8008f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f58:	e7d5      	b.n	8008f06 <__d2b+0x2e>
 8008f5a:	6161      	str	r1, [r4, #20]
 8008f5c:	e7e5      	b.n	8008f2a <__d2b+0x52>
 8008f5e:	a801      	add	r0, sp, #4
 8008f60:	f7ff fd5a 	bl	8008a18 <__lo0bits>
 8008f64:	9b01      	ldr	r3, [sp, #4]
 8008f66:	6163      	str	r3, [r4, #20]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	6122      	str	r2, [r4, #16]
 8008f6c:	3020      	adds	r0, #32
 8008f6e:	e7e3      	b.n	8008f38 <__d2b+0x60>
 8008f70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f78:	f8c9 0000 	str.w	r0, [r9]
 8008f7c:	6918      	ldr	r0, [r3, #16]
 8008f7e:	f7ff fd2b 	bl	80089d8 <__hi0bits>
 8008f82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f86:	e7df      	b.n	8008f48 <__d2b+0x70>
 8008f88:	08009aaf 	.word	0x08009aaf
 8008f8c:	08009b20 	.word	0x08009b20

08008f90 <_calloc_r>:
 8008f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f92:	fba1 2402 	umull	r2, r4, r1, r2
 8008f96:	b94c      	cbnz	r4, 8008fac <_calloc_r+0x1c>
 8008f98:	4611      	mov	r1, r2
 8008f9a:	9201      	str	r2, [sp, #4]
 8008f9c:	f000 f87a 	bl	8009094 <_malloc_r>
 8008fa0:	9a01      	ldr	r2, [sp, #4]
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	b930      	cbnz	r0, 8008fb4 <_calloc_r+0x24>
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	b003      	add	sp, #12
 8008faa:	bd30      	pop	{r4, r5, pc}
 8008fac:	220c      	movs	r2, #12
 8008fae:	6002      	str	r2, [r0, #0]
 8008fb0:	2500      	movs	r5, #0
 8008fb2:	e7f8      	b.n	8008fa6 <_calloc_r+0x16>
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	f7fd fdf3 	bl	8006ba0 <memset>
 8008fba:	e7f4      	b.n	8008fa6 <_calloc_r+0x16>

08008fbc <_free_r>:
 8008fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	d044      	beq.n	800904c <_free_r+0x90>
 8008fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc6:	9001      	str	r0, [sp, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f1a1 0404 	sub.w	r4, r1, #4
 8008fce:	bfb8      	it	lt
 8008fd0:	18e4      	addlt	r4, r4, r3
 8008fd2:	f000 fb19 	bl	8009608 <__malloc_lock>
 8008fd6:	4a1e      	ldr	r2, [pc, #120]	; (8009050 <_free_r+0x94>)
 8008fd8:	9801      	ldr	r0, [sp, #4]
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	b933      	cbnz	r3, 8008fec <_free_r+0x30>
 8008fde:	6063      	str	r3, [r4, #4]
 8008fe0:	6014      	str	r4, [r2, #0]
 8008fe2:	b003      	add	sp, #12
 8008fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe8:	f000 bb14 	b.w	8009614 <__malloc_unlock>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d908      	bls.n	8009002 <_free_r+0x46>
 8008ff0:	6825      	ldr	r5, [r4, #0]
 8008ff2:	1961      	adds	r1, r4, r5
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	bf01      	itttt	eq
 8008ff8:	6819      	ldreq	r1, [r3, #0]
 8008ffa:	685b      	ldreq	r3, [r3, #4]
 8008ffc:	1949      	addeq	r1, r1, r5
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	e7ed      	b.n	8008fde <_free_r+0x22>
 8009002:	461a      	mov	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b10b      	cbz	r3, 800900c <_free_r+0x50>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x46>
 800900c:	6811      	ldr	r1, [r2, #0]
 800900e:	1855      	adds	r5, r2, r1
 8009010:	42a5      	cmp	r5, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x70>
 8009014:	6824      	ldr	r4, [r4, #0]
 8009016:	4421      	add	r1, r4
 8009018:	1854      	adds	r4, r2, r1
 800901a:	42a3      	cmp	r3, r4
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	d1e0      	bne.n	8008fe2 <_free_r+0x26>
 8009020:	681c      	ldr	r4, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	4421      	add	r1, r4
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	e7da      	b.n	8008fe2 <_free_r+0x26>
 800902c:	d902      	bls.n	8009034 <_free_r+0x78>
 800902e:	230c      	movs	r3, #12
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	e7d6      	b.n	8008fe2 <_free_r+0x26>
 8009034:	6825      	ldr	r5, [r4, #0]
 8009036:	1961      	adds	r1, r4, r5
 8009038:	428b      	cmp	r3, r1
 800903a:	bf04      	itt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1949      	addeq	r1, r1, r5
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6054      	str	r4, [r2, #4]
 800904a:	e7ca      	b.n	8008fe2 <_free_r+0x26>
 800904c:	b003      	add	sp, #12
 800904e:	bd30      	pop	{r4, r5, pc}
 8009050:	20001590 	.word	0x20001590

08009054 <sbrk_aligned>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	4e0e      	ldr	r6, [pc, #56]	; (8009090 <sbrk_aligned+0x3c>)
 8009058:	460c      	mov	r4, r1
 800905a:	6831      	ldr	r1, [r6, #0]
 800905c:	4605      	mov	r5, r0
 800905e:	b911      	cbnz	r1, 8009066 <sbrk_aligned+0x12>
 8009060:	f000 f9e6 	bl	8009430 <_sbrk_r>
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	4621      	mov	r1, r4
 8009068:	4628      	mov	r0, r5
 800906a:	f000 f9e1 	bl	8009430 <_sbrk_r>
 800906e:	1c43      	adds	r3, r0, #1
 8009070:	d00a      	beq.n	8009088 <sbrk_aligned+0x34>
 8009072:	1cc4      	adds	r4, r0, #3
 8009074:	f024 0403 	bic.w	r4, r4, #3
 8009078:	42a0      	cmp	r0, r4
 800907a:	d007      	beq.n	800908c <sbrk_aligned+0x38>
 800907c:	1a21      	subs	r1, r4, r0
 800907e:	4628      	mov	r0, r5
 8009080:	f000 f9d6 	bl	8009430 <_sbrk_r>
 8009084:	3001      	adds	r0, #1
 8009086:	d101      	bne.n	800908c <sbrk_aligned+0x38>
 8009088:	f04f 34ff 	mov.w	r4, #4294967295
 800908c:	4620      	mov	r0, r4
 800908e:	bd70      	pop	{r4, r5, r6, pc}
 8009090:	20001594 	.word	0x20001594

08009094 <_malloc_r>:
 8009094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009098:	1ccd      	adds	r5, r1, #3
 800909a:	f025 0503 	bic.w	r5, r5, #3
 800909e:	3508      	adds	r5, #8
 80090a0:	2d0c      	cmp	r5, #12
 80090a2:	bf38      	it	cc
 80090a4:	250c      	movcc	r5, #12
 80090a6:	2d00      	cmp	r5, #0
 80090a8:	4607      	mov	r7, r0
 80090aa:	db01      	blt.n	80090b0 <_malloc_r+0x1c>
 80090ac:	42a9      	cmp	r1, r5
 80090ae:	d905      	bls.n	80090bc <_malloc_r+0x28>
 80090b0:	230c      	movs	r3, #12
 80090b2:	603b      	str	r3, [r7, #0]
 80090b4:	2600      	movs	r6, #0
 80090b6:	4630      	mov	r0, r6
 80090b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090bc:	4e2e      	ldr	r6, [pc, #184]	; (8009178 <_malloc_r+0xe4>)
 80090be:	f000 faa3 	bl	8009608 <__malloc_lock>
 80090c2:	6833      	ldr	r3, [r6, #0]
 80090c4:	461c      	mov	r4, r3
 80090c6:	bb34      	cbnz	r4, 8009116 <_malloc_r+0x82>
 80090c8:	4629      	mov	r1, r5
 80090ca:	4638      	mov	r0, r7
 80090cc:	f7ff ffc2 	bl	8009054 <sbrk_aligned>
 80090d0:	1c43      	adds	r3, r0, #1
 80090d2:	4604      	mov	r4, r0
 80090d4:	d14d      	bne.n	8009172 <_malloc_r+0xde>
 80090d6:	6834      	ldr	r4, [r6, #0]
 80090d8:	4626      	mov	r6, r4
 80090da:	2e00      	cmp	r6, #0
 80090dc:	d140      	bne.n	8009160 <_malloc_r+0xcc>
 80090de:	6823      	ldr	r3, [r4, #0]
 80090e0:	4631      	mov	r1, r6
 80090e2:	4638      	mov	r0, r7
 80090e4:	eb04 0803 	add.w	r8, r4, r3
 80090e8:	f000 f9a2 	bl	8009430 <_sbrk_r>
 80090ec:	4580      	cmp	r8, r0
 80090ee:	d13a      	bne.n	8009166 <_malloc_r+0xd2>
 80090f0:	6821      	ldr	r1, [r4, #0]
 80090f2:	3503      	adds	r5, #3
 80090f4:	1a6d      	subs	r5, r5, r1
 80090f6:	f025 0503 	bic.w	r5, r5, #3
 80090fa:	3508      	adds	r5, #8
 80090fc:	2d0c      	cmp	r5, #12
 80090fe:	bf38      	it	cc
 8009100:	250c      	movcc	r5, #12
 8009102:	4629      	mov	r1, r5
 8009104:	4638      	mov	r0, r7
 8009106:	f7ff ffa5 	bl	8009054 <sbrk_aligned>
 800910a:	3001      	adds	r0, #1
 800910c:	d02b      	beq.n	8009166 <_malloc_r+0xd2>
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	442b      	add	r3, r5
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	e00e      	b.n	8009134 <_malloc_r+0xa0>
 8009116:	6822      	ldr	r2, [r4, #0]
 8009118:	1b52      	subs	r2, r2, r5
 800911a:	d41e      	bmi.n	800915a <_malloc_r+0xc6>
 800911c:	2a0b      	cmp	r2, #11
 800911e:	d916      	bls.n	800914e <_malloc_r+0xba>
 8009120:	1961      	adds	r1, r4, r5
 8009122:	42a3      	cmp	r3, r4
 8009124:	6025      	str	r5, [r4, #0]
 8009126:	bf18      	it	ne
 8009128:	6059      	strne	r1, [r3, #4]
 800912a:	6863      	ldr	r3, [r4, #4]
 800912c:	bf08      	it	eq
 800912e:	6031      	streq	r1, [r6, #0]
 8009130:	5162      	str	r2, [r4, r5]
 8009132:	604b      	str	r3, [r1, #4]
 8009134:	4638      	mov	r0, r7
 8009136:	f104 060b 	add.w	r6, r4, #11
 800913a:	f000 fa6b 	bl	8009614 <__malloc_unlock>
 800913e:	f026 0607 	bic.w	r6, r6, #7
 8009142:	1d23      	adds	r3, r4, #4
 8009144:	1af2      	subs	r2, r6, r3
 8009146:	d0b6      	beq.n	80090b6 <_malloc_r+0x22>
 8009148:	1b9b      	subs	r3, r3, r6
 800914a:	50a3      	str	r3, [r4, r2]
 800914c:	e7b3      	b.n	80090b6 <_malloc_r+0x22>
 800914e:	6862      	ldr	r2, [r4, #4]
 8009150:	42a3      	cmp	r3, r4
 8009152:	bf0c      	ite	eq
 8009154:	6032      	streq	r2, [r6, #0]
 8009156:	605a      	strne	r2, [r3, #4]
 8009158:	e7ec      	b.n	8009134 <_malloc_r+0xa0>
 800915a:	4623      	mov	r3, r4
 800915c:	6864      	ldr	r4, [r4, #4]
 800915e:	e7b2      	b.n	80090c6 <_malloc_r+0x32>
 8009160:	4634      	mov	r4, r6
 8009162:	6876      	ldr	r6, [r6, #4]
 8009164:	e7b9      	b.n	80090da <_malloc_r+0x46>
 8009166:	230c      	movs	r3, #12
 8009168:	603b      	str	r3, [r7, #0]
 800916a:	4638      	mov	r0, r7
 800916c:	f000 fa52 	bl	8009614 <__malloc_unlock>
 8009170:	e7a1      	b.n	80090b6 <_malloc_r+0x22>
 8009172:	6025      	str	r5, [r4, #0]
 8009174:	e7de      	b.n	8009134 <_malloc_r+0xa0>
 8009176:	bf00      	nop
 8009178:	20001590 	.word	0x20001590

0800917c <__sfputc_r>:
 800917c:	6893      	ldr	r3, [r2, #8]
 800917e:	3b01      	subs	r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	b410      	push	{r4}
 8009184:	6093      	str	r3, [r2, #8]
 8009186:	da08      	bge.n	800919a <__sfputc_r+0x1e>
 8009188:	6994      	ldr	r4, [r2, #24]
 800918a:	42a3      	cmp	r3, r4
 800918c:	db01      	blt.n	8009192 <__sfputc_r+0x16>
 800918e:	290a      	cmp	r1, #10
 8009190:	d103      	bne.n	800919a <__sfputc_r+0x1e>
 8009192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009196:	f7fe ba03 	b.w	80075a0 <__swbuf_r>
 800919a:	6813      	ldr	r3, [r2, #0]
 800919c:	1c58      	adds	r0, r3, #1
 800919e:	6010      	str	r0, [r2, #0]
 80091a0:	7019      	strb	r1, [r3, #0]
 80091a2:	4608      	mov	r0, r1
 80091a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <__sfputs_r>:
 80091aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ac:	4606      	mov	r6, r0
 80091ae:	460f      	mov	r7, r1
 80091b0:	4614      	mov	r4, r2
 80091b2:	18d5      	adds	r5, r2, r3
 80091b4:	42ac      	cmp	r4, r5
 80091b6:	d101      	bne.n	80091bc <__sfputs_r+0x12>
 80091b8:	2000      	movs	r0, #0
 80091ba:	e007      	b.n	80091cc <__sfputs_r+0x22>
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	463a      	mov	r2, r7
 80091c2:	4630      	mov	r0, r6
 80091c4:	f7ff ffda 	bl	800917c <__sfputc_r>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d1f3      	bne.n	80091b4 <__sfputs_r+0xa>
 80091cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080091d0 <_vfiprintf_r>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	460d      	mov	r5, r1
 80091d6:	b09d      	sub	sp, #116	; 0x74
 80091d8:	4614      	mov	r4, r2
 80091da:	4698      	mov	r8, r3
 80091dc:	4606      	mov	r6, r0
 80091de:	b118      	cbz	r0, 80091e8 <_vfiprintf_r+0x18>
 80091e0:	6983      	ldr	r3, [r0, #24]
 80091e2:	b90b      	cbnz	r3, 80091e8 <_vfiprintf_r+0x18>
 80091e4:	f7ff fa30 	bl	8008648 <__sinit>
 80091e8:	4b89      	ldr	r3, [pc, #548]	; (8009410 <_vfiprintf_r+0x240>)
 80091ea:	429d      	cmp	r5, r3
 80091ec:	d11b      	bne.n	8009226 <_vfiprintf_r+0x56>
 80091ee:	6875      	ldr	r5, [r6, #4]
 80091f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091f2:	07d9      	lsls	r1, r3, #31
 80091f4:	d405      	bmi.n	8009202 <_vfiprintf_r+0x32>
 80091f6:	89ab      	ldrh	r3, [r5, #12]
 80091f8:	059a      	lsls	r2, r3, #22
 80091fa:	d402      	bmi.n	8009202 <_vfiprintf_r+0x32>
 80091fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091fe:	f7ff fac6 	bl	800878e <__retarget_lock_acquire_recursive>
 8009202:	89ab      	ldrh	r3, [r5, #12]
 8009204:	071b      	lsls	r3, r3, #28
 8009206:	d501      	bpl.n	800920c <_vfiprintf_r+0x3c>
 8009208:	692b      	ldr	r3, [r5, #16]
 800920a:	b9eb      	cbnz	r3, 8009248 <_vfiprintf_r+0x78>
 800920c:	4629      	mov	r1, r5
 800920e:	4630      	mov	r0, r6
 8009210:	f7fe fa18 	bl	8007644 <__swsetup_r>
 8009214:	b1c0      	cbz	r0, 8009248 <_vfiprintf_r+0x78>
 8009216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009218:	07dc      	lsls	r4, r3, #31
 800921a:	d50e      	bpl.n	800923a <_vfiprintf_r+0x6a>
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	b01d      	add	sp, #116	; 0x74
 8009222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009226:	4b7b      	ldr	r3, [pc, #492]	; (8009414 <_vfiprintf_r+0x244>)
 8009228:	429d      	cmp	r5, r3
 800922a:	d101      	bne.n	8009230 <_vfiprintf_r+0x60>
 800922c:	68b5      	ldr	r5, [r6, #8]
 800922e:	e7df      	b.n	80091f0 <_vfiprintf_r+0x20>
 8009230:	4b79      	ldr	r3, [pc, #484]	; (8009418 <_vfiprintf_r+0x248>)
 8009232:	429d      	cmp	r5, r3
 8009234:	bf08      	it	eq
 8009236:	68f5      	ldreq	r5, [r6, #12]
 8009238:	e7da      	b.n	80091f0 <_vfiprintf_r+0x20>
 800923a:	89ab      	ldrh	r3, [r5, #12]
 800923c:	0598      	lsls	r0, r3, #22
 800923e:	d4ed      	bmi.n	800921c <_vfiprintf_r+0x4c>
 8009240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009242:	f7ff faa5 	bl	8008790 <__retarget_lock_release_recursive>
 8009246:	e7e9      	b.n	800921c <_vfiprintf_r+0x4c>
 8009248:	2300      	movs	r3, #0
 800924a:	9309      	str	r3, [sp, #36]	; 0x24
 800924c:	2320      	movs	r3, #32
 800924e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009252:	f8cd 800c 	str.w	r8, [sp, #12]
 8009256:	2330      	movs	r3, #48	; 0x30
 8009258:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800941c <_vfiprintf_r+0x24c>
 800925c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009260:	f04f 0901 	mov.w	r9, #1
 8009264:	4623      	mov	r3, r4
 8009266:	469a      	mov	sl, r3
 8009268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800926c:	b10a      	cbz	r2, 8009272 <_vfiprintf_r+0xa2>
 800926e:	2a25      	cmp	r2, #37	; 0x25
 8009270:	d1f9      	bne.n	8009266 <_vfiprintf_r+0x96>
 8009272:	ebba 0b04 	subs.w	fp, sl, r4
 8009276:	d00b      	beq.n	8009290 <_vfiprintf_r+0xc0>
 8009278:	465b      	mov	r3, fp
 800927a:	4622      	mov	r2, r4
 800927c:	4629      	mov	r1, r5
 800927e:	4630      	mov	r0, r6
 8009280:	f7ff ff93 	bl	80091aa <__sfputs_r>
 8009284:	3001      	adds	r0, #1
 8009286:	f000 80aa 	beq.w	80093de <_vfiprintf_r+0x20e>
 800928a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800928c:	445a      	add	r2, fp
 800928e:	9209      	str	r2, [sp, #36]	; 0x24
 8009290:	f89a 3000 	ldrb.w	r3, [sl]
 8009294:	2b00      	cmp	r3, #0
 8009296:	f000 80a2 	beq.w	80093de <_vfiprintf_r+0x20e>
 800929a:	2300      	movs	r3, #0
 800929c:	f04f 32ff 	mov.w	r2, #4294967295
 80092a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092a4:	f10a 0a01 	add.w	sl, sl, #1
 80092a8:	9304      	str	r3, [sp, #16]
 80092aa:	9307      	str	r3, [sp, #28]
 80092ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092b0:	931a      	str	r3, [sp, #104]	; 0x68
 80092b2:	4654      	mov	r4, sl
 80092b4:	2205      	movs	r2, #5
 80092b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ba:	4858      	ldr	r0, [pc, #352]	; (800941c <_vfiprintf_r+0x24c>)
 80092bc:	f7f6 ff90 	bl	80001e0 <memchr>
 80092c0:	9a04      	ldr	r2, [sp, #16]
 80092c2:	b9d8      	cbnz	r0, 80092fc <_vfiprintf_r+0x12c>
 80092c4:	06d1      	lsls	r1, r2, #27
 80092c6:	bf44      	itt	mi
 80092c8:	2320      	movmi	r3, #32
 80092ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ce:	0713      	lsls	r3, r2, #28
 80092d0:	bf44      	itt	mi
 80092d2:	232b      	movmi	r3, #43	; 0x2b
 80092d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092d8:	f89a 3000 	ldrb.w	r3, [sl]
 80092dc:	2b2a      	cmp	r3, #42	; 0x2a
 80092de:	d015      	beq.n	800930c <_vfiprintf_r+0x13c>
 80092e0:	9a07      	ldr	r2, [sp, #28]
 80092e2:	4654      	mov	r4, sl
 80092e4:	2000      	movs	r0, #0
 80092e6:	f04f 0c0a 	mov.w	ip, #10
 80092ea:	4621      	mov	r1, r4
 80092ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092f0:	3b30      	subs	r3, #48	; 0x30
 80092f2:	2b09      	cmp	r3, #9
 80092f4:	d94e      	bls.n	8009394 <_vfiprintf_r+0x1c4>
 80092f6:	b1b0      	cbz	r0, 8009326 <_vfiprintf_r+0x156>
 80092f8:	9207      	str	r2, [sp, #28]
 80092fa:	e014      	b.n	8009326 <_vfiprintf_r+0x156>
 80092fc:	eba0 0308 	sub.w	r3, r0, r8
 8009300:	fa09 f303 	lsl.w	r3, r9, r3
 8009304:	4313      	orrs	r3, r2
 8009306:	9304      	str	r3, [sp, #16]
 8009308:	46a2      	mov	sl, r4
 800930a:	e7d2      	b.n	80092b2 <_vfiprintf_r+0xe2>
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	1d19      	adds	r1, r3, #4
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	9103      	str	r1, [sp, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	bfbb      	ittet	lt
 8009318:	425b      	neglt	r3, r3
 800931a:	f042 0202 	orrlt.w	r2, r2, #2
 800931e:	9307      	strge	r3, [sp, #28]
 8009320:	9307      	strlt	r3, [sp, #28]
 8009322:	bfb8      	it	lt
 8009324:	9204      	strlt	r2, [sp, #16]
 8009326:	7823      	ldrb	r3, [r4, #0]
 8009328:	2b2e      	cmp	r3, #46	; 0x2e
 800932a:	d10c      	bne.n	8009346 <_vfiprintf_r+0x176>
 800932c:	7863      	ldrb	r3, [r4, #1]
 800932e:	2b2a      	cmp	r3, #42	; 0x2a
 8009330:	d135      	bne.n	800939e <_vfiprintf_r+0x1ce>
 8009332:	9b03      	ldr	r3, [sp, #12]
 8009334:	1d1a      	adds	r2, r3, #4
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	9203      	str	r2, [sp, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfb8      	it	lt
 800933e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009342:	3402      	adds	r4, #2
 8009344:	9305      	str	r3, [sp, #20]
 8009346:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800942c <_vfiprintf_r+0x25c>
 800934a:	7821      	ldrb	r1, [r4, #0]
 800934c:	2203      	movs	r2, #3
 800934e:	4650      	mov	r0, sl
 8009350:	f7f6 ff46 	bl	80001e0 <memchr>
 8009354:	b140      	cbz	r0, 8009368 <_vfiprintf_r+0x198>
 8009356:	2340      	movs	r3, #64	; 0x40
 8009358:	eba0 000a 	sub.w	r0, r0, sl
 800935c:	fa03 f000 	lsl.w	r0, r3, r0
 8009360:	9b04      	ldr	r3, [sp, #16]
 8009362:	4303      	orrs	r3, r0
 8009364:	3401      	adds	r4, #1
 8009366:	9304      	str	r3, [sp, #16]
 8009368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800936c:	482c      	ldr	r0, [pc, #176]	; (8009420 <_vfiprintf_r+0x250>)
 800936e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009372:	2206      	movs	r2, #6
 8009374:	f7f6 ff34 	bl	80001e0 <memchr>
 8009378:	2800      	cmp	r0, #0
 800937a:	d03f      	beq.n	80093fc <_vfiprintf_r+0x22c>
 800937c:	4b29      	ldr	r3, [pc, #164]	; (8009424 <_vfiprintf_r+0x254>)
 800937e:	bb1b      	cbnz	r3, 80093c8 <_vfiprintf_r+0x1f8>
 8009380:	9b03      	ldr	r3, [sp, #12]
 8009382:	3307      	adds	r3, #7
 8009384:	f023 0307 	bic.w	r3, r3, #7
 8009388:	3308      	adds	r3, #8
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938e:	443b      	add	r3, r7
 8009390:	9309      	str	r3, [sp, #36]	; 0x24
 8009392:	e767      	b.n	8009264 <_vfiprintf_r+0x94>
 8009394:	fb0c 3202 	mla	r2, ip, r2, r3
 8009398:	460c      	mov	r4, r1
 800939a:	2001      	movs	r0, #1
 800939c:	e7a5      	b.n	80092ea <_vfiprintf_r+0x11a>
 800939e:	2300      	movs	r3, #0
 80093a0:	3401      	adds	r4, #1
 80093a2:	9305      	str	r3, [sp, #20]
 80093a4:	4619      	mov	r1, r3
 80093a6:	f04f 0c0a 	mov.w	ip, #10
 80093aa:	4620      	mov	r0, r4
 80093ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093b0:	3a30      	subs	r2, #48	; 0x30
 80093b2:	2a09      	cmp	r2, #9
 80093b4:	d903      	bls.n	80093be <_vfiprintf_r+0x1ee>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d0c5      	beq.n	8009346 <_vfiprintf_r+0x176>
 80093ba:	9105      	str	r1, [sp, #20]
 80093bc:	e7c3      	b.n	8009346 <_vfiprintf_r+0x176>
 80093be:	fb0c 2101 	mla	r1, ip, r1, r2
 80093c2:	4604      	mov	r4, r0
 80093c4:	2301      	movs	r3, #1
 80093c6:	e7f0      	b.n	80093aa <_vfiprintf_r+0x1da>
 80093c8:	ab03      	add	r3, sp, #12
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	462a      	mov	r2, r5
 80093ce:	4b16      	ldr	r3, [pc, #88]	; (8009428 <_vfiprintf_r+0x258>)
 80093d0:	a904      	add	r1, sp, #16
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7fd fc8c 	bl	8006cf0 <_printf_float>
 80093d8:	4607      	mov	r7, r0
 80093da:	1c78      	adds	r0, r7, #1
 80093dc:	d1d6      	bne.n	800938c <_vfiprintf_r+0x1bc>
 80093de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093e0:	07d9      	lsls	r1, r3, #31
 80093e2:	d405      	bmi.n	80093f0 <_vfiprintf_r+0x220>
 80093e4:	89ab      	ldrh	r3, [r5, #12]
 80093e6:	059a      	lsls	r2, r3, #22
 80093e8:	d402      	bmi.n	80093f0 <_vfiprintf_r+0x220>
 80093ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ec:	f7ff f9d0 	bl	8008790 <__retarget_lock_release_recursive>
 80093f0:	89ab      	ldrh	r3, [r5, #12]
 80093f2:	065b      	lsls	r3, r3, #25
 80093f4:	f53f af12 	bmi.w	800921c <_vfiprintf_r+0x4c>
 80093f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093fa:	e711      	b.n	8009220 <_vfiprintf_r+0x50>
 80093fc:	ab03      	add	r3, sp, #12
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	462a      	mov	r2, r5
 8009402:	4b09      	ldr	r3, [pc, #36]	; (8009428 <_vfiprintf_r+0x258>)
 8009404:	a904      	add	r1, sp, #16
 8009406:	4630      	mov	r0, r6
 8009408:	f7fd ff16 	bl	8007238 <_printf_i>
 800940c:	e7e4      	b.n	80093d8 <_vfiprintf_r+0x208>
 800940e:	bf00      	nop
 8009410:	08009ae0 	.word	0x08009ae0
 8009414:	08009b00 	.word	0x08009b00
 8009418:	08009ac0 	.word	0x08009ac0
 800941c:	08009c7c 	.word	0x08009c7c
 8009420:	08009c86 	.word	0x08009c86
 8009424:	08006cf1 	.word	0x08006cf1
 8009428:	080091ab 	.word	0x080091ab
 800942c:	08009c82 	.word	0x08009c82

08009430 <_sbrk_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d06      	ldr	r5, [pc, #24]	; (800944c <_sbrk_r+0x1c>)
 8009434:	2300      	movs	r3, #0
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	602b      	str	r3, [r5, #0]
 800943c:	f7f8 fcac 	bl	8001d98 <_sbrk>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_sbrk_r+0x1a>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_sbrk_r+0x1a>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20001598 	.word	0x20001598

08009450 <__sread>:
 8009450:	b510      	push	{r4, lr}
 8009452:	460c      	mov	r4, r1
 8009454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009458:	f000 f8e2 	bl	8009620 <_read_r>
 800945c:	2800      	cmp	r0, #0
 800945e:	bfab      	itete	ge
 8009460:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009462:	89a3      	ldrhlt	r3, [r4, #12]
 8009464:	181b      	addge	r3, r3, r0
 8009466:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800946a:	bfac      	ite	ge
 800946c:	6563      	strge	r3, [r4, #84]	; 0x54
 800946e:	81a3      	strhlt	r3, [r4, #12]
 8009470:	bd10      	pop	{r4, pc}

08009472 <__swrite>:
 8009472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009476:	461f      	mov	r7, r3
 8009478:	898b      	ldrh	r3, [r1, #12]
 800947a:	05db      	lsls	r3, r3, #23
 800947c:	4605      	mov	r5, r0
 800947e:	460c      	mov	r4, r1
 8009480:	4616      	mov	r6, r2
 8009482:	d505      	bpl.n	8009490 <__swrite+0x1e>
 8009484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009488:	2302      	movs	r3, #2
 800948a:	2200      	movs	r2, #0
 800948c:	f000 f898 	bl	80095c0 <_lseek_r>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800949a:	81a3      	strh	r3, [r4, #12]
 800949c:	4632      	mov	r2, r6
 800949e:	463b      	mov	r3, r7
 80094a0:	4628      	mov	r0, r5
 80094a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094a6:	f000 b817 	b.w	80094d8 <_write_r>

080094aa <__sseek>:
 80094aa:	b510      	push	{r4, lr}
 80094ac:	460c      	mov	r4, r1
 80094ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b2:	f000 f885 	bl	80095c0 <_lseek_r>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	89a3      	ldrh	r3, [r4, #12]
 80094ba:	bf15      	itete	ne
 80094bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80094be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094c6:	81a3      	strheq	r3, [r4, #12]
 80094c8:	bf18      	it	ne
 80094ca:	81a3      	strhne	r3, [r4, #12]
 80094cc:	bd10      	pop	{r4, pc}

080094ce <__sclose>:
 80094ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094d2:	f000 b831 	b.w	8009538 <_close_r>
	...

080094d8 <_write_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d07      	ldr	r5, [pc, #28]	; (80094f8 <_write_r+0x20>)
 80094dc:	4604      	mov	r4, r0
 80094de:	4608      	mov	r0, r1
 80094e0:	4611      	mov	r1, r2
 80094e2:	2200      	movs	r2, #0
 80094e4:	602a      	str	r2, [r5, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	f7f8 fc3a 	bl	8001d60 <_write>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	d102      	bne.n	80094f6 <_write_r+0x1e>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	b103      	cbz	r3, 80094f6 <_write_r+0x1e>
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	bd38      	pop	{r3, r4, r5, pc}
 80094f8:	20001598 	.word	0x20001598

080094fc <__assert_func>:
 80094fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094fe:	4614      	mov	r4, r2
 8009500:	461a      	mov	r2, r3
 8009502:	4b09      	ldr	r3, [pc, #36]	; (8009528 <__assert_func+0x2c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4605      	mov	r5, r0
 8009508:	68d8      	ldr	r0, [r3, #12]
 800950a:	b14c      	cbz	r4, 8009520 <__assert_func+0x24>
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <__assert_func+0x30>)
 800950e:	9100      	str	r1, [sp, #0]
 8009510:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009514:	4906      	ldr	r1, [pc, #24]	; (8009530 <__assert_func+0x34>)
 8009516:	462b      	mov	r3, r5
 8009518:	f000 f81e 	bl	8009558 <fiprintf>
 800951c:	f000 f89f 	bl	800965e <abort>
 8009520:	4b04      	ldr	r3, [pc, #16]	; (8009534 <__assert_func+0x38>)
 8009522:	461c      	mov	r4, r3
 8009524:	e7f3      	b.n	800950e <__assert_func+0x12>
 8009526:	bf00      	nop
 8009528:	2000000c 	.word	0x2000000c
 800952c:	08009c8d 	.word	0x08009c8d
 8009530:	08009c9a 	.word	0x08009c9a
 8009534:	08009cc8 	.word	0x08009cc8

08009538 <_close_r>:
 8009538:	b538      	push	{r3, r4, r5, lr}
 800953a:	4d06      	ldr	r5, [pc, #24]	; (8009554 <_close_r+0x1c>)
 800953c:	2300      	movs	r3, #0
 800953e:	4604      	mov	r4, r0
 8009540:	4608      	mov	r0, r1
 8009542:	602b      	str	r3, [r5, #0]
 8009544:	f7f8 fc1a 	bl	8001d7c <_close>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_close_r+0x1a>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	b103      	cbz	r3, 8009552 <_close_r+0x1a>
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	20001598 	.word	0x20001598

08009558 <fiprintf>:
 8009558:	b40e      	push	{r1, r2, r3}
 800955a:	b503      	push	{r0, r1, lr}
 800955c:	4601      	mov	r1, r0
 800955e:	ab03      	add	r3, sp, #12
 8009560:	4805      	ldr	r0, [pc, #20]	; (8009578 <fiprintf+0x20>)
 8009562:	f853 2b04 	ldr.w	r2, [r3], #4
 8009566:	6800      	ldr	r0, [r0, #0]
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	f7ff fe31 	bl	80091d0 <_vfiprintf_r>
 800956e:	b002      	add	sp, #8
 8009570:	f85d eb04 	ldr.w	lr, [sp], #4
 8009574:	b003      	add	sp, #12
 8009576:	4770      	bx	lr
 8009578:	2000000c 	.word	0x2000000c

0800957c <_fstat_r>:
 800957c:	b538      	push	{r3, r4, r5, lr}
 800957e:	4d07      	ldr	r5, [pc, #28]	; (800959c <_fstat_r+0x20>)
 8009580:	2300      	movs	r3, #0
 8009582:	4604      	mov	r4, r0
 8009584:	4608      	mov	r0, r1
 8009586:	4611      	mov	r1, r2
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	f7f8 fbfb 	bl	8001d84 <_fstat>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d102      	bne.n	8009598 <_fstat_r+0x1c>
 8009592:	682b      	ldr	r3, [r5, #0]
 8009594:	b103      	cbz	r3, 8009598 <_fstat_r+0x1c>
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	bd38      	pop	{r3, r4, r5, pc}
 800959a:	bf00      	nop
 800959c:	20001598 	.word	0x20001598

080095a0 <_isatty_r>:
 80095a0:	b538      	push	{r3, r4, r5, lr}
 80095a2:	4d06      	ldr	r5, [pc, #24]	; (80095bc <_isatty_r+0x1c>)
 80095a4:	2300      	movs	r3, #0
 80095a6:	4604      	mov	r4, r0
 80095a8:	4608      	mov	r0, r1
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	f7f8 fbf0 	bl	8001d90 <_isatty>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_isatty_r+0x1a>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_isatty_r+0x1a>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	20001598 	.word	0x20001598

080095c0 <_lseek_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d07      	ldr	r5, [pc, #28]	; (80095e0 <_lseek_r+0x20>)
 80095c4:	4604      	mov	r4, r0
 80095c6:	4608      	mov	r0, r1
 80095c8:	4611      	mov	r1, r2
 80095ca:	2200      	movs	r2, #0
 80095cc:	602a      	str	r2, [r5, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f7f8 fbe0 	bl	8001d94 <_lseek>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	d102      	bne.n	80095de <_lseek_r+0x1e>
 80095d8:	682b      	ldr	r3, [r5, #0]
 80095da:	b103      	cbz	r3, 80095de <_lseek_r+0x1e>
 80095dc:	6023      	str	r3, [r4, #0]
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	20001598 	.word	0x20001598

080095e4 <__ascii_mbtowc>:
 80095e4:	b082      	sub	sp, #8
 80095e6:	b901      	cbnz	r1, 80095ea <__ascii_mbtowc+0x6>
 80095e8:	a901      	add	r1, sp, #4
 80095ea:	b142      	cbz	r2, 80095fe <__ascii_mbtowc+0x1a>
 80095ec:	b14b      	cbz	r3, 8009602 <__ascii_mbtowc+0x1e>
 80095ee:	7813      	ldrb	r3, [r2, #0]
 80095f0:	600b      	str	r3, [r1, #0]
 80095f2:	7812      	ldrb	r2, [r2, #0]
 80095f4:	1e10      	subs	r0, r2, #0
 80095f6:	bf18      	it	ne
 80095f8:	2001      	movne	r0, #1
 80095fa:	b002      	add	sp, #8
 80095fc:	4770      	bx	lr
 80095fe:	4610      	mov	r0, r2
 8009600:	e7fb      	b.n	80095fa <__ascii_mbtowc+0x16>
 8009602:	f06f 0001 	mvn.w	r0, #1
 8009606:	e7f8      	b.n	80095fa <__ascii_mbtowc+0x16>

08009608 <__malloc_lock>:
 8009608:	4801      	ldr	r0, [pc, #4]	; (8009610 <__malloc_lock+0x8>)
 800960a:	f7ff b8c0 	b.w	800878e <__retarget_lock_acquire_recursive>
 800960e:	bf00      	nop
 8009610:	2000158c 	.word	0x2000158c

08009614 <__malloc_unlock>:
 8009614:	4801      	ldr	r0, [pc, #4]	; (800961c <__malloc_unlock+0x8>)
 8009616:	f7ff b8bb 	b.w	8008790 <__retarget_lock_release_recursive>
 800961a:	bf00      	nop
 800961c:	2000158c 	.word	0x2000158c

08009620 <_read_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4d07      	ldr	r5, [pc, #28]	; (8009640 <_read_r+0x20>)
 8009624:	4604      	mov	r4, r0
 8009626:	4608      	mov	r0, r1
 8009628:	4611      	mov	r1, r2
 800962a:	2200      	movs	r2, #0
 800962c:	602a      	str	r2, [r5, #0]
 800962e:	461a      	mov	r2, r3
 8009630:	f7f8 fb88 	bl	8001d44 <_read>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_read_r+0x1e>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_read_r+0x1e>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	20001598 	.word	0x20001598

08009644 <__ascii_wctomb>:
 8009644:	b149      	cbz	r1, 800965a <__ascii_wctomb+0x16>
 8009646:	2aff      	cmp	r2, #255	; 0xff
 8009648:	bf85      	ittet	hi
 800964a:	238a      	movhi	r3, #138	; 0x8a
 800964c:	6003      	strhi	r3, [r0, #0]
 800964e:	700a      	strbls	r2, [r1, #0]
 8009650:	f04f 30ff 	movhi.w	r0, #4294967295
 8009654:	bf98      	it	ls
 8009656:	2001      	movls	r0, #1
 8009658:	4770      	bx	lr
 800965a:	4608      	mov	r0, r1
 800965c:	4770      	bx	lr

0800965e <abort>:
 800965e:	b508      	push	{r3, lr}
 8009660:	2006      	movs	r0, #6
 8009662:	f000 f82b 	bl	80096bc <raise>
 8009666:	2001      	movs	r0, #1
 8009668:	f7f8 fb66 	bl	8001d38 <_exit>

0800966c <_raise_r>:
 800966c:	291f      	cmp	r1, #31
 800966e:	b538      	push	{r3, r4, r5, lr}
 8009670:	4604      	mov	r4, r0
 8009672:	460d      	mov	r5, r1
 8009674:	d904      	bls.n	8009680 <_raise_r+0x14>
 8009676:	2316      	movs	r3, #22
 8009678:	6003      	str	r3, [r0, #0]
 800967a:	f04f 30ff 	mov.w	r0, #4294967295
 800967e:	bd38      	pop	{r3, r4, r5, pc}
 8009680:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009682:	b112      	cbz	r2, 800968a <_raise_r+0x1e>
 8009684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009688:	b94b      	cbnz	r3, 800969e <_raise_r+0x32>
 800968a:	4620      	mov	r0, r4
 800968c:	f000 f830 	bl	80096f0 <_getpid_r>
 8009690:	462a      	mov	r2, r5
 8009692:	4601      	mov	r1, r0
 8009694:	4620      	mov	r0, r4
 8009696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800969a:	f000 b817 	b.w	80096cc <_kill_r>
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d00a      	beq.n	80096b8 <_raise_r+0x4c>
 80096a2:	1c59      	adds	r1, r3, #1
 80096a4:	d103      	bne.n	80096ae <_raise_r+0x42>
 80096a6:	2316      	movs	r3, #22
 80096a8:	6003      	str	r3, [r0, #0]
 80096aa:	2001      	movs	r0, #1
 80096ac:	e7e7      	b.n	800967e <_raise_r+0x12>
 80096ae:	2400      	movs	r4, #0
 80096b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80096b4:	4628      	mov	r0, r5
 80096b6:	4798      	blx	r3
 80096b8:	2000      	movs	r0, #0
 80096ba:	e7e0      	b.n	800967e <_raise_r+0x12>

080096bc <raise>:
 80096bc:	4b02      	ldr	r3, [pc, #8]	; (80096c8 <raise+0xc>)
 80096be:	4601      	mov	r1, r0
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	f7ff bfd3 	b.w	800966c <_raise_r>
 80096c6:	bf00      	nop
 80096c8:	2000000c 	.word	0x2000000c

080096cc <_kill_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d07      	ldr	r5, [pc, #28]	; (80096ec <_kill_r+0x20>)
 80096d0:	2300      	movs	r3, #0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4608      	mov	r0, r1
 80096d6:	4611      	mov	r1, r2
 80096d8:	602b      	str	r3, [r5, #0]
 80096da:	f7f8 fb25 	bl	8001d28 <_kill>
 80096de:	1c43      	adds	r3, r0, #1
 80096e0:	d102      	bne.n	80096e8 <_kill_r+0x1c>
 80096e2:	682b      	ldr	r3, [r5, #0]
 80096e4:	b103      	cbz	r3, 80096e8 <_kill_r+0x1c>
 80096e6:	6023      	str	r3, [r4, #0]
 80096e8:	bd38      	pop	{r3, r4, r5, pc}
 80096ea:	bf00      	nop
 80096ec:	20001598 	.word	0x20001598

080096f0 <_getpid_r>:
 80096f0:	f7f8 bb18 	b.w	8001d24 <_getpid>

080096f4 <_init>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr

08009700 <_fini>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr
