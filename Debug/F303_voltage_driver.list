
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  0800a008  0800a008  0001a008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6bc  0800a6bc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6bc  0800a6bc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6bc  0800a6bc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6bc  0800a6bc  0001a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6c0  0800a6c0  0001a6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000013d8  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200015b4  200015b4  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023156  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004588  00000000  00000000  00043362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00019c7c  00000000  00000000  000478ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010a8  00000000  00000000  00061568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000027e0  00000000  00000000  00062610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e4f8  00000000  00000000  00064df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006085  00000000  00000000  000832e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0008936d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c74  00000000  00000000  000893c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fec 	.word	0x08009fec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009fec 	.word	0x08009fec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c8a:	2400      	movs	r4, #0
{
 8000c8c:	b08e      	sub	sp, #56	; 0x38
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c8e:	2228      	movs	r2, #40	; 0x28
 8000c90:	4621      	mov	r1, r4
 8000c92:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8000c94:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000c98:	9403      	str	r4, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c9a:	f006 fbfd 	bl	8007498 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c9e:	4830      	ldr	r0, [pc, #192]	; (8000d60 <MX_ADC1_Init+0xd8>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ca4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000ca8:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000cac:	2208      	movs	r2, #8
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cae:	2301      	movs	r3, #1
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000cb0:	6082      	str	r2, [r0, #8]
  hadc1.Init.NbrOfDiscConversion = 1;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cb2:	8304      	strh	r4, [r0, #24]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb4:	2204      	movs	r2, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb6:	6103      	str	r3, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000cb8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000cbc:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cbe:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cc0:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cc2:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc6:	6142      	str	r2, [r0, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cc8:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cca:	f001 fd83 	bl	80027d4 <HAL_ADC_Init>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d132      	bne.n	8000d38 <MX_ADC1_Init+0xb0>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cd2:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cd4:	4822      	ldr	r0, [pc, #136]	; (8000d60 <MX_ADC1_Init+0xd8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cd6:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cd8:	a901      	add	r1, sp, #4
 8000cda:	f002 fc3d 	bl	8003558 <HAL_ADCEx_MultiModeConfigChannel>
 8000cde:	2800      	cmp	r0, #0
 8000ce0:	d137      	bne.n	8000d52 <MX_ADC1_Init+0xca>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 3;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000ce2:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8000d58 <MX_ADC1_Init+0xd0>
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000ce6:	2103      	movs	r1, #3
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000ce8:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000cea:	2201      	movs	r2, #1
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000cec:	910a      	str	r1, [sp, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000cee:	481c      	ldr	r0, [pc, #112]	; (8000d60 <MX_ADC1_Init+0xd8>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000cf0:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000cf2:	a904      	add	r1, sp, #16
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000cf4:	e9cd 2204 	strd	r2, r2, [sp, #16]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000cf8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000cfc:	e9cd 3308 	strd	r3, r3, [sp, #32]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d00:	9306      	str	r3, [sp, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d02:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d06:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d0a:	f002 f9d7 	bl	80030bc <HAL_ADCEx_InjectedConfigChannel>
 8000d0e:	b9e8      	cbnz	r0, 8000d4c <MX_ADC1_Init+0xc4>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d10:	2204      	movs	r2, #4
 8000d12:	2302      	movs	r3, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <MX_ADC1_Init+0xd8>)
 8000d16:	a904      	add	r1, sp, #16
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d18:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d1c:	f002 f9ce 	bl	80030bc <HAL_ADCEx_InjectedConfigChannel>
 8000d20:	b988      	cbnz	r0, 8000d46 <MX_ADC1_Init+0xbe>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d22:	2205      	movs	r2, #5
 8000d24:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <MX_ADC1_Init+0xd8>)
 8000d28:	a904      	add	r1, sp, #16
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d2e:	f002 f9c5 	bl	80030bc <HAL_ADCEx_InjectedConfigChannel>
 8000d32:	b920      	cbnz	r0, 8000d3e <MX_ADC1_Init+0xb6>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d34:	b00e      	add	sp, #56	; 0x38
 8000d36:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d38:	f000 ff00 	bl	8001b3c <Error_Handler>
 8000d3c:	e7c9      	b.n	8000cd2 <MX_ADC1_Init+0x4a>
    Error_Handler();
 8000d3e:	f000 fefd 	bl	8001b3c <Error_Handler>
}
 8000d42:	b00e      	add	sp, #56	; 0x38
 8000d44:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d46:	f000 fef9 	bl	8001b3c <Error_Handler>
 8000d4a:	e7ea      	b.n	8000d22 <MX_ADC1_Init+0x9a>
    Error_Handler();
 8000d4c:	f000 fef6 	bl	8001b3c <Error_Handler>
 8000d50:	e7de      	b.n	8000d10 <MX_ADC1_Init+0x88>
    Error_Handler();
 8000d52:	f000 fef3 	bl	8001b3c <Error_Handler>
 8000d56:	e7c4      	b.n	8000ce2 <MX_ADC1_Init+0x5a>
 8000d58:	00000000 	.word	0x00000000
 8000d5c:	00000040 	.word	0x00000040
 8000d60:	200001fc 	.word	0x200001fc
 8000d64:	00000000 	.word	0x00000000

08000d68 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d68:	b500      	push	{lr}
 8000d6a:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d6c:	2228      	movs	r2, #40	; 0x28
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4668      	mov	r0, sp
 8000d72:	f006 fb91 	bl	8007498 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d76:	481e      	ldr	r0, [pc, #120]	; (8000df0 <MX_ADC2_Init+0x88>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d78:	491e      	ldr	r1, [pc, #120]	; (8000df4 <MX_ADC2_Init+0x8c>)
 8000d7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d7e:	2300      	movs	r3, #0
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d80:	e9c0 1200 	strd	r1, r2, [r0]
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 8000d84:	2201      	movs	r2, #1
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000d86:	2108      	movs	r1, #8
  hadc2.Init.NbrOfConversion = 1;
 8000d88:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d8a:	8303      	strh	r3, [r0, #24]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d8c:	2204      	movs	r2, #4
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8000d8e:	6081      	str	r1, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d90:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d92:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d96:	60c3      	str	r3, [r0, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d98:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d9c:	6142      	str	r2, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d9e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000da0:	f001 fd18 	bl	80027d4 <HAL_ADC_Init>
 8000da4:	b9c0      	cbnz	r0, 8000dd8 <MX_ADC2_Init+0x70>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T8_TRGO;
 8000da6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8000de8 <MX_ADC2_Init+0x80>
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000daa:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000dac:	2201      	movs	r2, #1
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000dae:	4810      	ldr	r0, [pc, #64]	; (8000df0 <MX_ADC2_Init+0x88>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000db0:	9303      	str	r3, [sp, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000db2:	4669      	mov	r1, sp
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T8_TRGO;
 8000db4:	ed8d 7b08 	vstr	d7, [sp, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000db8:	e9cd 2200 	strd	r2, r2, [sp]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000dbc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000dc0:	9206      	str	r2, [sp, #24]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dc2:	9302      	str	r3, [sp, #8]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000dc4:	f8ad 301c 	strh.w	r3, [sp, #28]
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000dc8:	f88d 301e 	strb.w	r3, [sp, #30]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000dcc:	f002 f976 	bl	80030bc <HAL_ADCEx_InjectedConfigChannel>
 8000dd0:	b928      	cbnz	r0, 8000dde <MX_ADC2_Init+0x76>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dd2:	b00b      	add	sp, #44	; 0x2c
 8000dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000dd8:	f000 feb0 	bl	8001b3c <Error_Handler>
 8000ddc:	e7e3      	b.n	8000da6 <MX_ADC2_Init+0x3e>
    Error_Handler();
 8000dde:	f000 fead 	bl	8001b3c <Error_Handler>
}
 8000de2:	b00b      	add	sp, #44	; 0x2c
 8000de4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000de8:	00000024 	.word	0x00000024
 8000dec:	00000040 	.word	0x00000040
 8000df0:	2000024c 	.word	0x2000024c
 8000df4:	50000100 	.word	0x50000100

08000df8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000df8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dfa:	2400      	movs	r4, #0
{
 8000dfc:	b08e      	sub	sp, #56	; 0x38
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dfe:	2228      	movs	r2, #40	; 0x28
 8000e00:	4621      	mov	r1, r4
 8000e02:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8000e04:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000e08:	9403      	str	r4, [sp, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e0a:	f006 fb45 	bl	8007498 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e0e:	4822      	ldr	r0, [pc, #136]	; (8000e98 <MX_ADC3_Init+0xa0>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e10:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <MX_ADC3_Init+0xa4>)
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e12:	8304      	strh	r4, [r0, #24]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e18:	e9c0 2300 	strd	r2, r3, [r0]
  hadc3.Init.NbrOfConversion = 1;
 8000e1c:	2301      	movs	r3, #1
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8000e1e:	2208      	movs	r2, #8
  hadc3.Init.NbrOfConversion = 1;
 8000e20:	61c3      	str	r3, [r0, #28]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e22:	2304      	movs	r3, #4
  hadc3.Init.Resolution = ADC_RESOLUTION_10B;
 8000e24:	6082      	str	r2, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e26:	6104      	str	r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e28:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2c:	60c4      	str	r4, [r0, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e2e:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e32:	6143      	str	r3, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e34:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e36:	f001 fccd 	bl	80027d4 <HAL_ADC_Init>
 8000e3a:	b9f8      	cbnz	r0, 8000e7c <MX_ADC3_Init+0x84>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e3c:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000e3e:	4816      	ldr	r0, [pc, #88]	; (8000e98 <MX_ADC3_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e40:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000e42:	a901      	add	r1, sp, #4
 8000e44:	f002 fb88 	bl	8003558 <HAL_ADCEx_MultiModeConfigChannel>
 8000e48:	b9f8      	cbnz	r0, 8000e8a <MX_ADC3_Init+0x92>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000e4a:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8000e90 <MX_ADC3_Init+0x98>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000e4e:	2005      	movs	r0, #5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e50:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e52:	2201      	movs	r2, #1
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000e54:	9004      	str	r0, [sp, #16]
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e56:	a904      	add	r1, sp, #16
 8000e58:	480f      	ldr	r0, [pc, #60]	; (8000e98 <MX_ADC3_Init+0xa0>)
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e5a:	9205      	str	r2, [sp, #20]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000e5c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e60:	e9cd 3308 	strd	r3, r3, [sp, #32]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e64:	9307      	str	r3, [sp, #28]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000e66:	920a      	str	r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e68:	9306      	str	r3, [sp, #24]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e6a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e6e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000e72:	f002 f923 	bl	80030bc <HAL_ADCEx_InjectedConfigChannel>
 8000e76:	b920      	cbnz	r0, 8000e82 <MX_ADC3_Init+0x8a>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e78:	b00e      	add	sp, #56	; 0x38
 8000e7a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e7c:	f000 fe5e 	bl	8001b3c <Error_Handler>
 8000e80:	e7dc      	b.n	8000e3c <MX_ADC3_Init+0x44>
    Error_Handler();
 8000e82:	f000 fe5b 	bl	8001b3c <Error_Handler>
}
 8000e86:	b00e      	add	sp, #56	; 0x38
 8000e88:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e8a:	f000 fe57 	bl	8001b3c <Error_Handler>
 8000e8e:	e7dc      	b.n	8000e4a <MX_ADC3_Init+0x52>
 8000e90:	00000000 	.word	0x00000000
 8000e94:	00000040 	.word	0x00000040
 8000e98:	2000029c 	.word	0x2000029c
 8000e9c:	50000400 	.word	0x50000400

08000ea0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ea0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000ea2:	6803      	ldr	r3, [r0, #0]
{
 8000ea4:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	2400      	movs	r4, #0
  if(adcHandle->Instance==ADC1)
 8000ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000eb0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8000eb4:	940c      	str	r4, [sp, #48]	; 0x30
  if(adcHandle->Instance==ADC1)
 8000eb6:	d02a      	beq.n	8000f0e <HAL_ADC_MspInit+0x6e>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000eb8:	4a4b      	ldr	r2, [pc, #300]	; (8000fe8 <HAL_ADC_MspInit+0x148>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d004      	beq.n	8000ec8 <HAL_ADC_MspInit+0x28>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000ebe:	4a4b      	ldr	r2, [pc, #300]	; (8000fec <HAL_ADC_MspInit+0x14c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d065      	beq.n	8000f90 <HAL_ADC_MspInit+0xf0>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ec4:	b00e      	add	sp, #56	; 0x38
 8000ec6:	bd10      	pop	{r4, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ec8:	4a49      	ldr	r2, [pc, #292]	; (8000ff0 <HAL_ADC_MspInit+0x150>)
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ece:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ed0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ed2:	d052      	beq.n	8000f7a <HAL_ADC_MspInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <HAL_ADC_MspInit+0x154>)
 8000ed6:	695a      	ldr	r2, [r3, #20]
 8000ed8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ee0:	ed9f 7b3f 	vldr	d7, [pc, #252]	; 8000fe0 <HAL_ADC_MspInit+0x140>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000eea:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eee:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	a908      	add	r1, sp, #32
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f003 f8bb 	bl	8004070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	4611      	mov	r1, r2
 8000efe:	2012      	movs	r0, #18
 8000f00:	f002 ff3c 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f04:	2012      	movs	r0, #18
 8000f06:	f002 ff77 	bl	8003df8 <HAL_NVIC_EnableIRQ>
}
 8000f0a:	b00e      	add	sp, #56	; 0x38
 8000f0c:	bd10      	pop	{r4, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f0e:	4a38      	ldr	r2, [pc, #224]	; (8000ff0 <HAL_ADC_MspInit+0x150>)
 8000f10:	6813      	ldr	r3, [r2, #0]
 8000f12:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f14:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f18:	d024      	beq.n	8000f64 <HAL_ADC_MspInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <HAL_ADC_MspInit+0x154>)
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f2a:	9202      	str	r2, [sp, #8]
 8000f2c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	695a      	ldr	r2, [r3, #20]
 8000f30:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f34:	615a      	str	r2, [r3, #20]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000f3e:	2209      	movs	r2, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000f42:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000f48:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f003 f88e 	bl	8004070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f54:	2210      	movs	r2, #16
 8000f56:	2303      	movs	r3, #3
 8000f58:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f5c:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <HAL_ADC_MspInit+0x158>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f60:	a908      	add	r1, sp, #32
 8000f62:	e7c8      	b.n	8000ef6 <HAL_ADC_MspInit+0x56>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_ADC_MspInit+0x154>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	695b      	ldr	r3, [r3, #20]
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	9b01      	ldr	r3, [sp, #4]
 8000f78:	e7cf      	b.n	8000f1a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_ADC_MspInit+0x154>)
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	9304      	str	r3, [sp, #16]
 8000f8c:	9b04      	ldr	r3, [sp, #16]
 8000f8e:	e7a1      	b.n	8000ed4 <HAL_ADC_MspInit+0x34>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <HAL_ADC_MspInit+0x154>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	481a      	ldr	r0, [pc, #104]	; (8000ffc <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	695a      	ldr	r2, [r3, #20]
 8000f9e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000fa2:	9206      	str	r2, [sp, #24]
 8000fa4:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fac:	615a      	str	r2, [r3, #20]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc2:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f003 f854 	bl	8004070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000fc8:	4622      	mov	r2, r4
 8000fca:	4621      	mov	r1, r4
 8000fcc:	202f      	movs	r0, #47	; 0x2f
 8000fce:	f002 fed5 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000fd2:	202f      	movs	r0, #47	; 0x2f
 8000fd4:	f002 ff10 	bl	8003df8 <HAL_NVIC_EnableIRQ>
}
 8000fd8:	e774      	b.n	8000ec4 <HAL_ADC_MspInit+0x24>
 8000fda:	bf00      	nop
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	00000010 	.word	0x00000010
 8000fe4:	00000003 	.word	0x00000003
 8000fe8:	50000100 	.word	0x50000100
 8000fec:	50000400 	.word	0x50000400
 8000ff0:	200001f8 	.word	0x200001f8
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48001400 	.word	0x48001400
 8000ffc:	48000400 	.word	0x48000400

08001000 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001000:	b510      	push	{r4, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <MX_CAN_Init+0x34>)
 8001004:	4c0c      	ldr	r4, [pc, #48]	; (8001038 <MX_CAN_Init+0x38>)
  hcan.Init.Prescaler = 2;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001006:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 2;
 8001008:	2202      	movs	r2, #2
 800100a:	e9c0 4200 	strd	r4, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 800100e:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8001012:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001016:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001018:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800101a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 800101e:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001022:	f002 fb2d 	bl	8003680 <HAL_CAN_Init>
 8001026:	b900      	cbnz	r0, 800102a <MX_CAN_Init+0x2a>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001028:	bd10      	pop	{r4, pc}
 800102a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800102e:	f000 bd85 	b.w	8001b3c <Error_Handler>
 8001032:	bf00      	nop
 8001034:	200002ec 	.word	0x200002ec
 8001038:	40006400 	.word	0x40006400

0800103c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800103c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <HAL_CAN_MspInit+0xd4>)
 8001040:	6802      	ldr	r2, [r0, #0]
{
 8001042:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 8001046:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800104c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001050:	9408      	str	r4, [sp, #32]
  if(canHandle->Instance==CAN)
 8001052:	d001      	beq.n	8001058 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001054:	b00b      	add	sp, #44	; 0x2c
 8001056:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001058:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800105c:	2509      	movs	r5, #9
    __HAL_RCC_CAN1_CLK_ENABLE();
 800105e:	69da      	ldr	r2, [r3, #28]
 8001060:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001064:	61da      	str	r2, [r3, #28]
 8001066:	69da      	ldr	r2, [r3, #28]
 8001068:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800106c:	9201      	str	r2, [sp, #4]
 800106e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	695a      	ldr	r2, [r3, #20]
 8001072:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001076:	615a      	str	r2, [r3, #20]
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800107e:	9202      	str	r2, [sp, #8]
 8001080:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	695a      	ldr	r2, [r3, #20]
 8001084:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001088:	615a      	str	r2, [r3, #20]
 800108a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800108c:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001092:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001098:	2302      	movs	r3, #2
 800109a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f002 ffe1 	bl	8004070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b2:	2302      	movs	r3, #2
 80010b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ba:	2303      	movs	r3, #3
 80010bc:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	4815      	ldr	r0, [pc, #84]	; (8001114 <HAL_CAN_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80010c0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f002 ffd3 	bl	8004070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 80010ca:	4622      	mov	r2, r4
 80010cc:	4621      	mov	r1, r4
 80010ce:	2013      	movs	r0, #19
 80010d0:	f002 fe54 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 80010d4:	2013      	movs	r0, #19
 80010d6:	f002 fe8f 	bl	8003df8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80010da:	4622      	mov	r2, r4
 80010dc:	4621      	mov	r1, r4
 80010de:	2014      	movs	r0, #20
 80010e0:	f002 fe4c 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80010e4:	2014      	movs	r0, #20
 80010e6:	f002 fe87 	bl	8003df8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 80010ea:	4622      	mov	r2, r4
 80010ec:	2101      	movs	r1, #1
 80010ee:	2015      	movs	r0, #21
 80010f0:	f002 fe44 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80010f4:	2015      	movs	r0, #21
 80010f6:	f002 fe7f 	bl	8003df8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 80010fa:	4622      	mov	r2, r4
 80010fc:	2101      	movs	r1, #1
 80010fe:	2016      	movs	r0, #22
 8001100:	f002 fe3c 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8001104:	2016      	movs	r0, #22
 8001106:	f002 fe77 	bl	8003df8 <HAL_NVIC_EnableIRQ>
}
 800110a:	b00b      	add	sp, #44	; 0x2c
 800110c:	bd30      	pop	{r4, r5, pc}
 800110e:	bf00      	nop
 8001110:	40006400 	.word	0x40006400
 8001114:	48000400 	.word	0x48000400

08001118 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(uint16_t board_addr)
{
 8001118:	b530      	push	{r4, r5, lr}
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
  sFilterConfig.FilterBank = 0;
  sFilterConfig.FilterIdHigh = (0x100 + board_addr) << 5;
 800111a:	f500 7480 	add.w	r4, r0, #256	; 0x100
{
 800111e:	b08b      	sub	sp, #44	; 0x2c
  sFilterConfig.FilterIdLow = (0x300 + board_addr) << 5;
 8001120:	f500 7040 	add.w	r0, r0, #768	; 0x300
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001124:	2101      	movs	r1, #1
  sFilterConfig.FilterIdLow = (0x300 + board_addr) << 5;
 8001126:	0143      	lsls	r3, r0, #5
  sFilterConfig.FilterIdHigh = (0x100 + board_addr) << 5;
 8001128:	0164      	lsls	r4, r4, #5
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800112a:	2200      	movs	r2, #0
  sFilterConfig.FilterIdLow = (0x300 + board_addr) << 5;
 800112c:	e9cd 4300 	strd	r4, r3, [sp]
  sFilterConfig.FilterMaskIdHigh = 0x010 << 5;
 8001130:	f44f 7500 	mov.w	r5, #512	; 0x200
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001134:	9106      	str	r1, [sp, #24]
  sFilterConfig.FilterMaskIdLow = 0x110 << 5;
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;
 8001136:	9108      	str	r1, [sp, #32]
  sFilterConfig.FilterMaskIdLow = 0x110 << 5;
 8001138:	f44f 5308 	mov.w	r3, #8704	; 0x2200
  sFilterConfig.SlaveStartFilterBank = 0;
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800113c:	480e      	ldr	r0, [pc, #56]	; (8001178 <CAN_Filter_Init+0x60>)
  sFilterConfig.FilterMaskIdHigh = 0x010 << 5;
 800113e:	9502      	str	r5, [sp, #8]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001140:	4669      	mov	r1, sp
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001142:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001146:	9207      	str	r2, [sp, #28]
  sFilterConfig.FilterBank = 0;
 8001148:	9205      	str	r2, [sp, #20]
  sFilterConfig.SlaveStartFilterBank = 0;
 800114a:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800114c:	f002 fb18 	bl	8003780 <HAL_CAN_ConfigFilter>
 8001150:	b930      	cbnz	r0, 8001160 <CAN_Filter_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001152:	4809      	ldr	r0, [pc, #36]	; (8001178 <CAN_Filter_Init+0x60>)
 8001154:	2102      	movs	r1, #2
 8001156:	f002 fcab 	bl	8003ab0 <HAL_CAN_ActivateNotification>
 800115a:	b948      	cbnz	r0, 8001170 <CAN_Filter_Init+0x58>
  {
    Error_Handler();
  }
}
 800115c:	b00b      	add	sp, #44	; 0x2c
 800115e:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001160:	f000 fcec 	bl	8001b3c <Error_Handler>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	; (8001178 <CAN_Filter_Init+0x60>)
 8001166:	2102      	movs	r1, #2
 8001168:	f002 fca2 	bl	8003ab0 <HAL_CAN_ActivateNotification>
 800116c:	2800      	cmp	r0, #0
 800116e:	d0f5      	beq.n	800115c <CAN_Filter_Init+0x44>
    Error_Handler();
 8001170:	f000 fce4 	bl	8001b3c <Error_Handler>
}
 8001174:	b00b      	add	sp, #44	; 0x2c
 8001176:	bd30      	pop	{r4, r5, pc}
 8001178:	200002ec 	.word	0x200002ec

0800117c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_DMA_Init+0x30>)
{
 800117e:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001180:	6959      	ldr	r1, [r3, #20]
 8001182:	f041 0101 	orr.w	r1, r1, #1
 8001186:	6159      	str	r1, [r3, #20]
 8001188:	695b      	ldr	r3, [r3, #20]
{
 800118a:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001194:	200e      	movs	r0, #14
 8001196:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001198:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800119a:	f002 fdef 	bl	8003d7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800119e:	200e      	movs	r0, #14

}
 80011a0:	b003      	add	sp, #12
 80011a2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011a6:	f002 be27 	b.w	8003df8 <HAL_NVIC_EnableIRQ>
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011b0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	2400      	movs	r4, #0
{
 80011b6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80011bc:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	4b30      	ldr	r3, [pc, #192]	; (8001284 <MX_GPIO_Init+0xd4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c4:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011c6:	4d30      	ldr	r5, [pc, #192]	; (8001288 <MX_GPIO_Init+0xd8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80011c8:	4e30      	ldr	r6, [pc, #192]	; (800128c <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011ce:	615a      	str	r2, [r3, #20]
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80011e0:	615a      	str	r2, [r3, #20]
 80011e2:	695a      	ldr	r2, [r3, #20]
 80011e4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	695a      	ldr	r2, [r3, #20]
 80011f6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80011fa:	9202      	str	r2, [sp, #8]
 80011fc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	695a      	ldr	r2, [r3, #20]
 8001200:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800120c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800120e:	4622      	mov	r2, r4
 8001210:	4628      	mov	r0, r5
 8001212:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001218:	f003 f81a 	bl	8004250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800121c:	4622      	mov	r2, r4
 800121e:	4630      	mov	r0, r6
 8001220:	21c0      	movs	r1, #192	; 0xc0
 8001222:	f003 f815 	bl	8004250 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001226:	f04f 0800 	mov.w	r8, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	a904      	add	r1, sp, #16
 800122c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800122e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001232:	2301      	movs	r3, #1
 8001234:	f04f 0900 	mov.w	r9, #0
 8001238:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800123c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f002 ff16 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	a904      	add	r1, sp, #16
 8001246:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001248:	2201      	movs	r2, #1
 800124a:	2300      	movs	r3, #0
 800124c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f002 ff0d 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001256:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	4628      	mov	r0, r5
 800125a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800125e:	220e      	movs	r2, #14
 8001260:	2300      	movs	r3, #0
 8001262:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f002 ff03 	bl	8004070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800126a:	22c0      	movs	r2, #192	; 0xc0
 800126c:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	a904      	add	r1, sp, #16
 8001270:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001272:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001276:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127a:	f002 fef9 	bl	8004070 <HAL_GPIO_Init>

}
 800127e:	b00a      	add	sp, #40	; 0x28
 8001280:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8001284:	40021000 	.word	0x40021000
 8001288:	48000800 	.word	0x48000800
 800128c:	48000400 	.word	0x48000400

08001290 <_write>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int f getc(FILE *f)
#endif
*/
int _write(int file, char *ptr, int len){
 8001290:	b508      	push	{r3, lr}
	HAL_UART_Transmit_DMA(&huart1, ptr, len);
 8001292:	b292      	uxth	r2, r2
 8001294:	4801      	ldr	r0, [pc, #4]	; (800129c <_write+0xc>)
 8001296:	f004 fb4d 	bl	8005934 <HAL_UART_Transmit_DMA>
}
 800129a:	bd08      	pop	{r3, pc}
 800129c:	2000151c 	.word	0x2000151c

080012a0 <HAL_UART_RxCpltCallback>:
uint8_t uart_rx_buf[10] = {0};
bool uart_rx_flag = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uart_rx_flag = true;
 80012a0:	4b01      	ldr	r3, [pc, #4]	; (80012a8 <HAL_UART_RxCpltCallback+0x8>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
}
 80012a6:	4770      	bx	lr
 80012a8:	200003ba 	.word	0x200003ba

080012ac <HAL_ADCEx_InjectedConvCpltCallback>:

//printf("M0cs %6d %6d %6d ",HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1),HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2),HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3));
//printf("M1cs %6d batt %6d ",HAL_ADCEx_InjectedGetValue(&hadc2,ADC_INJECTED_RANK_1),HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_1));
int adc_raw_cs_m0,adc_raw_cs_m1,adc_raw_batt_v,adc_raw_temp_m0,adc_raw_temp_m1;
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc){
	if(hadc == &hadc1){
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_ADCEx_InjectedConvCpltCallback+0x78>)
 80012ae:	4298      	cmp	r0, r3
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc){
 80012b0:	b510      	push	{r4, lr}
 80012b2:	4604      	mov	r4, r0
	if(hadc == &hadc1){
 80012b4:	d00d      	beq.n	80012d2 <HAL_ADCEx_InjectedConvCpltCallback+0x26>
		adc_raw_cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1);
		adc_raw_temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
		adc_raw_temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3);
	}

	if(hadc == &hadc2){
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_ADCEx_InjectedConvCpltCallback+0x7c>)
 80012b8:	429c      	cmp	r4, r3
 80012ba:	d026      	beq.n	800130a <HAL_ADCEx_InjectedConvCpltCallback+0x5e>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
		adc_raw_cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2,ADC_INJECTED_RANK_1);

	}
	if(hadc == &hadc3){
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_ADCEx_InjectedConvCpltCallback+0x80>)
 80012be:	429c      	cmp	r4, r3
 80012c0:	d000      	beq.n	80012c4 <HAL_ADCEx_InjectedConvCpltCallback+0x18>
		adc_raw_batt_v = HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_1);
	}
}
 80012c2:	bd10      	pop	{r4, pc}
		adc_raw_batt_v = HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_1);
 80012c4:	2101      	movs	r1, #1
 80012c6:	4620      	mov	r0, r4
 80012c8:	f001 fcfc 	bl	8002cc4 <HAL_ADCEx_InjectedGetValue>
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_ADCEx_InjectedConvCpltCallback+0x84>)
 80012ce:	6018      	str	r0, [r3, #0]
}
 80012d0:	bd10      	pop	{r4, pc}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80012d2:	4818      	ldr	r0, [pc, #96]	; (8001334 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	f002 ffc0 	bl	800425c <HAL_GPIO_TogglePin>
		adc_raw_cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1);
 80012dc:	2101      	movs	r1, #1
 80012de:	4620      	mov	r0, r4
 80012e0:	f001 fcf0 	bl	8002cc4 <HAL_ADCEx_InjectedGetValue>
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 80012e6:	4602      	mov	r2, r0
		adc_raw_temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 80012e8:	2102      	movs	r1, #2
 80012ea:	4620      	mov	r0, r4
		adc_raw_cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1);
 80012ec:	601a      	str	r2, [r3, #0]
		adc_raw_temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 80012ee:	f001 fce9 	bl	8002cc4 <HAL_ADCEx_InjectedGetValue>
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 80012f4:	4602      	mov	r2, r0
		adc_raw_temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3);
 80012f6:	2103      	movs	r1, #3
 80012f8:	4620      	mov	r0, r4
		adc_raw_temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 80012fa:	601a      	str	r2, [r3, #0]
		adc_raw_temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3);
 80012fc:	f001 fce2 	bl	8002cc4 <HAL_ADCEx_InjectedGetValue>
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 8001302:	6018      	str	r0, [r3, #0]
	if(hadc == &hadc2){
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_ADCEx_InjectedConvCpltCallback+0x7c>)
 8001306:	429c      	cmp	r4, r3
 8001308:	d1d8      	bne.n	80012bc <HAL_ADCEx_InjectedConvCpltCallback+0x10>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 800130c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001310:	f002 ffa4 	bl	800425c <HAL_GPIO_TogglePin>
		adc_raw_cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2,ADC_INJECTED_RANK_1);
 8001314:	2101      	movs	r1, #1
 8001316:	4620      	mov	r0, r4
 8001318:	f001 fcd4 	bl	8002cc4 <HAL_ADCEx_InjectedGetValue>
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_ADCEx_InjectedConvCpltCallback+0x98>)
 800131e:	6018      	str	r0, [r3, #0]
 8001320:	e7cc      	b.n	80012bc <HAL_ADCEx_InjectedConvCpltCallback+0x10>
 8001322:	bf00      	nop
 8001324:	200001fc 	.word	0x200001fc
 8001328:	2000024c 	.word	0x2000024c
 800132c:	2000029c 	.word	0x2000029c
 8001330:	20000314 	.word	0x20000314
 8001334:	48000800 	.word	0x48000800
 8001338:	20000318 	.word	0x20000318
 800133c:	20000320 	.word	0x20000320
 8001340:	20000324 	.word	0x20000324
 8001344:	2000031c 	.word	0x2000031c

08001348 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001348:	b538      	push	{r3, r4, r5, lr}
	static uint32_t speed_calc_cycle = 0;
	static int32_t pre_diff_cnt = 0, diff_accel;
	if (htim == &htim1)
 800134a:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800134c:	4298      	cmp	r0, r3
 800134e:	d039      	beq.n	80013c4 <HAL_TIM_PeriodElapsedCallback+0x7c>
			{
				diff_accel_min = diff_accel;
			}
		}
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
	}else if(htim == &htim8){
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001352:	4298      	cmp	r0, r3
 8001354:	d000      	beq.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x10>
			}
		}

		 // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
	}
}
 8001356:	bd38      	pop	{r3, r4, r5, pc}
		updateMA702_M1();
 8001358:	f000 fca2 	bl	8001ca0 <updateMA702_M1>
		setOutputRadianTIM1(getRadianM702_M1() + offset_radian, output_voltage, 24);
 800135c:	f000 fcf0 	bl	8001d40 <getRadianM702_M1>
 8001360:	4a28      	ldr	r2, [pc, #160]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001364:	edd2 7a00 	vldr	s15, [r2]
 8001368:	edd3 0a00 	vldr	s1, [r3]
 800136c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001370:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8001374:	f000 fff4 	bl	8002360 <setOutputRadianTIM1>
		speed_calc_cycle++;
 8001378:	4a24      	ldr	r2, [pc, #144]	; (800140c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	3301      	adds	r3, #1
		if (speed_calc_cycle >= 200)
 800137e:	2bc7      	cmp	r3, #199	; 0xc7
 8001380:	d91e      	bls.n	80013c0 <HAL_TIM_PeriodElapsedCallback+0x78>
			int temp_diff_cnt = enc_raw - pre_enc_raw;
 8001382:	4923      	ldr	r1, [pc, #140]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001384:	4823      	ldr	r0, [pc, #140]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001386:	680b      	ldr	r3, [r1, #0]
 8001388:	8800      	ldrh	r0, [r0, #0]
			pre_enc_raw = enc_raw;
 800138a:	6008      	str	r0, [r1, #0]
			speed_calc_cycle = 0;
 800138c:	2400      	movs	r4, #0
			int temp_diff_cnt = enc_raw - pre_enc_raw;
 800138e:	1ac3      	subs	r3, r0, r3
			speed_calc_cycle = 0;
 8001390:	6014      	str	r4, [r2, #0]
			if (temp_diff_cnt > 30000)
 8001392:	f247 5230 	movw	r2, #30000	; 0x7530
 8001396:	4293      	cmp	r3, r2
 8001398:	dd25      	ble.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x9e>
				diff_cnt = temp_diff_cnt - 65535;
 800139a:	4a1f      	ldr	r2, [pc, #124]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800139c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80013a0:	3bff      	subs	r3, #255	; 0xff
 80013a2:	6013      	str	r3, [r2, #0]
			diff_accel = diff_cnt - pre_diff_cnt;
 80013a4:	4a1d      	ldr	r2, [pc, #116]	; (800141c <HAL_TIM_PeriodElapsedCallback+0xd4>)
			if (diff_accel > diff_accel_max)
 80013a6:	491e      	ldr	r1, [pc, #120]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0xd8>)
			diff_accel = diff_cnt - pre_diff_cnt;
 80013a8:	6814      	ldr	r4, [r2, #0]
			if (diff_accel > diff_accel_max)
 80013aa:	6808      	ldr	r0, [r1, #0]
			pre_diff_cnt = 0;
 80013ac:	2500      	movs	r5, #0
			diff_accel = diff_cnt - pre_diff_cnt;
 80013ae:	1b1b      	subs	r3, r3, r4
			pre_diff_cnt = 0;
 80013b0:	6015      	str	r5, [r2, #0]
			if (diff_accel < diff_accel_min)
 80013b2:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0xdc>)
			if (diff_accel > diff_accel_max)
 80013b4:	4283      	cmp	r3, r0
				diff_accel_max = diff_accel;
 80013b6:	bfc8      	it	gt
 80013b8:	600b      	strgt	r3, [r1, #0]
			if (diff_accel < diff_accel_min)
 80013ba:	6811      	ldr	r1, [r2, #0]
 80013bc:	428b      	cmp	r3, r1
 80013be:	daca      	bge.n	8001356 <HAL_TIM_PeriodElapsedCallback+0xe>
				diff_accel_min = diff_accel;
 80013c0:	6013      	str	r3, [r2, #0]
}
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
		updateMA702_M0();
 80013c4:	f000 fc20 	bl	8001c08 <updateMA702_M0>
		setOutputRadianTIM8(getRadianM702_M0() + offset_radian, output_voltage,24);
 80013c8:	f000 fcb4 	bl	8001d34 <getRadianM702_M0>
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80013d0:	edd2 7a00 	vldr	s15, [r2]
 80013d4:	edd3 0a00 	vldr	s1, [r3]
 80013d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80013dc:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 80013e0:	f001 f822 	bl	8002428 <setOutputRadianTIM8>
		speed_calc_cycle++;
 80013e4:	e7c8      	b.n	8001378 <HAL_TIM_PeriodElapsedCallback+0x30>
			else if (temp_diff_cnt < -30000)
 80013e6:	4a10      	ldr	r2, [pc, #64]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80013e8:	4293      	cmp	r3, r2
				diff_cnt = temp_diff_cnt + 65535;
 80013ea:	bfb8      	it	lt
 80013ec:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80013f0:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80013f2:	bfb8      	it	lt
 80013f4:	33ff      	addlt	r3, #255	; 0xff
				diff_cnt = temp_diff_cnt;
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e7d4      	b.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80013fa:	bf00      	nop
 80013fc:	20000440 	.word	0x20000440
 8001400:	2000048c 	.word	0x2000048c
 8001404:	2000039c 	.word	0x2000039c
 8001408:	200003a0 	.word	0x200003a0
 800140c:	200003ac 	.word	0x200003ac
 8001410:	200003a8 	.word	0x200003a8
 8001414:	20000384 	.word	0x20000384
 8001418:	20000380 	.word	0x20000380
 800141c:	200003a4 	.word	0x200003a4
 8001420:	20000378 	.word	0x20000378
 8001424:	2000037c 	.word	0x2000037c
 8001428:	ffff8ad0 	.word	0xffff8ad0

0800142c <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t can_rx_cnt = 0;
uint8_t can_rx_data[8];
CAN_RxHeaderTypeDef   can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800142c:	b508      	push	{r3, lr}
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data) != HAL_OK)
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001432:	2100      	movs	r1, #0
 8001434:	f002 fab2 	bl	800399c <HAL_CAN_GetRxMessage>
 8001438:	b108      	cbz	r0, 800143e <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800143c:	e7fe      	b.n	800143c <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
	can_rx_cnt++;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001440:	6813      	ldr	r3, [r2, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	6013      	str	r3, [r2, #0]
}
 8001446:	bd08      	pop	{r3, pc}
 8001448:	2000035c 	.word	0x2000035c
 800144c:	20000354 	.word	0x20000354
 8001450:	20000350 	.word	0x20000350
 8001454:	00000000 	.word	0x00000000

08001458 <runMode>:
{
 8001458:	b570      	push	{r4, r5, r6, lr}
	if (offset_radian > M_PI * 2)
 800145a:	4d5d      	ldr	r5, [pc, #372]	; (80015d0 <runMode+0x178>)
{
 800145c:	b082      	sub	sp, #8
	if (offset_radian > M_PI * 2)
 800145e:	6828      	ldr	r0, [r5, #0]
 8001460:	f7ff f872 	bl	8000548 <__aeabi_f2d>
 8001464:	a356      	add	r3, pc, #344	; (adr r3, 80015c0 <runMode+0x168>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff fb55 	bl	8000b18 <__aeabi_dcmpgt>
 800146e:	b108      	cbz	r0, 8001474 <runMode+0x1c>
		offset_radian = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	602b      	str	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8001474:	4857      	ldr	r0, [pc, #348]	; (80015d4 <runMode+0x17c>)
		output_voltage = 2.0;
 8001476:	4c58      	ldr	r4, [pc, #352]	; (80015d8 <runMode+0x180>)
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8001478:	2101      	movs	r1, #1
 800147a:	f002 fee3 	bl	8004244 <HAL_GPIO_ReadPin>
 800147e:	b910      	cbnz	r0, 8001486 <runMode+0x2e>
		output_voltage = 2.0;
 8001480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001484:	6023      	str	r3, [r4, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 8001486:	4853      	ldr	r0, [pc, #332]	; (80015d4 <runMode+0x17c>)
 8001488:	2102      	movs	r1, #2
 800148a:	f002 fedb 	bl	8004244 <HAL_GPIO_ReadPin>
 800148e:	b910      	cbnz	r0, 8001496 <runMode+0x3e>
		output_voltage = -2.0;
 8001490:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001494:	6023      	str	r3, [r4, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 8001496:	484f      	ldr	r0, [pc, #316]	; (80015d4 <runMode+0x17c>)
 8001498:	2104      	movs	r1, #4
 800149a:	f002 fed3 	bl	8004244 <HAL_GPIO_ReadPin>
 800149e:	2800      	cmp	r0, #0
 80014a0:	d15f      	bne.n	8001562 <runMode+0x10a>
		motor_accel = 0;
 80014a2:	4e4e      	ldr	r6, [pc, #312]	; (80015dc <runMode+0x184>)
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80014a4:	484b      	ldr	r0, [pc, #300]	; (80015d4 <runMode+0x17c>)
		motor_accel = 0;
 80014a6:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80014a8:	2108      	movs	r1, #8
		output_voltage = 0;
 80014aa:	6023      	str	r3, [r4, #0]
		motor_accel = 0;
 80014ac:	6033      	str	r3, [r6, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80014ae:	f002 fec9 	bl	8004244 <HAL_GPIO_ReadPin>
 80014b2:	2800      	cmp	r0, #0
 80014b4:	d07b      	beq.n	80015ae <runMode+0x156>
	if (output_voltage > 0)
 80014b6:	edd4 7a00 	vldr	s15, [r4]
		offset_radian = -2.4 + user_offet_radian;
 80014ba:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <runMode+0x188>)
	if (output_voltage > 0)
 80014bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		offset_radian = -2.4 + user_offet_radian;
 80014c4:	6818      	ldr	r0, [r3, #0]
	if (output_voltage > 0)
 80014c6:	dd08      	ble.n	80014da <runMode+0x82>
		offset_radian = -2.4 + user_offet_radian;
 80014c8:	f7ff f83e 	bl	8000548 <__aeabi_f2d>
 80014cc:	a33e      	add	r3, pc, #248	; (adr r3, 80015c8 <runMode+0x170>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7fe fed9 	bl	8000288 <__aeabi_dsub>
 80014d6:	f7ff fb87 	bl	8000be8 <__aeabi_d2f>
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <runMode+0x18c>)
 80014dc:	eddf 6a42 	vldr	s13, [pc, #264]	; 80015e8 <runMode+0x190>
 80014e0:	edd3 7a00 	vldr	s15, [r3]
	if (max_speed_p < spd_rps)
 80014e4:	4b41      	ldr	r3, [pc, #260]	; (80015ec <runMode+0x194>)
 80014e6:	6028      	str	r0, [r5, #0]
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 80014e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if (max_speed_p < spd_rps)
 80014ec:	ed93 7a00 	vldr	s14, [r3]
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 80014f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (max_speed_p < spd_rps)
 80014f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d425      	bmi.n	800154a <runMode+0xf2>
	if (max_speed_m > spd_rps)
 80014fe:	4a3c      	ldr	r2, [pc, #240]	; (80015f0 <runMode+0x198>)
 8001500:	ed92 7a00 	vldr	s14, [r2]
 8001504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d505      	bpl.n	800151a <runMode+0xc2>
		max_offset_m = offset_radian;
 800150e:	4c39      	ldr	r4, [pc, #228]	; (80015f4 <runMode+0x19c>)
		max_speed_m = spd_rps;
 8001510:	edc2 7a00 	vstr	s15, [r2]
		max_speed_p = 0;
 8001514:	2100      	movs	r1, #0
		max_offset_m = offset_radian;
 8001516:	6020      	str	r0, [r4, #0]
		max_speed_p = 0;
 8001518:	6019      	str	r1, [r3, #0]
	printf("CS M0 %6d M1 %6d / BV %6d Temp %6d %6d \n",adc_raw_cs_m0,adc_raw_cs_m1,adc_raw_batt_v,adc_raw_temp_m0,adc_raw_temp_m1);
 800151a:	4c37      	ldr	r4, [pc, #220]	; (80015f8 <runMode+0x1a0>)
 800151c:	4837      	ldr	r0, [pc, #220]	; (80015fc <runMode+0x1a4>)
 800151e:	6824      	ldr	r4, [r4, #0]
 8001520:	6800      	ldr	r0, [r0, #0]
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <runMode+0x1a8>)
 8001524:	4a37      	ldr	r2, [pc, #220]	; (8001604 <runMode+0x1ac>)
 8001526:	4938      	ldr	r1, [pc, #224]	; (8001608 <runMode+0x1b0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	6809      	ldr	r1, [r1, #0]
 800152e:	e9cd 0400 	strd	r0, r4, [sp]
 8001532:	4836      	ldr	r0, [pc, #216]	; (800160c <runMode+0x1b4>)
 8001534:	f006 fc22 	bl	8007d7c <iprintf>
	diff_accel_max = -5000;
 8001538:	4935      	ldr	r1, [pc, #212]	; (8001610 <runMode+0x1b8>)
	diff_accel_min = 5000;
 800153a:	4b36      	ldr	r3, [pc, #216]	; (8001614 <runMode+0x1bc>)
	diff_accel_max = -5000;
 800153c:	4836      	ldr	r0, [pc, #216]	; (8001618 <runMode+0x1c0>)
 800153e:	6008      	str	r0, [r1, #0]
	diff_accel_min = 5000;
 8001540:	f241 3288 	movw	r2, #5000	; 0x1388
 8001544:	601a      	str	r2, [r3, #0]
}
 8001546:	b002      	add	sp, #8
 8001548:	bd70      	pop	{r4, r5, r6, pc}
		max_speed_m = 0;
 800154a:	eddf 6a34 	vldr	s13, [pc, #208]	; 800161c <runMode+0x1c4>
		max_offset_p = offset_radian;
 800154e:	4934      	ldr	r1, [pc, #208]	; (8001620 <runMode+0x1c8>)
		max_speed_m = 0;
 8001550:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <runMode+0x198>)
		max_speed_p = spd_rps;
 8001552:	edc3 7a00 	vstr	s15, [r3]
		max_speed_m = 0;
 8001556:	eeb0 7a66 	vmov.f32	s14, s13
		max_offset_p = offset_radian;
 800155a:	6008      	str	r0, [r1, #0]
		max_speed_m = 0;
 800155c:	edc2 6a00 	vstr	s13, [r2]
 8001560:	e7d0      	b.n	8001504 <runMode+0xac>
	output_voltage += motor_accel;
 8001562:	4e1e      	ldr	r6, [pc, #120]	; (80015dc <runMode+0x184>)
 8001564:	edd4 7a00 	vldr	s15, [r4]
 8001568:	edd6 6a00 	vldr	s13, [r6]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 800156c:	4819      	ldr	r0, [pc, #100]	; (80015d4 <runMode+0x17c>)
	output_voltage += motor_accel;
 800156e:	ee77 7aa6 	vadd.f32	s15, s15, s13
	if (output_voltage > 20.0)
 8001572:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (output_voltage < -20.0)
 800157e:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
		motor_accel = -0.5;
 8001582:	bfc8      	it	gt
 8001584:	f04f 433f 	movgt.w	r3, #3204448256	; 0xbf000000
	if (output_voltage < -20.0)
 8001588:	eef4 7ac7 	vcmpe.f32	s15, s14
		motor_accel = -0.5;
 800158c:	bfc8      	it	gt
 800158e:	6033      	strgt	r3, [r6, #0]
	if (output_voltage < -20.0)
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		motor_accel = 0.5;
 8001594:	bf48      	it	mi
 8001596:	f04f 537c 	movmi.w	r3, #1056964608	; 0x3f000000
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 800159a:	f04f 0108 	mov.w	r1, #8
		motor_accel = 0.5;
 800159e:	bf48      	it	mi
 80015a0:	6033      	strmi	r3, [r6, #0]
	output_voltage += motor_accel;
 80015a2:	edc4 7a00 	vstr	s15, [r4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80015a6:	f002 fe4d 	bl	8004244 <HAL_GPIO_ReadPin>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d183      	bne.n	80014b6 <runMode+0x5e>
		motor_accel = 0.1;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <runMode+0x1cc>)
		printf("start auto speed!!\n");
 80015b0:	481d      	ldr	r0, [pc, #116]	; (8001628 <runMode+0x1d0>)
		motor_accel = 0.1;
 80015b2:	6033      	str	r3, [r6, #0]
		printf("start auto speed!!\n");
 80015b4:	f006 fc68 	bl	8007e88 <puts>
 80015b8:	e77d      	b.n	80014b6 <runMode+0x5e>
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w
 80015c0:	54442d18 	.word	0x54442d18
 80015c4:	401921fb 	.word	0x401921fb
 80015c8:	33333333 	.word	0x33333333
 80015cc:	40033333 	.word	0x40033333
 80015d0:	2000039c 	.word	0x2000039c
 80015d4:	48000800 	.word	0x48000800
 80015d8:	200003a0 	.word	0x200003a0
 80015dc:	20000398 	.word	0x20000398
 80015e0:	200003bc 	.word	0x200003bc
 80015e4:	20000380 	.word	0x20000380
 80015e8:	3ca280a2 	.word	0x3ca280a2
 80015ec:	20000394 	.word	0x20000394
 80015f0:	20000390 	.word	0x20000390
 80015f4:	20000388 	.word	0x20000388
 80015f8:	20000324 	.word	0x20000324
 80015fc:	20000320 	.word	0x20000320
 8001600:	20000314 	.word	0x20000314
 8001604:	2000031c 	.word	0x2000031c
 8001608:	20000318 	.word	0x20000318
 800160c:	0800a01c 	.word	0x0800a01c
 8001610:	20000378 	.word	0x20000378
 8001614:	2000037c 	.word	0x2000037c
 8001618:	ffffec78 	.word	0xffffec78
 800161c:	00000000 	.word	0x00000000
 8001620:	2000038c 	.word	0x2000038c
 8001624:	3dcccccd 	.word	0x3dcccccd
 8001628:	0800a008 	.word	0x0800a008

0800162c <forceStop>:
void forceStop(void){
 800162c:	b538      	push	{r3, r4, r5, lr}
	HAL_TIM_Base_Stop_IT(&htim1);
 800162e:	4c0d      	ldr	r4, [pc, #52]	; (8001664 <forceStop+0x38>)
	HAL_TIM_Base_Stop_IT(&htim8);
 8001630:	4d0d      	ldr	r5, [pc, #52]	; (8001668 <forceStop+0x3c>)
	HAL_TIM_Base_Stop_IT(&htim1);
 8001632:	4620      	mov	r0, r4
 8001634:	f003 fca8 	bl	8004f88 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 8001638:	4628      	mov	r0, r5
 800163a:	f003 fca5 	bl	8004f88 <HAL_TIM_Base_Stop_IT>
	htim8.Instance->CCR1 = 0;
 800163e:	6829      	ldr	r1, [r5, #0]
	htim1.Instance->CCR1 = 0;
 8001640:	6822      	ldr	r2, [r4, #0]
	htim8.Instance->CCR1 = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	634b      	str	r3, [r1, #52]	; 0x34
	htim8.Instance->CCR2 = 0;
 8001646:	638b      	str	r3, [r1, #56]	; 0x38
	htim8.Instance->CCR3 = 0;
 8001648:	63cb      	str	r3, [r1, #60]	; 0x3c
	htim1.Instance->CCR1 = 0;
 800164a:	6353      	str	r3, [r2, #52]	; 0x34
	htim1.Instance->CCR2 = 0;
 800164c:	6393      	str	r3, [r2, #56]	; 0x38
	htim1.Instance->CCR3 = 0;
 800164e:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 8001650:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001652:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001656:	644b      	str	r3, [r1, #68]	; 0x44
	__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 8001658:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800165a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800165e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8001660:	bd38      	pop	{r3, r4, r5, pc}
 8001662:	bf00      	nop
 8001664:	20000440 	.word	0x20000440
 8001668:	2000048c 	.word	0x2000048c
 800166c:	00000000 	.word	0x00000000

08001670 <SystemClock_Config>:
{
 8001670:	b510      	push	{r4, lr}
 8001672:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001674:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001676:	223c      	movs	r2, #60	; 0x3c
 8001678:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167e:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8001682:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001686:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	9100      	str	r1, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168c:	f005 ff04 	bl	8007498 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001696:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800169c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800169e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a8:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ac:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016ae:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b0:	f002 fdde 	bl	8004270 <HAL_RCC_OscConfig>
 80016b4:	b108      	cbz	r0, 80016ba <SystemClock_Config+0x4a>
 80016b6:	b672      	cpsid	i
	while (1)
 80016b8:	e7fe      	b.n	80016b8 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ba:	220f      	movs	r2, #15
 80016bc:	2302      	movs	r3, #2
 80016be:	e9cd 2300 	strd	r2, r3, [sp]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80016c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016cc:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016d4:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016d6:	f003 f8b3 	bl	8004840 <HAL_RCC_ClockConfig>
 80016da:	4603      	mov	r3, r0
 80016dc:	b108      	cbz	r0, 80016e2 <SystemClock_Config+0x72>
 80016de:	b672      	cpsid	i
	while (1)
 80016e0:	e7fe      	b.n	80016e0 <SystemClock_Config+0x70>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80016e2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001708 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80016e6:	f243 0201 	movw	r2, #12289	; 0x3001
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ea:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80016ec:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80016f0:	9210      	str	r2, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80016f2:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f4:	f003 f9fe 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	b108      	cbz	r0, 80016fe <SystemClock_Config+0x8e>
 80016fa:	b672      	cpsid	i
	while (1)
 80016fc:	e7fe      	b.n	80016fc <SystemClock_Config+0x8c>
}
 80016fe:	b020      	add	sp, #128	; 0x80
 8001700:	bd10      	pop	{r4, pc}
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
	...

08001710 <main>:
{
 8001710:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001714:	b085      	sub	sp, #20
  HAL_Init();
 8001716:	f000 ffab 	bl	8002670 <HAL_Init>
  SystemClock_Config();
 800171a:	f7ff ffa9 	bl	8001670 <SystemClock_Config>
  MX_GPIO_Init();
 800171e:	f7ff fd47 	bl	80011b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001722:	f7ff fd2b 	bl	800117c <MX_DMA_Init>
  MX_ADC1_Init();
 8001726:	f7ff faaf 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 800172a:	f7ff fb1d 	bl	8000d68 <MX_ADC2_Init>
  MX_ADC3_Init();
 800172e:	f7ff fb63 	bl	8000df8 <MX_ADC3_Init>
  MX_CAN_Init();
 8001732:	f7ff fc65 	bl	8001000 <MX_CAN_Init>
  MX_SPI1_Init();
 8001736:	f000 fa03 	bl	8001b40 <MX_SPI1_Init>
  MX_TIM1_Init();
 800173a:	f000 fc8d 	bl	8002058 <MX_TIM1_Init>
  MX_TIM8_Init();
 800173e:	f000 fd2b 	bl	8002198 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001742:	f000 fed3 	bl	80024ec <MX_USART1_UART_Init>
  initFirstSin();
 8001746:	f000 fdd3 	bl	80022f0 <initFirstSin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800174a:	48c5      	ldr	r0, [pc, #788]	; (8001a60 <main+0x350>)
	HAL_TIM_PWM_Init(&htim8);
 800174c:	4dc5      	ldr	r5, [pc, #788]	; (8001a64 <main+0x354>)
 800174e:	4fc6      	ldr	r7, [pc, #792]	; (8001a68 <main+0x358>)
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001750:	ed9f 9ac6 	vldr	s18, [pc, #792]	; 8001a6c <main+0x35c>
		offset_radian = 0;
 8001754:	eddf 8ac6 	vldr	s17, [pc, #792]	; 8001a70 <main+0x360>
 8001758:	f8df a368 	ldr.w	sl, [pc, #872]	; 8001ac4 <main+0x3b4>
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 800175c:	f8df 9368 	ldr.w	r9, [pc, #872]	; 8001ac8 <main+0x3b8>
			if(HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1) > 3000){
 8001760:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001a88 <main+0x378>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176a:	f002 fd71 	bl	8004250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800176e:	48bc      	ldr	r0, [pc, #752]	; (8001a60 <main+0x350>)
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001776:	f002 fd6b 	bl	8004250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001780:	48b7      	ldr	r0, [pc, #732]	; (8001a60 <main+0x350>)
 8001782:	f002 fd65 	bl	8004250 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8001786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800178a:	f000 ff95 	bl	80026b8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800178e:	48b4      	ldr	r0, [pc, #720]	; (8001a60 <main+0x350>)
 8001790:	2200      	movs	r2, #0
 8001792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001796:	f002 fd5b 	bl	8004250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800179a:	48b1      	ldr	r0, [pc, #708]	; (8001a60 <main+0x350>)
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017a2:	f002 fd55 	bl	8004250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80017a6:	2200      	movs	r2, #0
 80017a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ac:	48ac      	ldr	r0, [pc, #688]	; (8001a60 <main+0x350>)
 80017ae:	f002 fd4f 	bl	8004250 <HAL_GPIO_WritePin>
  printf("Orion VV driver V1 start! \n");
 80017b2:	48b0      	ldr	r0, [pc, #704]	; (8001a74 <main+0x364>)
 80017b4:	f006 fb68 	bl	8007e88 <puts>
	enc_raw = hspi1.Instance->DR;
 80017b8:	4baf      	ldr	r3, [pc, #700]	; (8001a78 <main+0x368>)
 80017ba:	49b0      	ldr	r1, [pc, #704]	; (8001a7c <main+0x36c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68d8      	ldr	r0, [r3, #12]
	__HAL_SPI_ENABLE(&hspi1);
 80017c0:	681c      	ldr	r4, [r3, #0]
	enc_raw = hspi1.Instance->DR;
 80017c2:	8008      	strh	r0, [r1, #0]
	__HAL_SPI_ENABLE(&hspi1);
 80017c4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80017c8:	601c      	str	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80017ca:	2201      	movs	r2, #1
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	48ac      	ldr	r0, [pc, #688]	; (8001a80 <main+0x370>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017d0:	4cac      	ldr	r4, [pc, #688]	; (8001a84 <main+0x374>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80017d2:	f002 fd3d 	bl	8004250 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 80017d6:	48ac      	ldr	r0, [pc, #688]	; (8001a88 <main+0x378>)
 80017d8:	f001 f93e 	bl	8002a58 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 80017dc:	48ab      	ldr	r0, [pc, #684]	; (8001a8c <main+0x37c>)
 80017de:	f001 f93b 	bl	8002a58 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc3);
 80017e2:	48ab      	ldr	r0, [pc, #684]	; (8001a90 <main+0x380>)
 80017e4:	f001 f938 	bl	8002a58 <HAL_ADC_Start>
	    HAL_ADCEx_InjectedStart_IT(&hadc1);
 80017e8:	48a7      	ldr	r0, [pc, #668]	; (8001a88 <main+0x378>)
 80017ea:	f001 f9cd 	bl	8002b88 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc2);
 80017ee:	48a7      	ldr	r0, [pc, #668]	; (8001a8c <main+0x37c>)
 80017f0:	f001 f9ca 	bl	8002b88 <HAL_ADCEx_InjectedStart_IT>
	    HAL_ADCEx_InjectedStart_IT(&hadc3);
 80017f4:	48a6      	ldr	r0, [pc, #664]	; (8001a90 <main+0x380>)
 80017f6:	f001 f9c7 	bl	8002b88 <HAL_ADCEx_InjectedStart_IT>
	HAL_TIM_PWM_Init(&htim8);
 80017fa:	4628      	mov	r0, r5
 80017fc:	f003 fbdc 	bl	8004fb8 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001800:	2100      	movs	r1, #0
 8001802:	4628      	mov	r0, r5
 8001804:	f003 fc60 	bl	80050c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001808:	2100      	movs	r1, #0
 800180a:	4628      	mov	r0, r5
 800180c:	f003 ff22 	bl	8005654 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001810:	2104      	movs	r1, #4
 8001812:	4628      	mov	r0, r5
 8001814:	f003 fc58 	bl	80050c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8001818:	2104      	movs	r1, #4
 800181a:	4628      	mov	r0, r5
 800181c:	f003 ff1a 	bl	8005654 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001820:	2108      	movs	r1, #8
 8001822:	4628      	mov	r0, r5
 8001824:	f003 fc50 	bl	80050c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8001828:	2108      	movs	r1, #8
 800182a:	4628      	mov	r0, r5
 800182c:	f003 ff12 	bl	8005654 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001830:	2100      	movs	r1, #0
 8001832:	4620      	mov	r0, r4
 8001834:	f003 fc48 	bl	80050c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001838:	2100      	movs	r1, #0
 800183a:	4620      	mov	r0, r4
 800183c:	f003 ff0a 	bl	8005654 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001840:	2104      	movs	r1, #4
 8001842:	4620      	mov	r0, r4
 8001844:	f003 fc40 	bl	80050c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001848:	2104      	movs	r1, #4
 800184a:	4620      	mov	r0, r4
 800184c:	f003 ff02 	bl	8005654 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001850:	2108      	movs	r1, #8
 8001852:	4620      	mov	r0, r4
 8001854:	f003 fc38 	bl	80050c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001858:	2108      	movs	r1, #8
 800185a:	4620      	mov	r0, r4
 800185c:	f003 fefa 	bl	8005654 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001860:	210c      	movs	r1, #12
 8001862:	4620      	mov	r0, r4
 8001864:	f003 fc30 	bl	80050c8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 8001868:	210c      	movs	r1, #12
 800186a:	4620      	mov	r0, r4
 800186c:	f003 fef2 	bl	8005654 <HAL_TIMEx_PWMN_Start>
	htim1.Instance->CNT = 0;
 8001870:	6822      	ldr	r2, [r4, #0]
	htim8.Instance->CNT = 1000;
 8001872:	682b      	ldr	r3, [r5, #0]
	htim1.Instance->CNT = 0;
 8001874:	2600      	movs	r6, #0
 8001876:	6256      	str	r6, [r2, #36]	; 0x24
	htim8.Instance->CNT = 1000;
 8001878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim1);
 800187e:	4620      	mov	r0, r4
 8001880:	f003 fb48 	bl	8004f14 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 8001884:	4628      	mov	r0, r5
 8001886:	f003 fb45 	bl	8004f14 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800188a:	4982      	ldr	r1, [pc, #520]	; (8001a94 <main+0x384>)
 800188c:	4882      	ldr	r0, [pc, #520]	; (8001a98 <main+0x388>)
 800188e:	4d83      	ldr	r5, [pc, #524]	; (8001a9c <main+0x38c>)
 8001890:	4c83      	ldr	r4, [pc, #524]	; (8001aa0 <main+0x390>)
 8001892:	2201      	movs	r2, #1
 8001894:	f003 ffd4 	bl	8005840 <HAL_UART_Receive_IT>
	CAN_Filter_Init(0);
 8001898:	4630      	mov	r0, r6
 800189a:	f7ff fc3d 	bl	8001118 <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 800189e:	4881      	ldr	r0, [pc, #516]	; (8001aa4 <main+0x394>)
 80018a0:	4e81      	ldr	r6, [pc, #516]	; (8001aa8 <main+0x398>)
 80018a2:	f001 ffe5 	bl	8003870 <HAL_CAN_Start>
	printf("start main loop!\n");
 80018a6:	4881      	ldr	r0, [pc, #516]	; (8001aac <main+0x39c>)
 80018a8:	f006 faee 	bl	8007e88 <puts>
		if (uart_rx_flag)
 80018ac:	7833      	ldrb	r3, [r6, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d13c      	bne.n	800192c <main+0x21c>
		if (calibration_mode)
 80018b2:	f897 b000 	ldrb.w	fp, [r7]
 80018b6:	f1bb 0f00 	cmp.w	fp, #0
 80018ba:	f000 8107 	beq.w	8001acc <main+0x3bc>
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 80018be:	6828      	ldr	r0, [r5, #0]
 80018c0:	f7fe fe42 	bl	8000548 <__aeabi_f2d>
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 80018c4:	edda 7a00 	vldr	s15, [sl]
 80018c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 80018cc:	4602      	mov	r2, r0
 80018ce:	ee67 7a89 	vmul.f32	s15, s15, s18
 80018d2:	460b      	mov	r3, r1
 80018d4:	ee17 0a90 	vmov	r0, s15
 80018d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018dc:	f7fe fe34 	bl	8000548 <__aeabi_f2d>
 80018e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80018e4:	e9cd 0100 	strd	r0, r1, [sp]
 80018e8:	4648      	mov	r0, r9
 80018ea:	f006 fa47 	bl	8007d7c <iprintf>
	offset_radian += 0.05;
 80018ee:	6828      	ldr	r0, [r5, #0]
 80018f0:	f7fe fe2a 	bl	8000548 <__aeabi_f2d>
 80018f4:	a356      	add	r3, pc, #344	; (adr r3, 8001a50 <main+0x340>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fcc7 	bl	800028c <__adddf3>
 80018fe:	f7ff f973 	bl	8000be8 <__aeabi_d2f>
 8001902:	ee08 0a10 	vmov	s16, r0
	if (offset_radian > M_PI * 2)
 8001906:	f7fe fe1f 	bl	8000548 <__aeabi_f2d>
 800190a:	a353      	add	r3, pc, #332	; (adr r3, 8001a58 <main+0x348>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7ff f902 	bl	8000b18 <__aeabi_dcmpgt>
	offset_radian += 0.05;
 8001914:	2800      	cmp	r0, #0
 8001916:	bf18      	it	ne
 8001918:	eeb0 8a68 	vmovne.f32	s16, s17
			HAL_Delay(100);
 800191c:	2064      	movs	r0, #100	; 0x64
	offset_radian += 0.05;
 800191e:	ed85 8a00 	vstr	s16, [r5]
			HAL_Delay(100);
 8001922:	f000 fec9 	bl	80026b8 <HAL_Delay>
		if (uart_rx_flag)
 8001926:	7833      	ldrb	r3, [r6, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0c2      	beq.n	80018b2 <main+0x1a2>
			uart_rx_flag = false;
 800192c:	2300      	movs	r3, #0
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800192e:	4959      	ldr	r1, [pc, #356]	; (8001a94 <main+0x384>)
 8001930:	4859      	ldr	r0, [pc, #356]	; (8001a98 <main+0x388>)
			uart_rx_flag = false;
 8001932:	7033      	strb	r3, [r6, #0]
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8001934:	2201      	movs	r2, #1
 8001936:	f003 ff83 	bl	8005840 <HAL_UART_Receive_IT>
			switch (uart_rx_buf[0])
 800193a:	4b56      	ldr	r3, [pc, #344]	; (8001a94 <main+0x384>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b30      	cmp	r3, #48	; 0x30
 8001940:	f000 80e2 	beq.w	8001b08 <main+0x3f8>
 8001944:	3b61      	subs	r3, #97	; 0x61
 8001946:	b2da      	uxtb	r2, r3
 8001948:	2a16      	cmp	r2, #22
 800194a:	d8b2      	bhi.n	80018b2 <main+0x1a2>
 800194c:	2b16      	cmp	r3, #22
 800194e:	d8b0      	bhi.n	80018b2 <main+0x1a2>
 8001950:	a201      	add	r2, pc, #4	; (adr r2, 8001958 <main+0x248>)
 8001952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001956:	bf00      	nop
 8001958:	08001a35 	.word	0x08001a35
 800195c:	080018b3 	.word	0x080018b3
 8001960:	08001a1d 	.word	0x08001a1d
 8001964:	080018b3 	.word	0x080018b3
 8001968:	080018b3 	.word	0x080018b3
 800196c:	080018b3 	.word	0x080018b3
 8001970:	080018b3 	.word	0x080018b3
 8001974:	080018b3 	.word	0x080018b3
 8001978:	080018b3 	.word	0x080018b3
 800197c:	080018b3 	.word	0x080018b3
 8001980:	080018b3 	.word	0x080018b3
 8001984:	08001a09 	.word	0x08001a09
 8001988:	080018b3 	.word	0x080018b3
 800198c:	080018b3 	.word	0x080018b3
 8001990:	080018b3 	.word	0x080018b3
 8001994:	080019f9 	.word	0x080019f9
 8001998:	080019dd 	.word	0x080019dd
 800199c:	080018b3 	.word	0x080018b3
 80019a0:	080019c9 	.word	0x080019c9
 80019a4:	080018b3 	.word	0x080018b3
 80019a8:	080018b3 	.word	0x080018b3
 80019ac:	080018b3 	.word	0x080018b3
 80019b0:	080019b5 	.word	0x080019b5
				output_voltage += 0.5;
 80019b4:	4b3e      	ldr	r3, [pc, #248]	; (8001ab0 <main+0x3a0>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019c2:	edc3 7a00 	vstr	s15, [r3]
				break;
 80019c6:	e774      	b.n	80018b2 <main+0x1a2>
				output_voltage -= 0.5;
 80019c8:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <main+0x3a0>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019d6:	edc3 7a00 	vstr	s15, [r3]
				break;
 80019da:	e76a      	b.n	80018b2 <main+0x1a2>
				user_offet_radian += 0.05;
 80019dc:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <main+0x3a4>)
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	f7fe fdb2 	bl	8000548 <__aeabi_f2d>
 80019e4:	a31a      	add	r3, pc, #104	; (adr r3, 8001a50 <main+0x340>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fc4f 	bl	800028c <__adddf3>
 80019ee:	f7ff f8fb 	bl	8000be8 <__aeabi_d2f>
 80019f2:	4b30      	ldr	r3, [pc, #192]	; (8001ab4 <main+0x3a4>)
 80019f4:	6018      	str	r0, [r3, #0]
				break;
 80019f6:	e75c      	b.n	80018b2 <main+0x1a2>
				motor_accel = 0.5;
 80019f8:	4a2f      	ldr	r2, [pc, #188]	; (8001ab8 <main+0x3a8>)
				printf("start auto speed!!\n");
 80019fa:	4830      	ldr	r0, [pc, #192]	; (8001abc <main+0x3ac>)
				motor_accel = 0.5;
 80019fc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001a00:	6013      	str	r3, [r2, #0]
				printf("start auto speed!!\n");
 8001a02:	f006 fa41 	bl	8007e88 <puts>
				break;
 8001a06:	e754      	b.n	80018b2 <main+0x1a2>
				motor_accel = 0;
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <main+0x3a8>)
				printf("stop auto speed!!\n");
 8001a0a:	482d      	ldr	r0, [pc, #180]	; (8001ac0 <main+0x3b0>)
				motor_accel = 0;
 8001a0c:	edc3 8a00 	vstr	s17, [r3]
				output_voltage = 0;
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <main+0x3a0>)
 8001a12:	edc3 8a00 	vstr	s17, [r3]
				printf("stop auto speed!!\n");
 8001a16:	f006 fa37 	bl	8007e88 <puts>
				break;
 8001a1a:	e74a      	b.n	80018b2 <main+0x1a2>
				user_offet_radian = 0;
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <main+0x3a4>)
				output_voltage = 2.0;
 8001a1e:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <main+0x3a0>)
				user_offet_radian = 0;
 8001a20:	edc3 8a00 	vstr	s17, [r3]
				calibration_mode = true;
 8001a24:	2301      	movs	r3, #1
 8001a26:	703b      	strb	r3, [r7, #0]
				output_voltage = 2.0;
 8001a28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
				offset_radian = 0;
 8001a2c:	edc5 8a00 	vstr	s17, [r5]
				output_voltage = 2.0;
 8001a30:	6013      	str	r3, [r2, #0]
		if (calibration_mode)
 8001a32:	e744      	b.n	80018be <main+0x1ae>
				user_offet_radian -= 0.05;
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <main+0x3a4>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	f7fe fd86 	bl	8000548 <__aeabi_f2d>
 8001a3c:	a304      	add	r3, pc, #16	; (adr r3, 8001a50 <main+0x340>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fc21 	bl	8000288 <__aeabi_dsub>
 8001a46:	f7ff f8cf 	bl	8000be8 <__aeabi_d2f>
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <main+0x3a4>)
 8001a4c:	6018      	str	r0, [r3, #0]
				break;
 8001a4e:	e730      	b.n	80018b2 <main+0x1a2>
 8001a50:	9999999a 	.word	0x9999999a
 8001a54:	3fa99999 	.word	0x3fa99999
 8001a58:	54442d18 	.word	0x54442d18
 8001a5c:	401921fb 	.word	0x401921fb
 8001a60:	48000800 	.word	0x48000800
 8001a64:	2000048c 	.word	0x2000048c
 8001a68:	20000328 	.word	0x20000328
 8001a6c:	3ca280a2 	.word	0x3ca280a2
 8001a70:	00000000 	.word	0x00000000
 8001a74:	0800a068 	.word	0x0800a068
 8001a78:	200003c0 	.word	0x200003c0
 8001a7c:	20000384 	.word	0x20000384
 8001a80:	48000400 	.word	0x48000400
 8001a84:	20000440 	.word	0x20000440
 8001a88:	200001fc 	.word	0x200001fc
 8001a8c:	2000024c 	.word	0x2000024c
 8001a90:	2000029c 	.word	0x2000029c
 8001a94:	200003b0 	.word	0x200003b0
 8001a98:	2000151c 	.word	0x2000151c
 8001a9c:	2000039c 	.word	0x2000039c
 8001aa0:	20000334 	.word	0x20000334
 8001aa4:	200002ec 	.word	0x200002ec
 8001aa8:	200003ba 	.word	0x200003ba
 8001aac:	0800a084 	.word	0x0800a084
 8001ab0:	200003a0 	.word	0x200003a0
 8001ab4:	200003bc 	.word	0x200003bc
 8001ab8:	20000398 	.word	0x20000398
 8001abc:	0800a008 	.word	0x0800a008
 8001ac0:	0800a098 	.word	0x0800a098
 8001ac4:	20000380 	.word	0x20000380
 8001ac8:	0800a048 	.word	0x0800a048
			runMode();
 8001acc:	f7ff fcc4 	bl	8001458 <runMode>
			if(HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1) > 3000){
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4640      	mov	r0, r8
 8001ad4:	f001 f8f6 	bl	8002cc4 <HAL_ADCEx_InjectedGetValue>
 8001ad8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001adc:	4298      	cmp	r0, r3
 8001ade:	d819      	bhi.n	8001b14 <main+0x404>
			HAL_Delay(1);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f000 fde9 	bl	80026b8 <HAL_Delay>
			can_data[0] = 0;
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <main+0x410>)
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <main+0x414>)
 8001aea:	6013      	str	r3, [r2, #0]
			can_header.RTR = CAN_RTR_DATA;
 8001aec:	2308      	movs	r3, #8
 8001aee:	6123      	str	r3, [r4, #16]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001af0:	490d      	ldr	r1, [pc, #52]	; (8001b28 <main+0x418>)
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <main+0x41c>)
			can_header.RTR = CAN_RTR_DATA;
 8001af4:	f8c4 b00c 	str.w	fp, [r4, #12]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001af8:	480d      	ldr	r0, [pc, #52]	; (8001b30 <main+0x420>)
			can_header.StdId = 0x00;
 8001afa:	f8c4 b000 	str.w	fp, [r4]
			can_header.TransmitGlobalTime = DISABLE;
 8001afe:	f884 b014 	strb.w	fp, [r4, #20]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001b02:	f001 fee7 	bl	80038d4 <HAL_CAN_AddTxMessage>
 8001b06:	e6d1      	b.n	80018ac <main+0x19c>
				printf("enter sleep!\n");
 8001b08:	480a      	ldr	r0, [pc, #40]	; (8001b34 <main+0x424>)
 8001b0a:	f006 f9bd 	bl	8007e88 <puts>
				forceStop();
 8001b0e:	f7ff fd8d 	bl	800162c <forceStop>
				while (1)
 8001b12:	e7fe      	b.n	8001b12 <main+0x402>
				forceStop();
 8001b14:	f7ff fd8a 	bl	800162c <forceStop>
				printf("over current!!\n");
 8001b18:	4807      	ldr	r0, [pc, #28]	; (8001b38 <main+0x428>)
 8001b1a:	f006 f9b5 	bl	8007e88 <puts>
				while(1);
 8001b1e:	e7fe      	b.n	8001b1e <main+0x40e>
 8001b20:	2000032c 	.word	0x2000032c
 8001b24:	01010000 	.word	0x01010000
 8001b28:	20000334 	.word	0x20000334
 8001b2c:	2000034c 	.word	0x2000034c
 8001b30:	200002ec 	.word	0x200002ec
 8001b34:	0800a0ac 	.word	0x0800a0ac
 8001b38:	0800a0bc 	.word	0x0800a0bc

08001b3c <Error_Handler>:
 8001b3c:	b672      	cpsid	i
	while (1)
 8001b3e:	e7fe      	b.n	8001b3e <Error_Handler+0x2>

08001b40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b40:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b42:	4811      	ldr	r0, [pc, #68]	; (8001b88 <MX_SPI1_Init+0x48>)
 8001b44:	4c11      	ldr	r4, [pc, #68]	; (8001b8c <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b46:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b4a:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b4e:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b50:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b52:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b56:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001b58:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001b5e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b62:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b66:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001b68:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b6a:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b72:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001b76:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b78:	f003 f8d2 	bl	8004d20 <HAL_SPI_Init>
 8001b7c:	b900      	cbnz	r0, 8001b80 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b7e:	bd10      	pop	{r4, pc}
 8001b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001b84:	f7ff bfda 	b.w	8001b3c <Error_Handler>
 8001b88:	200003c0 	.word	0x200003c0
 8001b8c:	40013000 	.word	0x40013000

08001b90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b90:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001b92:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_SPI_MspInit+0x70>)
 8001b94:	6801      	ldr	r1, [r0, #0]
{
 8001b96:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8001b9a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001ba0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001ba4:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8001ba6:	d001      	beq.n	8001bac <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ba8:	b008      	add	sp, #32
 8001baa:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bb0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bb4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001bf8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	4812      	ldr	r0, [pc, #72]	; (8001c04 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bc0:	619a      	str	r2, [r3, #24]
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bc8:	9200      	str	r2, [sp, #0]
 8001bca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001bd2:	615a      	str	r2, [r3, #20]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bda:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bdc:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bde:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001be2:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f002 fa40 	bl	8004070 <HAL_GPIO_Init>
}
 8001bf0:	b008      	add	sp, #32
 8001bf2:	bd10      	pop	{r4, pc}
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	00000038 	.word	0x00000038
 8001bfc:	00000002 	.word	0x00000002
 8001c00:	40013000 	.word	0x40013000
 8001c04:	48000400 	.word	0x48000400

08001c08 <updateMA702_M0>:
  }
}

/* USER CODE BEGIN 1 */
inline void updateMA702_M0(void){
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2140      	movs	r1, #64	; 0x40
inline void updateMA702_M0(void){
 8001c0c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c0e:	481e      	ldr	r0, [pc, #120]	; (8001c88 <updateMA702_M0+0x80>)
 8001c10:	f002 fb1e 	bl	8004250 <HAL_GPIO_WritePin>

  ma702_0.enc_raw = hspi1.Instance->DR;
 8001c14:	4a1d      	ldr	r2, [pc, #116]	; (8001c8c <updateMA702_M0+0x84>)
 8001c16:	6812      	ldr	r2, [r2, #0]
  hspi1.Instance->DR = 0;
 8001c18:	2300      	movs	r3, #0
  ma702_0.enc_raw = hspi1.Instance->DR;
 8001c1a:	68d1      	ldr	r1, [r2, #12]
  hspi1.Instance->DR = 0;
 8001c1c:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001c1e:	6893      	ldr	r3, [r2, #8]
 8001c20:	07db      	lsls	r3, r3, #31
 8001c22:	d5fc      	bpl.n	8001c1e <updateMA702_M0+0x16>
  {
  }
  ma702_0.enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001c24:	68d2      	ldr	r2, [r2, #12]

  ma702_0.enc_elec = 5461 - (ma702_0.enc_raw % 5461);
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <updateMA702_M0+0x88>)
  ma702_0.enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001c28:	4c1a      	ldr	r4, [pc, #104]	; (8001c94 <updateMA702_M0+0x8c>)
 8001c2a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8001c2e:	400a      	ands	r2, r1
  ma702_0.enc_elec = 5461 - (ma702_0.enc_raw % 5461);
 8001c30:	fb83 1302 	smull	r1, r3, r3, r2
 8001c34:	4413      	add	r3, r2
 8001c36:	f241 5155 	movw	r1, #5461	; 0x1555
 8001c3a:	131b      	asrs	r3, r3, #12
 8001c3c:	fb01 2313 	mls	r3, r1, r3, r2
 8001c40:	1acb      	subs	r3, r1, r3
  ma702_0.output_radian = (float)ma702_0.enc_elec / 5461 * 2 * M_PI;
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c4a:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001c98 <updateMA702_M0+0x90>
 8001c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702_0.enc_elec = 5461 - (ma702_0.enc_raw % 5461);
 8001c52:	e9c4 2301 	strd	r2, r3, [r4, #4]
  ma702_0.output_radian = (float)ma702_0.enc_elec / 5461 * 2 * M_PI;
 8001c56:	ee17 0a90 	vmov	r0, s15
 8001c5a:	f7fe fc75 	bl	8000548 <__aeabi_f2d>
 8001c5e:	a308      	add	r3, pc, #32	; (adr r3, 8001c80 <updateMA702_M0+0x78>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	f7fe fcc8 	bl	80005f8 <__aeabi_dmul>
 8001c68:	f7fe ffbe 	bl	8000be8 <__aeabi_d2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	6023      	str	r3, [r4, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <updateMA702_M0+0x80>)
}
 8001c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2140      	movs	r1, #64	; 0x40
 8001c7a:	f002 bae9 	b.w	8004250 <HAL_GPIO_WritePin>
 8001c7e:	bf00      	nop
 8001c80:	54442d18 	.word	0x54442d18
 8001c84:	400921fb 	.word	0x400921fb
 8001c88:	48000400 	.word	0x48000400
 8001c8c:	200003c0 	.word	0x200003c0
 8001c90:	c003000d 	.word	0xc003000d
 8001c94:	20000424 	.word	0x20000424
 8001c98:	39c00300 	.word	0x39c00300
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <updateMA702_M1>:


inline void updateMA702_M1(void)
{
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2180      	movs	r1, #128	; 0x80
{
 8001ca4:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ca6:	481e      	ldr	r0, [pc, #120]	; (8001d20 <updateMA702_M1+0x80>)
 8001ca8:	f002 fad2 	bl	8004250 <HAL_GPIO_WritePin>

  ma702_1.enc_raw = hspi1.Instance->DR;
 8001cac:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <updateMA702_M1+0x84>)
 8001cae:	6812      	ldr	r2, [r2, #0]
  hspi1.Instance->DR = 0;
 8001cb0:	2300      	movs	r3, #0
  ma702_1.enc_raw = hspi1.Instance->DR;
 8001cb2:	68d1      	ldr	r1, [r2, #12]
  hspi1.Instance->DR = 0;
 8001cb4:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001cb6:	6893      	ldr	r3, [r2, #8]
 8001cb8:	07db      	lsls	r3, r3, #31
 8001cba:	d5fc      	bpl.n	8001cb6 <updateMA702_M1+0x16>
  {
  }
  ma702_1.enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001cbc:	68d2      	ldr	r2, [r2, #12]

  ma702_1.enc_elec = 5461 - (ma702_1.enc_raw % 5461);
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <updateMA702_M1+0x88>)
  ma702_1.enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001cc0:	4c1a      	ldr	r4, [pc, #104]	; (8001d2c <updateMA702_M1+0x8c>)
 8001cc2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8001cc6:	400a      	ands	r2, r1
  ma702_1.enc_elec = 5461 - (ma702_1.enc_raw % 5461);
 8001cc8:	fb83 1302 	smull	r1, r3, r3, r2
 8001ccc:	4413      	add	r3, r2
 8001cce:	f241 5155 	movw	r1, #5461	; 0x1555
 8001cd2:	131b      	asrs	r3, r3, #12
 8001cd4:	fb01 2313 	mls	r3, r1, r3, r2
 8001cd8:	1acb      	subs	r3, r1, r3
  ma702_1.output_radian = (float)ma702_1.enc_elec / 5461 * 2 * M_PI;
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce2:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001d30 <updateMA702_M1+0x90>
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702_1.enc_elec = 5461 - (ma702_1.enc_raw % 5461);
 8001cea:	e9c4 2301 	strd	r2, r3, [r4, #4]
  ma702_1.output_radian = (float)ma702_1.enc_elec / 5461 * 2 * M_PI;
 8001cee:	ee17 0a90 	vmov	r0, s15
 8001cf2:	f7fe fc29 	bl	8000548 <__aeabi_f2d>
 8001cf6:	a308      	add	r3, pc, #32	; (adr r3, 8001d18 <updateMA702_M1+0x78>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fc7c 	bl	80005f8 <__aeabi_dmul>
 8001d00:	f7fe ff72 	bl	8000be8 <__aeabi_d2f>
 8001d04:	4603      	mov	r3, r0
 8001d06:	6023      	str	r3, [r4, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <updateMA702_M1+0x80>)
}
 8001d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	f002 ba9d 	b.w	8004250 <HAL_GPIO_WritePin>
 8001d16:	bf00      	nop
 8001d18:	54442d18 	.word	0x54442d18
 8001d1c:	400921fb 	.word	0x400921fb
 8001d20:	48000400 	.word	0x48000400
 8001d24:	200003c0 	.word	0x200003c0
 8001d28:	c003000d 	.word	0xc003000d
 8001d2c:	20000430 	.word	0x20000430
 8001d30:	39c00300 	.word	0x39c00300

08001d34 <getRadianM702_M0>:

float getRadianM702_M0(void){
	return ma702_0.output_radian;
 8001d34:	4b01      	ldr	r3, [pc, #4]	; (8001d3c <getRadianM702_M0+0x8>)
}
 8001d36:	ed93 0a00 	vldr	s0, [r3]
 8001d3a:	4770      	bx	lr
 8001d3c:	20000424 	.word	0x20000424

08001d40 <getRadianM702_M1>:

float getRadianM702_M1(void){
	return ma702_1.output_radian;
 8001d40:	4b01      	ldr	r3, [pc, #4]	; (8001d48 <getRadianM702_M1+0x8>)
}
 8001d42:	ed93 0a00 	vldr	s0, [r3]
 8001d46:	4770      	bx	lr
 8001d48:	20000430 	.word	0x20000430

08001d4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_MspInit+0x2c>)
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	619a      	str	r2, [r3, #24]
 8001d56:	699a      	ldr	r2, [r3, #24]
{
 8001d58:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	f002 0201 	and.w	r2, r2, #1
 8001d5e:	9200      	str	r2, [sp, #0]
 8001d60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d68:	61da      	str	r2, [r3, #28]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d74:	b002      	add	sp, #8
 8001d76:	4770      	bx	lr
 8001d78:	40021000 	.word	0x40021000

08001d7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler>
 8001d7e:	bf00      	nop

08001d80 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <HardFault_Handler>
 8001d82:	bf00      	nop

08001d84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <MemManage_Handler>
 8001d86:	bf00      	nop

08001d88 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <BusFault_Handler>
 8001d8a:	bf00      	nop

08001d8c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler>
 8001d8e:	bf00      	nop

08001d90 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop

08001d94 <DebugMon_Handler>:
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop

08001d98 <PendSV_Handler>:
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop

08001d9c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d9c:	f000 bc7a 	b.w	8002694 <HAL_IncTick>

08001da0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001da0:	4801      	ldr	r0, [pc, #4]	; (8001da8 <DMA1_Channel4_IRQHandler+0x8>)
 8001da2:	f002 b91b 	b.w	8003fdc <HAL_DMA_IRQHandler>
 8001da6:	bf00      	nop
 8001da8:	200014d8 	.word	0x200014d8

08001dac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001dac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001dae:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <ADC1_2_IRQHandler+0x14>)
 8001db0:	f000 ffa4 	bl	8002cfc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001db4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <ADC1_2_IRQHandler+0x18>)
 8001dba:	f000 bf9f 	b.w	8002cfc <HAL_ADC_IRQHandler>
 8001dbe:	bf00      	nop
 8001dc0:	200001fc 	.word	0x200001fc
 8001dc4:	2000024c 	.word	0x2000024c

08001dc8 <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001dc8:	4801      	ldr	r0, [pc, #4]	; (8001dd0 <USB_HP_CAN_TX_IRQHandler+0x8>)
 8001dca:	f001 be9b 	b.w	8003b04 <HAL_CAN_IRQHandler>
 8001dce:	bf00      	nop
 8001dd0:	200002ec 	.word	0x200002ec

08001dd4 <USB_LP_CAN_RX0_IRQHandler>:
 8001dd4:	4801      	ldr	r0, [pc, #4]	; (8001ddc <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001dd6:	f001 be95 	b.w	8003b04 <HAL_CAN_IRQHandler>
 8001dda:	bf00      	nop
 8001ddc:	200002ec 	.word	0x200002ec

08001de0 <CAN_RX1_IRQHandler>:
 8001de0:	4801      	ldr	r0, [pc, #4]	; (8001de8 <CAN_RX1_IRQHandler+0x8>)
 8001de2:	f001 be8f 	b.w	8003b04 <HAL_CAN_IRQHandler>
 8001de6:	bf00      	nop
 8001de8:	200002ec 	.word	0x200002ec

08001dec <CAN_SCE_IRQHandler>:
 8001dec:	4801      	ldr	r0, [pc, #4]	; (8001df4 <CAN_SCE_IRQHandler+0x8>)
 8001dee:	f001 be89 	b.w	8003b04 <HAL_CAN_IRQHandler>
 8001df2:	bf00      	nop
 8001df4:	200002ec 	.word	0x200002ec

08001df8 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df8:	4801      	ldr	r0, [pc, #4]	; (8001e00 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001dfa:	f003 b9ff 	b.w	80051fc <HAL_TIM_IRQHandler>
 8001dfe:	bf00      	nop
 8001e00:	20000440 	.word	0x20000440

08001e04 <TIM1_CC_IRQHandler>:
 8001e04:	4801      	ldr	r0, [pc, #4]	; (8001e0c <TIM1_CC_IRQHandler+0x8>)
 8001e06:	f003 b9f9 	b.w	80051fc <HAL_TIM_IRQHandler>
 8001e0a:	bf00      	nop
 8001e0c:	20000440 	.word	0x20000440

08001e10 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e10:	4801      	ldr	r0, [pc, #4]	; (8001e18 <USART1_IRQHandler+0x8>)
 8001e12:	f003 be77 	b.w	8005b04 <HAL_UART_IRQHandler>
 8001e16:	bf00      	nop
 8001e18:	2000151c 	.word	0x2000151c

08001e1c <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001e1c:	4801      	ldr	r0, [pc, #4]	; (8001e24 <TIM8_UP_IRQHandler+0x8>)
 8001e1e:	f003 b9ed 	b.w	80051fc <HAL_TIM_IRQHandler>
 8001e22:	bf00      	nop
 8001e24:	2000048c 	.word	0x2000048c

08001e28 <TIM8_CC_IRQHandler>:
 8001e28:	4801      	ldr	r0, [pc, #4]	; (8001e30 <TIM8_CC_IRQHandler+0x8>)
 8001e2a:	f003 b9e7 	b.w	80051fc <HAL_TIM_IRQHandler>
 8001e2e:	bf00      	nop
 8001e30:	2000048c 	.word	0x2000048c

08001e34 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001e34:	4801      	ldr	r0, [pc, #4]	; (8001e3c <ADC3_IRQHandler+0x8>)
 8001e36:	f000 bf61 	b.w	8002cfc <HAL_ADC_IRQHandler>
 8001e3a:	bf00      	nop
 8001e3c:	2000029c 	.word	0x2000029c

08001e40 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001e40:	2001      	movs	r0, #1
 8001e42:	4770      	bx	lr

08001e44 <_kill>:

int _kill(int pid, int sig)
{
 8001e44:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e46:	f005 fafd 	bl	8007444 <__errno>
 8001e4a:	2316      	movs	r3, #22
 8001e4c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e52:	bd08      	pop	{r3, pc}

08001e54 <_exit>:

void _exit (int status)
{
 8001e54:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e56:	f005 faf5 	bl	8007444 <__errno>
 8001e5a:	2316      	movs	r3, #22
 8001e5c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001e5e:	e7fe      	b.n	8001e5e <_exit+0xa>

08001e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e60:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	1e16      	subs	r6, r2, #0
 8001e64:	dd07      	ble.n	8001e76 <_read+0x16>
 8001e66:	460c      	mov	r4, r1
 8001e68:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001e6a:	f3af 8000 	nop.w
 8001e6e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	42a5      	cmp	r5, r4
 8001e74:	d1f9      	bne.n	8001e6a <_read+0xa>
	}

return len;
}
 8001e76:	4630      	mov	r0, r6
 8001e78:	bd70      	pop	{r4, r5, r6, pc}
 8001e7a:	bf00      	nop

08001e7c <_close>:
}

int _close(int file)
{
	return -1;
}
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e88:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop

08001e90 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001e90:	2001      	movs	r0, #1
 8001e92:	4770      	bx	lr

08001e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001e94:	2000      	movs	r0, #0
 8001e96:	4770      	bx	lr

08001e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e98:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9a:	4c0c      	ldr	r4, [pc, #48]	; (8001ecc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <_sbrk+0x38>)
 8001e9e:	490d      	ldr	r1, [pc, #52]	; (8001ed4 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001ea0:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea2:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001ea4:	b12a      	cbz	r2, 8001eb2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea6:	4410      	add	r0, r2
 8001ea8:	4288      	cmp	r0, r1
 8001eaa:	d807      	bhi.n	8001ebc <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001eac:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001eae:	4610      	mov	r0, r2
 8001eb0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001eb2:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <_sbrk+0x40>)
 8001eb4:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4410      	add	r0, r2
 8001eb8:	4288      	cmp	r0, r1
 8001eba:	d9f7      	bls.n	8001eac <_sbrk+0x14>
    errno = ENOMEM;
 8001ebc:	f005 fac2 	bl	8007444 <__errno>
 8001ec0:	230c      	movs	r3, #12
    return (void *)-1;
 8001ec2:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8001ec6:	6003      	str	r3, [r0, #0]
}
 8001ec8:	4610      	mov	r0, r2
 8001eca:	bd10      	pop	{r4, pc}
 8001ecc:	2000043c 	.word	0x2000043c
 8001ed0:	20008000 	.word	0x20008000
 8001ed4:	00000400 	.word	0x00000400
 8001ed8:	200015b8 	.word	0x200015b8

08001edc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <SystemInit+0x10>)
 8001ede:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ee2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ef0:	b500      	push	{lr}

  if(tim_pwmHandle->Instance==TIM1)
 8001ef2:	4a22      	ldr	r2, [pc, #136]	; (8001f7c <HAL_TIM_PWM_MspInit+0x8c>)
 8001ef4:	6803      	ldr	r3, [r0, #0]
 8001ef6:	4293      	cmp	r3, r2
{
 8001ef8:	b083      	sub	sp, #12
  if(tim_pwmHandle->Instance==TIM1)
 8001efa:	d005      	beq.n	8001f08 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM8)
 8001efc:	4a20      	ldr	r2, [pc, #128]	; (8001f80 <HAL_TIM_PWM_MspInit+0x90>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01f      	beq.n	8001f42 <HAL_TIM_PWM_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f02:	b003      	add	sp, #12
 8001f04:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f08:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <HAL_TIM_PWM_MspInit+0x94>)
 8001f0a:	6998      	ldr	r0, [r3, #24]
 8001f0c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001f10:	6198      	str	r0, [r3, #24]
 8001f12:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f1a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f1c:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f1e:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f20:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f22:	f001 ff2b 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f26:	2019      	movs	r0, #25
 8001f28:	f001 ff66 	bl	8003df8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	201b      	movs	r0, #27
 8001f30:	4611      	mov	r1, r2
 8001f32:	f001 ff23 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f36:	201b      	movs	r0, #27
}
 8001f38:	b003      	add	sp, #12
 8001f3a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001f3e:	f001 bf5b 	b.w	8003df8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_TIM_PWM_MspInit+0x94>)
 8001f44:	6998      	ldr	r0, [r3, #24]
 8001f46:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8001f4a:	6198      	str	r0, [r3, #24]
 8001f4c:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001f54:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f56:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001f58:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f5a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001f5c:	f001 ff0e 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001f60:	202c      	movs	r0, #44	; 0x2c
 8001f62:	f001 ff49 	bl	8003df8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	202e      	movs	r0, #46	; 0x2e
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	f001 ff06 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001f70:	202e      	movs	r0, #46	; 0x2e
}
 8001f72:	b003      	add	sp, #12
 8001f74:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001f78:	f001 bf3e 	b.w	8003df8 <HAL_NVIC_EnableIRQ>
 8001f7c:	40012c00 	.word	0x40012c00
 8001f80:	40013400 	.word	0x40013400
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f88:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8001f8a:	6802      	ldr	r2, [r0, #0]
 8001f8c:	492e      	ldr	r1, [pc, #184]	; (8002048 <HAL_TIM_MspPostInit+0xc0>)
{
 8001f8e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8001f92:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001f98:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001f9c:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8001f9e:	d004      	beq.n	8001faa <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <HAL_TIM_MspPostInit+0xc4>)
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d032      	beq.n	800200c <HAL_TIM_MspPostInit+0x84>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001fa6:	b00a      	add	sp, #40	; 0x28
 8001fa8:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fae:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001fb2:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb4:	695a      	ldr	r2, [r3, #20]
 8001fb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001fc2:	9201      	str	r2, [sp, #4]
 8001fc4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fcc:	615a      	str	r2, [r3, #20]
 8001fce:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001fd0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001fda:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8001fde:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001fe4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f002 f841 	bl	8004070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fee:	2203      	movs	r2, #3
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	4816      	ldr	r0, [pc, #88]	; (8002050 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ff8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002000:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f002 f834 	bl	8004070 <HAL_GPIO_Init>
}
 8002008:	b00a      	add	sp, #40	; 0x28
 800200a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8002010:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8002040 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002014:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002016:	480f      	ldr	r0, [pc, #60]	; (8002054 <HAL_TIM_MspPostInit+0xcc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002018:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800201c:	615a      	str	r2, [r3, #20]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002024:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002026:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002028:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 800202a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202e:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002030:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002032:	f002 f81d 	bl	8004070 <HAL_GPIO_Init>
}
 8002036:	b00a      	add	sp, #40	; 0x28
 8002038:	bd10      	pop	{r4, pc}
 800203a:	bf00      	nop
 800203c:	f3af 8000 	nop.w
 8002040:	00001dc0 	.word	0x00001dc0
 8002044:	00000002 	.word	0x00000002
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40013400 	.word	0x40013400
 8002050:	48000400 	.word	0x48000400
 8002054:	48000800 	.word	0x48000800

08002058 <MX_TIM1_Init>:
{
 8002058:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205a:	2400      	movs	r4, #0
{
 800205c:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800205e:	222c      	movs	r2, #44	; 0x2c
 8002060:	4621      	mov	r1, r4
 8002062:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002068:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800206c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002070:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002078:	f005 fa0e 	bl	8007498 <memset>
  htim1.Instance = TIM1;
 800207c:	4844      	ldr	r0, [pc, #272]	; (8002190 <MX_TIM1_Init+0x138>)
  htim1.Init.Prescaler = 1;
 800207e:	4a45      	ldr	r2, [pc, #276]	; (8002194 <MX_TIM1_Init+0x13c>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 2000;
 8002088:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800208c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8002090:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002094:	f002 ff90 	bl	8004fb8 <HAL_TIM_PWM_Init>
 8002098:	2800      	cmp	r0, #0
 800209a:	d154      	bne.n	8002146 <MX_TIM1_Init+0xee>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800209c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020a0:	2270      	movs	r2, #112	; 0x70
 80020a2:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a6:	483a      	ldr	r0, [pc, #232]	; (8002190 <MX_TIM1_Init+0x138>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80020a8:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020aa:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80020ac:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ae:	f003 fb35 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d15d      	bne.n	8002172 <MX_TIM1_Init+0x11a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b6:	2060      	movs	r0, #96	; 0x60
 80020b8:	2100      	movs	r1, #0
 80020ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80020be:	2000      	movs	r0, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80020c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020ca:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020cc:	4830      	ldr	r0, [pc, #192]	; (8002190 <MX_TIM1_Init+0x138>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020ce:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d0:	a904      	add	r1, sp, #16
 80020d2:	f003 f98b 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d148      	bne.n	800216c <MX_TIM1_Init+0x114>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020da:	482d      	ldr	r0, [pc, #180]	; (8002190 <MX_TIM1_Init+0x138>)
 80020dc:	2204      	movs	r2, #4
 80020de:	a904      	add	r1, sp, #16
 80020e0:	f003 f984 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 80020e4:	2800      	cmp	r0, #0
 80020e6:	d13e      	bne.n	8002166 <MX_TIM1_Init+0x10e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e8:	4829      	ldr	r0, [pc, #164]	; (8002190 <MX_TIM1_Init+0x138>)
 80020ea:	2208      	movs	r2, #8
 80020ec:	a904      	add	r1, sp, #16
 80020ee:	f003 f97d 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 80020f2:	bba8      	cbnz	r0, 8002160 <MX_TIM1_Init+0x108>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80020f4:	2270      	movs	r2, #112	; 0x70
 80020f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020fe:	4824      	ldr	r0, [pc, #144]	; (8002190 <MX_TIM1_Init+0x138>)
 8002100:	a904      	add	r1, sp, #16
 8002102:	220c      	movs	r2, #12
 8002104:	f003 f972 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 8002108:	bb38      	cbnz	r0, 800215a <MX_TIM1_Init+0x102>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800210a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002178 <MX_TIM1_Init+0x120>
 800210e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002112:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002180 <MX_TIM1_Init+0x128>
 8002116:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800211a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002188 <MX_TIM1_Init+0x130>
 800211e:	2200      	movs	r2, #0
 8002120:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002122:	2400      	movs	r4, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002124:	481a      	ldr	r0, [pc, #104]	; (8002190 <MX_TIM1_Init+0x138>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002126:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002128:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800212a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800212e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002132:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002136:	f003 fb37 	bl	80057a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800213a:	b938      	cbnz	r0, 800214c <MX_TIM1_Init+0xf4>
  HAL_TIM_MspPostInit(&htim1);
 800213c:	4814      	ldr	r0, [pc, #80]	; (8002190 <MX_TIM1_Init+0x138>)
 800213e:	f7ff ff23 	bl	8001f88 <HAL_TIM_MspPostInit>
}
 8002142:	b018      	add	sp, #96	; 0x60
 8002144:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002146:	f7ff fcf9 	bl	8001b3c <Error_Handler>
 800214a:	e7a7      	b.n	800209c <MX_TIM1_Init+0x44>
    Error_Handler();
 800214c:	f7ff fcf6 	bl	8001b3c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002150:	480f      	ldr	r0, [pc, #60]	; (8002190 <MX_TIM1_Init+0x138>)
 8002152:	f7ff ff19 	bl	8001f88 <HAL_TIM_MspPostInit>
}
 8002156:	b018      	add	sp, #96	; 0x60
 8002158:	bd10      	pop	{r4, pc}
    Error_Handler();
 800215a:	f7ff fcef 	bl	8001b3c <Error_Handler>
 800215e:	e7d4      	b.n	800210a <MX_TIM1_Init+0xb2>
    Error_Handler();
 8002160:	f7ff fcec 	bl	8001b3c <Error_Handler>
 8002164:	e7c6      	b.n	80020f4 <MX_TIM1_Init+0x9c>
    Error_Handler();
 8002166:	f7ff fce9 	bl	8001b3c <Error_Handler>
 800216a:	e7bd      	b.n	80020e8 <MX_TIM1_Init+0x90>
    Error_Handler();
 800216c:	f7ff fce6 	bl	8001b3c <Error_Handler>
 8002170:	e7b3      	b.n	80020da <MX_TIM1_Init+0x82>
    Error_Handler();
 8002172:	f7ff fce3 	bl	8001b3c <Error_Handler>
 8002176:	e79e      	b.n	80020b6 <MX_TIM1_Init+0x5e>
 8002178:	00000000 	.word	0x00000000
 800217c:	0000000a 	.word	0x0000000a
 8002180:	00000000 	.word	0x00000000
 8002184:	00002000 	.word	0x00002000
 8002188:	02000000 	.word	0x02000000
 800218c:	00000000 	.word	0x00000000
 8002190:	20000440 	.word	0x20000440
 8002194:	40012c00 	.word	0x40012c00

08002198 <MX_TIM8_Init>:
{
 8002198:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	2400      	movs	r4, #0
{
 800219c:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800219e:	222c      	movs	r2, #44	; 0x2c
 80021a0:	4621      	mov	r1, r4
 80021a2:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80021ac:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80021b0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b4:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b6:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021b8:	f005 f96e 	bl	8007498 <memset>
  htim8.Instance = TIM8;
 80021bc:	484a      	ldr	r0, [pc, #296]	; (80022e8 <MX_TIM8_Init+0x150>)
  htim8.Init.Prescaler = 1;
 80021be:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <MX_TIM8_Init+0x154>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 2000;
 80021c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80021cc:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 80021d0:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021d4:	f002 fef0 	bl	8004fb8 <HAL_TIM_PWM_Init>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d155      	bne.n	8002288 <MX_TIM8_Init+0xf0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80021dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021e0:	2270      	movs	r2, #112	; 0x70
 80021e2:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021e6:	4840      	ldr	r0, [pc, #256]	; (80022e8 <MX_TIM8_Init+0x150>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80021e8:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021ea:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80021ec:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021ee:	f003 fa95 	bl	800571c <HAL_TIMEx_MasterConfigSynchronization>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d15e      	bne.n	80022b4 <MX_TIM8_Init+0x11c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f6:	2060      	movs	r0, #96	; 0x60
 80021f8:	2100      	movs	r1, #0
 80021fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80021fe:	2000      	movs	r0, #0
 8002200:	2100      	movs	r1, #0
 8002202:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002206:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800220a:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220c:	4836      	ldr	r0, [pc, #216]	; (80022e8 <MX_TIM8_Init+0x150>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800220e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002210:	a904      	add	r1, sp, #16
 8002212:	f003 f8eb 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 8002216:	2800      	cmp	r0, #0
 8002218:	d149      	bne.n	80022ae <MX_TIM8_Init+0x116>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800221a:	4833      	ldr	r0, [pc, #204]	; (80022e8 <MX_TIM8_Init+0x150>)
 800221c:	2204      	movs	r2, #4
 800221e:	a904      	add	r1, sp, #16
 8002220:	f003 f8e4 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 8002224:	2800      	cmp	r0, #0
 8002226:	d13f      	bne.n	80022a8 <MX_TIM8_Init+0x110>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002228:	482f      	ldr	r0, [pc, #188]	; (80022e8 <MX_TIM8_Init+0x150>)
 800222a:	2208      	movs	r2, #8
 800222c:	a904      	add	r1, sp, #16
 800222e:	f003 f8dd 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 8002232:	bbb0      	cbnz	r0, 80022a2 <MX_TIM8_Init+0x10a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002234:	2270      	movs	r2, #112	; 0x70
 8002236:	230a      	movs	r3, #10
 8002238:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800223c:	482a      	ldr	r0, [pc, #168]	; (80022e8 <MX_TIM8_Init+0x150>)
 800223e:	a904      	add	r1, sp, #16
 8002240:	220c      	movs	r2, #12
 8002242:	f003 f8d3 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 8002246:	bb48      	cbnz	r0, 800229c <MX_TIM8_Init+0x104>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002248:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 80022c0 <MX_TIM8_Init+0x128>
 800224c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002250:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 80022c8 <MX_TIM8_Init+0x130>
 8002254:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002258:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 80022d0 <MX_TIM8_Init+0x138>
 800225c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002260:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 80022d8 <MX_TIM8_Init+0x140>
 8002264:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002268:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 80022e0 <MX_TIM8_Init+0x148>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800226c:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800226e:	481e      	ldr	r0, [pc, #120]	; (80022e8 <MX_TIM8_Init+0x150>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002270:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002272:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002274:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002278:	f003 fa96 	bl	80057a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800227c:	b938      	cbnz	r0, 800228e <MX_TIM8_Init+0xf6>
  HAL_TIM_MspPostInit(&htim8);
 800227e:	481a      	ldr	r0, [pc, #104]	; (80022e8 <MX_TIM8_Init+0x150>)
 8002280:	f7ff fe82 	bl	8001f88 <HAL_TIM_MspPostInit>
}
 8002284:	b018      	add	sp, #96	; 0x60
 8002286:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002288:	f7ff fc58 	bl	8001b3c <Error_Handler>
 800228c:	e7a6      	b.n	80021dc <MX_TIM8_Init+0x44>
    Error_Handler();
 800228e:	f7ff fc55 	bl	8001b3c <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8002292:	4815      	ldr	r0, [pc, #84]	; (80022e8 <MX_TIM8_Init+0x150>)
 8002294:	f7ff fe78 	bl	8001f88 <HAL_TIM_MspPostInit>
}
 8002298:	b018      	add	sp, #96	; 0x60
 800229a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800229c:	f7ff fc4e 	bl	8001b3c <Error_Handler>
 80022a0:	e7d2      	b.n	8002248 <MX_TIM8_Init+0xb0>
    Error_Handler();
 80022a2:	f7ff fc4b 	bl	8001b3c <Error_Handler>
 80022a6:	e7c5      	b.n	8002234 <MX_TIM8_Init+0x9c>
    Error_Handler();
 80022a8:	f7ff fc48 	bl	8001b3c <Error_Handler>
 80022ac:	e7bc      	b.n	8002228 <MX_TIM8_Init+0x90>
    Error_Handler();
 80022ae:	f7ff fc45 	bl	8001b3c <Error_Handler>
 80022b2:	e7b2      	b.n	800221a <MX_TIM8_Init+0x82>
    Error_Handler();
 80022b4:	f7ff fc42 	bl	8001b3c <Error_Handler>
 80022b8:	e79d      	b.n	80021f6 <MX_TIM8_Init+0x5e>
 80022ba:	bf00      	nop
 80022bc:	f3af 8000 	nop.w
	...
 80022cc:	0000000a 	.word	0x0000000a
 80022d0:	00000000 	.word	0x00000000
 80022d4:	00002000 	.word	0x00002000
 80022d8:	00000004 	.word	0x00000004
 80022dc:	00000000 	.word	0x00000000
 80022e0:	02000000 	.word	0x02000000
 80022e4:	00000004 	.word	0x00000004
 80022e8:	2000048c 	.word	0x2000048c
 80022ec:	40013400 	.word	0x40013400

080022f0 <initFirstSin>:
}

/* USER CODE BEGIN 1 */
float rad_to_sin_cnv_array[1024] = {0};
inline void initFirstSin(void)
{
 80022f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < 1024; i++)
  {
    float temp_rad = (float)i / 256 * M_PI * 2;
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 80022f2:	4d19      	ldr	r5, [pc, #100]	; (8002358 <initFirstSin+0x68>)
 80022f4:	2300      	movs	r3, #0
    float temp_rad = (float)i / 256 * M_PI * 2;
 80022f6:	a716      	add	r7, pc, #88	; (adr r7, 8002350 <initFirstSin+0x60>)
 80022f8:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 80022fc:	ed2d 8b02 	vpush	{d8}
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8002300:	f845 3b04 	str.w	r3, [r5], #4
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002304:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800235c <initFirstSin+0x6c>
  for (int i = 0; i < 1024; i++)
 8002308:	2401      	movs	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 800230a:	ee07 4a90 	vmov	s15, r4
 800230e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 1024; i++)
 8002312:	3401      	adds	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002314:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002318:	ee17 0a90 	vmov	r0, s15
 800231c:	f7fe f914 	bl	8000548 <__aeabi_f2d>
 8002320:	4632      	mov	r2, r6
 8002322:	463b      	mov	r3, r7
 8002324:	f7fe f968 	bl	80005f8 <__aeabi_dmul>
 8002328:	f7fe fc5e 	bl	8000be8 <__aeabi_d2f>
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 800232c:	f7fe f90c 	bl	8000548 <__aeabi_f2d>
 8002330:	ec41 0b10 	vmov	d0, r0, r1
 8002334:	f004 f83c 	bl	80063b0 <sin>
 8002338:	ec51 0b10 	vmov	r0, r1, d0
 800233c:	f7fe fc54 	bl	8000be8 <__aeabi_d2f>
  for (int i = 0; i < 1024; i++)
 8002340:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8002344:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < 1024; i++)
 8002348:	d1df      	bne.n	800230a <initFirstSin+0x1a>
    // printf("rad %4.3f sin %4.3f\n",temp_rad,rad_to_sin_cnv_array[i]);
    // HAL_Delay(1);
  }
}
 800234a:	ecbd 8b02 	vpop	{d8}
 800234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002350:	54442d18 	.word	0x54442d18
 8002354:	401921fb 	.word	0x401921fb
 8002358:	200004d8 	.word	0x200004d8
 800235c:	3b800000 	.word	0x3b800000

08002360 <setOutputRadianTIM1>:
{
  return rad_to_sin_cnv_array[(uint8_t)(rad / (M_PI * 2) * 256)];
}

inline void setOutputRadianTIM1(float out_rad, float output_voltage, float battery_voltage)
{
 8002360:	b508      	push	{r3, lr}
 8002362:	eef0 0ae0 	vabs.f32	s1, s1
  const int pwm_cnt_centor = 700;
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > 24)
 8002366:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 800236a:	eef4 0ae7 	vcmpe.f32	s1, s15
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8002372:	ed2d 8b02 	vpush	{d8}
 8002376:	ee10 0a10 	vmov	r0, s0
  if (output_voltage > 24)
 800237a:	dc3c      	bgt.n	80023f6 <setOutputRadianTIM1+0x96>
  {
    output_voltage = 0;
  }
  voltage_propotional_cnt = output_voltage / 24 * pwm_cnt_centor;
 800237c:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8002410 <setOutputRadianTIM1+0xb0>
 8002380:	ee20 8a88 	vmul.f32	s16, s1, s16
 8002384:	eebd 8ac8 	vcvt.s32.f32	s16, s16

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002388:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 800238c:	f7fe f8dc 	bl	8000548 <__aeabi_f2d>
 8002390:	a31b      	add	r3, pc, #108	; (adr r3, 8002400 <setOutputRadianTIM1+0xa0>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fd ff79 	bl	800028c <__adddf3>
 800239a:	a31b      	add	r3, pc, #108	; (adr r3, 8002408 <setOutputRadianTIM1+0xa8>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	f7fe f92a 	bl	80005f8 <__aeabi_dmul>
 80023a4:	f7fe fc00 	bl	8000ba8 <__aeabi_d2uiz>
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <setOutputRadianTIM1+0xb4>)
 80023aa:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8002418 <setOutputRadianTIM1+0xb8>
 80023ae:	b2c0      	uxtb	r0, r0
 80023b0:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 80023b4:	ed91 7a00 	vldr	s14, [r1]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80023b8:	edd1 5a55 	vldr	s11, [r1, #340]	; 0x154
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80023bc:	ed91 6aaa 	vldr	s12, [r1, #680]	; 0x2a8
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <setOutputRadianTIM1+0xbc>)
 80023c2:	eef0 6a67 	vmov.f32	s13, s15
 80023c6:	eee7 6a08 	vfma.f32	s13, s14, s16
 80023ca:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80023cc:	eeb0 7a67 	vmov.f32	s14, s15
 80023d0:	eea5 7a88 	vfma.f32	s14, s11, s16
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80023d4:	eee6 7a08 	vfma.f32	s15, s12, s16
}
 80023d8:	ecbd 8b02 	vpop	{d8}
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80023dc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80023e0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80023e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80023e8:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80023ec:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80023f0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 80023f4:	bd08      	pop	{r3, pc}
 80023f6:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8002420 <setOutputRadianTIM1+0xc0>
 80023fa:	e7c7      	b.n	800238c <setOutputRadianTIM1+0x2c>
 80023fc:	f3af 8000 	nop.w
 8002400:	54442d18 	.word	0x54442d18
 8002404:	402921fb 	.word	0x402921fb
 8002408:	3d5bfeba 	.word	0x3d5bfeba
 800240c:	40444ad1 	.word	0x40444ad1
 8002410:	41e95556 	.word	0x41e95556
 8002414:	200004d8 	.word	0x200004d8
 8002418:	442f0000 	.word	0x442f0000
 800241c:	20000440 	.word	0x20000440
	...

08002428 <setOutputRadianTIM8>:

inline void setOutputRadianTIM8(float out_rad, float output_voltage, float battery_voltage){
 8002428:	b508      	push	{r3, lr}
 800242a:	eef0 0ae0 	vabs.f32	s1, s1
  const int pwm_cnt_centor = 700;
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > 24)
 800242e:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8002432:	eef4 0ae7 	vcmpe.f32	s1, s15
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
inline void setOutputRadianTIM8(float out_rad, float output_voltage, float battery_voltage){
 800243a:	ed2d 8b02 	vpush	{d8}
 800243e:	ee10 0a10 	vmov	r0, s0
  if (output_voltage > 24)
 8002442:	dc3c      	bgt.n	80024be <setOutputRadianTIM8+0x96>
  {
    output_voltage = 0;
  }
  voltage_propotional_cnt = output_voltage / 24 * pwm_cnt_centor;
 8002444:	ed9f 8a24 	vldr	s16, [pc, #144]	; 80024d8 <setOutputRadianTIM8+0xb0>
 8002448:	ee20 8a88 	vmul.f32	s16, s1, s16
 800244c:	eebd 8ac8 	vcvt.s32.f32	s16, s16

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002450:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8002454:	f7fe f878 	bl	8000548 <__aeabi_f2d>
 8002458:	a31b      	add	r3, pc, #108	; (adr r3, 80024c8 <setOutputRadianTIM8+0xa0>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fd ff15 	bl	800028c <__adddf3>
 8002462:	a31b      	add	r3, pc, #108	; (adr r3, 80024d0 <setOutputRadianTIM8+0xa8>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fe f8c6 	bl	80005f8 <__aeabi_dmul>
 800246c:	f7fe fb9c 	bl	8000ba8 <__aeabi_d2uiz>
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <setOutputRadianTIM8+0xb4>)
 8002472:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80024e0 <setOutputRadianTIM8+0xb8>
 8002476:	b2c0      	uxtb	r0, r0
 8002478:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 800247c:	ed91 7a00 	vldr	s14, [r1]
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002480:	edd1 5a55 	vldr	s11, [r1, #340]	; 0x154
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002484:	ed91 6aaa 	vldr	s12, [r1, #680]	; 0x2a8
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <setOutputRadianTIM8+0xbc>)
 800248a:	eef0 6a67 	vmov.f32	s13, s15
 800248e:	eee7 6a08 	vfma.f32	s13, s14, s16
 8002492:	681b      	ldr	r3, [r3, #0]
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002494:	eeb0 7a67 	vmov.f32	s14, s15
 8002498:	eea5 7a88 	vfma.f32	s14, s11, s16
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 800249c:	eee6 7a08 	vfma.f32	s15, s12, s16
}
 80024a0:	ecbd 8b02 	vpop	{d8}
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80024a4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80024a8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80024ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80024b0:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80024b4:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80024b8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 80024bc:	bd08      	pop	{r3, pc}
 80024be:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80024e8 <setOutputRadianTIM8+0xc0>
 80024c2:	e7c7      	b.n	8002454 <setOutputRadianTIM8+0x2c>
 80024c4:	f3af 8000 	nop.w
 80024c8:	54442d18 	.word	0x54442d18
 80024cc:	402921fb 	.word	0x402921fb
 80024d0:	3d5bfeba 	.word	0x3d5bfeba
 80024d4:	40444ad1 	.word	0x40444ad1
 80024d8:	41e95556 	.word	0x41e95556
 80024dc:	200004d8 	.word	0x200004d8
 80024e0:	442f0000 	.word	0x442f0000
 80024e4:	2000048c 	.word	0x2000048c
 80024e8:	00000000 	.word	0x00000000

080024ec <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024ec:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024ee:	480b      	ldr	r0, [pc, #44]	; (800251c <MX_USART1_UART_Init+0x30>)
 80024f0:	4c0b      	ldr	r4, [pc, #44]	; (8002520 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 80024f2:	490c      	ldr	r1, [pc, #48]	; (8002524 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024f4:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024f6:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 80024f8:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002500:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002504:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002508:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800250c:	f003 fee4 	bl	80062d8 <HAL_UART_Init>
 8002510:	b900      	cbnz	r0, 8002514 <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002512:	bd10      	pop	{r4, pc}
 8002514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002518:	f7ff bb10 	b.w	8001b3c <Error_Handler>
 800251c:	2000151c 	.word	0x2000151c
 8002520:	40013800 	.word	0x40013800
 8002524:	001e8480 	.word	0x001e8480

08002528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002528:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_UART_MspInit+0x9c>)
 800252c:	6802      	ldr	r2, [r0, #0]
{
 800252e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8002532:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002538:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800253c:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 800253e:	d001      	beq.n	8002544 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002540:	b008      	add	sp, #32
 8002542:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002544:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002548:	4605      	mov	r5, r0
 800254a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254c:	481e      	ldr	r0, [pc, #120]	; (80025c8 <HAL_UART_MspInit+0xa0>)
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800254e:	4e1f      	ldr	r6, [pc, #124]	; (80025cc <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002550:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800255c:	9200      	str	r2, [sp, #0]
 800255e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002566:	615a      	str	r2, [r3, #20]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800256e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002570:	2230      	movs	r2, #48	; 0x30
 8002572:	2302      	movs	r3, #2
 8002574:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002580:	2307      	movs	r3, #7
 8002582:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002584:	f001 fd74 	bl	8004070 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_UART_MspInit+0xa8>)
 800258a:	2310      	movs	r3, #16
 800258c:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002590:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002598:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800259c:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025a0:	f001 fc52 	bl	8003e48 <HAL_DMA_Init>
 80025a4:	b958      	cbnz	r0, 80025be <HAL_UART_MspInit+0x96>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	4611      	mov	r1, r2
 80025aa:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80025ac:	66ee      	str	r6, [r5, #108]	; 0x6c
 80025ae:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025b0:	f001 fbe4 	bl	8003d7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025b4:	2025      	movs	r0, #37	; 0x25
 80025b6:	f001 fc1f 	bl	8003df8 <HAL_NVIC_EnableIRQ>
}
 80025ba:	b008      	add	sp, #32
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80025be:	f7ff fabd 	bl	8001b3c <Error_Handler>
 80025c2:	e7f0      	b.n	80025a6 <HAL_UART_MspInit+0x7e>
 80025c4:	40013800 	.word	0x40013800
 80025c8:	48000800 	.word	0x48000800
 80025cc:	200014d8 	.word	0x200014d8
 80025d0:	40020044 	.word	0x40020044

080025d4 <Reset_Handler>:
 80025d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800260c <LoopForever+0x2>
 80025d8:	480d      	ldr	r0, [pc, #52]	; (8002610 <LoopForever+0x6>)
 80025da:	490e      	ldr	r1, [pc, #56]	; (8002614 <LoopForever+0xa>)
 80025dc:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <LoopForever+0xe>)
 80025de:	2300      	movs	r3, #0
 80025e0:	e002      	b.n	80025e8 <LoopCopyDataInit>

080025e2 <CopyDataInit>:
 80025e2:	58d4      	ldr	r4, [r2, r3]
 80025e4:	50c4      	str	r4, [r0, r3]
 80025e6:	3304      	adds	r3, #4

080025e8 <LoopCopyDataInit>:
 80025e8:	18c4      	adds	r4, r0, r3
 80025ea:	428c      	cmp	r4, r1
 80025ec:	d3f9      	bcc.n	80025e2 <CopyDataInit>
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <LoopForever+0x12>)
 80025f0:	4c0b      	ldr	r4, [pc, #44]	; (8002620 <LoopForever+0x16>)
 80025f2:	2300      	movs	r3, #0
 80025f4:	e001      	b.n	80025fa <LoopFillZerobss>

080025f6 <FillZerobss>:
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	3204      	adds	r2, #4

080025fa <LoopFillZerobss>:
 80025fa:	42a2      	cmp	r2, r4
 80025fc:	d3fb      	bcc.n	80025f6 <FillZerobss>
 80025fe:	f7ff fc6d 	bl	8001edc <SystemInit>
 8002602:	f004 ff25 	bl	8007450 <__libc_init_array>
 8002606:	f7ff f883 	bl	8001710 <main>

0800260a <LoopForever>:
 800260a:	e7fe      	b.n	800260a <LoopForever>
 800260c:	20008000 	.word	0x20008000
 8002610:	20000000 	.word	0x20000000
 8002614:	200001dc 	.word	0x200001dc
 8002618:	0800a6c4 	.word	0x0800a6c4
 800261c:	200001dc 	.word	0x200001dc
 8002620:	200015b4 	.word	0x200015b4

08002624 <ADC4_IRQHandler>:
 8002624:	e7fe      	b.n	8002624 <ADC4_IRQHandler>
	...

08002628 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002628:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800262a:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_InitTick+0x3c>)
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_InitTick+0x40>)
 800262e:	7812      	ldrb	r2, [r2, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
{
 8002632:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002638:	fbb0 f0f2 	udiv	r0, r0, r2
 800263c:	fbb3 f0f0 	udiv	r0, r3, r0
 8002640:	f001 fbe8 	bl	8003e14 <HAL_SYSTICK_Config>
 8002644:	b908      	cbnz	r0, 800264a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002646:	2d0f      	cmp	r5, #15
 8002648:	d901      	bls.n	800264e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800264a:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800264c:	bd38      	pop	{r3, r4, r5, pc}
 800264e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002650:	4602      	mov	r2, r0
 8002652:	4629      	mov	r1, r5
 8002654:	f04f 30ff 	mov.w	r0, #4294967295
 8002658:	f001 fb90 	bl	8003d7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_InitTick+0x44>)
 800265e:	4620      	mov	r0, r4
 8002660:	601d      	str	r5, [r3, #0]
}
 8002662:	bd38      	pop	{r3, r4, r5, pc}
 8002664:	20000004 	.word	0x20000004
 8002668:	20000000 	.word	0x20000000
 800266c:	20000008 	.word	0x20000008

08002670 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002670:	4a07      	ldr	r2, [pc, #28]	; (8002690 <HAL_Init+0x20>)
{
 8002672:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002674:	6813      	ldr	r3, [r2, #0]
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800267c:	2003      	movs	r0, #3
 800267e:	f001 fb6b 	bl	8003d58 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002682:	200f      	movs	r0, #15
 8002684:	f7ff ffd0 	bl	8002628 <HAL_InitTick>
  HAL_MspInit();
 8002688:	f7ff fb60 	bl	8001d4c <HAL_MspInit>
}
 800268c:	2000      	movs	r0, #0
 800268e:	bd08      	pop	{r3, pc}
 8002690:	40022000 	.word	0x40022000

08002694 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_IncTick+0x10>)
 8002696:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <HAL_IncTick+0x14>)
 8002698:	6811      	ldr	r1, [r2, #0]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	440b      	add	r3, r1
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	200015a0 	.word	0x200015a0
 80026a8:	20000004 	.word	0x20000004

080026ac <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80026ac:	4b01      	ldr	r3, [pc, #4]	; (80026b4 <HAL_GetTick+0x8>)
 80026ae:	6818      	ldr	r0, [r3, #0]
}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	200015a0 	.word	0x200015a0

080026b8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b8:	b538      	push	{r3, r4, r5, lr}
 80026ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff fff6 	bl	80026ac <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80026c2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80026c4:	d002      	beq.n	80026cc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_Delay+0x20>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80026cc:	f7ff ffee 	bl	80026ac <HAL_GetTick>
 80026d0:	1b43      	subs	r3, r0, r5
 80026d2:	42a3      	cmp	r3, r4
 80026d4:	d3fa      	bcc.n	80026cc <HAL_Delay+0x14>
  {
  }
}
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_ADC_ConvCpltCallback>:
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop

080026e0 <HAL_ADC_LevelOutOfWindowCallback>:
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop

080026e4 <HAL_ADC_ErrorCallback>:
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop

080026e8 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026e8:	6802      	ldr	r2, [r0, #0]
{
 80026ea:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026ec:	6893      	ldr	r3, [r2, #8]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d001      	beq.n	80026fa <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026f6:	2000      	movs	r0, #0
}
 80026f8:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026fa:	6811      	ldr	r1, [r2, #0]
 80026fc:	07cc      	lsls	r4, r1, #31
 80026fe:	d5fa      	bpl.n	80026f6 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002700:	6891      	ldr	r1, [r2, #8]
 8002702:	f001 010d 	and.w	r1, r1, #13
 8002706:	2901      	cmp	r1, #1
 8002708:	4604      	mov	r4, r0
 800270a:	d009      	beq.n	8002720 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800270e:	f042 0210 	orr.w	r2, r2, #16
 8002712:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002714:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002716:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6463      	str	r3, [r4, #68]	; 0x44
}
 800271e:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8002720:	6893      	ldr	r3, [r2, #8]
 8002722:	2103      	movs	r1, #3
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	6093      	str	r3, [r2, #8]
 800272a:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 800272c:	f7ff ffbe 	bl	80026ac <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8002736:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002738:	d403      	bmi.n	8002742 <ADC_Disable+0x5a>
 800273a:	e7dc      	b.n	80026f6 <ADC_Disable+0xe>
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	07db      	lsls	r3, r3, #31
 8002740:	d5d9      	bpl.n	80026f6 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002742:	f7ff ffb3 	bl	80026ac <HAL_GetTick>
 8002746:	1b40      	subs	r0, r0, r5
 8002748:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800274a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800274c:	d9f6      	bls.n	800273c <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	07d2      	lsls	r2, r2, #31
 8002752:	d5f3      	bpl.n	800273c <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002756:	f043 0310 	orr.w	r3, r3, #16
 800275a:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800275e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002760:	4303      	orrs	r3, r0
 8002762:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002764:	bd38      	pop	{r3, r4, r5, pc}
 8002766:	bf00      	nop

08002768 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002768:	6802      	ldr	r2, [r0, #0]
{
 800276a:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800276c:	6893      	ldr	r3, [r2, #8]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b01      	cmp	r3, #1
{
 8002774:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002776:	d025      	beq.n	80027c4 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002778:	6891      	ldr	r1, [r2, #8]
 800277a:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <ADC_Enable+0x68>)
 800277c:	4219      	tst	r1, r3
 800277e:	d008      	beq.n	8002792 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002782:	f043 0310 	orr.w	r3, r3, #16
 8002786:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002788:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278c:	4303      	orrs	r3, r0
 800278e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002790:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002792:	6893      	ldr	r3, [r2, #8]
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800279a:	f7ff ff87 	bl	80026ac <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800279e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 80027a0:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	07d9      	lsls	r1, r3, #31
 80027a6:	d40b      	bmi.n	80027c0 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027a8:	f7ff ff80 	bl	80026ac <HAL_GetTick>
 80027ac:	1b43      	subs	r3, r0, r5
 80027ae:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027b0:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027b2:	d9f6      	bls.n	80027a2 <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	07d2      	lsls	r2, r2, #31
 80027b8:	d5e2      	bpl.n	8002780 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	07d9      	lsls	r1, r3, #31
 80027be:	d5f3      	bpl.n	80027a8 <ADC_Enable+0x40>
  return HAL_OK;
 80027c0:	2000      	movs	r0, #0
}
 80027c2:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027c4:	6813      	ldr	r3, [r2, #0]
 80027c6:	07d8      	lsls	r0, r3, #31
 80027c8:	d5d6      	bpl.n	8002778 <ADC_Enable+0x10>
  return HAL_OK;
 80027ca:	2000      	movs	r0, #0
 80027cc:	e7f9      	b.n	80027c2 <ADC_Enable+0x5a>
 80027ce:	bf00      	nop
 80027d0:	8000003f 	.word	0x8000003f

080027d4 <HAL_ADC_Init>:
{
 80027d4:	b530      	push	{r4, r5, lr}
 80027d6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80027dc:	2800      	cmp	r0, #0
 80027de:	f000 809c 	beq.w	800291a <HAL_ADC_Init+0x146>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027e4:	f013 0310 	ands.w	r3, r3, #16
 80027e8:	4604      	mov	r4, r0
 80027ea:	d118      	bne.n	800281e <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80027ec:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80027ee:	2d00      	cmp	r5, #0
 80027f0:	f000 8096 	beq.w	8002920 <HAL_ADC_Init+0x14c>
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80027f4:	6822      	ldr	r2, [r4, #0]
 80027f6:	6891      	ldr	r1, [r2, #8]
 80027f8:	00c9      	lsls	r1, r1, #3
 80027fa:	f140 8082 	bpl.w	8002902 <HAL_ADC_Init+0x12e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80027fe:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002800:	008d      	lsls	r5, r1, #2
 8002802:	d47e      	bmi.n	8002902 <HAL_ADC_Init+0x12e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002804:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002806:	06c8      	lsls	r0, r1, #27
 8002808:	d400      	bmi.n	800280c <HAL_ADC_Init+0x38>
 800280a:	b163      	cbz	r3, 8002826 <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 800280c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800280e:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 8002812:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8002814:	f043 0310 	orr.w	r3, r3, #16
 8002818:	6423      	str	r3, [r4, #64]	; 0x40
}
 800281a:	b003      	add	sp, #12
 800281c:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800281e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002820:	06da      	lsls	r2, r3, #27
 8002822:	d4f3      	bmi.n	800280c <HAL_ADC_Init+0x38>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002824:	6802      	ldr	r2, [r0, #0]
 8002826:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002828:	f010 0004 	ands.w	r0, r0, #4
 800282c:	d1ee      	bne.n	800280c <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 800282e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002830:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002834:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002838:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800283c:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283e:	f000 80d9 	beq.w	80029f4 <HAL_ADC_Init+0x220>
 8002842:	4b7d      	ldr	r3, [pc, #500]	; (8002a38 <HAL_ADC_Init+0x264>)
 8002844:	429a      	cmp	r2, r3
 8002846:	f000 80dd 	beq.w	8002a04 <HAL_ADC_Init+0x230>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800284a:	497c      	ldr	r1, [pc, #496]	; (8002a3c <HAL_ADC_Init+0x268>)
 800284c:	428a      	cmp	r2, r1
 800284e:	d074      	beq.n	800293a <HAL_ADC_Init+0x166>
 8002850:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_ADC_Init+0x26c>)
 8002852:	429a      	cmp	r2, r3
 8002854:	d072      	beq.n	800293c <HAL_ADC_Init+0x168>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002856:	6893      	ldr	r3, [r2, #8]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b01      	cmp	r3, #1
 800285e:	f000 80e3 	beq.w	8002a28 <HAL_ADC_Init+0x254>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002862:	4d78      	ldr	r5, [pc, #480]	; (8002a44 <HAL_ADC_Init+0x270>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002864:	68ab      	ldr	r3, [r5, #8]
 8002866:	6861      	ldr	r1, [r4, #4]
 8002868:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800286c:	430b      	orrs	r3, r1
 800286e:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002870:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002872:	68e1      	ldr	r1, [r4, #12]
 8002874:	7e65      	ldrb	r5, [r4, #25]
 8002876:	2b01      	cmp	r3, #1
 8002878:	68a3      	ldr	r3, [r4, #8]
 800287a:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800287e:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002882:	bf18      	it	ne
 8002884:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002888:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800288c:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800288e:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002892:	f000 8093 	beq.w	80029bc <HAL_ADC_Init+0x1e8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002896:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002898:	2901      	cmp	r1, #1
 800289a:	d00b      	beq.n	80028b4 <HAL_ADC_Init+0xe0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800289c:	4867      	ldr	r0, [pc, #412]	; (8002a3c <HAL_ADC_Init+0x268>)
 800289e:	4282      	cmp	r2, r0
 80028a0:	f000 809c 	beq.w	80029dc <HAL_ADC_Init+0x208>
 80028a4:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80028a8:	4282      	cmp	r2, r0
 80028aa:	f000 8097 	beq.w	80029dc <HAL_ADC_Init+0x208>
 80028ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80028b0:	4303      	orrs	r3, r0
 80028b2:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80028b4:	6891      	ldr	r1, [r2, #8]
 80028b6:	f011 0f0c 	tst.w	r1, #12
 80028ba:	d10c      	bne.n	80028d6 <HAL_ADC_Init+0x102>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80028bc:	68d1      	ldr	r1, [r2, #12]
 80028be:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80028c2:	f021 0102 	bic.w	r1, r1, #2
 80028c6:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80028c8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80028cc:	7e20      	ldrb	r0, [r4, #24]
 80028ce:	0049      	lsls	r1, r1, #1
 80028d0:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80028d4:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80028d6:	68d0      	ldr	r0, [r2, #12]
 80028d8:	495b      	ldr	r1, [pc, #364]	; (8002a48 <HAL_ADC_Init+0x274>)
 80028da:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028dc:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80028de:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028e0:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 80028e2:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028e4:	d072      	beq.n	80029cc <HAL_ADC_Init+0x1f8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80028e8:	f023 030f 	bic.w	r3, r3, #15
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80028ee:	2000      	movs	r0, #0
 80028f0:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80028f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028f4:	f023 0303 	bic.w	r3, r3, #3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6423      	str	r3, [r4, #64]	; 0x40
}
 80028fe:	b003      	add	sp, #12
 8002900:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8002902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002904:	f023 0312 	bic.w	r3, r3, #18
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002918:	e778      	b.n	800280c <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 800291a:	2001      	movs	r0, #1
}
 800291c:	b003      	add	sp, #12
 800291e:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8002920:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8002924:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8002926:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800292a:	f7fe fab9 	bl	8000ea0 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	6893      	ldr	r3, [r2, #8]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	d511      	bpl.n	800295a <HAL_ADC_Init+0x186>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002936:	462b      	mov	r3, r5
 8002938:	e75d      	b.n	80027f6 <HAL_ADC_Init+0x22>
 800293a:	4941      	ldr	r1, [pc, #260]	; (8002a40 <HAL_ADC_Init+0x26c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800293c:	4d41      	ldr	r5, [pc, #260]	; (8002a44 <HAL_ADC_Init+0x270>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800293e:	6893      	ldr	r3, [r2, #8]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d058      	beq.n	80029fa <HAL_ADC_Init+0x226>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002948:	688b      	ldr	r3, [r1, #8]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d188      	bne.n	8002864 <HAL_ADC_Init+0x90>
 8002952:	680b      	ldr	r3, [r1, #0]
 8002954:	07db      	lsls	r3, r3, #31
 8002956:	d48b      	bmi.n	8002870 <HAL_ADC_Init+0x9c>
 8002958:	e784      	b.n	8002864 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fec4 	bl	80026e8 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002960:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 8002962:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002964:	06d0      	lsls	r0, r2, #27
 8002966:	f53f af45 	bmi.w	80027f4 <HAL_ADC_Init+0x20>
 800296a:	2b00      	cmp	r3, #0
 800296c:	f47f af42 	bne.w	80027f4 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8002970:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002972:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8002974:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002978:	f021 0102 	bic.w	r1, r1, #2
 800297c:	f041 0102 	orr.w	r1, r1, #2
 8002980:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002982:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002984:	4931      	ldr	r1, [pc, #196]	; (8002a4c <HAL_ADC_Init+0x278>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002986:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800298a:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800298c:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800298e:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002990:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002994:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002996:	482e      	ldr	r0, [pc, #184]	; (8002a50 <HAL_ADC_Init+0x27c>)
 8002998:	fba0 0101 	umull	r0, r1, r0, r1
 800299c:	0c89      	lsrs	r1, r1, #18
 800299e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80029a2:	0049      	lsls	r1, r1, #1
 80029a4:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80029a6:	9901      	ldr	r1, [sp, #4]
 80029a8:	2900      	cmp	r1, #0
 80029aa:	f43f af24 	beq.w	80027f6 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 80029ae:	9901      	ldr	r1, [sp, #4]
 80029b0:	3901      	subs	r1, #1
 80029b2:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80029b4:	9901      	ldr	r1, [sp, #4]
 80029b6:	2900      	cmp	r1, #0
 80029b8:	d1f9      	bne.n	80029ae <HAL_ADC_Init+0x1da>
 80029ba:	e71c      	b.n	80027f6 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029bc:	bb35      	cbnz	r5, 8002a0c <HAL_ADC_Init+0x238>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80029be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80029c0:	3901      	subs	r1, #1
 80029c2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ca:	e764      	b.n	8002896 <HAL_ADC_Init+0xc2>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80029cc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80029ce:	69e3      	ldr	r3, [r4, #28]
 80029d0:	f021 010f 	bic.w	r1, r1, #15
 80029d4:	3b01      	subs	r3, #1
 80029d6:	430b      	orrs	r3, r1
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	e788      	b.n	80028ee <HAL_ADC_Init+0x11a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80029dc:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 80029e0:	d01f      	beq.n	8002a22 <HAL_ADC_Init+0x24e>
 80029e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80029e6:	d024      	beq.n	8002a32 <HAL_ADC_Init+0x25e>
 80029e8:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 80029ec:	bf08      	it	eq
 80029ee:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80029f2:	e75c      	b.n	80028ae <HAL_ADC_Init+0xda>
 80029f4:	4910      	ldr	r1, [pc, #64]	; (8002a38 <HAL_ADC_Init+0x264>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029f6:	4d17      	ldr	r5, [pc, #92]	; (8002a54 <HAL_ADC_Init+0x280>)
 80029f8:	e7a1      	b.n	800293e <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80029fa:	6813      	ldr	r3, [r2, #0]
 80029fc:	07db      	lsls	r3, r3, #31
 80029fe:	f53f af37 	bmi.w	8002870 <HAL_ADC_Init+0x9c>
 8002a02:	e7a1      	b.n	8002948 <HAL_ADC_Init+0x174>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a04:	4d13      	ldr	r5, [pc, #76]	; (8002a54 <HAL_ADC_Init+0x280>)
 8002a06:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002a0a:	e798      	b.n	800293e <HAL_ADC_Init+0x16a>
        ADC_STATE_CLR_SET(hadc->State,
 8002a0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002a0e:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8002a12:	f041 0120 	orr.w	r1, r1, #32
 8002a16:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a18:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002a1a:	f041 0101 	orr.w	r1, r1, #1
 8002a1e:	6461      	str	r1, [r4, #68]	; 0x44
 8002a20:	e739      	b.n	8002896 <HAL_ADC_Init+0xc2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a22:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002a26:	e742      	b.n	80028ae <HAL_ADC_Init+0xda>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a28:	6813      	ldr	r3, [r2, #0]
 8002a2a:	07d9      	lsls	r1, r3, #31
 8002a2c:	f53f af20 	bmi.w	8002870 <HAL_ADC_Init+0x9c>
 8002a30:	e717      	b.n	8002862 <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002a32:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8002a36:	e73a      	b.n	80028ae <HAL_ADC_Init+0xda>
 8002a38:	50000100 	.word	0x50000100
 8002a3c:	50000400 	.word	0x50000400
 8002a40:	50000500 	.word	0x50000500
 8002a44:	50000700 	.word	0x50000700
 8002a48:	fff0c007 	.word	0xfff0c007
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	431bde83 	.word	0x431bde83
 8002a54:	50000300 	.word	0x50000300

08002a58 <HAL_ADC_Start>:
{
 8002a58:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a5a:	6803      	ldr	r3, [r0, #0]
 8002a5c:	689d      	ldr	r5, [r3, #8]
 8002a5e:	f015 0504 	ands.w	r5, r5, #4
 8002a62:	d12c      	bne.n	8002abe <HAL_ADC_Start+0x66>
    __HAL_LOCK(hadc);
 8002a64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	d027      	beq.n	8002abe <HAL_ADC_Start+0x66>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8002a74:	f7ff fe78 	bl	8002768 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002a78:	b9f0      	cbnz	r0, 8002ab8 <HAL_ADC_Start+0x60>
      ADC_STATE_CLR_SET(hadc->State,
 8002a7a:	6c22      	ldr	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a7c:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002a7e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 8002a8e:	6422      	str	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a90:	d017      	beq.n	8002ac2 <HAL_ADC_Start+0x6a>
 8002a92:	4a3a      	ldr	r2, [pc, #232]	; (8002b7c <HAL_ADC_Start+0x124>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d068      	beq.n	8002b6a <HAL_ADC_Start+0x112>
 8002a98:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002a9c:	6892      	ldr	r2, [r2, #8]
 8002a9e:	06d5      	lsls	r5, r2, #27
 8002aa0:	d011      	beq.n	8002ac6 <HAL_ADC_Start+0x6e>
 8002aa2:	4937      	ldr	r1, [pc, #220]	; (8002b80 <HAL_ADC_Start+0x128>)
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	d00e      	beq.n	8002ac6 <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002aa8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002aaa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002aae:	6422      	str	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ab0:	68ca      	ldr	r2, [r1, #12]
 8002ab2:	0192      	lsls	r2, r2, #6
 8002ab4:	d514      	bpl.n	8002ae0 <HAL_ADC_Start+0x88>
 8002ab6:	e00d      	b.n	8002ad4 <HAL_ADC_Start+0x7c>
      __HAL_UNLOCK(hadc);
 8002ab8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 8002abc:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8002abe:	2002      	movs	r0, #2
}
 8002ac0:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ac2:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <HAL_ADC_Start+0x12c>)
 8002ac4:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ac6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ac8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002acc:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	0191      	lsls	r1, r2, #6
 8002ad2:	d505      	bpl.n	8002ae0 <HAL_ADC_Start+0x88>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ad4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ad6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ada:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ade:	6422      	str	r2, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ae2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ae6:	bf1c      	itt	ne
 8002ae8:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8002aea:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002aee:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8002af0:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002af2:	221c      	movs	r2, #28
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
 8002af8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002afc:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002afe:	d01a      	beq.n	8002b36 <HAL_ADC_Start+0xde>
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <HAL_ADC_Start+0x124>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d022      	beq.n	8002b4c <HAL_ADC_Start+0xf4>
 8002b06:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 8002b0a:	06cd      	lsls	r5, r1, #27
 8002b0c:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002b10:	d00c      	beq.n	8002b2c <HAL_ADC_Start+0xd4>
 8002b12:	6891      	ldr	r1, [r2, #8]
 8002b14:	f001 011f 	and.w	r1, r1, #31
 8002b18:	2905      	cmp	r1, #5
 8002b1a:	d007      	beq.n	8002b2c <HAL_ADC_Start+0xd4>
 8002b1c:	6892      	ldr	r2, [r2, #8]
 8002b1e:	f002 021f 	and.w	r2, r2, #31
 8002b22:	2a09      	cmp	r2, #9
 8002b24:	d002      	beq.n	8002b2c <HAL_ADC_Start+0xd4>
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_ADC_Start+0x128>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d1c7      	bne.n	8002abc <HAL_ADC_Start+0x64>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	f042 0204 	orr.w	r2, r2, #4
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <HAL_ADC_Start+0x12c>)
 8002b38:	6891      	ldr	r1, [r2, #8]
 8002b3a:	06cc      	lsls	r4, r1, #27
 8002b3c:	d0f6      	beq.n	8002b2c <HAL_ADC_Start+0xd4>
 8002b3e:	6891      	ldr	r1, [r2, #8]
 8002b40:	f001 011f 	and.w	r1, r1, #31
 8002b44:	2905      	cmp	r1, #5
 8002b46:	d0f1      	beq.n	8002b2c <HAL_ADC_Start+0xd4>
 8002b48:	6892      	ldr	r2, [r2, #8]
 8002b4a:	e7ef      	b.n	8002b2c <HAL_ADC_Start+0xd4>
 8002b4c:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <HAL_ADC_Start+0x12c>)
 8002b4e:	6891      	ldr	r1, [r2, #8]
 8002b50:	06c9      	lsls	r1, r1, #27
 8002b52:	d0eb      	beq.n	8002b2c <HAL_ADC_Start+0xd4>
 8002b54:	6891      	ldr	r1, [r2, #8]
 8002b56:	f001 011f 	and.w	r1, r1, #31
 8002b5a:	2905      	cmp	r1, #5
 8002b5c:	d0e6      	beq.n	8002b2c <HAL_ADC_Start+0xd4>
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	f002 021f 	and.w	r2, r2, #31
 8002b64:	2a09      	cmp	r2, #9
 8002b66:	d0e1      	beq.n	8002b2c <HAL_ADC_Start+0xd4>
}
 8002b68:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b6a:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <HAL_ADC_Start+0x12c>)
 8002b6c:	6892      	ldr	r2, [r2, #8]
 8002b6e:	06d2      	lsls	r2, r2, #27
 8002b70:	d0a9      	beq.n	8002ac6 <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b72:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b74:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002b78:	e797      	b.n	8002aaa <HAL_ADC_Start+0x52>
 8002b7a:	bf00      	nop
 8002b7c:	50000100 	.word	0x50000100
 8002b80:	50000400 	.word	0x50000400
 8002b84:	50000300 	.word	0x50000300

08002b88 <HAL_ADCEx_InjectedStart_IT>:
{
 8002b88:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002b8a:	6803      	ldr	r3, [r0, #0]
 8002b8c:	689d      	ldr	r5, [r3, #8]
 8002b8e:	f015 0508 	ands.w	r5, r5, #8
 8002b92:	d129      	bne.n	8002be8 <HAL_ADCEx_InjectedStart_IT+0x60>
    __HAL_LOCK(hadc);
 8002b94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	4604      	mov	r4, r0
 8002b9c:	d024      	beq.n	8002be8 <HAL_ADCEx_InjectedStart_IT+0x60>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8002ba4:	f7ff fde0 	bl	8002768 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002ba8:	b9d8      	cbnz	r0, 8002be2 <HAL_ADCEx_InjectedStart_IT+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8002baa:	6c22      	ldr	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bac:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002bae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 8002bbe:	6422      	str	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bc0:	d014      	beq.n	8002bec <HAL_ADCEx_InjectedStart_IT+0x64>
 8002bc2:	4a3d      	ldr	r2, [pc, #244]	; (8002cb8 <HAL_ADCEx_InjectedStart_IT+0x130>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d058      	beq.n	8002c7a <HAL_ADCEx_InjectedStart_IT+0xf2>
 8002bc8:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002bcc:	6892      	ldr	r2, [r2, #8]
 8002bce:	06d5      	lsls	r5, r2, #27
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_ADCEx_InjectedStart_IT+0x68>
 8002bd2:	4a3a      	ldr	r2, [pc, #232]	; (8002cbc <HAL_ADCEx_InjectedStart_IT+0x134>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_ADCEx_InjectedStart_IT+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bd8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bda:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bde:	6422      	str	r2, [r4, #64]	; 0x40
 8002be0:	e00a      	b.n	8002bf8 <HAL_ADCEx_InjectedStart_IT+0x70>
      __HAL_UNLOCK(hadc);
 8002be2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 8002be6:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8002be8:	2002      	movs	r0, #2
}
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002bec:	4a34      	ldr	r2, [pc, #208]	; (8002cc0 <HAL_ADCEx_InjectedStart_IT+0x138>)
 8002bee:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bf0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bf2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002bf6:	6422      	str	r2, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002bf8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bfa:	f412 7280 	ands.w	r2, r2, #256	; 0x100
        ADC_CLEAR_ERRORCODE(hadc);
 8002bfe:	bf08      	it	eq
 8002c00:	6462      	streq	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8002c02:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002c04:	2260      	movs	r2, #96	; 0x60
      __HAL_UNLOCK(hadc);
 8002c06:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002c0a:	601a      	str	r2, [r3, #0]
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	0291      	lsls	r1, r2, #10
 8002c10:	d503      	bpl.n	8002c1a <HAL_ADCEx_InjectedStart_IT+0x92>
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c18:	605a      	str	r2, [r3, #4]
      switch(hadc->Init.EOCSelection)
 8002c1a:	6962      	ldr	r2, [r4, #20]
 8002c1c:	2a08      	cmp	r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c1e:	685a      	ldr	r2, [r3, #4]
      switch(hadc->Init.EOCSelection)
 8002c20:	d023      	beq.n	8002c6a <HAL_ADCEx_InjectedStart_IT+0xe2>
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c22:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002c26:	605a      	str	r2, [r3, #4]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	0192      	lsls	r2, r2, #6
 8002c2c:	d4db      	bmi.n	8002be6 <HAL_ADCEx_InjectedStart_IT+0x5e>
 8002c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c32:	d027      	beq.n	8002c84 <HAL_ADCEx_InjectedStart_IT+0xfc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002c34:	4a20      	ldr	r2, [pc, #128]	; (8002cb8 <HAL_ADCEx_InjectedStart_IT+0x130>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d02f      	beq.n	8002c9a <HAL_ADCEx_InjectedStart_IT+0x112>
 8002c3a:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 8002c3e:	06cd      	lsls	r5, r1, #27
 8002c40:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002c44:	d00c      	beq.n	8002c60 <HAL_ADCEx_InjectedStart_IT+0xd8>
 8002c46:	6891      	ldr	r1, [r2, #8]
 8002c48:	f001 011f 	and.w	r1, r1, #31
 8002c4c:	2906      	cmp	r1, #6
 8002c4e:	d007      	beq.n	8002c60 <HAL_ADCEx_InjectedStart_IT+0xd8>
 8002c50:	6892      	ldr	r2, [r2, #8]
 8002c52:	f002 021f 	and.w	r2, r2, #31
 8002c56:	2a07      	cmp	r2, #7
 8002c58:	d002      	beq.n	8002c60 <HAL_ADCEx_InjectedStart_IT+0xd8>
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_ADCEx_InjectedStart_IT+0x134>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d1c2      	bne.n	8002be6 <HAL_ADCEx_InjectedStart_IT+0x5e>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	f042 0208 	orr.w	r2, r2, #8
 8002c66:	609a      	str	r2, [r3, #8]
}
 8002c68:	bd38      	pop	{r3, r4, r5, pc}
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c6a:	f022 0220 	bic.w	r2, r2, #32
 8002c6e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c76:	605a      	str	r2, [r3, #4]
          break;
 8002c78:	e7d6      	b.n	8002c28 <HAL_ADCEx_InjectedStart_IT+0xa0>
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c7a:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <HAL_ADCEx_InjectedStart_IT+0x138>)
 8002c7c:	6892      	ldr	r2, [r2, #8]
 8002c7e:	06d2      	lsls	r2, r2, #27
 8002c80:	d0b6      	beq.n	8002bf0 <HAL_ADCEx_InjectedStart_IT+0x68>
 8002c82:	e7a9      	b.n	8002bd8 <HAL_ADCEx_InjectedStart_IT+0x50>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002c84:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <HAL_ADCEx_InjectedStart_IT+0x138>)
 8002c86:	6891      	ldr	r1, [r2, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002c88:	06cc      	lsls	r4, r1, #27
 8002c8a:	d0e9      	beq.n	8002c60 <HAL_ADCEx_InjectedStart_IT+0xd8>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002c8c:	6891      	ldr	r1, [r2, #8]
 8002c8e:	f001 011f 	and.w	r1, r1, #31
 8002c92:	2906      	cmp	r1, #6
 8002c94:	d0e4      	beq.n	8002c60 <HAL_ADCEx_InjectedStart_IT+0xd8>
 8002c96:	6892      	ldr	r2, [r2, #8]
 8002c98:	e7e2      	b.n	8002c60 <HAL_ADCEx_InjectedStart_IT+0xd8>
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_ADCEx_InjectedStart_IT+0x138>)
 8002c9c:	6891      	ldr	r1, [r2, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002c9e:	06c9      	lsls	r1, r1, #27
 8002ca0:	d0de      	beq.n	8002c60 <HAL_ADCEx_InjectedStart_IT+0xd8>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002ca2:	6891      	ldr	r1, [r2, #8]
 8002ca4:	f001 011f 	and.w	r1, r1, #31
 8002ca8:	2906      	cmp	r1, #6
 8002caa:	d0d9      	beq.n	8002c60 <HAL_ADCEx_InjectedStart_IT+0xd8>
 8002cac:	6892      	ldr	r2, [r2, #8]
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2a07      	cmp	r2, #7
 8002cb4:	d0d4      	beq.n	8002c60 <HAL_ADCEx_InjectedStart_IT+0xd8>
}
 8002cb6:	bd38      	pop	{r3, r4, r5, pc}
 8002cb8:	50000100 	.word	0x50000100
 8002cbc:	50000400 	.word	0x50000400
 8002cc0:	50000300 	.word	0x50000300

08002cc4 <HAL_ADCEx_InjectedGetValue>:
  switch(InjectedRank)
 8002cc4:	2903      	cmp	r1, #3
 8002cc6:	d007      	beq.n	8002cd8 <HAL_ADCEx_InjectedGetValue+0x14>
 8002cc8:	2904      	cmp	r1, #4
 8002cca:	d00d      	beq.n	8002ce8 <HAL_ADCEx_InjectedGetValue+0x24>
 8002ccc:	2902      	cmp	r1, #2
 8002cce:	d007      	beq.n	8002ce0 <HAL_ADCEx_InjectedGetValue+0x1c>
      tmp_jdr = hadc->Instance->JDR1;
 8002cd0:	6803      	ldr	r3, [r0, #0]
 8002cd2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8002cd6:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8002cd8:	6803      	ldr	r3, [r0, #0]
 8002cda:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 8002cde:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 8002ce0:	6803      	ldr	r3, [r0, #0]
 8002ce2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 8002ce6:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8002ce8:	6803      	ldr	r3, [r0, #0]
 8002cea:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop

08002cf4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop

08002cf8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop

08002cfc <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002cfc:	6803      	ldr	r3, [r0, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	0752      	lsls	r2, r2, #29
{
 8002d02:	b510      	push	{r4, lr}
 8002d04:	4604      	mov	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002d06:	f140 80be 	bpl.w	8002e86 <HAL_ADC_IRQHandler+0x18a>
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	0750      	lsls	r0, r2, #29
 8002d0e:	f140 80ba 	bpl.w	8002e86 <HAL_ADC_IRQHandler+0x18a>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d14:	06d0      	lsls	r0, r2, #27
 8002d16:	d403      	bmi.n	8002d20 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d18:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1e:	6422      	str	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d24:	f000 814c 	beq.w	8002fc0 <HAL_ADC_IRQHandler+0x2c4>
 8002d28:	4a98      	ldr	r2, [pc, #608]	; (8002f8c <HAL_ADC_IRQHandler+0x290>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f000 8168 	beq.w	8003000 <HAL_ADC_IRQHandler+0x304>
 8002d30:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 8002d34:	06c9      	lsls	r1, r1, #27
 8002d36:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002d3a:	f040 812f 	bne.w	8002f9c <HAL_ADC_IRQHandler+0x2a0>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002d3e:	68d9      	ldr	r1, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002d40:	68da      	ldr	r2, [r3, #12]
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002d42:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002d46:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	d115      	bne.n	8002d7a <HAL_ADC_IRQHandler+0x7e>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	0712      	lsls	r2, r2, #28
 8002d52:	d512      	bpl.n	8002d7a <HAL_ADC_IRQHandler+0x7e>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	0750      	lsls	r0, r2, #29
 8002d58:	f100 817c 	bmi.w	8003054 <HAL_ADC_IRQHandler+0x358>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	f022 020c 	bic.w	r2, r2, #12
 8002d62:	605a      	str	r2, [r3, #4]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6a:	6423      	str	r3, [r4, #64]	; 0x40
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d6e:	04d9      	lsls	r1, r3, #19
 8002d70:	d403      	bmi.n	8002d7a <HAL_ADC_IRQHandler+0x7e>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f7ff fcae 	bl	80026dc <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	220c      	movs	r2, #12
 8002d84:	601a      	str	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	0692      	lsls	r2, r2, #26
 8002d8a:	f140 8088 	bpl.w	8002e9e <HAL_ADC_IRQHandler+0x1a2>
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	0690      	lsls	r0, r2, #26
 8002d92:	f140 8084 	bpl.w	8002e9e <HAL_ADC_IRQHandler+0x1a2>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d96:	6c22      	ldr	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da0:	6422      	str	r2, [r4, #64]	; 0x40
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002da2:	f000 811a 	beq.w	8002fda <HAL_ADC_IRQHandler+0x2de>
 8002da6:	4a79      	ldr	r2, [pc, #484]	; (8002f8c <HAL_ADC_IRQHandler+0x290>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	f000 813d 	beq.w	8003028 <HAL_ADC_IRQHandler+0x32c>
 8002dae:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 8002db2:	06c8      	lsls	r0, r1, #27
 8002db4:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002db8:	f040 80d6 	bne.w	8002f68 <HAL_ADC_IRQHandler+0x26c>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002dbc:	68da      	ldr	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002dbe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002dc0:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8002dc4:	d13a      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x140>
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002dc6:	0191      	lsls	r1, r2, #6
 8002dc8:	f100 80c5 	bmi.w	8002f56 <HAL_ADC_IRQHandler+0x25a>
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	0650      	lsls	r0, r2, #25
 8002dd0:	d534      	bpl.n	8002e3c <HAL_ADC_IRQHandler+0x140>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dd6:	f000 8146 	beq.w	8003066 <HAL_ADC_IRQHandler+0x36a>
 8002dda:	4a6c      	ldr	r2, [pc, #432]	; (8002f8c <HAL_ADC_IRQHandler+0x290>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	f000 8157 	beq.w	8003090 <HAL_ADC_IRQHandler+0x394>
 8002de2:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 8002de6:	06c9      	lsls	r1, r1, #27
 8002de8:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002dec:	f000 8145 	beq.w	800307a <HAL_ADC_IRQHandler+0x37e>
 8002df0:	6891      	ldr	r1, [r2, #8]
 8002df2:	f001 011f 	and.w	r1, r1, #31
 8002df6:	2906      	cmp	r1, #6
 8002df8:	f000 813f 	beq.w	800307a <HAL_ADC_IRQHandler+0x37e>
 8002dfc:	6892      	ldr	r2, [r2, #8]
 8002dfe:	f002 021f 	and.w	r2, r2, #31
 8002e02:	2a07      	cmp	r2, #7
 8002e04:	f000 8139 	beq.w	800307a <HAL_ADC_IRQHandler+0x37e>
 8002e08:	4a61      	ldr	r2, [pc, #388]	; (8002f90 <HAL_ADC_IRQHandler+0x294>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f000 8135 	beq.w	800307a <HAL_ADC_IRQHandler+0x37e>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002e10:	68d2      	ldr	r2, [r2, #12]
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002e12:	0292      	lsls	r2, r2, #10
 8002e14:	d412      	bmi.n	8002e3c <HAL_ADC_IRQHandler+0x140>
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	0710      	lsls	r0, r2, #28
 8002e1a:	f100 8130 	bmi.w	800307e <HAL_ADC_IRQHandler+0x382>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e24:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e2c:	6423      	str	r3, [r4, #64]	; 0x40
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e30:	05d9      	lsls	r1, r3, #23
 8002e32:	d403      	bmi.n	8002e3c <HAL_ADC_IRQHandler+0x140>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7fe fa35 	bl	80012ac <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	2260      	movs	r2, #96	; 0x60
 8002e46:	601a      	str	r2, [r3, #0]
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	0612      	lsls	r2, r2, #24
 8002e4c:	d502      	bpl.n	8002e54 <HAL_ADC_IRQHandler+0x158>
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	0610      	lsls	r0, r2, #24
 8002e52:	d475      	bmi.n	8002f40 <HAL_ADC_IRQHandler+0x244>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	05d1      	lsls	r1, r2, #23
 8002e58:	d502      	bpl.n	8002e60 <HAL_ADC_IRQHandler+0x164>
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	05d2      	lsls	r2, r2, #23
 8002e5e:	d454      	bmi.n	8002f0a <HAL_ADC_IRQHandler+0x20e>
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	0590      	lsls	r0, r2, #22
 8002e64:	d502      	bpl.n	8002e6c <HAL_ADC_IRQHandler+0x170>
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	0591      	lsls	r1, r2, #22
 8002e6a:	d442      	bmi.n	8002ef2 <HAL_ADC_IRQHandler+0x1f6>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	06d2      	lsls	r2, r2, #27
 8002e70:	d502      	bpl.n	8002e78 <HAL_ADC_IRQHandler+0x17c>
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	06d0      	lsls	r0, r2, #27
 8002e76:	d419      	bmi.n	8002eac <HAL_ADC_IRQHandler+0x1b0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	0551      	lsls	r1, r2, #21
 8002e7c:	d502      	bpl.n	8002e84 <HAL_ADC_IRQHandler+0x188>
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	0552      	lsls	r2, r2, #21
 8002e82:	d44e      	bmi.n	8002f22 <HAL_ADC_IRQHandler+0x226>
}
 8002e84:	bd10      	pop	{r4, pc}
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002e86:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8002e88:	0711      	lsls	r1, r2, #28
 8002e8a:	f57f af7c 	bpl.w	8002d86 <HAL_ADC_IRQHandler+0x8a>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	0712      	lsls	r2, r2, #28
 8002e92:	f53f af3e 	bmi.w	8002d12 <HAL_ADC_IRQHandler+0x16>
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	0692      	lsls	r2, r2, #26
 8002e9a:	f53f af78 	bmi.w	8002d8e <HAL_ADC_IRQHandler+0x92>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002e9e:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8002ea0:	0651      	lsls	r1, r2, #25
 8002ea2:	d5d1      	bpl.n	8002e48 <HAL_ADC_IRQHandler+0x14c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	0652      	lsls	r2, r2, #25
 8002ea8:	d5ce      	bpl.n	8002e48 <HAL_ADC_IRQHandler+0x14c>
 8002eaa:	e774      	b.n	8002d96 <HAL_ADC_IRQHandler+0x9a>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002eac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002eae:	2a01      	cmp	r2, #1
 8002eb0:	d010      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0x1d8>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eb6:	f000 80cb 	beq.w	8003050 <HAL_ADC_IRQHandler+0x354>
 8002eba:	4834      	ldr	r0, [pc, #208]	; (8002f8c <HAL_ADC_IRQHandler+0x290>)
 8002ebc:	4a35      	ldr	r2, [pc, #212]	; (8002f94 <HAL_ADC_IRQHandler+0x298>)
 8002ebe:	4936      	ldr	r1, [pc, #216]	; (8002f98 <HAL_ADC_IRQHandler+0x29c>)
 8002ec0:	4283      	cmp	r3, r0
 8002ec2:	bf18      	it	ne
 8002ec4:	460a      	movne	r2, r1
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ec6:	6891      	ldr	r1, [r2, #8]
 8002ec8:	06c9      	lsls	r1, r1, #27
 8002eca:	f040 8093 	bne.w	8002ff4 <HAL_ADC_IRQHandler+0x2f8>
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	07d0      	lsls	r0, r2, #31
 8002ed2:	d50b      	bpl.n	8002eec <HAL_ADC_IRQHandler+0x1f0>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eda:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002edc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ede:	f043 0302 	orr.w	r3, r3, #2
 8002ee2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f7ff fbfd 	bl	80026e4 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	2210      	movs	r2, #16
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	e7c2      	b.n	8002e78 <HAL_ADC_IRQHandler+0x17c>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7ff fefc 	bl	8002cf8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	e7b0      	b.n	8002e6c <HAL_ADC_IRQHandler+0x170>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f10:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff feee 	bl	8002cf4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e79e      	b.n	8002e60 <HAL_ADC_IRQHandler+0x164>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f22:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f28:	6422      	str	r2, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f2a:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f30:	f042 0208 	orr.w	r2, r2, #8
 8002f34:	6462      	str	r2, [r4, #68]	; 0x44
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f36:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f38:	6019      	str	r1, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f3a:	f7ff fed9 	bl	8002cf0 <HAL_ADCEx_InjectedQueueOverflowCallback>
}
 8002f3e:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f46:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f7ff fbc9 	bl	80026e0 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f4e:	6823      	ldr	r3, [r4, #0]
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e77e      	b.n	8002e54 <HAL_ADC_IRQHandler+0x158>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002f56:	68d9      	ldr	r1, [r3, #12]
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002f58:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002f5c:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 8002f60:	430a      	orrs	r2, r1
 8002f62:	f47f af6b 	bne.w	8002e3c <HAL_ADC_IRQHandler+0x140>
 8002f66:	e731      	b.n	8002dcc <HAL_ADC_IRQHandler+0xd0>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002f68:	6891      	ldr	r1, [r2, #8]
 8002f6a:	f001 011f 	and.w	r1, r1, #31
 8002f6e:	2905      	cmp	r1, #5
 8002f70:	f43f af24 	beq.w	8002dbc <HAL_ADC_IRQHandler+0xc0>
 8002f74:	6892      	ldr	r2, [r2, #8]
 8002f76:	f002 021f 	and.w	r2, r2, #31
 8002f7a:	2a09      	cmp	r2, #9
 8002f7c:	f43f af1e 	beq.w	8002dbc <HAL_ADC_IRQHandler+0xc0>
 8002f80:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <HAL_ADC_IRQHandler+0x294>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	f43f af1a 	beq.w	8002dbc <HAL_ADC_IRQHandler+0xc0>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	e718      	b.n	8002dbe <HAL_ADC_IRQHandler+0xc2>
 8002f8c:	50000100 	.word	0x50000100
 8002f90:	50000400 	.word	0x50000400
 8002f94:	50000300 	.word	0x50000300
 8002f98:	50000700 	.word	0x50000700
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002f9c:	6891      	ldr	r1, [r2, #8]
 8002f9e:	f001 011f 	and.w	r1, r1, #31
 8002fa2:	2905      	cmp	r1, #5
 8002fa4:	f43f aecb 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x42>
 8002fa8:	6892      	ldr	r2, [r2, #8]
 8002faa:	f002 021f 	and.w	r2, r2, #31
 8002fae:	2a09      	cmp	r2, #9
 8002fb0:	f43f aec5 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x42>
 8002fb4:	4a3f      	ldr	r2, [pc, #252]	; (80030b4 <HAL_ADC_IRQHandler+0x3b8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	f43f aec1 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x42>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002fbc:	68d1      	ldr	r1, [r2, #12]
 8002fbe:	e6bf      	b.n	8002d40 <HAL_ADC_IRQHandler+0x44>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002fc0:	4a3d      	ldr	r2, [pc, #244]	; (80030b8 <HAL_ADC_IRQHandler+0x3bc>)
 8002fc2:	6891      	ldr	r1, [r2, #8]
 8002fc4:	06c9      	lsls	r1, r1, #27
 8002fc6:	f43f aeba 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x42>
 8002fca:	6891      	ldr	r1, [r2, #8]
 8002fcc:	f001 011f 	and.w	r1, r1, #31
 8002fd0:	2905      	cmp	r1, #5
 8002fd2:	f43f aeb4 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x42>
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	e6b1      	b.n	8002d3e <HAL_ADC_IRQHandler+0x42>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002fda:	4a37      	ldr	r2, [pc, #220]	; (80030b8 <HAL_ADC_IRQHandler+0x3bc>)
 8002fdc:	6891      	ldr	r1, [r2, #8]
 8002fde:	06c8      	lsls	r0, r1, #27
 8002fe0:	f43f aeec 	beq.w	8002dbc <HAL_ADC_IRQHandler+0xc0>
 8002fe4:	6891      	ldr	r1, [r2, #8]
 8002fe6:	f001 011f 	and.w	r1, r1, #31
 8002fea:	2905      	cmp	r1, #5
 8002fec:	f43f aee6 	beq.w	8002dbc <HAL_ADC_IRQHandler+0xc0>
 8002ff0:	6892      	ldr	r2, [r2, #8]
 8002ff2:	e6e3      	b.n	8002dbc <HAL_ADC_IRQHandler+0xc0>
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002ff4:	6892      	ldr	r2, [r2, #8]
 8002ff6:	f412 4f40 	tst.w	r2, #49152	; 0xc000
 8002ffa:	f43f af77 	beq.w	8002eec <HAL_ADC_IRQHandler+0x1f0>
 8002ffe:	e769      	b.n	8002ed4 <HAL_ADC_IRQHandler+0x1d8>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003000:	4a2d      	ldr	r2, [pc, #180]	; (80030b8 <HAL_ADC_IRQHandler+0x3bc>)
 8003002:	6891      	ldr	r1, [r2, #8]
 8003004:	06c8      	lsls	r0, r1, #27
 8003006:	f43f ae9a 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x42>
 800300a:	6891      	ldr	r1, [r2, #8]
 800300c:	f001 011f 	and.w	r1, r1, #31
 8003010:	2905      	cmp	r1, #5
 8003012:	f43f ae94 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x42>
 8003016:	6892      	ldr	r2, [r2, #8]
 8003018:	f002 021f 	and.w	r2, r2, #31
 800301c:	2a09      	cmp	r2, #9
 800301e:	f43f ae8e 	beq.w	8002d3e <HAL_ADC_IRQHandler+0x42>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003022:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003026:	e7c9      	b.n	8002fbc <HAL_ADC_IRQHandler+0x2c0>
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003028:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_ADC_IRQHandler+0x3bc>)
 800302a:	6891      	ldr	r1, [r2, #8]
 800302c:	06c9      	lsls	r1, r1, #27
 800302e:	f43f aec5 	beq.w	8002dbc <HAL_ADC_IRQHandler+0xc0>
 8003032:	6891      	ldr	r1, [r2, #8]
 8003034:	f001 011f 	and.w	r1, r1, #31
 8003038:	2905      	cmp	r1, #5
 800303a:	f43f aebf 	beq.w	8002dbc <HAL_ADC_IRQHandler+0xc0>
 800303e:	6892      	ldr	r2, [r2, #8]
 8003040:	f002 021f 	and.w	r2, r2, #31
 8003044:	2a09      	cmp	r2, #9
 8003046:	f43f aeb9 	beq.w	8002dbc <HAL_ADC_IRQHandler+0xc0>
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800304a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800304e:	e79b      	b.n	8002f88 <HAL_ADC_IRQHandler+0x28c>
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_ADC_IRQHandler+0x3bc>)
 8003052:	e738      	b.n	8002ec6 <HAL_ADC_IRQHandler+0x1ca>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003054:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003056:	f043 0310 	orr.w	r3, r3, #16
 800305a:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6463      	str	r3, [r4, #68]	; 0x44
 8003064:	e689      	b.n	8002d7a <HAL_ADC_IRQHandler+0x7e>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003066:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_ADC_IRQHandler+0x3bc>)
 8003068:	6891      	ldr	r1, [r2, #8]
 800306a:	06c8      	lsls	r0, r1, #27
 800306c:	d005      	beq.n	800307a <HAL_ADC_IRQHandler+0x37e>
 800306e:	6891      	ldr	r1, [r2, #8]
 8003070:	f001 011f 	and.w	r1, r1, #31
 8003074:	2906      	cmp	r1, #6
 8003076:	d000      	beq.n	800307a <HAL_ADC_IRQHandler+0x37e>
 8003078:	6892      	ldr	r2, [r2, #8]
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	e6c9      	b.n	8002e12 <HAL_ADC_IRQHandler+0x116>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003080:	f043 0310 	orr.w	r3, r3, #16
 8003084:	6423      	str	r3, [r4, #64]	; 0x40
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003086:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6463      	str	r3, [r4, #68]	; 0x44
 800308e:	e6d5      	b.n	8002e3c <HAL_ADC_IRQHandler+0x140>
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003090:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_ADC_IRQHandler+0x3bc>)
 8003092:	6891      	ldr	r1, [r2, #8]
 8003094:	06c9      	lsls	r1, r1, #27
 8003096:	d0f0      	beq.n	800307a <HAL_ADC_IRQHandler+0x37e>
 8003098:	6891      	ldr	r1, [r2, #8]
 800309a:	f001 011f 	and.w	r1, r1, #31
 800309e:	2906      	cmp	r1, #6
 80030a0:	d0eb      	beq.n	800307a <HAL_ADC_IRQHandler+0x37e>
 80030a2:	6892      	ldr	r2, [r2, #8]
 80030a4:	f002 021f 	and.w	r2, r2, #31
 80030a8:	2a07      	cmp	r2, #7
 80030aa:	d0e6      	beq.n	800307a <HAL_ADC_IRQHandler+0x37e>
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80030ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80030b0:	e6ae      	b.n	8002e10 <HAL_ADC_IRQHandler+0x114>
 80030b2:	bf00      	nop
 80030b4:	50000400 	.word	0x50000400
 80030b8:	50000300 	.word	0x50000300

080030bc <HAL_ADCEx_InjectedConfigChannel>:
{
 80030bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80030be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030c2:	6905      	ldr	r5, [r0, #16]
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030c4:	68cc      	ldr	r4, [r1, #12]
{
 80030c6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80030c8:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80030ca:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 80030cc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80030ce:	f000 81ac 	beq.w	800342a <HAL_ADCEx_InjectedConfigChannel+0x36e>
 80030d2:	2301      	movs	r3, #1
 80030d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80030d8:	b365      	cbz	r5, 8003134 <HAL_ADCEx_InjectedConfigChannel+0x78>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 80030da:	698f      	ldr	r7, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80030dc:	429f      	cmp	r7, r3
 80030de:	d029      	beq.n	8003134 <HAL_ADCEx_InjectedConfigChannel+0x78>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80030e0:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80030e2:	2d00      	cmp	r5, #0
 80030e4:	f040 812b 	bne.w	800333e <HAL_ADCEx_InjectedConfigChannel+0x282>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80030e8:	6a0d      	ldr	r5, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80030ea:	64c7      	str	r7, [r0, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80030ec:	2d01      	cmp	r5, #1
 80030ee:	f000 81f1 	beq.w	80034d4 <HAL_ADCEx_InjectedConfigChannel+0x418>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80030f2:	6803      	ldr	r3, [r0, #0]
 80030f4:	4aab      	ldr	r2, [pc, #684]	; (80033a4 <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	f107 37ff 	add.w	r7, r7, #4294967295
 80030fc:	f000 81e2 	beq.w	80034c4 <HAL_ADCEx_InjectedConfigChannel+0x408>
 8003100:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003104:	4293      	cmp	r3, r2
 8003106:	f000 81dd 	beq.w	80034c4 <HAL_ADCEx_InjectedConfigChannel+0x408>
 800310a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800310c:	433a      	orrs	r2, r7
 800310e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003110:	684d      	ldr	r5, [r1, #4]
 8003112:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8003114:	64c7      	str	r7, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003116:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800311a:	006d      	lsls	r5, r5, #1
 800311c:	3502      	adds	r5, #2
 800311e:	271f      	movs	r7, #31
 8003120:	40ae      	lsls	r6, r5
 8003122:	fa07 f505 	lsl.w	r5, r7, r5
 8003126:	ea22 0205 	bic.w	r2, r2, r5
 800312a:	4332      	orrs	r2, r6
 800312c:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312e:	f04f 0c00 	mov.w	ip, #0
 8003132:	e00a      	b.n	800314a <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003134:	684b      	ldr	r3, [r1, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	f000 80e5 	beq.w	8003306 <HAL_ADCEx_InjectedConfigChannel+0x24a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313c:	6c02      	ldr	r2, [r0, #64]	; 0x40
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800313e:	6803      	ldr	r3, [r0, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003140:	f042 0220 	orr.w	r2, r2, #32
 8003144:	6402      	str	r2, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8003146:	f04f 0c01 	mov.w	ip, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	0712      	lsls	r2, r2, #28
 800314e:	d40d      	bmi.n	800316c <HAL_ADCEx_InjectedConfigChannel+0xb0>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003150:	7f4a      	ldrb	r2, [r1, #29]
 8003152:	2a00      	cmp	r2, #0
 8003154:	f040 80c0 	bne.w	80032d8 <HAL_ADCEx_InjectedConfigChannel+0x21c>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003158:	7f0a      	ldrb	r2, [r1, #28]
 800315a:	68dd      	ldr	r5, [r3, #12]
 800315c:	7f8e      	ldrb	r6, [r1, #30]
 800315e:	0512      	lsls	r2, r2, #20
 8003160:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003164:	ea42 5246 	orr.w	r2, r2, r6, lsl #21
 8003168:	432a      	orrs	r2, r5
 800316a:	60da      	str	r2, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	f012 0f0c 	tst.w	r2, #12
 8003172:	d13a      	bne.n	80031ea <HAL_ADCEx_InjectedConfigChannel+0x12e>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003174:	6a0a      	ldr	r2, [r1, #32]
 8003176:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800317e:	f000 814f 	beq.w	8003420 <HAL_ADCEx_InjectedConfigChannel+0x364>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003182:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003184:	7f4a      	ldrb	r2, [r1, #29]
 8003186:	2a01      	cmp	r2, #1
 8003188:	f000 812c 	beq.w	80033e4 <HAL_ADCEx_InjectedConfigChannel+0x328>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800318c:	680e      	ldr	r6, [r1, #0]
 800318e:	2e09      	cmp	r6, #9
 8003190:	f240 8094 	bls.w	80032bc <HAL_ADCEx_InjectedConfigChannel+0x200>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003194:	688d      	ldr	r5, [r1, #8]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
 800319c:	f1ae 0e1e 	sub.w	lr, lr, #30
 80031a0:	2707      	movs	r7, #7
 80031a2:	fa05 f50e 	lsl.w	r5, r5, lr
 80031a6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80031aa:	ea22 020e 	bic.w	r2, r2, lr
 80031ae:	432a      	orrs	r2, r5
 80031b0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80031b2:	68da      	ldr	r2, [r3, #12]
    switch (sConfigInjected->InjectedOffsetNumber)
 80031b4:	690d      	ldr	r5, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80031b6:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 80031ba:	694a      	ldr	r2, [r1, #20]
 80031bc:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    switch (sConfigInjected->InjectedOffsetNumber)
 80031c0:	3d01      	subs	r5, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80031c2:	fa02 f20e 	lsl.w	r2, r2, lr
    switch (sConfigInjected->InjectedOffsetNumber)
 80031c6:	2d03      	cmp	r5, #3
 80031c8:	f200 8190 	bhi.w	80034ec <HAL_ADCEx_InjectedConfigChannel+0x430>
 80031cc:	e8df f015 	tbh	[pc, r5, lsl #1]
 80031d0:	01000004 	.word	0x01000004
 80031d4:	00e000f6 	.word	0x00e000f6
      MODIFY_REG(hadc->Instance->OFR1                               ,
 80031d8:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80031dc:	4d72      	ldr	r5, [pc, #456]	; (80033a8 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 80031de:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 80031e0:	4035      	ands	r5, r6
 80031e2:	432a      	orrs	r2, r5
 80031e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80031e8:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	f002 0203 	and.w	r2, r2, #3
 80031f0:	2a01      	cmp	r2, #1
 80031f2:	d041      	beq.n	8003278 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031f4:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80031f6:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031f8:	d044      	beq.n	8003284 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80031fa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80031fe:	2401      	movs	r4, #1
 8003200:	4094      	lsls	r4, r2
 8003202:	ea21 0104 	bic.w	r1, r1, r4
 8003206:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800320a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800320e:	d02c      	beq.n	800326a <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 8003210:	4966      	ldr	r1, [pc, #408]	; (80033ac <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8003212:	428b      	cmp	r3, r1
 8003214:	d029      	beq.n	800326a <HAL_ADCEx_InjectedConfigChannel+0x1ae>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003216:	2a10      	cmp	r2, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003218:	4965      	ldr	r1, [pc, #404]	; (80033b0 <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800321a:	d029      	beq.n	8003270 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800321c:	2a11      	cmp	r2, #17
 800321e:	d16c      	bne.n	80032fa <HAL_ADCEx_InjectedConfigChannel+0x23e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003220:	688c      	ldr	r4, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003222:	01e5      	lsls	r5, r4, #7
 8003224:	d41b      	bmi.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800322a:	f000 8103 	beq.w	8003434 <HAL_ADCEx_InjectedConfigChannel+0x378>
 800322e:	4c5f      	ldr	r4, [pc, #380]	; (80033ac <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8003230:	42a3      	cmp	r3, r4
 8003232:	f000 80dd 	beq.w	80033f0 <HAL_ADCEx_InjectedConfigChannel+0x334>
 8003236:	4d5b      	ldr	r5, [pc, #364]	; (80033a4 <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8003238:	42ab      	cmp	r3, r5
 800323a:	f000 814f 	beq.w	80034dc <HAL_ADCEx_InjectedConfigChannel+0x420>
 800323e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003242:	42a3      	cmp	r3, r4
 8003244:	f000 80d6 	beq.w	80033f4 <HAL_ADCEx_InjectedConfigChannel+0x338>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003248:	689c      	ldr	r4, [r3, #8]
 800324a:	f004 0403 	and.w	r4, r4, #3
 800324e:	2c01      	cmp	r4, #1
 8003250:	f000 8132 	beq.w	80034b8 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003254:	2a10      	cmp	r2, #16
 8003256:	d002      	beq.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003258:	2a11      	cmp	r2, #17
 800325a:	f040 80d9 	bne.w	8003410 <HAL_ADCEx_InjectedConfigChannel+0x354>
  __HAL_UNLOCK(hadc);
 800325e:	2300      	movs	r3, #0
 8003260:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003264:	4660      	mov	r0, ip
 8003266:	b003      	add	sp, #12
 8003268:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800326a:	2a10      	cmp	r2, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800326c:	4951      	ldr	r1, [pc, #324]	; (80033b4 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800326e:	d1d5      	bne.n	800321c <HAL_ADCEx_InjectedConfigChannel+0x160>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003270:	688c      	ldr	r4, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003272:	0226      	lsls	r6, r4, #8
 8003274:	d5d7      	bpl.n	8003226 <HAL_ADCEx_InjectedConfigChannel+0x16a>
 8003276:	e7f2      	b.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	07d7      	lsls	r7, r2, #31
 800327c:	d4ef      	bmi.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 800327e:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003280:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003282:	d1ba      	bne.n	80031fa <HAL_ADCEx_InjectedConfigChannel+0x13e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003284:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8003288:	4094      	lsls	r4, r2
 800328a:	432c      	orrs	r4, r5
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800328c:	2a09      	cmp	r2, #9
        MODIFY_REG(hadc->Instance->SMPR2,
 800328e:	688d      	ldr	r5, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003290:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003294:	d86f      	bhi.n	8003376 <HAL_ADCEx_InjectedConfigChannel+0x2ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8003296:	1c54      	adds	r4, r2, #1
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800329e:	2607      	movs	r6, #7
 80032a0:	40a5      	lsls	r5, r4
 80032a2:	fa06 f404 	lsl.w	r4, r6, r4
 80032a6:	ea21 0104 	bic.w	r1, r1, r4
 80032aa:	4329      	orrs	r1, r5
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80032b0:	6159      	str	r1, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b2:	d0d4      	beq.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 80032b4:	493d      	ldr	r1, [pc, #244]	; (80033ac <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 80032b6:	428b      	cmp	r3, r1
 80032b8:	d1ad      	bne.n	8003216 <HAL_ADCEx_InjectedConfigChannel+0x15a>
 80032ba:	e7d0      	b.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80032bc:	695a      	ldr	r2, [r3, #20]
 80032be:	688d      	ldr	r5, [r1, #8]
 80032c0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80032c4:	f04f 0e07 	mov.w	lr, #7
 80032c8:	fa0e fe07 	lsl.w	lr, lr, r7
 80032cc:	40bd      	lsls	r5, r7
 80032ce:	ea22 020e 	bic.w	r2, r2, lr
 80032d2:	432a      	orrs	r2, r5
 80032d4:	615a      	str	r2, [r3, #20]
 80032d6:	e76c      	b.n	80031b2 <HAL_ADCEx_InjectedConfigChannel+0xf6>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	7f8d      	ldrb	r5, [r1, #30]
 80032dc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80032e0:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 80032e4:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80032e6:	7f0a      	ldrb	r2, [r1, #28]
 80032e8:	2a01      	cmp	r2, #1
 80032ea:	f47f af3f 	bne.w	800316c <HAL_ADCEx_InjectedConfigChannel+0xb0>
        tmp_hal_status = HAL_ERROR;
 80032ee:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80032f2:	f042 0220 	orr.w	r2, r2, #32
 80032f6:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80032f8:	e738      	b.n	800316c <HAL_ADCEx_InjectedConfigChannel+0xb0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80032fa:	2a12      	cmp	r2, #18
 80032fc:	d1af      	bne.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80032fe:	688c      	ldr	r4, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8003300:	0264      	lsls	r4, r4, #9
 8003302:	d4ac      	bmi.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 8003304:	e78f      	b.n	8003226 <HAL_ADCEx_InjectedConfigChannel+0x16a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003306:	6a0d      	ldr	r5, [r1, #32]
 8003308:	2d01      	cmp	r5, #1
 800330a:	f000 809f 	beq.w	800344c <HAL_ADCEx_InjectedConfigChannel+0x390>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800330e:	680b      	ldr	r3, [r1, #0]
 8003310:	4e24      	ldr	r6, [pc, #144]	; (80033a4 <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8003312:	021a      	lsls	r2, r3, #8
 8003314:	6803      	ldr	r3, [r0, #0]
 8003316:	42b3      	cmp	r3, r6
 8003318:	f000 809c 	beq.w	8003454 <HAL_ADCEx_InjectedConfigChannel+0x398>
 800331c:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8003320:	42b3      	cmp	r3, r6
 8003322:	f000 8097 	beq.w	8003454 <HAL_ADCEx_InjectedConfigChannel+0x398>
 8003326:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8003328:	4332      	orrs	r2, r6
 800332a:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->JSQR           ,
 800332c:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800332e:	4e22      	ldr	r6, [pc, #136]	; (80033b8 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 8003330:	4035      	ands	r5, r6
 8003332:	4315      	orrs	r5, r2
 8003334:	64dd      	str	r5, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003336:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003338:	f04f 0c00 	mov.w	ip, #0
 800333c:	e705      	b.n	800314a <HAL_ADCEx_InjectedConfigChannel+0x8e>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800333e:	684b      	ldr	r3, [r1, #4]
 8003340:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8003342:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      hadc->InjectionConfig.ChannelCount --;
 8003346:	1e6f      	subs	r7, r5, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	680d      	ldr	r5, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 800334c:	64c7      	str	r7, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800334e:	3302      	adds	r3, #2
 8003350:	fa05 fc03 	lsl.w	ip, r5, r3
 8003354:	251f      	movs	r5, #31
 8003356:	409d      	lsls	r5, r3
 8003358:	ea26 0505 	bic.w	r5, r6, r5
 800335c:	ea45 050c 	orr.w	r5, r5, ip
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003360:	6803      	ldr	r3, [r0, #0]
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003362:	6485      	str	r5, [r0, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8003364:	2f00      	cmp	r7, #0
 8003366:	d1e7      	bne.n	8003338 <HAL_ADCEx_InjectedConfigChannel+0x27c>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003368:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800336a:	4e13      	ldr	r6, [pc, #76]	; (80033b8 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 800336c:	4032      	ands	r2, r6
 800336e:	4315      	orrs	r5, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003370:	46bc      	mov	ip, r7
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003372:	64dd      	str	r5, [r3, #76]	; 0x4c
 8003374:	e6e9      	b.n	800314a <HAL_ADCEx_InjectedConfigChannel+0x8e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003376:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 800337a:	6999      	ldr	r1, [r3, #24]
 800337c:	3c1b      	subs	r4, #27
 800337e:	2607      	movs	r6, #7
 8003380:	40a5      	lsls	r5, r4
 8003382:	fa06 f404 	lsl.w	r4, r6, r4
 8003386:	ea21 0104 	bic.w	r1, r1, r4
 800338a:	4329      	orrs	r1, r5
 800338c:	6199      	str	r1, [r3, #24]
 800338e:	e73c      	b.n	800320a <HAL_ADCEx_InjectedConfigChannel+0x14e>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8003390:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8003394:	4d04      	ldr	r5, [pc, #16]	; (80033a8 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8003396:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8003398:	4035      	ands	r5, r6
 800339a:	432a      	orrs	r2, r5
 800339c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033a0:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80033a2:	e722      	b.n	80031ea <HAL_ADCEx_InjectedConfigChannel+0x12e>
 80033a4:	50000400 	.word	0x50000400
 80033a8:	83fff000 	.word	0x83fff000
 80033ac:	50000100 	.word	0x50000100
 80033b0:	50000700 	.word	0x50000700
 80033b4:	50000300 	.word	0x50000300
 80033b8:	82082000 	.word	0x82082000
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80033bc:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80033c0:	4d60      	ldr	r5, [pc, #384]	; (8003544 <HAL_ADCEx_InjectedConfigChannel+0x488>)
 80033c2:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 80033c4:	4035      	ands	r5, r6
 80033c6:	432a      	orrs	r2, r5
 80033c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033cc:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80033ce:	e70c      	b.n	80031ea <HAL_ADCEx_InjectedConfigChannel+0x12e>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 80033d0:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80033d4:	4d5b      	ldr	r5, [pc, #364]	; (8003544 <HAL_ADCEx_InjectedConfigChannel+0x488>)
 80033d6:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 80033d8:	4035      	ands	r5, r6
 80033da:	432a      	orrs	r2, r5
 80033dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033e0:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80033e2:	e702      	b.n	80031ea <HAL_ADCEx_InjectedConfigChannel+0x12e>
        tmp_hal_status = HAL_ERROR;
 80033e4:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80033e8:	f042 0220 	orr.w	r2, r2, #32
 80033ec:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80033ee:	e6cd      	b.n	800318c <HAL_ADCEx_InjectedConfigChannel+0xd0>
 80033f0:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80033f4:	689c      	ldr	r4, [r3, #8]
 80033f6:	f004 0403 	and.w	r4, r4, #3
 80033fa:	2c01      	cmp	r4, #1
 80033fc:	d01c      	beq.n	8003438 <HAL_ADCEx_InjectedConfigChannel+0x37c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80033fe:	68ac      	ldr	r4, [r5, #8]
 8003400:	f004 0403 	and.w	r4, r4, #3
 8003404:	2c01      	cmp	r4, #1
 8003406:	d02d      	beq.n	8003464 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003408:	2a10      	cmp	r2, #16
 800340a:	d02f      	beq.n	800346c <HAL_ADCEx_InjectedConfigChannel+0x3b0>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800340c:	2a11      	cmp	r2, #17
 800340e:	d04a      	beq.n	80034a6 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003410:	2a12      	cmp	r2, #18
 8003412:	f47f af24 	bne.w	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003416:	688b      	ldr	r3, [r1, #8]
 8003418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800341c:	608b      	str	r3, [r1, #8]
 800341e:	e71e      	b.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003420:	7f4d      	ldrb	r5, [r1, #29]
 8003422:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	e6b0      	b.n	800318c <HAL_ADCEx_InjectedConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 800342a:	f04f 0c02 	mov.w	ip, #2
}
 800342e:	4660      	mov	r0, ip
 8003430:	b003      	add	sp, #12
 8003432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003434:	4d44      	ldr	r5, [pc, #272]	; (8003548 <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8003436:	e7dd      	b.n	80033f4 <HAL_ADCEx_InjectedConfigChannel+0x338>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003438:	681c      	ldr	r4, [r3, #0]
 800343a:	07e6      	lsls	r6, r4, #31
 800343c:	d5df      	bpl.n	80033fe <HAL_ADCEx_InjectedConfigChannel+0x342>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800343e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003440:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8003444:	f04f 0c01 	mov.w	ip, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003448:	6403      	str	r3, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 800344a:	e708      	b.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 800344c:	680a      	ldr	r2, [r1, #0]
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800344e:	6803      	ldr	r3, [r0, #0]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003450:	0212      	lsls	r2, r2, #8
 8003452:	e76b      	b.n	800332c <HAL_ADCEx_InjectedConfigChannel+0x270>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003454:	2d08      	cmp	r5, #8
 8003456:	d033      	beq.n	80034c0 <HAL_ADCEx_InjectedConfigChannel+0x404>
 8003458:	2d14      	cmp	r5, #20
 800345a:	d043      	beq.n	80034e4 <HAL_ADCEx_InjectedConfigChannel+0x428>
 800345c:	2d1c      	cmp	r5, #28
 800345e:	bf08      	it	eq
 8003460:	2510      	moveq	r5, #16
 8003462:	e760      	b.n	8003326 <HAL_ADCEx_InjectedConfigChannel+0x26a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003464:	682c      	ldr	r4, [r5, #0]
 8003466:	07e4      	lsls	r4, r4, #31
 8003468:	d4e9      	bmi.n	800343e <HAL_ADCEx_InjectedConfigChannel+0x382>
 800346a:	e7cd      	b.n	8003408 <HAL_ADCEx_InjectedConfigChannel+0x34c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800346c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003470:	f47f aef5 	bne.w	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8003476:	4c36      	ldr	r4, [pc, #216]	; (8003550 <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8003478:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800347a:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800347c:	fba4 4303 	umull	r4, r3, r4, r3
 8003480:	0c9b      	lsrs	r3, r3, #18
 8003482:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003486:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003488:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800348c:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800348e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003490:	9b01      	ldr	r3, [sp, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f43f aee3 	beq.w	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
            wait_loop_index--;
 8003498:	9b01      	ldr	r3, [sp, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800349e:	9b01      	ldr	r3, [sp, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f9      	bne.n	8003498 <HAL_ADCEx_InjectedConfigChannel+0x3dc>
 80034a4:	e6db      	b.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80034a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034aa:	f47f aed8 	bne.w	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80034ae:	688b      	ldr	r3, [r1, #8]
 80034b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b4:	608b      	str	r3, [r1, #8]
 80034b6:	e6d2      	b.n	800325e <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	07df      	lsls	r7, r3, #31
 80034bc:	d4bf      	bmi.n	800343e <HAL_ADCEx_InjectedConfigChannel+0x382>
 80034be:	e6c9      	b.n	8003254 <HAL_ADCEx_InjectedConfigChannel+0x198>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80034c0:	2534      	movs	r5, #52	; 0x34
 80034c2:	e730      	b.n	8003326 <HAL_ADCEx_InjectedConfigChannel+0x26a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80034c4:	2d08      	cmp	r5, #8
 80034c6:	d00b      	beq.n	80034e0 <HAL_ADCEx_InjectedConfigChannel+0x424>
 80034c8:	2d14      	cmp	r5, #20
 80034ca:	d00d      	beq.n	80034e8 <HAL_ADCEx_InjectedConfigChannel+0x42c>
 80034cc:	2d1c      	cmp	r5, #28
 80034ce:	bf08      	it	eq
 80034d0:	2510      	moveq	r5, #16
 80034d2:	e61a      	b.n	800310a <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 80034d4:	1e7a      	subs	r2, r7, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80034d6:	6803      	ldr	r3, [r0, #0]
 80034d8:	4617      	mov	r7, r2
 80034da:	e619      	b.n	8003110 <HAL_ADCEx_InjectedConfigChannel+0x54>
 80034dc:	4d1d      	ldr	r5, [pc, #116]	; (8003554 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 80034de:	e789      	b.n	80033f4 <HAL_ADCEx_InjectedConfigChannel+0x338>
 80034e0:	2534      	movs	r5, #52	; 0x34
 80034e2:	e612      	b.n	800310a <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80034e4:	251c      	movs	r5, #28
 80034e6:	e71e      	b.n	8003326 <HAL_ADCEx_InjectedConfigChannel+0x26a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80034e8:	251c      	movs	r5, #28
 80034ea:	e60e      	b.n	800310a <HAL_ADCEx_InjectedConfigChannel+0x4e>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80034ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034ee:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80034f2:	ebb2 6f86 	cmp.w	r2, r6, lsl #26
 80034f6:	ea4f 6586 	mov.w	r5, r6, lsl #26
 80034fa:	d014      	beq.n	8003526 <HAL_ADCEx_InjectedConfigChannel+0x46a>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80034fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034fe:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003502:	4295      	cmp	r5, r2
 8003504:	d014      	beq.n	8003530 <HAL_ADCEx_InjectedConfigChannel+0x474>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003506:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003508:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800350c:	4295      	cmp	r5, r2
 800350e:	d014      	beq.n	800353a <HAL_ADCEx_InjectedConfigChannel+0x47e>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003510:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003512:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003516:	4295      	cmp	r5, r2
 8003518:	f47f ae67 	bne.w	80031ea <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800351c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800351e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003522:	66da      	str	r2, [r3, #108]	; 0x6c
 8003524:	e661      	b.n	80031ea <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003526:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003528:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800352c:	661a      	str	r2, [r3, #96]	; 0x60
 800352e:	e7e5      	b.n	80034fc <HAL_ADCEx_InjectedConfigChannel+0x440>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003530:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003532:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003536:	665a      	str	r2, [r3, #100]	; 0x64
 8003538:	e7e5      	b.n	8003506 <HAL_ADCEx_InjectedConfigChannel+0x44a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800353a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800353c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003540:	669a      	str	r2, [r3, #104]	; 0x68
 8003542:	e7e5      	b.n	8003510 <HAL_ADCEx_InjectedConfigChannel+0x454>
 8003544:	83fff000 	.word	0x83fff000
 8003548:	50000100 	.word	0x50000100
 800354c:	20000000 	.word	0x20000000
 8003550:	431bde83 	.word	0x431bde83
 8003554:	50000500 	.word	0x50000500

08003558 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003558:	6803      	ldr	r3, [r0, #0]
 800355a:	4a45      	ldr	r2, [pc, #276]	; (8003670 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 800355c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003560:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003562:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003564:	d00e      	beq.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8003566:	4293      	cmp	r3, r2
 8003568:	d00a      	beq.n	8003580 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 800356a:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800356e:	4293      	cmp	r3, r2
 8003570:	d04b      	beq.n	800360a <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8003572:	4c40      	ldr	r4, [pc, #256]	; (8003674 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8003574:	42a3      	cmp	r3, r4
 8003576:	d005      	beq.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8003578:	2201      	movs	r2, #1
} 
 800357a:	4610      	mov	r0, r2
 800357c:	bcf0      	pop	{r4, r5, r6, r7}
 800357e:	4770      	bx	lr
 8003580:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8003584:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 8003588:	f1bc 0f01 	cmp.w	ip, #1
 800358c:	d043      	beq.n	8003616 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 800358e:	2401      	movs	r4, #1
 8003590:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003594:	689c      	ldr	r4, [r3, #8]
 8003596:	0766      	lsls	r6, r4, #29
 8003598:	d50a      	bpl.n	80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800359a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800359c:	f043 0320 	orr.w	r3, r3, #32
    tmp_hal_status = HAL_ERROR;
 80035a0:	2201      	movs	r2, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a2:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80035a4:	2300      	movs	r3, #0
 80035a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
} 
 80035aa:	bcf0      	pop	{r4, r5, r6, r7}
 80035ac:	4610      	mov	r0, r2
 80035ae:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80035b0:	6894      	ldr	r4, [r2, #8]
 80035b2:	0764      	lsls	r4, r4, #29
 80035b4:	d4f1      	bmi.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ba:	d046      	beq.n	800364a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 80035bc:	4f2c      	ldr	r7, [pc, #176]	; (8003670 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80035be:	4e2e      	ldr	r6, [pc, #184]	; (8003678 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80035c0:	4c2e      	ldr	r4, [pc, #184]	; (800367c <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 80035c2:	42bb      	cmp	r3, r7
 80035c4:	bf08      	it	eq
 80035c6:	4634      	moveq	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80035c8:	b34d      	cbz	r5, 800361e <HAL_ADCEx_MultiModeConfigChannel+0xc6>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035ca:	68a6      	ldr	r6, [r4, #8]
 80035cc:	684f      	ldr	r7, [r1, #4]
 80035ce:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 80035d2:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 80035d6:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 80035da:	ea46 060c 	orr.w	r6, r6, ip
 80035de:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80035e0:	689e      	ldr	r6, [r3, #8]
 80035e2:	f006 0603 	and.w	r6, r6, #3
 80035e6:	2e01      	cmp	r6, #1
 80035e8:	d03d      	beq.n	8003666 <HAL_ADCEx_MultiModeConfigChannel+0x10e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80035ea:	6893      	ldr	r3, [r2, #8]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d030      	beq.n	8003656 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80035f4:	68a2      	ldr	r2, [r4, #8]
 80035f6:	688b      	ldr	r3, [r1, #8]
 80035f8:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80035fc:	431d      	orrs	r5, r3
 80035fe:	f022 020f 	bic.w	r2, r2, #15
 8003602:	4315      	orrs	r5, r2
 8003604:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003606:	2200      	movs	r2, #0
 8003608:	e7cc      	b.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 800360a:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 800360e:	4a19      	ldr	r2, [pc, #100]	; (8003674 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8003610:	f1bc 0f01 	cmp.w	ip, #1
 8003614:	d1bb      	bne.n	800358e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003616:	2202      	movs	r2, #2
} 
 8003618:	4610      	mov	r0, r2
 800361a:	bcf0      	pop	{r4, r5, r6, r7}
 800361c:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800361e:	68a1      	ldr	r1, [r4, #8]
 8003620:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8003624:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	f001 0103 	and.w	r1, r1, #3
 800362c:	2901      	cmp	r1, #1
 800362e:	d016      	beq.n	800365e <HAL_ADCEx_MultiModeConfigChannel+0x106>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003630:	6893      	ldr	r3, [r2, #8]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d009      	beq.n	800364e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800363a:	68a3      	ldr	r3, [r4, #8]
 800363c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003640:	f023 030f 	bic.w	r3, r3, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003644:	2200      	movs	r2, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003646:	60a3      	str	r3, [r4, #8]
 8003648:	e7ac      	b.n	80035a4 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800364a:	4c0b      	ldr	r4, [pc, #44]	; (8003678 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 800364c:	e7bc      	b.n	80035c8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800364e:	6813      	ldr	r3, [r2, #0]
 8003650:	07db      	lsls	r3, r3, #31
 8003652:	d4d8      	bmi.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003654:	e7f1      	b.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0xe2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003656:	6813      	ldr	r3, [r2, #0]
 8003658:	07de      	lsls	r6, r3, #31
 800365a:	d4d4      	bmi.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800365c:	e7ca      	b.n	80035f4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	07d9      	lsls	r1, r3, #31
 8003662:	d4d0      	bmi.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003664:	e7e4      	b.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	07df      	lsls	r7, r3, #31
 800366a:	d5be      	bpl.n	80035ea <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800366c:	e7cb      	b.n	8003606 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800366e:	bf00      	nop
 8003670:	50000100 	.word	0x50000100
 8003674:	50000500 	.word	0x50000500
 8003678:	50000300 	.word	0x50000300
 800367c:	50000700 	.word	0x50000700

08003680 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003680:	2800      	cmp	r0, #0
 8003682:	d07b      	beq.n	800377c <HAL_CAN_Init+0xfc>
{
 8003684:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003686:	f890 3020 	ldrb.w	r3, [r0, #32]
 800368a:	4604      	mov	r4, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d072      	beq.n	8003776 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800369a:	f7ff f807 	bl	80026ac <HAL_GetTick>
 800369e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036a0:	e004      	b.n	80036ac <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036a2:	f7ff f803 	bl	80026ac <HAL_GetTick>
 80036a6:	1b43      	subs	r3, r0, r5
 80036a8:	2b0a      	cmp	r3, #10
 80036aa:	d85b      	bhi.n	8003764 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	07d1      	lsls	r1, r2, #31
 80036b2:	d5f6      	bpl.n	80036a2 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f022 0202 	bic.w	r2, r2, #2
 80036ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036bc:	f7fe fff6 	bl	80026ac <HAL_GetTick>
 80036c0:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036c2:	e004      	b.n	80036ce <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036c4:	f7fe fff2 	bl	80026ac <HAL_GetTick>
 80036c8:	1b40      	subs	r0, r0, r5
 80036ca:	280a      	cmp	r0, #10
 80036cc:	d84a      	bhi.n	8003764 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	0792      	lsls	r2, r2, #30
 80036d4:	d4f6      	bmi.n	80036c4 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80036d6:	7e22      	ldrb	r2, [r4, #24]
 80036d8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	bf0c      	ite	eq
 80036de:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80036e2:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80036e8:	7e62      	ldrb	r2, [r4, #25]
 80036ea:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	bf0c      	ite	eq
 80036f0:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80036f4:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80036f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80036fa:	7ea2      	ldrb	r2, [r4, #26]
 80036fc:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	bf0c      	ite	eq
 8003702:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003706:	f022 0220 	bicne.w	r2, r2, #32
 800370a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800370c:	7ee2      	ldrb	r2, [r4, #27]
 800370e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	bf0c      	ite	eq
 8003714:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003718:	f042 0210 	orrne.w	r2, r2, #16
 800371c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800371e:	7f22      	ldrb	r2, [r4, #28]
 8003720:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	bf0c      	ite	eq
 8003726:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800372a:	f022 0208 	bicne.w	r2, r2, #8
 800372e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003730:	7f62      	ldrb	r2, [r4, #29]
 8003732:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	bf0c      	ite	eq
 8003738:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800373c:	f022 0204 	bicne.w	r2, r2, #4
 8003740:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003742:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8003746:	6921      	ldr	r1, [r4, #16]
 8003748:	4302      	orrs	r2, r0
 800374a:	430a      	orrs	r2, r1
 800374c:	6960      	ldr	r0, [r4, #20]
 800374e:	6861      	ldr	r1, [r4, #4]
 8003750:	4302      	orrs	r2, r0
 8003752:	3901      	subs	r1, #1
 8003754:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003756:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003758:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800375a:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800375c:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800375e:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8003762:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003764:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003766:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376c:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800376e:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8003772:	2001      	movs	r0, #1
}
 8003774:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8003776:	f7fd fc61 	bl	800103c <HAL_CAN_MspInit>
 800377a:	e789      	b.n	8003690 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 800377c:	2001      	movs	r0, #1
}
 800377e:	4770      	bx	lr

08003780 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003780:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003784:	3a01      	subs	r2, #1
 8003786:	2a01      	cmp	r2, #1
{
 8003788:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 800378a:	d905      	bls.n	8003798 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800378c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800378e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8003792:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003794:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003796:	4770      	bx	lr
  CAN_TypeDef *can_ip = hcan->Instance;
 8003798:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800379a:	6948      	ldr	r0, [r1, #20]
{
 800379c:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800379e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80037a2:	f044 0401 	orr.w	r4, r4, #1
 80037a6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037aa:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80037ae:	2501      	movs	r5, #1
 80037b0:	f000 021f 	and.w	r2, r0, #31
 80037b4:	fa05 f202 	lsl.w	r2, r5, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80037b8:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037ba:	ea24 0402 	bic.w	r4, r4, r2
 80037be:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
 80037c2:	43d4      	mvns	r4, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80037c4:	2d00      	cmp	r5, #0
 80037c6:	d13d      	bne.n	8003844 <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80037c8:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037cc:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80037ce:	4025      	ands	r5, r4
 80037d0:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037d4:	888d      	ldrh	r5, [r1, #4]
 80037d6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037da:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037de:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037e2:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80037e4:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037e6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037ea:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80037ee:	6988      	ldr	r0, [r1, #24]
 80037f0:	bb10      	cbnz	r0, 8003838 <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80037f2:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80037f6:	4020      	ands	r0, r4
 80037f8:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80037fc:	6908      	ldr	r0, [r1, #16]
 80037fe:	b9a8      	cbnz	r0, 800382c <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003800:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003804:	4004      	ands	r4, r0
 8003806:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800380a:	6a09      	ldr	r1, [r1, #32]
 800380c:	2901      	cmp	r1, #1
 800380e:	d104      	bne.n	800381a <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003810:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8003814:	430a      	orrs	r2, r1
 8003816:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800381a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800381e:	f022 0201 	bic.w	r2, r2, #1
    return HAL_OK;
 8003822:	2000      	movs	r0, #0
}
 8003824:	bc70      	pop	{r4, r5, r6}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800382a:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800382c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003830:	4310      	orrs	r0, r2
 8003832:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8003836:	e7e8      	b.n	800380a <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003838:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800383c:	4310      	orrs	r0, r2
 800383e:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8003842:	e7db      	b.n	80037fc <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003844:	2d01      	cmp	r5, #1
 8003846:	d1d2      	bne.n	80037ee <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003848:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800384c:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800384e:	4315      	orrs	r5, r2
 8003850:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003854:	888d      	ldrh	r5, [r1, #4]
 8003856:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800385a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800385e:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003862:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003864:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003866:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800386a:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
 800386e:	e7be      	b.n	80037ee <HAL_CAN_ConfigFilter+0x6e>

08003870 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003870:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003872:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003876:	2b01      	cmp	r3, #1
{
 8003878:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800387a:	d006      	beq.n	800388a <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800387c:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800387e:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003884:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8003886:	4630      	mov	r0, r6
 8003888:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800388a:	6802      	ldr	r2, [r0, #0]
 800388c:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 800388e:	2302      	movs	r3, #2
 8003890:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003894:	6813      	ldr	r3, [r2, #0]
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800389c:	f7fe ff06 	bl	80026ac <HAL_GetTick>
 80038a0:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038a2:	e004      	b.n	80038ae <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038a4:	f7fe ff02 	bl	80026ac <HAL_GetTick>
 80038a8:	1b43      	subs	r3, r0, r5
 80038aa:	2b0a      	cmp	r3, #10
 80038ac:	d808      	bhi.n	80038c0 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f013 0301 	ands.w	r3, r3, #1
 80038b6:	d1f5      	bne.n	80038a4 <HAL_CAN_Start+0x34>
    return HAL_OK;
 80038b8:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038ba:	6263      	str	r3, [r4, #36]	; 0x24
}
 80038bc:	4630      	mov	r0, r6
 80038be:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80038c2:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80038ca:	f884 2020 	strb.w	r2, [r4, #32]
}
 80038ce:	4630      	mov	r0, r6
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
 80038d2:	bf00      	nop

080038d4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80038d4:	b430      	push	{r4, r5}
 80038d6:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80038d8:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038dc:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80038e0:	3801      	subs	r0, #1
 80038e2:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80038e4:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80038e6:	d835      	bhi.n	8003954 <HAL_CAN_AddTxMessage+0x80>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80038e8:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80038ec:	d03b      	beq.n	8003966 <HAL_CAN_AddTxMessage+0x92>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80038ee:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80038f2:	2c03      	cmp	r4, #3
 80038f4:	d049      	beq.n	800398a <HAL_CAN_AddTxMessage+0xb6>

        return HAL_ERROR;
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80038f6:	2001      	movs	r0, #1
 80038f8:	40a0      	lsls	r0, r4
 80038fa:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80038fc:	688b      	ldr	r3, [r1, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d03a      	beq.n	8003978 <HAL_CAN_AddTxMessage+0xa4>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 8003902:	68c8      	ldr	r0, [r1, #12]
 8003904:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003906:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 8003908:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800390c:	f104 0018 	add.w	r0, r4, #24
 8003910:	0100      	lsls	r0, r0, #4
 8003912:	502b      	str	r3, [r5, r0]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003914:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 8003918:	690b      	ldr	r3, [r1, #16]
 800391a:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800391e:	7d09      	ldrb	r1, [r1, #20]
 8003920:	2901      	cmp	r1, #1
 8003922:	ea4f 1304 	mov.w	r3, r4, lsl #4
 8003926:	d105      	bne.n	8003934 <HAL_CAN_AddTxMessage+0x60>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003928:	f8dc 1184 	ldr.w	r1, [ip, #388]	; 0x184
 800392c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003930:	f8cc 1184 	str.w	r1, [ip, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003934:	442b      	add	r3, r5
 8003936:	6851      	ldr	r1, [r2, #4]
 8003938:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003942:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 8003946:	f043 0301 	orr.w	r3, r3, #1

      /* Return function status */
      return HAL_OK;
 800394a:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800394c:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800394e:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 8003952:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003954:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 800395c:	2001      	movs	r0, #1
}
 800395e:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003960:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003964:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003966:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 800396a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      return HAL_ERROR;
 800396e:	2001      	movs	r0, #1
}
 8003970:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003972:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003976:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003978:	68cb      	ldr	r3, [r1, #12]
 800397a:	6808      	ldr	r0, [r1, #0]
 800397c:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8003980:	f104 0318 	add.w	r3, r4, #24
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	50e8      	str	r0, [r5, r3]
 8003988:	e7c4      	b.n	8003914 <HAL_CAN_AddTxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800398a:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 800398e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
        return HAL_ERROR;
 8003992:	2001      	movs	r0, #1
}
 8003994:	bc30      	pop	{r4, r5}
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003996:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800399a:	4770      	bx	lr

0800399c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800399c:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800399e:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80039a2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80039a6:	f1be 0f01 	cmp.w	lr, #1
{
 80039aa:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 80039ac:	d86d      	bhi.n	8003a8a <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039ae:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80039b0:	b951      	cbnz	r1, 80039c8 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80039b2:	68c4      	ldr	r4, [r0, #12]
 80039b4:	07a5      	lsls	r5, r4, #30
 80039b6:	d10a      	bne.n	80039ce <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039b8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80039bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 80039c0:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039c2:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039c8:	6904      	ldr	r4, [r0, #16]
 80039ca:	07a4      	lsls	r4, r4, #30
 80039cc:	d0f4      	beq.n	80039b8 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80039ce:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 80039d2:	010c      	lsls	r4, r1, #4
 80039d4:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80039d8:	f005 0504 	and.w	r5, r5, #4
 80039dc:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039de:	2d00      	cmp	r5, #0
 80039e0:	d05a      	beq.n	8003a98 <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039e2:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80039e6:	08ed      	lsrs	r5, r5, #3
 80039e8:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039ea:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80039ee:	f005 0502 	and.w	r5, r5, #2
 80039f2:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80039f4:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80039f8:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80039fc:	f005 050f 	and.w	r5, r5, #15
 8003a00:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a02:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a04:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a08:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8003a0c:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a0e:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a10:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a14:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a16:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a18:	f8dc 2000 	ldr.w	r2, [ip]
 8003a1c:	4422      	add	r2, r4
 8003a1e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003a22:	0a12      	lsrs	r2, r2, #8
 8003a24:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a26:	f8dc 2000 	ldr.w	r2, [ip]
 8003a2a:	4422      	add	r2, r4
 8003a2c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003a30:	0c12      	lsrs	r2, r2, #16
 8003a32:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003a34:	f8dc 2000 	ldr.w	r2, [ip]
 8003a38:	4422      	add	r2, r4
 8003a3a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003a3e:	0e12      	lsrs	r2, r2, #24
 8003a40:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003a42:	f8dc 2000 	ldr.w	r2, [ip]
 8003a46:	4422      	add	r2, r4
 8003a48:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003a4c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a4e:	f8dc 2000 	ldr.w	r2, [ip]
 8003a52:	4422      	add	r2, r4
 8003a54:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003a58:	0a12      	lsrs	r2, r2, #8
 8003a5a:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a5c:	f8dc 2000 	ldr.w	r2, [ip]
 8003a60:	4422      	add	r2, r4
 8003a62:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003a66:	0c12      	lsrs	r2, r2, #16
 8003a68:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a6a:	f8dc 2000 	ldr.w	r2, [ip]
 8003a6e:	4422      	add	r2, r4
 8003a70:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003a74:	0e12      	lsrs	r2, r2, #24
 8003a76:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a78:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a7c:	b989      	cbnz	r1, 8003aa2 <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a7e:	68d3      	ldr	r3, [r2, #12]
 8003a80:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8003a84:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8003a90:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a92:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003a98:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003a9c:	0d6d      	lsrs	r5, r5, #21
 8003a9e:	6015      	str	r5, [r2, #0]
 8003aa0:	e7a3      	b.n	80039ea <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003aa2:	6913      	ldr	r3, [r2, #16]
 8003aa4:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8003aa8:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003aaa:	6113      	str	r3, [r2, #16]
}
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
 8003aae:	bf00      	nop

08003ab0 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ab0:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ab4:	3a01      	subs	r2, #1
 8003ab6:	2a01      	cmp	r2, #1
{
 8003ab8:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003aba:	d905      	bls.n	8003ac8 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003abc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003abe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8003ac2:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003ac6:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ac8:	6802      	ldr	r2, [r0, #0]
 8003aca:	6953      	ldr	r3, [r2, #20]
 8003acc:	4319      	orrs	r1, r3
    return HAL_OK;
 8003ace:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003ad0:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_CAN_TxMailbox0CompleteCallback>:
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop

08003ad8 <HAL_CAN_TxMailbox1CompleteCallback>:
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop

08003adc <HAL_CAN_TxMailbox2CompleteCallback>:
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop

08003ae0 <HAL_CAN_TxMailbox0AbortCallback>:
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <HAL_CAN_TxMailbox1AbortCallback>:
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop

08003ae8 <HAL_CAN_TxMailbox2AbortCallback>:
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop

08003aec <HAL_CAN_RxFifo0FullCallback>:
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <HAL_CAN_RxFifo1FullCallback>:
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <HAL_CAN_SleepCallback>:
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop

08003afc <HAL_CAN_WakeUpFromRxMsgCallback>:
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <HAL_CAN_ErrorCallback>:
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop

08003b04 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003b04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003b08:	6803      	ldr	r3, [r0, #0]
 8003b0a:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003b0c:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003b10:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003b12:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003b16:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003b1a:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b1e:	f014 0601 	ands.w	r6, r4, #1
{
 8003b22:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003b24:	d025      	beq.n	8003b72 <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003b26:	f017 0601 	ands.w	r6, r7, #1
 8003b2a:	f040 808f 	bne.w	8003c4c <HAL_CAN_IRQHandler+0x148>
 8003b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b36:	05f8      	lsls	r0, r7, #23
 8003b38:	d50d      	bpl.n	8003b56 <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b3a:	682b      	ldr	r3, [r5, #0]
 8003b3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b40:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b42:	05bb      	lsls	r3, r7, #22
 8003b44:	f100 80be 	bmi.w	8003cc4 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003b48:	0578      	lsls	r0, r7, #21
 8003b4a:	f100 80e4 	bmi.w	8003d16 <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003b4e:	053b      	lsls	r3, r7, #20
 8003b50:	f140 80f0 	bpl.w	8003d34 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b54:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b56:	03f8      	lsls	r0, r7, #15
 8003b58:	d50b      	bpl.n	8003b72 <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b5a:	682b      	ldr	r3, [r5, #0]
 8003b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b60:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b62:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b64:	f100 80ba 	bmi.w	8003cdc <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b68:	037a      	lsls	r2, r7, #13
 8003b6a:	f140 80cf 	bpl.w	8003d0c <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b6e:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b72:	0727      	lsls	r7, r4, #28
 8003b74:	d502      	bpl.n	8003b7c <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b76:	f01b 0f10 	tst.w	fp, #16
 8003b7a:	d161      	bne.n	8003c40 <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b7c:	0760      	lsls	r0, r4, #29
 8003b7e:	d503      	bpl.n	8003b88 <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b80:	f01b 0f08 	tst.w	fp, #8
 8003b84:	f040 808c 	bne.w	8003ca0 <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b88:	07a1      	lsls	r1, r4, #30
 8003b8a:	d504      	bpl.n	8003b96 <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	079a      	lsls	r2, r3, #30
 8003b92:	f040 808c 	bne.w	8003cae <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b96:	0663      	lsls	r3, r4, #25
 8003b98:	d502      	bpl.n	8003ba0 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b9a:	f01a 0f10 	tst.w	sl, #16
 8003b9e:	d149      	bne.n	8003c34 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003ba0:	06a7      	lsls	r7, r4, #26
 8003ba2:	d502      	bpl.n	8003baa <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003ba4:	f01a 0f08 	tst.w	sl, #8
 8003ba8:	d173      	bne.n	8003c92 <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003baa:	06e0      	lsls	r0, r4, #27
 8003bac:	d503      	bpl.n	8003bb6 <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003bae:	682b      	ldr	r3, [r5, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	0799      	lsls	r1, r3, #30
 8003bb4:	d162      	bne.n	8003c7c <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003bb6:	03a2      	lsls	r2, r4, #14
 8003bb8:	d502      	bpl.n	8003bc0 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003bba:	f018 0f10 	tst.w	r8, #16
 8003bbe:	d161      	bne.n	8003c84 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003bc0:	03e3      	lsls	r3, r4, #15
 8003bc2:	d502      	bpl.n	8003bca <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003bc4:	f018 0f08 	tst.w	r8, #8
 8003bc8:	d175      	bne.n	8003cb6 <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003bca:	0427      	lsls	r7, r4, #16
 8003bcc:	d505      	bpl.n	8003bda <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003bce:	f018 0f04 	tst.w	r8, #4
 8003bd2:	d106      	bne.n	8003be2 <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bd4:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003bda:	2e00      	cmp	r6, #0
 8003bdc:	d146      	bne.n	8003c6c <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003be2:	05e0      	lsls	r0, r4, #23
 8003be4:	d504      	bpl.n	8003bf0 <HAL_CAN_IRQHandler+0xec>
 8003be6:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8003bea:	bf18      	it	ne
 8003bec:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bf0:	05a1      	lsls	r1, r4, #22
 8003bf2:	d504      	bpl.n	8003bfe <HAL_CAN_IRQHandler+0xfa>
 8003bf4:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8003bf8:	bf18      	it	ne
 8003bfa:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003bfe:	0562      	lsls	r2, r4, #21
 8003c00:	d504      	bpl.n	8003c0c <HAL_CAN_IRQHandler+0x108>
 8003c02:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c06:	bf18      	it	ne
 8003c08:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c0c:	0523      	lsls	r3, r4, #20
 8003c0e:	d5e1      	bpl.n	8003bd4 <HAL_CAN_IRQHandler+0xd0>
 8003c10:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8003c14:	d0de      	beq.n	8003bd4 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 8003c16:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8003c1a:	f000 809a 	beq.w	8003d52 <HAL_CAN_IRQHandler+0x24e>
 8003c1e:	d861      	bhi.n	8003ce4 <HAL_CAN_IRQHandler+0x1e0>
 8003c20:	f1b9 0f20 	cmp.w	r9, #32
 8003c24:	f000 8083 	beq.w	8003d2e <HAL_CAN_IRQHandler+0x22a>
 8003c28:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8003c2c:	d168      	bne.n	8003d00 <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c2e:	f046 0620 	orr.w	r6, r6, #32
            break;
 8003c32:	e05f      	b.n	8003cf4 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c34:	682b      	ldr	r3, [r5, #0]
 8003c36:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c38:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	e7af      	b.n	8003ba0 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003c44:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	e797      	b.n	8003b7c <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c50:	07bb      	lsls	r3, r7, #30
 8003c52:	d43b      	bmi.n	8003ccc <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c54:	077e      	lsls	r6, r7, #29
 8003c56:	d460      	bmi.n	8003d1a <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c58:	f017 0608 	ands.w	r6, r7, #8
 8003c5c:	d06e      	beq.n	8003d3c <HAL_CAN_IRQHandler+0x238>
 8003c5e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003c62:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c66:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8003c6a:	e764      	b.n	8003b36 <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 8003c6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c6e:	431e      	orrs	r6, r3
    HAL_CAN_ErrorCallback(hcan);
 8003c70:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8003c72:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003c74:	f7ff ff44 	bl	8003b00 <HAL_CAN_ErrorCallback>
}
 8003c78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f7ff ff37 	bl	8003af0 <HAL_CAN_RxFifo1MsgPendingCallback>
 8003c82:	e798      	b.n	8003bb6 <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	2210      	movs	r2, #16
 8003c88:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f7ff ff34 	bl	8003af8 <HAL_CAN_SleepCallback>
 8003c90:	e796      	b.n	8003bc0 <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c92:	682b      	ldr	r3, [r5, #0]
 8003c94:	2208      	movs	r2, #8
 8003c96:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f7ff ff2b 	bl	8003af4 <HAL_CAN_RxFifo1FullCallback>
 8003c9e:	e784      	b.n	8003baa <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003ca0:	682b      	ldr	r3, [r5, #0]
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f7ff ff20 	bl	8003aec <HAL_CAN_RxFifo0FullCallback>
 8003cac:	e76c      	b.n	8003b88 <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003cae:	4628      	mov	r0, r5
 8003cb0:	f7fd fbbc 	bl	800142c <HAL_CAN_RxFifo0MsgPendingCallback>
 8003cb4:	e76f      	b.n	8003b96 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003cb6:	682b      	ldr	r3, [r5, #0]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f7ff ff1d 	bl	8003afc <HAL_CAN_WakeUpFromRxMsgCallback>
 8003cc2:	e782      	b.n	8003bca <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f7ff ff07 	bl	8003ad8 <HAL_CAN_TxMailbox1CompleteCallback>
 8003cca:	e744      	b.n	8003b56 <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ccc:	f7ff ff02 	bl	8003ad4 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003cd0:	2600      	movs	r6, #0
 8003cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cda:	e72c      	b.n	8003b36 <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f7ff fefd 	bl	8003adc <HAL_CAN_TxMailbox2CompleteCallback>
 8003ce2:	e746      	b.n	8003b72 <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8003ce4:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8003ce8:	d01e      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x224>
 8003cea:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8003cee:	bf08      	it	eq
 8003cf0:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003cf4:	682b      	ldr	r3, [r5, #0]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cfc:	619a      	str	r2, [r3, #24]
 8003cfe:	e76a      	b.n	8003bd6 <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 8003d00:	f1b9 0f10 	cmp.w	r9, #16
 8003d04:	d1f6      	bne.n	8003cf4 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d06:	f046 0608 	orr.w	r6, r6, #8
            break;
 8003d0a:	e7f3      	b.n	8003cf4 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d0c:	033b      	lsls	r3, r7, #12
 8003d0e:	d51c      	bpl.n	8003d4a <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d10:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8003d14:	e72d      	b.n	8003b72 <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003d16:	4616      	mov	r6, r2
 8003d18:	e71d      	b.n	8003b56 <HAL_CAN_IRQHandler+0x52>
 8003d1a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003d1e:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d22:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003d26:	e706      	b.n	8003b36 <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d28:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8003d2c:	e7e2      	b.n	8003cf4 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d2e:	f046 0610 	orr.w	r6, r6, #16
            break;
 8003d32:	e7df      	b.n	8003cf4 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003d34:	4628      	mov	r0, r5
 8003d36:	f7ff fed5 	bl	8003ae4 <HAL_CAN_TxMailbox1AbortCallback>
 8003d3a:	e70c      	b.n	8003b56 <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003d3c:	f7ff fed0 	bl	8003ae0 <HAL_CAN_TxMailbox0AbortCallback>
 8003d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d48:	e6f5      	b.n	8003b36 <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7ff fecc 	bl	8003ae8 <HAL_CAN_TxMailbox2AbortCallback>
 8003d50:	e70f      	b.n	8003b72 <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d52:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8003d56:	e7cd      	b.n	8003cf4 <HAL_CAN_IRQHandler+0x1f0>

08003d58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d58:	4907      	ldr	r1, [pc, #28]	; (8003d78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003d5a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d5c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d66:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d68:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d6a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003d72:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <HAL_NVIC_SetPriority+0x74>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d84:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d86:	f1c3 0e07 	rsb	lr, r3, #7
 8003d8a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d8e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d92:	bf28      	it	cs
 8003d94:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d98:	f1bc 0f06 	cmp.w	ip, #6
 8003d9c:	d91b      	bls.n	8003dd6 <HAL_NVIC_SetPriority+0x5a>
 8003d9e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da0:	f04f 3cff 	mov.w	ip, #4294967295
 8003da4:	fa0c fc03 	lsl.w	ip, ip, r3
 8003da8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dac:	f04f 3cff 	mov.w	ip, #4294967295
 8003db0:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003db4:	ea21 010c 	bic.w	r1, r1, ip
 8003db8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003dba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dbc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003dc0:	db0c      	blt.n	8003ddc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003dc6:	0109      	lsls	r1, r1, #4
 8003dc8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003dcc:	b2c9      	uxtb	r1, r1
 8003dce:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003dd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dd6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dd8:	4613      	mov	r3, r2
 8003dda:	e7e7      	b.n	8003dac <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_NVIC_SetPriority+0x78>)
 8003dde:	f000 000f 	and.w	r0, r0, #15
 8003de2:	0109      	lsls	r1, r1, #4
 8003de4:	4403      	add	r3, r0
 8003de6:	b2c9      	uxtb	r1, r1
 8003de8:	7619      	strb	r1, [r3, #24]
 8003dea:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dee:	bf00      	nop
 8003df0:	e000ed00 	.word	0xe000ed00
 8003df4:	e000ecfc 	.word	0xe000ecfc

08003df8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	db08      	blt.n	8003e0e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfc:	0941      	lsrs	r1, r0, #5
 8003dfe:	4a04      	ldr	r2, [pc, #16]	; (8003e10 <HAL_NVIC_EnableIRQ+0x18>)
 8003e00:	f000 001f 	and.w	r0, r0, #31
 8003e04:	2301      	movs	r3, #1
 8003e06:	fa03 f000 	lsl.w	r0, r3, r0
 8003e0a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003e0e:	4770      	bx	lr
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e14:	3801      	subs	r0, #1
 8003e16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003e1a:	d210      	bcs.n	8003e3e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e1c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e22:	4c08      	ldr	r4, [pc, #32]	; (8003e44 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e24:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e26:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003e2a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e2e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e30:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e32:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e34:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003e36:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e3a:	6119      	str	r1, [r3, #16]
 8003e3c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003e3e:	2001      	movs	r0, #1
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d035      	beq.n	8003eb8 <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e4c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 8003e50:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e52:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8003e54:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8003e56:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e58:	6902      	ldr	r2, [r0, #16]
 8003e5a:	4323      	orrs	r3, r4
 8003e5c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5e:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 8003e62:	4323      	orrs	r3, r4
 8003e64:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e66:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e68:	4c14      	ldr	r4, [pc, #80]	; (8003ebc <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6a:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 8003e6c:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e6e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8003e72:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8003e76:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e78:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 8003e7a:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e7c:	d912      	bls.n	8003ea4 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <HAL_DMA_Init+0x78>)
 8003e80:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8003e82:	4c11      	ldr	r4, [pc, #68]	; (8003ec8 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e84:	440b      	add	r3, r1
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 8003e8e:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e92:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 8003e94:	8401      	strh	r1, [r0, #32]
 8003e96:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9a:	6382      	str	r2, [r0, #56]	; 0x38
}  
 8003e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8003ea0:	4610      	mov	r0, r2
}  
 8003ea2:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_DMA_Init+0x84>)
 8003ea6:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <HAL_DMA_Init+0x7c>)
 8003ea8:	440b      	add	r3, r1
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8003eb0:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003eb4:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003eb6:	e7ea      	b.n	8003e8e <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8003eb8:	2001      	movs	r0, #1
}  
 8003eba:	4770      	bx	lr
 8003ebc:	40020407 	.word	0x40020407
 8003ec0:	bffdfbf8 	.word	0xbffdfbf8
 8003ec4:	cccccccd 	.word	0xcccccccd
 8003ec8:	40020400 	.word	0x40020400
 8003ecc:	bffdfff8 	.word	0xbffdfff8

08003ed0 <HAL_DMA_Start_IT>:
{
 8003ed0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8003ed2:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003ed6:	2c01      	cmp	r4, #1
 8003ed8:	d039      	beq.n	8003f4e <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eda:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003ede:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ee0:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 8003ee2:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ee6:	d005      	beq.n	8003ef4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8003eee:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8003ef0:	2002      	movs	r0, #2
} 
 8003ef2:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003ef4:	2502      	movs	r5, #2
 8003ef6:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003efa:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003efc:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003efe:	2500      	movs	r5, #0
 8003f00:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f02:	6825      	ldr	r5, [r4, #0]
 8003f04:	f025 0501 	bic.w	r5, r5, #1
 8003f08:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f0a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003f0c:	fa0c f505 	lsl.w	r5, ip, r5
 8003f10:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8003f12:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f14:	6843      	ldr	r3, [r0, #4]
 8003f16:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003f18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8003f1a:	bf0b      	itete	eq
 8003f1c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003f1e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003f20:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003f22:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003f24:	b153      	cbz	r3, 8003f3c <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	f043 030e 	orr.w	r3, r3, #14
 8003f2c:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003f36:	6023      	str	r3, [r4, #0]
} 
 8003f38:	bc70      	pop	{r4, r5, r6}
 8003f3a:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	f043 030a 	orr.w	r3, r3, #10
 8003f42:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	f023 0304 	bic.w	r3, r3, #4
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	e7ef      	b.n	8003f2e <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8003f4e:	2002      	movs	r0, #2
} 
 8003f50:	bc70      	pop	{r4, r5, r6}
 8003f52:	4770      	bx	lr

08003f54 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f54:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8003f58:	2a02      	cmp	r2, #2
{
 8003f5a:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f5c:	d006      	beq.n	8003f6c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f5e:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8003f60:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f62:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003f64:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8003f68:	2001      	movs	r0, #1
}
 8003f6a:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f6c:	6802      	ldr	r2, [r0, #0]
 8003f6e:	6811      	ldr	r1, [r2, #0]
 8003f70:	f021 010e 	bic.w	r1, r1, #14
{
 8003f74:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f76:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003f78:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f7a:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	f021 0101 	bic.w	r1, r1, #1
 8003f82:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f84:	2201      	movs	r2, #1
 8003f86:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 8003f88:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f8c:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 8003f8e:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 8003f90:	2000      	movs	r0, #0
}
 8003f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f98:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8003f9c:	2a02      	cmp	r2, #2
 8003f9e:	d003      	beq.n	8003fa8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8003fa4:	2001      	movs	r0, #1
}
 8003fa6:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fa8:	6802      	ldr	r2, [r0, #0]
 8003faa:	6811      	ldr	r1, [r2, #0]
 8003fac:	f021 010e 	bic.w	r1, r1, #14
{  
 8003fb0:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003fb2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003fb4:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003fb6:	6811      	ldr	r1, [r2, #0]
 8003fb8:	f021 0101 	bic.w	r1, r1, #1
 8003fbc:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003fbe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8003fc4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003fc6:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8003fc8:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8003fcc:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003fd0:	b112      	cbz	r2, 8003fd8 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 8003fd2:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2000      	movs	r0, #0
}
 8003fd6:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003fd8:	4610      	mov	r0, r2
}
 8003fda:	bd10      	pop	{r4, pc}

08003fdc <HAL_DMA_IRQHandler>:
{
 8003fdc:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fde:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fe0:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fe2:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003fe4:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	4093      	lsls	r3, r2
 8003fea:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8003fec:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_IRQHandler+0x32>
 8003ff0:	f015 0f04 	tst.w	r5, #4
 8003ff4:	d00b      	beq.n	800400e <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	0692      	lsls	r2, r2, #26
 8003ffa:	d403      	bmi.n	8004004 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	f022 0204 	bic.w	r2, r2, #4
 8004002:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8004004:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004006:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8004008:	b1ca      	cbz	r2, 800403e <HAL_DMA_IRQHandler+0x62>
}  
 800400a:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 800400c:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800400e:	2302      	movs	r3, #2
 8004010:	4093      	lsls	r3, r2
 8004012:	420b      	tst	r3, r1
 8004014:	d015      	beq.n	8004042 <HAL_DMA_IRQHandler+0x66>
 8004016:	f015 0f02 	tst.w	r5, #2
 800401a:	d012      	beq.n	8004042 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800401c:	6822      	ldr	r2, [r4, #0]
 800401e:	0692      	lsls	r2, r2, #26
 8004020:	d406      	bmi.n	8004030 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004022:	6822      	ldr	r2, [r4, #0]
 8004024:	f022 020a 	bic.w	r2, r2, #10
 8004028:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800402a:	2201      	movs	r2, #1
 800402c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8004030:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004032:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8004034:	2100      	movs	r1, #0
 8004036:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800403a:	2a00      	cmp	r2, #0
 800403c:	d1e5      	bne.n	800400a <HAL_DMA_IRQHandler+0x2e>
}  
 800403e:	bc70      	pop	{r4, r5, r6}
 8004040:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004042:	2308      	movs	r3, #8
 8004044:	4093      	lsls	r3, r2
 8004046:	420b      	tst	r3, r1
 8004048:	d0f9      	beq.n	800403e <HAL_DMA_IRQHandler+0x62>
 800404a:	072b      	lsls	r3, r5, #28
 800404c:	d5f7      	bpl.n	800403e <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800404e:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8004050:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004052:	f023 030e 	bic.w	r3, r3, #14
 8004056:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004058:	2301      	movs	r3, #1
 800405a:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 800405e:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004062:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 8004064:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004066:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 8004068:	2900      	cmp	r1, #0
 800406a:	d0e8      	beq.n	800403e <HAL_DMA_IRQHandler+0x62>
}  
 800406c:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 800406e:	4708      	bx	r1

08004070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004074:	680c      	ldr	r4, [r1, #0]
{
 8004076:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004078:	2c00      	cmp	r4, #0
 800407a:	d07e      	beq.n	800417a <HAL_GPIO_Init+0x10a>
 800407c:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004080:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8004240 <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00u;
 8004084:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004086:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800408a:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800408c:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8004090:	ea15 0804 	ands.w	r8, r5, r4
 8004094:	d06b      	beq.n	800416e <HAL_GPIO_Init+0xfe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004096:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800409a:	f007 0203 	and.w	r2, r7, #3
 800409e:	1e51      	subs	r1, r2, #1
 80040a0:	2901      	cmp	r1, #1
 80040a2:	d96d      	bls.n	8004180 <HAL_GPIO_Init+0x110>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a4:	2a03      	cmp	r2, #3
 80040a6:	f040 80ac 	bne.w	8004202 <HAL_GPIO_Init+0x192>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040aa:	fa02 f20c 	lsl.w	r2, r2, ip
 80040ae:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 80040b0:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80040b2:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040b4:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040b6:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 80040ba:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040bc:	d057      	beq.n	800416e <HAL_GPIO_Init+0xfe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040be:	f8da 2018 	ldr.w	r2, [sl, #24]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	f8ca 2018 	str.w	r2, [sl, #24]
 80040ca:	f8da 2018 	ldr.w	r2, [sl, #24]
 80040ce:	f002 0201 	and.w	r2, r2, #1
 80040d2:	9203      	str	r2, [sp, #12]
 80040d4:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80040d6:	f023 0203 	bic.w	r2, r3, #3
 80040da:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80040de:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040e2:	f003 0103 	and.w	r1, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80040e6:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040e8:	0089      	lsls	r1, r1, #2
 80040ea:	260f      	movs	r6, #15
 80040ec:	fa06 fe01 	lsl.w	lr, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040f0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040f4:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040f8:	d015      	beq.n	8004126 <HAL_GPIO_Init+0xb6>
 80040fa:	4e4c      	ldr	r6, [pc, #304]	; (800422c <HAL_GPIO_Init+0x1bc>)
 80040fc:	42b0      	cmp	r0, r6
 80040fe:	f000 808b 	beq.w	8004218 <HAL_GPIO_Init+0x1a8>
 8004102:	4e4b      	ldr	r6, [pc, #300]	; (8004230 <HAL_GPIO_Init+0x1c0>)
 8004104:	42b0      	cmp	r0, r6
 8004106:	f000 808b 	beq.w	8004220 <HAL_GPIO_Init+0x1b0>
 800410a:	4e4a      	ldr	r6, [pc, #296]	; (8004234 <HAL_GPIO_Init+0x1c4>)
 800410c:	42b0      	cmp	r0, r6
 800410e:	d07d      	beq.n	800420c <HAL_GPIO_Init+0x19c>
 8004110:	4e49      	ldr	r6, [pc, #292]	; (8004238 <HAL_GPIO_Init+0x1c8>)
 8004112:	42b0      	cmp	r0, r6
 8004114:	bf0b      	itete	eq
 8004116:	f04f 0e04 	moveq.w	lr, #4
 800411a:	2605      	movne	r6, #5
 800411c:	fa0e f101 	lsleq.w	r1, lr, r1
 8004120:	fa06 f101 	lslne.w	r1, r6, r1
 8004124:	430d      	orrs	r5, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004126:	6095      	str	r5, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004128:	4a44      	ldr	r2, [pc, #272]	; (800423c <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800412a:	4944      	ldr	r1, [pc, #272]	; (800423c <HAL_GPIO_Init+0x1cc>)
        temp = EXTI->IMR;
 800412c:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 800412e:	ea6f 0508 	mvn.w	r5, r8
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004132:	03fe      	lsls	r6, r7, #15
        temp &= ~(iocurrent);
 8004134:	bf54      	ite	pl
 8004136:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004138:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 800413c:	600a      	str	r2, [r1, #0]

        temp = EXTI->EMR;
 800413e:	684a      	ldr	r2, [r1, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004140:	03b9      	lsls	r1, r7, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004142:	493e      	ldr	r1, [pc, #248]	; (800423c <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8004144:	bf54      	ite	pl
 8004146:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004148:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 800414c:	604a      	str	r2, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800414e:	6889      	ldr	r1, [r1, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004150:	4a3a      	ldr	r2, [pc, #232]	; (800423c <HAL_GPIO_Init+0x1cc>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004152:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8004154:	bf54      	ite	pl
 8004156:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8004158:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 800415c:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 800415e:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004160:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8004162:	4936      	ldr	r1, [pc, #216]	; (800423c <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8004164:	bf54      	ite	pl
 8004166:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004168:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 800416c:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 800416e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004170:	fa34 f203 	lsrs.w	r2, r4, r3
 8004174:	f10c 0c02 	add.w	ip, ip, #2
 8004178:	d188      	bne.n	800408c <HAL_GPIO_Init+0x1c>
  }
}
 800417a:	b005      	add	sp, #20
 800417c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004180:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004182:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004186:	f04f 0e03 	mov.w	lr, #3
 800418a:	fa0e fe0c 	lsl.w	lr, lr, ip
 800418e:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004192:	fa06 f60c 	lsl.w	r6, r6, ip
 8004196:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8004198:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800419a:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 800419e:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a2:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a6:	f3c7 1500 	ubfx	r5, r7, #4, #1
 80041aa:	409d      	lsls	r5, r3
 80041ac:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 80041b0:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 80041b2:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80041b4:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041b8:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80041bc:	fa05 f50c 	lsl.w	r5, r5, ip
 80041c0:	ea45 050e 	orr.w	r5, r5, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c4:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80041c6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c8:	fa02 f20c 	lsl.w	r2, r2, ip
 80041cc:	f47f af70 	bne.w	80040b0 <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 80041d0:	08dd      	lsrs	r5, r3, #3
 80041d2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80041d6:	9501      	str	r5, [sp, #4]
 80041d8:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041da:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3u];
 80041de:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041e0:	f003 0e07 	and.w	lr, r3, #7
 80041e4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80041e8:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041ea:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041ee:	fa06 fe0e 	lsl.w	lr, r6, lr
 80041f2:	9e00      	ldr	r6, [sp, #0]
 80041f4:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 80041f8:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041fa:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 80041fe:	6235      	str	r5, [r6, #32]
 8004200:	e756      	b.n	80040b0 <HAL_GPIO_Init+0x40>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004202:	2103      	movs	r1, #3
 8004204:	fa01 f10c 	lsl.w	r1, r1, ip
 8004208:	43c9      	mvns	r1, r1
 800420a:	e7d2      	b.n	80041b2 <HAL_GPIO_Init+0x142>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800420c:	f04f 0e03 	mov.w	lr, #3
 8004210:	fa0e f101 	lsl.w	r1, lr, r1
 8004214:	430d      	orrs	r5, r1
 8004216:	e786      	b.n	8004126 <HAL_GPIO_Init+0xb6>
 8004218:	fa0b f101 	lsl.w	r1, fp, r1
 800421c:	430d      	orrs	r5, r1
 800421e:	e782      	b.n	8004126 <HAL_GPIO_Init+0xb6>
 8004220:	f04f 0e02 	mov.w	lr, #2
 8004224:	fa0e f101 	lsl.w	r1, lr, r1
 8004228:	430d      	orrs	r5, r1
 800422a:	e77c      	b.n	8004126 <HAL_GPIO_Init+0xb6>
 800422c:	48000400 	.word	0x48000400
 8004230:	48000800 	.word	0x48000800
 8004234:	48000c00 	.word	0x48000c00
 8004238:	48001000 	.word	0x48001000
 800423c:	40010400 	.word	0x40010400
 8004240:	40021000 	.word	0x40021000

08004244 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004244:	6903      	ldr	r3, [r0, #16]
 8004246:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004248:	bf14      	ite	ne
 800424a:	2001      	movne	r0, #1
 800424c:	2000      	moveq	r0, #0
 800424e:	4770      	bx	lr

08004250 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004250:	b10a      	cbz	r2, 8004256 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004252:	6181      	str	r1, [r0, #24]
 8004254:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004256:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop

0800425c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800425c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800425e:	ea01 0203 	and.w	r2, r1, r3
 8004262:	ea21 0103 	bic.w	r1, r1, r3
 8004266:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800426a:	6181      	str	r1, [r0, #24]
}
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004270:	2800      	cmp	r0, #0
 8004272:	f000 828c 	beq.w	800478e <HAL_RCC_OscConfig+0x51e>
{
 8004276:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427a:	6803      	ldr	r3, [r0, #0]
 800427c:	07d9      	lsls	r1, r3, #31
{
 800427e:	b083      	sub	sp, #12
 8004280:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	d54f      	bpl.n	8004324 <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004284:	49b4      	ldr	r1, [pc, #720]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
 8004286:	684a      	ldr	r2, [r1, #4]
 8004288:	f002 020c 	and.w	r2, r2, #12
 800428c:	2a04      	cmp	r2, #4
 800428e:	f000 816d 	beq.w	800456c <HAL_RCC_OscConfig+0x2fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004292:	684a      	ldr	r2, [r1, #4]
 8004294:	f002 020c 	and.w	r2, r2, #12
 8004298:	2a08      	cmp	r2, #8
 800429a:	f000 8163 	beq.w	8004564 <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429e:	6863      	ldr	r3, [r4, #4]
 80042a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a4:	d017      	beq.n	80042d6 <HAL_RCC_OscConfig+0x66>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 819c 	beq.w	80045e4 <HAL_RCC_OscConfig+0x374>
 80042ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b0:	f000 8258 	beq.w	8004764 <HAL_RCC_OscConfig+0x4f4>
 80042b4:	4ba8      	ldr	r3, [pc, #672]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042c4:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042c6:	4aa4      	ldr	r2, [pc, #656]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
 80042c8:	68a1      	ldr	r1, [r4, #8]
 80042ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042cc:	f023 030f 	bic.w	r3, r3, #15
 80042d0:	430b      	orrs	r3, r1
 80042d2:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d4:	e00a      	b.n	80042ec <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d6:	4aa0      	ldr	r2, [pc, #640]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
 80042d8:	6813      	ldr	r3, [r2, #0]
 80042da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042de:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80042e2:	68a1      	ldr	r1, [r4, #8]
 80042e4:	f023 030f 	bic.w	r3, r3, #15
 80042e8:	430b      	orrs	r3, r1
 80042ea:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fe f9de 	bl	80026ac <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f0:	4f99      	ldr	r7, [pc, #612]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 80042f2:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f8:	2601      	movs	r6, #1
 80042fa:	e005      	b.n	8004308 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042fc:	f7fe f9d6 	bl	80026ac <HAL_GetTick>
 8004300:	1b40      	subs	r0, r0, r5
 8004302:	2864      	cmp	r0, #100	; 0x64
 8004304:	f200 816a 	bhi.w	80045dc <HAL_RCC_OscConfig+0x36c>
 8004308:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	fa98 f3a8 	rbit	r3, r8
 8004312:	fab3 f383 	clz	r3, r3
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	fa06 f303 	lsl.w	r3, r6, r3
 800431e:	4213      	tst	r3, r2
 8004320:	d0ec      	beq.n	80042fc <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	079f      	lsls	r7, r3, #30
 8004326:	d541      	bpl.n	80043ac <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004328:	4a8b      	ldr	r2, [pc, #556]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
 800432a:	6851      	ldr	r1, [r2, #4]
 800432c:	f011 0f0c 	tst.w	r1, #12
 8004330:	f000 80c8 	beq.w	80044c4 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004334:	6851      	ldr	r1, [r2, #4]
 8004336:	f001 010c 	and.w	r1, r1, #12
 800433a:	2908      	cmp	r1, #8
 800433c:	f000 80be 	beq.w	80044bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004340:	6922      	ldr	r2, [r4, #16]
 8004342:	2a00      	cmp	r2, #0
 8004344:	f000 81ad 	beq.w	80046a2 <HAL_RCC_OscConfig+0x432>
 8004348:	2501      	movs	r5, #1
 800434a:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004356:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800435a:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	4f7e      	ldr	r7, [pc, #504]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
        __HAL_RCC_HSI_ENABLE();
 800435e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8004360:	f7fe f9a4 	bl	80026ac <HAL_GetTick>
 8004364:	f04f 0802 	mov.w	r8, #2
 8004368:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436a:	e005      	b.n	8004378 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436c:	f7fe f99e 	bl	80026ac <HAL_GetTick>
 8004370:	1b80      	subs	r0, r0, r6
 8004372:	2802      	cmp	r0, #2
 8004374:	f200 8132 	bhi.w	80045dc <HAL_RCC_OscConfig+0x36c>
 8004378:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	fa98 f3a8 	rbit	r3, r8
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	fa05 f303 	lsl.w	r3, r5, r3
 800438e:	4213      	tst	r3, r2
 8004390:	d0ec      	beq.n	800436c <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004392:	6839      	ldr	r1, [r7, #0]
 8004394:	22f8      	movs	r2, #248	; 0xf8
 8004396:	fa92 f2a2 	rbit	r2, r2
 800439a:	6963      	ldr	r3, [r4, #20]
 800439c:	fab2 f282 	clz	r2, r2
 80043a0:	4093      	lsls	r3, r2
 80043a2:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80043a6:	4313      	orrs	r3, r2
 80043a8:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	071d      	lsls	r5, r3, #28
 80043ae:	d421      	bmi.n	80043f4 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b0:	0758      	lsls	r0, r3, #29
 80043b2:	d54c      	bpl.n	800444e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b4:	4b68      	ldr	r3, [pc, #416]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	00d1      	lsls	r1, r2, #3
 80043ba:	f140 80c1 	bpl.w	8004540 <HAL_RCC_OscConfig+0x2d0>
    FlagStatus       pwrclkchanged = RESET;
 80043be:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c2:	4d66      	ldr	r5, [pc, #408]	; (800455c <HAL_RCC_OscConfig+0x2ec>)
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	05da      	lsls	r2, r3, #23
 80043c8:	f140 80f8 	bpl.w	80045bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043cc:	68e3      	ldr	r3, [r4, #12]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	f000 818d 	beq.w	80046ee <HAL_RCC_OscConfig+0x47e>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 812e 	beq.w	8004636 <HAL_RCC_OscConfig+0x3c6>
 80043da:	2b05      	cmp	r3, #5
 80043dc:	4b5e      	ldr	r3, [pc, #376]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
 80043de:	6a1a      	ldr	r2, [r3, #32]
 80043e0:	f000 81cd 	beq.w	800477e <HAL_RCC_OscConfig+0x50e>
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	621a      	str	r2, [r3, #32]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	f022 0204 	bic.w	r2, r2, #4
 80043f0:	621a      	str	r2, [r3, #32]
 80043f2:	e181      	b.n	80046f8 <HAL_RCC_OscConfig+0x488>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f4:	69a2      	ldr	r2, [r4, #24]
 80043f6:	2a00      	cmp	r2, #0
 80043f8:	d07b      	beq.n	80044f2 <HAL_RCC_OscConfig+0x282>
 80043fa:	2501      	movs	r5, #1
 80043fc:	fa95 f2a5 	rbit	r2, r5
      __HAL_RCC_LSI_ENABLE();
 8004400:	4b57      	ldr	r3, [pc, #348]	; (8004560 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004402:	4f55      	ldr	r7, [pc, #340]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_ENABLE();
 8004404:	fab2 f282 	clz	r2, r2
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	f04f 0802 	mov.w	r8, #2
 8004410:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8004412:	f7fe f94b 	bl	80026ac <HAL_GetTick>
 8004416:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004418:	e005      	b.n	8004426 <HAL_RCC_OscConfig+0x1b6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441a:	f7fe f947 	bl	80026ac <HAL_GetTick>
 800441e:	1b80      	subs	r0, r0, r6
 8004420:	2802      	cmp	r0, #2
 8004422:	f200 80db 	bhi.w	80045dc <HAL_RCC_OscConfig+0x36c>
 8004426:	fa98 f3a8 	rbit	r3, r8
 800442a:	fa98 f3a8 	rbit	r3, r8
 800442e:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004434:	fa98 f3a8 	rbit	r3, r8
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	fa05 f303 	lsl.w	r3, r5, r3
 8004444:	4213      	tst	r3, r2
 8004446:	d0e8      	beq.n	800441a <HAL_RCC_OscConfig+0x1aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	0758      	lsls	r0, r3, #29
 800444c:	d4b2      	bmi.n	80043b4 <HAL_RCC_OscConfig+0x144>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444e:	69e0      	ldr	r0, [r4, #28]
 8004450:	b380      	cbz	r0, 80044b4 <HAL_RCC_OscConfig+0x244>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004452:	4d41      	ldr	r5, [pc, #260]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
 8004454:	686b      	ldr	r3, [r5, #4]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b08      	cmp	r3, #8
 800445c:	f000 8171 	beq.w	8004742 <HAL_RCC_OscConfig+0x4d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004460:	2802      	cmp	r0, #2
 8004462:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004466:	f000 8194 	beq.w	8004792 <HAL_RCC_OscConfig+0x522>
 800446a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004476:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fe f914 	bl	80026ac <HAL_GetTick>
 8004484:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004488:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800448a:	2601      	movs	r6, #1
 800448c:	e005      	b.n	800449a <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448e:	f7fe f90d 	bl	80026ac <HAL_GetTick>
 8004492:	1b00      	subs	r0, r0, r4
 8004494:	2802      	cmp	r0, #2
 8004496:	f200 80a1 	bhi.w	80045dc <HAL_RCC_OscConfig+0x36c>
 800449a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800449e:	682a      	ldr	r2, [r5, #0]
 80044a0:	fa97 f3a7 	rbit	r3, r7
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	fa06 f303 	lsl.w	r3, r6, r3
 80044b0:	4213      	tst	r3, r2
 80044b2:	d1ec      	bne.n	800448e <HAL_RCC_OscConfig+0x21e>
        }
      }
    }
  }

  return HAL_OK;
 80044b4:	2000      	movs	r0, #0
}
 80044b6:	b003      	add	sp, #12
 80044b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80044bc:	6852      	ldr	r2, [r2, #4]
 80044be:	03d6      	lsls	r6, r2, #15
 80044c0:	f53f af3e 	bmi.w	8004340 <HAL_RCC_OscConfig+0xd0>
 80044c4:	2202      	movs	r2, #2
 80044c6:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ca:	4923      	ldr	r1, [pc, #140]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
 80044cc:	6808      	ldr	r0, [r1, #0]
 80044ce:	fa92 f2a2 	rbit	r2, r2
 80044d2:	fab2 f282 	clz	r2, r2
 80044d6:	f002 021f 	and.w	r2, r2, #31
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f202 	lsl.w	r2, r1, r2
 80044e0:	4202      	tst	r2, r0
 80044e2:	d05a      	beq.n	800459a <HAL_RCC_OscConfig+0x32a>
 80044e4:	6922      	ldr	r2, [r4, #16]
 80044e6:	428a      	cmp	r2, r1
 80044e8:	d057      	beq.n	800459a <HAL_RCC_OscConfig+0x32a>
        return HAL_ERROR;
 80044ea:	2001      	movs	r0, #1
}
 80044ec:	b003      	add	sp, #12
 80044ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044f2:	2601      	movs	r6, #1
 80044f4:	fa96 f1a6 	rbit	r1, r6
      __HAL_RCC_LSI_DISABLE();
 80044f8:	4b19      	ldr	r3, [pc, #100]	; (8004560 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044fa:	4f17      	ldr	r7, [pc, #92]	; (8004558 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_DISABLE();
 80044fc:	fab1 f181 	clz	r1, r1
 8004500:	440b      	add	r3, r1
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	f04f 0802 	mov.w	r8, #2
 8004508:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800450a:	f7fe f8cf 	bl	80026ac <HAL_GetTick>
 800450e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	e004      	b.n	800451c <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004512:	f7fe f8cb 	bl	80026ac <HAL_GetTick>
 8004516:	1b40      	subs	r0, r0, r5
 8004518:	2802      	cmp	r0, #2
 800451a:	d85f      	bhi.n	80045dc <HAL_RCC_OscConfig+0x36c>
 800451c:	fa98 f3a8 	rbit	r3, r8
 8004520:	fa98 f3a8 	rbit	r3, r8
 8004524:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452a:	fa98 f3a8 	rbit	r3, r8
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	fa06 f303 	lsl.w	r3, r6, r3
 800453a:	4213      	tst	r3, r2
 800453c:	d1e9      	bne.n	8004512 <HAL_RCC_OscConfig+0x2a2>
 800453e:	e783      	b.n	8004448 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004540:	69da      	ldr	r2, [r3, #28]
 8004542:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004546:	61da      	str	r2, [r3, #28]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004552:	f04f 0801 	mov.w	r8, #1
 8004556:	e734      	b.n	80043c2 <HAL_RCC_OscConfig+0x152>
 8004558:	40021000 	.word	0x40021000
 800455c:	40007000 	.word	0x40007000
 8004560:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004564:	684a      	ldr	r2, [r1, #4]
 8004566:	03d2      	lsls	r2, r2, #15
 8004568:	f57f ae99 	bpl.w	800429e <HAL_RCC_OscConfig+0x2e>
 800456c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004570:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	49b1      	ldr	r1, [pc, #708]	; (800483c <HAL_RCC_OscConfig+0x5cc>)
 8004576:	6808      	ldr	r0, [r1, #0]
 8004578:	fa92 f2a2 	rbit	r2, r2
 800457c:	fab2 f282 	clz	r2, r2
 8004580:	f002 021f 	and.w	r2, r2, #31
 8004584:	2101      	movs	r1, #1
 8004586:	fa01 f202 	lsl.w	r2, r1, r2
 800458a:	4202      	tst	r2, r0
 800458c:	f43f aeca 	beq.w	8004324 <HAL_RCC_OscConfig+0xb4>
 8004590:	6862      	ldr	r2, [r4, #4]
 8004592:	2a00      	cmp	r2, #0
 8004594:	f47f aec6 	bne.w	8004324 <HAL_RCC_OscConfig+0xb4>
 8004598:	e7a7      	b.n	80044ea <HAL_RCC_OscConfig+0x27a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459a:	4da8      	ldr	r5, [pc, #672]	; (800483c <HAL_RCC_OscConfig+0x5cc>)
 800459c:	22f8      	movs	r2, #248	; 0xf8
 800459e:	6828      	ldr	r0, [r5, #0]
 80045a0:	fa92 f2a2 	rbit	r2, r2
 80045a4:	fab2 f182 	clz	r1, r2
 80045a8:	6962      	ldr	r2, [r4, #20]
 80045aa:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80045ae:	408a      	lsls	r2, r1
 80045b0:	4302      	orrs	r2, r0
 80045b2:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045b4:	071d      	lsls	r5, r3, #28
 80045b6:	f57f aefb 	bpl.w	80043b0 <HAL_RCC_OscConfig+0x140>
 80045ba:	e71b      	b.n	80043f4 <HAL_RCC_OscConfig+0x184>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80045c4:	f7fe f872 	bl	80026ac <HAL_GetTick>
 80045c8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	682b      	ldr	r3, [r5, #0]
 80045cc:	05db      	lsls	r3, r3, #23
 80045ce:	f53f aefd 	bmi.w	80043cc <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d2:	f7fe f86b 	bl	80026ac <HAL_GetTick>
 80045d6:	1b80      	subs	r0, r0, r6
 80045d8:	2864      	cmp	r0, #100	; 0x64
 80045da:	d9f6      	bls.n	80045ca <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80045dc:	2003      	movs	r0, #3
}
 80045de:	b003      	add	sp, #12
 80045e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e4:	4d95      	ldr	r5, [pc, #596]	; (800483c <HAL_RCC_OscConfig+0x5cc>)
 80045e6:	682b      	ldr	r3, [r5, #0]
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ec:	602b      	str	r3, [r5, #0]
 80045ee:	682b      	ldr	r3, [r5, #0]
 80045f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045f4:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045f6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80045f8:	68a2      	ldr	r2, [r4, #8]
 80045fa:	f023 030f 	bic.w	r3, r3, #15
 80045fe:	4313      	orrs	r3, r2
 8004600:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8004602:	f7fe f853 	bl	80026ac <HAL_GetTick>
 8004606:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 800460a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460c:	2701      	movs	r7, #1
 800460e:	e004      	b.n	800461a <HAL_RCC_OscConfig+0x3aa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe f84c 	bl	80026ac <HAL_GetTick>
 8004614:	1b80      	subs	r0, r0, r6
 8004616:	2864      	cmp	r0, #100	; 0x64
 8004618:	d8e0      	bhi.n	80045dc <HAL_RCC_OscConfig+0x36c>
 800461a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461e:	682a      	ldr	r2, [r5, #0]
 8004620:	fa98 f3a8 	rbit	r3, r8
 8004624:	fab3 f383 	clz	r3, r3
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	fa07 f303 	lsl.w	r3, r7, r3
 8004630:	4213      	tst	r3, r2
 8004632:	d1ed      	bne.n	8004610 <HAL_RCC_OscConfig+0x3a0>
 8004634:	e675      	b.n	8004322 <HAL_RCC_OscConfig+0xb2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004636:	4d81      	ldr	r5, [pc, #516]	; (800483c <HAL_RCC_OscConfig+0x5cc>)
 8004638:	6a2b      	ldr	r3, [r5, #32]
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	622b      	str	r3, [r5, #32]
 8004640:	6a2b      	ldr	r3, [r5, #32]
 8004642:	f023 0304 	bic.w	r3, r3, #4
 8004646:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004648:	f7fe f830 	bl	80026ac <HAL_GetTick>
 800464c:	f04f 0902 	mov.w	r9, #2
 8004650:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004652:	2701      	movs	r7, #1
 8004654:	e013      	b.n	800467e <HAL_RCC_OscConfig+0x40e>
 8004656:	fa99 f3a9 	rbit	r3, r9
 800465a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800465c:	fa99 f3a9 	rbit	r3, r9
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	fa07 f303 	lsl.w	r3, r7, r3
 800466c:	4213      	tst	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fe f81c 	bl	80026ac <HAL_GetTick>
 8004674:	f241 3388 	movw	r3, #5000	; 0x1388
 8004678:	1b80      	subs	r0, r0, r6
 800467a:	4298      	cmp	r0, r3
 800467c:	d8ae      	bhi.n	80045dc <HAL_RCC_OscConfig+0x36c>
 800467e:	fa99 f3a9 	rbit	r3, r9
 8004682:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0e5      	beq.n	8004656 <HAL_RCC_OscConfig+0x3e6>
 800468a:	6a2a      	ldr	r2, [r5, #32]
 800468c:	e7e6      	b.n	800465c <HAL_RCC_OscConfig+0x3ec>
    if(pwrclkchanged == SET)
 800468e:	f1b8 0f00 	cmp.w	r8, #0
 8004692:	f43f aedc 	beq.w	800444e <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004696:	4a69      	ldr	r2, [pc, #420]	; (800483c <HAL_RCC_OscConfig+0x5cc>)
 8004698:	69d3      	ldr	r3, [r2, #28]
 800469a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800469e:	61d3      	str	r3, [r2, #28]
 80046a0:	e6d5      	b.n	800444e <HAL_RCC_OscConfig+0x1de>
 80046a2:	2601      	movs	r6, #1
 80046a4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80046a8:	fab3 f383 	clz	r3, r3
 80046ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046b4:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	4f61      	ldr	r7, [pc, #388]	; (800483c <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_HSI_DISABLE();
 80046b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80046ba:	f7fd fff7 	bl	80026ac <HAL_GetTick>
 80046be:	f04f 0802 	mov.w	r8, #2
 80046c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c4:	e004      	b.n	80046d0 <HAL_RCC_OscConfig+0x460>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c6:	f7fd fff1 	bl	80026ac <HAL_GetTick>
 80046ca:	1b40      	subs	r0, r0, r5
 80046cc:	2802      	cmp	r0, #2
 80046ce:	d885      	bhi.n	80045dc <HAL_RCC_OscConfig+0x36c>
 80046d0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	fa98 f3a8 	rbit	r3, r8
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	fa06 f303 	lsl.w	r3, r6, r3
 80046e6:	4213      	tst	r3, r2
 80046e8:	d1ed      	bne.n	80046c6 <HAL_RCC_OscConfig+0x456>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	e65e      	b.n	80043ac <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ee:	4a53      	ldr	r2, [pc, #332]	; (800483c <HAL_RCC_OscConfig+0x5cc>)
 80046f0:	6a13      	ldr	r3, [r2, #32]
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80046f8:	f7fd ffd8 	bl	80026ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fc:	4f4f      	ldr	r7, [pc, #316]	; (800483c <HAL_RCC_OscConfig+0x5cc>)
      tickstart = HAL_GetTick();
 80046fe:	4605      	mov	r5, r0
 8004700:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004704:	2601      	movs	r6, #1
 8004706:	e014      	b.n	8004732 <HAL_RCC_OscConfig+0x4c2>
 8004708:	fa99 f3a9 	rbit	r3, r9
 800470c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470e:	fa99 f3a9 	rbit	r3, r9
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	fa06 f303 	lsl.w	r3, r6, r3
 800471e:	4213      	tst	r3, r2
 8004720:	d1b5      	bne.n	800468e <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004722:	f7fd ffc3 	bl	80026ac <HAL_GetTick>
 8004726:	f241 3388 	movw	r3, #5000	; 0x1388
 800472a:	1b40      	subs	r0, r0, r5
 800472c:	4298      	cmp	r0, r3
 800472e:	f63f af55 	bhi.w	80045dc <HAL_RCC_OscConfig+0x36c>
 8004732:	fa99 f3a9 	rbit	r3, r9
 8004736:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0e4      	beq.n	8004708 <HAL_RCC_OscConfig+0x498>
 800473e:	6a3a      	ldr	r2, [r7, #32]
 8004740:	e7e5      	b.n	800470e <HAL_RCC_OscConfig+0x49e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004742:	2801      	cmp	r0, #1
 8004744:	f43f aeb7 	beq.w	80044b6 <HAL_RCC_OscConfig+0x246>
        pll_config = RCC->CFGR;
 8004748:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800474a:	6a22      	ldr	r2, [r4, #32]
 800474c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004750:	4291      	cmp	r1, r2
 8004752:	f47f aeca 	bne.w	80044ea <HAL_RCC_OscConfig+0x27a>
 8004756:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004758:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800475c:	1a18      	subs	r0, r3, r0
 800475e:	bf18      	it	ne
 8004760:	2001      	movne	r0, #1
 8004762:	e6a8      	b.n	80044b6 <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004764:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004768:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e5a3      	b.n	80042c6 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800477e:	f042 0204 	orr.w	r2, r2, #4
 8004782:	621a      	str	r2, [r3, #32]
 8004784:	6a1a      	ldr	r2, [r3, #32]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	621a      	str	r2, [r3, #32]
 800478c:	e7b4      	b.n	80046f8 <HAL_RCC_OscConfig+0x488>
    return HAL_ERROR;
 800478e:	2001      	movs	r0, #1
}
 8004790:	4770      	bx	lr
 8004792:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800479e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80047a8:	f7fd ff80 	bl	80026ac <HAL_GetTick>
 80047ac:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80047b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b2:	2701      	movs	r7, #1
 80047b4:	e005      	b.n	80047c2 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fd ff79 	bl	80026ac <HAL_GetTick>
 80047ba:	1b80      	subs	r0, r0, r6
 80047bc:	2802      	cmp	r0, #2
 80047be:	f63f af0d 	bhi.w	80045dc <HAL_RCC_OscConfig+0x36c>
 80047c2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c6:	682a      	ldr	r2, [r5, #0]
 80047c8:	fa98 f3a8 	rbit	r3, r8
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	fa07 f303 	lsl.w	r3, r7, r3
 80047d8:	4213      	tst	r3, r2
 80047da:	d1ec      	bne.n	80047b6 <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047dc:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 80047e0:	686a      	ldr	r2, [r5, #4]
 80047e2:	430b      	orrs	r3, r1
 80047e4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80047e8:	4313      	orrs	r3, r2
 80047ea:	606b      	str	r3, [r5, #4]
 80047ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047f0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80047f4:	fab3 f383 	clz	r3, r3
 80047f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004800:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004802:	4d0e      	ldr	r5, [pc, #56]	; (800483c <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_PLL_ENABLE();
 8004804:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8004806:	f7fd ff51 	bl	80026ac <HAL_GetTick>
 800480a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800480e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004810:	2601      	movs	r6, #1
 8004812:	e005      	b.n	8004820 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004814:	f7fd ff4a 	bl	80026ac <HAL_GetTick>
 8004818:	1b00      	subs	r0, r0, r4
 800481a:	2802      	cmp	r0, #2
 800481c:	f63f aede 	bhi.w	80045dc <HAL_RCC_OscConfig+0x36c>
 8004820:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004824:	682a      	ldr	r2, [r5, #0]
 8004826:	fa97 f3a7 	rbit	r3, r7
 800482a:	fab3 f383 	clz	r3, r3
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	fa06 f303 	lsl.w	r3, r6, r3
 8004836:	4213      	tst	r3, r2
 8004838:	d0ec      	beq.n	8004814 <HAL_RCC_OscConfig+0x5a4>
 800483a:	e63b      	b.n	80044b4 <HAL_RCC_OscConfig+0x244>
 800483c:	40021000 	.word	0x40021000

08004840 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004840:	2800      	cmp	r0, #0
 8004842:	f000 80c8 	beq.w	80049d6 <HAL_RCC_ClockConfig+0x196>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004846:	4a6f      	ldr	r2, [pc, #444]	; (8004a04 <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	6813      	ldr	r3, [r2, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	428b      	cmp	r3, r1
{
 8004850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004854:	460d      	mov	r5, r1
 8004856:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	d20c      	bcs.n	8004874 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	f023 0307 	bic.w	r3, r3, #7
 8004860:	430b      	orrs	r3, r1
 8004862:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004864:	6813      	ldr	r3, [r2, #0]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	428b      	cmp	r3, r1
 800486c:	d002      	beq.n	8004874 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800486e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8004870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	079f      	lsls	r7, r3, #30
 8004878:	d506      	bpl.n	8004888 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800487a:	4963      	ldr	r1, [pc, #396]	; (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 800487c:	68a0      	ldr	r0, [r4, #8]
 800487e:	684a      	ldr	r2, [r1, #4]
 8004880:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004884:	4302      	orrs	r2, r0
 8004886:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004888:	07de      	lsls	r6, r3, #31
 800488a:	d52f      	bpl.n	80048ec <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488c:	6861      	ldr	r1, [r4, #4]
 800488e:	2901      	cmp	r1, #1
 8004890:	f000 80a3 	beq.w	80049da <HAL_RCC_ClockConfig+0x19a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004894:	2902      	cmp	r1, #2
 8004896:	f000 808b 	beq.w	80049b0 <HAL_RCC_ClockConfig+0x170>
 800489a:	2202      	movs	r2, #2
 800489c:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	fa92 f2a2 	rbit	r2, r2
 80048a8:	fab2 f282 	clz	r2, r2
 80048ac:	f002 021f 	and.w	r2, r2, #31
 80048b0:	2301      	movs	r3, #1
 80048b2:	fa03 f202 	lsl.w	r2, r3, r2
 80048b6:	4202      	tst	r2, r0
 80048b8:	d0d9      	beq.n	800486e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ba:	4e53      	ldr	r6, [pc, #332]	; (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 80048bc:	6873      	ldr	r3, [r6, #4]
 80048be:	f023 0303 	bic.w	r3, r3, #3
 80048c2:	430b      	orrs	r3, r1
 80048c4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80048c6:	f7fd fef1 	bl	80026ac <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ca:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80048ce:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048d0:	e005      	b.n	80048de <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d2:	f7fd feeb 	bl	80026ac <HAL_GetTick>
 80048d6:	1bc0      	subs	r0, r0, r7
 80048d8:	4540      	cmp	r0, r8
 80048da:	f200 8090 	bhi.w	80049fe <HAL_RCC_ClockConfig+0x1be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048de:	6873      	ldr	r3, [r6, #4]
 80048e0:	6862      	ldr	r2, [r4, #4]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80048ea:	d1f2      	bne.n	80048d2 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048ec:	4a45      	ldr	r2, [pc, #276]	; (8004a04 <HAL_RCC_ClockConfig+0x1c4>)
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	42ab      	cmp	r3, r5
 80048f6:	d909      	bls.n	800490c <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f8:	6813      	ldr	r3, [r2, #0]
 80048fa:	f023 0307 	bic.w	r3, r3, #7
 80048fe:	432b      	orrs	r3, r5
 8004900:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	42ab      	cmp	r3, r5
 800490a:	d1b0      	bne.n	800486e <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	0758      	lsls	r0, r3, #29
 8004910:	d506      	bpl.n	8004920 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004912:	493d      	ldr	r1, [pc, #244]	; (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	68e0      	ldr	r0, [r4, #12]
 8004916:	684a      	ldr	r2, [r1, #4]
 8004918:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800491c:	4302      	orrs	r2, r0
 800491e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004920:	0719      	lsls	r1, r3, #28
 8004922:	d507      	bpl.n	8004934 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004924:	4a38      	ldr	r2, [pc, #224]	; (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 8004926:	6921      	ldr	r1, [r4, #16]
 8004928:	6853      	ldr	r3, [r2, #4]
 800492a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800492e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004932:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004934:	4934      	ldr	r1, [pc, #208]	; (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 8004936:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004938:	f002 030c 	and.w	r3, r2, #12
 800493c:	2b08      	cmp	r3, #8
 800493e:	d017      	beq.n	8004970 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004940:	4932      	ldr	r1, [pc, #200]	; (8004a0c <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004942:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	22f0      	movs	r2, #240	; 0xf0
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	fa92 f2a2 	rbit	r2, r2
 800494c:	fab2 f282 	clz	r2, r2
 8004950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004954:	40d3      	lsrs	r3, r2
 8004956:	4a2e      	ldr	r2, [pc, #184]	; (8004a10 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8004958:	482e      	ldr	r0, [pc, #184]	; (8004a14 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800495a:	5cd3      	ldrb	r3, [r2, r3]
 800495c:	4a2e      	ldr	r2, [pc, #184]	; (8004a18 <HAL_RCC_ClockConfig+0x1d8>)
  HAL_InitTick (uwTickPrio);
 800495e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004960:	fa21 f303 	lsr.w	r3, r1, r3
 8004964:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8004966:	f7fd fe5f 	bl	8002628 <HAL_InitTick>
  return HAL_OK;
 800496a:	2000      	movs	r0, #0
}
 800496c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004970:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004974:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004978:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 800497c:	fab3 f383 	clz	r3, r3
 8004980:	4c26      	ldr	r4, [pc, #152]	; (8004a1c <HAL_RCC_ClockConfig+0x1dc>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004982:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004984:	fa20 f303 	lsr.w	r3, r0, r3
 8004988:	200f      	movs	r0, #15
 800498a:	5ce3      	ldrb	r3, [r4, r3]
 800498c:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004990:	fab0 f080 	clz	r0, r0
 8004994:	f001 010f 	and.w	r1, r1, #15
 8004998:	40c1      	lsrs	r1, r0
 800499a:	4c21      	ldr	r4, [pc, #132]	; (8004a20 <HAL_RCC_ClockConfig+0x1e0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800499c:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800499e:	5c60      	ldrb	r0, [r4, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049a0:	bf4a      	itet	mi
 80049a2:	491a      	ldrmi	r1, [pc, #104]	; (8004a0c <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80049a4:	491f      	ldrpl	r1, [pc, #124]	; (8004a24 <HAL_RCC_ClockConfig+0x1e4>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049a6:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80049aa:	fb03 f101 	mul.w	r1, r3, r1
 80049ae:	e7c8      	b.n	8004942 <HAL_RCC_ClockConfig+0x102>
 80049b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049b4:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 80049ba:	6810      	ldr	r0, [r2, #0]
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	f003 031f 	and.w	r3, r3, #31
 80049c8:	2201      	movs	r2, #1
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	4203      	tst	r3, r0
 80049d0:	f47f af73 	bne.w	80048ba <HAL_RCC_ClockConfig+0x7a>
 80049d4:	e74b      	b.n	800486e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80049d6:	2001      	movs	r0, #1
}
 80049d8:	4770      	bx	lr
 80049da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049de:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <HAL_RCC_ClockConfig+0x1c8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	fa92 f2a2 	rbit	r2, r2
 80049ea:	fab2 f282 	clz	r2, r2
 80049ee:	f002 021f 	and.w	r2, r2, #31
 80049f2:	fa01 f202 	lsl.w	r2, r1, r2
 80049f6:	421a      	tst	r2, r3
 80049f8:	f47f af5f 	bne.w	80048ba <HAL_RCC_ClockConfig+0x7a>
 80049fc:	e737      	b.n	800486e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80049fe:	2003      	movs	r0, #3
 8004a00:	e736      	b.n	8004870 <HAL_RCC_ClockConfig+0x30>
 8004a02:	bf00      	nop
 8004a04:	40022000 	.word	0x40022000
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	007a1200 	.word	0x007a1200
 8004a10:	0800a0cc 	.word	0x0800a0cc
 8004a14:	20000008 	.word	0x20000008
 8004a18:	20000000 	.word	0x20000000
 8004a1c:	0800a0e4 	.word	0x0800a0e4
 8004a20:	0800a0f4 	.word	0x0800a0f4
 8004a24:	003d0900 	.word	0x003d0900

08004a28 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004a28:	4915      	ldr	r1, [pc, #84]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x58>)
 8004a2a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004a2c:	f003 020c 	and.w	r2, r3, #12
 8004a30:	2a08      	cmp	r2, #8
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004a34:	4813      	ldr	r0, [pc, #76]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004a36:	4770      	bx	lr
{
 8004a38:	b410      	push	{r4}
 8004a3a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004a3e:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a42:	fab2 f282 	clz	r2, r2
 8004a46:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8004a4a:	4c0f      	ldr	r4, [pc, #60]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x60>)
 8004a4c:	40d0      	lsrs	r0, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a4e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a50:	5c20      	ldrb	r0, [r4, r0]
 8004a52:	210f      	movs	r1, #15
 8004a54:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004a58:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a5a:	fab1 f181 	clz	r1, r1
 8004a5e:	f002 020f 	and.w	r2, r2, #15
 8004a62:	4c0a      	ldr	r4, [pc, #40]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x64>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a64:	bf4c      	ite	mi
 8004a66:	4b07      	ldrmi	r3, [pc, #28]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004a68:	4b09      	ldrpl	r3, [pc, #36]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a6a:	fa22 f201 	lsr.w	r2, r2, r1
 8004a6e:	5ca2      	ldrb	r2, [r4, r2]
}
 8004a70:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a74:	bf48      	it	mi
 8004a76:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004a7a:	fb03 f000 	mul.w	r0, r3, r0
}
 8004a7e:	4770      	bx	lr
 8004a80:	40021000 	.word	0x40021000
 8004a84:	007a1200 	.word	0x007a1200
 8004a88:	0800a0e4 	.word	0x0800a0e4
 8004a8c:	0800a0f4 	.word	0x0800a0f4
 8004a90:	003d0900 	.word	0x003d0900

08004a94 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	fa92 f2a2 	rbit	r2, r2
 8004aa0:	fab2 f282 	clz	r2, r2
 8004aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004aa8:	4904      	ldr	r1, [pc, #16]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8004aaa:	4805      	ldr	r0, [pc, #20]	; (8004ac0 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004aac:	40d3      	lsrs	r3, r2
 8004aae:	6800      	ldr	r0, [r0, #0]
 8004ab0:	5ccb      	ldrb	r3, [r1, r3]
}    
 8004ab2:	40d8      	lsrs	r0, r3
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	0800a0dc 	.word	0x0800a0dc
 8004ac0:	20000000 	.word	0x20000000

08004ac4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ac6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	fa92 f2a2 	rbit	r2, r2
 8004ad0:	fab2 f282 	clz	r2, r2
 8004ad4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ad8:	4904      	ldr	r1, [pc, #16]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8004ada:	4805      	ldr	r0, [pc, #20]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004adc:	40d3      	lsrs	r3, r2
 8004ade:	6800      	ldr	r0, [r0, #0]
 8004ae0:	5ccb      	ldrb	r3, [r1, r3]
} 
 8004ae2:	40d8      	lsrs	r0, r3
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	0800a0dc 	.word	0x0800a0dc
 8004af0:	20000000 	.word	0x20000000

08004af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004af8:	6803      	ldr	r3, [r0, #0]
 8004afa:	03dd      	lsls	r5, r3, #15
{
 8004afc:	b083      	sub	sp, #12
 8004afe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b00:	d540      	bpl.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b02:	4b84      	ldr	r3, [pc, #528]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	00d0      	lsls	r0, r2, #3
 8004b08:	f140 80ba 	bpl.w	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0c:	4e82      	ldr	r6, [pc, #520]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004b0e:	6833      	ldr	r3, [r6, #0]
 8004b10:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 8004b12:	f04f 0500 	mov.w	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b16:	f140 80c3 	bpl.w	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b1a:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004b1e:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b22:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004b26:	d020      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b28:	6861      	ldr	r1, [r4, #4]
 8004b2a:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d01c      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b32:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8004b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b3a:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8004b3e:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b42:	4f76      	ldr	r7, [pc, #472]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b44:	fab2 f282 	clz	r2, r2
 8004b48:	443a      	add	r2, r7
 8004b4a:	0092      	lsls	r2, r2, #2
 8004b4c:	2601      	movs	r6, #1
 8004b4e:	6016      	str	r6, [r2, #0]
 8004b50:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	443b      	add	r3, r7
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b60:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8004b62:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b66:	f100 80af 	bmi.w	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004b6a:	6861      	ldr	r1, [r4, #4]
 8004b6c:	4a69      	ldr	r2, [pc, #420]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b6e:	6a13      	ldr	r3, [r2, #32]
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b74:	430b      	orrs	r3, r1
 8004b76:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b78:	b11d      	cbz	r5, 8004b82 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7a:	69d3      	ldr	r3, [r2, #28]
 8004b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b80:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	07df      	lsls	r7, r3, #31
 8004b86:	d506      	bpl.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b88:	4962      	ldr	r1, [pc, #392]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b8a:	68a0      	ldr	r0, [r4, #8]
 8004b8c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004b8e:	f022 0203 	bic.w	r2, r2, #3
 8004b92:	4302      	orrs	r2, r0
 8004b94:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b96:	079e      	lsls	r6, r3, #30
 8004b98:	d506      	bpl.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b9a:	495e      	ldr	r1, [pc, #376]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b9c:	68e0      	ldr	r0, [r4, #12]
 8004b9e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004ba0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004ba4:	4302      	orrs	r2, r0
 8004ba6:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ba8:	075d      	lsls	r5, r3, #29
 8004baa:	d506      	bpl.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bac:	4959      	ldr	r1, [pc, #356]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bae:	6920      	ldr	r0, [r4, #16]
 8004bb0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004bb2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004bb6:	4302      	orrs	r2, r0
 8004bb8:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bba:	0698      	lsls	r0, r3, #26
 8004bbc:	d506      	bpl.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bbe:	4955      	ldr	r1, [pc, #340]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bc0:	69e0      	ldr	r0, [r4, #28]
 8004bc2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004bc4:	f022 0210 	bic.w	r2, r2, #16
 8004bc8:	4302      	orrs	r2, r0
 8004bca:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bcc:	0399      	lsls	r1, r3, #14
 8004bce:	d506      	bpl.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004bd0:	4950      	ldr	r1, [pc, #320]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bd2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004bd4:	684a      	ldr	r2, [r1, #4]
 8004bd6:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004bda:	4302      	orrs	r2, r0
 8004bdc:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bde:	065a      	lsls	r2, r3, #25
 8004be0:	d506      	bpl.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004be2:	494c      	ldr	r1, [pc, #304]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004be4:	6a20      	ldr	r0, [r4, #32]
 8004be6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004be8:	f022 0220 	bic.w	r2, r2, #32
 8004bec:	4302      	orrs	r2, r0
 8004bee:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bf0:	071f      	lsls	r7, r3, #28
 8004bf2:	d506      	bpl.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bf4:	4947      	ldr	r1, [pc, #284]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bf6:	6960      	ldr	r0, [r4, #20]
 8004bf8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004bfa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004bfe:	4302      	orrs	r2, r0
 8004c00:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c02:	06de      	lsls	r6, r3, #27
 8004c04:	d506      	bpl.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c06:	4943      	ldr	r1, [pc, #268]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c08:	69a0      	ldr	r0, [r4, #24]
 8004c0a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004c0c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004c10:	4302      	orrs	r2, r0
 8004c12:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c14:	059d      	lsls	r5, r3, #22
 8004c16:	d506      	bpl.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c18:	493e      	ldr	r1, [pc, #248]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004c1c:	684a      	ldr	r2, [r1, #4]
 8004c1e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004c22:	4302      	orrs	r2, r0
 8004c24:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c26:	0618      	lsls	r0, r3, #24
 8004c28:	d506      	bpl.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c2a:	493a      	ldr	r1, [pc, #232]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c2e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004c30:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8004c34:	4302      	orrs	r2, r0
 8004c36:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004c38:	05d9      	lsls	r1, r3, #23
 8004c3a:	d506      	bpl.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004c3c:	4935      	ldr	r1, [pc, #212]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c40:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004c42:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8004c46:	4302      	orrs	r2, r0
 8004c48:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004c4a:	04da      	lsls	r2, r3, #19
 8004c4c:	d506      	bpl.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004c4e:	4931      	ldr	r1, [pc, #196]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004c52:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c58:	4302      	orrs	r2, r0
 8004c5a:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004c5c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8004c60:	d103      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c62:	4618      	mov	r0, r3
}
 8004c64:	b003      	add	sp, #12
 8004c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004c6a:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 8004c74:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004c76:	430b      	orrs	r3, r1
 8004c78:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004c7a:	b003      	add	sp, #12
 8004c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c80:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4e25      	ldr	r6, [pc, #148]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x224>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c88:	61da      	str	r2, [r3, #28]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c94:	6833      	ldr	r3, [r6, #0]
 8004c96:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 8004c98:	f04f 0501 	mov.w	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	f53f af3d 	bmi.w	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ca0:	6833      	ldr	r3, [r6, #0]
 8004ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004ca8:	f7fd fd00 	bl	80026ac <HAL_GetTick>
 8004cac:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cae:	6833      	ldr	r3, [r6, #0]
 8004cb0:	05da      	lsls	r2, r3, #23
 8004cb2:	f53f af32 	bmi.w	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb6:	f7fd fcf9 	bl	80026ac <HAL_GetTick>
 8004cba:	1bc0      	subs	r0, r0, r7
 8004cbc:	2864      	cmp	r0, #100	; 0x64
 8004cbe:	d9f6      	bls.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 8004cc0:	2003      	movs	r0, #3
}
 8004cc2:	b003      	add	sp, #12
 8004cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8004cc8:	f7fd fcf0 	bl	80026ac <HAL_GetTick>
 8004ccc:	f04f 0902 	mov.w	r9, #2
 8004cd0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd2:	e015      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004cd4:	fa99 f3a9 	rbit	r3, r9
 8004cd8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004cdc:	fa99 f3a9 	rbit	r3, r9
 8004ce0:	fab3 f383 	clz	r3, r3
 8004ce4:	f003 031f 	and.w	r3, r3, #31
 8004ce8:	fa06 f303 	lsl.w	r3, r6, r3
 8004cec:	4213      	tst	r3, r2
 8004cee:	f47f af3c 	bne.w	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf2:	f7fd fcdb 	bl	80026ac <HAL_GetTick>
 8004cf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cfa:	1bc0      	subs	r0, r0, r7
 8004cfc:	4298      	cmp	r0, r3
 8004cfe:	d8df      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004d00:	fa99 f3a9 	rbit	r3, r9
 8004d04:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0e3      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8004d0c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004d10:	e7e4      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	10908100 	.word	0x10908100

08004d20 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d077      	beq.n	8004e14 <HAL_SPI_Init+0xf4>
{
 8004d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d28:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	2e00      	cmp	r6, #0
 8004d2e:	d058      	beq.n	8004de2 <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d30:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d36:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d059      	beq.n	8004dfa <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d46:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d48:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004d50:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d52:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004d56:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8004d5a:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d5c:	d947      	bls.n	8004dee <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d5e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8004d62:	d159      	bne.n	8004e18 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d66:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d68:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8004d6c:	68a3      	ldr	r3, [r4, #8]
 8004d6e:	6a27      	ldr	r7, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d70:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d74:	6862      	ldr	r2, [r4, #4]
 8004d76:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d7a:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	6923      	ldr	r3, [r4, #16]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	431a      	orrs	r2, r3
 8004d88:	6963      	ldr	r3, [r4, #20]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	f006 0c10 	and.w	ip, r6, #16
 8004d9a:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d9e:	69a6      	ldr	r6, [r4, #24]
 8004da0:	69e3      	ldr	r3, [r4, #28]
 8004da2:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8004da6:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8004db0:	ea43 0308 	orr.w	r3, r3, r8
 8004db4:	433b      	orrs	r3, r7
 8004db6:	432b      	orrs	r3, r5
 8004db8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dba:	0c33      	lsrs	r3, r6, #16
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	ea4e 0303 	orr.w	r3, lr, r3
 8004dc4:	ea43 030c 	orr.w	r3, r3, ip
 8004dc8:	4303      	orrs	r3, r0
 8004dca:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dcc:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dce:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004dd4:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dd6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004dda:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de2:	6843      	ldr	r3, [r0, #4]
 8004de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004de8:	d0a5      	beq.n	8004d36 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dea:	61c6      	str	r6, [r0, #28]
 8004dec:	e7a3      	b.n	8004d36 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dee:	d00b      	beq.n	8004e08 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004df0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004df4:	2500      	movs	r5, #0
 8004df6:	62a5      	str	r5, [r4, #40]	; 0x28
 8004df8:	e7b8      	b.n	8004d6c <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8004dfa:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f7fc fec6 	bl	8001b90 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e06:	e79e      	b.n	8004d46 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e0a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e0e:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8004e12:	e7ab      	b.n	8004d6c <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004e14:	2001      	movs	r0, #1
}
 8004e16:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e18:	2000      	movs	r0, #0
 8004e1a:	e7eb      	b.n	8004df4 <HAL_SPI_Init+0xd4>

08004e1c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e1c:	6a03      	ldr	r3, [r0, #32]
 8004e1e:	f023 0301 	bic.w	r3, r3, #1
 8004e22:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e24:	6a03      	ldr	r3, [r0, #32]
{
 8004e26:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e2a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e32:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004e36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e38:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004e3a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004e3e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e40:	4d13      	ldr	r5, [pc, #76]	; (8004e90 <TIM_OC1_SetConfig+0x74>)
 8004e42:	42a8      	cmp	r0, r5
 8004e44:	d00f      	beq.n	8004e66 <TIM_OC1_SetConfig+0x4a>
 8004e46:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004e4a:	42a8      	cmp	r0, r5
 8004e4c:	d00b      	beq.n	8004e66 <TIM_OC1_SetConfig+0x4a>
 8004e4e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004e52:	42a8      	cmp	r0, r5
 8004e54:	d007      	beq.n	8004e66 <TIM_OC1_SetConfig+0x4a>
 8004e56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e5a:	42a8      	cmp	r0, r5
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC1_SetConfig+0x4a>
 8004e5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e62:	42a8      	cmp	r0, r5
 8004e64:	d10d      	bne.n	8004e82 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e66:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e68:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004e6c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e6e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e72:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e76:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e7a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e7e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e82:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004e84:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004e86:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004e88:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8004e8a:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004e8c:	6203      	str	r3, [r0, #32]
}
 8004e8e:	4770      	bx	lr
 8004e90:	40012c00 	.word	0x40012c00

08004e94 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e94:	6a03      	ldr	r3, [r0, #32]
 8004e96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e9a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9c:	6a03      	ldr	r3, [r0, #32]
{
 8004e9e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004eaa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004eae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eb0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004eb2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eb6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eba:	4d15      	ldr	r5, [pc, #84]	; (8004f10 <TIM_OC3_SetConfig+0x7c>)
 8004ebc:	42a8      	cmp	r0, r5
 8004ebe:	d010      	beq.n	8004ee2 <TIM_OC3_SetConfig+0x4e>
 8004ec0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004ec4:	42a8      	cmp	r0, r5
 8004ec6:	d00c      	beq.n	8004ee2 <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004ecc:	42a8      	cmp	r0, r5
 8004ece:	d00f      	beq.n	8004ef0 <TIM_OC3_SetConfig+0x5c>
 8004ed0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ed4:	42a8      	cmp	r0, r5
 8004ed6:	d00b      	beq.n	8004ef0 <TIM_OC3_SetConfig+0x5c>
 8004ed8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004edc:	42a8      	cmp	r0, r5
 8004ede:	d10f      	bne.n	8004f00 <TIM_OC3_SetConfig+0x6c>
 8004ee0:	e006      	b.n	8004ef0 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ee8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ef0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ef4:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ef8:	ea46 0c05 	orr.w	ip, r6, r5
 8004efc:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f00:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004f02:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004f04:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004f06:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8004f08:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004f0a:	6203      	str	r3, [r0, #32]
}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40012c00 	.word	0x40012c00

08004f14 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004f14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d122      	bne.n	8004f62 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f1c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1e:	4917      	ldr	r1, [pc, #92]	; (8004f7c <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	2202      	movs	r2, #2
 8004f22:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f26:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f28:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f30:	d019      	beq.n	8004f66 <HAL_TIM_Base_Start_IT+0x52>
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d016      	beq.n	8004f66 <HAL_TIM_Base_Start_IT+0x52>
 8004f38:	4a11      	ldr	r2, [pc, #68]	; (8004f80 <HAL_TIM_Base_Start_IT+0x6c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d013      	beq.n	8004f66 <HAL_TIM_Base_Start_IT+0x52>
 8004f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00f      	beq.n	8004f66 <HAL_TIM_Base_Start_IT+0x52>
 8004f46:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00b      	beq.n	8004f66 <HAL_TIM_Base_Start_IT+0x52>
 8004f4e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d007      	beq.n	8004f66 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004f5c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	4770      	bx	lr
    return HAL_ERROR;
 8004f62:	2001      	movs	r0, #1
 8004f64:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f66:	6899      	ldr	r1, [r3, #8]
 8004f68:	4a06      	ldr	r2, [pc, #24]	; (8004f84 <HAL_TIM_Base_Start_IT+0x70>)
 8004f6a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6c:	2a06      	cmp	r2, #6
 8004f6e:	d002      	beq.n	8004f76 <HAL_TIM_Base_Start_IT+0x62>
 8004f70:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004f74:	d1ef      	bne.n	8004f56 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8004f76:	2000      	movs	r0, #0
}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40000400 	.word	0x40000400
 8004f84:	00010007 	.word	0x00010007

08004f88 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f88:	6803      	ldr	r3, [r0, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8004f92:	6a1a      	ldr	r2, [r3, #32]
 8004f94:	f241 1111 	movw	r1, #4369	; 0x1111
 8004f98:	420a      	tst	r2, r1
 8004f9a:	d108      	bne.n	8004fae <HAL_TIM_Base_Stop_IT+0x26>
 8004f9c:	6a19      	ldr	r1, [r3, #32]
 8004f9e:	f240 4244 	movw	r2, #1092	; 0x444
 8004fa2:	4211      	tst	r1, r2
 8004fa4:	d103      	bne.n	8004fae <HAL_TIM_Base_Stop_IT+0x26>
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	f000 8081 	beq.w	80050c0 <HAL_TIM_PWM_Init+0x108>
{
 8004fbe:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d06d      	beq.n	80050aa <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fce:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd0:	493c      	ldr	r1, [pc, #240]	; (80050c4 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd8:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004fda:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fdc:	d051      	beq.n	8005082 <HAL_TIM_PWM_Init+0xca>
 8004fde:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004fe2:	d021      	beq.n	8005028 <HAL_TIM_PWM_Init+0x70>
 8004fe4:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004fe8:	428a      	cmp	r2, r1
 8004fea:	d01d      	beq.n	8005028 <HAL_TIM_PWM_Init+0x70>
 8004fec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ff0:	428a      	cmp	r2, r1
 8004ff2:	d019      	beq.n	8005028 <HAL_TIM_PWM_Init+0x70>
 8004ff4:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8004ff8:	428a      	cmp	r2, r1
 8004ffa:	d042      	beq.n	8005082 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffc:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005000:	428a      	cmp	r2, r1
 8005002:	d057      	beq.n	80050b4 <HAL_TIM_PWM_Init+0xfc>
 8005004:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005008:	428a      	cmp	r2, r1
 800500a:	d053      	beq.n	80050b4 <HAL_TIM_PWM_Init+0xfc>
 800500c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005010:	428a      	cmp	r2, r1
 8005012:	d04f      	beq.n	80050b4 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005014:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005016:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800501c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800501e:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005020:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005022:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005024:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005026:	e010      	b.n	800504a <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8005028:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005030:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005036:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005038:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800503e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005040:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005042:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005044:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005046:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005048:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800504a:	2301      	movs	r3, #1
 800504c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800504e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005056:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800505a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800505e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005062:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800506e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005072:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005076:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800507a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800507e:	2000      	movs	r0, #0
}
 8005080:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005082:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005084:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800508a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800508c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005090:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005092:	69a1      	ldr	r1, [r4, #24]
 8005094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005098:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800509a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800509c:	68e3      	ldr	r3, [r4, #12]
 800509e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050a0:	6863      	ldr	r3, [r4, #4]
 80050a2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80050a4:	6963      	ldr	r3, [r4, #20]
 80050a6:	6313      	str	r3, [r2, #48]	; 0x30
 80050a8:	e7cf      	b.n	800504a <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80050aa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80050ae:	f7fc ff1f 	bl	8001ef0 <HAL_TIM_PWM_MspInit>
 80050b2:	e78c      	b.n	8004fce <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050b6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050bc:	4303      	orrs	r3, r0
 80050be:	e7e9      	b.n	8005094 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 80050c0:	2001      	movs	r0, #1
}
 80050c2:	4770      	bx	lr
 80050c4:	40012c00 	.word	0x40012c00

080050c8 <HAL_TIM_PWM_Start>:
 80050c8:	2900      	cmp	r1, #0
 80050ca:	d14a      	bne.n	8005162 <HAL_TIM_PWM_Start+0x9a>
 80050cc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d160      	bne.n	8005196 <HAL_TIM_PWM_Start+0xce>
 80050d4:	2302      	movs	r3, #2
 80050d6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80050da:	6803      	ldr	r3, [r0, #0]
 80050dc:	2201      	movs	r2, #1
 80050de:	6a18      	ldr	r0, [r3, #32]
 80050e0:	f001 011f 	and.w	r1, r1, #31
 80050e4:	fa02 f101 	lsl.w	r1, r2, r1
 80050e8:	ea20 0001 	bic.w	r0, r0, r1
 80050ec:	6218      	str	r0, [r3, #32]
 80050ee:	6a18      	ldr	r0, [r3, #32]
 80050f0:	4a3b      	ldr	r2, [pc, #236]	; (80051e0 <HAL_TIM_PWM_Start+0x118>)
 80050f2:	4301      	orrs	r1, r0
 80050f4:	4293      	cmp	r3, r2
 80050f6:	6219      	str	r1, [r3, #32]
 80050f8:	d059      	beq.n	80051ae <HAL_TIM_PWM_Start+0xe6>
 80050fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00b      	beq.n	800511a <HAL_TIM_PWM_Start+0x52>
 8005102:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005106:	4293      	cmp	r3, r2
 8005108:	d007      	beq.n	800511a <HAL_TIM_PWM_Start+0x52>
 800510a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800510e:	4293      	cmp	r3, r2
 8005110:	d003      	beq.n	800511a <HAL_TIM_PWM_Start+0x52>
 8005112:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005116:	4293      	cmp	r3, r2
 8005118:	d103      	bne.n	8005122 <HAL_TIM_PWM_Start+0x5a>
 800511a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005126:	d00e      	beq.n	8005146 <HAL_TIM_PWM_Start+0x7e>
 8005128:	4a2e      	ldr	r2, [pc, #184]	; (80051e4 <HAL_TIM_PWM_Start+0x11c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00b      	beq.n	8005146 <HAL_TIM_PWM_Start+0x7e>
 800512e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005132:	4293      	cmp	r3, r2
 8005134:	d007      	beq.n	8005146 <HAL_TIM_PWM_Start+0x7e>
 8005136:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800513a:	4293      	cmp	r3, r2
 800513c:	d003      	beq.n	8005146 <HAL_TIM_PWM_Start+0x7e>
 800513e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005142:	4293      	cmp	r3, r2
 8005144:	d107      	bne.n	8005156 <HAL_TIM_PWM_Start+0x8e>
 8005146:	6899      	ldr	r1, [r3, #8]
 8005148:	4a27      	ldr	r2, [pc, #156]	; (80051e8 <HAL_TIM_PWM_Start+0x120>)
 800514a:	400a      	ands	r2, r1
 800514c:	2a06      	cmp	r2, #6
 800514e:	d024      	beq.n	800519a <HAL_TIM_PWM_Start+0xd2>
 8005150:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005154:	d021      	beq.n	800519a <HAL_TIM_PWM_Start+0xd2>
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	2000      	movs	r0, #0
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	4770      	bx	lr
 8005162:	2904      	cmp	r1, #4
 8005164:	d01b      	beq.n	800519e <HAL_TIM_PWM_Start+0xd6>
 8005166:	2908      	cmp	r1, #8
 8005168:	d026      	beq.n	80051b8 <HAL_TIM_PWM_Start+0xf0>
 800516a:	290c      	cmp	r1, #12
 800516c:	d00f      	beq.n	800518e <HAL_TIM_PWM_Start+0xc6>
 800516e:	2910      	cmp	r1, #16
 8005170:	d02e      	beq.n	80051d0 <HAL_TIM_PWM_Start+0x108>
 8005172:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10d      	bne.n	8005196 <HAL_TIM_PWM_Start+0xce>
 800517a:	2908      	cmp	r1, #8
 800517c:	d020      	beq.n	80051c0 <HAL_TIM_PWM_Start+0xf8>
 800517e:	290c      	cmp	r1, #12
 8005180:	d022      	beq.n	80051c8 <HAL_TIM_PWM_Start+0x100>
 8005182:	2910      	cmp	r1, #16
 8005184:	d028      	beq.n	80051d8 <HAL_TIM_PWM_Start+0x110>
 8005186:	2302      	movs	r3, #2
 8005188:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 800518c:	e7a5      	b.n	80050da <HAL_TIM_PWM_Start+0x12>
 800518e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005192:	2b01      	cmp	r3, #1
 8005194:	d018      	beq.n	80051c8 <HAL_TIM_PWM_Start+0x100>
 8005196:	2001      	movs	r0, #1
 8005198:	4770      	bx	lr
 800519a:	2000      	movs	r0, #0
 800519c:	4770      	bx	lr
 800519e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d1f7      	bne.n	8005196 <HAL_TIM_PWM_Start+0xce>
 80051a6:	2302      	movs	r3, #2
 80051a8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80051ac:	e795      	b.n	80050da <HAL_TIM_PWM_Start+0x12>
 80051ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44
 80051b6:	e7c6      	b.n	8005146 <HAL_TIM_PWM_Start+0x7e>
 80051b8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d1ea      	bne.n	8005196 <HAL_TIM_PWM_Start+0xce>
 80051c0:	2302      	movs	r3, #2
 80051c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80051c6:	e788      	b.n	80050da <HAL_TIM_PWM_Start+0x12>
 80051c8:	2302      	movs	r3, #2
 80051ca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80051ce:	e784      	b.n	80050da <HAL_TIM_PWM_Start+0x12>
 80051d0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d1de      	bne.n	8005196 <HAL_TIM_PWM_Start+0xce>
 80051d8:	2302      	movs	r3, #2
 80051da:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80051de:	e77c      	b.n	80050da <HAL_TIM_PWM_Start+0x12>
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40000400 	.word	0x40000400
 80051e8:	00010007 	.word	0x00010007

080051ec <HAL_TIM_OC_DelayElapsedCallback>:
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop

080051f0 <HAL_TIM_IC_CaptureCallback>:
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop

080051f4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop

080051f8 <HAL_TIM_TriggerCallback>:
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop

080051fc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051fc:	6803      	ldr	r3, [r0, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	0791      	lsls	r1, r2, #30
{
 8005202:	b510      	push	{r4, lr}
 8005204:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005206:	d502      	bpl.n	800520e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	0792      	lsls	r2, r2, #30
 800520c:	d468      	bmi.n	80052e0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	0752      	lsls	r2, r2, #29
 8005212:	d502      	bpl.n	800521a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	0750      	lsls	r0, r2, #29
 8005218:	d44f      	bmi.n	80052ba <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	0711      	lsls	r1, r2, #28
 800521e:	d502      	bpl.n	8005226 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	0712      	lsls	r2, r2, #28
 8005224:	d437      	bmi.n	8005296 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	06d0      	lsls	r0, r2, #27
 800522a:	d502      	bpl.n	8005232 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	06d1      	lsls	r1, r2, #27
 8005230:	d41e      	bmi.n	8005270 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	07d2      	lsls	r2, r2, #31
 8005236:	d502      	bpl.n	800523e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	07d0      	lsls	r0, r2, #31
 800523c:	d469      	bmi.n	8005312 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	0611      	lsls	r1, r2, #24
 8005242:	d502      	bpl.n	800524a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	0612      	lsls	r2, r2, #24
 8005248:	d46b      	bmi.n	8005322 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	05d0      	lsls	r0, r2, #23
 800524e:	d502      	bpl.n	8005256 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	0611      	lsls	r1, r2, #24
 8005254:	d46d      	bmi.n	8005332 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	0652      	lsls	r2, r2, #25
 800525a:	d502      	bpl.n	8005262 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	0650      	lsls	r0, r2, #25
 8005260:	d46f      	bmi.n	8005342 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	0691      	lsls	r1, r2, #26
 8005266:	d502      	bpl.n	800526e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	0692      	lsls	r2, r2, #26
 800526c:	d449      	bmi.n	8005302 <HAL_TIM_IRQHandler+0x106>
}
 800526e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005270:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005274:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005276:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005278:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005280:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005282:	d16f      	bne.n	8005364 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005284:	f7ff ffb2 	bl	80051ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005288:	4620      	mov	r0, r4
 800528a:	f7ff ffb3 	bl	80051f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005290:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	7722      	strb	r2, [r4, #28]
 8005294:	e7cd      	b.n	8005232 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005296:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800529a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800529c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800529e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80052a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a6:	d15a      	bne.n	800535e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a8:	f7ff ffa0 	bl	80051ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7ff ffa1 	bl	80051f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052b4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	7722      	strb	r2, [r4, #28]
 80052b8:	e7b5      	b.n	8005226 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ba:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052be:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052c0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052cc:	d144      	bne.n	8005358 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	f7ff ff8d 	bl	80051ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d2:	4620      	mov	r0, r4
 80052d4:	f7ff ff8e 	bl	80051f4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052da:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052dc:	7722      	strb	r2, [r4, #28]
 80052de:	e79c      	b.n	800521a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052e0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052e6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	0799      	lsls	r1, r3, #30
 80052ee:	d130      	bne.n	8005352 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f0:	f7ff ff7c 	bl	80051ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f4:	4620      	mov	r0, r4
 80052f6:	f7ff ff7d 	bl	80051f4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052fc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	7722      	strb	r2, [r4, #28]
 8005300:	e785      	b.n	800520e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005302:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005306:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005308:	611a      	str	r2, [r3, #16]
}
 800530a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800530e:	f000 ba91 	b.w	8005834 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005312:	f06f 0201 	mvn.w	r2, #1
 8005316:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005318:	4620      	mov	r0, r4
 800531a:	f7fc f815 	bl	8001348 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	e78d      	b.n	800523e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005322:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005326:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005328:	4620      	mov	r0, r4
 800532a:	f000 fa85 	bl	8005838 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	e78b      	b.n	800524a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005332:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005336:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fa7f 	bl	800583c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	e789      	b.n	8005256 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005342:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005346:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005348:	4620      	mov	r0, r4
 800534a:	f7ff ff55 	bl	80051f8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	e787      	b.n	8005262 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8005352:	f7ff ff4d 	bl	80051f0 <HAL_TIM_IC_CaptureCallback>
 8005356:	e7d0      	b.n	80052fa <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8005358:	f7ff ff4a 	bl	80051f0 <HAL_TIM_IC_CaptureCallback>
 800535c:	e7bc      	b.n	80052d8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800535e:	f7ff ff47 	bl	80051f0 <HAL_TIM_IC_CaptureCallback>
 8005362:	e7a6      	b.n	80052b2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005364:	f7ff ff44 	bl	80051f0 <HAL_TIM_IC_CaptureCallback>
 8005368:	e791      	b.n	800528e <HAL_TIM_IRQHandler+0x92>
 800536a:	bf00      	nop

0800536c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800536c:	6a03      	ldr	r3, [r0, #32]
 800536e:	f023 0310 	bic.w	r3, r3, #16
 8005372:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005374:	6a03      	ldr	r3, [r0, #32]
{
 8005376:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005378:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800537a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800537c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800537e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005382:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005386:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800538a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800538c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005390:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005394:	4d14      	ldr	r5, [pc, #80]	; (80053e8 <TIM_OC2_SetConfig+0x7c>)
 8005396:	42a8      	cmp	r0, r5
 8005398:	d010      	beq.n	80053bc <TIM_OC2_SetConfig+0x50>
 800539a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800539e:	42a8      	cmp	r0, r5
 80053a0:	d00c      	beq.n	80053bc <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80053a6:	42a8      	cmp	r0, r5
 80053a8:	d00f      	beq.n	80053ca <TIM_OC2_SetConfig+0x5e>
 80053aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053ae:	42a8      	cmp	r0, r5
 80053b0:	d00b      	beq.n	80053ca <TIM_OC2_SetConfig+0x5e>
 80053b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053b6:	42a8      	cmp	r0, r5
 80053b8:	d10f      	bne.n	80053da <TIM_OC2_SetConfig+0x6e>
 80053ba:	e006      	b.n	80053ca <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053bc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80053be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053c2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80053c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ca:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053ce:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d2:	ea46 0c05 	orr.w	ip, r6, r5
 80053d6:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80053da:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80053dc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80053de:	6182      	str	r2, [r0, #24]
}
 80053e0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80053e2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80053e4:	6203      	str	r3, [r0, #32]
}
 80053e6:	4770      	bx	lr
 80053e8:	40012c00 	.word	0x40012c00

080053ec <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80053ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	f000 812b 	beq.w	800564c <HAL_TIM_PWM_ConfigChannel+0x260>
 80053f6:	2301      	movs	r3, #1
{
 80053f8:	b570      	push	{r4, r5, r6, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80053fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005402:	2a14      	cmp	r2, #20
 8005404:	d816      	bhi.n	8005434 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005406:	e8df f012 	tbh	[pc, r2, lsl #1]
 800540a:	005d      	.short	0x005d
 800540c:	00150015 	.word	0x00150015
 8005410:	00720015 	.word	0x00720015
 8005414:	00150015 	.word	0x00150015
 8005418:	00880015 	.word	0x00880015
 800541c:	00150015 	.word	0x00150015
 8005420:	009d0015 	.word	0x009d0015
 8005424:	00150015 	.word	0x00150015
 8005428:	00e00015 	.word	0x00e00015
 800542c:	00150015 	.word	0x00150015
 8005430:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 8005434:	2300      	movs	r3, #0
 8005436:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800543a:	2001      	movs	r0, #1
}
 800543c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800543e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005440:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005442:	6a1a      	ldr	r2, [r3, #32]
 8005444:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005448:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800544a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800544c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 800544e:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005450:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005454:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005458:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800545c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800545e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005462:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	4e7a      	ldr	r6, [pc, #488]	; (8005650 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005468:	42b3      	cmp	r3, r6
 800546a:	d00f      	beq.n	800548c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800546c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005470:	42b3      	cmp	r3, r6
 8005472:	d00b      	beq.n	800548c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005474:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005478:	42b3      	cmp	r3, r6
 800547a:	d007      	beq.n	800548c <HAL_TIM_PWM_ConfigChannel+0xa0>
 800547c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005480:	42b3      	cmp	r3, r6
 8005482:	d003      	beq.n	800548c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005484:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005488:	42b3      	cmp	r3, r6
 800548a:	d104      	bne.n	8005496 <HAL_TIM_PWM_ConfigChannel+0xaa>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800548c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800548e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005492:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005496:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005498:	6559      	str	r1, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800549a:	6869      	ldr	r1, [r5, #4]
 800549c:	65d9      	str	r1, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800549e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054a2:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054a4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80054a8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054aa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80054b0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054b4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80054ba:	2300      	movs	r3, #0
 80054bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80054c0:	2000      	movs	r0, #0
}
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c4:	6800      	ldr	r0, [r0, #0]
 80054c6:	f7ff fca9 	bl	8004e1c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054ca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054cc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054ce:	6999      	ldr	r1, [r3, #24]
 80054d0:	f041 0108 	orr.w	r1, r1, #8
 80054d4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054d6:	6999      	ldr	r1, [r3, #24]
 80054d8:	f021 0104 	bic.w	r1, r1, #4
 80054dc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	4302      	orrs	r2, r0
 80054e2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80054e4:	2300      	movs	r3, #0
 80054e6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2000      	movs	r0, #0
}
 80054ec:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ee:	6800      	ldr	r0, [r0, #0]
 80054f0:	f7ff ff3c 	bl	800536c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054f6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054f8:	6999      	ldr	r1, [r3, #24]
 80054fa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80054fe:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005500:	6999      	ldr	r1, [r3, #24]
 8005502:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005506:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800550e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005510:	2300      	movs	r3, #0
 8005512:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005516:	2000      	movs	r0, #0
}
 8005518:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	f7ff fcba 	bl	8004e94 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005520:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005522:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005524:	69d9      	ldr	r1, [r3, #28]
 8005526:	f041 0108 	orr.w	r1, r1, #8
 800552a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800552c:	69d9      	ldr	r1, [r3, #28]
 800552e:	f021 0104 	bic.w	r1, r1, #4
 8005532:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	4302      	orrs	r2, r0
 8005538:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800553a:	2300      	movs	r3, #0
 800553c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005540:	2000      	movs	r0, #0
}
 8005542:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005544:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005546:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800554e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005550:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005552:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005554:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005556:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800555a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800555e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005562:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005564:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005568:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800556c:	4e38      	ldr	r6, [pc, #224]	; (8005650 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800556e:	42b3      	cmp	r3, r6
 8005570:	d00f      	beq.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8005572:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005576:	42b3      	cmp	r3, r6
 8005578:	d00b      	beq.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800557a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800557e:	42b3      	cmp	r3, r6
 8005580:	d007      	beq.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8005582:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005586:	42b3      	cmp	r3, r6
 8005588:	d003      	beq.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800558a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800558e:	42b3      	cmp	r3, r6
 8005590:	d104      	bne.n	800559c <HAL_TIM_PWM_ConfigChannel+0x1b0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005592:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005594:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005598:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 800559c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800559e:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80055a0:	6869      	ldr	r1, [r5, #4]
 80055a2:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80055a4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055a6:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055a8:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055aa:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80055ae:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055b0:	69d9      	ldr	r1, [r3, #28]
 80055b2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80055b6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055b8:	69da      	ldr	r2, [r3, #28]
 80055ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80055be:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80055c0:	2300      	movs	r3, #0
 80055c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2000      	movs	r0, #0
}
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055ca:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80055cc:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80055d4:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80055d6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80055d8:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80055da:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055dc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80055e0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80055e4:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055e6:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80055e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055ec:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f0:	4e17      	ldr	r6, [pc, #92]	; (8005650 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80055f2:	42b3      	cmp	r3, r6
 80055f4:	d00f      	beq.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x22a>
 80055f6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80055fa:	42b3      	cmp	r3, r6
 80055fc:	d00b      	beq.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x22a>
 80055fe:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005602:	42b3      	cmp	r3, r6
 8005604:	d007      	beq.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x22a>
 8005606:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800560a:	42b3      	cmp	r3, r6
 800560c:	d003      	beq.n	8005616 <HAL_TIM_PWM_ConfigChannel+0x22a>
 800560e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005612:	42b3      	cmp	r3, r6
 8005614:	d104      	bne.n	8005620 <HAL_TIM_PWM_ConfigChannel+0x234>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005616:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005618:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800561c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005620:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005622:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005624:	6869      	ldr	r1, [r5, #4]
 8005626:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8005628:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800562a:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800562c:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800562e:	f041 0108 	orr.w	r1, r1, #8
 8005632:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005636:	f021 0104 	bic.w	r1, r1, #4
 800563a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800563c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800563e:	432a      	orrs	r2, r5
 8005640:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8005642:	2300      	movs	r3, #0
 8005644:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005648:	2000      	movs	r0, #0
}
 800564a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800564c:	2002      	movs	r0, #2
}
 800564e:	4770      	bx	lr
 8005650:	40012c00 	.word	0x40012c00

08005654 <HAL_TIMEx_PWMN_Start>:
 8005654:	2900      	cmp	r1, #0
 8005656:	d13a      	bne.n	80056ce <HAL_TIMEx_PWMN_Start+0x7a>
 8005658:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800565c:	2b01      	cmp	r3, #1
 800565e:	d142      	bne.n	80056e6 <HAL_TIMEx_PWMN_Start+0x92>
 8005660:	2302      	movs	r3, #2
 8005662:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8005666:	6803      	ldr	r3, [r0, #0]
 8005668:	2204      	movs	r2, #4
 800566a:	6a18      	ldr	r0, [r3, #32]
 800566c:	f001 011f 	and.w	r1, r1, #31
 8005670:	fa02 f101 	lsl.w	r1, r2, r1
 8005674:	ea20 0001 	bic.w	r0, r0, r1
 8005678:	6218      	str	r0, [r3, #32]
 800567a:	6a1a      	ldr	r2, [r3, #32]
 800567c:	4824      	ldr	r0, [pc, #144]	; (8005710 <HAL_TIMEx_PWMN_Start+0xbc>)
 800567e:	4311      	orrs	r1, r2
 8005680:	6219      	str	r1, [r3, #32]
 8005682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005684:	4283      	cmp	r3, r0
 8005686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800568a:	645a      	str	r2, [r3, #68]	; 0x44
 800568c:	d011      	beq.n	80056b2 <HAL_TIMEx_PWMN_Start+0x5e>
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005692:	d00e      	beq.n	80056b2 <HAL_TIMEx_PWMN_Start+0x5e>
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <HAL_TIMEx_PWMN_Start+0xc0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00b      	beq.n	80056b2 <HAL_TIMEx_PWMN_Start+0x5e>
 800569a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800569e:	4293      	cmp	r3, r2
 80056a0:	d007      	beq.n	80056b2 <HAL_TIMEx_PWMN_Start+0x5e>
 80056a2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d003      	beq.n	80056b2 <HAL_TIMEx_PWMN_Start+0x5e>
 80056aa:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d107      	bne.n	80056c2 <HAL_TIMEx_PWMN_Start+0x6e>
 80056b2:	6899      	ldr	r1, [r3, #8]
 80056b4:	4a18      	ldr	r2, [pc, #96]	; (8005718 <HAL_TIMEx_PWMN_Start+0xc4>)
 80056b6:	400a      	ands	r2, r1
 80056b8:	2a06      	cmp	r2, #6
 80056ba:	d016      	beq.n	80056ea <HAL_TIMEx_PWMN_Start+0x96>
 80056bc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80056c0:	d013      	beq.n	80056ea <HAL_TIMEx_PWMN_Start+0x96>
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	f042 0201 	orr.w	r2, r2, #1
 80056c8:	2000      	movs	r0, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	4770      	bx	lr
 80056ce:	2904      	cmp	r1, #4
 80056d0:	d00d      	beq.n	80056ee <HAL_TIMEx_PWMN_Start+0x9a>
 80056d2:	2908      	cmp	r1, #8
 80056d4:	d013      	beq.n	80056fe <HAL_TIMEx_PWMN_Start+0xaa>
 80056d6:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d103      	bne.n	80056e6 <HAL_TIMEx_PWMN_Start+0x92>
 80056de:	2302      	movs	r3, #2
 80056e0:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 80056e4:	e7bf      	b.n	8005666 <HAL_TIMEx_PWMN_Start+0x12>
 80056e6:	2001      	movs	r0, #1
 80056e8:	4770      	bx	lr
 80056ea:	2000      	movs	r0, #0
 80056ec:	4770      	bx	lr
 80056ee:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d1f7      	bne.n	80056e6 <HAL_TIMEx_PWMN_Start+0x92>
 80056f6:	2302      	movs	r3, #2
 80056f8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80056fc:	e7b3      	b.n	8005666 <HAL_TIMEx_PWMN_Start+0x12>
 80056fe:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8005702:	2b01      	cmp	r3, #1
 8005704:	d1ef      	bne.n	80056e6 <HAL_TIMEx_PWMN_Start+0x92>
 8005706:	2302      	movs	r3, #2
 8005708:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 800570c:	e7ab      	b.n	8005666 <HAL_TIMEx_PWMN_Start+0x12>
 800570e:	bf00      	nop
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	00010007 	.word	0x00010007

0800571c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d03a      	beq.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 8005724:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005726:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005728:	4d1d      	ldr	r5, [pc, #116]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 800572a:	2302      	movs	r3, #2
 800572c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005730:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005732:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005734:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005736:	d026      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8005738:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800573c:	42aa      	cmp	r2, r5
 800573e:	d022      	beq.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005740:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005746:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005748:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800574c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800574e:	d00c      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8005752:	429a      	cmp	r2, r3
 8005754:	d009      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800575a:	429a      	cmp	r2, r3
 800575c:	d005      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800575e:	42aa      	cmp	r2, r5
 8005760:	d003      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005762:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8005766:	429a      	cmp	r2, r3
 8005768:	d104      	bne.n	8005774 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005770:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005772:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005774:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005776:	2201      	movs	r2, #1
 8005778:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800577c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005780:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8005782:	4618      	mov	r0, r3
}
 8005784:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005786:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005788:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800578c:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800578e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005794:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005796:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005798:	e7e7      	b.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 800579a:	2002      	movs	r0, #2
}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40012c00 	.word	0x40012c00
 80057a4:	40000400 	.word	0x40000400

080057a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d03d      	beq.n	800582c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 80057b0:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057b2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80057b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ba:	4602      	mov	r2, r0
 80057bc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057be:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057c0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057c6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057cc:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057ce:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057d4:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057dc:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057de:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057e4:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057e6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057e8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057ec:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057f2:	4c0f      	ldr	r4, [pc, #60]	; (8005830 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80057f4:	42a0      	cmp	r0, r4
 80057f6:	d00b      	beq.n	8005810 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80057f8:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80057fc:	42a0      	cmp	r0, r4
 80057fe:	d007      	beq.n	8005810 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005800:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005802:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005804:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005808:	4608      	mov	r0, r1
}
 800580a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800580e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005810:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005812:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005816:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800581a:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800581c:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800581e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005822:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005824:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005828:	430b      	orrs	r3, r1
 800582a:	e7e9      	b.n	8005800 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800582c:	2002      	movs	r0, #2
}
 800582e:	4770      	bx	lr
 8005830:	40012c00 	.word	0x40012c00

08005834 <HAL_TIMEx_CommutCallback>:
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop

08005838 <HAL_TIMEx_BreakCallback>:
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop

0800583c <HAL_TIMEx_Break2Callback>:
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop

08005840 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005840:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005842:	2b20      	cmp	r3, #32
 8005844:	d159      	bne.n	80058fa <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 8005846:	2900      	cmp	r1, #0
 8005848:	d055      	beq.n	80058f6 <HAL_UART_Receive_IT+0xb6>
 800584a:	2a00      	cmp	r2, #0
 800584c:	d053      	beq.n	80058f6 <HAL_UART_Receive_IT+0xb6>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800584e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005852:	2b01      	cmp	r3, #1
 8005854:	d051      	beq.n	80058fa <HAL_UART_Receive_IT+0xba>
{
 8005856:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8005858:	2401      	movs	r4, #1
 800585a:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800585e:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	2400      	movs	r4, #0
 8005862:	6604      	str	r4, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005864:	685c      	ldr	r4, [r3, #4]
 8005866:	0224      	lsls	r4, r4, #8
 8005868:	d50e      	bpl.n	8005888 <HAL_UART_Receive_IT+0x48>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	e853 4f00 	ldrex	r4, [r3]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800586e:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	e843 4500 	strex	r5, r4, [r3]
 8005876:	b13d      	cbz	r5, 8005888 <HAL_UART_Receive_IT+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	e853 cf00 	ldrex	ip, [r3]
 800587c:	f04c 6c80 	orr.w	ip, ip, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	e843 c400 	strex	r4, ip, [r3]
 8005884:	2c00      	cmp	r4, #0
 8005886:	d1f7      	bne.n	8005878 <HAL_UART_Receive_IT+0x38>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005888:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800588a:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 800588c:	2500      	movs	r5, #0
  UART_MASK_COMPUTATION(huart);
 800588e:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8005892:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8005896:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 800589a:	6645      	str	r5, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 800589c:	d02f      	beq.n	80058fe <HAL_UART_Receive_IT+0xbe>
 800589e:	2c00      	cmp	r4, #0
 80058a0:	d13c      	bne.n	800591c <HAL_UART_Receive_IT+0xdc>
 80058a2:	6902      	ldr	r2, [r0, #16]
 80058a4:	2a00      	cmp	r2, #0
 80058a6:	d13c      	bne.n	8005922 <HAL_UART_Receive_IT+0xe2>
 80058a8:	22ff      	movs	r2, #255	; 0xff
 80058aa:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ae:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058b0:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058b6:	67c2      	str	r2, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	f103 0208 	add.w	r2, r3, #8
 80058bc:	e852 2f00 	ldrex	r2, [r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c0:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	f103 0408 	add.w	r4, r3, #8
 80058c8:	e844 2100 	strex	r1, r2, [r4]
 80058cc:	2900      	cmp	r1, #0
 80058ce:	d1f3      	bne.n	80058b8 <HAL_UART_Receive_IT+0x78>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d0:	6882      	ldr	r2, [r0, #8]
 80058d2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80058d6:	d01a      	beq.n	800590e <HAL_UART_Receive_IT+0xce>
  {
    huart->RxISR = UART_RxISR_16BIT;
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80058d8:	4a14      	ldr	r2, [pc, #80]	; (800592c <HAL_UART_Receive_IT+0xec>)
 80058da:	6642      	str	r2, [r0, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80058dc:	2100      	movs	r1, #0
 80058de:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	e853 2f00 	ldrex	r2, [r3]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80058e6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ea:	e843 2000 	strex	r0, r2, [r3]
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d1f7      	bne.n	80058e2 <HAL_UART_Receive_IT+0xa2>
}
 80058f2:	bc30      	pop	{r4, r5}
 80058f4:	4770      	bx	lr
      return HAL_ERROR;
 80058f6:	2001      	movs	r0, #1
 80058f8:	4770      	bx	lr
    return HAL_BUSY;
 80058fa:	2002      	movs	r0, #2
}
 80058fc:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80058fe:	6902      	ldr	r2, [r0, #16]
 8005900:	2a00      	cmp	r2, #0
 8005902:	d1d1      	bne.n	80058a8 <HAL_UART_Receive_IT+0x68>
 8005904:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005908:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 800590c:	e7cf      	b.n	80058ae <HAL_UART_Receive_IT+0x6e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590e:	6904      	ldr	r4, [r0, #16]
    huart->RxISR = UART_RxISR_16BIT;
 8005910:	4a06      	ldr	r2, [pc, #24]	; (800592c <HAL_UART_Receive_IT+0xec>)
 8005912:	4907      	ldr	r1, [pc, #28]	; (8005930 <HAL_UART_Receive_IT+0xf0>)
 8005914:	2c00      	cmp	r4, #0
 8005916:	bf08      	it	eq
 8005918:	460a      	moveq	r2, r1
 800591a:	e7de      	b.n	80058da <HAL_UART_Receive_IT+0x9a>
  UART_MASK_COMPUTATION(huart);
 800591c:	f8a0 505c 	strh.w	r5, [r0, #92]	; 0x5c
 8005920:	e7c5      	b.n	80058ae <HAL_UART_Receive_IT+0x6e>
 8005922:	227f      	movs	r2, #127	; 0x7f
 8005924:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8005928:	e7c1      	b.n	80058ae <HAL_UART_Receive_IT+0x6e>
 800592a:	bf00      	nop
 800592c:	08005ea9 	.word	0x08005ea9
 8005930:	08005e69 	.word	0x08005e69

08005934 <HAL_UART_Transmit_DMA>:
{
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8005936:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8005938:	2e20      	cmp	r6, #32
 800593a:	d140      	bne.n	80059be <HAL_UART_Transmit_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 800593c:	2900      	cmp	r1, #0
 800593e:	d03c      	beq.n	80059ba <HAL_UART_Transmit_DMA+0x86>
 8005940:	2a00      	cmp	r2, #0
 8005942:	d03a      	beq.n	80059ba <HAL_UART_Transmit_DMA+0x86>
 8005944:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8005946:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 800594a:	2801      	cmp	r0, #1
 800594c:	d037      	beq.n	80059be <HAL_UART_Transmit_DMA+0x8a>
    if (huart->hdmatx != NULL)
 800594e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8005950:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005954:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 8005956:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005958:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595a:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 800595e:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005960:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8005964:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005968:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800596a:	b190      	cbz	r0, 8005992 <HAL_UART_Transmit_DMA+0x5e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800596c:	f8df c064 	ldr.w	ip, [pc, #100]	; 80059d4 <HAL_UART_Transmit_DMA+0xa0>
      huart->hdmatx->XferAbortCallback = NULL;
 8005970:	6347      	str	r7, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005972:	4613      	mov	r3, r2
 8005974:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005976:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800597a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80059d8 <HAL_UART_Transmit_DMA+0xa4>
 800597e:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005982:	f8df c058 	ldr.w	ip, [pc, #88]	; 80059dc <HAL_UART_Transmit_DMA+0xa8>
 8005986:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800598a:	3228      	adds	r2, #40	; 0x28
 800598c:	f7fe faa0 	bl	8003ed0 <HAL_DMA_Start_IT>
 8005990:	b9b8      	cbnz	r0, 80059c2 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8005996:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005998:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 800599a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	f102 0308 	add.w	r3, r2, #8
 80059a2:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	f102 0008 	add.w	r0, r2, #8
 80059ae:	e840 3100 	strex	r1, r3, [r0]
 80059b2:	2900      	cmp	r1, #0
 80059b4:	d1f3      	bne.n	800599e <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80059b6:	2000      	movs	r0, #0
}
 80059b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80059ba:	2001      	movs	r0, #1
}
 80059bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80059be:	2002      	movs	r0, #2
}
 80059c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059c2:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 80059c4:	f884 7074 	strb.w	r7, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059c8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_ERROR;
 80059cc:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 80059ce:	67a6      	str	r6, [r4, #120]	; 0x78
}
 80059d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	080059e5 	.word	0x080059e5
 80059d8:	08005a2d 	.word	0x08005a2d
 80059dc:	08005a3d 	.word	0x08005a3d

080059e0 <HAL_UART_TxCpltCallback>:
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop

080059e4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059e4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80059e6:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059e8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d018      	beq.n	8005a20 <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	6802      	ldr	r2, [r0, #0]
 80059f2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	f102 0308 	add.w	r3, r2, #8
 80059fa:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80059fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	f102 0008 	add.w	r0, r2, #8
 8005a06:	e840 3100 	strex	r1, r3, [r0]
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	d1f3      	bne.n	80059f6 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	e842 3100 	strex	r1, r3, [r2]
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	d1f7      	bne.n	8005a0e <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a1e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005a20:	f7ff ffde 	bl	80059e0 <HAL_UART_TxCpltCallback>
}
 8005a24:	bd08      	pop	{r3, pc}
 8005a26:	bf00      	nop

08005a28 <HAL_UART_TxHalfCpltCallback>:
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop

08005a2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a2c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005a2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005a30:	f7ff fffa 	bl	8005a28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a34:	bd08      	pop	{r3, pc}
 8005a36:	bf00      	nop

08005a38 <HAL_UART_ErrorCallback>:
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop

08005a3c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a3c:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a3e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005a40:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8005a42:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005a44:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	0612      	lsls	r2, r2, #24
 8005a4a:	d501      	bpl.n	8005a50 <UART_DMAError+0x14>
 8005a4c:	2921      	cmp	r1, #33	; 0x21
 8005a4e:	d00d      	beq.n	8005a6c <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	0652      	lsls	r2, r2, #25
 8005a54:	d501      	bpl.n	8005a5a <UART_DMAError+0x1e>
 8005a56:	2c22      	cmp	r4, #34	; 0x22
 8005a58:	d016      	beq.n	8005a88 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a5a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005a5e:	f043 0310 	orr.w	r3, r3, #16
 8005a62:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a66:	f7ff ffe7 	bl	8005a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a6a:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	e843 2100 	strex	r1, r2, [r3]
 8005a7e:	2900      	cmp	r1, #0
 8005a80:	d1f7      	bne.n	8005a72 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8005a82:	2220      	movs	r2, #32
 8005a84:	6782      	str	r2, [r0, #120]	; 0x78
}
 8005a86:	e7e3      	b.n	8005a50 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	e843 2100 	strex	r1, r2, [r3]
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	d1f7      	bne.n	8005a8e <UART_DMAError+0x52>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9e:	f103 0208 	add.w	r2, r3, #8
 8005aa2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	f103 0408 	add.w	r4, r3, #8
 8005aae:	e844 2100 	strex	r1, r2, [r4]
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	d1f3      	bne.n	8005a9e <UART_DMAError+0x62>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005ab8:	2a01      	cmp	r2, #1
 8005aba:	d005      	beq.n	8005ac8 <UART_DMAError+0x8c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005abc:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005abe:	2220      	movs	r2, #32
 8005ac0:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->RxISR = NULL;
 8005ac2:	6643      	str	r3, [r0, #100]	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac4:	6603      	str	r3, [r0, #96]	; 0x60
}
 8005ac6:	e7c8      	b.n	8005a5a <UART_DMAError+0x1e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	e843 2100 	strex	r1, r2, [r3]
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	d0f1      	beq.n	8005abc <UART_DMAError+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	e853 2f00 	ldrex	r2, [r3]
 8005adc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	e843 2100 	strex	r1, r2, [r3]
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	d1ef      	bne.n	8005ac8 <UART_DMAError+0x8c>
 8005ae8:	e7e8      	b.n	8005abc <UART_DMAError+0x80>
 8005aea:	bf00      	nop

08005aec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aec:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aee:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005af6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005afa:	f7ff ff9d 	bl	8005a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afe:	bd08      	pop	{r3, pc}

08005b00 <HAL_UARTEx_RxEventCallback>:
}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop

08005b04 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b04:	6803      	ldr	r3, [r0, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b08:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b0a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8005b0e:	ea12 0f0c 	tst.w	r2, ip
{
 8005b12:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b14:	689d      	ldr	r5, [r3, #8]
{
 8005b16:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8005b18:	d17c      	bne.n	8005c14 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b1a:	0696      	lsls	r6, r2, #26
 8005b1c:	d502      	bpl.n	8005b24 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b1e:	068e      	lsls	r6, r1, #26
 8005b20:	f100 8110 	bmi.w	8005d44 <HAL_UART_IRQHandler+0x240>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b24:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005b26:	2801      	cmp	r0, #1
 8005b28:	d024      	beq.n	8005b74 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b2a:	02d6      	lsls	r6, r2, #11
 8005b2c:	d502      	bpl.n	8005b34 <HAL_UART_IRQHandler+0x30>
 8005b2e:	0268      	lsls	r0, r5, #9
 8005b30:	f100 810d 	bmi.w	8005d4e <HAL_UART_IRQHandler+0x24a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b34:	0616      	lsls	r6, r2, #24
 8005b36:	d414      	bmi.n	8005b62 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b38:	0650      	lsls	r0, r2, #25
 8005b3a:	d501      	bpl.n	8005b40 <HAL_UART_IRQHandler+0x3c>
 8005b3c:	064a      	lsls	r2, r1, #25
 8005b3e:	d400      	bmi.n	8005b42 <HAL_UART_IRQHandler+0x3e>
}
 8005b40:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4a:	e843 2100 	strex	r1, r2, [r3]
 8005b4e:	2900      	cmp	r1, #0
 8005b50:	d1f7      	bne.n	8005b42 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b52:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b54:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b56:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8005b58:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f7ff ff40 	bl	80059e0 <HAL_UART_TxCpltCallback>
}
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b62:	060d      	lsls	r5, r1, #24
 8005b64:	d5e8      	bpl.n	8005b38 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8005b66:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0e9      	beq.n	8005b40 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8005b6c:	4620      	mov	r0, r4
}
 8005b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005b72:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b74:	06d6      	lsls	r6, r2, #27
 8005b76:	d5d8      	bpl.n	8005b2a <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b78:	06c8      	lsls	r0, r1, #27
 8005b7a:	d5d6      	bpl.n	8005b2a <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	0652      	lsls	r2, r2, #25
 8005b84:	f140 8100 	bpl.w	8005d88 <HAL_UART_IRQHandler+0x284>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b88:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005b8a:	6802      	ldr	r2, [r0, #0]
 8005b8c:	6852      	ldr	r2, [r2, #4]
 8005b8e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	d0d5      	beq.n	8005b40 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b94:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005b98:	4291      	cmp	r1, r2
 8005b9a:	d9d1      	bls.n	8005b40 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8005b9c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ba0:	6982      	ldr	r2, [r0, #24]
 8005ba2:	2a20      	cmp	r2, #32
 8005ba4:	d02e      	beq.n	8005c04 <HAL_UART_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005baa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	e843 2100 	strex	r1, r2, [r3]
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	d1f7      	bne.n	8005ba6 <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	f103 0208 	add.w	r2, r3, #8
 8005bba:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	f103 0508 	add.w	r5, r3, #8
 8005bc6:	e845 2100 	strex	r1, r2, [r5]
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	d1f3      	bne.n	8005bb6 <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	f103 0208 	add.w	r2, r3, #8
 8005bd2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bda:	f103 0508 	add.w	r5, r3, #8
 8005bde:	e845 2100 	strex	r1, r2, [r5]
 8005be2:	2900      	cmp	r1, #0
 8005be4:	d1f3      	bne.n	8005bce <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 8005be6:	2220      	movs	r2, #32
 8005be8:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	e843 2100 	strex	r1, r2, [r3]
 8005bf8:	2900      	cmp	r1, #0
 8005bfa:	d1f7      	bne.n	8005bec <HAL_UART_IRQHandler+0xe8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bfc:	f7fe f9aa 	bl	8003f54 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c00:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005c04:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005c08:	1ac9      	subs	r1, r1, r3
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	b289      	uxth	r1, r1
 8005c0e:	f7ff ff77 	bl	8005b00 <HAL_UARTEx_RxEventCallback>
}
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c14:	4879      	ldr	r0, [pc, #484]	; (8005dfc <HAL_UART_IRQHandler+0x2f8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c16:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c1a:	4008      	ands	r0, r1
 8005c1c:	4330      	orrs	r0, r6
 8005c1e:	d081      	beq.n	8005b24 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c20:	07d5      	lsls	r5, r2, #31
 8005c22:	d509      	bpl.n	8005c38 <HAL_UART_IRQHandler+0x134>
 8005c24:	05c8      	lsls	r0, r1, #23
 8005c26:	d507      	bpl.n	8005c38 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c28:	2001      	movs	r0, #1
 8005c2a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c2c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005c30:	f040 0001 	orr.w	r0, r0, #1
 8005c34:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c38:	0795      	lsls	r5, r2, #30
 8005c3a:	d57e      	bpl.n	8005d3a <HAL_UART_IRQHandler+0x236>
 8005c3c:	b18e      	cbz	r6, 8005c62 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c3e:	2002      	movs	r0, #2
 8005c40:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c42:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005c46:	f040 0004 	orr.w	r0, r0, #4
 8005c4a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c4e:	0750      	lsls	r0, r2, #29
 8005c50:	d507      	bpl.n	8005c62 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c52:	2004      	movs	r0, #4
 8005c54:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c56:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005c5a:	f040 0002 	orr.w	r0, r0, #2
 8005c5e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c62:	0710      	lsls	r0, r2, #28
 8005c64:	d50b      	bpl.n	8005c7e <HAL_UART_IRQHandler+0x17a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c66:	f001 0020 	and.w	r0, r1, #32
 8005c6a:	4330      	orrs	r0, r6
 8005c6c:	d007      	beq.n	8005c7e <HAL_UART_IRQHandler+0x17a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c6e:	2008      	movs	r0, #8
 8005c70:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c72:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005c76:	f040 0008 	orr.w	r0, r0, #8
 8005c7a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c7e:	0516      	lsls	r6, r2, #20
 8005c80:	d50a      	bpl.n	8005c98 <HAL_UART_IRQHandler+0x194>
 8005c82:	014d      	lsls	r5, r1, #5
 8005c84:	d508      	bpl.n	8005c98 <HAL_UART_IRQHandler+0x194>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c8a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c8c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005c90:	f040 0020 	orr.w	r0, r0, #32
 8005c94:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c98:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f43f af4f 	beq.w	8005b40 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ca2:	0690      	lsls	r0, r2, #26
 8005ca4:	d506      	bpl.n	8005cb4 <HAL_UART_IRQHandler+0x1b0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ca6:	0689      	lsls	r1, r1, #26
 8005ca8:	d504      	bpl.n	8005cb4 <HAL_UART_IRQHandler+0x1b0>
        if (huart->RxISR != NULL)
 8005caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cac:	b112      	cbz	r2, 8005cb4 <HAL_UART_IRQHandler+0x1b0>
          huart->RxISR(huart);
 8005cae:	4620      	mov	r0, r4
 8005cb0:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cb2:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005cb4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cb8:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005cba:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cbe:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005cc2:	4315      	orrs	r5, r2
 8005cc4:	f000 8094 	beq.w	8005df0 <HAL_UART_IRQHandler+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ccc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	e843 2100 	strex	r1, r2, [r3]
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	d1f7      	bne.n	8005cc8 <HAL_UART_IRQHandler+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	f103 0208 	add.w	r2, r3, #8
 8005cdc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	f103 0008 	add.w	r0, r3, #8
 8005ce8:	e840 2100 	strex	r1, r2, [r0]
 8005cec:	2900      	cmp	r1, #0
 8005cee:	d1f3      	bne.n	8005cd8 <HAL_UART_IRQHandler+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005cf2:	2a01      	cmp	r2, #1
 8005cf4:	d033      	beq.n	8005d5e <HAL_UART_IRQHandler+0x25a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	2120      	movs	r1, #32
 8005cfa:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfe:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8005d00:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d02:	064a      	lsls	r2, r1, #25
 8005d04:	d53c      	bpl.n	8005d80 <HAL_UART_IRQHandler+0x27c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	f103 0208 	add.w	r2, r3, #8
 8005d0a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d12:	f103 0008 	add.w	r0, r3, #8
 8005d16:	e840 2100 	strex	r1, r2, [r0]
 8005d1a:	2900      	cmp	r1, #0
 8005d1c:	d1f3      	bne.n	8005d06 <HAL_UART_IRQHandler+0x202>
          if (huart->hdmarx != NULL)
 8005d1e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005d20:	b370      	cbz	r0, 8005d80 <HAL_UART_IRQHandler+0x27c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d22:	4b37      	ldr	r3, [pc, #220]	; (8005e00 <HAL_UART_IRQHandler+0x2fc>)
 8005d24:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d26:	f7fe f937 	bl	8003f98 <HAL_DMA_Abort_IT>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	f43f af08 	beq.w	8005b40 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d30:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8005d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005d38:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d3a:	0755      	lsls	r5, r2, #29
 8005d3c:	d591      	bpl.n	8005c62 <HAL_UART_IRQHandler+0x15e>
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	d187      	bne.n	8005c52 <HAL_UART_IRQHandler+0x14e>
 8005d42:	e78e      	b.n	8005c62 <HAL_UART_IRQHandler+0x15e>
      if (huart->RxISR != NULL)
 8005d44:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f47f af11 	bne.w	8005b6e <HAL_UART_IRQHandler+0x6a>
 8005d4c:	e6f8      	b.n	8005b40 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8005d52:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005d5a:	f000 bb25 	b.w	80063a8 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d62:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	e843 2100 	strex	r1, r2, [r3]
 8005d6a:	2900      	cmp	r1, #0
 8005d6c:	d0c3      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	e853 2f00 	ldrex	r2, [r3]
 8005d72:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d76:	e843 2100 	strex	r1, r2, [r3]
 8005d7a:	2900      	cmp	r1, #0
 8005d7c:	d1ef      	bne.n	8005d5e <HAL_UART_IRQHandler+0x25a>
 8005d7e:	e7ba      	b.n	8005cf6 <HAL_UART_IRQHandler+0x1f2>
            HAL_UART_ErrorCallback(huart);
 8005d80:	4620      	mov	r0, r4
 8005d82:	f7ff fe59 	bl	8005a38 <HAL_UART_ErrorCallback>
}
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d88:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8005d8c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8005d90:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d92:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	f43f aed3 	beq.w	8005b40 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d9a:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8005d9e:	1a51      	subs	r1, r2, r1
 8005da0:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005da2:	2900      	cmp	r1, #0
 8005da4:	f43f aecc 	beq.w	8005b40 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	e843 2000 	strex	r0, r2, [r3]
 8005db4:	2800      	cmp	r0, #0
 8005db6:	d1f7      	bne.n	8005da8 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	f103 0208 	add.w	r2, r3, #8
 8005dbc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	f103 0508 	add.w	r5, r3, #8
 8005dc8:	e845 2000 	strex	r0, r2, [r5]
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d1f3      	bne.n	8005db8 <HAL_UART_IRQHandler+0x2b4>
        huart->RxState = HAL_UART_STATE_READY;
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8005dd4:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd6:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ddc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	e843 2000 	strex	r0, r2, [r3]
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d1f7      	bne.n	8005dd8 <HAL_UART_IRQHandler+0x2d4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de8:	4620      	mov	r0, r4
 8005dea:	f7ff fe89 	bl	8005b00 <HAL_UARTEx_RxEventCallback>
}
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005df0:	4620      	mov	r0, r4
 8005df2:	f7ff fe21 	bl	8005a38 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	04000120 	.word	0x04000120
 8005e00:	08005aed 	.word	0x08005aed

08005e04 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8005e04:	b508      	push	{r3, lr}
 8005e06:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	e843 2100 	strex	r1, r2, [r3]
 8005e14:	2900      	cmp	r1, #0
 8005e16:	d1f7      	bne.n	8005e08 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	f103 0208 	add.w	r2, r3, #8
 8005e1c:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e20:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e24:	f103 0c08 	add.w	ip, r3, #8
 8005e28:	e84c 2100 	strex	r1, r2, [ip]
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	d1f3      	bne.n	8005e18 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e30:	2220      	movs	r2, #32
 8005e32:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e34:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8005e36:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e38:	2a01      	cmp	r2, #1
 8005e3a:	d112      	bne.n	8005e62 <UART_RxISR_16BIT.part.0+0x5e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3c:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e42:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	e843 2100 	strex	r1, r2, [r3]
 8005e4a:	2900      	cmp	r1, #0
 8005e4c:	d1f7      	bne.n	8005e3e <UART_RxISR_16BIT.part.0+0x3a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e4e:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e50:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005e54:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e56:	bf44      	itt	mi
 8005e58:	2210      	movmi	r2, #16
 8005e5a:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e5c:	f7ff fe50 	bl	8005b00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e60:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8005e62:	f7fb fa1d 	bl	80012a0 <HAL_UART_RxCpltCallback>
}
 8005e66:	bd08      	pop	{r3, pc}

08005e68 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e68:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005e6a:	2a22      	cmp	r2, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e6c:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e6e:	d004      	beq.n	8005e7a <UART_RxISR_16BIT+0x12>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e70:	6993      	ldr	r3, [r2, #24]
 8005e72:	f043 0308 	orr.w	r3, r3, #8
 8005e76:	6193      	str	r3, [r2, #24]
  }
}
 8005e78:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e7a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e7c:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 8005e80:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005e82:	ea02 020c 	and.w	r2, r2, ip
 8005e86:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8005e8a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005e8e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005e90:	3a01      	subs	r2, #1
 8005e92:	b292      	uxth	r2, r2
 8005e94:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005e98:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1ea      	bne.n	8005e78 <UART_RxISR_16BIT+0x10>
 8005ea2:	f7ff bfaf 	b.w	8005e04 <UART_RxISR_16BIT.part.0>
 8005ea6:	bf00      	nop

08005ea8 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ea8:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005eaa:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eac:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005eae:	d004      	beq.n	8005eba <UART_RxISR_8BIT+0x12>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005eb0:	6993      	ldr	r3, [r2, #24]
 8005eb2:	f043 0308 	orr.w	r3, r3, #8
 8005eb6:	6193      	str	r3, [r2, #24]
}
 8005eb8:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005eba:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ebc:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 8005ec0:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005ec2:	ea02 020c 	and.w	r2, r2, ip
 8005ec6:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8005ec8:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8005ecc:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005ece:	3a01      	subs	r2, #1
 8005ed0:	b292      	uxth	r2, r2
 8005ed2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005ed6:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8005eda:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8005edc:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8005ede:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8005ee0:	2a00      	cmp	r2, #0
 8005ee2:	d1e9      	bne.n	8005eb8 <UART_RxISR_8BIT+0x10>
 8005ee4:	f7ff bf8e 	b.w	8005e04 <UART_RxISR_16BIT.part.0>

08005ee8 <UART_SetConfig>:
{
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eec:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eee:	6883      	ldr	r3, [r0, #8]
 8005ef0:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ef2:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ef4:	69e1      	ldr	r1, [r4, #28]
 8005ef6:	432b      	orrs	r3, r5
 8005ef8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005efa:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005efe:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f00:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f04:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f06:	4303      	orrs	r3, r0
 8005f08:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f0a:	6853      	ldr	r3, [r2, #4]
 8005f0c:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8005f0e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005f14:	4303      	orrs	r3, r0
 8005f16:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f18:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f1a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f1c:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005f20:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f22:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f24:	487d      	ldr	r0, [pc, #500]	; (800611c <UART_SetConfig+0x234>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f26:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f28:	4282      	cmp	r2, r0
 8005f2a:	d046      	beq.n	8005fba <UART_SetConfig+0xd2>
 8005f2c:	4b7c      	ldr	r3, [pc, #496]	; (8006120 <UART_SetConfig+0x238>)
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d00f      	beq.n	8005f52 <UART_SetConfig+0x6a>
 8005f32:	4b7c      	ldr	r3, [pc, #496]	; (8006124 <UART_SetConfig+0x23c>)
 8005f34:	429a      	cmp	r2, r3
 8005f36:	f000 80a3 	beq.w	8006080 <UART_SetConfig+0x198>
 8005f3a:	4b7b      	ldr	r3, [pc, #492]	; (8006128 <UART_SetConfig+0x240>)
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	f000 80b4 	beq.w	80060aa <UART_SetConfig+0x1c2>
 8005f42:	4b7a      	ldr	r3, [pc, #488]	; (800612c <UART_SetConfig+0x244>)
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d063      	beq.n	8006010 <UART_SetConfig+0x128>
  huart->RxISR = NULL;
 8005f48:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005f4a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    switch (clocksource)
 8005f4e:	2001      	movs	r0, #1
}
 8005f50:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f52:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f60:	d069      	beq.n	8006036 <UART_SetConfig+0x14e>
 8005f62:	d80f      	bhi.n	8005f84 <UART_SetConfig+0x9c>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d05c      	beq.n	8006022 <UART_SetConfig+0x13a>
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d1ec      	bne.n	8005f48 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005f72:	d066      	beq.n	8006042 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f74:	f7fe fd58 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005f78:	b960      	cbnz	r0, 8005f94 <UART_SetConfig+0xac>
  huart->RxISR = NULL;
 8005f7a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005f7c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8005f80:	2000      	movs	r0, #0
}
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f88:	d1de      	bne.n	8005f48 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f8a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005f8e:	f000 80c2 	beq.w	8006116 <UART_SetConfig+0x22e>
    switch (clocksource)
 8005f92:	4867      	ldr	r0, [pc, #412]	; (8006130 <UART_SetConfig+0x248>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f94:	6863      	ldr	r3, [r4, #4]
 8005f96:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f9e:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fa0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005fa4:	f1a3 0110 	sub.w	r1, r3, #16
 8005fa8:	4291      	cmp	r1, r2
 8005faa:	d8cd      	bhi.n	8005f48 <UART_SetConfig+0x60>
        huart->Instance->BRR = usartdiv;
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8005fb0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005fb2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8005fb6:	2000      	movs	r0, #0
}
 8005fb8:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fba:	4b5e      	ldr	r3, [pc, #376]	; (8006134 <UART_SetConfig+0x24c>)
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d906      	bls.n	8005fd6 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fc8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005fcc:	f000 8082 	beq.w	80060d4 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd0:	f7fe fd78 	bl	8004ac4 <HAL_RCC_GetPCLK2Freq>
        break;
 8005fd4:	e7d0      	b.n	8005f78 <UART_SetConfig+0x90>
 8005fd6:	4a58      	ldr	r2, [pc, #352]	; (8006138 <UART_SetConfig+0x250>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005fdc:	5cd3      	ldrb	r3, [r2, r3]
 8005fde:	d07f      	beq.n	80060e0 <UART_SetConfig+0x1f8>
    switch (clocksource)
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d8b1      	bhi.n	8005f48 <UART_SetConfig+0x60>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0x104>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006029 	.word	0x08006029
 8005ff0:	08005fd1 	.word	0x08005fd1
 8005ff4:	08005f93 	.word	0x08005f93
 8005ff8:	08005f49 	.word	0x08005f49
 8005ffc:	08005f75 	.word	0x08005f75
 8006000:	08005f49 	.word	0x08005f49
 8006004:	08005f49 	.word	0x08005f49
 8006008:	08005f49 	.word	0x08005f49
 800600c:	0800603d 	.word	0x0800603d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006010:	4b48      	ldr	r3, [pc, #288]	; (8006134 <UART_SetConfig+0x24c>)
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800601c:	d00b      	beq.n	8006036 <UART_SetConfig+0x14e>
 800601e:	d82b      	bhi.n	8006078 <UART_SetConfig+0x190>
 8006020:	b92b      	cbnz	r3, 800602e <UART_SetConfig+0x146>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006022:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006026:	d058      	beq.n	80060da <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006028:	f7fe fd34 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
        break;
 800602c:	e7a4      	b.n	8005f78 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800602e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006032:	d09c      	beq.n	8005f6e <UART_SetConfig+0x86>
 8006034:	e788      	b.n	8005f48 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006036:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800603a:	d069      	beq.n	8006110 <UART_SetConfig+0x228>
        pclk = (uint32_t) LSE_VALUE;
 800603c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006040:	e7a8      	b.n	8005f94 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fe fcf1 	bl	8004a28 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006046:	2800      	cmp	r0, #0
 8006048:	d097      	beq.n	8005f7a <UART_SetConfig+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800604a:	0043      	lsls	r3, r0, #1
 800604c:	6862      	ldr	r2, [r4, #4]
 800604e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006052:	fbb3 f3f2 	udiv	r3, r3, r2
 8006056:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006058:	f1a2 0010 	sub.w	r0, r2, #16
 800605c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8006060:	4288      	cmp	r0, r1
 8006062:	f63f af71 	bhi.w	8005f48 <UART_SetConfig+0x60>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006066:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 800606a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800606c:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800606e:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8006072:	4313      	orrs	r3, r2
 8006074:	60cb      	str	r3, [r1, #12]
 8006076:	e780      	b.n	8005f7a <UART_SetConfig+0x92>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006078:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800607c:	d085      	beq.n	8005f8a <UART_SetConfig+0xa2>
 800607e:	e763      	b.n	8005f48 <UART_SetConfig+0x60>
 8006080:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800608a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800608e:	d0d2      	beq.n	8006036 <UART_SetConfig+0x14e>
 8006090:	d806      	bhi.n	80060a0 <UART_SetConfig+0x1b8>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0c5      	beq.n	8006022 <UART_SetConfig+0x13a>
 8006096:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800609a:	f43f af68 	beq.w	8005f6e <UART_SetConfig+0x86>
 800609e:	e753      	b.n	8005f48 <UART_SetConfig+0x60>
 80060a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80060a4:	f43f af71 	beq.w	8005f8a <UART_SetConfig+0xa2>
 80060a8:	e74e      	b.n	8005f48 <UART_SetConfig+0x60>
 80060aa:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80060b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060b8:	d0bd      	beq.n	8006036 <UART_SetConfig+0x14e>
 80060ba:	d806      	bhi.n	80060ca <UART_SetConfig+0x1e2>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0b0      	beq.n	8006022 <UART_SetConfig+0x13a>
 80060c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060c4:	f43f af53 	beq.w	8005f6e <UART_SetConfig+0x86>
 80060c8:	e73e      	b.n	8005f48 <UART_SetConfig+0x60>
 80060ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060ce:	f43f af5c 	beq.w	8005f8a <UART_SetConfig+0xa2>
 80060d2:	e739      	b.n	8005f48 <UART_SetConfig+0x60>
        pclk = HAL_RCC_GetPCLK2Freq();
 80060d4:	f7fe fcf6 	bl	8004ac4 <HAL_RCC_GetPCLK2Freq>
        break;
 80060d8:	e7b5      	b.n	8006046 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060da:	f7fe fcdb 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
        break;
 80060de:	e7b2      	b.n	8006046 <UART_SetConfig+0x15e>
    switch (clocksource)
 80060e0:	2b08      	cmp	r3, #8
 80060e2:	f63f af31 	bhi.w	8005f48 <UART_SetConfig+0x60>
 80060e6:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0x204>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	080060db 	.word	0x080060db
 80060f0:	080060d5 	.word	0x080060d5
 80060f4:	08006117 	.word	0x08006117
 80060f8:	08005f49 	.word	0x08005f49
 80060fc:	08006043 	.word	0x08006043
 8006100:	08005f49 	.word	0x08005f49
 8006104:	08005f49 	.word	0x08005f49
 8006108:	08005f49 	.word	0x08005f49
 800610c:	08006111 	.word	0x08006111
 8006110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006114:	e79a      	b.n	800604c <UART_SetConfig+0x164>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006116:	4b09      	ldr	r3, [pc, #36]	; (800613c <UART_SetConfig+0x254>)
 8006118:	e798      	b.n	800604c <UART_SetConfig+0x164>
 800611a:	bf00      	nop
 800611c:	40013800 	.word	0x40013800
 8006120:	40004400 	.word	0x40004400
 8006124:	40004800 	.word	0x40004800
 8006128:	40004c00 	.word	0x40004c00
 800612c:	40005000 	.word	0x40005000
 8006130:	007a1200 	.word	0x007a1200
 8006134:	40021000 	.word	0x40021000
 8006138:	0800a104 	.word	0x0800a104
 800613c:	00f42400 	.word	0x00f42400

08006140 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006140:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006142:	07da      	lsls	r2, r3, #31
{
 8006144:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006146:	d506      	bpl.n	8006156 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006148:	6801      	ldr	r1, [r0, #0]
 800614a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800614c:	684a      	ldr	r2, [r1, #4]
 800614e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006152:	4322      	orrs	r2, r4
 8006154:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006156:	079c      	lsls	r4, r3, #30
 8006158:	d506      	bpl.n	8006168 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800615a:	6801      	ldr	r1, [r0, #0]
 800615c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800615e:	684a      	ldr	r2, [r1, #4]
 8006160:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006164:	4322      	orrs	r2, r4
 8006166:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006168:	0759      	lsls	r1, r3, #29
 800616a:	d506      	bpl.n	800617a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800616c:	6801      	ldr	r1, [r0, #0]
 800616e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006170:	684a      	ldr	r2, [r1, #4]
 8006172:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006176:	4322      	orrs	r2, r4
 8006178:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800617a:	071a      	lsls	r2, r3, #28
 800617c:	d506      	bpl.n	800618c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800617e:	6801      	ldr	r1, [r0, #0]
 8006180:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006182:	684a      	ldr	r2, [r1, #4]
 8006184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006188:	4322      	orrs	r2, r4
 800618a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800618c:	06dc      	lsls	r4, r3, #27
 800618e:	d506      	bpl.n	800619e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006190:	6801      	ldr	r1, [r0, #0]
 8006192:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006194:	688a      	ldr	r2, [r1, #8]
 8006196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800619a:	4322      	orrs	r2, r4
 800619c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800619e:	0699      	lsls	r1, r3, #26
 80061a0:	d506      	bpl.n	80061b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061a2:	6801      	ldr	r1, [r0, #0]
 80061a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80061a6:	688a      	ldr	r2, [r1, #8]
 80061a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ac:	4322      	orrs	r2, r4
 80061ae:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061b0:	065a      	lsls	r2, r3, #25
 80061b2:	d509      	bpl.n	80061c8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061b4:	6801      	ldr	r1, [r0, #0]
 80061b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80061b8:	684a      	ldr	r2, [r1, #4]
 80061ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80061be:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061c4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061c6:	d00b      	beq.n	80061e0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061c8:	061b      	lsls	r3, r3, #24
 80061ca:	d506      	bpl.n	80061da <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061cc:	6802      	ldr	r2, [r0, #0]
 80061ce:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80061d0:	6853      	ldr	r3, [r2, #4]
 80061d2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80061d6:	430b      	orrs	r3, r1
 80061d8:	6053      	str	r3, [r2, #4]
}
 80061da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061de:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061e0:	684a      	ldr	r2, [r1, #4]
 80061e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80061e4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80061e8:	4322      	orrs	r2, r4
 80061ea:	604a      	str	r2, [r1, #4]
 80061ec:	e7ec      	b.n	80061c8 <UART_AdvFeatureConfig+0x88>
 80061ee:	bf00      	nop

080061f0 <UART_WaitOnFlagUntilTimeout>:
{
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f8:	6804      	ldr	r4, [r0, #0]
{
 80061fa:	4607      	mov	r7, r0
 80061fc:	460e      	mov	r6, r1
 80061fe:	4615      	mov	r5, r2
 8006200:	4699      	mov	r9, r3
 8006202:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006206:	d10a      	bne.n	800621e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006208:	69e3      	ldr	r3, [r4, #28]
 800620a:	ea36 0303 	bics.w	r3, r6, r3
 800620e:	bf0c      	ite	eq
 8006210:	2301      	moveq	r3, #1
 8006212:	2300      	movne	r3, #0
 8006214:	429d      	cmp	r5, r3
 8006216:	d0f7      	beq.n	8006208 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8006218:	2000      	movs	r0, #0
}
 800621a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800621e:	69e3      	ldr	r3, [r4, #28]
 8006220:	ea36 0303 	bics.w	r3, r6, r3
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	42ab      	cmp	r3, r5
 800622c:	d1f4      	bne.n	8006218 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800622e:	f7fc fa3d 	bl	80026ac <HAL_GetTick>
 8006232:	eba0 0009 	sub.w	r0, r0, r9
 8006236:	4540      	cmp	r0, r8
 8006238:	d831      	bhi.n	800629e <UART_WaitOnFlagUntilTimeout+0xae>
 800623a:	f1b8 0f00 	cmp.w	r8, #0
 800623e:	d02e      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006240:	683c      	ldr	r4, [r7, #0]
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	0759      	lsls	r1, r3, #29
 8006246:	4622      	mov	r2, r4
 8006248:	d5db      	bpl.n	8006202 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800624a:	69e3      	ldr	r3, [r4, #28]
 800624c:	051b      	lsls	r3, r3, #20
 800624e:	d5d8      	bpl.n	8006202 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006250:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006254:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800625a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	e844 3100 	strex	r1, r3, [r4]
 8006262:	b139      	cbz	r1, 8006274 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	e852 3f00 	ldrex	r3, [r2]
 8006268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	e842 3100 	strex	r1, r3, [r2]
 8006270:	2900      	cmp	r1, #0
 8006272:	d1f7      	bne.n	8006264 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	f102 0308 	add.w	r3, r2, #8
 8006278:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800627c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	f102 0008 	add.w	r0, r2, #8
 8006284:	e840 3100 	strex	r1, r3, [r0]
 8006288:	2900      	cmp	r1, #0
 800628a:	d1f3      	bne.n	8006274 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800628c:	2320      	movs	r3, #32
 800628e:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8006290:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006294:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 8006296:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 800629c:	e7bd      	b.n	800621a <UART_WaitOnFlagUntilTimeout+0x2a>
 800629e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	e842 3100 	strex	r1, r3, [r2]
 80062ac:	2900      	cmp	r1, #0
 80062ae:	d1f7      	bne.n	80062a0 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b0:	f102 0308 	add.w	r3, r2, #8
 80062b4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	f102 0008 	add.w	r0, r2, #8
 80062c0:	e840 3100 	strex	r1, r3, [r0]
 80062c4:	2900      	cmp	r1, #0
 80062c6:	d1f3      	bne.n	80062b0 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 80062c8:	2320      	movs	r3, #32
 80062ca:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80062cc:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80062d0:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 80062d2:	2003      	movs	r0, #3
 80062d4:	e7a1      	b.n	800621a <UART_WaitOnFlagUntilTimeout+0x2a>
 80062d6:	bf00      	nop

080062d8 <HAL_UART_Init>:
  if (huart == NULL)
 80062d8:	2800      	cmp	r0, #0
 80062da:	d062      	beq.n	80063a2 <HAL_UART_Init+0xca>
{
 80062dc:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80062de:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80062e0:	b082      	sub	sp, #8
 80062e2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d049      	beq.n	800637c <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 80062e8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80062ea:	2324      	movs	r3, #36	; 0x24
 80062ec:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062f4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80062f6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062f8:	f7ff fdf6 	bl	8005ee8 <UART_SetConfig>
 80062fc:	2801      	cmp	r0, #1
 80062fe:	d03a      	beq.n	8006376 <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d133      	bne.n	800636e <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	6859      	ldr	r1, [r3, #4]
 800630a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 800630e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006310:	6899      	ldr	r1, [r3, #8]
 8006312:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8006316:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006318:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631a:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 800631c:	f041 0101 	orr.w	r1, r1, #1
 8006320:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006322:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8006326:	f7fc f9c1 	bl	80026ac <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8006330:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006332:	d40c      	bmi.n	800634e <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	075b      	lsls	r3, r3, #29
 8006338:	d425      	bmi.n	8006386 <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800633c:	2220      	movs	r2, #32
 800633e:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8006340:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006344:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8006346:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006348:	6623      	str	r3, [r4, #96]	; 0x60
}
 800634a:	b002      	add	sp, #8
 800634c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800634e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	462a      	mov	r2, r5
 8006356:	4603      	mov	r3, r0
 8006358:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800635c:	4620      	mov	r0, r4
 800635e:	f7ff ff47 	bl	80061f0 <UART_WaitOnFlagUntilTimeout>
 8006362:	b9e0      	cbnz	r0, 800639e <HAL_UART_Init+0xc6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	075b      	lsls	r3, r3, #29
 800636a:	d40c      	bmi.n	8006386 <HAL_UART_Init+0xae>
 800636c:	e7e5      	b.n	800633a <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 800636e:	4620      	mov	r0, r4
 8006370:	f7ff fee6 	bl	8006140 <UART_AdvFeatureConfig>
 8006374:	e7c7      	b.n	8006306 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8006376:	2001      	movs	r0, #1
}
 8006378:	b002      	add	sp, #8
 800637a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800637c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8006380:	f7fc f8d2 	bl	8002528 <HAL_UART_MspInit>
 8006384:	e7b0      	b.n	80062e8 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006386:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	2200      	movs	r2, #0
 800638e:	4633      	mov	r3, r6
 8006390:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006394:	4620      	mov	r0, r4
 8006396:	f7ff ff2b 	bl	80061f0 <UART_WaitOnFlagUntilTimeout>
 800639a:	2800      	cmp	r0, #0
 800639c:	d0cd      	beq.n	800633a <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 800639e:	2003      	movs	r0, #3
 80063a0:	e7d3      	b.n	800634a <HAL_UART_Init+0x72>
    return HAL_ERROR;
 80063a2:	2001      	movs	r0, #1
}
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	0000      	movs	r0, r0
	...

080063b0 <sin>:
 80063b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063b2:	ec53 2b10 	vmov	r2, r3, d0
 80063b6:	4828      	ldr	r0, [pc, #160]	; (8006458 <sin+0xa8>)
 80063b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80063bc:	4281      	cmp	r1, r0
 80063be:	dc07      	bgt.n	80063d0 <sin+0x20>
 80063c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006450 <sin+0xa0>
 80063c4:	2000      	movs	r0, #0
 80063c6:	b005      	add	sp, #20
 80063c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063cc:	f000 be6c 	b.w	80070a8 <__kernel_sin>
 80063d0:	4822      	ldr	r0, [pc, #136]	; (800645c <sin+0xac>)
 80063d2:	4281      	cmp	r1, r0
 80063d4:	dd09      	ble.n	80063ea <sin+0x3a>
 80063d6:	ee10 0a10 	vmov	r0, s0
 80063da:	4619      	mov	r1, r3
 80063dc:	f7f9 ff54 	bl	8000288 <__aeabi_dsub>
 80063e0:	ec41 0b10 	vmov	d0, r0, r1
 80063e4:	b005      	add	sp, #20
 80063e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80063ea:	4668      	mov	r0, sp
 80063ec:	f000 f838 	bl	8006460 <__ieee754_rem_pio2>
 80063f0:	f000 0003 	and.w	r0, r0, #3
 80063f4:	2801      	cmp	r0, #1
 80063f6:	d00c      	beq.n	8006412 <sin+0x62>
 80063f8:	2802      	cmp	r0, #2
 80063fa:	d011      	beq.n	8006420 <sin+0x70>
 80063fc:	b9f0      	cbnz	r0, 800643c <sin+0x8c>
 80063fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006402:	ed9d 0b00 	vldr	d0, [sp]
 8006406:	2001      	movs	r0, #1
 8006408:	f000 fe4e 	bl	80070a8 <__kernel_sin>
 800640c:	ec51 0b10 	vmov	r0, r1, d0
 8006410:	e7e6      	b.n	80063e0 <sin+0x30>
 8006412:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006416:	ed9d 0b00 	vldr	d0, [sp]
 800641a:	f000 fa2d 	bl	8006878 <__kernel_cos>
 800641e:	e7f5      	b.n	800640c <sin+0x5c>
 8006420:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006424:	ed9d 0b00 	vldr	d0, [sp]
 8006428:	2001      	movs	r0, #1
 800642a:	f000 fe3d 	bl	80070a8 <__kernel_sin>
 800642e:	ec53 2b10 	vmov	r2, r3, d0
 8006432:	ee10 0a10 	vmov	r0, s0
 8006436:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800643a:	e7d1      	b.n	80063e0 <sin+0x30>
 800643c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006440:	ed9d 0b00 	vldr	d0, [sp]
 8006444:	f000 fa18 	bl	8006878 <__kernel_cos>
 8006448:	e7f1      	b.n	800642e <sin+0x7e>
 800644a:	bf00      	nop
 800644c:	f3af 8000 	nop.w
	...
 8006458:	3fe921fb 	.word	0x3fe921fb
 800645c:	7fefffff 	.word	0x7fefffff

08006460 <__ieee754_rem_pio2>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	ed2d 8b02 	vpush	{d8}
 8006468:	ec55 4b10 	vmov	r4, r5, d0
 800646c:	4bca      	ldr	r3, [pc, #808]	; (8006798 <__ieee754_rem_pio2+0x338>)
 800646e:	b08b      	sub	sp, #44	; 0x2c
 8006470:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006474:	4598      	cmp	r8, r3
 8006476:	4682      	mov	sl, r0
 8006478:	9502      	str	r5, [sp, #8]
 800647a:	dc08      	bgt.n	800648e <__ieee754_rem_pio2+0x2e>
 800647c:	2200      	movs	r2, #0
 800647e:	2300      	movs	r3, #0
 8006480:	ed80 0b00 	vstr	d0, [r0]
 8006484:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006488:	f04f 0b00 	mov.w	fp, #0
 800648c:	e028      	b.n	80064e0 <__ieee754_rem_pio2+0x80>
 800648e:	4bc3      	ldr	r3, [pc, #780]	; (800679c <__ieee754_rem_pio2+0x33c>)
 8006490:	4598      	cmp	r8, r3
 8006492:	dc78      	bgt.n	8006586 <__ieee754_rem_pio2+0x126>
 8006494:	9b02      	ldr	r3, [sp, #8]
 8006496:	4ec2      	ldr	r6, [pc, #776]	; (80067a0 <__ieee754_rem_pio2+0x340>)
 8006498:	2b00      	cmp	r3, #0
 800649a:	ee10 0a10 	vmov	r0, s0
 800649e:	a3b0      	add	r3, pc, #704	; (adr r3, 8006760 <__ieee754_rem_pio2+0x300>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	4629      	mov	r1, r5
 80064a6:	dd39      	ble.n	800651c <__ieee754_rem_pio2+0xbc>
 80064a8:	f7f9 feee 	bl	8000288 <__aeabi_dsub>
 80064ac:	45b0      	cmp	r8, r6
 80064ae:	4604      	mov	r4, r0
 80064b0:	460d      	mov	r5, r1
 80064b2:	d01b      	beq.n	80064ec <__ieee754_rem_pio2+0x8c>
 80064b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8006768 <__ieee754_rem_pio2+0x308>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f7f9 fee5 	bl	8000288 <__aeabi_dsub>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	e9ca 2300 	strd	r2, r3, [sl]
 80064c6:	4620      	mov	r0, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7f9 fedd 	bl	8000288 <__aeabi_dsub>
 80064ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8006768 <__ieee754_rem_pio2+0x308>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f7f9 fed8 	bl	8000288 <__aeabi_dsub>
 80064d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80064dc:	f04f 0b01 	mov.w	fp, #1
 80064e0:	4658      	mov	r0, fp
 80064e2:	b00b      	add	sp, #44	; 0x2c
 80064e4:	ecbd 8b02 	vpop	{d8}
 80064e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8006770 <__ieee754_rem_pio2+0x310>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f7f9 fec9 	bl	8000288 <__aeabi_dsub>
 80064f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8006778 <__ieee754_rem_pio2+0x318>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	4604      	mov	r4, r0
 80064fe:	460d      	mov	r5, r1
 8006500:	f7f9 fec2 	bl	8000288 <__aeabi_dsub>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	e9ca 2300 	strd	r2, r3, [sl]
 800650c:	4620      	mov	r0, r4
 800650e:	4629      	mov	r1, r5
 8006510:	f7f9 feba 	bl	8000288 <__aeabi_dsub>
 8006514:	a398      	add	r3, pc, #608	; (adr r3, 8006778 <__ieee754_rem_pio2+0x318>)
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	e7db      	b.n	80064d4 <__ieee754_rem_pio2+0x74>
 800651c:	f7f9 feb6 	bl	800028c <__adddf3>
 8006520:	45b0      	cmp	r8, r6
 8006522:	4604      	mov	r4, r0
 8006524:	460d      	mov	r5, r1
 8006526:	d016      	beq.n	8006556 <__ieee754_rem_pio2+0xf6>
 8006528:	a38f      	add	r3, pc, #572	; (adr r3, 8006768 <__ieee754_rem_pio2+0x308>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f7f9 fead 	bl	800028c <__adddf3>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	e9ca 2300 	strd	r2, r3, [sl]
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f7f9 fea3 	bl	8000288 <__aeabi_dsub>
 8006542:	a389      	add	r3, pc, #548	; (adr r3, 8006768 <__ieee754_rem_pio2+0x308>)
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f7f9 fea0 	bl	800028c <__adddf3>
 800654c:	f04f 3bff 	mov.w	fp, #4294967295
 8006550:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006554:	e7c4      	b.n	80064e0 <__ieee754_rem_pio2+0x80>
 8006556:	a386      	add	r3, pc, #536	; (adr r3, 8006770 <__ieee754_rem_pio2+0x310>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f7f9 fe96 	bl	800028c <__adddf3>
 8006560:	a385      	add	r3, pc, #532	; (adr r3, 8006778 <__ieee754_rem_pio2+0x318>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	4604      	mov	r4, r0
 8006568:	460d      	mov	r5, r1
 800656a:	f7f9 fe8f 	bl	800028c <__adddf3>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	e9ca 2300 	strd	r2, r3, [sl]
 8006576:	4620      	mov	r0, r4
 8006578:	4629      	mov	r1, r5
 800657a:	f7f9 fe85 	bl	8000288 <__aeabi_dsub>
 800657e:	a37e      	add	r3, pc, #504	; (adr r3, 8006778 <__ieee754_rem_pio2+0x318>)
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	e7e0      	b.n	8006548 <__ieee754_rem_pio2+0xe8>
 8006586:	4b87      	ldr	r3, [pc, #540]	; (80067a4 <__ieee754_rem_pio2+0x344>)
 8006588:	4598      	cmp	r8, r3
 800658a:	f300 80d9 	bgt.w	8006740 <__ieee754_rem_pio2+0x2e0>
 800658e:	f000 fe49 	bl	8007224 <fabs>
 8006592:	ec55 4b10 	vmov	r4, r5, d0
 8006596:	ee10 0a10 	vmov	r0, s0
 800659a:	a379      	add	r3, pc, #484	; (adr r3, 8006780 <__ieee754_rem_pio2+0x320>)
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa f829 	bl	80005f8 <__aeabi_dmul>
 80065a6:	4b80      	ldr	r3, [pc, #512]	; (80067a8 <__ieee754_rem_pio2+0x348>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	f7f9 fe6f 	bl	800028c <__adddf3>
 80065ae:	f7fa fad3 	bl	8000b58 <__aeabi_d2iz>
 80065b2:	4683      	mov	fp, r0
 80065b4:	f7f9 ffb6 	bl	8000524 <__aeabi_i2d>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	ec43 2b18 	vmov	d8, r2, r3
 80065c0:	a367      	add	r3, pc, #412	; (adr r3, 8006760 <__ieee754_rem_pio2+0x300>)
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f7fa f817 	bl	80005f8 <__aeabi_dmul>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
 80065ce:	4620      	mov	r0, r4
 80065d0:	4629      	mov	r1, r5
 80065d2:	f7f9 fe59 	bl	8000288 <__aeabi_dsub>
 80065d6:	a364      	add	r3, pc, #400	; (adr r3, 8006768 <__ieee754_rem_pio2+0x308>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	4606      	mov	r6, r0
 80065de:	460f      	mov	r7, r1
 80065e0:	ec51 0b18 	vmov	r0, r1, d8
 80065e4:	f7fa f808 	bl	80005f8 <__aeabi_dmul>
 80065e8:	f1bb 0f1f 	cmp.w	fp, #31
 80065ec:	4604      	mov	r4, r0
 80065ee:	460d      	mov	r5, r1
 80065f0:	dc0d      	bgt.n	800660e <__ieee754_rem_pio2+0x1ae>
 80065f2:	4b6e      	ldr	r3, [pc, #440]	; (80067ac <__ieee754_rem_pio2+0x34c>)
 80065f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	4543      	cmp	r3, r8
 80065fe:	d006      	beq.n	800660e <__ieee754_rem_pio2+0x1ae>
 8006600:	4622      	mov	r2, r4
 8006602:	462b      	mov	r3, r5
 8006604:	4630      	mov	r0, r6
 8006606:	4639      	mov	r1, r7
 8006608:	f7f9 fe3e 	bl	8000288 <__aeabi_dsub>
 800660c:	e00f      	b.n	800662e <__ieee754_rem_pio2+0x1ce>
 800660e:	462b      	mov	r3, r5
 8006610:	4622      	mov	r2, r4
 8006612:	4630      	mov	r0, r6
 8006614:	4639      	mov	r1, r7
 8006616:	f7f9 fe37 	bl	8000288 <__aeabi_dsub>
 800661a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800661e:	9303      	str	r3, [sp, #12]
 8006620:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006624:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006628:	f1b8 0f10 	cmp.w	r8, #16
 800662c:	dc02      	bgt.n	8006634 <__ieee754_rem_pio2+0x1d4>
 800662e:	e9ca 0100 	strd	r0, r1, [sl]
 8006632:	e039      	b.n	80066a8 <__ieee754_rem_pio2+0x248>
 8006634:	a34e      	add	r3, pc, #312	; (adr r3, 8006770 <__ieee754_rem_pio2+0x310>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	ec51 0b18 	vmov	r0, r1, d8
 800663e:	f7f9 ffdb 	bl	80005f8 <__aeabi_dmul>
 8006642:	4604      	mov	r4, r0
 8006644:	460d      	mov	r5, r1
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4630      	mov	r0, r6
 800664c:	4639      	mov	r1, r7
 800664e:	f7f9 fe1b 	bl	8000288 <__aeabi_dsub>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4680      	mov	r8, r0
 8006658:	4689      	mov	r9, r1
 800665a:	4630      	mov	r0, r6
 800665c:	4639      	mov	r1, r7
 800665e:	f7f9 fe13 	bl	8000288 <__aeabi_dsub>
 8006662:	4622      	mov	r2, r4
 8006664:	462b      	mov	r3, r5
 8006666:	f7f9 fe0f 	bl	8000288 <__aeabi_dsub>
 800666a:	a343      	add	r3, pc, #268	; (adr r3, 8006778 <__ieee754_rem_pio2+0x318>)
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	4604      	mov	r4, r0
 8006672:	460d      	mov	r5, r1
 8006674:	ec51 0b18 	vmov	r0, r1, d8
 8006678:	f7f9 ffbe 	bl	80005f8 <__aeabi_dmul>
 800667c:	4622      	mov	r2, r4
 800667e:	462b      	mov	r3, r5
 8006680:	f7f9 fe02 	bl	8000288 <__aeabi_dsub>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4604      	mov	r4, r0
 800668a:	460d      	mov	r5, r1
 800668c:	4640      	mov	r0, r8
 800668e:	4649      	mov	r1, r9
 8006690:	f7f9 fdfa 	bl	8000288 <__aeabi_dsub>
 8006694:	9a03      	ldr	r2, [sp, #12]
 8006696:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b31      	cmp	r3, #49	; 0x31
 800669e:	dc24      	bgt.n	80066ea <__ieee754_rem_pio2+0x28a>
 80066a0:	e9ca 0100 	strd	r0, r1, [sl]
 80066a4:	4646      	mov	r6, r8
 80066a6:	464f      	mov	r7, r9
 80066a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80066ac:	4630      	mov	r0, r6
 80066ae:	4642      	mov	r2, r8
 80066b0:	464b      	mov	r3, r9
 80066b2:	4639      	mov	r1, r7
 80066b4:	f7f9 fde8 	bl	8000288 <__aeabi_dsub>
 80066b8:	462b      	mov	r3, r5
 80066ba:	4622      	mov	r2, r4
 80066bc:	f7f9 fde4 	bl	8000288 <__aeabi_dsub>
 80066c0:	9b02      	ldr	r3, [sp, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80066c8:	f6bf af0a 	bge.w	80064e0 <__ieee754_rem_pio2+0x80>
 80066cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80066d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80066d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066d8:	f8ca 8000 	str.w	r8, [sl]
 80066dc:	f8ca 0008 	str.w	r0, [sl, #8]
 80066e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80066e4:	f1cb 0b00 	rsb	fp, fp, #0
 80066e8:	e6fa      	b.n	80064e0 <__ieee754_rem_pio2+0x80>
 80066ea:	a327      	add	r3, pc, #156	; (adr r3, 8006788 <__ieee754_rem_pio2+0x328>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	ec51 0b18 	vmov	r0, r1, d8
 80066f4:	f7f9 ff80 	bl	80005f8 <__aeabi_dmul>
 80066f8:	4604      	mov	r4, r0
 80066fa:	460d      	mov	r5, r1
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4640      	mov	r0, r8
 8006702:	4649      	mov	r1, r9
 8006704:	f7f9 fdc0 	bl	8000288 <__aeabi_dsub>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4606      	mov	r6, r0
 800670e:	460f      	mov	r7, r1
 8006710:	4640      	mov	r0, r8
 8006712:	4649      	mov	r1, r9
 8006714:	f7f9 fdb8 	bl	8000288 <__aeabi_dsub>
 8006718:	4622      	mov	r2, r4
 800671a:	462b      	mov	r3, r5
 800671c:	f7f9 fdb4 	bl	8000288 <__aeabi_dsub>
 8006720:	a31b      	add	r3, pc, #108	; (adr r3, 8006790 <__ieee754_rem_pio2+0x330>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	4604      	mov	r4, r0
 8006728:	460d      	mov	r5, r1
 800672a:	ec51 0b18 	vmov	r0, r1, d8
 800672e:	f7f9 ff63 	bl	80005f8 <__aeabi_dmul>
 8006732:	4622      	mov	r2, r4
 8006734:	462b      	mov	r3, r5
 8006736:	f7f9 fda7 	bl	8000288 <__aeabi_dsub>
 800673a:	4604      	mov	r4, r0
 800673c:	460d      	mov	r5, r1
 800673e:	e75f      	b.n	8006600 <__ieee754_rem_pio2+0x1a0>
 8006740:	4b1b      	ldr	r3, [pc, #108]	; (80067b0 <__ieee754_rem_pio2+0x350>)
 8006742:	4598      	cmp	r8, r3
 8006744:	dd36      	ble.n	80067b4 <__ieee754_rem_pio2+0x354>
 8006746:	ee10 2a10 	vmov	r2, s0
 800674a:	462b      	mov	r3, r5
 800674c:	4620      	mov	r0, r4
 800674e:	4629      	mov	r1, r5
 8006750:	f7f9 fd9a 	bl	8000288 <__aeabi_dsub>
 8006754:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006758:	e9ca 0100 	strd	r0, r1, [sl]
 800675c:	e694      	b.n	8006488 <__ieee754_rem_pio2+0x28>
 800675e:	bf00      	nop
 8006760:	54400000 	.word	0x54400000
 8006764:	3ff921fb 	.word	0x3ff921fb
 8006768:	1a626331 	.word	0x1a626331
 800676c:	3dd0b461 	.word	0x3dd0b461
 8006770:	1a600000 	.word	0x1a600000
 8006774:	3dd0b461 	.word	0x3dd0b461
 8006778:	2e037073 	.word	0x2e037073
 800677c:	3ba3198a 	.word	0x3ba3198a
 8006780:	6dc9c883 	.word	0x6dc9c883
 8006784:	3fe45f30 	.word	0x3fe45f30
 8006788:	2e000000 	.word	0x2e000000
 800678c:	3ba3198a 	.word	0x3ba3198a
 8006790:	252049c1 	.word	0x252049c1
 8006794:	397b839a 	.word	0x397b839a
 8006798:	3fe921fb 	.word	0x3fe921fb
 800679c:	4002d97b 	.word	0x4002d97b
 80067a0:	3ff921fb 	.word	0x3ff921fb
 80067a4:	413921fb 	.word	0x413921fb
 80067a8:	3fe00000 	.word	0x3fe00000
 80067ac:	0800a108 	.word	0x0800a108
 80067b0:	7fefffff 	.word	0x7fefffff
 80067b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80067b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80067bc:	ee10 0a10 	vmov	r0, s0
 80067c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80067c4:	ee10 6a10 	vmov	r6, s0
 80067c8:	460f      	mov	r7, r1
 80067ca:	f7fa f9c5 	bl	8000b58 <__aeabi_d2iz>
 80067ce:	f7f9 fea9 	bl	8000524 <__aeabi_i2d>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4630      	mov	r0, r6
 80067d8:	4639      	mov	r1, r7
 80067da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067de:	f7f9 fd53 	bl	8000288 <__aeabi_dsub>
 80067e2:	4b23      	ldr	r3, [pc, #140]	; (8006870 <__ieee754_rem_pio2+0x410>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	f7f9 ff07 	bl	80005f8 <__aeabi_dmul>
 80067ea:	460f      	mov	r7, r1
 80067ec:	4606      	mov	r6, r0
 80067ee:	f7fa f9b3 	bl	8000b58 <__aeabi_d2iz>
 80067f2:	f7f9 fe97 	bl	8000524 <__aeabi_i2d>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4630      	mov	r0, r6
 80067fc:	4639      	mov	r1, r7
 80067fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006802:	f7f9 fd41 	bl	8000288 <__aeabi_dsub>
 8006806:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <__ieee754_rem_pio2+0x410>)
 8006808:	2200      	movs	r2, #0
 800680a:	f7f9 fef5 	bl	80005f8 <__aeabi_dmul>
 800680e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006812:	ad04      	add	r5, sp, #16
 8006814:	f04f 0803 	mov.w	r8, #3
 8006818:	46a9      	mov	r9, r5
 800681a:	2600      	movs	r6, #0
 800681c:	2700      	movs	r7, #0
 800681e:	4632      	mov	r2, r6
 8006820:	463b      	mov	r3, r7
 8006822:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006826:	46c3      	mov	fp, r8
 8006828:	3d08      	subs	r5, #8
 800682a:	f108 38ff 	add.w	r8, r8, #4294967295
 800682e:	f7fa f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006832:	2800      	cmp	r0, #0
 8006834:	d1f3      	bne.n	800681e <__ieee754_rem_pio2+0x3be>
 8006836:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <__ieee754_rem_pio2+0x414>)
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	2302      	movs	r3, #2
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4622      	mov	r2, r4
 8006840:	465b      	mov	r3, fp
 8006842:	4651      	mov	r1, sl
 8006844:	4648      	mov	r0, r9
 8006846:	f000 f8df 	bl	8006a08 <__kernel_rem_pio2>
 800684a:	9b02      	ldr	r3, [sp, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	4683      	mov	fp, r0
 8006850:	f6bf ae46 	bge.w	80064e0 <__ieee754_rem_pio2+0x80>
 8006854:	e9da 2100 	ldrd	r2, r1, [sl]
 8006858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800685c:	e9ca 2300 	strd	r2, r3, [sl]
 8006860:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006868:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800686c:	e73a      	b.n	80066e4 <__ieee754_rem_pio2+0x284>
 800686e:	bf00      	nop
 8006870:	41700000 	.word	0x41700000
 8006874:	0800a188 	.word	0x0800a188

08006878 <__kernel_cos>:
 8006878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687c:	ec57 6b10 	vmov	r6, r7, d0
 8006880:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006884:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006888:	ed8d 1b00 	vstr	d1, [sp]
 800688c:	da07      	bge.n	800689e <__kernel_cos+0x26>
 800688e:	ee10 0a10 	vmov	r0, s0
 8006892:	4639      	mov	r1, r7
 8006894:	f7fa f960 	bl	8000b58 <__aeabi_d2iz>
 8006898:	2800      	cmp	r0, #0
 800689a:	f000 8088 	beq.w	80069ae <__kernel_cos+0x136>
 800689e:	4632      	mov	r2, r6
 80068a0:	463b      	mov	r3, r7
 80068a2:	4630      	mov	r0, r6
 80068a4:	4639      	mov	r1, r7
 80068a6:	f7f9 fea7 	bl	80005f8 <__aeabi_dmul>
 80068aa:	4b51      	ldr	r3, [pc, #324]	; (80069f0 <__kernel_cos+0x178>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	4604      	mov	r4, r0
 80068b0:	460d      	mov	r5, r1
 80068b2:	f7f9 fea1 	bl	80005f8 <__aeabi_dmul>
 80068b6:	a340      	add	r3, pc, #256	; (adr r3, 80069b8 <__kernel_cos+0x140>)
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	4682      	mov	sl, r0
 80068be:	468b      	mov	fp, r1
 80068c0:	4620      	mov	r0, r4
 80068c2:	4629      	mov	r1, r5
 80068c4:	f7f9 fe98 	bl	80005f8 <__aeabi_dmul>
 80068c8:	a33d      	add	r3, pc, #244	; (adr r3, 80069c0 <__kernel_cos+0x148>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	f7f9 fcdd 	bl	800028c <__adddf3>
 80068d2:	4622      	mov	r2, r4
 80068d4:	462b      	mov	r3, r5
 80068d6:	f7f9 fe8f 	bl	80005f8 <__aeabi_dmul>
 80068da:	a33b      	add	r3, pc, #236	; (adr r3, 80069c8 <__kernel_cos+0x150>)
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f7f9 fcd2 	bl	8000288 <__aeabi_dsub>
 80068e4:	4622      	mov	r2, r4
 80068e6:	462b      	mov	r3, r5
 80068e8:	f7f9 fe86 	bl	80005f8 <__aeabi_dmul>
 80068ec:	a338      	add	r3, pc, #224	; (adr r3, 80069d0 <__kernel_cos+0x158>)
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f7f9 fccb 	bl	800028c <__adddf3>
 80068f6:	4622      	mov	r2, r4
 80068f8:	462b      	mov	r3, r5
 80068fa:	f7f9 fe7d 	bl	80005f8 <__aeabi_dmul>
 80068fe:	a336      	add	r3, pc, #216	; (adr r3, 80069d8 <__kernel_cos+0x160>)
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f7f9 fcc0 	bl	8000288 <__aeabi_dsub>
 8006908:	4622      	mov	r2, r4
 800690a:	462b      	mov	r3, r5
 800690c:	f7f9 fe74 	bl	80005f8 <__aeabi_dmul>
 8006910:	a333      	add	r3, pc, #204	; (adr r3, 80069e0 <__kernel_cos+0x168>)
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	f7f9 fcb9 	bl	800028c <__adddf3>
 800691a:	4622      	mov	r2, r4
 800691c:	462b      	mov	r3, r5
 800691e:	f7f9 fe6b 	bl	80005f8 <__aeabi_dmul>
 8006922:	4622      	mov	r2, r4
 8006924:	462b      	mov	r3, r5
 8006926:	f7f9 fe67 	bl	80005f8 <__aeabi_dmul>
 800692a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800692e:	4604      	mov	r4, r0
 8006930:	460d      	mov	r5, r1
 8006932:	4630      	mov	r0, r6
 8006934:	4639      	mov	r1, r7
 8006936:	f7f9 fe5f 	bl	80005f8 <__aeabi_dmul>
 800693a:	460b      	mov	r3, r1
 800693c:	4602      	mov	r2, r0
 800693e:	4629      	mov	r1, r5
 8006940:	4620      	mov	r0, r4
 8006942:	f7f9 fca1 	bl	8000288 <__aeabi_dsub>
 8006946:	4b2b      	ldr	r3, [pc, #172]	; (80069f4 <__kernel_cos+0x17c>)
 8006948:	4598      	cmp	r8, r3
 800694a:	4606      	mov	r6, r0
 800694c:	460f      	mov	r7, r1
 800694e:	dc10      	bgt.n	8006972 <__kernel_cos+0xfa>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4650      	mov	r0, sl
 8006956:	4659      	mov	r1, fp
 8006958:	f7f9 fc96 	bl	8000288 <__aeabi_dsub>
 800695c:	460b      	mov	r3, r1
 800695e:	4926      	ldr	r1, [pc, #152]	; (80069f8 <__kernel_cos+0x180>)
 8006960:	4602      	mov	r2, r0
 8006962:	2000      	movs	r0, #0
 8006964:	f7f9 fc90 	bl	8000288 <__aeabi_dsub>
 8006968:	ec41 0b10 	vmov	d0, r0, r1
 800696c:	b003      	add	sp, #12
 800696e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006972:	4b22      	ldr	r3, [pc, #136]	; (80069fc <__kernel_cos+0x184>)
 8006974:	4920      	ldr	r1, [pc, #128]	; (80069f8 <__kernel_cos+0x180>)
 8006976:	4598      	cmp	r8, r3
 8006978:	bfcc      	ite	gt
 800697a:	4d21      	ldrgt	r5, [pc, #132]	; (8006a00 <__kernel_cos+0x188>)
 800697c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006980:	2400      	movs	r4, #0
 8006982:	4622      	mov	r2, r4
 8006984:	462b      	mov	r3, r5
 8006986:	2000      	movs	r0, #0
 8006988:	f7f9 fc7e 	bl	8000288 <__aeabi_dsub>
 800698c:	4622      	mov	r2, r4
 800698e:	4680      	mov	r8, r0
 8006990:	4689      	mov	r9, r1
 8006992:	462b      	mov	r3, r5
 8006994:	4650      	mov	r0, sl
 8006996:	4659      	mov	r1, fp
 8006998:	f7f9 fc76 	bl	8000288 <__aeabi_dsub>
 800699c:	4632      	mov	r2, r6
 800699e:	463b      	mov	r3, r7
 80069a0:	f7f9 fc72 	bl	8000288 <__aeabi_dsub>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	e7da      	b.n	8006964 <__kernel_cos+0xec>
 80069ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80069e8 <__kernel_cos+0x170>
 80069b2:	e7db      	b.n	800696c <__kernel_cos+0xf4>
 80069b4:	f3af 8000 	nop.w
 80069b8:	be8838d4 	.word	0xbe8838d4
 80069bc:	bda8fae9 	.word	0xbda8fae9
 80069c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80069c4:	3e21ee9e 	.word	0x3e21ee9e
 80069c8:	809c52ad 	.word	0x809c52ad
 80069cc:	3e927e4f 	.word	0x3e927e4f
 80069d0:	19cb1590 	.word	0x19cb1590
 80069d4:	3efa01a0 	.word	0x3efa01a0
 80069d8:	16c15177 	.word	0x16c15177
 80069dc:	3f56c16c 	.word	0x3f56c16c
 80069e0:	5555554c 	.word	0x5555554c
 80069e4:	3fa55555 	.word	0x3fa55555
 80069e8:	00000000 	.word	0x00000000
 80069ec:	3ff00000 	.word	0x3ff00000
 80069f0:	3fe00000 	.word	0x3fe00000
 80069f4:	3fd33332 	.word	0x3fd33332
 80069f8:	3ff00000 	.word	0x3ff00000
 80069fc:	3fe90000 	.word	0x3fe90000
 8006a00:	3fd20000 	.word	0x3fd20000
 8006a04:	00000000 	.word	0x00000000

08006a08 <__kernel_rem_pio2>:
 8006a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	ed2d 8b02 	vpush	{d8}
 8006a10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006a14:	f112 0f14 	cmn.w	r2, #20
 8006a18:	9308      	str	r3, [sp, #32]
 8006a1a:	9101      	str	r1, [sp, #4]
 8006a1c:	4bc4      	ldr	r3, [pc, #784]	; (8006d30 <__kernel_rem_pio2+0x328>)
 8006a1e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006a20:	900b      	str	r0, [sp, #44]	; 0x2c
 8006a22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	9b08      	ldr	r3, [sp, #32]
 8006a2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a2e:	bfa8      	it	ge
 8006a30:	1ed4      	subge	r4, r2, #3
 8006a32:	9306      	str	r3, [sp, #24]
 8006a34:	bfb2      	itee	lt
 8006a36:	2400      	movlt	r4, #0
 8006a38:	2318      	movge	r3, #24
 8006a3a:	fb94 f4f3 	sdivge	r4, r4, r3
 8006a3e:	f06f 0317 	mvn.w	r3, #23
 8006a42:	fb04 3303 	mla	r3, r4, r3, r3
 8006a46:	eb03 0a02 	add.w	sl, r3, r2
 8006a4a:	9b02      	ldr	r3, [sp, #8]
 8006a4c:	9a06      	ldr	r2, [sp, #24]
 8006a4e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006d20 <__kernel_rem_pio2+0x318>
 8006a52:	eb03 0802 	add.w	r8, r3, r2
 8006a56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006a58:	1aa7      	subs	r7, r4, r2
 8006a5a:	ae22      	add	r6, sp, #136	; 0x88
 8006a5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006a60:	2500      	movs	r5, #0
 8006a62:	4545      	cmp	r5, r8
 8006a64:	dd13      	ble.n	8006a8e <__kernel_rem_pio2+0x86>
 8006a66:	9b08      	ldr	r3, [sp, #32]
 8006a68:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006d20 <__kernel_rem_pio2+0x318>
 8006a6c:	aa22      	add	r2, sp, #136	; 0x88
 8006a6e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006a72:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006a76:	f04f 0800 	mov.w	r8, #0
 8006a7a:	9b02      	ldr	r3, [sp, #8]
 8006a7c:	4598      	cmp	r8, r3
 8006a7e:	dc2f      	bgt.n	8006ae0 <__kernel_rem_pio2+0xd8>
 8006a80:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006a84:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006a88:	462f      	mov	r7, r5
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	e01b      	b.n	8006ac6 <__kernel_rem_pio2+0xbe>
 8006a8e:	42ef      	cmn	r7, r5
 8006a90:	d407      	bmi.n	8006aa2 <__kernel_rem_pio2+0x9a>
 8006a92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006a96:	f7f9 fd45 	bl	8000524 <__aeabi_i2d>
 8006a9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006a9e:	3501      	adds	r5, #1
 8006aa0:	e7df      	b.n	8006a62 <__kernel_rem_pio2+0x5a>
 8006aa2:	ec51 0b18 	vmov	r0, r1, d8
 8006aa6:	e7f8      	b.n	8006a9a <__kernel_rem_pio2+0x92>
 8006aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006ab0:	f7f9 fda2 	bl	80005f8 <__aeabi_dmul>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006abc:	f7f9 fbe6 	bl	800028c <__adddf3>
 8006ac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	9b06      	ldr	r3, [sp, #24]
 8006ac8:	429e      	cmp	r6, r3
 8006aca:	f1a7 0708 	sub.w	r7, r7, #8
 8006ace:	ddeb      	ble.n	8006aa8 <__kernel_rem_pio2+0xa0>
 8006ad0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006ad4:	f108 0801 	add.w	r8, r8, #1
 8006ad8:	ecab 7b02 	vstmia	fp!, {d7}
 8006adc:	3508      	adds	r5, #8
 8006ade:	e7cc      	b.n	8006a7a <__kernel_rem_pio2+0x72>
 8006ae0:	9b02      	ldr	r3, [sp, #8]
 8006ae2:	aa0e      	add	r2, sp, #56	; 0x38
 8006ae4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006ae8:	930d      	str	r3, [sp, #52]	; 0x34
 8006aea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006aec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006af0:	9c02      	ldr	r4, [sp, #8]
 8006af2:	930c      	str	r3, [sp, #48]	; 0x30
 8006af4:	00e3      	lsls	r3, r4, #3
 8006af6:	930a      	str	r3, [sp, #40]	; 0x28
 8006af8:	ab9a      	add	r3, sp, #616	; 0x268
 8006afa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006afe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006b02:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006b06:	ab72      	add	r3, sp, #456	; 0x1c8
 8006b08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8006b0c:	46c3      	mov	fp, r8
 8006b0e:	46a1      	mov	r9, r4
 8006b10:	f1b9 0f00 	cmp.w	r9, #0
 8006b14:	f1a5 0508 	sub.w	r5, r5, #8
 8006b18:	dc77      	bgt.n	8006c0a <__kernel_rem_pio2+0x202>
 8006b1a:	ec47 6b10 	vmov	d0, r6, r7
 8006b1e:	4650      	mov	r0, sl
 8006b20:	f000 fc0a 	bl	8007338 <scalbn>
 8006b24:	ec57 6b10 	vmov	r6, r7, d0
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006b2e:	ee10 0a10 	vmov	r0, s0
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 fd60 	bl	80005f8 <__aeabi_dmul>
 8006b38:	ec41 0b10 	vmov	d0, r0, r1
 8006b3c:	f000 fb7c 	bl	8007238 <floor>
 8006b40:	4b7c      	ldr	r3, [pc, #496]	; (8006d34 <__kernel_rem_pio2+0x32c>)
 8006b42:	ec51 0b10 	vmov	r0, r1, d0
 8006b46:	2200      	movs	r2, #0
 8006b48:	f7f9 fd56 	bl	80005f8 <__aeabi_dmul>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 fb98 	bl	8000288 <__aeabi_dsub>
 8006b58:	460f      	mov	r7, r1
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	f7f9 fffc 	bl	8000b58 <__aeabi_d2iz>
 8006b60:	9004      	str	r0, [sp, #16]
 8006b62:	f7f9 fcdf 	bl	8000524 <__aeabi_i2d>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	4639      	mov	r1, r7
 8006b6e:	f7f9 fb8b 	bl	8000288 <__aeabi_dsub>
 8006b72:	f1ba 0f00 	cmp.w	sl, #0
 8006b76:	4606      	mov	r6, r0
 8006b78:	460f      	mov	r7, r1
 8006b7a:	dd6d      	ble.n	8006c58 <__kernel_rem_pio2+0x250>
 8006b7c:	1e62      	subs	r2, r4, #1
 8006b7e:	ab0e      	add	r3, sp, #56	; 0x38
 8006b80:	9d04      	ldr	r5, [sp, #16]
 8006b82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006b86:	f1ca 0118 	rsb	r1, sl, #24
 8006b8a:	fa40 f301 	asr.w	r3, r0, r1
 8006b8e:	441d      	add	r5, r3
 8006b90:	408b      	lsls	r3, r1
 8006b92:	1ac0      	subs	r0, r0, r3
 8006b94:	ab0e      	add	r3, sp, #56	; 0x38
 8006b96:	9504      	str	r5, [sp, #16]
 8006b98:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006b9c:	f1ca 0317 	rsb	r3, sl, #23
 8006ba0:	fa40 fb03 	asr.w	fp, r0, r3
 8006ba4:	f1bb 0f00 	cmp.w	fp, #0
 8006ba8:	dd65      	ble.n	8006c76 <__kernel_rem_pio2+0x26e>
 8006baa:	9b04      	ldr	r3, [sp, #16]
 8006bac:	2200      	movs	r2, #0
 8006bae:	3301      	adds	r3, #1
 8006bb0:	9304      	str	r3, [sp, #16]
 8006bb2:	4615      	mov	r5, r2
 8006bb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006bb8:	4294      	cmp	r4, r2
 8006bba:	f300 809c 	bgt.w	8006cf6 <__kernel_rem_pio2+0x2ee>
 8006bbe:	f1ba 0f00 	cmp.w	sl, #0
 8006bc2:	dd07      	ble.n	8006bd4 <__kernel_rem_pio2+0x1cc>
 8006bc4:	f1ba 0f01 	cmp.w	sl, #1
 8006bc8:	f000 80c0 	beq.w	8006d4c <__kernel_rem_pio2+0x344>
 8006bcc:	f1ba 0f02 	cmp.w	sl, #2
 8006bd0:	f000 80c6 	beq.w	8006d60 <__kernel_rem_pio2+0x358>
 8006bd4:	f1bb 0f02 	cmp.w	fp, #2
 8006bd8:	d14d      	bne.n	8006c76 <__kernel_rem_pio2+0x26e>
 8006bda:	4632      	mov	r2, r6
 8006bdc:	463b      	mov	r3, r7
 8006bde:	4956      	ldr	r1, [pc, #344]	; (8006d38 <__kernel_rem_pio2+0x330>)
 8006be0:	2000      	movs	r0, #0
 8006be2:	f7f9 fb51 	bl	8000288 <__aeabi_dsub>
 8006be6:	4606      	mov	r6, r0
 8006be8:	460f      	mov	r7, r1
 8006bea:	2d00      	cmp	r5, #0
 8006bec:	d043      	beq.n	8006c76 <__kernel_rem_pio2+0x26e>
 8006bee:	4650      	mov	r0, sl
 8006bf0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006d28 <__kernel_rem_pio2+0x320>
 8006bf4:	f000 fba0 	bl	8007338 <scalbn>
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	4639      	mov	r1, r7
 8006bfc:	ec53 2b10 	vmov	r2, r3, d0
 8006c00:	f7f9 fb42 	bl	8000288 <__aeabi_dsub>
 8006c04:	4606      	mov	r6, r0
 8006c06:	460f      	mov	r7, r1
 8006c08:	e035      	b.n	8006c76 <__kernel_rem_pio2+0x26e>
 8006c0a:	4b4c      	ldr	r3, [pc, #304]	; (8006d3c <__kernel_rem_pio2+0x334>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4630      	mov	r0, r6
 8006c10:	4639      	mov	r1, r7
 8006c12:	f7f9 fcf1 	bl	80005f8 <__aeabi_dmul>
 8006c16:	f7f9 ff9f 	bl	8000b58 <__aeabi_d2iz>
 8006c1a:	f7f9 fc83 	bl	8000524 <__aeabi_i2d>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	ec43 2b18 	vmov	d8, r2, r3
 8006c26:	4b46      	ldr	r3, [pc, #280]	; (8006d40 <__kernel_rem_pio2+0x338>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f7f9 fce5 	bl	80005f8 <__aeabi_dmul>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4630      	mov	r0, r6
 8006c34:	4639      	mov	r1, r7
 8006c36:	f7f9 fb27 	bl	8000288 <__aeabi_dsub>
 8006c3a:	f7f9 ff8d 	bl	8000b58 <__aeabi_d2iz>
 8006c3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c42:	f84b 0b04 	str.w	r0, [fp], #4
 8006c46:	ec51 0b18 	vmov	r0, r1, d8
 8006c4a:	f7f9 fb1f 	bl	800028c <__adddf3>
 8006c4e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006c52:	4606      	mov	r6, r0
 8006c54:	460f      	mov	r7, r1
 8006c56:	e75b      	b.n	8006b10 <__kernel_rem_pio2+0x108>
 8006c58:	d106      	bne.n	8006c68 <__kernel_rem_pio2+0x260>
 8006c5a:	1e63      	subs	r3, r4, #1
 8006c5c:	aa0e      	add	r2, sp, #56	; 0x38
 8006c5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006c62:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006c66:	e79d      	b.n	8006ba4 <__kernel_rem_pio2+0x19c>
 8006c68:	4b36      	ldr	r3, [pc, #216]	; (8006d44 <__kernel_rem_pio2+0x33c>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f7f9 ff4a 	bl	8000b04 <__aeabi_dcmpge>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d13d      	bne.n	8006cf0 <__kernel_rem_pio2+0x2e8>
 8006c74:	4683      	mov	fp, r0
 8006c76:	2200      	movs	r2, #0
 8006c78:	2300      	movs	r3, #0
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	f7f9 ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	f000 80c0 	beq.w	8006e08 <__kernel_rem_pio2+0x400>
 8006c88:	1e65      	subs	r5, r4, #1
 8006c8a:	462b      	mov	r3, r5
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	9902      	ldr	r1, [sp, #8]
 8006c90:	428b      	cmp	r3, r1
 8006c92:	da6c      	bge.n	8006d6e <__kernel_rem_pio2+0x366>
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	f000 8089 	beq.w	8006dac <__kernel_rem_pio2+0x3a4>
 8006c9a:	ab0e      	add	r3, sp, #56	; 0x38
 8006c9c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006ca0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80ad 	beq.w	8006e04 <__kernel_rem_pio2+0x3fc>
 8006caa:	4650      	mov	r0, sl
 8006cac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006d28 <__kernel_rem_pio2+0x320>
 8006cb0:	f000 fb42 	bl	8007338 <scalbn>
 8006cb4:	ab9a      	add	r3, sp, #616	; 0x268
 8006cb6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006cba:	ec57 6b10 	vmov	r6, r7, d0
 8006cbe:	00ec      	lsls	r4, r5, #3
 8006cc0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006cc4:	46aa      	mov	sl, r5
 8006cc6:	f1ba 0f00 	cmp.w	sl, #0
 8006cca:	f280 80d6 	bge.w	8006e7a <__kernel_rem_pio2+0x472>
 8006cce:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006d20 <__kernel_rem_pio2+0x318>
 8006cd2:	462e      	mov	r6, r5
 8006cd4:	2e00      	cmp	r6, #0
 8006cd6:	f2c0 8104 	blt.w	8006ee2 <__kernel_rem_pio2+0x4da>
 8006cda:	ab72      	add	r3, sp, #456	; 0x1c8
 8006cdc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006ce0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006d48 <__kernel_rem_pio2+0x340>
 8006ce4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006ce8:	f04f 0800 	mov.w	r8, #0
 8006cec:	1baf      	subs	r7, r5, r6
 8006cee:	e0ea      	b.n	8006ec6 <__kernel_rem_pio2+0x4be>
 8006cf0:	f04f 0b02 	mov.w	fp, #2
 8006cf4:	e759      	b.n	8006baa <__kernel_rem_pio2+0x1a2>
 8006cf6:	f8d8 3000 	ldr.w	r3, [r8]
 8006cfa:	b955      	cbnz	r5, 8006d12 <__kernel_rem_pio2+0x30a>
 8006cfc:	b123      	cbz	r3, 8006d08 <__kernel_rem_pio2+0x300>
 8006cfe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006d02:	f8c8 3000 	str.w	r3, [r8]
 8006d06:	2301      	movs	r3, #1
 8006d08:	3201      	adds	r2, #1
 8006d0a:	f108 0804 	add.w	r8, r8, #4
 8006d0e:	461d      	mov	r5, r3
 8006d10:	e752      	b.n	8006bb8 <__kernel_rem_pio2+0x1b0>
 8006d12:	1acb      	subs	r3, r1, r3
 8006d14:	f8c8 3000 	str.w	r3, [r8]
 8006d18:	462b      	mov	r3, r5
 8006d1a:	e7f5      	b.n	8006d08 <__kernel_rem_pio2+0x300>
 8006d1c:	f3af 8000 	nop.w
	...
 8006d2c:	3ff00000 	.word	0x3ff00000
 8006d30:	0800a2d0 	.word	0x0800a2d0
 8006d34:	40200000 	.word	0x40200000
 8006d38:	3ff00000 	.word	0x3ff00000
 8006d3c:	3e700000 	.word	0x3e700000
 8006d40:	41700000 	.word	0x41700000
 8006d44:	3fe00000 	.word	0x3fe00000
 8006d48:	0800a290 	.word	0x0800a290
 8006d4c:	1e62      	subs	r2, r4, #1
 8006d4e:	ab0e      	add	r3, sp, #56	; 0x38
 8006d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006d58:	a90e      	add	r1, sp, #56	; 0x38
 8006d5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d5e:	e739      	b.n	8006bd4 <__kernel_rem_pio2+0x1cc>
 8006d60:	1e62      	subs	r2, r4, #1
 8006d62:	ab0e      	add	r3, sp, #56	; 0x38
 8006d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006d6c:	e7f4      	b.n	8006d58 <__kernel_rem_pio2+0x350>
 8006d6e:	a90e      	add	r1, sp, #56	; 0x38
 8006d70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	430a      	orrs	r2, r1
 8006d78:	e789      	b.n	8006c8e <__kernel_rem_pio2+0x286>
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006d80:	2900      	cmp	r1, #0
 8006d82:	d0fa      	beq.n	8006d7a <__kernel_rem_pio2+0x372>
 8006d84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d86:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006d8a:	446a      	add	r2, sp
 8006d8c:	3a98      	subs	r2, #152	; 0x98
 8006d8e:	920a      	str	r2, [sp, #40]	; 0x28
 8006d90:	9a08      	ldr	r2, [sp, #32]
 8006d92:	18e3      	adds	r3, r4, r3
 8006d94:	18a5      	adds	r5, r4, r2
 8006d96:	aa22      	add	r2, sp, #136	; 0x88
 8006d98:	f104 0801 	add.w	r8, r4, #1
 8006d9c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006da0:	9304      	str	r3, [sp, #16]
 8006da2:	9b04      	ldr	r3, [sp, #16]
 8006da4:	4543      	cmp	r3, r8
 8006da6:	da04      	bge.n	8006db2 <__kernel_rem_pio2+0x3aa>
 8006da8:	461c      	mov	r4, r3
 8006daa:	e6a3      	b.n	8006af4 <__kernel_rem_pio2+0xec>
 8006dac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dae:	2301      	movs	r3, #1
 8006db0:	e7e4      	b.n	8006d7c <__kernel_rem_pio2+0x374>
 8006db2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006db4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006db8:	f7f9 fbb4 	bl	8000524 <__aeabi_i2d>
 8006dbc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc2:	46ab      	mov	fp, r5
 8006dc4:	461c      	mov	r4, r3
 8006dc6:	f04f 0900 	mov.w	r9, #0
 8006dca:	2600      	movs	r6, #0
 8006dcc:	2700      	movs	r7, #0
 8006dce:	9b06      	ldr	r3, [sp, #24]
 8006dd0:	4599      	cmp	r9, r3
 8006dd2:	dd06      	ble.n	8006de2 <__kernel_rem_pio2+0x3da>
 8006dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006dda:	f108 0801 	add.w	r8, r8, #1
 8006dde:	930a      	str	r3, [sp, #40]	; 0x28
 8006de0:	e7df      	b.n	8006da2 <__kernel_rem_pio2+0x39a>
 8006de2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006de6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006dea:	f7f9 fc05 	bl	80005f8 <__aeabi_dmul>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4630      	mov	r0, r6
 8006df4:	4639      	mov	r1, r7
 8006df6:	f7f9 fa49 	bl	800028c <__adddf3>
 8006dfa:	f109 0901 	add.w	r9, r9, #1
 8006dfe:	4606      	mov	r6, r0
 8006e00:	460f      	mov	r7, r1
 8006e02:	e7e4      	b.n	8006dce <__kernel_rem_pio2+0x3c6>
 8006e04:	3d01      	subs	r5, #1
 8006e06:	e748      	b.n	8006c9a <__kernel_rem_pio2+0x292>
 8006e08:	ec47 6b10 	vmov	d0, r6, r7
 8006e0c:	f1ca 0000 	rsb	r0, sl, #0
 8006e10:	f000 fa92 	bl	8007338 <scalbn>
 8006e14:	ec57 6b10 	vmov	r6, r7, d0
 8006e18:	4ba0      	ldr	r3, [pc, #640]	; (800709c <__kernel_rem_pio2+0x694>)
 8006e1a:	ee10 0a10 	vmov	r0, s0
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4639      	mov	r1, r7
 8006e22:	f7f9 fe6f 	bl	8000b04 <__aeabi_dcmpge>
 8006e26:	b1f8      	cbz	r0, 8006e68 <__kernel_rem_pio2+0x460>
 8006e28:	4b9d      	ldr	r3, [pc, #628]	; (80070a0 <__kernel_rem_pio2+0x698>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 fbe2 	bl	80005f8 <__aeabi_dmul>
 8006e34:	f7f9 fe90 	bl	8000b58 <__aeabi_d2iz>
 8006e38:	4680      	mov	r8, r0
 8006e3a:	f7f9 fb73 	bl	8000524 <__aeabi_i2d>
 8006e3e:	4b97      	ldr	r3, [pc, #604]	; (800709c <__kernel_rem_pio2+0x694>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f7f9 fbd9 	bl	80005f8 <__aeabi_dmul>
 8006e46:	460b      	mov	r3, r1
 8006e48:	4602      	mov	r2, r0
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7f9 fa1b 	bl	8000288 <__aeabi_dsub>
 8006e52:	f7f9 fe81 	bl	8000b58 <__aeabi_d2iz>
 8006e56:	1c65      	adds	r5, r4, #1
 8006e58:	ab0e      	add	r3, sp, #56	; 0x38
 8006e5a:	f10a 0a18 	add.w	sl, sl, #24
 8006e5e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e62:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006e66:	e720      	b.n	8006caa <__kernel_rem_pio2+0x2a2>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fe74 	bl	8000b58 <__aeabi_d2iz>
 8006e70:	ab0e      	add	r3, sp, #56	; 0x38
 8006e72:	4625      	mov	r5, r4
 8006e74:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e78:	e717      	b.n	8006caa <__kernel_rem_pio2+0x2a2>
 8006e7a:	ab0e      	add	r3, sp, #56	; 0x38
 8006e7c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006e80:	f7f9 fb50 	bl	8000524 <__aeabi_i2d>
 8006e84:	4632      	mov	r2, r6
 8006e86:	463b      	mov	r3, r7
 8006e88:	f7f9 fbb6 	bl	80005f8 <__aeabi_dmul>
 8006e8c:	4b84      	ldr	r3, [pc, #528]	; (80070a0 <__kernel_rem_pio2+0x698>)
 8006e8e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006e92:	2200      	movs	r2, #0
 8006e94:	4630      	mov	r0, r6
 8006e96:	4639      	mov	r1, r7
 8006e98:	f7f9 fbae 	bl	80005f8 <__aeabi_dmul>
 8006e9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460f      	mov	r7, r1
 8006ea4:	e70f      	b.n	8006cc6 <__kernel_rem_pio2+0x2be>
 8006ea6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006eaa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006eae:	f7f9 fba3 	bl	80005f8 <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006eba:	f7f9 f9e7 	bl	800028c <__adddf3>
 8006ebe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ec2:	f108 0801 	add.w	r8, r8, #1
 8006ec6:	9b02      	ldr	r3, [sp, #8]
 8006ec8:	4598      	cmp	r8, r3
 8006eca:	dc01      	bgt.n	8006ed0 <__kernel_rem_pio2+0x4c8>
 8006ecc:	45b8      	cmp	r8, r7
 8006ece:	ddea      	ble.n	8006ea6 <__kernel_rem_pio2+0x49e>
 8006ed0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006ed4:	ab4a      	add	r3, sp, #296	; 0x128
 8006ed6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006eda:	ed87 7b00 	vstr	d7, [r7]
 8006ede:	3e01      	subs	r6, #1
 8006ee0:	e6f8      	b.n	8006cd4 <__kernel_rem_pio2+0x2cc>
 8006ee2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	dc0b      	bgt.n	8006f00 <__kernel_rem_pio2+0x4f8>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	dc35      	bgt.n	8006f58 <__kernel_rem_pio2+0x550>
 8006eec:	d059      	beq.n	8006fa2 <__kernel_rem_pio2+0x59a>
 8006eee:	9b04      	ldr	r3, [sp, #16]
 8006ef0:	f003 0007 	and.w	r0, r3, #7
 8006ef4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006ef8:	ecbd 8b02 	vpop	{d8}
 8006efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f00:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d1f3      	bne.n	8006eee <__kernel_rem_pio2+0x4e6>
 8006f06:	ab4a      	add	r3, sp, #296	; 0x128
 8006f08:	4423      	add	r3, r4
 8006f0a:	9306      	str	r3, [sp, #24]
 8006f0c:	461c      	mov	r4, r3
 8006f0e:	469a      	mov	sl, r3
 8006f10:	9502      	str	r5, [sp, #8]
 8006f12:	9b02      	ldr	r3, [sp, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f1aa 0a08 	sub.w	sl, sl, #8
 8006f1a:	dc6b      	bgt.n	8006ff4 <__kernel_rem_pio2+0x5ec>
 8006f1c:	46aa      	mov	sl, r5
 8006f1e:	f1ba 0f01 	cmp.w	sl, #1
 8006f22:	f1a4 0408 	sub.w	r4, r4, #8
 8006f26:	f300 8085 	bgt.w	8007034 <__kernel_rem_pio2+0x62c>
 8006f2a:	9c06      	ldr	r4, [sp, #24]
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	3408      	adds	r4, #8
 8006f30:	2100      	movs	r1, #0
 8006f32:	2d01      	cmp	r5, #1
 8006f34:	f300 809d 	bgt.w	8007072 <__kernel_rem_pio2+0x66a>
 8006f38:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006f3c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006f40:	f1bb 0f00 	cmp.w	fp, #0
 8006f44:	f040 809b 	bne.w	800707e <__kernel_rem_pio2+0x676>
 8006f48:	9b01      	ldr	r3, [sp, #4]
 8006f4a:	e9c3 5600 	strd	r5, r6, [r3]
 8006f4e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006f52:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006f56:	e7ca      	b.n	8006eee <__kernel_rem_pio2+0x4e6>
 8006f58:	3408      	adds	r4, #8
 8006f5a:	ab4a      	add	r3, sp, #296	; 0x128
 8006f5c:	441c      	add	r4, r3
 8006f5e:	462e      	mov	r6, r5
 8006f60:	2000      	movs	r0, #0
 8006f62:	2100      	movs	r1, #0
 8006f64:	2e00      	cmp	r6, #0
 8006f66:	da36      	bge.n	8006fd6 <__kernel_rem_pio2+0x5ce>
 8006f68:	f1bb 0f00 	cmp.w	fp, #0
 8006f6c:	d039      	beq.n	8006fe2 <__kernel_rem_pio2+0x5da>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f74:	9c01      	ldr	r4, [sp, #4]
 8006f76:	e9c4 2300 	strd	r2, r3, [r4]
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006f82:	f7f9 f981 	bl	8000288 <__aeabi_dsub>
 8006f86:	ae4c      	add	r6, sp, #304	; 0x130
 8006f88:	2401      	movs	r4, #1
 8006f8a:	42a5      	cmp	r5, r4
 8006f8c:	da2c      	bge.n	8006fe8 <__kernel_rem_pio2+0x5e0>
 8006f8e:	f1bb 0f00 	cmp.w	fp, #0
 8006f92:	d002      	beq.n	8006f9a <__kernel_rem_pio2+0x592>
 8006f94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f98:	4619      	mov	r1, r3
 8006f9a:	9b01      	ldr	r3, [sp, #4]
 8006f9c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006fa0:	e7a5      	b.n	8006eee <__kernel_rem_pio2+0x4e6>
 8006fa2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006fa6:	eb0d 0403 	add.w	r4, sp, r3
 8006faa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006fae:	2000      	movs	r0, #0
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	2d00      	cmp	r5, #0
 8006fb4:	da09      	bge.n	8006fca <__kernel_rem_pio2+0x5c2>
 8006fb6:	f1bb 0f00 	cmp.w	fp, #0
 8006fba:	d002      	beq.n	8006fc2 <__kernel_rem_pio2+0x5ba>
 8006fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	9b01      	ldr	r3, [sp, #4]
 8006fc4:	e9c3 0100 	strd	r0, r1, [r3]
 8006fc8:	e791      	b.n	8006eee <__kernel_rem_pio2+0x4e6>
 8006fca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006fce:	f7f9 f95d 	bl	800028c <__adddf3>
 8006fd2:	3d01      	subs	r5, #1
 8006fd4:	e7ed      	b.n	8006fb2 <__kernel_rem_pio2+0x5aa>
 8006fd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006fda:	f7f9 f957 	bl	800028c <__adddf3>
 8006fde:	3e01      	subs	r6, #1
 8006fe0:	e7c0      	b.n	8006f64 <__kernel_rem_pio2+0x55c>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	e7c5      	b.n	8006f74 <__kernel_rem_pio2+0x56c>
 8006fe8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006fec:	f7f9 f94e 	bl	800028c <__adddf3>
 8006ff0:	3401      	adds	r4, #1
 8006ff2:	e7ca      	b.n	8006f8a <__kernel_rem_pio2+0x582>
 8006ff4:	e9da 8900 	ldrd	r8, r9, [sl]
 8006ff8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006ffc:	9b02      	ldr	r3, [sp, #8]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	9302      	str	r3, [sp, #8]
 8007002:	4632      	mov	r2, r6
 8007004:	463b      	mov	r3, r7
 8007006:	4640      	mov	r0, r8
 8007008:	4649      	mov	r1, r9
 800700a:	f7f9 f93f 	bl	800028c <__adddf3>
 800700e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4640      	mov	r0, r8
 8007018:	4649      	mov	r1, r9
 800701a:	f7f9 f935 	bl	8000288 <__aeabi_dsub>
 800701e:	4632      	mov	r2, r6
 8007020:	463b      	mov	r3, r7
 8007022:	f7f9 f933 	bl	800028c <__adddf3>
 8007026:	ed9d 7b08 	vldr	d7, [sp, #32]
 800702a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800702e:	ed8a 7b00 	vstr	d7, [sl]
 8007032:	e76e      	b.n	8006f12 <__kernel_rem_pio2+0x50a>
 8007034:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007038:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800703c:	4640      	mov	r0, r8
 800703e:	4632      	mov	r2, r6
 8007040:	463b      	mov	r3, r7
 8007042:	4649      	mov	r1, r9
 8007044:	f7f9 f922 	bl	800028c <__adddf3>
 8007048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	4640      	mov	r0, r8
 8007052:	4649      	mov	r1, r9
 8007054:	f7f9 f918 	bl	8000288 <__aeabi_dsub>
 8007058:	4632      	mov	r2, r6
 800705a:	463b      	mov	r3, r7
 800705c:	f7f9 f916 	bl	800028c <__adddf3>
 8007060:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007064:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007068:	ed84 7b00 	vstr	d7, [r4]
 800706c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007070:	e755      	b.n	8006f1e <__kernel_rem_pio2+0x516>
 8007072:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007076:	f7f9 f909 	bl	800028c <__adddf3>
 800707a:	3d01      	subs	r5, #1
 800707c:	e759      	b.n	8006f32 <__kernel_rem_pio2+0x52a>
 800707e:	9b01      	ldr	r3, [sp, #4]
 8007080:	9a01      	ldr	r2, [sp, #4]
 8007082:	601d      	str	r5, [r3, #0]
 8007084:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007088:	605c      	str	r4, [r3, #4]
 800708a:	609f      	str	r7, [r3, #8]
 800708c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007090:	60d3      	str	r3, [r2, #12]
 8007092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007096:	6110      	str	r0, [r2, #16]
 8007098:	6153      	str	r3, [r2, #20]
 800709a:	e728      	b.n	8006eee <__kernel_rem_pio2+0x4e6>
 800709c:	41700000 	.word	0x41700000
 80070a0:	3e700000 	.word	0x3e700000
 80070a4:	00000000 	.word	0x00000000

080070a8 <__kernel_sin>:
 80070a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	ed2d 8b04 	vpush	{d8-d9}
 80070b0:	eeb0 8a41 	vmov.f32	s16, s2
 80070b4:	eef0 8a61 	vmov.f32	s17, s3
 80070b8:	ec55 4b10 	vmov	r4, r5, d0
 80070bc:	b083      	sub	sp, #12
 80070be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80070c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80070c6:	9001      	str	r0, [sp, #4]
 80070c8:	da06      	bge.n	80070d8 <__kernel_sin+0x30>
 80070ca:	ee10 0a10 	vmov	r0, s0
 80070ce:	4629      	mov	r1, r5
 80070d0:	f7f9 fd42 	bl	8000b58 <__aeabi_d2iz>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d051      	beq.n	800717c <__kernel_sin+0xd4>
 80070d8:	4622      	mov	r2, r4
 80070da:	462b      	mov	r3, r5
 80070dc:	4620      	mov	r0, r4
 80070de:	4629      	mov	r1, r5
 80070e0:	f7f9 fa8a 	bl	80005f8 <__aeabi_dmul>
 80070e4:	4682      	mov	sl, r0
 80070e6:	468b      	mov	fp, r1
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	f7f9 fa82 	bl	80005f8 <__aeabi_dmul>
 80070f4:	a341      	add	r3, pc, #260	; (adr r3, 80071fc <__kernel_sin+0x154>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	4680      	mov	r8, r0
 80070fc:	4689      	mov	r9, r1
 80070fe:	4650      	mov	r0, sl
 8007100:	4659      	mov	r1, fp
 8007102:	f7f9 fa79 	bl	80005f8 <__aeabi_dmul>
 8007106:	a33f      	add	r3, pc, #252	; (adr r3, 8007204 <__kernel_sin+0x15c>)
 8007108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710c:	f7f9 f8bc 	bl	8000288 <__aeabi_dsub>
 8007110:	4652      	mov	r2, sl
 8007112:	465b      	mov	r3, fp
 8007114:	f7f9 fa70 	bl	80005f8 <__aeabi_dmul>
 8007118:	a33c      	add	r3, pc, #240	; (adr r3, 800720c <__kernel_sin+0x164>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f7f9 f8b5 	bl	800028c <__adddf3>
 8007122:	4652      	mov	r2, sl
 8007124:	465b      	mov	r3, fp
 8007126:	f7f9 fa67 	bl	80005f8 <__aeabi_dmul>
 800712a:	a33a      	add	r3, pc, #232	; (adr r3, 8007214 <__kernel_sin+0x16c>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f7f9 f8aa 	bl	8000288 <__aeabi_dsub>
 8007134:	4652      	mov	r2, sl
 8007136:	465b      	mov	r3, fp
 8007138:	f7f9 fa5e 	bl	80005f8 <__aeabi_dmul>
 800713c:	a337      	add	r3, pc, #220	; (adr r3, 800721c <__kernel_sin+0x174>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f7f9 f8a3 	bl	800028c <__adddf3>
 8007146:	9b01      	ldr	r3, [sp, #4]
 8007148:	4606      	mov	r6, r0
 800714a:	460f      	mov	r7, r1
 800714c:	b9eb      	cbnz	r3, 800718a <__kernel_sin+0xe2>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4650      	mov	r0, sl
 8007154:	4659      	mov	r1, fp
 8007156:	f7f9 fa4f 	bl	80005f8 <__aeabi_dmul>
 800715a:	a325      	add	r3, pc, #148	; (adr r3, 80071f0 <__kernel_sin+0x148>)
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	f7f9 f892 	bl	8000288 <__aeabi_dsub>
 8007164:	4642      	mov	r2, r8
 8007166:	464b      	mov	r3, r9
 8007168:	f7f9 fa46 	bl	80005f8 <__aeabi_dmul>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4620      	mov	r0, r4
 8007172:	4629      	mov	r1, r5
 8007174:	f7f9 f88a 	bl	800028c <__adddf3>
 8007178:	4604      	mov	r4, r0
 800717a:	460d      	mov	r5, r1
 800717c:	ec45 4b10 	vmov	d0, r4, r5
 8007180:	b003      	add	sp, #12
 8007182:	ecbd 8b04 	vpop	{d8-d9}
 8007186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800718a:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <__kernel_sin+0x150>)
 800718c:	ec51 0b18 	vmov	r0, r1, d8
 8007190:	2200      	movs	r2, #0
 8007192:	f7f9 fa31 	bl	80005f8 <__aeabi_dmul>
 8007196:	4632      	mov	r2, r6
 8007198:	ec41 0b19 	vmov	d9, r0, r1
 800719c:	463b      	mov	r3, r7
 800719e:	4640      	mov	r0, r8
 80071a0:	4649      	mov	r1, r9
 80071a2:	f7f9 fa29 	bl	80005f8 <__aeabi_dmul>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	ec51 0b19 	vmov	r0, r1, d9
 80071ae:	f7f9 f86b 	bl	8000288 <__aeabi_dsub>
 80071b2:	4652      	mov	r2, sl
 80071b4:	465b      	mov	r3, fp
 80071b6:	f7f9 fa1f 	bl	80005f8 <__aeabi_dmul>
 80071ba:	ec53 2b18 	vmov	r2, r3, d8
 80071be:	f7f9 f863 	bl	8000288 <__aeabi_dsub>
 80071c2:	a30b      	add	r3, pc, #44	; (adr r3, 80071f0 <__kernel_sin+0x148>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	4606      	mov	r6, r0
 80071ca:	460f      	mov	r7, r1
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f9 fa12 	bl	80005f8 <__aeabi_dmul>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 f856 	bl	800028c <__adddf3>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4620      	mov	r0, r4
 80071e6:	4629      	mov	r1, r5
 80071e8:	f7f9 f84e 	bl	8000288 <__aeabi_dsub>
 80071ec:	e7c4      	b.n	8007178 <__kernel_sin+0xd0>
 80071ee:	bf00      	nop
 80071f0:	55555549 	.word	0x55555549
 80071f4:	3fc55555 	.word	0x3fc55555
 80071f8:	3fe00000 	.word	0x3fe00000
 80071fc:	5acfd57c 	.word	0x5acfd57c
 8007200:	3de5d93a 	.word	0x3de5d93a
 8007204:	8a2b9ceb 	.word	0x8a2b9ceb
 8007208:	3e5ae5e6 	.word	0x3e5ae5e6
 800720c:	57b1fe7d 	.word	0x57b1fe7d
 8007210:	3ec71de3 	.word	0x3ec71de3
 8007214:	19c161d5 	.word	0x19c161d5
 8007218:	3f2a01a0 	.word	0x3f2a01a0
 800721c:	1110f8a6 	.word	0x1110f8a6
 8007220:	3f811111 	.word	0x3f811111

08007224 <fabs>:
 8007224:	ec51 0b10 	vmov	r0, r1, d0
 8007228:	ee10 2a10 	vmov	r2, s0
 800722c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007230:	ec43 2b10 	vmov	d0, r2, r3
 8007234:	4770      	bx	lr
	...

08007238 <floor>:
 8007238:	ec51 0b10 	vmov	r0, r1, d0
 800723c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007240:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007244:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007248:	2e13      	cmp	r6, #19
 800724a:	ee10 5a10 	vmov	r5, s0
 800724e:	ee10 8a10 	vmov	r8, s0
 8007252:	460c      	mov	r4, r1
 8007254:	dc32      	bgt.n	80072bc <floor+0x84>
 8007256:	2e00      	cmp	r6, #0
 8007258:	da14      	bge.n	8007284 <floor+0x4c>
 800725a:	a333      	add	r3, pc, #204	; (adr r3, 8007328 <floor+0xf0>)
 800725c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007260:	f7f9 f814 	bl	800028c <__adddf3>
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
 8007268:	f7f9 fc56 	bl	8000b18 <__aeabi_dcmpgt>
 800726c:	b138      	cbz	r0, 800727e <floor+0x46>
 800726e:	2c00      	cmp	r4, #0
 8007270:	da57      	bge.n	8007322 <floor+0xea>
 8007272:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007276:	431d      	orrs	r5, r3
 8007278:	d001      	beq.n	800727e <floor+0x46>
 800727a:	4c2d      	ldr	r4, [pc, #180]	; (8007330 <floor+0xf8>)
 800727c:	2500      	movs	r5, #0
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	e025      	b.n	80072d0 <floor+0x98>
 8007284:	4f2b      	ldr	r7, [pc, #172]	; (8007334 <floor+0xfc>)
 8007286:	4137      	asrs	r7, r6
 8007288:	ea01 0307 	and.w	r3, r1, r7
 800728c:	4303      	orrs	r3, r0
 800728e:	d01f      	beq.n	80072d0 <floor+0x98>
 8007290:	a325      	add	r3, pc, #148	; (adr r3, 8007328 <floor+0xf0>)
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f7f8 fff9 	bl	800028c <__adddf3>
 800729a:	2200      	movs	r2, #0
 800729c:	2300      	movs	r3, #0
 800729e:	f7f9 fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d0eb      	beq.n	800727e <floor+0x46>
 80072a6:	2c00      	cmp	r4, #0
 80072a8:	bfbe      	ittt	lt
 80072aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80072ae:	fa43 f606 	asrlt.w	r6, r3, r6
 80072b2:	19a4      	addlt	r4, r4, r6
 80072b4:	ea24 0407 	bic.w	r4, r4, r7
 80072b8:	2500      	movs	r5, #0
 80072ba:	e7e0      	b.n	800727e <floor+0x46>
 80072bc:	2e33      	cmp	r6, #51	; 0x33
 80072be:	dd0b      	ble.n	80072d8 <floor+0xa0>
 80072c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80072c4:	d104      	bne.n	80072d0 <floor+0x98>
 80072c6:	ee10 2a10 	vmov	r2, s0
 80072ca:	460b      	mov	r3, r1
 80072cc:	f7f8 ffde 	bl	800028c <__adddf3>
 80072d0:	ec41 0b10 	vmov	d0, r0, r1
 80072d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	fa23 f707 	lsr.w	r7, r3, r7
 80072e4:	4207      	tst	r7, r0
 80072e6:	d0f3      	beq.n	80072d0 <floor+0x98>
 80072e8:	a30f      	add	r3, pc, #60	; (adr r3, 8007328 <floor+0xf0>)
 80072ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ee:	f7f8 ffcd 	bl	800028c <__adddf3>
 80072f2:	2200      	movs	r2, #0
 80072f4:	2300      	movs	r3, #0
 80072f6:	f7f9 fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d0bf      	beq.n	800727e <floor+0x46>
 80072fe:	2c00      	cmp	r4, #0
 8007300:	da02      	bge.n	8007308 <floor+0xd0>
 8007302:	2e14      	cmp	r6, #20
 8007304:	d103      	bne.n	800730e <floor+0xd6>
 8007306:	3401      	adds	r4, #1
 8007308:	ea25 0507 	bic.w	r5, r5, r7
 800730c:	e7b7      	b.n	800727e <floor+0x46>
 800730e:	2301      	movs	r3, #1
 8007310:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007314:	fa03 f606 	lsl.w	r6, r3, r6
 8007318:	4435      	add	r5, r6
 800731a:	4545      	cmp	r5, r8
 800731c:	bf38      	it	cc
 800731e:	18e4      	addcc	r4, r4, r3
 8007320:	e7f2      	b.n	8007308 <floor+0xd0>
 8007322:	2500      	movs	r5, #0
 8007324:	462c      	mov	r4, r5
 8007326:	e7aa      	b.n	800727e <floor+0x46>
 8007328:	8800759c 	.word	0x8800759c
 800732c:	7e37e43c 	.word	0x7e37e43c
 8007330:	bff00000 	.word	0xbff00000
 8007334:	000fffff 	.word	0x000fffff

08007338 <scalbn>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	ec55 4b10 	vmov	r4, r5, d0
 800733e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007342:	4606      	mov	r6, r0
 8007344:	462b      	mov	r3, r5
 8007346:	b99a      	cbnz	r2, 8007370 <scalbn+0x38>
 8007348:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800734c:	4323      	orrs	r3, r4
 800734e:	d036      	beq.n	80073be <scalbn+0x86>
 8007350:	4b39      	ldr	r3, [pc, #228]	; (8007438 <scalbn+0x100>)
 8007352:	4629      	mov	r1, r5
 8007354:	ee10 0a10 	vmov	r0, s0
 8007358:	2200      	movs	r2, #0
 800735a:	f7f9 f94d 	bl	80005f8 <__aeabi_dmul>
 800735e:	4b37      	ldr	r3, [pc, #220]	; (800743c <scalbn+0x104>)
 8007360:	429e      	cmp	r6, r3
 8007362:	4604      	mov	r4, r0
 8007364:	460d      	mov	r5, r1
 8007366:	da10      	bge.n	800738a <scalbn+0x52>
 8007368:	a32b      	add	r3, pc, #172	; (adr r3, 8007418 <scalbn+0xe0>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	e03a      	b.n	80073e6 <scalbn+0xae>
 8007370:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007374:	428a      	cmp	r2, r1
 8007376:	d10c      	bne.n	8007392 <scalbn+0x5a>
 8007378:	ee10 2a10 	vmov	r2, s0
 800737c:	4620      	mov	r0, r4
 800737e:	4629      	mov	r1, r5
 8007380:	f7f8 ff84 	bl	800028c <__adddf3>
 8007384:	4604      	mov	r4, r0
 8007386:	460d      	mov	r5, r1
 8007388:	e019      	b.n	80073be <scalbn+0x86>
 800738a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800738e:	460b      	mov	r3, r1
 8007390:	3a36      	subs	r2, #54	; 0x36
 8007392:	4432      	add	r2, r6
 8007394:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007398:	428a      	cmp	r2, r1
 800739a:	dd08      	ble.n	80073ae <scalbn+0x76>
 800739c:	2d00      	cmp	r5, #0
 800739e:	a120      	add	r1, pc, #128	; (adr r1, 8007420 <scalbn+0xe8>)
 80073a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a4:	da1c      	bge.n	80073e0 <scalbn+0xa8>
 80073a6:	a120      	add	r1, pc, #128	; (adr r1, 8007428 <scalbn+0xf0>)
 80073a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073ac:	e018      	b.n	80073e0 <scalbn+0xa8>
 80073ae:	2a00      	cmp	r2, #0
 80073b0:	dd08      	ble.n	80073c4 <scalbn+0x8c>
 80073b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80073b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80073ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80073be:	ec45 4b10 	vmov	d0, r4, r5
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
 80073c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80073c8:	da19      	bge.n	80073fe <scalbn+0xc6>
 80073ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80073ce:	429e      	cmp	r6, r3
 80073d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80073d4:	dd0a      	ble.n	80073ec <scalbn+0xb4>
 80073d6:	a112      	add	r1, pc, #72	; (adr r1, 8007420 <scalbn+0xe8>)
 80073d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e2      	bne.n	80073a6 <scalbn+0x6e>
 80073e0:	a30f      	add	r3, pc, #60	; (adr r3, 8007420 <scalbn+0xe8>)
 80073e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e6:	f7f9 f907 	bl	80005f8 <__aeabi_dmul>
 80073ea:	e7cb      	b.n	8007384 <scalbn+0x4c>
 80073ec:	a10a      	add	r1, pc, #40	; (adr r1, 8007418 <scalbn+0xe0>)
 80073ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0b8      	beq.n	8007368 <scalbn+0x30>
 80073f6:	a10e      	add	r1, pc, #56	; (adr r1, 8007430 <scalbn+0xf8>)
 80073f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073fc:	e7b4      	b.n	8007368 <scalbn+0x30>
 80073fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007402:	3236      	adds	r2, #54	; 0x36
 8007404:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007408:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800740c:	4620      	mov	r0, r4
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <scalbn+0x108>)
 8007410:	2200      	movs	r2, #0
 8007412:	e7e8      	b.n	80073e6 <scalbn+0xae>
 8007414:	f3af 8000 	nop.w
 8007418:	c2f8f359 	.word	0xc2f8f359
 800741c:	01a56e1f 	.word	0x01a56e1f
 8007420:	8800759c 	.word	0x8800759c
 8007424:	7e37e43c 	.word	0x7e37e43c
 8007428:	8800759c 	.word	0x8800759c
 800742c:	fe37e43c 	.word	0xfe37e43c
 8007430:	c2f8f359 	.word	0xc2f8f359
 8007434:	81a56e1f 	.word	0x81a56e1f
 8007438:	43500000 	.word	0x43500000
 800743c:	ffff3cb0 	.word	0xffff3cb0
 8007440:	3c900000 	.word	0x3c900000

08007444 <__errno>:
 8007444:	4b01      	ldr	r3, [pc, #4]	; (800744c <__errno+0x8>)
 8007446:	6818      	ldr	r0, [r3, #0]
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	2000000c 	.word	0x2000000c

08007450 <__libc_init_array>:
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	4d0d      	ldr	r5, [pc, #52]	; (8007488 <__libc_init_array+0x38>)
 8007454:	4c0d      	ldr	r4, [pc, #52]	; (800748c <__libc_init_array+0x3c>)
 8007456:	1b64      	subs	r4, r4, r5
 8007458:	10a4      	asrs	r4, r4, #2
 800745a:	2600      	movs	r6, #0
 800745c:	42a6      	cmp	r6, r4
 800745e:	d109      	bne.n	8007474 <__libc_init_array+0x24>
 8007460:	4d0b      	ldr	r5, [pc, #44]	; (8007490 <__libc_init_array+0x40>)
 8007462:	4c0c      	ldr	r4, [pc, #48]	; (8007494 <__libc_init_array+0x44>)
 8007464:	f002 fdc2 	bl	8009fec <_init>
 8007468:	1b64      	subs	r4, r4, r5
 800746a:	10a4      	asrs	r4, r4, #2
 800746c:	2600      	movs	r6, #0
 800746e:	42a6      	cmp	r6, r4
 8007470:	d105      	bne.n	800747e <__libc_init_array+0x2e>
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	f855 3b04 	ldr.w	r3, [r5], #4
 8007478:	4798      	blx	r3
 800747a:	3601      	adds	r6, #1
 800747c:	e7ee      	b.n	800745c <__libc_init_array+0xc>
 800747e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007482:	4798      	blx	r3
 8007484:	3601      	adds	r6, #1
 8007486:	e7f2      	b.n	800746e <__libc_init_array+0x1e>
 8007488:	0800a6bc 	.word	0x0800a6bc
 800748c:	0800a6bc 	.word	0x0800a6bc
 8007490:	0800a6bc 	.word	0x0800a6bc
 8007494:	0800a6c0 	.word	0x0800a6c0

08007498 <memset>:
 8007498:	4402      	add	r2, r0
 800749a:	4603      	mov	r3, r0
 800749c:	4293      	cmp	r3, r2
 800749e:	d100      	bne.n	80074a2 <memset+0xa>
 80074a0:	4770      	bx	lr
 80074a2:	f803 1b01 	strb.w	r1, [r3], #1
 80074a6:	e7f9      	b.n	800749c <memset+0x4>

080074a8 <__cvt>:
 80074a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074ac:	ec55 4b10 	vmov	r4, r5, d0
 80074b0:	2d00      	cmp	r5, #0
 80074b2:	460e      	mov	r6, r1
 80074b4:	4619      	mov	r1, r3
 80074b6:	462b      	mov	r3, r5
 80074b8:	bfbb      	ittet	lt
 80074ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80074be:	461d      	movlt	r5, r3
 80074c0:	2300      	movge	r3, #0
 80074c2:	232d      	movlt	r3, #45	; 0x2d
 80074c4:	700b      	strb	r3, [r1, #0]
 80074c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80074cc:	4691      	mov	r9, r2
 80074ce:	f023 0820 	bic.w	r8, r3, #32
 80074d2:	bfbc      	itt	lt
 80074d4:	4622      	movlt	r2, r4
 80074d6:	4614      	movlt	r4, r2
 80074d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80074dc:	d005      	beq.n	80074ea <__cvt+0x42>
 80074de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80074e2:	d100      	bne.n	80074e6 <__cvt+0x3e>
 80074e4:	3601      	adds	r6, #1
 80074e6:	2102      	movs	r1, #2
 80074e8:	e000      	b.n	80074ec <__cvt+0x44>
 80074ea:	2103      	movs	r1, #3
 80074ec:	ab03      	add	r3, sp, #12
 80074ee:	9301      	str	r3, [sp, #4]
 80074f0:	ab02      	add	r3, sp, #8
 80074f2:	9300      	str	r3, [sp, #0]
 80074f4:	ec45 4b10 	vmov	d0, r4, r5
 80074f8:	4653      	mov	r3, sl
 80074fa:	4632      	mov	r2, r6
 80074fc:	f000 fe18 	bl	8008130 <_dtoa_r>
 8007500:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007504:	4607      	mov	r7, r0
 8007506:	d102      	bne.n	800750e <__cvt+0x66>
 8007508:	f019 0f01 	tst.w	r9, #1
 800750c:	d022      	beq.n	8007554 <__cvt+0xac>
 800750e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007512:	eb07 0906 	add.w	r9, r7, r6
 8007516:	d110      	bne.n	800753a <__cvt+0x92>
 8007518:	783b      	ldrb	r3, [r7, #0]
 800751a:	2b30      	cmp	r3, #48	; 0x30
 800751c:	d10a      	bne.n	8007534 <__cvt+0x8c>
 800751e:	2200      	movs	r2, #0
 8007520:	2300      	movs	r3, #0
 8007522:	4620      	mov	r0, r4
 8007524:	4629      	mov	r1, r5
 8007526:	f7f9 facf 	bl	8000ac8 <__aeabi_dcmpeq>
 800752a:	b918      	cbnz	r0, 8007534 <__cvt+0x8c>
 800752c:	f1c6 0601 	rsb	r6, r6, #1
 8007530:	f8ca 6000 	str.w	r6, [sl]
 8007534:	f8da 3000 	ldr.w	r3, [sl]
 8007538:	4499      	add	r9, r3
 800753a:	2200      	movs	r2, #0
 800753c:	2300      	movs	r3, #0
 800753e:	4620      	mov	r0, r4
 8007540:	4629      	mov	r1, r5
 8007542:	f7f9 fac1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007546:	b108      	cbz	r0, 800754c <__cvt+0xa4>
 8007548:	f8cd 900c 	str.w	r9, [sp, #12]
 800754c:	2230      	movs	r2, #48	; 0x30
 800754e:	9b03      	ldr	r3, [sp, #12]
 8007550:	454b      	cmp	r3, r9
 8007552:	d307      	bcc.n	8007564 <__cvt+0xbc>
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007558:	1bdb      	subs	r3, r3, r7
 800755a:	4638      	mov	r0, r7
 800755c:	6013      	str	r3, [r2, #0]
 800755e:	b004      	add	sp, #16
 8007560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007564:	1c59      	adds	r1, r3, #1
 8007566:	9103      	str	r1, [sp, #12]
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	e7f0      	b.n	800754e <__cvt+0xa6>

0800756c <__exponent>:
 800756c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800756e:	4603      	mov	r3, r0
 8007570:	2900      	cmp	r1, #0
 8007572:	bfb8      	it	lt
 8007574:	4249      	neglt	r1, r1
 8007576:	f803 2b02 	strb.w	r2, [r3], #2
 800757a:	bfb4      	ite	lt
 800757c:	222d      	movlt	r2, #45	; 0x2d
 800757e:	222b      	movge	r2, #43	; 0x2b
 8007580:	2909      	cmp	r1, #9
 8007582:	7042      	strb	r2, [r0, #1]
 8007584:	dd2a      	ble.n	80075dc <__exponent+0x70>
 8007586:	f10d 0407 	add.w	r4, sp, #7
 800758a:	46a4      	mov	ip, r4
 800758c:	270a      	movs	r7, #10
 800758e:	46a6      	mov	lr, r4
 8007590:	460a      	mov	r2, r1
 8007592:	fb91 f6f7 	sdiv	r6, r1, r7
 8007596:	fb07 1516 	mls	r5, r7, r6, r1
 800759a:	3530      	adds	r5, #48	; 0x30
 800759c:	2a63      	cmp	r2, #99	; 0x63
 800759e:	f104 34ff 	add.w	r4, r4, #4294967295
 80075a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80075a6:	4631      	mov	r1, r6
 80075a8:	dcf1      	bgt.n	800758e <__exponent+0x22>
 80075aa:	3130      	adds	r1, #48	; 0x30
 80075ac:	f1ae 0502 	sub.w	r5, lr, #2
 80075b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80075b4:	1c44      	adds	r4, r0, #1
 80075b6:	4629      	mov	r1, r5
 80075b8:	4561      	cmp	r1, ip
 80075ba:	d30a      	bcc.n	80075d2 <__exponent+0x66>
 80075bc:	f10d 0209 	add.w	r2, sp, #9
 80075c0:	eba2 020e 	sub.w	r2, r2, lr
 80075c4:	4565      	cmp	r5, ip
 80075c6:	bf88      	it	hi
 80075c8:	2200      	movhi	r2, #0
 80075ca:	4413      	add	r3, r2
 80075cc:	1a18      	subs	r0, r3, r0
 80075ce:	b003      	add	sp, #12
 80075d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80075da:	e7ed      	b.n	80075b8 <__exponent+0x4c>
 80075dc:	2330      	movs	r3, #48	; 0x30
 80075de:	3130      	adds	r1, #48	; 0x30
 80075e0:	7083      	strb	r3, [r0, #2]
 80075e2:	70c1      	strb	r1, [r0, #3]
 80075e4:	1d03      	adds	r3, r0, #4
 80075e6:	e7f1      	b.n	80075cc <__exponent+0x60>

080075e8 <_printf_float>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	ed2d 8b02 	vpush	{d8}
 80075f0:	b08d      	sub	sp, #52	; 0x34
 80075f2:	460c      	mov	r4, r1
 80075f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80075f8:	4616      	mov	r6, r2
 80075fa:	461f      	mov	r7, r3
 80075fc:	4605      	mov	r5, r0
 80075fe:	f001 fd3d 	bl	800907c <_localeconv_r>
 8007602:	f8d0 a000 	ldr.w	sl, [r0]
 8007606:	4650      	mov	r0, sl
 8007608:	f7f8 fde2 	bl	80001d0 <strlen>
 800760c:	2300      	movs	r3, #0
 800760e:	930a      	str	r3, [sp, #40]	; 0x28
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	f8d8 3000 	ldr.w	r3, [r8]
 8007618:	f894 b018 	ldrb.w	fp, [r4, #24]
 800761c:	3307      	adds	r3, #7
 800761e:	f023 0307 	bic.w	r3, r3, #7
 8007622:	f103 0208 	add.w	r2, r3, #8
 8007626:	f8c8 2000 	str.w	r2, [r8]
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007632:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007636:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800763a:	9307      	str	r3, [sp, #28]
 800763c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007640:	ee08 0a10 	vmov	s16, r0
 8007644:	4b9f      	ldr	r3, [pc, #636]	; (80078c4 <_printf_float+0x2dc>)
 8007646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800764a:	f04f 32ff 	mov.w	r2, #4294967295
 800764e:	f7f9 fa6d 	bl	8000b2c <__aeabi_dcmpun>
 8007652:	bb88      	cbnz	r0, 80076b8 <_printf_float+0xd0>
 8007654:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007658:	4b9a      	ldr	r3, [pc, #616]	; (80078c4 <_printf_float+0x2dc>)
 800765a:	f04f 32ff 	mov.w	r2, #4294967295
 800765e:	f7f9 fa47 	bl	8000af0 <__aeabi_dcmple>
 8007662:	bb48      	cbnz	r0, 80076b8 <_printf_float+0xd0>
 8007664:	2200      	movs	r2, #0
 8007666:	2300      	movs	r3, #0
 8007668:	4640      	mov	r0, r8
 800766a:	4649      	mov	r1, r9
 800766c:	f7f9 fa36 	bl	8000adc <__aeabi_dcmplt>
 8007670:	b110      	cbz	r0, 8007678 <_printf_float+0x90>
 8007672:	232d      	movs	r3, #45	; 0x2d
 8007674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007678:	4b93      	ldr	r3, [pc, #588]	; (80078c8 <_printf_float+0x2e0>)
 800767a:	4894      	ldr	r0, [pc, #592]	; (80078cc <_printf_float+0x2e4>)
 800767c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007680:	bf94      	ite	ls
 8007682:	4698      	movls	r8, r3
 8007684:	4680      	movhi	r8, r0
 8007686:	2303      	movs	r3, #3
 8007688:	6123      	str	r3, [r4, #16]
 800768a:	9b05      	ldr	r3, [sp, #20]
 800768c:	f023 0204 	bic.w	r2, r3, #4
 8007690:	6022      	str	r2, [r4, #0]
 8007692:	f04f 0900 	mov.w	r9, #0
 8007696:	9700      	str	r7, [sp, #0]
 8007698:	4633      	mov	r3, r6
 800769a:	aa0b      	add	r2, sp, #44	; 0x2c
 800769c:	4621      	mov	r1, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	f000 f9d8 	bl	8007a54 <_printf_common>
 80076a4:	3001      	adds	r0, #1
 80076a6:	f040 8090 	bne.w	80077ca <_printf_float+0x1e2>
 80076aa:	f04f 30ff 	mov.w	r0, #4294967295
 80076ae:	b00d      	add	sp, #52	; 0x34
 80076b0:	ecbd 8b02 	vpop	{d8}
 80076b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b8:	4642      	mov	r2, r8
 80076ba:	464b      	mov	r3, r9
 80076bc:	4640      	mov	r0, r8
 80076be:	4649      	mov	r1, r9
 80076c0:	f7f9 fa34 	bl	8000b2c <__aeabi_dcmpun>
 80076c4:	b140      	cbz	r0, 80076d8 <_printf_float+0xf0>
 80076c6:	464b      	mov	r3, r9
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfbc      	itt	lt
 80076cc:	232d      	movlt	r3, #45	; 0x2d
 80076ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80076d2:	487f      	ldr	r0, [pc, #508]	; (80078d0 <_printf_float+0x2e8>)
 80076d4:	4b7f      	ldr	r3, [pc, #508]	; (80078d4 <_printf_float+0x2ec>)
 80076d6:	e7d1      	b.n	800767c <_printf_float+0x94>
 80076d8:	6863      	ldr	r3, [r4, #4]
 80076da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80076de:	9206      	str	r2, [sp, #24]
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	d13f      	bne.n	8007764 <_printf_float+0x17c>
 80076e4:	2306      	movs	r3, #6
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	9b05      	ldr	r3, [sp, #20]
 80076ea:	6861      	ldr	r1, [r4, #4]
 80076ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80076f0:	2300      	movs	r3, #0
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	ab0a      	add	r3, sp, #40	; 0x28
 80076f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80076fa:	ab09      	add	r3, sp, #36	; 0x24
 80076fc:	ec49 8b10 	vmov	d0, r8, r9
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	6022      	str	r2, [r4, #0]
 8007704:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007708:	4628      	mov	r0, r5
 800770a:	f7ff fecd 	bl	80074a8 <__cvt>
 800770e:	9b06      	ldr	r3, [sp, #24]
 8007710:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007712:	2b47      	cmp	r3, #71	; 0x47
 8007714:	4680      	mov	r8, r0
 8007716:	d108      	bne.n	800772a <_printf_float+0x142>
 8007718:	1cc8      	adds	r0, r1, #3
 800771a:	db02      	blt.n	8007722 <_printf_float+0x13a>
 800771c:	6863      	ldr	r3, [r4, #4]
 800771e:	4299      	cmp	r1, r3
 8007720:	dd41      	ble.n	80077a6 <_printf_float+0x1be>
 8007722:	f1ab 0b02 	sub.w	fp, fp, #2
 8007726:	fa5f fb8b 	uxtb.w	fp, fp
 800772a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800772e:	d820      	bhi.n	8007772 <_printf_float+0x18a>
 8007730:	3901      	subs	r1, #1
 8007732:	465a      	mov	r2, fp
 8007734:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007738:	9109      	str	r1, [sp, #36]	; 0x24
 800773a:	f7ff ff17 	bl	800756c <__exponent>
 800773e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007740:	1813      	adds	r3, r2, r0
 8007742:	2a01      	cmp	r2, #1
 8007744:	4681      	mov	r9, r0
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	dc02      	bgt.n	8007750 <_printf_float+0x168>
 800774a:	6822      	ldr	r2, [r4, #0]
 800774c:	07d2      	lsls	r2, r2, #31
 800774e:	d501      	bpl.n	8007754 <_printf_float+0x16c>
 8007750:	3301      	adds	r3, #1
 8007752:	6123      	str	r3, [r4, #16]
 8007754:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007758:	2b00      	cmp	r3, #0
 800775a:	d09c      	beq.n	8007696 <_printf_float+0xae>
 800775c:	232d      	movs	r3, #45	; 0x2d
 800775e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007762:	e798      	b.n	8007696 <_printf_float+0xae>
 8007764:	9a06      	ldr	r2, [sp, #24]
 8007766:	2a47      	cmp	r2, #71	; 0x47
 8007768:	d1be      	bne.n	80076e8 <_printf_float+0x100>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1bc      	bne.n	80076e8 <_printf_float+0x100>
 800776e:	2301      	movs	r3, #1
 8007770:	e7b9      	b.n	80076e6 <_printf_float+0xfe>
 8007772:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007776:	d118      	bne.n	80077aa <_printf_float+0x1c2>
 8007778:	2900      	cmp	r1, #0
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	dd0b      	ble.n	8007796 <_printf_float+0x1ae>
 800777e:	6121      	str	r1, [r4, #16]
 8007780:	b913      	cbnz	r3, 8007788 <_printf_float+0x1a0>
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	07d0      	lsls	r0, r2, #31
 8007786:	d502      	bpl.n	800778e <_printf_float+0x1a6>
 8007788:	3301      	adds	r3, #1
 800778a:	440b      	add	r3, r1
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007790:	f04f 0900 	mov.w	r9, #0
 8007794:	e7de      	b.n	8007754 <_printf_float+0x16c>
 8007796:	b913      	cbnz	r3, 800779e <_printf_float+0x1b6>
 8007798:	6822      	ldr	r2, [r4, #0]
 800779a:	07d2      	lsls	r2, r2, #31
 800779c:	d501      	bpl.n	80077a2 <_printf_float+0x1ba>
 800779e:	3302      	adds	r3, #2
 80077a0:	e7f4      	b.n	800778c <_printf_float+0x1a4>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e7f2      	b.n	800778c <_printf_float+0x1a4>
 80077a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80077aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ac:	4299      	cmp	r1, r3
 80077ae:	db05      	blt.n	80077bc <_printf_float+0x1d4>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	6121      	str	r1, [r4, #16]
 80077b4:	07d8      	lsls	r0, r3, #31
 80077b6:	d5ea      	bpl.n	800778e <_printf_float+0x1a6>
 80077b8:	1c4b      	adds	r3, r1, #1
 80077ba:	e7e7      	b.n	800778c <_printf_float+0x1a4>
 80077bc:	2900      	cmp	r1, #0
 80077be:	bfd4      	ite	le
 80077c0:	f1c1 0202 	rsble	r2, r1, #2
 80077c4:	2201      	movgt	r2, #1
 80077c6:	4413      	add	r3, r2
 80077c8:	e7e0      	b.n	800778c <_printf_float+0x1a4>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	055a      	lsls	r2, r3, #21
 80077ce:	d407      	bmi.n	80077e0 <_printf_float+0x1f8>
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	4642      	mov	r2, r8
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	d12c      	bne.n	8007838 <_printf_float+0x250>
 80077de:	e764      	b.n	80076aa <_printf_float+0xc2>
 80077e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80077e4:	f240 80e0 	bls.w	80079a8 <_printf_float+0x3c0>
 80077e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077ec:	2200      	movs	r2, #0
 80077ee:	2300      	movs	r3, #0
 80077f0:	f7f9 f96a 	bl	8000ac8 <__aeabi_dcmpeq>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d034      	beq.n	8007862 <_printf_float+0x27a>
 80077f8:	4a37      	ldr	r2, [pc, #220]	; (80078d8 <_printf_float+0x2f0>)
 80077fa:	2301      	movs	r3, #1
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	f43f af51 	beq.w	80076aa <_printf_float+0xc2>
 8007808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800780c:	429a      	cmp	r2, r3
 800780e:	db02      	blt.n	8007816 <_printf_float+0x22e>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	07d8      	lsls	r0, r3, #31
 8007814:	d510      	bpl.n	8007838 <_printf_float+0x250>
 8007816:	ee18 3a10 	vmov	r3, s16
 800781a:	4652      	mov	r2, sl
 800781c:	4631      	mov	r1, r6
 800781e:	4628      	mov	r0, r5
 8007820:	47b8      	blx	r7
 8007822:	3001      	adds	r0, #1
 8007824:	f43f af41 	beq.w	80076aa <_printf_float+0xc2>
 8007828:	f04f 0800 	mov.w	r8, #0
 800782c:	f104 091a 	add.w	r9, r4, #26
 8007830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007832:	3b01      	subs	r3, #1
 8007834:	4543      	cmp	r3, r8
 8007836:	dc09      	bgt.n	800784c <_printf_float+0x264>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	079b      	lsls	r3, r3, #30
 800783c:	f100 8105 	bmi.w	8007a4a <_printf_float+0x462>
 8007840:	68e0      	ldr	r0, [r4, #12]
 8007842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007844:	4298      	cmp	r0, r3
 8007846:	bfb8      	it	lt
 8007848:	4618      	movlt	r0, r3
 800784a:	e730      	b.n	80076ae <_printf_float+0xc6>
 800784c:	2301      	movs	r3, #1
 800784e:	464a      	mov	r2, r9
 8007850:	4631      	mov	r1, r6
 8007852:	4628      	mov	r0, r5
 8007854:	47b8      	blx	r7
 8007856:	3001      	adds	r0, #1
 8007858:	f43f af27 	beq.w	80076aa <_printf_float+0xc2>
 800785c:	f108 0801 	add.w	r8, r8, #1
 8007860:	e7e6      	b.n	8007830 <_printf_float+0x248>
 8007862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	dc39      	bgt.n	80078dc <_printf_float+0x2f4>
 8007868:	4a1b      	ldr	r2, [pc, #108]	; (80078d8 <_printf_float+0x2f0>)
 800786a:	2301      	movs	r3, #1
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f af19 	beq.w	80076aa <_printf_float+0xc2>
 8007878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800787c:	4313      	orrs	r3, r2
 800787e:	d102      	bne.n	8007886 <_printf_float+0x29e>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	07d9      	lsls	r1, r3, #31
 8007884:	d5d8      	bpl.n	8007838 <_printf_float+0x250>
 8007886:	ee18 3a10 	vmov	r3, s16
 800788a:	4652      	mov	r2, sl
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f af09 	beq.w	80076aa <_printf_float+0xc2>
 8007898:	f04f 0900 	mov.w	r9, #0
 800789c:	f104 0a1a 	add.w	sl, r4, #26
 80078a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a2:	425b      	negs	r3, r3
 80078a4:	454b      	cmp	r3, r9
 80078a6:	dc01      	bgt.n	80078ac <_printf_float+0x2c4>
 80078a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078aa:	e792      	b.n	80077d2 <_printf_float+0x1ea>
 80078ac:	2301      	movs	r3, #1
 80078ae:	4652      	mov	r2, sl
 80078b0:	4631      	mov	r1, r6
 80078b2:	4628      	mov	r0, r5
 80078b4:	47b8      	blx	r7
 80078b6:	3001      	adds	r0, #1
 80078b8:	f43f aef7 	beq.w	80076aa <_printf_float+0xc2>
 80078bc:	f109 0901 	add.w	r9, r9, #1
 80078c0:	e7ee      	b.n	80078a0 <_printf_float+0x2b8>
 80078c2:	bf00      	nop
 80078c4:	7fefffff 	.word	0x7fefffff
 80078c8:	0800a2e4 	.word	0x0800a2e4
 80078cc:	0800a2e8 	.word	0x0800a2e8
 80078d0:	0800a2f0 	.word	0x0800a2f0
 80078d4:	0800a2ec 	.word	0x0800a2ec
 80078d8:	0800a2f4 	.word	0x0800a2f4
 80078dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078e0:	429a      	cmp	r2, r3
 80078e2:	bfa8      	it	ge
 80078e4:	461a      	movge	r2, r3
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	4691      	mov	r9, r2
 80078ea:	dc37      	bgt.n	800795c <_printf_float+0x374>
 80078ec:	f04f 0b00 	mov.w	fp, #0
 80078f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078f4:	f104 021a 	add.w	r2, r4, #26
 80078f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80078fa:	9305      	str	r3, [sp, #20]
 80078fc:	eba3 0309 	sub.w	r3, r3, r9
 8007900:	455b      	cmp	r3, fp
 8007902:	dc33      	bgt.n	800796c <_printf_float+0x384>
 8007904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007908:	429a      	cmp	r2, r3
 800790a:	db3b      	blt.n	8007984 <_printf_float+0x39c>
 800790c:	6823      	ldr	r3, [r4, #0]
 800790e:	07da      	lsls	r2, r3, #31
 8007910:	d438      	bmi.n	8007984 <_printf_float+0x39c>
 8007912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007914:	9a05      	ldr	r2, [sp, #20]
 8007916:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007918:	1a9a      	subs	r2, r3, r2
 800791a:	eba3 0901 	sub.w	r9, r3, r1
 800791e:	4591      	cmp	r9, r2
 8007920:	bfa8      	it	ge
 8007922:	4691      	movge	r9, r2
 8007924:	f1b9 0f00 	cmp.w	r9, #0
 8007928:	dc35      	bgt.n	8007996 <_printf_float+0x3ae>
 800792a:	f04f 0800 	mov.w	r8, #0
 800792e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007932:	f104 0a1a 	add.w	sl, r4, #26
 8007936:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800793a:	1a9b      	subs	r3, r3, r2
 800793c:	eba3 0309 	sub.w	r3, r3, r9
 8007940:	4543      	cmp	r3, r8
 8007942:	f77f af79 	ble.w	8007838 <_printf_float+0x250>
 8007946:	2301      	movs	r3, #1
 8007948:	4652      	mov	r2, sl
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	f43f aeaa 	beq.w	80076aa <_printf_float+0xc2>
 8007956:	f108 0801 	add.w	r8, r8, #1
 800795a:	e7ec      	b.n	8007936 <_printf_float+0x34e>
 800795c:	4613      	mov	r3, r2
 800795e:	4631      	mov	r1, r6
 8007960:	4642      	mov	r2, r8
 8007962:	4628      	mov	r0, r5
 8007964:	47b8      	blx	r7
 8007966:	3001      	adds	r0, #1
 8007968:	d1c0      	bne.n	80078ec <_printf_float+0x304>
 800796a:	e69e      	b.n	80076aa <_printf_float+0xc2>
 800796c:	2301      	movs	r3, #1
 800796e:	4631      	mov	r1, r6
 8007970:	4628      	mov	r0, r5
 8007972:	9205      	str	r2, [sp, #20]
 8007974:	47b8      	blx	r7
 8007976:	3001      	adds	r0, #1
 8007978:	f43f ae97 	beq.w	80076aa <_printf_float+0xc2>
 800797c:	9a05      	ldr	r2, [sp, #20]
 800797e:	f10b 0b01 	add.w	fp, fp, #1
 8007982:	e7b9      	b.n	80078f8 <_printf_float+0x310>
 8007984:	ee18 3a10 	vmov	r3, s16
 8007988:	4652      	mov	r2, sl
 800798a:	4631      	mov	r1, r6
 800798c:	4628      	mov	r0, r5
 800798e:	47b8      	blx	r7
 8007990:	3001      	adds	r0, #1
 8007992:	d1be      	bne.n	8007912 <_printf_float+0x32a>
 8007994:	e689      	b.n	80076aa <_printf_float+0xc2>
 8007996:	9a05      	ldr	r2, [sp, #20]
 8007998:	464b      	mov	r3, r9
 800799a:	4442      	add	r2, r8
 800799c:	4631      	mov	r1, r6
 800799e:	4628      	mov	r0, r5
 80079a0:	47b8      	blx	r7
 80079a2:	3001      	adds	r0, #1
 80079a4:	d1c1      	bne.n	800792a <_printf_float+0x342>
 80079a6:	e680      	b.n	80076aa <_printf_float+0xc2>
 80079a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079aa:	2a01      	cmp	r2, #1
 80079ac:	dc01      	bgt.n	80079b2 <_printf_float+0x3ca>
 80079ae:	07db      	lsls	r3, r3, #31
 80079b0:	d538      	bpl.n	8007a24 <_printf_float+0x43c>
 80079b2:	2301      	movs	r3, #1
 80079b4:	4642      	mov	r2, r8
 80079b6:	4631      	mov	r1, r6
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b8      	blx	r7
 80079bc:	3001      	adds	r0, #1
 80079be:	f43f ae74 	beq.w	80076aa <_printf_float+0xc2>
 80079c2:	ee18 3a10 	vmov	r3, s16
 80079c6:	4652      	mov	r2, sl
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f43f ae6b 	beq.w	80076aa <_printf_float+0xc2>
 80079d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079d8:	2200      	movs	r2, #0
 80079da:	2300      	movs	r3, #0
 80079dc:	f7f9 f874 	bl	8000ac8 <__aeabi_dcmpeq>
 80079e0:	b9d8      	cbnz	r0, 8007a1a <_printf_float+0x432>
 80079e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e4:	f108 0201 	add.w	r2, r8, #1
 80079e8:	3b01      	subs	r3, #1
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b8      	blx	r7
 80079f0:	3001      	adds	r0, #1
 80079f2:	d10e      	bne.n	8007a12 <_printf_float+0x42a>
 80079f4:	e659      	b.n	80076aa <_printf_float+0xc2>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4652      	mov	r2, sl
 80079fa:	4631      	mov	r1, r6
 80079fc:	4628      	mov	r0, r5
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f ae52 	beq.w	80076aa <_printf_float+0xc2>
 8007a06:	f108 0801 	add.w	r8, r8, #1
 8007a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	4543      	cmp	r3, r8
 8007a10:	dcf1      	bgt.n	80079f6 <_printf_float+0x40e>
 8007a12:	464b      	mov	r3, r9
 8007a14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007a18:	e6dc      	b.n	80077d4 <_printf_float+0x1ec>
 8007a1a:	f04f 0800 	mov.w	r8, #0
 8007a1e:	f104 0a1a 	add.w	sl, r4, #26
 8007a22:	e7f2      	b.n	8007a0a <_printf_float+0x422>
 8007a24:	2301      	movs	r3, #1
 8007a26:	4642      	mov	r2, r8
 8007a28:	e7df      	b.n	80079ea <_printf_float+0x402>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	464a      	mov	r2, r9
 8007a2e:	4631      	mov	r1, r6
 8007a30:	4628      	mov	r0, r5
 8007a32:	47b8      	blx	r7
 8007a34:	3001      	adds	r0, #1
 8007a36:	f43f ae38 	beq.w	80076aa <_printf_float+0xc2>
 8007a3a:	f108 0801 	add.w	r8, r8, #1
 8007a3e:	68e3      	ldr	r3, [r4, #12]
 8007a40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007a42:	1a5b      	subs	r3, r3, r1
 8007a44:	4543      	cmp	r3, r8
 8007a46:	dcf0      	bgt.n	8007a2a <_printf_float+0x442>
 8007a48:	e6fa      	b.n	8007840 <_printf_float+0x258>
 8007a4a:	f04f 0800 	mov.w	r8, #0
 8007a4e:	f104 0919 	add.w	r9, r4, #25
 8007a52:	e7f4      	b.n	8007a3e <_printf_float+0x456>

08007a54 <_printf_common>:
 8007a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	4616      	mov	r6, r2
 8007a5a:	4699      	mov	r9, r3
 8007a5c:	688a      	ldr	r2, [r1, #8]
 8007a5e:	690b      	ldr	r3, [r1, #16]
 8007a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a64:	4293      	cmp	r3, r2
 8007a66:	bfb8      	it	lt
 8007a68:	4613      	movlt	r3, r2
 8007a6a:	6033      	str	r3, [r6, #0]
 8007a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a70:	4607      	mov	r7, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	b10a      	cbz	r2, 8007a7a <_printf_common+0x26>
 8007a76:	3301      	adds	r3, #1
 8007a78:	6033      	str	r3, [r6, #0]
 8007a7a:	6823      	ldr	r3, [r4, #0]
 8007a7c:	0699      	lsls	r1, r3, #26
 8007a7e:	bf42      	ittt	mi
 8007a80:	6833      	ldrmi	r3, [r6, #0]
 8007a82:	3302      	addmi	r3, #2
 8007a84:	6033      	strmi	r3, [r6, #0]
 8007a86:	6825      	ldr	r5, [r4, #0]
 8007a88:	f015 0506 	ands.w	r5, r5, #6
 8007a8c:	d106      	bne.n	8007a9c <_printf_common+0x48>
 8007a8e:	f104 0a19 	add.w	sl, r4, #25
 8007a92:	68e3      	ldr	r3, [r4, #12]
 8007a94:	6832      	ldr	r2, [r6, #0]
 8007a96:	1a9b      	subs	r3, r3, r2
 8007a98:	42ab      	cmp	r3, r5
 8007a9a:	dc26      	bgt.n	8007aea <_printf_common+0x96>
 8007a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007aa0:	1e13      	subs	r3, r2, #0
 8007aa2:	6822      	ldr	r2, [r4, #0]
 8007aa4:	bf18      	it	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	0692      	lsls	r2, r2, #26
 8007aaa:	d42b      	bmi.n	8007b04 <_printf_common+0xb0>
 8007aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	47c0      	blx	r8
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d01e      	beq.n	8007af8 <_printf_common+0xa4>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	68e5      	ldr	r5, [r4, #12]
 8007abe:	6832      	ldr	r2, [r6, #0]
 8007ac0:	f003 0306 	and.w	r3, r3, #6
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	bf08      	it	eq
 8007ac8:	1aad      	subeq	r5, r5, r2
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	6922      	ldr	r2, [r4, #16]
 8007ace:	bf0c      	ite	eq
 8007ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad4:	2500      	movne	r5, #0
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	bfc4      	itt	gt
 8007ada:	1a9b      	subgt	r3, r3, r2
 8007adc:	18ed      	addgt	r5, r5, r3
 8007ade:	2600      	movs	r6, #0
 8007ae0:	341a      	adds	r4, #26
 8007ae2:	42b5      	cmp	r5, r6
 8007ae4:	d11a      	bne.n	8007b1c <_printf_common+0xc8>
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	e008      	b.n	8007afc <_printf_common+0xa8>
 8007aea:	2301      	movs	r3, #1
 8007aec:	4652      	mov	r2, sl
 8007aee:	4649      	mov	r1, r9
 8007af0:	4638      	mov	r0, r7
 8007af2:	47c0      	blx	r8
 8007af4:	3001      	adds	r0, #1
 8007af6:	d103      	bne.n	8007b00 <_printf_common+0xac>
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b00:	3501      	adds	r5, #1
 8007b02:	e7c6      	b.n	8007a92 <_printf_common+0x3e>
 8007b04:	18e1      	adds	r1, r4, r3
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	2030      	movs	r0, #48	; 0x30
 8007b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b0e:	4422      	add	r2, r4
 8007b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b18:	3302      	adds	r3, #2
 8007b1a:	e7c7      	b.n	8007aac <_printf_common+0x58>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4649      	mov	r1, r9
 8007b22:	4638      	mov	r0, r7
 8007b24:	47c0      	blx	r8
 8007b26:	3001      	adds	r0, #1
 8007b28:	d0e6      	beq.n	8007af8 <_printf_common+0xa4>
 8007b2a:	3601      	adds	r6, #1
 8007b2c:	e7d9      	b.n	8007ae2 <_printf_common+0x8e>
	...

08007b30 <_printf_i>:
 8007b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b34:	7e0f      	ldrb	r7, [r1, #24]
 8007b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b38:	2f78      	cmp	r7, #120	; 0x78
 8007b3a:	4691      	mov	r9, r2
 8007b3c:	4680      	mov	r8, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	469a      	mov	sl, r3
 8007b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007b46:	d807      	bhi.n	8007b58 <_printf_i+0x28>
 8007b48:	2f62      	cmp	r7, #98	; 0x62
 8007b4a:	d80a      	bhi.n	8007b62 <_printf_i+0x32>
 8007b4c:	2f00      	cmp	r7, #0
 8007b4e:	f000 80d8 	beq.w	8007d02 <_printf_i+0x1d2>
 8007b52:	2f58      	cmp	r7, #88	; 0x58
 8007b54:	f000 80a3 	beq.w	8007c9e <_printf_i+0x16e>
 8007b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b60:	e03a      	b.n	8007bd8 <_printf_i+0xa8>
 8007b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b66:	2b15      	cmp	r3, #21
 8007b68:	d8f6      	bhi.n	8007b58 <_printf_i+0x28>
 8007b6a:	a101      	add	r1, pc, #4	; (adr r1, 8007b70 <_printf_i+0x40>)
 8007b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b70:	08007bc9 	.word	0x08007bc9
 8007b74:	08007bdd 	.word	0x08007bdd
 8007b78:	08007b59 	.word	0x08007b59
 8007b7c:	08007b59 	.word	0x08007b59
 8007b80:	08007b59 	.word	0x08007b59
 8007b84:	08007b59 	.word	0x08007b59
 8007b88:	08007bdd 	.word	0x08007bdd
 8007b8c:	08007b59 	.word	0x08007b59
 8007b90:	08007b59 	.word	0x08007b59
 8007b94:	08007b59 	.word	0x08007b59
 8007b98:	08007b59 	.word	0x08007b59
 8007b9c:	08007ce9 	.word	0x08007ce9
 8007ba0:	08007c0d 	.word	0x08007c0d
 8007ba4:	08007ccb 	.word	0x08007ccb
 8007ba8:	08007b59 	.word	0x08007b59
 8007bac:	08007b59 	.word	0x08007b59
 8007bb0:	08007d0b 	.word	0x08007d0b
 8007bb4:	08007b59 	.word	0x08007b59
 8007bb8:	08007c0d 	.word	0x08007c0d
 8007bbc:	08007b59 	.word	0x08007b59
 8007bc0:	08007b59 	.word	0x08007b59
 8007bc4:	08007cd3 	.word	0x08007cd3
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	1d1a      	adds	r2, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	602a      	str	r2, [r5, #0]
 8007bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e0a3      	b.n	8007d24 <_printf_i+0x1f4>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	6829      	ldr	r1, [r5, #0]
 8007be0:	0606      	lsls	r6, r0, #24
 8007be2:	f101 0304 	add.w	r3, r1, #4
 8007be6:	d50a      	bpl.n	8007bfe <_printf_i+0xce>
 8007be8:	680e      	ldr	r6, [r1, #0]
 8007bea:	602b      	str	r3, [r5, #0]
 8007bec:	2e00      	cmp	r6, #0
 8007bee:	da03      	bge.n	8007bf8 <_printf_i+0xc8>
 8007bf0:	232d      	movs	r3, #45	; 0x2d
 8007bf2:	4276      	negs	r6, r6
 8007bf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf8:	485e      	ldr	r0, [pc, #376]	; (8007d74 <_printf_i+0x244>)
 8007bfa:	230a      	movs	r3, #10
 8007bfc:	e019      	b.n	8007c32 <_printf_i+0x102>
 8007bfe:	680e      	ldr	r6, [r1, #0]
 8007c00:	602b      	str	r3, [r5, #0]
 8007c02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007c06:	bf18      	it	ne
 8007c08:	b236      	sxthne	r6, r6
 8007c0a:	e7ef      	b.n	8007bec <_printf_i+0xbc>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	6820      	ldr	r0, [r4, #0]
 8007c10:	1d19      	adds	r1, r3, #4
 8007c12:	6029      	str	r1, [r5, #0]
 8007c14:	0601      	lsls	r1, r0, #24
 8007c16:	d501      	bpl.n	8007c1c <_printf_i+0xec>
 8007c18:	681e      	ldr	r6, [r3, #0]
 8007c1a:	e002      	b.n	8007c22 <_printf_i+0xf2>
 8007c1c:	0646      	lsls	r6, r0, #25
 8007c1e:	d5fb      	bpl.n	8007c18 <_printf_i+0xe8>
 8007c20:	881e      	ldrh	r6, [r3, #0]
 8007c22:	4854      	ldr	r0, [pc, #336]	; (8007d74 <_printf_i+0x244>)
 8007c24:	2f6f      	cmp	r7, #111	; 0x6f
 8007c26:	bf0c      	ite	eq
 8007c28:	2308      	moveq	r3, #8
 8007c2a:	230a      	movne	r3, #10
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c32:	6865      	ldr	r5, [r4, #4]
 8007c34:	60a5      	str	r5, [r4, #8]
 8007c36:	2d00      	cmp	r5, #0
 8007c38:	bfa2      	ittt	ge
 8007c3a:	6821      	ldrge	r1, [r4, #0]
 8007c3c:	f021 0104 	bicge.w	r1, r1, #4
 8007c40:	6021      	strge	r1, [r4, #0]
 8007c42:	b90e      	cbnz	r6, 8007c48 <_printf_i+0x118>
 8007c44:	2d00      	cmp	r5, #0
 8007c46:	d04d      	beq.n	8007ce4 <_printf_i+0x1b4>
 8007c48:	4615      	mov	r5, r2
 8007c4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007c4e:	fb03 6711 	mls	r7, r3, r1, r6
 8007c52:	5dc7      	ldrb	r7, [r0, r7]
 8007c54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007c58:	4637      	mov	r7, r6
 8007c5a:	42bb      	cmp	r3, r7
 8007c5c:	460e      	mov	r6, r1
 8007c5e:	d9f4      	bls.n	8007c4a <_printf_i+0x11a>
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d10b      	bne.n	8007c7c <_printf_i+0x14c>
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	07de      	lsls	r6, r3, #31
 8007c68:	d508      	bpl.n	8007c7c <_printf_i+0x14c>
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	4299      	cmp	r1, r3
 8007c70:	bfde      	ittt	le
 8007c72:	2330      	movle	r3, #48	; 0x30
 8007c74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007c78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007c7c:	1b52      	subs	r2, r2, r5
 8007c7e:	6122      	str	r2, [r4, #16]
 8007c80:	f8cd a000 	str.w	sl, [sp]
 8007c84:	464b      	mov	r3, r9
 8007c86:	aa03      	add	r2, sp, #12
 8007c88:	4621      	mov	r1, r4
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	f7ff fee2 	bl	8007a54 <_printf_common>
 8007c90:	3001      	adds	r0, #1
 8007c92:	d14c      	bne.n	8007d2e <_printf_i+0x1fe>
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	b004      	add	sp, #16
 8007c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c9e:	4835      	ldr	r0, [pc, #212]	; (8007d74 <_printf_i+0x244>)
 8007ca0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ca4:	6829      	ldr	r1, [r5, #0]
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007cac:	6029      	str	r1, [r5, #0]
 8007cae:	061d      	lsls	r5, r3, #24
 8007cb0:	d514      	bpl.n	8007cdc <_printf_i+0x1ac>
 8007cb2:	07df      	lsls	r7, r3, #31
 8007cb4:	bf44      	itt	mi
 8007cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8007cba:	6023      	strmi	r3, [r4, #0]
 8007cbc:	b91e      	cbnz	r6, 8007cc6 <_printf_i+0x196>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	f023 0320 	bic.w	r3, r3, #32
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	2310      	movs	r3, #16
 8007cc8:	e7b0      	b.n	8007c2c <_printf_i+0xfc>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	f043 0320 	orr.w	r3, r3, #32
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	2378      	movs	r3, #120	; 0x78
 8007cd4:	4828      	ldr	r0, [pc, #160]	; (8007d78 <_printf_i+0x248>)
 8007cd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cda:	e7e3      	b.n	8007ca4 <_printf_i+0x174>
 8007cdc:	0659      	lsls	r1, r3, #25
 8007cde:	bf48      	it	mi
 8007ce0:	b2b6      	uxthmi	r6, r6
 8007ce2:	e7e6      	b.n	8007cb2 <_printf_i+0x182>
 8007ce4:	4615      	mov	r5, r2
 8007ce6:	e7bb      	b.n	8007c60 <_printf_i+0x130>
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	6826      	ldr	r6, [r4, #0]
 8007cec:	6961      	ldr	r1, [r4, #20]
 8007cee:	1d18      	adds	r0, r3, #4
 8007cf0:	6028      	str	r0, [r5, #0]
 8007cf2:	0635      	lsls	r5, r6, #24
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	d501      	bpl.n	8007cfc <_printf_i+0x1cc>
 8007cf8:	6019      	str	r1, [r3, #0]
 8007cfa:	e002      	b.n	8007d02 <_printf_i+0x1d2>
 8007cfc:	0670      	lsls	r0, r6, #25
 8007cfe:	d5fb      	bpl.n	8007cf8 <_printf_i+0x1c8>
 8007d00:	8019      	strh	r1, [r3, #0]
 8007d02:	2300      	movs	r3, #0
 8007d04:	6123      	str	r3, [r4, #16]
 8007d06:	4615      	mov	r5, r2
 8007d08:	e7ba      	b.n	8007c80 <_printf_i+0x150>
 8007d0a:	682b      	ldr	r3, [r5, #0]
 8007d0c:	1d1a      	adds	r2, r3, #4
 8007d0e:	602a      	str	r2, [r5, #0]
 8007d10:	681d      	ldr	r5, [r3, #0]
 8007d12:	6862      	ldr	r2, [r4, #4]
 8007d14:	2100      	movs	r1, #0
 8007d16:	4628      	mov	r0, r5
 8007d18:	f7f8 fa62 	bl	80001e0 <memchr>
 8007d1c:	b108      	cbz	r0, 8007d22 <_printf_i+0x1f2>
 8007d1e:	1b40      	subs	r0, r0, r5
 8007d20:	6060      	str	r0, [r4, #4]
 8007d22:	6863      	ldr	r3, [r4, #4]
 8007d24:	6123      	str	r3, [r4, #16]
 8007d26:	2300      	movs	r3, #0
 8007d28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d2c:	e7a8      	b.n	8007c80 <_printf_i+0x150>
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	462a      	mov	r2, r5
 8007d32:	4649      	mov	r1, r9
 8007d34:	4640      	mov	r0, r8
 8007d36:	47d0      	blx	sl
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d0ab      	beq.n	8007c94 <_printf_i+0x164>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	079b      	lsls	r3, r3, #30
 8007d40:	d413      	bmi.n	8007d6a <_printf_i+0x23a>
 8007d42:	68e0      	ldr	r0, [r4, #12]
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	4298      	cmp	r0, r3
 8007d48:	bfb8      	it	lt
 8007d4a:	4618      	movlt	r0, r3
 8007d4c:	e7a4      	b.n	8007c98 <_printf_i+0x168>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	4632      	mov	r2, r6
 8007d52:	4649      	mov	r1, r9
 8007d54:	4640      	mov	r0, r8
 8007d56:	47d0      	blx	sl
 8007d58:	3001      	adds	r0, #1
 8007d5a:	d09b      	beq.n	8007c94 <_printf_i+0x164>
 8007d5c:	3501      	adds	r5, #1
 8007d5e:	68e3      	ldr	r3, [r4, #12]
 8007d60:	9903      	ldr	r1, [sp, #12]
 8007d62:	1a5b      	subs	r3, r3, r1
 8007d64:	42ab      	cmp	r3, r5
 8007d66:	dcf2      	bgt.n	8007d4e <_printf_i+0x21e>
 8007d68:	e7eb      	b.n	8007d42 <_printf_i+0x212>
 8007d6a:	2500      	movs	r5, #0
 8007d6c:	f104 0619 	add.w	r6, r4, #25
 8007d70:	e7f5      	b.n	8007d5e <_printf_i+0x22e>
 8007d72:	bf00      	nop
 8007d74:	0800a2f6 	.word	0x0800a2f6
 8007d78:	0800a307 	.word	0x0800a307

08007d7c <iprintf>:
 8007d7c:	b40f      	push	{r0, r1, r2, r3}
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <iprintf+0x2c>)
 8007d80:	b513      	push	{r0, r1, r4, lr}
 8007d82:	681c      	ldr	r4, [r3, #0]
 8007d84:	b124      	cbz	r4, 8007d90 <iprintf+0x14>
 8007d86:	69a3      	ldr	r3, [r4, #24]
 8007d88:	b913      	cbnz	r3, 8007d90 <iprintf+0x14>
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f001 f8d8 	bl	8008f40 <__sinit>
 8007d90:	ab05      	add	r3, sp, #20
 8007d92:	9a04      	ldr	r2, [sp, #16]
 8007d94:	68a1      	ldr	r1, [r4, #8]
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f001 fe95 	bl	8009ac8 <_vfiprintf_r>
 8007d9e:	b002      	add	sp, #8
 8007da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007da4:	b004      	add	sp, #16
 8007da6:	4770      	bx	lr
 8007da8:	2000000c 	.word	0x2000000c

08007dac <_puts_r>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	460e      	mov	r6, r1
 8007db0:	4605      	mov	r5, r0
 8007db2:	b118      	cbz	r0, 8007dbc <_puts_r+0x10>
 8007db4:	6983      	ldr	r3, [r0, #24]
 8007db6:	b90b      	cbnz	r3, 8007dbc <_puts_r+0x10>
 8007db8:	f001 f8c2 	bl	8008f40 <__sinit>
 8007dbc:	69ab      	ldr	r3, [r5, #24]
 8007dbe:	68ac      	ldr	r4, [r5, #8]
 8007dc0:	b913      	cbnz	r3, 8007dc8 <_puts_r+0x1c>
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f001 f8bc 	bl	8008f40 <__sinit>
 8007dc8:	4b2c      	ldr	r3, [pc, #176]	; (8007e7c <_puts_r+0xd0>)
 8007dca:	429c      	cmp	r4, r3
 8007dcc:	d120      	bne.n	8007e10 <_puts_r+0x64>
 8007dce:	686c      	ldr	r4, [r5, #4]
 8007dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dd2:	07db      	lsls	r3, r3, #31
 8007dd4:	d405      	bmi.n	8007de2 <_puts_r+0x36>
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	0598      	lsls	r0, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <_puts_r+0x36>
 8007ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dde:	f001 f952 	bl	8009086 <__retarget_lock_acquire_recursive>
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	0719      	lsls	r1, r3, #28
 8007de6:	d51d      	bpl.n	8007e24 <_puts_r+0x78>
 8007de8:	6923      	ldr	r3, [r4, #16]
 8007dea:	b1db      	cbz	r3, 8007e24 <_puts_r+0x78>
 8007dec:	3e01      	subs	r6, #1
 8007dee:	68a3      	ldr	r3, [r4, #8]
 8007df0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007df4:	3b01      	subs	r3, #1
 8007df6:	60a3      	str	r3, [r4, #8]
 8007df8:	bb39      	cbnz	r1, 8007e4a <_puts_r+0x9e>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	da38      	bge.n	8007e70 <_puts_r+0xc4>
 8007dfe:	4622      	mov	r2, r4
 8007e00:	210a      	movs	r1, #10
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f848 	bl	8007e98 <__swbuf_r>
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d011      	beq.n	8007e30 <_puts_r+0x84>
 8007e0c:	250a      	movs	r5, #10
 8007e0e:	e011      	b.n	8007e34 <_puts_r+0x88>
 8007e10:	4b1b      	ldr	r3, [pc, #108]	; (8007e80 <_puts_r+0xd4>)
 8007e12:	429c      	cmp	r4, r3
 8007e14:	d101      	bne.n	8007e1a <_puts_r+0x6e>
 8007e16:	68ac      	ldr	r4, [r5, #8]
 8007e18:	e7da      	b.n	8007dd0 <_puts_r+0x24>
 8007e1a:	4b1a      	ldr	r3, [pc, #104]	; (8007e84 <_puts_r+0xd8>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	bf08      	it	eq
 8007e20:	68ec      	ldreq	r4, [r5, #12]
 8007e22:	e7d5      	b.n	8007dd0 <_puts_r+0x24>
 8007e24:	4621      	mov	r1, r4
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 f888 	bl	8007f3c <__swsetup_r>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d0dd      	beq.n	8007dec <_puts_r+0x40>
 8007e30:	f04f 35ff 	mov.w	r5, #4294967295
 8007e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e36:	07da      	lsls	r2, r3, #31
 8007e38:	d405      	bmi.n	8007e46 <_puts_r+0x9a>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	059b      	lsls	r3, r3, #22
 8007e3e:	d402      	bmi.n	8007e46 <_puts_r+0x9a>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f001 f921 	bl	8009088 <__retarget_lock_release_recursive>
 8007e46:	4628      	mov	r0, r5
 8007e48:	bd70      	pop	{r4, r5, r6, pc}
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da04      	bge.n	8007e58 <_puts_r+0xac>
 8007e4e:	69a2      	ldr	r2, [r4, #24]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	dc06      	bgt.n	8007e62 <_puts_r+0xb6>
 8007e54:	290a      	cmp	r1, #10
 8007e56:	d004      	beq.n	8007e62 <_puts_r+0xb6>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	6022      	str	r2, [r4, #0]
 8007e5e:	7019      	strb	r1, [r3, #0]
 8007e60:	e7c5      	b.n	8007dee <_puts_r+0x42>
 8007e62:	4622      	mov	r2, r4
 8007e64:	4628      	mov	r0, r5
 8007e66:	f000 f817 	bl	8007e98 <__swbuf_r>
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d1bf      	bne.n	8007dee <_puts_r+0x42>
 8007e6e:	e7df      	b.n	8007e30 <_puts_r+0x84>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	250a      	movs	r5, #10
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	6022      	str	r2, [r4, #0]
 8007e78:	701d      	strb	r5, [r3, #0]
 8007e7a:	e7db      	b.n	8007e34 <_puts_r+0x88>
 8007e7c:	0800a3c8 	.word	0x0800a3c8
 8007e80:	0800a3e8 	.word	0x0800a3e8
 8007e84:	0800a3a8 	.word	0x0800a3a8

08007e88 <puts>:
 8007e88:	4b02      	ldr	r3, [pc, #8]	; (8007e94 <puts+0xc>)
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	f7ff bf8d 	b.w	8007dac <_puts_r>
 8007e92:	bf00      	nop
 8007e94:	2000000c 	.word	0x2000000c

08007e98 <__swbuf_r>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	460e      	mov	r6, r1
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	4605      	mov	r5, r0
 8007ea0:	b118      	cbz	r0, 8007eaa <__swbuf_r+0x12>
 8007ea2:	6983      	ldr	r3, [r0, #24]
 8007ea4:	b90b      	cbnz	r3, 8007eaa <__swbuf_r+0x12>
 8007ea6:	f001 f84b 	bl	8008f40 <__sinit>
 8007eaa:	4b21      	ldr	r3, [pc, #132]	; (8007f30 <__swbuf_r+0x98>)
 8007eac:	429c      	cmp	r4, r3
 8007eae:	d12b      	bne.n	8007f08 <__swbuf_r+0x70>
 8007eb0:	686c      	ldr	r4, [r5, #4]
 8007eb2:	69a3      	ldr	r3, [r4, #24]
 8007eb4:	60a3      	str	r3, [r4, #8]
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	071a      	lsls	r2, r3, #28
 8007eba:	d52f      	bpl.n	8007f1c <__swbuf_r+0x84>
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	b36b      	cbz	r3, 8007f1c <__swbuf_r+0x84>
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	6820      	ldr	r0, [r4, #0]
 8007ec4:	1ac0      	subs	r0, r0, r3
 8007ec6:	6963      	ldr	r3, [r4, #20]
 8007ec8:	b2f6      	uxtb	r6, r6
 8007eca:	4283      	cmp	r3, r0
 8007ecc:	4637      	mov	r7, r6
 8007ece:	dc04      	bgt.n	8007eda <__swbuf_r+0x42>
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 ffa0 	bl	8008e18 <_fflush_r>
 8007ed8:	bb30      	cbnz	r0, 8007f28 <__swbuf_r+0x90>
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	60a3      	str	r3, [r4, #8]
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	6022      	str	r2, [r4, #0]
 8007ee6:	701e      	strb	r6, [r3, #0]
 8007ee8:	6963      	ldr	r3, [r4, #20]
 8007eea:	3001      	adds	r0, #1
 8007eec:	4283      	cmp	r3, r0
 8007eee:	d004      	beq.n	8007efa <__swbuf_r+0x62>
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	07db      	lsls	r3, r3, #31
 8007ef4:	d506      	bpl.n	8007f04 <__swbuf_r+0x6c>
 8007ef6:	2e0a      	cmp	r6, #10
 8007ef8:	d104      	bne.n	8007f04 <__swbuf_r+0x6c>
 8007efa:	4621      	mov	r1, r4
 8007efc:	4628      	mov	r0, r5
 8007efe:	f000 ff8b 	bl	8008e18 <_fflush_r>
 8007f02:	b988      	cbnz	r0, 8007f28 <__swbuf_r+0x90>
 8007f04:	4638      	mov	r0, r7
 8007f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f08:	4b0a      	ldr	r3, [pc, #40]	; (8007f34 <__swbuf_r+0x9c>)
 8007f0a:	429c      	cmp	r4, r3
 8007f0c:	d101      	bne.n	8007f12 <__swbuf_r+0x7a>
 8007f0e:	68ac      	ldr	r4, [r5, #8]
 8007f10:	e7cf      	b.n	8007eb2 <__swbuf_r+0x1a>
 8007f12:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <__swbuf_r+0xa0>)
 8007f14:	429c      	cmp	r4, r3
 8007f16:	bf08      	it	eq
 8007f18:	68ec      	ldreq	r4, [r5, #12]
 8007f1a:	e7ca      	b.n	8007eb2 <__swbuf_r+0x1a>
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f000 f80c 	bl	8007f3c <__swsetup_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d0cb      	beq.n	8007ec0 <__swbuf_r+0x28>
 8007f28:	f04f 37ff 	mov.w	r7, #4294967295
 8007f2c:	e7ea      	b.n	8007f04 <__swbuf_r+0x6c>
 8007f2e:	bf00      	nop
 8007f30:	0800a3c8 	.word	0x0800a3c8
 8007f34:	0800a3e8 	.word	0x0800a3e8
 8007f38:	0800a3a8 	.word	0x0800a3a8

08007f3c <__swsetup_r>:
 8007f3c:	4b32      	ldr	r3, [pc, #200]	; (8008008 <__swsetup_r+0xcc>)
 8007f3e:	b570      	push	{r4, r5, r6, lr}
 8007f40:	681d      	ldr	r5, [r3, #0]
 8007f42:	4606      	mov	r6, r0
 8007f44:	460c      	mov	r4, r1
 8007f46:	b125      	cbz	r5, 8007f52 <__swsetup_r+0x16>
 8007f48:	69ab      	ldr	r3, [r5, #24]
 8007f4a:	b913      	cbnz	r3, 8007f52 <__swsetup_r+0x16>
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f000 fff7 	bl	8008f40 <__sinit>
 8007f52:	4b2e      	ldr	r3, [pc, #184]	; (800800c <__swsetup_r+0xd0>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	d10f      	bne.n	8007f78 <__swsetup_r+0x3c>
 8007f58:	686c      	ldr	r4, [r5, #4]
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f60:	0719      	lsls	r1, r3, #28
 8007f62:	d42c      	bmi.n	8007fbe <__swsetup_r+0x82>
 8007f64:	06dd      	lsls	r5, r3, #27
 8007f66:	d411      	bmi.n	8007f8c <__swsetup_r+0x50>
 8007f68:	2309      	movs	r3, #9
 8007f6a:	6033      	str	r3, [r6, #0]
 8007f6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f70:	81a3      	strh	r3, [r4, #12]
 8007f72:	f04f 30ff 	mov.w	r0, #4294967295
 8007f76:	e03e      	b.n	8007ff6 <__swsetup_r+0xba>
 8007f78:	4b25      	ldr	r3, [pc, #148]	; (8008010 <__swsetup_r+0xd4>)
 8007f7a:	429c      	cmp	r4, r3
 8007f7c:	d101      	bne.n	8007f82 <__swsetup_r+0x46>
 8007f7e:	68ac      	ldr	r4, [r5, #8]
 8007f80:	e7eb      	b.n	8007f5a <__swsetup_r+0x1e>
 8007f82:	4b24      	ldr	r3, [pc, #144]	; (8008014 <__swsetup_r+0xd8>)
 8007f84:	429c      	cmp	r4, r3
 8007f86:	bf08      	it	eq
 8007f88:	68ec      	ldreq	r4, [r5, #12]
 8007f8a:	e7e6      	b.n	8007f5a <__swsetup_r+0x1e>
 8007f8c:	0758      	lsls	r0, r3, #29
 8007f8e:	d512      	bpl.n	8007fb6 <__swsetup_r+0x7a>
 8007f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f92:	b141      	cbz	r1, 8007fa6 <__swsetup_r+0x6a>
 8007f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	d002      	beq.n	8007fa2 <__swsetup_r+0x66>
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f001 fc89 	bl	80098b4 <_free_r>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	6063      	str	r3, [r4, #4]
 8007fb2:	6923      	ldr	r3, [r4, #16]
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	f043 0308 	orr.w	r3, r3, #8
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	6923      	ldr	r3, [r4, #16]
 8007fc0:	b94b      	cbnz	r3, 8007fd6 <__swsetup_r+0x9a>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fcc:	d003      	beq.n	8007fd6 <__swsetup_r+0x9a>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f001 f87f 	bl	80090d4 <__smakebuf_r>
 8007fd6:	89a0      	ldrh	r0, [r4, #12]
 8007fd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fdc:	f010 0301 	ands.w	r3, r0, #1
 8007fe0:	d00a      	beq.n	8007ff8 <__swsetup_r+0xbc>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60a3      	str	r3, [r4, #8]
 8007fe6:	6963      	ldr	r3, [r4, #20]
 8007fe8:	425b      	negs	r3, r3
 8007fea:	61a3      	str	r3, [r4, #24]
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	b943      	cbnz	r3, 8008002 <__swsetup_r+0xc6>
 8007ff0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ff4:	d1ba      	bne.n	8007f6c <__swsetup_r+0x30>
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	0781      	lsls	r1, r0, #30
 8007ffa:	bf58      	it	pl
 8007ffc:	6963      	ldrpl	r3, [r4, #20]
 8007ffe:	60a3      	str	r3, [r4, #8]
 8008000:	e7f4      	b.n	8007fec <__swsetup_r+0xb0>
 8008002:	2000      	movs	r0, #0
 8008004:	e7f7      	b.n	8007ff6 <__swsetup_r+0xba>
 8008006:	bf00      	nop
 8008008:	2000000c 	.word	0x2000000c
 800800c:	0800a3c8 	.word	0x0800a3c8
 8008010:	0800a3e8 	.word	0x0800a3e8
 8008014:	0800a3a8 	.word	0x0800a3a8

08008018 <quorem>:
 8008018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	6903      	ldr	r3, [r0, #16]
 800801e:	690c      	ldr	r4, [r1, #16]
 8008020:	42a3      	cmp	r3, r4
 8008022:	4607      	mov	r7, r0
 8008024:	f2c0 8081 	blt.w	800812a <quorem+0x112>
 8008028:	3c01      	subs	r4, #1
 800802a:	f101 0814 	add.w	r8, r1, #20
 800802e:	f100 0514 	add.w	r5, r0, #20
 8008032:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800803c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008040:	3301      	adds	r3, #1
 8008042:	429a      	cmp	r2, r3
 8008044:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008048:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800804c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008050:	d331      	bcc.n	80080b6 <quorem+0x9e>
 8008052:	f04f 0e00 	mov.w	lr, #0
 8008056:	4640      	mov	r0, r8
 8008058:	46ac      	mov	ip, r5
 800805a:	46f2      	mov	sl, lr
 800805c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008060:	b293      	uxth	r3, r2
 8008062:	fb06 e303 	mla	r3, r6, r3, lr
 8008066:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800806a:	b29b      	uxth	r3, r3
 800806c:	ebaa 0303 	sub.w	r3, sl, r3
 8008070:	f8dc a000 	ldr.w	sl, [ip]
 8008074:	0c12      	lsrs	r2, r2, #16
 8008076:	fa13 f38a 	uxtah	r3, r3, sl
 800807a:	fb06 e202 	mla	r2, r6, r2, lr
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	9b00      	ldr	r3, [sp, #0]
 8008082:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008086:	b292      	uxth	r2, r2
 8008088:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800808c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008090:	f8bd 3000 	ldrh.w	r3, [sp]
 8008094:	4581      	cmp	r9, r0
 8008096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800809a:	f84c 3b04 	str.w	r3, [ip], #4
 800809e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80080a2:	d2db      	bcs.n	800805c <quorem+0x44>
 80080a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80080a8:	b92b      	cbnz	r3, 80080b6 <quorem+0x9e>
 80080aa:	9b01      	ldr	r3, [sp, #4]
 80080ac:	3b04      	subs	r3, #4
 80080ae:	429d      	cmp	r5, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	d32e      	bcc.n	8008112 <quorem+0xfa>
 80080b4:	613c      	str	r4, [r7, #16]
 80080b6:	4638      	mov	r0, r7
 80080b8:	f001 fae4 	bl	8009684 <__mcmp>
 80080bc:	2800      	cmp	r0, #0
 80080be:	db24      	blt.n	800810a <quorem+0xf2>
 80080c0:	3601      	adds	r6, #1
 80080c2:	4628      	mov	r0, r5
 80080c4:	f04f 0c00 	mov.w	ip, #0
 80080c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80080cc:	f8d0 e000 	ldr.w	lr, [r0]
 80080d0:	b293      	uxth	r3, r2
 80080d2:	ebac 0303 	sub.w	r3, ip, r3
 80080d6:	0c12      	lsrs	r2, r2, #16
 80080d8:	fa13 f38e 	uxtah	r3, r3, lr
 80080dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ea:	45c1      	cmp	r9, r8
 80080ec:	f840 3b04 	str.w	r3, [r0], #4
 80080f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080f4:	d2e8      	bcs.n	80080c8 <quorem+0xb0>
 80080f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080fe:	b922      	cbnz	r2, 800810a <quorem+0xf2>
 8008100:	3b04      	subs	r3, #4
 8008102:	429d      	cmp	r5, r3
 8008104:	461a      	mov	r2, r3
 8008106:	d30a      	bcc.n	800811e <quorem+0x106>
 8008108:	613c      	str	r4, [r7, #16]
 800810a:	4630      	mov	r0, r6
 800810c:	b003      	add	sp, #12
 800810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008112:	6812      	ldr	r2, [r2, #0]
 8008114:	3b04      	subs	r3, #4
 8008116:	2a00      	cmp	r2, #0
 8008118:	d1cc      	bne.n	80080b4 <quorem+0x9c>
 800811a:	3c01      	subs	r4, #1
 800811c:	e7c7      	b.n	80080ae <quorem+0x96>
 800811e:	6812      	ldr	r2, [r2, #0]
 8008120:	3b04      	subs	r3, #4
 8008122:	2a00      	cmp	r2, #0
 8008124:	d1f0      	bne.n	8008108 <quorem+0xf0>
 8008126:	3c01      	subs	r4, #1
 8008128:	e7eb      	b.n	8008102 <quorem+0xea>
 800812a:	2000      	movs	r0, #0
 800812c:	e7ee      	b.n	800810c <quorem+0xf4>
	...

08008130 <_dtoa_r>:
 8008130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	ed2d 8b04 	vpush	{d8-d9}
 8008138:	ec57 6b10 	vmov	r6, r7, d0
 800813c:	b093      	sub	sp, #76	; 0x4c
 800813e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008140:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008144:	9106      	str	r1, [sp, #24]
 8008146:	ee10 aa10 	vmov	sl, s0
 800814a:	4604      	mov	r4, r0
 800814c:	9209      	str	r2, [sp, #36]	; 0x24
 800814e:	930c      	str	r3, [sp, #48]	; 0x30
 8008150:	46bb      	mov	fp, r7
 8008152:	b975      	cbnz	r5, 8008172 <_dtoa_r+0x42>
 8008154:	2010      	movs	r0, #16
 8008156:	f000 fffd 	bl	8009154 <malloc>
 800815a:	4602      	mov	r2, r0
 800815c:	6260      	str	r0, [r4, #36]	; 0x24
 800815e:	b920      	cbnz	r0, 800816a <_dtoa_r+0x3a>
 8008160:	4ba7      	ldr	r3, [pc, #668]	; (8008400 <_dtoa_r+0x2d0>)
 8008162:	21ea      	movs	r1, #234	; 0xea
 8008164:	48a7      	ldr	r0, [pc, #668]	; (8008404 <_dtoa_r+0x2d4>)
 8008166:	f001 fe45 	bl	8009df4 <__assert_func>
 800816a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800816e:	6005      	str	r5, [r0, #0]
 8008170:	60c5      	str	r5, [r0, #12]
 8008172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008174:	6819      	ldr	r1, [r3, #0]
 8008176:	b151      	cbz	r1, 800818e <_dtoa_r+0x5e>
 8008178:	685a      	ldr	r2, [r3, #4]
 800817a:	604a      	str	r2, [r1, #4]
 800817c:	2301      	movs	r3, #1
 800817e:	4093      	lsls	r3, r2
 8008180:	608b      	str	r3, [r1, #8]
 8008182:	4620      	mov	r0, r4
 8008184:	f001 f83c 	bl	8009200 <_Bfree>
 8008188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	1e3b      	subs	r3, r7, #0
 8008190:	bfaa      	itet	ge
 8008192:	2300      	movge	r3, #0
 8008194:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008198:	f8c8 3000 	strge.w	r3, [r8]
 800819c:	4b9a      	ldr	r3, [pc, #616]	; (8008408 <_dtoa_r+0x2d8>)
 800819e:	bfbc      	itt	lt
 80081a0:	2201      	movlt	r2, #1
 80081a2:	f8c8 2000 	strlt.w	r2, [r8]
 80081a6:	ea33 030b 	bics.w	r3, r3, fp
 80081aa:	d11b      	bne.n	80081e4 <_dtoa_r+0xb4>
 80081ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081b8:	4333      	orrs	r3, r6
 80081ba:	f000 8592 	beq.w	8008ce2 <_dtoa_r+0xbb2>
 80081be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081c0:	b963      	cbnz	r3, 80081dc <_dtoa_r+0xac>
 80081c2:	4b92      	ldr	r3, [pc, #584]	; (800840c <_dtoa_r+0x2dc>)
 80081c4:	e022      	b.n	800820c <_dtoa_r+0xdc>
 80081c6:	4b92      	ldr	r3, [pc, #584]	; (8008410 <_dtoa_r+0x2e0>)
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	3308      	adds	r3, #8
 80081cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081ce:	6013      	str	r3, [r2, #0]
 80081d0:	9801      	ldr	r0, [sp, #4]
 80081d2:	b013      	add	sp, #76	; 0x4c
 80081d4:	ecbd 8b04 	vpop	{d8-d9}
 80081d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081dc:	4b8b      	ldr	r3, [pc, #556]	; (800840c <_dtoa_r+0x2dc>)
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	3303      	adds	r3, #3
 80081e2:	e7f3      	b.n	80081cc <_dtoa_r+0x9c>
 80081e4:	2200      	movs	r2, #0
 80081e6:	2300      	movs	r3, #0
 80081e8:	4650      	mov	r0, sl
 80081ea:	4659      	mov	r1, fp
 80081ec:	f7f8 fc6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80081f0:	ec4b ab19 	vmov	d9, sl, fp
 80081f4:	4680      	mov	r8, r0
 80081f6:	b158      	cbz	r0, 8008210 <_dtoa_r+0xe0>
 80081f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081fa:	2301      	movs	r3, #1
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 856b 	beq.w	8008cdc <_dtoa_r+0xbac>
 8008206:	4883      	ldr	r0, [pc, #524]	; (8008414 <_dtoa_r+0x2e4>)
 8008208:	6018      	str	r0, [r3, #0]
 800820a:	1e43      	subs	r3, r0, #1
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	e7df      	b.n	80081d0 <_dtoa_r+0xa0>
 8008210:	ec4b ab10 	vmov	d0, sl, fp
 8008214:	aa10      	add	r2, sp, #64	; 0x40
 8008216:	a911      	add	r1, sp, #68	; 0x44
 8008218:	4620      	mov	r0, r4
 800821a:	f001 fad9 	bl	80097d0 <__d2b>
 800821e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008222:	ee08 0a10 	vmov	s16, r0
 8008226:	2d00      	cmp	r5, #0
 8008228:	f000 8084 	beq.w	8008334 <_dtoa_r+0x204>
 800822c:	ee19 3a90 	vmov	r3, s19
 8008230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008234:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008238:	4656      	mov	r6, sl
 800823a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800823e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008242:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008246:	4b74      	ldr	r3, [pc, #464]	; (8008418 <_dtoa_r+0x2e8>)
 8008248:	2200      	movs	r2, #0
 800824a:	4630      	mov	r0, r6
 800824c:	4639      	mov	r1, r7
 800824e:	f7f8 f81b 	bl	8000288 <__aeabi_dsub>
 8008252:	a365      	add	r3, pc, #404	; (adr r3, 80083e8 <_dtoa_r+0x2b8>)
 8008254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008258:	f7f8 f9ce 	bl	80005f8 <__aeabi_dmul>
 800825c:	a364      	add	r3, pc, #400	; (adr r3, 80083f0 <_dtoa_r+0x2c0>)
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	f7f8 f813 	bl	800028c <__adddf3>
 8008266:	4606      	mov	r6, r0
 8008268:	4628      	mov	r0, r5
 800826a:	460f      	mov	r7, r1
 800826c:	f7f8 f95a 	bl	8000524 <__aeabi_i2d>
 8008270:	a361      	add	r3, pc, #388	; (adr r3, 80083f8 <_dtoa_r+0x2c8>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 f9bf 	bl	80005f8 <__aeabi_dmul>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4630      	mov	r0, r6
 8008280:	4639      	mov	r1, r7
 8008282:	f7f8 f803 	bl	800028c <__adddf3>
 8008286:	4606      	mov	r6, r0
 8008288:	460f      	mov	r7, r1
 800828a:	f7f8 fc65 	bl	8000b58 <__aeabi_d2iz>
 800828e:	2200      	movs	r2, #0
 8008290:	9000      	str	r0, [sp, #0]
 8008292:	2300      	movs	r3, #0
 8008294:	4630      	mov	r0, r6
 8008296:	4639      	mov	r1, r7
 8008298:	f7f8 fc20 	bl	8000adc <__aeabi_dcmplt>
 800829c:	b150      	cbz	r0, 80082b4 <_dtoa_r+0x184>
 800829e:	9800      	ldr	r0, [sp, #0]
 80082a0:	f7f8 f940 	bl	8000524 <__aeabi_i2d>
 80082a4:	4632      	mov	r2, r6
 80082a6:	463b      	mov	r3, r7
 80082a8:	f7f8 fc0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80082ac:	b910      	cbnz	r0, 80082b4 <_dtoa_r+0x184>
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	9b00      	ldr	r3, [sp, #0]
 80082b6:	2b16      	cmp	r3, #22
 80082b8:	d85a      	bhi.n	8008370 <_dtoa_r+0x240>
 80082ba:	9a00      	ldr	r2, [sp, #0]
 80082bc:	4b57      	ldr	r3, [pc, #348]	; (800841c <_dtoa_r+0x2ec>)
 80082be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	ec51 0b19 	vmov	r0, r1, d9
 80082ca:	f7f8 fc07 	bl	8000adc <__aeabi_dcmplt>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d050      	beq.n	8008374 <_dtoa_r+0x244>
 80082d2:	9b00      	ldr	r3, [sp, #0]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	9300      	str	r3, [sp, #0]
 80082d8:	2300      	movs	r3, #0
 80082da:	930b      	str	r3, [sp, #44]	; 0x2c
 80082dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082de:	1b5d      	subs	r5, r3, r5
 80082e0:	1e6b      	subs	r3, r5, #1
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	bf45      	ittet	mi
 80082e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80082ea:	9304      	strmi	r3, [sp, #16]
 80082ec:	2300      	movpl	r3, #0
 80082ee:	2300      	movmi	r3, #0
 80082f0:	bf4c      	ite	mi
 80082f2:	9305      	strmi	r3, [sp, #20]
 80082f4:	9304      	strpl	r3, [sp, #16]
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	db3d      	blt.n	8008378 <_dtoa_r+0x248>
 80082fc:	9b05      	ldr	r3, [sp, #20]
 80082fe:	9a00      	ldr	r2, [sp, #0]
 8008300:	920a      	str	r2, [sp, #40]	; 0x28
 8008302:	4413      	add	r3, r2
 8008304:	9305      	str	r3, [sp, #20]
 8008306:	2300      	movs	r3, #0
 8008308:	9307      	str	r3, [sp, #28]
 800830a:	9b06      	ldr	r3, [sp, #24]
 800830c:	2b09      	cmp	r3, #9
 800830e:	f200 8089 	bhi.w	8008424 <_dtoa_r+0x2f4>
 8008312:	2b05      	cmp	r3, #5
 8008314:	bfc4      	itt	gt
 8008316:	3b04      	subgt	r3, #4
 8008318:	9306      	strgt	r3, [sp, #24]
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	f1a3 0302 	sub.w	r3, r3, #2
 8008320:	bfcc      	ite	gt
 8008322:	2500      	movgt	r5, #0
 8008324:	2501      	movle	r5, #1
 8008326:	2b03      	cmp	r3, #3
 8008328:	f200 8087 	bhi.w	800843a <_dtoa_r+0x30a>
 800832c:	e8df f003 	tbb	[pc, r3]
 8008330:	59383a2d 	.word	0x59383a2d
 8008334:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008338:	441d      	add	r5, r3
 800833a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800833e:	2b20      	cmp	r3, #32
 8008340:	bfc1      	itttt	gt
 8008342:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008346:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800834a:	fa0b f303 	lslgt.w	r3, fp, r3
 800834e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008352:	bfda      	itte	le
 8008354:	f1c3 0320 	rsble	r3, r3, #32
 8008358:	fa06 f003 	lslle.w	r0, r6, r3
 800835c:	4318      	orrgt	r0, r3
 800835e:	f7f8 f8d1 	bl	8000504 <__aeabi_ui2d>
 8008362:	2301      	movs	r3, #1
 8008364:	4606      	mov	r6, r0
 8008366:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800836a:	3d01      	subs	r5, #1
 800836c:	930e      	str	r3, [sp, #56]	; 0x38
 800836e:	e76a      	b.n	8008246 <_dtoa_r+0x116>
 8008370:	2301      	movs	r3, #1
 8008372:	e7b2      	b.n	80082da <_dtoa_r+0x1aa>
 8008374:	900b      	str	r0, [sp, #44]	; 0x2c
 8008376:	e7b1      	b.n	80082dc <_dtoa_r+0x1ac>
 8008378:	9b04      	ldr	r3, [sp, #16]
 800837a:	9a00      	ldr	r2, [sp, #0]
 800837c:	1a9b      	subs	r3, r3, r2
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	4253      	negs	r3, r2
 8008382:	9307      	str	r3, [sp, #28]
 8008384:	2300      	movs	r3, #0
 8008386:	930a      	str	r3, [sp, #40]	; 0x28
 8008388:	e7bf      	b.n	800830a <_dtoa_r+0x1da>
 800838a:	2300      	movs	r3, #0
 800838c:	9308      	str	r3, [sp, #32]
 800838e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	dc55      	bgt.n	8008440 <_dtoa_r+0x310>
 8008394:	2301      	movs	r3, #1
 8008396:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800839a:	461a      	mov	r2, r3
 800839c:	9209      	str	r2, [sp, #36]	; 0x24
 800839e:	e00c      	b.n	80083ba <_dtoa_r+0x28a>
 80083a0:	2301      	movs	r3, #1
 80083a2:	e7f3      	b.n	800838c <_dtoa_r+0x25c>
 80083a4:	2300      	movs	r3, #0
 80083a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083a8:	9308      	str	r3, [sp, #32]
 80083aa:	9b00      	ldr	r3, [sp, #0]
 80083ac:	4413      	add	r3, r2
 80083ae:	9302      	str	r3, [sp, #8]
 80083b0:	3301      	adds	r3, #1
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	bfb8      	it	lt
 80083b8:	2301      	movlt	r3, #1
 80083ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083bc:	2200      	movs	r2, #0
 80083be:	6042      	str	r2, [r0, #4]
 80083c0:	2204      	movs	r2, #4
 80083c2:	f102 0614 	add.w	r6, r2, #20
 80083c6:	429e      	cmp	r6, r3
 80083c8:	6841      	ldr	r1, [r0, #4]
 80083ca:	d93d      	bls.n	8008448 <_dtoa_r+0x318>
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 fed7 	bl	8009180 <_Balloc>
 80083d2:	9001      	str	r0, [sp, #4]
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d13b      	bne.n	8008450 <_dtoa_r+0x320>
 80083d8:	4b11      	ldr	r3, [pc, #68]	; (8008420 <_dtoa_r+0x2f0>)
 80083da:	4602      	mov	r2, r0
 80083dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083e0:	e6c0      	b.n	8008164 <_dtoa_r+0x34>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e7df      	b.n	80083a6 <_dtoa_r+0x276>
 80083e6:	bf00      	nop
 80083e8:	636f4361 	.word	0x636f4361
 80083ec:	3fd287a7 	.word	0x3fd287a7
 80083f0:	8b60c8b3 	.word	0x8b60c8b3
 80083f4:	3fc68a28 	.word	0x3fc68a28
 80083f8:	509f79fb 	.word	0x509f79fb
 80083fc:	3fd34413 	.word	0x3fd34413
 8008400:	0800a325 	.word	0x0800a325
 8008404:	0800a33c 	.word	0x0800a33c
 8008408:	7ff00000 	.word	0x7ff00000
 800840c:	0800a321 	.word	0x0800a321
 8008410:	0800a318 	.word	0x0800a318
 8008414:	0800a2f5 	.word	0x0800a2f5
 8008418:	3ff80000 	.word	0x3ff80000
 800841c:	0800a490 	.word	0x0800a490
 8008420:	0800a397 	.word	0x0800a397
 8008424:	2501      	movs	r5, #1
 8008426:	2300      	movs	r3, #0
 8008428:	9306      	str	r3, [sp, #24]
 800842a:	9508      	str	r5, [sp, #32]
 800842c:	f04f 33ff 	mov.w	r3, #4294967295
 8008430:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008434:	2200      	movs	r2, #0
 8008436:	2312      	movs	r3, #18
 8008438:	e7b0      	b.n	800839c <_dtoa_r+0x26c>
 800843a:	2301      	movs	r3, #1
 800843c:	9308      	str	r3, [sp, #32]
 800843e:	e7f5      	b.n	800842c <_dtoa_r+0x2fc>
 8008440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008442:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008446:	e7b8      	b.n	80083ba <_dtoa_r+0x28a>
 8008448:	3101      	adds	r1, #1
 800844a:	6041      	str	r1, [r0, #4]
 800844c:	0052      	lsls	r2, r2, #1
 800844e:	e7b8      	b.n	80083c2 <_dtoa_r+0x292>
 8008450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008452:	9a01      	ldr	r2, [sp, #4]
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	2b0e      	cmp	r3, #14
 800845a:	f200 809d 	bhi.w	8008598 <_dtoa_r+0x468>
 800845e:	2d00      	cmp	r5, #0
 8008460:	f000 809a 	beq.w	8008598 <_dtoa_r+0x468>
 8008464:	9b00      	ldr	r3, [sp, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	dd32      	ble.n	80084d0 <_dtoa_r+0x3a0>
 800846a:	4ab7      	ldr	r2, [pc, #732]	; (8008748 <_dtoa_r+0x618>)
 800846c:	f003 030f 	and.w	r3, r3, #15
 8008470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008474:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008478:	9b00      	ldr	r3, [sp, #0]
 800847a:	05d8      	lsls	r0, r3, #23
 800847c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008480:	d516      	bpl.n	80084b0 <_dtoa_r+0x380>
 8008482:	4bb2      	ldr	r3, [pc, #712]	; (800874c <_dtoa_r+0x61c>)
 8008484:	ec51 0b19 	vmov	r0, r1, d9
 8008488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800848c:	f7f8 f9de 	bl	800084c <__aeabi_ddiv>
 8008490:	f007 070f 	and.w	r7, r7, #15
 8008494:	4682      	mov	sl, r0
 8008496:	468b      	mov	fp, r1
 8008498:	2503      	movs	r5, #3
 800849a:	4eac      	ldr	r6, [pc, #688]	; (800874c <_dtoa_r+0x61c>)
 800849c:	b957      	cbnz	r7, 80084b4 <_dtoa_r+0x384>
 800849e:	4642      	mov	r2, r8
 80084a0:	464b      	mov	r3, r9
 80084a2:	4650      	mov	r0, sl
 80084a4:	4659      	mov	r1, fp
 80084a6:	f7f8 f9d1 	bl	800084c <__aeabi_ddiv>
 80084aa:	4682      	mov	sl, r0
 80084ac:	468b      	mov	fp, r1
 80084ae:	e028      	b.n	8008502 <_dtoa_r+0x3d2>
 80084b0:	2502      	movs	r5, #2
 80084b2:	e7f2      	b.n	800849a <_dtoa_r+0x36a>
 80084b4:	07f9      	lsls	r1, r7, #31
 80084b6:	d508      	bpl.n	80084ca <_dtoa_r+0x39a>
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084c0:	f7f8 f89a 	bl	80005f8 <__aeabi_dmul>
 80084c4:	3501      	adds	r5, #1
 80084c6:	4680      	mov	r8, r0
 80084c8:	4689      	mov	r9, r1
 80084ca:	107f      	asrs	r7, r7, #1
 80084cc:	3608      	adds	r6, #8
 80084ce:	e7e5      	b.n	800849c <_dtoa_r+0x36c>
 80084d0:	f000 809b 	beq.w	800860a <_dtoa_r+0x4da>
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	4f9d      	ldr	r7, [pc, #628]	; (800874c <_dtoa_r+0x61c>)
 80084d8:	425e      	negs	r6, r3
 80084da:	4b9b      	ldr	r3, [pc, #620]	; (8008748 <_dtoa_r+0x618>)
 80084dc:	f006 020f 	and.w	r2, r6, #15
 80084e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	ec51 0b19 	vmov	r0, r1, d9
 80084ec:	f7f8 f884 	bl	80005f8 <__aeabi_dmul>
 80084f0:	1136      	asrs	r6, r6, #4
 80084f2:	4682      	mov	sl, r0
 80084f4:	468b      	mov	fp, r1
 80084f6:	2300      	movs	r3, #0
 80084f8:	2502      	movs	r5, #2
 80084fa:	2e00      	cmp	r6, #0
 80084fc:	d17a      	bne.n	80085f4 <_dtoa_r+0x4c4>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1d3      	bne.n	80084aa <_dtoa_r+0x37a>
 8008502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8082 	beq.w	800860e <_dtoa_r+0x4de>
 800850a:	4b91      	ldr	r3, [pc, #580]	; (8008750 <_dtoa_r+0x620>)
 800850c:	2200      	movs	r2, #0
 800850e:	4650      	mov	r0, sl
 8008510:	4659      	mov	r1, fp
 8008512:	f7f8 fae3 	bl	8000adc <__aeabi_dcmplt>
 8008516:	2800      	cmp	r0, #0
 8008518:	d079      	beq.n	800860e <_dtoa_r+0x4de>
 800851a:	9b03      	ldr	r3, [sp, #12]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d076      	beq.n	800860e <_dtoa_r+0x4de>
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	dd36      	ble.n	8008594 <_dtoa_r+0x464>
 8008526:	9b00      	ldr	r3, [sp, #0]
 8008528:	4650      	mov	r0, sl
 800852a:	4659      	mov	r1, fp
 800852c:	1e5f      	subs	r7, r3, #1
 800852e:	2200      	movs	r2, #0
 8008530:	4b88      	ldr	r3, [pc, #544]	; (8008754 <_dtoa_r+0x624>)
 8008532:	f7f8 f861 	bl	80005f8 <__aeabi_dmul>
 8008536:	9e02      	ldr	r6, [sp, #8]
 8008538:	4682      	mov	sl, r0
 800853a:	468b      	mov	fp, r1
 800853c:	3501      	adds	r5, #1
 800853e:	4628      	mov	r0, r5
 8008540:	f7f7 fff0 	bl	8000524 <__aeabi_i2d>
 8008544:	4652      	mov	r2, sl
 8008546:	465b      	mov	r3, fp
 8008548:	f7f8 f856 	bl	80005f8 <__aeabi_dmul>
 800854c:	4b82      	ldr	r3, [pc, #520]	; (8008758 <_dtoa_r+0x628>)
 800854e:	2200      	movs	r2, #0
 8008550:	f7f7 fe9c 	bl	800028c <__adddf3>
 8008554:	46d0      	mov	r8, sl
 8008556:	46d9      	mov	r9, fp
 8008558:	4682      	mov	sl, r0
 800855a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800855e:	2e00      	cmp	r6, #0
 8008560:	d158      	bne.n	8008614 <_dtoa_r+0x4e4>
 8008562:	4b7e      	ldr	r3, [pc, #504]	; (800875c <_dtoa_r+0x62c>)
 8008564:	2200      	movs	r2, #0
 8008566:	4640      	mov	r0, r8
 8008568:	4649      	mov	r1, r9
 800856a:	f7f7 fe8d 	bl	8000288 <__aeabi_dsub>
 800856e:	4652      	mov	r2, sl
 8008570:	465b      	mov	r3, fp
 8008572:	4680      	mov	r8, r0
 8008574:	4689      	mov	r9, r1
 8008576:	f7f8 facf 	bl	8000b18 <__aeabi_dcmpgt>
 800857a:	2800      	cmp	r0, #0
 800857c:	f040 8295 	bne.w	8008aaa <_dtoa_r+0x97a>
 8008580:	4652      	mov	r2, sl
 8008582:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008586:	4640      	mov	r0, r8
 8008588:	4649      	mov	r1, r9
 800858a:	f7f8 faa7 	bl	8000adc <__aeabi_dcmplt>
 800858e:	2800      	cmp	r0, #0
 8008590:	f040 8289 	bne.w	8008aa6 <_dtoa_r+0x976>
 8008594:	ec5b ab19 	vmov	sl, fp, d9
 8008598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800859a:	2b00      	cmp	r3, #0
 800859c:	f2c0 8148 	blt.w	8008830 <_dtoa_r+0x700>
 80085a0:	9a00      	ldr	r2, [sp, #0]
 80085a2:	2a0e      	cmp	r2, #14
 80085a4:	f300 8144 	bgt.w	8008830 <_dtoa_r+0x700>
 80085a8:	4b67      	ldr	r3, [pc, #412]	; (8008748 <_dtoa_r+0x618>)
 80085aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f280 80d5 	bge.w	8008764 <_dtoa_r+0x634>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f300 80d1 	bgt.w	8008764 <_dtoa_r+0x634>
 80085c2:	f040 826f 	bne.w	8008aa4 <_dtoa_r+0x974>
 80085c6:	4b65      	ldr	r3, [pc, #404]	; (800875c <_dtoa_r+0x62c>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	4640      	mov	r0, r8
 80085cc:	4649      	mov	r1, r9
 80085ce:	f7f8 f813 	bl	80005f8 <__aeabi_dmul>
 80085d2:	4652      	mov	r2, sl
 80085d4:	465b      	mov	r3, fp
 80085d6:	f7f8 fa95 	bl	8000b04 <__aeabi_dcmpge>
 80085da:	9e03      	ldr	r6, [sp, #12]
 80085dc:	4637      	mov	r7, r6
 80085de:	2800      	cmp	r0, #0
 80085e0:	f040 8245 	bne.w	8008a6e <_dtoa_r+0x93e>
 80085e4:	9d01      	ldr	r5, [sp, #4]
 80085e6:	2331      	movs	r3, #49	; 0x31
 80085e8:	f805 3b01 	strb.w	r3, [r5], #1
 80085ec:	9b00      	ldr	r3, [sp, #0]
 80085ee:	3301      	adds	r3, #1
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	e240      	b.n	8008a76 <_dtoa_r+0x946>
 80085f4:	07f2      	lsls	r2, r6, #31
 80085f6:	d505      	bpl.n	8008604 <_dtoa_r+0x4d4>
 80085f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085fc:	f7f7 fffc 	bl	80005f8 <__aeabi_dmul>
 8008600:	3501      	adds	r5, #1
 8008602:	2301      	movs	r3, #1
 8008604:	1076      	asrs	r6, r6, #1
 8008606:	3708      	adds	r7, #8
 8008608:	e777      	b.n	80084fa <_dtoa_r+0x3ca>
 800860a:	2502      	movs	r5, #2
 800860c:	e779      	b.n	8008502 <_dtoa_r+0x3d2>
 800860e:	9f00      	ldr	r7, [sp, #0]
 8008610:	9e03      	ldr	r6, [sp, #12]
 8008612:	e794      	b.n	800853e <_dtoa_r+0x40e>
 8008614:	9901      	ldr	r1, [sp, #4]
 8008616:	4b4c      	ldr	r3, [pc, #304]	; (8008748 <_dtoa_r+0x618>)
 8008618:	4431      	add	r1, r6
 800861a:	910d      	str	r1, [sp, #52]	; 0x34
 800861c:	9908      	ldr	r1, [sp, #32]
 800861e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008622:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008626:	2900      	cmp	r1, #0
 8008628:	d043      	beq.n	80086b2 <_dtoa_r+0x582>
 800862a:	494d      	ldr	r1, [pc, #308]	; (8008760 <_dtoa_r+0x630>)
 800862c:	2000      	movs	r0, #0
 800862e:	f7f8 f90d 	bl	800084c <__aeabi_ddiv>
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	f7f7 fe27 	bl	8000288 <__aeabi_dsub>
 800863a:	9d01      	ldr	r5, [sp, #4]
 800863c:	4682      	mov	sl, r0
 800863e:	468b      	mov	fp, r1
 8008640:	4649      	mov	r1, r9
 8008642:	4640      	mov	r0, r8
 8008644:	f7f8 fa88 	bl	8000b58 <__aeabi_d2iz>
 8008648:	4606      	mov	r6, r0
 800864a:	f7f7 ff6b 	bl	8000524 <__aeabi_i2d>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	4640      	mov	r0, r8
 8008654:	4649      	mov	r1, r9
 8008656:	f7f7 fe17 	bl	8000288 <__aeabi_dsub>
 800865a:	3630      	adds	r6, #48	; 0x30
 800865c:	f805 6b01 	strb.w	r6, [r5], #1
 8008660:	4652      	mov	r2, sl
 8008662:	465b      	mov	r3, fp
 8008664:	4680      	mov	r8, r0
 8008666:	4689      	mov	r9, r1
 8008668:	f7f8 fa38 	bl	8000adc <__aeabi_dcmplt>
 800866c:	2800      	cmp	r0, #0
 800866e:	d163      	bne.n	8008738 <_dtoa_r+0x608>
 8008670:	4642      	mov	r2, r8
 8008672:	464b      	mov	r3, r9
 8008674:	4936      	ldr	r1, [pc, #216]	; (8008750 <_dtoa_r+0x620>)
 8008676:	2000      	movs	r0, #0
 8008678:	f7f7 fe06 	bl	8000288 <__aeabi_dsub>
 800867c:	4652      	mov	r2, sl
 800867e:	465b      	mov	r3, fp
 8008680:	f7f8 fa2c 	bl	8000adc <__aeabi_dcmplt>
 8008684:	2800      	cmp	r0, #0
 8008686:	f040 80b5 	bne.w	80087f4 <_dtoa_r+0x6c4>
 800868a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800868c:	429d      	cmp	r5, r3
 800868e:	d081      	beq.n	8008594 <_dtoa_r+0x464>
 8008690:	4b30      	ldr	r3, [pc, #192]	; (8008754 <_dtoa_r+0x624>)
 8008692:	2200      	movs	r2, #0
 8008694:	4650      	mov	r0, sl
 8008696:	4659      	mov	r1, fp
 8008698:	f7f7 ffae 	bl	80005f8 <__aeabi_dmul>
 800869c:	4b2d      	ldr	r3, [pc, #180]	; (8008754 <_dtoa_r+0x624>)
 800869e:	4682      	mov	sl, r0
 80086a0:	468b      	mov	fp, r1
 80086a2:	4640      	mov	r0, r8
 80086a4:	4649      	mov	r1, r9
 80086a6:	2200      	movs	r2, #0
 80086a8:	f7f7 ffa6 	bl	80005f8 <__aeabi_dmul>
 80086ac:	4680      	mov	r8, r0
 80086ae:	4689      	mov	r9, r1
 80086b0:	e7c6      	b.n	8008640 <_dtoa_r+0x510>
 80086b2:	4650      	mov	r0, sl
 80086b4:	4659      	mov	r1, fp
 80086b6:	f7f7 ff9f 	bl	80005f8 <__aeabi_dmul>
 80086ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086bc:	9d01      	ldr	r5, [sp, #4]
 80086be:	930f      	str	r3, [sp, #60]	; 0x3c
 80086c0:	4682      	mov	sl, r0
 80086c2:	468b      	mov	fp, r1
 80086c4:	4649      	mov	r1, r9
 80086c6:	4640      	mov	r0, r8
 80086c8:	f7f8 fa46 	bl	8000b58 <__aeabi_d2iz>
 80086cc:	4606      	mov	r6, r0
 80086ce:	f7f7 ff29 	bl	8000524 <__aeabi_i2d>
 80086d2:	3630      	adds	r6, #48	; 0x30
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	f7f7 fdd4 	bl	8000288 <__aeabi_dsub>
 80086e0:	f805 6b01 	strb.w	r6, [r5], #1
 80086e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086e6:	429d      	cmp	r5, r3
 80086e8:	4680      	mov	r8, r0
 80086ea:	4689      	mov	r9, r1
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	d124      	bne.n	800873c <_dtoa_r+0x60c>
 80086f2:	4b1b      	ldr	r3, [pc, #108]	; (8008760 <_dtoa_r+0x630>)
 80086f4:	4650      	mov	r0, sl
 80086f6:	4659      	mov	r1, fp
 80086f8:	f7f7 fdc8 	bl	800028c <__adddf3>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4640      	mov	r0, r8
 8008702:	4649      	mov	r1, r9
 8008704:	f7f8 fa08 	bl	8000b18 <__aeabi_dcmpgt>
 8008708:	2800      	cmp	r0, #0
 800870a:	d173      	bne.n	80087f4 <_dtoa_r+0x6c4>
 800870c:	4652      	mov	r2, sl
 800870e:	465b      	mov	r3, fp
 8008710:	4913      	ldr	r1, [pc, #76]	; (8008760 <_dtoa_r+0x630>)
 8008712:	2000      	movs	r0, #0
 8008714:	f7f7 fdb8 	bl	8000288 <__aeabi_dsub>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4640      	mov	r0, r8
 800871e:	4649      	mov	r1, r9
 8008720:	f7f8 f9dc 	bl	8000adc <__aeabi_dcmplt>
 8008724:	2800      	cmp	r0, #0
 8008726:	f43f af35 	beq.w	8008594 <_dtoa_r+0x464>
 800872a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800872c:	1e6b      	subs	r3, r5, #1
 800872e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008730:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008734:	2b30      	cmp	r3, #48	; 0x30
 8008736:	d0f8      	beq.n	800872a <_dtoa_r+0x5fa>
 8008738:	9700      	str	r7, [sp, #0]
 800873a:	e049      	b.n	80087d0 <_dtoa_r+0x6a0>
 800873c:	4b05      	ldr	r3, [pc, #20]	; (8008754 <_dtoa_r+0x624>)
 800873e:	f7f7 ff5b 	bl	80005f8 <__aeabi_dmul>
 8008742:	4680      	mov	r8, r0
 8008744:	4689      	mov	r9, r1
 8008746:	e7bd      	b.n	80086c4 <_dtoa_r+0x594>
 8008748:	0800a490 	.word	0x0800a490
 800874c:	0800a468 	.word	0x0800a468
 8008750:	3ff00000 	.word	0x3ff00000
 8008754:	40240000 	.word	0x40240000
 8008758:	401c0000 	.word	0x401c0000
 800875c:	40140000 	.word	0x40140000
 8008760:	3fe00000 	.word	0x3fe00000
 8008764:	9d01      	ldr	r5, [sp, #4]
 8008766:	4656      	mov	r6, sl
 8008768:	465f      	mov	r7, fp
 800876a:	4642      	mov	r2, r8
 800876c:	464b      	mov	r3, r9
 800876e:	4630      	mov	r0, r6
 8008770:	4639      	mov	r1, r7
 8008772:	f7f8 f86b 	bl	800084c <__aeabi_ddiv>
 8008776:	f7f8 f9ef 	bl	8000b58 <__aeabi_d2iz>
 800877a:	4682      	mov	sl, r0
 800877c:	f7f7 fed2 	bl	8000524 <__aeabi_i2d>
 8008780:	4642      	mov	r2, r8
 8008782:	464b      	mov	r3, r9
 8008784:	f7f7 ff38 	bl	80005f8 <__aeabi_dmul>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4630      	mov	r0, r6
 800878e:	4639      	mov	r1, r7
 8008790:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008794:	f7f7 fd78 	bl	8000288 <__aeabi_dsub>
 8008798:	f805 6b01 	strb.w	r6, [r5], #1
 800879c:	9e01      	ldr	r6, [sp, #4]
 800879e:	9f03      	ldr	r7, [sp, #12]
 80087a0:	1bae      	subs	r6, r5, r6
 80087a2:	42b7      	cmp	r7, r6
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	d135      	bne.n	8008816 <_dtoa_r+0x6e6>
 80087aa:	f7f7 fd6f 	bl	800028c <__adddf3>
 80087ae:	4642      	mov	r2, r8
 80087b0:	464b      	mov	r3, r9
 80087b2:	4606      	mov	r6, r0
 80087b4:	460f      	mov	r7, r1
 80087b6:	f7f8 f9af 	bl	8000b18 <__aeabi_dcmpgt>
 80087ba:	b9d0      	cbnz	r0, 80087f2 <_dtoa_r+0x6c2>
 80087bc:	4642      	mov	r2, r8
 80087be:	464b      	mov	r3, r9
 80087c0:	4630      	mov	r0, r6
 80087c2:	4639      	mov	r1, r7
 80087c4:	f7f8 f980 	bl	8000ac8 <__aeabi_dcmpeq>
 80087c8:	b110      	cbz	r0, 80087d0 <_dtoa_r+0x6a0>
 80087ca:	f01a 0f01 	tst.w	sl, #1
 80087ce:	d110      	bne.n	80087f2 <_dtoa_r+0x6c2>
 80087d0:	4620      	mov	r0, r4
 80087d2:	ee18 1a10 	vmov	r1, s16
 80087d6:	f000 fd13 	bl	8009200 <_Bfree>
 80087da:	2300      	movs	r3, #0
 80087dc:	9800      	ldr	r0, [sp, #0]
 80087de:	702b      	strb	r3, [r5, #0]
 80087e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087e2:	3001      	adds	r0, #1
 80087e4:	6018      	str	r0, [r3, #0]
 80087e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f43f acf1 	beq.w	80081d0 <_dtoa_r+0xa0>
 80087ee:	601d      	str	r5, [r3, #0]
 80087f0:	e4ee      	b.n	80081d0 <_dtoa_r+0xa0>
 80087f2:	9f00      	ldr	r7, [sp, #0]
 80087f4:	462b      	mov	r3, r5
 80087f6:	461d      	mov	r5, r3
 80087f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087fc:	2a39      	cmp	r2, #57	; 0x39
 80087fe:	d106      	bne.n	800880e <_dtoa_r+0x6de>
 8008800:	9a01      	ldr	r2, [sp, #4]
 8008802:	429a      	cmp	r2, r3
 8008804:	d1f7      	bne.n	80087f6 <_dtoa_r+0x6c6>
 8008806:	9901      	ldr	r1, [sp, #4]
 8008808:	2230      	movs	r2, #48	; 0x30
 800880a:	3701      	adds	r7, #1
 800880c:	700a      	strb	r2, [r1, #0]
 800880e:	781a      	ldrb	r2, [r3, #0]
 8008810:	3201      	adds	r2, #1
 8008812:	701a      	strb	r2, [r3, #0]
 8008814:	e790      	b.n	8008738 <_dtoa_r+0x608>
 8008816:	4ba6      	ldr	r3, [pc, #664]	; (8008ab0 <_dtoa_r+0x980>)
 8008818:	2200      	movs	r2, #0
 800881a:	f7f7 feed 	bl	80005f8 <__aeabi_dmul>
 800881e:	2200      	movs	r2, #0
 8008820:	2300      	movs	r3, #0
 8008822:	4606      	mov	r6, r0
 8008824:	460f      	mov	r7, r1
 8008826:	f7f8 f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800882a:	2800      	cmp	r0, #0
 800882c:	d09d      	beq.n	800876a <_dtoa_r+0x63a>
 800882e:	e7cf      	b.n	80087d0 <_dtoa_r+0x6a0>
 8008830:	9a08      	ldr	r2, [sp, #32]
 8008832:	2a00      	cmp	r2, #0
 8008834:	f000 80d7 	beq.w	80089e6 <_dtoa_r+0x8b6>
 8008838:	9a06      	ldr	r2, [sp, #24]
 800883a:	2a01      	cmp	r2, #1
 800883c:	f300 80ba 	bgt.w	80089b4 <_dtoa_r+0x884>
 8008840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008842:	2a00      	cmp	r2, #0
 8008844:	f000 80b2 	beq.w	80089ac <_dtoa_r+0x87c>
 8008848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800884c:	9e07      	ldr	r6, [sp, #28]
 800884e:	9d04      	ldr	r5, [sp, #16]
 8008850:	9a04      	ldr	r2, [sp, #16]
 8008852:	441a      	add	r2, r3
 8008854:	9204      	str	r2, [sp, #16]
 8008856:	9a05      	ldr	r2, [sp, #20]
 8008858:	2101      	movs	r1, #1
 800885a:	441a      	add	r2, r3
 800885c:	4620      	mov	r0, r4
 800885e:	9205      	str	r2, [sp, #20]
 8008860:	f000 fd86 	bl	8009370 <__i2b>
 8008864:	4607      	mov	r7, r0
 8008866:	2d00      	cmp	r5, #0
 8008868:	dd0c      	ble.n	8008884 <_dtoa_r+0x754>
 800886a:	9b05      	ldr	r3, [sp, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd09      	ble.n	8008884 <_dtoa_r+0x754>
 8008870:	42ab      	cmp	r3, r5
 8008872:	9a04      	ldr	r2, [sp, #16]
 8008874:	bfa8      	it	ge
 8008876:	462b      	movge	r3, r5
 8008878:	1ad2      	subs	r2, r2, r3
 800887a:	9204      	str	r2, [sp, #16]
 800887c:	9a05      	ldr	r2, [sp, #20]
 800887e:	1aed      	subs	r5, r5, r3
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	9305      	str	r3, [sp, #20]
 8008884:	9b07      	ldr	r3, [sp, #28]
 8008886:	b31b      	cbz	r3, 80088d0 <_dtoa_r+0x7a0>
 8008888:	9b08      	ldr	r3, [sp, #32]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 80af 	beq.w	80089ee <_dtoa_r+0x8be>
 8008890:	2e00      	cmp	r6, #0
 8008892:	dd13      	ble.n	80088bc <_dtoa_r+0x78c>
 8008894:	4639      	mov	r1, r7
 8008896:	4632      	mov	r2, r6
 8008898:	4620      	mov	r0, r4
 800889a:	f000 fe29 	bl	80094f0 <__pow5mult>
 800889e:	ee18 2a10 	vmov	r2, s16
 80088a2:	4601      	mov	r1, r0
 80088a4:	4607      	mov	r7, r0
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 fd78 	bl	800939c <__multiply>
 80088ac:	ee18 1a10 	vmov	r1, s16
 80088b0:	4680      	mov	r8, r0
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 fca4 	bl	8009200 <_Bfree>
 80088b8:	ee08 8a10 	vmov	s16, r8
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	1b9a      	subs	r2, r3, r6
 80088c0:	d006      	beq.n	80088d0 <_dtoa_r+0x7a0>
 80088c2:	ee18 1a10 	vmov	r1, s16
 80088c6:	4620      	mov	r0, r4
 80088c8:	f000 fe12 	bl	80094f0 <__pow5mult>
 80088cc:	ee08 0a10 	vmov	s16, r0
 80088d0:	2101      	movs	r1, #1
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fd4c 	bl	8009370 <__i2b>
 80088d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	4606      	mov	r6, r0
 80088de:	f340 8088 	ble.w	80089f2 <_dtoa_r+0x8c2>
 80088e2:	461a      	mov	r2, r3
 80088e4:	4601      	mov	r1, r0
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 fe02 	bl	80094f0 <__pow5mult>
 80088ec:	9b06      	ldr	r3, [sp, #24]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	4606      	mov	r6, r0
 80088f2:	f340 8081 	ble.w	80089f8 <_dtoa_r+0x8c8>
 80088f6:	f04f 0800 	mov.w	r8, #0
 80088fa:	6933      	ldr	r3, [r6, #16]
 80088fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008900:	6918      	ldr	r0, [r3, #16]
 8008902:	f000 fce5 	bl	80092d0 <__hi0bits>
 8008906:	f1c0 0020 	rsb	r0, r0, #32
 800890a:	9b05      	ldr	r3, [sp, #20]
 800890c:	4418      	add	r0, r3
 800890e:	f010 001f 	ands.w	r0, r0, #31
 8008912:	f000 8092 	beq.w	8008a3a <_dtoa_r+0x90a>
 8008916:	f1c0 0320 	rsb	r3, r0, #32
 800891a:	2b04      	cmp	r3, #4
 800891c:	f340 808a 	ble.w	8008a34 <_dtoa_r+0x904>
 8008920:	f1c0 001c 	rsb	r0, r0, #28
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	4403      	add	r3, r0
 8008928:	9304      	str	r3, [sp, #16]
 800892a:	9b05      	ldr	r3, [sp, #20]
 800892c:	4403      	add	r3, r0
 800892e:	4405      	add	r5, r0
 8008930:	9305      	str	r3, [sp, #20]
 8008932:	9b04      	ldr	r3, [sp, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd07      	ble.n	8008948 <_dtoa_r+0x818>
 8008938:	ee18 1a10 	vmov	r1, s16
 800893c:	461a      	mov	r2, r3
 800893e:	4620      	mov	r0, r4
 8008940:	f000 fe30 	bl	80095a4 <__lshift>
 8008944:	ee08 0a10 	vmov	s16, r0
 8008948:	9b05      	ldr	r3, [sp, #20]
 800894a:	2b00      	cmp	r3, #0
 800894c:	dd05      	ble.n	800895a <_dtoa_r+0x82a>
 800894e:	4631      	mov	r1, r6
 8008950:	461a      	mov	r2, r3
 8008952:	4620      	mov	r0, r4
 8008954:	f000 fe26 	bl	80095a4 <__lshift>
 8008958:	4606      	mov	r6, r0
 800895a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d06e      	beq.n	8008a3e <_dtoa_r+0x90e>
 8008960:	ee18 0a10 	vmov	r0, s16
 8008964:	4631      	mov	r1, r6
 8008966:	f000 fe8d 	bl	8009684 <__mcmp>
 800896a:	2800      	cmp	r0, #0
 800896c:	da67      	bge.n	8008a3e <_dtoa_r+0x90e>
 800896e:	9b00      	ldr	r3, [sp, #0]
 8008970:	3b01      	subs	r3, #1
 8008972:	ee18 1a10 	vmov	r1, s16
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	220a      	movs	r2, #10
 800897a:	2300      	movs	r3, #0
 800897c:	4620      	mov	r0, r4
 800897e:	f000 fc61 	bl	8009244 <__multadd>
 8008982:	9b08      	ldr	r3, [sp, #32]
 8008984:	ee08 0a10 	vmov	s16, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 81b1 	beq.w	8008cf0 <_dtoa_r+0xbc0>
 800898e:	2300      	movs	r3, #0
 8008990:	4639      	mov	r1, r7
 8008992:	220a      	movs	r2, #10
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fc55 	bl	8009244 <__multadd>
 800899a:	9b02      	ldr	r3, [sp, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	4607      	mov	r7, r0
 80089a0:	f300 808e 	bgt.w	8008ac0 <_dtoa_r+0x990>
 80089a4:	9b06      	ldr	r3, [sp, #24]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	dc51      	bgt.n	8008a4e <_dtoa_r+0x91e>
 80089aa:	e089      	b.n	8008ac0 <_dtoa_r+0x990>
 80089ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089b2:	e74b      	b.n	800884c <_dtoa_r+0x71c>
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	1e5e      	subs	r6, r3, #1
 80089b8:	9b07      	ldr	r3, [sp, #28]
 80089ba:	42b3      	cmp	r3, r6
 80089bc:	bfbf      	itttt	lt
 80089be:	9b07      	ldrlt	r3, [sp, #28]
 80089c0:	9607      	strlt	r6, [sp, #28]
 80089c2:	1af2      	sublt	r2, r6, r3
 80089c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80089c6:	bfb6      	itet	lt
 80089c8:	189b      	addlt	r3, r3, r2
 80089ca:	1b9e      	subge	r6, r3, r6
 80089cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	bfb8      	it	lt
 80089d2:	2600      	movlt	r6, #0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	bfb7      	itett	lt
 80089d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089e0:	1a9d      	sublt	r5, r3, r2
 80089e2:	2300      	movlt	r3, #0
 80089e4:	e734      	b.n	8008850 <_dtoa_r+0x720>
 80089e6:	9e07      	ldr	r6, [sp, #28]
 80089e8:	9d04      	ldr	r5, [sp, #16]
 80089ea:	9f08      	ldr	r7, [sp, #32]
 80089ec:	e73b      	b.n	8008866 <_dtoa_r+0x736>
 80089ee:	9a07      	ldr	r2, [sp, #28]
 80089f0:	e767      	b.n	80088c2 <_dtoa_r+0x792>
 80089f2:	9b06      	ldr	r3, [sp, #24]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	dc18      	bgt.n	8008a2a <_dtoa_r+0x8fa>
 80089f8:	f1ba 0f00 	cmp.w	sl, #0
 80089fc:	d115      	bne.n	8008a2a <_dtoa_r+0x8fa>
 80089fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a02:	b993      	cbnz	r3, 8008a2a <_dtoa_r+0x8fa>
 8008a04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a08:	0d1b      	lsrs	r3, r3, #20
 8008a0a:	051b      	lsls	r3, r3, #20
 8008a0c:	b183      	cbz	r3, 8008a30 <_dtoa_r+0x900>
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	3301      	adds	r3, #1
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	9b05      	ldr	r3, [sp, #20]
 8008a16:	3301      	adds	r3, #1
 8008a18:	9305      	str	r3, [sp, #20]
 8008a1a:	f04f 0801 	mov.w	r8, #1
 8008a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f47f af6a 	bne.w	80088fa <_dtoa_r+0x7ca>
 8008a26:	2001      	movs	r0, #1
 8008a28:	e76f      	b.n	800890a <_dtoa_r+0x7da>
 8008a2a:	f04f 0800 	mov.w	r8, #0
 8008a2e:	e7f6      	b.n	8008a1e <_dtoa_r+0x8ee>
 8008a30:	4698      	mov	r8, r3
 8008a32:	e7f4      	b.n	8008a1e <_dtoa_r+0x8ee>
 8008a34:	f43f af7d 	beq.w	8008932 <_dtoa_r+0x802>
 8008a38:	4618      	mov	r0, r3
 8008a3a:	301c      	adds	r0, #28
 8008a3c:	e772      	b.n	8008924 <_dtoa_r+0x7f4>
 8008a3e:	9b03      	ldr	r3, [sp, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	dc37      	bgt.n	8008ab4 <_dtoa_r+0x984>
 8008a44:	9b06      	ldr	r3, [sp, #24]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	dd34      	ble.n	8008ab4 <_dtoa_r+0x984>
 8008a4a:	9b03      	ldr	r3, [sp, #12]
 8008a4c:	9302      	str	r3, [sp, #8]
 8008a4e:	9b02      	ldr	r3, [sp, #8]
 8008a50:	b96b      	cbnz	r3, 8008a6e <_dtoa_r+0x93e>
 8008a52:	4631      	mov	r1, r6
 8008a54:	2205      	movs	r2, #5
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fbf4 	bl	8009244 <__multadd>
 8008a5c:	4601      	mov	r1, r0
 8008a5e:	4606      	mov	r6, r0
 8008a60:	ee18 0a10 	vmov	r0, s16
 8008a64:	f000 fe0e 	bl	8009684 <__mcmp>
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	f73f adbb 	bgt.w	80085e4 <_dtoa_r+0x4b4>
 8008a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a70:	9d01      	ldr	r5, [sp, #4]
 8008a72:	43db      	mvns	r3, r3
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	f04f 0800 	mov.w	r8, #0
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 fbbf 	bl	8009200 <_Bfree>
 8008a82:	2f00      	cmp	r7, #0
 8008a84:	f43f aea4 	beq.w	80087d0 <_dtoa_r+0x6a0>
 8008a88:	f1b8 0f00 	cmp.w	r8, #0
 8008a8c:	d005      	beq.n	8008a9a <_dtoa_r+0x96a>
 8008a8e:	45b8      	cmp	r8, r7
 8008a90:	d003      	beq.n	8008a9a <_dtoa_r+0x96a>
 8008a92:	4641      	mov	r1, r8
 8008a94:	4620      	mov	r0, r4
 8008a96:	f000 fbb3 	bl	8009200 <_Bfree>
 8008a9a:	4639      	mov	r1, r7
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f000 fbaf 	bl	8009200 <_Bfree>
 8008aa2:	e695      	b.n	80087d0 <_dtoa_r+0x6a0>
 8008aa4:	2600      	movs	r6, #0
 8008aa6:	4637      	mov	r7, r6
 8008aa8:	e7e1      	b.n	8008a6e <_dtoa_r+0x93e>
 8008aaa:	9700      	str	r7, [sp, #0]
 8008aac:	4637      	mov	r7, r6
 8008aae:	e599      	b.n	80085e4 <_dtoa_r+0x4b4>
 8008ab0:	40240000 	.word	0x40240000
 8008ab4:	9b08      	ldr	r3, [sp, #32]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f000 80ca 	beq.w	8008c50 <_dtoa_r+0xb20>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	9302      	str	r3, [sp, #8]
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	dd05      	ble.n	8008ad0 <_dtoa_r+0x9a0>
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	462a      	mov	r2, r5
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 fd6b 	bl	80095a4 <__lshift>
 8008ace:	4607      	mov	r7, r0
 8008ad0:	f1b8 0f00 	cmp.w	r8, #0
 8008ad4:	d05b      	beq.n	8008b8e <_dtoa_r+0xa5e>
 8008ad6:	6879      	ldr	r1, [r7, #4]
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f000 fb51 	bl	8009180 <_Balloc>
 8008ade:	4605      	mov	r5, r0
 8008ae0:	b928      	cbnz	r0, 8008aee <_dtoa_r+0x9be>
 8008ae2:	4b87      	ldr	r3, [pc, #540]	; (8008d00 <_dtoa_r+0xbd0>)
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008aea:	f7ff bb3b 	b.w	8008164 <_dtoa_r+0x34>
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	3202      	adds	r2, #2
 8008af2:	0092      	lsls	r2, r2, #2
 8008af4:	f107 010c 	add.w	r1, r7, #12
 8008af8:	300c      	adds	r0, #12
 8008afa:	f000 fb33 	bl	8009164 <memcpy>
 8008afe:	2201      	movs	r2, #1
 8008b00:	4629      	mov	r1, r5
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 fd4e 	bl	80095a4 <__lshift>
 8008b08:	9b01      	ldr	r3, [sp, #4]
 8008b0a:	f103 0901 	add.w	r9, r3, #1
 8008b0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008b12:	4413      	add	r3, r2
 8008b14:	9305      	str	r3, [sp, #20]
 8008b16:	f00a 0301 	and.w	r3, sl, #1
 8008b1a:	46b8      	mov	r8, r7
 8008b1c:	9304      	str	r3, [sp, #16]
 8008b1e:	4607      	mov	r7, r0
 8008b20:	4631      	mov	r1, r6
 8008b22:	ee18 0a10 	vmov	r0, s16
 8008b26:	f7ff fa77 	bl	8008018 <quorem>
 8008b2a:	4641      	mov	r1, r8
 8008b2c:	9002      	str	r0, [sp, #8]
 8008b2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b32:	ee18 0a10 	vmov	r0, s16
 8008b36:	f000 fda5 	bl	8009684 <__mcmp>
 8008b3a:	463a      	mov	r2, r7
 8008b3c:	9003      	str	r0, [sp, #12]
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 fdbb 	bl	80096bc <__mdiff>
 8008b46:	68c2      	ldr	r2, [r0, #12]
 8008b48:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b4c:	4605      	mov	r5, r0
 8008b4e:	bb02      	cbnz	r2, 8008b92 <_dtoa_r+0xa62>
 8008b50:	4601      	mov	r1, r0
 8008b52:	ee18 0a10 	vmov	r0, s16
 8008b56:	f000 fd95 	bl	8009684 <__mcmp>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	4629      	mov	r1, r5
 8008b5e:	4620      	mov	r0, r4
 8008b60:	9207      	str	r2, [sp, #28]
 8008b62:	f000 fb4d 	bl	8009200 <_Bfree>
 8008b66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b6a:	ea43 0102 	orr.w	r1, r3, r2
 8008b6e:	9b04      	ldr	r3, [sp, #16]
 8008b70:	430b      	orrs	r3, r1
 8008b72:	464d      	mov	r5, r9
 8008b74:	d10f      	bne.n	8008b96 <_dtoa_r+0xa66>
 8008b76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b7a:	d02a      	beq.n	8008bd2 <_dtoa_r+0xaa2>
 8008b7c:	9b03      	ldr	r3, [sp, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	dd02      	ble.n	8008b88 <_dtoa_r+0xa58>
 8008b82:	9b02      	ldr	r3, [sp, #8]
 8008b84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b88:	f88b a000 	strb.w	sl, [fp]
 8008b8c:	e775      	b.n	8008a7a <_dtoa_r+0x94a>
 8008b8e:	4638      	mov	r0, r7
 8008b90:	e7ba      	b.n	8008b08 <_dtoa_r+0x9d8>
 8008b92:	2201      	movs	r2, #1
 8008b94:	e7e2      	b.n	8008b5c <_dtoa_r+0xa2c>
 8008b96:	9b03      	ldr	r3, [sp, #12]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	db04      	blt.n	8008ba6 <_dtoa_r+0xa76>
 8008b9c:	9906      	ldr	r1, [sp, #24]
 8008b9e:	430b      	orrs	r3, r1
 8008ba0:	9904      	ldr	r1, [sp, #16]
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	d122      	bne.n	8008bec <_dtoa_r+0xabc>
 8008ba6:	2a00      	cmp	r2, #0
 8008ba8:	ddee      	ble.n	8008b88 <_dtoa_r+0xa58>
 8008baa:	ee18 1a10 	vmov	r1, s16
 8008bae:	2201      	movs	r2, #1
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 fcf7 	bl	80095a4 <__lshift>
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	ee08 0a10 	vmov	s16, r0
 8008bbc:	f000 fd62 	bl	8009684 <__mcmp>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	dc03      	bgt.n	8008bcc <_dtoa_r+0xa9c>
 8008bc4:	d1e0      	bne.n	8008b88 <_dtoa_r+0xa58>
 8008bc6:	f01a 0f01 	tst.w	sl, #1
 8008bca:	d0dd      	beq.n	8008b88 <_dtoa_r+0xa58>
 8008bcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bd0:	d1d7      	bne.n	8008b82 <_dtoa_r+0xa52>
 8008bd2:	2339      	movs	r3, #57	; 0x39
 8008bd4:	f88b 3000 	strb.w	r3, [fp]
 8008bd8:	462b      	mov	r3, r5
 8008bda:	461d      	mov	r5, r3
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008be2:	2a39      	cmp	r2, #57	; 0x39
 8008be4:	d071      	beq.n	8008cca <_dtoa_r+0xb9a>
 8008be6:	3201      	adds	r2, #1
 8008be8:	701a      	strb	r2, [r3, #0]
 8008bea:	e746      	b.n	8008a7a <_dtoa_r+0x94a>
 8008bec:	2a00      	cmp	r2, #0
 8008bee:	dd07      	ble.n	8008c00 <_dtoa_r+0xad0>
 8008bf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bf4:	d0ed      	beq.n	8008bd2 <_dtoa_r+0xaa2>
 8008bf6:	f10a 0301 	add.w	r3, sl, #1
 8008bfa:	f88b 3000 	strb.w	r3, [fp]
 8008bfe:	e73c      	b.n	8008a7a <_dtoa_r+0x94a>
 8008c00:	9b05      	ldr	r3, [sp, #20]
 8008c02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c06:	4599      	cmp	r9, r3
 8008c08:	d047      	beq.n	8008c9a <_dtoa_r+0xb6a>
 8008c0a:	ee18 1a10 	vmov	r1, s16
 8008c0e:	2300      	movs	r3, #0
 8008c10:	220a      	movs	r2, #10
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 fb16 	bl	8009244 <__multadd>
 8008c18:	45b8      	cmp	r8, r7
 8008c1a:	ee08 0a10 	vmov	s16, r0
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	f04f 020a 	mov.w	r2, #10
 8008c26:	4641      	mov	r1, r8
 8008c28:	4620      	mov	r0, r4
 8008c2a:	d106      	bne.n	8008c3a <_dtoa_r+0xb0a>
 8008c2c:	f000 fb0a 	bl	8009244 <__multadd>
 8008c30:	4680      	mov	r8, r0
 8008c32:	4607      	mov	r7, r0
 8008c34:	f109 0901 	add.w	r9, r9, #1
 8008c38:	e772      	b.n	8008b20 <_dtoa_r+0x9f0>
 8008c3a:	f000 fb03 	bl	8009244 <__multadd>
 8008c3e:	4639      	mov	r1, r7
 8008c40:	4680      	mov	r8, r0
 8008c42:	2300      	movs	r3, #0
 8008c44:	220a      	movs	r2, #10
 8008c46:	4620      	mov	r0, r4
 8008c48:	f000 fafc 	bl	8009244 <__multadd>
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	e7f1      	b.n	8008c34 <_dtoa_r+0xb04>
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	9302      	str	r3, [sp, #8]
 8008c54:	9d01      	ldr	r5, [sp, #4]
 8008c56:	ee18 0a10 	vmov	r0, s16
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	f7ff f9dc 	bl	8008018 <quorem>
 8008c60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c64:	9b01      	ldr	r3, [sp, #4]
 8008c66:	f805 ab01 	strb.w	sl, [r5], #1
 8008c6a:	1aea      	subs	r2, r5, r3
 8008c6c:	9b02      	ldr	r3, [sp, #8]
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	dd09      	ble.n	8008c86 <_dtoa_r+0xb56>
 8008c72:	ee18 1a10 	vmov	r1, s16
 8008c76:	2300      	movs	r3, #0
 8008c78:	220a      	movs	r2, #10
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fae2 	bl	8009244 <__multadd>
 8008c80:	ee08 0a10 	vmov	s16, r0
 8008c84:	e7e7      	b.n	8008c56 <_dtoa_r+0xb26>
 8008c86:	9b02      	ldr	r3, [sp, #8]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfc8      	it	gt
 8008c8c:	461d      	movgt	r5, r3
 8008c8e:	9b01      	ldr	r3, [sp, #4]
 8008c90:	bfd8      	it	le
 8008c92:	2501      	movle	r5, #1
 8008c94:	441d      	add	r5, r3
 8008c96:	f04f 0800 	mov.w	r8, #0
 8008c9a:	ee18 1a10 	vmov	r1, s16
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f000 fc7f 	bl	80095a4 <__lshift>
 8008ca6:	4631      	mov	r1, r6
 8008ca8:	ee08 0a10 	vmov	s16, r0
 8008cac:	f000 fcea 	bl	8009684 <__mcmp>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	dc91      	bgt.n	8008bd8 <_dtoa_r+0xaa8>
 8008cb4:	d102      	bne.n	8008cbc <_dtoa_r+0xb8c>
 8008cb6:	f01a 0f01 	tst.w	sl, #1
 8008cba:	d18d      	bne.n	8008bd8 <_dtoa_r+0xaa8>
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	461d      	mov	r5, r3
 8008cc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cc4:	2a30      	cmp	r2, #48	; 0x30
 8008cc6:	d0fa      	beq.n	8008cbe <_dtoa_r+0xb8e>
 8008cc8:	e6d7      	b.n	8008a7a <_dtoa_r+0x94a>
 8008cca:	9a01      	ldr	r2, [sp, #4]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d184      	bne.n	8008bda <_dtoa_r+0xaaa>
 8008cd0:	9b00      	ldr	r3, [sp, #0]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	2331      	movs	r3, #49	; 0x31
 8008cd8:	7013      	strb	r3, [r2, #0]
 8008cda:	e6ce      	b.n	8008a7a <_dtoa_r+0x94a>
 8008cdc:	4b09      	ldr	r3, [pc, #36]	; (8008d04 <_dtoa_r+0xbd4>)
 8008cde:	f7ff ba95 	b.w	800820c <_dtoa_r+0xdc>
 8008ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f47f aa6e 	bne.w	80081c6 <_dtoa_r+0x96>
 8008cea:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <_dtoa_r+0xbd8>)
 8008cec:	f7ff ba8e 	b.w	800820c <_dtoa_r+0xdc>
 8008cf0:	9b02      	ldr	r3, [sp, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	dcae      	bgt.n	8008c54 <_dtoa_r+0xb24>
 8008cf6:	9b06      	ldr	r3, [sp, #24]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	f73f aea8 	bgt.w	8008a4e <_dtoa_r+0x91e>
 8008cfe:	e7a9      	b.n	8008c54 <_dtoa_r+0xb24>
 8008d00:	0800a397 	.word	0x0800a397
 8008d04:	0800a2f4 	.word	0x0800a2f4
 8008d08:	0800a318 	.word	0x0800a318

08008d0c <__sflush_r>:
 8008d0c:	898a      	ldrh	r2, [r1, #12]
 8008d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	4605      	mov	r5, r0
 8008d14:	0710      	lsls	r0, r2, #28
 8008d16:	460c      	mov	r4, r1
 8008d18:	d458      	bmi.n	8008dcc <__sflush_r+0xc0>
 8008d1a:	684b      	ldr	r3, [r1, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dc05      	bgt.n	8008d2c <__sflush_r+0x20>
 8008d20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dc02      	bgt.n	8008d2c <__sflush_r+0x20>
 8008d26:	2000      	movs	r0, #0
 8008d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d2e:	2e00      	cmp	r6, #0
 8008d30:	d0f9      	beq.n	8008d26 <__sflush_r+0x1a>
 8008d32:	2300      	movs	r3, #0
 8008d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d38:	682f      	ldr	r7, [r5, #0]
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	d032      	beq.n	8008da4 <__sflush_r+0x98>
 8008d3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	075a      	lsls	r2, r3, #29
 8008d44:	d505      	bpl.n	8008d52 <__sflush_r+0x46>
 8008d46:	6863      	ldr	r3, [r4, #4]
 8008d48:	1ac0      	subs	r0, r0, r3
 8008d4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d4c:	b10b      	cbz	r3, 8008d52 <__sflush_r+0x46>
 8008d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d50:	1ac0      	subs	r0, r0, r3
 8008d52:	2300      	movs	r3, #0
 8008d54:	4602      	mov	r2, r0
 8008d56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d58:	6a21      	ldr	r1, [r4, #32]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b0      	blx	r6
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	d106      	bne.n	8008d72 <__sflush_r+0x66>
 8008d64:	6829      	ldr	r1, [r5, #0]
 8008d66:	291d      	cmp	r1, #29
 8008d68:	d82c      	bhi.n	8008dc4 <__sflush_r+0xb8>
 8008d6a:	4a2a      	ldr	r2, [pc, #168]	; (8008e14 <__sflush_r+0x108>)
 8008d6c:	40ca      	lsrs	r2, r1
 8008d6e:	07d6      	lsls	r6, r2, #31
 8008d70:	d528      	bpl.n	8008dc4 <__sflush_r+0xb8>
 8008d72:	2200      	movs	r2, #0
 8008d74:	6062      	str	r2, [r4, #4]
 8008d76:	04d9      	lsls	r1, r3, #19
 8008d78:	6922      	ldr	r2, [r4, #16]
 8008d7a:	6022      	str	r2, [r4, #0]
 8008d7c:	d504      	bpl.n	8008d88 <__sflush_r+0x7c>
 8008d7e:	1c42      	adds	r2, r0, #1
 8008d80:	d101      	bne.n	8008d86 <__sflush_r+0x7a>
 8008d82:	682b      	ldr	r3, [r5, #0]
 8008d84:	b903      	cbnz	r3, 8008d88 <__sflush_r+0x7c>
 8008d86:	6560      	str	r0, [r4, #84]	; 0x54
 8008d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d8a:	602f      	str	r7, [r5, #0]
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d0ca      	beq.n	8008d26 <__sflush_r+0x1a>
 8008d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d94:	4299      	cmp	r1, r3
 8008d96:	d002      	beq.n	8008d9e <__sflush_r+0x92>
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f000 fd8b 	bl	80098b4 <_free_r>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	6360      	str	r0, [r4, #52]	; 0x34
 8008da2:	e7c1      	b.n	8008d28 <__sflush_r+0x1c>
 8008da4:	6a21      	ldr	r1, [r4, #32]
 8008da6:	2301      	movs	r3, #1
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b0      	blx	r6
 8008dac:	1c41      	adds	r1, r0, #1
 8008dae:	d1c7      	bne.n	8008d40 <__sflush_r+0x34>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0c4      	beq.n	8008d40 <__sflush_r+0x34>
 8008db6:	2b1d      	cmp	r3, #29
 8008db8:	d001      	beq.n	8008dbe <__sflush_r+0xb2>
 8008dba:	2b16      	cmp	r3, #22
 8008dbc:	d101      	bne.n	8008dc2 <__sflush_r+0xb6>
 8008dbe:	602f      	str	r7, [r5, #0]
 8008dc0:	e7b1      	b.n	8008d26 <__sflush_r+0x1a>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	e7ad      	b.n	8008d28 <__sflush_r+0x1c>
 8008dcc:	690f      	ldr	r7, [r1, #16]
 8008dce:	2f00      	cmp	r7, #0
 8008dd0:	d0a9      	beq.n	8008d26 <__sflush_r+0x1a>
 8008dd2:	0793      	lsls	r3, r2, #30
 8008dd4:	680e      	ldr	r6, [r1, #0]
 8008dd6:	bf08      	it	eq
 8008dd8:	694b      	ldreq	r3, [r1, #20]
 8008dda:	600f      	str	r7, [r1, #0]
 8008ddc:	bf18      	it	ne
 8008dde:	2300      	movne	r3, #0
 8008de0:	eba6 0807 	sub.w	r8, r6, r7
 8008de4:	608b      	str	r3, [r1, #8]
 8008de6:	f1b8 0f00 	cmp.w	r8, #0
 8008dea:	dd9c      	ble.n	8008d26 <__sflush_r+0x1a>
 8008dec:	6a21      	ldr	r1, [r4, #32]
 8008dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008df0:	4643      	mov	r3, r8
 8008df2:	463a      	mov	r2, r7
 8008df4:	4628      	mov	r0, r5
 8008df6:	47b0      	blx	r6
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dc06      	bgt.n	8008e0a <__sflush_r+0xfe>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	e78e      	b.n	8008d28 <__sflush_r+0x1c>
 8008e0a:	4407      	add	r7, r0
 8008e0c:	eba8 0800 	sub.w	r8, r8, r0
 8008e10:	e7e9      	b.n	8008de6 <__sflush_r+0xda>
 8008e12:	bf00      	nop
 8008e14:	20400001 	.word	0x20400001

08008e18 <_fflush_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	690b      	ldr	r3, [r1, #16]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	b913      	cbnz	r3, 8008e28 <_fflush_r+0x10>
 8008e22:	2500      	movs	r5, #0
 8008e24:	4628      	mov	r0, r5
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	b118      	cbz	r0, 8008e32 <_fflush_r+0x1a>
 8008e2a:	6983      	ldr	r3, [r0, #24]
 8008e2c:	b90b      	cbnz	r3, 8008e32 <_fflush_r+0x1a>
 8008e2e:	f000 f887 	bl	8008f40 <__sinit>
 8008e32:	4b14      	ldr	r3, [pc, #80]	; (8008e84 <_fflush_r+0x6c>)
 8008e34:	429c      	cmp	r4, r3
 8008e36:	d11b      	bne.n	8008e70 <_fflush_r+0x58>
 8008e38:	686c      	ldr	r4, [r5, #4]
 8008e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0ef      	beq.n	8008e22 <_fflush_r+0xa>
 8008e42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e44:	07d0      	lsls	r0, r2, #31
 8008e46:	d404      	bmi.n	8008e52 <_fflush_r+0x3a>
 8008e48:	0599      	lsls	r1, r3, #22
 8008e4a:	d402      	bmi.n	8008e52 <_fflush_r+0x3a>
 8008e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e4e:	f000 f91a 	bl	8009086 <__retarget_lock_acquire_recursive>
 8008e52:	4628      	mov	r0, r5
 8008e54:	4621      	mov	r1, r4
 8008e56:	f7ff ff59 	bl	8008d0c <__sflush_r>
 8008e5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e5c:	07da      	lsls	r2, r3, #31
 8008e5e:	4605      	mov	r5, r0
 8008e60:	d4e0      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	059b      	lsls	r3, r3, #22
 8008e66:	d4dd      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6a:	f000 f90d 	bl	8009088 <__retarget_lock_release_recursive>
 8008e6e:	e7d9      	b.n	8008e24 <_fflush_r+0xc>
 8008e70:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <_fflush_r+0x70>)
 8008e72:	429c      	cmp	r4, r3
 8008e74:	d101      	bne.n	8008e7a <_fflush_r+0x62>
 8008e76:	68ac      	ldr	r4, [r5, #8]
 8008e78:	e7df      	b.n	8008e3a <_fflush_r+0x22>
 8008e7a:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <_fflush_r+0x74>)
 8008e7c:	429c      	cmp	r4, r3
 8008e7e:	bf08      	it	eq
 8008e80:	68ec      	ldreq	r4, [r5, #12]
 8008e82:	e7da      	b.n	8008e3a <_fflush_r+0x22>
 8008e84:	0800a3c8 	.word	0x0800a3c8
 8008e88:	0800a3e8 	.word	0x0800a3e8
 8008e8c:	0800a3a8 	.word	0x0800a3a8

08008e90 <std>:
 8008e90:	2300      	movs	r3, #0
 8008e92:	b510      	push	{r4, lr}
 8008e94:	4604      	mov	r4, r0
 8008e96:	e9c0 3300 	strd	r3, r3, [r0]
 8008e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e9e:	6083      	str	r3, [r0, #8]
 8008ea0:	8181      	strh	r1, [r0, #12]
 8008ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ea4:	81c2      	strh	r2, [r0, #14]
 8008ea6:	6183      	str	r3, [r0, #24]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	2208      	movs	r2, #8
 8008eac:	305c      	adds	r0, #92	; 0x5c
 8008eae:	f7fe faf3 	bl	8007498 <memset>
 8008eb2:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <std+0x38>)
 8008eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8008eb6:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <std+0x3c>)
 8008eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eba:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <std+0x40>)
 8008ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ebe:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <std+0x44>)
 8008ec0:	6224      	str	r4, [r4, #32]
 8008ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	bf00      	nop
 8008ec8:	08009d49 	.word	0x08009d49
 8008ecc:	08009d6b 	.word	0x08009d6b
 8008ed0:	08009da3 	.word	0x08009da3
 8008ed4:	08009dc7 	.word	0x08009dc7

08008ed8 <_cleanup_r>:
 8008ed8:	4901      	ldr	r1, [pc, #4]	; (8008ee0 <_cleanup_r+0x8>)
 8008eda:	f000 b8af 	b.w	800903c <_fwalk_reent>
 8008ede:	bf00      	nop
 8008ee0:	08008e19 	.word	0x08008e19

08008ee4 <__sfmoreglue>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	2268      	movs	r2, #104	; 0x68
 8008ee8:	1e4d      	subs	r5, r1, #1
 8008eea:	4355      	muls	r5, r2
 8008eec:	460e      	mov	r6, r1
 8008eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ef2:	f000 fd4b 	bl	800998c <_malloc_r>
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	b140      	cbz	r0, 8008f0c <__sfmoreglue+0x28>
 8008efa:	2100      	movs	r1, #0
 8008efc:	e9c0 1600 	strd	r1, r6, [r0]
 8008f00:	300c      	adds	r0, #12
 8008f02:	60a0      	str	r0, [r4, #8]
 8008f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f08:	f7fe fac6 	bl	8007498 <memset>
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}

08008f10 <__sfp_lock_acquire>:
 8008f10:	4801      	ldr	r0, [pc, #4]	; (8008f18 <__sfp_lock_acquire+0x8>)
 8008f12:	f000 b8b8 	b.w	8009086 <__retarget_lock_acquire_recursive>
 8008f16:	bf00      	nop
 8008f18:	200015a5 	.word	0x200015a5

08008f1c <__sfp_lock_release>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	; (8008f24 <__sfp_lock_release+0x8>)
 8008f1e:	f000 b8b3 	b.w	8009088 <__retarget_lock_release_recursive>
 8008f22:	bf00      	nop
 8008f24:	200015a5 	.word	0x200015a5

08008f28 <__sinit_lock_acquire>:
 8008f28:	4801      	ldr	r0, [pc, #4]	; (8008f30 <__sinit_lock_acquire+0x8>)
 8008f2a:	f000 b8ac 	b.w	8009086 <__retarget_lock_acquire_recursive>
 8008f2e:	bf00      	nop
 8008f30:	200015a6 	.word	0x200015a6

08008f34 <__sinit_lock_release>:
 8008f34:	4801      	ldr	r0, [pc, #4]	; (8008f3c <__sinit_lock_release+0x8>)
 8008f36:	f000 b8a7 	b.w	8009088 <__retarget_lock_release_recursive>
 8008f3a:	bf00      	nop
 8008f3c:	200015a6 	.word	0x200015a6

08008f40 <__sinit>:
 8008f40:	b510      	push	{r4, lr}
 8008f42:	4604      	mov	r4, r0
 8008f44:	f7ff fff0 	bl	8008f28 <__sinit_lock_acquire>
 8008f48:	69a3      	ldr	r3, [r4, #24]
 8008f4a:	b11b      	cbz	r3, 8008f54 <__sinit+0x14>
 8008f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f50:	f7ff bff0 	b.w	8008f34 <__sinit_lock_release>
 8008f54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f58:	6523      	str	r3, [r4, #80]	; 0x50
 8008f5a:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <__sinit+0x68>)
 8008f5c:	4a13      	ldr	r2, [pc, #76]	; (8008fac <__sinit+0x6c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f62:	42a3      	cmp	r3, r4
 8008f64:	bf04      	itt	eq
 8008f66:	2301      	moveq	r3, #1
 8008f68:	61a3      	streq	r3, [r4, #24]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 f820 	bl	8008fb0 <__sfp>
 8008f70:	6060      	str	r0, [r4, #4]
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 f81c 	bl	8008fb0 <__sfp>
 8008f78:	60a0      	str	r0, [r4, #8]
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 f818 	bl	8008fb0 <__sfp>
 8008f80:	2200      	movs	r2, #0
 8008f82:	60e0      	str	r0, [r4, #12]
 8008f84:	2104      	movs	r1, #4
 8008f86:	6860      	ldr	r0, [r4, #4]
 8008f88:	f7ff ff82 	bl	8008e90 <std>
 8008f8c:	68a0      	ldr	r0, [r4, #8]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	2109      	movs	r1, #9
 8008f92:	f7ff ff7d 	bl	8008e90 <std>
 8008f96:	68e0      	ldr	r0, [r4, #12]
 8008f98:	2202      	movs	r2, #2
 8008f9a:	2112      	movs	r1, #18
 8008f9c:	f7ff ff78 	bl	8008e90 <std>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	61a3      	str	r3, [r4, #24]
 8008fa4:	e7d2      	b.n	8008f4c <__sinit+0xc>
 8008fa6:	bf00      	nop
 8008fa8:	0800a2e0 	.word	0x0800a2e0
 8008fac:	08008ed9 	.word	0x08008ed9

08008fb0 <__sfp>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	f7ff ffac 	bl	8008f10 <__sfp_lock_acquire>
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <__sfp+0x84>)
 8008fba:	681e      	ldr	r6, [r3, #0]
 8008fbc:	69b3      	ldr	r3, [r6, #24]
 8008fbe:	b913      	cbnz	r3, 8008fc6 <__sfp+0x16>
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7ff ffbd 	bl	8008f40 <__sinit>
 8008fc6:	3648      	adds	r6, #72	; 0x48
 8008fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	d503      	bpl.n	8008fd8 <__sfp+0x28>
 8008fd0:	6833      	ldr	r3, [r6, #0]
 8008fd2:	b30b      	cbz	r3, 8009018 <__sfp+0x68>
 8008fd4:	6836      	ldr	r6, [r6, #0]
 8008fd6:	e7f7      	b.n	8008fc8 <__sfp+0x18>
 8008fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fdc:	b9d5      	cbnz	r5, 8009014 <__sfp+0x64>
 8008fde:	4b16      	ldr	r3, [pc, #88]	; (8009038 <__sfp+0x88>)
 8008fe0:	60e3      	str	r3, [r4, #12]
 8008fe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fe6:	6665      	str	r5, [r4, #100]	; 0x64
 8008fe8:	f000 f84c 	bl	8009084 <__retarget_lock_init_recursive>
 8008fec:	f7ff ff96 	bl	8008f1c <__sfp_lock_release>
 8008ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ff8:	6025      	str	r5, [r4, #0]
 8008ffa:	61a5      	str	r5, [r4, #24]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	4629      	mov	r1, r5
 8009000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009004:	f7fe fa48 	bl	8007498 <memset>
 8009008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800900c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009010:	4620      	mov	r0, r4
 8009012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009014:	3468      	adds	r4, #104	; 0x68
 8009016:	e7d9      	b.n	8008fcc <__sfp+0x1c>
 8009018:	2104      	movs	r1, #4
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff ff62 	bl	8008ee4 <__sfmoreglue>
 8009020:	4604      	mov	r4, r0
 8009022:	6030      	str	r0, [r6, #0]
 8009024:	2800      	cmp	r0, #0
 8009026:	d1d5      	bne.n	8008fd4 <__sfp+0x24>
 8009028:	f7ff ff78 	bl	8008f1c <__sfp_lock_release>
 800902c:	230c      	movs	r3, #12
 800902e:	603b      	str	r3, [r7, #0]
 8009030:	e7ee      	b.n	8009010 <__sfp+0x60>
 8009032:	bf00      	nop
 8009034:	0800a2e0 	.word	0x0800a2e0
 8009038:	ffff0001 	.word	0xffff0001

0800903c <_fwalk_reent>:
 800903c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009040:	4606      	mov	r6, r0
 8009042:	4688      	mov	r8, r1
 8009044:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009048:	2700      	movs	r7, #0
 800904a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800904e:	f1b9 0901 	subs.w	r9, r9, #1
 8009052:	d505      	bpl.n	8009060 <_fwalk_reent+0x24>
 8009054:	6824      	ldr	r4, [r4, #0]
 8009056:	2c00      	cmp	r4, #0
 8009058:	d1f7      	bne.n	800904a <_fwalk_reent+0xe>
 800905a:	4638      	mov	r0, r7
 800905c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009060:	89ab      	ldrh	r3, [r5, #12]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d907      	bls.n	8009076 <_fwalk_reent+0x3a>
 8009066:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800906a:	3301      	adds	r3, #1
 800906c:	d003      	beq.n	8009076 <_fwalk_reent+0x3a>
 800906e:	4629      	mov	r1, r5
 8009070:	4630      	mov	r0, r6
 8009072:	47c0      	blx	r8
 8009074:	4307      	orrs	r7, r0
 8009076:	3568      	adds	r5, #104	; 0x68
 8009078:	e7e9      	b.n	800904e <_fwalk_reent+0x12>
	...

0800907c <_localeconv_r>:
 800907c:	4800      	ldr	r0, [pc, #0]	; (8009080 <_localeconv_r+0x4>)
 800907e:	4770      	bx	lr
 8009080:	20000160 	.word	0x20000160

08009084 <__retarget_lock_init_recursive>:
 8009084:	4770      	bx	lr

08009086 <__retarget_lock_acquire_recursive>:
 8009086:	4770      	bx	lr

08009088 <__retarget_lock_release_recursive>:
 8009088:	4770      	bx	lr

0800908a <__swhatbuf_r>:
 800908a:	b570      	push	{r4, r5, r6, lr}
 800908c:	460e      	mov	r6, r1
 800908e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009092:	2900      	cmp	r1, #0
 8009094:	b096      	sub	sp, #88	; 0x58
 8009096:	4614      	mov	r4, r2
 8009098:	461d      	mov	r5, r3
 800909a:	da08      	bge.n	80090ae <__swhatbuf_r+0x24>
 800909c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	602a      	str	r2, [r5, #0]
 80090a4:	061a      	lsls	r2, r3, #24
 80090a6:	d410      	bmi.n	80090ca <__swhatbuf_r+0x40>
 80090a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ac:	e00e      	b.n	80090cc <__swhatbuf_r+0x42>
 80090ae:	466a      	mov	r2, sp
 80090b0:	f000 fee0 	bl	8009e74 <_fstat_r>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	dbf1      	blt.n	800909c <__swhatbuf_r+0x12>
 80090b8:	9a01      	ldr	r2, [sp, #4]
 80090ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090c2:	425a      	negs	r2, r3
 80090c4:	415a      	adcs	r2, r3
 80090c6:	602a      	str	r2, [r5, #0]
 80090c8:	e7ee      	b.n	80090a8 <__swhatbuf_r+0x1e>
 80090ca:	2340      	movs	r3, #64	; 0x40
 80090cc:	2000      	movs	r0, #0
 80090ce:	6023      	str	r3, [r4, #0]
 80090d0:	b016      	add	sp, #88	; 0x58
 80090d2:	bd70      	pop	{r4, r5, r6, pc}

080090d4 <__smakebuf_r>:
 80090d4:	898b      	ldrh	r3, [r1, #12]
 80090d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090d8:	079d      	lsls	r5, r3, #30
 80090da:	4606      	mov	r6, r0
 80090dc:	460c      	mov	r4, r1
 80090de:	d507      	bpl.n	80090f0 <__smakebuf_r+0x1c>
 80090e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	6123      	str	r3, [r4, #16]
 80090e8:	2301      	movs	r3, #1
 80090ea:	6163      	str	r3, [r4, #20]
 80090ec:	b002      	add	sp, #8
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	ab01      	add	r3, sp, #4
 80090f2:	466a      	mov	r2, sp
 80090f4:	f7ff ffc9 	bl	800908a <__swhatbuf_r>
 80090f8:	9900      	ldr	r1, [sp, #0]
 80090fa:	4605      	mov	r5, r0
 80090fc:	4630      	mov	r0, r6
 80090fe:	f000 fc45 	bl	800998c <_malloc_r>
 8009102:	b948      	cbnz	r0, 8009118 <__smakebuf_r+0x44>
 8009104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009108:	059a      	lsls	r2, r3, #22
 800910a:	d4ef      	bmi.n	80090ec <__smakebuf_r+0x18>
 800910c:	f023 0303 	bic.w	r3, r3, #3
 8009110:	f043 0302 	orr.w	r3, r3, #2
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	e7e3      	b.n	80090e0 <__smakebuf_r+0xc>
 8009118:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <__smakebuf_r+0x7c>)
 800911a:	62b3      	str	r3, [r6, #40]	; 0x28
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	6020      	str	r0, [r4, #0]
 8009120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009124:	81a3      	strh	r3, [r4, #12]
 8009126:	9b00      	ldr	r3, [sp, #0]
 8009128:	6163      	str	r3, [r4, #20]
 800912a:	9b01      	ldr	r3, [sp, #4]
 800912c:	6120      	str	r0, [r4, #16]
 800912e:	b15b      	cbz	r3, 8009148 <__smakebuf_r+0x74>
 8009130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009134:	4630      	mov	r0, r6
 8009136:	f000 feaf 	bl	8009e98 <_isatty_r>
 800913a:	b128      	cbz	r0, 8009148 <__smakebuf_r+0x74>
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	f023 0303 	bic.w	r3, r3, #3
 8009142:	f043 0301 	orr.w	r3, r3, #1
 8009146:	81a3      	strh	r3, [r4, #12]
 8009148:	89a0      	ldrh	r0, [r4, #12]
 800914a:	4305      	orrs	r5, r0
 800914c:	81a5      	strh	r5, [r4, #12]
 800914e:	e7cd      	b.n	80090ec <__smakebuf_r+0x18>
 8009150:	08008ed9 	.word	0x08008ed9

08009154 <malloc>:
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <malloc+0xc>)
 8009156:	4601      	mov	r1, r0
 8009158:	6818      	ldr	r0, [r3, #0]
 800915a:	f000 bc17 	b.w	800998c <_malloc_r>
 800915e:	bf00      	nop
 8009160:	2000000c 	.word	0x2000000c

08009164 <memcpy>:
 8009164:	440a      	add	r2, r1
 8009166:	4291      	cmp	r1, r2
 8009168:	f100 33ff 	add.w	r3, r0, #4294967295
 800916c:	d100      	bne.n	8009170 <memcpy+0xc>
 800916e:	4770      	bx	lr
 8009170:	b510      	push	{r4, lr}
 8009172:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009176:	f803 4f01 	strb.w	r4, [r3, #1]!
 800917a:	4291      	cmp	r1, r2
 800917c:	d1f9      	bne.n	8009172 <memcpy+0xe>
 800917e:	bd10      	pop	{r4, pc}

08009180 <_Balloc>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009184:	4604      	mov	r4, r0
 8009186:	460d      	mov	r5, r1
 8009188:	b976      	cbnz	r6, 80091a8 <_Balloc+0x28>
 800918a:	2010      	movs	r0, #16
 800918c:	f7ff ffe2 	bl	8009154 <malloc>
 8009190:	4602      	mov	r2, r0
 8009192:	6260      	str	r0, [r4, #36]	; 0x24
 8009194:	b920      	cbnz	r0, 80091a0 <_Balloc+0x20>
 8009196:	4b18      	ldr	r3, [pc, #96]	; (80091f8 <_Balloc+0x78>)
 8009198:	4818      	ldr	r0, [pc, #96]	; (80091fc <_Balloc+0x7c>)
 800919a:	2166      	movs	r1, #102	; 0x66
 800919c:	f000 fe2a 	bl	8009df4 <__assert_func>
 80091a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091a4:	6006      	str	r6, [r0, #0]
 80091a6:	60c6      	str	r6, [r0, #12]
 80091a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80091aa:	68f3      	ldr	r3, [r6, #12]
 80091ac:	b183      	cbz	r3, 80091d0 <_Balloc+0x50>
 80091ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091b6:	b9b8      	cbnz	r0, 80091e8 <_Balloc+0x68>
 80091b8:	2101      	movs	r1, #1
 80091ba:	fa01 f605 	lsl.w	r6, r1, r5
 80091be:	1d72      	adds	r2, r6, #5
 80091c0:	0092      	lsls	r2, r2, #2
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 fb60 	bl	8009888 <_calloc_r>
 80091c8:	b160      	cbz	r0, 80091e4 <_Balloc+0x64>
 80091ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091ce:	e00e      	b.n	80091ee <_Balloc+0x6e>
 80091d0:	2221      	movs	r2, #33	; 0x21
 80091d2:	2104      	movs	r1, #4
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 fb57 	bl	8009888 <_calloc_r>
 80091da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091dc:	60f0      	str	r0, [r6, #12]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e4      	bne.n	80091ae <_Balloc+0x2e>
 80091e4:	2000      	movs	r0, #0
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	6802      	ldr	r2, [r0, #0]
 80091ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091ee:	2300      	movs	r3, #0
 80091f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091f4:	e7f7      	b.n	80091e6 <_Balloc+0x66>
 80091f6:	bf00      	nop
 80091f8:	0800a325 	.word	0x0800a325
 80091fc:	0800a408 	.word	0x0800a408

08009200 <_Bfree>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009204:	4605      	mov	r5, r0
 8009206:	460c      	mov	r4, r1
 8009208:	b976      	cbnz	r6, 8009228 <_Bfree+0x28>
 800920a:	2010      	movs	r0, #16
 800920c:	f7ff ffa2 	bl	8009154 <malloc>
 8009210:	4602      	mov	r2, r0
 8009212:	6268      	str	r0, [r5, #36]	; 0x24
 8009214:	b920      	cbnz	r0, 8009220 <_Bfree+0x20>
 8009216:	4b09      	ldr	r3, [pc, #36]	; (800923c <_Bfree+0x3c>)
 8009218:	4809      	ldr	r0, [pc, #36]	; (8009240 <_Bfree+0x40>)
 800921a:	218a      	movs	r1, #138	; 0x8a
 800921c:	f000 fdea 	bl	8009df4 <__assert_func>
 8009220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009224:	6006      	str	r6, [r0, #0]
 8009226:	60c6      	str	r6, [r0, #12]
 8009228:	b13c      	cbz	r4, 800923a <_Bfree+0x3a>
 800922a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800922c:	6862      	ldr	r2, [r4, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009234:	6021      	str	r1, [r4, #0]
 8009236:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800923a:	bd70      	pop	{r4, r5, r6, pc}
 800923c:	0800a325 	.word	0x0800a325
 8009240:	0800a408 	.word	0x0800a408

08009244 <__multadd>:
 8009244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009248:	690d      	ldr	r5, [r1, #16]
 800924a:	4607      	mov	r7, r0
 800924c:	460c      	mov	r4, r1
 800924e:	461e      	mov	r6, r3
 8009250:	f101 0c14 	add.w	ip, r1, #20
 8009254:	2000      	movs	r0, #0
 8009256:	f8dc 3000 	ldr.w	r3, [ip]
 800925a:	b299      	uxth	r1, r3
 800925c:	fb02 6101 	mla	r1, r2, r1, r6
 8009260:	0c1e      	lsrs	r6, r3, #16
 8009262:	0c0b      	lsrs	r3, r1, #16
 8009264:	fb02 3306 	mla	r3, r2, r6, r3
 8009268:	b289      	uxth	r1, r1
 800926a:	3001      	adds	r0, #1
 800926c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009270:	4285      	cmp	r5, r0
 8009272:	f84c 1b04 	str.w	r1, [ip], #4
 8009276:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800927a:	dcec      	bgt.n	8009256 <__multadd+0x12>
 800927c:	b30e      	cbz	r6, 80092c2 <__multadd+0x7e>
 800927e:	68a3      	ldr	r3, [r4, #8]
 8009280:	42ab      	cmp	r3, r5
 8009282:	dc19      	bgt.n	80092b8 <__multadd+0x74>
 8009284:	6861      	ldr	r1, [r4, #4]
 8009286:	4638      	mov	r0, r7
 8009288:	3101      	adds	r1, #1
 800928a:	f7ff ff79 	bl	8009180 <_Balloc>
 800928e:	4680      	mov	r8, r0
 8009290:	b928      	cbnz	r0, 800929e <__multadd+0x5a>
 8009292:	4602      	mov	r2, r0
 8009294:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <__multadd+0x84>)
 8009296:	480d      	ldr	r0, [pc, #52]	; (80092cc <__multadd+0x88>)
 8009298:	21b5      	movs	r1, #181	; 0xb5
 800929a:	f000 fdab 	bl	8009df4 <__assert_func>
 800929e:	6922      	ldr	r2, [r4, #16]
 80092a0:	3202      	adds	r2, #2
 80092a2:	f104 010c 	add.w	r1, r4, #12
 80092a6:	0092      	lsls	r2, r2, #2
 80092a8:	300c      	adds	r0, #12
 80092aa:	f7ff ff5b 	bl	8009164 <memcpy>
 80092ae:	4621      	mov	r1, r4
 80092b0:	4638      	mov	r0, r7
 80092b2:	f7ff ffa5 	bl	8009200 <_Bfree>
 80092b6:	4644      	mov	r4, r8
 80092b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092bc:	3501      	adds	r5, #1
 80092be:	615e      	str	r6, [r3, #20]
 80092c0:	6125      	str	r5, [r4, #16]
 80092c2:	4620      	mov	r0, r4
 80092c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c8:	0800a397 	.word	0x0800a397
 80092cc:	0800a408 	.word	0x0800a408

080092d0 <__hi0bits>:
 80092d0:	0c03      	lsrs	r3, r0, #16
 80092d2:	041b      	lsls	r3, r3, #16
 80092d4:	b9d3      	cbnz	r3, 800930c <__hi0bits+0x3c>
 80092d6:	0400      	lsls	r0, r0, #16
 80092d8:	2310      	movs	r3, #16
 80092da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092de:	bf04      	itt	eq
 80092e0:	0200      	lsleq	r0, r0, #8
 80092e2:	3308      	addeq	r3, #8
 80092e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092e8:	bf04      	itt	eq
 80092ea:	0100      	lsleq	r0, r0, #4
 80092ec:	3304      	addeq	r3, #4
 80092ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092f2:	bf04      	itt	eq
 80092f4:	0080      	lsleq	r0, r0, #2
 80092f6:	3302      	addeq	r3, #2
 80092f8:	2800      	cmp	r0, #0
 80092fa:	db05      	blt.n	8009308 <__hi0bits+0x38>
 80092fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009300:	f103 0301 	add.w	r3, r3, #1
 8009304:	bf08      	it	eq
 8009306:	2320      	moveq	r3, #32
 8009308:	4618      	mov	r0, r3
 800930a:	4770      	bx	lr
 800930c:	2300      	movs	r3, #0
 800930e:	e7e4      	b.n	80092da <__hi0bits+0xa>

08009310 <__lo0bits>:
 8009310:	6803      	ldr	r3, [r0, #0]
 8009312:	f013 0207 	ands.w	r2, r3, #7
 8009316:	4601      	mov	r1, r0
 8009318:	d00b      	beq.n	8009332 <__lo0bits+0x22>
 800931a:	07da      	lsls	r2, r3, #31
 800931c:	d423      	bmi.n	8009366 <__lo0bits+0x56>
 800931e:	0798      	lsls	r0, r3, #30
 8009320:	bf49      	itett	mi
 8009322:	085b      	lsrmi	r3, r3, #1
 8009324:	089b      	lsrpl	r3, r3, #2
 8009326:	2001      	movmi	r0, #1
 8009328:	600b      	strmi	r3, [r1, #0]
 800932a:	bf5c      	itt	pl
 800932c:	600b      	strpl	r3, [r1, #0]
 800932e:	2002      	movpl	r0, #2
 8009330:	4770      	bx	lr
 8009332:	b298      	uxth	r0, r3
 8009334:	b9a8      	cbnz	r0, 8009362 <__lo0bits+0x52>
 8009336:	0c1b      	lsrs	r3, r3, #16
 8009338:	2010      	movs	r0, #16
 800933a:	b2da      	uxtb	r2, r3
 800933c:	b90a      	cbnz	r2, 8009342 <__lo0bits+0x32>
 800933e:	3008      	adds	r0, #8
 8009340:	0a1b      	lsrs	r3, r3, #8
 8009342:	071a      	lsls	r2, r3, #28
 8009344:	bf04      	itt	eq
 8009346:	091b      	lsreq	r3, r3, #4
 8009348:	3004      	addeq	r0, #4
 800934a:	079a      	lsls	r2, r3, #30
 800934c:	bf04      	itt	eq
 800934e:	089b      	lsreq	r3, r3, #2
 8009350:	3002      	addeq	r0, #2
 8009352:	07da      	lsls	r2, r3, #31
 8009354:	d403      	bmi.n	800935e <__lo0bits+0x4e>
 8009356:	085b      	lsrs	r3, r3, #1
 8009358:	f100 0001 	add.w	r0, r0, #1
 800935c:	d005      	beq.n	800936a <__lo0bits+0x5a>
 800935e:	600b      	str	r3, [r1, #0]
 8009360:	4770      	bx	lr
 8009362:	4610      	mov	r0, r2
 8009364:	e7e9      	b.n	800933a <__lo0bits+0x2a>
 8009366:	2000      	movs	r0, #0
 8009368:	4770      	bx	lr
 800936a:	2020      	movs	r0, #32
 800936c:	4770      	bx	lr
	...

08009370 <__i2b>:
 8009370:	b510      	push	{r4, lr}
 8009372:	460c      	mov	r4, r1
 8009374:	2101      	movs	r1, #1
 8009376:	f7ff ff03 	bl	8009180 <_Balloc>
 800937a:	4602      	mov	r2, r0
 800937c:	b928      	cbnz	r0, 800938a <__i2b+0x1a>
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <__i2b+0x24>)
 8009380:	4805      	ldr	r0, [pc, #20]	; (8009398 <__i2b+0x28>)
 8009382:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009386:	f000 fd35 	bl	8009df4 <__assert_func>
 800938a:	2301      	movs	r3, #1
 800938c:	6144      	str	r4, [r0, #20]
 800938e:	6103      	str	r3, [r0, #16]
 8009390:	bd10      	pop	{r4, pc}
 8009392:	bf00      	nop
 8009394:	0800a397 	.word	0x0800a397
 8009398:	0800a408 	.word	0x0800a408

0800939c <__multiply>:
 800939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	4691      	mov	r9, r2
 80093a2:	690a      	ldr	r2, [r1, #16]
 80093a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	bfb8      	it	lt
 80093ac:	460b      	movlt	r3, r1
 80093ae:	460c      	mov	r4, r1
 80093b0:	bfbc      	itt	lt
 80093b2:	464c      	movlt	r4, r9
 80093b4:	4699      	movlt	r9, r3
 80093b6:	6927      	ldr	r7, [r4, #16]
 80093b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80093bc:	68a3      	ldr	r3, [r4, #8]
 80093be:	6861      	ldr	r1, [r4, #4]
 80093c0:	eb07 060a 	add.w	r6, r7, sl
 80093c4:	42b3      	cmp	r3, r6
 80093c6:	b085      	sub	sp, #20
 80093c8:	bfb8      	it	lt
 80093ca:	3101      	addlt	r1, #1
 80093cc:	f7ff fed8 	bl	8009180 <_Balloc>
 80093d0:	b930      	cbnz	r0, 80093e0 <__multiply+0x44>
 80093d2:	4602      	mov	r2, r0
 80093d4:	4b44      	ldr	r3, [pc, #272]	; (80094e8 <__multiply+0x14c>)
 80093d6:	4845      	ldr	r0, [pc, #276]	; (80094ec <__multiply+0x150>)
 80093d8:	f240 115d 	movw	r1, #349	; 0x15d
 80093dc:	f000 fd0a 	bl	8009df4 <__assert_func>
 80093e0:	f100 0514 	add.w	r5, r0, #20
 80093e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093e8:	462b      	mov	r3, r5
 80093ea:	2200      	movs	r2, #0
 80093ec:	4543      	cmp	r3, r8
 80093ee:	d321      	bcc.n	8009434 <__multiply+0x98>
 80093f0:	f104 0314 	add.w	r3, r4, #20
 80093f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093f8:	f109 0314 	add.w	r3, r9, #20
 80093fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009400:	9202      	str	r2, [sp, #8]
 8009402:	1b3a      	subs	r2, r7, r4
 8009404:	3a15      	subs	r2, #21
 8009406:	f022 0203 	bic.w	r2, r2, #3
 800940a:	3204      	adds	r2, #4
 800940c:	f104 0115 	add.w	r1, r4, #21
 8009410:	428f      	cmp	r7, r1
 8009412:	bf38      	it	cc
 8009414:	2204      	movcc	r2, #4
 8009416:	9201      	str	r2, [sp, #4]
 8009418:	9a02      	ldr	r2, [sp, #8]
 800941a:	9303      	str	r3, [sp, #12]
 800941c:	429a      	cmp	r2, r3
 800941e:	d80c      	bhi.n	800943a <__multiply+0x9e>
 8009420:	2e00      	cmp	r6, #0
 8009422:	dd03      	ble.n	800942c <__multiply+0x90>
 8009424:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009428:	2b00      	cmp	r3, #0
 800942a:	d05a      	beq.n	80094e2 <__multiply+0x146>
 800942c:	6106      	str	r6, [r0, #16]
 800942e:	b005      	add	sp, #20
 8009430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009434:	f843 2b04 	str.w	r2, [r3], #4
 8009438:	e7d8      	b.n	80093ec <__multiply+0x50>
 800943a:	f8b3 a000 	ldrh.w	sl, [r3]
 800943e:	f1ba 0f00 	cmp.w	sl, #0
 8009442:	d024      	beq.n	800948e <__multiply+0xf2>
 8009444:	f104 0e14 	add.w	lr, r4, #20
 8009448:	46a9      	mov	r9, r5
 800944a:	f04f 0c00 	mov.w	ip, #0
 800944e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009452:	f8d9 1000 	ldr.w	r1, [r9]
 8009456:	fa1f fb82 	uxth.w	fp, r2
 800945a:	b289      	uxth	r1, r1
 800945c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009460:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009464:	f8d9 2000 	ldr.w	r2, [r9]
 8009468:	4461      	add	r1, ip
 800946a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800946e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009472:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009476:	b289      	uxth	r1, r1
 8009478:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800947c:	4577      	cmp	r7, lr
 800947e:	f849 1b04 	str.w	r1, [r9], #4
 8009482:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009486:	d8e2      	bhi.n	800944e <__multiply+0xb2>
 8009488:	9a01      	ldr	r2, [sp, #4]
 800948a:	f845 c002 	str.w	ip, [r5, r2]
 800948e:	9a03      	ldr	r2, [sp, #12]
 8009490:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009494:	3304      	adds	r3, #4
 8009496:	f1b9 0f00 	cmp.w	r9, #0
 800949a:	d020      	beq.n	80094de <__multiply+0x142>
 800949c:	6829      	ldr	r1, [r5, #0]
 800949e:	f104 0c14 	add.w	ip, r4, #20
 80094a2:	46ae      	mov	lr, r5
 80094a4:	f04f 0a00 	mov.w	sl, #0
 80094a8:	f8bc b000 	ldrh.w	fp, [ip]
 80094ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80094b0:	fb09 220b 	mla	r2, r9, fp, r2
 80094b4:	4492      	add	sl, r2
 80094b6:	b289      	uxth	r1, r1
 80094b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80094bc:	f84e 1b04 	str.w	r1, [lr], #4
 80094c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80094c4:	f8be 1000 	ldrh.w	r1, [lr]
 80094c8:	0c12      	lsrs	r2, r2, #16
 80094ca:	fb09 1102 	mla	r1, r9, r2, r1
 80094ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80094d2:	4567      	cmp	r7, ip
 80094d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094d8:	d8e6      	bhi.n	80094a8 <__multiply+0x10c>
 80094da:	9a01      	ldr	r2, [sp, #4]
 80094dc:	50a9      	str	r1, [r5, r2]
 80094de:	3504      	adds	r5, #4
 80094e0:	e79a      	b.n	8009418 <__multiply+0x7c>
 80094e2:	3e01      	subs	r6, #1
 80094e4:	e79c      	b.n	8009420 <__multiply+0x84>
 80094e6:	bf00      	nop
 80094e8:	0800a397 	.word	0x0800a397
 80094ec:	0800a408 	.word	0x0800a408

080094f0 <__pow5mult>:
 80094f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f4:	4615      	mov	r5, r2
 80094f6:	f012 0203 	ands.w	r2, r2, #3
 80094fa:	4606      	mov	r6, r0
 80094fc:	460f      	mov	r7, r1
 80094fe:	d007      	beq.n	8009510 <__pow5mult+0x20>
 8009500:	4c25      	ldr	r4, [pc, #148]	; (8009598 <__pow5mult+0xa8>)
 8009502:	3a01      	subs	r2, #1
 8009504:	2300      	movs	r3, #0
 8009506:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800950a:	f7ff fe9b 	bl	8009244 <__multadd>
 800950e:	4607      	mov	r7, r0
 8009510:	10ad      	asrs	r5, r5, #2
 8009512:	d03d      	beq.n	8009590 <__pow5mult+0xa0>
 8009514:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009516:	b97c      	cbnz	r4, 8009538 <__pow5mult+0x48>
 8009518:	2010      	movs	r0, #16
 800951a:	f7ff fe1b 	bl	8009154 <malloc>
 800951e:	4602      	mov	r2, r0
 8009520:	6270      	str	r0, [r6, #36]	; 0x24
 8009522:	b928      	cbnz	r0, 8009530 <__pow5mult+0x40>
 8009524:	4b1d      	ldr	r3, [pc, #116]	; (800959c <__pow5mult+0xac>)
 8009526:	481e      	ldr	r0, [pc, #120]	; (80095a0 <__pow5mult+0xb0>)
 8009528:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800952c:	f000 fc62 	bl	8009df4 <__assert_func>
 8009530:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009534:	6004      	str	r4, [r0, #0]
 8009536:	60c4      	str	r4, [r0, #12]
 8009538:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800953c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009540:	b94c      	cbnz	r4, 8009556 <__pow5mult+0x66>
 8009542:	f240 2171 	movw	r1, #625	; 0x271
 8009546:	4630      	mov	r0, r6
 8009548:	f7ff ff12 	bl	8009370 <__i2b>
 800954c:	2300      	movs	r3, #0
 800954e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009552:	4604      	mov	r4, r0
 8009554:	6003      	str	r3, [r0, #0]
 8009556:	f04f 0900 	mov.w	r9, #0
 800955a:	07eb      	lsls	r3, r5, #31
 800955c:	d50a      	bpl.n	8009574 <__pow5mult+0x84>
 800955e:	4639      	mov	r1, r7
 8009560:	4622      	mov	r2, r4
 8009562:	4630      	mov	r0, r6
 8009564:	f7ff ff1a 	bl	800939c <__multiply>
 8009568:	4639      	mov	r1, r7
 800956a:	4680      	mov	r8, r0
 800956c:	4630      	mov	r0, r6
 800956e:	f7ff fe47 	bl	8009200 <_Bfree>
 8009572:	4647      	mov	r7, r8
 8009574:	106d      	asrs	r5, r5, #1
 8009576:	d00b      	beq.n	8009590 <__pow5mult+0xa0>
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	b938      	cbnz	r0, 800958c <__pow5mult+0x9c>
 800957c:	4622      	mov	r2, r4
 800957e:	4621      	mov	r1, r4
 8009580:	4630      	mov	r0, r6
 8009582:	f7ff ff0b 	bl	800939c <__multiply>
 8009586:	6020      	str	r0, [r4, #0]
 8009588:	f8c0 9000 	str.w	r9, [r0]
 800958c:	4604      	mov	r4, r0
 800958e:	e7e4      	b.n	800955a <__pow5mult+0x6a>
 8009590:	4638      	mov	r0, r7
 8009592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009596:	bf00      	nop
 8009598:	0800a558 	.word	0x0800a558
 800959c:	0800a325 	.word	0x0800a325
 80095a0:	0800a408 	.word	0x0800a408

080095a4 <__lshift>:
 80095a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a8:	460c      	mov	r4, r1
 80095aa:	6849      	ldr	r1, [r1, #4]
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095b2:	68a3      	ldr	r3, [r4, #8]
 80095b4:	4607      	mov	r7, r0
 80095b6:	4691      	mov	r9, r2
 80095b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80095bc:	f108 0601 	add.w	r6, r8, #1
 80095c0:	42b3      	cmp	r3, r6
 80095c2:	db0b      	blt.n	80095dc <__lshift+0x38>
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff fddb 	bl	8009180 <_Balloc>
 80095ca:	4605      	mov	r5, r0
 80095cc:	b948      	cbnz	r0, 80095e2 <__lshift+0x3e>
 80095ce:	4602      	mov	r2, r0
 80095d0:	4b2a      	ldr	r3, [pc, #168]	; (800967c <__lshift+0xd8>)
 80095d2:	482b      	ldr	r0, [pc, #172]	; (8009680 <__lshift+0xdc>)
 80095d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80095d8:	f000 fc0c 	bl	8009df4 <__assert_func>
 80095dc:	3101      	adds	r1, #1
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	e7ee      	b.n	80095c0 <__lshift+0x1c>
 80095e2:	2300      	movs	r3, #0
 80095e4:	f100 0114 	add.w	r1, r0, #20
 80095e8:	f100 0210 	add.w	r2, r0, #16
 80095ec:	4618      	mov	r0, r3
 80095ee:	4553      	cmp	r3, sl
 80095f0:	db37      	blt.n	8009662 <__lshift+0xbe>
 80095f2:	6920      	ldr	r0, [r4, #16]
 80095f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095f8:	f104 0314 	add.w	r3, r4, #20
 80095fc:	f019 091f 	ands.w	r9, r9, #31
 8009600:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009604:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009608:	d02f      	beq.n	800966a <__lshift+0xc6>
 800960a:	f1c9 0e20 	rsb	lr, r9, #32
 800960e:	468a      	mov	sl, r1
 8009610:	f04f 0c00 	mov.w	ip, #0
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	fa02 f209 	lsl.w	r2, r2, r9
 800961a:	ea42 020c 	orr.w	r2, r2, ip
 800961e:	f84a 2b04 	str.w	r2, [sl], #4
 8009622:	f853 2b04 	ldr.w	r2, [r3], #4
 8009626:	4298      	cmp	r0, r3
 8009628:	fa22 fc0e 	lsr.w	ip, r2, lr
 800962c:	d8f2      	bhi.n	8009614 <__lshift+0x70>
 800962e:	1b03      	subs	r3, r0, r4
 8009630:	3b15      	subs	r3, #21
 8009632:	f023 0303 	bic.w	r3, r3, #3
 8009636:	3304      	adds	r3, #4
 8009638:	f104 0215 	add.w	r2, r4, #21
 800963c:	4290      	cmp	r0, r2
 800963e:	bf38      	it	cc
 8009640:	2304      	movcc	r3, #4
 8009642:	f841 c003 	str.w	ip, [r1, r3]
 8009646:	f1bc 0f00 	cmp.w	ip, #0
 800964a:	d001      	beq.n	8009650 <__lshift+0xac>
 800964c:	f108 0602 	add.w	r6, r8, #2
 8009650:	3e01      	subs	r6, #1
 8009652:	4638      	mov	r0, r7
 8009654:	612e      	str	r6, [r5, #16]
 8009656:	4621      	mov	r1, r4
 8009658:	f7ff fdd2 	bl	8009200 <_Bfree>
 800965c:	4628      	mov	r0, r5
 800965e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009662:	f842 0f04 	str.w	r0, [r2, #4]!
 8009666:	3301      	adds	r3, #1
 8009668:	e7c1      	b.n	80095ee <__lshift+0x4a>
 800966a:	3904      	subs	r1, #4
 800966c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009670:	f841 2f04 	str.w	r2, [r1, #4]!
 8009674:	4298      	cmp	r0, r3
 8009676:	d8f9      	bhi.n	800966c <__lshift+0xc8>
 8009678:	e7ea      	b.n	8009650 <__lshift+0xac>
 800967a:	bf00      	nop
 800967c:	0800a397 	.word	0x0800a397
 8009680:	0800a408 	.word	0x0800a408

08009684 <__mcmp>:
 8009684:	b530      	push	{r4, r5, lr}
 8009686:	6902      	ldr	r2, [r0, #16]
 8009688:	690c      	ldr	r4, [r1, #16]
 800968a:	1b12      	subs	r2, r2, r4
 800968c:	d10e      	bne.n	80096ac <__mcmp+0x28>
 800968e:	f100 0314 	add.w	r3, r0, #20
 8009692:	3114      	adds	r1, #20
 8009694:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009698:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800969c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80096a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80096a4:	42a5      	cmp	r5, r4
 80096a6:	d003      	beq.n	80096b0 <__mcmp+0x2c>
 80096a8:	d305      	bcc.n	80096b6 <__mcmp+0x32>
 80096aa:	2201      	movs	r2, #1
 80096ac:	4610      	mov	r0, r2
 80096ae:	bd30      	pop	{r4, r5, pc}
 80096b0:	4283      	cmp	r3, r0
 80096b2:	d3f3      	bcc.n	800969c <__mcmp+0x18>
 80096b4:	e7fa      	b.n	80096ac <__mcmp+0x28>
 80096b6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ba:	e7f7      	b.n	80096ac <__mcmp+0x28>

080096bc <__mdiff>:
 80096bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	460c      	mov	r4, r1
 80096c2:	4606      	mov	r6, r0
 80096c4:	4611      	mov	r1, r2
 80096c6:	4620      	mov	r0, r4
 80096c8:	4690      	mov	r8, r2
 80096ca:	f7ff ffdb 	bl	8009684 <__mcmp>
 80096ce:	1e05      	subs	r5, r0, #0
 80096d0:	d110      	bne.n	80096f4 <__mdiff+0x38>
 80096d2:	4629      	mov	r1, r5
 80096d4:	4630      	mov	r0, r6
 80096d6:	f7ff fd53 	bl	8009180 <_Balloc>
 80096da:	b930      	cbnz	r0, 80096ea <__mdiff+0x2e>
 80096dc:	4b3a      	ldr	r3, [pc, #232]	; (80097c8 <__mdiff+0x10c>)
 80096de:	4602      	mov	r2, r0
 80096e0:	f240 2132 	movw	r1, #562	; 0x232
 80096e4:	4839      	ldr	r0, [pc, #228]	; (80097cc <__mdiff+0x110>)
 80096e6:	f000 fb85 	bl	8009df4 <__assert_func>
 80096ea:	2301      	movs	r3, #1
 80096ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f4:	bfa4      	itt	ge
 80096f6:	4643      	movge	r3, r8
 80096f8:	46a0      	movge	r8, r4
 80096fa:	4630      	mov	r0, r6
 80096fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009700:	bfa6      	itte	ge
 8009702:	461c      	movge	r4, r3
 8009704:	2500      	movge	r5, #0
 8009706:	2501      	movlt	r5, #1
 8009708:	f7ff fd3a 	bl	8009180 <_Balloc>
 800970c:	b920      	cbnz	r0, 8009718 <__mdiff+0x5c>
 800970e:	4b2e      	ldr	r3, [pc, #184]	; (80097c8 <__mdiff+0x10c>)
 8009710:	4602      	mov	r2, r0
 8009712:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009716:	e7e5      	b.n	80096e4 <__mdiff+0x28>
 8009718:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800971c:	6926      	ldr	r6, [r4, #16]
 800971e:	60c5      	str	r5, [r0, #12]
 8009720:	f104 0914 	add.w	r9, r4, #20
 8009724:	f108 0514 	add.w	r5, r8, #20
 8009728:	f100 0e14 	add.w	lr, r0, #20
 800972c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009730:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009734:	f108 0210 	add.w	r2, r8, #16
 8009738:	46f2      	mov	sl, lr
 800973a:	2100      	movs	r1, #0
 800973c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009740:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009744:	fa1f f883 	uxth.w	r8, r3
 8009748:	fa11 f18b 	uxtah	r1, r1, fp
 800974c:	0c1b      	lsrs	r3, r3, #16
 800974e:	eba1 0808 	sub.w	r8, r1, r8
 8009752:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009756:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800975a:	fa1f f888 	uxth.w	r8, r8
 800975e:	1419      	asrs	r1, r3, #16
 8009760:	454e      	cmp	r6, r9
 8009762:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009766:	f84a 3b04 	str.w	r3, [sl], #4
 800976a:	d8e7      	bhi.n	800973c <__mdiff+0x80>
 800976c:	1b33      	subs	r3, r6, r4
 800976e:	3b15      	subs	r3, #21
 8009770:	f023 0303 	bic.w	r3, r3, #3
 8009774:	3304      	adds	r3, #4
 8009776:	3415      	adds	r4, #21
 8009778:	42a6      	cmp	r6, r4
 800977a:	bf38      	it	cc
 800977c:	2304      	movcc	r3, #4
 800977e:	441d      	add	r5, r3
 8009780:	4473      	add	r3, lr
 8009782:	469e      	mov	lr, r3
 8009784:	462e      	mov	r6, r5
 8009786:	4566      	cmp	r6, ip
 8009788:	d30e      	bcc.n	80097a8 <__mdiff+0xec>
 800978a:	f10c 0203 	add.w	r2, ip, #3
 800978e:	1b52      	subs	r2, r2, r5
 8009790:	f022 0203 	bic.w	r2, r2, #3
 8009794:	3d03      	subs	r5, #3
 8009796:	45ac      	cmp	ip, r5
 8009798:	bf38      	it	cc
 800979a:	2200      	movcc	r2, #0
 800979c:	441a      	add	r2, r3
 800979e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80097a2:	b17b      	cbz	r3, 80097c4 <__mdiff+0x108>
 80097a4:	6107      	str	r7, [r0, #16]
 80097a6:	e7a3      	b.n	80096f0 <__mdiff+0x34>
 80097a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80097ac:	fa11 f288 	uxtah	r2, r1, r8
 80097b0:	1414      	asrs	r4, r2, #16
 80097b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80097b6:	b292      	uxth	r2, r2
 80097b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80097bc:	f84e 2b04 	str.w	r2, [lr], #4
 80097c0:	1421      	asrs	r1, r4, #16
 80097c2:	e7e0      	b.n	8009786 <__mdiff+0xca>
 80097c4:	3f01      	subs	r7, #1
 80097c6:	e7ea      	b.n	800979e <__mdiff+0xe2>
 80097c8:	0800a397 	.word	0x0800a397
 80097cc:	0800a408 	.word	0x0800a408

080097d0 <__d2b>:
 80097d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097d4:	4689      	mov	r9, r1
 80097d6:	2101      	movs	r1, #1
 80097d8:	ec57 6b10 	vmov	r6, r7, d0
 80097dc:	4690      	mov	r8, r2
 80097de:	f7ff fccf 	bl	8009180 <_Balloc>
 80097e2:	4604      	mov	r4, r0
 80097e4:	b930      	cbnz	r0, 80097f4 <__d2b+0x24>
 80097e6:	4602      	mov	r2, r0
 80097e8:	4b25      	ldr	r3, [pc, #148]	; (8009880 <__d2b+0xb0>)
 80097ea:	4826      	ldr	r0, [pc, #152]	; (8009884 <__d2b+0xb4>)
 80097ec:	f240 310a 	movw	r1, #778	; 0x30a
 80097f0:	f000 fb00 	bl	8009df4 <__assert_func>
 80097f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097fc:	bb35      	cbnz	r5, 800984c <__d2b+0x7c>
 80097fe:	2e00      	cmp	r6, #0
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	d028      	beq.n	8009856 <__d2b+0x86>
 8009804:	4668      	mov	r0, sp
 8009806:	9600      	str	r6, [sp, #0]
 8009808:	f7ff fd82 	bl	8009310 <__lo0bits>
 800980c:	9900      	ldr	r1, [sp, #0]
 800980e:	b300      	cbz	r0, 8009852 <__d2b+0x82>
 8009810:	9a01      	ldr	r2, [sp, #4]
 8009812:	f1c0 0320 	rsb	r3, r0, #32
 8009816:	fa02 f303 	lsl.w	r3, r2, r3
 800981a:	430b      	orrs	r3, r1
 800981c:	40c2      	lsrs	r2, r0
 800981e:	6163      	str	r3, [r4, #20]
 8009820:	9201      	str	r2, [sp, #4]
 8009822:	9b01      	ldr	r3, [sp, #4]
 8009824:	61a3      	str	r3, [r4, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	bf14      	ite	ne
 800982a:	2202      	movne	r2, #2
 800982c:	2201      	moveq	r2, #1
 800982e:	6122      	str	r2, [r4, #16]
 8009830:	b1d5      	cbz	r5, 8009868 <__d2b+0x98>
 8009832:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009836:	4405      	add	r5, r0
 8009838:	f8c9 5000 	str.w	r5, [r9]
 800983c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009840:	f8c8 0000 	str.w	r0, [r8]
 8009844:	4620      	mov	r0, r4
 8009846:	b003      	add	sp, #12
 8009848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800984c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009850:	e7d5      	b.n	80097fe <__d2b+0x2e>
 8009852:	6161      	str	r1, [r4, #20]
 8009854:	e7e5      	b.n	8009822 <__d2b+0x52>
 8009856:	a801      	add	r0, sp, #4
 8009858:	f7ff fd5a 	bl	8009310 <__lo0bits>
 800985c:	9b01      	ldr	r3, [sp, #4]
 800985e:	6163      	str	r3, [r4, #20]
 8009860:	2201      	movs	r2, #1
 8009862:	6122      	str	r2, [r4, #16]
 8009864:	3020      	adds	r0, #32
 8009866:	e7e3      	b.n	8009830 <__d2b+0x60>
 8009868:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800986c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009870:	f8c9 0000 	str.w	r0, [r9]
 8009874:	6918      	ldr	r0, [r3, #16]
 8009876:	f7ff fd2b 	bl	80092d0 <__hi0bits>
 800987a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800987e:	e7df      	b.n	8009840 <__d2b+0x70>
 8009880:	0800a397 	.word	0x0800a397
 8009884:	0800a408 	.word	0x0800a408

08009888 <_calloc_r>:
 8009888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800988a:	fba1 2402 	umull	r2, r4, r1, r2
 800988e:	b94c      	cbnz	r4, 80098a4 <_calloc_r+0x1c>
 8009890:	4611      	mov	r1, r2
 8009892:	9201      	str	r2, [sp, #4]
 8009894:	f000 f87a 	bl	800998c <_malloc_r>
 8009898:	9a01      	ldr	r2, [sp, #4]
 800989a:	4605      	mov	r5, r0
 800989c:	b930      	cbnz	r0, 80098ac <_calloc_r+0x24>
 800989e:	4628      	mov	r0, r5
 80098a0:	b003      	add	sp, #12
 80098a2:	bd30      	pop	{r4, r5, pc}
 80098a4:	220c      	movs	r2, #12
 80098a6:	6002      	str	r2, [r0, #0]
 80098a8:	2500      	movs	r5, #0
 80098aa:	e7f8      	b.n	800989e <_calloc_r+0x16>
 80098ac:	4621      	mov	r1, r4
 80098ae:	f7fd fdf3 	bl	8007498 <memset>
 80098b2:	e7f4      	b.n	800989e <_calloc_r+0x16>

080098b4 <_free_r>:
 80098b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098b6:	2900      	cmp	r1, #0
 80098b8:	d044      	beq.n	8009944 <_free_r+0x90>
 80098ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098be:	9001      	str	r0, [sp, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f1a1 0404 	sub.w	r4, r1, #4
 80098c6:	bfb8      	it	lt
 80098c8:	18e4      	addlt	r4, r4, r3
 80098ca:	f000 fb19 	bl	8009f00 <__malloc_lock>
 80098ce:	4a1e      	ldr	r2, [pc, #120]	; (8009948 <_free_r+0x94>)
 80098d0:	9801      	ldr	r0, [sp, #4]
 80098d2:	6813      	ldr	r3, [r2, #0]
 80098d4:	b933      	cbnz	r3, 80098e4 <_free_r+0x30>
 80098d6:	6063      	str	r3, [r4, #4]
 80098d8:	6014      	str	r4, [r2, #0]
 80098da:	b003      	add	sp, #12
 80098dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098e0:	f000 bb14 	b.w	8009f0c <__malloc_unlock>
 80098e4:	42a3      	cmp	r3, r4
 80098e6:	d908      	bls.n	80098fa <_free_r+0x46>
 80098e8:	6825      	ldr	r5, [r4, #0]
 80098ea:	1961      	adds	r1, r4, r5
 80098ec:	428b      	cmp	r3, r1
 80098ee:	bf01      	itttt	eq
 80098f0:	6819      	ldreq	r1, [r3, #0]
 80098f2:	685b      	ldreq	r3, [r3, #4]
 80098f4:	1949      	addeq	r1, r1, r5
 80098f6:	6021      	streq	r1, [r4, #0]
 80098f8:	e7ed      	b.n	80098d6 <_free_r+0x22>
 80098fa:	461a      	mov	r2, r3
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	b10b      	cbz	r3, 8009904 <_free_r+0x50>
 8009900:	42a3      	cmp	r3, r4
 8009902:	d9fa      	bls.n	80098fa <_free_r+0x46>
 8009904:	6811      	ldr	r1, [r2, #0]
 8009906:	1855      	adds	r5, r2, r1
 8009908:	42a5      	cmp	r5, r4
 800990a:	d10b      	bne.n	8009924 <_free_r+0x70>
 800990c:	6824      	ldr	r4, [r4, #0]
 800990e:	4421      	add	r1, r4
 8009910:	1854      	adds	r4, r2, r1
 8009912:	42a3      	cmp	r3, r4
 8009914:	6011      	str	r1, [r2, #0]
 8009916:	d1e0      	bne.n	80098da <_free_r+0x26>
 8009918:	681c      	ldr	r4, [r3, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	6053      	str	r3, [r2, #4]
 800991e:	4421      	add	r1, r4
 8009920:	6011      	str	r1, [r2, #0]
 8009922:	e7da      	b.n	80098da <_free_r+0x26>
 8009924:	d902      	bls.n	800992c <_free_r+0x78>
 8009926:	230c      	movs	r3, #12
 8009928:	6003      	str	r3, [r0, #0]
 800992a:	e7d6      	b.n	80098da <_free_r+0x26>
 800992c:	6825      	ldr	r5, [r4, #0]
 800992e:	1961      	adds	r1, r4, r5
 8009930:	428b      	cmp	r3, r1
 8009932:	bf04      	itt	eq
 8009934:	6819      	ldreq	r1, [r3, #0]
 8009936:	685b      	ldreq	r3, [r3, #4]
 8009938:	6063      	str	r3, [r4, #4]
 800993a:	bf04      	itt	eq
 800993c:	1949      	addeq	r1, r1, r5
 800993e:	6021      	streq	r1, [r4, #0]
 8009940:	6054      	str	r4, [r2, #4]
 8009942:	e7ca      	b.n	80098da <_free_r+0x26>
 8009944:	b003      	add	sp, #12
 8009946:	bd30      	pop	{r4, r5, pc}
 8009948:	200015a8 	.word	0x200015a8

0800994c <sbrk_aligned>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	4e0e      	ldr	r6, [pc, #56]	; (8009988 <sbrk_aligned+0x3c>)
 8009950:	460c      	mov	r4, r1
 8009952:	6831      	ldr	r1, [r6, #0]
 8009954:	4605      	mov	r5, r0
 8009956:	b911      	cbnz	r1, 800995e <sbrk_aligned+0x12>
 8009958:	f000 f9e6 	bl	8009d28 <_sbrk_r>
 800995c:	6030      	str	r0, [r6, #0]
 800995e:	4621      	mov	r1, r4
 8009960:	4628      	mov	r0, r5
 8009962:	f000 f9e1 	bl	8009d28 <_sbrk_r>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	d00a      	beq.n	8009980 <sbrk_aligned+0x34>
 800996a:	1cc4      	adds	r4, r0, #3
 800996c:	f024 0403 	bic.w	r4, r4, #3
 8009970:	42a0      	cmp	r0, r4
 8009972:	d007      	beq.n	8009984 <sbrk_aligned+0x38>
 8009974:	1a21      	subs	r1, r4, r0
 8009976:	4628      	mov	r0, r5
 8009978:	f000 f9d6 	bl	8009d28 <_sbrk_r>
 800997c:	3001      	adds	r0, #1
 800997e:	d101      	bne.n	8009984 <sbrk_aligned+0x38>
 8009980:	f04f 34ff 	mov.w	r4, #4294967295
 8009984:	4620      	mov	r0, r4
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	200015ac 	.word	0x200015ac

0800998c <_malloc_r>:
 800998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009990:	1ccd      	adds	r5, r1, #3
 8009992:	f025 0503 	bic.w	r5, r5, #3
 8009996:	3508      	adds	r5, #8
 8009998:	2d0c      	cmp	r5, #12
 800999a:	bf38      	it	cc
 800999c:	250c      	movcc	r5, #12
 800999e:	2d00      	cmp	r5, #0
 80099a0:	4607      	mov	r7, r0
 80099a2:	db01      	blt.n	80099a8 <_malloc_r+0x1c>
 80099a4:	42a9      	cmp	r1, r5
 80099a6:	d905      	bls.n	80099b4 <_malloc_r+0x28>
 80099a8:	230c      	movs	r3, #12
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	2600      	movs	r6, #0
 80099ae:	4630      	mov	r0, r6
 80099b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b4:	4e2e      	ldr	r6, [pc, #184]	; (8009a70 <_malloc_r+0xe4>)
 80099b6:	f000 faa3 	bl	8009f00 <__malloc_lock>
 80099ba:	6833      	ldr	r3, [r6, #0]
 80099bc:	461c      	mov	r4, r3
 80099be:	bb34      	cbnz	r4, 8009a0e <_malloc_r+0x82>
 80099c0:	4629      	mov	r1, r5
 80099c2:	4638      	mov	r0, r7
 80099c4:	f7ff ffc2 	bl	800994c <sbrk_aligned>
 80099c8:	1c43      	adds	r3, r0, #1
 80099ca:	4604      	mov	r4, r0
 80099cc:	d14d      	bne.n	8009a6a <_malloc_r+0xde>
 80099ce:	6834      	ldr	r4, [r6, #0]
 80099d0:	4626      	mov	r6, r4
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	d140      	bne.n	8009a58 <_malloc_r+0xcc>
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	4631      	mov	r1, r6
 80099da:	4638      	mov	r0, r7
 80099dc:	eb04 0803 	add.w	r8, r4, r3
 80099e0:	f000 f9a2 	bl	8009d28 <_sbrk_r>
 80099e4:	4580      	cmp	r8, r0
 80099e6:	d13a      	bne.n	8009a5e <_malloc_r+0xd2>
 80099e8:	6821      	ldr	r1, [r4, #0]
 80099ea:	3503      	adds	r5, #3
 80099ec:	1a6d      	subs	r5, r5, r1
 80099ee:	f025 0503 	bic.w	r5, r5, #3
 80099f2:	3508      	adds	r5, #8
 80099f4:	2d0c      	cmp	r5, #12
 80099f6:	bf38      	it	cc
 80099f8:	250c      	movcc	r5, #12
 80099fa:	4629      	mov	r1, r5
 80099fc:	4638      	mov	r0, r7
 80099fe:	f7ff ffa5 	bl	800994c <sbrk_aligned>
 8009a02:	3001      	adds	r0, #1
 8009a04:	d02b      	beq.n	8009a5e <_malloc_r+0xd2>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	442b      	add	r3, r5
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	e00e      	b.n	8009a2c <_malloc_r+0xa0>
 8009a0e:	6822      	ldr	r2, [r4, #0]
 8009a10:	1b52      	subs	r2, r2, r5
 8009a12:	d41e      	bmi.n	8009a52 <_malloc_r+0xc6>
 8009a14:	2a0b      	cmp	r2, #11
 8009a16:	d916      	bls.n	8009a46 <_malloc_r+0xba>
 8009a18:	1961      	adds	r1, r4, r5
 8009a1a:	42a3      	cmp	r3, r4
 8009a1c:	6025      	str	r5, [r4, #0]
 8009a1e:	bf18      	it	ne
 8009a20:	6059      	strne	r1, [r3, #4]
 8009a22:	6863      	ldr	r3, [r4, #4]
 8009a24:	bf08      	it	eq
 8009a26:	6031      	streq	r1, [r6, #0]
 8009a28:	5162      	str	r2, [r4, r5]
 8009a2a:	604b      	str	r3, [r1, #4]
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f104 060b 	add.w	r6, r4, #11
 8009a32:	f000 fa6b 	bl	8009f0c <__malloc_unlock>
 8009a36:	f026 0607 	bic.w	r6, r6, #7
 8009a3a:	1d23      	adds	r3, r4, #4
 8009a3c:	1af2      	subs	r2, r6, r3
 8009a3e:	d0b6      	beq.n	80099ae <_malloc_r+0x22>
 8009a40:	1b9b      	subs	r3, r3, r6
 8009a42:	50a3      	str	r3, [r4, r2]
 8009a44:	e7b3      	b.n	80099ae <_malloc_r+0x22>
 8009a46:	6862      	ldr	r2, [r4, #4]
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	bf0c      	ite	eq
 8009a4c:	6032      	streq	r2, [r6, #0]
 8009a4e:	605a      	strne	r2, [r3, #4]
 8009a50:	e7ec      	b.n	8009a2c <_malloc_r+0xa0>
 8009a52:	4623      	mov	r3, r4
 8009a54:	6864      	ldr	r4, [r4, #4]
 8009a56:	e7b2      	b.n	80099be <_malloc_r+0x32>
 8009a58:	4634      	mov	r4, r6
 8009a5a:	6876      	ldr	r6, [r6, #4]
 8009a5c:	e7b9      	b.n	80099d2 <_malloc_r+0x46>
 8009a5e:	230c      	movs	r3, #12
 8009a60:	603b      	str	r3, [r7, #0]
 8009a62:	4638      	mov	r0, r7
 8009a64:	f000 fa52 	bl	8009f0c <__malloc_unlock>
 8009a68:	e7a1      	b.n	80099ae <_malloc_r+0x22>
 8009a6a:	6025      	str	r5, [r4, #0]
 8009a6c:	e7de      	b.n	8009a2c <_malloc_r+0xa0>
 8009a6e:	bf00      	nop
 8009a70:	200015a8 	.word	0x200015a8

08009a74 <__sfputc_r>:
 8009a74:	6893      	ldr	r3, [r2, #8]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	b410      	push	{r4}
 8009a7c:	6093      	str	r3, [r2, #8]
 8009a7e:	da08      	bge.n	8009a92 <__sfputc_r+0x1e>
 8009a80:	6994      	ldr	r4, [r2, #24]
 8009a82:	42a3      	cmp	r3, r4
 8009a84:	db01      	blt.n	8009a8a <__sfputc_r+0x16>
 8009a86:	290a      	cmp	r1, #10
 8009a88:	d103      	bne.n	8009a92 <__sfputc_r+0x1e>
 8009a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a8e:	f7fe ba03 	b.w	8007e98 <__swbuf_r>
 8009a92:	6813      	ldr	r3, [r2, #0]
 8009a94:	1c58      	adds	r0, r3, #1
 8009a96:	6010      	str	r0, [r2, #0]
 8009a98:	7019      	strb	r1, [r3, #0]
 8009a9a:	4608      	mov	r0, r1
 8009a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <__sfputs_r>:
 8009aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa4:	4606      	mov	r6, r0
 8009aa6:	460f      	mov	r7, r1
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	18d5      	adds	r5, r2, r3
 8009aac:	42ac      	cmp	r4, r5
 8009aae:	d101      	bne.n	8009ab4 <__sfputs_r+0x12>
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	e007      	b.n	8009ac4 <__sfputs_r+0x22>
 8009ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab8:	463a      	mov	r2, r7
 8009aba:	4630      	mov	r0, r6
 8009abc:	f7ff ffda 	bl	8009a74 <__sfputc_r>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d1f3      	bne.n	8009aac <__sfputs_r+0xa>
 8009ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ac8 <_vfiprintf_r>:
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	460d      	mov	r5, r1
 8009ace:	b09d      	sub	sp, #116	; 0x74
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	4698      	mov	r8, r3
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	b118      	cbz	r0, 8009ae0 <_vfiprintf_r+0x18>
 8009ad8:	6983      	ldr	r3, [r0, #24]
 8009ada:	b90b      	cbnz	r3, 8009ae0 <_vfiprintf_r+0x18>
 8009adc:	f7ff fa30 	bl	8008f40 <__sinit>
 8009ae0:	4b89      	ldr	r3, [pc, #548]	; (8009d08 <_vfiprintf_r+0x240>)
 8009ae2:	429d      	cmp	r5, r3
 8009ae4:	d11b      	bne.n	8009b1e <_vfiprintf_r+0x56>
 8009ae6:	6875      	ldr	r5, [r6, #4]
 8009ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aea:	07d9      	lsls	r1, r3, #31
 8009aec:	d405      	bmi.n	8009afa <_vfiprintf_r+0x32>
 8009aee:	89ab      	ldrh	r3, [r5, #12]
 8009af0:	059a      	lsls	r2, r3, #22
 8009af2:	d402      	bmi.n	8009afa <_vfiprintf_r+0x32>
 8009af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009af6:	f7ff fac6 	bl	8009086 <__retarget_lock_acquire_recursive>
 8009afa:	89ab      	ldrh	r3, [r5, #12]
 8009afc:	071b      	lsls	r3, r3, #28
 8009afe:	d501      	bpl.n	8009b04 <_vfiprintf_r+0x3c>
 8009b00:	692b      	ldr	r3, [r5, #16]
 8009b02:	b9eb      	cbnz	r3, 8009b40 <_vfiprintf_r+0x78>
 8009b04:	4629      	mov	r1, r5
 8009b06:	4630      	mov	r0, r6
 8009b08:	f7fe fa18 	bl	8007f3c <__swsetup_r>
 8009b0c:	b1c0      	cbz	r0, 8009b40 <_vfiprintf_r+0x78>
 8009b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b10:	07dc      	lsls	r4, r3, #31
 8009b12:	d50e      	bpl.n	8009b32 <_vfiprintf_r+0x6a>
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	b01d      	add	sp, #116	; 0x74
 8009b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1e:	4b7b      	ldr	r3, [pc, #492]	; (8009d0c <_vfiprintf_r+0x244>)
 8009b20:	429d      	cmp	r5, r3
 8009b22:	d101      	bne.n	8009b28 <_vfiprintf_r+0x60>
 8009b24:	68b5      	ldr	r5, [r6, #8]
 8009b26:	e7df      	b.n	8009ae8 <_vfiprintf_r+0x20>
 8009b28:	4b79      	ldr	r3, [pc, #484]	; (8009d10 <_vfiprintf_r+0x248>)
 8009b2a:	429d      	cmp	r5, r3
 8009b2c:	bf08      	it	eq
 8009b2e:	68f5      	ldreq	r5, [r6, #12]
 8009b30:	e7da      	b.n	8009ae8 <_vfiprintf_r+0x20>
 8009b32:	89ab      	ldrh	r3, [r5, #12]
 8009b34:	0598      	lsls	r0, r3, #22
 8009b36:	d4ed      	bmi.n	8009b14 <_vfiprintf_r+0x4c>
 8009b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b3a:	f7ff faa5 	bl	8009088 <__retarget_lock_release_recursive>
 8009b3e:	e7e9      	b.n	8009b14 <_vfiprintf_r+0x4c>
 8009b40:	2300      	movs	r3, #0
 8009b42:	9309      	str	r3, [sp, #36]	; 0x24
 8009b44:	2320      	movs	r3, #32
 8009b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b4e:	2330      	movs	r3, #48	; 0x30
 8009b50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d14 <_vfiprintf_r+0x24c>
 8009b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b58:	f04f 0901 	mov.w	r9, #1
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	469a      	mov	sl, r3
 8009b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b64:	b10a      	cbz	r2, 8009b6a <_vfiprintf_r+0xa2>
 8009b66:	2a25      	cmp	r2, #37	; 0x25
 8009b68:	d1f9      	bne.n	8009b5e <_vfiprintf_r+0x96>
 8009b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8009b6e:	d00b      	beq.n	8009b88 <_vfiprintf_r+0xc0>
 8009b70:	465b      	mov	r3, fp
 8009b72:	4622      	mov	r2, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	4630      	mov	r0, r6
 8009b78:	f7ff ff93 	bl	8009aa2 <__sfputs_r>
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	f000 80aa 	beq.w	8009cd6 <_vfiprintf_r+0x20e>
 8009b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b84:	445a      	add	r2, fp
 8009b86:	9209      	str	r2, [sp, #36]	; 0x24
 8009b88:	f89a 3000 	ldrb.w	r3, [sl]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 80a2 	beq.w	8009cd6 <_vfiprintf_r+0x20e>
 8009b92:	2300      	movs	r3, #0
 8009b94:	f04f 32ff 	mov.w	r2, #4294967295
 8009b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b9c:	f10a 0a01 	add.w	sl, sl, #1
 8009ba0:	9304      	str	r3, [sp, #16]
 8009ba2:	9307      	str	r3, [sp, #28]
 8009ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8009baa:	4654      	mov	r4, sl
 8009bac:	2205      	movs	r2, #5
 8009bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb2:	4858      	ldr	r0, [pc, #352]	; (8009d14 <_vfiprintf_r+0x24c>)
 8009bb4:	f7f6 fb14 	bl	80001e0 <memchr>
 8009bb8:	9a04      	ldr	r2, [sp, #16]
 8009bba:	b9d8      	cbnz	r0, 8009bf4 <_vfiprintf_r+0x12c>
 8009bbc:	06d1      	lsls	r1, r2, #27
 8009bbe:	bf44      	itt	mi
 8009bc0:	2320      	movmi	r3, #32
 8009bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bc6:	0713      	lsls	r3, r2, #28
 8009bc8:	bf44      	itt	mi
 8009bca:	232b      	movmi	r3, #43	; 0x2b
 8009bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8009bd6:	d015      	beq.n	8009c04 <_vfiprintf_r+0x13c>
 8009bd8:	9a07      	ldr	r2, [sp, #28]
 8009bda:	4654      	mov	r4, sl
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f04f 0c0a 	mov.w	ip, #10
 8009be2:	4621      	mov	r1, r4
 8009be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009be8:	3b30      	subs	r3, #48	; 0x30
 8009bea:	2b09      	cmp	r3, #9
 8009bec:	d94e      	bls.n	8009c8c <_vfiprintf_r+0x1c4>
 8009bee:	b1b0      	cbz	r0, 8009c1e <_vfiprintf_r+0x156>
 8009bf0:	9207      	str	r2, [sp, #28]
 8009bf2:	e014      	b.n	8009c1e <_vfiprintf_r+0x156>
 8009bf4:	eba0 0308 	sub.w	r3, r0, r8
 8009bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	9304      	str	r3, [sp, #16]
 8009c00:	46a2      	mov	sl, r4
 8009c02:	e7d2      	b.n	8009baa <_vfiprintf_r+0xe2>
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	1d19      	adds	r1, r3, #4
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	9103      	str	r1, [sp, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bfbb      	ittet	lt
 8009c10:	425b      	neglt	r3, r3
 8009c12:	f042 0202 	orrlt.w	r2, r2, #2
 8009c16:	9307      	strge	r3, [sp, #28]
 8009c18:	9307      	strlt	r3, [sp, #28]
 8009c1a:	bfb8      	it	lt
 8009c1c:	9204      	strlt	r2, [sp, #16]
 8009c1e:	7823      	ldrb	r3, [r4, #0]
 8009c20:	2b2e      	cmp	r3, #46	; 0x2e
 8009c22:	d10c      	bne.n	8009c3e <_vfiprintf_r+0x176>
 8009c24:	7863      	ldrb	r3, [r4, #1]
 8009c26:	2b2a      	cmp	r3, #42	; 0x2a
 8009c28:	d135      	bne.n	8009c96 <_vfiprintf_r+0x1ce>
 8009c2a:	9b03      	ldr	r3, [sp, #12]
 8009c2c:	1d1a      	adds	r2, r3, #4
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	9203      	str	r2, [sp, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bfb8      	it	lt
 8009c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c3a:	3402      	adds	r4, #2
 8009c3c:	9305      	str	r3, [sp, #20]
 8009c3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d24 <_vfiprintf_r+0x25c>
 8009c42:	7821      	ldrb	r1, [r4, #0]
 8009c44:	2203      	movs	r2, #3
 8009c46:	4650      	mov	r0, sl
 8009c48:	f7f6 faca 	bl	80001e0 <memchr>
 8009c4c:	b140      	cbz	r0, 8009c60 <_vfiprintf_r+0x198>
 8009c4e:	2340      	movs	r3, #64	; 0x40
 8009c50:	eba0 000a 	sub.w	r0, r0, sl
 8009c54:	fa03 f000 	lsl.w	r0, r3, r0
 8009c58:	9b04      	ldr	r3, [sp, #16]
 8009c5a:	4303      	orrs	r3, r0
 8009c5c:	3401      	adds	r4, #1
 8009c5e:	9304      	str	r3, [sp, #16]
 8009c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c64:	482c      	ldr	r0, [pc, #176]	; (8009d18 <_vfiprintf_r+0x250>)
 8009c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c6a:	2206      	movs	r2, #6
 8009c6c:	f7f6 fab8 	bl	80001e0 <memchr>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d03f      	beq.n	8009cf4 <_vfiprintf_r+0x22c>
 8009c74:	4b29      	ldr	r3, [pc, #164]	; (8009d1c <_vfiprintf_r+0x254>)
 8009c76:	bb1b      	cbnz	r3, 8009cc0 <_vfiprintf_r+0x1f8>
 8009c78:	9b03      	ldr	r3, [sp, #12]
 8009c7a:	3307      	adds	r3, #7
 8009c7c:	f023 0307 	bic.w	r3, r3, #7
 8009c80:	3308      	adds	r3, #8
 8009c82:	9303      	str	r3, [sp, #12]
 8009c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c86:	443b      	add	r3, r7
 8009c88:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8a:	e767      	b.n	8009b5c <_vfiprintf_r+0x94>
 8009c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c90:	460c      	mov	r4, r1
 8009c92:	2001      	movs	r0, #1
 8009c94:	e7a5      	b.n	8009be2 <_vfiprintf_r+0x11a>
 8009c96:	2300      	movs	r3, #0
 8009c98:	3401      	adds	r4, #1
 8009c9a:	9305      	str	r3, [sp, #20]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	f04f 0c0a 	mov.w	ip, #10
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ca8:	3a30      	subs	r2, #48	; 0x30
 8009caa:	2a09      	cmp	r2, #9
 8009cac:	d903      	bls.n	8009cb6 <_vfiprintf_r+0x1ee>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d0c5      	beq.n	8009c3e <_vfiprintf_r+0x176>
 8009cb2:	9105      	str	r1, [sp, #20]
 8009cb4:	e7c3      	b.n	8009c3e <_vfiprintf_r+0x176>
 8009cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cba:	4604      	mov	r4, r0
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e7f0      	b.n	8009ca2 <_vfiprintf_r+0x1da>
 8009cc0:	ab03      	add	r3, sp, #12
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	462a      	mov	r2, r5
 8009cc6:	4b16      	ldr	r3, [pc, #88]	; (8009d20 <_vfiprintf_r+0x258>)
 8009cc8:	a904      	add	r1, sp, #16
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7fd fc8c 	bl	80075e8 <_printf_float>
 8009cd0:	4607      	mov	r7, r0
 8009cd2:	1c78      	adds	r0, r7, #1
 8009cd4:	d1d6      	bne.n	8009c84 <_vfiprintf_r+0x1bc>
 8009cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cd8:	07d9      	lsls	r1, r3, #31
 8009cda:	d405      	bmi.n	8009ce8 <_vfiprintf_r+0x220>
 8009cdc:	89ab      	ldrh	r3, [r5, #12]
 8009cde:	059a      	lsls	r2, r3, #22
 8009ce0:	d402      	bmi.n	8009ce8 <_vfiprintf_r+0x220>
 8009ce2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ce4:	f7ff f9d0 	bl	8009088 <__retarget_lock_release_recursive>
 8009ce8:	89ab      	ldrh	r3, [r5, #12]
 8009cea:	065b      	lsls	r3, r3, #25
 8009cec:	f53f af12 	bmi.w	8009b14 <_vfiprintf_r+0x4c>
 8009cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cf2:	e711      	b.n	8009b18 <_vfiprintf_r+0x50>
 8009cf4:	ab03      	add	r3, sp, #12
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	462a      	mov	r2, r5
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <_vfiprintf_r+0x258>)
 8009cfc:	a904      	add	r1, sp, #16
 8009cfe:	4630      	mov	r0, r6
 8009d00:	f7fd ff16 	bl	8007b30 <_printf_i>
 8009d04:	e7e4      	b.n	8009cd0 <_vfiprintf_r+0x208>
 8009d06:	bf00      	nop
 8009d08:	0800a3c8 	.word	0x0800a3c8
 8009d0c:	0800a3e8 	.word	0x0800a3e8
 8009d10:	0800a3a8 	.word	0x0800a3a8
 8009d14:	0800a564 	.word	0x0800a564
 8009d18:	0800a56e 	.word	0x0800a56e
 8009d1c:	080075e9 	.word	0x080075e9
 8009d20:	08009aa3 	.word	0x08009aa3
 8009d24:	0800a56a 	.word	0x0800a56a

08009d28 <_sbrk_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d06      	ldr	r5, [pc, #24]	; (8009d44 <_sbrk_r+0x1c>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	602b      	str	r3, [r5, #0]
 8009d34:	f7f8 f8b0 	bl	8001e98 <_sbrk>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d102      	bne.n	8009d42 <_sbrk_r+0x1a>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	b103      	cbz	r3, 8009d42 <_sbrk_r+0x1a>
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	200015b0 	.word	0x200015b0

08009d48 <__sread>:
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d50:	f000 f8e2 	bl	8009f18 <_read_r>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	bfab      	itete	ge
 8009d58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d5a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d5c:	181b      	addge	r3, r3, r0
 8009d5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d62:	bfac      	ite	ge
 8009d64:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d66:	81a3      	strhlt	r3, [r4, #12]
 8009d68:	bd10      	pop	{r4, pc}

08009d6a <__swrite>:
 8009d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d6e:	461f      	mov	r7, r3
 8009d70:	898b      	ldrh	r3, [r1, #12]
 8009d72:	05db      	lsls	r3, r3, #23
 8009d74:	4605      	mov	r5, r0
 8009d76:	460c      	mov	r4, r1
 8009d78:	4616      	mov	r6, r2
 8009d7a:	d505      	bpl.n	8009d88 <__swrite+0x1e>
 8009d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d80:	2302      	movs	r3, #2
 8009d82:	2200      	movs	r2, #0
 8009d84:	f000 f898 	bl	8009eb8 <_lseek_r>
 8009d88:	89a3      	ldrh	r3, [r4, #12]
 8009d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d92:	81a3      	strh	r3, [r4, #12]
 8009d94:	4632      	mov	r2, r6
 8009d96:	463b      	mov	r3, r7
 8009d98:	4628      	mov	r0, r5
 8009d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9e:	f000 b817 	b.w	8009dd0 <_write_r>

08009da2 <__sseek>:
 8009da2:	b510      	push	{r4, lr}
 8009da4:	460c      	mov	r4, r1
 8009da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009daa:	f000 f885 	bl	8009eb8 <_lseek_r>
 8009dae:	1c43      	adds	r3, r0, #1
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	bf15      	itete	ne
 8009db4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009db6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dbe:	81a3      	strheq	r3, [r4, #12]
 8009dc0:	bf18      	it	ne
 8009dc2:	81a3      	strhne	r3, [r4, #12]
 8009dc4:	bd10      	pop	{r4, pc}

08009dc6 <__sclose>:
 8009dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dca:	f000 b831 	b.w	8009e30 <_close_r>
	...

08009dd0 <_write_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d07      	ldr	r5, [pc, #28]	; (8009df0 <_write_r+0x20>)
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	f7f7 fa56 	bl	8001290 <_write>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_write_r+0x1e>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_write_r+0x1e>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	200015b0 	.word	0x200015b0

08009df4 <__assert_func>:
 8009df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009df6:	4614      	mov	r4, r2
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <__assert_func+0x2c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4605      	mov	r5, r0
 8009e00:	68d8      	ldr	r0, [r3, #12]
 8009e02:	b14c      	cbz	r4, 8009e18 <__assert_func+0x24>
 8009e04:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <__assert_func+0x30>)
 8009e06:	9100      	str	r1, [sp, #0]
 8009e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e0c:	4906      	ldr	r1, [pc, #24]	; (8009e28 <__assert_func+0x34>)
 8009e0e:	462b      	mov	r3, r5
 8009e10:	f000 f81e 	bl	8009e50 <fiprintf>
 8009e14:	f000 f89f 	bl	8009f56 <abort>
 8009e18:	4b04      	ldr	r3, [pc, #16]	; (8009e2c <__assert_func+0x38>)
 8009e1a:	461c      	mov	r4, r3
 8009e1c:	e7f3      	b.n	8009e06 <__assert_func+0x12>
 8009e1e:	bf00      	nop
 8009e20:	2000000c 	.word	0x2000000c
 8009e24:	0800a575 	.word	0x0800a575
 8009e28:	0800a582 	.word	0x0800a582
 8009e2c:	0800a5b0 	.word	0x0800a5b0

08009e30 <_close_r>:
 8009e30:	b538      	push	{r3, r4, r5, lr}
 8009e32:	4d06      	ldr	r5, [pc, #24]	; (8009e4c <_close_r+0x1c>)
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	4608      	mov	r0, r1
 8009e3a:	602b      	str	r3, [r5, #0]
 8009e3c:	f7f8 f81e 	bl	8001e7c <_close>
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	d102      	bne.n	8009e4a <_close_r+0x1a>
 8009e44:	682b      	ldr	r3, [r5, #0]
 8009e46:	b103      	cbz	r3, 8009e4a <_close_r+0x1a>
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	bd38      	pop	{r3, r4, r5, pc}
 8009e4c:	200015b0 	.word	0x200015b0

08009e50 <fiprintf>:
 8009e50:	b40e      	push	{r1, r2, r3}
 8009e52:	b503      	push	{r0, r1, lr}
 8009e54:	4601      	mov	r1, r0
 8009e56:	ab03      	add	r3, sp, #12
 8009e58:	4805      	ldr	r0, [pc, #20]	; (8009e70 <fiprintf+0x20>)
 8009e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e5e:	6800      	ldr	r0, [r0, #0]
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	f7ff fe31 	bl	8009ac8 <_vfiprintf_r>
 8009e66:	b002      	add	sp, #8
 8009e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e6c:	b003      	add	sp, #12
 8009e6e:	4770      	bx	lr
 8009e70:	2000000c 	.word	0x2000000c

08009e74 <_fstat_r>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	4d07      	ldr	r5, [pc, #28]	; (8009e94 <_fstat_r+0x20>)
 8009e78:	2300      	movs	r3, #0
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	4608      	mov	r0, r1
 8009e7e:	4611      	mov	r1, r2
 8009e80:	602b      	str	r3, [r5, #0]
 8009e82:	f7f7 ffff 	bl	8001e84 <_fstat>
 8009e86:	1c43      	adds	r3, r0, #1
 8009e88:	d102      	bne.n	8009e90 <_fstat_r+0x1c>
 8009e8a:	682b      	ldr	r3, [r5, #0]
 8009e8c:	b103      	cbz	r3, 8009e90 <_fstat_r+0x1c>
 8009e8e:	6023      	str	r3, [r4, #0]
 8009e90:	bd38      	pop	{r3, r4, r5, pc}
 8009e92:	bf00      	nop
 8009e94:	200015b0 	.word	0x200015b0

08009e98 <_isatty_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d06      	ldr	r5, [pc, #24]	; (8009eb4 <_isatty_r+0x1c>)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	602b      	str	r3, [r5, #0]
 8009ea4:	f7f7 fff4 	bl	8001e90 <_isatty>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_isatty_r+0x1a>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_isatty_r+0x1a>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	200015b0 	.word	0x200015b0

08009eb8 <_lseek_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d07      	ldr	r5, [pc, #28]	; (8009ed8 <_lseek_r+0x20>)
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	602a      	str	r2, [r5, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f7f7 ffe4 	bl	8001e94 <_lseek>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_lseek_r+0x1e>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_lseek_r+0x1e>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	200015b0 	.word	0x200015b0

08009edc <__ascii_mbtowc>:
 8009edc:	b082      	sub	sp, #8
 8009ede:	b901      	cbnz	r1, 8009ee2 <__ascii_mbtowc+0x6>
 8009ee0:	a901      	add	r1, sp, #4
 8009ee2:	b142      	cbz	r2, 8009ef6 <__ascii_mbtowc+0x1a>
 8009ee4:	b14b      	cbz	r3, 8009efa <__ascii_mbtowc+0x1e>
 8009ee6:	7813      	ldrb	r3, [r2, #0]
 8009ee8:	600b      	str	r3, [r1, #0]
 8009eea:	7812      	ldrb	r2, [r2, #0]
 8009eec:	1e10      	subs	r0, r2, #0
 8009eee:	bf18      	it	ne
 8009ef0:	2001      	movne	r0, #1
 8009ef2:	b002      	add	sp, #8
 8009ef4:	4770      	bx	lr
 8009ef6:	4610      	mov	r0, r2
 8009ef8:	e7fb      	b.n	8009ef2 <__ascii_mbtowc+0x16>
 8009efa:	f06f 0001 	mvn.w	r0, #1
 8009efe:	e7f8      	b.n	8009ef2 <__ascii_mbtowc+0x16>

08009f00 <__malloc_lock>:
 8009f00:	4801      	ldr	r0, [pc, #4]	; (8009f08 <__malloc_lock+0x8>)
 8009f02:	f7ff b8c0 	b.w	8009086 <__retarget_lock_acquire_recursive>
 8009f06:	bf00      	nop
 8009f08:	200015a4 	.word	0x200015a4

08009f0c <__malloc_unlock>:
 8009f0c:	4801      	ldr	r0, [pc, #4]	; (8009f14 <__malloc_unlock+0x8>)
 8009f0e:	f7ff b8bb 	b.w	8009088 <__retarget_lock_release_recursive>
 8009f12:	bf00      	nop
 8009f14:	200015a4 	.word	0x200015a4

08009f18 <_read_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4d07      	ldr	r5, [pc, #28]	; (8009f38 <_read_r+0x20>)
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	4608      	mov	r0, r1
 8009f20:	4611      	mov	r1, r2
 8009f22:	2200      	movs	r2, #0
 8009f24:	602a      	str	r2, [r5, #0]
 8009f26:	461a      	mov	r2, r3
 8009f28:	f7f7 ff9a 	bl	8001e60 <_read>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d102      	bne.n	8009f36 <_read_r+0x1e>
 8009f30:	682b      	ldr	r3, [r5, #0]
 8009f32:	b103      	cbz	r3, 8009f36 <_read_r+0x1e>
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	bd38      	pop	{r3, r4, r5, pc}
 8009f38:	200015b0 	.word	0x200015b0

08009f3c <__ascii_wctomb>:
 8009f3c:	b149      	cbz	r1, 8009f52 <__ascii_wctomb+0x16>
 8009f3e:	2aff      	cmp	r2, #255	; 0xff
 8009f40:	bf85      	ittet	hi
 8009f42:	238a      	movhi	r3, #138	; 0x8a
 8009f44:	6003      	strhi	r3, [r0, #0]
 8009f46:	700a      	strbls	r2, [r1, #0]
 8009f48:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f4c:	bf98      	it	ls
 8009f4e:	2001      	movls	r0, #1
 8009f50:	4770      	bx	lr
 8009f52:	4608      	mov	r0, r1
 8009f54:	4770      	bx	lr

08009f56 <abort>:
 8009f56:	b508      	push	{r3, lr}
 8009f58:	2006      	movs	r0, #6
 8009f5a:	f000 f82b 	bl	8009fb4 <raise>
 8009f5e:	2001      	movs	r0, #1
 8009f60:	f7f7 ff78 	bl	8001e54 <_exit>

08009f64 <_raise_r>:
 8009f64:	291f      	cmp	r1, #31
 8009f66:	b538      	push	{r3, r4, r5, lr}
 8009f68:	4604      	mov	r4, r0
 8009f6a:	460d      	mov	r5, r1
 8009f6c:	d904      	bls.n	8009f78 <_raise_r+0x14>
 8009f6e:	2316      	movs	r3, #22
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	f04f 30ff 	mov.w	r0, #4294967295
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f7a:	b112      	cbz	r2, 8009f82 <_raise_r+0x1e>
 8009f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f80:	b94b      	cbnz	r3, 8009f96 <_raise_r+0x32>
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f830 	bl	8009fe8 <_getpid_r>
 8009f88:	462a      	mov	r2, r5
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f92:	f000 b817 	b.w	8009fc4 <_kill_r>
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d00a      	beq.n	8009fb0 <_raise_r+0x4c>
 8009f9a:	1c59      	adds	r1, r3, #1
 8009f9c:	d103      	bne.n	8009fa6 <_raise_r+0x42>
 8009f9e:	2316      	movs	r3, #22
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	e7e7      	b.n	8009f76 <_raise_r+0x12>
 8009fa6:	2400      	movs	r4, #0
 8009fa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fac:	4628      	mov	r0, r5
 8009fae:	4798      	blx	r3
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7e0      	b.n	8009f76 <_raise_r+0x12>

08009fb4 <raise>:
 8009fb4:	4b02      	ldr	r3, [pc, #8]	; (8009fc0 <raise+0xc>)
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	f7ff bfd3 	b.w	8009f64 <_raise_r>
 8009fbe:	bf00      	nop
 8009fc0:	2000000c 	.word	0x2000000c

08009fc4 <_kill_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d07      	ldr	r5, [pc, #28]	; (8009fe4 <_kill_r+0x20>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4604      	mov	r4, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	602b      	str	r3, [r5, #0]
 8009fd2:	f7f7 ff37 	bl	8001e44 <_kill>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d102      	bne.n	8009fe0 <_kill_r+0x1c>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	b103      	cbz	r3, 8009fe0 <_kill_r+0x1c>
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	bd38      	pop	{r3, r4, r5, pc}
 8009fe2:	bf00      	nop
 8009fe4:	200015b0 	.word	0x200015b0

08009fe8 <_getpid_r>:
 8009fe8:	f7f7 bf2a 	b.w	8001e40 <_getpid>

08009fec <_init>:
 8009fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fee:	bf00      	nop
 8009ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff2:	bc08      	pop	{r3}
 8009ff4:	469e      	mov	lr, r3
 8009ff6:	4770      	bx	lr

08009ff8 <_fini>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	bf00      	nop
 8009ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffe:	bc08      	pop	{r3}
 800a000:	469e      	mov	lr, r3
 800a002:	4770      	bx	lr
