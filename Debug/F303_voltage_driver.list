
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009654  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  080097e8  080097e8  000197e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eac  08009eac  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08009eac  08009eac  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009eac  08009eac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009eb0  08009eb0  00019eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000013bc  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000159c  2000159c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022579  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044fc  00000000  00000000  00042785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00019bd7  00000000  00000000  00046c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001078  00000000  00000000  00060858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000027b8  00000000  00000000  000618d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e1a9  00000000  00000000  00064088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005fd5  00000000  00000000  00082231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00088206  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bc8  00000000  00000000  00088258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097cc 	.word	0x080097cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080097cc 	.word	0x080097cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b500      	push	{lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c8a:	482d      	ldr	r0, [pc, #180]	; (8000d40 <MX_ADC1_Init+0xb8>)
 8000c8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c90:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
{
 8000c96:	b08b      	sub	sp, #44	; 0x2c
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c98:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c9a:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 8000c9c:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c9e:	6102      	str	r2, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ca0:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca4:	2204      	movs	r2, #4
  ADC_MultiModeTypeDef multimode = {0};
 8000ca6:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000cae:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000cb2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000cb6:	9309      	str	r3, [sp, #36]	; 0x24
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb8:	6083      	str	r3, [r0, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cba:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cbe:	60c3      	str	r3, [r0, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc0:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cc2:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
  hadc1.Init.NbrOfConversion = 2;
 8000cc8:	2302      	movs	r3, #2
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cca:	8302      	strh	r2, [r0, #24]
  hadc1.Init.NbrOfConversion = 2;
 8000ccc:	61c3      	str	r3, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd6:	f001 fc51 	bl	800257c <HAL_ADC_Init>
 8000cda:	bb18      	cbnz	r0, 8000d24 <MX_ADC1_Init+0x9c>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cdc:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cde:	4818      	ldr	r0, [pc, #96]	; (8000d40 <MX_ADC1_Init+0xb8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce0:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce2:	a901      	add	r1, sp, #4
 8000ce4:	f002 f84c 	bl	8002d80 <HAL_ADCEx_MultiModeConfigChannel>
 8000ce8:	bb38      	cbnz	r0, 8000d3a <MX_ADC1_Init+0xb2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cea:	2201      	movs	r2, #1
 8000cec:	2301      	movs	r3, #1
 8000cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfa:	4811      	ldr	r0, [pc, #68]	; (8000d40 <MX_ADC1_Init+0xb8>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_1;
 8000d02:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d06:	f001 fe71 	bl	80029ec <HAL_ADC_ConfigChannel>
 8000d0a:	b998      	cbnz	r0, 8000d34 <MX_ADC1_Init+0xac>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	2302      	movs	r3, #2
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d10:	480b      	ldr	r0, [pc, #44]	; (8000d40 <MX_ADC1_Init+0xb8>)
 8000d12:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_4;
 8000d14:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	f001 fe68 	bl	80029ec <HAL_ADC_ConfigChannel>
 8000d1c:	b928      	cbnz	r0, 8000d2a <MX_ADC1_Init+0xa2>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d1e:	b00b      	add	sp, #44	; 0x2c
 8000d20:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d24:	f000 fe58 	bl	80019d8 <Error_Handler>
 8000d28:	e7d8      	b.n	8000cdc <MX_ADC1_Init+0x54>
    Error_Handler();
 8000d2a:	f000 fe55 	bl	80019d8 <Error_Handler>
}
 8000d2e:	b00b      	add	sp, #44	; 0x2c
 8000d30:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d34:	f000 fe50 	bl	80019d8 <Error_Handler>
 8000d38:	e7e8      	b.n	8000d0c <MX_ADC1_Init+0x84>
    Error_Handler();
 8000d3a:	f000 fe4d 	bl	80019d8 <Error_Handler>
 8000d3e:	e7d4      	b.n	8000cea <MX_ADC1_Init+0x62>
 8000d40:	20000200 	.word	0x20000200
 8000d44:	00000000 	.word	0x00000000

08000d48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d48:	b500      	push	{lr}
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8000dc8 <MX_ADC2_Init+0x80>
  hadc2.Instance = ADC2;
 8000d4e:	4822      	ldr	r0, [pc, #136]	; (8000dd8 <MX_ADC2_Init+0x90>)
 8000d50:	4922      	ldr	r1, [pc, #136]	; (8000ddc <MX_ADC2_Init+0x94>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d52:	2300      	movs	r3, #0
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
{
 8000d58:	b087      	sub	sp, #28
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d5a:	e9c0 1200 	strd	r1, r2, [r0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5e:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
 8000d62:	2101      	movs	r1, #1
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d64:	2204      	movs	r2, #4
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d66:	8303      	strh	r3, [r0, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d68:	e9cd 3300 	strd	r3, r3, [sp]
 8000d6c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000d70:	e9cd 3304 	strd	r3, r3, [sp, #16]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d74:	6083      	str	r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d76:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d78:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d7c:	60c3      	str	r3, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d7e:	61c1      	str	r1, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d80:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d84:	6142      	str	r2, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d86:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d88:	f001 fbf8 	bl	800257c <HAL_ADC_Init>
 8000d8c:	b988      	cbnz	r0, 8000db2 <MX_ADC2_Init+0x6a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d8e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8000dd0 <MX_ADC2_Init+0x88>
 8000d92:	2200      	movs	r2, #0
 8000d94:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <MX_ADC2_Init+0x90>)
 8000d98:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_1;
 8000d9a:	ed8d 7b00 	vstr	d7, [sp]
 8000d9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000da2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000da6:	f001 fe21 	bl	80029ec <HAL_ADC_ConfigChannel>
 8000daa:	b928      	cbnz	r0, 8000db8 <MX_ADC2_Init+0x70>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dac:	b007      	add	sp, #28
 8000dae:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000db2:	f000 fe11 	bl	80019d8 <Error_Handler>
 8000db6:	e7ea      	b.n	8000d8e <MX_ADC2_Init+0x46>
    Error_Handler();
 8000db8:	f000 fe0e 	bl	80019d8 <Error_Handler>
}
 8000dbc:	b007      	add	sp, #28
 8000dbe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dc2:	bf00      	nop
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	00000001 	.word	0x00000001
 8000dcc:	00000000 	.word	0x00000000
 8000dd0:	00000001 	.word	0x00000001
 8000dd4:	00000001 	.word	0x00000001
 8000dd8:	20000250 	.word	0x20000250
 8000ddc:	50000100 	.word	0x50000100

08000de0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000de0:	b500      	push	{lr}

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000de2:	4825      	ldr	r0, [pc, #148]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000de4:	4a25      	ldr	r2, [pc, #148]	; (8000e7c <MX_ADC3_Init+0x9c>)
{
 8000de6:	b08b      	sub	sp, #44	; 0x2c
  ADC_MultiModeTypeDef multimode = {0};
 8000de8:	2300      	movs	r3, #0
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dea:	e9c0 2300 	strd	r2, r3, [r0]
  ADC_MultiModeTypeDef multimode = {0};
 8000dee:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000df6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000dfa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8000dfe:	9309      	str	r3, [sp, #36]	; 0x24
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e00:	6083      	str	r3, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e02:	6103      	str	r3, [r0, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e04:	f880 3020 	strb.w	r3, [r0, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e08:	60c3      	str	r3, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e0a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e0e:	8303      	strh	r3, [r0, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e10:	6343      	str	r3, [r0, #52]	; 0x34
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e12:	2201      	movs	r2, #1
 8000e14:	2300      	movs	r3, #0
 8000e16:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc3.Init.NbrOfConversion = 1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61c3      	str	r3, [r0, #28]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	6143      	str	r3, [r0, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e22:	f001 fbab 	bl	800257c <HAL_ADC_Init>
 8000e26:	b9c0      	cbnz	r0, 8000e5a <MX_ADC3_Init+0x7a>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e28:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000e2a:	4813      	ldr	r0, [pc, #76]	; (8000e78 <MX_ADC3_Init+0x98>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e2c:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000e2e:	a901      	add	r1, sp, #4
 8000e30:	f001 ffa6 	bl	8002d80 <HAL_ADCEx_MultiModeConfigChannel>
 8000e34:	b9c8      	cbnz	r0, 8000e6a <MX_ADC3_Init+0x8a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e36:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8000e70 <MX_ADC3_Init+0x90>
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e40:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_5;
 8000e42:	ed8d 7b04 	vstr	d7, [sp, #16]
 8000e46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000e4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e4e:	f001 fdcd 	bl	80029ec <HAL_ADC_ConfigChannel>
 8000e52:	b928      	cbnz	r0, 8000e60 <MX_ADC3_Init+0x80>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e54:	b00b      	add	sp, #44	; 0x2c
 8000e56:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e5a:	f000 fdbd 	bl	80019d8 <Error_Handler>
 8000e5e:	e7e3      	b.n	8000e28 <MX_ADC3_Init+0x48>
    Error_Handler();
 8000e60:	f000 fdba 	bl	80019d8 <Error_Handler>
}
 8000e64:	b00b      	add	sp, #44	; 0x2c
 8000e66:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e6a:	f000 fdb5 	bl	80019d8 <Error_Handler>
 8000e6e:	e7e2      	b.n	8000e36 <MX_ADC3_Init+0x56>
 8000e70:	00000005 	.word	0x00000005
 8000e74:	00000001 	.word	0x00000001
 8000e78:	200002a0 	.word	0x200002a0
 8000e7c:	50000400 	.word	0x50000400

08000e80 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e80:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000e82:	6802      	ldr	r2, [r0, #0]
{
 8000e84:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8000e88:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000e90:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000e94:	930a      	str	r3, [sp, #40]	; 0x28
  if(adcHandle->Instance==ADC1)
 8000e96:	d022      	beq.n	8000ede <HAL_ADC_MspInit+0x5e>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000e98:	4b47      	ldr	r3, [pc, #284]	; (8000fb8 <HAL_ADC_MspInit+0x138>)
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d004      	beq.n	8000ea8 <HAL_ADC_MspInit+0x28>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000e9e:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <HAL_ADC_MspInit+0x13c>)
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d068      	beq.n	8000f76 <HAL_ADC_MspInit+0xf6>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ea4:	b00d      	add	sp, #52	; 0x34
 8000ea6:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ea8:	4a45      	ldr	r2, [pc, #276]	; (8000fc0 <HAL_ADC_MspInit+0x140>)
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eae:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eb2:	d052      	beq.n	8000f5a <HAL_ADC_MspInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_ADC_MspInit+0x144>)
 8000eb6:	695a      	ldr	r2, [r3, #20]
 8000eb8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ec6:	2410      	movs	r4, #16
 8000ec8:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	a906      	add	r1, sp, #24
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ed0:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed6:	f002 fcdf 	bl	8003898 <HAL_GPIO_Init>
}
 8000eda:	b00d      	add	sp, #52	; 0x34
 8000edc:	bd30      	pop	{r4, r5, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ede:	4a38      	ldr	r2, [pc, #224]	; (8000fc0 <HAL_ADC_MspInit+0x140>)
 8000ee0:	6813      	ldr	r3, [r2, #0]
 8000ee2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	4604      	mov	r4, r0
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ee8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eea:	d02b      	beq.n	8000f44 <HAL_ADC_MspInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_ADC_MspInit+0x144>)
    hdma_adc1.Instance = DMA1_Channel1;
 8000eee:	4d36      	ldr	r5, [pc, #216]	; (8000fc8 <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000f00:	2209      	movs	r2, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	a906      	add	r1, sp, #24
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f002 fcc2 	bl	8003898 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000f14:	492d      	ldr	r1, [pc, #180]	; (8000fcc <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f16:	2300      	movs	r3, #0
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f18:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1a:	e9c5 1300 	strd	r1, r3, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f1e:	e9c5 3202 	strd	r3, r2, [r5, #8]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2a:	e9c5 1204 	strd	r1, r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f2e:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f30:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f36:	f002 fb9b 	bl	8003670 <HAL_DMA_Init>
 8000f3a:	b9c8      	cbnz	r0, 8000f70 <HAL_ADC_MspInit+0xf0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f3c:	63a5      	str	r5, [r4, #56]	; 0x38
 8000f3e:	626c      	str	r4, [r5, #36]	; 0x24
}
 8000f40:	b00d      	add	sp, #52	; 0x34
 8000f42:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <HAL_ADC_MspInit+0x144>)
 8000f46:	695a      	ldr	r2, [r3, #20]
 8000f48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f4c:	615a      	str	r2, [r3, #20]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	9b00      	ldr	r3, [sp, #0]
 8000f58:	e7c8      	b.n	8000eec <HAL_ADC_MspInit+0x6c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <HAL_ADC_MspInit+0x144>)
 8000f5c:	695a      	ldr	r2, [r3, #20]
 8000f5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	9b02      	ldr	r3, [sp, #8]
 8000f6e:	e7a1      	b.n	8000eb4 <HAL_ADC_MspInit+0x34>
      Error_Handler();
 8000f70:	f000 fd32 	bl	80019d8 <Error_Handler>
 8000f74:	e7e2      	b.n	8000f3c <HAL_ADC_MspInit+0xbc>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000f76:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8000f7a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f7e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000f82:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000f86:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000f92:	9204      	str	r2, [sp, #16]
 8000f94:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fa4:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000faa:	e9cd 4506 	strd	r4, r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fae:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f002 fc72 	bl	8003898 <HAL_GPIO_Init>
}
 8000fb4:	e776      	b.n	8000ea4 <HAL_ADC_MspInit+0x24>
 8000fb6:	bf00      	nop
 8000fb8:	50000100 	.word	0x50000100
 8000fbc:	50000400 	.word	0x50000400
 8000fc0:	200001fc 	.word	0x200001fc
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	200002f0 	.word	0x200002f0
 8000fcc:	40020008 	.word	0x40020008
 8000fd0:	48000400 	.word	0x48000400

08000fd4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000fd4:	b510      	push	{r4, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000fd6:	480c      	ldr	r0, [pc, #48]	; (8001008 <MX_CAN_Init+0x34>)
 8000fd8:	4c0c      	ldr	r4, [pc, #48]	; (800100c <MX_CAN_Init+0x38>)
  hcan.Init.Prescaler = 3;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000fda:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 3;
 8000fdc:	2203      	movs	r2, #3
 8000fde:	e9c0 4200 	strd	r4, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000fe2:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000fe6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000fea:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000fec:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fee:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000ff2:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ff6:	f001 ff57 	bl	8002ea8 <HAL_CAN_Init>
 8000ffa:	b900      	cbnz	r0, 8000ffe <MX_CAN_Init+0x2a>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ffc:	bd10      	pop	{r4, pc}
 8000ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001002:	f000 bce9 	b.w	80019d8 <Error_Handler>
 8001006:	bf00      	nop
 8001008:	20000334 	.word	0x20000334
 800100c:	40006400 	.word	0x40006400

08001010 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001010:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_CAN_MspInit+0xa4>)
 8001014:	6802      	ldr	r2, [r0, #0]
{
 8001016:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 800101a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001020:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001024:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN)
 8001026:	d001      	beq.n	800102c <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001028:	b009      	add	sp, #36	; 0x24
 800102a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 800102c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001032:	69da      	ldr	r2, [r3, #28]
 8001034:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001038:	61da      	str	r2, [r3, #28]
 800103a:	69da      	ldr	r2, [r3, #28]
 800103c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001040:	9200      	str	r2, [sp, #0]
 8001042:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001054:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001058:	2302      	movs	r3, #2
 800105a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001062:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001064:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001066:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f002 fc14 	bl	8003898 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8001070:	4622      	mov	r2, r4
 8001072:	4621      	mov	r1, r4
 8001074:	2013      	movs	r0, #19
 8001076:	f002 fa95 	bl	80035a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 800107a:	2013      	movs	r0, #19
 800107c:	f002 fad0 	bl	8003620 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001080:	4622      	mov	r2, r4
 8001082:	4621      	mov	r1, r4
 8001084:	2014      	movs	r0, #20
 8001086:	f002 fa8d 	bl	80035a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800108a:	2014      	movs	r0, #20
 800108c:	f002 fac8 	bl	8003620 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 8001090:	4622      	mov	r2, r4
 8001092:	2101      	movs	r1, #1
 8001094:	2015      	movs	r0, #21
 8001096:	f002 fa85 	bl	80035a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800109a:	2015      	movs	r0, #21
 800109c:	f002 fac0 	bl	8003620 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 80010a0:	4622      	mov	r2, r4
 80010a2:	2101      	movs	r1, #1
 80010a4:	2016      	movs	r0, #22
 80010a6:	f002 fa7d 	bl	80035a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80010aa:	2016      	movs	r0, #22
 80010ac:	f002 fab8 	bl	8003620 <HAL_NVIC_EnableIRQ>
}
 80010b0:	b009      	add	sp, #36	; 0x24
 80010b2:	bd30      	pop	{r4, r5, pc}
 80010b4:	40006400 	.word	0x40006400

080010b8 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(uint16_t board_addr)
{
 80010b8:	b530      	push	{r4, r5, lr}
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
  sFilterConfig.FilterBank = 0;
  sFilterConfig.FilterIdHigh = (0x100 + board_addr) << 5;
 80010ba:	f500 7480 	add.w	r4, r0, #256	; 0x100
{
 80010be:	b08b      	sub	sp, #44	; 0x2c
  sFilterConfig.FilterIdLow = (0x300 + board_addr) << 5;
 80010c0:	f500 7040 	add.w	r0, r0, #768	; 0x300
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80010c4:	2101      	movs	r1, #1
  sFilterConfig.FilterIdLow = (0x300 + board_addr) << 5;
 80010c6:	0143      	lsls	r3, r0, #5
  sFilterConfig.FilterIdHigh = (0x100 + board_addr) << 5;
 80010c8:	0164      	lsls	r4, r4, #5
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80010ca:	2200      	movs	r2, #0
  sFilterConfig.FilterIdLow = (0x300 + board_addr) << 5;
 80010cc:	e9cd 4300 	strd	r4, r3, [sp]
  sFilterConfig.FilterMaskIdHigh = 0x010 << 5;
 80010d0:	f44f 7500 	mov.w	r5, #512	; 0x200
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80010d4:	9106      	str	r1, [sp, #24]
  sFilterConfig.FilterMaskIdLow = 0x110 << 5;
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;
 80010d6:	9108      	str	r1, [sp, #32]
  sFilterConfig.FilterMaskIdLow = 0x110 << 5;
 80010d8:	f44f 5308 	mov.w	r3, #8704	; 0x2200
  sFilterConfig.SlaveStartFilterBank = 0;
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80010dc:	480e      	ldr	r0, [pc, #56]	; (8001118 <CAN_Filter_Init+0x60>)
  sFilterConfig.FilterMaskIdHigh = 0x010 << 5;
 80010de:	9502      	str	r5, [sp, #8]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80010e0:	4669      	mov	r1, sp
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80010e2:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80010e6:	9207      	str	r2, [sp, #28]
  sFilterConfig.FilterBank = 0;
 80010e8:	9205      	str	r2, [sp, #20]
  sFilterConfig.SlaveStartFilterBank = 0;
 80010ea:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80010ec:	f001 ff5c 	bl	8002fa8 <HAL_CAN_ConfigFilter>
 80010f0:	b930      	cbnz	r0, 8001100 <CAN_Filter_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <CAN_Filter_Init+0x60>)
 80010f4:	2102      	movs	r1, #2
 80010f6:	f002 f8ef 	bl	80032d8 <HAL_CAN_ActivateNotification>
 80010fa:	b948      	cbnz	r0, 8001110 <CAN_Filter_Init+0x58>
  {
    Error_Handler();
  }
}
 80010fc:	b00b      	add	sp, #44	; 0x2c
 80010fe:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001100:	f000 fc6a 	bl	80019d8 <Error_Handler>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <CAN_Filter_Init+0x60>)
 8001106:	2102      	movs	r1, #2
 8001108:	f002 f8e6 	bl	80032d8 <HAL_CAN_ActivateNotification>
 800110c:	2800      	cmp	r0, #0
 800110e:	d0f5      	beq.n	80010fc <CAN_Filter_Init+0x44>
    Error_Handler();
 8001110:	f000 fc62 	bl	80019d8 <Error_Handler>
}
 8001114:	b00b      	add	sp, #44	; 0x2c
 8001116:	bd30      	pop	{r4, r5, pc}
 8001118:	20000334 	.word	0x20000334

0800111c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <MX_DMA_Init+0x30>)
{
 800111e:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001120:	6959      	ldr	r1, [r3, #20]
 8001122:	f041 0101 	orr.w	r1, r1, #1
 8001126:	6159      	str	r1, [r3, #20]
 8001128:	695b      	ldr	r3, [r3, #20]
{
 800112a:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001134:	200b      	movs	r0, #11
 8001136:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001138:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800113a:	f002 fa33 	bl	80035a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800113e:	200b      	movs	r0, #11

}
 8001140:	b003      	add	sp, #12
 8001142:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001146:	f002 ba6b 	b.w	8003620 <HAL_NVIC_EnableIRQ>
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001150:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	2400      	movs	r4, #0
{
 8001156:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800115c:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <MX_GPIO_Init+0xc4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001166:	4d2c      	ldr	r5, [pc, #176]	; (8001218 <MX_GPIO_Init+0xc8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001168:	4e2c      	ldr	r6, [pc, #176]	; (800121c <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800116e:	615a      	str	r2, [r3, #20]
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117a:	695a      	ldr	r2, [r3, #20]
 800117c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001188:	9201      	str	r2, [sp, #4]
 800118a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001192:	615a      	str	r2, [r3, #20]
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800119a:	9202      	str	r2, [sp, #8]
 800119c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011a4:	615a      	str	r2, [r3, #20]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ac:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011ae:	4622      	mov	r2, r4
 80011b0:	4628      	mov	r0, r5
 80011b2:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011b8:	f002 fc5e 	bl	8003a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80011bc:	4622      	mov	r2, r4
 80011be:	4630      	mov	r0, r6
 80011c0:	21c0      	movs	r1, #192	; 0xc0
 80011c2:	f002 fc59 	bl	8003a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011c6:	f04f 0800 	mov.w	r8, #0
 80011ca:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80011ce:	2301      	movs	r3, #1
 80011d0:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d4:	a904      	add	r1, sp, #16
 80011d6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011dc:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f002 fb5a 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e4:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	4628      	mov	r0, r5
 80011e8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011ec:	220f      	movs	r2, #15
 80011ee:	2300      	movs	r3, #0
 80011f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f002 fb50 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f8:	22c0      	movs	r2, #192	; 0xc0
 80011fa:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	a904      	add	r1, sp, #16
 80011fe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001200:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001204:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f002 fb46 	bl	8003898 <HAL_GPIO_Init>

}
 800120c:	b00a      	add	sp, #40	; 0x28
 800120e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	48000800 	.word	0x48000800
 800121c:	48000400 	.word	0x48000400

08001220 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int f getc(FILE *f)
#endif

void __io_putchar(uint8_t ch)
{
 8001220:	b500      	push	{lr}
	HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001222:	2301      	movs	r3, #1
{
 8001224:	b083      	sub	sp, #12
 8001226:	4684      	mov	ip, r0
	HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001228:	461a      	mov	r2, r3
 800122a:	f10d 0107 	add.w	r1, sp, #7
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <__io_putchar+0x20>)
{
 8001230:	f88d c007 	strb.w	ip, [sp, #7]
	HAL_UART_Transmit(&huart1, &ch, 1, 1);
 8001234:	f004 fb82 	bl	800593c <HAL_UART_Transmit>
}
 8001238:	b003      	add	sp, #12
 800123a:	f85d fb04 	ldr.w	pc, [sp], #4
 800123e:	bf00      	nop
 8001240:	20001504 	.word	0x20001504

08001244 <HAL_UART_RxCpltCallback>:
uint8_t uart_rx_buf[10] = {0};
bool uart_rx_flag = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uart_rx_flag = true;
 8001244:	4b01      	ldr	r3, [pc, #4]	; (800124c <HAL_UART_RxCpltCallback+0x8>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	4770      	bx	lr
 800124c:	200003f2 	.word	0x200003f2

08001250 <HAL_TIM_PeriodElapsedCallback>:
	print_mapped = rad_mapped;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
}
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001250:	b538      	push	{r3, r4, r5, lr}
	static uint32_t speed_calc_cycle = 0;
	static int32_t pre_diff_cnt = 0, diff_accel;
	if (htim == &htim8)
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001254:	4283      	cmp	r3, r0
 8001256:	d000      	beq.n	800125a <HAL_TIM_PeriodElapsedCallback+0xa>
			{
				diff_accel_min = diff_accel;
			}
		}
	}
}
 8001258:	bd38      	pop	{r3, r4, r5, pc}
		setOutputRadianTIM8(getRadianM702_M0() + offset_radian, output_voltage,24);
 800125a:	4d27      	ldr	r5, [pc, #156]	; (80012f8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800125c:	4c27      	ldr	r4, [pc, #156]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0xac>)
		updateMA702_M0();
 800125e:	f000 fc23 	bl	8001aa8 <updateMA702_M0>
		setOutputRadianTIM8(getRadianM702_M0() + offset_radian, output_voltage,24);
 8001262:	f000 fc6b 	bl	8001b3c <getRadianM702_M0>
 8001266:	edd5 7a00 	vldr	s15, [r5]
 800126a:	edd4 0a00 	vldr	s1, [r4]
 800126e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001272:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8001276:	f000 ff93 	bl	80021a0 <setOutputRadianTIM8>
		setOutputRadianTIM1(getRadianM702_M0() + offset_radian, output_voltage,24);
 800127a:	f000 fc5f 	bl	8001b3c <getRadianM702_M0>
 800127e:	edd5 7a00 	vldr	s15, [r5]
 8001282:	edd4 0a00 	vldr	s1, [r4]
 8001286:	ee30 0a27 	vadd.f32	s0, s0, s15
 800128a:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 800128e:	f000 ff23 	bl	80020d8 <setOutputRadianTIM1>
		speed_calc_cycle++;
 8001292:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	3301      	adds	r3, #1
		if (speed_calc_cycle >= 200)
 8001298:	2bc7      	cmp	r3, #199	; 0xc7
 800129a:	d922      	bls.n	80012e2 <HAL_TIM_PeriodElapsedCallback+0x92>
			int temp_diff_cnt = enc_raw - pre_enc_raw;
 800129c:	4919      	ldr	r1, [pc, #100]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800129e:	481a      	ldr	r0, [pc, #104]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80012a0:	680b      	ldr	r3, [r1, #0]
 80012a2:	8800      	ldrh	r0, [r0, #0]
			pre_enc_raw = enc_raw;
 80012a4:	6008      	str	r0, [r1, #0]
			speed_calc_cycle = 0;
 80012a6:	2400      	movs	r4, #0
			int temp_diff_cnt = enc_raw - pre_enc_raw;
 80012a8:	1ac3      	subs	r3, r0, r3
			speed_calc_cycle = 0;
 80012aa:	6014      	str	r4, [r2, #0]
			if (temp_diff_cnt > 30000)
 80012ac:	f247 5230 	movw	r2, #30000	; 0x7530
 80012b0:	4293      	cmp	r3, r2
 80012b2:	dc18      	bgt.n	80012e6 <HAL_TIM_PeriodElapsedCallback+0x96>
			else if (temp_diff_cnt < -30000)
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80012b6:	4293      	cmp	r3, r2
				diff_cnt = temp_diff_cnt + 65535;
 80012b8:	bfb8      	it	lt
 80012ba:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012c0:	bfb8      	it	lt
 80012c2:	33ff      	addlt	r3, #255	; 0xff
				diff_cnt = temp_diff_cnt;
 80012c4:	6013      	str	r3, [r2, #0]
			diff_accel = diff_cnt - pre_diff_cnt;
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0xc4>)
			if (diff_accel > diff_accel_max)
 80012c8:	4913      	ldr	r1, [pc, #76]	; (8001318 <HAL_TIM_PeriodElapsedCallback+0xc8>)
			diff_accel = diff_cnt - pre_diff_cnt;
 80012ca:	6814      	ldr	r4, [r2, #0]
			if (diff_accel > diff_accel_max)
 80012cc:	6808      	ldr	r0, [r1, #0]
			pre_diff_cnt = 0;
 80012ce:	2500      	movs	r5, #0
			diff_accel = diff_cnt - pre_diff_cnt;
 80012d0:	1b1b      	subs	r3, r3, r4
			pre_diff_cnt = 0;
 80012d2:	6015      	str	r5, [r2, #0]
			if (diff_accel < diff_accel_min)
 80012d4:	4a11      	ldr	r2, [pc, #68]	; (800131c <HAL_TIM_PeriodElapsedCallback+0xcc>)
			if (diff_accel > diff_accel_max)
 80012d6:	4283      	cmp	r3, r0
				diff_accel_max = diff_accel;
 80012d8:	bfc8      	it	gt
 80012da:	600b      	strgt	r3, [r1, #0]
			if (diff_accel < diff_accel_min)
 80012dc:	6811      	ldr	r1, [r2, #0]
 80012de:	428b      	cmp	r3, r1
 80012e0:	daba      	bge.n	8001258 <HAL_TIM_PeriodElapsedCallback+0x8>
				diff_accel_min = diff_accel;
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bd38      	pop	{r3, r4, r5, pc}
				diff_cnt = temp_diff_cnt - 65535;
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80012e8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80012ec:	3bff      	subs	r3, #255	; 0xff
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	e7e9      	b.n	80012c6 <HAL_TIM_PeriodElapsedCallback+0x76>
 80012f2:	bf00      	nop
 80012f4:	200004b8 	.word	0x200004b8
 80012f8:	200003d4 	.word	0x200003d4
 80012fc:	200003d8 	.word	0x200003d8
 8001300:	200003e4 	.word	0x200003e4
 8001304:	200003e0 	.word	0x200003e0
 8001308:	200003bc 	.word	0x200003bc
 800130c:	ffff8ad0 	.word	0xffff8ad0
 8001310:	200003b8 	.word	0x200003b8
 8001314:	200003dc 	.word	0x200003dc
 8001318:	200003b0 	.word	0x200003b0
 800131c:	200003b4 	.word	0x200003b4

08001320 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t can_rx_cnt = 0;
uint8_t can_rx_data[8];
CAN_RxHeaderTypeDef   can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001320:	b508      	push	{r3, lr}
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data) != HAL_OK)
 8001322:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001326:	2100      	movs	r1, #0
 8001328:	f001 ff4c 	bl	80031c4 <HAL_CAN_GetRxMessage>
 800132c:	b108      	cbz	r0, 8001332 <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800132e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001330:	e7fe      	b.n	8001330 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
	can_rx_cnt++;
 8001332:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001334:	6813      	ldr	r3, [r2, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	6013      	str	r3, [r2, #0]
}
 800133a:	bd08      	pop	{r3, pc}
 800133c:	20000394 	.word	0x20000394
 8001340:	2000038c 	.word	0x2000038c
 8001344:	20000388 	.word	0x20000388

08001348 <runMode>:
{
 8001348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134c:	ed2d 8b02 	vpush	{d8}
	if (offset_radian > M_PI * 2)
 8001350:	4d73      	ldr	r5, [pc, #460]	; (8001520 <runMode+0x1d8>)
{
 8001352:	b08a      	sub	sp, #40	; 0x28
	if (offset_radian > M_PI * 2)
 8001354:	6828      	ldr	r0, [r5, #0]
 8001356:	f7ff f8f7 	bl	8000548 <__aeabi_f2d>
 800135a:	a36b      	add	r3, pc, #428	; (adr r3, 8001508 <runMode+0x1c0>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff fbda 	bl	8000b18 <__aeabi_dcmpgt>
 8001364:	b108      	cbz	r0, 800136a <runMode+0x22>
		offset_radian = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	602b      	str	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 800136a:	486e      	ldr	r0, [pc, #440]	; (8001524 <runMode+0x1dc>)
		output_voltage = 2.0;
 800136c:	4c6e      	ldr	r4, [pc, #440]	; (8001528 <runMode+0x1e0>)
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 800136e:	2101      	movs	r1, #1
 8001370:	f002 fb7c 	bl	8003a6c <HAL_GPIO_ReadPin>
 8001374:	b910      	cbnz	r0, 800137c <runMode+0x34>
		output_voltage = 2.0;
 8001376:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800137a:	6023      	str	r3, [r4, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 800137c:	4869      	ldr	r0, [pc, #420]	; (8001524 <runMode+0x1dc>)
 800137e:	2102      	movs	r1, #2
 8001380:	f002 fb74 	bl	8003a6c <HAL_GPIO_ReadPin>
 8001384:	b910      	cbnz	r0, 800138c <runMode+0x44>
		output_voltage = -2.0;
 8001386:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800138a:	6023      	str	r3, [r4, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 800138c:	4865      	ldr	r0, [pc, #404]	; (8001524 <runMode+0x1dc>)
 800138e:	2104      	movs	r1, #4
 8001390:	f002 fb6c 	bl	8003a6c <HAL_GPIO_ReadPin>
 8001394:	2800      	cmp	r0, #0
 8001396:	f040 8087 	bne.w	80014a8 <runMode+0x160>
		motor_accel = 0;
 800139a:	4e64      	ldr	r6, [pc, #400]	; (800152c <runMode+0x1e4>)
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 800139c:	4861      	ldr	r0, [pc, #388]	; (8001524 <runMode+0x1dc>)
		motor_accel = 0;
 800139e:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80013a0:	2108      	movs	r1, #8
		output_voltage = 0;
 80013a2:	6023      	str	r3, [r4, #0]
		motor_accel = 0;
 80013a4:	6033      	str	r3, [r6, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80013a6:	f002 fb61 	bl	8003a6c <HAL_GPIO_ReadPin>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	f000 80a3 	beq.w	80014f6 <runMode+0x1ae>
	if (output_voltage > 0)
 80013b0:	edd4 7a00 	vldr	s15, [r4]
		offset_radian = 2.4 + user_offet_radian;
 80013b4:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <runMode+0x1e8>)
	if (output_voltage > 0)
 80013b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		offset_radian = 2.4 + user_offet_radian;
 80013be:	6818      	ldr	r0, [r3, #0]
	if (output_voltage > 0)
 80013c0:	dd08      	ble.n	80013d4 <runMode+0x8c>
		offset_radian = 2.4 + user_offet_radian;
 80013c2:	f7ff f8c1 	bl	8000548 <__aeabi_f2d>
 80013c6:	a352      	add	r3, pc, #328	; (adr r3, 8001510 <runMode+0x1c8>)
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	f7fe ff5e 	bl	800028c <__adddf3>
 80013d0:	f7ff fc0a 	bl	8000be8 <__aeabi_d2f>
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 80013d4:	4b57      	ldr	r3, [pc, #348]	; (8001534 <runMode+0x1ec>)
 80013d6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001538 <runMode+0x1f0>
 80013da:	ed93 8a00 	vldr	s16, [r3]
	if (max_speed_p < spd_rps)
 80013de:	4b57      	ldr	r3, [pc, #348]	; (800153c <runMode+0x1f4>)
 80013e0:	6028      	str	r0, [r5, #0]
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 80013e2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	if (max_speed_p < spd_rps)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 80013ea:	ee28 8a07 	vmul.f32	s16, s16, s14
	if (max_speed_p < spd_rps)
 80013ee:	eef4 7ac8 	vcmpe.f32	s15, s16
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	d44b      	bmi.n	8001490 <runMode+0x148>
	if (max_speed_m > spd_rps)
 80013f8:	4a51      	ldr	r2, [pc, #324]	; (8001540 <runMode+0x1f8>)
 80013fa:	edd2 7a00 	vldr	s15, [r2]
 80013fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d505      	bpl.n	8001414 <runMode+0xcc>
		max_speed_m = spd_rps;
 8001408:	ed82 8a00 	vstr	s16, [r2]
		max_offset_m = offset_radian;
 800140c:	4a4d      	ldr	r2, [pc, #308]	; (8001544 <runMode+0x1fc>)
 800140e:	6010      	str	r0, [r2, #0]
		max_speed_p = 0;
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
	printf("%8d %8d ",adc_raw_array[0],adc_raw_array[1]);
 8001414:	4b4c      	ldr	r3, [pc, #304]	; (8001548 <runMode+0x200>)
 8001416:	484d      	ldr	r0, [pc, #308]	; (800154c <runMode+0x204>)
 8001418:	885a      	ldrh	r2, [r3, #2]
 800141a:	8819      	ldrh	r1, [r3, #0]
	printf("raw %+6.3f max %+8d min %+8d rps = %+7.3f offset %4.3f, voltage %+6.3f, rx %8ld \n", getRadianM702_M0(), diff_accel_max, diff_accel_min, spd_rps, offset_radian, output_voltage * 2.7,can_rx_cnt);
 800141c:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8001570 <runMode+0x228>
	printf("%8d %8d ",adc_raw_array[0],adc_raw_array[1]);
 8001420:	f006 f89c 	bl	800755c <iprintf>
	printf("raw %+6.3f max %+8d min %+8d rps = %+7.3f offset %4.3f, voltage %+6.3f, rx %8ld \n", getRadianM702_M0(), diff_accel_max, diff_accel_min, spd_rps, offset_radian, output_voltage * 2.7,can_rx_cnt);
 8001424:	f000 fb8a 	bl	8001b3c <getRadianM702_M0>
 8001428:	ee10 0a10 	vmov	r0, s0
 800142c:	f7ff f88c 	bl	8000548 <__aeabi_f2d>
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <runMode+0x208>)
 8001432:	4606      	mov	r6, r0
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6820      	ldr	r0, [r4, #0]
 8001438:	9308      	str	r3, [sp, #32]
 800143a:	460f      	mov	r7, r1
 800143c:	f7ff f884 	bl	8000548 <__aeabi_f2d>
 8001440:	a335      	add	r3, pc, #212	; (adr r3, 8001518 <runMode+0x1d0>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8d7 	bl	80005f8 <__aeabi_dmul>
 800144a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800144e:	6828      	ldr	r0, [r5, #0]
 8001450:	4c40      	ldr	r4, [pc, #256]	; (8001554 <runMode+0x20c>)
 8001452:	f7ff f879 	bl	8000548 <__aeabi_f2d>
 8001456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800145a:	ee18 0a10 	vmov	r0, s16
 800145e:	f7ff f873 	bl	8000548 <__aeabi_f2d>
 8001462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001466:	6821      	ldr	r1, [r4, #0]
 8001468:	9101      	str	r1, [sp, #4]
 800146a:	f8d8 1000 	ldr.w	r1, [r8]
 800146e:	9100      	str	r1, [sp, #0]
 8001470:	4632      	mov	r2, r6
 8001472:	463b      	mov	r3, r7
 8001474:	4838      	ldr	r0, [pc, #224]	; (8001558 <runMode+0x210>)
 8001476:	f006 f871 	bl	800755c <iprintf>
	diff_accel_max = -5000;
 800147a:	4a38      	ldr	r2, [pc, #224]	; (800155c <runMode+0x214>)
 800147c:	f8c8 2000 	str.w	r2, [r8]
	diff_accel_min = 5000;
 8001480:	f241 3388 	movw	r3, #5000	; 0x1388
 8001484:	6023      	str	r3, [r4, #0]
}
 8001486:	b00a      	add	sp, #40	; 0x28
 8001488:	ecbd 8b02 	vpop	{d8}
 800148c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		max_offset_p = offset_radian;
 8001490:	4a33      	ldr	r2, [pc, #204]	; (8001560 <runMode+0x218>)
		max_speed_m = 0;
 8001492:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001564 <runMode+0x21c>
		max_offset_p = offset_radian;
 8001496:	6010      	str	r0, [r2, #0]
		max_speed_m = 0;
 8001498:	4a29      	ldr	r2, [pc, #164]	; (8001540 <runMode+0x1f8>)
		max_speed_p = spd_rps;
 800149a:	ed83 8a00 	vstr	s16, [r3]
		max_speed_m = 0;
 800149e:	eef0 7a47 	vmov.f32	s15, s14
 80014a2:	ed82 7a00 	vstr	s14, [r2]
 80014a6:	e7aa      	b.n	80013fe <runMode+0xb6>
	output_voltage += motor_accel;
 80014a8:	4e20      	ldr	r6, [pc, #128]	; (800152c <runMode+0x1e4>)
 80014aa:	edd4 7a00 	vldr	s15, [r4]
 80014ae:	edd6 6a00 	vldr	s13, [r6]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <runMode+0x1dc>)
	output_voltage += motor_accel;
 80014b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
	if (output_voltage > 20.0)
 80014b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80014bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (output_voltage < -20.0)
 80014c4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
		motor_accel = -0.5;
 80014c8:	bfc8      	it	gt
 80014ca:	f04f 433f 	movgt.w	r3, #3204448256	; 0xbf000000
	if (output_voltage < -20.0)
 80014ce:	eef4 7ac7 	vcmpe.f32	s15, s14
		motor_accel = -0.5;
 80014d2:	bfc8      	it	gt
 80014d4:	6033      	strgt	r3, [r6, #0]
	if (output_voltage < -20.0)
 80014d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		motor_accel = 0.5;
 80014da:	bf48      	it	mi
 80014dc:	f04f 537c 	movmi.w	r3, #1056964608	; 0x3f000000
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80014e0:	f04f 0108 	mov.w	r1, #8
		motor_accel = 0.5;
 80014e4:	bf48      	it	mi
 80014e6:	6033      	strmi	r3, [r6, #0]
	output_voltage += motor_accel;
 80014e8:	edc4 7a00 	vstr	s15, [r4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80014ec:	f002 fabe 	bl	8003a6c <HAL_GPIO_ReadPin>
 80014f0:	2800      	cmp	r0, #0
 80014f2:	f47f af5d 	bne.w	80013b0 <runMode+0x68>
		motor_accel = 0.1;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <runMode+0x220>)
		printf("start auto speed!!\n");
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <runMode+0x224>)
		motor_accel = 0.1;
 80014fa:	6033      	str	r3, [r6, #0]
		printf("start auto speed!!\n");
 80014fc:	f006 f8b4 	bl	8007668 <puts>
 8001500:	e756      	b.n	80013b0 <runMode+0x68>
 8001502:	bf00      	nop
 8001504:	f3af 8000 	nop.w
 8001508:	54442d18 	.word	0x54442d18
 800150c:	401921fb 	.word	0x401921fb
 8001510:	33333333 	.word	0x33333333
 8001514:	40033333 	.word	0x40033333
 8001518:	9999999a 	.word	0x9999999a
 800151c:	40059999 	.word	0x40059999
 8001520:	200003d4 	.word	0x200003d4
 8001524:	48000800 	.word	0x48000800
 8001528:	200003d8 	.word	0x200003d8
 800152c:	200003d0 	.word	0x200003d0
 8001530:	200003f4 	.word	0x200003f4
 8001534:	200003b8 	.word	0x200003b8
 8001538:	3ca280a2 	.word	0x3ca280a2
 800153c:	200003cc 	.word	0x200003cc
 8001540:	200003c8 	.word	0x200003c8
 8001544:	200003c0 	.word	0x200003c0
 8001548:	2000035c 	.word	0x2000035c
 800154c:	080097fc 	.word	0x080097fc
 8001550:	20000388 	.word	0x20000388
 8001554:	200003b4 	.word	0x200003b4
 8001558:	08009808 	.word	0x08009808
 800155c:	ffffec78 	.word	0xffffec78
 8001560:	200003c4 	.word	0x200003c4
 8001564:	00000000 	.word	0x00000000
 8001568:	3dcccccd 	.word	0x3dcccccd
 800156c:	080097e8 	.word	0x080097e8
 8001570:	200003b0 	.word	0x200003b0
 8001574:	00000000 	.word	0x00000000

08001578 <SystemClock_Config>:
{
 8001578:	b510      	push	{r4, lr}
 800157a:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157c:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800157e:	223c      	movs	r2, #60	; 0x3c
 8001580:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001586:	e9cd 1101 	strd	r1, r1, [sp, #4]
 800158a:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	9100      	str	r1, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001594:	f005 fb70 	bl	8006c78 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ae:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b0:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015b6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f002 fa64 	bl	8003a84 <HAL_RCC_OscConfig>
 80015bc:	b108      	cbz	r0, 80015c2 <SystemClock_Config+0x4a>
 80015be:	b672      	cpsid	i
	while (1)
 80015c0:	e7fe      	b.n	80015c0 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c2:	220f      	movs	r2, #15
 80015c4:	2302      	movs	r3, #2
 80015c6:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ca:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015d0:	2200      	movs	r2, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015d2:	4621      	mov	r1, r4
 80015d4:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015da:	f002 fd3b 	bl	8004054 <HAL_RCC_ClockConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	b108      	cbz	r0, 80015e6 <SystemClock_Config+0x6e>
 80015e2:	b672      	cpsid	i
	while (1)
 80015e4:	e7fe      	b.n	80015e4 <SystemClock_Config+0x6c>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80015e6:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8001610 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80015ea:	f243 1101 	movw	r1, #12545	; 0x3101
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80015ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f2:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80015f4:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80015f8:	9110      	str	r1, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015fa:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80015fc:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015fe:	f002 fe83 	bl	8004308 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	b108      	cbz	r0, 8001608 <SystemClock_Config+0x90>
 8001604:	b672      	cpsid	i
	while (1)
 8001606:	e7fe      	b.n	8001606 <SystemClock_Config+0x8e>
}
 8001608:	b020      	add	sp, #128	; 0x80
 800160a:	bd10      	pop	{r4, pc}
 800160c:	f3af 8000 	nop.w
	...

08001618 <main>:
{
 8001618:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800161c:	b085      	sub	sp, #20
  HAL_Init();
 800161e:	f000 fec9 	bl	80023b4 <HAL_Init>
  SystemClock_Config();
 8001622:	f7ff ffa9 	bl	8001578 <SystemClock_Config>
  MX_GPIO_Init();
 8001626:	f7ff fd93 	bl	8001150 <MX_GPIO_Init>
  MX_DMA_Init();
 800162a:	f7ff fd77 	bl	800111c <MX_DMA_Init>
  MX_ADC1_Init();
 800162e:	f7ff fb2b 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001632:	f7ff fb89 	bl	8000d48 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001636:	f7ff fbd3 	bl	8000de0 <MX_ADC3_Init>
  MX_CAN_Init();
 800163a:	f7ff fccb 	bl	8000fd4 <MX_CAN_Init>
  MX_SPI1_Init();
 800163e:	f000 f9cd 	bl	80019dc <MX_SPI1_Init>
  MX_TIM1_Init();
 8001642:	f000 fbe5 	bl	8001e10 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001646:	f000 fc73 	bl	8001f30 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800164a:	f000 fe0b 	bl	8002264 <MX_USART1_UART_Init>
  initFirstSin();
 800164e:	f000 fd0b 	bl	8002068 <initFirstSin>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001652:	2100      	movs	r1, #0
 8001654:	48b0      	ldr	r0, [pc, #704]	; (8001918 <main+0x300>)
 8001656:	4db1      	ldr	r5, [pc, #708]	; (800191c <main+0x304>)
 8001658:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8001954 <main+0x33c>
 800165c:	4fb0      	ldr	r7, [pc, #704]	; (8001920 <main+0x308>)
 800165e:	4eb1      	ldr	r6, [pc, #708]	; (8001924 <main+0x30c>)
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001660:	ed9f 9ab1 	vldr	s18, [pc, #708]	; 8001928 <main+0x310>
		offset_radian = 0;
 8001664:	eddf 8ab1 	vldr	s17, [pc, #708]	; 800192c <main+0x314>
 8001668:	f8df b314 	ldr.w	fp, [pc, #788]	; 8001980 <main+0x368>
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 800166c:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8001984 <main+0x36c>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001670:	f001 f972 	bl	8002958 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_raw_array, 2);
 8001674:	49ae      	ldr	r1, [pc, #696]	; (8001930 <main+0x318>)
 8001676:	48a8      	ldr	r0, [pc, #672]	; (8001918 <main+0x300>)
 8001678:	2202      	movs	r2, #2
 800167a:	f001 f8c1 	bl	8002800 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800167e:	48ad      	ldr	r0, [pc, #692]	; (8001934 <main+0x31c>)
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001686:	f002 f9f7 	bl	8003a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800168a:	48aa      	ldr	r0, [pc, #680]	; (8001934 <main+0x31c>)
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001692:	f002 f9f1 	bl	8003a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169c:	48a5      	ldr	r0, [pc, #660]	; (8001934 <main+0x31c>)
 800169e:	f002 f9eb 	bl	8003a78 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80016a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a6:	f000 fea9 	bl	80023fc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016aa:	48a2      	ldr	r0, [pc, #648]	; (8001934 <main+0x31c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b2:	f002 f9e1 	bl	8003a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80016b6:	489f      	ldr	r0, [pc, #636]	; (8001934 <main+0x31c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016be:	f002 f9db 	bl	8003a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c8:	489a      	ldr	r0, [pc, #616]	; (8001934 <main+0x31c>)
 80016ca:	f002 f9d5 	bl	8003a78 <HAL_GPIO_WritePin>
  printf("Orion VV driver V1 start! \n");
 80016ce:	489a      	ldr	r0, [pc, #616]	; (8001938 <main+0x320>)
 80016d0:	f005 ffca 	bl	8007668 <puts>
	enc_raw = hspi1.Instance->DR;
 80016d4:	4b99      	ldr	r3, [pc, #612]	; (800193c <main+0x324>)
 80016d6:	499a      	ldr	r1, [pc, #616]	; (8001940 <main+0x328>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68d8      	ldr	r0, [r3, #12]
	__HAL_SPI_ENABLE(&hspi1);
 80016dc:	681c      	ldr	r4, [r3, #0]
	enc_raw = hspi1.Instance->DR;
 80016de:	8008      	strh	r0, [r1, #0]
	__HAL_SPI_ENABLE(&hspi1);
 80016e0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80016e4:	601c      	str	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2180      	movs	r1, #128	; 0x80
 80016ea:	4896      	ldr	r0, [pc, #600]	; (8001944 <main+0x32c>)
 80016ec:	4c96      	ldr	r4, [pc, #600]	; (8001948 <main+0x330>)
 80016ee:	f002 f9c3 	bl	8003a78 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Init(&htim8);
 80016f2:	4896      	ldr	r0, [pc, #600]	; (800194c <main+0x334>)
 80016f4:	f003 f86a 	bl	80047cc <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80016f8:	2100      	movs	r1, #0
 80016fa:	4894      	ldr	r0, [pc, #592]	; (800194c <main+0x334>)
 80016fc:	f003 f8ee 	bl	80048dc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001700:	2100      	movs	r1, #0
 8001702:	4892      	ldr	r0, [pc, #584]	; (800194c <main+0x334>)
 8001704:	f003 fbb0 	bl	8004e68 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001708:	2104      	movs	r1, #4
 800170a:	4890      	ldr	r0, [pc, #576]	; (800194c <main+0x334>)
 800170c:	f003 f8e6 	bl	80048dc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8001710:	2104      	movs	r1, #4
 8001712:	488e      	ldr	r0, [pc, #568]	; (800194c <main+0x334>)
 8001714:	f003 fba8 	bl	8004e68 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001718:	2108      	movs	r1, #8
 800171a:	488c      	ldr	r0, [pc, #560]	; (800194c <main+0x334>)
 800171c:	f003 f8de 	bl	80048dc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8001720:	2108      	movs	r1, #8
 8001722:	488a      	ldr	r0, [pc, #552]	; (800194c <main+0x334>)
 8001724:	f003 fba0 	bl	8004e68 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001728:	2100      	movs	r1, #0
 800172a:	4889      	ldr	r0, [pc, #548]	; (8001950 <main+0x338>)
 800172c:	f003 f8d6 	bl	80048dc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001730:	2100      	movs	r1, #0
 8001732:	4887      	ldr	r0, [pc, #540]	; (8001950 <main+0x338>)
 8001734:	f003 fb98 	bl	8004e68 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001738:	2104      	movs	r1, #4
 800173a:	4885      	ldr	r0, [pc, #532]	; (8001950 <main+0x338>)
 800173c:	f003 f8ce 	bl	80048dc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001740:	2104      	movs	r1, #4
 8001742:	4883      	ldr	r0, [pc, #524]	; (8001950 <main+0x338>)
 8001744:	f003 fb90 	bl	8004e68 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001748:	2108      	movs	r1, #8
 800174a:	4881      	ldr	r0, [pc, #516]	; (8001950 <main+0x338>)
 800174c:	f003 f8c6 	bl	80048dc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001750:	2108      	movs	r1, #8
 8001752:	487f      	ldr	r0, [pc, #508]	; (8001950 <main+0x338>)
 8001754:	f003 fb88 	bl	8004e68 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_Base_Start_IT(&htim1);
 8001758:	487d      	ldr	r0, [pc, #500]	; (8001950 <main+0x338>)
 800175a:	f002 ffe5 	bl	8004728 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 800175e:	487b      	ldr	r0, [pc, #492]	; (800194c <main+0x334>)
 8001760:	f002 ffe2 	bl	8004728 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8001764:	497b      	ldr	r1, [pc, #492]	; (8001954 <main+0x33c>)
 8001766:	487c      	ldr	r0, [pc, #496]	; (8001958 <main+0x340>)
 8001768:	2201      	movs	r2, #1
 800176a:	f003 fc73 	bl	8005054 <HAL_UART_Receive_IT>
	CAN_Filter_Init(0);
 800176e:	2000      	movs	r0, #0
 8001770:	f7ff fca2 	bl	80010b8 <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 8001774:	4879      	ldr	r0, [pc, #484]	; (800195c <main+0x344>)
 8001776:	f001 fc8f 	bl	8003098 <HAL_CAN_Start>
		if (uart_rx_flag)
 800177a:	782b      	ldrb	r3, [r5, #0]
 800177c:	b353      	cbz	r3, 80017d4 <main+0x1bc>
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800177e:	4975      	ldr	r1, [pc, #468]	; (8001954 <main+0x33c>)
 8001780:	4875      	ldr	r0, [pc, #468]	; (8001958 <main+0x340>)
			uart_rx_flag = false;
 8001782:	f04f 0a00 	mov.w	sl, #0
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8001786:	2201      	movs	r2, #1
			uart_rx_flag = false;
 8001788:	f885 a000 	strb.w	sl, [r5]
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800178c:	f003 fc62 	bl	8005054 <HAL_UART_Receive_IT>
			switch (uart_rx_buf[0])
 8001790:	f898 3000 	ldrb.w	r3, [r8]
 8001794:	2b30      	cmp	r3, #48	; 0x30
 8001796:	f000 80f7 	beq.w	8001988 <main+0x370>
 800179a:	3b61      	subs	r3, #97	; 0x61
 800179c:	b2da      	uxtb	r2, r3
 800179e:	2a16      	cmp	r2, #22
 80017a0:	d818      	bhi.n	80017d4 <main+0x1bc>
 80017a2:	2b16      	cmp	r3, #22
 80017a4:	d816      	bhi.n	80017d4 <main+0x1bc>
 80017a6:	e8df f003 	tbb	[pc, r3]
 80017aa:	158b      	.short	0x158b
 80017ac:	1515154e 	.word	0x1515154e
 80017b0:	15151515 	.word	0x15151515
 80017b4:	15154415 	.word	0x15154415
 80017b8:	1599a715 	.word	0x1599a715
 80017bc:	1515150c 	.word	0x1515150c
 80017c0:	30          	.byte	0x30
 80017c1:	00          	.byte	0x00
				output_voltage -= 0.5;
 80017c2:	4b67      	ldr	r3, [pc, #412]	; (8001960 <main+0x348>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017d0:	edc3 7a00 	vstr	s15, [r3]
		if (calibration_mode)
 80017d4:	f897 a000 	ldrb.w	sl, [r7]
 80017d8:	f1ba 0f00 	cmp.w	sl, #0
 80017dc:	d123      	bne.n	8001826 <main+0x20e>
			runMode();
 80017de:	f7ff fdb3 	bl	8001348 <runMode>
			HAL_Delay(1);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f000 fe0a 	bl	80023fc <HAL_Delay>
			can_data[0] = 0;
 80017e8:	4a5e      	ldr	r2, [pc, #376]	; (8001964 <main+0x34c>)
 80017ea:	4b5f      	ldr	r3, [pc, #380]	; (8001968 <main+0x350>)
 80017ec:	6013      	str	r3, [r2, #0]
			can_header.RTR = CAN_RTR_DATA;
 80017ee:	2308      	movs	r3, #8
 80017f0:	6123      	str	r3, [r4, #16]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 80017f2:	4955      	ldr	r1, [pc, #340]	; (8001948 <main+0x330>)
 80017f4:	4b5d      	ldr	r3, [pc, #372]	; (800196c <main+0x354>)
			can_header.RTR = CAN_RTR_DATA;
 80017f6:	f8c4 a00c 	str.w	sl, [r4, #12]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 80017fa:	4858      	ldr	r0, [pc, #352]	; (800195c <main+0x344>)
			can_header.StdId = 0x00;
 80017fc:	f8c4 a000 	str.w	sl, [r4]
			can_header.TransmitGlobalTime = DISABLE;
 8001800:	f884 a014 	strb.w	sl, [r4, #20]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001804:	f001 fc7a 	bl	80030fc <HAL_CAN_AddTxMessage>
 8001808:	e7b7      	b.n	800177a <main+0x162>
				output_voltage += 0.5;
 800180a:	4b55      	ldr	r3, [pc, #340]	; (8001960 <main+0x348>)
		if (calibration_mode)
 800180c:	f897 a000 	ldrb.w	sl, [r7]
				output_voltage += 0.5;
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001818:	ee77 7a87 	vadd.f32	s15, s15, s14
 800181c:	edc3 7a00 	vstr	s15, [r3]
		if (calibration_mode)
 8001820:	f1ba 0f00 	cmp.w	sl, #0
 8001824:	d0db      	beq.n	80017de <main+0x1c6>
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 8001826:	6830      	ldr	r0, [r6, #0]
 8001828:	f7fe fe8e 	bl	8000548 <__aeabi_f2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	e016      	b.n	8001860 <main+0x248>
				motor_accel = 0;
 8001832:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <main+0x358>)
				printf("stop auto speed!!\n");
 8001834:	484f      	ldr	r0, [pc, #316]	; (8001974 <main+0x35c>)
				motor_accel = 0;
 8001836:	edc3 8a00 	vstr	s17, [r3]
				output_voltage = 0;
 800183a:	4b49      	ldr	r3, [pc, #292]	; (8001960 <main+0x348>)
 800183c:	edc3 8a00 	vstr	s17, [r3]
				printf("stop auto speed!!\n");
 8001840:	f005 ff12 	bl	8007668 <puts>
				break;
 8001844:	e7c6      	b.n	80017d4 <main+0x1bc>
				user_offet_radian = 0;
 8001846:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <main+0x360>)
				output_voltage = 2.0;
 8001848:	4a45      	ldr	r2, [pc, #276]	; (8001960 <main+0x348>)
				user_offet_radian = 0;
 800184a:	edc3 8a00 	vstr	s17, [r3]
				calibration_mode = true;
 800184e:	2301      	movs	r3, #1
 8001850:	703b      	strb	r3, [r7, #0]
				output_voltage = 2.0;
 8001852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001856:	6013      	str	r3, [r2, #0]
				offset_radian = 0;
 8001858:	edc6 8a00 	vstr	s17, [r6]
				output_voltage = 2.0;
 800185c:	2200      	movs	r2, #0
 800185e:	2300      	movs	r3, #0
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001860:	eddb 7a00 	vldr	s15, [fp]
 8001864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001868:	e9cd 2302 	strd	r2, r3, [sp, #8]
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 800186c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8001870:	ee17 0a90 	vmov	r0, s15
 8001874:	f7fe fe68 	bl	8000548 <__aeabi_f2d>
 8001878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800187c:	e9cd 0100 	strd	r0, r1, [sp]
 8001880:	4648      	mov	r0, r9
 8001882:	f005 fe6b 	bl	800755c <iprintf>
	offset_radian += 0.05;
 8001886:	6830      	ldr	r0, [r6, #0]
 8001888:	f7fe fe5e 	bl	8000548 <__aeabi_f2d>
 800188c:	a31e      	add	r3, pc, #120	; (adr r3, 8001908 <main+0x2f0>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fcfb 	bl	800028c <__adddf3>
 8001896:	f7ff f9a7 	bl	8000be8 <__aeabi_d2f>
 800189a:	ee08 0a10 	vmov	s16, r0
	if (offset_radian > M_PI * 2)
 800189e:	f7fe fe53 	bl	8000548 <__aeabi_f2d>
 80018a2:	a31b      	add	r3, pc, #108	; (adr r3, 8001910 <main+0x2f8>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7ff f936 	bl	8000b18 <__aeabi_dcmpgt>
	offset_radian += 0.05;
 80018ac:	2800      	cmp	r0, #0
 80018ae:	bf18      	it	ne
 80018b0:	eeb0 8a68 	vmovne.f32	s16, s17
			HAL_Delay(100);
 80018b4:	2064      	movs	r0, #100	; 0x64
	offset_radian += 0.05;
 80018b6:	ed86 8a00 	vstr	s16, [r6]
			HAL_Delay(100);
 80018ba:	f000 fd9f 	bl	80023fc <HAL_Delay>
 80018be:	e75c      	b.n	800177a <main+0x162>
				user_offet_radian -= 0.05;
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <main+0x360>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	f7fe fe40 	bl	8000548 <__aeabi_f2d>
 80018c8:	a30f      	add	r3, pc, #60	; (adr r3, 8001908 <main+0x2f0>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe fcdb 	bl	8000288 <__aeabi_dsub>
 80018d2:	f7ff f989 	bl	8000be8 <__aeabi_d2f>
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <main+0x360>)
 80018d8:	6018      	str	r0, [r3, #0]
				break;
 80018da:	e77b      	b.n	80017d4 <main+0x1bc>
				user_offet_radian += 0.05;
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <main+0x360>)
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	f7fe fe32 	bl	8000548 <__aeabi_f2d>
 80018e4:	a308      	add	r3, pc, #32	; (adr r3, 8001908 <main+0x2f0>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fccf 	bl	800028c <__adddf3>
 80018ee:	f7ff f97b 	bl	8000be8 <__aeabi_d2f>
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <main+0x360>)
 80018f4:	6018      	str	r0, [r3, #0]
				break;
 80018f6:	e76d      	b.n	80017d4 <main+0x1bc>
				motor_accel = 0.5;
 80018f8:	4a1d      	ldr	r2, [pc, #116]	; (8001970 <main+0x358>)
				printf("start auto speed!!\n");
 80018fa:	4820      	ldr	r0, [pc, #128]	; (800197c <main+0x364>)
				motor_accel = 0.5;
 80018fc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001900:	6013      	str	r3, [r2, #0]
				printf("start auto speed!!\n");
 8001902:	f005 feb1 	bl	8007668 <puts>
				break;
 8001906:	e765      	b.n	80017d4 <main+0x1bc>
 8001908:	9999999a 	.word	0x9999999a
 800190c:	3fa99999 	.word	0x3fa99999
 8001910:	54442d18 	.word	0x54442d18
 8001914:	401921fb 	.word	0x401921fb
 8001918:	20000200 	.word	0x20000200
 800191c:	200003f2 	.word	0x200003f2
 8001920:	20000360 	.word	0x20000360
 8001924:	200003d4 	.word	0x200003d4
 8001928:	3ca280a2 	.word	0x3ca280a2
 800192c:	00000000 	.word	0x00000000
 8001930:	2000035c 	.word	0x2000035c
 8001934:	48000800 	.word	0x48000800
 8001938:	0800987c 	.word	0x0800987c
 800193c:	200003f8 	.word	0x200003f8
 8001940:	200003bc 	.word	0x200003bc
 8001944:	48000400 	.word	0x48000400
 8001948:	2000036c 	.word	0x2000036c
 800194c:	200004b8 	.word	0x200004b8
 8001950:	2000046c 	.word	0x2000046c
 8001954:	200003e8 	.word	0x200003e8
 8001958:	20001504 	.word	0x20001504
 800195c:	20000334 	.word	0x20000334
 8001960:	200003d8 	.word	0x200003d8
 8001964:	20000364 	.word	0x20000364
 8001968:	01010000 	.word	0x01010000
 800196c:	20000384 	.word	0x20000384
 8001970:	200003d0 	.word	0x200003d0
 8001974:	08009898 	.word	0x08009898
 8001978:	200003f4 	.word	0x200003f4
 800197c:	080097e8 	.word	0x080097e8
 8001980:	200003b8 	.word	0x200003b8
 8001984:	0800985c 	.word	0x0800985c
				HAL_TIM_Base_Stop_IT(&htim1);
 8001988:	4c10      	ldr	r4, [pc, #64]	; (80019cc <main+0x3b4>)
				HAL_TIM_Base_Stop_IT(&htim8);
 800198a:	4d11      	ldr	r5, [pc, #68]	; (80019d0 <main+0x3b8>)
				printf("enter sleep!\n");
 800198c:	4811      	ldr	r0, [pc, #68]	; (80019d4 <main+0x3bc>)
 800198e:	f005 fe6b 	bl	8007668 <puts>
				HAL_TIM_Base_Stop_IT(&htim1);
 8001992:	4620      	mov	r0, r4
 8001994:	f002 ff02 	bl	800479c <HAL_TIM_Base_Stop_IT>
				HAL_TIM_Base_Stop_IT(&htim8);
 8001998:	4628      	mov	r0, r5
 800199a:	f002 feff 	bl	800479c <HAL_TIM_Base_Stop_IT>
				htim8.Instance->CCR1 = 0;
 800199e:	6829      	ldr	r1, [r5, #0]
				htim1.Instance->CCR1 = 0;
 80019a0:	6822      	ldr	r2, [r4, #0]
				htim8.Instance->CCR1 = 0;
 80019a2:	f8c1 a034 	str.w	sl, [r1, #52]	; 0x34
				htim8.Instance->CCR2 = 0;
 80019a6:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
				htim8.Instance->CCR3 = 0;
 80019aa:	f8c1 a03c 	str.w	sl, [r1, #60]	; 0x3c
				htim1.Instance->CCR1 = 0;
 80019ae:	f8c2 a034 	str.w	sl, [r2, #52]	; 0x34
				htim1.Instance->CCR2 = 0;
 80019b2:	f8c2 a038 	str.w	sl, [r2, #56]	; 0x38
				htim1.Instance->CCR3 = 0;
 80019b6:	f8c2 a03c 	str.w	sl, [r2, #60]	; 0x3c
				__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 80019ba:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80019bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80019c0:	644b      	str	r3, [r1, #68]	; 0x44
				__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 80019c2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80019c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
				while (1)
 80019ca:	e7fe      	b.n	80019ca <main+0x3b2>
 80019cc:	2000046c 	.word	0x2000046c
 80019d0:	200004b8 	.word	0x200004b8
 80019d4:	080098ac 	.word	0x080098ac

080019d8 <Error_Handler>:
 80019d8:	b672      	cpsid	i
	while (1)
 80019da:	e7fe      	b.n	80019da <Error_Handler+0x2>

080019dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019dc:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019de:	4811      	ldr	r0, [pc, #68]	; (8001a24 <MX_SPI1_Init+0x48>)
 80019e0:	4c11      	ldr	r4, [pc, #68]	; (8001a28 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019e2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e6:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019ea:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ec:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80019ee:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019f2:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019f4:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019f6:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80019fa:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019fe:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a02:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001a04:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a06:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a0a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a0e:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a12:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a14:	f002 fd8e 	bl	8004534 <HAL_SPI_Init>
 8001a18:	b900      	cbnz	r0, 8001a1c <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a1a:	bd10      	pop	{r4, pc}
 8001a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001a20:	f7ff bfda 	b.w	80019d8 <Error_Handler>
 8001a24:	200003f8 	.word	0x200003f8
 8001a28:	40013000 	.word	0x40013000
 8001a2c:	00000000 	.word	0x00000000

08001a30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a30:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001a32:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_SPI_MspInit+0x70>)
 8001a34:	6801      	ldr	r1, [r0, #0]
{
 8001a36:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8001a3a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001a40:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001a44:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8001a46:	d001      	beq.n	8001a4c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a48:	b008      	add	sp, #32
 8001a4a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a50:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001a98 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a58:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a60:	619a      	str	r2, [r3, #24]
 8001a62:	699a      	ldr	r2, [r3, #24]
 8001a64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a68:	9200      	str	r2, [sp, #0]
 8001a6a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a7a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a7e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a82:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a86:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a8c:	f001 ff04 	bl	8003898 <HAL_GPIO_Init>
}
 8001a90:	b008      	add	sp, #32
 8001a92:	bd10      	pop	{r4, pc}
 8001a94:	f3af 8000 	nop.w
 8001a98:	00000038 	.word	0x00000038
 8001a9c:	00000002 	.word	0x00000002
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	48000400 	.word	0x48000400

08001aa8 <updateMA702_M0>:
  }
}

/* USER CODE BEGIN 1 */
inline void updateMA702_M0(void){
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2140      	movs	r1, #64	; 0x40
inline void updateMA702_M0(void){
 8001aac:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001aae:	481e      	ldr	r0, [pc, #120]	; (8001b28 <updateMA702_M0+0x80>)
 8001ab0:	f001 ffe2 	bl	8003a78 <HAL_GPIO_WritePin>

  ma702_0.enc_raw = hspi1.Instance->DR;
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <updateMA702_M0+0x84>)
 8001ab6:	6812      	ldr	r2, [r2, #0]
  hspi1.Instance->DR = 0;
 8001ab8:	2300      	movs	r3, #0
  ma702_0.enc_raw = hspi1.Instance->DR;
 8001aba:	68d1      	ldr	r1, [r2, #12]
  hspi1.Instance->DR = 0;
 8001abc:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001abe:	6893      	ldr	r3, [r2, #8]
 8001ac0:	07db      	lsls	r3, r3, #31
 8001ac2:	d5fc      	bpl.n	8001abe <updateMA702_M0+0x16>
  {
  }
  ma702_0.enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001ac4:	68d2      	ldr	r2, [r2, #12]

  ma702_0.enc_elec = 5461 - (ma702_0.enc_raw % 5461);
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <updateMA702_M0+0x88>)
  ma702_0.enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001ac8:	4c1a      	ldr	r4, [pc, #104]	; (8001b34 <updateMA702_M0+0x8c>)
 8001aca:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8001ace:	400a      	ands	r2, r1
  ma702_0.enc_elec = 5461 - (ma702_0.enc_raw % 5461);
 8001ad0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f241 5155 	movw	r1, #5461	; 0x1555
 8001ada:	131b      	asrs	r3, r3, #12
 8001adc:	fb01 2313 	mls	r3, r1, r3, r2
 8001ae0:	1acb      	subs	r3, r1, r3
  ma702_0.output_radian = (float)ma702_0.enc_elec / 5461 * 2 * M_PI;
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aea:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001b38 <updateMA702_M0+0x90>
 8001aee:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702_0.enc_elec = 5461 - (ma702_0.enc_raw % 5461);
 8001af2:	e9c4 2301 	strd	r2, r3, [r4, #4]
  ma702_0.output_radian = (float)ma702_0.enc_elec / 5461 * 2 * M_PI;
 8001af6:	ee17 0a90 	vmov	r0, s15
 8001afa:	f7fe fd25 	bl	8000548 <__aeabi_f2d>
 8001afe:	a308      	add	r3, pc, #32	; (adr r3, 8001b20 <updateMA702_M0+0x78>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd78 	bl	80005f8 <__aeabi_dmul>
 8001b08:	f7ff f86e 	bl	8000be8 <__aeabi_d2f>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	6023      	str	r3, [r4, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <updateMA702_M0+0x80>)
}
 8001b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	2140      	movs	r1, #64	; 0x40
 8001b1a:	f001 bfad 	b.w	8003a78 <HAL_GPIO_WritePin>
 8001b1e:	bf00      	nop
 8001b20:	54442d18 	.word	0x54442d18
 8001b24:	400921fb 	.word	0x400921fb
 8001b28:	48000400 	.word	0x48000400
 8001b2c:	200003f8 	.word	0x200003f8
 8001b30:	c003000d 	.word	0xc003000d
 8001b34:	2000045c 	.word	0x2000045c
 8001b38:	39c00300 	.word	0x39c00300

08001b3c <getRadianM702_M0>:

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
}

float getRadianM702_M0(void){
	return ma702_0.output_radian;
 8001b3c:	4b01      	ldr	r3, [pc, #4]	; (8001b44 <getRadianM702_M0+0x8>)
}
 8001b3e:	ed93 0a00 	vldr	s0, [r3]
 8001b42:	4770      	bx	lr
 8001b44:	2000045c 	.word	0x2000045c

08001b48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_MspInit+0x2c>)
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	699a      	ldr	r2, [r3, #24]
{
 8001b54:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	f002 0201 	and.w	r2, r2, #1
 8001b5a:	9200      	str	r2, [sp, #0]
 8001b5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5e:	69da      	ldr	r2, [r3, #28]
 8001b60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b64:	61da      	str	r2, [r3, #28]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b70:	b002      	add	sp, #8
 8001b72:	4770      	bx	lr
 8001b74:	40021000 	.word	0x40021000

08001b78 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler>
 8001b7a:	bf00      	nop

08001b7c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <HardFault_Handler>
 8001b7e:	bf00      	nop

08001b80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <MemManage_Handler>
 8001b82:	bf00      	nop

08001b84 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <BusFault_Handler>
 8001b86:	bf00      	nop

08001b88 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler>
 8001b8a:	bf00      	nop

08001b8c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop

08001b90 <DebugMon_Handler>:
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop

08001b94 <PendSV_Handler>:
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop

08001b98 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b98:	f000 bc1e 	b.w	80023d8 <HAL_IncTick>

08001b9c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <DMA1_Channel1_IRQHandler+0x8>)
 8001b9e:	f001 be31 	b.w	8003804 <HAL_DMA_IRQHandler>
 8001ba2:	bf00      	nop
 8001ba4:	200002f0 	.word	0x200002f0

08001ba8 <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <USB_HP_CAN_TX_IRQHandler+0x8>)
 8001baa:	f001 bbbf 	b.w	800332c <HAL_CAN_IRQHandler>
 8001bae:	bf00      	nop
 8001bb0:	20000334 	.word	0x20000334

08001bb4 <USB_LP_CAN_RX0_IRQHandler>:
 8001bb4:	4801      	ldr	r0, [pc, #4]	; (8001bbc <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001bb6:	f001 bbb9 	b.w	800332c <HAL_CAN_IRQHandler>
 8001bba:	bf00      	nop
 8001bbc:	20000334 	.word	0x20000334

08001bc0 <CAN_RX1_IRQHandler>:
 8001bc0:	4801      	ldr	r0, [pc, #4]	; (8001bc8 <CAN_RX1_IRQHandler+0x8>)
 8001bc2:	f001 bbb3 	b.w	800332c <HAL_CAN_IRQHandler>
 8001bc6:	bf00      	nop
 8001bc8:	20000334 	.word	0x20000334

08001bcc <CAN_SCE_IRQHandler>:
 8001bcc:	4801      	ldr	r0, [pc, #4]	; (8001bd4 <CAN_SCE_IRQHandler+0x8>)
 8001bce:	f001 bbad 	b.w	800332c <HAL_CAN_IRQHandler>
 8001bd2:	bf00      	nop
 8001bd4:	20000334 	.word	0x20000334

08001bd8 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd8:	4801      	ldr	r0, [pc, #4]	; (8001be0 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001bda:	f002 bf19 	b.w	8004a10 <HAL_TIM_IRQHandler>
 8001bde:	bf00      	nop
 8001be0:	2000046c 	.word	0x2000046c

08001be4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <USART1_IRQHandler+0x8>)
 8001be6:	f003 babf 	b.w	8005168 <HAL_UART_IRQHandler>
 8001bea:	bf00      	nop
 8001bec:	20001504 	.word	0x20001504

08001bf0 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001bf0:	4801      	ldr	r0, [pc, #4]	; (8001bf8 <TIM8_UP_IRQHandler+0x8>)
 8001bf2:	f002 bf0d 	b.w	8004a10 <HAL_TIM_IRQHandler>
 8001bf6:	bf00      	nop
 8001bf8:	200004b8 	.word	0x200004b8

08001bfc <_getpid>:
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	4770      	bx	lr

08001c00 <_kill>:
 8001c00:	b508      	push	{r3, lr}
 8001c02:	f005 f80f 	bl	8006c24 <__errno>
 8001c06:	2316      	movs	r3, #22
 8001c08:	6003      	str	r3, [r0, #0]
 8001c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0e:	bd08      	pop	{r3, pc}

08001c10 <_exit>:
 8001c10:	b508      	push	{r3, lr}
 8001c12:	f005 f807 	bl	8006c24 <__errno>
 8001c16:	2316      	movs	r3, #22
 8001c18:	6003      	str	r3, [r0, #0]
 8001c1a:	e7fe      	b.n	8001c1a <_exit+0xa>

08001c1c <_read>:
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	1e16      	subs	r6, r2, #0
 8001c20:	dd07      	ble.n	8001c32 <_read+0x16>
 8001c22:	460c      	mov	r4, r1
 8001c24:	198d      	adds	r5, r1, r6
 8001c26:	f3af 8000 	nop.w
 8001c2a:	f804 0b01 	strb.w	r0, [r4], #1
 8001c2e:	42a5      	cmp	r5, r4
 8001c30:	d1f9      	bne.n	8001c26 <_read+0xa>
 8001c32:	4630      	mov	r0, r6
 8001c34:	bd70      	pop	{r4, r5, r6, pc}
 8001c36:	bf00      	nop

08001c38 <_write>:
 8001c38:	b570      	push	{r4, r5, r6, lr}
 8001c3a:	1e16      	subs	r6, r2, #0
 8001c3c:	dd07      	ble.n	8001c4e <_write+0x16>
 8001c3e:	460c      	mov	r4, r1
 8001c40:	198d      	adds	r5, r1, r6
 8001c42:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001c46:	f7ff faeb 	bl	8001220 <__io_putchar>
 8001c4a:	42ac      	cmp	r4, r5
 8001c4c:	d1f9      	bne.n	8001c42 <_write+0xa>
 8001c4e:	4630      	mov	r0, r6
 8001c50:	bd70      	pop	{r4, r5, r6, pc}
 8001c52:	bf00      	nop

08001c54 <_close>:
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop

08001c5c <_fstat>:
 8001c5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c60:	604b      	str	r3, [r1, #4]
 8001c62:	2000      	movs	r0, #0
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop

08001c68 <_isatty>:
 8001c68:	2001      	movs	r0, #1
 8001c6a:	4770      	bx	lr

08001c6c <_lseek>:
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	4770      	bx	lr

08001c70 <_sbrk>:
 8001c70:	b510      	push	{r4, lr}
 8001c72:	4c0c      	ldr	r4, [pc, #48]	; (8001ca4 <_sbrk+0x34>)
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <_sbrk+0x38>)
 8001c76:	490d      	ldr	r1, [pc, #52]	; (8001cac <_sbrk+0x3c>)
 8001c78:	6822      	ldr	r2, [r4, #0]
 8001c7a:	1a59      	subs	r1, r3, r1
 8001c7c:	b12a      	cbz	r2, 8001c8a <_sbrk+0x1a>
 8001c7e:	4410      	add	r0, r2
 8001c80:	4288      	cmp	r0, r1
 8001c82:	d807      	bhi.n	8001c94 <_sbrk+0x24>
 8001c84:	6020      	str	r0, [r4, #0]
 8001c86:	4610      	mov	r0, r2
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <_sbrk+0x40>)
 8001c8c:	6022      	str	r2, [r4, #0]
 8001c8e:	4410      	add	r0, r2
 8001c90:	4288      	cmp	r0, r1
 8001c92:	d9f7      	bls.n	8001c84 <_sbrk+0x14>
 8001c94:	f004 ffc6 	bl	8006c24 <__errno>
 8001c98:	230c      	movs	r3, #12
 8001c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9e:	6003      	str	r3, [r0, #0]
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	bd10      	pop	{r4, pc}
 8001ca4:	20000468 	.word	0x20000468
 8001ca8:	20008000 	.word	0x20008000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	200015a0 	.word	0x200015a0

08001cb4 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb4:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <SystemInit+0x10>)
 8001cb6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001cba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cbe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001cc8:	b500      	push	{lr}

  if(tim_pwmHandle->Instance==TIM1)
 8001cca:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <HAL_TIM_PWM_MspInit+0x6c>)
 8001ccc:	6803      	ldr	r3, [r0, #0]
 8001cce:	4293      	cmp	r3, r2
{
 8001cd0:	b083      	sub	sp, #12
  if(tim_pwmHandle->Instance==TIM1)
 8001cd2:	d005      	beq.n	8001ce0 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM8)
 8001cd4:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_TIM_PWM_MspInit+0x70>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d017      	beq.n	8001d0a <HAL_TIM_PWM_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001cda:	b003      	add	sp, #12
 8001cdc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_TIM_PWM_MspInit+0x74>)
 8001ce2:	6999      	ldr	r1, [r3, #24]
 8001ce4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8001ce8:	6199      	str	r1, [r3, #24]
 8001cea:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf2:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001cf4:	2019      	movs	r0, #25
 8001cf6:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001cfa:	f001 fc53 	bl	80035a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001cfe:	2019      	movs	r0, #25
}
 8001d00:	b003      	add	sp, #12
 8001d02:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001d06:	f001 bc8b 	b.w	8003620 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_TIM_PWM_MspInit+0x74>)
 8001d0c:	6999      	ldr	r1, [r3, #24]
 8001d0e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001d12:	6199      	str	r1, [r3, #24]
 8001d14:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d1c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001d1e:	202c      	movs	r0, #44	; 0x2c
 8001d20:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001d22:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001d24:	f001 fc3e 	bl	80035a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001d28:	202c      	movs	r0, #44	; 0x2c
}
 8001d2a:	b003      	add	sp, #12
 8001d2c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001d30:	f001 bc76 	b.w	8003620 <HAL_NVIC_EnableIRQ>
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40013400 	.word	0x40013400
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d40:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8001d42:	6802      	ldr	r2, [r0, #0]
 8001d44:	492e      	ldr	r1, [pc, #184]	; (8001e00 <HAL_TIM_MspPostInit+0xc0>)
{
 8001d46:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8001d4a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001d50:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001d54:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8001d56:	d004      	beq.n	8001d62 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_TIM_MspPostInit+0xc4>)
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d032      	beq.n	8001dc4 <HAL_TIM_MspPostInit+0x84>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001d5e:	b00a      	add	sp, #40	; 0x28
 8001d60:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d66:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d6a:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d7a:	9201      	str	r2, [sp, #4]
 8001d7c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d84:	615a      	str	r2, [r3, #20]
 8001d86:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d88:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d92:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8001d96:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da0:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f001 fd79 	bl	8003898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001da6:	2203      	movs	r2, #3
 8001da8:	2302      	movs	r3, #2
 8001daa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	4816      	ldr	r0, [pc, #88]	; (8001e08 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001db0:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001db2:	2200      	movs	r2, #0
 8001db4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001db8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f001 fd6c 	bl	8003898 <HAL_GPIO_Init>
}
 8001dc0:	b00a      	add	sp, #40	; 0x28
 8001dc2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc4:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001dc8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8001df8 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dcc:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dce:	480f      	ldr	r0, [pc, #60]	; (8001e0c <HAL_TIM_MspPostInit+0xcc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001dd4:	615a      	str	r2, [r3, #20]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ddc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dde:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001de0:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001de2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001de8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dea:	f001 fd55 	bl	8003898 <HAL_GPIO_Init>
}
 8001dee:	b00a      	add	sp, #40	; 0x28
 8001df0:	bd10      	pop	{r4, pc}
 8001df2:	bf00      	nop
 8001df4:	f3af 8000 	nop.w
 8001df8:	00001dc0 	.word	0x00001dc0
 8001dfc:	00000002 	.word	0x00000002
 8001e00:	40012c00 	.word	0x40012c00
 8001e04:	40013400 	.word	0x40013400
 8001e08:	48000400 	.word	0x48000400
 8001e0c:	48000800 	.word	0x48000800

08001e10 <MX_TIM1_Init>:
{
 8001e10:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e12:	2400      	movs	r4, #0
{
 8001e14:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e16:	222c      	movs	r2, #44	; 0x2c
 8001e18:	4621      	mov	r1, r4
 8001e1a:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e20:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001e24:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001e28:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2e:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e30:	f004 ff22 	bl	8006c78 <memset>
  htim1.Instance = TIM1;
 8001e34:	483c      	ldr	r0, [pc, #240]	; (8001f28 <MX_TIM1_Init+0x118>)
  htim1.Init.Prescaler = 1;
 8001e36:	4a3d      	ldr	r2, [pc, #244]	; (8001f2c <MX_TIM1_Init+0x11c>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 1400;
 8001e40:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001e44:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8001e48:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e4c:	f002 fcbe 	bl	80047cc <HAL_TIM_PWM_Init>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d147      	bne.n	8001ee4 <MX_TIM1_Init+0xd4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	2200      	movs	r2, #0
 8001e58:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e5c:	4832      	ldr	r0, [pc, #200]	; (8001f28 <MX_TIM1_Init+0x118>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e5e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e60:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e62:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e64:	f003 f864 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d14e      	bne.n	8001f0a <MX_TIM1_Init+0xfa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6c:	2060      	movs	r0, #96	; 0x60
 8001e6e:	2100      	movs	r1, #0
 8001e70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001e74:	2000      	movs	r0, #0
 8001e76:	2100      	movs	r1, #0
 8001e78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001e7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e80:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e82:	4829      	ldr	r0, [pc, #164]	; (8001f28 <MX_TIM1_Init+0x118>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e84:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e86:	a904      	add	r1, sp, #16
 8001e88:	f002 feba 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d139      	bne.n	8001f04 <MX_TIM1_Init+0xf4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e90:	4825      	ldr	r0, [pc, #148]	; (8001f28 <MX_TIM1_Init+0x118>)
 8001e92:	2204      	movs	r2, #4
 8001e94:	a904      	add	r1, sp, #16
 8001e96:	f002 feb3 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001e9a:	bb80      	cbnz	r0, 8001efe <MX_TIM1_Init+0xee>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e9c:	4822      	ldr	r0, [pc, #136]	; (8001f28 <MX_TIM1_Init+0x118>)
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	a904      	add	r1, sp, #16
 8001ea2:	f002 fead 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001ea6:	bb38      	cbnz	r0, 8001ef8 <MX_TIM1_Init+0xe8>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ea8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8001f10 <MX_TIM1_Init+0x100>
 8001eac:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001eb0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8001f18 <MX_TIM1_Init+0x108>
 8001eb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001eb8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8001f20 <MX_TIM1_Init+0x110>
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ec0:	2400      	movs	r4, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec2:	4819      	ldr	r0, [pc, #100]	; (8001f28 <MX_TIM1_Init+0x118>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ec4:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec6:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ec8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001ecc:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001ed0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed4:	f003 f872 	bl	8004fbc <HAL_TIMEx_ConfigBreakDeadTime>
 8001ed8:	b938      	cbnz	r0, 8001eea <MX_TIM1_Init+0xda>
  HAL_TIM_MspPostInit(&htim1);
 8001eda:	4813      	ldr	r0, [pc, #76]	; (8001f28 <MX_TIM1_Init+0x118>)
 8001edc:	f7ff ff30 	bl	8001d40 <HAL_TIM_MspPostInit>
}
 8001ee0:	b018      	add	sp, #96	; 0x60
 8001ee2:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001ee4:	f7ff fd78 	bl	80019d8 <Error_Handler>
 8001ee8:	e7b4      	b.n	8001e54 <MX_TIM1_Init+0x44>
    Error_Handler();
 8001eea:	f7ff fd75 	bl	80019d8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001eee:	480e      	ldr	r0, [pc, #56]	; (8001f28 <MX_TIM1_Init+0x118>)
 8001ef0:	f7ff ff26 	bl	8001d40 <HAL_TIM_MspPostInit>
}
 8001ef4:	b018      	add	sp, #96	; 0x60
 8001ef6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001ef8:	f7ff fd6e 	bl	80019d8 <Error_Handler>
 8001efc:	e7d4      	b.n	8001ea8 <MX_TIM1_Init+0x98>
    Error_Handler();
 8001efe:	f7ff fd6b 	bl	80019d8 <Error_Handler>
 8001f02:	e7cb      	b.n	8001e9c <MX_TIM1_Init+0x8c>
    Error_Handler();
 8001f04:	f7ff fd68 	bl	80019d8 <Error_Handler>
 8001f08:	e7c2      	b.n	8001e90 <MX_TIM1_Init+0x80>
    Error_Handler();
 8001f0a:	f7ff fd65 	bl	80019d8 <Error_Handler>
 8001f0e:	e7ad      	b.n	8001e6c <MX_TIM1_Init+0x5c>
 8001f10:	00000000 	.word	0x00000000
 8001f14:	0000000a 	.word	0x0000000a
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	00002000 	.word	0x00002000
 8001f20:	02000000 	.word	0x02000000
 8001f24:	00000000 	.word	0x00000000
 8001f28:	2000046c 	.word	0x2000046c
 8001f2c:	40012c00 	.word	0x40012c00

08001f30 <MX_TIM8_Init>:
{
 8001f30:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f32:	2400      	movs	r4, #0
{
 8001f34:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f36:	222c      	movs	r2, #44	; 0x2c
 8001f38:	4621      	mov	r1, r4
 8001f3a:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f40:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001f44:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001f48:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4e:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f50:	f004 fe92 	bl	8006c78 <memset>
  htim8.Instance = TIM8;
 8001f54:	4842      	ldr	r0, [pc, #264]	; (8002060 <MX_TIM8_Init+0x130>)
  htim8.Init.Prescaler = 1;
 8001f56:	4a43      	ldr	r2, [pc, #268]	; (8002064 <MX_TIM8_Init+0x134>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 1400;
 8001f60:	f44f 63af 	mov.w	r3, #1400	; 0x578
 8001f64:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 8001f68:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001f6c:	f002 fc2e 	bl	80047cc <HAL_TIM_PWM_Init>
 8001f70:	2800      	cmp	r0, #0
 8001f72:	d149      	bne.n	8002008 <MX_TIM8_Init+0xd8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f74:	2300      	movs	r3, #0
 8001f76:	2200      	movs	r2, #0
 8001f78:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f7c:	4838      	ldr	r0, [pc, #224]	; (8002060 <MX_TIM8_Init+0x130>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f80:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f82:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f84:	f002 ffd4 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d150      	bne.n	800202e <MX_TIM8_Init+0xfe>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f8c:	2060      	movs	r0, #96	; 0x60
 8001f8e:	2100      	movs	r1, #0
 8001f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f94:	2000      	movs	r0, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001f9c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fa0:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa2:	482f      	ldr	r0, [pc, #188]	; (8002060 <MX_TIM8_Init+0x130>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fa4:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa6:	a904      	add	r1, sp, #16
 8001fa8:	f002 fe2a 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001fac:	2800      	cmp	r0, #0
 8001fae:	d13b      	bne.n	8002028 <MX_TIM8_Init+0xf8>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fb0:	482b      	ldr	r0, [pc, #172]	; (8002060 <MX_TIM8_Init+0x130>)
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	a904      	add	r1, sp, #16
 8001fb6:	f002 fe23 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001fba:	bb90      	cbnz	r0, 8002022 <MX_TIM8_Init+0xf2>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001fbc:	4828      	ldr	r0, [pc, #160]	; (8002060 <MX_TIM8_Init+0x130>)
 8001fbe:	2208      	movs	r2, #8
 8001fc0:	a904      	add	r1, sp, #16
 8001fc2:	f002 fe1d 	bl	8004c00 <HAL_TIM_PWM_ConfigChannel>
 8001fc6:	bb48      	cbnz	r0, 800201c <MX_TIM8_Init+0xec>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fc8:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002038 <MX_TIM8_Init+0x108>
 8001fcc:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001fd0:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002040 <MX_TIM8_Init+0x110>
 8001fd4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001fd8:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002048 <MX_TIM8_Init+0x118>
 8001fdc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001fe0:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002050 <MX_TIM8_Init+0x120>
 8001fe4:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001fe8:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002058 <MX_TIM8_Init+0x128>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fec:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001fee:	481c      	ldr	r0, [pc, #112]	; (8002060 <MX_TIM8_Init+0x130>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ff0:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff2:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ff4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff8:	f002 ffe0 	bl	8004fbc <HAL_TIMEx_ConfigBreakDeadTime>
 8001ffc:	b938      	cbnz	r0, 800200e <MX_TIM8_Init+0xde>
  HAL_TIM_MspPostInit(&htim8);
 8001ffe:	4818      	ldr	r0, [pc, #96]	; (8002060 <MX_TIM8_Init+0x130>)
 8002000:	f7ff fe9e 	bl	8001d40 <HAL_TIM_MspPostInit>
}
 8002004:	b018      	add	sp, #96	; 0x60
 8002006:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002008:	f7ff fce6 	bl	80019d8 <Error_Handler>
 800200c:	e7b2      	b.n	8001f74 <MX_TIM8_Init+0x44>
    Error_Handler();
 800200e:	f7ff fce3 	bl	80019d8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8002012:	4813      	ldr	r0, [pc, #76]	; (8002060 <MX_TIM8_Init+0x130>)
 8002014:	f7ff fe94 	bl	8001d40 <HAL_TIM_MspPostInit>
}
 8002018:	b018      	add	sp, #96	; 0x60
 800201a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800201c:	f7ff fcdc 	bl	80019d8 <Error_Handler>
 8002020:	e7d2      	b.n	8001fc8 <MX_TIM8_Init+0x98>
    Error_Handler();
 8002022:	f7ff fcd9 	bl	80019d8 <Error_Handler>
 8002026:	e7c9      	b.n	8001fbc <MX_TIM8_Init+0x8c>
    Error_Handler();
 8002028:	f7ff fcd6 	bl	80019d8 <Error_Handler>
 800202c:	e7c0      	b.n	8001fb0 <MX_TIM8_Init+0x80>
    Error_Handler();
 800202e:	f7ff fcd3 	bl	80019d8 <Error_Handler>
 8002032:	e7ab      	b.n	8001f8c <MX_TIM8_Init+0x5c>
 8002034:	f3af 8000 	nop.w
	...
 8002044:	0000000a 	.word	0x0000000a
 8002048:	00000000 	.word	0x00000000
 800204c:	00002000 	.word	0x00002000
 8002050:	00000004 	.word	0x00000004
 8002054:	00000000 	.word	0x00000000
 8002058:	02000000 	.word	0x02000000
 800205c:	00000004 	.word	0x00000004
 8002060:	200004b8 	.word	0x200004b8
 8002064:	40013400 	.word	0x40013400

08002068 <initFirstSin>:
  }
}

/* USER CODE BEGIN 1 */
float rad_to_sin_cnv_array[1024] = {0};
void initFirstSin(void){
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < 1024; i++)
  {
    float temp_rad = (float)i / 256 * M_PI * 2;
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 800206a:	4d19      	ldr	r5, [pc, #100]	; (80020d0 <initFirstSin+0x68>)
 800206c:	2300      	movs	r3, #0
    float temp_rad = (float)i / 256 * M_PI * 2;
 800206e:	a716      	add	r7, pc, #88	; (adr r7, 80020c8 <initFirstSin+0x60>)
 8002070:	e9d7 6700 	ldrd	r6, r7, [r7]
void initFirstSin(void){
 8002074:	ed2d 8b02 	vpush	{d8}
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8002078:	f845 3b04 	str.w	r3, [r5], #4
    float temp_rad = (float)i / 256 * M_PI * 2;
 800207c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80020d4 <initFirstSin+0x6c>
  for (int i = 0; i < 1024; i++)
 8002080:	2401      	movs	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002082:	ee07 4a90 	vmov	s15, r4
 8002086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 1024; i++)
 800208a:	3401      	adds	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 800208c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002090:	ee17 0a90 	vmov	r0, s15
 8002094:	f7fe fa58 	bl	8000548 <__aeabi_f2d>
 8002098:	4632      	mov	r2, r6
 800209a:	463b      	mov	r3, r7
 800209c:	f7fe faac 	bl	80005f8 <__aeabi_dmul>
 80020a0:	f7fe fda2 	bl	8000be8 <__aeabi_d2f>
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 80020a4:	f7fe fa50 	bl	8000548 <__aeabi_f2d>
 80020a8:	ec41 0b10 	vmov	d0, r0, r1
 80020ac:	f003 fd70 	bl	8005b90 <sin>
 80020b0:	ec51 0b10 	vmov	r0, r1, d0
 80020b4:	f7fe fd98 	bl	8000be8 <__aeabi_d2f>
  for (int i = 0; i < 1024; i++)
 80020b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 80020bc:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < 1024; i++)
 80020c0:	d1df      	bne.n	8002082 <initFirstSin+0x1a>
    // printf("rad %4.3f sin %4.3f\n",temp_rad,rad_to_sin_cnv_array[i]);
    // HAL_Delay(1);
  }
}
 80020c2:	ecbd 8b02 	vpop	{d8}
 80020c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020c8:	54442d18 	.word	0x54442d18
 80020cc:	401921fb 	.word	0x401921fb
 80020d0:	20000504 	.word	0x20000504
 80020d4:	3b800000 	.word	0x3b800000

080020d8 <setOutputRadianTIM1>:
float fast_sin(float rad)
{
  return rad_to_sin_cnv_array[(uint8_t)(rad / (M_PI * 2) * 256)];
}

void setOutputRadianTIM1(float out_rad, float output_voltage, float battery_voltage){
 80020d8:	b508      	push	{r3, lr}
 80020da:	eef0 0ae0 	vabs.f32	s1, s1
  const int pwm_cnt_centor = 700;
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > 24)
 80020de:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80020e2:	eef4 0ae7 	vcmpe.f32	s1, s15
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void setOutputRadianTIM1(float out_rad, float output_voltage, float battery_voltage){
 80020ea:	ed2d 8b02 	vpush	{d8}
 80020ee:	ee10 0a10 	vmov	r0, s0
  if (output_voltage > 24)
 80020f2:	dc3c      	bgt.n	800216e <setOutputRadianTIM1+0x96>
  {
    output_voltage = 0;
  }
  voltage_propotional_cnt = output_voltage / 24 * pwm_cnt_centor;
 80020f4:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8002188 <setOutputRadianTIM1+0xb0>
 80020f8:	ee20 8a88 	vmul.f32	s16, s1, s16
 80020fc:	eebd 8ac8 	vcvt.s32.f32	s16, s16

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002100:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8002104:	f7fe fa20 	bl	8000548 <__aeabi_f2d>
 8002108:	a31b      	add	r3, pc, #108	; (adr r3, 8002178 <setOutputRadianTIM1+0xa0>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe f8bd 	bl	800028c <__adddf3>
 8002112:	a31b      	add	r3, pc, #108	; (adr r3, 8002180 <setOutputRadianTIM1+0xa8>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe fa6e 	bl	80005f8 <__aeabi_dmul>
 800211c:	f7fe fd44 	bl	8000ba8 <__aeabi_d2uiz>
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <setOutputRadianTIM1+0xb4>)
 8002122:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8002190 <setOutputRadianTIM1+0xb8>
 8002126:	b2c0      	uxtb	r0, r0
 8002128:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 800212c:	ed91 7a00 	vldr	s14, [r1]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002130:	edd1 5a55 	vldr	s11, [r1, #340]	; 0x154
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002134:	ed91 6aaa 	vldr	s12, [r1, #680]	; 0x2a8
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002138:	4b16      	ldr	r3, [pc, #88]	; (8002194 <setOutputRadianTIM1+0xbc>)
 800213a:	eef0 6a67 	vmov.f32	s13, s15
 800213e:	eee7 6a08 	vfma.f32	s13, s14, s16
 8002142:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002144:	eeb0 7a67 	vmov.f32	s14, s15
 8002148:	eea5 7a88 	vfma.f32	s14, s11, s16
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 800214c:	eee6 7a08 	vfma.f32	s15, s12, s16
}
 8002150:	ecbd 8b02 	vpop	{d8}
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002154:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002158:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 800215c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002160:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002164:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002168:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800216c:	bd08      	pop	{r3, pc}
 800216e:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8002198 <setOutputRadianTIM1+0xc0>
 8002172:	e7c7      	b.n	8002104 <setOutputRadianTIM1+0x2c>
 8002174:	f3af 8000 	nop.w
 8002178:	54442d18 	.word	0x54442d18
 800217c:	402921fb 	.word	0x402921fb
 8002180:	3d5bfeba 	.word	0x3d5bfeba
 8002184:	40444ad1 	.word	0x40444ad1
 8002188:	41e95556 	.word	0x41e95556
 800218c:	20000504 	.word	0x20000504
 8002190:	442f0000 	.word	0x442f0000
 8002194:	2000046c 	.word	0x2000046c
	...

080021a0 <setOutputRadianTIM8>:

void setOutputRadianTIM8(float out_rad, float output_voltage, float battery_voltage){
 80021a0:	b508      	push	{r3, lr}
 80021a2:	eef0 0ae0 	vabs.f32	s1, s1
  const int pwm_cnt_centor = 700;
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > 24)
 80021a6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80021aa:	eef4 0ae7 	vcmpe.f32	s1, s15
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void setOutputRadianTIM8(float out_rad, float output_voltage, float battery_voltage){
 80021b2:	ed2d 8b02 	vpush	{d8}
 80021b6:	ee10 0a10 	vmov	r0, s0
  if (output_voltage > 24)
 80021ba:	dc3c      	bgt.n	8002236 <setOutputRadianTIM8+0x96>
  {
    output_voltage = 0;
  }
  voltage_propotional_cnt = output_voltage / 24 * pwm_cnt_centor;
 80021bc:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8002250 <setOutputRadianTIM8+0xb0>
 80021c0:	ee20 8a88 	vmul.f32	s16, s1, s16
 80021c4:	eebd 8ac8 	vcvt.s32.f32	s16, s16

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80021c8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 80021cc:	f7fe f9bc 	bl	8000548 <__aeabi_f2d>
 80021d0:	a31b      	add	r3, pc, #108	; (adr r3, 8002240 <setOutputRadianTIM8+0xa0>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe f859 	bl	800028c <__adddf3>
 80021da:	a31b      	add	r3, pc, #108	; (adr r3, 8002248 <setOutputRadianTIM8+0xa8>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fe fa0a 	bl	80005f8 <__aeabi_dmul>
 80021e4:	f7fe fce0 	bl	8000ba8 <__aeabi_d2uiz>
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <setOutputRadianTIM8+0xb4>)
 80021ea:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8002258 <setOutputRadianTIM8+0xb8>
 80021ee:	b2c0      	uxtb	r0, r0
 80021f0:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 80021f4:	ed91 7a00 	vldr	s14, [r1]
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80021f8:	edd1 5a55 	vldr	s11, [r1, #340]	; 0x154
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80021fc:	ed91 6aaa 	vldr	s12, [r1, #680]	; 0x2a8
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <setOutputRadianTIM8+0xbc>)
 8002202:	eef0 6a67 	vmov.f32	s13, s15
 8002206:	eee7 6a08 	vfma.f32	s13, s14, s16
 800220a:	681b      	ldr	r3, [r3, #0]
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 800220c:	eeb0 7a67 	vmov.f32	s14, s15
 8002210:	eea5 7a88 	vfma.f32	s14, s11, s16
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002214:	eee6 7a08 	vfma.f32	s15, s12, s16
}
 8002218:	ecbd 8b02 	vpop	{d8}
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 800221c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002220:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002228:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 800222c:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002230:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8002234:	bd08      	pop	{r3, pc}
 8002236:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8002260 <setOutputRadianTIM8+0xc0>
 800223a:	e7c7      	b.n	80021cc <setOutputRadianTIM8+0x2c>
 800223c:	f3af 8000 	nop.w
 8002240:	54442d18 	.word	0x54442d18
 8002244:	402921fb 	.word	0x402921fb
 8002248:	3d5bfeba 	.word	0x3d5bfeba
 800224c:	40444ad1 	.word	0x40444ad1
 8002250:	41e95556 	.word	0x41e95556
 8002254:	20000504 	.word	0x20000504
 8002258:	442f0000 	.word	0x442f0000
 800225c:	200004b8 	.word	0x200004b8
 8002260:	00000000 	.word	0x00000000

08002264 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002264:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <MX_USART1_UART_Init+0x30>)
 8002268:	4c0b      	ldr	r4, [pc, #44]	; (8002298 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 800226a:	490c      	ldr	r1, [pc, #48]	; (800229c <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800226c:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800226e:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 8002270:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002274:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002278:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002280:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002284:	f003 fc18 	bl	8005ab8 <HAL_UART_Init>
 8002288:	b900      	cbnz	r0, 800228c <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800228a:	bd10      	pop	{r4, pc}
 800228c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002290:	f7ff bba2 	b.w	80019d8 <Error_Handler>
 8002294:	20001504 	.word	0x20001504
 8002298:	40013800 	.word	0x40013800
 800229c:	001e8480 	.word	0x001e8480

080022a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022a0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_UART_MspInit+0x70>)
 80022a4:	6802      	ldr	r2, [r0, #0]
{
 80022a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 80022aa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80022b0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80022b4:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 80022b6:	d001      	beq.n	80022bc <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022b8:	b009      	add	sp, #36	; 0x24
 80022ba:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80022bc:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80022c2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c4:	4813      	ldr	r0, [pc, #76]	; (8002314 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80022c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ca:	619a      	str	r2, [r3, #24]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022dc:	615a      	str	r2, [r3, #20]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022e6:	2230      	movs	r2, #48	; 0x30
 80022e8:	2302      	movs	r3, #2
 80022ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ee:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022f0:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f8:	f001 face 	bl	8003898 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022fc:	4622      	mov	r2, r4
 80022fe:	4621      	mov	r1, r4
 8002300:	2025      	movs	r0, #37	; 0x25
 8002302:	f001 f94f 	bl	80035a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002306:	2025      	movs	r0, #37	; 0x25
 8002308:	f001 f98a 	bl	8003620 <HAL_NVIC_EnableIRQ>
}
 800230c:	b009      	add	sp, #36	; 0x24
 800230e:	bd30      	pop	{r4, r5, pc}
 8002310:	40013800 	.word	0x40013800
 8002314:	48000800 	.word	0x48000800

08002318 <Reset_Handler>:
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002350 <LoopForever+0x2>
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <LoopForever+0x6>)
 800231e:	490e      	ldr	r1, [pc, #56]	; (8002358 <LoopForever+0xa>)
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <LoopForever+0xe>)
 8002322:	2300      	movs	r3, #0
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:
 8002326:	58d4      	ldr	r4, [r2, r3]
 8002328:	50c4      	str	r4, [r0, r3]
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:
 800232c:	18c4      	adds	r4, r0, r3
 800232e:	428c      	cmp	r4, r1
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <LoopForever+0x12>)
 8002334:	4c0b      	ldr	r4, [pc, #44]	; (8002364 <LoopForever+0x16>)
 8002336:	2300      	movs	r3, #0
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:
 800233e:	42a2      	cmp	r2, r4
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>
 8002342:	f7ff fcb7 	bl	8001cb4 <SystemInit>
 8002346:	f004 fc73 	bl	8006c30 <__libc_init_array>
 800234a:	f7ff f965 	bl	8001618 <main>

0800234e <LoopForever>:
 800234e:	e7fe      	b.n	800234e <LoopForever>
 8002350:	20008000 	.word	0x20008000
 8002354:	20000000 	.word	0x20000000
 8002358:	200001dc 	.word	0x200001dc
 800235c:	08009eb4 	.word	0x08009eb4
 8002360:	200001e0 	.word	0x200001e0
 8002364:	2000159c 	.word	0x2000159c

08002368 <ADC1_2_IRQHandler>:
 8002368:	e7fe      	b.n	8002368 <ADC1_2_IRQHandler>
	...

0800236c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800236c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_InitTick+0x3c>)
 8002370:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_InitTick+0x40>)
 8002372:	7812      	ldrb	r2, [r2, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
{
 8002376:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800237c:	fbb0 f0f2 	udiv	r0, r0, r2
 8002380:	fbb3 f0f0 	udiv	r0, r3, r0
 8002384:	f001 f95a 	bl	800363c <HAL_SYSTICK_Config>
 8002388:	b908      	cbnz	r0, 800238e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	2d0f      	cmp	r5, #15
 800238c:	d901      	bls.n	8002392 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800238e:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8002390:	bd38      	pop	{r3, r4, r5, pc}
 8002392:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002394:	4602      	mov	r2, r0
 8002396:	4629      	mov	r1, r5
 8002398:	f04f 30ff 	mov.w	r0, #4294967295
 800239c:	f001 f902 	bl	80035a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_InitTick+0x44>)
 80023a2:	4620      	mov	r0, r4
 80023a4:	601d      	str	r5, [r3, #0]
}
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
 80023a8:	20000004 	.word	0x20000004
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000008 	.word	0x20000008

080023b4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_Init+0x20>)
{
 80023b6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b8:	6813      	ldr	r3, [r2, #0]
 80023ba:	f043 0310 	orr.w	r3, r3, #16
 80023be:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c0:	2003      	movs	r0, #3
 80023c2:	f001 f8dd 	bl	8003580 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c6:	200f      	movs	r0, #15
 80023c8:	f7ff ffd0 	bl	800236c <HAL_InitTick>
  HAL_MspInit();
 80023cc:	f7ff fbbc 	bl	8001b48 <HAL_MspInit>
}
 80023d0:	2000      	movs	r0, #0
 80023d2:	bd08      	pop	{r3, pc}
 80023d4:	40022000 	.word	0x40022000

080023d8 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80023d8:	4a03      	ldr	r2, [pc, #12]	; (80023e8 <HAL_IncTick+0x10>)
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <HAL_IncTick+0x14>)
 80023dc:	6811      	ldr	r1, [r2, #0]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	440b      	add	r3, r1
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20001588 	.word	0x20001588
 80023ec:	20000004 	.word	0x20000004

080023f0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80023f0:	4b01      	ldr	r3, [pc, #4]	; (80023f8 <HAL_GetTick+0x8>)
 80023f2:	6818      	ldr	r0, [r3, #0]
}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20001588 	.word	0x20001588

080023fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023fc:	b538      	push	{r3, r4, r5, lr}
 80023fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fff6 	bl	80023f0 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002404:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002406:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002408:	d002      	beq.n	8002410 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <HAL_Delay+0x20>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002410:	f7ff ffee 	bl	80023f0 <HAL_GetTick>
 8002414:	1b43      	subs	r3, r0, r5
 8002416:	42a3      	cmp	r3, r4
 8002418:	d3fa      	bcc.n	8002410 <HAL_Delay+0x14>
  {
  }
}
 800241a:	bd38      	pop	{r3, r4, r5, pc}
 800241c:	20000004 	.word	0x20000004

08002420 <HAL_ADC_ConvCpltCallback>:
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <HAL_ADC_ConvHalfCpltCallback>:
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop

08002428 <HAL_ADC_ErrorCallback>:
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop

0800242c <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800242c:	6802      	ldr	r2, [r0, #0]
{
 800242e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002430:	6893      	ldr	r3, [r2, #8]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800243a:	2000      	movs	r0, #0
}
 800243c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800243e:	6811      	ldr	r1, [r2, #0]
 8002440:	07cc      	lsls	r4, r1, #31
 8002442:	d5fa      	bpl.n	800243a <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002444:	6891      	ldr	r1, [r2, #8]
 8002446:	f001 010d 	and.w	r1, r1, #13
 800244a:	2901      	cmp	r1, #1
 800244c:	4604      	mov	r4, r0
 800244e:	d009      	beq.n	8002464 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002450:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002452:	f042 0210 	orr.w	r2, r2, #16
 8002456:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002458:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002462:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8002464:	6893      	ldr	r3, [r2, #8]
 8002466:	2103      	movs	r1, #3
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6093      	str	r3, [r2, #8]
 800246e:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8002470:	f7ff ffbe 	bl	80023f0 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 800247a:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800247c:	d403      	bmi.n	8002486 <ADC_Disable+0x5a>
 800247e:	e7dc      	b.n	800243a <ADC_Disable+0xe>
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	07db      	lsls	r3, r3, #31
 8002484:	d5d9      	bpl.n	800243a <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002486:	f7ff ffb3 	bl	80023f0 <HAL_GetTick>
 800248a:	1b40      	subs	r0, r0, r5
 800248c:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800248e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002490:	d9f6      	bls.n	8002480 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	07d2      	lsls	r2, r2, #31
 8002496:	d5f3      	bpl.n	8002480 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800249a:	f043 0310 	orr.w	r3, r3, #16
 800249e:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80024a2:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a4:	4303      	orrs	r3, r0
 80024a6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
 80024aa:	bf00      	nop

080024ac <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024ac:	6802      	ldr	r2, [r0, #0]
{
 80024ae:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024b0:	6893      	ldr	r3, [r2, #8]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b01      	cmp	r3, #1
{
 80024b8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024ba:	d025      	beq.n	8002508 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80024bc:	6891      	ldr	r1, [r2, #8]
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <ADC_Enable+0x68>)
 80024c0:	4219      	tst	r1, r3
 80024c2:	d008      	beq.n	80024d6 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024c6:	f043 0310 	orr.w	r3, r3, #16
 80024ca:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80024ce:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d0:	4303      	orrs	r3, r0
 80024d2:	6463      	str	r3, [r4, #68]	; 0x44
}
 80024d4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80024d6:	6893      	ldr	r3, [r2, #8]
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80024de:	f7ff ff87 	bl	80023f0 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024e2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 80024e4:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	07d9      	lsls	r1, r3, #31
 80024ea:	d40b      	bmi.n	8002504 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ec:	f7ff ff80 	bl	80023f0 <HAL_GetTick>
 80024f0:	1b43      	subs	r3, r0, r5
 80024f2:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024f4:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024f6:	d9f6      	bls.n	80024e6 <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	07d2      	lsls	r2, r2, #31
 80024fc:	d5e2      	bpl.n	80024c4 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	07d9      	lsls	r1, r3, #31
 8002502:	d5f3      	bpl.n	80024ec <ADC_Enable+0x40>
  return HAL_OK;
 8002504:	2000      	movs	r0, #0
}
 8002506:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002508:	6813      	ldr	r3, [r2, #0]
 800250a:	07d8      	lsls	r0, r3, #31
 800250c:	d5d6      	bpl.n	80024bc <ADC_Enable+0x10>
  return HAL_OK;
 800250e:	2000      	movs	r0, #0
 8002510:	e7f9      	b.n	8002506 <ADC_Enable+0x5a>
 8002512:	bf00      	nop
 8002514:	8000003f 	.word	0x8000003f

08002518 <ADC_DMAError>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002518:	6a40      	ldr	r0, [r0, #36]	; 0x24
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800251a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800251c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002520:	6403      	str	r3, [r0, #64]	; 0x40
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002522:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6443      	str	r3, [r0, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 800252a:	f7ff bf7d 	b.w	8002428 <HAL_ADC_ErrorCallback>
 800252e:	bf00      	nop

08002530 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002530:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002532:	f7ff bf77 	b.w	8002424 <HAL_ADC_ConvHalfCpltCallback>
 8002536:	bf00      	nop

08002538 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002538:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800253a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253c:	f012 0f50 	tst.w	r2, #80	; 0x50
 8002540:	d118      	bne.n	8002574 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002544:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800254c:	68ca      	ldr	r2, [r1, #12]
 800254e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002552:	d10c      	bne.n	800256e <ADC_DMAConvCplt+0x36>
 8002554:	7e5a      	ldrb	r2, [r3, #25]
 8002556:	b952      	cbnz	r2, 800256e <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800255a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002562:	04d2      	lsls	r2, r2, #19
 8002564:	d403      	bmi.n	800256e <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002568:	f042 0201 	orr.w	r2, r2, #1
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff bf56 	b.w	8002420 <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	4718      	bx	r3
 800257a:	bf00      	nop

0800257c <HAL_ADC_Init>:
{
 800257c:	b530      	push	{r4, r5, lr}
 800257e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8002584:	2800      	cmp	r0, #0
 8002586:	f000 809c 	beq.w	80026c2 <HAL_ADC_Init+0x146>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800258a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800258c:	f013 0310 	ands.w	r3, r3, #16
 8002590:	4604      	mov	r4, r0
 8002592:	d118      	bne.n	80025c6 <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002594:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002596:	2d00      	cmp	r5, #0
 8002598:	f000 8096 	beq.w	80026c8 <HAL_ADC_Init+0x14c>
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800259c:	6822      	ldr	r2, [r4, #0]
 800259e:	6891      	ldr	r1, [r2, #8]
 80025a0:	00c9      	lsls	r1, r1, #3
 80025a2:	f140 8082 	bpl.w	80026aa <HAL_ADC_Init+0x12e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80025a6:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80025a8:	008d      	lsls	r5, r1, #2
 80025aa:	d47e      	bmi.n	80026aa <HAL_ADC_Init+0x12e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025ac:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80025ae:	06c8      	lsls	r0, r1, #27
 80025b0:	d400      	bmi.n	80025b4 <HAL_ADC_Init+0x38>
 80025b2:	b163      	cbz	r3, 80025ce <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 80025b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b6:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 80025ba:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80025bc:	f043 0310 	orr.w	r3, r3, #16
 80025c0:	6423      	str	r3, [r4, #64]	; 0x40
}
 80025c2:	b003      	add	sp, #12
 80025c4:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025c8:	06da      	lsls	r2, r3, #27
 80025ca:	d4f3      	bmi.n	80025b4 <HAL_ADC_Init+0x38>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80025cc:	6802      	ldr	r2, [r0, #0]
 80025ce:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80025d0:	f010 0004 	ands.w	r0, r0, #4
 80025d4:	d1ee      	bne.n	80025b4 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 80025d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80025d8:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80025dc:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80025e4:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e6:	f000 80d9 	beq.w	800279c <HAL_ADC_Init+0x220>
 80025ea:	4b7d      	ldr	r3, [pc, #500]	; (80027e0 <HAL_ADC_Init+0x264>)
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f000 80dd 	beq.w	80027ac <HAL_ADC_Init+0x230>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025f2:	497c      	ldr	r1, [pc, #496]	; (80027e4 <HAL_ADC_Init+0x268>)
 80025f4:	428a      	cmp	r2, r1
 80025f6:	d074      	beq.n	80026e2 <HAL_ADC_Init+0x166>
 80025f8:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <HAL_ADC_Init+0x26c>)
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d072      	beq.n	80026e4 <HAL_ADC_Init+0x168>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80025fe:	6893      	ldr	r3, [r2, #8]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b01      	cmp	r3, #1
 8002606:	f000 80e3 	beq.w	80027d0 <HAL_ADC_Init+0x254>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800260a:	4d78      	ldr	r5, [pc, #480]	; (80027ec <HAL_ADC_Init+0x270>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 800260c:	68ab      	ldr	r3, [r5, #8]
 800260e:	6861      	ldr	r1, [r4, #4]
 8002610:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002614:	430b      	orrs	r3, r1
 8002616:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800261a:	68e1      	ldr	r1, [r4, #12]
 800261c:	7e65      	ldrb	r5, [r4, #25]
 800261e:	2b01      	cmp	r3, #1
 8002620:	68a3      	ldr	r3, [r4, #8]
 8002622:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002626:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800262a:	bf18      	it	ne
 800262c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002630:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002634:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002636:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800263a:	f000 8093 	beq.w	8002764 <HAL_ADC_Init+0x1e8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800263e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002640:	2901      	cmp	r1, #1
 8002642:	d00b      	beq.n	800265c <HAL_ADC_Init+0xe0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002644:	4867      	ldr	r0, [pc, #412]	; (80027e4 <HAL_ADC_Init+0x268>)
 8002646:	4282      	cmp	r2, r0
 8002648:	f000 809c 	beq.w	8002784 <HAL_ADC_Init+0x208>
 800264c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002650:	4282      	cmp	r2, r0
 8002652:	f000 8097 	beq.w	8002784 <HAL_ADC_Init+0x208>
 8002656:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002658:	4303      	orrs	r3, r0
 800265a:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800265c:	6891      	ldr	r1, [r2, #8]
 800265e:	f011 0f0c 	tst.w	r1, #12
 8002662:	d10c      	bne.n	800267e <HAL_ADC_Init+0x102>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002664:	68d1      	ldr	r1, [r2, #12]
 8002666:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800266a:	f021 0102 	bic.w	r1, r1, #2
 800266e:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002670:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002674:	7e20      	ldrb	r0, [r4, #24]
 8002676:	0049      	lsls	r1, r1, #1
 8002678:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800267c:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800267e:	68d0      	ldr	r0, [r2, #12]
 8002680:	495b      	ldr	r1, [pc, #364]	; (80027f0 <HAL_ADC_Init+0x274>)
 8002682:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002684:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8002686:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002688:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800268a:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800268c:	d072      	beq.n	8002774 <HAL_ADC_Init+0x1f8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800268e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002690:	f023 030f 	bic.w	r3, r3, #15
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8002696:	2000      	movs	r0, #0
 8002698:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800269a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800269c:	f023 0303 	bic.w	r3, r3, #3
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80026a6:	b003      	add	sp, #12
 80026a8:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80026aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026ac:	f023 0312 	bic.w	r3, r3, #18
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026c0:	e778      	b.n	80025b4 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 80026c2:	2001      	movs	r0, #1
}
 80026c4:	b003      	add	sp, #12
 80026c6:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 80026c8:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80026cc:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 80026ce:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80026d2:	f7fe fbd5 	bl	8000e80 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80026d6:	6822      	ldr	r2, [r4, #0]
 80026d8:	6893      	ldr	r3, [r2, #8]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	d511      	bpl.n	8002702 <HAL_ADC_Init+0x186>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026de:	462b      	mov	r3, r5
 80026e0:	e75d      	b.n	800259e <HAL_ADC_Init+0x22>
 80026e2:	4941      	ldr	r1, [pc, #260]	; (80027e8 <HAL_ADC_Init+0x26c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026e4:	4d41      	ldr	r5, [pc, #260]	; (80027ec <HAL_ADC_Init+0x270>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80026e6:	6893      	ldr	r3, [r2, #8]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d058      	beq.n	80027a2 <HAL_ADC_Init+0x226>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80026f0:	688b      	ldr	r3, [r1, #8]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d188      	bne.n	800260c <HAL_ADC_Init+0x90>
 80026fa:	680b      	ldr	r3, [r1, #0]
 80026fc:	07db      	lsls	r3, r3, #31
 80026fe:	d48b      	bmi.n	8002618 <HAL_ADC_Init+0x9c>
 8002700:	e784      	b.n	800260c <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 8002702:	4620      	mov	r0, r4
 8002704:	f7ff fe92 	bl	800242c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002708:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 800270a:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800270c:	06d0      	lsls	r0, r2, #27
 800270e:	f53f af45 	bmi.w	800259c <HAL_ADC_Init+0x20>
 8002712:	2b00      	cmp	r3, #0
 8002714:	f47f af42 	bne.w	800259c <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8002718:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800271a:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 800271c:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002720:	f021 0102 	bic.w	r1, r1, #2
 8002724:	f041 0102 	orr.w	r1, r1, #2
 8002728:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800272a:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800272c:	4931      	ldr	r1, [pc, #196]	; (80027f4 <HAL_ADC_Init+0x278>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800272e:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8002732:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002734:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002736:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002738:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800273c:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800273e:	482e      	ldr	r0, [pc, #184]	; (80027f8 <HAL_ADC_Init+0x27c>)
 8002740:	fba0 0101 	umull	r0, r1, r0, r1
 8002744:	0c89      	lsrs	r1, r1, #18
 8002746:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800274a:	0049      	lsls	r1, r1, #1
 800274c:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800274e:	9901      	ldr	r1, [sp, #4]
 8002750:	2900      	cmp	r1, #0
 8002752:	f43f af24 	beq.w	800259e <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8002756:	9901      	ldr	r1, [sp, #4]
 8002758:	3901      	subs	r1, #1
 800275a:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800275c:	9901      	ldr	r1, [sp, #4]
 800275e:	2900      	cmp	r1, #0
 8002760:	d1f9      	bne.n	8002756 <HAL_ADC_Init+0x1da>
 8002762:	e71c      	b.n	800259e <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002764:	bb35      	cbnz	r5, 80027b4 <HAL_ADC_Init+0x238>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002766:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002768:	3901      	subs	r1, #1
 800276a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800276e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002772:	e764      	b.n	800263e <HAL_ADC_Init+0xc2>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002774:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002776:	69e3      	ldr	r3, [r4, #28]
 8002778:	f021 010f 	bic.w	r1, r1, #15
 800277c:	3b01      	subs	r3, #1
 800277e:	430b      	orrs	r3, r1
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	e788      	b.n	8002696 <HAL_ADC_Init+0x11a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002784:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 8002788:	d01f      	beq.n	80027ca <HAL_ADC_Init+0x24e>
 800278a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800278e:	d024      	beq.n	80027da <HAL_ADC_Init+0x25e>
 8002790:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8002794:	bf08      	it	eq
 8002796:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800279a:	e75c      	b.n	8002656 <HAL_ADC_Init+0xda>
 800279c:	4910      	ldr	r1, [pc, #64]	; (80027e0 <HAL_ADC_Init+0x264>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800279e:	4d17      	ldr	r5, [pc, #92]	; (80027fc <HAL_ADC_Init+0x280>)
 80027a0:	e7a1      	b.n	80026e6 <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027a2:	6813      	ldr	r3, [r2, #0]
 80027a4:	07db      	lsls	r3, r3, #31
 80027a6:	f53f af37 	bmi.w	8002618 <HAL_ADC_Init+0x9c>
 80027aa:	e7a1      	b.n	80026f0 <HAL_ADC_Init+0x174>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027ac:	4d13      	ldr	r5, [pc, #76]	; (80027fc <HAL_ADC_Init+0x280>)
 80027ae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80027b2:	e798      	b.n	80026e6 <HAL_ADC_Init+0x16a>
        ADC_STATE_CLR_SET(hadc->State,
 80027b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80027b6:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80027ba:	f041 0120 	orr.w	r1, r1, #32
 80027be:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80027c2:	f041 0101 	orr.w	r1, r1, #1
 80027c6:	6461      	str	r1, [r4, #68]	; 0x44
 80027c8:	e739      	b.n	800263e <HAL_ADC_Init+0xc2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80027ca:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80027ce:	e742      	b.n	8002656 <HAL_ADC_Init+0xda>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027d0:	6813      	ldr	r3, [r2, #0]
 80027d2:	07d9      	lsls	r1, r3, #31
 80027d4:	f53f af20 	bmi.w	8002618 <HAL_ADC_Init+0x9c>
 80027d8:	e717      	b.n	800260a <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80027da:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80027de:	e73a      	b.n	8002656 <HAL_ADC_Init+0xda>
 80027e0:	50000100 	.word	0x50000100
 80027e4:	50000400 	.word	0x50000400
 80027e8:	50000500 	.word	0x50000500
 80027ec:	50000700 	.word	0x50000700
 80027f0:	fff0c007 	.word	0xfff0c007
 80027f4:	20000000 	.word	0x20000000
 80027f8:	431bde83 	.word	0x431bde83
 80027fc:	50000300 	.word	0x50000300

08002800 <HAL_ADC_Start_DMA>:
{
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002804:	6800      	ldr	r0, [r0, #0]
 8002806:	6885      	ldr	r5, [r0, #8]
 8002808:	076d      	lsls	r5, r5, #29
 800280a:	d423      	bmi.n	8002854 <HAL_ADC_Start_DMA+0x54>
    __HAL_LOCK(hadc);
 800280c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d01f      	beq.n	8002854 <HAL_ADC_Start_DMA+0x54>
 8002814:	2301      	movs	r3, #1
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002816:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800281a:	460f      	mov	r7, r1
 800281c:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 800281e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002822:	d00f      	beq.n	8002844 <HAL_ADC_Start_DMA+0x44>
 8002824:	4b45      	ldr	r3, [pc, #276]	; (800293c <HAL_ADC_Start_DMA+0x13c>)
 8002826:	4298      	cmp	r0, r3
 8002828:	d00c      	beq.n	8002844 <HAL_ADC_Start_DMA+0x44>
 800282a:	4b45      	ldr	r3, [pc, #276]	; (8002940 <HAL_ADC_Start_DMA+0x140>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f013 0f1f 	tst.w	r3, #31
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b97b      	cbnz	r3, 800285a <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 800283a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 800283e:	2501      	movs	r5, #1
}
 8002840:	4628      	mov	r0, r5
 8002842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002844:	4b3f      	ldr	r3, [pc, #252]	; (8002944 <HAL_ADC_Start_DMA+0x144>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f013 0f1f 	tst.w	r3, #31
 800284c:	bf0c      	ite	eq
 800284e:	2301      	moveq	r3, #1
 8002850:	2300      	movne	r3, #0
 8002852:	e7f1      	b.n	8002838 <HAL_ADC_Start_DMA+0x38>
    tmp_hal_status = HAL_BUSY;
 8002854:	2502      	movs	r5, #2
}
 8002856:	4628      	mov	r0, r5
 8002858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800285a:	4620      	mov	r0, r4
 800285c:	f7ff fe26 	bl	80024ac <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8002860:	4605      	mov	r5, r0
 8002862:	2800      	cmp	r0, #0
 8002864:	d14d      	bne.n	8002902 <HAL_ADC_Start_DMA+0x102>
        ADC_STATE_CLR_SET(hadc->State,
 8002866:	6c23      	ldr	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002868:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 800286a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800286e:	f023 0301 	bic.w	r3, r3, #1
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002876:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
        ADC_STATE_CLR_SET(hadc->State,
 800287a:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800287c:	d053      	beq.n	8002926 <HAL_ADC_Start_DMA+0x126>
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_ADC_Start_DMA+0x13c>)
 8002880:	4299      	cmp	r1, r3
 8002882:	d042      	beq.n	800290a <HAL_ADC_Start_DMA+0x10a>
 8002884:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	06d8      	lsls	r0, r3, #27
 800288c:	d04d      	beq.n	800292a <HAL_ADC_Start_DMA+0x12a>
 800288e:	4a2e      	ldr	r2, [pc, #184]	; (8002948 <HAL_ADC_Start_DMA+0x148>)
 8002890:	4291      	cmp	r1, r2
 8002892:	d04a      	beq.n	800292a <HAL_ADC_Start_DMA+0x12a>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800289a:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800289c:	68d3      	ldr	r3, [r2, #12]
 800289e:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80028a2:	b12b      	cbz	r3, 80028b0 <HAL_ADC_Start_DMA+0xb0>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028ae:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028b2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80028b4:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8002954 <HAL_ADC_Start_DMA+0x154>
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028b8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028bc:	bf1c      	itt	ne
 80028be:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 80028c0:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80028c4:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028c6:	463a      	mov	r2, r7
 80028c8:	4633      	mov	r3, r6
        __HAL_UNLOCK(hadc);
 80028ca:	f04f 0e00 	mov.w	lr, #0
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028ce:	4e1f      	ldr	r6, [pc, #124]	; (800294c <HAL_ADC_Start_DMA+0x14c>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028d0:	4f1f      	ldr	r7, [pc, #124]	; (8002950 <HAL_ADC_Start_DMA+0x150>)
        __HAL_UNLOCK(hadc);
 80028d2:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028d6:	6306      	str	r6, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028d8:	261c      	movs	r6, #28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028da:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028de:	600e      	str	r6, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028e0:	684e      	ldr	r6, [r1, #4]
 80028e2:	f046 0610 	orr.w	r6, r6, #16
 80028e6:	604e      	str	r6, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80028e8:	68ce      	ldr	r6, [r1, #12]
 80028ea:	f046 0601 	orr.w	r6, r6, #1
 80028ee:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028f0:	3140      	adds	r1, #64	; 0x40
 80028f2:	f000 ff01 	bl	80036f8 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80028f6:	6822      	ldr	r2, [r4, #0]
 80028f8:	6893      	ldr	r3, [r2, #8]
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6093      	str	r3, [r2, #8]
 8002900:	e79e      	b.n	8002840 <HAL_ADC_Start_DMA+0x40>
        __HAL_UNLOCK(hadc);
 8002902:	2300      	movs	r3, #0
 8002904:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002908:	e79a      	b.n	8002840 <HAL_ADC_Start_DMA+0x40>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800290a:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <HAL_ADC_Start_DMA+0x144>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	06db      	lsls	r3, r3, #27
 8002910:	d00b      	beq.n	800292a <HAL_ADC_Start_DMA+0x12a>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002918:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800291a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f3c3 6340 	ubfx	r3, r3, #25, #1
 8002924:	e7bd      	b.n	80028a2 <HAL_ADC_Start_DMA+0xa2>
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_ADC_Start_DMA+0x144>)
 8002928:	689b      	ldr	r3, [r3, #8]
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800292a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800292c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002930:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002932:	68cb      	ldr	r3, [r1, #12]
 8002934:	019a      	lsls	r2, r3, #6
 8002936:	d5bb      	bpl.n	80028b0 <HAL_ADC_Start_DMA+0xb0>
 8002938:	e7b4      	b.n	80028a4 <HAL_ADC_Start_DMA+0xa4>
 800293a:	bf00      	nop
 800293c:	50000100 	.word	0x50000100
 8002940:	50000700 	.word	0x50000700
 8002944:	50000300 	.word	0x50000300
 8002948:	50000400 	.word	0x50000400
 800294c:	08002519 	.word	0x08002519
 8002950:	08002531 	.word	0x08002531
 8002954:	08002539 	.word	0x08002539

08002958 <HAL_ADCEx_Calibration_Start>:
{
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800295a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d040      	beq.n	80029e4 <HAL_ADCEx_Calibration_Start+0x8c>
 8002962:	2701      	movs	r7, #1
 8002964:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8002968:	4604      	mov	r4, r0
 800296a:	460d      	mov	r5, r1
 800296c:	f7ff fd5e 	bl	800242c <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8002970:	4606      	mov	r6, r0
 8002972:	2800      	cmp	r0, #0
 8002974:	d131      	bne.n	80029da <HAL_ADCEx_Calibration_Start+0x82>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002976:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 8002978:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800297a:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800297c:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800297e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002982:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002984:	d103      	bne.n	800298e <HAL_ADCEx_Calibration_Start+0x36>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800298c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002994:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002996:	f7ff fd2b 	bl	80023f0 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800299a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 800299c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da14      	bge.n	80029ce <HAL_ADCEx_Calibration_Start+0x76>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80029a4:	f7ff fd24 	bl	80023f0 <HAL_GetTick>
 80029a8:	1b43      	subs	r3, r0, r5
 80029aa:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80029ac:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80029ae:	d9f6      	bls.n	800299e <HAL_ADCEx_Calibration_Start+0x46>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	2a00      	cmp	r2, #0
 80029b4:	daf3      	bge.n	800299e <HAL_ADCEx_Calibration_Start+0x46>
          ADC_STATE_CLR_SET(hadc->State,
 80029b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 80029b8:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 80029ba:	f023 0312 	bic.w	r3, r3, #18
 80029be:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 80029c2:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 80029c4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 80029c8:	6423      	str	r3, [r4, #64]	; 0x40
}
 80029ca:	4630      	mov	r0, r6
 80029cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80029ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029d0:	f023 0303 	bic.w	r3, r3, #3
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80029da:	2300      	movs	r3, #0
 80029dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80029e0:	4630      	mov	r0, r6
 80029e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 80029e4:	2602      	movs	r6, #2
}
 80029e6:	4630      	mov	r0, r6
 80029e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029ea:	bf00      	nop

080029ec <HAL_ADC_ConfigChannel>:
{
 80029ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80029ee:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029f2:	68cc      	ldr	r4, [r1, #12]
{
 80029f4:	b083      	sub	sp, #12
 80029f6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80029f8:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 80029fa:	f04f 0000 	mov.w	r0, #0
 80029fe:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002a00:	f000 8106 	beq.w	8002c10 <HAL_ADC_ConfigChannel+0x224>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a04:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a0c:	6895      	ldr	r5, [r2, #8]
 8002a0e:	076d      	lsls	r5, r5, #29
 8002a10:	d43a      	bmi.n	8002a88 <HAL_ADC_ConfigChannel+0x9c>
    if (sConfig->Rank < 5U)
 8002a12:	6848      	ldr	r0, [r1, #4]
 8002a14:	2804      	cmp	r0, #4
 8002a16:	f200 808b 	bhi.w	8002b30 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 8002a1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a1e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002a20:	680d      	ldr	r5, [r1, #0]
 8002a22:	0040      	lsls	r0, r0, #1
 8002a24:	f04f 0c1f 	mov.w	ip, #31
 8002a28:	fa0c fc00 	lsl.w	ip, ip, r0
 8002a2c:	ea26 0c0c 	bic.w	ip, r6, ip
 8002a30:	fa05 f000 	lsl.w	r0, r5, r0
 8002a34:	ea4c 0000 	orr.w	r0, ip, r0
 8002a38:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002a3a:	6890      	ldr	r0, [r2, #8]
 8002a3c:	f010 0f0c 	tst.w	r0, #12
 8002a40:	d134      	bne.n	8002aac <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a42:	2d09      	cmp	r5, #9
 8002a44:	f200 808b 	bhi.w	8002b5e <HAL_ADC_ConfigChannel+0x172>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a48:	6950      	ldr	r0, [r2, #20]
 8002a4a:	688e      	ldr	r6, [r1, #8]
 8002a4c:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8002a50:	f04f 0c07 	mov.w	ip, #7
 8002a54:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002a58:	fa06 f60e 	lsl.w	r6, r6, lr
 8002a5c:	ea20 000c 	bic.w	r0, r0, ip
 8002a60:	4330      	orrs	r0, r6
 8002a62:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a64:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8002a66:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a68:	694f      	ldr	r7, [r1, #20]
 8002a6a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002a6e:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8002a70:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002a72:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8002a76:	2e03      	cmp	r6, #3
 8002a78:	f200 8146 	bhi.w	8002d08 <HAL_ADC_ConfigChannel+0x31c>
 8002a7c:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002a80:	0108000d 	.word	0x0108000d
 8002a84:	00f400fe 	.word	0x00f400fe
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8a:	f042 0220 	orr.w	r2, r2, #32
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002a96:	b003      	add	sp, #12
 8002a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002a9a:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8002a9c:	4ea9      	ldr	r6, [pc, #676]	; (8002d44 <HAL_ADC_ConfigChannel+0x358>)
 8002a9e:	403e      	ands	r6, r7
 8002aa0:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002aa4:	4330      	orrs	r0, r6
 8002aa6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002aaa:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aac:	6890      	ldr	r0, [r2, #8]
 8002aae:	f000 0003 	and.w	r0, r0, #3
 8002ab2:	2801      	cmp	r0, #1
 8002ab4:	f000 80a7 	beq.w	8002c06 <HAL_ADC_ConfigChannel+0x21a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ab8:	2c01      	cmp	r4, #1
 8002aba:	f000 80ac 	beq.w	8002c16 <HAL_ADC_ConfigChannel+0x22a>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002abe:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	40a8      	lsls	r0, r5
 8002ac6:	ea21 0100 	bic.w	r1, r1, r0
 8002aca:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ace:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002ad2:	d078      	beq.n	8002bc6 <HAL_ADC_ConfigChannel+0x1da>
 8002ad4:	499c      	ldr	r1, [pc, #624]	; (8002d48 <HAL_ADC_ConfigChannel+0x35c>)
 8002ad6:	428a      	cmp	r2, r1
 8002ad8:	d075      	beq.n	8002bc6 <HAL_ADC_ConfigChannel+0x1da>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ada:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002adc:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ae0:	d074      	beq.n	8002bcc <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ae2:	2d11      	cmp	r5, #17
 8002ae4:	f040 80ac 	bne.w	8002c40 <HAL_ADC_ConfigChannel+0x254>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ae8:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002aea:	01c4      	lsls	r4, r0, #7
 8002aec:	d471      	bmi.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002aee:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002af2:	d070      	beq.n	8002bd6 <HAL_ADC_ConfigChannel+0x1ea>
 8002af4:	4894      	ldr	r0, [pc, #592]	; (8002d48 <HAL_ADC_ConfigChannel+0x35c>)
 8002af6:	4282      	cmp	r2, r0
 8002af8:	f000 80dd 	beq.w	8002cb6 <HAL_ADC_ConfigChannel+0x2ca>
 8002afc:	4c93      	ldr	r4, [pc, #588]	; (8002d4c <HAL_ADC_ConfigChannel+0x360>)
 8002afe:	42a2      	cmp	r2, r4
 8002b00:	f000 80fc 	beq.w	8002cfc <HAL_ADC_ConfigChannel+0x310>
 8002b04:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002b08:	4282      	cmp	r2, r0
 8002b0a:	d065      	beq.n	8002bd8 <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b0c:	6890      	ldr	r0, [r2, #8]
 8002b0e:	f000 0003 	and.w	r0, r0, #3
 8002b12:	2801      	cmp	r0, #1
 8002b14:	f000 80f4 	beq.w	8002d00 <HAL_ADC_ConfigChannel+0x314>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b18:	2d10      	cmp	r5, #16
 8002b1a:	d05a      	beq.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b1c:	2d11      	cmp	r5, #17
 8002b1e:	d058      	beq.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b20:	2d12      	cmp	r5, #18
 8002b22:	d156      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b24:	688a      	ldr	r2, [r1, #8]
 8002b26:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2a:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002b2c:	608a      	str	r2, [r1, #8]
 8002b2e:	e7af      	b.n	8002a90 <HAL_ADC_ConfigChannel+0xa4>
    else if (sConfig->Rank < 10U)
 8002b30:	2809      	cmp	r0, #9
 8002b32:	d925      	bls.n	8002b80 <HAL_ADC_ConfigChannel+0x194>
    else if (sConfig->Rank < 15U)
 8002b34:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b3a:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8002b3e:	f200 8085 	bhi.w	8002c4c <HAL_ADC_ConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b42:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8002b44:	680d      	ldr	r5, [r1, #0]
 8002b46:	383c      	subs	r0, #60	; 0x3c
 8002b48:	f04f 0c1f 	mov.w	ip, #31
 8002b4c:	fa0c fc00 	lsl.w	ip, ip, r0
 8002b50:	ea26 060c 	bic.w	r6, r6, ip
 8002b54:	fa05 f000 	lsl.w	r0, r5, r0
 8002b58:	4330      	orrs	r0, r6
 8002b5a:	6390      	str	r0, [r2, #56]	; 0x38
 8002b5c:	e76d      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b5e:	688f      	ldr	r7, [r1, #8]
 8002b60:	6990      	ldr	r0, [r2, #24]
 8002b62:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8002b66:	3e1e      	subs	r6, #30
 8002b68:	f04f 0e07 	mov.w	lr, #7
 8002b6c:	fa07 fc06 	lsl.w	ip, r7, r6
 8002b70:	fa0e f606 	lsl.w	r6, lr, r6
 8002b74:	ea20 0006 	bic.w	r0, r0, r6
 8002b78:	ea40 000c 	orr.w	r0, r0, ip
 8002b7c:	6190      	str	r0, [r2, #24]
 8002b7e:	e771      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->SQR2,
 8002b80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b84:	0040      	lsls	r0, r0, #1
 8002b86:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8002b88:	680d      	ldr	r5, [r1, #0]
 8002b8a:	381e      	subs	r0, #30
 8002b8c:	f04f 0c1f 	mov.w	ip, #31
 8002b90:	fa0c fc00 	lsl.w	ip, ip, r0
 8002b94:	ea26 060c 	bic.w	r6, r6, ip
 8002b98:	fa05 f000 	lsl.w	r0, r5, r0
 8002b9c:	4330      	orrs	r0, r6
 8002b9e:	6350      	str	r0, [r2, #52]	; 0x34
 8002ba0:	e74b      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x4e>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002ba2:	1c6c      	adds	r4, r5, #1
 8002ba4:	688e      	ldr	r6, [r1, #8]
 8002ba6:	6950      	ldr	r0, [r2, #20]
 8002ba8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002bac:	2107      	movs	r1, #7
 8002bae:	40a1      	lsls	r1, r4
 8002bb0:	40a6      	lsls	r6, r4
 8002bb2:	ea20 0101 	bic.w	r1, r0, r1
 8002bb6:	4331      	orrs	r1, r6
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bb8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8002bbc:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bbe:	d008      	beq.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
 8002bc0:	4961      	ldr	r1, [pc, #388]	; (8002d48 <HAL_ADC_ConfigChannel+0x35c>)
 8002bc2:	428a      	cmp	r2, r1
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bc6:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc8:	4961      	ldr	r1, [pc, #388]	; (8002d50 <HAL_ADC_ConfigChannel+0x364>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bca:	d18a      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0xf6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002bcc:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bce:	0206      	lsls	r6, r0, #8
 8002bd0:	d58d      	bpl.n	8002aee <HAL_ADC_ConfigChannel+0x102>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	e75c      	b.n	8002a90 <HAL_ADC_ConfigChannel+0xa4>
 8002bd6:	4c5c      	ldr	r4, [pc, #368]	; (8002d48 <HAL_ADC_ConfigChannel+0x35c>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002bd8:	6890      	ldr	r0, [r2, #8]
 8002bda:	f000 0003 	and.w	r0, r0, #3
 8002bde:	2801      	cmp	r0, #1
 8002be0:	d060      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x2b8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002be2:	68a0      	ldr	r0, [r4, #8]
 8002be4:	f000 0003 	and.w	r0, r0, #3
 8002be8:	2801      	cmp	r0, #1
 8002bea:	d067      	beq.n	8002cbc <HAL_ADC_ConfigChannel+0x2d0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bec:	2d10      	cmp	r5, #16
 8002bee:	d069      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0x2d8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002bf0:	2d11      	cmp	r5, #17
 8002bf2:	d195      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x134>
 8002bf4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002bf8:	d1eb      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002bfa:	688a      	ldr	r2, [r1, #8]
 8002bfc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c00:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002c02:	608a      	str	r2, [r1, #8]
 8002c04:	e744      	b.n	8002a90 <HAL_ADC_ConfigChannel+0xa4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c06:	6810      	ldr	r0, [r2, #0]
 8002c08:	07c7      	lsls	r7, r0, #31
 8002c0a:	f57f af55 	bpl.w	8002ab8 <HAL_ADC_ConfigChannel+0xcc>
 8002c0e:	e7e0      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
  __HAL_LOCK(hadc);
 8002c10:	2002      	movs	r0, #2
}
 8002c12:	b003      	add	sp, #12
 8002c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c16:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8002c1a:	40ac      	lsls	r4, r5
 8002c1c:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c1e:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002c20:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c24:	d9bd      	bls.n	8002ba2 <HAL_ADC_ConfigChannel+0x1b6>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002c26:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8002c2a:	688e      	ldr	r6, [r1, #8]
 8002c2c:	6990      	ldr	r0, [r2, #24]
 8002c2e:	3c1b      	subs	r4, #27
 8002c30:	2107      	movs	r1, #7
 8002c32:	40a1      	lsls	r1, r4
 8002c34:	40a6      	lsls	r6, r4
 8002c36:	ea20 0101 	bic.w	r1, r0, r1
 8002c3a:	4331      	orrs	r1, r6
 8002c3c:	6191      	str	r1, [r2, #24]
 8002c3e:	e746      	b.n	8002ace <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002c40:	2d12      	cmp	r5, #18
 8002c42:	d1c6      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002c44:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002c46:	0240      	lsls	r0, r0, #9
 8002c48:	d4c3      	bmi.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
 8002c4a:	e750      	b.n	8002aee <HAL_ADC_ConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002c4c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8002c4e:	680d      	ldr	r5, [r1, #0]
 8002c50:	385a      	subs	r0, #90	; 0x5a
 8002c52:	f04f 0c1f 	mov.w	ip, #31
 8002c56:	fa0c fc00 	lsl.w	ip, ip, r0
 8002c5a:	ea26 060c 	bic.w	r6, r6, ip
 8002c5e:	fa05 f000 	lsl.w	r0, r5, r0
 8002c62:	4330      	orrs	r0, r6
 8002c64:	63d0      	str	r0, [r2, #60]	; 0x3c
 8002c66:	e6e8      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002c68:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8002c6a:	4e36      	ldr	r6, [pc, #216]	; (8002d44 <HAL_ADC_ConfigChannel+0x358>)
 8002c6c:	403e      	ands	r6, r7
 8002c6e:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002c72:	4330      	orrs	r0, r6
 8002c74:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002c78:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8002c7a:	e717      	b.n	8002aac <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002c7c:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8002c7e:	4e31      	ldr	r6, [pc, #196]	; (8002d44 <HAL_ADC_ConfigChannel+0x358>)
 8002c80:	403e      	ands	r6, r7
 8002c82:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002c86:	4330      	orrs	r0, r6
 8002c88:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002c8c:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8002c8e:	e70d      	b.n	8002aac <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002c90:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8002c92:	4e2c      	ldr	r6, [pc, #176]	; (8002d44 <HAL_ADC_ConfigChannel+0x358>)
 8002c94:	403e      	ands	r6, r7
 8002c96:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002c9a:	4330      	orrs	r0, r6
 8002c9c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002ca0:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8002ca2:	e703      	b.n	8002aac <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ca4:	6810      	ldr	r0, [r2, #0]
 8002ca6:	07c6      	lsls	r6, r0, #31
 8002ca8:	d59b      	bpl.n	8002be2 <HAL_ADC_ConfigChannel+0x1f6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cac:	f042 0220 	orr.w	r2, r2, #32
        tmp_hal_status = HAL_ERROR;
 8002cb0:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb2:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002cb4:	e6ec      	b.n	8002a90 <HAL_ADC_ConfigChannel+0xa4>
 8002cb6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8002cba:	e78d      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x1ec>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cbc:	6820      	ldr	r0, [r4, #0]
 8002cbe:	07c0      	lsls	r0, r0, #31
 8002cc0:	d4f3      	bmi.n	8002caa <HAL_ADC_ConfigChannel+0x2be>
 8002cc2:	e793      	b.n	8002bec <HAL_ADC_ConfigChannel+0x200>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cc4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002cc8:	d183      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cca:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <HAL_ADC_ConfigChannel+0x368>)
 8002ccc:	4c22      	ldr	r4, [pc, #136]	; (8002d58 <HAL_ADC_ConfigChannel+0x36c>)
 8002cce:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002cd0:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cd2:	fba4 4202 	umull	r4, r2, r4, r2
 8002cd6:	0c92      	lsrs	r2, r2, #18
 8002cd8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002cdc:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002ce2:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce4:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002ce6:	9a01      	ldr	r2, [sp, #4]
 8002ce8:	2a00      	cmp	r2, #0
 8002cea:	f43f af72 	beq.w	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
            wait_loop_index--;
 8002cee:	9a01      	ldr	r2, [sp, #4]
 8002cf0:	3a01      	subs	r2, #1
 8002cf2:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002cf4:	9a01      	ldr	r2, [sp, #4]
 8002cf6:	2a00      	cmp	r2, #0
 8002cf8:	d1f9      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x302>
 8002cfa:	e76a      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e6>
 8002cfc:	4c17      	ldr	r4, [pc, #92]	; (8002d5c <HAL_ADC_ConfigChannel+0x370>)
 8002cfe:	e76b      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	07d7      	lsls	r7, r2, #31
 8002d04:	d4d1      	bmi.n	8002caa <HAL_ADC_ConfigChannel+0x2be>
 8002d06:	e707      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d08:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002d0a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002d0e:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8002d12:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8002d16:	d023      	beq.n	8002d60 <HAL_ADC_ConfigChannel+0x374>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d18:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002d1a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002d1e:	4286      	cmp	r6, r0
 8002d20:	d023      	beq.n	8002d6a <HAL_ADC_ConfigChannel+0x37e>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d22:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002d24:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002d28:	4286      	cmp	r6, r0
 8002d2a:	d023      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0x388>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d2c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002d2e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002d32:	4286      	cmp	r6, r0
 8002d34:	f47f aeba 	bne.w	8002aac <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002d38:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002d3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002d3e:	66d0      	str	r0, [r2, #108]	; 0x6c
 8002d40:	e6b4      	b.n	8002aac <HAL_ADC_ConfigChannel+0xc0>
 8002d42:	bf00      	nop
 8002d44:	83fff000 	.word	0x83fff000
 8002d48:	50000100 	.word	0x50000100
 8002d4c:	50000400 	.word	0x50000400
 8002d50:	50000300 	.word	0x50000300
 8002d54:	20000000 	.word	0x20000000
 8002d58:	431bde83 	.word	0x431bde83
 8002d5c:	50000500 	.word	0x50000500
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002d60:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002d62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002d66:	6610      	str	r0, [r2, #96]	; 0x60
 8002d68:	e7d6      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x32c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002d6a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002d6c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002d70:	6650      	str	r0, [r2, #100]	; 0x64
 8002d72:	e7d6      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x336>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d74:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002d76:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002d7a:	6690      	str	r0, [r2, #104]	; 0x68
 8002d7c:	e7d6      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x340>
 8002d7e:	bf00      	nop

08002d80 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d80:	6803      	ldr	r3, [r0, #0]
 8002d82:	4a45      	ldr	r2, [pc, #276]	; (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8002d88:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d8a:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d8c:	d00e      	beq.n	8002dac <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00a      	beq.n	8002da8 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8002d92:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d04b      	beq.n	8002e32 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8002d9a:	4c40      	ldr	r4, [pc, #256]	; (8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002d9c:	42a3      	cmp	r3, r4
 8002d9e:	d005      	beq.n	8002dac <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8002da0:	2201      	movs	r2, #1
} 
 8002da2:	4610      	mov	r0, r2
 8002da4:	bcf0      	pop	{r4, r5, r6, r7}
 8002da6:	4770      	bx	lr
 8002da8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8002dac:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 8002db0:	f1bc 0f01 	cmp.w	ip, #1
 8002db4:	d043      	beq.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8002db6:	2401      	movs	r4, #1
 8002db8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002dbc:	689c      	ldr	r4, [r3, #8]
 8002dbe:	0766      	lsls	r6, r4, #29
 8002dc0:	d50a      	bpl.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002dc4:	f043 0320 	orr.w	r3, r3, #32
    tmp_hal_status = HAL_ERROR;
 8002dc8:	2201      	movs	r2, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dca:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
} 
 8002dd2:	bcf0      	pop	{r4, r5, r6, r7}
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002dd8:	6894      	ldr	r4, [r2, #8]
 8002dda:	0764      	lsls	r4, r4, #29
 8002ddc:	d4f1      	bmi.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de2:	d046      	beq.n	8002e72 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002de4:	4f2c      	ldr	r7, [pc, #176]	; (8002e98 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8002de6:	4e2e      	ldr	r6, [pc, #184]	; (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002de8:	4c2e      	ldr	r4, [pc, #184]	; (8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8002dea:	42bb      	cmp	r3, r7
 8002dec:	bf08      	it	eq
 8002dee:	4634      	moveq	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002df0:	b34d      	cbz	r5, 8002e46 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002df2:	68a6      	ldr	r6, [r4, #8]
 8002df4:	684f      	ldr	r7, [r1, #4]
 8002df6:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 8002dfa:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 8002dfe:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8002e02:	ea46 060c 	orr.w	r6, r6, ip
 8002e06:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e08:	689e      	ldr	r6, [r3, #8]
 8002e0a:	f006 0603 	and.w	r6, r6, #3
 8002e0e:	2e01      	cmp	r6, #1
 8002e10:	d03d      	beq.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x10e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e12:	6893      	ldr	r3, [r2, #8]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d030      	beq.n	8002e7e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e1c:	68a2      	ldr	r2, [r4, #8]
 8002e1e:	688b      	ldr	r3, [r1, #8]
 8002e20:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002e24:	431d      	orrs	r5, r3
 8002e26:	f022 020f 	bic.w	r2, r2, #15
 8002e2a:	4315      	orrs	r5, r2
 8002e2c:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e2e:	2200      	movs	r2, #0
 8002e30:	e7cc      	b.n	8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 8002e32:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 8002e36:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8002e38:	f1bc 0f01 	cmp.w	ip, #1
 8002e3c:	d1bb      	bne.n	8002db6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002e3e:	2202      	movs	r2, #2
} 
 8002e40:	4610      	mov	r0, r2
 8002e42:	bcf0      	pop	{r4, r5, r6, r7}
 8002e44:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e46:	68a1      	ldr	r1, [r4, #8]
 8002e48:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8002e4c:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	f001 0103 	and.w	r1, r1, #3
 8002e54:	2901      	cmp	r1, #1
 8002e56:	d016      	beq.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x106>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e58:	6893      	ldr	r3, [r2, #8]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d009      	beq.n	8002e76 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e68:	f023 030f 	bic.w	r3, r3, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e6c:	2200      	movs	r2, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002e6e:	60a3      	str	r3, [r4, #8]
 8002e70:	e7ac      	b.n	8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e72:	4c0b      	ldr	r4, [pc, #44]	; (8002ea0 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8002e74:	e7bc      	b.n	8002df0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e76:	6813      	ldr	r3, [r2, #0]
 8002e78:	07db      	lsls	r3, r3, #31
 8002e7a:	d4d8      	bmi.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e7c:	e7f1      	b.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e7e:	6813      	ldr	r3, [r2, #0]
 8002e80:	07de      	lsls	r6, r3, #31
 8002e82:	d4d4      	bmi.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e84:	e7ca      	b.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	07d9      	lsls	r1, r3, #31
 8002e8a:	d4d0      	bmi.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e8c:	e7e4      	b.n	8002e58 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	07df      	lsls	r7, r3, #31
 8002e92:	d5be      	bpl.n	8002e12 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002e94:	e7cb      	b.n	8002e2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002e96:	bf00      	nop
 8002e98:	50000100 	.word	0x50000100
 8002e9c:	50000500 	.word	0x50000500
 8002ea0:	50000300 	.word	0x50000300
 8002ea4:	50000700 	.word	0x50000700

08002ea8 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d07b      	beq.n	8002fa4 <HAL_CAN_Init+0xfc>
{
 8002eac:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002eae:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d072      	beq.n	8002f9e <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002eb8:	6822      	ldr	r2, [r4, #0]
 8002eba:	6813      	ldr	r3, [r2, #0]
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ec2:	f7ff fa95 	bl	80023f0 <HAL_GetTick>
 8002ec6:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ec8:	e004      	b.n	8002ed4 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eca:	f7ff fa91 	bl	80023f0 <HAL_GetTick>
 8002ece:	1b43      	subs	r3, r0, r5
 8002ed0:	2b0a      	cmp	r3, #10
 8002ed2:	d85b      	bhi.n	8002f8c <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	07d1      	lsls	r1, r2, #31
 8002eda:	d5f6      	bpl.n	8002eca <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	f022 0202 	bic.w	r2, r2, #2
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee4:	f7ff fa84 	bl	80023f0 <HAL_GetTick>
 8002ee8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002eea:	e004      	b.n	8002ef6 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eec:	f7ff fa80 	bl	80023f0 <HAL_GetTick>
 8002ef0:	1b40      	subs	r0, r0, r5
 8002ef2:	280a      	cmp	r0, #10
 8002ef4:	d84a      	bhi.n	8002f8c <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	0792      	lsls	r2, r2, #30
 8002efc:	d4f6      	bmi.n	8002eec <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002efe:	7e22      	ldrb	r2, [r4, #24]
 8002f00:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	bf0c      	ite	eq
 8002f06:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f0a:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f10:	7e62      	ldrb	r2, [r4, #25]
 8002f12:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	bf0c      	ite	eq
 8002f18:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f1c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f22:	7ea2      	ldrb	r2, [r4, #26]
 8002f24:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	bf0c      	ite	eq
 8002f2a:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f2e:	f022 0220 	bicne.w	r2, r2, #32
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f34:	7ee2      	ldrb	r2, [r4, #27]
 8002f36:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	bf0c      	ite	eq
 8002f3c:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f40:	f042 0210 	orrne.w	r2, r2, #16
 8002f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f46:	7f22      	ldrb	r2, [r4, #28]
 8002f48:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	bf0c      	ite	eq
 8002f4e:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f52:	f022 0208 	bicne.w	r2, r2, #8
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f58:	7f62      	ldrb	r2, [r4, #29]
 8002f5a:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	bf0c      	ite	eq
 8002f60:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f64:	f022 0204 	bicne.w	r2, r2, #4
 8002f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f6a:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8002f6e:	6921      	ldr	r1, [r4, #16]
 8002f70:	4302      	orrs	r2, r0
 8002f72:	430a      	orrs	r2, r1
 8002f74:	6960      	ldr	r0, [r4, #20]
 8002f76:	6861      	ldr	r1, [r4, #4]
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	3901      	subs	r1, #1
 8002f7c:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f7e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f80:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002f82:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f84:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8002f86:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8002f8a:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f8e:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f94:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f96:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8002f9a:	2001      	movs	r0, #1
}
 8002f9c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8002f9e:	f7fe f837 	bl	8001010 <HAL_CAN_MspInit>
 8002fa2:	e789      	b.n	8002eb8 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8002fa4:	2001      	movs	r0, #1
}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fa8:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8002fac:	3a01      	subs	r2, #1
 8002fae:	2a01      	cmp	r2, #1
{
 8002fb0:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8002fb2:	d905      	bls.n	8002fc0 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fb4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002fb6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8002fba:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8002fbe:	4770      	bx	lr
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fc0:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002fc2:	6948      	ldr	r0, [r1, #20]
{
 8002fc4:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002fc6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8002fca:	f044 0401 	orr.w	r4, r4, #1
 8002fce:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002fd2:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002fd6:	2501      	movs	r5, #1
 8002fd8:	f000 021f 	and.w	r2, r0, #31
 8002fdc:	fa05 f202 	lsl.w	r2, r5, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002fe0:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002fe2:	ea24 0402 	bic.w	r4, r4, r2
 8002fe6:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
 8002fea:	43d4      	mvns	r4, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002fec:	2d00      	cmp	r5, #0
 8002fee:	d13d      	bne.n	800306c <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ff0:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ff4:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002ff6:	4025      	ands	r5, r4
 8002ff8:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ffc:	888d      	ldrh	r5, [r1, #4]
 8002ffe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003002:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003006:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800300a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800300c:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800300e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003012:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003016:	6988      	ldr	r0, [r1, #24]
 8003018:	bb10      	cbnz	r0, 8003060 <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800301a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800301e:	4020      	ands	r0, r4
 8003020:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003024:	6908      	ldr	r0, [r1, #16]
 8003026:	b9a8      	cbnz	r0, 8003054 <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003028:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800302c:	4004      	ands	r4, r0
 800302e:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003032:	6a09      	ldr	r1, [r1, #32]
 8003034:	2901      	cmp	r1, #1
 8003036:	d104      	bne.n	8003042 <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003038:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800303c:	430a      	orrs	r2, r1
 800303e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003042:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003046:	f022 0201 	bic.w	r2, r2, #1
    return HAL_OK;
 800304a:	2000      	movs	r0, #0
}
 800304c:	bc70      	pop	{r4, r5, r6}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800304e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003052:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003054:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003058:	4310      	orrs	r0, r2
 800305a:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 800305e:	e7e8      	b.n	8003032 <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003060:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003064:	4310      	orrs	r0, r2
 8003066:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 800306a:	e7db      	b.n	8003024 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800306c:	2d01      	cmp	r5, #1
 800306e:	d1d2      	bne.n	8003016 <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003070:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003074:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003076:	4315      	orrs	r5, r2
 8003078:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800307c:	888d      	ldrh	r5, [r1, #4]
 800307e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003082:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003086:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800308a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800308c:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800308e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003092:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
 8003096:	e7be      	b.n	8003016 <HAL_CAN_ConfigFilter+0x6e>

08003098 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003098:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800309a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800309e:	2b01      	cmp	r3, #1
{
 80030a0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80030a2:	d006      	beq.n	80030b2 <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030a4:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80030a6:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80030ac:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 80030ae:	4630      	mov	r0, r6
 80030b0:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030b2:	6802      	ldr	r2, [r0, #0]
 80030b4:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 80030b6:	2302      	movs	r3, #2
 80030b8:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030bc:	6813      	ldr	r3, [r2, #0]
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80030c4:	f7ff f994 	bl	80023f0 <HAL_GetTick>
 80030c8:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030ca:	e004      	b.n	80030d6 <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030cc:	f7ff f990 	bl	80023f0 <HAL_GetTick>
 80030d0:	1b43      	subs	r3, r0, r5
 80030d2:	2b0a      	cmp	r3, #10
 80030d4:	d808      	bhi.n	80030e8 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f013 0301 	ands.w	r3, r3, #1
 80030de:	d1f5      	bne.n	80030cc <HAL_CAN_Start+0x34>
    return HAL_OK;
 80030e0:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030e2:	6263      	str	r3, [r4, #36]	; 0x24
}
 80030e4:	4630      	mov	r0, r6
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80030ea:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f0:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80030f2:	f884 2020 	strb.w	r2, [r4, #32]
}
 80030f6:	4630      	mov	r0, r6
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
 80030fa:	bf00      	nop

080030fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80030fc:	b430      	push	{r4, r5}
 80030fe:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003100:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003104:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003108:	3801      	subs	r0, #1
 800310a:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800310c:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800310e:	d835      	bhi.n	800317c <HAL_CAN_AddTxMessage+0x80>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003110:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8003114:	d03b      	beq.n	800318e <HAL_CAN_AddTxMessage+0x92>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003116:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800311a:	2c03      	cmp	r4, #3
 800311c:	d049      	beq.n	80031b2 <HAL_CAN_AddTxMessage+0xb6>

        return HAL_ERROR;
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800311e:	2001      	movs	r0, #1
 8003120:	40a0      	lsls	r0, r4
 8003122:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003124:	688b      	ldr	r3, [r1, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d03a      	beq.n	80031a0 <HAL_CAN_AddTxMessage+0xa4>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 800312a:	68c8      	ldr	r0, [r1, #12]
 800312c:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800312e:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 8003130:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003134:	f104 0018 	add.w	r0, r4, #24
 8003138:	0100      	lsls	r0, r0, #4
 800313a:	502b      	str	r3, [r5, r0]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800313c:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 8003140:	690b      	ldr	r3, [r1, #16]
 8003142:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003146:	7d09      	ldrb	r1, [r1, #20]
 8003148:	2901      	cmp	r1, #1
 800314a:	ea4f 1304 	mov.w	r3, r4, lsl #4
 800314e:	d105      	bne.n	800315c <HAL_CAN_AddTxMessage+0x60>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003150:	f8dc 1184 	ldr.w	r1, [ip, #388]	; 0x184
 8003154:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003158:	f8cc 1184 	str.w	r1, [ip, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800315c:	442b      	add	r3, r5
 800315e:	6851      	ldr	r1, [r2, #4]
 8003160:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800316a:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 800316e:	f043 0301 	orr.w	r3, r3, #1

      /* Return function status */
      return HAL_OK;
 8003172:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003174:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003176:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 800317a:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800317c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8003184:	2001      	movs	r0, #1
}
 8003186:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003188:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800318c:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800318e:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      return HAL_ERROR;
 8003196:	2001      	movs	r0, #1
}
 8003198:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800319a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800319e:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80031a0:	68cb      	ldr	r3, [r1, #12]
 80031a2:	6808      	ldr	r0, [r1, #0]
 80031a4:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 80031a8:	f104 0318 	add.w	r3, r4, #24
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	50e8      	str	r0, [r5, r3]
 80031b0:	e7c4      	b.n	800313c <HAL_CAN_AddTxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80031b2:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80031b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
        return HAL_ERROR;
 80031ba:	2001      	movs	r0, #1
}
 80031bc:	bc30      	pop	{r4, r5}
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80031be:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80031c2:	4770      	bx	lr

080031c4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031c4:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80031c6:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80031ce:	f1be 0f01 	cmp.w	lr, #1
{
 80031d2:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 80031d4:	d86d      	bhi.n	80032b2 <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031d6:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031d8:	b951      	cbnz	r1, 80031f0 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031da:	68c4      	ldr	r4, [r0, #12]
 80031dc:	07a5      	lsls	r5, r4, #30
 80031de:	d10a      	bne.n	80031f6 <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031e0:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80031e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 80031e8:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ea:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031f0:	6904      	ldr	r4, [r0, #16]
 80031f2:	07a4      	lsls	r4, r4, #30
 80031f4:	d0f4      	beq.n	80031e0 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80031f6:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 80031fa:	010c      	lsls	r4, r1, #4
 80031fc:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003200:	f005 0504 	and.w	r5, r5, #4
 8003204:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003206:	2d00      	cmp	r5, #0
 8003208:	d05a      	beq.n	80032c0 <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800320a:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800320e:	08ed      	lsrs	r5, r5, #3
 8003210:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003212:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003216:	f005 0502 	and.w	r5, r5, #2
 800321a:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800321c:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003220:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003224:	f005 050f 	and.w	r5, r5, #15
 8003228:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800322a:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800322c:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003230:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8003234:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003236:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003238:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800323c:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800323e:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003240:	f8dc 2000 	ldr.w	r2, [ip]
 8003244:	4422      	add	r2, r4
 8003246:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800324a:	0a12      	lsrs	r2, r2, #8
 800324c:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800324e:	f8dc 2000 	ldr.w	r2, [ip]
 8003252:	4422      	add	r2, r4
 8003254:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003258:	0c12      	lsrs	r2, r2, #16
 800325a:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800325c:	f8dc 2000 	ldr.w	r2, [ip]
 8003260:	4422      	add	r2, r4
 8003262:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8003266:	0e12      	lsrs	r2, r2, #24
 8003268:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800326a:	f8dc 2000 	ldr.w	r2, [ip]
 800326e:	4422      	add	r2, r4
 8003270:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003274:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003276:	f8dc 2000 	ldr.w	r2, [ip]
 800327a:	4422      	add	r2, r4
 800327c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003280:	0a12      	lsrs	r2, r2, #8
 8003282:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003284:	f8dc 2000 	ldr.w	r2, [ip]
 8003288:	4422      	add	r2, r4
 800328a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800328e:	0c12      	lsrs	r2, r2, #16
 8003290:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003292:	f8dc 2000 	ldr.w	r2, [ip]
 8003296:	4422      	add	r2, r4
 8003298:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800329c:	0e12      	lsrs	r2, r2, #24
 800329e:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032a0:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032a4:	b989      	cbnz	r1, 80032ca <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032a6:	68d3      	ldr	r3, [r2, #12]
 80032a8:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80032ac:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80032ae:	60d3      	str	r3, [r2, #12]
}
 80032b0:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80032b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 80032b8:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032ba:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80032be:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032c0:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80032c4:	0d6d      	lsrs	r5, r5, #21
 80032c6:	6015      	str	r5, [r2, #0]
 80032c8:	e7a3      	b.n	8003212 <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032ca:	6913      	ldr	r3, [r2, #16]
 80032cc:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80032d0:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032d2:	6113      	str	r3, [r2, #16]
}
 80032d4:	bd70      	pop	{r4, r5, r6, pc}
 80032d6:	bf00      	nop

080032d8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80032d8:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80032dc:	3a01      	subs	r2, #1
 80032de:	2a01      	cmp	r2, #1
{
 80032e0:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 80032e2:	d905      	bls.n	80032f0 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80032e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 80032ea:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80032ee:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032f0:	6802      	ldr	r2, [r0, #0]
 80032f2:	6953      	ldr	r3, [r2, #20]
 80032f4:	4319      	orrs	r1, r3
    return HAL_OK;
 80032f6:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80032f8:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80032fa:	4770      	bx	lr

080032fc <HAL_CAN_TxMailbox0CompleteCallback>:
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <HAL_CAN_TxMailbox1CompleteCallback>:
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop

08003304 <HAL_CAN_TxMailbox2CompleteCallback>:
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop

08003308 <HAL_CAN_TxMailbox0AbortCallback>:
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop

0800330c <HAL_CAN_TxMailbox1AbortCallback>:
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop

08003310 <HAL_CAN_TxMailbox2AbortCallback>:
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop

08003314 <HAL_CAN_RxFifo0FullCallback>:
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop

08003318 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop

0800331c <HAL_CAN_RxFifo1FullCallback>:
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop

08003320 <HAL_CAN_SleepCallback>:
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop

08003324 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop

08003328 <HAL_CAN_ErrorCallback>:
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop

0800332c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800332c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003330:	6803      	ldr	r3, [r0, #0]
 8003332:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003334:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003338:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800333a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800333e:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003342:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003346:	f014 0601 	ands.w	r6, r4, #1
{
 800334a:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800334c:	d025      	beq.n	800339a <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800334e:	f017 0601 	ands.w	r6, r7, #1
 8003352:	f040 808f 	bne.w	8003474 <HAL_CAN_IRQHandler+0x148>
 8003356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800335a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800335e:	05f8      	lsls	r0, r7, #23
 8003360:	d50d      	bpl.n	800337e <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003362:	682b      	ldr	r3, [r5, #0]
 8003364:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003368:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800336a:	05bb      	lsls	r3, r7, #22
 800336c:	f100 80be 	bmi.w	80034ec <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003370:	0578      	lsls	r0, r7, #21
 8003372:	f100 80e4 	bmi.w	800353e <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003376:	053b      	lsls	r3, r7, #20
 8003378:	f140 80f0 	bpl.w	800355c <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800337c:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800337e:	03f8      	lsls	r0, r7, #15
 8003380:	d50b      	bpl.n	800339a <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003382:	682b      	ldr	r3, [r5, #0]
 8003384:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003388:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800338a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800338c:	f100 80ba 	bmi.w	8003504 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003390:	037a      	lsls	r2, r7, #13
 8003392:	f140 80cf 	bpl.w	8003534 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003396:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800339a:	0727      	lsls	r7, r4, #28
 800339c:	d502      	bpl.n	80033a4 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800339e:	f01b 0f10 	tst.w	fp, #16
 80033a2:	d161      	bne.n	8003468 <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80033a4:	0760      	lsls	r0, r4, #29
 80033a6:	d503      	bpl.n	80033b0 <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80033a8:	f01b 0f08 	tst.w	fp, #8
 80033ac:	f040 808c 	bne.w	80034c8 <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80033b0:	07a1      	lsls	r1, r4, #30
 80033b2:	d504      	bpl.n	80033be <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	079a      	lsls	r2, r3, #30
 80033ba:	f040 808c 	bne.w	80034d6 <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80033be:	0663      	lsls	r3, r4, #25
 80033c0:	d502      	bpl.n	80033c8 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80033c2:	f01a 0f10 	tst.w	sl, #16
 80033c6:	d149      	bne.n	800345c <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80033c8:	06a7      	lsls	r7, r4, #26
 80033ca:	d502      	bpl.n	80033d2 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033cc:	f01a 0f08 	tst.w	sl, #8
 80033d0:	d173      	bne.n	80034ba <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033d2:	06e0      	lsls	r0, r4, #27
 80033d4:	d503      	bpl.n	80033de <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033d6:	682b      	ldr	r3, [r5, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	0799      	lsls	r1, r3, #30
 80033dc:	d162      	bne.n	80034a4 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80033de:	03a2      	lsls	r2, r4, #14
 80033e0:	d502      	bpl.n	80033e8 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80033e2:	f018 0f10 	tst.w	r8, #16
 80033e6:	d161      	bne.n	80034ac <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80033e8:	03e3      	lsls	r3, r4, #15
 80033ea:	d502      	bpl.n	80033f2 <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80033ec:	f018 0f08 	tst.w	r8, #8
 80033f0:	d175      	bne.n	80034de <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80033f2:	0427      	lsls	r7, r4, #16
 80033f4:	d505      	bpl.n	8003402 <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80033f6:	f018 0f04 	tst.w	r8, #4
 80033fa:	d106      	bne.n	800340a <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80033fc:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80033fe:	2204      	movs	r2, #4
 8003400:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003402:	2e00      	cmp	r6, #0
 8003404:	d146      	bne.n	8003494 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003406:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800340a:	05e0      	lsls	r0, r4, #23
 800340c:	d504      	bpl.n	8003418 <HAL_CAN_IRQHandler+0xec>
 800340e:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8003412:	bf18      	it	ne
 8003414:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003418:	05a1      	lsls	r1, r4, #22
 800341a:	d504      	bpl.n	8003426 <HAL_CAN_IRQHandler+0xfa>
 800341c:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8003420:	bf18      	it	ne
 8003422:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003426:	0562      	lsls	r2, r4, #21
 8003428:	d504      	bpl.n	8003434 <HAL_CAN_IRQHandler+0x108>
 800342a:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800342e:	bf18      	it	ne
 8003430:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003434:	0523      	lsls	r3, r4, #20
 8003436:	d5e1      	bpl.n	80033fc <HAL_CAN_IRQHandler+0xd0>
 8003438:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 800343c:	d0de      	beq.n	80033fc <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 800343e:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8003442:	f000 809a 	beq.w	800357a <HAL_CAN_IRQHandler+0x24e>
 8003446:	d861      	bhi.n	800350c <HAL_CAN_IRQHandler+0x1e0>
 8003448:	f1b9 0f20 	cmp.w	r9, #32
 800344c:	f000 8083 	beq.w	8003556 <HAL_CAN_IRQHandler+0x22a>
 8003450:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8003454:	d168      	bne.n	8003528 <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003456:	f046 0620 	orr.w	r6, r6, #32
            break;
 800345a:	e05f      	b.n	800351c <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003460:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003464:	611a      	str	r2, [r3, #16]
 8003466:	e7af      	b.n	80033c8 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800346c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	e797      	b.n	80033a4 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003474:	2201      	movs	r2, #1
 8003476:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003478:	07bb      	lsls	r3, r7, #30
 800347a:	d43b      	bmi.n	80034f4 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800347c:	077e      	lsls	r6, r7, #29
 800347e:	d460      	bmi.n	8003542 <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003480:	f017 0608 	ands.w	r6, r7, #8
 8003484:	d06e      	beq.n	8003564 <HAL_CAN_IRQHandler+0x238>
 8003486:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800348a:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800348e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8003492:	e764      	b.n	800335e <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 8003494:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003496:	431e      	orrs	r6, r3
    HAL_CAN_ErrorCallback(hcan);
 8003498:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800349a:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800349c:	f7ff ff44 	bl	8003328 <HAL_CAN_ErrorCallback>
}
 80034a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034a4:	4628      	mov	r0, r5
 80034a6:	f7ff ff37 	bl	8003318 <HAL_CAN_RxFifo1MsgPendingCallback>
 80034aa:	e798      	b.n	80033de <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	2210      	movs	r2, #16
 80034b0:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80034b2:	4628      	mov	r0, r5
 80034b4:	f7ff ff34 	bl	8003320 <HAL_CAN_SleepCallback>
 80034b8:	e796      	b.n	80033e8 <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034ba:	682b      	ldr	r3, [r5, #0]
 80034bc:	2208      	movs	r2, #8
 80034be:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034c0:	4628      	mov	r0, r5
 80034c2:	f7ff ff2b 	bl	800331c <HAL_CAN_RxFifo1FullCallback>
 80034c6:	e784      	b.n	80033d2 <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	2208      	movs	r2, #8
 80034cc:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80034ce:	4628      	mov	r0, r5
 80034d0:	f7ff ff20 	bl	8003314 <HAL_CAN_RxFifo0FullCallback>
 80034d4:	e76c      	b.n	80033b0 <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80034d6:	4628      	mov	r0, r5
 80034d8:	f7fd ff22 	bl	8001320 <HAL_CAN_RxFifo0MsgPendingCallback>
 80034dc:	e76f      	b.n	80033be <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	2208      	movs	r2, #8
 80034e2:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034e4:	4628      	mov	r0, r5
 80034e6:	f7ff ff1d 	bl	8003324 <HAL_CAN_WakeUpFromRxMsgCallback>
 80034ea:	e782      	b.n	80033f2 <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034ec:	4628      	mov	r0, r5
 80034ee:	f7ff ff07 	bl	8003300 <HAL_CAN_TxMailbox1CompleteCallback>
 80034f2:	e744      	b.n	800337e <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034f4:	f7ff ff02 	bl	80032fc <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80034f8:	2600      	movs	r6, #0
 80034fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003502:	e72c      	b.n	800335e <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003504:	4628      	mov	r0, r5
 8003506:	f7ff fefd 	bl	8003304 <HAL_CAN_TxMailbox2CompleteCallback>
 800350a:	e746      	b.n	800339a <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 800350c:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8003510:	d01e      	beq.n	8003550 <HAL_CAN_IRQHandler+0x224>
 8003512:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8003516:	bf08      	it	eq
 8003518:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003524:	619a      	str	r2, [r3, #24]
 8003526:	e76a      	b.n	80033fe <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 8003528:	f1b9 0f10 	cmp.w	r9, #16
 800352c:	d1f6      	bne.n	800351c <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 800352e:	f046 0608 	orr.w	r6, r6, #8
            break;
 8003532:	e7f3      	b.n	800351c <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003534:	033b      	lsls	r3, r7, #12
 8003536:	d51c      	bpl.n	8003572 <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003538:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 800353c:	e72d      	b.n	800339a <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800353e:	4616      	mov	r6, r2
 8003540:	e71d      	b.n	800337e <HAL_CAN_IRQHandler+0x52>
 8003542:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003546:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800354a:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800354e:	e706      	b.n	800335e <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8003550:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8003554:	e7e2      	b.n	800351c <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003556:	f046 0610 	orr.w	r6, r6, #16
            break;
 800355a:	e7df      	b.n	800351c <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800355c:	4628      	mov	r0, r5
 800355e:	f7ff fed5 	bl	800330c <HAL_CAN_TxMailbox1AbortCallback>
 8003562:	e70c      	b.n	800337e <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003564:	f7ff fed0 	bl	8003308 <HAL_CAN_TxMailbox0AbortCallback>
 8003568:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800356c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003570:	e6f5      	b.n	800335e <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003572:	4628      	mov	r0, r5
 8003574:	f7ff fecc 	bl	8003310 <HAL_CAN_TxMailbox2AbortCallback>
 8003578:	e70f      	b.n	800339a <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 800357a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 800357e:	e7cd      	b.n	800351c <HAL_CAN_IRQHandler+0x1f0>

08003580 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003582:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003584:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003586:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800358a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003590:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003592:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800359a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a4:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_NVIC_SetPriority+0x74>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ac:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ae:	f1c3 0e07 	rsb	lr, r3, #7
 80035b2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ba:	bf28      	it	cs
 80035bc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c0:	f1bc 0f06 	cmp.w	ip, #6
 80035c4:	d91b      	bls.n	80035fe <HAL_NVIC_SetPriority+0x5a>
 80035c6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 3cff 	mov.w	ip, #4294967295
 80035cc:	fa0c fc03 	lsl.w	ip, ip, r3
 80035d0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	f04f 3cff 	mov.w	ip, #4294967295
 80035d8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80035dc:	ea21 010c 	bic.w	r1, r1, ip
 80035e0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80035e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80035e8:	db0c      	blt.n	8003604 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ea:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80035ee:	0109      	lsls	r1, r1, #4
 80035f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80035f4:	b2c9      	uxtb	r1, r1
 80035f6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80035fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80035fe:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003600:	4613      	mov	r3, r2
 8003602:	e7e7      	b.n	80035d4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_NVIC_SetPriority+0x78>)
 8003606:	f000 000f 	and.w	r0, r0, #15
 800360a:	0109      	lsls	r1, r1, #4
 800360c:	4403      	add	r3, r0
 800360e:	b2c9      	uxtb	r1, r1
 8003610:	7619      	strb	r1, [r3, #24]
 8003612:	f85d fb04 	ldr.w	pc, [sp], #4
 8003616:	bf00      	nop
 8003618:	e000ed00 	.word	0xe000ed00
 800361c:	e000ecfc 	.word	0xe000ecfc

08003620 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003620:	2800      	cmp	r0, #0
 8003622:	db08      	blt.n	8003636 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003624:	0941      	lsrs	r1, r0, #5
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <HAL_NVIC_EnableIRQ+0x18>)
 8003628:	f000 001f 	and.w	r0, r0, #31
 800362c:	2301      	movs	r3, #1
 800362e:	fa03 f000 	lsl.w	r0, r3, r0
 8003632:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003636:	4770      	bx	lr
 8003638:	e000e100 	.word	0xe000e100

0800363c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800363c:	3801      	subs	r0, #1
 800363e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003642:	d210      	bcs.n	8003666 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003644:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003646:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	4c08      	ldr	r4, [pc, #32]	; (800366c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003652:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003656:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003658:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800365a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800365c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800365e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003662:	6119      	str	r1, [r3, #16]
 8003664:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003666:	2001      	movs	r0, #1
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003670:	2800      	cmp	r0, #0
 8003672:	d035      	beq.n	80036e0 <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003674:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 8003678:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367a:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 800367c:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 800367e:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003680:	6902      	ldr	r2, [r0, #16]
 8003682:	4323      	orrs	r3, r4
 8003684:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003686:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 800368a:	4323      	orrs	r3, r4
 800368c:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800368e:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003690:	4c14      	ldr	r4, [pc, #80]	; (80036e4 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8003692:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 8003694:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003696:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800369a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800369e:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036a0:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 80036a2:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036a4:	d912      	bls.n	80036cc <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_DMA_Init+0x78>)
 80036a8:	4a10      	ldr	r2, [pc, #64]	; (80036ec <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 80036aa:	4c11      	ldr	r4, [pc, #68]	; (80036f0 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036ac:	440b      	add	r3, r1
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	091b      	lsrs	r3, r3, #4
 80036b4:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 80036b6:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ba:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 80036bc:	8401      	strh	r1, [r0, #32]
 80036be:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c2:	6382      	str	r2, [r0, #56]	; 0x38
}  
 80036c4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80036c8:	4610      	mov	r0, r2
}  
 80036ca:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_DMA_Init+0x84>)
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_DMA_Init+0x7c>)
 80036d0:	440b      	add	r3, r1
 80036d2:	fba2 2303 	umull	r2, r3, r2, r3
 80036d6:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 80036d8:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036dc:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80036de:	e7ea      	b.n	80036b6 <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 80036e0:	2001      	movs	r0, #1
}  
 80036e2:	4770      	bx	lr
 80036e4:	40020407 	.word	0x40020407
 80036e8:	bffdfbf8 	.word	0xbffdfbf8
 80036ec:	cccccccd 	.word	0xcccccccd
 80036f0:	40020400 	.word	0x40020400
 80036f4:	bffdfff8 	.word	0xbffdfff8

080036f8 <HAL_DMA_Start_IT>:
{
 80036f8:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80036fa:	f890 4020 	ldrb.w	r4, [r0, #32]
 80036fe:	2c01      	cmp	r4, #1
 8003700:	d039      	beq.n	8003776 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8003702:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003706:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003708:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 800370a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800370e:	d005      	beq.n	800371c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8003710:	2300      	movs	r3, #0
 8003712:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8003716:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8003718:	2002      	movs	r0, #2
} 
 800371a:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 800371c:	2502      	movs	r5, #2
 800371e:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003722:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003724:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003726:	2500      	movs	r5, #0
 8003728:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800372a:	6825      	ldr	r5, [r4, #0]
 800372c:	f025 0501 	bic.w	r5, r5, #1
 8003730:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003732:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003734:	fa0c f505 	lsl.w	r5, ip, r5
 8003738:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800373a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800373c:	6843      	ldr	r3, [r0, #4]
 800373e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003740:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8003742:	bf0b      	itete	eq
 8003744:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003746:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003748:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800374a:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800374c:	b153      	cbz	r3, 8003764 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800374e:	6823      	ldr	r3, [r4, #0]
 8003750:	f043 030e 	orr.w	r3, r3, #14
 8003754:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 800375c:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800375e:	6023      	str	r3, [r4, #0]
} 
 8003760:	bc70      	pop	{r4, r5, r6}
 8003762:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	f043 030a 	orr.w	r3, r3, #10
 800376a:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6023      	str	r3, [r4, #0]
 8003774:	e7ef      	b.n	8003756 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8003776:	2002      	movs	r0, #2
} 
 8003778:	bc70      	pop	{r4, r5, r6}
 800377a:	4770      	bx	lr

0800377c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800377c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8003780:	2a02      	cmp	r2, #2
{
 8003782:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003784:	d006      	beq.n	8003794 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003786:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8003788:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378a:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800378c:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8003790:	2001      	movs	r0, #1
}
 8003792:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003794:	6802      	ldr	r2, [r0, #0]
 8003796:	6811      	ldr	r1, [r2, #0]
 8003798:	f021 010e 	bic.w	r1, r1, #14
{
 800379c:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800379e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80037a0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037a2:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037a4:	6811      	ldr	r1, [r2, #0]
 80037a6:	f021 0101 	bic.w	r1, r1, #1
 80037aa:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037ac:	2201      	movs	r2, #1
 80037ae:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 80037b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037b4:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 80037b6:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 80037b8:	2000      	movs	r0, #0
}
 80037ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037c0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80037c4:	2a02      	cmp	r2, #2
 80037c6:	d003      	beq.n	80037d0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c8:	2204      	movs	r2, #4
 80037ca:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80037cc:	2001      	movs	r0, #1
}
 80037ce:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037d0:	6802      	ldr	r2, [r0, #0]
 80037d2:	6811      	ldr	r1, [r2, #0]
 80037d4:	f021 010e 	bic.w	r1, r1, #14
{  
 80037d8:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037da:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037dc:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037de:	6811      	ldr	r1, [r2, #0]
 80037e0:	f021 0101 	bic.w	r1, r1, #1
 80037e4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80037e8:	2101      	movs	r1, #1
 80037ea:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 80037ec:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037ee:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 80037f0:	f44f 7c80 	mov.w	ip, #256	; 0x100
 80037f4:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80037f8:	b112      	cbz	r2, 8003800 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 80037fa:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2000      	movs	r0, #0
}
 80037fe:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003800:	4610      	mov	r0, r2
}
 8003802:	bd10      	pop	{r4, pc}

08003804 <HAL_DMA_IRQHandler>:
{
 8003804:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003806:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003808:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800380a:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800380c:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800380e:	2304      	movs	r3, #4
 8003810:	4093      	lsls	r3, r2
 8003812:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8003814:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003816:	d00e      	beq.n	8003836 <HAL_DMA_IRQHandler+0x32>
 8003818:	f015 0f04 	tst.w	r5, #4
 800381c:	d00b      	beq.n	8003836 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800381e:	6822      	ldr	r2, [r4, #0]
 8003820:	0692      	lsls	r2, r2, #26
 8003822:	d403      	bmi.n	800382c <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003824:	6822      	ldr	r2, [r4, #0]
 8003826:	f022 0204 	bic.w	r2, r2, #4
 800382a:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800382c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800382e:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8003830:	b1ca      	cbz	r2, 8003866 <HAL_DMA_IRQHandler+0x62>
}  
 8003832:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8003834:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003836:	2302      	movs	r3, #2
 8003838:	4093      	lsls	r3, r2
 800383a:	420b      	tst	r3, r1
 800383c:	d015      	beq.n	800386a <HAL_DMA_IRQHandler+0x66>
 800383e:	f015 0f02 	tst.w	r5, #2
 8003842:	d012      	beq.n	800386a <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003844:	6822      	ldr	r2, [r4, #0]
 8003846:	0692      	lsls	r2, r2, #26
 8003848:	d406      	bmi.n	8003858 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800384a:	6822      	ldr	r2, [r4, #0]
 800384c:	f022 020a 	bic.w	r2, r2, #10
 8003850:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8003852:	2201      	movs	r2, #1
 8003854:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8003858:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800385a:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 800385c:	2100      	movs	r1, #0
 800385e:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8003862:	2a00      	cmp	r2, #0
 8003864:	d1e5      	bne.n	8003832 <HAL_DMA_IRQHandler+0x2e>
}  
 8003866:	bc70      	pop	{r4, r5, r6}
 8003868:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800386a:	2308      	movs	r3, #8
 800386c:	4093      	lsls	r3, r2
 800386e:	420b      	tst	r3, r1
 8003870:	d0f9      	beq.n	8003866 <HAL_DMA_IRQHandler+0x62>
 8003872:	072b      	lsls	r3, r5, #28
 8003874:	d5f7      	bpl.n	8003866 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003876:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8003878:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800387a:	f023 030e 	bic.w	r3, r3, #14
 800387e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003880:	2301      	movs	r3, #1
 8003882:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8003886:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800388a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 800388c:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800388e:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 8003890:	2900      	cmp	r1, #0
 8003892:	d0e8      	beq.n	8003866 <HAL_DMA_IRQHandler+0x62>
}  
 8003894:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8003896:	4708      	bx	r1

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800389c:	680c      	ldr	r4, [r1, #0]
{
 800389e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a0:	2c00      	cmp	r4, #0
 80038a2:	d07e      	beq.n	80039a2 <HAL_GPIO_Init+0x10a>
 80038a4:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a8:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8003a68 <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00u;
 80038ac:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038ae:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038b2:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038b4:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 80038b8:	ea15 0804 	ands.w	r8, r5, r4
 80038bc:	d06b      	beq.n	8003996 <HAL_GPIO_Init+0xfe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038be:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80038c2:	f007 0203 	and.w	r2, r7, #3
 80038c6:	1e51      	subs	r1, r2, #1
 80038c8:	2901      	cmp	r1, #1
 80038ca:	d96d      	bls.n	80039a8 <HAL_GPIO_Init+0x110>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038cc:	2a03      	cmp	r2, #3
 80038ce:	f040 80ac 	bne.w	8003a2a <HAL_GPIO_Init+0x192>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038d2:	fa02 f20c 	lsl.w	r2, r2, ip
 80038d6:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 80038d8:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80038da:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038dc:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038de:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 80038e2:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038e4:	d057      	beq.n	8003996 <HAL_GPIO_Init+0xfe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e6:	f8da 2018 	ldr.w	r2, [sl, #24]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	f8ca 2018 	str.w	r2, [sl, #24]
 80038f2:	f8da 2018 	ldr.w	r2, [sl, #24]
 80038f6:	f002 0201 	and.w	r2, r2, #1
 80038fa:	9203      	str	r2, [sp, #12]
 80038fc:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003906:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800390a:	f003 0103 	and.w	r1, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800390e:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003910:	0089      	lsls	r1, r1, #2
 8003912:	260f      	movs	r6, #15
 8003914:	fa06 fe01 	lsl.w	lr, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003918:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800391c:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003920:	d015      	beq.n	800394e <HAL_GPIO_Init+0xb6>
 8003922:	4e4c      	ldr	r6, [pc, #304]	; (8003a54 <HAL_GPIO_Init+0x1bc>)
 8003924:	42b0      	cmp	r0, r6
 8003926:	f000 808b 	beq.w	8003a40 <HAL_GPIO_Init+0x1a8>
 800392a:	4e4b      	ldr	r6, [pc, #300]	; (8003a58 <HAL_GPIO_Init+0x1c0>)
 800392c:	42b0      	cmp	r0, r6
 800392e:	f000 808b 	beq.w	8003a48 <HAL_GPIO_Init+0x1b0>
 8003932:	4e4a      	ldr	r6, [pc, #296]	; (8003a5c <HAL_GPIO_Init+0x1c4>)
 8003934:	42b0      	cmp	r0, r6
 8003936:	d07d      	beq.n	8003a34 <HAL_GPIO_Init+0x19c>
 8003938:	4e49      	ldr	r6, [pc, #292]	; (8003a60 <HAL_GPIO_Init+0x1c8>)
 800393a:	42b0      	cmp	r0, r6
 800393c:	bf0b      	itete	eq
 800393e:	f04f 0e04 	moveq.w	lr, #4
 8003942:	2605      	movne	r6, #5
 8003944:	fa0e f101 	lsleq.w	r1, lr, r1
 8003948:	fa06 f101 	lslne.w	r1, r6, r1
 800394c:	430d      	orrs	r5, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 800394e:	6095      	str	r5, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003950:	4a44      	ldr	r2, [pc, #272]	; (8003a64 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003952:	4944      	ldr	r1, [pc, #272]	; (8003a64 <HAL_GPIO_Init+0x1cc>)
        temp = EXTI->IMR;
 8003954:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8003956:	ea6f 0508 	mvn.w	r5, r8
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800395a:	03fe      	lsls	r6, r7, #15
        temp &= ~(iocurrent);
 800395c:	bf54      	ite	pl
 800395e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003960:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 8003964:	600a      	str	r2, [r1, #0]

        temp = EXTI->EMR;
 8003966:	684a      	ldr	r2, [r1, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003968:	03b9      	lsls	r1, r7, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800396a:	493e      	ldr	r1, [pc, #248]	; (8003a64 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 800396c:	bf54      	ite	pl
 800396e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003970:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8003974:	604a      	str	r2, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003976:	6889      	ldr	r1, [r1, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003978:	4a3a      	ldr	r2, [pc, #232]	; (8003a64 <HAL_GPIO_Init+0x1cc>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800397a:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 800397c:	bf54      	ite	pl
 800397e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8003980:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 8003984:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 8003986:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003988:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800398a:	4936      	ldr	r1, [pc, #216]	; (8003a64 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 800398c:	bf54      	ite	pl
 800398e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003990:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8003994:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8003996:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003998:	fa34 f203 	lsrs.w	r2, r4, r3
 800399c:	f10c 0c02 	add.w	ip, ip, #2
 80039a0:	d188      	bne.n	80038b4 <HAL_GPIO_Init+0x1c>
  }
}
 80039a2:	b005      	add	sp, #20
 80039a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80039a8:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039aa:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80039ae:	f04f 0e03 	mov.w	lr, #3
 80039b2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80039b6:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039ba:	fa06 f60c 	lsl.w	r6, r6, ip
 80039be:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 80039c0:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80039c2:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 80039c6:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ca:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039ce:	f3c7 1500 	ubfx	r5, r7, #4, #1
 80039d2:	409d      	lsls	r5, r3
 80039d4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 80039d8:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 80039da:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80039dc:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039e0:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80039e4:	fa05 f50c 	lsl.w	r5, r5, ip
 80039e8:	ea45 050e 	orr.w	r5, r5, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ec:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80039ee:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f0:	fa02 f20c 	lsl.w	r2, r2, ip
 80039f4:	f47f af70 	bne.w	80038d8 <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 80039f8:	08dd      	lsrs	r5, r3, #3
 80039fa:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80039fe:	9501      	str	r5, [sp, #4]
 8003a00:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a02:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3u];
 8003a06:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a08:	f003 0e07 	and.w	lr, r3, #7
 8003a0c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003a10:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a12:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a16:	fa06 fe0e 	lsl.w	lr, r6, lr
 8003a1a:	9e00      	ldr	r6, [sp, #0]
 8003a1c:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003a20:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a22:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003a26:	6235      	str	r5, [r6, #32]
 8003a28:	e756      	b.n	80038d8 <HAL_GPIO_Init+0x40>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	fa01 f10c 	lsl.w	r1, r1, ip
 8003a30:	43c9      	mvns	r1, r1
 8003a32:	e7d2      	b.n	80039da <HAL_GPIO_Init+0x142>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a34:	f04f 0e03 	mov.w	lr, #3
 8003a38:	fa0e f101 	lsl.w	r1, lr, r1
 8003a3c:	430d      	orrs	r5, r1
 8003a3e:	e786      	b.n	800394e <HAL_GPIO_Init+0xb6>
 8003a40:	fa0b f101 	lsl.w	r1, fp, r1
 8003a44:	430d      	orrs	r5, r1
 8003a46:	e782      	b.n	800394e <HAL_GPIO_Init+0xb6>
 8003a48:	f04f 0e02 	mov.w	lr, #2
 8003a4c:	fa0e f101 	lsl.w	r1, lr, r1
 8003a50:	430d      	orrs	r5, r1
 8003a52:	e77c      	b.n	800394e <HAL_GPIO_Init+0xb6>
 8003a54:	48000400 	.word	0x48000400
 8003a58:	48000800 	.word	0x48000800
 8003a5c:	48000c00 	.word	0x48000c00
 8003a60:	48001000 	.word	0x48001000
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a6c:	6903      	ldr	r3, [r0, #16]
 8003a6e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003a70:	bf14      	ite	ne
 8003a72:	2001      	movne	r0, #1
 8003a74:	2000      	moveq	r0, #0
 8003a76:	4770      	bx	lr

08003a78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a78:	b10a      	cbz	r2, 8003a7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a7a:	6181      	str	r1, [r0, #24]
 8003a7c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a7e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop

08003a84 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a84:	2800      	cmp	r0, #0
 8003a86:	f000 828c 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x51e>
{
 8003a8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8e:	6803      	ldr	r3, [r0, #0]
 8003a90:	07d9      	lsls	r1, r3, #31
{
 8003a92:	b083      	sub	sp, #12
 8003a94:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a96:	d54f      	bpl.n	8003b38 <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a98:	49b4      	ldr	r1, [pc, #720]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
 8003a9a:	684a      	ldr	r2, [r1, #4]
 8003a9c:	f002 020c 	and.w	r2, r2, #12
 8003aa0:	2a04      	cmp	r2, #4
 8003aa2:	f000 816d 	beq.w	8003d80 <HAL_RCC_OscConfig+0x2fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003aa6:	684a      	ldr	r2, [r1, #4]
 8003aa8:	f002 020c 	and.w	r2, r2, #12
 8003aac:	2a08      	cmp	r2, #8
 8003aae:	f000 8163 	beq.w	8003d78 <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab2:	6863      	ldr	r3, [r4, #4]
 8003ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab8:	d017      	beq.n	8003aea <HAL_RCC_OscConfig+0x66>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 819c 	beq.w	8003df8 <HAL_RCC_OscConfig+0x374>
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac4:	f000 8258 	beq.w	8003f78 <HAL_RCC_OscConfig+0x4f4>
 8003ac8:	4ba8      	ldr	r3, [pc, #672]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ad8:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ada:	4aa4      	ldr	r2, [pc, #656]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
 8003adc:	68a1      	ldr	r1, [r4, #8]
 8003ade:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ae0:	f023 030f 	bic.w	r3, r3, #15
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aea:	4aa0      	ldr	r2, [pc, #640]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
 8003aec:	6813      	ldr	r3, [r2, #0]
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af2:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003af4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003af6:	68a1      	ldr	r1, [r4, #8]
 8003af8:	f023 030f 	bic.w	r3, r3, #15
 8003afc:	430b      	orrs	r3, r1
 8003afe:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fe fc76 	bl	80023f0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b04:	4f99      	ldr	r7, [pc, #612]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 8003b06:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b08:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0c:	2601      	movs	r6, #1
 8003b0e:	e005      	b.n	8003b1c <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b10:	f7fe fc6e 	bl	80023f0 <HAL_GetTick>
 8003b14:	1b40      	subs	r0, r0, r5
 8003b16:	2864      	cmp	r0, #100	; 0x64
 8003b18:	f200 816a 	bhi.w	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003b1c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	fa98 f3a8 	rbit	r3, r8
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	f003 031f 	and.w	r3, r3, #31
 8003b2e:	fa06 f303 	lsl.w	r3, r6, r3
 8003b32:	4213      	tst	r3, r2
 8003b34:	d0ec      	beq.n	8003b10 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	079f      	lsls	r7, r3, #30
 8003b3a:	d541      	bpl.n	8003bc0 <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b3c:	4a8b      	ldr	r2, [pc, #556]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
 8003b3e:	6851      	ldr	r1, [r2, #4]
 8003b40:	f011 0f0c 	tst.w	r1, #12
 8003b44:	f000 80c8 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b48:	6851      	ldr	r1, [r2, #4]
 8003b4a:	f001 010c 	and.w	r1, r1, #12
 8003b4e:	2908      	cmp	r1, #8
 8003b50:	f000 80be 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b54:	6922      	ldr	r2, [r4, #16]
 8003b56:	2a00      	cmp	r2, #0
 8003b58:	f000 81ad 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x432>
 8003b5c:	2501      	movs	r5, #1
 8003b5e:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b6e:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b70:	4f7e      	ldr	r7, [pc, #504]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
        __HAL_RCC_HSI_ENABLE();
 8003b72:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003b74:	f7fe fc3c 	bl	80023f0 <HAL_GetTick>
 8003b78:	f04f 0802 	mov.w	r8, #2
 8003b7c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7e:	e005      	b.n	8003b8c <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b80:	f7fe fc36 	bl	80023f0 <HAL_GetTick>
 8003b84:	1b80      	subs	r0, r0, r6
 8003b86:	2802      	cmp	r0, #2
 8003b88:	f200 8132 	bhi.w	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003b8c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	fa98 f3a8 	rbit	r3, r8
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	fa05 f303 	lsl.w	r3, r5, r3
 8003ba2:	4213      	tst	r3, r2
 8003ba4:	d0ec      	beq.n	8003b80 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba6:	6839      	ldr	r1, [r7, #0]
 8003ba8:	22f8      	movs	r2, #248	; 0xf8
 8003baa:	fa92 f2a2 	rbit	r2, r2
 8003bae:	6963      	ldr	r3, [r4, #20]
 8003bb0:	fab2 f282 	clz	r2, r2
 8003bb4:	4093      	lsls	r3, r2
 8003bb6:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	071d      	lsls	r5, r3, #28
 8003bc2:	d421      	bmi.n	8003c08 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc4:	0758      	lsls	r0, r3, #29
 8003bc6:	d54c      	bpl.n	8003c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc8:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	00d1      	lsls	r1, r2, #3
 8003bce:	f140 80c1 	bpl.w	8003d54 <HAL_RCC_OscConfig+0x2d0>
    FlagStatus       pwrclkchanged = RESET;
 8003bd2:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd6:	4d66      	ldr	r5, [pc, #408]	; (8003d70 <HAL_RCC_OscConfig+0x2ec>)
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	05da      	lsls	r2, r3, #23
 8003bdc:	f140 80f8 	bpl.w	8003dd0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be0:	68e3      	ldr	r3, [r4, #12]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	f000 818d 	beq.w	8003f02 <HAL_RCC_OscConfig+0x47e>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 812e 	beq.w	8003e4a <HAL_RCC_OscConfig+0x3c6>
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	4b5e      	ldr	r3, [pc, #376]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	f000 81cd 	beq.w	8003f92 <HAL_RCC_OscConfig+0x50e>
 8003bf8:	f022 0201 	bic.w	r2, r2, #1
 8003bfc:	621a      	str	r2, [r3, #32]
 8003bfe:	6a1a      	ldr	r2, [r3, #32]
 8003c00:	f022 0204 	bic.w	r2, r2, #4
 8003c04:	621a      	str	r2, [r3, #32]
 8003c06:	e181      	b.n	8003f0c <HAL_RCC_OscConfig+0x488>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c08:	69a2      	ldr	r2, [r4, #24]
 8003c0a:	2a00      	cmp	r2, #0
 8003c0c:	d07b      	beq.n	8003d06 <HAL_RCC_OscConfig+0x282>
 8003c0e:	2501      	movs	r5, #1
 8003c10:	fa95 f2a5 	rbit	r2, r5
      __HAL_RCC_LSI_ENABLE();
 8003c14:	4b57      	ldr	r3, [pc, #348]	; (8003d74 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	4f55      	ldr	r7, [pc, #340]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_ENABLE();
 8003c18:	fab2 f282 	clz	r2, r2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	f04f 0802 	mov.w	r8, #2
 8003c24:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8003c26:	f7fe fbe3 	bl	80023f0 <HAL_GetTick>
 8003c2a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2c:	e005      	b.n	8003c3a <HAL_RCC_OscConfig+0x1b6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c2e:	f7fe fbdf 	bl	80023f0 <HAL_GetTick>
 8003c32:	1b80      	subs	r0, r0, r6
 8003c34:	2802      	cmp	r0, #2
 8003c36:	f200 80db 	bhi.w	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003c3a:	fa98 f3a8 	rbit	r3, r8
 8003c3e:	fa98 f3a8 	rbit	r3, r8
 8003c42:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c48:	fa98 f3a8 	rbit	r3, r8
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	fa05 f303 	lsl.w	r3, r5, r3
 8003c58:	4213      	tst	r3, r2
 8003c5a:	d0e8      	beq.n	8003c2e <HAL_RCC_OscConfig+0x1aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	0758      	lsls	r0, r3, #29
 8003c60:	d4b2      	bmi.n	8003bc8 <HAL_RCC_OscConfig+0x144>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c62:	69e0      	ldr	r0, [r4, #28]
 8003c64:	b380      	cbz	r0, 8003cc8 <HAL_RCC_OscConfig+0x244>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c66:	4d41      	ldr	r5, [pc, #260]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
 8003c68:	686b      	ldr	r3, [r5, #4]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	f000 8171 	beq.w	8003f56 <HAL_RCC_OscConfig+0x4d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c74:	2802      	cmp	r0, #2
 8003c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c7a:	f000 8194 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x522>
 8003c7e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c82:	fab3 f383 	clz	r3, r3
 8003c86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fe fbac 	bl	80023f0 <HAL_GetTick>
 8003c98:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8003c9c:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9e:	2601      	movs	r6, #1
 8003ca0:	e005      	b.n	8003cae <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca2:	f7fe fba5 	bl	80023f0 <HAL_GetTick>
 8003ca6:	1b00      	subs	r0, r0, r4
 8003ca8:	2802      	cmp	r0, #2
 8003caa:	f200 80a1 	bhi.w	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003cae:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb2:	682a      	ldr	r2, [r5, #0]
 8003cb4:	fa97 f3a7 	rbit	r3, r7
 8003cb8:	fab3 f383 	clz	r3, r3
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	fa06 f303 	lsl.w	r3, r6, r3
 8003cc4:	4213      	tst	r3, r2
 8003cc6:	d1ec      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x21e>
        }
      }
    }
  }

  return HAL_OK;
 8003cc8:	2000      	movs	r0, #0
}
 8003cca:	b003      	add	sp, #12
 8003ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003cd0:	6852      	ldr	r2, [r2, #4]
 8003cd2:	03d6      	lsls	r6, r2, #15
 8003cd4:	f53f af3e 	bmi.w	8003b54 <HAL_RCC_OscConfig+0xd0>
 8003cd8:	2202      	movs	r2, #2
 8003cda:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	4923      	ldr	r1, [pc, #140]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
 8003ce0:	6808      	ldr	r0, [r1, #0]
 8003ce2:	fa92 f2a2 	rbit	r2, r2
 8003ce6:	fab2 f282 	clz	r2, r2
 8003cea:	f002 021f 	and.w	r2, r2, #31
 8003cee:	2101      	movs	r1, #1
 8003cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf4:	4202      	tst	r2, r0
 8003cf6:	d05a      	beq.n	8003dae <HAL_RCC_OscConfig+0x32a>
 8003cf8:	6922      	ldr	r2, [r4, #16]
 8003cfa:	428a      	cmp	r2, r1
 8003cfc:	d057      	beq.n	8003dae <HAL_RCC_OscConfig+0x32a>
        return HAL_ERROR;
 8003cfe:	2001      	movs	r0, #1
}
 8003d00:	b003      	add	sp, #12
 8003d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d06:	2601      	movs	r6, #1
 8003d08:	fa96 f1a6 	rbit	r1, r6
      __HAL_RCC_LSI_DISABLE();
 8003d0c:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d0e:	4f17      	ldr	r7, [pc, #92]	; (8003d6c <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_DISABLE();
 8003d10:	fab1 f181 	clz	r1, r1
 8003d14:	440b      	add	r3, r1
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	f04f 0802 	mov.w	r8, #2
 8003d1c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d1e:	f7fe fb67 	bl	80023f0 <HAL_GetTick>
 8003d22:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d24:	e004      	b.n	8003d30 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d26:	f7fe fb63 	bl	80023f0 <HAL_GetTick>
 8003d2a:	1b40      	subs	r0, r0, r5
 8003d2c:	2802      	cmp	r0, #2
 8003d2e:	d85f      	bhi.n	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003d30:	fa98 f3a8 	rbit	r3, r8
 8003d34:	fa98 f3a8 	rbit	r3, r8
 8003d38:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3e:	fa98 f3a8 	rbit	r3, r8
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	fa06 f303 	lsl.w	r3, r6, r3
 8003d4e:	4213      	tst	r3, r2
 8003d50:	d1e9      	bne.n	8003d26 <HAL_RCC_OscConfig+0x2a2>
 8003d52:	e783      	b.n	8003c5c <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d5a:	61da      	str	r2, [r3, #28]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	9301      	str	r3, [sp, #4]
 8003d64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003d66:	f04f 0801 	mov.w	r8, #1
 8003d6a:	e734      	b.n	8003bd6 <HAL_RCC_OscConfig+0x152>
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	40007000 	.word	0x40007000
 8003d74:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d78:	684a      	ldr	r2, [r1, #4]
 8003d7a:	03d2      	lsls	r2, r2, #15
 8003d7c:	f57f ae99 	bpl.w	8003ab2 <HAL_RCC_OscConfig+0x2e>
 8003d80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d84:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	49b1      	ldr	r1, [pc, #708]	; (8004050 <HAL_RCC_OscConfig+0x5cc>)
 8003d8a:	6808      	ldr	r0, [r1, #0]
 8003d8c:	fa92 f2a2 	rbit	r2, r2
 8003d90:	fab2 f282 	clz	r2, r2
 8003d94:	f002 021f 	and.w	r2, r2, #31
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9e:	4202      	tst	r2, r0
 8003da0:	f43f aeca 	beq.w	8003b38 <HAL_RCC_OscConfig+0xb4>
 8003da4:	6862      	ldr	r2, [r4, #4]
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	f47f aec6 	bne.w	8003b38 <HAL_RCC_OscConfig+0xb4>
 8003dac:	e7a7      	b.n	8003cfe <HAL_RCC_OscConfig+0x27a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	4da8      	ldr	r5, [pc, #672]	; (8004050 <HAL_RCC_OscConfig+0x5cc>)
 8003db0:	22f8      	movs	r2, #248	; 0xf8
 8003db2:	6828      	ldr	r0, [r5, #0]
 8003db4:	fa92 f2a2 	rbit	r2, r2
 8003db8:	fab2 f182 	clz	r1, r2
 8003dbc:	6962      	ldr	r2, [r4, #20]
 8003dbe:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8003dc2:	408a      	lsls	r2, r1
 8003dc4:	4302      	orrs	r2, r0
 8003dc6:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc8:	071d      	lsls	r5, r3, #28
 8003dca:	f57f aefb 	bpl.w	8003bc4 <HAL_RCC_OscConfig+0x140>
 8003dce:	e71b      	b.n	8003c08 <HAL_RCC_OscConfig+0x184>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003dd8:	f7fe fb0a 	bl	80023f0 <HAL_GetTick>
 8003ddc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dde:	682b      	ldr	r3, [r5, #0]
 8003de0:	05db      	lsls	r3, r3, #23
 8003de2:	f53f aefd 	bmi.w	8003be0 <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de6:	f7fe fb03 	bl	80023f0 <HAL_GetTick>
 8003dea:	1b80      	subs	r0, r0, r6
 8003dec:	2864      	cmp	r0, #100	; 0x64
 8003dee:	d9f6      	bls.n	8003dde <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8003df0:	2003      	movs	r0, #3
}
 8003df2:	b003      	add	sp, #12
 8003df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	4d95      	ldr	r5, [pc, #596]	; (8004050 <HAL_RCC_OscConfig+0x5cc>)
 8003dfa:	682b      	ldr	r3, [r5, #0]
 8003dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	682b      	ldr	r3, [r5, #0]
 8003e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e08:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e0a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003e0c:	68a2      	ldr	r2, [r4, #8]
 8003e0e:	f023 030f 	bic.w	r3, r3, #15
 8003e12:	4313      	orrs	r3, r2
 8003e14:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8003e16:	f7fe faeb 	bl	80023f0 <HAL_GetTick>
 8003e1a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8003e1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e20:	2701      	movs	r7, #1
 8003e22:	e004      	b.n	8003e2e <HAL_RCC_OscConfig+0x3aa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fe fae4 	bl	80023f0 <HAL_GetTick>
 8003e28:	1b80      	subs	r0, r0, r6
 8003e2a:	2864      	cmp	r0, #100	; 0x64
 8003e2c:	d8e0      	bhi.n	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003e2e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e32:	682a      	ldr	r2, [r5, #0]
 8003e34:	fa98 f3a8 	rbit	r3, r8
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	fa07 f303 	lsl.w	r3, r7, r3
 8003e44:	4213      	tst	r3, r2
 8003e46:	d1ed      	bne.n	8003e24 <HAL_RCC_OscConfig+0x3a0>
 8003e48:	e675      	b.n	8003b36 <HAL_RCC_OscConfig+0xb2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4a:	4d81      	ldr	r5, [pc, #516]	; (8004050 <HAL_RCC_OscConfig+0x5cc>)
 8003e4c:	6a2b      	ldr	r3, [r5, #32]
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	622b      	str	r3, [r5, #32]
 8003e54:	6a2b      	ldr	r3, [r5, #32]
 8003e56:	f023 0304 	bic.w	r3, r3, #4
 8003e5a:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003e5c:	f7fe fac8 	bl	80023f0 <HAL_GetTick>
 8003e60:	f04f 0902 	mov.w	r9, #2
 8003e64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e66:	2701      	movs	r7, #1
 8003e68:	e013      	b.n	8003e92 <HAL_RCC_OscConfig+0x40e>
 8003e6a:	fa99 f3a9 	rbit	r3, r9
 8003e6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8003e70:	fa99 f3a9 	rbit	r3, r9
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	f003 031f 	and.w	r3, r3, #31
 8003e7c:	fa07 f303 	lsl.w	r3, r7, r3
 8003e80:	4213      	tst	r3, r2
 8003e82:	d00e      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e84:	f7fe fab4 	bl	80023f0 <HAL_GetTick>
 8003e88:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e8c:	1b80      	subs	r0, r0, r6
 8003e8e:	4298      	cmp	r0, r3
 8003e90:	d8ae      	bhi.n	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003e92:	fa99 f3a9 	rbit	r3, r9
 8003e96:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0e5      	beq.n	8003e6a <HAL_RCC_OscConfig+0x3e6>
 8003e9e:	6a2a      	ldr	r2, [r5, #32]
 8003ea0:	e7e6      	b.n	8003e70 <HAL_RCC_OscConfig+0x3ec>
    if(pwrclkchanged == SET)
 8003ea2:	f1b8 0f00 	cmp.w	r8, #0
 8003ea6:	f43f aedc 	beq.w	8003c62 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4a69      	ldr	r2, [pc, #420]	; (8004050 <HAL_RCC_OscConfig+0x5cc>)
 8003eac:	69d3      	ldr	r3, [r2, #28]
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	61d3      	str	r3, [r2, #28]
 8003eb4:	e6d5      	b.n	8003c62 <HAL_RCC_OscConfig+0x1de>
 8003eb6:	2601      	movs	r6, #1
 8003eb8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8003ebc:	fab3 f383 	clz	r3, r3
 8003ec0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ec4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ec8:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eca:	4f61      	ldr	r7, [pc, #388]	; (8004050 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_HSI_DISABLE();
 8003ecc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ece:	f7fe fa8f 	bl	80023f0 <HAL_GetTick>
 8003ed2:	f04f 0802 	mov.w	r8, #2
 8003ed6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed8:	e004      	b.n	8003ee4 <HAL_RCC_OscConfig+0x460>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eda:	f7fe fa89 	bl	80023f0 <HAL_GetTick>
 8003ede:	1b40      	subs	r0, r0, r5
 8003ee0:	2802      	cmp	r0, #2
 8003ee2:	d885      	bhi.n	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003ee4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	fa98 f3a8 	rbit	r3, r8
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	f003 031f 	and.w	r3, r3, #31
 8003ef6:	fa06 f303 	lsl.w	r3, r6, r3
 8003efa:	4213      	tst	r3, r2
 8003efc:	d1ed      	bne.n	8003eda <HAL_RCC_OscConfig+0x456>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	e65e      	b.n	8003bc0 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f02:	4a53      	ldr	r2, [pc, #332]	; (8004050 <HAL_RCC_OscConfig+0x5cc>)
 8003f04:	6a13      	ldr	r3, [r2, #32]
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003f0c:	f7fe fa70 	bl	80023f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f10:	4f4f      	ldr	r7, [pc, #316]	; (8004050 <HAL_RCC_OscConfig+0x5cc>)
      tickstart = HAL_GetTick();
 8003f12:	4605      	mov	r5, r0
 8003f14:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	2601      	movs	r6, #1
 8003f1a:	e014      	b.n	8003f46 <HAL_RCC_OscConfig+0x4c2>
 8003f1c:	fa99 f3a9 	rbit	r3, r9
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	fa99 f3a9 	rbit	r3, r9
 8003f26:	fab3 f383 	clz	r3, r3
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	fa06 f303 	lsl.w	r3, r6, r3
 8003f32:	4213      	tst	r3, r2
 8003f34:	d1b5      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fe fa5b 	bl	80023f0 <HAL_GetTick>
 8003f3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f3e:	1b40      	subs	r0, r0, r5
 8003f40:	4298      	cmp	r0, r3
 8003f42:	f63f af55 	bhi.w	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003f46:	fa99 f3a9 	rbit	r3, r9
 8003f4a:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0e4      	beq.n	8003f1c <HAL_RCC_OscConfig+0x498>
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	e7e5      	b.n	8003f22 <HAL_RCC_OscConfig+0x49e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f56:	2801      	cmp	r0, #1
 8003f58:	f43f aeb7 	beq.w	8003cca <HAL_RCC_OscConfig+0x246>
        pll_config = RCC->CFGR;
 8003f5c:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f5e:	6a22      	ldr	r2, [r4, #32]
 8003f60:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003f64:	4291      	cmp	r1, r2
 8003f66:	f47f aeca 	bne.w	8003cfe <HAL_RCC_OscConfig+0x27a>
 8003f6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f6c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003f70:	1a18      	subs	r0, r3, r0
 8003f72:	bf18      	it	ne
 8003f74:	2001      	movne	r0, #1
 8003f76:	e6a8      	b.n	8003cca <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f7c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e5a3      	b.n	8003ada <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f92:	f042 0204 	orr.w	r2, r2, #4
 8003f96:	621a      	str	r2, [r3, #32]
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	621a      	str	r2, [r3, #32]
 8003fa0:	e7b4      	b.n	8003f0c <HAL_RCC_OscConfig+0x488>
    return HAL_ERROR;
 8003fa2:	2001      	movs	r0, #1
}
 8003fa4:	4770      	bx	lr
 8003fa6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fa18 	bl	80023f0 <HAL_GetTick>
 8003fc0:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8003fc4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fc6:	2701      	movs	r7, #1
 8003fc8:	e005      	b.n	8003fd6 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fca:	f7fe fa11 	bl	80023f0 <HAL_GetTick>
 8003fce:	1b80      	subs	r0, r0, r6
 8003fd0:	2802      	cmp	r0, #2
 8003fd2:	f63f af0d 	bhi.w	8003df0 <HAL_RCC_OscConfig+0x36c>
 8003fd6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fda:	682a      	ldr	r2, [r5, #0]
 8003fdc:	fa98 f3a8 	rbit	r3, r8
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	fa07 f303 	lsl.w	r3, r7, r3
 8003fec:	4213      	tst	r3, r2
 8003fee:	d1ec      	bne.n	8003fca <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ff0:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8003ff4:	686a      	ldr	r2, [r5, #4]
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	606b      	str	r3, [r5, #4]
 8004000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004004:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004008:	fab3 f383 	clz	r3, r3
 800400c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004010:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004014:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004016:	4d0e      	ldr	r5, [pc, #56]	; (8004050 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_PLL_ENABLE();
 8004018:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 800401a:	f7fe f9e9 	bl	80023f0 <HAL_GetTick>
 800401e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004022:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004024:	2601      	movs	r6, #1
 8004026:	e005      	b.n	8004034 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004028:	f7fe f9e2 	bl	80023f0 <HAL_GetTick>
 800402c:	1b00      	subs	r0, r0, r4
 800402e:	2802      	cmp	r0, #2
 8004030:	f63f aede 	bhi.w	8003df0 <HAL_RCC_OscConfig+0x36c>
 8004034:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004038:	682a      	ldr	r2, [r5, #0]
 800403a:	fa97 f3a7 	rbit	r3, r7
 800403e:	fab3 f383 	clz	r3, r3
 8004042:	f003 031f 	and.w	r3, r3, #31
 8004046:	fa06 f303 	lsl.w	r3, r6, r3
 800404a:	4213      	tst	r3, r2
 800404c:	d0ec      	beq.n	8004028 <HAL_RCC_OscConfig+0x5a4>
 800404e:	e63b      	b.n	8003cc8 <HAL_RCC_OscConfig+0x244>
 8004050:	40021000 	.word	0x40021000

08004054 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004054:	2800      	cmp	r0, #0
 8004056:	f000 80c8 	beq.w	80041ea <HAL_RCC_ClockConfig+0x196>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800405a:	4a6f      	ldr	r2, [pc, #444]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	6813      	ldr	r3, [r2, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	428b      	cmp	r3, r1
{
 8004064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	460d      	mov	r5, r1
 800406a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800406c:	d20c      	bcs.n	8004088 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	6813      	ldr	r3, [r2, #0]
 8004070:	f023 0307 	bic.w	r3, r3, #7
 8004074:	430b      	orrs	r3, r1
 8004076:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004078:	6813      	ldr	r3, [r2, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	428b      	cmp	r3, r1
 8004080:	d002      	beq.n	8004088 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004082:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8004084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	079f      	lsls	r7, r3, #30
 800408c:	d506      	bpl.n	800409c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408e:	4963      	ldr	r1, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	68a0      	ldr	r0, [r4, #8]
 8004092:	684a      	ldr	r2, [r1, #4]
 8004094:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004098:	4302      	orrs	r2, r0
 800409a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409c:	07de      	lsls	r6, r3, #31
 800409e:	d52f      	bpl.n	8004100 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a0:	6861      	ldr	r1, [r4, #4]
 80040a2:	2901      	cmp	r1, #1
 80040a4:	f000 80a3 	beq.w	80041ee <HAL_RCC_ClockConfig+0x19a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a8:	2902      	cmp	r1, #2
 80040aa:	f000 808b 	beq.w	80041c4 <HAL_RCC_ClockConfig+0x170>
 80040ae:	2202      	movs	r2, #2
 80040b0:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b4:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	fa92 f2a2 	rbit	r2, r2
 80040bc:	fab2 f282 	clz	r2, r2
 80040c0:	f002 021f 	and.w	r2, r2, #31
 80040c4:	2301      	movs	r3, #1
 80040c6:	fa03 f202 	lsl.w	r2, r3, r2
 80040ca:	4202      	tst	r2, r0
 80040cc:	d0d9      	beq.n	8004082 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ce:	4e53      	ldr	r6, [pc, #332]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 80040d0:	6873      	ldr	r3, [r6, #4]
 80040d2:	f023 0303 	bic.w	r3, r3, #3
 80040d6:	430b      	orrs	r3, r1
 80040d8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80040da:	f7fe f989 	bl	80023f0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040de:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80040e2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e4:	e005      	b.n	80040f2 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e6:	f7fe f983 	bl	80023f0 <HAL_GetTick>
 80040ea:	1bc0      	subs	r0, r0, r7
 80040ec:	4540      	cmp	r0, r8
 80040ee:	f200 8090 	bhi.w	8004212 <HAL_RCC_ClockConfig+0x1be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	6873      	ldr	r3, [r6, #4]
 80040f4:	6862      	ldr	r2, [r4, #4]
 80040f6:	f003 030c 	and.w	r3, r3, #12
 80040fa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80040fe:	d1f2      	bne.n	80040e6 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004100:	4a45      	ldr	r2, [pc, #276]	; (8004218 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	6813      	ldr	r3, [r2, #0]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	42ab      	cmp	r3, r5
 800410a:	d909      	bls.n	8004120 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410c:	6813      	ldr	r3, [r2, #0]
 800410e:	f023 0307 	bic.w	r3, r3, #7
 8004112:	432b      	orrs	r3, r5
 8004114:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	6813      	ldr	r3, [r2, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	42ab      	cmp	r3, r5
 800411e:	d1b0      	bne.n	8004082 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	0758      	lsls	r0, r3, #29
 8004124:	d506      	bpl.n	8004134 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004126:	493d      	ldr	r1, [pc, #244]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	68e0      	ldr	r0, [r4, #12]
 800412a:	684a      	ldr	r2, [r1, #4]
 800412c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004130:	4302      	orrs	r2, r0
 8004132:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004134:	0719      	lsls	r1, r3, #28
 8004136:	d507      	bpl.n	8004148 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004138:	4a38      	ldr	r2, [pc, #224]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	6921      	ldr	r1, [r4, #16]
 800413c:	6853      	ldr	r3, [r2, #4]
 800413e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004142:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004146:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004148:	4934      	ldr	r1, [pc, #208]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800414c:	f002 030c 	and.w	r3, r2, #12
 8004150:	2b08      	cmp	r3, #8
 8004152:	d017      	beq.n	8004184 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004154:	4932      	ldr	r1, [pc, #200]	; (8004220 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004156:	4b31      	ldr	r3, [pc, #196]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 8004158:	22f0      	movs	r2, #240	; 0xf0
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	fa92 f2a2 	rbit	r2, r2
 8004160:	fab2 f282 	clz	r2, r2
 8004164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004168:	40d3      	lsrs	r3, r2
 800416a:	4a2e      	ldr	r2, [pc, #184]	; (8004224 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 800416c:	482e      	ldr	r0, [pc, #184]	; (8004228 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800416e:	5cd3      	ldrb	r3, [r2, r3]
 8004170:	4a2e      	ldr	r2, [pc, #184]	; (800422c <HAL_RCC_ClockConfig+0x1d8>)
  HAL_InitTick (uwTickPrio);
 8004172:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004174:	fa21 f303 	lsr.w	r3, r1, r3
 8004178:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800417a:	f7fe f8f7 	bl	800236c <HAL_InitTick>
  return HAL_OK;
 800417e:	2000      	movs	r0, #0
}
 8004180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004184:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004188:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800418c:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 8004190:	fab3 f383 	clz	r3, r3
 8004194:	4c26      	ldr	r4, [pc, #152]	; (8004230 <HAL_RCC_ClockConfig+0x1dc>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004196:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004198:	fa20 f303 	lsr.w	r3, r0, r3
 800419c:	200f      	movs	r0, #15
 800419e:	5ce3      	ldrb	r3, [r4, r3]
 80041a0:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041a4:	fab0 f080 	clz	r0, r0
 80041a8:	f001 010f 	and.w	r1, r1, #15
 80041ac:	40c1      	lsrs	r1, r0
 80041ae:	4c21      	ldr	r4, [pc, #132]	; (8004234 <HAL_RCC_ClockConfig+0x1e0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80041b0:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041b2:	5c60      	ldrb	r0, [r4, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041b4:	bf4a      	itet	mi
 80041b6:	491a      	ldrmi	r1, [pc, #104]	; (8004220 <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041b8:	491f      	ldrpl	r1, [pc, #124]	; (8004238 <HAL_RCC_ClockConfig+0x1e4>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041ba:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041be:	fb03 f101 	mul.w	r1, r3, r1
 80041c2:	e7c8      	b.n	8004156 <HAL_RCC_ClockConfig+0x102>
 80041c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c8:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041cc:	4a13      	ldr	r2, [pc, #76]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 80041ce:	6810      	ldr	r0, [r2, #0]
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2201      	movs	r2, #1
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	4203      	tst	r3, r0
 80041e4:	f47f af73 	bne.w	80040ce <HAL_RCC_ClockConfig+0x7a>
 80041e8:	e74b      	b.n	8004082 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80041ea:	2001      	movs	r0, #1
}
 80041ec:	4770      	bx	lr
 80041ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041f2:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f6:	4b09      	ldr	r3, [pc, #36]	; (800421c <HAL_RCC_ClockConfig+0x1c8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	fa92 f2a2 	rbit	r2, r2
 80041fe:	fab2 f282 	clz	r2, r2
 8004202:	f002 021f 	and.w	r2, r2, #31
 8004206:	fa01 f202 	lsl.w	r2, r1, r2
 800420a:	421a      	tst	r2, r3
 800420c:	f47f af5f 	bne.w	80040ce <HAL_RCC_ClockConfig+0x7a>
 8004210:	e737      	b.n	8004082 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004212:	2003      	movs	r0, #3
 8004214:	e736      	b.n	8004084 <HAL_RCC_ClockConfig+0x30>
 8004216:	bf00      	nop
 8004218:	40022000 	.word	0x40022000
 800421c:	40021000 	.word	0x40021000
 8004220:	007a1200 	.word	0x007a1200
 8004224:	080098bc 	.word	0x080098bc
 8004228:	20000008 	.word	0x20000008
 800422c:	20000000 	.word	0x20000000
 8004230:	080098d4 	.word	0x080098d4
 8004234:	080098e4 	.word	0x080098e4
 8004238:	003d0900 	.word	0x003d0900

0800423c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800423c:	4915      	ldr	r1, [pc, #84]	; (8004294 <HAL_RCC_GetSysClockFreq+0x58>)
 800423e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004240:	f003 020c 	and.w	r2, r3, #12
 8004244:	2a08      	cmp	r2, #8
 8004246:	d001      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004248:	4813      	ldr	r0, [pc, #76]	; (8004298 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800424a:	4770      	bx	lr
{
 800424c:	b410      	push	{r4}
 800424e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004252:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004256:	fab2 f282 	clz	r2, r2
 800425a:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 800425e:	4c0f      	ldr	r4, [pc, #60]	; (800429c <HAL_RCC_GetSysClockFreq+0x60>)
 8004260:	40d0      	lsrs	r0, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004262:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004264:	5c20      	ldrb	r0, [r4, r0]
 8004266:	210f      	movs	r1, #15
 8004268:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800426c:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800426e:	fab1 f181 	clz	r1, r1
 8004272:	f002 020f 	and.w	r2, r2, #15
 8004276:	4c0a      	ldr	r4, [pc, #40]	; (80042a0 <HAL_RCC_GetSysClockFreq+0x64>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004278:	bf4c      	ite	mi
 800427a:	4b07      	ldrmi	r3, [pc, #28]	; (8004298 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800427c:	4b09      	ldrpl	r3, [pc, #36]	; (80042a4 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800427e:	fa22 f201 	lsr.w	r2, r2, r1
 8004282:	5ca2      	ldrb	r2, [r4, r2]
}
 8004284:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004288:	bf48      	it	mi
 800428a:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800428e:	fb03 f000 	mul.w	r0, r3, r0
}
 8004292:	4770      	bx	lr
 8004294:	40021000 	.word	0x40021000
 8004298:	007a1200 	.word	0x007a1200
 800429c:	080098d4 	.word	0x080098d4
 80042a0:	080098e4 	.word	0x080098e4
 80042a4:	003d0900 	.word	0x003d0900

080042a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	fa92 f2a2 	rbit	r2, r2
 80042b4:	fab2 f282 	clz	r2, r2
 80042b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042bc:	4904      	ldr	r1, [pc, #16]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80042be:	4805      	ldr	r0, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80042c0:	40d3      	lsrs	r3, r2
 80042c2:	6800      	ldr	r0, [r0, #0]
 80042c4:	5ccb      	ldrb	r3, [r1, r3]
}    
 80042c6:	40d8      	lsrs	r0, r3
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	080098cc 	.word	0x080098cc
 80042d4:	20000000 	.word	0x20000000

080042d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80042d8:	4b08      	ldr	r3, [pc, #32]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042da:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	fa92 f2a2 	rbit	r2, r2
 80042e4:	fab2 f282 	clz	r2, r2
 80042e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80042ec:	4904      	ldr	r1, [pc, #16]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80042ee:	4805      	ldr	r0, [pc, #20]	; (8004304 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80042f0:	40d3      	lsrs	r3, r2
 80042f2:	6800      	ldr	r0, [r0, #0]
 80042f4:	5ccb      	ldrb	r3, [r1, r3]
} 
 80042f6:	40d8      	lsrs	r0, r3
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
 8004300:	080098cc 	.word	0x080098cc
 8004304:	20000000 	.word	0x20000000

08004308 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800430c:	6803      	ldr	r3, [r0, #0]
 800430e:	03dd      	lsls	r5, r3, #15
{
 8004310:	b083      	sub	sp, #12
 8004312:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004314:	d540      	bpl.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4b84      	ldr	r3, [pc, #528]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	00d0      	lsls	r0, r2, #3
 800431c:	f140 80ba 	bpl.w	8004494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	4e82      	ldr	r6, [pc, #520]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004322:	6833      	ldr	r3, [r6, #0]
 8004324:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 8004326:	f04f 0500 	mov.w	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	f140 80c3 	bpl.w	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800432e:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8004332:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004336:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800433a:	d020      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800433c:	6861      	ldr	r1, [r4, #4]
 800433e:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8004342:	429a      	cmp	r2, r3
 8004344:	d01c      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004346:	f8d8 1020 	ldr.w	r1, [r8, #32]
 800434a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800434e:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8004352:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004356:	4f76      	ldr	r7, [pc, #472]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004358:	fab2 f282 	clz	r2, r2
 800435c:	443a      	add	r2, r7
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	2601      	movs	r6, #1
 8004362:	6016      	str	r6, [r2, #0]
 8004364:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	443b      	add	r3, r7
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004374:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8004376:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800437a:	f100 80af 	bmi.w	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800437e:	6861      	ldr	r1, [r4, #4]
 8004380:	4a69      	ldr	r2, [pc, #420]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004382:	6a13      	ldr	r3, [r2, #32]
 8004384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004388:	430b      	orrs	r3, r1
 800438a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800438c:	b11d      	cbz	r5, 8004396 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438e:	69d3      	ldr	r3, [r2, #28]
 8004390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004394:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	07df      	lsls	r7, r3, #31
 800439a:	d506      	bpl.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800439c:	4962      	ldr	r1, [pc, #392]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800439e:	68a0      	ldr	r0, [r4, #8]
 80043a0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80043a2:	f022 0203 	bic.w	r2, r2, #3
 80043a6:	4302      	orrs	r2, r0
 80043a8:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043aa:	079e      	lsls	r6, r3, #30
 80043ac:	d506      	bpl.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043ae:	495e      	ldr	r1, [pc, #376]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043b0:	68e0      	ldr	r0, [r4, #12]
 80043b2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80043b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80043b8:	4302      	orrs	r2, r0
 80043ba:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043bc:	075d      	lsls	r5, r3, #29
 80043be:	d506      	bpl.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c0:	4959      	ldr	r1, [pc, #356]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043c2:	6920      	ldr	r0, [r4, #16]
 80043c4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80043c6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80043ca:	4302      	orrs	r2, r0
 80043cc:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ce:	0698      	lsls	r0, r3, #26
 80043d0:	d506      	bpl.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d2:	4955      	ldr	r1, [pc, #340]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043d4:	69e0      	ldr	r0, [r4, #28]
 80043d6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80043d8:	f022 0210 	bic.w	r2, r2, #16
 80043dc:	4302      	orrs	r2, r0
 80043de:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043e0:	0399      	lsls	r1, r3, #14
 80043e2:	d506      	bpl.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043e4:	4950      	ldr	r1, [pc, #320]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80043e8:	684a      	ldr	r2, [r1, #4]
 80043ea:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80043ee:	4302      	orrs	r2, r0
 80043f0:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f2:	065a      	lsls	r2, r3, #25
 80043f4:	d506      	bpl.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043f6:	494c      	ldr	r1, [pc, #304]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043f8:	6a20      	ldr	r0, [r4, #32]
 80043fa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80043fc:	f022 0220 	bic.w	r2, r2, #32
 8004400:	4302      	orrs	r2, r0
 8004402:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004404:	071f      	lsls	r7, r3, #28
 8004406:	d506      	bpl.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004408:	4947      	ldr	r1, [pc, #284]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800440a:	6960      	ldr	r0, [r4, #20]
 800440c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800440e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004412:	4302      	orrs	r2, r0
 8004414:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004416:	06de      	lsls	r6, r3, #27
 8004418:	d506      	bpl.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800441a:	4943      	ldr	r1, [pc, #268]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800441c:	69a0      	ldr	r0, [r4, #24]
 800441e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004420:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004424:	4302      	orrs	r2, r0
 8004426:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004428:	059d      	lsls	r5, r3, #22
 800442a:	d506      	bpl.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800442c:	493e      	ldr	r1, [pc, #248]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800442e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004430:	684a      	ldr	r2, [r1, #4]
 8004432:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004436:	4302      	orrs	r2, r0
 8004438:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800443a:	0618      	lsls	r0, r3, #24
 800443c:	d506      	bpl.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800443e:	493a      	ldr	r1, [pc, #232]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004440:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004442:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004444:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8004448:	4302      	orrs	r2, r0
 800444a:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800444c:	05d9      	lsls	r1, r3, #23
 800444e:	d506      	bpl.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004450:	4935      	ldr	r1, [pc, #212]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004452:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004454:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004456:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800445a:	4302      	orrs	r2, r0
 800445c:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800445e:	04da      	lsls	r2, r3, #19
 8004460:	d506      	bpl.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004462:	4931      	ldr	r1, [pc, #196]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004464:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004466:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800446c:	4302      	orrs	r2, r0
 800446e:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004470:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8004474:	d103      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004476:	4618      	mov	r0, r3
}
 8004478:	b003      	add	sp, #12
 800447a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800447e:	4a2a      	ldr	r2, [pc, #168]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004480:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004482:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 8004488:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800448a:	430b      	orrs	r3, r1
 800448c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800448e:	b003      	add	sp, #12
 8004490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004494:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004496:	4e25      	ldr	r6, [pc, #148]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x224>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800449c:	61da      	str	r2, [r3, #28]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a4:	9301      	str	r3, [sp, #4]
 80044a6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 80044ac:	f04f 0501 	mov.w	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b0:	f53f af3d 	bmi.w	800432e <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b4:	6833      	ldr	r3, [r6, #0]
 80044b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80044bc:	f7fd ff98 	bl	80023f0 <HAL_GetTick>
 80044c0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	6833      	ldr	r3, [r6, #0]
 80044c4:	05da      	lsls	r2, r3, #23
 80044c6:	f53f af32 	bmi.w	800432e <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ca:	f7fd ff91 	bl	80023f0 <HAL_GetTick>
 80044ce:	1bc0      	subs	r0, r0, r7
 80044d0:	2864      	cmp	r0, #100	; 0x64
 80044d2:	d9f6      	bls.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 80044d4:	2003      	movs	r0, #3
}
 80044d6:	b003      	add	sp, #12
 80044d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 80044dc:	f7fd ff88 	bl	80023f0 <HAL_GetTick>
 80044e0:	f04f 0902 	mov.w	r9, #2
 80044e4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	e015      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80044e8:	fa99 f3a9 	rbit	r3, r9
 80044ec:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80044f0:	fa99 f3a9 	rbit	r3, r9
 80044f4:	fab3 f383 	clz	r3, r3
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	fa06 f303 	lsl.w	r3, r6, r3
 8004500:	4213      	tst	r3, r2
 8004502:	f47f af3c 	bne.w	800437e <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fd ff73 	bl	80023f0 <HAL_GetTick>
 800450a:	f241 3388 	movw	r3, #5000	; 0x1388
 800450e:	1bc0      	subs	r0, r0, r7
 8004510:	4298      	cmp	r0, r3
 8004512:	d8df      	bhi.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004514:	fa99 f3a9 	rbit	r3, r9
 8004518:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0e3      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8004520:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004524:	e7e4      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	40007000 	.word	0x40007000
 8004530:	10908100 	.word	0x10908100

08004534 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004534:	2800      	cmp	r0, #0
 8004536:	d077      	beq.n	8004628 <HAL_SPI_Init+0xf4>
{
 8004538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800453c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800453e:	4604      	mov	r4, r0
 8004540:	2e00      	cmp	r6, #0
 8004542:	d058      	beq.n	80045f6 <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004544:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004546:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800454a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800454e:	2200      	movs	r2, #0
 8004550:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004552:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004556:	2b00      	cmp	r3, #0
 8004558:	d059      	beq.n	800460e <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800455a:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800455c:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800455e:	2302      	movs	r3, #2
 8004560:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004564:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004566:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800456a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800456e:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004570:	d947      	bls.n	8004602 <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004572:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8004576:	d159      	bne.n	800462c <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004578:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800457a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800457c:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8004580:	68a3      	ldr	r3, [r4, #8]
 8004582:	6a27      	ldr	r7, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004584:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004588:	6862      	ldr	r2, [r4, #4]
 800458a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800458e:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8004592:	431a      	orrs	r2, r3
 8004594:	6923      	ldr	r3, [r4, #16]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	431a      	orrs	r2, r3
 800459c:	6963      	ldr	r3, [r4, #20]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	f006 0c10 	and.w	ip, r6, #16
 80045ae:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045b2:	69a6      	ldr	r6, [r4, #24]
 80045b4:	69e3      	ldr	r3, [r4, #28]
 80045b6:	f003 0838 	and.w	r8, r3, #56	; 0x38
 80045ba:	f406 7300 	and.w	r3, r6, #512	; 0x200
 80045be:	4313      	orrs	r3, r2
 80045c0:	f007 0780 	and.w	r7, r7, #128	; 0x80
 80045c4:	ea43 0308 	orr.w	r3, r3, r8
 80045c8:	433b      	orrs	r3, r7
 80045ca:	432b      	orrs	r3, r5
 80045cc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045ce:	0c33      	lsrs	r3, r6, #16
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	ea4e 0303 	orr.w	r3, lr, r3
 80045d8:	ea43 030c 	orr.w	r3, r3, ip
 80045dc:	4303      	orrs	r3, r0
 80045de:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045e0:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80045e8:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045ea:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ec:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80045ee:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 80045f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045f6:	6843      	ldr	r3, [r0, #4]
 80045f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045fc:	d0a5      	beq.n	800454a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045fe:	61c6      	str	r6, [r0, #28]
 8004600:	e7a3      	b.n	800454a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004602:	d00b      	beq.n	800461c <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004604:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004608:	2500      	movs	r5, #0
 800460a:	62a5      	str	r5, [r4, #40]	; 0x28
 800460c:	e7b8      	b.n	8004580 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 800460e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004612:	4620      	mov	r0, r4
 8004614:	f7fd fa0c 	bl	8001a30 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004618:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800461a:	e79e      	b.n	800455a <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800461c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800461e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004622:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8004626:	e7ab      	b.n	8004580 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004628:	2001      	movs	r0, #1
}
 800462a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800462c:	2000      	movs	r0, #0
 800462e:	e7eb      	b.n	8004608 <HAL_SPI_Init+0xd4>

08004630 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004630:	6a03      	ldr	r3, [r0, #32]
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004638:	6a03      	ldr	r3, [r0, #32]
{
 800463a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004640:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004642:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004646:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800464a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800464c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800464e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004652:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004654:	4d13      	ldr	r5, [pc, #76]	; (80046a4 <TIM_OC1_SetConfig+0x74>)
 8004656:	42a8      	cmp	r0, r5
 8004658:	d00f      	beq.n	800467a <TIM_OC1_SetConfig+0x4a>
 800465a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800465e:	42a8      	cmp	r0, r5
 8004660:	d00b      	beq.n	800467a <TIM_OC1_SetConfig+0x4a>
 8004662:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004666:	42a8      	cmp	r0, r5
 8004668:	d007      	beq.n	800467a <TIM_OC1_SetConfig+0x4a>
 800466a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800466e:	42a8      	cmp	r0, r5
 8004670:	d003      	beq.n	800467a <TIM_OC1_SetConfig+0x4a>
 8004672:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004676:	42a8      	cmp	r0, r5
 8004678:	d10d      	bne.n	8004696 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800467a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800467c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004680:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004682:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004686:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800468a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800468e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004692:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004696:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004698:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800469a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800469c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800469e:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80046a0:	6203      	str	r3, [r0, #32]
}
 80046a2:	4770      	bx	lr
 80046a4:	40012c00 	.word	0x40012c00

080046a8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046a8:	6a03      	ldr	r3, [r0, #32]
 80046aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b0:	6a03      	ldr	r3, [r0, #32]
{
 80046b2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046b6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046be:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80046c2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046c4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80046c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ce:	4d15      	ldr	r5, [pc, #84]	; (8004724 <TIM_OC3_SetConfig+0x7c>)
 80046d0:	42a8      	cmp	r0, r5
 80046d2:	d010      	beq.n	80046f6 <TIM_OC3_SetConfig+0x4e>
 80046d4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80046d8:	42a8      	cmp	r0, r5
 80046da:	d00c      	beq.n	80046f6 <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046dc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80046e0:	42a8      	cmp	r0, r5
 80046e2:	d00f      	beq.n	8004704 <TIM_OC3_SetConfig+0x5c>
 80046e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80046e8:	42a8      	cmp	r0, r5
 80046ea:	d00b      	beq.n	8004704 <TIM_OC3_SetConfig+0x5c>
 80046ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80046f0:	42a8      	cmp	r0, r5
 80046f2:	d10f      	bne.n	8004714 <TIM_OC3_SetConfig+0x6c>
 80046f4:	e006      	b.n	8004704 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046f6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80046f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004700:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004704:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004708:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800470c:	ea46 0c05 	orr.w	ip, r6, r5
 8004710:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004714:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004716:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004718:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800471a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800471c:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800471e:	6203      	str	r3, [r0, #32]
}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40012c00 	.word	0x40012c00

08004728 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004728:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800472c:	2b01      	cmp	r3, #1
 800472e:	d122      	bne.n	8004776 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004730:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004732:	4917      	ldr	r1, [pc, #92]	; (8004790 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	2202      	movs	r2, #2
 8004736:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800473a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004744:	d019      	beq.n	800477a <HAL_TIM_Base_Start_IT+0x52>
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d016      	beq.n	800477a <HAL_TIM_Base_Start_IT+0x52>
 800474c:	4a11      	ldr	r2, [pc, #68]	; (8004794 <HAL_TIM_Base_Start_IT+0x6c>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d013      	beq.n	800477a <HAL_TIM_Base_Start_IT+0x52>
 8004752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004756:	4293      	cmp	r3, r2
 8004758:	d00f      	beq.n	800477a <HAL_TIM_Base_Start_IT+0x52>
 800475a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800475e:	4293      	cmp	r3, r2
 8004760:	d00b      	beq.n	800477a <HAL_TIM_Base_Start_IT+0x52>
 8004762:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004770:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	4770      	bx	lr
    return HAL_ERROR;
 8004776:	2001      	movs	r0, #1
 8004778:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800477a:	6899      	ldr	r1, [r3, #8]
 800477c:	4a06      	ldr	r2, [pc, #24]	; (8004798 <HAL_TIM_Base_Start_IT+0x70>)
 800477e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004780:	2a06      	cmp	r2, #6
 8004782:	d002      	beq.n	800478a <HAL_TIM_Base_Start_IT+0x62>
 8004784:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004788:	d1ef      	bne.n	800476a <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 800478a:	2000      	movs	r0, #0
}
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40000400 	.word	0x40000400
 8004798:	00010007 	.word	0x00010007

0800479c <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800479c:	6803      	ldr	r3, [r0, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	f022 0201 	bic.w	r2, r2, #1
 80047a4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80047a6:	6a1a      	ldr	r2, [r3, #32]
 80047a8:	f241 1111 	movw	r1, #4369	; 0x1111
 80047ac:	420a      	tst	r2, r1
 80047ae:	d108      	bne.n	80047c2 <HAL_TIM_Base_Stop_IT+0x26>
 80047b0:	6a19      	ldr	r1, [r3, #32]
 80047b2:	f240 4244 	movw	r2, #1092	; 0x444
 80047b6:	4211      	tst	r1, r2
 80047b8:	d103      	bne.n	80047c2 <HAL_TIM_Base_Stop_IT+0x26>
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80047c8:	2000      	movs	r0, #0
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80047cc:	2800      	cmp	r0, #0
 80047ce:	f000 8081 	beq.w	80048d4 <HAL_TIM_PWM_Init+0x108>
{
 80047d2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80047d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80047d8:	4604      	mov	r4, r0
 80047da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d06d      	beq.n	80048be <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e4:	493c      	ldr	r1, [pc, #240]	; (80048d8 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80047e6:	2302      	movs	r3, #2
 80047e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ec:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80047ee:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047f0:	d051      	beq.n	8004896 <HAL_TIM_PWM_Init+0xca>
 80047f2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80047f6:	d021      	beq.n	800483c <HAL_TIM_PWM_Init+0x70>
 80047f8:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80047fc:	428a      	cmp	r2, r1
 80047fe:	d01d      	beq.n	800483c <HAL_TIM_PWM_Init+0x70>
 8004800:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004804:	428a      	cmp	r2, r1
 8004806:	d019      	beq.n	800483c <HAL_TIM_PWM_Init+0x70>
 8004808:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 800480c:	428a      	cmp	r2, r1
 800480e:	d042      	beq.n	8004896 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004810:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8004814:	428a      	cmp	r2, r1
 8004816:	d057      	beq.n	80048c8 <HAL_TIM_PWM_Init+0xfc>
 8004818:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800481c:	428a      	cmp	r2, r1
 800481e:	d053      	beq.n	80048c8 <HAL_TIM_PWM_Init+0xfc>
 8004820:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004824:	428a      	cmp	r2, r1
 8004826:	d04f      	beq.n	80048c8 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004828:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800482a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800482c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004830:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004832:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004834:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004836:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004838:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800483a:	e010      	b.n	800485e <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 800483c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004844:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800484a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800484c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800484e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004852:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004854:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004856:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004858:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800485a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800485c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800485e:	2301      	movs	r3, #1
 8004860:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004862:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004866:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800486a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800486e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004872:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800487a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004882:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004886:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800488a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800488e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004892:	2000      	movs	r0, #0
}
 8004894:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004896:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004898:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800489e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80048a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a6:	69a1      	ldr	r1, [r4, #24]
 80048a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ac:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80048ae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b0:	68e3      	ldr	r3, [r4, #12]
 80048b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80048b8:	6963      	ldr	r3, [r4, #20]
 80048ba:	6313      	str	r3, [r2, #48]	; 0x30
 80048bc:	e7cf      	b.n	800485e <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80048be:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80048c2:	f7fd fa01 	bl	8001cc8 <HAL_TIM_PWM_MspInit>
 80048c6:	e78c      	b.n	80047e2 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048c8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ca:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80048cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d0:	4303      	orrs	r3, r0
 80048d2:	e7e9      	b.n	80048a8 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 80048d4:	2001      	movs	r0, #1
}
 80048d6:	4770      	bx	lr
 80048d8:	40012c00 	.word	0x40012c00

080048dc <HAL_TIM_PWM_Start>:
 80048dc:	2900      	cmp	r1, #0
 80048de:	d14a      	bne.n	8004976 <HAL_TIM_PWM_Start+0x9a>
 80048e0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d160      	bne.n	80049aa <HAL_TIM_PWM_Start+0xce>
 80048e8:	2302      	movs	r3, #2
 80048ea:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80048ee:	6803      	ldr	r3, [r0, #0]
 80048f0:	2201      	movs	r2, #1
 80048f2:	6a18      	ldr	r0, [r3, #32]
 80048f4:	f001 011f 	and.w	r1, r1, #31
 80048f8:	fa02 f101 	lsl.w	r1, r2, r1
 80048fc:	ea20 0001 	bic.w	r0, r0, r1
 8004900:	6218      	str	r0, [r3, #32]
 8004902:	6a18      	ldr	r0, [r3, #32]
 8004904:	4a3b      	ldr	r2, [pc, #236]	; (80049f4 <HAL_TIM_PWM_Start+0x118>)
 8004906:	4301      	orrs	r1, r0
 8004908:	4293      	cmp	r3, r2
 800490a:	6219      	str	r1, [r3, #32]
 800490c:	d059      	beq.n	80049c2 <HAL_TIM_PWM_Start+0xe6>
 800490e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004912:	4293      	cmp	r3, r2
 8004914:	d00b      	beq.n	800492e <HAL_TIM_PWM_Start+0x52>
 8004916:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800491a:	4293      	cmp	r3, r2
 800491c:	d007      	beq.n	800492e <HAL_TIM_PWM_Start+0x52>
 800491e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004922:	4293      	cmp	r3, r2
 8004924:	d003      	beq.n	800492e <HAL_TIM_PWM_Start+0x52>
 8004926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800492a:	4293      	cmp	r3, r2
 800492c:	d103      	bne.n	8004936 <HAL_TIM_PWM_Start+0x5a>
 800492e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004934:	645a      	str	r2, [r3, #68]	; 0x44
 8004936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800493a:	d00e      	beq.n	800495a <HAL_TIM_PWM_Start+0x7e>
 800493c:	4a2e      	ldr	r2, [pc, #184]	; (80049f8 <HAL_TIM_PWM_Start+0x11c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00b      	beq.n	800495a <HAL_TIM_PWM_Start+0x7e>
 8004942:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <HAL_TIM_PWM_Start+0x7e>
 800494a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <HAL_TIM_PWM_Start+0x7e>
 8004952:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004956:	4293      	cmp	r3, r2
 8004958:	d107      	bne.n	800496a <HAL_TIM_PWM_Start+0x8e>
 800495a:	6899      	ldr	r1, [r3, #8]
 800495c:	4a27      	ldr	r2, [pc, #156]	; (80049fc <HAL_TIM_PWM_Start+0x120>)
 800495e:	400a      	ands	r2, r1
 8004960:	2a06      	cmp	r2, #6
 8004962:	d024      	beq.n	80049ae <HAL_TIM_PWM_Start+0xd2>
 8004964:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004968:	d021      	beq.n	80049ae <HAL_TIM_PWM_Start+0xd2>
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	2000      	movs	r0, #0
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	4770      	bx	lr
 8004976:	2904      	cmp	r1, #4
 8004978:	d01b      	beq.n	80049b2 <HAL_TIM_PWM_Start+0xd6>
 800497a:	2908      	cmp	r1, #8
 800497c:	d026      	beq.n	80049cc <HAL_TIM_PWM_Start+0xf0>
 800497e:	290c      	cmp	r1, #12
 8004980:	d00f      	beq.n	80049a2 <HAL_TIM_PWM_Start+0xc6>
 8004982:	2910      	cmp	r1, #16
 8004984:	d02e      	beq.n	80049e4 <HAL_TIM_PWM_Start+0x108>
 8004986:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800498a:	2b01      	cmp	r3, #1
 800498c:	d10d      	bne.n	80049aa <HAL_TIM_PWM_Start+0xce>
 800498e:	2908      	cmp	r1, #8
 8004990:	d020      	beq.n	80049d4 <HAL_TIM_PWM_Start+0xf8>
 8004992:	290c      	cmp	r1, #12
 8004994:	d022      	beq.n	80049dc <HAL_TIM_PWM_Start+0x100>
 8004996:	2910      	cmp	r1, #16
 8004998:	d028      	beq.n	80049ec <HAL_TIM_PWM_Start+0x110>
 800499a:	2302      	movs	r3, #2
 800499c:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 80049a0:	e7a5      	b.n	80048ee <HAL_TIM_PWM_Start+0x12>
 80049a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d018      	beq.n	80049dc <HAL_TIM_PWM_Start+0x100>
 80049aa:	2001      	movs	r0, #1
 80049ac:	4770      	bx	lr
 80049ae:	2000      	movs	r0, #0
 80049b0:	4770      	bx	lr
 80049b2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d1f7      	bne.n	80049aa <HAL_TIM_PWM_Start+0xce>
 80049ba:	2302      	movs	r3, #2
 80049bc:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80049c0:	e795      	b.n	80048ee <HAL_TIM_PWM_Start+0x12>
 80049c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
 80049ca:	e7c6      	b.n	800495a <HAL_TIM_PWM_Start+0x7e>
 80049cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d1ea      	bne.n	80049aa <HAL_TIM_PWM_Start+0xce>
 80049d4:	2302      	movs	r3, #2
 80049d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80049da:	e788      	b.n	80048ee <HAL_TIM_PWM_Start+0x12>
 80049dc:	2302      	movs	r3, #2
 80049de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80049e2:	e784      	b.n	80048ee <HAL_TIM_PWM_Start+0x12>
 80049e4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d1de      	bne.n	80049aa <HAL_TIM_PWM_Start+0xce>
 80049ec:	2302      	movs	r3, #2
 80049ee:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80049f2:	e77c      	b.n	80048ee <HAL_TIM_PWM_Start+0x12>
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40000400 	.word	0x40000400
 80049fc:	00010007 	.word	0x00010007

08004a00 <HAL_TIM_OC_DelayElapsedCallback>:
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop

08004a04 <HAL_TIM_IC_CaptureCallback>:
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop

08004a08 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop

08004a0c <HAL_TIM_TriggerCallback>:
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop

08004a10 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a10:	6803      	ldr	r3, [r0, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	0791      	lsls	r1, r2, #30
{
 8004a16:	b510      	push	{r4, lr}
 8004a18:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a1a:	d502      	bpl.n	8004a22 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	0792      	lsls	r2, r2, #30
 8004a20:	d468      	bmi.n	8004af4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	0752      	lsls	r2, r2, #29
 8004a26:	d502      	bpl.n	8004a2e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	0750      	lsls	r0, r2, #29
 8004a2c:	d44f      	bmi.n	8004ace <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	0711      	lsls	r1, r2, #28
 8004a32:	d502      	bpl.n	8004a3a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	0712      	lsls	r2, r2, #28
 8004a38:	d437      	bmi.n	8004aaa <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	06d0      	lsls	r0, r2, #27
 8004a3e:	d502      	bpl.n	8004a46 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	06d1      	lsls	r1, r2, #27
 8004a44:	d41e      	bmi.n	8004a84 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	07d2      	lsls	r2, r2, #31
 8004a4a:	d502      	bpl.n	8004a52 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	07d0      	lsls	r0, r2, #31
 8004a50:	d469      	bmi.n	8004b26 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	0611      	lsls	r1, r2, #24
 8004a56:	d502      	bpl.n	8004a5e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	0612      	lsls	r2, r2, #24
 8004a5c:	d46b      	bmi.n	8004b36 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	05d0      	lsls	r0, r2, #23
 8004a62:	d502      	bpl.n	8004a6a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	0611      	lsls	r1, r2, #24
 8004a68:	d46d      	bmi.n	8004b46 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	0652      	lsls	r2, r2, #25
 8004a6e:	d502      	bpl.n	8004a76 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	0650      	lsls	r0, r2, #25
 8004a74:	d46f      	bmi.n	8004b56 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	0691      	lsls	r1, r2, #26
 8004a7a:	d502      	bpl.n	8004a82 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	0692      	lsls	r2, r2, #26
 8004a80:	d449      	bmi.n	8004b16 <HAL_TIM_IRQHandler+0x106>
}
 8004a82:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a84:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a88:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a8a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a8c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004a94:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a96:	d16f      	bne.n	8004b78 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a98:	f7ff ffb2 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7ff ffb3 	bl	8004a08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aa4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	7722      	strb	r2, [r4, #28]
 8004aa8:	e7cd      	b.n	8004a46 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aaa:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aae:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ab0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aba:	d15a      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abc:	f7ff ffa0 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	4620      	mov	r0, r4
 8004ac2:	f7ff ffa1 	bl	8004a08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ac8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	7722      	strb	r2, [r4, #28]
 8004acc:	e7b5      	b.n	8004a3a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ace:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad2:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ad4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ad6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae0:	d144      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	f7ff ff8d 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f7ff ff8e 	bl	8004a08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aec:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aee:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af0:	7722      	strb	r2, [r4, #28]
 8004af2:	e79c      	b.n	8004a2e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004af4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004afa:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004afc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	0799      	lsls	r1, r3, #30
 8004b02:	d130      	bne.n	8004b66 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b04:	f7ff ff7c 	bl	8004a00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f7ff ff7d 	bl	8004a08 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b10:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	7722      	strb	r2, [r4, #28]
 8004b14:	e785      	b.n	8004a22 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b16:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004b1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b1c:	611a      	str	r2, [r3, #16]
}
 8004b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004b22:	f000 ba91 	b.w	8005048 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b26:	f06f 0201 	mvn.w	r2, #1
 8004b2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	f7fc fb8f 	bl	8001250 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	e78d      	b.n	8004a52 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b3a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f000 fa85 	bl	800504c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b42:	6823      	ldr	r3, [r4, #0]
 8004b44:	e78b      	b.n	8004a5e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b4a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f000 fa7f 	bl	8005050 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	e789      	b.n	8004a6a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f7ff ff55 	bl	8004a0c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	e787      	b.n	8004a76 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	f7ff ff4d 	bl	8004a04 <HAL_TIM_IC_CaptureCallback>
 8004b6a:	e7d0      	b.n	8004b0e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6c:	f7ff ff4a 	bl	8004a04 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e7bc      	b.n	8004aec <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	f7ff ff47 	bl	8004a04 <HAL_TIM_IC_CaptureCallback>
 8004b76:	e7a6      	b.n	8004ac6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b78:	f7ff ff44 	bl	8004a04 <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e791      	b.n	8004aa2 <HAL_TIM_IRQHandler+0x92>
 8004b7e:	bf00      	nop

08004b80 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b80:	6a03      	ldr	r3, [r0, #32]
 8004b82:	f023 0310 	bic.w	r3, r3, #16
 8004b86:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004b88:	6a03      	ldr	r3, [r0, #32]
{
 8004b8a:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8004b8c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b8e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b90:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b92:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004b96:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b9e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004ba0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ba4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ba8:	4d14      	ldr	r5, [pc, #80]	; (8004bfc <TIM_OC2_SetConfig+0x7c>)
 8004baa:	42a8      	cmp	r0, r5
 8004bac:	d010      	beq.n	8004bd0 <TIM_OC2_SetConfig+0x50>
 8004bae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004bb2:	42a8      	cmp	r0, r5
 8004bb4:	d00c      	beq.n	8004bd0 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004bba:	42a8      	cmp	r0, r5
 8004bbc:	d00f      	beq.n	8004bde <TIM_OC2_SetConfig+0x5e>
 8004bbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004bc2:	42a8      	cmp	r0, r5
 8004bc4:	d00b      	beq.n	8004bde <TIM_OC2_SetConfig+0x5e>
 8004bc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004bca:	42a8      	cmp	r0, r5
 8004bcc:	d10f      	bne.n	8004bee <TIM_OC2_SetConfig+0x6e>
 8004bce:	e006      	b.n	8004bde <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bd0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bd6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bde:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004be2:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004be6:	ea46 0c05 	orr.w	ip, r6, r5
 8004bea:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004bee:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004bf0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004bf2:	6182      	str	r2, [r0, #24]
}
 8004bf4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8004bf6:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004bf8:	6203      	str	r3, [r0, #32]
}
 8004bfa:	4770      	bx	lr
 8004bfc:	40012c00 	.word	0x40012c00

08004c00 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004c00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	f000 812b 	beq.w	8004e60 <HAL_TIM_PWM_ConfigChannel+0x260>
 8004c0a:	2301      	movs	r3, #1
{
 8004c0c:	b570      	push	{r4, r5, r6, lr}
 8004c0e:	4604      	mov	r4, r0
 8004c10:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8004c12:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004c16:	2a14      	cmp	r2, #20
 8004c18:	d816      	bhi.n	8004c48 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004c1a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004c1e:	005d      	.short	0x005d
 8004c20:	00150015 	.word	0x00150015
 8004c24:	00720015 	.word	0x00720015
 8004c28:	00150015 	.word	0x00150015
 8004c2c:	00880015 	.word	0x00880015
 8004c30:	00150015 	.word	0x00150015
 8004c34:	009d0015 	.word	0x009d0015
 8004c38:	00150015 	.word	0x00150015
 8004c3c:	00e00015 	.word	0x00e00015
 8004c40:	00150015 	.word	0x00150015
 8004c44:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 8004c48:	2300      	movs	r3, #0
 8004c4a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004c4e:	2001      	movs	r0, #1
}
 8004c50:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c52:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c54:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004c5c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004c60:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004c62:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c64:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004c68:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c6c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c70:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c72:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c76:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c7a:	4e7a      	ldr	r6, [pc, #488]	; (8004e64 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004c7c:	42b3      	cmp	r3, r6
 8004c7e:	d00f      	beq.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004c80:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004c84:	42b3      	cmp	r3, r6
 8004c86:	d00b      	beq.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004c88:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004c8c:	42b3      	cmp	r3, r6
 8004c8e:	d007      	beq.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004c90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004c94:	42b3      	cmp	r3, r6
 8004c96:	d003      	beq.n	8004ca0 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004c98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004c9c:	42b3      	cmp	r3, r6
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_PWM_ConfigChannel+0xaa>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ca0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ca2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ca6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004caa:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cac:	6559      	str	r1, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cae:	6869      	ldr	r1, [r5, #4]
 8004cb0:	65d9      	str	r1, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cb6:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cb8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004cbc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cbe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cc0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004cc4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004cc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cc8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004cd4:	2000      	movs	r0, #0
}
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cd8:	6800      	ldr	r0, [r0, #0]
 8004cda:	f7ff fca9 	bl	8004630 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cde:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ce0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ce2:	6999      	ldr	r1, [r3, #24]
 8004ce4:	f041 0108 	orr.w	r1, r1, #8
 8004ce8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cea:	6999      	ldr	r1, [r3, #24]
 8004cec:	f021 0104 	bic.w	r1, r1, #4
 8004cf0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cf2:	699a      	ldr	r2, [r3, #24]
 8004cf4:	4302      	orrs	r2, r0
 8004cf6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004cfe:	2000      	movs	r0, #0
}
 8004d00:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d02:	6800      	ldr	r0, [r0, #0]
 8004d04:	f7ff ff3c 	bl	8004b80 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d08:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d0a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d0c:	6999      	ldr	r1, [r3, #24]
 8004d0e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004d12:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d14:	6999      	ldr	r1, [r3, #24]
 8004d16:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004d1a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004d22:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004d24:	2300      	movs	r3, #0
 8004d26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004d2a:	2000      	movs	r0, #0
}
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2e:	6800      	ldr	r0, [r0, #0]
 8004d30:	f7ff fcba 	bl	80046a8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d34:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d36:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d38:	69d9      	ldr	r1, [r3, #28]
 8004d3a:	f041 0108 	orr.w	r1, r1, #8
 8004d3e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d40:	69d9      	ldr	r1, [r3, #28]
 8004d42:	f021 0104 	bic.w	r1, r1, #4
 8004d46:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	4302      	orrs	r2, r0
 8004d4c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2000      	movs	r0, #0
}
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d58:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d5a:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d62:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004d64:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004d66:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004d68:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d6a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004d6e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d72:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d76:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d7c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	4e38      	ldr	r6, [pc, #224]	; (8004e64 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004d82:	42b3      	cmp	r3, r6
 8004d84:	d00f      	beq.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004d86:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004d8a:	42b3      	cmp	r3, r6
 8004d8c:	d00b      	beq.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004d8e:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004d92:	42b3      	cmp	r3, r6
 8004d94:	d007      	beq.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004d96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004d9a:	42b3      	cmp	r3, r6
 8004d9c:	d003      	beq.n	8004da6 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004d9e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004da2:	42b3      	cmp	r3, r6
 8004da4:	d104      	bne.n	8004db0 <HAL_TIM_PWM_ConfigChannel+0x1b0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004da6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004da8:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dac:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8004db0:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004db2:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004db4:	6869      	ldr	r1, [r5, #4]
 8004db6:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004db8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dba:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dbc:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dbe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004dc2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dc4:	69d9      	ldr	r1, [r3, #28]
 8004dc6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004dca:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004dd2:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004dda:	2000      	movs	r0, #0
}
 8004ddc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004dde:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004de0:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004de2:	6a1a      	ldr	r2, [r3, #32]
 8004de4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004de8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004dea:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004dec:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004dee:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004df0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004df4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8004df8:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004dfa:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8004dfc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e00:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e04:	4e17      	ldr	r6, [pc, #92]	; (8004e64 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004e06:	42b3      	cmp	r3, r6
 8004e08:	d00f      	beq.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004e0a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004e0e:	42b3      	cmp	r3, r6
 8004e10:	d00b      	beq.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004e12:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004e16:	42b3      	cmp	r3, r6
 8004e18:	d007      	beq.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004e1a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004e1e:	42b3      	cmp	r3, r6
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004e22:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004e26:	42b3      	cmp	r3, r6
 8004e28:	d104      	bne.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x234>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e2a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e2c:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e30:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8004e34:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004e36:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004e38:	6869      	ldr	r1, [r5, #4]
 8004e3a:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8004e3c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e40:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e42:	f041 0108 	orr.w	r1, r1, #8
 8004e46:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e4a:	f021 0104 	bic.w	r1, r1, #4
 8004e4e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e52:	432a      	orrs	r2, r5
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8004e56:	2300      	movs	r3, #0
 8004e58:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004e5c:	2000      	movs	r0, #0
}
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8004e60:	2002      	movs	r0, #2
}
 8004e62:	4770      	bx	lr
 8004e64:	40012c00 	.word	0x40012c00

08004e68 <HAL_TIMEx_PWMN_Start>:
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	d13a      	bne.n	8004ee2 <HAL_TIMEx_PWMN_Start+0x7a>
 8004e6c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d142      	bne.n	8004efa <HAL_TIMEx_PWMN_Start+0x92>
 8004e74:	2302      	movs	r3, #2
 8004e76:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8004e7a:	6803      	ldr	r3, [r0, #0]
 8004e7c:	2204      	movs	r2, #4
 8004e7e:	6a18      	ldr	r0, [r3, #32]
 8004e80:	f001 011f 	and.w	r1, r1, #31
 8004e84:	fa02 f101 	lsl.w	r1, r2, r1
 8004e88:	ea20 0001 	bic.w	r0, r0, r1
 8004e8c:	6218      	str	r0, [r3, #32]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	4824      	ldr	r0, [pc, #144]	; (8004f24 <HAL_TIMEx_PWMN_Start+0xbc>)
 8004e92:	4311      	orrs	r1, r2
 8004e94:	6219      	str	r1, [r3, #32]
 8004e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e98:	4283      	cmp	r3, r0
 8004e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
 8004ea0:	d011      	beq.n	8004ec6 <HAL_TIMEx_PWMN_Start+0x5e>
 8004ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea6:	d00e      	beq.n	8004ec6 <HAL_TIMEx_PWMN_Start+0x5e>
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_TIMEx_PWMN_Start+0xc0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00b      	beq.n	8004ec6 <HAL_TIMEx_PWMN_Start+0x5e>
 8004eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <HAL_TIMEx_PWMN_Start+0x5e>
 8004eb6:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIMEx_PWMN_Start+0x5e>
 8004ebe:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d107      	bne.n	8004ed6 <HAL_TIMEx_PWMN_Start+0x6e>
 8004ec6:	6899      	ldr	r1, [r3, #8]
 8004ec8:	4a18      	ldr	r2, [pc, #96]	; (8004f2c <HAL_TIMEx_PWMN_Start+0xc4>)
 8004eca:	400a      	ands	r2, r1
 8004ecc:	2a06      	cmp	r2, #6
 8004ece:	d016      	beq.n	8004efe <HAL_TIMEx_PWMN_Start+0x96>
 8004ed0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004ed4:	d013      	beq.n	8004efe <HAL_TIMEx_PWMN_Start+0x96>
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	2000      	movs	r0, #0
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	4770      	bx	lr
 8004ee2:	2904      	cmp	r1, #4
 8004ee4:	d00d      	beq.n	8004f02 <HAL_TIMEx_PWMN_Start+0x9a>
 8004ee6:	2908      	cmp	r1, #8
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIMEx_PWMN_Start+0xaa>
 8004eea:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d103      	bne.n	8004efa <HAL_TIMEx_PWMN_Start+0x92>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 8004ef8:	e7bf      	b.n	8004e7a <HAL_TIMEx_PWMN_Start+0x12>
 8004efa:	2001      	movs	r0, #1
 8004efc:	4770      	bx	lr
 8004efe:	2000      	movs	r0, #0
 8004f00:	4770      	bx	lr
 8004f02:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d1f7      	bne.n	8004efa <HAL_TIMEx_PWMN_Start+0x92>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8004f10:	e7b3      	b.n	8004e7a <HAL_TIMEx_PWMN_Start+0x12>
 8004f12:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d1ef      	bne.n	8004efa <HAL_TIMEx_PWMN_Start+0x92>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8004f20:	e7ab      	b.n	8004e7a <HAL_TIMEx_PWMN_Start+0x12>
 8004f22:	bf00      	nop
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	00010007 	.word	0x00010007

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d03a      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 8004f38:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f3a:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f3c:	4d1d      	ldr	r5, [pc, #116]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f44:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8004f46:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004f48:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f4a:	d026      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8004f4c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f50:	42aa      	cmp	r2, r5
 8004f52:	d022      	beq.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f54:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f5a:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8004f60:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f62:	d00c      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004f64:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d009      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d005      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004f72:	42aa      	cmp	r2, r5
 8004f74:	d003      	beq.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004f76:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d104      	bne.n	8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f7e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f80:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f84:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f86:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004f88:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004f90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004f94:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004f96:	4618      	mov	r0, r3
}
 8004f98:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f9a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fa0:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa2:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fa8:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8004faa:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fac:	e7e7      	b.n	8004f7e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8004fae:	2002      	movs	r0, #2
}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40000400 	.word	0x40000400

08004fbc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d03d      	beq.n	8005040 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 8004fc4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fc6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8004fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fce:	4602      	mov	r2, r0
 8004fd0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fd2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fd4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fda:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fe0:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fe2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fe4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fe8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ff0:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ff2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ff8:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ffa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ffc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005000:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005002:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005006:	4c0f      	ldr	r4, [pc, #60]	; (8005044 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8005008:	42a0      	cmp	r0, r4
 800500a:	d00b      	beq.n	8005024 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 800500c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005010:	42a0      	cmp	r0, r4
 8005012:	d007      	beq.n	8005024 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005014:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005016:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005018:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800501c:	4608      	mov	r0, r1
}
 800501e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005022:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005024:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005026:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800502a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800502e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005030:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005036:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005038:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800503c:	430b      	orrs	r3, r1
 800503e:	e7e9      	b.n	8005014 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005040:	2002      	movs	r0, #2
}
 8005042:	4770      	bx	lr
 8005044:	40012c00 	.word	0x40012c00

08005048 <HAL_TIMEx_CommutCallback>:
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop

0800504c <HAL_TIMEx_BreakCallback>:
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop

08005050 <HAL_TIMEx_Break2Callback>:
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop

08005054 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005054:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8005056:	2b20      	cmp	r3, #32
 8005058:	d159      	bne.n	800510e <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 800505a:	2900      	cmp	r1, #0
 800505c:	d055      	beq.n	800510a <HAL_UART_Receive_IT+0xb6>
 800505e:	2a00      	cmp	r2, #0
 8005060:	d053      	beq.n	800510a <HAL_UART_Receive_IT+0xb6>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8005062:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8005066:	2b01      	cmp	r3, #1
 8005068:	d051      	beq.n	800510e <HAL_UART_Receive_IT+0xba>
{
 800506a:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 800506c:	2401      	movs	r4, #1
 800506e:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005072:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005074:	2400      	movs	r4, #0
 8005076:	6604      	str	r4, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005078:	685c      	ldr	r4, [r3, #4]
 800507a:	0224      	lsls	r4, r4, #8
 800507c:	d50e      	bpl.n	800509c <HAL_UART_Receive_IT+0x48>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507e:	e853 4f00 	ldrex	r4, [r3]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005082:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	e843 4500 	strex	r5, r4, [r3]
 800508a:	b13d      	cbz	r5, 800509c <HAL_UART_Receive_IT+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	e853 cf00 	ldrex	ip, [r3]
 8005090:	f04c 6c80 	orr.w	ip, ip, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005094:	e843 c400 	strex	r4, ip, [r3]
 8005098:	2c00      	cmp	r4, #0
 800509a:	d1f7      	bne.n	800508c <HAL_UART_Receive_IT+0x38>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800509c:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800509e:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 80050a0:	2500      	movs	r5, #0
  UART_MASK_COMPUTATION(huart);
 80050a2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 80050a6:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80050aa:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80050ae:	6645      	str	r5, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80050b0:	d02f      	beq.n	8005112 <HAL_UART_Receive_IT+0xbe>
 80050b2:	2c00      	cmp	r4, #0
 80050b4:	d13c      	bne.n	8005130 <HAL_UART_Receive_IT+0xdc>
 80050b6:	6902      	ldr	r2, [r0, #16]
 80050b8:	2a00      	cmp	r2, #0
 80050ba:	d13c      	bne.n	8005136 <HAL_UART_Receive_IT+0xe2>
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c2:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050c4:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ca:	67c2      	str	r2, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	f103 0208 	add.w	r2, r3, #8
 80050d0:	e852 2f00 	ldrex	r2, [r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d4:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	f103 0408 	add.w	r4, r3, #8
 80050dc:	e844 2100 	strex	r1, r2, [r4]
 80050e0:	2900      	cmp	r1, #0
 80050e2:	d1f3      	bne.n	80050cc <HAL_UART_Receive_IT+0x78>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e4:	6882      	ldr	r2, [r0, #8]
 80050e6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80050ea:	d01a      	beq.n	8005122 <HAL_UART_Receive_IT+0xce>
  {
    huart->RxISR = UART_RxISR_16BIT;
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80050ec:	4a14      	ldr	r2, [pc, #80]	; (8005140 <HAL_UART_Receive_IT+0xec>)
 80050ee:	6642      	str	r2, [r0, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80050f0:	2100      	movs	r1, #0
 80050f2:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	e853 2f00 	ldrex	r2, [r3]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050fa:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	e843 2000 	strex	r0, r2, [r3]
 8005102:	2800      	cmp	r0, #0
 8005104:	d1f7      	bne.n	80050f6 <HAL_UART_Receive_IT+0xa2>
}
 8005106:	bc30      	pop	{r4, r5}
 8005108:	4770      	bx	lr
      return HAL_ERROR;
 800510a:	2001      	movs	r0, #1
 800510c:	4770      	bx	lr
    return HAL_BUSY;
 800510e:	2002      	movs	r0, #2
}
 8005110:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8005112:	6902      	ldr	r2, [r0, #16]
 8005114:	2a00      	cmp	r2, #0
 8005116:	d1d1      	bne.n	80050bc <HAL_UART_Receive_IT+0x68>
 8005118:	f240 12ff 	movw	r2, #511	; 0x1ff
 800511c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8005120:	e7cf      	b.n	80050c2 <HAL_UART_Receive_IT+0x6e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005122:	6904      	ldr	r4, [r0, #16]
    huart->RxISR = UART_RxISR_16BIT;
 8005124:	4a06      	ldr	r2, [pc, #24]	; (8005140 <HAL_UART_Receive_IT+0xec>)
 8005126:	4907      	ldr	r1, [pc, #28]	; (8005144 <HAL_UART_Receive_IT+0xf0>)
 8005128:	2c00      	cmp	r4, #0
 800512a:	bf08      	it	eq
 800512c:	460a      	moveq	r2, r1
 800512e:	e7de      	b.n	80050ee <HAL_UART_Receive_IT+0x9a>
  UART_MASK_COMPUTATION(huart);
 8005130:	f8a0 505c 	strh.w	r5, [r0, #92]	; 0x5c
 8005134:	e7c5      	b.n	80050c2 <HAL_UART_Receive_IT+0x6e>
 8005136:	227f      	movs	r2, #127	; 0x7f
 8005138:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 800513c:	e7c1      	b.n	80050c2 <HAL_UART_Receive_IT+0x6e>
 800513e:	bf00      	nop
 8005140:	0800550d 	.word	0x0800550d
 8005144:	080054cd 	.word	0x080054cd

08005148 <HAL_UART_TxCpltCallback>:
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop

0800514c <HAL_UART_ErrorCallback>:
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop

08005150 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005150:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005152:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800515a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800515e:	f7ff fff5 	bl	800514c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005162:	bd08      	pop	{r3, pc}

08005164 <HAL_UARTEx_RxEventCallback>:
}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop

08005168 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005168:	6803      	ldr	r3, [r0, #0]
 800516a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800516c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800516e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8005172:	ea12 0f0c 	tst.w	r2, ip
{
 8005176:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005178:	689d      	ldr	r5, [r3, #8]
{
 800517a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800517c:	d17c      	bne.n	8005278 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800517e:	0696      	lsls	r6, r2, #26
 8005180:	d502      	bpl.n	8005188 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005182:	068e      	lsls	r6, r1, #26
 8005184:	f100 8110 	bmi.w	80053a8 <HAL_UART_IRQHandler+0x240>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005188:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800518a:	2801      	cmp	r0, #1
 800518c:	d024      	beq.n	80051d8 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800518e:	02d6      	lsls	r6, r2, #11
 8005190:	d502      	bpl.n	8005198 <HAL_UART_IRQHandler+0x30>
 8005192:	0268      	lsls	r0, r5, #9
 8005194:	f100 810d 	bmi.w	80053b2 <HAL_UART_IRQHandler+0x24a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005198:	0616      	lsls	r6, r2, #24
 800519a:	d414      	bmi.n	80051c6 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800519c:	0650      	lsls	r0, r2, #25
 800519e:	d501      	bpl.n	80051a4 <HAL_UART_IRQHandler+0x3c>
 80051a0:	064a      	lsls	r2, r1, #25
 80051a2:	d400      	bmi.n	80051a6 <HAL_UART_IRQHandler+0x3e>
}
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	e843 2100 	strex	r1, r2, [r3]
 80051b2:	2900      	cmp	r1, #0
 80051b4:	d1f7      	bne.n	80051a6 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b6:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051b8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80051ba:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 80051bc:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff ffc2 	bl	8005148 <HAL_UART_TxCpltCallback>
}
 80051c4:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051c6:	060d      	lsls	r5, r1, #24
 80051c8:	d5e8      	bpl.n	800519c <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 80051ca:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0e9      	beq.n	80051a4 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 80051d0:	4620      	mov	r0, r4
}
 80051d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80051d6:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051d8:	06d6      	lsls	r6, r2, #27
 80051da:	d5d8      	bpl.n	800518e <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051dc:	06c8      	lsls	r0, r1, #27
 80051de:	d5d6      	bpl.n	800518e <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051e0:	2210      	movs	r2, #16
 80051e2:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	0652      	lsls	r2, r2, #25
 80051e8:	f140 8100 	bpl.w	80053ec <HAL_UART_IRQHandler+0x284>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ec:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80051ee:	6802      	ldr	r2, [r0, #0]
 80051f0:	6852      	ldr	r2, [r2, #4]
 80051f2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80051f4:	2a00      	cmp	r2, #0
 80051f6:	d0d5      	beq.n	80051a4 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051f8:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80051fc:	4291      	cmp	r1, r2
 80051fe:	d9d1      	bls.n	80051a4 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8005200:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005204:	6982      	ldr	r2, [r0, #24]
 8005206:	2a20      	cmp	r2, #32
 8005208:	d02e      	beq.n	8005268 <HAL_UART_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800520e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	e843 2100 	strex	r1, r2, [r3]
 8005216:	2900      	cmp	r1, #0
 8005218:	d1f7      	bne.n	800520a <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	f103 0208 	add.w	r2, r3, #8
 800521e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005222:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005226:	f103 0508 	add.w	r5, r3, #8
 800522a:	e845 2100 	strex	r1, r2, [r5]
 800522e:	2900      	cmp	r1, #0
 8005230:	d1f3      	bne.n	800521a <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	f103 0208 	add.w	r2, r3, #8
 8005236:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800523a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	f103 0508 	add.w	r5, r3, #8
 8005242:	e845 2100 	strex	r1, r2, [r5]
 8005246:	2900      	cmp	r1, #0
 8005248:	d1f3      	bne.n	8005232 <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 800524a:	2220      	movs	r2, #32
 800524c:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524e:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005250:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005254:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	e843 2100 	strex	r1, r2, [r3]
 800525c:	2900      	cmp	r1, #0
 800525e:	d1f7      	bne.n	8005250 <HAL_UART_IRQHandler+0xe8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005260:	f7fe fa8c 	bl	800377c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005264:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005268:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800526c:	1ac9      	subs	r1, r1, r3
 800526e:	4620      	mov	r0, r4
 8005270:	b289      	uxth	r1, r1
 8005272:	f7ff ff77 	bl	8005164 <HAL_UARTEx_RxEventCallback>
}
 8005276:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005278:	4879      	ldr	r0, [pc, #484]	; (8005460 <HAL_UART_IRQHandler+0x2f8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800527a:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800527e:	4008      	ands	r0, r1
 8005280:	4330      	orrs	r0, r6
 8005282:	d081      	beq.n	8005188 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005284:	07d5      	lsls	r5, r2, #31
 8005286:	d509      	bpl.n	800529c <HAL_UART_IRQHandler+0x134>
 8005288:	05c8      	lsls	r0, r1, #23
 800528a:	d507      	bpl.n	800529c <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800528c:	2001      	movs	r0, #1
 800528e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005290:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005294:	f040 0001 	orr.w	r0, r0, #1
 8005298:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800529c:	0795      	lsls	r5, r2, #30
 800529e:	d57e      	bpl.n	800539e <HAL_UART_IRQHandler+0x236>
 80052a0:	b18e      	cbz	r6, 80052c6 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052a2:	2002      	movs	r0, #2
 80052a4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052a6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80052aa:	f040 0004 	orr.w	r0, r0, #4
 80052ae:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052b2:	0750      	lsls	r0, r2, #29
 80052b4:	d507      	bpl.n	80052c6 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052b6:	2004      	movs	r0, #4
 80052b8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ba:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80052be:	f040 0002 	orr.w	r0, r0, #2
 80052c2:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052c6:	0710      	lsls	r0, r2, #28
 80052c8:	d50b      	bpl.n	80052e2 <HAL_UART_IRQHandler+0x17a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052ca:	f001 0020 	and.w	r0, r1, #32
 80052ce:	4330      	orrs	r0, r6
 80052d0:	d007      	beq.n	80052e2 <HAL_UART_IRQHandler+0x17a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d2:	2008      	movs	r0, #8
 80052d4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052d6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80052da:	f040 0008 	orr.w	r0, r0, #8
 80052de:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052e2:	0516      	lsls	r6, r2, #20
 80052e4:	d50a      	bpl.n	80052fc <HAL_UART_IRQHandler+0x194>
 80052e6:	014d      	lsls	r5, r1, #5
 80052e8:	d508      	bpl.n	80052fc <HAL_UART_IRQHandler+0x194>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052ee:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052f0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80052f4:	f040 0020 	orr.w	r0, r0, #32
 80052f8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052fc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005300:	2800      	cmp	r0, #0
 8005302:	f43f af4f 	beq.w	80051a4 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005306:	0690      	lsls	r0, r2, #26
 8005308:	d506      	bpl.n	8005318 <HAL_UART_IRQHandler+0x1b0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800530a:	0689      	lsls	r1, r1, #26
 800530c:	d504      	bpl.n	8005318 <HAL_UART_IRQHandler+0x1b0>
        if (huart->RxISR != NULL)
 800530e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005310:	b112      	cbz	r2, 8005318 <HAL_UART_IRQHandler+0x1b0>
          huart->RxISR(huart);
 8005312:	4620      	mov	r0, r4
 8005314:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005316:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005318:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800531c:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800531e:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005322:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005326:	4315      	orrs	r5, r2
 8005328:	f000 8094 	beq.w	8005454 <HAL_UART_IRQHandler+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005330:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	e843 2100 	strex	r1, r2, [r3]
 8005338:	2900      	cmp	r1, #0
 800533a:	d1f7      	bne.n	800532c <HAL_UART_IRQHandler+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	f103 0208 	add.w	r2, r3, #8
 8005340:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005344:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	f103 0008 	add.w	r0, r3, #8
 800534c:	e840 2100 	strex	r1, r2, [r0]
 8005350:	2900      	cmp	r1, #0
 8005352:	d1f3      	bne.n	800533c <HAL_UART_IRQHandler+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005354:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005356:	2a01      	cmp	r2, #1
 8005358:	d033      	beq.n	80053c2 <HAL_UART_IRQHandler+0x25a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800535c:	2120      	movs	r1, #32
 800535e:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005360:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005362:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8005364:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005366:	064a      	lsls	r2, r1, #25
 8005368:	d53c      	bpl.n	80053e4 <HAL_UART_IRQHandler+0x27c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	f103 0208 	add.w	r2, r3, #8
 800536e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	f103 0008 	add.w	r0, r3, #8
 800537a:	e840 2100 	strex	r1, r2, [r0]
 800537e:	2900      	cmp	r1, #0
 8005380:	d1f3      	bne.n	800536a <HAL_UART_IRQHandler+0x202>
          if (huart->hdmarx != NULL)
 8005382:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005384:	b370      	cbz	r0, 80053e4 <HAL_UART_IRQHandler+0x27c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_UART_IRQHandler+0x2fc>)
 8005388:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800538a:	f7fe fa19 	bl	80037c0 <HAL_DMA_Abort_IT>
 800538e:	2800      	cmp	r0, #0
 8005390:	f43f af08 	beq.w	80051a4 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005394:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8005396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800539a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800539c:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800539e:	0755      	lsls	r5, r2, #29
 80053a0:	d591      	bpl.n	80052c6 <HAL_UART_IRQHandler+0x15e>
 80053a2:	2e00      	cmp	r6, #0
 80053a4:	d187      	bne.n	80052b6 <HAL_UART_IRQHandler+0x14e>
 80053a6:	e78e      	b.n	80052c6 <HAL_UART_IRQHandler+0x15e>
      if (huart->RxISR != NULL)
 80053a8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f47f af11 	bne.w	80051d2 <HAL_UART_IRQHandler+0x6a>
 80053b0:	e6f8      	b.n	80051a4 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80053b6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053b8:	621a      	str	r2, [r3, #32]
}
 80053ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80053be:	f000 bbe3 	b.w	8005b88 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	e843 2100 	strex	r1, r2, [r3]
 80053ce:	2900      	cmp	r1, #0
 80053d0:	d0c3      	beq.n	800535a <HAL_UART_IRQHandler+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	e853 2f00 	ldrex	r2, [r3]
 80053d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	e843 2100 	strex	r1, r2, [r3]
 80053de:	2900      	cmp	r1, #0
 80053e0:	d1ef      	bne.n	80053c2 <HAL_UART_IRQHandler+0x25a>
 80053e2:	e7ba      	b.n	800535a <HAL_UART_IRQHandler+0x1f2>
            HAL_UART_ErrorCallback(huart);
 80053e4:	4620      	mov	r0, r4
 80053e6:	f7ff feb1 	bl	800514c <HAL_UART_ErrorCallback>
}
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053ec:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 80053f0:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80053f4:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053f6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	f43f aed3 	beq.w	80051a4 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053fe:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8005402:	1a51      	subs	r1, r2, r1
 8005404:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005406:	2900      	cmp	r1, #0
 8005408:	f43f aecc 	beq.w	80051a4 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005410:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	e843 2000 	strex	r0, r2, [r3]
 8005418:	2800      	cmp	r0, #0
 800541a:	d1f7      	bne.n	800540c <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	f103 0208 	add.w	r2, r3, #8
 8005420:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005424:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	f103 0508 	add.w	r5, r3, #8
 800542c:	e845 2000 	strex	r0, r2, [r5]
 8005430:	2800      	cmp	r0, #0
 8005432:	d1f3      	bne.n	800541c <HAL_UART_IRQHandler+0x2b4>
        huart->RxState = HAL_UART_STATE_READY;
 8005434:	2220      	movs	r2, #32
 8005436:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8005438:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543a:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005440:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	e843 2000 	strex	r0, r2, [r3]
 8005448:	2800      	cmp	r0, #0
 800544a:	d1f7      	bne.n	800543c <HAL_UART_IRQHandler+0x2d4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800544c:	4620      	mov	r0, r4
 800544e:	f7ff fe89 	bl	8005164 <HAL_UARTEx_RxEventCallback>
}
 8005452:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005454:	4620      	mov	r0, r4
 8005456:	f7ff fe79 	bl	800514c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	04000120 	.word	0x04000120
 8005464:	08005151 	.word	0x08005151

08005468 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8005468:	b508      	push	{r3, lr}
 800546a:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005470:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005474:	e843 2100 	strex	r1, r2, [r3]
 8005478:	2900      	cmp	r1, #0
 800547a:	d1f7      	bne.n	800546c <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	f103 0208 	add.w	r2, r3, #8
 8005480:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005484:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	f103 0c08 	add.w	ip, r3, #8
 800548c:	e84c 2100 	strex	r1, r2, [ip]
 8005490:	2900      	cmp	r1, #0
 8005492:	d1f3      	bne.n	800547c <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005494:	2220      	movs	r2, #32
 8005496:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005498:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 800549a:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800549c:	2a01      	cmp	r2, #1
 800549e:	d112      	bne.n	80054c6 <UART_RxISR_16BIT.part.0+0x5e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a0:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054a6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	e843 2100 	strex	r1, r2, [r3]
 80054ae:	2900      	cmp	r1, #0
 80054b0:	d1f7      	bne.n	80054a2 <UART_RxISR_16BIT.part.0+0x3a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054b2:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054b4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054b8:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ba:	bf44      	itt	mi
 80054bc:	2210      	movmi	r2, #16
 80054be:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054c0:	f7ff fe50 	bl	8005164 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054c4:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80054c6:	f7fb febd 	bl	8001244 <HAL_UART_RxCpltCallback>
}
 80054ca:	bd08      	pop	{r3, pc}

080054cc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054cc:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 80054ce:	2a22      	cmp	r2, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054d0:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054d2:	d004      	beq.n	80054de <UART_RxISR_16BIT+0x12>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054d4:	6993      	ldr	r3, [r2, #24]
 80054d6:	f043 0308 	orr.w	r3, r3, #8
 80054da:	6193      	str	r3, [r2, #24]
  }
}
 80054dc:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80054de:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80054e0:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 80054e4:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80054e6:	ea02 020c 	and.w	r2, r2, ip
 80054ea:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80054ee:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 80054f2:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80054f4:	3a01      	subs	r2, #1
 80054f6:	b292      	uxth	r2, r2
 80054f8:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80054fc:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1ea      	bne.n	80054dc <UART_RxISR_16BIT+0x10>
 8005506:	f7ff bfaf 	b.w	8005468 <UART_RxISR_16BIT.part.0>
 800550a:	bf00      	nop

0800550c <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800550c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800550e:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005510:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005512:	d004      	beq.n	800551e <UART_RxISR_8BIT+0x12>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005514:	6993      	ldr	r3, [r2, #24]
 8005516:	f043 0308 	orr.w	r3, r3, #8
 800551a:	6193      	str	r3, [r2, #24]
}
 800551c:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800551e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005520:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 8005524:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005526:	ea02 020c 	and.w	r2, r2, ip
 800552a:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 800552c:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8005530:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005532:	3a01      	subs	r2, #1
 8005534:	b292      	uxth	r2, r2
 8005536:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 800553a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 800553e:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8005540:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8005542:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8005544:	2a00      	cmp	r2, #0
 8005546:	d1e9      	bne.n	800551c <UART_RxISR_8BIT+0x10>
 8005548:	f7ff bf8e 	b.w	8005468 <UART_RxISR_16BIT.part.0>

0800554c <UART_SetConfig>:
{
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005550:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005552:	6883      	ldr	r3, [r0, #8]
 8005554:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005556:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005558:	69e1      	ldr	r1, [r4, #28]
 800555a:	432b      	orrs	r3, r5
 800555c:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800555e:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005562:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005564:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005568:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800556a:	4303      	orrs	r3, r0
 800556c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556e:	6853      	ldr	r3, [r2, #4]
 8005570:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8005572:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005578:	4303      	orrs	r3, r0
 800557a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800557c:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800557e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005580:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005584:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005586:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005588:	487d      	ldr	r0, [pc, #500]	; (8005780 <UART_SetConfig+0x234>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800558a:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800558c:	4282      	cmp	r2, r0
 800558e:	d046      	beq.n	800561e <UART_SetConfig+0xd2>
 8005590:	4b7c      	ldr	r3, [pc, #496]	; (8005784 <UART_SetConfig+0x238>)
 8005592:	429a      	cmp	r2, r3
 8005594:	d00f      	beq.n	80055b6 <UART_SetConfig+0x6a>
 8005596:	4b7c      	ldr	r3, [pc, #496]	; (8005788 <UART_SetConfig+0x23c>)
 8005598:	429a      	cmp	r2, r3
 800559a:	f000 80a3 	beq.w	80056e4 <UART_SetConfig+0x198>
 800559e:	4b7b      	ldr	r3, [pc, #492]	; (800578c <UART_SetConfig+0x240>)
 80055a0:	429a      	cmp	r2, r3
 80055a2:	f000 80b4 	beq.w	800570e <UART_SetConfig+0x1c2>
 80055a6:	4b7a      	ldr	r3, [pc, #488]	; (8005790 <UART_SetConfig+0x244>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d063      	beq.n	8005674 <UART_SetConfig+0x128>
  huart->RxISR = NULL;
 80055ac:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80055ae:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    switch (clocksource)
 80055b2:	2001      	movs	r0, #1
}
 80055b4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055b6:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055c4:	d069      	beq.n	800569a <UART_SetConfig+0x14e>
 80055c6:	d80f      	bhi.n	80055e8 <UART_SetConfig+0x9c>
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d05c      	beq.n	8005686 <UART_SetConfig+0x13a>
 80055cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d0:	d1ec      	bne.n	80055ac <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80055d6:	d066      	beq.n	80056a6 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetSysClockFreq();
 80055d8:	f7fe fe30 	bl	800423c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80055dc:	b960      	cbnz	r0, 80055f8 <UART_SetConfig+0xac>
  huart->RxISR = NULL;
 80055de:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80055e0:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80055e4:	2000      	movs	r0, #0
}
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ec:	d1de      	bne.n	80055ac <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80055f2:	f000 80c2 	beq.w	800577a <UART_SetConfig+0x22e>
    switch (clocksource)
 80055f6:	4867      	ldr	r0, [pc, #412]	; (8005794 <UART_SetConfig+0x248>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055f8:	6863      	ldr	r3, [r4, #4]
 80055fa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80055fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005602:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005604:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005608:	f1a3 0110 	sub.w	r1, r3, #16
 800560c:	4291      	cmp	r1, r2
 800560e:	d8cd      	bhi.n	80055ac <UART_SetConfig+0x60>
        huart->Instance->BRR = usartdiv;
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8005614:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005616:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 800561a:	2000      	movs	r0, #0
}
 800561c:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800561e:	4b5e      	ldr	r3, [pc, #376]	; (8005798 <UART_SetConfig+0x24c>)
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	f003 0303 	and.w	r3, r3, #3
 8005626:	3b01      	subs	r3, #1
 8005628:	2b02      	cmp	r3, #2
 800562a:	d906      	bls.n	800563a <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800562c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005630:	f000 8082 	beq.w	8005738 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005634:	f7fe fe50 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
        break;
 8005638:	e7d0      	b.n	80055dc <UART_SetConfig+0x90>
 800563a:	4a58      	ldr	r2, [pc, #352]	; (800579c <UART_SetConfig+0x250>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005640:	5cd3      	ldrb	r3, [r2, r3]
 8005642:	d07f      	beq.n	8005744 <UART_SetConfig+0x1f8>
    switch (clocksource)
 8005644:	2b08      	cmp	r3, #8
 8005646:	d8b1      	bhi.n	80055ac <UART_SetConfig+0x60>
 8005648:	a201      	add	r2, pc, #4	; (adr r2, 8005650 <UART_SetConfig+0x104>)
 800564a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564e:	bf00      	nop
 8005650:	0800568d 	.word	0x0800568d
 8005654:	08005635 	.word	0x08005635
 8005658:	080055f7 	.word	0x080055f7
 800565c:	080055ad 	.word	0x080055ad
 8005660:	080055d9 	.word	0x080055d9
 8005664:	080055ad 	.word	0x080055ad
 8005668:	080055ad 	.word	0x080055ad
 800566c:	080055ad 	.word	0x080055ad
 8005670:	080056a1 	.word	0x080056a1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005674:	4b48      	ldr	r3, [pc, #288]	; (8005798 <UART_SetConfig+0x24c>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800567c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005680:	d00b      	beq.n	800569a <UART_SetConfig+0x14e>
 8005682:	d82b      	bhi.n	80056dc <UART_SetConfig+0x190>
 8005684:	b92b      	cbnz	r3, 8005692 <UART_SetConfig+0x146>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005686:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800568a:	d058      	beq.n	800573e <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fe fe0c 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
        break;
 8005690:	e7a4      	b.n	80055dc <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005696:	d09c      	beq.n	80055d2 <UART_SetConfig+0x86>
 8005698:	e788      	b.n	80055ac <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800569a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800569e:	d069      	beq.n	8005774 <UART_SetConfig+0x228>
        pclk = (uint32_t) LSE_VALUE;
 80056a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80056a4:	e7a8      	b.n	80055f8 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 80056a6:	f7fe fdc9 	bl	800423c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80056aa:	2800      	cmp	r0, #0
 80056ac:	d097      	beq.n	80055de <UART_SetConfig+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056ae:	0043      	lsls	r3, r0, #1
 80056b0:	6862      	ldr	r2, [r4, #4]
 80056b2:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80056b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056ba:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056bc:	f1a2 0010 	sub.w	r0, r2, #16
 80056c0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80056c4:	4288      	cmp	r0, r1
 80056c6:	f63f af71 	bhi.w	80055ac <UART_SetConfig+0x60>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ca:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 80056ce:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056d0:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d2:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60cb      	str	r3, [r1, #12]
 80056da:	e780      	b.n	80055de <UART_SetConfig+0x92>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056e0:	d085      	beq.n	80055ee <UART_SetConfig+0xa2>
 80056e2:	e763      	b.n	80055ac <UART_SetConfig+0x60>
 80056e4:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80056ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056f2:	d0d2      	beq.n	800569a <UART_SetConfig+0x14e>
 80056f4:	d806      	bhi.n	8005704 <UART_SetConfig+0x1b8>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0c5      	beq.n	8005686 <UART_SetConfig+0x13a>
 80056fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056fe:	f43f af68 	beq.w	80055d2 <UART_SetConfig+0x86>
 8005702:	e753      	b.n	80055ac <UART_SetConfig+0x60>
 8005704:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005708:	f43f af71 	beq.w	80055ee <UART_SetConfig+0xa2>
 800570c:	e74e      	b.n	80055ac <UART_SetConfig+0x60>
 800570e:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800571c:	d0bd      	beq.n	800569a <UART_SetConfig+0x14e>
 800571e:	d806      	bhi.n	800572e <UART_SetConfig+0x1e2>
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0b0      	beq.n	8005686 <UART_SetConfig+0x13a>
 8005724:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005728:	f43f af53 	beq.w	80055d2 <UART_SetConfig+0x86>
 800572c:	e73e      	b.n	80055ac <UART_SetConfig+0x60>
 800572e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005732:	f43f af5c 	beq.w	80055ee <UART_SetConfig+0xa2>
 8005736:	e739      	b.n	80055ac <UART_SetConfig+0x60>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005738:	f7fe fdce 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
        break;
 800573c:	e7b5      	b.n	80056aa <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800573e:	f7fe fdb3 	bl	80042a8 <HAL_RCC_GetPCLK1Freq>
        break;
 8005742:	e7b2      	b.n	80056aa <UART_SetConfig+0x15e>
    switch (clocksource)
 8005744:	2b08      	cmp	r3, #8
 8005746:	f63f af31 	bhi.w	80055ac <UART_SetConfig+0x60>
 800574a:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <UART_SetConfig+0x204>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	0800573f 	.word	0x0800573f
 8005754:	08005739 	.word	0x08005739
 8005758:	0800577b 	.word	0x0800577b
 800575c:	080055ad 	.word	0x080055ad
 8005760:	080056a7 	.word	0x080056a7
 8005764:	080055ad 	.word	0x080055ad
 8005768:	080055ad 	.word	0x080055ad
 800576c:	080055ad 	.word	0x080055ad
 8005770:	08005775 	.word	0x08005775
 8005774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005778:	e79a      	b.n	80056b0 <UART_SetConfig+0x164>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800577a:	4b09      	ldr	r3, [pc, #36]	; (80057a0 <UART_SetConfig+0x254>)
 800577c:	e798      	b.n	80056b0 <UART_SetConfig+0x164>
 800577e:	bf00      	nop
 8005780:	40013800 	.word	0x40013800
 8005784:	40004400 	.word	0x40004400
 8005788:	40004800 	.word	0x40004800
 800578c:	40004c00 	.word	0x40004c00
 8005790:	40005000 	.word	0x40005000
 8005794:	007a1200 	.word	0x007a1200
 8005798:	40021000 	.word	0x40021000
 800579c:	080098f4 	.word	0x080098f4
 80057a0:	00f42400 	.word	0x00f42400

080057a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80057a6:	07da      	lsls	r2, r3, #31
{
 80057a8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057aa:	d506      	bpl.n	80057ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057ac:	6801      	ldr	r1, [r0, #0]
 80057ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80057b0:	684a      	ldr	r2, [r1, #4]
 80057b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80057b6:	4322      	orrs	r2, r4
 80057b8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057ba:	079c      	lsls	r4, r3, #30
 80057bc:	d506      	bpl.n	80057cc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057be:	6801      	ldr	r1, [r0, #0]
 80057c0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80057c2:	684a      	ldr	r2, [r1, #4]
 80057c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80057c8:	4322      	orrs	r2, r4
 80057ca:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057cc:	0759      	lsls	r1, r3, #29
 80057ce:	d506      	bpl.n	80057de <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057d0:	6801      	ldr	r1, [r0, #0]
 80057d2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80057d4:	684a      	ldr	r2, [r1, #4]
 80057d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057da:	4322      	orrs	r2, r4
 80057dc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057de:	071a      	lsls	r2, r3, #28
 80057e0:	d506      	bpl.n	80057f0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057e2:	6801      	ldr	r1, [r0, #0]
 80057e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80057e6:	684a      	ldr	r2, [r1, #4]
 80057e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057ec:	4322      	orrs	r2, r4
 80057ee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057f0:	06dc      	lsls	r4, r3, #27
 80057f2:	d506      	bpl.n	8005802 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057f4:	6801      	ldr	r1, [r0, #0]
 80057f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80057f8:	688a      	ldr	r2, [r1, #8]
 80057fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057fe:	4322      	orrs	r2, r4
 8005800:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005802:	0699      	lsls	r1, r3, #26
 8005804:	d506      	bpl.n	8005814 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005806:	6801      	ldr	r1, [r0, #0]
 8005808:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800580a:	688a      	ldr	r2, [r1, #8]
 800580c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005810:	4322      	orrs	r2, r4
 8005812:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005814:	065a      	lsls	r2, r3, #25
 8005816:	d509      	bpl.n	800582c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005818:	6801      	ldr	r1, [r0, #0]
 800581a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800581c:	684a      	ldr	r2, [r1, #4]
 800581e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005822:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005824:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005828:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800582a:	d00b      	beq.n	8005844 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800582c:	061b      	lsls	r3, r3, #24
 800582e:	d506      	bpl.n	800583e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005830:	6802      	ldr	r2, [r0, #0]
 8005832:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005834:	6853      	ldr	r3, [r2, #4]
 8005836:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800583a:	430b      	orrs	r3, r1
 800583c:	6053      	str	r3, [r2, #4]
}
 800583e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005842:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005844:	684a      	ldr	r2, [r1, #4]
 8005846:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005848:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800584c:	4322      	orrs	r2, r4
 800584e:	604a      	str	r2, [r1, #4]
 8005850:	e7ec      	b.n	800582c <UART_AdvFeatureConfig+0x88>
 8005852:	bf00      	nop

08005854 <UART_WaitOnFlagUntilTimeout>:
{
 8005854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005858:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585c:	6804      	ldr	r4, [r0, #0]
{
 800585e:	4607      	mov	r7, r0
 8005860:	460e      	mov	r6, r1
 8005862:	4615      	mov	r5, r2
 8005864:	4699      	mov	r9, r3
 8005866:	f1b8 3fff 	cmp.w	r8, #4294967295
 800586a:	d10a      	bne.n	8005882 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800586c:	69e3      	ldr	r3, [r4, #28]
 800586e:	ea36 0303 	bics.w	r3, r6, r3
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	429d      	cmp	r5, r3
 800587a:	d0f7      	beq.n	800586c <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 800587c:	2000      	movs	r0, #0
}
 800587e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005882:	69e3      	ldr	r3, [r4, #28]
 8005884:	ea36 0303 	bics.w	r3, r6, r3
 8005888:	bf0c      	ite	eq
 800588a:	2301      	moveq	r3, #1
 800588c:	2300      	movne	r3, #0
 800588e:	42ab      	cmp	r3, r5
 8005890:	d1f4      	bne.n	800587c <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005892:	f7fc fdad 	bl	80023f0 <HAL_GetTick>
 8005896:	eba0 0009 	sub.w	r0, r0, r9
 800589a:	4540      	cmp	r0, r8
 800589c:	d831      	bhi.n	8005902 <UART_WaitOnFlagUntilTimeout+0xae>
 800589e:	f1b8 0f00 	cmp.w	r8, #0
 80058a2:	d02e      	beq.n	8005902 <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058a4:	683c      	ldr	r4, [r7, #0]
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	0759      	lsls	r1, r3, #29
 80058aa:	4622      	mov	r2, r4
 80058ac:	d5db      	bpl.n	8005866 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ae:	69e3      	ldr	r3, [r4, #28]
 80058b0:	051b      	lsls	r3, r3, #20
 80058b2:	d5d8      	bpl.n	8005866 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058b8:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c2:	e844 3100 	strex	r1, r3, [r4]
 80058c6:	b139      	cbz	r1, 80058d8 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	e852 3f00 	ldrex	r3, [r2]
 80058cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d0:	e842 3100 	strex	r1, r3, [r2]
 80058d4:	2900      	cmp	r1, #0
 80058d6:	d1f7      	bne.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	f102 0308 	add.w	r3, r2, #8
 80058dc:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	f102 0008 	add.w	r0, r2, #8
 80058e8:	e840 3100 	strex	r1, r3, [r0]
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d1f3      	bne.n	80058d8 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 80058f0:	2320      	movs	r3, #32
 80058f2:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80058f4:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80058f8:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 80058fa:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 8005900:	e7bd      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0x2a>
 8005902:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005904:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005908:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	e842 3100 	strex	r1, r3, [r2]
 8005910:	2900      	cmp	r1, #0
 8005912:	d1f7      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005914:	f102 0308 	add.w	r3, r2, #8
 8005918:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005920:	f102 0008 	add.w	r0, r2, #8
 8005924:	e840 3100 	strex	r1, r3, [r0]
 8005928:	2900      	cmp	r1, #0
 800592a:	d1f3      	bne.n	8005914 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 800592c:	2320      	movs	r3, #32
 800592e:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005930:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005934:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 8005936:	2003      	movs	r0, #3
 8005938:	e7a1      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0x2a>
 800593a:	bf00      	nop

0800593c <HAL_UART_Transmit>:
{
 800593c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005940:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005942:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005944:	2820      	cmp	r0, #32
{
 8005946:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8005948:	f040 808b 	bne.w	8005a62 <HAL_UART_Transmit+0x126>
    if ((pData == NULL) || (Size == 0U))
 800594c:	4689      	mov	r9, r1
 800594e:	2900      	cmp	r1, #0
 8005950:	d045      	beq.n	80059de <HAL_UART_Transmit+0xa2>
 8005952:	4614      	mov	r4, r2
 8005954:	2a00      	cmp	r2, #0
 8005956:	d042      	beq.n	80059de <HAL_UART_Transmit+0xa2>
 8005958:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800595a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 800595e:	2b01      	cmp	r3, #1
 8005960:	d07f      	beq.n	8005a62 <HAL_UART_Transmit+0x126>
 8005962:	2301      	movs	r3, #1
 8005964:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005968:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596e:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005972:	67ab      	str	r3, [r5, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005974:	f7fc fd3c 	bl	80023f0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 800597a:	f8a5 4050 	strh.w	r4, [r5, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8005982:	f8a5 4052 	strh.w	r4, [r5, #82]	; 0x52
    tickstart = HAL_GetTick();
 8005986:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005988:	d06f      	beq.n	8005a6a <HAL_UART_Transmit+0x12e>
    while (huart->TxXferCount > 0U)
 800598a:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    __HAL_UNLOCK(huart);
 800598e:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8005990:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8005992:	f885 2074 	strb.w	r2, [r5, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8005996:	b1b3      	cbz	r3, 80059c6 <HAL_UART_Transmit+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005998:	682c      	ldr	r4, [r5, #0]
 800599a:	1c71      	adds	r1, r6, #1
 800599c:	d123      	bne.n	80059e6 <HAL_UART_Transmit+0xaa>
 800599e:	69e2      	ldr	r2, [r4, #28]
 80059a0:	0612      	lsls	r2, r2, #24
 80059a2:	d5fc      	bpl.n	800599e <HAL_UART_Transmit+0x62>
      if (pdata8bits == NULL)
 80059a4:	f1b9 0f00 	cmp.w	r9, #0
 80059a8:	d056      	beq.n	8005a58 <HAL_UART_Transmit+0x11c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059aa:	f819 3b01 	ldrb.w	r3, [r9], #1
 80059ae:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80059b0:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059bc:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1e9      	bne.n	800599a <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059c6:	9600      	str	r6, [sp, #0]
 80059c8:	463b      	mov	r3, r7
 80059ca:	2200      	movs	r2, #0
 80059cc:	2140      	movs	r1, #64	; 0x40
 80059ce:	4628      	mov	r0, r5
 80059d0:	f7ff ff40 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d16c      	bne.n	8005ab2 <HAL_UART_Transmit+0x176>
    huart->gState = HAL_UART_STATE_READY;
 80059d8:	2320      	movs	r3, #32
 80059da:	67ab      	str	r3, [r5, #120]	; 0x78
    return HAL_OK;
 80059dc:	e000      	b.n	80059e0 <HAL_UART_Transmit+0xa4>
      return  HAL_ERROR;
 80059de:	2001      	movs	r0, #1
}
 80059e0:	b003      	add	sp, #12
 80059e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e6:	69e3      	ldr	r3, [r4, #28]
 80059e8:	061b      	lsls	r3, r3, #24
 80059ea:	d4db      	bmi.n	80059a4 <HAL_UART_Transmit+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ec:	f7fc fd00 	bl	80023f0 <HAL_GetTick>
 80059f0:	1bc0      	subs	r0, r0, r7
 80059f2:	4286      	cmp	r6, r0
 80059f4:	d33f      	bcc.n	8005a76 <HAL_UART_Transmit+0x13a>
 80059f6:	2e00      	cmp	r6, #0
 80059f8:	d03d      	beq.n	8005a76 <HAL_UART_Transmit+0x13a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059fa:	682c      	ldr	r4, [r5, #0]
 80059fc:	6822      	ldr	r2, [r4, #0]
 80059fe:	0752      	lsls	r2, r2, #29
 8005a00:	4623      	mov	r3, r4
 8005a02:	d5ca      	bpl.n	800599a <HAL_UART_Transmit+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a04:	69e2      	ldr	r2, [r4, #28]
 8005a06:	0510      	lsls	r0, r2, #20
 8005a08:	d5c7      	bpl.n	800599a <HAL_UART_Transmit+0x5e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a0e:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	e844 2100 	strex	r1, r2, [r4]
 8005a1c:	b139      	cbz	r1, 8005a2e <HAL_UART_Transmit+0xf2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	e853 2f00 	ldrex	r2, [r3]
 8005a22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	e843 2100 	strex	r1, r2, [r3]
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	d1f7      	bne.n	8005a1e <HAL_UART_Transmit+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	f103 0208 	add.w	r2, r3, #8
 8005a32:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	f103 0008 	add.w	r0, r3, #8
 8005a3e:	e840 2100 	strex	r1, r2, [r0]
 8005a42:	2900      	cmp	r1, #0
 8005a44:	d1f3      	bne.n	8005a2e <HAL_UART_Transmit+0xf2>
          huart->gState = HAL_UART_STATE_READY;
 8005a46:	2320      	movs	r3, #32
 8005a48:	67ab      	str	r3, [r5, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8005a4a:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	67eb      	str	r3, [r5, #124]	; 0x7c
        return HAL_TIMEOUT;
 8005a50:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a52:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 8005a56:	e7c3      	b.n	80059e0 <HAL_UART_Transmit+0xa4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a58:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a60:	e7a5      	b.n	80059ae <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8005a62:	2002      	movs	r0, #2
}
 8005a64:	b003      	add	sp, #12
 8005a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6a:	692b      	ldr	r3, [r5, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d18c      	bne.n	800598a <HAL_UART_Transmit+0x4e>
 8005a70:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8005a72:	4699      	mov	r9, r3
 8005a74:	e789      	b.n	800598a <HAL_UART_Transmit+0x4e>
 8005a76:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	e843 2100 	strex	r1, r2, [r3]
 8005a84:	2900      	cmp	r1, #0
 8005a86:	d1f7      	bne.n	8005a78 <HAL_UART_Transmit+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	f103 0208 	add.w	r2, r3, #8
 8005a8c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a90:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	f103 0008 	add.w	r0, r3, #8
 8005a98:	e840 2100 	strex	r1, r2, [r0]
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d1f3      	bne.n	8005a88 <HAL_UART_Transmit+0x14c>
        huart->gState = HAL_UART_STATE_READY;
 8005aa0:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8005aa2:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8005aa4:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005aa6:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	67eb      	str	r3, [r5, #124]	; 0x7c
}
 8005aac:	b003      	add	sp, #12
 8005aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 8005ab2:	2003      	movs	r0, #3
 8005ab4:	e794      	b.n	80059e0 <HAL_UART_Transmit+0xa4>
 8005ab6:	bf00      	nop

08005ab8 <HAL_UART_Init>:
  if (huart == NULL)
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	d062      	beq.n	8005b82 <HAL_UART_Init+0xca>
{
 8005abc:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005abe:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d049      	beq.n	8005b5c <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 8005ac8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005aca:	2324      	movs	r3, #36	; 0x24
 8005acc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005ace:	6813      	ldr	r3, [r2, #0]
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ad4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005ad6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ad8:	f7ff fd38 	bl	800554c <UART_SetConfig>
 8005adc:	2801      	cmp	r0, #1
 8005ade:	d03a      	beq.n	8005b56 <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d133      	bne.n	8005b4e <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	6859      	ldr	r1, [r3, #4]
 8005aea:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8005aee:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005af0:	6899      	ldr	r1, [r3, #8]
 8005af2:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8005af6:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005af8:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afa:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8005afc:	f041 0101 	orr.w	r1, r1, #1
 8005b00:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b02:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005b06:	f7fc fc73 	bl	80023f0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8005b10:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b12:	d40c      	bmi.n	8005b2e <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	075b      	lsls	r3, r3, #29
 8005b18:	d425      	bmi.n	8005b66 <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005b20:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005b24:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8005b26:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005b2a:	b002      	add	sp, #8
 8005b2c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	462a      	mov	r2, r5
 8005b36:	4603      	mov	r3, r0
 8005b38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f7ff fe89 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 8005b42:	b9e0      	cbnz	r0, 8005b7e <HAL_UART_Init+0xc6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	075b      	lsls	r3, r3, #29
 8005b4a:	d40c      	bmi.n	8005b66 <HAL_UART_Init+0xae>
 8005b4c:	e7e5      	b.n	8005b1a <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f7ff fe28 	bl	80057a4 <UART_AdvFeatureConfig>
 8005b54:	e7c7      	b.n	8005ae6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8005b56:	2001      	movs	r0, #1
}
 8005b58:	b002      	add	sp, #8
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8005b5c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8005b60:	f7fc fb9e 	bl	80022a0 <HAL_UART_MspInit>
 8005b64:	e7b0      	b.n	8005ac8 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4633      	mov	r3, r6
 8005b70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b74:	4620      	mov	r0, r4
 8005b76:	f7ff fe6d 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	d0cd      	beq.n	8005b1a <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 8005b7e:	2003      	movs	r0, #3
 8005b80:	e7d3      	b.n	8005b2a <HAL_UART_Init+0x72>
    return HAL_ERROR;
 8005b82:	2001      	movs	r0, #1
}
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop

08005b88 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	0000      	movs	r0, r0
	...

08005b90 <sin>:
 8005b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b92:	ec53 2b10 	vmov	r2, r3, d0
 8005b96:	4828      	ldr	r0, [pc, #160]	; (8005c38 <sin+0xa8>)
 8005b98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005b9c:	4281      	cmp	r1, r0
 8005b9e:	dc07      	bgt.n	8005bb0 <sin+0x20>
 8005ba0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005c30 <sin+0xa0>
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	b005      	add	sp, #20
 8005ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bac:	f000 be6c 	b.w	8006888 <__kernel_sin>
 8005bb0:	4822      	ldr	r0, [pc, #136]	; (8005c3c <sin+0xac>)
 8005bb2:	4281      	cmp	r1, r0
 8005bb4:	dd09      	ble.n	8005bca <sin+0x3a>
 8005bb6:	ee10 0a10 	vmov	r0, s0
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f7fa fb64 	bl	8000288 <__aeabi_dsub>
 8005bc0:	ec41 0b10 	vmov	d0, r0, r1
 8005bc4:	b005      	add	sp, #20
 8005bc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8005bca:	4668      	mov	r0, sp
 8005bcc:	f000 f838 	bl	8005c40 <__ieee754_rem_pio2>
 8005bd0:	f000 0003 	and.w	r0, r0, #3
 8005bd4:	2801      	cmp	r0, #1
 8005bd6:	d00c      	beq.n	8005bf2 <sin+0x62>
 8005bd8:	2802      	cmp	r0, #2
 8005bda:	d011      	beq.n	8005c00 <sin+0x70>
 8005bdc:	b9f0      	cbnz	r0, 8005c1c <sin+0x8c>
 8005bde:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005be2:	ed9d 0b00 	vldr	d0, [sp]
 8005be6:	2001      	movs	r0, #1
 8005be8:	f000 fe4e 	bl	8006888 <__kernel_sin>
 8005bec:	ec51 0b10 	vmov	r0, r1, d0
 8005bf0:	e7e6      	b.n	8005bc0 <sin+0x30>
 8005bf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005bf6:	ed9d 0b00 	vldr	d0, [sp]
 8005bfa:	f000 fa2d 	bl	8006058 <__kernel_cos>
 8005bfe:	e7f5      	b.n	8005bec <sin+0x5c>
 8005c00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c04:	ed9d 0b00 	vldr	d0, [sp]
 8005c08:	2001      	movs	r0, #1
 8005c0a:	f000 fe3d 	bl	8006888 <__kernel_sin>
 8005c0e:	ec53 2b10 	vmov	r2, r3, d0
 8005c12:	ee10 0a10 	vmov	r0, s0
 8005c16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005c1a:	e7d1      	b.n	8005bc0 <sin+0x30>
 8005c1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005c20:	ed9d 0b00 	vldr	d0, [sp]
 8005c24:	f000 fa18 	bl	8006058 <__kernel_cos>
 8005c28:	e7f1      	b.n	8005c0e <sin+0x7e>
 8005c2a:	bf00      	nop
 8005c2c:	f3af 8000 	nop.w
	...
 8005c38:	3fe921fb 	.word	0x3fe921fb
 8005c3c:	7fefffff 	.word	0x7fefffff

08005c40 <__ieee754_rem_pio2>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	ed2d 8b02 	vpush	{d8}
 8005c48:	ec55 4b10 	vmov	r4, r5, d0
 8005c4c:	4bca      	ldr	r3, [pc, #808]	; (8005f78 <__ieee754_rem_pio2+0x338>)
 8005c4e:	b08b      	sub	sp, #44	; 0x2c
 8005c50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005c54:	4598      	cmp	r8, r3
 8005c56:	4682      	mov	sl, r0
 8005c58:	9502      	str	r5, [sp, #8]
 8005c5a:	dc08      	bgt.n	8005c6e <__ieee754_rem_pio2+0x2e>
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2300      	movs	r3, #0
 8005c60:	ed80 0b00 	vstr	d0, [r0]
 8005c64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005c68:	f04f 0b00 	mov.w	fp, #0
 8005c6c:	e028      	b.n	8005cc0 <__ieee754_rem_pio2+0x80>
 8005c6e:	4bc3      	ldr	r3, [pc, #780]	; (8005f7c <__ieee754_rem_pio2+0x33c>)
 8005c70:	4598      	cmp	r8, r3
 8005c72:	dc78      	bgt.n	8005d66 <__ieee754_rem_pio2+0x126>
 8005c74:	9b02      	ldr	r3, [sp, #8]
 8005c76:	4ec2      	ldr	r6, [pc, #776]	; (8005f80 <__ieee754_rem_pio2+0x340>)
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	ee10 0a10 	vmov	r0, s0
 8005c7e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005f40 <__ieee754_rem_pio2+0x300>)
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	4629      	mov	r1, r5
 8005c86:	dd39      	ble.n	8005cfc <__ieee754_rem_pio2+0xbc>
 8005c88:	f7fa fafe 	bl	8000288 <__aeabi_dsub>
 8005c8c:	45b0      	cmp	r8, r6
 8005c8e:	4604      	mov	r4, r0
 8005c90:	460d      	mov	r5, r1
 8005c92:	d01b      	beq.n	8005ccc <__ieee754_rem_pio2+0x8c>
 8005c94:	a3ac      	add	r3, pc, #688	; (adr r3, 8005f48 <__ieee754_rem_pio2+0x308>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	f7fa faf5 	bl	8000288 <__aeabi_dsub>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	e9ca 2300 	strd	r2, r3, [sl]
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	4629      	mov	r1, r5
 8005caa:	f7fa faed 	bl	8000288 <__aeabi_dsub>
 8005cae:	a3a6      	add	r3, pc, #664	; (adr r3, 8005f48 <__ieee754_rem_pio2+0x308>)
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	f7fa fae8 	bl	8000288 <__aeabi_dsub>
 8005cb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005cbc:	f04f 0b01 	mov.w	fp, #1
 8005cc0:	4658      	mov	r0, fp
 8005cc2:	b00b      	add	sp, #44	; 0x2c
 8005cc4:	ecbd 8b02 	vpop	{d8}
 8005cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ccc:	a3a0      	add	r3, pc, #640	; (adr r3, 8005f50 <__ieee754_rem_pio2+0x310>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fad9 	bl	8000288 <__aeabi_dsub>
 8005cd6:	a3a0      	add	r3, pc, #640	; (adr r3, 8005f58 <__ieee754_rem_pio2+0x318>)
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	4604      	mov	r4, r0
 8005cde:	460d      	mov	r5, r1
 8005ce0:	f7fa fad2 	bl	8000288 <__aeabi_dsub>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	e9ca 2300 	strd	r2, r3, [sl]
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa faca 	bl	8000288 <__aeabi_dsub>
 8005cf4:	a398      	add	r3, pc, #608	; (adr r3, 8005f58 <__ieee754_rem_pio2+0x318>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	e7db      	b.n	8005cb4 <__ieee754_rem_pio2+0x74>
 8005cfc:	f7fa fac6 	bl	800028c <__adddf3>
 8005d00:	45b0      	cmp	r8, r6
 8005d02:	4604      	mov	r4, r0
 8005d04:	460d      	mov	r5, r1
 8005d06:	d016      	beq.n	8005d36 <__ieee754_rem_pio2+0xf6>
 8005d08:	a38f      	add	r3, pc, #572	; (adr r3, 8005f48 <__ieee754_rem_pio2+0x308>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fabd 	bl	800028c <__adddf3>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	e9ca 2300 	strd	r2, r3, [sl]
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	f7fa fab3 	bl	8000288 <__aeabi_dsub>
 8005d22:	a389      	add	r3, pc, #548	; (adr r3, 8005f48 <__ieee754_rem_pio2+0x308>)
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f7fa fab0 	bl	800028c <__adddf3>
 8005d2c:	f04f 3bff 	mov.w	fp, #4294967295
 8005d30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d34:	e7c4      	b.n	8005cc0 <__ieee754_rem_pio2+0x80>
 8005d36:	a386      	add	r3, pc, #536	; (adr r3, 8005f50 <__ieee754_rem_pio2+0x310>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f7fa faa6 	bl	800028c <__adddf3>
 8005d40:	a385      	add	r3, pc, #532	; (adr r3, 8005f58 <__ieee754_rem_pio2+0x318>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	4604      	mov	r4, r0
 8005d48:	460d      	mov	r5, r1
 8005d4a:	f7fa fa9f 	bl	800028c <__adddf3>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	e9ca 2300 	strd	r2, r3, [sl]
 8005d56:	4620      	mov	r0, r4
 8005d58:	4629      	mov	r1, r5
 8005d5a:	f7fa fa95 	bl	8000288 <__aeabi_dsub>
 8005d5e:	a37e      	add	r3, pc, #504	; (adr r3, 8005f58 <__ieee754_rem_pio2+0x318>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	e7e0      	b.n	8005d28 <__ieee754_rem_pio2+0xe8>
 8005d66:	4b87      	ldr	r3, [pc, #540]	; (8005f84 <__ieee754_rem_pio2+0x344>)
 8005d68:	4598      	cmp	r8, r3
 8005d6a:	f300 80d9 	bgt.w	8005f20 <__ieee754_rem_pio2+0x2e0>
 8005d6e:	f000 fe49 	bl	8006a04 <fabs>
 8005d72:	ec55 4b10 	vmov	r4, r5, d0
 8005d76:	ee10 0a10 	vmov	r0, s0
 8005d7a:	a379      	add	r3, pc, #484	; (adr r3, 8005f60 <__ieee754_rem_pio2+0x320>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	4629      	mov	r1, r5
 8005d82:	f7fa fc39 	bl	80005f8 <__aeabi_dmul>
 8005d86:	4b80      	ldr	r3, [pc, #512]	; (8005f88 <__ieee754_rem_pio2+0x348>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f7fa fa7f 	bl	800028c <__adddf3>
 8005d8e:	f7fa fee3 	bl	8000b58 <__aeabi_d2iz>
 8005d92:	4683      	mov	fp, r0
 8005d94:	f7fa fbc6 	bl	8000524 <__aeabi_i2d>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	ec43 2b18 	vmov	d8, r2, r3
 8005da0:	a367      	add	r3, pc, #412	; (adr r3, 8005f40 <__ieee754_rem_pio2+0x300>)
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f7fa fc27 	bl	80005f8 <__aeabi_dmul>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa fa69 	bl	8000288 <__aeabi_dsub>
 8005db6:	a364      	add	r3, pc, #400	; (adr r3, 8005f48 <__ieee754_rem_pio2+0x308>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	460f      	mov	r7, r1
 8005dc0:	ec51 0b18 	vmov	r0, r1, d8
 8005dc4:	f7fa fc18 	bl	80005f8 <__aeabi_dmul>
 8005dc8:	f1bb 0f1f 	cmp.w	fp, #31
 8005dcc:	4604      	mov	r4, r0
 8005dce:	460d      	mov	r5, r1
 8005dd0:	dc0d      	bgt.n	8005dee <__ieee754_rem_pio2+0x1ae>
 8005dd2:	4b6e      	ldr	r3, [pc, #440]	; (8005f8c <__ieee754_rem_pio2+0x34c>)
 8005dd4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ddc:	4543      	cmp	r3, r8
 8005dde:	d006      	beq.n	8005dee <__ieee754_rem_pio2+0x1ae>
 8005de0:	4622      	mov	r2, r4
 8005de2:	462b      	mov	r3, r5
 8005de4:	4630      	mov	r0, r6
 8005de6:	4639      	mov	r1, r7
 8005de8:	f7fa fa4e 	bl	8000288 <__aeabi_dsub>
 8005dec:	e00f      	b.n	8005e0e <__ieee754_rem_pio2+0x1ce>
 8005dee:	462b      	mov	r3, r5
 8005df0:	4622      	mov	r2, r4
 8005df2:	4630      	mov	r0, r6
 8005df4:	4639      	mov	r1, r7
 8005df6:	f7fa fa47 	bl	8000288 <__aeabi_dsub>
 8005dfa:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005dfe:	9303      	str	r3, [sp, #12]
 8005e00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005e04:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005e08:	f1b8 0f10 	cmp.w	r8, #16
 8005e0c:	dc02      	bgt.n	8005e14 <__ieee754_rem_pio2+0x1d4>
 8005e0e:	e9ca 0100 	strd	r0, r1, [sl]
 8005e12:	e039      	b.n	8005e88 <__ieee754_rem_pio2+0x248>
 8005e14:	a34e      	add	r3, pc, #312	; (adr r3, 8005f50 <__ieee754_rem_pio2+0x310>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	ec51 0b18 	vmov	r0, r1, d8
 8005e1e:	f7fa fbeb 	bl	80005f8 <__aeabi_dmul>
 8005e22:	4604      	mov	r4, r0
 8005e24:	460d      	mov	r5, r1
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	f7fa fa2b 	bl	8000288 <__aeabi_dsub>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4680      	mov	r8, r0
 8005e38:	4689      	mov	r9, r1
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	4639      	mov	r1, r7
 8005e3e:	f7fa fa23 	bl	8000288 <__aeabi_dsub>
 8005e42:	4622      	mov	r2, r4
 8005e44:	462b      	mov	r3, r5
 8005e46:	f7fa fa1f 	bl	8000288 <__aeabi_dsub>
 8005e4a:	a343      	add	r3, pc, #268	; (adr r3, 8005f58 <__ieee754_rem_pio2+0x318>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	4604      	mov	r4, r0
 8005e52:	460d      	mov	r5, r1
 8005e54:	ec51 0b18 	vmov	r0, r1, d8
 8005e58:	f7fa fbce 	bl	80005f8 <__aeabi_dmul>
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	462b      	mov	r3, r5
 8005e60:	f7fa fa12 	bl	8000288 <__aeabi_dsub>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4604      	mov	r4, r0
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	4649      	mov	r1, r9
 8005e70:	f7fa fa0a 	bl	8000288 <__aeabi_dsub>
 8005e74:	9a03      	ldr	r2, [sp, #12]
 8005e76:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b31      	cmp	r3, #49	; 0x31
 8005e7e:	dc24      	bgt.n	8005eca <__ieee754_rem_pio2+0x28a>
 8005e80:	e9ca 0100 	strd	r0, r1, [sl]
 8005e84:	4646      	mov	r6, r8
 8005e86:	464f      	mov	r7, r9
 8005e88:	e9da 8900 	ldrd	r8, r9, [sl]
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4642      	mov	r2, r8
 8005e90:	464b      	mov	r3, r9
 8005e92:	4639      	mov	r1, r7
 8005e94:	f7fa f9f8 	bl	8000288 <__aeabi_dsub>
 8005e98:	462b      	mov	r3, r5
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	f7fa f9f4 	bl	8000288 <__aeabi_dsub>
 8005ea0:	9b02      	ldr	r3, [sp, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005ea8:	f6bf af0a 	bge.w	8005cc0 <__ieee754_rem_pio2+0x80>
 8005eac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005eb0:	f8ca 3004 	str.w	r3, [sl, #4]
 8005eb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005eb8:	f8ca 8000 	str.w	r8, [sl]
 8005ebc:	f8ca 0008 	str.w	r0, [sl, #8]
 8005ec0:	f8ca 300c 	str.w	r3, [sl, #12]
 8005ec4:	f1cb 0b00 	rsb	fp, fp, #0
 8005ec8:	e6fa      	b.n	8005cc0 <__ieee754_rem_pio2+0x80>
 8005eca:	a327      	add	r3, pc, #156	; (adr r3, 8005f68 <__ieee754_rem_pio2+0x328>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	ec51 0b18 	vmov	r0, r1, d8
 8005ed4:	f7fa fb90 	bl	80005f8 <__aeabi_dmul>
 8005ed8:	4604      	mov	r4, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4640      	mov	r0, r8
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	f7fa f9d0 	bl	8000288 <__aeabi_dsub>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4606      	mov	r6, r0
 8005eee:	460f      	mov	r7, r1
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa f9c8 	bl	8000288 <__aeabi_dsub>
 8005ef8:	4622      	mov	r2, r4
 8005efa:	462b      	mov	r3, r5
 8005efc:	f7fa f9c4 	bl	8000288 <__aeabi_dsub>
 8005f00:	a31b      	add	r3, pc, #108	; (adr r3, 8005f70 <__ieee754_rem_pio2+0x330>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	4604      	mov	r4, r0
 8005f08:	460d      	mov	r5, r1
 8005f0a:	ec51 0b18 	vmov	r0, r1, d8
 8005f0e:	f7fa fb73 	bl	80005f8 <__aeabi_dmul>
 8005f12:	4622      	mov	r2, r4
 8005f14:	462b      	mov	r3, r5
 8005f16:	f7fa f9b7 	bl	8000288 <__aeabi_dsub>
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	460d      	mov	r5, r1
 8005f1e:	e75f      	b.n	8005de0 <__ieee754_rem_pio2+0x1a0>
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <__ieee754_rem_pio2+0x350>)
 8005f22:	4598      	cmp	r8, r3
 8005f24:	dd36      	ble.n	8005f94 <__ieee754_rem_pio2+0x354>
 8005f26:	ee10 2a10 	vmov	r2, s0
 8005f2a:	462b      	mov	r3, r5
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	4629      	mov	r1, r5
 8005f30:	f7fa f9aa 	bl	8000288 <__aeabi_dsub>
 8005f34:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005f38:	e9ca 0100 	strd	r0, r1, [sl]
 8005f3c:	e694      	b.n	8005c68 <__ieee754_rem_pio2+0x28>
 8005f3e:	bf00      	nop
 8005f40:	54400000 	.word	0x54400000
 8005f44:	3ff921fb 	.word	0x3ff921fb
 8005f48:	1a626331 	.word	0x1a626331
 8005f4c:	3dd0b461 	.word	0x3dd0b461
 8005f50:	1a600000 	.word	0x1a600000
 8005f54:	3dd0b461 	.word	0x3dd0b461
 8005f58:	2e037073 	.word	0x2e037073
 8005f5c:	3ba3198a 	.word	0x3ba3198a
 8005f60:	6dc9c883 	.word	0x6dc9c883
 8005f64:	3fe45f30 	.word	0x3fe45f30
 8005f68:	2e000000 	.word	0x2e000000
 8005f6c:	3ba3198a 	.word	0x3ba3198a
 8005f70:	252049c1 	.word	0x252049c1
 8005f74:	397b839a 	.word	0x397b839a
 8005f78:	3fe921fb 	.word	0x3fe921fb
 8005f7c:	4002d97b 	.word	0x4002d97b
 8005f80:	3ff921fb 	.word	0x3ff921fb
 8005f84:	413921fb 	.word	0x413921fb
 8005f88:	3fe00000 	.word	0x3fe00000
 8005f8c:	080098f8 	.word	0x080098f8
 8005f90:	7fefffff 	.word	0x7fefffff
 8005f94:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005f98:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005f9c:	ee10 0a10 	vmov	r0, s0
 8005fa0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005fa4:	ee10 6a10 	vmov	r6, s0
 8005fa8:	460f      	mov	r7, r1
 8005faa:	f7fa fdd5 	bl	8000b58 <__aeabi_d2iz>
 8005fae:	f7fa fab9 	bl	8000524 <__aeabi_i2d>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fbe:	f7fa f963 	bl	8000288 <__aeabi_dsub>
 8005fc2:	4b23      	ldr	r3, [pc, #140]	; (8006050 <__ieee754_rem_pio2+0x410>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f7fa fb17 	bl	80005f8 <__aeabi_dmul>
 8005fca:	460f      	mov	r7, r1
 8005fcc:	4606      	mov	r6, r0
 8005fce:	f7fa fdc3 	bl	8000b58 <__aeabi_d2iz>
 8005fd2:	f7fa faa7 	bl	8000524 <__aeabi_i2d>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4630      	mov	r0, r6
 8005fdc:	4639      	mov	r1, r7
 8005fde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005fe2:	f7fa f951 	bl	8000288 <__aeabi_dsub>
 8005fe6:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <__ieee754_rem_pio2+0x410>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f7fa fb05 	bl	80005f8 <__aeabi_dmul>
 8005fee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ff2:	ad04      	add	r5, sp, #16
 8005ff4:	f04f 0803 	mov.w	r8, #3
 8005ff8:	46a9      	mov	r9, r5
 8005ffa:	2600      	movs	r6, #0
 8005ffc:	2700      	movs	r7, #0
 8005ffe:	4632      	mov	r2, r6
 8006000:	463b      	mov	r3, r7
 8006002:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006006:	46c3      	mov	fp, r8
 8006008:	3d08      	subs	r5, #8
 800600a:	f108 38ff 	add.w	r8, r8, #4294967295
 800600e:	f7fa fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006012:	2800      	cmp	r0, #0
 8006014:	d1f3      	bne.n	8005ffe <__ieee754_rem_pio2+0x3be>
 8006016:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <__ieee754_rem_pio2+0x414>)
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	2302      	movs	r3, #2
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	4622      	mov	r2, r4
 8006020:	465b      	mov	r3, fp
 8006022:	4651      	mov	r1, sl
 8006024:	4648      	mov	r0, r9
 8006026:	f000 f8df 	bl	80061e8 <__kernel_rem_pio2>
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	4683      	mov	fp, r0
 8006030:	f6bf ae46 	bge.w	8005cc0 <__ieee754_rem_pio2+0x80>
 8006034:	e9da 2100 	ldrd	r2, r1, [sl]
 8006038:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800603c:	e9ca 2300 	strd	r2, r3, [sl]
 8006040:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006044:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006048:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800604c:	e73a      	b.n	8005ec4 <__ieee754_rem_pio2+0x284>
 800604e:	bf00      	nop
 8006050:	41700000 	.word	0x41700000
 8006054:	08009978 	.word	0x08009978

08006058 <__kernel_cos>:
 8006058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	ec57 6b10 	vmov	r6, r7, d0
 8006060:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006064:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006068:	ed8d 1b00 	vstr	d1, [sp]
 800606c:	da07      	bge.n	800607e <__kernel_cos+0x26>
 800606e:	ee10 0a10 	vmov	r0, s0
 8006072:	4639      	mov	r1, r7
 8006074:	f7fa fd70 	bl	8000b58 <__aeabi_d2iz>
 8006078:	2800      	cmp	r0, #0
 800607a:	f000 8088 	beq.w	800618e <__kernel_cos+0x136>
 800607e:	4632      	mov	r2, r6
 8006080:	463b      	mov	r3, r7
 8006082:	4630      	mov	r0, r6
 8006084:	4639      	mov	r1, r7
 8006086:	f7fa fab7 	bl	80005f8 <__aeabi_dmul>
 800608a:	4b51      	ldr	r3, [pc, #324]	; (80061d0 <__kernel_cos+0x178>)
 800608c:	2200      	movs	r2, #0
 800608e:	4604      	mov	r4, r0
 8006090:	460d      	mov	r5, r1
 8006092:	f7fa fab1 	bl	80005f8 <__aeabi_dmul>
 8006096:	a340      	add	r3, pc, #256	; (adr r3, 8006198 <__kernel_cos+0x140>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	4682      	mov	sl, r0
 800609e:	468b      	mov	fp, r1
 80060a0:	4620      	mov	r0, r4
 80060a2:	4629      	mov	r1, r5
 80060a4:	f7fa faa8 	bl	80005f8 <__aeabi_dmul>
 80060a8:	a33d      	add	r3, pc, #244	; (adr r3, 80061a0 <__kernel_cos+0x148>)
 80060aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ae:	f7fa f8ed 	bl	800028c <__adddf3>
 80060b2:	4622      	mov	r2, r4
 80060b4:	462b      	mov	r3, r5
 80060b6:	f7fa fa9f 	bl	80005f8 <__aeabi_dmul>
 80060ba:	a33b      	add	r3, pc, #236	; (adr r3, 80061a8 <__kernel_cos+0x150>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	f7fa f8e2 	bl	8000288 <__aeabi_dsub>
 80060c4:	4622      	mov	r2, r4
 80060c6:	462b      	mov	r3, r5
 80060c8:	f7fa fa96 	bl	80005f8 <__aeabi_dmul>
 80060cc:	a338      	add	r3, pc, #224	; (adr r3, 80061b0 <__kernel_cos+0x158>)
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f7fa f8db 	bl	800028c <__adddf3>
 80060d6:	4622      	mov	r2, r4
 80060d8:	462b      	mov	r3, r5
 80060da:	f7fa fa8d 	bl	80005f8 <__aeabi_dmul>
 80060de:	a336      	add	r3, pc, #216	; (adr r3, 80061b8 <__kernel_cos+0x160>)
 80060e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e4:	f7fa f8d0 	bl	8000288 <__aeabi_dsub>
 80060e8:	4622      	mov	r2, r4
 80060ea:	462b      	mov	r3, r5
 80060ec:	f7fa fa84 	bl	80005f8 <__aeabi_dmul>
 80060f0:	a333      	add	r3, pc, #204	; (adr r3, 80061c0 <__kernel_cos+0x168>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	f7fa f8c9 	bl	800028c <__adddf3>
 80060fa:	4622      	mov	r2, r4
 80060fc:	462b      	mov	r3, r5
 80060fe:	f7fa fa7b 	bl	80005f8 <__aeabi_dmul>
 8006102:	4622      	mov	r2, r4
 8006104:	462b      	mov	r3, r5
 8006106:	f7fa fa77 	bl	80005f8 <__aeabi_dmul>
 800610a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800610e:	4604      	mov	r4, r0
 8006110:	460d      	mov	r5, r1
 8006112:	4630      	mov	r0, r6
 8006114:	4639      	mov	r1, r7
 8006116:	f7fa fa6f 	bl	80005f8 <__aeabi_dmul>
 800611a:	460b      	mov	r3, r1
 800611c:	4602      	mov	r2, r0
 800611e:	4629      	mov	r1, r5
 8006120:	4620      	mov	r0, r4
 8006122:	f7fa f8b1 	bl	8000288 <__aeabi_dsub>
 8006126:	4b2b      	ldr	r3, [pc, #172]	; (80061d4 <__kernel_cos+0x17c>)
 8006128:	4598      	cmp	r8, r3
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	dc10      	bgt.n	8006152 <__kernel_cos+0xfa>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4650      	mov	r0, sl
 8006136:	4659      	mov	r1, fp
 8006138:	f7fa f8a6 	bl	8000288 <__aeabi_dsub>
 800613c:	460b      	mov	r3, r1
 800613e:	4926      	ldr	r1, [pc, #152]	; (80061d8 <__kernel_cos+0x180>)
 8006140:	4602      	mov	r2, r0
 8006142:	2000      	movs	r0, #0
 8006144:	f7fa f8a0 	bl	8000288 <__aeabi_dsub>
 8006148:	ec41 0b10 	vmov	d0, r0, r1
 800614c:	b003      	add	sp, #12
 800614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006152:	4b22      	ldr	r3, [pc, #136]	; (80061dc <__kernel_cos+0x184>)
 8006154:	4920      	ldr	r1, [pc, #128]	; (80061d8 <__kernel_cos+0x180>)
 8006156:	4598      	cmp	r8, r3
 8006158:	bfcc      	ite	gt
 800615a:	4d21      	ldrgt	r5, [pc, #132]	; (80061e0 <__kernel_cos+0x188>)
 800615c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006160:	2400      	movs	r4, #0
 8006162:	4622      	mov	r2, r4
 8006164:	462b      	mov	r3, r5
 8006166:	2000      	movs	r0, #0
 8006168:	f7fa f88e 	bl	8000288 <__aeabi_dsub>
 800616c:	4622      	mov	r2, r4
 800616e:	4680      	mov	r8, r0
 8006170:	4689      	mov	r9, r1
 8006172:	462b      	mov	r3, r5
 8006174:	4650      	mov	r0, sl
 8006176:	4659      	mov	r1, fp
 8006178:	f7fa f886 	bl	8000288 <__aeabi_dsub>
 800617c:	4632      	mov	r2, r6
 800617e:	463b      	mov	r3, r7
 8006180:	f7fa f882 	bl	8000288 <__aeabi_dsub>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4640      	mov	r0, r8
 800618a:	4649      	mov	r1, r9
 800618c:	e7da      	b.n	8006144 <__kernel_cos+0xec>
 800618e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80061c8 <__kernel_cos+0x170>
 8006192:	e7db      	b.n	800614c <__kernel_cos+0xf4>
 8006194:	f3af 8000 	nop.w
 8006198:	be8838d4 	.word	0xbe8838d4
 800619c:	bda8fae9 	.word	0xbda8fae9
 80061a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80061a4:	3e21ee9e 	.word	0x3e21ee9e
 80061a8:	809c52ad 	.word	0x809c52ad
 80061ac:	3e927e4f 	.word	0x3e927e4f
 80061b0:	19cb1590 	.word	0x19cb1590
 80061b4:	3efa01a0 	.word	0x3efa01a0
 80061b8:	16c15177 	.word	0x16c15177
 80061bc:	3f56c16c 	.word	0x3f56c16c
 80061c0:	5555554c 	.word	0x5555554c
 80061c4:	3fa55555 	.word	0x3fa55555
 80061c8:	00000000 	.word	0x00000000
 80061cc:	3ff00000 	.word	0x3ff00000
 80061d0:	3fe00000 	.word	0x3fe00000
 80061d4:	3fd33332 	.word	0x3fd33332
 80061d8:	3ff00000 	.word	0x3ff00000
 80061dc:	3fe90000 	.word	0x3fe90000
 80061e0:	3fd20000 	.word	0x3fd20000
 80061e4:	00000000 	.word	0x00000000

080061e8 <__kernel_rem_pio2>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	ed2d 8b02 	vpush	{d8}
 80061f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80061f4:	f112 0f14 	cmn.w	r2, #20
 80061f8:	9308      	str	r3, [sp, #32]
 80061fa:	9101      	str	r1, [sp, #4]
 80061fc:	4bc4      	ldr	r3, [pc, #784]	; (8006510 <__kernel_rem_pio2+0x328>)
 80061fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006200:	900b      	str	r0, [sp, #44]	; 0x2c
 8006202:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006206:	9302      	str	r3, [sp, #8]
 8006208:	9b08      	ldr	r3, [sp, #32]
 800620a:	f103 33ff 	add.w	r3, r3, #4294967295
 800620e:	bfa8      	it	ge
 8006210:	1ed4      	subge	r4, r2, #3
 8006212:	9306      	str	r3, [sp, #24]
 8006214:	bfb2      	itee	lt
 8006216:	2400      	movlt	r4, #0
 8006218:	2318      	movge	r3, #24
 800621a:	fb94 f4f3 	sdivge	r4, r4, r3
 800621e:	f06f 0317 	mvn.w	r3, #23
 8006222:	fb04 3303 	mla	r3, r4, r3, r3
 8006226:	eb03 0a02 	add.w	sl, r3, r2
 800622a:	9b02      	ldr	r3, [sp, #8]
 800622c:	9a06      	ldr	r2, [sp, #24]
 800622e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006500 <__kernel_rem_pio2+0x318>
 8006232:	eb03 0802 	add.w	r8, r3, r2
 8006236:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006238:	1aa7      	subs	r7, r4, r2
 800623a:	ae22      	add	r6, sp, #136	; 0x88
 800623c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006240:	2500      	movs	r5, #0
 8006242:	4545      	cmp	r5, r8
 8006244:	dd13      	ble.n	800626e <__kernel_rem_pio2+0x86>
 8006246:	9b08      	ldr	r3, [sp, #32]
 8006248:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006500 <__kernel_rem_pio2+0x318>
 800624c:	aa22      	add	r2, sp, #136	; 0x88
 800624e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006252:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006256:	f04f 0800 	mov.w	r8, #0
 800625a:	9b02      	ldr	r3, [sp, #8]
 800625c:	4598      	cmp	r8, r3
 800625e:	dc2f      	bgt.n	80062c0 <__kernel_rem_pio2+0xd8>
 8006260:	ed8d 8b04 	vstr	d8, [sp, #16]
 8006264:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006268:	462f      	mov	r7, r5
 800626a:	2600      	movs	r6, #0
 800626c:	e01b      	b.n	80062a6 <__kernel_rem_pio2+0xbe>
 800626e:	42ef      	cmn	r7, r5
 8006270:	d407      	bmi.n	8006282 <__kernel_rem_pio2+0x9a>
 8006272:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006276:	f7fa f955 	bl	8000524 <__aeabi_i2d>
 800627a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800627e:	3501      	adds	r5, #1
 8006280:	e7df      	b.n	8006242 <__kernel_rem_pio2+0x5a>
 8006282:	ec51 0b18 	vmov	r0, r1, d8
 8006286:	e7f8      	b.n	800627a <__kernel_rem_pio2+0x92>
 8006288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006290:	f7fa f9b2 	bl	80005f8 <__aeabi_dmul>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800629c:	f7f9 fff6 	bl	800028c <__adddf3>
 80062a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062a4:	3601      	adds	r6, #1
 80062a6:	9b06      	ldr	r3, [sp, #24]
 80062a8:	429e      	cmp	r6, r3
 80062aa:	f1a7 0708 	sub.w	r7, r7, #8
 80062ae:	ddeb      	ble.n	8006288 <__kernel_rem_pio2+0xa0>
 80062b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80062b4:	f108 0801 	add.w	r8, r8, #1
 80062b8:	ecab 7b02 	vstmia	fp!, {d7}
 80062bc:	3508      	adds	r5, #8
 80062be:	e7cc      	b.n	800625a <__kernel_rem_pio2+0x72>
 80062c0:	9b02      	ldr	r3, [sp, #8]
 80062c2:	aa0e      	add	r2, sp, #56	; 0x38
 80062c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062c8:	930d      	str	r3, [sp, #52]	; 0x34
 80062ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80062cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80062d0:	9c02      	ldr	r4, [sp, #8]
 80062d2:	930c      	str	r3, [sp, #48]	; 0x30
 80062d4:	00e3      	lsls	r3, r4, #3
 80062d6:	930a      	str	r3, [sp, #40]	; 0x28
 80062d8:	ab9a      	add	r3, sp, #616	; 0x268
 80062da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80062de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80062e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80062e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80062e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80062ec:	46c3      	mov	fp, r8
 80062ee:	46a1      	mov	r9, r4
 80062f0:	f1b9 0f00 	cmp.w	r9, #0
 80062f4:	f1a5 0508 	sub.w	r5, r5, #8
 80062f8:	dc77      	bgt.n	80063ea <__kernel_rem_pio2+0x202>
 80062fa:	ec47 6b10 	vmov	d0, r6, r7
 80062fe:	4650      	mov	r0, sl
 8006300:	f000 fc0a 	bl	8006b18 <scalbn>
 8006304:	ec57 6b10 	vmov	r6, r7, d0
 8006308:	2200      	movs	r2, #0
 800630a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800630e:	ee10 0a10 	vmov	r0, s0
 8006312:	4639      	mov	r1, r7
 8006314:	f7fa f970 	bl	80005f8 <__aeabi_dmul>
 8006318:	ec41 0b10 	vmov	d0, r0, r1
 800631c:	f000 fb7c 	bl	8006a18 <floor>
 8006320:	4b7c      	ldr	r3, [pc, #496]	; (8006514 <__kernel_rem_pio2+0x32c>)
 8006322:	ec51 0b10 	vmov	r0, r1, d0
 8006326:	2200      	movs	r2, #0
 8006328:	f7fa f966 	bl	80005f8 <__aeabi_dmul>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	f7f9 ffa8 	bl	8000288 <__aeabi_dsub>
 8006338:	460f      	mov	r7, r1
 800633a:	4606      	mov	r6, r0
 800633c:	f7fa fc0c 	bl	8000b58 <__aeabi_d2iz>
 8006340:	9004      	str	r0, [sp, #16]
 8006342:	f7fa f8ef 	bl	8000524 <__aeabi_i2d>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4630      	mov	r0, r6
 800634c:	4639      	mov	r1, r7
 800634e:	f7f9 ff9b 	bl	8000288 <__aeabi_dsub>
 8006352:	f1ba 0f00 	cmp.w	sl, #0
 8006356:	4606      	mov	r6, r0
 8006358:	460f      	mov	r7, r1
 800635a:	dd6d      	ble.n	8006438 <__kernel_rem_pio2+0x250>
 800635c:	1e62      	subs	r2, r4, #1
 800635e:	ab0e      	add	r3, sp, #56	; 0x38
 8006360:	9d04      	ldr	r5, [sp, #16]
 8006362:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006366:	f1ca 0118 	rsb	r1, sl, #24
 800636a:	fa40 f301 	asr.w	r3, r0, r1
 800636e:	441d      	add	r5, r3
 8006370:	408b      	lsls	r3, r1
 8006372:	1ac0      	subs	r0, r0, r3
 8006374:	ab0e      	add	r3, sp, #56	; 0x38
 8006376:	9504      	str	r5, [sp, #16]
 8006378:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800637c:	f1ca 0317 	rsb	r3, sl, #23
 8006380:	fa40 fb03 	asr.w	fp, r0, r3
 8006384:	f1bb 0f00 	cmp.w	fp, #0
 8006388:	dd65      	ble.n	8006456 <__kernel_rem_pio2+0x26e>
 800638a:	9b04      	ldr	r3, [sp, #16]
 800638c:	2200      	movs	r2, #0
 800638e:	3301      	adds	r3, #1
 8006390:	9304      	str	r3, [sp, #16]
 8006392:	4615      	mov	r5, r2
 8006394:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006398:	4294      	cmp	r4, r2
 800639a:	f300 809c 	bgt.w	80064d6 <__kernel_rem_pio2+0x2ee>
 800639e:	f1ba 0f00 	cmp.w	sl, #0
 80063a2:	dd07      	ble.n	80063b4 <__kernel_rem_pio2+0x1cc>
 80063a4:	f1ba 0f01 	cmp.w	sl, #1
 80063a8:	f000 80c0 	beq.w	800652c <__kernel_rem_pio2+0x344>
 80063ac:	f1ba 0f02 	cmp.w	sl, #2
 80063b0:	f000 80c6 	beq.w	8006540 <__kernel_rem_pio2+0x358>
 80063b4:	f1bb 0f02 	cmp.w	fp, #2
 80063b8:	d14d      	bne.n	8006456 <__kernel_rem_pio2+0x26e>
 80063ba:	4632      	mov	r2, r6
 80063bc:	463b      	mov	r3, r7
 80063be:	4956      	ldr	r1, [pc, #344]	; (8006518 <__kernel_rem_pio2+0x330>)
 80063c0:	2000      	movs	r0, #0
 80063c2:	f7f9 ff61 	bl	8000288 <__aeabi_dsub>
 80063c6:	4606      	mov	r6, r0
 80063c8:	460f      	mov	r7, r1
 80063ca:	2d00      	cmp	r5, #0
 80063cc:	d043      	beq.n	8006456 <__kernel_rem_pio2+0x26e>
 80063ce:	4650      	mov	r0, sl
 80063d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006508 <__kernel_rem_pio2+0x320>
 80063d4:	f000 fba0 	bl	8006b18 <scalbn>
 80063d8:	4630      	mov	r0, r6
 80063da:	4639      	mov	r1, r7
 80063dc:	ec53 2b10 	vmov	r2, r3, d0
 80063e0:	f7f9 ff52 	bl	8000288 <__aeabi_dsub>
 80063e4:	4606      	mov	r6, r0
 80063e6:	460f      	mov	r7, r1
 80063e8:	e035      	b.n	8006456 <__kernel_rem_pio2+0x26e>
 80063ea:	4b4c      	ldr	r3, [pc, #304]	; (800651c <__kernel_rem_pio2+0x334>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	4630      	mov	r0, r6
 80063f0:	4639      	mov	r1, r7
 80063f2:	f7fa f901 	bl	80005f8 <__aeabi_dmul>
 80063f6:	f7fa fbaf 	bl	8000b58 <__aeabi_d2iz>
 80063fa:	f7fa f893 	bl	8000524 <__aeabi_i2d>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	ec43 2b18 	vmov	d8, r2, r3
 8006406:	4b46      	ldr	r3, [pc, #280]	; (8006520 <__kernel_rem_pio2+0x338>)
 8006408:	2200      	movs	r2, #0
 800640a:	f7fa f8f5 	bl	80005f8 <__aeabi_dmul>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4630      	mov	r0, r6
 8006414:	4639      	mov	r1, r7
 8006416:	f7f9 ff37 	bl	8000288 <__aeabi_dsub>
 800641a:	f7fa fb9d 	bl	8000b58 <__aeabi_d2iz>
 800641e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006422:	f84b 0b04 	str.w	r0, [fp], #4
 8006426:	ec51 0b18 	vmov	r0, r1, d8
 800642a:	f7f9 ff2f 	bl	800028c <__adddf3>
 800642e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006432:	4606      	mov	r6, r0
 8006434:	460f      	mov	r7, r1
 8006436:	e75b      	b.n	80062f0 <__kernel_rem_pio2+0x108>
 8006438:	d106      	bne.n	8006448 <__kernel_rem_pio2+0x260>
 800643a:	1e63      	subs	r3, r4, #1
 800643c:	aa0e      	add	r2, sp, #56	; 0x38
 800643e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006442:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006446:	e79d      	b.n	8006384 <__kernel_rem_pio2+0x19c>
 8006448:	4b36      	ldr	r3, [pc, #216]	; (8006524 <__kernel_rem_pio2+0x33c>)
 800644a:	2200      	movs	r2, #0
 800644c:	f7fa fb5a 	bl	8000b04 <__aeabi_dcmpge>
 8006450:	2800      	cmp	r0, #0
 8006452:	d13d      	bne.n	80064d0 <__kernel_rem_pio2+0x2e8>
 8006454:	4683      	mov	fp, r0
 8006456:	2200      	movs	r2, #0
 8006458:	2300      	movs	r3, #0
 800645a:	4630      	mov	r0, r6
 800645c:	4639      	mov	r1, r7
 800645e:	f7fa fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 8006462:	2800      	cmp	r0, #0
 8006464:	f000 80c0 	beq.w	80065e8 <__kernel_rem_pio2+0x400>
 8006468:	1e65      	subs	r5, r4, #1
 800646a:	462b      	mov	r3, r5
 800646c:	2200      	movs	r2, #0
 800646e:	9902      	ldr	r1, [sp, #8]
 8006470:	428b      	cmp	r3, r1
 8006472:	da6c      	bge.n	800654e <__kernel_rem_pio2+0x366>
 8006474:	2a00      	cmp	r2, #0
 8006476:	f000 8089 	beq.w	800658c <__kernel_rem_pio2+0x3a4>
 800647a:	ab0e      	add	r3, sp, #56	; 0x38
 800647c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006480:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80ad 	beq.w	80065e4 <__kernel_rem_pio2+0x3fc>
 800648a:	4650      	mov	r0, sl
 800648c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006508 <__kernel_rem_pio2+0x320>
 8006490:	f000 fb42 	bl	8006b18 <scalbn>
 8006494:	ab9a      	add	r3, sp, #616	; 0x268
 8006496:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800649a:	ec57 6b10 	vmov	r6, r7, d0
 800649e:	00ec      	lsls	r4, r5, #3
 80064a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80064a4:	46aa      	mov	sl, r5
 80064a6:	f1ba 0f00 	cmp.w	sl, #0
 80064aa:	f280 80d6 	bge.w	800665a <__kernel_rem_pio2+0x472>
 80064ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006500 <__kernel_rem_pio2+0x318>
 80064b2:	462e      	mov	r6, r5
 80064b4:	2e00      	cmp	r6, #0
 80064b6:	f2c0 8104 	blt.w	80066c2 <__kernel_rem_pio2+0x4da>
 80064ba:	ab72      	add	r3, sp, #456	; 0x1c8
 80064bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80064c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006528 <__kernel_rem_pio2+0x340>
 80064c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80064c8:	f04f 0800 	mov.w	r8, #0
 80064cc:	1baf      	subs	r7, r5, r6
 80064ce:	e0ea      	b.n	80066a6 <__kernel_rem_pio2+0x4be>
 80064d0:	f04f 0b02 	mov.w	fp, #2
 80064d4:	e759      	b.n	800638a <__kernel_rem_pio2+0x1a2>
 80064d6:	f8d8 3000 	ldr.w	r3, [r8]
 80064da:	b955      	cbnz	r5, 80064f2 <__kernel_rem_pio2+0x30a>
 80064dc:	b123      	cbz	r3, 80064e8 <__kernel_rem_pio2+0x300>
 80064de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80064e2:	f8c8 3000 	str.w	r3, [r8]
 80064e6:	2301      	movs	r3, #1
 80064e8:	3201      	adds	r2, #1
 80064ea:	f108 0804 	add.w	r8, r8, #4
 80064ee:	461d      	mov	r5, r3
 80064f0:	e752      	b.n	8006398 <__kernel_rem_pio2+0x1b0>
 80064f2:	1acb      	subs	r3, r1, r3
 80064f4:	f8c8 3000 	str.w	r3, [r8]
 80064f8:	462b      	mov	r3, r5
 80064fa:	e7f5      	b.n	80064e8 <__kernel_rem_pio2+0x300>
 80064fc:	f3af 8000 	nop.w
	...
 800650c:	3ff00000 	.word	0x3ff00000
 8006510:	08009ac0 	.word	0x08009ac0
 8006514:	40200000 	.word	0x40200000
 8006518:	3ff00000 	.word	0x3ff00000
 800651c:	3e700000 	.word	0x3e700000
 8006520:	41700000 	.word	0x41700000
 8006524:	3fe00000 	.word	0x3fe00000
 8006528:	08009a80 	.word	0x08009a80
 800652c:	1e62      	subs	r2, r4, #1
 800652e:	ab0e      	add	r3, sp, #56	; 0x38
 8006530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006534:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006538:	a90e      	add	r1, sp, #56	; 0x38
 800653a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800653e:	e739      	b.n	80063b4 <__kernel_rem_pio2+0x1cc>
 8006540:	1e62      	subs	r2, r4, #1
 8006542:	ab0e      	add	r3, sp, #56	; 0x38
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800654c:	e7f4      	b.n	8006538 <__kernel_rem_pio2+0x350>
 800654e:	a90e      	add	r1, sp, #56	; 0x38
 8006550:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006554:	3b01      	subs	r3, #1
 8006556:	430a      	orrs	r2, r1
 8006558:	e789      	b.n	800646e <__kernel_rem_pio2+0x286>
 800655a:	3301      	adds	r3, #1
 800655c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006560:	2900      	cmp	r1, #0
 8006562:	d0fa      	beq.n	800655a <__kernel_rem_pio2+0x372>
 8006564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006566:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800656a:	446a      	add	r2, sp
 800656c:	3a98      	subs	r2, #152	; 0x98
 800656e:	920a      	str	r2, [sp, #40]	; 0x28
 8006570:	9a08      	ldr	r2, [sp, #32]
 8006572:	18e3      	adds	r3, r4, r3
 8006574:	18a5      	adds	r5, r4, r2
 8006576:	aa22      	add	r2, sp, #136	; 0x88
 8006578:	f104 0801 	add.w	r8, r4, #1
 800657c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006580:	9304      	str	r3, [sp, #16]
 8006582:	9b04      	ldr	r3, [sp, #16]
 8006584:	4543      	cmp	r3, r8
 8006586:	da04      	bge.n	8006592 <__kernel_rem_pio2+0x3aa>
 8006588:	461c      	mov	r4, r3
 800658a:	e6a3      	b.n	80062d4 <__kernel_rem_pio2+0xec>
 800658c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800658e:	2301      	movs	r3, #1
 8006590:	e7e4      	b.n	800655c <__kernel_rem_pio2+0x374>
 8006592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006594:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006598:	f7f9 ffc4 	bl	8000524 <__aeabi_i2d>
 800659c:	e8e5 0102 	strd	r0, r1, [r5], #8
 80065a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a2:	46ab      	mov	fp, r5
 80065a4:	461c      	mov	r4, r3
 80065a6:	f04f 0900 	mov.w	r9, #0
 80065aa:	2600      	movs	r6, #0
 80065ac:	2700      	movs	r7, #0
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	4599      	cmp	r9, r3
 80065b2:	dd06      	ble.n	80065c2 <__kernel_rem_pio2+0x3da>
 80065b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80065ba:	f108 0801 	add.w	r8, r8, #1
 80065be:	930a      	str	r3, [sp, #40]	; 0x28
 80065c0:	e7df      	b.n	8006582 <__kernel_rem_pio2+0x39a>
 80065c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80065c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80065ca:	f7fa f815 	bl	80005f8 <__aeabi_dmul>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4630      	mov	r0, r6
 80065d4:	4639      	mov	r1, r7
 80065d6:	f7f9 fe59 	bl	800028c <__adddf3>
 80065da:	f109 0901 	add.w	r9, r9, #1
 80065de:	4606      	mov	r6, r0
 80065e0:	460f      	mov	r7, r1
 80065e2:	e7e4      	b.n	80065ae <__kernel_rem_pio2+0x3c6>
 80065e4:	3d01      	subs	r5, #1
 80065e6:	e748      	b.n	800647a <__kernel_rem_pio2+0x292>
 80065e8:	ec47 6b10 	vmov	d0, r6, r7
 80065ec:	f1ca 0000 	rsb	r0, sl, #0
 80065f0:	f000 fa92 	bl	8006b18 <scalbn>
 80065f4:	ec57 6b10 	vmov	r6, r7, d0
 80065f8:	4ba0      	ldr	r3, [pc, #640]	; (800687c <__kernel_rem_pio2+0x694>)
 80065fa:	ee10 0a10 	vmov	r0, s0
 80065fe:	2200      	movs	r2, #0
 8006600:	4639      	mov	r1, r7
 8006602:	f7fa fa7f 	bl	8000b04 <__aeabi_dcmpge>
 8006606:	b1f8      	cbz	r0, 8006648 <__kernel_rem_pio2+0x460>
 8006608:	4b9d      	ldr	r3, [pc, #628]	; (8006880 <__kernel_rem_pio2+0x698>)
 800660a:	2200      	movs	r2, #0
 800660c:	4630      	mov	r0, r6
 800660e:	4639      	mov	r1, r7
 8006610:	f7f9 fff2 	bl	80005f8 <__aeabi_dmul>
 8006614:	f7fa faa0 	bl	8000b58 <__aeabi_d2iz>
 8006618:	4680      	mov	r8, r0
 800661a:	f7f9 ff83 	bl	8000524 <__aeabi_i2d>
 800661e:	4b97      	ldr	r3, [pc, #604]	; (800687c <__kernel_rem_pio2+0x694>)
 8006620:	2200      	movs	r2, #0
 8006622:	f7f9 ffe9 	bl	80005f8 <__aeabi_dmul>
 8006626:	460b      	mov	r3, r1
 8006628:	4602      	mov	r2, r0
 800662a:	4639      	mov	r1, r7
 800662c:	4630      	mov	r0, r6
 800662e:	f7f9 fe2b 	bl	8000288 <__aeabi_dsub>
 8006632:	f7fa fa91 	bl	8000b58 <__aeabi_d2iz>
 8006636:	1c65      	adds	r5, r4, #1
 8006638:	ab0e      	add	r3, sp, #56	; 0x38
 800663a:	f10a 0a18 	add.w	sl, sl, #24
 800663e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006642:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006646:	e720      	b.n	800648a <__kernel_rem_pio2+0x2a2>
 8006648:	4630      	mov	r0, r6
 800664a:	4639      	mov	r1, r7
 800664c:	f7fa fa84 	bl	8000b58 <__aeabi_d2iz>
 8006650:	ab0e      	add	r3, sp, #56	; 0x38
 8006652:	4625      	mov	r5, r4
 8006654:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006658:	e717      	b.n	800648a <__kernel_rem_pio2+0x2a2>
 800665a:	ab0e      	add	r3, sp, #56	; 0x38
 800665c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006660:	f7f9 ff60 	bl	8000524 <__aeabi_i2d>
 8006664:	4632      	mov	r2, r6
 8006666:	463b      	mov	r3, r7
 8006668:	f7f9 ffc6 	bl	80005f8 <__aeabi_dmul>
 800666c:	4b84      	ldr	r3, [pc, #528]	; (8006880 <__kernel_rem_pio2+0x698>)
 800666e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006672:	2200      	movs	r2, #0
 8006674:	4630      	mov	r0, r6
 8006676:	4639      	mov	r1, r7
 8006678:	f7f9 ffbe 	bl	80005f8 <__aeabi_dmul>
 800667c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006680:	4606      	mov	r6, r0
 8006682:	460f      	mov	r7, r1
 8006684:	e70f      	b.n	80064a6 <__kernel_rem_pio2+0x2be>
 8006686:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800668a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800668e:	f7f9 ffb3 	bl	80005f8 <__aeabi_dmul>
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800669a:	f7f9 fdf7 	bl	800028c <__adddf3>
 800669e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066a2:	f108 0801 	add.w	r8, r8, #1
 80066a6:	9b02      	ldr	r3, [sp, #8]
 80066a8:	4598      	cmp	r8, r3
 80066aa:	dc01      	bgt.n	80066b0 <__kernel_rem_pio2+0x4c8>
 80066ac:	45b8      	cmp	r8, r7
 80066ae:	ddea      	ble.n	8006686 <__kernel_rem_pio2+0x49e>
 80066b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80066b4:	ab4a      	add	r3, sp, #296	; 0x128
 80066b6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80066ba:	ed87 7b00 	vstr	d7, [r7]
 80066be:	3e01      	subs	r6, #1
 80066c0:	e6f8      	b.n	80064b4 <__kernel_rem_pio2+0x2cc>
 80066c2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	dc0b      	bgt.n	80066e0 <__kernel_rem_pio2+0x4f8>
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dc35      	bgt.n	8006738 <__kernel_rem_pio2+0x550>
 80066cc:	d059      	beq.n	8006782 <__kernel_rem_pio2+0x59a>
 80066ce:	9b04      	ldr	r3, [sp, #16]
 80066d0:	f003 0007 	and.w	r0, r3, #7
 80066d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80066d8:	ecbd 8b02 	vpop	{d8}
 80066dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d1f3      	bne.n	80066ce <__kernel_rem_pio2+0x4e6>
 80066e6:	ab4a      	add	r3, sp, #296	; 0x128
 80066e8:	4423      	add	r3, r4
 80066ea:	9306      	str	r3, [sp, #24]
 80066ec:	461c      	mov	r4, r3
 80066ee:	469a      	mov	sl, r3
 80066f0:	9502      	str	r5, [sp, #8]
 80066f2:	9b02      	ldr	r3, [sp, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f1aa 0a08 	sub.w	sl, sl, #8
 80066fa:	dc6b      	bgt.n	80067d4 <__kernel_rem_pio2+0x5ec>
 80066fc:	46aa      	mov	sl, r5
 80066fe:	f1ba 0f01 	cmp.w	sl, #1
 8006702:	f1a4 0408 	sub.w	r4, r4, #8
 8006706:	f300 8085 	bgt.w	8006814 <__kernel_rem_pio2+0x62c>
 800670a:	9c06      	ldr	r4, [sp, #24]
 800670c:	2000      	movs	r0, #0
 800670e:	3408      	adds	r4, #8
 8006710:	2100      	movs	r1, #0
 8006712:	2d01      	cmp	r5, #1
 8006714:	f300 809d 	bgt.w	8006852 <__kernel_rem_pio2+0x66a>
 8006718:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800671c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006720:	f1bb 0f00 	cmp.w	fp, #0
 8006724:	f040 809b 	bne.w	800685e <__kernel_rem_pio2+0x676>
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	e9c3 5600 	strd	r5, r6, [r3]
 800672e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006732:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006736:	e7ca      	b.n	80066ce <__kernel_rem_pio2+0x4e6>
 8006738:	3408      	adds	r4, #8
 800673a:	ab4a      	add	r3, sp, #296	; 0x128
 800673c:	441c      	add	r4, r3
 800673e:	462e      	mov	r6, r5
 8006740:	2000      	movs	r0, #0
 8006742:	2100      	movs	r1, #0
 8006744:	2e00      	cmp	r6, #0
 8006746:	da36      	bge.n	80067b6 <__kernel_rem_pio2+0x5ce>
 8006748:	f1bb 0f00 	cmp.w	fp, #0
 800674c:	d039      	beq.n	80067c2 <__kernel_rem_pio2+0x5da>
 800674e:	4602      	mov	r2, r0
 8006750:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006754:	9c01      	ldr	r4, [sp, #4]
 8006756:	e9c4 2300 	strd	r2, r3, [r4]
 800675a:	4602      	mov	r2, r0
 800675c:	460b      	mov	r3, r1
 800675e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006762:	f7f9 fd91 	bl	8000288 <__aeabi_dsub>
 8006766:	ae4c      	add	r6, sp, #304	; 0x130
 8006768:	2401      	movs	r4, #1
 800676a:	42a5      	cmp	r5, r4
 800676c:	da2c      	bge.n	80067c8 <__kernel_rem_pio2+0x5e0>
 800676e:	f1bb 0f00 	cmp.w	fp, #0
 8006772:	d002      	beq.n	800677a <__kernel_rem_pio2+0x592>
 8006774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006778:	4619      	mov	r1, r3
 800677a:	9b01      	ldr	r3, [sp, #4]
 800677c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006780:	e7a5      	b.n	80066ce <__kernel_rem_pio2+0x4e6>
 8006782:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006786:	eb0d 0403 	add.w	r4, sp, r3
 800678a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800678e:	2000      	movs	r0, #0
 8006790:	2100      	movs	r1, #0
 8006792:	2d00      	cmp	r5, #0
 8006794:	da09      	bge.n	80067aa <__kernel_rem_pio2+0x5c2>
 8006796:	f1bb 0f00 	cmp.w	fp, #0
 800679a:	d002      	beq.n	80067a2 <__kernel_rem_pio2+0x5ba>
 800679c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067a0:	4619      	mov	r1, r3
 80067a2:	9b01      	ldr	r3, [sp, #4]
 80067a4:	e9c3 0100 	strd	r0, r1, [r3]
 80067a8:	e791      	b.n	80066ce <__kernel_rem_pio2+0x4e6>
 80067aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80067ae:	f7f9 fd6d 	bl	800028c <__adddf3>
 80067b2:	3d01      	subs	r5, #1
 80067b4:	e7ed      	b.n	8006792 <__kernel_rem_pio2+0x5aa>
 80067b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80067ba:	f7f9 fd67 	bl	800028c <__adddf3>
 80067be:	3e01      	subs	r6, #1
 80067c0:	e7c0      	b.n	8006744 <__kernel_rem_pio2+0x55c>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	e7c5      	b.n	8006754 <__kernel_rem_pio2+0x56c>
 80067c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80067cc:	f7f9 fd5e 	bl	800028c <__adddf3>
 80067d0:	3401      	adds	r4, #1
 80067d2:	e7ca      	b.n	800676a <__kernel_rem_pio2+0x582>
 80067d4:	e9da 8900 	ldrd	r8, r9, [sl]
 80067d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80067dc:	9b02      	ldr	r3, [sp, #8]
 80067de:	3b01      	subs	r3, #1
 80067e0:	9302      	str	r3, [sp, #8]
 80067e2:	4632      	mov	r2, r6
 80067e4:	463b      	mov	r3, r7
 80067e6:	4640      	mov	r0, r8
 80067e8:	4649      	mov	r1, r9
 80067ea:	f7f9 fd4f 	bl	800028c <__adddf3>
 80067ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4640      	mov	r0, r8
 80067f8:	4649      	mov	r1, r9
 80067fa:	f7f9 fd45 	bl	8000288 <__aeabi_dsub>
 80067fe:	4632      	mov	r2, r6
 8006800:	463b      	mov	r3, r7
 8006802:	f7f9 fd43 	bl	800028c <__adddf3>
 8006806:	ed9d 7b08 	vldr	d7, [sp, #32]
 800680a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800680e:	ed8a 7b00 	vstr	d7, [sl]
 8006812:	e76e      	b.n	80066f2 <__kernel_rem_pio2+0x50a>
 8006814:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006818:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800681c:	4640      	mov	r0, r8
 800681e:	4632      	mov	r2, r6
 8006820:	463b      	mov	r3, r7
 8006822:	4649      	mov	r1, r9
 8006824:	f7f9 fd32 	bl	800028c <__adddf3>
 8006828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4640      	mov	r0, r8
 8006832:	4649      	mov	r1, r9
 8006834:	f7f9 fd28 	bl	8000288 <__aeabi_dsub>
 8006838:	4632      	mov	r2, r6
 800683a:	463b      	mov	r3, r7
 800683c:	f7f9 fd26 	bl	800028c <__adddf3>
 8006840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006844:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006848:	ed84 7b00 	vstr	d7, [r4]
 800684c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006850:	e755      	b.n	80066fe <__kernel_rem_pio2+0x516>
 8006852:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006856:	f7f9 fd19 	bl	800028c <__adddf3>
 800685a:	3d01      	subs	r5, #1
 800685c:	e759      	b.n	8006712 <__kernel_rem_pio2+0x52a>
 800685e:	9b01      	ldr	r3, [sp, #4]
 8006860:	9a01      	ldr	r2, [sp, #4]
 8006862:	601d      	str	r5, [r3, #0]
 8006864:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006868:	605c      	str	r4, [r3, #4]
 800686a:	609f      	str	r7, [r3, #8]
 800686c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006870:	60d3      	str	r3, [r2, #12]
 8006872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006876:	6110      	str	r0, [r2, #16]
 8006878:	6153      	str	r3, [r2, #20]
 800687a:	e728      	b.n	80066ce <__kernel_rem_pio2+0x4e6>
 800687c:	41700000 	.word	0x41700000
 8006880:	3e700000 	.word	0x3e700000
 8006884:	00000000 	.word	0x00000000

08006888 <__kernel_sin>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	ed2d 8b04 	vpush	{d8-d9}
 8006890:	eeb0 8a41 	vmov.f32	s16, s2
 8006894:	eef0 8a61 	vmov.f32	s17, s3
 8006898:	ec55 4b10 	vmov	r4, r5, d0
 800689c:	b083      	sub	sp, #12
 800689e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80068a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80068a6:	9001      	str	r0, [sp, #4]
 80068a8:	da06      	bge.n	80068b8 <__kernel_sin+0x30>
 80068aa:	ee10 0a10 	vmov	r0, s0
 80068ae:	4629      	mov	r1, r5
 80068b0:	f7fa f952 	bl	8000b58 <__aeabi_d2iz>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d051      	beq.n	800695c <__kernel_sin+0xd4>
 80068b8:	4622      	mov	r2, r4
 80068ba:	462b      	mov	r3, r5
 80068bc:	4620      	mov	r0, r4
 80068be:	4629      	mov	r1, r5
 80068c0:	f7f9 fe9a 	bl	80005f8 <__aeabi_dmul>
 80068c4:	4682      	mov	sl, r0
 80068c6:	468b      	mov	fp, r1
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f7f9 fe92 	bl	80005f8 <__aeabi_dmul>
 80068d4:	a341      	add	r3, pc, #260	; (adr r3, 80069dc <__kernel_sin+0x154>)
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	4680      	mov	r8, r0
 80068dc:	4689      	mov	r9, r1
 80068de:	4650      	mov	r0, sl
 80068e0:	4659      	mov	r1, fp
 80068e2:	f7f9 fe89 	bl	80005f8 <__aeabi_dmul>
 80068e6:	a33f      	add	r3, pc, #252	; (adr r3, 80069e4 <__kernel_sin+0x15c>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f7f9 fccc 	bl	8000288 <__aeabi_dsub>
 80068f0:	4652      	mov	r2, sl
 80068f2:	465b      	mov	r3, fp
 80068f4:	f7f9 fe80 	bl	80005f8 <__aeabi_dmul>
 80068f8:	a33c      	add	r3, pc, #240	; (adr r3, 80069ec <__kernel_sin+0x164>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7f9 fcc5 	bl	800028c <__adddf3>
 8006902:	4652      	mov	r2, sl
 8006904:	465b      	mov	r3, fp
 8006906:	f7f9 fe77 	bl	80005f8 <__aeabi_dmul>
 800690a:	a33a      	add	r3, pc, #232	; (adr r3, 80069f4 <__kernel_sin+0x16c>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	f7f9 fcba 	bl	8000288 <__aeabi_dsub>
 8006914:	4652      	mov	r2, sl
 8006916:	465b      	mov	r3, fp
 8006918:	f7f9 fe6e 	bl	80005f8 <__aeabi_dmul>
 800691c:	a337      	add	r3, pc, #220	; (adr r3, 80069fc <__kernel_sin+0x174>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f7f9 fcb3 	bl	800028c <__adddf3>
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	4606      	mov	r6, r0
 800692a:	460f      	mov	r7, r1
 800692c:	b9eb      	cbnz	r3, 800696a <__kernel_sin+0xe2>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4650      	mov	r0, sl
 8006934:	4659      	mov	r1, fp
 8006936:	f7f9 fe5f 	bl	80005f8 <__aeabi_dmul>
 800693a:	a325      	add	r3, pc, #148	; (adr r3, 80069d0 <__kernel_sin+0x148>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f7f9 fca2 	bl	8000288 <__aeabi_dsub>
 8006944:	4642      	mov	r2, r8
 8006946:	464b      	mov	r3, r9
 8006948:	f7f9 fe56 	bl	80005f8 <__aeabi_dmul>
 800694c:	4602      	mov	r2, r0
 800694e:	460b      	mov	r3, r1
 8006950:	4620      	mov	r0, r4
 8006952:	4629      	mov	r1, r5
 8006954:	f7f9 fc9a 	bl	800028c <__adddf3>
 8006958:	4604      	mov	r4, r0
 800695a:	460d      	mov	r5, r1
 800695c:	ec45 4b10 	vmov	d0, r4, r5
 8006960:	b003      	add	sp, #12
 8006962:	ecbd 8b04 	vpop	{d8-d9}
 8006966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696a:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <__kernel_sin+0x150>)
 800696c:	ec51 0b18 	vmov	r0, r1, d8
 8006970:	2200      	movs	r2, #0
 8006972:	f7f9 fe41 	bl	80005f8 <__aeabi_dmul>
 8006976:	4632      	mov	r2, r6
 8006978:	ec41 0b19 	vmov	d9, r0, r1
 800697c:	463b      	mov	r3, r7
 800697e:	4640      	mov	r0, r8
 8006980:	4649      	mov	r1, r9
 8006982:	f7f9 fe39 	bl	80005f8 <__aeabi_dmul>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	ec51 0b19 	vmov	r0, r1, d9
 800698e:	f7f9 fc7b 	bl	8000288 <__aeabi_dsub>
 8006992:	4652      	mov	r2, sl
 8006994:	465b      	mov	r3, fp
 8006996:	f7f9 fe2f 	bl	80005f8 <__aeabi_dmul>
 800699a:	ec53 2b18 	vmov	r2, r3, d8
 800699e:	f7f9 fc73 	bl	8000288 <__aeabi_dsub>
 80069a2:	a30b      	add	r3, pc, #44	; (adr r3, 80069d0 <__kernel_sin+0x148>)
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	4606      	mov	r6, r0
 80069aa:	460f      	mov	r7, r1
 80069ac:	4640      	mov	r0, r8
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7f9 fe22 	bl	80005f8 <__aeabi_dmul>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7f9 fc66 	bl	800028c <__adddf3>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4620      	mov	r0, r4
 80069c6:	4629      	mov	r1, r5
 80069c8:	f7f9 fc5e 	bl	8000288 <__aeabi_dsub>
 80069cc:	e7c4      	b.n	8006958 <__kernel_sin+0xd0>
 80069ce:	bf00      	nop
 80069d0:	55555549 	.word	0x55555549
 80069d4:	3fc55555 	.word	0x3fc55555
 80069d8:	3fe00000 	.word	0x3fe00000
 80069dc:	5acfd57c 	.word	0x5acfd57c
 80069e0:	3de5d93a 	.word	0x3de5d93a
 80069e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80069e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80069ec:	57b1fe7d 	.word	0x57b1fe7d
 80069f0:	3ec71de3 	.word	0x3ec71de3
 80069f4:	19c161d5 	.word	0x19c161d5
 80069f8:	3f2a01a0 	.word	0x3f2a01a0
 80069fc:	1110f8a6 	.word	0x1110f8a6
 8006a00:	3f811111 	.word	0x3f811111

08006a04 <fabs>:
 8006a04:	ec51 0b10 	vmov	r0, r1, d0
 8006a08:	ee10 2a10 	vmov	r2, s0
 8006a0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a10:	ec43 2b10 	vmov	d0, r2, r3
 8006a14:	4770      	bx	lr
	...

08006a18 <floor>:
 8006a18:	ec51 0b10 	vmov	r0, r1, d0
 8006a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006a24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006a28:	2e13      	cmp	r6, #19
 8006a2a:	ee10 5a10 	vmov	r5, s0
 8006a2e:	ee10 8a10 	vmov	r8, s0
 8006a32:	460c      	mov	r4, r1
 8006a34:	dc32      	bgt.n	8006a9c <floor+0x84>
 8006a36:	2e00      	cmp	r6, #0
 8006a38:	da14      	bge.n	8006a64 <floor+0x4c>
 8006a3a:	a333      	add	r3, pc, #204	; (adr r3, 8006b08 <floor+0xf0>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fc24 	bl	800028c <__adddf3>
 8006a44:	2200      	movs	r2, #0
 8006a46:	2300      	movs	r3, #0
 8006a48:	f7fa f866 	bl	8000b18 <__aeabi_dcmpgt>
 8006a4c:	b138      	cbz	r0, 8006a5e <floor+0x46>
 8006a4e:	2c00      	cmp	r4, #0
 8006a50:	da57      	bge.n	8006b02 <floor+0xea>
 8006a52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006a56:	431d      	orrs	r5, r3
 8006a58:	d001      	beq.n	8006a5e <floor+0x46>
 8006a5a:	4c2d      	ldr	r4, [pc, #180]	; (8006b10 <floor+0xf8>)
 8006a5c:	2500      	movs	r5, #0
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4628      	mov	r0, r5
 8006a62:	e025      	b.n	8006ab0 <floor+0x98>
 8006a64:	4f2b      	ldr	r7, [pc, #172]	; (8006b14 <floor+0xfc>)
 8006a66:	4137      	asrs	r7, r6
 8006a68:	ea01 0307 	and.w	r3, r1, r7
 8006a6c:	4303      	orrs	r3, r0
 8006a6e:	d01f      	beq.n	8006ab0 <floor+0x98>
 8006a70:	a325      	add	r3, pc, #148	; (adr r3, 8006b08 <floor+0xf0>)
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f7f9 fc09 	bl	800028c <__adddf3>
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f7fa f84b 	bl	8000b18 <__aeabi_dcmpgt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d0eb      	beq.n	8006a5e <floor+0x46>
 8006a86:	2c00      	cmp	r4, #0
 8006a88:	bfbe      	ittt	lt
 8006a8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006a8e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006a92:	19a4      	addlt	r4, r4, r6
 8006a94:	ea24 0407 	bic.w	r4, r4, r7
 8006a98:	2500      	movs	r5, #0
 8006a9a:	e7e0      	b.n	8006a5e <floor+0x46>
 8006a9c:	2e33      	cmp	r6, #51	; 0x33
 8006a9e:	dd0b      	ble.n	8006ab8 <floor+0xa0>
 8006aa0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006aa4:	d104      	bne.n	8006ab0 <floor+0x98>
 8006aa6:	ee10 2a10 	vmov	r2, s0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	f7f9 fbee 	bl	800028c <__adddf3>
 8006ab0:	ec41 0b10 	vmov	d0, r0, r1
 8006ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006abc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac0:	fa23 f707 	lsr.w	r7, r3, r7
 8006ac4:	4207      	tst	r7, r0
 8006ac6:	d0f3      	beq.n	8006ab0 <floor+0x98>
 8006ac8:	a30f      	add	r3, pc, #60	; (adr r3, 8006b08 <floor+0xf0>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f7f9 fbdd 	bl	800028c <__adddf3>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f7fa f81f 	bl	8000b18 <__aeabi_dcmpgt>
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d0bf      	beq.n	8006a5e <floor+0x46>
 8006ade:	2c00      	cmp	r4, #0
 8006ae0:	da02      	bge.n	8006ae8 <floor+0xd0>
 8006ae2:	2e14      	cmp	r6, #20
 8006ae4:	d103      	bne.n	8006aee <floor+0xd6>
 8006ae6:	3401      	adds	r4, #1
 8006ae8:	ea25 0507 	bic.w	r5, r5, r7
 8006aec:	e7b7      	b.n	8006a5e <floor+0x46>
 8006aee:	2301      	movs	r3, #1
 8006af0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006af4:	fa03 f606 	lsl.w	r6, r3, r6
 8006af8:	4435      	add	r5, r6
 8006afa:	4545      	cmp	r5, r8
 8006afc:	bf38      	it	cc
 8006afe:	18e4      	addcc	r4, r4, r3
 8006b00:	e7f2      	b.n	8006ae8 <floor+0xd0>
 8006b02:	2500      	movs	r5, #0
 8006b04:	462c      	mov	r4, r5
 8006b06:	e7aa      	b.n	8006a5e <floor+0x46>
 8006b08:	8800759c 	.word	0x8800759c
 8006b0c:	7e37e43c 	.word	0x7e37e43c
 8006b10:	bff00000 	.word	0xbff00000
 8006b14:	000fffff 	.word	0x000fffff

08006b18 <scalbn>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	ec55 4b10 	vmov	r4, r5, d0
 8006b1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006b22:	4606      	mov	r6, r0
 8006b24:	462b      	mov	r3, r5
 8006b26:	b99a      	cbnz	r2, 8006b50 <scalbn+0x38>
 8006b28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006b2c:	4323      	orrs	r3, r4
 8006b2e:	d036      	beq.n	8006b9e <scalbn+0x86>
 8006b30:	4b39      	ldr	r3, [pc, #228]	; (8006c18 <scalbn+0x100>)
 8006b32:	4629      	mov	r1, r5
 8006b34:	ee10 0a10 	vmov	r0, s0
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f7f9 fd5d 	bl	80005f8 <__aeabi_dmul>
 8006b3e:	4b37      	ldr	r3, [pc, #220]	; (8006c1c <scalbn+0x104>)
 8006b40:	429e      	cmp	r6, r3
 8006b42:	4604      	mov	r4, r0
 8006b44:	460d      	mov	r5, r1
 8006b46:	da10      	bge.n	8006b6a <scalbn+0x52>
 8006b48:	a32b      	add	r3, pc, #172	; (adr r3, 8006bf8 <scalbn+0xe0>)
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	e03a      	b.n	8006bc6 <scalbn+0xae>
 8006b50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006b54:	428a      	cmp	r2, r1
 8006b56:	d10c      	bne.n	8006b72 <scalbn+0x5a>
 8006b58:	ee10 2a10 	vmov	r2, s0
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	4629      	mov	r1, r5
 8006b60:	f7f9 fb94 	bl	800028c <__adddf3>
 8006b64:	4604      	mov	r4, r0
 8006b66:	460d      	mov	r5, r1
 8006b68:	e019      	b.n	8006b9e <scalbn+0x86>
 8006b6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006b6e:	460b      	mov	r3, r1
 8006b70:	3a36      	subs	r2, #54	; 0x36
 8006b72:	4432      	add	r2, r6
 8006b74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006b78:	428a      	cmp	r2, r1
 8006b7a:	dd08      	ble.n	8006b8e <scalbn+0x76>
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	a120      	add	r1, pc, #128	; (adr r1, 8006c00 <scalbn+0xe8>)
 8006b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b84:	da1c      	bge.n	8006bc0 <scalbn+0xa8>
 8006b86:	a120      	add	r1, pc, #128	; (adr r1, 8006c08 <scalbn+0xf0>)
 8006b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b8c:	e018      	b.n	8006bc0 <scalbn+0xa8>
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	dd08      	ble.n	8006ba4 <scalbn+0x8c>
 8006b92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b9e:	ec45 4b10 	vmov	d0, r4, r5
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ba8:	da19      	bge.n	8006bde <scalbn+0xc6>
 8006baa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006bae:	429e      	cmp	r6, r3
 8006bb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006bb4:	dd0a      	ble.n	8006bcc <scalbn+0xb4>
 8006bb6:	a112      	add	r1, pc, #72	; (adr r1, 8006c00 <scalbn+0xe8>)
 8006bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e2      	bne.n	8006b86 <scalbn+0x6e>
 8006bc0:	a30f      	add	r3, pc, #60	; (adr r3, 8006c00 <scalbn+0xe8>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fd17 	bl	80005f8 <__aeabi_dmul>
 8006bca:	e7cb      	b.n	8006b64 <scalbn+0x4c>
 8006bcc:	a10a      	add	r1, pc, #40	; (adr r1, 8006bf8 <scalbn+0xe0>)
 8006bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0b8      	beq.n	8006b48 <scalbn+0x30>
 8006bd6:	a10e      	add	r1, pc, #56	; (adr r1, 8006c10 <scalbn+0xf8>)
 8006bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bdc:	e7b4      	b.n	8006b48 <scalbn+0x30>
 8006bde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006be2:	3236      	adds	r2, #54	; 0x36
 8006be4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006be8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006bec:	4620      	mov	r0, r4
 8006bee:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <scalbn+0x108>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	e7e8      	b.n	8006bc6 <scalbn+0xae>
 8006bf4:	f3af 8000 	nop.w
 8006bf8:	c2f8f359 	.word	0xc2f8f359
 8006bfc:	01a56e1f 	.word	0x01a56e1f
 8006c00:	8800759c 	.word	0x8800759c
 8006c04:	7e37e43c 	.word	0x7e37e43c
 8006c08:	8800759c 	.word	0x8800759c
 8006c0c:	fe37e43c 	.word	0xfe37e43c
 8006c10:	c2f8f359 	.word	0xc2f8f359
 8006c14:	81a56e1f 	.word	0x81a56e1f
 8006c18:	43500000 	.word	0x43500000
 8006c1c:	ffff3cb0 	.word	0xffff3cb0
 8006c20:	3c900000 	.word	0x3c900000

08006c24 <__errno>:
 8006c24:	4b01      	ldr	r3, [pc, #4]	; (8006c2c <__errno+0x8>)
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	2000000c 	.word	0x2000000c

08006c30 <__libc_init_array>:
 8006c30:	b570      	push	{r4, r5, r6, lr}
 8006c32:	4d0d      	ldr	r5, [pc, #52]	; (8006c68 <__libc_init_array+0x38>)
 8006c34:	4c0d      	ldr	r4, [pc, #52]	; (8006c6c <__libc_init_array+0x3c>)
 8006c36:	1b64      	subs	r4, r4, r5
 8006c38:	10a4      	asrs	r4, r4, #2
 8006c3a:	2600      	movs	r6, #0
 8006c3c:	42a6      	cmp	r6, r4
 8006c3e:	d109      	bne.n	8006c54 <__libc_init_array+0x24>
 8006c40:	4d0b      	ldr	r5, [pc, #44]	; (8006c70 <__libc_init_array+0x40>)
 8006c42:	4c0c      	ldr	r4, [pc, #48]	; (8006c74 <__libc_init_array+0x44>)
 8006c44:	f002 fdc2 	bl	80097cc <_init>
 8006c48:	1b64      	subs	r4, r4, r5
 8006c4a:	10a4      	asrs	r4, r4, #2
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	42a6      	cmp	r6, r4
 8006c50:	d105      	bne.n	8006c5e <__libc_init_array+0x2e>
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c58:	4798      	blx	r3
 8006c5a:	3601      	adds	r6, #1
 8006c5c:	e7ee      	b.n	8006c3c <__libc_init_array+0xc>
 8006c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c62:	4798      	blx	r3
 8006c64:	3601      	adds	r6, #1
 8006c66:	e7f2      	b.n	8006c4e <__libc_init_array+0x1e>
 8006c68:	08009eac 	.word	0x08009eac
 8006c6c:	08009eac 	.word	0x08009eac
 8006c70:	08009eac 	.word	0x08009eac
 8006c74:	08009eb0 	.word	0x08009eb0

08006c78 <memset>:
 8006c78:	4402      	add	r2, r0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d100      	bne.n	8006c82 <memset+0xa>
 8006c80:	4770      	bx	lr
 8006c82:	f803 1b01 	strb.w	r1, [r3], #1
 8006c86:	e7f9      	b.n	8006c7c <memset+0x4>

08006c88 <__cvt>:
 8006c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c8c:	ec55 4b10 	vmov	r4, r5, d0
 8006c90:	2d00      	cmp	r5, #0
 8006c92:	460e      	mov	r6, r1
 8006c94:	4619      	mov	r1, r3
 8006c96:	462b      	mov	r3, r5
 8006c98:	bfbb      	ittet	lt
 8006c9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c9e:	461d      	movlt	r5, r3
 8006ca0:	2300      	movge	r3, #0
 8006ca2:	232d      	movlt	r3, #45	; 0x2d
 8006ca4:	700b      	strb	r3, [r1, #0]
 8006ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cac:	4691      	mov	r9, r2
 8006cae:	f023 0820 	bic.w	r8, r3, #32
 8006cb2:	bfbc      	itt	lt
 8006cb4:	4622      	movlt	r2, r4
 8006cb6:	4614      	movlt	r4, r2
 8006cb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cbc:	d005      	beq.n	8006cca <__cvt+0x42>
 8006cbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cc2:	d100      	bne.n	8006cc6 <__cvt+0x3e>
 8006cc4:	3601      	adds	r6, #1
 8006cc6:	2102      	movs	r1, #2
 8006cc8:	e000      	b.n	8006ccc <__cvt+0x44>
 8006cca:	2103      	movs	r1, #3
 8006ccc:	ab03      	add	r3, sp, #12
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	ab02      	add	r3, sp, #8
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	ec45 4b10 	vmov	d0, r4, r5
 8006cd8:	4653      	mov	r3, sl
 8006cda:	4632      	mov	r2, r6
 8006cdc:	f000 fe18 	bl	8007910 <_dtoa_r>
 8006ce0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ce4:	4607      	mov	r7, r0
 8006ce6:	d102      	bne.n	8006cee <__cvt+0x66>
 8006ce8:	f019 0f01 	tst.w	r9, #1
 8006cec:	d022      	beq.n	8006d34 <__cvt+0xac>
 8006cee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cf2:	eb07 0906 	add.w	r9, r7, r6
 8006cf6:	d110      	bne.n	8006d1a <__cvt+0x92>
 8006cf8:	783b      	ldrb	r3, [r7, #0]
 8006cfa:	2b30      	cmp	r3, #48	; 0x30
 8006cfc:	d10a      	bne.n	8006d14 <__cvt+0x8c>
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2300      	movs	r3, #0
 8006d02:	4620      	mov	r0, r4
 8006d04:	4629      	mov	r1, r5
 8006d06:	f7f9 fedf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d0a:	b918      	cbnz	r0, 8006d14 <__cvt+0x8c>
 8006d0c:	f1c6 0601 	rsb	r6, r6, #1
 8006d10:	f8ca 6000 	str.w	r6, [sl]
 8006d14:	f8da 3000 	ldr.w	r3, [sl]
 8006d18:	4499      	add	r9, r3
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d26:	b108      	cbz	r0, 8006d2c <__cvt+0xa4>
 8006d28:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d2c:	2230      	movs	r2, #48	; 0x30
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	454b      	cmp	r3, r9
 8006d32:	d307      	bcc.n	8006d44 <__cvt+0xbc>
 8006d34:	9b03      	ldr	r3, [sp, #12]
 8006d36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d38:	1bdb      	subs	r3, r3, r7
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	b004      	add	sp, #16
 8006d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	9103      	str	r1, [sp, #12]
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	e7f0      	b.n	8006d2e <__cvt+0xa6>

08006d4c <__exponent>:
 8006d4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2900      	cmp	r1, #0
 8006d52:	bfb8      	it	lt
 8006d54:	4249      	neglt	r1, r1
 8006d56:	f803 2b02 	strb.w	r2, [r3], #2
 8006d5a:	bfb4      	ite	lt
 8006d5c:	222d      	movlt	r2, #45	; 0x2d
 8006d5e:	222b      	movge	r2, #43	; 0x2b
 8006d60:	2909      	cmp	r1, #9
 8006d62:	7042      	strb	r2, [r0, #1]
 8006d64:	dd2a      	ble.n	8006dbc <__exponent+0x70>
 8006d66:	f10d 0407 	add.w	r4, sp, #7
 8006d6a:	46a4      	mov	ip, r4
 8006d6c:	270a      	movs	r7, #10
 8006d6e:	46a6      	mov	lr, r4
 8006d70:	460a      	mov	r2, r1
 8006d72:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d76:	fb07 1516 	mls	r5, r7, r6, r1
 8006d7a:	3530      	adds	r5, #48	; 0x30
 8006d7c:	2a63      	cmp	r2, #99	; 0x63
 8006d7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d86:	4631      	mov	r1, r6
 8006d88:	dcf1      	bgt.n	8006d6e <__exponent+0x22>
 8006d8a:	3130      	adds	r1, #48	; 0x30
 8006d8c:	f1ae 0502 	sub.w	r5, lr, #2
 8006d90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d94:	1c44      	adds	r4, r0, #1
 8006d96:	4629      	mov	r1, r5
 8006d98:	4561      	cmp	r1, ip
 8006d9a:	d30a      	bcc.n	8006db2 <__exponent+0x66>
 8006d9c:	f10d 0209 	add.w	r2, sp, #9
 8006da0:	eba2 020e 	sub.w	r2, r2, lr
 8006da4:	4565      	cmp	r5, ip
 8006da6:	bf88      	it	hi
 8006da8:	2200      	movhi	r2, #0
 8006daa:	4413      	add	r3, r2
 8006dac:	1a18      	subs	r0, r3, r0
 8006dae:	b003      	add	sp, #12
 8006db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006db6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dba:	e7ed      	b.n	8006d98 <__exponent+0x4c>
 8006dbc:	2330      	movs	r3, #48	; 0x30
 8006dbe:	3130      	adds	r1, #48	; 0x30
 8006dc0:	7083      	strb	r3, [r0, #2]
 8006dc2:	70c1      	strb	r1, [r0, #3]
 8006dc4:	1d03      	adds	r3, r0, #4
 8006dc6:	e7f1      	b.n	8006dac <__exponent+0x60>

08006dc8 <_printf_float>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	ed2d 8b02 	vpush	{d8}
 8006dd0:	b08d      	sub	sp, #52	; 0x34
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006dd8:	4616      	mov	r6, r2
 8006dda:	461f      	mov	r7, r3
 8006ddc:	4605      	mov	r5, r0
 8006dde:	f001 fd3d 	bl	800885c <_localeconv_r>
 8006de2:	f8d0 a000 	ldr.w	sl, [r0]
 8006de6:	4650      	mov	r0, sl
 8006de8:	f7f9 f9f2 	bl	80001d0 <strlen>
 8006dec:	2300      	movs	r3, #0
 8006dee:	930a      	str	r3, [sp, #40]	; 0x28
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	9305      	str	r3, [sp, #20]
 8006df4:	f8d8 3000 	ldr.w	r3, [r8]
 8006df8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006dfc:	3307      	adds	r3, #7
 8006dfe:	f023 0307 	bic.w	r3, r3, #7
 8006e02:	f103 0208 	add.w	r2, r3, #8
 8006e06:	f8c8 2000 	str.w	r2, [r8]
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e1a:	9307      	str	r3, [sp, #28]
 8006e1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e20:	ee08 0a10 	vmov	s16, r0
 8006e24:	4b9f      	ldr	r3, [pc, #636]	; (80070a4 <_printf_float+0x2dc>)
 8006e26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2e:	f7f9 fe7d 	bl	8000b2c <__aeabi_dcmpun>
 8006e32:	bb88      	cbnz	r0, 8006e98 <_printf_float+0xd0>
 8006e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e38:	4b9a      	ldr	r3, [pc, #616]	; (80070a4 <_printf_float+0x2dc>)
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3e:	f7f9 fe57 	bl	8000af0 <__aeabi_dcmple>
 8006e42:	bb48      	cbnz	r0, 8006e98 <_printf_float+0xd0>
 8006e44:	2200      	movs	r2, #0
 8006e46:	2300      	movs	r3, #0
 8006e48:	4640      	mov	r0, r8
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	f7f9 fe46 	bl	8000adc <__aeabi_dcmplt>
 8006e50:	b110      	cbz	r0, 8006e58 <_printf_float+0x90>
 8006e52:	232d      	movs	r3, #45	; 0x2d
 8006e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e58:	4b93      	ldr	r3, [pc, #588]	; (80070a8 <_printf_float+0x2e0>)
 8006e5a:	4894      	ldr	r0, [pc, #592]	; (80070ac <_printf_float+0x2e4>)
 8006e5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e60:	bf94      	ite	ls
 8006e62:	4698      	movls	r8, r3
 8006e64:	4680      	movhi	r8, r0
 8006e66:	2303      	movs	r3, #3
 8006e68:	6123      	str	r3, [r4, #16]
 8006e6a:	9b05      	ldr	r3, [sp, #20]
 8006e6c:	f023 0204 	bic.w	r2, r3, #4
 8006e70:	6022      	str	r2, [r4, #0]
 8006e72:	f04f 0900 	mov.w	r9, #0
 8006e76:	9700      	str	r7, [sp, #0]
 8006e78:	4633      	mov	r3, r6
 8006e7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f000 f9d8 	bl	8007234 <_printf_common>
 8006e84:	3001      	adds	r0, #1
 8006e86:	f040 8090 	bne.w	8006faa <_printf_float+0x1e2>
 8006e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8e:	b00d      	add	sp, #52	; 0x34
 8006e90:	ecbd 8b02 	vpop	{d8}
 8006e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e98:	4642      	mov	r2, r8
 8006e9a:	464b      	mov	r3, r9
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	f7f9 fe44 	bl	8000b2c <__aeabi_dcmpun>
 8006ea4:	b140      	cbz	r0, 8006eb8 <_printf_float+0xf0>
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	bfbc      	itt	lt
 8006eac:	232d      	movlt	r3, #45	; 0x2d
 8006eae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006eb2:	487f      	ldr	r0, [pc, #508]	; (80070b0 <_printf_float+0x2e8>)
 8006eb4:	4b7f      	ldr	r3, [pc, #508]	; (80070b4 <_printf_float+0x2ec>)
 8006eb6:	e7d1      	b.n	8006e5c <_printf_float+0x94>
 8006eb8:	6863      	ldr	r3, [r4, #4]
 8006eba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ebe:	9206      	str	r2, [sp, #24]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	d13f      	bne.n	8006f44 <_printf_float+0x17c>
 8006ec4:	2306      	movs	r3, #6
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	9b05      	ldr	r3, [sp, #20]
 8006eca:	6861      	ldr	r1, [r4, #4]
 8006ecc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9303      	str	r3, [sp, #12]
 8006ed4:	ab0a      	add	r3, sp, #40	; 0x28
 8006ed6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006eda:	ab09      	add	r3, sp, #36	; 0x24
 8006edc:	ec49 8b10 	vmov	d0, r8, r9
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	6022      	str	r2, [r4, #0]
 8006ee4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ee8:	4628      	mov	r0, r5
 8006eea:	f7ff fecd 	bl	8006c88 <__cvt>
 8006eee:	9b06      	ldr	r3, [sp, #24]
 8006ef0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ef2:	2b47      	cmp	r3, #71	; 0x47
 8006ef4:	4680      	mov	r8, r0
 8006ef6:	d108      	bne.n	8006f0a <_printf_float+0x142>
 8006ef8:	1cc8      	adds	r0, r1, #3
 8006efa:	db02      	blt.n	8006f02 <_printf_float+0x13a>
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	4299      	cmp	r1, r3
 8006f00:	dd41      	ble.n	8006f86 <_printf_float+0x1be>
 8006f02:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f06:	fa5f fb8b 	uxtb.w	fp, fp
 8006f0a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f0e:	d820      	bhi.n	8006f52 <_printf_float+0x18a>
 8006f10:	3901      	subs	r1, #1
 8006f12:	465a      	mov	r2, fp
 8006f14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f18:	9109      	str	r1, [sp, #36]	; 0x24
 8006f1a:	f7ff ff17 	bl	8006d4c <__exponent>
 8006f1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f20:	1813      	adds	r3, r2, r0
 8006f22:	2a01      	cmp	r2, #1
 8006f24:	4681      	mov	r9, r0
 8006f26:	6123      	str	r3, [r4, #16]
 8006f28:	dc02      	bgt.n	8006f30 <_printf_float+0x168>
 8006f2a:	6822      	ldr	r2, [r4, #0]
 8006f2c:	07d2      	lsls	r2, r2, #31
 8006f2e:	d501      	bpl.n	8006f34 <_printf_float+0x16c>
 8006f30:	3301      	adds	r3, #1
 8006f32:	6123      	str	r3, [r4, #16]
 8006f34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d09c      	beq.n	8006e76 <_printf_float+0xae>
 8006f3c:	232d      	movs	r3, #45	; 0x2d
 8006f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f42:	e798      	b.n	8006e76 <_printf_float+0xae>
 8006f44:	9a06      	ldr	r2, [sp, #24]
 8006f46:	2a47      	cmp	r2, #71	; 0x47
 8006f48:	d1be      	bne.n	8006ec8 <_printf_float+0x100>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1bc      	bne.n	8006ec8 <_printf_float+0x100>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e7b9      	b.n	8006ec6 <_printf_float+0xfe>
 8006f52:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f56:	d118      	bne.n	8006f8a <_printf_float+0x1c2>
 8006f58:	2900      	cmp	r1, #0
 8006f5a:	6863      	ldr	r3, [r4, #4]
 8006f5c:	dd0b      	ble.n	8006f76 <_printf_float+0x1ae>
 8006f5e:	6121      	str	r1, [r4, #16]
 8006f60:	b913      	cbnz	r3, 8006f68 <_printf_float+0x1a0>
 8006f62:	6822      	ldr	r2, [r4, #0]
 8006f64:	07d0      	lsls	r0, r2, #31
 8006f66:	d502      	bpl.n	8006f6e <_printf_float+0x1a6>
 8006f68:	3301      	adds	r3, #1
 8006f6a:	440b      	add	r3, r1
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f70:	f04f 0900 	mov.w	r9, #0
 8006f74:	e7de      	b.n	8006f34 <_printf_float+0x16c>
 8006f76:	b913      	cbnz	r3, 8006f7e <_printf_float+0x1b6>
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	07d2      	lsls	r2, r2, #31
 8006f7c:	d501      	bpl.n	8006f82 <_printf_float+0x1ba>
 8006f7e:	3302      	adds	r3, #2
 8006f80:	e7f4      	b.n	8006f6c <_printf_float+0x1a4>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e7f2      	b.n	8006f6c <_printf_float+0x1a4>
 8006f86:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f8c:	4299      	cmp	r1, r3
 8006f8e:	db05      	blt.n	8006f9c <_printf_float+0x1d4>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	6121      	str	r1, [r4, #16]
 8006f94:	07d8      	lsls	r0, r3, #31
 8006f96:	d5ea      	bpl.n	8006f6e <_printf_float+0x1a6>
 8006f98:	1c4b      	adds	r3, r1, #1
 8006f9a:	e7e7      	b.n	8006f6c <_printf_float+0x1a4>
 8006f9c:	2900      	cmp	r1, #0
 8006f9e:	bfd4      	ite	le
 8006fa0:	f1c1 0202 	rsble	r2, r1, #2
 8006fa4:	2201      	movgt	r2, #1
 8006fa6:	4413      	add	r3, r2
 8006fa8:	e7e0      	b.n	8006f6c <_printf_float+0x1a4>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	055a      	lsls	r2, r3, #21
 8006fae:	d407      	bmi.n	8006fc0 <_printf_float+0x1f8>
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	4642      	mov	r2, r8
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d12c      	bne.n	8007018 <_printf_float+0x250>
 8006fbe:	e764      	b.n	8006e8a <_printf_float+0xc2>
 8006fc0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fc4:	f240 80e0 	bls.w	8007188 <_printf_float+0x3c0>
 8006fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f7f9 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d034      	beq.n	8007042 <_printf_float+0x27a>
 8006fd8:	4a37      	ldr	r2, [pc, #220]	; (80070b8 <_printf_float+0x2f0>)
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4631      	mov	r1, r6
 8006fde:	4628      	mov	r0, r5
 8006fe0:	47b8      	blx	r7
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	f43f af51 	beq.w	8006e8a <_printf_float+0xc2>
 8006fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fec:	429a      	cmp	r2, r3
 8006fee:	db02      	blt.n	8006ff6 <_printf_float+0x22e>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	07d8      	lsls	r0, r3, #31
 8006ff4:	d510      	bpl.n	8007018 <_printf_float+0x250>
 8006ff6:	ee18 3a10 	vmov	r3, s16
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	f43f af41 	beq.w	8006e8a <_printf_float+0xc2>
 8007008:	f04f 0800 	mov.w	r8, #0
 800700c:	f104 091a 	add.w	r9, r4, #26
 8007010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007012:	3b01      	subs	r3, #1
 8007014:	4543      	cmp	r3, r8
 8007016:	dc09      	bgt.n	800702c <_printf_float+0x264>
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	079b      	lsls	r3, r3, #30
 800701c:	f100 8105 	bmi.w	800722a <_printf_float+0x462>
 8007020:	68e0      	ldr	r0, [r4, #12]
 8007022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007024:	4298      	cmp	r0, r3
 8007026:	bfb8      	it	lt
 8007028:	4618      	movlt	r0, r3
 800702a:	e730      	b.n	8006e8e <_printf_float+0xc6>
 800702c:	2301      	movs	r3, #1
 800702e:	464a      	mov	r2, r9
 8007030:	4631      	mov	r1, r6
 8007032:	4628      	mov	r0, r5
 8007034:	47b8      	blx	r7
 8007036:	3001      	adds	r0, #1
 8007038:	f43f af27 	beq.w	8006e8a <_printf_float+0xc2>
 800703c:	f108 0801 	add.w	r8, r8, #1
 8007040:	e7e6      	b.n	8007010 <_printf_float+0x248>
 8007042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007044:	2b00      	cmp	r3, #0
 8007046:	dc39      	bgt.n	80070bc <_printf_float+0x2f4>
 8007048:	4a1b      	ldr	r2, [pc, #108]	; (80070b8 <_printf_float+0x2f0>)
 800704a:	2301      	movs	r3, #1
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	47b8      	blx	r7
 8007052:	3001      	adds	r0, #1
 8007054:	f43f af19 	beq.w	8006e8a <_printf_float+0xc2>
 8007058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800705c:	4313      	orrs	r3, r2
 800705e:	d102      	bne.n	8007066 <_printf_float+0x29e>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	07d9      	lsls	r1, r3, #31
 8007064:	d5d8      	bpl.n	8007018 <_printf_float+0x250>
 8007066:	ee18 3a10 	vmov	r3, s16
 800706a:	4652      	mov	r2, sl
 800706c:	4631      	mov	r1, r6
 800706e:	4628      	mov	r0, r5
 8007070:	47b8      	blx	r7
 8007072:	3001      	adds	r0, #1
 8007074:	f43f af09 	beq.w	8006e8a <_printf_float+0xc2>
 8007078:	f04f 0900 	mov.w	r9, #0
 800707c:	f104 0a1a 	add.w	sl, r4, #26
 8007080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007082:	425b      	negs	r3, r3
 8007084:	454b      	cmp	r3, r9
 8007086:	dc01      	bgt.n	800708c <_printf_float+0x2c4>
 8007088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800708a:	e792      	b.n	8006fb2 <_printf_float+0x1ea>
 800708c:	2301      	movs	r3, #1
 800708e:	4652      	mov	r2, sl
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	f43f aef7 	beq.w	8006e8a <_printf_float+0xc2>
 800709c:	f109 0901 	add.w	r9, r9, #1
 80070a0:	e7ee      	b.n	8007080 <_printf_float+0x2b8>
 80070a2:	bf00      	nop
 80070a4:	7fefffff 	.word	0x7fefffff
 80070a8:	08009ad4 	.word	0x08009ad4
 80070ac:	08009ad8 	.word	0x08009ad8
 80070b0:	08009ae0 	.word	0x08009ae0
 80070b4:	08009adc 	.word	0x08009adc
 80070b8:	08009ae4 	.word	0x08009ae4
 80070bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070c0:	429a      	cmp	r2, r3
 80070c2:	bfa8      	it	ge
 80070c4:	461a      	movge	r2, r3
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	4691      	mov	r9, r2
 80070ca:	dc37      	bgt.n	800713c <_printf_float+0x374>
 80070cc:	f04f 0b00 	mov.w	fp, #0
 80070d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070d4:	f104 021a 	add.w	r2, r4, #26
 80070d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070da:	9305      	str	r3, [sp, #20]
 80070dc:	eba3 0309 	sub.w	r3, r3, r9
 80070e0:	455b      	cmp	r3, fp
 80070e2:	dc33      	bgt.n	800714c <_printf_float+0x384>
 80070e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e8:	429a      	cmp	r2, r3
 80070ea:	db3b      	blt.n	8007164 <_printf_float+0x39c>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	07da      	lsls	r2, r3, #31
 80070f0:	d438      	bmi.n	8007164 <_printf_float+0x39c>
 80070f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f4:	9a05      	ldr	r2, [sp, #20]
 80070f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070f8:	1a9a      	subs	r2, r3, r2
 80070fa:	eba3 0901 	sub.w	r9, r3, r1
 80070fe:	4591      	cmp	r9, r2
 8007100:	bfa8      	it	ge
 8007102:	4691      	movge	r9, r2
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	dc35      	bgt.n	8007176 <_printf_float+0x3ae>
 800710a:	f04f 0800 	mov.w	r8, #0
 800710e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007112:	f104 0a1a 	add.w	sl, r4, #26
 8007116:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800711a:	1a9b      	subs	r3, r3, r2
 800711c:	eba3 0309 	sub.w	r3, r3, r9
 8007120:	4543      	cmp	r3, r8
 8007122:	f77f af79 	ble.w	8007018 <_printf_float+0x250>
 8007126:	2301      	movs	r3, #1
 8007128:	4652      	mov	r2, sl
 800712a:	4631      	mov	r1, r6
 800712c:	4628      	mov	r0, r5
 800712e:	47b8      	blx	r7
 8007130:	3001      	adds	r0, #1
 8007132:	f43f aeaa 	beq.w	8006e8a <_printf_float+0xc2>
 8007136:	f108 0801 	add.w	r8, r8, #1
 800713a:	e7ec      	b.n	8007116 <_printf_float+0x34e>
 800713c:	4613      	mov	r3, r2
 800713e:	4631      	mov	r1, r6
 8007140:	4642      	mov	r2, r8
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	d1c0      	bne.n	80070cc <_printf_float+0x304>
 800714a:	e69e      	b.n	8006e8a <_printf_float+0xc2>
 800714c:	2301      	movs	r3, #1
 800714e:	4631      	mov	r1, r6
 8007150:	4628      	mov	r0, r5
 8007152:	9205      	str	r2, [sp, #20]
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f ae97 	beq.w	8006e8a <_printf_float+0xc2>
 800715c:	9a05      	ldr	r2, [sp, #20]
 800715e:	f10b 0b01 	add.w	fp, fp, #1
 8007162:	e7b9      	b.n	80070d8 <_printf_float+0x310>
 8007164:	ee18 3a10 	vmov	r3, s16
 8007168:	4652      	mov	r2, sl
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	47b8      	blx	r7
 8007170:	3001      	adds	r0, #1
 8007172:	d1be      	bne.n	80070f2 <_printf_float+0x32a>
 8007174:	e689      	b.n	8006e8a <_printf_float+0xc2>
 8007176:	9a05      	ldr	r2, [sp, #20]
 8007178:	464b      	mov	r3, r9
 800717a:	4442      	add	r2, r8
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	d1c1      	bne.n	800710a <_printf_float+0x342>
 8007186:	e680      	b.n	8006e8a <_printf_float+0xc2>
 8007188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800718a:	2a01      	cmp	r2, #1
 800718c:	dc01      	bgt.n	8007192 <_printf_float+0x3ca>
 800718e:	07db      	lsls	r3, r3, #31
 8007190:	d538      	bpl.n	8007204 <_printf_float+0x43c>
 8007192:	2301      	movs	r3, #1
 8007194:	4642      	mov	r2, r8
 8007196:	4631      	mov	r1, r6
 8007198:	4628      	mov	r0, r5
 800719a:	47b8      	blx	r7
 800719c:	3001      	adds	r0, #1
 800719e:	f43f ae74 	beq.w	8006e8a <_printf_float+0xc2>
 80071a2:	ee18 3a10 	vmov	r3, s16
 80071a6:	4652      	mov	r2, sl
 80071a8:	4631      	mov	r1, r6
 80071aa:	4628      	mov	r0, r5
 80071ac:	47b8      	blx	r7
 80071ae:	3001      	adds	r0, #1
 80071b0:	f43f ae6b 	beq.w	8006e8a <_printf_float+0xc2>
 80071b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071b8:	2200      	movs	r2, #0
 80071ba:	2300      	movs	r3, #0
 80071bc:	f7f9 fc84 	bl	8000ac8 <__aeabi_dcmpeq>
 80071c0:	b9d8      	cbnz	r0, 80071fa <_printf_float+0x432>
 80071c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c4:	f108 0201 	add.w	r2, r8, #1
 80071c8:	3b01      	subs	r3, #1
 80071ca:	4631      	mov	r1, r6
 80071cc:	4628      	mov	r0, r5
 80071ce:	47b8      	blx	r7
 80071d0:	3001      	adds	r0, #1
 80071d2:	d10e      	bne.n	80071f2 <_printf_float+0x42a>
 80071d4:	e659      	b.n	8006e8a <_printf_float+0xc2>
 80071d6:	2301      	movs	r3, #1
 80071d8:	4652      	mov	r2, sl
 80071da:	4631      	mov	r1, r6
 80071dc:	4628      	mov	r0, r5
 80071de:	47b8      	blx	r7
 80071e0:	3001      	adds	r0, #1
 80071e2:	f43f ae52 	beq.w	8006e8a <_printf_float+0xc2>
 80071e6:	f108 0801 	add.w	r8, r8, #1
 80071ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ec:	3b01      	subs	r3, #1
 80071ee:	4543      	cmp	r3, r8
 80071f0:	dcf1      	bgt.n	80071d6 <_printf_float+0x40e>
 80071f2:	464b      	mov	r3, r9
 80071f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071f8:	e6dc      	b.n	8006fb4 <_printf_float+0x1ec>
 80071fa:	f04f 0800 	mov.w	r8, #0
 80071fe:	f104 0a1a 	add.w	sl, r4, #26
 8007202:	e7f2      	b.n	80071ea <_printf_float+0x422>
 8007204:	2301      	movs	r3, #1
 8007206:	4642      	mov	r2, r8
 8007208:	e7df      	b.n	80071ca <_printf_float+0x402>
 800720a:	2301      	movs	r3, #1
 800720c:	464a      	mov	r2, r9
 800720e:	4631      	mov	r1, r6
 8007210:	4628      	mov	r0, r5
 8007212:	47b8      	blx	r7
 8007214:	3001      	adds	r0, #1
 8007216:	f43f ae38 	beq.w	8006e8a <_printf_float+0xc2>
 800721a:	f108 0801 	add.w	r8, r8, #1
 800721e:	68e3      	ldr	r3, [r4, #12]
 8007220:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007222:	1a5b      	subs	r3, r3, r1
 8007224:	4543      	cmp	r3, r8
 8007226:	dcf0      	bgt.n	800720a <_printf_float+0x442>
 8007228:	e6fa      	b.n	8007020 <_printf_float+0x258>
 800722a:	f04f 0800 	mov.w	r8, #0
 800722e:	f104 0919 	add.w	r9, r4, #25
 8007232:	e7f4      	b.n	800721e <_printf_float+0x456>

08007234 <_printf_common>:
 8007234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007238:	4616      	mov	r6, r2
 800723a:	4699      	mov	r9, r3
 800723c:	688a      	ldr	r2, [r1, #8]
 800723e:	690b      	ldr	r3, [r1, #16]
 8007240:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007244:	4293      	cmp	r3, r2
 8007246:	bfb8      	it	lt
 8007248:	4613      	movlt	r3, r2
 800724a:	6033      	str	r3, [r6, #0]
 800724c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007250:	4607      	mov	r7, r0
 8007252:	460c      	mov	r4, r1
 8007254:	b10a      	cbz	r2, 800725a <_printf_common+0x26>
 8007256:	3301      	adds	r3, #1
 8007258:	6033      	str	r3, [r6, #0]
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	0699      	lsls	r1, r3, #26
 800725e:	bf42      	ittt	mi
 8007260:	6833      	ldrmi	r3, [r6, #0]
 8007262:	3302      	addmi	r3, #2
 8007264:	6033      	strmi	r3, [r6, #0]
 8007266:	6825      	ldr	r5, [r4, #0]
 8007268:	f015 0506 	ands.w	r5, r5, #6
 800726c:	d106      	bne.n	800727c <_printf_common+0x48>
 800726e:	f104 0a19 	add.w	sl, r4, #25
 8007272:	68e3      	ldr	r3, [r4, #12]
 8007274:	6832      	ldr	r2, [r6, #0]
 8007276:	1a9b      	subs	r3, r3, r2
 8007278:	42ab      	cmp	r3, r5
 800727a:	dc26      	bgt.n	80072ca <_printf_common+0x96>
 800727c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007280:	1e13      	subs	r3, r2, #0
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	bf18      	it	ne
 8007286:	2301      	movne	r3, #1
 8007288:	0692      	lsls	r2, r2, #26
 800728a:	d42b      	bmi.n	80072e4 <_printf_common+0xb0>
 800728c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007290:	4649      	mov	r1, r9
 8007292:	4638      	mov	r0, r7
 8007294:	47c0      	blx	r8
 8007296:	3001      	adds	r0, #1
 8007298:	d01e      	beq.n	80072d8 <_printf_common+0xa4>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	68e5      	ldr	r5, [r4, #12]
 800729e:	6832      	ldr	r2, [r6, #0]
 80072a0:	f003 0306 	and.w	r3, r3, #6
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	bf08      	it	eq
 80072a8:	1aad      	subeq	r5, r5, r2
 80072aa:	68a3      	ldr	r3, [r4, #8]
 80072ac:	6922      	ldr	r2, [r4, #16]
 80072ae:	bf0c      	ite	eq
 80072b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072b4:	2500      	movne	r5, #0
 80072b6:	4293      	cmp	r3, r2
 80072b8:	bfc4      	itt	gt
 80072ba:	1a9b      	subgt	r3, r3, r2
 80072bc:	18ed      	addgt	r5, r5, r3
 80072be:	2600      	movs	r6, #0
 80072c0:	341a      	adds	r4, #26
 80072c2:	42b5      	cmp	r5, r6
 80072c4:	d11a      	bne.n	80072fc <_printf_common+0xc8>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e008      	b.n	80072dc <_printf_common+0xa8>
 80072ca:	2301      	movs	r3, #1
 80072cc:	4652      	mov	r2, sl
 80072ce:	4649      	mov	r1, r9
 80072d0:	4638      	mov	r0, r7
 80072d2:	47c0      	blx	r8
 80072d4:	3001      	adds	r0, #1
 80072d6:	d103      	bne.n	80072e0 <_printf_common+0xac>
 80072d8:	f04f 30ff 	mov.w	r0, #4294967295
 80072dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072e0:	3501      	adds	r5, #1
 80072e2:	e7c6      	b.n	8007272 <_printf_common+0x3e>
 80072e4:	18e1      	adds	r1, r4, r3
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	2030      	movs	r0, #48	; 0x30
 80072ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072ee:	4422      	add	r2, r4
 80072f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072f8:	3302      	adds	r3, #2
 80072fa:	e7c7      	b.n	800728c <_printf_common+0x58>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4622      	mov	r2, r4
 8007300:	4649      	mov	r1, r9
 8007302:	4638      	mov	r0, r7
 8007304:	47c0      	blx	r8
 8007306:	3001      	adds	r0, #1
 8007308:	d0e6      	beq.n	80072d8 <_printf_common+0xa4>
 800730a:	3601      	adds	r6, #1
 800730c:	e7d9      	b.n	80072c2 <_printf_common+0x8e>
	...

08007310 <_printf_i>:
 8007310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	7e0f      	ldrb	r7, [r1, #24]
 8007316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007318:	2f78      	cmp	r7, #120	; 0x78
 800731a:	4691      	mov	r9, r2
 800731c:	4680      	mov	r8, r0
 800731e:	460c      	mov	r4, r1
 8007320:	469a      	mov	sl, r3
 8007322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007326:	d807      	bhi.n	8007338 <_printf_i+0x28>
 8007328:	2f62      	cmp	r7, #98	; 0x62
 800732a:	d80a      	bhi.n	8007342 <_printf_i+0x32>
 800732c:	2f00      	cmp	r7, #0
 800732e:	f000 80d8 	beq.w	80074e2 <_printf_i+0x1d2>
 8007332:	2f58      	cmp	r7, #88	; 0x58
 8007334:	f000 80a3 	beq.w	800747e <_printf_i+0x16e>
 8007338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800733c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007340:	e03a      	b.n	80073b8 <_printf_i+0xa8>
 8007342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007346:	2b15      	cmp	r3, #21
 8007348:	d8f6      	bhi.n	8007338 <_printf_i+0x28>
 800734a:	a101      	add	r1, pc, #4	; (adr r1, 8007350 <_printf_i+0x40>)
 800734c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007350:	080073a9 	.word	0x080073a9
 8007354:	080073bd 	.word	0x080073bd
 8007358:	08007339 	.word	0x08007339
 800735c:	08007339 	.word	0x08007339
 8007360:	08007339 	.word	0x08007339
 8007364:	08007339 	.word	0x08007339
 8007368:	080073bd 	.word	0x080073bd
 800736c:	08007339 	.word	0x08007339
 8007370:	08007339 	.word	0x08007339
 8007374:	08007339 	.word	0x08007339
 8007378:	08007339 	.word	0x08007339
 800737c:	080074c9 	.word	0x080074c9
 8007380:	080073ed 	.word	0x080073ed
 8007384:	080074ab 	.word	0x080074ab
 8007388:	08007339 	.word	0x08007339
 800738c:	08007339 	.word	0x08007339
 8007390:	080074eb 	.word	0x080074eb
 8007394:	08007339 	.word	0x08007339
 8007398:	080073ed 	.word	0x080073ed
 800739c:	08007339 	.word	0x08007339
 80073a0:	08007339 	.word	0x08007339
 80073a4:	080074b3 	.word	0x080074b3
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	1d1a      	adds	r2, r3, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	602a      	str	r2, [r5, #0]
 80073b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b8:	2301      	movs	r3, #1
 80073ba:	e0a3      	b.n	8007504 <_printf_i+0x1f4>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	6829      	ldr	r1, [r5, #0]
 80073c0:	0606      	lsls	r6, r0, #24
 80073c2:	f101 0304 	add.w	r3, r1, #4
 80073c6:	d50a      	bpl.n	80073de <_printf_i+0xce>
 80073c8:	680e      	ldr	r6, [r1, #0]
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	da03      	bge.n	80073d8 <_printf_i+0xc8>
 80073d0:	232d      	movs	r3, #45	; 0x2d
 80073d2:	4276      	negs	r6, r6
 80073d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d8:	485e      	ldr	r0, [pc, #376]	; (8007554 <_printf_i+0x244>)
 80073da:	230a      	movs	r3, #10
 80073dc:	e019      	b.n	8007412 <_printf_i+0x102>
 80073de:	680e      	ldr	r6, [r1, #0]
 80073e0:	602b      	str	r3, [r5, #0]
 80073e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073e6:	bf18      	it	ne
 80073e8:	b236      	sxthne	r6, r6
 80073ea:	e7ef      	b.n	80073cc <_printf_i+0xbc>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	6820      	ldr	r0, [r4, #0]
 80073f0:	1d19      	adds	r1, r3, #4
 80073f2:	6029      	str	r1, [r5, #0]
 80073f4:	0601      	lsls	r1, r0, #24
 80073f6:	d501      	bpl.n	80073fc <_printf_i+0xec>
 80073f8:	681e      	ldr	r6, [r3, #0]
 80073fa:	e002      	b.n	8007402 <_printf_i+0xf2>
 80073fc:	0646      	lsls	r6, r0, #25
 80073fe:	d5fb      	bpl.n	80073f8 <_printf_i+0xe8>
 8007400:	881e      	ldrh	r6, [r3, #0]
 8007402:	4854      	ldr	r0, [pc, #336]	; (8007554 <_printf_i+0x244>)
 8007404:	2f6f      	cmp	r7, #111	; 0x6f
 8007406:	bf0c      	ite	eq
 8007408:	2308      	moveq	r3, #8
 800740a:	230a      	movne	r3, #10
 800740c:	2100      	movs	r1, #0
 800740e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007412:	6865      	ldr	r5, [r4, #4]
 8007414:	60a5      	str	r5, [r4, #8]
 8007416:	2d00      	cmp	r5, #0
 8007418:	bfa2      	ittt	ge
 800741a:	6821      	ldrge	r1, [r4, #0]
 800741c:	f021 0104 	bicge.w	r1, r1, #4
 8007420:	6021      	strge	r1, [r4, #0]
 8007422:	b90e      	cbnz	r6, 8007428 <_printf_i+0x118>
 8007424:	2d00      	cmp	r5, #0
 8007426:	d04d      	beq.n	80074c4 <_printf_i+0x1b4>
 8007428:	4615      	mov	r5, r2
 800742a:	fbb6 f1f3 	udiv	r1, r6, r3
 800742e:	fb03 6711 	mls	r7, r3, r1, r6
 8007432:	5dc7      	ldrb	r7, [r0, r7]
 8007434:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007438:	4637      	mov	r7, r6
 800743a:	42bb      	cmp	r3, r7
 800743c:	460e      	mov	r6, r1
 800743e:	d9f4      	bls.n	800742a <_printf_i+0x11a>
 8007440:	2b08      	cmp	r3, #8
 8007442:	d10b      	bne.n	800745c <_printf_i+0x14c>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	07de      	lsls	r6, r3, #31
 8007448:	d508      	bpl.n	800745c <_printf_i+0x14c>
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	6861      	ldr	r1, [r4, #4]
 800744e:	4299      	cmp	r1, r3
 8007450:	bfde      	ittt	le
 8007452:	2330      	movle	r3, #48	; 0x30
 8007454:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007458:	f105 35ff 	addle.w	r5, r5, #4294967295
 800745c:	1b52      	subs	r2, r2, r5
 800745e:	6122      	str	r2, [r4, #16]
 8007460:	f8cd a000 	str.w	sl, [sp]
 8007464:	464b      	mov	r3, r9
 8007466:	aa03      	add	r2, sp, #12
 8007468:	4621      	mov	r1, r4
 800746a:	4640      	mov	r0, r8
 800746c:	f7ff fee2 	bl	8007234 <_printf_common>
 8007470:	3001      	adds	r0, #1
 8007472:	d14c      	bne.n	800750e <_printf_i+0x1fe>
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	b004      	add	sp, #16
 800747a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747e:	4835      	ldr	r0, [pc, #212]	; (8007554 <_printf_i+0x244>)
 8007480:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007484:	6829      	ldr	r1, [r5, #0]
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	f851 6b04 	ldr.w	r6, [r1], #4
 800748c:	6029      	str	r1, [r5, #0]
 800748e:	061d      	lsls	r5, r3, #24
 8007490:	d514      	bpl.n	80074bc <_printf_i+0x1ac>
 8007492:	07df      	lsls	r7, r3, #31
 8007494:	bf44      	itt	mi
 8007496:	f043 0320 	orrmi.w	r3, r3, #32
 800749a:	6023      	strmi	r3, [r4, #0]
 800749c:	b91e      	cbnz	r6, 80074a6 <_printf_i+0x196>
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	f023 0320 	bic.w	r3, r3, #32
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	2310      	movs	r3, #16
 80074a8:	e7b0      	b.n	800740c <_printf_i+0xfc>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	f043 0320 	orr.w	r3, r3, #32
 80074b0:	6023      	str	r3, [r4, #0]
 80074b2:	2378      	movs	r3, #120	; 0x78
 80074b4:	4828      	ldr	r0, [pc, #160]	; (8007558 <_printf_i+0x248>)
 80074b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ba:	e7e3      	b.n	8007484 <_printf_i+0x174>
 80074bc:	0659      	lsls	r1, r3, #25
 80074be:	bf48      	it	mi
 80074c0:	b2b6      	uxthmi	r6, r6
 80074c2:	e7e6      	b.n	8007492 <_printf_i+0x182>
 80074c4:	4615      	mov	r5, r2
 80074c6:	e7bb      	b.n	8007440 <_printf_i+0x130>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	6826      	ldr	r6, [r4, #0]
 80074cc:	6961      	ldr	r1, [r4, #20]
 80074ce:	1d18      	adds	r0, r3, #4
 80074d0:	6028      	str	r0, [r5, #0]
 80074d2:	0635      	lsls	r5, r6, #24
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	d501      	bpl.n	80074dc <_printf_i+0x1cc>
 80074d8:	6019      	str	r1, [r3, #0]
 80074da:	e002      	b.n	80074e2 <_printf_i+0x1d2>
 80074dc:	0670      	lsls	r0, r6, #25
 80074de:	d5fb      	bpl.n	80074d8 <_printf_i+0x1c8>
 80074e0:	8019      	strh	r1, [r3, #0]
 80074e2:	2300      	movs	r3, #0
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	4615      	mov	r5, r2
 80074e8:	e7ba      	b.n	8007460 <_printf_i+0x150>
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	1d1a      	adds	r2, r3, #4
 80074ee:	602a      	str	r2, [r5, #0]
 80074f0:	681d      	ldr	r5, [r3, #0]
 80074f2:	6862      	ldr	r2, [r4, #4]
 80074f4:	2100      	movs	r1, #0
 80074f6:	4628      	mov	r0, r5
 80074f8:	f7f8 fe72 	bl	80001e0 <memchr>
 80074fc:	b108      	cbz	r0, 8007502 <_printf_i+0x1f2>
 80074fe:	1b40      	subs	r0, r0, r5
 8007500:	6060      	str	r0, [r4, #4]
 8007502:	6863      	ldr	r3, [r4, #4]
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	2300      	movs	r3, #0
 8007508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800750c:	e7a8      	b.n	8007460 <_printf_i+0x150>
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	462a      	mov	r2, r5
 8007512:	4649      	mov	r1, r9
 8007514:	4640      	mov	r0, r8
 8007516:	47d0      	blx	sl
 8007518:	3001      	adds	r0, #1
 800751a:	d0ab      	beq.n	8007474 <_printf_i+0x164>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	079b      	lsls	r3, r3, #30
 8007520:	d413      	bmi.n	800754a <_printf_i+0x23a>
 8007522:	68e0      	ldr	r0, [r4, #12]
 8007524:	9b03      	ldr	r3, [sp, #12]
 8007526:	4298      	cmp	r0, r3
 8007528:	bfb8      	it	lt
 800752a:	4618      	movlt	r0, r3
 800752c:	e7a4      	b.n	8007478 <_printf_i+0x168>
 800752e:	2301      	movs	r3, #1
 8007530:	4632      	mov	r2, r6
 8007532:	4649      	mov	r1, r9
 8007534:	4640      	mov	r0, r8
 8007536:	47d0      	blx	sl
 8007538:	3001      	adds	r0, #1
 800753a:	d09b      	beq.n	8007474 <_printf_i+0x164>
 800753c:	3501      	adds	r5, #1
 800753e:	68e3      	ldr	r3, [r4, #12]
 8007540:	9903      	ldr	r1, [sp, #12]
 8007542:	1a5b      	subs	r3, r3, r1
 8007544:	42ab      	cmp	r3, r5
 8007546:	dcf2      	bgt.n	800752e <_printf_i+0x21e>
 8007548:	e7eb      	b.n	8007522 <_printf_i+0x212>
 800754a:	2500      	movs	r5, #0
 800754c:	f104 0619 	add.w	r6, r4, #25
 8007550:	e7f5      	b.n	800753e <_printf_i+0x22e>
 8007552:	bf00      	nop
 8007554:	08009ae6 	.word	0x08009ae6
 8007558:	08009af7 	.word	0x08009af7

0800755c <iprintf>:
 800755c:	b40f      	push	{r0, r1, r2, r3}
 800755e:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <iprintf+0x2c>)
 8007560:	b513      	push	{r0, r1, r4, lr}
 8007562:	681c      	ldr	r4, [r3, #0]
 8007564:	b124      	cbz	r4, 8007570 <iprintf+0x14>
 8007566:	69a3      	ldr	r3, [r4, #24]
 8007568:	b913      	cbnz	r3, 8007570 <iprintf+0x14>
 800756a:	4620      	mov	r0, r4
 800756c:	f001 f8d8 	bl	8008720 <__sinit>
 8007570:	ab05      	add	r3, sp, #20
 8007572:	9a04      	ldr	r2, [sp, #16]
 8007574:	68a1      	ldr	r1, [r4, #8]
 8007576:	9301      	str	r3, [sp, #4]
 8007578:	4620      	mov	r0, r4
 800757a:	f001 fe95 	bl	80092a8 <_vfiprintf_r>
 800757e:	b002      	add	sp, #8
 8007580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007584:	b004      	add	sp, #16
 8007586:	4770      	bx	lr
 8007588:	2000000c 	.word	0x2000000c

0800758c <_puts_r>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	460e      	mov	r6, r1
 8007590:	4605      	mov	r5, r0
 8007592:	b118      	cbz	r0, 800759c <_puts_r+0x10>
 8007594:	6983      	ldr	r3, [r0, #24]
 8007596:	b90b      	cbnz	r3, 800759c <_puts_r+0x10>
 8007598:	f001 f8c2 	bl	8008720 <__sinit>
 800759c:	69ab      	ldr	r3, [r5, #24]
 800759e:	68ac      	ldr	r4, [r5, #8]
 80075a0:	b913      	cbnz	r3, 80075a8 <_puts_r+0x1c>
 80075a2:	4628      	mov	r0, r5
 80075a4:	f001 f8bc 	bl	8008720 <__sinit>
 80075a8:	4b2c      	ldr	r3, [pc, #176]	; (800765c <_puts_r+0xd0>)
 80075aa:	429c      	cmp	r4, r3
 80075ac:	d120      	bne.n	80075f0 <_puts_r+0x64>
 80075ae:	686c      	ldr	r4, [r5, #4]
 80075b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075b2:	07db      	lsls	r3, r3, #31
 80075b4:	d405      	bmi.n	80075c2 <_puts_r+0x36>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	0598      	lsls	r0, r3, #22
 80075ba:	d402      	bmi.n	80075c2 <_puts_r+0x36>
 80075bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075be:	f001 f952 	bl	8008866 <__retarget_lock_acquire_recursive>
 80075c2:	89a3      	ldrh	r3, [r4, #12]
 80075c4:	0719      	lsls	r1, r3, #28
 80075c6:	d51d      	bpl.n	8007604 <_puts_r+0x78>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	b1db      	cbz	r3, 8007604 <_puts_r+0x78>
 80075cc:	3e01      	subs	r6, #1
 80075ce:	68a3      	ldr	r3, [r4, #8]
 80075d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075d4:	3b01      	subs	r3, #1
 80075d6:	60a3      	str	r3, [r4, #8]
 80075d8:	bb39      	cbnz	r1, 800762a <_puts_r+0x9e>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	da38      	bge.n	8007650 <_puts_r+0xc4>
 80075de:	4622      	mov	r2, r4
 80075e0:	210a      	movs	r1, #10
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 f848 	bl	8007678 <__swbuf_r>
 80075e8:	3001      	adds	r0, #1
 80075ea:	d011      	beq.n	8007610 <_puts_r+0x84>
 80075ec:	250a      	movs	r5, #10
 80075ee:	e011      	b.n	8007614 <_puts_r+0x88>
 80075f0:	4b1b      	ldr	r3, [pc, #108]	; (8007660 <_puts_r+0xd4>)
 80075f2:	429c      	cmp	r4, r3
 80075f4:	d101      	bne.n	80075fa <_puts_r+0x6e>
 80075f6:	68ac      	ldr	r4, [r5, #8]
 80075f8:	e7da      	b.n	80075b0 <_puts_r+0x24>
 80075fa:	4b1a      	ldr	r3, [pc, #104]	; (8007664 <_puts_r+0xd8>)
 80075fc:	429c      	cmp	r4, r3
 80075fe:	bf08      	it	eq
 8007600:	68ec      	ldreq	r4, [r5, #12]
 8007602:	e7d5      	b.n	80075b0 <_puts_r+0x24>
 8007604:	4621      	mov	r1, r4
 8007606:	4628      	mov	r0, r5
 8007608:	f000 f888 	bl	800771c <__swsetup_r>
 800760c:	2800      	cmp	r0, #0
 800760e:	d0dd      	beq.n	80075cc <_puts_r+0x40>
 8007610:	f04f 35ff 	mov.w	r5, #4294967295
 8007614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007616:	07da      	lsls	r2, r3, #31
 8007618:	d405      	bmi.n	8007626 <_puts_r+0x9a>
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	059b      	lsls	r3, r3, #22
 800761e:	d402      	bmi.n	8007626 <_puts_r+0x9a>
 8007620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007622:	f001 f921 	bl	8008868 <__retarget_lock_release_recursive>
 8007626:	4628      	mov	r0, r5
 8007628:	bd70      	pop	{r4, r5, r6, pc}
 800762a:	2b00      	cmp	r3, #0
 800762c:	da04      	bge.n	8007638 <_puts_r+0xac>
 800762e:	69a2      	ldr	r2, [r4, #24]
 8007630:	429a      	cmp	r2, r3
 8007632:	dc06      	bgt.n	8007642 <_puts_r+0xb6>
 8007634:	290a      	cmp	r1, #10
 8007636:	d004      	beq.n	8007642 <_puts_r+0xb6>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	6022      	str	r2, [r4, #0]
 800763e:	7019      	strb	r1, [r3, #0]
 8007640:	e7c5      	b.n	80075ce <_puts_r+0x42>
 8007642:	4622      	mov	r2, r4
 8007644:	4628      	mov	r0, r5
 8007646:	f000 f817 	bl	8007678 <__swbuf_r>
 800764a:	3001      	adds	r0, #1
 800764c:	d1bf      	bne.n	80075ce <_puts_r+0x42>
 800764e:	e7df      	b.n	8007610 <_puts_r+0x84>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	250a      	movs	r5, #10
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	6022      	str	r2, [r4, #0]
 8007658:	701d      	strb	r5, [r3, #0]
 800765a:	e7db      	b.n	8007614 <_puts_r+0x88>
 800765c:	08009bb8 	.word	0x08009bb8
 8007660:	08009bd8 	.word	0x08009bd8
 8007664:	08009b98 	.word	0x08009b98

08007668 <puts>:
 8007668:	4b02      	ldr	r3, [pc, #8]	; (8007674 <puts+0xc>)
 800766a:	4601      	mov	r1, r0
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	f7ff bf8d 	b.w	800758c <_puts_r>
 8007672:	bf00      	nop
 8007674:	2000000c 	.word	0x2000000c

08007678 <__swbuf_r>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	460e      	mov	r6, r1
 800767c:	4614      	mov	r4, r2
 800767e:	4605      	mov	r5, r0
 8007680:	b118      	cbz	r0, 800768a <__swbuf_r+0x12>
 8007682:	6983      	ldr	r3, [r0, #24]
 8007684:	b90b      	cbnz	r3, 800768a <__swbuf_r+0x12>
 8007686:	f001 f84b 	bl	8008720 <__sinit>
 800768a:	4b21      	ldr	r3, [pc, #132]	; (8007710 <__swbuf_r+0x98>)
 800768c:	429c      	cmp	r4, r3
 800768e:	d12b      	bne.n	80076e8 <__swbuf_r+0x70>
 8007690:	686c      	ldr	r4, [r5, #4]
 8007692:	69a3      	ldr	r3, [r4, #24]
 8007694:	60a3      	str	r3, [r4, #8]
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	071a      	lsls	r2, r3, #28
 800769a:	d52f      	bpl.n	80076fc <__swbuf_r+0x84>
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	b36b      	cbz	r3, 80076fc <__swbuf_r+0x84>
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	6820      	ldr	r0, [r4, #0]
 80076a4:	1ac0      	subs	r0, r0, r3
 80076a6:	6963      	ldr	r3, [r4, #20]
 80076a8:	b2f6      	uxtb	r6, r6
 80076aa:	4283      	cmp	r3, r0
 80076ac:	4637      	mov	r7, r6
 80076ae:	dc04      	bgt.n	80076ba <__swbuf_r+0x42>
 80076b0:	4621      	mov	r1, r4
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 ffa0 	bl	80085f8 <_fflush_r>
 80076b8:	bb30      	cbnz	r0, 8007708 <__swbuf_r+0x90>
 80076ba:	68a3      	ldr	r3, [r4, #8]
 80076bc:	3b01      	subs	r3, #1
 80076be:	60a3      	str	r3, [r4, #8]
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	6022      	str	r2, [r4, #0]
 80076c6:	701e      	strb	r6, [r3, #0]
 80076c8:	6963      	ldr	r3, [r4, #20]
 80076ca:	3001      	adds	r0, #1
 80076cc:	4283      	cmp	r3, r0
 80076ce:	d004      	beq.n	80076da <__swbuf_r+0x62>
 80076d0:	89a3      	ldrh	r3, [r4, #12]
 80076d2:	07db      	lsls	r3, r3, #31
 80076d4:	d506      	bpl.n	80076e4 <__swbuf_r+0x6c>
 80076d6:	2e0a      	cmp	r6, #10
 80076d8:	d104      	bne.n	80076e4 <__swbuf_r+0x6c>
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 ff8b 	bl	80085f8 <_fflush_r>
 80076e2:	b988      	cbnz	r0, 8007708 <__swbuf_r+0x90>
 80076e4:	4638      	mov	r0, r7
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <__swbuf_r+0x9c>)
 80076ea:	429c      	cmp	r4, r3
 80076ec:	d101      	bne.n	80076f2 <__swbuf_r+0x7a>
 80076ee:	68ac      	ldr	r4, [r5, #8]
 80076f0:	e7cf      	b.n	8007692 <__swbuf_r+0x1a>
 80076f2:	4b09      	ldr	r3, [pc, #36]	; (8007718 <__swbuf_r+0xa0>)
 80076f4:	429c      	cmp	r4, r3
 80076f6:	bf08      	it	eq
 80076f8:	68ec      	ldreq	r4, [r5, #12]
 80076fa:	e7ca      	b.n	8007692 <__swbuf_r+0x1a>
 80076fc:	4621      	mov	r1, r4
 80076fe:	4628      	mov	r0, r5
 8007700:	f000 f80c 	bl	800771c <__swsetup_r>
 8007704:	2800      	cmp	r0, #0
 8007706:	d0cb      	beq.n	80076a0 <__swbuf_r+0x28>
 8007708:	f04f 37ff 	mov.w	r7, #4294967295
 800770c:	e7ea      	b.n	80076e4 <__swbuf_r+0x6c>
 800770e:	bf00      	nop
 8007710:	08009bb8 	.word	0x08009bb8
 8007714:	08009bd8 	.word	0x08009bd8
 8007718:	08009b98 	.word	0x08009b98

0800771c <__swsetup_r>:
 800771c:	4b32      	ldr	r3, [pc, #200]	; (80077e8 <__swsetup_r+0xcc>)
 800771e:	b570      	push	{r4, r5, r6, lr}
 8007720:	681d      	ldr	r5, [r3, #0]
 8007722:	4606      	mov	r6, r0
 8007724:	460c      	mov	r4, r1
 8007726:	b125      	cbz	r5, 8007732 <__swsetup_r+0x16>
 8007728:	69ab      	ldr	r3, [r5, #24]
 800772a:	b913      	cbnz	r3, 8007732 <__swsetup_r+0x16>
 800772c:	4628      	mov	r0, r5
 800772e:	f000 fff7 	bl	8008720 <__sinit>
 8007732:	4b2e      	ldr	r3, [pc, #184]	; (80077ec <__swsetup_r+0xd0>)
 8007734:	429c      	cmp	r4, r3
 8007736:	d10f      	bne.n	8007758 <__swsetup_r+0x3c>
 8007738:	686c      	ldr	r4, [r5, #4]
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007740:	0719      	lsls	r1, r3, #28
 8007742:	d42c      	bmi.n	800779e <__swsetup_r+0x82>
 8007744:	06dd      	lsls	r5, r3, #27
 8007746:	d411      	bmi.n	800776c <__swsetup_r+0x50>
 8007748:	2309      	movs	r3, #9
 800774a:	6033      	str	r3, [r6, #0]
 800774c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007750:	81a3      	strh	r3, [r4, #12]
 8007752:	f04f 30ff 	mov.w	r0, #4294967295
 8007756:	e03e      	b.n	80077d6 <__swsetup_r+0xba>
 8007758:	4b25      	ldr	r3, [pc, #148]	; (80077f0 <__swsetup_r+0xd4>)
 800775a:	429c      	cmp	r4, r3
 800775c:	d101      	bne.n	8007762 <__swsetup_r+0x46>
 800775e:	68ac      	ldr	r4, [r5, #8]
 8007760:	e7eb      	b.n	800773a <__swsetup_r+0x1e>
 8007762:	4b24      	ldr	r3, [pc, #144]	; (80077f4 <__swsetup_r+0xd8>)
 8007764:	429c      	cmp	r4, r3
 8007766:	bf08      	it	eq
 8007768:	68ec      	ldreq	r4, [r5, #12]
 800776a:	e7e6      	b.n	800773a <__swsetup_r+0x1e>
 800776c:	0758      	lsls	r0, r3, #29
 800776e:	d512      	bpl.n	8007796 <__swsetup_r+0x7a>
 8007770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007772:	b141      	cbz	r1, 8007786 <__swsetup_r+0x6a>
 8007774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007778:	4299      	cmp	r1, r3
 800777a:	d002      	beq.n	8007782 <__swsetup_r+0x66>
 800777c:	4630      	mov	r0, r6
 800777e:	f001 fc89 	bl	8009094 <_free_r>
 8007782:	2300      	movs	r3, #0
 8007784:	6363      	str	r3, [r4, #52]	; 0x34
 8007786:	89a3      	ldrh	r3, [r4, #12]
 8007788:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	2300      	movs	r3, #0
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	f043 0308 	orr.w	r3, r3, #8
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	6923      	ldr	r3, [r4, #16]
 80077a0:	b94b      	cbnz	r3, 80077b6 <__swsetup_r+0x9a>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ac:	d003      	beq.n	80077b6 <__swsetup_r+0x9a>
 80077ae:	4621      	mov	r1, r4
 80077b0:	4630      	mov	r0, r6
 80077b2:	f001 f87f 	bl	80088b4 <__smakebuf_r>
 80077b6:	89a0      	ldrh	r0, [r4, #12]
 80077b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077bc:	f010 0301 	ands.w	r3, r0, #1
 80077c0:	d00a      	beq.n	80077d8 <__swsetup_r+0xbc>
 80077c2:	2300      	movs	r3, #0
 80077c4:	60a3      	str	r3, [r4, #8]
 80077c6:	6963      	ldr	r3, [r4, #20]
 80077c8:	425b      	negs	r3, r3
 80077ca:	61a3      	str	r3, [r4, #24]
 80077cc:	6923      	ldr	r3, [r4, #16]
 80077ce:	b943      	cbnz	r3, 80077e2 <__swsetup_r+0xc6>
 80077d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077d4:	d1ba      	bne.n	800774c <__swsetup_r+0x30>
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	0781      	lsls	r1, r0, #30
 80077da:	bf58      	it	pl
 80077dc:	6963      	ldrpl	r3, [r4, #20]
 80077de:	60a3      	str	r3, [r4, #8]
 80077e0:	e7f4      	b.n	80077cc <__swsetup_r+0xb0>
 80077e2:	2000      	movs	r0, #0
 80077e4:	e7f7      	b.n	80077d6 <__swsetup_r+0xba>
 80077e6:	bf00      	nop
 80077e8:	2000000c 	.word	0x2000000c
 80077ec:	08009bb8 	.word	0x08009bb8
 80077f0:	08009bd8 	.word	0x08009bd8
 80077f4:	08009b98 	.word	0x08009b98

080077f8 <quorem>:
 80077f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077fc:	6903      	ldr	r3, [r0, #16]
 80077fe:	690c      	ldr	r4, [r1, #16]
 8007800:	42a3      	cmp	r3, r4
 8007802:	4607      	mov	r7, r0
 8007804:	f2c0 8081 	blt.w	800790a <quorem+0x112>
 8007808:	3c01      	subs	r4, #1
 800780a:	f101 0814 	add.w	r8, r1, #20
 800780e:	f100 0514 	add.w	r5, r0, #20
 8007812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800781c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007820:	3301      	adds	r3, #1
 8007822:	429a      	cmp	r2, r3
 8007824:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800782c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007830:	d331      	bcc.n	8007896 <quorem+0x9e>
 8007832:	f04f 0e00 	mov.w	lr, #0
 8007836:	4640      	mov	r0, r8
 8007838:	46ac      	mov	ip, r5
 800783a:	46f2      	mov	sl, lr
 800783c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007840:	b293      	uxth	r3, r2
 8007842:	fb06 e303 	mla	r3, r6, r3, lr
 8007846:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800784a:	b29b      	uxth	r3, r3
 800784c:	ebaa 0303 	sub.w	r3, sl, r3
 8007850:	f8dc a000 	ldr.w	sl, [ip]
 8007854:	0c12      	lsrs	r2, r2, #16
 8007856:	fa13 f38a 	uxtah	r3, r3, sl
 800785a:	fb06 e202 	mla	r2, r6, r2, lr
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	9b00      	ldr	r3, [sp, #0]
 8007862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007866:	b292      	uxth	r2, r2
 8007868:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800786c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007870:	f8bd 3000 	ldrh.w	r3, [sp]
 8007874:	4581      	cmp	r9, r0
 8007876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800787a:	f84c 3b04 	str.w	r3, [ip], #4
 800787e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007882:	d2db      	bcs.n	800783c <quorem+0x44>
 8007884:	f855 300b 	ldr.w	r3, [r5, fp]
 8007888:	b92b      	cbnz	r3, 8007896 <quorem+0x9e>
 800788a:	9b01      	ldr	r3, [sp, #4]
 800788c:	3b04      	subs	r3, #4
 800788e:	429d      	cmp	r5, r3
 8007890:	461a      	mov	r2, r3
 8007892:	d32e      	bcc.n	80078f2 <quorem+0xfa>
 8007894:	613c      	str	r4, [r7, #16]
 8007896:	4638      	mov	r0, r7
 8007898:	f001 fae4 	bl	8008e64 <__mcmp>
 800789c:	2800      	cmp	r0, #0
 800789e:	db24      	blt.n	80078ea <quorem+0xf2>
 80078a0:	3601      	adds	r6, #1
 80078a2:	4628      	mov	r0, r5
 80078a4:	f04f 0c00 	mov.w	ip, #0
 80078a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80078ac:	f8d0 e000 	ldr.w	lr, [r0]
 80078b0:	b293      	uxth	r3, r2
 80078b2:	ebac 0303 	sub.w	r3, ip, r3
 80078b6:	0c12      	lsrs	r2, r2, #16
 80078b8:	fa13 f38e 	uxtah	r3, r3, lr
 80078bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80078c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ca:	45c1      	cmp	r9, r8
 80078cc:	f840 3b04 	str.w	r3, [r0], #4
 80078d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80078d4:	d2e8      	bcs.n	80078a8 <quorem+0xb0>
 80078d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078de:	b922      	cbnz	r2, 80078ea <quorem+0xf2>
 80078e0:	3b04      	subs	r3, #4
 80078e2:	429d      	cmp	r5, r3
 80078e4:	461a      	mov	r2, r3
 80078e6:	d30a      	bcc.n	80078fe <quorem+0x106>
 80078e8:	613c      	str	r4, [r7, #16]
 80078ea:	4630      	mov	r0, r6
 80078ec:	b003      	add	sp, #12
 80078ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f2:	6812      	ldr	r2, [r2, #0]
 80078f4:	3b04      	subs	r3, #4
 80078f6:	2a00      	cmp	r2, #0
 80078f8:	d1cc      	bne.n	8007894 <quorem+0x9c>
 80078fa:	3c01      	subs	r4, #1
 80078fc:	e7c7      	b.n	800788e <quorem+0x96>
 80078fe:	6812      	ldr	r2, [r2, #0]
 8007900:	3b04      	subs	r3, #4
 8007902:	2a00      	cmp	r2, #0
 8007904:	d1f0      	bne.n	80078e8 <quorem+0xf0>
 8007906:	3c01      	subs	r4, #1
 8007908:	e7eb      	b.n	80078e2 <quorem+0xea>
 800790a:	2000      	movs	r0, #0
 800790c:	e7ee      	b.n	80078ec <quorem+0xf4>
	...

08007910 <_dtoa_r>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	ed2d 8b04 	vpush	{d8-d9}
 8007918:	ec57 6b10 	vmov	r6, r7, d0
 800791c:	b093      	sub	sp, #76	; 0x4c
 800791e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007920:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007924:	9106      	str	r1, [sp, #24]
 8007926:	ee10 aa10 	vmov	sl, s0
 800792a:	4604      	mov	r4, r0
 800792c:	9209      	str	r2, [sp, #36]	; 0x24
 800792e:	930c      	str	r3, [sp, #48]	; 0x30
 8007930:	46bb      	mov	fp, r7
 8007932:	b975      	cbnz	r5, 8007952 <_dtoa_r+0x42>
 8007934:	2010      	movs	r0, #16
 8007936:	f000 fffd 	bl	8008934 <malloc>
 800793a:	4602      	mov	r2, r0
 800793c:	6260      	str	r0, [r4, #36]	; 0x24
 800793e:	b920      	cbnz	r0, 800794a <_dtoa_r+0x3a>
 8007940:	4ba7      	ldr	r3, [pc, #668]	; (8007be0 <_dtoa_r+0x2d0>)
 8007942:	21ea      	movs	r1, #234	; 0xea
 8007944:	48a7      	ldr	r0, [pc, #668]	; (8007be4 <_dtoa_r+0x2d4>)
 8007946:	f001 fe45 	bl	80095d4 <__assert_func>
 800794a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800794e:	6005      	str	r5, [r0, #0]
 8007950:	60c5      	str	r5, [r0, #12]
 8007952:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007954:	6819      	ldr	r1, [r3, #0]
 8007956:	b151      	cbz	r1, 800796e <_dtoa_r+0x5e>
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	604a      	str	r2, [r1, #4]
 800795c:	2301      	movs	r3, #1
 800795e:	4093      	lsls	r3, r2
 8007960:	608b      	str	r3, [r1, #8]
 8007962:	4620      	mov	r0, r4
 8007964:	f001 f83c 	bl	80089e0 <_Bfree>
 8007968:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	1e3b      	subs	r3, r7, #0
 8007970:	bfaa      	itet	ge
 8007972:	2300      	movge	r3, #0
 8007974:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007978:	f8c8 3000 	strge.w	r3, [r8]
 800797c:	4b9a      	ldr	r3, [pc, #616]	; (8007be8 <_dtoa_r+0x2d8>)
 800797e:	bfbc      	itt	lt
 8007980:	2201      	movlt	r2, #1
 8007982:	f8c8 2000 	strlt.w	r2, [r8]
 8007986:	ea33 030b 	bics.w	r3, r3, fp
 800798a:	d11b      	bne.n	80079c4 <_dtoa_r+0xb4>
 800798c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800798e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007998:	4333      	orrs	r3, r6
 800799a:	f000 8592 	beq.w	80084c2 <_dtoa_r+0xbb2>
 800799e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079a0:	b963      	cbnz	r3, 80079bc <_dtoa_r+0xac>
 80079a2:	4b92      	ldr	r3, [pc, #584]	; (8007bec <_dtoa_r+0x2dc>)
 80079a4:	e022      	b.n	80079ec <_dtoa_r+0xdc>
 80079a6:	4b92      	ldr	r3, [pc, #584]	; (8007bf0 <_dtoa_r+0x2e0>)
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	3308      	adds	r3, #8
 80079ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	9801      	ldr	r0, [sp, #4]
 80079b2:	b013      	add	sp, #76	; 0x4c
 80079b4:	ecbd 8b04 	vpop	{d8-d9}
 80079b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079bc:	4b8b      	ldr	r3, [pc, #556]	; (8007bec <_dtoa_r+0x2dc>)
 80079be:	9301      	str	r3, [sp, #4]
 80079c0:	3303      	adds	r3, #3
 80079c2:	e7f3      	b.n	80079ac <_dtoa_r+0x9c>
 80079c4:	2200      	movs	r2, #0
 80079c6:	2300      	movs	r3, #0
 80079c8:	4650      	mov	r0, sl
 80079ca:	4659      	mov	r1, fp
 80079cc:	f7f9 f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 80079d0:	ec4b ab19 	vmov	d9, sl, fp
 80079d4:	4680      	mov	r8, r0
 80079d6:	b158      	cbz	r0, 80079f0 <_dtoa_r+0xe0>
 80079d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079da:	2301      	movs	r3, #1
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 856b 	beq.w	80084bc <_dtoa_r+0xbac>
 80079e6:	4883      	ldr	r0, [pc, #524]	; (8007bf4 <_dtoa_r+0x2e4>)
 80079e8:	6018      	str	r0, [r3, #0]
 80079ea:	1e43      	subs	r3, r0, #1
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	e7df      	b.n	80079b0 <_dtoa_r+0xa0>
 80079f0:	ec4b ab10 	vmov	d0, sl, fp
 80079f4:	aa10      	add	r2, sp, #64	; 0x40
 80079f6:	a911      	add	r1, sp, #68	; 0x44
 80079f8:	4620      	mov	r0, r4
 80079fa:	f001 fad9 	bl	8008fb0 <__d2b>
 80079fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007a02:	ee08 0a10 	vmov	s16, r0
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	f000 8084 	beq.w	8007b14 <_dtoa_r+0x204>
 8007a0c:	ee19 3a90 	vmov	r3, s19
 8007a10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a18:	4656      	mov	r6, sl
 8007a1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007a26:	4b74      	ldr	r3, [pc, #464]	; (8007bf8 <_dtoa_r+0x2e8>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	f7f8 fc2b 	bl	8000288 <__aeabi_dsub>
 8007a32:	a365      	add	r3, pc, #404	; (adr r3, 8007bc8 <_dtoa_r+0x2b8>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f7f8 fdde 	bl	80005f8 <__aeabi_dmul>
 8007a3c:	a364      	add	r3, pc, #400	; (adr r3, 8007bd0 <_dtoa_r+0x2c0>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	f7f8 fc23 	bl	800028c <__adddf3>
 8007a46:	4606      	mov	r6, r0
 8007a48:	4628      	mov	r0, r5
 8007a4a:	460f      	mov	r7, r1
 8007a4c:	f7f8 fd6a 	bl	8000524 <__aeabi_i2d>
 8007a50:	a361      	add	r3, pc, #388	; (adr r3, 8007bd8 <_dtoa_r+0x2c8>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f7f8 fdcf 	bl	80005f8 <__aeabi_dmul>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4630      	mov	r0, r6
 8007a60:	4639      	mov	r1, r7
 8007a62:	f7f8 fc13 	bl	800028c <__adddf3>
 8007a66:	4606      	mov	r6, r0
 8007a68:	460f      	mov	r7, r1
 8007a6a:	f7f9 f875 	bl	8000b58 <__aeabi_d2iz>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	9000      	str	r0, [sp, #0]
 8007a72:	2300      	movs	r3, #0
 8007a74:	4630      	mov	r0, r6
 8007a76:	4639      	mov	r1, r7
 8007a78:	f7f9 f830 	bl	8000adc <__aeabi_dcmplt>
 8007a7c:	b150      	cbz	r0, 8007a94 <_dtoa_r+0x184>
 8007a7e:	9800      	ldr	r0, [sp, #0]
 8007a80:	f7f8 fd50 	bl	8000524 <__aeabi_i2d>
 8007a84:	4632      	mov	r2, r6
 8007a86:	463b      	mov	r3, r7
 8007a88:	f7f9 f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a8c:	b910      	cbnz	r0, 8007a94 <_dtoa_r+0x184>
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	9b00      	ldr	r3, [sp, #0]
 8007a96:	2b16      	cmp	r3, #22
 8007a98:	d85a      	bhi.n	8007b50 <_dtoa_r+0x240>
 8007a9a:	9a00      	ldr	r2, [sp, #0]
 8007a9c:	4b57      	ldr	r3, [pc, #348]	; (8007bfc <_dtoa_r+0x2ec>)
 8007a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	ec51 0b19 	vmov	r0, r1, d9
 8007aaa:	f7f9 f817 	bl	8000adc <__aeabi_dcmplt>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d050      	beq.n	8007b54 <_dtoa_r+0x244>
 8007ab2:	9b00      	ldr	r3, [sp, #0]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007abe:	1b5d      	subs	r5, r3, r5
 8007ac0:	1e6b      	subs	r3, r5, #1
 8007ac2:	9305      	str	r3, [sp, #20]
 8007ac4:	bf45      	ittet	mi
 8007ac6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007aca:	9304      	strmi	r3, [sp, #16]
 8007acc:	2300      	movpl	r3, #0
 8007ace:	2300      	movmi	r3, #0
 8007ad0:	bf4c      	ite	mi
 8007ad2:	9305      	strmi	r3, [sp, #20]
 8007ad4:	9304      	strpl	r3, [sp, #16]
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	db3d      	blt.n	8007b58 <_dtoa_r+0x248>
 8007adc:	9b05      	ldr	r3, [sp, #20]
 8007ade:	9a00      	ldr	r2, [sp, #0]
 8007ae0:	920a      	str	r2, [sp, #40]	; 0x28
 8007ae2:	4413      	add	r3, r2
 8007ae4:	9305      	str	r3, [sp, #20]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9307      	str	r3, [sp, #28]
 8007aea:	9b06      	ldr	r3, [sp, #24]
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	f200 8089 	bhi.w	8007c04 <_dtoa_r+0x2f4>
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	bfc4      	itt	gt
 8007af6:	3b04      	subgt	r3, #4
 8007af8:	9306      	strgt	r3, [sp, #24]
 8007afa:	9b06      	ldr	r3, [sp, #24]
 8007afc:	f1a3 0302 	sub.w	r3, r3, #2
 8007b00:	bfcc      	ite	gt
 8007b02:	2500      	movgt	r5, #0
 8007b04:	2501      	movle	r5, #1
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	f200 8087 	bhi.w	8007c1a <_dtoa_r+0x30a>
 8007b0c:	e8df f003 	tbb	[pc, r3]
 8007b10:	59383a2d 	.word	0x59383a2d
 8007b14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b18:	441d      	add	r5, r3
 8007b1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b1e:	2b20      	cmp	r3, #32
 8007b20:	bfc1      	itttt	gt
 8007b22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007b2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b32:	bfda      	itte	le
 8007b34:	f1c3 0320 	rsble	r3, r3, #32
 8007b38:	fa06 f003 	lslle.w	r0, r6, r3
 8007b3c:	4318      	orrgt	r0, r3
 8007b3e:	f7f8 fce1 	bl	8000504 <__aeabi_ui2d>
 8007b42:	2301      	movs	r3, #1
 8007b44:	4606      	mov	r6, r0
 8007b46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b4a:	3d01      	subs	r5, #1
 8007b4c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b4e:	e76a      	b.n	8007a26 <_dtoa_r+0x116>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e7b2      	b.n	8007aba <_dtoa_r+0x1aa>
 8007b54:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b56:	e7b1      	b.n	8007abc <_dtoa_r+0x1ac>
 8007b58:	9b04      	ldr	r3, [sp, #16]
 8007b5a:	9a00      	ldr	r2, [sp, #0]
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	9304      	str	r3, [sp, #16]
 8007b60:	4253      	negs	r3, r2
 8007b62:	9307      	str	r3, [sp, #28]
 8007b64:	2300      	movs	r3, #0
 8007b66:	930a      	str	r3, [sp, #40]	; 0x28
 8007b68:	e7bf      	b.n	8007aea <_dtoa_r+0x1da>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9308      	str	r3, [sp, #32]
 8007b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dc55      	bgt.n	8007c20 <_dtoa_r+0x310>
 8007b74:	2301      	movs	r3, #1
 8007b76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b7e:	e00c      	b.n	8007b9a <_dtoa_r+0x28a>
 8007b80:	2301      	movs	r3, #1
 8007b82:	e7f3      	b.n	8007b6c <_dtoa_r+0x25c>
 8007b84:	2300      	movs	r3, #0
 8007b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b88:	9308      	str	r3, [sp, #32]
 8007b8a:	9b00      	ldr	r3, [sp, #0]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	9302      	str	r3, [sp, #8]
 8007b90:	3301      	adds	r3, #1
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	9303      	str	r3, [sp, #12]
 8007b96:	bfb8      	it	lt
 8007b98:	2301      	movlt	r3, #1
 8007b9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	6042      	str	r2, [r0, #4]
 8007ba0:	2204      	movs	r2, #4
 8007ba2:	f102 0614 	add.w	r6, r2, #20
 8007ba6:	429e      	cmp	r6, r3
 8007ba8:	6841      	ldr	r1, [r0, #4]
 8007baa:	d93d      	bls.n	8007c28 <_dtoa_r+0x318>
 8007bac:	4620      	mov	r0, r4
 8007bae:	f000 fed7 	bl	8008960 <_Balloc>
 8007bb2:	9001      	str	r0, [sp, #4]
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d13b      	bne.n	8007c30 <_dtoa_r+0x320>
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <_dtoa_r+0x2f0>)
 8007bba:	4602      	mov	r2, r0
 8007bbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007bc0:	e6c0      	b.n	8007944 <_dtoa_r+0x34>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e7df      	b.n	8007b86 <_dtoa_r+0x276>
 8007bc6:	bf00      	nop
 8007bc8:	636f4361 	.word	0x636f4361
 8007bcc:	3fd287a7 	.word	0x3fd287a7
 8007bd0:	8b60c8b3 	.word	0x8b60c8b3
 8007bd4:	3fc68a28 	.word	0x3fc68a28
 8007bd8:	509f79fb 	.word	0x509f79fb
 8007bdc:	3fd34413 	.word	0x3fd34413
 8007be0:	08009b15 	.word	0x08009b15
 8007be4:	08009b2c 	.word	0x08009b2c
 8007be8:	7ff00000 	.word	0x7ff00000
 8007bec:	08009b11 	.word	0x08009b11
 8007bf0:	08009b08 	.word	0x08009b08
 8007bf4:	08009ae5 	.word	0x08009ae5
 8007bf8:	3ff80000 	.word	0x3ff80000
 8007bfc:	08009c80 	.word	0x08009c80
 8007c00:	08009b87 	.word	0x08009b87
 8007c04:	2501      	movs	r5, #1
 8007c06:	2300      	movs	r3, #0
 8007c08:	9306      	str	r3, [sp, #24]
 8007c0a:	9508      	str	r5, [sp, #32]
 8007c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	2312      	movs	r3, #18
 8007c18:	e7b0      	b.n	8007b7c <_dtoa_r+0x26c>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	9308      	str	r3, [sp, #32]
 8007c1e:	e7f5      	b.n	8007c0c <_dtoa_r+0x2fc>
 8007c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c26:	e7b8      	b.n	8007b9a <_dtoa_r+0x28a>
 8007c28:	3101      	adds	r1, #1
 8007c2a:	6041      	str	r1, [r0, #4]
 8007c2c:	0052      	lsls	r2, r2, #1
 8007c2e:	e7b8      	b.n	8007ba2 <_dtoa_r+0x292>
 8007c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c32:	9a01      	ldr	r2, [sp, #4]
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	2b0e      	cmp	r3, #14
 8007c3a:	f200 809d 	bhi.w	8007d78 <_dtoa_r+0x468>
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	f000 809a 	beq.w	8007d78 <_dtoa_r+0x468>
 8007c44:	9b00      	ldr	r3, [sp, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	dd32      	ble.n	8007cb0 <_dtoa_r+0x3a0>
 8007c4a:	4ab7      	ldr	r2, [pc, #732]	; (8007f28 <_dtoa_r+0x618>)
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c58:	9b00      	ldr	r3, [sp, #0]
 8007c5a:	05d8      	lsls	r0, r3, #23
 8007c5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c60:	d516      	bpl.n	8007c90 <_dtoa_r+0x380>
 8007c62:	4bb2      	ldr	r3, [pc, #712]	; (8007f2c <_dtoa_r+0x61c>)
 8007c64:	ec51 0b19 	vmov	r0, r1, d9
 8007c68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c6c:	f7f8 fdee 	bl	800084c <__aeabi_ddiv>
 8007c70:	f007 070f 	and.w	r7, r7, #15
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	2503      	movs	r5, #3
 8007c7a:	4eac      	ldr	r6, [pc, #688]	; (8007f2c <_dtoa_r+0x61c>)
 8007c7c:	b957      	cbnz	r7, 8007c94 <_dtoa_r+0x384>
 8007c7e:	4642      	mov	r2, r8
 8007c80:	464b      	mov	r3, r9
 8007c82:	4650      	mov	r0, sl
 8007c84:	4659      	mov	r1, fp
 8007c86:	f7f8 fde1 	bl	800084c <__aeabi_ddiv>
 8007c8a:	4682      	mov	sl, r0
 8007c8c:	468b      	mov	fp, r1
 8007c8e:	e028      	b.n	8007ce2 <_dtoa_r+0x3d2>
 8007c90:	2502      	movs	r5, #2
 8007c92:	e7f2      	b.n	8007c7a <_dtoa_r+0x36a>
 8007c94:	07f9      	lsls	r1, r7, #31
 8007c96:	d508      	bpl.n	8007caa <_dtoa_r+0x39a>
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ca0:	f7f8 fcaa 	bl	80005f8 <__aeabi_dmul>
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	4680      	mov	r8, r0
 8007ca8:	4689      	mov	r9, r1
 8007caa:	107f      	asrs	r7, r7, #1
 8007cac:	3608      	adds	r6, #8
 8007cae:	e7e5      	b.n	8007c7c <_dtoa_r+0x36c>
 8007cb0:	f000 809b 	beq.w	8007dea <_dtoa_r+0x4da>
 8007cb4:	9b00      	ldr	r3, [sp, #0]
 8007cb6:	4f9d      	ldr	r7, [pc, #628]	; (8007f2c <_dtoa_r+0x61c>)
 8007cb8:	425e      	negs	r6, r3
 8007cba:	4b9b      	ldr	r3, [pc, #620]	; (8007f28 <_dtoa_r+0x618>)
 8007cbc:	f006 020f 	and.w	r2, r6, #15
 8007cc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	ec51 0b19 	vmov	r0, r1, d9
 8007ccc:	f7f8 fc94 	bl	80005f8 <__aeabi_dmul>
 8007cd0:	1136      	asrs	r6, r6, #4
 8007cd2:	4682      	mov	sl, r0
 8007cd4:	468b      	mov	fp, r1
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2502      	movs	r5, #2
 8007cda:	2e00      	cmp	r6, #0
 8007cdc:	d17a      	bne.n	8007dd4 <_dtoa_r+0x4c4>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1d3      	bne.n	8007c8a <_dtoa_r+0x37a>
 8007ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8082 	beq.w	8007dee <_dtoa_r+0x4de>
 8007cea:	4b91      	ldr	r3, [pc, #580]	; (8007f30 <_dtoa_r+0x620>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	4650      	mov	r0, sl
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	f7f8 fef3 	bl	8000adc <__aeabi_dcmplt>
 8007cf6:	2800      	cmp	r0, #0
 8007cf8:	d079      	beq.n	8007dee <_dtoa_r+0x4de>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d076      	beq.n	8007dee <_dtoa_r+0x4de>
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	dd36      	ble.n	8007d74 <_dtoa_r+0x464>
 8007d06:	9b00      	ldr	r3, [sp, #0]
 8007d08:	4650      	mov	r0, sl
 8007d0a:	4659      	mov	r1, fp
 8007d0c:	1e5f      	subs	r7, r3, #1
 8007d0e:	2200      	movs	r2, #0
 8007d10:	4b88      	ldr	r3, [pc, #544]	; (8007f34 <_dtoa_r+0x624>)
 8007d12:	f7f8 fc71 	bl	80005f8 <__aeabi_dmul>
 8007d16:	9e02      	ldr	r6, [sp, #8]
 8007d18:	4682      	mov	sl, r0
 8007d1a:	468b      	mov	fp, r1
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f7f8 fc00 	bl	8000524 <__aeabi_i2d>
 8007d24:	4652      	mov	r2, sl
 8007d26:	465b      	mov	r3, fp
 8007d28:	f7f8 fc66 	bl	80005f8 <__aeabi_dmul>
 8007d2c:	4b82      	ldr	r3, [pc, #520]	; (8007f38 <_dtoa_r+0x628>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f7f8 faac 	bl	800028c <__adddf3>
 8007d34:	46d0      	mov	r8, sl
 8007d36:	46d9      	mov	r9, fp
 8007d38:	4682      	mov	sl, r0
 8007d3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	d158      	bne.n	8007df4 <_dtoa_r+0x4e4>
 8007d42:	4b7e      	ldr	r3, [pc, #504]	; (8007f3c <_dtoa_r+0x62c>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	4640      	mov	r0, r8
 8007d48:	4649      	mov	r1, r9
 8007d4a:	f7f8 fa9d 	bl	8000288 <__aeabi_dsub>
 8007d4e:	4652      	mov	r2, sl
 8007d50:	465b      	mov	r3, fp
 8007d52:	4680      	mov	r8, r0
 8007d54:	4689      	mov	r9, r1
 8007d56:	f7f8 fedf 	bl	8000b18 <__aeabi_dcmpgt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f040 8295 	bne.w	800828a <_dtoa_r+0x97a>
 8007d60:	4652      	mov	r2, sl
 8007d62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d66:	4640      	mov	r0, r8
 8007d68:	4649      	mov	r1, r9
 8007d6a:	f7f8 feb7 	bl	8000adc <__aeabi_dcmplt>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	f040 8289 	bne.w	8008286 <_dtoa_r+0x976>
 8007d74:	ec5b ab19 	vmov	sl, fp, d9
 8007d78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f2c0 8148 	blt.w	8008010 <_dtoa_r+0x700>
 8007d80:	9a00      	ldr	r2, [sp, #0]
 8007d82:	2a0e      	cmp	r2, #14
 8007d84:	f300 8144 	bgt.w	8008010 <_dtoa_r+0x700>
 8007d88:	4b67      	ldr	r3, [pc, #412]	; (8007f28 <_dtoa_r+0x618>)
 8007d8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f280 80d5 	bge.w	8007f44 <_dtoa_r+0x634>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f300 80d1 	bgt.w	8007f44 <_dtoa_r+0x634>
 8007da2:	f040 826f 	bne.w	8008284 <_dtoa_r+0x974>
 8007da6:	4b65      	ldr	r3, [pc, #404]	; (8007f3c <_dtoa_r+0x62c>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	f7f8 fc23 	bl	80005f8 <__aeabi_dmul>
 8007db2:	4652      	mov	r2, sl
 8007db4:	465b      	mov	r3, fp
 8007db6:	f7f8 fea5 	bl	8000b04 <__aeabi_dcmpge>
 8007dba:	9e03      	ldr	r6, [sp, #12]
 8007dbc:	4637      	mov	r7, r6
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f040 8245 	bne.w	800824e <_dtoa_r+0x93e>
 8007dc4:	9d01      	ldr	r5, [sp, #4]
 8007dc6:	2331      	movs	r3, #49	; 0x31
 8007dc8:	f805 3b01 	strb.w	r3, [r5], #1
 8007dcc:	9b00      	ldr	r3, [sp, #0]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	e240      	b.n	8008256 <_dtoa_r+0x946>
 8007dd4:	07f2      	lsls	r2, r6, #31
 8007dd6:	d505      	bpl.n	8007de4 <_dtoa_r+0x4d4>
 8007dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ddc:	f7f8 fc0c 	bl	80005f8 <__aeabi_dmul>
 8007de0:	3501      	adds	r5, #1
 8007de2:	2301      	movs	r3, #1
 8007de4:	1076      	asrs	r6, r6, #1
 8007de6:	3708      	adds	r7, #8
 8007de8:	e777      	b.n	8007cda <_dtoa_r+0x3ca>
 8007dea:	2502      	movs	r5, #2
 8007dec:	e779      	b.n	8007ce2 <_dtoa_r+0x3d2>
 8007dee:	9f00      	ldr	r7, [sp, #0]
 8007df0:	9e03      	ldr	r6, [sp, #12]
 8007df2:	e794      	b.n	8007d1e <_dtoa_r+0x40e>
 8007df4:	9901      	ldr	r1, [sp, #4]
 8007df6:	4b4c      	ldr	r3, [pc, #304]	; (8007f28 <_dtoa_r+0x618>)
 8007df8:	4431      	add	r1, r6
 8007dfa:	910d      	str	r1, [sp, #52]	; 0x34
 8007dfc:	9908      	ldr	r1, [sp, #32]
 8007dfe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e06:	2900      	cmp	r1, #0
 8007e08:	d043      	beq.n	8007e92 <_dtoa_r+0x582>
 8007e0a:	494d      	ldr	r1, [pc, #308]	; (8007f40 <_dtoa_r+0x630>)
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	f7f8 fd1d 	bl	800084c <__aeabi_ddiv>
 8007e12:	4652      	mov	r2, sl
 8007e14:	465b      	mov	r3, fp
 8007e16:	f7f8 fa37 	bl	8000288 <__aeabi_dsub>
 8007e1a:	9d01      	ldr	r5, [sp, #4]
 8007e1c:	4682      	mov	sl, r0
 8007e1e:	468b      	mov	fp, r1
 8007e20:	4649      	mov	r1, r9
 8007e22:	4640      	mov	r0, r8
 8007e24:	f7f8 fe98 	bl	8000b58 <__aeabi_d2iz>
 8007e28:	4606      	mov	r6, r0
 8007e2a:	f7f8 fb7b 	bl	8000524 <__aeabi_i2d>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4640      	mov	r0, r8
 8007e34:	4649      	mov	r1, r9
 8007e36:	f7f8 fa27 	bl	8000288 <__aeabi_dsub>
 8007e3a:	3630      	adds	r6, #48	; 0x30
 8007e3c:	f805 6b01 	strb.w	r6, [r5], #1
 8007e40:	4652      	mov	r2, sl
 8007e42:	465b      	mov	r3, fp
 8007e44:	4680      	mov	r8, r0
 8007e46:	4689      	mov	r9, r1
 8007e48:	f7f8 fe48 	bl	8000adc <__aeabi_dcmplt>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d163      	bne.n	8007f18 <_dtoa_r+0x608>
 8007e50:	4642      	mov	r2, r8
 8007e52:	464b      	mov	r3, r9
 8007e54:	4936      	ldr	r1, [pc, #216]	; (8007f30 <_dtoa_r+0x620>)
 8007e56:	2000      	movs	r0, #0
 8007e58:	f7f8 fa16 	bl	8000288 <__aeabi_dsub>
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	465b      	mov	r3, fp
 8007e60:	f7f8 fe3c 	bl	8000adc <__aeabi_dcmplt>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f040 80b5 	bne.w	8007fd4 <_dtoa_r+0x6c4>
 8007e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e6c:	429d      	cmp	r5, r3
 8007e6e:	d081      	beq.n	8007d74 <_dtoa_r+0x464>
 8007e70:	4b30      	ldr	r3, [pc, #192]	; (8007f34 <_dtoa_r+0x624>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	4650      	mov	r0, sl
 8007e76:	4659      	mov	r1, fp
 8007e78:	f7f8 fbbe 	bl	80005f8 <__aeabi_dmul>
 8007e7c:	4b2d      	ldr	r3, [pc, #180]	; (8007f34 <_dtoa_r+0x624>)
 8007e7e:	4682      	mov	sl, r0
 8007e80:	468b      	mov	fp, r1
 8007e82:	4640      	mov	r0, r8
 8007e84:	4649      	mov	r1, r9
 8007e86:	2200      	movs	r2, #0
 8007e88:	f7f8 fbb6 	bl	80005f8 <__aeabi_dmul>
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	4689      	mov	r9, r1
 8007e90:	e7c6      	b.n	8007e20 <_dtoa_r+0x510>
 8007e92:	4650      	mov	r0, sl
 8007e94:	4659      	mov	r1, fp
 8007e96:	f7f8 fbaf 	bl	80005f8 <__aeabi_dmul>
 8007e9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e9c:	9d01      	ldr	r5, [sp, #4]
 8007e9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	468b      	mov	fp, r1
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	f7f8 fe56 	bl	8000b58 <__aeabi_d2iz>
 8007eac:	4606      	mov	r6, r0
 8007eae:	f7f8 fb39 	bl	8000524 <__aeabi_i2d>
 8007eb2:	3630      	adds	r6, #48	; 0x30
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	4640      	mov	r0, r8
 8007eba:	4649      	mov	r1, r9
 8007ebc:	f7f8 f9e4 	bl	8000288 <__aeabi_dsub>
 8007ec0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	4680      	mov	r8, r0
 8007eca:	4689      	mov	r9, r1
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	d124      	bne.n	8007f1c <_dtoa_r+0x60c>
 8007ed2:	4b1b      	ldr	r3, [pc, #108]	; (8007f40 <_dtoa_r+0x630>)
 8007ed4:	4650      	mov	r0, sl
 8007ed6:	4659      	mov	r1, fp
 8007ed8:	f7f8 f9d8 	bl	800028c <__adddf3>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 fe18 	bl	8000b18 <__aeabi_dcmpgt>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d173      	bne.n	8007fd4 <_dtoa_r+0x6c4>
 8007eec:	4652      	mov	r2, sl
 8007eee:	465b      	mov	r3, fp
 8007ef0:	4913      	ldr	r1, [pc, #76]	; (8007f40 <_dtoa_r+0x630>)
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f7f8 f9c8 	bl	8000288 <__aeabi_dsub>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4640      	mov	r0, r8
 8007efe:	4649      	mov	r1, r9
 8007f00:	f7f8 fdec 	bl	8000adc <__aeabi_dcmplt>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f43f af35 	beq.w	8007d74 <_dtoa_r+0x464>
 8007f0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f0c:	1e6b      	subs	r3, r5, #1
 8007f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f14:	2b30      	cmp	r3, #48	; 0x30
 8007f16:	d0f8      	beq.n	8007f0a <_dtoa_r+0x5fa>
 8007f18:	9700      	str	r7, [sp, #0]
 8007f1a:	e049      	b.n	8007fb0 <_dtoa_r+0x6a0>
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <_dtoa_r+0x624>)
 8007f1e:	f7f8 fb6b 	bl	80005f8 <__aeabi_dmul>
 8007f22:	4680      	mov	r8, r0
 8007f24:	4689      	mov	r9, r1
 8007f26:	e7bd      	b.n	8007ea4 <_dtoa_r+0x594>
 8007f28:	08009c80 	.word	0x08009c80
 8007f2c:	08009c58 	.word	0x08009c58
 8007f30:	3ff00000 	.word	0x3ff00000
 8007f34:	40240000 	.word	0x40240000
 8007f38:	401c0000 	.word	0x401c0000
 8007f3c:	40140000 	.word	0x40140000
 8007f40:	3fe00000 	.word	0x3fe00000
 8007f44:	9d01      	ldr	r5, [sp, #4]
 8007f46:	4656      	mov	r6, sl
 8007f48:	465f      	mov	r7, fp
 8007f4a:	4642      	mov	r2, r8
 8007f4c:	464b      	mov	r3, r9
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	f7f8 fc7b 	bl	800084c <__aeabi_ddiv>
 8007f56:	f7f8 fdff 	bl	8000b58 <__aeabi_d2iz>
 8007f5a:	4682      	mov	sl, r0
 8007f5c:	f7f8 fae2 	bl	8000524 <__aeabi_i2d>
 8007f60:	4642      	mov	r2, r8
 8007f62:	464b      	mov	r3, r9
 8007f64:	f7f8 fb48 	bl	80005f8 <__aeabi_dmul>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	4639      	mov	r1, r7
 8007f70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007f74:	f7f8 f988 	bl	8000288 <__aeabi_dsub>
 8007f78:	f805 6b01 	strb.w	r6, [r5], #1
 8007f7c:	9e01      	ldr	r6, [sp, #4]
 8007f7e:	9f03      	ldr	r7, [sp, #12]
 8007f80:	1bae      	subs	r6, r5, r6
 8007f82:	42b7      	cmp	r7, r6
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	d135      	bne.n	8007ff6 <_dtoa_r+0x6e6>
 8007f8a:	f7f8 f97f 	bl	800028c <__adddf3>
 8007f8e:	4642      	mov	r2, r8
 8007f90:	464b      	mov	r3, r9
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	f7f8 fdbf 	bl	8000b18 <__aeabi_dcmpgt>
 8007f9a:	b9d0      	cbnz	r0, 8007fd2 <_dtoa_r+0x6c2>
 8007f9c:	4642      	mov	r2, r8
 8007f9e:	464b      	mov	r3, r9
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 fd90 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fa8:	b110      	cbz	r0, 8007fb0 <_dtoa_r+0x6a0>
 8007faa:	f01a 0f01 	tst.w	sl, #1
 8007fae:	d110      	bne.n	8007fd2 <_dtoa_r+0x6c2>
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	ee18 1a10 	vmov	r1, s16
 8007fb6:	f000 fd13 	bl	80089e0 <_Bfree>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9800      	ldr	r0, [sp, #0]
 8007fbe:	702b      	strb	r3, [r5, #0]
 8007fc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	6018      	str	r0, [r3, #0]
 8007fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f43f acf1 	beq.w	80079b0 <_dtoa_r+0xa0>
 8007fce:	601d      	str	r5, [r3, #0]
 8007fd0:	e4ee      	b.n	80079b0 <_dtoa_r+0xa0>
 8007fd2:	9f00      	ldr	r7, [sp, #0]
 8007fd4:	462b      	mov	r3, r5
 8007fd6:	461d      	mov	r5, r3
 8007fd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fdc:	2a39      	cmp	r2, #57	; 0x39
 8007fde:	d106      	bne.n	8007fee <_dtoa_r+0x6de>
 8007fe0:	9a01      	ldr	r2, [sp, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d1f7      	bne.n	8007fd6 <_dtoa_r+0x6c6>
 8007fe6:	9901      	ldr	r1, [sp, #4]
 8007fe8:	2230      	movs	r2, #48	; 0x30
 8007fea:	3701      	adds	r7, #1
 8007fec:	700a      	strb	r2, [r1, #0]
 8007fee:	781a      	ldrb	r2, [r3, #0]
 8007ff0:	3201      	adds	r2, #1
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	e790      	b.n	8007f18 <_dtoa_r+0x608>
 8007ff6:	4ba6      	ldr	r3, [pc, #664]	; (8008290 <_dtoa_r+0x980>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f7f8 fafd 	bl	80005f8 <__aeabi_dmul>
 8007ffe:	2200      	movs	r2, #0
 8008000:	2300      	movs	r3, #0
 8008002:	4606      	mov	r6, r0
 8008004:	460f      	mov	r7, r1
 8008006:	f7f8 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800800a:	2800      	cmp	r0, #0
 800800c:	d09d      	beq.n	8007f4a <_dtoa_r+0x63a>
 800800e:	e7cf      	b.n	8007fb0 <_dtoa_r+0x6a0>
 8008010:	9a08      	ldr	r2, [sp, #32]
 8008012:	2a00      	cmp	r2, #0
 8008014:	f000 80d7 	beq.w	80081c6 <_dtoa_r+0x8b6>
 8008018:	9a06      	ldr	r2, [sp, #24]
 800801a:	2a01      	cmp	r2, #1
 800801c:	f300 80ba 	bgt.w	8008194 <_dtoa_r+0x884>
 8008020:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008022:	2a00      	cmp	r2, #0
 8008024:	f000 80b2 	beq.w	800818c <_dtoa_r+0x87c>
 8008028:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800802c:	9e07      	ldr	r6, [sp, #28]
 800802e:	9d04      	ldr	r5, [sp, #16]
 8008030:	9a04      	ldr	r2, [sp, #16]
 8008032:	441a      	add	r2, r3
 8008034:	9204      	str	r2, [sp, #16]
 8008036:	9a05      	ldr	r2, [sp, #20]
 8008038:	2101      	movs	r1, #1
 800803a:	441a      	add	r2, r3
 800803c:	4620      	mov	r0, r4
 800803e:	9205      	str	r2, [sp, #20]
 8008040:	f000 fd86 	bl	8008b50 <__i2b>
 8008044:	4607      	mov	r7, r0
 8008046:	2d00      	cmp	r5, #0
 8008048:	dd0c      	ble.n	8008064 <_dtoa_r+0x754>
 800804a:	9b05      	ldr	r3, [sp, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	dd09      	ble.n	8008064 <_dtoa_r+0x754>
 8008050:	42ab      	cmp	r3, r5
 8008052:	9a04      	ldr	r2, [sp, #16]
 8008054:	bfa8      	it	ge
 8008056:	462b      	movge	r3, r5
 8008058:	1ad2      	subs	r2, r2, r3
 800805a:	9204      	str	r2, [sp, #16]
 800805c:	9a05      	ldr	r2, [sp, #20]
 800805e:	1aed      	subs	r5, r5, r3
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	9305      	str	r3, [sp, #20]
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	b31b      	cbz	r3, 80080b0 <_dtoa_r+0x7a0>
 8008068:	9b08      	ldr	r3, [sp, #32]
 800806a:	2b00      	cmp	r3, #0
 800806c:	f000 80af 	beq.w	80081ce <_dtoa_r+0x8be>
 8008070:	2e00      	cmp	r6, #0
 8008072:	dd13      	ble.n	800809c <_dtoa_r+0x78c>
 8008074:	4639      	mov	r1, r7
 8008076:	4632      	mov	r2, r6
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fe29 	bl	8008cd0 <__pow5mult>
 800807e:	ee18 2a10 	vmov	r2, s16
 8008082:	4601      	mov	r1, r0
 8008084:	4607      	mov	r7, r0
 8008086:	4620      	mov	r0, r4
 8008088:	f000 fd78 	bl	8008b7c <__multiply>
 800808c:	ee18 1a10 	vmov	r1, s16
 8008090:	4680      	mov	r8, r0
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fca4 	bl	80089e0 <_Bfree>
 8008098:	ee08 8a10 	vmov	s16, r8
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	1b9a      	subs	r2, r3, r6
 80080a0:	d006      	beq.n	80080b0 <_dtoa_r+0x7a0>
 80080a2:	ee18 1a10 	vmov	r1, s16
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 fe12 	bl	8008cd0 <__pow5mult>
 80080ac:	ee08 0a10 	vmov	s16, r0
 80080b0:	2101      	movs	r1, #1
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fd4c 	bl	8008b50 <__i2b>
 80080b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	4606      	mov	r6, r0
 80080be:	f340 8088 	ble.w	80081d2 <_dtoa_r+0x8c2>
 80080c2:	461a      	mov	r2, r3
 80080c4:	4601      	mov	r1, r0
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 fe02 	bl	8008cd0 <__pow5mult>
 80080cc:	9b06      	ldr	r3, [sp, #24]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	4606      	mov	r6, r0
 80080d2:	f340 8081 	ble.w	80081d8 <_dtoa_r+0x8c8>
 80080d6:	f04f 0800 	mov.w	r8, #0
 80080da:	6933      	ldr	r3, [r6, #16]
 80080dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80080e0:	6918      	ldr	r0, [r3, #16]
 80080e2:	f000 fce5 	bl	8008ab0 <__hi0bits>
 80080e6:	f1c0 0020 	rsb	r0, r0, #32
 80080ea:	9b05      	ldr	r3, [sp, #20]
 80080ec:	4418      	add	r0, r3
 80080ee:	f010 001f 	ands.w	r0, r0, #31
 80080f2:	f000 8092 	beq.w	800821a <_dtoa_r+0x90a>
 80080f6:	f1c0 0320 	rsb	r3, r0, #32
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	f340 808a 	ble.w	8008214 <_dtoa_r+0x904>
 8008100:	f1c0 001c 	rsb	r0, r0, #28
 8008104:	9b04      	ldr	r3, [sp, #16]
 8008106:	4403      	add	r3, r0
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	9b05      	ldr	r3, [sp, #20]
 800810c:	4403      	add	r3, r0
 800810e:	4405      	add	r5, r0
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	9b04      	ldr	r3, [sp, #16]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dd07      	ble.n	8008128 <_dtoa_r+0x818>
 8008118:	ee18 1a10 	vmov	r1, s16
 800811c:	461a      	mov	r2, r3
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fe30 	bl	8008d84 <__lshift>
 8008124:	ee08 0a10 	vmov	s16, r0
 8008128:	9b05      	ldr	r3, [sp, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	dd05      	ble.n	800813a <_dtoa_r+0x82a>
 800812e:	4631      	mov	r1, r6
 8008130:	461a      	mov	r2, r3
 8008132:	4620      	mov	r0, r4
 8008134:	f000 fe26 	bl	8008d84 <__lshift>
 8008138:	4606      	mov	r6, r0
 800813a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d06e      	beq.n	800821e <_dtoa_r+0x90e>
 8008140:	ee18 0a10 	vmov	r0, s16
 8008144:	4631      	mov	r1, r6
 8008146:	f000 fe8d 	bl	8008e64 <__mcmp>
 800814a:	2800      	cmp	r0, #0
 800814c:	da67      	bge.n	800821e <_dtoa_r+0x90e>
 800814e:	9b00      	ldr	r3, [sp, #0]
 8008150:	3b01      	subs	r3, #1
 8008152:	ee18 1a10 	vmov	r1, s16
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	220a      	movs	r2, #10
 800815a:	2300      	movs	r3, #0
 800815c:	4620      	mov	r0, r4
 800815e:	f000 fc61 	bl	8008a24 <__multadd>
 8008162:	9b08      	ldr	r3, [sp, #32]
 8008164:	ee08 0a10 	vmov	s16, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 81b1 	beq.w	80084d0 <_dtoa_r+0xbc0>
 800816e:	2300      	movs	r3, #0
 8008170:	4639      	mov	r1, r7
 8008172:	220a      	movs	r2, #10
 8008174:	4620      	mov	r0, r4
 8008176:	f000 fc55 	bl	8008a24 <__multadd>
 800817a:	9b02      	ldr	r3, [sp, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	4607      	mov	r7, r0
 8008180:	f300 808e 	bgt.w	80082a0 <_dtoa_r+0x990>
 8008184:	9b06      	ldr	r3, [sp, #24]
 8008186:	2b02      	cmp	r3, #2
 8008188:	dc51      	bgt.n	800822e <_dtoa_r+0x91e>
 800818a:	e089      	b.n	80082a0 <_dtoa_r+0x990>
 800818c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800818e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008192:	e74b      	b.n	800802c <_dtoa_r+0x71c>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	1e5e      	subs	r6, r3, #1
 8008198:	9b07      	ldr	r3, [sp, #28]
 800819a:	42b3      	cmp	r3, r6
 800819c:	bfbf      	itttt	lt
 800819e:	9b07      	ldrlt	r3, [sp, #28]
 80081a0:	9607      	strlt	r6, [sp, #28]
 80081a2:	1af2      	sublt	r2, r6, r3
 80081a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80081a6:	bfb6      	itet	lt
 80081a8:	189b      	addlt	r3, r3, r2
 80081aa:	1b9e      	subge	r6, r3, r6
 80081ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	bfb8      	it	lt
 80081b2:	2600      	movlt	r6, #0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	bfb7      	itett	lt
 80081b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80081bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80081c0:	1a9d      	sublt	r5, r3, r2
 80081c2:	2300      	movlt	r3, #0
 80081c4:	e734      	b.n	8008030 <_dtoa_r+0x720>
 80081c6:	9e07      	ldr	r6, [sp, #28]
 80081c8:	9d04      	ldr	r5, [sp, #16]
 80081ca:	9f08      	ldr	r7, [sp, #32]
 80081cc:	e73b      	b.n	8008046 <_dtoa_r+0x736>
 80081ce:	9a07      	ldr	r2, [sp, #28]
 80081d0:	e767      	b.n	80080a2 <_dtoa_r+0x792>
 80081d2:	9b06      	ldr	r3, [sp, #24]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	dc18      	bgt.n	800820a <_dtoa_r+0x8fa>
 80081d8:	f1ba 0f00 	cmp.w	sl, #0
 80081dc:	d115      	bne.n	800820a <_dtoa_r+0x8fa>
 80081de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081e2:	b993      	cbnz	r3, 800820a <_dtoa_r+0x8fa>
 80081e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081e8:	0d1b      	lsrs	r3, r3, #20
 80081ea:	051b      	lsls	r3, r3, #20
 80081ec:	b183      	cbz	r3, 8008210 <_dtoa_r+0x900>
 80081ee:	9b04      	ldr	r3, [sp, #16]
 80081f0:	3301      	adds	r3, #1
 80081f2:	9304      	str	r3, [sp, #16]
 80081f4:	9b05      	ldr	r3, [sp, #20]
 80081f6:	3301      	adds	r3, #1
 80081f8:	9305      	str	r3, [sp, #20]
 80081fa:	f04f 0801 	mov.w	r8, #1
 80081fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008200:	2b00      	cmp	r3, #0
 8008202:	f47f af6a 	bne.w	80080da <_dtoa_r+0x7ca>
 8008206:	2001      	movs	r0, #1
 8008208:	e76f      	b.n	80080ea <_dtoa_r+0x7da>
 800820a:	f04f 0800 	mov.w	r8, #0
 800820e:	e7f6      	b.n	80081fe <_dtoa_r+0x8ee>
 8008210:	4698      	mov	r8, r3
 8008212:	e7f4      	b.n	80081fe <_dtoa_r+0x8ee>
 8008214:	f43f af7d 	beq.w	8008112 <_dtoa_r+0x802>
 8008218:	4618      	mov	r0, r3
 800821a:	301c      	adds	r0, #28
 800821c:	e772      	b.n	8008104 <_dtoa_r+0x7f4>
 800821e:	9b03      	ldr	r3, [sp, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	dc37      	bgt.n	8008294 <_dtoa_r+0x984>
 8008224:	9b06      	ldr	r3, [sp, #24]
 8008226:	2b02      	cmp	r3, #2
 8008228:	dd34      	ble.n	8008294 <_dtoa_r+0x984>
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	9302      	str	r3, [sp, #8]
 800822e:	9b02      	ldr	r3, [sp, #8]
 8008230:	b96b      	cbnz	r3, 800824e <_dtoa_r+0x93e>
 8008232:	4631      	mov	r1, r6
 8008234:	2205      	movs	r2, #5
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fbf4 	bl	8008a24 <__multadd>
 800823c:	4601      	mov	r1, r0
 800823e:	4606      	mov	r6, r0
 8008240:	ee18 0a10 	vmov	r0, s16
 8008244:	f000 fe0e 	bl	8008e64 <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	f73f adbb 	bgt.w	8007dc4 <_dtoa_r+0x4b4>
 800824e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008250:	9d01      	ldr	r5, [sp, #4]
 8008252:	43db      	mvns	r3, r3
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	f04f 0800 	mov.w	r8, #0
 800825a:	4631      	mov	r1, r6
 800825c:	4620      	mov	r0, r4
 800825e:	f000 fbbf 	bl	80089e0 <_Bfree>
 8008262:	2f00      	cmp	r7, #0
 8008264:	f43f aea4 	beq.w	8007fb0 <_dtoa_r+0x6a0>
 8008268:	f1b8 0f00 	cmp.w	r8, #0
 800826c:	d005      	beq.n	800827a <_dtoa_r+0x96a>
 800826e:	45b8      	cmp	r8, r7
 8008270:	d003      	beq.n	800827a <_dtoa_r+0x96a>
 8008272:	4641      	mov	r1, r8
 8008274:	4620      	mov	r0, r4
 8008276:	f000 fbb3 	bl	80089e0 <_Bfree>
 800827a:	4639      	mov	r1, r7
 800827c:	4620      	mov	r0, r4
 800827e:	f000 fbaf 	bl	80089e0 <_Bfree>
 8008282:	e695      	b.n	8007fb0 <_dtoa_r+0x6a0>
 8008284:	2600      	movs	r6, #0
 8008286:	4637      	mov	r7, r6
 8008288:	e7e1      	b.n	800824e <_dtoa_r+0x93e>
 800828a:	9700      	str	r7, [sp, #0]
 800828c:	4637      	mov	r7, r6
 800828e:	e599      	b.n	8007dc4 <_dtoa_r+0x4b4>
 8008290:	40240000 	.word	0x40240000
 8008294:	9b08      	ldr	r3, [sp, #32]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 80ca 	beq.w	8008430 <_dtoa_r+0xb20>
 800829c:	9b03      	ldr	r3, [sp, #12]
 800829e:	9302      	str	r3, [sp, #8]
 80082a0:	2d00      	cmp	r5, #0
 80082a2:	dd05      	ble.n	80082b0 <_dtoa_r+0x9a0>
 80082a4:	4639      	mov	r1, r7
 80082a6:	462a      	mov	r2, r5
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 fd6b 	bl	8008d84 <__lshift>
 80082ae:	4607      	mov	r7, r0
 80082b0:	f1b8 0f00 	cmp.w	r8, #0
 80082b4:	d05b      	beq.n	800836e <_dtoa_r+0xa5e>
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 fb51 	bl	8008960 <_Balloc>
 80082be:	4605      	mov	r5, r0
 80082c0:	b928      	cbnz	r0, 80082ce <_dtoa_r+0x9be>
 80082c2:	4b87      	ldr	r3, [pc, #540]	; (80084e0 <_dtoa_r+0xbd0>)
 80082c4:	4602      	mov	r2, r0
 80082c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80082ca:	f7ff bb3b 	b.w	8007944 <_dtoa_r+0x34>
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	3202      	adds	r2, #2
 80082d2:	0092      	lsls	r2, r2, #2
 80082d4:	f107 010c 	add.w	r1, r7, #12
 80082d8:	300c      	adds	r0, #12
 80082da:	f000 fb33 	bl	8008944 <memcpy>
 80082de:	2201      	movs	r2, #1
 80082e0:	4629      	mov	r1, r5
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fd4e 	bl	8008d84 <__lshift>
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	f103 0901 	add.w	r9, r3, #1
 80082ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80082f2:	4413      	add	r3, r2
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	f00a 0301 	and.w	r3, sl, #1
 80082fa:	46b8      	mov	r8, r7
 80082fc:	9304      	str	r3, [sp, #16]
 80082fe:	4607      	mov	r7, r0
 8008300:	4631      	mov	r1, r6
 8008302:	ee18 0a10 	vmov	r0, s16
 8008306:	f7ff fa77 	bl	80077f8 <quorem>
 800830a:	4641      	mov	r1, r8
 800830c:	9002      	str	r0, [sp, #8]
 800830e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008312:	ee18 0a10 	vmov	r0, s16
 8008316:	f000 fda5 	bl	8008e64 <__mcmp>
 800831a:	463a      	mov	r2, r7
 800831c:	9003      	str	r0, [sp, #12]
 800831e:	4631      	mov	r1, r6
 8008320:	4620      	mov	r0, r4
 8008322:	f000 fdbb 	bl	8008e9c <__mdiff>
 8008326:	68c2      	ldr	r2, [r0, #12]
 8008328:	f109 3bff 	add.w	fp, r9, #4294967295
 800832c:	4605      	mov	r5, r0
 800832e:	bb02      	cbnz	r2, 8008372 <_dtoa_r+0xa62>
 8008330:	4601      	mov	r1, r0
 8008332:	ee18 0a10 	vmov	r0, s16
 8008336:	f000 fd95 	bl	8008e64 <__mcmp>
 800833a:	4602      	mov	r2, r0
 800833c:	4629      	mov	r1, r5
 800833e:	4620      	mov	r0, r4
 8008340:	9207      	str	r2, [sp, #28]
 8008342:	f000 fb4d 	bl	80089e0 <_Bfree>
 8008346:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800834a:	ea43 0102 	orr.w	r1, r3, r2
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	430b      	orrs	r3, r1
 8008352:	464d      	mov	r5, r9
 8008354:	d10f      	bne.n	8008376 <_dtoa_r+0xa66>
 8008356:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800835a:	d02a      	beq.n	80083b2 <_dtoa_r+0xaa2>
 800835c:	9b03      	ldr	r3, [sp, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	dd02      	ble.n	8008368 <_dtoa_r+0xa58>
 8008362:	9b02      	ldr	r3, [sp, #8]
 8008364:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008368:	f88b a000 	strb.w	sl, [fp]
 800836c:	e775      	b.n	800825a <_dtoa_r+0x94a>
 800836e:	4638      	mov	r0, r7
 8008370:	e7ba      	b.n	80082e8 <_dtoa_r+0x9d8>
 8008372:	2201      	movs	r2, #1
 8008374:	e7e2      	b.n	800833c <_dtoa_r+0xa2c>
 8008376:	9b03      	ldr	r3, [sp, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	db04      	blt.n	8008386 <_dtoa_r+0xa76>
 800837c:	9906      	ldr	r1, [sp, #24]
 800837e:	430b      	orrs	r3, r1
 8008380:	9904      	ldr	r1, [sp, #16]
 8008382:	430b      	orrs	r3, r1
 8008384:	d122      	bne.n	80083cc <_dtoa_r+0xabc>
 8008386:	2a00      	cmp	r2, #0
 8008388:	ddee      	ble.n	8008368 <_dtoa_r+0xa58>
 800838a:	ee18 1a10 	vmov	r1, s16
 800838e:	2201      	movs	r2, #1
 8008390:	4620      	mov	r0, r4
 8008392:	f000 fcf7 	bl	8008d84 <__lshift>
 8008396:	4631      	mov	r1, r6
 8008398:	ee08 0a10 	vmov	s16, r0
 800839c:	f000 fd62 	bl	8008e64 <__mcmp>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	dc03      	bgt.n	80083ac <_dtoa_r+0xa9c>
 80083a4:	d1e0      	bne.n	8008368 <_dtoa_r+0xa58>
 80083a6:	f01a 0f01 	tst.w	sl, #1
 80083aa:	d0dd      	beq.n	8008368 <_dtoa_r+0xa58>
 80083ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083b0:	d1d7      	bne.n	8008362 <_dtoa_r+0xa52>
 80083b2:	2339      	movs	r3, #57	; 0x39
 80083b4:	f88b 3000 	strb.w	r3, [fp]
 80083b8:	462b      	mov	r3, r5
 80083ba:	461d      	mov	r5, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083c2:	2a39      	cmp	r2, #57	; 0x39
 80083c4:	d071      	beq.n	80084aa <_dtoa_r+0xb9a>
 80083c6:	3201      	adds	r2, #1
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e746      	b.n	800825a <_dtoa_r+0x94a>
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	dd07      	ble.n	80083e0 <_dtoa_r+0xad0>
 80083d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083d4:	d0ed      	beq.n	80083b2 <_dtoa_r+0xaa2>
 80083d6:	f10a 0301 	add.w	r3, sl, #1
 80083da:	f88b 3000 	strb.w	r3, [fp]
 80083de:	e73c      	b.n	800825a <_dtoa_r+0x94a>
 80083e0:	9b05      	ldr	r3, [sp, #20]
 80083e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80083e6:	4599      	cmp	r9, r3
 80083e8:	d047      	beq.n	800847a <_dtoa_r+0xb6a>
 80083ea:	ee18 1a10 	vmov	r1, s16
 80083ee:	2300      	movs	r3, #0
 80083f0:	220a      	movs	r2, #10
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 fb16 	bl	8008a24 <__multadd>
 80083f8:	45b8      	cmp	r8, r7
 80083fa:	ee08 0a10 	vmov	s16, r0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	f04f 020a 	mov.w	r2, #10
 8008406:	4641      	mov	r1, r8
 8008408:	4620      	mov	r0, r4
 800840a:	d106      	bne.n	800841a <_dtoa_r+0xb0a>
 800840c:	f000 fb0a 	bl	8008a24 <__multadd>
 8008410:	4680      	mov	r8, r0
 8008412:	4607      	mov	r7, r0
 8008414:	f109 0901 	add.w	r9, r9, #1
 8008418:	e772      	b.n	8008300 <_dtoa_r+0x9f0>
 800841a:	f000 fb03 	bl	8008a24 <__multadd>
 800841e:	4639      	mov	r1, r7
 8008420:	4680      	mov	r8, r0
 8008422:	2300      	movs	r3, #0
 8008424:	220a      	movs	r2, #10
 8008426:	4620      	mov	r0, r4
 8008428:	f000 fafc 	bl	8008a24 <__multadd>
 800842c:	4607      	mov	r7, r0
 800842e:	e7f1      	b.n	8008414 <_dtoa_r+0xb04>
 8008430:	9b03      	ldr	r3, [sp, #12]
 8008432:	9302      	str	r3, [sp, #8]
 8008434:	9d01      	ldr	r5, [sp, #4]
 8008436:	ee18 0a10 	vmov	r0, s16
 800843a:	4631      	mov	r1, r6
 800843c:	f7ff f9dc 	bl	80077f8 <quorem>
 8008440:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008444:	9b01      	ldr	r3, [sp, #4]
 8008446:	f805 ab01 	strb.w	sl, [r5], #1
 800844a:	1aea      	subs	r2, r5, r3
 800844c:	9b02      	ldr	r3, [sp, #8]
 800844e:	4293      	cmp	r3, r2
 8008450:	dd09      	ble.n	8008466 <_dtoa_r+0xb56>
 8008452:	ee18 1a10 	vmov	r1, s16
 8008456:	2300      	movs	r3, #0
 8008458:	220a      	movs	r2, #10
 800845a:	4620      	mov	r0, r4
 800845c:	f000 fae2 	bl	8008a24 <__multadd>
 8008460:	ee08 0a10 	vmov	s16, r0
 8008464:	e7e7      	b.n	8008436 <_dtoa_r+0xb26>
 8008466:	9b02      	ldr	r3, [sp, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfc8      	it	gt
 800846c:	461d      	movgt	r5, r3
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	bfd8      	it	le
 8008472:	2501      	movle	r5, #1
 8008474:	441d      	add	r5, r3
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	ee18 1a10 	vmov	r1, s16
 800847e:	2201      	movs	r2, #1
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fc7f 	bl	8008d84 <__lshift>
 8008486:	4631      	mov	r1, r6
 8008488:	ee08 0a10 	vmov	s16, r0
 800848c:	f000 fcea 	bl	8008e64 <__mcmp>
 8008490:	2800      	cmp	r0, #0
 8008492:	dc91      	bgt.n	80083b8 <_dtoa_r+0xaa8>
 8008494:	d102      	bne.n	800849c <_dtoa_r+0xb8c>
 8008496:	f01a 0f01 	tst.w	sl, #1
 800849a:	d18d      	bne.n	80083b8 <_dtoa_r+0xaa8>
 800849c:	462b      	mov	r3, r5
 800849e:	461d      	mov	r5, r3
 80084a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084a4:	2a30      	cmp	r2, #48	; 0x30
 80084a6:	d0fa      	beq.n	800849e <_dtoa_r+0xb8e>
 80084a8:	e6d7      	b.n	800825a <_dtoa_r+0x94a>
 80084aa:	9a01      	ldr	r2, [sp, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d184      	bne.n	80083ba <_dtoa_r+0xaaa>
 80084b0:	9b00      	ldr	r3, [sp, #0]
 80084b2:	3301      	adds	r3, #1
 80084b4:	9300      	str	r3, [sp, #0]
 80084b6:	2331      	movs	r3, #49	; 0x31
 80084b8:	7013      	strb	r3, [r2, #0]
 80084ba:	e6ce      	b.n	800825a <_dtoa_r+0x94a>
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <_dtoa_r+0xbd4>)
 80084be:	f7ff ba95 	b.w	80079ec <_dtoa_r+0xdc>
 80084c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f47f aa6e 	bne.w	80079a6 <_dtoa_r+0x96>
 80084ca:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <_dtoa_r+0xbd8>)
 80084cc:	f7ff ba8e 	b.w	80079ec <_dtoa_r+0xdc>
 80084d0:	9b02      	ldr	r3, [sp, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dcae      	bgt.n	8008434 <_dtoa_r+0xb24>
 80084d6:	9b06      	ldr	r3, [sp, #24]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	f73f aea8 	bgt.w	800822e <_dtoa_r+0x91e>
 80084de:	e7a9      	b.n	8008434 <_dtoa_r+0xb24>
 80084e0:	08009b87 	.word	0x08009b87
 80084e4:	08009ae4 	.word	0x08009ae4
 80084e8:	08009b08 	.word	0x08009b08

080084ec <__sflush_r>:
 80084ec:	898a      	ldrh	r2, [r1, #12]
 80084ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f2:	4605      	mov	r5, r0
 80084f4:	0710      	lsls	r0, r2, #28
 80084f6:	460c      	mov	r4, r1
 80084f8:	d458      	bmi.n	80085ac <__sflush_r+0xc0>
 80084fa:	684b      	ldr	r3, [r1, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dc05      	bgt.n	800850c <__sflush_r+0x20>
 8008500:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008502:	2b00      	cmp	r3, #0
 8008504:	dc02      	bgt.n	800850c <__sflush_r+0x20>
 8008506:	2000      	movs	r0, #0
 8008508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800850c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800850e:	2e00      	cmp	r6, #0
 8008510:	d0f9      	beq.n	8008506 <__sflush_r+0x1a>
 8008512:	2300      	movs	r3, #0
 8008514:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008518:	682f      	ldr	r7, [r5, #0]
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	d032      	beq.n	8008584 <__sflush_r+0x98>
 800851e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	075a      	lsls	r2, r3, #29
 8008524:	d505      	bpl.n	8008532 <__sflush_r+0x46>
 8008526:	6863      	ldr	r3, [r4, #4]
 8008528:	1ac0      	subs	r0, r0, r3
 800852a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800852c:	b10b      	cbz	r3, 8008532 <__sflush_r+0x46>
 800852e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008530:	1ac0      	subs	r0, r0, r3
 8008532:	2300      	movs	r3, #0
 8008534:	4602      	mov	r2, r0
 8008536:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008538:	6a21      	ldr	r1, [r4, #32]
 800853a:	4628      	mov	r0, r5
 800853c:	47b0      	blx	r6
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	d106      	bne.n	8008552 <__sflush_r+0x66>
 8008544:	6829      	ldr	r1, [r5, #0]
 8008546:	291d      	cmp	r1, #29
 8008548:	d82c      	bhi.n	80085a4 <__sflush_r+0xb8>
 800854a:	4a2a      	ldr	r2, [pc, #168]	; (80085f4 <__sflush_r+0x108>)
 800854c:	40ca      	lsrs	r2, r1
 800854e:	07d6      	lsls	r6, r2, #31
 8008550:	d528      	bpl.n	80085a4 <__sflush_r+0xb8>
 8008552:	2200      	movs	r2, #0
 8008554:	6062      	str	r2, [r4, #4]
 8008556:	04d9      	lsls	r1, r3, #19
 8008558:	6922      	ldr	r2, [r4, #16]
 800855a:	6022      	str	r2, [r4, #0]
 800855c:	d504      	bpl.n	8008568 <__sflush_r+0x7c>
 800855e:	1c42      	adds	r2, r0, #1
 8008560:	d101      	bne.n	8008566 <__sflush_r+0x7a>
 8008562:	682b      	ldr	r3, [r5, #0]
 8008564:	b903      	cbnz	r3, 8008568 <__sflush_r+0x7c>
 8008566:	6560      	str	r0, [r4, #84]	; 0x54
 8008568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800856a:	602f      	str	r7, [r5, #0]
 800856c:	2900      	cmp	r1, #0
 800856e:	d0ca      	beq.n	8008506 <__sflush_r+0x1a>
 8008570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008574:	4299      	cmp	r1, r3
 8008576:	d002      	beq.n	800857e <__sflush_r+0x92>
 8008578:	4628      	mov	r0, r5
 800857a:	f000 fd8b 	bl	8009094 <_free_r>
 800857e:	2000      	movs	r0, #0
 8008580:	6360      	str	r0, [r4, #52]	; 0x34
 8008582:	e7c1      	b.n	8008508 <__sflush_r+0x1c>
 8008584:	6a21      	ldr	r1, [r4, #32]
 8008586:	2301      	movs	r3, #1
 8008588:	4628      	mov	r0, r5
 800858a:	47b0      	blx	r6
 800858c:	1c41      	adds	r1, r0, #1
 800858e:	d1c7      	bne.n	8008520 <__sflush_r+0x34>
 8008590:	682b      	ldr	r3, [r5, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0c4      	beq.n	8008520 <__sflush_r+0x34>
 8008596:	2b1d      	cmp	r3, #29
 8008598:	d001      	beq.n	800859e <__sflush_r+0xb2>
 800859a:	2b16      	cmp	r3, #22
 800859c:	d101      	bne.n	80085a2 <__sflush_r+0xb6>
 800859e:	602f      	str	r7, [r5, #0]
 80085a0:	e7b1      	b.n	8008506 <__sflush_r+0x1a>
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	e7ad      	b.n	8008508 <__sflush_r+0x1c>
 80085ac:	690f      	ldr	r7, [r1, #16]
 80085ae:	2f00      	cmp	r7, #0
 80085b0:	d0a9      	beq.n	8008506 <__sflush_r+0x1a>
 80085b2:	0793      	lsls	r3, r2, #30
 80085b4:	680e      	ldr	r6, [r1, #0]
 80085b6:	bf08      	it	eq
 80085b8:	694b      	ldreq	r3, [r1, #20]
 80085ba:	600f      	str	r7, [r1, #0]
 80085bc:	bf18      	it	ne
 80085be:	2300      	movne	r3, #0
 80085c0:	eba6 0807 	sub.w	r8, r6, r7
 80085c4:	608b      	str	r3, [r1, #8]
 80085c6:	f1b8 0f00 	cmp.w	r8, #0
 80085ca:	dd9c      	ble.n	8008506 <__sflush_r+0x1a>
 80085cc:	6a21      	ldr	r1, [r4, #32]
 80085ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80085d0:	4643      	mov	r3, r8
 80085d2:	463a      	mov	r2, r7
 80085d4:	4628      	mov	r0, r5
 80085d6:	47b0      	blx	r6
 80085d8:	2800      	cmp	r0, #0
 80085da:	dc06      	bgt.n	80085ea <__sflush_r+0xfe>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085e2:	81a3      	strh	r3, [r4, #12]
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	e78e      	b.n	8008508 <__sflush_r+0x1c>
 80085ea:	4407      	add	r7, r0
 80085ec:	eba8 0800 	sub.w	r8, r8, r0
 80085f0:	e7e9      	b.n	80085c6 <__sflush_r+0xda>
 80085f2:	bf00      	nop
 80085f4:	20400001 	.word	0x20400001

080085f8 <_fflush_r>:
 80085f8:	b538      	push	{r3, r4, r5, lr}
 80085fa:	690b      	ldr	r3, [r1, #16]
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	b913      	cbnz	r3, 8008608 <_fflush_r+0x10>
 8008602:	2500      	movs	r5, #0
 8008604:	4628      	mov	r0, r5
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	b118      	cbz	r0, 8008612 <_fflush_r+0x1a>
 800860a:	6983      	ldr	r3, [r0, #24]
 800860c:	b90b      	cbnz	r3, 8008612 <_fflush_r+0x1a>
 800860e:	f000 f887 	bl	8008720 <__sinit>
 8008612:	4b14      	ldr	r3, [pc, #80]	; (8008664 <_fflush_r+0x6c>)
 8008614:	429c      	cmp	r4, r3
 8008616:	d11b      	bne.n	8008650 <_fflush_r+0x58>
 8008618:	686c      	ldr	r4, [r5, #4]
 800861a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0ef      	beq.n	8008602 <_fflush_r+0xa>
 8008622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008624:	07d0      	lsls	r0, r2, #31
 8008626:	d404      	bmi.n	8008632 <_fflush_r+0x3a>
 8008628:	0599      	lsls	r1, r3, #22
 800862a:	d402      	bmi.n	8008632 <_fflush_r+0x3a>
 800862c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800862e:	f000 f91a 	bl	8008866 <__retarget_lock_acquire_recursive>
 8008632:	4628      	mov	r0, r5
 8008634:	4621      	mov	r1, r4
 8008636:	f7ff ff59 	bl	80084ec <__sflush_r>
 800863a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800863c:	07da      	lsls	r2, r3, #31
 800863e:	4605      	mov	r5, r0
 8008640:	d4e0      	bmi.n	8008604 <_fflush_r+0xc>
 8008642:	89a3      	ldrh	r3, [r4, #12]
 8008644:	059b      	lsls	r3, r3, #22
 8008646:	d4dd      	bmi.n	8008604 <_fflush_r+0xc>
 8008648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800864a:	f000 f90d 	bl	8008868 <__retarget_lock_release_recursive>
 800864e:	e7d9      	b.n	8008604 <_fflush_r+0xc>
 8008650:	4b05      	ldr	r3, [pc, #20]	; (8008668 <_fflush_r+0x70>)
 8008652:	429c      	cmp	r4, r3
 8008654:	d101      	bne.n	800865a <_fflush_r+0x62>
 8008656:	68ac      	ldr	r4, [r5, #8]
 8008658:	e7df      	b.n	800861a <_fflush_r+0x22>
 800865a:	4b04      	ldr	r3, [pc, #16]	; (800866c <_fflush_r+0x74>)
 800865c:	429c      	cmp	r4, r3
 800865e:	bf08      	it	eq
 8008660:	68ec      	ldreq	r4, [r5, #12]
 8008662:	e7da      	b.n	800861a <_fflush_r+0x22>
 8008664:	08009bb8 	.word	0x08009bb8
 8008668:	08009bd8 	.word	0x08009bd8
 800866c:	08009b98 	.word	0x08009b98

08008670 <std>:
 8008670:	2300      	movs	r3, #0
 8008672:	b510      	push	{r4, lr}
 8008674:	4604      	mov	r4, r0
 8008676:	e9c0 3300 	strd	r3, r3, [r0]
 800867a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800867e:	6083      	str	r3, [r0, #8]
 8008680:	8181      	strh	r1, [r0, #12]
 8008682:	6643      	str	r3, [r0, #100]	; 0x64
 8008684:	81c2      	strh	r2, [r0, #14]
 8008686:	6183      	str	r3, [r0, #24]
 8008688:	4619      	mov	r1, r3
 800868a:	2208      	movs	r2, #8
 800868c:	305c      	adds	r0, #92	; 0x5c
 800868e:	f7fe faf3 	bl	8006c78 <memset>
 8008692:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <std+0x38>)
 8008694:	6263      	str	r3, [r4, #36]	; 0x24
 8008696:	4b05      	ldr	r3, [pc, #20]	; (80086ac <std+0x3c>)
 8008698:	62a3      	str	r3, [r4, #40]	; 0x28
 800869a:	4b05      	ldr	r3, [pc, #20]	; (80086b0 <std+0x40>)
 800869c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800869e:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <std+0x44>)
 80086a0:	6224      	str	r4, [r4, #32]
 80086a2:	6323      	str	r3, [r4, #48]	; 0x30
 80086a4:	bd10      	pop	{r4, pc}
 80086a6:	bf00      	nop
 80086a8:	08009529 	.word	0x08009529
 80086ac:	0800954b 	.word	0x0800954b
 80086b0:	08009583 	.word	0x08009583
 80086b4:	080095a7 	.word	0x080095a7

080086b8 <_cleanup_r>:
 80086b8:	4901      	ldr	r1, [pc, #4]	; (80086c0 <_cleanup_r+0x8>)
 80086ba:	f000 b8af 	b.w	800881c <_fwalk_reent>
 80086be:	bf00      	nop
 80086c0:	080085f9 	.word	0x080085f9

080086c4 <__sfmoreglue>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	2268      	movs	r2, #104	; 0x68
 80086c8:	1e4d      	subs	r5, r1, #1
 80086ca:	4355      	muls	r5, r2
 80086cc:	460e      	mov	r6, r1
 80086ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80086d2:	f000 fd4b 	bl	800916c <_malloc_r>
 80086d6:	4604      	mov	r4, r0
 80086d8:	b140      	cbz	r0, 80086ec <__sfmoreglue+0x28>
 80086da:	2100      	movs	r1, #0
 80086dc:	e9c0 1600 	strd	r1, r6, [r0]
 80086e0:	300c      	adds	r0, #12
 80086e2:	60a0      	str	r0, [r4, #8]
 80086e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80086e8:	f7fe fac6 	bl	8006c78 <memset>
 80086ec:	4620      	mov	r0, r4
 80086ee:	bd70      	pop	{r4, r5, r6, pc}

080086f0 <__sfp_lock_acquire>:
 80086f0:	4801      	ldr	r0, [pc, #4]	; (80086f8 <__sfp_lock_acquire+0x8>)
 80086f2:	f000 b8b8 	b.w	8008866 <__retarget_lock_acquire_recursive>
 80086f6:	bf00      	nop
 80086f8:	2000158d 	.word	0x2000158d

080086fc <__sfp_lock_release>:
 80086fc:	4801      	ldr	r0, [pc, #4]	; (8008704 <__sfp_lock_release+0x8>)
 80086fe:	f000 b8b3 	b.w	8008868 <__retarget_lock_release_recursive>
 8008702:	bf00      	nop
 8008704:	2000158d 	.word	0x2000158d

08008708 <__sinit_lock_acquire>:
 8008708:	4801      	ldr	r0, [pc, #4]	; (8008710 <__sinit_lock_acquire+0x8>)
 800870a:	f000 b8ac 	b.w	8008866 <__retarget_lock_acquire_recursive>
 800870e:	bf00      	nop
 8008710:	2000158e 	.word	0x2000158e

08008714 <__sinit_lock_release>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__sinit_lock_release+0x8>)
 8008716:	f000 b8a7 	b.w	8008868 <__retarget_lock_release_recursive>
 800871a:	bf00      	nop
 800871c:	2000158e 	.word	0x2000158e

08008720 <__sinit>:
 8008720:	b510      	push	{r4, lr}
 8008722:	4604      	mov	r4, r0
 8008724:	f7ff fff0 	bl	8008708 <__sinit_lock_acquire>
 8008728:	69a3      	ldr	r3, [r4, #24]
 800872a:	b11b      	cbz	r3, 8008734 <__sinit+0x14>
 800872c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008730:	f7ff bff0 	b.w	8008714 <__sinit_lock_release>
 8008734:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008738:	6523      	str	r3, [r4, #80]	; 0x50
 800873a:	4b13      	ldr	r3, [pc, #76]	; (8008788 <__sinit+0x68>)
 800873c:	4a13      	ldr	r2, [pc, #76]	; (800878c <__sinit+0x6c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	62a2      	str	r2, [r4, #40]	; 0x28
 8008742:	42a3      	cmp	r3, r4
 8008744:	bf04      	itt	eq
 8008746:	2301      	moveq	r3, #1
 8008748:	61a3      	streq	r3, [r4, #24]
 800874a:	4620      	mov	r0, r4
 800874c:	f000 f820 	bl	8008790 <__sfp>
 8008750:	6060      	str	r0, [r4, #4]
 8008752:	4620      	mov	r0, r4
 8008754:	f000 f81c 	bl	8008790 <__sfp>
 8008758:	60a0      	str	r0, [r4, #8]
 800875a:	4620      	mov	r0, r4
 800875c:	f000 f818 	bl	8008790 <__sfp>
 8008760:	2200      	movs	r2, #0
 8008762:	60e0      	str	r0, [r4, #12]
 8008764:	2104      	movs	r1, #4
 8008766:	6860      	ldr	r0, [r4, #4]
 8008768:	f7ff ff82 	bl	8008670 <std>
 800876c:	68a0      	ldr	r0, [r4, #8]
 800876e:	2201      	movs	r2, #1
 8008770:	2109      	movs	r1, #9
 8008772:	f7ff ff7d 	bl	8008670 <std>
 8008776:	68e0      	ldr	r0, [r4, #12]
 8008778:	2202      	movs	r2, #2
 800877a:	2112      	movs	r1, #18
 800877c:	f7ff ff78 	bl	8008670 <std>
 8008780:	2301      	movs	r3, #1
 8008782:	61a3      	str	r3, [r4, #24]
 8008784:	e7d2      	b.n	800872c <__sinit+0xc>
 8008786:	bf00      	nop
 8008788:	08009ad0 	.word	0x08009ad0
 800878c:	080086b9 	.word	0x080086b9

08008790 <__sfp>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	4607      	mov	r7, r0
 8008794:	f7ff ffac 	bl	80086f0 <__sfp_lock_acquire>
 8008798:	4b1e      	ldr	r3, [pc, #120]	; (8008814 <__sfp+0x84>)
 800879a:	681e      	ldr	r6, [r3, #0]
 800879c:	69b3      	ldr	r3, [r6, #24]
 800879e:	b913      	cbnz	r3, 80087a6 <__sfp+0x16>
 80087a0:	4630      	mov	r0, r6
 80087a2:	f7ff ffbd 	bl	8008720 <__sinit>
 80087a6:	3648      	adds	r6, #72	; 0x48
 80087a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	d503      	bpl.n	80087b8 <__sfp+0x28>
 80087b0:	6833      	ldr	r3, [r6, #0]
 80087b2:	b30b      	cbz	r3, 80087f8 <__sfp+0x68>
 80087b4:	6836      	ldr	r6, [r6, #0]
 80087b6:	e7f7      	b.n	80087a8 <__sfp+0x18>
 80087b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80087bc:	b9d5      	cbnz	r5, 80087f4 <__sfp+0x64>
 80087be:	4b16      	ldr	r3, [pc, #88]	; (8008818 <__sfp+0x88>)
 80087c0:	60e3      	str	r3, [r4, #12]
 80087c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087c6:	6665      	str	r5, [r4, #100]	; 0x64
 80087c8:	f000 f84c 	bl	8008864 <__retarget_lock_init_recursive>
 80087cc:	f7ff ff96 	bl	80086fc <__sfp_lock_release>
 80087d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80087d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80087d8:	6025      	str	r5, [r4, #0]
 80087da:	61a5      	str	r5, [r4, #24]
 80087dc:	2208      	movs	r2, #8
 80087de:	4629      	mov	r1, r5
 80087e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80087e4:	f7fe fa48 	bl	8006c78 <memset>
 80087e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80087ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80087f0:	4620      	mov	r0, r4
 80087f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f4:	3468      	adds	r4, #104	; 0x68
 80087f6:	e7d9      	b.n	80087ac <__sfp+0x1c>
 80087f8:	2104      	movs	r1, #4
 80087fa:	4638      	mov	r0, r7
 80087fc:	f7ff ff62 	bl	80086c4 <__sfmoreglue>
 8008800:	4604      	mov	r4, r0
 8008802:	6030      	str	r0, [r6, #0]
 8008804:	2800      	cmp	r0, #0
 8008806:	d1d5      	bne.n	80087b4 <__sfp+0x24>
 8008808:	f7ff ff78 	bl	80086fc <__sfp_lock_release>
 800880c:	230c      	movs	r3, #12
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	e7ee      	b.n	80087f0 <__sfp+0x60>
 8008812:	bf00      	nop
 8008814:	08009ad0 	.word	0x08009ad0
 8008818:	ffff0001 	.word	0xffff0001

0800881c <_fwalk_reent>:
 800881c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008820:	4606      	mov	r6, r0
 8008822:	4688      	mov	r8, r1
 8008824:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008828:	2700      	movs	r7, #0
 800882a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800882e:	f1b9 0901 	subs.w	r9, r9, #1
 8008832:	d505      	bpl.n	8008840 <_fwalk_reent+0x24>
 8008834:	6824      	ldr	r4, [r4, #0]
 8008836:	2c00      	cmp	r4, #0
 8008838:	d1f7      	bne.n	800882a <_fwalk_reent+0xe>
 800883a:	4638      	mov	r0, r7
 800883c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008840:	89ab      	ldrh	r3, [r5, #12]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d907      	bls.n	8008856 <_fwalk_reent+0x3a>
 8008846:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800884a:	3301      	adds	r3, #1
 800884c:	d003      	beq.n	8008856 <_fwalk_reent+0x3a>
 800884e:	4629      	mov	r1, r5
 8008850:	4630      	mov	r0, r6
 8008852:	47c0      	blx	r8
 8008854:	4307      	orrs	r7, r0
 8008856:	3568      	adds	r5, #104	; 0x68
 8008858:	e7e9      	b.n	800882e <_fwalk_reent+0x12>
	...

0800885c <_localeconv_r>:
 800885c:	4800      	ldr	r0, [pc, #0]	; (8008860 <_localeconv_r+0x4>)
 800885e:	4770      	bx	lr
 8008860:	20000160 	.word	0x20000160

08008864 <__retarget_lock_init_recursive>:
 8008864:	4770      	bx	lr

08008866 <__retarget_lock_acquire_recursive>:
 8008866:	4770      	bx	lr

08008868 <__retarget_lock_release_recursive>:
 8008868:	4770      	bx	lr

0800886a <__swhatbuf_r>:
 800886a:	b570      	push	{r4, r5, r6, lr}
 800886c:	460e      	mov	r6, r1
 800886e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008872:	2900      	cmp	r1, #0
 8008874:	b096      	sub	sp, #88	; 0x58
 8008876:	4614      	mov	r4, r2
 8008878:	461d      	mov	r5, r3
 800887a:	da08      	bge.n	800888e <__swhatbuf_r+0x24>
 800887c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	602a      	str	r2, [r5, #0]
 8008884:	061a      	lsls	r2, r3, #24
 8008886:	d410      	bmi.n	80088aa <__swhatbuf_r+0x40>
 8008888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888c:	e00e      	b.n	80088ac <__swhatbuf_r+0x42>
 800888e:	466a      	mov	r2, sp
 8008890:	f000 fee0 	bl	8009654 <_fstat_r>
 8008894:	2800      	cmp	r0, #0
 8008896:	dbf1      	blt.n	800887c <__swhatbuf_r+0x12>
 8008898:	9a01      	ldr	r2, [sp, #4]
 800889a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800889e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80088a2:	425a      	negs	r2, r3
 80088a4:	415a      	adcs	r2, r3
 80088a6:	602a      	str	r2, [r5, #0]
 80088a8:	e7ee      	b.n	8008888 <__swhatbuf_r+0x1e>
 80088aa:	2340      	movs	r3, #64	; 0x40
 80088ac:	2000      	movs	r0, #0
 80088ae:	6023      	str	r3, [r4, #0]
 80088b0:	b016      	add	sp, #88	; 0x58
 80088b2:	bd70      	pop	{r4, r5, r6, pc}

080088b4 <__smakebuf_r>:
 80088b4:	898b      	ldrh	r3, [r1, #12]
 80088b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088b8:	079d      	lsls	r5, r3, #30
 80088ba:	4606      	mov	r6, r0
 80088bc:	460c      	mov	r4, r1
 80088be:	d507      	bpl.n	80088d0 <__smakebuf_r+0x1c>
 80088c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088c4:	6023      	str	r3, [r4, #0]
 80088c6:	6123      	str	r3, [r4, #16]
 80088c8:	2301      	movs	r3, #1
 80088ca:	6163      	str	r3, [r4, #20]
 80088cc:	b002      	add	sp, #8
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
 80088d0:	ab01      	add	r3, sp, #4
 80088d2:	466a      	mov	r2, sp
 80088d4:	f7ff ffc9 	bl	800886a <__swhatbuf_r>
 80088d8:	9900      	ldr	r1, [sp, #0]
 80088da:	4605      	mov	r5, r0
 80088dc:	4630      	mov	r0, r6
 80088de:	f000 fc45 	bl	800916c <_malloc_r>
 80088e2:	b948      	cbnz	r0, 80088f8 <__smakebuf_r+0x44>
 80088e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e8:	059a      	lsls	r2, r3, #22
 80088ea:	d4ef      	bmi.n	80088cc <__smakebuf_r+0x18>
 80088ec:	f023 0303 	bic.w	r3, r3, #3
 80088f0:	f043 0302 	orr.w	r3, r3, #2
 80088f4:	81a3      	strh	r3, [r4, #12]
 80088f6:	e7e3      	b.n	80088c0 <__smakebuf_r+0xc>
 80088f8:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <__smakebuf_r+0x7c>)
 80088fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	6020      	str	r0, [r4, #0]
 8008900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008904:	81a3      	strh	r3, [r4, #12]
 8008906:	9b00      	ldr	r3, [sp, #0]
 8008908:	6163      	str	r3, [r4, #20]
 800890a:	9b01      	ldr	r3, [sp, #4]
 800890c:	6120      	str	r0, [r4, #16]
 800890e:	b15b      	cbz	r3, 8008928 <__smakebuf_r+0x74>
 8008910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008914:	4630      	mov	r0, r6
 8008916:	f000 feaf 	bl	8009678 <_isatty_r>
 800891a:	b128      	cbz	r0, 8008928 <__smakebuf_r+0x74>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	f023 0303 	bic.w	r3, r3, #3
 8008922:	f043 0301 	orr.w	r3, r3, #1
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	89a0      	ldrh	r0, [r4, #12]
 800892a:	4305      	orrs	r5, r0
 800892c:	81a5      	strh	r5, [r4, #12]
 800892e:	e7cd      	b.n	80088cc <__smakebuf_r+0x18>
 8008930:	080086b9 	.word	0x080086b9

08008934 <malloc>:
 8008934:	4b02      	ldr	r3, [pc, #8]	; (8008940 <malloc+0xc>)
 8008936:	4601      	mov	r1, r0
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	f000 bc17 	b.w	800916c <_malloc_r>
 800893e:	bf00      	nop
 8008940:	2000000c 	.word	0x2000000c

08008944 <memcpy>:
 8008944:	440a      	add	r2, r1
 8008946:	4291      	cmp	r1, r2
 8008948:	f100 33ff 	add.w	r3, r0, #4294967295
 800894c:	d100      	bne.n	8008950 <memcpy+0xc>
 800894e:	4770      	bx	lr
 8008950:	b510      	push	{r4, lr}
 8008952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800895a:	4291      	cmp	r1, r2
 800895c:	d1f9      	bne.n	8008952 <memcpy+0xe>
 800895e:	bd10      	pop	{r4, pc}

08008960 <_Balloc>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008964:	4604      	mov	r4, r0
 8008966:	460d      	mov	r5, r1
 8008968:	b976      	cbnz	r6, 8008988 <_Balloc+0x28>
 800896a:	2010      	movs	r0, #16
 800896c:	f7ff ffe2 	bl	8008934 <malloc>
 8008970:	4602      	mov	r2, r0
 8008972:	6260      	str	r0, [r4, #36]	; 0x24
 8008974:	b920      	cbnz	r0, 8008980 <_Balloc+0x20>
 8008976:	4b18      	ldr	r3, [pc, #96]	; (80089d8 <_Balloc+0x78>)
 8008978:	4818      	ldr	r0, [pc, #96]	; (80089dc <_Balloc+0x7c>)
 800897a:	2166      	movs	r1, #102	; 0x66
 800897c:	f000 fe2a 	bl	80095d4 <__assert_func>
 8008980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008984:	6006      	str	r6, [r0, #0]
 8008986:	60c6      	str	r6, [r0, #12]
 8008988:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800898a:	68f3      	ldr	r3, [r6, #12]
 800898c:	b183      	cbz	r3, 80089b0 <_Balloc+0x50>
 800898e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008996:	b9b8      	cbnz	r0, 80089c8 <_Balloc+0x68>
 8008998:	2101      	movs	r1, #1
 800899a:	fa01 f605 	lsl.w	r6, r1, r5
 800899e:	1d72      	adds	r2, r6, #5
 80089a0:	0092      	lsls	r2, r2, #2
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fb60 	bl	8009068 <_calloc_r>
 80089a8:	b160      	cbz	r0, 80089c4 <_Balloc+0x64>
 80089aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089ae:	e00e      	b.n	80089ce <_Balloc+0x6e>
 80089b0:	2221      	movs	r2, #33	; 0x21
 80089b2:	2104      	movs	r1, #4
 80089b4:	4620      	mov	r0, r4
 80089b6:	f000 fb57 	bl	8009068 <_calloc_r>
 80089ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089bc:	60f0      	str	r0, [r6, #12]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e4      	bne.n	800898e <_Balloc+0x2e>
 80089c4:	2000      	movs	r0, #0
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	6802      	ldr	r2, [r0, #0]
 80089ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089ce:	2300      	movs	r3, #0
 80089d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089d4:	e7f7      	b.n	80089c6 <_Balloc+0x66>
 80089d6:	bf00      	nop
 80089d8:	08009b15 	.word	0x08009b15
 80089dc:	08009bf8 	.word	0x08009bf8

080089e0 <_Bfree>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089e4:	4605      	mov	r5, r0
 80089e6:	460c      	mov	r4, r1
 80089e8:	b976      	cbnz	r6, 8008a08 <_Bfree+0x28>
 80089ea:	2010      	movs	r0, #16
 80089ec:	f7ff ffa2 	bl	8008934 <malloc>
 80089f0:	4602      	mov	r2, r0
 80089f2:	6268      	str	r0, [r5, #36]	; 0x24
 80089f4:	b920      	cbnz	r0, 8008a00 <_Bfree+0x20>
 80089f6:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <_Bfree+0x3c>)
 80089f8:	4809      	ldr	r0, [pc, #36]	; (8008a20 <_Bfree+0x40>)
 80089fa:	218a      	movs	r1, #138	; 0x8a
 80089fc:	f000 fdea 	bl	80095d4 <__assert_func>
 8008a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a04:	6006      	str	r6, [r0, #0]
 8008a06:	60c6      	str	r6, [r0, #12]
 8008a08:	b13c      	cbz	r4, 8008a1a <_Bfree+0x3a>
 8008a0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a0c:	6862      	ldr	r2, [r4, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a14:	6021      	str	r1, [r4, #0]
 8008a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	08009b15 	.word	0x08009b15
 8008a20:	08009bf8 	.word	0x08009bf8

08008a24 <__multadd>:
 8008a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a28:	690d      	ldr	r5, [r1, #16]
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	460c      	mov	r4, r1
 8008a2e:	461e      	mov	r6, r3
 8008a30:	f101 0c14 	add.w	ip, r1, #20
 8008a34:	2000      	movs	r0, #0
 8008a36:	f8dc 3000 	ldr.w	r3, [ip]
 8008a3a:	b299      	uxth	r1, r3
 8008a3c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a40:	0c1e      	lsrs	r6, r3, #16
 8008a42:	0c0b      	lsrs	r3, r1, #16
 8008a44:	fb02 3306 	mla	r3, r2, r6, r3
 8008a48:	b289      	uxth	r1, r1
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a50:	4285      	cmp	r5, r0
 8008a52:	f84c 1b04 	str.w	r1, [ip], #4
 8008a56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a5a:	dcec      	bgt.n	8008a36 <__multadd+0x12>
 8008a5c:	b30e      	cbz	r6, 8008aa2 <__multadd+0x7e>
 8008a5e:	68a3      	ldr	r3, [r4, #8]
 8008a60:	42ab      	cmp	r3, r5
 8008a62:	dc19      	bgt.n	8008a98 <__multadd+0x74>
 8008a64:	6861      	ldr	r1, [r4, #4]
 8008a66:	4638      	mov	r0, r7
 8008a68:	3101      	adds	r1, #1
 8008a6a:	f7ff ff79 	bl	8008960 <_Balloc>
 8008a6e:	4680      	mov	r8, r0
 8008a70:	b928      	cbnz	r0, 8008a7e <__multadd+0x5a>
 8008a72:	4602      	mov	r2, r0
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <__multadd+0x84>)
 8008a76:	480d      	ldr	r0, [pc, #52]	; (8008aac <__multadd+0x88>)
 8008a78:	21b5      	movs	r1, #181	; 0xb5
 8008a7a:	f000 fdab 	bl	80095d4 <__assert_func>
 8008a7e:	6922      	ldr	r2, [r4, #16]
 8008a80:	3202      	adds	r2, #2
 8008a82:	f104 010c 	add.w	r1, r4, #12
 8008a86:	0092      	lsls	r2, r2, #2
 8008a88:	300c      	adds	r0, #12
 8008a8a:	f7ff ff5b 	bl	8008944 <memcpy>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7ff ffa5 	bl	80089e0 <_Bfree>
 8008a96:	4644      	mov	r4, r8
 8008a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a9c:	3501      	adds	r5, #1
 8008a9e:	615e      	str	r6, [r3, #20]
 8008aa0:	6125      	str	r5, [r4, #16]
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa8:	08009b87 	.word	0x08009b87
 8008aac:	08009bf8 	.word	0x08009bf8

08008ab0 <__hi0bits>:
 8008ab0:	0c03      	lsrs	r3, r0, #16
 8008ab2:	041b      	lsls	r3, r3, #16
 8008ab4:	b9d3      	cbnz	r3, 8008aec <__hi0bits+0x3c>
 8008ab6:	0400      	lsls	r0, r0, #16
 8008ab8:	2310      	movs	r3, #16
 8008aba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008abe:	bf04      	itt	eq
 8008ac0:	0200      	lsleq	r0, r0, #8
 8008ac2:	3308      	addeq	r3, #8
 8008ac4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008ac8:	bf04      	itt	eq
 8008aca:	0100      	lsleq	r0, r0, #4
 8008acc:	3304      	addeq	r3, #4
 8008ace:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ad2:	bf04      	itt	eq
 8008ad4:	0080      	lsleq	r0, r0, #2
 8008ad6:	3302      	addeq	r3, #2
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	db05      	blt.n	8008ae8 <__hi0bits+0x38>
 8008adc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ae0:	f103 0301 	add.w	r3, r3, #1
 8008ae4:	bf08      	it	eq
 8008ae6:	2320      	moveq	r3, #32
 8008ae8:	4618      	mov	r0, r3
 8008aea:	4770      	bx	lr
 8008aec:	2300      	movs	r3, #0
 8008aee:	e7e4      	b.n	8008aba <__hi0bits+0xa>

08008af0 <__lo0bits>:
 8008af0:	6803      	ldr	r3, [r0, #0]
 8008af2:	f013 0207 	ands.w	r2, r3, #7
 8008af6:	4601      	mov	r1, r0
 8008af8:	d00b      	beq.n	8008b12 <__lo0bits+0x22>
 8008afa:	07da      	lsls	r2, r3, #31
 8008afc:	d423      	bmi.n	8008b46 <__lo0bits+0x56>
 8008afe:	0798      	lsls	r0, r3, #30
 8008b00:	bf49      	itett	mi
 8008b02:	085b      	lsrmi	r3, r3, #1
 8008b04:	089b      	lsrpl	r3, r3, #2
 8008b06:	2001      	movmi	r0, #1
 8008b08:	600b      	strmi	r3, [r1, #0]
 8008b0a:	bf5c      	itt	pl
 8008b0c:	600b      	strpl	r3, [r1, #0]
 8008b0e:	2002      	movpl	r0, #2
 8008b10:	4770      	bx	lr
 8008b12:	b298      	uxth	r0, r3
 8008b14:	b9a8      	cbnz	r0, 8008b42 <__lo0bits+0x52>
 8008b16:	0c1b      	lsrs	r3, r3, #16
 8008b18:	2010      	movs	r0, #16
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	b90a      	cbnz	r2, 8008b22 <__lo0bits+0x32>
 8008b1e:	3008      	adds	r0, #8
 8008b20:	0a1b      	lsrs	r3, r3, #8
 8008b22:	071a      	lsls	r2, r3, #28
 8008b24:	bf04      	itt	eq
 8008b26:	091b      	lsreq	r3, r3, #4
 8008b28:	3004      	addeq	r0, #4
 8008b2a:	079a      	lsls	r2, r3, #30
 8008b2c:	bf04      	itt	eq
 8008b2e:	089b      	lsreq	r3, r3, #2
 8008b30:	3002      	addeq	r0, #2
 8008b32:	07da      	lsls	r2, r3, #31
 8008b34:	d403      	bmi.n	8008b3e <__lo0bits+0x4e>
 8008b36:	085b      	lsrs	r3, r3, #1
 8008b38:	f100 0001 	add.w	r0, r0, #1
 8008b3c:	d005      	beq.n	8008b4a <__lo0bits+0x5a>
 8008b3e:	600b      	str	r3, [r1, #0]
 8008b40:	4770      	bx	lr
 8008b42:	4610      	mov	r0, r2
 8008b44:	e7e9      	b.n	8008b1a <__lo0bits+0x2a>
 8008b46:	2000      	movs	r0, #0
 8008b48:	4770      	bx	lr
 8008b4a:	2020      	movs	r0, #32
 8008b4c:	4770      	bx	lr
	...

08008b50 <__i2b>:
 8008b50:	b510      	push	{r4, lr}
 8008b52:	460c      	mov	r4, r1
 8008b54:	2101      	movs	r1, #1
 8008b56:	f7ff ff03 	bl	8008960 <_Balloc>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	b928      	cbnz	r0, 8008b6a <__i2b+0x1a>
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <__i2b+0x24>)
 8008b60:	4805      	ldr	r0, [pc, #20]	; (8008b78 <__i2b+0x28>)
 8008b62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008b66:	f000 fd35 	bl	80095d4 <__assert_func>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	6144      	str	r4, [r0, #20]
 8008b6e:	6103      	str	r3, [r0, #16]
 8008b70:	bd10      	pop	{r4, pc}
 8008b72:	bf00      	nop
 8008b74:	08009b87 	.word	0x08009b87
 8008b78:	08009bf8 	.word	0x08009bf8

08008b7c <__multiply>:
 8008b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	4691      	mov	r9, r2
 8008b82:	690a      	ldr	r2, [r1, #16]
 8008b84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	bfb8      	it	lt
 8008b8c:	460b      	movlt	r3, r1
 8008b8e:	460c      	mov	r4, r1
 8008b90:	bfbc      	itt	lt
 8008b92:	464c      	movlt	r4, r9
 8008b94:	4699      	movlt	r9, r3
 8008b96:	6927      	ldr	r7, [r4, #16]
 8008b98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b9c:	68a3      	ldr	r3, [r4, #8]
 8008b9e:	6861      	ldr	r1, [r4, #4]
 8008ba0:	eb07 060a 	add.w	r6, r7, sl
 8008ba4:	42b3      	cmp	r3, r6
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	bfb8      	it	lt
 8008baa:	3101      	addlt	r1, #1
 8008bac:	f7ff fed8 	bl	8008960 <_Balloc>
 8008bb0:	b930      	cbnz	r0, 8008bc0 <__multiply+0x44>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	4b44      	ldr	r3, [pc, #272]	; (8008cc8 <__multiply+0x14c>)
 8008bb6:	4845      	ldr	r0, [pc, #276]	; (8008ccc <__multiply+0x150>)
 8008bb8:	f240 115d 	movw	r1, #349	; 0x15d
 8008bbc:	f000 fd0a 	bl	80095d4 <__assert_func>
 8008bc0:	f100 0514 	add.w	r5, r0, #20
 8008bc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bc8:	462b      	mov	r3, r5
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4543      	cmp	r3, r8
 8008bce:	d321      	bcc.n	8008c14 <__multiply+0x98>
 8008bd0:	f104 0314 	add.w	r3, r4, #20
 8008bd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008bd8:	f109 0314 	add.w	r3, r9, #20
 8008bdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008be0:	9202      	str	r2, [sp, #8]
 8008be2:	1b3a      	subs	r2, r7, r4
 8008be4:	3a15      	subs	r2, #21
 8008be6:	f022 0203 	bic.w	r2, r2, #3
 8008bea:	3204      	adds	r2, #4
 8008bec:	f104 0115 	add.w	r1, r4, #21
 8008bf0:	428f      	cmp	r7, r1
 8008bf2:	bf38      	it	cc
 8008bf4:	2204      	movcc	r2, #4
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	9a02      	ldr	r2, [sp, #8]
 8008bfa:	9303      	str	r3, [sp, #12]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d80c      	bhi.n	8008c1a <__multiply+0x9e>
 8008c00:	2e00      	cmp	r6, #0
 8008c02:	dd03      	ble.n	8008c0c <__multiply+0x90>
 8008c04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d05a      	beq.n	8008cc2 <__multiply+0x146>
 8008c0c:	6106      	str	r6, [r0, #16]
 8008c0e:	b005      	add	sp, #20
 8008c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c14:	f843 2b04 	str.w	r2, [r3], #4
 8008c18:	e7d8      	b.n	8008bcc <__multiply+0x50>
 8008c1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c1e:	f1ba 0f00 	cmp.w	sl, #0
 8008c22:	d024      	beq.n	8008c6e <__multiply+0xf2>
 8008c24:	f104 0e14 	add.w	lr, r4, #20
 8008c28:	46a9      	mov	r9, r5
 8008c2a:	f04f 0c00 	mov.w	ip, #0
 8008c2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c32:	f8d9 1000 	ldr.w	r1, [r9]
 8008c36:	fa1f fb82 	uxth.w	fp, r2
 8008c3a:	b289      	uxth	r1, r1
 8008c3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c44:	f8d9 2000 	ldr.w	r2, [r9]
 8008c48:	4461      	add	r1, ip
 8008c4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c56:	b289      	uxth	r1, r1
 8008c58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c5c:	4577      	cmp	r7, lr
 8008c5e:	f849 1b04 	str.w	r1, [r9], #4
 8008c62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c66:	d8e2      	bhi.n	8008c2e <__multiply+0xb2>
 8008c68:	9a01      	ldr	r2, [sp, #4]
 8008c6a:	f845 c002 	str.w	ip, [r5, r2]
 8008c6e:	9a03      	ldr	r2, [sp, #12]
 8008c70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c74:	3304      	adds	r3, #4
 8008c76:	f1b9 0f00 	cmp.w	r9, #0
 8008c7a:	d020      	beq.n	8008cbe <__multiply+0x142>
 8008c7c:	6829      	ldr	r1, [r5, #0]
 8008c7e:	f104 0c14 	add.w	ip, r4, #20
 8008c82:	46ae      	mov	lr, r5
 8008c84:	f04f 0a00 	mov.w	sl, #0
 8008c88:	f8bc b000 	ldrh.w	fp, [ip]
 8008c8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c90:	fb09 220b 	mla	r2, r9, fp, r2
 8008c94:	4492      	add	sl, r2
 8008c96:	b289      	uxth	r1, r1
 8008c98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008c9c:	f84e 1b04 	str.w	r1, [lr], #4
 8008ca0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ca4:	f8be 1000 	ldrh.w	r1, [lr]
 8008ca8:	0c12      	lsrs	r2, r2, #16
 8008caa:	fb09 1102 	mla	r1, r9, r2, r1
 8008cae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008cb2:	4567      	cmp	r7, ip
 8008cb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cb8:	d8e6      	bhi.n	8008c88 <__multiply+0x10c>
 8008cba:	9a01      	ldr	r2, [sp, #4]
 8008cbc:	50a9      	str	r1, [r5, r2]
 8008cbe:	3504      	adds	r5, #4
 8008cc0:	e79a      	b.n	8008bf8 <__multiply+0x7c>
 8008cc2:	3e01      	subs	r6, #1
 8008cc4:	e79c      	b.n	8008c00 <__multiply+0x84>
 8008cc6:	bf00      	nop
 8008cc8:	08009b87 	.word	0x08009b87
 8008ccc:	08009bf8 	.word	0x08009bf8

08008cd0 <__pow5mult>:
 8008cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd4:	4615      	mov	r5, r2
 8008cd6:	f012 0203 	ands.w	r2, r2, #3
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460f      	mov	r7, r1
 8008cde:	d007      	beq.n	8008cf0 <__pow5mult+0x20>
 8008ce0:	4c25      	ldr	r4, [pc, #148]	; (8008d78 <__pow5mult+0xa8>)
 8008ce2:	3a01      	subs	r2, #1
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cea:	f7ff fe9b 	bl	8008a24 <__multadd>
 8008cee:	4607      	mov	r7, r0
 8008cf0:	10ad      	asrs	r5, r5, #2
 8008cf2:	d03d      	beq.n	8008d70 <__pow5mult+0xa0>
 8008cf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008cf6:	b97c      	cbnz	r4, 8008d18 <__pow5mult+0x48>
 8008cf8:	2010      	movs	r0, #16
 8008cfa:	f7ff fe1b 	bl	8008934 <malloc>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	6270      	str	r0, [r6, #36]	; 0x24
 8008d02:	b928      	cbnz	r0, 8008d10 <__pow5mult+0x40>
 8008d04:	4b1d      	ldr	r3, [pc, #116]	; (8008d7c <__pow5mult+0xac>)
 8008d06:	481e      	ldr	r0, [pc, #120]	; (8008d80 <__pow5mult+0xb0>)
 8008d08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008d0c:	f000 fc62 	bl	80095d4 <__assert_func>
 8008d10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d14:	6004      	str	r4, [r0, #0]
 8008d16:	60c4      	str	r4, [r0, #12]
 8008d18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008d1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d20:	b94c      	cbnz	r4, 8008d36 <__pow5mult+0x66>
 8008d22:	f240 2171 	movw	r1, #625	; 0x271
 8008d26:	4630      	mov	r0, r6
 8008d28:	f7ff ff12 	bl	8008b50 <__i2b>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d32:	4604      	mov	r4, r0
 8008d34:	6003      	str	r3, [r0, #0]
 8008d36:	f04f 0900 	mov.w	r9, #0
 8008d3a:	07eb      	lsls	r3, r5, #31
 8008d3c:	d50a      	bpl.n	8008d54 <__pow5mult+0x84>
 8008d3e:	4639      	mov	r1, r7
 8008d40:	4622      	mov	r2, r4
 8008d42:	4630      	mov	r0, r6
 8008d44:	f7ff ff1a 	bl	8008b7c <__multiply>
 8008d48:	4639      	mov	r1, r7
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	f7ff fe47 	bl	80089e0 <_Bfree>
 8008d52:	4647      	mov	r7, r8
 8008d54:	106d      	asrs	r5, r5, #1
 8008d56:	d00b      	beq.n	8008d70 <__pow5mult+0xa0>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	b938      	cbnz	r0, 8008d6c <__pow5mult+0x9c>
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7ff ff0b 	bl	8008b7c <__multiply>
 8008d66:	6020      	str	r0, [r4, #0]
 8008d68:	f8c0 9000 	str.w	r9, [r0]
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	e7e4      	b.n	8008d3a <__pow5mult+0x6a>
 8008d70:	4638      	mov	r0, r7
 8008d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d76:	bf00      	nop
 8008d78:	08009d48 	.word	0x08009d48
 8008d7c:	08009b15 	.word	0x08009b15
 8008d80:	08009bf8 	.word	0x08009bf8

08008d84 <__lshift>:
 8008d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d88:	460c      	mov	r4, r1
 8008d8a:	6849      	ldr	r1, [r1, #4]
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d92:	68a3      	ldr	r3, [r4, #8]
 8008d94:	4607      	mov	r7, r0
 8008d96:	4691      	mov	r9, r2
 8008d98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d9c:	f108 0601 	add.w	r6, r8, #1
 8008da0:	42b3      	cmp	r3, r6
 8008da2:	db0b      	blt.n	8008dbc <__lshift+0x38>
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff fddb 	bl	8008960 <_Balloc>
 8008daa:	4605      	mov	r5, r0
 8008dac:	b948      	cbnz	r0, 8008dc2 <__lshift+0x3e>
 8008dae:	4602      	mov	r2, r0
 8008db0:	4b2a      	ldr	r3, [pc, #168]	; (8008e5c <__lshift+0xd8>)
 8008db2:	482b      	ldr	r0, [pc, #172]	; (8008e60 <__lshift+0xdc>)
 8008db4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008db8:	f000 fc0c 	bl	80095d4 <__assert_func>
 8008dbc:	3101      	adds	r1, #1
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	e7ee      	b.n	8008da0 <__lshift+0x1c>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f100 0114 	add.w	r1, r0, #20
 8008dc8:	f100 0210 	add.w	r2, r0, #16
 8008dcc:	4618      	mov	r0, r3
 8008dce:	4553      	cmp	r3, sl
 8008dd0:	db37      	blt.n	8008e42 <__lshift+0xbe>
 8008dd2:	6920      	ldr	r0, [r4, #16]
 8008dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dd8:	f104 0314 	add.w	r3, r4, #20
 8008ddc:	f019 091f 	ands.w	r9, r9, #31
 8008de0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008de4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008de8:	d02f      	beq.n	8008e4a <__lshift+0xc6>
 8008dea:	f1c9 0e20 	rsb	lr, r9, #32
 8008dee:	468a      	mov	sl, r1
 8008df0:	f04f 0c00 	mov.w	ip, #0
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	fa02 f209 	lsl.w	r2, r2, r9
 8008dfa:	ea42 020c 	orr.w	r2, r2, ip
 8008dfe:	f84a 2b04 	str.w	r2, [sl], #4
 8008e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e06:	4298      	cmp	r0, r3
 8008e08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008e0c:	d8f2      	bhi.n	8008df4 <__lshift+0x70>
 8008e0e:	1b03      	subs	r3, r0, r4
 8008e10:	3b15      	subs	r3, #21
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	3304      	adds	r3, #4
 8008e18:	f104 0215 	add.w	r2, r4, #21
 8008e1c:	4290      	cmp	r0, r2
 8008e1e:	bf38      	it	cc
 8008e20:	2304      	movcc	r3, #4
 8008e22:	f841 c003 	str.w	ip, [r1, r3]
 8008e26:	f1bc 0f00 	cmp.w	ip, #0
 8008e2a:	d001      	beq.n	8008e30 <__lshift+0xac>
 8008e2c:	f108 0602 	add.w	r6, r8, #2
 8008e30:	3e01      	subs	r6, #1
 8008e32:	4638      	mov	r0, r7
 8008e34:	612e      	str	r6, [r5, #16]
 8008e36:	4621      	mov	r1, r4
 8008e38:	f7ff fdd2 	bl	80089e0 <_Bfree>
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e42:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e46:	3301      	adds	r3, #1
 8008e48:	e7c1      	b.n	8008dce <__lshift+0x4a>
 8008e4a:	3904      	subs	r1, #4
 8008e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e50:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e54:	4298      	cmp	r0, r3
 8008e56:	d8f9      	bhi.n	8008e4c <__lshift+0xc8>
 8008e58:	e7ea      	b.n	8008e30 <__lshift+0xac>
 8008e5a:	bf00      	nop
 8008e5c:	08009b87 	.word	0x08009b87
 8008e60:	08009bf8 	.word	0x08009bf8

08008e64 <__mcmp>:
 8008e64:	b530      	push	{r4, r5, lr}
 8008e66:	6902      	ldr	r2, [r0, #16]
 8008e68:	690c      	ldr	r4, [r1, #16]
 8008e6a:	1b12      	subs	r2, r2, r4
 8008e6c:	d10e      	bne.n	8008e8c <__mcmp+0x28>
 8008e6e:	f100 0314 	add.w	r3, r0, #20
 8008e72:	3114      	adds	r1, #20
 8008e74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e84:	42a5      	cmp	r5, r4
 8008e86:	d003      	beq.n	8008e90 <__mcmp+0x2c>
 8008e88:	d305      	bcc.n	8008e96 <__mcmp+0x32>
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	bd30      	pop	{r4, r5, pc}
 8008e90:	4283      	cmp	r3, r0
 8008e92:	d3f3      	bcc.n	8008e7c <__mcmp+0x18>
 8008e94:	e7fa      	b.n	8008e8c <__mcmp+0x28>
 8008e96:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9a:	e7f7      	b.n	8008e8c <__mcmp+0x28>

08008e9c <__mdiff>:
 8008e9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	4606      	mov	r6, r0
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4690      	mov	r8, r2
 8008eaa:	f7ff ffdb 	bl	8008e64 <__mcmp>
 8008eae:	1e05      	subs	r5, r0, #0
 8008eb0:	d110      	bne.n	8008ed4 <__mdiff+0x38>
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff fd53 	bl	8008960 <_Balloc>
 8008eba:	b930      	cbnz	r0, 8008eca <__mdiff+0x2e>
 8008ebc:	4b3a      	ldr	r3, [pc, #232]	; (8008fa8 <__mdiff+0x10c>)
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	f240 2132 	movw	r1, #562	; 0x232
 8008ec4:	4839      	ldr	r0, [pc, #228]	; (8008fac <__mdiff+0x110>)
 8008ec6:	f000 fb85 	bl	80095d4 <__assert_func>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed4:	bfa4      	itt	ge
 8008ed6:	4643      	movge	r3, r8
 8008ed8:	46a0      	movge	r8, r4
 8008eda:	4630      	mov	r0, r6
 8008edc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ee0:	bfa6      	itte	ge
 8008ee2:	461c      	movge	r4, r3
 8008ee4:	2500      	movge	r5, #0
 8008ee6:	2501      	movlt	r5, #1
 8008ee8:	f7ff fd3a 	bl	8008960 <_Balloc>
 8008eec:	b920      	cbnz	r0, 8008ef8 <__mdiff+0x5c>
 8008eee:	4b2e      	ldr	r3, [pc, #184]	; (8008fa8 <__mdiff+0x10c>)
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ef6:	e7e5      	b.n	8008ec4 <__mdiff+0x28>
 8008ef8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008efc:	6926      	ldr	r6, [r4, #16]
 8008efe:	60c5      	str	r5, [r0, #12]
 8008f00:	f104 0914 	add.w	r9, r4, #20
 8008f04:	f108 0514 	add.w	r5, r8, #20
 8008f08:	f100 0e14 	add.w	lr, r0, #20
 8008f0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f14:	f108 0210 	add.w	r2, r8, #16
 8008f18:	46f2      	mov	sl, lr
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f24:	fa1f f883 	uxth.w	r8, r3
 8008f28:	fa11 f18b 	uxtah	r1, r1, fp
 8008f2c:	0c1b      	lsrs	r3, r3, #16
 8008f2e:	eba1 0808 	sub.w	r8, r1, r8
 8008f32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f3a:	fa1f f888 	uxth.w	r8, r8
 8008f3e:	1419      	asrs	r1, r3, #16
 8008f40:	454e      	cmp	r6, r9
 8008f42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f46:	f84a 3b04 	str.w	r3, [sl], #4
 8008f4a:	d8e7      	bhi.n	8008f1c <__mdiff+0x80>
 8008f4c:	1b33      	subs	r3, r6, r4
 8008f4e:	3b15      	subs	r3, #21
 8008f50:	f023 0303 	bic.w	r3, r3, #3
 8008f54:	3304      	adds	r3, #4
 8008f56:	3415      	adds	r4, #21
 8008f58:	42a6      	cmp	r6, r4
 8008f5a:	bf38      	it	cc
 8008f5c:	2304      	movcc	r3, #4
 8008f5e:	441d      	add	r5, r3
 8008f60:	4473      	add	r3, lr
 8008f62:	469e      	mov	lr, r3
 8008f64:	462e      	mov	r6, r5
 8008f66:	4566      	cmp	r6, ip
 8008f68:	d30e      	bcc.n	8008f88 <__mdiff+0xec>
 8008f6a:	f10c 0203 	add.w	r2, ip, #3
 8008f6e:	1b52      	subs	r2, r2, r5
 8008f70:	f022 0203 	bic.w	r2, r2, #3
 8008f74:	3d03      	subs	r5, #3
 8008f76:	45ac      	cmp	ip, r5
 8008f78:	bf38      	it	cc
 8008f7a:	2200      	movcc	r2, #0
 8008f7c:	441a      	add	r2, r3
 8008f7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008f82:	b17b      	cbz	r3, 8008fa4 <__mdiff+0x108>
 8008f84:	6107      	str	r7, [r0, #16]
 8008f86:	e7a3      	b.n	8008ed0 <__mdiff+0x34>
 8008f88:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f8c:	fa11 f288 	uxtah	r2, r1, r8
 8008f90:	1414      	asrs	r4, r2, #16
 8008f92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f96:	b292      	uxth	r2, r2
 8008f98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f9c:	f84e 2b04 	str.w	r2, [lr], #4
 8008fa0:	1421      	asrs	r1, r4, #16
 8008fa2:	e7e0      	b.n	8008f66 <__mdiff+0xca>
 8008fa4:	3f01      	subs	r7, #1
 8008fa6:	e7ea      	b.n	8008f7e <__mdiff+0xe2>
 8008fa8:	08009b87 	.word	0x08009b87
 8008fac:	08009bf8 	.word	0x08009bf8

08008fb0 <__d2b>:
 8008fb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	4689      	mov	r9, r1
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	ec57 6b10 	vmov	r6, r7, d0
 8008fbc:	4690      	mov	r8, r2
 8008fbe:	f7ff fccf 	bl	8008960 <_Balloc>
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	b930      	cbnz	r0, 8008fd4 <__d2b+0x24>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	4b25      	ldr	r3, [pc, #148]	; (8009060 <__d2b+0xb0>)
 8008fca:	4826      	ldr	r0, [pc, #152]	; (8009064 <__d2b+0xb4>)
 8008fcc:	f240 310a 	movw	r1, #778	; 0x30a
 8008fd0:	f000 fb00 	bl	80095d4 <__assert_func>
 8008fd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008fd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fdc:	bb35      	cbnz	r5, 800902c <__d2b+0x7c>
 8008fde:	2e00      	cmp	r6, #0
 8008fe0:	9301      	str	r3, [sp, #4]
 8008fe2:	d028      	beq.n	8009036 <__d2b+0x86>
 8008fe4:	4668      	mov	r0, sp
 8008fe6:	9600      	str	r6, [sp, #0]
 8008fe8:	f7ff fd82 	bl	8008af0 <__lo0bits>
 8008fec:	9900      	ldr	r1, [sp, #0]
 8008fee:	b300      	cbz	r0, 8009032 <__d2b+0x82>
 8008ff0:	9a01      	ldr	r2, [sp, #4]
 8008ff2:	f1c0 0320 	rsb	r3, r0, #32
 8008ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	40c2      	lsrs	r2, r0
 8008ffe:	6163      	str	r3, [r4, #20]
 8009000:	9201      	str	r2, [sp, #4]
 8009002:	9b01      	ldr	r3, [sp, #4]
 8009004:	61a3      	str	r3, [r4, #24]
 8009006:	2b00      	cmp	r3, #0
 8009008:	bf14      	ite	ne
 800900a:	2202      	movne	r2, #2
 800900c:	2201      	moveq	r2, #1
 800900e:	6122      	str	r2, [r4, #16]
 8009010:	b1d5      	cbz	r5, 8009048 <__d2b+0x98>
 8009012:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009016:	4405      	add	r5, r0
 8009018:	f8c9 5000 	str.w	r5, [r9]
 800901c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009020:	f8c8 0000 	str.w	r0, [r8]
 8009024:	4620      	mov	r0, r4
 8009026:	b003      	add	sp, #12
 8009028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800902c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009030:	e7d5      	b.n	8008fde <__d2b+0x2e>
 8009032:	6161      	str	r1, [r4, #20]
 8009034:	e7e5      	b.n	8009002 <__d2b+0x52>
 8009036:	a801      	add	r0, sp, #4
 8009038:	f7ff fd5a 	bl	8008af0 <__lo0bits>
 800903c:	9b01      	ldr	r3, [sp, #4]
 800903e:	6163      	str	r3, [r4, #20]
 8009040:	2201      	movs	r2, #1
 8009042:	6122      	str	r2, [r4, #16]
 8009044:	3020      	adds	r0, #32
 8009046:	e7e3      	b.n	8009010 <__d2b+0x60>
 8009048:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800904c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009050:	f8c9 0000 	str.w	r0, [r9]
 8009054:	6918      	ldr	r0, [r3, #16]
 8009056:	f7ff fd2b 	bl	8008ab0 <__hi0bits>
 800905a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800905e:	e7df      	b.n	8009020 <__d2b+0x70>
 8009060:	08009b87 	.word	0x08009b87
 8009064:	08009bf8 	.word	0x08009bf8

08009068 <_calloc_r>:
 8009068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800906a:	fba1 2402 	umull	r2, r4, r1, r2
 800906e:	b94c      	cbnz	r4, 8009084 <_calloc_r+0x1c>
 8009070:	4611      	mov	r1, r2
 8009072:	9201      	str	r2, [sp, #4]
 8009074:	f000 f87a 	bl	800916c <_malloc_r>
 8009078:	9a01      	ldr	r2, [sp, #4]
 800907a:	4605      	mov	r5, r0
 800907c:	b930      	cbnz	r0, 800908c <_calloc_r+0x24>
 800907e:	4628      	mov	r0, r5
 8009080:	b003      	add	sp, #12
 8009082:	bd30      	pop	{r4, r5, pc}
 8009084:	220c      	movs	r2, #12
 8009086:	6002      	str	r2, [r0, #0]
 8009088:	2500      	movs	r5, #0
 800908a:	e7f8      	b.n	800907e <_calloc_r+0x16>
 800908c:	4621      	mov	r1, r4
 800908e:	f7fd fdf3 	bl	8006c78 <memset>
 8009092:	e7f4      	b.n	800907e <_calloc_r+0x16>

08009094 <_free_r>:
 8009094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009096:	2900      	cmp	r1, #0
 8009098:	d044      	beq.n	8009124 <_free_r+0x90>
 800909a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800909e:	9001      	str	r0, [sp, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f1a1 0404 	sub.w	r4, r1, #4
 80090a6:	bfb8      	it	lt
 80090a8:	18e4      	addlt	r4, r4, r3
 80090aa:	f000 fb19 	bl	80096e0 <__malloc_lock>
 80090ae:	4a1e      	ldr	r2, [pc, #120]	; (8009128 <_free_r+0x94>)
 80090b0:	9801      	ldr	r0, [sp, #4]
 80090b2:	6813      	ldr	r3, [r2, #0]
 80090b4:	b933      	cbnz	r3, 80090c4 <_free_r+0x30>
 80090b6:	6063      	str	r3, [r4, #4]
 80090b8:	6014      	str	r4, [r2, #0]
 80090ba:	b003      	add	sp, #12
 80090bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090c0:	f000 bb14 	b.w	80096ec <__malloc_unlock>
 80090c4:	42a3      	cmp	r3, r4
 80090c6:	d908      	bls.n	80090da <_free_r+0x46>
 80090c8:	6825      	ldr	r5, [r4, #0]
 80090ca:	1961      	adds	r1, r4, r5
 80090cc:	428b      	cmp	r3, r1
 80090ce:	bf01      	itttt	eq
 80090d0:	6819      	ldreq	r1, [r3, #0]
 80090d2:	685b      	ldreq	r3, [r3, #4]
 80090d4:	1949      	addeq	r1, r1, r5
 80090d6:	6021      	streq	r1, [r4, #0]
 80090d8:	e7ed      	b.n	80090b6 <_free_r+0x22>
 80090da:	461a      	mov	r2, r3
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	b10b      	cbz	r3, 80090e4 <_free_r+0x50>
 80090e0:	42a3      	cmp	r3, r4
 80090e2:	d9fa      	bls.n	80090da <_free_r+0x46>
 80090e4:	6811      	ldr	r1, [r2, #0]
 80090e6:	1855      	adds	r5, r2, r1
 80090e8:	42a5      	cmp	r5, r4
 80090ea:	d10b      	bne.n	8009104 <_free_r+0x70>
 80090ec:	6824      	ldr	r4, [r4, #0]
 80090ee:	4421      	add	r1, r4
 80090f0:	1854      	adds	r4, r2, r1
 80090f2:	42a3      	cmp	r3, r4
 80090f4:	6011      	str	r1, [r2, #0]
 80090f6:	d1e0      	bne.n	80090ba <_free_r+0x26>
 80090f8:	681c      	ldr	r4, [r3, #0]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	6053      	str	r3, [r2, #4]
 80090fe:	4421      	add	r1, r4
 8009100:	6011      	str	r1, [r2, #0]
 8009102:	e7da      	b.n	80090ba <_free_r+0x26>
 8009104:	d902      	bls.n	800910c <_free_r+0x78>
 8009106:	230c      	movs	r3, #12
 8009108:	6003      	str	r3, [r0, #0]
 800910a:	e7d6      	b.n	80090ba <_free_r+0x26>
 800910c:	6825      	ldr	r5, [r4, #0]
 800910e:	1961      	adds	r1, r4, r5
 8009110:	428b      	cmp	r3, r1
 8009112:	bf04      	itt	eq
 8009114:	6819      	ldreq	r1, [r3, #0]
 8009116:	685b      	ldreq	r3, [r3, #4]
 8009118:	6063      	str	r3, [r4, #4]
 800911a:	bf04      	itt	eq
 800911c:	1949      	addeq	r1, r1, r5
 800911e:	6021      	streq	r1, [r4, #0]
 8009120:	6054      	str	r4, [r2, #4]
 8009122:	e7ca      	b.n	80090ba <_free_r+0x26>
 8009124:	b003      	add	sp, #12
 8009126:	bd30      	pop	{r4, r5, pc}
 8009128:	20001590 	.word	0x20001590

0800912c <sbrk_aligned>:
 800912c:	b570      	push	{r4, r5, r6, lr}
 800912e:	4e0e      	ldr	r6, [pc, #56]	; (8009168 <sbrk_aligned+0x3c>)
 8009130:	460c      	mov	r4, r1
 8009132:	6831      	ldr	r1, [r6, #0]
 8009134:	4605      	mov	r5, r0
 8009136:	b911      	cbnz	r1, 800913e <sbrk_aligned+0x12>
 8009138:	f000 f9e6 	bl	8009508 <_sbrk_r>
 800913c:	6030      	str	r0, [r6, #0]
 800913e:	4621      	mov	r1, r4
 8009140:	4628      	mov	r0, r5
 8009142:	f000 f9e1 	bl	8009508 <_sbrk_r>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d00a      	beq.n	8009160 <sbrk_aligned+0x34>
 800914a:	1cc4      	adds	r4, r0, #3
 800914c:	f024 0403 	bic.w	r4, r4, #3
 8009150:	42a0      	cmp	r0, r4
 8009152:	d007      	beq.n	8009164 <sbrk_aligned+0x38>
 8009154:	1a21      	subs	r1, r4, r0
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f9d6 	bl	8009508 <_sbrk_r>
 800915c:	3001      	adds	r0, #1
 800915e:	d101      	bne.n	8009164 <sbrk_aligned+0x38>
 8009160:	f04f 34ff 	mov.w	r4, #4294967295
 8009164:	4620      	mov	r0, r4
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	20001594 	.word	0x20001594

0800916c <_malloc_r>:
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	1ccd      	adds	r5, r1, #3
 8009172:	f025 0503 	bic.w	r5, r5, #3
 8009176:	3508      	adds	r5, #8
 8009178:	2d0c      	cmp	r5, #12
 800917a:	bf38      	it	cc
 800917c:	250c      	movcc	r5, #12
 800917e:	2d00      	cmp	r5, #0
 8009180:	4607      	mov	r7, r0
 8009182:	db01      	blt.n	8009188 <_malloc_r+0x1c>
 8009184:	42a9      	cmp	r1, r5
 8009186:	d905      	bls.n	8009194 <_malloc_r+0x28>
 8009188:	230c      	movs	r3, #12
 800918a:	603b      	str	r3, [r7, #0]
 800918c:	2600      	movs	r6, #0
 800918e:	4630      	mov	r0, r6
 8009190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009194:	4e2e      	ldr	r6, [pc, #184]	; (8009250 <_malloc_r+0xe4>)
 8009196:	f000 faa3 	bl	80096e0 <__malloc_lock>
 800919a:	6833      	ldr	r3, [r6, #0]
 800919c:	461c      	mov	r4, r3
 800919e:	bb34      	cbnz	r4, 80091ee <_malloc_r+0x82>
 80091a0:	4629      	mov	r1, r5
 80091a2:	4638      	mov	r0, r7
 80091a4:	f7ff ffc2 	bl	800912c <sbrk_aligned>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	4604      	mov	r4, r0
 80091ac:	d14d      	bne.n	800924a <_malloc_r+0xde>
 80091ae:	6834      	ldr	r4, [r6, #0]
 80091b0:	4626      	mov	r6, r4
 80091b2:	2e00      	cmp	r6, #0
 80091b4:	d140      	bne.n	8009238 <_malloc_r+0xcc>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	4631      	mov	r1, r6
 80091ba:	4638      	mov	r0, r7
 80091bc:	eb04 0803 	add.w	r8, r4, r3
 80091c0:	f000 f9a2 	bl	8009508 <_sbrk_r>
 80091c4:	4580      	cmp	r8, r0
 80091c6:	d13a      	bne.n	800923e <_malloc_r+0xd2>
 80091c8:	6821      	ldr	r1, [r4, #0]
 80091ca:	3503      	adds	r5, #3
 80091cc:	1a6d      	subs	r5, r5, r1
 80091ce:	f025 0503 	bic.w	r5, r5, #3
 80091d2:	3508      	adds	r5, #8
 80091d4:	2d0c      	cmp	r5, #12
 80091d6:	bf38      	it	cc
 80091d8:	250c      	movcc	r5, #12
 80091da:	4629      	mov	r1, r5
 80091dc:	4638      	mov	r0, r7
 80091de:	f7ff ffa5 	bl	800912c <sbrk_aligned>
 80091e2:	3001      	adds	r0, #1
 80091e4:	d02b      	beq.n	800923e <_malloc_r+0xd2>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	442b      	add	r3, r5
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	e00e      	b.n	800920c <_malloc_r+0xa0>
 80091ee:	6822      	ldr	r2, [r4, #0]
 80091f0:	1b52      	subs	r2, r2, r5
 80091f2:	d41e      	bmi.n	8009232 <_malloc_r+0xc6>
 80091f4:	2a0b      	cmp	r2, #11
 80091f6:	d916      	bls.n	8009226 <_malloc_r+0xba>
 80091f8:	1961      	adds	r1, r4, r5
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	6025      	str	r5, [r4, #0]
 80091fe:	bf18      	it	ne
 8009200:	6059      	strne	r1, [r3, #4]
 8009202:	6863      	ldr	r3, [r4, #4]
 8009204:	bf08      	it	eq
 8009206:	6031      	streq	r1, [r6, #0]
 8009208:	5162      	str	r2, [r4, r5]
 800920a:	604b      	str	r3, [r1, #4]
 800920c:	4638      	mov	r0, r7
 800920e:	f104 060b 	add.w	r6, r4, #11
 8009212:	f000 fa6b 	bl	80096ec <__malloc_unlock>
 8009216:	f026 0607 	bic.w	r6, r6, #7
 800921a:	1d23      	adds	r3, r4, #4
 800921c:	1af2      	subs	r2, r6, r3
 800921e:	d0b6      	beq.n	800918e <_malloc_r+0x22>
 8009220:	1b9b      	subs	r3, r3, r6
 8009222:	50a3      	str	r3, [r4, r2]
 8009224:	e7b3      	b.n	800918e <_malloc_r+0x22>
 8009226:	6862      	ldr	r2, [r4, #4]
 8009228:	42a3      	cmp	r3, r4
 800922a:	bf0c      	ite	eq
 800922c:	6032      	streq	r2, [r6, #0]
 800922e:	605a      	strne	r2, [r3, #4]
 8009230:	e7ec      	b.n	800920c <_malloc_r+0xa0>
 8009232:	4623      	mov	r3, r4
 8009234:	6864      	ldr	r4, [r4, #4]
 8009236:	e7b2      	b.n	800919e <_malloc_r+0x32>
 8009238:	4634      	mov	r4, r6
 800923a:	6876      	ldr	r6, [r6, #4]
 800923c:	e7b9      	b.n	80091b2 <_malloc_r+0x46>
 800923e:	230c      	movs	r3, #12
 8009240:	603b      	str	r3, [r7, #0]
 8009242:	4638      	mov	r0, r7
 8009244:	f000 fa52 	bl	80096ec <__malloc_unlock>
 8009248:	e7a1      	b.n	800918e <_malloc_r+0x22>
 800924a:	6025      	str	r5, [r4, #0]
 800924c:	e7de      	b.n	800920c <_malloc_r+0xa0>
 800924e:	bf00      	nop
 8009250:	20001590 	.word	0x20001590

08009254 <__sfputc_r>:
 8009254:	6893      	ldr	r3, [r2, #8]
 8009256:	3b01      	subs	r3, #1
 8009258:	2b00      	cmp	r3, #0
 800925a:	b410      	push	{r4}
 800925c:	6093      	str	r3, [r2, #8]
 800925e:	da08      	bge.n	8009272 <__sfputc_r+0x1e>
 8009260:	6994      	ldr	r4, [r2, #24]
 8009262:	42a3      	cmp	r3, r4
 8009264:	db01      	blt.n	800926a <__sfputc_r+0x16>
 8009266:	290a      	cmp	r1, #10
 8009268:	d103      	bne.n	8009272 <__sfputc_r+0x1e>
 800926a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800926e:	f7fe ba03 	b.w	8007678 <__swbuf_r>
 8009272:	6813      	ldr	r3, [r2, #0]
 8009274:	1c58      	adds	r0, r3, #1
 8009276:	6010      	str	r0, [r2, #0]
 8009278:	7019      	strb	r1, [r3, #0]
 800927a:	4608      	mov	r0, r1
 800927c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009280:	4770      	bx	lr

08009282 <__sfputs_r>:
 8009282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009284:	4606      	mov	r6, r0
 8009286:	460f      	mov	r7, r1
 8009288:	4614      	mov	r4, r2
 800928a:	18d5      	adds	r5, r2, r3
 800928c:	42ac      	cmp	r4, r5
 800928e:	d101      	bne.n	8009294 <__sfputs_r+0x12>
 8009290:	2000      	movs	r0, #0
 8009292:	e007      	b.n	80092a4 <__sfputs_r+0x22>
 8009294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009298:	463a      	mov	r2, r7
 800929a:	4630      	mov	r0, r6
 800929c:	f7ff ffda 	bl	8009254 <__sfputc_r>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d1f3      	bne.n	800928c <__sfputs_r+0xa>
 80092a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092a8 <_vfiprintf_r>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	460d      	mov	r5, r1
 80092ae:	b09d      	sub	sp, #116	; 0x74
 80092b0:	4614      	mov	r4, r2
 80092b2:	4698      	mov	r8, r3
 80092b4:	4606      	mov	r6, r0
 80092b6:	b118      	cbz	r0, 80092c0 <_vfiprintf_r+0x18>
 80092b8:	6983      	ldr	r3, [r0, #24]
 80092ba:	b90b      	cbnz	r3, 80092c0 <_vfiprintf_r+0x18>
 80092bc:	f7ff fa30 	bl	8008720 <__sinit>
 80092c0:	4b89      	ldr	r3, [pc, #548]	; (80094e8 <_vfiprintf_r+0x240>)
 80092c2:	429d      	cmp	r5, r3
 80092c4:	d11b      	bne.n	80092fe <_vfiprintf_r+0x56>
 80092c6:	6875      	ldr	r5, [r6, #4]
 80092c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ca:	07d9      	lsls	r1, r3, #31
 80092cc:	d405      	bmi.n	80092da <_vfiprintf_r+0x32>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	059a      	lsls	r2, r3, #22
 80092d2:	d402      	bmi.n	80092da <_vfiprintf_r+0x32>
 80092d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d6:	f7ff fac6 	bl	8008866 <__retarget_lock_acquire_recursive>
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	071b      	lsls	r3, r3, #28
 80092de:	d501      	bpl.n	80092e4 <_vfiprintf_r+0x3c>
 80092e0:	692b      	ldr	r3, [r5, #16]
 80092e2:	b9eb      	cbnz	r3, 8009320 <_vfiprintf_r+0x78>
 80092e4:	4629      	mov	r1, r5
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7fe fa18 	bl	800771c <__swsetup_r>
 80092ec:	b1c0      	cbz	r0, 8009320 <_vfiprintf_r+0x78>
 80092ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092f0:	07dc      	lsls	r4, r3, #31
 80092f2:	d50e      	bpl.n	8009312 <_vfiprintf_r+0x6a>
 80092f4:	f04f 30ff 	mov.w	r0, #4294967295
 80092f8:	b01d      	add	sp, #116	; 0x74
 80092fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fe:	4b7b      	ldr	r3, [pc, #492]	; (80094ec <_vfiprintf_r+0x244>)
 8009300:	429d      	cmp	r5, r3
 8009302:	d101      	bne.n	8009308 <_vfiprintf_r+0x60>
 8009304:	68b5      	ldr	r5, [r6, #8]
 8009306:	e7df      	b.n	80092c8 <_vfiprintf_r+0x20>
 8009308:	4b79      	ldr	r3, [pc, #484]	; (80094f0 <_vfiprintf_r+0x248>)
 800930a:	429d      	cmp	r5, r3
 800930c:	bf08      	it	eq
 800930e:	68f5      	ldreq	r5, [r6, #12]
 8009310:	e7da      	b.n	80092c8 <_vfiprintf_r+0x20>
 8009312:	89ab      	ldrh	r3, [r5, #12]
 8009314:	0598      	lsls	r0, r3, #22
 8009316:	d4ed      	bmi.n	80092f4 <_vfiprintf_r+0x4c>
 8009318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800931a:	f7ff faa5 	bl	8008868 <__retarget_lock_release_recursive>
 800931e:	e7e9      	b.n	80092f4 <_vfiprintf_r+0x4c>
 8009320:	2300      	movs	r3, #0
 8009322:	9309      	str	r3, [sp, #36]	; 0x24
 8009324:	2320      	movs	r3, #32
 8009326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800932a:	f8cd 800c 	str.w	r8, [sp, #12]
 800932e:	2330      	movs	r3, #48	; 0x30
 8009330:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094f4 <_vfiprintf_r+0x24c>
 8009334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009338:	f04f 0901 	mov.w	r9, #1
 800933c:	4623      	mov	r3, r4
 800933e:	469a      	mov	sl, r3
 8009340:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009344:	b10a      	cbz	r2, 800934a <_vfiprintf_r+0xa2>
 8009346:	2a25      	cmp	r2, #37	; 0x25
 8009348:	d1f9      	bne.n	800933e <_vfiprintf_r+0x96>
 800934a:	ebba 0b04 	subs.w	fp, sl, r4
 800934e:	d00b      	beq.n	8009368 <_vfiprintf_r+0xc0>
 8009350:	465b      	mov	r3, fp
 8009352:	4622      	mov	r2, r4
 8009354:	4629      	mov	r1, r5
 8009356:	4630      	mov	r0, r6
 8009358:	f7ff ff93 	bl	8009282 <__sfputs_r>
 800935c:	3001      	adds	r0, #1
 800935e:	f000 80aa 	beq.w	80094b6 <_vfiprintf_r+0x20e>
 8009362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009364:	445a      	add	r2, fp
 8009366:	9209      	str	r2, [sp, #36]	; 0x24
 8009368:	f89a 3000 	ldrb.w	r3, [sl]
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 80a2 	beq.w	80094b6 <_vfiprintf_r+0x20e>
 8009372:	2300      	movs	r3, #0
 8009374:	f04f 32ff 	mov.w	r2, #4294967295
 8009378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800937c:	f10a 0a01 	add.w	sl, sl, #1
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	9307      	str	r3, [sp, #28]
 8009384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009388:	931a      	str	r3, [sp, #104]	; 0x68
 800938a:	4654      	mov	r4, sl
 800938c:	2205      	movs	r2, #5
 800938e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009392:	4858      	ldr	r0, [pc, #352]	; (80094f4 <_vfiprintf_r+0x24c>)
 8009394:	f7f6 ff24 	bl	80001e0 <memchr>
 8009398:	9a04      	ldr	r2, [sp, #16]
 800939a:	b9d8      	cbnz	r0, 80093d4 <_vfiprintf_r+0x12c>
 800939c:	06d1      	lsls	r1, r2, #27
 800939e:	bf44      	itt	mi
 80093a0:	2320      	movmi	r3, #32
 80093a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093a6:	0713      	lsls	r3, r2, #28
 80093a8:	bf44      	itt	mi
 80093aa:	232b      	movmi	r3, #43	; 0x2b
 80093ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b0:	f89a 3000 	ldrb.w	r3, [sl]
 80093b4:	2b2a      	cmp	r3, #42	; 0x2a
 80093b6:	d015      	beq.n	80093e4 <_vfiprintf_r+0x13c>
 80093b8:	9a07      	ldr	r2, [sp, #28]
 80093ba:	4654      	mov	r4, sl
 80093bc:	2000      	movs	r0, #0
 80093be:	f04f 0c0a 	mov.w	ip, #10
 80093c2:	4621      	mov	r1, r4
 80093c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093c8:	3b30      	subs	r3, #48	; 0x30
 80093ca:	2b09      	cmp	r3, #9
 80093cc:	d94e      	bls.n	800946c <_vfiprintf_r+0x1c4>
 80093ce:	b1b0      	cbz	r0, 80093fe <_vfiprintf_r+0x156>
 80093d0:	9207      	str	r2, [sp, #28]
 80093d2:	e014      	b.n	80093fe <_vfiprintf_r+0x156>
 80093d4:	eba0 0308 	sub.w	r3, r0, r8
 80093d8:	fa09 f303 	lsl.w	r3, r9, r3
 80093dc:	4313      	orrs	r3, r2
 80093de:	9304      	str	r3, [sp, #16]
 80093e0:	46a2      	mov	sl, r4
 80093e2:	e7d2      	b.n	800938a <_vfiprintf_r+0xe2>
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	1d19      	adds	r1, r3, #4
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	9103      	str	r1, [sp, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bfbb      	ittet	lt
 80093f0:	425b      	neglt	r3, r3
 80093f2:	f042 0202 	orrlt.w	r2, r2, #2
 80093f6:	9307      	strge	r3, [sp, #28]
 80093f8:	9307      	strlt	r3, [sp, #28]
 80093fa:	bfb8      	it	lt
 80093fc:	9204      	strlt	r2, [sp, #16]
 80093fe:	7823      	ldrb	r3, [r4, #0]
 8009400:	2b2e      	cmp	r3, #46	; 0x2e
 8009402:	d10c      	bne.n	800941e <_vfiprintf_r+0x176>
 8009404:	7863      	ldrb	r3, [r4, #1]
 8009406:	2b2a      	cmp	r3, #42	; 0x2a
 8009408:	d135      	bne.n	8009476 <_vfiprintf_r+0x1ce>
 800940a:	9b03      	ldr	r3, [sp, #12]
 800940c:	1d1a      	adds	r2, r3, #4
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	9203      	str	r2, [sp, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	bfb8      	it	lt
 8009416:	f04f 33ff 	movlt.w	r3, #4294967295
 800941a:	3402      	adds	r4, #2
 800941c:	9305      	str	r3, [sp, #20]
 800941e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009504 <_vfiprintf_r+0x25c>
 8009422:	7821      	ldrb	r1, [r4, #0]
 8009424:	2203      	movs	r2, #3
 8009426:	4650      	mov	r0, sl
 8009428:	f7f6 feda 	bl	80001e0 <memchr>
 800942c:	b140      	cbz	r0, 8009440 <_vfiprintf_r+0x198>
 800942e:	2340      	movs	r3, #64	; 0x40
 8009430:	eba0 000a 	sub.w	r0, r0, sl
 8009434:	fa03 f000 	lsl.w	r0, r3, r0
 8009438:	9b04      	ldr	r3, [sp, #16]
 800943a:	4303      	orrs	r3, r0
 800943c:	3401      	adds	r4, #1
 800943e:	9304      	str	r3, [sp, #16]
 8009440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009444:	482c      	ldr	r0, [pc, #176]	; (80094f8 <_vfiprintf_r+0x250>)
 8009446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800944a:	2206      	movs	r2, #6
 800944c:	f7f6 fec8 	bl	80001e0 <memchr>
 8009450:	2800      	cmp	r0, #0
 8009452:	d03f      	beq.n	80094d4 <_vfiprintf_r+0x22c>
 8009454:	4b29      	ldr	r3, [pc, #164]	; (80094fc <_vfiprintf_r+0x254>)
 8009456:	bb1b      	cbnz	r3, 80094a0 <_vfiprintf_r+0x1f8>
 8009458:	9b03      	ldr	r3, [sp, #12]
 800945a:	3307      	adds	r3, #7
 800945c:	f023 0307 	bic.w	r3, r3, #7
 8009460:	3308      	adds	r3, #8
 8009462:	9303      	str	r3, [sp, #12]
 8009464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009466:	443b      	add	r3, r7
 8009468:	9309      	str	r3, [sp, #36]	; 0x24
 800946a:	e767      	b.n	800933c <_vfiprintf_r+0x94>
 800946c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009470:	460c      	mov	r4, r1
 8009472:	2001      	movs	r0, #1
 8009474:	e7a5      	b.n	80093c2 <_vfiprintf_r+0x11a>
 8009476:	2300      	movs	r3, #0
 8009478:	3401      	adds	r4, #1
 800947a:	9305      	str	r3, [sp, #20]
 800947c:	4619      	mov	r1, r3
 800947e:	f04f 0c0a 	mov.w	ip, #10
 8009482:	4620      	mov	r0, r4
 8009484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009488:	3a30      	subs	r2, #48	; 0x30
 800948a:	2a09      	cmp	r2, #9
 800948c:	d903      	bls.n	8009496 <_vfiprintf_r+0x1ee>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0c5      	beq.n	800941e <_vfiprintf_r+0x176>
 8009492:	9105      	str	r1, [sp, #20]
 8009494:	e7c3      	b.n	800941e <_vfiprintf_r+0x176>
 8009496:	fb0c 2101 	mla	r1, ip, r1, r2
 800949a:	4604      	mov	r4, r0
 800949c:	2301      	movs	r3, #1
 800949e:	e7f0      	b.n	8009482 <_vfiprintf_r+0x1da>
 80094a0:	ab03      	add	r3, sp, #12
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	462a      	mov	r2, r5
 80094a6:	4b16      	ldr	r3, [pc, #88]	; (8009500 <_vfiprintf_r+0x258>)
 80094a8:	a904      	add	r1, sp, #16
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7fd fc8c 	bl	8006dc8 <_printf_float>
 80094b0:	4607      	mov	r7, r0
 80094b2:	1c78      	adds	r0, r7, #1
 80094b4:	d1d6      	bne.n	8009464 <_vfiprintf_r+0x1bc>
 80094b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094b8:	07d9      	lsls	r1, r3, #31
 80094ba:	d405      	bmi.n	80094c8 <_vfiprintf_r+0x220>
 80094bc:	89ab      	ldrh	r3, [r5, #12]
 80094be:	059a      	lsls	r2, r3, #22
 80094c0:	d402      	bmi.n	80094c8 <_vfiprintf_r+0x220>
 80094c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094c4:	f7ff f9d0 	bl	8008868 <__retarget_lock_release_recursive>
 80094c8:	89ab      	ldrh	r3, [r5, #12]
 80094ca:	065b      	lsls	r3, r3, #25
 80094cc:	f53f af12 	bmi.w	80092f4 <_vfiprintf_r+0x4c>
 80094d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094d2:	e711      	b.n	80092f8 <_vfiprintf_r+0x50>
 80094d4:	ab03      	add	r3, sp, #12
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	462a      	mov	r2, r5
 80094da:	4b09      	ldr	r3, [pc, #36]	; (8009500 <_vfiprintf_r+0x258>)
 80094dc:	a904      	add	r1, sp, #16
 80094de:	4630      	mov	r0, r6
 80094e0:	f7fd ff16 	bl	8007310 <_printf_i>
 80094e4:	e7e4      	b.n	80094b0 <_vfiprintf_r+0x208>
 80094e6:	bf00      	nop
 80094e8:	08009bb8 	.word	0x08009bb8
 80094ec:	08009bd8 	.word	0x08009bd8
 80094f0:	08009b98 	.word	0x08009b98
 80094f4:	08009d54 	.word	0x08009d54
 80094f8:	08009d5e 	.word	0x08009d5e
 80094fc:	08006dc9 	.word	0x08006dc9
 8009500:	08009283 	.word	0x08009283
 8009504:	08009d5a 	.word	0x08009d5a

08009508 <_sbrk_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d06      	ldr	r5, [pc, #24]	; (8009524 <_sbrk_r+0x1c>)
 800950c:	2300      	movs	r3, #0
 800950e:	4604      	mov	r4, r0
 8009510:	4608      	mov	r0, r1
 8009512:	602b      	str	r3, [r5, #0]
 8009514:	f7f8 fbac 	bl	8001c70 <_sbrk>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_sbrk_r+0x1a>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_sbrk_r+0x1a>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20001598 	.word	0x20001598

08009528 <__sread>:
 8009528:	b510      	push	{r4, lr}
 800952a:	460c      	mov	r4, r1
 800952c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009530:	f000 f8e2 	bl	80096f8 <_read_r>
 8009534:	2800      	cmp	r0, #0
 8009536:	bfab      	itete	ge
 8009538:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800953a:	89a3      	ldrhlt	r3, [r4, #12]
 800953c:	181b      	addge	r3, r3, r0
 800953e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009542:	bfac      	ite	ge
 8009544:	6563      	strge	r3, [r4, #84]	; 0x54
 8009546:	81a3      	strhlt	r3, [r4, #12]
 8009548:	bd10      	pop	{r4, pc}

0800954a <__swrite>:
 800954a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800954e:	461f      	mov	r7, r3
 8009550:	898b      	ldrh	r3, [r1, #12]
 8009552:	05db      	lsls	r3, r3, #23
 8009554:	4605      	mov	r5, r0
 8009556:	460c      	mov	r4, r1
 8009558:	4616      	mov	r6, r2
 800955a:	d505      	bpl.n	8009568 <__swrite+0x1e>
 800955c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009560:	2302      	movs	r3, #2
 8009562:	2200      	movs	r2, #0
 8009564:	f000 f898 	bl	8009698 <_lseek_r>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800956e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009572:	81a3      	strh	r3, [r4, #12]
 8009574:	4632      	mov	r2, r6
 8009576:	463b      	mov	r3, r7
 8009578:	4628      	mov	r0, r5
 800957a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800957e:	f000 b817 	b.w	80095b0 <_write_r>

08009582 <__sseek>:
 8009582:	b510      	push	{r4, lr}
 8009584:	460c      	mov	r4, r1
 8009586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958a:	f000 f885 	bl	8009698 <_lseek_r>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	bf15      	itete	ne
 8009594:	6560      	strne	r0, [r4, #84]	; 0x54
 8009596:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800959a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800959e:	81a3      	strheq	r3, [r4, #12]
 80095a0:	bf18      	it	ne
 80095a2:	81a3      	strhne	r3, [r4, #12]
 80095a4:	bd10      	pop	{r4, pc}

080095a6 <__sclose>:
 80095a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095aa:	f000 b831 	b.w	8009610 <_close_r>
	...

080095b0 <_write_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4d07      	ldr	r5, [pc, #28]	; (80095d0 <_write_r+0x20>)
 80095b4:	4604      	mov	r4, r0
 80095b6:	4608      	mov	r0, r1
 80095b8:	4611      	mov	r1, r2
 80095ba:	2200      	movs	r2, #0
 80095bc:	602a      	str	r2, [r5, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	f7f8 fb3a 	bl	8001c38 <_write>
 80095c4:	1c43      	adds	r3, r0, #1
 80095c6:	d102      	bne.n	80095ce <_write_r+0x1e>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	b103      	cbz	r3, 80095ce <_write_r+0x1e>
 80095cc:	6023      	str	r3, [r4, #0]
 80095ce:	bd38      	pop	{r3, r4, r5, pc}
 80095d0:	20001598 	.word	0x20001598

080095d4 <__assert_func>:
 80095d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80095d6:	4614      	mov	r4, r2
 80095d8:	461a      	mov	r2, r3
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <__assert_func+0x2c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4605      	mov	r5, r0
 80095e0:	68d8      	ldr	r0, [r3, #12]
 80095e2:	b14c      	cbz	r4, 80095f8 <__assert_func+0x24>
 80095e4:	4b07      	ldr	r3, [pc, #28]	; (8009604 <__assert_func+0x30>)
 80095e6:	9100      	str	r1, [sp, #0]
 80095e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80095ec:	4906      	ldr	r1, [pc, #24]	; (8009608 <__assert_func+0x34>)
 80095ee:	462b      	mov	r3, r5
 80095f0:	f000 f81e 	bl	8009630 <fiprintf>
 80095f4:	f000 f89f 	bl	8009736 <abort>
 80095f8:	4b04      	ldr	r3, [pc, #16]	; (800960c <__assert_func+0x38>)
 80095fa:	461c      	mov	r4, r3
 80095fc:	e7f3      	b.n	80095e6 <__assert_func+0x12>
 80095fe:	bf00      	nop
 8009600:	2000000c 	.word	0x2000000c
 8009604:	08009d65 	.word	0x08009d65
 8009608:	08009d72 	.word	0x08009d72
 800960c:	08009da0 	.word	0x08009da0

08009610 <_close_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d06      	ldr	r5, [pc, #24]	; (800962c <_close_r+0x1c>)
 8009614:	2300      	movs	r3, #0
 8009616:	4604      	mov	r4, r0
 8009618:	4608      	mov	r0, r1
 800961a:	602b      	str	r3, [r5, #0]
 800961c:	f7f8 fb1a 	bl	8001c54 <_close>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d102      	bne.n	800962a <_close_r+0x1a>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	b103      	cbz	r3, 800962a <_close_r+0x1a>
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	bd38      	pop	{r3, r4, r5, pc}
 800962c:	20001598 	.word	0x20001598

08009630 <fiprintf>:
 8009630:	b40e      	push	{r1, r2, r3}
 8009632:	b503      	push	{r0, r1, lr}
 8009634:	4601      	mov	r1, r0
 8009636:	ab03      	add	r3, sp, #12
 8009638:	4805      	ldr	r0, [pc, #20]	; (8009650 <fiprintf+0x20>)
 800963a:	f853 2b04 	ldr.w	r2, [r3], #4
 800963e:	6800      	ldr	r0, [r0, #0]
 8009640:	9301      	str	r3, [sp, #4]
 8009642:	f7ff fe31 	bl	80092a8 <_vfiprintf_r>
 8009646:	b002      	add	sp, #8
 8009648:	f85d eb04 	ldr.w	lr, [sp], #4
 800964c:	b003      	add	sp, #12
 800964e:	4770      	bx	lr
 8009650:	2000000c 	.word	0x2000000c

08009654 <_fstat_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	; (8009674 <_fstat_r+0x20>)
 8009658:	2300      	movs	r3, #0
 800965a:	4604      	mov	r4, r0
 800965c:	4608      	mov	r0, r1
 800965e:	4611      	mov	r1, r2
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	f7f8 fafb 	bl	8001c5c <_fstat>
 8009666:	1c43      	adds	r3, r0, #1
 8009668:	d102      	bne.n	8009670 <_fstat_r+0x1c>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	b103      	cbz	r3, 8009670 <_fstat_r+0x1c>
 800966e:	6023      	str	r3, [r4, #0]
 8009670:	bd38      	pop	{r3, r4, r5, pc}
 8009672:	bf00      	nop
 8009674:	20001598 	.word	0x20001598

08009678 <_isatty_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d06      	ldr	r5, [pc, #24]	; (8009694 <_isatty_r+0x1c>)
 800967c:	2300      	movs	r3, #0
 800967e:	4604      	mov	r4, r0
 8009680:	4608      	mov	r0, r1
 8009682:	602b      	str	r3, [r5, #0]
 8009684:	f7f8 faf0 	bl	8001c68 <_isatty>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_isatty_r+0x1a>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_isatty_r+0x1a>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	20001598 	.word	0x20001598

08009698 <_lseek_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d07      	ldr	r5, [pc, #28]	; (80096b8 <_lseek_r+0x20>)
 800969c:	4604      	mov	r4, r0
 800969e:	4608      	mov	r0, r1
 80096a0:	4611      	mov	r1, r2
 80096a2:	2200      	movs	r2, #0
 80096a4:	602a      	str	r2, [r5, #0]
 80096a6:	461a      	mov	r2, r3
 80096a8:	f7f8 fae0 	bl	8001c6c <_lseek>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_lseek_r+0x1e>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_lseek_r+0x1e>
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	20001598 	.word	0x20001598

080096bc <__ascii_mbtowc>:
 80096bc:	b082      	sub	sp, #8
 80096be:	b901      	cbnz	r1, 80096c2 <__ascii_mbtowc+0x6>
 80096c0:	a901      	add	r1, sp, #4
 80096c2:	b142      	cbz	r2, 80096d6 <__ascii_mbtowc+0x1a>
 80096c4:	b14b      	cbz	r3, 80096da <__ascii_mbtowc+0x1e>
 80096c6:	7813      	ldrb	r3, [r2, #0]
 80096c8:	600b      	str	r3, [r1, #0]
 80096ca:	7812      	ldrb	r2, [r2, #0]
 80096cc:	1e10      	subs	r0, r2, #0
 80096ce:	bf18      	it	ne
 80096d0:	2001      	movne	r0, #1
 80096d2:	b002      	add	sp, #8
 80096d4:	4770      	bx	lr
 80096d6:	4610      	mov	r0, r2
 80096d8:	e7fb      	b.n	80096d2 <__ascii_mbtowc+0x16>
 80096da:	f06f 0001 	mvn.w	r0, #1
 80096de:	e7f8      	b.n	80096d2 <__ascii_mbtowc+0x16>

080096e0 <__malloc_lock>:
 80096e0:	4801      	ldr	r0, [pc, #4]	; (80096e8 <__malloc_lock+0x8>)
 80096e2:	f7ff b8c0 	b.w	8008866 <__retarget_lock_acquire_recursive>
 80096e6:	bf00      	nop
 80096e8:	2000158c 	.word	0x2000158c

080096ec <__malloc_unlock>:
 80096ec:	4801      	ldr	r0, [pc, #4]	; (80096f4 <__malloc_unlock+0x8>)
 80096ee:	f7ff b8bb 	b.w	8008868 <__retarget_lock_release_recursive>
 80096f2:	bf00      	nop
 80096f4:	2000158c 	.word	0x2000158c

080096f8 <_read_r>:
 80096f8:	b538      	push	{r3, r4, r5, lr}
 80096fa:	4d07      	ldr	r5, [pc, #28]	; (8009718 <_read_r+0x20>)
 80096fc:	4604      	mov	r4, r0
 80096fe:	4608      	mov	r0, r1
 8009700:	4611      	mov	r1, r2
 8009702:	2200      	movs	r2, #0
 8009704:	602a      	str	r2, [r5, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	f7f8 fa88 	bl	8001c1c <_read>
 800970c:	1c43      	adds	r3, r0, #1
 800970e:	d102      	bne.n	8009716 <_read_r+0x1e>
 8009710:	682b      	ldr	r3, [r5, #0]
 8009712:	b103      	cbz	r3, 8009716 <_read_r+0x1e>
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	bd38      	pop	{r3, r4, r5, pc}
 8009718:	20001598 	.word	0x20001598

0800971c <__ascii_wctomb>:
 800971c:	b149      	cbz	r1, 8009732 <__ascii_wctomb+0x16>
 800971e:	2aff      	cmp	r2, #255	; 0xff
 8009720:	bf85      	ittet	hi
 8009722:	238a      	movhi	r3, #138	; 0x8a
 8009724:	6003      	strhi	r3, [r0, #0]
 8009726:	700a      	strbls	r2, [r1, #0]
 8009728:	f04f 30ff 	movhi.w	r0, #4294967295
 800972c:	bf98      	it	ls
 800972e:	2001      	movls	r0, #1
 8009730:	4770      	bx	lr
 8009732:	4608      	mov	r0, r1
 8009734:	4770      	bx	lr

08009736 <abort>:
 8009736:	b508      	push	{r3, lr}
 8009738:	2006      	movs	r0, #6
 800973a:	f000 f82b 	bl	8009794 <raise>
 800973e:	2001      	movs	r0, #1
 8009740:	f7f8 fa66 	bl	8001c10 <_exit>

08009744 <_raise_r>:
 8009744:	291f      	cmp	r1, #31
 8009746:	b538      	push	{r3, r4, r5, lr}
 8009748:	4604      	mov	r4, r0
 800974a:	460d      	mov	r5, r1
 800974c:	d904      	bls.n	8009758 <_raise_r+0x14>
 800974e:	2316      	movs	r3, #22
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	f04f 30ff 	mov.w	r0, #4294967295
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800975a:	b112      	cbz	r2, 8009762 <_raise_r+0x1e>
 800975c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009760:	b94b      	cbnz	r3, 8009776 <_raise_r+0x32>
 8009762:	4620      	mov	r0, r4
 8009764:	f000 f830 	bl	80097c8 <_getpid_r>
 8009768:	462a      	mov	r2, r5
 800976a:	4601      	mov	r1, r0
 800976c:	4620      	mov	r0, r4
 800976e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009772:	f000 b817 	b.w	80097a4 <_kill_r>
 8009776:	2b01      	cmp	r3, #1
 8009778:	d00a      	beq.n	8009790 <_raise_r+0x4c>
 800977a:	1c59      	adds	r1, r3, #1
 800977c:	d103      	bne.n	8009786 <_raise_r+0x42>
 800977e:	2316      	movs	r3, #22
 8009780:	6003      	str	r3, [r0, #0]
 8009782:	2001      	movs	r0, #1
 8009784:	e7e7      	b.n	8009756 <_raise_r+0x12>
 8009786:	2400      	movs	r4, #0
 8009788:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800978c:	4628      	mov	r0, r5
 800978e:	4798      	blx	r3
 8009790:	2000      	movs	r0, #0
 8009792:	e7e0      	b.n	8009756 <_raise_r+0x12>

08009794 <raise>:
 8009794:	4b02      	ldr	r3, [pc, #8]	; (80097a0 <raise+0xc>)
 8009796:	4601      	mov	r1, r0
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	f7ff bfd3 	b.w	8009744 <_raise_r>
 800979e:	bf00      	nop
 80097a0:	2000000c 	.word	0x2000000c

080097a4 <_kill_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	4d07      	ldr	r5, [pc, #28]	; (80097c4 <_kill_r+0x20>)
 80097a8:	2300      	movs	r3, #0
 80097aa:	4604      	mov	r4, r0
 80097ac:	4608      	mov	r0, r1
 80097ae:	4611      	mov	r1, r2
 80097b0:	602b      	str	r3, [r5, #0]
 80097b2:	f7f8 fa25 	bl	8001c00 <_kill>
 80097b6:	1c43      	adds	r3, r0, #1
 80097b8:	d102      	bne.n	80097c0 <_kill_r+0x1c>
 80097ba:	682b      	ldr	r3, [r5, #0]
 80097bc:	b103      	cbz	r3, 80097c0 <_kill_r+0x1c>
 80097be:	6023      	str	r3, [r4, #0]
 80097c0:	bd38      	pop	{r3, r4, r5, pc}
 80097c2:	bf00      	nop
 80097c4:	20001598 	.word	0x20001598

080097c8 <_getpid_r>:
 80097c8:	f7f8 ba18 	b.w	8001bfc <_getpid>

080097cc <_init>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	bf00      	nop
 80097d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d2:	bc08      	pop	{r3}
 80097d4:	469e      	mov	lr, r3
 80097d6:	4770      	bx	lr

080097d8 <_fini>:
 80097d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097da:	bf00      	nop
 80097dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097de:	bc08      	pop	{r3}
 80097e0:	469e      	mov	lr, r3
 80097e2:	4770      	bx	lr
