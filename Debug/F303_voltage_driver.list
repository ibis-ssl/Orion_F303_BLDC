
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c030  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  0800c1c0  0800c1c0  0001c1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbfc  0800cbfc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800cbfc  0800cbfc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cbfc  0800cbfc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbfc  0800cbfc  0001cbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc00  0800cc00  0001cc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cc04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00001ca4  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001e84  20001e84  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026341  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000050f1  00000000  00000000  00046590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0001242c  00000000  00000000  0004b681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001230  00000000  00000000  0005dab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001f4e  00000000  00000000  0005ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000225e1  00000000  00000000  00060c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00006a69  00000000  00000000  0008320f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005260  00000000  00000000  00089c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0008eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1a8 	.word	0x0800c1a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c1a8 	.word	0x0800c1a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c8a:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000c8c:	2400      	movs	r4, #0
{
 8000c8e:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c90:	eb0d 0002 	add.w	r0, sp, r2
 8000c94:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000c96:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000c9e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000ca2:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca4:	9404      	str	r4, [sp, #16]
 8000ca6:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ca8:	f009 f988 	bl	8009fbc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	4836      	ldr	r0, [pc, #216]	; (8000d88 <MX_ADC1_Init+0x100>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb2:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb6:	2301      	movs	r3, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cb8:	e9c0 c200 	strd	ip, r2, [r0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cbc:	8304      	strh	r4, [r0, #24]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	2204      	movs	r2, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc4:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cc6:	6103      	str	r3, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc8:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cce:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd0:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	6142      	str	r2, [r0, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cd6:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd8:	f003 fada 	bl	8004290 <HAL_ADC_Init>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d140      	bne.n	8000d62 <MX_ADC1_Init+0xda>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce2:	4829      	ldr	r0, [pc, #164]	; (8000d88 <MX_ADC1_Init+0x100>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce6:	a901      	add	r1, sp, #4
 8000ce8:	f004 f9ae 	bl	8005048 <HAL_ADCEx_MultiModeConfigChannel>
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d148      	bne.n	8000d82 <MX_ADC1_Init+0xfa>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf0:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf2:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf4:	4824      	ldr	r0, [pc, #144]	; (8000d88 <MX_ADC1_Init+0x100>)
 8000cf6:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cf8:	e9cd 2204 	strd	r2, r2, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cfc:	e9cd 3306 	strd	r3, r3, [sp, #24]
  sConfig.Offset = 0;
 8000d00:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d04:	f003 fd84 	bl	8004810 <HAL_ADC_ConfigChannel>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d137      	bne.n	8000d7c <MX_ADC1_Init+0xf4>
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	9110      	str	r1, [sp, #64]	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000d10:	2105      	movs	r1, #5
 8000d12:	910c      	str	r1, [sp, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d14:	2140      	movs	r1, #64	; 0x40
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d16:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d18:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d1a:	9113      	str	r1, [sp, #76]	; 0x4c
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d1c:	481a      	ldr	r0, [pc, #104]	; (8000d88 <MX_ADC1_Init+0x100>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d1e:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d20:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d22:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d26:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d2a:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d2c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d30:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d34:	f003 ff38 	bl	8004ba8 <HAL_ADCEx_InjectedConfigChannel>
 8000d38:	b9e8      	cbnz	r0, 8000d76 <MX_ADC1_Init+0xee>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d3a:	2204      	movs	r2, #4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d3c:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d3e:	4812      	ldr	r0, [pc, #72]	; (8000d88 <MX_ADC1_Init+0x100>)
 8000d40:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d46:	f003 ff2f 	bl	8004ba8 <HAL_ADCEx_InjectedConfigChannel>
 8000d4a:	b988      	cbnz	r0, 8000d70 <MX_ADC1_Init+0xe8>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d4c:	2205      	movs	r2, #5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d4e:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <MX_ADC1_Init+0x100>)
 8000d52:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d54:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d58:	f003 ff26 	bl	8004ba8 <HAL_ADCEx_InjectedConfigChannel>
 8000d5c:	b920      	cbnz	r0, 8000d68 <MX_ADC1_Init+0xe0>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d5e:	b014      	add	sp, #80	; 0x50
 8000d60:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d62:	f002 faa1 	bl	80032a8 <Error_Handler>
 8000d66:	e7bb      	b.n	8000ce0 <MX_ADC1_Init+0x58>
    Error_Handler();
 8000d68:	f002 fa9e 	bl	80032a8 <Error_Handler>
}
 8000d6c:	b014      	add	sp, #80	; 0x50
 8000d6e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d70:	f002 fa9a 	bl	80032a8 <Error_Handler>
 8000d74:	e7ea      	b.n	8000d4c <MX_ADC1_Init+0xc4>
    Error_Handler();
 8000d76:	f002 fa97 	bl	80032a8 <Error_Handler>
 8000d7a:	e7de      	b.n	8000d3a <MX_ADC1_Init+0xb2>
    Error_Handler();
 8000d7c:	f002 fa94 	bl	80032a8 <Error_Handler>
 8000d80:	e7c4      	b.n	8000d0c <MX_ADC1_Init+0x84>
    Error_Handler();
 8000d82:	f002 fa91 	bl	80032a8 <Error_Handler>
 8000d86:	e7b3      	b.n	8000cf0 <MX_ADC1_Init+0x68>
 8000d88:	20000214 	.word	0x20000214

08000d8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d8c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d8e:	2400      	movs	r4, #0
{
 8000d90:	b090      	sub	sp, #64	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d92:	2228      	movs	r2, #40	; 0x28
 8000d94:	4621      	mov	r1, r4
 8000d96:	a806      	add	r0, sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d98:	e9cd 4400 	strd	r4, r4, [sp]
 8000d9c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000da0:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000da4:	f009 f90a 	bl	8009fbc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000da8:	4823      	ldr	r0, [pc, #140]	; (8000e38 <MX_ADC2_Init+0xac>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000daa:	4924      	ldr	r1, [pc, #144]	; (8000e3c <MX_ADC2_Init+0xb0>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dac:	8304      	strh	r4, [r0, #24]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db2:	2301      	movs	r3, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000db4:	e9c0 1200 	strd	r1, r2, [r0]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db8:	2204      	movs	r2, #4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dba:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbe:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc0:	6104      	str	r4, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dc2:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc6:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000dc8:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dca:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dce:	6142      	str	r2, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dd0:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd2:	f003 fa5d 	bl	8004290 <HAL_ADC_Init>
 8000dd6:	bb20      	cbnz	r0, 8000e22 <MX_ADC2_Init+0x96>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dd8:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_1;
 8000dda:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ddc:	4816      	ldr	r0, [pc, #88]	; (8000e38 <MX_ADC2_Init+0xac>)
 8000dde:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000de0:	e9cd 2200 	strd	r2, r2, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000de4:	e9cd 3302 	strd	r3, r3, [sp, #8]
  sConfig.Offset = 0;
 8000de8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dec:	f003 fd10 	bl	8004810 <HAL_ADC_ConfigChannel>
 8000df0:	b9f0      	cbnz	r0, 8000e30 <MX_ADC2_Init+0xa4>
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000df2:	2405      	movs	r4, #5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000df4:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000df6:	2201      	movs	r2, #1
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000df8:	9408      	str	r4, [sp, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000dfa:	480f      	ldr	r0, [pc, #60]	; (8000e38 <MX_ADC2_Init+0xac>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000dfc:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000dfe:	2440      	movs	r4, #64	; 0x40
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e00:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e02:	e9cd 2206 	strd	r2, r2, [sp, #24]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e06:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e0a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000e0e:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e10:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e14:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e18:	f003 fec6 	bl	8004ba8 <HAL_ADCEx_InjectedConfigChannel>
 8000e1c:	b920      	cbnz	r0, 8000e28 <MX_ADC2_Init+0x9c>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e1e:	b010      	add	sp, #64	; 0x40
 8000e20:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e22:	f002 fa41 	bl	80032a8 <Error_Handler>
 8000e26:	e7d7      	b.n	8000dd8 <MX_ADC2_Init+0x4c>
    Error_Handler();
 8000e28:	f002 fa3e 	bl	80032a8 <Error_Handler>
}
 8000e2c:	b010      	add	sp, #64	; 0x40
 8000e2e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e30:	f002 fa3a 	bl	80032a8 <Error_Handler>
 8000e34:	e7dd      	b.n	8000df2 <MX_ADC2_Init+0x66>
 8000e36:	bf00      	nop
 8000e38:	20000264 	.word	0x20000264
 8000e3c:	50000100 	.word	0x50000100

08000e40 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e40:	b510      	push	{r4, lr}

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e42:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000e44:	2400      	movs	r4, #0
{
 8000e46:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e48:	eb0d 0002 	add.w	r0, sp, r2
 8000e4c:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000e4e:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e52:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000e56:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000e5a:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5c:	9404      	str	r4, [sp, #16]
 8000e5e:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e60:	f009 f8ac 	bl	8009fbc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e64:	4827      	ldr	r0, [pc, #156]	; (8000f04 <MX_ADC3_Init+0xc4>)
 8000e66:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <MX_ADC3_Init+0xc8>)
 8000e68:	6002      	str	r2, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6a:	2301      	movs	r3, #1
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6c:	2204      	movs	r2, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e6e:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e70:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e74:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e78:	6104      	str	r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e7a:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e80:	61c3      	str	r3, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e82:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e86:	6142      	str	r2, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e88:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e8a:	f003 fa01 	bl	8004290 <HAL_ADC_Init>
 8000e8e:	bb60      	cbnz	r0, 8000eea <MX_ADC3_Init+0xaa>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e90:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000e92:	481c      	ldr	r0, [pc, #112]	; (8000f04 <MX_ADC3_Init+0xc4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e94:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000e96:	a901      	add	r1, sp, #4
 8000e98:	f004 f8d6 	bl	8005048 <HAL_ADCEx_MultiModeConfigChannel>
 8000e9c:	bb78      	cbnz	r0, 8000efe <MX_ADC3_Init+0xbe>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e9e:	2205      	movs	r2, #5
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea0:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_5;
 8000ea2:	9204      	str	r2, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <MX_ADC3_Init+0xc4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea6:	2201      	movs	r2, #1
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ea8:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000eaa:	e9cd 3306 	strd	r3, r3, [sp, #24]
  sConfig.Offset = 0;
 8000eae:	e9cd 3308 	strd	r3, r3, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb2:	9205      	str	r2, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eb4:	f003 fcac 	bl	8004810 <HAL_ADC_ConfigChannel>
 8000eb8:	b9f0      	cbnz	r0, 8000ef8 <MX_ADC3_Init+0xb8>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000eba:	2201      	movs	r2, #1
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000ebc:	2005      	movs	r0, #5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000ebe:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000ec0:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000ec4:	2440      	movs	r4, #64	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000ec6:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000ec8:	a90a      	add	r1, sp, #40	; 0x28
 8000eca:	480e      	ldr	r0, [pc, #56]	; (8000f04 <MX_ADC3_Init+0xc4>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000ecc:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000ece:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000ed2:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000ed4:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000ed6:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000ed8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000edc:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000ee0:	f003 fe62 	bl	8004ba8 <HAL_ADCEx_InjectedConfigChannel>
 8000ee4:	b920      	cbnz	r0, 8000ef0 <MX_ADC3_Init+0xb0>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ee6:	b014      	add	sp, #80	; 0x50
 8000ee8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000eea:	f002 f9dd 	bl	80032a8 <Error_Handler>
 8000eee:	e7cf      	b.n	8000e90 <MX_ADC3_Init+0x50>
    Error_Handler();
 8000ef0:	f002 f9da 	bl	80032a8 <Error_Handler>
}
 8000ef4:	b014      	add	sp, #80	; 0x50
 8000ef6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000ef8:	f002 f9d6 	bl	80032a8 <Error_Handler>
 8000efc:	e7dd      	b.n	8000eba <MX_ADC3_Init+0x7a>
    Error_Handler();
 8000efe:	f002 f9d3 	bl	80032a8 <Error_Handler>
 8000f02:	e7cc      	b.n	8000e9e <MX_ADC3_Init+0x5e>
 8000f04:	200002b4 	.word	0x200002b4
 8000f08:	50000400 	.word	0x50000400
 8000f0c:	00000000 	.word	0x00000000

08000f10 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000f12:	6802      	ldr	r2, [r0, #0]
{
 8000f14:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8000f18:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000f20:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000f24:	930c      	str	r3, [sp, #48]	; 0x30
  if(adcHandle->Instance==ADC1)
 8000f26:	d024      	beq.n	8000f72 <HAL_ADC_MspInit+0x62>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000f28:	4b49      	ldr	r3, [pc, #292]	; (8001050 <HAL_ADC_MspInit+0x140>)
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d005      	beq.n	8000f3a <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000f2e:	4b49      	ldr	r3, [pc, #292]	; (8001054 <HAL_ADC_MspInit+0x144>)
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d063      	beq.n	8000ffc <HAL_ADC_MspInit+0xec>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f34:	b00f      	add	sp, #60	; 0x3c
 8000f36:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f3a:	4a47      	ldr	r2, [pc, #284]	; (8001058 <HAL_ADC_MspInit+0x148>)
 8000f3c:	6813      	ldr	r3, [r2, #0]
 8000f3e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f40:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f44:	d04f      	beq.n	8000fe6 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b45      	ldr	r3, [pc, #276]	; (800105c <HAL_ADC_MspInit+0x14c>)
 8000f48:	695a      	ldr	r2, [r3, #20]
 8000f4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f52:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8001040 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	a908      	add	r1, sp, #32
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f62:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f004 ffa8 	bl	8005ebc <HAL_GPIO_Init>
}
 8000f6c:	b00f      	add	sp, #60	; 0x3c
 8000f6e:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f72:	4a39      	ldr	r2, [pc, #228]	; (8001058 <HAL_ADC_MspInit+0x148>)
 8000f74:	6813      	ldr	r3, [r2, #0]
 8000f76:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f78:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f7c:	d028      	beq.n	8000fd0 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <HAL_ADC_MspInit+0x14c>)
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f86:	615a      	str	r2, [r3, #20]
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f8e:	9202      	str	r2, [sp, #8]
 8000f90:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fa2:	2209      	movs	r2, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fa6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fac:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f004 ff83 	bl	8005ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fb6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001040 <HAL_ADC_MspInit+0x130>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fbc:	4828      	ldr	r0, [pc, #160]	; (8001060 <HAL_ADC_MspInit+0x150>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fc0:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fc2:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fc6:	f004 ff79 	bl	8005ebc <HAL_GPIO_Init>
}
 8000fca:	b00f      	add	sp, #60	; 0x3c
 8000fcc:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <HAL_ADC_MspInit+0x14c>)
 8000fd2:	695a      	ldr	r2, [r3, #20]
 8000fd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	9b01      	ldr	r3, [sp, #4]
 8000fe4:	e7cb      	b.n	8000f7e <HAL_ADC_MspInit+0x6e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_ADC_MspInit+0x14c>)
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	9304      	str	r3, [sp, #16]
 8000ff8:	9b04      	ldr	r3, [sp, #16]
 8000ffa:	e7a4      	b.n	8000f46 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000ffc:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001000:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001004:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001048 <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001008:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	4816      	ldr	r0, [pc, #88]	; (8001064 <HAL_ADC_MspInit+0x154>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800100c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001018:	9206      	str	r2, [sp, #24]
 800101a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800102e:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f004 ff42 	bl	8005ebc <HAL_GPIO_Init>
}
 8001038:	e77c      	b.n	8000f34 <HAL_ADC_MspInit+0x24>
 800103a:	bf00      	nop
 800103c:	f3af 8000 	nop.w
 8001040:	00000010 	.word	0x00000010
 8001044:	00000003 	.word	0x00000003
 8001048:	00002000 	.word	0x00002000
 800104c:	00000003 	.word	0x00000003
 8001050:	50000100 	.word	0x50000100
 8001054:	50000400 	.word	0x50000400
 8001058:	200001fc 	.word	0x200001fc
 800105c:	40021000 	.word	0x40021000
 8001060:	48001400 	.word	0x48001400
 8001064:	48000400 	.word	0x48000400

08001068 <getBatteryVoltage>:
}

/* USER CODE BEGIN 1 */

inline float getBatteryVoltage(void)
{
 8001068:	b508      	push	{r3, lr}
  return adc_raw.batt_v * 3.3 * 11 / 4096;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <getBatteryVoltage+0x28>)
 800106c:	6898      	ldr	r0, [r3, #8]
 800106e:	f7ff fa59 	bl	8000524 <__aeabi_i2d>
 8001072:	a305      	add	r3, pc, #20	; (adr r3, 8001088 <getBatteryVoltage+0x20>)
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f7ff fabe 	bl	80005f8 <__aeabi_dmul>
 800107c:	f7ff fdb4 	bl	8000be8 <__aeabi_d2f>
}
 8001080:	ee00 0a10 	vmov	s0, r0
 8001084:	bd08      	pop	{r3, pc}
 8001086:	bf00      	nop
 8001088:	66666666 	.word	0x66666666
 800108c:	3f822666 	.word	0x3f822666
 8001090:	20000200 	.word	0x20000200
 8001094:	00000000 	.word	0x00000000

08001098 <getCurrentM0>:
// 50V/V * 5m = 250mV/A
inline float getCurrentM0(void)
{
 8001098:	b508      	push	{r3, lr}
  return (adc_raw.cs_m0 - 2048) * 3.3 / 4096 * 4;
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <getCurrentM0+0x30>)
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 80010a2:	f7ff fa3f 	bl	8000524 <__aeabi_i2d>
 80010a6:	a306      	add	r3, pc, #24	; (adr r3, 80010c0 <getCurrentM0+0x28>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	f7ff faa4 	bl	80005f8 <__aeabi_dmul>
 80010b0:	f7ff fd9a 	bl	8000be8 <__aeabi_d2f>
}
 80010b4:	ee00 0a10 	vmov	s0, r0
 80010b8:	bd08      	pop	{r3, pc}
 80010ba:	bf00      	nop
 80010bc:	f3af 8000 	nop.w
 80010c0:	66666666 	.word	0x66666666
 80010c4:	3f6a6666 	.word	0x3f6a6666
 80010c8:	20000200 	.word	0x20000200
 80010cc:	00000000 	.word	0x00000000

080010d0 <getCurrentM1>:
inline float getCurrentM1(void)
{
 80010d0:	b508      	push	{r3, lr}
  return (adc_raw.cs_m1 - 2048) * 3.3 / 4096 * 4;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <getCurrentM1+0x30>)
 80010d4:	6858      	ldr	r0, [r3, #4]
 80010d6:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 80010da:	f7ff fa23 	bl	8000524 <__aeabi_i2d>
 80010de:	a306      	add	r3, pc, #24	; (adr r3, 80010f8 <getCurrentM1+0x28>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff fa88 	bl	80005f8 <__aeabi_dmul>
 80010e8:	f7ff fd7e 	bl	8000be8 <__aeabi_d2f>
}
 80010ec:	ee00 0a10 	vmov	s0, r0
 80010f0:	bd08      	pop	{r3, pc}
 80010f2:	bf00      	nop
 80010f4:	f3af 8000 	nop.w
 80010f8:	66666666 	.word	0x66666666
 80010fc:	3f6a6666 	.word	0x3f6a6666
 8001100:	20000200 	.word	0x20000200
 8001104:	00000000 	.word	0x00000000

08001108 <getTempM0>:

inline float getTempM0(void) { return (-((float)adc_raw.temp_m0 * 3.3 / 4096) + 1.5) * 70 + 25; }
 8001108:	b508      	push	{r3, lr}
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <getTempM0+0x50>)
 800110c:	68d8      	ldr	r0, [r3, #12]
 800110e:	ee07 0a90 	vmov	s15, r0
 8001112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001116:	ee17 0a90 	vmov	r0, s15
 800111a:	f7ff fa15 	bl	8000548 <__aeabi_f2d>
 800111e:	a30c      	add	r3, pc, #48	; (adr r3, 8001150 <getTempM0+0x48>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fa68 	bl	80005f8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	2000      	movs	r0, #0
 800112e:	490b      	ldr	r1, [pc, #44]	; (800115c <getTempM0+0x54>)
 8001130:	f7ff f8aa 	bl	8000288 <__aeabi_dsub>
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <getTempM0+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	f7ff fa5e 	bl	80005f8 <__aeabi_dmul>
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <getTempM0+0x5c>)
 800113e:	2200      	movs	r2, #0
 8001140:	f7ff f8a4 	bl	800028c <__adddf3>
 8001144:	f7ff fd50 	bl	8000be8 <__aeabi_d2f>
 8001148:	ee00 0a10 	vmov	s0, r0
 800114c:	bd08      	pop	{r3, pc}
 800114e:	bf00      	nop
 8001150:	66666666 	.word	0x66666666
 8001154:	3f4a6666 	.word	0x3f4a6666
 8001158:	20000200 	.word	0x20000200
 800115c:	3ff80000 	.word	0x3ff80000
 8001160:	40518000 	.word	0x40518000
 8001164:	40390000 	.word	0x40390000

08001168 <getTempM1>:
inline float getTempM1(void) { return (-((float)adc_raw.temp_m1 * 3.3 / 4096) + 1.5) * 70 + 25; }
 8001168:	b508      	push	{r3, lr}
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <getTempM1+0x50>)
 800116c:	6918      	ldr	r0, [r3, #16]
 800116e:	ee07 0a90 	vmov	s15, r0
 8001172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001176:	ee17 0a90 	vmov	r0, s15
 800117a:	f7ff f9e5 	bl	8000548 <__aeabi_f2d>
 800117e:	a30c      	add	r3, pc, #48	; (adr r3, 80011b0 <getTempM1+0x48>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa38 	bl	80005f8 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	2000      	movs	r0, #0
 800118e:	490b      	ldr	r1, [pc, #44]	; (80011bc <getTempM1+0x54>)
 8001190:	f7ff f87a 	bl	8000288 <__aeabi_dsub>
 8001194:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <getTempM1+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <getTempM1+0x5c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f7ff f874 	bl	800028c <__adddf3>
 80011a4:	f7ff fd20 	bl	8000be8 <__aeabi_d2f>
 80011a8:	ee00 0a10 	vmov	s0, r0
 80011ac:	bd08      	pop	{r3, pc}
 80011ae:	bf00      	nop
 80011b0:	66666666 	.word	0x66666666
 80011b4:	3f4a6666 	.word	0x3f4a6666
 80011b8:	20000200 	.word	0x20000200
 80011bc:	3ff80000 	.word	0x3ff80000
 80011c0:	40518000 	.word	0x40518000
 80011c4:	40390000 	.word	0x40390000

080011c8 <updateADC_M0>:
inline void updateADC_M0(void)
{
 80011c8:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011ca:	4e12      	ldr	r6, [pc, #72]	; (8001214 <updateADC_M0+0x4c>)
  adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80011cc:	4c12      	ldr	r4, [pc, #72]	; (8001218 <updateADC_M0+0x50>)
 80011ce:	4d13      	ldr	r5, [pc, #76]	; (800121c <updateADC_M0+0x54>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	4630      	mov	r0, r6
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	f004 ff5e 	bl	8006098 <HAL_GPIO_WritePin>
  adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80011dc:	2101      	movs	r1, #1
 80011de:	4620      	mov	r0, r4
 80011e0:	f003 fb00 	bl	80047e4 <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80011e4:	2102      	movs	r1, #2
  adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 80011e6:	6028      	str	r0, [r5, #0]
  adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80011e8:	4620      	mov	r0, r4
 80011ea:	f003 fafb 	bl	80047e4 <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 80011ee:	2103      	movs	r1, #3
  adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 80011f0:	60e8      	str	r0, [r5, #12]
  adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 80011f2:	4620      	mov	r0, r4
 80011f4:	f003 faf6 	bl	80047e4 <HAL_ADCEx_InjectedGetValue>
 80011f8:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc1);
 80011fa:	4620      	mov	r0, r4
  adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 80011fc:	612b      	str	r3, [r5, #16]
  HAL_ADCEx_InjectedStart(&hadc1);
 80011fe:	f003 fa69 	bl	80046d4 <HAL_ADCEx_InjectedStart>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001202:	4630      	mov	r0, r6
 8001204:	2200      	movs	r2, #0
}
 8001206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800120a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120e:	f004 bf43 	b.w	8006098 <HAL_GPIO_WritePin>
 8001212:	bf00      	nop
 8001214:	48000800 	.word	0x48000800
 8001218:	20000214 	.word	0x20000214
 800121c:	20000200 	.word	0x20000200

08001220 <updateADC_M1>:

inline void updateADC_M1(void)
{
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001222:	4c11      	ldr	r4, [pc, #68]	; (8001268 <updateADC_M1+0x48>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 8001224:	4d11      	ldr	r5, [pc, #68]	; (800126c <updateADC_M1+0x4c>)
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001226:	4f12      	ldr	r7, [pc, #72]	; (8001270 <updateADC_M1+0x50>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 8001228:	4e12      	ldr	r6, [pc, #72]	; (8001274 <updateADC_M1+0x54>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	4620      	mov	r0, r4
 800122e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001232:	f004 ff31 	bl	8006098 <HAL_GPIO_WritePin>
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 8001236:	2101      	movs	r1, #1
 8001238:	4628      	mov	r0, r5
 800123a:	f003 fad3 	bl	80047e4 <HAL_ADCEx_InjectedGetValue>
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800123e:	2101      	movs	r1, #1
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 8001240:	60b0      	str	r0, [r6, #8]
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001242:	4638      	mov	r0, r7
 8001244:	f003 face 	bl	80047e4 <HAL_ADCEx_InjectedGetValue>
 8001248:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc2);
 800124a:	4638      	mov	r0, r7
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800124c:	6073      	str	r3, [r6, #4]
  HAL_ADCEx_InjectedStart(&hadc2);
 800124e:	f003 fa41 	bl	80046d4 <HAL_ADCEx_InjectedStart>
  HAL_ADCEx_InjectedStart(&hadc3);
 8001252:	4628      	mov	r0, r5
 8001254:	f003 fa3e 	bl	80046d4 <HAL_ADCEx_InjectedStart>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001258:	4620      	mov	r0, r4
 800125a:	2200      	movs	r2, #0
}
 800125c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	f004 bf18 	b.w	8006098 <HAL_GPIO_WritePin>
 8001268:	48000800 	.word	0x48000800
 800126c:	200002b4 	.word	0x200002b4
 8001270:	20000264 	.word	0x20000264
 8001274:	20000200 	.word	0x20000200

08001278 <MX_CAN_Init>:
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_CAN_Init+0x38>)
 800127a:	490e      	ldr	r1, [pc, #56]	; (80012b4 <MX_CAN_Init+0x3c>)
  hcan.Init.Prescaler = 4;
 800127c:	2204      	movs	r2, #4
{
 800127e:	b510      	push	{r4, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001280:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 4;
 8001282:	e9c0 1200 	strd	r1, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001286:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 800128a:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800128e:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001292:	6182      	str	r2, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001294:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001296:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 800129a:	e9c0 4104 	strd	r4, r1, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800129e:	f003 ff65 	bl	800516c <HAL_CAN_Init>
 80012a2:	b900      	cbnz	r0, 80012a6 <MX_CAN_Init+0x2e>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80012aa:	f001 bffd 	b.w	80032a8 <Error_Handler>
 80012ae:	bf00      	nop
 80012b0:	20000308 	.word	0x20000308
 80012b4:	40006400 	.word	0x40006400

080012b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80012b8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 80012ba:	4b28      	ldr	r3, [pc, #160]	; (800135c <HAL_CAN_MspInit+0xa4>)
 80012bc:	6802      	ldr	r2, [r0, #0]
{
 80012be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 80012c2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80012c8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80012cc:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN)
 80012ce:	d001      	beq.n	80012d4 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80012d0:	b009      	add	sp, #36	; 0x24
 80012d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012d4:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d8:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012da:	69da      	ldr	r2, [r3, #28]
 80012dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80012e0:	61da      	str	r2, [r3, #28]
 80012e2:	69da      	ldr	r2, [r3, #28]
 80012e4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80012e8:	9200      	str	r2, [sp, #0]
 80012ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012f2:	615a      	str	r2, [r3, #20]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012fc:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001300:	2302      	movs	r3, #2
 8001302:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800130a:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800130e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f004 fdd2 	bl	8005ebc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8001318:	4622      	mov	r2, r4
 800131a:	4621      	mov	r1, r4
 800131c:	2013      	movs	r0, #19
 800131e:	f004 faad 	bl	800587c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8001322:	2013      	movs	r0, #19
 8001324:	f004 fae8 	bl	80058f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001328:	4622      	mov	r2, r4
 800132a:	4621      	mov	r1, r4
 800132c:	2014      	movs	r0, #20
 800132e:	f004 faa5 	bl	800587c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001332:	2014      	movs	r0, #20
 8001334:	f004 fae0 	bl	80058f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 8001338:	4622      	mov	r2, r4
 800133a:	2101      	movs	r1, #1
 800133c:	2015      	movs	r0, #21
 800133e:	f004 fa9d 	bl	800587c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001342:	2015      	movs	r0, #21
 8001344:	f004 fad8 	bl	80058f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 8001348:	4622      	mov	r2, r4
 800134a:	2101      	movs	r1, #1
 800134c:	2016      	movs	r0, #22
 800134e:	f004 fa95 	bl	800587c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8001352:	2016      	movs	r0, #22
 8001354:	f004 fad0 	bl	80058f8 <HAL_NVIC_EnableIRQ>
}
 8001358:	b009      	add	sp, #36	; 0x24
 800135a:	bd30      	pop	{r4, r5, pc}
 800135c:	40006400 	.word	0x40006400

08001360 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(uint16_t board_addr)
{
 8001360:	b510      	push	{r4, lr}
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
  sFilterConfig.FilterBank = 0;
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5;
 8001362:	3080      	adds	r0, #128	; 0x80
{
 8001364:	b08a      	sub	sp, #40	; 0x28
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5;
 8001366:	0043      	lsls	r3, r0, #1
  sFilterConfig.FilterIdLow = (0x300 + board_addr * 2) << 5;
 8001368:	f503 7c00 	add.w	ip, r3, #512	; 0x200
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5;
 800136c:	1c59      	adds	r1, r3, #1
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5;
 800136e:	0180      	lsls	r0, r0, #6
  sFilterConfig.FilterMaskIdLow = (0x301 + board_addr * 2) << 5;
 8001370:	f203 2301 	addw	r3, r3, #513	; 0x201
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5;
 8001374:	0149      	lsls	r1, r1, #5
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5;
 8001376:	9000      	str	r0, [sp, #0]
  sFilterConfig.FilterMaskIdLow = (0x301 + board_addr * 2) << 5;
 8001378:	015b      	lsls	r3, r3, #5
  sFilterConfig.FilterIdLow = (0x300 + board_addr * 2) << 5;
 800137a:	ea4f 104c 	mov.w	r0, ip, lsl #5
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800137e:	2200      	movs	r2, #0
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001380:	2401      	movs	r4, #1
  sFilterConfig.FilterMaskIdLow = (0x301 + board_addr * 2) << 5;
 8001382:	e9cd 1302 	strd	r1, r3, [sp, #8]
  sFilterConfig.FilterIdLow = (0x300 + board_addr * 2) << 5;
 8001386:	9001      	str	r0, [sp, #4]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;
  //sFilterConfig.SlaveStartFilterBank = 0; dont supported F3xx
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001388:	4669      	mov	r1, sp
 800138a:	481a      	ldr	r0, [pc, #104]	; (80013f4 <CAN_Filter_Init+0x94>)
  sFilterConfig.FilterBank = 0;
 800138c:	9205      	str	r2, [sp, #20]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800138e:	e9cd 4206 	strd	r4, r2, [sp, #24]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001392:	9204      	str	r2, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001394:	9408      	str	r4, [sp, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001396:	f003 ff69 	bl	800526c <HAL_CAN_ConfigFilter>
 800139a:	b9f0      	cbnz	r0, 80013da <CAN_Filter_Init+0x7a>
  {
    Error_Handler();
  }

  sFilterConfig.FilterIdHigh = (0x110) << 5;  // kick
  sFilterConfig.FilterIdLow = (0x010) << 5; // power enable
 800139c:	f44f 7300 	mov.w	r3, #512	; 0x200
  sFilterConfig.FilterIdHigh = (0x110) << 5;  // kick
 80013a0:	f44f 5408 	mov.w	r4, #8704	; 0x2200
  sFilterConfig.FilterMaskIdHigh = (0x000) << 5; // emg stop
 80013a4:	2200      	movs	r2, #0
  sFilterConfig.FilterIdLow = (0x010) << 5; // power enable
 80013a6:	e9cd 4300 	strd	r4, r3, [sp]
  sFilterConfig.FilterMaskIdLow = (0x001) << 5; // error report
 80013aa:	2320      	movs	r3, #32
 80013ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
  sFilterConfig.FilterBank = 1;
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <CAN_Filter_Init+0x94>)
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80013b2:	2201      	movs	r2, #1
 80013b4:	2301      	movs	r3, #1
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80013b6:	4669      	mov	r1, sp
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80013b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80013bc:	f003 ff56 	bl	800526c <HAL_CAN_ConfigFilter>
 80013c0:	b9a8      	cbnz	r0, 80013ee <CAN_Filter_Init+0x8e>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80013c2:	480c      	ldr	r0, [pc, #48]	; (80013f4 <CAN_Filter_Init+0x94>)
 80013c4:	2102      	movs	r1, #2
 80013c6:	f004 f8e3 	bl	8005590 <HAL_CAN_ActivateNotification>
 80013ca:	b968      	cbnz	r0, 80013e8 <CAN_Filter_Init+0x88>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80013cc:	4809      	ldr	r0, [pc, #36]	; (80013f4 <CAN_Filter_Init+0x94>)
 80013ce:	2110      	movs	r1, #16
 80013d0:	f004 f8de 	bl	8005590 <HAL_CAN_ActivateNotification>
 80013d4:	b920      	cbnz	r0, 80013e0 <CAN_Filter_Init+0x80>
  {
    Error_Handler();
  }
}
 80013d6:	b00a      	add	sp, #40	; 0x28
 80013d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013da:	f001 ff65 	bl	80032a8 <Error_Handler>
 80013de:	e7dd      	b.n	800139c <CAN_Filter_Init+0x3c>
    Error_Handler();
 80013e0:	f001 ff62 	bl	80032a8 <Error_Handler>
}
 80013e4:	b00a      	add	sp, #40	; 0x28
 80013e6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013e8:	f001 ff5e 	bl	80032a8 <Error_Handler>
 80013ec:	e7ee      	b.n	80013cc <CAN_Filter_Init+0x6c>
    Error_Handler();
 80013ee:	f001 ff5b 	bl	80032a8 <Error_Handler>
 80013f2:	e7e6      	b.n	80013c2 <CAN_Filter_Init+0x62>
 80013f4:	20000308 	.word	0x20000308

080013f8 <sendSpeed>:
    can_send_fail_cnt++;
  }
}

void sendSpeed(int board_id, int motor, float speed, float angle)
{
 80013f8:	b510      	push	{r4, lr}
  sendSpeedInfo(0x200 + board_id * 2 + motor, speed, angle);
 80013fa:	f500 7080 	add.w	r0, r0, #256	; 0x100
{
 80013fe:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 8001400:	2200      	movs	r2, #0
  sendSpeedInfo(0x200 + board_id * 2 + motor, speed, angle);
 8001402:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 8;
 8001406:	2408      	movs	r4, #8
 8001408:	e9cd 2407 	strd	r2, r4, [sp, #28]
  can_header.StdId = can_id;
 800140c:	9104      	str	r1, [sp, #16]
  can_header.ExtId = 0;
 800140e:	9205      	str	r2, [sp, #20]
  can_header.IDE = CAN_ID_STD;
 8001410:	9206      	str	r2, [sp, #24]
  can_header.TransmitGlobalTime = DISABLE;
 8001412:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <sendSpeed+0x44>)
  msg.speed.rev_p_sec = rev_per_sec_;
 8001418:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 800141c:	ab01      	add	r3, sp, #4
 800141e:	eb0d 0204 	add.w	r2, sp, r4
 8001422:	a904      	add	r1, sp, #16
  msg.speed.omni_angle = omni_angle_;
 8001424:	edcd 0a03 	vstr	s1, [sp, #12]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001428:	f003 ffca 	bl	80053c0 <HAL_CAN_AddTxMessage>
 800142c:	b118      	cbz	r0, 8001436 <sendSpeed+0x3e>
    can_send_fail_cnt++;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <sendSpeed+0x48>)
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	b00a      	add	sp, #40	; 0x28
 8001438:	bd10      	pop	{r4, pc}
 800143a:	bf00      	nop
 800143c:	20000308 	.word	0x20000308
 8001440:	20000304 	.word	0x20000304

08001444 <sendVoltage>:

void sendVoltage(int board_id, int motor, float voltage)
{
 8001444:	b510      	push	{r4, lr}
  sendFloat(0x210 + board_id * 2 + motor, voltage);
 8001446:	f500 7084 	add.w	r0, r0, #264	; 0x108
{
 800144a:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 800144c:	2400      	movs	r4, #0
  sendFloat(0x210 + board_id * 2 + motor, voltage);
 800144e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 8001452:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 8001454:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 8001458:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 800145c:	eb0d 0302 	add.w	r3, sp, r2
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <sendVoltage+0x40>)
  can_header.IDE = CAN_ID_STD;
 8001462:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001464:	aa02      	add	r2, sp, #8
 8001466:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 8001468:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 800146c:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001470:	f003 ffa6 	bl	80053c0 <HAL_CAN_AddTxMessage>
 8001474:	b118      	cbz	r0, 800147e <sendVoltage+0x3a>
    can_send_fail_cnt++;
 8001476:	4a04      	ldr	r2, [pc, #16]	; (8001488 <sendVoltage+0x44>)
 8001478:	6813      	ldr	r3, [r2, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	b00a      	add	sp, #40	; 0x28
 8001480:	bd10      	pop	{r4, pc}
 8001482:	bf00      	nop
 8001484:	20000308 	.word	0x20000308
 8001488:	20000304 	.word	0x20000304

0800148c <sendTemperature>:

void sendTemperature(int board_id, int motor, float temp)
{
 800148c:	b510      	push	{r4, lr}
  sendFloat(0x220 + board_id * 2 + motor, temp);
 800148e:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
 8001492:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 8001494:	2400      	movs	r4, #0
  sendFloat(0x220 + board_id * 2 + motor, temp);
 8001496:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 800149a:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 800149c:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 80014a0:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80014a4:	eb0d 0302 	add.w	r3, sp, r2
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <sendTemperature+0x40>)
  can_header.IDE = CAN_ID_STD;
 80014aa:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80014ac:	aa02      	add	r2, sp, #8
 80014ae:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 80014b0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 80014b4:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80014b8:	f003 ff82 	bl	80053c0 <HAL_CAN_AddTxMessage>
 80014bc:	b118      	cbz	r0, 80014c6 <sendTemperature+0x3a>
    can_send_fail_cnt++;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <sendTemperature+0x44>)
 80014c0:	6813      	ldr	r3, [r2, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	6013      	str	r3, [r2, #0]
}
 80014c6:	b00a      	add	sp, #40	; 0x28
 80014c8:	bd10      	pop	{r4, pc}
 80014ca:	bf00      	nop
 80014cc:	20000308 	.word	0x20000308
 80014d0:	20000304 	.word	0x20000304

080014d4 <sendCurrent>:

void sendCurrent(int board_id, int motor, float current)
{
 80014d4:	b510      	push	{r4, lr}
  sendFloat(0x230 + board_id * 2 + motor, current);
 80014d6:	f500 708c 	add.w	r0, r0, #280	; 0x118
{
 80014da:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 80014dc:	2400      	movs	r4, #0
  sendFloat(0x230 + board_id * 2 + motor, current);
 80014de:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 80014e2:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 80014e4:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 80014e8:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80014ec:	eb0d 0302 	add.w	r3, sp, r2
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <sendCurrent+0x40>)
  can_header.IDE = CAN_ID_STD;
 80014f2:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80014f4:	aa02      	add	r2, sp, #8
 80014f6:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 80014f8:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 80014fc:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001500:	f003 ff5e 	bl	80053c0 <HAL_CAN_AddTxMessage>
 8001504:	b118      	cbz	r0, 800150e <sendCurrent+0x3a>
    can_send_fail_cnt++;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <sendCurrent+0x44>)
 8001508:	6813      	ldr	r3, [r2, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	6013      	str	r3, [r2, #0]
}
 800150e:	b00a      	add	sp, #40	; 0x28
 8001510:	bd10      	pop	{r4, pc}
 8001512:	bf00      	nop
 8001514:	20000308 	.word	0x20000308
 8001518:	20000304 	.word	0x20000304

0800151c <getCanError>:

uint32_t getCanError(void){
 800151c:	b538      	push	{r3, r4, r5, lr}
  uint32_t err = HAL_CAN_GetError(&hcan);
 800151e:	4d05      	ldr	r5, [pc, #20]	; (8001534 <getCanError+0x18>)
 8001520:	4628      	mov	r0, r5
 8001522:	f004 f987 	bl	8005834 <HAL_CAN_GetError>
 8001526:	4604      	mov	r4, r0
  HAL_CAN_ResetError(&hcan);
 8001528:	4628      	mov	r0, r5
 800152a:	f004 f985 	bl	8005838 <HAL_CAN_ResetError>
  return err;
}
 800152e:	4620      	mov	r0, r4
 8001530:	bd38      	pop	{r3, r4, r5, pc}
 8001532:	bf00      	nop
 8001534:	20000308 	.word	0x20000308

08001538 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_DMA_Init+0x30>)
{
 800153a:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800153c:	6959      	ldr	r1, [r3, #20]
 800153e:	f041 0101 	orr.w	r1, r1, #1
 8001542:	6159      	str	r1, [r3, #20]
 8001544:	695b      	ldr	r3, [r3, #20]
{
 8001546:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001550:	200e      	movs	r0, #14
 8001552:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001554:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001556:	f004 f991 	bl	800587c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800155a:	200e      	movs	r0, #14

}
 800155c:	b003      	add	sp, #12
 800155e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001562:	f004 b9c9 	b.w	80058f8 <HAL_NVIC_EnableIRQ>
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000

0800156c <writeFlash>:
flash_t flash;
// 2K / page
// 128Kbyte -> 64page
// page : 0~
static void writeFlash(uint32_t board_id, float calib_m0, float calib_m1,float motor_calib_m0,float motor_calib_m1)
{
 800156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001570:	b088      	sub	sp, #32
    FLASH_EraseInitTypeDef erase;
    uint32_t page_error = 0;
    erase.TypeErase = TYPEERASE_PAGES;
 8001572:	491f      	ldr	r1, [pc, #124]	; (80015f0 <writeFlash+0x84>)
{
 8001574:	9001      	str	r0, [sp, #4]
    uint32_t page_error = 0;
 8001576:	2400      	movs	r4, #0
    erase.PageAddress = FLASH_ADDR_DATA;
    erase.NbPages = 1;
 8001578:	2301      	movs	r3, #1
    erase.TypeErase = TYPEERASE_PAGES;
 800157a:	2000      	movs	r0, #0
{
 800157c:	ee10 8a10 	vmov	r8, s0
 8001580:	ee10 7a90 	vmov	r7, s1
 8001584:	ee11 6a10 	vmov	r6, s2
 8001588:	ee11 5a90 	vmov	r5, s3
    erase.NbPages = 1;
 800158c:	9306      	str	r3, [sp, #24]
    erase.TypeErase = TYPEERASE_PAGES;
 800158e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    uint32_t page_error = 0;
 8001592:	9403      	str	r4, [sp, #12]
    HAL_FLASH_Unlock();
 8001594:	f004 fbcc 	bl	8005d30 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase, &page_error);
 8001598:	a903      	add	r1, sp, #12
 800159a:	a804      	add	r0, sp, #16
 800159c:	f004 fc2c 	bl	8005df8 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 80015a0:	f004 fbda 	bl	8005d58 <HAL_FLASH_Lock>

    HAL_FLASH_Unlock();
 80015a4:	f004 fbc4 	bl	8005d30 <HAL_FLASH_Unlock>
    uint32_t flash_raw;
    flash_raw = board_id;
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CAN_ID, flash_raw);
 80015a8:	9a01      	ldr	r2, [sp, #4]
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <writeFlash+0x84>)
 80015ac:	4623      	mov	r3, r4
 80015ae:	2002      	movs	r0, #2
 80015b0:	f004 faf2 	bl	8005b98 <HAL_FLASH_Program>
    memcpy(&flash_raw, &calib_m0, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_ENC_CALIB_M0, flash_raw);
 80015b4:	4642      	mov	r2, r8
 80015b6:	4623      	mov	r3, r4
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <writeFlash+0x88>)
 80015ba:	2002      	movs	r0, #2
 80015bc:	f004 faec 	bl	8005b98 <HAL_FLASH_Program>
    memcpy(&flash_raw, &calib_m1, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_ENC_CALIB_M1, flash_raw);
 80015c0:	463a      	mov	r2, r7
 80015c2:	4623      	mov	r3, r4
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <writeFlash+0x8c>)
 80015c6:	2002      	movs	r0, #2
 80015c8:	f004 fae6 	bl	8005b98 <HAL_FLASH_Program>
    memcpy(&flash_raw, &motor_calib_m0, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_MOTOR_CALIB_M0, flash_raw);
 80015cc:	4632      	mov	r2, r6
 80015ce:	4623      	mov	r3, r4
 80015d0:	490a      	ldr	r1, [pc, #40]	; (80015fc <writeFlash+0x90>)
 80015d2:	2002      	movs	r0, #2
 80015d4:	f004 fae0 	bl	8005b98 <HAL_FLASH_Program>
    memcpy(&flash_raw, &motor_calib_m1, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_MOTOR_CALIB_M1, flash_raw);
 80015d8:	4909      	ldr	r1, [pc, #36]	; (8001600 <writeFlash+0x94>)
 80015da:	462a      	mov	r2, r5
 80015dc:	4623      	mov	r3, r4
 80015de:	2002      	movs	r0, #2
 80015e0:	f004 fada 	bl	8005b98 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 80015e4:	f004 fbb8 	bl	8005d58 <HAL_FLASH_Lock>
}
 80015e8:	b008      	add	sp, #32
 80015ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ee:	bf00      	nop
 80015f0:	0801f000 	.word	0x0801f000
 80015f4:	0801f004 	.word	0x0801f004
 80015f8:	0801f008 	.word	0x0801f008
 80015fc:	0801f00c 	.word	0x0801f00c
 8001600:	0801f010 	.word	0x0801f010

08001604 <writeCanBoardID>:

void writeCanBoardID(uint32_t id) { writeFlash(id, flash.calib[0], flash.calib[1], flash.rps_per_v[0], flash.rps_per_v[1]); }
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <writeCanBoardID+0x18>)
 8001606:	edd3 1a04 	vldr	s3, [r3, #16]
 800160a:	ed93 1a03 	vldr	s2, [r3, #12]
 800160e:	edd3 0a01 	vldr	s1, [r3, #4]
 8001612:	ed93 0a00 	vldr	s0, [r3]
 8001616:	f7ff bfa9 	b.w	800156c <writeFlash>
 800161a:	bf00      	nop
 800161c:	20000330 	.word	0x20000330

08001620 <writeEncCalibrationValue>:
void writeEncCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, calib_m0, calib_m1, flash.rps_per_v[0], flash.rps_per_v[1]); }
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <writeEncCalibrationValue+0x10>)
 8001622:	edd3 1a04 	vldr	s3, [r3, #16]
 8001626:	ed93 1a03 	vldr	s2, [r3, #12]
 800162a:	6898      	ldr	r0, [r3, #8]
 800162c:	f7ff bf9e 	b.w	800156c <writeFlash>
 8001630:	20000330 	.word	0x20000330

08001634 <writeMotorCalibrationValue>:
void writeMotorCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, flash.calib[0], flash.calib[1], calib_m0, calib_m1); }
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <writeMotorCalibrationValue+0x18>)
 8001636:	eeb0 1a40 	vmov.f32	s2, s0
 800163a:	eef0 1a60 	vmov.f32	s3, s1
 800163e:	ed93 0a00 	vldr	s0, [r3]
 8001642:	edd3 0a01 	vldr	s1, [r3, #4]
 8001646:	6898      	ldr	r0, [r3, #8]
 8001648:	f7ff bf90 	b.w	800156c <writeFlash>
 800164c:	20000330 	.word	0x20000330

08001650 <loadFlashData>:

void loadFlashData(void){
 8001650:	b410      	push	{r4}
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <loadFlashData+0x20>)
    memcpy(&flash.board_id, (uint32_t *)FLASH_ADDR_CAN_ID, 4);
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <loadFlashData+0x24>)
 8001656:	e9d2 4100 	ldrd	r4, r1, [r2]
    memcpy(&flash.calib[0], (uint32_t *)FLASH_ADDR_ENC_CALIB_M0, 4);
 800165a:	6019      	str	r1, [r3, #0]
 800165c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8001660:	6912      	ldr	r2, [r2, #16]
    memcpy(&flash.calib[1], (uint32_t *)FLASH_ADDR_ENC_CALIB_M1, 4);
 8001662:	e9c3 0401 	strd	r0, r4, [r3, #4]
    memcpy(&flash.rps_per_v[0], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_M0, 4);
    memcpy(&flash.rps_per_v[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_M1, 4);
 8001666:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 800166a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	0801f000 	.word	0x0801f000
 8001674:	20000330 	.word	0x20000330

08001678 <isPushedSW1>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
inline bool isPushedSW1(void)
{
 8001678:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800167a:	2101      	movs	r1, #1
 800167c:	4803      	ldr	r0, [pc, #12]	; (800168c <isPushedSW1+0x14>)
 800167e:	f004 fd05 	bl	800608c <HAL_GPIO_ReadPin>
}
 8001682:	fab0 f080 	clz	r0, r0
 8001686:	0940      	lsrs	r0, r0, #5
 8001688:	bd08      	pop	{r3, pc}
 800168a:	bf00      	nop
 800168c:	48000800 	.word	0x48000800

08001690 <isPushedSW2>:
inline bool isPushedSW2(void)
{
 8001690:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001692:	2102      	movs	r1, #2
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <isPushedSW2+0x14>)
 8001696:	f004 fcf9 	bl	800608c <HAL_GPIO_ReadPin>
}
 800169a:	fab0 f080 	clz	r0, r0
 800169e:	0940      	lsrs	r0, r0, #5
 80016a0:	bd08      	pop	{r3, pc}
 80016a2:	bf00      	nop
 80016a4:	48000800 	.word	0x48000800

080016a8 <isPushedSW3>:
inline bool isPushedSW3(void)
{
 80016a8:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80016aa:	2104      	movs	r1, #4
 80016ac:	4803      	ldr	r0, [pc, #12]	; (80016bc <isPushedSW3+0x14>)
 80016ae:	f004 fced 	bl	800608c <HAL_GPIO_ReadPin>
}
 80016b2:	fab0 f080 	clz	r0, r0
 80016b6:	0940      	lsrs	r0, r0, #5
 80016b8:	bd08      	pop	{r3, pc}
 80016ba:	bf00      	nop
 80016bc:	48000800 	.word	0x48000800

080016c0 <isPushedSW4>:
inline bool isPushedSW4(void)
{
 80016c0:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 80016c2:	2108      	movs	r1, #8
 80016c4:	4803      	ldr	r0, [pc, #12]	; (80016d4 <isPushedSW4+0x14>)
 80016c6:	f004 fce1 	bl	800608c <HAL_GPIO_ReadPin>
}
 80016ca:	fab0 f080 	clz	r0, r0
 80016ce:	0940      	lsrs	r0, r0, #5
 80016d0:	bd08      	pop	{r3, pc}
 80016d2:	bf00      	nop
 80016d4:	48000800 	.word	0x48000800

080016d8 <setLedRed>:

inline void setLedRed(bool on){
 80016d8:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, on);
 80016da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016de:	4801      	ldr	r0, [pc, #4]	; (80016e4 <setLedRed+0xc>)
 80016e0:	f004 bcda 	b.w	8006098 <HAL_GPIO_WritePin>
 80016e4:	48000800 	.word	0x48000800

080016e8 <setLedBlue>:
}
inline void setLedBlue(bool on){
 80016e8:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, on);
 80016ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016ee:	4801      	ldr	r0, [pc, #4]	; (80016f4 <setLedBlue+0xc>)
 80016f0:	f004 bcd2 	b.w	8006098 <HAL_GPIO_WritePin>
 80016f4:	48000800 	.word	0x48000800

080016f8 <setLedGreen>:
}
inline void setLedGreen(bool on){
 80016f8:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, on);
 80016fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fe:	4801      	ldr	r0, [pc, #4]	; (8001704 <setLedGreen+0xc>)
 8001700:	f004 bcca 	b.w	8006098 <HAL_GPIO_WritePin>
 8001704:	48000800 	.word	0x48000800

08001708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001708:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	2400      	movs	r4, #0
{
 800170c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001712:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	4b29      	ldr	r3, [pc, #164]	; (80017bc <MX_GPIO_Init+0xb4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800171c:	4e28      	ldr	r6, [pc, #160]	; (80017c0 <MX_GPIO_Init+0xb8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800171e:	4f29      	ldr	r7, [pc, #164]	; (80017c4 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001720:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001724:	615a      	str	r2, [r3, #20]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001736:	615a      	str	r2, [r3, #20]
 8001738:	695a      	ldr	r2, [r3, #20]
 800173a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800173e:	9201      	str	r2, [sp, #4]
 8001740:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001748:	615a      	str	r2, [r3, #20]
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001750:	9202      	str	r2, [sp, #8]
 8001752:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001762:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001764:	4622      	mov	r2, r4
 8001766:	4630      	mov	r0, r6
 8001768:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800176e:	f004 fc93 	bl	8006098 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001772:	4622      	mov	r2, r4
 8001774:	4638      	mov	r0, r7
 8001776:	21c0      	movs	r1, #192	; 0xc0
 8001778:	f004 fc8e 	bl	8006098 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2501      	movs	r5, #1
 800177e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	a904      	add	r1, sp, #16
 8001784:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178e:	f004 fb95 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001792:	220f      	movs	r2, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	4630      	mov	r0, r6
 8001796:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001798:	2300      	movs	r3, #0
 800179a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a0:	f004 fb8c 	bl	8005ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017a4:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	a904      	add	r1, sp, #16
 80017a8:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f004 fb83 	bl	8005ebc <HAL_GPIO_Init>

}
 80017b6:	b00b      	add	sp, #44	; 0x2c
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000400 	.word	0x48000400

080017c8 <HAL_UART_RxCpltCallback>:
extern uint32_t can_send_fail_cnt;

uint8_t uart_rx_buf[10] = {0};
bool uart_rx_flag = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) { uart_rx_flag = true; }
 80017c8:	4b01      	ldr	r3, [pc, #4]	; (80017d0 <HAL_UART_RxCpltCallback+0x8>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
 80017ce:	4770      	bx	lr
 80017d0:	200004aa 	.word	0x200004aa

080017d4 <checkAngle>:
  motor_real[motor].pre_rps = motor_real[motor].rps;
  motor_real[motor].pre_enc_cnt_raw = ma702[motor].enc_raw;
}

void checkAngle(int motor)
{
 80017d4:	b470      	push	{r4, r5, r6}
  calib[motor].radian_ave += ma702[motor].output_radian;
 80017d6:	4d30      	ldr	r5, [pc, #192]	; (8001898 <checkAngle+0xc4>)
 80017d8:	4c30      	ldr	r4, [pc, #192]	; (800189c <checkAngle+0xc8>)
 80017da:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
 80017de:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 80017e2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80017e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80017ea:	edd2 7a00 	vldr	s15, [r2]
  calib[motor].ave_cnt++;
 80017ee:	6899      	ldr	r1, [r3, #8]
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_rotation_speed < 0) {
 80017f0:	68de      	ldr	r6, [r3, #12]
  calib[motor].radian_ave += ma702[motor].output_radian;
 80017f2:	ee37 7a27 	vadd.f32	s14, s14, s15
  calib[motor].ave_cnt++;
 80017f6:	3101      	adds	r1, #1
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_rotation_speed < 0) {
 80017f8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
  calib[motor].radian_ave += ma702[motor].output_radian;
 80017fc:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8001800:	ed83 7a01 	vstr	s14, [r3, #4]
  calib[motor].ave_cnt++;
 8001804:	6099      	str	r1, [r3, #8]
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_rotation_speed < 0) {
 8001806:	dd14      	ble.n	8001832 <checkAngle+0x5e>
 8001808:	6854      	ldr	r4, [r2, #4]
 800180a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800180e:	da09      	bge.n	8001824 <checkAngle+0x50>
 8001810:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <checkAngle+0xcc>)
 8001812:	edd2 7a00 	vldr	s15, [r2]
 8001816:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	d424      	bmi.n	800186e <checkAngle+0x9a>
    calib[motor].result_cw_cnt++;
    calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
    calib[motor].radian_ave = 0;
    calib[motor].ave_cnt = 0;
  }
  calib[motor].pre_raw = ma702[motor].enc_raw;
 8001824:	eb0c 0200 	add.w	r2, ip, r0
 8001828:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800182c:	60dc      	str	r4, [r3, #12]
}
 800182e:	bc70      	pop	{r4, r5, r6}
 8001830:	4770      	bx	lr
  if (calib[motor].pre_raw < HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw > HARF_OF_ENC_CNT_MAX && calib_rotation_speed > 0) {
 8001832:	d02b      	beq.n	800188c <checkAngle+0xb8>
 8001834:	6854      	ldr	r4, [r2, #4]
 8001836:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800183a:	ddf3      	ble.n	8001824 <checkAngle+0x50>
 800183c:	4a18      	ldr	r2, [pc, #96]	; (80018a0 <checkAngle+0xcc>)
 800183e:	edd2 7a00 	vldr	s15, [r2]
 8001842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	dde9      	ble.n	8001824 <checkAngle+0x50>
    calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001850:	ee07 1a90 	vmov	s15, r1
 8001854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calib[motor].radian_ave = 0;
 8001858:	605a      	str	r2, [r3, #4]
    calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 800185a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    calib[motor].result_cw_cnt++;
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	3201      	adds	r2, #1
 8001862:	615a      	str	r2, [r3, #20]
    calib[motor].ave_cnt = 0;
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
    calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001868:	edc3 6a04 	vstr	s13, [r3, #16]
 800186c:	e7da      	b.n	8001824 <checkAngle+0x50>
    calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 800186e:	ee07 1a90 	vmov	s15, r1
 8001872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calib[motor].radian_ave = 0;
 8001876:	605a      	str	r2, [r3, #4]
    calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001878:	eec7 6a27 	vdiv.f32	s13, s14, s15
    calib[motor].result_ccw_cnt++;
 800187c:	69da      	ldr	r2, [r3, #28]
 800187e:	3201      	adds	r2, #1
 8001880:	61da      	str	r2, [r3, #28]
    calib[motor].ave_cnt = 0;
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
    calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001886:	edc3 6a06 	vstr	s13, [r3, #24]
 800188a:	e7cb      	b.n	8001824 <checkAngle+0x50>
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_rotation_speed < 0) {
 800188c:	2324      	movs	r3, #36	; 0x24
 800188e:	fb03 4400 	mla	r4, r3, r0, r4
 8001892:	6864      	ldr	r4, [r4, #4]
 8001894:	e7c6      	b.n	8001824 <checkAngle+0x50>
 8001896:	bf00      	nop
 8001898:	20000344 	.word	0x20000344
 800189c:	20000514 	.word	0x20000514
 80018a0:	20000000 	.word	0x20000000
 80018a4:	00000000 	.word	0x00000000

080018a8 <HAL_TIM_PeriodElapsedCallback>:

// 7APB 36MHz / 1800 cnt -> 20kHz -> 2ms cycle
#define INTERRUPT_KHZ_1MS (20)
volatile uint32_t interrupt_timer_cnt = 0, main_loop_remain_counter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  // TIM1 : M1
  // TIM8 : M0
  static bool motor_select_toggle = false;
  interrupt_timer_cnt++;
 80018aa:	4957      	ldr	r1, [pc, #348]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x160>)

  motor_select_toggle = !motor_select_toggle;
 80018ac:	4c57      	ldr	r4, [pc, #348]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x164>)
  interrupt_timer_cnt++;
 80018ae:	680a      	ldr	r2, [r1, #0]
  motor_select_toggle = !motor_select_toggle;
 80018b0:	7823      	ldrb	r3, [r4, #0]
{
 80018b2:	ed2d 8b02 	vpush	{d8}
  motor_select_toggle = !motor_select_toggle;
 80018b6:	f083 0301 	eor.w	r3, r3, #1
  interrupt_timer_cnt++;
 80018ba:	3201      	adds	r2, #1
{
 80018bc:	b083      	sub	sp, #12
  setLedBlue(false);
 80018be:	2000      	movs	r0, #0
  motor_select_toggle = !motor_select_toggle;
 80018c0:	7023      	strb	r3, [r4, #0]
  interrupt_timer_cnt++;
 80018c2:	600a      	str	r2, [r1, #0]
  setLedBlue(false);
 80018c4:	f7ff ff10 	bl	80016e8 <setLedBlue>
  if (enc_calibration_mode) {
 80018c8:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d03b      	beq.n	8001948 <HAL_TIM_PeriodElapsedCallback+0xa0>
  manual_offset_radian += calib_rotation_speed;
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80018d2:	4d51      	ldr	r5, [pc, #324]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ed95 8a00 	vldr	s16, [r5]
    calibrationProcess(motor_select_toggle);
 80018dc:	7824      	ldrb	r4, [r4, #0]
  manual_offset_radian += calib_rotation_speed;
 80018de:	ee38 8a27 	vadd.f32	s16, s16, s15
  if (manual_offset_radian > M_PI * 2) {
 80018e2:	ee18 0a10 	vmov	r0, s16
 80018e6:	f7fe fe2f 	bl	8000548 <__aeabi_f2d>
 80018ea:	a345      	add	r3, pc, #276	; (adr r3, 8001a00 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	4606      	mov	r6, r0
 80018f2:	460f      	mov	r7, r1
 80018f4:	f7ff f910 	bl	8000b18 <__aeabi_dcmpgt>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	d159      	bne.n	80019b0 <HAL_TIM_PeriodElapsedCallback+0x108>
  if (manual_offset_radian < 0) {
 80018fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  manual_offset_radian += calib_rotation_speed;
 8001904:	ed85 8a00 	vstr	s16, [r5]
  if (manual_offset_radian < 0) {
 8001908:	d467      	bmi.n	80019da <HAL_TIM_PeriodElapsedCallback+0x132>
  if (motor) {
 800190a:	2c00      	cmp	r4, #0
 800190c:	d048      	beq.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0xf8>
    updateADC_M0();
 800190e:	f7ff fc5b 	bl	80011c8 <updateADC_M0>
    updateMA702_M0();
 8001912:	f001 fd9d 	bl	8003450 <updateMA702_M0>
    setOutputRadianM0(manual_offset_radian, cmd[0].out_v_final, getBatteryVoltage());
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001918:	ed95 8a00 	vldr	s16, [r5]
    setOutputRadianM0(ma702[0].output_radian + enc_offset[0].final, cmd[0].out_v_final, getBatteryVoltage());
 800191c:	edd3 0a03 	vldr	s1, [r3, #12]
 8001920:	edcd 0a01 	vstr	s1, [sp, #4]
 8001924:	f7ff fba0 	bl	8001068 <getBatteryVoltage>
 8001928:	eddd 0a01 	vldr	s1, [sp, #4]
 800192c:	eeb0 1a40 	vmov.f32	s2, s0
 8001930:	eeb0 0a48 	vmov.f32	s0, s16
 8001934:	f002 f928 	bl	8003b88 <setOutputRadianM0>
  } else {
    motorProcess(motor_select_toggle);
  }

  setLedBlue(true);
 8001938:	2001      	movs	r0, #1
}
 800193a:	b003      	add	sp, #12
 800193c:	ecbd 8b02 	vpop	{d8}
 8001940:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  setLedBlue(true);
 8001944:	f7ff bed0 	b.w	80016e8 <setLedBlue>
  if (motor) {
 8001948:	7823      	ldrb	r3, [r4, #0]
 800194a:	b9db      	cbnz	r3, 8001984 <HAL_TIM_PeriodElapsedCallback+0xdc>
    updateADC_M1();
 800194c:	f7ff fc68 	bl	8001220 <updateADC_M1>
    updateMA702_M1();
 8001950:	f001 fdee 	bl	8003530 <updateMA702_M1>
    setOutputRadianM1(ma702[1].output_radian + enc_offset[1].final, cmd[1].out_v_final, getBatteryVoltage());
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001956:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001958:	edd3 7a02 	vldr	s15, [r3, #8]
 800195c:	ed92 8a09 	vldr	s16, [r2, #36]	; 0x24
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001962:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001966:	edd3 0a08 	vldr	s1, [r3, #32]
 800196a:	edcd 0a01 	vstr	s1, [sp, #4]
 800196e:	f7ff fb7b 	bl	8001068 <getBatteryVoltage>
 8001972:	eddd 0a01 	vldr	s1, [sp, #4]
 8001976:	eeb0 1a40 	vmov.f32	s2, s0
 800197a:	eeb0 0a48 	vmov.f32	s0, s16
 800197e:	f002 f97b 	bl	8003c78 <setOutputRadianM1>
 8001982:	e7d9      	b.n	8001938 <HAL_TIM_PeriodElapsedCallback+0x90>
    updateADC_M0();
 8001984:	f7ff fc20 	bl	80011c8 <updateADC_M0>
    updateMA702_M0();
 8001988:	f001 fd62 	bl	8003450 <updateMA702_M0>
    setOutputRadianM0(ma702[0].output_radian + enc_offset[0].final, cmd[0].out_v_final, getBatteryVoltage());
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ed92 8a00 	vldr	s16, [r2]
 8001998:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800199a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800199e:	e7bd      	b.n	800191c <HAL_TIM_PeriodElapsedCallback+0x74>
    updateADC_M1();
 80019a0:	f7ff fc3e 	bl	8001220 <updateADC_M1>
    updateMA702_M1();
 80019a4:	f001 fdc4 	bl	8003530 <updateMA702_M1>
    setOutputRadianM1(manual_offset_radian, cmd[1].out_v_final, getBatteryVoltage());
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80019aa:	ed95 8a00 	vldr	s16, [r5]
 80019ae:	e7da      	b.n	8001966 <HAL_TIM_PeriodElapsedCallback+0xbe>
    manual_offset_radian -= M_PI * 2;
 80019b0:	a313      	add	r3, pc, #76	; (adr r3, 8001a00 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	4630      	mov	r0, r6
 80019b8:	4639      	mov	r1, r7
 80019ba:	f7fe fc65 	bl	8000288 <__aeabi_dsub>
 80019be:	f7ff f913 	bl	8000be8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
    checkAngle(motor);
 80019c4:	4620      	mov	r0, r4
    manual_offset_radian -= M_PI * 2;
 80019c6:	602b      	str	r3, [r5, #0]
    checkAngle(motor);
 80019c8:	f7ff ff04 	bl	80017d4 <checkAngle>
  if (manual_offset_radian < 0) {
 80019cc:	ed95 8a00 	vldr	s16, [r5]
 80019d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	d597      	bpl.n	800190a <HAL_TIM_PeriodElapsedCallback+0x62>
    manual_offset_radian += M_PI * 2;
 80019da:	ee18 0a10 	vmov	r0, s16
 80019de:	f7fe fdb3 	bl	8000548 <__aeabi_f2d>
 80019e2:	a307      	add	r3, pc, #28	; (adr r3, 8001a00 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80019e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e8:	f7fe fc50 	bl	800028c <__adddf3>
 80019ec:	f7ff f8fc 	bl	8000be8 <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
    checkAngle(motor);
 80019f2:	4620      	mov	r0, r4
    manual_offset_radian += M_PI * 2;
 80019f4:	602b      	str	r3, [r5, #0]
    checkAngle(motor);
 80019f6:	f7ff feed 	bl	80017d4 <checkAngle>
 80019fa:	e786      	b.n	800190a <HAL_TIM_PeriodElapsedCallback+0x62>
 80019fc:	f3af 8000 	nop.w
 8001a00:	54442d18 	.word	0x54442d18
 8001a04:	401921fb 	.word	0x401921fb
 8001a08:	200003f0 	.word	0x200003f0
 8001a0c:	20000438 	.word	0x20000438
 8001a10:	200003dc 	.word	0x200003dc
 8001a14:	20000000 	.word	0x20000000
 8001a18:	200003f8 	.word	0x200003f8
 8001a1c:	200003b4 	.word	0x200003b4
 8001a20:	200003e0 	.word	0x200003e0
 8001a24:	20000514 	.word	0x20000514

08001a28 <HAL_CAN_RxFifo0MsgPendingCallback>:
      break;
  }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef * hcan)
{
 8001a28:	b538      	push	{r3, r4, r5, lr}
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001a2a:	4c2e      	ldr	r4, [pc, #184]	; (8001ae4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8001a2c:	4d2e      	ldr	r5, [pc, #184]	; (8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8001a2e:	4623      	mov	r3, r4
 8001a30:	462a      	mov	r2, r5
 8001a32:	2100      	movs	r1, #0
 8001a34:	f003 fd1c 	bl	8005470 <HAL_CAN_GetRxMessage>
 8001a38:	b108      	cbz	r0, 8001a3e <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001a3c:	e7fe      	b.n	8001a3c <HAL_CAN_RxFifo0MsgPendingCallback+0x14>
  if (enc_calibration_mode) {
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	bb8b      	cbnz	r3, 8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
  can_rx_cnt++;
 8001a44:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001af0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
 8001a48:	edd4 7a00 	vldr	s15, [r4]
 8001a4c:	4929      	ldr	r1, [pc, #164]	; (8001af4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001a4e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001af8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
 8001a52:	680a      	ldr	r2, [r1, #0]
  switch (can_rx_header.StdId) {
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	bfb8      	it	lt
 8001a60:	eef0 7a66 	vmovlt.f32	s15, s13
 8001a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  can_rx_cnt++;
 8001a6c:	f102 0201 	add.w	r2, r2, #1
 8001a70:	bf88      	it	hi
 8001a72:	eef0 7a47 	vmovhi.f32	s15, s14
  switch (can_rx_header.StdId) {
 8001a76:	2b10      	cmp	r3, #16
  can_rx_cnt++;
 8001a78:	600a      	str	r2, [r1, #0]
  switch (can_rx_header.StdId) {
 8001a7a:	d01c      	beq.n	8001ab6 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
 8001a7c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d811      	bhi.n	8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	d80f      	bhi.n	8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
 8001a88:	e8df f003 	tbb	[pc, r3]
 8001a8c:	090f090f 	.word	0x090f090f
 8001a90:	0e0e0e0e 	.word	0x0e0e0e0e
 8001a94:	0e0e0e0e 	.word	0x0e0e0e0e
 8001a98:	0e0e0e0e 	.word	0x0e0e0e0e
 8001a9c:	20          	.byte	0x20
 8001a9d:	00          	.byte	0x00
      cmd[1].speed = tmp_speed;
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
      cmd[1].timeout_cnt = 100;
 8001aa0:	2264      	movs	r2, #100	; 0x64
      cmd[1].speed = tmp_speed;
 8001aa2:	edc3 7a05 	vstr	s15, [r3, #20]
      cmd[1].timeout_cnt = 100;
 8001aa6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001aa8:	bd38      	pop	{r3, r4, r5, pc}
      cmd[0].speed = tmp_speed;
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
      cmd[0].timeout_cnt = 100;
 8001aac:	2264      	movs	r2, #100	; 0x64
      cmd[0].speed = tmp_speed;
 8001aae:	edc3 7a00 	vstr	s15, [r3]
      cmd[0].timeout_cnt = 100;
 8001ab2:	611a      	str	r2, [r3, #16]
}
 8001ab4:	bd38      	pop	{r3, r4, r5, pc}
      if (can_rx_buf.data[0] == 0) {
 8001ab6:	7823      	ldrb	r3, [r4, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f5      	bne.n	8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
        if (can_rx_buf.data[1] == 0) {
 8001abc:	7863      	ldrb	r3, [r4, #1]
 8001abe:	b16b      	cbz	r3, 8001adc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
        } else if (can_rx_buf.data[1] == 1) {
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d1f1      	bne.n	8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
          power_enable_cnt = 100;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8001ac6:	2264      	movs	r2, #100	; 0x64
 8001ac8:	601a      	str	r2, [r3, #0]
}
 8001aca:	bd38      	pop	{r3, r4, r5, pc}
      if (can_rx_buf.data[0] == 3) {
 8001acc:	7823      	ldrb	r3, [r4, #0]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d1ea      	bne.n	8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
        free_wheel_cnt = 500;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8001ad4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ad8:	601a      	str	r2, [r3, #0]
}
 8001ada:	bd38      	pop	{r3, r4, r5, pc}
 8001adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          HAL_NVIC_SystemReset();
 8001ae0:	f003 bf18 	b.w	8005914 <HAL_NVIC_SystemReset>
 8001ae4:	2000038c 	.word	0x2000038c
 8001ae8:	20000398 	.word	0x20000398
 8001aec:	200003dc 	.word	0x200003dc
 8001af0:	c2c80000 	.word	0xc2c80000
 8001af4:	20000394 	.word	0x20000394
 8001af8:	42c80000 	.word	0x42c80000
 8001afc:	200003b4 	.word	0x200003b4
 8001b00:	20000494 	.word	0x20000494
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 8001b08:	b538      	push	{r3, r4, r5, lr}
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001b0a:	4c2e      	ldr	r4, [pc, #184]	; (8001bc4 <HAL_CAN_RxFifo1MsgPendingCallback+0xbc>)
 8001b0c:	4d2e      	ldr	r5, [pc, #184]	; (8001bc8 <HAL_CAN_RxFifo1MsgPendingCallback+0xc0>)
 8001b0e:	4623      	mov	r3, r4
 8001b10:	462a      	mov	r2, r5
 8001b12:	2101      	movs	r1, #1
 8001b14:	f003 fcac 	bl	8005470 <HAL_CAN_GetRxMessage>
 8001b18:	b108      	cbz	r0, 8001b1e <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
 8001b1a:	b672      	cpsid	i
  while (1) {
 8001b1c:	e7fe      	b.n	8001b1c <HAL_CAN_RxFifo1MsgPendingCallback+0x14>
  if (enc_calibration_mode) {
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_CAN_RxFifo1MsgPendingCallback+0xc4>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	bb8b      	cbnz	r3, 8001b88 <HAL_CAN_RxFifo1MsgPendingCallback+0x80>
  can_rx_cnt++;
 8001b24:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001bd0 <HAL_CAN_RxFifo1MsgPendingCallback+0xc8>
 8001b28:	edd4 7a00 	vldr	s15, [r4]
 8001b2c:	4929      	ldr	r1, [pc, #164]	; (8001bd4 <HAL_CAN_RxFifo1MsgPendingCallback+0xcc>)
 8001b2e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001bd8 <HAL_CAN_RxFifo1MsgPendingCallback+0xd0>
 8001b32:	680a      	ldr	r2, [r1, #0]
  switch (can_rx_header.StdId) {
 8001b34:	682b      	ldr	r3, [r5, #0]
 8001b36:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b3e:	bfb8      	it	lt
 8001b40:	eef0 7a66 	vmovlt.f32	s15, s13
 8001b44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  can_rx_cnt++;
 8001b4c:	f102 0201 	add.w	r2, r2, #1
 8001b50:	bf88      	it	hi
 8001b52:	eef0 7a47 	vmovhi.f32	s15, s14
  switch (can_rx_header.StdId) {
 8001b56:	2b10      	cmp	r3, #16
  can_rx_cnt++;
 8001b58:	600a      	str	r2, [r1, #0]
  switch (can_rx_header.StdId) {
 8001b5a:	d01c      	beq.n	8001b96 <HAL_CAN_RxFifo1MsgPendingCallback+0x8e>
 8001b5c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	d811      	bhi.n	8001b88 <HAL_CAN_RxFifo1MsgPendingCallback+0x80>
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d80f      	bhi.n	8001b88 <HAL_CAN_RxFifo1MsgPendingCallback+0x80>
 8001b68:	e8df f003 	tbb	[pc, r3]
 8001b6c:	090f090f 	.word	0x090f090f
 8001b70:	0e0e0e0e 	.word	0x0e0e0e0e
 8001b74:	0e0e0e0e 	.word	0x0e0e0e0e
 8001b78:	0e0e0e0e 	.word	0x0e0e0e0e
 8001b7c:	20          	.byte	0x20
 8001b7d:	00          	.byte	0x00
      cmd[1].speed = tmp_speed;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
      cmd[1].timeout_cnt = 100;
 8001b80:	2264      	movs	r2, #100	; 0x64
      cmd[1].speed = tmp_speed;
 8001b82:	edc3 7a05 	vstr	s15, [r3, #20]
      cmd[1].timeout_cnt = 100;
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b88:	bd38      	pop	{r3, r4, r5, pc}
      cmd[0].speed = tmp_speed;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_CAN_RxFifo1MsgPendingCallback+0xd4>)
      cmd[0].timeout_cnt = 100;
 8001b8c:	2264      	movs	r2, #100	; 0x64
      cmd[0].speed = tmp_speed;
 8001b8e:	edc3 7a00 	vstr	s15, [r3]
      cmd[0].timeout_cnt = 100;
 8001b92:	611a      	str	r2, [r3, #16]
}
 8001b94:	bd38      	pop	{r3, r4, r5, pc}
      if (can_rx_buf.data[0] == 0) {
 8001b96:	7823      	ldrb	r3, [r4, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f5      	bne.n	8001b88 <HAL_CAN_RxFifo1MsgPendingCallback+0x80>
        if (can_rx_buf.data[1] == 0) {
 8001b9c:	7863      	ldrb	r3, [r4, #1]
 8001b9e:	b16b      	cbz	r3, 8001bbc <HAL_CAN_RxFifo1MsgPendingCallback+0xb4>
        } else if (can_rx_buf.data[1] == 1) {
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d1f1      	bne.n	8001b88 <HAL_CAN_RxFifo1MsgPendingCallback+0x80>
          power_enable_cnt = 100;
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>)
 8001ba6:	2264      	movs	r2, #100	; 0x64
 8001ba8:	601a      	str	r2, [r3, #0]
}
 8001baa:	bd38      	pop	{r3, r4, r5, pc}
      if (can_rx_buf.data[0] == 3) {
 8001bac:	7823      	ldrb	r3, [r4, #0]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d1ea      	bne.n	8001b88 <HAL_CAN_RxFifo1MsgPendingCallback+0x80>
        free_wheel_cnt = 500;
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_CAN_RxFifo1MsgPendingCallback+0xdc>)
 8001bb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bb8:	601a      	str	r2, [r3, #0]
}
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
          HAL_NVIC_SystemReset();
 8001bc0:	f003 bea8 	b.w	8005914 <HAL_NVIC_SystemReset>
 8001bc4:	2000038c 	.word	0x2000038c
 8001bc8:	20000398 	.word	0x20000398
 8001bcc:	200003dc 	.word	0x200003dc
 8001bd0:	c2c80000 	.word	0xc2c80000
 8001bd4:	20000394 	.word	0x20000394
 8001bd8:	42c80000 	.word	0x42c80000
 8001bdc:	200003b4 	.word	0x200003b4
 8001be0:	20000494 	.word	0x20000494
 8001be4:	20000004 	.word	0x20000004

08001be8 <speedToOutputVoltage>:
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001be8:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <speedToOutputVoltage+0x11c>)
 8001bea:	4947      	ldr	r1, [pc, #284]	; (8001d08 <speedToOutputVoltage+0x120>)
{
 8001bec:	b410      	push	{r4}
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001bee:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  pid[motor].error = cmd[motor].speed - motor_real[motor].rps;
 8001bf2:	4c46      	ldr	r4, [pc, #280]	; (8001d0c <speedToOutputVoltage+0x124>)
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001bf4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  pid[motor].error = cmd[motor].speed - motor_real[motor].rps;
 8001bf8:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001bfc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c00:	4b43      	ldr	r3, [pc, #268]	; (8001d10 <speedToOutputVoltage+0x128>)
  pid[motor].error = cmd[motor].speed - motor_real[motor].rps;
 8001c02:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8001c06:	ed9c 6a00 	vldr	s12, [ip]
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001c0a:	222c      	movs	r2, #44	; 0x2c
 8001c0c:	fb02 3200 	mla	r2, r2, r0, r3
  pid[motor].error_integral += pid[motor].error;
 8001c10:	edd2 6a05 	vldr	s13, [r2, #20]
  if (pid[motor].error_integral > pid[motor].error_integral_limit) {
 8001c14:	ed92 5a07 	vldr	s10, [r2, #28]
  pid[motor].error = cmd[motor].speed - motor_real[motor].rps;
 8001c18:	ee76 4a67 	vsub.f32	s9, s12, s15
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001c1c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8001c20:	ed91 7a00 	vldr	s14, [r1]
  pid[motor].error = cmd[motor].speed - motor_real[motor].rps;
 8001c24:	edc2 4a04 	vstr	s9, [r2, #16]
  pid[motor].error_integral += pid[motor].error;
 8001c28:	ee74 6aa6 	vadd.f32	s13, s9, s13
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001c2c:	ee67 5a87 	vmul.f32	s11, s15, s14
  if (pid[motor].error_integral > pid[motor].error_integral_limit) {
 8001c30:	eef4 6ac5 	vcmpe.f32	s13, s10
 8001c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001c38:	ea4f 0180 	mov.w	r1, r0, lsl #2
 8001c3c:	edc2 5a00 	vstr	s11, [r2]
  pid[motor].error_integral += pid[motor].error;
 8001c40:	edc2 6a05 	vstr	s13, [r2, #20]
  if (pid[motor].error_integral > pid[motor].error_integral_limit) {
 8001c44:	dc32      	bgt.n	8001cac <speedToOutputVoltage+0xc4>
  } else if (pid[motor].error_integral < -pid[motor].error_integral_limit) {
 8001c46:	eeb1 5a45 	vneg.f32	s10, s10
 8001c4a:	eef4 6ac5 	vcmpe.f32	s13, s10
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	d42b      	bmi.n	8001cac <speedToOutputVoltage+0xc4>
  pid[motor].error_diff = motor_real[motor].rps - pid[motor].pre_real_rps;
 8001c54:	222c      	movs	r2, #44	; 0x2c
 8001c56:	fb02 3300 	mla	r3, r2, r0, r3
  if (cmd[motor].out_v > pid[motor].eff_voltage + pid[motor].diff_voltage_limit) {
 8001c5a:	ed93 5a09 	vldr	s10, [r3, #36]	; 0x24
  pid[motor].error_diff = motor_real[motor].rps - pid[motor].pre_real_rps;
 8001c5e:	edd3 6a08 	vldr	s13, [r3, #32]
  pid[motor].pre_real_rps = motor_real[motor].rps;
 8001c62:	edc3 7a08 	vstr	s15, [r3, #32]
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001c66:	ee27 7a06 	vmul.f32	s14, s14, s12
  if (cmd[motor].out_v > pid[motor].eff_voltage + pid[motor].diff_voltage_limit) {
 8001c6a:	ee75 4a85 	vadd.f32	s9, s11, s10
  pid[motor].error_diff = motor_real[motor].rps - pid[motor].pre_real_rps;
 8001c6e:	ee77 6ae6 	vsub.f32	s13, s15, s13
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001c72:	180a      	adds	r2, r1, r0
  if (cmd[motor].out_v > pid[motor].eff_voltage + pid[motor].diff_voltage_limit) {
 8001c74:	eeb4 7ae4 	vcmpe.f32	s14, s9
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001c78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  if (cmd[motor].out_v > pid[motor].eff_voltage + pid[motor].diff_voltage_limit) {
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  pid[motor].error_diff = motor_real[motor].rps - pid[motor].pre_real_rps;
 8001c80:	edc3 6a06 	vstr	s13, [r3, #24]
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001c84:	ed82 7a02 	vstr	s14, [r2, #8]
  if (cmd[motor].out_v > pid[motor].eff_voltage + pid[motor].diff_voltage_limit) {
 8001c88:	dd13      	ble.n	8001cb2 <speedToOutputVoltage+0xca>
    if (fabs(motor_real[motor].rps) < fabs(cmd[motor].speed)) {
 8001c8a:	eef0 7ae7 	vabs.f32	s15, s15
 8001c8e:	eeb0 6ac6 	vabs.f32	s12, s12
 8001c92:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	d42e      	bmi.n	8001cfa <speedToOutputVoltage+0x112>
    cmd[motor].out_v = pid[motor].eff_voltage + pid[motor].diff_voltage_limit;
 8001c9c:	4401      	add	r1, r0
 8001c9e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8001ca2:	edc1 4a02 	vstr	s9, [r1, #8]
}
 8001ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001caa:	4770      	bx	lr
    pid[motor].error_integral = -pid[motor].error_integral_limit;
 8001cac:	ed82 5a05 	vstr	s10, [r2, #20]
 8001cb0:	e7d0      	b.n	8001c54 <speedToOutputVoltage+0x6c>
  } else if (cmd[motor].out_v < pid[motor].eff_voltage - pid[motor].diff_voltage_limit) {
 8001cb2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8001cb6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	d513      	bpl.n	8001ce8 <speedToOutputVoltage+0x100>
    if (fabs(motor_real[motor].rps) < fabs(cmd[motor].speed)) {
 8001cc0:	eef0 7ae7 	vabs.f32	s15, s15
 8001cc4:	eeb0 6ac6 	vabs.f32	s12, s12
 8001cc8:	eef4 7ac6 	vcmpe.f32	s15, s12
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	d502      	bpl.n	8001cd8 <speedToOutputVoltage+0xf0>
      pid[motor].load_limit_cnt++;
 8001cd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd4:	3201      	adds	r2, #1
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
    cmd[motor].out_v = pid[motor].eff_voltage - pid[motor].diff_voltage_limit;
 8001cd8:	4401      	add	r1, r0
 8001cda:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8001cde:	edc4 5a02 	vstr	s11, [r4, #8]
}
 8001ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ce6:	4770      	bx	lr
  } else if (pid[motor].load_limit_cnt > 0) {
 8001ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
}
 8001cea:	f85d 4b04 	ldr.w	r4, [sp], #4
  } else if (pid[motor].load_limit_cnt > 0) {
 8001cee:	2a00      	cmp	r2, #0
    pid[motor].load_limit_cnt--;
 8001cf0:	bfc4      	itt	gt
 8001cf2:	f102 32ff 	addgt.w	r2, r2, #4294967295
 8001cf6:	629a      	strgt	r2, [r3, #40]	; 0x28
}
 8001cf8:	4770      	bx	lr
      pid[motor].load_limit_cnt++;
 8001cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfc:	3201      	adds	r2, #1
 8001cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8001d00:	e7cc      	b.n	8001c9c <speedToOutputVoltage+0xb4>
 8001d02:	bf00      	nop
 8001d04:	20000408 	.word	0x20000408
 8001d08:	20000400 	.word	0x20000400
 8001d0c:	200003b4 	.word	0x200003b4
 8001d10:	2000043c 	.word	0x2000043c
 8001d14:	00000000 	.word	0x00000000

08001d18 <runMode>:
{
 8001d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (free_wheel_cnt > 0) {
 8001d1c:	4ab8      	ldr	r2, [pc, #736]	; (8002000 <runMode+0x2e8>)
{
 8001d1e:	ed2d 8b04 	vpush	{d8-d9}
  if (free_wheel_cnt > 0) {
 8001d22:	6813      	ldr	r3, [r2, #0]
{
 8001d24:	b08b      	sub	sp, #44	; 0x2c
  if (free_wheel_cnt > 0) {
 8001d26:	b10b      	cbz	r3, 8001d2c <runMode+0x14>
    free_wheel_cnt--;
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	6013      	str	r3, [r2, #0]
  if (manual_offset_radian > M_PI * 2) {
 8001d2c:	f8df 931c 	ldr.w	r9, [pc, #796]	; 800204c <runMode+0x334>
 8001d30:	f8d9 0000 	ldr.w	r0, [r9]
 8001d34:	f7fe fc08 	bl	8000548 <__aeabi_f2d>
 8001d38:	a3af      	add	r3, pc, #700	; (adr r3, 8001ff8 <runMode+0x2e0>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	f7fe feeb 	bl	8000b18 <__aeabi_dcmpgt>
 8001d42:	b110      	cbz	r0, 8001d4a <runMode+0x32>
    manual_offset_radian = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c9 3000 	str.w	r3, [r9]
  if (motor_calibration_cnt > 1) {
 8001d4a:	f8df b304 	ldr.w	fp, [pc, #772]	; 8002050 <runMode+0x338>
 8001d4e:	4fad      	ldr	r7, [pc, #692]	; (8002004 <runMode+0x2ec>)
 8001d50:	f8db 3000 	ldr.w	r3, [fp]
 8001d54:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 800202c <runMode+0x314>
 8001d58:	4dab      	ldr	r5, [pc, #684]	; (8002008 <runMode+0x2f0>)
      cmd[i].speed = 0;
 8001d5a:	ed9f 8aac 	vldr	s16, [pc, #688]	; 800200c <runMode+0x2f4>
 8001d5e:	4cac      	ldr	r4, [pc, #688]	; (8002010 <runMode+0x2f8>)
  if (motor_calibration_cnt > 1) {
 8001d60:	2b01      	cmp	r3, #1
    motor_calibration_cnt--;
 8001d62:	bf84      	itt	hi
 8001d64:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8001d68:	f8cb 3000 	strhi.w	r3, [fp]
 8001d6c:	463b      	mov	r3, r7
{
 8001d6e:	f04f 0a00 	mov.w	sl, #0
    if (isPushedSW1()) {
 8001d72:	4647      	mov	r7, r8
      cmd[i].speed = -5.0;
 8001d74:	eef9 8a04 	vmov.f32	s17, #148	; 0xc0a00000 -5.0
 8001d78:	4698      	mov	r8, r3
    if (isPushedSW1()) {
 8001d7a:	f7ff fc7d 	bl	8001678 <isPushedSW1>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d053      	beq.n	8001e2a <runMode+0x112>
      cmd[i].speed = 5.0;
 8001d82:	4ba4      	ldr	r3, [pc, #656]	; (8002014 <runMode+0x2fc>)
 8001d84:	6023      	str	r3, [r4, #0]
    speedToOutputVoltage(i);
 8001d86:	4650      	mov	r0, sl
 8001d88:	f7ff ff2e 	bl	8001be8 <speedToOutputVoltage>
    if (cmd[i].timeout_cnt > 0) {
 8001d8c:	6923      	ldr	r3, [r4, #16]
 8001d8e:	2b00      	cmp	r3, #0
      cmd[i].timeout_cnt--;
 8001d90:	bfc4      	itt	gt
 8001d92:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8001d96:	6123      	strgt	r3, [r4, #16]
    if (cmd[i].timeout_cnt == 0) {
 8001d98:	b90b      	cbnz	r3, 8001d9e <runMode+0x86>
      cmd[i].out_v = 0;
 8001d9a:	ed84 8a02 	vstr	s16, [r4, #8]
    if (free_wheel_cnt > 0) {
 8001d9e:	4b98      	ldr	r3, [pc, #608]	; (8002000 <runMode+0x2e8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	9306      	str	r3, [sp, #24]
 8001da4:	b10b      	cbz	r3, 8001daa <runMode+0x92>
      cmd[i].out_v = 0;
 8001da6:	ed84 8a02 	vstr	s16, [r4, #8]
    if (motor_calibration_cnt > 1) {
 8001daa:	f8db 6000 	ldr.w	r6, [fp]
 8001dae:	2e01      	cmp	r6, #1
 8001db0:	d941      	bls.n	8001e36 <runMode+0x11e>
      if(motor_calibration_cnt < MOTOR_CALIB_START_CNT){
 8001db2:	f240 53db 	movw	r3, #1499	; 0x5db
 8001db6:	429e      	cmp	r6, r3
 8001db8:	d807      	bhi.n	8001dca <runMode+0xb2>
        calib[i].rps_integral += motor_real[i].rps;
 8001dba:	edd8 7a08 	vldr	s15, [r8, #32]
 8001dbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dc6:	edc8 7a08 	vstr	s15, [r8, #32]
      cmd[i].out_v = MOTOR_CALIB_VOLTAGE;
 8001dca:	4b93      	ldr	r3, [pc, #588]	; (8002018 <runMode+0x300>)
      cmd[i].out_v = 0;
 8001dcc:	60a3      	str	r3, [r4, #8]
  cmd[motor].out_v_final = cmd[motor].out_v;
 8001dce:	60e3      	str	r3, [r4, #12]
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 8001dd0:	edd5 7a01 	vldr	s15, [r5, #4]
 8001dd4:	ed99 7a00 	vldr	s14, [r9]
 8001dd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ddc:	462b      	mov	r3, r5
 8001dde:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 2; i++) {
 8001de2:	3508      	adds	r5, #8
 8001de4:	3414      	adds	r4, #20
 8001de6:	f108 0824 	add.w	r8, r8, #36	; 0x24
 8001dea:	3718      	adds	r7, #24
 8001dec:	f1ba 0f00 	cmp.w	sl, #0
 8001df0:	d015      	beq.n	8001e1e <runMode+0x106>
  print_cnt++;
 8001df2:	4c8a      	ldr	r4, [pc, #552]	; (800201c <runMode+0x304>)
 8001df4:	7823      	ldrb	r3, [r4, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	b2db      	uxtb	r3, r3
  if(motor_calibration_cnt == 1){
 8001dfa:	2e01      	cmp	r6, #1
  print_cnt++;
 8001dfc:	7023      	strb	r3, [r4, #0]
  if(motor_calibration_cnt == 1){
 8001dfe:	f000 8158 	beq.w	80020b2 <runMode+0x39a>
  switch (print_cnt) {
 8001e02:	3b01      	subs	r3, #1
 8001e04:	2b07      	cmp	r3, #7
 8001e06:	f200 8193 	bhi.w	8002130 <runMode+0x418>
 8001e0a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001e0e:	0040      	.short	0x0040
 8001e10:	0081006c 	.word	0x0081006c
 8001e14:	00b40094 	.word	0x00b40094
 8001e18:	012300cd 	.word	0x012300cd
 8001e1c:	0146      	.short	0x0146
 8001e1e:	f04f 0a01 	mov.w	sl, #1
    if (isPushedSW1()) {
 8001e22:	f7ff fc29 	bl	8001678 <isPushedSW1>
 8001e26:	2800      	cmp	r0, #0
 8001e28:	d1ab      	bne.n	8001d82 <runMode+0x6a>
    } else if (isPushedSW2()) {
 8001e2a:	f7ff fc31 	bl	8001690 <isPushedSW2>
 8001e2e:	b320      	cbz	r0, 8001e7a <runMode+0x162>
      cmd[i].speed = -5.0;
 8001e30:	edc4 8a00 	vstr	s17, [r4]
 8001e34:	e7a7      	b.n	8001d86 <runMode+0x6e>
    }else if(motor_calibration_cnt == 1){
 8001e36:	d027      	beq.n	8001e88 <runMode+0x170>
  cmd[motor].out_v_final = cmd[motor].out_v;
 8001e38:	edd4 7a02 	vldr	s15, [r4, #8]
  if (cmd[motor].out_v_final < 0) {
 8001e3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  cmd[motor].out_v_final = cmd[motor].out_v;
 8001e44:	edc4 7a03 	vstr	s15, [r4, #12]
  if (cmd[motor].out_v_final < 0) {
 8001e48:	d5c2      	bpl.n	8001dd0 <runMode+0xb8>
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 8001e4a:	f8d9 0000 	ldr.w	r0, [r9]
 8001e4e:	f7fe fb7b 	bl	8000548 <__aeabi_f2d>
 8001e52:	4b73      	ldr	r3, [pc, #460]	; (8002020 <runMode+0x308>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	f7fe fa17 	bl	8000288 <__aeabi_dsub>
 8001e5a:	ec41 0b19 	vmov	d9, r0, r1
 8001e5e:	6868      	ldr	r0, [r5, #4]
 8001e60:	f7fe fb72 	bl	8000548 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	ec51 0b19 	vmov	r0, r1, d9
 8001e6c:	f7fe fa0e 	bl	800028c <__adddf3>
 8001e70:	f7fe feba 	bl	8000be8 <__aeabi_d2f>
 8001e74:	ee07 0a90 	vmov	s15, r0
}
 8001e78:	e7b0      	b.n	8001ddc <runMode+0xc4>
    }else if(isPushedSW3()){
 8001e7a:	f7ff fc15 	bl	80016a8 <isPushedSW3>
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	d081      	beq.n	8001d86 <runMode+0x6e>
      cmd[i].speed = 0;
 8001e82:	ed84 8a00 	vstr	s16, [r4]
 8001e86:	e77e      	b.n	8001d86 <runMode+0x6e>
 8001e88:	ee18 3a10 	vmov	r3, s16
 8001e8c:	e79e      	b.n	8001dcc <runMode+0xb4>
      p("CS %+5.1f %+5.1f / BV %4.1f ", getCurrentM0(), getCurrentM1(), getBatteryVoltage());
 8001e8e:	f7ff f903 	bl	8001098 <getCurrentM0>
 8001e92:	ee10 5a10 	vmov	r5, s0
 8001e96:	f7ff f91b 	bl	80010d0 <getCurrentM1>
 8001e9a:	ee10 4a10 	vmov	r4, s0
 8001e9e:	f7ff f8e3 	bl	8001068 <getBatteryVoltage>
 8001ea2:	4628      	mov	r0, r5
 8001ea4:	ee10 5a10 	vmov	r5, s0
 8001ea8:	f7fe fb4e 	bl	8000548 <__aeabi_f2d>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4628      	mov	r0, r5
 8001eb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001eb6:	f7fe fb47 	bl	8000548 <__aeabi_f2d>
 8001eba:	4606      	mov	r6, r0
 8001ebc:	460f      	mov	r7, r1
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001ec4:	f7fe fb40 	bl	8000548 <__aeabi_f2d>
 8001ec8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001ecc:	e9cd 0100 	strd	r0, r1, [sp]
 8001ed0:	4854      	ldr	r0, [pc, #336]	; (8002024 <runMode+0x30c>)
 8001ed2:	f002 f865 	bl	8003fa0 <p>
  can_rx_cnt = 0;
 8001ed6:	4b54      	ldr	r3, [pc, #336]	; (8002028 <runMode+0x310>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
}
 8001edc:	b00b      	add	sp, #44	; 0x2c
 8001ede:	ecbd 8b04 	vpop	{d8-d9}
 8001ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("RPS %+7.3f %+7.3f free %3d ", motor_real[0].rps, motor_real[1].rps, free_wheel_cnt);
 8001ee6:	4c51      	ldr	r4, [pc, #324]	; (800202c <runMode+0x314>)
 8001ee8:	68e0      	ldr	r0, [r4, #12]
 8001eea:	f7fe fb2d 	bl	8000548 <__aeabi_f2d>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001ef6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001ef8:	9b06      	ldr	r3, [sp, #24]
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	f7fe fb24 	bl	8000548 <__aeabi_f2d>
 8001f00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001f04:	e9cd 0100 	strd	r0, r1, [sp]
 8001f08:	4849      	ldr	r0, [pc, #292]	; (8002030 <runMode+0x318>)
 8001f0a:	f002 f849 	bl	8003fa0 <p>
      break;
 8001f0e:	e7e2      	b.n	8001ed6 <runMode+0x1be>
      p("out_v %+5.1f %5.1f ", cmd[0].out_v, cmd[1].out_v);
 8001f10:	4c3f      	ldr	r4, [pc, #252]	; (8002010 <runMode+0x2f8>)
 8001f12:	68a0      	ldr	r0, [r4, #8]
 8001f14:	f7fe fb18 	bl	8000548 <__aeabi_f2d>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	69e0      	ldr	r0, [r4, #28]
 8001f1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001f22:	f7fe fb11 	bl	8000548 <__aeabi_f2d>
 8001f26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001f2a:	e9cd 0100 	strd	r0, r1, [sp]
 8001f2e:	4841      	ldr	r0, [pc, #260]	; (8002034 <runMode+0x31c>)
 8001f30:	f002 f836 	bl	8003fa0 <p>
      break;
 8001f34:	e7cf      	b.n	8001ed6 <runMode+0x1be>
      p("p%+3.1f i%+3.1f d%+3.1f k%+3.1f ", pid[0].pid_kp, pid[0].pid_ki, pid[0].pid_kd, motor_real[0].k);
 8001f36:	4c40      	ldr	r4, [pc, #256]	; (8002038 <runMode+0x320>)
 8001f38:	6860      	ldr	r0, [r4, #4]
 8001f3a:	f7fe fb05 	bl	8000548 <__aeabi_f2d>
 8001f3e:	460b      	mov	r3, r1
 8001f40:	493a      	ldr	r1, [pc, #232]	; (800202c <runMode+0x314>)
 8001f42:	4602      	mov	r2, r0
 8001f44:	6948      	ldr	r0, [r1, #20]
 8001f46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001f4a:	f7fe fafd 	bl	8000548 <__aeabi_f2d>
 8001f4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f52:	68a0      	ldr	r0, [r4, #8]
 8001f54:	f7fe faf8 	bl	8000548 <__aeabi_f2d>
 8001f58:	4606      	mov	r6, r0
 8001f5a:	460f      	mov	r7, r1
 8001f5c:	68e0      	ldr	r0, [r4, #12]
 8001f5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001f62:	f7fe faf1 	bl	8000548 <__aeabi_f2d>
 8001f66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001f6a:	e9cd 0100 	strd	r0, r1, [sp]
 8001f6e:	4833      	ldr	r0, [pc, #204]	; (800203c <runMode+0x324>)
 8001f70:	f002 f816 	bl	8003fa0 <p>
      break;
 8001f74:	e7af      	b.n	8001ed6 <runMode+0x1be>
      p("SPD %+6.1f %+6.1f canErr 0x%04x ", cmd[0].speed, cmd[1].speed, getCanError());
 8001f76:	4c26      	ldr	r4, [pc, #152]	; (8002010 <runMode+0x2f8>)
 8001f78:	6820      	ldr	r0, [r4, #0]
 8001f7a:	f7fe fae5 	bl	8000548 <__aeabi_f2d>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	6960      	ldr	r0, [r4, #20]
 8001f84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001f88:	f7fe fade 	bl	8000548 <__aeabi_f2d>
 8001f8c:	460d      	mov	r5, r1
 8001f8e:	4604      	mov	r4, r0
 8001f90:	f7ff fac4 	bl	800151c <getCanError>
 8001f94:	4601      	mov	r1, r0
 8001f96:	e9cd 4500 	strd	r4, r5, [sp]
 8001f9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001f9e:	4828      	ldr	r0, [pc, #160]	; (8002040 <runMode+0x328>)
 8001fa0:	9102      	str	r1, [sp, #8]
 8001fa2:	f001 fffd 	bl	8003fa0 <p>
      break;
 8001fa6:	e796      	b.n	8001ed6 <runMode+0x1be>
      p("loadV %+5.2f %+5.2f canFail %4d ", cmd[0].out_v - pid[0].eff_voltage, cmd[1].out_v - pid[1].eff_voltage, can_send_fail_cnt);
 8001fa8:	4d23      	ldr	r5, [pc, #140]	; (8002038 <runMode+0x320>)
 8001faa:	4e19      	ldr	r6, [pc, #100]	; (8002010 <runMode+0x2f8>)
 8001fac:	edd5 7a00 	vldr	s15, [r5]
 8001fb0:	ed96 7a02 	vldr	s14, [r6, #8]
 8001fb4:	4c23      	ldr	r4, [pc, #140]	; (8002044 <runMode+0x32c>)
 8001fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fba:	ee17 0a90 	vmov	r0, s15
 8001fbe:	f7fe fac3 	bl	8000548 <__aeabi_f2d>
 8001fc2:	ed96 7a07 	vldr	s14, [r6, #28]
 8001fc6:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8001fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	ee17 0a90 	vmov	r0, s15
 8001fd6:	6821      	ldr	r1, [r4, #0]
 8001fd8:	9102      	str	r1, [sp, #8]
 8001fda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001fde:	f7fe fab3 	bl	8000548 <__aeabi_f2d>
 8001fe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8001fea:	4817      	ldr	r0, [pc, #92]	; (8002048 <runMode+0x330>)
 8001fec:	f001 ffd8 	bl	8003fa0 <p>
      can_send_fail_cnt = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	6023      	str	r3, [r4, #0]
      break;
 8001ff4:	e76f      	b.n	8001ed6 <runMode+0x1be>
 8001ff6:	bf00      	nop
 8001ff8:	54442d18 	.word	0x54442d18
 8001ffc:	401921fb 	.word	0x401921fb
 8002000:	20000004 	.word	0x20000004
 8002004:	20000344 	.word	0x20000344
 8002008:	200003e0 	.word	0x200003e0
 800200c:	00000000 	.word	0x00000000
 8002010:	200003b4 	.word	0x200003b4
 8002014:	40a00000 	.word	0x40a00000
 8002018:	40400000 	.word	0x40400000
 800201c:	20000498 	.word	0x20000498
 8002020:	40100000 	.word	0x40100000
 8002024:	0800c1ec 	.word	0x0800c1ec
 8002028:	20000394 	.word	0x20000394
 800202c:	20000408 	.word	0x20000408
 8002030:	0800c20c 	.word	0x0800c20c
 8002034:	0800c228 	.word	0x0800c228
 8002038:	2000043c 	.word	0x2000043c
 800203c:	0800c23c 	.word	0x0800c23c
 8002040:	0800c260 	.word	0x0800c260
 8002044:	20000304 	.word	0x20000304
 8002048:	0800c284 	.word	0x0800c284
 800204c:	200003f8 	.word	0x200003f8
 8002050:	200003fc 	.word	0x200003fc
      p("loadCnt %3.2f %3.2f ", (float)pid[0].load_limit_cnt / MOTOR_OVER_LOAD_CNT_LIMIT, (float)pid[1].load_limit_cnt / MOTOR_OVER_LOAD_CNT_LIMIT);
 8002054:	4c3c      	ldr	r4, [pc, #240]	; (8002148 <runMode+0x430>)
 8002056:	ed9f 8a3d 	vldr	s16, [pc, #244]	; 800214c <runMode+0x434>
 800205a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002062:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002066:	ee17 0a90 	vmov	r0, s15
 800206a:	f7fe fa6d 	bl	8000548 <__aeabi_f2d>
 800206e:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 8002072:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002076:	4602      	mov	r2, r0
 8002078:	ee67 7a88 	vmul.f32	s15, s15, s16
 800207c:	460b      	mov	r3, r1
 800207e:	ee17 0a90 	vmov	r0, s15
 8002082:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002086:	f7fe fa5f 	bl	8000548 <__aeabi_f2d>
 800208a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800208e:	e9cd 0100 	strd	r0, r1, [sp]
 8002092:	482f      	ldr	r0, [pc, #188]	; (8002150 <runMode+0x438>)
 8002094:	f001 ff84 	bl	8003fa0 <p>
      break;
 8002098:	e71d      	b.n	8001ed6 <runMode+0x1be>
      motor_real[0].diff_cnt_max = 0;
 800209a:	482e      	ldr	r0, [pc, #184]	; (8002154 <runMode+0x43c>)
      ma702[0].diff_max = 0;
 800209c:	492e      	ldr	r1, [pc, #184]	; (8002158 <runMode+0x440>)
      motor_real[0].diff_cnt_max = 0;
 800209e:	2200      	movs	r2, #0
      motor_real[0].diff_cnt_min = 65535;
 80020a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
      ma702[0].diff_min = 65535;
 80020a4:	e9c1 3205 	strd	r3, r2, [r1, #20]
      motor_real[0].diff_cnt_max = 0;
 80020a8:	6042      	str	r2, [r0, #4]
      motor_real[1].diff_cnt_max = 0;
 80020aa:	61c2      	str	r2, [r0, #28]
      motor_real[0].diff_cnt_min = 65535;
 80020ac:	6083      	str	r3, [r0, #8]
      motor_real[1].diff_cnt_min = 65535;
 80020ae:	6203      	str	r3, [r0, #32]
      break;
 80020b0:	e711      	b.n	8001ed6 <runMode+0x1be>
    rps_per_v[0] = calib[0].rps_integral / MOTOR_CALIB_VOLTAGE / MOTOR_CALIB_START_CNT;
 80020b2:	4d2a      	ldr	r5, [pc, #168]	; (800215c <runMode+0x444>)
 80020b4:	6a28      	ldr	r0, [r5, #32]
 80020b6:	f7fe fa47 	bl	8000548 <__aeabi_f2d>
 80020ba:	a321      	add	r3, pc, #132	; (adr r3, 8002140 <runMode+0x428>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe fa9a 	bl	80005f8 <__aeabi_dmul>
 80020c4:	f7fe fd90 	bl	8000be8 <__aeabi_d2f>
 80020c8:	4604      	mov	r4, r0
    rps_per_v[1] = calib[1].rps_integral / MOTOR_CALIB_VOLTAGE / MOTOR_CALIB_START_CNT;
 80020ca:	6c68      	ldr	r0, [r5, #68]	; 0x44
 80020cc:	f7fe fa3c 	bl	8000548 <__aeabi_f2d>
 80020d0:	a31b      	add	r3, pc, #108	; (adr r3, 8002140 <runMode+0x428>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe fa8f 	bl	80005f8 <__aeabi_dmul>
 80020da:	f7fe fd85 	bl	8000be8 <__aeabi_d2f>
 80020de:	4605      	mov	r5, r0
    p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v[0],rps_per_v[1]);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7fe fa31 	bl	8000548 <__aeabi_f2d>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4628      	mov	r0, r5
 80020ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80020f0:	f7fe fa2a 	bl	8000548 <__aeabi_f2d>
 80020f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80020f8:	e9cd 0100 	strd	r0, r1, [sp]
 80020fc:	4818      	ldr	r0, [pc, #96]	; (8002160 <runMode+0x448>)
 80020fe:	f001 ff4f 	bl	8003fa0 <p>
    writeMotorCalibrationValue(rps_per_v[0], rps_per_v[1]);
 8002102:	ee00 5a90 	vmov	s1, r5
 8002106:	ee00 4a10 	vmov	s0, r4
 800210a:	f7ff fa93 	bl	8001634 <writeMotorCalibrationValue>
    HAL_Delay(1000);
 800210e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002112:	f002 f835 	bl	8004180 <HAL_Delay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002116:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800211a:	4912      	ldr	r1, [pc, #72]	; (8002164 <runMode+0x44c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <runMode+0x450>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800211e:	68ca      	ldr	r2, [r1, #12]
 8002120:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002124:	4313      	orrs	r3, r2
 8002126:	60cb      	str	r3, [r1, #12]
 8002128:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800212c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800212e:	e7fd      	b.n	800212c <runMode+0x414>
      p("\n");
 8002130:	480e      	ldr	r0, [pc, #56]	; (800216c <runMode+0x454>)
 8002132:	f001 ff35 	bl	8003fa0 <p>
      print_cnt = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	7023      	strb	r3, [r4, #0]
      break;
 800213a:	e6cc      	b.n	8001ed6 <runMode+0x1be>
 800213c:	f3af 8000 	nop.w
 8002140:	5a912e31 	.word	0x5a912e31
 8002144:	3f2d208a 	.word	0x3f2d208a
 8002148:	2000043c 	.word	0x2000043c
 800214c:	39aec33e 	.word	0x39aec33e
 8002150:	0800c2a8 	.word	0x0800c2a8
 8002154:	20000408 	.word	0x20000408
 8002158:	20000514 	.word	0x20000514
 800215c:	20000344 	.word	0x20000344
 8002160:	0800c1c0 	.word	0x0800c1c0
 8002164:	e000ed00 	.word	0xe000ed00
 8002168:	05fa0004 	.word	0x05fa0004
 800216c:	0800c528 	.word	0x0800c528

08002170 <calibrationMode>:
{
 8002170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002174:	ed2d 8b02 	vpush	{d8}
  p("M0 ave %6.3f cnt %3d M1 ave %6.3f cnt %3d ", calib[0].radian_ave, calib[0].ave_cnt, calib[1].radian_ave, calib[1].ave_cnt);
 8002178:	4cab      	ldr	r4, [pc, #684]	; (8002428 <calibrationMode+0x2b8>)
  p("M0raw %6d M1raw %6d offset %4.3f\n", ma702[0].enc_raw, ma702[1].enc_raw, manual_offset_radian);
 800217a:	4dac      	ldr	r5, [pc, #688]	; (800242c <calibrationMode+0x2bc>)
  p("M0 ave %6.3f cnt %3d M1 ave %6.3f cnt %3d ", calib[0].radian_ave, calib[0].ave_cnt, calib[1].radian_ave, calib[1].ave_cnt);
 800217c:	6860      	ldr	r0, [r4, #4]
{
 800217e:	b089      	sub	sp, #36	; 0x24
  p("M0 ave %6.3f cnt %3d M1 ave %6.3f cnt %3d ", calib[0].radian_ave, calib[0].ave_cnt, calib[1].radian_ave, calib[1].ave_cnt);
 8002180:	f7fe f9e2 	bl	8000548 <__aeabi_f2d>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800218a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800218c:	9104      	str	r1, [sp, #16]
 800218e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002192:	f7fe f9d9 	bl	8000548 <__aeabi_f2d>
 8002196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800219a:	68a1      	ldr	r1, [r4, #8]
 800219c:	48a4      	ldr	r0, [pc, #656]	; (8002430 <calibrationMode+0x2c0>)
 800219e:	9100      	str	r1, [sp, #0]
 80021a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80021a4:	f001 fefc 	bl	8003fa0 <p>
  p("result M0 %6.4f M1 %6.4f ", calib[0].result_cw, calib[1].result_cw);
 80021a8:	6920      	ldr	r0, [r4, #16]
 80021aa:	f7fe f9cd 	bl	8000548 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80021b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80021b8:	f7fe f9c6 	bl	8000548 <__aeabi_f2d>
 80021bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80021c0:	e9cd 0100 	strd	r0, r1, [sp]
 80021c4:	489b      	ldr	r0, [pc, #620]	; (8002434 <calibrationMode+0x2c4>)
 80021c6:	f001 feeb 	bl	8003fa0 <p>
  p("M0raw %6d M1raw %6d offset %4.3f\n", ma702[0].enc_raw, ma702[1].enc_raw, manual_offset_radian);
 80021ca:	4b9b      	ldr	r3, [pc, #620]	; (8002438 <calibrationMode+0x2c8>)
 80021cc:	6828      	ldr	r0, [r5, #0]
 80021ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d0:	685e      	ldr	r6, [r3, #4]
 80021d2:	9206      	str	r2, [sp, #24]
 80021d4:	f7fe f9b8 	bl	8000548 <__aeabi_f2d>
 80021d8:	9a06      	ldr	r2, [sp, #24]
 80021da:	e9cd 0100 	strd	r0, r1, [sp]
 80021de:	4897      	ldr	r0, [pc, #604]	; (800243c <calibrationMode+0x2cc>)
 80021e0:	4631      	mov	r1, r6
 80021e2:	f001 fedd 	bl	8003fa0 <p>
  if (calib[0].result_cw_cnt > 5 && calib[1].result_cw_cnt > 5 && calib_rotation_speed > 0)
 80021e6:	6963      	ldr	r3, [r4, #20]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	dd02      	ble.n	80021f2 <calibrationMode+0x82>
 80021ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	dc0a      	bgt.n	8002208 <calibrationMode+0x98>
  if (calib[0].result_ccw_cnt > 5 && calib[1].result_ccw_cnt > 5)
 80021f2:	69e3      	ldr	r3, [r4, #28]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	dd02      	ble.n	80021fe <calibrationMode+0x8e>
 80021f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	dc19      	bgt.n	8002232 <calibrationMode+0xc2>
}
 80021fe:	b009      	add	sp, #36	; 0x24
 8002200:	ecbd 8b02 	vpop	{d8}
 8002204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (calib[0].result_cw_cnt > 5 && calib[1].result_cw_cnt > 5 && calib_rotation_speed > 0)
 8002208:	4b8d      	ldr	r3, [pc, #564]	; (8002440 <calibrationMode+0x2d0>)
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002216:	ddec      	ble.n	80021f2 <calibrationMode+0x82>
    enc_calibration_mode = true;
 8002218:	4a8a      	ldr	r2, [pc, #552]	; (8002444 <calibrationMode+0x2d4>)
 800221a:	2101      	movs	r1, #1
 800221c:	7011      	strb	r1, [r2, #0]
    cmd[0].out_v_final = 2.0;
 800221e:	4a8a      	ldr	r2, [pc, #552]	; (8002448 <calibrationMode+0x2d8>)
 8002220:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    calib_rotation_speed = -calib_rotation_speed;
 8002224:	eef1 7a67 	vneg.f32	s15, s15
    cmd[0].out_v_final = 2.0;
 8002228:	60d1      	str	r1, [r2, #12]
    cmd[1].out_v_final = 2.0;
 800222a:	6211      	str	r1, [r2, #32]
    calib_rotation_speed = -calib_rotation_speed;
 800222c:	edc3 7a00 	vstr	s15, [r3]
 8002230:	e7df      	b.n	80021f2 <calibrationMode+0x82>
    cmd[0].out_v_final = 0;
 8002232:	f8df a214 	ldr.w	sl, [pc, #532]	; 8002448 <calibrationMode+0x2d8>
 8002236:	2300      	movs	r3, #0
    HAL_Delay(1);  // write out uart buffer
 8002238:	2001      	movs	r0, #1
    cmd[0].out_v_final = 0;
 800223a:	f8ca 300c 	str.w	r3, [sl, #12]
    cmd[1].out_v_final = 0;
 800223e:	f8ca 3020 	str.w	r3, [sl, #32]
    HAL_Delay(1);  // write out uart buffer
 8002242:	f001 ff9d 	bl	8004180 <HAL_Delay>
    temp_offset[0] = (M_PI * 2) - ((calib[0].result_ccw + calib[0].result_cw) / 2);
 8002246:	ed94 7a04 	vldr	s14, [r4, #16]
 800224a:	edd4 7a06 	vldr	s15, [r4, #24]
 800224e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002252:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8002256:	ee67 7a88 	vmul.f32	s15, s15, s16
 800225a:	ee17 0a90 	vmov	r0, s15
 800225e:	f7fe f973 	bl	8000548 <__aeabi_f2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	a16e      	add	r1, pc, #440	; (adr r1, 8002420 <calibrationMode+0x2b0>)
 8002268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800226c:	f7fe f80c 	bl	8000288 <__aeabi_dsub>
 8002270:	f7fe fcba 	bl	8000be8 <__aeabi_d2f>
    temp_offset[1] = (M_PI * 2) - ((calib[1].result_ccw + calib[1].result_cw) / 2);
 8002274:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 8002278:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 800227c:	ee77 7a87 	vadd.f32	s15, s15, s14
    temp_offset[0] = (M_PI * 2) - ((calib[0].result_ccw + calib[0].result_cw) / 2);
 8002280:	ee08 0a90 	vmov	s17, r0
    temp_offset[1] = (M_PI * 2) - ((calib[1].result_ccw + calib[1].result_cw) / 2);
 8002284:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002288:	ee17 0a90 	vmov	r0, s15
 800228c:	f7fe f95c 	bl	8000548 <__aeabi_f2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	a162      	add	r1, pc, #392	; (adr r1, 8002420 <calibrationMode+0x2b0>)
 8002296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800229a:	f7fd fff5 	bl	8000288 <__aeabi_dsub>
 800229e:	f7fe fca3 	bl	8000be8 <__aeabi_d2f>
 80022a2:	4603      	mov	r3, r0
    p("elec-centor radian : M0 %6f M1 %6f\n", temp_offset[0], temp_offset[1]);
 80022a4:	ee18 0a90 	vmov	r0, s17
    temp_offset[1] = (M_PI * 2) - ((calib[1].result_ccw + calib[1].result_cw) / 2);
 80022a8:	ee08 3a10 	vmov	s16, r3
    p("elec-centor radian : M0 %6f M1 %6f\n", temp_offset[0], temp_offset[1]);
 80022ac:	f7fe f94c 	bl	8000548 <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	ee18 0a10 	vmov	r0, s16
 80022b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80022bc:	f7fe f944 	bl	8000548 <__aeabi_f2d>
 80022c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80022c4:	e9cd 0100 	strd	r0, r1, [sp]
 80022c8:	4860      	ldr	r0, [pc, #384]	; (800244c <calibrationMode+0x2dc>)
 80022ca:	f001 fe69 	bl	8003fa0 <p>
    HAL_Delay(1);  // write out uart buffer
 80022ce:	2001      	movs	r0, #1
 80022d0:	f001 ff56 	bl	8004180 <HAL_Delay>
    temp_offset[0] += ROTATION_OFFSET_RADIAN;
 80022d4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80022d8:	ee78 8aa7 	vadd.f32	s17, s17, s15
    if (temp_offset[0] > M_PI * 2) {
 80022dc:	ee18 0a90 	vmov	r0, s17
 80022e0:	f7fe f932 	bl	8000548 <__aeabi_f2d>
 80022e4:	a34e      	add	r3, pc, #312	; (adr r3, 8002420 <calibrationMode+0x2b0>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	4606      	mov	r6, r0
 80022ec:	460f      	mov	r7, r1
 80022ee:	f7fe fc13 	bl	8000b18 <__aeabi_dcmpgt>
 80022f2:	b170      	cbz	r0, 8002312 <calibrationMode+0x1a2>
      temp_offset[0] -= M_PI * 2;
 80022f4:	a34a      	add	r3, pc, #296	; (adr r3, 8002420 <calibrationMode+0x2b0>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	4630      	mov	r0, r6
 80022fc:	4639      	mov	r1, r7
 80022fe:	f7fd ffc3 	bl	8000288 <__aeabi_dsub>
 8002302:	f7fe fc71 	bl	8000be8 <__aeabi_d2f>
 8002306:	ee08 0a90 	vmov	s17, r0
      temp_offset[0] += M_PI * 2;
 800230a:	f7fe f91d 	bl	8000548 <__aeabi_f2d>
 800230e:	4606      	mov	r6, r0
 8002310:	460f      	mov	r7, r1
    if (temp_offset[0] < 0) {
 8002312:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	d50e      	bpl.n	800233a <calibrationMode+0x1ca>
      temp_offset[0] += M_PI * 2;
 800231c:	a340      	add	r3, pc, #256	; (adr r3, 8002420 <calibrationMode+0x2b0>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	4630      	mov	r0, r6
 8002324:	4639      	mov	r1, r7
 8002326:	f7fd ffb1 	bl	800028c <__adddf3>
 800232a:	f7fe fc5d 	bl	8000be8 <__aeabi_d2f>
 800232e:	ee08 0a90 	vmov	s17, r0
    p("complete calibration!!\nccw %6f cw %6f result user offset M0 %6.3f M1 %6.3f\n", calib[0].result_ccw, calib[0].result_cw, temp_offset[0], temp_offset[1]);
 8002332:	f7fe f909 	bl	8000548 <__aeabi_f2d>
 8002336:	4606      	mov	r6, r0
 8002338:	460f      	mov	r7, r1
    temp_offset[1] += ROTATION_OFFSET_RADIAN;
 800233a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800233e:	ee38 8a27 	vadd.f32	s16, s16, s15
    if (temp_offset[1] > M_PI * 2) {
 8002342:	ee18 0a10 	vmov	r0, s16
 8002346:	f7fe f8ff 	bl	8000548 <__aeabi_f2d>
 800234a:	a335      	add	r3, pc, #212	; (adr r3, 8002420 <calibrationMode+0x2b0>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	4680      	mov	r8, r0
 8002352:	4689      	mov	r9, r1
 8002354:	f7fe fbe0 	bl	8000b18 <__aeabi_dcmpgt>
 8002358:	b170      	cbz	r0, 8002378 <calibrationMode+0x208>
      temp_offset[1] -= M_PI * 2;
 800235a:	a331      	add	r3, pc, #196	; (adr r3, 8002420 <calibrationMode+0x2b0>)
 800235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002360:	4640      	mov	r0, r8
 8002362:	4649      	mov	r1, r9
 8002364:	f7fd ff90 	bl	8000288 <__aeabi_dsub>
 8002368:	f7fe fc3e 	bl	8000be8 <__aeabi_d2f>
 800236c:	ee08 0a10 	vmov	s16, r0
      temp_offset[1] += M_PI * 2;
 8002370:	f7fe f8ea 	bl	8000548 <__aeabi_f2d>
 8002374:	4680      	mov	r8, r0
 8002376:	4689      	mov	r9, r1
    if (temp_offset[1] < 0) {
 8002378:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	d50e      	bpl.n	80023a0 <calibrationMode+0x230>
      temp_offset[1] += M_PI * 2;
 8002382:	a327      	add	r3, pc, #156	; (adr r3, 8002420 <calibrationMode+0x2b0>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	4640      	mov	r0, r8
 800238a:	4649      	mov	r1, r9
 800238c:	f7fd ff7e 	bl	800028c <__adddf3>
 8002390:	f7fe fc2a 	bl	8000be8 <__aeabi_d2f>
 8002394:	ee08 0a10 	vmov	s16, r0
    p("complete calibration!!\nccw %6f cw %6f result user offset M0 %6.3f M1 %6.3f\n", calib[0].result_ccw, calib[0].result_cw, temp_offset[0], temp_offset[1]);
 8002398:	f7fe f8d6 	bl	8000548 <__aeabi_f2d>
 800239c:	4680      	mov	r8, r0
 800239e:	4689      	mov	r9, r1
    enc_offset[0].zero_calib = temp_offset[0];
 80023a0:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8002458 <calibrationMode+0x2e8>
    p("complete calibration!!\nccw %6f cw %6f result user offset M0 %6.3f M1 %6.3f\n", calib[0].result_ccw, calib[0].result_cw, temp_offset[0], temp_offset[1]);
 80023a4:	69a0      	ldr	r0, [r4, #24]
    enc_offset[0].zero_calib = temp_offset[0];
 80023a6:	edcb 8a01 	vstr	s17, [fp, #4]
    enc_offset[1].zero_calib = temp_offset[1];
 80023aa:	ed8b 8a03 	vstr	s16, [fp, #12]
    p("complete calibration!!\nccw %6f cw %6f result user offset M0 %6.3f M1 %6.3f\n", calib[0].result_ccw, calib[0].result_cw, temp_offset[0], temp_offset[1]);
 80023ae:	f7fe f8cb 	bl	8000548 <__aeabi_f2d>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	6920      	ldr	r0, [r4, #16]
 80023b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80023bc:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80023c0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80023c4:	f7fe f8c0 	bl	8000548 <__aeabi_f2d>
 80023c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80023cc:	e9cd 0100 	strd	r0, r1, [sp]
 80023d0:	481f      	ldr	r0, [pc, #124]	; (8002450 <calibrationMode+0x2e0>)
 80023d2:	f001 fde5 	bl	8003fa0 <p>
    enc_calibration_mode = false;
 80023d6:	491b      	ldr	r1, [pc, #108]	; (8002444 <calibrationMode+0x2d4>)
    writeEncCalibrationValue(enc_offset[0].zero_calib, enc_offset[1].zero_calib);
 80023d8:	eddb 0a03 	vldr	s1, [fp, #12]
 80023dc:	ed9b 0a01 	vldr	s0, [fp, #4]
    manual_offset_radian = 0;
 80023e0:	2300      	movs	r3, #0
    enc_calibration_mode = false;
 80023e2:	2200      	movs	r2, #0
    manual_offset_radian = 0;
 80023e4:	602b      	str	r3, [r5, #0]
    enc_calibration_mode = false;
 80023e6:	700a      	strb	r2, [r1, #0]
    cmd[0].out_v_final = 0;
 80023e8:	f8ca 300c 	str.w	r3, [sl, #12]
    cmd[1].out_v_final = 0;
 80023ec:	f8ca 3020 	str.w	r3, [sl, #32]
    calib[0].result_cw_cnt = 0;
 80023f0:	6162      	str	r2, [r4, #20]
    calib[1].result_cw_cnt = 0;
 80023f2:	63a2      	str	r2, [r4, #56]	; 0x38
    calib[0].ave_cnt = 0;
 80023f4:	60a2      	str	r2, [r4, #8]
    calib[1].ave_cnt = 0;
 80023f6:	62e2      	str	r2, [r4, #44]	; 0x2c
    calib[0].radian_ave = 0;
 80023f8:	6063      	str	r3, [r4, #4]
    calib[1].radian_ave = 0;
 80023fa:	62a3      	str	r3, [r4, #40]	; 0x28
    writeEncCalibrationValue(enc_offset[0].zero_calib, enc_offset[1].zero_calib);
 80023fc:	f7ff f910 	bl	8001620 <writeEncCalibrationValue>
    motor_calibration_cnt = MOTOR_CALIB_INIT_CNT;
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <calibrationMode+0x2e4>)
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
    HAL_Delay(1000);
 8002406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    motor_calibration_cnt = MOTOR_CALIB_INIT_CNT;
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	b009      	add	sp, #36	; 0x24
 800240e:	ecbd 8b02 	vpop	{d8}
 8002412:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(1000);
 8002416:	f001 beb3 	b.w	8004180 <HAL_Delay>
 800241a:	bf00      	nop
 800241c:	f3af 8000 	nop.w
 8002420:	54442d18 	.word	0x54442d18
 8002424:	401921fb 	.word	0x401921fb
 8002428:	20000344 	.word	0x20000344
 800242c:	200003f8 	.word	0x200003f8
 8002430:	0800c2c0 	.word	0x0800c2c0
 8002434:	0800c2ec 	.word	0x0800c2ec
 8002438:	20000514 	.word	0x20000514
 800243c:	0800c308 	.word	0x0800c308
 8002440:	20000000 	.word	0x20000000
 8002444:	200003dc 	.word	0x200003dc
 8002448:	200003b4 	.word	0x200003b4
 800244c:	0800c32c 	.word	0x0800c32c
 8002450:	0800c350 	.word	0x0800c350
 8002454:	200003fc 	.word	0x200003fc
 8002458:	200003e0 	.word	0x200003e0

0800245c <startCalibrationMode>:
{
 800245c:	b508      	push	{r3, lr}
  p("calibration mode!\n");
 800245e:	480d      	ldr	r0, [pc, #52]	; (8002494 <startCalibrationMode+0x38>)
 8002460:	f001 fd9e 	bl	8003fa0 <p>
  calib_rotation_speed = -calib_rotation_speed;
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <startCalibrationMode+0x3c>)
  enc_calibration_mode = true;
 8002466:	490d      	ldr	r1, [pc, #52]	; (800249c <startCalibrationMode+0x40>)
  calib_rotation_speed = -calib_rotation_speed;
 8002468:	edd3 7a00 	vldr	s15, [r3]
  cmd[0].out_v_final = 2.0;
 800246c:	4a0c      	ldr	r2, [pc, #48]	; (80024a0 <startCalibrationMode+0x44>)
  manual_offset_radian = 0;
 800246e:	480d      	ldr	r0, [pc, #52]	; (80024a4 <startCalibrationMode+0x48>)
  enc_calibration_mode = true;
 8002470:	f04f 0e01 	mov.w	lr, #1
  manual_offset_radian = 0;
 8002474:	f04f 0c00 	mov.w	ip, #0
  enc_calibration_mode = true;
 8002478:	f881 e000 	strb.w	lr, [r1]
  calib_rotation_speed = -calib_rotation_speed;
 800247c:	eef1 7a67 	vneg.f32	s15, s15
  cmd[0].out_v_final = 2.0;
 8002480:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  manual_offset_radian = 0;
 8002484:	f8c0 c000 	str.w	ip, [r0]
  cmd[0].out_v_final = 2.0;
 8002488:	60d1      	str	r1, [r2, #12]
  cmd[1].out_v_final = 2.0;
 800248a:	6211      	str	r1, [r2, #32]
  calib_rotation_speed = -calib_rotation_speed;
 800248c:	edc3 7a00 	vstr	s15, [r3]
}
 8002490:	bd08      	pop	{r3, pc}
 8002492:	bf00      	nop
 8002494:	0800c39c 	.word	0x0800c39c
 8002498:	20000000 	.word	0x20000000
 800249c:	200003dc 	.word	0x200003dc
 80024a0:	200003b4 	.word	0x200003b4
 80024a4:	200003f8 	.word	0x200003f8

080024a8 <sendCanData>:
{
 80024a8:	b570      	push	{r4, r5, r6, lr}
  sendSpeed(flash.board_id, 0, motor_real[0].rps, (float)ma702[0].enc_raw * 2 * M_PI / 65535);
 80024aa:	4c55      	ldr	r4, [pc, #340]	; (8002600 <sendCanData+0x158>)
 80024ac:	4e55      	ldr	r6, [pc, #340]	; (8002604 <sendCanData+0x15c>)
 80024ae:	edd4 7a01 	vldr	s15, [r4, #4]
 80024b2:	4d55      	ldr	r5, [pc, #340]	; (8002608 <sendCanData+0x160>)
 80024b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80024b8:	b082      	sub	sp, #8
  sendSpeed(flash.board_id, 0, motor_real[0].rps, (float)ma702[0].enc_raw * 2 * M_PI / 65535);
 80024ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024be:	ee17 0a90 	vmov	r0, s15
 80024c2:	f7fe f841 	bl	8000548 <__aeabi_f2d>
 80024c6:	a34c      	add	r3, pc, #304	; (adr r3, 80025f8 <sendCanData+0x150>)
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f7fe f894 	bl	80005f8 <__aeabi_dmul>
 80024d0:	f7fe fb8a 	bl	8000be8 <__aeabi_d2f>
 80024d4:	ed96 0a03 	vldr	s0, [r6, #12]
 80024d8:	ee00 0a90 	vmov	s1, r0
 80024dc:	2100      	movs	r1, #0
 80024de:	68a8      	ldr	r0, [r5, #8]
 80024e0:	f7fe ff8a 	bl	80013f8 <sendSpeed>
  sendSpeed(flash.board_id, 1, motor_real[1].rps, (float)ma702[1].enc_raw * 2 * M_PI / 65535);
 80024e4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  switch (transfer_cnt) {
 80024e8:	4c48      	ldr	r4, [pc, #288]	; (800260c <sendCanData+0x164>)
  sendSpeed(flash.board_id, 1, motor_real[1].rps, (float)ma702[1].enc_raw * 2 * M_PI / 65535);
 80024ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024f2:	ee17 0a90 	vmov	r0, s15
 80024f6:	f7fe f827 	bl	8000548 <__aeabi_f2d>
 80024fa:	a33f      	add	r3, pc, #252	; (adr r3, 80025f8 <sendCanData+0x150>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fe f87a 	bl	80005f8 <__aeabi_dmul>
 8002504:	f7fe fb70 	bl	8000be8 <__aeabi_d2f>
 8002508:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
 800250c:	ee00 0a90 	vmov	s1, r0
 8002510:	2101      	movs	r1, #1
 8002512:	68a8      	ldr	r0, [r5, #8]
 8002514:	f7fe ff70 	bl	80013f8 <sendSpeed>
  switch (transfer_cnt) {
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	2b32      	cmp	r3, #50	; 0x32
 800251c:	d824      	bhi.n	8002568 <sendCanData+0xc0>
 800251e:	e8df f003 	tbb	[pc, r3]
 8002522:	231a      	.short	0x231a
 8002524:	23412334 	.word	0x23412334
 8002528:	235b234e 	.word	0x235b234e
 800252c:	23232327 	.word	0x23232327
 8002530:	23232323 	.word	0x23232323
 8002534:	23232323 	.word	0x23232323
 8002538:	23232323 	.word	0x23232323
 800253c:	23232323 	.word	0x23232323
 8002540:	23232323 	.word	0x23232323
 8002544:	23232323 	.word	0x23232323
 8002548:	23232323 	.word	0x23232323
 800254c:	23232323 	.word	0x23232323
 8002550:	23232323 	.word	0x23232323
 8002554:	68          	.byte	0x68
 8002555:	00          	.byte	0x00
      sendVoltage(flash.board_id, 0, getBatteryVoltage());
 8002556:	68a8      	ldr	r0, [r5, #8]
 8002558:	9001      	str	r0, [sp, #4]
 800255a:	f7fe fd85 	bl	8001068 <getBatteryVoltage>
 800255e:	9801      	ldr	r0, [sp, #4]
 8002560:	2100      	movs	r1, #0
 8002562:	f7fe ff6f 	bl	8001444 <sendVoltage>
  transfer_cnt++;
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	6023      	str	r3, [r4, #0]
}
 800256c:	b002      	add	sp, #8
 800256e:	bd70      	pop	{r4, r5, r6, pc}
      sendTemperature(flash.board_id, 1, getTempM1());
 8002570:	68a8      	ldr	r0, [r5, #8]
 8002572:	9001      	str	r0, [sp, #4]
 8002574:	f7fe fdf8 	bl	8001168 <getTempM1>
 8002578:	9801      	ldr	r0, [sp, #4]
 800257a:	2101      	movs	r1, #1
 800257c:	f7fe ff86 	bl	800148c <sendTemperature>
  transfer_cnt++;
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	6023      	str	r3, [r4, #0]
}
 8002586:	b002      	add	sp, #8
 8002588:	bd70      	pop	{r4, r5, r6, pc}
      sendVoltage(flash.board_id, 1, getBatteryVoltage());
 800258a:	68a8      	ldr	r0, [r5, #8]
 800258c:	9001      	str	r0, [sp, #4]
 800258e:	f7fe fd6b 	bl	8001068 <getBatteryVoltage>
 8002592:	9801      	ldr	r0, [sp, #4]
 8002594:	2101      	movs	r1, #1
 8002596:	f7fe ff55 	bl	8001444 <sendVoltage>
  transfer_cnt++;
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	6023      	str	r3, [r4, #0]
}
 80025a0:	b002      	add	sp, #8
 80025a2:	bd70      	pop	{r4, r5, r6, pc}
      sendCurrent(flash.board_id, 0, getCurrentM0());
 80025a4:	68a8      	ldr	r0, [r5, #8]
 80025a6:	9001      	str	r0, [sp, #4]
 80025a8:	f7fe fd76 	bl	8001098 <getCurrentM0>
 80025ac:	9801      	ldr	r0, [sp, #4]
 80025ae:	2100      	movs	r1, #0
 80025b0:	f7fe ff90 	bl	80014d4 <sendCurrent>
  transfer_cnt++;
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	6023      	str	r3, [r4, #0]
}
 80025ba:	b002      	add	sp, #8
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
      sendCurrent(flash.board_id, 1, getCurrentM1());
 80025be:	68a8      	ldr	r0, [r5, #8]
 80025c0:	9001      	str	r0, [sp, #4]
 80025c2:	f7fe fd85 	bl	80010d0 <getCurrentM1>
 80025c6:	9801      	ldr	r0, [sp, #4]
 80025c8:	2101      	movs	r1, #1
 80025ca:	f7fe ff83 	bl	80014d4 <sendCurrent>
  transfer_cnt++;
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	6023      	str	r3, [r4, #0]
}
 80025d4:	b002      	add	sp, #8
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
      sendTemperature(flash.board_id, 0, getTempM0());
 80025d8:	68a8      	ldr	r0, [r5, #8]
 80025da:	9001      	str	r0, [sp, #4]
 80025dc:	f7fe fd94 	bl	8001108 <getTempM0>
 80025e0:	9801      	ldr	r0, [sp, #4]
 80025e2:	2100      	movs	r1, #0
 80025e4:	f7fe ff52 	bl	800148c <sendTemperature>
  transfer_cnt++;
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	6023      	str	r3, [r4, #0]
}
 80025ee:	b002      	add	sp, #8
 80025f0:	bd70      	pop	{r4, r5, r6, pc}
  switch (transfer_cnt) {
 80025f2:	2300      	movs	r3, #0
 80025f4:	e7b9      	b.n	800256a <sendCanData+0xc2>
 80025f6:	bf00      	nop
 80025f8:	7658a371 	.word	0x7658a371
 80025fc:	3f092214 	.word	0x3f092214
 8002600:	20000514 	.word	0x20000514
 8002604:	20000408 	.word	0x20000408
 8002608:	20000330 	.word	0x20000330
 800260c:	2000049c 	.word	0x2000049c

08002610 <protect>:
{
 8002610:	b530      	push	{r4, r5, lr}
 8002612:	ed2d 8b02 	vpush	{d8}
 8002616:	b085      	sub	sp, #20
  if (getCurrentM0() > 5.0 || getCurrentM1() > 5.0)
 8002618:	f7fe fd3e 	bl	8001098 <getCurrentM0>
 800261c:	eeb1 8a04 	vmov.f32	s16, #20	; 0x40a00000  5.0
 8002620:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	dc7e      	bgt.n	8002728 <protect+0x118>
 800262a:	f7fe fd51 	bl	80010d0 <getCurrentM1>
 800262e:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002636:	dc77      	bgt.n	8002728 <protect+0x118>
  if (getBatteryVoltage() < BATTERY_UNVER_VOLTAGE) {
 8002638:	f7fe fd16 	bl	8001068 <getBatteryVoltage>
 800263c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002640:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002648:	f100 80a5 	bmi.w	8002796 <protect+0x186>
  if (getTempM0() > MOTOR_OVER_TEMPERATURE || getTempM1() > MOTOR_OVER_TEMPERATURE) {
 800264c:	f7fe fd5c 	bl	8001108 <getTempM0>
 8002650:	ed9f 8a63 	vldr	s16, [pc, #396]	; 80027e0 <protect+0x1d0>
 8002654:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265c:	dc06      	bgt.n	800266c <protect+0x5c>
 800265e:	f7fe fd83 	bl	8001168 <getTempM1>
 8002662:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	dd31      	ble.n	80026d0 <protect+0xc0>
    forceStop();
 800266c:	f001 fb7c 	bl	8003d68 <forceStop>
    p("motor temperature!! M0 : %4.1f M1 : %4.1f", getTempM0(), getTempM1());
 8002670:	f7fe fd4a 	bl	8001108 <getTempM0>
 8002674:	ee10 5a10 	vmov	r5, s0
 8002678:	f7fe fd76 	bl	8001168 <getTempM1>
 800267c:	4628      	mov	r0, r5
 800267e:	ee10 5a10 	vmov	r5, s0
 8002682:	f7fd ff61 	bl	8000548 <__aeabi_f2d>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4628      	mov	r0, r5
 800268c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002690:	f7fd ff5a 	bl	8000548 <__aeabi_f2d>
 8002694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002698:	e9cd 0100 	strd	r0, r1, [sp]
 800269c:	4851      	ldr	r0, [pc, #324]	; (80027e4 <protect+0x1d4>)
  while (power_enable_cnt > 0) {
 800269e:	4c52      	ldr	r4, [pc, #328]	; (80027e8 <protect+0x1d8>)
    p("motor temperature!! M0 : %4.1f M1 : %4.1f", getTempM0(), getTempM1());
 80026a0:	f001 fc7e 	bl	8003fa0 <p>
    setLedBlue(true);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7ff f81f 	bl	80016e8 <setLedBlue>
    setLedGreen(true);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f7ff f824 	bl	80016f8 <setLedGreen>
    setLedRed(true);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f7ff f811 	bl	80016d8 <setLedRed>
  while (power_enable_cnt > 0) {
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	b143      	cbz	r3, 80026cc <protect+0xbc>
    power_enable_cnt--;
 80026ba:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(10);
 80026bc:	200a      	movs	r0, #10
    power_enable_cnt--;
 80026be:	3b01      	subs	r3, #1
 80026c0:	6023      	str	r3, [r4, #0]
    HAL_Delay(10);
 80026c2:	f001 fd5d 	bl	8004180 <HAL_Delay>
  while (power_enable_cnt > 0) {
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f6      	bne.n	80026ba <protect+0xaa>
  HAL_NVIC_SystemReset();
 80026cc:	f003 f922 	bl	8005914 <HAL_NVIC_SystemReset>
  if (pid[0].load_limit_cnt > MOTOR_OVER_LOAD_CNT_LIMIT || pid[1].load_limit_cnt > MOTOR_OVER_LOAD_CNT_LIMIT)
 80026d0:	4c46      	ldr	r4, [pc, #280]	; (80027ec <protect+0x1dc>)
 80026d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80026d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80026d8:	429a      	cmp	r2, r3
 80026da:	dc02      	bgt.n	80026e2 <protect+0xd2>
 80026dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80026de:	429a      	cmp	r2, r3
 80026e0:	dd55      	ble.n	800278e <protect+0x17e>
    forceStop();
 80026e2:	f001 fb41 	bl	8003d68 <forceStop>
    p("over load!! %d %d", pid[0].load_limit_cnt, pid[1].load_limit_cnt);
 80026e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80026e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80026ea:	4841      	ldr	r0, [pc, #260]	; (80027f0 <protect+0x1e0>)
  while (power_enable_cnt > 0) {
 80026ec:	4c3e      	ldr	r4, [pc, #248]	; (80027e8 <protect+0x1d8>)
    p("over load!! %d %d", pid[0].load_limit_cnt, pid[1].load_limit_cnt);
 80026ee:	f001 fc57 	bl	8003fa0 <p>
    setLedBlue(false);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe fff8 	bl	80016e8 <setLedBlue>
    setLedGreen(false);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe fffd 	bl	80016f8 <setLedGreen>
    setLedRed(true);
 80026fe:	2001      	movs	r0, #1
 8002700:	f7fe ffea 	bl	80016d8 <setLedRed>
  while (power_enable_cnt > 0) {
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	b143      	cbz	r3, 800271a <protect+0x10a>
    power_enable_cnt--;
 8002708:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(10);
 800270a:	200a      	movs	r0, #10
    power_enable_cnt--;
 800270c:	3b01      	subs	r3, #1
 800270e:	6023      	str	r3, [r4, #0]
    HAL_Delay(10);
 8002710:	f001 fd36 	bl	8004180 <HAL_Delay>
  while (power_enable_cnt > 0) {
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f6      	bne.n	8002708 <protect+0xf8>
}
 800271a:	b005      	add	sp, #20
 800271c:	ecbd 8b02 	vpop	{d8}
 8002720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HAL_NVIC_SystemReset();
 8002724:	f003 b8f6 	b.w	8005914 <HAL_NVIC_SystemReset>
    forceStop();
 8002728:	f001 fb1e 	bl	8003d68 <forceStop>
    p("over current!! : %+6.2f %+6.2f\n", getCurrentM0(), getCurrentM1());
 800272c:	f7fe fcb4 	bl	8001098 <getCurrentM0>
 8002730:	ee10 5a10 	vmov	r5, s0
 8002734:	f7fe fccc 	bl	80010d0 <getCurrentM1>
 8002738:	4628      	mov	r0, r5
 800273a:	ee10 5a10 	vmov	r5, s0
 800273e:	f7fd ff03 	bl	8000548 <__aeabi_f2d>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4628      	mov	r0, r5
 8002748:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800274c:	f7fd fefc 	bl	8000548 <__aeabi_f2d>
 8002750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002754:	e9cd 0100 	strd	r0, r1, [sp]
 8002758:	4826      	ldr	r0, [pc, #152]	; (80027f4 <protect+0x1e4>)
  while (power_enable_cnt > 0) {
 800275a:	4c23      	ldr	r4, [pc, #140]	; (80027e8 <protect+0x1d8>)
    p("over current!! : %+6.2f %+6.2f\n", getCurrentM0(), getCurrentM1());
 800275c:	f001 fc20 	bl	8003fa0 <p>
    setLedBlue(false);
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe ffc1 	bl	80016e8 <setLedBlue>
    setLedGreen(true);
 8002766:	2001      	movs	r0, #1
 8002768:	f7fe ffc6 	bl	80016f8 <setLedGreen>
    setLedRed(true);
 800276c:	2001      	movs	r0, #1
 800276e:	f7fe ffb3 	bl	80016d8 <setLedRed>
  while (power_enable_cnt > 0) {
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	b143      	cbz	r3, 8002788 <protect+0x178>
    power_enable_cnt--;
 8002776:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(10);
 8002778:	200a      	movs	r0, #10
    power_enable_cnt--;
 800277a:	3b01      	subs	r3, #1
 800277c:	6023      	str	r3, [r4, #0]
    HAL_Delay(10);
 800277e:	f001 fcff 	bl	8004180 <HAL_Delay>
  while (power_enable_cnt > 0) {
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f6      	bne.n	8002776 <protect+0x166>
  HAL_NVIC_SystemReset();
 8002788:	f003 f8c4 	bl	8005914 <HAL_NVIC_SystemReset>
}
 800278c:	e754      	b.n	8002638 <protect+0x28>
}
 800278e:	b005      	add	sp, #20
 8002790:	ecbd 8b02 	vpop	{d8}
 8002794:	bd30      	pop	{r4, r5, pc}
    forceStop();
 8002796:	f001 fae7 	bl	8003d68 <forceStop>
    p("under operation voltaie!! %6.3f", getBatteryVoltage());
 800279a:	f7fe fc65 	bl	8001068 <getBatteryVoltage>
 800279e:	ee10 0a10 	vmov	r0, s0
 80027a2:	f7fd fed1 	bl	8000548 <__aeabi_f2d>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4813      	ldr	r0, [pc, #76]	; (80027f8 <protect+0x1e8>)
  while (power_enable_cnt > 0) {
 80027ac:	4c0e      	ldr	r4, [pc, #56]	; (80027e8 <protect+0x1d8>)
    p("under operation voltaie!! %6.3f", getBatteryVoltage());
 80027ae:	f001 fbf7 	bl	8003fa0 <p>
    setLedBlue(true);
 80027b2:	2001      	movs	r0, #1
 80027b4:	f7fe ff98 	bl	80016e8 <setLedBlue>
    setLedGreen(false);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe ff9d 	bl	80016f8 <setLedGreen>
    setLedRed(true);
 80027be:	2001      	movs	r0, #1
 80027c0:	f7fe ff8a 	bl	80016d8 <setLedRed>
  while (power_enable_cnt > 0) {
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	b143      	cbz	r3, 80027da <protect+0x1ca>
    power_enable_cnt--;
 80027c8:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(10);
 80027ca:	200a      	movs	r0, #10
    power_enable_cnt--;
 80027cc:	3b01      	subs	r3, #1
 80027ce:	6023      	str	r3, [r4, #0]
    HAL_Delay(10);
 80027d0:	f001 fcd6 	bl	8004180 <HAL_Delay>
  while (power_enable_cnt > 0) {
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f6      	bne.n	80027c8 <protect+0x1b8>
  HAL_NVIC_SystemReset();
 80027da:	f003 f89b 	bl	8005914 <HAL_NVIC_SystemReset>
}
 80027de:	e735      	b.n	800264c <protect+0x3c>
 80027e0:	42a00000 	.word	0x42a00000
 80027e4:	0800c430 	.word	0x0800c430
 80027e8:	20000494 	.word	0x20000494
 80027ec:	2000043c 	.word	0x2000043c
 80027f0:	0800c45c 	.word	0x0800c45c
 80027f4:	0800c3f0 	.word	0x0800c3f0
 80027f8:	0800c410 	.word	0x0800c410
 80027fc:	00000000 	.word	0x00000000

08002800 <SystemClock_Config>:
{
 8002800:	b510      	push	{r4, lr}
 8002802:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002804:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002806:	223c      	movs	r2, #60	; 0x3c
 8002808:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800280a:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800280e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002812:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002816:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002818:	9101      	str	r1, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281a:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800281c:	f007 fbce 	bl	8009fbc <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002820:	2201      	movs	r2, #1
 8002822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002826:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800282a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800282c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800282e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002832:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002836:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002838:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800283c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800283e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002840:	f003 fc30 	bl	80060a4 <HAL_RCC_OscConfig>
 8002844:	b108      	cbz	r0, 800284a <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002846:	b672      	cpsid	i
  while (1) {
 8002848:	e7fe      	b.n	8002848 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284a:	220f      	movs	r2, #15
 800284c:	4603      	mov	r3, r0
 800284e:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002850:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002852:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002856:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002858:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800285c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800285e:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002860:	f003 fee8 	bl	8006634 <HAL_RCC_ClockConfig>
 8002864:	4603      	mov	r3, r0
 8002866:	b108      	cbz	r0, 800286c <SystemClock_Config+0x6c>
 8002868:	b672      	cpsid	i
  while (1) {
 800286a:	e7fe      	b.n	800286a <SystemClock_Config+0x6a>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800286c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002898 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8002870:	f243 1101 	movw	r1, #12545	; 0x3101
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002878:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800287a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800287e:	9110      	str	r1, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002880:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002882:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002884:	f004 f820 	bl	80068c8 <HAL_RCCEx_PeriphCLKConfig>
 8002888:	b108      	cbz	r0, 800288e <SystemClock_Config+0x8e>
 800288a:	b672      	cpsid	i
  while (1) {
 800288c:	e7fe      	b.n	800288c <SystemClock_Config+0x8c>
}
 800288e:	b020      	add	sp, #128	; 0x80
 8002890:	bd10      	pop	{r4, pc}
 8002892:	bf00      	nop
 8002894:	f3af 8000 	nop.w
	...

080028a0 <main>:
{
 80028a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a4:	ed2d 8b02 	vpush	{d8}
 80028a8:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80028aa:	f001 fc45 	bl	8004138 <HAL_Init>
  SystemClock_Config();
 80028ae:	f7ff ffa7 	bl	8002800 <SystemClock_Config>
  MX_GPIO_Init();
 80028b2:	f7fe ff29 	bl	8001708 <MX_GPIO_Init>
  MX_DMA_Init();
 80028b6:	f7fe fe3f 	bl	8001538 <MX_DMA_Init>
  MX_ADC1_Init();
 80028ba:	f7fe f9e5 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 80028be:	f7fe fa65 	bl	8000d8c <MX_ADC2_Init>
  MX_ADC3_Init();
 80028c2:	f7fe fabd 	bl	8000e40 <MX_ADC3_Init>
  MX_CAN_Init();
 80028c6:	f7fe fcd7 	bl	8001278 <MX_CAN_Init>
  MX_SPI1_Init();
 80028ca:	f000 fcef 	bl	80032ac <MX_SPI1_Init>
  MX_TIM1_Init();
 80028ce:	f001 f813 	bl	80038f8 <MX_TIM1_Init>
  MX_TIM8_Init();
 80028d2:	f001 f899 	bl	8003a08 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80028d6:	f001 fa97 	bl	8003e08 <MX_USART1_UART_Init>
  initFirstSin();
 80028da:	f001 f91d 	bl	8003b18 <initFirstSin>
  setLedRed(true);
 80028de:	2001      	movs	r0, #1
 80028e0:	f7fe fefa 	bl	80016d8 <setLedRed>
  setLedGreen(true);
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7fe ff07 	bl	80016f8 <setLedGreen>
  setLedBlue(true);
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7fe fefc 	bl	80016e8 <setLedBlue>
  HAL_Delay(100);
 80028f0:	2064      	movs	r0, #100	; 0x64
 80028f2:	f001 fc45 	bl	8004180 <HAL_Delay>
    pid[i].pid_kp = 0.2;
 80028f6:	f8df b3c8 	ldr.w	fp, [pc, #968]	; 8002cc0 <main+0x420>
    enc_offset[i].zero_calib = flash.calib[i];
 80028fa:	4dcc      	ldr	r5, [pc, #816]	; (8002c2c <main+0x38c>)
  loadFlashData();
 80028fc:	f7fe fea8 	bl	8001650 <loadFlashData>
  p("** Orion VV driver V1 (2) start! **\n");
 8002900:	48cb      	ldr	r0, [pc, #812]	; (8002c30 <main+0x390>)
 8002902:	f001 fb4d 	bl	8003fa0 <p>
    pid[i].pid_kp = 0.2;
 8002906:	4acb      	ldr	r2, [pc, #812]	; (8002c34 <main+0x394>)
 8002908:	f8cb 2004 	str.w	r2, [fp, #4]
    pid[i].pid_ki = 0.3;
 800290c:	4aca      	ldr	r2, [pc, #808]	; (8002c38 <main+0x398>)
    cmd[i].speed = 0;
 800290e:	49cb      	ldr	r1, [pc, #812]	; (8002c3c <main+0x39c>)
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 8002910:	ed95 8a03 	vldr	s16, [r5, #12]
    pid[i].pid_ki = 0.3;
 8002914:	f8cb 200c 	str.w	r2, [fp, #12]
    pid[i].error_integral_limit = 2.0;
 8002918:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 800291c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    pid[i].error_integral_limit = 2.0;
 8002920:	f8cb 201c 	str.w	r2, [fp, #28]
    pid[i].diff_voltage_limit = 2.0;
 8002924:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    cmd[i].timeout_cnt = -1;
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	610a      	str	r2, [r1, #16]
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 800292e:	eeb4 8ae7 	vcmpe.f32	s16, s15
    enc_offset[i].zero_calib = flash.calib[i];
 8002932:	4ac3      	ldr	r2, [pc, #780]	; (8002c40 <main+0x3a0>)
 8002934:	6828      	ldr	r0, [r5, #0]
 8002936:	6050      	str	r0, [r2, #4]
    pid[i].pid_kd = 0.0;
 8002938:	2300      	movs	r3, #0
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 800293a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pid[i].pid_kd = 0.0;
 800293e:	f8cb 3008 	str.w	r3, [fp, #8]
    cmd[i].speed = 0;
 8002942:	600b      	str	r3, [r1, #0]
    cmd[i].out_v = 0;
 8002944:	608b      	str	r3, [r1, #8]
    cmd[i].out_v_final = 0;
 8002946:	60cb      	str	r3, [r1, #12]
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 8002948:	f340 8482 	ble.w	8003250 <main+0x9b0>
      motor_param[i].voltage_per_rps = 1 / flash.rps_per_v[i];
 800294c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002950:	ee87 7a88 	vdiv.f32	s14, s15, s16
    cmd[i].speed = 0;
 8002954:	4eb9      	ldr	r6, [pc, #740]	; (8002c3c <main+0x39c>)
    enc_offset[i].zero_calib = flash.calib[i];
 8002956:	686c      	ldr	r4, [r5, #4]
    pid[i].pid_kp = 0.2;
 8002958:	49b6      	ldr	r1, [pc, #728]	; (8002c34 <main+0x394>)
    enc_offset[i].zero_calib = flash.calib[i];
 800295a:	60d4      	str	r4, [r2, #12]
    pid[i].pid_kd = 0.0;
 800295c:	2300      	movs	r3, #0
    pid[i].error_integral_limit = 2.0;
 800295e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    pid[i].pid_kd = 0.0;
 8002962:	f8cb 3034 	str.w	r3, [fp, #52]	; 0x34
    cmd[i].speed = 0;
 8002966:	6173      	str	r3, [r6, #20]
    cmd[i].out_v = 0;
 8002968:	61f3      	str	r3, [r6, #28]
    cmd[i].out_v_final = 0;
 800296a:	6233      	str	r3, [r6, #32]
 800296c:	4bb5      	ldr	r3, [pc, #724]	; (8002c44 <main+0x3a4>)
    pid[i].pid_kp = 0.2;
 800296e:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
    pid[i].error_integral_limit = 2.0;
 8002972:	f8cb 2048 	str.w	r2, [fp, #72]	; 0x48
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 8002976:	edd5 8a04 	vldr	s17, [r5, #16]
    pid[i].pid_ki = 0.3;
 800297a:	49af      	ldr	r1, [pc, #700]	; (8002c38 <main+0x398>)
    pid[i].diff_voltage_limit = 2.0;
 800297c:	f8cb 2050 	str.w	r2, [fp, #80]	; 0x50
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 8002980:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002984:	eef4 8ae7 	vcmpe.f32	s17, s15
    cmd[i].timeout_cnt = -1;
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 800298c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002990:	ed83 7a00 	vstr	s14, [r3]
    pid[i].pid_ki = 0.3;
 8002994:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
    cmd[i].timeout_cnt = -1;
 8002998:	6272      	str	r2, [r6, #36]	; 0x24
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 800299a:	f340 844d 	ble.w	8003238 <main+0x998>
      motor_param[i].voltage_per_rps = 1 / flash.rps_per_v[i];
 800299e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80029a2:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80029a6:	edc3 7a01 	vstr	s15, [r3, #4]
  p("CAN ADDR 0x%03x, enc offset M0 %6.3f M1 %6.3f , RPS/V M0 %6.3f M1 %6.3f\n", flash.board_id, flash.calib[0], flash.calib[1], flash.rps_per_v[0], flash.rps_per_v[1]);
 80029aa:	f7fd fdcd 	bl	8000548 <__aeabi_f2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	ee18 0a90 	vmov	r0, s17
 80029b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80029ba:	f7fd fdc5 	bl	8000548 <__aeabi_f2d>
 80029be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80029c2:	ee18 0a10 	vmov	r0, s16
 80029c6:	f7fd fdbf 	bl	8000548 <__aeabi_f2d>
 80029ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029ce:	4620      	mov	r0, r4
 80029d0:	f7fd fdba 	bl	8000548 <__aeabi_f2d>
 80029d4:	e9cd 0100 	strd	r0, r1, [sp]
 80029d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80029dc:	68a9      	ldr	r1, [r5, #8]
 80029de:	489a      	ldr	r0, [pc, #616]	; (8002c48 <main+0x3a8>)
 80029e0:	f001 fade 	bl	8003fa0 <p>
  if (isPushedSW1()) {
 80029e4:	f7fe fe48 	bl	8001678 <isPushedSW1>
 80029e8:	2800      	cmp	r0, #0
 80029ea:	f000 8412 	beq.w	8003212 <main+0x972>
    flash.board_id = 0;
 80029ee:	2000      	movs	r0, #0
 80029f0:	60a8      	str	r0, [r5, #8]
    writeCanBoardID(flash.board_id);
 80029f2:	f7fe fe07 	bl	8001604 <writeCanBoardID>
    p("sed board id %d\n", flash.board_id);
 80029f6:	4895      	ldr	r0, [pc, #596]	; (8002c4c <main+0x3ac>)
 80029f8:	68a9      	ldr	r1, [r5, #8]
 80029fa:	f001 fad1 	bl	8003fa0 <p>
    HAL_Delay(1000);
 80029fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a02:	f001 fbbd 	bl	8004180 <HAL_Delay>
  if (isPushedSW4()) {
 8002a06:	f7fe fe5b 	bl	80016c0 <isPushedSW4>
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	f000 83f0 	beq.w	80031f0 <main+0x950>
    startCalibrationMode();
 8002a10:	f7ff fd24 	bl	800245c <startCalibrationMode>
    p("enc calibration mode!!\n");
 8002a14:	488e      	ldr	r0, [pc, #568]	; (8002c50 <main+0x3b0>)
 8002a16:	f001 fac3 	bl	8003fa0 <p>
    while (isPushedSW4())
 8002a1a:	f7fe fe51 	bl	80016c0 <isPushedSW4>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d1fb      	bne.n	8002a1a <main+0x17a>
  __HAL_SPI_ENABLE(&hspi1);
 8002a22:	4b8c      	ldr	r3, [pc, #560]	; (8002c54 <main+0x3b4>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002a24:	488c      	ldr	r0, [pc, #560]	; (8002c58 <main+0x3b8>)
  __HAL_SPI_ENABLE(&hspi1);
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	6813      	ldr	r3, [r2, #0]
 8002a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a2e:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	2201      	movs	r2, #1
 8002a34:	f003 fb30 	bl	8006098 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4887      	ldr	r0, [pc, #540]	; (8002c58 <main+0x3b8>)
 8002a3c:	2140      	movs	r1, #64	; 0x40
 8002a3e:	f003 fb2b 	bl	8006098 <HAL_GPIO_WritePin>
  p("id = 0x00,reg = 0x%02x\n", readRegisterMA702(1, 0));  // Z offset-L
 8002a42:	2100      	movs	r1, #0
 8002a44:	2001      	movs	r0, #1
 8002a46:	f000 fc9b 	bl	8003380 <readRegisterMA702>
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	4883      	ldr	r0, [pc, #524]	; (8002c5c <main+0x3bc>)
 8002a4e:	f001 faa7 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002a52:	2001      	movs	r0, #1
 8002a54:	f001 fb94 	bl	8004180 <HAL_Delay>
  p("id = 0x01,reg = 0x%02x\n", readRegisterMA702(1, 1));  // Z offset-H
 8002a58:	2101      	movs	r1, #1
 8002a5a:	4608      	mov	r0, r1
 8002a5c:	f000 fc90 	bl	8003380 <readRegisterMA702>
 8002a60:	4601      	mov	r1, r0
 8002a62:	487f      	ldr	r0, [pc, #508]	; (8002c60 <main+0x3c0>)
 8002a64:	f001 fa9c 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	f001 fb89 	bl	8004180 <HAL_Delay>
  p("id = 0x02,reg = 0x%02x\n", readRegisterMA702(1, 2));  // BCT (off-axis param)
 8002a6e:	2102      	movs	r1, #2
 8002a70:	2001      	movs	r0, #1
 8002a72:	f000 fc85 	bl	8003380 <readRegisterMA702>
 8002a76:	4601      	mov	r1, r0
 8002a78:	487a      	ldr	r0, [pc, #488]	; (8002c64 <main+0x3c4>)
 8002a7a:	f001 fa91 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002a7e:	2001      	movs	r0, #1
 8002a80:	f001 fb7e 	bl	8004180 <HAL_Delay>
  p("id = 0x03,reg = 0x%02x\n", readRegisterMA702(1, 3));  // ETY,ETX
 8002a84:	2103      	movs	r1, #3
 8002a86:	2001      	movs	r0, #1
 8002a88:	f000 fc7a 	bl	8003380 <readRegisterMA702>
 8002a8c:	4601      	mov	r1, r0
 8002a8e:	4876      	ldr	r0, [pc, #472]	; (8002c68 <main+0x3c8>)
 8002a90:	f001 fa86 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002a94:	2001      	movs	r0, #1
 8002a96:	f001 fb73 	bl	8004180 <HAL_Delay>
  p("id = 0x04,reg = 0x%02x\n", readRegisterMA702(1, 4));  // PPT-L/ILIP
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f000 fc6f 	bl	8003380 <readRegisterMA702>
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	4871      	ldr	r0, [pc, #452]	; (8002c6c <main+0x3cc>)
 8002aa6:	f001 fa7b 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f001 fb68 	bl	8004180 <HAL_Delay>
  p("id = 0x05,reg = 0x%02x\n", readRegisterMA702(1, 5));  // PPT-H
 8002ab0:	2105      	movs	r1, #5
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f000 fc64 	bl	8003380 <readRegisterMA702>
 8002ab8:	4601      	mov	r1, r0
 8002aba:	486d      	ldr	r0, [pc, #436]	; (8002c70 <main+0x3d0>)
 8002abc:	f001 fa70 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f001 fb5d 	bl	8004180 <HAL_Delay>
  p("id = 0x06,reg = 0x%02x\n", readRegisterMA702(1, 6));  // MGLT/MGHT
 8002ac6:	2106      	movs	r1, #6
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f000 fc59 	bl	8003380 <readRegisterMA702>
 8002ace:	4601      	mov	r1, r0
 8002ad0:	4868      	ldr	r0, [pc, #416]	; (8002c74 <main+0x3d4>)
 8002ad2:	f001 fa65 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f001 fb52 	bl	8004180 <HAL_Delay>
  p("id = 0x09,reg = 0x%02x\n", readRegisterMA702(1, 9));  // RD
 8002adc:	2109      	movs	r1, #9
 8002ade:	2001      	movs	r0, #1
 8002ae0:	f000 fc4e 	bl	8003380 <readRegisterMA702>
 8002ae4:	4601      	mov	r1, r0
 8002ae6:	4864      	ldr	r0, [pc, #400]	; (8002c78 <main+0x3d8>)
 8002ae8:	f001 fa5a 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002aec:	2001      	movs	r0, #1
 8002aee:	f001 fb47 	bl	8004180 <HAL_Delay>
  p("id = 0x0E,reg = 0x%02x\n", readRegisterMA702(1, 0xE));  // FW
 8002af2:	210e      	movs	r1, #14
 8002af4:	2001      	movs	r0, #1
 8002af6:	f000 fc43 	bl	8003380 <readRegisterMA702>
 8002afa:	4601      	mov	r1, r0
 8002afc:	485f      	ldr	r0, [pc, #380]	; (8002c7c <main+0x3dc>)
 8002afe:	f001 fa4f 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f001 fb3c 	bl	8004180 <HAL_Delay>
  p("id = 0x10,reg = 0x%02x\n", readRegisterMA702(1, 0x10));  // HYS
 8002b08:	2110      	movs	r1, #16
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f000 fc38 	bl	8003380 <readRegisterMA702>
 8002b10:	4601      	mov	r1, r0
 8002b12:	485b      	ldr	r0, [pc, #364]	; (8002c80 <main+0x3e0>)
 8002b14:	f001 fa44 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f001 fb31 	bl	8004180 <HAL_Delay>
  p("id = 0x1B,reg = 0x%02x\n", readRegisterMA702(1, 0x1B));  // MGH&L
 8002b1e:	211b      	movs	r1, #27
 8002b20:	2001      	movs	r0, #1
 8002b22:	f000 fc2d 	bl	8003380 <readRegisterMA702>
 8002b26:	4601      	mov	r1, r0
 8002b28:	4856      	ldr	r0, [pc, #344]	; (8002c84 <main+0x3e4>)
 8002b2a:	f001 fa39 	bl	8003fa0 <p>
  HAL_Delay(1);
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f001 fb26 	bl	8004180 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002b34:	2100      	movs	r1, #0
 8002b36:	4854      	ldr	r0, [pc, #336]	; (8002c88 <main+0x3e8>)
 8002b38:	f001 fd82 	bl	8004640 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4853      	ldr	r0, [pc, #332]	; (8002c8c <main+0x3ec>)
 8002b40:	f001 fd7e 	bl	8004640 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8002b44:	2100      	movs	r1, #0
 8002b46:	4852      	ldr	r0, [pc, #328]	; (8002c90 <main+0x3f0>)
 8002b48:	f001 fd7a 	bl	8004640 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8002b4c:	484e      	ldr	r0, [pc, #312]	; (8002c88 <main+0x3e8>)
 8002b4e:	f001 fcdf 	bl	8004510 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8002b52:	484e      	ldr	r0, [pc, #312]	; (8002c8c <main+0x3ec>)
 8002b54:	f001 fcdc 	bl	8004510 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8002b58:	484d      	ldr	r0, [pc, #308]	; (8002c90 <main+0x3f0>)
 8002b5a:	f001 fcd9 	bl	8004510 <HAL_ADC_Start>
  htim1.Instance->CNT = 0;
 8002b5e:	484d      	ldr	r0, [pc, #308]	; (8002c94 <main+0x3f4>)
  htim8.Instance->CNT = 10;
 8002b60:	4b4d      	ldr	r3, [pc, #308]	; (8002c98 <main+0x3f8>)
  htim1.Instance->CNT = 0;
 8002b62:	6802      	ldr	r2, [r0, #0]
  htim8.Instance->CNT = 10;
 8002b64:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CNT = 0;
 8002b66:	2400      	movs	r4, #0
 8002b68:	6254      	str	r4, [r2, #36]	; 0x24
  htim8.Instance->CNT = 10;
 8002b6a:	220a      	movs	r2, #10
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim1);
 8002b6e:	f004 f8b1 	bl	8006cd4 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8002b72:	2201      	movs	r2, #1
 8002b74:	4949      	ldr	r1, [pc, #292]	; (8002c9c <main+0x3fc>)
 8002b76:	484a      	ldr	r0, [pc, #296]	; (8002ca0 <main+0x400>)
 8002b78:	f005 fc46 	bl	8008408 <HAL_UART_Receive_IT>
  p("waiting startup voltage.... : %3.1fV\n", BATTERY_UNVER_VOLTAGE + 2);
 8002b7c:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <main+0x404>)
 8002b7e:	484a      	ldr	r0, [pc, #296]	; (8002ca8 <main+0x408>)
 8002b80:	2200      	movs	r2, #0
    if (getBatteryVoltage() > BATTERY_UNVER_VOLTAGE + 2.0) {
 8002b82:	eeb3 8a06 	vmov.f32	s16, #54	; 0x41b00000  22.0
  p("waiting startup voltage.... : %3.1fV\n", BATTERY_UNVER_VOLTAGE + 2);
 8002b86:	f001 fa0b 	bl	8003fa0 <p>
    HAL_Delay(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f001 faf8 	bl	8004180 <HAL_Delay>
    if (getBatteryVoltage() > BATTERY_UNVER_VOLTAGE + 2.0) {
 8002b90:	f7fe fa6a 	bl	8001068 <getBatteryVoltage>
 8002b94:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      over_startup_voltage = 0;
 8002b9c:	bfd8      	it	le
 8002b9e:	2400      	movle	r4, #0
    if (getBatteryVoltage() > BATTERY_UNVER_VOLTAGE + 2.0) {
 8002ba0:	ddf3      	ble.n	8002b8a <main+0x2ea>
      over_startup_voltage++;
 8002ba2:	3401      	adds	r4, #1
  while (over_startup_voltage < 500) {
 8002ba4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8002ba8:	d1ef      	bne.n	8002b8a <main+0x2ea>
  HAL_TIM_PWM_Init(&htim8);
 8002baa:	483b      	ldr	r0, [pc, #236]	; (8002c98 <main+0x3f8>)
 8002bac:	4f3f      	ldr	r7, [pc, #252]	; (8002cac <main+0x40c>)
 8002bae:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8002c9c <main+0x3fc>
 8002bb2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002cc4 <main+0x424>
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8002bb6:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 8002cb0 <main+0x410>
 8002bba:	4c3e      	ldr	r4, [pc, #248]	; (8002cb4 <main+0x414>)
 8002bbc:	4e3e      	ldr	r6, [pc, #248]	; (8002cb8 <main+0x418>)
 8002bbe:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8002cc8 <main+0x428>
        manual_offset_radian = 0;
 8002bc2:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8002cbc <main+0x41c>
  HAL_TIM_PWM_Init(&htim8);
 8002bc6:	f004 f8d7 	bl	8006d78 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4832      	ldr	r0, [pc, #200]	; (8002c98 <main+0x3f8>)
 8002bce:	f004 f95b 	bl	8006e88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4830      	ldr	r0, [pc, #192]	; (8002c98 <main+0x3f8>)
 8002bd6:	f004 fcb1 	bl	800753c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002bda:	2104      	movs	r1, #4
 8002bdc:	482e      	ldr	r0, [pc, #184]	; (8002c98 <main+0x3f8>)
 8002bde:	f004 f953 	bl	8006e88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8002be2:	2104      	movs	r1, #4
 8002be4:	482c      	ldr	r0, [pc, #176]	; (8002c98 <main+0x3f8>)
 8002be6:	f004 fca9 	bl	800753c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002bea:	2108      	movs	r1, #8
 8002bec:	482a      	ldr	r0, [pc, #168]	; (8002c98 <main+0x3f8>)
 8002bee:	f004 f94b 	bl	8006e88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8002bf2:	2108      	movs	r1, #8
 8002bf4:	4828      	ldr	r0, [pc, #160]	; (8002c98 <main+0x3f8>)
 8002bf6:	f004 fca1 	bl	800753c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Init(&htim1);
 8002bfa:	4826      	ldr	r0, [pc, #152]	; (8002c94 <main+0x3f4>)
 8002bfc:	f004 f8bc 	bl	8006d78 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002c00:	2100      	movs	r1, #0
 8002c02:	4824      	ldr	r0, [pc, #144]	; (8002c94 <main+0x3f4>)
 8002c04:	f004 f940 	bl	8006e88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4822      	ldr	r0, [pc, #136]	; (8002c94 <main+0x3f4>)
 8002c0c:	f004 fc96 	bl	800753c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002c10:	2104      	movs	r1, #4
 8002c12:	4820      	ldr	r0, [pc, #128]	; (8002c94 <main+0x3f4>)
 8002c14:	f004 f938 	bl	8006e88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002c18:	2104      	movs	r1, #4
 8002c1a:	481e      	ldr	r0, [pc, #120]	; (8002c94 <main+0x3f4>)
 8002c1c:	f004 fc8e 	bl	800753c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002c20:	2108      	movs	r1, #8
 8002c22:	481c      	ldr	r0, [pc, #112]	; (8002c94 <main+0x3f4>)
 8002c24:	f004 f930 	bl	8006e88 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002c28:	2108      	movs	r1, #8
 8002c2a:	e04f      	b.n	8002ccc <main+0x42c>
 8002c2c:	20000330 	.word	0x20000330
 8002c30:	0800c470 	.word	0x0800c470
 8002c34:	3e4ccccd 	.word	0x3e4ccccd
 8002c38:	3e99999a 	.word	0x3e99999a
 8002c3c:	200003b4 	.word	0x200003b4
 8002c40:	200003e0 	.word	0x200003e0
 8002c44:	20000400 	.word	0x20000400
 8002c48:	0800c498 	.word	0x0800c498
 8002c4c:	0800c4e4 	.word	0x0800c4e4
 8002c50:	0800c4f8 	.word	0x0800c4f8
 8002c54:	200004b0 	.word	0x200004b0
 8002c58:	48000400 	.word	0x48000400
 8002c5c:	0800c52c 	.word	0x0800c52c
 8002c60:	0800c544 	.word	0x0800c544
 8002c64:	0800c55c 	.word	0x0800c55c
 8002c68:	0800c574 	.word	0x0800c574
 8002c6c:	0800c58c 	.word	0x0800c58c
 8002c70:	0800c5a4 	.word	0x0800c5a4
 8002c74:	0800c5bc 	.word	0x0800c5bc
 8002c78:	0800c5d4 	.word	0x0800c5d4
 8002c7c:	0800c5ec 	.word	0x0800c5ec
 8002c80:	0800c604 	.word	0x0800c604
 8002c84:	0800c61c 	.word	0x0800c61c
 8002c88:	20000214 	.word	0x20000214
 8002c8c:	20000264 	.word	0x20000264
 8002c90:	200002b4 	.word	0x200002b4
 8002c94:	20000560 	.word	0x20000560
 8002c98:	200005ac 	.word	0x200005ac
 8002c9c:	200004a0 	.word	0x200004a0
 8002ca0:	20001960 	.word	0x20001960
 8002ca4:	40360000 	.word	0x40360000
 8002ca8:	0800c634 	.word	0x0800c634
 8002cac:	200004aa 	.word	0x200004aa
 8002cb0:	3c7a0000 	.word	0x3c7a0000
 8002cb4:	20000408 	.word	0x20000408
 8002cb8:	20000514 	.word	0x20000514
 8002cbc:	00000000 	.word	0x00000000
 8002cc0:	2000043c 	.word	0x2000043c
 8002cc4:	200003dc 	.word	0x200003dc
 8002cc8:	200003f4 	.word	0x200003f4
 8002ccc:	48ca      	ldr	r0, [pc, #808]	; (8002ff8 <main+0x758>)
 8002cce:	f004 fc35 	bl	800753c <HAL_TIMEx_PWMN_Start>
  CAN_Filter_Init(flash.board_id);
 8002cd2:	8928      	ldrh	r0, [r5, #8]
 8002cd4:	4dc9      	ldr	r5, [pc, #804]	; (8002ffc <main+0x75c>)
 8002cd6:	f7fe fb43 	bl	8001360 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8002cda:	48c9      	ldr	r0, [pc, #804]	; (8003000 <main+0x760>)
 8002cdc:	f002 fb3e 	bl	800535c <HAL_CAN_Start>
  p("start main loop!\n");
 8002ce0:	48c8      	ldr	r0, [pc, #800]	; (8003004 <main+0x764>)
 8002ce2:	f001 f95d 	bl	8003fa0 <p>
  setLedRed(false);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe fcf6 	bl	80016d8 <setLedRed>
  setLedGreen(false);
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7fe fd03 	bl	80016f8 <setLedGreen>
  setLedBlue(false);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fe fcf8 	bl	80016e8 <setLedBlue>
  if (uart_rx_flag) {
 8002cf8:	783b      	ldrb	r3, [r7, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d168      	bne.n	8002dd0 <main+0x530>
  int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 8002cfe:	6871      	ldr	r1, [r6, #4]
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	1a5b      	subs	r3, r3, r1
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8002d04:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002d08:	f280 810f 	bge.w	8002f2a <main+0x68a>
    temp += ENC_CNT_MAX;
 8002d0c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8002d10:	6862      	ldr	r2, [r4, #4]
  motor_real[motor].pre_enc_cnt_raw = ma702[motor].enc_raw;
 8002d12:	6021      	str	r1, [r4, #0]
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8002d14:	2a00      	cmp	r2, #0
 8002d16:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8002d1a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8002d1e:	bfb8      	it	lt
 8002d20:	4252      	neglt	r2, r2
 8002d22:	4282      	cmp	r2, r0
  if (abs(motor_real[motor].diff_cnt_min) > abs(temp)) {
 8002d24:	68a2      	ldr	r2, [r4, #8]
    motor_real[motor].diff_cnt_max = temp;
 8002d26:	bfb8      	it	lt
 8002d28:	6063      	strlt	r3, [r4, #4]
  if (abs(motor_real[motor].diff_cnt_min) > abs(temp)) {
 8002d2a:	2a00      	cmp	r2, #0
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8002d2c:	ee07 3a90 	vmov	s15, r3
  if (abs(motor_real[motor].diff_cnt_min) > abs(temp)) {
 8002d30:	bfb8      	it	lt
 8002d32:	4252      	neglt	r2, r2
 8002d34:	4290      	cmp	r0, r2
    motor_real[motor].diff_cnt_min = temp;
 8002d36:	bfb8      	it	lt
 8002d38:	60a3      	strlt	r3, [r4, #8]
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8002d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 8002d3e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002d40:	69a3      	ldr	r3, [r4, #24]
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8002d42:	ee67 7a88 	vmul.f32	s15, s15, s16
  int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 8002d46:	1a5b      	subs	r3, r3, r1
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8002d48:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8002d4c:	edc4 7a03 	vstr	s15, [r4, #12]
  motor_real[motor].pre_rps = motor_real[motor].rps;
 8002d50:	edc4 7a04 	vstr	s15, [r4, #16]
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8002d54:	f280 80e3 	bge.w	8002f1e <main+0x67e>
    temp += ENC_CNT_MAX;
 8002d58:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8002d5c:	69e2      	ldr	r2, [r4, #28]
  motor_real[motor].pre_enc_cnt_raw = ma702[motor].enc_raw;
 8002d5e:	61a1      	str	r1, [r4, #24]
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8002d60:	2a00      	cmp	r2, #0
 8002d62:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8002d66:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8002d6a:	ee07 3a90 	vmov	s15, r3
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8002d6e:	bfb8      	it	lt
 8002d70:	4252      	neglt	r2, r2
 8002d72:	4282      	cmp	r2, r0
  if (abs(motor_real[motor].diff_cnt_min) > abs(temp)) {
 8002d74:	6a22      	ldr	r2, [r4, #32]
    motor_real[motor].diff_cnt_max = temp;
 8002d76:	bfb8      	it	lt
 8002d78:	61e3      	strlt	r3, [r4, #28]
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8002d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (abs(motor_real[motor].diff_cnt_min) > abs(temp)) {
 8002d7e:	2a00      	cmp	r2, #0
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8002d80:	ee67 7a88 	vmul.f32	s15, s15, s16
  if (abs(motor_real[motor].diff_cnt_min) > abs(temp)) {
 8002d84:	bfb8      	it	lt
 8002d86:	4252      	neglt	r2, r2
 8002d88:	4290      	cmp	r0, r2
    motor_real[motor].diff_cnt_min = temp;
 8002d8a:	bfb8      	it	lt
 8002d8c:	6223      	strlt	r3, [r4, #32]
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8002d8e:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
  motor_real[motor].pre_rps = motor_real[motor].rps;
 8002d92:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    sendCanData();
 8002d96:	f7ff fb87 	bl	80024a8 <sendCanData>
    if (enc_calibration_mode) {
 8002d9a:	f898 3000 	ldrb.w	r3, [r8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80ba 	beq.w	8002f18 <main+0x678>
      calibrationMode();
 8002da4:	f7ff f9e4 	bl	8002170 <calibrationMode>
    protect();
 8002da8:	f7ff fc32 	bl	8002610 <protect>
    setLedRed(true);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7fe fc93 	bl	80016d8 <setLedRed>
    main_loop_remain_counter = INTERRUPT_KHZ_1MS - interrupt_timer_cnt;
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	f1c3 0314 	rsb	r3, r3, #20
 8002db8:	f8c9 3000 	str.w	r3, [r9]
    while (interrupt_timer_cnt <= INTERRUPT_KHZ_1MS)
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	2b14      	cmp	r3, #20
 8002dc0:	d9fc      	bls.n	8002dbc <main+0x51c>
    interrupt_timer_cnt = 0;
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	6028      	str	r0, [r5, #0]
    setLedRed(false);
 8002dc6:	f7fe fc87 	bl	80016d8 <setLedRed>
  if (uart_rx_flag) {
 8002dca:	783b      	ldrb	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d096      	beq.n	8002cfe <main+0x45e>
    uart_rx_flag = false;
 8002dd0:	2300      	movs	r3, #0
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8002dd2:	488d      	ldr	r0, [pc, #564]	; (8003008 <main+0x768>)
    uart_rx_flag = false;
 8002dd4:	703b      	strb	r3, [r7, #0]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	4651      	mov	r1, sl
 8002dda:	f005 fb15 	bl	8008408 <HAL_UART_Receive_IT>
    switch (uart_rx_buf[0]) {
 8002dde:	f89a 3000 	ldrb.w	r3, [sl]
 8002de2:	3b30      	subs	r3, #48	; 0x30
 8002de4:	2b49      	cmp	r3, #73	; 0x49
 8002de6:	d88a      	bhi.n	8002cfe <main+0x45e>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <main+0x550>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	080031e5 	.word	0x080031e5
 8002df4:	08002cff 	.word	0x08002cff
 8002df8:	08002cff 	.word	0x08002cff
 8002dfc:	08002cff 	.word	0x08002cff
 8002e00:	08002cff 	.word	0x08002cff
 8002e04:	08002cff 	.word	0x08002cff
 8002e08:	08002cff 	.word	0x08002cff
 8002e0c:	08002cff 	.word	0x08002cff
 8002e10:	08002cff 	.word	0x08002cff
 8002e14:	08002cff 	.word	0x08002cff
 8002e18:	08002cff 	.word	0x08002cff
 8002e1c:	08002cff 	.word	0x08002cff
 8002e20:	08002cff 	.word	0x08002cff
 8002e24:	08002cff 	.word	0x08002cff
 8002e28:	08002cff 	.word	0x08002cff
 8002e2c:	08002cff 	.word	0x08002cff
 8002e30:	08002cff 	.word	0x08002cff
 8002e34:	08002cff 	.word	0x08002cff
 8002e38:	08002cff 	.word	0x08002cff
 8002e3c:	08002cff 	.word	0x08002cff
 8002e40:	08002cff 	.word	0x08002cff
 8002e44:	08002cff 	.word	0x08002cff
 8002e48:	08002cff 	.word	0x08002cff
 8002e4c:	08002cff 	.word	0x08002cff
 8002e50:	08002cff 	.word	0x08002cff
 8002e54:	08002cff 	.word	0x08002cff
 8002e58:	08002cff 	.word	0x08002cff
 8002e5c:	08002cff 	.word	0x08002cff
 8002e60:	08002cff 	.word	0x08002cff
 8002e64:	08002cff 	.word	0x08002cff
 8002e68:	08002cff 	.word	0x08002cff
 8002e6c:	08002cff 	.word	0x08002cff
 8002e70:	08002cff 	.word	0x08002cff
 8002e74:	08002cff 	.word	0x08002cff
 8002e78:	08002cff 	.word	0x08002cff
 8002e7c:	08002cff 	.word	0x08002cff
 8002e80:	08002cff 	.word	0x08002cff
 8002e84:	08002cff 	.word	0x08002cff
 8002e88:	08002cff 	.word	0x08002cff
 8002e8c:	08002cff 	.word	0x08002cff
 8002e90:	08002cff 	.word	0x08002cff
 8002e94:	08002cff 	.word	0x08002cff
 8002e98:	08002cff 	.word	0x08002cff
 8002e9c:	08002cff 	.word	0x08002cff
 8002ea0:	08002cff 	.word	0x08002cff
 8002ea4:	08002cff 	.word	0x08002cff
 8002ea8:	08002cff 	.word	0x08002cff
 8002eac:	08002cff 	.word	0x08002cff
 8002eb0:	08002cff 	.word	0x08002cff
 8002eb4:	080031c9 	.word	0x080031c9
 8002eb8:	08002cff 	.word	0x08002cff
 8002ebc:	0800319d 	.word	0x0800319d
 8002ec0:	0800316d 	.word	0x0800316d
 8002ec4:	08003125 	.word	0x08003125
 8002ec8:	080030f5 	.word	0x080030f5
 8002ecc:	080030c5 	.word	0x080030c5
 8002ed0:	08003097 	.word	0x08003097
 8002ed4:	08002cff 	.word	0x08002cff
 8002ed8:	08002cff 	.word	0x08002cff
 8002edc:	08002cff 	.word	0x08002cff
 8002ee0:	08002cff 	.word	0x08002cff
 8002ee4:	08002cff 	.word	0x08002cff
 8002ee8:	08003079 	.word	0x08003079
 8002eec:	08002cff 	.word	0x08002cff
 8002ef0:	08002cff 	.word	0x08002cff
 8002ef4:	0800305d 	.word	0x0800305d
 8002ef8:	08003015 	.word	0x08003015
 8002efc:	08002fd7 	.word	0x08002fd7
 8002f00:	08002f8f 	.word	0x08002f8f
 8002f04:	08002cff 	.word	0x08002cff
 8002f08:	08002cff 	.word	0x08002cff
 8002f0c:	08002f65 	.word	0x08002f65
 8002f10:	08002cff 	.word	0x08002cff
 8002f14:	08002f37 	.word	0x08002f37
      runMode();
 8002f18:	f7fe fefe 	bl	8001d18 <runMode>
 8002f1c:	e744      	b.n	8002da8 <main+0x508>
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 8002f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 8002f22:	bfc8      	it	gt
 8002f24:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 8002f28:	e718      	b.n	8002d5c <main+0x4bc>
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 8002f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 8002f2e:	bfc8      	it	gt
 8002f30:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 8002f34:	e6ec      	b.n	8002d10 <main+0x470>
        motor_real[0].k += 0.1;
 8002f36:	6960      	ldr	r0, [r4, #20]
 8002f38:	f7fd fb06 	bl	8000548 <__aeabi_f2d>
 8002f3c:	a32c      	add	r3, pc, #176	; (adr r3, 8002ff0 <main+0x750>)
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	f7fd f9a3 	bl	800028c <__adddf3>
 8002f46:	f7fd fe4f 	bl	8000be8 <__aeabi_d2f>
 8002f4a:	6160      	str	r0, [r4, #20]
        motor_real[1].k += 0.1;
 8002f4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f4e:	f7fd fafb 	bl	8000548 <__aeabi_f2d>
 8002f52:	a327      	add	r3, pc, #156	; (adr r3, 8002ff0 <main+0x750>)
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f7fd f998 	bl	800028c <__adddf3>
 8002f5c:	f7fd fe44 	bl	8000be8 <__aeabi_d2f>
 8002f60:	62e0      	str	r0, [r4, #44]	; 0x2c
        break;
 8002f62:	e6cc      	b.n	8002cfe <main+0x45e>
        cmd[0].speed += 0.5;
 8002f64:	4b29      	ldr	r3, [pc, #164]	; (800300c <main+0x76c>)
 8002f66:	ed93 7a00 	vldr	s14, [r3]
        cmd[1].speed += 0.5;
 8002f6a:	edd3 7a05 	vldr	s15, [r3, #20]
        cmd[0].speed += 0.5;
 8002f6e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002f72:	ee37 7a26 	vadd.f32	s14, s14, s13
        cmd[1].speed += 0.5;
 8002f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
        cmd[1].speed -= 0.5;
 8002f7a:	461a      	mov	r2, r3
        cmd[0].speed -= 0.5;
 8002f7c:	ed83 7a00 	vstr	s14, [r3]
        cmd[1].speed -= 0.5;
 8002f80:	edc3 7a05 	vstr	s15, [r3, #20]
        cmd[0].timeout_cnt = -1;
 8002f84:	f04f 33ff 	mov.w	r3, #4294967295
 8002f88:	6113      	str	r3, [r2, #16]
        cmd[1].timeout_cnt = -1;
 8002f8a:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 8002f8c:	e6b7      	b.n	8002cfe <main+0x45e>
        pid[0].pid_kd += 0.1;
 8002f8e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002f92:	f7fd fad9 	bl	8000548 <__aeabi_f2d>
 8002f96:	a316      	add	r3, pc, #88	; (adr r3, 8002ff0 <main+0x750>)
 8002f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9c:	f7fd f976 	bl	800028c <__adddf3>
 8002fa0:	f7fd fe22 	bl	8000be8 <__aeabi_d2f>
 8002fa4:	9006      	str	r0, [sp, #24]
 8002fa6:	f8cb 0008 	str.w	r0, [fp, #8]
        pid[1].pid_kd += 0.1;
 8002faa:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
 8002fae:	f7fd facb 	bl	8000548 <__aeabi_f2d>
 8002fb2:	a30f      	add	r3, pc, #60	; (adr r3, 8002ff0 <main+0x750>)
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	f7fd f968 	bl	800028c <__adddf3>
        pid[1].pid_kd -= 0.1;
 8002fbc:	f7fd fe14 	bl	8000be8 <__aeabi_d2f>
 8002fc0:	f8cb 0034 	str.w	r0, [fp, #52]	; 0x34
        p("\nKD %+5.2f\n", pid[0].pid_kd);
 8002fc4:	9806      	ldr	r0, [sp, #24]
 8002fc6:	f7fd fabf 	bl	8000548 <__aeabi_f2d>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4810      	ldr	r0, [pc, #64]	; (8003010 <main+0x770>)
 8002fd0:	f000 ffe6 	bl	8003fa0 <p>
        break;
 8002fd4:	e693      	b.n	8002cfe <main+0x45e>
        cmd[0].speed -= 0.5;
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <main+0x76c>)
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
        cmd[1].speed -= 0.5;
 8002fdc:	edd3 7a05 	vldr	s15, [r3, #20]
        cmd[0].speed -= 0.5;
 8002fe0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002fe4:	ee37 7a66 	vsub.f32	s14, s14, s13
        cmd[1].speed -= 0.5;
 8002fe8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002fec:	e7c5      	b.n	8002f7a <main+0x6da>
 8002fee:	bf00      	nop
 8002ff0:	9999999a 	.word	0x9999999a
 8002ff4:	3fb99999 	.word	0x3fb99999
 8002ff8:	20000560 	.word	0x20000560
 8002ffc:	200003f0 	.word	0x200003f0
 8003000:	20000308 	.word	0x20000308
 8003004:	0800c65c 	.word	0x0800c65c
 8003008:	20001960 	.word	0x20001960
 800300c:	200003b4 	.word	0x200003b4
 8003010:	0800c3d4 	.word	0x0800c3d4
        pid[0].pid_ki += 0.1;
 8003014:	f8db 000c 	ldr.w	r0, [fp, #12]
 8003018:	f7fd fa96 	bl	8000548 <__aeabi_f2d>
 800301c:	a394      	add	r3, pc, #592	; (adr r3, 8003270 <main+0x9d0>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd f933 	bl	800028c <__adddf3>
 8003026:	f7fd fddf 	bl	8000be8 <__aeabi_d2f>
 800302a:	9006      	str	r0, [sp, #24]
 800302c:	f8cb 000c 	str.w	r0, [fp, #12]
        pid[1].pid_ki += 0.1;
 8003030:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 8003034:	f7fd fa88 	bl	8000548 <__aeabi_f2d>
 8003038:	a38d      	add	r3, pc, #564	; (adr r3, 8003270 <main+0x9d0>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd f925 	bl	800028c <__adddf3>
        pid[1].pid_ki -= 0.1;
 8003042:	f7fd fdd1 	bl	8000be8 <__aeabi_d2f>
 8003046:	f8cb 0038 	str.w	r0, [fp, #56]	; 0x38
        p("\nKI %+5.2f\n", pid[0].pid_ki);
 800304a:	9806      	ldr	r0, [sp, #24]
 800304c:	f7fd fa7c 	bl	8000548 <__aeabi_f2d>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4888      	ldr	r0, [pc, #544]	; (8003278 <main+0x9d8>)
 8003056:	f000 ffa3 	bl	8003fa0 <p>
        break;
 800305a:	e650      	b.n	8002cfe <main+0x45e>
        manual_offset_radian += 0.01;
 800305c:	4b87      	ldr	r3, [pc, #540]	; (800327c <main+0x9dc>)
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	f7fd fa72 	bl	8000548 <__aeabi_f2d>
 8003064:	a380      	add	r3, pc, #512	; (adr r3, 8003268 <main+0x9c8>)
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f7fd f90f 	bl	800028c <__adddf3>
 800306e:	f7fd fdbb 	bl	8000be8 <__aeabi_d2f>
 8003072:	4b82      	ldr	r3, [pc, #520]	; (800327c <main+0x9dc>)
 8003074:	6018      	str	r0, [r3, #0]
        break;
 8003076:	e642      	b.n	8002cfe <main+0x45e>
        p("run mode!\n");
 8003078:	4881      	ldr	r0, [pc, #516]	; (8003280 <main+0x9e0>)
 800307a:	f000 ff91 	bl	8003fa0 <p>
        manual_offset_radian = 0;
 800307e:	4b7f      	ldr	r3, [pc, #508]	; (800327c <main+0x9dc>)
 8003080:	edc3 8a00 	vstr	s17, [r3]
        cmd[0].out_v = 0;
 8003084:	4b7f      	ldr	r3, [pc, #508]	; (8003284 <main+0x9e4>)
 8003086:	edc3 8a02 	vstr	s17, [r3, #8]
        cmd[1].out_v = 0;
 800308a:	edc3 8a07 	vstr	s17, [r3, #28]
        enc_calibration_mode = false;
 800308e:	2300      	movs	r3, #0
 8003090:	f888 3000 	strb.w	r3, [r8]
        break;
 8003094:	e633      	b.n	8002cfe <main+0x45e>
        motor_real[0].k -= 0.1;
 8003096:	6960      	ldr	r0, [r4, #20]
 8003098:	f7fd fa56 	bl	8000548 <__aeabi_f2d>
 800309c:	a374      	add	r3, pc, #464	; (adr r3, 8003270 <main+0x9d0>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd f8f1 	bl	8000288 <__aeabi_dsub>
 80030a6:	f7fd fd9f 	bl	8000be8 <__aeabi_d2f>
 80030aa:	6160      	str	r0, [r4, #20]
        motor_real[1].k -= 0.1;
 80030ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80030ae:	f7fd fa4b 	bl	8000548 <__aeabi_f2d>
 80030b2:	a36f      	add	r3, pc, #444	; (adr r3, 8003270 <main+0x9d0>)
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f7fd f8e6 	bl	8000288 <__aeabi_dsub>
 80030bc:	f7fd fd94 	bl	8000be8 <__aeabi_d2f>
 80030c0:	62e0      	str	r0, [r4, #44]	; 0x2c
        break;
 80030c2:	e61c      	b.n	8002cfe <main+0x45e>
        pid[0].pid_kd -= 0.1;
 80030c4:	f8db 0008 	ldr.w	r0, [fp, #8]
 80030c8:	f7fd fa3e 	bl	8000548 <__aeabi_f2d>
 80030cc:	a368      	add	r3, pc, #416	; (adr r3, 8003270 <main+0x9d0>)
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	f7fd f8d9 	bl	8000288 <__aeabi_dsub>
 80030d6:	f7fd fd87 	bl	8000be8 <__aeabi_d2f>
 80030da:	9006      	str	r0, [sp, #24]
 80030dc:	f8cb 0008 	str.w	r0, [fp, #8]
        pid[1].pid_kd -= 0.1;
 80030e0:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
 80030e4:	f7fd fa30 	bl	8000548 <__aeabi_f2d>
 80030e8:	a361      	add	r3, pc, #388	; (adr r3, 8003270 <main+0x9d0>)
 80030ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ee:	f7fd f8cb 	bl	8000288 <__aeabi_dsub>
 80030f2:	e763      	b.n	8002fbc <main+0x71c>
        pid[0].pid_ki -= 0.1;
 80030f4:	f8db 000c 	ldr.w	r0, [fp, #12]
 80030f8:	f7fd fa26 	bl	8000548 <__aeabi_f2d>
 80030fc:	a35c      	add	r3, pc, #368	; (adr r3, 8003270 <main+0x9d0>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd f8c1 	bl	8000288 <__aeabi_dsub>
 8003106:	f7fd fd6f 	bl	8000be8 <__aeabi_d2f>
 800310a:	9006      	str	r0, [sp, #24]
 800310c:	f8cb 000c 	str.w	r0, [fp, #12]
        pid[1].pid_ki -= 0.1;
 8003110:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
 8003114:	f7fd fa18 	bl	8000548 <__aeabi_f2d>
 8003118:	a355      	add	r3, pc, #340	; (adr r3, 8003270 <main+0x9d0>)
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f7fd f8b3 	bl	8000288 <__aeabi_dsub>
 8003122:	e78e      	b.n	8003042 <main+0x7a2>
        pid[0].pid_kp += 0.1;
 8003124:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003128:	f7fd fa0e 	bl	8000548 <__aeabi_f2d>
 800312c:	a350      	add	r3, pc, #320	; (adr r3, 8003270 <main+0x9d0>)
 800312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003132:	f7fd f8ab 	bl	800028c <__adddf3>
 8003136:	f7fd fd57 	bl	8000be8 <__aeabi_d2f>
 800313a:	9006      	str	r0, [sp, #24]
 800313c:	f8cb 0004 	str.w	r0, [fp, #4]
        pid[1].pid_kp += 0.1;
 8003140:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 8003144:	f7fd fa00 	bl	8000548 <__aeabi_f2d>
 8003148:	a349      	add	r3, pc, #292	; (adr r3, 8003270 <main+0x9d0>)
 800314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314e:	f7fd f89d 	bl	800028c <__adddf3>
        pid[1].pid_kp -= 0.1;
 8003152:	f7fd fd49 	bl	8000be8 <__aeabi_d2f>
 8003156:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
        p("\nKP %+5.2f\n", pid[0].pid_kp);
 800315a:	9806      	ldr	r0, [sp, #24]
 800315c:	f7fd f9f4 	bl	8000548 <__aeabi_f2d>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4848      	ldr	r0, [pc, #288]	; (8003288 <main+0x9e8>)
 8003166:	f000 ff1b 	bl	8003fa0 <p>
        break;
 800316a:	e5c8      	b.n	8002cfe <main+0x45e>
        pid[0].pid_kp -= 0.1;
 800316c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8003170:	f7fd f9ea 	bl	8000548 <__aeabi_f2d>
 8003174:	a33e      	add	r3, pc, #248	; (adr r3, 8003270 <main+0x9d0>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f7fd f885 	bl	8000288 <__aeabi_dsub>
 800317e:	f7fd fd33 	bl	8000be8 <__aeabi_d2f>
 8003182:	9006      	str	r0, [sp, #24]
 8003184:	f8cb 0004 	str.w	r0, [fp, #4]
        pid[1].pid_kp -= 0.1;
 8003188:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
 800318c:	f7fd f9dc 	bl	8000548 <__aeabi_f2d>
 8003190:	a337      	add	r3, pc, #220	; (adr r3, 8003270 <main+0x9d0>)
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f7fd f877 	bl	8000288 <__aeabi_dsub>
 800319a:	e7da      	b.n	8003152 <main+0x8b2>
  p("calibration mode!\n");
 800319c:	483b      	ldr	r0, [pc, #236]	; (800328c <main+0x9ec>)
 800319e:	f000 feff 	bl	8003fa0 <p>
  calib_rotation_speed = -calib_rotation_speed;
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <main+0x9f0>)
  manual_offset_radian = 0;
 80031a4:	4a35      	ldr	r2, [pc, #212]	; (800327c <main+0x9dc>)
  calib_rotation_speed = -calib_rotation_speed;
 80031a6:	edd3 7a00 	vldr	s15, [r3]
  manual_offset_radian = 0;
 80031aa:	edc2 8a00 	vstr	s17, [r2]
  calib_rotation_speed = -calib_rotation_speed;
 80031ae:	eef1 7a67 	vneg.f32	s15, s15
  cmd[0].out_v_final = 2.0;
 80031b2:	4a34      	ldr	r2, [pc, #208]	; (8003284 <main+0x9e4>)
  calib_rotation_speed = -calib_rotation_speed;
 80031b4:	edc3 7a00 	vstr	s15, [r3]
  cmd[0].out_v_final = 2.0;
 80031b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031bc:	60d3      	str	r3, [r2, #12]
  cmd[1].out_v_final = 2.0;
 80031be:	6213      	str	r3, [r2, #32]
  enc_calibration_mode = true;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f888 3000 	strb.w	r3, [r8]
}
 80031c6:	e59a      	b.n	8002cfe <main+0x45e>
        manual_offset_radian -= 0.01;
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <main+0x9dc>)
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	f7fd f9bc 	bl	8000548 <__aeabi_f2d>
 80031d0:	a325      	add	r3, pc, #148	; (adr r3, 8003268 <main+0x9c8>)
 80031d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d6:	f7fd f857 	bl	8000288 <__aeabi_dsub>
 80031da:	f7fd fd05 	bl	8000be8 <__aeabi_d2f>
 80031de:	4b27      	ldr	r3, [pc, #156]	; (800327c <main+0x9dc>)
 80031e0:	6018      	str	r0, [r3, #0]
        break;
 80031e2:	e58c      	b.n	8002cfe <main+0x45e>
        p("enter sleep!\n");
 80031e4:	482b      	ldr	r0, [pc, #172]	; (8003294 <main+0x9f4>)
 80031e6:	f000 fedb 	bl	8003fa0 <p>
        forceStop();
 80031ea:	f000 fdbd 	bl	8003d68 <forceStop>
        while (1)
 80031ee:	e7fe      	b.n	80031ee <main+0x94e>
  }else if(isPushedSW3()){
 80031f0:	f7fe fa5a 	bl	80016a8 <isPushedSW3>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	f43f ac14 	beq.w	8002a22 <main+0x182>
    p("motor calibration mode!!\n");
 80031fa:	4827      	ldr	r0, [pc, #156]	; (8003298 <main+0x9f8>)
 80031fc:	f000 fed0 	bl	8003fa0 <p>
    motor_calibration_cnt = MOTOR_CALIB_INIT_CNT;
 8003200:	4b26      	ldr	r3, [pc, #152]	; (800329c <main+0x9fc>)
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	601a      	str	r2, [r3, #0]
    while(isPushedSW3())
 8003208:	f7fe fa4e 	bl	80016a8 <isPushedSW3>
 800320c:	2800      	cmp	r0, #0
 800320e:	d1fb      	bne.n	8003208 <main+0x968>
 8003210:	e407      	b.n	8002a22 <main+0x182>
  } else if (isPushedSW2()) {
 8003212:	f7fe fa3d 	bl	8001690 <isPushedSW2>
 8003216:	2800      	cmp	r0, #0
 8003218:	f43f abf5 	beq.w	8002a06 <main+0x166>
    flash.board_id = 1;
 800321c:	2001      	movs	r0, #1
 800321e:	60a8      	str	r0, [r5, #8]
    writeCanBoardID(flash.board_id);
 8003220:	f7fe f9f0 	bl	8001604 <writeCanBoardID>
    p("sed board id %d\n", flash.board_id);
 8003224:	481e      	ldr	r0, [pc, #120]	; (80032a0 <main+0xa00>)
 8003226:	68a9      	ldr	r1, [r5, #8]
 8003228:	f000 feba 	bl	8003fa0 <p>
    HAL_Delay(1000);
 800322c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003230:	f000 ffa6 	bl	8004180 <HAL_Delay>
 8003234:	f7ff bbe7 	b.w	8002a06 <main+0x166>
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 8003238:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800323c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	f53f abab 	bmi.w	800299e <main+0xfe>
      motor_param[i].voltage_per_rps = V_PER_RPS_DEFAULT;
 8003248:	eddf 7a16 	vldr	s15, [pc, #88]	; 80032a4 <main+0xa04>
 800324c:	f7ff bbab 	b.w	80029a6 <main+0x106>
    if (flash.rps_per_v[i] > 1 || flash.rps_per_v[i] < 10) {
 8003250:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003254:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	f53f ab76 	bmi.w	800294c <main+0xac>
      motor_param[i].voltage_per_rps = V_PER_RPS_DEFAULT;
 8003260:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80032a4 <main+0xa04>
 8003264:	f7ff bb76 	b.w	8002954 <main+0xb4>
 8003268:	47ae147b 	.word	0x47ae147b
 800326c:	3f847ae1 	.word	0x3f847ae1
 8003270:	9999999a 	.word	0x9999999a
 8003274:	3fb99999 	.word	0x3fb99999
 8003278:	0800c3c8 	.word	0x0800c3c8
 800327c:	200003f8 	.word	0x200003f8
 8003280:	0800c3b0 	.word	0x0800c3b0
 8003284:	200003b4 	.word	0x200003b4
 8003288:	0800c3bc 	.word	0x0800c3bc
 800328c:	0800c39c 	.word	0x0800c39c
 8003290:	20000000 	.word	0x20000000
 8003294:	0800c3e0 	.word	0x0800c3e0
 8003298:	0800c510 	.word	0x0800c510
 800329c:	200003fc 	.word	0x200003fc
 80032a0:	0800c4e4 	.word	0x0800c4e4
 80032a4:	3e19999a 	.word	0x3e19999a

080032a8 <Error_Handler>:
 80032a8:	b672      	cpsid	i
  while (1) {
 80032aa:	e7fe      	b.n	80032aa <Error_Handler+0x2>

080032ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032ac:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80032ae:	4811      	ldr	r0, [pc, #68]	; (80032f4 <MX_SPI1_Init+0x48>)
 80032b0:	4c11      	ldr	r4, [pc, #68]	; (80032f8 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032b2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032b6:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032ba:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032bc:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80032be:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032c2:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032c4:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032c6:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80032ca:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032ce:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80032d2:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80032d4:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032d6:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032da:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032de:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80032e2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032e4:	f003 fbfc 	bl	8006ae0 <HAL_SPI_Init>
 80032e8:	b900      	cbnz	r0, 80032ec <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032ea:	bd10      	pop	{r4, pc}
 80032ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80032f0:	f7ff bfda 	b.w	80032a8 <Error_Handler>
 80032f4:	200004b0 	.word	0x200004b0
 80032f8:	40013000 	.word	0x40013000

080032fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032fc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80032fe:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <HAL_SPI_MspInit+0x7c>)
 8003300:	6801      	ldr	r1, [r0, #0]
{
 8003302:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8003306:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800330c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003310:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8003312:	d001      	beq.n	8003318 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003314:	b009      	add	sp, #36	; 0x24
 8003316:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003318:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800331c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003320:	2403      	movs	r4, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003322:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	4815      	ldr	r0, [pc, #84]	; (800337c <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003326:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800332a:	619a      	str	r2, [r3, #24]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003332:	9200      	str	r2, [sp, #0]
 8003334:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003336:	695a      	ldr	r2, [r3, #20]
 8003338:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800333c:	615a      	str	r2, [r3, #20]
 800333e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003340:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003346:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003348:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800334c:	2228      	movs	r2, #40	; 0x28
 800334e:	2302      	movs	r3, #2
 8003350:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003354:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003358:	f002 fdb0 	bl	8005ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800335e:	2210      	movs	r2, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	4806      	ldr	r0, [pc, #24]	; (800337c <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003362:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003364:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003366:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800336a:	e9cd 4505 	strd	r4, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336e:	f002 fda5 	bl	8005ebc <HAL_GPIO_Init>
}
 8003372:	b009      	add	sp, #36	; 0x24
 8003374:	bd30      	pop	{r4, r5, pc}
 8003376:	bf00      	nop
 8003378:	40013000 	.word	0x40013000
 800337c:	48000400 	.word	0x48000400

08003380 <readRegisterMA702>:
}

volatile static uint32_t delay_cnt = 0;

uint8_t readRegisterMA702(uint8_t enc, uint8_t address)
{
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	460e      	mov	r6, r1
  if (enc == 0)
 8003384:	4604      	mov	r4, r0
 8003386:	2800      	cmp	r0, #0
 8003388:	d14c      	bne.n	8003424 <readRegisterMA702+0xa4>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800338a:	482d      	ldr	r0, [pc, #180]	; (8003440 <readRegisterMA702+0xc0>)
 800338c:	4622      	mov	r2, r4
 800338e:	2140      	movs	r1, #64	; 0x40
 8003390:	f002 fe82 	bl	8006098 <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }

  hspi1.Instance->DR = 0x4000 | ((address & 0x1F) << 8);
 8003394:	4d2b      	ldr	r5, [pc, #172]	; (8003444 <readRegisterMA702+0xc4>)
 8003396:	0236      	lsls	r6, r6, #8
 8003398:	682a      	ldr	r2, [r5, #0]
 800339a:	f406 56f8 	and.w	r6, r6, #7936	; 0x1f00
 800339e:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80033a2:	60d6      	str	r6, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80033a4:	6893      	ldr	r3, [r2, #8]
 80033a6:	07d9      	lsls	r1, r3, #31
 80033a8:	d5fc      	bpl.n	80033a4 <readRegisterMA702+0x24>
  {
  }
  if (enc == 0)
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80033aa:	4825      	ldr	r0, [pc, #148]	; (8003440 <readRegisterMA702+0xc0>)
 80033ac:	2201      	movs	r2, #1
  if (enc == 0)
 80033ae:	bb24      	cbnz	r4, 80033fa <readRegisterMA702+0x7a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80033b0:	2140      	movs	r1, #64	; 0x40
 80033b2:	f002 fe71 	bl	8006098 <HAL_GPIO_WritePin>

    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++)
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <readRegisterMA702+0xc8>)
 80033b8:	601c      	str	r4, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2a01      	cmp	r2, #1
 80033be:	d805      	bhi.n	80033cc <readRegisterMA702+0x4c>
 80033c0:	6819      	ldr	r1, [r3, #0]
 80033c2:	3101      	adds	r1, #1
 80033c4:	6019      	str	r1, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2a01      	cmp	r2, #1
 80033ca:	d9f9      	bls.n	80033c0 <readRegisterMA702+0x40>
    {
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80033cc:	481c      	ldr	r0, [pc, #112]	; (8003440 <readRegisterMA702+0xc0>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	f002 fe61 	bl	8006098 <HAL_GPIO_WritePin>
    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++)
    {
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }
  uint16_t temp = hspi1.Instance->DR;
 80033d6:	682a      	ldr	r2, [r5, #0]

  hspi1.Instance->DR = 0;
 80033d8:	2300      	movs	r3, #0
  uint16_t temp = hspi1.Instance->DR;
 80033da:	68d1      	ldr	r1, [r2, #12]
  hspi1.Instance->DR = 0;
 80033dc:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80033de:	6893      	ldr	r3, [r2, #8]
 80033e0:	07db      	lsls	r3, r3, #31
 80033e2:	d5fc      	bpl.n	80033de <readRegisterMA702+0x5e>
  {
  }

  if (enc == 0)
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80033e4:	4816      	ldr	r0, [pc, #88]	; (8003440 <readRegisterMA702+0xc0>)
 80033e6:	2201      	movs	r2, #1
  if (enc == 0)
 80033e8:	bb14      	cbnz	r4, 8003430 <readRegisterMA702+0xb0>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80033ea:	2140      	movs	r1, #64	; 0x40
 80033ec:	f002 fe54 	bl	8006098 <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
  }

  return hspi1.Instance->DR >> 8;
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	68d8      	ldr	r0, [r3, #12]
}
 80033f4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80033f8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	f002 fe4c 	bl	8006098 <HAL_GPIO_WritePin>
    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++)
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <readRegisterMA702+0xc8>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2a01      	cmp	r2, #1
 800340a:	d805      	bhi.n	8003418 <readRegisterMA702+0x98>
 800340c:	6819      	ldr	r1, [r3, #0]
 800340e:	3101      	adds	r1, #1
 8003410:	6019      	str	r1, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2a01      	cmp	r2, #1
 8003416:	d9f9      	bls.n	800340c <readRegisterMA702+0x8c>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8003418:	4809      	ldr	r0, [pc, #36]	; (8003440 <readRegisterMA702+0xc0>)
 800341a:	2200      	movs	r2, #0
 800341c:	2180      	movs	r1, #128	; 0x80
 800341e:	f002 fe3b 	bl	8006098 <HAL_GPIO_WritePin>
 8003422:	e7d8      	b.n	80033d6 <readRegisterMA702+0x56>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8003424:	4806      	ldr	r0, [pc, #24]	; (8003440 <readRegisterMA702+0xc0>)
 8003426:	2200      	movs	r2, #0
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	f002 fe35 	bl	8006098 <HAL_GPIO_WritePin>
 800342e:	e7b1      	b.n	8003394 <readRegisterMA702+0x14>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003430:	2180      	movs	r1, #128	; 0x80
 8003432:	f002 fe31 	bl	8006098 <HAL_GPIO_WritePin>
  return hspi1.Instance->DR >> 8;
 8003436:	682b      	ldr	r3, [r5, #0]
 8003438:	68d8      	ldr	r0, [r3, #12]
}
 800343a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800343e:	bd70      	pop	{r4, r5, r6, pc}
 8003440:	48000400 	.word	0x48000400
 8003444:	200004b0 	.word	0x200004b0
 8003448:	200004ac 	.word	0x200004ac
 800344c:	00000000 	.word	0x00000000

08003450 <updateMA702_M0>:

  return hspi1.Instance->DR >> 8;
}

inline void updateMA702_M0(void)
{
 8003450:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003452:	2200      	movs	r2, #0
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	4830      	ldr	r0, [pc, #192]	; (8003518 <updateMA702_M0+0xc8>)

  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 8003458:	4c30      	ldr	r4, [pc, #192]	; (800351c <updateMA702_M0+0xcc>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800345a:	f002 fe1d 	bl	8006098 <HAL_GPIO_WritePin>

  ma702[1].enc_raw = hspi1.Instance->DR;
 800345e:	4b30      	ldr	r3, [pc, #192]	; (8003520 <updateMA702_M0+0xd0>)
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 8003460:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  ma702[1].enc_raw = hspi1.Instance->DR;
 8003462:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 8003464:	2300      	movs	r3, #0
  ma702[1].enc_raw = hspi1.Instance->DR;
 8003466:	68d1      	ldr	r1, [r2, #12]
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 8003468:	6325      	str	r5, [r4, #48]	; 0x30
  hspi1.Instance->DR = 0;
 800346a:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800346c:	6893      	ldr	r3, [r2, #8]
 800346e:	07db      	lsls	r3, r3, #31
 8003470:	d5fc      	bpl.n	800346c <updateMA702_M0+0x1c>
  {
  }
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8003472:	68d6      	ldr	r6, [r2, #12]

  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 8003474:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <updateMA702_M0+0xd4>)
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8003476:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800347a:	4016      	ands	r6, r2
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 800347c:	fb83 2306 	smull	r2, r3, r3, r6
 8003480:	4433      	add	r3, r6
 8003482:	f241 5255 	movw	r2, #5461	; 0x1555
 8003486:	131b      	asrs	r3, r3, #12
 8003488:	fb02 6313 	mls	r3, r2, r3, r6
 800348c:	1ad2      	subs	r2, r2, r3
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 800348e:	ee07 2a90 	vmov	s15, r2
 8003492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003496:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003528 <updateMA702_M0+0xd8>
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 800349a:	62e2      	str	r2, [r4, #44]	; 0x2c
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 800349c:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80034a0:	62a6      	str	r6, [r4, #40]	; 0x28
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 80034a2:	ee17 0a90 	vmov	r0, s15
 80034a6:	f7fd f84f 	bl	8000548 <__aeabi_f2d>
 80034aa:	a319      	add	r3, pc, #100	; (adr r3, 8003510 <updateMA702_M0+0xc0>)
 80034ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b0:	f7fd f8a2 	bl	80005f8 <__aeabi_dmul>
 80034b4:	f7fd fb98 	bl	8000be8 <__aeabi_d2f>
  int temp = ma702[enc].pre_enc_raw - ma702[enc].enc_raw;
 80034b8:	1bad      	subs	r5, r5, r6
  if (temp < -HARF_OF_ENC_CNT_MAX)
 80034ba:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 80034be:	6260      	str	r0, [r4, #36]	; 0x24
  if (temp < -HARF_OF_ENC_CNT_MAX)
 80034c0:	da1d      	bge.n	80034fe <updateMA702_M0+0xae>
    temp += ENC_CNT_MAX;
 80034c2:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
  if (abs(ma702[enc].diff_max) < abs(temp))
 80034c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  ma702[enc].diff_enc = temp;
 80034c8:	6365      	str	r5, [r4, #52]	; 0x34
  if (abs(ma702[enc].diff_max) < abs(temp))
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 80034d0:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 80034d4:	bfb8      	it	lt
 80034d6:	425b      	neglt	r3, r3
 80034d8:	4293      	cmp	r3, r2
  if (abs(ma702[enc].diff_min) > abs(temp))
 80034da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  updateDiff(1);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80034dc:	480e      	ldr	r0, [pc, #56]	; (8003518 <updateMA702_M0+0xc8>)
    ma702[enc].diff_max_cnt = ma702[enc].enc_raw;
 80034de:	bfb8      	it	lt
 80034e0:	e9c4 560f 	strdlt	r5, r6, [r4, #60]	; 0x3c
  if (abs(ma702[enc].diff_min) > abs(temp))
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	bfb8      	it	lt
 80034e8:	425b      	neglt	r3, r3
 80034ea:	429a      	cmp	r2, r3
    ma702[enc].diff_min = temp;
 80034ec:	bfbc      	itt	lt
 80034ee:	63a5      	strlt	r5, [r4, #56]	; 0x38
    ma702[enc].diff_min_cnt = ma702[enc].enc_raw;
 80034f0:	6466      	strlt	r6, [r4, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80034f2:	2201      	movs	r2, #1
}
 80034f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	f002 bdcd 	b.w	8006098 <HAL_GPIO_WritePin>
  else if (temp > HARF_OF_ENC_CNT_MAX)
 80034fe:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 8003502:	bfc8      	it	gt
 8003504:	f5a5 3580 	subgt.w	r5, r5, #65536	; 0x10000
 8003508:	e7dd      	b.n	80034c6 <updateMA702_M0+0x76>
 800350a:	bf00      	nop
 800350c:	f3af 8000 	nop.w
 8003510:	54442d18 	.word	0x54442d18
 8003514:	400921fb 	.word	0x400921fb
 8003518:	48000400 	.word	0x48000400
 800351c:	20000514 	.word	0x20000514
 8003520:	200004b0 	.word	0x200004b0
 8003524:	c003000d 	.word	0xc003000d
 8003528:	39c00300 	.word	0x39c00300
 800352c:	00000000 	.word	0x00000000

08003530 <updateMA702_M1>:

inline void updateMA702_M1(void)
{
 8003530:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8003532:	2200      	movs	r2, #0
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	4830      	ldr	r0, [pc, #192]	; (80035f8 <updateMA702_M1+0xc8>)

  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8003538:	4c30      	ldr	r4, [pc, #192]	; (80035fc <updateMA702_M1+0xcc>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800353a:	f002 fdad 	bl	8006098 <HAL_GPIO_WritePin>

  ma702[0].enc_raw = hspi1.Instance->DR;
 800353e:	4b30      	ldr	r3, [pc, #192]	; (8003600 <updateMA702_M1+0xd0>)
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8003540:	6865      	ldr	r5, [r4, #4]
  ma702[0].enc_raw = hspi1.Instance->DR;
 8003542:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 8003544:	2300      	movs	r3, #0
  ma702[0].enc_raw = hspi1.Instance->DR;
 8003546:	68d1      	ldr	r1, [r2, #12]
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8003548:	60e5      	str	r5, [r4, #12]
  hspi1.Instance->DR = 0;
 800354a:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800354c:	6893      	ldr	r3, [r2, #8]
 800354e:	07db      	lsls	r3, r3, #31
 8003550:	d5fc      	bpl.n	800354c <updateMA702_M1+0x1c>
  {
  }
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8003552:	68d6      	ldr	r6, [r2, #12]

  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 8003554:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <updateMA702_M1+0xd4>)
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8003556:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800355a:	4016      	ands	r6, r2
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 800355c:	fb83 2306 	smull	r2, r3, r3, r6
 8003560:	4433      	add	r3, r6
 8003562:	f241 5255 	movw	r2, #5461	; 0x1555
 8003566:	131b      	asrs	r3, r3, #12
 8003568:	fb02 6313 	mls	r3, r2, r3, r6
 800356c:	1ad2      	subs	r2, r2, r3
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 800356e:	ee07 2a90 	vmov	s15, r2
 8003572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003576:	eddf 7a24 	vldr	s15, [pc, #144]	; 8003608 <updateMA702_M1+0xd8>
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 800357a:	60a2      	str	r2, [r4, #8]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 800357c:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8003580:	6066      	str	r6, [r4, #4]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 8003582:	ee17 0a90 	vmov	r0, s15
 8003586:	f7fc ffdf 	bl	8000548 <__aeabi_f2d>
 800358a:	a319      	add	r3, pc, #100	; (adr r3, 80035f0 <updateMA702_M1+0xc0>)
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f7fd f832 	bl	80005f8 <__aeabi_dmul>
 8003594:	f7fd fb28 	bl	8000be8 <__aeabi_d2f>
  int temp = ma702[enc].pre_enc_raw - ma702[enc].enc_raw;
 8003598:	1bad      	subs	r5, r5, r6
  if (temp < -HARF_OF_ENC_CNT_MAX)
 800359a:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 800359e:	6020      	str	r0, [r4, #0]
  if (temp < -HARF_OF_ENC_CNT_MAX)
 80035a0:	da1d      	bge.n	80035de <updateMA702_M1+0xae>
    temp += ENC_CNT_MAX;
 80035a2:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
  if (abs(ma702[enc].diff_max) < abs(temp))
 80035a6:	69a3      	ldr	r3, [r4, #24]
  ma702[enc].diff_enc = temp;
 80035a8:	6125      	str	r5, [r4, #16]
  if (abs(ma702[enc].diff_max) < abs(temp))
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 80035b0:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 80035b4:	bfb8      	it	lt
 80035b6:	425b      	neglt	r3, r3
 80035b8:	4293      	cmp	r3, r2
  if (abs(ma702[enc].diff_min) > abs(temp))
 80035ba:	6963      	ldr	r3, [r4, #20]

  updateDiff(0);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80035bc:	480e      	ldr	r0, [pc, #56]	; (80035f8 <updateMA702_M1+0xc8>)
    ma702[enc].diff_max_cnt = ma702[enc].enc_raw;
 80035be:	bfb8      	it	lt
 80035c0:	e9c4 5606 	strdlt	r5, r6, [r4, #24]
  if (abs(ma702[enc].diff_min) > abs(temp))
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bfb8      	it	lt
 80035c8:	425b      	neglt	r3, r3
 80035ca:	429a      	cmp	r2, r3
    ma702[enc].diff_min = temp;
 80035cc:	bfbc      	itt	lt
 80035ce:	6165      	strlt	r5, [r4, #20]
    ma702[enc].diff_min_cnt = ma702[enc].enc_raw;
 80035d0:	6226      	strlt	r6, [r4, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80035d2:	2201      	movs	r2, #1
}
 80035d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	f002 bd5d 	b.w	8006098 <HAL_GPIO_WritePin>
  else if (temp > HARF_OF_ENC_CNT_MAX)
 80035de:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 80035e2:	bfc8      	it	gt
 80035e4:	f5a5 3580 	subgt.w	r5, r5, #65536	; 0x10000
 80035e8:	e7dd      	b.n	80035a6 <updateMA702_M1+0x76>
 80035ea:	bf00      	nop
 80035ec:	f3af 8000 	nop.w
 80035f0:	54442d18 	.word	0x54442d18
 80035f4:	400921fb 	.word	0x400921fb
 80035f8:	48000400 	.word	0x48000400
 80035fc:	20000514 	.word	0x20000514
 8003600:	200004b0 	.word	0x200004b0
 8003604:	c003000d 	.word	0xc003000d
 8003608:	39c00300 	.word	0x39c00300

0800360c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_MspInit+0x2c>)
 800360e:	699a      	ldr	r2, [r3, #24]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	619a      	str	r2, [r3, #24]
 8003616:	699a      	ldr	r2, [r3, #24]
{
 8003618:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800361a:	f002 0201 	and.w	r2, r2, #1
 800361e:	9200      	str	r2, [sp, #0]
 8003620:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003628:	61da      	str	r2, [r3, #28]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003634:	b002      	add	sp, #8
 8003636:	4770      	bx	lr
 8003638:	40021000 	.word	0x40021000

0800363c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800363c:	e7fe      	b.n	800363c <NMI_Handler>
 800363e:	bf00      	nop

08003640 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <HardFault_Handler>
 8003642:	bf00      	nop

08003644 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003644:	e7fe      	b.n	8003644 <MemManage_Handler>
 8003646:	bf00      	nop

08003648 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003648:	e7fe      	b.n	8003648 <BusFault_Handler>
 800364a:	bf00      	nop

0800364c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800364c:	e7fe      	b.n	800364c <UsageFault_Handler>
 800364e:	bf00      	nop

08003650 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <DebugMon_Handler>:
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop

08003658 <PendSV_Handler>:
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800365c:	f000 bd7e 	b.w	800415c <HAL_IncTick>

08003660 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <DMA1_Channel4_IRQHandler+0x8>)
 8003662:	f002 ba4f 	b.w	8005b04 <HAL_DMA_IRQHandler>
 8003666:	bf00      	nop
 8003668:	2000191c 	.word	0x2000191c

0800366c <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <USB_HP_CAN_TX_IRQHandler+0x8>)
 800366e:	f001 bfb7 	b.w	80055e0 <HAL_CAN_IRQHandler>
 8003672:	bf00      	nop
 8003674:	20000308 	.word	0x20000308

08003678 <USB_LP_CAN_RX0_IRQHandler>:
 8003678:	4801      	ldr	r0, [pc, #4]	; (8003680 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 800367a:	f001 bfb1 	b.w	80055e0 <HAL_CAN_IRQHandler>
 800367e:	bf00      	nop
 8003680:	20000308 	.word	0x20000308

08003684 <CAN_RX1_IRQHandler>:
 8003684:	4801      	ldr	r0, [pc, #4]	; (800368c <CAN_RX1_IRQHandler+0x8>)
 8003686:	f001 bfab 	b.w	80055e0 <HAL_CAN_IRQHandler>
 800368a:	bf00      	nop
 800368c:	20000308 	.word	0x20000308

08003690 <CAN_SCE_IRQHandler>:
 8003690:	4801      	ldr	r0, [pc, #4]	; (8003698 <CAN_SCE_IRQHandler+0x8>)
 8003692:	f001 bfa5 	b.w	80055e0 <HAL_CAN_IRQHandler>
 8003696:	bf00      	nop
 8003698:	20000308 	.word	0x20000308

0800369c <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800369c:	4801      	ldr	r0, [pc, #4]	; (80036a4 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800369e:	f003 bd1b 	b.w	80070d8 <HAL_TIM_IRQHandler>
 80036a2:	bf00      	nop
 80036a4:	20000560 	.word	0x20000560

080036a8 <TIM1_CC_IRQHandler>:
 80036a8:	4801      	ldr	r0, [pc, #4]	; (80036b0 <TIM1_CC_IRQHandler+0x8>)
 80036aa:	f003 bd15 	b.w	80070d8 <HAL_TIM_IRQHandler>
 80036ae:	bf00      	nop
 80036b0:	20000560 	.word	0x20000560

080036b4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036b4:	4801      	ldr	r0, [pc, #4]	; (80036bc <USART1_IRQHandler+0x8>)
 80036b6:	f004 b94f 	b.w	8007958 <HAL_UART_IRQHandler>
 80036ba:	bf00      	nop
 80036bc:	20001960 	.word	0x20001960

080036c0 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80036c0:	4801      	ldr	r0, [pc, #4]	; (80036c8 <TIM8_UP_IRQHandler+0x8>)
 80036c2:	f003 bd09 	b.w	80070d8 <HAL_TIM_IRQHandler>
 80036c6:	bf00      	nop
 80036c8:	200005ac 	.word	0x200005ac

080036cc <TIM8_CC_IRQHandler>:
 80036cc:	4801      	ldr	r0, [pc, #4]	; (80036d4 <TIM8_CC_IRQHandler+0x8>)
 80036ce:	f003 bd03 	b.w	80070d8 <HAL_TIM_IRQHandler>
 80036d2:	bf00      	nop
 80036d4:	200005ac 	.word	0x200005ac

080036d8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80036d8:	2001      	movs	r0, #1
 80036da:	4770      	bx	lr

080036dc <_kill>:

int _kill(int pid, int sig)
{
 80036dc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80036de:	f006 fcbf 	bl	800a060 <__errno>
 80036e2:	2316      	movs	r3, #22
 80036e4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80036e6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ea:	bd08      	pop	{r3, pc}

080036ec <_exit>:

void _exit (int status)
{
 80036ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80036ee:	f006 fcb7 	bl	800a060 <__errno>
 80036f2:	2316      	movs	r3, #22
 80036f4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80036f6:	e7fe      	b.n	80036f6 <_exit+0xa>

080036f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036f8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fa:	1e16      	subs	r6, r2, #0
 80036fc:	dd07      	ble.n	800370e <_read+0x16>
 80036fe:	460c      	mov	r4, r1
 8003700:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003702:	f3af 8000 	nop.w
 8003706:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800370a:	42a5      	cmp	r5, r4
 800370c:	d1f9      	bne.n	8003702 <_read+0xa>
	}

return len;
}
 800370e:	4630      	mov	r0, r6
 8003710:	bd70      	pop	{r4, r5, r6, pc}
 8003712:	bf00      	nop

08003714 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003714:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003716:	1e16      	subs	r6, r2, #0
 8003718:	dd07      	ble.n	800372a <_write+0x16>
 800371a:	460c      	mov	r4, r1
 800371c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800371e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003722:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003726:	42ac      	cmp	r4, r5
 8003728:	d1f9      	bne.n	800371e <_write+0xa>
	}
	return len;
}
 800372a:	4630      	mov	r0, r6
 800372c:	bd70      	pop	{r4, r5, r6, pc}
 800372e:	bf00      	nop

08003730 <_close>:

int _close(int file)
{
	return -1;
}
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800373c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800373e:	2000      	movs	r0, #0
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003744:	2001      	movs	r0, #1
 8003746:	4770      	bx	lr

08003748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003748:	2000      	movs	r0, #0
 800374a:	4770      	bx	lr

0800374c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800374c:	490c      	ldr	r1, [pc, #48]	; (8003780 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800374e:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8003750:	680b      	ldr	r3, [r1, #0]
{
 8003752:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003754:	4c0c      	ldr	r4, [pc, #48]	; (8003788 <_sbrk+0x3c>)
 8003756:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003758:	b12b      	cbz	r3, 8003766 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800375a:	4418      	add	r0, r3
 800375c:	4290      	cmp	r0, r2
 800375e:	d807      	bhi.n	8003770 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003760:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <_sbrk+0x40>)
 8003768:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800376a:	4418      	add	r0, r3
 800376c:	4290      	cmp	r0, r2
 800376e:	d9f7      	bls.n	8003760 <_sbrk+0x14>
    errno = ENOMEM;
 8003770:	f006 fc76 	bl	800a060 <__errno>
 8003774:	230c      	movs	r3, #12
 8003776:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
}
 800377c:	4618      	mov	r0, r3
 800377e:	bd10      	pop	{r4, pc}
 8003780:	2000055c 	.word	0x2000055c
 8003784:	20008000 	.word	0x20008000
 8003788:	00000400 	.word	0x00000400
 800378c:	20001e88 	.word	0x20001e88

08003790 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003790:	4a03      	ldr	r2, [pc, #12]	; (80037a0 <SystemInit+0x10>)
 8003792:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003796:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800379a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80037a4:	b500      	push	{lr}

  if(tim_pwmHandle->Instance==TIM1)
 80037a6:	4a22      	ldr	r2, [pc, #136]	; (8003830 <HAL_TIM_PWM_MspInit+0x8c>)
 80037a8:	6803      	ldr	r3, [r0, #0]
 80037aa:	4293      	cmp	r3, r2
{
 80037ac:	b083      	sub	sp, #12
  if(tim_pwmHandle->Instance==TIM1)
 80037ae:	d005      	beq.n	80037bc <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM8)
 80037b0:	4a20      	ldr	r2, [pc, #128]	; (8003834 <HAL_TIM_PWM_MspInit+0x90>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d01f      	beq.n	80037f6 <HAL_TIM_PWM_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80037b6:	b003      	add	sp, #12
 80037b8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <HAL_TIM_PWM_MspInit+0x94>)
 80037be:	6998      	ldr	r0, [r3, #24]
 80037c0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80037c4:	6198      	str	r0, [r3, #24]
 80037c6:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80037c8:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80037ce:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037d0:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80037d2:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037d4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80037d6:	f002 f851 	bl	800587c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80037da:	2019      	movs	r0, #25
 80037dc:	f002 f88c 	bl	80058f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80037e0:	2200      	movs	r2, #0
 80037e2:	201b      	movs	r0, #27
 80037e4:	4611      	mov	r1, r2
 80037e6:	f002 f849 	bl	800587c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80037ea:	201b      	movs	r0, #27
}
 80037ec:	b003      	add	sp, #12
 80037ee:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80037f2:	f002 b881 	b.w	80058f8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80037f6:	4b10      	ldr	r3, [pc, #64]	; (8003838 <HAL_TIM_PWM_MspInit+0x94>)
 80037f8:	6998      	ldr	r0, [r3, #24]
 80037fa:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80037fe:	6198      	str	r0, [r3, #24]
 8003800:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8003802:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8003808:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 800380a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 800380c:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM8_CLK_ENABLE();
 800380e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8003810:	f002 f834 	bl	800587c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8003814:	202c      	movs	r0, #44	; 0x2c
 8003816:	f002 f86f 	bl	80058f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	202e      	movs	r0, #46	; 0x2e
 800381e:	4611      	mov	r1, r2
 8003820:	f002 f82c 	bl	800587c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003824:	202e      	movs	r0, #46	; 0x2e
}
 8003826:	b003      	add	sp, #12
 8003828:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800382c:	f002 b864 	b.w	80058f8 <HAL_NVIC_EnableIRQ>
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40013400 	.word	0x40013400
 8003838:	40021000 	.word	0x40021000

0800383c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800383c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 800383e:	6803      	ldr	r3, [r0, #0]
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <HAL_TIM_MspPostInit+0xa8>)
{
 8003842:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM1)
 8003846:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800384c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003850:	9408      	str	r4, [sp, #32]
  if(timHandle->Instance==TIM1)
 8003852:	d004      	beq.n	800385e <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8003854:	4a24      	ldr	r2, [pc, #144]	; (80038e8 <HAL_TIM_MspPostInit+0xac>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d02d      	beq.n	80038b6 <HAL_TIM_MspPostInit+0x7a>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800385a:	b00b      	add	sp, #44	; 0x2c
 800385c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_TIM_MspPostInit+0xb0>)
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003866:	615a      	str	r2, [r3, #20]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800386e:	9201      	str	r2, [sp, #4]
 8003870:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003878:	615a      	str	r2, [r3, #20]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003880:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003882:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003884:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003886:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800388a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800388c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003890:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003894:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003896:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003898:	f002 fb10 	bl	8005ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800389c:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a0:	4813      	ldr	r0, [pc, #76]	; (80038f0 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80038a2:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038a4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038aa:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ae:	f002 fb05 	bl	8005ebc <HAL_GPIO_Init>
}
 80038b2:	b00b      	add	sp, #44	; 0x2c
 80038b4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038b6:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038b8:	480e      	ldr	r0, [pc, #56]	; (80038f4 <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80038c0:	615a      	str	r2, [r3, #20]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80038ca:	f44f 54ee 	mov.w	r4, #7616	; 0x1dc0
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80038ce:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80038d0:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038d2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80038d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d8:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80038da:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038dc:	f002 faee 	bl	8005ebc <HAL_GPIO_Init>
}
 80038e0:	b00b      	add	sp, #44	; 0x2c
 80038e2:	bd30      	pop	{r4, r5, pc}
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40013400 	.word	0x40013400
 80038ec:	40021000 	.word	0x40021000
 80038f0:	48000400 	.word	0x48000400
 80038f4:	48000800 	.word	0x48000800

080038f8 <MX_TIM1_Init>:
{
 80038f8:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038fa:	2400      	movs	r4, #0
{
 80038fc:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80038fe:	222c      	movs	r2, #44	; 0x2c
 8003900:	4621      	mov	r1, r4
 8003902:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003904:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003908:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800390c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003910:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003914:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003916:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003918:	f006 fb50 	bl	8009fbc <memset>
  htim1.Instance = TIM1;
 800391c:	4838      	ldr	r0, [pc, #224]	; (8003a00 <MX_TIM1_Init+0x108>)
  htim1.Init.Prescaler = 1;
 800391e:	4a39      	ldr	r2, [pc, #228]	; (8003a04 <MX_TIM1_Init+0x10c>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003920:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 8003922:	2301      	movs	r3, #1
 8003924:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 1800;
 8003928:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800392c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8003930:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003934:	f003 fa20 	bl	8006d78 <HAL_TIM_PWM_Init>
 8003938:	2800      	cmp	r0, #0
 800393a:	d144      	bne.n	80039c6 <MX_TIM1_Init+0xce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800393c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003940:	2270      	movs	r2, #112	; 0x70
 8003942:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003946:	482e      	ldr	r0, [pc, #184]	; (8003a00 <MX_TIM1_Init+0x108>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003948:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800394a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800394c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800394e:	f003 fe9d 	bl	800768c <HAL_TIMEx_MasterConfigSynchronization>
 8003952:	2800      	cmp	r0, #0
 8003954:	d14a      	bne.n	80039ec <MX_TIM1_Init+0xf4>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003956:	2000      	movs	r0, #0
 8003958:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 800395a:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800395c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003960:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003962:	4827      	ldr	r0, [pc, #156]	; (8003a00 <MX_TIM1_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003964:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003966:	a904      	add	r1, sp, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003968:	e9cd 2205 	strd	r2, r2, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800396c:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800396e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003970:	f003 fcaa 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 8003974:	2800      	cmp	r0, #0
 8003976:	d136      	bne.n	80039e6 <MX_TIM1_Init+0xee>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003978:	4821      	ldr	r0, [pc, #132]	; (8003a00 <MX_TIM1_Init+0x108>)
 800397a:	2204      	movs	r2, #4
 800397c:	a904      	add	r1, sp, #16
 800397e:	f003 fca3 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 8003982:	bb68      	cbnz	r0, 80039e0 <MX_TIM1_Init+0xe8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003984:	481e      	ldr	r0, [pc, #120]	; (8003a00 <MX_TIM1_Init+0x108>)
 8003986:	2208      	movs	r2, #8
 8003988:	a904      	add	r1, sp, #16
 800398a:	f003 fc9d 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 800398e:	bb20      	cbnz	r0, 80039da <MX_TIM1_Init+0xe2>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003990:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80039f8 <MX_TIM1_Init+0x100>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003994:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = 10;
 8003996:	240a      	movs	r4, #10
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003998:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800399c:	4818      	ldr	r0, [pc, #96]	; (8003a00 <MX_TIM1_Init+0x108>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800399e:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039a0:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039a2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 10;
 80039a6:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039aa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80039ae:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80039b2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039b6:	f003 feaf 	bl	8007718 <HAL_TIMEx_ConfigBreakDeadTime>
 80039ba:	b938      	cbnz	r0, 80039cc <MX_TIM1_Init+0xd4>
  HAL_TIM_MspPostInit(&htim1);
 80039bc:	4810      	ldr	r0, [pc, #64]	; (8003a00 <MX_TIM1_Init+0x108>)
 80039be:	f7ff ff3d 	bl	800383c <HAL_TIM_MspPostInit>
}
 80039c2:	b018      	add	sp, #96	; 0x60
 80039c4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80039c6:	f7ff fc6f 	bl	80032a8 <Error_Handler>
 80039ca:	e7b7      	b.n	800393c <MX_TIM1_Init+0x44>
    Error_Handler();
 80039cc:	f7ff fc6c 	bl	80032a8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80039d0:	480b      	ldr	r0, [pc, #44]	; (8003a00 <MX_TIM1_Init+0x108>)
 80039d2:	f7ff ff33 	bl	800383c <HAL_TIM_MspPostInit>
}
 80039d6:	b018      	add	sp, #96	; 0x60
 80039d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80039da:	f7ff fc65 	bl	80032a8 <Error_Handler>
 80039de:	e7d7      	b.n	8003990 <MX_TIM1_Init+0x98>
    Error_Handler();
 80039e0:	f7ff fc62 	bl	80032a8 <Error_Handler>
 80039e4:	e7ce      	b.n	8003984 <MX_TIM1_Init+0x8c>
    Error_Handler();
 80039e6:	f7ff fc5f 	bl	80032a8 <Error_Handler>
 80039ea:	e7c5      	b.n	8003978 <MX_TIM1_Init+0x80>
    Error_Handler();
 80039ec:	f7ff fc5c 	bl	80032a8 <Error_Handler>
 80039f0:	e7b1      	b.n	8003956 <MX_TIM1_Init+0x5e>
 80039f2:	bf00      	nop
 80039f4:	f3af 8000 	nop.w
 80039f8:	02000000 	.word	0x02000000
 80039fc:	00000000 	.word	0x00000000
 8003a00:	20000560 	.word	0x20000560
 8003a04:	40012c00 	.word	0x40012c00

08003a08 <MX_TIM8_Init>:
{
 8003a08:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a0a:	2400      	movs	r4, #0
{
 8003a0c:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a0e:	222c      	movs	r2, #44	; 0x2c
 8003a10:	4621      	mov	r1, r4
 8003a12:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a14:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a18:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003a1c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003a20:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a24:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a26:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a28:	f006 fac8 	bl	8009fbc <memset>
  htim8.Instance = TIM8;
 8003a2c:	4838      	ldr	r0, [pc, #224]	; (8003b10 <MX_TIM8_Init+0x108>)
  htim8.Init.Prescaler = 1;
 8003a2e:	4a39      	ldr	r2, [pc, #228]	; (8003b14 <MX_TIM8_Init+0x10c>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a30:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 1800;
 8003a38:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8003a3c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 8003a40:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003a44:	f003 f998 	bl	8006d78 <HAL_TIM_PWM_Init>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	d145      	bne.n	8003ad8 <MX_TIM8_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8003a4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a50:	2270      	movs	r2, #112	; 0x70
 8003a52:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a56:	482e      	ldr	r0, [pc, #184]	; (8003b10 <MX_TIM8_Init+0x108>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003a58:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a5a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003a5c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a5e:	f003 fe15 	bl	800768c <HAL_TIMEx_MasterConfigSynchronization>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d14b      	bne.n	8003afe <MX_TIM8_Init+0xf6>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a66:	2000      	movs	r0, #0
 8003a68:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 8003a6a:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a6c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a70:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a72:	4827      	ldr	r0, [pc, #156]	; (8003b10 <MX_TIM8_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a74:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a76:	a904      	add	r1, sp, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a78:	e9cd 2205 	strd	r2, r2, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a7c:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a7e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a80:	f003 fc22 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d137      	bne.n	8003af8 <MX_TIM8_Init+0xf0>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a88:	4821      	ldr	r0, [pc, #132]	; (8003b10 <MX_TIM8_Init+0x108>)
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	a904      	add	r1, sp, #16
 8003a8e:	f003 fc1b 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 8003a92:	bb70      	cbnz	r0, 8003af2 <MX_TIM8_Init+0xea>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a94:	481e      	ldr	r0, [pc, #120]	; (8003b10 <MX_TIM8_Init+0x108>)
 8003a96:	2208      	movs	r2, #8
 8003a98:	a904      	add	r1, sp, #16
 8003a9a:	f003 fc15 	bl	80072c8 <HAL_TIM_PWM_ConfigChannel>
 8003a9e:	bb28      	cbnz	r0, 8003aec <MX_TIM8_Init+0xe4>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003aa0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8003b08 <MX_TIM8_Init+0x100>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003aa4:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003aaa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 10;
 8003aae:	240a      	movs	r4, #10
  sBreakDeadTimeConfig.BreakFilter = 4;
 8003ab0:	2204      	movs	r2, #4
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ab2:	4817      	ldr	r0, [pc, #92]	; (8003b10 <MX_TIM8_Init+0x108>)
  sBreakDeadTimeConfig.BreakFilter = 4;
 8003ab4:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ab6:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ab8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 10;
 8003abc:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ac0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003ac4:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ac6:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ac8:	f003 fe26 	bl	8007718 <HAL_TIMEx_ConfigBreakDeadTime>
 8003acc:	b938      	cbnz	r0, 8003ade <MX_TIM8_Init+0xd6>
  HAL_TIM_MspPostInit(&htim8);
 8003ace:	4810      	ldr	r0, [pc, #64]	; (8003b10 <MX_TIM8_Init+0x108>)
 8003ad0:	f7ff feb4 	bl	800383c <HAL_TIM_MspPostInit>
}
 8003ad4:	b018      	add	sp, #96	; 0x60
 8003ad6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003ad8:	f7ff fbe6 	bl	80032a8 <Error_Handler>
 8003adc:	e7b6      	b.n	8003a4c <MX_TIM8_Init+0x44>
    Error_Handler();
 8003ade:	f7ff fbe3 	bl	80032a8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8003ae2:	480b      	ldr	r0, [pc, #44]	; (8003b10 <MX_TIM8_Init+0x108>)
 8003ae4:	f7ff feaa 	bl	800383c <HAL_TIM_MspPostInit>
}
 8003ae8:	b018      	add	sp, #96	; 0x60
 8003aea:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003aec:	f7ff fbdc 	bl	80032a8 <Error_Handler>
 8003af0:	e7d6      	b.n	8003aa0 <MX_TIM8_Init+0x98>
    Error_Handler();
 8003af2:	f7ff fbd9 	bl	80032a8 <Error_Handler>
 8003af6:	e7cd      	b.n	8003a94 <MX_TIM8_Init+0x8c>
    Error_Handler();
 8003af8:	f7ff fbd6 	bl	80032a8 <Error_Handler>
 8003afc:	e7c4      	b.n	8003a88 <MX_TIM8_Init+0x80>
    Error_Handler();
 8003afe:	f7ff fbd3 	bl	80032a8 <Error_Handler>
 8003b02:	e7b0      	b.n	8003a66 <MX_TIM8_Init+0x5e>
 8003b04:	f3af 8000 	nop.w
 8003b08:	02000000 	.word	0x02000000
 8003b0c:	00000004 	.word	0x00000004
 8003b10:	200005ac 	.word	0x200005ac
 8003b14:	40013400 	.word	0x40013400

08003b18 <initFirstSin>:
}

/* USER CODE BEGIN 1 */
float rad_to_sin_cnv_array[1024] = {0};
inline void initFirstSin(void)
{
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < 1024; i++)
  {
    float temp_rad = (float)i / 256 * M_PI * 2;
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8003b1a:	4d19      	ldr	r5, [pc, #100]	; (8003b80 <initFirstSin+0x68>)
 8003b1c:	2300      	movs	r3, #0
    float temp_rad = (float)i / 256 * M_PI * 2;
 8003b1e:	a716      	add	r7, pc, #88	; (adr r7, 8003b78 <initFirstSin+0x60>)
 8003b20:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8003b24:	ed2d 8b02 	vpush	{d8}
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8003b28:	f845 3b04 	str.w	r3, [r5], #4
    float temp_rad = (float)i / 256 * M_PI * 2;
 8003b2c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8003b84 <initFirstSin+0x6c>
  for (int i = 0; i < 1024; i++)
 8003b30:	2401      	movs	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8003b32:	ee07 4a90 	vmov	s15, r4
 8003b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 1024; i++)
 8003b3a:	3401      	adds	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8003b3c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8003b40:	ee17 0a90 	vmov	r0, s15
 8003b44:	f7fc fd00 	bl	8000548 <__aeabi_f2d>
 8003b48:	4632      	mov	r2, r6
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	f7fc fd54 	bl	80005f8 <__aeabi_dmul>
 8003b50:	f7fd f84a 	bl	8000be8 <__aeabi_d2f>
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8003b54:	f7fc fcf8 	bl	8000548 <__aeabi_f2d>
 8003b58:	ec41 0b10 	vmov	d0, r0, r1
 8003b5c:	f004 fc74 	bl	8008448 <sin>
 8003b60:	ec51 0b10 	vmov	r0, r1, d0
 8003b64:	f7fd f840 	bl	8000be8 <__aeabi_d2f>
  for (int i = 0; i < 1024; i++)
 8003b68:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8003b6c:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < 1024; i++)
 8003b70:	d1df      	bne.n	8003b32 <initFirstSin+0x1a>
    // printf("rad %4.3f sin %4.3f\n",temp_rad,rad_to_sin_cnv_array[i]);
    // HAL_Delay(1);
  }
}
 8003b72:	ecbd 8b02 	vpop	{d8}
 8003b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b78:	54442d18 	.word	0x54442d18
 8003b7c:	401921fb 	.word	0x401921fb
 8003b80:	200005f8 	.word	0x200005f8
 8003b84:	3b800000 	.word	0x3b800000

08003b88 <setOutputRadianM0>:

inline void setOutputRadianM0(float out_rad, float output_voltage, float battery_voltage)
{
  int voltage_propotional_cnt;

  if (battery_voltage < BATTERY_VOLTAGE_BOTTOM)
 8003b88:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8003b8c:	eef0 0ae0 	vabs.f32	s1, s1
  }
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > OUTPUT_VOLTAGE_LIMIT)
 8003b90:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8003b94:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8003b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9c:	eef4 0ac7 	vcmpe.f32	s1, s14
 8003ba0:	bfb8      	it	lt
 8003ba2:	eeb0 1a67 	vmovlt.f32	s2, s15
 8003ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    output_voltage = 0;
 8003baa:	bfc8      	it	gt
 8003bac:	eddf 0a2e 	vldrgt	s1, [pc, #184]	; 8003c68 <setOutputRadianM0+0xe0>
  }
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTOR * X2_PER_R3;
 8003bb0:	eec0 7a81 	vdiv.f32	s15, s1, s2
{
 8003bb4:	b510      	push	{r4, lr}
 8003bb6:	ed2d 8b02 	vpush	{d8}
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTOR * X2_PER_R3;
 8003bba:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8003c6c <setOutputRadianM0+0xe4>
 8003bbe:	ee67 7a88 	vmul.f32	s15, s15, s16
{
 8003bc2:	ee10 4a10 	vmov	r4, s0
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTOR * X2_PER_R3;
 8003bc6:	ee17 0a90 	vmov	r0, s15
 8003bca:	f7fc fcbd 	bl	8000548 <__aeabi_f2d>
 8003bce:	a320      	add	r3, pc, #128	; (adr r3, 8003c50 <setOutputRadianM0+0xc8>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f7fc fd10 	bl	80005f8 <__aeabi_dmul>
 8003bd8:	f7fc ffbe 	bl	8000b58 <__aeabi_d2iz>
 8003bdc:	ee08 0a90 	vmov	s17, r0

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8003be0:	4620      	mov	r0, r4
 8003be2:	f7fc fcb1 	bl	8000548 <__aeabi_f2d>
 8003be6:	a31c      	add	r3, pc, #112	; (adr r3, 8003c58 <setOutputRadianM0+0xd0>)
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc fb4e 	bl	800028c <__adddf3>
 8003bf0:	a31b      	add	r3, pc, #108	; (adr r3, 8003c60 <setOutputRadianM0+0xd8>)
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f7fc fcff 	bl	80005f8 <__aeabi_dmul>
 8003bfa:	f7fc ffd5 	bl	8000ba8 <__aeabi_d2uiz>
  htim1.Instance->CCR1 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8003bfe:	4b1c      	ldr	r3, [pc, #112]	; (8003c70 <setOutputRadianM0+0xe8>)
 8003c00:	b2c0      	uxtb	r0, r0
 8003c02:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8003c06:	edd1 7a00 	vldr	s15, [r1]
  htim1.Instance->CCR2 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8003c0a:	ed91 6a55 	vldr	s12, [r1, #340]	; 0x154
  htim1.Instance->CCR3 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8003c0e:	edd1 6aaa 	vldr	s13, [r1, #680]	; 0x2a8
  htim1.Instance->CCR1 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <setOutputRadianM0+0xec>)
 8003c14:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8003c18:	eeb0 7a48 	vmov.f32	s14, s16
 8003c1c:	eea8 7aa7 	vfma.f32	s14, s17, s15
 8003c20:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CCR2 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8003c22:	eef0 7a48 	vmov.f32	s15, s16
 8003c26:	eee8 7a86 	vfma.f32	s15, s17, s12
  htim1.Instance->CCR3 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8003c2a:	eea8 8aa6 	vfma.f32	s16, s17, s13
  htim1.Instance->CCR1 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8003c2e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim1.Instance->CCR3 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8003c32:	eebc 8ac8 	vcvt.u32.f32	s16, s16
  htim1.Instance->CCR2 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8003c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim1.Instance->CCR1 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8003c3a:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8003c3e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8003c42:	ed83 8a0f 	vstr	s16, [r3, #60]	; 0x3c
}
 8003c46:	ecbd 8b02 	vpop	{d8}
 8003c4a:	bd10      	pop	{r4, pc}
 8003c4c:	f3af 8000 	nop.w
 8003c50:	b4395810 	.word	0xb4395810
 8003c54:	3ff276c8 	.word	0x3ff276c8
 8003c58:	54442d18 	.word	0x54442d18
 8003c5c:	402921fb 	.word	0x402921fb
 8003c60:	3d5bfeba 	.word	0x3d5bfeba
 8003c64:	40444ad1 	.word	0x40444ad1
 8003c68:	00000000 	.word	0x00000000
 8003c6c:	44610000 	.word	0x44610000
 8003c70:	200005f8 	.word	0x200005f8
 8003c74:	20000560 	.word	0x20000560

08003c78 <setOutputRadianM1>:

inline void setOutputRadianM1(float out_rad, float output_voltage, float battery_voltage)
{
  int voltage_propotional_cnt;
  if (battery_voltage < BATTERY_VOLTAGE_BOTTOM)
 8003c78:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8003c7c:	eef0 0ae0 	vabs.f32	s1, s1
  }
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > OUTPUT_VOLTAGE_LIMIT)
 8003c80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8003c84:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8003c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8c:	eef4 0ac7 	vcmpe.f32	s1, s14
 8003c90:	bfb8      	it	lt
 8003c92:	eeb0 1a67 	vmovlt.f32	s2, s15
 8003c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    output_voltage = 0;
 8003c9a:	bfc8      	it	gt
 8003c9c:	eddf 0a2e 	vldrgt	s1, [pc, #184]	; 8003d58 <setOutputRadianM1+0xe0>
  }
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTOR * X2_PER_R3;
 8003ca0:	eec0 7a81 	vdiv.f32	s15, s1, s2
{
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	ed2d 8b02 	vpush	{d8}
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTOR * X2_PER_R3;
 8003caa:	ed9f 8a2c 	vldr	s16, [pc, #176]	; 8003d5c <setOutputRadianM1+0xe4>
 8003cae:	ee67 7a88 	vmul.f32	s15, s15, s16
{
 8003cb2:	ee10 4a10 	vmov	r4, s0
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTOR * X2_PER_R3;
 8003cb6:	ee17 0a90 	vmov	r0, s15
 8003cba:	f7fc fc45 	bl	8000548 <__aeabi_f2d>
 8003cbe:	a320      	add	r3, pc, #128	; (adr r3, 8003d40 <setOutputRadianM1+0xc8>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fc fc98 	bl	80005f8 <__aeabi_dmul>
 8003cc8:	f7fc ff46 	bl	8000b58 <__aeabi_d2iz>
 8003ccc:	ee08 0a90 	vmov	s17, r0

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f7fc fc39 	bl	8000548 <__aeabi_f2d>
 8003cd6:	a31c      	add	r3, pc, #112	; (adr r3, 8003d48 <setOutputRadianM1+0xd0>)
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f7fc fad6 	bl	800028c <__adddf3>
 8003ce0:	a31b      	add	r3, pc, #108	; (adr r3, 8003d50 <setOutputRadianM1+0xd8>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f7fc fc87 	bl	80005f8 <__aeabi_dmul>
 8003cea:	f7fc ff5d 	bl	8000ba8 <__aeabi_d2uiz>
  htim8.Instance->CCR1 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8003cee:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <setOutputRadianM1+0xe8>)
 8003cf0:	b2c0      	uxtb	r0, r0
 8003cf2:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8003cf6:	edd1 7a00 	vldr	s15, [r1]
  htim8.Instance->CCR2 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8003cfa:	ed91 6a55 	vldr	s12, [r1, #340]	; 0x154
  htim8.Instance->CCR3 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8003cfe:	edd1 6aaa 	vldr	s13, [r1, #680]	; 0x2a8
  htim8.Instance->CCR1 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <setOutputRadianM1+0xec>)
 8003d04:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8003d08:	eeb0 7a48 	vmov.f32	s14, s16
 8003d0c:	eea8 7aa7 	vfma.f32	s14, s17, s15
 8003d10:	681b      	ldr	r3, [r3, #0]
  htim8.Instance->CCR2 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8003d12:	eef0 7a48 	vmov.f32	s15, s16
 8003d16:	eee8 7a86 	vfma.f32	s15, s17, s12
  htim8.Instance->CCR3 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8003d1a:	eea8 8aa6 	vfma.f32	s16, s17, s13
  htim8.Instance->CCR1 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8003d1e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim8.Instance->CCR3 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8003d22:	eebc 8ac8 	vcvt.u32.f32	s16, s16
  htim8.Instance->CCR2 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8003d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim8.Instance->CCR1 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8003d2a:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
  htim8.Instance->CCR2 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8003d2e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  htim8.Instance->CCR3 = TIM_PWM_CENTOR + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8003d32:	ed83 8a0f 	vstr	s16, [r3, #60]	; 0x3c
}
 8003d36:	ecbd 8b02 	vpop	{d8}
 8003d3a:	bd10      	pop	{r4, pc}
 8003d3c:	f3af 8000 	nop.w
 8003d40:	b4395810 	.word	0xb4395810
 8003d44:	3ff276c8 	.word	0x3ff276c8
 8003d48:	54442d18 	.word	0x54442d18
 8003d4c:	402921fb 	.word	0x402921fb
 8003d50:	3d5bfeba 	.word	0x3d5bfeba
 8003d54:	40444ad1 	.word	0x40444ad1
 8003d58:	00000000 	.word	0x00000000
 8003d5c:	44610000 	.word	0x44610000
 8003d60:	200005f8 	.word	0x200005f8
 8003d64:	200005ac 	.word	0x200005ac

08003d68 <forceStop>:

void forceStop(void)
{
 8003d68:	b538      	push	{r3, r4, r5, lr}
  HAL_TIM_Base_Stop_IT(&htim1);
 8003d6a:	4c25      	ldr	r4, [pc, #148]	; (8003e00 <forceStop+0x98>)
  HAL_TIM_Base_Stop_IT(&htim8);
 8003d6c:	4d25      	ldr	r5, [pc, #148]	; (8003e04 <forceStop+0x9c>)
  HAL_TIM_Base_Stop_IT(&htim1);
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f002 ffea 	bl	8006d48 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim8);
 8003d74:	4628      	mov	r0, r5
 8003d76:	f002 ffe7 	bl	8006d48 <HAL_TIM_Base_Stop_IT>

  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f003 f929 	bl	8006fd4 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8003d82:	2104      	movs	r1, #4
 8003d84:	4620      	mov	r0, r4
 8003d86:	f003 f925 	bl	8006fd4 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8003d8a:	2108      	movs	r1, #8
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	f003 f921 	bl	8006fd4 <HAL_TIM_PWM_Stop>

  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8003d92:	2100      	movs	r1, #0
 8003d94:	4628      	mov	r0, r5
 8003d96:	f003 f91d 	bl	8006fd4 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8003d9a:	2104      	movs	r1, #4
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	f003 f919 	bl	8006fd4 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8003da2:	2108      	movs	r1, #8
 8003da4:	4628      	mov	r0, r5
 8003da6:	f003 f915 	bl	8006fd4 <HAL_TIM_PWM_Stop>

  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8003daa:	2100      	movs	r1, #0
 8003dac:	4620      	mov	r0, r4
 8003dae:	f003 fc27 	bl	8007600 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8003db2:	2104      	movs	r1, #4
 8003db4:	4620      	mov	r0, r4
 8003db6:	f003 fc23 	bl	8007600 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8003dba:	2108      	movs	r1, #8
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	f003 fc1f 	bl	8007600 <HAL_TIMEx_PWMN_Stop>

  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	f003 fc1b 	bl	8007600 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8003dca:	2104      	movs	r1, #4
 8003dcc:	4628      	mov	r0, r5
 8003dce:	f003 fc17 	bl	8007600 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8003dd2:	2108      	movs	r1, #8
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	f003 fc13 	bl	8007600 <HAL_TIMEx_PWMN_Stop>

  htim8.Instance->CCR1 = TIM_PWM_CENTOR;
 8003dda:	6829      	ldr	r1, [r5, #0]
  htim8.Instance->CCR2 = TIM_PWM_CENTOR;
  htim8.Instance->CCR3 = TIM_PWM_CENTOR;
  htim1.Instance->CCR1 = TIM_PWM_CENTOR;
 8003ddc:	6822      	ldr	r2, [r4, #0]
  htim8.Instance->CCR1 = TIM_PWM_CENTOR;
 8003dde:	f44f 7361 	mov.w	r3, #900	; 0x384
 8003de2:	634b      	str	r3, [r1, #52]	; 0x34
  htim8.Instance->CCR2 = TIM_PWM_CENTOR;
 8003de4:	638b      	str	r3, [r1, #56]	; 0x38
  htim8.Instance->CCR3 = TIM_PWM_CENTOR;
 8003de6:	63cb      	str	r3, [r1, #60]	; 0x3c
  htim1.Instance->CCR1 = TIM_PWM_CENTOR;
 8003de8:	6353      	str	r3, [r2, #52]	; 0x34
  htim1.Instance->CCR2 = TIM_PWM_CENTOR;
 8003dea:	6393      	str	r3, [r2, #56]	; 0x38
  htim1.Instance->CCR3 = TIM_PWM_CENTOR;
 8003dec:	63d3      	str	r3, [r2, #60]	; 0x3c

  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 8003dee:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8003df0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003df4:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 8003df6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003df8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dfc:	6453      	str	r3, [r2, #68]	; 0x44
}
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
 8003e00:	20000560 	.word	0x20000560
 8003e04:	200005ac 	.word	0x200005ac

08003e08 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e08:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e0a:	480b      	ldr	r0, [pc, #44]	; (8003e38 <MX_USART1_UART_Init+0x30>)
 8003e0c:	4c0b      	ldr	r4, [pc, #44]	; (8003e3c <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 8003e0e:	490c      	ldr	r1, [pc, #48]	; (8003e40 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e10:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e12:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 8003e14:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e18:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e1c:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e20:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e24:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e28:	f004 f93c 	bl	80080a4 <HAL_UART_Init>
 8003e2c:	b900      	cbnz	r0, 8003e30 <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e2e:	bd10      	pop	{r4, pc}
 8003e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003e34:	f7ff ba38 	b.w	80032a8 <Error_Handler>
 8003e38:	20001960 	.word	0x20001960
 8003e3c:	40013800 	.word	0x40013800
 8003e40:	001e8480 	.word	0x001e8480

08003e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8003e48:	4b2e      	ldr	r3, [pc, #184]	; (8003f04 <HAL_UART_MspInit+0xc0>)
 8003e4a:	6802      	ldr	r2, [r0, #0]
{
 8003e4c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4e:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8003e50:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e52:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003e56:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003e5a:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003e5e:	b008      	add	sp, #32
 8003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e64:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e68:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e6c:	699a      	ldr	r2, [r3, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003e6e:	4e26      	ldr	r6, [pc, #152]	; (8003f08 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e74:	619a      	str	r2, [r3, #24]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003e7c:	9200      	str	r2, [sp, #0]
 8003e7e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e80:	695a      	ldr	r2, [r3, #20]
 8003e82:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003e86:	615a      	str	r2, [r3, #20]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e8e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e90:	2210      	movs	r2, #16
 8003e92:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e94:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e96:	a902      	add	r1, sp, #8
 8003e98:	4605      	mov	r5, r0
 8003e9a:	481c      	ldr	r0, [pc, #112]	; (8003f0c <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ea0:	e9cd 8705 	strd	r8, r7, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ea4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea6:	f002 f809 	bl	8005ebc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eaa:	2220      	movs	r2, #32
 8003eac:	2302      	movs	r3, #2
 8003eae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb2:	4816      	ldr	r0, [pc, #88]	; (8003f0c <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eb4:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eb8:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ebc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ebe:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ec0:	f001 fffc 	bl	8005ebc <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ec4:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <HAL_UART_MspInit+0xcc>)
 8003ec6:	2310      	movs	r3, #16
 8003ec8:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003ecc:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ed4:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ed8:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003edc:	f001 fd46 	bl	800596c <HAL_DMA_Init>
 8003ee0:	b960      	cbnz	r0, 8003efc <HAL_UART_MspInit+0xb8>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003ee8:	672e      	str	r6, [r5, #112]	; 0x70
 8003eea:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003eec:	f001 fcc6 	bl	800587c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ef0:	2025      	movs	r0, #37	; 0x25
 8003ef2:	f001 fd01 	bl	80058f8 <HAL_NVIC_EnableIRQ>
}
 8003ef6:	b008      	add	sp, #32
 8003ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8003efc:	f7ff f9d4 	bl	80032a8 <Error_Handler>
 8003f00:	e7ef      	b.n	8003ee2 <HAL_UART_MspInit+0x9e>
 8003f02:	bf00      	nop
 8003f04:	40013800 	.word	0x40013800
 8003f08:	2000191c 	.word	0x2000191c
 8003f0c:	48000800 	.word	0x48000800
 8003f10:	40020044 	.word	0x40020044

08003f14 <HAL_UART_TxCpltCallback>:
volatile bool is_in_printf_func = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

  if (sending_first_buf)
 8003f14:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <HAL_UART_TxCpltCallback+0x6c>)
{
 8003f16:	b538      	push	{r3, r4, r5, lr}
  if (sending_first_buf)
 8003f18:	7813      	ldrb	r3, [r2, #0]
 8003f1a:	b15b      	cbz	r3, 8003f34 <HAL_UART_TxCpltCallback+0x20>
  {                            // FIRST buf complete
    sending_first_buf = false; // complete!
 8003f1c:	2300      	movs	r3, #0

    if (second_buf_len > 0 && is_in_printf_func == false)
 8003f1e:	4c19      	ldr	r4, [pc, #100]	; (8003f84 <HAL_UART_TxCpltCallback+0x70>)
    sending_first_buf = false; // complete!
 8003f20:	7013      	strb	r3, [r2, #0]
    if (second_buf_len > 0 && is_in_printf_func == false)
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	dd04      	ble.n	8003f32 <HAL_UART_TxCpltCallback+0x1e>
 8003f28:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <HAL_UART_TxCpltCallback+0x74>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8003f30:	b1db      	cbz	r3, 8003f6a <HAL_UART_TxCpltCallback+0x56>
      sending_first_buf = true;
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
      first_buf_len = 0;
    }
  }
}
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
  else if (sending_second_buf)
 8003f34:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_UART_TxCpltCallback+0x78>)
 8003f3a:	7818      	ldrb	r0, [r3, #0]
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d0f8      	beq.n	8003f32 <HAL_UART_TxCpltCallback+0x1e>
    if (first_buf_len > 0 && is_in_printf_func == false)
 8003f40:	4c13      	ldr	r4, [pc, #76]	; (8003f90 <HAL_UART_TxCpltCallback+0x7c>)
    sending_second_buf = false; // complete!
 8003f42:	7019      	strb	r1, [r3, #0]
    if (first_buf_len > 0 && is_in_printf_func == false)
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	ddf3      	ble.n	8003f32 <HAL_UART_TxCpltCallback+0x1e>
 8003f4a:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <HAL_UART_TxCpltCallback+0x74>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1ed      	bne.n	8003f32 <HAL_UART_TxCpltCallback+0x1e>
      sending_first_buf = true;
 8003f56:	2301      	movs	r3, #1
 8003f58:	7013      	strb	r3, [r2, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
 8003f5a:	6822      	ldr	r2, [r4, #0]
 8003f5c:	490d      	ldr	r1, [pc, #52]	; (8003f94 <HAL_UART_TxCpltCallback+0x80>)
 8003f5e:	480e      	ldr	r0, [pc, #56]	; (8003f98 <HAL_UART_TxCpltCallback+0x84>)
 8003f60:	b292      	uxth	r2, r2
 8003f62:	f003 fc25 	bl	80077b0 <HAL_UART_Transmit_DMA>
      first_buf_len = 0;
 8003f66:	6025      	str	r5, [r4, #0]
}
 8003f68:	bd38      	pop	{r3, r4, r5, pc}
      sending_second_buf = true;
 8003f6a:	4b08      	ldr	r3, [pc, #32]	; (8003f8c <HAL_UART_TxCpltCallback+0x78>)
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 8003f6c:	490b      	ldr	r1, [pc, #44]	; (8003f9c <HAL_UART_TxCpltCallback+0x88>)
 8003f6e:	480a      	ldr	r0, [pc, #40]	; (8003f98 <HAL_UART_TxCpltCallback+0x84>)
      sending_second_buf = true;
 8003f70:	2201      	movs	r2, #1
 8003f72:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 8003f74:	6822      	ldr	r2, [r4, #0]
 8003f76:	b292      	uxth	r2, r2
 8003f78:	f003 fc1a 	bl	80077b0 <HAL_UART_Transmit_DMA>
      second_buf_len = 0;
 8003f7c:	6025      	str	r5, [r4, #0]
}
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	20001d10 	.word	0x20001d10
 8003f84:	20001d0c 	.word	0x20001d0c
 8003f88:	200019e8 	.word	0x200019e8
 8003f8c:	20001d11 	.word	0x20001d11
 8003f90:	20001918 	.word	0x20001918
 8003f94:	200015f8 	.word	0x200015f8
 8003f98:	20001960 	.word	0x20001960
 8003f9c:	200019ec 	.word	0x200019ec

08003fa0 <p>:

void p(const char *format, ...)
{
 8003fa0:	b40f      	push	{r0, r1, r2, r3}
 8003fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  va_list ap;
  va_start(ap, format);
  is_in_printf_func = true;
 8003fa6:	4c35      	ldr	r4, [pc, #212]	; (800407c <p+0xdc>)

  if (sending_first_buf)
 8003fa8:	4d35      	ldr	r5, [pc, #212]	; (8004080 <p+0xe0>)
{
 8003faa:	b082      	sub	sp, #8
  is_in_printf_func = true;
 8003fac:	2601      	movs	r6, #1
{
 8003fae:	aa08      	add	r2, sp, #32
  is_in_printf_func = true;
 8003fb0:	7026      	strb	r6, [r4, #0]
  if (sending_first_buf)
 8003fb2:	782b      	ldrb	r3, [r5, #0]
{
 8003fb4:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(ap, format);
 8003fb8:	9201      	str	r2, [sp, #4]
  if (sending_first_buf)
 8003fba:	b30b      	cbz	r3, 8004000 <p+0x60>
  {
    if (second_buf_len > UART_TEMP_BUF_SIZE / 2)
 8003fbc:	4e31      	ldr	r6, [pc, #196]	; (8004084 <p+0xe4>)
 8003fbe:	6833      	ldr	r3, [r6, #0]
 8003fc0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003fc4:	dd06      	ble.n	8003fd4 <p+0x34>
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
    first_buf_len = (int)strlen(first_buf);
    first_buf_len = 0;
    second_buf_len = 0;
  }
  is_in_printf_func = false;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	7023      	strb	r3, [r4, #0]
  return;
}
 8003fca:	b002      	add	sp, #8
 8003fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd0:	b004      	add	sp, #16
 8003fd2:	4770      	bx	lr
    second_buf_len += vsprintf(second_buf + second_buf_len, format, ap);
 8003fd4:	6830      	ldr	r0, [r6, #0]
 8003fd6:	4f2c      	ldr	r7, [pc, #176]	; (8004088 <p+0xe8>)
 8003fd8:	4438      	add	r0, r7
 8003fda:	f005 ffe5 	bl	8009fa8 <vsiprintf>
 8003fde:	6833      	ldr	r3, [r6, #0]
 8003fe0:	4418      	add	r0, r3
 8003fe2:	6030      	str	r0, [r6, #0]
    if (sending_first_buf == false)
 8003fe4:	782b      	ldrb	r3, [r5, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ed      	bne.n	8003fc6 <p+0x26>
      second_buf_len = (int)strlen(second_buf);
 8003fea:	4638      	mov	r0, r7
 8003fec:	f7fc f940 	bl	8000270 <strlen>
 8003ff0:	6030      	str	r0, [r6, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len); // 2ms
 8003ff2:	6832      	ldr	r2, [r6, #0]
 8003ff4:	4825      	ldr	r0, [pc, #148]	; (800408c <p+0xec>)
 8003ff6:	4639      	mov	r1, r7
 8003ff8:	b292      	uxth	r2, r2
 8003ffa:	f003 fbd9 	bl	80077b0 <HAL_UART_Transmit_DMA>
 8003ffe:	e7e2      	b.n	8003fc6 <p+0x26>
  else if (sending_second_buf)
 8004000:	4f23      	ldr	r7, [pc, #140]	; (8004090 <p+0xf0>)
 8004002:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004006:	783b      	ldrb	r3, [r7, #0]
 8004008:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 800400c:	b303      	cbz	r3, 8004050 <p+0xb0>
    if (first_buf_len > UART_TEMP_BUF_SIZE / 2)
 800400e:	4d21      	ldr	r5, [pc, #132]	; (8004094 <p+0xf4>)
 8004010:	682b      	ldr	r3, [r5, #0]
 8004012:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004016:	dd05      	ble.n	8004024 <p+0x84>
      is_in_printf_func = false;
 8004018:	7020      	strb	r0, [r4, #0]
}
 800401a:	b002      	add	sp, #8
 800401c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004020:	b004      	add	sp, #16
 8004022:	4770      	bx	lr
    first_buf_len += vsprintf(first_buf + first_buf_len, format, ap);
 8004024:	6828      	ldr	r0, [r5, #0]
 8004026:	4e1c      	ldr	r6, [pc, #112]	; (8004098 <p+0xf8>)
 8004028:	4430      	add	r0, r6
 800402a:	f005 ffbd 	bl	8009fa8 <vsiprintf>
 800402e:	682b      	ldr	r3, [r5, #0]
 8004030:	4418      	add	r0, r3
 8004032:	6028      	str	r0, [r5, #0]
    if (sending_second_buf == false)
 8004034:	783b      	ldrb	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1c5      	bne.n	8003fc6 <p+0x26>
      first_buf_len = (int)strlen(first_buf);
 800403a:	4630      	mov	r0, r6
 800403c:	f7fc f918 	bl	8000270 <strlen>
 8004040:	6028      	str	r0, [r5, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 8004042:	682a      	ldr	r2, [r5, #0]
 8004044:	4811      	ldr	r0, [pc, #68]	; (800408c <p+0xec>)
 8004046:	4631      	mov	r1, r6
 8004048:	b292      	uxth	r2, r2
 800404a:	f003 fbb1 	bl	80077b0 <HAL_UART_Transmit_DMA>
 800404e:	e7ba      	b.n	8003fc6 <p+0x26>
    first_buf_len = vsprintf(first_buf, format, ap);
 8004050:	4811      	ldr	r0, [pc, #68]	; (8004098 <p+0xf8>)
 8004052:	4f10      	ldr	r7, [pc, #64]	; (8004094 <p+0xf4>)
 8004054:	f005 ffa8 	bl	8009fa8 <vsiprintf>
 8004058:	6038      	str	r0, [r7, #0]
    sending_first_buf = true;
 800405a:	702e      	strb	r6, [r5, #0]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	490e      	ldr	r1, [pc, #56]	; (8004098 <p+0xf8>)
 8004060:	480a      	ldr	r0, [pc, #40]	; (800408c <p+0xec>)
 8004062:	b292      	uxth	r2, r2
 8004064:	f003 fba4 	bl	80077b0 <HAL_UART_Transmit_DMA>
    first_buf_len = (int)strlen(first_buf);
 8004068:	480b      	ldr	r0, [pc, #44]	; (8004098 <p+0xf8>)
 800406a:	f7fc f901 	bl	8000270 <strlen>
    second_buf_len = 0;
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <p+0xe4>)
    first_buf_len = (int)strlen(first_buf);
 8004070:	6038      	str	r0, [r7, #0]
    first_buf_len = 0;
 8004072:	f8c7 8000 	str.w	r8, [r7]
    second_buf_len = 0;
 8004076:	f8c3 8000 	str.w	r8, [r3]
 800407a:	e7a4      	b.n	8003fc6 <p+0x26>
 800407c:	200019e8 	.word	0x200019e8
 8004080:	20001d10 	.word	0x20001d10
 8004084:	20001d0c 	.word	0x20001d0c
 8004088:	200019ec 	.word	0x200019ec
 800408c:	20001960 	.word	0x20001960
 8004090:	20001d11 	.word	0x20001d11
 8004094:	20001918 	.word	0x20001918
 8004098:	200015f8 	.word	0x200015f8

0800409c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800409c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a0:	480d      	ldr	r0, [pc, #52]	; (80040d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80040a2:	490e      	ldr	r1, [pc, #56]	; (80040dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80040a4:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <LoopForever+0xe>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0b      	ldr	r2, [pc, #44]	; (80040e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040b8:	4c0b      	ldr	r4, [pc, #44]	; (80040e8 <LoopForever+0x16>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80040c6:	f7ff fb63 	bl	8003790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040ca:	f005 ffcf 	bl	800a06c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040ce:	f7fe fbe7 	bl	80028a0 <main>

080040d2 <LoopForever>:

LoopForever:
    b LoopForever
 80040d2:	e7fe      	b.n	80040d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80040d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040dc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80040e0:	0800cc04 	.word	0x0800cc04
  ldr r2, =_sbss
 80040e4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80040e8:	20001e84 	.word	0x20001e84

080040ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040ec:	e7fe      	b.n	80040ec <ADC1_2_IRQHandler>
	...

080040f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040f2:	4a0e      	ldr	r2, [pc, #56]	; (800412c <HAL_InitTick+0x3c>)
 80040f4:	4b0e      	ldr	r3, [pc, #56]	; (8004130 <HAL_InitTick+0x40>)
 80040f6:	7812      	ldrb	r2, [r2, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
{
 80040fa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004100:	fbb0 f0f2 	udiv	r0, r0, r2
 8004104:	fbb3 f0f0 	udiv	r0, r3, r0
 8004108:	f001 fc16 	bl	8005938 <HAL_SYSTICK_Config>
 800410c:	b908      	cbnz	r0, 8004112 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800410e:	2d0f      	cmp	r5, #15
 8004110:	d901      	bls.n	8004116 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004112:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8004114:	bd38      	pop	{r3, r4, r5, pc}
 8004116:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004118:	4602      	mov	r2, r0
 800411a:	4629      	mov	r1, r5
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	f001 fbac 	bl	800587c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_InitTick+0x44>)
 8004126:	4620      	mov	r0, r4
 8004128:	601d      	str	r5, [r3, #0]
}
 800412a:	bd38      	pop	{r3, r4, r5, pc}
 800412c:	2000000c 	.word	0x2000000c
 8004130:	20000008 	.word	0x20000008
 8004134:	20000010 	.word	0x20000010

08004138 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004138:	4a07      	ldr	r2, [pc, #28]	; (8004158 <HAL_Init+0x20>)
{
 800413a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800413c:	6813      	ldr	r3, [r2, #0]
 800413e:	f043 0310 	orr.w	r3, r3, #16
 8004142:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004144:	2003      	movs	r0, #3
 8004146:	f001 fb87 	bl	8005858 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800414a:	200f      	movs	r0, #15
 800414c:	f7ff ffd0 	bl	80040f0 <HAL_InitTick>
  HAL_MspInit();
 8004150:	f7ff fa5c 	bl	800360c <HAL_MspInit>
}
 8004154:	2000      	movs	r0, #0
 8004156:	bd08      	pop	{r3, pc}
 8004158:	40022000 	.word	0x40022000

0800415c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800415c:	4a03      	ldr	r2, [pc, #12]	; (800416c <HAL_IncTick+0x10>)
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <HAL_IncTick+0x14>)
 8004160:	6811      	ldr	r1, [r2, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	440b      	add	r3, r1
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20001d14 	.word	0x20001d14
 8004170:	2000000c 	.word	0x2000000c

08004174 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004174:	4b01      	ldr	r3, [pc, #4]	; (800417c <HAL_GetTick+0x8>)
 8004176:	6818      	ldr	r0, [r3, #0]
}
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	20001d14 	.word	0x20001d14

08004180 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004184:	f7ff fff6 	bl	8004174 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004188:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800418a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800418c:	d002      	beq.n	8004194 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800418e:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <HAL_Delay+0x20>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004194:	f7ff ffee 	bl	8004174 <HAL_GetTick>
 8004198:	1b43      	subs	r3, r0, r5
 800419a:	42a3      	cmp	r3, r4
 800419c:	d3fa      	bcc.n	8004194 <HAL_Delay+0x14>
  {
  }
}
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	2000000c 	.word	0x2000000c

080041a4 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80041a4:	6802      	ldr	r2, [r0, #0]
{
 80041a6:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80041a8:	6893      	ldr	r3, [r2, #8]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d001      	beq.n	80041b6 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80041b2:	2000      	movs	r0, #0
}
 80041b4:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80041b6:	6811      	ldr	r1, [r2, #0]
 80041b8:	07cc      	lsls	r4, r1, #31
 80041ba:	d5fa      	bpl.n	80041b2 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80041bc:	6891      	ldr	r1, [r2, #8]
 80041be:	f001 010d 	and.w	r1, r1, #13
 80041c2:	2901      	cmp	r1, #1
 80041c4:	4604      	mov	r4, r0
 80041c6:	d009      	beq.n	80041dc <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80041ca:	f042 0210 	orr.w	r2, r2, #16
 80041ce:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80041d0:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6463      	str	r3, [r4, #68]	; 0x44
}
 80041da:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 80041dc:	6893      	ldr	r3, [r2, #8]
 80041de:	2103      	movs	r1, #3
 80041e0:	f043 0302 	orr.w	r3, r3, #2
 80041e4:	6093      	str	r3, [r2, #8]
 80041e6:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80041e8:	f7ff ffc4 	bl	8004174 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80041f2:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80041f4:	d403      	bmi.n	80041fe <ADC_Disable+0x5a>
 80041f6:	e7dc      	b.n	80041b2 <ADC_Disable+0xe>
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	07db      	lsls	r3, r3, #31
 80041fc:	d5d9      	bpl.n	80041b2 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041fe:	f7ff ffb9 	bl	8004174 <HAL_GetTick>
 8004202:	1b40      	subs	r0, r0, r5
 8004204:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004206:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004208:	d9f6      	bls.n	80041f8 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	07d2      	lsls	r2, r2, #31
 800420e:	d5f3      	bpl.n	80041f8 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004212:	f043 0310 	orr.w	r3, r3, #16
 8004216:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004218:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800421a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800421c:	4303      	orrs	r3, r0
 800421e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004220:	bd38      	pop	{r3, r4, r5, pc}
 8004222:	bf00      	nop

08004224 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004224:	6802      	ldr	r2, [r0, #0]
{
 8004226:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004228:	6893      	ldr	r3, [r2, #8]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b01      	cmp	r3, #1
{
 8004230:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004232:	d025      	beq.n	8004280 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004234:	6891      	ldr	r1, [r2, #8]
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <ADC_Enable+0x68>)
 8004238:	4219      	tst	r1, r3
 800423a:	d008      	beq.n	800424e <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800423c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800423e:	f043 0310 	orr.w	r3, r3, #16
 8004242:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004244:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8004246:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004248:	4303      	orrs	r3, r0
 800424a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800424c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800424e:	6893      	ldr	r3, [r2, #8]
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8004256:	f7ff ff8d 	bl	8004174 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800425a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 800425c:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	07d9      	lsls	r1, r3, #31
 8004262:	d40b      	bmi.n	800427c <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004264:	f7ff ff86 	bl	8004174 <HAL_GetTick>
 8004268:	1b43      	subs	r3, r0, r5
 800426a:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800426c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800426e:	d9f6      	bls.n	800425e <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	07d2      	lsls	r2, r2, #31
 8004274:	d5e2      	bpl.n	800423c <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	07d9      	lsls	r1, r3, #31
 800427a:	d5f3      	bpl.n	8004264 <ADC_Enable+0x40>
  return HAL_OK;
 800427c:	2000      	movs	r0, #0
}
 800427e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004280:	6813      	ldr	r3, [r2, #0]
 8004282:	07d8      	lsls	r0, r3, #31
 8004284:	d5d6      	bpl.n	8004234 <ADC_Enable+0x10>
  return HAL_OK;
 8004286:	2000      	movs	r0, #0
 8004288:	e7f9      	b.n	800427e <ADC_Enable+0x5a>
 800428a:	bf00      	nop
 800428c:	8000003f 	.word	0x8000003f

08004290 <HAL_ADC_Init>:
{
 8004290:	b530      	push	{r4, r5, lr}
 8004292:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8004298:	2800      	cmp	r0, #0
 800429a:	f000 8099 	beq.w	80043d0 <HAL_ADC_Init+0x140>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800429e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042a0:	f013 0310 	ands.w	r3, r3, #16
 80042a4:	4604      	mov	r4, r0
 80042a6:	d117      	bne.n	80042d8 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80042a8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80042aa:	2d00      	cmp	r5, #0
 80042ac:	f000 8093 	beq.w	80043d6 <HAL_ADC_Init+0x146>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80042b0:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80042b2:	6891      	ldr	r1, [r2, #8]
 80042b4:	00c9      	lsls	r1, r1, #3
 80042b6:	d57f      	bpl.n	80043b8 <HAL_ADC_Init+0x128>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80042b8:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80042ba:	008d      	lsls	r5, r1, #2
 80042bc:	d47c      	bmi.n	80043b8 <HAL_ADC_Init+0x128>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80042be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80042c0:	06c8      	lsls	r0, r1, #27
 80042c2:	d400      	bmi.n	80042c6 <HAL_ADC_Init+0x36>
 80042c4:	b163      	cbz	r3, 80042e0 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 80042c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042c8:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 80042cc:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80042ce:	f043 0310 	orr.w	r3, r3, #16
 80042d2:	6423      	str	r3, [r4, #64]	; 0x40
}
 80042d4:	b003      	add	sp, #12
 80042d6:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80042d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80042da:	06da      	lsls	r2, r3, #27
 80042dc:	d4f3      	bmi.n	80042c6 <HAL_ADC_Init+0x36>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80042de:	6802      	ldr	r2, [r0, #0]
 80042e0:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80042e2:	0759      	lsls	r1, r3, #29
 80042e4:	d4ef      	bmi.n	80042c6 <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 80042e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80042ec:	f043 0302 	orr.w	r3, r3, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042f0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80042f4:	6423      	str	r3, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042f6:	f000 80d8 	beq.w	80044aa <HAL_ADC_Init+0x21a>
 80042fa:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <HAL_ADC_Init+0x260>)
 80042fc:	429a      	cmp	r2, r3
 80042fe:	f000 80dc 	beq.w	80044ba <HAL_ADC_Init+0x22a>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004302:	497c      	ldr	r1, [pc, #496]	; (80044f4 <HAL_ADC_Init+0x264>)
 8004304:	428a      	cmp	r2, r1
 8004306:	d073      	beq.n	80043f0 <HAL_ADC_Init+0x160>
 8004308:	4b7b      	ldr	r3, [pc, #492]	; (80044f8 <HAL_ADC_Init+0x268>)
 800430a:	429a      	cmp	r2, r3
 800430c:	d071      	beq.n	80043f2 <HAL_ADC_Init+0x162>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800430e:	6893      	ldr	r3, [r2, #8]
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	2b01      	cmp	r3, #1
 8004316:	f000 80e2 	beq.w	80044de <HAL_ADC_Init+0x24e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800431a:	4878      	ldr	r0, [pc, #480]	; (80044fc <HAL_ADC_Init+0x26c>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 800431c:	6883      	ldr	r3, [r0, #8]
 800431e:	6861      	ldr	r1, [r4, #4]
 8004320:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004324:	430b      	orrs	r3, r1
 8004326:	6083      	str	r3, [r0, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004328:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800432c:	430b      	orrs	r3, r1
 800432e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004330:	7e60      	ldrb	r0, [r4, #25]
 8004332:	3901      	subs	r1, #1
 8004334:	bf18      	it	ne
 8004336:	2101      	movne	r1, #1
 8004338:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 800433c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004340:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004344:	2901      	cmp	r1, #1
 8004346:	f000 8094 	beq.w	8004472 <HAL_ADC_Init+0x1e2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800434a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800434c:	2901      	cmp	r1, #1
 800434e:	d00c      	beq.n	800436a <HAL_ADC_Init+0xda>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004350:	4868      	ldr	r0, [pc, #416]	; (80044f4 <HAL_ADC_Init+0x264>)
 8004352:	4282      	cmp	r2, r0
 8004354:	f000 809d 	beq.w	8004492 <HAL_ADC_Init+0x202>
 8004358:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800435c:	4282      	cmp	r2, r0
 800435e:	f000 8098 	beq.w	8004492 <HAL_ADC_Init+0x202>
 8004362:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004364:	4318      	orrs	r0, r3
 8004366:	ea41 0300 	orr.w	r3, r1, r0
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800436a:	6891      	ldr	r1, [r2, #8]
 800436c:	f011 0f0c 	tst.w	r1, #12
 8004370:	d10c      	bne.n	800438c <HAL_ADC_Init+0xfc>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004372:	68d1      	ldr	r1, [r2, #12]
 8004374:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004378:	f021 0102 	bic.w	r1, r1, #2
 800437c:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800437e:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8004382:	7e20      	ldrb	r0, [r4, #24]
 8004384:	0049      	lsls	r1, r1, #1
 8004386:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800438a:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800438c:	68d0      	ldr	r0, [r2, #12]
 800438e:	495c      	ldr	r1, [pc, #368]	; (8004500 <HAL_ADC_Init+0x270>)
 8004390:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004392:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8004394:	4319      	orrs	r1, r3
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004396:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8004398:	60d1      	str	r1, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800439a:	d072      	beq.n	8004482 <HAL_ADC_Init+0x1f2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800439c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800439e:	f023 030f 	bic.w	r3, r3, #15
 80043a2:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80043a4:	2000      	movs	r0, #0
 80043a6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80043a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6423      	str	r3, [r4, #64]	; 0x40
}
 80043b4:	b003      	add	sp, #12
 80043b6:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80043b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ba:	f023 0312 	bic.w	r3, r3, #18
 80043be:	f043 0310 	orr.w	r3, r3, #16
 80043c2:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043c6:	f043 0301 	orr.w	r3, r3, #1
 80043ca:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ce:	e77a      	b.n	80042c6 <HAL_ADC_Init+0x36>
    return HAL_ERROR;
 80043d0:	2001      	movs	r0, #1
}
 80043d2:	b003      	add	sp, #12
 80043d4:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 80043d6:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80043da:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 80043dc:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80043e0:	f7fc fd96 	bl	8000f10 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80043e4:	6822      	ldr	r2, [r4, #0]
 80043e6:	6893      	ldr	r3, [r2, #8]
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	d511      	bpl.n	8004410 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ec:	462b      	mov	r3, r5
 80043ee:	e760      	b.n	80042b2 <HAL_ADC_Init+0x22>
 80043f0:	4941      	ldr	r1, [pc, #260]	; (80044f8 <HAL_ADC_Init+0x268>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043f2:	4842      	ldr	r0, [pc, #264]	; (80044fc <HAL_ADC_Init+0x26c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80043f4:	6893      	ldr	r3, [r2, #8]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d058      	beq.n	80044b0 <HAL_ADC_Init+0x220>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80043fe:	688b      	ldr	r3, [r1, #8]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d189      	bne.n	800431c <HAL_ADC_Init+0x8c>
 8004408:	680b      	ldr	r3, [r1, #0]
 800440a:	07db      	lsls	r3, r3, #31
 800440c:	d48c      	bmi.n	8004328 <HAL_ADC_Init+0x98>
 800440e:	e785      	b.n	800431c <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 8004410:	4620      	mov	r0, r4
 8004412:	f7ff fec7 	bl	80041a4 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004416:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 8004418:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800441a:	06d0      	lsls	r0, r2, #27
 800441c:	f53f af48 	bmi.w	80042b0 <HAL_ADC_Init+0x20>
 8004420:	2b00      	cmp	r3, #0
 8004422:	f47f af45 	bne.w	80042b0 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8004426:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004428:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 800442a:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 800442e:	f021 0102 	bic.w	r1, r1, #2
 8004432:	f041 0102 	orr.w	r1, r1, #2
 8004436:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004438:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800443a:	4932      	ldr	r1, [pc, #200]	; (8004504 <HAL_ADC_Init+0x274>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800443c:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8004440:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004442:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004444:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004446:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800444a:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800444c:	482e      	ldr	r0, [pc, #184]	; (8004508 <HAL_ADC_Init+0x278>)
 800444e:	fba0 0101 	umull	r0, r1, r0, r1
 8004452:	0c89      	lsrs	r1, r1, #18
 8004454:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004458:	0049      	lsls	r1, r1, #1
 800445a:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800445c:	9901      	ldr	r1, [sp, #4]
 800445e:	2900      	cmp	r1, #0
 8004460:	f43f af27 	beq.w	80042b2 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 8004464:	9901      	ldr	r1, [sp, #4]
 8004466:	3901      	subs	r1, #1
 8004468:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 800446a:	9901      	ldr	r1, [sp, #4]
 800446c:	2900      	cmp	r1, #0
 800446e:	d1f9      	bne.n	8004464 <HAL_ADC_Init+0x1d4>
 8004470:	e71f      	b.n	80042b2 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004472:	bb30      	cbnz	r0, 80044c2 <HAL_ADC_Init+0x232>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004474:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004476:	3901      	subs	r1, #1
 8004478:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 800447c:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 8004480:	e763      	b.n	800434a <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004482:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004484:	69e3      	ldr	r3, [r4, #28]
 8004486:	f021 010f 	bic.w	r1, r1, #15
 800448a:	3b01      	subs	r3, #1
 800448c:	430b      	orrs	r3, r1
 800448e:	6313      	str	r3, [r2, #48]	; 0x30
 8004490:	e788      	b.n	80043a4 <HAL_ADC_Init+0x114>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004492:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 8004496:	d01f      	beq.n	80044d8 <HAL_ADC_Init+0x248>
 8004498:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800449c:	d024      	beq.n	80044e8 <HAL_ADC_Init+0x258>
 800449e:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 80044a2:	bf08      	it	eq
 80044a4:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80044a8:	e75b      	b.n	8004362 <HAL_ADC_Init+0xd2>
 80044aa:	4911      	ldr	r1, [pc, #68]	; (80044f0 <HAL_ADC_Init+0x260>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ac:	4817      	ldr	r0, [pc, #92]	; (800450c <HAL_ADC_Init+0x27c>)
 80044ae:	e7a1      	b.n	80043f4 <HAL_ADC_Init+0x164>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80044b0:	6813      	ldr	r3, [r2, #0]
 80044b2:	07dd      	lsls	r5, r3, #31
 80044b4:	f53f af38 	bmi.w	8004328 <HAL_ADC_Init+0x98>
 80044b8:	e7a1      	b.n	80043fe <HAL_ADC_Init+0x16e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ba:	4814      	ldr	r0, [pc, #80]	; (800450c <HAL_ADC_Init+0x27c>)
 80044bc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80044c0:	e798      	b.n	80043f4 <HAL_ADC_Init+0x164>
        ADC_STATE_CLR_SET(hadc->State,
 80044c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80044c4:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80044c8:	f041 0120 	orr.w	r1, r1, #32
 80044cc:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80044d0:	f041 0101 	orr.w	r1, r1, #1
 80044d4:	6461      	str	r1, [r4, #68]	; 0x44
 80044d6:	e738      	b.n	800434a <HAL_ADC_Init+0xba>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80044d8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80044dc:	e741      	b.n	8004362 <HAL_ADC_Init+0xd2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	07db      	lsls	r3, r3, #31
 80044e2:	f53f af21 	bmi.w	8004328 <HAL_ADC_Init+0x98>
 80044e6:	e718      	b.n	800431a <HAL_ADC_Init+0x8a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80044e8:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80044ec:	e739      	b.n	8004362 <HAL_ADC_Init+0xd2>
 80044ee:	bf00      	nop
 80044f0:	50000100 	.word	0x50000100
 80044f4:	50000400 	.word	0x50000400
 80044f8:	50000500 	.word	0x50000500
 80044fc:	50000700 	.word	0x50000700
 8004500:	fff0c007 	.word	0xfff0c007
 8004504:	20000008 	.word	0x20000008
 8004508:	431bde83 	.word	0x431bde83
 800450c:	50000300 	.word	0x50000300

08004510 <HAL_ADC_Start>:
{
 8004510:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004512:	6803      	ldr	r3, [r0, #0]
 8004514:	689d      	ldr	r5, [r3, #8]
 8004516:	f015 0504 	ands.w	r5, r5, #4
 800451a:	d12c      	bne.n	8004576 <HAL_ADC_Start+0x66>
    __HAL_LOCK(hadc);
 800451c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	4604      	mov	r4, r0
 8004524:	d027      	beq.n	8004576 <HAL_ADC_Start+0x66>
 8004526:	2301      	movs	r3, #1
 8004528:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 800452c:	f7ff fe7a 	bl	8004224 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004530:	b9f0      	cbnz	r0, 8004570 <HAL_ADC_Start+0x60>
      ADC_STATE_CLR_SET(hadc->State,
 8004532:	6c22      	ldr	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004534:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8004536:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800453a:	f022 0201 	bic.w	r2, r2, #1
 800453e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 8004546:	6422      	str	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004548:	d017      	beq.n	800457a <HAL_ADC_Start+0x6a>
 800454a:	4a3a      	ldr	r2, [pc, #232]	; (8004634 <HAL_ADC_Start+0x124>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d068      	beq.n	8004622 <HAL_ADC_Start+0x112>
 8004550:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8004554:	6892      	ldr	r2, [r2, #8]
 8004556:	06d5      	lsls	r5, r2, #27
 8004558:	d011      	beq.n	800457e <HAL_ADC_Start+0x6e>
 800455a:	4937      	ldr	r1, [pc, #220]	; (8004638 <HAL_ADC_Start+0x128>)
 800455c:	428b      	cmp	r3, r1
 800455e:	d00e      	beq.n	800457e <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004560:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004562:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004566:	6422      	str	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004568:	68ca      	ldr	r2, [r1, #12]
 800456a:	0192      	lsls	r2, r2, #6
 800456c:	d514      	bpl.n	8004598 <HAL_ADC_Start+0x88>
 800456e:	e00d      	b.n	800458c <HAL_ADC_Start+0x7c>
      __HAL_UNLOCK(hadc);
 8004570:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 8004574:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8004576:	2002      	movs	r0, #2
}
 8004578:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800457a:	4a30      	ldr	r2, [pc, #192]	; (800463c <HAL_ADC_Start+0x12c>)
 800457c:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800457e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004580:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004584:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	0191      	lsls	r1, r2, #6
 800458a:	d505      	bpl.n	8004598 <HAL_ADC_Start+0x88>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800458c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800458e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004592:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004596:	6422      	str	r2, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004598:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800459a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800459e:	bf1c      	itt	ne
 80045a0:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 80045a2:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80045a6:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80045a8:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045aa:	221c      	movs	r2, #28
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80045ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
 80045b0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045b4:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80045b6:	d01a      	beq.n	80045ee <HAL_ADC_Start+0xde>
 80045b8:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <HAL_ADC_Start+0x124>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d022      	beq.n	8004604 <HAL_ADC_Start+0xf4>
 80045be:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 80045c2:	06cd      	lsls	r5, r1, #27
 80045c4:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 80045c8:	d00c      	beq.n	80045e4 <HAL_ADC_Start+0xd4>
 80045ca:	6891      	ldr	r1, [r2, #8]
 80045cc:	f001 011f 	and.w	r1, r1, #31
 80045d0:	2905      	cmp	r1, #5
 80045d2:	d007      	beq.n	80045e4 <HAL_ADC_Start+0xd4>
 80045d4:	6892      	ldr	r2, [r2, #8]
 80045d6:	f002 021f 	and.w	r2, r2, #31
 80045da:	2a09      	cmp	r2, #9
 80045dc:	d002      	beq.n	80045e4 <HAL_ADC_Start+0xd4>
 80045de:	4a16      	ldr	r2, [pc, #88]	; (8004638 <HAL_ADC_Start+0x128>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d1c7      	bne.n	8004574 <HAL_ADC_Start+0x64>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	f042 0204 	orr.w	r2, r2, #4
 80045ea:	609a      	str	r2, [r3, #8]
}
 80045ec:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80045ee:	4a13      	ldr	r2, [pc, #76]	; (800463c <HAL_ADC_Start+0x12c>)
 80045f0:	6891      	ldr	r1, [r2, #8]
 80045f2:	06cc      	lsls	r4, r1, #27
 80045f4:	d0f6      	beq.n	80045e4 <HAL_ADC_Start+0xd4>
 80045f6:	6891      	ldr	r1, [r2, #8]
 80045f8:	f001 011f 	and.w	r1, r1, #31
 80045fc:	2905      	cmp	r1, #5
 80045fe:	d0f1      	beq.n	80045e4 <HAL_ADC_Start+0xd4>
 8004600:	6892      	ldr	r2, [r2, #8]
 8004602:	e7ef      	b.n	80045e4 <HAL_ADC_Start+0xd4>
 8004604:	4a0d      	ldr	r2, [pc, #52]	; (800463c <HAL_ADC_Start+0x12c>)
 8004606:	6891      	ldr	r1, [r2, #8]
 8004608:	06c9      	lsls	r1, r1, #27
 800460a:	d0eb      	beq.n	80045e4 <HAL_ADC_Start+0xd4>
 800460c:	6891      	ldr	r1, [r2, #8]
 800460e:	f001 011f 	and.w	r1, r1, #31
 8004612:	2905      	cmp	r1, #5
 8004614:	d0e6      	beq.n	80045e4 <HAL_ADC_Start+0xd4>
 8004616:	6892      	ldr	r2, [r2, #8]
 8004618:	f002 021f 	and.w	r2, r2, #31
 800461c:	2a09      	cmp	r2, #9
 800461e:	d0e1      	beq.n	80045e4 <HAL_ADC_Start+0xd4>
}
 8004620:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004622:	4a06      	ldr	r2, [pc, #24]	; (800463c <HAL_ADC_Start+0x12c>)
 8004624:	6892      	ldr	r2, [r2, #8]
 8004626:	06d2      	lsls	r2, r2, #27
 8004628:	d0a9      	beq.n	800457e <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800462a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800462c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8004630:	e797      	b.n	8004562 <HAL_ADC_Start+0x52>
 8004632:	bf00      	nop
 8004634:	50000100 	.word	0x50000100
 8004638:	50000400 	.word	0x50000400
 800463c:	50000300 	.word	0x50000300

08004640 <HAL_ADCEx_Calibration_Start>:
{
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8004642:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d040      	beq.n	80046cc <HAL_ADCEx_Calibration_Start+0x8c>
 800464a:	2701      	movs	r7, #1
 800464c:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8004650:	4604      	mov	r4, r0
 8004652:	460d      	mov	r5, r1
 8004654:	f7ff fda6 	bl	80041a4 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8004658:	4606      	mov	r6, r0
 800465a:	2800      	cmp	r0, #0
 800465c:	d131      	bne.n	80046c2 <HAL_ADCEx_Calibration_Start+0x82>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800465e:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 8004660:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8004662:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004664:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8004666:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800466a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800466c:	d103      	bne.n	8004676 <HAL_ADCEx_Calibration_Start+0x36>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004674:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800467c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800467e:	f7ff fd79 	bl	8004174 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004682:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8004684:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	da14      	bge.n	80046b6 <HAL_ADCEx_Calibration_Start+0x76>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800468c:	f7ff fd72 	bl	8004174 <HAL_GetTick>
 8004690:	1b43      	subs	r3, r0, r5
 8004692:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004694:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004696:	d9f6      	bls.n	8004686 <HAL_ADCEx_Calibration_Start+0x46>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	2a00      	cmp	r2, #0
 800469c:	daf3      	bge.n	8004686 <HAL_ADCEx_Calibration_Start+0x46>
          ADC_STATE_CLR_SET(hadc->State,
 800469e:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 80046a0:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 80046a2:	f023 0312 	bic.w	r3, r3, #18
 80046a6:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 80046aa:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 80046ac:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 80046b0:	6423      	str	r3, [r4, #64]	; 0x40
}
 80046b2:	4630      	mov	r0, r6
 80046b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80046b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046b8:	f023 0303 	bic.w	r3, r3, #3
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80046c2:	2300      	movs	r3, #0
 80046c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80046c8:	4630      	mov	r0, r6
 80046ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 80046cc:	2602      	movs	r6, #2
}
 80046ce:	4630      	mov	r0, r6
 80046d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d2:	bf00      	nop

080046d4 <HAL_ADCEx_InjectedStart>:
{
 80046d4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80046d6:	6803      	ldr	r3, [r0, #0]
 80046d8:	689d      	ldr	r5, [r3, #8]
 80046da:	f015 0508 	ands.w	r5, r5, #8
 80046de:	d129      	bne.n	8004734 <HAL_ADCEx_InjectedStart+0x60>
    __HAL_LOCK(hadc);
 80046e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	4604      	mov	r4, r0
 80046e8:	d024      	beq.n	8004734 <HAL_ADCEx_InjectedStart+0x60>
 80046ea:	2301      	movs	r3, #1
 80046ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 80046f0:	f7ff fd98 	bl	8004224 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80046f4:	b9d8      	cbnz	r0, 800472e <HAL_ADCEx_InjectedStart+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 80046f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80046f8:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80046fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004706:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 800470a:	6423      	str	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800470c:	d014      	beq.n	8004738 <HAL_ADCEx_InjectedStart+0x64>
 800470e:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <HAL_ADCEx_InjectedStart+0x104>)
 8004710:	429a      	cmp	r2, r3
 8004712:	d042      	beq.n	800479a <HAL_ADCEx_InjectedStart+0xc6>
 8004714:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	06d9      	lsls	r1, r3, #27
 800471c:	d00e      	beq.n	800473c <HAL_ADCEx_InjectedStart+0x68>
 800471e:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <HAL_ADCEx_InjectedStart+0x108>)
 8004720:	429a      	cmp	r2, r3
 8004722:	d00b      	beq.n	800473c <HAL_ADCEx_InjectedStart+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472a:	6423      	str	r3, [r4, #64]	; 0x40
 800472c:	e00a      	b.n	8004744 <HAL_ADCEx_InjectedStart+0x70>
      __HAL_UNLOCK(hadc);
 800472e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 8004732:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8004734:	2002      	movs	r0, #2
}
 8004736:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_ADCEx_InjectedStart+0x10c>)
 800473a:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800473c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800473e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004742:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004744:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004746:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        ADC_CLEAR_ERRORCODE(hadc);
 800474a:	bf08      	it	eq
 800474c:	6463      	streq	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800474e:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004750:	2360      	movs	r3, #96	; 0x60
      __HAL_UNLOCK(hadc);
 8004752:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004756:	6013      	str	r3, [r2, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8004758:	68d3      	ldr	r3, [r2, #12]
 800475a:	019b      	lsls	r3, r3, #6
 800475c:	d4e9      	bmi.n	8004732 <HAL_ADCEx_InjectedStart+0x5e>
 800475e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004762:	d01f      	beq.n	80047a4 <HAL_ADCEx_InjectedStart+0xd0>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <HAL_ADCEx_InjectedStart+0x104>)
 8004766:	429a      	cmp	r2, r3
 8004768:	d027      	beq.n	80047ba <HAL_ADCEx_InjectedStart+0xe6>
 800476a:	f8d3 1608 	ldr.w	r1, [r3, #1544]	; 0x608
 800476e:	06cd      	lsls	r5, r1, #27
 8004770:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004774:	d00c      	beq.n	8004790 <HAL_ADCEx_InjectedStart+0xbc>
 8004776:	6899      	ldr	r1, [r3, #8]
 8004778:	f001 011f 	and.w	r1, r1, #31
 800477c:	2906      	cmp	r1, #6
 800477e:	d007      	beq.n	8004790 <HAL_ADCEx_InjectedStart+0xbc>
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2b07      	cmp	r3, #7
 8004788:	d002      	beq.n	8004790 <HAL_ADCEx_InjectedStart+0xbc>
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <HAL_ADCEx_InjectedStart+0x108>)
 800478c:	429a      	cmp	r2, r3
 800478e:	d1d0      	bne.n	8004732 <HAL_ADCEx_InjectedStart+0x5e>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8004790:	6893      	ldr	r3, [r2, #8]
 8004792:	f043 0308 	orr.w	r3, r3, #8
 8004796:	6093      	str	r3, [r2, #8]
}
 8004798:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800479a:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_ADCEx_InjectedStart+0x10c>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	06db      	lsls	r3, r3, #27
 80047a0:	d0cc      	beq.n	800473c <HAL_ADCEx_InjectedStart+0x68>
 80047a2:	e7bf      	b.n	8004724 <HAL_ADCEx_InjectedStart+0x50>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80047a4:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <HAL_ADCEx_InjectedStart+0x10c>)
 80047a6:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80047a8:	06c9      	lsls	r1, r1, #27
 80047aa:	d0f1      	beq.n	8004790 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80047ac:	6899      	ldr	r1, [r3, #8]
 80047ae:	f001 011f 	and.w	r1, r1, #31
 80047b2:	2906      	cmp	r1, #6
 80047b4:	d0ec      	beq.n	8004790 <HAL_ADCEx_InjectedStart+0xbc>
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	e7ea      	b.n	8004790 <HAL_ADCEx_InjectedStart+0xbc>
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <HAL_ADCEx_InjectedStart+0x10c>)
 80047bc:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80047be:	06cc      	lsls	r4, r1, #27
 80047c0:	d0e6      	beq.n	8004790 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80047c2:	6899      	ldr	r1, [r3, #8]
 80047c4:	f001 011f 	and.w	r1, r1, #31
 80047c8:	2906      	cmp	r1, #6
 80047ca:	d0e1      	beq.n	8004790 <HAL_ADCEx_InjectedStart+0xbc>
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 031f 	and.w	r3, r3, #31
 80047d2:	2b07      	cmp	r3, #7
 80047d4:	d0dc      	beq.n	8004790 <HAL_ADCEx_InjectedStart+0xbc>
}
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	50000100 	.word	0x50000100
 80047dc:	50000400 	.word	0x50000400
 80047e0:	50000300 	.word	0x50000300

080047e4 <HAL_ADCEx_InjectedGetValue>:
  switch(InjectedRank)
 80047e4:	2903      	cmp	r1, #3
 80047e6:	d007      	beq.n	80047f8 <HAL_ADCEx_InjectedGetValue+0x14>
 80047e8:	2904      	cmp	r1, #4
 80047ea:	d00d      	beq.n	8004808 <HAL_ADCEx_InjectedGetValue+0x24>
 80047ec:	2902      	cmp	r1, #2
 80047ee:	d007      	beq.n	8004800 <HAL_ADCEx_InjectedGetValue+0x1c>
      tmp_jdr = hadc->Instance->JDR1;
 80047f0:	6803      	ldr	r3, [r0, #0]
 80047f2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 80047f6:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 80047f8:	6803      	ldr	r3, [r0, #0]
 80047fa:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 80047fe:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 8004800:	6803      	ldr	r3, [r0, #0]
 8004802:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 8004806:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8004808:	6803      	ldr	r3, [r0, #0]
 800480a:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 800480e:	4770      	bx	lr

08004810 <HAL_ADC_ConfigChannel>:
{
 8004810:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8004812:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004816:	68cc      	ldr	r4, [r1, #12]
{
 8004818:	b083      	sub	sp, #12
 800481a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800481c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8004824:	f000 8107 	beq.w	8004a36 <HAL_ADC_ConfigChannel+0x226>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004828:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800482a:	2001      	movs	r0, #1
 800482c:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004830:	6895      	ldr	r5, [r2, #8]
 8004832:	076d      	lsls	r5, r5, #29
 8004834:	d43a      	bmi.n	80048ac <HAL_ADC_ConfigChannel+0x9c>
    if (sConfig->Rank < 5U)
 8004836:	6848      	ldr	r0, [r1, #4]
 8004838:	2804      	cmp	r0, #4
 800483a:	f200 808b 	bhi.w	8004954 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 800483e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004842:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8004844:	680d      	ldr	r5, [r1, #0]
 8004846:	0040      	lsls	r0, r0, #1
 8004848:	f04f 0c1f 	mov.w	ip, #31
 800484c:	fa0c fc00 	lsl.w	ip, ip, r0
 8004850:	ea26 0c0c 	bic.w	ip, r6, ip
 8004854:	fa05 f000 	lsl.w	r0, r5, r0
 8004858:	ea4c 0000 	orr.w	r0, ip, r0
 800485c:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800485e:	6890      	ldr	r0, [r2, #8]
 8004860:	f010 0f0c 	tst.w	r0, #12
 8004864:	d134      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004866:	2d09      	cmp	r5, #9
 8004868:	f200 808b 	bhi.w	8004982 <HAL_ADC_ConfigChannel+0x172>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800486c:	6950      	ldr	r0, [r2, #20]
 800486e:	688e      	ldr	r6, [r1, #8]
 8004870:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8004874:	f04f 0c07 	mov.w	ip, #7
 8004878:	fa0c fc0e 	lsl.w	ip, ip, lr
 800487c:	fa06 f60e 	lsl.w	r6, r6, lr
 8004880:	ea20 000c 	bic.w	r0, r0, ip
 8004884:	4330      	orrs	r0, r6
 8004886:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004888:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 800488a:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800488c:	694f      	ldr	r7, [r1, #20]
 800488e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8004892:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8004894:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004896:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 800489a:	2e03      	cmp	r6, #3
 800489c:	f200 8148 	bhi.w	8004b30 <HAL_ADC_ConfigChannel+0x320>
 80048a0:	e8df f016 	tbh	[pc, r6, lsl #1]
 80048a4:	010a000d 	.word	0x010a000d
 80048a8:	00f60100 	.word	0x00f60100
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ae:	f042 0220 	orr.w	r2, r2, #32
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80048ba:	b003      	add	sp, #12
 80048bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 80048be:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80048c0:	4eaa      	ldr	r6, [pc, #680]	; (8004b6c <HAL_ADC_ConfigChannel+0x35c>)
 80048c2:	403e      	ands	r6, r7
 80048c4:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80048c8:	4330      	orrs	r0, r6
 80048ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80048ce:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80048d0:	6890      	ldr	r0, [r2, #8]
 80048d2:	f000 0003 	and.w	r0, r0, #3
 80048d6:	2801      	cmp	r0, #1
 80048d8:	f000 80a8 	beq.w	8004a2c <HAL_ADC_ConfigChannel+0x21c>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80048dc:	2c01      	cmp	r4, #1
 80048de:	f000 80ad 	beq.w	8004a3c <HAL_ADC_ConfigChannel+0x22c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80048e2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80048e6:	2001      	movs	r0, #1
 80048e8:	40a8      	lsls	r0, r5
 80048ea:	ea21 0100 	bic.w	r1, r1, r0
 80048ee:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048f2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80048f6:	d079      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x1dc>
 80048f8:	499d      	ldr	r1, [pc, #628]	; (8004b70 <HAL_ADC_ConfigChannel+0x360>)
 80048fa:	428a      	cmp	r2, r1
 80048fc:	d076      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x1dc>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80048fe:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004900:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004904:	d075      	beq.n	80049f2 <HAL_ADC_ConfigChannel+0x1e2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004906:	2d11      	cmp	r5, #17
 8004908:	f040 80ae 	bne.w	8004a68 <HAL_ADC_ConfigChannel+0x258>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800490c:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800490e:	01c4      	lsls	r4, r0, #7
 8004910:	d472      	bmi.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004912:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004916:	d071      	beq.n	80049fc <HAL_ADC_ConfigChannel+0x1ec>
 8004918:	4895      	ldr	r0, [pc, #596]	; (8004b70 <HAL_ADC_ConfigChannel+0x360>)
 800491a:	4282      	cmp	r2, r0
 800491c:	f000 80df 	beq.w	8004ade <HAL_ADC_ConfigChannel+0x2ce>
 8004920:	4c94      	ldr	r4, [pc, #592]	; (8004b74 <HAL_ADC_ConfigChannel+0x364>)
 8004922:	42a2      	cmp	r2, r4
 8004924:	f000 80fe 	beq.w	8004b24 <HAL_ADC_ConfigChannel+0x314>
 8004928:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800492c:	4282      	cmp	r2, r0
 800492e:	d066      	beq.n	80049fe <HAL_ADC_ConfigChannel+0x1ee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004930:	6890      	ldr	r0, [r2, #8]
 8004932:	f000 0003 	and.w	r0, r0, #3
 8004936:	2801      	cmp	r0, #1
 8004938:	f000 80f6 	beq.w	8004b28 <HAL_ADC_ConfigChannel+0x318>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800493c:	2d10      	cmp	r5, #16
 800493e:	d05b      	beq.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004940:	2d11      	cmp	r5, #17
 8004942:	d059      	beq.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004944:	2d12      	cmp	r5, #18
 8004946:	d157      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004948:	688a      	ldr	r2, [r1, #8]
 800494a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800494e:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004950:	608a      	str	r2, [r1, #8]
 8004952:	e7af      	b.n	80048b4 <HAL_ADC_ConfigChannel+0xa4>
    else if (sConfig->Rank < 10U)
 8004954:	2809      	cmp	r0, #9
 8004956:	d925      	bls.n	80049a4 <HAL_ADC_ConfigChannel+0x194>
    else if (sConfig->Rank < 15U)
 8004958:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800495a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800495e:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8004962:	f200 8087 	bhi.w	8004a74 <HAL_ADC_ConfigChannel+0x264>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004966:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8004968:	680d      	ldr	r5, [r1, #0]
 800496a:	383c      	subs	r0, #60	; 0x3c
 800496c:	f04f 0c1f 	mov.w	ip, #31
 8004970:	fa0c fc00 	lsl.w	ip, ip, r0
 8004974:	ea26 060c 	bic.w	r6, r6, ip
 8004978:	fa05 f000 	lsl.w	r0, r5, r0
 800497c:	4330      	orrs	r0, r6
 800497e:	6390      	str	r0, [r2, #56]	; 0x38
 8004980:	e76d      	b.n	800485e <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004982:	688f      	ldr	r7, [r1, #8]
 8004984:	6990      	ldr	r0, [r2, #24]
 8004986:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800498a:	3e1e      	subs	r6, #30
 800498c:	f04f 0e07 	mov.w	lr, #7
 8004990:	fa07 fc06 	lsl.w	ip, r7, r6
 8004994:	fa0e f606 	lsl.w	r6, lr, r6
 8004998:	ea20 0006 	bic.w	r0, r0, r6
 800499c:	ea40 000c 	orr.w	r0, r0, ip
 80049a0:	6190      	str	r0, [r2, #24]
 80049a2:	e771      	b.n	8004888 <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->SQR2,
 80049a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80049a8:	0040      	lsls	r0, r0, #1
 80049aa:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80049ac:	680d      	ldr	r5, [r1, #0]
 80049ae:	381e      	subs	r0, #30
 80049b0:	f04f 0c1f 	mov.w	ip, #31
 80049b4:	fa0c fc00 	lsl.w	ip, ip, r0
 80049b8:	ea26 060c 	bic.w	r6, r6, ip
 80049bc:	fa05 f000 	lsl.w	r0, r5, r0
 80049c0:	4330      	orrs	r0, r6
 80049c2:	6350      	str	r0, [r2, #52]	; 0x34
 80049c4:	e74b      	b.n	800485e <HAL_ADC_ConfigChannel+0x4e>
        MODIFY_REG(hadc->Instance->SMPR1,
 80049c6:	688c      	ldr	r4, [r1, #8]
 80049c8:	6950      	ldr	r0, [r2, #20]
 80049ca:	1c69      	adds	r1, r5, #1
 80049cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80049d0:	2607      	movs	r6, #7
 80049d2:	408c      	lsls	r4, r1
 80049d4:	fa06 f101 	lsl.w	r1, r6, r1
 80049d8:	ea20 0101 	bic.w	r1, r0, r1
 80049dc:	4321      	orrs	r1, r4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049de:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80049e2:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049e4:	d008      	beq.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
 80049e6:	4962      	ldr	r1, [pc, #392]	; (8004b70 <HAL_ADC_ConfigChannel+0x360>)
 80049e8:	428a      	cmp	r2, r1
 80049ea:	d105      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049ec:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049ee:	4962      	ldr	r1, [pc, #392]	; (8004b78 <HAL_ADC_ConfigChannel+0x368>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049f0:	d189      	bne.n	8004906 <HAL_ADC_ConfigChannel+0xf6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80049f2:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049f4:	0206      	lsls	r6, r0, #8
 80049f6:	d58c      	bpl.n	8004912 <HAL_ADC_ConfigChannel+0x102>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049f8:	2000      	movs	r0, #0
 80049fa:	e75b      	b.n	80048b4 <HAL_ADC_ConfigChannel+0xa4>
 80049fc:	4c5c      	ldr	r4, [pc, #368]	; (8004b70 <HAL_ADC_ConfigChannel+0x360>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80049fe:	6890      	ldr	r0, [r2, #8]
 8004a00:	f000 0003 	and.w	r0, r0, #3
 8004a04:	2801      	cmp	r0, #1
 8004a06:	d061      	beq.n	8004acc <HAL_ADC_ConfigChannel+0x2bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a08:	68a0      	ldr	r0, [r4, #8]
 8004a0a:	f000 0003 	and.w	r0, r0, #3
 8004a0e:	2801      	cmp	r0, #1
 8004a10:	d068      	beq.n	8004ae4 <HAL_ADC_ConfigChannel+0x2d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a12:	2d10      	cmp	r5, #16
 8004a14:	d06a      	beq.n	8004aec <HAL_ADC_ConfigChannel+0x2dc>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004a16:	2d11      	cmp	r5, #17
 8004a18:	d194      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x134>
 8004a1a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004a1e:	d1eb      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004a20:	688a      	ldr	r2, [r1, #8]
 8004a22:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a26:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004a28:	608a      	str	r2, [r1, #8]
 8004a2a:	e743      	b.n	80048b4 <HAL_ADC_ConfigChannel+0xa4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a2c:	6810      	ldr	r0, [r2, #0]
 8004a2e:	07c7      	lsls	r7, r0, #31
 8004a30:	f57f af54 	bpl.w	80048dc <HAL_ADC_ConfigChannel+0xcc>
 8004a34:	e7e0      	b.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
  __HAL_LOCK(hadc);
 8004a36:	2002      	movs	r0, #2
}
 8004a38:	b003      	add	sp, #12
 8004a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004a3c:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8004a40:	40ac      	lsls	r4, r5
 8004a42:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004a44:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004a46:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004a4a:	d9bc      	bls.n	80049c6 <HAL_ADC_ConfigChannel+0x1b6>
        MODIFY_REG(hadc->Instance->SMPR2,
 8004a4c:	688c      	ldr	r4, [r1, #8]
 8004a4e:	6990      	ldr	r0, [r2, #24]
 8004a50:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004a54:	391b      	subs	r1, #27
 8004a56:	2607      	movs	r6, #7
 8004a58:	408c      	lsls	r4, r1
 8004a5a:	fa06 f101 	lsl.w	r1, r6, r1
 8004a5e:	ea20 0101 	bic.w	r1, r0, r1
 8004a62:	4321      	orrs	r1, r4
 8004a64:	6191      	str	r1, [r2, #24]
 8004a66:	e744      	b.n	80048f2 <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004a68:	2d12      	cmp	r5, #18
 8004a6a:	d1c5      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004a6c:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004a6e:	0240      	lsls	r0, r0, #9
 8004a70:	d4c2      	bmi.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
 8004a72:	e74e      	b.n	8004912 <HAL_ADC_ConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004a74:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8004a76:	680d      	ldr	r5, [r1, #0]
 8004a78:	385a      	subs	r0, #90	; 0x5a
 8004a7a:	f04f 0c1f 	mov.w	ip, #31
 8004a7e:	fa0c fc00 	lsl.w	ip, ip, r0
 8004a82:	ea26 060c 	bic.w	r6, r6, ip
 8004a86:	fa05 f000 	lsl.w	r0, r5, r0
 8004a8a:	4330      	orrs	r0, r6
 8004a8c:	63d0      	str	r0, [r2, #60]	; 0x3c
 8004a8e:	e6e6      	b.n	800485e <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004a90:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8004a92:	4e36      	ldr	r6, [pc, #216]	; (8004b6c <HAL_ADC_ConfigChannel+0x35c>)
 8004a94:	403e      	ands	r6, r7
 8004a96:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8004a9a:	4330      	orrs	r0, r6
 8004a9c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004aa0:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8004aa2:	e715      	b.n	80048d0 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004aa4:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8004aa6:	4e31      	ldr	r6, [pc, #196]	; (8004b6c <HAL_ADC_ConfigChannel+0x35c>)
 8004aa8:	403e      	ands	r6, r7
 8004aaa:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8004aae:	4330      	orrs	r0, r6
 8004ab0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004ab4:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8004ab6:	e70b      	b.n	80048d0 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004ab8:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8004aba:	4e2c      	ldr	r6, [pc, #176]	; (8004b6c <HAL_ADC_ConfigChannel+0x35c>)
 8004abc:	403e      	ands	r6, r7
 8004abe:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8004ac2:	4330      	orrs	r0, r6
 8004ac4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004ac8:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8004aca:	e701      	b.n	80048d0 <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004acc:	6810      	ldr	r0, [r2, #0]
 8004ace:	07c6      	lsls	r6, r0, #31
 8004ad0:	d59a      	bpl.n	8004a08 <HAL_ADC_ConfigChannel+0x1f8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad4:	f042 0220 	orr.w	r2, r2, #32
        tmp_hal_status = HAL_ERROR;
 8004ad8:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8004adc:	e6ea      	b.n	80048b4 <HAL_ADC_ConfigChannel+0xa4>
 8004ade:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8004ae2:	e78c      	b.n	80049fe <HAL_ADC_ConfigChannel+0x1ee>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004ae4:	6820      	ldr	r0, [r4, #0]
 8004ae6:	07c0      	lsls	r0, r0, #31
 8004ae8:	d4f3      	bmi.n	8004ad2 <HAL_ADC_ConfigChannel+0x2c2>
 8004aea:	e792      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x202>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004aec:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004af0:	d182      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004af2:	4a22      	ldr	r2, [pc, #136]	; (8004b7c <HAL_ADC_ConfigChannel+0x36c>)
 8004af4:	4c22      	ldr	r4, [pc, #136]	; (8004b80 <HAL_ADC_ConfigChannel+0x370>)
 8004af6:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004af8:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004afa:	fba4 4202 	umull	r4, r2, r4, r2
 8004afe:	0c92      	lsrs	r2, r2, #18
 8004b00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004b04:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004b06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004b0a:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b0c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8004b0e:	9a01      	ldr	r2, [sp, #4]
 8004b10:	2a00      	cmp	r2, #0
 8004b12:	f43f af71 	beq.w	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
            wait_loop_index--;
 8004b16:	9a01      	ldr	r2, [sp, #4]
 8004b18:	3a01      	subs	r2, #1
 8004b1a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8004b1c:	9a01      	ldr	r2, [sp, #4]
 8004b1e:	2a00      	cmp	r2, #0
 8004b20:	d1f9      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x306>
 8004b22:	e769      	b.n	80049f8 <HAL_ADC_ConfigChannel+0x1e8>
 8004b24:	4c17      	ldr	r4, [pc, #92]	; (8004b84 <HAL_ADC_ConfigChannel+0x374>)
 8004b26:	e76a      	b.n	80049fe <HAL_ADC_ConfigChannel+0x1ee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	07d7      	lsls	r7, r2, #31
 8004b2c:	d4d1      	bmi.n	8004ad2 <HAL_ADC_ConfigChannel+0x2c2>
 8004b2e:	e705      	b.n	800493c <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b30:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004b32:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004b36:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8004b3a:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8004b3e:	d023      	beq.n	8004b88 <HAL_ADC_ConfigChannel+0x378>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b40:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004b42:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004b46:	4286      	cmp	r6, r0
 8004b48:	d023      	beq.n	8004b92 <HAL_ADC_ConfigChannel+0x382>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b4a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004b4c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004b50:	4286      	cmp	r6, r0
 8004b52:	d023      	beq.n	8004b9c <HAL_ADC_ConfigChannel+0x38c>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b54:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004b56:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8004b5a:	4286      	cmp	r6, r0
 8004b5c:	f47f aeb8 	bne.w	80048d0 <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004b60:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8004b62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004b66:	66d0      	str	r0, [r2, #108]	; 0x6c
 8004b68:	e6b2      	b.n	80048d0 <HAL_ADC_ConfigChannel+0xc0>
 8004b6a:	bf00      	nop
 8004b6c:	83fff000 	.word	0x83fff000
 8004b70:	50000100 	.word	0x50000100
 8004b74:	50000400 	.word	0x50000400
 8004b78:	50000300 	.word	0x50000300
 8004b7c:	20000008 	.word	0x20000008
 8004b80:	431bde83 	.word	0x431bde83
 8004b84:	50000500 	.word	0x50000500
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004b88:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8004b8a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004b8e:	6610      	str	r0, [r2, #96]	; 0x60
 8004b90:	e7d6      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x330>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004b92:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8004b94:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004b98:	6650      	str	r0, [r2, #100]	; 0x64
 8004b9a:	e7d6      	b.n	8004b4a <HAL_ADC_ConfigChannel+0x33a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004b9c:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8004b9e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004ba2:	6690      	str	r0, [r2, #104]	; 0x68
 8004ba4:	e7d6      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x344>
 8004ba6:	bf00      	nop

08004ba8 <HAL_ADCEx_InjectedConfigChannel>:
{
 8004ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bac:	4602      	mov	r2, r0
 8004bae:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8004bb0:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004bb4:	6900      	ldr	r0, [r0, #16]
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004bb6:	68cd      	ldr	r5, [r1, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004bb8:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8004bba:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8004bbc:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 8004bbe:	f000 81ae 	beq.w	8004f1e <HAL_ADCEx_InjectedConfigChannel+0x376>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004bc8:	b358      	cbz	r0, 8004c22 <HAL_ADCEx_InjectedConfigChannel+0x7a>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8004bca:	698f      	ldr	r7, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004bcc:	429f      	cmp	r7, r3
 8004bce:	d028      	beq.n	8004c22 <HAL_ADCEx_InjectedConfigChannel+0x7a>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004bd0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	f040 812e 	bne.w	8004e34 <HAL_ADCEx_InjectedConfigChannel+0x28c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004bd8:	6a0c      	ldr	r4, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004bda:	64d7      	str	r7, [r2, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004bdc:	2c01      	cmp	r4, #1
 8004bde:	f000 81f0 	beq.w	8004fc2 <HAL_ADCEx_InjectedConfigChannel+0x41a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	48ac      	ldr	r0, [pc, #688]	; (8004e98 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8004be6:	4283      	cmp	r3, r0
 8004be8:	f107 37ff 	add.w	r7, r7, #4294967295
 8004bec:	f000 81e1 	beq.w	8004fb2 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004bf0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8004bf4:	4283      	cmp	r3, r0
 8004bf6:	f000 81dc 	beq.w	8004fb2 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004bfa:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004bfc:	4338      	orrs	r0, r7
 8004bfe:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8004c00:	684c      	ldr	r4, [r1, #4]
 8004c02:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8004c04:	64d7      	str	r7, [r2, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8004c06:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004c0a:	0064      	lsls	r4, r4, #1
 8004c0c:	3402      	adds	r4, #2
 8004c0e:	271f      	movs	r7, #31
 8004c10:	40a6      	lsls	r6, r4
 8004c12:	fa07 f404 	lsl.w	r4, r7, r4
 8004c16:	ea20 0004 	bic.w	r0, r0, r4
 8004c1a:	4330      	orrs	r0, r6
 8004c1c:	6490      	str	r0, [r2, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e009      	b.n	8004c36 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004c22:	684b      	ldr	r3, [r1, #4]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	f000 80e9 	beq.w	8004dfc <HAL_ADCEx_InjectedConfigChannel+0x254>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c2a:	6c10      	ldr	r0, [r2, #64]	; 0x40
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8004c2c:	6813      	ldr	r3, [r2, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c2e:	f040 0020 	orr.w	r0, r0, #32
 8004c32:	6410      	str	r0, [r2, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8004c34:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8004c36:	689c      	ldr	r4, [r3, #8]
 8004c38:	0726      	lsls	r6, r4, #28
 8004c3a:	d40d      	bmi.n	8004c58 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004c3c:	7f4c      	ldrb	r4, [r1, #29]
 8004c3e:	2c00      	cmp	r4, #0
 8004c40:	f040 80c5 	bne.w	8004dce <HAL_ADCEx_InjectedConfigChannel+0x226>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8004c44:	7f0c      	ldrb	r4, [r1, #28]
 8004c46:	68de      	ldr	r6, [r3, #12]
 8004c48:	7f8f      	ldrb	r7, [r1, #30]
 8004c4a:	0524      	lsls	r4, r4, #20
 8004c4c:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
 8004c50:	ea44 5447 	orr.w	r4, r4, r7, lsl #21
 8004c54:	4334      	orrs	r4, r6
 8004c56:	60dc      	str	r4, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004c58:	689c      	ldr	r4, [r3, #8]
 8004c5a:	f014 0f0c 	tst.w	r4, #12
 8004c5e:	d13d      	bne.n	8004cdc <HAL_ADCEx_InjectedConfigChannel+0x134>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004c60:	6a0c      	ldr	r4, [r1, #32]
 8004c62:	2c01      	cmp	r4, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8004c64:	68dc      	ldr	r4, [r3, #12]
 8004c66:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004c6a:	f000 8153 	beq.w	8004f14 <HAL_ADCEx_InjectedConfigChannel+0x36c>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004c6e:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004c70:	7f4c      	ldrb	r4, [r1, #29]
 8004c72:	2c01      	cmp	r4, #1
 8004c74:	f000 8130 	beq.w	8004ed8 <HAL_ADCEx_InjectedConfigChannel+0x330>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8004c78:	680e      	ldr	r6, [r1, #0]
 8004c7a:	2e09      	cmp	r6, #9
 8004c7c:	f240 8097 	bls.w	8004dae <HAL_ADCEx_InjectedConfigChannel+0x206>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8004c80:	688f      	ldr	r7, [r1, #8]
 8004c82:	699c      	ldr	r4, [r3, #24]
 8004c84:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8004c88:	f1ac 0c1e 	sub.w	ip, ip, #30
 8004c8c:	fa07 fe0c 	lsl.w	lr, r7, ip
 8004c90:	2707      	movs	r7, #7
 8004c92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8004c96:	ea24 040c 	bic.w	r4, r4, ip
 8004c9a:	ea44 040e 	orr.w	r4, r4, lr
 8004c9e:	619c      	str	r4, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004ca0:	68dc      	ldr	r4, [r3, #12]
 8004ca2:	f3c4 0cc1 	ubfx	ip, r4, #3, #2
    switch (sConfigInjected->InjectedOffsetNumber)
 8004ca6:	690c      	ldr	r4, [r1, #16]
 8004ca8:	f104 3eff 	add.w	lr, r4, #4294967295
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004cac:	694c      	ldr	r4, [r1, #20]
 8004cae:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004cb2:	fa04 f40c 	lsl.w	r4, r4, ip
    switch (sConfigInjected->InjectedOffsetNumber)
 8004cb6:	f1be 0f03 	cmp.w	lr, #3
 8004cba:	f200 818e 	bhi.w	8004fda <HAL_ADCEx_InjectedConfigChannel+0x432>
 8004cbe:	e8df f01e 	tbh	[pc, lr, lsl #1]
 8004cc2:	0004      	.short	0x0004
 8004cc4:	00f70101 	.word	0x00f70101
 8004cc8:	00e1      	.short	0x00e1
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8004cca:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8004ccc:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8004cd0:	4e72      	ldr	r6, [pc, #456]	; (8004e9c <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
 8004cd2:	403e      	ands	r6, r7
 8004cd4:	4334      	orrs	r4, r6
 8004cd6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004cda:	661c      	str	r4, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004cdc:	689c      	ldr	r4, [r3, #8]
 8004cde:	f004 0403 	and.w	r4, r4, #3
 8004ce2:	2c01      	cmp	r4, #1
 8004ce4:	d041      	beq.n	8004d6a <HAL_ADCEx_InjectedConfigChannel+0x1c2>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ce6:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004ce8:	680c      	ldr	r4, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004cea:	d044      	beq.n	8004d76 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004cec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004cf0:	2501      	movs	r5, #1
 8004cf2:	40a5      	lsls	r5, r4
 8004cf4:	ea21 0105 	bic.w	r1, r1, r5
 8004cf8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d00:	d02c      	beq.n	8004d5c <HAL_ADCEx_InjectedConfigChannel+0x1b4>
 8004d02:	4967      	ldr	r1, [pc, #412]	; (8004ea0 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8004d04:	428b      	cmp	r3, r1
 8004d06:	d029      	beq.n	8004d5c <HAL_ADCEx_InjectedConfigChannel+0x1b4>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d08:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d0a:	4966      	ldr	r1, [pc, #408]	; (8004ea4 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d0c:	d029      	beq.n	8004d62 <HAL_ADCEx_InjectedConfigChannel+0x1ba>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004d0e:	2c11      	cmp	r4, #17
 8004d10:	d16e      	bne.n	8004df0 <HAL_ADCEx_InjectedConfigChannel+0x248>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004d12:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8004d14:	01ee      	lsls	r6, r5, #7
 8004d16:	d41b      	bmi.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d1c:	f000 8103 	beq.w	8004f26 <HAL_ADCEx_InjectedConfigChannel+0x37e>
 8004d20:	4d5f      	ldr	r5, [pc, #380]	; (8004ea0 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8004d22:	42ab      	cmp	r3, r5
 8004d24:	f000 80de 	beq.w	8004ee4 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8004d28:	4e5b      	ldr	r6, [pc, #364]	; (8004e98 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8004d2a:	42b3      	cmp	r3, r6
 8004d2c:	f000 814d 	beq.w	8004fca <HAL_ADCEx_InjectedConfigChannel+0x422>
 8004d30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d34:	42ab      	cmp	r3, r5
 8004d36:	f000 80d7 	beq.w	8004ee8 <HAL_ADCEx_InjectedConfigChannel+0x340>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004d3a:	689d      	ldr	r5, [r3, #8]
 8004d3c:	f005 0503 	and.w	r5, r5, #3
 8004d40:	2d01      	cmp	r5, #1
 8004d42:	f000 8130 	beq.w	8004fa6 <HAL_ADCEx_InjectedConfigChannel+0x3fe>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004d46:	2c10      	cmp	r4, #16
 8004d48:	d002      	beq.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004d4a:	2c11      	cmp	r4, #17
 8004d4c:	f040 80da 	bne.w	8004f04 <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __HAL_UNLOCK(hadc);
 8004d50:	2300      	movs	r3, #0
 8004d52:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004d56:	b002      	add	sp, #8
 8004d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d5c:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d5e:	4952      	ldr	r1, [pc, #328]	; (8004ea8 <HAL_ADCEx_InjectedConfigChannel+0x300>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d60:	d1d5      	bne.n	8004d0e <HAL_ADCEx_InjectedConfigChannel+0x166>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004d62:	688d      	ldr	r5, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d64:	022f      	lsls	r7, r5, #8
 8004d66:	d5d7      	bpl.n	8004d18 <HAL_ADCEx_InjectedConfigChannel+0x170>
 8004d68:	e7f2      	b.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d6a:	681c      	ldr	r4, [r3, #0]
 8004d6c:	07e4      	lsls	r4, r4, #31
 8004d6e:	d4ef      	bmi.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004d70:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004d72:	680c      	ldr	r4, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004d74:	d1ba      	bne.n	8004cec <HAL_ADCEx_InjectedConfigChannel+0x144>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004d76:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8004d7a:	40a5      	lsls	r5, r4
 8004d7c:	4335      	orrs	r5, r6
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8004d7e:	2c09      	cmp	r4, #9
        MODIFY_REG(hadc->Instance->SMPR2,
 8004d80:	688e      	ldr	r6, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8004d82:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8004d86:	d870      	bhi.n	8004e6a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
        MODIFY_REG(hadc->Instance->SMPR1,
 8004d88:	1c65      	adds	r5, r4, #1
 8004d8a:	6959      	ldr	r1, [r3, #20]
 8004d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d90:	2707      	movs	r7, #7
 8004d92:	40ae      	lsls	r6, r5
 8004d94:	fa07 f505 	lsl.w	r5, r7, r5
 8004d98:	ea21 0105 	bic.w	r1, r1, r5
 8004d9c:	4331      	orrs	r1, r6
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8004da2:	6159      	str	r1, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004da4:	d0d4      	beq.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
 8004da6:	493e      	ldr	r1, [pc, #248]	; (8004ea0 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8004da8:	428b      	cmp	r3, r1
 8004daa:	d1ad      	bne.n	8004d08 <HAL_ADCEx_InjectedConfigChannel+0x160>
 8004dac:	e7d0      	b.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8004dae:	695c      	ldr	r4, [r3, #20]
 8004db0:	688f      	ldr	r7, [r1, #8]
 8004db2:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8004db6:	f04f 0e07 	mov.w	lr, #7
 8004dba:	fa0e fe08 	lsl.w	lr, lr, r8
 8004dbe:	fa07 fc08 	lsl.w	ip, r7, r8
 8004dc2:	ea24 040e 	bic.w	r4, r4, lr
 8004dc6:	ea44 040c 	orr.w	r4, r4, ip
 8004dca:	615c      	str	r4, [r3, #20]
 8004dcc:	e768      	b.n	8004ca0 <HAL_ADCEx_InjectedConfigChannel+0xf8>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8004dce:	68dc      	ldr	r4, [r3, #12]
 8004dd0:	7f8e      	ldrb	r6, [r1, #30]
 8004dd2:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8004dd6:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8004dda:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8004ddc:	7f0c      	ldrb	r4, [r1, #28]
 8004dde:	2c01      	cmp	r4, #1
 8004de0:	f47f af3a 	bne.w	8004c58 <HAL_ADCEx_InjectedConfigChannel+0xb0>
        tmp_hal_status = HAL_ERROR;
 8004de4:	4620      	mov	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004de6:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8004de8:	f044 0420 	orr.w	r4, r4, #32
 8004dec:	6414      	str	r4, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8004dee:	e733      	b.n	8004c58 <HAL_ADCEx_InjectedConfigChannel+0xb0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004df0:	2c12      	cmp	r4, #18
 8004df2:	d1ad      	bne.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004df4:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8004df6:	026d      	lsls	r5, r5, #9
 8004df8:	d4aa      	bmi.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
 8004dfa:	e78d      	b.n	8004d18 <HAL_ADCEx_InjectedConfigChannel+0x170>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004dfc:	6a0c      	ldr	r4, [r1, #32]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8004dfe:	6808      	ldr	r0, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004e00:	2c01      	cmp	r4, #1
 8004e02:	f000 809b 	beq.w	8004f3c <HAL_ADCEx_InjectedConfigChannel+0x394>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	4e23      	ldr	r6, [pc, #140]	; (8004e98 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8004e0a:	42b3      	cmp	r3, r6
 8004e0c:	ea4f 2000 	mov.w	r0, r0, lsl #8
 8004e10:	f000 8097 	beq.w	8004f42 <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8004e14:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8004e18:	42b3      	cmp	r3, r6
 8004e1a:	f000 8092 	beq.w	8004f42 <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8004e1e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8004e20:	4330      	orrs	r0, r6
 8004e22:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->Instance->JSQR           ,
 8004e24:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004e26:	4e21      	ldr	r6, [pc, #132]	; (8004eac <HAL_ADCEx_InjectedConfigChannel+0x304>)
 8004e28:	4034      	ands	r4, r6
 8004e2a:	4304      	orrs	r4, r0
 8004e2c:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004e2e:	6490      	str	r0, [r2, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e30:	2000      	movs	r0, #0
 8004e32:	e700      	b.n	8004c36 <HAL_ADCEx_InjectedConfigChannel+0x8e>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8004e34:	684b      	ldr	r3, [r1, #4]
 8004e36:	680f      	ldr	r7, [r1, #0]
 8004e38:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8004e3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	3302      	adds	r3, #2
 8004e42:	f04f 0c1f 	mov.w	ip, #31
 8004e46:	409f      	lsls	r7, r3
 8004e48:	fa0c f303 	lsl.w	r3, ip, r3
 8004e4c:	ea26 0603 	bic.w	r6, r6, r3
      hadc->InjectionConfig.ChannelCount --;
 8004e50:	3801      	subs	r0, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8004e52:	433e      	orrs	r6, r7
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8004e54:	6813      	ldr	r3, [r2, #0]
      hadc->InjectionConfig.ChannelCount --;
 8004e56:	64d0      	str	r0, [r2, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8004e58:	6496      	str	r6, [r2, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8004e5a:	2800      	cmp	r0, #0
 8004e5c:	d1e8      	bne.n	8004e30 <HAL_ADCEx_InjectedConfigChannel+0x288>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8004e5e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004e60:	4f12      	ldr	r7, [pc, #72]	; (8004eac <HAL_ADCEx_InjectedConfigChannel+0x304>)
 8004e62:	403c      	ands	r4, r7
 8004e64:	4334      	orrs	r4, r6
 8004e66:	64dc      	str	r4, [r3, #76]	; 0x4c
 8004e68:	e6e5      	b.n	8004c36 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8004e6a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004e6e:	6999      	ldr	r1, [r3, #24]
 8004e70:	3d1b      	subs	r5, #27
 8004e72:	2707      	movs	r7, #7
 8004e74:	40ae      	lsls	r6, r5
 8004e76:	fa07 f505 	lsl.w	r5, r7, r5
 8004e7a:	ea21 0105 	bic.w	r1, r1, r5
 8004e7e:	4331      	orrs	r1, r6
 8004e80:	6199      	str	r1, [r3, #24]
 8004e82:	e73b      	b.n	8004cfc <HAL_ADCEx_InjectedConfigChannel+0x154>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8004e84:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 8004e86:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8004e8a:	4e04      	ldr	r6, [pc, #16]	; (8004e9c <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
 8004e8c:	403e      	ands	r6, r7
 8004e8e:	4334      	orrs	r4, r6
 8004e90:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004e94:	66dc      	str	r4, [r3, #108]	; 0x6c
      break;
 8004e96:	e721      	b.n	8004cdc <HAL_ADCEx_InjectedConfigChannel+0x134>
 8004e98:	50000400 	.word	0x50000400
 8004e9c:	83fff000 	.word	0x83fff000
 8004ea0:	50000100 	.word	0x50000100
 8004ea4:	50000700 	.word	0x50000700
 8004ea8:	50000300 	.word	0x50000300
 8004eac:	82082000 	.word	0x82082000
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8004eb0:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8004eb2:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8004eb6:	4e5f      	ldr	r6, [pc, #380]	; (8005034 <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8004eb8:	403e      	ands	r6, r7
 8004eba:	4334      	orrs	r4, r6
 8004ebc:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004ec0:	669c      	str	r4, [r3, #104]	; 0x68
      break;
 8004ec2:	e70b      	b.n	8004cdc <HAL_ADCEx_InjectedConfigChannel+0x134>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8004ec4:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8004ec6:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8004eca:	4e5a      	ldr	r6, [pc, #360]	; (8005034 <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8004ecc:	403e      	ands	r6, r7
 8004ece:	4334      	orrs	r4, r6
 8004ed0:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8004ed4:	665c      	str	r4, [r3, #100]	; 0x64
      break;
 8004ed6:	e701      	b.n	8004cdc <HAL_ADCEx_InjectedConfigChannel+0x134>
        tmp_hal_status = HAL_ERROR;
 8004ed8:	4620      	mov	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eda:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8004edc:	f044 0420 	orr.w	r4, r4, #32
 8004ee0:	6414      	str	r4, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8004ee2:	e6c9      	b.n	8004c78 <HAL_ADCEx_InjectedConfigChannel+0xd0>
 8004ee4:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004ee8:	689d      	ldr	r5, [r3, #8]
 8004eea:	f005 0503 	and.w	r5, r5, #3
 8004eee:	2d01      	cmp	r5, #1
 8004ef0:	d01b      	beq.n	8004f2a <HAL_ADCEx_InjectedConfigChannel+0x382>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004ef2:	68b5      	ldr	r5, [r6, #8]
 8004ef4:	f005 0503 	and.w	r5, r5, #3
 8004ef8:	2d01      	cmp	r5, #1
 8004efa:	d02a      	beq.n	8004f52 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004efc:	2c10      	cmp	r4, #16
 8004efe:	d02c      	beq.n	8004f5a <HAL_ADCEx_InjectedConfigChannel+0x3b2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004f00:	2c11      	cmp	r4, #17
 8004f02:	d047      	beq.n	8004f94 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004f04:	2c12      	cmp	r4, #18
 8004f06:	f47f af23 	bne.w	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004f0a:	688b      	ldr	r3, [r1, #8]
 8004f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f10:	608b      	str	r3, [r1, #8]
 8004f12:	e71d      	b.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8004f14:	7f4e      	ldrb	r6, [r1, #29]
 8004f16:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8004f1a:	60dc      	str	r4, [r3, #12]
 8004f1c:	e6ac      	b.n	8004c78 <HAL_ADCEx_InjectedConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8004f1e:	2002      	movs	r0, #2
}
 8004f20:	b002      	add	sp, #8
 8004f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f26:	4e44      	ldr	r6, [pc, #272]	; (8005038 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8004f28:	e7de      	b.n	8004ee8 <HAL_ADCEx_InjectedConfigChannel+0x340>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004f2a:	681d      	ldr	r5, [r3, #0]
 8004f2c:	07ef      	lsls	r7, r5, #31
 8004f2e:	d5e0      	bpl.n	8004ef2 <HAL_ADCEx_InjectedConfigChannel+0x34a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f30:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004f32:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8004f36:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f38:	6413      	str	r3, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8004f3a:	e709      	b.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8004f3c:	6813      	ldr	r3, [r2, #0]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8004f3e:	0200      	lsls	r0, r0, #8
 8004f40:	e770      	b.n	8004e24 <HAL_ADCEx_InjectedConfigChannel+0x27c>
 8004f42:	2c14      	cmp	r4, #20
 8004f44:	d043      	beq.n	8004fce <HAL_ADCEx_InjectedConfigChannel+0x426>
 8004f46:	2c1c      	cmp	r4, #28
 8004f48:	d031      	beq.n	8004fae <HAL_ADCEx_InjectedConfigChannel+0x406>
{
 8004f4a:	2c08      	cmp	r4, #8
 8004f4c:	bf08      	it	eq
 8004f4e:	2434      	moveq	r4, #52	; 0x34
 8004f50:	e765      	b.n	8004e1e <HAL_ADCEx_InjectedConfigChannel+0x276>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004f52:	6835      	ldr	r5, [r6, #0]
 8004f54:	07ed      	lsls	r5, r5, #31
 8004f56:	d4eb      	bmi.n	8004f30 <HAL_ADCEx_InjectedConfigChannel+0x388>
 8004f58:	e7d0      	b.n	8004efc <HAL_ADCEx_InjectedConfigChannel+0x354>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f5e:	f47f aef7 	bne.w	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f62:	4b36      	ldr	r3, [pc, #216]	; (800503c <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8004f64:	4d36      	ldr	r5, [pc, #216]	; (8005040 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 8004f66:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004f68:	688c      	ldr	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f6a:	fba5 5303 	umull	r5, r3, r5, r3
 8004f6e:	0c9b      	lsrs	r3, r3, #18
 8004f70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f74:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004f76:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8004f7a:	608c      	str	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f7c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004f7e:	9b01      	ldr	r3, [sp, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f43f aee5 	beq.w	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
            wait_loop_index--;
 8004f86:	9b01      	ldr	r3, [sp, #4]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8004f8c:	9b01      	ldr	r3, [sp, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f9      	bne.n	8004f86 <HAL_ADCEx_InjectedConfigChannel+0x3de>
 8004f92:	e6dd      	b.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f98:	f47f aeda 	bne.w	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004f9c:	688b      	ldr	r3, [r1, #8]
 8004f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	608b      	str	r3, [r1, #8]
 8004fa4:	e6d4      	b.n	8004d50 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	07db      	lsls	r3, r3, #31
 8004faa:	d4c1      	bmi.n	8004f30 <HAL_ADCEx_InjectedConfigChannel+0x388>
 8004fac:	e6cb      	b.n	8004d46 <HAL_ADCEx_InjectedConfigChannel+0x19e>
{
 8004fae:	2410      	movs	r4, #16
 8004fb0:	e735      	b.n	8004e1e <HAL_ADCEx_InjectedConfigChannel+0x276>
 8004fb2:	2c14      	cmp	r4, #20
 8004fb4:	d00f      	beq.n	8004fd6 <HAL_ADCEx_InjectedConfigChannel+0x42e>
 8004fb6:	2c1c      	cmp	r4, #28
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_ADCEx_InjectedConfigChannel+0x42a>
 8004fba:	2c08      	cmp	r4, #8
 8004fbc:	bf08      	it	eq
 8004fbe:	2434      	moveq	r4, #52	; 0x34
 8004fc0:	e61b      	b.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x52>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8004fc2:	1e78      	subs	r0, r7, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	4607      	mov	r7, r0
 8004fc8:	e61a      	b.n	8004c00 <HAL_ADCEx_InjectedConfigChannel+0x58>
 8004fca:	4e1e      	ldr	r6, [pc, #120]	; (8005044 <HAL_ADCEx_InjectedConfigChannel+0x49c>)
 8004fcc:	e78c      	b.n	8004ee8 <HAL_ADCEx_InjectedConfigChannel+0x340>
{
 8004fce:	241c      	movs	r4, #28
 8004fd0:	e725      	b.n	8004e1e <HAL_ADCEx_InjectedConfigChannel+0x276>
 8004fd2:	2410      	movs	r4, #16
 8004fd4:	e611      	b.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x52>
 8004fd6:	241c      	movs	r4, #28
 8004fd8:	e60f      	b.n	8004bfa <HAL_ADCEx_InjectedConfigChannel+0x52>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004fda:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8004fdc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004fe0:	ebb4 6f86 	cmp.w	r4, r6, lsl #26
 8004fe4:	ea4f 6786 	mov.w	r7, r6, lsl #26
 8004fe8:	d014      	beq.n	8005014 <HAL_ADCEx_InjectedConfigChannel+0x46c>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004fea:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8004fec:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004ff0:	42a7      	cmp	r7, r4
 8004ff2:	d014      	beq.n	800501e <HAL_ADCEx_InjectedConfigChannel+0x476>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004ff4:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8004ff6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8004ffa:	42a7      	cmp	r7, r4
 8004ffc:	d014      	beq.n	8005028 <HAL_ADCEx_InjectedConfigChannel+0x480>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8004ffe:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8005000:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005004:	42a7      	cmp	r7, r4
 8005006:	f47f ae69 	bne.w	8004cdc <HAL_ADCEx_InjectedConfigChannel+0x134>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800500a:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 800500c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005010:	66dc      	str	r4, [r3, #108]	; 0x6c
 8005012:	e663      	b.n	8004cdc <HAL_ADCEx_InjectedConfigChannel+0x134>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005014:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8005016:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800501a:	661c      	str	r4, [r3, #96]	; 0x60
 800501c:	e7e5      	b.n	8004fea <HAL_ADCEx_InjectedConfigChannel+0x442>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800501e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8005020:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005024:	665c      	str	r4, [r3, #100]	; 0x64
 8005026:	e7e5      	b.n	8004ff4 <HAL_ADCEx_InjectedConfigChannel+0x44c>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005028:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800502a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800502e:	669c      	str	r4, [r3, #104]	; 0x68
 8005030:	e7e5      	b.n	8004ffe <HAL_ADCEx_InjectedConfigChannel+0x456>
 8005032:	bf00      	nop
 8005034:	83fff000 	.word	0x83fff000
 8005038:	50000100 	.word	0x50000100
 800503c:	20000008 	.word	0x20000008
 8005040:	431bde83 	.word	0x431bde83
 8005044:	50000500 	.word	0x50000500

08005048 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005048:	6802      	ldr	r2, [r0, #0]
 800504a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 800504e:	b4f0      	push	{r4, r5, r6, r7}
 8005050:	4603      	mov	r3, r0
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005052:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005054:	4841      	ldr	r0, [pc, #260]	; (800515c <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8005056:	d00d      	beq.n	8005074 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8005058:	4282      	cmp	r2, r0
 800505a:	d009      	beq.n	8005070 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 800505c:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8005060:	4282      	cmp	r2, r0
 8005062:	d049      	beq.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8005064:	4c3e      	ldr	r4, [pc, #248]	; (8005160 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8005066:	42a2      	cmp	r2, r4
 8005068:	d004      	beq.n	8005074 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 800506a:	2001      	movs	r0, #1
} 
 800506c:	bcf0      	pop	{r4, r5, r6, r7}
 800506e:	4770      	bx	lr
 8005070:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8005074:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
 8005078:	f1bc 0f01 	cmp.w	ip, #1
 800507c:	d042      	beq.n	8005104 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 800507e:	2401      	movs	r4, #1
 8005080:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005084:	6894      	ldr	r4, [r2, #8]
 8005086:	0764      	lsls	r4, r4, #29
 8005088:	d509      	bpl.n	800509e <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800508a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800508c:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8005090:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005092:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 800509a:	bcf0      	pop	{r4, r5, r6, r7}
 800509c:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800509e:	6884      	ldr	r4, [r0, #8]
 80050a0:	0767      	lsls	r7, r4, #29
 80050a2:	d4f2      	bmi.n	800508a <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050a4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80050a8:	d045      	beq.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80050aa:	4f2c      	ldr	r7, [pc, #176]	; (800515c <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 80050ac:	4c2d      	ldr	r4, [pc, #180]	; (8005164 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80050ae:	4e2e      	ldr	r6, [pc, #184]	; (8005168 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 80050b0:	42ba      	cmp	r2, r7
 80050b2:	bf18      	it	ne
 80050b4:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80050b6:	b345      	cbz	r5, 800510a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80050b8:	68a6      	ldr	r6, [r4, #8]
 80050ba:	684f      	ldr	r7, [r1, #4]
 80050bc:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 80050c0:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 80050c4:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 80050c8:	ea46 060c 	orr.w	r6, r6, ip
 80050cc:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80050ce:	6896      	ldr	r6, [r2, #8]
 80050d0:	f006 0603 	and.w	r6, r6, #3
 80050d4:	2e01      	cmp	r6, #1
 80050d6:	d03c      	beq.n	8005152 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80050d8:	6882      	ldr	r2, [r0, #8]
 80050da:	f002 0203 	and.w	r2, r2, #3
 80050de:	2a01      	cmp	r2, #1
 80050e0:	d02f      	beq.n	8005142 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80050e2:	68a0      	ldr	r0, [r4, #8]
 80050e4:	688a      	ldr	r2, [r1, #8]
 80050e6:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80050ea:	432a      	orrs	r2, r5
 80050ec:	f021 010f 	bic.w	r1, r1, #15
 80050f0:	430a      	orrs	r2, r1
 80050f2:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050f4:	2000      	movs	r0, #0
 80050f6:	e7cd      	b.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 80050f8:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
 80050fc:	4818      	ldr	r0, [pc, #96]	; (8005160 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80050fe:	f1bc 0f01 	cmp.w	ip, #1
 8005102:	d1bc      	bne.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005104:	2002      	movs	r0, #2
} 
 8005106:	bcf0      	pop	{r4, r5, r6, r7}
 8005108:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800510a:	68a1      	ldr	r1, [r4, #8]
 800510c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005110:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005112:	6891      	ldr	r1, [r2, #8]
 8005114:	f001 0103 	and.w	r1, r1, #3
 8005118:	2901      	cmp	r1, #1
 800511a:	d016      	beq.n	800514a <HAL_ADCEx_MultiModeConfigChannel+0x102>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800511c:	6882      	ldr	r2, [r0, #8]
 800511e:	f002 0203 	and.w	r2, r2, #3
 8005122:	2a01      	cmp	r2, #1
 8005124:	d009      	beq.n	800513a <HAL_ADCEx_MultiModeConfigChannel+0xf2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005126:	68a2      	ldr	r2, [r4, #8]
 8005128:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 800512c:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005130:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005132:	60a2      	str	r2, [r4, #8]
 8005134:	e7ae      	b.n	8005094 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005136:	4c0b      	ldr	r4, [pc, #44]	; (8005164 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8005138:	e7bd      	b.n	80050b6 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800513a:	6802      	ldr	r2, [r0, #0]
 800513c:	07d2      	lsls	r2, r2, #31
 800513e:	d4d9      	bmi.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005140:	e7f1      	b.n	8005126 <HAL_ADCEx_MultiModeConfigChannel+0xde>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005142:	6802      	ldr	r2, [r0, #0]
 8005144:	07d0      	lsls	r0, r2, #31
 8005146:	d4d5      	bmi.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005148:	e7cb      	b.n	80050e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800514a:	6812      	ldr	r2, [r2, #0]
 800514c:	07d1      	lsls	r1, r2, #31
 800514e:	d4d1      	bmi.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005150:	e7e4      	b.n	800511c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005152:	6812      	ldr	r2, [r2, #0]
 8005154:	07d6      	lsls	r6, r2, #31
 8005156:	d5bf      	bpl.n	80050d8 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8005158:	e7cc      	b.n	80050f4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800515a:	bf00      	nop
 800515c:	50000100 	.word	0x50000100
 8005160:	50000500 	.word	0x50000500
 8005164:	50000300 	.word	0x50000300
 8005168:	50000700 	.word	0x50000700

0800516c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800516c:	2800      	cmp	r0, #0
 800516e:	d07b      	beq.n	8005268 <HAL_CAN_Init+0xfc>
{
 8005170:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005172:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005176:	4604      	mov	r4, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d072      	beq.n	8005262 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800517c:	6822      	ldr	r2, [r4, #0]
 800517e:	6813      	ldr	r3, [r2, #0]
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005186:	f7fe fff5 	bl	8004174 <HAL_GetTick>
 800518a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800518c:	e004      	b.n	8005198 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800518e:	f7fe fff1 	bl	8004174 <HAL_GetTick>
 8005192:	1b43      	subs	r3, r0, r5
 8005194:	2b0a      	cmp	r3, #10
 8005196:	d85b      	bhi.n	8005250 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	07d1      	lsls	r1, r2, #31
 800519e:	d5f6      	bpl.n	800518e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	f022 0202 	bic.w	r2, r2, #2
 80051a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051a8:	f7fe ffe4 	bl	8004174 <HAL_GetTick>
 80051ac:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051ae:	e004      	b.n	80051ba <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051b0:	f7fe ffe0 	bl	8004174 <HAL_GetTick>
 80051b4:	1b40      	subs	r0, r0, r5
 80051b6:	280a      	cmp	r0, #10
 80051b8:	d84a      	bhi.n	8005250 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	0792      	lsls	r2, r2, #30
 80051c0:	d4f6      	bmi.n	80051b0 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80051c2:	7e22      	ldrb	r2, [r4, #24]
 80051c4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	bf0c      	ite	eq
 80051ca:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80051ce:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80051d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80051d4:	7e62      	ldrb	r2, [r4, #25]
 80051d6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	bf0c      	ite	eq
 80051dc:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80051e0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80051e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80051e6:	7ea2      	ldrb	r2, [r4, #26]
 80051e8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	bf0c      	ite	eq
 80051ee:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80051f2:	f022 0220 	bicne.w	r2, r2, #32
 80051f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80051f8:	7ee2      	ldrb	r2, [r4, #27]
 80051fa:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	bf0c      	ite	eq
 8005200:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005204:	f042 0210 	orrne.w	r2, r2, #16
 8005208:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800520a:	7f22      	ldrb	r2, [r4, #28]
 800520c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	bf0c      	ite	eq
 8005212:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005216:	f022 0208 	bicne.w	r2, r2, #8
 800521a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800521c:	7f62      	ldrb	r2, [r4, #29]
 800521e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	bf0c      	ite	eq
 8005224:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005228:	f022 0204 	bicne.w	r2, r2, #4
 800522c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800522e:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8005232:	6921      	ldr	r1, [r4, #16]
 8005234:	4302      	orrs	r2, r0
 8005236:	430a      	orrs	r2, r1
 8005238:	6960      	ldr	r0, [r4, #20]
 800523a:	6861      	ldr	r1, [r4, #4]
 800523c:	4302      	orrs	r2, r0
 800523e:	3901      	subs	r1, #1
 8005240:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005242:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005244:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005246:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005248:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800524a:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 800524e:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005250:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8005252:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005258:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800525a:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 800525e:	2001      	movs	r0, #1
}
 8005260:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8005262:	f7fc f829 	bl	80012b8 <HAL_CAN_MspInit>
 8005266:	e789      	b.n	800517c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8005268:	2001      	movs	r0, #1
}
 800526a:	4770      	bx	lr

0800526c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800526c:	b470      	push	{r4, r5, r6}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800526e:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 8005272:	6804      	ldr	r4, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8005274:	3a01      	subs	r2, #1
 8005276:	2a01      	cmp	r2, #1
 8005278:	d907      	bls.n	800528a <HAL_CAN_ConfigFilter+0x1e>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800527a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800527c:	4603      	mov	r3, r0
 800527e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8005282:	2001      	movs	r0, #1
  }
}
 8005284:	bc70      	pop	{r4, r5, r6}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005286:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005288:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800528a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800528e:	694a      	ldr	r2, [r1, #20]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005290:	69cd      	ldr	r5, [r1, #28]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005292:	f043 0301 	orr.w	r3, r3, #1
 8005296:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800529a:	f002 001f 	and.w	r0, r2, #31
 800529e:	2301      	movs	r3, #1
 80052a0:	4083      	lsls	r3, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80052a2:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 80052a6:	ea20 0003 	bic.w	r0, r0, r3
 80052aa:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
 80052ae:	43d8      	mvns	r0, r3
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80052b0:	2d00      	cmp	r5, #0
 80052b2:	d13d      	bne.n	8005330 <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80052b4:	f8d4 520c 	ldr.w	r5, [r4, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80052b8:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80052ba:	4005      	ands	r5, r0
 80052bc:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80052c0:	888d      	ldrh	r5, [r1, #4]
 80052c2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80052c6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80052ca:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80052ce:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80052d0:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80052d2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80052d6:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80052da:	698a      	ldr	r2, [r1, #24]
 80052dc:	bb12      	cbnz	r2, 8005324 <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80052de:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 80052e2:	4002      	ands	r2, r0
 80052e4:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80052e8:	690a      	ldr	r2, [r1, #16]
 80052ea:	b9aa      	cbnz	r2, 8005318 <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80052ec:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 80052f0:	4010      	ands	r0, r2
 80052f2:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80052f6:	6a0a      	ldr	r2, [r1, #32]
 80052f8:	2a01      	cmp	r2, #1
 80052fa:	d104      	bne.n	8005306 <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80052fc:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005306:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800530a:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 800530e:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005310:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
}
 8005314:	bc70      	pop	{r4, r5, r6}
 8005316:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005318:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 800531c:	431a      	orrs	r2, r3
 800531e:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
 8005322:	e7e8      	b.n	80052f6 <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005324:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8005328:	431a      	orrs	r2, r3
 800532a:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
 800532e:	e7db      	b.n	80052e8 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005330:	2d01      	cmp	r5, #1
 8005332:	d1d2      	bne.n	80052da <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005334:	f8d4 520c 	ldr.w	r5, [r4, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005338:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800533a:	431d      	orrs	r5, r3
 800533c:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005340:	888d      	ldrh	r5, [r1, #4]
 8005342:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005346:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800534a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800534e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005350:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005352:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005356:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
 800535a:	e7be      	b.n	80052da <HAL_CAN_ConfigFilter+0x6e>

0800535c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800535c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800535e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005362:	2b01      	cmp	r3, #1
{
 8005364:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8005366:	d006      	beq.n	8005376 <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005368:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800536a:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800536c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005370:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8005372:	4630      	mov	r0, r6
 8005374:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005376:	6802      	ldr	r2, [r0, #0]
 8005378:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 800537a:	2302      	movs	r3, #2
 800537c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005380:	6813      	ldr	r3, [r2, #0]
 8005382:	f023 0301 	bic.w	r3, r3, #1
 8005386:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005388:	f7fe fef4 	bl	8004174 <HAL_GetTick>
 800538c:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800538e:	e004      	b.n	800539a <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005390:	f7fe fef0 	bl	8004174 <HAL_GetTick>
 8005394:	1b43      	subs	r3, r0, r5
 8005396:	2b0a      	cmp	r3, #10
 8005398:	d808      	bhi.n	80053ac <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f013 0301 	ands.w	r3, r3, #1
 80053a2:	d1f5      	bne.n	8005390 <HAL_CAN_Start+0x34>
    return HAL_OK;
 80053a4:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80053a6:	6263      	str	r3, [r4, #36]	; 0x24
}
 80053a8:	4630      	mov	r0, r6
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80053ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80053ae:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80053b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b4:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80053b6:	f884 2020 	strb.w	r2, [r4, #32]
}
 80053ba:	4630      	mov	r0, r6
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
 80053be:	bf00      	nop

080053c0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80053c0:	b430      	push	{r4, r5}
 80053c2:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80053c4:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80053c8:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80053cc:	3801      	subs	r0, #1
 80053ce:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80053d0:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80053d2:	d83b      	bhi.n	800544c <HAL_CAN_AddTxMessage+0x8c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053d4:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80053d8:	d108      	bne.n	80053ec <HAL_CAN_AddTxMessage+0x2c>
      return HAL_OK;
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053da:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80053de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

      return HAL_ERROR;
 80053e2:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 80053e4:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053e6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80053ea:	4770      	bx	lr
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80053ec:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80053f0:	2001      	movs	r0, #1
 80053f2:	40a0      	lsls	r0, r4
 80053f4:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80053f6:	688b      	ldr	r3, [r1, #8]
 80053f8:	b38b      	cbz	r3, 800545e <HAL_CAN_AddTxMessage+0x9e>
                                                           pHeader->IDE |
 80053fa:	68c8      	ldr	r0, [r1, #12]
 80053fc:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80053fe:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 8005400:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005404:	f104 0018 	add.w	r0, r4, #24
 8005408:	0100      	lsls	r0, r0, #4
 800540a:	502b      	str	r3, [r5, r0]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800540c:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 8005410:	690b      	ldr	r3, [r1, #16]
 8005412:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005416:	7d0b      	ldrb	r3, [r1, #20]
 8005418:	2b01      	cmp	r3, #1
 800541a:	ea4f 1104 	mov.w	r1, r4, lsl #4
 800541e:	d105      	bne.n	800542c <HAL_CAN_AddTxMessage+0x6c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005420:	f8dc 3184 	ldr.w	r3, [ip, #388]	; 0x184
 8005424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005428:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800542c:	186b      	adds	r3, r5, r1
 800542e:	6851      	ldr	r1, [r2, #4]
 8005430:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800543a:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 800543e:	f043 0301 	orr.w	r3, r3, #1
      return HAL_OK;
 8005442:	2000      	movs	r0, #0
}
 8005444:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005446:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 800544a:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800544c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8005450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8005454:	2001      	movs	r0, #1
}
 8005456:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005458:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800545c:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800545e:	68cb      	ldr	r3, [r1, #12]
 8005460:	6808      	ldr	r0, [r1, #0]
 8005462:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 8005466:	f104 0318 	add.w	r3, r4, #24
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	50e8      	str	r0, [r5, r3]
 800546e:	e7cd      	b.n	800540c <HAL_CAN_AddTxMessage+0x4c>

08005470 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005470:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8005472:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005476:	f10e 3eff 	add.w	lr, lr, #4294967295
 800547a:	f1be 0f01 	cmp.w	lr, #1
{
 800547e:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8005480:	d873      	bhi.n	800556a <HAL_CAN_GetRxMessage+0xfa>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005482:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005484:	b951      	cbnz	r1, 800549c <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005486:	68c4      	ldr	r4, [r0, #12]
 8005488:	07a4      	lsls	r4, r4, #30
 800548a:	d10a      	bne.n	80054a2 <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800548c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8005490:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 8005494:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005496:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800549a:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800549c:	6904      	ldr	r4, [r0, #16]
 800549e:	07a6      	lsls	r6, r4, #30
 80054a0:	d0f4      	beq.n	800548c <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80054a2:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 80054a6:	010c      	lsls	r4, r1, #4
 80054a8:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80054ac:	f005 0504 	and.w	r5, r5, #4
 80054b0:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80054b2:	2d00      	cmp	r5, #0
 80054b4:	d060      	beq.n	8005578 <HAL_CAN_GetRxMessage+0x108>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80054b6:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80054ba:	08ed      	lsrs	r5, r5, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80054bc:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80054be:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80054c2:	f005 0502 	and.w	r5, r5, #2
 80054c6:	60d5      	str	r5, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80054c8:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
 80054cc:	072d      	lsls	r5, r5, #28
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80054ce:	bf58      	it	pl
 80054d0:	f8de 51b4 	ldrpl.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80054d4:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80054d8:	bf54      	ite	pl
 80054da:	f005 050f 	andpl.w	r5, r5, #15
      pHeader->DLC = 8U;
 80054de:	2508      	movmi	r5, #8
 80054e0:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80054e2:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80054e4:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80054e8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80054ec:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80054ee:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80054f0:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80054f4:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80054f6:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80054f8:	f8dc 2000 	ldr.w	r2, [ip]
 80054fc:	4422      	add	r2, r4
 80054fe:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8005502:	0a12      	lsrs	r2, r2, #8
 8005504:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005506:	f8dc 2000 	ldr.w	r2, [ip]
 800550a:	4422      	add	r2, r4
 800550c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8005510:	0c12      	lsrs	r2, r2, #16
 8005512:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005514:	f8dc 2000 	ldr.w	r2, [ip]
 8005518:	4422      	add	r2, r4
 800551a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800551e:	0e12      	lsrs	r2, r2, #24
 8005520:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005522:	f8dc 2000 	ldr.w	r2, [ip]
 8005526:	4422      	add	r2, r4
 8005528:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800552c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800552e:	f8dc 2000 	ldr.w	r2, [ip]
 8005532:	4422      	add	r2, r4
 8005534:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8005538:	0a12      	lsrs	r2, r2, #8
 800553a:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800553c:	f8dc 2000 	ldr.w	r2, [ip]
 8005540:	4422      	add	r2, r4
 8005542:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8005546:	0c12      	lsrs	r2, r2, #16
 8005548:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800554a:	f8dc 2000 	ldr.w	r2, [ip]
 800554e:	4422      	add	r2, r4
 8005550:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8005554:	0e12      	lsrs	r2, r2, #24
 8005556:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005558:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800555c:	b989      	cbnz	r1, 8005582 <HAL_CAN_GetRxMessage+0x112>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800555e:	68d3      	ldr	r3, [r2, #12]
 8005560:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8005564:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005566:	60d3      	str	r3, [r2, #12]
}
 8005568:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800556a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800556c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8005570:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005572:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8005576:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005578:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800557c:	0d6d      	lsrs	r5, r5, #21
 800557e:	6015      	str	r5, [r2, #0]
 8005580:	e79d      	b.n	80054be <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005582:	6913      	ldr	r3, [r2, #16]
 8005584:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8005588:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800558a:	6113      	str	r3, [r2, #16]
}
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	bf00      	nop

08005590 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8005590:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005594:	3a01      	subs	r2, #1
 8005596:	2a01      	cmp	r2, #1
{
 8005598:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 800559a:	d905      	bls.n	80055a8 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800559c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800559e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 80055a2:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055a4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80055a6:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80055a8:	6802      	ldr	r2, [r0, #0]
 80055aa:	6953      	ldr	r3, [r2, #20]
 80055ac:	430b      	orrs	r3, r1
    return HAL_OK;
 80055ae:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80055b0:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80055b2:	4770      	bx	lr

080055b4 <HAL_CAN_TxMailbox0CompleteCallback>:
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop

080055b8 <HAL_CAN_TxMailbox1CompleteCallback>:
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop

080055bc <HAL_CAN_TxMailbox2CompleteCallback>:
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop

080055c0 <HAL_CAN_TxMailbox0AbortCallback>:
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop

080055c4 <HAL_CAN_TxMailbox1AbortCallback>:
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop

080055c8 <HAL_CAN_TxMailbox2AbortCallback>:
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop

080055cc <HAL_CAN_RxFifo0FullCallback>:
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop

080055d0 <HAL_CAN_RxFifo1FullCallback>:
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop

080055d4 <HAL_CAN_SleepCallback>:
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop

080055d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop

080055dc <HAL_CAN_ErrorCallback>:
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop

080055e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80055e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80055e4:	6803      	ldr	r3, [r0, #0]
 80055e6:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80055e8:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80055ec:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80055ee:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80055f2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80055f6:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80055fa:	f014 0601 	ands.w	r6, r4, #1
{
 80055fe:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005600:	d025      	beq.n	800564e <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005602:	f017 0601 	ands.w	r6, r7, #1
 8005606:	f040 808f 	bne.w	8005728 <HAL_CAN_IRQHandler+0x148>
 800560a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800560e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005612:	05f8      	lsls	r0, r7, #23
 8005614:	d50d      	bpl.n	8005632 <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005616:	682b      	ldr	r3, [r5, #0]
 8005618:	f44f 7080 	mov.w	r0, #256	; 0x100
 800561c:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800561e:	05bb      	lsls	r3, r7, #22
 8005620:	f100 80be 	bmi.w	80057a0 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005624:	0578      	lsls	r0, r7, #21
 8005626:	f100 80e4 	bmi.w	80057f2 <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800562a:	053b      	lsls	r3, r7, #20
 800562c:	f140 80f0 	bpl.w	8005810 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005630:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005632:	03f8      	lsls	r0, r7, #15
 8005634:	d50b      	bpl.n	800564e <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005636:	682b      	ldr	r3, [r5, #0]
 8005638:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800563c:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800563e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005640:	f100 80ba 	bmi.w	80057b8 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005644:	037a      	lsls	r2, r7, #13
 8005646:	f140 80cf 	bpl.w	80057e8 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800564a:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800564e:	0727      	lsls	r7, r4, #28
 8005650:	d502      	bpl.n	8005658 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005652:	f01b 0f10 	tst.w	fp, #16
 8005656:	d161      	bne.n	800571c <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005658:	0760      	lsls	r0, r4, #29
 800565a:	d503      	bpl.n	8005664 <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800565c:	f01b 0f08 	tst.w	fp, #8
 8005660:	f040 808c 	bne.w	800577c <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005664:	07a1      	lsls	r1, r4, #30
 8005666:	d504      	bpl.n	8005672 <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	079a      	lsls	r2, r3, #30
 800566e:	f040 808c 	bne.w	800578a <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005672:	0663      	lsls	r3, r4, #25
 8005674:	d502      	bpl.n	800567c <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005676:	f01a 0f10 	tst.w	sl, #16
 800567a:	d149      	bne.n	8005710 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800567c:	06a7      	lsls	r7, r4, #26
 800567e:	d502      	bpl.n	8005686 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005680:	f01a 0f08 	tst.w	sl, #8
 8005684:	d173      	bne.n	800576e <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005686:	06e0      	lsls	r0, r4, #27
 8005688:	d503      	bpl.n	8005692 <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	0799      	lsls	r1, r3, #30
 8005690:	d162      	bne.n	8005758 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005692:	03a2      	lsls	r2, r4, #14
 8005694:	d502      	bpl.n	800569c <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005696:	f018 0f10 	tst.w	r8, #16
 800569a:	d161      	bne.n	8005760 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800569c:	03e3      	lsls	r3, r4, #15
 800569e:	d502      	bpl.n	80056a6 <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80056a0:	f018 0f08 	tst.w	r8, #8
 80056a4:	d175      	bne.n	8005792 <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80056a6:	0427      	lsls	r7, r4, #16
 80056a8:	d505      	bpl.n	80056b6 <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80056aa:	f018 0f04 	tst.w	r8, #4
 80056ae:	d106      	bne.n	80056be <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80056b0:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80056b2:	2204      	movs	r2, #4
 80056b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	d146      	bne.n	8005748 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80056ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80056be:	05e0      	lsls	r0, r4, #23
 80056c0:	d504      	bpl.n	80056cc <HAL_CAN_IRQHandler+0xec>
 80056c2:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80056c6:	bf18      	it	ne
 80056c8:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80056cc:	05a1      	lsls	r1, r4, #22
 80056ce:	d504      	bpl.n	80056da <HAL_CAN_IRQHandler+0xfa>
 80056d0:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80056d4:	bf18      	it	ne
 80056d6:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80056da:	0562      	lsls	r2, r4, #21
 80056dc:	d504      	bpl.n	80056e8 <HAL_CAN_IRQHandler+0x108>
 80056de:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80056e2:	bf18      	it	ne
 80056e4:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80056e8:	0523      	lsls	r3, r4, #20
 80056ea:	d5e1      	bpl.n	80056b0 <HAL_CAN_IRQHandler+0xd0>
 80056ec:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 80056f0:	d0de      	beq.n	80056b0 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 80056f2:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80056f6:	f000 809a 	beq.w	800582e <HAL_CAN_IRQHandler+0x24e>
 80056fa:	d861      	bhi.n	80057c0 <HAL_CAN_IRQHandler+0x1e0>
 80056fc:	f1b9 0f20 	cmp.w	r9, #32
 8005700:	f000 8083 	beq.w	800580a <HAL_CAN_IRQHandler+0x22a>
 8005704:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8005708:	d168      	bne.n	80057dc <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 800570a:	f046 0620 	orr.w	r6, r6, #32
            break;
 800570e:	e05f      	b.n	80057d0 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005714:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005718:	611a      	str	r2, [r3, #16]
 800571a:	e7af      	b.n	800567c <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005720:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	e797      	b.n	8005658 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005728:	2201      	movs	r2, #1
 800572a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800572c:	07bb      	lsls	r3, r7, #30
 800572e:	d43b      	bmi.n	80057a8 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005730:	077e      	lsls	r6, r7, #29
 8005732:	d460      	bmi.n	80057f6 <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005734:	f017 0608 	ands.w	r6, r7, #8
 8005738:	d06e      	beq.n	8005818 <HAL_CAN_IRQHandler+0x238>
 800573a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800573e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005742:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8005746:	e764      	b.n	8005612 <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 8005748:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800574a:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 800574c:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800574e:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8005750:	f7ff ff44 	bl	80055dc <HAL_CAN_ErrorCallback>
}
 8005754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005758:	4628      	mov	r0, r5
 800575a:	f7fc f9d5 	bl	8001b08 <HAL_CAN_RxFifo1MsgPendingCallback>
 800575e:	e798      	b.n	8005692 <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	2210      	movs	r2, #16
 8005764:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8005766:	4628      	mov	r0, r5
 8005768:	f7ff ff34 	bl	80055d4 <HAL_CAN_SleepCallback>
 800576c:	e796      	b.n	800569c <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800576e:	682b      	ldr	r3, [r5, #0]
 8005770:	2208      	movs	r2, #8
 8005772:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005774:	4628      	mov	r0, r5
 8005776:	f7ff ff2b 	bl	80055d0 <HAL_CAN_RxFifo1FullCallback>
 800577a:	e784      	b.n	8005686 <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	2208      	movs	r2, #8
 8005780:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005782:	4628      	mov	r0, r5
 8005784:	f7ff ff22 	bl	80055cc <HAL_CAN_RxFifo0FullCallback>
 8005788:	e76c      	b.n	8005664 <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800578a:	4628      	mov	r0, r5
 800578c:	f7fc f94c 	bl	8001a28 <HAL_CAN_RxFifo0MsgPendingCallback>
 8005790:	e76f      	b.n	8005672 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005792:	682b      	ldr	r3, [r5, #0]
 8005794:	2208      	movs	r2, #8
 8005796:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005798:	4628      	mov	r0, r5
 800579a:	f7ff ff1d 	bl	80055d8 <HAL_CAN_WakeUpFromRxMsgCallback>
 800579e:	e782      	b.n	80056a6 <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80057a0:	4628      	mov	r0, r5
 80057a2:	f7ff ff09 	bl	80055b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80057a6:	e744      	b.n	8005632 <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80057a8:	f7ff ff04 	bl	80055b4 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80057ac:	2600      	movs	r6, #0
 80057ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057b6:	e72c      	b.n	8005612 <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80057b8:	4628      	mov	r0, r5
 80057ba:	f7ff feff 	bl	80055bc <HAL_CAN_TxMailbox2CompleteCallback>
 80057be:	e746      	b.n	800564e <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 80057c0:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 80057c4:	d01e      	beq.n	8005804 <HAL_CAN_IRQHandler+0x224>
 80057c6:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 80057ca:	bf08      	it	eq
 80057cc:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80057d8:	619a      	str	r2, [r3, #24]
 80057da:	e76a      	b.n	80056b2 <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 80057dc:	f1b9 0f10 	cmp.w	r9, #16
 80057e0:	d1f6      	bne.n	80057d0 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 80057e2:	f046 0608 	orr.w	r6, r6, #8
            break;
 80057e6:	e7f3      	b.n	80057d0 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80057e8:	033b      	lsls	r3, r7, #12
 80057ea:	d51c      	bpl.n	8005826 <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80057ec:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80057f0:	e72d      	b.n	800564e <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80057f2:	4616      	mov	r6, r2
 80057f4:	e71d      	b.n	8005632 <HAL_CAN_IRQHandler+0x52>
 80057f6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80057fa:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80057fe:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8005802:	e706      	b.n	8005612 <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8005804:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8005808:	e7e2      	b.n	80057d0 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 800580a:	f046 0610 	orr.w	r6, r6, #16
            break;
 800580e:	e7df      	b.n	80057d0 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005810:	4628      	mov	r0, r5
 8005812:	f7ff fed7 	bl	80055c4 <HAL_CAN_TxMailbox1AbortCallback>
 8005816:	e70c      	b.n	8005632 <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005818:	f7ff fed2 	bl	80055c0 <HAL_CAN_TxMailbox0AbortCallback>
 800581c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005824:	e6f5      	b.n	8005612 <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005826:	4628      	mov	r0, r5
 8005828:	f7ff fece 	bl	80055c8 <HAL_CAN_TxMailbox2AbortCallback>
 800582c:	e70f      	b.n	800564e <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 800582e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8005832:	e7cd      	b.n	80057d0 <HAL_CAN_IRQHandler+0x1f0>

08005834 <HAL_CAN_GetError>:
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
  /* Return CAN error code */
  return hcan->ErrorCode;
 8005834:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8005836:	4770      	bx	lr

08005838 <HAL_CAN_ResetError>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
  HAL_StatusTypeDef status = HAL_OK;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005838:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800583c:	3a01      	subs	r2, #1
 800583e:	2a01      	cmp	r2, #1
{
 8005840:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8005842:	d905      	bls.n	8005850 <HAL_CAN_ResetError+0x18>
    hcan->ErrorCode = 0U;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005844:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005846:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    status = HAL_ERROR;
 800584a:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800584c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Return the status */
  return status;
}
 800584e:	4770      	bx	lr
    hcan->ErrorCode = 0U;
 8005850:	2000      	movs	r0, #0
 8005852:	6258      	str	r0, [r3, #36]	; 0x24
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop

08005858 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005858:	4907      	ldr	r1, [pc, #28]	; (8005878 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800585a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800585c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800585e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005862:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005866:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005868:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800586a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800586e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005872:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800587c:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <HAL_NVIC_SetPriority+0x74>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005884:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005886:	f1c3 0e07 	rsb	lr, r3, #7
 800588a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800588e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005892:	bf28      	it	cs
 8005894:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005898:	f1bc 0f06 	cmp.w	ip, #6
 800589c:	d91b      	bls.n	80058d6 <HAL_NVIC_SetPriority+0x5a>
 800589e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058a0:	f04f 3cff 	mov.w	ip, #4294967295
 80058a4:	fa0c fc03 	lsl.w	ip, ip, r3
 80058a8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058ac:	f04f 3cff 	mov.w	ip, #4294967295
 80058b0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80058b4:	ea21 010c 	bic.w	r1, r1, ip
 80058b8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80058ba:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058bc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80058c0:	db0c      	blt.n	80058dc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80058c6:	0109      	lsls	r1, r1, #4
 80058c8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80058cc:	b2c9      	uxtb	r1, r1
 80058ce:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80058d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80058d6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058d8:	4613      	mov	r3, r2
 80058da:	e7e7      	b.n	80058ac <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <HAL_NVIC_SetPriority+0x78>)
 80058de:	f000 000f 	and.w	r0, r0, #15
 80058e2:	0109      	lsls	r1, r1, #4
 80058e4:	4403      	add	r3, r0
 80058e6:	b2c9      	uxtb	r1, r1
 80058e8:	7619      	strb	r1, [r3, #24]
 80058ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80058ee:	bf00      	nop
 80058f0:	e000ed00 	.word	0xe000ed00
 80058f4:	e000ecfc 	.word	0xe000ecfc

080058f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80058f8:	2800      	cmp	r0, #0
 80058fa:	db07      	blt.n	800590c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058fc:	0941      	lsrs	r1, r0, #5
 80058fe:	4a04      	ldr	r2, [pc, #16]	; (8005910 <HAL_NVIC_EnableIRQ+0x18>)
 8005900:	f000 001f 	and.w	r0, r0, #31
 8005904:	2301      	movs	r3, #1
 8005906:	4083      	lsls	r3, r0
 8005908:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	e000e100 	.word	0xe000e100

08005914 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8005914:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005918:	4905      	ldr	r1, [pc, #20]	; (8005930 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800591a:	4b06      	ldr	r3, [pc, #24]	; (8005934 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800591c:	68ca      	ldr	r2, [r1, #12]
 800591e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005922:	4313      	orrs	r3, r2
 8005924:	60cb      	str	r3, [r1, #12]
 8005926:	f3bf 8f4f 	dsb	sy
    __NOP();
 800592a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800592c:	e7fd      	b.n	800592a <HAL_NVIC_SystemReset+0x16>
 800592e:	bf00      	nop
 8005930:	e000ed00 	.word	0xe000ed00
 8005934:	05fa0004 	.word	0x05fa0004

08005938 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005938:	3801      	subs	r0, #1
 800593a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800593e:	d210      	bcs.n	8005962 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005940:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005942:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005946:	4c08      	ldr	r4, [pc, #32]	; (8005968 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005948:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800594a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800594e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005952:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005954:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005956:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005958:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800595a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800595e:	6119      	str	r1, [r3, #16]
 8005960:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005962:	2001      	movs	r0, #1
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	e000ed00 	.word	0xe000ed00

0800596c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800596c:	2800      	cmp	r0, #0
 800596e:	d035      	beq.n	80059dc <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005970:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 8005974:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005976:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8005978:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 800597a:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800597c:	6902      	ldr	r2, [r0, #16]
 800597e:	4323      	orrs	r3, r4
 8005980:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005982:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 8005986:	4323      	orrs	r3, r4
 8005988:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800598a:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800598c:	4c14      	ldr	r4, [pc, #80]	; (80059e0 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 800598e:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 8005990:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005992:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8005996:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800599a:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800599c:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 800599e:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059a0:	d912      	bls.n	80059c8 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80059a2:	4b10      	ldr	r3, [pc, #64]	; (80059e4 <HAL_DMA_Init+0x78>)
 80059a4:	4a10      	ldr	r2, [pc, #64]	; (80059e8 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 80059a6:	4c11      	ldr	r4, [pc, #68]	; (80059ec <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80059a8:	440b      	add	r3, r1
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 80059b2:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059b6:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 80059b8:	8401      	strh	r1, [r0, #32]
 80059ba:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059be:	6382      	str	r2, [r0, #56]	; 0x38
}  
 80059c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80059c4:	4610      	mov	r0, r2
}  
 80059c6:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <HAL_DMA_Init+0x84>)
 80059ca:	4a07      	ldr	r2, [pc, #28]	; (80059e8 <HAL_DMA_Init+0x7c>)
 80059cc:	440b      	add	r3, r1
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 80059d4:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80059d8:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 80059da:	e7ea      	b.n	80059b2 <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 80059dc:	2001      	movs	r0, #1
}  
 80059de:	4770      	bx	lr
 80059e0:	40020407 	.word	0x40020407
 80059e4:	bffdfbf8 	.word	0xbffdfbf8
 80059e8:	cccccccd 	.word	0xcccccccd
 80059ec:	40020400 	.word	0x40020400
 80059f0:	bffdfff8 	.word	0xbffdfff8

080059f4 <HAL_DMA_Start_IT>:
{
 80059f4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 80059f6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80059fa:	2c01      	cmp	r4, #1
 80059fc:	d039      	beq.n	8005a72 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 80059fe:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8005a02:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a04:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 8005a06:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005a0a:	d005      	beq.n	8005a18 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8005a12:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8005a14:	2002      	movs	r0, #2
} 
 8005a16:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005a18:	2502      	movs	r5, #2
 8005a1a:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005a1e:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005a20:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a22:	2500      	movs	r5, #0
 8005a24:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005a26:	6825      	ldr	r5, [r4, #0]
 8005a28:	f025 0501 	bic.w	r5, r5, #1
 8005a2c:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005a2e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005a30:	fa0c f505 	lsl.w	r5, ip, r5
 8005a34:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8005a36:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a38:	6843      	ldr	r3, [r0, #4]
 8005a3a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8005a3c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8005a3e:	bf0b      	itete	eq
 8005a40:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8005a42:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005a44:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8005a46:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8005a48:	b153      	cbz	r3, 8005a60 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f043 030e 	orr.w	r3, r3, #14
 8005a50:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8005a58:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005a5a:	6023      	str	r3, [r4, #0]
} 
 8005a5c:	bc70      	pop	{r4, r5, r6}
 8005a5e:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005a60:	6823      	ldr	r3, [r4, #0]
 8005a62:	f043 030a 	orr.w	r3, r3, #10
 8005a66:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	f023 0304 	bic.w	r3, r3, #4
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	e7ef      	b.n	8005a52 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8005a72:	2002      	movs	r0, #2
} 
 8005a74:	bc70      	pop	{r4, r5, r6}
 8005a76:	4770      	bx	lr

08005a78 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a78:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8005a7c:	2a02      	cmp	r2, #2
{
 8005a7e:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a80:	d006      	beq.n	8005a90 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a82:	2204      	movs	r2, #4
 8005a84:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005a86:	2200      	movs	r2, #0
    return HAL_ERROR;
 8005a88:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8005a8a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8005a8e:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a90:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005a92:	6c01      	ldr	r1, [r0, #64]	; 0x40
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a94:	6810      	ldr	r0, [r2, #0]
 8005a96:	f020 000e 	bic.w	r0, r0, #14
 8005a9a:	6010      	str	r0, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005a9c:	6810      	ldr	r0, [r2, #0]
 8005a9e:	f020 0001 	bic.w	r0, r0, #1
 8005aa2:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005aa4:	f04f 0c01 	mov.w	ip, #1
 8005aa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aaa:	fa0c f101 	lsl.w	r1, ip, r1
 8005aae:	6051      	str	r1, [r2, #4]
    __HAL_UNLOCK(hdma);
 8005ab0:	2200      	movs	r2, #0
  return HAL_OK;
 8005ab2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8005ab4:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8005ab8:	f883 2020 	strb.w	r2, [r3, #32]
}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop

08005ac0 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ac0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8005ac4:	2a02      	cmp	r2, #2
 8005ac6:	d003      	beq.n	8005ad0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ac8:	2204      	movs	r2, #4
 8005aca:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8005acc:	2001      	movs	r0, #1
}
 8005ace:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005ad0:	6802      	ldr	r2, [r0, #0]
 8005ad2:	6811      	ldr	r1, [r2, #0]
 8005ad4:	f021 010e 	bic.w	r1, r1, #14
{  
 8005ad8:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005ada:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005adc:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005ade:	6811      	ldr	r1, [r2, #0]
 8005ae0:	f021 0101 	bic.w	r1, r1, #1
 8005ae4:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005ae6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005ae8:	2101      	movs	r1, #1
 8005aea:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8005aec:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005aee:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8005af0:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8005af4:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8005af8:	b112      	cbz	r2, 8005b00 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 8005afa:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8005afc:	2000      	movs	r0, #0
}
 8005afe:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005b00:	4610      	mov	r0, r2
}
 8005b02:	bd10      	pop	{r4, pc}

08005b04 <HAL_DMA_IRQHandler>:
{
 8005b04:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b06:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005b08:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b0a:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005b0c:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005b0e:	2304      	movs	r3, #4
 8005b10:	4093      	lsls	r3, r2
 8005b12:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8005b14:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005b16:	d00e      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x32>
 8005b18:	f015 0f04 	tst.w	r5, #4
 8005b1c:	d00b      	beq.n	8005b36 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	0692      	lsls	r2, r2, #26
 8005b22:	d403      	bmi.n	8005b2c <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005b24:	6822      	ldr	r2, [r4, #0]
 8005b26:	f022 0204 	bic.w	r2, r2, #4
 8005b2a:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8005b2c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005b2e:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8005b30:	b1ca      	cbz	r2, 8005b66 <HAL_DMA_IRQHandler+0x62>
}  
 8005b32:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8005b34:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005b36:	2302      	movs	r3, #2
 8005b38:	4093      	lsls	r3, r2
 8005b3a:	420b      	tst	r3, r1
 8005b3c:	d015      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x66>
 8005b3e:	f015 0f02 	tst.w	r5, #2
 8005b42:	d012      	beq.n	8005b6a <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b44:	6822      	ldr	r2, [r4, #0]
 8005b46:	0692      	lsls	r2, r2, #26
 8005b48:	d406      	bmi.n	8005b58 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	f022 020a 	bic.w	r2, r2, #10
 8005b50:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8005b52:	2201      	movs	r2, #1
 8005b54:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8005b58:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005b5a:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	d1e5      	bne.n	8005b32 <HAL_DMA_IRQHandler+0x2e>
}  
 8005b66:	bc70      	pop	{r4, r5, r6}
 8005b68:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005b6a:	2308      	movs	r3, #8
 8005b6c:	4093      	lsls	r3, r2
 8005b6e:	420b      	tst	r3, r1
 8005b70:	d0f9      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x62>
 8005b72:	072b      	lsls	r3, r5, #28
 8005b74:	d5f7      	bpl.n	8005b66 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005b76:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8005b78:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005b7a:	f023 030e 	bic.w	r3, r3, #14
 8005b7e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005b80:	2301      	movs	r3, #1
 8005b82:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8005b86:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005b8a:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 8005b8c:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b8e:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d0e8      	beq.n	8005b66 <HAL_DMA_IRQHandler+0x62>
}  
 8005b94:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8005b96:	4708      	bx	r1

08005b98 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b9c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8005d2c <HAL_FLASH_Program+0x194>
{
 8005ba0:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8005ba2:	f89a 3018 	ldrb.w	r3, [sl, #24]
 8005ba6:	2b01      	cmp	r3, #1
{
 8005ba8:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8005baa:	f000 80ad 	beq.w	8005d08 <HAL_FLASH_Program+0x170>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	4688      	mov	r8, r1
 8005bb4:	4693      	mov	fp, r2
 8005bb6:	f88a 3018 	strb.w	r3, [sl, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005bba:	f7fe fadb 	bl	8004174 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005bbe:	4d5a      	ldr	r5, [pc, #360]	; (8005d28 <HAL_FLASH_Program+0x190>)
  uint32_t tickstart = HAL_GetTick();
 8005bc0:	4604      	mov	r4, r0
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005bc2:	f24c 3750 	movw	r7, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005bc6:	e005      	b.n	8005bd4 <HAL_FLASH_Program+0x3c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005bc8:	f7fe fad4 	bl	8004174 <HAL_GetTick>
 8005bcc:	1b00      	subs	r0, r0, r4
 8005bce:	42b8      	cmp	r0, r7
 8005bd0:	f200 8083 	bhi.w	8005cda <HAL_FLASH_Program+0x142>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005bd4:	68eb      	ldr	r3, [r5, #12]
 8005bd6:	07db      	lsls	r3, r3, #31
 8005bd8:	d4f6      	bmi.n	8005bc8 <HAL_FLASH_Program+0x30>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005bda:	68eb      	ldr	r3, [r5, #12]
 8005bdc:	0698      	lsls	r0, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005bde:	bf44      	itt	mi
 8005be0:	2320      	movmi	r3, #32
 8005be2:	60eb      	strmi	r3, [r5, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005be4:	4b50      	ldr	r3, [pc, #320]	; (8005d28 <HAL_FLASH_Program+0x190>)
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	06d1      	lsls	r1, r2, #27
 8005bea:	d478      	bmi.n	8005cde <HAL_FLASH_Program+0x146>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005bec:	68df      	ldr	r7, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005bee:	f017 0704 	ands.w	r7, r7, #4
 8005bf2:	d174      	bne.n	8005cde <HAL_FLASH_Program+0x146>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005bf4:	2e01      	cmp	r6, #1
 8005bf6:	f000 8094 	beq.w	8005d22 <HAL_FLASH_Program+0x18a>
      nbiterations = 4U;
 8005bfa:	2e02      	cmp	r6, #2
 8005bfc:	bf0c      	ite	eq
 8005bfe:	2302      	moveq	r3, #2
 8005c00:	2304      	movne	r3, #4
 8005c02:	9301      	str	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005c04:	4c48      	ldr	r4, [pc, #288]	; (8005d28 <HAL_FLASH_Program+0x190>)
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005c06:	f24c 3650 	movw	r6, #50000	; 0xc350
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005c0a:	013b      	lsls	r3, r7, #4
 8005c0c:	f1c3 0220 	rsb	r2, r3, #32
 8005c10:	f1a3 0120 	sub.w	r1, r3, #32
 8005c14:	fa09 f202 	lsl.w	r2, r9, r2
 8005c18:	fa2b f303 	lsr.w	r3, fp, r3
 8005c1c:	4313      	orrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8ca 201c 	str.w	r2, [sl, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005c24:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005c26:	fa29 f101 	lsr.w	r1, r9, r1
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8005c34:	f8a8 3000 	strh.w	r3, [r8]
  uint32_t tickstart = HAL_GetTick();
 8005c38:	f7fe fa9c 	bl	8004174 <HAL_GetTick>
 8005c3c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005c3e:	e004      	b.n	8005c4a <HAL_FLASH_Program+0xb2>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005c40:	f7fe fa98 	bl	8004174 <HAL_GetTick>
 8005c44:	1b40      	subs	r0, r0, r5
 8005c46:	42b0      	cmp	r0, r6
 8005c48:	d81f      	bhi.n	8005c8a <HAL_FLASH_Program+0xf2>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005c4a:	68e3      	ldr	r3, [r4, #12]
 8005c4c:	07db      	lsls	r3, r3, #31
 8005c4e:	d4f7      	bmi.n	8005c40 <HAL_FLASH_Program+0xa8>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005c50:	68e3      	ldr	r3, [r4, #12]
 8005c52:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005c54:	bf44      	itt	mi
 8005c56:	2320      	movmi	r3, #32
 8005c58:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005c5a:	68e3      	ldr	r3, [r4, #12]
 8005c5c:	06d9      	lsls	r1, r3, #27
 8005c5e:	d41a      	bmi.n	8005c96 <HAL_FLASH_Program+0xfe>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005c60:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005c62:	f010 0004 	ands.w	r0, r0, #4
 8005c66:	d116      	bne.n	8005c96 <HAL_FLASH_Program+0xfe>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	f023 0301 	bic.w	r3, r3, #1
    for (index = 0U; index < nbiterations; index++)
 8005c6e:	3701      	adds	r7, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005c70:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8005c72:	9b01      	ldr	r3, [sp, #4]
 8005c74:	b2fa      	uxtb	r2, r7
 8005c76:	4293      	cmp	r3, r2
 8005c78:	f108 0802 	add.w	r8, r8, #2
 8005c7c:	d8c5      	bhi.n	8005c0a <HAL_FLASH_Program+0x72>
  __HAL_UNLOCK(&pFlash);
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8005c84:	b003      	add	sp, #12
 8005c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	2003      	movs	r0, #3
 8005c92:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8005c94:	e7f3      	b.n	8005c7e <HAL_FLASH_Program+0xe6>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <HAL_FLASH_Program+0x190>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f013 0310 	ands.w	r3, r3, #16
 8005c9e:	d01a      	beq.n	8005cd6 <HAL_FLASH_Program+0x13e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005ca0:	f8da 301c 	ldr.w	r3, [sl, #28]
 8005ca4:	f043 0302 	orr.w	r3, r3, #2
 8005ca8:	f8ca 301c 	str.w	r3, [sl, #28]
 8005cac:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8005cae:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	; (8005d28 <HAL_FLASH_Program+0x190>)
 8005cb2:	68d2      	ldr	r2, [r2, #12]
 8005cb4:	0752      	lsls	r2, r2, #29
 8005cb6:	d506      	bpl.n	8005cc6 <HAL_FLASH_Program+0x12e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005cb8:	f8da 201c 	ldr.w	r2, [sl, #28]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8005cc0:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005cc2:	f8ca 201c 	str.w	r2, [sl, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005cc6:	4a18      	ldr	r2, [pc, #96]	; (8005d28 <HAL_FLASH_Program+0x190>)
 8005cc8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005cca:	6913      	ldr	r3, [r2, #16]
 8005ccc:	f023 0301 	bic.w	r3, r3, #1
    return HAL_ERROR;
 8005cd0:	2001      	movs	r0, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005cd2:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8005cd4:	e7d3      	b.n	8005c7e <HAL_FLASH_Program+0xe6>
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	e7ea      	b.n	8005cb0 <HAL_FLASH_Program+0x118>
 8005cda:	2003      	movs	r0, #3
 8005cdc:	e7cf      	b.n	8005c7e <HAL_FLASH_Program+0xe6>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005cde:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <HAL_FLASH_Program+0x190>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f013 0310 	ands.w	r3, r3, #16
 8005ce6:	d113      	bne.n	8005d10 <HAL_FLASH_Program+0x178>
 8005ce8:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005cea:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <HAL_FLASH_Program+0x190>)
 8005cec:	68d2      	ldr	r2, [r2, #12]
 8005cee:	0752      	lsls	r2, r2, #29
 8005cf0:	d506      	bpl.n	8005d00 <HAL_FLASH_Program+0x168>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005cf2:	f8da 201c 	ldr.w	r2, [sl, #28]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8005cfa:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005cfc:	f8ca 201c 	str.w	r2, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005d00:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <HAL_FLASH_Program+0x190>)
    return HAL_ERROR;
 8005d02:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005d04:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 8005d06:	e7ba      	b.n	8005c7e <HAL_FLASH_Program+0xe6>
  __HAL_LOCK(&pFlash);
 8005d08:	2002      	movs	r0, #2
}
 8005d0a:	b003      	add	sp, #12
 8005d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005d10:	f8da 301c 	ldr.w	r3, [sl, #28]
 8005d14:	f043 0302 	orr.w	r3, r3, #2
 8005d18:	f8ca 301c 	str.w	r3, [sl, #28]
 8005d1c:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8005d1e:	2310      	movs	r3, #16
 8005d20:	e7e3      	b.n	8005cea <HAL_FLASH_Program+0x152>
      nbiterations = 1U;
 8005d22:	9601      	str	r6, [sp, #4]
 8005d24:	e76e      	b.n	8005c04 <HAL_FLASH_Program+0x6c>
 8005d26:	bf00      	nop
 8005d28:	40022000 	.word	0x40022000
 8005d2c:	20001d18 	.word	0x20001d18

08005d30 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005d30:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <HAL_FLASH_Unlock+0x1c>)
 8005d32:	6918      	ldr	r0, [r3, #16]
 8005d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d38:	d006      	beq.n	8005d48 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005d3a:	4905      	ldr	r1, [pc, #20]	; (8005d50 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005d3c:	4a05      	ldr	r2, [pc, #20]	; (8005d54 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005d3e:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005d40:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005d42:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8005d44:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40022000 	.word	0x40022000
 8005d50:	45670123 	.word	0x45670123
 8005d54:	cdef89ab 	.word	0xcdef89ab

08005d58 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005d58:	4a03      	ldr	r2, [pc, #12]	; (8005d68 <HAL_FLASH_Lock+0x10>)
 8005d5a:	6913      	ldr	r3, [r2, #16]
 8005d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8005d60:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005d62:	6113      	str	r3, [r2, #16]
}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40022000 	.word	0x40022000

08005d6c <FLASH_WaitForLastOperation>:
{
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005d70:	f7fe fa00 	bl	8004174 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d74:	4e1e      	ldr	r6, [pc, #120]	; (8005df0 <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 8005d76:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005d78:	1c60      	adds	r0, r4, #1
 8005d7a:	d112      	bne.n	8005da2 <FLASH_WaitForLastOperation+0x36>
 8005d7c:	4a1c      	ldr	r2, [pc, #112]	; (8005df0 <FLASH_WaitForLastOperation+0x84>)
 8005d7e:	68d3      	ldr	r3, [r2, #12]
 8005d80:	07d9      	lsls	r1, r3, #31
 8005d82:	d4fc      	bmi.n	8005d7e <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005d84:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <FLASH_WaitForLastOperation+0x84>)
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	0690      	lsls	r0, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d8a:	bf44      	itt	mi
 8005d8c:	2220      	movmi	r2, #32
 8005d8e:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005d90:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <FLASH_WaitForLastOperation+0x84>)
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	06d1      	lsls	r1, r2, #27
 8005d96:	d40f      	bmi.n	8005db8 <FLASH_WaitForLastOperation+0x4c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005d98:	68d8      	ldr	r0, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005d9a:	f010 0004 	ands.w	r0, r0, #4
 8005d9e:	d10b      	bne.n	8005db8 <FLASH_WaitForLastOperation+0x4c>
}
 8005da0:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005da2:	68f3      	ldr	r3, [r6, #12]
 8005da4:	07db      	lsls	r3, r3, #31
 8005da6:	d5ed      	bpl.n	8005d84 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005da8:	b124      	cbz	r4, 8005db4 <FLASH_WaitForLastOperation+0x48>
 8005daa:	f7fe f9e3 	bl	8004174 <HAL_GetTick>
 8005dae:	1b40      	subs	r0, r0, r5
 8005db0:	42a0      	cmp	r0, r4
 8005db2:	d9e1      	bls.n	8005d78 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8005db4:	2003      	movs	r0, #3
}
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005db8:	4b0d      	ldr	r3, [pc, #52]	; (8005df0 <FLASH_WaitForLastOperation+0x84>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f013 0310 	ands.w	r3, r3, #16
 8005dc0:	d014      	beq.n	8005dec <FLASH_WaitForLastOperation+0x80>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005dc2:	490c      	ldr	r1, [pc, #48]	; (8005df4 <FLASH_WaitForLastOperation+0x88>)
 8005dc4:	69ca      	ldr	r2, [r1, #28]
 8005dc6:	f042 0202 	orr.w	r2, r2, #2
 8005dca:	2014      	movs	r0, #20
    flags |= FLASH_FLAG_WRPERR;
 8005dcc:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005dce:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005dd0:	4a07      	ldr	r2, [pc, #28]	; (8005df0 <FLASH_WaitForLastOperation+0x84>)
 8005dd2:	68d2      	ldr	r2, [r2, #12]
 8005dd4:	0752      	lsls	r2, r2, #29
 8005dd6:	d505      	bpl.n	8005de4 <FLASH_WaitForLastOperation+0x78>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005dd8:	4906      	ldr	r1, [pc, #24]	; (8005df4 <FLASH_WaitForLastOperation+0x88>)
 8005dda:	69ca      	ldr	r2, [r1, #28]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8005de0:	4603      	mov	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005de2:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005de4:	4a02      	ldr	r2, [pc, #8]	; (8005df0 <FLASH_WaitForLastOperation+0x84>)
    return HAL_ERROR;
 8005de6:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005de8:	60d3      	str	r3, [r2, #12]
}
 8005dea:	bd70      	pop	{r4, r5, r6, pc}
 8005dec:	2004      	movs	r0, #4
 8005dee:	e7ef      	b.n	8005dd0 <FLASH_WaitForLastOperation+0x64>
 8005df0:	40022000 	.word	0x40022000
 8005df4:	20001d18 	.word	0x20001d18

08005df8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005dfc:	4e2d      	ldr	r6, [pc, #180]	; (8005eb4 <HAL_FLASHEx_Erase+0xbc>)
 8005dfe:	7e33      	ldrb	r3, [r6, #24]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d054      	beq.n	8005eae <HAL_FLASHEx_Erase+0xb6>
 8005e04:	2301      	movs	r3, #1
 8005e06:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005e08:	6803      	ldr	r3, [r0, #0]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	4681      	mov	r9, r0
 8005e0e:	d031      	beq.n	8005e74 <HAL_FLASHEx_Erase+0x7c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005e10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e14:	4688      	mov	r8, r1
 8005e16:	f7ff ffa9 	bl	8005d6c <FLASH_WaitForLastOperation>
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	bb78      	cbnz	r0, 8005e7e <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e22:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005e26:	e9d9 5301 	ldrd	r5, r3, [r9, #4]
 8005e2a:	eb05 23c3 	add.w	r3, r5, r3, lsl #11
 8005e2e:	429d      	cmp	r5, r3
 8005e30:	d225      	bcs.n	8005e7e <HAL_FLASHEx_Erase+0x86>
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005e32:	4c21      	ldr	r4, [pc, #132]	; (8005eb8 <HAL_FLASHEx_Erase+0xc0>)
 8005e34:	e007      	b.n	8005e46 <HAL_FLASHEx_Erase+0x4e>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005e36:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
            address += FLASH_PAGE_SIZE)
 8005e3a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005e3e:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8005e42:	42ab      	cmp	r3, r5
 8005e44:	d91c      	bls.n	8005e80 <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e46:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005e48:	6923      	ldr	r3, [r4, #16]
 8005e4a:	f043 0302 	orr.w	r3, r3, #2
 8005e4e:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005e50:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e58:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e5e:	f7ff ff85 	bl	8005d6c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	f023 0302 	bic.w	r3, r3, #2
 8005e68:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d0e3      	beq.n	8005e36 <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8005e6e:	f8c8 5000 	str.w	r5, [r8]
            break;
 8005e72:	e005      	b.n	8005e80 <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005e74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e78:	f7ff ff78 	bl	8005d6c <FLASH_WaitForLastOperation>
 8005e7c:	b120      	cbz	r0, 8005e88 <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005e7e:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8005e80:	2300      	movs	r3, #0
 8005e82:	7633      	strb	r3, [r6, #24]
}
 8005e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005e88:	4c0b      	ldr	r4, [pc, #44]	; (8005eb8 <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005e8a:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005e8c:	6923      	ldr	r3, [r4, #16]
 8005e8e:	f043 0304 	orr.w	r3, r3, #4
 8005e92:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e9a:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ea0:	f7ff ff64 	bl	8005d6c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005ea4:	6923      	ldr	r3, [r4, #16]
 8005ea6:	f023 0304 	bic.w	r3, r3, #4
 8005eaa:	6123      	str	r3, [r4, #16]
 8005eac:	e7e8      	b.n	8005e80 <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 8005eae:	2002      	movs	r0, #2
}
 8005eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb4:	20001d18 	.word	0x20001d18
 8005eb8:	40022000 	.word	0x40022000

08005ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ec0:	680c      	ldr	r4, [r1, #0]
{
 8005ec2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ec4:	2c00      	cmp	r4, #0
 8005ec6:	d077      	beq.n	8005fb8 <HAL_GPIO_Init+0xfc>
 8005ec8:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ecc:	4e69      	ldr	r6, [pc, #420]	; (8006074 <HAL_GPIO_Init+0x1b8>)
  uint32_t position = 0x00u;
 8005ece:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ed0:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ed4:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ed6:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8005eda:	ea17 0a04 	ands.w	sl, r7, r4
 8005ede:	d065      	beq.n	8005fac <HAL_GPIO_Init+0xf0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ee0:	f8de 1004 	ldr.w	r1, [lr, #4]
 8005ee4:	f001 0203 	and.w	r2, r1, #3
 8005ee8:	1e55      	subs	r5, r2, #1
 8005eea:	2d01      	cmp	r5, #1
 8005eec:	d967      	bls.n	8005fbe <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eee:	2a03      	cmp	r2, #3
 8005ef0:	f040 80ab 	bne.w	800604a <HAL_GPIO_Init+0x18e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005ef4:	fa02 f20c 	lsl.w	r2, r2, ip
 8005ef8:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8005efa:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005efc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005efe:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f00:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8005f04:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f06:	d051      	beq.n	8005fac <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f08:	4d5b      	ldr	r5, [pc, #364]	; (8006078 <HAL_GPIO_Init+0x1bc>)
 8005f0a:	69aa      	ldr	r2, [r5, #24]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	61aa      	str	r2, [r5, #24]
 8005f12:	69aa      	ldr	r2, [r5, #24]
 8005f14:	f002 0201 	and.w	r2, r2, #1
 8005f18:	9203      	str	r2, [sp, #12]
 8005f1a:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005f1c:	f023 0203 	bic.w	r2, r3, #3
 8005f20:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005f24:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f28:	f003 0503 	and.w	r5, r3, #3
 8005f2c:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 8005f30:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f32:	250f      	movs	r5, #15
 8005f34:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f38:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f3c:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f40:	d015      	beq.n	8005f6e <HAL_GPIO_Init+0xb2>
 8005f42:	4d4e      	ldr	r5, [pc, #312]	; (800607c <HAL_GPIO_Init+0x1c0>)
 8005f44:	42a8      	cmp	r0, r5
 8005f46:	f000 808b 	beq.w	8006060 <HAL_GPIO_Init+0x1a4>
 8005f4a:	4d4d      	ldr	r5, [pc, #308]	; (8006080 <HAL_GPIO_Init+0x1c4>)
 8005f4c:	42a8      	cmp	r0, r5
 8005f4e:	f000 808b 	beq.w	8006068 <HAL_GPIO_Init+0x1ac>
 8005f52:	4d4c      	ldr	r5, [pc, #304]	; (8006084 <HAL_GPIO_Init+0x1c8>)
 8005f54:	42a8      	cmp	r0, r5
 8005f56:	d07d      	beq.n	8006054 <HAL_GPIO_Init+0x198>
 8005f58:	4d4b      	ldr	r5, [pc, #300]	; (8006088 <HAL_GPIO_Init+0x1cc>)
 8005f5a:	42a8      	cmp	r0, r5
 8005f5c:	bf13      	iteet	ne
 8005f5e:	2505      	movne	r5, #5
 8005f60:	f04f 0804 	moveq.w	r8, #4
 8005f64:	fa08 f509 	lsleq.w	r5, r8, r9
 8005f68:	fa05 f509 	lslne.w	r5, r5, r9
 8005f6c:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005f6e:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR;
 8005f70:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8005f72:	ea6f 050a 	mvn.w	r5, sl
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f76:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8005f78:	bf54      	ite	pl
 8005f7a:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8005f7c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8005f80:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8005f82:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f84:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8005f86:	bf54      	ite	pl
 8005f88:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8005f8a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR = temp;
 8005f8e:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8005f90:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f92:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8005f94:	bf54      	ite	pl
 8005f96:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8005f98:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 8005f9c:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f9e:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fa0:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8005fa2:	bf54      	ite	pl
 8005fa4:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8005fa6:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8005faa:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8005fac:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005fae:	fa34 f203 	lsrs.w	r2, r4, r3
 8005fb2:	f10c 0c02 	add.w	ip, ip, #2
 8005fb6:	d18e      	bne.n	8005ed6 <HAL_GPIO_Init+0x1a>
  }
}
 8005fb8:	b005      	add	sp, #20
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8005fbe:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fc2:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005fc6:	f04f 0803 	mov.w	r8, #3
 8005fca:	fa08 f80c 	lsl.w	r8, r8, ip
 8005fce:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005fd2:	fa05 f50c 	lsl.w	r5, r5, ip
 8005fd6:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8005fda:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005fdc:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8005fe0:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fe4:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fe8:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8005fec:	409f      	lsls	r7, r3
 8005fee:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8005ff2:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8005ff4:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005ff6:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005ffa:	f8de 7008 	ldr.w	r7, [lr, #8]
 8005ffe:	fa07 f70c 	lsl.w	r7, r7, ip
 8006002:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006006:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006008:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800600a:	fa02 f20c 	lsl.w	r2, r2, ip
 800600e:	f47f af74 	bne.w	8005efa <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 8006012:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8006016:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800601a:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800601e:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8006022:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006024:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006028:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800602c:	fa07 f708 	lsl.w	r7, r7, r8
 8006030:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006032:	270f      	movs	r7, #15
 8006034:	fa07 f808 	lsl.w	r8, r7, r8
 8006038:	9f00      	ldr	r7, [sp, #0]
 800603a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800603e:	9f01      	ldr	r7, [sp, #4]
 8006040:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8006044:	f8c9 7020 	str.w	r7, [r9, #32]
 8006048:	e757      	b.n	8005efa <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800604a:	2503      	movs	r5, #3
 800604c:	fa05 f50c 	lsl.w	r5, r5, ip
 8006050:	43ed      	mvns	r5, r5
 8006052:	e7cf      	b.n	8005ff4 <HAL_GPIO_Init+0x138>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006054:	f04f 0803 	mov.w	r8, #3
 8006058:	fa08 f509 	lsl.w	r5, r8, r9
 800605c:	432f      	orrs	r7, r5
 800605e:	e786      	b.n	8005f6e <HAL_GPIO_Init+0xb2>
 8006060:	fa0b f509 	lsl.w	r5, fp, r9
 8006064:	432f      	orrs	r7, r5
 8006066:	e782      	b.n	8005f6e <HAL_GPIO_Init+0xb2>
 8006068:	f04f 0802 	mov.w	r8, #2
 800606c:	fa08 f509 	lsl.w	r5, r8, r9
 8006070:	432f      	orrs	r7, r5
 8006072:	e77c      	b.n	8005f6e <HAL_GPIO_Init+0xb2>
 8006074:	40010400 	.word	0x40010400
 8006078:	40021000 	.word	0x40021000
 800607c:	48000400 	.word	0x48000400
 8006080:	48000800 	.word	0x48000800
 8006084:	48000c00 	.word	0x48000c00
 8006088:	48001000 	.word	0x48001000

0800608c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800608c:	6903      	ldr	r3, [r0, #16]
 800608e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006090:	bf14      	ite	ne
 8006092:	2001      	movne	r0, #1
 8006094:	2000      	moveq	r0, #0
 8006096:	4770      	bx	lr

08006098 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006098:	b10a      	cbz	r2, 800609e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800609a:	6181      	str	r1, [r0, #24]
 800609c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800609e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop

080060a4 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060a4:	2800      	cmp	r0, #0
 80060a6:	f000 8270 	beq.w	800658a <HAL_RCC_OscConfig+0x4e6>
{
 80060aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ae:	6803      	ldr	r3, [r0, #0]
 80060b0:	07d9      	lsls	r1, r3, #31
{
 80060b2:	b083      	sub	sp, #12
 80060b4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060b6:	d54d      	bpl.n	8006154 <HAL_RCC_OscConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80060b8:	49ae      	ldr	r1, [pc, #696]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
 80060ba:	684a      	ldr	r2, [r1, #4]
 80060bc:	f002 020c 	and.w	r2, r2, #12
 80060c0:	2a04      	cmp	r2, #4
 80060c2:	f000 8161 	beq.w	8006388 <HAL_RCC_OscConfig+0x2e4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80060c6:	684a      	ldr	r2, [r1, #4]
 80060c8:	f002 020c 	and.w	r2, r2, #12
 80060cc:	2a08      	cmp	r2, #8
 80060ce:	f000 8157 	beq.w	8006380 <HAL_RCC_OscConfig+0x2dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060d2:	6863      	ldr	r3, [r4, #4]
 80060d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060d8:	d017      	beq.n	800610a <HAL_RCC_OscConfig+0x66>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 818e 	beq.w	80063fc <HAL_RCC_OscConfig+0x358>
 80060e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060e4:	f000 823c 	beq.w	8006560 <HAL_RCC_OscConfig+0x4bc>
 80060e8:	4ba2      	ldr	r3, [pc, #648]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060f8:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80060fa:	4a9e      	ldr	r2, [pc, #632]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
 80060fc:	68a1      	ldr	r1, [r4, #8]
 80060fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006100:	f023 030f 	bic.w	r3, r3, #15
 8006104:	430b      	orrs	r3, r1
 8006106:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006108:	e00a      	b.n	8006120 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800610a:	4a9a      	ldr	r2, [pc, #616]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
 800610c:	6813      	ldr	r3, [r2, #0]
 800610e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006112:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006114:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006116:	68a1      	ldr	r1, [r4, #8]
 8006118:	f023 030f 	bic.w	r3, r3, #15
 800611c:	430b      	orrs	r3, r1
 800611e:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fe f828 	bl	8004174 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006124:	4f93      	ldr	r7, [pc, #588]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8006126:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006128:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612c:	2601      	movs	r6, #1
 800612e:	e005      	b.n	800613c <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006130:	f7fe f820 	bl	8004174 <HAL_GetTick>
 8006134:	1b40      	subs	r0, r0, r5
 8006136:	2864      	cmp	r0, #100	; 0x64
 8006138:	f200 815c 	bhi.w	80063f4 <HAL_RCC_OscConfig+0x350>
 800613c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	fa98 f3a8 	rbit	r3, r8
 8006146:	fab3 f383 	clz	r3, r3
 800614a:	fa06 f303 	lsl.w	r3, r6, r3
 800614e:	4213      	tst	r3, r2
 8006150:	d0ee      	beq.n	8006130 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	079f      	lsls	r7, r3, #30
 8006156:	d53f      	bpl.n	80061d8 <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006158:	4a86      	ldr	r2, [pc, #536]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
 800615a:	6851      	ldr	r1, [r2, #4]
 800615c:	f011 0f0c 	tst.w	r1, #12
 8006160:	f000 80c2 	beq.w	80062e8 <HAL_RCC_OscConfig+0x244>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006164:	6851      	ldr	r1, [r2, #4]
 8006166:	f001 010c 	and.w	r1, r1, #12
 800616a:	2908      	cmp	r1, #8
 800616c:	f000 80b8 	beq.w	80062e0 <HAL_RCC_OscConfig+0x23c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006170:	6922      	ldr	r2, [r4, #16]
 8006172:	2a00      	cmp	r2, #0
 8006174:	f000 8197 	beq.w	80064a6 <HAL_RCC_OscConfig+0x402>
 8006178:	2501      	movs	r5, #1
 800617a:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800617e:	fab3 f383 	clz	r3, r3
 8006182:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006186:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800618a:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618c:	4f79      	ldr	r7, [pc, #484]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
        __HAL_RCC_HSI_ENABLE();
 800618e:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8006190:	f7fd fff0 	bl	8004174 <HAL_GetTick>
 8006194:	f04f 0802 	mov.w	r8, #2
 8006198:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619a:	e005      	b.n	80061a8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800619c:	f7fd ffea 	bl	8004174 <HAL_GetTick>
 80061a0:	1b80      	subs	r0, r0, r6
 80061a2:	2802      	cmp	r0, #2
 80061a4:	f200 8126 	bhi.w	80063f4 <HAL_RCC_OscConfig+0x350>
 80061a8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	fa98 f3a8 	rbit	r3, r8
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	fa05 f303 	lsl.w	r3, r5, r3
 80061ba:	4213      	tst	r3, r2
 80061bc:	d0ee      	beq.n	800619c <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	22f8      	movs	r2, #248	; 0xf8
 80061c2:	fa92 f2a2 	rbit	r2, r2
 80061c6:	6963      	ldr	r3, [r4, #20]
 80061c8:	fab2 f282 	clz	r2, r2
 80061cc:	4093      	lsls	r3, r2
 80061ce:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80061d2:	4313      	orrs	r3, r2
 80061d4:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	071d      	lsls	r5, r3, #28
 80061da:	d420      	bmi.n	800621e <HAL_RCC_OscConfig+0x17a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061dc:	0758      	lsls	r0, r3, #29
 80061de:	d54a      	bpl.n	8006276 <HAL_RCC_OscConfig+0x1d2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061e0:	4b64      	ldr	r3, [pc, #400]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	00d1      	lsls	r1, r2, #3
 80061e6:	f140 80ba 	bpl.w	800635e <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 80061ea:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ec:	4e62      	ldr	r6, [pc, #392]	; (8006378 <HAL_RCC_OscConfig+0x2d4>)
 80061ee:	6833      	ldr	r3, [r6, #0]
 80061f0:	05da      	lsls	r2, r3, #23
 80061f2:	f140 80ef 	bpl.w	80063d4 <HAL_RCC_OscConfig+0x330>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f6:	68e3      	ldr	r3, [r4, #12]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	f000 8178 	beq.w	80064ee <HAL_RCC_OscConfig+0x44a>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 8123 	beq.w	800644a <HAL_RCC_OscConfig+0x3a6>
 8006204:	2b05      	cmp	r3, #5
 8006206:	4b5b      	ldr	r3, [pc, #364]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	f000 81b6 	beq.w	800657a <HAL_RCC_OscConfig+0x4d6>
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	621a      	str	r2, [r3, #32]
 8006214:	6a1a      	ldr	r2, [r3, #32]
 8006216:	f022 0204 	bic.w	r2, r2, #4
 800621a:	621a      	str	r2, [r3, #32]
 800621c:	e16c      	b.n	80064f8 <HAL_RCC_OscConfig+0x454>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800621e:	69a2      	ldr	r2, [r4, #24]
 8006220:	2a00      	cmp	r2, #0
 8006222:	d076      	beq.n	8006312 <HAL_RCC_OscConfig+0x26e>
 8006224:	2601      	movs	r6, #1
 8006226:	fa96 f2a6 	rbit	r2, r6
      __HAL_RCC_LSI_ENABLE();
 800622a:	4b54      	ldr	r3, [pc, #336]	; (800637c <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800622c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8006374 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_ENABLE();
 8006230:	fab2 f282 	clz	r2, r2
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	2502      	movs	r5, #2
 800623a:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 800623c:	f7fd ff9a 	bl	8004174 <HAL_GetTick>
 8006240:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006242:	e005      	b.n	8006250 <HAL_RCC_OscConfig+0x1ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006244:	f7fd ff96 	bl	8004174 <HAL_GetTick>
 8006248:	1bc0      	subs	r0, r0, r7
 800624a:	2802      	cmp	r0, #2
 800624c:	f200 80d2 	bhi.w	80063f4 <HAL_RCC_OscConfig+0x350>
 8006250:	fa95 f3a5 	rbit	r3, r5
 8006254:	fa95 f3a5 	rbit	r3, r5
 8006258:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800625c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8006260:	fa95 f3a5 	rbit	r3, r5
 8006264:	fab3 f383 	clz	r3, r3
 8006268:	fa06 f303 	lsl.w	r3, r6, r3
 800626c:	4213      	tst	r3, r2
 800626e:	d0e9      	beq.n	8006244 <HAL_RCC_OscConfig+0x1a0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	0758      	lsls	r0, r3, #29
 8006274:	d4b4      	bmi.n	80061e0 <HAL_RCC_OscConfig+0x13c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006276:	69e0      	ldr	r0, [r4, #28]
 8006278:	b370      	cbz	r0, 80062d8 <HAL_RCC_OscConfig+0x234>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800627a:	4d3e      	ldr	r5, [pc, #248]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
 800627c:	686b      	ldr	r3, [r5, #4]
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	2b08      	cmp	r3, #8
 8006284:	f000 815b 	beq.w	800653e <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006288:	2802      	cmp	r0, #2
 800628a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800628e:	f000 817e 	beq.w	800658e <HAL_RCC_OscConfig+0x4ea>
 8006292:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006296:	fab3 f383 	clz	r3, r3
 800629a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800629e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a8:	f7fd ff64 	bl	8004174 <HAL_GetTick>
 80062ac:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80062b0:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062b2:	2601      	movs	r6, #1
 80062b4:	e005      	b.n	80062c2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062b6:	f7fd ff5d 	bl	8004174 <HAL_GetTick>
 80062ba:	1b00      	subs	r0, r0, r4
 80062bc:	2802      	cmp	r0, #2
 80062be:	f200 8099 	bhi.w	80063f4 <HAL_RCC_OscConfig+0x350>
 80062c2:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062c6:	682a      	ldr	r2, [r5, #0]
 80062c8:	fa97 f3a7 	rbit	r3, r7
 80062cc:	fab3 f383 	clz	r3, r3
 80062d0:	fa06 f303 	lsl.w	r3, r6, r3
 80062d4:	4213      	tst	r3, r2
 80062d6:	d1ee      	bne.n	80062b6 <HAL_RCC_OscConfig+0x212>
        }
      }
    }
  }

  return HAL_OK;
 80062d8:	2000      	movs	r0, #0
}
 80062da:	b003      	add	sp, #12
 80062dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80062e0:	6852      	ldr	r2, [r2, #4]
 80062e2:	03d6      	lsls	r6, r2, #15
 80062e4:	f53f af44 	bmi.w	8006170 <HAL_RCC_OscConfig+0xcc>
 80062e8:	2202      	movs	r2, #2
 80062ea:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ee:	4921      	ldr	r1, [pc, #132]	; (8006374 <HAL_RCC_OscConfig+0x2d0>)
 80062f0:	6808      	ldr	r0, [r1, #0]
 80062f2:	fa92 f2a2 	rbit	r2, r2
 80062f6:	2101      	movs	r1, #1
 80062f8:	fab2 f282 	clz	r2, r2
 80062fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006300:	4202      	tst	r2, r0
 8006302:	d056      	beq.n	80063b2 <HAL_RCC_OscConfig+0x30e>
 8006304:	6922      	ldr	r2, [r4, #16]
 8006306:	428a      	cmp	r2, r1
 8006308:	d053      	beq.n	80063b2 <HAL_RCC_OscConfig+0x30e>
        return HAL_ERROR;
 800630a:	2001      	movs	r0, #1
}
 800630c:	b003      	add	sp, #12
 800630e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006312:	2701      	movs	r7, #1
 8006314:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 8006318:	4b18      	ldr	r3, [pc, #96]	; (800637c <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800631a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006374 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_DISABLE();
 800631e:	fab1 f181 	clz	r1, r1
 8006322:	440b      	add	r3, r1
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	2502      	movs	r5, #2
 8006328:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800632a:	f7fd ff23 	bl	8004174 <HAL_GetTick>
 800632e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006330:	e004      	b.n	800633c <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006332:	f7fd ff1f 	bl	8004174 <HAL_GetTick>
 8006336:	1b80      	subs	r0, r0, r6
 8006338:	2802      	cmp	r0, #2
 800633a:	d85b      	bhi.n	80063f4 <HAL_RCC_OscConfig+0x350>
 800633c:	fa95 f3a5 	rbit	r3, r5
 8006340:	fa95 f3a5 	rbit	r3, r5
 8006344:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006348:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 800634c:	fa95 f3a5 	rbit	r3, r5
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	fa07 f303 	lsl.w	r3, r7, r3
 8006358:	4213      	tst	r3, r2
 800635a:	d1ea      	bne.n	8006332 <HAL_RCC_OscConfig+0x28e>
 800635c:	e788      	b.n	8006270 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006364:	61da      	str	r2, [r3, #28]
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006370:	2501      	movs	r5, #1
 8006372:	e73b      	b.n	80061ec <HAL_RCC_OscConfig+0x148>
 8006374:	40021000 	.word	0x40021000
 8006378:	40007000 	.word	0x40007000
 800637c:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006380:	684a      	ldr	r2, [r1, #4]
 8006382:	03d2      	lsls	r2, r2, #15
 8006384:	f57f aea5 	bpl.w	80060d2 <HAL_RCC_OscConfig+0x2e>
 8006388:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800638c:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006390:	49a7      	ldr	r1, [pc, #668]	; (8006630 <HAL_RCC_OscConfig+0x58c>)
 8006392:	6808      	ldr	r0, [r1, #0]
 8006394:	fa92 f2a2 	rbit	r2, r2
 8006398:	2101      	movs	r1, #1
 800639a:	fab2 f282 	clz	r2, r2
 800639e:	fa01 f202 	lsl.w	r2, r1, r2
 80063a2:	4202      	tst	r2, r0
 80063a4:	f43f aed6 	beq.w	8006154 <HAL_RCC_OscConfig+0xb0>
 80063a8:	6862      	ldr	r2, [r4, #4]
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	f47f aed2 	bne.w	8006154 <HAL_RCC_OscConfig+0xb0>
 80063b0:	e7ab      	b.n	800630a <HAL_RCC_OscConfig+0x266>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b2:	4d9f      	ldr	r5, [pc, #636]	; (8006630 <HAL_RCC_OscConfig+0x58c>)
 80063b4:	21f8      	movs	r1, #248	; 0xf8
 80063b6:	6828      	ldr	r0, [r5, #0]
 80063b8:	fa91 f1a1 	rbit	r1, r1
 80063bc:	6962      	ldr	r2, [r4, #20]
 80063be:	fab1 f181 	clz	r1, r1
 80063c2:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 80063c6:	408a      	lsls	r2, r1
 80063c8:	4302      	orrs	r2, r0
 80063ca:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063cc:	071d      	lsls	r5, r3, #28
 80063ce:	f57f af05 	bpl.w	80061dc <HAL_RCC_OscConfig+0x138>
 80063d2:	e724      	b.n	800621e <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063d4:	6833      	ldr	r3, [r6, #0]
 80063d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063da:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80063dc:	f7fd feca 	bl	8004174 <HAL_GetTick>
 80063e0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e2:	6833      	ldr	r3, [r6, #0]
 80063e4:	05db      	lsls	r3, r3, #23
 80063e6:	f53f af06 	bmi.w	80061f6 <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ea:	f7fd fec3 	bl	8004174 <HAL_GetTick>
 80063ee:	1bc0      	subs	r0, r0, r7
 80063f0:	2864      	cmp	r0, #100	; 0x64
 80063f2:	d9f6      	bls.n	80063e2 <HAL_RCC_OscConfig+0x33e>
            return HAL_TIMEOUT;
 80063f4:	2003      	movs	r0, #3
}
 80063f6:	b003      	add	sp, #12
 80063f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063fc:	4d8c      	ldr	r5, [pc, #560]	; (8006630 <HAL_RCC_OscConfig+0x58c>)
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	682b      	ldr	r3, [r5, #0]
 8006408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800640c:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800640e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006410:	68a2      	ldr	r2, [r4, #8]
 8006412:	f023 030f 	bic.w	r3, r3, #15
 8006416:	4313      	orrs	r3, r2
 8006418:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 800641a:	f7fd feab 	bl	8004174 <HAL_GetTick>
 800641e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8006422:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006424:	2701      	movs	r7, #1
 8006426:	e004      	b.n	8006432 <HAL_RCC_OscConfig+0x38e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006428:	f7fd fea4 	bl	8004174 <HAL_GetTick>
 800642c:	1b80      	subs	r0, r0, r6
 800642e:	2864      	cmp	r0, #100	; 0x64
 8006430:	d8e0      	bhi.n	80063f4 <HAL_RCC_OscConfig+0x350>
 8006432:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006436:	682a      	ldr	r2, [r5, #0]
 8006438:	fa98 f3a8 	rbit	r3, r8
 800643c:	fab3 f383 	clz	r3, r3
 8006440:	fa07 f303 	lsl.w	r3, r7, r3
 8006444:	4213      	tst	r3, r2
 8006446:	d1ef      	bne.n	8006428 <HAL_RCC_OscConfig+0x384>
 8006448:	e683      	b.n	8006152 <HAL_RCC_OscConfig+0xae>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800644a:	4e79      	ldr	r6, [pc, #484]	; (8006630 <HAL_RCC_OscConfig+0x58c>)
 800644c:	6a33      	ldr	r3, [r6, #32]
 800644e:	f023 0301 	bic.w	r3, r3, #1
 8006452:	6233      	str	r3, [r6, #32]
 8006454:	6a33      	ldr	r3, [r6, #32]
 8006456:	f023 0304 	bic.w	r3, r3, #4
 800645a:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800645c:	f7fd fe8a 	bl	8004174 <HAL_GetTick>
 8006460:	f04f 0902 	mov.w	r9, #2
 8006464:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006466:	f04f 0801 	mov.w	r8, #1
 800646a:	e006      	b.n	800647a <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800646c:	f7fd fe82 	bl	8004174 <HAL_GetTick>
 8006470:	f241 3388 	movw	r3, #5000	; 0x1388
 8006474:	1bc0      	subs	r0, r0, r7
 8006476:	4298      	cmp	r0, r3
 8006478:	d8bc      	bhi.n	80063f4 <HAL_RCC_OscConfig+0x350>
 800647a:	fa99 f3a9 	rbit	r3, r9
 800647e:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006482:	6a32      	ldr	r2, [r6, #32]
 8006484:	fa99 f3a9 	rbit	r3, r9
 8006488:	fab3 f383 	clz	r3, r3
 800648c:	fa08 f303 	lsl.w	r3, r8, r3
 8006490:	4213      	tst	r3, r2
 8006492:	d1eb      	bne.n	800646c <HAL_RCC_OscConfig+0x3c8>
    if(pwrclkchanged == SET)
 8006494:	2d00      	cmp	r5, #0
 8006496:	f43f aeee 	beq.w	8006276 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800649a:	4a65      	ldr	r2, [pc, #404]	; (8006630 <HAL_RCC_OscConfig+0x58c>)
 800649c:	69d3      	ldr	r3, [r2, #28]
 800649e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064a2:	61d3      	str	r3, [r2, #28]
 80064a4:	e6e7      	b.n	8006276 <HAL_RCC_OscConfig+0x1d2>
 80064a6:	2601      	movs	r6, #1
 80064a8:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80064ac:	fab3 f383 	clz	r3, r3
 80064b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80064b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80064b8:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ba:	4f5d      	ldr	r7, [pc, #372]	; (8006630 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_HSI_DISABLE();
 80064bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80064be:	f7fd fe59 	bl	8004174 <HAL_GetTick>
 80064c2:	f04f 0802 	mov.w	r8, #2
 80064c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c8:	e004      	b.n	80064d4 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ca:	f7fd fe53 	bl	8004174 <HAL_GetTick>
 80064ce:	1b40      	subs	r0, r0, r5
 80064d0:	2802      	cmp	r0, #2
 80064d2:	d88f      	bhi.n	80063f4 <HAL_RCC_OscConfig+0x350>
 80064d4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	fa98 f3a8 	rbit	r3, r8
 80064de:	fab3 f383 	clz	r3, r3
 80064e2:	fa06 f303 	lsl.w	r3, r6, r3
 80064e6:	4213      	tst	r3, r2
 80064e8:	d1ef      	bne.n	80064ca <HAL_RCC_OscConfig+0x426>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	e674      	b.n	80061d8 <HAL_RCC_OscConfig+0x134>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ee:	4a50      	ldr	r2, [pc, #320]	; (8006630 <HAL_RCC_OscConfig+0x58c>)
 80064f0:	6a13      	ldr	r3, [r2, #32]
 80064f2:	f043 0301 	orr.w	r3, r3, #1
 80064f6:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80064f8:	f7fd fe3c 	bl	8004174 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fc:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8006630 <HAL_RCC_OscConfig+0x58c>
      tickstart = HAL_GetTick();
 8006500:	4606      	mov	r6, r0
 8006502:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006506:	2701      	movs	r7, #1
 8006508:	e007      	b.n	800651a <HAL_RCC_OscConfig+0x476>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fd fe33 	bl	8004174 <HAL_GetTick>
 800650e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006512:	1b80      	subs	r0, r0, r6
 8006514:	4298      	cmp	r0, r3
 8006516:	f63f af6d 	bhi.w	80063f4 <HAL_RCC_OscConfig+0x350>
 800651a:	fa99 f3a9 	rbit	r3, r9
 800651e:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006522:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8006526:	fa99 f3a9 	rbit	r3, r9
 800652a:	fab3 f383 	clz	r3, r3
 800652e:	fa07 f303 	lsl.w	r3, r7, r3
 8006532:	4213      	tst	r3, r2
 8006534:	d0e9      	beq.n	800650a <HAL_RCC_OscConfig+0x466>
    if(pwrclkchanged == SET)
 8006536:	2d00      	cmp	r5, #0
 8006538:	f43f ae9d 	beq.w	8006276 <HAL_RCC_OscConfig+0x1d2>
 800653c:	e7ad      	b.n	800649a <HAL_RCC_OscConfig+0x3f6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800653e:	2801      	cmp	r0, #1
 8006540:	f43f aecb 	beq.w	80062da <HAL_RCC_OscConfig+0x236>
        pll_config = RCC->CFGR;
 8006544:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006546:	6a22      	ldr	r2, [r4, #32]
 8006548:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800654c:	4291      	cmp	r1, r2
 800654e:	f47f aedc 	bne.w	800630a <HAL_RCC_OscConfig+0x266>
 8006552:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006554:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8006558:	1a18      	subs	r0, r3, r0
 800655a:	bf18      	it	ne
 800655c:	2001      	movne	r0, #1
 800655e:	e6bc      	b.n	80062da <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006564:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e5bf      	b.n	80060fa <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800657a:	f042 0204 	orr.w	r2, r2, #4
 800657e:	621a      	str	r2, [r3, #32]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	621a      	str	r2, [r3, #32]
 8006588:	e7b6      	b.n	80064f8 <HAL_RCC_OscConfig+0x454>
    return HAL_ERROR;
 800658a:	2001      	movs	r0, #1
}
 800658c:	4770      	bx	lr
 800658e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8006592:	fab3 f383 	clz	r3, r3
 8006596:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800659a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80065a4:	f7fd fde6 	bl	8004174 <HAL_GetTick>
 80065a8:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 80065ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065ae:	2701      	movs	r7, #1
 80065b0:	e005      	b.n	80065be <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b2:	f7fd fddf 	bl	8004174 <HAL_GetTick>
 80065b6:	1b80      	subs	r0, r0, r6
 80065b8:	2802      	cmp	r0, #2
 80065ba:	f63f af1b 	bhi.w	80063f4 <HAL_RCC_OscConfig+0x350>
 80065be:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065c2:	682a      	ldr	r2, [r5, #0]
 80065c4:	fa98 f3a8 	rbit	r3, r8
 80065c8:	fab3 f383 	clz	r3, r3
 80065cc:	fa07 f303 	lsl.w	r3, r7, r3
 80065d0:	4213      	tst	r3, r2
 80065d2:	d1ee      	bne.n	80065b2 <HAL_RCC_OscConfig+0x50e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065d4:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 80065d8:	686a      	ldr	r2, [r5, #4]
 80065da:	430b      	orrs	r3, r1
 80065dc:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80065e0:	4313      	orrs	r3, r2
 80065e2:	606b      	str	r3, [r5, #4]
 80065e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80065ec:	fab3 f383 	clz	r3, r3
 80065f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80065f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80065f8:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065fa:	4d0d      	ldr	r5, [pc, #52]	; (8006630 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_PLL_ENABLE();
 80065fc:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 80065fe:	f7fd fdb9 	bl	8004174 <HAL_GetTick>
 8006602:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8006606:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006608:	2601      	movs	r6, #1
 800660a:	e005      	b.n	8006618 <HAL_RCC_OscConfig+0x574>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800660c:	f7fd fdb2 	bl	8004174 <HAL_GetTick>
 8006610:	1b00      	subs	r0, r0, r4
 8006612:	2802      	cmp	r0, #2
 8006614:	f63f aeee 	bhi.w	80063f4 <HAL_RCC_OscConfig+0x350>
 8006618:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800661c:	682a      	ldr	r2, [r5, #0]
 800661e:	fa97 f3a7 	rbit	r3, r7
 8006622:	fab3 f383 	clz	r3, r3
 8006626:	fa06 f303 	lsl.w	r3, r6, r3
 800662a:	4213      	tst	r3, r2
 800662c:	d0ee      	beq.n	800660c <HAL_RCC_OscConfig+0x568>
 800662e:	e653      	b.n	80062d8 <HAL_RCC_OscConfig+0x234>
 8006630:	40021000 	.word	0x40021000

08006634 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006634:	2800      	cmp	r0, #0
 8006636:	f000 80b2 	beq.w	800679e <HAL_RCC_ClockConfig+0x16a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800663a:	4a65      	ldr	r2, [pc, #404]	; (80067d0 <HAL_RCC_ClockConfig+0x19c>)
 800663c:	6813      	ldr	r3, [r2, #0]
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	428b      	cmp	r3, r1
{
 8006644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006648:	460d      	mov	r5, r1
 800664a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800664c:	d20c      	bcs.n	8006668 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	f023 0307 	bic.w	r3, r3, #7
 8006654:	430b      	orrs	r3, r1
 8006656:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006658:	6813      	ldr	r3, [r2, #0]
 800665a:	f003 0307 	and.w	r3, r3, #7
 800665e:	428b      	cmp	r3, r1
 8006660:	d002      	beq.n	8006668 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006662:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	079f      	lsls	r7, r3, #30
 800666c:	d506      	bpl.n	800667c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800666e:	4959      	ldr	r1, [pc, #356]	; (80067d4 <HAL_RCC_ClockConfig+0x1a0>)
 8006670:	68a0      	ldr	r0, [r4, #8]
 8006672:	684a      	ldr	r2, [r1, #4]
 8006674:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006678:	4302      	orrs	r2, r0
 800667a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800667c:	07de      	lsls	r6, r3, #31
 800667e:	d52d      	bpl.n	80066dc <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006680:	6862      	ldr	r2, [r4, #4]
 8006682:	2a01      	cmp	r2, #1
 8006684:	f000 808d 	beq.w	80067a2 <HAL_RCC_ClockConfig+0x16e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006688:	2a02      	cmp	r2, #2
 800668a:	bf0c      	ite	eq
 800668c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8006690:	2302      	movne	r3, #2
 8006692:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006696:	494f      	ldr	r1, [pc, #316]	; (80067d4 <HAL_RCC_ClockConfig+0x1a0>)
 8006698:	6808      	ldr	r0, [r1, #0]
 800669a:	fa93 f3a3 	rbit	r3, r3
 800669e:	2101      	movs	r1, #1
 80066a0:	fab3 f383 	clz	r3, r3
 80066a4:	fa01 f303 	lsl.w	r3, r1, r3
 80066a8:	4203      	tst	r3, r0
 80066aa:	d0da      	beq.n	8006662 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066ac:	4e49      	ldr	r6, [pc, #292]	; (80067d4 <HAL_RCC_ClockConfig+0x1a0>)
 80066ae:	6873      	ldr	r3, [r6, #4]
 80066b0:	f023 0303 	bic.w	r3, r3, #3
 80066b4:	4313      	orrs	r3, r2
 80066b6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80066b8:	f7fd fd5c 	bl	8004174 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066bc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80066c0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c2:	e004      	b.n	80066ce <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c4:	f7fd fd56 	bl	8004174 <HAL_GetTick>
 80066c8:	1bc0      	subs	r0, r0, r7
 80066ca:	4540      	cmp	r0, r8
 80066cc:	d879      	bhi.n	80067c2 <HAL_RCC_ClockConfig+0x18e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066ce:	6873      	ldr	r3, [r6, #4]
 80066d0:	6862      	ldr	r2, [r4, #4]
 80066d2:	f003 030c 	and.w	r3, r3, #12
 80066d6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80066da:	d1f3      	bne.n	80066c4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066dc:	4a3c      	ldr	r2, [pc, #240]	; (80067d0 <HAL_RCC_ClockConfig+0x19c>)
 80066de:	6813      	ldr	r3, [r2, #0]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	42ab      	cmp	r3, r5
 80066e6:	d909      	bls.n	80066fc <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e8:	6813      	ldr	r3, [r2, #0]
 80066ea:	f023 0307 	bic.w	r3, r3, #7
 80066ee:	432b      	orrs	r3, r5
 80066f0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	6813      	ldr	r3, [r2, #0]
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	42ab      	cmp	r3, r5
 80066fa:	d1b2      	bne.n	8006662 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	0758      	lsls	r0, r3, #29
 8006700:	d506      	bpl.n	8006710 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006702:	4934      	ldr	r1, [pc, #208]	; (80067d4 <HAL_RCC_ClockConfig+0x1a0>)
 8006704:	68e0      	ldr	r0, [r4, #12]
 8006706:	684a      	ldr	r2, [r1, #4]
 8006708:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800670c:	4302      	orrs	r2, r0
 800670e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006710:	0719      	lsls	r1, r3, #28
 8006712:	d507      	bpl.n	8006724 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006714:	4a2f      	ldr	r2, [pc, #188]	; (80067d4 <HAL_RCC_ClockConfig+0x1a0>)
 8006716:	6921      	ldr	r1, [r4, #16]
 8006718:	6853      	ldr	r3, [r2, #4]
 800671a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800671e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006722:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8006724:	492b      	ldr	r1, [pc, #172]	; (80067d4 <HAL_RCC_ClockConfig+0x1a0>)
 8006726:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006728:	f002 030c 	and.w	r3, r2, #12
 800672c:	2b08      	cmp	r3, #8
 800672e:	d017      	beq.n	8006760 <HAL_RCC_ClockConfig+0x12c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006730:	4929      	ldr	r1, [pc, #164]	; (80067d8 <HAL_RCC_ClockConfig+0x1a4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006732:	4b28      	ldr	r3, [pc, #160]	; (80067d4 <HAL_RCC_ClockConfig+0x1a0>)
 8006734:	22f0      	movs	r2, #240	; 0xf0
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	fa92 f2a2 	rbit	r2, r2
 800673c:	fab2 f282 	clz	r2, r2
 8006740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006744:	40d3      	lsrs	r3, r2
 8006746:	4a25      	ldr	r2, [pc, #148]	; (80067dc <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 8006748:	4825      	ldr	r0, [pc, #148]	; (80067e0 <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800674a:	5cd3      	ldrb	r3, [r2, r3]
 800674c:	4a25      	ldr	r2, [pc, #148]	; (80067e4 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 800674e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006750:	fa21 f303 	lsr.w	r3, r1, r3
 8006754:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8006756:	f7fd fccb 	bl	80040f0 <HAL_InitTick>
  return HAL_OK;
 800675a:	2000      	movs	r0, #0
}
 800675c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006760:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8006764:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006768:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 800676c:	fab3 f383 	clz	r3, r3
 8006770:	4c1d      	ldr	r4, [pc, #116]	; (80067e8 <HAL_RCC_ClockConfig+0x1b4>)
 8006772:	fa20 f303 	lsr.w	r3, r0, r3
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006776:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006778:	5ce3      	ldrb	r3, [r4, r3]
 800677a:	210f      	movs	r1, #15
 800677c:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006780:	03d2      	lsls	r2, r2, #15
 8006782:	d520      	bpl.n	80067c6 <HAL_RCC_ClockConfig+0x192>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006784:	fab1 f181 	clz	r1, r1
 8006788:	f000 000f 	and.w	r0, r0, #15
 800678c:	4c17      	ldr	r4, [pc, #92]	; (80067ec <HAL_RCC_ClockConfig+0x1b8>)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800678e:	4a12      	ldr	r2, [pc, #72]	; (80067d8 <HAL_RCC_ClockConfig+0x1a4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006790:	40c8      	lsrs	r0, r1
 8006792:	5c21      	ldrb	r1, [r4, r0]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006794:	fbb2 f2f1 	udiv	r2, r2, r1
 8006798:	fb03 f102 	mul.w	r1, r3, r2
 800679c:	e7c9      	b.n	8006732 <HAL_RCC_ClockConfig+0xfe>
    return HAL_ERROR;
 800679e:	2001      	movs	r0, #1
}
 80067a0:	4770      	bx	lr
 80067a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067a6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067aa:	490a      	ldr	r1, [pc, #40]	; (80067d4 <HAL_RCC_ClockConfig+0x1a0>)
 80067ac:	6809      	ldr	r1, [r1, #0]
 80067ae:	fa93 f3a3 	rbit	r3, r3
 80067b2:	fab3 f383 	clz	r3, r3
 80067b6:	fa02 f303 	lsl.w	r3, r2, r3
 80067ba:	420b      	tst	r3, r1
 80067bc:	f47f af76 	bne.w	80066ac <HAL_RCC_ClockConfig+0x78>
 80067c0:	e74f      	b.n	8006662 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80067c2:	2003      	movs	r0, #3
 80067c4:	e74e      	b.n	8006664 <HAL_RCC_ClockConfig+0x30>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80067c6:	490a      	ldr	r1, [pc, #40]	; (80067f0 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	fb03 f101 	mul.w	r1, r3, r1
 80067cc:	e7b1      	b.n	8006732 <HAL_RCC_ClockConfig+0xfe>
 80067ce:	bf00      	nop
 80067d0:	40022000 	.word	0x40022000
 80067d4:	40021000 	.word	0x40021000
 80067d8:	007a1200 	.word	0x007a1200
 80067dc:	0800c670 	.word	0x0800c670
 80067e0:	20000010 	.word	0x20000010
 80067e4:	20000008 	.word	0x20000008
 80067e8:	0800c688 	.word	0x0800c688
 80067ec:	0800c698 	.word	0x0800c698
 80067f0:	003d0900 	.word	0x003d0900

080067f4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80067f4:	4917      	ldr	r1, [pc, #92]	; (8006854 <HAL_RCC_GetSysClockFreq+0x60>)
 80067f6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80067f8:	f003 020c 	and.w	r2, r3, #12
 80067fc:	2a08      	cmp	r2, #8
 80067fe:	d001      	beq.n	8006804 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8006800:	4815      	ldr	r0, [pc, #84]	; (8006858 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006802:	4770      	bx	lr
{
 8006804:	b410      	push	{r4}
 8006806:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800680a:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800680e:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8006812:	fab2 f282 	clz	r2, r2
 8006816:	4c11      	ldr	r4, [pc, #68]	; (800685c <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006818:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800681a:	fa20 f202 	lsr.w	r2, r0, r2
 800681e:	5ca0      	ldrb	r0, [r4, r2]
 8006820:	220f      	movs	r2, #15
 8006822:	fa92 f2a2 	rbit	r2, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006826:	03db      	lsls	r3, r3, #15
 8006828:	d50e      	bpl.n	8006848 <HAL_RCC_GetSysClockFreq+0x54>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800682a:	fab2 f282 	clz	r2, r2
 800682e:	f001 010f 	and.w	r1, r1, #15
 8006832:	4c0b      	ldr	r4, [pc, #44]	; (8006860 <HAL_RCC_GetSysClockFreq+0x6c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006834:	4b08      	ldr	r3, [pc, #32]	; (8006858 <HAL_RCC_GetSysClockFreq+0x64>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006836:	40d1      	lsrs	r1, r2
 8006838:	5c62      	ldrb	r2, [r4, r1]
}
 800683a:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800683e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006842:	fb03 f000 	mul.w	r0, r3, r0
}
 8006846:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <HAL_RCC_GetSysClockFreq+0x70>)
}
 800684a:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800684e:	fb03 f000 	mul.w	r0, r3, r0
}
 8006852:	4770      	bx	lr
 8006854:	40021000 	.word	0x40021000
 8006858:	007a1200 	.word	0x007a1200
 800685c:	0800c688 	.word	0x0800c688
 8006860:	0800c698 	.word	0x0800c698
 8006864:	003d0900 	.word	0x003d0900

08006868 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006868:	4b08      	ldr	r3, [pc, #32]	; (800688c <HAL_RCC_GetPCLK1Freq+0x24>)
 800686a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	fa92 f2a2 	rbit	r2, r2
 8006874:	fab2 f282 	clz	r2, r2
 8006878:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800687c:	4904      	ldr	r1, [pc, #16]	; (8006890 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 800687e:	4805      	ldr	r0, [pc, #20]	; (8006894 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006880:	40d3      	lsrs	r3, r2
 8006882:	6800      	ldr	r0, [r0, #0]
 8006884:	5ccb      	ldrb	r3, [r1, r3]
}    
 8006886:	40d8      	lsrs	r0, r3
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000
 8006890:	0800c680 	.word	0x0800c680
 8006894:	20000008 	.word	0x20000008

08006898 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006898:	4b08      	ldr	r3, [pc, #32]	; (80068bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800689a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	fa92 f2a2 	rbit	r2, r2
 80068a4:	fab2 f282 	clz	r2, r2
 80068a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80068ac:	4904      	ldr	r1, [pc, #16]	; (80068c0 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80068ae:	4805      	ldr	r0, [pc, #20]	; (80068c4 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80068b0:	40d3      	lsrs	r3, r2
 80068b2:	6800      	ldr	r0, [r0, #0]
 80068b4:	5ccb      	ldrb	r3, [r1, r3]
} 
 80068b6:	40d8      	lsrs	r0, r3
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40021000 	.word	0x40021000
 80068c0:	0800c680 	.word	0x0800c680
 80068c4:	20000008 	.word	0x20000008

080068c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068cc:	6803      	ldr	r3, [r0, #0]
 80068ce:	03dd      	lsls	r5, r3, #15
{
 80068d0:	b083      	sub	sp, #12
 80068d2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068d4:	d540      	bpl.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d6:	4b7f      	ldr	r3, [pc, #508]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80068d8:	69da      	ldr	r2, [r3, #28]
 80068da:	00d0      	lsls	r0, r2, #3
 80068dc:	f140 80ba 	bpl.w	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e0:	4d7d      	ldr	r5, [pc, #500]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80068e2:	682b      	ldr	r3, [r5, #0]
 80068e4:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 80068e6:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ea:	f140 80c3 	bpl.w	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068ee:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80068f2:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068f6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80068fa:	d020      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80068fc:	6861      	ldr	r1, [r4, #4]
 80068fe:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8006902:	429a      	cmp	r2, r3
 8006904:	d01c      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006906:	f8d8 1020 	ldr.w	r1, [r8, #32]
 800690a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800690e:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8006912:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006916:	4f71      	ldr	r7, [pc, #452]	; (8006adc <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006918:	fab2 f282 	clz	r2, r2
 800691c:	443a      	add	r2, r7
 800691e:	0092      	lsls	r2, r2, #2
 8006920:	2501      	movs	r5, #1
 8006922:	6015      	str	r5, [r2, #0]
 8006924:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006928:	fab3 f383 	clz	r3, r3
 800692c:	443b      	add	r3, r7
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006934:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8006936:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800693a:	f100 80af 	bmi.w	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800693e:	6861      	ldr	r1, [r4, #4]
 8006940:	4a64      	ldr	r2, [pc, #400]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006942:	6a13      	ldr	r3, [r2, #32]
 8006944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006948:	430b      	orrs	r3, r1
 800694a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800694c:	b11e      	cbz	r6, 8006956 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800694e:	69d3      	ldr	r3, [r2, #28]
 8006950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006954:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	07df      	lsls	r7, r3, #31
 800695a:	d506      	bpl.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800695c:	495d      	ldr	r1, [pc, #372]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800695e:	68a0      	ldr	r0, [r4, #8]
 8006960:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8006962:	f022 0203 	bic.w	r2, r2, #3
 8006966:	4302      	orrs	r2, r0
 8006968:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800696a:	079e      	lsls	r6, r3, #30
 800696c:	d506      	bpl.n	800697c <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800696e:	4959      	ldr	r1, [pc, #356]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006970:	68e0      	ldr	r0, [r4, #12]
 8006972:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8006974:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006978:	4302      	orrs	r2, r0
 800697a:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800697c:	075d      	lsls	r5, r3, #29
 800697e:	d506      	bpl.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006980:	4954      	ldr	r1, [pc, #336]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006982:	6920      	ldr	r0, [r4, #16]
 8006984:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8006986:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800698a:	4302      	orrs	r2, r0
 800698c:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800698e:	0698      	lsls	r0, r3, #26
 8006990:	d506      	bpl.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006992:	4950      	ldr	r1, [pc, #320]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006994:	69e0      	ldr	r0, [r4, #28]
 8006996:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8006998:	f022 0210 	bic.w	r2, r2, #16
 800699c:	4302      	orrs	r2, r0
 800699e:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069a0:	0399      	lsls	r1, r3, #14
 80069a2:	d506      	bpl.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80069a4:	494b      	ldr	r1, [pc, #300]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80069a6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80069a8:	684a      	ldr	r2, [r1, #4]
 80069aa:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80069ae:	4302      	orrs	r2, r0
 80069b0:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069b2:	065a      	lsls	r2, r3, #25
 80069b4:	d506      	bpl.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069b6:	4947      	ldr	r1, [pc, #284]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80069b8:	6a20      	ldr	r0, [r4, #32]
 80069ba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80069bc:	f022 0220 	bic.w	r2, r2, #32
 80069c0:	4302      	orrs	r2, r0
 80069c2:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069c4:	071f      	lsls	r7, r3, #28
 80069c6:	d506      	bpl.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069c8:	4942      	ldr	r1, [pc, #264]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80069ca:	6960      	ldr	r0, [r4, #20]
 80069cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80069ce:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80069d2:	4302      	orrs	r2, r0
 80069d4:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069d6:	06de      	lsls	r6, r3, #27
 80069d8:	d506      	bpl.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069da:	493e      	ldr	r1, [pc, #248]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80069dc:	69a0      	ldr	r0, [r4, #24]
 80069de:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80069e0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80069e4:	4302      	orrs	r2, r0
 80069e6:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80069e8:	059d      	lsls	r5, r3, #22
 80069ea:	d506      	bpl.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069ec:	4939      	ldr	r1, [pc, #228]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80069ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80069f0:	684a      	ldr	r2, [r1, #4]
 80069f2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80069f6:	4302      	orrs	r2, r0
 80069f8:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80069fa:	0618      	lsls	r0, r3, #24
 80069fc:	d506      	bpl.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80069fe:	4935      	ldr	r1, [pc, #212]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006a00:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a02:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006a04:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8006a08:	4302      	orrs	r2, r0
 8006a0a:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006a0c:	05d9      	lsls	r1, r3, #23
 8006a0e:	d506      	bpl.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006a10:	4930      	ldr	r1, [pc, #192]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006a12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006a14:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8006a16:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8006a1a:	4302      	orrs	r2, r0
 8006a1c:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006a1e:	04da      	lsls	r2, r3, #19
 8006a20:	d506      	bpl.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006a22:	492c      	ldr	r1, [pc, #176]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006a24:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006a26:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8006a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a2c:	4302      	orrs	r2, r0
 8006a2e:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006a30:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8006a34:	d103      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006a36:	4618      	mov	r0, r3
}
 8006a38:	b003      	add	sp, #12
 8006a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006a3e:	4a25      	ldr	r2, [pc, #148]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8006a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 8006a48:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8006a4e:	b003      	add	sp, #12
 8006a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a54:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a56:	4d20      	ldr	r5, [pc, #128]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a5c:	61da      	str	r2, [r3, #28]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a64:	9301      	str	r3, [sp, #4]
 8006a66:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 8006a6c:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a70:	f53f af3d 	bmi.w	80068ee <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a7a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006a7c:	f7fd fb7a 	bl	8004174 <HAL_GetTick>
 8006a80:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	05da      	lsls	r2, r3, #23
 8006a86:	f53f af32 	bmi.w	80068ee <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a8a:	f7fd fb73 	bl	8004174 <HAL_GetTick>
 8006a8e:	1bc0      	subs	r0, r0, r7
 8006a90:	2864      	cmp	r0, #100	; 0x64
 8006a92:	d9f6      	bls.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 8006a94:	2003      	movs	r0, #3
}
 8006a96:	b003      	add	sp, #12
 8006a98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8006a9c:	f7fd fb6a 	bl	8004174 <HAL_GetTick>
 8006aa0:	f04f 0902 	mov.w	r9, #2
 8006aa4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aa6:	e006      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa8:	f7fd fb64 	bl	8004174 <HAL_GetTick>
 8006aac:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ab0:	1bc0      	subs	r0, r0, r7
 8006ab2:	4298      	cmp	r0, r3
 8006ab4:	d8ee      	bhi.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ab6:	fa99 f3a9 	rbit	r3, r9
 8006aba:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006abe:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8006ac2:	fa99 f3a9 	rbit	r3, r9
 8006ac6:	fab3 f383 	clz	r3, r3
 8006aca:	fa05 f303 	lsl.w	r3, r5, r3
 8006ace:	4213      	tst	r3, r2
 8006ad0:	d0ea      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8006ad2:	e734      	b.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	40007000 	.word	0x40007000
 8006adc:	10908100 	.word	0x10908100

08006ae0 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d077      	beq.n	8006bd4 <HAL_SPI_Init+0xf4>
{
 8006ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ae8:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006aea:	4604      	mov	r4, r0
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	d058      	beq.n	8006ba2 <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006af0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006af6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006afa:	2200      	movs	r2, #0
 8006afc:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006afe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d059      	beq.n	8006bba <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b06:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b08:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8006b10:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b12:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8006b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b1a:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b1c:	d947      	bls.n	8006bae <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b1e:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8006b22:	d159      	bne.n	8006bd8 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b24:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b26:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b28:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8006b2c:	6862      	ldr	r2, [r4, #4]
 8006b2e:	68a3      	ldr	r3, [r4, #8]
 8006b30:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8006b34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	4313      	orrs	r3, r2
 8006b42:	6962      	ldr	r2, [r4, #20]
 8006b44:	f002 0201 	and.w	r2, r2, #1
 8006b48:	431a      	orrs	r2, r3
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b4c:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b58:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b5a:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b5e:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8006b62:	69a6      	ldr	r6, [r4, #24]
 8006b64:	6a23      	ldr	r3, [r4, #32]
 8006b66:	f003 0780 	and.w	r7, r3, #128	; 0x80
 8006b6a:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	ea43 0308 	orr.w	r3, r3, r8
 8006b74:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b76:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b78:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b7a:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b7e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b80:	ea4e 0306 	orr.w	r3, lr, r6
 8006b84:	ea43 030c 	orr.w	r3, r3, ip
 8006b88:	4303      	orrs	r3, r0
 8006b8a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b8c:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b8e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8006b94:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b96:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b98:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b9a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8006b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ba2:	6843      	ldr	r3, [r0, #4]
 8006ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ba8:	d0a5      	beq.n	8006af6 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006baa:	61c6      	str	r6, [r0, #28]
 8006bac:	e7a3      	b.n	8006af6 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bae:	d00b      	beq.n	8006bc8 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bb0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bb4:	2500      	movs	r5, #0
 8006bb6:	62a5      	str	r5, [r4, #40]	; 0x28
 8006bb8:	e7b8      	b.n	8006b2c <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8006bba:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f7fc fb9c 	bl	80032fc <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006bc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006bc6:	e79e      	b.n	8006b06 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bc8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006bce:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8006bd2:	e7ab      	b.n	8006b2c <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8006bd4:	2001      	movs	r0, #1
}
 8006bd6:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e7eb      	b.n	8006bb4 <HAL_SPI_Init+0xd4>

08006bdc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bdc:	6a03      	ldr	r3, [r0, #32]
 8006bde:	f023 0301 	bic.w	r3, r3, #1
 8006be2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be4:	6a03      	ldr	r3, [r0, #32]
{
 8006be6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bea:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006bf2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006bf6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bf8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006bfe:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c00:	4d13      	ldr	r5, [pc, #76]	; (8006c50 <TIM_OC1_SetConfig+0x74>)
 8006c02:	42a8      	cmp	r0, r5
 8006c04:	d00f      	beq.n	8006c26 <TIM_OC1_SetConfig+0x4a>
 8006c06:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006c0a:	42a8      	cmp	r0, r5
 8006c0c:	d00b      	beq.n	8006c26 <TIM_OC1_SetConfig+0x4a>
 8006c0e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006c12:	42a8      	cmp	r0, r5
 8006c14:	d007      	beq.n	8006c26 <TIM_OC1_SetConfig+0x4a>
 8006c16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006c1a:	42a8      	cmp	r0, r5
 8006c1c:	d003      	beq.n	8006c26 <TIM_OC1_SetConfig+0x4a>
 8006c1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006c22:	42a8      	cmp	r0, r5
 8006c24:	d10d      	bne.n	8006c42 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c26:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c28:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006c2c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c2e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c32:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c36:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c3a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c3e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c42:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006c44:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006c46:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006c48:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8006c4a:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8006c4c:	6203      	str	r3, [r0, #32]
}
 8006c4e:	4770      	bx	lr
 8006c50:	40012c00 	.word	0x40012c00

08006c54 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c54:	6a03      	ldr	r3, [r0, #32]
 8006c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c5a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c5c:	6a03      	ldr	r3, [r0, #32]
{
 8006c5e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c64:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006c6a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006c6e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c70:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8006c72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c76:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c7a:	4d15      	ldr	r5, [pc, #84]	; (8006cd0 <TIM_OC3_SetConfig+0x7c>)
 8006c7c:	42a8      	cmp	r0, r5
 8006c7e:	d010      	beq.n	8006ca2 <TIM_OC3_SetConfig+0x4e>
 8006c80:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006c84:	42a8      	cmp	r0, r5
 8006c86:	d00c      	beq.n	8006ca2 <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c88:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006c8c:	42a8      	cmp	r0, r5
 8006c8e:	d00f      	beq.n	8006cb0 <TIM_OC3_SetConfig+0x5c>
 8006c90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006c94:	42a8      	cmp	r0, r5
 8006c96:	d00b      	beq.n	8006cb0 <TIM_OC3_SetConfig+0x5c>
 8006c98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006c9c:	42a8      	cmp	r0, r5
 8006c9e:	d10f      	bne.n	8006cc0 <TIM_OC3_SetConfig+0x6c>
 8006ca0:	e006      	b.n	8006cb0 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ca2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ca8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cb0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cb4:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cb8:	ea46 0c05 	orr.w	ip, r6, r5
 8006cbc:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cc0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006cc2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006cc4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006cc6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8006cc8:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006cca:	6203      	str	r3, [r0, #32]
}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40012c00 	.word	0x40012c00

08006cd4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d122      	bne.n	8006d22 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cdc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cde:	4917      	ldr	r1, [pc, #92]	; (8006d3c <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ce6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006cea:	f042 0201 	orr.w	r2, r2, #1
 8006cee:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf0:	d019      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x52>
 8006cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf6:	d016      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x52>
 8006cf8:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <HAL_TIM_Base_Start_IT+0x6c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d013      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x52>
 8006cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00f      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x52>
 8006d06:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d00b      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x52>
 8006d0e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d007      	beq.n	8006d26 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8006d1c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	4770      	bx	lr
    return HAL_ERROR;
 8006d22:	2001      	movs	r0, #1
 8006d24:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d26:	6899      	ldr	r1, [r3, #8]
 8006d28:	4a06      	ldr	r2, [pc, #24]	; (8006d44 <HAL_TIM_Base_Start_IT+0x70>)
 8006d2a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2c:	2a06      	cmp	r2, #6
 8006d2e:	d002      	beq.n	8006d36 <HAL_TIM_Base_Start_IT+0x62>
 8006d30:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006d34:	d1ef      	bne.n	8006d16 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8006d36:	2000      	movs	r0, #0
}
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	40012c00 	.word	0x40012c00
 8006d40:	40000400 	.word	0x40000400
 8006d44:	00010007 	.word	0x00010007

08006d48 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006d48:	6803      	ldr	r3, [r0, #0]
 8006d4a:	68da      	ldr	r2, [r3, #12]
 8006d4c:	f022 0201 	bic.w	r2, r2, #1
 8006d50:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8006d52:	6a1a      	ldr	r2, [r3, #32]
 8006d54:	f241 1111 	movw	r1, #4369	; 0x1111
 8006d58:	420a      	tst	r2, r1
 8006d5a:	d108      	bne.n	8006d6e <HAL_TIM_Base_Stop_IT+0x26>
 8006d5c:	6a19      	ldr	r1, [r3, #32]
 8006d5e:	f240 4244 	movw	r2, #1092	; 0x444
 8006d62:	4211      	tst	r1, r2
 8006d64:	d103      	bne.n	8006d6e <HAL_TIM_Base_Stop_IT+0x26>
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8006d74:	2000      	movs	r0, #0
 8006d76:	4770      	bx	lr

08006d78 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	f000 8081 	beq.w	8006e80 <HAL_TIM_PWM_Init+0x108>
{
 8006d7e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8006d80:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006d84:	4604      	mov	r4, r0
 8006d86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d06d      	beq.n	8006e6a <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d8e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d90:	493c      	ldr	r1, [pc, #240]	; (8006e84 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006d92:	2302      	movs	r3, #2
 8006d94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d98:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8006d9a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d9c:	d051      	beq.n	8006e42 <HAL_TIM_PWM_Init+0xca>
 8006d9e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8006da2:	d021      	beq.n	8006de8 <HAL_TIM_PWM_Init+0x70>
 8006da4:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8006da8:	428a      	cmp	r2, r1
 8006daa:	d01d      	beq.n	8006de8 <HAL_TIM_PWM_Init+0x70>
 8006dac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006db0:	428a      	cmp	r2, r1
 8006db2:	d019      	beq.n	8006de8 <HAL_TIM_PWM_Init+0x70>
 8006db4:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8006db8:	428a      	cmp	r2, r1
 8006dba:	d042      	beq.n	8006e42 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dbc:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8006dc0:	428a      	cmp	r2, r1
 8006dc2:	d057      	beq.n	8006e74 <HAL_TIM_PWM_Init+0xfc>
 8006dc4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dc8:	428a      	cmp	r2, r1
 8006dca:	d053      	beq.n	8006e74 <HAL_TIM_PWM_Init+0xfc>
 8006dcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dd0:	428a      	cmp	r2, r1
 8006dd2:	d04f      	beq.n	8006e74 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd4:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ddc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8006dde:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8006de0:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006de2:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006de4:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de6:	e010      	b.n	8006e0a <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8006de8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dea:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006df0:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8006df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df6:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006df8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dfe:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e00:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8006e02:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8006e04:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e06:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e08:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e0e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006e16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006e1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006e1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006e22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e32:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8006e36:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006e3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006e3e:	2000      	movs	r0, #0
}
 8006e40:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8006e42:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e44:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006e4a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e50:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e52:	69a1      	ldr	r1, [r4, #24]
 8006e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e58:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8006e5a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e5c:	68e3      	ldr	r3, [r4, #12]
 8006e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006e60:	6863      	ldr	r3, [r4, #4]
 8006e62:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006e64:	6963      	ldr	r3, [r4, #20]
 8006e66:	6313      	str	r3, [r2, #48]	; 0x30
 8006e68:	e7cf      	b.n	8006e0a <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8006e6a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006e6e:	f7fc fc99 	bl	80037a4 <HAL_TIM_PWM_MspInit>
 8006e72:	e78c      	b.n	8006d8e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e74:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e76:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e7c:	4303      	orrs	r3, r0
 8006e7e:	e7e9      	b.n	8006e54 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8006e80:	2001      	movs	r0, #1
}
 8006e82:	4770      	bx	lr
 8006e84:	40012c00 	.word	0x40012c00

08006e88 <HAL_TIM_PWM_Start>:
 8006e88:	2910      	cmp	r1, #16
 8006e8a:	d80a      	bhi.n	8006ea2 <HAL_TIM_PWM_Start+0x1a>
 8006e8c:	e8df f001 	tbb	[pc, r1]
 8006e90:	09090955 	.word	0x09090955
 8006e94:	0909095b 	.word	0x0909095b
 8006e98:	09090963 	.word	0x09090963
 8006e9c:	09090968 	.word	0x09090968
 8006ea0:	71          	.byte	0x71
 8006ea1:	00          	.byte	0x00
 8006ea2:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d14b      	bne.n	8006f42 <HAL_TIM_PWM_Start+0xba>
 8006eaa:	2910      	cmp	r1, #16
 8006eac:	d80a      	bhi.n	8006ec4 <HAL_TIM_PWM_Start+0x3c>
 8006eae:	e8df f001 	tbb	[pc, r1]
 8006eb2:	0987      	.short	0x0987
 8006eb4:	094e0909 	.word	0x094e0909
 8006eb8:	09700909 	.word	0x09700909
 8006ebc:	096c0909 	.word	0x096c0909
 8006ec0:	0909      	.short	0x0909
 8006ec2:	68          	.byte	0x68
 8006ec3:	00          	.byte	0x00
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8006eca:	6803      	ldr	r3, [r0, #0]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	6a18      	ldr	r0, [r3, #32]
 8006ed0:	f001 011f 	and.w	r1, r1, #31
 8006ed4:	fa02 f101 	lsl.w	r1, r2, r1
 8006ed8:	ea20 0001 	bic.w	r0, r0, r1
 8006edc:	6218      	str	r0, [r3, #32]
 8006ede:	6a18      	ldr	r0, [r3, #32]
 8006ee0:	4a39      	ldr	r2, [pc, #228]	; (8006fc8 <HAL_TIM_PWM_Start+0x140>)
 8006ee2:	4301      	orrs	r1, r0
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	6219      	str	r1, [r3, #32]
 8006ee8:	d057      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x112>
 8006eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d061      	beq.n	8006fb6 <HAL_TIM_PWM_Start+0x12e>
 8006ef2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d05d      	beq.n	8006fb6 <HAL_TIM_PWM_Start+0x12e>
 8006efa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d059      	beq.n	8006fb6 <HAL_TIM_PWM_Start+0x12e>
 8006f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d055      	beq.n	8006fb6 <HAL_TIM_PWM_Start+0x12e>
 8006f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0e:	d048      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0x11a>
 8006f10:	4a2e      	ldr	r2, [pc, #184]	; (8006fcc <HAL_TIM_PWM_Start+0x144>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d045      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0x11a>
 8006f16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d041      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0x11a>
 8006f1e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d03d      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0x11a>
 8006f26:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d039      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0x11a>
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	f042 0201 	orr.w	r2, r2, #1
 8006f34:	2000      	movs	r0, #0
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	4770      	bx	lr
 8006f3a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d03e      	beq.n	8006fc0 <HAL_TIM_PWM_Start+0x138>
 8006f42:	2001      	movs	r0, #1
 8006f44:	4770      	bx	lr
 8006f46:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d1f9      	bne.n	8006f42 <HAL_TIM_PWM_Start+0xba>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8006f54:	e7b9      	b.n	8006eca <HAL_TIM_PWM_Start+0x42>
 8006f56:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d0a5      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x22>
 8006f5e:	e7f0      	b.n	8006f42 <HAL_TIM_PWM_Start+0xba>
 8006f60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006f64:	3b01      	subs	r3, #1
 8006f66:	bf18      	it	ne
 8006f68:	2301      	movne	r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d09d      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x22>
 8006f6e:	2001      	movs	r0, #1
 8006f70:	4770      	bx	lr
 8006f72:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8006f76:	3b01      	subs	r3, #1
 8006f78:	bf18      	it	ne
 8006f7a:	2301      	movne	r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d094      	beq.n	8006eaa <HAL_TIM_PWM_Start+0x22>
 8006f80:	e7f5      	b.n	8006f6e <HAL_TIM_PWM_Start+0xe6>
 8006f82:	2302      	movs	r3, #2
 8006f84:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8006f88:	e79f      	b.n	8006eca <HAL_TIM_PWM_Start+0x42>
 8006f8a:	2302      	movs	r3, #2
 8006f8c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8006f90:	e79b      	b.n	8006eca <HAL_TIM_PWM_Start+0x42>
 8006f92:	2302      	movs	r3, #2
 8006f94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8006f98:	e797      	b.n	8006eca <HAL_TIM_PWM_Start+0x42>
 8006f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fa0:	645a      	str	r2, [r3, #68]	; 0x44
 8006fa2:	6899      	ldr	r1, [r3, #8]
 8006fa4:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <HAL_TIM_PWM_Start+0x148>)
 8006fa6:	400a      	ands	r2, r1
 8006fa8:	2a06      	cmp	r2, #6
 8006faa:	d002      	beq.n	8006fb2 <HAL_TIM_PWM_Start+0x12a>
 8006fac:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006fb0:	d1bd      	bne.n	8006f2e <HAL_TIM_PWM_Start+0xa6>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	4770      	bx	lr
 8006fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fbc:	645a      	str	r2, [r3, #68]	; 0x44
 8006fbe:	e7a4      	b.n	8006f0a <HAL_TIM_PWM_Start+0x82>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8006fc6:	e780      	b.n	8006eca <HAL_TIM_PWM_Start+0x42>
 8006fc8:	40012c00 	.word	0x40012c00
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	00010007 	.word	0x00010007

08006fd4 <HAL_TIM_PWM_Stop>:
 8006fd4:	6803      	ldr	r3, [r0, #0]
 8006fd6:	b410      	push	{r4}
 8006fd8:	6a1a      	ldr	r2, [r3, #32]
 8006fda:	f001 041f 	and.w	r4, r1, #31
 8006fde:	f04f 0c01 	mov.w	ip, #1
 8006fe2:	fa0c fc04 	lsl.w	ip, ip, r4
 8006fe6:	ea22 020c 	bic.w	r2, r2, ip
 8006fea:	621a      	str	r2, [r3, #32]
 8006fec:	4a35      	ldr	r2, [pc, #212]	; (80070c4 <HAL_TIM_PWM_Stop+0xf0>)
 8006fee:	6a1c      	ldr	r4, [r3, #32]
 8006ff0:	621c      	str	r4, [r3, #32]
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d021      	beq.n	800703a <HAL_TIM_PWM_Stop+0x66>
 8006ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d01d      	beq.n	800703a <HAL_TIM_PWM_Stop+0x66>
 8006ffe:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007002:	4293      	cmp	r3, r2
 8007004:	d019      	beq.n	800703a <HAL_TIM_PWM_Stop+0x66>
 8007006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800700a:	4293      	cmp	r3, r2
 800700c:	d015      	beq.n	800703a <HAL_TIM_PWM_Stop+0x66>
 800700e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007012:	4293      	cmp	r3, r2
 8007014:	d011      	beq.n	800703a <HAL_TIM_PWM_Stop+0x66>
 8007016:	6a1c      	ldr	r4, [r3, #32]
 8007018:	f241 1211 	movw	r2, #4369	; 0x1111
 800701c:	4214      	tst	r4, r2
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Stop+0x56>
 8007020:	6a1c      	ldr	r4, [r3, #32]
 8007022:	f240 4244 	movw	r2, #1092	; 0x444
 8007026:	4214      	tst	r4, r2
 8007028:	d016      	beq.n	8007058 <HAL_TIM_PWM_Stop+0x84>
 800702a:	b9d9      	cbnz	r1, 8007064 <HAL_TIM_PWM_Stop+0x90>
 800702c:	2301      	movs	r3, #1
 800702e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8007032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007036:	2000      	movs	r0, #0
 8007038:	4770      	bx	lr
 800703a:	6a1c      	ldr	r4, [r3, #32]
 800703c:	f241 1211 	movw	r2, #4369	; 0x1111
 8007040:	4214      	tst	r4, r2
 8007042:	d1e8      	bne.n	8007016 <HAL_TIM_PWM_Stop+0x42>
 8007044:	6a1c      	ldr	r4, [r3, #32]
 8007046:	f240 4244 	movw	r2, #1092	; 0x444
 800704a:	4214      	tst	r4, r2
 800704c:	d1e3      	bne.n	8007016 <HAL_TIM_PWM_Stop+0x42>
 800704e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007050:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007054:	645a      	str	r2, [r3, #68]	; 0x44
 8007056:	e7de      	b.n	8007016 <HAL_TIM_PWM_Stop+0x42>
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	f022 0201 	bic.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	2900      	cmp	r1, #0
 8007062:	d0e3      	beq.n	800702c <HAL_TIM_PWM_Stop+0x58>
 8007064:	3904      	subs	r1, #4
 8007066:	290c      	cmp	r1, #12
 8007068:	d808      	bhi.n	800707c <HAL_TIM_PWM_Stop+0xa8>
 800706a:	e8df f001 	tbb	[pc, r1]
 800706e:	0723      	.short	0x0723
 8007070:	071c0707 	.word	0x071c0707
 8007074:	07150707 	.word	0x07150707
 8007078:	0707      	.short	0x0707
 800707a:	0e          	.byte	0x0e
 800707b:	00          	.byte	0x00
 800707c:	2301      	movs	r3, #1
 800707e:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007086:	2000      	movs	r0, #0
 8007088:	4770      	bx	lr
 800708a:	2301      	movs	r3, #1
 800708c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8007090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007094:	2000      	movs	r0, #0
 8007096:	4770      	bx	lr
 8007098:	2301      	movs	r3, #1
 800709a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800709e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070a2:	2000      	movs	r0, #0
 80070a4:	4770      	bx	lr
 80070a6:	2301      	movs	r3, #1
 80070a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80070ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070b0:	2000      	movs	r0, #0
 80070b2:	4770      	bx	lr
 80070b4:	2301      	movs	r3, #1
 80070b6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80070ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070be:	2000      	movs	r0, #0
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40012c00 	.word	0x40012c00

080070c8 <HAL_TIM_OC_DelayElapsedCallback>:
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop

080070cc <HAL_TIM_IC_CaptureCallback>:
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop

080070d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop

080070d4 <HAL_TIM_TriggerCallback>:
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop

080070d8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070d8:	6803      	ldr	r3, [r0, #0]
 80070da:	691a      	ldr	r2, [r3, #16]
 80070dc:	0791      	lsls	r1, r2, #30
{
 80070de:	b510      	push	{r4, lr}
 80070e0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070e2:	d502      	bpl.n	80070ea <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	0792      	lsls	r2, r2, #30
 80070e8:	d468      	bmi.n	80071bc <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	0752      	lsls	r2, r2, #29
 80070ee:	d502      	bpl.n	80070f6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	0750      	lsls	r0, r2, #29
 80070f4:	d44f      	bmi.n	8007196 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	0711      	lsls	r1, r2, #28
 80070fa:	d502      	bpl.n	8007102 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	0712      	lsls	r2, r2, #28
 8007100:	d437      	bmi.n	8007172 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	06d0      	lsls	r0, r2, #27
 8007106:	d502      	bpl.n	800710e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007108:	68da      	ldr	r2, [r3, #12]
 800710a:	06d1      	lsls	r1, r2, #27
 800710c:	d41e      	bmi.n	800714c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	07d2      	lsls	r2, r2, #31
 8007112:	d502      	bpl.n	800711a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007114:	68da      	ldr	r2, [r3, #12]
 8007116:	07d0      	lsls	r0, r2, #31
 8007118:	d469      	bmi.n	80071ee <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800711a:	691a      	ldr	r2, [r3, #16]
 800711c:	0611      	lsls	r1, r2, #24
 800711e:	d502      	bpl.n	8007126 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	0612      	lsls	r2, r2, #24
 8007124:	d46b      	bmi.n	80071fe <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007126:	691a      	ldr	r2, [r3, #16]
 8007128:	05d0      	lsls	r0, r2, #23
 800712a:	d502      	bpl.n	8007132 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	0611      	lsls	r1, r2, #24
 8007130:	d46d      	bmi.n	800720e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	0652      	lsls	r2, r2, #25
 8007136:	d502      	bpl.n	800713e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	0650      	lsls	r0, r2, #25
 800713c:	d46f      	bmi.n	800721e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	0691      	lsls	r1, r2, #26
 8007142:	d502      	bpl.n	800714a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	0692      	lsls	r2, r2, #26
 8007148:	d449      	bmi.n	80071de <HAL_TIM_IRQHandler+0x106>
}
 800714a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800714c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007150:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007152:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007154:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800715c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800715e:	d16f      	bne.n	8007240 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007160:	f7ff ffb2 	bl	80070c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007164:	4620      	mov	r0, r4
 8007166:	f7ff ffb3 	bl	80070d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800716c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716e:	7722      	strb	r2, [r4, #28]
 8007170:	e7cd      	b.n	800710e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007172:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007176:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007178:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800717a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007180:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007182:	d15a      	bne.n	800723a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007184:	f7ff ffa0 	bl	80070c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007188:	4620      	mov	r0, r4
 800718a:	f7ff ffa1 	bl	80070d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007190:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007192:	7722      	strb	r2, [r4, #28]
 8007194:	e7b5      	b.n	8007102 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007196:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800719a:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800719c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800719e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80071a6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a8:	d144      	bne.n	8007234 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	f7ff ff8d 	bl	80070c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ae:	4620      	mov	r0, r4
 80071b0:	f7ff ff8e 	bl	80070d0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071b6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b8:	7722      	strb	r2, [r4, #28]
 80071ba:	e79c      	b.n	80070f6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071bc:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071c0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071c2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071c4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	0799      	lsls	r1, r3, #30
 80071ca:	d130      	bne.n	800722e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071cc:	f7ff ff7c 	bl	80070c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7ff ff7d 	bl	80070d0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071d6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071d8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071da:	7722      	strb	r2, [r4, #28]
 80071dc:	e785      	b.n	80070ea <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071de:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80071e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071e4:	611a      	str	r2, [r3, #16]
}
 80071e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80071ea:	f000 badb 	b.w	80077a4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071ee:	f06f 0201 	mvn.w	r2, #1
 80071f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80071f4:	4620      	mov	r0, r4
 80071f6:	f7fa fb57 	bl	80018a8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	e78d      	b.n	800711a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007202:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007204:	4620      	mov	r0, r4
 8007206:	f000 facf 	bl	80077a8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	e78b      	b.n	8007126 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800720e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007212:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007214:	4620      	mov	r0, r4
 8007216:	f000 fac9 	bl	80077ac <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	e789      	b.n	8007132 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800721e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007222:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007224:	4620      	mov	r0, r4
 8007226:	f7ff ff55 	bl	80070d4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	e787      	b.n	800713e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800722e:	f7ff ff4d 	bl	80070cc <HAL_TIM_IC_CaptureCallback>
 8007232:	e7d0      	b.n	80071d6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8007234:	f7ff ff4a 	bl	80070cc <HAL_TIM_IC_CaptureCallback>
 8007238:	e7bc      	b.n	80071b4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800723a:	f7ff ff47 	bl	80070cc <HAL_TIM_IC_CaptureCallback>
 800723e:	e7a6      	b.n	800718e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007240:	f7ff ff44 	bl	80070cc <HAL_TIM_IC_CaptureCallback>
 8007244:	e791      	b.n	800716a <HAL_TIM_IRQHandler+0x92>
 8007246:	bf00      	nop

08007248 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007248:	6a03      	ldr	r3, [r0, #32]
 800724a:	f023 0310 	bic.w	r3, r3, #16
 800724e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007250:	6a03      	ldr	r3, [r0, #32]
{
 8007252:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8007254:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007256:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007258:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800725a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800725e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007262:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007266:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007268:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800726c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007270:	4d14      	ldr	r5, [pc, #80]	; (80072c4 <TIM_OC2_SetConfig+0x7c>)
 8007272:	42a8      	cmp	r0, r5
 8007274:	d010      	beq.n	8007298 <TIM_OC2_SetConfig+0x50>
 8007276:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800727a:	42a8      	cmp	r0, r5
 800727c:	d00c      	beq.n	8007298 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007282:	42a8      	cmp	r0, r5
 8007284:	d00f      	beq.n	80072a6 <TIM_OC2_SetConfig+0x5e>
 8007286:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800728a:	42a8      	cmp	r0, r5
 800728c:	d00b      	beq.n	80072a6 <TIM_OC2_SetConfig+0x5e>
 800728e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007292:	42a8      	cmp	r0, r5
 8007294:	d10f      	bne.n	80072b6 <TIM_OC2_SetConfig+0x6e>
 8007296:	e006      	b.n	80072a6 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007298:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800729a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800729e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80072a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072a6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072aa:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072ae:	ea46 0c05 	orr.w	ip, r6, r5
 80072b2:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80072b6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80072b8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80072ba:	6182      	str	r2, [r0, #24]
}
 80072bc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80072be:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80072c0:	6203      	str	r3, [r0, #32]
}
 80072c2:	4770      	bx	lr
 80072c4:	40012c00 	.word	0x40012c00

080072c8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80072c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	f000 812f 	beq.w	8007530 <HAL_TIM_PWM_ConfigChannel+0x268>
 80072d2:	2301      	movs	r3, #1
{
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4604      	mov	r4, r0
 80072d8:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80072da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80072de:	2a14      	cmp	r2, #20
 80072e0:	d816      	bhi.n	8007310 <HAL_TIM_PWM_ConfigChannel+0x48>
 80072e2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80072e6:	005f      	.short	0x005f
 80072e8:	00150015 	.word	0x00150015
 80072ec:	00740015 	.word	0x00740015
 80072f0:	00150015 	.word	0x00150015
 80072f4:	008a0015 	.word	0x008a0015
 80072f8:	00150015 	.word	0x00150015
 80072fc:	009f0015 	.word	0x009f0015
 8007300:	00150015 	.word	0x00150015
 8007304:	00e30015 	.word	0x00e30015
 8007308:	00150015 	.word	0x00150015
 800730c:	001b0015 	.word	0x001b0015
  __HAL_UNLOCK(htim);
 8007310:	2200      	movs	r2, #0
  switch (Channel)
 8007312:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8007314:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8007318:	4618      	mov	r0, r3
 800731a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800731c:	6802      	ldr	r2, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800731e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007320:	6a13      	ldr	r3, [r2, #32]
 8007322:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007326:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8007328:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800732a:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 800732c:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800732e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007332:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007336:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800733a:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800733c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007340:	ea43 5306 	orr.w	r3, r3, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007344:	4e7c      	ldr	r6, [pc, #496]	; (8007538 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007346:	42b2      	cmp	r2, r6
 8007348:	d00f      	beq.n	800736a <HAL_TIM_PWM_ConfigChannel+0xa2>
 800734a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800734e:	42b2      	cmp	r2, r6
 8007350:	d00b      	beq.n	800736a <HAL_TIM_PWM_ConfigChannel+0xa2>
 8007352:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007356:	42b2      	cmp	r2, r6
 8007358:	d007      	beq.n	800736a <HAL_TIM_PWM_ConfigChannel+0xa2>
 800735a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800735e:	42b2      	cmp	r2, r6
 8007360:	d003      	beq.n	800736a <HAL_TIM_PWM_ConfigChannel+0xa2>
 8007362:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007366:	42b2      	cmp	r2, r6
 8007368:	d104      	bne.n	8007374 <HAL_TIM_PWM_ConfigChannel+0xac>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800736a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 800736c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007370:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007374:	6050      	str	r0, [r2, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007376:	6551      	str	r1, [r2, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007378:	6869      	ldr	r1, [r5, #4]
 800737a:	65d1      	str	r1, [r2, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737c:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800737e:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007380:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007386:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007388:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800738a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800738e:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007390:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007392:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007396:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8007398:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800739a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800739c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073a4:	6800      	ldr	r0, [r0, #0]
 80073a6:	f7ff fc19 	bl	8006bdc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073aa:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073ac:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073ae:	f043 0308 	orr.w	r3, r3, #8
 80073b2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073b4:	6982      	ldr	r2, [r0, #24]
 80073b6:	f022 0204 	bic.w	r2, r2, #4
 80073ba:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073bc:	6982      	ldr	r2, [r0, #24]
 80073be:	430a      	orrs	r2, r1
 80073c0:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 80073c2:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80073c6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073ce:	6800      	ldr	r0, [r0, #0]
 80073d0:	f7ff ff3a 	bl	8007248 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073d4:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073d6:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073dc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073de:	6982      	ldr	r2, [r0, #24]
 80073e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e4:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073e6:	6982      	ldr	r2, [r0, #24]
 80073e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80073ec:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 80073ee:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80073f2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073fa:	6800      	ldr	r0, [r0, #0]
 80073fc:	f7ff fc2a 	bl	8006c54 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007400:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007402:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007404:	f043 0308 	orr.w	r3, r3, #8
 8007408:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800740a:	69c2      	ldr	r2, [r0, #28]
 800740c:	f022 0204 	bic.w	r2, r2, #4
 8007410:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007412:	69c2      	ldr	r2, [r0, #28]
 8007414:	430a      	orrs	r2, r1
 8007416:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8007418:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800741a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800741c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8007420:	4618      	mov	r0, r3
 8007422:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007424:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007426:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007428:	6a13      	ldr	r3, [r2, #32]
 800742a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800742e:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8007430:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8007432:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8007434:	69d1      	ldr	r1, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007436:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800743a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800743e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007442:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007444:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007448:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800744c:	4e3a      	ldr	r6, [pc, #232]	; (8007538 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800744e:	42b2      	cmp	r2, r6
 8007450:	d00f      	beq.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 8007452:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007456:	42b2      	cmp	r2, r6
 8007458:	d00b      	beq.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 800745a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800745e:	42b2      	cmp	r2, r6
 8007460:	d007      	beq.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 8007462:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007466:	42b2      	cmp	r2, r6
 8007468:	d003      	beq.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 800746a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800746e:	42b2      	cmp	r2, r6
 8007470:	d104      	bne.n	800747c <HAL_TIM_PWM_ConfigChannel+0x1b4>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007472:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007474:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007478:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 800747c:	6050      	str	r0, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 800747e:	61d1      	str	r1, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8007480:	6869      	ldr	r1, [r5, #4]
 8007482:	6411      	str	r1, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8007484:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007486:	69d3      	ldr	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007488:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800748a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800748e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007490:	69d1      	ldr	r1, [r2, #28]
 8007492:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007496:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007498:	69d1      	ldr	r1, [r2, #28]
 800749a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800749e:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80074a0:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80074a4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074ac:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80074ae:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80074b0:	6a13      	ldr	r3, [r2, #32]
 80074b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b6:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 80074b8:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80074ba:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80074bc:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80074be:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80074c2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80074c6:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074c8:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80074ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80074ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d2:	4e19      	ldr	r6, [pc, #100]	; (8007538 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80074d4:	42b2      	cmp	r2, r6
 80074d6:	d00f      	beq.n	80074f8 <HAL_TIM_PWM_ConfigChannel+0x230>
 80074d8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80074dc:	42b2      	cmp	r2, r6
 80074de:	d00b      	beq.n	80074f8 <HAL_TIM_PWM_ConfigChannel+0x230>
 80074e0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80074e4:	42b2      	cmp	r2, r6
 80074e6:	d007      	beq.n	80074f8 <HAL_TIM_PWM_ConfigChannel+0x230>
 80074e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80074ec:	42b2      	cmp	r2, r6
 80074ee:	d003      	beq.n	80074f8 <HAL_TIM_PWM_ConfigChannel+0x230>
 80074f0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80074f4:	42b2      	cmp	r2, r6
 80074f6:	d104      	bne.n	8007502 <HAL_TIM_PWM_ConfigChannel+0x23a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074f8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80074fa:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80074fe:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8007502:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007504:	6551      	str	r1, [r2, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8007506:	6869      	ldr	r1, [r5, #4]
 8007508:	6591      	str	r1, [r2, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800750a:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800750c:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800750e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007510:	f043 0308 	orr.w	r3, r3, #8
 8007514:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007516:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007518:	f021 0104 	bic.w	r1, r1, #4
 800751c:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800751e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007520:	4301      	orrs	r1, r0
 8007522:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8007524:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007526:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8007528:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800752c:	4618      	mov	r0, r3
 800752e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8007530:	2302      	movs	r3, #2
}
 8007532:	4618      	mov	r0, r3
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40012c00 	.word	0x40012c00

0800753c <HAL_TIMEx_PWMN_Start>:
 800753c:	2900      	cmp	r1, #0
 800753e:	d139      	bne.n	80075b4 <HAL_TIMEx_PWMN_Start+0x78>
 8007540:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8007544:	2b01      	cmp	r3, #1
 8007546:	d141      	bne.n	80075cc <HAL_TIMEx_PWMN_Start+0x90>
 8007548:	2302      	movs	r3, #2
 800754a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800754e:	6803      	ldr	r3, [r0, #0]
 8007550:	f001 011f 	and.w	r1, r1, #31
 8007554:	6a18      	ldr	r0, [r3, #32]
 8007556:	2204      	movs	r2, #4
 8007558:	408a      	lsls	r2, r1
 800755a:	ea20 0002 	bic.w	r0, r0, r2
 800755e:	6218      	str	r0, [r3, #32]
 8007560:	6a18      	ldr	r0, [r3, #32]
 8007562:	4924      	ldr	r1, [pc, #144]	; (80075f4 <HAL_TIMEx_PWMN_Start+0xb8>)
 8007564:	4302      	orrs	r2, r0
 8007566:	621a      	str	r2, [r3, #32]
 8007568:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800756a:	428b      	cmp	r3, r1
 800756c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
 8007572:	d011      	beq.n	8007598 <HAL_TIMEx_PWMN_Start+0x5c>
 8007574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007578:	d00e      	beq.n	8007598 <HAL_TIMEx_PWMN_Start+0x5c>
 800757a:	4a1f      	ldr	r2, [pc, #124]	; (80075f8 <HAL_TIMEx_PWMN_Start+0xbc>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d00b      	beq.n	8007598 <HAL_TIMEx_PWMN_Start+0x5c>
 8007580:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007584:	4293      	cmp	r3, r2
 8007586:	d007      	beq.n	8007598 <HAL_TIMEx_PWMN_Start+0x5c>
 8007588:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800758c:	4293      	cmp	r3, r2
 800758e:	d003      	beq.n	8007598 <HAL_TIMEx_PWMN_Start+0x5c>
 8007590:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007594:	4293      	cmp	r3, r2
 8007596:	d107      	bne.n	80075a8 <HAL_TIMEx_PWMN_Start+0x6c>
 8007598:	6899      	ldr	r1, [r3, #8]
 800759a:	4a18      	ldr	r2, [pc, #96]	; (80075fc <HAL_TIMEx_PWMN_Start+0xc0>)
 800759c:	400a      	ands	r2, r1
 800759e:	2a06      	cmp	r2, #6
 80075a0:	d016      	beq.n	80075d0 <HAL_TIMEx_PWMN_Start+0x94>
 80075a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80075a6:	d013      	beq.n	80075d0 <HAL_TIMEx_PWMN_Start+0x94>
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	2000      	movs	r0, #0
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	4770      	bx	lr
 80075b4:	2904      	cmp	r1, #4
 80075b6:	d00d      	beq.n	80075d4 <HAL_TIMEx_PWMN_Start+0x98>
 80075b8:	2908      	cmp	r1, #8
 80075ba:	d013      	beq.n	80075e4 <HAL_TIMEx_PWMN_Start+0xa8>
 80075bc:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d103      	bne.n	80075cc <HAL_TIMEx_PWMN_Start+0x90>
 80075c4:	2302      	movs	r3, #2
 80075c6:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 80075ca:	e7c0      	b.n	800754e <HAL_TIMEx_PWMN_Start+0x12>
 80075cc:	2001      	movs	r0, #1
 80075ce:	4770      	bx	lr
 80075d0:	2000      	movs	r0, #0
 80075d2:	4770      	bx	lr
 80075d4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d1f7      	bne.n	80075cc <HAL_TIMEx_PWMN_Start+0x90>
 80075dc:	2302      	movs	r3, #2
 80075de:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80075e2:	e7b4      	b.n	800754e <HAL_TIMEx_PWMN_Start+0x12>
 80075e4:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d1ef      	bne.n	80075cc <HAL_TIMEx_PWMN_Start+0x90>
 80075ec:	2302      	movs	r3, #2
 80075ee:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 80075f2:	e7ac      	b.n	800754e <HAL_TIMEx_PWMN_Start+0x12>
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40000400 	.word	0x40000400
 80075fc:	00010007 	.word	0x00010007

08007600 <HAL_TIMEx_PWMN_Stop>:
 8007600:	6803      	ldr	r3, [r0, #0]
 8007602:	b410      	push	{r4}
 8007604:	6a1a      	ldr	r2, [r3, #32]
 8007606:	f001 041f 	and.w	r4, r1, #31
 800760a:	f04f 0c04 	mov.w	ip, #4
 800760e:	fa0c fc04 	lsl.w	ip, ip, r4
 8007612:	ea22 020c 	bic.w	r2, r2, ip
 8007616:	621a      	str	r2, [r3, #32]
 8007618:	6a1a      	ldr	r2, [r3, #32]
 800761a:	621a      	str	r2, [r3, #32]
 800761c:	6a1c      	ldr	r4, [r3, #32]
 800761e:	f241 1211 	movw	r2, #4369	; 0x1111
 8007622:	4214      	tst	r4, r2
 8007624:	d104      	bne.n	8007630 <HAL_TIMEx_PWMN_Stop+0x30>
 8007626:	6a1c      	ldr	r4, [r3, #32]
 8007628:	f240 4244 	movw	r2, #1092	; 0x444
 800762c:	4214      	tst	r4, r2
 800762e:	d022      	beq.n	8007676 <HAL_TIMEx_PWMN_Stop+0x76>
 8007630:	6a1c      	ldr	r4, [r3, #32]
 8007632:	f241 1211 	movw	r2, #4369	; 0x1111
 8007636:	4214      	tst	r4, r2
 8007638:	d104      	bne.n	8007644 <HAL_TIMEx_PWMN_Stop+0x44>
 800763a:	6a1c      	ldr	r4, [r3, #32]
 800763c:	f240 4244 	movw	r2, #1092	; 0x444
 8007640:	4214      	tst	r4, r2
 8007642:	d013      	beq.n	800766c <HAL_TIMEx_PWMN_Stop+0x6c>
 8007644:	2301      	movs	r3, #1
 8007646:	b929      	cbnz	r1, 8007654 <HAL_TIMEx_PWMN_Stop+0x54>
 8007648:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800764c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007650:	2000      	movs	r0, #0
 8007652:	4770      	bx	lr
 8007654:	2904      	cmp	r1, #4
 8007656:	d013      	beq.n	8007680 <HAL_TIMEx_PWMN_Stop+0x80>
 8007658:	2908      	cmp	r1, #8
 800765a:	bf0c      	ite	eq
 800765c:	f880 3046 	strbeq.w	r3, [r0, #70]	; 0x46
 8007660:	f880 3047 	strbne.w	r3, [r0, #71]	; 0x47
 8007664:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007668:	2000      	movs	r0, #0
 800766a:	4770      	bx	lr
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	f022 0201 	bic.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]
 8007674:	e7e6      	b.n	8007644 <HAL_TIMEx_PWMN_Stop+0x44>
 8007676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800767c:	645a      	str	r2, [r3, #68]	; 0x44
 800767e:	e7d7      	b.n	8007630 <HAL_TIMEx_PWMN_Stop+0x30>
 8007680:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8007684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007688:	2000      	movs	r0, #0
 800768a:	4770      	bx	lr

0800768c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800768c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007690:	2b01      	cmp	r3, #1
 8007692:	d03a      	beq.n	800770a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 8007694:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007696:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007698:	4d1d      	ldr	r5, [pc, #116]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 800769a:	2302      	movs	r3, #2
 800769c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076a0:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80076a2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80076a4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076a6:	d026      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80076a8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80076ac:	42aa      	cmp	r2, r5
 80076ae:	d022      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076b0:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80076b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076b6:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076b8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80076bc:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076be:	d00c      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80076c0:	4b14      	ldr	r3, [pc, #80]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d009      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80076c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d005      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80076ce:	42aa      	cmp	r2, r5
 80076d0:	d003      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80076d2:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d104      	bne.n	80076e4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076da:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076dc:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076e0:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076e2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80076e4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80076e6:	2201      	movs	r2, #1
 80076e8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80076ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80076f0:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80076f2:	4618      	mov	r0, r3
}
 80076f4:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076f6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076fc:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076fe:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007704:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8007706:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007708:	e7e7      	b.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 800770a:	2002      	movs	r0, #2
}
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	40012c00 	.word	0x40012c00
 8007714:	40000400 	.word	0x40000400

08007718 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007718:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d03d      	beq.n	800779c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 8007720:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007722:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8007726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800772a:	4602      	mov	r2, r0
 800772c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800772e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007730:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007736:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007738:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800773c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800773e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007740:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007744:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007746:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007748:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800774c:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800774e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007754:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007756:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007758:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800775c:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800775e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007762:	4c0f      	ldr	r4, [pc, #60]	; (80077a0 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8007764:	42a0      	cmp	r0, r4
 8007766:	d00b      	beq.n	8007780 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8007768:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800776c:	42a0      	cmp	r0, r4
 800776e:	d007      	beq.n	8007780 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8007770:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8007772:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007774:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8007778:	4608      	mov	r0, r1
}
 800777a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800777e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007780:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007782:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007786:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800778a:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800778c:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800778e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007792:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007794:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007798:	430b      	orrs	r3, r1
 800779a:	e7e9      	b.n	8007770 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800779c:	2002      	movs	r0, #2
}
 800779e:	4770      	bx	lr
 80077a0:	40012c00 	.word	0x40012c00

080077a4 <HAL_TIMEx_CommutCallback>:
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop

080077a8 <HAL_TIMEx_BreakCallback>:
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop

080077ac <HAL_TIMEx_Break2Callback>:
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop

080077b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077b0:	b570      	push	{r4, r5, r6, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077b2:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 80077b4:	2d20      	cmp	r5, #32
 80077b6:	d12e      	bne.n	8007816 <HAL_UART_Transmit_DMA+0x66>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b8:	b359      	cbz	r1, 8007812 <HAL_UART_Transmit_DMA+0x62>
 80077ba:	b352      	cbz	r2, 8007812 <HAL_UART_Transmit_DMA+0x62>

    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077bc:	2300      	movs	r3, #0
    huart->TxXferCount = Size;
 80077be:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
 80077c2:	4604      	mov	r4, r0
    huart->pTxBuffPtr  = pData;
 80077c4:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->TxXferSize  = Size;
 80077ca:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 80077ce:	6f00      	ldr	r0, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d0:	2621      	movs	r6, #33	; 0x21
 80077d2:	67e6      	str	r6, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 80077d4:	b160      	cbz	r0, 80077f0 <HAL_UART_Transmit_DMA+0x40>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80077d6:	4e14      	ldr	r6, [pc, #80]	; (8007828 <HAL_UART_Transmit_DMA+0x78>)

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80077d8:	6343      	str	r3, [r0, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80077da:	4613      	mov	r3, r2
 80077dc:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80077de:	6286      	str	r6, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80077e0:	4e12      	ldr	r6, [pc, #72]	; (800782c <HAL_UART_Transmit_DMA+0x7c>)
 80077e2:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80077e4:	4e12      	ldr	r6, [pc, #72]	; (8007830 <HAL_UART_Transmit_DMA+0x80>)
 80077e6:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80077e8:	3228      	adds	r2, #40	; 0x28
 80077ea:	f7fe f903 	bl	80059f4 <HAL_DMA_Start_IT>
 80077ee:	b9a0      	cbnz	r0, 800781a <HAL_UART_Transmit_DMA+0x6a>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80077f0:	6822      	ldr	r2, [r4, #0]
 80077f2:	2340      	movs	r3, #64	; 0x40
 80077f4:	6213      	str	r3, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	f102 0308 	add.w	r3, r2, #8
 80077fa:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	f102 0008 	add.w	r0, r2, #8
 8007806:	e840 3100 	strex	r1, r3, [r0]
 800780a:	2900      	cmp	r1, #0
 800780c:	d1f3      	bne.n	80077f6 <HAL_UART_Transmit_DMA+0x46>

    return HAL_OK;
 800780e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007810:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007812:	2001      	movs	r0, #1
}
 8007814:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8007816:	2002      	movs	r0, #2
}
 8007818:	bd70      	pop	{r4, r5, r6, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800781a:	2310      	movs	r3, #16
 800781c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 8007820:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 8007822:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	bf00      	nop
 8007828:	08007835 	.word	0x08007835
 800782c:	0800787d 	.word	0x0800787d
 8007830:	0800788d 	.word	0x0800788d

08007834 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007834:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007836:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007838:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800783a:	2b20      	cmp	r3, #32
 800783c:	d018      	beq.n	8007870 <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	6802      	ldr	r2, [r0, #0]
 8007842:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	f102 0308 	add.w	r3, r2, #8
 800784a:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800784e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	f102 0008 	add.w	r0, r2, #8
 8007856:	e840 3100 	strex	r1, r3, [r0]
 800785a:	2900      	cmp	r1, #0
 800785c:	d1f3      	bne.n	8007846 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	e842 3100 	strex	r1, r3, [r2]
 800786a:	2900      	cmp	r1, #0
 800786c:	d1f7      	bne.n	800785e <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800786e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007870:	f7fc fb50 	bl	8003f14 <HAL_UART_TxCpltCallback>
}
 8007874:	bd08      	pop	{r3, pc}
 8007876:	bf00      	nop

08007878 <HAL_UART_TxHalfCpltCallback>:
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop

0800787c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800787c:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800787e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007880:	f7ff fffa 	bl	8007878 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007884:	bd08      	pop	{r3, pc}
 8007886:	bf00      	nop

08007888 <HAL_UART_ErrorCallback>:
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop

0800788c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800788c:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800788e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007890:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
{
 8007892:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007894:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007898:	689a      	ldr	r2, [r3, #8]
 800789a:	0612      	lsls	r2, r2, #24
 800789c:	d501      	bpl.n	80078a2 <UART_DMAError+0x16>
 800789e:	2921      	cmp	r1, #33	; 0x21
 80078a0:	d00d      	beq.n	80078be <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	0652      	lsls	r2, r2, #25
 80078a6:	d501      	bpl.n	80078ac <UART_DMAError+0x20>
 80078a8:	2c22      	cmp	r4, #34	; 0x22
 80078aa:	d016      	beq.n	80078da <UART_DMAError+0x4e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078ac:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80078b0:	f043 0310 	orr.w	r3, r3, #16
 80078b4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078b8:	f7ff ffe6 	bl	8007888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078bc:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 80078be:	2200      	movs	r2, #0
 80078c0:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80078c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	e843 2100 	strex	r1, r2, [r3]
 80078d0:	2900      	cmp	r1, #0
 80078d2:	d1f7      	bne.n	80078c4 <UART_DMAError+0x38>
  huart->gState = HAL_UART_STATE_READY;
 80078d4:	2220      	movs	r2, #32
 80078d6:	67c2      	str	r2, [r0, #124]	; 0x7c
}
 80078d8:	e7e3      	b.n	80078a2 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 80078da:	2200      	movs	r2, #0
 80078dc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	e843 2100 	strex	r1, r2, [r3]
 80078ec:	2900      	cmp	r1, #0
 80078ee:	d1f7      	bne.n	80078e0 <UART_DMAError+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f0:	f103 0208 	add.w	r2, r3, #8
 80078f4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fc:	f103 0408 	add.w	r4, r3, #8
 8007900:	e844 2100 	strex	r1, r2, [r4]
 8007904:	2900      	cmp	r1, #0
 8007906:	d1f3      	bne.n	80078f0 <UART_DMAError+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007908:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800790a:	2a01      	cmp	r2, #1
 800790c:	d006      	beq.n	800791c <UART_DMAError+0x90>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007910:	2220      	movs	r2, #32
 8007912:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  huart->RxISR = NULL;
 8007916:	6683      	str	r3, [r0, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007918:	6603      	str	r3, [r0, #96]	; 0x60
}
 800791a:	e7c7      	b.n	80078ac <UART_DMAError+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007920:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	e843 2100 	strex	r1, r2, [r3]
 8007928:	2900      	cmp	r1, #0
 800792a:	d0f0      	beq.n	800790e <UART_DMAError+0x82>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792c:	e853 2f00 	ldrex	r2, [r3]
 8007930:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007934:	e843 2100 	strex	r1, r2, [r3]
 8007938:	2900      	cmp	r1, #0
 800793a:	d1ef      	bne.n	800791c <UART_DMAError+0x90>
 800793c:	e7e7      	b.n	800790e <UART_DMAError+0x82>
 800793e:	bf00      	nop

08007940 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007940:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007942:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800794a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800794e:	f7ff ff9b 	bl	8007888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007952:	bd08      	pop	{r3, pc}

08007954 <HAL_UARTEx_RxEventCallback>:
}
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop

08007958 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007958:	6803      	ldr	r3, [r0, #0]
 800795a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800795c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800795e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8007962:	ea12 0f0c 	tst.w	r2, ip
{
 8007966:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007968:	689d      	ldr	r5, [r3, #8]
{
 800796a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800796c:	d17f      	bne.n	8007a6e <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800796e:	0696      	lsls	r6, r2, #26
 8007970:	d502      	bpl.n	8007978 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007972:	068e      	lsls	r6, r1, #26
 8007974:	f100 8117 	bmi.w	8007ba6 <HAL_UART_IRQHandler+0x24e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007978:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800797a:	2801      	cmp	r0, #1
 800797c:	d024      	beq.n	80079c8 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800797e:	02d6      	lsls	r6, r2, #11
 8007980:	d502      	bpl.n	8007988 <HAL_UART_IRQHandler+0x30>
 8007982:	0268      	lsls	r0, r5, #9
 8007984:	f100 8114 	bmi.w	8007bb0 <HAL_UART_IRQHandler+0x258>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007988:	0616      	lsls	r6, r2, #24
 800798a:	d414      	bmi.n	80079b6 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800798c:	0650      	lsls	r0, r2, #25
 800798e:	d501      	bpl.n	8007994 <HAL_UART_IRQHandler+0x3c>
 8007990:	064a      	lsls	r2, r1, #25
 8007992:	d400      	bmi.n	8007996 <HAL_UART_IRQHandler+0x3e>
}
 8007994:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800799a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799e:	e843 2100 	strex	r1, r2, [r3]
 80079a2:	2900      	cmp	r1, #0
 80079a4:	d1f7      	bne.n	8007996 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079a6:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079a8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80079aa:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 80079ac:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079ae:	4620      	mov	r0, r4
 80079b0:	f7fc fab0 	bl	8003f14 <HAL_UART_TxCpltCallback>
}
 80079b4:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80079b6:	060d      	lsls	r5, r1, #24
 80079b8:	d5e8      	bpl.n	800798c <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 80079ba:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0e9      	beq.n	8007994 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 80079c0:	4620      	mov	r0, r4
}
 80079c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80079c6:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079c8:	06d6      	lsls	r6, r2, #27
 80079ca:	d5d8      	bpl.n	800797e <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079cc:	06c8      	lsls	r0, r1, #27
 80079ce:	d5d6      	bpl.n	800797e <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d0:	2210      	movs	r2, #16
 80079d2:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	689a      	ldr	r2, [r3, #8]
 80079d6:	0652      	lsls	r2, r2, #25
 80079d8:	f140 8107 	bpl.w	8007bea <HAL_UART_IRQHandler+0x292>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079dc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80079de:	6802      	ldr	r2, [r0, #0]
 80079e0:	6852      	ldr	r2, [r2, #4]
 80079e2:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	d0d5      	beq.n	8007994 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079e8:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80079ec:	4291      	cmp	r1, r2
 80079ee:	d9d1      	bls.n	8007994 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 80079f0:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079f4:	6982      	ldr	r2, [r0, #24]
 80079f6:	2a20      	cmp	r2, #32
 80079f8:	d02f      	beq.n	8007a5a <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	e843 2100 	strex	r1, r2, [r3]
 8007a06:	2900      	cmp	r1, #0
 8007a08:	d1f7      	bne.n	80079fa <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	f103 0208 	add.w	r2, r3, #8
 8007a0e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a12:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	f103 0508 	add.w	r5, r3, #8
 8007a1a:	e845 2100 	strex	r1, r2, [r5]
 8007a1e:	2900      	cmp	r1, #0
 8007a20:	d1f3      	bne.n	8007a0a <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a22:	f103 0208 	add.w	r2, r3, #8
 8007a26:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	f103 0508 	add.w	r5, r3, #8
 8007a32:	e845 2100 	strex	r1, r2, [r5]
 8007a36:	2900      	cmp	r1, #0
 8007a38:	d1f3      	bne.n	8007a22 <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a40:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a46:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	e843 2100 	strex	r1, r2, [r3]
 8007a4e:	2900      	cmp	r1, #0
 8007a50:	d1f7      	bne.n	8007a42 <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a52:	f7fe f811 	bl	8005a78 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a56:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a5e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8007a62:	1ac9      	subs	r1, r1, r3
 8007a64:	4620      	mov	r0, r4
 8007a66:	b289      	uxth	r1, r1
 8007a68:	f7ff ff74 	bl	8007954 <HAL_UARTEx_RxEventCallback>
}
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a6e:	487d      	ldr	r0, [pc, #500]	; (8007c64 <HAL_UART_IRQHandler+0x30c>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a70:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a74:	4008      	ands	r0, r1
 8007a76:	4330      	orrs	r0, r6
 8007a78:	f43f af7e 	beq.w	8007978 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a7c:	07d5      	lsls	r5, r2, #31
 8007a7e:	d509      	bpl.n	8007a94 <HAL_UART_IRQHandler+0x13c>
 8007a80:	05c8      	lsls	r0, r1, #23
 8007a82:	d507      	bpl.n	8007a94 <HAL_UART_IRQHandler+0x13c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a84:	2001      	movs	r0, #1
 8007a86:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a88:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007a8c:	f040 0001 	orr.w	r0, r0, #1
 8007a90:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a94:	0795      	lsls	r5, r2, #30
 8007a96:	f140 8081 	bpl.w	8007b9c <HAL_UART_IRQHandler+0x244>
 8007a9a:	b18e      	cbz	r6, 8007ac0 <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a9c:	2002      	movs	r0, #2
 8007a9e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aa0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007aa4:	f040 0004 	orr.w	r0, r0, #4
 8007aa8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aac:	0750      	lsls	r0, r2, #29
 8007aae:	d507      	bpl.n	8007ac0 <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ab0:	2004      	movs	r0, #4
 8007ab2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ab4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007ab8:	f040 0002 	orr.w	r0, r0, #2
 8007abc:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ac0:	0710      	lsls	r0, r2, #28
 8007ac2:	d50b      	bpl.n	8007adc <HAL_UART_IRQHandler+0x184>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ac4:	f001 0020 	and.w	r0, r1, #32
 8007ac8:	4330      	orrs	r0, r6
 8007aca:	d007      	beq.n	8007adc <HAL_UART_IRQHandler+0x184>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007acc:	2008      	movs	r0, #8
 8007ace:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ad0:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007ad4:	f040 0008 	orr.w	r0, r0, #8
 8007ad8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007adc:	0516      	lsls	r6, r2, #20
 8007ade:	d50a      	bpl.n	8007af6 <HAL_UART_IRQHandler+0x19e>
 8007ae0:	014d      	lsls	r5, r1, #5
 8007ae2:	d508      	bpl.n	8007af6 <HAL_UART_IRQHandler+0x19e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ae8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007aea:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007aee:	f040 0020 	orr.w	r0, r0, #32
 8007af2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007af6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007afa:	2800      	cmp	r0, #0
 8007afc:	f43f af4a 	beq.w	8007994 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b00:	0690      	lsls	r0, r2, #26
 8007b02:	d506      	bpl.n	8007b12 <HAL_UART_IRQHandler+0x1ba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b04:	0689      	lsls	r1, r1, #26
 8007b06:	d504      	bpl.n	8007b12 <HAL_UART_IRQHandler+0x1ba>
        if (huart->RxISR != NULL)
 8007b08:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8007b0a:	b112      	cbz	r2, 8007b12 <HAL_UART_IRQHandler+0x1ba>
          huart->RxISR(huart);
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b10:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8007b12:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b16:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b18:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b1c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8007b20:	ea52 0501 	orrs.w	r5, r2, r1
 8007b24:	f000 8098 	beq.w	8007c58 <HAL_UART_IRQHandler+0x300>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	e843 2100 	strex	r1, r2, [r3]
 8007b34:	2900      	cmp	r1, #0
 8007b36:	d1f7      	bne.n	8007b28 <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	f103 0208 	add.w	r2, r3, #8
 8007b3c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b40:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	f103 0008 	add.w	r0, r3, #8
 8007b48:	e840 2100 	strex	r1, r2, [r0]
 8007b4c:	2900      	cmp	r1, #0
 8007b4e:	d1f3      	bne.n	8007b38 <HAL_UART_IRQHandler+0x1e0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b50:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007b52:	2a01      	cmp	r2, #1
 8007b54:	d034      	beq.n	8007bc0 <HAL_UART_IRQHandler+0x268>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b56:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007b58:	2120      	movs	r1, #32
 8007b5a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5e:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8007b62:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b64:	064a      	lsls	r2, r1, #25
 8007b66:	d53c      	bpl.n	8007be2 <HAL_UART_IRQHandler+0x28a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	f103 0208 	add.w	r2, r3, #8
 8007b6c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	f103 0008 	add.w	r0, r3, #8
 8007b78:	e840 2100 	strex	r1, r2, [r0]
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	d1f3      	bne.n	8007b68 <HAL_UART_IRQHandler+0x210>
          if (huart->hdmarx != NULL)
 8007b80:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007b82:	b370      	cbz	r0, 8007be2 <HAL_UART_IRQHandler+0x28a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b84:	4b38      	ldr	r3, [pc, #224]	; (8007c68 <HAL_UART_IRQHandler+0x310>)
 8007b86:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b88:	f7fd ff9a 	bl	8005ac0 <HAL_DMA_Abort_IT>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f43f af01 	beq.w	8007994 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b92:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8007b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b9a:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b9c:	0755      	lsls	r5, r2, #29
 8007b9e:	d58f      	bpl.n	8007ac0 <HAL_UART_IRQHandler+0x168>
 8007ba0:	2e00      	cmp	r6, #0
 8007ba2:	d185      	bne.n	8007ab0 <HAL_UART_IRQHandler+0x158>
 8007ba4:	e78c      	b.n	8007ac0 <HAL_UART_IRQHandler+0x168>
      if (huart->RxISR != NULL)
 8007ba6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f47f af0a 	bne.w	80079c2 <HAL_UART_IRQHandler+0x6a>
 8007bae:	e6f1      	b.n	8007994 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8007bb4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bb6:	621a      	str	r2, [r3, #32]
}
 8007bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8007bbc:	f000 bc40 	b.w	8008440 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	e843 2100 	strex	r1, r2, [r3]
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	d0c2      	beq.n	8007b56 <HAL_UART_IRQHandler+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	e853 2f00 	ldrex	r2, [r3]
 8007bd4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	e843 2100 	strex	r1, r2, [r3]
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	d1ef      	bne.n	8007bc0 <HAL_UART_IRQHandler+0x268>
 8007be0:	e7b9      	b.n	8007b56 <HAL_UART_IRQHandler+0x1fe>
            HAL_UART_ErrorCallback(huart);
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff fe50 	bl	8007888 <HAL_UART_ErrorCallback>
}
 8007be8:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bea:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8007bee:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bf2:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8007bf6:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007bf8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	f43f aeca 	beq.w	8007994 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c00:	1a41      	subs	r1, r0, r1
 8007c02:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8007c04:	2900      	cmp	r1, #0
 8007c06:	f43f aec5 	beq.w	8007994 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	e843 2000 	strex	r0, r2, [r3]
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d1f7      	bne.n	8007c0a <HAL_UART_IRQHandler+0x2b2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1a:	f103 0208 	add.w	r2, r3, #8
 8007c1e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c22:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	f103 0508 	add.w	r5, r3, #8
 8007c2a:	e845 2000 	strex	r0, r2, [r5]
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d1f3      	bne.n	8007c1a <HAL_UART_IRQHandler+0x2c2>
        huart->RxState = HAL_UART_STATE_READY;
 8007c32:	2220      	movs	r2, #32
 8007c34:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8007c38:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3a:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c40:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	e843 2000 	strex	r0, r2, [r3]
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d1f7      	bne.n	8007c3c <HAL_UART_IRQHandler+0x2e4>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c50:	4620      	mov	r0, r4
 8007c52:	f7ff fe7f 	bl	8007954 <HAL_UARTEx_RxEventCallback>
}
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7ff fe15 	bl	8007888 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8007c62:	bd70      	pop	{r4, r5, r6, pc}
 8007c64:	04000120 	.word	0x04000120
 8007c68:	08007941 	.word	0x08007941

08007c6c <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8007c6c:	b508      	push	{r3, lr}
 8007c6e:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	e843 2100 	strex	r1, r2, [r3]
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	d1f7      	bne.n	8007c70 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	f103 0208 	add.w	r2, r3, #8
 8007c84:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c88:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	f103 0c08 	add.w	ip, r3, #8
 8007c90:	e84c 2100 	strex	r1, r2, [ip]
 8007c94:	2900      	cmp	r1, #0
 8007c96:	d1f3      	bne.n	8007c80 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c9e:	6641      	str	r1, [r0, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ca0:	685a      	ldr	r2, [r3, #4]
      huart->RxISR = NULL;
 8007ca2:	6681      	str	r1, [r0, #104]	; 0x68
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ca4:	0211      	lsls	r1, r2, #8
 8007ca6:	d416      	bmi.n	8007cd6 <UART_RxISR_16BIT.part.0+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca8:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8007caa:	2a01      	cmp	r2, #1
 8007cac:	d124      	bne.n	8007cf8 <UART_RxISR_16BIT.part.0+0x8c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cae:	2200      	movs	r2, #0
 8007cb0:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	e843 2100 	strex	r1, r2, [r3]
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	d1f7      	bne.n	8007cb2 <UART_RxISR_16BIT.part.0+0x46>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cc2:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cc4:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cc8:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cca:	bf44      	itt	mi
 8007ccc:	2210      	movmi	r2, #16
 8007cce:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cd0:	f7ff fe40 	bl	8007954 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cd4:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cda:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	e843 2100 	strex	r1, r2, [r3]
 8007ce2:	2900      	cmp	r1, #0
 8007ce4:	d0e0      	beq.n	8007ca8 <UART_RxISR_16BIT.part.0+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce6:	e853 2f00 	ldrex	r2, [r3]
 8007cea:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	e843 2100 	strex	r1, r2, [r3]
 8007cf2:	2900      	cmp	r1, #0
 8007cf4:	d1ef      	bne.n	8007cd6 <UART_RxISR_16BIT.part.0+0x6a>
 8007cf6:	e7d7      	b.n	8007ca8 <UART_RxISR_16BIT.part.0+0x3c>
        HAL_UART_RxCpltCallback(huart);
 8007cf8:	f7f9 fd66 	bl	80017c8 <HAL_UART_RxCpltCallback>
}
 8007cfc:	bd08      	pop	{r3, pc}
 8007cfe:	bf00      	nop

08007d00 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d00:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8007d04:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d08:	2922      	cmp	r1, #34	; 0x22
 8007d0a:	d005      	beq.n	8007d18 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d0c:	6802      	ldr	r2, [r0, #0]
 8007d0e:	6993      	ldr	r3, [r2, #24]
 8007d10:	f043 0308 	orr.w	r3, r3, #8
 8007d14:	6193      	str	r3, [r2, #24]
 8007d16:	4770      	bx	lr
{
 8007d18:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d1a:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d1c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d1e:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d22:	ea02 020c 	and.w	r2, r2, ip
 8007d26:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8007d2a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8007d2e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8007d30:	3a01      	subs	r2, #1
 8007d32:	b292      	uxth	r2, r2
 8007d34:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8007d38:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	b91b      	cbnz	r3, 8007d48 <UART_RxISR_16BIT+0x48>
  }
}
 8007d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d44:	f7ff bf92 	b.w	8007c6c <UART_RxISR_16BIT.part.0>
 8007d48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop

08007d50 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d50:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8007d54:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d58:	2922      	cmp	r1, #34	; 0x22
 8007d5a:	d005      	beq.n	8007d68 <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d5c:	6802      	ldr	r2, [r0, #0]
 8007d5e:	6993      	ldr	r3, [r2, #24]
 8007d60:	f043 0308 	orr.w	r3, r3, #8
 8007d64:	6193      	str	r3, [r2, #24]
 8007d66:	4770      	bx	lr
{
 8007d68:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d6a:	6804      	ldr	r4, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d6c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d6e:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d72:	ea02 020c 	and.w	r2, r2, ip
 8007d76:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8007d78:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8007d7c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8007d7e:	3a01      	subs	r2, #1
 8007d80:	b292      	uxth	r2, r2
 8007d82:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8007d86:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8007d8a:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8007d8c:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8007d8e:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8007d90:	b91a      	cbnz	r2, 8007d9a <UART_RxISR_8BIT+0x4a>
}
 8007d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d96:	f7ff bf69 	b.w	8007c6c <UART_RxISR_16BIT.part.0>
 8007d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007da0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007da2:	07da      	lsls	r2, r3, #31
{
 8007da4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007da6:	d506      	bpl.n	8007db6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007da8:	6801      	ldr	r1, [r0, #0]
 8007daa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007dac:	684a      	ldr	r2, [r1, #4]
 8007dae:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007db2:	4322      	orrs	r2, r4
 8007db4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007db6:	079c      	lsls	r4, r3, #30
 8007db8:	d506      	bpl.n	8007dc8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dba:	6801      	ldr	r1, [r0, #0]
 8007dbc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007dbe:	684a      	ldr	r2, [r1, #4]
 8007dc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007dc4:	4322      	orrs	r2, r4
 8007dc6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dc8:	0759      	lsls	r1, r3, #29
 8007dca:	d506      	bpl.n	8007dda <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dcc:	6801      	ldr	r1, [r0, #0]
 8007dce:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007dd0:	684a      	ldr	r2, [r1, #4]
 8007dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dd6:	4322      	orrs	r2, r4
 8007dd8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dda:	071a      	lsls	r2, r3, #28
 8007ddc:	d506      	bpl.n	8007dec <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dde:	6801      	ldr	r1, [r0, #0]
 8007de0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007de2:	684a      	ldr	r2, [r1, #4]
 8007de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007de8:	4322      	orrs	r2, r4
 8007dea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dec:	06dc      	lsls	r4, r3, #27
 8007dee:	d506      	bpl.n	8007dfe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007df0:	6801      	ldr	r1, [r0, #0]
 8007df2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007df4:	688a      	ldr	r2, [r1, #8]
 8007df6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dfa:	4322      	orrs	r2, r4
 8007dfc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dfe:	0699      	lsls	r1, r3, #26
 8007e00:	d506      	bpl.n	8007e10 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e02:	6801      	ldr	r1, [r0, #0]
 8007e04:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007e06:	688a      	ldr	r2, [r1, #8]
 8007e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e0c:	4322      	orrs	r2, r4
 8007e0e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e10:	065a      	lsls	r2, r3, #25
 8007e12:	d509      	bpl.n	8007e28 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e14:	6801      	ldr	r1, [r0, #0]
 8007e16:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007e18:	684a      	ldr	r2, [r1, #4]
 8007e1a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8007e1e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e24:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e26:	d00b      	beq.n	8007e40 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e28:	061b      	lsls	r3, r3, #24
 8007e2a:	d506      	bpl.n	8007e3a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e2c:	6802      	ldr	r2, [r0, #0]
 8007e2e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007e30:	6853      	ldr	r3, [r2, #4]
 8007e32:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007e36:	430b      	orrs	r3, r1
 8007e38:	6053      	str	r3, [r2, #4]
}
 8007e3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e3e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e40:	684a      	ldr	r2, [r1, #4]
 8007e42:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007e44:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8007e48:	4322      	orrs	r2, r4
 8007e4a:	604a      	str	r2, [r1, #4]
 8007e4c:	e7ec      	b.n	8007e28 <UART_AdvFeatureConfig+0x88>
 8007e4e:	bf00      	nop

08007e50 <UART_CheckIdleState>:
{
 8007e50:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e52:	2300      	movs	r3, #0
{
 8007e54:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e56:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8007e5a:	f7fc f98b 	bl	8004174 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	6813      	ldr	r3, [r2, #0]
 8007e62:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8007e64:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e66:	d40e      	bmi.n	8007e86 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e68:	6813      	ldr	r3, [r2, #0]
 8007e6a:	0759      	lsls	r1, r3, #29
 8007e6c:	d42f      	bmi.n	8007ece <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8007e70:	2220      	movs	r2, #32
 8007e72:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8007e74:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8007e76:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e7c:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8007e84:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e86:	69d3      	ldr	r3, [r2, #28]
 8007e88:	0298      	lsls	r0, r3, #10
 8007e8a:	d4ed      	bmi.n	8007e68 <UART_CheckIdleState+0x18>
 8007e8c:	e00c      	b.n	8007ea8 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e8e:	6819      	ldr	r1, [r3, #0]
 8007e90:	0749      	lsls	r1, r1, #29
 8007e92:	461a      	mov	r2, r3
 8007e94:	d505      	bpl.n	8007ea2 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e96:	69d9      	ldr	r1, [r3, #28]
 8007e98:	0708      	lsls	r0, r1, #28
 8007e9a:	d44a      	bmi.n	8007f32 <UART_CheckIdleState+0xe2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e9c:	69d9      	ldr	r1, [r3, #28]
 8007e9e:	0509      	lsls	r1, r1, #20
 8007ea0:	d475      	bmi.n	8007f8e <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	0298      	lsls	r0, r3, #10
 8007ea6:	d4df      	bmi.n	8007e68 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea8:	f7fc f964 	bl	8004174 <HAL_GetTick>
 8007eac:	1b43      	subs	r3, r0, r5
 8007eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	d3eb      	bcc.n	8007e8e <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	e843 2100 	strex	r1, r2, [r3]
 8007ec2:	2900      	cmp	r1, #0
 8007ec4:	d1f7      	bne.n	8007eb6 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8007ec6:	2320      	movs	r3, #32
 8007ec8:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8007eca:	2003      	movs	r0, #3
 8007ecc:	e7d7      	b.n	8007e7e <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ece:	69d3      	ldr	r3, [r2, #28]
 8007ed0:	025b      	lsls	r3, r3, #9
 8007ed2:	d4cc      	bmi.n	8007e6e <UART_CheckIdleState+0x1e>
 8007ed4:	e00d      	b.n	8007ef2 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	0750      	lsls	r0, r2, #29
 8007eda:	d507      	bpl.n	8007eec <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007edc:	69da      	ldr	r2, [r3, #28]
 8007ede:	0711      	lsls	r1, r2, #28
 8007ee0:	f100 8083 	bmi.w	8007fea <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ee4:	69da      	ldr	r2, [r3, #28]
 8007ee6:	0512      	lsls	r2, r2, #20
 8007ee8:	f100 80ad 	bmi.w	8008046 <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	025b      	lsls	r3, r3, #9
 8007ef0:	d4bd      	bmi.n	8007e6e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ef2:	f7fc f93f 	bl	8004174 <HAL_GetTick>
 8007ef6:	1b43      	subs	r3, r0, r5
 8007ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	d3ea      	bcc.n	8007ed6 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	e843 2100 	strex	r1, r2, [r3]
 8007f0c:	2900      	cmp	r1, #0
 8007f0e:	d1f7      	bne.n	8007f00 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	f103 0208 	add.w	r2, r3, #8
 8007f14:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f18:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	f103 0008 	add.w	r0, r3, #8
 8007f20:	e840 2100 	strex	r1, r2, [r0]
 8007f24:	2900      	cmp	r1, #0
 8007f26:	d1f3      	bne.n	8007f10 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8007f28:	2320      	movs	r3, #32
 8007f2a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8007f2e:	2003      	movs	r0, #3
 8007f30:	e7a5      	b.n	8007e7e <UART_CheckIdleState+0x2e>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f32:	2208      	movs	r2, #8
 8007f34:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	e843 2100 	strex	r1, r2, [r3]
 8007f42:	2900      	cmp	r1, #0
 8007f44:	d1f7      	bne.n	8007f36 <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	f103 0208 	add.w	r2, r3, #8
 8007f4a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	f103 0008 	add.w	r0, r3, #8
 8007f56:	e840 2100 	strex	r1, r2, [r0]
 8007f5a:	2900      	cmp	r1, #0
 8007f5c:	d1f3      	bne.n	8007f46 <UART_CheckIdleState+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007f60:	2a01      	cmp	r2, #1
 8007f62:	d00b      	beq.n	8007f7c <UART_CheckIdleState+0x12c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f64:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007f66:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f68:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8007f6a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8007f6e:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f70:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8007f72:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f76:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8007f7a:	e79c      	b.n	8007eb6 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f80:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	e843 2100 	strex	r1, r2, [r3]
 8007f88:	2900      	cmp	r1, #0
 8007f8a:	d1f7      	bne.n	8007f7c <UART_CheckIdleState+0x12c>
 8007f8c:	e7ea      	b.n	8007f64 <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f92:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	e843 2100 	strex	r1, r2, [r3]
 8007fa0:	2900      	cmp	r1, #0
 8007fa2:	d1f7      	bne.n	8007f94 <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	f103 0208 	add.w	r2, r3, #8
 8007fa8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	f103 0008 	add.w	r0, r3, #8
 8007fb4:	e840 2100 	strex	r1, r2, [r0]
 8007fb8:	2900      	cmp	r1, #0
 8007fba:	d1f3      	bne.n	8007fa4 <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fbc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007fbe:	2a01      	cmp	r2, #1
 8007fc0:	d00a      	beq.n	8007fd8 <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fc2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	2120      	movs	r1, #32
 8007fc6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8007fca:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fcc:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8007fce:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fd2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8007fd6:	e76e      	b.n	8007eb6 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fdc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	e843 2100 	strex	r1, r2, [r3]
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	d1f7      	bne.n	8007fd8 <UART_CheckIdleState+0x188>
 8007fe8:	e7eb      	b.n	8007fc2 <UART_CheckIdleState+0x172>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fea:	2208      	movs	r2, #8
 8007fec:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ff2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff6:	e843 2100 	strex	r1, r2, [r3]
 8007ffa:	2900      	cmp	r1, #0
 8007ffc:	d1f7      	bne.n	8007fee <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	f103 0208 	add.w	r2, r3, #8
 8008002:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008006:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	f103 0008 	add.w	r0, r3, #8
 800800e:	e840 2100 	strex	r1, r2, [r0]
 8008012:	2900      	cmp	r1, #0
 8008014:	d1f3      	bne.n	8007ffe <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008016:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008018:	2a01      	cmp	r2, #1
 800801a:	d00b      	beq.n	8008034 <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800801e:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008020:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008022:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008026:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008028:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 800802a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800802e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8008032:	e765      	b.n	8007f00 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008034:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008038:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	e843 2100 	strex	r1, r2, [r3]
 8008040:	2900      	cmp	r1, #0
 8008042:	d1f7      	bne.n	8008034 <UART_CheckIdleState+0x1e4>
 8008044:	e7ea      	b.n	800801c <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800804a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008050:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008054:	e843 2100 	strex	r1, r2, [r3]
 8008058:	2900      	cmp	r1, #0
 800805a:	d1f7      	bne.n	800804c <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	f103 0208 	add.w	r2, r3, #8
 8008060:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008064:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	f103 0008 	add.w	r0, r3, #8
 800806c:	e840 2100 	strex	r1, r2, [r0]
 8008070:	2900      	cmp	r1, #0
 8008072:	d1f3      	bne.n	800805c <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008074:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008076:	2a01      	cmp	r2, #1
 8008078:	d00a      	beq.n	8008090 <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800807a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800807c:	2120      	movs	r1, #32
 800807e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008082:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008084:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8008086:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800808a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 800808e:	e737      	b.n	8007f00 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008094:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	e843 2100 	strex	r1, r2, [r3]
 800809c:	2900      	cmp	r1, #0
 800809e:	d1f7      	bne.n	8008090 <UART_CheckIdleState+0x240>
 80080a0:	e7eb      	b.n	800807a <UART_CheckIdleState+0x22a>
 80080a2:	bf00      	nop

080080a4 <HAL_UART_Init>:
  if (huart == NULL)
 80080a4:	2800      	cmp	r0, #0
 80080a6:	f000 80ec 	beq.w	8008282 <HAL_UART_Init+0x1de>
{
 80080aa:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80080ac:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80080ae:	4604      	mov	r4, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d037      	beq.n	8008124 <HAL_UART_Init+0x80>
  __HAL_UART_DISABLE(huart);
 80080b4:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080b6:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 80080b8:	2224      	movs	r2, #36	; 0x24
 80080ba:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80080bc:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080be:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80080c0:	f021 0101 	bic.w	r1, r1, #1
 80080c4:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080c6:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080c8:	69e1      	ldr	r1, [r4, #28]
 80080ca:	432a      	orrs	r2, r5
 80080cc:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080ce:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080d2:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080d4:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080d8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080da:	4302      	orrs	r2, r0
 80080dc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80080e2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080e4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80080e8:	4302      	orrs	r2, r0
 80080ea:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080ec:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080ee:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080f0:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80080f4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080f6:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080f8:	4886      	ldr	r0, [pc, #536]	; (8008314 <HAL_UART_Init+0x270>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080fa:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080fc:	4283      	cmp	r3, r0
 80080fe:	d016      	beq.n	800812e <HAL_UART_Init+0x8a>
 8008100:	4a85      	ldr	r2, [pc, #532]	; (8008318 <HAL_UART_Init+0x274>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d046      	beq.n	8008194 <HAL_UART_Init+0xf0>
 8008106:	4a85      	ldr	r2, [pc, #532]	; (800831c <HAL_UART_Init+0x278>)
 8008108:	4293      	cmp	r3, r2
 800810a:	f000 80a4 	beq.w	8008256 <HAL_UART_Init+0x1b2>
 800810e:	4a84      	ldr	r2, [pc, #528]	; (8008320 <HAL_UART_Init+0x27c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d071      	beq.n	80081f8 <HAL_UART_Init+0x154>
 8008114:	4a83      	ldr	r2, [pc, #524]	; (8008324 <HAL_UART_Init+0x280>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d07b      	beq.n	8008212 <HAL_UART_Init+0x16e>
  huart->RxISR = NULL;
 800811a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800811c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8008120:	2001      	movs	r0, #1
 8008122:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8008124:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8008128:	f7fb fe8c 	bl	8003e44 <HAL_UART_MspInit>
 800812c:	e7c2      	b.n	80080b4 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800812e:	4b7e      	ldr	r3, [pc, #504]	; (8008328 <HAL_UART_Init+0x284>)
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	3b01      	subs	r3, #1
 8008138:	2b02      	cmp	r3, #2
 800813a:	d93f      	bls.n	80081bc <HAL_UART_Init+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800813c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008140:	f000 80c9 	beq.w	80082d6 <HAL_UART_Init+0x232>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008144:	f7fe fba8 	bl	8006898 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008148:	b160      	cbz	r0, 8008164 <HAL_UART_Init+0xc0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800814a:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800814c:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008150:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008154:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008158:	f1a0 0310 	sub.w	r3, r0, #16
 800815c:	4293      	cmp	r3, r2
 800815e:	d8dc      	bhi.n	800811a <HAL_UART_Init+0x76>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	60d8      	str	r0, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008164:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8008166:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008168:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800816c:	2a00      	cmp	r2, #0
 800816e:	d16e      	bne.n	800824e <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008178:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008180:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8008188:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800818a:	601a      	str	r2, [r3, #0]
}
 800818c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8008190:	f7ff be5e 	b.w	8007e50 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008194:	4b64      	ldr	r3, [pc, #400]	; (8008328 <HAL_UART_Init+0x284>)
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800819c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081a0:	d046      	beq.n	8008230 <HAL_UART_Init+0x18c>
 80081a2:	d84b      	bhi.n	800823c <HAL_UART_Init+0x198>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d03d      	beq.n	8008224 <HAL_UART_Init+0x180>
 80081a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ac:	d1b5      	bne.n	800811a <HAL_UART_Init+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ae:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80081b2:	f000 8093 	beq.w	80082dc <HAL_UART_Init+0x238>
        pclk = HAL_RCC_GetSysClockFreq();
 80081b6:	f7fe fb1d 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
        break;
 80081ba:	e7c5      	b.n	8008148 <HAL_UART_Init+0xa4>
 80081bc:	4a5b      	ldr	r2, [pc, #364]	; (800832c <HAL_UART_Init+0x288>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081be:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80081c2:	5cd3      	ldrb	r3, [r2, r3]
 80081c4:	f000 808d 	beq.w	80082e2 <HAL_UART_Init+0x23e>
    switch (clocksource)
 80081c8:	2b08      	cmp	r3, #8
 80081ca:	d8a6      	bhi.n	800811a <HAL_UART_Init+0x76>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <HAL_UART_Init+0x130>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	0800822b 	.word	0x0800822b
 80081d8:	08008145 	.word	0x08008145
 80081dc:	0800824b 	.word	0x0800824b
 80081e0:	0800811b 	.word	0x0800811b
 80081e4:	080081b7 	.word	0x080081b7
 80081e8:	0800811b 	.word	0x0800811b
 80081ec:	0800811b 	.word	0x0800811b
 80081f0:	0800811b 	.word	0x0800811b
 80081f4:	08008237 	.word	0x08008237
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081f8:	4b4b      	ldr	r3, [pc, #300]	; (8008328 <HAL_UART_Init+0x284>)
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008204:	d014      	beq.n	8008230 <HAL_UART_Init+0x18c>
 8008206:	d838      	bhi.n	800827a <HAL_UART_Init+0x1d6>
 8008208:	b163      	cbz	r3, 8008224 <HAL_UART_Init+0x180>
 800820a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800820e:	d0ce      	beq.n	80081ae <HAL_UART_Init+0x10a>
 8008210:	e783      	b.n	800811a <HAL_UART_Init+0x76>
 8008212:	4b45      	ldr	r3, [pc, #276]	; (8008328 <HAL_UART_Init+0x284>)
 8008214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008216:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800821a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800821e:	d007      	beq.n	8008230 <HAL_UART_Init+0x18c>
 8008220:	d835      	bhi.n	800828e <HAL_UART_Init+0x1ea>
 8008222:	bb83      	cbnz	r3, 8008286 <HAL_UART_Init+0x1e2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008224:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008228:	d035      	beq.n	8008296 <HAL_UART_Init+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800822a:	f7fe fb1d 	bl	8006868 <HAL_RCC_GetPCLK1Freq>
        break;
 800822e:	e78b      	b.n	8008148 <HAL_UART_Init+0xa4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008230:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008234:	d04a      	beq.n	80082cc <HAL_UART_Init+0x228>
        pclk = (uint32_t) LSE_VALUE;
 8008236:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800823a:	e786      	b.n	800814a <HAL_UART_Init+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800823c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008240:	f47f af6b 	bne.w	800811a <HAL_UART_Init+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008244:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008248:	d043      	beq.n	80082d2 <HAL_UART_Init+0x22e>
    switch (clocksource)
 800824a:	4839      	ldr	r0, [pc, #228]	; (8008330 <HAL_UART_Init+0x28c>)
 800824c:	e77d      	b.n	800814a <HAL_UART_Init+0xa6>
    UART_AdvFeatureConfig(huart);
 800824e:	4620      	mov	r0, r4
 8008250:	f7ff fda6 	bl	8007da0 <UART_AdvFeatureConfig>
 8008254:	e78c      	b.n	8008170 <HAL_UART_Init+0xcc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008256:	4b34      	ldr	r3, [pc, #208]	; (8008328 <HAL_UART_Init+0x284>)
 8008258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800825e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008262:	d0e5      	beq.n	8008230 <HAL_UART_Init+0x18c>
 8008264:	d805      	bhi.n	8008272 <HAL_UART_Init+0x1ce>
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0dc      	beq.n	8008224 <HAL_UART_Init+0x180>
 800826a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800826e:	d09e      	beq.n	80081ae <HAL_UART_Init+0x10a>
 8008270:	e753      	b.n	800811a <HAL_UART_Init+0x76>
 8008272:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008276:	d0e5      	beq.n	8008244 <HAL_UART_Init+0x1a0>
 8008278:	e74f      	b.n	800811a <HAL_UART_Init+0x76>
 800827a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800827e:	d0e1      	beq.n	8008244 <HAL_UART_Init+0x1a0>
 8008280:	e74b      	b.n	800811a <HAL_UART_Init+0x76>
}
 8008282:	2001      	movs	r0, #1
 8008284:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800828a:	d090      	beq.n	80081ae <HAL_UART_Init+0x10a>
 800828c:	e745      	b.n	800811a <HAL_UART_Init+0x76>
 800828e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008292:	d0d7      	beq.n	8008244 <HAL_UART_Init+0x1a0>
 8008294:	e741      	b.n	800811a <HAL_UART_Init+0x76>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008296:	f7fe fae7 	bl	8006868 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800829a:	2800      	cmp	r0, #0
 800829c:	f43f af62 	beq.w	8008164 <HAL_UART_Init+0xc0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082a0:	0043      	lsls	r3, r0, #1
 80082a2:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a4:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80082a8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80082ac:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082b0:	f1a3 0210 	sub.w	r2, r3, #16
 80082b4:	428a      	cmp	r2, r1
 80082b6:	f63f af30 	bhi.w	800811a <HAL_UART_Init+0x76>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082ba:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80082be:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082c0:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082c2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60cb      	str	r3, [r1, #12]
  return ret;
 80082ca:	e74b      	b.n	8008164 <HAL_UART_Init+0xc0>
    switch (clocksource)
 80082cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082d0:	e7e7      	b.n	80082a2 <HAL_UART_Init+0x1fe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082d2:	4b18      	ldr	r3, [pc, #96]	; (8008334 <HAL_UART_Init+0x290>)
 80082d4:	e7e5      	b.n	80082a2 <HAL_UART_Init+0x1fe>
        pclk = HAL_RCC_GetPCLK2Freq();
 80082d6:	f7fe fadf 	bl	8006898 <HAL_RCC_GetPCLK2Freq>
        break;
 80082da:	e7de      	b.n	800829a <HAL_UART_Init+0x1f6>
        pclk = HAL_RCC_GetSysClockFreq();
 80082dc:	f7fe fa8a 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
        break;
 80082e0:	e7db      	b.n	800829a <HAL_UART_Init+0x1f6>
    switch (clocksource)
 80082e2:	2b08      	cmp	r3, #8
 80082e4:	f63f af19 	bhi.w	800811a <HAL_UART_Init+0x76>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <HAL_UART_Init+0x24c>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008297 	.word	0x08008297
 80082f4:	080082d7 	.word	0x080082d7
 80082f8:	080082d3 	.word	0x080082d3
 80082fc:	0800811b 	.word	0x0800811b
 8008300:	080082dd 	.word	0x080082dd
 8008304:	0800811b 	.word	0x0800811b
 8008308:	0800811b 	.word	0x0800811b
 800830c:	0800811b 	.word	0x0800811b
 8008310:	080082cd 	.word	0x080082cd
 8008314:	40013800 	.word	0x40013800
 8008318:	40004400 	.word	0x40004400
 800831c:	40004800 	.word	0x40004800
 8008320:	40004c00 	.word	0x40004c00
 8008324:	40005000 	.word	0x40005000
 8008328:	40021000 	.word	0x40021000
 800832c:	0800c6a8 	.word	0x0800c6a8
 8008330:	007a1200 	.word	0x007a1200
 8008334:	00f42400 	.word	0x00f42400

08008338 <UART_Start_Receive_IT>:
{
 8008338:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 800833a:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800833c:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 800833e:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8008340:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8008344:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8008348:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 800834c:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 800834e:	d044      	beq.n	80083da <UART_Start_Receive_IT+0xa2>
 8008350:	2c00      	cmp	r4, #0
 8008352:	d03c      	beq.n	80083ce <UART_Start_Receive_IT+0x96>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008354:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008356:	2122      	movs	r1, #34	; 0x22
 8008358:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800835a:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  UART_MASK_COMPUTATION(huart);
 800835e:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008362:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	f102 0308 	add.w	r3, r2, #8
 800836a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836e:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008372:	f102 0408 	add.w	r4, r2, #8
 8008376:	e844 3100 	strex	r1, r3, [r4]
 800837a:	2900      	cmp	r1, #0
 800837c:	d1f3      	bne.n	8008366 <UART_Start_Receive_IT+0x2e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800837e:	6883      	ldr	r3, [r0, #8]
 8008380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008384:	6903      	ldr	r3, [r0, #16]
 8008386:	d00e      	beq.n	80083a6 <UART_Start_Receive_IT+0x6e>
    huart->RxISR = UART_RxISR_8BIT;
 8008388:	491d      	ldr	r1, [pc, #116]	; (8008400 <UART_Start_Receive_IT+0xc8>)
 800838a:	6681      	str	r1, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 800838c:	b173      	cbz	r3, 80083ac <UART_Start_Receive_IT+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008392:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	e842 3100 	strex	r1, r3, [r2]
 800839a:	2900      	cmp	r1, #0
 800839c:	d1f7      	bne.n	800838e <UART_Start_Receive_IT+0x56>
}
 800839e:	2000      	movs	r0, #0
 80083a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083a4:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083a6:	b9fb      	cbnz	r3, 80083e8 <UART_Start_Receive_IT+0xb0>
 80083a8:	4b16      	ldr	r3, [pc, #88]	; (8008404 <UART_Start_Receive_IT+0xcc>)
 80083aa:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80083b0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b4:	e842 3100 	strex	r1, r3, [r2]
 80083b8:	2900      	cmp	r1, #0
 80083ba:	d0f0      	beq.n	800839e <UART_Start_Receive_IT+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	e852 3f00 	ldrex	r3, [r2]
 80083c0:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	e842 3100 	strex	r1, r3, [r2]
 80083c8:	2900      	cmp	r1, #0
 80083ca:	d1ef      	bne.n	80083ac <UART_Start_Receive_IT+0x74>
 80083cc:	e7e7      	b.n	800839e <UART_Start_Receive_IT+0x66>
  UART_MASK_COMPUTATION(huart);
 80083ce:	6903      	ldr	r3, [r0, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bf0c      	ite	eq
 80083d4:	23ff      	moveq	r3, #255	; 0xff
 80083d6:	237f      	movne	r3, #127	; 0x7f
 80083d8:	e7bc      	b.n	8008354 <UART_Start_Receive_IT+0x1c>
 80083da:	6902      	ldr	r2, [r0, #16]
 80083dc:	2a00      	cmp	r2, #0
 80083de:	f240 13ff 	movw	r3, #511	; 0x1ff
 80083e2:	bf18      	it	ne
 80083e4:	23ff      	movne	r3, #255	; 0xff
 80083e6:	e7b5      	b.n	8008354 <UART_Start_Receive_IT+0x1c>
    huart->RxISR = UART_RxISR_8BIT;
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <UART_Start_Receive_IT+0xc8>)
 80083ea:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80083f0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f4:	e842 3100 	strex	r1, r3, [r2]
 80083f8:	2900      	cmp	r1, #0
 80083fa:	d1c8      	bne.n	800838e <UART_Start_Receive_IT+0x56>
 80083fc:	e7cf      	b.n	800839e <UART_Start_Receive_IT+0x66>
 80083fe:	bf00      	nop
 8008400:	08007d51 	.word	0x08007d51
 8008404:	08007d01 	.word	0x08007d01

08008408 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008408:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800840c:	2b20      	cmp	r3, #32
 800840e:	d115      	bne.n	800843c <HAL_UART_Receive_IT+0x34>
    if ((pData == NULL) || (Size == 0U))
 8008410:	b101      	cbz	r1, 8008414 <HAL_UART_Receive_IT+0xc>
 8008412:	b90a      	cbnz	r2, 8008418 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8008414:	2001      	movs	r0, #1
}
 8008416:	4770      	bx	lr
{
 8008418:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841a:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800841c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841e:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008420:	6863      	ldr	r3, [r4, #4]
 8008422:	021b      	lsls	r3, r3, #8
 8008424:	d507      	bpl.n	8008436 <HAL_UART_Receive_IT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800842a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	e844 3500 	strex	r5, r3, [r4]
 8008432:	2d00      	cmp	r5, #0
 8008434:	d1f7      	bne.n	8008426 <HAL_UART_Receive_IT+0x1e>
}
 8008436:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008438:	f7ff bf7e 	b.w	8008338 <UART_Start_Receive_IT>
    return HAL_BUSY;
 800843c:	2002      	movs	r0, #2
 800843e:	4770      	bx	lr

08008440 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	0000      	movs	r0, r0
	...

08008448 <sin>:
 8008448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800844a:	ec53 2b10 	vmov	r2, r3, d0
 800844e:	4828      	ldr	r0, [pc, #160]	; (80084f0 <sin+0xa8>)
 8008450:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008454:	4281      	cmp	r1, r0
 8008456:	dc07      	bgt.n	8008468 <sin+0x20>
 8008458:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80084e8 <sin+0xa0>
 800845c:	2000      	movs	r0, #0
 800845e:	b005      	add	sp, #20
 8008460:	f85d eb04 	ldr.w	lr, [sp], #4
 8008464:	f000 b910 	b.w	8008688 <__kernel_sin>
 8008468:	4822      	ldr	r0, [pc, #136]	; (80084f4 <sin+0xac>)
 800846a:	4281      	cmp	r1, r0
 800846c:	dd09      	ble.n	8008482 <sin+0x3a>
 800846e:	ee10 0a10 	vmov	r0, s0
 8008472:	4619      	mov	r1, r3
 8008474:	f7f7 ff08 	bl	8000288 <__aeabi_dsub>
 8008478:	ec41 0b10 	vmov	d0, r0, r1
 800847c:	b005      	add	sp, #20
 800847e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008482:	4668      	mov	r0, sp
 8008484:	f000 f9c0 	bl	8008808 <__ieee754_rem_pio2>
 8008488:	f000 0003 	and.w	r0, r0, #3
 800848c:	2801      	cmp	r0, #1
 800848e:	d00c      	beq.n	80084aa <sin+0x62>
 8008490:	2802      	cmp	r0, #2
 8008492:	d011      	beq.n	80084b8 <sin+0x70>
 8008494:	b9f0      	cbnz	r0, 80084d4 <sin+0x8c>
 8008496:	ed9d 1b02 	vldr	d1, [sp, #8]
 800849a:	ed9d 0b00 	vldr	d0, [sp]
 800849e:	2001      	movs	r0, #1
 80084a0:	f000 f8f2 	bl	8008688 <__kernel_sin>
 80084a4:	ec51 0b10 	vmov	r0, r1, d0
 80084a8:	e7e6      	b.n	8008478 <sin+0x30>
 80084aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084ae:	ed9d 0b00 	vldr	d0, [sp]
 80084b2:	f000 f821 	bl	80084f8 <__kernel_cos>
 80084b6:	e7f5      	b.n	80084a4 <sin+0x5c>
 80084b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084bc:	ed9d 0b00 	vldr	d0, [sp]
 80084c0:	2001      	movs	r0, #1
 80084c2:	f000 f8e1 	bl	8008688 <__kernel_sin>
 80084c6:	ec53 2b10 	vmov	r2, r3, d0
 80084ca:	ee10 0a10 	vmov	r0, s0
 80084ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80084d2:	e7d1      	b.n	8008478 <sin+0x30>
 80084d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80084d8:	ed9d 0b00 	vldr	d0, [sp]
 80084dc:	f000 f80c 	bl	80084f8 <__kernel_cos>
 80084e0:	e7f1      	b.n	80084c6 <sin+0x7e>
 80084e2:	bf00      	nop
 80084e4:	f3af 8000 	nop.w
	...
 80084f0:	3fe921fb 	.word	0x3fe921fb
 80084f4:	7fefffff 	.word	0x7fefffff

080084f8 <__kernel_cos>:
 80084f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084fc:	ec57 6b10 	vmov	r6, r7, d0
 8008500:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008504:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008508:	ed8d 1b00 	vstr	d1, [sp]
 800850c:	da07      	bge.n	800851e <__kernel_cos+0x26>
 800850e:	ee10 0a10 	vmov	r0, s0
 8008512:	4639      	mov	r1, r7
 8008514:	f7f8 fb20 	bl	8000b58 <__aeabi_d2iz>
 8008518:	2800      	cmp	r0, #0
 800851a:	f000 8088 	beq.w	800862e <__kernel_cos+0x136>
 800851e:	4632      	mov	r2, r6
 8008520:	463b      	mov	r3, r7
 8008522:	4630      	mov	r0, r6
 8008524:	4639      	mov	r1, r7
 8008526:	f7f8 f867 	bl	80005f8 <__aeabi_dmul>
 800852a:	4b51      	ldr	r3, [pc, #324]	; (8008670 <__kernel_cos+0x178>)
 800852c:	2200      	movs	r2, #0
 800852e:	4604      	mov	r4, r0
 8008530:	460d      	mov	r5, r1
 8008532:	f7f8 f861 	bl	80005f8 <__aeabi_dmul>
 8008536:	a340      	add	r3, pc, #256	; (adr r3, 8008638 <__kernel_cos+0x140>)
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	4682      	mov	sl, r0
 800853e:	468b      	mov	fp, r1
 8008540:	4620      	mov	r0, r4
 8008542:	4629      	mov	r1, r5
 8008544:	f7f8 f858 	bl	80005f8 <__aeabi_dmul>
 8008548:	a33d      	add	r3, pc, #244	; (adr r3, 8008640 <__kernel_cos+0x148>)
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	f7f7 fe9d 	bl	800028c <__adddf3>
 8008552:	4622      	mov	r2, r4
 8008554:	462b      	mov	r3, r5
 8008556:	f7f8 f84f 	bl	80005f8 <__aeabi_dmul>
 800855a:	a33b      	add	r3, pc, #236	; (adr r3, 8008648 <__kernel_cos+0x150>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	f7f7 fe92 	bl	8000288 <__aeabi_dsub>
 8008564:	4622      	mov	r2, r4
 8008566:	462b      	mov	r3, r5
 8008568:	f7f8 f846 	bl	80005f8 <__aeabi_dmul>
 800856c:	a338      	add	r3, pc, #224	; (adr r3, 8008650 <__kernel_cos+0x158>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f7 fe8b 	bl	800028c <__adddf3>
 8008576:	4622      	mov	r2, r4
 8008578:	462b      	mov	r3, r5
 800857a:	f7f8 f83d 	bl	80005f8 <__aeabi_dmul>
 800857e:	a336      	add	r3, pc, #216	; (adr r3, 8008658 <__kernel_cos+0x160>)
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f7f7 fe80 	bl	8000288 <__aeabi_dsub>
 8008588:	4622      	mov	r2, r4
 800858a:	462b      	mov	r3, r5
 800858c:	f7f8 f834 	bl	80005f8 <__aeabi_dmul>
 8008590:	a333      	add	r3, pc, #204	; (adr r3, 8008660 <__kernel_cos+0x168>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	f7f7 fe79 	bl	800028c <__adddf3>
 800859a:	4622      	mov	r2, r4
 800859c:	462b      	mov	r3, r5
 800859e:	f7f8 f82b 	bl	80005f8 <__aeabi_dmul>
 80085a2:	4622      	mov	r2, r4
 80085a4:	462b      	mov	r3, r5
 80085a6:	f7f8 f827 	bl	80005f8 <__aeabi_dmul>
 80085aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ae:	4604      	mov	r4, r0
 80085b0:	460d      	mov	r5, r1
 80085b2:	4630      	mov	r0, r6
 80085b4:	4639      	mov	r1, r7
 80085b6:	f7f8 f81f 	bl	80005f8 <__aeabi_dmul>
 80085ba:	460b      	mov	r3, r1
 80085bc:	4602      	mov	r2, r0
 80085be:	4629      	mov	r1, r5
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7f7 fe61 	bl	8000288 <__aeabi_dsub>
 80085c6:	4b2b      	ldr	r3, [pc, #172]	; (8008674 <__kernel_cos+0x17c>)
 80085c8:	4598      	cmp	r8, r3
 80085ca:	4606      	mov	r6, r0
 80085cc:	460f      	mov	r7, r1
 80085ce:	dc10      	bgt.n	80085f2 <__kernel_cos+0xfa>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4650      	mov	r0, sl
 80085d6:	4659      	mov	r1, fp
 80085d8:	f7f7 fe56 	bl	8000288 <__aeabi_dsub>
 80085dc:	460b      	mov	r3, r1
 80085de:	4926      	ldr	r1, [pc, #152]	; (8008678 <__kernel_cos+0x180>)
 80085e0:	4602      	mov	r2, r0
 80085e2:	2000      	movs	r0, #0
 80085e4:	f7f7 fe50 	bl	8000288 <__aeabi_dsub>
 80085e8:	ec41 0b10 	vmov	d0, r0, r1
 80085ec:	b003      	add	sp, #12
 80085ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f2:	4b22      	ldr	r3, [pc, #136]	; (800867c <__kernel_cos+0x184>)
 80085f4:	4920      	ldr	r1, [pc, #128]	; (8008678 <__kernel_cos+0x180>)
 80085f6:	4598      	cmp	r8, r3
 80085f8:	bfcc      	ite	gt
 80085fa:	4d21      	ldrgt	r5, [pc, #132]	; (8008680 <__kernel_cos+0x188>)
 80085fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008600:	2400      	movs	r4, #0
 8008602:	4622      	mov	r2, r4
 8008604:	462b      	mov	r3, r5
 8008606:	2000      	movs	r0, #0
 8008608:	f7f7 fe3e 	bl	8000288 <__aeabi_dsub>
 800860c:	4622      	mov	r2, r4
 800860e:	4680      	mov	r8, r0
 8008610:	4689      	mov	r9, r1
 8008612:	462b      	mov	r3, r5
 8008614:	4650      	mov	r0, sl
 8008616:	4659      	mov	r1, fp
 8008618:	f7f7 fe36 	bl	8000288 <__aeabi_dsub>
 800861c:	4632      	mov	r2, r6
 800861e:	463b      	mov	r3, r7
 8008620:	f7f7 fe32 	bl	8000288 <__aeabi_dsub>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4640      	mov	r0, r8
 800862a:	4649      	mov	r1, r9
 800862c:	e7da      	b.n	80085e4 <__kernel_cos+0xec>
 800862e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008668 <__kernel_cos+0x170>
 8008632:	e7db      	b.n	80085ec <__kernel_cos+0xf4>
 8008634:	f3af 8000 	nop.w
 8008638:	be8838d4 	.word	0xbe8838d4
 800863c:	bda8fae9 	.word	0xbda8fae9
 8008640:	bdb4b1c4 	.word	0xbdb4b1c4
 8008644:	3e21ee9e 	.word	0x3e21ee9e
 8008648:	809c52ad 	.word	0x809c52ad
 800864c:	3e927e4f 	.word	0x3e927e4f
 8008650:	19cb1590 	.word	0x19cb1590
 8008654:	3efa01a0 	.word	0x3efa01a0
 8008658:	16c15177 	.word	0x16c15177
 800865c:	3f56c16c 	.word	0x3f56c16c
 8008660:	5555554c 	.word	0x5555554c
 8008664:	3fa55555 	.word	0x3fa55555
 8008668:	00000000 	.word	0x00000000
 800866c:	3ff00000 	.word	0x3ff00000
 8008670:	3fe00000 	.word	0x3fe00000
 8008674:	3fd33332 	.word	0x3fd33332
 8008678:	3ff00000 	.word	0x3ff00000
 800867c:	3fe90000 	.word	0x3fe90000
 8008680:	3fd20000 	.word	0x3fd20000
 8008684:	00000000 	.word	0x00000000

08008688 <__kernel_sin>:
 8008688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868c:	ed2d 8b04 	vpush	{d8-d9}
 8008690:	eeb0 8a41 	vmov.f32	s16, s2
 8008694:	eef0 8a61 	vmov.f32	s17, s3
 8008698:	ec55 4b10 	vmov	r4, r5, d0
 800869c:	b083      	sub	sp, #12
 800869e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80086a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80086a6:	9001      	str	r0, [sp, #4]
 80086a8:	da06      	bge.n	80086b8 <__kernel_sin+0x30>
 80086aa:	ee10 0a10 	vmov	r0, s0
 80086ae:	4629      	mov	r1, r5
 80086b0:	f7f8 fa52 	bl	8000b58 <__aeabi_d2iz>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d051      	beq.n	800875c <__kernel_sin+0xd4>
 80086b8:	4622      	mov	r2, r4
 80086ba:	462b      	mov	r3, r5
 80086bc:	4620      	mov	r0, r4
 80086be:	4629      	mov	r1, r5
 80086c0:	f7f7 ff9a 	bl	80005f8 <__aeabi_dmul>
 80086c4:	4682      	mov	sl, r0
 80086c6:	468b      	mov	fp, r1
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4620      	mov	r0, r4
 80086ce:	4629      	mov	r1, r5
 80086d0:	f7f7 ff92 	bl	80005f8 <__aeabi_dmul>
 80086d4:	a341      	add	r3, pc, #260	; (adr r3, 80087dc <__kernel_sin+0x154>)
 80086d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086da:	4680      	mov	r8, r0
 80086dc:	4689      	mov	r9, r1
 80086de:	4650      	mov	r0, sl
 80086e0:	4659      	mov	r1, fp
 80086e2:	f7f7 ff89 	bl	80005f8 <__aeabi_dmul>
 80086e6:	a33f      	add	r3, pc, #252	; (adr r3, 80087e4 <__kernel_sin+0x15c>)
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	f7f7 fdcc 	bl	8000288 <__aeabi_dsub>
 80086f0:	4652      	mov	r2, sl
 80086f2:	465b      	mov	r3, fp
 80086f4:	f7f7 ff80 	bl	80005f8 <__aeabi_dmul>
 80086f8:	a33c      	add	r3, pc, #240	; (adr r3, 80087ec <__kernel_sin+0x164>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 fdc5 	bl	800028c <__adddf3>
 8008702:	4652      	mov	r2, sl
 8008704:	465b      	mov	r3, fp
 8008706:	f7f7 ff77 	bl	80005f8 <__aeabi_dmul>
 800870a:	a33a      	add	r3, pc, #232	; (adr r3, 80087f4 <__kernel_sin+0x16c>)
 800870c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008710:	f7f7 fdba 	bl	8000288 <__aeabi_dsub>
 8008714:	4652      	mov	r2, sl
 8008716:	465b      	mov	r3, fp
 8008718:	f7f7 ff6e 	bl	80005f8 <__aeabi_dmul>
 800871c:	a337      	add	r3, pc, #220	; (adr r3, 80087fc <__kernel_sin+0x174>)
 800871e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008722:	f7f7 fdb3 	bl	800028c <__adddf3>
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	4606      	mov	r6, r0
 800872a:	460f      	mov	r7, r1
 800872c:	b9eb      	cbnz	r3, 800876a <__kernel_sin+0xe2>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	4650      	mov	r0, sl
 8008734:	4659      	mov	r1, fp
 8008736:	f7f7 ff5f 	bl	80005f8 <__aeabi_dmul>
 800873a:	a325      	add	r3, pc, #148	; (adr r3, 80087d0 <__kernel_sin+0x148>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f7 fda2 	bl	8000288 <__aeabi_dsub>
 8008744:	4642      	mov	r2, r8
 8008746:	464b      	mov	r3, r9
 8008748:	f7f7 ff56 	bl	80005f8 <__aeabi_dmul>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4620      	mov	r0, r4
 8008752:	4629      	mov	r1, r5
 8008754:	f7f7 fd9a 	bl	800028c <__adddf3>
 8008758:	4604      	mov	r4, r0
 800875a:	460d      	mov	r5, r1
 800875c:	ec45 4b10 	vmov	d0, r4, r5
 8008760:	b003      	add	sp, #12
 8008762:	ecbd 8b04 	vpop	{d8-d9}
 8008766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800876a:	4b1b      	ldr	r3, [pc, #108]	; (80087d8 <__kernel_sin+0x150>)
 800876c:	ec51 0b18 	vmov	r0, r1, d8
 8008770:	2200      	movs	r2, #0
 8008772:	f7f7 ff41 	bl	80005f8 <__aeabi_dmul>
 8008776:	4632      	mov	r2, r6
 8008778:	ec41 0b19 	vmov	d9, r0, r1
 800877c:	463b      	mov	r3, r7
 800877e:	4640      	mov	r0, r8
 8008780:	4649      	mov	r1, r9
 8008782:	f7f7 ff39 	bl	80005f8 <__aeabi_dmul>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	ec51 0b19 	vmov	r0, r1, d9
 800878e:	f7f7 fd7b 	bl	8000288 <__aeabi_dsub>
 8008792:	4652      	mov	r2, sl
 8008794:	465b      	mov	r3, fp
 8008796:	f7f7 ff2f 	bl	80005f8 <__aeabi_dmul>
 800879a:	ec53 2b18 	vmov	r2, r3, d8
 800879e:	f7f7 fd73 	bl	8000288 <__aeabi_dsub>
 80087a2:	a30b      	add	r3, pc, #44	; (adr r3, 80087d0 <__kernel_sin+0x148>)
 80087a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a8:	4606      	mov	r6, r0
 80087aa:	460f      	mov	r7, r1
 80087ac:	4640      	mov	r0, r8
 80087ae:	4649      	mov	r1, r9
 80087b0:	f7f7 ff22 	bl	80005f8 <__aeabi_dmul>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4630      	mov	r0, r6
 80087ba:	4639      	mov	r1, r7
 80087bc:	f7f7 fd66 	bl	800028c <__adddf3>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7f7 fd5e 	bl	8000288 <__aeabi_dsub>
 80087cc:	e7c4      	b.n	8008758 <__kernel_sin+0xd0>
 80087ce:	bf00      	nop
 80087d0:	55555549 	.word	0x55555549
 80087d4:	3fc55555 	.word	0x3fc55555
 80087d8:	3fe00000 	.word	0x3fe00000
 80087dc:	5acfd57c 	.word	0x5acfd57c
 80087e0:	3de5d93a 	.word	0x3de5d93a
 80087e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80087e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80087ec:	57b1fe7d 	.word	0x57b1fe7d
 80087f0:	3ec71de3 	.word	0x3ec71de3
 80087f4:	19c161d5 	.word	0x19c161d5
 80087f8:	3f2a01a0 	.word	0x3f2a01a0
 80087fc:	1110f8a6 	.word	0x1110f8a6
 8008800:	3f811111 	.word	0x3f811111
 8008804:	00000000 	.word	0x00000000

08008808 <__ieee754_rem_pio2>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	ed2d 8b02 	vpush	{d8}
 8008810:	ec55 4b10 	vmov	r4, r5, d0
 8008814:	4bca      	ldr	r3, [pc, #808]	; (8008b40 <__ieee754_rem_pio2+0x338>)
 8008816:	b08b      	sub	sp, #44	; 0x2c
 8008818:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800881c:	4598      	cmp	r8, r3
 800881e:	4682      	mov	sl, r0
 8008820:	9502      	str	r5, [sp, #8]
 8008822:	dc08      	bgt.n	8008836 <__ieee754_rem_pio2+0x2e>
 8008824:	2200      	movs	r2, #0
 8008826:	2300      	movs	r3, #0
 8008828:	ed80 0b00 	vstr	d0, [r0]
 800882c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008830:	f04f 0b00 	mov.w	fp, #0
 8008834:	e028      	b.n	8008888 <__ieee754_rem_pio2+0x80>
 8008836:	4bc3      	ldr	r3, [pc, #780]	; (8008b44 <__ieee754_rem_pio2+0x33c>)
 8008838:	4598      	cmp	r8, r3
 800883a:	dc78      	bgt.n	800892e <__ieee754_rem_pio2+0x126>
 800883c:	9b02      	ldr	r3, [sp, #8]
 800883e:	4ec2      	ldr	r6, [pc, #776]	; (8008b48 <__ieee754_rem_pio2+0x340>)
 8008840:	2b00      	cmp	r3, #0
 8008842:	ee10 0a10 	vmov	r0, s0
 8008846:	a3b0      	add	r3, pc, #704	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x300>)
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	4629      	mov	r1, r5
 800884e:	dd39      	ble.n	80088c4 <__ieee754_rem_pio2+0xbc>
 8008850:	f7f7 fd1a 	bl	8000288 <__aeabi_dsub>
 8008854:	45b0      	cmp	r8, r6
 8008856:	4604      	mov	r4, r0
 8008858:	460d      	mov	r5, r1
 800885a:	d01b      	beq.n	8008894 <__ieee754_rem_pio2+0x8c>
 800885c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x308>)
 800885e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008862:	f7f7 fd11 	bl	8000288 <__aeabi_dsub>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	e9ca 2300 	strd	r2, r3, [sl]
 800886e:	4620      	mov	r0, r4
 8008870:	4629      	mov	r1, r5
 8008872:	f7f7 fd09 	bl	8000288 <__aeabi_dsub>
 8008876:	a3a6      	add	r3, pc, #664	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x308>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f7f7 fd04 	bl	8000288 <__aeabi_dsub>
 8008880:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008884:	f04f 0b01 	mov.w	fp, #1
 8008888:	4658      	mov	r0, fp
 800888a:	b00b      	add	sp, #44	; 0x2c
 800888c:	ecbd 8b02 	vpop	{d8}
 8008890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008894:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x310>)
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 fcf5 	bl	8000288 <__aeabi_dsub>
 800889e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x318>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	4604      	mov	r4, r0
 80088a6:	460d      	mov	r5, r1
 80088a8:	f7f7 fcee 	bl	8000288 <__aeabi_dsub>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	e9ca 2300 	strd	r2, r3, [sl]
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	f7f7 fce6 	bl	8000288 <__aeabi_dsub>
 80088bc:	a398      	add	r3, pc, #608	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x318>)
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	e7db      	b.n	800887c <__ieee754_rem_pio2+0x74>
 80088c4:	f7f7 fce2 	bl	800028c <__adddf3>
 80088c8:	45b0      	cmp	r8, r6
 80088ca:	4604      	mov	r4, r0
 80088cc:	460d      	mov	r5, r1
 80088ce:	d016      	beq.n	80088fe <__ieee754_rem_pio2+0xf6>
 80088d0:	a38f      	add	r3, pc, #572	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x308>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f7 fcd9 	bl	800028c <__adddf3>
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	e9ca 2300 	strd	r2, r3, [sl]
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7f7 fccf 	bl	8000288 <__aeabi_dsub>
 80088ea:	a389      	add	r3, pc, #548	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x308>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f7f7 fccc 	bl	800028c <__adddf3>
 80088f4:	f04f 3bff 	mov.w	fp, #4294967295
 80088f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80088fc:	e7c4      	b.n	8008888 <__ieee754_rem_pio2+0x80>
 80088fe:	a386      	add	r3, pc, #536	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x310>)
 8008900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008904:	f7f7 fcc2 	bl	800028c <__adddf3>
 8008908:	a385      	add	r3, pc, #532	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x318>)
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	4604      	mov	r4, r0
 8008910:	460d      	mov	r5, r1
 8008912:	f7f7 fcbb 	bl	800028c <__adddf3>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	e9ca 2300 	strd	r2, r3, [sl]
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f7 fcb1 	bl	8000288 <__aeabi_dsub>
 8008926:	a37e      	add	r3, pc, #504	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x318>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	e7e0      	b.n	80088f0 <__ieee754_rem_pio2+0xe8>
 800892e:	4b87      	ldr	r3, [pc, #540]	; (8008b4c <__ieee754_rem_pio2+0x344>)
 8008930:	4598      	cmp	r8, r3
 8008932:	f300 80d8 	bgt.w	8008ae6 <__ieee754_rem_pio2+0x2de>
 8008936:	f000 f96d 	bl	8008c14 <fabs>
 800893a:	ec55 4b10 	vmov	r4, r5, d0
 800893e:	ee10 0a10 	vmov	r0, s0
 8008942:	a379      	add	r3, pc, #484	; (adr r3, 8008b28 <__ieee754_rem_pio2+0x320>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	4629      	mov	r1, r5
 800894a:	f7f7 fe55 	bl	80005f8 <__aeabi_dmul>
 800894e:	4b80      	ldr	r3, [pc, #512]	; (8008b50 <__ieee754_rem_pio2+0x348>)
 8008950:	2200      	movs	r2, #0
 8008952:	f7f7 fc9b 	bl	800028c <__adddf3>
 8008956:	f7f8 f8ff 	bl	8000b58 <__aeabi_d2iz>
 800895a:	4683      	mov	fp, r0
 800895c:	f7f7 fde2 	bl	8000524 <__aeabi_i2d>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	ec43 2b18 	vmov	d8, r2, r3
 8008968:	a367      	add	r3, pc, #412	; (adr r3, 8008b08 <__ieee754_rem_pio2+0x300>)
 800896a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	4620      	mov	r0, r4
 8008978:	4629      	mov	r1, r5
 800897a:	f7f7 fc85 	bl	8000288 <__aeabi_dsub>
 800897e:	a364      	add	r3, pc, #400	; (adr r3, 8008b10 <__ieee754_rem_pio2+0x308>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	4606      	mov	r6, r0
 8008986:	460f      	mov	r7, r1
 8008988:	ec51 0b18 	vmov	r0, r1, d8
 800898c:	f7f7 fe34 	bl	80005f8 <__aeabi_dmul>
 8008990:	f1bb 0f1f 	cmp.w	fp, #31
 8008994:	4604      	mov	r4, r0
 8008996:	460d      	mov	r5, r1
 8008998:	dc0d      	bgt.n	80089b6 <__ieee754_rem_pio2+0x1ae>
 800899a:	4b6e      	ldr	r3, [pc, #440]	; (8008b54 <__ieee754_rem_pio2+0x34c>)
 800899c:	f10b 32ff 	add.w	r2, fp, #4294967295
 80089a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a4:	4543      	cmp	r3, r8
 80089a6:	d006      	beq.n	80089b6 <__ieee754_rem_pio2+0x1ae>
 80089a8:	4622      	mov	r2, r4
 80089aa:	462b      	mov	r3, r5
 80089ac:	4630      	mov	r0, r6
 80089ae:	4639      	mov	r1, r7
 80089b0:	f7f7 fc6a 	bl	8000288 <__aeabi_dsub>
 80089b4:	e00e      	b.n	80089d4 <__ieee754_rem_pio2+0x1cc>
 80089b6:	462b      	mov	r3, r5
 80089b8:	4622      	mov	r2, r4
 80089ba:	4630      	mov	r0, r6
 80089bc:	4639      	mov	r1, r7
 80089be:	f7f7 fc63 	bl	8000288 <__aeabi_dsub>
 80089c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80089c6:	9303      	str	r3, [sp, #12]
 80089c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80089cc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80089d0:	2b10      	cmp	r3, #16
 80089d2:	dc02      	bgt.n	80089da <__ieee754_rem_pio2+0x1d2>
 80089d4:	e9ca 0100 	strd	r0, r1, [sl]
 80089d8:	e039      	b.n	8008a4e <__ieee754_rem_pio2+0x246>
 80089da:	a34f      	add	r3, pc, #316	; (adr r3, 8008b18 <__ieee754_rem_pio2+0x310>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	ec51 0b18 	vmov	r0, r1, d8
 80089e4:	f7f7 fe08 	bl	80005f8 <__aeabi_dmul>
 80089e8:	4604      	mov	r4, r0
 80089ea:	460d      	mov	r5, r1
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4630      	mov	r0, r6
 80089f2:	4639      	mov	r1, r7
 80089f4:	f7f7 fc48 	bl	8000288 <__aeabi_dsub>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4680      	mov	r8, r0
 80089fe:	4689      	mov	r9, r1
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	f7f7 fc40 	bl	8000288 <__aeabi_dsub>
 8008a08:	4622      	mov	r2, r4
 8008a0a:	462b      	mov	r3, r5
 8008a0c:	f7f7 fc3c 	bl	8000288 <__aeabi_dsub>
 8008a10:	a343      	add	r3, pc, #268	; (adr r3, 8008b20 <__ieee754_rem_pio2+0x318>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	4604      	mov	r4, r0
 8008a18:	460d      	mov	r5, r1
 8008a1a:	ec51 0b18 	vmov	r0, r1, d8
 8008a1e:	f7f7 fdeb 	bl	80005f8 <__aeabi_dmul>
 8008a22:	4622      	mov	r2, r4
 8008a24:	462b      	mov	r3, r5
 8008a26:	f7f7 fc2f 	bl	8000288 <__aeabi_dsub>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4604      	mov	r4, r0
 8008a30:	460d      	mov	r5, r1
 8008a32:	4640      	mov	r0, r8
 8008a34:	4649      	mov	r1, r9
 8008a36:	f7f7 fc27 	bl	8000288 <__aeabi_dsub>
 8008a3a:	9a03      	ldr	r2, [sp, #12]
 8008a3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b31      	cmp	r3, #49	; 0x31
 8008a44:	dc24      	bgt.n	8008a90 <__ieee754_rem_pio2+0x288>
 8008a46:	e9ca 0100 	strd	r0, r1, [sl]
 8008a4a:	4646      	mov	r6, r8
 8008a4c:	464f      	mov	r7, r9
 8008a4e:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a52:	4630      	mov	r0, r6
 8008a54:	4642      	mov	r2, r8
 8008a56:	464b      	mov	r3, r9
 8008a58:	4639      	mov	r1, r7
 8008a5a:	f7f7 fc15 	bl	8000288 <__aeabi_dsub>
 8008a5e:	462b      	mov	r3, r5
 8008a60:	4622      	mov	r2, r4
 8008a62:	f7f7 fc11 	bl	8000288 <__aeabi_dsub>
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008a6e:	f6bf af0b 	bge.w	8008888 <__ieee754_rem_pio2+0x80>
 8008a72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a76:	f8ca 3004 	str.w	r3, [sl, #4]
 8008a7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a7e:	f8ca 8000 	str.w	r8, [sl]
 8008a82:	f8ca 0008 	str.w	r0, [sl, #8]
 8008a86:	f8ca 300c 	str.w	r3, [sl, #12]
 8008a8a:	f1cb 0b00 	rsb	fp, fp, #0
 8008a8e:	e6fb      	b.n	8008888 <__ieee754_rem_pio2+0x80>
 8008a90:	a327      	add	r3, pc, #156	; (adr r3, 8008b30 <__ieee754_rem_pio2+0x328>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	ec51 0b18 	vmov	r0, r1, d8
 8008a9a:	f7f7 fdad 	bl	80005f8 <__aeabi_dmul>
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	f7f7 fbed 	bl	8000288 <__aeabi_dsub>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4606      	mov	r6, r0
 8008ab4:	460f      	mov	r7, r1
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	4649      	mov	r1, r9
 8008aba:	f7f7 fbe5 	bl	8000288 <__aeabi_dsub>
 8008abe:	4622      	mov	r2, r4
 8008ac0:	462b      	mov	r3, r5
 8008ac2:	f7f7 fbe1 	bl	8000288 <__aeabi_dsub>
 8008ac6:	a31c      	add	r3, pc, #112	; (adr r3, 8008b38 <__ieee754_rem_pio2+0x330>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	4604      	mov	r4, r0
 8008ace:	460d      	mov	r5, r1
 8008ad0:	ec51 0b18 	vmov	r0, r1, d8
 8008ad4:	f7f7 fd90 	bl	80005f8 <__aeabi_dmul>
 8008ad8:	4622      	mov	r2, r4
 8008ada:	462b      	mov	r3, r5
 8008adc:	f7f7 fbd4 	bl	8000288 <__aeabi_dsub>
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	e760      	b.n	80089a8 <__ieee754_rem_pio2+0x1a0>
 8008ae6:	4b1c      	ldr	r3, [pc, #112]	; (8008b58 <__ieee754_rem_pio2+0x350>)
 8008ae8:	4598      	cmp	r8, r3
 8008aea:	dd37      	ble.n	8008b5c <__ieee754_rem_pio2+0x354>
 8008aec:	ee10 2a10 	vmov	r2, s0
 8008af0:	462b      	mov	r3, r5
 8008af2:	4620      	mov	r0, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7f7 fbc7 	bl	8000288 <__aeabi_dsub>
 8008afa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008afe:	e9ca 0100 	strd	r0, r1, [sl]
 8008b02:	e695      	b.n	8008830 <__ieee754_rem_pio2+0x28>
 8008b04:	f3af 8000 	nop.w
 8008b08:	54400000 	.word	0x54400000
 8008b0c:	3ff921fb 	.word	0x3ff921fb
 8008b10:	1a626331 	.word	0x1a626331
 8008b14:	3dd0b461 	.word	0x3dd0b461
 8008b18:	1a600000 	.word	0x1a600000
 8008b1c:	3dd0b461 	.word	0x3dd0b461
 8008b20:	2e037073 	.word	0x2e037073
 8008b24:	3ba3198a 	.word	0x3ba3198a
 8008b28:	6dc9c883 	.word	0x6dc9c883
 8008b2c:	3fe45f30 	.word	0x3fe45f30
 8008b30:	2e000000 	.word	0x2e000000
 8008b34:	3ba3198a 	.word	0x3ba3198a
 8008b38:	252049c1 	.word	0x252049c1
 8008b3c:	397b839a 	.word	0x397b839a
 8008b40:	3fe921fb 	.word	0x3fe921fb
 8008b44:	4002d97b 	.word	0x4002d97b
 8008b48:	3ff921fb 	.word	0x3ff921fb
 8008b4c:	413921fb 	.word	0x413921fb
 8008b50:	3fe00000 	.word	0x3fe00000
 8008b54:	0800c6ac 	.word	0x0800c6ac
 8008b58:	7fefffff 	.word	0x7fefffff
 8008b5c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8008b60:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8008b64:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8008b68:	4620      	mov	r0, r4
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	f7f7 fff4 	bl	8000b58 <__aeabi_d2iz>
 8008b70:	f7f7 fcd8 	bl	8000524 <__aeabi_i2d>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4620      	mov	r0, r4
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b80:	f7f7 fb82 	bl	8000288 <__aeabi_dsub>
 8008b84:	4b21      	ldr	r3, [pc, #132]	; (8008c0c <__ieee754_rem_pio2+0x404>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	f7f7 fd36 	bl	80005f8 <__aeabi_dmul>
 8008b8c:	460d      	mov	r5, r1
 8008b8e:	4604      	mov	r4, r0
 8008b90:	f7f7 ffe2 	bl	8000b58 <__aeabi_d2iz>
 8008b94:	f7f7 fcc6 	bl	8000524 <__aeabi_i2d>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008ba4:	f7f7 fb70 	bl	8000288 <__aeabi_dsub>
 8008ba8:	4b18      	ldr	r3, [pc, #96]	; (8008c0c <__ieee754_rem_pio2+0x404>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	f7f7 fd24 	bl	80005f8 <__aeabi_dmul>
 8008bb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bb4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8008bb8:	2703      	movs	r7, #3
 8008bba:	2400      	movs	r4, #0
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	462b      	mov	r3, r5
 8008bc6:	46b9      	mov	r9, r7
 8008bc8:	3f01      	subs	r7, #1
 8008bca:	f7f7 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d1f5      	bne.n	8008bbe <__ieee754_rem_pio2+0x3b6>
 8008bd2:	4b0f      	ldr	r3, [pc, #60]	; (8008c10 <__ieee754_rem_pio2+0x408>)
 8008bd4:	9301      	str	r3, [sp, #4]
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	4632      	mov	r2, r6
 8008bdc:	464b      	mov	r3, r9
 8008bde:	4651      	mov	r1, sl
 8008be0:	a804      	add	r0, sp, #16
 8008be2:	f000 f821 	bl	8008c28 <__kernel_rem_pio2>
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	4683      	mov	fp, r0
 8008bec:	f6bf ae4c 	bge.w	8008888 <__ieee754_rem_pio2+0x80>
 8008bf0:	e9da 2100 	ldrd	r2, r1, [sl]
 8008bf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bf8:	e9ca 2300 	strd	r2, r3, [sl]
 8008bfc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008c00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c04:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008c08:	e73f      	b.n	8008a8a <__ieee754_rem_pio2+0x282>
 8008c0a:	bf00      	nop
 8008c0c:	41700000 	.word	0x41700000
 8008c10:	0800c72c 	.word	0x0800c72c

08008c14 <fabs>:
 8008c14:	ec51 0b10 	vmov	r0, r1, d0
 8008c18:	ee10 2a10 	vmov	r2, s0
 8008c1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c20:	ec43 2b10 	vmov	d0, r2, r3
 8008c24:	4770      	bx	lr
	...

08008c28 <__kernel_rem_pio2>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	ed2d 8b02 	vpush	{d8}
 8008c30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008c34:	f112 0f14 	cmn.w	r2, #20
 8008c38:	9306      	str	r3, [sp, #24]
 8008c3a:	9104      	str	r1, [sp, #16]
 8008c3c:	4bc2      	ldr	r3, [pc, #776]	; (8008f48 <__kernel_rem_pio2+0x320>)
 8008c3e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008c40:	9009      	str	r0, [sp, #36]	; 0x24
 8008c42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	9b06      	ldr	r3, [sp, #24]
 8008c4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c4e:	bfa8      	it	ge
 8008c50:	1ed4      	subge	r4, r2, #3
 8008c52:	9305      	str	r3, [sp, #20]
 8008c54:	bfb2      	itee	lt
 8008c56:	2400      	movlt	r4, #0
 8008c58:	2318      	movge	r3, #24
 8008c5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008c5e:	f06f 0317 	mvn.w	r3, #23
 8008c62:	fb04 3303 	mla	r3, r4, r3, r3
 8008c66:	eb03 0a02 	add.w	sl, r3, r2
 8008c6a:	9b00      	ldr	r3, [sp, #0]
 8008c6c:	9a05      	ldr	r2, [sp, #20]
 8008c6e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008f38 <__kernel_rem_pio2+0x310>
 8008c72:	eb03 0802 	add.w	r8, r3, r2
 8008c76:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008c78:	1aa7      	subs	r7, r4, r2
 8008c7a:	ae20      	add	r6, sp, #128	; 0x80
 8008c7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008c80:	2500      	movs	r5, #0
 8008c82:	4545      	cmp	r5, r8
 8008c84:	dd13      	ble.n	8008cae <__kernel_rem_pio2+0x86>
 8008c86:	9b06      	ldr	r3, [sp, #24]
 8008c88:	aa20      	add	r2, sp, #128	; 0x80
 8008c8a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008c8e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008c92:	f04f 0800 	mov.w	r8, #0
 8008c96:	9b00      	ldr	r3, [sp, #0]
 8008c98:	4598      	cmp	r8, r3
 8008c9a:	dc31      	bgt.n	8008d00 <__kernel_rem_pio2+0xd8>
 8008c9c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008f38 <__kernel_rem_pio2+0x310>
 8008ca0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008ca4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ca8:	462f      	mov	r7, r5
 8008caa:	2600      	movs	r6, #0
 8008cac:	e01b      	b.n	8008ce6 <__kernel_rem_pio2+0xbe>
 8008cae:	42ef      	cmn	r7, r5
 8008cb0:	d407      	bmi.n	8008cc2 <__kernel_rem_pio2+0x9a>
 8008cb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008cb6:	f7f7 fc35 	bl	8000524 <__aeabi_i2d>
 8008cba:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008cbe:	3501      	adds	r5, #1
 8008cc0:	e7df      	b.n	8008c82 <__kernel_rem_pio2+0x5a>
 8008cc2:	ec51 0b18 	vmov	r0, r1, d8
 8008cc6:	e7f8      	b.n	8008cba <__kernel_rem_pio2+0x92>
 8008cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ccc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008cd0:	f7f7 fc92 	bl	80005f8 <__aeabi_dmul>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cdc:	f7f7 fad6 	bl	800028c <__adddf3>
 8008ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce4:	3601      	adds	r6, #1
 8008ce6:	9b05      	ldr	r3, [sp, #20]
 8008ce8:	429e      	cmp	r6, r3
 8008cea:	f1a7 0708 	sub.w	r7, r7, #8
 8008cee:	ddeb      	ble.n	8008cc8 <__kernel_rem_pio2+0xa0>
 8008cf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cf4:	f108 0801 	add.w	r8, r8, #1
 8008cf8:	ecab 7b02 	vstmia	fp!, {d7}
 8008cfc:	3508      	adds	r5, #8
 8008cfe:	e7ca      	b.n	8008c96 <__kernel_rem_pio2+0x6e>
 8008d00:	9b00      	ldr	r3, [sp, #0]
 8008d02:	aa0c      	add	r2, sp, #48	; 0x30
 8008d04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d08:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d0a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008d0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008d10:	9c00      	ldr	r4, [sp, #0]
 8008d12:	930a      	str	r3, [sp, #40]	; 0x28
 8008d14:	00e3      	lsls	r3, r4, #3
 8008d16:	9308      	str	r3, [sp, #32]
 8008d18:	ab98      	add	r3, sp, #608	; 0x260
 8008d1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d1e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008d22:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008d26:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d28:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008d2c:	46c3      	mov	fp, r8
 8008d2e:	46a1      	mov	r9, r4
 8008d30:	f1b9 0f00 	cmp.w	r9, #0
 8008d34:	f1a5 0508 	sub.w	r5, r5, #8
 8008d38:	dc77      	bgt.n	8008e2a <__kernel_rem_pio2+0x202>
 8008d3a:	ec47 6b10 	vmov	d0, r6, r7
 8008d3e:	4650      	mov	r0, sl
 8008d40:	f000 fac2 	bl	80092c8 <scalbn>
 8008d44:	ec57 6b10 	vmov	r6, r7, d0
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008d4e:	ee10 0a10 	vmov	r0, s0
 8008d52:	4639      	mov	r1, r7
 8008d54:	f7f7 fc50 	bl	80005f8 <__aeabi_dmul>
 8008d58:	ec41 0b10 	vmov	d0, r0, r1
 8008d5c:	f000 fb34 	bl	80093c8 <floor>
 8008d60:	4b7a      	ldr	r3, [pc, #488]	; (8008f4c <__kernel_rem_pio2+0x324>)
 8008d62:	ec51 0b10 	vmov	r0, r1, d0
 8008d66:	2200      	movs	r2, #0
 8008d68:	f7f7 fc46 	bl	80005f8 <__aeabi_dmul>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4630      	mov	r0, r6
 8008d72:	4639      	mov	r1, r7
 8008d74:	f7f7 fa88 	bl	8000288 <__aeabi_dsub>
 8008d78:	460f      	mov	r7, r1
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	f7f7 feec 	bl	8000b58 <__aeabi_d2iz>
 8008d80:	9002      	str	r0, [sp, #8]
 8008d82:	f7f7 fbcf 	bl	8000524 <__aeabi_i2d>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fa7b 	bl	8000288 <__aeabi_dsub>
 8008d92:	f1ba 0f00 	cmp.w	sl, #0
 8008d96:	4606      	mov	r6, r0
 8008d98:	460f      	mov	r7, r1
 8008d9a:	dd6d      	ble.n	8008e78 <__kernel_rem_pio2+0x250>
 8008d9c:	1e61      	subs	r1, r4, #1
 8008d9e:	ab0c      	add	r3, sp, #48	; 0x30
 8008da0:	9d02      	ldr	r5, [sp, #8]
 8008da2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008da6:	f1ca 0018 	rsb	r0, sl, #24
 8008daa:	fa43 f200 	asr.w	r2, r3, r0
 8008dae:	4415      	add	r5, r2
 8008db0:	4082      	lsls	r2, r0
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	aa0c      	add	r2, sp, #48	; 0x30
 8008db6:	9502      	str	r5, [sp, #8]
 8008db8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008dbc:	f1ca 0217 	rsb	r2, sl, #23
 8008dc0:	fa43 fb02 	asr.w	fp, r3, r2
 8008dc4:	f1bb 0f00 	cmp.w	fp, #0
 8008dc8:	dd65      	ble.n	8008e96 <__kernel_rem_pio2+0x26e>
 8008dca:	9b02      	ldr	r3, [sp, #8]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	3301      	adds	r3, #1
 8008dd0:	9302      	str	r3, [sp, #8]
 8008dd2:	4615      	mov	r5, r2
 8008dd4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008dd8:	4294      	cmp	r4, r2
 8008dda:	f300 809f 	bgt.w	8008f1c <__kernel_rem_pio2+0x2f4>
 8008dde:	f1ba 0f00 	cmp.w	sl, #0
 8008de2:	dd07      	ble.n	8008df4 <__kernel_rem_pio2+0x1cc>
 8008de4:	f1ba 0f01 	cmp.w	sl, #1
 8008de8:	f000 80c1 	beq.w	8008f6e <__kernel_rem_pio2+0x346>
 8008dec:	f1ba 0f02 	cmp.w	sl, #2
 8008df0:	f000 80c7 	beq.w	8008f82 <__kernel_rem_pio2+0x35a>
 8008df4:	f1bb 0f02 	cmp.w	fp, #2
 8008df8:	d14d      	bne.n	8008e96 <__kernel_rem_pio2+0x26e>
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	463b      	mov	r3, r7
 8008dfe:	4954      	ldr	r1, [pc, #336]	; (8008f50 <__kernel_rem_pio2+0x328>)
 8008e00:	2000      	movs	r0, #0
 8008e02:	f7f7 fa41 	bl	8000288 <__aeabi_dsub>
 8008e06:	4606      	mov	r6, r0
 8008e08:	460f      	mov	r7, r1
 8008e0a:	2d00      	cmp	r5, #0
 8008e0c:	d043      	beq.n	8008e96 <__kernel_rem_pio2+0x26e>
 8008e0e:	4650      	mov	r0, sl
 8008e10:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8008f40 <__kernel_rem_pio2+0x318>
 8008e14:	f000 fa58 	bl	80092c8 <scalbn>
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	ec53 2b10 	vmov	r2, r3, d0
 8008e20:	f7f7 fa32 	bl	8000288 <__aeabi_dsub>
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	e035      	b.n	8008e96 <__kernel_rem_pio2+0x26e>
 8008e2a:	4b4a      	ldr	r3, [pc, #296]	; (8008f54 <__kernel_rem_pio2+0x32c>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4630      	mov	r0, r6
 8008e30:	4639      	mov	r1, r7
 8008e32:	f7f7 fbe1 	bl	80005f8 <__aeabi_dmul>
 8008e36:	f7f7 fe8f 	bl	8000b58 <__aeabi_d2iz>
 8008e3a:	f7f7 fb73 	bl	8000524 <__aeabi_i2d>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	ec43 2b18 	vmov	d8, r2, r3
 8008e46:	4b44      	ldr	r3, [pc, #272]	; (8008f58 <__kernel_rem_pio2+0x330>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f7f7 fbd5 	bl	80005f8 <__aeabi_dmul>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	460b      	mov	r3, r1
 8008e52:	4630      	mov	r0, r6
 8008e54:	4639      	mov	r1, r7
 8008e56:	f7f7 fa17 	bl	8000288 <__aeabi_dsub>
 8008e5a:	f7f7 fe7d 	bl	8000b58 <__aeabi_d2iz>
 8008e5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e62:	f84b 0b04 	str.w	r0, [fp], #4
 8008e66:	ec51 0b18 	vmov	r0, r1, d8
 8008e6a:	f7f7 fa0f 	bl	800028c <__adddf3>
 8008e6e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e72:	4606      	mov	r6, r0
 8008e74:	460f      	mov	r7, r1
 8008e76:	e75b      	b.n	8008d30 <__kernel_rem_pio2+0x108>
 8008e78:	d106      	bne.n	8008e88 <__kernel_rem_pio2+0x260>
 8008e7a:	1e63      	subs	r3, r4, #1
 8008e7c:	aa0c      	add	r2, sp, #48	; 0x30
 8008e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e82:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8008e86:	e79d      	b.n	8008dc4 <__kernel_rem_pio2+0x19c>
 8008e88:	4b34      	ldr	r3, [pc, #208]	; (8008f5c <__kernel_rem_pio2+0x334>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f7f7 fe3a 	bl	8000b04 <__aeabi_dcmpge>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d140      	bne.n	8008f16 <__kernel_rem_pio2+0x2ee>
 8008e94:	4683      	mov	fp, r0
 8008e96:	2200      	movs	r2, #0
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	f7f7 fe13 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	f000 80c1 	beq.w	800902a <__kernel_rem_pio2+0x402>
 8008ea8:	1e65      	subs	r5, r4, #1
 8008eaa:	462b      	mov	r3, r5
 8008eac:	2200      	movs	r2, #0
 8008eae:	9900      	ldr	r1, [sp, #0]
 8008eb0:	428b      	cmp	r3, r1
 8008eb2:	da6d      	bge.n	8008f90 <__kernel_rem_pio2+0x368>
 8008eb4:	2a00      	cmp	r2, #0
 8008eb6:	f000 808a 	beq.w	8008fce <__kernel_rem_pio2+0x3a6>
 8008eba:	ab0c      	add	r3, sp, #48	; 0x30
 8008ebc:	f1aa 0a18 	sub.w	sl, sl, #24
 8008ec0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 80ae 	beq.w	8009026 <__kernel_rem_pio2+0x3fe>
 8008eca:	4650      	mov	r0, sl
 8008ecc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8008f40 <__kernel_rem_pio2+0x318>
 8008ed0:	f000 f9fa 	bl	80092c8 <scalbn>
 8008ed4:	1c6b      	adds	r3, r5, #1
 8008ed6:	00da      	lsls	r2, r3, #3
 8008ed8:	9205      	str	r2, [sp, #20]
 8008eda:	ec57 6b10 	vmov	r6, r7, d0
 8008ede:	aa70      	add	r2, sp, #448	; 0x1c0
 8008ee0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8008f54 <__kernel_rem_pio2+0x32c>
 8008ee4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008ee8:	462c      	mov	r4, r5
 8008eea:	f04f 0800 	mov.w	r8, #0
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	f280 80d4 	bge.w	800909c <__kernel_rem_pio2+0x474>
 8008ef4:	462c      	mov	r4, r5
 8008ef6:	2c00      	cmp	r4, #0
 8008ef8:	f2c0 8102 	blt.w	8009100 <__kernel_rem_pio2+0x4d8>
 8008efc:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <__kernel_rem_pio2+0x338>)
 8008efe:	461e      	mov	r6, r3
 8008f00:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f02:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008f06:	1b2b      	subs	r3, r5, r4
 8008f08:	f04f 0900 	mov.w	r9, #0
 8008f0c:	f04f 0a00 	mov.w	sl, #0
 8008f10:	2700      	movs	r7, #0
 8008f12:	9306      	str	r3, [sp, #24]
 8008f14:	e0e6      	b.n	80090e4 <__kernel_rem_pio2+0x4bc>
 8008f16:	f04f 0b02 	mov.w	fp, #2
 8008f1a:	e756      	b.n	8008dca <__kernel_rem_pio2+0x1a2>
 8008f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008f20:	bb05      	cbnz	r5, 8008f64 <__kernel_rem_pio2+0x33c>
 8008f22:	b123      	cbz	r3, 8008f2e <__kernel_rem_pio2+0x306>
 8008f24:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008f28:	f8c8 3000 	str.w	r3, [r8]
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	3201      	adds	r2, #1
 8008f30:	f108 0804 	add.w	r8, r8, #4
 8008f34:	461d      	mov	r5, r3
 8008f36:	e74f      	b.n	8008dd8 <__kernel_rem_pio2+0x1b0>
	...
 8008f44:	3ff00000 	.word	0x3ff00000
 8008f48:	0800c878 	.word	0x0800c878
 8008f4c:	40200000 	.word	0x40200000
 8008f50:	3ff00000 	.word	0x3ff00000
 8008f54:	3e700000 	.word	0x3e700000
 8008f58:	41700000 	.word	0x41700000
 8008f5c:	3fe00000 	.word	0x3fe00000
 8008f60:	0800c838 	.word	0x0800c838
 8008f64:	1acb      	subs	r3, r1, r3
 8008f66:	f8c8 3000 	str.w	r3, [r8]
 8008f6a:	462b      	mov	r3, r5
 8008f6c:	e7df      	b.n	8008f2e <__kernel_rem_pio2+0x306>
 8008f6e:	1e62      	subs	r2, r4, #1
 8008f70:	ab0c      	add	r3, sp, #48	; 0x30
 8008f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f76:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008f7a:	a90c      	add	r1, sp, #48	; 0x30
 8008f7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008f80:	e738      	b.n	8008df4 <__kernel_rem_pio2+0x1cc>
 8008f82:	1e62      	subs	r2, r4, #1
 8008f84:	ab0c      	add	r3, sp, #48	; 0x30
 8008f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f8e:	e7f4      	b.n	8008f7a <__kernel_rem_pio2+0x352>
 8008f90:	a90c      	add	r1, sp, #48	; 0x30
 8008f92:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	e788      	b.n	8008eae <__kernel_rem_pio2+0x286>
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008fa2:	2900      	cmp	r1, #0
 8008fa4:	d0fa      	beq.n	8008f9c <__kernel_rem_pio2+0x374>
 8008fa6:	9a08      	ldr	r2, [sp, #32]
 8008fa8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008fac:	446a      	add	r2, sp
 8008fae:	3a98      	subs	r2, #152	; 0x98
 8008fb0:	9208      	str	r2, [sp, #32]
 8008fb2:	9a06      	ldr	r2, [sp, #24]
 8008fb4:	a920      	add	r1, sp, #128	; 0x80
 8008fb6:	18a2      	adds	r2, r4, r2
 8008fb8:	18e3      	adds	r3, r4, r3
 8008fba:	f104 0801 	add.w	r8, r4, #1
 8008fbe:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008fc2:	9302      	str	r3, [sp, #8]
 8008fc4:	9b02      	ldr	r3, [sp, #8]
 8008fc6:	4543      	cmp	r3, r8
 8008fc8:	da04      	bge.n	8008fd4 <__kernel_rem_pio2+0x3ac>
 8008fca:	461c      	mov	r4, r3
 8008fcc:	e6a2      	b.n	8008d14 <__kernel_rem_pio2+0xec>
 8008fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e7e4      	b.n	8008f9e <__kernel_rem_pio2+0x376>
 8008fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008fda:	f7f7 faa3 	bl	8000524 <__aeabi_i2d>
 8008fde:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe4:	46ab      	mov	fp, r5
 8008fe6:	461c      	mov	r4, r3
 8008fe8:	f04f 0900 	mov.w	r9, #0
 8008fec:	2600      	movs	r6, #0
 8008fee:	2700      	movs	r7, #0
 8008ff0:	9b05      	ldr	r3, [sp, #20]
 8008ff2:	4599      	cmp	r9, r3
 8008ff4:	dd06      	ble.n	8009004 <__kernel_rem_pio2+0x3dc>
 8008ff6:	9b08      	ldr	r3, [sp, #32]
 8008ff8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008ffc:	f108 0801 	add.w	r8, r8, #1
 8009000:	9308      	str	r3, [sp, #32]
 8009002:	e7df      	b.n	8008fc4 <__kernel_rem_pio2+0x39c>
 8009004:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009008:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800900c:	f7f7 faf4 	bl	80005f8 <__aeabi_dmul>
 8009010:	4602      	mov	r2, r0
 8009012:	460b      	mov	r3, r1
 8009014:	4630      	mov	r0, r6
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 f938 	bl	800028c <__adddf3>
 800901c:	f109 0901 	add.w	r9, r9, #1
 8009020:	4606      	mov	r6, r0
 8009022:	460f      	mov	r7, r1
 8009024:	e7e4      	b.n	8008ff0 <__kernel_rem_pio2+0x3c8>
 8009026:	3d01      	subs	r5, #1
 8009028:	e747      	b.n	8008eba <__kernel_rem_pio2+0x292>
 800902a:	ec47 6b10 	vmov	d0, r6, r7
 800902e:	f1ca 0000 	rsb	r0, sl, #0
 8009032:	f000 f949 	bl	80092c8 <scalbn>
 8009036:	ec57 6b10 	vmov	r6, r7, d0
 800903a:	4ba0      	ldr	r3, [pc, #640]	; (80092bc <__kernel_rem_pio2+0x694>)
 800903c:	ee10 0a10 	vmov	r0, s0
 8009040:	2200      	movs	r2, #0
 8009042:	4639      	mov	r1, r7
 8009044:	f7f7 fd5e 	bl	8000b04 <__aeabi_dcmpge>
 8009048:	b1f8      	cbz	r0, 800908a <__kernel_rem_pio2+0x462>
 800904a:	4b9d      	ldr	r3, [pc, #628]	; (80092c0 <__kernel_rem_pio2+0x698>)
 800904c:	2200      	movs	r2, #0
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 fad1 	bl	80005f8 <__aeabi_dmul>
 8009056:	f7f7 fd7f 	bl	8000b58 <__aeabi_d2iz>
 800905a:	4680      	mov	r8, r0
 800905c:	f7f7 fa62 	bl	8000524 <__aeabi_i2d>
 8009060:	4b96      	ldr	r3, [pc, #600]	; (80092bc <__kernel_rem_pio2+0x694>)
 8009062:	2200      	movs	r2, #0
 8009064:	f7f7 fac8 	bl	80005f8 <__aeabi_dmul>
 8009068:	460b      	mov	r3, r1
 800906a:	4602      	mov	r2, r0
 800906c:	4639      	mov	r1, r7
 800906e:	4630      	mov	r0, r6
 8009070:	f7f7 f90a 	bl	8000288 <__aeabi_dsub>
 8009074:	f7f7 fd70 	bl	8000b58 <__aeabi_d2iz>
 8009078:	1c65      	adds	r5, r4, #1
 800907a:	ab0c      	add	r3, sp, #48	; 0x30
 800907c:	f10a 0a18 	add.w	sl, sl, #24
 8009080:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009084:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009088:	e71f      	b.n	8008eca <__kernel_rem_pio2+0x2a2>
 800908a:	4630      	mov	r0, r6
 800908c:	4639      	mov	r1, r7
 800908e:	f7f7 fd63 	bl	8000b58 <__aeabi_d2iz>
 8009092:	ab0c      	add	r3, sp, #48	; 0x30
 8009094:	4625      	mov	r5, r4
 8009096:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800909a:	e716      	b.n	8008eca <__kernel_rem_pio2+0x2a2>
 800909c:	ab0c      	add	r3, sp, #48	; 0x30
 800909e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80090a2:	f7f7 fa3f 	bl	8000524 <__aeabi_i2d>
 80090a6:	4632      	mov	r2, r6
 80090a8:	463b      	mov	r3, r7
 80090aa:	f7f7 faa5 	bl	80005f8 <__aeabi_dmul>
 80090ae:	4642      	mov	r2, r8
 80090b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80090b4:	464b      	mov	r3, r9
 80090b6:	4630      	mov	r0, r6
 80090b8:	4639      	mov	r1, r7
 80090ba:	f7f7 fa9d 	bl	80005f8 <__aeabi_dmul>
 80090be:	3c01      	subs	r4, #1
 80090c0:	4606      	mov	r6, r0
 80090c2:	460f      	mov	r7, r1
 80090c4:	e713      	b.n	8008eee <__kernel_rem_pio2+0x2c6>
 80090c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80090ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80090ce:	f7f7 fa93 	bl	80005f8 <__aeabi_dmul>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4648      	mov	r0, r9
 80090d8:	4651      	mov	r1, sl
 80090da:	f7f7 f8d7 	bl	800028c <__adddf3>
 80090de:	3701      	adds	r7, #1
 80090e0:	4681      	mov	r9, r0
 80090e2:	468a      	mov	sl, r1
 80090e4:	9b00      	ldr	r3, [sp, #0]
 80090e6:	429f      	cmp	r7, r3
 80090e8:	dc02      	bgt.n	80090f0 <__kernel_rem_pio2+0x4c8>
 80090ea:	9b06      	ldr	r3, [sp, #24]
 80090ec:	429f      	cmp	r7, r3
 80090ee:	ddea      	ble.n	80090c6 <__kernel_rem_pio2+0x49e>
 80090f0:	9a06      	ldr	r2, [sp, #24]
 80090f2:	ab48      	add	r3, sp, #288	; 0x120
 80090f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80090f8:	e9c6 9a00 	strd	r9, sl, [r6]
 80090fc:	3c01      	subs	r4, #1
 80090fe:	e6fa      	b.n	8008ef6 <__kernel_rem_pio2+0x2ce>
 8009100:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009102:	2b02      	cmp	r3, #2
 8009104:	dc0b      	bgt.n	800911e <__kernel_rem_pio2+0x4f6>
 8009106:	2b00      	cmp	r3, #0
 8009108:	dc39      	bgt.n	800917e <__kernel_rem_pio2+0x556>
 800910a:	d05d      	beq.n	80091c8 <__kernel_rem_pio2+0x5a0>
 800910c:	9b02      	ldr	r3, [sp, #8]
 800910e:	f003 0007 	and.w	r0, r3, #7
 8009112:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009116:	ecbd 8b02 	vpop	{d8}
 800911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009120:	2b03      	cmp	r3, #3
 8009122:	d1f3      	bne.n	800910c <__kernel_rem_pio2+0x4e4>
 8009124:	9b05      	ldr	r3, [sp, #20]
 8009126:	9500      	str	r5, [sp, #0]
 8009128:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800912c:	eb0d 0403 	add.w	r4, sp, r3
 8009130:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009134:	46a2      	mov	sl, r4
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f1aa 0a08 	sub.w	sl, sl, #8
 800913e:	dc69      	bgt.n	8009214 <__kernel_rem_pio2+0x5ec>
 8009140:	46aa      	mov	sl, r5
 8009142:	f1ba 0f01 	cmp.w	sl, #1
 8009146:	f1a4 0408 	sub.w	r4, r4, #8
 800914a:	f300 8083 	bgt.w	8009254 <__kernel_rem_pio2+0x62c>
 800914e:	9c05      	ldr	r4, [sp, #20]
 8009150:	ab48      	add	r3, sp, #288	; 0x120
 8009152:	441c      	add	r4, r3
 8009154:	2000      	movs	r0, #0
 8009156:	2100      	movs	r1, #0
 8009158:	2d01      	cmp	r5, #1
 800915a:	f300 809a 	bgt.w	8009292 <__kernel_rem_pio2+0x66a>
 800915e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009162:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009166:	f1bb 0f00 	cmp.w	fp, #0
 800916a:	f040 8098 	bne.w	800929e <__kernel_rem_pio2+0x676>
 800916e:	9b04      	ldr	r3, [sp, #16]
 8009170:	e9c3 7800 	strd	r7, r8, [r3]
 8009174:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009178:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800917c:	e7c6      	b.n	800910c <__kernel_rem_pio2+0x4e4>
 800917e:	9e05      	ldr	r6, [sp, #20]
 8009180:	ab48      	add	r3, sp, #288	; 0x120
 8009182:	441e      	add	r6, r3
 8009184:	462c      	mov	r4, r5
 8009186:	2000      	movs	r0, #0
 8009188:	2100      	movs	r1, #0
 800918a:	2c00      	cmp	r4, #0
 800918c:	da33      	bge.n	80091f6 <__kernel_rem_pio2+0x5ce>
 800918e:	f1bb 0f00 	cmp.w	fp, #0
 8009192:	d036      	beq.n	8009202 <__kernel_rem_pio2+0x5da>
 8009194:	4602      	mov	r2, r0
 8009196:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800919a:	9c04      	ldr	r4, [sp, #16]
 800919c:	e9c4 2300 	strd	r2, r3, [r4]
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80091a8:	f7f7 f86e 	bl	8000288 <__aeabi_dsub>
 80091ac:	ae4a      	add	r6, sp, #296	; 0x128
 80091ae:	2401      	movs	r4, #1
 80091b0:	42a5      	cmp	r5, r4
 80091b2:	da29      	bge.n	8009208 <__kernel_rem_pio2+0x5e0>
 80091b4:	f1bb 0f00 	cmp.w	fp, #0
 80091b8:	d002      	beq.n	80091c0 <__kernel_rem_pio2+0x598>
 80091ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091be:	4619      	mov	r1, r3
 80091c0:	9b04      	ldr	r3, [sp, #16]
 80091c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80091c6:	e7a1      	b.n	800910c <__kernel_rem_pio2+0x4e4>
 80091c8:	9c05      	ldr	r4, [sp, #20]
 80091ca:	ab48      	add	r3, sp, #288	; 0x120
 80091cc:	441c      	add	r4, r3
 80091ce:	2000      	movs	r0, #0
 80091d0:	2100      	movs	r1, #0
 80091d2:	2d00      	cmp	r5, #0
 80091d4:	da09      	bge.n	80091ea <__kernel_rem_pio2+0x5c2>
 80091d6:	f1bb 0f00 	cmp.w	fp, #0
 80091da:	d002      	beq.n	80091e2 <__kernel_rem_pio2+0x5ba>
 80091dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091e0:	4619      	mov	r1, r3
 80091e2:	9b04      	ldr	r3, [sp, #16]
 80091e4:	e9c3 0100 	strd	r0, r1, [r3]
 80091e8:	e790      	b.n	800910c <__kernel_rem_pio2+0x4e4>
 80091ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80091ee:	f7f7 f84d 	bl	800028c <__adddf3>
 80091f2:	3d01      	subs	r5, #1
 80091f4:	e7ed      	b.n	80091d2 <__kernel_rem_pio2+0x5aa>
 80091f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80091fa:	f7f7 f847 	bl	800028c <__adddf3>
 80091fe:	3c01      	subs	r4, #1
 8009200:	e7c3      	b.n	800918a <__kernel_rem_pio2+0x562>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	e7c8      	b.n	800919a <__kernel_rem_pio2+0x572>
 8009208:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800920c:	f7f7 f83e 	bl	800028c <__adddf3>
 8009210:	3401      	adds	r4, #1
 8009212:	e7cd      	b.n	80091b0 <__kernel_rem_pio2+0x588>
 8009214:	e9da 8900 	ldrd	r8, r9, [sl]
 8009218:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800921c:	9b00      	ldr	r3, [sp, #0]
 800921e:	3b01      	subs	r3, #1
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	4632      	mov	r2, r6
 8009224:	463b      	mov	r3, r7
 8009226:	4640      	mov	r0, r8
 8009228:	4649      	mov	r1, r9
 800922a:	f7f7 f82f 	bl	800028c <__adddf3>
 800922e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4640      	mov	r0, r8
 8009238:	4649      	mov	r1, r9
 800923a:	f7f7 f825 	bl	8000288 <__aeabi_dsub>
 800923e:	4632      	mov	r2, r6
 8009240:	463b      	mov	r3, r7
 8009242:	f7f7 f823 	bl	800028c <__adddf3>
 8009246:	ed9d 7b06 	vldr	d7, [sp, #24]
 800924a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800924e:	ed8a 7b00 	vstr	d7, [sl]
 8009252:	e770      	b.n	8009136 <__kernel_rem_pio2+0x50e>
 8009254:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009258:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800925c:	4640      	mov	r0, r8
 800925e:	4632      	mov	r2, r6
 8009260:	463b      	mov	r3, r7
 8009262:	4649      	mov	r1, r9
 8009264:	f7f7 f812 	bl	800028c <__adddf3>
 8009268:	e9cd 0100 	strd	r0, r1, [sp]
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4640      	mov	r0, r8
 8009272:	4649      	mov	r1, r9
 8009274:	f7f7 f808 	bl	8000288 <__aeabi_dsub>
 8009278:	4632      	mov	r2, r6
 800927a:	463b      	mov	r3, r7
 800927c:	f7f7 f806 	bl	800028c <__adddf3>
 8009280:	ed9d 7b00 	vldr	d7, [sp]
 8009284:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009288:	ed84 7b00 	vstr	d7, [r4]
 800928c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009290:	e757      	b.n	8009142 <__kernel_rem_pio2+0x51a>
 8009292:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009296:	f7f6 fff9 	bl	800028c <__adddf3>
 800929a:	3d01      	subs	r5, #1
 800929c:	e75c      	b.n	8009158 <__kernel_rem_pio2+0x530>
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	9a04      	ldr	r2, [sp, #16]
 80092a2:	601f      	str	r7, [r3, #0]
 80092a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80092a8:	605c      	str	r4, [r3, #4]
 80092aa:	609d      	str	r5, [r3, #8]
 80092ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80092b0:	60d3      	str	r3, [r2, #12]
 80092b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092b6:	6110      	str	r0, [r2, #16]
 80092b8:	6153      	str	r3, [r2, #20]
 80092ba:	e727      	b.n	800910c <__kernel_rem_pio2+0x4e4>
 80092bc:	41700000 	.word	0x41700000
 80092c0:	3e700000 	.word	0x3e700000
 80092c4:	00000000 	.word	0x00000000

080092c8 <scalbn>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	ec55 4b10 	vmov	r4, r5, d0
 80092ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80092d2:	4606      	mov	r6, r0
 80092d4:	462b      	mov	r3, r5
 80092d6:	b999      	cbnz	r1, 8009300 <scalbn+0x38>
 80092d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092dc:	4323      	orrs	r3, r4
 80092de:	d03f      	beq.n	8009360 <scalbn+0x98>
 80092e0:	4b35      	ldr	r3, [pc, #212]	; (80093b8 <scalbn+0xf0>)
 80092e2:	4629      	mov	r1, r5
 80092e4:	ee10 0a10 	vmov	r0, s0
 80092e8:	2200      	movs	r2, #0
 80092ea:	f7f7 f985 	bl	80005f8 <__aeabi_dmul>
 80092ee:	4b33      	ldr	r3, [pc, #204]	; (80093bc <scalbn+0xf4>)
 80092f0:	429e      	cmp	r6, r3
 80092f2:	4604      	mov	r4, r0
 80092f4:	460d      	mov	r5, r1
 80092f6:	da10      	bge.n	800931a <scalbn+0x52>
 80092f8:	a327      	add	r3, pc, #156	; (adr r3, 8009398 <scalbn+0xd0>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	e01f      	b.n	8009340 <scalbn+0x78>
 8009300:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009304:	4291      	cmp	r1, r2
 8009306:	d10c      	bne.n	8009322 <scalbn+0x5a>
 8009308:	ee10 2a10 	vmov	r2, s0
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	f7f6 ffbc 	bl	800028c <__adddf3>
 8009314:	4604      	mov	r4, r0
 8009316:	460d      	mov	r5, r1
 8009318:	e022      	b.n	8009360 <scalbn+0x98>
 800931a:	460b      	mov	r3, r1
 800931c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009320:	3936      	subs	r1, #54	; 0x36
 8009322:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009326:	4296      	cmp	r6, r2
 8009328:	dd0d      	ble.n	8009346 <scalbn+0x7e>
 800932a:	2d00      	cmp	r5, #0
 800932c:	a11c      	add	r1, pc, #112	; (adr r1, 80093a0 <scalbn+0xd8>)
 800932e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009332:	da02      	bge.n	800933a <scalbn+0x72>
 8009334:	a11c      	add	r1, pc, #112	; (adr r1, 80093a8 <scalbn+0xe0>)
 8009336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800933a:	a319      	add	r3, pc, #100	; (adr r3, 80093a0 <scalbn+0xd8>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f7 f95a 	bl	80005f8 <__aeabi_dmul>
 8009344:	e7e6      	b.n	8009314 <scalbn+0x4c>
 8009346:	1872      	adds	r2, r6, r1
 8009348:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800934c:	428a      	cmp	r2, r1
 800934e:	dcec      	bgt.n	800932a <scalbn+0x62>
 8009350:	2a00      	cmp	r2, #0
 8009352:	dd08      	ble.n	8009366 <scalbn+0x9e>
 8009354:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009358:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800935c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009360:	ec45 4b10 	vmov	d0, r4, r5
 8009364:	bd70      	pop	{r4, r5, r6, pc}
 8009366:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800936a:	da08      	bge.n	800937e <scalbn+0xb6>
 800936c:	2d00      	cmp	r5, #0
 800936e:	a10a      	add	r1, pc, #40	; (adr r1, 8009398 <scalbn+0xd0>)
 8009370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009374:	dac0      	bge.n	80092f8 <scalbn+0x30>
 8009376:	a10e      	add	r1, pc, #56	; (adr r1, 80093b0 <scalbn+0xe8>)
 8009378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800937c:	e7bc      	b.n	80092f8 <scalbn+0x30>
 800937e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009382:	3236      	adds	r2, #54	; 0x36
 8009384:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009388:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800938c:	4620      	mov	r0, r4
 800938e:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <scalbn+0xf8>)
 8009390:	2200      	movs	r2, #0
 8009392:	e7d5      	b.n	8009340 <scalbn+0x78>
 8009394:	f3af 8000 	nop.w
 8009398:	c2f8f359 	.word	0xc2f8f359
 800939c:	01a56e1f 	.word	0x01a56e1f
 80093a0:	8800759c 	.word	0x8800759c
 80093a4:	7e37e43c 	.word	0x7e37e43c
 80093a8:	8800759c 	.word	0x8800759c
 80093ac:	fe37e43c 	.word	0xfe37e43c
 80093b0:	c2f8f359 	.word	0xc2f8f359
 80093b4:	81a56e1f 	.word	0x81a56e1f
 80093b8:	43500000 	.word	0x43500000
 80093bc:	ffff3cb0 	.word	0xffff3cb0
 80093c0:	3c900000 	.word	0x3c900000
 80093c4:	00000000 	.word	0x00000000

080093c8 <floor>:
 80093c8:	ec51 0b10 	vmov	r0, r1, d0
 80093cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80093d8:	2e13      	cmp	r6, #19
 80093da:	ee10 5a10 	vmov	r5, s0
 80093de:	ee10 8a10 	vmov	r8, s0
 80093e2:	460c      	mov	r4, r1
 80093e4:	dc31      	bgt.n	800944a <floor+0x82>
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	da14      	bge.n	8009414 <floor+0x4c>
 80093ea:	a333      	add	r3, pc, #204	; (adr r3, 80094b8 <floor+0xf0>)
 80093ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f0:	f7f6 ff4c 	bl	800028c <__adddf3>
 80093f4:	2200      	movs	r2, #0
 80093f6:	2300      	movs	r3, #0
 80093f8:	f7f7 fb8e 	bl	8000b18 <__aeabi_dcmpgt>
 80093fc:	b138      	cbz	r0, 800940e <floor+0x46>
 80093fe:	2c00      	cmp	r4, #0
 8009400:	da53      	bge.n	80094aa <floor+0xe2>
 8009402:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009406:	4325      	orrs	r5, r4
 8009408:	d052      	beq.n	80094b0 <floor+0xe8>
 800940a:	4c2d      	ldr	r4, [pc, #180]	; (80094c0 <floor+0xf8>)
 800940c:	2500      	movs	r5, #0
 800940e:	4621      	mov	r1, r4
 8009410:	4628      	mov	r0, r5
 8009412:	e024      	b.n	800945e <floor+0x96>
 8009414:	4f2b      	ldr	r7, [pc, #172]	; (80094c4 <floor+0xfc>)
 8009416:	4137      	asrs	r7, r6
 8009418:	ea01 0307 	and.w	r3, r1, r7
 800941c:	4303      	orrs	r3, r0
 800941e:	d01e      	beq.n	800945e <floor+0x96>
 8009420:	a325      	add	r3, pc, #148	; (adr r3, 80094b8 <floor+0xf0>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f6 ff31 	bl	800028c <__adddf3>
 800942a:	2200      	movs	r2, #0
 800942c:	2300      	movs	r3, #0
 800942e:	f7f7 fb73 	bl	8000b18 <__aeabi_dcmpgt>
 8009432:	2800      	cmp	r0, #0
 8009434:	d0eb      	beq.n	800940e <floor+0x46>
 8009436:	2c00      	cmp	r4, #0
 8009438:	bfbe      	ittt	lt
 800943a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800943e:	4133      	asrlt	r3, r6
 8009440:	18e4      	addlt	r4, r4, r3
 8009442:	ea24 0407 	bic.w	r4, r4, r7
 8009446:	2500      	movs	r5, #0
 8009448:	e7e1      	b.n	800940e <floor+0x46>
 800944a:	2e33      	cmp	r6, #51	; 0x33
 800944c:	dd0b      	ble.n	8009466 <floor+0x9e>
 800944e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009452:	d104      	bne.n	800945e <floor+0x96>
 8009454:	ee10 2a10 	vmov	r2, s0
 8009458:	460b      	mov	r3, r1
 800945a:	f7f6 ff17 	bl	800028c <__adddf3>
 800945e:	ec41 0b10 	vmov	d0, r0, r1
 8009462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009466:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800946a:	f04f 37ff 	mov.w	r7, #4294967295
 800946e:	40df      	lsrs	r7, r3
 8009470:	4238      	tst	r0, r7
 8009472:	d0f4      	beq.n	800945e <floor+0x96>
 8009474:	a310      	add	r3, pc, #64	; (adr r3, 80094b8 <floor+0xf0>)
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	f7f6 ff07 	bl	800028c <__adddf3>
 800947e:	2200      	movs	r2, #0
 8009480:	2300      	movs	r3, #0
 8009482:	f7f7 fb49 	bl	8000b18 <__aeabi_dcmpgt>
 8009486:	2800      	cmp	r0, #0
 8009488:	d0c1      	beq.n	800940e <floor+0x46>
 800948a:	2c00      	cmp	r4, #0
 800948c:	da0a      	bge.n	80094a4 <floor+0xdc>
 800948e:	2e14      	cmp	r6, #20
 8009490:	d101      	bne.n	8009496 <floor+0xce>
 8009492:	3401      	adds	r4, #1
 8009494:	e006      	b.n	80094a4 <floor+0xdc>
 8009496:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800949a:	2301      	movs	r3, #1
 800949c:	40b3      	lsls	r3, r6
 800949e:	441d      	add	r5, r3
 80094a0:	45a8      	cmp	r8, r5
 80094a2:	d8f6      	bhi.n	8009492 <floor+0xca>
 80094a4:	ea25 0507 	bic.w	r5, r5, r7
 80094a8:	e7b1      	b.n	800940e <floor+0x46>
 80094aa:	2500      	movs	r5, #0
 80094ac:	462c      	mov	r4, r5
 80094ae:	e7ae      	b.n	800940e <floor+0x46>
 80094b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80094b4:	e7ab      	b.n	800940e <floor+0x46>
 80094b6:	bf00      	nop
 80094b8:	8800759c 	.word	0x8800759c
 80094bc:	7e37e43c 	.word	0x7e37e43c
 80094c0:	bff00000 	.word	0xbff00000
 80094c4:	000fffff 	.word	0x000fffff

080094c8 <__cvt>:
 80094c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094cc:	ec55 4b10 	vmov	r4, r5, d0
 80094d0:	2d00      	cmp	r5, #0
 80094d2:	460e      	mov	r6, r1
 80094d4:	4619      	mov	r1, r3
 80094d6:	462b      	mov	r3, r5
 80094d8:	bfbb      	ittet	lt
 80094da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80094de:	461d      	movlt	r5, r3
 80094e0:	2300      	movge	r3, #0
 80094e2:	232d      	movlt	r3, #45	; 0x2d
 80094e4:	700b      	strb	r3, [r1, #0]
 80094e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80094ec:	4691      	mov	r9, r2
 80094ee:	f023 0820 	bic.w	r8, r3, #32
 80094f2:	bfbc      	itt	lt
 80094f4:	4622      	movlt	r2, r4
 80094f6:	4614      	movlt	r4, r2
 80094f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094fc:	d005      	beq.n	800950a <__cvt+0x42>
 80094fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009502:	d100      	bne.n	8009506 <__cvt+0x3e>
 8009504:	3601      	adds	r6, #1
 8009506:	2102      	movs	r1, #2
 8009508:	e000      	b.n	800950c <__cvt+0x44>
 800950a:	2103      	movs	r1, #3
 800950c:	ab03      	add	r3, sp, #12
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	ab02      	add	r3, sp, #8
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	ec45 4b10 	vmov	d0, r4, r5
 8009518:	4653      	mov	r3, sl
 800951a:	4632      	mov	r2, r6
 800951c:	f000 fe54 	bl	800a1c8 <_dtoa_r>
 8009520:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009524:	4607      	mov	r7, r0
 8009526:	d102      	bne.n	800952e <__cvt+0x66>
 8009528:	f019 0f01 	tst.w	r9, #1
 800952c:	d022      	beq.n	8009574 <__cvt+0xac>
 800952e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009532:	eb07 0906 	add.w	r9, r7, r6
 8009536:	d110      	bne.n	800955a <__cvt+0x92>
 8009538:	783b      	ldrb	r3, [r7, #0]
 800953a:	2b30      	cmp	r3, #48	; 0x30
 800953c:	d10a      	bne.n	8009554 <__cvt+0x8c>
 800953e:	2200      	movs	r2, #0
 8009540:	2300      	movs	r3, #0
 8009542:	4620      	mov	r0, r4
 8009544:	4629      	mov	r1, r5
 8009546:	f7f7 fabf 	bl	8000ac8 <__aeabi_dcmpeq>
 800954a:	b918      	cbnz	r0, 8009554 <__cvt+0x8c>
 800954c:	f1c6 0601 	rsb	r6, r6, #1
 8009550:	f8ca 6000 	str.w	r6, [sl]
 8009554:	f8da 3000 	ldr.w	r3, [sl]
 8009558:	4499      	add	r9, r3
 800955a:	2200      	movs	r2, #0
 800955c:	2300      	movs	r3, #0
 800955e:	4620      	mov	r0, r4
 8009560:	4629      	mov	r1, r5
 8009562:	f7f7 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009566:	b108      	cbz	r0, 800956c <__cvt+0xa4>
 8009568:	f8cd 900c 	str.w	r9, [sp, #12]
 800956c:	2230      	movs	r2, #48	; 0x30
 800956e:	9b03      	ldr	r3, [sp, #12]
 8009570:	454b      	cmp	r3, r9
 8009572:	d307      	bcc.n	8009584 <__cvt+0xbc>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009578:	1bdb      	subs	r3, r3, r7
 800957a:	4638      	mov	r0, r7
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	b004      	add	sp, #16
 8009580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009584:	1c59      	adds	r1, r3, #1
 8009586:	9103      	str	r1, [sp, #12]
 8009588:	701a      	strb	r2, [r3, #0]
 800958a:	e7f0      	b.n	800956e <__cvt+0xa6>

0800958c <__exponent>:
 800958c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800958e:	4603      	mov	r3, r0
 8009590:	2900      	cmp	r1, #0
 8009592:	bfb8      	it	lt
 8009594:	4249      	neglt	r1, r1
 8009596:	f803 2b02 	strb.w	r2, [r3], #2
 800959a:	bfb4      	ite	lt
 800959c:	222d      	movlt	r2, #45	; 0x2d
 800959e:	222b      	movge	r2, #43	; 0x2b
 80095a0:	2909      	cmp	r1, #9
 80095a2:	7042      	strb	r2, [r0, #1]
 80095a4:	dd2a      	ble.n	80095fc <__exponent+0x70>
 80095a6:	f10d 0207 	add.w	r2, sp, #7
 80095aa:	4617      	mov	r7, r2
 80095ac:	260a      	movs	r6, #10
 80095ae:	4694      	mov	ip, r2
 80095b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80095b4:	fb06 1415 	mls	r4, r6, r5, r1
 80095b8:	3430      	adds	r4, #48	; 0x30
 80095ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80095be:	460c      	mov	r4, r1
 80095c0:	2c63      	cmp	r4, #99	; 0x63
 80095c2:	f102 32ff 	add.w	r2, r2, #4294967295
 80095c6:	4629      	mov	r1, r5
 80095c8:	dcf1      	bgt.n	80095ae <__exponent+0x22>
 80095ca:	3130      	adds	r1, #48	; 0x30
 80095cc:	f1ac 0402 	sub.w	r4, ip, #2
 80095d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80095d4:	1c41      	adds	r1, r0, #1
 80095d6:	4622      	mov	r2, r4
 80095d8:	42ba      	cmp	r2, r7
 80095da:	d30a      	bcc.n	80095f2 <__exponent+0x66>
 80095dc:	f10d 0209 	add.w	r2, sp, #9
 80095e0:	eba2 020c 	sub.w	r2, r2, ip
 80095e4:	42bc      	cmp	r4, r7
 80095e6:	bf88      	it	hi
 80095e8:	2200      	movhi	r2, #0
 80095ea:	4413      	add	r3, r2
 80095ec:	1a18      	subs	r0, r3, r0
 80095ee:	b003      	add	sp, #12
 80095f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80095f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80095fa:	e7ed      	b.n	80095d8 <__exponent+0x4c>
 80095fc:	2330      	movs	r3, #48	; 0x30
 80095fe:	3130      	adds	r1, #48	; 0x30
 8009600:	7083      	strb	r3, [r0, #2]
 8009602:	70c1      	strb	r1, [r0, #3]
 8009604:	1d03      	adds	r3, r0, #4
 8009606:	e7f1      	b.n	80095ec <__exponent+0x60>

08009608 <_printf_float>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	ed2d 8b02 	vpush	{d8}
 8009610:	b08d      	sub	sp, #52	; 0x34
 8009612:	460c      	mov	r4, r1
 8009614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009618:	4616      	mov	r6, r2
 800961a:	461f      	mov	r7, r3
 800961c:	4605      	mov	r5, r0
 800961e:	f000 fcd5 	bl	8009fcc <_localeconv_r>
 8009622:	f8d0 a000 	ldr.w	sl, [r0]
 8009626:	4650      	mov	r0, sl
 8009628:	f7f6 fe22 	bl	8000270 <strlen>
 800962c:	2300      	movs	r3, #0
 800962e:	930a      	str	r3, [sp, #40]	; 0x28
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	9305      	str	r3, [sp, #20]
 8009634:	f8d8 3000 	ldr.w	r3, [r8]
 8009638:	f894 b018 	ldrb.w	fp, [r4, #24]
 800963c:	3307      	adds	r3, #7
 800963e:	f023 0307 	bic.w	r3, r3, #7
 8009642:	f103 0208 	add.w	r2, r3, #8
 8009646:	f8c8 2000 	str.w	r2, [r8]
 800964a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800964e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009652:	9307      	str	r3, [sp, #28]
 8009654:	f8cd 8018 	str.w	r8, [sp, #24]
 8009658:	ee08 0a10 	vmov	s16, r0
 800965c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009664:	4b9e      	ldr	r3, [pc, #632]	; (80098e0 <_printf_float+0x2d8>)
 8009666:	f04f 32ff 	mov.w	r2, #4294967295
 800966a:	f7f7 fa5f 	bl	8000b2c <__aeabi_dcmpun>
 800966e:	bb88      	cbnz	r0, 80096d4 <_printf_float+0xcc>
 8009670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009674:	4b9a      	ldr	r3, [pc, #616]	; (80098e0 <_printf_float+0x2d8>)
 8009676:	f04f 32ff 	mov.w	r2, #4294967295
 800967a:	f7f7 fa39 	bl	8000af0 <__aeabi_dcmple>
 800967e:	bb48      	cbnz	r0, 80096d4 <_printf_float+0xcc>
 8009680:	2200      	movs	r2, #0
 8009682:	2300      	movs	r3, #0
 8009684:	4640      	mov	r0, r8
 8009686:	4649      	mov	r1, r9
 8009688:	f7f7 fa28 	bl	8000adc <__aeabi_dcmplt>
 800968c:	b110      	cbz	r0, 8009694 <_printf_float+0x8c>
 800968e:	232d      	movs	r3, #45	; 0x2d
 8009690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009694:	4a93      	ldr	r2, [pc, #588]	; (80098e4 <_printf_float+0x2dc>)
 8009696:	4b94      	ldr	r3, [pc, #592]	; (80098e8 <_printf_float+0x2e0>)
 8009698:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800969c:	bf94      	ite	ls
 800969e:	4690      	movls	r8, r2
 80096a0:	4698      	movhi	r8, r3
 80096a2:	2303      	movs	r3, #3
 80096a4:	6123      	str	r3, [r4, #16]
 80096a6:	9b05      	ldr	r3, [sp, #20]
 80096a8:	f023 0304 	bic.w	r3, r3, #4
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	f04f 0900 	mov.w	r9, #0
 80096b2:	9700      	str	r7, [sp, #0]
 80096b4:	4633      	mov	r3, r6
 80096b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80096b8:	4621      	mov	r1, r4
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 f9da 	bl	8009a74 <_printf_common>
 80096c0:	3001      	adds	r0, #1
 80096c2:	f040 8090 	bne.w	80097e6 <_printf_float+0x1de>
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ca:	b00d      	add	sp, #52	; 0x34
 80096cc:	ecbd 8b02 	vpop	{d8}
 80096d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d4:	4642      	mov	r2, r8
 80096d6:	464b      	mov	r3, r9
 80096d8:	4640      	mov	r0, r8
 80096da:	4649      	mov	r1, r9
 80096dc:	f7f7 fa26 	bl	8000b2c <__aeabi_dcmpun>
 80096e0:	b140      	cbz	r0, 80096f4 <_printf_float+0xec>
 80096e2:	464b      	mov	r3, r9
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	bfbc      	itt	lt
 80096e8:	232d      	movlt	r3, #45	; 0x2d
 80096ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096ee:	4a7f      	ldr	r2, [pc, #508]	; (80098ec <_printf_float+0x2e4>)
 80096f0:	4b7f      	ldr	r3, [pc, #508]	; (80098f0 <_printf_float+0x2e8>)
 80096f2:	e7d1      	b.n	8009698 <_printf_float+0x90>
 80096f4:	6863      	ldr	r3, [r4, #4]
 80096f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80096fa:	9206      	str	r2, [sp, #24]
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	d13f      	bne.n	8009780 <_printf_float+0x178>
 8009700:	2306      	movs	r3, #6
 8009702:	6063      	str	r3, [r4, #4]
 8009704:	9b05      	ldr	r3, [sp, #20]
 8009706:	6861      	ldr	r1, [r4, #4]
 8009708:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800970c:	2300      	movs	r3, #0
 800970e:	9303      	str	r3, [sp, #12]
 8009710:	ab0a      	add	r3, sp, #40	; 0x28
 8009712:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009716:	ab09      	add	r3, sp, #36	; 0x24
 8009718:	ec49 8b10 	vmov	d0, r8, r9
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	6022      	str	r2, [r4, #0]
 8009720:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009724:	4628      	mov	r0, r5
 8009726:	f7ff fecf 	bl	80094c8 <__cvt>
 800972a:	9b06      	ldr	r3, [sp, #24]
 800972c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800972e:	2b47      	cmp	r3, #71	; 0x47
 8009730:	4680      	mov	r8, r0
 8009732:	d108      	bne.n	8009746 <_printf_float+0x13e>
 8009734:	1cc8      	adds	r0, r1, #3
 8009736:	db02      	blt.n	800973e <_printf_float+0x136>
 8009738:	6863      	ldr	r3, [r4, #4]
 800973a:	4299      	cmp	r1, r3
 800973c:	dd41      	ble.n	80097c2 <_printf_float+0x1ba>
 800973e:	f1ab 0302 	sub.w	r3, fp, #2
 8009742:	fa5f fb83 	uxtb.w	fp, r3
 8009746:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800974a:	d820      	bhi.n	800978e <_printf_float+0x186>
 800974c:	3901      	subs	r1, #1
 800974e:	465a      	mov	r2, fp
 8009750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009754:	9109      	str	r1, [sp, #36]	; 0x24
 8009756:	f7ff ff19 	bl	800958c <__exponent>
 800975a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800975c:	1813      	adds	r3, r2, r0
 800975e:	2a01      	cmp	r2, #1
 8009760:	4681      	mov	r9, r0
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	dc02      	bgt.n	800976c <_printf_float+0x164>
 8009766:	6822      	ldr	r2, [r4, #0]
 8009768:	07d2      	lsls	r2, r2, #31
 800976a:	d501      	bpl.n	8009770 <_printf_float+0x168>
 800976c:	3301      	adds	r3, #1
 800976e:	6123      	str	r3, [r4, #16]
 8009770:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009774:	2b00      	cmp	r3, #0
 8009776:	d09c      	beq.n	80096b2 <_printf_float+0xaa>
 8009778:	232d      	movs	r3, #45	; 0x2d
 800977a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800977e:	e798      	b.n	80096b2 <_printf_float+0xaa>
 8009780:	9a06      	ldr	r2, [sp, #24]
 8009782:	2a47      	cmp	r2, #71	; 0x47
 8009784:	d1be      	bne.n	8009704 <_printf_float+0xfc>
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1bc      	bne.n	8009704 <_printf_float+0xfc>
 800978a:	2301      	movs	r3, #1
 800978c:	e7b9      	b.n	8009702 <_printf_float+0xfa>
 800978e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009792:	d118      	bne.n	80097c6 <_printf_float+0x1be>
 8009794:	2900      	cmp	r1, #0
 8009796:	6863      	ldr	r3, [r4, #4]
 8009798:	dd0b      	ble.n	80097b2 <_printf_float+0x1aa>
 800979a:	6121      	str	r1, [r4, #16]
 800979c:	b913      	cbnz	r3, 80097a4 <_printf_float+0x19c>
 800979e:	6822      	ldr	r2, [r4, #0]
 80097a0:	07d0      	lsls	r0, r2, #31
 80097a2:	d502      	bpl.n	80097aa <_printf_float+0x1a2>
 80097a4:	3301      	adds	r3, #1
 80097a6:	440b      	add	r3, r1
 80097a8:	6123      	str	r3, [r4, #16]
 80097aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80097ac:	f04f 0900 	mov.w	r9, #0
 80097b0:	e7de      	b.n	8009770 <_printf_float+0x168>
 80097b2:	b913      	cbnz	r3, 80097ba <_printf_float+0x1b2>
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	07d2      	lsls	r2, r2, #31
 80097b8:	d501      	bpl.n	80097be <_printf_float+0x1b6>
 80097ba:	3302      	adds	r3, #2
 80097bc:	e7f4      	b.n	80097a8 <_printf_float+0x1a0>
 80097be:	2301      	movs	r3, #1
 80097c0:	e7f2      	b.n	80097a8 <_printf_float+0x1a0>
 80097c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c8:	4299      	cmp	r1, r3
 80097ca:	db05      	blt.n	80097d8 <_printf_float+0x1d0>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	6121      	str	r1, [r4, #16]
 80097d0:	07d8      	lsls	r0, r3, #31
 80097d2:	d5ea      	bpl.n	80097aa <_printf_float+0x1a2>
 80097d4:	1c4b      	adds	r3, r1, #1
 80097d6:	e7e7      	b.n	80097a8 <_printf_float+0x1a0>
 80097d8:	2900      	cmp	r1, #0
 80097da:	bfd4      	ite	le
 80097dc:	f1c1 0202 	rsble	r2, r1, #2
 80097e0:	2201      	movgt	r2, #1
 80097e2:	4413      	add	r3, r2
 80097e4:	e7e0      	b.n	80097a8 <_printf_float+0x1a0>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	055a      	lsls	r2, r3, #21
 80097ea:	d407      	bmi.n	80097fc <_printf_float+0x1f4>
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	4642      	mov	r2, r8
 80097f0:	4631      	mov	r1, r6
 80097f2:	4628      	mov	r0, r5
 80097f4:	47b8      	blx	r7
 80097f6:	3001      	adds	r0, #1
 80097f8:	d12c      	bne.n	8009854 <_printf_float+0x24c>
 80097fa:	e764      	b.n	80096c6 <_printf_float+0xbe>
 80097fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009800:	f240 80e0 	bls.w	80099c4 <_printf_float+0x3bc>
 8009804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009808:	2200      	movs	r2, #0
 800980a:	2300      	movs	r3, #0
 800980c:	f7f7 f95c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009810:	2800      	cmp	r0, #0
 8009812:	d034      	beq.n	800987e <_printf_float+0x276>
 8009814:	4a37      	ldr	r2, [pc, #220]	; (80098f4 <_printf_float+0x2ec>)
 8009816:	2301      	movs	r3, #1
 8009818:	4631      	mov	r1, r6
 800981a:	4628      	mov	r0, r5
 800981c:	47b8      	blx	r7
 800981e:	3001      	adds	r0, #1
 8009820:	f43f af51 	beq.w	80096c6 <_printf_float+0xbe>
 8009824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009828:	429a      	cmp	r2, r3
 800982a:	db02      	blt.n	8009832 <_printf_float+0x22a>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	07d8      	lsls	r0, r3, #31
 8009830:	d510      	bpl.n	8009854 <_printf_float+0x24c>
 8009832:	ee18 3a10 	vmov	r3, s16
 8009836:	4652      	mov	r2, sl
 8009838:	4631      	mov	r1, r6
 800983a:	4628      	mov	r0, r5
 800983c:	47b8      	blx	r7
 800983e:	3001      	adds	r0, #1
 8009840:	f43f af41 	beq.w	80096c6 <_printf_float+0xbe>
 8009844:	f04f 0800 	mov.w	r8, #0
 8009848:	f104 091a 	add.w	r9, r4, #26
 800984c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800984e:	3b01      	subs	r3, #1
 8009850:	4543      	cmp	r3, r8
 8009852:	dc09      	bgt.n	8009868 <_printf_float+0x260>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	079b      	lsls	r3, r3, #30
 8009858:	f100 8107 	bmi.w	8009a6a <_printf_float+0x462>
 800985c:	68e0      	ldr	r0, [r4, #12]
 800985e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009860:	4298      	cmp	r0, r3
 8009862:	bfb8      	it	lt
 8009864:	4618      	movlt	r0, r3
 8009866:	e730      	b.n	80096ca <_printf_float+0xc2>
 8009868:	2301      	movs	r3, #1
 800986a:	464a      	mov	r2, r9
 800986c:	4631      	mov	r1, r6
 800986e:	4628      	mov	r0, r5
 8009870:	47b8      	blx	r7
 8009872:	3001      	adds	r0, #1
 8009874:	f43f af27 	beq.w	80096c6 <_printf_float+0xbe>
 8009878:	f108 0801 	add.w	r8, r8, #1
 800987c:	e7e6      	b.n	800984c <_printf_float+0x244>
 800987e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	dc39      	bgt.n	80098f8 <_printf_float+0x2f0>
 8009884:	4a1b      	ldr	r2, [pc, #108]	; (80098f4 <_printf_float+0x2ec>)
 8009886:	2301      	movs	r3, #1
 8009888:	4631      	mov	r1, r6
 800988a:	4628      	mov	r0, r5
 800988c:	47b8      	blx	r7
 800988e:	3001      	adds	r0, #1
 8009890:	f43f af19 	beq.w	80096c6 <_printf_float+0xbe>
 8009894:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009898:	4313      	orrs	r3, r2
 800989a:	d102      	bne.n	80098a2 <_printf_float+0x29a>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	07d9      	lsls	r1, r3, #31
 80098a0:	d5d8      	bpl.n	8009854 <_printf_float+0x24c>
 80098a2:	ee18 3a10 	vmov	r3, s16
 80098a6:	4652      	mov	r2, sl
 80098a8:	4631      	mov	r1, r6
 80098aa:	4628      	mov	r0, r5
 80098ac:	47b8      	blx	r7
 80098ae:	3001      	adds	r0, #1
 80098b0:	f43f af09 	beq.w	80096c6 <_printf_float+0xbe>
 80098b4:	f04f 0900 	mov.w	r9, #0
 80098b8:	f104 0a1a 	add.w	sl, r4, #26
 80098bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098be:	425b      	negs	r3, r3
 80098c0:	454b      	cmp	r3, r9
 80098c2:	dc01      	bgt.n	80098c8 <_printf_float+0x2c0>
 80098c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c6:	e792      	b.n	80097ee <_printf_float+0x1e6>
 80098c8:	2301      	movs	r3, #1
 80098ca:	4652      	mov	r2, sl
 80098cc:	4631      	mov	r1, r6
 80098ce:	4628      	mov	r0, r5
 80098d0:	47b8      	blx	r7
 80098d2:	3001      	adds	r0, #1
 80098d4:	f43f aef7 	beq.w	80096c6 <_printf_float+0xbe>
 80098d8:	f109 0901 	add.w	r9, r9, #1
 80098dc:	e7ee      	b.n	80098bc <_printf_float+0x2b4>
 80098de:	bf00      	nop
 80098e0:	7fefffff 	.word	0x7fefffff
 80098e4:	0800c888 	.word	0x0800c888
 80098e8:	0800c88c 	.word	0x0800c88c
 80098ec:	0800c890 	.word	0x0800c890
 80098f0:	0800c894 	.word	0x0800c894
 80098f4:	0800c898 	.word	0x0800c898
 80098f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098fc:	429a      	cmp	r2, r3
 80098fe:	bfa8      	it	ge
 8009900:	461a      	movge	r2, r3
 8009902:	2a00      	cmp	r2, #0
 8009904:	4691      	mov	r9, r2
 8009906:	dc37      	bgt.n	8009978 <_printf_float+0x370>
 8009908:	f04f 0b00 	mov.w	fp, #0
 800990c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009910:	f104 021a 	add.w	r2, r4, #26
 8009914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009916:	9305      	str	r3, [sp, #20]
 8009918:	eba3 0309 	sub.w	r3, r3, r9
 800991c:	455b      	cmp	r3, fp
 800991e:	dc33      	bgt.n	8009988 <_printf_float+0x380>
 8009920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009924:	429a      	cmp	r2, r3
 8009926:	db3b      	blt.n	80099a0 <_printf_float+0x398>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	07da      	lsls	r2, r3, #31
 800992c:	d438      	bmi.n	80099a0 <_printf_float+0x398>
 800992e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009932:	eba2 0903 	sub.w	r9, r2, r3
 8009936:	9b05      	ldr	r3, [sp, #20]
 8009938:	1ad2      	subs	r2, r2, r3
 800993a:	4591      	cmp	r9, r2
 800993c:	bfa8      	it	ge
 800993e:	4691      	movge	r9, r2
 8009940:	f1b9 0f00 	cmp.w	r9, #0
 8009944:	dc35      	bgt.n	80099b2 <_printf_float+0x3aa>
 8009946:	f04f 0800 	mov.w	r8, #0
 800994a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800994e:	f104 0a1a 	add.w	sl, r4, #26
 8009952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	eba3 0309 	sub.w	r3, r3, r9
 800995c:	4543      	cmp	r3, r8
 800995e:	f77f af79 	ble.w	8009854 <_printf_float+0x24c>
 8009962:	2301      	movs	r3, #1
 8009964:	4652      	mov	r2, sl
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	f43f aeaa 	beq.w	80096c6 <_printf_float+0xbe>
 8009972:	f108 0801 	add.w	r8, r8, #1
 8009976:	e7ec      	b.n	8009952 <_printf_float+0x34a>
 8009978:	4613      	mov	r3, r2
 800997a:	4631      	mov	r1, r6
 800997c:	4642      	mov	r2, r8
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	d1c0      	bne.n	8009908 <_printf_float+0x300>
 8009986:	e69e      	b.n	80096c6 <_printf_float+0xbe>
 8009988:	2301      	movs	r3, #1
 800998a:	4631      	mov	r1, r6
 800998c:	4628      	mov	r0, r5
 800998e:	9205      	str	r2, [sp, #20]
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f ae97 	beq.w	80096c6 <_printf_float+0xbe>
 8009998:	9a05      	ldr	r2, [sp, #20]
 800999a:	f10b 0b01 	add.w	fp, fp, #1
 800999e:	e7b9      	b.n	8009914 <_printf_float+0x30c>
 80099a0:	ee18 3a10 	vmov	r3, s16
 80099a4:	4652      	mov	r2, sl
 80099a6:	4631      	mov	r1, r6
 80099a8:	4628      	mov	r0, r5
 80099aa:	47b8      	blx	r7
 80099ac:	3001      	adds	r0, #1
 80099ae:	d1be      	bne.n	800992e <_printf_float+0x326>
 80099b0:	e689      	b.n	80096c6 <_printf_float+0xbe>
 80099b2:	9a05      	ldr	r2, [sp, #20]
 80099b4:	464b      	mov	r3, r9
 80099b6:	4442      	add	r2, r8
 80099b8:	4631      	mov	r1, r6
 80099ba:	4628      	mov	r0, r5
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	d1c1      	bne.n	8009946 <_printf_float+0x33e>
 80099c2:	e680      	b.n	80096c6 <_printf_float+0xbe>
 80099c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099c6:	2a01      	cmp	r2, #1
 80099c8:	dc01      	bgt.n	80099ce <_printf_float+0x3c6>
 80099ca:	07db      	lsls	r3, r3, #31
 80099cc:	d53a      	bpl.n	8009a44 <_printf_float+0x43c>
 80099ce:	2301      	movs	r3, #1
 80099d0:	4642      	mov	r2, r8
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f ae74 	beq.w	80096c6 <_printf_float+0xbe>
 80099de:	ee18 3a10 	vmov	r3, s16
 80099e2:	4652      	mov	r2, sl
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	f43f ae6b 	beq.w	80096c6 <_printf_float+0xbe>
 80099f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099f4:	2200      	movs	r2, #0
 80099f6:	2300      	movs	r3, #0
 80099f8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80099fc:	f7f7 f864 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a00:	b9d8      	cbnz	r0, 8009a3a <_printf_float+0x432>
 8009a02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009a06:	f108 0201 	add.w	r2, r8, #1
 8009a0a:	4631      	mov	r1, r6
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b8      	blx	r7
 8009a10:	3001      	adds	r0, #1
 8009a12:	d10e      	bne.n	8009a32 <_printf_float+0x42a>
 8009a14:	e657      	b.n	80096c6 <_printf_float+0xbe>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4652      	mov	r2, sl
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b8      	blx	r7
 8009a20:	3001      	adds	r0, #1
 8009a22:	f43f ae50 	beq.w	80096c6 <_printf_float+0xbe>
 8009a26:	f108 0801 	add.w	r8, r8, #1
 8009a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2c:	3b01      	subs	r3, #1
 8009a2e:	4543      	cmp	r3, r8
 8009a30:	dcf1      	bgt.n	8009a16 <_printf_float+0x40e>
 8009a32:	464b      	mov	r3, r9
 8009a34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a38:	e6da      	b.n	80097f0 <_printf_float+0x1e8>
 8009a3a:	f04f 0800 	mov.w	r8, #0
 8009a3e:	f104 0a1a 	add.w	sl, r4, #26
 8009a42:	e7f2      	b.n	8009a2a <_printf_float+0x422>
 8009a44:	2301      	movs	r3, #1
 8009a46:	4642      	mov	r2, r8
 8009a48:	e7df      	b.n	8009a0a <_printf_float+0x402>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	464a      	mov	r2, r9
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4628      	mov	r0, r5
 8009a52:	47b8      	blx	r7
 8009a54:	3001      	adds	r0, #1
 8009a56:	f43f ae36 	beq.w	80096c6 <_printf_float+0xbe>
 8009a5a:	f108 0801 	add.w	r8, r8, #1
 8009a5e:	68e3      	ldr	r3, [r4, #12]
 8009a60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a62:	1a5b      	subs	r3, r3, r1
 8009a64:	4543      	cmp	r3, r8
 8009a66:	dcf0      	bgt.n	8009a4a <_printf_float+0x442>
 8009a68:	e6f8      	b.n	800985c <_printf_float+0x254>
 8009a6a:	f04f 0800 	mov.w	r8, #0
 8009a6e:	f104 0919 	add.w	r9, r4, #25
 8009a72:	e7f4      	b.n	8009a5e <_printf_float+0x456>

08009a74 <_printf_common>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	4616      	mov	r6, r2
 8009a7a:	4699      	mov	r9, r3
 8009a7c:	688a      	ldr	r2, [r1, #8]
 8009a7e:	690b      	ldr	r3, [r1, #16]
 8009a80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a84:	4293      	cmp	r3, r2
 8009a86:	bfb8      	it	lt
 8009a88:	4613      	movlt	r3, r2
 8009a8a:	6033      	str	r3, [r6, #0]
 8009a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a90:	4607      	mov	r7, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b10a      	cbz	r2, 8009a9a <_printf_common+0x26>
 8009a96:	3301      	adds	r3, #1
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	0699      	lsls	r1, r3, #26
 8009a9e:	bf42      	ittt	mi
 8009aa0:	6833      	ldrmi	r3, [r6, #0]
 8009aa2:	3302      	addmi	r3, #2
 8009aa4:	6033      	strmi	r3, [r6, #0]
 8009aa6:	6825      	ldr	r5, [r4, #0]
 8009aa8:	f015 0506 	ands.w	r5, r5, #6
 8009aac:	d106      	bne.n	8009abc <_printf_common+0x48>
 8009aae:	f104 0a19 	add.w	sl, r4, #25
 8009ab2:	68e3      	ldr	r3, [r4, #12]
 8009ab4:	6832      	ldr	r2, [r6, #0]
 8009ab6:	1a9b      	subs	r3, r3, r2
 8009ab8:	42ab      	cmp	r3, r5
 8009aba:	dc26      	bgt.n	8009b0a <_printf_common+0x96>
 8009abc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ac0:	1e13      	subs	r3, r2, #0
 8009ac2:	6822      	ldr	r2, [r4, #0]
 8009ac4:	bf18      	it	ne
 8009ac6:	2301      	movne	r3, #1
 8009ac8:	0692      	lsls	r2, r2, #26
 8009aca:	d42b      	bmi.n	8009b24 <_printf_common+0xb0>
 8009acc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ad0:	4649      	mov	r1, r9
 8009ad2:	4638      	mov	r0, r7
 8009ad4:	47c0      	blx	r8
 8009ad6:	3001      	adds	r0, #1
 8009ad8:	d01e      	beq.n	8009b18 <_printf_common+0xa4>
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	6922      	ldr	r2, [r4, #16]
 8009ade:	f003 0306 	and.w	r3, r3, #6
 8009ae2:	2b04      	cmp	r3, #4
 8009ae4:	bf02      	ittt	eq
 8009ae6:	68e5      	ldreq	r5, [r4, #12]
 8009ae8:	6833      	ldreq	r3, [r6, #0]
 8009aea:	1aed      	subeq	r5, r5, r3
 8009aec:	68a3      	ldr	r3, [r4, #8]
 8009aee:	bf0c      	ite	eq
 8009af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009af4:	2500      	movne	r5, #0
 8009af6:	4293      	cmp	r3, r2
 8009af8:	bfc4      	itt	gt
 8009afa:	1a9b      	subgt	r3, r3, r2
 8009afc:	18ed      	addgt	r5, r5, r3
 8009afe:	2600      	movs	r6, #0
 8009b00:	341a      	adds	r4, #26
 8009b02:	42b5      	cmp	r5, r6
 8009b04:	d11a      	bne.n	8009b3c <_printf_common+0xc8>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e008      	b.n	8009b1c <_printf_common+0xa8>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	4649      	mov	r1, r9
 8009b10:	4638      	mov	r0, r7
 8009b12:	47c0      	blx	r8
 8009b14:	3001      	adds	r0, #1
 8009b16:	d103      	bne.n	8009b20 <_printf_common+0xac>
 8009b18:	f04f 30ff 	mov.w	r0, #4294967295
 8009b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b20:	3501      	adds	r5, #1
 8009b22:	e7c6      	b.n	8009ab2 <_printf_common+0x3e>
 8009b24:	18e1      	adds	r1, r4, r3
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	2030      	movs	r0, #48	; 0x30
 8009b2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b2e:	4422      	add	r2, r4
 8009b30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b38:	3302      	adds	r3, #2
 8009b3a:	e7c7      	b.n	8009acc <_printf_common+0x58>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	4622      	mov	r2, r4
 8009b40:	4649      	mov	r1, r9
 8009b42:	4638      	mov	r0, r7
 8009b44:	47c0      	blx	r8
 8009b46:	3001      	adds	r0, #1
 8009b48:	d0e6      	beq.n	8009b18 <_printf_common+0xa4>
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7d9      	b.n	8009b02 <_printf_common+0x8e>
	...

08009b50 <_printf_i>:
 8009b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b54:	7e0f      	ldrb	r7, [r1, #24]
 8009b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b58:	2f78      	cmp	r7, #120	; 0x78
 8009b5a:	4691      	mov	r9, r2
 8009b5c:	4680      	mov	r8, r0
 8009b5e:	460c      	mov	r4, r1
 8009b60:	469a      	mov	sl, r3
 8009b62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b66:	d807      	bhi.n	8009b78 <_printf_i+0x28>
 8009b68:	2f62      	cmp	r7, #98	; 0x62
 8009b6a:	d80a      	bhi.n	8009b82 <_printf_i+0x32>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	f000 80d4 	beq.w	8009d1a <_printf_i+0x1ca>
 8009b72:	2f58      	cmp	r7, #88	; 0x58
 8009b74:	f000 80c0 	beq.w	8009cf8 <_printf_i+0x1a8>
 8009b78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b80:	e03a      	b.n	8009bf8 <_printf_i+0xa8>
 8009b82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b86:	2b15      	cmp	r3, #21
 8009b88:	d8f6      	bhi.n	8009b78 <_printf_i+0x28>
 8009b8a:	a101      	add	r1, pc, #4	; (adr r1, 8009b90 <_printf_i+0x40>)
 8009b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b90:	08009be9 	.word	0x08009be9
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009b79 	.word	0x08009b79
 8009b9c:	08009b79 	.word	0x08009b79
 8009ba0:	08009b79 	.word	0x08009b79
 8009ba4:	08009b79 	.word	0x08009b79
 8009ba8:	08009bfd 	.word	0x08009bfd
 8009bac:	08009b79 	.word	0x08009b79
 8009bb0:	08009b79 	.word	0x08009b79
 8009bb4:	08009b79 	.word	0x08009b79
 8009bb8:	08009b79 	.word	0x08009b79
 8009bbc:	08009d01 	.word	0x08009d01
 8009bc0:	08009c29 	.word	0x08009c29
 8009bc4:	08009cbb 	.word	0x08009cbb
 8009bc8:	08009b79 	.word	0x08009b79
 8009bcc:	08009b79 	.word	0x08009b79
 8009bd0:	08009d23 	.word	0x08009d23
 8009bd4:	08009b79 	.word	0x08009b79
 8009bd8:	08009c29 	.word	0x08009c29
 8009bdc:	08009b79 	.word	0x08009b79
 8009be0:	08009b79 	.word	0x08009b79
 8009be4:	08009cc3 	.word	0x08009cc3
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	1d1a      	adds	r2, r3, #4
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	602a      	str	r2, [r5, #0]
 8009bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e09f      	b.n	8009d3c <_printf_i+0x1ec>
 8009bfc:	6820      	ldr	r0, [r4, #0]
 8009bfe:	682b      	ldr	r3, [r5, #0]
 8009c00:	0607      	lsls	r7, r0, #24
 8009c02:	f103 0104 	add.w	r1, r3, #4
 8009c06:	6029      	str	r1, [r5, #0]
 8009c08:	d501      	bpl.n	8009c0e <_printf_i+0xbe>
 8009c0a:	681e      	ldr	r6, [r3, #0]
 8009c0c:	e003      	b.n	8009c16 <_printf_i+0xc6>
 8009c0e:	0646      	lsls	r6, r0, #25
 8009c10:	d5fb      	bpl.n	8009c0a <_printf_i+0xba>
 8009c12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009c16:	2e00      	cmp	r6, #0
 8009c18:	da03      	bge.n	8009c22 <_printf_i+0xd2>
 8009c1a:	232d      	movs	r3, #45	; 0x2d
 8009c1c:	4276      	negs	r6, r6
 8009c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c22:	485a      	ldr	r0, [pc, #360]	; (8009d8c <_printf_i+0x23c>)
 8009c24:	230a      	movs	r3, #10
 8009c26:	e012      	b.n	8009c4e <_printf_i+0xfe>
 8009c28:	682b      	ldr	r3, [r5, #0]
 8009c2a:	6820      	ldr	r0, [r4, #0]
 8009c2c:	1d19      	adds	r1, r3, #4
 8009c2e:	6029      	str	r1, [r5, #0]
 8009c30:	0605      	lsls	r5, r0, #24
 8009c32:	d501      	bpl.n	8009c38 <_printf_i+0xe8>
 8009c34:	681e      	ldr	r6, [r3, #0]
 8009c36:	e002      	b.n	8009c3e <_printf_i+0xee>
 8009c38:	0641      	lsls	r1, r0, #25
 8009c3a:	d5fb      	bpl.n	8009c34 <_printf_i+0xe4>
 8009c3c:	881e      	ldrh	r6, [r3, #0]
 8009c3e:	4853      	ldr	r0, [pc, #332]	; (8009d8c <_printf_i+0x23c>)
 8009c40:	2f6f      	cmp	r7, #111	; 0x6f
 8009c42:	bf0c      	ite	eq
 8009c44:	2308      	moveq	r3, #8
 8009c46:	230a      	movne	r3, #10
 8009c48:	2100      	movs	r1, #0
 8009c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c4e:	6865      	ldr	r5, [r4, #4]
 8009c50:	60a5      	str	r5, [r4, #8]
 8009c52:	2d00      	cmp	r5, #0
 8009c54:	bfa2      	ittt	ge
 8009c56:	6821      	ldrge	r1, [r4, #0]
 8009c58:	f021 0104 	bicge.w	r1, r1, #4
 8009c5c:	6021      	strge	r1, [r4, #0]
 8009c5e:	b90e      	cbnz	r6, 8009c64 <_printf_i+0x114>
 8009c60:	2d00      	cmp	r5, #0
 8009c62:	d04b      	beq.n	8009cfc <_printf_i+0x1ac>
 8009c64:	4615      	mov	r5, r2
 8009c66:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c6a:	fb03 6711 	mls	r7, r3, r1, r6
 8009c6e:	5dc7      	ldrb	r7, [r0, r7]
 8009c70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c74:	4637      	mov	r7, r6
 8009c76:	42bb      	cmp	r3, r7
 8009c78:	460e      	mov	r6, r1
 8009c7a:	d9f4      	bls.n	8009c66 <_printf_i+0x116>
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d10b      	bne.n	8009c98 <_printf_i+0x148>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	07de      	lsls	r6, r3, #31
 8009c84:	d508      	bpl.n	8009c98 <_printf_i+0x148>
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	6861      	ldr	r1, [r4, #4]
 8009c8a:	4299      	cmp	r1, r3
 8009c8c:	bfde      	ittt	le
 8009c8e:	2330      	movle	r3, #48	; 0x30
 8009c90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c98:	1b52      	subs	r2, r2, r5
 8009c9a:	6122      	str	r2, [r4, #16]
 8009c9c:	f8cd a000 	str.w	sl, [sp]
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	aa03      	add	r2, sp, #12
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	f7ff fee4 	bl	8009a74 <_printf_common>
 8009cac:	3001      	adds	r0, #1
 8009cae:	d14a      	bne.n	8009d46 <_printf_i+0x1f6>
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb4:	b004      	add	sp, #16
 8009cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	f043 0320 	orr.w	r3, r3, #32
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	4833      	ldr	r0, [pc, #204]	; (8009d90 <_printf_i+0x240>)
 8009cc4:	2778      	movs	r7, #120	; 0x78
 8009cc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	6829      	ldr	r1, [r5, #0]
 8009cce:	061f      	lsls	r7, r3, #24
 8009cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cd4:	d402      	bmi.n	8009cdc <_printf_i+0x18c>
 8009cd6:	065f      	lsls	r7, r3, #25
 8009cd8:	bf48      	it	mi
 8009cda:	b2b6      	uxthmi	r6, r6
 8009cdc:	07df      	lsls	r7, r3, #31
 8009cde:	bf48      	it	mi
 8009ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8009ce4:	6029      	str	r1, [r5, #0]
 8009ce6:	bf48      	it	mi
 8009ce8:	6023      	strmi	r3, [r4, #0]
 8009cea:	b91e      	cbnz	r6, 8009cf4 <_printf_i+0x1a4>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	f023 0320 	bic.w	r3, r3, #32
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	2310      	movs	r3, #16
 8009cf6:	e7a7      	b.n	8009c48 <_printf_i+0xf8>
 8009cf8:	4824      	ldr	r0, [pc, #144]	; (8009d8c <_printf_i+0x23c>)
 8009cfa:	e7e4      	b.n	8009cc6 <_printf_i+0x176>
 8009cfc:	4615      	mov	r5, r2
 8009cfe:	e7bd      	b.n	8009c7c <_printf_i+0x12c>
 8009d00:	682b      	ldr	r3, [r5, #0]
 8009d02:	6826      	ldr	r6, [r4, #0]
 8009d04:	6961      	ldr	r1, [r4, #20]
 8009d06:	1d18      	adds	r0, r3, #4
 8009d08:	6028      	str	r0, [r5, #0]
 8009d0a:	0635      	lsls	r5, r6, #24
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	d501      	bpl.n	8009d14 <_printf_i+0x1c4>
 8009d10:	6019      	str	r1, [r3, #0]
 8009d12:	e002      	b.n	8009d1a <_printf_i+0x1ca>
 8009d14:	0670      	lsls	r0, r6, #25
 8009d16:	d5fb      	bpl.n	8009d10 <_printf_i+0x1c0>
 8009d18:	8019      	strh	r1, [r3, #0]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	6123      	str	r3, [r4, #16]
 8009d1e:	4615      	mov	r5, r2
 8009d20:	e7bc      	b.n	8009c9c <_printf_i+0x14c>
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	1d1a      	adds	r2, r3, #4
 8009d26:	602a      	str	r2, [r5, #0]
 8009d28:	681d      	ldr	r5, [r3, #0]
 8009d2a:	6862      	ldr	r2, [r4, #4]
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	4628      	mov	r0, r5
 8009d30:	f7f6 fa4e 	bl	80001d0 <memchr>
 8009d34:	b108      	cbz	r0, 8009d3a <_printf_i+0x1ea>
 8009d36:	1b40      	subs	r0, r0, r5
 8009d38:	6060      	str	r0, [r4, #4]
 8009d3a:	6863      	ldr	r3, [r4, #4]
 8009d3c:	6123      	str	r3, [r4, #16]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d44:	e7aa      	b.n	8009c9c <_printf_i+0x14c>
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	462a      	mov	r2, r5
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	4640      	mov	r0, r8
 8009d4e:	47d0      	blx	sl
 8009d50:	3001      	adds	r0, #1
 8009d52:	d0ad      	beq.n	8009cb0 <_printf_i+0x160>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	079b      	lsls	r3, r3, #30
 8009d58:	d413      	bmi.n	8009d82 <_printf_i+0x232>
 8009d5a:	68e0      	ldr	r0, [r4, #12]
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	4298      	cmp	r0, r3
 8009d60:	bfb8      	it	lt
 8009d62:	4618      	movlt	r0, r3
 8009d64:	e7a6      	b.n	8009cb4 <_printf_i+0x164>
 8009d66:	2301      	movs	r3, #1
 8009d68:	4632      	mov	r2, r6
 8009d6a:	4649      	mov	r1, r9
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	47d0      	blx	sl
 8009d70:	3001      	adds	r0, #1
 8009d72:	d09d      	beq.n	8009cb0 <_printf_i+0x160>
 8009d74:	3501      	adds	r5, #1
 8009d76:	68e3      	ldr	r3, [r4, #12]
 8009d78:	9903      	ldr	r1, [sp, #12]
 8009d7a:	1a5b      	subs	r3, r3, r1
 8009d7c:	42ab      	cmp	r3, r5
 8009d7e:	dcf2      	bgt.n	8009d66 <_printf_i+0x216>
 8009d80:	e7eb      	b.n	8009d5a <_printf_i+0x20a>
 8009d82:	2500      	movs	r5, #0
 8009d84:	f104 0619 	add.w	r6, r4, #25
 8009d88:	e7f5      	b.n	8009d76 <_printf_i+0x226>
 8009d8a:	bf00      	nop
 8009d8c:	0800c89a 	.word	0x0800c89a
 8009d90:	0800c8ab 	.word	0x0800c8ab

08009d94 <std>:
 8009d94:	2300      	movs	r3, #0
 8009d96:	b510      	push	{r4, lr}
 8009d98:	4604      	mov	r4, r0
 8009d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009da2:	6083      	str	r3, [r0, #8]
 8009da4:	8181      	strh	r1, [r0, #12]
 8009da6:	6643      	str	r3, [r0, #100]	; 0x64
 8009da8:	81c2      	strh	r2, [r0, #14]
 8009daa:	6183      	str	r3, [r0, #24]
 8009dac:	4619      	mov	r1, r3
 8009dae:	2208      	movs	r2, #8
 8009db0:	305c      	adds	r0, #92	; 0x5c
 8009db2:	f000 f903 	bl	8009fbc <memset>
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <std+0x38>)
 8009db8:	6263      	str	r3, [r4, #36]	; 0x24
 8009dba:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <std+0x3c>)
 8009dbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dbe:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <std+0x40>)
 8009dc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dc2:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <std+0x44>)
 8009dc4:	6224      	str	r4, [r4, #32]
 8009dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8009dc8:	bd10      	pop	{r4, pc}
 8009dca:	bf00      	nop
 8009dcc:	08009ef5 	.word	0x08009ef5
 8009dd0:	08009f17 	.word	0x08009f17
 8009dd4:	08009f4f 	.word	0x08009f4f
 8009dd8:	08009f73 	.word	0x08009f73

08009ddc <stdio_exit_handler>:
 8009ddc:	4a02      	ldr	r2, [pc, #8]	; (8009de8 <stdio_exit_handler+0xc>)
 8009dde:	4903      	ldr	r1, [pc, #12]	; (8009dec <stdio_exit_handler+0x10>)
 8009de0:	4803      	ldr	r0, [pc, #12]	; (8009df0 <stdio_exit_handler+0x14>)
 8009de2:	f000 b869 	b.w	8009eb8 <_fwalk_sglue>
 8009de6:	bf00      	nop
 8009de8:	20000014 	.word	0x20000014
 8009dec:	0800ba61 	.word	0x0800ba61
 8009df0:	20000020 	.word	0x20000020

08009df4 <cleanup_stdio>:
 8009df4:	6841      	ldr	r1, [r0, #4]
 8009df6:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <cleanup_stdio+0x34>)
 8009df8:	4299      	cmp	r1, r3
 8009dfa:	b510      	push	{r4, lr}
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	d001      	beq.n	8009e04 <cleanup_stdio+0x10>
 8009e00:	f001 fe2e 	bl	800ba60 <_fflush_r>
 8009e04:	68a1      	ldr	r1, [r4, #8]
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <cleanup_stdio+0x38>)
 8009e08:	4299      	cmp	r1, r3
 8009e0a:	d002      	beq.n	8009e12 <cleanup_stdio+0x1e>
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f001 fe27 	bl	800ba60 <_fflush_r>
 8009e12:	68e1      	ldr	r1, [r4, #12]
 8009e14:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <cleanup_stdio+0x3c>)
 8009e16:	4299      	cmp	r1, r3
 8009e18:	d004      	beq.n	8009e24 <cleanup_stdio+0x30>
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e20:	f001 be1e 	b.w	800ba60 <_fflush_r>
 8009e24:	bd10      	pop	{r4, pc}
 8009e26:	bf00      	nop
 8009e28:	20001d38 	.word	0x20001d38
 8009e2c:	20001da0 	.word	0x20001da0
 8009e30:	20001e08 	.word	0x20001e08

08009e34 <global_stdio_init.part.0>:
 8009e34:	b510      	push	{r4, lr}
 8009e36:	4b0b      	ldr	r3, [pc, #44]	; (8009e64 <global_stdio_init.part.0+0x30>)
 8009e38:	4c0b      	ldr	r4, [pc, #44]	; (8009e68 <global_stdio_init.part.0+0x34>)
 8009e3a:	4a0c      	ldr	r2, [pc, #48]	; (8009e6c <global_stdio_init.part.0+0x38>)
 8009e3c:	601a      	str	r2, [r3, #0]
 8009e3e:	4620      	mov	r0, r4
 8009e40:	2200      	movs	r2, #0
 8009e42:	2104      	movs	r1, #4
 8009e44:	f7ff ffa6 	bl	8009d94 <std>
 8009e48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	2109      	movs	r1, #9
 8009e50:	f7ff ffa0 	bl	8009d94 <std>
 8009e54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009e58:	2202      	movs	r2, #2
 8009e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e5e:	2112      	movs	r1, #18
 8009e60:	f7ff bf98 	b.w	8009d94 <std>
 8009e64:	20001e70 	.word	0x20001e70
 8009e68:	20001d38 	.word	0x20001d38
 8009e6c:	08009ddd 	.word	0x08009ddd

08009e70 <__sfp_lock_acquire>:
 8009e70:	4801      	ldr	r0, [pc, #4]	; (8009e78 <__sfp_lock_acquire+0x8>)
 8009e72:	f000 b91f 	b.w	800a0b4 <__retarget_lock_acquire_recursive>
 8009e76:	bf00      	nop
 8009e78:	20001e79 	.word	0x20001e79

08009e7c <__sfp_lock_release>:
 8009e7c:	4801      	ldr	r0, [pc, #4]	; (8009e84 <__sfp_lock_release+0x8>)
 8009e7e:	f000 b91a 	b.w	800a0b6 <__retarget_lock_release_recursive>
 8009e82:	bf00      	nop
 8009e84:	20001e79 	.word	0x20001e79

08009e88 <__sinit>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	f7ff fff0 	bl	8009e70 <__sfp_lock_acquire>
 8009e90:	6a23      	ldr	r3, [r4, #32]
 8009e92:	b11b      	cbz	r3, 8009e9c <__sinit+0x14>
 8009e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e98:	f7ff bff0 	b.w	8009e7c <__sfp_lock_release>
 8009e9c:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <__sinit+0x28>)
 8009e9e:	6223      	str	r3, [r4, #32]
 8009ea0:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <__sinit+0x2c>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d1f5      	bne.n	8009e94 <__sinit+0xc>
 8009ea8:	f7ff ffc4 	bl	8009e34 <global_stdio_init.part.0>
 8009eac:	e7f2      	b.n	8009e94 <__sinit+0xc>
 8009eae:	bf00      	nop
 8009eb0:	08009df5 	.word	0x08009df5
 8009eb4:	20001e70 	.word	0x20001e70

08009eb8 <_fwalk_sglue>:
 8009eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ebc:	4607      	mov	r7, r0
 8009ebe:	4688      	mov	r8, r1
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	2600      	movs	r6, #0
 8009ec4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ec8:	f1b9 0901 	subs.w	r9, r9, #1
 8009ecc:	d505      	bpl.n	8009eda <_fwalk_sglue+0x22>
 8009ece:	6824      	ldr	r4, [r4, #0]
 8009ed0:	2c00      	cmp	r4, #0
 8009ed2:	d1f7      	bne.n	8009ec4 <_fwalk_sglue+0xc>
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eda:	89ab      	ldrh	r3, [r5, #12]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d907      	bls.n	8009ef0 <_fwalk_sglue+0x38>
 8009ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	d003      	beq.n	8009ef0 <_fwalk_sglue+0x38>
 8009ee8:	4629      	mov	r1, r5
 8009eea:	4638      	mov	r0, r7
 8009eec:	47c0      	blx	r8
 8009eee:	4306      	orrs	r6, r0
 8009ef0:	3568      	adds	r5, #104	; 0x68
 8009ef2:	e7e9      	b.n	8009ec8 <_fwalk_sglue+0x10>

08009ef4 <__sread>:
 8009ef4:	b510      	push	{r4, lr}
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efc:	f000 f88c 	bl	800a018 <_read_r>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	bfab      	itete	ge
 8009f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f06:	89a3      	ldrhlt	r3, [r4, #12]
 8009f08:	181b      	addge	r3, r3, r0
 8009f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f0e:	bfac      	ite	ge
 8009f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f12:	81a3      	strhlt	r3, [r4, #12]
 8009f14:	bd10      	pop	{r4, pc}

08009f16 <__swrite>:
 8009f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1a:	461f      	mov	r7, r3
 8009f1c:	898b      	ldrh	r3, [r1, #12]
 8009f1e:	05db      	lsls	r3, r3, #23
 8009f20:	4605      	mov	r5, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	4616      	mov	r6, r2
 8009f26:	d505      	bpl.n	8009f34 <__swrite+0x1e>
 8009f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f000 f860 	bl	8009ff4 <_lseek_r>
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	4632      	mov	r2, r6
 8009f42:	463b      	mov	r3, r7
 8009f44:	4628      	mov	r0, r5
 8009f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4a:	f000 b877 	b.w	800a03c <_write_r>

08009f4e <__sseek>:
 8009f4e:	b510      	push	{r4, lr}
 8009f50:	460c      	mov	r4, r1
 8009f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f56:	f000 f84d 	bl	8009ff4 <_lseek_r>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	bf15      	itete	ne
 8009f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f6a:	81a3      	strheq	r3, [r4, #12]
 8009f6c:	bf18      	it	ne
 8009f6e:	81a3      	strhne	r3, [r4, #12]
 8009f70:	bd10      	pop	{r4, pc}

08009f72 <__sclose>:
 8009f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f76:	f000 b82d 	b.w	8009fd4 <_close_r>
	...

08009f7c <_vsiprintf_r>:
 8009f7c:	b500      	push	{lr}
 8009f7e:	b09b      	sub	sp, #108	; 0x6c
 8009f80:	9100      	str	r1, [sp, #0]
 8009f82:	9104      	str	r1, [sp, #16]
 8009f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f88:	9105      	str	r1, [sp, #20]
 8009f8a:	9102      	str	r1, [sp, #8]
 8009f8c:	4905      	ldr	r1, [pc, #20]	; (8009fa4 <_vsiprintf_r+0x28>)
 8009f8e:	9103      	str	r1, [sp, #12]
 8009f90:	4669      	mov	r1, sp
 8009f92:	f001 fbe1 	bl	800b758 <_svfiprintf_r>
 8009f96:	9b00      	ldr	r3, [sp, #0]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	701a      	strb	r2, [r3, #0]
 8009f9c:	b01b      	add	sp, #108	; 0x6c
 8009f9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fa2:	bf00      	nop
 8009fa4:	ffff0208 	.word	0xffff0208

08009fa8 <vsiprintf>:
 8009fa8:	4613      	mov	r3, r2
 8009faa:	460a      	mov	r2, r1
 8009fac:	4601      	mov	r1, r0
 8009fae:	4802      	ldr	r0, [pc, #8]	; (8009fb8 <vsiprintf+0x10>)
 8009fb0:	6800      	ldr	r0, [r0, #0]
 8009fb2:	f7ff bfe3 	b.w	8009f7c <_vsiprintf_r>
 8009fb6:	bf00      	nop
 8009fb8:	2000006c 	.word	0x2000006c

08009fbc <memset>:
 8009fbc:	4402      	add	r2, r0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d100      	bne.n	8009fc6 <memset+0xa>
 8009fc4:	4770      	bx	lr
 8009fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fca:	e7f9      	b.n	8009fc0 <memset+0x4>

08009fcc <_localeconv_r>:
 8009fcc:	4800      	ldr	r0, [pc, #0]	; (8009fd0 <_localeconv_r+0x4>)
 8009fce:	4770      	bx	lr
 8009fd0:	20000160 	.word	0x20000160

08009fd4 <_close_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	4d06      	ldr	r5, [pc, #24]	; (8009ff0 <_close_r+0x1c>)
 8009fd8:	2300      	movs	r3, #0
 8009fda:	4604      	mov	r4, r0
 8009fdc:	4608      	mov	r0, r1
 8009fde:	602b      	str	r3, [r5, #0]
 8009fe0:	f7f9 fba6 	bl	8003730 <_close>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	d102      	bne.n	8009fee <_close_r+0x1a>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	b103      	cbz	r3, 8009fee <_close_r+0x1a>
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	bd38      	pop	{r3, r4, r5, pc}
 8009ff0:	20001e74 	.word	0x20001e74

08009ff4 <_lseek_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4d07      	ldr	r5, [pc, #28]	; (800a014 <_lseek_r+0x20>)
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	4608      	mov	r0, r1
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	2200      	movs	r2, #0
 800a000:	602a      	str	r2, [r5, #0]
 800a002:	461a      	mov	r2, r3
 800a004:	f7f9 fba0 	bl	8003748 <_lseek>
 800a008:	1c43      	adds	r3, r0, #1
 800a00a:	d102      	bne.n	800a012 <_lseek_r+0x1e>
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	b103      	cbz	r3, 800a012 <_lseek_r+0x1e>
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	bd38      	pop	{r3, r4, r5, pc}
 800a014:	20001e74 	.word	0x20001e74

0800a018 <_read_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	4d07      	ldr	r5, [pc, #28]	; (800a038 <_read_r+0x20>)
 800a01c:	4604      	mov	r4, r0
 800a01e:	4608      	mov	r0, r1
 800a020:	4611      	mov	r1, r2
 800a022:	2200      	movs	r2, #0
 800a024:	602a      	str	r2, [r5, #0]
 800a026:	461a      	mov	r2, r3
 800a028:	f7f9 fb66 	bl	80036f8 <_read>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d102      	bne.n	800a036 <_read_r+0x1e>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	b103      	cbz	r3, 800a036 <_read_r+0x1e>
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	20001e74 	.word	0x20001e74

0800a03c <_write_r>:
 800a03c:	b538      	push	{r3, r4, r5, lr}
 800a03e:	4d07      	ldr	r5, [pc, #28]	; (800a05c <_write_r+0x20>)
 800a040:	4604      	mov	r4, r0
 800a042:	4608      	mov	r0, r1
 800a044:	4611      	mov	r1, r2
 800a046:	2200      	movs	r2, #0
 800a048:	602a      	str	r2, [r5, #0]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f7f9 fb62 	bl	8003714 <_write>
 800a050:	1c43      	adds	r3, r0, #1
 800a052:	d102      	bne.n	800a05a <_write_r+0x1e>
 800a054:	682b      	ldr	r3, [r5, #0]
 800a056:	b103      	cbz	r3, 800a05a <_write_r+0x1e>
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	bd38      	pop	{r3, r4, r5, pc}
 800a05c:	20001e74 	.word	0x20001e74

0800a060 <__errno>:
 800a060:	4b01      	ldr	r3, [pc, #4]	; (800a068 <__errno+0x8>)
 800a062:	6818      	ldr	r0, [r3, #0]
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	2000006c 	.word	0x2000006c

0800a06c <__libc_init_array>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	4d0d      	ldr	r5, [pc, #52]	; (800a0a4 <__libc_init_array+0x38>)
 800a070:	4c0d      	ldr	r4, [pc, #52]	; (800a0a8 <__libc_init_array+0x3c>)
 800a072:	1b64      	subs	r4, r4, r5
 800a074:	10a4      	asrs	r4, r4, #2
 800a076:	2600      	movs	r6, #0
 800a078:	42a6      	cmp	r6, r4
 800a07a:	d109      	bne.n	800a090 <__libc_init_array+0x24>
 800a07c:	4d0b      	ldr	r5, [pc, #44]	; (800a0ac <__libc_init_array+0x40>)
 800a07e:	4c0c      	ldr	r4, [pc, #48]	; (800a0b0 <__libc_init_array+0x44>)
 800a080:	f002 f892 	bl	800c1a8 <_init>
 800a084:	1b64      	subs	r4, r4, r5
 800a086:	10a4      	asrs	r4, r4, #2
 800a088:	2600      	movs	r6, #0
 800a08a:	42a6      	cmp	r6, r4
 800a08c:	d105      	bne.n	800a09a <__libc_init_array+0x2e>
 800a08e:	bd70      	pop	{r4, r5, r6, pc}
 800a090:	f855 3b04 	ldr.w	r3, [r5], #4
 800a094:	4798      	blx	r3
 800a096:	3601      	adds	r6, #1
 800a098:	e7ee      	b.n	800a078 <__libc_init_array+0xc>
 800a09a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a09e:	4798      	blx	r3
 800a0a0:	3601      	adds	r6, #1
 800a0a2:	e7f2      	b.n	800a08a <__libc_init_array+0x1e>
 800a0a4:	0800cbfc 	.word	0x0800cbfc
 800a0a8:	0800cbfc 	.word	0x0800cbfc
 800a0ac:	0800cbfc 	.word	0x0800cbfc
 800a0b0:	0800cc00 	.word	0x0800cc00

0800a0b4 <__retarget_lock_acquire_recursive>:
 800a0b4:	4770      	bx	lr

0800a0b6 <__retarget_lock_release_recursive>:
 800a0b6:	4770      	bx	lr

0800a0b8 <quorem>:
 800a0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	6903      	ldr	r3, [r0, #16]
 800a0be:	690c      	ldr	r4, [r1, #16]
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	4607      	mov	r7, r0
 800a0c4:	db7e      	blt.n	800a1c4 <quorem+0x10c>
 800a0c6:	3c01      	subs	r4, #1
 800a0c8:	f101 0814 	add.w	r8, r1, #20
 800a0cc:	f100 0514 	add.w	r5, r0, #20
 800a0d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a0e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0ee:	d331      	bcc.n	800a154 <quorem+0x9c>
 800a0f0:	f04f 0e00 	mov.w	lr, #0
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	46ac      	mov	ip, r5
 800a0f8:	46f2      	mov	sl, lr
 800a0fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0fe:	b293      	uxth	r3, r2
 800a100:	fb06 e303 	mla	r3, r6, r3, lr
 800a104:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a108:	0c1a      	lsrs	r2, r3, #16
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	ebaa 0303 	sub.w	r3, sl, r3
 800a110:	f8dc a000 	ldr.w	sl, [ip]
 800a114:	fa13 f38a 	uxtah	r3, r3, sl
 800a118:	fb06 220e 	mla	r2, r6, lr, r2
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	9b00      	ldr	r3, [sp, #0]
 800a120:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a124:	b292      	uxth	r2, r2
 800a126:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a12a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a12e:	f8bd 3000 	ldrh.w	r3, [sp]
 800a132:	4581      	cmp	r9, r0
 800a134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a138:	f84c 3b04 	str.w	r3, [ip], #4
 800a13c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a140:	d2db      	bcs.n	800a0fa <quorem+0x42>
 800a142:	f855 300b 	ldr.w	r3, [r5, fp]
 800a146:	b92b      	cbnz	r3, 800a154 <quorem+0x9c>
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	3b04      	subs	r3, #4
 800a14c:	429d      	cmp	r5, r3
 800a14e:	461a      	mov	r2, r3
 800a150:	d32c      	bcc.n	800a1ac <quorem+0xf4>
 800a152:	613c      	str	r4, [r7, #16]
 800a154:	4638      	mov	r0, r7
 800a156:	f001 f9a5 	bl	800b4a4 <__mcmp>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	db22      	blt.n	800a1a4 <quorem+0xec>
 800a15e:	3601      	adds	r6, #1
 800a160:	4629      	mov	r1, r5
 800a162:	2000      	movs	r0, #0
 800a164:	f858 2b04 	ldr.w	r2, [r8], #4
 800a168:	f8d1 c000 	ldr.w	ip, [r1]
 800a16c:	b293      	uxth	r3, r2
 800a16e:	1ac3      	subs	r3, r0, r3
 800a170:	0c12      	lsrs	r2, r2, #16
 800a172:	fa13 f38c 	uxtah	r3, r3, ip
 800a176:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a17a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a17e:	b29b      	uxth	r3, r3
 800a180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a184:	45c1      	cmp	r9, r8
 800a186:	f841 3b04 	str.w	r3, [r1], #4
 800a18a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a18e:	d2e9      	bcs.n	800a164 <quorem+0xac>
 800a190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a198:	b922      	cbnz	r2, 800a1a4 <quorem+0xec>
 800a19a:	3b04      	subs	r3, #4
 800a19c:	429d      	cmp	r5, r3
 800a19e:	461a      	mov	r2, r3
 800a1a0:	d30a      	bcc.n	800a1b8 <quorem+0x100>
 800a1a2:	613c      	str	r4, [r7, #16]
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	b003      	add	sp, #12
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ac:	6812      	ldr	r2, [r2, #0]
 800a1ae:	3b04      	subs	r3, #4
 800a1b0:	2a00      	cmp	r2, #0
 800a1b2:	d1ce      	bne.n	800a152 <quorem+0x9a>
 800a1b4:	3c01      	subs	r4, #1
 800a1b6:	e7c9      	b.n	800a14c <quorem+0x94>
 800a1b8:	6812      	ldr	r2, [r2, #0]
 800a1ba:	3b04      	subs	r3, #4
 800a1bc:	2a00      	cmp	r2, #0
 800a1be:	d1f0      	bne.n	800a1a2 <quorem+0xea>
 800a1c0:	3c01      	subs	r4, #1
 800a1c2:	e7eb      	b.n	800a19c <quorem+0xe4>
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e7ee      	b.n	800a1a6 <quorem+0xee>

0800a1c8 <_dtoa_r>:
 800a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1cc:	ed2d 8b04 	vpush	{d8-d9}
 800a1d0:	69c5      	ldr	r5, [r0, #28]
 800a1d2:	b093      	sub	sp, #76	; 0x4c
 800a1d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1d8:	ec57 6b10 	vmov	r6, r7, d0
 800a1dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1e0:	9107      	str	r1, [sp, #28]
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a1e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a1e8:	b975      	cbnz	r5, 800a208 <_dtoa_r+0x40>
 800a1ea:	2010      	movs	r0, #16
 800a1ec:	f000 fe2a 	bl	800ae44 <malloc>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	61e0      	str	r0, [r4, #28]
 800a1f4:	b920      	cbnz	r0, 800a200 <_dtoa_r+0x38>
 800a1f6:	4bae      	ldr	r3, [pc, #696]	; (800a4b0 <_dtoa_r+0x2e8>)
 800a1f8:	21ef      	movs	r1, #239	; 0xef
 800a1fa:	48ae      	ldr	r0, [pc, #696]	; (800a4b4 <_dtoa_r+0x2ec>)
 800a1fc:	f001 fc90 	bl	800bb20 <__assert_func>
 800a200:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a204:	6005      	str	r5, [r0, #0]
 800a206:	60c5      	str	r5, [r0, #12]
 800a208:	69e3      	ldr	r3, [r4, #28]
 800a20a:	6819      	ldr	r1, [r3, #0]
 800a20c:	b151      	cbz	r1, 800a224 <_dtoa_r+0x5c>
 800a20e:	685a      	ldr	r2, [r3, #4]
 800a210:	604a      	str	r2, [r1, #4]
 800a212:	2301      	movs	r3, #1
 800a214:	4093      	lsls	r3, r2
 800a216:	608b      	str	r3, [r1, #8]
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 ff07 	bl	800b02c <_Bfree>
 800a21e:	69e3      	ldr	r3, [r4, #28]
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]
 800a224:	1e3b      	subs	r3, r7, #0
 800a226:	bfbb      	ittet	lt
 800a228:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a22c:	9303      	strlt	r3, [sp, #12]
 800a22e:	2300      	movge	r3, #0
 800a230:	2201      	movlt	r2, #1
 800a232:	bfac      	ite	ge
 800a234:	f8c8 3000 	strge.w	r3, [r8]
 800a238:	f8c8 2000 	strlt.w	r2, [r8]
 800a23c:	4b9e      	ldr	r3, [pc, #632]	; (800a4b8 <_dtoa_r+0x2f0>)
 800a23e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a242:	ea33 0308 	bics.w	r3, r3, r8
 800a246:	d11b      	bne.n	800a280 <_dtoa_r+0xb8>
 800a248:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a24a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a254:	4333      	orrs	r3, r6
 800a256:	f000 8593 	beq.w	800ad80 <_dtoa_r+0xbb8>
 800a25a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a25c:	b963      	cbnz	r3, 800a278 <_dtoa_r+0xb0>
 800a25e:	4b97      	ldr	r3, [pc, #604]	; (800a4bc <_dtoa_r+0x2f4>)
 800a260:	e027      	b.n	800a2b2 <_dtoa_r+0xea>
 800a262:	4b97      	ldr	r3, [pc, #604]	; (800a4c0 <_dtoa_r+0x2f8>)
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	3308      	adds	r3, #8
 800a268:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	9800      	ldr	r0, [sp, #0]
 800a26e:	b013      	add	sp, #76	; 0x4c
 800a270:	ecbd 8b04 	vpop	{d8-d9}
 800a274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a278:	4b90      	ldr	r3, [pc, #576]	; (800a4bc <_dtoa_r+0x2f4>)
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	3303      	adds	r3, #3
 800a27e:	e7f3      	b.n	800a268 <_dtoa_r+0xa0>
 800a280:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a284:	2200      	movs	r2, #0
 800a286:	ec51 0b17 	vmov	r0, r1, d7
 800a28a:	eeb0 8a47 	vmov.f32	s16, s14
 800a28e:	eef0 8a67 	vmov.f32	s17, s15
 800a292:	2300      	movs	r3, #0
 800a294:	f7f6 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 800a298:	4681      	mov	r9, r0
 800a29a:	b160      	cbz	r0, 800a2b6 <_dtoa_r+0xee>
 800a29c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a29e:	2301      	movs	r3, #1
 800a2a0:	6013      	str	r3, [r2, #0]
 800a2a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 8568 	beq.w	800ad7a <_dtoa_r+0xbb2>
 800a2aa:	4b86      	ldr	r3, [pc, #536]	; (800a4c4 <_dtoa_r+0x2fc>)
 800a2ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	e7da      	b.n	800a26c <_dtoa_r+0xa4>
 800a2b6:	aa10      	add	r2, sp, #64	; 0x40
 800a2b8:	a911      	add	r1, sp, #68	; 0x44
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a2c0:	eef0 0a68 	vmov.f32	s1, s17
 800a2c4:	f001 f994 	bl	800b5f0 <__d2b>
 800a2c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	d07f      	beq.n	800a3d2 <_dtoa_r+0x20a>
 800a2d2:	ee18 3a90 	vmov	r3, s17
 800a2d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a2de:	ec51 0b18 	vmov	r0, r1, d8
 800a2e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4b75      	ldr	r3, [pc, #468]	; (800a4c8 <_dtoa_r+0x300>)
 800a2f4:	f7f5 ffc8 	bl	8000288 <__aeabi_dsub>
 800a2f8:	a367      	add	r3, pc, #412	; (adr r3, 800a498 <_dtoa_r+0x2d0>)
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	f7f6 f97b 	bl	80005f8 <__aeabi_dmul>
 800a302:	a367      	add	r3, pc, #412	; (adr r3, 800a4a0 <_dtoa_r+0x2d8>)
 800a304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a308:	f7f5 ffc0 	bl	800028c <__adddf3>
 800a30c:	4606      	mov	r6, r0
 800a30e:	4628      	mov	r0, r5
 800a310:	460f      	mov	r7, r1
 800a312:	f7f6 f907 	bl	8000524 <__aeabi_i2d>
 800a316:	a364      	add	r3, pc, #400	; (adr r3, 800a4a8 <_dtoa_r+0x2e0>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4630      	mov	r0, r6
 800a326:	4639      	mov	r1, r7
 800a328:	f7f5 ffb0 	bl	800028c <__adddf3>
 800a32c:	4606      	mov	r6, r0
 800a32e:	460f      	mov	r7, r1
 800a330:	f7f6 fc12 	bl	8000b58 <__aeabi_d2iz>
 800a334:	2200      	movs	r2, #0
 800a336:	4683      	mov	fp, r0
 800a338:	2300      	movs	r3, #0
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f6 fbcd 	bl	8000adc <__aeabi_dcmplt>
 800a342:	b148      	cbz	r0, 800a358 <_dtoa_r+0x190>
 800a344:	4658      	mov	r0, fp
 800a346:	f7f6 f8ed 	bl	8000524 <__aeabi_i2d>
 800a34a:	4632      	mov	r2, r6
 800a34c:	463b      	mov	r3, r7
 800a34e:	f7f6 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a352:	b908      	cbnz	r0, 800a358 <_dtoa_r+0x190>
 800a354:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a358:	f1bb 0f16 	cmp.w	fp, #22
 800a35c:	d857      	bhi.n	800a40e <_dtoa_r+0x246>
 800a35e:	4b5b      	ldr	r3, [pc, #364]	; (800a4cc <_dtoa_r+0x304>)
 800a360:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	ec51 0b18 	vmov	r0, r1, d8
 800a36c:	f7f6 fbb6 	bl	8000adc <__aeabi_dcmplt>
 800a370:	2800      	cmp	r0, #0
 800a372:	d04e      	beq.n	800a412 <_dtoa_r+0x24a>
 800a374:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a378:	2300      	movs	r3, #0
 800a37a:	930c      	str	r3, [sp, #48]	; 0x30
 800a37c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a37e:	1b5b      	subs	r3, r3, r5
 800a380:	1e5a      	subs	r2, r3, #1
 800a382:	bf45      	ittet	mi
 800a384:	f1c3 0301 	rsbmi	r3, r3, #1
 800a388:	9305      	strmi	r3, [sp, #20]
 800a38a:	2300      	movpl	r3, #0
 800a38c:	2300      	movmi	r3, #0
 800a38e:	9206      	str	r2, [sp, #24]
 800a390:	bf54      	ite	pl
 800a392:	9305      	strpl	r3, [sp, #20]
 800a394:	9306      	strmi	r3, [sp, #24]
 800a396:	f1bb 0f00 	cmp.w	fp, #0
 800a39a:	db3c      	blt.n	800a416 <_dtoa_r+0x24e>
 800a39c:	9b06      	ldr	r3, [sp, #24]
 800a39e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a3a2:	445b      	add	r3, fp
 800a3a4:	9306      	str	r3, [sp, #24]
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	9308      	str	r3, [sp, #32]
 800a3aa:	9b07      	ldr	r3, [sp, #28]
 800a3ac:	2b09      	cmp	r3, #9
 800a3ae:	d868      	bhi.n	800a482 <_dtoa_r+0x2ba>
 800a3b0:	2b05      	cmp	r3, #5
 800a3b2:	bfc4      	itt	gt
 800a3b4:	3b04      	subgt	r3, #4
 800a3b6:	9307      	strgt	r3, [sp, #28]
 800a3b8:	9b07      	ldr	r3, [sp, #28]
 800a3ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a3be:	bfcc      	ite	gt
 800a3c0:	2500      	movgt	r5, #0
 800a3c2:	2501      	movle	r5, #1
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	f200 8085 	bhi.w	800a4d4 <_dtoa_r+0x30c>
 800a3ca:	e8df f003 	tbb	[pc, r3]
 800a3ce:	3b2e      	.short	0x3b2e
 800a3d0:	5839      	.short	0x5839
 800a3d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a3d6:	441d      	add	r5, r3
 800a3d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	bfc1      	itttt	gt
 800a3e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a3e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a3e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a3ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a3f0:	bfd6      	itet	le
 800a3f2:	f1c3 0320 	rsble	r3, r3, #32
 800a3f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a3fa:	fa06 f003 	lslle.w	r0, r6, r3
 800a3fe:	f7f6 f881 	bl	8000504 <__aeabi_ui2d>
 800a402:	2201      	movs	r2, #1
 800a404:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a408:	3d01      	subs	r5, #1
 800a40a:	920e      	str	r2, [sp, #56]	; 0x38
 800a40c:	e76f      	b.n	800a2ee <_dtoa_r+0x126>
 800a40e:	2301      	movs	r3, #1
 800a410:	e7b3      	b.n	800a37a <_dtoa_r+0x1b2>
 800a412:	900c      	str	r0, [sp, #48]	; 0x30
 800a414:	e7b2      	b.n	800a37c <_dtoa_r+0x1b4>
 800a416:	9b05      	ldr	r3, [sp, #20]
 800a418:	eba3 030b 	sub.w	r3, r3, fp
 800a41c:	9305      	str	r3, [sp, #20]
 800a41e:	f1cb 0300 	rsb	r3, fp, #0
 800a422:	9308      	str	r3, [sp, #32]
 800a424:	2300      	movs	r3, #0
 800a426:	930b      	str	r3, [sp, #44]	; 0x2c
 800a428:	e7bf      	b.n	800a3aa <_dtoa_r+0x1e2>
 800a42a:	2300      	movs	r3, #0
 800a42c:	9309      	str	r3, [sp, #36]	; 0x24
 800a42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a430:	2b00      	cmp	r3, #0
 800a432:	dc52      	bgt.n	800a4da <_dtoa_r+0x312>
 800a434:	2301      	movs	r3, #1
 800a436:	9301      	str	r3, [sp, #4]
 800a438:	9304      	str	r3, [sp, #16]
 800a43a:	461a      	mov	r2, r3
 800a43c:	920a      	str	r2, [sp, #40]	; 0x28
 800a43e:	e00b      	b.n	800a458 <_dtoa_r+0x290>
 800a440:	2301      	movs	r3, #1
 800a442:	e7f3      	b.n	800a42c <_dtoa_r+0x264>
 800a444:	2300      	movs	r3, #0
 800a446:	9309      	str	r3, [sp, #36]	; 0x24
 800a448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a44a:	445b      	add	r3, fp
 800a44c:	9301      	str	r3, [sp, #4]
 800a44e:	3301      	adds	r3, #1
 800a450:	2b01      	cmp	r3, #1
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	bfb8      	it	lt
 800a456:	2301      	movlt	r3, #1
 800a458:	69e0      	ldr	r0, [r4, #28]
 800a45a:	2100      	movs	r1, #0
 800a45c:	2204      	movs	r2, #4
 800a45e:	f102 0614 	add.w	r6, r2, #20
 800a462:	429e      	cmp	r6, r3
 800a464:	d93d      	bls.n	800a4e2 <_dtoa_r+0x31a>
 800a466:	6041      	str	r1, [r0, #4]
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fd9f 	bl	800afac <_Balloc>
 800a46e:	9000      	str	r0, [sp, #0]
 800a470:	2800      	cmp	r0, #0
 800a472:	d139      	bne.n	800a4e8 <_dtoa_r+0x320>
 800a474:	4b16      	ldr	r3, [pc, #88]	; (800a4d0 <_dtoa_r+0x308>)
 800a476:	4602      	mov	r2, r0
 800a478:	f240 11af 	movw	r1, #431	; 0x1af
 800a47c:	e6bd      	b.n	800a1fa <_dtoa_r+0x32>
 800a47e:	2301      	movs	r3, #1
 800a480:	e7e1      	b.n	800a446 <_dtoa_r+0x27e>
 800a482:	2501      	movs	r5, #1
 800a484:	2300      	movs	r3, #0
 800a486:	9307      	str	r3, [sp, #28]
 800a488:	9509      	str	r5, [sp, #36]	; 0x24
 800a48a:	f04f 33ff 	mov.w	r3, #4294967295
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	2200      	movs	r2, #0
 800a494:	2312      	movs	r3, #18
 800a496:	e7d1      	b.n	800a43c <_dtoa_r+0x274>
 800a498:	636f4361 	.word	0x636f4361
 800a49c:	3fd287a7 	.word	0x3fd287a7
 800a4a0:	8b60c8b3 	.word	0x8b60c8b3
 800a4a4:	3fc68a28 	.word	0x3fc68a28
 800a4a8:	509f79fb 	.word	0x509f79fb
 800a4ac:	3fd34413 	.word	0x3fd34413
 800a4b0:	0800c8c9 	.word	0x0800c8c9
 800a4b4:	0800c8e0 	.word	0x0800c8e0
 800a4b8:	7ff00000 	.word	0x7ff00000
 800a4bc:	0800c8c5 	.word	0x0800c8c5
 800a4c0:	0800c8bc 	.word	0x0800c8bc
 800a4c4:	0800c899 	.word	0x0800c899
 800a4c8:	3ff80000 	.word	0x3ff80000
 800a4cc:	0800c9d0 	.word	0x0800c9d0
 800a4d0:	0800c938 	.word	0x0800c938
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	e7d7      	b.n	800a48a <_dtoa_r+0x2c2>
 800a4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4dc:	9301      	str	r3, [sp, #4]
 800a4de:	9304      	str	r3, [sp, #16]
 800a4e0:	e7ba      	b.n	800a458 <_dtoa_r+0x290>
 800a4e2:	3101      	adds	r1, #1
 800a4e4:	0052      	lsls	r2, r2, #1
 800a4e6:	e7ba      	b.n	800a45e <_dtoa_r+0x296>
 800a4e8:	69e3      	ldr	r3, [r4, #28]
 800a4ea:	9a00      	ldr	r2, [sp, #0]
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	2b0e      	cmp	r3, #14
 800a4f2:	f200 80a8 	bhi.w	800a646 <_dtoa_r+0x47e>
 800a4f6:	2d00      	cmp	r5, #0
 800a4f8:	f000 80a5 	beq.w	800a646 <_dtoa_r+0x47e>
 800a4fc:	f1bb 0f00 	cmp.w	fp, #0
 800a500:	dd38      	ble.n	800a574 <_dtoa_r+0x3ac>
 800a502:	4bc0      	ldr	r3, [pc, #768]	; (800a804 <_dtoa_r+0x63c>)
 800a504:	f00b 020f 	and.w	r2, fp, #15
 800a508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a50c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a510:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a514:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a518:	d019      	beq.n	800a54e <_dtoa_r+0x386>
 800a51a:	4bbb      	ldr	r3, [pc, #748]	; (800a808 <_dtoa_r+0x640>)
 800a51c:	ec51 0b18 	vmov	r0, r1, d8
 800a520:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a524:	f7f6 f992 	bl	800084c <__aeabi_ddiv>
 800a528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a52c:	f008 080f 	and.w	r8, r8, #15
 800a530:	2503      	movs	r5, #3
 800a532:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a808 <_dtoa_r+0x640>
 800a536:	f1b8 0f00 	cmp.w	r8, #0
 800a53a:	d10a      	bne.n	800a552 <_dtoa_r+0x38a>
 800a53c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a540:	4632      	mov	r2, r6
 800a542:	463b      	mov	r3, r7
 800a544:	f7f6 f982 	bl	800084c <__aeabi_ddiv>
 800a548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a54c:	e02b      	b.n	800a5a6 <_dtoa_r+0x3de>
 800a54e:	2502      	movs	r5, #2
 800a550:	e7ef      	b.n	800a532 <_dtoa_r+0x36a>
 800a552:	f018 0f01 	tst.w	r8, #1
 800a556:	d008      	beq.n	800a56a <_dtoa_r+0x3a2>
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a560:	f7f6 f84a 	bl	80005f8 <__aeabi_dmul>
 800a564:	3501      	adds	r5, #1
 800a566:	4606      	mov	r6, r0
 800a568:	460f      	mov	r7, r1
 800a56a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a56e:	f109 0908 	add.w	r9, r9, #8
 800a572:	e7e0      	b.n	800a536 <_dtoa_r+0x36e>
 800a574:	f000 809f 	beq.w	800a6b6 <_dtoa_r+0x4ee>
 800a578:	f1cb 0600 	rsb	r6, fp, #0
 800a57c:	4ba1      	ldr	r3, [pc, #644]	; (800a804 <_dtoa_r+0x63c>)
 800a57e:	4fa2      	ldr	r7, [pc, #648]	; (800a808 <_dtoa_r+0x640>)
 800a580:	f006 020f 	and.w	r2, r6, #15
 800a584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58c:	ec51 0b18 	vmov	r0, r1, d8
 800a590:	f7f6 f832 	bl	80005f8 <__aeabi_dmul>
 800a594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a598:	1136      	asrs	r6, r6, #4
 800a59a:	2300      	movs	r3, #0
 800a59c:	2502      	movs	r5, #2
 800a59e:	2e00      	cmp	r6, #0
 800a5a0:	d17e      	bne.n	800a6a0 <_dtoa_r+0x4d8>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1d0      	bne.n	800a548 <_dtoa_r+0x380>
 800a5a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 8084 	beq.w	800a6ba <_dtoa_r+0x4f2>
 800a5b2:	4b96      	ldr	r3, [pc, #600]	; (800a80c <_dtoa_r+0x644>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	f7f6 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d07b      	beq.n	800a6ba <_dtoa_r+0x4f2>
 800a5c2:	9b04      	ldr	r3, [sp, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d078      	beq.n	800a6ba <_dtoa_r+0x4f2>
 800a5c8:	9b01      	ldr	r3, [sp, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	dd39      	ble.n	800a642 <_dtoa_r+0x47a>
 800a5ce:	4b90      	ldr	r3, [pc, #576]	; (800a810 <_dtoa_r+0x648>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	4640      	mov	r0, r8
 800a5d4:	4649      	mov	r1, r9
 800a5d6:	f7f6 f80f 	bl	80005f8 <__aeabi_dmul>
 800a5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5de:	9e01      	ldr	r6, [sp, #4]
 800a5e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f7f5 ff9a 	bl	8000524 <__aeabi_i2d>
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	464b      	mov	r3, r9
 800a5f4:	f7f6 f800 	bl	80005f8 <__aeabi_dmul>
 800a5f8:	4b86      	ldr	r3, [pc, #536]	; (800a814 <_dtoa_r+0x64c>)
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f7f5 fe46 	bl	800028c <__adddf3>
 800a600:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a608:	9303      	str	r3, [sp, #12]
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	d158      	bne.n	800a6c0 <_dtoa_r+0x4f8>
 800a60e:	4b82      	ldr	r3, [pc, #520]	; (800a818 <_dtoa_r+0x650>)
 800a610:	2200      	movs	r2, #0
 800a612:	4640      	mov	r0, r8
 800a614:	4649      	mov	r1, r9
 800a616:	f7f5 fe37 	bl	8000288 <__aeabi_dsub>
 800a61a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a61e:	4680      	mov	r8, r0
 800a620:	4689      	mov	r9, r1
 800a622:	f7f6 fa79 	bl	8000b18 <__aeabi_dcmpgt>
 800a626:	2800      	cmp	r0, #0
 800a628:	f040 8296 	bne.w	800ab58 <_dtoa_r+0x990>
 800a62c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a630:	4640      	mov	r0, r8
 800a632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a636:	4649      	mov	r1, r9
 800a638:	f7f6 fa50 	bl	8000adc <__aeabi_dcmplt>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f040 8289 	bne.w	800ab54 <_dtoa_r+0x98c>
 800a642:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f2c0 814e 	blt.w	800a8ea <_dtoa_r+0x722>
 800a64e:	f1bb 0f0e 	cmp.w	fp, #14
 800a652:	f300 814a 	bgt.w	800a8ea <_dtoa_r+0x722>
 800a656:	4b6b      	ldr	r3, [pc, #428]	; (800a804 <_dtoa_r+0x63c>)
 800a658:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a65c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a662:	2b00      	cmp	r3, #0
 800a664:	f280 80dc 	bge.w	800a820 <_dtoa_r+0x658>
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	f300 80d8 	bgt.w	800a820 <_dtoa_r+0x658>
 800a670:	f040 826f 	bne.w	800ab52 <_dtoa_r+0x98a>
 800a674:	4b68      	ldr	r3, [pc, #416]	; (800a818 <_dtoa_r+0x650>)
 800a676:	2200      	movs	r2, #0
 800a678:	4640      	mov	r0, r8
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7f5 ffbc 	bl	80005f8 <__aeabi_dmul>
 800a680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a684:	f7f6 fa3e 	bl	8000b04 <__aeabi_dcmpge>
 800a688:	9e04      	ldr	r6, [sp, #16]
 800a68a:	4637      	mov	r7, r6
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f040 8245 	bne.w	800ab1c <_dtoa_r+0x954>
 800a692:	9d00      	ldr	r5, [sp, #0]
 800a694:	2331      	movs	r3, #49	; 0x31
 800a696:	f805 3b01 	strb.w	r3, [r5], #1
 800a69a:	f10b 0b01 	add.w	fp, fp, #1
 800a69e:	e241      	b.n	800ab24 <_dtoa_r+0x95c>
 800a6a0:	07f2      	lsls	r2, r6, #31
 800a6a2:	d505      	bpl.n	800a6b0 <_dtoa_r+0x4e8>
 800a6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6a8:	f7f5 ffa6 	bl	80005f8 <__aeabi_dmul>
 800a6ac:	3501      	adds	r5, #1
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	1076      	asrs	r6, r6, #1
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	e773      	b.n	800a59e <_dtoa_r+0x3d6>
 800a6b6:	2502      	movs	r5, #2
 800a6b8:	e775      	b.n	800a5a6 <_dtoa_r+0x3de>
 800a6ba:	9e04      	ldr	r6, [sp, #16]
 800a6bc:	465f      	mov	r7, fp
 800a6be:	e792      	b.n	800a5e6 <_dtoa_r+0x41e>
 800a6c0:	9900      	ldr	r1, [sp, #0]
 800a6c2:	4b50      	ldr	r3, [pc, #320]	; (800a804 <_dtoa_r+0x63c>)
 800a6c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6c8:	4431      	add	r1, r6
 800a6ca:	9102      	str	r1, [sp, #8]
 800a6cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6ce:	eeb0 9a47 	vmov.f32	s18, s14
 800a6d2:	eef0 9a67 	vmov.f32	s19, s15
 800a6d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6de:	2900      	cmp	r1, #0
 800a6e0:	d044      	beq.n	800a76c <_dtoa_r+0x5a4>
 800a6e2:	494e      	ldr	r1, [pc, #312]	; (800a81c <_dtoa_r+0x654>)
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	f7f6 f8b1 	bl	800084c <__aeabi_ddiv>
 800a6ea:	ec53 2b19 	vmov	r2, r3, d9
 800a6ee:	f7f5 fdcb 	bl	8000288 <__aeabi_dsub>
 800a6f2:	9d00      	ldr	r5, [sp, #0]
 800a6f4:	ec41 0b19 	vmov	d9, r0, r1
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	f7f6 fa2c 	bl	8000b58 <__aeabi_d2iz>
 800a700:	4606      	mov	r6, r0
 800a702:	f7f5 ff0f 	bl	8000524 <__aeabi_i2d>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4640      	mov	r0, r8
 800a70c:	4649      	mov	r1, r9
 800a70e:	f7f5 fdbb 	bl	8000288 <__aeabi_dsub>
 800a712:	3630      	adds	r6, #48	; 0x30
 800a714:	f805 6b01 	strb.w	r6, [r5], #1
 800a718:	ec53 2b19 	vmov	r2, r3, d9
 800a71c:	4680      	mov	r8, r0
 800a71e:	4689      	mov	r9, r1
 800a720:	f7f6 f9dc 	bl	8000adc <__aeabi_dcmplt>
 800a724:	2800      	cmp	r0, #0
 800a726:	d164      	bne.n	800a7f2 <_dtoa_r+0x62a>
 800a728:	4642      	mov	r2, r8
 800a72a:	464b      	mov	r3, r9
 800a72c:	4937      	ldr	r1, [pc, #220]	; (800a80c <_dtoa_r+0x644>)
 800a72e:	2000      	movs	r0, #0
 800a730:	f7f5 fdaa 	bl	8000288 <__aeabi_dsub>
 800a734:	ec53 2b19 	vmov	r2, r3, d9
 800a738:	f7f6 f9d0 	bl	8000adc <__aeabi_dcmplt>
 800a73c:	2800      	cmp	r0, #0
 800a73e:	f040 80b6 	bne.w	800a8ae <_dtoa_r+0x6e6>
 800a742:	9b02      	ldr	r3, [sp, #8]
 800a744:	429d      	cmp	r5, r3
 800a746:	f43f af7c 	beq.w	800a642 <_dtoa_r+0x47a>
 800a74a:	4b31      	ldr	r3, [pc, #196]	; (800a810 <_dtoa_r+0x648>)
 800a74c:	ec51 0b19 	vmov	r0, r1, d9
 800a750:	2200      	movs	r2, #0
 800a752:	f7f5 ff51 	bl	80005f8 <__aeabi_dmul>
 800a756:	4b2e      	ldr	r3, [pc, #184]	; (800a810 <_dtoa_r+0x648>)
 800a758:	ec41 0b19 	vmov	d9, r0, r1
 800a75c:	2200      	movs	r2, #0
 800a75e:	4640      	mov	r0, r8
 800a760:	4649      	mov	r1, r9
 800a762:	f7f5 ff49 	bl	80005f8 <__aeabi_dmul>
 800a766:	4680      	mov	r8, r0
 800a768:	4689      	mov	r9, r1
 800a76a:	e7c5      	b.n	800a6f8 <_dtoa_r+0x530>
 800a76c:	ec51 0b17 	vmov	r0, r1, d7
 800a770:	f7f5 ff42 	bl	80005f8 <__aeabi_dmul>
 800a774:	9b02      	ldr	r3, [sp, #8]
 800a776:	9d00      	ldr	r5, [sp, #0]
 800a778:	930f      	str	r3, [sp, #60]	; 0x3c
 800a77a:	ec41 0b19 	vmov	d9, r0, r1
 800a77e:	4649      	mov	r1, r9
 800a780:	4640      	mov	r0, r8
 800a782:	f7f6 f9e9 	bl	8000b58 <__aeabi_d2iz>
 800a786:	4606      	mov	r6, r0
 800a788:	f7f5 fecc 	bl	8000524 <__aeabi_i2d>
 800a78c:	3630      	adds	r6, #48	; 0x30
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f5 fd77 	bl	8000288 <__aeabi_dsub>
 800a79a:	f805 6b01 	strb.w	r6, [r5], #1
 800a79e:	9b02      	ldr	r3, [sp, #8]
 800a7a0:	429d      	cmp	r5, r3
 800a7a2:	4680      	mov	r8, r0
 800a7a4:	4689      	mov	r9, r1
 800a7a6:	f04f 0200 	mov.w	r2, #0
 800a7aa:	d124      	bne.n	800a7f6 <_dtoa_r+0x62e>
 800a7ac:	4b1b      	ldr	r3, [pc, #108]	; (800a81c <_dtoa_r+0x654>)
 800a7ae:	ec51 0b19 	vmov	r0, r1, d9
 800a7b2:	f7f5 fd6b 	bl	800028c <__adddf3>
 800a7b6:	4602      	mov	r2, r0
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	4649      	mov	r1, r9
 800a7be:	f7f6 f9ab 	bl	8000b18 <__aeabi_dcmpgt>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d173      	bne.n	800a8ae <_dtoa_r+0x6e6>
 800a7c6:	ec53 2b19 	vmov	r2, r3, d9
 800a7ca:	4914      	ldr	r1, [pc, #80]	; (800a81c <_dtoa_r+0x654>)
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f7f5 fd5b 	bl	8000288 <__aeabi_dsub>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4640      	mov	r0, r8
 800a7d8:	4649      	mov	r1, r9
 800a7da:	f7f6 f97f 	bl	8000adc <__aeabi_dcmplt>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f43f af2f 	beq.w	800a642 <_dtoa_r+0x47a>
 800a7e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a7e6:	1e6b      	subs	r3, r5, #1
 800a7e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a7ee:	2b30      	cmp	r3, #48	; 0x30
 800a7f0:	d0f8      	beq.n	800a7e4 <_dtoa_r+0x61c>
 800a7f2:	46bb      	mov	fp, r7
 800a7f4:	e04a      	b.n	800a88c <_dtoa_r+0x6c4>
 800a7f6:	4b06      	ldr	r3, [pc, #24]	; (800a810 <_dtoa_r+0x648>)
 800a7f8:	f7f5 fefe 	bl	80005f8 <__aeabi_dmul>
 800a7fc:	4680      	mov	r8, r0
 800a7fe:	4689      	mov	r9, r1
 800a800:	e7bd      	b.n	800a77e <_dtoa_r+0x5b6>
 800a802:	bf00      	nop
 800a804:	0800c9d0 	.word	0x0800c9d0
 800a808:	0800c9a8 	.word	0x0800c9a8
 800a80c:	3ff00000 	.word	0x3ff00000
 800a810:	40240000 	.word	0x40240000
 800a814:	401c0000 	.word	0x401c0000
 800a818:	40140000 	.word	0x40140000
 800a81c:	3fe00000 	.word	0x3fe00000
 800a820:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a824:	9d00      	ldr	r5, [sp, #0]
 800a826:	4642      	mov	r2, r8
 800a828:	464b      	mov	r3, r9
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	f7f6 f80d 	bl	800084c <__aeabi_ddiv>
 800a832:	f7f6 f991 	bl	8000b58 <__aeabi_d2iz>
 800a836:	9001      	str	r0, [sp, #4]
 800a838:	f7f5 fe74 	bl	8000524 <__aeabi_i2d>
 800a83c:	4642      	mov	r2, r8
 800a83e:	464b      	mov	r3, r9
 800a840:	f7f5 feda 	bl	80005f8 <__aeabi_dmul>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4630      	mov	r0, r6
 800a84a:	4639      	mov	r1, r7
 800a84c:	f7f5 fd1c 	bl	8000288 <__aeabi_dsub>
 800a850:	9e01      	ldr	r6, [sp, #4]
 800a852:	9f04      	ldr	r7, [sp, #16]
 800a854:	3630      	adds	r6, #48	; 0x30
 800a856:	f805 6b01 	strb.w	r6, [r5], #1
 800a85a:	9e00      	ldr	r6, [sp, #0]
 800a85c:	1bae      	subs	r6, r5, r6
 800a85e:	42b7      	cmp	r7, r6
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	d134      	bne.n	800a8d0 <_dtoa_r+0x708>
 800a866:	f7f5 fd11 	bl	800028c <__adddf3>
 800a86a:	4642      	mov	r2, r8
 800a86c:	464b      	mov	r3, r9
 800a86e:	4606      	mov	r6, r0
 800a870:	460f      	mov	r7, r1
 800a872:	f7f6 f951 	bl	8000b18 <__aeabi_dcmpgt>
 800a876:	b9c8      	cbnz	r0, 800a8ac <_dtoa_r+0x6e4>
 800a878:	4642      	mov	r2, r8
 800a87a:	464b      	mov	r3, r9
 800a87c:	4630      	mov	r0, r6
 800a87e:	4639      	mov	r1, r7
 800a880:	f7f6 f922 	bl	8000ac8 <__aeabi_dcmpeq>
 800a884:	b110      	cbz	r0, 800a88c <_dtoa_r+0x6c4>
 800a886:	9b01      	ldr	r3, [sp, #4]
 800a888:	07db      	lsls	r3, r3, #31
 800a88a:	d40f      	bmi.n	800a8ac <_dtoa_r+0x6e4>
 800a88c:	4651      	mov	r1, sl
 800a88e:	4620      	mov	r0, r4
 800a890:	f000 fbcc 	bl	800b02c <_Bfree>
 800a894:	2300      	movs	r3, #0
 800a896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a898:	702b      	strb	r3, [r5, #0]
 800a89a:	f10b 0301 	add.w	r3, fp, #1
 800a89e:	6013      	str	r3, [r2, #0]
 800a8a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f43f ace2 	beq.w	800a26c <_dtoa_r+0xa4>
 800a8a8:	601d      	str	r5, [r3, #0]
 800a8aa:	e4df      	b.n	800a26c <_dtoa_r+0xa4>
 800a8ac:	465f      	mov	r7, fp
 800a8ae:	462b      	mov	r3, r5
 800a8b0:	461d      	mov	r5, r3
 800a8b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8b6:	2a39      	cmp	r2, #57	; 0x39
 800a8b8:	d106      	bne.n	800a8c8 <_dtoa_r+0x700>
 800a8ba:	9a00      	ldr	r2, [sp, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d1f7      	bne.n	800a8b0 <_dtoa_r+0x6e8>
 800a8c0:	9900      	ldr	r1, [sp, #0]
 800a8c2:	2230      	movs	r2, #48	; 0x30
 800a8c4:	3701      	adds	r7, #1
 800a8c6:	700a      	strb	r2, [r1, #0]
 800a8c8:	781a      	ldrb	r2, [r3, #0]
 800a8ca:	3201      	adds	r2, #1
 800a8cc:	701a      	strb	r2, [r3, #0]
 800a8ce:	e790      	b.n	800a7f2 <_dtoa_r+0x62a>
 800a8d0:	4ba3      	ldr	r3, [pc, #652]	; (800ab60 <_dtoa_r+0x998>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f7f5 fe90 	bl	80005f8 <__aeabi_dmul>
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2300      	movs	r3, #0
 800a8dc:	4606      	mov	r6, r0
 800a8de:	460f      	mov	r7, r1
 800a8e0:	f7f6 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	d09e      	beq.n	800a826 <_dtoa_r+0x65e>
 800a8e8:	e7d0      	b.n	800a88c <_dtoa_r+0x6c4>
 800a8ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	f000 80ca 	beq.w	800aa86 <_dtoa_r+0x8be>
 800a8f2:	9a07      	ldr	r2, [sp, #28]
 800a8f4:	2a01      	cmp	r2, #1
 800a8f6:	f300 80ad 	bgt.w	800aa54 <_dtoa_r+0x88c>
 800a8fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8fc:	2a00      	cmp	r2, #0
 800a8fe:	f000 80a5 	beq.w	800aa4c <_dtoa_r+0x884>
 800a902:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a906:	9e08      	ldr	r6, [sp, #32]
 800a908:	9d05      	ldr	r5, [sp, #20]
 800a90a:	9a05      	ldr	r2, [sp, #20]
 800a90c:	441a      	add	r2, r3
 800a90e:	9205      	str	r2, [sp, #20]
 800a910:	9a06      	ldr	r2, [sp, #24]
 800a912:	2101      	movs	r1, #1
 800a914:	441a      	add	r2, r3
 800a916:	4620      	mov	r0, r4
 800a918:	9206      	str	r2, [sp, #24]
 800a91a:	f000 fc3d 	bl	800b198 <__i2b>
 800a91e:	4607      	mov	r7, r0
 800a920:	b165      	cbz	r5, 800a93c <_dtoa_r+0x774>
 800a922:	9b06      	ldr	r3, [sp, #24]
 800a924:	2b00      	cmp	r3, #0
 800a926:	dd09      	ble.n	800a93c <_dtoa_r+0x774>
 800a928:	42ab      	cmp	r3, r5
 800a92a:	9a05      	ldr	r2, [sp, #20]
 800a92c:	bfa8      	it	ge
 800a92e:	462b      	movge	r3, r5
 800a930:	1ad2      	subs	r2, r2, r3
 800a932:	9205      	str	r2, [sp, #20]
 800a934:	9a06      	ldr	r2, [sp, #24]
 800a936:	1aed      	subs	r5, r5, r3
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	9306      	str	r3, [sp, #24]
 800a93c:	9b08      	ldr	r3, [sp, #32]
 800a93e:	b1f3      	cbz	r3, 800a97e <_dtoa_r+0x7b6>
 800a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 80a3 	beq.w	800aa8e <_dtoa_r+0x8c6>
 800a948:	2e00      	cmp	r6, #0
 800a94a:	dd10      	ble.n	800a96e <_dtoa_r+0x7a6>
 800a94c:	4639      	mov	r1, r7
 800a94e:	4632      	mov	r2, r6
 800a950:	4620      	mov	r0, r4
 800a952:	f000 fce1 	bl	800b318 <__pow5mult>
 800a956:	4652      	mov	r2, sl
 800a958:	4601      	mov	r1, r0
 800a95a:	4607      	mov	r7, r0
 800a95c:	4620      	mov	r0, r4
 800a95e:	f000 fc31 	bl	800b1c4 <__multiply>
 800a962:	4651      	mov	r1, sl
 800a964:	4680      	mov	r8, r0
 800a966:	4620      	mov	r0, r4
 800a968:	f000 fb60 	bl	800b02c <_Bfree>
 800a96c:	46c2      	mov	sl, r8
 800a96e:	9b08      	ldr	r3, [sp, #32]
 800a970:	1b9a      	subs	r2, r3, r6
 800a972:	d004      	beq.n	800a97e <_dtoa_r+0x7b6>
 800a974:	4651      	mov	r1, sl
 800a976:	4620      	mov	r0, r4
 800a978:	f000 fcce 	bl	800b318 <__pow5mult>
 800a97c:	4682      	mov	sl, r0
 800a97e:	2101      	movs	r1, #1
 800a980:	4620      	mov	r0, r4
 800a982:	f000 fc09 	bl	800b198 <__i2b>
 800a986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a988:	2b00      	cmp	r3, #0
 800a98a:	4606      	mov	r6, r0
 800a98c:	f340 8081 	ble.w	800aa92 <_dtoa_r+0x8ca>
 800a990:	461a      	mov	r2, r3
 800a992:	4601      	mov	r1, r0
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fcbf 	bl	800b318 <__pow5mult>
 800a99a:	9b07      	ldr	r3, [sp, #28]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	4606      	mov	r6, r0
 800a9a0:	dd7a      	ble.n	800aa98 <_dtoa_r+0x8d0>
 800a9a2:	f04f 0800 	mov.w	r8, #0
 800a9a6:	6933      	ldr	r3, [r6, #16]
 800a9a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9ac:	6918      	ldr	r0, [r3, #16]
 800a9ae:	f000 fba5 	bl	800b0fc <__hi0bits>
 800a9b2:	f1c0 0020 	rsb	r0, r0, #32
 800a9b6:	9b06      	ldr	r3, [sp, #24]
 800a9b8:	4418      	add	r0, r3
 800a9ba:	f010 001f 	ands.w	r0, r0, #31
 800a9be:	f000 8094 	beq.w	800aaea <_dtoa_r+0x922>
 800a9c2:	f1c0 0320 	rsb	r3, r0, #32
 800a9c6:	2b04      	cmp	r3, #4
 800a9c8:	f340 8085 	ble.w	800aad6 <_dtoa_r+0x90e>
 800a9cc:	9b05      	ldr	r3, [sp, #20]
 800a9ce:	f1c0 001c 	rsb	r0, r0, #28
 800a9d2:	4403      	add	r3, r0
 800a9d4:	9305      	str	r3, [sp, #20]
 800a9d6:	9b06      	ldr	r3, [sp, #24]
 800a9d8:	4403      	add	r3, r0
 800a9da:	4405      	add	r5, r0
 800a9dc:	9306      	str	r3, [sp, #24]
 800a9de:	9b05      	ldr	r3, [sp, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	dd05      	ble.n	800a9f0 <_dtoa_r+0x828>
 800a9e4:	4651      	mov	r1, sl
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	f000 fcef 	bl	800b3cc <__lshift>
 800a9ee:	4682      	mov	sl, r0
 800a9f0:	9b06      	ldr	r3, [sp, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	dd05      	ble.n	800aa02 <_dtoa_r+0x83a>
 800a9f6:	4631      	mov	r1, r6
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fce6 	bl	800b3cc <__lshift>
 800aa00:	4606      	mov	r6, r0
 800aa02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d072      	beq.n	800aaee <_dtoa_r+0x926>
 800aa08:	4631      	mov	r1, r6
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	f000 fd4a 	bl	800b4a4 <__mcmp>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	da6c      	bge.n	800aaee <_dtoa_r+0x926>
 800aa14:	2300      	movs	r3, #0
 800aa16:	4651      	mov	r1, sl
 800aa18:	220a      	movs	r2, #10
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fb28 	bl	800b070 <__multadd>
 800aa20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aa26:	4682      	mov	sl, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 81b0 	beq.w	800ad8e <_dtoa_r+0xbc6>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	4639      	mov	r1, r7
 800aa32:	220a      	movs	r2, #10
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 fb1b 	bl	800b070 <__multadd>
 800aa3a:	9b01      	ldr	r3, [sp, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	4607      	mov	r7, r0
 800aa40:	f300 8096 	bgt.w	800ab70 <_dtoa_r+0x9a8>
 800aa44:	9b07      	ldr	r3, [sp, #28]
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	dc59      	bgt.n	800aafe <_dtoa_r+0x936>
 800aa4a:	e091      	b.n	800ab70 <_dtoa_r+0x9a8>
 800aa4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa52:	e758      	b.n	800a906 <_dtoa_r+0x73e>
 800aa54:	9b04      	ldr	r3, [sp, #16]
 800aa56:	1e5e      	subs	r6, r3, #1
 800aa58:	9b08      	ldr	r3, [sp, #32]
 800aa5a:	42b3      	cmp	r3, r6
 800aa5c:	bfbf      	itttt	lt
 800aa5e:	9b08      	ldrlt	r3, [sp, #32]
 800aa60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800aa62:	9608      	strlt	r6, [sp, #32]
 800aa64:	1af3      	sublt	r3, r6, r3
 800aa66:	bfb4      	ite	lt
 800aa68:	18d2      	addlt	r2, r2, r3
 800aa6a:	1b9e      	subge	r6, r3, r6
 800aa6c:	9b04      	ldr	r3, [sp, #16]
 800aa6e:	bfbc      	itt	lt
 800aa70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800aa72:	2600      	movlt	r6, #0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bfb7      	itett	lt
 800aa78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aa7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aa80:	1a9d      	sublt	r5, r3, r2
 800aa82:	2300      	movlt	r3, #0
 800aa84:	e741      	b.n	800a90a <_dtoa_r+0x742>
 800aa86:	9e08      	ldr	r6, [sp, #32]
 800aa88:	9d05      	ldr	r5, [sp, #20]
 800aa8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa8c:	e748      	b.n	800a920 <_dtoa_r+0x758>
 800aa8e:	9a08      	ldr	r2, [sp, #32]
 800aa90:	e770      	b.n	800a974 <_dtoa_r+0x7ac>
 800aa92:	9b07      	ldr	r3, [sp, #28]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	dc19      	bgt.n	800aacc <_dtoa_r+0x904>
 800aa98:	9b02      	ldr	r3, [sp, #8]
 800aa9a:	b9bb      	cbnz	r3, 800aacc <_dtoa_r+0x904>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaa2:	b99b      	cbnz	r3, 800aacc <_dtoa_r+0x904>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aaaa:	0d1b      	lsrs	r3, r3, #20
 800aaac:	051b      	lsls	r3, r3, #20
 800aaae:	b183      	cbz	r3, 800aad2 <_dtoa_r+0x90a>
 800aab0:	9b05      	ldr	r3, [sp, #20]
 800aab2:	3301      	adds	r3, #1
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	9b06      	ldr	r3, [sp, #24]
 800aab8:	3301      	adds	r3, #1
 800aaba:	9306      	str	r3, [sp, #24]
 800aabc:	f04f 0801 	mov.w	r8, #1
 800aac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f47f af6f 	bne.w	800a9a6 <_dtoa_r+0x7de>
 800aac8:	2001      	movs	r0, #1
 800aaca:	e774      	b.n	800a9b6 <_dtoa_r+0x7ee>
 800aacc:	f04f 0800 	mov.w	r8, #0
 800aad0:	e7f6      	b.n	800aac0 <_dtoa_r+0x8f8>
 800aad2:	4698      	mov	r8, r3
 800aad4:	e7f4      	b.n	800aac0 <_dtoa_r+0x8f8>
 800aad6:	d082      	beq.n	800a9de <_dtoa_r+0x816>
 800aad8:	9a05      	ldr	r2, [sp, #20]
 800aada:	331c      	adds	r3, #28
 800aadc:	441a      	add	r2, r3
 800aade:	9205      	str	r2, [sp, #20]
 800aae0:	9a06      	ldr	r2, [sp, #24]
 800aae2:	441a      	add	r2, r3
 800aae4:	441d      	add	r5, r3
 800aae6:	9206      	str	r2, [sp, #24]
 800aae8:	e779      	b.n	800a9de <_dtoa_r+0x816>
 800aaea:	4603      	mov	r3, r0
 800aaec:	e7f4      	b.n	800aad8 <_dtoa_r+0x910>
 800aaee:	9b04      	ldr	r3, [sp, #16]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	dc37      	bgt.n	800ab64 <_dtoa_r+0x99c>
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	dd34      	ble.n	800ab64 <_dtoa_r+0x99c>
 800aafa:	9b04      	ldr	r3, [sp, #16]
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	9b01      	ldr	r3, [sp, #4]
 800ab00:	b963      	cbnz	r3, 800ab1c <_dtoa_r+0x954>
 800ab02:	4631      	mov	r1, r6
 800ab04:	2205      	movs	r2, #5
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 fab2 	bl	800b070 <__multadd>
 800ab0c:	4601      	mov	r1, r0
 800ab0e:	4606      	mov	r6, r0
 800ab10:	4650      	mov	r0, sl
 800ab12:	f000 fcc7 	bl	800b4a4 <__mcmp>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	f73f adbb 	bgt.w	800a692 <_dtoa_r+0x4ca>
 800ab1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab1e:	9d00      	ldr	r5, [sp, #0]
 800ab20:	ea6f 0b03 	mvn.w	fp, r3
 800ab24:	f04f 0800 	mov.w	r8, #0
 800ab28:	4631      	mov	r1, r6
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	f000 fa7e 	bl	800b02c <_Bfree>
 800ab30:	2f00      	cmp	r7, #0
 800ab32:	f43f aeab 	beq.w	800a88c <_dtoa_r+0x6c4>
 800ab36:	f1b8 0f00 	cmp.w	r8, #0
 800ab3a:	d005      	beq.n	800ab48 <_dtoa_r+0x980>
 800ab3c:	45b8      	cmp	r8, r7
 800ab3e:	d003      	beq.n	800ab48 <_dtoa_r+0x980>
 800ab40:	4641      	mov	r1, r8
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 fa72 	bl	800b02c <_Bfree>
 800ab48:	4639      	mov	r1, r7
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 fa6e 	bl	800b02c <_Bfree>
 800ab50:	e69c      	b.n	800a88c <_dtoa_r+0x6c4>
 800ab52:	2600      	movs	r6, #0
 800ab54:	4637      	mov	r7, r6
 800ab56:	e7e1      	b.n	800ab1c <_dtoa_r+0x954>
 800ab58:	46bb      	mov	fp, r7
 800ab5a:	4637      	mov	r7, r6
 800ab5c:	e599      	b.n	800a692 <_dtoa_r+0x4ca>
 800ab5e:	bf00      	nop
 800ab60:	40240000 	.word	0x40240000
 800ab64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 80c8 	beq.w	800acfc <_dtoa_r+0xb34>
 800ab6c:	9b04      	ldr	r3, [sp, #16]
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	2d00      	cmp	r5, #0
 800ab72:	dd05      	ble.n	800ab80 <_dtoa_r+0x9b8>
 800ab74:	4639      	mov	r1, r7
 800ab76:	462a      	mov	r2, r5
 800ab78:	4620      	mov	r0, r4
 800ab7a:	f000 fc27 	bl	800b3cc <__lshift>
 800ab7e:	4607      	mov	r7, r0
 800ab80:	f1b8 0f00 	cmp.w	r8, #0
 800ab84:	d05b      	beq.n	800ac3e <_dtoa_r+0xa76>
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f000 fa0f 	bl	800afac <_Balloc>
 800ab8e:	4605      	mov	r5, r0
 800ab90:	b928      	cbnz	r0, 800ab9e <_dtoa_r+0x9d6>
 800ab92:	4b83      	ldr	r3, [pc, #524]	; (800ada0 <_dtoa_r+0xbd8>)
 800ab94:	4602      	mov	r2, r0
 800ab96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab9a:	f7ff bb2e 	b.w	800a1fa <_dtoa_r+0x32>
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	3202      	adds	r2, #2
 800aba2:	0092      	lsls	r2, r2, #2
 800aba4:	f107 010c 	add.w	r1, r7, #12
 800aba8:	300c      	adds	r0, #12
 800abaa:	f000 ffab 	bl	800bb04 <memcpy>
 800abae:	2201      	movs	r2, #1
 800abb0:	4629      	mov	r1, r5
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fc0a 	bl	800b3cc <__lshift>
 800abb8:	9b00      	ldr	r3, [sp, #0]
 800abba:	3301      	adds	r3, #1
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abc2:	4413      	add	r3, r2
 800abc4:	9308      	str	r3, [sp, #32]
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	46b8      	mov	r8, r7
 800abce:	9306      	str	r3, [sp, #24]
 800abd0:	4607      	mov	r7, r0
 800abd2:	9b04      	ldr	r3, [sp, #16]
 800abd4:	4631      	mov	r1, r6
 800abd6:	3b01      	subs	r3, #1
 800abd8:	4650      	mov	r0, sl
 800abda:	9301      	str	r3, [sp, #4]
 800abdc:	f7ff fa6c 	bl	800a0b8 <quorem>
 800abe0:	4641      	mov	r1, r8
 800abe2:	9002      	str	r0, [sp, #8]
 800abe4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800abe8:	4650      	mov	r0, sl
 800abea:	f000 fc5b 	bl	800b4a4 <__mcmp>
 800abee:	463a      	mov	r2, r7
 800abf0:	9005      	str	r0, [sp, #20]
 800abf2:	4631      	mov	r1, r6
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fc71 	bl	800b4dc <__mdiff>
 800abfa:	68c2      	ldr	r2, [r0, #12]
 800abfc:	4605      	mov	r5, r0
 800abfe:	bb02      	cbnz	r2, 800ac42 <_dtoa_r+0xa7a>
 800ac00:	4601      	mov	r1, r0
 800ac02:	4650      	mov	r0, sl
 800ac04:	f000 fc4e 	bl	800b4a4 <__mcmp>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ac10:	f000 fa0c 	bl	800b02c <_Bfree>
 800ac14:	9b07      	ldr	r3, [sp, #28]
 800ac16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac18:	9d04      	ldr	r5, [sp, #16]
 800ac1a:	ea43 0102 	orr.w	r1, r3, r2
 800ac1e:	9b06      	ldr	r3, [sp, #24]
 800ac20:	4319      	orrs	r1, r3
 800ac22:	d110      	bne.n	800ac46 <_dtoa_r+0xa7e>
 800ac24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac28:	d029      	beq.n	800ac7e <_dtoa_r+0xab6>
 800ac2a:	9b05      	ldr	r3, [sp, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dd02      	ble.n	800ac36 <_dtoa_r+0xa6e>
 800ac30:	9b02      	ldr	r3, [sp, #8]
 800ac32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	f883 9000 	strb.w	r9, [r3]
 800ac3c:	e774      	b.n	800ab28 <_dtoa_r+0x960>
 800ac3e:	4638      	mov	r0, r7
 800ac40:	e7ba      	b.n	800abb8 <_dtoa_r+0x9f0>
 800ac42:	2201      	movs	r2, #1
 800ac44:	e7e1      	b.n	800ac0a <_dtoa_r+0xa42>
 800ac46:	9b05      	ldr	r3, [sp, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	db04      	blt.n	800ac56 <_dtoa_r+0xa8e>
 800ac4c:	9907      	ldr	r1, [sp, #28]
 800ac4e:	430b      	orrs	r3, r1
 800ac50:	9906      	ldr	r1, [sp, #24]
 800ac52:	430b      	orrs	r3, r1
 800ac54:	d120      	bne.n	800ac98 <_dtoa_r+0xad0>
 800ac56:	2a00      	cmp	r2, #0
 800ac58:	dded      	ble.n	800ac36 <_dtoa_r+0xa6e>
 800ac5a:	4651      	mov	r1, sl
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 fbb4 	bl	800b3cc <__lshift>
 800ac64:	4631      	mov	r1, r6
 800ac66:	4682      	mov	sl, r0
 800ac68:	f000 fc1c 	bl	800b4a4 <__mcmp>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	dc03      	bgt.n	800ac78 <_dtoa_r+0xab0>
 800ac70:	d1e1      	bne.n	800ac36 <_dtoa_r+0xa6e>
 800ac72:	f019 0f01 	tst.w	r9, #1
 800ac76:	d0de      	beq.n	800ac36 <_dtoa_r+0xa6e>
 800ac78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac7c:	d1d8      	bne.n	800ac30 <_dtoa_r+0xa68>
 800ac7e:	9a01      	ldr	r2, [sp, #4]
 800ac80:	2339      	movs	r3, #57	; 0x39
 800ac82:	7013      	strb	r3, [r2, #0]
 800ac84:	462b      	mov	r3, r5
 800ac86:	461d      	mov	r5, r3
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac8e:	2a39      	cmp	r2, #57	; 0x39
 800ac90:	d06c      	beq.n	800ad6c <_dtoa_r+0xba4>
 800ac92:	3201      	adds	r2, #1
 800ac94:	701a      	strb	r2, [r3, #0]
 800ac96:	e747      	b.n	800ab28 <_dtoa_r+0x960>
 800ac98:	2a00      	cmp	r2, #0
 800ac9a:	dd07      	ble.n	800acac <_dtoa_r+0xae4>
 800ac9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aca0:	d0ed      	beq.n	800ac7e <_dtoa_r+0xab6>
 800aca2:	9a01      	ldr	r2, [sp, #4]
 800aca4:	f109 0301 	add.w	r3, r9, #1
 800aca8:	7013      	strb	r3, [r2, #0]
 800acaa:	e73d      	b.n	800ab28 <_dtoa_r+0x960>
 800acac:	9b04      	ldr	r3, [sp, #16]
 800acae:	9a08      	ldr	r2, [sp, #32]
 800acb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d043      	beq.n	800ad40 <_dtoa_r+0xb78>
 800acb8:	4651      	mov	r1, sl
 800acba:	2300      	movs	r3, #0
 800acbc:	220a      	movs	r2, #10
 800acbe:	4620      	mov	r0, r4
 800acc0:	f000 f9d6 	bl	800b070 <__multadd>
 800acc4:	45b8      	cmp	r8, r7
 800acc6:	4682      	mov	sl, r0
 800acc8:	f04f 0300 	mov.w	r3, #0
 800accc:	f04f 020a 	mov.w	r2, #10
 800acd0:	4641      	mov	r1, r8
 800acd2:	4620      	mov	r0, r4
 800acd4:	d107      	bne.n	800ace6 <_dtoa_r+0xb1e>
 800acd6:	f000 f9cb 	bl	800b070 <__multadd>
 800acda:	4680      	mov	r8, r0
 800acdc:	4607      	mov	r7, r0
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	3301      	adds	r3, #1
 800ace2:	9304      	str	r3, [sp, #16]
 800ace4:	e775      	b.n	800abd2 <_dtoa_r+0xa0a>
 800ace6:	f000 f9c3 	bl	800b070 <__multadd>
 800acea:	4639      	mov	r1, r7
 800acec:	4680      	mov	r8, r0
 800acee:	2300      	movs	r3, #0
 800acf0:	220a      	movs	r2, #10
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 f9bc 	bl	800b070 <__multadd>
 800acf8:	4607      	mov	r7, r0
 800acfa:	e7f0      	b.n	800acde <_dtoa_r+0xb16>
 800acfc:	9b04      	ldr	r3, [sp, #16]
 800acfe:	9301      	str	r3, [sp, #4]
 800ad00:	9d00      	ldr	r5, [sp, #0]
 800ad02:	4631      	mov	r1, r6
 800ad04:	4650      	mov	r0, sl
 800ad06:	f7ff f9d7 	bl	800a0b8 <quorem>
 800ad0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ad0e:	9b00      	ldr	r3, [sp, #0]
 800ad10:	f805 9b01 	strb.w	r9, [r5], #1
 800ad14:	1aea      	subs	r2, r5, r3
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	dd07      	ble.n	800ad2c <_dtoa_r+0xb64>
 800ad1c:	4651      	mov	r1, sl
 800ad1e:	2300      	movs	r3, #0
 800ad20:	220a      	movs	r2, #10
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 f9a4 	bl	800b070 <__multadd>
 800ad28:	4682      	mov	sl, r0
 800ad2a:	e7ea      	b.n	800ad02 <_dtoa_r+0xb3a>
 800ad2c:	9b01      	ldr	r3, [sp, #4]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfc8      	it	gt
 800ad32:	461d      	movgt	r5, r3
 800ad34:	9b00      	ldr	r3, [sp, #0]
 800ad36:	bfd8      	it	le
 800ad38:	2501      	movle	r5, #1
 800ad3a:	441d      	add	r5, r3
 800ad3c:	f04f 0800 	mov.w	r8, #0
 800ad40:	4651      	mov	r1, sl
 800ad42:	2201      	movs	r2, #1
 800ad44:	4620      	mov	r0, r4
 800ad46:	f000 fb41 	bl	800b3cc <__lshift>
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4682      	mov	sl, r0
 800ad4e:	f000 fba9 	bl	800b4a4 <__mcmp>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	dc96      	bgt.n	800ac84 <_dtoa_r+0xabc>
 800ad56:	d102      	bne.n	800ad5e <_dtoa_r+0xb96>
 800ad58:	f019 0f01 	tst.w	r9, #1
 800ad5c:	d192      	bne.n	800ac84 <_dtoa_r+0xabc>
 800ad5e:	462b      	mov	r3, r5
 800ad60:	461d      	mov	r5, r3
 800ad62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad66:	2a30      	cmp	r2, #48	; 0x30
 800ad68:	d0fa      	beq.n	800ad60 <_dtoa_r+0xb98>
 800ad6a:	e6dd      	b.n	800ab28 <_dtoa_r+0x960>
 800ad6c:	9a00      	ldr	r2, [sp, #0]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d189      	bne.n	800ac86 <_dtoa_r+0xabe>
 800ad72:	f10b 0b01 	add.w	fp, fp, #1
 800ad76:	2331      	movs	r3, #49	; 0x31
 800ad78:	e796      	b.n	800aca8 <_dtoa_r+0xae0>
 800ad7a:	4b0a      	ldr	r3, [pc, #40]	; (800ada4 <_dtoa_r+0xbdc>)
 800ad7c:	f7ff ba99 	b.w	800a2b2 <_dtoa_r+0xea>
 800ad80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	f47f aa6d 	bne.w	800a262 <_dtoa_r+0x9a>
 800ad88:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <_dtoa_r+0xbe0>)
 800ad8a:	f7ff ba92 	b.w	800a2b2 <_dtoa_r+0xea>
 800ad8e:	9b01      	ldr	r3, [sp, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	dcb5      	bgt.n	800ad00 <_dtoa_r+0xb38>
 800ad94:	9b07      	ldr	r3, [sp, #28]
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	f73f aeb1 	bgt.w	800aafe <_dtoa_r+0x936>
 800ad9c:	e7b0      	b.n	800ad00 <_dtoa_r+0xb38>
 800ad9e:	bf00      	nop
 800ada0:	0800c938 	.word	0x0800c938
 800ada4:	0800c898 	.word	0x0800c898
 800ada8:	0800c8bc 	.word	0x0800c8bc

0800adac <_free_r>:
 800adac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adae:	2900      	cmp	r1, #0
 800adb0:	d044      	beq.n	800ae3c <_free_r+0x90>
 800adb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adb6:	9001      	str	r0, [sp, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f1a1 0404 	sub.w	r4, r1, #4
 800adbe:	bfb8      	it	lt
 800adc0:	18e4      	addlt	r4, r4, r3
 800adc2:	f000 f8e7 	bl	800af94 <__malloc_lock>
 800adc6:	4a1e      	ldr	r2, [pc, #120]	; (800ae40 <_free_r+0x94>)
 800adc8:	9801      	ldr	r0, [sp, #4]
 800adca:	6813      	ldr	r3, [r2, #0]
 800adcc:	b933      	cbnz	r3, 800addc <_free_r+0x30>
 800adce:	6063      	str	r3, [r4, #4]
 800add0:	6014      	str	r4, [r2, #0]
 800add2:	b003      	add	sp, #12
 800add4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800add8:	f000 b8e2 	b.w	800afa0 <__malloc_unlock>
 800addc:	42a3      	cmp	r3, r4
 800adde:	d908      	bls.n	800adf2 <_free_r+0x46>
 800ade0:	6825      	ldr	r5, [r4, #0]
 800ade2:	1961      	adds	r1, r4, r5
 800ade4:	428b      	cmp	r3, r1
 800ade6:	bf01      	itttt	eq
 800ade8:	6819      	ldreq	r1, [r3, #0]
 800adea:	685b      	ldreq	r3, [r3, #4]
 800adec:	1949      	addeq	r1, r1, r5
 800adee:	6021      	streq	r1, [r4, #0]
 800adf0:	e7ed      	b.n	800adce <_free_r+0x22>
 800adf2:	461a      	mov	r2, r3
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	b10b      	cbz	r3, 800adfc <_free_r+0x50>
 800adf8:	42a3      	cmp	r3, r4
 800adfa:	d9fa      	bls.n	800adf2 <_free_r+0x46>
 800adfc:	6811      	ldr	r1, [r2, #0]
 800adfe:	1855      	adds	r5, r2, r1
 800ae00:	42a5      	cmp	r5, r4
 800ae02:	d10b      	bne.n	800ae1c <_free_r+0x70>
 800ae04:	6824      	ldr	r4, [r4, #0]
 800ae06:	4421      	add	r1, r4
 800ae08:	1854      	adds	r4, r2, r1
 800ae0a:	42a3      	cmp	r3, r4
 800ae0c:	6011      	str	r1, [r2, #0]
 800ae0e:	d1e0      	bne.n	800add2 <_free_r+0x26>
 800ae10:	681c      	ldr	r4, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	6053      	str	r3, [r2, #4]
 800ae16:	440c      	add	r4, r1
 800ae18:	6014      	str	r4, [r2, #0]
 800ae1a:	e7da      	b.n	800add2 <_free_r+0x26>
 800ae1c:	d902      	bls.n	800ae24 <_free_r+0x78>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	e7d6      	b.n	800add2 <_free_r+0x26>
 800ae24:	6825      	ldr	r5, [r4, #0]
 800ae26:	1961      	adds	r1, r4, r5
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	bf04      	itt	eq
 800ae2c:	6819      	ldreq	r1, [r3, #0]
 800ae2e:	685b      	ldreq	r3, [r3, #4]
 800ae30:	6063      	str	r3, [r4, #4]
 800ae32:	bf04      	itt	eq
 800ae34:	1949      	addeq	r1, r1, r5
 800ae36:	6021      	streq	r1, [r4, #0]
 800ae38:	6054      	str	r4, [r2, #4]
 800ae3a:	e7ca      	b.n	800add2 <_free_r+0x26>
 800ae3c:	b003      	add	sp, #12
 800ae3e:	bd30      	pop	{r4, r5, pc}
 800ae40:	20001e7c 	.word	0x20001e7c

0800ae44 <malloc>:
 800ae44:	4b02      	ldr	r3, [pc, #8]	; (800ae50 <malloc+0xc>)
 800ae46:	4601      	mov	r1, r0
 800ae48:	6818      	ldr	r0, [r3, #0]
 800ae4a:	f000 b823 	b.w	800ae94 <_malloc_r>
 800ae4e:	bf00      	nop
 800ae50:	2000006c 	.word	0x2000006c

0800ae54 <sbrk_aligned>:
 800ae54:	b570      	push	{r4, r5, r6, lr}
 800ae56:	4e0e      	ldr	r6, [pc, #56]	; (800ae90 <sbrk_aligned+0x3c>)
 800ae58:	460c      	mov	r4, r1
 800ae5a:	6831      	ldr	r1, [r6, #0]
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	b911      	cbnz	r1, 800ae66 <sbrk_aligned+0x12>
 800ae60:	f000 fe40 	bl	800bae4 <_sbrk_r>
 800ae64:	6030      	str	r0, [r6, #0]
 800ae66:	4621      	mov	r1, r4
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f000 fe3b 	bl	800bae4 <_sbrk_r>
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	d00a      	beq.n	800ae88 <sbrk_aligned+0x34>
 800ae72:	1cc4      	adds	r4, r0, #3
 800ae74:	f024 0403 	bic.w	r4, r4, #3
 800ae78:	42a0      	cmp	r0, r4
 800ae7a:	d007      	beq.n	800ae8c <sbrk_aligned+0x38>
 800ae7c:	1a21      	subs	r1, r4, r0
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f000 fe30 	bl	800bae4 <_sbrk_r>
 800ae84:	3001      	adds	r0, #1
 800ae86:	d101      	bne.n	800ae8c <sbrk_aligned+0x38>
 800ae88:	f04f 34ff 	mov.w	r4, #4294967295
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	20001e80 	.word	0x20001e80

0800ae94 <_malloc_r>:
 800ae94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae98:	1ccd      	adds	r5, r1, #3
 800ae9a:	f025 0503 	bic.w	r5, r5, #3
 800ae9e:	3508      	adds	r5, #8
 800aea0:	2d0c      	cmp	r5, #12
 800aea2:	bf38      	it	cc
 800aea4:	250c      	movcc	r5, #12
 800aea6:	2d00      	cmp	r5, #0
 800aea8:	4607      	mov	r7, r0
 800aeaa:	db01      	blt.n	800aeb0 <_malloc_r+0x1c>
 800aeac:	42a9      	cmp	r1, r5
 800aeae:	d905      	bls.n	800aebc <_malloc_r+0x28>
 800aeb0:	230c      	movs	r3, #12
 800aeb2:	603b      	str	r3, [r7, #0]
 800aeb4:	2600      	movs	r6, #0
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aebc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af90 <_malloc_r+0xfc>
 800aec0:	f000 f868 	bl	800af94 <__malloc_lock>
 800aec4:	f8d8 3000 	ldr.w	r3, [r8]
 800aec8:	461c      	mov	r4, r3
 800aeca:	bb5c      	cbnz	r4, 800af24 <_malloc_r+0x90>
 800aecc:	4629      	mov	r1, r5
 800aece:	4638      	mov	r0, r7
 800aed0:	f7ff ffc0 	bl	800ae54 <sbrk_aligned>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	4604      	mov	r4, r0
 800aed8:	d155      	bne.n	800af86 <_malloc_r+0xf2>
 800aeda:	f8d8 4000 	ldr.w	r4, [r8]
 800aede:	4626      	mov	r6, r4
 800aee0:	2e00      	cmp	r6, #0
 800aee2:	d145      	bne.n	800af70 <_malloc_r+0xdc>
 800aee4:	2c00      	cmp	r4, #0
 800aee6:	d048      	beq.n	800af7a <_malloc_r+0xe6>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	4631      	mov	r1, r6
 800aeec:	4638      	mov	r0, r7
 800aeee:	eb04 0903 	add.w	r9, r4, r3
 800aef2:	f000 fdf7 	bl	800bae4 <_sbrk_r>
 800aef6:	4581      	cmp	r9, r0
 800aef8:	d13f      	bne.n	800af7a <_malloc_r+0xe6>
 800aefa:	6821      	ldr	r1, [r4, #0]
 800aefc:	1a6d      	subs	r5, r5, r1
 800aefe:	4629      	mov	r1, r5
 800af00:	4638      	mov	r0, r7
 800af02:	f7ff ffa7 	bl	800ae54 <sbrk_aligned>
 800af06:	3001      	adds	r0, #1
 800af08:	d037      	beq.n	800af7a <_malloc_r+0xe6>
 800af0a:	6823      	ldr	r3, [r4, #0]
 800af0c:	442b      	add	r3, r5
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	f8d8 3000 	ldr.w	r3, [r8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d038      	beq.n	800af8a <_malloc_r+0xf6>
 800af18:	685a      	ldr	r2, [r3, #4]
 800af1a:	42a2      	cmp	r2, r4
 800af1c:	d12b      	bne.n	800af76 <_malloc_r+0xe2>
 800af1e:	2200      	movs	r2, #0
 800af20:	605a      	str	r2, [r3, #4]
 800af22:	e00f      	b.n	800af44 <_malloc_r+0xb0>
 800af24:	6822      	ldr	r2, [r4, #0]
 800af26:	1b52      	subs	r2, r2, r5
 800af28:	d41f      	bmi.n	800af6a <_malloc_r+0xd6>
 800af2a:	2a0b      	cmp	r2, #11
 800af2c:	d917      	bls.n	800af5e <_malloc_r+0xca>
 800af2e:	1961      	adds	r1, r4, r5
 800af30:	42a3      	cmp	r3, r4
 800af32:	6025      	str	r5, [r4, #0]
 800af34:	bf18      	it	ne
 800af36:	6059      	strne	r1, [r3, #4]
 800af38:	6863      	ldr	r3, [r4, #4]
 800af3a:	bf08      	it	eq
 800af3c:	f8c8 1000 	streq.w	r1, [r8]
 800af40:	5162      	str	r2, [r4, r5]
 800af42:	604b      	str	r3, [r1, #4]
 800af44:	4638      	mov	r0, r7
 800af46:	f104 060b 	add.w	r6, r4, #11
 800af4a:	f000 f829 	bl	800afa0 <__malloc_unlock>
 800af4e:	f026 0607 	bic.w	r6, r6, #7
 800af52:	1d23      	adds	r3, r4, #4
 800af54:	1af2      	subs	r2, r6, r3
 800af56:	d0ae      	beq.n	800aeb6 <_malloc_r+0x22>
 800af58:	1b9b      	subs	r3, r3, r6
 800af5a:	50a3      	str	r3, [r4, r2]
 800af5c:	e7ab      	b.n	800aeb6 <_malloc_r+0x22>
 800af5e:	42a3      	cmp	r3, r4
 800af60:	6862      	ldr	r2, [r4, #4]
 800af62:	d1dd      	bne.n	800af20 <_malloc_r+0x8c>
 800af64:	f8c8 2000 	str.w	r2, [r8]
 800af68:	e7ec      	b.n	800af44 <_malloc_r+0xb0>
 800af6a:	4623      	mov	r3, r4
 800af6c:	6864      	ldr	r4, [r4, #4]
 800af6e:	e7ac      	b.n	800aeca <_malloc_r+0x36>
 800af70:	4634      	mov	r4, r6
 800af72:	6876      	ldr	r6, [r6, #4]
 800af74:	e7b4      	b.n	800aee0 <_malloc_r+0x4c>
 800af76:	4613      	mov	r3, r2
 800af78:	e7cc      	b.n	800af14 <_malloc_r+0x80>
 800af7a:	230c      	movs	r3, #12
 800af7c:	603b      	str	r3, [r7, #0]
 800af7e:	4638      	mov	r0, r7
 800af80:	f000 f80e 	bl	800afa0 <__malloc_unlock>
 800af84:	e797      	b.n	800aeb6 <_malloc_r+0x22>
 800af86:	6025      	str	r5, [r4, #0]
 800af88:	e7dc      	b.n	800af44 <_malloc_r+0xb0>
 800af8a:	605b      	str	r3, [r3, #4]
 800af8c:	deff      	udf	#255	; 0xff
 800af8e:	bf00      	nop
 800af90:	20001e7c 	.word	0x20001e7c

0800af94 <__malloc_lock>:
 800af94:	4801      	ldr	r0, [pc, #4]	; (800af9c <__malloc_lock+0x8>)
 800af96:	f7ff b88d 	b.w	800a0b4 <__retarget_lock_acquire_recursive>
 800af9a:	bf00      	nop
 800af9c:	20001e78 	.word	0x20001e78

0800afa0 <__malloc_unlock>:
 800afa0:	4801      	ldr	r0, [pc, #4]	; (800afa8 <__malloc_unlock+0x8>)
 800afa2:	f7ff b888 	b.w	800a0b6 <__retarget_lock_release_recursive>
 800afa6:	bf00      	nop
 800afa8:	20001e78 	.word	0x20001e78

0800afac <_Balloc>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	69c6      	ldr	r6, [r0, #28]
 800afb0:	4604      	mov	r4, r0
 800afb2:	460d      	mov	r5, r1
 800afb4:	b976      	cbnz	r6, 800afd4 <_Balloc+0x28>
 800afb6:	2010      	movs	r0, #16
 800afb8:	f7ff ff44 	bl	800ae44 <malloc>
 800afbc:	4602      	mov	r2, r0
 800afbe:	61e0      	str	r0, [r4, #28]
 800afc0:	b920      	cbnz	r0, 800afcc <_Balloc+0x20>
 800afc2:	4b18      	ldr	r3, [pc, #96]	; (800b024 <_Balloc+0x78>)
 800afc4:	4818      	ldr	r0, [pc, #96]	; (800b028 <_Balloc+0x7c>)
 800afc6:	216b      	movs	r1, #107	; 0x6b
 800afc8:	f000 fdaa 	bl	800bb20 <__assert_func>
 800afcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afd0:	6006      	str	r6, [r0, #0]
 800afd2:	60c6      	str	r6, [r0, #12]
 800afd4:	69e6      	ldr	r6, [r4, #28]
 800afd6:	68f3      	ldr	r3, [r6, #12]
 800afd8:	b183      	cbz	r3, 800affc <_Balloc+0x50>
 800afda:	69e3      	ldr	r3, [r4, #28]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afe2:	b9b8      	cbnz	r0, 800b014 <_Balloc+0x68>
 800afe4:	2101      	movs	r1, #1
 800afe6:	fa01 f605 	lsl.w	r6, r1, r5
 800afea:	1d72      	adds	r2, r6, #5
 800afec:	0092      	lsls	r2, r2, #2
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 fdb4 	bl	800bb5c <_calloc_r>
 800aff4:	b160      	cbz	r0, 800b010 <_Balloc+0x64>
 800aff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800affa:	e00e      	b.n	800b01a <_Balloc+0x6e>
 800affc:	2221      	movs	r2, #33	; 0x21
 800affe:	2104      	movs	r1, #4
 800b000:	4620      	mov	r0, r4
 800b002:	f000 fdab 	bl	800bb5c <_calloc_r>
 800b006:	69e3      	ldr	r3, [r4, #28]
 800b008:	60f0      	str	r0, [r6, #12]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e4      	bne.n	800afda <_Balloc+0x2e>
 800b010:	2000      	movs	r0, #0
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	6802      	ldr	r2, [r0, #0]
 800b016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b01a:	2300      	movs	r3, #0
 800b01c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b020:	e7f7      	b.n	800b012 <_Balloc+0x66>
 800b022:	bf00      	nop
 800b024:	0800c8c9 	.word	0x0800c8c9
 800b028:	0800c949 	.word	0x0800c949

0800b02c <_Bfree>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	69c6      	ldr	r6, [r0, #28]
 800b030:	4605      	mov	r5, r0
 800b032:	460c      	mov	r4, r1
 800b034:	b976      	cbnz	r6, 800b054 <_Bfree+0x28>
 800b036:	2010      	movs	r0, #16
 800b038:	f7ff ff04 	bl	800ae44 <malloc>
 800b03c:	4602      	mov	r2, r0
 800b03e:	61e8      	str	r0, [r5, #28]
 800b040:	b920      	cbnz	r0, 800b04c <_Bfree+0x20>
 800b042:	4b09      	ldr	r3, [pc, #36]	; (800b068 <_Bfree+0x3c>)
 800b044:	4809      	ldr	r0, [pc, #36]	; (800b06c <_Bfree+0x40>)
 800b046:	218f      	movs	r1, #143	; 0x8f
 800b048:	f000 fd6a 	bl	800bb20 <__assert_func>
 800b04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b050:	6006      	str	r6, [r0, #0]
 800b052:	60c6      	str	r6, [r0, #12]
 800b054:	b13c      	cbz	r4, 800b066 <_Bfree+0x3a>
 800b056:	69eb      	ldr	r3, [r5, #28]
 800b058:	6862      	ldr	r2, [r4, #4]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b060:	6021      	str	r1, [r4, #0]
 800b062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b066:	bd70      	pop	{r4, r5, r6, pc}
 800b068:	0800c8c9 	.word	0x0800c8c9
 800b06c:	0800c949 	.word	0x0800c949

0800b070 <__multadd>:
 800b070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b074:	690d      	ldr	r5, [r1, #16]
 800b076:	4607      	mov	r7, r0
 800b078:	460c      	mov	r4, r1
 800b07a:	461e      	mov	r6, r3
 800b07c:	f101 0c14 	add.w	ip, r1, #20
 800b080:	2000      	movs	r0, #0
 800b082:	f8dc 3000 	ldr.w	r3, [ip]
 800b086:	b299      	uxth	r1, r3
 800b088:	fb02 6101 	mla	r1, r2, r1, r6
 800b08c:	0c1e      	lsrs	r6, r3, #16
 800b08e:	0c0b      	lsrs	r3, r1, #16
 800b090:	fb02 3306 	mla	r3, r2, r6, r3
 800b094:	b289      	uxth	r1, r1
 800b096:	3001      	adds	r0, #1
 800b098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b09c:	4285      	cmp	r5, r0
 800b09e:	f84c 1b04 	str.w	r1, [ip], #4
 800b0a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0a6:	dcec      	bgt.n	800b082 <__multadd+0x12>
 800b0a8:	b30e      	cbz	r6, 800b0ee <__multadd+0x7e>
 800b0aa:	68a3      	ldr	r3, [r4, #8]
 800b0ac:	42ab      	cmp	r3, r5
 800b0ae:	dc19      	bgt.n	800b0e4 <__multadd+0x74>
 800b0b0:	6861      	ldr	r1, [r4, #4]
 800b0b2:	4638      	mov	r0, r7
 800b0b4:	3101      	adds	r1, #1
 800b0b6:	f7ff ff79 	bl	800afac <_Balloc>
 800b0ba:	4680      	mov	r8, r0
 800b0bc:	b928      	cbnz	r0, 800b0ca <__multadd+0x5a>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <__multadd+0x84>)
 800b0c2:	480d      	ldr	r0, [pc, #52]	; (800b0f8 <__multadd+0x88>)
 800b0c4:	21ba      	movs	r1, #186	; 0xba
 800b0c6:	f000 fd2b 	bl	800bb20 <__assert_func>
 800b0ca:	6922      	ldr	r2, [r4, #16]
 800b0cc:	3202      	adds	r2, #2
 800b0ce:	f104 010c 	add.w	r1, r4, #12
 800b0d2:	0092      	lsls	r2, r2, #2
 800b0d4:	300c      	adds	r0, #12
 800b0d6:	f000 fd15 	bl	800bb04 <memcpy>
 800b0da:	4621      	mov	r1, r4
 800b0dc:	4638      	mov	r0, r7
 800b0de:	f7ff ffa5 	bl	800b02c <_Bfree>
 800b0e2:	4644      	mov	r4, r8
 800b0e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0e8:	3501      	adds	r5, #1
 800b0ea:	615e      	str	r6, [r3, #20]
 800b0ec:	6125      	str	r5, [r4, #16]
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0f4:	0800c938 	.word	0x0800c938
 800b0f8:	0800c949 	.word	0x0800c949

0800b0fc <__hi0bits>:
 800b0fc:	0c03      	lsrs	r3, r0, #16
 800b0fe:	041b      	lsls	r3, r3, #16
 800b100:	b9d3      	cbnz	r3, 800b138 <__hi0bits+0x3c>
 800b102:	0400      	lsls	r0, r0, #16
 800b104:	2310      	movs	r3, #16
 800b106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b10a:	bf04      	itt	eq
 800b10c:	0200      	lsleq	r0, r0, #8
 800b10e:	3308      	addeq	r3, #8
 800b110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b114:	bf04      	itt	eq
 800b116:	0100      	lsleq	r0, r0, #4
 800b118:	3304      	addeq	r3, #4
 800b11a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b11e:	bf04      	itt	eq
 800b120:	0080      	lsleq	r0, r0, #2
 800b122:	3302      	addeq	r3, #2
 800b124:	2800      	cmp	r0, #0
 800b126:	db05      	blt.n	800b134 <__hi0bits+0x38>
 800b128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b12c:	f103 0301 	add.w	r3, r3, #1
 800b130:	bf08      	it	eq
 800b132:	2320      	moveq	r3, #32
 800b134:	4618      	mov	r0, r3
 800b136:	4770      	bx	lr
 800b138:	2300      	movs	r3, #0
 800b13a:	e7e4      	b.n	800b106 <__hi0bits+0xa>

0800b13c <__lo0bits>:
 800b13c:	6803      	ldr	r3, [r0, #0]
 800b13e:	f013 0207 	ands.w	r2, r3, #7
 800b142:	d00c      	beq.n	800b15e <__lo0bits+0x22>
 800b144:	07d9      	lsls	r1, r3, #31
 800b146:	d422      	bmi.n	800b18e <__lo0bits+0x52>
 800b148:	079a      	lsls	r2, r3, #30
 800b14a:	bf49      	itett	mi
 800b14c:	085b      	lsrmi	r3, r3, #1
 800b14e:	089b      	lsrpl	r3, r3, #2
 800b150:	6003      	strmi	r3, [r0, #0]
 800b152:	2201      	movmi	r2, #1
 800b154:	bf5c      	itt	pl
 800b156:	6003      	strpl	r3, [r0, #0]
 800b158:	2202      	movpl	r2, #2
 800b15a:	4610      	mov	r0, r2
 800b15c:	4770      	bx	lr
 800b15e:	b299      	uxth	r1, r3
 800b160:	b909      	cbnz	r1, 800b166 <__lo0bits+0x2a>
 800b162:	0c1b      	lsrs	r3, r3, #16
 800b164:	2210      	movs	r2, #16
 800b166:	b2d9      	uxtb	r1, r3
 800b168:	b909      	cbnz	r1, 800b16e <__lo0bits+0x32>
 800b16a:	3208      	adds	r2, #8
 800b16c:	0a1b      	lsrs	r3, r3, #8
 800b16e:	0719      	lsls	r1, r3, #28
 800b170:	bf04      	itt	eq
 800b172:	091b      	lsreq	r3, r3, #4
 800b174:	3204      	addeq	r2, #4
 800b176:	0799      	lsls	r1, r3, #30
 800b178:	bf04      	itt	eq
 800b17a:	089b      	lsreq	r3, r3, #2
 800b17c:	3202      	addeq	r2, #2
 800b17e:	07d9      	lsls	r1, r3, #31
 800b180:	d403      	bmi.n	800b18a <__lo0bits+0x4e>
 800b182:	085b      	lsrs	r3, r3, #1
 800b184:	f102 0201 	add.w	r2, r2, #1
 800b188:	d003      	beq.n	800b192 <__lo0bits+0x56>
 800b18a:	6003      	str	r3, [r0, #0]
 800b18c:	e7e5      	b.n	800b15a <__lo0bits+0x1e>
 800b18e:	2200      	movs	r2, #0
 800b190:	e7e3      	b.n	800b15a <__lo0bits+0x1e>
 800b192:	2220      	movs	r2, #32
 800b194:	e7e1      	b.n	800b15a <__lo0bits+0x1e>
	...

0800b198 <__i2b>:
 800b198:	b510      	push	{r4, lr}
 800b19a:	460c      	mov	r4, r1
 800b19c:	2101      	movs	r1, #1
 800b19e:	f7ff ff05 	bl	800afac <_Balloc>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	b928      	cbnz	r0, 800b1b2 <__i2b+0x1a>
 800b1a6:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <__i2b+0x24>)
 800b1a8:	4805      	ldr	r0, [pc, #20]	; (800b1c0 <__i2b+0x28>)
 800b1aa:	f240 1145 	movw	r1, #325	; 0x145
 800b1ae:	f000 fcb7 	bl	800bb20 <__assert_func>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	6144      	str	r4, [r0, #20]
 800b1b6:	6103      	str	r3, [r0, #16]
 800b1b8:	bd10      	pop	{r4, pc}
 800b1ba:	bf00      	nop
 800b1bc:	0800c938 	.word	0x0800c938
 800b1c0:	0800c949 	.word	0x0800c949

0800b1c4 <__multiply>:
 800b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c8:	4691      	mov	r9, r2
 800b1ca:	690a      	ldr	r2, [r1, #16]
 800b1cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	bfb8      	it	lt
 800b1d4:	460b      	movlt	r3, r1
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	bfbc      	itt	lt
 800b1da:	464c      	movlt	r4, r9
 800b1dc:	4699      	movlt	r9, r3
 800b1de:	6927      	ldr	r7, [r4, #16]
 800b1e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1e4:	68a3      	ldr	r3, [r4, #8]
 800b1e6:	6861      	ldr	r1, [r4, #4]
 800b1e8:	eb07 060a 	add.w	r6, r7, sl
 800b1ec:	42b3      	cmp	r3, r6
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	bfb8      	it	lt
 800b1f2:	3101      	addlt	r1, #1
 800b1f4:	f7ff feda 	bl	800afac <_Balloc>
 800b1f8:	b930      	cbnz	r0, 800b208 <__multiply+0x44>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	4b44      	ldr	r3, [pc, #272]	; (800b310 <__multiply+0x14c>)
 800b1fe:	4845      	ldr	r0, [pc, #276]	; (800b314 <__multiply+0x150>)
 800b200:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b204:	f000 fc8c 	bl	800bb20 <__assert_func>
 800b208:	f100 0514 	add.w	r5, r0, #20
 800b20c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b210:	462b      	mov	r3, r5
 800b212:	2200      	movs	r2, #0
 800b214:	4543      	cmp	r3, r8
 800b216:	d321      	bcc.n	800b25c <__multiply+0x98>
 800b218:	f104 0314 	add.w	r3, r4, #20
 800b21c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b220:	f109 0314 	add.w	r3, r9, #20
 800b224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b228:	9202      	str	r2, [sp, #8]
 800b22a:	1b3a      	subs	r2, r7, r4
 800b22c:	3a15      	subs	r2, #21
 800b22e:	f022 0203 	bic.w	r2, r2, #3
 800b232:	3204      	adds	r2, #4
 800b234:	f104 0115 	add.w	r1, r4, #21
 800b238:	428f      	cmp	r7, r1
 800b23a:	bf38      	it	cc
 800b23c:	2204      	movcc	r2, #4
 800b23e:	9201      	str	r2, [sp, #4]
 800b240:	9a02      	ldr	r2, [sp, #8]
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	429a      	cmp	r2, r3
 800b246:	d80c      	bhi.n	800b262 <__multiply+0x9e>
 800b248:	2e00      	cmp	r6, #0
 800b24a:	dd03      	ble.n	800b254 <__multiply+0x90>
 800b24c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b250:	2b00      	cmp	r3, #0
 800b252:	d05b      	beq.n	800b30c <__multiply+0x148>
 800b254:	6106      	str	r6, [r0, #16]
 800b256:	b005      	add	sp, #20
 800b258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25c:	f843 2b04 	str.w	r2, [r3], #4
 800b260:	e7d8      	b.n	800b214 <__multiply+0x50>
 800b262:	f8b3 a000 	ldrh.w	sl, [r3]
 800b266:	f1ba 0f00 	cmp.w	sl, #0
 800b26a:	d024      	beq.n	800b2b6 <__multiply+0xf2>
 800b26c:	f104 0e14 	add.w	lr, r4, #20
 800b270:	46a9      	mov	r9, r5
 800b272:	f04f 0c00 	mov.w	ip, #0
 800b276:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b27a:	f8d9 1000 	ldr.w	r1, [r9]
 800b27e:	fa1f fb82 	uxth.w	fp, r2
 800b282:	b289      	uxth	r1, r1
 800b284:	fb0a 110b 	mla	r1, sl, fp, r1
 800b288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b28c:	f8d9 2000 	ldr.w	r2, [r9]
 800b290:	4461      	add	r1, ip
 800b292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b296:	fb0a c20b 	mla	r2, sl, fp, ip
 800b29a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b29e:	b289      	uxth	r1, r1
 800b2a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2a4:	4577      	cmp	r7, lr
 800b2a6:	f849 1b04 	str.w	r1, [r9], #4
 800b2aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2ae:	d8e2      	bhi.n	800b276 <__multiply+0xb2>
 800b2b0:	9a01      	ldr	r2, [sp, #4]
 800b2b2:	f845 c002 	str.w	ip, [r5, r2]
 800b2b6:	9a03      	ldr	r2, [sp, #12]
 800b2b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	f1b9 0f00 	cmp.w	r9, #0
 800b2c2:	d021      	beq.n	800b308 <__multiply+0x144>
 800b2c4:	6829      	ldr	r1, [r5, #0]
 800b2c6:	f104 0c14 	add.w	ip, r4, #20
 800b2ca:	46ae      	mov	lr, r5
 800b2cc:	f04f 0a00 	mov.w	sl, #0
 800b2d0:	f8bc b000 	ldrh.w	fp, [ip]
 800b2d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2d8:	fb09 220b 	mla	r2, r9, fp, r2
 800b2dc:	4452      	add	r2, sl
 800b2de:	b289      	uxth	r1, r1
 800b2e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2e4:	f84e 1b04 	str.w	r1, [lr], #4
 800b2e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2f0:	f8be 1000 	ldrh.w	r1, [lr]
 800b2f4:	fb09 110a 	mla	r1, r9, sl, r1
 800b2f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b2fc:	4567      	cmp	r7, ip
 800b2fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b302:	d8e5      	bhi.n	800b2d0 <__multiply+0x10c>
 800b304:	9a01      	ldr	r2, [sp, #4]
 800b306:	50a9      	str	r1, [r5, r2]
 800b308:	3504      	adds	r5, #4
 800b30a:	e799      	b.n	800b240 <__multiply+0x7c>
 800b30c:	3e01      	subs	r6, #1
 800b30e:	e79b      	b.n	800b248 <__multiply+0x84>
 800b310:	0800c938 	.word	0x0800c938
 800b314:	0800c949 	.word	0x0800c949

0800b318 <__pow5mult>:
 800b318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b31c:	4615      	mov	r5, r2
 800b31e:	f012 0203 	ands.w	r2, r2, #3
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	d007      	beq.n	800b338 <__pow5mult+0x20>
 800b328:	4c25      	ldr	r4, [pc, #148]	; (800b3c0 <__pow5mult+0xa8>)
 800b32a:	3a01      	subs	r2, #1
 800b32c:	2300      	movs	r3, #0
 800b32e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b332:	f7ff fe9d 	bl	800b070 <__multadd>
 800b336:	4607      	mov	r7, r0
 800b338:	10ad      	asrs	r5, r5, #2
 800b33a:	d03d      	beq.n	800b3b8 <__pow5mult+0xa0>
 800b33c:	69f4      	ldr	r4, [r6, #28]
 800b33e:	b97c      	cbnz	r4, 800b360 <__pow5mult+0x48>
 800b340:	2010      	movs	r0, #16
 800b342:	f7ff fd7f 	bl	800ae44 <malloc>
 800b346:	4602      	mov	r2, r0
 800b348:	61f0      	str	r0, [r6, #28]
 800b34a:	b928      	cbnz	r0, 800b358 <__pow5mult+0x40>
 800b34c:	4b1d      	ldr	r3, [pc, #116]	; (800b3c4 <__pow5mult+0xac>)
 800b34e:	481e      	ldr	r0, [pc, #120]	; (800b3c8 <__pow5mult+0xb0>)
 800b350:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b354:	f000 fbe4 	bl	800bb20 <__assert_func>
 800b358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b35c:	6004      	str	r4, [r0, #0]
 800b35e:	60c4      	str	r4, [r0, #12]
 800b360:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b368:	b94c      	cbnz	r4, 800b37e <__pow5mult+0x66>
 800b36a:	f240 2171 	movw	r1, #625	; 0x271
 800b36e:	4630      	mov	r0, r6
 800b370:	f7ff ff12 	bl	800b198 <__i2b>
 800b374:	2300      	movs	r3, #0
 800b376:	f8c8 0008 	str.w	r0, [r8, #8]
 800b37a:	4604      	mov	r4, r0
 800b37c:	6003      	str	r3, [r0, #0]
 800b37e:	f04f 0900 	mov.w	r9, #0
 800b382:	07eb      	lsls	r3, r5, #31
 800b384:	d50a      	bpl.n	800b39c <__pow5mult+0x84>
 800b386:	4639      	mov	r1, r7
 800b388:	4622      	mov	r2, r4
 800b38a:	4630      	mov	r0, r6
 800b38c:	f7ff ff1a 	bl	800b1c4 <__multiply>
 800b390:	4639      	mov	r1, r7
 800b392:	4680      	mov	r8, r0
 800b394:	4630      	mov	r0, r6
 800b396:	f7ff fe49 	bl	800b02c <_Bfree>
 800b39a:	4647      	mov	r7, r8
 800b39c:	106d      	asrs	r5, r5, #1
 800b39e:	d00b      	beq.n	800b3b8 <__pow5mult+0xa0>
 800b3a0:	6820      	ldr	r0, [r4, #0]
 800b3a2:	b938      	cbnz	r0, 800b3b4 <__pow5mult+0x9c>
 800b3a4:	4622      	mov	r2, r4
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f7ff ff0b 	bl	800b1c4 <__multiply>
 800b3ae:	6020      	str	r0, [r4, #0]
 800b3b0:	f8c0 9000 	str.w	r9, [r0]
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	e7e4      	b.n	800b382 <__pow5mult+0x6a>
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3be:	bf00      	nop
 800b3c0:	0800ca98 	.word	0x0800ca98
 800b3c4:	0800c8c9 	.word	0x0800c8c9
 800b3c8:	0800c949 	.word	0x0800c949

0800b3cc <__lshift>:
 800b3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d0:	460c      	mov	r4, r1
 800b3d2:	6849      	ldr	r1, [r1, #4]
 800b3d4:	6923      	ldr	r3, [r4, #16]
 800b3d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3da:	68a3      	ldr	r3, [r4, #8]
 800b3dc:	4607      	mov	r7, r0
 800b3de:	4691      	mov	r9, r2
 800b3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3e4:	f108 0601 	add.w	r6, r8, #1
 800b3e8:	42b3      	cmp	r3, r6
 800b3ea:	db0b      	blt.n	800b404 <__lshift+0x38>
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	f7ff fddd 	bl	800afac <_Balloc>
 800b3f2:	4605      	mov	r5, r0
 800b3f4:	b948      	cbnz	r0, 800b40a <__lshift+0x3e>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	4b28      	ldr	r3, [pc, #160]	; (800b49c <__lshift+0xd0>)
 800b3fa:	4829      	ldr	r0, [pc, #164]	; (800b4a0 <__lshift+0xd4>)
 800b3fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b400:	f000 fb8e 	bl	800bb20 <__assert_func>
 800b404:	3101      	adds	r1, #1
 800b406:	005b      	lsls	r3, r3, #1
 800b408:	e7ee      	b.n	800b3e8 <__lshift+0x1c>
 800b40a:	2300      	movs	r3, #0
 800b40c:	f100 0114 	add.w	r1, r0, #20
 800b410:	f100 0210 	add.w	r2, r0, #16
 800b414:	4618      	mov	r0, r3
 800b416:	4553      	cmp	r3, sl
 800b418:	db33      	blt.n	800b482 <__lshift+0xb6>
 800b41a:	6920      	ldr	r0, [r4, #16]
 800b41c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b420:	f104 0314 	add.w	r3, r4, #20
 800b424:	f019 091f 	ands.w	r9, r9, #31
 800b428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b42c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b430:	d02b      	beq.n	800b48a <__lshift+0xbe>
 800b432:	f1c9 0e20 	rsb	lr, r9, #32
 800b436:	468a      	mov	sl, r1
 800b438:	2200      	movs	r2, #0
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	fa00 f009 	lsl.w	r0, r0, r9
 800b440:	4310      	orrs	r0, r2
 800b442:	f84a 0b04 	str.w	r0, [sl], #4
 800b446:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44a:	459c      	cmp	ip, r3
 800b44c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b450:	d8f3      	bhi.n	800b43a <__lshift+0x6e>
 800b452:	ebac 0304 	sub.w	r3, ip, r4
 800b456:	3b15      	subs	r3, #21
 800b458:	f023 0303 	bic.w	r3, r3, #3
 800b45c:	3304      	adds	r3, #4
 800b45e:	f104 0015 	add.w	r0, r4, #21
 800b462:	4584      	cmp	ip, r0
 800b464:	bf38      	it	cc
 800b466:	2304      	movcc	r3, #4
 800b468:	50ca      	str	r2, [r1, r3]
 800b46a:	b10a      	cbz	r2, 800b470 <__lshift+0xa4>
 800b46c:	f108 0602 	add.w	r6, r8, #2
 800b470:	3e01      	subs	r6, #1
 800b472:	4638      	mov	r0, r7
 800b474:	612e      	str	r6, [r5, #16]
 800b476:	4621      	mov	r1, r4
 800b478:	f7ff fdd8 	bl	800b02c <_Bfree>
 800b47c:	4628      	mov	r0, r5
 800b47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b482:	f842 0f04 	str.w	r0, [r2, #4]!
 800b486:	3301      	adds	r3, #1
 800b488:	e7c5      	b.n	800b416 <__lshift+0x4a>
 800b48a:	3904      	subs	r1, #4
 800b48c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b490:	f841 2f04 	str.w	r2, [r1, #4]!
 800b494:	459c      	cmp	ip, r3
 800b496:	d8f9      	bhi.n	800b48c <__lshift+0xc0>
 800b498:	e7ea      	b.n	800b470 <__lshift+0xa4>
 800b49a:	bf00      	nop
 800b49c:	0800c938 	.word	0x0800c938
 800b4a0:	0800c949 	.word	0x0800c949

0800b4a4 <__mcmp>:
 800b4a4:	b530      	push	{r4, r5, lr}
 800b4a6:	6902      	ldr	r2, [r0, #16]
 800b4a8:	690c      	ldr	r4, [r1, #16]
 800b4aa:	1b12      	subs	r2, r2, r4
 800b4ac:	d10e      	bne.n	800b4cc <__mcmp+0x28>
 800b4ae:	f100 0314 	add.w	r3, r0, #20
 800b4b2:	3114      	adds	r1, #20
 800b4b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4c4:	42a5      	cmp	r5, r4
 800b4c6:	d003      	beq.n	800b4d0 <__mcmp+0x2c>
 800b4c8:	d305      	bcc.n	800b4d6 <__mcmp+0x32>
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	bd30      	pop	{r4, r5, pc}
 800b4d0:	4283      	cmp	r3, r0
 800b4d2:	d3f3      	bcc.n	800b4bc <__mcmp+0x18>
 800b4d4:	e7fa      	b.n	800b4cc <__mcmp+0x28>
 800b4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4da:	e7f7      	b.n	800b4cc <__mcmp+0x28>

0800b4dc <__mdiff>:
 800b4dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	4690      	mov	r8, r2
 800b4ea:	f7ff ffdb 	bl	800b4a4 <__mcmp>
 800b4ee:	1e05      	subs	r5, r0, #0
 800b4f0:	d110      	bne.n	800b514 <__mdiff+0x38>
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f7ff fd59 	bl	800afac <_Balloc>
 800b4fa:	b930      	cbnz	r0, 800b50a <__mdiff+0x2e>
 800b4fc:	4b3a      	ldr	r3, [pc, #232]	; (800b5e8 <__mdiff+0x10c>)
 800b4fe:	4602      	mov	r2, r0
 800b500:	f240 2137 	movw	r1, #567	; 0x237
 800b504:	4839      	ldr	r0, [pc, #228]	; (800b5ec <__mdiff+0x110>)
 800b506:	f000 fb0b 	bl	800bb20 <__assert_func>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b514:	bfa4      	itt	ge
 800b516:	4643      	movge	r3, r8
 800b518:	46a0      	movge	r8, r4
 800b51a:	4630      	mov	r0, r6
 800b51c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b520:	bfa6      	itte	ge
 800b522:	461c      	movge	r4, r3
 800b524:	2500      	movge	r5, #0
 800b526:	2501      	movlt	r5, #1
 800b528:	f7ff fd40 	bl	800afac <_Balloc>
 800b52c:	b920      	cbnz	r0, 800b538 <__mdiff+0x5c>
 800b52e:	4b2e      	ldr	r3, [pc, #184]	; (800b5e8 <__mdiff+0x10c>)
 800b530:	4602      	mov	r2, r0
 800b532:	f240 2145 	movw	r1, #581	; 0x245
 800b536:	e7e5      	b.n	800b504 <__mdiff+0x28>
 800b538:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b53c:	6926      	ldr	r6, [r4, #16]
 800b53e:	60c5      	str	r5, [r0, #12]
 800b540:	f104 0914 	add.w	r9, r4, #20
 800b544:	f108 0514 	add.w	r5, r8, #20
 800b548:	f100 0e14 	add.w	lr, r0, #20
 800b54c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b550:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b554:	f108 0210 	add.w	r2, r8, #16
 800b558:	46f2      	mov	sl, lr
 800b55a:	2100      	movs	r1, #0
 800b55c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b560:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b564:	fa11 f88b 	uxtah	r8, r1, fp
 800b568:	b299      	uxth	r1, r3
 800b56a:	0c1b      	lsrs	r3, r3, #16
 800b56c:	eba8 0801 	sub.w	r8, r8, r1
 800b570:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b574:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b578:	fa1f f888 	uxth.w	r8, r8
 800b57c:	1419      	asrs	r1, r3, #16
 800b57e:	454e      	cmp	r6, r9
 800b580:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b584:	f84a 3b04 	str.w	r3, [sl], #4
 800b588:	d8e8      	bhi.n	800b55c <__mdiff+0x80>
 800b58a:	1b33      	subs	r3, r6, r4
 800b58c:	3b15      	subs	r3, #21
 800b58e:	f023 0303 	bic.w	r3, r3, #3
 800b592:	3304      	adds	r3, #4
 800b594:	3415      	adds	r4, #21
 800b596:	42a6      	cmp	r6, r4
 800b598:	bf38      	it	cc
 800b59a:	2304      	movcc	r3, #4
 800b59c:	441d      	add	r5, r3
 800b59e:	4473      	add	r3, lr
 800b5a0:	469e      	mov	lr, r3
 800b5a2:	462e      	mov	r6, r5
 800b5a4:	4566      	cmp	r6, ip
 800b5a6:	d30e      	bcc.n	800b5c6 <__mdiff+0xea>
 800b5a8:	f10c 0203 	add.w	r2, ip, #3
 800b5ac:	1b52      	subs	r2, r2, r5
 800b5ae:	f022 0203 	bic.w	r2, r2, #3
 800b5b2:	3d03      	subs	r5, #3
 800b5b4:	45ac      	cmp	ip, r5
 800b5b6:	bf38      	it	cc
 800b5b8:	2200      	movcc	r2, #0
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b5c0:	b17a      	cbz	r2, 800b5e2 <__mdiff+0x106>
 800b5c2:	6107      	str	r7, [r0, #16]
 800b5c4:	e7a4      	b.n	800b510 <__mdiff+0x34>
 800b5c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800b5ca:	fa11 f288 	uxtah	r2, r1, r8
 800b5ce:	1414      	asrs	r4, r2, #16
 800b5d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5d4:	b292      	uxth	r2, r2
 800b5d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5da:	f84e 2b04 	str.w	r2, [lr], #4
 800b5de:	1421      	asrs	r1, r4, #16
 800b5e0:	e7e0      	b.n	800b5a4 <__mdiff+0xc8>
 800b5e2:	3f01      	subs	r7, #1
 800b5e4:	e7ea      	b.n	800b5bc <__mdiff+0xe0>
 800b5e6:	bf00      	nop
 800b5e8:	0800c938 	.word	0x0800c938
 800b5ec:	0800c949 	.word	0x0800c949

0800b5f0 <__d2b>:
 800b5f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	460f      	mov	r7, r1
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	ec59 8b10 	vmov	r8, r9, d0
 800b5fc:	4616      	mov	r6, r2
 800b5fe:	f7ff fcd5 	bl	800afac <_Balloc>
 800b602:	4604      	mov	r4, r0
 800b604:	b930      	cbnz	r0, 800b614 <__d2b+0x24>
 800b606:	4602      	mov	r2, r0
 800b608:	4b24      	ldr	r3, [pc, #144]	; (800b69c <__d2b+0xac>)
 800b60a:	4825      	ldr	r0, [pc, #148]	; (800b6a0 <__d2b+0xb0>)
 800b60c:	f240 310f 	movw	r1, #783	; 0x30f
 800b610:	f000 fa86 	bl	800bb20 <__assert_func>
 800b614:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b618:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b61c:	bb2d      	cbnz	r5, 800b66a <__d2b+0x7a>
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	f1b8 0300 	subs.w	r3, r8, #0
 800b624:	d026      	beq.n	800b674 <__d2b+0x84>
 800b626:	4668      	mov	r0, sp
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	f7ff fd87 	bl	800b13c <__lo0bits>
 800b62e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b632:	b1e8      	cbz	r0, 800b670 <__d2b+0x80>
 800b634:	f1c0 0320 	rsb	r3, r0, #32
 800b638:	fa02 f303 	lsl.w	r3, r2, r3
 800b63c:	430b      	orrs	r3, r1
 800b63e:	40c2      	lsrs	r2, r0
 800b640:	6163      	str	r3, [r4, #20]
 800b642:	9201      	str	r2, [sp, #4]
 800b644:	9b01      	ldr	r3, [sp, #4]
 800b646:	61a3      	str	r3, [r4, #24]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bf14      	ite	ne
 800b64c:	2202      	movne	r2, #2
 800b64e:	2201      	moveq	r2, #1
 800b650:	6122      	str	r2, [r4, #16]
 800b652:	b1bd      	cbz	r5, 800b684 <__d2b+0x94>
 800b654:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b658:	4405      	add	r5, r0
 800b65a:	603d      	str	r5, [r7, #0]
 800b65c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b660:	6030      	str	r0, [r6, #0]
 800b662:	4620      	mov	r0, r4
 800b664:	b003      	add	sp, #12
 800b666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b66a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b66e:	e7d6      	b.n	800b61e <__d2b+0x2e>
 800b670:	6161      	str	r1, [r4, #20]
 800b672:	e7e7      	b.n	800b644 <__d2b+0x54>
 800b674:	a801      	add	r0, sp, #4
 800b676:	f7ff fd61 	bl	800b13c <__lo0bits>
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	6163      	str	r3, [r4, #20]
 800b67e:	3020      	adds	r0, #32
 800b680:	2201      	movs	r2, #1
 800b682:	e7e5      	b.n	800b650 <__d2b+0x60>
 800b684:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b688:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b68c:	6038      	str	r0, [r7, #0]
 800b68e:	6918      	ldr	r0, [r3, #16]
 800b690:	f7ff fd34 	bl	800b0fc <__hi0bits>
 800b694:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b698:	e7e2      	b.n	800b660 <__d2b+0x70>
 800b69a:	bf00      	nop
 800b69c:	0800c938 	.word	0x0800c938
 800b6a0:	0800c949 	.word	0x0800c949

0800b6a4 <__ssputs_r>:
 800b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a8:	688e      	ldr	r6, [r1, #8]
 800b6aa:	461f      	mov	r7, r3
 800b6ac:	42be      	cmp	r6, r7
 800b6ae:	680b      	ldr	r3, [r1, #0]
 800b6b0:	4682      	mov	sl, r0
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	4690      	mov	r8, r2
 800b6b6:	d82c      	bhi.n	800b712 <__ssputs_r+0x6e>
 800b6b8:	898a      	ldrh	r2, [r1, #12]
 800b6ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6be:	d026      	beq.n	800b70e <__ssputs_r+0x6a>
 800b6c0:	6965      	ldr	r5, [r4, #20]
 800b6c2:	6909      	ldr	r1, [r1, #16]
 800b6c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6c8:	eba3 0901 	sub.w	r9, r3, r1
 800b6cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6d0:	1c7b      	adds	r3, r7, #1
 800b6d2:	444b      	add	r3, r9
 800b6d4:	106d      	asrs	r5, r5, #1
 800b6d6:	429d      	cmp	r5, r3
 800b6d8:	bf38      	it	cc
 800b6da:	461d      	movcc	r5, r3
 800b6dc:	0553      	lsls	r3, r2, #21
 800b6de:	d527      	bpl.n	800b730 <__ssputs_r+0x8c>
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	f7ff fbd7 	bl	800ae94 <_malloc_r>
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	b360      	cbz	r0, 800b744 <__ssputs_r+0xa0>
 800b6ea:	6921      	ldr	r1, [r4, #16]
 800b6ec:	464a      	mov	r2, r9
 800b6ee:	f000 fa09 	bl	800bb04 <memcpy>
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	6126      	str	r6, [r4, #16]
 800b700:	6165      	str	r5, [r4, #20]
 800b702:	444e      	add	r6, r9
 800b704:	eba5 0509 	sub.w	r5, r5, r9
 800b708:	6026      	str	r6, [r4, #0]
 800b70a:	60a5      	str	r5, [r4, #8]
 800b70c:	463e      	mov	r6, r7
 800b70e:	42be      	cmp	r6, r7
 800b710:	d900      	bls.n	800b714 <__ssputs_r+0x70>
 800b712:	463e      	mov	r6, r7
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	4632      	mov	r2, r6
 800b718:	4641      	mov	r1, r8
 800b71a:	f000 f9c9 	bl	800bab0 <memmove>
 800b71e:	68a3      	ldr	r3, [r4, #8]
 800b720:	1b9b      	subs	r3, r3, r6
 800b722:	60a3      	str	r3, [r4, #8]
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	4433      	add	r3, r6
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	2000      	movs	r0, #0
 800b72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b730:	462a      	mov	r2, r5
 800b732:	f000 fa3b 	bl	800bbac <_realloc_r>
 800b736:	4606      	mov	r6, r0
 800b738:	2800      	cmp	r0, #0
 800b73a:	d1e0      	bne.n	800b6fe <__ssputs_r+0x5a>
 800b73c:	6921      	ldr	r1, [r4, #16]
 800b73e:	4650      	mov	r0, sl
 800b740:	f7ff fb34 	bl	800adac <_free_r>
 800b744:	230c      	movs	r3, #12
 800b746:	f8ca 3000 	str.w	r3, [sl]
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	f04f 30ff 	mov.w	r0, #4294967295
 800b756:	e7e9      	b.n	800b72c <__ssputs_r+0x88>

0800b758 <_svfiprintf_r>:
 800b758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b75c:	4698      	mov	r8, r3
 800b75e:	898b      	ldrh	r3, [r1, #12]
 800b760:	061b      	lsls	r3, r3, #24
 800b762:	b09d      	sub	sp, #116	; 0x74
 800b764:	4607      	mov	r7, r0
 800b766:	460d      	mov	r5, r1
 800b768:	4614      	mov	r4, r2
 800b76a:	d50e      	bpl.n	800b78a <_svfiprintf_r+0x32>
 800b76c:	690b      	ldr	r3, [r1, #16]
 800b76e:	b963      	cbnz	r3, 800b78a <_svfiprintf_r+0x32>
 800b770:	2140      	movs	r1, #64	; 0x40
 800b772:	f7ff fb8f 	bl	800ae94 <_malloc_r>
 800b776:	6028      	str	r0, [r5, #0]
 800b778:	6128      	str	r0, [r5, #16]
 800b77a:	b920      	cbnz	r0, 800b786 <_svfiprintf_r+0x2e>
 800b77c:	230c      	movs	r3, #12
 800b77e:	603b      	str	r3, [r7, #0]
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	e0d0      	b.n	800b928 <_svfiprintf_r+0x1d0>
 800b786:	2340      	movs	r3, #64	; 0x40
 800b788:	616b      	str	r3, [r5, #20]
 800b78a:	2300      	movs	r3, #0
 800b78c:	9309      	str	r3, [sp, #36]	; 0x24
 800b78e:	2320      	movs	r3, #32
 800b790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b794:	f8cd 800c 	str.w	r8, [sp, #12]
 800b798:	2330      	movs	r3, #48	; 0x30
 800b79a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b940 <_svfiprintf_r+0x1e8>
 800b79e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7a2:	f04f 0901 	mov.w	r9, #1
 800b7a6:	4623      	mov	r3, r4
 800b7a8:	469a      	mov	sl, r3
 800b7aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7ae:	b10a      	cbz	r2, 800b7b4 <_svfiprintf_r+0x5c>
 800b7b0:	2a25      	cmp	r2, #37	; 0x25
 800b7b2:	d1f9      	bne.n	800b7a8 <_svfiprintf_r+0x50>
 800b7b4:	ebba 0b04 	subs.w	fp, sl, r4
 800b7b8:	d00b      	beq.n	800b7d2 <_svfiprintf_r+0x7a>
 800b7ba:	465b      	mov	r3, fp
 800b7bc:	4622      	mov	r2, r4
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff ff6f 	bl	800b6a4 <__ssputs_r>
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	f000 80a9 	beq.w	800b91e <_svfiprintf_r+0x1c6>
 800b7cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7ce:	445a      	add	r2, fp
 800b7d0:	9209      	str	r2, [sp, #36]	; 0x24
 800b7d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	f000 80a1 	beq.w	800b91e <_svfiprintf_r+0x1c6>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7e6:	f10a 0a01 	add.w	sl, sl, #1
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	9307      	str	r3, [sp, #28]
 800b7ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7f2:	931a      	str	r3, [sp, #104]	; 0x68
 800b7f4:	4654      	mov	r4, sl
 800b7f6:	2205      	movs	r2, #5
 800b7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fc:	4850      	ldr	r0, [pc, #320]	; (800b940 <_svfiprintf_r+0x1e8>)
 800b7fe:	f7f4 fce7 	bl	80001d0 <memchr>
 800b802:	9a04      	ldr	r2, [sp, #16]
 800b804:	b9d8      	cbnz	r0, 800b83e <_svfiprintf_r+0xe6>
 800b806:	06d0      	lsls	r0, r2, #27
 800b808:	bf44      	itt	mi
 800b80a:	2320      	movmi	r3, #32
 800b80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b810:	0711      	lsls	r1, r2, #28
 800b812:	bf44      	itt	mi
 800b814:	232b      	movmi	r3, #43	; 0x2b
 800b816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b81a:	f89a 3000 	ldrb.w	r3, [sl]
 800b81e:	2b2a      	cmp	r3, #42	; 0x2a
 800b820:	d015      	beq.n	800b84e <_svfiprintf_r+0xf6>
 800b822:	9a07      	ldr	r2, [sp, #28]
 800b824:	4654      	mov	r4, sl
 800b826:	2000      	movs	r0, #0
 800b828:	f04f 0c0a 	mov.w	ip, #10
 800b82c:	4621      	mov	r1, r4
 800b82e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b832:	3b30      	subs	r3, #48	; 0x30
 800b834:	2b09      	cmp	r3, #9
 800b836:	d94d      	bls.n	800b8d4 <_svfiprintf_r+0x17c>
 800b838:	b1b0      	cbz	r0, 800b868 <_svfiprintf_r+0x110>
 800b83a:	9207      	str	r2, [sp, #28]
 800b83c:	e014      	b.n	800b868 <_svfiprintf_r+0x110>
 800b83e:	eba0 0308 	sub.w	r3, r0, r8
 800b842:	fa09 f303 	lsl.w	r3, r9, r3
 800b846:	4313      	orrs	r3, r2
 800b848:	9304      	str	r3, [sp, #16]
 800b84a:	46a2      	mov	sl, r4
 800b84c:	e7d2      	b.n	800b7f4 <_svfiprintf_r+0x9c>
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	1d19      	adds	r1, r3, #4
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	9103      	str	r1, [sp, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	bfbb      	ittet	lt
 800b85a:	425b      	neglt	r3, r3
 800b85c:	f042 0202 	orrlt.w	r2, r2, #2
 800b860:	9307      	strge	r3, [sp, #28]
 800b862:	9307      	strlt	r3, [sp, #28]
 800b864:	bfb8      	it	lt
 800b866:	9204      	strlt	r2, [sp, #16]
 800b868:	7823      	ldrb	r3, [r4, #0]
 800b86a:	2b2e      	cmp	r3, #46	; 0x2e
 800b86c:	d10c      	bne.n	800b888 <_svfiprintf_r+0x130>
 800b86e:	7863      	ldrb	r3, [r4, #1]
 800b870:	2b2a      	cmp	r3, #42	; 0x2a
 800b872:	d134      	bne.n	800b8de <_svfiprintf_r+0x186>
 800b874:	9b03      	ldr	r3, [sp, #12]
 800b876:	1d1a      	adds	r2, r3, #4
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	9203      	str	r2, [sp, #12]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	bfb8      	it	lt
 800b880:	f04f 33ff 	movlt.w	r3, #4294967295
 800b884:	3402      	adds	r4, #2
 800b886:	9305      	str	r3, [sp, #20]
 800b888:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b950 <_svfiprintf_r+0x1f8>
 800b88c:	7821      	ldrb	r1, [r4, #0]
 800b88e:	2203      	movs	r2, #3
 800b890:	4650      	mov	r0, sl
 800b892:	f7f4 fc9d 	bl	80001d0 <memchr>
 800b896:	b138      	cbz	r0, 800b8a8 <_svfiprintf_r+0x150>
 800b898:	9b04      	ldr	r3, [sp, #16]
 800b89a:	eba0 000a 	sub.w	r0, r0, sl
 800b89e:	2240      	movs	r2, #64	; 0x40
 800b8a0:	4082      	lsls	r2, r0
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	3401      	adds	r4, #1
 800b8a6:	9304      	str	r3, [sp, #16]
 800b8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ac:	4825      	ldr	r0, [pc, #148]	; (800b944 <_svfiprintf_r+0x1ec>)
 800b8ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8b2:	2206      	movs	r2, #6
 800b8b4:	f7f4 fc8c 	bl	80001d0 <memchr>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d038      	beq.n	800b92e <_svfiprintf_r+0x1d6>
 800b8bc:	4b22      	ldr	r3, [pc, #136]	; (800b948 <_svfiprintf_r+0x1f0>)
 800b8be:	bb1b      	cbnz	r3, 800b908 <_svfiprintf_r+0x1b0>
 800b8c0:	9b03      	ldr	r3, [sp, #12]
 800b8c2:	3307      	adds	r3, #7
 800b8c4:	f023 0307 	bic.w	r3, r3, #7
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	9303      	str	r3, [sp, #12]
 800b8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ce:	4433      	add	r3, r6
 800b8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8d2:	e768      	b.n	800b7a6 <_svfiprintf_r+0x4e>
 800b8d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8d8:	460c      	mov	r4, r1
 800b8da:	2001      	movs	r0, #1
 800b8dc:	e7a6      	b.n	800b82c <_svfiprintf_r+0xd4>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	3401      	adds	r4, #1
 800b8e2:	9305      	str	r3, [sp, #20]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	f04f 0c0a 	mov.w	ip, #10
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8f0:	3a30      	subs	r2, #48	; 0x30
 800b8f2:	2a09      	cmp	r2, #9
 800b8f4:	d903      	bls.n	800b8fe <_svfiprintf_r+0x1a6>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d0c6      	beq.n	800b888 <_svfiprintf_r+0x130>
 800b8fa:	9105      	str	r1, [sp, #20]
 800b8fc:	e7c4      	b.n	800b888 <_svfiprintf_r+0x130>
 800b8fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b902:	4604      	mov	r4, r0
 800b904:	2301      	movs	r3, #1
 800b906:	e7f0      	b.n	800b8ea <_svfiprintf_r+0x192>
 800b908:	ab03      	add	r3, sp, #12
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	462a      	mov	r2, r5
 800b90e:	4b0f      	ldr	r3, [pc, #60]	; (800b94c <_svfiprintf_r+0x1f4>)
 800b910:	a904      	add	r1, sp, #16
 800b912:	4638      	mov	r0, r7
 800b914:	f7fd fe78 	bl	8009608 <_printf_float>
 800b918:	1c42      	adds	r2, r0, #1
 800b91a:	4606      	mov	r6, r0
 800b91c:	d1d6      	bne.n	800b8cc <_svfiprintf_r+0x174>
 800b91e:	89ab      	ldrh	r3, [r5, #12]
 800b920:	065b      	lsls	r3, r3, #25
 800b922:	f53f af2d 	bmi.w	800b780 <_svfiprintf_r+0x28>
 800b926:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b928:	b01d      	add	sp, #116	; 0x74
 800b92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92e:	ab03      	add	r3, sp, #12
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	462a      	mov	r2, r5
 800b934:	4b05      	ldr	r3, [pc, #20]	; (800b94c <_svfiprintf_r+0x1f4>)
 800b936:	a904      	add	r1, sp, #16
 800b938:	4638      	mov	r0, r7
 800b93a:	f7fe f909 	bl	8009b50 <_printf_i>
 800b93e:	e7eb      	b.n	800b918 <_svfiprintf_r+0x1c0>
 800b940:	0800caa4 	.word	0x0800caa4
 800b944:	0800caae 	.word	0x0800caae
 800b948:	08009609 	.word	0x08009609
 800b94c:	0800b6a5 	.word	0x0800b6a5
 800b950:	0800caaa 	.word	0x0800caaa

0800b954 <__sflush_r>:
 800b954:	898a      	ldrh	r2, [r1, #12]
 800b956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b95a:	4605      	mov	r5, r0
 800b95c:	0710      	lsls	r0, r2, #28
 800b95e:	460c      	mov	r4, r1
 800b960:	d458      	bmi.n	800ba14 <__sflush_r+0xc0>
 800b962:	684b      	ldr	r3, [r1, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	dc05      	bgt.n	800b974 <__sflush_r+0x20>
 800b968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	dc02      	bgt.n	800b974 <__sflush_r+0x20>
 800b96e:	2000      	movs	r0, #0
 800b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b976:	2e00      	cmp	r6, #0
 800b978:	d0f9      	beq.n	800b96e <__sflush_r+0x1a>
 800b97a:	2300      	movs	r3, #0
 800b97c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b980:	682f      	ldr	r7, [r5, #0]
 800b982:	6a21      	ldr	r1, [r4, #32]
 800b984:	602b      	str	r3, [r5, #0]
 800b986:	d032      	beq.n	800b9ee <__sflush_r+0x9a>
 800b988:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b98a:	89a3      	ldrh	r3, [r4, #12]
 800b98c:	075a      	lsls	r2, r3, #29
 800b98e:	d505      	bpl.n	800b99c <__sflush_r+0x48>
 800b990:	6863      	ldr	r3, [r4, #4]
 800b992:	1ac0      	subs	r0, r0, r3
 800b994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b996:	b10b      	cbz	r3, 800b99c <__sflush_r+0x48>
 800b998:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b99a:	1ac0      	subs	r0, r0, r3
 800b99c:	2300      	movs	r3, #0
 800b99e:	4602      	mov	r2, r0
 800b9a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b9a2:	6a21      	ldr	r1, [r4, #32]
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	47b0      	blx	r6
 800b9a8:	1c43      	adds	r3, r0, #1
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	d106      	bne.n	800b9bc <__sflush_r+0x68>
 800b9ae:	6829      	ldr	r1, [r5, #0]
 800b9b0:	291d      	cmp	r1, #29
 800b9b2:	d82b      	bhi.n	800ba0c <__sflush_r+0xb8>
 800b9b4:	4a29      	ldr	r2, [pc, #164]	; (800ba5c <__sflush_r+0x108>)
 800b9b6:	410a      	asrs	r2, r1
 800b9b8:	07d6      	lsls	r6, r2, #31
 800b9ba:	d427      	bmi.n	800ba0c <__sflush_r+0xb8>
 800b9bc:	2200      	movs	r2, #0
 800b9be:	6062      	str	r2, [r4, #4]
 800b9c0:	04d9      	lsls	r1, r3, #19
 800b9c2:	6922      	ldr	r2, [r4, #16]
 800b9c4:	6022      	str	r2, [r4, #0]
 800b9c6:	d504      	bpl.n	800b9d2 <__sflush_r+0x7e>
 800b9c8:	1c42      	adds	r2, r0, #1
 800b9ca:	d101      	bne.n	800b9d0 <__sflush_r+0x7c>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b903      	cbnz	r3, 800b9d2 <__sflush_r+0x7e>
 800b9d0:	6560      	str	r0, [r4, #84]	; 0x54
 800b9d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9d4:	602f      	str	r7, [r5, #0]
 800b9d6:	2900      	cmp	r1, #0
 800b9d8:	d0c9      	beq.n	800b96e <__sflush_r+0x1a>
 800b9da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9de:	4299      	cmp	r1, r3
 800b9e0:	d002      	beq.n	800b9e8 <__sflush_r+0x94>
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f7ff f9e2 	bl	800adac <_free_r>
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	6360      	str	r0, [r4, #52]	; 0x34
 800b9ec:	e7c0      	b.n	800b970 <__sflush_r+0x1c>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	47b0      	blx	r6
 800b9f4:	1c41      	adds	r1, r0, #1
 800b9f6:	d1c8      	bne.n	800b98a <__sflush_r+0x36>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0c5      	beq.n	800b98a <__sflush_r+0x36>
 800b9fe:	2b1d      	cmp	r3, #29
 800ba00:	d001      	beq.n	800ba06 <__sflush_r+0xb2>
 800ba02:	2b16      	cmp	r3, #22
 800ba04:	d101      	bne.n	800ba0a <__sflush_r+0xb6>
 800ba06:	602f      	str	r7, [r5, #0]
 800ba08:	e7b1      	b.n	800b96e <__sflush_r+0x1a>
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba10:	81a3      	strh	r3, [r4, #12]
 800ba12:	e7ad      	b.n	800b970 <__sflush_r+0x1c>
 800ba14:	690f      	ldr	r7, [r1, #16]
 800ba16:	2f00      	cmp	r7, #0
 800ba18:	d0a9      	beq.n	800b96e <__sflush_r+0x1a>
 800ba1a:	0793      	lsls	r3, r2, #30
 800ba1c:	680e      	ldr	r6, [r1, #0]
 800ba1e:	bf08      	it	eq
 800ba20:	694b      	ldreq	r3, [r1, #20]
 800ba22:	600f      	str	r7, [r1, #0]
 800ba24:	bf18      	it	ne
 800ba26:	2300      	movne	r3, #0
 800ba28:	eba6 0807 	sub.w	r8, r6, r7
 800ba2c:	608b      	str	r3, [r1, #8]
 800ba2e:	f1b8 0f00 	cmp.w	r8, #0
 800ba32:	dd9c      	ble.n	800b96e <__sflush_r+0x1a>
 800ba34:	6a21      	ldr	r1, [r4, #32]
 800ba36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba38:	4643      	mov	r3, r8
 800ba3a:	463a      	mov	r2, r7
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	47b0      	blx	r6
 800ba40:	2800      	cmp	r0, #0
 800ba42:	dc06      	bgt.n	800ba52 <__sflush_r+0xfe>
 800ba44:	89a3      	ldrh	r3, [r4, #12]
 800ba46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba4a:	81a3      	strh	r3, [r4, #12]
 800ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba50:	e78e      	b.n	800b970 <__sflush_r+0x1c>
 800ba52:	4407      	add	r7, r0
 800ba54:	eba8 0800 	sub.w	r8, r8, r0
 800ba58:	e7e9      	b.n	800ba2e <__sflush_r+0xda>
 800ba5a:	bf00      	nop
 800ba5c:	dfbffffe 	.word	0xdfbffffe

0800ba60 <_fflush_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	690b      	ldr	r3, [r1, #16]
 800ba64:	4605      	mov	r5, r0
 800ba66:	460c      	mov	r4, r1
 800ba68:	b913      	cbnz	r3, 800ba70 <_fflush_r+0x10>
 800ba6a:	2500      	movs	r5, #0
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	b118      	cbz	r0, 800ba7a <_fflush_r+0x1a>
 800ba72:	6a03      	ldr	r3, [r0, #32]
 800ba74:	b90b      	cbnz	r3, 800ba7a <_fflush_r+0x1a>
 800ba76:	f7fe fa07 	bl	8009e88 <__sinit>
 800ba7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d0f3      	beq.n	800ba6a <_fflush_r+0xa>
 800ba82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba84:	07d0      	lsls	r0, r2, #31
 800ba86:	d404      	bmi.n	800ba92 <_fflush_r+0x32>
 800ba88:	0599      	lsls	r1, r3, #22
 800ba8a:	d402      	bmi.n	800ba92 <_fflush_r+0x32>
 800ba8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba8e:	f7fe fb11 	bl	800a0b4 <__retarget_lock_acquire_recursive>
 800ba92:	4628      	mov	r0, r5
 800ba94:	4621      	mov	r1, r4
 800ba96:	f7ff ff5d 	bl	800b954 <__sflush_r>
 800ba9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba9c:	07da      	lsls	r2, r3, #31
 800ba9e:	4605      	mov	r5, r0
 800baa0:	d4e4      	bmi.n	800ba6c <_fflush_r+0xc>
 800baa2:	89a3      	ldrh	r3, [r4, #12]
 800baa4:	059b      	lsls	r3, r3, #22
 800baa6:	d4e1      	bmi.n	800ba6c <_fflush_r+0xc>
 800baa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800baaa:	f7fe fb04 	bl	800a0b6 <__retarget_lock_release_recursive>
 800baae:	e7dd      	b.n	800ba6c <_fflush_r+0xc>

0800bab0 <memmove>:
 800bab0:	4288      	cmp	r0, r1
 800bab2:	b510      	push	{r4, lr}
 800bab4:	eb01 0402 	add.w	r4, r1, r2
 800bab8:	d902      	bls.n	800bac0 <memmove+0x10>
 800baba:	4284      	cmp	r4, r0
 800babc:	4623      	mov	r3, r4
 800babe:	d807      	bhi.n	800bad0 <memmove+0x20>
 800bac0:	1e43      	subs	r3, r0, #1
 800bac2:	42a1      	cmp	r1, r4
 800bac4:	d008      	beq.n	800bad8 <memmove+0x28>
 800bac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bace:	e7f8      	b.n	800bac2 <memmove+0x12>
 800bad0:	4402      	add	r2, r0
 800bad2:	4601      	mov	r1, r0
 800bad4:	428a      	cmp	r2, r1
 800bad6:	d100      	bne.n	800bada <memmove+0x2a>
 800bad8:	bd10      	pop	{r4, pc}
 800bada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bae2:	e7f7      	b.n	800bad4 <memmove+0x24>

0800bae4 <_sbrk_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d06      	ldr	r5, [pc, #24]	; (800bb00 <_sbrk_r+0x1c>)
 800bae8:	2300      	movs	r3, #0
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f7 fe2c 	bl	800374c <_sbrk>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_sbrk_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_sbrk_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	20001e74 	.word	0x20001e74

0800bb04 <memcpy>:
 800bb04:	440a      	add	r2, r1
 800bb06:	4291      	cmp	r1, r2
 800bb08:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb0c:	d100      	bne.n	800bb10 <memcpy+0xc>
 800bb0e:	4770      	bx	lr
 800bb10:	b510      	push	{r4, lr}
 800bb12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb1a:	4291      	cmp	r1, r2
 800bb1c:	d1f9      	bne.n	800bb12 <memcpy+0xe>
 800bb1e:	bd10      	pop	{r4, pc}

0800bb20 <__assert_func>:
 800bb20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb22:	4614      	mov	r4, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	4b09      	ldr	r3, [pc, #36]	; (800bb4c <__assert_func+0x2c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	68d8      	ldr	r0, [r3, #12]
 800bb2e:	b14c      	cbz	r4, 800bb44 <__assert_func+0x24>
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <__assert_func+0x30>)
 800bb32:	9100      	str	r1, [sp, #0]
 800bb34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb38:	4906      	ldr	r1, [pc, #24]	; (800bb54 <__assert_func+0x34>)
 800bb3a:	462b      	mov	r3, r5
 800bb3c:	f000 f872 	bl	800bc24 <fiprintf>
 800bb40:	f000 f882 	bl	800bc48 <abort>
 800bb44:	4b04      	ldr	r3, [pc, #16]	; (800bb58 <__assert_func+0x38>)
 800bb46:	461c      	mov	r4, r3
 800bb48:	e7f3      	b.n	800bb32 <__assert_func+0x12>
 800bb4a:	bf00      	nop
 800bb4c:	2000006c 	.word	0x2000006c
 800bb50:	0800cabf 	.word	0x0800cabf
 800bb54:	0800cacc 	.word	0x0800cacc
 800bb58:	0800cafa 	.word	0x0800cafa

0800bb5c <_calloc_r>:
 800bb5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb5e:	fba1 2402 	umull	r2, r4, r1, r2
 800bb62:	b94c      	cbnz	r4, 800bb78 <_calloc_r+0x1c>
 800bb64:	4611      	mov	r1, r2
 800bb66:	9201      	str	r2, [sp, #4]
 800bb68:	f7ff f994 	bl	800ae94 <_malloc_r>
 800bb6c:	9a01      	ldr	r2, [sp, #4]
 800bb6e:	4605      	mov	r5, r0
 800bb70:	b930      	cbnz	r0, 800bb80 <_calloc_r+0x24>
 800bb72:	4628      	mov	r0, r5
 800bb74:	b003      	add	sp, #12
 800bb76:	bd30      	pop	{r4, r5, pc}
 800bb78:	220c      	movs	r2, #12
 800bb7a:	6002      	str	r2, [r0, #0]
 800bb7c:	2500      	movs	r5, #0
 800bb7e:	e7f8      	b.n	800bb72 <_calloc_r+0x16>
 800bb80:	4621      	mov	r1, r4
 800bb82:	f7fe fa1b 	bl	8009fbc <memset>
 800bb86:	e7f4      	b.n	800bb72 <_calloc_r+0x16>

0800bb88 <__ascii_mbtowc>:
 800bb88:	b082      	sub	sp, #8
 800bb8a:	b901      	cbnz	r1, 800bb8e <__ascii_mbtowc+0x6>
 800bb8c:	a901      	add	r1, sp, #4
 800bb8e:	b142      	cbz	r2, 800bba2 <__ascii_mbtowc+0x1a>
 800bb90:	b14b      	cbz	r3, 800bba6 <__ascii_mbtowc+0x1e>
 800bb92:	7813      	ldrb	r3, [r2, #0]
 800bb94:	600b      	str	r3, [r1, #0]
 800bb96:	7812      	ldrb	r2, [r2, #0]
 800bb98:	1e10      	subs	r0, r2, #0
 800bb9a:	bf18      	it	ne
 800bb9c:	2001      	movne	r0, #1
 800bb9e:	b002      	add	sp, #8
 800bba0:	4770      	bx	lr
 800bba2:	4610      	mov	r0, r2
 800bba4:	e7fb      	b.n	800bb9e <__ascii_mbtowc+0x16>
 800bba6:	f06f 0001 	mvn.w	r0, #1
 800bbaa:	e7f8      	b.n	800bb9e <__ascii_mbtowc+0x16>

0800bbac <_realloc_r>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	4680      	mov	r8, r0
 800bbb2:	4614      	mov	r4, r2
 800bbb4:	460e      	mov	r6, r1
 800bbb6:	b921      	cbnz	r1, 800bbc2 <_realloc_r+0x16>
 800bbb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbc:	4611      	mov	r1, r2
 800bbbe:	f7ff b969 	b.w	800ae94 <_malloc_r>
 800bbc2:	b92a      	cbnz	r2, 800bbd0 <_realloc_r+0x24>
 800bbc4:	f7ff f8f2 	bl	800adac <_free_r>
 800bbc8:	4625      	mov	r5, r4
 800bbca:	4628      	mov	r0, r5
 800bbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd0:	f000 f841 	bl	800bc56 <_malloc_usable_size_r>
 800bbd4:	4284      	cmp	r4, r0
 800bbd6:	4607      	mov	r7, r0
 800bbd8:	d802      	bhi.n	800bbe0 <_realloc_r+0x34>
 800bbda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbde:	d812      	bhi.n	800bc06 <_realloc_r+0x5a>
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	f7ff f956 	bl	800ae94 <_malloc_r>
 800bbe8:	4605      	mov	r5, r0
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d0ed      	beq.n	800bbca <_realloc_r+0x1e>
 800bbee:	42bc      	cmp	r4, r7
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	bf28      	it	cs
 800bbf6:	463a      	movcs	r2, r7
 800bbf8:	f7ff ff84 	bl	800bb04 <memcpy>
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	4640      	mov	r0, r8
 800bc00:	f7ff f8d4 	bl	800adac <_free_r>
 800bc04:	e7e1      	b.n	800bbca <_realloc_r+0x1e>
 800bc06:	4635      	mov	r5, r6
 800bc08:	e7df      	b.n	800bbca <_realloc_r+0x1e>

0800bc0a <__ascii_wctomb>:
 800bc0a:	b149      	cbz	r1, 800bc20 <__ascii_wctomb+0x16>
 800bc0c:	2aff      	cmp	r2, #255	; 0xff
 800bc0e:	bf85      	ittet	hi
 800bc10:	238a      	movhi	r3, #138	; 0x8a
 800bc12:	6003      	strhi	r3, [r0, #0]
 800bc14:	700a      	strbls	r2, [r1, #0]
 800bc16:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc1a:	bf98      	it	ls
 800bc1c:	2001      	movls	r0, #1
 800bc1e:	4770      	bx	lr
 800bc20:	4608      	mov	r0, r1
 800bc22:	4770      	bx	lr

0800bc24 <fiprintf>:
 800bc24:	b40e      	push	{r1, r2, r3}
 800bc26:	b503      	push	{r0, r1, lr}
 800bc28:	4601      	mov	r1, r0
 800bc2a:	ab03      	add	r3, sp, #12
 800bc2c:	4805      	ldr	r0, [pc, #20]	; (800bc44 <fiprintf+0x20>)
 800bc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc32:	6800      	ldr	r0, [r0, #0]
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	f000 f83f 	bl	800bcb8 <_vfiprintf_r>
 800bc3a:	b002      	add	sp, #8
 800bc3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc40:	b003      	add	sp, #12
 800bc42:	4770      	bx	lr
 800bc44:	2000006c 	.word	0x2000006c

0800bc48 <abort>:
 800bc48:	b508      	push	{r3, lr}
 800bc4a:	2006      	movs	r0, #6
 800bc4c:	f000 fa0c 	bl	800c068 <raise>
 800bc50:	2001      	movs	r0, #1
 800bc52:	f7f7 fd4b 	bl	80036ec <_exit>

0800bc56 <_malloc_usable_size_r>:
 800bc56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc5a:	1f18      	subs	r0, r3, #4
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	bfbc      	itt	lt
 800bc60:	580b      	ldrlt	r3, [r1, r0]
 800bc62:	18c0      	addlt	r0, r0, r3
 800bc64:	4770      	bx	lr

0800bc66 <__sfputc_r>:
 800bc66:	6893      	ldr	r3, [r2, #8]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	b410      	push	{r4}
 800bc6e:	6093      	str	r3, [r2, #8]
 800bc70:	da08      	bge.n	800bc84 <__sfputc_r+0x1e>
 800bc72:	6994      	ldr	r4, [r2, #24]
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	db01      	blt.n	800bc7c <__sfputc_r+0x16>
 800bc78:	290a      	cmp	r1, #10
 800bc7a:	d103      	bne.n	800bc84 <__sfputc_r+0x1e>
 800bc7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc80:	f000 b934 	b.w	800beec <__swbuf_r>
 800bc84:	6813      	ldr	r3, [r2, #0]
 800bc86:	1c58      	adds	r0, r3, #1
 800bc88:	6010      	str	r0, [r2, #0]
 800bc8a:	7019      	strb	r1, [r3, #0]
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <__sfputs_r>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	4606      	mov	r6, r0
 800bc98:	460f      	mov	r7, r1
 800bc9a:	4614      	mov	r4, r2
 800bc9c:	18d5      	adds	r5, r2, r3
 800bc9e:	42ac      	cmp	r4, r5
 800bca0:	d101      	bne.n	800bca6 <__sfputs_r+0x12>
 800bca2:	2000      	movs	r0, #0
 800bca4:	e007      	b.n	800bcb6 <__sfputs_r+0x22>
 800bca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcaa:	463a      	mov	r2, r7
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7ff ffda 	bl	800bc66 <__sfputc_r>
 800bcb2:	1c43      	adds	r3, r0, #1
 800bcb4:	d1f3      	bne.n	800bc9e <__sfputs_r+0xa>
 800bcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcb8 <_vfiprintf_r>:
 800bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	b09d      	sub	sp, #116	; 0x74
 800bcc0:	4614      	mov	r4, r2
 800bcc2:	4698      	mov	r8, r3
 800bcc4:	4606      	mov	r6, r0
 800bcc6:	b118      	cbz	r0, 800bcd0 <_vfiprintf_r+0x18>
 800bcc8:	6a03      	ldr	r3, [r0, #32]
 800bcca:	b90b      	cbnz	r3, 800bcd0 <_vfiprintf_r+0x18>
 800bccc:	f7fe f8dc 	bl	8009e88 <__sinit>
 800bcd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcd2:	07d9      	lsls	r1, r3, #31
 800bcd4:	d405      	bmi.n	800bce2 <_vfiprintf_r+0x2a>
 800bcd6:	89ab      	ldrh	r3, [r5, #12]
 800bcd8:	059a      	lsls	r2, r3, #22
 800bcda:	d402      	bmi.n	800bce2 <_vfiprintf_r+0x2a>
 800bcdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcde:	f7fe f9e9 	bl	800a0b4 <__retarget_lock_acquire_recursive>
 800bce2:	89ab      	ldrh	r3, [r5, #12]
 800bce4:	071b      	lsls	r3, r3, #28
 800bce6:	d501      	bpl.n	800bcec <_vfiprintf_r+0x34>
 800bce8:	692b      	ldr	r3, [r5, #16]
 800bcea:	b99b      	cbnz	r3, 800bd14 <_vfiprintf_r+0x5c>
 800bcec:	4629      	mov	r1, r5
 800bcee:	4630      	mov	r0, r6
 800bcf0:	f000 f93a 	bl	800bf68 <__swsetup_r>
 800bcf4:	b170      	cbz	r0, 800bd14 <_vfiprintf_r+0x5c>
 800bcf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf8:	07dc      	lsls	r4, r3, #31
 800bcfa:	d504      	bpl.n	800bd06 <_vfiprintf_r+0x4e>
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bd00:	b01d      	add	sp, #116	; 0x74
 800bd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	0598      	lsls	r0, r3, #22
 800bd0a:	d4f7      	bmi.n	800bcfc <_vfiprintf_r+0x44>
 800bd0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd0e:	f7fe f9d2 	bl	800a0b6 <__retarget_lock_release_recursive>
 800bd12:	e7f3      	b.n	800bcfc <_vfiprintf_r+0x44>
 800bd14:	2300      	movs	r3, #0
 800bd16:	9309      	str	r3, [sp, #36]	; 0x24
 800bd18:	2320      	movs	r3, #32
 800bd1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd22:	2330      	movs	r3, #48	; 0x30
 800bd24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bed8 <_vfiprintf_r+0x220>
 800bd28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd2c:	f04f 0901 	mov.w	r9, #1
 800bd30:	4623      	mov	r3, r4
 800bd32:	469a      	mov	sl, r3
 800bd34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd38:	b10a      	cbz	r2, 800bd3e <_vfiprintf_r+0x86>
 800bd3a:	2a25      	cmp	r2, #37	; 0x25
 800bd3c:	d1f9      	bne.n	800bd32 <_vfiprintf_r+0x7a>
 800bd3e:	ebba 0b04 	subs.w	fp, sl, r4
 800bd42:	d00b      	beq.n	800bd5c <_vfiprintf_r+0xa4>
 800bd44:	465b      	mov	r3, fp
 800bd46:	4622      	mov	r2, r4
 800bd48:	4629      	mov	r1, r5
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f7ff ffa2 	bl	800bc94 <__sfputs_r>
 800bd50:	3001      	adds	r0, #1
 800bd52:	f000 80a9 	beq.w	800bea8 <_vfiprintf_r+0x1f0>
 800bd56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd58:	445a      	add	r2, fp
 800bd5a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f000 80a1 	beq.w	800bea8 <_vfiprintf_r+0x1f0>
 800bd66:	2300      	movs	r3, #0
 800bd68:	f04f 32ff 	mov.w	r2, #4294967295
 800bd6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd70:	f10a 0a01 	add.w	sl, sl, #1
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	9307      	str	r3, [sp, #28]
 800bd78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd7c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd7e:	4654      	mov	r4, sl
 800bd80:	2205      	movs	r2, #5
 800bd82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd86:	4854      	ldr	r0, [pc, #336]	; (800bed8 <_vfiprintf_r+0x220>)
 800bd88:	f7f4 fa22 	bl	80001d0 <memchr>
 800bd8c:	9a04      	ldr	r2, [sp, #16]
 800bd8e:	b9d8      	cbnz	r0, 800bdc8 <_vfiprintf_r+0x110>
 800bd90:	06d1      	lsls	r1, r2, #27
 800bd92:	bf44      	itt	mi
 800bd94:	2320      	movmi	r3, #32
 800bd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd9a:	0713      	lsls	r3, r2, #28
 800bd9c:	bf44      	itt	mi
 800bd9e:	232b      	movmi	r3, #43	; 0x2b
 800bda0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bda4:	f89a 3000 	ldrb.w	r3, [sl]
 800bda8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdaa:	d015      	beq.n	800bdd8 <_vfiprintf_r+0x120>
 800bdac:	9a07      	ldr	r2, [sp, #28]
 800bdae:	4654      	mov	r4, sl
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	f04f 0c0a 	mov.w	ip, #10
 800bdb6:	4621      	mov	r1, r4
 800bdb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdbc:	3b30      	subs	r3, #48	; 0x30
 800bdbe:	2b09      	cmp	r3, #9
 800bdc0:	d94d      	bls.n	800be5e <_vfiprintf_r+0x1a6>
 800bdc2:	b1b0      	cbz	r0, 800bdf2 <_vfiprintf_r+0x13a>
 800bdc4:	9207      	str	r2, [sp, #28]
 800bdc6:	e014      	b.n	800bdf2 <_vfiprintf_r+0x13a>
 800bdc8:	eba0 0308 	sub.w	r3, r0, r8
 800bdcc:	fa09 f303 	lsl.w	r3, r9, r3
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	9304      	str	r3, [sp, #16]
 800bdd4:	46a2      	mov	sl, r4
 800bdd6:	e7d2      	b.n	800bd7e <_vfiprintf_r+0xc6>
 800bdd8:	9b03      	ldr	r3, [sp, #12]
 800bdda:	1d19      	adds	r1, r3, #4
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	9103      	str	r1, [sp, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	bfbb      	ittet	lt
 800bde4:	425b      	neglt	r3, r3
 800bde6:	f042 0202 	orrlt.w	r2, r2, #2
 800bdea:	9307      	strge	r3, [sp, #28]
 800bdec:	9307      	strlt	r3, [sp, #28]
 800bdee:	bfb8      	it	lt
 800bdf0:	9204      	strlt	r2, [sp, #16]
 800bdf2:	7823      	ldrb	r3, [r4, #0]
 800bdf4:	2b2e      	cmp	r3, #46	; 0x2e
 800bdf6:	d10c      	bne.n	800be12 <_vfiprintf_r+0x15a>
 800bdf8:	7863      	ldrb	r3, [r4, #1]
 800bdfa:	2b2a      	cmp	r3, #42	; 0x2a
 800bdfc:	d134      	bne.n	800be68 <_vfiprintf_r+0x1b0>
 800bdfe:	9b03      	ldr	r3, [sp, #12]
 800be00:	1d1a      	adds	r2, r3, #4
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	9203      	str	r2, [sp, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	bfb8      	it	lt
 800be0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be0e:	3402      	adds	r4, #2
 800be10:	9305      	str	r3, [sp, #20]
 800be12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bee8 <_vfiprintf_r+0x230>
 800be16:	7821      	ldrb	r1, [r4, #0]
 800be18:	2203      	movs	r2, #3
 800be1a:	4650      	mov	r0, sl
 800be1c:	f7f4 f9d8 	bl	80001d0 <memchr>
 800be20:	b138      	cbz	r0, 800be32 <_vfiprintf_r+0x17a>
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	eba0 000a 	sub.w	r0, r0, sl
 800be28:	2240      	movs	r2, #64	; 0x40
 800be2a:	4082      	lsls	r2, r0
 800be2c:	4313      	orrs	r3, r2
 800be2e:	3401      	adds	r4, #1
 800be30:	9304      	str	r3, [sp, #16]
 800be32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be36:	4829      	ldr	r0, [pc, #164]	; (800bedc <_vfiprintf_r+0x224>)
 800be38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be3c:	2206      	movs	r2, #6
 800be3e:	f7f4 f9c7 	bl	80001d0 <memchr>
 800be42:	2800      	cmp	r0, #0
 800be44:	d03f      	beq.n	800bec6 <_vfiprintf_r+0x20e>
 800be46:	4b26      	ldr	r3, [pc, #152]	; (800bee0 <_vfiprintf_r+0x228>)
 800be48:	bb1b      	cbnz	r3, 800be92 <_vfiprintf_r+0x1da>
 800be4a:	9b03      	ldr	r3, [sp, #12]
 800be4c:	3307      	adds	r3, #7
 800be4e:	f023 0307 	bic.w	r3, r3, #7
 800be52:	3308      	adds	r3, #8
 800be54:	9303      	str	r3, [sp, #12]
 800be56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be58:	443b      	add	r3, r7
 800be5a:	9309      	str	r3, [sp, #36]	; 0x24
 800be5c:	e768      	b.n	800bd30 <_vfiprintf_r+0x78>
 800be5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be62:	460c      	mov	r4, r1
 800be64:	2001      	movs	r0, #1
 800be66:	e7a6      	b.n	800bdb6 <_vfiprintf_r+0xfe>
 800be68:	2300      	movs	r3, #0
 800be6a:	3401      	adds	r4, #1
 800be6c:	9305      	str	r3, [sp, #20]
 800be6e:	4619      	mov	r1, r3
 800be70:	f04f 0c0a 	mov.w	ip, #10
 800be74:	4620      	mov	r0, r4
 800be76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be7a:	3a30      	subs	r2, #48	; 0x30
 800be7c:	2a09      	cmp	r2, #9
 800be7e:	d903      	bls.n	800be88 <_vfiprintf_r+0x1d0>
 800be80:	2b00      	cmp	r3, #0
 800be82:	d0c6      	beq.n	800be12 <_vfiprintf_r+0x15a>
 800be84:	9105      	str	r1, [sp, #20]
 800be86:	e7c4      	b.n	800be12 <_vfiprintf_r+0x15a>
 800be88:	fb0c 2101 	mla	r1, ip, r1, r2
 800be8c:	4604      	mov	r4, r0
 800be8e:	2301      	movs	r3, #1
 800be90:	e7f0      	b.n	800be74 <_vfiprintf_r+0x1bc>
 800be92:	ab03      	add	r3, sp, #12
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	462a      	mov	r2, r5
 800be98:	4b12      	ldr	r3, [pc, #72]	; (800bee4 <_vfiprintf_r+0x22c>)
 800be9a:	a904      	add	r1, sp, #16
 800be9c:	4630      	mov	r0, r6
 800be9e:	f7fd fbb3 	bl	8009608 <_printf_float>
 800bea2:	4607      	mov	r7, r0
 800bea4:	1c78      	adds	r0, r7, #1
 800bea6:	d1d6      	bne.n	800be56 <_vfiprintf_r+0x19e>
 800bea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800beaa:	07d9      	lsls	r1, r3, #31
 800beac:	d405      	bmi.n	800beba <_vfiprintf_r+0x202>
 800beae:	89ab      	ldrh	r3, [r5, #12]
 800beb0:	059a      	lsls	r2, r3, #22
 800beb2:	d402      	bmi.n	800beba <_vfiprintf_r+0x202>
 800beb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beb6:	f7fe f8fe 	bl	800a0b6 <__retarget_lock_release_recursive>
 800beba:	89ab      	ldrh	r3, [r5, #12]
 800bebc:	065b      	lsls	r3, r3, #25
 800bebe:	f53f af1d 	bmi.w	800bcfc <_vfiprintf_r+0x44>
 800bec2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bec4:	e71c      	b.n	800bd00 <_vfiprintf_r+0x48>
 800bec6:	ab03      	add	r3, sp, #12
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	462a      	mov	r2, r5
 800becc:	4b05      	ldr	r3, [pc, #20]	; (800bee4 <_vfiprintf_r+0x22c>)
 800bece:	a904      	add	r1, sp, #16
 800bed0:	4630      	mov	r0, r6
 800bed2:	f7fd fe3d 	bl	8009b50 <_printf_i>
 800bed6:	e7e4      	b.n	800bea2 <_vfiprintf_r+0x1ea>
 800bed8:	0800caa4 	.word	0x0800caa4
 800bedc:	0800caae 	.word	0x0800caae
 800bee0:	08009609 	.word	0x08009609
 800bee4:	0800bc95 	.word	0x0800bc95
 800bee8:	0800caaa 	.word	0x0800caaa

0800beec <__swbuf_r>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	460e      	mov	r6, r1
 800bef0:	4614      	mov	r4, r2
 800bef2:	4605      	mov	r5, r0
 800bef4:	b118      	cbz	r0, 800befe <__swbuf_r+0x12>
 800bef6:	6a03      	ldr	r3, [r0, #32]
 800bef8:	b90b      	cbnz	r3, 800befe <__swbuf_r+0x12>
 800befa:	f7fd ffc5 	bl	8009e88 <__sinit>
 800befe:	69a3      	ldr	r3, [r4, #24]
 800bf00:	60a3      	str	r3, [r4, #8]
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	071a      	lsls	r2, r3, #28
 800bf06:	d525      	bpl.n	800bf54 <__swbuf_r+0x68>
 800bf08:	6923      	ldr	r3, [r4, #16]
 800bf0a:	b31b      	cbz	r3, 800bf54 <__swbuf_r+0x68>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	6922      	ldr	r2, [r4, #16]
 800bf10:	1a98      	subs	r0, r3, r2
 800bf12:	6963      	ldr	r3, [r4, #20]
 800bf14:	b2f6      	uxtb	r6, r6
 800bf16:	4283      	cmp	r3, r0
 800bf18:	4637      	mov	r7, r6
 800bf1a:	dc04      	bgt.n	800bf26 <__swbuf_r+0x3a>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f7ff fd9e 	bl	800ba60 <_fflush_r>
 800bf24:	b9e0      	cbnz	r0, 800bf60 <__swbuf_r+0x74>
 800bf26:	68a3      	ldr	r3, [r4, #8]
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	60a3      	str	r3, [r4, #8]
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	6022      	str	r2, [r4, #0]
 800bf32:	701e      	strb	r6, [r3, #0]
 800bf34:	6962      	ldr	r2, [r4, #20]
 800bf36:	1c43      	adds	r3, r0, #1
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d004      	beq.n	800bf46 <__swbuf_r+0x5a>
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	07db      	lsls	r3, r3, #31
 800bf40:	d506      	bpl.n	800bf50 <__swbuf_r+0x64>
 800bf42:	2e0a      	cmp	r6, #10
 800bf44:	d104      	bne.n	800bf50 <__swbuf_r+0x64>
 800bf46:	4621      	mov	r1, r4
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f7ff fd89 	bl	800ba60 <_fflush_r>
 800bf4e:	b938      	cbnz	r0, 800bf60 <__swbuf_r+0x74>
 800bf50:	4638      	mov	r0, r7
 800bf52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf54:	4621      	mov	r1, r4
 800bf56:	4628      	mov	r0, r5
 800bf58:	f000 f806 	bl	800bf68 <__swsetup_r>
 800bf5c:	2800      	cmp	r0, #0
 800bf5e:	d0d5      	beq.n	800bf0c <__swbuf_r+0x20>
 800bf60:	f04f 37ff 	mov.w	r7, #4294967295
 800bf64:	e7f4      	b.n	800bf50 <__swbuf_r+0x64>
	...

0800bf68 <__swsetup_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	4b2a      	ldr	r3, [pc, #168]	; (800c014 <__swsetup_r+0xac>)
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	6818      	ldr	r0, [r3, #0]
 800bf70:	460c      	mov	r4, r1
 800bf72:	b118      	cbz	r0, 800bf7c <__swsetup_r+0x14>
 800bf74:	6a03      	ldr	r3, [r0, #32]
 800bf76:	b90b      	cbnz	r3, 800bf7c <__swsetup_r+0x14>
 800bf78:	f7fd ff86 	bl	8009e88 <__sinit>
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf82:	0718      	lsls	r0, r3, #28
 800bf84:	d422      	bmi.n	800bfcc <__swsetup_r+0x64>
 800bf86:	06d9      	lsls	r1, r3, #27
 800bf88:	d407      	bmi.n	800bf9a <__swsetup_r+0x32>
 800bf8a:	2309      	movs	r3, #9
 800bf8c:	602b      	str	r3, [r5, #0]
 800bf8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf92:	81a3      	strh	r3, [r4, #12]
 800bf94:	f04f 30ff 	mov.w	r0, #4294967295
 800bf98:	e034      	b.n	800c004 <__swsetup_r+0x9c>
 800bf9a:	0758      	lsls	r0, r3, #29
 800bf9c:	d512      	bpl.n	800bfc4 <__swsetup_r+0x5c>
 800bf9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfa0:	b141      	cbz	r1, 800bfb4 <__swsetup_r+0x4c>
 800bfa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfa6:	4299      	cmp	r1, r3
 800bfa8:	d002      	beq.n	800bfb0 <__swsetup_r+0x48>
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f7fe fefe 	bl	800adac <_free_r>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	6363      	str	r3, [r4, #52]	; 0x34
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfba:	81a3      	strh	r3, [r4, #12]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	6063      	str	r3, [r4, #4]
 800bfc0:	6923      	ldr	r3, [r4, #16]
 800bfc2:	6023      	str	r3, [r4, #0]
 800bfc4:	89a3      	ldrh	r3, [r4, #12]
 800bfc6:	f043 0308 	orr.w	r3, r3, #8
 800bfca:	81a3      	strh	r3, [r4, #12]
 800bfcc:	6923      	ldr	r3, [r4, #16]
 800bfce:	b94b      	cbnz	r3, 800bfe4 <__swsetup_r+0x7c>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfda:	d003      	beq.n	800bfe4 <__swsetup_r+0x7c>
 800bfdc:	4621      	mov	r1, r4
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f000 f884 	bl	800c0ec <__smakebuf_r>
 800bfe4:	89a0      	ldrh	r0, [r4, #12]
 800bfe6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfea:	f010 0301 	ands.w	r3, r0, #1
 800bfee:	d00a      	beq.n	800c006 <__swsetup_r+0x9e>
 800bff0:	2300      	movs	r3, #0
 800bff2:	60a3      	str	r3, [r4, #8]
 800bff4:	6963      	ldr	r3, [r4, #20]
 800bff6:	425b      	negs	r3, r3
 800bff8:	61a3      	str	r3, [r4, #24]
 800bffa:	6923      	ldr	r3, [r4, #16]
 800bffc:	b943      	cbnz	r3, 800c010 <__swsetup_r+0xa8>
 800bffe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c002:	d1c4      	bne.n	800bf8e <__swsetup_r+0x26>
 800c004:	bd38      	pop	{r3, r4, r5, pc}
 800c006:	0781      	lsls	r1, r0, #30
 800c008:	bf58      	it	pl
 800c00a:	6963      	ldrpl	r3, [r4, #20]
 800c00c:	60a3      	str	r3, [r4, #8]
 800c00e:	e7f4      	b.n	800bffa <__swsetup_r+0x92>
 800c010:	2000      	movs	r0, #0
 800c012:	e7f7      	b.n	800c004 <__swsetup_r+0x9c>
 800c014:	2000006c 	.word	0x2000006c

0800c018 <_raise_r>:
 800c018:	291f      	cmp	r1, #31
 800c01a:	b538      	push	{r3, r4, r5, lr}
 800c01c:	4604      	mov	r4, r0
 800c01e:	460d      	mov	r5, r1
 800c020:	d904      	bls.n	800c02c <_raise_r+0x14>
 800c022:	2316      	movs	r3, #22
 800c024:	6003      	str	r3, [r0, #0]
 800c026:	f04f 30ff 	mov.w	r0, #4294967295
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c02e:	b112      	cbz	r2, 800c036 <_raise_r+0x1e>
 800c030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c034:	b94b      	cbnz	r3, 800c04a <_raise_r+0x32>
 800c036:	4620      	mov	r0, r4
 800c038:	f000 f830 	bl	800c09c <_getpid_r>
 800c03c:	462a      	mov	r2, r5
 800c03e:	4601      	mov	r1, r0
 800c040:	4620      	mov	r0, r4
 800c042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c046:	f000 b817 	b.w	800c078 <_kill_r>
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d00a      	beq.n	800c064 <_raise_r+0x4c>
 800c04e:	1c59      	adds	r1, r3, #1
 800c050:	d103      	bne.n	800c05a <_raise_r+0x42>
 800c052:	2316      	movs	r3, #22
 800c054:	6003      	str	r3, [r0, #0]
 800c056:	2001      	movs	r0, #1
 800c058:	e7e7      	b.n	800c02a <_raise_r+0x12>
 800c05a:	2400      	movs	r4, #0
 800c05c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c060:	4628      	mov	r0, r5
 800c062:	4798      	blx	r3
 800c064:	2000      	movs	r0, #0
 800c066:	e7e0      	b.n	800c02a <_raise_r+0x12>

0800c068 <raise>:
 800c068:	4b02      	ldr	r3, [pc, #8]	; (800c074 <raise+0xc>)
 800c06a:	4601      	mov	r1, r0
 800c06c:	6818      	ldr	r0, [r3, #0]
 800c06e:	f7ff bfd3 	b.w	800c018 <_raise_r>
 800c072:	bf00      	nop
 800c074:	2000006c 	.word	0x2000006c

0800c078 <_kill_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4d07      	ldr	r5, [pc, #28]	; (800c098 <_kill_r+0x20>)
 800c07c:	2300      	movs	r3, #0
 800c07e:	4604      	mov	r4, r0
 800c080:	4608      	mov	r0, r1
 800c082:	4611      	mov	r1, r2
 800c084:	602b      	str	r3, [r5, #0]
 800c086:	f7f7 fb29 	bl	80036dc <_kill>
 800c08a:	1c43      	adds	r3, r0, #1
 800c08c:	d102      	bne.n	800c094 <_kill_r+0x1c>
 800c08e:	682b      	ldr	r3, [r5, #0]
 800c090:	b103      	cbz	r3, 800c094 <_kill_r+0x1c>
 800c092:	6023      	str	r3, [r4, #0]
 800c094:	bd38      	pop	{r3, r4, r5, pc}
 800c096:	bf00      	nop
 800c098:	20001e74 	.word	0x20001e74

0800c09c <_getpid_r>:
 800c09c:	f7f7 bb1c 	b.w	80036d8 <_getpid>

0800c0a0 <__swhatbuf_r>:
 800c0a0:	b570      	push	{r4, r5, r6, lr}
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a8:	2900      	cmp	r1, #0
 800c0aa:	b096      	sub	sp, #88	; 0x58
 800c0ac:	4615      	mov	r5, r2
 800c0ae:	461e      	mov	r6, r3
 800c0b0:	da0d      	bge.n	800c0ce <__swhatbuf_r+0x2e>
 800c0b2:	89a3      	ldrh	r3, [r4, #12]
 800c0b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0b8:	f04f 0100 	mov.w	r1, #0
 800c0bc:	bf0c      	ite	eq
 800c0be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0c2:	2340      	movne	r3, #64	; 0x40
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	6031      	str	r1, [r6, #0]
 800c0c8:	602b      	str	r3, [r5, #0]
 800c0ca:	b016      	add	sp, #88	; 0x58
 800c0cc:	bd70      	pop	{r4, r5, r6, pc}
 800c0ce:	466a      	mov	r2, sp
 800c0d0:	f000 f848 	bl	800c164 <_fstat_r>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	dbec      	blt.n	800c0b2 <__swhatbuf_r+0x12>
 800c0d8:	9901      	ldr	r1, [sp, #4]
 800c0da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0e2:	4259      	negs	r1, r3
 800c0e4:	4159      	adcs	r1, r3
 800c0e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ea:	e7eb      	b.n	800c0c4 <__swhatbuf_r+0x24>

0800c0ec <__smakebuf_r>:
 800c0ec:	898b      	ldrh	r3, [r1, #12]
 800c0ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0f0:	079d      	lsls	r5, r3, #30
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	460c      	mov	r4, r1
 800c0f6:	d507      	bpl.n	800c108 <__smakebuf_r+0x1c>
 800c0f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0fc:	6023      	str	r3, [r4, #0]
 800c0fe:	6123      	str	r3, [r4, #16]
 800c100:	2301      	movs	r3, #1
 800c102:	6163      	str	r3, [r4, #20]
 800c104:	b002      	add	sp, #8
 800c106:	bd70      	pop	{r4, r5, r6, pc}
 800c108:	ab01      	add	r3, sp, #4
 800c10a:	466a      	mov	r2, sp
 800c10c:	f7ff ffc8 	bl	800c0a0 <__swhatbuf_r>
 800c110:	9900      	ldr	r1, [sp, #0]
 800c112:	4605      	mov	r5, r0
 800c114:	4630      	mov	r0, r6
 800c116:	f7fe febd 	bl	800ae94 <_malloc_r>
 800c11a:	b948      	cbnz	r0, 800c130 <__smakebuf_r+0x44>
 800c11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c120:	059a      	lsls	r2, r3, #22
 800c122:	d4ef      	bmi.n	800c104 <__smakebuf_r+0x18>
 800c124:	f023 0303 	bic.w	r3, r3, #3
 800c128:	f043 0302 	orr.w	r3, r3, #2
 800c12c:	81a3      	strh	r3, [r4, #12]
 800c12e:	e7e3      	b.n	800c0f8 <__smakebuf_r+0xc>
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	6020      	str	r0, [r4, #0]
 800c134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c138:	81a3      	strh	r3, [r4, #12]
 800c13a:	9b00      	ldr	r3, [sp, #0]
 800c13c:	6163      	str	r3, [r4, #20]
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	6120      	str	r0, [r4, #16]
 800c142:	b15b      	cbz	r3, 800c15c <__smakebuf_r+0x70>
 800c144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c148:	4630      	mov	r0, r6
 800c14a:	f000 f81d 	bl	800c188 <_isatty_r>
 800c14e:	b128      	cbz	r0, 800c15c <__smakebuf_r+0x70>
 800c150:	89a3      	ldrh	r3, [r4, #12]
 800c152:	f023 0303 	bic.w	r3, r3, #3
 800c156:	f043 0301 	orr.w	r3, r3, #1
 800c15a:	81a3      	strh	r3, [r4, #12]
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	431d      	orrs	r5, r3
 800c160:	81a5      	strh	r5, [r4, #12]
 800c162:	e7cf      	b.n	800c104 <__smakebuf_r+0x18>

0800c164 <_fstat_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d07      	ldr	r5, [pc, #28]	; (800c184 <_fstat_r+0x20>)
 800c168:	2300      	movs	r3, #0
 800c16a:	4604      	mov	r4, r0
 800c16c:	4608      	mov	r0, r1
 800c16e:	4611      	mov	r1, r2
 800c170:	602b      	str	r3, [r5, #0]
 800c172:	f7f7 fae1 	bl	8003738 <_fstat>
 800c176:	1c43      	adds	r3, r0, #1
 800c178:	d102      	bne.n	800c180 <_fstat_r+0x1c>
 800c17a:	682b      	ldr	r3, [r5, #0]
 800c17c:	b103      	cbz	r3, 800c180 <_fstat_r+0x1c>
 800c17e:	6023      	str	r3, [r4, #0]
 800c180:	bd38      	pop	{r3, r4, r5, pc}
 800c182:	bf00      	nop
 800c184:	20001e74 	.word	0x20001e74

0800c188 <_isatty_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d06      	ldr	r5, [pc, #24]	; (800c1a4 <_isatty_r+0x1c>)
 800c18c:	2300      	movs	r3, #0
 800c18e:	4604      	mov	r4, r0
 800c190:	4608      	mov	r0, r1
 800c192:	602b      	str	r3, [r5, #0]
 800c194:	f7f7 fad6 	bl	8003744 <_isatty>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_isatty_r+0x1a>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_isatty_r+0x1a>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	20001e74 	.word	0x20001e74

0800c1a8 <_init>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	bf00      	nop
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr

0800c1b4 <_fini>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	bf00      	nop
 800c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ba:	bc08      	pop	{r3}
 800c1bc:	469e      	mov	lr, r3
 800c1be:	4770      	bx	lr
