
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  0800add8  0800add8  0001add8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b644  0800b644  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b644  0800b644  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b644  0800b644  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b644  0800b644  0001b644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b648  0800b648  0001b648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b64c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000015e0  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200017c0  200017c0  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000247de  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c63  00000000  00000000  000449ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001b284  00000000  00000000  00049651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001190  00000000  00000000  000648d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002d28  00000000  00000000  00065a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000203c5  00000000  00000000  00068790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006713  00000000  00000000  00088b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0008f268  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f3c  00000000  00000000  0008f2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800adc0 	.word	0x0800adc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800adc0 	.word	0x0800adc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c8a:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000c8c:	2400      	movs	r4, #0
{
 8000c8e:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c90:	4621      	mov	r1, r4
 8000c92:	eb0d 0002 	add.w	r0, sp, r2
  ADC_MultiModeTypeDef multimode = {0};
 8000c96:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000c9e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000ca2:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca4:	9404      	str	r4, [sp, #16]
 8000ca6:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ca8:	f007 faec 	bl	8008284 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	483c      	ldr	r0, [pc, #240]	; (8000da0 <MX_ADC1_Init+0x118>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cae:	2301      	movs	r3, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000cba:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbc:	2304      	movs	r3, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cbe:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc2:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ccc:	8304      	strh	r4, [r0, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cce:	6084      	str	r4, [r0, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd4:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd6:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cda:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cdc:	f002 fa7c 	bl	80031d8 <HAL_ADC_Init>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d143      	bne.n	8000d6c <MX_ADC1_Init+0xe4>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce6:	482e      	ldr	r0, [pc, #184]	; (8000da0 <MX_ADC1_Init+0x118>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cea:	a901      	add	r1, sp, #4
 8000cec:	f003 f94e 	bl	8003f8c <HAL_ADCEx_MultiModeConfigChannel>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d14b      	bne.n	8000d8c <MX_ADC1_Init+0x104>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	4828      	ldr	r0, [pc, #160]	; (8000da0 <MX_ADC1_Init+0x118>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_1;
 8000d04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000d08:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0c:	f002 fd26 	bl	800375c <HAL_ADC_ConfigChannel>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d138      	bne.n	8000d86 <MX_ADC1_Init+0xfe>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 3;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d14:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8000d98 <MX_ADC1_Init+0x110>
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d18:	2103      	movs	r1, #3
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d1a:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d1c:	2201      	movs	r2, #1
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000d1e:	2404      	movs	r4, #4
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d20:	9110      	str	r1, [sp, #64]	; 0x40
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d22:	481f      	ldr	r0, [pc, #124]	; (8000da0 <MX_ADC1_Init+0x118>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d24:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d26:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d28:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d2c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d30:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000d34:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d36:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d3a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d3e:	f002 fed7 	bl	8003af0 <HAL_ADCEx_InjectedConfigChannel>
 8000d42:	b9e8      	cbnz	r0, 8000d80 <MX_ADC1_Init+0xf8>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d44:	2204      	movs	r2, #4
 8000d46:	2302      	movs	r3, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d48:	4815      	ldr	r0, [pc, #84]	; (8000da0 <MX_ADC1_Init+0x118>)
 8000d4a:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d4c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d50:	f002 fece 	bl	8003af0 <HAL_ADCEx_InjectedConfigChannel>
 8000d54:	b988      	cbnz	r0, 8000d7a <MX_ADC1_Init+0xf2>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d56:	2205      	movs	r2, #5
 8000d58:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_ADC1_Init+0x118>)
 8000d5c:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d62:	f002 fec5 	bl	8003af0 <HAL_ADCEx_InjectedConfigChannel>
 8000d66:	b920      	cbnz	r0, 8000d72 <MX_ADC1_Init+0xea>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d68:	b014      	add	sp, #80	; 0x50
 8000d6a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d6c:	f001 fbba 	bl	80024e4 <Error_Handler>
 8000d70:	e7b8      	b.n	8000ce4 <MX_ADC1_Init+0x5c>
    Error_Handler();
 8000d72:	f001 fbb7 	bl	80024e4 <Error_Handler>
}
 8000d76:	b014      	add	sp, #80	; 0x50
 8000d78:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d7a:	f001 fbb3 	bl	80024e4 <Error_Handler>
 8000d7e:	e7ea      	b.n	8000d56 <MX_ADC1_Init+0xce>
    Error_Handler();
 8000d80:	f001 fbb0 	bl	80024e4 <Error_Handler>
 8000d84:	e7de      	b.n	8000d44 <MX_ADC1_Init+0xbc>
    Error_Handler();
 8000d86:	f001 fbad 	bl	80024e4 <Error_Handler>
 8000d8a:	e7c3      	b.n	8000d14 <MX_ADC1_Init+0x8c>
    Error_Handler();
 8000d8c:	f001 fbaa 	bl	80024e4 <Error_Handler>
 8000d90:	e7b0      	b.n	8000cf4 <MX_ADC1_Init+0x6c>
 8000d92:	bf00      	nop
 8000d94:	f3af 8000 	nop.w
 8000d98:	00000001 	.word	0x00000001
 8000d9c:	00000040 	.word	0x00000040
 8000da0:	20000218 	.word	0x20000218
 8000da4:	00000000 	.word	0x00000000

08000da8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000da8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	2400      	movs	r4, #0
{
 8000dac:	b090      	sub	sp, #64	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	4621      	mov	r1, r4
 8000db2:	a806      	add	r0, sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000db4:	e9cd 4400 	strd	r4, r4, [sp]
 8000db8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000dbc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dc0:	f007 fa60 	bl	8008284 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <MX_ADC2_Init+0xc0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <MX_ADC2_Init+0xc4>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dc8:	8304      	strh	r4, [r0, #24]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dce:	e9c0 2300 	strd	r2, r3, [r0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dda:	2304      	movs	r3, #4
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dde:	6104      	str	r4, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de4:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000de6:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000de8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dec:	6143      	str	r3, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dee:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df0:	f002 f9f2 	bl	80031d8 <HAL_ADC_Init>
 8000df4:	bb38      	cbnz	r0, 8000e46 <MX_ADC2_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000df6:	2201      	movs	r2, #1
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfe:	481a      	ldr	r0, [pc, #104]	; (8000e68 <MX_ADC2_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000e00:	2200      	movs	r2, #0
 8000e02:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e04:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_1;
 8000e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e0e:	f002 fca5 	bl	800375c <HAL_ADC_ConfigChannel>
 8000e12:	b9f8      	cbnz	r0, 8000e54 <MX_ADC2_Init+0xac>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e14:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8000e60 <MX_ADC2_Init+0xb8>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000e18:	2004      	movs	r0, #4
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e1a:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e1c:	2201      	movs	r2, #1
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000e1e:	9008      	str	r0, [sp, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e20:	a906      	add	r1, sp, #24
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_ADC2_Init+0xc0>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e24:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e26:	e9cd 2206 	strd	r2, r2, [sp, #24]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e2a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e2e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000e32:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e34:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e38:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e3c:	f002 fe58 	bl	8003af0 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	b920      	cbnz	r0, 8000e4c <MX_ADC2_Init+0xa4>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e42:	b010      	add	sp, #64	; 0x40
 8000e44:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e46:	f001 fb4d 	bl	80024e4 <Error_Handler>
 8000e4a:	e7d4      	b.n	8000df6 <MX_ADC2_Init+0x4e>
    Error_Handler();
 8000e4c:	f001 fb4a 	bl	80024e4 <Error_Handler>
}
 8000e50:	b010      	add	sp, #64	; 0x40
 8000e52:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e54:	f001 fb46 	bl	80024e4 <Error_Handler>
 8000e58:	e7dc      	b.n	8000e14 <MX_ADC2_Init+0x6c>
 8000e5a:	bf00      	nop
 8000e5c:	f3af 8000 	nop.w
 8000e60:	00000001 	.word	0x00000001
 8000e64:	00000040 	.word	0x00000040
 8000e68:	20000268 	.word	0x20000268
 8000e6c:	50000100 	.word	0x50000100

08000e70 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e70:	b510      	push	{r4, lr}

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e72:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000e74:	2400      	movs	r4, #0
{
 8000e76:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e78:	eb0d 0002 	add.w	r0, sp, r2
 8000e7c:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000e7e:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000e86:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000e8a:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8c:	9404      	str	r4, [sp, #16]
 8000e8e:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e90:	f007 f9f8 	bl	8008284 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e94:	482c      	ldr	r0, [pc, #176]	; (8000f48 <MX_ADC3_Init+0xd8>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e96:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <MX_ADC3_Init+0xdc>)
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e98:	8304      	strh	r4, [r0, #24]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e9e:	e9c0 2300 	strd	r2, r3, [r0]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	2304      	movs	r3, #4
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	6084      	str	r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eae:	6104      	str	r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eb0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb4:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000eb6:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000eb8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	6143      	str	r3, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ebe:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ec0:	f002 f98a 	bl	80031d8 <HAL_ADC_Init>
 8000ec4:	bb78      	cbnz	r0, 8000f26 <MX_ADC3_Init+0xb6>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <MX_ADC3_Init+0xd8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eca:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ecc:	a901      	add	r1, sp, #4
 8000ece:	f003 f85d 	bl	8003f8c <HAL_ADCEx_MultiModeConfigChannel>
 8000ed2:	bb90      	cbnz	r0, 8000f3a <MX_ADC3_Init+0xca>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000edc:	481a      	ldr	r0, [pc, #104]	; (8000f48 <MX_ADC3_Init+0xd8>)
  sConfig.Channel = ADC_CHANNEL_5;
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ee2:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eec:	f002 fc36 	bl	800375c <HAL_ADC_ConfigChannel>
 8000ef0:	bb00      	cbnz	r0, 8000f34 <MX_ADC3_Init+0xc4>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000ef2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8000f40 <MX_ADC3_Init+0xd0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000ef6:	2201      	movs	r2, #1
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000ef8:	2005      	movs	r0, #5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000efa:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000efc:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000f00:	2404      	movs	r4, #4
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_ADC3_Init+0xd8>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f04:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f06:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f08:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f0c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f10:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000f12:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f14:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f18:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f1c:	f002 fde8 	bl	8003af0 <HAL_ADCEx_InjectedConfigChannel>
 8000f20:	b920      	cbnz	r0, 8000f2c <MX_ADC3_Init+0xbc>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f22:	b014      	add	sp, #80	; 0x50
 8000f24:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f26:	f001 fadd 	bl	80024e4 <Error_Handler>
 8000f2a:	e7cc      	b.n	8000ec6 <MX_ADC3_Init+0x56>
    Error_Handler();
 8000f2c:	f001 fada 	bl	80024e4 <Error_Handler>
}
 8000f30:	b014      	add	sp, #80	; 0x50
 8000f32:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f34:	f001 fad6 	bl	80024e4 <Error_Handler>
 8000f38:	e7db      	b.n	8000ef2 <MX_ADC3_Init+0x82>
    Error_Handler();
 8000f3a:	f001 fad3 	bl	80024e4 <Error_Handler>
 8000f3e:	e7c9      	b.n	8000ed4 <MX_ADC3_Init+0x64>
 8000f40:	00000001 	.word	0x00000001
 8000f44:	00000040 	.word	0x00000040
 8000f48:	200002b8 	.word	0x200002b8
 8000f4c:	50000400 	.word	0x50000400

08000f50 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f50:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000f52:	6802      	ldr	r2, [r0, #0]
{
 8000f54:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8000f58:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000f60:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000f64:	930c      	str	r3, [sp, #48]	; 0x30
  if(adcHandle->Instance==ADC1)
 8000f66:	d024      	beq.n	8000fb2 <HAL_ADC_MspInit+0x62>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <HAL_ADC_MspInit+0x140>)
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d005      	beq.n	8000f7a <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000f6e:	4b49      	ldr	r3, [pc, #292]	; (8001094 <HAL_ADC_MspInit+0x144>)
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d063      	beq.n	800103c <HAL_ADC_MspInit+0xec>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f74:	b00f      	add	sp, #60	; 0x3c
 8000f76:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f7a:	4a47      	ldr	r2, [pc, #284]	; (8001098 <HAL_ADC_MspInit+0x148>)
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f80:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f84:	d04f      	beq.n	8001026 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b45      	ldr	r3, [pc, #276]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f92:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8001080 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	a908      	add	r1, sp, #32
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fa2:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f003 fea8 	bl	8004cfc <HAL_GPIO_Init>
}
 8000fac:	b00f      	add	sp, #60	; 0x3c
 8000fae:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fb2:	4a39      	ldr	r2, [pc, #228]	; (8001098 <HAL_ADC_MspInit+0x148>)
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fb8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fbc:	d028      	beq.n	8001010 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000fce:	9202      	str	r2, [sp, #8]
 8000fd0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd2:	695a      	ldr	r2, [r3, #20]
 8000fd4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fe2:	2209      	movs	r2, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fe6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fec:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f003 fe83 	bl	8004cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001080 <HAL_ADC_MspInit+0x130>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ffc:	4828      	ldr	r0, [pc, #160]	; (80010a0 <HAL_ADC_MspInit+0x150>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001000:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001002:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001006:	f003 fe79 	bl	8004cfc <HAL_GPIO_Init>
}
 800100a:	b00f      	add	sp, #60	; 0x3c
 800100c:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	9b01      	ldr	r3, [sp, #4]
 8001024:	e7cb      	b.n	8000fbe <HAL_ADC_MspInit+0x6e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	9304      	str	r3, [sp, #16]
 8001038:	9b04      	ldr	r3, [sp, #16]
 800103a:	e7a4      	b.n	8000f86 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800103c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001040:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001044:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001088 <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001048:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <HAL_ADC_MspInit+0x154>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800104c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001058:	9206      	str	r2, [sp, #24]
 800105a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800106e:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f003 fe42 	bl	8004cfc <HAL_GPIO_Init>
}
 8001078:	e77c      	b.n	8000f74 <HAL_ADC_MspInit+0x24>
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	00000010 	.word	0x00000010
 8001084:	00000003 	.word	0x00000003
 8001088:	00002000 	.word	0x00002000
 800108c:	00000003 	.word	0x00000003
 8001090:	50000100 	.word	0x50000100
 8001094:	50000400 	.word	0x50000400
 8001098:	200001fc 	.word	0x200001fc
 800109c:	40021000 	.word	0x40021000
 80010a0:	48001400 	.word	0x48001400
 80010a4:	48000400 	.word	0x48000400

080010a8 <getBatteryVoltage>:
}

/* USER CODE BEGIN 1 */

inline float getBatteryVoltage(void)
{
 80010a8:	b508      	push	{r3, lr}
  return adc_raw.batt_v * 3.3 * 11 / 4096;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <getBatteryVoltage+0x28>)
 80010ac:	6898      	ldr	r0, [r3, #8]
 80010ae:	f7ff fa39 	bl	8000524 <__aeabi_i2d>
 80010b2:	a305      	add	r3, pc, #20	; (adr r3, 80010c8 <getBatteryVoltage+0x20>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fa9e 	bl	80005f8 <__aeabi_dmul>
 80010bc:	f7ff fd94 	bl	8000be8 <__aeabi_d2f>
}
 80010c0:	ee00 0a10 	vmov	s0, r0
 80010c4:	bd08      	pop	{r3, pc}
 80010c6:	bf00      	nop
 80010c8:	66666666 	.word	0x66666666
 80010cc:	3f822666 	.word	0x3f822666
 80010d0:	20000200 	.word	0x20000200
 80010d4:	00000000 	.word	0x00000000

080010d8 <getCurrentM0>:
// 50V/V * 5m = 250mV/A
inline float getCurrentM0(void)
{
 80010d8:	b508      	push	{r3, lr}
  return (adc_raw.cs_m0 - 2048) * 3.3 / 4096 * 4;
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <getCurrentM0+0x30>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 80010e2:	f7ff fa1f 	bl	8000524 <__aeabi_i2d>
 80010e6:	a306      	add	r3, pc, #24	; (adr r3, 8001100 <getCurrentM0+0x28>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa84 	bl	80005f8 <__aeabi_dmul>
 80010f0:	f7ff fd7a 	bl	8000be8 <__aeabi_d2f>
}
 80010f4:	ee00 0a10 	vmov	s0, r0
 80010f8:	bd08      	pop	{r3, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	66666666 	.word	0x66666666
 8001104:	3f6a6666 	.word	0x3f6a6666
 8001108:	20000200 	.word	0x20000200
 800110c:	00000000 	.word	0x00000000

08001110 <getCurrentM1>:
inline float getCurrentM1(void)
{
 8001110:	b508      	push	{r3, lr}
  return (adc_raw.cs_m1 - 2048) * 3.3 / 4096 * 4;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <getCurrentM1+0x30>)
 8001114:	6858      	ldr	r0, [r3, #4]
 8001116:	f5a0 6000 	sub.w	r0, r0, #2048	; 0x800
 800111a:	f7ff fa03 	bl	8000524 <__aeabi_i2d>
 800111e:	a306      	add	r3, pc, #24	; (adr r3, 8001138 <getCurrentM1+0x28>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fa68 	bl	80005f8 <__aeabi_dmul>
 8001128:	f7ff fd5e 	bl	8000be8 <__aeabi_d2f>
}
 800112c:	ee00 0a10 	vmov	s0, r0
 8001130:	bd08      	pop	{r3, pc}
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	66666666 	.word	0x66666666
 800113c:	3f6a6666 	.word	0x3f6a6666
 8001140:	20000200 	.word	0x20000200

08001144 <updateADC_M0>:

inline void updateADC_M0(void)
{
 8001144:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001146:	4e12      	ldr	r6, [pc, #72]	; (8001190 <updateADC_M0+0x4c>)
  adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001148:	4c12      	ldr	r4, [pc, #72]	; (8001194 <updateADC_M0+0x50>)
 800114a:	4d13      	ldr	r5, [pc, #76]	; (8001198 <updateADC_M0+0x54>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	4630      	mov	r0, r6
 8001150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001154:	f003 fec2 	bl	8004edc <HAL_GPIO_WritePin>
  adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001158:	2101      	movs	r1, #1
 800115a:	4620      	mov	r0, r4
 800115c:	f002 fae8 	bl	8003730 <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001160:	2102      	movs	r1, #2
  adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001162:	6028      	str	r0, [r5, #0]
  adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001164:	4620      	mov	r0, r4
 8001166:	f002 fae3 	bl	8003730 <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800116a:	2103      	movs	r1, #3
  adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800116c:	60e8      	str	r0, [r5, #12]
  adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800116e:	4620      	mov	r0, r4
 8001170:	f002 fade 	bl	8003730 <HAL_ADCEx_InjectedGetValue>
 8001174:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc1);
 8001176:	4620      	mov	r0, r4
  adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001178:	612b      	str	r3, [r5, #16]
  HAL_ADCEx_InjectedStart(&hadc1);
 800117a:	f002 fa51 	bl	8003620 <HAL_ADCEx_InjectedStart>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800117e:	4630      	mov	r0, r6
 8001180:	2200      	movs	r2, #0
}
 8001182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118a:	f003 bea7 	b.w	8004edc <HAL_GPIO_WritePin>
 800118e:	bf00      	nop
 8001190:	48000800 	.word	0x48000800
 8001194:	20000218 	.word	0x20000218
 8001198:	20000200 	.word	0x20000200

0800119c <updateADC_M1>:

inline void updateADC_M1(void)
{
 800119c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800119e:	4c11      	ldr	r4, [pc, #68]	; (80011e4 <updateADC_M1+0x48>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80011a0:	4d11      	ldr	r5, [pc, #68]	; (80011e8 <updateADC_M1+0x4c>)
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80011a2:	4f12      	ldr	r7, [pc, #72]	; (80011ec <updateADC_M1+0x50>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80011a4:	4e12      	ldr	r6, [pc, #72]	; (80011f0 <updateADC_M1+0x54>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	4620      	mov	r0, r4
 80011aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ae:	f003 fe95 	bl	8004edc <HAL_GPIO_WritePin>
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80011b2:	2101      	movs	r1, #1
 80011b4:	4628      	mov	r0, r5
 80011b6:	f002 fabb 	bl	8003730 <HAL_ADCEx_InjectedGetValue>
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80011ba:	2101      	movs	r1, #1
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80011bc:	60b0      	str	r0, [r6, #8]
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80011be:	4638      	mov	r0, r7
 80011c0:	f002 fab6 	bl	8003730 <HAL_ADCEx_InjectedGetValue>
 80011c4:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc2);
 80011c6:	4638      	mov	r0, r7
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80011c8:	6073      	str	r3, [r6, #4]
  HAL_ADCEx_InjectedStart(&hadc2);
 80011ca:	f002 fa29 	bl	8003620 <HAL_ADCEx_InjectedStart>
  HAL_ADCEx_InjectedStart(&hadc3);
 80011ce:	4628      	mov	r0, r5
 80011d0:	f002 fa26 	bl	8003620 <HAL_ADCEx_InjectedStart>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011d4:	4620      	mov	r0, r4
 80011d6:	2200      	movs	r2, #0
}
 80011d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e0:	f003 be7c 	b.w	8004edc <HAL_GPIO_WritePin>
 80011e4:	48000800 	.word	0x48000800
 80011e8:	200002b8 	.word	0x200002b8
 80011ec:	20000268 	.word	0x20000268
 80011f0:	20000200 	.word	0x20000200

080011f4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80011f4:	b510      	push	{r4, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <MX_CAN_Init+0x34>)
 80011f8:	4c0c      	ldr	r4, [pc, #48]	; (800122c <MX_CAN_Init+0x38>)
  hcan.Init.Prescaler = 2;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011fa:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 2;
 80011fc:	2202      	movs	r2, #2
 80011fe:	e9c0 4200 	strd	r4, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001202:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8001206:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
  hcan.Init.TimeTriggeredMode = DISABLE;
 800120a:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800120c:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800120e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 8001212:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001216:	f002 ff4d 	bl	80040b4 <HAL_CAN_Init>
 800121a:	b900      	cbnz	r0, 800121e <MX_CAN_Init+0x2a>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800121c:	bd10      	pop	{r4, pc}
 800121e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001222:	f001 b95f 	b.w	80024e4 <Error_Handler>
 8001226:	bf00      	nop
 8001228:	20000308 	.word	0x20000308
 800122c:	40006400 	.word	0x40006400

08001230 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001230:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 8001232:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <HAL_CAN_MspInit+0xa4>)
 8001234:	6802      	ldr	r2, [r0, #0]
{
 8001236:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 800123a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001240:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001244:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN)
 8001246:	d001      	beq.n	800124c <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001248:	b009      	add	sp, #36	; 0x24
 800124a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 800124c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001252:	69da      	ldr	r2, [r3, #28]
 8001254:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001258:	61da      	str	r2, [r3, #28]
 800125a:	69da      	ldr	r2, [r3, #28]
 800125c:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001260:	9200      	str	r2, [sp, #0]
 8001262:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001274:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001278:	2302      	movs	r3, #2
 800127a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001282:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001284:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001286:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128c:	f003 fd36 	bl	8004cfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8001290:	4622      	mov	r2, r4
 8001292:	4621      	mov	r1, r4
 8001294:	2013      	movs	r0, #19
 8001296:	f003 fa27 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 800129a:	2013      	movs	r0, #19
 800129c:	f003 fa62 	bl	8004764 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80012a0:	4622      	mov	r2, r4
 80012a2:	4621      	mov	r1, r4
 80012a4:	2014      	movs	r0, #20
 80012a6:	f003 fa1f 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80012aa:	2014      	movs	r0, #20
 80012ac:	f003 fa5a 	bl	8004764 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 80012b0:	4622      	mov	r2, r4
 80012b2:	2101      	movs	r1, #1
 80012b4:	2015      	movs	r0, #21
 80012b6:	f003 fa17 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 80012ba:	2015      	movs	r0, #21
 80012bc:	f003 fa52 	bl	8004764 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 80012c0:	4622      	mov	r2, r4
 80012c2:	2101      	movs	r1, #1
 80012c4:	2016      	movs	r0, #22
 80012c6:	f003 fa0f 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80012ca:	2016      	movs	r0, #22
 80012cc:	f003 fa4a 	bl	8004764 <HAL_NVIC_EnableIRQ>
}
 80012d0:	b009      	add	sp, #36	; 0x24
 80012d2:	bd30      	pop	{r4, r5, pc}
 80012d4:	40006400 	.word	0x40006400

080012d8 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(uint16_t board_addr)
{
 80012d8:	b510      	push	{r4, lr}
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
  sFilterConfig.FilterBank = 0;
  sFilterConfig.FilterIdHigh = (0x100 + board_addr*2) << 5;
 80012da:	3080      	adds	r0, #128	; 0x80
{
 80012dc:	b08a      	sub	sp, #40	; 0x28
  sFilterConfig.FilterIdHigh = (0x100 + board_addr*2) << 5;
 80012de:	0043      	lsls	r3, r0, #1
  sFilterConfig.FilterIdLow = (0x300 + board_addr*2) << 5;
 80012e0:	f503 7c00 	add.w	ip, r3, #512	; 0x200
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr*2) << 5;
 80012e4:	1c59      	adds	r1, r3, #1
  sFilterConfig.FilterIdHigh = (0x100 + board_addr*2) << 5;
 80012e6:	0180      	lsls	r0, r0, #6
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr*2) << 5;
 80012e8:	0149      	lsls	r1, r1, #5
  sFilterConfig.FilterMaskIdLow = (0x301 + board_addr*2) << 5;
 80012ea:	f203 2301 	addw	r3, r3, #513	; 0x201
  sFilterConfig.FilterIdHigh = (0x100 + board_addr*2) << 5;
 80012ee:	9000      	str	r0, [sp, #0]
  sFilterConfig.FilterIdLow = (0x300 + board_addr*2) << 5;
 80012f0:	ea4f 104c 	mov.w	r0, ip, lsl #5
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80012f4:	2200      	movs	r2, #0
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr*2) << 5;
 80012f6:	e9cd 0101 	strd	r0, r1, [sp, #4]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80012fa:	2401      	movs	r4, #1
  sFilterConfig.FilterMaskIdLow = (0x301 + board_addr*2) << 5;
 80012fc:	015b      	lsls	r3, r3, #5
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;
  sFilterConfig.SlaveStartFilterBank = 0;
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80012fe:	480f      	ldr	r0, [pc, #60]	; (800133c <CAN_Filter_Init+0x64>)
  sFilterConfig.FilterBank = 0;
 8001300:	9205      	str	r2, [sp, #20]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001302:	4669      	mov	r1, sp
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001304:	e9cd 4206 	strd	r4, r2, [sp, #24]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001308:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sFilterConfig.SlaveStartFilterBank = 0;
 800130c:	e9cd 4208 	strd	r4, r2, [sp, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001310:	f002 ff50 	bl	80041b4 <HAL_CAN_ConfigFilter>
 8001314:	b930      	cbnz	r0, 8001324 <CAN_Filter_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <CAN_Filter_Init+0x64>)
 8001318:	2102      	movs	r1, #2
 800131a:	f003 f87f 	bl	800441c <HAL_CAN_ActivateNotification>
 800131e:	b948      	cbnz	r0, 8001334 <CAN_Filter_Init+0x5c>
  {
    Error_Handler();
  }
}
 8001320:	b00a      	add	sp, #40	; 0x28
 8001322:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001324:	f001 f8de 	bl	80024e4 <Error_Handler>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <CAN_Filter_Init+0x64>)
 800132a:	2102      	movs	r1, #2
 800132c:	f003 f876 	bl	800441c <HAL_CAN_ActivateNotification>
 8001330:	2800      	cmp	r0, #0
 8001332:	d0f5      	beq.n	8001320 <CAN_Filter_Init+0x48>
    Error_Handler();
 8001334:	f001 f8d6 	bl	80024e4 <Error_Handler>
}
 8001338:	b00a      	add	sp, #40	; 0x28
 800133a:	bd10      	pop	{r4, pc}
 800133c:	20000308 	.word	0x20000308

08001340 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <MX_DMA_Init+0x30>)
{
 8001342:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001344:	6959      	ldr	r1, [r3, #20]
 8001346:	f041 0101 	orr.w	r1, r1, #1
 800134a:	6159      	str	r1, [r3, #20]
 800134c:	695b      	ldr	r3, [r3, #20]
{
 800134e:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001358:	200e      	movs	r0, #14
 800135a:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800135e:	f003 f9c3 	bl	80046e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001362:	200e      	movs	r0, #14

}
 8001364:	b003      	add	sp, #12
 8001366:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800136a:	f003 b9fb 	b.w	8004764 <HAL_NVIC_EnableIRQ>
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	00000000 	.word	0x00000000

08001378 <writeCanBoardID>:
    memcpy(&flash_raw, &calib_m1, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CALIB_M1, flash_raw);
    HAL_FLASH_Lock();
}

void writeCanBoardID(uint32_t id){
 8001378:	b530      	push	{r4, r5, lr}
    erase.TypeErase = TYPEERASE_PAGES;
 800137a:	ed9f 7b17 	vldr	d7, [pc, #92]	; 80013d8 <writeCanBoardID+0x60>
void writeCanBoardID(uint32_t id){
 800137e:	b089      	sub	sp, #36	; 0x24
    writeFlash(id, flash.calib[0], flash.calib[1]);
 8001380:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <writeCanBoardID+0x68>)
void writeCanBoardID(uint32_t id){
 8001382:	9001      	str	r0, [sp, #4]
    uint32_t page_error = 0;
 8001384:	2300      	movs	r3, #0
    erase.NbPages = 1;
 8001386:	2101      	movs	r1, #1
    erase.TypeErase = TYPEERASE_PAGES;
 8001388:	ed8d 7b04 	vstr	d7, [sp, #16]
    writeFlash(id, flash.calib[0], flash.calib[1]);
 800138c:	6815      	ldr	r5, [r2, #0]
 800138e:	6854      	ldr	r4, [r2, #4]
    uint32_t page_error = 0;
 8001390:	9303      	str	r3, [sp, #12]
    erase.NbPages = 1;
 8001392:	9106      	str	r1, [sp, #24]
    HAL_FLASH_Unlock();
 8001394:	f003 fbec 	bl	8004b70 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase, &page_error);
 8001398:	a903      	add	r1, sp, #12
 800139a:	a804      	add	r0, sp, #16
 800139c:	f003 fc4c 	bl	8004c38 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 80013a0:	f003 fbfa 	bl	8004b98 <HAL_FLASH_Lock>
    HAL_FLASH_Unlock();
 80013a4:	f003 fbe4 	bl	8004b70 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CAN_ID, flash_raw);
 80013a8:	9a01      	ldr	r2, [sp, #4]
 80013aa:	490e      	ldr	r1, [pc, #56]	; (80013e4 <writeCanBoardID+0x6c>)
 80013ac:	2300      	movs	r3, #0
 80013ae:	2002      	movs	r0, #2
 80013b0:	f003 fb14 	bl	80049dc <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CALIB_M0, flash_raw);
 80013b4:	462a      	mov	r2, r5
 80013b6:	490c      	ldr	r1, [pc, #48]	; (80013e8 <writeCanBoardID+0x70>)
 80013b8:	2300      	movs	r3, #0
 80013ba:	2002      	movs	r0, #2
 80013bc:	f003 fb0e 	bl	80049dc <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CALIB_M1, flash_raw);
 80013c0:	490a      	ldr	r1, [pc, #40]	; (80013ec <writeCanBoardID+0x74>)
 80013c2:	4622      	mov	r2, r4
 80013c4:	2300      	movs	r3, #0
 80013c6:	2002      	movs	r0, #2
 80013c8:	f003 fb08 	bl	80049dc <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 80013cc:	f003 fbe4 	bl	8004b98 <HAL_FLASH_Lock>
}
 80013d0:	b009      	add	sp, #36	; 0x24
 80013d2:	bd30      	pop	{r4, r5, pc}
 80013d4:	f3af 8000 	nop.w
 80013d8:	00000000 	.word	0x00000000
 80013dc:	0801f000 	.word	0x0801f000
 80013e0:	20000330 	.word	0x20000330
 80013e4:	0801f000 	.word	0x0801f000
 80013e8:	0801f004 	.word	0x0801f004
 80013ec:	0801f008 	.word	0x0801f008

080013f0 <writeCalibrationValue>:
void writeCalibrationValue(float calib_m0, float calib_m1){
 80013f0:	b530      	push	{r4, r5, lr}
    erase.TypeErase = TYPEERASE_PAGES;
 80013f2:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8001458 <writeCalibrationValue+0x68>
    writeFlash(flash.board_id, calib_m0, calib_m1);
 80013f6:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <writeCalibrationValue+0x70>)
void writeCalibrationValue(float calib_m0, float calib_m1){
 80013f8:	b089      	sub	sp, #36	; 0x24
    writeFlash(flash.board_id, calib_m0, calib_m1);
 80013fa:	6892      	ldr	r2, [r2, #8]
 80013fc:	9201      	str	r2, [sp, #4]
    uint32_t page_error = 0;
 80013fe:	2300      	movs	r3, #0
    erase.NbPages = 1;
 8001400:	2101      	movs	r1, #1
void writeCalibrationValue(float calib_m0, float calib_m1){
 8001402:	ee10 5a10 	vmov	r5, s0
 8001406:	ee10 4a90 	vmov	r4, s1
    erase.TypeErase = TYPEERASE_PAGES;
 800140a:	ed8d 7b04 	vstr	d7, [sp, #16]
    uint32_t page_error = 0;
 800140e:	9303      	str	r3, [sp, #12]
    erase.NbPages = 1;
 8001410:	9106      	str	r1, [sp, #24]
    HAL_FLASH_Unlock();
 8001412:	f003 fbad 	bl	8004b70 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase, &page_error);
 8001416:	a903      	add	r1, sp, #12
 8001418:	a804      	add	r0, sp, #16
 800141a:	f003 fc0d 	bl	8004c38 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 800141e:	f003 fbbb 	bl	8004b98 <HAL_FLASH_Lock>
    HAL_FLASH_Unlock();
 8001422:	f003 fba5 	bl	8004b70 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CAN_ID, flash_raw);
 8001426:	9a01      	ldr	r2, [sp, #4]
 8001428:	490e      	ldr	r1, [pc, #56]	; (8001464 <writeCalibrationValue+0x74>)
 800142a:	2300      	movs	r3, #0
 800142c:	2002      	movs	r0, #2
 800142e:	f003 fad5 	bl	80049dc <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CALIB_M0, flash_raw);
 8001432:	462a      	mov	r2, r5
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <writeCalibrationValue+0x78>)
 8001436:	2300      	movs	r3, #0
 8001438:	2002      	movs	r0, #2
 800143a:	f003 facf 	bl	80049dc <HAL_FLASH_Program>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CALIB_M1, flash_raw);
 800143e:	490b      	ldr	r1, [pc, #44]	; (800146c <writeCalibrationValue+0x7c>)
 8001440:	4622      	mov	r2, r4
 8001442:	2300      	movs	r3, #0
 8001444:	2002      	movs	r0, #2
 8001446:	f003 fac9 	bl	80049dc <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 800144a:	f003 fba5 	bl	8004b98 <HAL_FLASH_Lock>
}
 800144e:	b009      	add	sp, #36	; 0x24
 8001450:	bd30      	pop	{r4, r5, pc}
 8001452:	bf00      	nop
 8001454:	f3af 8000 	nop.w
 8001458:	00000000 	.word	0x00000000
 800145c:	0801f000 	.word	0x0801f000
 8001460:	20000330 	.word	0x20000330
 8001464:	0801f000 	.word	0x0801f000
 8001468:	0801f004 	.word	0x0801f004
 800146c:	0801f008 	.word	0x0801f008

08001470 <loadFlashData>:

void loadFlashData(void){
    memcpy(&flash.board_id, (uint32_t *)FLASH_ADDR_CAN_ID, 4);
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <loadFlashData+0x14>)
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <loadFlashData+0x18>)
 8001474:	e9d2 1000 	ldrd	r1, r0, [r2]
    memcpy(&flash.calib[0], (uint32_t *)FLASH_ADDR_CALIB_M0, 4);
 8001478:	6018      	str	r0, [r3, #0]
 800147a:	6892      	ldr	r2, [r2, #8]
    memcpy(&flash.calib[1], (uint32_t *)FLASH_ADDR_CALIB_M1, 4);
 800147c:	e9c3 2101 	strd	r2, r1, [r3, #4]
}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	0801f000 	.word	0x0801f000
 8001488:	20000330 	.word	0x20000330

0800148c <isPushedSW1>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
inline bool isPushedSW1(void)
{
 800148c:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800148e:	2101      	movs	r1, #1
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <isPushedSW1+0x14>)
 8001492:	f003 fd1d 	bl	8004ed0 <HAL_GPIO_ReadPin>
}
 8001496:	fab0 f080 	clz	r0, r0
 800149a:	0940      	lsrs	r0, r0, #5
 800149c:	bd08      	pop	{r3, pc}
 800149e:	bf00      	nop
 80014a0:	48000800 	.word	0x48000800

080014a4 <isPushedSW2>:
inline bool isPushedSW2(void)
{
 80014a4:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80014a6:	2102      	movs	r1, #2
 80014a8:	4803      	ldr	r0, [pc, #12]	; (80014b8 <isPushedSW2+0x14>)
 80014aa:	f003 fd11 	bl	8004ed0 <HAL_GPIO_ReadPin>
}
 80014ae:	fab0 f080 	clz	r0, r0
 80014b2:	0940      	lsrs	r0, r0, #5
 80014b4:	bd08      	pop	{r3, pc}
 80014b6:	bf00      	nop
 80014b8:	48000800 	.word	0x48000800

080014bc <isPushedSW4>:
inline bool isPushedSW3(void)
{
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
}
inline bool isPushedSW4(void)
{
 80014bc:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 80014be:	2108      	movs	r1, #8
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <isPushedSW4+0x14>)
 80014c2:	f003 fd05 	bl	8004ed0 <HAL_GPIO_ReadPin>
}
 80014c6:	fab0 f080 	clz	r0, r0
 80014ca:	0940      	lsrs	r0, r0, #5
 80014cc:	bd08      	pop	{r3, pc}
 80014ce:	bf00      	nop
 80014d0:	48000800 	.word	0x48000800

080014d4 <setLedRed>:

inline void setLedRed(bool on){
 80014d4:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, on);
 80014d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014da:	4801      	ldr	r0, [pc, #4]	; (80014e0 <setLedRed+0xc>)
 80014dc:	f003 bcfe 	b.w	8004edc <HAL_GPIO_WritePin>
 80014e0:	48000800 	.word	0x48000800

080014e4 <setLedBlue>:
}
inline void setLedBlue(bool on){
 80014e4:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, on);
 80014e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ea:	4801      	ldr	r0, [pc, #4]	; (80014f0 <setLedBlue+0xc>)
 80014ec:	f003 bcf6 	b.w	8004edc <HAL_GPIO_WritePin>
 80014f0:	48000800 	.word	0x48000800

080014f4 <setLedGreen>:
}
inline void setLedGreen(bool on){
 80014f4:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, on);
 80014f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fa:	4801      	ldr	r0, [pc, #4]	; (8001500 <setLedGreen+0xc>)
 80014fc:	f003 bcee 	b.w	8004edc <HAL_GPIO_WritePin>
 8001500:	48000800 	.word	0x48000800

08001504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001504:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	2400      	movs	r4, #0
{
 800150a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001510:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001514:	4b2c      	ldr	r3, [pc, #176]	; (80015c8 <MX_GPIO_Init+0xc4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800151a:	4d2c      	ldr	r5, [pc, #176]	; (80015cc <MX_GPIO_Init+0xc8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800151c:	4e2c      	ldr	r6, [pc, #176]	; (80015d0 <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800152a:	9200      	str	r2, [sp, #0]
 800152c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001534:	615a      	str	r2, [r3, #20]
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800153c:	9201      	str	r2, [sp, #4]
 800153e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800154e:	9202      	str	r2, [sp, #8]
 8001550:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001558:	615a      	str	r2, [r3, #20]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001560:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001562:	4622      	mov	r2, r4
 8001564:	4628      	mov	r0, r5
 8001566:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800156c:	f003 fcb6 	bl	8004edc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001570:	4622      	mov	r2, r4
 8001572:	4630      	mov	r0, r6
 8001574:	21c0      	movs	r1, #192	; 0xc0
 8001576:	f003 fcb1 	bl	8004edc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800157a:	f04f 0800 	mov.w	r8, #0
 800157e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001582:	2301      	movs	r3, #1
 8001584:	f04f 0900 	mov.w	r9, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001588:	a904      	add	r1, sp, #16
 800158a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800158c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001590:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001594:	f003 fbb2 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001598:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	4628      	mov	r0, r5
 800159c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015a0:	220f      	movs	r2, #15
 80015a2:	2300      	movs	r3, #0
 80015a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f003 fba8 	bl	8004cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ac:	22c0      	movs	r2, #192	; 0xc0
 80015ae:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	a904      	add	r1, sp, #16
 80015b2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80015b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f003 fb9e 	bl	8004cfc <HAL_GPIO_Init>

}
 80015c0:	b00a      	add	sp, #40	; 0x28
 80015c2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000400 	.word	0x48000400

080015d4 <_write>:
char first_buf[UART_TEMP_BUF_SIZE];
char temp_buf[UART_TEMP_BUF_SIZE];
int re_queue_len = 0;
bool enable_buffer_mode = false;
int _write(int file, char *ptr, int len)
{	if (enable_buffer_mode){
 80015d4:	b538      	push	{r3, r4, r5, lr}
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <_write+0x50>)
 80015d8:	7818      	ldrb	r0, [r3, #0]
 80015da:	4614      	mov	r4, r2
 80015dc:	b188      	cbz	r0, 8001602 <_write+0x2e>
		enable_buffer_mode = false;

		if (huart1.hdmatx->State == HAL_DMA_BURST_STATE_BUSY)
 80015de:	4d12      	ldr	r5, [pc, #72]	; (8001628 <_write+0x54>)
		enable_buffer_mode = false;
 80015e0:	2000      	movs	r0, #0
 80015e2:	7018      	strb	r0, [r3, #0]
		if (huart1.hdmatx->State == HAL_DMA_BURST_STATE_BUSY)
 80015e4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80015e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d00f      	beq.n	800160e <_write+0x3a>
				len = UART_TEMP_BUF_SIZE;
			memcpy(temp_buf, ptr, len);
			re_queue_len = len;
			return len;
		}
		memcpy(first_buf, ptr, len);						 // 8ms
 80015ee:	480f      	ldr	r0, [pc, #60]	; (800162c <_write+0x58>)
 80015f0:	f006 fe3a 	bl	8008268 <memcpy>
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, len); // 2ms
 80015f4:	490d      	ldr	r1, [pc, #52]	; (800162c <_write+0x58>)
 80015f6:	b2a2      	uxth	r2, r4
 80015f8:	4628      	mov	r0, r5
 80015fa:	f005 f885 	bl	8006708 <HAL_UART_Transmit_DMA>
	}else{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len); // 2ms
	}
	return len;
}
 80015fe:	4620      	mov	r0, r4
 8001600:	bd38      	pop	{r3, r4, r5, pc}
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len); // 2ms
 8001602:	b292      	uxth	r2, r2
 8001604:	4808      	ldr	r0, [pc, #32]	; (8001628 <_write+0x54>)
 8001606:	f005 f87f 	bl	8006708 <HAL_UART_Transmit_DMA>
}
 800160a:	4620      	mov	r0, r4
 800160c:	bd38      	pop	{r3, r4, r5, pc}
			if (len >= UART_TEMP_BUF_SIZE)
 800160e:	2ac8      	cmp	r2, #200	; 0xc8
 8001610:	bfa8      	it	ge
 8001612:	24c8      	movge	r4, #200	; 0xc8
			memcpy(temp_buf, ptr, len);
 8001614:	4622      	mov	r2, r4
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <_write+0x5c>)
 8001618:	f006 fe26 	bl	8008268 <memcpy>
			re_queue_len = len;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <_write+0x60>)
}
 800161e:	4620      	mov	r0, r4
			re_queue_len = len;
 8001620:	601c      	str	r4, [r3, #0]
}
 8001622:	bd38      	pop	{r3, r4, r5, pc}
 8001624:	200003c8 	.word	0x200003c8
 8001628:	20001704 	.word	0x20001704
 800162c:	200003dc 	.word	0x200003dc
 8001630:	200004c4 	.word	0x200004c4
 8001634:	200004c0 	.word	0x200004c0

08001638 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001638:	b510      	push	{r4, lr}
	if (re_queue_len){
 800163a:	4c06      	ldr	r4, [pc, #24]	; (8001654 <HAL_UART_TxCpltCallback+0x1c>)
 800163c:	6822      	ldr	r2, [r4, #0]
 800163e:	b902      	cbnz	r2, 8001642 <HAL_UART_TxCpltCallback+0xa>
		
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)temp_buf, re_queue_len);
		re_queue_len = 0;
	}
}
 8001640:	bd10      	pop	{r4, pc}
		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)temp_buf, re_queue_len);
 8001642:	4905      	ldr	r1, [pc, #20]	; (8001658 <HAL_UART_TxCpltCallback+0x20>)
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_UART_TxCpltCallback+0x24>)
 8001646:	b292      	uxth	r2, r2
 8001648:	f005 f85e 	bl	8006708 <HAL_UART_Transmit_DMA>
		re_queue_len = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	6023      	str	r3, [r4, #0]
}
 8001650:	bd10      	pop	{r4, pc}
 8001652:	bf00      	nop
 8001654:	200004c0 	.word	0x200004c0
 8001658:	200004c4 	.word	0x200004c4
 800165c:	20001704 	.word	0x20001704

08001660 <HAL_UART_RxCpltCallback>:
uint8_t uart_rx_buf[10] = {0};
bool uart_rx_flag = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uart_rx_flag = true;
 8001660:	4b01      	ldr	r3, [pc, #4]	; (8001668 <HAL_UART_RxCpltCallback+0x8>)
 8001662:	2201      	movs	r2, #1
 8001664:	701a      	strb	r2, [r3, #0]
}
 8001666:	4770      	bx	lr
 8001668:	20000596 	.word	0x20000596

0800166c <checkAngle>:
	motor_real[motor]
		.pre_enc_cnt_raw = ma702[motor].enc_raw;
}

void checkAngle(int motor)
{
 800166c:	b470      	push	{r4, r5, r6}
	calib[motor].radian_ave += ma702[motor].output_radian;
 800166e:	4a31      	ldr	r2, [pc, #196]	; (8001734 <checkAngle+0xc8>)
 8001670:	4d31      	ldr	r5, [pc, #196]	; (8001738 <checkAngle+0xcc>)
 8001672:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8001676:	eb02 1340 	add.w	r3, r2, r0, lsl #5
 800167a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800167e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001682:	edd1 7a00 	vldr	s15, [r1]
	calib[motor].ave_cnt++;
 8001686:	689c      	ldr	r4, [r3, #8]
	if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_rotation_speed < 0)
 8001688:	68de      	ldr	r6, [r3, #12]
	calib[motor].radian_ave += ma702[motor].output_radian;
 800168a:	ee37 7a27 	vadd.f32	s14, s14, s15
	calib[motor].ave_cnt++;
 800168e:	3401      	adds	r4, #1
	if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_rotation_speed < 0)
 8001690:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
	calib[motor].radian_ave += ma702[motor].output_radian;
 8001694:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8001698:	ed83 7a01 	vstr	s14, [r3, #4]
	calib[motor].ave_cnt++;
 800169c:	609c      	str	r4, [r3, #8]
	if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_rotation_speed < 0)
 800169e:	dd11      	ble.n	80016c4 <checkAngle+0x58>
 80016a0:	6849      	ldr	r1, [r1, #4]
 80016a2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80016a6:	da09      	bge.n	80016bc <checkAngle+0x50>
 80016a8:	4824      	ldr	r0, [pc, #144]	; (800173c <checkAngle+0xd0>)
 80016aa:	edd0 7a00 	vldr	s15, [r0]
 80016ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	f04f 0000 	mov.w	r0, #0
 80016ba:	d424      	bmi.n	8001706 <checkAngle+0x9a>
		calib[motor].result_cw_cnt++;
		calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
		calib[motor].radian_ave = 0;
		calib[motor].ave_cnt = 0;
	}
	calib[motor].pre_raw = ma702[motor].enc_raw;
 80016bc:	4462      	add	r2, ip
}
 80016be:	bc70      	pop	{r4, r5, r6}
	calib[motor].pre_raw = ma702[motor].enc_raw;
 80016c0:	60d1      	str	r1, [r2, #12]
}
 80016c2:	4770      	bx	lr
	if (calib[motor].pre_raw < HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw > HARF_OF_ENC_CNT_MAX && calib_rotation_speed > 0)
 80016c4:	d031      	beq.n	800172a <checkAngle+0xbe>
 80016c6:	6849      	ldr	r1, [r1, #4]
 80016c8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80016cc:	ddf6      	ble.n	80016bc <checkAngle+0x50>
 80016ce:	481b      	ldr	r0, [pc, #108]	; (800173c <checkAngle+0xd0>)
 80016d0:	edd0 7a00 	vldr	s15, [r0]
 80016d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016dc:	f04f 0000 	mov.w	r0, #0
 80016e0:	ddec      	ble.n	80016bc <checkAngle+0x50>
		calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 80016e2:	ee07 4a90 	vmov	s15, r4
 80016e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		calib[motor].radian_ave = 0;
 80016ea:	6058      	str	r0, [r3, #4]
		calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 80016ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
		calib[motor].ave_cnt = 0;
 80016f0:	2000      	movs	r0, #0
 80016f2:	6098      	str	r0, [r3, #8]
		calib[motor].result_cw_cnt++;
 80016f4:	6958      	ldr	r0, [r3, #20]
	calib[motor].pre_raw = ma702[motor].enc_raw;
 80016f6:	4462      	add	r2, ip
		calib[motor].result_cw_cnt++;
 80016f8:	3001      	adds	r0, #1
}
 80016fa:	bc70      	pop	{r4, r5, r6}
		calib[motor].result_cw_cnt++;
 80016fc:	6158      	str	r0, [r3, #20]
	calib[motor].pre_raw = ma702[motor].enc_raw;
 80016fe:	60d1      	str	r1, [r2, #12]
		calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001700:	edc3 6a04 	vstr	s13, [r3, #16]
}
 8001704:	4770      	bx	lr
		calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001706:	ee07 4a90 	vmov	s15, r4
 800170a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		calib[motor].radian_ave = 0;
 800170e:	6058      	str	r0, [r3, #4]
		calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001710:	eec7 6a27 	vdiv.f32	s13, s14, s15
		calib[motor].ave_cnt = 0;
 8001714:	2000      	movs	r0, #0
 8001716:	6098      	str	r0, [r3, #8]
		calib[motor].result_ccw_cnt++;
 8001718:	69d8      	ldr	r0, [r3, #28]
	calib[motor].pre_raw = ma702[motor].enc_raw;
 800171a:	4462      	add	r2, ip
		calib[motor].result_ccw_cnt++;
 800171c:	3001      	adds	r0, #1
}
 800171e:	bc70      	pop	{r4, r5, r6}
		calib[motor].result_ccw_cnt++;
 8001720:	61d8      	str	r0, [r3, #28]
	calib[motor].pre_raw = ma702[motor].enc_raw;
 8001722:	60d1      	str	r1, [r2, #12]
		calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001724:	edc3 6a06 	vstr	s13, [r3, #24]
}
 8001728:	4770      	bx	lr
	if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_rotation_speed < 0)
 800172a:	2314      	movs	r3, #20
 800172c:	fb03 5000 	mla	r0, r3, r0, r5
 8001730:	6841      	ldr	r1, [r0, #4]
 8001732:	e7c3      	b.n	80016bc <checkAngle+0x50>
 8001734:	2000033c 	.word	0x2000033c
 8001738:	200005fc 	.word	0x200005fc
 800173c:	20000000 	.word	0x20000000

08001740 <HAL_TIM_PeriodElapsedCallback>:
{
	// TIM1 : M1
	// TIM8 : M0
	static bool motor_select_toggle = false;

	if (htim == &htim1)
 8001740:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001742:	4298      	cmp	r0, r3
 8001744:	d003      	beq.n	800174e <HAL_TIM_PeriodElapsedCallback+0xe>
	{
	}
	else if (htim == &htim8)
 8001746:	4b5d      	ldr	r3, [pc, #372]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001748:	4298      	cmp	r0, r3
 800174a:	f000 809c 	beq.w	8001886 <HAL_TIM_PeriodElapsedCallback+0x146>
{
 800174e:	b5f0      	push	{r4, r5, r6, r7, lr}
	{
		return;
	}

	motor_select_toggle = !motor_select_toggle;
 8001750:	4c5b      	ldr	r4, [pc, #364]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x180>)
{
 8001752:	ed2d 8b02 	vpush	{d8}
	motor_select_toggle = !motor_select_toggle;
 8001756:	7823      	ldrb	r3, [r4, #0]
{
 8001758:	b083      	sub	sp, #12
	motor_select_toggle = !motor_select_toggle;
 800175a:	f083 0301 	eor.w	r3, r3, #1
	setLedBlue(false);
 800175e:	2000      	movs	r0, #0
	motor_select_toggle = !motor_select_toggle;
 8001760:	7023      	strb	r3, [r4, #0]
	setLedBlue(false);
 8001762:	f7ff febf 	bl	80014e4 <setLedBlue>
	if (calibration_mode)
 8001766:	4b57      	ldr	r3, [pc, #348]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	b3a3      	cbz	r3, 80017d6 <HAL_TIM_PeriodElapsedCallback+0x96>
	manual_offset_radian -= calib_rotation_speed;
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800176e:	4d57      	ldr	r5, [pc, #348]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ed95 8a00 	vldr	s16, [r5]
	{
		calibrationProcess(motor_select_toggle);
 8001778:	7824      	ldrb	r4, [r4, #0]
	manual_offset_radian -= calib_rotation_speed;
 800177a:	ee38 8a67 	vsub.f32	s16, s16, s15
	if (manual_offset_radian > M_PI * 2)
 800177e:	ee18 0a10 	vmov	r0, s16
 8001782:	f7fe fee1 	bl	8000548 <__aeabi_f2d>
 8001786:	a34a      	add	r3, pc, #296	; (adr r3, 80018b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	4606      	mov	r6, r0
 800178e:	460f      	mov	r7, r1
 8001790:	f7ff f9c2 	bl	8000b18 <__aeabi_dcmpgt>
 8001794:	2800      	cmp	r0, #0
 8001796:	d177      	bne.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x148>
	manual_offset_radian -= calib_rotation_speed;
 8001798:	ed85 8a00 	vstr	s16, [r5]
	if (manual_offset_radian < 0)
 800179c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	d45e      	bmi.n	8001864 <HAL_TIM_PeriodElapsedCallback+0x124>
	if (motor)
 80017a6:	2c00      	cmp	r4, #0
 80017a8:	d046      	beq.n	8001838 <HAL_TIM_PeriodElapsedCallback+0xf8>
		updateADC_M0();
 80017aa:	f7ff fccb 	bl	8001144 <updateADC_M0>
		updateMA702_M0();
 80017ae:	f000 feff 	bl	80025b0 <updateMA702_M0>
		setOutputRadianM0(manual_offset_radian, cmd[0].out_v, getBatteryVoltage());
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80017b4:	ed95 8a00 	vldr	s16, [r5]
 80017b8:	edd3 0a02 	vldr	s1, [r3, #8]
 80017bc:	edcd 0a01 	vstr	s1, [sp, #4]
 80017c0:	f7ff fc72 	bl	80010a8 <getBatteryVoltage>
 80017c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80017c8:	eeb0 1a40 	vmov.f32	s2, s0
 80017cc:	eeb0 0a48 	vmov.f32	s0, s16
 80017d0:	f001 fa66 	bl	8002ca0 <setOutputRadianM0>
}
 80017d4:	e014      	b.n	8001800 <HAL_TIM_PeriodElapsedCallback+0xc0>
	if (motor)
 80017d6:	7823      	ldrb	r3, [r4, #0]
 80017d8:	b1d3      	cbz	r3, 8001810 <HAL_TIM_PeriodElapsedCallback+0xd0>
		updateADC_M0();
 80017da:	f7ff fcb3 	bl	8001144 <updateADC_M0>
		updateMA702_M0();
 80017de:	f000 fee7 	bl	80025b0 <updateMA702_M0>
		setOutputRadianM0(ma702[0].output_radian + enc_offset[0].final, cmd[0].out_v, 24);
 80017e2:	493c      	ldr	r1, [pc, #240]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80017e4:	4a3c      	ldr	r2, [pc, #240]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80017e6:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80017e8:	ed91 0a00 	vldr	s0, [r1]
 80017ec:	edd2 7a00 	vldr	s15, [r2]
 80017f0:	edd3 0a02 	vldr	s1, [r3, #8]
 80017f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80017f8:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 80017fc:	f001 fa50 	bl	8002ca0 <setOutputRadianM0>
	else
	{
		motorProcess(motor_select_toggle);
	}

	setLedBlue(true);
 8001800:	2001      	movs	r0, #1
}
 8001802:	b003      	add	sp, #12
 8001804:	ecbd 8b02 	vpop	{d8}
 8001808:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	setLedBlue(true);
 800180c:	f7ff be6a 	b.w	80014e4 <setLedBlue>
		updateADC_M1();
 8001810:	f7ff fcc4 	bl	800119c <updateADC_M1>
		updateMA702_M1();
 8001814:	f000 ff1c 	bl	8002650 <updateMA702_M1>
		setOutputRadianM1(ma702[1].output_radian + enc_offset[1].final, cmd[1].out_v, 24);
 8001818:	492e      	ldr	r1, [pc, #184]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800181a:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800181e:	ed91 0a05 	vldr	s0, [r1, #20]
 8001822:	edd2 7a02 	vldr	s15, [r2, #8]
 8001826:	edd3 0a06 	vldr	s1, [r3, #24]
 800182a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800182e:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8001832:	f001 fa9d 	bl	8002d70 <setOutputRadianM1>
 8001836:	e7e3      	b.n	8001800 <HAL_TIM_PeriodElapsedCallback+0xc0>
		updateADC_M1();
 8001838:	f7ff fcb0 	bl	800119c <updateADC_M1>
		updateMA702_M1();
 800183c:	f000 ff08 	bl	8002650 <updateMA702_M1>
		setOutputRadianM1(manual_offset_radian, cmd[1].out_v, getBatteryVoltage());
 8001840:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001842:	ed95 8a00 	vldr	s16, [r5]
 8001846:	edd3 0a06 	vldr	s1, [r3, #24]
 800184a:	edcd 0a01 	vstr	s1, [sp, #4]
 800184e:	f7ff fc2b 	bl	80010a8 <getBatteryVoltage>
 8001852:	eddd 0a01 	vldr	s1, [sp, #4]
 8001856:	eeb0 1a40 	vmov.f32	s2, s0
 800185a:	eeb0 0a48 	vmov.f32	s0, s16
 800185e:	f001 fa87 	bl	8002d70 <setOutputRadianM1>
 8001862:	e7cd      	b.n	8001800 <HAL_TIM_PeriodElapsedCallback+0xc0>
		manual_offset_radian += M_PI * 2;
 8001864:	ee18 0a10 	vmov	r0, s16
 8001868:	f7fe fe6e 	bl	8000548 <__aeabi_f2d>
 800186c:	a310      	add	r3, pc, #64	; (adr r3, 80018b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fd0b 	bl	800028c <__adddf3>
 8001876:	f7ff f9b7 	bl	8000be8 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
		checkAngle(motor);
 800187c:	4620      	mov	r0, r4
		manual_offset_radian += M_PI * 2;
 800187e:	602b      	str	r3, [r5, #0]
		checkAngle(motor);
 8001880:	f7ff fef4 	bl	800166c <checkAngle>
 8001884:	e78f      	b.n	80017a6 <HAL_TIM_PeriodElapsedCallback+0x66>
 8001886:	4770      	bx	lr
		manual_offset_radian -= M_PI * 2;
 8001888:	a309      	add	r3, pc, #36	; (adr r3, 80018b0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	4630      	mov	r0, r6
 8001890:	4639      	mov	r1, r7
 8001892:	f7fe fcf9 	bl	8000288 <__aeabi_dsub>
 8001896:	f7ff f9a7 	bl	8000be8 <__aeabi_d2f>
 800189a:	4603      	mov	r3, r0
		checkAngle(motor);
 800189c:	4620      	mov	r0, r4
		manual_offset_radian -= M_PI * 2;
 800189e:	602b      	str	r3, [r5, #0]
		checkAngle(motor);
 80018a0:	f7ff fee4 	bl	800166c <checkAngle>
	if (manual_offset_radian < 0)
 80018a4:	ed95 8a00 	vldr	s16, [r5]
 80018a8:	e778      	b.n	800179c <HAL_TIM_PeriodElapsedCallback+0x5c>
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	54442d18 	.word	0x54442d18
 80018b4:	401921fb 	.word	0x401921fb
 80018b8:	20000628 	.word	0x20000628
 80018bc:	20000674 	.word	0x20000674
 80018c0:	200004bc 	.word	0x200004bc
 80018c4:	2000037c 	.word	0x2000037c
 80018c8:	20000000 	.word	0x20000000
 80018cc:	200004a4 	.word	0x200004a4
 80018d0:	200003a8 	.word	0x200003a8
 80018d4:	200005fc 	.word	0x200005fc
 80018d8:	200003cc 	.word	0x200003cc

080018dc <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t can_rx_cnt = 0;
can_rx_buf_t can_rx_buf;
uint8_t can_rx_data[8];
CAN_RxHeaderTypeDef can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018dc:	b510      	push	{r4, lr}
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK)
 80018de:	4c19      	ldr	r4, [pc, #100]	; (8001944 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80018e2:	4622      	mov	r2, r4
 80018e4:	2100      	movs	r1, #0
 80018e6:	f002 fd0f 	bl	8004308 <HAL_CAN_GetRxMessage>
 80018ea:	b108      	cbz	r0, 80018f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x14>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018ee:	e7fe      	b.n	80018ee <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
	if (calibration_mode){
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b9c3      	cbnz	r3, 8001928 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
		can_rx_cnt++;
 80018f6:	4916      	ldr	r1, [pc, #88]	; (8001950 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
	switch (can_rx_header.StdId)
 80018f8:	6823      	ldr	r3, [r4, #0]
		can_rx_cnt++;
 80018fa:	680a      	ldr	r2, [r1, #0]
	switch (can_rx_header.StdId)
 80018fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
		can_rx_cnt++;
 8001900:	3201      	adds	r2, #1
 8001902:	600a      	str	r2, [r1, #0]
	switch (can_rx_header.StdId)
 8001904:	2b03      	cmp	r3, #3
 8001906:	d80f      	bhi.n	8001928 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 8001908:	e8df f003 	tbb	[pc, r3]
 800190c:	020f020f 	.word	0x020f020f
		cmd[1].out_v = can_rx_buf.speed / 20;
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001912:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800191c:	ee67 7a87 	vmul.f32	s15, s15, s14
		cmd[1].timeout_cnt = 0;
 8001920:	2200      	movs	r2, #0
		cmd[1].out_v = can_rx_buf.speed / 20;
 8001922:	edc3 7a06 	vstr	s15, [r3, #24]
		cmd[1].timeout_cnt = 0;
 8001926:	61da      	str	r2, [r3, #28]
}
 8001928:	bd10      	pop	{r4, pc}
		cmd[0].out_v = can_rx_buf.speed / 20;
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800192c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001954 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001936:	ee67 7a87 	vmul.f32	s15, s15, s14
		cmd[0].timeout_cnt = 0;
 800193a:	2200      	movs	r2, #0
		cmd[0].out_v = can_rx_buf.speed / 20;
 800193c:	edc3 7a02 	vstr	s15, [r3, #8]
		cmd[0].timeout_cnt = 0;
 8001940:	60da      	str	r2, [r3, #12]
}
 8001942:	bd10      	pop	{r4, pc}
 8001944:	2000038c 	.word	0x2000038c
 8001948:	20000380 	.word	0x20000380
 800194c:	2000037c 	.word	0x2000037c
 8001950:	20000388 	.word	0x20000388
 8001954:	3d4ccccd 	.word	0x3d4ccccd
 8001958:	200003a8 	.word	0x200003a8
 800195c:	00000000 	.word	0x00000000

08001960 <runMode>:
{
 8001960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (manual_offset_radian > M_PI * 2)
 8001964:	4e72      	ldr	r6, [pc, #456]	; (8001b30 <runMode+0x1d0>)
 8001966:	6835      	ldr	r5, [r6, #0]
{
 8001968:	b091      	sub	sp, #68	; 0x44
	if (manual_offset_radian > M_PI * 2)
 800196a:	4628      	mov	r0, r5
 800196c:	f7fe fdec 	bl	8000548 <__aeabi_f2d>
 8001970:	a36d      	add	r3, pc, #436	; (adr r3, 8001b28 <runMode+0x1c8>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7ff f8cf 	bl	8000b18 <__aeabi_dcmpgt>
 800197a:	b110      	cbz	r0, 8001982 <runMode+0x22>
		manual_offset_radian = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	461d      	mov	r5, r3
 8001980:	6033      	str	r3, [r6, #0]
		if (cmd[i].out_v >= 0)
 8001982:	4c6c      	ldr	r4, [pc, #432]	; (8001b34 <runMode+0x1d4>)
			enc_offset[i].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[i].zero_calib + manual_offset_radian;
 8001984:	4f6c      	ldr	r7, [pc, #432]	; (8001b38 <runMode+0x1d8>)
		if (cmd[i].out_v >= 0)
 8001986:	edd4 7a02 	vldr	s15, [r4, #8]
 800198a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	f2c0 8098 	blt.w	8001ac6 <runMode+0x166>
			enc_offset[i].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[i].zero_calib + manual_offset_radian;
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe fdd6 	bl	8000548 <__aeabi_f2d>
 800199c:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <runMode+0x1dc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	f7fe fc72 	bl	8000288 <__aeabi_dsub>
 80019a4:	4680      	mov	r8, r0
 80019a6:	4628      	mov	r0, r5
 80019a8:	4689      	mov	r9, r1
 80019aa:	f7fe fdcd 	bl	8000548 <__aeabi_f2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4640      	mov	r0, r8
 80019b4:	4649      	mov	r1, r9
 80019b6:	f7fe fc69 	bl	800028c <__adddf3>
 80019ba:	f7ff f915 	bl	8000be8 <__aeabi_d2f>
 80019be:	ee07 0a90 	vmov	s15, r0
		cmd[i].timeout_cnt++;
 80019c2:	68e3      	ldr	r3, [r4, #12]
 80019c4:	edc7 7a00 	vstr	s15, [r7]
 80019c8:	3301      	adds	r3, #1
		if (cmd[i].timeout_cnt > 100)
 80019ca:	2b64      	cmp	r3, #100	; 0x64
		cmd[i].timeout_cnt++;
 80019cc:	60e3      	str	r3, [r4, #12]
		if (cmd[i].timeout_cnt > 100)
 80019ce:	f300 808f 	bgt.w	8001af0 <runMode+0x190>
		if (cmd[i].out_v >= 0)
 80019d2:	edd4 7a06 	vldr	s15, [r4, #24]
			enc_offset[i].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[i].zero_calib + manual_offset_radian;
 80019d6:	6835      	ldr	r5, [r6, #0]
		if (cmd[i].out_v >= 0)
 80019d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	db78      	blt.n	8001ad4 <runMode+0x174>
			enc_offset[i].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[i].zero_calib + manual_offset_radian;
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_f2d>
 80019e8:	4680      	mov	r8, r0
 80019ea:	4628      	mov	r0, r5
 80019ec:	4689      	mov	r9, r1
 80019ee:	f7fe fdab 	bl	8000548 <__aeabi_f2d>
 80019f2:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <runMode+0x1dc>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f7fe fc47 	bl	8000288 <__aeabi_dsub>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4640      	mov	r0, r8
 8001a00:	4649      	mov	r1, r9
 8001a02:	f7fe fc43 	bl	800028c <__adddf3>
 8001a06:	f7ff f8ef 	bl	8000be8 <__aeabi_d2f>
 8001a0a:	ee07 0a90 	vmov	s15, r0
		cmd[i].timeout_cnt++;
 8001a0e:	69e3      	ldr	r3, [r4, #28]
 8001a10:	edc7 7a02 	vstr	s15, [r7, #8]
 8001a14:	3301      	adds	r3, #1
		if (cmd[i].timeout_cnt > 100)
 8001a16:	2b64      	cmp	r3, #100	; 0x64
		cmd[i].timeout_cnt++;
 8001a18:	61e3      	str	r3, [r4, #28]
		if (cmd[i].timeout_cnt > 100)
 8001a1a:	dc62      	bgt.n	8001ae2 <runMode+0x182>
	printf("CS M0 %+7.3f M1 %+7.3f / BV %6.3f ", getCurrentM0(), getCurrentM1(), getBatteryVoltage());
 8001a1c:	f7ff fb5c 	bl	80010d8 <getCurrentM0>
 8001a20:	ee10 7a10 	vmov	r7, s0
 8001a24:	f7ff fb74 	bl	8001110 <getCurrentM1>
 8001a28:	ee10 5a10 	vmov	r5, s0
 8001a2c:	f7ff fb3c 	bl	80010a8 <getBatteryVoltage>
 8001a30:	4638      	mov	r0, r7
 8001a32:	ee10 7a10 	vmov	r7, s0
 8001a36:	f7fe fd87 	bl	8000548 <__aeabi_f2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4638      	mov	r0, r7
 8001a40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001a44:	f7fe fd80 	bl	8000548 <__aeabi_f2d>
 8001a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001a4c:	4628      	mov	r0, r5
 8001a4e:	f7fe fd7b 	bl	8000548 <__aeabi_f2d>
	printf("RPS M0 %+6.2f M1 %+6.2f M1offset %4.3f, voltageM0 %+6.3f M1 %6.3f rx %6ld speedM0 %+6.3f\n", motor_real[0].rps,motor_real[1].rps,ma702[0].enc_raw, ma702[1].enc_raw, manual_offset_radian, cmd[0].out_v, cmd[1].out_v, can_rx_cnt, cmd[0].speed);
 8001a52:	4f3b      	ldr	r7, [pc, #236]	; (8001b40 <runMode+0x1e0>)
 8001a54:	4d3b      	ldr	r5, [pc, #236]	; (8001b44 <runMode+0x1e4>)
	printf("CS M0 %+7.3f M1 %+7.3f / BV %6.3f ", getCurrentM0(), getCurrentM1(), getBatteryVoltage());
 8001a56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001a5a:	e9cd 0100 	strd	r0, r1, [sp]
 8001a5e:	483a      	ldr	r0, [pc, #232]	; (8001b48 <runMode+0x1e8>)
 8001a60:	f007 f882 	bl	8008b68 <iprintf>
	printf("RPS M0 %+6.2f M1 %+6.2f M1offset %4.3f, voltageM0 %+6.3f M1 %6.3f rx %6ld speedM0 %+6.3f\n", motor_real[0].rps,motor_real[1].rps,ma702[0].enc_raw, ma702[1].enc_raw, manual_offset_radian, cmd[0].out_v, cmd[1].out_v, can_rx_cnt, cmd[0].speed);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7fe fd6f 	bl	8000548 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	6820      	ldr	r0, [r4, #0]
 8001a70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8001a74:	f7fe fd68 	bl	8000548 <__aeabi_f2d>
 8001a78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001a7c:	6829      	ldr	r1, [r5, #0]
 8001a7e:	910a      	str	r1, [sp, #40]	; 0x28
 8001a80:	69a0      	ldr	r0, [r4, #24]
 8001a82:	f7fe fd61 	bl	8000548 <__aeabi_f2d>
 8001a86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001a8a:	68a0      	ldr	r0, [r4, #8]
 8001a8c:	f7fe fd5c 	bl	8000548 <__aeabi_f2d>
 8001a90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001a94:	6830      	ldr	r0, [r6, #0]
 8001a96:	f7fe fd57 	bl	8000548 <__aeabi_f2d>
 8001a9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001a9e:	492b      	ldr	r1, [pc, #172]	; (8001b4c <runMode+0x1ec>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	698c      	ldr	r4, [r1, #24]
 8001aa4:	9403      	str	r4, [sp, #12]
 8001aa6:	6849      	ldr	r1, [r1, #4]
 8001aa8:	9102      	str	r1, [sp, #8]
 8001aaa:	f7fe fd4d 	bl	8000548 <__aeabi_f2d>
 8001aae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8001ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8001ab6:	4826      	ldr	r0, [pc, #152]	; (8001b50 <runMode+0x1f0>)
 8001ab8:	f007 f856 	bl	8008b68 <iprintf>
	can_rx_cnt = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	602b      	str	r3, [r5, #0]
}
 8001ac0:	b011      	add	sp, #68	; 0x44
 8001ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			enc_offset[i].final = enc_offset[i].zero_calib + manual_offset_radian;
 8001ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aca:	ee07 5a10 	vmov	s14, r5
 8001ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad2:	e776      	b.n	80019c2 <runMode+0x62>
 8001ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ad8:	ee07 5a10 	vmov	s14, r5
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	e795      	b.n	8001a0e <runMode+0xae>
			if (isPushedSW1())
 8001ae2:	f7ff fcd3 	bl	800148c <isPushedSW1>
 8001ae6:	b150      	cbz	r0, 8001afe <runMode+0x19e>
				cmd[i].out_v = 2.0;
 8001ae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aec:	61a3      	str	r3, [r4, #24]
 8001aee:	e795      	b.n	8001a1c <runMode+0xbc>
			if (isPushedSW1())
 8001af0:	f7ff fccc 	bl	800148c <isPushedSW1>
 8001af4:	b150      	cbz	r0, 8001b0c <runMode+0x1ac>
				cmd[i].out_v = 2.0;
 8001af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001afa:	60a3      	str	r3, [r4, #8]
 8001afc:	e769      	b.n	80019d2 <runMode+0x72>
			else if (isPushedSW2())
 8001afe:	f7ff fcd1 	bl	80014a4 <isPushedSW2>
 8001b02:	b148      	cbz	r0, 8001b18 <runMode+0x1b8>
				cmd[i].out_v = -2.0;
 8001b04:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b08:	61a3      	str	r3, [r4, #24]
 8001b0a:	e787      	b.n	8001a1c <runMode+0xbc>
			else if (isPushedSW2())
 8001b0c:	f7ff fcca 	bl	80014a4 <isPushedSW2>
 8001b10:	b928      	cbnz	r0, 8001b1e <runMode+0x1be>
				cmd[i].out_v = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60a3      	str	r3, [r4, #8]
 8001b16:	e75c      	b.n	80019d2 <runMode+0x72>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61a3      	str	r3, [r4, #24]
 8001b1c:	e77e      	b.n	8001a1c <runMode+0xbc>
				cmd[i].out_v = -2.0;
 8001b1e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b22:	60a3      	str	r3, [r4, #8]
 8001b24:	e755      	b.n	80019d2 <runMode+0x72>
 8001b26:	bf00      	nop
 8001b28:	54442d18 	.word	0x54442d18
 8001b2c:	401921fb 	.word	0x401921fb
 8001b30:	200004a4 	.word	0x200004a4
 8001b34:	200003a8 	.word	0x200003a8
 8001b38:	200003cc 	.word	0x200003cc
 8001b3c:	40100000 	.word	0x40100000
 8001b40:	200004ac 	.word	0x200004ac
 8001b44:	20000388 	.word	0x20000388
 8001b48:	0800add8 	.word	0x0800add8
 8001b4c:	200005fc 	.word	0x200005fc
 8001b50:	0800adfc 	.word	0x0800adfc
 8001b54:	00000000 	.word	0x00000000

08001b58 <calibrationMode>:
{
 8001b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b5c:	ed2d 8b02 	vpush	{d8}
	printf("M0 ave %6.3f cnt %3d M1 ave %6.3f cnt %3d ", calib[0].radian_ave, calib[0].ave_cnt, calib[1].radian_ave, calib[1].ave_cnt);
 8001b60:	4ca9      	ldr	r4, [pc, #676]	; (8001e08 <calibrationMode+0x2b0>)
	printf("M0raw %6d M1raw %6d offset %4.3f\n", ma702[0].enc_raw, ma702[1].enc_raw, manual_offset_radian);
 8001b62:	4daa      	ldr	r5, [pc, #680]	; (8001e0c <calibrationMode+0x2b4>)
	printf("M0 ave %6.3f cnt %3d M1 ave %6.3f cnt %3d ", calib[0].radian_ave, calib[0].ave_cnt, calib[1].radian_ave, calib[1].ave_cnt);
 8001b64:	6860      	ldr	r0, [r4, #4]
{
 8001b66:	b089      	sub	sp, #36	; 0x24
	printf("M0 ave %6.3f cnt %3d M1 ave %6.3f cnt %3d ", calib[0].radian_ave, calib[0].ave_cnt, calib[1].radian_ave, calib[1].ave_cnt);
 8001b68:	f7fe fcee 	bl	8000548 <__aeabi_f2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001b72:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b74:	9104      	str	r1, [sp, #16]
 8001b76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001b7a:	f7fe fce5 	bl	8000548 <__aeabi_f2d>
 8001b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b82:	68a1      	ldr	r1, [r4, #8]
 8001b84:	9100      	str	r1, [sp, #0]
 8001b86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001b8a:	48a1      	ldr	r0, [pc, #644]	; (8001e10 <calibrationMode+0x2b8>)
 8001b8c:	f006 ffec 	bl	8008b68 <iprintf>
	printf("result M0 %6.4f M1 %6.4f ", calib[0].result_cw, calib[1].result_cw);
 8001b90:	6920      	ldr	r0, [r4, #16]
 8001b92:	f7fe fcd9 	bl	8000548 <__aeabi_f2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001ba0:	f7fe fcd2 	bl	8000548 <__aeabi_f2d>
 8001ba4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001ba8:	e9cd 0100 	strd	r0, r1, [sp]
 8001bac:	4899      	ldr	r0, [pc, #612]	; (8001e14 <calibrationMode+0x2bc>)
 8001bae:	f006 ffdb 	bl	8008b68 <iprintf>
	printf("M0raw %6d M1raw %6d offset %4.3f\n", ma702[0].enc_raw, ma702[1].enc_raw, manual_offset_radian);
 8001bb2:	4b99      	ldr	r3, [pc, #612]	; (8001e18 <calibrationMode+0x2c0>)
 8001bb4:	6828      	ldr	r0, [r5, #0]
 8001bb6:	699a      	ldr	r2, [r3, #24]
 8001bb8:	685e      	ldr	r6, [r3, #4]
 8001bba:	9206      	str	r2, [sp, #24]
 8001bbc:	f7fe fcc4 	bl	8000548 <__aeabi_f2d>
 8001bc0:	9a06      	ldr	r2, [sp, #24]
 8001bc2:	e9cd 0100 	strd	r0, r1, [sp]
 8001bc6:	4895      	ldr	r0, [pc, #596]	; (8001e1c <calibrationMode+0x2c4>)
 8001bc8:	4631      	mov	r1, r6
 8001bca:	f006 ffcd 	bl	8008b68 <iprintf>
	if (calib[0].result_cw_cnt > 5 && calib[1].result_cw_cnt > 5 && calib_rotation_speed > 0)
 8001bce:	6963      	ldr	r3, [r4, #20]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	dd02      	ble.n	8001bda <calibrationMode+0x82>
 8001bd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	dc0a      	bgt.n	8001bf0 <calibrationMode+0x98>
	if (calib[0].result_ccw_cnt > 5 && calib[1].result_ccw_cnt > 5)
 8001bda:	69e3      	ldr	r3, [r4, #28]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	dd02      	ble.n	8001be6 <calibrationMode+0x8e>
 8001be0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	dc19      	bgt.n	8001c1a <calibrationMode+0xc2>
}
 8001be6:	b009      	add	sp, #36	; 0x24
 8001be8:	ecbd 8b02 	vpop	{d8}
 8001bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (calib[0].result_cw_cnt > 5 && calib[1].result_cw_cnt > 5 && calib_rotation_speed > 0)
 8001bf0:	4b8b      	ldr	r3, [pc, #556]	; (8001e20 <calibrationMode+0x2c8>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	ddec      	ble.n	8001bda <calibrationMode+0x82>
		calibration_mode = true;
 8001c00:	4a88      	ldr	r2, [pc, #544]	; (8001e24 <calibrationMode+0x2cc>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	7011      	strb	r1, [r2, #0]
		cmd[0].out_v = 2.0;
 8001c06:	4a88      	ldr	r2, [pc, #544]	; (8001e28 <calibrationMode+0x2d0>)
 8001c08:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
		calib_rotation_speed = -calib_rotation_speed;
 8001c0c:	eef1 7a67 	vneg.f32	s15, s15
		cmd[0].out_v = 2.0;
 8001c10:	6091      	str	r1, [r2, #8]
		cmd[1].out_v = 2.0;
 8001c12:	6191      	str	r1, [r2, #24]
		calib_rotation_speed = -calib_rotation_speed;
 8001c14:	edc3 7a00 	vstr	s15, [r3]
 8001c18:	e7df      	b.n	8001bda <calibrationMode+0x82>
		cmd[0].out_v = 0;
 8001c1a:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8001e28 <calibrationMode+0x2d0>
 8001c1e:	2300      	movs	r3, #0
		HAL_Delay(1); // write out uart buffer
 8001c20:	2001      	movs	r0, #1
		cmd[0].out_v = 0;
 8001c22:	f8ca 3008 	str.w	r3, [sl, #8]
		cmd[1].out_v = 0;
 8001c26:	f8ca 3018 	str.w	r3, [sl, #24]
		HAL_Delay(1); // write out uart buffer
 8001c2a:	f001 fa4d 	bl	80030c8 <HAL_Delay>
		temp_offset[0] = (M_PI * 2) - ((calib[0].result_ccw + calib[0].result_cw) / 2);
 8001c2e:	ed94 7a04 	vldr	s14, [r4, #16]
 8001c32:	edd4 7a06 	vldr	s15, [r4, #24]
 8001c36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c3a:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8001c3e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001c42:	ee17 0a90 	vmov	r0, s15
 8001c46:	f7fe fc7f 	bl	8000548 <__aeabi_f2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	a16c      	add	r1, pc, #432	; (adr r1, 8001e00 <calibrationMode+0x2a8>)
 8001c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c54:	f7fe fb18 	bl	8000288 <__aeabi_dsub>
 8001c58:	f7fe ffc6 	bl	8000be8 <__aeabi_d2f>
		temp_offset[1] = (M_PI * 2) - ((calib[1].result_ccw + calib[1].result_cw) / 2);
 8001c5c:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8001c60:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8001c64:	ee77 7a87 	vadd.f32	s15, s15, s14
		temp_offset[0] = (M_PI * 2) - ((calib[0].result_ccw + calib[0].result_cw) / 2);
 8001c68:	ee08 0a90 	vmov	s17, r0
		temp_offset[1] = (M_PI * 2) - ((calib[1].result_ccw + calib[1].result_cw) / 2);
 8001c6c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001c70:	ee17 0a90 	vmov	r0, s15
 8001c74:	f7fe fc68 	bl	8000548 <__aeabi_f2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	a160      	add	r1, pc, #384	; (adr r1, 8001e00 <calibrationMode+0x2a8>)
 8001c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c82:	f7fe fb01 	bl	8000288 <__aeabi_dsub>
 8001c86:	f7fe ffaf 	bl	8000be8 <__aeabi_d2f>
 8001c8a:	4603      	mov	r3, r0
		printf("elec-centor radian : M0 %6f M1 %6f\n", temp_offset[0], temp_offset[1]);
 8001c8c:	ee18 0a90 	vmov	r0, s17
		temp_offset[1] = (M_PI * 2) - ((calib[1].result_ccw + calib[1].result_cw) / 2);
 8001c90:	ee08 3a10 	vmov	s16, r3
		printf("elec-centor radian : M0 %6f M1 %6f\n", temp_offset[0], temp_offset[1]);
 8001c94:	f7fe fc58 	bl	8000548 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	ee18 0a10 	vmov	r0, s16
 8001ca0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001ca4:	f7fe fc50 	bl	8000548 <__aeabi_f2d>
 8001ca8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001cac:	e9cd 0100 	strd	r0, r1, [sp]
 8001cb0:	485e      	ldr	r0, [pc, #376]	; (8001e2c <calibrationMode+0x2d4>)
 8001cb2:	f006 ff59 	bl	8008b68 <iprintf>
		HAL_Delay(1); // write out uart buffer
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f001 fa06 	bl	80030c8 <HAL_Delay>
		temp_offset[0] += ROTATION_OFFSET_RADIAN;
 8001cbc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8001cc0:	ee78 8aa7 	vadd.f32	s17, s17, s15
		if (temp_offset[0] > M_PI * 2)
 8001cc4:	ee18 0a90 	vmov	r0, s17
 8001cc8:	f7fe fc3e 	bl	8000548 <__aeabi_f2d>
 8001ccc:	a34c      	add	r3, pc, #304	; (adr r3, 8001e00 <calibrationMode+0x2a8>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	4606      	mov	r6, r0
 8001cd4:	460f      	mov	r7, r1
 8001cd6:	f7fe ff1f 	bl	8000b18 <__aeabi_dcmpgt>
 8001cda:	b170      	cbz	r0, 8001cfa <calibrationMode+0x1a2>
			temp_offset[0] -= M_PI * 2;
 8001cdc:	a348      	add	r3, pc, #288	; (adr r3, 8001e00 <calibrationMode+0x2a8>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	4639      	mov	r1, r7
 8001ce6:	f7fe facf 	bl	8000288 <__aeabi_dsub>
 8001cea:	f7fe ff7d 	bl	8000be8 <__aeabi_d2f>
 8001cee:	ee08 0a90 	vmov	s17, r0
			temp_offset[0] += M_PI * 2;
 8001cf2:	f7fe fc29 	bl	8000548 <__aeabi_f2d>
 8001cf6:	4606      	mov	r6, r0
 8001cf8:	460f      	mov	r7, r1
		if (temp_offset[0] < 0)
 8001cfa:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d02:	d50e      	bpl.n	8001d22 <calibrationMode+0x1ca>
			temp_offset[0] += M_PI * 2;
 8001d04:	a33e      	add	r3, pc, #248	; (adr r3, 8001e00 <calibrationMode+0x2a8>)
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	4639      	mov	r1, r7
 8001d0e:	f7fe fabd 	bl	800028c <__adddf3>
 8001d12:	f7fe ff69 	bl	8000be8 <__aeabi_d2f>
 8001d16:	ee08 0a90 	vmov	s17, r0
		printf("complete calibration!!\nccw %6f cw %6f result user offset M0 %6.3f M1 %6.3f\n", calib[0].result_ccw, calib[0].result_cw, temp_offset[0], temp_offset[1]);
 8001d1a:	f7fe fc15 	bl	8000548 <__aeabi_f2d>
 8001d1e:	4606      	mov	r6, r0
 8001d20:	460f      	mov	r7, r1
		temp_offset[1] += ROTATION_OFFSET_RADIAN;
 8001d22:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8001d26:	ee38 8a27 	vadd.f32	s16, s16, s15
		if (temp_offset[1] > M_PI * 2)
 8001d2a:	ee18 0a10 	vmov	r0, s16
 8001d2e:	f7fe fc0b 	bl	8000548 <__aeabi_f2d>
 8001d32:	a333      	add	r3, pc, #204	; (adr r3, 8001e00 <calibrationMode+0x2a8>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	4680      	mov	r8, r0
 8001d3a:	4689      	mov	r9, r1
 8001d3c:	f7fe feec 	bl	8000b18 <__aeabi_dcmpgt>
 8001d40:	b170      	cbz	r0, 8001d60 <calibrationMode+0x208>
			temp_offset[1] -= M_PI * 2;
 8001d42:	a32f      	add	r3, pc, #188	; (adr r3, 8001e00 <calibrationMode+0x2a8>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	4640      	mov	r0, r8
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	f7fe fa9c 	bl	8000288 <__aeabi_dsub>
 8001d50:	f7fe ff4a 	bl	8000be8 <__aeabi_d2f>
 8001d54:	ee08 0a10 	vmov	s16, r0
			temp_offset[1] += M_PI * 2;
 8001d58:	f7fe fbf6 	bl	8000548 <__aeabi_f2d>
 8001d5c:	4680      	mov	r8, r0
 8001d5e:	4689      	mov	r9, r1
		if (temp_offset[1] < 0)
 8001d60:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	d50e      	bpl.n	8001d88 <calibrationMode+0x230>
			temp_offset[1] += M_PI * 2;
 8001d6a:	a325      	add	r3, pc, #148	; (adr r3, 8001e00 <calibrationMode+0x2a8>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	4640      	mov	r0, r8
 8001d72:	4649      	mov	r1, r9
 8001d74:	f7fe fa8a 	bl	800028c <__adddf3>
 8001d78:	f7fe ff36 	bl	8000be8 <__aeabi_d2f>
 8001d7c:	ee08 0a10 	vmov	s16, r0
		printf("complete calibration!!\nccw %6f cw %6f result user offset M0 %6.3f M1 %6.3f\n", calib[0].result_ccw, calib[0].result_cw, temp_offset[0], temp_offset[1]);
 8001d80:	f7fe fbe2 	bl	8000548 <__aeabi_f2d>
 8001d84:	4680      	mov	r8, r0
 8001d86:	4689      	mov	r9, r1
		enc_offset[0].zero_calib = temp_offset[0];
 8001d88:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 8001e34 <calibrationMode+0x2dc>
		printf("complete calibration!!\nccw %6f cw %6f result user offset M0 %6.3f M1 %6.3f\n", calib[0].result_ccw, calib[0].result_cw, temp_offset[0], temp_offset[1]);
 8001d8c:	69a0      	ldr	r0, [r4, #24]
		enc_offset[0].zero_calib = temp_offset[0];
 8001d8e:	edcb 8a01 	vstr	s17, [fp, #4]
		enc_offset[1].zero_calib = temp_offset[1];
 8001d92:	ed8b 8a03 	vstr	s16, [fp, #12]
		printf("complete calibration!!\nccw %6f cw %6f result user offset M0 %6.3f M1 %6.3f\n", calib[0].result_ccw, calib[0].result_cw, temp_offset[0], temp_offset[1]);
 8001d96:	f7fe fbd7 	bl	8000548 <__aeabi_f2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	6920      	ldr	r0, [r4, #16]
 8001da0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001da4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001da8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001dac:	f7fe fbcc 	bl	8000548 <__aeabi_f2d>
 8001db0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001db4:	e9cd 0100 	strd	r0, r1, [sp]
 8001db8:	481d      	ldr	r0, [pc, #116]	; (8001e30 <calibrationMode+0x2d8>)
 8001dba:	f006 fed5 	bl	8008b68 <iprintf>
		calibration_mode = false;
 8001dbe:	4919      	ldr	r1, [pc, #100]	; (8001e24 <calibrationMode+0x2cc>)
		writeCalibrationValue(enc_offset[0].zero_calib,enc_offset[1].zero_calib);
 8001dc0:	eddb 0a03 	vldr	s1, [fp, #12]
 8001dc4:	ed9b 0a01 	vldr	s0, [fp, #4]
		manual_offset_radian = 0;
 8001dc8:	2300      	movs	r3, #0
		calibration_mode = false;
 8001dca:	2200      	movs	r2, #0
		manual_offset_radian = 0;
 8001dcc:	602b      	str	r3, [r5, #0]
		calibration_mode = false;
 8001dce:	700a      	strb	r2, [r1, #0]
		cmd[0].out_v = 0;
 8001dd0:	f8ca 3008 	str.w	r3, [sl, #8]
		cmd[1].out_v = 0;
 8001dd4:	f8ca 3018 	str.w	r3, [sl, #24]
		calib[0].result_cw_cnt = 0;
 8001dd8:	6162      	str	r2, [r4, #20]
		calib[1].result_cw_cnt = 0;
 8001dda:	6362      	str	r2, [r4, #52]	; 0x34
		calib[0].ave_cnt = 0;
 8001ddc:	60a2      	str	r2, [r4, #8]
		calib[1].ave_cnt = 0;
 8001dde:	62a2      	str	r2, [r4, #40]	; 0x28
		calib[0].radian_ave = 0;
 8001de0:	6063      	str	r3, [r4, #4]
		calib[1].radian_ave = 0;
 8001de2:	6263      	str	r3, [r4, #36]	; 0x24
		writeCalibrationValue(enc_offset[0].zero_calib,enc_offset[1].zero_calib);
 8001de4:	f7ff fb04 	bl	80013f0 <writeCalibrationValue>
		HAL_Delay(1000);
 8001de8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8001dec:	b009      	add	sp, #36	; 0x24
 8001dee:	ecbd 8b02 	vpop	{d8}
 8001df2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_Delay(1000);
 8001df6:	f001 b967 	b.w	80030c8 <HAL_Delay>
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	54442d18 	.word	0x54442d18
 8001e04:	401921fb 	.word	0x401921fb
 8001e08:	2000033c 	.word	0x2000033c
 8001e0c:	200004a4 	.word	0x200004a4
 8001e10:	0800ae58 	.word	0x0800ae58
 8001e14:	0800ae84 	.word	0x0800ae84
 8001e18:	200005fc 	.word	0x200005fc
 8001e1c:	0800aea0 	.word	0x0800aea0
 8001e20:	20000000 	.word	0x20000000
 8001e24:	2000037c 	.word	0x2000037c
 8001e28:	200003a8 	.word	0x200003a8
 8001e2c:	0800aec4 	.word	0x0800aec4
 8001e30:	0800aee8 	.word	0x0800aee8
 8001e34:	200003cc 	.word	0x200003cc

08001e38 <startCalibrationMode>:
{
 8001e38:	b508      	push	{r3, lr}
	printf("calibration mode!\n");
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <startCalibrationMode+0x38>)
 8001e3c:	f006 ff1a 	bl	8008c74 <puts>
	calib_rotation_speed = -calib_rotation_speed;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <startCalibrationMode+0x3c>)
	calibration_mode = true;
 8001e42:	490d      	ldr	r1, [pc, #52]	; (8001e78 <startCalibrationMode+0x40>)
	calib_rotation_speed = -calib_rotation_speed;
 8001e44:	edd3 7a00 	vldr	s15, [r3]
	cmd[0].out_v = 2.0;
 8001e48:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <startCalibrationMode+0x44>)
	manual_offset_radian = 0;
 8001e4a:	480d      	ldr	r0, [pc, #52]	; (8001e80 <startCalibrationMode+0x48>)
	calibration_mode = true;
 8001e4c:	f04f 0e01 	mov.w	lr, #1
	manual_offset_radian = 0;
 8001e50:	f04f 0c00 	mov.w	ip, #0
	calibration_mode = true;
 8001e54:	f881 e000 	strb.w	lr, [r1]
	calib_rotation_speed = -calib_rotation_speed;
 8001e58:	eef1 7a67 	vneg.f32	s15, s15
	cmd[0].out_v = 2.0;
 8001e5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	manual_offset_radian = 0;
 8001e60:	f8c0 c000 	str.w	ip, [r0]
	cmd[0].out_v = 2.0;
 8001e64:	6091      	str	r1, [r2, #8]
	cmd[1].out_v = 2.0;
 8001e66:	6191      	str	r1, [r2, #24]
	calib_rotation_speed = -calib_rotation_speed;
 8001e68:	edc3 7a00 	vstr	s15, [r3]
}
 8001e6c:	bd08      	pop	{r3, pc}
 8001e6e:	bf00      	nop
 8001e70:	0800af34 	.word	0x0800af34
 8001e74:	20000000 	.word	0x20000000
 8001e78:	2000037c 	.word	0x2000037c
 8001e7c:	200003a8 	.word	0x200003a8
 8001e80:	200004a4 	.word	0x200004a4
 8001e84:	00000000 	.word	0x00000000

08001e88 <SystemClock_Config>:
{
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8c:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e8e:	223c      	movs	r2, #60	; 0x3c
 8001e90:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e92:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e96:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8001e9a:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9e:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea0:	9100      	str	r1, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea2:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea4:	f006 f9ee 	bl	8008284 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eae:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb4:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001eba:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ebe:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ec0:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001ec6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec8:	f003 f80e 	bl	8004ee8 <HAL_RCC_OscConfig>
 8001ecc:	b108      	cbz	r0, 8001ed2 <SystemClock_Config+0x4a>
 8001ece:	b672      	cpsid	i
	while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	e9cd 2300 	strd	r2, r3, [sp]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001ee0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ee4:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eea:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001eec:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eee:	f003 fae3 	bl	80054b8 <HAL_RCC_ClockConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b108      	cbz	r0, 8001efa <SystemClock_Config+0x72>
 8001ef6:	b672      	cpsid	i
	while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <SystemClock_Config+0x70>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001efa:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001f20 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8001efe:	f243 0201 	movw	r2, #12289	; 0x3001
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f02:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001f04:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8001f08:	9210      	str	r2, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f0a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f0c:	f003 fc2e 	bl	800576c <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	b108      	cbz	r0, 8001f16 <SystemClock_Config+0x8e>
 8001f12:	b672      	cpsid	i
	while (1)
 8001f14:	e7fe      	b.n	8001f14 <SystemClock_Config+0x8c>
}
 8001f16:	b020      	add	sp, #128	; 0x80
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	bf00      	nop
 8001f1c:	f3af 8000 	nop.w
	...

08001f28 <main>:
{
 8001f28:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001f2c:	b085      	sub	sp, #20
  HAL_Init();
 8001f2e:	f001 f8a7 	bl	8003080 <HAL_Init>
  SystemClock_Config();
 8001f32:	f7ff ffa9 	bl	8001e88 <SystemClock_Config>
  MX_GPIO_Init();
 8001f36:	f7ff fae5 	bl	8001504 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f3a:	f7ff fa01 	bl	8001340 <MX_DMA_Init>
  MX_ADC1_Init();
 8001f3e:	f7fe fea3 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001f42:	f7fe ff31 	bl	8000da8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001f46:	f7fe ff93 	bl	8000e70 <MX_ADC3_Init>
  MX_CAN_Init();
 8001f4a:	f7ff f953 	bl	80011f4 <MX_CAN_Init>
  MX_SPI1_Init();
 8001f4e:	f000 facb 	bl	80024e8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001f52:	f000 fd3d 	bl	80029d0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001f56:	f000 fdcf 	bl	8002af8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001f5a:	f000 ffc1 	bl	8002ee0 <MX_USART1_UART_Init>
	initFirstSin();
 8001f5e:	f000 fe67 	bl	8002c30 <initFirstSin>
	setLedRed(true);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff fab6 	bl	80014d4 <setLedRed>
	setLedGreen(true);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff fac3 	bl	80014f4 <setLedGreen>
	setLedBlue(true);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f7ff fab8 	bl	80014e4 <setLedBlue>
	enable_buffer_mode = true;
 8001f74:	f8df a3b8 	ldr.w	sl, [pc, #952]	; 8002330 <main+0x408>
	enc_offset[0].zero_calib = flash.calib[0];
 8001f78:	4ed8      	ldr	r6, [pc, #864]	; (80022dc <main+0x3b4>)
	HAL_Delay(100);
 8001f7a:	2064      	movs	r0, #100	; 0x64
 8001f7c:	f001 f8a4 	bl	80030c8 <HAL_Delay>
	enable_buffer_mode = true;
 8001f80:	2501      	movs	r5, #1
	loadFlashData();
 8001f82:	f7ff fa75 	bl	8001470 <loadFlashData>
	printf("** Orion VV driver V1 start! **\n");
 8001f86:	48d6      	ldr	r0, [pc, #856]	; (80022e0 <main+0x3b8>)
	enable_buffer_mode = true;
 8001f88:	f88a 5000 	strb.w	r5, [sl]
	printf("** Orion VV driver V1 start! **\n");
 8001f8c:	f006 fe72 	bl	8008c74 <puts>
	enc_offset[0].zero_calib = flash.calib[0];
 8001f90:	4bd4      	ldr	r3, [pc, #848]	; (80022e4 <main+0x3bc>)
	enc_offset[1].zero_calib = flash.calib[1];
 8001f92:	6874      	ldr	r4, [r6, #4]
	enc_offset[0].zero_calib = flash.calib[0];
 8001f94:	6830      	ldr	r0, [r6, #0]
	enc_offset[1].zero_calib = flash.calib[1];
 8001f96:	60dc      	str	r4, [r3, #12]
	enc_offset[0].zero_calib = flash.calib[0];
 8001f98:	6058      	str	r0, [r3, #4]
	printf("CAN ADDR 0x%03x, enc offset M0 %6.3f M1 %6.3f\n", flash.board_id, flash.calib[0], flash.calib[1]);
 8001f9a:	f7fe fad5 	bl	8000548 <__aeabi_f2d>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001fa8:	f7fe face 	bl	8000548 <__aeabi_f2d>
 8001fac:	68b4      	ldr	r4, [r6, #8]
 8001fae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001fb2:	e9cd 0100 	strd	r0, r1, [sp]
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	48cb      	ldr	r0, [pc, #812]	; (80022e8 <main+0x3c0>)
 8001fba:	f006 fdd5 	bl	8008b68 <iprintf>
	if (isPushedSW1())
 8001fbe:	f7ff fa65 	bl	800148c <isPushedSW1>
 8001fc2:	2800      	cmp	r0, #0
 8001fc4:	f000 81ba 	beq.w	800233c <main+0x414>
		flash.board_id = 0;
 8001fc8:	2000      	movs	r0, #0
 8001fca:	60b0      	str	r0, [r6, #8]
		writeCanBoardID(flash.board_id);
 8001fcc:	f7ff f9d4 	bl	8001378 <writeCanBoardID>
		printf("sed board id %d\n", flash.board_id);
 8001fd0:	68b1      	ldr	r1, [r6, #8]
 8001fd2:	48c6      	ldr	r0, [pc, #792]	; (80022ec <main+0x3c4>)
 8001fd4:	f006 fdc8 	bl	8008b68 <iprintf>
		HAL_Delay(1000);
 8001fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fdc:	f001 f874 	bl	80030c8 <HAL_Delay>
	if (isPushedSW4())
 8001fe0:	f7ff fa6c 	bl	80014bc <isPushedSW4>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	f040 8256 	bne.w	8002496 <main+0x56e>
	__HAL_SPI_ENABLE(&hspi1);
 8001fea:	4bc1      	ldr	r3, [pc, #772]	; (80022f0 <main+0x3c8>)
	HAL_TIM_PWM_Init(&htim8);
 8001fec:	4dc1      	ldr	r5, [pc, #772]	; (80022f4 <main+0x3cc>)
	__HAL_SPI_ENABLE(&hspi1);
 8001fee:	6818      	ldr	r0, [r3, #0]
	HAL_TIM_PWM_Init(&htim1);
 8001ff0:	4cc1      	ldr	r4, [pc, #772]	; (80022f8 <main+0x3d0>)
	__HAL_SPI_ENABLE(&hspi1);
 8001ff2:	6803      	ldr	r3, [r0, #0]
	motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 500;	//rps
 8001ff4:	ed9f 8ac1 	vldr	s16, [pc, #772]	; 80022fc <main+0x3d4>
 8001ff8:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8002318 <main+0x3f0>
 8001ffc:	4fc0      	ldr	r7, [pc, #768]	; (8002300 <main+0x3d8>)
 8001ffe:	f8df b334 	ldr.w	fp, [pc, #820]	; 8002334 <main+0x40c>
 8002002:	f8df 9334 	ldr.w	r9, [pc, #820]	; 8002338 <main+0x410>
	__HAL_SPI_ENABLE(&hspi1);
 8002006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800200a:	6003      	str	r3, [r0, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	48bd      	ldr	r0, [pc, #756]	; (8002304 <main+0x3dc>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	f002 ff63 	bl	8004edc <HAL_GPIO_WritePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002016:	2100      	movs	r1, #0
 8002018:	48bb      	ldr	r0, [pc, #748]	; (8002308 <main+0x3e0>)
 800201a:	f001 fab7 	bl	800358c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800201e:	2100      	movs	r1, #0
 8002020:	48ba      	ldr	r0, [pc, #744]	; (800230c <main+0x3e4>)
 8002022:	f001 fab3 	bl	800358c <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8002026:	2100      	movs	r1, #0
 8002028:	48b9      	ldr	r0, [pc, #740]	; (8002310 <main+0x3e8>)
 800202a:	f001 faaf 	bl	800358c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 800202e:	48b6      	ldr	r0, [pc, #728]	; (8002308 <main+0x3e0>)
 8002030:	f001 fa14 	bl	800345c <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 8002034:	48b5      	ldr	r0, [pc, #724]	; (800230c <main+0x3e4>)
 8002036:	f001 fa11 	bl	800345c <HAL_ADC_Start>
	HAL_ADC_Start(&hadc3);
 800203a:	48b5      	ldr	r0, [pc, #724]	; (8002310 <main+0x3e8>)
 800203c:	f001 fa0e 	bl	800345c <HAL_ADC_Start>
	HAL_TIM_PWM_Init(&htim8);
 8002040:	4628      	mov	r0, r5
 8002042:	f003 fdf5 	bl	8005c30 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002046:	2100      	movs	r1, #0
 8002048:	4628      	mov	r0, r5
 800204a:	f003 fe79 	bl	8005d40 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800204e:	2100      	movs	r1, #0
 8002050:	4628      	mov	r0, r5
 8002052:	f004 f9a3 	bl	800639c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002056:	2104      	movs	r1, #4
 8002058:	4628      	mov	r0, r5
 800205a:	f003 fe71 	bl	8005d40 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 800205e:	2104      	movs	r1, #4
 8002060:	4628      	mov	r0, r5
 8002062:	f004 f99b 	bl	800639c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002066:	2108      	movs	r1, #8
 8002068:	4628      	mov	r0, r5
 800206a:	f003 fe69 	bl	8005d40 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 800206e:	2108      	movs	r1, #8
 8002070:	4628      	mov	r0, r5
 8002072:	f004 f993 	bl	800639c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Init(&htim1);
 8002076:	4620      	mov	r0, r4
 8002078:	f003 fdda 	bl	8005c30 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800207c:	2100      	movs	r1, #0
 800207e:	4620      	mov	r0, r4
 8002080:	f003 fe5e 	bl	8005d40 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8002084:	2100      	movs	r1, #0
 8002086:	4620      	mov	r0, r4
 8002088:	f004 f988 	bl	800639c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800208c:	2104      	movs	r1, #4
 800208e:	4620      	mov	r0, r4
 8002090:	f003 fe56 	bl	8005d40 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002094:	2104      	movs	r1, #4
 8002096:	4620      	mov	r0, r4
 8002098:	f004 f980 	bl	800639c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800209c:	2108      	movs	r1, #8
 800209e:	4620      	mov	r0, r4
 80020a0:	f003 fe4e 	bl	8005d40 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80020a4:	2108      	movs	r1, #8
 80020a6:	4620      	mov	r0, r4
 80020a8:	f004 f978 	bl	800639c <HAL_TIMEx_PWMN_Start>
	htim1.Instance->CNT = 0;
 80020ac:	6822      	ldr	r2, [r4, #0]
	htim8.Instance->CNT = 10;
 80020ae:	682b      	ldr	r3, [r5, #0]
 80020b0:	4d98      	ldr	r5, [pc, #608]	; (8002314 <main+0x3ec>)
	HAL_TIM_Base_Start_IT(&htim1);
 80020b2:	4620      	mov	r0, r4
	htim1.Instance->CNT = 0;
 80020b4:	2400      	movs	r4, #0
 80020b6:	6254      	str	r4, [r2, #36]	; 0x24
	htim8.Instance->CNT = 10;
 80020b8:	220a      	movs	r2, #10
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim1);
 80020bc:	f003 fd66 	bl	8005b8c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80020c0:	4995      	ldr	r1, [pc, #596]	; (8002318 <main+0x3f0>)
 80020c2:	4896      	ldr	r0, [pc, #600]	; (800231c <main+0x3f4>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	f004 faa5 	bl	8006614 <HAL_UART_Receive_IT>
	CAN_Filter_Init(flash.board_id);
 80020ca:	8930      	ldrh	r0, [r6, #8]
 80020cc:	4e94      	ldr	r6, [pc, #592]	; (8002320 <main+0x3f8>)
 80020ce:	f7ff f903 	bl	80012d8 <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 80020d2:	4894      	ldr	r0, [pc, #592]	; (8002324 <main+0x3fc>)
 80020d4:	f002 f8e6 	bl	80042a4 <HAL_CAN_Start>
	printf("start main loop!\n");
 80020d8:	4893      	ldr	r0, [pc, #588]	; (8002328 <main+0x400>)
 80020da:	f006 fdcb 	bl	8008c74 <puts>
	setLedRed(false);
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff f9f8 	bl	80014d4 <setLedRed>
	setLedGreen(false);
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff fa05 	bl	80014f4 <setLedGreen>
	setLedBlue(false);
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff f9fa 	bl	80014e4 <setLedBlue>
 80020f0:	4c8e      	ldr	r4, [pc, #568]	; (800232c <main+0x404>)
 80020f2:	e03c      	b.n	800216e <main+0x246>
		temp += ENC_CNT_MAX;
 80020f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 500;	//rps
 80020f8:	ee07 3a90 	vmov	s15, r3
		.pre_enc_cnt_raw = ma702[motor].enc_raw;
 80020fc:	6022      	str	r2, [r4, #0]
	motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 500;	//rps
 80020fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 8002102:	69aa      	ldr	r2, [r5, #24]
 8002104:	68a3      	ldr	r3, [r4, #8]
	motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 500;	//rps
 8002106:	ee67 7a88 	vmul.f32	s15, s15, s16
	int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 800210a:	1a9b      	subs	r3, r3, r2
	if (temp < -HARF_OF_ENC_CNT_MAX){
 800210c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
	motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 500;	//rps
 8002110:	edc4 7a01 	vstr	s15, [r4, #4]
	if (temp < -HARF_OF_ENC_CNT_MAX){
 8002114:	da3c      	bge.n	8002190 <main+0x268>
		temp += ENC_CNT_MAX;
 8002116:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 500;	//rps
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (calibration_mode)
 8002122:	783b      	ldrb	r3, [r7, #0]
		.pre_enc_cnt_raw = ma702[motor].enc_raw;
 8002124:	60a2      	str	r2, [r4, #8]
	motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 500;	//rps
 8002126:	ee67 7a88 	vmul.f32	s15, s15, s16
 800212a:	edc4 7a03 	vstr	s15, [r4, #12]
		if (calibration_mode)
 800212e:	b363      	cbz	r3, 800218a <main+0x262>
			calibrationMode();
 8002130:	f7ff fd12 	bl	8001b58 <calibrationMode>
		if (getCurrentM0() > 3.0 /* || getCurrentM1() > 3.0*/)
 8002134:	f7fe ffd0 	bl	80010d8 <getCurrentM0>
 8002138:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800213c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002144:	f300 8178 	bgt.w	8002438 <main+0x510>
		if (getBatteryVoltage() < 20)
 8002148:	f7fe ffae 	bl	80010a8 <getBatteryVoltage>
 800214c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002150:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	f100 8183 	bmi.w	8002462 <main+0x53a>
		setLedRed(true);
 800215c:	2001      	movs	r0, #1
 800215e:	f7ff f9b9 	bl	80014d4 <setLedRed>
		HAL_Delay(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f000 ffb0 	bl	80030c8 <HAL_Delay>
		setLedRed(false);
 8002168:	2000      	movs	r0, #0
 800216a:	f7ff f9b3 	bl	80014d4 <setLedRed>
	if (uart_rx_flag)
 800216e:	7833      	ldrb	r3, [r6, #0]
 8002170:	b9a3      	cbnz	r3, 800219c <main+0x274>
	int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 8002172:	686a      	ldr	r2, [r5, #4]
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	1a9b      	subs	r3, r3, r2
	if (temp < -HARF_OF_ENC_CNT_MAX){
 8002178:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800217c:	dbba      	blt.n	80020f4 <main+0x1cc>
	else if (temp > HARF_OF_ENC_CNT_MAX){
 800217e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		temp -= ENC_CNT_MAX;
 8002182:	bfc8      	it	gt
 8002184:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 8002188:	e7b6      	b.n	80020f8 <main+0x1d0>
			runMode();
 800218a:	f7ff fbe9 	bl	8001960 <runMode>
 800218e:	e7d1      	b.n	8002134 <main+0x20c>
	else if (temp > HARF_OF_ENC_CNT_MAX){
 8002190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		temp -= ENC_CNT_MAX;
 8002194:	bfc8      	it	gt
 8002196:	f5a3 3380 	subgt.w	r3, r3, #65536	; 0x10000
 800219a:	e7be      	b.n	800211a <main+0x1f2>
		uart_rx_flag = false;
 800219c:	2300      	movs	r3, #0
		HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800219e:	485f      	ldr	r0, [pc, #380]	; (800231c <main+0x3f4>)
		uart_rx_flag = false;
 80021a0:	7033      	strb	r3, [r6, #0]
		HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80021a2:	2201      	movs	r2, #1
 80021a4:	4641      	mov	r1, r8
 80021a6:	f004 fa35 	bl	8006614 <HAL_UART_Receive_IT>
		switch (uart_rx_buf[0])
 80021aa:	f898 3000 	ldrb.w	r3, [r8]
 80021ae:	3b30      	subs	r3, #48	; 0x30
 80021b0:	2b47      	cmp	r3, #71	; 0x47
 80021b2:	d8de      	bhi.n	8002172 <main+0x24a>
 80021b4:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <main+0x294>)
 80021b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ba:	bf00      	nop
 80021bc:	0800242d 	.word	0x0800242d
 80021c0:	08002173 	.word	0x08002173
 80021c4:	08002173 	.word	0x08002173
 80021c8:	08002173 	.word	0x08002173
 80021cc:	08002173 	.word	0x08002173
 80021d0:	08002173 	.word	0x08002173
 80021d4:	08002173 	.word	0x08002173
 80021d8:	08002173 	.word	0x08002173
 80021dc:	08002173 	.word	0x08002173
 80021e0:	08002173 	.word	0x08002173
 80021e4:	08002173 	.word	0x08002173
 80021e8:	08002173 	.word	0x08002173
 80021ec:	08002173 	.word	0x08002173
 80021f0:	08002173 	.word	0x08002173
 80021f4:	08002173 	.word	0x08002173
 80021f8:	08002173 	.word	0x08002173
 80021fc:	08002173 	.word	0x08002173
 8002200:	08002173 	.word	0x08002173
 8002204:	08002173 	.word	0x08002173
 8002208:	08002173 	.word	0x08002173
 800220c:	08002173 	.word	0x08002173
 8002210:	08002173 	.word	0x08002173
 8002214:	08002173 	.word	0x08002173
 8002218:	08002173 	.word	0x08002173
 800221c:	08002173 	.word	0x08002173
 8002220:	08002173 	.word	0x08002173
 8002224:	08002173 	.word	0x08002173
 8002228:	08002173 	.word	0x08002173
 800222c:	08002173 	.word	0x08002173
 8002230:	08002173 	.word	0x08002173
 8002234:	08002173 	.word	0x08002173
 8002238:	08002173 	.word	0x08002173
 800223c:	08002173 	.word	0x08002173
 8002240:	08002173 	.word	0x08002173
 8002244:	08002173 	.word	0x08002173
 8002248:	08002173 	.word	0x08002173
 800224c:	08002173 	.word	0x08002173
 8002250:	08002173 	.word	0x08002173
 8002254:	08002173 	.word	0x08002173
 8002258:	08002173 	.word	0x08002173
 800225c:	08002173 	.word	0x08002173
 8002260:	08002173 	.word	0x08002173
 8002264:	08002173 	.word	0x08002173
 8002268:	08002173 	.word	0x08002173
 800226c:	08002173 	.word	0x08002173
 8002270:	08002173 	.word	0x08002173
 8002274:	08002173 	.word	0x08002173
 8002278:	08002173 	.word	0x08002173
 800227c:	08002173 	.word	0x08002173
 8002280:	08002411 	.word	0x08002411
 8002284:	08002173 	.word	0x08002173
 8002288:	080023e5 	.word	0x080023e5
 800228c:	08002173 	.word	0x08002173
 8002290:	08002173 	.word	0x08002173
 8002294:	08002173 	.word	0x08002173
 8002298:	08002173 	.word	0x08002173
 800229c:	08002173 	.word	0x08002173
 80022a0:	08002173 	.word	0x08002173
 80022a4:	08002173 	.word	0x08002173
 80022a8:	08002173 	.word	0x08002173
 80022ac:	080023cf 	.word	0x080023cf
 80022b0:	08002173 	.word	0x08002173
 80022b4:	080023b5 	.word	0x080023b5
 80022b8:	08002173 	.word	0x08002173
 80022bc:	080023a5 	.word	0x080023a5
 80022c0:	08002389 	.word	0x08002389
 80022c4:	08002173 	.word	0x08002173
 80022c8:	0800236b 	.word	0x0800236b
 80022cc:	08002173 	.word	0x08002173
 80022d0:	08002173 	.word	0x08002173
 80022d4:	08002173 	.word	0x08002173
 80022d8:	0800234d 	.word	0x0800234d
 80022dc:	20000330 	.word	0x20000330
 80022e0:	0800af8c 	.word	0x0800af8c
 80022e4:	200003cc 	.word	0x200003cc
 80022e8:	0800afac 	.word	0x0800afac
 80022ec:	0800afdc 	.word	0x0800afdc
 80022f0:	20000598 	.word	0x20000598
 80022f4:	20000674 	.word	0x20000674
 80022f8:	20000628 	.word	0x20000628
 80022fc:	3bfa0000 	.word	0x3bfa0000
 8002300:	2000037c 	.word	0x2000037c
 8002304:	48000400 	.word	0x48000400
 8002308:	20000218 	.word	0x20000218
 800230c:	20000268 	.word	0x20000268
 8002310:	200002b8 	.word	0x200002b8
 8002314:	200005fc 	.word	0x200005fc
 8002318:	2000058c 	.word	0x2000058c
 800231c:	20001704 	.word	0x20001704
 8002320:	20000596 	.word	0x20000596
 8002324:	20000308 	.word	0x20000308
 8002328:	0800b004 	.word	0x0800b004
 800232c:	200004ac 	.word	0x200004ac
 8002330:	200003c8 	.word	0x200003c8
 8002334:	200004a4 	.word	0x200004a4
 8002338:	200003a8 	.word	0x200003a8
	else if (isPushedSW2())
 800233c:	f7ff f8b2 	bl	80014a4 <isPushedSW2>
 8002340:	2800      	cmp	r0, #0
 8002342:	f43f ae4d 	beq.w	8001fe0 <main+0xb8>
		writeCanBoardID(flash.board_id);
 8002346:	4628      	mov	r0, r5
		flash.board_id = 1;
 8002348:	60b5      	str	r5, [r6, #8]
 800234a:	e63f      	b.n	8001fcc <main+0xa4>
			cmd[0].out_v += 0.5;
 800234c:	ed99 7a02 	vldr	s14, [r9, #8]
			cmd[1].out_v += 0.5;
 8002350:	edd9 7a06 	vldr	s15, [r9, #24]
			cmd[0].out_v += 0.5;
 8002354:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002358:	ee37 7a26 	vadd.f32	s14, s14, s13
			cmd[1].out_v += 0.5;
 800235c:	ee77 7aa6 	vadd.f32	s15, s15, s13
			cmd[0].out_v += 0.5;
 8002360:	ed89 7a02 	vstr	s14, [r9, #8]
			cmd[1].out_v += 0.5;
 8002364:	edc9 7a06 	vstr	s15, [r9, #24]
			break;
 8002368:	e703      	b.n	8002172 <main+0x24a>
			cmd[0].out_v -= 0.5;
 800236a:	ed99 7a02 	vldr	s14, [r9, #8]
			cmd[1].out_v -= 0.5;
 800236e:	edd9 7a06 	vldr	s15, [r9, #24]
			cmd[0].out_v -= 0.5;
 8002372:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002376:	ee37 7a66 	vsub.f32	s14, s14, s13
			cmd[1].out_v -= 0.5;
 800237a:	ee77 7ae6 	vsub.f32	s15, s15, s13
			cmd[0].out_v -= 0.5;
 800237e:	ed89 7a02 	vstr	s14, [r9, #8]
			cmd[1].out_v -= 0.5;
 8002382:	edc9 7a06 	vstr	s15, [r9, #24]
			break;
 8002386:	e6f4      	b.n	8002172 <main+0x24a>
			manual_offset_radian += 0.01;
 8002388:	f8db 0000 	ldr.w	r0, [fp]
 800238c:	f7fe f8dc 	bl	8000548 <__aeabi_f2d>
 8002390:	a347      	add	r3, pc, #284	; (adr r3, 80024b0 <main+0x588>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fd ff79 	bl	800028c <__adddf3>
 800239a:	f7fe fc25 	bl	8000be8 <__aeabi_d2f>
 800239e:	f8cb 0000 	str.w	r0, [fp]
			break;
 80023a2:	e6e6      	b.n	8002172 <main+0x24a>
			motor_accel = 0.5;
 80023a4:	4a44      	ldr	r2, [pc, #272]	; (80024b8 <main+0x590>)
			printf("start auto speed!!\n");
 80023a6:	4845      	ldr	r0, [pc, #276]	; (80024bc <main+0x594>)
			motor_accel = 0.5;
 80023a8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80023ac:	6013      	str	r3, [r2, #0]
			printf("start auto speed!!\n");
 80023ae:	f006 fc61 	bl	8008c74 <puts>
			break;
 80023b2:	e6de      	b.n	8002172 <main+0x24a>
			printf("run mode!\n");
 80023b4:	4842      	ldr	r0, [pc, #264]	; (80024c0 <main+0x598>)
 80023b6:	f006 fc5d 	bl	8008c74 <puts>
			manual_offset_radian = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8cb 3000 	str.w	r3, [fp]
			cmd[0].out_v = 0;
 80023c0:	f8c9 3008 	str.w	r3, [r9, #8]
			cmd[1].out_v = 0;
 80023c4:	f8c9 3018 	str.w	r3, [r9, #24]
			calibration_mode = false;
 80023c8:	2300      	movs	r3, #0
 80023ca:	703b      	strb	r3, [r7, #0]
			break;
 80023cc:	e6d1      	b.n	8002172 <main+0x24a>
			motor_accel = 0;
 80023ce:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <main+0x590>)
			printf("stop auto speed!!\n");
 80023d0:	483c      	ldr	r0, [pc, #240]	; (80024c4 <main+0x59c>)
			motor_accel = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	6013      	str	r3, [r2, #0]
			cmd[0].out_v = 0;
 80023d6:	f8c9 3008 	str.w	r3, [r9, #8]
			cmd[1].out_v = 0;
 80023da:	f8c9 3018 	str.w	r3, [r9, #24]
			printf("stop auto speed!!\n");
 80023de:	f006 fc49 	bl	8008c74 <puts>
			break;
 80023e2:	e6c6      	b.n	8002172 <main+0x24a>
	printf("calibration mode!\n");
 80023e4:	4838      	ldr	r0, [pc, #224]	; (80024c8 <main+0x5a0>)
 80023e6:	f006 fc45 	bl	8008c74 <puts>
	calib_rotation_speed = -calib_rotation_speed;
 80023ea:	4b38      	ldr	r3, [pc, #224]	; (80024cc <main+0x5a4>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	eef1 7a67 	vneg.f32	s15, s15
 80023f4:	edc3 7a00 	vstr	s15, [r3]
	manual_offset_radian = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8cb 3000 	str.w	r3, [fp]
	cmd[0].out_v = 2.0;
 80023fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002402:	f8c9 3008 	str.w	r3, [r9, #8]
	cmd[1].out_v = 2.0;
 8002406:	f8c9 3018 	str.w	r3, [r9, #24]
	calibration_mode = true;
 800240a:	2301      	movs	r3, #1
 800240c:	703b      	strb	r3, [r7, #0]
}
 800240e:	e6b0      	b.n	8002172 <main+0x24a>
			manual_offset_radian -= 0.01;
 8002410:	f8db 0000 	ldr.w	r0, [fp]
 8002414:	f7fe f898 	bl	8000548 <__aeabi_f2d>
 8002418:	a325      	add	r3, pc, #148	; (adr r3, 80024b0 <main+0x588>)
 800241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241e:	f7fd ff33 	bl	8000288 <__aeabi_dsub>
 8002422:	f7fe fbe1 	bl	8000be8 <__aeabi_d2f>
 8002426:	f8cb 0000 	str.w	r0, [fp]
			break;
 800242a:	e6a2      	b.n	8002172 <main+0x24a>
			printf("enter sleep!\n");
 800242c:	4828      	ldr	r0, [pc, #160]	; (80024d0 <main+0x5a8>)
 800242e:	f006 fc21 	bl	8008c74 <puts>
			forceStop();
 8002432:	f000 fd05 	bl	8002e40 <forceStop>
			while (1)
 8002436:	e7fe      	b.n	8002436 <main+0x50e>
			forceStop();
 8002438:	f000 fd02 	bl	8002e40 <forceStop>
			printf("over current!! : %d %d\n", adc_raw.cs_m0, adc_raw.cs_m1);
 800243c:	4b25      	ldr	r3, [pc, #148]	; (80024d4 <main+0x5ac>)
 800243e:	4826      	ldr	r0, [pc, #152]	; (80024d8 <main+0x5b0>)
 8002440:	e9d3 1200 	ldrd	r1, r2, [r3]
			enable_buffer_mode = true;
 8002444:	2401      	movs	r4, #1
 8002446:	f88a 4000 	strb.w	r4, [sl]
			printf("over current!! : %d %d\n", adc_raw.cs_m0, adc_raw.cs_m1);
 800244a:	f006 fb8d 	bl	8008b68 <iprintf>
			setLedBlue(false);
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff f848 	bl	80014e4 <setLedBlue>
			setLedGreen(true);
 8002454:	4620      	mov	r0, r4
 8002456:	f7ff f84d 	bl	80014f4 <setLedGreen>
			setLedRed(true);
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff f83a 	bl	80014d4 <setLedRed>
			while (1)
 8002460:	e7fe      	b.n	8002460 <main+0x538>
			enable_buffer_mode = true;
 8002462:	2401      	movs	r4, #1
			forceStop();
 8002464:	f000 fcec 	bl	8002e40 <forceStop>
			enable_buffer_mode = true;
 8002468:	f88a 4000 	strb.w	r4, [sl]
			printf("under operation voltaie!! %6.3f", getBatteryVoltage());
 800246c:	f7fe fe1c 	bl	80010a8 <getBatteryVoltage>
 8002470:	ee10 0a10 	vmov	r0, s0
 8002474:	f7fe f868 	bl	8000548 <__aeabi_f2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4817      	ldr	r0, [pc, #92]	; (80024dc <main+0x5b4>)
 800247e:	f006 fb73 	bl	8008b68 <iprintf>
			setLedBlue(true);
 8002482:	4620      	mov	r0, r4
 8002484:	f7ff f82e 	bl	80014e4 <setLedBlue>
			setLedGreen(false);
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff f833 	bl	80014f4 <setLedGreen>
			setLedRed(true);
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff f820 	bl	80014d4 <setLedRed>
			while (1)
 8002494:	e7fe      	b.n	8002494 <main+0x56c>
		startCalibrationMode();
 8002496:	f7ff fccf 	bl	8001e38 <startCalibrationMode>
		printf("calibration mode!!\n");
 800249a:	4811      	ldr	r0, [pc, #68]	; (80024e0 <main+0x5b8>)
 800249c:	f006 fbea 	bl	8008c74 <puts>
		while (isPushedSW4())
 80024a0:	f7ff f80c 	bl	80014bc <isPushedSW4>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d1fb      	bne.n	80024a0 <main+0x578>
 80024a8:	e59f      	b.n	8001fea <main+0xc2>
 80024aa:	bf00      	nop
 80024ac:	f3af 8000 	nop.w
 80024b0:	47ae147b 	.word	0x47ae147b
 80024b4:	3f847ae1 	.word	0x3f847ae1
 80024b8:	200004a8 	.word	0x200004a8
 80024bc:	0800af54 	.word	0x0800af54
 80024c0:	0800af48 	.word	0x0800af48
 80024c4:	0800af68 	.word	0x0800af68
 80024c8:	0800af34 	.word	0x0800af34
 80024cc:	20000000 	.word	0x20000000
 80024d0:	0800af7c 	.word	0x0800af7c
 80024d4:	20000200 	.word	0x20000200
 80024d8:	0800b018 	.word	0x0800b018
 80024dc:	0800b030 	.word	0x0800b030
 80024e0:	0800aff0 	.word	0x0800aff0

080024e4 <Error_Handler>:
 80024e4:	b672      	cpsid	i
	while (1)
 80024e6:	e7fe      	b.n	80024e6 <Error_Handler+0x2>

080024e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024e8:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024ea:	4811      	ldr	r0, [pc, #68]	; (8002530 <MX_SPI1_Init+0x48>)
 80024ec:	4c11      	ldr	r4, [pc, #68]	; (8002534 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024ee:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024f2:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80024f6:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024f8:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80024fa:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80024fe:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002500:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002502:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002506:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800250a:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800250e:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8002510:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002512:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002516:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800251a:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800251e:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002520:	f003 fa3a 	bl	8005998 <HAL_SPI_Init>
 8002524:	b900      	cbnz	r0, 8002528 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002526:	bd10      	pop	{r4, pc}
 8002528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800252c:	f7ff bfda 	b.w	80024e4 <Error_Handler>
 8002530:	20000598 	.word	0x20000598
 8002534:	40013000 	.word	0x40013000

08002538 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002538:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 800253a:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <HAL_SPI_MspInit+0x70>)
 800253c:	6801      	ldr	r1, [r0, #0]
{
 800253e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8002542:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002548:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800254c:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 800254e:	d001      	beq.n	8002554 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002550:	b008      	add	sp, #32
 8002552:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002554:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002558:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800255c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80025a0 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002560:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	4812      	ldr	r0, [pc, #72]	; (80025ac <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002564:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002568:	619a      	str	r2, [r3, #24]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002570:	9200      	str	r2, [sp, #0]
 8002572:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800257a:	615a      	str	r2, [r3, #20]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002582:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002584:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002586:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002588:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800258a:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002594:	f002 fbb2 	bl	8004cfc <HAL_GPIO_Init>
}
 8002598:	b008      	add	sp, #32
 800259a:	bd10      	pop	{r4, pc}
 800259c:	f3af 8000 	nop.w
 80025a0:	00000038 	.word	0x00000038
 80025a4:	00000002 	.word	0x00000002
 80025a8:	40013000 	.word	0x40013000
 80025ac:	48000400 	.word	0x48000400

080025b0 <updateMA702_M0>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
inline void updateMA702_M0(void){
 80025b0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80025b2:	4821      	ldr	r0, [pc, #132]	; (8002638 <updateMA702_M0+0x88>)

  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 80025b4:	4c21      	ldr	r4, [pc, #132]	; (800263c <updateMA702_M0+0x8c>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2140      	movs	r1, #64	; 0x40
 80025ba:	f002 fc8f 	bl	8004edc <HAL_GPIO_WritePin>

  ma702[1].enc_raw = hspi1.Instance->DR;
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <updateMA702_M0+0x90>)
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 80025c0:	69a1      	ldr	r1, [r4, #24]
  ma702[1].enc_raw = hspi1.Instance->DR;
 80025c2:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 80025c4:	2300      	movs	r3, #0
  ma702[1].enc_raw = hspi1.Instance->DR;
 80025c6:	68d0      	ldr	r0, [r2, #12]
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 80025c8:	6221      	str	r1, [r4, #32]
  hspi1.Instance->DR = 0;
 80025ca:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80025cc:	6893      	ldr	r3, [r2, #8]
 80025ce:	07db      	lsls	r3, r3, #31
 80025d0:	d5fc      	bpl.n	80025cc <updateMA702_M0+0x1c>
  {
  }
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80025d2:	68d2      	ldr	r2, [r2, #12]

  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <updateMA702_M0+0x94>)
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80025d6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80025da:	400a      	ands	r2, r1
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 80025dc:	fb83 1302 	smull	r1, r3, r3, r2
 80025e0:	4413      	add	r3, r2
 80025e2:	f241 5155 	movw	r1, #5461	; 0x1555
 80025e6:	131b      	asrs	r3, r3, #12
 80025e8:	fb01 2313 	mls	r3, r1, r3, r2
 80025ec:	1acb      	subs	r3, r1, r3
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f6:	eddf 7a14 	vldr	s15, [pc, #80]	; 8002648 <updateMA702_M0+0x98>
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80025fa:	61a2      	str	r2, [r4, #24]
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 80025fc:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 8002600:	61e3      	str	r3, [r4, #28]
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 8002602:	ee17 0a90 	vmov	r0, s15
 8002606:	f7fd ff9f 	bl	8000548 <__aeabi_f2d>
 800260a:	a309      	add	r3, pc, #36	; (adr r3, 8002630 <updateMA702_M0+0x80>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fd fff2 	bl	80005f8 <__aeabi_dmul>
 8002614:	f7fe fae8 	bl	8000be8 <__aeabi_d2f>
 8002618:	4603      	mov	r3, r0
 800261a:	6163      	str	r3, [r4, #20]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800261c:	4806      	ldr	r0, [pc, #24]	; (8002638 <updateMA702_M0+0x88>)
}
 800261e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8002622:	2201      	movs	r2, #1
 8002624:	2140      	movs	r1, #64	; 0x40
 8002626:	f002 bc59 	b.w	8004edc <HAL_GPIO_WritePin>
 800262a:	bf00      	nop
 800262c:	f3af 8000 	nop.w
 8002630:	54442d18 	.word	0x54442d18
 8002634:	400921fb 	.word	0x400921fb
 8002638:	48000400 	.word	0x48000400
 800263c:	200005fc 	.word	0x200005fc
 8002640:	20000598 	.word	0x20000598
 8002644:	c003000d 	.word	0xc003000d
 8002648:	39c00300 	.word	0x39c00300
 800264c:	00000000 	.word	0x00000000

08002650 <updateMA702_M1>:


inline void updateMA702_M1(void)
{
 8002650:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002652:	4821      	ldr	r0, [pc, #132]	; (80026d8 <updateMA702_M1+0x88>)

  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8002654:	4c21      	ldr	r4, [pc, #132]	; (80026dc <updateMA702_M1+0x8c>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002656:	2200      	movs	r2, #0
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	f002 fc3f 	bl	8004edc <HAL_GPIO_WritePin>

  ma702[0].enc_raw = hspi1.Instance->DR;
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <updateMA702_M1+0x90>)
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8002660:	6861      	ldr	r1, [r4, #4]
  ma702[0].enc_raw = hspi1.Instance->DR;
 8002662:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 8002664:	2300      	movs	r3, #0
  ma702[0].enc_raw = hspi1.Instance->DR;
 8002666:	68d0      	ldr	r0, [r2, #12]
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8002668:	60e1      	str	r1, [r4, #12]
  hspi1.Instance->DR = 0;
 800266a:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800266c:	6893      	ldr	r3, [r2, #8]
 800266e:	07db      	lsls	r3, r3, #31
 8002670:	d5fc      	bpl.n	800266c <updateMA702_M1+0x1c>
  {
  }
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8002672:	68d2      	ldr	r2, [r2, #12]

  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 8002674:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <updateMA702_M1+0x94>)
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8002676:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 800267a:	400a      	ands	r2, r1
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 800267c:	fb83 1302 	smull	r1, r3, r3, r2
 8002680:	4413      	add	r3, r2
 8002682:	f241 5155 	movw	r1, #5461	; 0x1555
 8002686:	131b      	asrs	r3, r3, #12
 8002688:	fb01 2313 	mls	r3, r1, r3, r2
 800268c:	1acb      	subs	r3, r1, r3
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002696:	eddf 7a14 	vldr	s15, [pc, #80]	; 80026e8 <updateMA702_M1+0x98>
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 800269a:	6062      	str	r2, [r4, #4]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 800269c:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 80026a0:	60a3      	str	r3, [r4, #8]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 80026a2:	ee17 0a90 	vmov	r0, s15
 80026a6:	f7fd ff4f 	bl	8000548 <__aeabi_f2d>
 80026aa:	a309      	add	r3, pc, #36	; (adr r3, 80026d0 <updateMA702_M1+0x80>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd ffa2 	bl	80005f8 <__aeabi_dmul>
 80026b4:	f7fe fa98 	bl	8000be8 <__aeabi_d2f>
 80026b8:	4603      	mov	r3, r0
 80026ba:	6023      	str	r3, [r4, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80026bc:	4806      	ldr	r0, [pc, #24]	; (80026d8 <updateMA702_M1+0x88>)
}
 80026be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80026c2:	2201      	movs	r2, #1
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	f002 bc09 	b.w	8004edc <HAL_GPIO_WritePin>
 80026ca:	bf00      	nop
 80026cc:	f3af 8000 	nop.w
 80026d0:	54442d18 	.word	0x54442d18
 80026d4:	400921fb 	.word	0x400921fb
 80026d8:	48000400 	.word	0x48000400
 80026dc:	200005fc 	.word	0x200005fc
 80026e0:	20000598 	.word	0x20000598
 80026e4:	c003000d 	.word	0xc003000d
 80026e8:	39c00300 	.word	0x39c00300

080026ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_MspInit+0x2c>)
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	619a      	str	r2, [r3, #24]
 80026f6:	699a      	ldr	r2, [r3, #24]
{
 80026f8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	f002 0201 	and.w	r2, r2, #1
 80026fe:	9200      	str	r2, [sp, #0]
 8002700:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	69da      	ldr	r2, [r3, #28]
 8002704:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002708:	61da      	str	r2, [r3, #28]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002714:	b002      	add	sp, #8
 8002716:	4770      	bx	lr
 8002718:	40021000 	.word	0x40021000

0800271c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800271c:	e7fe      	b.n	800271c <NMI_Handler>
 800271e:	bf00      	nop

08002720 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <HardFault_Handler>
 8002722:	bf00      	nop

08002724 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <MemManage_Handler>
 8002726:	bf00      	nop

08002728 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <BusFault_Handler>
 800272a:	bf00      	nop

0800272c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800272c:	e7fe      	b.n	800272c <UsageFault_Handler>
 800272e:	bf00      	nop

08002730 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop

08002734 <DebugMon_Handler>:
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop

08002738 <PendSV_Handler>:
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop

0800273c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273c:	f000 bcb2 	b.w	80030a4 <HAL_IncTick>

08002740 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002740:	4801      	ldr	r0, [pc, #4]	; (8002748 <DMA1_Channel4_IRQHandler+0x8>)
 8002742:	f002 b901 	b.w	8004948 <HAL_DMA_IRQHandler>
 8002746:	bf00      	nop
 8002748:	200016c0 	.word	0x200016c0

0800274c <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800274c:	4801      	ldr	r0, [pc, #4]	; (8002754 <USB_HP_CAN_TX_IRQHandler+0x8>)
 800274e:	f001 be8f 	b.w	8004470 <HAL_CAN_IRQHandler>
 8002752:	bf00      	nop
 8002754:	20000308 	.word	0x20000308

08002758 <USB_LP_CAN_RX0_IRQHandler>:
 8002758:	4801      	ldr	r0, [pc, #4]	; (8002760 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 800275a:	f001 be89 	b.w	8004470 <HAL_CAN_IRQHandler>
 800275e:	bf00      	nop
 8002760:	20000308 	.word	0x20000308

08002764 <CAN_RX1_IRQHandler>:
 8002764:	4801      	ldr	r0, [pc, #4]	; (800276c <CAN_RX1_IRQHandler+0x8>)
 8002766:	f001 be83 	b.w	8004470 <HAL_CAN_IRQHandler>
 800276a:	bf00      	nop
 800276c:	20000308 	.word	0x20000308

08002770 <CAN_SCE_IRQHandler>:
 8002770:	4801      	ldr	r0, [pc, #4]	; (8002778 <CAN_SCE_IRQHandler+0x8>)
 8002772:	f001 be7d 	b.w	8004470 <HAL_CAN_IRQHandler>
 8002776:	bf00      	nop
 8002778:	20000308 	.word	0x20000308

0800277c <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800277c:	4801      	ldr	r0, [pc, #4]	; (8002784 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800277e:	f003 bbe1 	b.w	8005f44 <HAL_TIM_IRQHandler>
 8002782:	bf00      	nop
 8002784:	20000628 	.word	0x20000628

08002788 <TIM1_CC_IRQHandler>:
 8002788:	4801      	ldr	r0, [pc, #4]	; (8002790 <TIM1_CC_IRQHandler+0x8>)
 800278a:	f003 bbdb 	b.w	8005f44 <HAL_TIM_IRQHandler>
 800278e:	bf00      	nop
 8002790:	20000628 	.word	0x20000628

08002794 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002794:	4801      	ldr	r0, [pc, #4]	; (800279c <USART1_IRQHandler+0x8>)
 8002796:	f004 b89d 	b.w	80068d4 <HAL_UART_IRQHandler>
 800279a:	bf00      	nop
 800279c:	20001704 	.word	0x20001704

080027a0 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <TIM8_UP_IRQHandler+0x8>)
 80027a2:	f003 bbcf 	b.w	8005f44 <HAL_TIM_IRQHandler>
 80027a6:	bf00      	nop
 80027a8:	20000674 	.word	0x20000674

080027ac <TIM8_CC_IRQHandler>:
 80027ac:	4801      	ldr	r0, [pc, #4]	; (80027b4 <TIM8_CC_IRQHandler+0x8>)
 80027ae:	f003 bbc9 	b.w	8005f44 <HAL_TIM_IRQHandler>
 80027b2:	bf00      	nop
 80027b4:	20000674 	.word	0x20000674

080027b8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80027b8:	2001      	movs	r0, #1
 80027ba:	4770      	bx	lr

080027bc <_kill>:

int _kill(int pid, int sig)
{
 80027bc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80027be:	f005 fd29 	bl	8008214 <__errno>
 80027c2:	2316      	movs	r3, #22
 80027c4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80027c6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ca:	bd08      	pop	{r3, pc}

080027cc <_exit>:

void _exit (int status)
{
 80027cc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80027ce:	f005 fd21 	bl	8008214 <__errno>
 80027d2:	2316      	movs	r3, #22
 80027d4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80027d6:	e7fe      	b.n	80027d6 <_exit+0xa>

080027d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027da:	1e16      	subs	r6, r2, #0
 80027dc:	dd07      	ble.n	80027ee <_read+0x16>
 80027de:	460c      	mov	r4, r1
 80027e0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80027e2:	f3af 8000 	nop.w
 80027e6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	42a5      	cmp	r5, r4
 80027ec:	d1f9      	bne.n	80027e2 <_read+0xa>
	}

return len;
}
 80027ee:	4630      	mov	r0, r6
 80027f0:	bd70      	pop	{r4, r5, r6, pc}
 80027f2:	bf00      	nop

080027f4 <_close>:
}

int _close(int file)
{
	return -1;
}
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop

080027fc <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80027fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002800:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002802:	2000      	movs	r0, #0
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop

08002808 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002808:	2001      	movs	r0, #1
 800280a:	4770      	bx	lr

0800280c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800280c:	2000      	movs	r0, #0
 800280e:	4770      	bx	lr

08002810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002810:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002812:	4c0c      	ldr	r4, [pc, #48]	; (8002844 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <_sbrk+0x38>)
 8002816:	490d      	ldr	r1, [pc, #52]	; (800284c <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8002818:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800281a:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 800281c:	b12a      	cbz	r2, 800282a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281e:	4410      	add	r0, r2
 8002820:	4288      	cmp	r0, r1
 8002822:	d807      	bhi.n	8002834 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002824:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8002826:	4610      	mov	r0, r2
 8002828:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <_sbrk+0x40>)
 800282c:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800282e:	4410      	add	r0, r2
 8002830:	4288      	cmp	r0, r1
 8002832:	d9f7      	bls.n	8002824 <_sbrk+0x14>
    errno = ENOMEM;
 8002834:	f005 fcee 	bl	8008214 <__errno>
 8002838:	230c      	movs	r3, #12
    return (void *)-1;
 800283a:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 800283e:	6003      	str	r3, [r0, #0]
}
 8002840:	4610      	mov	r0, r2
 8002842:	bd10      	pop	{r4, pc}
 8002844:	20000624 	.word	0x20000624
 8002848:	20008000 	.word	0x20008000
 800284c:	00000400 	.word	0x00000400
 8002850:	200017c0 	.word	0x200017c0

08002854 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002854:	4a03      	ldr	r2, [pc, #12]	; (8002864 <SystemInit+0x10>)
 8002856:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800285a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800285e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002862:	4770      	bx	lr
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002868:	b500      	push	{lr}

  if(tim_pwmHandle->Instance==TIM1)
 800286a:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_TIM_PWM_MspInit+0x8c>)
 800286c:	6803      	ldr	r3, [r0, #0]
 800286e:	4293      	cmp	r3, r2
{
 8002870:	b083      	sub	sp, #12
  if(tim_pwmHandle->Instance==TIM1)
 8002872:	d005      	beq.n	8002880 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM8)
 8002874:	4a20      	ldr	r2, [pc, #128]	; (80028f8 <HAL_TIM_PWM_MspInit+0x90>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01f      	beq.n	80028ba <HAL_TIM_PWM_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800287a:	b003      	add	sp, #12
 800287c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <HAL_TIM_PWM_MspInit+0x94>)
 8002882:	6998      	ldr	r0, [r3, #24]
 8002884:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8002888:	6198      	str	r0, [r3, #24]
 800288a:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800288e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002892:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002894:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002896:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002898:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800289a:	f001 ff25 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800289e:	2019      	movs	r0, #25
 80028a0:	f001 ff60 	bl	8004764 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	201b      	movs	r0, #27
 80028a8:	4611      	mov	r1, r2
 80028aa:	f001 ff1d 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80028ae:	201b      	movs	r0, #27
}
 80028b0:	b003      	add	sp, #12
 80028b2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80028b6:	f001 bf55 	b.w	8004764 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <HAL_TIM_PWM_MspInit+0x94>)
 80028bc:	6998      	ldr	r0, [r3, #24]
 80028be:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80028c2:	6198      	str	r0, [r3, #24]
 80028c4:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80028cc:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028ce:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80028d0:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028d2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80028d4:	f001 ff08 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80028d8:	202c      	movs	r0, #44	; 0x2c
 80028da:	f001 ff43 	bl	8004764 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	202e      	movs	r0, #46	; 0x2e
 80028e2:	4611      	mov	r1, r2
 80028e4:	f001 ff00 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80028e8:	202e      	movs	r0, #46	; 0x2e
}
 80028ea:	b003      	add	sp, #12
 80028ec:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80028f0:	f001 bf38 	b.w	8004764 <HAL_NVIC_EnableIRQ>
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40013400 	.word	0x40013400
 80028fc:	40021000 	.word	0x40021000

08002900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002900:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8002902:	6802      	ldr	r2, [r0, #0]
 8002904:	492e      	ldr	r1, [pc, #184]	; (80029c0 <HAL_TIM_MspPostInit+0xc0>)
{
 8002906:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 800290a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002910:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002914:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8002916:	d004      	beq.n	8002922 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8002918:	4b2a      	ldr	r3, [pc, #168]	; (80029c4 <HAL_TIM_MspPostInit+0xc4>)
 800291a:	429a      	cmp	r2, r3
 800291c:	d032      	beq.n	8002984 <HAL_TIM_MspPostInit+0x84>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800291e:	b00a      	add	sp, #40	; 0x28
 8002920:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002926:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800292a:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002932:	615a      	str	r2, [r3, #20]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800293a:	9201      	str	r2, [sp, #4]
 800293c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002944:	615a      	str	r2, [r3, #20]
 8002946:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002948:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800294e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002950:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002952:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8002956:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800295c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002960:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	f002 f9cb 	bl	8004cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002966:	2203      	movs	r2, #3
 8002968:	2302      	movs	r3, #2
 800296a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296e:	4816      	ldr	r0, [pc, #88]	; (80029c8 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002970:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002972:	2200      	movs	r2, #0
 8002974:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002976:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002978:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297c:	f002 f9be 	bl	8004cfc <HAL_GPIO_Init>
}
 8002980:	b00a      	add	sp, #40	; 0x28
 8002982:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002984:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8002988:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80029b8 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800298c:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298e:	480f      	ldr	r0, [pc, #60]	; (80029cc <HAL_TIM_MspPostInit+0xcc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002990:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002994:	615a      	str	r2, [r3, #20]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80029a0:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 80029a2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a6:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80029a8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f002 f9a7 	bl	8004cfc <HAL_GPIO_Init>
}
 80029ae:	b00a      	add	sp, #40	; 0x28
 80029b0:	bd10      	pop	{r4, pc}
 80029b2:	bf00      	nop
 80029b4:	f3af 8000 	nop.w
 80029b8:	00001dc0 	.word	0x00001dc0
 80029bc:	00000002 	.word	0x00000002
 80029c0:	40012c00 	.word	0x40012c00
 80029c4:	40013400 	.word	0x40013400
 80029c8:	48000400 	.word	0x48000400
 80029cc:	48000800 	.word	0x48000800

080029d0 <MX_TIM1_Init>:
{
 80029d0:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029d2:	2400      	movs	r4, #0
{
 80029d4:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029d6:	222c      	movs	r2, #44	; 0x2c
 80029d8:	4621      	mov	r1, r4
 80029da:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029e0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80029e4:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80029e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ec:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029ee:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029f0:	f005 fc48 	bl	8008284 <memset>
  htim1.Instance = TIM1;
 80029f4:	483e      	ldr	r0, [pc, #248]	; (8002af0 <MX_TIM1_Init+0x120>)
  htim1.Init.Prescaler = 1;
 80029f6:	4a3f      	ldr	r2, [pc, #252]	; (8002af4 <MX_TIM1_Init+0x124>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f8:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 2400;
 8002a00:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002a04:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8002a08:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a0c:	f003 f910 	bl	8005c30 <HAL_TIM_PWM_Init>
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d148      	bne.n	8002aa6 <MX_TIM1_Init+0xd6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002a14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a18:	2270      	movs	r2, #112	; 0x70
 8002a1a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a1e:	4834      	ldr	r0, [pc, #208]	; (8002af0 <MX_TIM1_Init+0x120>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002a20:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a22:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002a24:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a26:	f003 fd63 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	d14e      	bne.n	8002acc <MX_TIM1_Init+0xfc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2e:	2060      	movs	r0, #96	; 0x60
 8002a30:	2100      	movs	r1, #0
 8002a32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002a36:	2000      	movs	r0, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002a3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a42:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a44:	482a      	ldr	r0, [pc, #168]	; (8002af0 <MX_TIM1_Init+0x120>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a46:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a48:	a904      	add	r1, sp, #16
 8002a4a:	f003 fb73 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d139      	bne.n	8002ac6 <MX_TIM1_Init+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a52:	4827      	ldr	r0, [pc, #156]	; (8002af0 <MX_TIM1_Init+0x120>)
 8002a54:	2204      	movs	r2, #4
 8002a56:	a904      	add	r1, sp, #16
 8002a58:	f003 fb6c 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002a5c:	bb80      	cbnz	r0, 8002ac0 <MX_TIM1_Init+0xf0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a5e:	4824      	ldr	r0, [pc, #144]	; (8002af0 <MX_TIM1_Init+0x120>)
 8002a60:	2208      	movs	r2, #8
 8002a62:	a904      	add	r1, sp, #16
 8002a64:	f003 fb66 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002a68:	bb38      	cbnz	r0, 8002aba <MX_TIM1_Init+0xea>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a6a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002ad8 <MX_TIM1_Init+0x108>
 8002a6e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002a72:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002ae0 <MX_TIM1_Init+0x110>
 8002a76:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002a7a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002ae8 <MX_TIM1_Init+0x118>
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a82:	2400      	movs	r4, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a84:	481a      	ldr	r0, [pc, #104]	; (8002af0 <MX_TIM1_Init+0x120>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a86:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a88:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002a8e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002a92:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a96:	f003 fd71 	bl	800657c <HAL_TIMEx_ConfigBreakDeadTime>
 8002a9a:	b938      	cbnz	r0, 8002aac <MX_TIM1_Init+0xdc>
  HAL_TIM_MspPostInit(&htim1);
 8002a9c:	4814      	ldr	r0, [pc, #80]	; (8002af0 <MX_TIM1_Init+0x120>)
 8002a9e:	f7ff ff2f 	bl	8002900 <HAL_TIM_MspPostInit>
}
 8002aa2:	b018      	add	sp, #96	; 0x60
 8002aa4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002aa6:	f7ff fd1d 	bl	80024e4 <Error_Handler>
 8002aaa:	e7b3      	b.n	8002a14 <MX_TIM1_Init+0x44>
    Error_Handler();
 8002aac:	f7ff fd1a 	bl	80024e4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8002ab0:	480f      	ldr	r0, [pc, #60]	; (8002af0 <MX_TIM1_Init+0x120>)
 8002ab2:	f7ff ff25 	bl	8002900 <HAL_TIM_MspPostInit>
}
 8002ab6:	b018      	add	sp, #96	; 0x60
 8002ab8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002aba:	f7ff fd13 	bl	80024e4 <Error_Handler>
 8002abe:	e7d4      	b.n	8002a6a <MX_TIM1_Init+0x9a>
    Error_Handler();
 8002ac0:	f7ff fd10 	bl	80024e4 <Error_Handler>
 8002ac4:	e7cb      	b.n	8002a5e <MX_TIM1_Init+0x8e>
    Error_Handler();
 8002ac6:	f7ff fd0d 	bl	80024e4 <Error_Handler>
 8002aca:	e7c2      	b.n	8002a52 <MX_TIM1_Init+0x82>
    Error_Handler();
 8002acc:	f7ff fd0a 	bl	80024e4 <Error_Handler>
 8002ad0:	e7ad      	b.n	8002a2e <MX_TIM1_Init+0x5e>
 8002ad2:	bf00      	nop
 8002ad4:	f3af 8000 	nop.w
 8002ad8:	00000000 	.word	0x00000000
 8002adc:	0000000a 	.word	0x0000000a
 8002ae0:	00000000 	.word	0x00000000
 8002ae4:	00002000 	.word	0x00002000
 8002ae8:	02000000 	.word	0x02000000
 8002aec:	00000000 	.word	0x00000000
 8002af0:	20000628 	.word	0x20000628
 8002af4:	40012c00 	.word	0x40012c00

08002af8 <MX_TIM8_Init>:
{
 8002af8:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002afa:	2400      	movs	r4, #0
{
 8002afc:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002afe:	222c      	movs	r2, #44	; 0x2c
 8002b00:	4621      	mov	r1, r4
 8002b02:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b04:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b08:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002b0c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002b10:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b14:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b16:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b18:	f005 fbb4 	bl	8008284 <memset>
  htim8.Instance = TIM8;
 8002b1c:	4842      	ldr	r0, [pc, #264]	; (8002c28 <MX_TIM8_Init+0x130>)
  htim8.Init.Prescaler = 1;
 8002b1e:	4a43      	ldr	r2, [pc, #268]	; (8002c2c <MX_TIM8_Init+0x134>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b20:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 2400;
 8002b28:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8002b2c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 8002b30:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002b34:	f003 f87c 	bl	8005c30 <HAL_TIM_PWM_Init>
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d14a      	bne.n	8002bd2 <MX_TIM8_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002b3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b40:	2270      	movs	r2, #112	; 0x70
 8002b42:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b46:	4838      	ldr	r0, [pc, #224]	; (8002c28 <MX_TIM8_Init+0x130>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002b48:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b4a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002b4c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b4e:	f003 fccf 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d150      	bne.n	8002bf8 <MX_TIM8_Init+0x100>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b56:	2060      	movs	r0, #96	; 0x60
 8002b58:	2100      	movs	r1, #0
 8002b5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002b5e:	2000      	movs	r0, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002b66:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b6a:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b6c:	482e      	ldr	r0, [pc, #184]	; (8002c28 <MX_TIM8_Init+0x130>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b6e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b70:	a904      	add	r1, sp, #16
 8002b72:	f003 fadf 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d13b      	bne.n	8002bf2 <MX_TIM8_Init+0xfa>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b7a:	482b      	ldr	r0, [pc, #172]	; (8002c28 <MX_TIM8_Init+0x130>)
 8002b7c:	2204      	movs	r2, #4
 8002b7e:	a904      	add	r1, sp, #16
 8002b80:	f003 fad8 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002b84:	bb90      	cbnz	r0, 8002bec <MX_TIM8_Init+0xf4>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b86:	4828      	ldr	r0, [pc, #160]	; (8002c28 <MX_TIM8_Init+0x130>)
 8002b88:	2208      	movs	r2, #8
 8002b8a:	a904      	add	r1, sp, #16
 8002b8c:	f003 fad2 	bl	8006134 <HAL_TIM_PWM_ConfigChannel>
 8002b90:	bb48      	cbnz	r0, 8002be6 <MX_TIM8_Init+0xee>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b92:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002c00 <MX_TIM8_Init+0x108>
 8002b96:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002b9a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002c08 <MX_TIM8_Init+0x110>
 8002b9e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002ba2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002c10 <MX_TIM8_Init+0x118>
 8002ba6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002baa:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002c18 <MX_TIM8_Init+0x120>
 8002bae:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002bb2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002c20 <MX_TIM8_Init+0x128>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bb6:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002bb8:	481b      	ldr	r0, [pc, #108]	; (8002c28 <MX_TIM8_Init+0x130>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bba:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002bbc:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bbe:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002bc2:	f003 fcdb 	bl	800657c <HAL_TIMEx_ConfigBreakDeadTime>
 8002bc6:	b938      	cbnz	r0, 8002bd8 <MX_TIM8_Init+0xe0>
  HAL_TIM_MspPostInit(&htim8);
 8002bc8:	4817      	ldr	r0, [pc, #92]	; (8002c28 <MX_TIM8_Init+0x130>)
 8002bca:	f7ff fe99 	bl	8002900 <HAL_TIM_MspPostInit>
}
 8002bce:	b018      	add	sp, #96	; 0x60
 8002bd0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002bd2:	f7ff fc87 	bl	80024e4 <Error_Handler>
 8002bd6:	e7b1      	b.n	8002b3c <MX_TIM8_Init+0x44>
    Error_Handler();
 8002bd8:	f7ff fc84 	bl	80024e4 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8002bdc:	4812      	ldr	r0, [pc, #72]	; (8002c28 <MX_TIM8_Init+0x130>)
 8002bde:	f7ff fe8f 	bl	8002900 <HAL_TIM_MspPostInit>
}
 8002be2:	b018      	add	sp, #96	; 0x60
 8002be4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002be6:	f7ff fc7d 	bl	80024e4 <Error_Handler>
 8002bea:	e7d2      	b.n	8002b92 <MX_TIM8_Init+0x9a>
    Error_Handler();
 8002bec:	f7ff fc7a 	bl	80024e4 <Error_Handler>
 8002bf0:	e7c9      	b.n	8002b86 <MX_TIM8_Init+0x8e>
    Error_Handler();
 8002bf2:	f7ff fc77 	bl	80024e4 <Error_Handler>
 8002bf6:	e7c0      	b.n	8002b7a <MX_TIM8_Init+0x82>
    Error_Handler();
 8002bf8:	f7ff fc74 	bl	80024e4 <Error_Handler>
 8002bfc:	e7ab      	b.n	8002b56 <MX_TIM8_Init+0x5e>
 8002bfe:	bf00      	nop
	...
 8002c0c:	0000000a 	.word	0x0000000a
 8002c10:	00000000 	.word	0x00000000
 8002c14:	00002000 	.word	0x00002000
 8002c18:	00000004 	.word	0x00000004
 8002c1c:	00000000 	.word	0x00000000
 8002c20:	02000000 	.word	0x02000000
 8002c24:	00000004 	.word	0x00000004
 8002c28:	20000674 	.word	0x20000674
 8002c2c:	40013400 	.word	0x40013400

08002c30 <initFirstSin>:
}

/* USER CODE BEGIN 1 */
float rad_to_sin_cnv_array[1024] = {0};
inline void initFirstSin(void)
{
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < 1024; i++)
  {
    float temp_rad = (float)i / 256 * M_PI * 2;
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8002c32:	4d19      	ldr	r5, [pc, #100]	; (8002c98 <initFirstSin+0x68>)
 8002c34:	2300      	movs	r3, #0
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002c36:	a716      	add	r7, pc, #88	; (adr r7, 8002c90 <initFirstSin+0x60>)
 8002c38:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8002c3c:	ed2d 8b02 	vpush	{d8}
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8002c40:	f845 3b04 	str.w	r3, [r5], #4
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002c44:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8002c9c <initFirstSin+0x6c>
  for (int i = 0; i < 1024; i++)
 8002c48:	2401      	movs	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002c4a:	ee07 4a90 	vmov	s15, r4
 8002c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 1024; i++)
 8002c52:	3401      	adds	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002c54:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002c58:	ee17 0a90 	vmov	r0, s15
 8002c5c:	f7fd fc74 	bl	8000548 <__aeabi_f2d>
 8002c60:	4632      	mov	r2, r6
 8002c62:	463b      	mov	r3, r7
 8002c64:	f7fd fcc8 	bl	80005f8 <__aeabi_dmul>
 8002c68:	f7fd ffbe 	bl	8000be8 <__aeabi_d2f>
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8002c6c:	f7fd fc6c 	bl	8000548 <__aeabi_f2d>
 8002c70:	ec41 0b10 	vmov	d0, r0, r1
 8002c74:	f004 fa84 	bl	8007180 <sin>
 8002c78:	ec51 0b10 	vmov	r0, r1, d0
 8002c7c:	f7fd ffb4 	bl	8000be8 <__aeabi_d2f>
  for (int i = 0; i < 1024; i++)
 8002c80:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8002c84:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < 1024; i++)
 8002c88:	d1df      	bne.n	8002c4a <initFirstSin+0x1a>
    // printf("rad %4.3f sin %4.3f\n",temp_rad,rad_to_sin_cnv_array[i]);
    // HAL_Delay(1);
  }
}
 8002c8a:	ecbd 8b02 	vpop	{d8}
 8002c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c90:	54442d18 	.word	0x54442d18
 8002c94:	401921fb 	.word	0x401921fb
 8002c98:	200006c0 	.word	0x200006c0
 8002c9c:	3b800000 	.word	0x3b800000

08002ca0 <setOutputRadianM0>:
inline void setOutputRadianM0(float out_rad, float output_voltage, float battery_voltage)
{
  int voltage_propotional_cnt;
  const int pwm_cnt_centor = TIM_PWM_CENTOR;

  if (battery_voltage < BATTERY_VOLTAGE_BOTTOM)
 8002ca0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8002ca4:	eeb4 1ae7 	vcmpe.f32	s2, s15
{
 8002ca8:	b508      	push	{r3, lr}
 8002caa:	eef0 0ae0 	vabs.f32	s1, s1
  }
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > OUTPUT_VOLTAGE_LIMIT)
 8002cae:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb6:	eef4 0ac7 	vcmpe.f32	s1, s14
 8002cba:	bfb8      	it	lt
 8002cbc:	eeb0 1a67 	vmovlt.f32	s2, s15
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    output_voltage = 0;
 8002cc4:	bfc8      	it	gt
 8002cc6:	eddf 0a26 	vldrgt	s1, [pc, #152]	; 8002d60 <setOutputRadianM0+0xc0>
{
 8002cca:	ed2d 8b02 	vpush	{d8}
  }
  voltage_propotional_cnt = output_voltage / battery_voltage * pwm_cnt_centor;
 8002cce:	ee80 8a81 	vdiv.f32	s16, s1, s2
{
 8002cd2:	ee10 0a10 	vmov	r0, s0

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8002cd6:	f7fd fc37 	bl	8000548 <__aeabi_f2d>
 8002cda:	a31d      	add	r3, pc, #116	; (adr r3, 8002d50 <setOutputRadianM0+0xb0>)
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	f7fd fad4 	bl	800028c <__adddf3>
 8002ce4:	a31c      	add	r3, pc, #112	; (adr r3, 8002d58 <setOutputRadianM0+0xb8>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fc85 	bl	80005f8 <__aeabi_dmul>
  voltage_propotional_cnt = output_voltage / battery_voltage * pwm_cnt_centor;
 8002cee:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8002d64 <setOutputRadianM0+0xc4>
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8002cf2:	f7fd ff59 	bl	8000ba8 <__aeabi_d2uiz>
  voltage_propotional_cnt = output_voltage / battery_voltage * pwm_cnt_centor;
 8002cf6:	ee28 8a28 	vmul.f32	s16, s16, s17
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <setOutputRadianM0+0xc8>)
  voltage_propotional_cnt = output_voltage / battery_voltage * pwm_cnt_centor;
 8002cfc:	eebd 8ac8 	vcvt.s32.f32	s16, s16
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002d00:	b2c0      	uxtb	r0, r0
 8002d02:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8002d06:	edd1 7a00 	vldr	s15, [r1]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002d0a:	ed91 6a55 	vldr	s12, [r1, #340]	; 0x154
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002d0e:	edd1 6aaa 	vldr	s13, [r1, #680]	; 0x2a8
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <setOutputRadianM0+0xcc>)
 8002d14:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002d18:	eeb0 7a68 	vmov.f32	s14, s17
 8002d1c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8002d20:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002d22:	eef0 7a68 	vmov.f32	s15, s17
 8002d26:	eee8 7a06 	vfma.f32	s15, s16, s12
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002d2a:	eee8 8a26 	vfma.f32	s17, s16, s13
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002d2e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002d32:	eefc 8ae8 	vcvt.u32.f32	s17, s17
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002d3a:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002d3e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002d42:	edc3 8a0f 	vstr	s17, [r3, #60]	; 0x3c
}
 8002d46:	ecbd 8b02 	vpop	{d8}
 8002d4a:	bd08      	pop	{r3, pc}
 8002d4c:	f3af 8000 	nop.w
 8002d50:	54442d18 	.word	0x54442d18
 8002d54:	402921fb 	.word	0x402921fb
 8002d58:	3d5bfeba 	.word	0x3d5bfeba
 8002d5c:	40444ad1 	.word	0x40444ad1
 8002d60:	00000000 	.word	0x00000000
 8002d64:	44960000 	.word	0x44960000
 8002d68:	200006c0 	.word	0x200006c0
 8002d6c:	20000628 	.word	0x20000628

08002d70 <setOutputRadianM1>:

inline void setOutputRadianM1(float out_rad, float output_voltage, float battery_voltage)
{
  int voltage_propotional_cnt;
  const int pwm_cnt_centor = TIM_PWM_CENTOR;
  if (battery_voltage < BATTERY_VOLTAGE_BOTTOM)
 8002d70:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8002d74:	eeb4 1ae7 	vcmpe.f32	s2, s15
{
 8002d78:	b508      	push	{r3, lr}
 8002d7a:	eef0 0ae0 	vabs.f32	s1, s1
  }
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > OUTPUT_VOLTAGE_LIMIT)
 8002d7e:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d86:	eef4 0ac7 	vcmpe.f32	s1, s14
 8002d8a:	bfb8      	it	lt
 8002d8c:	eeb0 1a67 	vmovlt.f32	s2, s15
 8002d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  {
    output_voltage = 0;
 8002d94:	bfc8      	it	gt
 8002d96:	eddf 0a26 	vldrgt	s1, [pc, #152]	; 8002e30 <setOutputRadianM1+0xc0>
{
 8002d9a:	ed2d 8b02 	vpush	{d8}
  }
  voltage_propotional_cnt = output_voltage / battery_voltage * pwm_cnt_centor;
 8002d9e:	ee80 8a81 	vdiv.f32	s16, s1, s2
{
 8002da2:	ee10 0a10 	vmov	r0, s0

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8002da6:	f7fd fbcf 	bl	8000548 <__aeabi_f2d>
 8002daa:	a31d      	add	r3, pc, #116	; (adr r3, 8002e20 <setOutputRadianM1+0xb0>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f7fd fa6c 	bl	800028c <__adddf3>
 8002db4:	a31c      	add	r3, pc, #112	; (adr r3, 8002e28 <setOutputRadianM1+0xb8>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fc1d 	bl	80005f8 <__aeabi_dmul>
  voltage_propotional_cnt = output_voltage / battery_voltage * pwm_cnt_centor;
 8002dbe:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8002e34 <setOutputRadianM1+0xc4>
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8002dc2:	f7fd fef1 	bl	8000ba8 <__aeabi_d2uiz>
  voltage_propotional_cnt = output_voltage / battery_voltage * pwm_cnt_centor;
 8002dc6:	ee28 8a28 	vmul.f32	s16, s16, s17
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002dca:	4b1b      	ldr	r3, [pc, #108]	; (8002e38 <setOutputRadianM1+0xc8>)
  voltage_propotional_cnt = output_voltage / battery_voltage * pwm_cnt_centor;
 8002dcc:	eebd 8ac8 	vcvt.s32.f32	s16, s16
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002dd0:	b2c0      	uxtb	r0, r0
 8002dd2:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8002dd6:	edd1 7a00 	vldr	s15, [r1]
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002dda:	ed91 6a55 	vldr	s12, [r1, #340]	; 0x154
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002dde:	edd1 6aaa 	vldr	s13, [r1, #680]	; 0x2a8
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <setOutputRadianM1+0xcc>)
 8002de4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8002de8:	eeb0 7a68 	vmov.f32	s14, s17
 8002dec:	eea8 7a27 	vfma.f32	s14, s16, s15
 8002df0:	681b      	ldr	r3, [r3, #0]
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002df2:	eef0 7a68 	vmov.f32	s15, s17
 8002df6:	eee8 7a06 	vfma.f32	s15, s16, s12
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002dfa:	eee8 8a26 	vfma.f32	s17, s16, s13
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002dfe:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002e02:	eefc 8ae8 	vcvt.u32.f32	s17, s17
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002e0a:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002e0e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002e12:	edc3 8a0f 	vstr	s17, [r3, #60]	; 0x3c
}
 8002e16:	ecbd 8b02 	vpop	{d8}
 8002e1a:	bd08      	pop	{r3, pc}
 8002e1c:	f3af 8000 	nop.w
 8002e20:	54442d18 	.word	0x54442d18
 8002e24:	402921fb 	.word	0x402921fb
 8002e28:	3d5bfeba 	.word	0x3d5bfeba
 8002e2c:	40444ad1 	.word	0x40444ad1
 8002e30:	00000000 	.word	0x00000000
 8002e34:	44960000 	.word	0x44960000
 8002e38:	200006c0 	.word	0x200006c0
 8002e3c:	20000674 	.word	0x20000674

08002e40 <forceStop>:

void forceStop(void)
{
 8002e40:	b538      	push	{r3, r4, r5, lr}
  HAL_TIM_Base_Stop_IT(&htim1);
 8002e42:	4c25      	ldr	r4, [pc, #148]	; (8002ed8 <forceStop+0x98>)
  HAL_TIM_Base_Stop_IT(&htim8);
 8002e44:	4d25      	ldr	r5, [pc, #148]	; (8002edc <forceStop+0x9c>)
  HAL_TIM_Base_Stop_IT(&htim1);
 8002e46:	4620      	mov	r0, r4
 8002e48:	f002 feda 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim8);
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f002 fed7 	bl	8005c00 <HAL_TIM_Base_Stop_IT>

  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002e52:	2100      	movs	r1, #0
 8002e54:	4620      	mov	r0, r4
 8002e56:	f003 f805 	bl	8005e64 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8002e5a:	2104      	movs	r1, #4
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f003 f801 	bl	8005e64 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8002e62:	2108      	movs	r1, #8
 8002e64:	4620      	mov	r0, r4
 8002e66:	f002 fffd 	bl	8005e64 <HAL_TIM_PWM_Stop>

  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f002 fff9 	bl	8005e64 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8002e72:	2104      	movs	r1, #4
 8002e74:	4628      	mov	r0, r5
 8002e76:	f002 fff5 	bl	8005e64 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8002e7a:	2108      	movs	r1, #8
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f002 fff1 	bl	8005e64 <HAL_TIM_PWM_Stop>

  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8002e82:	2100      	movs	r1, #0
 8002e84:	4620      	mov	r0, r4
 8002e86:	f003 faed 	bl	8006464 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002e8a:	2104      	movs	r1, #4
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f003 fae9 	bl	8006464 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8002e92:	2108      	movs	r1, #8
 8002e94:	4620      	mov	r0, r4
 8002e96:	f003 fae5 	bl	8006464 <HAL_TIMEx_PWMN_Stop>

  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f003 fae1 	bl	8006464 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8002ea2:	2104      	movs	r1, #4
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f003 fadd 	bl	8006464 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8002eaa:	2108      	movs	r1, #8
 8002eac:	4628      	mov	r0, r5
 8002eae:	f003 fad9 	bl	8006464 <HAL_TIMEx_PWMN_Stop>

  htim8.Instance->CCR1 = 0;
 8002eb2:	6829      	ldr	r1, [r5, #0]
  htim8.Instance->CCR2 = 0;
  htim8.Instance->CCR3 = 0;
  htim1.Instance->CCR1 = 0;
 8002eb4:	6822      	ldr	r2, [r4, #0]
  htim8.Instance->CCR1 = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	634b      	str	r3, [r1, #52]	; 0x34
  htim8.Instance->CCR2 = 0;
 8002eba:	638b      	str	r3, [r1, #56]	; 0x38
  htim8.Instance->CCR3 = 0;
 8002ebc:	63cb      	str	r3, [r1, #60]	; 0x3c
  htim1.Instance->CCR1 = 0;
 8002ebe:	6353      	str	r3, [r2, #52]	; 0x34
  htim1.Instance->CCR2 = 0;
 8002ec0:	6393      	str	r3, [r2, #56]	; 0x38
  htim1.Instance->CCR3 = 0;
 8002ec2:	63d3      	str	r3, [r2, #60]	; 0x3c

  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 8002ec4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8002ec6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002eca:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 8002ecc:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8002ece:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ed2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8002ed4:	bd38      	pop	{r3, r4, r5, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000628 	.word	0x20000628
 8002edc:	20000674 	.word	0x20000674

08002ee0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ee0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee2:	480b      	ldr	r0, [pc, #44]	; (8002f10 <MX_USART1_UART_Init+0x30>)
 8002ee4:	4c0b      	ldr	r4, [pc, #44]	; (8002f14 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 8002ee6:	490c      	ldr	r1, [pc, #48]	; (8002f18 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ee8:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eea:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 8002eec:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ef4:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002efc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f00:	f004 f8d2 	bl	80070a8 <HAL_UART_Init>
 8002f04:	b900      	cbnz	r0, 8002f08 <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f06:	bd10      	pop	{r4, pc}
 8002f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002f0c:	f7ff baea 	b.w	80024e4 <Error_Handler>
 8002f10:	20001704 	.word	0x20001704
 8002f14:	40013800 	.word	0x40013800
 8002f18:	001e8480 	.word	0x001e8480

08002f1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f1c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_UART_MspInit+0xb8>)
 8002f20:	6802      	ldr	r2, [r0, #0]
{
 8002f22:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f24:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8002f26:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002f2c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002f30:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8002f32:	d001      	beq.n	8002f38 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f34:	b009      	add	sp, #36	; 0x24
 8002f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f38:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f3c:	2707      	movs	r7, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f3e:	699a      	ldr	r2, [r3, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002f40:	4e25      	ldr	r6, [pc, #148]	; (8002fd8 <HAL_UART_MspInit+0xbc>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f46:	619a      	str	r2, [r3, #24]
 8002f48:	699a      	ldr	r2, [r3, #24]
 8002f4a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002f4e:	9200      	str	r2, [sp, #0]
 8002f50:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f52:	695a      	ldr	r2, [r3, #20]
 8002f54:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002f58:	615a      	str	r2, [r3, #20]
 8002f5a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f5c:	9706      	str	r7, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f62:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f64:	2210      	movs	r2, #16
 8002f66:	2302      	movs	r3, #2
 8002f68:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f6c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f72:	481a      	ldr	r0, [pc, #104]	; (8002fdc <HAL_UART_MspInit+0xc0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f74:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f76:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f78:	f001 fec0 	bl	8004cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f84:	4815      	ldr	r0, [pc, #84]	; (8002fdc <HAL_UART_MspInit+0xc0>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f86:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f92:	f001 feb3 	bl	8004cfc <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_UART_MspInit+0xc4>)
 8002f98:	2310      	movs	r3, #16
 8002f9a:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f9e:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fa6:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002faa:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fae:	f001 fc01 	bl	80047b4 <HAL_DMA_Init>
 8002fb2:	b958      	cbnz	r0, 8002fcc <HAL_UART_MspInit+0xb0>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002fba:	66ee      	str	r6, [r5, #108]	; 0x6c
 8002fbc:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002fbe:	f001 fb93 	bl	80046e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002fc2:	2025      	movs	r0, #37	; 0x25
 8002fc4:	f001 fbce 	bl	8004764 <HAL_NVIC_EnableIRQ>
}
 8002fc8:	b009      	add	sp, #36	; 0x24
 8002fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8002fcc:	f7ff fa8a 	bl	80024e4 <Error_Handler>
 8002fd0:	e7f0      	b.n	8002fb4 <HAL_UART_MspInit+0x98>
 8002fd2:	bf00      	nop
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	200016c0 	.word	0x200016c0
 8002fdc:	48000800 	.word	0x48000800
 8002fe0:	40020044 	.word	0x40020044

08002fe4 <Reset_Handler>:
 8002fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800301c <LoopForever+0x2>
 8002fe8:	480d      	ldr	r0, [pc, #52]	; (8003020 <LoopForever+0x6>)
 8002fea:	490e      	ldr	r1, [pc, #56]	; (8003024 <LoopForever+0xa>)
 8002fec:	4a0e      	ldr	r2, [pc, #56]	; (8003028 <LoopForever+0xe>)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:
 8002ff2:	58d4      	ldr	r4, [r2, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:
 8002ff8:	18c4      	adds	r4, r0, r3
 8002ffa:	428c      	cmp	r4, r1
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
 8002ffe:	4a0b      	ldr	r2, [pc, #44]	; (800302c <LoopForever+0x12>)
 8003000:	4c0b      	ldr	r4, [pc, #44]	; (8003030 <LoopForever+0x16>)
 8003002:	2300      	movs	r3, #0
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:
 800300a:	42a2      	cmp	r2, r4
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>
 800300e:	f7ff fc21 	bl	8002854 <SystemInit>
 8003012:	f005 f905 	bl	8008220 <__libc_init_array>
 8003016:	f7fe ff87 	bl	8001f28 <main>

0800301a <LoopForever>:
 800301a:	e7fe      	b.n	800301a <LoopForever>
 800301c:	20008000 	.word	0x20008000
 8003020:	20000000 	.word	0x20000000
 8003024:	200001e0 	.word	0x200001e0
 8003028:	0800b64c 	.word	0x0800b64c
 800302c:	200001e0 	.word	0x200001e0
 8003030:	200017c0 	.word	0x200017c0

08003034 <ADC1_2_IRQHandler>:
 8003034:	e7fe      	b.n	8003034 <ADC1_2_IRQHandler>
	...

08003038 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003038:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800303a:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <HAL_InitTick+0x3c>)
 800303c:	4b0e      	ldr	r3, [pc, #56]	; (8003078 <HAL_InitTick+0x40>)
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
{
 8003042:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003044:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003048:	fbb0 f0f2 	udiv	r0, r0, r2
 800304c:	fbb3 f0f0 	udiv	r0, r3, r0
 8003050:	f001 fb96 	bl	8004780 <HAL_SYSTICK_Config>
 8003054:	b908      	cbnz	r0, 800305a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003056:	2d0f      	cmp	r5, #15
 8003058:	d901      	bls.n	800305e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800305a:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 800305c:	bd38      	pop	{r3, r4, r5, pc}
 800305e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003060:	4602      	mov	r2, r0
 8003062:	4629      	mov	r1, r5
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f001 fb3e 	bl	80046e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_InitTick+0x44>)
 800306e:	4620      	mov	r0, r4
 8003070:	601d      	str	r5, [r3, #0]
}
 8003072:	bd38      	pop	{r3, r4, r5, pc}
 8003074:	20000008 	.word	0x20000008
 8003078:	20000004 	.word	0x20000004
 800307c:	2000000c 	.word	0x2000000c

08003080 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003080:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_Init+0x20>)
{
 8003082:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003084:	6813      	ldr	r3, [r2, #0]
 8003086:	f043 0310 	orr.w	r3, r3, #16
 800308a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800308c:	2003      	movs	r0, #3
 800308e:	f001 fb19 	bl	80046c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003092:	200f      	movs	r0, #15
 8003094:	f7ff ffd0 	bl	8003038 <HAL_InitTick>
  HAL_MspInit();
 8003098:	f7ff fb28 	bl	80026ec <HAL_MspInit>
}
 800309c:	2000      	movs	r0, #0
 800309e:	bd08      	pop	{r3, pc}
 80030a0:	40022000 	.word	0x40022000

080030a4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80030a4:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <HAL_IncTick+0x10>)
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_IncTick+0x14>)
 80030a8:	6811      	ldr	r1, [r2, #0]
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	440b      	add	r3, r1
 80030ae:	6013      	str	r3, [r2, #0]
}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20001788 	.word	0x20001788
 80030b8:	20000008 	.word	0x20000008

080030bc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80030bc:	4b01      	ldr	r3, [pc, #4]	; (80030c4 <HAL_GetTick+0x8>)
 80030be:	6818      	ldr	r0, [r3, #0]
}
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	20001788 	.word	0x20001788

080030c8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80030cc:	f7ff fff6 	bl	80030bc <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80030d2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80030d4:	d002      	beq.n	80030dc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <HAL_Delay+0x20>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80030dc:	f7ff ffee 	bl	80030bc <HAL_GetTick>
 80030e0:	1b43      	subs	r3, r0, r5
 80030e2:	42a3      	cmp	r3, r4
 80030e4:	d3fa      	bcc.n	80030dc <HAL_Delay+0x14>
  {
  }
}
 80030e6:	bd38      	pop	{r3, r4, r5, pc}
 80030e8:	20000008 	.word	0x20000008

080030ec <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030ec:	6802      	ldr	r2, [r0, #0]
{
 80030ee:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030f0:	6893      	ldr	r3, [r2, #8]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d001      	beq.n	80030fe <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030fa:	2000      	movs	r0, #0
}
 80030fc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80030fe:	6811      	ldr	r1, [r2, #0]
 8003100:	07cc      	lsls	r4, r1, #31
 8003102:	d5fa      	bpl.n	80030fa <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003104:	6891      	ldr	r1, [r2, #8]
 8003106:	f001 010d 	and.w	r1, r1, #13
 800310a:	2901      	cmp	r1, #1
 800310c:	4604      	mov	r4, r0
 800310e:	d009      	beq.n	8003124 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003110:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003112:	f042 0210 	orr.w	r2, r2, #16
 8003116:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003118:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800311c:	f043 0301 	orr.w	r3, r3, #1
 8003120:	6463      	str	r3, [r4, #68]	; 0x44
}
 8003122:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8003124:	6893      	ldr	r3, [r2, #8]
 8003126:	2103      	movs	r1, #3
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	6093      	str	r3, [r2, #8]
 800312e:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8003130:	f7ff ffc4 	bl	80030bc <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003134:	6823      	ldr	r3, [r4, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 800313a:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800313c:	d403      	bmi.n	8003146 <ADC_Disable+0x5a>
 800313e:	e7dc      	b.n	80030fa <ADC_Disable+0xe>
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	07db      	lsls	r3, r3, #31
 8003144:	d5d9      	bpl.n	80030fa <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003146:	f7ff ffb9 	bl	80030bc <HAL_GetTick>
 800314a:	1b40      	subs	r0, r0, r5
 800314c:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800314e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003150:	d9f6      	bls.n	8003140 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	07d2      	lsls	r2, r2, #31
 8003156:	d5f3      	bpl.n	8003140 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800315a:	f043 0310 	orr.w	r3, r3, #16
 800315e:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003160:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8003162:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003164:	4303      	orrs	r3, r0
 8003166:	6463      	str	r3, [r4, #68]	; 0x44
}
 8003168:	bd38      	pop	{r3, r4, r5, pc}
 800316a:	bf00      	nop

0800316c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800316c:	6802      	ldr	r2, [r0, #0]
{
 800316e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003170:	6893      	ldr	r3, [r2, #8]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b01      	cmp	r3, #1
{
 8003178:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800317a:	d025      	beq.n	80031c8 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800317c:	6891      	ldr	r1, [r2, #8]
 800317e:	4b15      	ldr	r3, [pc, #84]	; (80031d4 <ADC_Enable+0x68>)
 8003180:	4219      	tst	r1, r3
 8003182:	d008      	beq.n	8003196 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003186:	f043 0310 	orr.w	r3, r3, #16
 800318a:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800318e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003190:	4303      	orrs	r3, r0
 8003192:	6463      	str	r3, [r4, #68]	; 0x44
}
 8003194:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8003196:	6893      	ldr	r3, [r2, #8]
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800319e:	f7ff ff8d 	bl	80030bc <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031a2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 80031a4:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	07d9      	lsls	r1, r3, #31
 80031aa:	d40b      	bmi.n	80031c4 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031ac:	f7ff ff86 	bl	80030bc <HAL_GetTick>
 80031b0:	1b43      	subs	r3, r0, r5
 80031b2:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031b4:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031b6:	d9f6      	bls.n	80031a6 <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	07d2      	lsls	r2, r2, #31
 80031bc:	d5e2      	bpl.n	8003184 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	07d9      	lsls	r1, r3, #31
 80031c2:	d5f3      	bpl.n	80031ac <ADC_Enable+0x40>
  return HAL_OK;
 80031c4:	2000      	movs	r0, #0
}
 80031c6:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	07d8      	lsls	r0, r3, #31
 80031cc:	d5d6      	bpl.n	800317c <ADC_Enable+0x10>
  return HAL_OK;
 80031ce:	2000      	movs	r0, #0
 80031d0:	e7f9      	b.n	80031c6 <ADC_Enable+0x5a>
 80031d2:	bf00      	nop
 80031d4:	8000003f 	.word	0x8000003f

080031d8 <HAL_ADC_Init>:
{
 80031d8:	b530      	push	{r4, r5, lr}
 80031da:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80031e0:	2800      	cmp	r0, #0
 80031e2:	f000 809c 	beq.w	800331e <HAL_ADC_Init+0x146>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031e8:	f013 0310 	ands.w	r3, r3, #16
 80031ec:	4604      	mov	r4, r0
 80031ee:	d118      	bne.n	8003222 <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80031f0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80031f2:	2d00      	cmp	r5, #0
 80031f4:	f000 8096 	beq.w	8003324 <HAL_ADC_Init+0x14c>
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80031f8:	6822      	ldr	r2, [r4, #0]
 80031fa:	6891      	ldr	r1, [r2, #8]
 80031fc:	00c9      	lsls	r1, r1, #3
 80031fe:	f140 8082 	bpl.w	8003306 <HAL_ADC_Init+0x12e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003202:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003204:	008d      	lsls	r5, r1, #2
 8003206:	d47e      	bmi.n	8003306 <HAL_ADC_Init+0x12e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003208:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800320a:	06c8      	lsls	r0, r1, #27
 800320c:	d400      	bmi.n	8003210 <HAL_ADC_Init+0x38>
 800320e:	b163      	cbz	r3, 800322a <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 8003210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003212:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 8003216:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8003218:	f043 0310 	orr.w	r3, r3, #16
 800321c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800321e:	b003      	add	sp, #12
 8003220:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003222:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003224:	06da      	lsls	r2, r3, #27
 8003226:	d4f3      	bmi.n	8003210 <HAL_ADC_Init+0x38>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003228:	6802      	ldr	r2, [r0, #0]
 800322a:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800322c:	f010 0004 	ands.w	r0, r0, #4
 8003230:	d1ee      	bne.n	8003210 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 8003232:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003234:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003238:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800323c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8003240:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003242:	f000 80d9 	beq.w	80033f8 <HAL_ADC_Init+0x220>
 8003246:	4b7d      	ldr	r3, [pc, #500]	; (800343c <HAL_ADC_Init+0x264>)
 8003248:	429a      	cmp	r2, r3
 800324a:	f000 80dd 	beq.w	8003408 <HAL_ADC_Init+0x230>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800324e:	497c      	ldr	r1, [pc, #496]	; (8003440 <HAL_ADC_Init+0x268>)
 8003250:	428a      	cmp	r2, r1
 8003252:	d074      	beq.n	800333e <HAL_ADC_Init+0x166>
 8003254:	4b7b      	ldr	r3, [pc, #492]	; (8003444 <HAL_ADC_Init+0x26c>)
 8003256:	429a      	cmp	r2, r3
 8003258:	d072      	beq.n	8003340 <HAL_ADC_Init+0x168>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800325a:	6893      	ldr	r3, [r2, #8]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b01      	cmp	r3, #1
 8003262:	f000 80e3 	beq.w	800342c <HAL_ADC_Init+0x254>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003266:	4d78      	ldr	r5, [pc, #480]	; (8003448 <HAL_ADC_Init+0x270>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003268:	68ab      	ldr	r3, [r5, #8]
 800326a:	6861      	ldr	r1, [r4, #4]
 800326c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003270:	430b      	orrs	r3, r1
 8003272:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003276:	68e1      	ldr	r1, [r4, #12]
 8003278:	7e65      	ldrb	r5, [r4, #25]
 800327a:	2b01      	cmp	r3, #1
 800327c:	68a3      	ldr	r3, [r4, #8]
 800327e:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003282:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003286:	bf18      	it	ne
 8003288:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800328c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003290:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003292:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003296:	f000 8093 	beq.w	80033c0 <HAL_ADC_Init+0x1e8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800329a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800329c:	2901      	cmp	r1, #1
 800329e:	d00b      	beq.n	80032b8 <HAL_ADC_Init+0xe0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80032a0:	4867      	ldr	r0, [pc, #412]	; (8003440 <HAL_ADC_Init+0x268>)
 80032a2:	4282      	cmp	r2, r0
 80032a4:	f000 809c 	beq.w	80033e0 <HAL_ADC_Init+0x208>
 80032a8:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80032ac:	4282      	cmp	r2, r0
 80032ae:	f000 8097 	beq.w	80033e0 <HAL_ADC_Init+0x208>
 80032b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80032b4:	4303      	orrs	r3, r0
 80032b6:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80032b8:	6891      	ldr	r1, [r2, #8]
 80032ba:	f011 0f0c 	tst.w	r1, #12
 80032be:	d10c      	bne.n	80032da <HAL_ADC_Init+0x102>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80032c0:	68d1      	ldr	r1, [r2, #12]
 80032c2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80032c6:	f021 0102 	bic.w	r1, r1, #2
 80032ca:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80032cc:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80032d0:	7e20      	ldrb	r0, [r4, #24]
 80032d2:	0049      	lsls	r1, r1, #1
 80032d4:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80032d8:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80032da:	68d0      	ldr	r0, [r2, #12]
 80032dc:	495b      	ldr	r1, [pc, #364]	; (800344c <HAL_ADC_Init+0x274>)
 80032de:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032e0:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80032e2:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032e4:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 80032e6:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032e8:	d072      	beq.n	80033d0 <HAL_ADC_Init+0x1f8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032ec:	f023 030f 	bic.w	r3, r3, #15
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80032f2:	2000      	movs	r0, #0
 80032f4:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80032f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032f8:	f023 0303 	bic.w	r3, r3, #3
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003302:	b003      	add	sp, #12
 8003304:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8003306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003308:	f023 0312 	bic.w	r3, r3, #18
 800330c:	f043 0310 	orr.w	r3, r3, #16
 8003310:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800331a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800331c:	e778      	b.n	8003210 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 800331e:	2001      	movs	r0, #1
}
 8003320:	b003      	add	sp, #12
 8003322:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8003324:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8003328:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 800332a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 800332e:	f7fd fe0f 	bl	8000f50 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	6893      	ldr	r3, [r2, #8]
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	d511      	bpl.n	800335e <HAL_ADC_Init+0x186>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333a:	462b      	mov	r3, r5
 800333c:	e75d      	b.n	80031fa <HAL_ADC_Init+0x22>
 800333e:	4941      	ldr	r1, [pc, #260]	; (8003444 <HAL_ADC_Init+0x26c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003340:	4d41      	ldr	r5, [pc, #260]	; (8003448 <HAL_ADC_Init+0x270>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003342:	6893      	ldr	r3, [r2, #8]
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	2b01      	cmp	r3, #1
 800334a:	d058      	beq.n	80033fe <HAL_ADC_Init+0x226>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800334c:	688b      	ldr	r3, [r1, #8]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d188      	bne.n	8003268 <HAL_ADC_Init+0x90>
 8003356:	680b      	ldr	r3, [r1, #0]
 8003358:	07db      	lsls	r3, r3, #31
 800335a:	d48b      	bmi.n	8003274 <HAL_ADC_Init+0x9c>
 800335c:	e784      	b.n	8003268 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 800335e:	4620      	mov	r0, r4
 8003360:	f7ff fec4 	bl	80030ec <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003364:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 8003366:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003368:	06d0      	lsls	r0, r2, #27
 800336a:	f53f af45 	bmi.w	80031f8 <HAL_ADC_Init+0x20>
 800336e:	2b00      	cmp	r3, #0
 8003370:	f47f af42 	bne.w	80031f8 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 8003374:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003376:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8003378:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 800337c:	f021 0102 	bic.w	r1, r1, #2
 8003380:	f041 0102 	orr.w	r1, r1, #2
 8003384:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003386:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003388:	4931      	ldr	r1, [pc, #196]	; (8003450 <HAL_ADC_Init+0x278>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800338a:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800338e:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003390:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003392:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003394:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8003398:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800339a:	482e      	ldr	r0, [pc, #184]	; (8003454 <HAL_ADC_Init+0x27c>)
 800339c:	fba0 0101 	umull	r0, r1, r0, r1
 80033a0:	0c89      	lsrs	r1, r1, #18
 80033a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80033a6:	0049      	lsls	r1, r1, #1
 80033a8:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80033aa:	9901      	ldr	r1, [sp, #4]
 80033ac:	2900      	cmp	r1, #0
 80033ae:	f43f af24 	beq.w	80031fa <HAL_ADC_Init+0x22>
            wait_loop_index--;
 80033b2:	9901      	ldr	r1, [sp, #4]
 80033b4:	3901      	subs	r1, #1
 80033b6:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80033b8:	9901      	ldr	r1, [sp, #4]
 80033ba:	2900      	cmp	r1, #0
 80033bc:	d1f9      	bne.n	80033b2 <HAL_ADC_Init+0x1da>
 80033be:	e71c      	b.n	80031fa <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80033c0:	bb35      	cbnz	r5, 8003410 <HAL_ADC_Init+0x238>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80033c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033c4:	3901      	subs	r1, #1
 80033c6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ce:	e764      	b.n	800329a <HAL_ADC_Init+0xc2>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80033d0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80033d2:	69e3      	ldr	r3, [r4, #28]
 80033d4:	f021 010f 	bic.w	r1, r1, #15
 80033d8:	3b01      	subs	r3, #1
 80033da:	430b      	orrs	r3, r1
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	e788      	b.n	80032f2 <HAL_ADC_Init+0x11a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80033e0:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 80033e4:	d01f      	beq.n	8003426 <HAL_ADC_Init+0x24e>
 80033e6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80033ea:	d024      	beq.n	8003436 <HAL_ADC_Init+0x25e>
 80033ec:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 80033f0:	bf08      	it	eq
 80033f2:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80033f6:	e75c      	b.n	80032b2 <HAL_ADC_Init+0xda>
 80033f8:	4910      	ldr	r1, [pc, #64]	; (800343c <HAL_ADC_Init+0x264>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033fa:	4d17      	ldr	r5, [pc, #92]	; (8003458 <HAL_ADC_Init+0x280>)
 80033fc:	e7a1      	b.n	8003342 <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80033fe:	6813      	ldr	r3, [r2, #0]
 8003400:	07db      	lsls	r3, r3, #31
 8003402:	f53f af37 	bmi.w	8003274 <HAL_ADC_Init+0x9c>
 8003406:	e7a1      	b.n	800334c <HAL_ADC_Init+0x174>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003408:	4d13      	ldr	r5, [pc, #76]	; (8003458 <HAL_ADC_Init+0x280>)
 800340a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800340e:	e798      	b.n	8003342 <HAL_ADC_Init+0x16a>
        ADC_STATE_CLR_SET(hadc->State,
 8003410:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003412:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8003416:	f041 0120 	orr.w	r1, r1, #32
 800341a:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800341c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800341e:	f041 0101 	orr.w	r1, r1, #1
 8003422:	6461      	str	r1, [r4, #68]	; 0x44
 8003424:	e739      	b.n	800329a <HAL_ADC_Init+0xc2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003426:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800342a:	e742      	b.n	80032b2 <HAL_ADC_Init+0xda>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800342c:	6813      	ldr	r3, [r2, #0]
 800342e:	07d9      	lsls	r1, r3, #31
 8003430:	f53f af20 	bmi.w	8003274 <HAL_ADC_Init+0x9c>
 8003434:	e717      	b.n	8003266 <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003436:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800343a:	e73a      	b.n	80032b2 <HAL_ADC_Init+0xda>
 800343c:	50000100 	.word	0x50000100
 8003440:	50000400 	.word	0x50000400
 8003444:	50000500 	.word	0x50000500
 8003448:	50000700 	.word	0x50000700
 800344c:	fff0c007 	.word	0xfff0c007
 8003450:	20000004 	.word	0x20000004
 8003454:	431bde83 	.word	0x431bde83
 8003458:	50000300 	.word	0x50000300

0800345c <HAL_ADC_Start>:
{
 800345c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800345e:	6803      	ldr	r3, [r0, #0]
 8003460:	689d      	ldr	r5, [r3, #8]
 8003462:	f015 0504 	ands.w	r5, r5, #4
 8003466:	d12c      	bne.n	80034c2 <HAL_ADC_Start+0x66>
    __HAL_LOCK(hadc);
 8003468:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	4604      	mov	r4, r0
 8003470:	d027      	beq.n	80034c2 <HAL_ADC_Start+0x66>
 8003472:	2301      	movs	r3, #1
 8003474:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8003478:	f7ff fe78 	bl	800316c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800347c:	b9f0      	cbnz	r0, 80034bc <HAL_ADC_Start+0x60>
      ADC_STATE_CLR_SET(hadc->State,
 800347e:	6c22      	ldr	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003480:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003482:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800348e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 8003492:	6422      	str	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003494:	d017      	beq.n	80034c6 <HAL_ADC_Start+0x6a>
 8003496:	4a3a      	ldr	r2, [pc, #232]	; (8003580 <HAL_ADC_Start+0x124>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d068      	beq.n	800356e <HAL_ADC_Start+0x112>
 800349c:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 80034a0:	6892      	ldr	r2, [r2, #8]
 80034a2:	06d5      	lsls	r5, r2, #27
 80034a4:	d011      	beq.n	80034ca <HAL_ADC_Start+0x6e>
 80034a6:	4937      	ldr	r1, [pc, #220]	; (8003584 <HAL_ADC_Start+0x128>)
 80034a8:	428b      	cmp	r3, r1
 80034aa:	d00e      	beq.n	80034ca <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034b2:	6422      	str	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034b4:	68ca      	ldr	r2, [r1, #12]
 80034b6:	0192      	lsls	r2, r2, #6
 80034b8:	d514      	bpl.n	80034e4 <HAL_ADC_Start+0x88>
 80034ba:	e00d      	b.n	80034d8 <HAL_ADC_Start+0x7c>
      __HAL_UNLOCK(hadc);
 80034bc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 80034c0:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80034c2:	2002      	movs	r0, #2
}
 80034c4:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80034c6:	4a30      	ldr	r2, [pc, #192]	; (8003588 <HAL_ADC_Start+0x12c>)
 80034c8:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034cc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80034d0:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	0191      	lsls	r1, r2, #6
 80034d6:	d505      	bpl.n	80034e4 <HAL_ADC_Start+0x88>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80034d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80034de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034e2:	6422      	str	r2, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034e6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034ea:	bf1c      	itt	ne
 80034ec:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 80034ee:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80034f2:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80034f4:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034f6:	221c      	movs	r2, #28
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80034f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
 80034fc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003500:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003502:	d01a      	beq.n	800353a <HAL_ADC_Start+0xde>
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_ADC_Start+0x124>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d022      	beq.n	8003550 <HAL_ADC_Start+0xf4>
 800350a:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 800350e:	06cd      	lsls	r5, r1, #27
 8003510:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8003514:	d00c      	beq.n	8003530 <HAL_ADC_Start+0xd4>
 8003516:	6891      	ldr	r1, [r2, #8]
 8003518:	f001 011f 	and.w	r1, r1, #31
 800351c:	2905      	cmp	r1, #5
 800351e:	d007      	beq.n	8003530 <HAL_ADC_Start+0xd4>
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	f002 021f 	and.w	r2, r2, #31
 8003526:	2a09      	cmp	r2, #9
 8003528:	d002      	beq.n	8003530 <HAL_ADC_Start+0xd4>
 800352a:	4a16      	ldr	r2, [pc, #88]	; (8003584 <HAL_ADC_Start+0x128>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d1c7      	bne.n	80034c0 <HAL_ADC_Start+0x64>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	f042 0204 	orr.w	r2, r2, #4
 8003536:	609a      	str	r2, [r3, #8]
}
 8003538:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <HAL_ADC_Start+0x12c>)
 800353c:	6891      	ldr	r1, [r2, #8]
 800353e:	06cc      	lsls	r4, r1, #27
 8003540:	d0f6      	beq.n	8003530 <HAL_ADC_Start+0xd4>
 8003542:	6891      	ldr	r1, [r2, #8]
 8003544:	f001 011f 	and.w	r1, r1, #31
 8003548:	2905      	cmp	r1, #5
 800354a:	d0f1      	beq.n	8003530 <HAL_ADC_Start+0xd4>
 800354c:	6892      	ldr	r2, [r2, #8]
 800354e:	e7ef      	b.n	8003530 <HAL_ADC_Start+0xd4>
 8003550:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <HAL_ADC_Start+0x12c>)
 8003552:	6891      	ldr	r1, [r2, #8]
 8003554:	06c9      	lsls	r1, r1, #27
 8003556:	d0eb      	beq.n	8003530 <HAL_ADC_Start+0xd4>
 8003558:	6891      	ldr	r1, [r2, #8]
 800355a:	f001 011f 	and.w	r1, r1, #31
 800355e:	2905      	cmp	r1, #5
 8003560:	d0e6      	beq.n	8003530 <HAL_ADC_Start+0xd4>
 8003562:	6892      	ldr	r2, [r2, #8]
 8003564:	f002 021f 	and.w	r2, r2, #31
 8003568:	2a09      	cmp	r2, #9
 800356a:	d0e1      	beq.n	8003530 <HAL_ADC_Start+0xd4>
}
 800356c:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800356e:	4a06      	ldr	r2, [pc, #24]	; (8003588 <HAL_ADC_Start+0x12c>)
 8003570:	6892      	ldr	r2, [r2, #8]
 8003572:	06d2      	lsls	r2, r2, #27
 8003574:	d0a9      	beq.n	80034ca <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003576:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003578:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800357c:	e797      	b.n	80034ae <HAL_ADC_Start+0x52>
 800357e:	bf00      	nop
 8003580:	50000100 	.word	0x50000100
 8003584:	50000400 	.word	0x50000400
 8003588:	50000300 	.word	0x50000300

0800358c <HAL_ADCEx_Calibration_Start>:
{
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800358e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d040      	beq.n	8003618 <HAL_ADCEx_Calibration_Start+0x8c>
 8003596:	2701      	movs	r7, #1
 8003598:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 800359c:	4604      	mov	r4, r0
 800359e:	460d      	mov	r5, r1
 80035a0:	f7ff fda4 	bl	80030ec <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80035a4:	4606      	mov	r6, r0
 80035a6:	2800      	cmp	r0, #0
 80035a8:	d131      	bne.n	800360e <HAL_ADCEx_Calibration_Start+0x82>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80035aa:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80035ac:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80035ae:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035b0:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80035b2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80035b6:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035b8:	d103      	bne.n	80035c2 <HAL_ADCEx_Calibration_Start+0x36>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035c8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80035ca:	f7ff fd77 	bl	80030bc <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80035ce:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 80035d0:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	da14      	bge.n	8003602 <HAL_ADCEx_Calibration_Start+0x76>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80035d8:	f7ff fd70 	bl	80030bc <HAL_GetTick>
 80035dc:	1b43      	subs	r3, r0, r5
 80035de:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80035e0:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80035e2:	d9f6      	bls.n	80035d2 <HAL_ADCEx_Calibration_Start+0x46>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	2a00      	cmp	r2, #0
 80035e8:	daf3      	bge.n	80035d2 <HAL_ADCEx_Calibration_Start+0x46>
          ADC_STATE_CLR_SET(hadc->State,
 80035ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 80035ec:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 80035ee:	f023 0312 	bic.w	r3, r3, #18
 80035f2:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 80035f6:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 80035f8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 80035fc:	6423      	str	r3, [r4, #64]	; 0x40
}
 80035fe:	4630      	mov	r0, r6
 8003600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003604:	f023 0303 	bic.w	r3, r3, #3
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800360e:	2300      	movs	r3, #0
 8003610:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003614:	4630      	mov	r0, r6
 8003616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8003618:	2602      	movs	r6, #2
}
 800361a:	4630      	mov	r0, r6
 800361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800361e:	bf00      	nop

08003620 <HAL_ADCEx_InjectedStart>:
{
 8003620:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003622:	6803      	ldr	r3, [r0, #0]
 8003624:	689d      	ldr	r5, [r3, #8]
 8003626:	f015 0508 	ands.w	r5, r5, #8
 800362a:	d129      	bne.n	8003680 <HAL_ADCEx_InjectedStart+0x60>
    __HAL_LOCK(hadc);
 800362c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	4604      	mov	r4, r0
 8003634:	d024      	beq.n	8003680 <HAL_ADCEx_InjectedStart+0x60>
 8003636:	2301      	movs	r3, #1
 8003638:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 800363c:	f7ff fd96 	bl	800316c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003640:	b9d8      	cbnz	r0, 800367a <HAL_ADCEx_InjectedStart+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8003642:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003644:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8003646:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003652:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 8003656:	6423      	str	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003658:	d014      	beq.n	8003684 <HAL_ADCEx_InjectedStart+0x64>
 800365a:	4b32      	ldr	r3, [pc, #200]	; (8003724 <HAL_ADCEx_InjectedStart+0x104>)
 800365c:	429a      	cmp	r2, r3
 800365e:	d042      	beq.n	80036e6 <HAL_ADCEx_InjectedStart+0xc6>
 8003660:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	06d9      	lsls	r1, r3, #27
 8003668:	d00e      	beq.n	8003688 <HAL_ADCEx_InjectedStart+0x68>
 800366a:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <HAL_ADCEx_InjectedStart+0x108>)
 800366c:	429a      	cmp	r2, r3
 800366e:	d00b      	beq.n	8003688 <HAL_ADCEx_InjectedStart+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003670:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	6423      	str	r3, [r4, #64]	; 0x40
 8003678:	e00a      	b.n	8003690 <HAL_ADCEx_InjectedStart+0x70>
      __HAL_UNLOCK(hadc);
 800367a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 800367e:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8003680:	2002      	movs	r0, #2
}
 8003682:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003684:	4b29      	ldr	r3, [pc, #164]	; (800372c <HAL_ADCEx_InjectedStart+0x10c>)
 8003686:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003688:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800368a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800368e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003690:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003692:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        ADC_CLEAR_ERRORCODE(hadc);
 8003696:	bf08      	it	eq
 8003698:	6463      	streq	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800369a:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800369c:	2360      	movs	r3, #96	; 0x60
      __HAL_UNLOCK(hadc);
 800369e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80036a2:	6013      	str	r3, [r2, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80036a4:	68d3      	ldr	r3, [r2, #12]
 80036a6:	019b      	lsls	r3, r3, #6
 80036a8:	d4e9      	bmi.n	800367e <HAL_ADCEx_InjectedStart+0x5e>
 80036aa:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80036ae:	d01f      	beq.n	80036f0 <HAL_ADCEx_InjectedStart+0xd0>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80036b0:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <HAL_ADCEx_InjectedStart+0x104>)
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d027      	beq.n	8003706 <HAL_ADCEx_InjectedStart+0xe6>
 80036b6:	f8d3 1608 	ldr.w	r1, [r3, #1544]	; 0x608
 80036ba:	06cd      	lsls	r5, r1, #27
 80036bc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80036c0:	d00c      	beq.n	80036dc <HAL_ADCEx_InjectedStart+0xbc>
 80036c2:	6899      	ldr	r1, [r3, #8]
 80036c4:	f001 011f 	and.w	r1, r1, #31
 80036c8:	2906      	cmp	r1, #6
 80036ca:	d007      	beq.n	80036dc <HAL_ADCEx_InjectedStart+0xbc>
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	2b07      	cmp	r3, #7
 80036d4:	d002      	beq.n	80036dc <HAL_ADCEx_InjectedStart+0xbc>
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_ADCEx_InjectedStart+0x108>)
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1d0      	bne.n	800367e <HAL_ADCEx_InjectedStart+0x5e>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 80036dc:	6893      	ldr	r3, [r2, #8]
 80036de:	f043 0308 	orr.w	r3, r3, #8
 80036e2:	6093      	str	r3, [r2, #8]
}
 80036e4:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_ADCEx_InjectedStart+0x10c>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	06db      	lsls	r3, r3, #27
 80036ec:	d0cc      	beq.n	8003688 <HAL_ADCEx_InjectedStart+0x68>
 80036ee:	e7bf      	b.n	8003670 <HAL_ADCEx_InjectedStart+0x50>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80036f0:	4b0e      	ldr	r3, [pc, #56]	; (800372c <HAL_ADCEx_InjectedStart+0x10c>)
 80036f2:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80036f4:	06c9      	lsls	r1, r1, #27
 80036f6:	d0f1      	beq.n	80036dc <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80036f8:	6899      	ldr	r1, [r3, #8]
 80036fa:	f001 011f 	and.w	r1, r1, #31
 80036fe:	2906      	cmp	r1, #6
 8003700:	d0ec      	beq.n	80036dc <HAL_ADCEx_InjectedStart+0xbc>
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	e7ea      	b.n	80036dc <HAL_ADCEx_InjectedStart+0xbc>
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <HAL_ADCEx_InjectedStart+0x10c>)
 8003708:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 800370a:	06cc      	lsls	r4, r1, #27
 800370c:	d0e6      	beq.n	80036dc <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 800370e:	6899      	ldr	r1, [r3, #8]
 8003710:	f001 011f 	and.w	r1, r1, #31
 8003714:	2906      	cmp	r1, #6
 8003716:	d0e1      	beq.n	80036dc <HAL_ADCEx_InjectedStart+0xbc>
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2b07      	cmp	r3, #7
 8003720:	d0dc      	beq.n	80036dc <HAL_ADCEx_InjectedStart+0xbc>
}
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	50000100 	.word	0x50000100
 8003728:	50000400 	.word	0x50000400
 800372c:	50000300 	.word	0x50000300

08003730 <HAL_ADCEx_InjectedGetValue>:
  switch(InjectedRank)
 8003730:	2903      	cmp	r1, #3
 8003732:	d007      	beq.n	8003744 <HAL_ADCEx_InjectedGetValue+0x14>
 8003734:	2904      	cmp	r1, #4
 8003736:	d00d      	beq.n	8003754 <HAL_ADCEx_InjectedGetValue+0x24>
 8003738:	2902      	cmp	r1, #2
 800373a:	d007      	beq.n	800374c <HAL_ADCEx_InjectedGetValue+0x1c>
      tmp_jdr = hadc->Instance->JDR1;
 800373c:	6803      	ldr	r3, [r0, #0]
 800373e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8003742:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8003744:	6803      	ldr	r3, [r0, #0]
 8003746:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 800374a:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 800374c:	6803      	ldr	r3, [r0, #0]
 800374e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 8003752:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8003754:	6803      	ldr	r3, [r0, #0]
 8003756:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 800375a:	4770      	bx	lr

0800375c <HAL_ADC_ConfigChannel>:
{
 800375c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800375e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003762:	68cc      	ldr	r4, [r1, #12]
{
 8003764:	b083      	sub	sp, #12
 8003766:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003768:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 800376a:	f04f 0000 	mov.w	r0, #0
 800376e:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003770:	f000 8106 	beq.w	8003980 <HAL_ADC_ConfigChannel+0x224>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003774:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8003776:	2001      	movs	r0, #1
 8003778:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800377c:	6895      	ldr	r5, [r2, #8]
 800377e:	076d      	lsls	r5, r5, #29
 8003780:	d43a      	bmi.n	80037f8 <HAL_ADC_ConfigChannel+0x9c>
    if (sConfig->Rank < 5U)
 8003782:	6848      	ldr	r0, [r1, #4]
 8003784:	2804      	cmp	r0, #4
 8003786:	f200 808b 	bhi.w	80038a0 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 800378a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800378e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8003790:	680d      	ldr	r5, [r1, #0]
 8003792:	0040      	lsls	r0, r0, #1
 8003794:	f04f 0c1f 	mov.w	ip, #31
 8003798:	fa0c fc00 	lsl.w	ip, ip, r0
 800379c:	ea26 0c0c 	bic.w	ip, r6, ip
 80037a0:	fa05 f000 	lsl.w	r0, r5, r0
 80037a4:	ea4c 0000 	orr.w	r0, ip, r0
 80037a8:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80037aa:	6890      	ldr	r0, [r2, #8]
 80037ac:	f010 0f0c 	tst.w	r0, #12
 80037b0:	d134      	bne.n	800381c <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80037b2:	2d09      	cmp	r5, #9
 80037b4:	f200 808b 	bhi.w	80038ce <HAL_ADC_ConfigChannel+0x172>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037b8:	6950      	ldr	r0, [r2, #20]
 80037ba:	688e      	ldr	r6, [r1, #8]
 80037bc:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80037c0:	f04f 0c07 	mov.w	ip, #7
 80037c4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80037c8:	fa06 f60e 	lsl.w	r6, r6, lr
 80037cc:	ea20 000c 	bic.w	r0, r0, ip
 80037d0:	4330      	orrs	r0, r6
 80037d2:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80037d4:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 80037d6:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80037d8:	694f      	ldr	r7, [r1, #20]
 80037da:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80037de:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 80037e0:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80037e2:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 80037e6:	2e03      	cmp	r6, #3
 80037e8:	f200 8146 	bhi.w	8003a78 <HAL_ADC_ConfigChannel+0x31c>
 80037ec:	e8df f016 	tbh	[pc, r6, lsl #1]
 80037f0:	0108000d 	.word	0x0108000d
 80037f4:	00f400fe 	.word	0x00f400fe
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037fa:	f042 0220 	orr.w	r2, r2, #32
 80037fe:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003806:	b003      	add	sp, #12
 8003808:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 800380a:	6e17      	ldr	r7, [r2, #96]	; 0x60
 800380c:	4ea9      	ldr	r6, [pc, #676]	; (8003ab4 <HAL_ADC_ConfigChannel+0x358>)
 800380e:	403e      	ands	r6, r7
 8003810:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8003814:	4330      	orrs	r0, r6
 8003816:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800381a:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800381c:	6890      	ldr	r0, [r2, #8]
 800381e:	f000 0003 	and.w	r0, r0, #3
 8003822:	2801      	cmp	r0, #1
 8003824:	f000 80a7 	beq.w	8003976 <HAL_ADC_ConfigChannel+0x21a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003828:	2c01      	cmp	r4, #1
 800382a:	f000 80ac 	beq.w	8003986 <HAL_ADC_ConfigChannel+0x22a>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800382e:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8003832:	2001      	movs	r0, #1
 8003834:	40a8      	lsls	r0, r5
 8003836:	ea21 0100 	bic.w	r1, r1, r0
 800383a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800383e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003842:	d078      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x1da>
 8003844:	499c      	ldr	r1, [pc, #624]	; (8003ab8 <HAL_ADC_ConfigChannel+0x35c>)
 8003846:	428a      	cmp	r2, r1
 8003848:	d075      	beq.n	8003936 <HAL_ADC_ConfigChannel+0x1da>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800384a:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800384c:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003850:	d074      	beq.n	800393c <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003852:	2d11      	cmp	r5, #17
 8003854:	f040 80ac 	bne.w	80039b0 <HAL_ADC_ConfigChannel+0x254>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003858:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800385a:	01c4      	lsls	r4, r0, #7
 800385c:	d471      	bmi.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800385e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003862:	d070      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x1ea>
 8003864:	4894      	ldr	r0, [pc, #592]	; (8003ab8 <HAL_ADC_ConfigChannel+0x35c>)
 8003866:	4282      	cmp	r2, r0
 8003868:	f000 80dd 	beq.w	8003a26 <HAL_ADC_ConfigChannel+0x2ca>
 800386c:	4c93      	ldr	r4, [pc, #588]	; (8003abc <HAL_ADC_ConfigChannel+0x360>)
 800386e:	42a2      	cmp	r2, r4
 8003870:	f000 80fc 	beq.w	8003a6c <HAL_ADC_ConfigChannel+0x310>
 8003874:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003878:	4282      	cmp	r2, r0
 800387a:	d065      	beq.n	8003948 <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800387c:	6890      	ldr	r0, [r2, #8]
 800387e:	f000 0003 	and.w	r0, r0, #3
 8003882:	2801      	cmp	r0, #1
 8003884:	f000 80f4 	beq.w	8003a70 <HAL_ADC_ConfigChannel+0x314>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003888:	2d10      	cmp	r5, #16
 800388a:	d05a      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800388c:	2d11      	cmp	r5, #17
 800388e:	d058      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003890:	2d12      	cmp	r5, #18
 8003892:	d156      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003894:	688a      	ldr	r2, [r1, #8]
 8003896:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800389a:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800389c:	608a      	str	r2, [r1, #8]
 800389e:	e7af      	b.n	8003800 <HAL_ADC_ConfigChannel+0xa4>
    else if (sConfig->Rank < 10U)
 80038a0:	2809      	cmp	r0, #9
 80038a2:	d925      	bls.n	80038f0 <HAL_ADC_ConfigChannel+0x194>
    else if (sConfig->Rank < 15U)
 80038a4:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80038a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80038aa:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 80038ae:	f200 8085 	bhi.w	80039bc <HAL_ADC_ConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80038b2:	6b96      	ldr	r6, [r2, #56]	; 0x38
 80038b4:	680d      	ldr	r5, [r1, #0]
 80038b6:	383c      	subs	r0, #60	; 0x3c
 80038b8:	f04f 0c1f 	mov.w	ip, #31
 80038bc:	fa0c fc00 	lsl.w	ip, ip, r0
 80038c0:	ea26 060c 	bic.w	r6, r6, ip
 80038c4:	fa05 f000 	lsl.w	r0, r5, r0
 80038c8:	4330      	orrs	r0, r6
 80038ca:	6390      	str	r0, [r2, #56]	; 0x38
 80038cc:	e76d      	b.n	80037aa <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80038ce:	688f      	ldr	r7, [r1, #8]
 80038d0:	6990      	ldr	r0, [r2, #24]
 80038d2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80038d6:	3e1e      	subs	r6, #30
 80038d8:	f04f 0e07 	mov.w	lr, #7
 80038dc:	fa07 fc06 	lsl.w	ip, r7, r6
 80038e0:	fa0e f606 	lsl.w	r6, lr, r6
 80038e4:	ea20 0006 	bic.w	r0, r0, r6
 80038e8:	ea40 000c 	orr.w	r0, r0, ip
 80038ec:	6190      	str	r0, [r2, #24]
 80038ee:	e771      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->SQR2,
 80038f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80038f4:	0040      	lsls	r0, r0, #1
 80038f6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80038f8:	680d      	ldr	r5, [r1, #0]
 80038fa:	381e      	subs	r0, #30
 80038fc:	f04f 0c1f 	mov.w	ip, #31
 8003900:	fa0c fc00 	lsl.w	ip, ip, r0
 8003904:	ea26 060c 	bic.w	r6, r6, ip
 8003908:	fa05 f000 	lsl.w	r0, r5, r0
 800390c:	4330      	orrs	r0, r6
 800390e:	6350      	str	r0, [r2, #52]	; 0x34
 8003910:	e74b      	b.n	80037aa <HAL_ADC_ConfigChannel+0x4e>
        MODIFY_REG(hadc->Instance->SMPR1,
 8003912:	1c6c      	adds	r4, r5, #1
 8003914:	688e      	ldr	r6, [r1, #8]
 8003916:	6950      	ldr	r0, [r2, #20]
 8003918:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800391c:	2107      	movs	r1, #7
 800391e:	40a1      	lsls	r1, r4
 8003920:	40a6      	lsls	r6, r4
 8003922:	ea20 0101 	bic.w	r1, r0, r1
 8003926:	4331      	orrs	r1, r6
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003928:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 800392c:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800392e:	d008      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
 8003930:	4961      	ldr	r1, [pc, #388]	; (8003ab8 <HAL_ADC_ConfigChannel+0x35c>)
 8003932:	428a      	cmp	r2, r1
 8003934:	d105      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003936:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003938:	4961      	ldr	r1, [pc, #388]	; (8003ac0 <HAL_ADC_ConfigChannel+0x364>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800393a:	d18a      	bne.n	8003852 <HAL_ADC_ConfigChannel+0xf6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800393c:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800393e:	0206      	lsls	r6, r0, #8
 8003940:	d58d      	bpl.n	800385e <HAL_ADC_ConfigChannel+0x102>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003942:	2000      	movs	r0, #0
 8003944:	e75c      	b.n	8003800 <HAL_ADC_ConfigChannel+0xa4>
 8003946:	4c5c      	ldr	r4, [pc, #368]	; (8003ab8 <HAL_ADC_ConfigChannel+0x35c>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003948:	6890      	ldr	r0, [r2, #8]
 800394a:	f000 0003 	and.w	r0, r0, #3
 800394e:	2801      	cmp	r0, #1
 8003950:	d060      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0x2b8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003952:	68a0      	ldr	r0, [r4, #8]
 8003954:	f000 0003 	and.w	r0, r0, #3
 8003958:	2801      	cmp	r0, #1
 800395a:	d067      	beq.n	8003a2c <HAL_ADC_ConfigChannel+0x2d0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800395c:	2d10      	cmp	r5, #16
 800395e:	d069      	beq.n	8003a34 <HAL_ADC_ConfigChannel+0x2d8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003960:	2d11      	cmp	r5, #17
 8003962:	d195      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x134>
 8003964:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003968:	d1eb      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800396a:	688a      	ldr	r2, [r1, #8]
 800396c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003970:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003972:	608a      	str	r2, [r1, #8]
 8003974:	e744      	b.n	8003800 <HAL_ADC_ConfigChannel+0xa4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003976:	6810      	ldr	r0, [r2, #0]
 8003978:	07c7      	lsls	r7, r0, #31
 800397a:	f57f af55 	bpl.w	8003828 <HAL_ADC_ConfigChannel+0xcc>
 800397e:	e7e0      	b.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
  __HAL_LOCK(hadc);
 8003980:	2002      	movs	r0, #2
}
 8003982:	b003      	add	sp, #12
 8003984:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003986:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 800398a:	40ac      	lsls	r4, r5
 800398c:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800398e:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003990:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003994:	d9bd      	bls.n	8003912 <HAL_ADC_ConfigChannel+0x1b6>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003996:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800399a:	688e      	ldr	r6, [r1, #8]
 800399c:	6990      	ldr	r0, [r2, #24]
 800399e:	3c1b      	subs	r4, #27
 80039a0:	2107      	movs	r1, #7
 80039a2:	40a1      	lsls	r1, r4
 80039a4:	40a6      	lsls	r6, r4
 80039a6:	ea20 0101 	bic.w	r1, r0, r1
 80039aa:	4331      	orrs	r1, r6
 80039ac:	6191      	str	r1, [r2, #24]
 80039ae:	e746      	b.n	800383e <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039b0:	2d12      	cmp	r5, #18
 80039b2:	d1c6      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80039b4:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039b6:	0240      	lsls	r0, r0, #9
 80039b8:	d4c3      	bmi.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
 80039ba:	e750      	b.n	800385e <HAL_ADC_ConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80039bc:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80039be:	680d      	ldr	r5, [r1, #0]
 80039c0:	385a      	subs	r0, #90	; 0x5a
 80039c2:	f04f 0c1f 	mov.w	ip, #31
 80039c6:	fa0c fc00 	lsl.w	ip, ip, r0
 80039ca:	ea26 060c 	bic.w	r6, r6, ip
 80039ce:	fa05 f000 	lsl.w	r0, r5, r0
 80039d2:	4330      	orrs	r0, r6
 80039d4:	63d0      	str	r0, [r2, #60]	; 0x3c
 80039d6:	e6e8      	b.n	80037aa <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80039d8:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 80039da:	4e36      	ldr	r6, [pc, #216]	; (8003ab4 <HAL_ADC_ConfigChannel+0x358>)
 80039dc:	403e      	ands	r6, r7
 80039de:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80039e2:	4330      	orrs	r0, r6
 80039e4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80039e8:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 80039ea:	e717      	b.n	800381c <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80039ec:	6e97      	ldr	r7, [r2, #104]	; 0x68
 80039ee:	4e31      	ldr	r6, [pc, #196]	; (8003ab4 <HAL_ADC_ConfigChannel+0x358>)
 80039f0:	403e      	ands	r6, r7
 80039f2:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80039f6:	4330      	orrs	r0, r6
 80039f8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80039fc:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 80039fe:	e70d      	b.n	800381c <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003a00:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8003a02:	4e2c      	ldr	r6, [pc, #176]	; (8003ab4 <HAL_ADC_ConfigChannel+0x358>)
 8003a04:	403e      	ands	r6, r7
 8003a06:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8003a0a:	4330      	orrs	r0, r6
 8003a0c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003a10:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8003a12:	e703      	b.n	800381c <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a14:	6810      	ldr	r0, [r2, #0]
 8003a16:	07c6      	lsls	r6, r0, #31
 8003a18:	d59b      	bpl.n	8003952 <HAL_ADC_ConfigChannel+0x1f6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1c:	f042 0220 	orr.w	r2, r2, #32
        tmp_hal_status = HAL_ERROR;
 8003a20:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003a24:	e6ec      	b.n	8003800 <HAL_ADC_ConfigChannel+0xa4>
 8003a26:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8003a2a:	e78d      	b.n	8003948 <HAL_ADC_ConfigChannel+0x1ec>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a2c:	6820      	ldr	r0, [r4, #0]
 8003a2e:	07c0      	lsls	r0, r0, #31
 8003a30:	d4f3      	bmi.n	8003a1a <HAL_ADC_ConfigChannel+0x2be>
 8003a32:	e793      	b.n	800395c <HAL_ADC_ConfigChannel+0x200>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a34:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003a38:	d183      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a3a:	4a22      	ldr	r2, [pc, #136]	; (8003ac4 <HAL_ADC_ConfigChannel+0x368>)
 8003a3c:	4c22      	ldr	r4, [pc, #136]	; (8003ac8 <HAL_ADC_ConfigChannel+0x36c>)
 8003a3e:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003a40:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a42:	fba4 4202 	umull	r4, r2, r4, r2
 8003a46:	0c92      	lsrs	r2, r2, #18
 8003a48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a4c:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003a4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003a52:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a54:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003a56:	9a01      	ldr	r2, [sp, #4]
 8003a58:	2a00      	cmp	r2, #0
 8003a5a:	f43f af72 	beq.w	8003942 <HAL_ADC_ConfigChannel+0x1e6>
            wait_loop_index--;
 8003a5e:	9a01      	ldr	r2, [sp, #4]
 8003a60:	3a01      	subs	r2, #1
 8003a62:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8003a64:	9a01      	ldr	r2, [sp, #4]
 8003a66:	2a00      	cmp	r2, #0
 8003a68:	d1f9      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x302>
 8003a6a:	e76a      	b.n	8003942 <HAL_ADC_ConfigChannel+0x1e6>
 8003a6c:	4c17      	ldr	r4, [pc, #92]	; (8003acc <HAL_ADC_ConfigChannel+0x370>)
 8003a6e:	e76b      	b.n	8003948 <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	07d7      	lsls	r7, r2, #31
 8003a74:	d4d1      	bmi.n	8003a1a <HAL_ADC_ConfigChannel+0x2be>
 8003a76:	e707      	b.n	8003888 <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a78:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8003a7a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003a7e:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8003a82:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8003a86:	d023      	beq.n	8003ad0 <HAL_ADC_ConfigChannel+0x374>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a88:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8003a8a:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003a8e:	4286      	cmp	r6, r0
 8003a90:	d023      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x37e>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a92:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003a94:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003a98:	4286      	cmp	r6, r0
 8003a9a:	d023      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0x388>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a9c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8003a9e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003aa2:	4286      	cmp	r6, r0
 8003aa4:	f47f aeba 	bne.w	800381c <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003aa8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8003aaa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003aae:	66d0      	str	r0, [r2, #108]	; 0x6c
 8003ab0:	e6b4      	b.n	800381c <HAL_ADC_ConfigChannel+0xc0>
 8003ab2:	bf00      	nop
 8003ab4:	83fff000 	.word	0x83fff000
 8003ab8:	50000100 	.word	0x50000100
 8003abc:	50000400 	.word	0x50000400
 8003ac0:	50000300 	.word	0x50000300
 8003ac4:	20000004 	.word	0x20000004
 8003ac8:	431bde83 	.word	0x431bde83
 8003acc:	50000500 	.word	0x50000500
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003ad0:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8003ad2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003ad6:	6610      	str	r0, [r2, #96]	; 0x60
 8003ad8:	e7d6      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x32c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003ada:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8003adc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003ae0:	6650      	str	r0, [r2, #100]	; 0x64
 8003ae2:	e7d6      	b.n	8003a92 <HAL_ADC_ConfigChannel+0x336>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003ae4:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8003ae6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003aea:	6690      	str	r0, [r2, #104]	; 0x68
 8003aec:	e7d6      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x340>
 8003aee:	bf00      	nop

08003af0 <HAL_ADCEx_InjectedConfigChannel>:
{
 8003af0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8003af2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003af6:	6905      	ldr	r5, [r0, #16]
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003af8:	68cc      	ldr	r4, [r1, #12]
{
 8003afa:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003afc:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003afe:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8003b00:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003b02:	f000 81ac 	beq.w	8003e5e <HAL_ADCEx_InjectedConfigChannel+0x36e>
 8003b06:	2301      	movs	r3, #1
 8003b08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003b0c:	b365      	cbz	r5, 8003b68 <HAL_ADCEx_InjectedConfigChannel+0x78>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8003b0e:	698f      	ldr	r7, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003b10:	429f      	cmp	r7, r3
 8003b12:	d029      	beq.n	8003b68 <HAL_ADCEx_InjectedConfigChannel+0x78>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003b14:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8003b16:	2d00      	cmp	r5, #0
 8003b18:	f040 812b 	bne.w	8003d72 <HAL_ADCEx_InjectedConfigChannel+0x282>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b1c:	6a0d      	ldr	r5, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003b1e:	64c7      	str	r7, [r0, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b20:	2d01      	cmp	r5, #1
 8003b22:	f000 81f1 	beq.w	8003f08 <HAL_ADCEx_InjectedConfigChannel+0x418>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003b26:	6803      	ldr	r3, [r0, #0]
 8003b28:	4aab      	ldr	r2, [pc, #684]	; (8003dd8 <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	f107 37ff 	add.w	r7, r7, #4294967295
 8003b30:	f000 81e2 	beq.w	8003ef8 <HAL_ADCEx_InjectedConfigChannel+0x408>
 8003b34:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f000 81dd 	beq.w	8003ef8 <HAL_ADCEx_InjectedConfigChannel+0x408>
 8003b3e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003b40:	433a      	orrs	r2, r7
 8003b42:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003b44:	684d      	ldr	r5, [r1, #4]
 8003b46:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8003b48:	64c7      	str	r7, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003b4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b4e:	006d      	lsls	r5, r5, #1
 8003b50:	3502      	adds	r5, #2
 8003b52:	271f      	movs	r7, #31
 8003b54:	40ae      	lsls	r6, r5
 8003b56:	fa07 f505 	lsl.w	r5, r7, r5
 8003b5a:	ea22 0205 	bic.w	r2, r2, r5
 8003b5e:	4332      	orrs	r2, r6
 8003b60:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b62:	f04f 0c00 	mov.w	ip, #0
 8003b66:	e00a      	b.n	8003b7e <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003b68:	684b      	ldr	r3, [r1, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	f000 80e5 	beq.w	8003d3a <HAL_ADCEx_InjectedConfigChannel+0x24a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b70:	6c02      	ldr	r2, [r0, #64]	; 0x40
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003b72:	6803      	ldr	r3, [r0, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b74:	f042 0220 	orr.w	r2, r2, #32
 8003b78:	6402      	str	r2, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8003b7a:	f04f 0c01 	mov.w	ip, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	0712      	lsls	r2, r2, #28
 8003b82:	d40d      	bmi.n	8003ba0 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003b84:	7f4a      	ldrb	r2, [r1, #29]
 8003b86:	2a00      	cmp	r2, #0
 8003b88:	f040 80c0 	bne.w	8003d0c <HAL_ADCEx_InjectedConfigChannel+0x21c>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003b8c:	7f0a      	ldrb	r2, [r1, #28]
 8003b8e:	68dd      	ldr	r5, [r3, #12]
 8003b90:	7f8e      	ldrb	r6, [r1, #30]
 8003b92:	0512      	lsls	r2, r2, #20
 8003b94:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003b98:	ea42 5246 	orr.w	r2, r2, r6, lsl #21
 8003b9c:	432a      	orrs	r2, r5
 8003b9e:	60da      	str	r2, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	f012 0f0c 	tst.w	r2, #12
 8003ba6:	d13a      	bne.n	8003c1e <HAL_ADCEx_InjectedConfigChannel+0x12e>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003ba8:	6a0a      	ldr	r2, [r1, #32]
 8003baa:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003bb2:	f000 814f 	beq.w	8003e54 <HAL_ADCEx_InjectedConfigChannel+0x364>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003bb6:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003bb8:	7f4a      	ldrb	r2, [r1, #29]
 8003bba:	2a01      	cmp	r2, #1
 8003bbc:	f000 812c 	beq.w	8003e18 <HAL_ADCEx_InjectedConfigChannel+0x328>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003bc0:	680e      	ldr	r6, [r1, #0]
 8003bc2:	2e09      	cmp	r6, #9
 8003bc4:	f240 8094 	bls.w	8003cf0 <HAL_ADCEx_InjectedConfigChannel+0x200>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003bc8:	688d      	ldr	r5, [r1, #8]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
 8003bd0:	f1ae 0e1e 	sub.w	lr, lr, #30
 8003bd4:	2707      	movs	r7, #7
 8003bd6:	fa05 f50e 	lsl.w	r5, r5, lr
 8003bda:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003bde:	ea22 020e 	bic.w	r2, r2, lr
 8003be2:	432a      	orrs	r2, r5
 8003be4:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003be6:	68da      	ldr	r2, [r3, #12]
    switch (sConfigInjected->InjectedOffsetNumber)
 8003be8:	690d      	ldr	r5, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003bea:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8003bee:	694a      	ldr	r2, [r1, #20]
 8003bf0:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    switch (sConfigInjected->InjectedOffsetNumber)
 8003bf4:	3d01      	subs	r5, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003bf6:	fa02 f20e 	lsl.w	r2, r2, lr
    switch (sConfigInjected->InjectedOffsetNumber)
 8003bfa:	2d03      	cmp	r5, #3
 8003bfc:	f200 8190 	bhi.w	8003f20 <HAL_ADCEx_InjectedConfigChannel+0x430>
 8003c00:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003c04:	01000004 	.word	0x01000004
 8003c08:	00e000f6 	.word	0x00e000f6
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8003c0c:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8003c10:	4d72      	ldr	r5, [pc, #456]	; (8003ddc <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8003c12:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 8003c14:	4035      	ands	r5, r6
 8003c16:	432a      	orrs	r2, r5
 8003c18:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c1c:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	f002 0203 	and.w	r2, r2, #3
 8003c24:	2a01      	cmp	r2, #1
 8003c26:	d041      	beq.n	8003cac <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c28:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003c2a:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c2c:	d044      	beq.n	8003cb8 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003c2e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003c32:	2401      	movs	r4, #1
 8003c34:	4094      	lsls	r4, r2
 8003c36:	ea21 0104 	bic.w	r1, r1, r4
 8003c3a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c42:	d02c      	beq.n	8003c9e <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 8003c44:	4966      	ldr	r1, [pc, #408]	; (8003de0 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8003c46:	428b      	cmp	r3, r1
 8003c48:	d029      	beq.n	8003c9e <HAL_ADCEx_InjectedConfigChannel+0x1ae>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c4a:	2a10      	cmp	r2, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c4c:	4965      	ldr	r1, [pc, #404]	; (8003de4 <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c4e:	d029      	beq.n	8003ca4 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003c50:	2a11      	cmp	r2, #17
 8003c52:	d16c      	bne.n	8003d2e <HAL_ADCEx_InjectedConfigChannel+0x23e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003c54:	688c      	ldr	r4, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003c56:	01e5      	lsls	r5, r4, #7
 8003c58:	d41b      	bmi.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c5e:	f000 8103 	beq.w	8003e68 <HAL_ADCEx_InjectedConfigChannel+0x378>
 8003c62:	4c5f      	ldr	r4, [pc, #380]	; (8003de0 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8003c64:	42a3      	cmp	r3, r4
 8003c66:	f000 80dd 	beq.w	8003e24 <HAL_ADCEx_InjectedConfigChannel+0x334>
 8003c6a:	4d5b      	ldr	r5, [pc, #364]	; (8003dd8 <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8003c6c:	42ab      	cmp	r3, r5
 8003c6e:	f000 814f 	beq.w	8003f10 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8003c72:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c76:	42a3      	cmp	r3, r4
 8003c78:	f000 80d6 	beq.w	8003e28 <HAL_ADCEx_InjectedConfigChannel+0x338>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003c7c:	689c      	ldr	r4, [r3, #8]
 8003c7e:	f004 0403 	and.w	r4, r4, #3
 8003c82:	2c01      	cmp	r4, #1
 8003c84:	f000 8132 	beq.w	8003eec <HAL_ADCEx_InjectedConfigChannel+0x3fc>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003c88:	2a10      	cmp	r2, #16
 8003c8a:	d002      	beq.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003c8c:	2a11      	cmp	r2, #17
 8003c8e:	f040 80d9 	bne.w	8003e44 <HAL_ADCEx_InjectedConfigChannel+0x354>
  __HAL_UNLOCK(hadc);
 8003c92:	2300      	movs	r3, #0
 8003c94:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003c98:	4660      	mov	r0, ip
 8003c9a:	b003      	add	sp, #12
 8003c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003c9e:	2a10      	cmp	r2, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ca0:	4951      	ldr	r1, [pc, #324]	; (8003de8 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ca2:	d1d5      	bne.n	8003c50 <HAL_ADCEx_InjectedConfigChannel+0x160>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003ca4:	688c      	ldr	r4, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ca6:	0226      	lsls	r6, r4, #8
 8003ca8:	d5d7      	bpl.n	8003c5a <HAL_ADCEx_InjectedConfigChannel+0x16a>
 8003caa:	e7f2      	b.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	07d7      	lsls	r7, r2, #31
 8003cb0:	d4ef      	bmi.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003cb2:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003cb4:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003cb6:	d1ba      	bne.n	8003c2e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003cb8:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8003cbc:	4094      	lsls	r4, r2
 8003cbe:	432c      	orrs	r4, r5
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003cc0:	2a09      	cmp	r2, #9
        MODIFY_REG(hadc->Instance->SMPR2,
 8003cc2:	688d      	ldr	r5, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003cc4:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003cc8:	d86f      	bhi.n	8003daa <HAL_ADCEx_InjectedConfigChannel+0x2ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8003cca:	1c54      	adds	r4, r2, #1
 8003ccc:	6959      	ldr	r1, [r3, #20]
 8003cce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003cd2:	2607      	movs	r6, #7
 8003cd4:	40a5      	lsls	r5, r4
 8003cd6:	fa06 f404 	lsl.w	r4, r6, r4
 8003cda:	ea21 0104 	bic.w	r1, r1, r4
 8003cde:	4329      	orrs	r1, r5
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8003ce4:	6159      	str	r1, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ce6:	d0d4      	beq.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 8003ce8:	493d      	ldr	r1, [pc, #244]	; (8003de0 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8003cea:	428b      	cmp	r3, r1
 8003cec:	d1ad      	bne.n	8003c4a <HAL_ADCEx_InjectedConfigChannel+0x15a>
 8003cee:	e7d0      	b.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003cf0:	695a      	ldr	r2, [r3, #20]
 8003cf2:	688d      	ldr	r5, [r1, #8]
 8003cf4:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8003cf8:	f04f 0e07 	mov.w	lr, #7
 8003cfc:	fa0e fe07 	lsl.w	lr, lr, r7
 8003d00:	40bd      	lsls	r5, r7
 8003d02:	ea22 020e 	bic.w	r2, r2, lr
 8003d06:	432a      	orrs	r2, r5
 8003d08:	615a      	str	r2, [r3, #20]
 8003d0a:	e76c      	b.n	8003be6 <HAL_ADCEx_InjectedConfigChannel+0xf6>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	7f8d      	ldrb	r5, [r1, #30]
 8003d10:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003d14:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8003d18:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003d1a:	7f0a      	ldrb	r2, [r1, #28]
 8003d1c:	2a01      	cmp	r2, #1
 8003d1e:	f47f af3f 	bne.w	8003ba0 <HAL_ADCEx_InjectedConfigChannel+0xb0>
        tmp_hal_status = HAL_ERROR;
 8003d22:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d24:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d26:	f042 0220 	orr.w	r2, r2, #32
 8003d2a:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003d2c:	e738      	b.n	8003ba0 <HAL_ADCEx_InjectedConfigChannel+0xb0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003d2e:	2a12      	cmp	r2, #18
 8003d30:	d1af      	bne.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003d32:	688c      	ldr	r4, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8003d34:	0264      	lsls	r4, r4, #9
 8003d36:	d4ac      	bmi.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 8003d38:	e78f      	b.n	8003c5a <HAL_ADCEx_InjectedConfigChannel+0x16a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003d3a:	6a0d      	ldr	r5, [r1, #32]
 8003d3c:	2d01      	cmp	r5, #1
 8003d3e:	f000 809f 	beq.w	8003e80 <HAL_ADCEx_InjectedConfigChannel+0x390>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003d42:	680b      	ldr	r3, [r1, #0]
 8003d44:	4e24      	ldr	r6, [pc, #144]	; (8003dd8 <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8003d46:	021a      	lsls	r2, r3, #8
 8003d48:	6803      	ldr	r3, [r0, #0]
 8003d4a:	42b3      	cmp	r3, r6
 8003d4c:	f000 809c 	beq.w	8003e88 <HAL_ADCEx_InjectedConfigChannel+0x398>
 8003d50:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8003d54:	42b3      	cmp	r3, r6
 8003d56:	f000 8097 	beq.w	8003e88 <HAL_ADCEx_InjectedConfigChannel+0x398>
 8003d5a:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8003d5c:	4332      	orrs	r2, r6
 8003d5e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->JSQR           ,
 8003d60:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8003d62:	4e22      	ldr	r6, [pc, #136]	; (8003dec <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 8003d64:	4035      	ands	r5, r6
 8003d66:	4315      	orrs	r5, r2
 8003d68:	64dd      	str	r5, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003d6a:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d6c:	f04f 0c00 	mov.w	ip, #0
 8003d70:	e705      	b.n	8003b7e <HAL_ADCEx_InjectedConfigChannel+0x8e>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003d72:	684b      	ldr	r3, [r1, #4]
 8003d74:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8003d76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      hadc->InjectionConfig.ChannelCount --;
 8003d7a:	1e6f      	subs	r7, r5, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	680d      	ldr	r5, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8003d80:	64c7      	str	r7, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003d82:	3302      	adds	r3, #2
 8003d84:	fa05 fc03 	lsl.w	ip, r5, r3
 8003d88:	251f      	movs	r5, #31
 8003d8a:	409d      	lsls	r5, r3
 8003d8c:	ea26 0505 	bic.w	r5, r6, r5
 8003d90:	ea45 050c 	orr.w	r5, r5, ip
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003d94:	6803      	ldr	r3, [r0, #0]
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003d96:	6485      	str	r5, [r0, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8003d98:	2f00      	cmp	r7, #0
 8003d9a:	d1e7      	bne.n	8003d6c <HAL_ADCEx_InjectedConfigChannel+0x27c>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d9e:	4e13      	ldr	r6, [pc, #76]	; (8003dec <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 8003da0:	4032      	ands	r2, r6
 8003da2:	4315      	orrs	r5, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da4:	46bc      	mov	ip, r7
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003da6:	64dd      	str	r5, [r3, #76]	; 0x4c
 8003da8:	e6e9      	b.n	8003b7e <HAL_ADCEx_InjectedConfigChannel+0x8e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003daa:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8003dae:	6999      	ldr	r1, [r3, #24]
 8003db0:	3c1b      	subs	r4, #27
 8003db2:	2607      	movs	r6, #7
 8003db4:	40a5      	lsls	r5, r4
 8003db6:	fa06 f404 	lsl.w	r4, r6, r4
 8003dba:	ea21 0104 	bic.w	r1, r1, r4
 8003dbe:	4329      	orrs	r1, r5
 8003dc0:	6199      	str	r1, [r3, #24]
 8003dc2:	e73c      	b.n	8003c3e <HAL_ADCEx_InjectedConfigChannel+0x14e>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8003dc4:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8003dc8:	4d04      	ldr	r5, [pc, #16]	; (8003ddc <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8003dca:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8003dcc:	4035      	ands	r5, r6
 8003dce:	432a      	orrs	r2, r5
 8003dd0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dd4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8003dd6:	e722      	b.n	8003c1e <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8003dd8:	50000400 	.word	0x50000400
 8003ddc:	83fff000 	.word	0x83fff000
 8003de0:	50000100 	.word	0x50000100
 8003de4:	50000700 	.word	0x50000700
 8003de8:	50000300 	.word	0x50000300
 8003dec:	82082000 	.word	0x82082000
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8003df0:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8003df4:	4d60      	ldr	r5, [pc, #384]	; (8003f78 <HAL_ADCEx_InjectedConfigChannel+0x488>)
 8003df6:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8003df8:	4035      	ands	r5, r6
 8003dfa:	432a      	orrs	r2, r5
 8003dfc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e00:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8003e02:	e70c      	b.n	8003c1e <HAL_ADCEx_InjectedConfigChannel+0x12e>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8003e04:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8003e08:	4d5b      	ldr	r5, [pc, #364]	; (8003f78 <HAL_ADCEx_InjectedConfigChannel+0x488>)
 8003e0a:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8003e0c:	4035      	ands	r5, r6
 8003e0e:	432a      	orrs	r2, r5
 8003e10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e14:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8003e16:	e702      	b.n	8003c1e <HAL_ADCEx_InjectedConfigChannel+0x12e>
        tmp_hal_status = HAL_ERROR;
 8003e18:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e1a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003e1c:	f042 0220 	orr.w	r2, r2, #32
 8003e20:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003e22:	e6cd      	b.n	8003bc0 <HAL_ADCEx_InjectedConfigChannel+0xd0>
 8003e24:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003e28:	689c      	ldr	r4, [r3, #8]
 8003e2a:	f004 0403 	and.w	r4, r4, #3
 8003e2e:	2c01      	cmp	r4, #1
 8003e30:	d01c      	beq.n	8003e6c <HAL_ADCEx_InjectedConfigChannel+0x37c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003e32:	68ac      	ldr	r4, [r5, #8]
 8003e34:	f004 0403 	and.w	r4, r4, #3
 8003e38:	2c01      	cmp	r4, #1
 8003e3a:	d02d      	beq.n	8003e98 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003e3c:	2a10      	cmp	r2, #16
 8003e3e:	d02f      	beq.n	8003ea0 <HAL_ADCEx_InjectedConfigChannel+0x3b0>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003e40:	2a11      	cmp	r2, #17
 8003e42:	d04a      	beq.n	8003eda <HAL_ADCEx_InjectedConfigChannel+0x3ea>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8003e44:	2a12      	cmp	r2, #18
 8003e46:	f47f af24 	bne.w	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003e4a:	688b      	ldr	r3, [r1, #8]
 8003e4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e50:	608b      	str	r3, [r1, #8]
 8003e52:	e71e      	b.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003e54:	7f4d      	ldrb	r5, [r1, #29]
 8003e56:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	e6b0      	b.n	8003bc0 <HAL_ADCEx_InjectedConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8003e5e:	f04f 0c02 	mov.w	ip, #2
}
 8003e62:	4660      	mov	r0, ip
 8003e64:	b003      	add	sp, #12
 8003e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e68:	4d44      	ldr	r5, [pc, #272]	; (8003f7c <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8003e6a:	e7dd      	b.n	8003e28 <HAL_ADCEx_InjectedConfigChannel+0x338>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003e6c:	681c      	ldr	r4, [r3, #0]
 8003e6e:	07e6      	lsls	r6, r4, #31
 8003e70:	d5df      	bpl.n	8003e32 <HAL_ADCEx_InjectedConfigChannel+0x342>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e72:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e74:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8003e78:	f04f 0c01 	mov.w	ip, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e7c:	6403      	str	r3, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003e7e:	e708      	b.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003e80:	680a      	ldr	r2, [r1, #0]
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003e82:	6803      	ldr	r3, [r0, #0]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003e84:	0212      	lsls	r2, r2, #8
 8003e86:	e76b      	b.n	8003d60 <HAL_ADCEx_InjectedConfigChannel+0x270>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003e88:	2d08      	cmp	r5, #8
 8003e8a:	d033      	beq.n	8003ef4 <HAL_ADCEx_InjectedConfigChannel+0x404>
 8003e8c:	2d14      	cmp	r5, #20
 8003e8e:	d043      	beq.n	8003f18 <HAL_ADCEx_InjectedConfigChannel+0x428>
 8003e90:	2d1c      	cmp	r5, #28
 8003e92:	bf08      	it	eq
 8003e94:	2510      	moveq	r5, #16
 8003e96:	e760      	b.n	8003d5a <HAL_ADCEx_InjectedConfigChannel+0x26a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003e98:	682c      	ldr	r4, [r5, #0]
 8003e9a:	07e4      	lsls	r4, r4, #31
 8003e9c:	d4e9      	bmi.n	8003e72 <HAL_ADCEx_InjectedConfigChannel+0x382>
 8003e9e:	e7cd      	b.n	8003e3c <HAL_ADCEx_InjectedConfigChannel+0x34c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ea4:	f47f aef5 	bne.w	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8003eaa:	4c36      	ldr	r4, [pc, #216]	; (8003f84 <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8003eac:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003eae:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003eb0:	fba4 4303 	umull	r4, r3, r4, r3
 8003eb4:	0c9b      	lsrs	r3, r3, #18
 8003eb6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003eba:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003ebc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003ec0:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ec2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003ec4:	9b01      	ldr	r3, [sp, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f43f aee3 	beq.w	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
            wait_loop_index--;
 8003ecc:	9b01      	ldr	r3, [sp, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003ed2:	9b01      	ldr	r3, [sp, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1f9      	bne.n	8003ecc <HAL_ADCEx_InjectedConfigChannel+0x3dc>
 8003ed8:	e6db      	b.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ede:	f47f aed8 	bne.w	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003ee2:	688b      	ldr	r3, [r1, #8]
 8003ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ee8:	608b      	str	r3, [r1, #8]
 8003eea:	e6d2      	b.n	8003c92 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	07df      	lsls	r7, r3, #31
 8003ef0:	d4bf      	bmi.n	8003e72 <HAL_ADCEx_InjectedConfigChannel+0x382>
 8003ef2:	e6c9      	b.n	8003c88 <HAL_ADCEx_InjectedConfigChannel+0x198>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003ef4:	2534      	movs	r5, #52	; 0x34
 8003ef6:	e730      	b.n	8003d5a <HAL_ADCEx_InjectedConfigChannel+0x26a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003ef8:	2d08      	cmp	r5, #8
 8003efa:	d00b      	beq.n	8003f14 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8003efc:	2d14      	cmp	r5, #20
 8003efe:	d00d      	beq.n	8003f1c <HAL_ADCEx_InjectedConfigChannel+0x42c>
 8003f00:	2d1c      	cmp	r5, #28
 8003f02:	bf08      	it	eq
 8003f04:	2510      	moveq	r5, #16
 8003f06:	e61a      	b.n	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8003f08:	1e7a      	subs	r2, r7, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003f0a:	6803      	ldr	r3, [r0, #0]
 8003f0c:	4617      	mov	r7, r2
 8003f0e:	e619      	b.n	8003b44 <HAL_ADCEx_InjectedConfigChannel+0x54>
 8003f10:	4d1d      	ldr	r5, [pc, #116]	; (8003f88 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 8003f12:	e789      	b.n	8003e28 <HAL_ADCEx_InjectedConfigChannel+0x338>
 8003f14:	2534      	movs	r5, #52	; 0x34
 8003f16:	e612      	b.n	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003f18:	251c      	movs	r5, #28
 8003f1a:	e71e      	b.n	8003d5a <HAL_ADCEx_InjectedConfigChannel+0x26a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003f1c:	251c      	movs	r5, #28
 8003f1e:	e60e      	b.n	8003b3e <HAL_ADCEx_InjectedConfigChannel+0x4e>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003f20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f22:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003f26:	ebb2 6f86 	cmp.w	r2, r6, lsl #26
 8003f2a:	ea4f 6586 	mov.w	r5, r6, lsl #26
 8003f2e:	d014      	beq.n	8003f5a <HAL_ADCEx_InjectedConfigChannel+0x46a>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003f30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f32:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003f36:	4295      	cmp	r5, r2
 8003f38:	d014      	beq.n	8003f64 <HAL_ADCEx_InjectedConfigChannel+0x474>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003f3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f3c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003f40:	4295      	cmp	r5, r2
 8003f42:	d014      	beq.n	8003f6e <HAL_ADCEx_InjectedConfigChannel+0x47e>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003f44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f46:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003f4a:	4295      	cmp	r5, r2
 8003f4c:	f47f ae67 	bne.w	8003c1e <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003f50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f56:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f58:	e661      	b.n	8003c1e <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003f5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f5c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60
 8003f62:	e7e5      	b.n	8003f30 <HAL_ADCEx_InjectedConfigChannel+0x440>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003f64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f6a:	665a      	str	r2, [r3, #100]	; 0x64
 8003f6c:	e7e5      	b.n	8003f3a <HAL_ADCEx_InjectedConfigChannel+0x44a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003f6e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f74:	669a      	str	r2, [r3, #104]	; 0x68
 8003f76:	e7e5      	b.n	8003f44 <HAL_ADCEx_InjectedConfigChannel+0x454>
 8003f78:	83fff000 	.word	0x83fff000
 8003f7c:	50000100 	.word	0x50000100
 8003f80:	20000004 	.word	0x20000004
 8003f84:	431bde83 	.word	0x431bde83
 8003f88:	50000500 	.word	0x50000500

08003f8c <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003f8c:	6803      	ldr	r3, [r0, #0]
 8003f8e:	4a45      	ldr	r2, [pc, #276]	; (80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8003f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003f94:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f96:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003f98:	d00e      	beq.n	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8003f9e:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d04b      	beq.n	800403e <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 8003fa6:	4c40      	ldr	r4, [pc, #256]	; (80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8003fa8:	42a3      	cmp	r3, r4
 8003faa:	d005      	beq.n	8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8003fac:	2201      	movs	r2, #1
} 
 8003fae:	4610      	mov	r0, r2
 8003fb0:	bcf0      	pop	{r4, r5, r6, r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8003fb8:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 8003fbc:	f1bc 0f01 	cmp.w	ip, #1
 8003fc0:	d043      	beq.n	800404a <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8003fc2:	2401      	movs	r4, #1
 8003fc4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003fc8:	689c      	ldr	r4, [r3, #8]
 8003fca:	0766      	lsls	r6, r4, #29
 8003fcc:	d50a      	bpl.n	8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003fd0:	f043 0320 	orr.w	r3, r3, #32
    tmp_hal_status = HAL_ERROR;
 8003fd4:	2201      	movs	r2, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd6:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
} 
 8003fde:	bcf0      	pop	{r4, r5, r6, r7}
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003fe4:	6894      	ldr	r4, [r2, #8]
 8003fe6:	0764      	lsls	r4, r4, #29
 8003fe8:	d4f1      	bmi.n	8003fce <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fee:	d046      	beq.n	800407e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003ff0:	4f2c      	ldr	r7, [pc, #176]	; (80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8003ff2:	4e2e      	ldr	r6, [pc, #184]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8003ff4:	4c2e      	ldr	r4, [pc, #184]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 8003ff6:	42bb      	cmp	r3, r7
 8003ff8:	bf08      	it	eq
 8003ffa:	4634      	moveq	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ffc:	b34d      	cbz	r5, 8004052 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003ffe:	68a6      	ldr	r6, [r4, #8]
 8004000:	684f      	ldr	r7, [r1, #4]
 8004002:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 8004006:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 800400a:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 800400e:	ea46 060c 	orr.w	r6, r6, ip
 8004012:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004014:	689e      	ldr	r6, [r3, #8]
 8004016:	f006 0603 	and.w	r6, r6, #3
 800401a:	2e01      	cmp	r6, #1
 800401c:	d03d      	beq.n	800409a <HAL_ADCEx_MultiModeConfigChannel+0x10e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800401e:	6893      	ldr	r3, [r2, #8]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d030      	beq.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0xfe>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004028:	68a2      	ldr	r2, [r4, #8]
 800402a:	688b      	ldr	r3, [r1, #8]
 800402c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004030:	431d      	orrs	r5, r3
 8004032:	f022 020f 	bic.w	r2, r2, #15
 8004036:	4315      	orrs	r5, r2
 8004038:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403a:	2200      	movs	r2, #0
 800403c:	e7cc      	b.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 800403e:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 8004042:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8004044:	f1bc 0f01 	cmp.w	ip, #1
 8004048:	d1bb      	bne.n	8003fc2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800404a:	2202      	movs	r2, #2
} 
 800404c:	4610      	mov	r0, r2
 800404e:	bcf0      	pop	{r4, r5, r6, r7}
 8004050:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004052:	68a1      	ldr	r1, [r4, #8]
 8004054:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004058:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800405a:	6899      	ldr	r1, [r3, #8]
 800405c:	f001 0103 	and.w	r1, r1, #3
 8004060:	2901      	cmp	r1, #1
 8004062:	d016      	beq.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x106>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004064:	6893      	ldr	r3, [r2, #8]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d009      	beq.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800406e:	68a3      	ldr	r3, [r4, #8]
 8004070:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004074:	f023 030f 	bic.w	r3, r3, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004078:	2200      	movs	r2, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800407a:	60a3      	str	r3, [r4, #8]
 800407c:	e7ac      	b.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800407e:	4c0b      	ldr	r4, [pc, #44]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8004080:	e7bc      	b.n	8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x70>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004082:	6813      	ldr	r3, [r2, #0]
 8004084:	07db      	lsls	r3, r3, #31
 8004086:	d4d8      	bmi.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004088:	e7f1      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800408a:	6813      	ldr	r3, [r2, #0]
 800408c:	07de      	lsls	r6, r3, #31
 800408e:	d4d4      	bmi.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004090:	e7ca      	b.n	8004028 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	07d9      	lsls	r1, r3, #31
 8004096:	d4d0      	bmi.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004098:	e7e4      	b.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	07df      	lsls	r7, r3, #31
 800409e:	d5be      	bpl.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80040a0:	e7cb      	b.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80040a2:	bf00      	nop
 80040a4:	50000100 	.word	0x50000100
 80040a8:	50000500 	.word	0x50000500
 80040ac:	50000300 	.word	0x50000300
 80040b0:	50000700 	.word	0x50000700

080040b4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040b4:	2800      	cmp	r0, #0
 80040b6:	d07b      	beq.n	80041b0 <HAL_CAN_Init+0xfc>
{
 80040b8:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 80040be:	4604      	mov	r4, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d072      	beq.n	80041aa <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040c4:	6822      	ldr	r2, [r4, #0]
 80040c6:	6813      	ldr	r3, [r2, #0]
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040ce:	f7fe fff5 	bl	80030bc <HAL_GetTick>
 80040d2:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040d4:	e004      	b.n	80040e0 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040d6:	f7fe fff1 	bl	80030bc <HAL_GetTick>
 80040da:	1b43      	subs	r3, r0, r5
 80040dc:	2b0a      	cmp	r3, #10
 80040de:	d85b      	bhi.n	8004198 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	07d1      	lsls	r1, r2, #31
 80040e6:	d5f6      	bpl.n	80040d6 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	f022 0202 	bic.w	r2, r2, #2
 80040ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040f0:	f7fe ffe4 	bl	80030bc <HAL_GetTick>
 80040f4:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80040f6:	e004      	b.n	8004102 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040f8:	f7fe ffe0 	bl	80030bc <HAL_GetTick>
 80040fc:	1b40      	subs	r0, r0, r5
 80040fe:	280a      	cmp	r0, #10
 8004100:	d84a      	bhi.n	8004198 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	0792      	lsls	r2, r2, #30
 8004108:	d4f6      	bmi.n	80040f8 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800410a:	7e22      	ldrb	r2, [r4, #24]
 800410c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	bf0c      	ite	eq
 8004112:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004116:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800411a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800411c:	7e62      	ldrb	r2, [r4, #25]
 800411e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	bf0c      	ite	eq
 8004124:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004128:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800412c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800412e:	7ea2      	ldrb	r2, [r4, #26]
 8004130:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	bf0c      	ite	eq
 8004136:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800413a:	f022 0220 	bicne.w	r2, r2, #32
 800413e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004140:	7ee2      	ldrb	r2, [r4, #27]
 8004142:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	bf0c      	ite	eq
 8004148:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800414c:	f042 0210 	orrne.w	r2, r2, #16
 8004150:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004152:	7f22      	ldrb	r2, [r4, #28]
 8004154:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	bf0c      	ite	eq
 800415a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800415e:	f022 0208 	bicne.w	r2, r2, #8
 8004162:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004164:	7f62      	ldrb	r2, [r4, #29]
 8004166:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	bf0c      	ite	eq
 800416c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004170:	f022 0204 	bicne.w	r2, r2, #4
 8004174:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004176:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800417a:	6921      	ldr	r1, [r4, #16]
 800417c:	4302      	orrs	r2, r0
 800417e:	430a      	orrs	r2, r1
 8004180:	6960      	ldr	r0, [r4, #20]
 8004182:	6861      	ldr	r1, [r4, #4]
 8004184:	4302      	orrs	r2, r0
 8004186:	3901      	subs	r1, #1
 8004188:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800418a:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800418c:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800418e:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004190:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8004192:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8004196:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004198:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800419a:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800419c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80041a2:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 80041a6:	2001      	movs	r0, #1
}
 80041a8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80041aa:	f7fd f841 	bl	8001230 <HAL_CAN_MspInit>
 80041ae:	e789      	b.n	80040c4 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 80041b0:	2001      	movs	r0, #1
}
 80041b2:	4770      	bx	lr

080041b4 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80041b4:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80041b8:	3a01      	subs	r2, #1
 80041ba:	2a01      	cmp	r2, #1
{
 80041bc:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 80041be:	d905      	bls.n	80041cc <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041c0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80041c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 80041c6:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80041ca:	4770      	bx	lr
  CAN_TypeDef *can_ip = hcan->Instance;
 80041cc:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80041ce:	6948      	ldr	r0, [r1, #20]
{
 80041d0:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041d2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80041d6:	f044 0401 	orr.w	r4, r4, #1
 80041da:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80041de:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80041e2:	2501      	movs	r5, #1
 80041e4:	f000 021f 	and.w	r2, r0, #31
 80041e8:	fa05 f202 	lsl.w	r2, r5, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80041ec:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80041ee:	ea24 0402 	bic.w	r4, r4, r2
 80041f2:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
 80041f6:	43d4      	mvns	r4, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	d13d      	bne.n	8004278 <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80041fc:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004200:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004202:	4025      	ands	r5, r4
 8004204:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004208:	888d      	ldrh	r5, [r1, #4]
 800420a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800420e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004212:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004216:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004218:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800421a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800421e:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004222:	6988      	ldr	r0, [r1, #24]
 8004224:	bb10      	cbnz	r0, 800426c <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004226:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800422a:	4020      	ands	r0, r4
 800422c:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004230:	6908      	ldr	r0, [r1, #16]
 8004232:	b9a8      	cbnz	r0, 8004260 <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004234:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004238:	4004      	ands	r4, r0
 800423a:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800423e:	6a09      	ldr	r1, [r1, #32]
 8004240:	2901      	cmp	r1, #1
 8004242:	d104      	bne.n	800424e <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004244:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8004248:	430a      	orrs	r2, r1
 800424a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800424e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004252:	f022 0201 	bic.w	r2, r2, #1
    return HAL_OK;
 8004256:	2000      	movs	r0, #0
}
 8004258:	bc70      	pop	{r4, r5, r6}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800425a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800425e:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004260:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004264:	4310      	orrs	r0, r2
 8004266:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 800426a:	e7e8      	b.n	800423e <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800426c:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8004270:	4310      	orrs	r0, r2
 8004272:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 8004276:	e7db      	b.n	8004230 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004278:	2d01      	cmp	r5, #1
 800427a:	d1d2      	bne.n	8004222 <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800427c:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004280:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004282:	4315      	orrs	r5, r2
 8004284:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004288:	888d      	ldrh	r5, [r1, #4]
 800428a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800428e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004292:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004296:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004298:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800429a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800429e:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
 80042a2:	e7be      	b.n	8004222 <HAL_CAN_ConfigFilter+0x6e>

080042a4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80042a4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80042a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80042aa:	2b01      	cmp	r3, #1
{
 80042ac:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80042ae:	d006      	beq.n	80042be <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042b0:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80042b2:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042b8:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 80042ba:	4630      	mov	r0, r6
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042be:	6802      	ldr	r2, [r0, #0]
 80042c0:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 80042c2:	2302      	movs	r3, #2
 80042c4:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80042d0:	f7fe fef4 	bl	80030bc <HAL_GetTick>
 80042d4:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042d6:	e004      	b.n	80042e2 <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042d8:	f7fe fef0 	bl	80030bc <HAL_GetTick>
 80042dc:	1b43      	subs	r3, r0, r5
 80042de:	2b0a      	cmp	r3, #10
 80042e0:	d808      	bhi.n	80042f4 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f013 0301 	ands.w	r3, r3, #1
 80042ea:	d1f5      	bne.n	80042d8 <HAL_CAN_Start+0x34>
    return HAL_OK;
 80042ec:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042ee:	6263      	str	r3, [r4, #36]	; 0x24
}
 80042f0:	4630      	mov	r0, r6
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80042f6:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fc:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80042fe:	f884 2020 	strb.w	r2, [r4, #32]
}
 8004302:	4630      	mov	r0, r6
 8004304:	bd70      	pop	{r4, r5, r6, pc}
 8004306:	bf00      	nop

08004308 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004308:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800430a:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800430e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004312:	f1be 0f01 	cmp.w	lr, #1
{
 8004316:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8004318:	d86d      	bhi.n	80043f6 <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800431a:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800431c:	b951      	cbnz	r1, 8004334 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800431e:	68c4      	ldr	r4, [r0, #12]
 8004320:	07a5      	lsls	r5, r4, #30
 8004322:	d10a      	bne.n	800433a <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004324:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8004328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 800432c:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800432e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8004332:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004334:	6904      	ldr	r4, [r0, #16]
 8004336:	07a4      	lsls	r4, r4, #30
 8004338:	d0f4      	beq.n	8004324 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800433a:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 800433e:	010c      	lsls	r4, r1, #4
 8004340:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8004344:	f005 0504 	and.w	r5, r5, #4
 8004348:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800434a:	2d00      	cmp	r5, #0
 800434c:	d05a      	beq.n	8004404 <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800434e:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8004352:	08ed      	lsrs	r5, r5, #3
 8004354:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004356:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800435a:	f005 0502 	and.w	r5, r5, #2
 800435e:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004360:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004364:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004368:	f005 050f 	and.w	r5, r5, #15
 800436c:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800436e:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004370:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004374:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8004378:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800437a:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800437c:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004380:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004382:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004384:	f8dc 2000 	ldr.w	r2, [ip]
 8004388:	4422      	add	r2, r4
 800438a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800438e:	0a12      	lsrs	r2, r2, #8
 8004390:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004392:	f8dc 2000 	ldr.w	r2, [ip]
 8004396:	4422      	add	r2, r4
 8004398:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800439c:	0c12      	lsrs	r2, r2, #16
 800439e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80043a0:	f8dc 2000 	ldr.w	r2, [ip]
 80043a4:	4422      	add	r2, r4
 80043a6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80043aa:	0e12      	lsrs	r2, r2, #24
 80043ac:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80043ae:	f8dc 2000 	ldr.w	r2, [ip]
 80043b2:	4422      	add	r2, r4
 80043b4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80043b8:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80043ba:	f8dc 2000 	ldr.w	r2, [ip]
 80043be:	4422      	add	r2, r4
 80043c0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80043c4:	0a12      	lsrs	r2, r2, #8
 80043c6:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80043c8:	f8dc 2000 	ldr.w	r2, [ip]
 80043cc:	4422      	add	r2, r4
 80043ce:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80043d2:	0c12      	lsrs	r2, r2, #16
 80043d4:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80043d6:	f8dc 2000 	ldr.w	r2, [ip]
 80043da:	4422      	add	r2, r4
 80043dc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80043e0:	0e12      	lsrs	r2, r2, #24
 80043e2:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043e4:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043e8:	b989      	cbnz	r1, 800440e <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043ea:	68d3      	ldr	r3, [r2, #12]
 80043ec:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80043f0:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043f2:	60d3      	str	r3, [r2, #12]
}
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80043f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 80043fc:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043fe:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8004402:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004404:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8004408:	0d6d      	lsrs	r5, r5, #21
 800440a:	6015      	str	r5, [r2, #0]
 800440c:	e7a3      	b.n	8004356 <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800440e:	6913      	ldr	r3, [r2, #16]
 8004410:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8004414:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004416:	6113      	str	r3, [r2, #16]
}
 8004418:	bd70      	pop	{r4, r5, r6, pc}
 800441a:	bf00      	nop

0800441c <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800441c:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004420:	3a01      	subs	r2, #1
 8004422:	2a01      	cmp	r2, #1
{
 8004424:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8004426:	d905      	bls.n	8004434 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004428:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800442a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 800442e:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004430:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004432:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004434:	6802      	ldr	r2, [r0, #0]
 8004436:	6953      	ldr	r3, [r2, #20]
 8004438:	4319      	orrs	r1, r3
    return HAL_OK;
 800443a:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800443c:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800443e:	4770      	bx	lr

08004440 <HAL_CAN_TxMailbox0CompleteCallback>:
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop

08004444 <HAL_CAN_TxMailbox1CompleteCallback>:
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop

08004448 <HAL_CAN_TxMailbox2CompleteCallback>:
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop

0800444c <HAL_CAN_TxMailbox0AbortCallback>:
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <HAL_CAN_TxMailbox1AbortCallback>:
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop

08004454 <HAL_CAN_TxMailbox2AbortCallback>:
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop

08004458 <HAL_CAN_RxFifo0FullCallback>:
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop

0800445c <HAL_CAN_RxFifo1MsgPendingCallback>:
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop

08004460 <HAL_CAN_RxFifo1FullCallback>:
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop

08004464 <HAL_CAN_SleepCallback>:
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop

08004468 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop

0800446c <HAL_CAN_ErrorCallback>:
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop

08004470 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004474:	6803      	ldr	r3, [r0, #0]
 8004476:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004478:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800447c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800447e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004482:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004486:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800448a:	f014 0601 	ands.w	r6, r4, #1
{
 800448e:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004490:	d025      	beq.n	80044de <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004492:	f017 0601 	ands.w	r6, r7, #1
 8004496:	f040 808f 	bne.w	80045b8 <HAL_CAN_IRQHandler+0x148>
 800449a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800449e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044a2:	05f8      	lsls	r0, r7, #23
 80044a4:	d50d      	bpl.n	80044c2 <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044a6:	682b      	ldr	r3, [r5, #0]
 80044a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80044ac:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80044ae:	05bb      	lsls	r3, r7, #22
 80044b0:	f100 80be 	bmi.w	8004630 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80044b4:	0578      	lsls	r0, r7, #21
 80044b6:	f100 80e4 	bmi.w	8004682 <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80044ba:	053b      	lsls	r3, r7, #20
 80044bc:	f140 80f0 	bpl.w	80046a0 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80044c0:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80044c2:	03f8      	lsls	r0, r7, #15
 80044c4:	d50b      	bpl.n	80044de <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80044cc:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80044ce:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80044d0:	f100 80ba 	bmi.w	8004648 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80044d4:	037a      	lsls	r2, r7, #13
 80044d6:	f140 80cf 	bpl.w	8004678 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80044da:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80044de:	0727      	lsls	r7, r4, #28
 80044e0:	d502      	bpl.n	80044e8 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80044e2:	f01b 0f10 	tst.w	fp, #16
 80044e6:	d161      	bne.n	80045ac <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80044e8:	0760      	lsls	r0, r4, #29
 80044ea:	d503      	bpl.n	80044f4 <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80044ec:	f01b 0f08 	tst.w	fp, #8
 80044f0:	f040 808c 	bne.w	800460c <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80044f4:	07a1      	lsls	r1, r4, #30
 80044f6:	d504      	bpl.n	8004502 <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	079a      	lsls	r2, r3, #30
 80044fe:	f040 808c 	bne.w	800461a <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004502:	0663      	lsls	r3, r4, #25
 8004504:	d502      	bpl.n	800450c <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004506:	f01a 0f10 	tst.w	sl, #16
 800450a:	d149      	bne.n	80045a0 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800450c:	06a7      	lsls	r7, r4, #26
 800450e:	d502      	bpl.n	8004516 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004510:	f01a 0f08 	tst.w	sl, #8
 8004514:	d173      	bne.n	80045fe <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004516:	06e0      	lsls	r0, r4, #27
 8004518:	d503      	bpl.n	8004522 <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800451a:	682b      	ldr	r3, [r5, #0]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	0799      	lsls	r1, r3, #30
 8004520:	d162      	bne.n	80045e8 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004522:	03a2      	lsls	r2, r4, #14
 8004524:	d502      	bpl.n	800452c <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004526:	f018 0f10 	tst.w	r8, #16
 800452a:	d161      	bne.n	80045f0 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800452c:	03e3      	lsls	r3, r4, #15
 800452e:	d502      	bpl.n	8004536 <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004530:	f018 0f08 	tst.w	r8, #8
 8004534:	d175      	bne.n	8004622 <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004536:	0427      	lsls	r7, r4, #16
 8004538:	d505      	bpl.n	8004546 <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800453a:	f018 0f04 	tst.w	r8, #4
 800453e:	d106      	bne.n	800454e <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004540:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004542:	2204      	movs	r2, #4
 8004544:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004546:	2e00      	cmp	r6, #0
 8004548:	d146      	bne.n	80045d8 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800454a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800454e:	05e0      	lsls	r0, r4, #23
 8004550:	d504      	bpl.n	800455c <HAL_CAN_IRQHandler+0xec>
 8004552:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8004556:	bf18      	it	ne
 8004558:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800455c:	05a1      	lsls	r1, r4, #22
 800455e:	d504      	bpl.n	800456a <HAL_CAN_IRQHandler+0xfa>
 8004560:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8004564:	bf18      	it	ne
 8004566:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800456a:	0562      	lsls	r2, r4, #21
 800456c:	d504      	bpl.n	8004578 <HAL_CAN_IRQHandler+0x108>
 800456e:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8004572:	bf18      	it	ne
 8004574:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004578:	0523      	lsls	r3, r4, #20
 800457a:	d5e1      	bpl.n	8004540 <HAL_CAN_IRQHandler+0xd0>
 800457c:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8004580:	d0de      	beq.n	8004540 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 8004582:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8004586:	f000 809a 	beq.w	80046be <HAL_CAN_IRQHandler+0x24e>
 800458a:	d861      	bhi.n	8004650 <HAL_CAN_IRQHandler+0x1e0>
 800458c:	f1b9 0f20 	cmp.w	r9, #32
 8004590:	f000 8083 	beq.w	800469a <HAL_CAN_IRQHandler+0x22a>
 8004594:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8004598:	d168      	bne.n	800466c <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 800459a:	f046 0620 	orr.w	r6, r6, #32
            break;
 800459e:	e05f      	b.n	8004660 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80045a4:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80045a8:	611a      	str	r2, [r3, #16]
 80045aa:	e7af      	b.n	800450c <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045b0:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	e797      	b.n	80044e8 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80045b8:	2201      	movs	r2, #1
 80045ba:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80045bc:	07bb      	lsls	r3, r7, #30
 80045be:	d43b      	bmi.n	8004638 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80045c0:	077e      	lsls	r6, r7, #29
 80045c2:	d460      	bmi.n	8004686 <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80045c4:	f017 0608 	ands.w	r6, r7, #8
 80045c8:	d06e      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x238>
 80045ca:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80045ce:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80045d2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80045d6:	e764      	b.n	80044a2 <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 80045d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80045da:	431e      	orrs	r6, r3
    HAL_CAN_ErrorCallback(hcan);
 80045dc:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80045de:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80045e0:	f7ff ff44 	bl	800446c <HAL_CAN_ErrorCallback>
}
 80045e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80045e8:	4628      	mov	r0, r5
 80045ea:	f7ff ff37 	bl	800445c <HAL_CAN_RxFifo1MsgPendingCallback>
 80045ee:	e798      	b.n	8004522 <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80045f0:	682b      	ldr	r3, [r5, #0]
 80045f2:	2210      	movs	r2, #16
 80045f4:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80045f6:	4628      	mov	r0, r5
 80045f8:	f7ff ff34 	bl	8004464 <HAL_CAN_SleepCallback>
 80045fc:	e796      	b.n	800452c <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80045fe:	682b      	ldr	r3, [r5, #0]
 8004600:	2208      	movs	r2, #8
 8004602:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004604:	4628      	mov	r0, r5
 8004606:	f7ff ff2b 	bl	8004460 <HAL_CAN_RxFifo1FullCallback>
 800460a:	e784      	b.n	8004516 <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	2208      	movs	r2, #8
 8004610:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004612:	4628      	mov	r0, r5
 8004614:	f7ff ff20 	bl	8004458 <HAL_CAN_RxFifo0FullCallback>
 8004618:	e76c      	b.n	80044f4 <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800461a:	4628      	mov	r0, r5
 800461c:	f7fd f95e 	bl	80018dc <HAL_CAN_RxFifo0MsgPendingCallback>
 8004620:	e76f      	b.n	8004502 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	2208      	movs	r2, #8
 8004626:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004628:	4628      	mov	r0, r5
 800462a:	f7ff ff1d 	bl	8004468 <HAL_CAN_WakeUpFromRxMsgCallback>
 800462e:	e782      	b.n	8004536 <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004630:	4628      	mov	r0, r5
 8004632:	f7ff ff07 	bl	8004444 <HAL_CAN_TxMailbox1CompleteCallback>
 8004636:	e744      	b.n	80044c2 <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004638:	f7ff ff02 	bl	8004440 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800463c:	2600      	movs	r6, #0
 800463e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004646:	e72c      	b.n	80044a2 <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004648:	4628      	mov	r0, r5
 800464a:	f7ff fefd 	bl	8004448 <HAL_CAN_TxMailbox2CompleteCallback>
 800464e:	e746      	b.n	80044de <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8004650:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8004654:	d01e      	beq.n	8004694 <HAL_CAN_IRQHandler+0x224>
 8004656:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 800465a:	bf08      	it	eq
 800465c:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	699a      	ldr	r2, [r3, #24]
 8004664:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004668:	619a      	str	r2, [r3, #24]
 800466a:	e76a      	b.n	8004542 <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 800466c:	f1b9 0f10 	cmp.w	r9, #16
 8004670:	d1f6      	bne.n	8004660 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 8004672:	f046 0608 	orr.w	r6, r6, #8
            break;
 8004676:	e7f3      	b.n	8004660 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004678:	033b      	lsls	r3, r7, #12
 800467a:	d51c      	bpl.n	80046b6 <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800467c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8004680:	e72d      	b.n	80044de <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004682:	4616      	mov	r6, r2
 8004684:	e71d      	b.n	80044c2 <HAL_CAN_IRQHandler+0x52>
 8004686:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800468a:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800468e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8004692:	e706      	b.n	80044a2 <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8004694:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8004698:	e7e2      	b.n	8004660 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 800469a:	f046 0610 	orr.w	r6, r6, #16
            break;
 800469e:	e7df      	b.n	8004660 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80046a0:	4628      	mov	r0, r5
 80046a2:	f7ff fed5 	bl	8004450 <HAL_CAN_TxMailbox1AbortCallback>
 80046a6:	e70c      	b.n	80044c2 <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80046a8:	f7ff fed0 	bl	800444c <HAL_CAN_TxMailbox0AbortCallback>
 80046ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046b4:	e6f5      	b.n	80044a2 <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80046b6:	4628      	mov	r0, r5
 80046b8:	f7ff fecc 	bl	8004454 <HAL_CAN_TxMailbox2AbortCallback>
 80046bc:	e70f      	b.n	80044de <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 80046be:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80046c2:	e7cd      	b.n	8004660 <HAL_CAN_IRQHandler+0x1f0>

080046c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046c4:	4907      	ldr	r1, [pc, #28]	; (80046e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80046c6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046c8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ca:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046d2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046d4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046d6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80046de:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046e8:	4b1c      	ldr	r3, [pc, #112]	; (800475c <HAL_NVIC_SetPriority+0x74>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046f0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f2:	f1c3 0e07 	rsb	lr, r3, #7
 80046f6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046fa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046fe:	bf28      	it	cs
 8004700:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004704:	f1bc 0f06 	cmp.w	ip, #6
 8004708:	d91b      	bls.n	8004742 <HAL_NVIC_SetPriority+0x5a>
 800470a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800470c:	f04f 3cff 	mov.w	ip, #4294967295
 8004710:	fa0c fc03 	lsl.w	ip, ip, r3
 8004714:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004718:	f04f 3cff 	mov.w	ip, #4294967295
 800471c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004720:	ea21 010c 	bic.w	r1, r1, ip
 8004724:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004726:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004728:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800472c:	db0c      	blt.n	8004748 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004732:	0109      	lsls	r1, r1, #4
 8004734:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004738:	b2c9      	uxtb	r1, r1
 800473a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800473e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004742:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004744:	4613      	mov	r3, r2
 8004746:	e7e7      	b.n	8004718 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_NVIC_SetPriority+0x78>)
 800474a:	f000 000f 	and.w	r0, r0, #15
 800474e:	0109      	lsls	r1, r1, #4
 8004750:	4403      	add	r3, r0
 8004752:	b2c9      	uxtb	r1, r1
 8004754:	7619      	strb	r1, [r3, #24]
 8004756:	f85d fb04 	ldr.w	pc, [sp], #4
 800475a:	bf00      	nop
 800475c:	e000ed00 	.word	0xe000ed00
 8004760:	e000ecfc 	.word	0xe000ecfc

08004764 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004764:	2800      	cmp	r0, #0
 8004766:	db08      	blt.n	800477a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004768:	0941      	lsrs	r1, r0, #5
 800476a:	4a04      	ldr	r2, [pc, #16]	; (800477c <HAL_NVIC_EnableIRQ+0x18>)
 800476c:	f000 001f 	and.w	r0, r0, #31
 8004770:	2301      	movs	r3, #1
 8004772:	fa03 f000 	lsl.w	r0, r3, r0
 8004776:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800477a:	4770      	bx	lr
 800477c:	e000e100 	.word	0xe000e100

08004780 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004780:	3801      	subs	r0, #1
 8004782:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004786:	d210      	bcs.n	80047aa <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004788:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800478a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800478e:	4c08      	ldr	r4, [pc, #32]	; (80047b0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004790:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004792:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8004796:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800479a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800479e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80047a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a6:	6119      	str	r1, [r3, #16]
 80047a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80047aa:	2001      	movs	r0, #1
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	e000ed00 	.word	0xe000ed00

080047b4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80047b4:	2800      	cmp	r0, #0
 80047b6:	d035      	beq.n	8004824 <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047b8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 80047bc:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047be:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80047c0:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 80047c2:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c4:	6902      	ldr	r2, [r0, #16]
 80047c6:	4323      	orrs	r3, r4
 80047c8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ca:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 80047ce:	4323      	orrs	r3, r4
 80047d0:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d2:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047d4:	4c14      	ldr	r4, [pc, #80]	; (8004828 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d6:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 80047d8:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80047da:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80047de:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80047e2:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047e4:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 80047e6:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047e8:	d912      	bls.n	8004810 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <HAL_DMA_Init+0x78>)
 80047ec:	4a10      	ldr	r2, [pc, #64]	; (8004830 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 80047ee:	4c11      	ldr	r4, [pc, #68]	; (8004834 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80047f0:	440b      	add	r3, r1
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 80047fa:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047fe:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 8004800:	8401      	strh	r1, [r0, #32]
 8004802:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004806:	6382      	str	r2, [r0, #56]	; 0x38
}  
 8004808:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800480c:	4610      	mov	r0, r2
}  
 800480e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <HAL_DMA_Init+0x84>)
 8004812:	4a07      	ldr	r2, [pc, #28]	; (8004830 <HAL_DMA_Init+0x7c>)
 8004814:	440b      	add	r3, r1
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 800481c:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004820:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8004822:	e7ea      	b.n	80047fa <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8004824:	2001      	movs	r0, #1
}  
 8004826:	4770      	bx	lr
 8004828:	40020407 	.word	0x40020407
 800482c:	bffdfbf8 	.word	0xbffdfbf8
 8004830:	cccccccd 	.word	0xcccccccd
 8004834:	40020400 	.word	0x40020400
 8004838:	bffdfff8 	.word	0xbffdfff8

0800483c <HAL_DMA_Start_IT>:
{
 800483c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 800483e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8004842:	2c01      	cmp	r4, #1
 8004844:	d039      	beq.n	80048ba <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8004846:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800484a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800484c:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 800484e:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004852:	d005      	beq.n	8004860 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8004854:	2300      	movs	r3, #0
 8004856:	f880 3020 	strb.w	r3, [r0, #32]
} 
 800485a:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 800485c:	2002      	movs	r0, #2
} 
 800485e:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004860:	2502      	movs	r5, #2
 8004862:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004866:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004868:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800486a:	2500      	movs	r5, #0
 800486c:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800486e:	6825      	ldr	r5, [r4, #0]
 8004870:	f025 0501 	bic.w	r5, r5, #1
 8004874:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004876:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004878:	fa0c f505 	lsl.w	r5, ip, r5
 800487c:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800487e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004880:	6843      	ldr	r3, [r0, #4]
 8004882:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8004884:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8004886:	bf0b      	itete	eq
 8004888:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800488a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800488c:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 800488e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004890:	b153      	cbz	r3, 80048a8 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f043 030e 	orr.w	r3, r3, #14
 8004898:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 80048a0:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80048a2:	6023      	str	r3, [r4, #0]
} 
 80048a4:	bc70      	pop	{r4, r5, r6}
 80048a6:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	f043 030a 	orr.w	r3, r3, #10
 80048ae:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	f023 0304 	bic.w	r3, r3, #4
 80048b6:	6023      	str	r3, [r4, #0]
 80048b8:	e7ef      	b.n	800489a <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80048ba:	2002      	movs	r0, #2
} 
 80048bc:	bc70      	pop	{r4, r5, r6}
 80048be:	4770      	bx	lr

080048c0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048c0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80048c4:	2a02      	cmp	r2, #2
{
 80048c6:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048c8:	d006      	beq.n	80048d8 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ca:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80048cc:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048ce:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80048d0:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80048d4:	2001      	movs	r0, #1
}
 80048d6:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80048d8:	6802      	ldr	r2, [r0, #0]
 80048da:	6811      	ldr	r1, [r2, #0]
 80048dc:	f021 010e 	bic.w	r1, r1, #14
{
 80048e0:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80048e2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80048e4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80048e6:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80048e8:	6811      	ldr	r1, [r2, #0]
 80048ea:	f021 0101 	bic.w	r1, r1, #1
 80048ee:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80048f0:	2201      	movs	r2, #1
 80048f2:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 80048f4:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80048f8:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 80048fa:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 80048fc:	2000      	movs	r0, #0
}
 80048fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004904:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8004908:	2a02      	cmp	r2, #2
 800490a:	d003      	beq.n	8004914 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800490c:	2204      	movs	r2, #4
 800490e:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8004910:	2001      	movs	r0, #1
}
 8004912:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004914:	6802      	ldr	r2, [r0, #0]
 8004916:	6811      	ldr	r1, [r2, #0]
 8004918:	f021 010e 	bic.w	r1, r1, #14
{  
 800491c:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800491e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004920:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004922:	6811      	ldr	r1, [r2, #0]
 8004924:	f021 0101 	bic.w	r1, r1, #1
 8004928:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800492a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800492c:	2101      	movs	r1, #1
 800492e:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8004930:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004932:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8004934:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8004938:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800493c:	b112      	cbz	r2, 8004944 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 800493e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004940:	2000      	movs	r0, #0
}
 8004942:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8004944:	4610      	mov	r0, r2
}
 8004946:	bd10      	pop	{r4, pc}

08004948 <HAL_DMA_IRQHandler>:
{
 8004948:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800494a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800494c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800494e:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004950:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004952:	2304      	movs	r3, #4
 8004954:	4093      	lsls	r3, r2
 8004956:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8004958:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800495a:	d00e      	beq.n	800497a <HAL_DMA_IRQHandler+0x32>
 800495c:	f015 0f04 	tst.w	r5, #4
 8004960:	d00b      	beq.n	800497a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004962:	6822      	ldr	r2, [r4, #0]
 8004964:	0692      	lsls	r2, r2, #26
 8004966:	d403      	bmi.n	8004970 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	f022 0204 	bic.w	r2, r2, #4
 800496e:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8004970:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004972:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8004974:	b1ca      	cbz	r2, 80049aa <HAL_DMA_IRQHandler+0x62>
}  
 8004976:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8004978:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800497a:	2302      	movs	r3, #2
 800497c:	4093      	lsls	r3, r2
 800497e:	420b      	tst	r3, r1
 8004980:	d015      	beq.n	80049ae <HAL_DMA_IRQHandler+0x66>
 8004982:	f015 0f02 	tst.w	r5, #2
 8004986:	d012      	beq.n	80049ae <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004988:	6822      	ldr	r2, [r4, #0]
 800498a:	0692      	lsls	r2, r2, #26
 800498c:	d406      	bmi.n	800499c <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800498e:	6822      	ldr	r2, [r4, #0]
 8004990:	f022 020a 	bic.w	r2, r2, #10
 8004994:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8004996:	2201      	movs	r2, #1
 8004998:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 800499c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800499e:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 80049a0:	2100      	movs	r1, #0
 80049a2:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80049a6:	2a00      	cmp	r2, #0
 80049a8:	d1e5      	bne.n	8004976 <HAL_DMA_IRQHandler+0x2e>
}  
 80049aa:	bc70      	pop	{r4, r5, r6}
 80049ac:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049ae:	2308      	movs	r3, #8
 80049b0:	4093      	lsls	r3, r2
 80049b2:	420b      	tst	r3, r1
 80049b4:	d0f9      	beq.n	80049aa <HAL_DMA_IRQHandler+0x62>
 80049b6:	072b      	lsls	r3, r5, #28
 80049b8:	d5f7      	bpl.n	80049aa <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049ba:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 80049bc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049be:	f023 030e 	bic.w	r3, r3, #14
 80049c2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80049c4:	2301      	movs	r3, #1
 80049c6:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 80049ca:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80049ce:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 80049d0:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049d2:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 80049d4:	2900      	cmp	r1, #0
 80049d6:	d0e8      	beq.n	80049aa <HAL_DMA_IRQHandler+0x62>
}  
 80049d8:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80049da:	4708      	bx	r1

080049dc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049e0:	f8df a188 	ldr.w	sl, [pc, #392]	; 8004b6c <HAL_FLASH_Program+0x190>
{
 80049e4:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80049e6:	f89a 3018 	ldrb.w	r3, [sl, #24]
 80049ea:	2b01      	cmp	r3, #1
{
 80049ec:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 80049ee:	f000 80ad 	beq.w	8004b4c <HAL_FLASH_Program+0x170>
 80049f2:	2301      	movs	r3, #1
 80049f4:	4606      	mov	r6, r0
 80049f6:	4688      	mov	r8, r1
 80049f8:	4693      	mov	fp, r2
 80049fa:	f88a 3018 	strb.w	r3, [sl, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80049fe:	f7fe fb5d 	bl	80030bc <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004a02:	4d59      	ldr	r5, [pc, #356]	; (8004b68 <HAL_FLASH_Program+0x18c>)
  uint32_t tickstart = HAL_GetTick();
 8004a04:	4604      	mov	r4, r0
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004a06:	f24c 3750 	movw	r7, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004a0a:	e005      	b.n	8004a18 <HAL_FLASH_Program+0x3c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004a0c:	f7fe fb56 	bl	80030bc <HAL_GetTick>
 8004a10:	1b00      	subs	r0, r0, r4
 8004a12:	42b8      	cmp	r0, r7
 8004a14:	f200 8083 	bhi.w	8004b1e <HAL_FLASH_Program+0x142>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004a18:	68eb      	ldr	r3, [r5, #12]
 8004a1a:	07db      	lsls	r3, r3, #31
 8004a1c:	d4f6      	bmi.n	8004a0c <HAL_FLASH_Program+0x30>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004a1e:	68eb      	ldr	r3, [r5, #12]
 8004a20:	0698      	lsls	r0, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004a22:	bf44      	itt	mi
 8004a24:	2320      	movmi	r3, #32
 8004a26:	60eb      	strmi	r3, [r5, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004a28:	4b4f      	ldr	r3, [pc, #316]	; (8004b68 <HAL_FLASH_Program+0x18c>)
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	06d1      	lsls	r1, r2, #27
 8004a2e:	d478      	bmi.n	8004b22 <HAL_FLASH_Program+0x146>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004a30:	68df      	ldr	r7, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004a32:	f017 0704 	ands.w	r7, r7, #4
 8004a36:	d174      	bne.n	8004b22 <HAL_FLASH_Program+0x146>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004a38:	2e01      	cmp	r6, #1
 8004a3a:	d003      	beq.n	8004a44 <HAL_FLASH_Program+0x68>
      nbiterations = 4U;
 8004a3c:	2e02      	cmp	r6, #2
 8004a3e:	bf0c      	ite	eq
 8004a40:	2602      	moveq	r6, #2
 8004a42:	2604      	movne	r6, #4
    for (index = 0U; index < nbiterations; index++)
 8004a44:	eb08 0346 	add.w	r3, r8, r6, lsl #1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004a48:	4c47      	ldr	r4, [pc, #284]	; (8004b68 <HAL_FLASH_Program+0x18c>)
 8004a4a:	9301      	str	r3, [sp, #4]
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004a4c:	f24c 3650 	movw	r6, #50000	; 0xc350
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004a50:	f1c7 0220 	rsb	r2, r7, #32
 8004a54:	fa09 f202 	lsl.w	r2, r9, r2
 8004a58:	fa2b f307 	lsr.w	r3, fp, r7
 8004a5c:	4313      	orrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8ca 201c 	str.w	r2, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004a64:	f1a7 0120 	sub.w	r1, r7, #32
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004a68:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8004a6a:	fa29 f101 	lsr.w	r1, r9, r1
 8004a6e:	430b      	orrs	r3, r1
 8004a70:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8004a78:	f8a8 3000 	strh.w	r3, [r8]
  uint32_t tickstart = HAL_GetTick();
 8004a7c:	f7fe fb1e 	bl	80030bc <HAL_GetTick>
 8004a80:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004a82:	e004      	b.n	8004a8e <HAL_FLASH_Program+0xb2>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004a84:	f7fe fb1a 	bl	80030bc <HAL_GetTick>
 8004a88:	1b40      	subs	r0, r0, r5
 8004a8a:	42b0      	cmp	r0, r6
 8004a8c:	d81f      	bhi.n	8004ace <HAL_FLASH_Program+0xf2>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	07db      	lsls	r3, r3, #31
 8004a92:	d4f7      	bmi.n	8004a84 <HAL_FLASH_Program+0xa8>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004a94:	68e3      	ldr	r3, [r4, #12]
 8004a96:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004a98:	bf44      	itt	mi
 8004a9a:	2320      	movmi	r3, #32
 8004a9c:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004a9e:	68e3      	ldr	r3, [r4, #12]
 8004aa0:	06d9      	lsls	r1, r3, #27
 8004aa2:	d41a      	bmi.n	8004ada <HAL_FLASH_Program+0xfe>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004aa4:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004aa6:	f010 0004 	ands.w	r0, r0, #4
 8004aaa:	d116      	bne.n	8004ada <HAL_FLASH_Program+0xfe>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004aac:	6923      	ldr	r3, [r4, #16]
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8004ab4:	9b01      	ldr	r3, [sp, #4]
 8004ab6:	f108 0802 	add.w	r8, r8, #2
 8004aba:	4598      	cmp	r8, r3
 8004abc:	f107 0710 	add.w	r7, r7, #16
 8004ac0:	d1c6      	bne.n	8004a50 <HAL_FLASH_Program+0x74>
  __HAL_UNLOCK(&pFlash);
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8004ac8:	b003      	add	sp, #12
 8004aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	2003      	movs	r0, #3
 8004ad6:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8004ad8:	e7f3      	b.n	8004ac2 <HAL_FLASH_Program+0xe6>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004ada:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <HAL_FLASH_Program+0x18c>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f013 0310 	ands.w	r3, r3, #16
 8004ae2:	d01a      	beq.n	8004b1a <HAL_FLASH_Program+0x13e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004ae4:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	f8ca 301c 	str.w	r3, [sl, #28]
 8004af0:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8004af2:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004af4:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <HAL_FLASH_Program+0x18c>)
 8004af6:	68d2      	ldr	r2, [r2, #12]
 8004af8:	0752      	lsls	r2, r2, #29
 8004afa:	d506      	bpl.n	8004b0a <HAL_FLASH_Program+0x12e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004afc:	f8da 201c 	ldr.w	r2, [sl, #28]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8004b04:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004b06:	f8ca 201c 	str.w	r2, [sl, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004b0a:	4a17      	ldr	r2, [pc, #92]	; (8004b68 <HAL_FLASH_Program+0x18c>)
 8004b0c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004b0e:	6913      	ldr	r3, [r2, #16]
 8004b10:	f023 0301 	bic.w	r3, r3, #1
    return HAL_ERROR;
 8004b14:	2001      	movs	r0, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8004b16:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8004b18:	e7d3      	b.n	8004ac2 <HAL_FLASH_Program+0xe6>
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	e7ea      	b.n	8004af4 <HAL_FLASH_Program+0x118>
 8004b1e:	2003      	movs	r0, #3
 8004b20:	e7cf      	b.n	8004ac2 <HAL_FLASH_Program+0xe6>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <HAL_FLASH_Program+0x18c>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f013 0310 	ands.w	r3, r3, #16
 8004b2a:	d113      	bne.n	8004b54 <HAL_FLASH_Program+0x178>
 8004b2c:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004b2e:	4a0e      	ldr	r2, [pc, #56]	; (8004b68 <HAL_FLASH_Program+0x18c>)
 8004b30:	68d2      	ldr	r2, [r2, #12]
 8004b32:	0752      	lsls	r2, r2, #29
 8004b34:	d506      	bpl.n	8004b44 <HAL_FLASH_Program+0x168>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004b36:	f8da 201c 	ldr.w	r2, [sl, #28]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8004b3e:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004b40:	f8ca 201c 	str.w	r2, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004b44:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <HAL_FLASH_Program+0x18c>)
    return HAL_ERROR;
 8004b46:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004b48:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 8004b4a:	e7ba      	b.n	8004ac2 <HAL_FLASH_Program+0xe6>
  __HAL_LOCK(&pFlash);
 8004b4c:	2002      	movs	r0, #2
}
 8004b4e:	b003      	add	sp, #12
 8004b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004b54:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	f8ca 301c 	str.w	r3, [sl, #28]
 8004b60:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8004b62:	2310      	movs	r3, #16
 8004b64:	e7e3      	b.n	8004b2e <HAL_FLASH_Program+0x152>
 8004b66:	bf00      	nop
 8004b68:	40022000 	.word	0x40022000
 8004b6c:	20001790 	.word	0x20001790

08004b70 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <HAL_FLASH_Unlock+0x1c>)
 8004b72:	6918      	ldr	r0, [r3, #16]
 8004b74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b78:	d006      	beq.n	8004b88 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b7a:	4905      	ldr	r1, [pc, #20]	; (8004b90 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b7c:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004b7e:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004b80:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004b82:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8004b84:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40022000 	.word	0x40022000
 8004b90:	45670123 	.word	0x45670123
 8004b94:	cdef89ab 	.word	0xcdef89ab

08004b98 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004b98:	4a03      	ldr	r2, [pc, #12]	; (8004ba8 <HAL_FLASH_Lock+0x10>)
 8004b9a:	6913      	ldr	r3, [r2, #16]
 8004b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8004ba0:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004ba2:	6113      	str	r3, [r2, #16]
}
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40022000 	.word	0x40022000

08004bac <FLASH_WaitForLastOperation>:
{
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004bb0:	f7fe fa84 	bl	80030bc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004bb4:	4e1e      	ldr	r6, [pc, #120]	; (8004c30 <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 8004bb6:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004bb8:	1c60      	adds	r0, r4, #1
 8004bba:	d112      	bne.n	8004be2 <FLASH_WaitForLastOperation+0x36>
 8004bbc:	4a1c      	ldr	r2, [pc, #112]	; (8004c30 <FLASH_WaitForLastOperation+0x84>)
 8004bbe:	68d3      	ldr	r3, [r2, #12]
 8004bc0:	07d9      	lsls	r1, r3, #31
 8004bc2:	d4fc      	bmi.n	8004bbe <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004bc4:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <FLASH_WaitForLastOperation+0x84>)
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	0690      	lsls	r0, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004bca:	bf44      	itt	mi
 8004bcc:	2220      	movmi	r2, #32
 8004bce:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004bd0:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <FLASH_WaitForLastOperation+0x84>)
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	06d1      	lsls	r1, r2, #27
 8004bd6:	d40f      	bmi.n	8004bf8 <FLASH_WaitForLastOperation+0x4c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004bd8:	68d8      	ldr	r0, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8004bda:	f010 0004 	ands.w	r0, r0, #4
 8004bde:	d10b      	bne.n	8004bf8 <FLASH_WaitForLastOperation+0x4c>
}
 8004be0:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004be2:	68f3      	ldr	r3, [r6, #12]
 8004be4:	07db      	lsls	r3, r3, #31
 8004be6:	d5ed      	bpl.n	8004bc4 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004be8:	b124      	cbz	r4, 8004bf4 <FLASH_WaitForLastOperation+0x48>
 8004bea:	f7fe fa67 	bl	80030bc <HAL_GetTick>
 8004bee:	1b40      	subs	r0, r0, r5
 8004bf0:	42a0      	cmp	r0, r4
 8004bf2:	d9e1      	bls.n	8004bb8 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8004bf4:	2003      	movs	r0, #3
}
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004bf8:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <FLASH_WaitForLastOperation+0x84>)
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f013 0310 	ands.w	r3, r3, #16
 8004c00:	d014      	beq.n	8004c2c <FLASH_WaitForLastOperation+0x80>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c02:	490c      	ldr	r1, [pc, #48]	; (8004c34 <FLASH_WaitForLastOperation+0x88>)
 8004c04:	69ca      	ldr	r2, [r1, #28]
 8004c06:	f042 0202 	orr.w	r2, r2, #2
 8004c0a:	2014      	movs	r0, #20
    flags |= FLASH_FLAG_WRPERR;
 8004c0c:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004c0e:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8004c10:	4a07      	ldr	r2, [pc, #28]	; (8004c30 <FLASH_WaitForLastOperation+0x84>)
 8004c12:	68d2      	ldr	r2, [r2, #12]
 8004c14:	0752      	lsls	r2, r2, #29
 8004c16:	d505      	bpl.n	8004c24 <FLASH_WaitForLastOperation+0x78>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004c18:	4906      	ldr	r1, [pc, #24]	; (8004c34 <FLASH_WaitForLastOperation+0x88>)
 8004c1a:	69ca      	ldr	r2, [r1, #28]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8004c20:	4603      	mov	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8004c22:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004c24:	4a02      	ldr	r2, [pc, #8]	; (8004c30 <FLASH_WaitForLastOperation+0x84>)
    return HAL_ERROR;
 8004c26:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004c28:	60d3      	str	r3, [r2, #12]
}
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	2004      	movs	r0, #4
 8004c2e:	e7ef      	b.n	8004c10 <FLASH_WaitForLastOperation+0x64>
 8004c30:	40022000 	.word	0x40022000
 8004c34:	20001790 	.word	0x20001790

08004c38 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c3c:	4e2d      	ldr	r6, [pc, #180]	; (8004cf4 <HAL_FLASHEx_Erase+0xbc>)
 8004c3e:	7e33      	ldrb	r3, [r6, #24]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d054      	beq.n	8004cee <HAL_FLASHEx_Erase+0xb6>
 8004c44:	2301      	movs	r3, #1
 8004c46:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c48:	6803      	ldr	r3, [r0, #0]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	4681      	mov	r9, r0
 8004c4e:	d031      	beq.n	8004cb4 <HAL_FLASHEx_Erase+0x7c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004c50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c54:	4688      	mov	r8, r1
 8004c56:	f7ff ffa9 	bl	8004bac <FLASH_WaitForLastOperation>
 8004c5a:	4607      	mov	r7, r0
 8004c5c:	bb78      	cbnz	r0, 8004cbe <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c62:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004c66:	e9d9 5301 	ldrd	r5, r3, [r9, #4]
 8004c6a:	eb05 23c3 	add.w	r3, r5, r3, lsl #11
        for(address = pEraseInit->PageAddress;
 8004c6e:	429d      	cmp	r5, r3
 8004c70:	d225      	bcs.n	8004cbe <HAL_FLASHEx_Erase+0x86>
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004c72:	4c21      	ldr	r4, [pc, #132]	; (8004cf8 <HAL_FLASHEx_Erase+0xc0>)
 8004c74:	e007      	b.n	8004c86 <HAL_FLASHEx_Erase+0x4e>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004c76:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
            address += FLASH_PAGE_SIZE)
 8004c7a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004c7e:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8004c82:	42ab      	cmp	r3, r5
 8004c84:	d91c      	bls.n	8004cc0 <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c86:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	f043 0302 	orr.w	r3, r3, #2
 8004c8e:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004c90:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c98:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c9e:	f7ff ff85 	bl	8004bac <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004ca2:	6923      	ldr	r3, [r4, #16]
 8004ca4:	f023 0302 	bic.w	r3, r3, #2
 8004ca8:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d0e3      	beq.n	8004c76 <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8004cae:	f8c8 5000 	str.w	r5, [r8]
            break;
 8004cb2:	e005      	b.n	8004cc0 <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004cb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cb8:	f7ff ff78 	bl	8004bac <FLASH_WaitForLastOperation>
 8004cbc:	b120      	cbz	r0, 8004cc8 <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004cbe:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	7633      	strb	r3, [r6, #24]
}
 8004cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004cc8:	4c0b      	ldr	r4, [pc, #44]	; (8004cf8 <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004cca:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	f043 0304 	orr.w	r3, r3, #4
 8004cd2:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004cd4:	6923      	ldr	r3, [r4, #16]
 8004cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cda:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004ce0:	f7ff ff64 	bl	8004bac <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004ce4:	6923      	ldr	r3, [r4, #16]
 8004ce6:	f023 0304 	bic.w	r3, r3, #4
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	e7e8      	b.n	8004cc0 <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 8004cee:	2002      	movs	r0, #2
}
 8004cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf4:	20001790 	.word	0x20001790
 8004cf8:	40022000 	.word	0x40022000

08004cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d00:	680c      	ldr	r4, [r1, #0]
{
 8004d02:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d04:	2c00      	cmp	r4, #0
 8004d06:	d07e      	beq.n	8004e06 <HAL_GPIO_Init+0x10a>
 8004d08:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0c:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8004ecc <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00u;
 8004d10:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d12:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d16:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d18:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8004d1c:	ea15 0804 	ands.w	r8, r5, r4
 8004d20:	d06b      	beq.n	8004dfa <HAL_GPIO_Init+0xfe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d22:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8004d26:	f007 0203 	and.w	r2, r7, #3
 8004d2a:	1e51      	subs	r1, r2, #1
 8004d2c:	2901      	cmp	r1, #1
 8004d2e:	d96d      	bls.n	8004e0c <HAL_GPIO_Init+0x110>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d30:	2a03      	cmp	r2, #3
 8004d32:	f040 80ac 	bne.w	8004e8e <HAL_GPIO_Init+0x192>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004d36:	fa02 f20c 	lsl.w	r2, r2, ip
 8004d3a:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8004d3c:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004d3e:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d40:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d42:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004d46:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d48:	d057      	beq.n	8004dfa <HAL_GPIO_Init+0xfe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4a:	f8da 2018 	ldr.w	r2, [sl, #24]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	f8ca 2018 	str.w	r2, [sl, #24]
 8004d56:	f8da 2018 	ldr.w	r2, [sl, #24]
 8004d5a:	f002 0201 	and.w	r2, r2, #1
 8004d5e:	9203      	str	r2, [sp, #12]
 8004d60:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004d62:	f023 0203 	bic.w	r2, r3, #3
 8004d66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004d6a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d6e:	f003 0103 	and.w	r1, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8004d72:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d74:	0089      	lsls	r1, r1, #2
 8004d76:	260f      	movs	r6, #15
 8004d78:	fa06 fe01 	lsl.w	lr, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d7c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d80:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d84:	d015      	beq.n	8004db2 <HAL_GPIO_Init+0xb6>
 8004d86:	4e4c      	ldr	r6, [pc, #304]	; (8004eb8 <HAL_GPIO_Init+0x1bc>)
 8004d88:	42b0      	cmp	r0, r6
 8004d8a:	f000 808b 	beq.w	8004ea4 <HAL_GPIO_Init+0x1a8>
 8004d8e:	4e4b      	ldr	r6, [pc, #300]	; (8004ebc <HAL_GPIO_Init+0x1c0>)
 8004d90:	42b0      	cmp	r0, r6
 8004d92:	f000 808b 	beq.w	8004eac <HAL_GPIO_Init+0x1b0>
 8004d96:	4e4a      	ldr	r6, [pc, #296]	; (8004ec0 <HAL_GPIO_Init+0x1c4>)
 8004d98:	42b0      	cmp	r0, r6
 8004d9a:	d07d      	beq.n	8004e98 <HAL_GPIO_Init+0x19c>
 8004d9c:	4e49      	ldr	r6, [pc, #292]	; (8004ec4 <HAL_GPIO_Init+0x1c8>)
 8004d9e:	42b0      	cmp	r0, r6
 8004da0:	bf0b      	itete	eq
 8004da2:	f04f 0e04 	moveq.w	lr, #4
 8004da6:	2605      	movne	r6, #5
 8004da8:	fa0e f101 	lsleq.w	r1, lr, r1
 8004dac:	fa06 f101 	lslne.w	r1, r6, r1
 8004db0:	430d      	orrs	r5, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004db2:	6095      	str	r5, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004db4:	4a44      	ldr	r2, [pc, #272]	; (8004ec8 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8004db6:	4944      	ldr	r1, [pc, #272]	; (8004ec8 <HAL_GPIO_Init+0x1cc>)
        temp = EXTI->IMR;
 8004db8:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8004dba:	ea6f 0508 	mvn.w	r5, r8
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004dbe:	03fe      	lsls	r6, r7, #15
        temp &= ~(iocurrent);
 8004dc0:	bf54      	ite	pl
 8004dc2:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004dc4:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 8004dc8:	600a      	str	r2, [r1, #0]

        temp = EXTI->EMR;
 8004dca:	684a      	ldr	r2, [r1, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dcc:	03b9      	lsls	r1, r7, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8004dce:	493e      	ldr	r1, [pc, #248]	; (8004ec8 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8004dd0:	bf54      	ite	pl
 8004dd2:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004dd4:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8004dd8:	604a      	str	r2, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dda:	6889      	ldr	r1, [r1, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8004ddc:	4a3a      	ldr	r2, [pc, #232]	; (8004ec8 <HAL_GPIO_Init+0x1cc>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004dde:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8004de0:	bf54      	ite	pl
 8004de2:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8004de4:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 8004de8:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 8004dea:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004dec:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8004dee:	4936      	ldr	r1, [pc, #216]	; (8004ec8 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8004df0:	bf54      	ite	pl
 8004df2:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004df4:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8004df8:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8004dfa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dfc:	fa34 f203 	lsrs.w	r2, r4, r3
 8004e00:	f10c 0c02 	add.w	ip, ip, #2
 8004e04:	d188      	bne.n	8004d18 <HAL_GPIO_Init+0x1c>
  }
}
 8004e06:	b005      	add	sp, #20
 8004e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004e0c:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e0e:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e12:	f04f 0e03 	mov.w	lr, #3
 8004e16:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004e1a:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e1e:	fa06 f60c 	lsl.w	r6, r6, ip
 8004e22:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8004e24:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e26:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8004e2a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e2e:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e32:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8004e36:	409d      	lsls	r5, r3
 8004e38:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8004e3c:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8004e3e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004e40:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e44:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8004e48:	fa05 f50c 	lsl.w	r5, r5, ip
 8004e4c:	ea45 050e 	orr.w	r5, r5, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e50:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004e52:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e54:	fa02 f20c 	lsl.w	r2, r2, ip
 8004e58:	f47f af70 	bne.w	8004d3c <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 8004e5c:	08dd      	lsrs	r5, r3, #3
 8004e5e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8004e62:	9501      	str	r5, [sp, #4]
 8004e64:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e66:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3u];
 8004e6a:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e6c:	f003 0e07 	and.w	lr, r3, #7
 8004e70:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004e74:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e76:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e7a:	fa06 fe0e 	lsl.w	lr, r6, lr
 8004e7e:	9e00      	ldr	r6, [sp, #0]
 8004e80:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004e84:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e86:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004e8a:	6235      	str	r5, [r6, #32]
 8004e8c:	e756      	b.n	8004d3c <HAL_GPIO_Init+0x40>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e8e:	2103      	movs	r1, #3
 8004e90:	fa01 f10c 	lsl.w	r1, r1, ip
 8004e94:	43c9      	mvns	r1, r1
 8004e96:	e7d2      	b.n	8004e3e <HAL_GPIO_Init+0x142>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e98:	f04f 0e03 	mov.w	lr, #3
 8004e9c:	fa0e f101 	lsl.w	r1, lr, r1
 8004ea0:	430d      	orrs	r5, r1
 8004ea2:	e786      	b.n	8004db2 <HAL_GPIO_Init+0xb6>
 8004ea4:	fa0b f101 	lsl.w	r1, fp, r1
 8004ea8:	430d      	orrs	r5, r1
 8004eaa:	e782      	b.n	8004db2 <HAL_GPIO_Init+0xb6>
 8004eac:	f04f 0e02 	mov.w	lr, #2
 8004eb0:	fa0e f101 	lsl.w	r1, lr, r1
 8004eb4:	430d      	orrs	r5, r1
 8004eb6:	e77c      	b.n	8004db2 <HAL_GPIO_Init+0xb6>
 8004eb8:	48000400 	.word	0x48000400
 8004ebc:	48000800 	.word	0x48000800
 8004ec0:	48000c00 	.word	0x48000c00
 8004ec4:	48001000 	.word	0x48001000
 8004ec8:	40010400 	.word	0x40010400
 8004ecc:	40021000 	.word	0x40021000

08004ed0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ed0:	6903      	ldr	r3, [r0, #16]
 8004ed2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004ed4:	bf14      	ite	ne
 8004ed6:	2001      	movne	r0, #1
 8004ed8:	2000      	moveq	r0, #0
 8004eda:	4770      	bx	lr

08004edc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004edc:	b10a      	cbz	r2, 8004ee2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ede:	6181      	str	r1, [r0, #24]
 8004ee0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ee2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop

08004ee8 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee8:	2800      	cmp	r0, #0
 8004eea:	f000 828c 	beq.w	8005406 <HAL_RCC_OscConfig+0x51e>
{
 8004eee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef2:	6803      	ldr	r3, [r0, #0]
 8004ef4:	07d9      	lsls	r1, r3, #31
{
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004efa:	d54f      	bpl.n	8004f9c <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004efc:	49b4      	ldr	r1, [pc, #720]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
 8004efe:	684a      	ldr	r2, [r1, #4]
 8004f00:	f002 020c 	and.w	r2, r2, #12
 8004f04:	2a04      	cmp	r2, #4
 8004f06:	f000 816d 	beq.w	80051e4 <HAL_RCC_OscConfig+0x2fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f0a:	684a      	ldr	r2, [r1, #4]
 8004f0c:	f002 020c 	and.w	r2, r2, #12
 8004f10:	2a08      	cmp	r2, #8
 8004f12:	f000 8163 	beq.w	80051dc <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f1c:	d017      	beq.n	8004f4e <HAL_RCC_OscConfig+0x66>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 819c 	beq.w	800525c <HAL_RCC_OscConfig+0x374>
 8004f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f28:	f000 8258 	beq.w	80053dc <HAL_RCC_OscConfig+0x4f4>
 8004f2c:	4ba8      	ldr	r3, [pc, #672]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f3c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f3e:	4aa4      	ldr	r2, [pc, #656]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
 8004f40:	68a1      	ldr	r1, [r4, #8]
 8004f42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f44:	f023 030f 	bic.w	r3, r3, #15
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f4e:	4aa0      	ldr	r2, [pc, #640]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
 8004f50:	6813      	ldr	r3, [r2, #0]
 8004f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f58:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004f5a:	68a1      	ldr	r1, [r4, #8]
 8004f5c:	f023 030f 	bic.w	r3, r3, #15
 8004f60:	430b      	orrs	r3, r1
 8004f62:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fe f8aa 	bl	80030bc <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f68:	4f99      	ldr	r7, [pc, #612]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 8004f6a:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6c:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f70:	2601      	movs	r6, #1
 8004f72:	e005      	b.n	8004f80 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f74:	f7fe f8a2 	bl	80030bc <HAL_GetTick>
 8004f78:	1b40      	subs	r0, r0, r5
 8004f7a:	2864      	cmp	r0, #100	; 0x64
 8004f7c:	f200 816a 	bhi.w	8005254 <HAL_RCC_OscConfig+0x36c>
 8004f80:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	fa98 f3a8 	rbit	r3, r8
 8004f8a:	fab3 f383 	clz	r3, r3
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	fa06 f303 	lsl.w	r3, r6, r3
 8004f96:	4213      	tst	r3, r2
 8004f98:	d0ec      	beq.n	8004f74 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	079f      	lsls	r7, r3, #30
 8004f9e:	d541      	bpl.n	8005024 <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004fa0:	4a8b      	ldr	r2, [pc, #556]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
 8004fa2:	6851      	ldr	r1, [r2, #4]
 8004fa4:	f011 0f0c 	tst.w	r1, #12
 8004fa8:	f000 80c8 	beq.w	800513c <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004fac:	6851      	ldr	r1, [r2, #4]
 8004fae:	f001 010c 	and.w	r1, r1, #12
 8004fb2:	2908      	cmp	r1, #8
 8004fb4:	f000 80be 	beq.w	8005134 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fb8:	6922      	ldr	r2, [r4, #16]
 8004fba:	2a00      	cmp	r2, #0
 8004fbc:	f000 81ad 	beq.w	800531a <HAL_RCC_OscConfig+0x432>
 8004fc0:	2501      	movs	r5, #1
 8004fc2:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc6:	fab3 f383 	clz	r3, r3
 8004fca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004fce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004fd2:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd4:	4f7e      	ldr	r7, [pc, #504]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
        __HAL_RCC_HSI_ENABLE();
 8004fd6:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8004fd8:	f7fe f870 	bl	80030bc <HAL_GetTick>
 8004fdc:	f04f 0802 	mov.w	r8, #2
 8004fe0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe2:	e005      	b.n	8004ff0 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe4:	f7fe f86a 	bl	80030bc <HAL_GetTick>
 8004fe8:	1b80      	subs	r0, r0, r6
 8004fea:	2802      	cmp	r0, #2
 8004fec:	f200 8132 	bhi.w	8005254 <HAL_RCC_OscConfig+0x36c>
 8004ff0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	fa98 f3a8 	rbit	r3, r8
 8004ffa:	fab3 f383 	clz	r3, r3
 8004ffe:	f003 031f 	and.w	r3, r3, #31
 8005002:	fa05 f303 	lsl.w	r3, r5, r3
 8005006:	4213      	tst	r3, r2
 8005008:	d0ec      	beq.n	8004fe4 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800500a:	6839      	ldr	r1, [r7, #0]
 800500c:	22f8      	movs	r2, #248	; 0xf8
 800500e:	fa92 f2a2 	rbit	r2, r2
 8005012:	6963      	ldr	r3, [r4, #20]
 8005014:	fab2 f282 	clz	r2, r2
 8005018:	4093      	lsls	r3, r2
 800501a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800501e:	4313      	orrs	r3, r2
 8005020:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	071d      	lsls	r5, r3, #28
 8005026:	d421      	bmi.n	800506c <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005028:	0758      	lsls	r0, r3, #29
 800502a:	d54c      	bpl.n	80050c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800502c:	4b68      	ldr	r3, [pc, #416]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	00d1      	lsls	r1, r2, #3
 8005032:	f140 80c1 	bpl.w	80051b8 <HAL_RCC_OscConfig+0x2d0>
    FlagStatus       pwrclkchanged = RESET;
 8005036:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503a:	4d66      	ldr	r5, [pc, #408]	; (80051d4 <HAL_RCC_OscConfig+0x2ec>)
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	05da      	lsls	r2, r3, #23
 8005040:	f140 80f8 	bpl.w	8005234 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005044:	68e3      	ldr	r3, [r4, #12]
 8005046:	2b01      	cmp	r3, #1
 8005048:	f000 818d 	beq.w	8005366 <HAL_RCC_OscConfig+0x47e>
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 812e 	beq.w	80052ae <HAL_RCC_OscConfig+0x3c6>
 8005052:	2b05      	cmp	r3, #5
 8005054:	4b5e      	ldr	r3, [pc, #376]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
 8005056:	6a1a      	ldr	r2, [r3, #32]
 8005058:	f000 81cd 	beq.w	80053f6 <HAL_RCC_OscConfig+0x50e>
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	621a      	str	r2, [r3, #32]
 8005062:	6a1a      	ldr	r2, [r3, #32]
 8005064:	f022 0204 	bic.w	r2, r2, #4
 8005068:	621a      	str	r2, [r3, #32]
 800506a:	e181      	b.n	8005370 <HAL_RCC_OscConfig+0x488>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800506c:	69a2      	ldr	r2, [r4, #24]
 800506e:	2a00      	cmp	r2, #0
 8005070:	d07b      	beq.n	800516a <HAL_RCC_OscConfig+0x282>
 8005072:	2501      	movs	r5, #1
 8005074:	fa95 f2a5 	rbit	r2, r5
      __HAL_RCC_LSI_ENABLE();
 8005078:	4b57      	ldr	r3, [pc, #348]	; (80051d8 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507a:	4f55      	ldr	r7, [pc, #340]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_ENABLE();
 800507c:	fab2 f282 	clz	r2, r2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	f04f 0802 	mov.w	r8, #2
 8005088:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 800508a:	f7fe f817 	bl	80030bc <HAL_GetTick>
 800508e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005090:	e005      	b.n	800509e <HAL_RCC_OscConfig+0x1b6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005092:	f7fe f813 	bl	80030bc <HAL_GetTick>
 8005096:	1b80      	subs	r0, r0, r6
 8005098:	2802      	cmp	r0, #2
 800509a:	f200 80db 	bhi.w	8005254 <HAL_RCC_OscConfig+0x36c>
 800509e:	fa98 f3a8 	rbit	r3, r8
 80050a2:	fa98 f3a8 	rbit	r3, r8
 80050a6:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ac:	fa98 f3a8 	rbit	r3, r8
 80050b0:	fab3 f383 	clz	r3, r3
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	fa05 f303 	lsl.w	r3, r5, r3
 80050bc:	4213      	tst	r3, r2
 80050be:	d0e8      	beq.n	8005092 <HAL_RCC_OscConfig+0x1aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	0758      	lsls	r0, r3, #29
 80050c4:	d4b2      	bmi.n	800502c <HAL_RCC_OscConfig+0x144>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050c6:	69e0      	ldr	r0, [r4, #28]
 80050c8:	b380      	cbz	r0, 800512c <HAL_RCC_OscConfig+0x244>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ca:	4d41      	ldr	r5, [pc, #260]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
 80050cc:	686b      	ldr	r3, [r5, #4]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	f000 8171 	beq.w	80053ba <HAL_RCC_OscConfig+0x4d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050d8:	2802      	cmp	r0, #2
 80050da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050de:	f000 8194 	beq.w	800540a <HAL_RCC_OscConfig+0x522>
 80050e2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f8:	f7fd ffe0 	bl	80030bc <HAL_GetTick>
 80050fc:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8005100:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005102:	2601      	movs	r6, #1
 8005104:	e005      	b.n	8005112 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005106:	f7fd ffd9 	bl	80030bc <HAL_GetTick>
 800510a:	1b00      	subs	r0, r0, r4
 800510c:	2802      	cmp	r0, #2
 800510e:	f200 80a1 	bhi.w	8005254 <HAL_RCC_OscConfig+0x36c>
 8005112:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005116:	682a      	ldr	r2, [r5, #0]
 8005118:	fa97 f3a7 	rbit	r3, r7
 800511c:	fab3 f383 	clz	r3, r3
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	fa06 f303 	lsl.w	r3, r6, r3
 8005128:	4213      	tst	r3, r2
 800512a:	d1ec      	bne.n	8005106 <HAL_RCC_OscConfig+0x21e>
        }
      }
    }
  }

  return HAL_OK;
 800512c:	2000      	movs	r0, #0
}
 800512e:	b003      	add	sp, #12
 8005130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005134:	6852      	ldr	r2, [r2, #4]
 8005136:	03d6      	lsls	r6, r2, #15
 8005138:	f53f af3e 	bmi.w	8004fb8 <HAL_RCC_OscConfig+0xd0>
 800513c:	2202      	movs	r2, #2
 800513e:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005142:	4923      	ldr	r1, [pc, #140]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
 8005144:	6808      	ldr	r0, [r1, #0]
 8005146:	fa92 f2a2 	rbit	r2, r2
 800514a:	fab2 f282 	clz	r2, r2
 800514e:	f002 021f 	and.w	r2, r2, #31
 8005152:	2101      	movs	r1, #1
 8005154:	fa01 f202 	lsl.w	r2, r1, r2
 8005158:	4202      	tst	r2, r0
 800515a:	d05a      	beq.n	8005212 <HAL_RCC_OscConfig+0x32a>
 800515c:	6922      	ldr	r2, [r4, #16]
 800515e:	428a      	cmp	r2, r1
 8005160:	d057      	beq.n	8005212 <HAL_RCC_OscConfig+0x32a>
        return HAL_ERROR;
 8005162:	2001      	movs	r0, #1
}
 8005164:	b003      	add	sp, #12
 8005166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800516a:	2601      	movs	r6, #1
 800516c:	fa96 f1a6 	rbit	r1, r6
      __HAL_RCC_LSI_DISABLE();
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005172:	4f17      	ldr	r7, [pc, #92]	; (80051d0 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_DISABLE();
 8005174:	fab1 f181 	clz	r1, r1
 8005178:	440b      	add	r3, r1
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	f04f 0802 	mov.w	r8, #2
 8005180:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005182:	f7fd ff9b 	bl	80030bc <HAL_GetTick>
 8005186:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005188:	e004      	b.n	8005194 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800518a:	f7fd ff97 	bl	80030bc <HAL_GetTick>
 800518e:	1b40      	subs	r0, r0, r5
 8005190:	2802      	cmp	r0, #2
 8005192:	d85f      	bhi.n	8005254 <HAL_RCC_OscConfig+0x36c>
 8005194:	fa98 f3a8 	rbit	r3, r8
 8005198:	fa98 f3a8 	rbit	r3, r8
 800519c:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a2:	fa98 f3a8 	rbit	r3, r8
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	fa06 f303 	lsl.w	r3, r6, r3
 80051b2:	4213      	tst	r3, r2
 80051b4:	d1e9      	bne.n	800518a <HAL_RCC_OscConfig+0x2a2>
 80051b6:	e783      	b.n	80050c0 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051be:	61da      	str	r2, [r3, #28]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	9301      	str	r3, [sp, #4]
 80051c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80051ca:	f04f 0801 	mov.w	r8, #1
 80051ce:	e734      	b.n	800503a <HAL_RCC_OscConfig+0x152>
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40007000 	.word	0x40007000
 80051d8:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051dc:	684a      	ldr	r2, [r1, #4]
 80051de:	03d2      	lsls	r2, r2, #15
 80051e0:	f57f ae99 	bpl.w	8004f16 <HAL_RCC_OscConfig+0x2e>
 80051e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051e8:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	49b1      	ldr	r1, [pc, #708]	; (80054b4 <HAL_RCC_OscConfig+0x5cc>)
 80051ee:	6808      	ldr	r0, [r1, #0]
 80051f0:	fa92 f2a2 	rbit	r2, r2
 80051f4:	fab2 f282 	clz	r2, r2
 80051f8:	f002 021f 	and.w	r2, r2, #31
 80051fc:	2101      	movs	r1, #1
 80051fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005202:	4202      	tst	r2, r0
 8005204:	f43f aeca 	beq.w	8004f9c <HAL_RCC_OscConfig+0xb4>
 8005208:	6862      	ldr	r2, [r4, #4]
 800520a:	2a00      	cmp	r2, #0
 800520c:	f47f aec6 	bne.w	8004f9c <HAL_RCC_OscConfig+0xb4>
 8005210:	e7a7      	b.n	8005162 <HAL_RCC_OscConfig+0x27a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005212:	4da8      	ldr	r5, [pc, #672]	; (80054b4 <HAL_RCC_OscConfig+0x5cc>)
 8005214:	22f8      	movs	r2, #248	; 0xf8
 8005216:	6828      	ldr	r0, [r5, #0]
 8005218:	fa92 f2a2 	rbit	r2, r2
 800521c:	fab2 f182 	clz	r1, r2
 8005220:	6962      	ldr	r2, [r4, #20]
 8005222:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8005226:	408a      	lsls	r2, r1
 8005228:	4302      	orrs	r2, r0
 800522a:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800522c:	071d      	lsls	r5, r3, #28
 800522e:	f57f aefb 	bpl.w	8005028 <HAL_RCC_OscConfig+0x140>
 8005232:	e71b      	b.n	800506c <HAL_RCC_OscConfig+0x184>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800523c:	f7fd ff3e 	bl	80030bc <HAL_GetTick>
 8005240:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005242:	682b      	ldr	r3, [r5, #0]
 8005244:	05db      	lsls	r3, r3, #23
 8005246:	f53f aefd 	bmi.w	8005044 <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fd ff37 	bl	80030bc <HAL_GetTick>
 800524e:	1b80      	subs	r0, r0, r6
 8005250:	2864      	cmp	r0, #100	; 0x64
 8005252:	d9f6      	bls.n	8005242 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8005254:	2003      	movs	r0, #3
}
 8005256:	b003      	add	sp, #12
 8005258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800525c:	4d95      	ldr	r5, [pc, #596]	; (80054b4 <HAL_RCC_OscConfig+0x5cc>)
 800525e:	682b      	ldr	r3, [r5, #0]
 8005260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005264:	602b      	str	r3, [r5, #0]
 8005266:	682b      	ldr	r3, [r5, #0]
 8005268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800526c:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800526e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005270:	68a2      	ldr	r2, [r4, #8]
 8005272:	f023 030f 	bic.w	r3, r3, #15
 8005276:	4313      	orrs	r3, r2
 8005278:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 800527a:	f7fd ff1f 	bl	80030bc <HAL_GetTick>
 800527e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8005282:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005284:	2701      	movs	r7, #1
 8005286:	e004      	b.n	8005292 <HAL_RCC_OscConfig+0x3aa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005288:	f7fd ff18 	bl	80030bc <HAL_GetTick>
 800528c:	1b80      	subs	r0, r0, r6
 800528e:	2864      	cmp	r0, #100	; 0x64
 8005290:	d8e0      	bhi.n	8005254 <HAL_RCC_OscConfig+0x36c>
 8005292:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005296:	682a      	ldr	r2, [r5, #0]
 8005298:	fa98 f3a8 	rbit	r3, r8
 800529c:	fab3 f383 	clz	r3, r3
 80052a0:	f003 031f 	and.w	r3, r3, #31
 80052a4:	fa07 f303 	lsl.w	r3, r7, r3
 80052a8:	4213      	tst	r3, r2
 80052aa:	d1ed      	bne.n	8005288 <HAL_RCC_OscConfig+0x3a0>
 80052ac:	e675      	b.n	8004f9a <HAL_RCC_OscConfig+0xb2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ae:	4d81      	ldr	r5, [pc, #516]	; (80054b4 <HAL_RCC_OscConfig+0x5cc>)
 80052b0:	6a2b      	ldr	r3, [r5, #32]
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	622b      	str	r3, [r5, #32]
 80052b8:	6a2b      	ldr	r3, [r5, #32]
 80052ba:	f023 0304 	bic.w	r3, r3, #4
 80052be:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80052c0:	f7fd fefc 	bl	80030bc <HAL_GetTick>
 80052c4:	f04f 0902 	mov.w	r9, #2
 80052c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ca:	2701      	movs	r7, #1
 80052cc:	e013      	b.n	80052f6 <HAL_RCC_OscConfig+0x40e>
 80052ce:	fa99 f3a9 	rbit	r3, r9
 80052d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80052d4:	fa99 f3a9 	rbit	r3, r9
 80052d8:	fab3 f383 	clz	r3, r3
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	fa07 f303 	lsl.w	r3, r7, r3
 80052e4:	4213      	tst	r3, r2
 80052e6:	d00e      	beq.n	8005306 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fd fee8 	bl	80030bc <HAL_GetTick>
 80052ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80052f0:	1b80      	subs	r0, r0, r6
 80052f2:	4298      	cmp	r0, r3
 80052f4:	d8ae      	bhi.n	8005254 <HAL_RCC_OscConfig+0x36c>
 80052f6:	fa99 f3a9 	rbit	r3, r9
 80052fa:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0e5      	beq.n	80052ce <HAL_RCC_OscConfig+0x3e6>
 8005302:	6a2a      	ldr	r2, [r5, #32]
 8005304:	e7e6      	b.n	80052d4 <HAL_RCC_OscConfig+0x3ec>
    if(pwrclkchanged == SET)
 8005306:	f1b8 0f00 	cmp.w	r8, #0
 800530a:	f43f aedc 	beq.w	80050c6 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_DISABLE();
 800530e:	4a69      	ldr	r2, [pc, #420]	; (80054b4 <HAL_RCC_OscConfig+0x5cc>)
 8005310:	69d3      	ldr	r3, [r2, #28]
 8005312:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005316:	61d3      	str	r3, [r2, #28]
 8005318:	e6d5      	b.n	80050c6 <HAL_RCC_OscConfig+0x1de>
 800531a:	2601      	movs	r6, #1
 800531c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8005320:	fab3 f383 	clz	r3, r3
 8005324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800532c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800532e:	4f61      	ldr	r7, [pc, #388]	; (80054b4 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_HSI_DISABLE();
 8005330:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005332:	f7fd fec3 	bl	80030bc <HAL_GetTick>
 8005336:	f04f 0802 	mov.w	r8, #2
 800533a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800533c:	e004      	b.n	8005348 <HAL_RCC_OscConfig+0x460>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800533e:	f7fd febd 	bl	80030bc <HAL_GetTick>
 8005342:	1b40      	subs	r0, r0, r5
 8005344:	2802      	cmp	r0, #2
 8005346:	d885      	bhi.n	8005254 <HAL_RCC_OscConfig+0x36c>
 8005348:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	fa98 f3a8 	rbit	r3, r8
 8005352:	fab3 f383 	clz	r3, r3
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	fa06 f303 	lsl.w	r3, r6, r3
 800535e:	4213      	tst	r3, r2
 8005360:	d1ed      	bne.n	800533e <HAL_RCC_OscConfig+0x456>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	e65e      	b.n	8005024 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005366:	4a53      	ldr	r2, [pc, #332]	; (80054b4 <HAL_RCC_OscConfig+0x5cc>)
 8005368:	6a13      	ldr	r3, [r2, #32]
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8005370:	f7fd fea4 	bl	80030bc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005374:	4f4f      	ldr	r7, [pc, #316]	; (80054b4 <HAL_RCC_OscConfig+0x5cc>)
      tickstart = HAL_GetTick();
 8005376:	4605      	mov	r5, r0
 8005378:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800537c:	2601      	movs	r6, #1
 800537e:	e014      	b.n	80053aa <HAL_RCC_OscConfig+0x4c2>
 8005380:	fa99 f3a9 	rbit	r3, r9
 8005384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005386:	fa99 f3a9 	rbit	r3, r9
 800538a:	fab3 f383 	clz	r3, r3
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	fa06 f303 	lsl.w	r3, r6, r3
 8005396:	4213      	tst	r3, r2
 8005398:	d1b5      	bne.n	8005306 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539a:	f7fd fe8f 	bl	80030bc <HAL_GetTick>
 800539e:	f241 3388 	movw	r3, #5000	; 0x1388
 80053a2:	1b40      	subs	r0, r0, r5
 80053a4:	4298      	cmp	r0, r3
 80053a6:	f63f af55 	bhi.w	8005254 <HAL_RCC_OscConfig+0x36c>
 80053aa:	fa99 f3a9 	rbit	r3, r9
 80053ae:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0e4      	beq.n	8005380 <HAL_RCC_OscConfig+0x498>
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	e7e5      	b.n	8005386 <HAL_RCC_OscConfig+0x49e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053ba:	2801      	cmp	r0, #1
 80053bc:	f43f aeb7 	beq.w	800512e <HAL_RCC_OscConfig+0x246>
        pll_config = RCC->CFGR;
 80053c0:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80053c2:	6a22      	ldr	r2, [r4, #32]
 80053c4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80053c8:	4291      	cmp	r1, r2
 80053ca:	f47f aeca 	bne.w	8005162 <HAL_RCC_OscConfig+0x27a>
 80053ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80053d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80053d4:	1a18      	subs	r0, r3, r0
 80053d6:	bf18      	it	ne
 80053d8:	2001      	movne	r0, #1
 80053da:	e6a8      	b.n	800512e <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053e0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e5a3      	b.n	8004f3e <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053f6:	f042 0204 	orr.w	r2, r2, #4
 80053fa:	621a      	str	r2, [r3, #32]
 80053fc:	6a1a      	ldr	r2, [r3, #32]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	621a      	str	r2, [r3, #32]
 8005404:	e7b4      	b.n	8005370 <HAL_RCC_OscConfig+0x488>
    return HAL_ERROR;
 8005406:	2001      	movs	r0, #1
}
 8005408:	4770      	bx	lr
 800540a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800540e:	fab3 f383 	clz	r3, r3
 8005412:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005416:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005420:	f7fd fe4c 	bl	80030bc <HAL_GetTick>
 8005424:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8005428:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800542a:	2701      	movs	r7, #1
 800542c:	e005      	b.n	800543a <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542e:	f7fd fe45 	bl	80030bc <HAL_GetTick>
 8005432:	1b80      	subs	r0, r0, r6
 8005434:	2802      	cmp	r0, #2
 8005436:	f63f af0d 	bhi.w	8005254 <HAL_RCC_OscConfig+0x36c>
 800543a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800543e:	682a      	ldr	r2, [r5, #0]
 8005440:	fa98 f3a8 	rbit	r3, r8
 8005444:	fab3 f383 	clz	r3, r3
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	fa07 f303 	lsl.w	r3, r7, r3
 8005450:	4213      	tst	r3, r2
 8005452:	d1ec      	bne.n	800542e <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005454:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8005458:	686a      	ldr	r2, [r5, #4]
 800545a:	430b      	orrs	r3, r1
 800545c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8005460:	4313      	orrs	r3, r2
 8005462:	606b      	str	r3, [r5, #4]
 8005464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005468:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800546c:	fab3 f383 	clz	r3, r3
 8005470:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005474:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005478:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800547a:	4d0e      	ldr	r5, [pc, #56]	; (80054b4 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_PLL_ENABLE();
 800547c:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 800547e:	f7fd fe1d 	bl	80030bc <HAL_GetTick>
 8005482:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8005486:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005488:	2601      	movs	r6, #1
 800548a:	e005      	b.n	8005498 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800548c:	f7fd fe16 	bl	80030bc <HAL_GetTick>
 8005490:	1b00      	subs	r0, r0, r4
 8005492:	2802      	cmp	r0, #2
 8005494:	f63f aede 	bhi.w	8005254 <HAL_RCC_OscConfig+0x36c>
 8005498:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800549c:	682a      	ldr	r2, [r5, #0]
 800549e:	fa97 f3a7 	rbit	r3, r7
 80054a2:	fab3 f383 	clz	r3, r3
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	fa06 f303 	lsl.w	r3, r6, r3
 80054ae:	4213      	tst	r3, r2
 80054b0:	d0ec      	beq.n	800548c <HAL_RCC_OscConfig+0x5a4>
 80054b2:	e63b      	b.n	800512c <HAL_RCC_OscConfig+0x244>
 80054b4:	40021000 	.word	0x40021000

080054b8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054b8:	2800      	cmp	r0, #0
 80054ba:	f000 80c8 	beq.w	800564e <HAL_RCC_ClockConfig+0x196>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054be:	4a6f      	ldr	r2, [pc, #444]	; (800567c <HAL_RCC_ClockConfig+0x1c4>)
 80054c0:	6813      	ldr	r3, [r2, #0]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	428b      	cmp	r3, r1
{
 80054c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054cc:	460d      	mov	r5, r1
 80054ce:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054d0:	d20c      	bcs.n	80054ec <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	6813      	ldr	r3, [r2, #0]
 80054d4:	f023 0307 	bic.w	r3, r3, #7
 80054d8:	430b      	orrs	r3, r1
 80054da:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054dc:	6813      	ldr	r3, [r2, #0]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	428b      	cmp	r3, r1
 80054e4:	d002      	beq.n	80054ec <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80054e6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 80054e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	079f      	lsls	r7, r3, #30
 80054f0:	d506      	bpl.n	8005500 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f2:	4963      	ldr	r1, [pc, #396]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	68a0      	ldr	r0, [r4, #8]
 80054f6:	684a      	ldr	r2, [r1, #4]
 80054f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80054fc:	4302      	orrs	r2, r0
 80054fe:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005500:	07de      	lsls	r6, r3, #31
 8005502:	d52f      	bpl.n	8005564 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005504:	6861      	ldr	r1, [r4, #4]
 8005506:	2901      	cmp	r1, #1
 8005508:	f000 80a3 	beq.w	8005652 <HAL_RCC_ClockConfig+0x19a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800550c:	2902      	cmp	r1, #2
 800550e:	f000 808b 	beq.w	8005628 <HAL_RCC_ClockConfig+0x170>
 8005512:	2202      	movs	r2, #2
 8005514:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005518:	4b59      	ldr	r3, [pc, #356]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	fa92 f2a2 	rbit	r2, r2
 8005520:	fab2 f282 	clz	r2, r2
 8005524:	f002 021f 	and.w	r2, r2, #31
 8005528:	2301      	movs	r3, #1
 800552a:	fa03 f202 	lsl.w	r2, r3, r2
 800552e:	4202      	tst	r2, r0
 8005530:	d0d9      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005532:	4e53      	ldr	r6, [pc, #332]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 8005534:	6873      	ldr	r3, [r6, #4]
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	430b      	orrs	r3, r1
 800553c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800553e:	f7fd fdbd 	bl	80030bc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005542:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005546:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005548:	e005      	b.n	8005556 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554a:	f7fd fdb7 	bl	80030bc <HAL_GetTick>
 800554e:	1bc0      	subs	r0, r0, r7
 8005550:	4540      	cmp	r0, r8
 8005552:	f200 8090 	bhi.w	8005676 <HAL_RCC_ClockConfig+0x1be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	6873      	ldr	r3, [r6, #4]
 8005558:	6862      	ldr	r2, [r4, #4]
 800555a:	f003 030c 	and.w	r3, r3, #12
 800555e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005562:	d1f2      	bne.n	800554a <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005564:	4a45      	ldr	r2, [pc, #276]	; (800567c <HAL_RCC_ClockConfig+0x1c4>)
 8005566:	6813      	ldr	r3, [r2, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	42ab      	cmp	r3, r5
 800556e:	d909      	bls.n	8005584 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005570:	6813      	ldr	r3, [r2, #0]
 8005572:	f023 0307 	bic.w	r3, r3, #7
 8005576:	432b      	orrs	r3, r5
 8005578:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557a:	6813      	ldr	r3, [r2, #0]
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	42ab      	cmp	r3, r5
 8005582:	d1b0      	bne.n	80054e6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	0758      	lsls	r0, r3, #29
 8005588:	d506      	bpl.n	8005598 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800558a:	493d      	ldr	r1, [pc, #244]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 800558c:	68e0      	ldr	r0, [r4, #12]
 800558e:	684a      	ldr	r2, [r1, #4]
 8005590:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005594:	4302      	orrs	r2, r0
 8005596:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005598:	0719      	lsls	r1, r3, #28
 800559a:	d507      	bpl.n	80055ac <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800559c:	4a38      	ldr	r2, [pc, #224]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 800559e:	6921      	ldr	r1, [r4, #16]
 80055a0:	6853      	ldr	r3, [r2, #4]
 80055a2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80055a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80055aa:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80055ac:	4934      	ldr	r1, [pc, #208]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 80055ae:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055b0:	f002 030c 	and.w	r3, r2, #12
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d017      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055b8:	4932      	ldr	r1, [pc, #200]	; (8005684 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055ba:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 80055bc:	22f0      	movs	r2, #240	; 0xf0
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	fa92 f2a2 	rbit	r2, r2
 80055c4:	fab2 f282 	clz	r2, r2
 80055c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055cc:	40d3      	lsrs	r3, r2
 80055ce:	4a2e      	ldr	r2, [pc, #184]	; (8005688 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 80055d0:	482e      	ldr	r0, [pc, #184]	; (800568c <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055d2:	5cd3      	ldrb	r3, [r2, r3]
 80055d4:	4a2e      	ldr	r2, [pc, #184]	; (8005690 <HAL_RCC_ClockConfig+0x1d8>)
  HAL_InitTick (uwTickPrio);
 80055d6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055d8:	fa21 f303 	lsr.w	r3, r1, r3
 80055dc:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80055de:	f7fd fd2b 	bl	8003038 <HAL_InitTick>
  return HAL_OK;
 80055e2:	2000      	movs	r0, #0
}
 80055e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80055ec:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80055f0:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 80055f4:	fab3 f383 	clz	r3, r3
 80055f8:	4c26      	ldr	r4, [pc, #152]	; (8005694 <HAL_RCC_ClockConfig+0x1dc>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80055fa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80055fc:	fa20 f303 	lsr.w	r3, r0, r3
 8005600:	200f      	movs	r0, #15
 8005602:	5ce3      	ldrb	r3, [r4, r3]
 8005604:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005608:	fab0 f080 	clz	r0, r0
 800560c:	f001 010f 	and.w	r1, r1, #15
 8005610:	40c1      	lsrs	r1, r0
 8005612:	4c21      	ldr	r4, [pc, #132]	; (8005698 <HAL_RCC_ClockConfig+0x1e0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005614:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005616:	5c60      	ldrb	r0, [r4, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005618:	bf4a      	itet	mi
 800561a:	491a      	ldrmi	r1, [pc, #104]	; (8005684 <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800561c:	491f      	ldrpl	r1, [pc, #124]	; (800569c <HAL_RCC_ClockConfig+0x1e4>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800561e:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005622:	fb03 f101 	mul.w	r1, r3, r1
 8005626:	e7c8      	b.n	80055ba <HAL_RCC_ClockConfig+0x102>
 8005628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800562c:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005630:	4a13      	ldr	r2, [pc, #76]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 8005632:	6810      	ldr	r0, [r2, #0]
 8005634:	fa93 f3a3 	rbit	r3, r3
 8005638:	fab3 f383 	clz	r3, r3
 800563c:	f003 031f 	and.w	r3, r3, #31
 8005640:	2201      	movs	r2, #1
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	4203      	tst	r3, r0
 8005648:	f47f af73 	bne.w	8005532 <HAL_RCC_ClockConfig+0x7a>
 800564c:	e74b      	b.n	80054e6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800564e:	2001      	movs	r0, #1
}
 8005650:	4770      	bx	lr
 8005652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005656:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800565a:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCC_ClockConfig+0x1c8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	fa92 f2a2 	rbit	r2, r2
 8005662:	fab2 f282 	clz	r2, r2
 8005666:	f002 021f 	and.w	r2, r2, #31
 800566a:	fa01 f202 	lsl.w	r2, r1, r2
 800566e:	421a      	tst	r2, r3
 8005670:	f47f af5f 	bne.w	8005532 <HAL_RCC_ClockConfig+0x7a>
 8005674:	e737      	b.n	80054e6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005676:	2003      	movs	r0, #3
 8005678:	e736      	b.n	80054e8 <HAL_RCC_ClockConfig+0x30>
 800567a:	bf00      	nop
 800567c:	40022000 	.word	0x40022000
 8005680:	40021000 	.word	0x40021000
 8005684:	007a1200 	.word	0x007a1200
 8005688:	0800b050 	.word	0x0800b050
 800568c:	2000000c 	.word	0x2000000c
 8005690:	20000004 	.word	0x20000004
 8005694:	0800b068 	.word	0x0800b068
 8005698:	0800b078 	.word	0x0800b078
 800569c:	003d0900 	.word	0x003d0900

080056a0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80056a0:	4915      	ldr	r1, [pc, #84]	; (80056f8 <HAL_RCC_GetSysClockFreq+0x58>)
 80056a2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80056a4:	f003 020c 	and.w	r2, r3, #12
 80056a8:	2a08      	cmp	r2, #8
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80056ac:	4813      	ldr	r0, [pc, #76]	; (80056fc <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80056ae:	4770      	bx	lr
{
 80056b0:	b410      	push	{r4}
 80056b2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80056b6:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80056ba:	fab2 f282 	clz	r2, r2
 80056be:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80056c2:	4c0f      	ldr	r4, [pc, #60]	; (8005700 <HAL_RCC_GetSysClockFreq+0x60>)
 80056c4:	40d0      	lsrs	r0, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80056c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80056c8:	5c20      	ldrb	r0, [r4, r0]
 80056ca:	210f      	movs	r1, #15
 80056cc:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80056d0:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80056d2:	fab1 f181 	clz	r1, r1
 80056d6:	f002 020f 	and.w	r2, r2, #15
 80056da:	4c0a      	ldr	r4, [pc, #40]	; (8005704 <HAL_RCC_GetSysClockFreq+0x64>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056dc:	bf4c      	ite	mi
 80056de:	4b07      	ldrmi	r3, [pc, #28]	; (80056fc <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056e0:	4b09      	ldrpl	r3, [pc, #36]	; (8005708 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80056e2:	fa22 f201 	lsr.w	r2, r2, r1
 80056e6:	5ca2      	ldrb	r2, [r4, r2]
}
 80056e8:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056ec:	bf48      	it	mi
 80056ee:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056f2:	fb03 f000 	mul.w	r0, r3, r0
}
 80056f6:	4770      	bx	lr
 80056f8:	40021000 	.word	0x40021000
 80056fc:	007a1200 	.word	0x007a1200
 8005700:	0800b068 	.word	0x0800b068
 8005704:	0800b078 	.word	0x0800b078
 8005708:	003d0900 	.word	0x003d0900

0800570c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <HAL_RCC_GetPCLK1Freq+0x24>)
 800570e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	fa92 f2a2 	rbit	r2, r2
 8005718:	fab2 f282 	clz	r2, r2
 800571c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005720:	4904      	ldr	r1, [pc, #16]	; (8005734 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8005722:	4805      	ldr	r0, [pc, #20]	; (8005738 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005724:	40d3      	lsrs	r3, r2
 8005726:	6800      	ldr	r0, [r0, #0]
 8005728:	5ccb      	ldrb	r3, [r1, r3]
}    
 800572a:	40d8      	lsrs	r0, r3
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40021000 	.word	0x40021000
 8005734:	0800b060 	.word	0x0800b060
 8005738:	20000004 	.word	0x20000004

0800573c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800573c:	4b08      	ldr	r3, [pc, #32]	; (8005760 <HAL_RCC_GetPCLK2Freq+0x24>)
 800573e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	fa92 f2a2 	rbit	r2, r2
 8005748:	fab2 f282 	clz	r2, r2
 800574c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005750:	4904      	ldr	r1, [pc, #16]	; (8005764 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8005752:	4805      	ldr	r0, [pc, #20]	; (8005768 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005754:	40d3      	lsrs	r3, r2
 8005756:	6800      	ldr	r0, [r0, #0]
 8005758:	5ccb      	ldrb	r3, [r1, r3]
} 
 800575a:	40d8      	lsrs	r0, r3
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000
 8005764:	0800b060 	.word	0x0800b060
 8005768:	20000004 	.word	0x20000004

0800576c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800576c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005770:	6803      	ldr	r3, [r0, #0]
 8005772:	03dd      	lsls	r5, r3, #15
{
 8005774:	b083      	sub	sp, #12
 8005776:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005778:	d540      	bpl.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800577a:	4b84      	ldr	r3, [pc, #528]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800577c:	69da      	ldr	r2, [r3, #28]
 800577e:	00d0      	lsls	r0, r2, #3
 8005780:	f140 80ba 	bpl.w	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005784:	4e82      	ldr	r6, [pc, #520]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8005786:	6833      	ldr	r3, [r6, #0]
 8005788:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 800578a:	f04f 0500 	mov.w	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578e:	f140 80c3 	bpl.w	8005918 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005792:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800598c <HAL_RCCEx_PeriphCLKConfig+0x220>
 8005796:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800579a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800579e:	d020      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80057a0:	6861      	ldr	r1, [r4, #4]
 80057a2:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d01c      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057aa:	f8d8 1020 	ldr.w	r1, [r8, #32]
 80057ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80057b2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80057b6:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057ba:	4f76      	ldr	r7, [pc, #472]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80057bc:	fab2 f282 	clz	r2, r2
 80057c0:	443a      	add	r2, r7
 80057c2:	0092      	lsls	r2, r2, #2
 80057c4:	2601      	movs	r6, #1
 80057c6:	6016      	str	r6, [r2, #0]
 80057c8:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057cc:	fab3 f383 	clz	r3, r3
 80057d0:	443b      	add	r3, r7
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80057d8:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80057da:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80057de:	f100 80af 	bmi.w	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80057e2:	6861      	ldr	r1, [r4, #4]
 80057e4:	4a69      	ldr	r2, [pc, #420]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80057e6:	6a13      	ldr	r3, [r2, #32]
 80057e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057f0:	b11d      	cbz	r5, 80057fa <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057f2:	69d3      	ldr	r3, [r2, #28]
 80057f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	07df      	lsls	r7, r3, #31
 80057fe:	d506      	bpl.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005800:	4962      	ldr	r1, [pc, #392]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005802:	68a0      	ldr	r0, [r4, #8]
 8005804:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005806:	f022 0203 	bic.w	r2, r2, #3
 800580a:	4302      	orrs	r2, r0
 800580c:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800580e:	079e      	lsls	r6, r3, #30
 8005810:	d506      	bpl.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005812:	495e      	ldr	r1, [pc, #376]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005814:	68e0      	ldr	r0, [r4, #12]
 8005816:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005818:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800581c:	4302      	orrs	r2, r0
 800581e:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005820:	075d      	lsls	r5, r3, #29
 8005822:	d506      	bpl.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005824:	4959      	ldr	r1, [pc, #356]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005826:	6920      	ldr	r0, [r4, #16]
 8005828:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800582a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800582e:	4302      	orrs	r2, r0
 8005830:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005832:	0698      	lsls	r0, r3, #26
 8005834:	d506      	bpl.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005836:	4955      	ldr	r1, [pc, #340]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005838:	69e0      	ldr	r0, [r4, #28]
 800583a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800583c:	f022 0210 	bic.w	r2, r2, #16
 8005840:	4302      	orrs	r2, r0
 8005842:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005844:	0399      	lsls	r1, r3, #14
 8005846:	d506      	bpl.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005848:	4950      	ldr	r1, [pc, #320]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800584a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800584c:	684a      	ldr	r2, [r1, #4]
 800584e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8005852:	4302      	orrs	r2, r0
 8005854:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005856:	065a      	lsls	r2, r3, #25
 8005858:	d506      	bpl.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800585a:	494c      	ldr	r1, [pc, #304]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800585c:	6a20      	ldr	r0, [r4, #32]
 800585e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005860:	f022 0220 	bic.w	r2, r2, #32
 8005864:	4302      	orrs	r2, r0
 8005866:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005868:	071f      	lsls	r7, r3, #28
 800586a:	d506      	bpl.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800586c:	4947      	ldr	r1, [pc, #284]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800586e:	6960      	ldr	r0, [r4, #20]
 8005870:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005872:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005876:	4302      	orrs	r2, r0
 8005878:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800587a:	06de      	lsls	r6, r3, #27
 800587c:	d506      	bpl.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800587e:	4943      	ldr	r1, [pc, #268]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005880:	69a0      	ldr	r0, [r4, #24]
 8005882:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8005884:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005888:	4302      	orrs	r2, r0
 800588a:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800588c:	059d      	lsls	r5, r3, #22
 800588e:	d506      	bpl.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005890:	493e      	ldr	r1, [pc, #248]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8005892:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005894:	684a      	ldr	r2, [r1, #4]
 8005896:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800589a:	4302      	orrs	r2, r0
 800589c:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800589e:	0618      	lsls	r0, r3, #24
 80058a0:	d506      	bpl.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058a2:	493a      	ldr	r1, [pc, #232]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80058a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058a6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80058a8:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80058ac:	4302      	orrs	r2, r0
 80058ae:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80058b0:	05d9      	lsls	r1, r3, #23
 80058b2:	d506      	bpl.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80058b4:	4935      	ldr	r1, [pc, #212]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80058b6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80058b8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80058ba:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 80058be:	4302      	orrs	r2, r0
 80058c0:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80058c2:	04da      	lsls	r2, r3, #19
 80058c4:	d506      	bpl.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80058c6:	4931      	ldr	r1, [pc, #196]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80058c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80058ca:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80058cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d0:	4302      	orrs	r2, r0
 80058d2:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80058d4:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 80058d8:	d103      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058da:	4618      	mov	r0, r3
}
 80058dc:	b003      	add	sp, #12
 80058de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80058e2:	4a2a      	ldr	r2, [pc, #168]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80058e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80058e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 80058ec:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80058ee:	430b      	orrs	r3, r1
 80058f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80058f2:	b003      	add	sp, #12
 80058f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80058f8:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fa:	4e25      	ldr	r6, [pc, #148]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x224>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80058fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005900:	61da      	str	r2, [r3, #28]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005908:	9301      	str	r3, [sp, #4]
 800590a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 8005910:	f04f 0501 	mov.w	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	f53f af3d 	bmi.w	8005792 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005918:	6833      	ldr	r3, [r6, #0]
 800591a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005920:	f7fd fbcc 	bl	80030bc <HAL_GetTick>
 8005924:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005926:	6833      	ldr	r3, [r6, #0]
 8005928:	05da      	lsls	r2, r3, #23
 800592a:	f53f af32 	bmi.w	8005792 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800592e:	f7fd fbc5 	bl	80030bc <HAL_GetTick>
 8005932:	1bc0      	subs	r0, r0, r7
 8005934:	2864      	cmp	r0, #100	; 0x64
 8005936:	d9f6      	bls.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 8005938:	2003      	movs	r0, #3
}
 800593a:	b003      	add	sp, #12
 800593c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8005940:	f7fd fbbc 	bl	80030bc <HAL_GetTick>
 8005944:	f04f 0902 	mov.w	r9, #2
 8005948:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594a:	e015      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800594c:	fa99 f3a9 	rbit	r3, r9
 8005950:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8005954:	fa99 f3a9 	rbit	r3, r9
 8005958:	fab3 f383 	clz	r3, r3
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	fa06 f303 	lsl.w	r3, r6, r3
 8005964:	4213      	tst	r3, r2
 8005966:	f47f af3c 	bne.w	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800596a:	f7fd fba7 	bl	80030bc <HAL_GetTick>
 800596e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005972:	1bc0      	subs	r0, r0, r7
 8005974:	4298      	cmp	r0, r3
 8005976:	d8df      	bhi.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005978:	fa99 f3a9 	rbit	r3, r9
 800597c:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0e3      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8005984:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8005988:	e7e4      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	40007000 	.word	0x40007000
 8005994:	10908100 	.word	0x10908100

08005998 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005998:	2800      	cmp	r0, #0
 800599a:	d077      	beq.n	8005a8c <HAL_SPI_Init+0xf4>
{
 800599c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059a0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059a2:	4604      	mov	r4, r0
 80059a4:	2e00      	cmp	r6, #0
 80059a6:	d058      	beq.n	8005a5a <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059a8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059ae:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059b2:	2200      	movs	r2, #0
 80059b4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80059b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d059      	beq.n	8005a72 <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059be:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059c0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80059c2:	2302      	movs	r3, #2
 80059c4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80059c8:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ca:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80059ce:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80059d2:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059d4:	d947      	bls.n	8005a66 <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059d6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80059da:	d159      	bne.n	8005a90 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059de:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059e0:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 80059e4:	68a3      	ldr	r3, [r4, #8]
 80059e6:	6a27      	ldr	r7, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059e8:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059ec:	6862      	ldr	r2, [r4, #4]
 80059ee:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059f2:	f402 7282 	and.w	r2, r2, #260	; 0x104
 80059f6:	431a      	orrs	r2, r3
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	431a      	orrs	r2, r3
 8005a00:	6963      	ldr	r3, [r4, #20]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	f006 0c10 	and.w	ip, r6, #16
 8005a12:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a16:	69a6      	ldr	r6, [r4, #24]
 8005a18:	69e3      	ldr	r3, [r4, #28]
 8005a1a:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8005a1e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8005a28:	ea43 0308 	orr.w	r3, r3, r8
 8005a2c:	433b      	orrs	r3, r7
 8005a2e:	432b      	orrs	r3, r5
 8005a30:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a32:	0c33      	lsrs	r3, r6, #16
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	ea4e 0303 	orr.w	r3, lr, r3
 8005a3c:	ea43 030c 	orr.w	r3, r3, ip
 8005a40:	4303      	orrs	r3, r0
 8005a42:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a44:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a46:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8005a4c:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a4e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a50:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a52:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8005a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a5a:	6843      	ldr	r3, [r0, #4]
 8005a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a60:	d0a5      	beq.n	80059ae <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a62:	61c6      	str	r6, [r0, #28]
 8005a64:	e7a3      	b.n	80059ae <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a66:	d00b      	beq.n	8005a80 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a68:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a6c:	2500      	movs	r5, #0
 8005a6e:	62a5      	str	r5, [r4, #40]	; 0x28
 8005a70:	e7b8      	b.n	80059e4 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8005a72:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7fc fd5e 	bl	8002538 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a7e:	e79e      	b.n	80059be <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a86:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8005a8a:	e7ab      	b.n	80059e4 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8005a8c:	2001      	movs	r0, #1
}
 8005a8e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a90:	2000      	movs	r0, #0
 8005a92:	e7eb      	b.n	8005a6c <HAL_SPI_Init+0xd4>

08005a94 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a94:	6a03      	ldr	r3, [r0, #32]
 8005a96:	f023 0301 	bic.w	r3, r3, #1
 8005a9a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9c:	6a03      	ldr	r3, [r0, #32]
{
 8005a9e:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005aaa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005aae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ab0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005ab6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab8:	4d13      	ldr	r5, [pc, #76]	; (8005b08 <TIM_OC1_SetConfig+0x74>)
 8005aba:	42a8      	cmp	r0, r5
 8005abc:	d00f      	beq.n	8005ade <TIM_OC1_SetConfig+0x4a>
 8005abe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ac2:	42a8      	cmp	r0, r5
 8005ac4:	d00b      	beq.n	8005ade <TIM_OC1_SetConfig+0x4a>
 8005ac6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005aca:	42a8      	cmp	r0, r5
 8005acc:	d007      	beq.n	8005ade <TIM_OC1_SetConfig+0x4a>
 8005ace:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ad2:	42a8      	cmp	r0, r5
 8005ad4:	d003      	beq.n	8005ade <TIM_OC1_SetConfig+0x4a>
 8005ad6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ada:	42a8      	cmp	r0, r5
 8005adc:	d10d      	bne.n	8005afa <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ade:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005ae4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aea:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005aee:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af2:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005af6:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005afc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005afe:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005b00:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8005b02:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005b04:	6203      	str	r3, [r0, #32]
}
 8005b06:	4770      	bx	lr
 8005b08:	40012c00 	.word	0x40012c00

08005b0c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b0c:	6a03      	ldr	r3, [r0, #32]
 8005b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b14:	6a03      	ldr	r3, [r0, #32]
{
 8005b16:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b22:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005b26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005b2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b2e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b32:	4d15      	ldr	r5, [pc, #84]	; (8005b88 <TIM_OC3_SetConfig+0x7c>)
 8005b34:	42a8      	cmp	r0, r5
 8005b36:	d010      	beq.n	8005b5a <TIM_OC3_SetConfig+0x4e>
 8005b38:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b3c:	42a8      	cmp	r0, r5
 8005b3e:	d00c      	beq.n	8005b5a <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b40:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b44:	42a8      	cmp	r0, r5
 8005b46:	d00f      	beq.n	8005b68 <TIM_OC3_SetConfig+0x5c>
 8005b48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b4c:	42a8      	cmp	r0, r5
 8005b4e:	d00b      	beq.n	8005b68 <TIM_OC3_SetConfig+0x5c>
 8005b50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b54:	42a8      	cmp	r0, r5
 8005b56:	d10f      	bne.n	8005b78 <TIM_OC3_SetConfig+0x6c>
 8005b58:	e006      	b.n	8005b68 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b5a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b60:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b68:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b6c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b70:	ea46 0c05 	orr.w	ip, r6, r5
 8005b74:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b78:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005b7a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005b7c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005b7e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8005b80:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005b82:	6203      	str	r3, [r0, #32]
}
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40012c00 	.word	0x40012c00

08005b8c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005b8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d122      	bne.n	8005bda <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b94:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b96:	4917      	ldr	r1, [pc, #92]	; (8005bf4 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b9e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ba2:	f042 0201 	orr.w	r2, r2, #1
 8005ba6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba8:	d019      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x52>
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d016      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x52>
 8005bb0:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <HAL_TIM_Base_Start_IT+0x6c>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x52>
 8005bb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00f      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x52>
 8005bbe:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d00b      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x52>
 8005bc6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d007      	beq.n	8005bde <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8005bd4:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	4770      	bx	lr
    return HAL_ERROR;
 8005bda:	2001      	movs	r0, #1
 8005bdc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bde:	6899      	ldr	r1, [r3, #8]
 8005be0:	4a06      	ldr	r2, [pc, #24]	; (8005bfc <HAL_TIM_Base_Start_IT+0x70>)
 8005be2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be4:	2a06      	cmp	r2, #6
 8005be6:	d002      	beq.n	8005bee <HAL_TIM_Base_Start_IT+0x62>
 8005be8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005bec:	d1ef      	bne.n	8005bce <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8005bee:	2000      	movs	r0, #0
}
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	00010007 	.word	0x00010007

08005c00 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c00:	6803      	ldr	r3, [r0, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	f022 0201 	bic.w	r2, r2, #1
 8005c08:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8005c0a:	6a1a      	ldr	r2, [r3, #32]
 8005c0c:	f241 1111 	movw	r1, #4369	; 0x1111
 8005c10:	420a      	tst	r2, r1
 8005c12:	d108      	bne.n	8005c26 <HAL_TIM_Base_Stop_IT+0x26>
 8005c14:	6a19      	ldr	r1, [r3, #32]
 8005c16:	f240 4244 	movw	r2, #1092	; 0x444
 8005c1a:	4211      	tst	r1, r2
 8005c1c:	d103      	bne.n	8005c26 <HAL_TIM_Base_Stop_IT+0x26>
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	4770      	bx	lr

08005c30 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005c30:	2800      	cmp	r0, #0
 8005c32:	f000 8081 	beq.w	8005d38 <HAL_TIM_PWM_Init+0x108>
{
 8005c36:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005c38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d06d      	beq.n	8005d22 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c46:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c48:	493c      	ldr	r1, [pc, #240]	; (8005d3c <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005c52:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c54:	d051      	beq.n	8005cfa <HAL_TIM_PWM_Init+0xca>
 8005c56:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005c5a:	d021      	beq.n	8005ca0 <HAL_TIM_PWM_Init+0x70>
 8005c5c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005c60:	428a      	cmp	r2, r1
 8005c62:	d01d      	beq.n	8005ca0 <HAL_TIM_PWM_Init+0x70>
 8005c64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c68:	428a      	cmp	r2, r1
 8005c6a:	d019      	beq.n	8005ca0 <HAL_TIM_PWM_Init+0x70>
 8005c6c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005c70:	428a      	cmp	r2, r1
 8005c72:	d042      	beq.n	8005cfa <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c74:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005c78:	428a      	cmp	r2, r1
 8005c7a:	d057      	beq.n	8005d2c <HAL_TIM_PWM_Init+0xfc>
 8005c7c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c80:	428a      	cmp	r2, r1
 8005c82:	d053      	beq.n	8005d2c <HAL_TIM_PWM_Init+0xfc>
 8005c84:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c88:	428a      	cmp	r2, r1
 8005c8a:	d04f      	beq.n	8005d2c <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c8c:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c8e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c94:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005c96:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005c98:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c9c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c9e:	e010      	b.n	8005cc2 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8005ca0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ca8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cae:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cb0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005cba:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005cbc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cbe:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005cc0:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005cce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005cd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005cd6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005cee:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005cf2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005cf6:	2000      	movs	r0, #0
}
 8005cf8:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8005cfa:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cfc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d02:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d08:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d0a:	69a1      	ldr	r1, [r4, #24]
 8005d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d10:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005d12:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d14:	68e3      	ldr	r3, [r4, #12]
 8005d16:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d18:	6863      	ldr	r3, [r4, #4]
 8005d1a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005d1c:	6963      	ldr	r3, [r4, #20]
 8005d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d20:	e7cf      	b.n	8005cc2 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8005d22:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005d26:	f7fc fd9f 	bl	8002868 <HAL_TIM_PWM_MspInit>
 8005d2a:	e78c      	b.n	8005c46 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d2c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d2e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d34:	4303      	orrs	r3, r0
 8005d36:	e7e9      	b.n	8005d0c <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8005d38:	2001      	movs	r0, #1
}
 8005d3a:	4770      	bx	lr
 8005d3c:	40012c00 	.word	0x40012c00

08005d40 <HAL_TIM_PWM_Start>:
 8005d40:	2900      	cmp	r1, #0
 8005d42:	d14a      	bne.n	8005dda <HAL_TIM_PWM_Start+0x9a>
 8005d44:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d160      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xce>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8005d52:	6803      	ldr	r3, [r0, #0]
 8005d54:	2201      	movs	r2, #1
 8005d56:	6a18      	ldr	r0, [r3, #32]
 8005d58:	f001 011f 	and.w	r1, r1, #31
 8005d5c:	fa02 f101 	lsl.w	r1, r2, r1
 8005d60:	ea20 0001 	bic.w	r0, r0, r1
 8005d64:	6218      	str	r0, [r3, #32]
 8005d66:	6a18      	ldr	r0, [r3, #32]
 8005d68:	4a3b      	ldr	r2, [pc, #236]	; (8005e58 <HAL_TIM_PWM_Start+0x118>)
 8005d6a:	4301      	orrs	r1, r0
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	6219      	str	r1, [r3, #32]
 8005d70:	d059      	beq.n	8005e26 <HAL_TIM_PWM_Start+0xe6>
 8005d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00b      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x52>
 8005d7a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d007      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x52>
 8005d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_PWM_Start+0x52>
 8005d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d103      	bne.n	8005d9a <HAL_TIM_PWM_Start+0x5a>
 8005d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d98:	645a      	str	r2, [r3, #68]	; 0x44
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9e:	d00e      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x7e>
 8005da0:	4a2e      	ldr	r2, [pc, #184]	; (8005e5c <HAL_TIM_PWM_Start+0x11c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00b      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x7e>
 8005da6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x7e>
 8005dae:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <HAL_TIM_PWM_Start+0x7e>
 8005db6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d107      	bne.n	8005dce <HAL_TIM_PWM_Start+0x8e>
 8005dbe:	6899      	ldr	r1, [r3, #8]
 8005dc0:	4a27      	ldr	r2, [pc, #156]	; (8005e60 <HAL_TIM_PWM_Start+0x120>)
 8005dc2:	400a      	ands	r2, r1
 8005dc4:	2a06      	cmp	r2, #6
 8005dc6:	d024      	beq.n	8005e12 <HAL_TIM_PWM_Start+0xd2>
 8005dc8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005dcc:	d021      	beq.n	8005e12 <HAL_TIM_PWM_Start+0xd2>
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	f042 0201 	orr.w	r2, r2, #1
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	4770      	bx	lr
 8005dda:	2904      	cmp	r1, #4
 8005ddc:	d01b      	beq.n	8005e16 <HAL_TIM_PWM_Start+0xd6>
 8005dde:	2908      	cmp	r1, #8
 8005de0:	d026      	beq.n	8005e30 <HAL_TIM_PWM_Start+0xf0>
 8005de2:	290c      	cmp	r1, #12
 8005de4:	d00f      	beq.n	8005e06 <HAL_TIM_PWM_Start+0xc6>
 8005de6:	2910      	cmp	r1, #16
 8005de8:	d02e      	beq.n	8005e48 <HAL_TIM_PWM_Start+0x108>
 8005dea:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10d      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xce>
 8005df2:	2908      	cmp	r1, #8
 8005df4:	d020      	beq.n	8005e38 <HAL_TIM_PWM_Start+0xf8>
 8005df6:	290c      	cmp	r1, #12
 8005df8:	d022      	beq.n	8005e40 <HAL_TIM_PWM_Start+0x100>
 8005dfa:	2910      	cmp	r1, #16
 8005dfc:	d028      	beq.n	8005e50 <HAL_TIM_PWM_Start+0x110>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8005e04:	e7a5      	b.n	8005d52 <HAL_TIM_PWM_Start+0x12>
 8005e06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d018      	beq.n	8005e40 <HAL_TIM_PWM_Start+0x100>
 8005e0e:	2001      	movs	r0, #1
 8005e10:	4770      	bx	lr
 8005e12:	2000      	movs	r0, #0
 8005e14:	4770      	bx	lr
 8005e16:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d1f7      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xce>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005e24:	e795      	b.n	8005d52 <HAL_TIM_PWM_Start+0x12>
 8005e26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44
 8005e2e:	e7c6      	b.n	8005dbe <HAL_TIM_PWM_Start+0x7e>
 8005e30:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d1ea      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xce>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005e3e:	e788      	b.n	8005d52 <HAL_TIM_PWM_Start+0x12>
 8005e40:	2302      	movs	r3, #2
 8005e42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005e46:	e784      	b.n	8005d52 <HAL_TIM_PWM_Start+0x12>
 8005e48:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d1de      	bne.n	8005e0e <HAL_TIM_PWM_Start+0xce>
 8005e50:	2302      	movs	r3, #2
 8005e52:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8005e56:	e77c      	b.n	8005d52 <HAL_TIM_PWM_Start+0x12>
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	00010007 	.word	0x00010007

08005e64 <HAL_TIM_PWM_Stop>:
 8005e64:	6803      	ldr	r3, [r0, #0]
 8005e66:	b410      	push	{r4}
 8005e68:	6a1a      	ldr	r2, [r3, #32]
 8005e6a:	f001 041f 	and.w	r4, r1, #31
 8005e6e:	f04f 0c01 	mov.w	ip, #1
 8005e72:	fa0c fc04 	lsl.w	ip, ip, r4
 8005e76:	ea22 020c 	bic.w	r2, r2, ip
 8005e7a:	621a      	str	r2, [r3, #32]
 8005e7c:	4a2c      	ldr	r2, [pc, #176]	; (8005f30 <HAL_TIM_PWM_Stop+0xcc>)
 8005e7e:	6a1c      	ldr	r4, [r3, #32]
 8005e80:	621c      	str	r4, [r3, #32]
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d021      	beq.n	8005eca <HAL_TIM_PWM_Stop+0x66>
 8005e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d01d      	beq.n	8005eca <HAL_TIM_PWM_Stop+0x66>
 8005e8e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d019      	beq.n	8005eca <HAL_TIM_PWM_Stop+0x66>
 8005e96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d015      	beq.n	8005eca <HAL_TIM_PWM_Stop+0x66>
 8005e9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d011      	beq.n	8005eca <HAL_TIM_PWM_Stop+0x66>
 8005ea6:	6a1c      	ldr	r4, [r3, #32]
 8005ea8:	f241 1211 	movw	r2, #4369	; 0x1111
 8005eac:	4214      	tst	r4, r2
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Stop+0x56>
 8005eb0:	6a1c      	ldr	r4, [r3, #32]
 8005eb2:	f240 4244 	movw	r2, #1092	; 0x444
 8005eb6:	4214      	tst	r4, r2
 8005eb8:	d026      	beq.n	8005f08 <HAL_TIM_PWM_Stop+0xa4>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	b9a1      	cbnz	r1, 8005ee8 <HAL_TIM_PWM_Stop+0x84>
 8005ebe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	6a1c      	ldr	r4, [r3, #32]
 8005ecc:	f241 1211 	movw	r2, #4369	; 0x1111
 8005ed0:	4214      	tst	r4, r2
 8005ed2:	d1e8      	bne.n	8005ea6 <HAL_TIM_PWM_Stop+0x42>
 8005ed4:	6a1c      	ldr	r4, [r3, #32]
 8005ed6:	f240 4244 	movw	r2, #1092	; 0x444
 8005eda:	4214      	tst	r4, r2
 8005edc:	d1e3      	bne.n	8005ea6 <HAL_TIM_PWM_Stop+0x42>
 8005ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ee4:	645a      	str	r2, [r3, #68]	; 0x44
 8005ee6:	e7de      	b.n	8005ea6 <HAL_TIM_PWM_Stop+0x42>
 8005ee8:	2904      	cmp	r1, #4
 8005eea:	d012      	beq.n	8005f12 <HAL_TIM_PWM_Stop+0xae>
 8005eec:	2908      	cmp	r1, #8
 8005eee:	d019      	beq.n	8005f24 <HAL_TIM_PWM_Stop+0xc0>
 8005ef0:	290c      	cmp	r1, #12
 8005ef2:	d014      	beq.n	8005f1e <HAL_TIM_PWM_Stop+0xba>
 8005ef4:	2910      	cmp	r1, #16
 8005ef6:	bf0c      	ite	eq
 8005ef8:	f880 3042 	strbeq.w	r3, [r0, #66]	; 0x42
 8005efc:	f880 3043 	strbne.w	r3, [r0, #67]	; 0x43
 8005f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f04:	2000      	movs	r0, #0
 8005f06:	4770      	bx	lr
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e7d3      	b.n	8005eba <HAL_TIM_PWM_Stop+0x56>
 8005f12:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005f16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	4770      	bx	lr
 8005f1e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005f22:	e7ce      	b.n	8005ec2 <HAL_TIM_PWM_Stop+0x5e>
 8005f24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8005f28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	4770      	bx	lr
 8005f30:	40012c00 	.word	0x40012c00

08005f34 <HAL_TIM_OC_DelayElapsedCallback>:
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop

08005f38 <HAL_TIM_IC_CaptureCallback>:
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop

08005f3c <HAL_TIM_PWM_PulseFinishedCallback>:
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop

08005f40 <HAL_TIM_TriggerCallback>:
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop

08005f44 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f44:	6803      	ldr	r3, [r0, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	0791      	lsls	r1, r2, #30
{
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f4e:	d502      	bpl.n	8005f56 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	0792      	lsls	r2, r2, #30
 8005f54:	d468      	bmi.n	8006028 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f56:	691a      	ldr	r2, [r3, #16]
 8005f58:	0752      	lsls	r2, r2, #29
 8005f5a:	d502      	bpl.n	8005f62 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	0750      	lsls	r0, r2, #29
 8005f60:	d44f      	bmi.n	8006002 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f62:	691a      	ldr	r2, [r3, #16]
 8005f64:	0711      	lsls	r1, r2, #28
 8005f66:	d502      	bpl.n	8005f6e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	0712      	lsls	r2, r2, #28
 8005f6c:	d437      	bmi.n	8005fde <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	06d0      	lsls	r0, r2, #27
 8005f72:	d502      	bpl.n	8005f7a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f74:	68da      	ldr	r2, [r3, #12]
 8005f76:	06d1      	lsls	r1, r2, #27
 8005f78:	d41e      	bmi.n	8005fb8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	07d2      	lsls	r2, r2, #31
 8005f7e:	d502      	bpl.n	8005f86 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	07d0      	lsls	r0, r2, #31
 8005f84:	d469      	bmi.n	800605a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	0611      	lsls	r1, r2, #24
 8005f8a:	d502      	bpl.n	8005f92 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	0612      	lsls	r2, r2, #24
 8005f90:	d46b      	bmi.n	800606a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	05d0      	lsls	r0, r2, #23
 8005f96:	d502      	bpl.n	8005f9e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	0611      	lsls	r1, r2, #24
 8005f9c:	d46d      	bmi.n	800607a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	0652      	lsls	r2, r2, #25
 8005fa2:	d502      	bpl.n	8005faa <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	0650      	lsls	r0, r2, #25
 8005fa8:	d46f      	bmi.n	800608a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	0691      	lsls	r1, r2, #26
 8005fae:	d502      	bpl.n	8005fb6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	0692      	lsls	r2, r2, #26
 8005fb4:	d449      	bmi.n	800604a <HAL_TIM_IRQHandler+0x106>
}
 8005fb6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fb8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fbc:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fbe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fca:	d16f      	bne.n	80060ac <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fcc:	f7ff ffb2 	bl	8005f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f7ff ffb3 	bl	8005f3c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fd8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fda:	7722      	strb	r2, [r4, #28]
 8005fdc:	e7cd      	b.n	8005f7a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fde:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe2:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fe4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8005fec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fee:	d15a      	bne.n	80060a6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff0:	f7ff ffa0 	bl	8005f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f7ff ffa1 	bl	8005f3c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ffc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffe:	7722      	strb	r2, [r4, #28]
 8006000:	e7b5      	b.n	8005f6e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006002:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006006:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006008:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800600a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006012:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006014:	d144      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	f7ff ff8d 	bl	8005f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601a:	4620      	mov	r0, r4
 800601c:	f7ff ff8e 	bl	8005f3c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006020:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006022:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006024:	7722      	strb	r2, [r4, #28]
 8006026:	e79c      	b.n	8005f62 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006028:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800602c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800602e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006030:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	0799      	lsls	r1, r3, #30
 8006036:	d130      	bne.n	800609a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006038:	f7ff ff7c 	bl	8005f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff ff7d 	bl	8005f3c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006042:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006044:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006046:	7722      	strb	r2, [r4, #28]
 8006048:	e785      	b.n	8005f56 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800604a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800604e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006050:	611a      	str	r2, [r3, #16]
}
 8006052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006056:	f000 bad7 	b.w	8006608 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800605a:	f06f 0201 	mvn.w	r2, #1
 800605e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006060:	4620      	mov	r0, r4
 8006062:	f7fb fb6d 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006066:	6823      	ldr	r3, [r4, #0]
 8006068:	e78d      	b.n	8005f86 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800606a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800606e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006070:	4620      	mov	r0, r4
 8006072:	f000 facb 	bl	800660c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	e78b      	b.n	8005f92 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800607a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800607e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fac5 	bl	8006610 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	e789      	b.n	8005f9e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800608a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800608e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006090:	4620      	mov	r0, r4
 8006092:	f7ff ff55 	bl	8005f40 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	e787      	b.n	8005faa <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800609a:	f7ff ff4d 	bl	8005f38 <HAL_TIM_IC_CaptureCallback>
 800609e:	e7d0      	b.n	8006042 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80060a0:	f7ff ff4a 	bl	8005f38 <HAL_TIM_IC_CaptureCallback>
 80060a4:	e7bc      	b.n	8006020 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80060a6:	f7ff ff47 	bl	8005f38 <HAL_TIM_IC_CaptureCallback>
 80060aa:	e7a6      	b.n	8005ffa <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80060ac:	f7ff ff44 	bl	8005f38 <HAL_TIM_IC_CaptureCallback>
 80060b0:	e791      	b.n	8005fd6 <HAL_TIM_IRQHandler+0x92>
 80060b2:	bf00      	nop

080060b4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b4:	6a03      	ldr	r3, [r0, #32]
 80060b6:	f023 0310 	bic.w	r3, r3, #16
 80060ba:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80060bc:	6a03      	ldr	r3, [r0, #32]
{
 80060be:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80060c0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80060c2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060c6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80060ca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060d2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80060d4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060dc:	4d14      	ldr	r5, [pc, #80]	; (8006130 <TIM_OC2_SetConfig+0x7c>)
 80060de:	42a8      	cmp	r0, r5
 80060e0:	d010      	beq.n	8006104 <TIM_OC2_SetConfig+0x50>
 80060e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80060e6:	42a8      	cmp	r0, r5
 80060e8:	d00c      	beq.n	8006104 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80060ee:	42a8      	cmp	r0, r5
 80060f0:	d00f      	beq.n	8006112 <TIM_OC2_SetConfig+0x5e>
 80060f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060f6:	42a8      	cmp	r0, r5
 80060f8:	d00b      	beq.n	8006112 <TIM_OC2_SetConfig+0x5e>
 80060fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80060fe:	42a8      	cmp	r0, r5
 8006100:	d10f      	bne.n	8006122 <TIM_OC2_SetConfig+0x6e>
 8006102:	e006      	b.n	8006112 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006104:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800610a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800610e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006112:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006116:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800611a:	ea46 0c05 	orr.w	ip, r6, r5
 800611e:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8006122:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006124:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006126:	6182      	str	r2, [r0, #24]
}
 8006128:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800612a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800612c:	6203      	str	r3, [r0, #32]
}
 800612e:	4770      	bx	lr
 8006130:	40012c00 	.word	0x40012c00

08006134 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006134:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006138:	2b01      	cmp	r3, #1
 800613a:	f000 812b 	beq.w	8006394 <HAL_TIM_PWM_ConfigChannel+0x260>
 800613e:	2301      	movs	r3, #1
{
 8006140:	b570      	push	{r4, r5, r6, lr}
 8006142:	4604      	mov	r4, r0
 8006144:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8006146:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800614a:	2a14      	cmp	r2, #20
 800614c:	d816      	bhi.n	800617c <HAL_TIM_PWM_ConfigChannel+0x48>
 800614e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006152:	005d      	.short	0x005d
 8006154:	00150015 	.word	0x00150015
 8006158:	00720015 	.word	0x00720015
 800615c:	00150015 	.word	0x00150015
 8006160:	00880015 	.word	0x00880015
 8006164:	00150015 	.word	0x00150015
 8006168:	009d0015 	.word	0x009d0015
 800616c:	00150015 	.word	0x00150015
 8006170:	00e00015 	.word	0x00e00015
 8006174:	00150015 	.word	0x00150015
 8006178:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 800617c:	2300      	movs	r3, #0
 800617e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8006182:	2001      	movs	r0, #1
}
 8006184:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006186:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006188:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800618a:	6a1a      	ldr	r2, [r3, #32]
 800618c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006190:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006192:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006194:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006196:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006198:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800619c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061a4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061a6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061aa:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ae:	4e7a      	ldr	r6, [pc, #488]	; (8006398 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80061b0:	42b3      	cmp	r3, r6
 80061b2:	d00f      	beq.n	80061d4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80061b4:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80061b8:	42b3      	cmp	r3, r6
 80061ba:	d00b      	beq.n	80061d4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80061bc:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80061c0:	42b3      	cmp	r3, r6
 80061c2:	d007      	beq.n	80061d4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80061c4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061c8:	42b3      	cmp	r3, r6
 80061ca:	d003      	beq.n	80061d4 <HAL_TIM_PWM_ConfigChannel+0xa0>
 80061cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80061d0:	42b3      	cmp	r3, r6
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_ConfigChannel+0xaa>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061d4:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061d6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061da:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061de:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061e0:	6559      	str	r1, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061e2:	6869      	ldr	r1, [r5, #4]
 80061e4:	65d9      	str	r1, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061ea:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061ec:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80061f0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061f4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80061f8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061fc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006200:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8006202:	2300      	movs	r3, #0
 8006204:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006208:	2000      	movs	r0, #0
}
 800620a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800620c:	6800      	ldr	r0, [r0, #0]
 800620e:	f7ff fc41 	bl	8005a94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006212:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006214:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006216:	6999      	ldr	r1, [r3, #24]
 8006218:	f041 0108 	orr.w	r1, r1, #8
 800621c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800621e:	6999      	ldr	r1, [r3, #24]
 8006220:	f021 0104 	bic.w	r1, r1, #4
 8006224:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	4302      	orrs	r2, r0
 800622a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800622c:	2300      	movs	r3, #0
 800622e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006232:	2000      	movs	r0, #0
}
 8006234:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006236:	6800      	ldr	r0, [r0, #0]
 8006238:	f7ff ff3c 	bl	80060b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800623c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800623e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006240:	6999      	ldr	r1, [r3, #24]
 8006242:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006246:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800624e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006256:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8006258:	2300      	movs	r3, #0
 800625a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800625e:	2000      	movs	r0, #0
}
 8006260:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006262:	6800      	ldr	r0, [r0, #0]
 8006264:	f7ff fc52 	bl	8005b0c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006268:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800626a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800626c:	69d9      	ldr	r1, [r3, #28]
 800626e:	f041 0108 	orr.w	r1, r1, #8
 8006272:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006274:	69d9      	ldr	r1, [r3, #28]
 8006276:	f021 0104 	bic.w	r1, r1, #4
 800627a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800627c:	69da      	ldr	r2, [r3, #28]
 800627e:	4302      	orrs	r2, r0
 8006280:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006282:	2300      	movs	r3, #0
 8006284:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006288:	2000      	movs	r0, #0
}
 800628a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800628c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800628e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006296:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8006298:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800629a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800629c:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800629e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80062a2:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a6:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062aa:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80062ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062b0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b4:	4e38      	ldr	r6, [pc, #224]	; (8006398 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80062b6:	42b3      	cmp	r3, r6
 80062b8:	d00f      	beq.n	80062da <HAL_TIM_PWM_ConfigChannel+0x1a6>
 80062ba:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80062be:	42b3      	cmp	r3, r6
 80062c0:	d00b      	beq.n	80062da <HAL_TIM_PWM_ConfigChannel+0x1a6>
 80062c2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80062c6:	42b3      	cmp	r3, r6
 80062c8:	d007      	beq.n	80062da <HAL_TIM_PWM_ConfigChannel+0x1a6>
 80062ca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80062ce:	42b3      	cmp	r3, r6
 80062d0:	d003      	beq.n	80062da <HAL_TIM_PWM_ConfigChannel+0x1a6>
 80062d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80062d6:	42b3      	cmp	r3, r6
 80062d8:	d104      	bne.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0x1b0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062da:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062dc:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062e0:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 80062e4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80062e6:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80062e8:	6869      	ldr	r1, [r5, #4]
 80062ea:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80062ec:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ee:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062f0:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062f2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80062f6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062f8:	69d9      	ldr	r1, [r3, #28]
 80062fa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80062fe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006300:	69da      	ldr	r2, [r3, #28]
 8006302:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006306:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8006308:	2300      	movs	r3, #0
 800630a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800630e:	2000      	movs	r0, #0
}
 8006310:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006312:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8006314:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006316:	6a1a      	ldr	r2, [r3, #32]
 8006318:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800631c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800631e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8006320:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8006322:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006324:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8006328:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800632c:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800632e:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8006330:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006334:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006338:	4e17      	ldr	r6, [pc, #92]	; (8006398 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800633a:	42b3      	cmp	r3, r6
 800633c:	d00f      	beq.n	800635e <HAL_TIM_PWM_ConfigChannel+0x22a>
 800633e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8006342:	42b3      	cmp	r3, r6
 8006344:	d00b      	beq.n	800635e <HAL_TIM_PWM_ConfigChannel+0x22a>
 8006346:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 800634a:	42b3      	cmp	r3, r6
 800634c:	d007      	beq.n	800635e <HAL_TIM_PWM_ConfigChannel+0x22a>
 800634e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006352:	42b3      	cmp	r3, r6
 8006354:	d003      	beq.n	800635e <HAL_TIM_PWM_ConfigChannel+0x22a>
 8006356:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800635a:	42b3      	cmp	r3, r6
 800635c:	d104      	bne.n	8006368 <HAL_TIM_PWM_ConfigChannel+0x234>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800635e:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006360:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006364:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006368:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 800636a:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800636c:	6869      	ldr	r1, [r5, #4]
 800636e:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8006370:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006372:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006374:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006376:	f041 0108 	orr.w	r1, r1, #8
 800637a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800637c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800637e:	f021 0104 	bic.w	r1, r1, #4
 8006382:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006386:	432a      	orrs	r2, r5
 8006388:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800638a:	2300      	movs	r3, #0
 800638c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006390:	2000      	movs	r0, #0
}
 8006392:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8006394:	2002      	movs	r0, #2
}
 8006396:	4770      	bx	lr
 8006398:	40012c00 	.word	0x40012c00

0800639c <HAL_TIMEx_PWMN_Start>:
 800639c:	2900      	cmp	r1, #0
 800639e:	d13a      	bne.n	8006416 <HAL_TIMEx_PWMN_Start+0x7a>
 80063a0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d142      	bne.n	800642e <HAL_TIMEx_PWMN_Start+0x92>
 80063a8:	2302      	movs	r3, #2
 80063aa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80063ae:	6803      	ldr	r3, [r0, #0]
 80063b0:	2204      	movs	r2, #4
 80063b2:	6a18      	ldr	r0, [r3, #32]
 80063b4:	f001 011f 	and.w	r1, r1, #31
 80063b8:	fa02 f101 	lsl.w	r1, r2, r1
 80063bc:	ea20 0001 	bic.w	r0, r0, r1
 80063c0:	6218      	str	r0, [r3, #32]
 80063c2:	6a1a      	ldr	r2, [r3, #32]
 80063c4:	4824      	ldr	r0, [pc, #144]	; (8006458 <HAL_TIMEx_PWMN_Start+0xbc>)
 80063c6:	4311      	orrs	r1, r2
 80063c8:	6219      	str	r1, [r3, #32]
 80063ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063cc:	4283      	cmp	r3, r0
 80063ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44
 80063d4:	d011      	beq.n	80063fa <HAL_TIMEx_PWMN_Start+0x5e>
 80063d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063da:	d00e      	beq.n	80063fa <HAL_TIMEx_PWMN_Start+0x5e>
 80063dc:	4a1f      	ldr	r2, [pc, #124]	; (800645c <HAL_TIMEx_PWMN_Start+0xc0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00b      	beq.n	80063fa <HAL_TIMEx_PWMN_Start+0x5e>
 80063e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <HAL_TIMEx_PWMN_Start+0x5e>
 80063ea:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <HAL_TIMEx_PWMN_Start+0x5e>
 80063f2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d107      	bne.n	800640a <HAL_TIMEx_PWMN_Start+0x6e>
 80063fa:	6899      	ldr	r1, [r3, #8]
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <HAL_TIMEx_PWMN_Start+0xc4>)
 80063fe:	400a      	ands	r2, r1
 8006400:	2a06      	cmp	r2, #6
 8006402:	d016      	beq.n	8006432 <HAL_TIMEx_PWMN_Start+0x96>
 8006404:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006408:	d013      	beq.n	8006432 <HAL_TIMEx_PWMN_Start+0x96>
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	f042 0201 	orr.w	r2, r2, #1
 8006410:	2000      	movs	r0, #0
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	4770      	bx	lr
 8006416:	2904      	cmp	r1, #4
 8006418:	d00d      	beq.n	8006436 <HAL_TIMEx_PWMN_Start+0x9a>
 800641a:	2908      	cmp	r1, #8
 800641c:	d013      	beq.n	8006446 <HAL_TIMEx_PWMN_Start+0xaa>
 800641e:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8006422:	2b01      	cmp	r3, #1
 8006424:	d103      	bne.n	800642e <HAL_TIMEx_PWMN_Start+0x92>
 8006426:	2302      	movs	r3, #2
 8006428:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 800642c:	e7bf      	b.n	80063ae <HAL_TIMEx_PWMN_Start+0x12>
 800642e:	2001      	movs	r0, #1
 8006430:	4770      	bx	lr
 8006432:	2000      	movs	r0, #0
 8006434:	4770      	bx	lr
 8006436:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800643a:	2b01      	cmp	r3, #1
 800643c:	d1f7      	bne.n	800642e <HAL_TIMEx_PWMN_Start+0x92>
 800643e:	2302      	movs	r3, #2
 8006440:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8006444:	e7b3      	b.n	80063ae <HAL_TIMEx_PWMN_Start+0x12>
 8006446:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800644a:	2b01      	cmp	r3, #1
 800644c:	d1ef      	bne.n	800642e <HAL_TIMEx_PWMN_Start+0x92>
 800644e:	2302      	movs	r3, #2
 8006450:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8006454:	e7ab      	b.n	80063ae <HAL_TIMEx_PWMN_Start+0x12>
 8006456:	bf00      	nop
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40000400 	.word	0x40000400
 8006460:	00010007 	.word	0x00010007

08006464 <HAL_TIMEx_PWMN_Stop>:
 8006464:	6803      	ldr	r3, [r0, #0]
 8006466:	b410      	push	{r4}
 8006468:	6a1a      	ldr	r2, [r3, #32]
 800646a:	f001 041f 	and.w	r4, r1, #31
 800646e:	f04f 0c04 	mov.w	ip, #4
 8006472:	fa0c fc04 	lsl.w	ip, ip, r4
 8006476:	ea22 020c 	bic.w	r2, r2, ip
 800647a:	621a      	str	r2, [r3, #32]
 800647c:	6a1a      	ldr	r2, [r3, #32]
 800647e:	621a      	str	r2, [r3, #32]
 8006480:	6a1c      	ldr	r4, [r3, #32]
 8006482:	f241 1211 	movw	r2, #4369	; 0x1111
 8006486:	4214      	tst	r4, r2
 8006488:	d104      	bne.n	8006494 <HAL_TIMEx_PWMN_Stop+0x30>
 800648a:	6a1c      	ldr	r4, [r3, #32]
 800648c:	f240 4244 	movw	r2, #1092	; 0x444
 8006490:	4214      	tst	r4, r2
 8006492:	d022      	beq.n	80064da <HAL_TIMEx_PWMN_Stop+0x76>
 8006494:	6a1c      	ldr	r4, [r3, #32]
 8006496:	f241 1211 	movw	r2, #4369	; 0x1111
 800649a:	4214      	tst	r4, r2
 800649c:	d104      	bne.n	80064a8 <HAL_TIMEx_PWMN_Stop+0x44>
 800649e:	6a1c      	ldr	r4, [r3, #32]
 80064a0:	f240 4244 	movw	r2, #1092	; 0x444
 80064a4:	4214      	tst	r4, r2
 80064a6:	d013      	beq.n	80064d0 <HAL_TIMEx_PWMN_Stop+0x6c>
 80064a8:	2301      	movs	r3, #1
 80064aa:	b929      	cbnz	r1, 80064b8 <HAL_TIMEx_PWMN_Stop+0x54>
 80064ac:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80064b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064b4:	2000      	movs	r0, #0
 80064b6:	4770      	bx	lr
 80064b8:	2904      	cmp	r1, #4
 80064ba:	d013      	beq.n	80064e4 <HAL_TIMEx_PWMN_Stop+0x80>
 80064bc:	2908      	cmp	r1, #8
 80064be:	bf0c      	ite	eq
 80064c0:	f880 3046 	strbeq.w	r3, [r0, #70]	; 0x46
 80064c4:	f880 3047 	strbne.w	r3, [r0, #71]	; 0x47
 80064c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064cc:	2000      	movs	r0, #0
 80064ce:	4770      	bx	lr
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	f022 0201 	bic.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	e7e6      	b.n	80064a8 <HAL_TIMEx_PWMN_Stop+0x44>
 80064da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064e0:	645a      	str	r2, [r3, #68]	; 0x44
 80064e2:	e7d7      	b.n	8006494 <HAL_TIMEx_PWMN_Stop+0x30>
 80064e4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80064e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064ec:	2000      	movs	r0, #0
 80064ee:	4770      	bx	lr

080064f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d03a      	beq.n	800656e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 80064f8:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064fa:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064fc:	4d1d      	ldr	r5, [pc, #116]	; (8006574 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 80064fe:	2302      	movs	r3, #2
 8006500:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006504:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006506:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006508:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800650a:	d026      	beq.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800650c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006510:	42aa      	cmp	r2, r5
 8006512:	d022      	beq.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006514:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800651a:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800651c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006520:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006522:	d00c      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8006524:	4b14      	ldr	r3, [pc, #80]	; (8006578 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8006526:	429a      	cmp	r2, r3
 8006528:	d009      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800652a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800652e:	429a      	cmp	r2, r3
 8006530:	d005      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8006532:	42aa      	cmp	r2, r5
 8006534:	d003      	beq.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8006536:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800653a:	429a      	cmp	r2, r3
 800653c:	d104      	bne.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800653e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006540:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006544:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006546:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006548:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800654a:	2201      	movs	r2, #1
 800654c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006550:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8006554:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8006556:	4618      	mov	r0, r3
}
 8006558:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800655a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800655c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006560:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006562:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006568:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800656a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656c:	e7e7      	b.n	800653e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 800656e:	2002      	movs	r0, #2
}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00
 8006578:	40000400 	.word	0x40000400

0800657c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800657c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006580:	2b01      	cmp	r3, #1
 8006582:	d03d      	beq.n	8006600 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 8006584:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006586:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800658a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658e:	4602      	mov	r2, r0
 8006590:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006592:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006594:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800659a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800659c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065a0:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065a2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065a8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065aa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065b0:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065b2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065b8:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065ba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065bc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065c0:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80065c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065c6:	4c0f      	ldr	r4, [pc, #60]	; (8006604 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80065c8:	42a0      	cmp	r0, r4
 80065ca:	d00b      	beq.n	80065e4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80065cc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80065d0:	42a0      	cmp	r0, r4
 80065d2:	d007      	beq.n	80065e4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80065d4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80065d6:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80065d8:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80065dc:	4608      	mov	r0, r1
}
 80065de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065e2:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065e4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80065e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065ea:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065ee:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065f0:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065f6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065f8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80065fc:	430b      	orrs	r3, r1
 80065fe:	e7e9      	b.n	80065d4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8006600:	2002      	movs	r0, #2
}
 8006602:	4770      	bx	lr
 8006604:	40012c00 	.word	0x40012c00

08006608 <HAL_TIMEx_CommutCallback>:
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop

0800660c <HAL_TIMEx_BreakCallback>:
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <HAL_TIMEx_Break2Callback>:
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop

08006614 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006614:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006616:	2b20      	cmp	r3, #32
 8006618:	d159      	bne.n	80066ce <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 800661a:	2900      	cmp	r1, #0
 800661c:	d055      	beq.n	80066ca <HAL_UART_Receive_IT+0xb6>
 800661e:	2a00      	cmp	r2, #0
 8006620:	d053      	beq.n	80066ca <HAL_UART_Receive_IT+0xb6>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8006622:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8006626:	2b01      	cmp	r3, #1
 8006628:	d051      	beq.n	80066ce <HAL_UART_Receive_IT+0xba>
{
 800662a:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 800662c:	2401      	movs	r4, #1
 800662e:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006632:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006634:	2400      	movs	r4, #0
 8006636:	6604      	str	r4, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006638:	685c      	ldr	r4, [r3, #4]
 800663a:	0224      	lsls	r4, r4, #8
 800663c:	d50e      	bpl.n	800665c <HAL_UART_Receive_IT+0x48>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	e853 4f00 	ldrex	r4, [r3]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006642:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	e843 4500 	strex	r5, r4, [r3]
 800664a:	b13d      	cbz	r5, 800665c <HAL_UART_Receive_IT+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	e853 cf00 	ldrex	ip, [r3]
 8006650:	f04c 6c80 	orr.w	ip, ip, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	e843 c400 	strex	r4, ip, [r3]
 8006658:	2c00      	cmp	r4, #0
 800665a:	d1f7      	bne.n	800664c <HAL_UART_Receive_IT+0x38>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800665c:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 800665e:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 8006660:	2500      	movs	r5, #0
  UART_MASK_COMPUTATION(huart);
 8006662:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8006666:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 800666a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 800666e:	6645      	str	r5, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8006670:	d02f      	beq.n	80066d2 <HAL_UART_Receive_IT+0xbe>
 8006672:	2c00      	cmp	r4, #0
 8006674:	d13c      	bne.n	80066f0 <HAL_UART_Receive_IT+0xdc>
 8006676:	6902      	ldr	r2, [r0, #16]
 8006678:	2a00      	cmp	r2, #0
 800667a:	d13c      	bne.n	80066f6 <HAL_UART_Receive_IT+0xe2>
 800667c:	22ff      	movs	r2, #255	; 0xff
 800667e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006682:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006684:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006686:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800668a:	67c2      	str	r2, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	f103 0208 	add.w	r2, r3, #8
 8006690:	e852 2f00 	ldrex	r2, [r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006694:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006698:	f103 0408 	add.w	r4, r3, #8
 800669c:	e844 2100 	strex	r1, r2, [r4]
 80066a0:	2900      	cmp	r1, #0
 80066a2:	d1f3      	bne.n	800668c <HAL_UART_Receive_IT+0x78>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066a4:	6882      	ldr	r2, [r0, #8]
 80066a6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80066aa:	d01a      	beq.n	80066e2 <HAL_UART_Receive_IT+0xce>
  {
    huart->RxISR = UART_RxISR_16BIT;
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80066ac:	4a14      	ldr	r2, [pc, #80]	; (8006700 <HAL_UART_Receive_IT+0xec>)
 80066ae:	6642      	str	r2, [r0, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80066b0:	2100      	movs	r1, #0
 80066b2:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	e853 2f00 	ldrex	r2, [r3]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80066ba:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	e843 2000 	strex	r0, r2, [r3]
 80066c2:	2800      	cmp	r0, #0
 80066c4:	d1f7      	bne.n	80066b6 <HAL_UART_Receive_IT+0xa2>
}
 80066c6:	bc30      	pop	{r4, r5}
 80066c8:	4770      	bx	lr
      return HAL_ERROR;
 80066ca:	2001      	movs	r0, #1
 80066cc:	4770      	bx	lr
    return HAL_BUSY;
 80066ce:	2002      	movs	r0, #2
}
 80066d0:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80066d2:	6902      	ldr	r2, [r0, #16]
 80066d4:	2a00      	cmp	r2, #0
 80066d6:	d1d1      	bne.n	800667c <HAL_UART_Receive_IT+0x68>
 80066d8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066dc:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80066e0:	e7cf      	b.n	8006682 <HAL_UART_Receive_IT+0x6e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e2:	6904      	ldr	r4, [r0, #16]
    huart->RxISR = UART_RxISR_16BIT;
 80066e4:	4a06      	ldr	r2, [pc, #24]	; (8006700 <HAL_UART_Receive_IT+0xec>)
 80066e6:	4907      	ldr	r1, [pc, #28]	; (8006704 <HAL_UART_Receive_IT+0xf0>)
 80066e8:	2c00      	cmp	r4, #0
 80066ea:	bf08      	it	eq
 80066ec:	460a      	moveq	r2, r1
 80066ee:	e7de      	b.n	80066ae <HAL_UART_Receive_IT+0x9a>
  UART_MASK_COMPUTATION(huart);
 80066f0:	f8a0 505c 	strh.w	r5, [r0, #92]	; 0x5c
 80066f4:	e7c5      	b.n	8006682 <HAL_UART_Receive_IT+0x6e>
 80066f6:	227f      	movs	r2, #127	; 0x7f
 80066f8:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80066fc:	e7c1      	b.n	8006682 <HAL_UART_Receive_IT+0x6e>
 80066fe:	bf00      	nop
 8006700:	08006c79 	.word	0x08006c79
 8006704:	08006c39 	.word	0x08006c39

08006708 <HAL_UART_Transmit_DMA>:
{
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800670a:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800670c:	2e20      	cmp	r6, #32
 800670e:	d140      	bne.n	8006792 <HAL_UART_Transmit_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8006710:	2900      	cmp	r1, #0
 8006712:	d03c      	beq.n	800678e <HAL_UART_Transmit_DMA+0x86>
 8006714:	2a00      	cmp	r2, #0
 8006716:	d03a      	beq.n	800678e <HAL_UART_Transmit_DMA+0x86>
 8006718:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 800671a:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 800671e:	2801      	cmp	r0, #1
 8006720:	d037      	beq.n	8006792 <HAL_UART_Transmit_DMA+0x8a>
    if (huart->hdmatx != NULL)
 8006722:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8006724:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006728:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800672a:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800672c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672e:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8006732:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006734:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8006738:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800673c:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800673e:	b190      	cbz	r0, 8006766 <HAL_UART_Transmit_DMA+0x5e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006740:	f8df c064 	ldr.w	ip, [pc, #100]	; 80067a8 <HAL_UART_Transmit_DMA+0xa0>
      huart->hdmatx->XferAbortCallback = NULL;
 8006744:	6347      	str	r7, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006746:	4613      	mov	r3, r2
 8006748:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800674a:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800674e:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80067ac <HAL_UART_Transmit_DMA+0xa4>
 8006752:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006756:	f8df c058 	ldr.w	ip, [pc, #88]	; 80067b0 <HAL_UART_Transmit_DMA+0xa8>
 800675a:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800675e:	3228      	adds	r2, #40	; 0x28
 8006760:	f7fe f86c 	bl	800483c <HAL_DMA_Start_IT>
 8006764:	b9b8      	cbnz	r0, 8006796 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006766:	6822      	ldr	r2, [r4, #0]
 8006768:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 800676a:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800676c:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 800676e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	f102 0308 	add.w	r3, r2, #8
 8006776:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800677a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	f102 0008 	add.w	r0, r2, #8
 8006782:	e840 3100 	strex	r1, r3, [r0]
 8006786:	2900      	cmp	r1, #0
 8006788:	d1f3      	bne.n	8006772 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 800678a:	2000      	movs	r0, #0
}
 800678c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800678e:	2001      	movs	r0, #1
}
 8006790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8006792:	2002      	movs	r0, #2
}
 8006794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006796:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 8006798:	f884 7074 	strb.w	r7, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800679c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_ERROR;
 80067a0:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 80067a2:	67a6      	str	r6, [r4, #120]	; 0x78
}
 80067a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a6:	bf00      	nop
 80067a8:	080067b5 	.word	0x080067b5
 80067ac:	080067fd 	.word	0x080067fd
 80067b0:	0800680d 	.word	0x0800680d

080067b4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80067b4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80067b6:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d018      	beq.n	80067f0 <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 80067be:	2300      	movs	r3, #0
 80067c0:	6802      	ldr	r2, [r0, #0]
 80067c2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	f102 0308 	add.w	r3, r2, #8
 80067ca:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80067ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	f102 0008 	add.w	r0, r2, #8
 80067d6:	e840 3100 	strex	r1, r3, [r0]
 80067da:	2900      	cmp	r1, #0
 80067dc:	d1f3      	bne.n	80067c6 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067de:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	e842 3100 	strex	r1, r3, [r2]
 80067ea:	2900      	cmp	r1, #0
 80067ec:	d1f7      	bne.n	80067de <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067ee:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80067f0:	f7fa ff22 	bl	8001638 <HAL_UART_TxCpltCallback>
}
 80067f4:	bd08      	pop	{r3, pc}
 80067f6:	bf00      	nop

080067f8 <HAL_UART_TxHalfCpltCallback>:
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop

080067fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067fc:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80067fe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006800:	f7ff fffa 	bl	80067f8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006804:	bd08      	pop	{r3, pc}
 8006806:	bf00      	nop

08006808 <HAL_UART_ErrorCallback>:
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800680c:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800680e:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006810:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8006812:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006814:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	0612      	lsls	r2, r2, #24
 800681a:	d501      	bpl.n	8006820 <UART_DMAError+0x14>
 800681c:	2921      	cmp	r1, #33	; 0x21
 800681e:	d00d      	beq.n	800683c <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	0652      	lsls	r2, r2, #25
 8006824:	d501      	bpl.n	800682a <UART_DMAError+0x1e>
 8006826:	2c22      	cmp	r4, #34	; 0x22
 8006828:	d016      	beq.n	8006858 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800682a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800682e:	f043 0310 	orr.w	r3, r3, #16
 8006832:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006836:	f7ff ffe7 	bl	8006808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800683a:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800683c:	2200      	movs	r2, #0
 800683e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006842:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006846:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	e843 2100 	strex	r1, r2, [r3]
 800684e:	2900      	cmp	r1, #0
 8006850:	d1f7      	bne.n	8006842 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8006852:	2220      	movs	r2, #32
 8006854:	6782      	str	r2, [r0, #120]	; 0x78
}
 8006856:	e7e3      	b.n	8006820 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8006858:	2200      	movs	r2, #0
 800685a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006862:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	e843 2100 	strex	r1, r2, [r3]
 800686a:	2900      	cmp	r1, #0
 800686c:	d1f7      	bne.n	800685e <UART_DMAError+0x52>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	f103 0208 	add.w	r2, r3, #8
 8006872:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006876:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	f103 0408 	add.w	r4, r3, #8
 800687e:	e844 2100 	strex	r1, r2, [r4]
 8006882:	2900      	cmp	r1, #0
 8006884:	d1f3      	bne.n	800686e <UART_DMAError+0x62>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006886:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006888:	2a01      	cmp	r2, #1
 800688a:	d005      	beq.n	8006898 <UART_DMAError+0x8c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800688e:	2220      	movs	r2, #32
 8006890:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->RxISR = NULL;
 8006892:	6643      	str	r3, [r0, #100]	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006894:	6603      	str	r3, [r0, #96]	; 0x60
}
 8006896:	e7c8      	b.n	800682a <UART_DMAError+0x1e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	e843 2100 	strex	r1, r2, [r3]
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d0f1      	beq.n	800688c <UART_DMAError+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	e853 2f00 	ldrex	r2, [r3]
 80068ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	e843 2100 	strex	r1, r2, [r3]
 80068b4:	2900      	cmp	r1, #0
 80068b6:	d1ef      	bne.n	8006898 <UART_DMAError+0x8c>
 80068b8:	e7e8      	b.n	800688c <UART_DMAError+0x80>
 80068ba:	bf00      	nop

080068bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068bc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068be:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068c6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ca:	f7ff ff9d 	bl	8006808 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068ce:	bd08      	pop	{r3, pc}

080068d0 <HAL_UARTEx_RxEventCallback>:
}
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop

080068d4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068d4:	6803      	ldr	r3, [r0, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068d8:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068da:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80068de:	ea12 0f0c 	tst.w	r2, ip
{
 80068e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068e4:	689d      	ldr	r5, [r3, #8]
{
 80068e6:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80068e8:	d17c      	bne.n	80069e4 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068ea:	0696      	lsls	r6, r2, #26
 80068ec:	d502      	bpl.n	80068f4 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068ee:	068e      	lsls	r6, r1, #26
 80068f0:	f100 8110 	bmi.w	8006b14 <HAL_UART_IRQHandler+0x240>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80068f6:	2801      	cmp	r0, #1
 80068f8:	d024      	beq.n	8006944 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068fa:	02d6      	lsls	r6, r2, #11
 80068fc:	d502      	bpl.n	8006904 <HAL_UART_IRQHandler+0x30>
 80068fe:	0268      	lsls	r0, r5, #9
 8006900:	f100 810d 	bmi.w	8006b1e <HAL_UART_IRQHandler+0x24a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006904:	0616      	lsls	r6, r2, #24
 8006906:	d414      	bmi.n	8006932 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006908:	0650      	lsls	r0, r2, #25
 800690a:	d501      	bpl.n	8006910 <HAL_UART_IRQHandler+0x3c>
 800690c:	064a      	lsls	r2, r1, #25
 800690e:	d400      	bmi.n	8006912 <HAL_UART_IRQHandler+0x3e>
}
 8006910:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	e843 2100 	strex	r1, r2, [r3]
 800691e:	2900      	cmp	r1, #0
 8006920:	d1f7      	bne.n	8006912 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006922:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006924:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006926:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8006928:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800692a:	4620      	mov	r0, r4
 800692c:	f7fa fe84 	bl	8001638 <HAL_UART_TxCpltCallback>
}
 8006930:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006932:	060d      	lsls	r5, r1, #24
 8006934:	d5e8      	bpl.n	8006908 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8006936:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006938:	2b00      	cmp	r3, #0
 800693a:	d0e9      	beq.n	8006910 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 800693c:	4620      	mov	r0, r4
}
 800693e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8006942:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006944:	06d6      	lsls	r6, r2, #27
 8006946:	d5d8      	bpl.n	80068fa <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006948:	06c8      	lsls	r0, r1, #27
 800694a:	d5d6      	bpl.n	80068fa <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800694c:	2210      	movs	r2, #16
 800694e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	0652      	lsls	r2, r2, #25
 8006954:	f140 8100 	bpl.w	8006b58 <HAL_UART_IRQHandler+0x284>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006958:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800695a:	6802      	ldr	r2, [r0, #0]
 800695c:	6852      	ldr	r2, [r2, #4]
 800695e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8006960:	2a00      	cmp	r2, #0
 8006962:	d0d5      	beq.n	8006910 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006964:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8006968:	4291      	cmp	r1, r2
 800696a:	d9d1      	bls.n	8006910 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 800696c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006970:	6982      	ldr	r2, [r0, #24]
 8006972:	2a20      	cmp	r2, #32
 8006974:	d02e      	beq.n	80069d4 <HAL_UART_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800697a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	e843 2100 	strex	r1, r2, [r3]
 8006982:	2900      	cmp	r1, #0
 8006984:	d1f7      	bne.n	8006976 <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	f103 0208 	add.w	r2, r3, #8
 800698a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	f103 0508 	add.w	r5, r3, #8
 8006996:	e845 2100 	strex	r1, r2, [r5]
 800699a:	2900      	cmp	r1, #0
 800699c:	d1f3      	bne.n	8006986 <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	f103 0208 	add.w	r2, r3, #8
 80069a2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	f103 0508 	add.w	r5, r3, #8
 80069ae:	e845 2100 	strex	r1, r2, [r5]
 80069b2:	2900      	cmp	r1, #0
 80069b4:	d1f3      	bne.n	800699e <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 80069b6:	2220      	movs	r2, #32
 80069b8:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ba:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	e843 2100 	strex	r1, r2, [r3]
 80069c8:	2900      	cmp	r1, #0
 80069ca:	d1f7      	bne.n	80069bc <HAL_UART_IRQHandler+0xe8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069cc:	f7fd ff78 	bl	80048c0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069d0:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80069d4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80069d8:	1ac9      	subs	r1, r1, r3
 80069da:	4620      	mov	r0, r4
 80069dc:	b289      	uxth	r1, r1
 80069de:	f7ff ff77 	bl	80068d0 <HAL_UARTEx_RxEventCallback>
}
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069e4:	4879      	ldr	r0, [pc, #484]	; (8006bcc <HAL_UART_IRQHandler+0x2f8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80069e6:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80069ea:	4008      	ands	r0, r1
 80069ec:	4330      	orrs	r0, r6
 80069ee:	d081      	beq.n	80068f4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069f0:	07d5      	lsls	r5, r2, #31
 80069f2:	d509      	bpl.n	8006a08 <HAL_UART_IRQHandler+0x134>
 80069f4:	05c8      	lsls	r0, r1, #23
 80069f6:	d507      	bpl.n	8006a08 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069f8:	2001      	movs	r0, #1
 80069fa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069fc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006a00:	f040 0001 	orr.w	r0, r0, #1
 8006a04:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a08:	0795      	lsls	r5, r2, #30
 8006a0a:	d57e      	bpl.n	8006b0a <HAL_UART_IRQHandler+0x236>
 8006a0c:	b18e      	cbz	r6, 8006a32 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a0e:	2002      	movs	r0, #2
 8006a10:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a12:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006a16:	f040 0004 	orr.w	r0, r0, #4
 8006a1a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a1e:	0750      	lsls	r0, r2, #29
 8006a20:	d507      	bpl.n	8006a32 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a22:	2004      	movs	r0, #4
 8006a24:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a26:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006a2a:	f040 0002 	orr.w	r0, r0, #2
 8006a2e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a32:	0710      	lsls	r0, r2, #28
 8006a34:	d50b      	bpl.n	8006a4e <HAL_UART_IRQHandler+0x17a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a36:	f001 0020 	and.w	r0, r1, #32
 8006a3a:	4330      	orrs	r0, r6
 8006a3c:	d007      	beq.n	8006a4e <HAL_UART_IRQHandler+0x17a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a3e:	2008      	movs	r0, #8
 8006a40:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a42:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006a46:	f040 0008 	orr.w	r0, r0, #8
 8006a4a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a4e:	0516      	lsls	r6, r2, #20
 8006a50:	d50a      	bpl.n	8006a68 <HAL_UART_IRQHandler+0x194>
 8006a52:	014d      	lsls	r5, r1, #5
 8006a54:	d508      	bpl.n	8006a68 <HAL_UART_IRQHandler+0x194>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a56:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006a5a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a5c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006a60:	f040 0020 	orr.w	r0, r0, #32
 8006a64:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a68:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f43f af4f 	beq.w	8006910 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a72:	0690      	lsls	r0, r2, #26
 8006a74:	d506      	bpl.n	8006a84 <HAL_UART_IRQHandler+0x1b0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a76:	0689      	lsls	r1, r1, #26
 8006a78:	d504      	bpl.n	8006a84 <HAL_UART_IRQHandler+0x1b0>
        if (huart->RxISR != NULL)
 8006a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a7c:	b112      	cbz	r2, 8006a84 <HAL_UART_IRQHandler+0x1b0>
          huart->RxISR(huart);
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a82:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8006a84:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a88:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a8a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a8e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006a92:	4315      	orrs	r5, r2
 8006a94:	f000 8094 	beq.w	8006bc0 <HAL_UART_IRQHandler+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	e843 2100 	strex	r1, r2, [r3]
 8006aa4:	2900      	cmp	r1, #0
 8006aa6:	d1f7      	bne.n	8006a98 <HAL_UART_IRQHandler+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	f103 0208 	add.w	r2, r3, #8
 8006aac:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	f103 0008 	add.w	r0, r3, #8
 8006ab8:	e840 2100 	strex	r1, r2, [r0]
 8006abc:	2900      	cmp	r1, #0
 8006abe:	d1f3      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ac0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006ac2:	2a01      	cmp	r2, #1
 8006ac4:	d033      	beq.n	8006b2e <HAL_UART_IRQHandler+0x25a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	2120      	movs	r1, #32
 8006aca:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006acc:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ace:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8006ad0:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad2:	064a      	lsls	r2, r1, #25
 8006ad4:	d53c      	bpl.n	8006b50 <HAL_UART_IRQHandler+0x27c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	f103 0208 	add.w	r2, r3, #8
 8006ada:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	f103 0008 	add.w	r0, r3, #8
 8006ae6:	e840 2100 	strex	r1, r2, [r0]
 8006aea:	2900      	cmp	r1, #0
 8006aec:	d1f3      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x202>
          if (huart->hdmarx != NULL)
 8006aee:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006af0:	b370      	cbz	r0, 8006b50 <HAL_UART_IRQHandler+0x27c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006af2:	4b37      	ldr	r3, [pc, #220]	; (8006bd0 <HAL_UART_IRQHandler+0x2fc>)
 8006af4:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006af6:	f7fd ff05 	bl	8004904 <HAL_DMA_Abort_IT>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f43f af08 	beq.w	8006910 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b00:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8006b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006b08:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b0a:	0755      	lsls	r5, r2, #29
 8006b0c:	d591      	bpl.n	8006a32 <HAL_UART_IRQHandler+0x15e>
 8006b0e:	2e00      	cmp	r6, #0
 8006b10:	d187      	bne.n	8006a22 <HAL_UART_IRQHandler+0x14e>
 8006b12:	e78e      	b.n	8006a32 <HAL_UART_IRQHandler+0x15e>
      if (huart->RxISR != NULL)
 8006b14:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f47f af11 	bne.w	800693e <HAL_UART_IRQHandler+0x6a>
 8006b1c:	e6f8      	b.n	8006910 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8006b22:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b24:	621a      	str	r2, [r3, #32]
}
 8006b26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8006b2a:	f000 bb25 	b.w	8007178 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b32:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	e843 2100 	strex	r1, r2, [r3]
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	d0c3      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	e853 2f00 	ldrex	r2, [r3]
 8006b42:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	e843 2100 	strex	r1, r2, [r3]
 8006b4a:	2900      	cmp	r1, #0
 8006b4c:	d1ef      	bne.n	8006b2e <HAL_UART_IRQHandler+0x25a>
 8006b4e:	e7ba      	b.n	8006ac6 <HAL_UART_IRQHandler+0x1f2>
            HAL_UART_ErrorCallback(huart);
 8006b50:	4620      	mov	r0, r4
 8006b52:	f7ff fe59 	bl	8006808 <HAL_UART_ErrorCallback>
}
 8006b56:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b58:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8006b5c:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8006b60:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b62:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	f43f aed3 	beq.w	8006910 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b6a:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8006b6e:	1a51      	subs	r1, r2, r1
 8006b70:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006b72:	2900      	cmp	r1, #0
 8006b74:	f43f aecc 	beq.w	8006910 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b7c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	e843 2000 	strex	r0, r2, [r3]
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d1f7      	bne.n	8006b78 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	f103 0208 	add.w	r2, r3, #8
 8006b8c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b90:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	f103 0508 	add.w	r5, r3, #8
 8006b98:	e845 2000 	strex	r0, r2, [r5]
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d1f3      	bne.n	8006b88 <HAL_UART_IRQHandler+0x2b4>
        huart->RxState = HAL_UART_STATE_READY;
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8006ba4:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba6:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	e843 2000 	strex	r0, r2, [r3]
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d1f7      	bne.n	8006ba8 <HAL_UART_IRQHandler+0x2d4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f7ff fe89 	bl	80068d0 <HAL_UARTEx_RxEventCallback>
}
 8006bbe:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f7ff fe21 	bl	8006808 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8006bca:	bd70      	pop	{r4, r5, r6, pc}
 8006bcc:	04000120 	.word	0x04000120
 8006bd0:	080068bd 	.word	0x080068bd

08006bd4 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8006bd4:	b508      	push	{r3, lr}
 8006bd6:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	e843 2100 	strex	r1, r2, [r3]
 8006be4:	2900      	cmp	r1, #0
 8006be6:	d1f7      	bne.n	8006bd8 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	f103 0208 	add.w	r2, r3, #8
 8006bec:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	f103 0c08 	add.w	ip, r3, #8
 8006bf8:	e84c 2100 	strex	r1, r2, [ip]
 8006bfc:	2900      	cmp	r1, #0
 8006bfe:	d1f3      	bne.n	8006be8 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c00:	2220      	movs	r2, #32
 8006c02:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c04:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8006c06:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c08:	2a01      	cmp	r2, #1
 8006c0a:	d112      	bne.n	8006c32 <UART_RxISR_16BIT.part.0+0x5e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0c:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c12:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	e843 2100 	strex	r1, r2, [r3]
 8006c1a:	2900      	cmp	r1, #0
 8006c1c:	d1f7      	bne.n	8006c0e <UART_RxISR_16BIT.part.0+0x3a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c1e:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c20:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c24:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c26:	bf44      	itt	mi
 8006c28:	2210      	movmi	r2, #16
 8006c2a:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c2c:	f7ff fe50 	bl	80068d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c30:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8006c32:	f7fa fd15 	bl	8001660 <HAL_UART_RxCpltCallback>
}
 8006c36:	bd08      	pop	{r3, pc}

08006c38 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c38:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006c3a:	2a22      	cmp	r2, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c3c:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c3e:	d004      	beq.n	8006c4a <UART_RxISR_16BIT+0x12>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c40:	6993      	ldr	r3, [r2, #24]
 8006c42:	f043 0308 	orr.w	r3, r3, #8
 8006c46:	6193      	str	r3, [r2, #24]
  }
}
 8006c48:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c4a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8006c4c:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 8006c50:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8006c52:	ea02 020c 	and.w	r2, r2, ip
 8006c56:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8006c5a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8006c5e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006c60:	3a01      	subs	r2, #1
 8006c62:	b292      	uxth	r2, r2
 8006c64:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8006c68:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1ea      	bne.n	8006c48 <UART_RxISR_16BIT+0x10>
 8006c72:	f7ff bfaf 	b.w	8006bd4 <UART_RxISR_16BIT.part.0>
 8006c76:	bf00      	nop

08006c78 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c78:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006c7a:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c7c:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c7e:	d004      	beq.n	8006c8a <UART_RxISR_8BIT+0x12>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c80:	6993      	ldr	r3, [r2, #24]
 8006c82:	f043 0308 	orr.w	r3, r3, #8
 8006c86:	6193      	str	r3, [r2, #24]
}
 8006c88:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c8a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c8c:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 8006c90:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8006c92:	ea02 020c 	and.w	r2, r2, ip
 8006c96:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8006c98:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8006c9c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8006c9e:	3a01      	subs	r2, #1
 8006ca0:	b292      	uxth	r2, r2
 8006ca2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8006ca6:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8006caa:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8006cac:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8006cae:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8006cb0:	2a00      	cmp	r2, #0
 8006cb2:	d1e9      	bne.n	8006c88 <UART_RxISR_8BIT+0x10>
 8006cb4:	f7ff bf8e 	b.w	8006bd4 <UART_RxISR_16BIT.part.0>

08006cb8 <UART_SetConfig>:
{
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cbc:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cbe:	6883      	ldr	r3, [r0, #8]
 8006cc0:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cc2:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cc4:	69e1      	ldr	r1, [r4, #28]
 8006cc6:	432b      	orrs	r3, r5
 8006cc8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cca:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cce:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cd0:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cd4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cd6:	4303      	orrs	r3, r0
 8006cd8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cda:	6853      	ldr	r3, [r2, #4]
 8006cdc:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8006cde:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ce0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ce4:	4303      	orrs	r3, r0
 8006ce6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ce8:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cea:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cec:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8006cf0:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cf2:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cf4:	487d      	ldr	r0, [pc, #500]	; (8006eec <UART_SetConfig+0x234>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cf6:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cf8:	4282      	cmp	r2, r0
 8006cfa:	d046      	beq.n	8006d8a <UART_SetConfig+0xd2>
 8006cfc:	4b7c      	ldr	r3, [pc, #496]	; (8006ef0 <UART_SetConfig+0x238>)
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d00f      	beq.n	8006d22 <UART_SetConfig+0x6a>
 8006d02:	4b7c      	ldr	r3, [pc, #496]	; (8006ef4 <UART_SetConfig+0x23c>)
 8006d04:	429a      	cmp	r2, r3
 8006d06:	f000 80a3 	beq.w	8006e50 <UART_SetConfig+0x198>
 8006d0a:	4b7b      	ldr	r3, [pc, #492]	; (8006ef8 <UART_SetConfig+0x240>)
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	f000 80b4 	beq.w	8006e7a <UART_SetConfig+0x1c2>
 8006d12:	4b7a      	ldr	r3, [pc, #488]	; (8006efc <UART_SetConfig+0x244>)
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d063      	beq.n	8006de0 <UART_SetConfig+0x128>
  huart->RxISR = NULL;
 8006d18:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006d1a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    switch (clocksource)
 8006d1e:	2001      	movs	r0, #1
}
 8006d20:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d22:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d30:	d069      	beq.n	8006e06 <UART_SetConfig+0x14e>
 8006d32:	d80f      	bhi.n	8006d54 <UART_SetConfig+0x9c>
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d05c      	beq.n	8006df2 <UART_SetConfig+0x13a>
 8006d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3c:	d1ec      	bne.n	8006d18 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006d42:	d066      	beq.n	8006e12 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006d44:	f7fe fcac 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006d48:	b960      	cbnz	r0, 8006d64 <UART_SetConfig+0xac>
  huart->RxISR = NULL;
 8006d4a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006d4c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8006d50:	2000      	movs	r0, #0
}
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d58:	d1de      	bne.n	8006d18 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d5a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006d5e:	f000 80c2 	beq.w	8006ee6 <UART_SetConfig+0x22e>
    switch (clocksource)
 8006d62:	4867      	ldr	r0, [pc, #412]	; (8006f00 <UART_SetConfig+0x248>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d64:	6863      	ldr	r3, [r4, #4]
 8006d66:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d6e:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d70:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006d74:	f1a3 0110 	sub.w	r1, r3, #16
 8006d78:	4291      	cmp	r1, r2
 8006d7a:	d8cd      	bhi.n	8006d18 <UART_SetConfig+0x60>
        huart->Instance->BRR = usartdiv;
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8006d80:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006d82:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8006d86:	2000      	movs	r0, #0
}
 8006d88:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d8a:	4b5e      	ldr	r3, [pc, #376]	; (8006f04 <UART_SetConfig+0x24c>)
 8006d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d906      	bls.n	8006da6 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d98:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006d9c:	f000 8082 	beq.w	8006ea4 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da0:	f7fe fccc 	bl	800573c <HAL_RCC_GetPCLK2Freq>
        break;
 8006da4:	e7d0      	b.n	8006d48 <UART_SetConfig+0x90>
 8006da6:	4a58      	ldr	r2, [pc, #352]	; (8006f08 <UART_SetConfig+0x250>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006dac:	5cd3      	ldrb	r3, [r2, r3]
 8006dae:	d07f      	beq.n	8006eb0 <UART_SetConfig+0x1f8>
    switch (clocksource)
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d8b1      	bhi.n	8006d18 <UART_SetConfig+0x60>
 8006db4:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <UART_SetConfig+0x104>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006df9 	.word	0x08006df9
 8006dc0:	08006da1 	.word	0x08006da1
 8006dc4:	08006d63 	.word	0x08006d63
 8006dc8:	08006d19 	.word	0x08006d19
 8006dcc:	08006d45 	.word	0x08006d45
 8006dd0:	08006d19 	.word	0x08006d19
 8006dd4:	08006d19 	.word	0x08006d19
 8006dd8:	08006d19 	.word	0x08006d19
 8006ddc:	08006e0d 	.word	0x08006e0d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006de0:	4b48      	ldr	r3, [pc, #288]	; (8006f04 <UART_SetConfig+0x24c>)
 8006de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006de8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dec:	d00b      	beq.n	8006e06 <UART_SetConfig+0x14e>
 8006dee:	d82b      	bhi.n	8006e48 <UART_SetConfig+0x190>
 8006df0:	b92b      	cbnz	r3, 8006dfe <UART_SetConfig+0x146>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006df2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006df6:	d058      	beq.n	8006eaa <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006df8:	f7fe fc88 	bl	800570c <HAL_RCC_GetPCLK1Freq>
        break;
 8006dfc:	e7a4      	b.n	8006d48 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e02:	d09c      	beq.n	8006d3e <UART_SetConfig+0x86>
 8006e04:	e788      	b.n	8006d18 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e06:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006e0a:	d069      	beq.n	8006ee0 <UART_SetConfig+0x228>
        pclk = (uint32_t) LSE_VALUE;
 8006e0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006e10:	e7a8      	b.n	8006d64 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 8006e12:	f7fe fc45 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d097      	beq.n	8006d4a <UART_SetConfig+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e1a:	0043      	lsls	r3, r0, #1
 8006e1c:	6862      	ldr	r2, [r4, #4]
 8006e1e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8006e22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e26:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e28:	f1a2 0010 	sub.w	r0, r2, #16
 8006e2c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8006e30:	4288      	cmp	r0, r1
 8006e32:	f63f af71 	bhi.w	8006d18 <UART_SetConfig+0x60>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e36:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 8006e3a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e3c:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e3e:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60cb      	str	r3, [r1, #12]
 8006e46:	e780      	b.n	8006d4a <UART_SetConfig+0x92>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006e4c:	d085      	beq.n	8006d5a <UART_SetConfig+0xa2>
 8006e4e:	e763      	b.n	8006d18 <UART_SetConfig+0x60>
 8006e50:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006e5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e5e:	d0d2      	beq.n	8006e06 <UART_SetConfig+0x14e>
 8006e60:	d806      	bhi.n	8006e70 <UART_SetConfig+0x1b8>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0c5      	beq.n	8006df2 <UART_SetConfig+0x13a>
 8006e66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e6a:	f43f af68 	beq.w	8006d3e <UART_SetConfig+0x86>
 8006e6e:	e753      	b.n	8006d18 <UART_SetConfig+0x60>
 8006e70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e74:	f43f af71 	beq.w	8006d5a <UART_SetConfig+0xa2>
 8006e78:	e74e      	b.n	8006d18 <UART_SetConfig+0x60>
 8006e7a:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e88:	d0bd      	beq.n	8006e06 <UART_SetConfig+0x14e>
 8006e8a:	d806      	bhi.n	8006e9a <UART_SetConfig+0x1e2>
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0b0      	beq.n	8006df2 <UART_SetConfig+0x13a>
 8006e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e94:	f43f af53 	beq.w	8006d3e <UART_SetConfig+0x86>
 8006e98:	e73e      	b.n	8006d18 <UART_SetConfig+0x60>
 8006e9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e9e:	f43f af5c 	beq.w	8006d5a <UART_SetConfig+0xa2>
 8006ea2:	e739      	b.n	8006d18 <UART_SetConfig+0x60>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea4:	f7fe fc4a 	bl	800573c <HAL_RCC_GetPCLK2Freq>
        break;
 8006ea8:	e7b5      	b.n	8006e16 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eaa:	f7fe fc2f 	bl	800570c <HAL_RCC_GetPCLK1Freq>
        break;
 8006eae:	e7b2      	b.n	8006e16 <UART_SetConfig+0x15e>
    switch (clocksource)
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	f63f af31 	bhi.w	8006d18 <UART_SetConfig+0x60>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0x204>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006eab 	.word	0x08006eab
 8006ec0:	08006ea5 	.word	0x08006ea5
 8006ec4:	08006ee7 	.word	0x08006ee7
 8006ec8:	08006d19 	.word	0x08006d19
 8006ecc:	08006e13 	.word	0x08006e13
 8006ed0:	08006d19 	.word	0x08006d19
 8006ed4:	08006d19 	.word	0x08006d19
 8006ed8:	08006d19 	.word	0x08006d19
 8006edc:	08006ee1 	.word	0x08006ee1
 8006ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006ee4:	e79a      	b.n	8006e1c <UART_SetConfig+0x164>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ee6:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <UART_SetConfig+0x254>)
 8006ee8:	e798      	b.n	8006e1c <UART_SetConfig+0x164>
 8006eea:	bf00      	nop
 8006eec:	40013800 	.word	0x40013800
 8006ef0:	40004400 	.word	0x40004400
 8006ef4:	40004800 	.word	0x40004800
 8006ef8:	40004c00 	.word	0x40004c00
 8006efc:	40005000 	.word	0x40005000
 8006f00:	007a1200 	.word	0x007a1200
 8006f04:	40021000 	.word	0x40021000
 8006f08:	0800b088 	.word	0x0800b088
 8006f0c:	00f42400 	.word	0x00f42400

08006f10 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f12:	07da      	lsls	r2, r3, #31
{
 8006f14:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f16:	d506      	bpl.n	8006f26 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f18:	6801      	ldr	r1, [r0, #0]
 8006f1a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006f1c:	684a      	ldr	r2, [r1, #4]
 8006f1e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006f22:	4322      	orrs	r2, r4
 8006f24:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f26:	079c      	lsls	r4, r3, #30
 8006f28:	d506      	bpl.n	8006f38 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f2a:	6801      	ldr	r1, [r0, #0]
 8006f2c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006f2e:	684a      	ldr	r2, [r1, #4]
 8006f30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f34:	4322      	orrs	r2, r4
 8006f36:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f38:	0759      	lsls	r1, r3, #29
 8006f3a:	d506      	bpl.n	8006f4a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f3c:	6801      	ldr	r1, [r0, #0]
 8006f3e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006f40:	684a      	ldr	r2, [r1, #4]
 8006f42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f46:	4322      	orrs	r2, r4
 8006f48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f4a:	071a      	lsls	r2, r3, #28
 8006f4c:	d506      	bpl.n	8006f5c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f4e:	6801      	ldr	r1, [r0, #0]
 8006f50:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006f52:	684a      	ldr	r2, [r1, #4]
 8006f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f58:	4322      	orrs	r2, r4
 8006f5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f5c:	06dc      	lsls	r4, r3, #27
 8006f5e:	d506      	bpl.n	8006f6e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f60:	6801      	ldr	r1, [r0, #0]
 8006f62:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006f64:	688a      	ldr	r2, [r1, #8]
 8006f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f6a:	4322      	orrs	r2, r4
 8006f6c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f6e:	0699      	lsls	r1, r3, #26
 8006f70:	d506      	bpl.n	8006f80 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f72:	6801      	ldr	r1, [r0, #0]
 8006f74:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006f76:	688a      	ldr	r2, [r1, #8]
 8006f78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f7c:	4322      	orrs	r2, r4
 8006f7e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f80:	065a      	lsls	r2, r3, #25
 8006f82:	d509      	bpl.n	8006f98 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f84:	6801      	ldr	r1, [r0, #0]
 8006f86:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006f88:	684a      	ldr	r2, [r1, #4]
 8006f8a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006f8e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f90:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f94:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f96:	d00b      	beq.n	8006fb0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f98:	061b      	lsls	r3, r3, #24
 8006f9a:	d506      	bpl.n	8006faa <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f9c:	6802      	ldr	r2, [r0, #0]
 8006f9e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006fa0:	6853      	ldr	r3, [r2, #4]
 8006fa2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	6053      	str	r3, [r2, #4]
}
 8006faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fae:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fb0:	684a      	ldr	r2, [r1, #4]
 8006fb2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006fb4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006fb8:	4322      	orrs	r2, r4
 8006fba:	604a      	str	r2, [r1, #4]
 8006fbc:	e7ec      	b.n	8006f98 <UART_AdvFeatureConfig+0x88>
 8006fbe:	bf00      	nop

08006fc0 <UART_WaitOnFlagUntilTimeout>:
{
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fc8:	6804      	ldr	r4, [r0, #0]
{
 8006fca:	4607      	mov	r7, r0
 8006fcc:	460e      	mov	r6, r1
 8006fce:	4615      	mov	r5, r2
 8006fd0:	4699      	mov	r9, r3
 8006fd2:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006fd6:	d10a      	bne.n	8006fee <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd8:	69e3      	ldr	r3, [r4, #28]
 8006fda:	ea36 0303 	bics.w	r3, r6, r3
 8006fde:	bf0c      	ite	eq
 8006fe0:	2301      	moveq	r3, #1
 8006fe2:	2300      	movne	r3, #0
 8006fe4:	429d      	cmp	r5, r3
 8006fe6:	d0f7      	beq.n	8006fd8 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8006fe8:	2000      	movs	r0, #0
}
 8006fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fee:	69e3      	ldr	r3, [r4, #28]
 8006ff0:	ea36 0303 	bics.w	r3, r6, r3
 8006ff4:	bf0c      	ite	eq
 8006ff6:	2301      	moveq	r3, #1
 8006ff8:	2300      	movne	r3, #0
 8006ffa:	42ab      	cmp	r3, r5
 8006ffc:	d1f4      	bne.n	8006fe8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ffe:	f7fc f85d 	bl	80030bc <HAL_GetTick>
 8007002:	eba0 0009 	sub.w	r0, r0, r9
 8007006:	4540      	cmp	r0, r8
 8007008:	d831      	bhi.n	800706e <UART_WaitOnFlagUntilTimeout+0xae>
 800700a:	f1b8 0f00 	cmp.w	r8, #0
 800700e:	d02e      	beq.n	800706e <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007010:	683c      	ldr	r4, [r7, #0]
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	0759      	lsls	r1, r3, #29
 8007016:	4622      	mov	r2, r4
 8007018:	d5db      	bpl.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800701a:	69e3      	ldr	r3, [r4, #28]
 800701c:	051b      	lsls	r3, r3, #20
 800701e:	d5d8      	bpl.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007024:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800702a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	e844 3100 	strex	r1, r3, [r4]
 8007032:	b139      	cbz	r1, 8007044 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	e852 3f00 	ldrex	r3, [r2]
 8007038:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	e842 3100 	strex	r1, r3, [r2]
 8007040:	2900      	cmp	r1, #0
 8007042:	d1f7      	bne.n	8007034 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007044:	f102 0308 	add.w	r3, r2, #8
 8007048:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	f102 0008 	add.w	r0, r2, #8
 8007054:	e840 3100 	strex	r1, r3, [r0]
 8007058:	2900      	cmp	r1, #0
 800705a:	d1f3      	bne.n	8007044 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800705c:	2320      	movs	r3, #32
 800705e:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8007060:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007064:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 8007066:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007068:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 800706c:	e7bd      	b.n	8006fea <UART_WaitOnFlagUntilTimeout+0x2a>
 800706e:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007074:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	e842 3100 	strex	r1, r3, [r2]
 800707c:	2900      	cmp	r1, #0
 800707e:	d1f7      	bne.n	8007070 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	f102 0308 	add.w	r3, r2, #8
 8007084:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007088:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	f102 0008 	add.w	r0, r2, #8
 8007090:	e840 3100 	strex	r1, r3, [r0]
 8007094:	2900      	cmp	r1, #0
 8007096:	d1f3      	bne.n	8007080 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 8007098:	2320      	movs	r3, #32
 800709a:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800709c:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80070a0:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 80070a2:	2003      	movs	r0, #3
 80070a4:	e7a1      	b.n	8006fea <UART_WaitOnFlagUntilTimeout+0x2a>
 80070a6:	bf00      	nop

080070a8 <HAL_UART_Init>:
  if (huart == NULL)
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d062      	beq.n	8007172 <HAL_UART_Init+0xca>
{
 80070ac:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80070ae:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80070b0:	b082      	sub	sp, #8
 80070b2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d049      	beq.n	800714c <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 80070b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80070ba:	2324      	movs	r3, #36	; 0x24
 80070bc:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80070be:	6813      	ldr	r3, [r2, #0]
 80070c0:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070c4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80070c6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070c8:	f7ff fdf6 	bl	8006cb8 <UART_SetConfig>
 80070cc:	2801      	cmp	r0, #1
 80070ce:	d03a      	beq.n	8007146 <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d133      	bne.n	800713e <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
 80070da:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80070de:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e0:	6899      	ldr	r1, [r3, #8]
 80070e2:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80070e6:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80070e8:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ea:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80070ec:	f041 0101 	orr.w	r1, r1, #1
 80070f0:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 80070f6:	f7fb ffe1 	bl	80030bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8007100:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007102:	d40c      	bmi.n	800711e <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	075b      	lsls	r3, r3, #29
 8007108:	d425      	bmi.n	8007156 <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800710c:	2220      	movs	r2, #32
 800710e:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8007110:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007114:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8007116:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007118:	6623      	str	r3, [r4, #96]	; 0x60
}
 800711a:	b002      	add	sp, #8
 800711c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800711e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	462a      	mov	r2, r5
 8007126:	4603      	mov	r3, r0
 8007128:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800712c:	4620      	mov	r0, r4
 800712e:	f7ff ff47 	bl	8006fc0 <UART_WaitOnFlagUntilTimeout>
 8007132:	b9e0      	cbnz	r0, 800716e <HAL_UART_Init+0xc6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	075b      	lsls	r3, r3, #29
 800713a:	d40c      	bmi.n	8007156 <HAL_UART_Init+0xae>
 800713c:	e7e5      	b.n	800710a <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 800713e:	4620      	mov	r0, r4
 8007140:	f7ff fee6 	bl	8006f10 <UART_AdvFeatureConfig>
 8007144:	e7c7      	b.n	80070d6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8007146:	2001      	movs	r0, #1
}
 8007148:	b002      	add	sp, #8
 800714a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800714c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8007150:	f7fb fee4 	bl	8002f1c <HAL_UART_MspInit>
 8007154:	e7b0      	b.n	80070b8 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007156:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	2200      	movs	r2, #0
 800715e:	4633      	mov	r3, r6
 8007160:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007164:	4620      	mov	r0, r4
 8007166:	f7ff ff2b 	bl	8006fc0 <UART_WaitOnFlagUntilTimeout>
 800716a:	2800      	cmp	r0, #0
 800716c:	d0cd      	beq.n	800710a <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 800716e:	2003      	movs	r0, #3
 8007170:	e7d3      	b.n	800711a <HAL_UART_Init+0x72>
    return HAL_ERROR;
 8007172:	2001      	movs	r0, #1
}
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop

08007178 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	0000      	movs	r0, r0
	...

08007180 <sin>:
 8007180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007182:	ec53 2b10 	vmov	r2, r3, d0
 8007186:	4828      	ldr	r0, [pc, #160]	; (8007228 <sin+0xa8>)
 8007188:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800718c:	4281      	cmp	r1, r0
 800718e:	dc07      	bgt.n	80071a0 <sin+0x20>
 8007190:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007220 <sin+0xa0>
 8007194:	2000      	movs	r0, #0
 8007196:	b005      	add	sp, #20
 8007198:	f85d eb04 	ldr.w	lr, [sp], #4
 800719c:	f000 be6c 	b.w	8007e78 <__kernel_sin>
 80071a0:	4822      	ldr	r0, [pc, #136]	; (800722c <sin+0xac>)
 80071a2:	4281      	cmp	r1, r0
 80071a4:	dd09      	ble.n	80071ba <sin+0x3a>
 80071a6:	ee10 0a10 	vmov	r0, s0
 80071aa:	4619      	mov	r1, r3
 80071ac:	f7f9 f86c 	bl	8000288 <__aeabi_dsub>
 80071b0:	ec41 0b10 	vmov	d0, r0, r1
 80071b4:	b005      	add	sp, #20
 80071b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80071ba:	4668      	mov	r0, sp
 80071bc:	f000 f838 	bl	8007230 <__ieee754_rem_pio2>
 80071c0:	f000 0003 	and.w	r0, r0, #3
 80071c4:	2801      	cmp	r0, #1
 80071c6:	d00c      	beq.n	80071e2 <sin+0x62>
 80071c8:	2802      	cmp	r0, #2
 80071ca:	d011      	beq.n	80071f0 <sin+0x70>
 80071cc:	b9f0      	cbnz	r0, 800720c <sin+0x8c>
 80071ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071d2:	ed9d 0b00 	vldr	d0, [sp]
 80071d6:	2001      	movs	r0, #1
 80071d8:	f000 fe4e 	bl	8007e78 <__kernel_sin>
 80071dc:	ec51 0b10 	vmov	r0, r1, d0
 80071e0:	e7e6      	b.n	80071b0 <sin+0x30>
 80071e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071e6:	ed9d 0b00 	vldr	d0, [sp]
 80071ea:	f000 fa2d 	bl	8007648 <__kernel_cos>
 80071ee:	e7f5      	b.n	80071dc <sin+0x5c>
 80071f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80071f4:	ed9d 0b00 	vldr	d0, [sp]
 80071f8:	2001      	movs	r0, #1
 80071fa:	f000 fe3d 	bl	8007e78 <__kernel_sin>
 80071fe:	ec53 2b10 	vmov	r2, r3, d0
 8007202:	ee10 0a10 	vmov	r0, s0
 8007206:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800720a:	e7d1      	b.n	80071b0 <sin+0x30>
 800720c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007210:	ed9d 0b00 	vldr	d0, [sp]
 8007214:	f000 fa18 	bl	8007648 <__kernel_cos>
 8007218:	e7f1      	b.n	80071fe <sin+0x7e>
 800721a:	bf00      	nop
 800721c:	f3af 8000 	nop.w
	...
 8007228:	3fe921fb 	.word	0x3fe921fb
 800722c:	7fefffff 	.word	0x7fefffff

08007230 <__ieee754_rem_pio2>:
 8007230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007234:	ed2d 8b02 	vpush	{d8}
 8007238:	ec55 4b10 	vmov	r4, r5, d0
 800723c:	4bca      	ldr	r3, [pc, #808]	; (8007568 <__ieee754_rem_pio2+0x338>)
 800723e:	b08b      	sub	sp, #44	; 0x2c
 8007240:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007244:	4598      	cmp	r8, r3
 8007246:	4682      	mov	sl, r0
 8007248:	9502      	str	r5, [sp, #8]
 800724a:	dc08      	bgt.n	800725e <__ieee754_rem_pio2+0x2e>
 800724c:	2200      	movs	r2, #0
 800724e:	2300      	movs	r3, #0
 8007250:	ed80 0b00 	vstr	d0, [r0]
 8007254:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007258:	f04f 0b00 	mov.w	fp, #0
 800725c:	e028      	b.n	80072b0 <__ieee754_rem_pio2+0x80>
 800725e:	4bc3      	ldr	r3, [pc, #780]	; (800756c <__ieee754_rem_pio2+0x33c>)
 8007260:	4598      	cmp	r8, r3
 8007262:	dc78      	bgt.n	8007356 <__ieee754_rem_pio2+0x126>
 8007264:	9b02      	ldr	r3, [sp, #8]
 8007266:	4ec2      	ldr	r6, [pc, #776]	; (8007570 <__ieee754_rem_pio2+0x340>)
 8007268:	2b00      	cmp	r3, #0
 800726a:	ee10 0a10 	vmov	r0, s0
 800726e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007530 <__ieee754_rem_pio2+0x300>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	4629      	mov	r1, r5
 8007276:	dd39      	ble.n	80072ec <__ieee754_rem_pio2+0xbc>
 8007278:	f7f9 f806 	bl	8000288 <__aeabi_dsub>
 800727c:	45b0      	cmp	r8, r6
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	d01b      	beq.n	80072bc <__ieee754_rem_pio2+0x8c>
 8007284:	a3ac      	add	r3, pc, #688	; (adr r3, 8007538 <__ieee754_rem_pio2+0x308>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f8 fffd 	bl	8000288 <__aeabi_dsub>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	e9ca 2300 	strd	r2, r3, [sl]
 8007296:	4620      	mov	r0, r4
 8007298:	4629      	mov	r1, r5
 800729a:	f7f8 fff5 	bl	8000288 <__aeabi_dsub>
 800729e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007538 <__ieee754_rem_pio2+0x308>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f7f8 fff0 	bl	8000288 <__aeabi_dsub>
 80072a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072ac:	f04f 0b01 	mov.w	fp, #1
 80072b0:	4658      	mov	r0, fp
 80072b2:	b00b      	add	sp, #44	; 0x2c
 80072b4:	ecbd 8b02 	vpop	{d8}
 80072b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072bc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007540 <__ieee754_rem_pio2+0x310>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f7f8 ffe1 	bl	8000288 <__aeabi_dsub>
 80072c6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007548 <__ieee754_rem_pio2+0x318>)
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	4604      	mov	r4, r0
 80072ce:	460d      	mov	r5, r1
 80072d0:	f7f8 ffda 	bl	8000288 <__aeabi_dsub>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	e9ca 2300 	strd	r2, r3, [sl]
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f8 ffd2 	bl	8000288 <__aeabi_dsub>
 80072e4:	a398      	add	r3, pc, #608	; (adr r3, 8007548 <__ieee754_rem_pio2+0x318>)
 80072e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ea:	e7db      	b.n	80072a4 <__ieee754_rem_pio2+0x74>
 80072ec:	f7f8 ffce 	bl	800028c <__adddf3>
 80072f0:	45b0      	cmp	r8, r6
 80072f2:	4604      	mov	r4, r0
 80072f4:	460d      	mov	r5, r1
 80072f6:	d016      	beq.n	8007326 <__ieee754_rem_pio2+0xf6>
 80072f8:	a38f      	add	r3, pc, #572	; (adr r3, 8007538 <__ieee754_rem_pio2+0x308>)
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f7f8 ffc5 	bl	800028c <__adddf3>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	e9ca 2300 	strd	r2, r3, [sl]
 800730a:	4620      	mov	r0, r4
 800730c:	4629      	mov	r1, r5
 800730e:	f7f8 ffbb 	bl	8000288 <__aeabi_dsub>
 8007312:	a389      	add	r3, pc, #548	; (adr r3, 8007538 <__ieee754_rem_pio2+0x308>)
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	f7f8 ffb8 	bl	800028c <__adddf3>
 800731c:	f04f 3bff 	mov.w	fp, #4294967295
 8007320:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007324:	e7c4      	b.n	80072b0 <__ieee754_rem_pio2+0x80>
 8007326:	a386      	add	r3, pc, #536	; (adr r3, 8007540 <__ieee754_rem_pio2+0x310>)
 8007328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732c:	f7f8 ffae 	bl	800028c <__adddf3>
 8007330:	a385      	add	r3, pc, #532	; (adr r3, 8007548 <__ieee754_rem_pio2+0x318>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	4604      	mov	r4, r0
 8007338:	460d      	mov	r5, r1
 800733a:	f7f8 ffa7 	bl	800028c <__adddf3>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	e9ca 2300 	strd	r2, r3, [sl]
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f8 ff9d 	bl	8000288 <__aeabi_dsub>
 800734e:	a37e      	add	r3, pc, #504	; (adr r3, 8007548 <__ieee754_rem_pio2+0x318>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	e7e0      	b.n	8007318 <__ieee754_rem_pio2+0xe8>
 8007356:	4b87      	ldr	r3, [pc, #540]	; (8007574 <__ieee754_rem_pio2+0x344>)
 8007358:	4598      	cmp	r8, r3
 800735a:	f300 80d9 	bgt.w	8007510 <__ieee754_rem_pio2+0x2e0>
 800735e:	f000 fe49 	bl	8007ff4 <fabs>
 8007362:	ec55 4b10 	vmov	r4, r5, d0
 8007366:	ee10 0a10 	vmov	r0, s0
 800736a:	a379      	add	r3, pc, #484	; (adr r3, 8007550 <__ieee754_rem_pio2+0x320>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	4629      	mov	r1, r5
 8007372:	f7f9 f941 	bl	80005f8 <__aeabi_dmul>
 8007376:	4b80      	ldr	r3, [pc, #512]	; (8007578 <__ieee754_rem_pio2+0x348>)
 8007378:	2200      	movs	r2, #0
 800737a:	f7f8 ff87 	bl	800028c <__adddf3>
 800737e:	f7f9 fbeb 	bl	8000b58 <__aeabi_d2iz>
 8007382:	4683      	mov	fp, r0
 8007384:	f7f9 f8ce 	bl	8000524 <__aeabi_i2d>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	ec43 2b18 	vmov	d8, r2, r3
 8007390:	a367      	add	r3, pc, #412	; (adr r3, 8007530 <__ieee754_rem_pio2+0x300>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f9 f92f 	bl	80005f8 <__aeabi_dmul>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4620      	mov	r0, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7f8 ff71 	bl	8000288 <__aeabi_dsub>
 80073a6:	a364      	add	r3, pc, #400	; (adr r3, 8007538 <__ieee754_rem_pio2+0x308>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	4606      	mov	r6, r0
 80073ae:	460f      	mov	r7, r1
 80073b0:	ec51 0b18 	vmov	r0, r1, d8
 80073b4:	f7f9 f920 	bl	80005f8 <__aeabi_dmul>
 80073b8:	f1bb 0f1f 	cmp.w	fp, #31
 80073bc:	4604      	mov	r4, r0
 80073be:	460d      	mov	r5, r1
 80073c0:	dc0d      	bgt.n	80073de <__ieee754_rem_pio2+0x1ae>
 80073c2:	4b6e      	ldr	r3, [pc, #440]	; (800757c <__ieee754_rem_pio2+0x34c>)
 80073c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80073c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073cc:	4543      	cmp	r3, r8
 80073ce:	d006      	beq.n	80073de <__ieee754_rem_pio2+0x1ae>
 80073d0:	4622      	mov	r2, r4
 80073d2:	462b      	mov	r3, r5
 80073d4:	4630      	mov	r0, r6
 80073d6:	4639      	mov	r1, r7
 80073d8:	f7f8 ff56 	bl	8000288 <__aeabi_dsub>
 80073dc:	e00f      	b.n	80073fe <__ieee754_rem_pio2+0x1ce>
 80073de:	462b      	mov	r3, r5
 80073e0:	4622      	mov	r2, r4
 80073e2:	4630      	mov	r0, r6
 80073e4:	4639      	mov	r1, r7
 80073e6:	f7f8 ff4f 	bl	8000288 <__aeabi_dsub>
 80073ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80073f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80073f8:	f1b8 0f10 	cmp.w	r8, #16
 80073fc:	dc02      	bgt.n	8007404 <__ieee754_rem_pio2+0x1d4>
 80073fe:	e9ca 0100 	strd	r0, r1, [sl]
 8007402:	e039      	b.n	8007478 <__ieee754_rem_pio2+0x248>
 8007404:	a34e      	add	r3, pc, #312	; (adr r3, 8007540 <__ieee754_rem_pio2+0x310>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	ec51 0b18 	vmov	r0, r1, d8
 800740e:	f7f9 f8f3 	bl	80005f8 <__aeabi_dmul>
 8007412:	4604      	mov	r4, r0
 8007414:	460d      	mov	r5, r1
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	4630      	mov	r0, r6
 800741c:	4639      	mov	r1, r7
 800741e:	f7f8 ff33 	bl	8000288 <__aeabi_dsub>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4680      	mov	r8, r0
 8007428:	4689      	mov	r9, r1
 800742a:	4630      	mov	r0, r6
 800742c:	4639      	mov	r1, r7
 800742e:	f7f8 ff2b 	bl	8000288 <__aeabi_dsub>
 8007432:	4622      	mov	r2, r4
 8007434:	462b      	mov	r3, r5
 8007436:	f7f8 ff27 	bl	8000288 <__aeabi_dsub>
 800743a:	a343      	add	r3, pc, #268	; (adr r3, 8007548 <__ieee754_rem_pio2+0x318>)
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	4604      	mov	r4, r0
 8007442:	460d      	mov	r5, r1
 8007444:	ec51 0b18 	vmov	r0, r1, d8
 8007448:	f7f9 f8d6 	bl	80005f8 <__aeabi_dmul>
 800744c:	4622      	mov	r2, r4
 800744e:	462b      	mov	r3, r5
 8007450:	f7f8 ff1a 	bl	8000288 <__aeabi_dsub>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4604      	mov	r4, r0
 800745a:	460d      	mov	r5, r1
 800745c:	4640      	mov	r0, r8
 800745e:	4649      	mov	r1, r9
 8007460:	f7f8 ff12 	bl	8000288 <__aeabi_dsub>
 8007464:	9a03      	ldr	r2, [sp, #12]
 8007466:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b31      	cmp	r3, #49	; 0x31
 800746e:	dc24      	bgt.n	80074ba <__ieee754_rem_pio2+0x28a>
 8007470:	e9ca 0100 	strd	r0, r1, [sl]
 8007474:	4646      	mov	r6, r8
 8007476:	464f      	mov	r7, r9
 8007478:	e9da 8900 	ldrd	r8, r9, [sl]
 800747c:	4630      	mov	r0, r6
 800747e:	4642      	mov	r2, r8
 8007480:	464b      	mov	r3, r9
 8007482:	4639      	mov	r1, r7
 8007484:	f7f8 ff00 	bl	8000288 <__aeabi_dsub>
 8007488:	462b      	mov	r3, r5
 800748a:	4622      	mov	r2, r4
 800748c:	f7f8 fefc 	bl	8000288 <__aeabi_dsub>
 8007490:	9b02      	ldr	r3, [sp, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007498:	f6bf af0a 	bge.w	80072b0 <__ieee754_rem_pio2+0x80>
 800749c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074a0:	f8ca 3004 	str.w	r3, [sl, #4]
 80074a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074a8:	f8ca 8000 	str.w	r8, [sl]
 80074ac:	f8ca 0008 	str.w	r0, [sl, #8]
 80074b0:	f8ca 300c 	str.w	r3, [sl, #12]
 80074b4:	f1cb 0b00 	rsb	fp, fp, #0
 80074b8:	e6fa      	b.n	80072b0 <__ieee754_rem_pio2+0x80>
 80074ba:	a327      	add	r3, pc, #156	; (adr r3, 8007558 <__ieee754_rem_pio2+0x328>)
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	ec51 0b18 	vmov	r0, r1, d8
 80074c4:	f7f9 f898 	bl	80005f8 <__aeabi_dmul>
 80074c8:	4604      	mov	r4, r0
 80074ca:	460d      	mov	r5, r1
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4640      	mov	r0, r8
 80074d2:	4649      	mov	r1, r9
 80074d4:	f7f8 fed8 	bl	8000288 <__aeabi_dsub>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4606      	mov	r6, r0
 80074de:	460f      	mov	r7, r1
 80074e0:	4640      	mov	r0, r8
 80074e2:	4649      	mov	r1, r9
 80074e4:	f7f8 fed0 	bl	8000288 <__aeabi_dsub>
 80074e8:	4622      	mov	r2, r4
 80074ea:	462b      	mov	r3, r5
 80074ec:	f7f8 fecc 	bl	8000288 <__aeabi_dsub>
 80074f0:	a31b      	add	r3, pc, #108	; (adr r3, 8007560 <__ieee754_rem_pio2+0x330>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	4604      	mov	r4, r0
 80074f8:	460d      	mov	r5, r1
 80074fa:	ec51 0b18 	vmov	r0, r1, d8
 80074fe:	f7f9 f87b 	bl	80005f8 <__aeabi_dmul>
 8007502:	4622      	mov	r2, r4
 8007504:	462b      	mov	r3, r5
 8007506:	f7f8 febf 	bl	8000288 <__aeabi_dsub>
 800750a:	4604      	mov	r4, r0
 800750c:	460d      	mov	r5, r1
 800750e:	e75f      	b.n	80073d0 <__ieee754_rem_pio2+0x1a0>
 8007510:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <__ieee754_rem_pio2+0x350>)
 8007512:	4598      	cmp	r8, r3
 8007514:	dd36      	ble.n	8007584 <__ieee754_rem_pio2+0x354>
 8007516:	ee10 2a10 	vmov	r2, s0
 800751a:	462b      	mov	r3, r5
 800751c:	4620      	mov	r0, r4
 800751e:	4629      	mov	r1, r5
 8007520:	f7f8 feb2 	bl	8000288 <__aeabi_dsub>
 8007524:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007528:	e9ca 0100 	strd	r0, r1, [sl]
 800752c:	e694      	b.n	8007258 <__ieee754_rem_pio2+0x28>
 800752e:	bf00      	nop
 8007530:	54400000 	.word	0x54400000
 8007534:	3ff921fb 	.word	0x3ff921fb
 8007538:	1a626331 	.word	0x1a626331
 800753c:	3dd0b461 	.word	0x3dd0b461
 8007540:	1a600000 	.word	0x1a600000
 8007544:	3dd0b461 	.word	0x3dd0b461
 8007548:	2e037073 	.word	0x2e037073
 800754c:	3ba3198a 	.word	0x3ba3198a
 8007550:	6dc9c883 	.word	0x6dc9c883
 8007554:	3fe45f30 	.word	0x3fe45f30
 8007558:	2e000000 	.word	0x2e000000
 800755c:	3ba3198a 	.word	0x3ba3198a
 8007560:	252049c1 	.word	0x252049c1
 8007564:	397b839a 	.word	0x397b839a
 8007568:	3fe921fb 	.word	0x3fe921fb
 800756c:	4002d97b 	.word	0x4002d97b
 8007570:	3ff921fb 	.word	0x3ff921fb
 8007574:	413921fb 	.word	0x413921fb
 8007578:	3fe00000 	.word	0x3fe00000
 800757c:	0800b08c 	.word	0x0800b08c
 8007580:	7fefffff 	.word	0x7fefffff
 8007584:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007588:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800758c:	ee10 0a10 	vmov	r0, s0
 8007590:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007594:	ee10 6a10 	vmov	r6, s0
 8007598:	460f      	mov	r7, r1
 800759a:	f7f9 fadd 	bl	8000b58 <__aeabi_d2iz>
 800759e:	f7f8 ffc1 	bl	8000524 <__aeabi_i2d>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4630      	mov	r0, r6
 80075a8:	4639      	mov	r1, r7
 80075aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075ae:	f7f8 fe6b 	bl	8000288 <__aeabi_dsub>
 80075b2:	4b23      	ldr	r3, [pc, #140]	; (8007640 <__ieee754_rem_pio2+0x410>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	f7f9 f81f 	bl	80005f8 <__aeabi_dmul>
 80075ba:	460f      	mov	r7, r1
 80075bc:	4606      	mov	r6, r0
 80075be:	f7f9 facb 	bl	8000b58 <__aeabi_d2iz>
 80075c2:	f7f8 ffaf 	bl	8000524 <__aeabi_i2d>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4630      	mov	r0, r6
 80075cc:	4639      	mov	r1, r7
 80075ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075d2:	f7f8 fe59 	bl	8000288 <__aeabi_dsub>
 80075d6:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <__ieee754_rem_pio2+0x410>)
 80075d8:	2200      	movs	r2, #0
 80075da:	f7f9 f80d 	bl	80005f8 <__aeabi_dmul>
 80075de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80075e2:	ad04      	add	r5, sp, #16
 80075e4:	f04f 0803 	mov.w	r8, #3
 80075e8:	46a9      	mov	r9, r5
 80075ea:	2600      	movs	r6, #0
 80075ec:	2700      	movs	r7, #0
 80075ee:	4632      	mov	r2, r6
 80075f0:	463b      	mov	r3, r7
 80075f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80075f6:	46c3      	mov	fp, r8
 80075f8:	3d08      	subs	r5, #8
 80075fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80075fe:	f7f9 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8007602:	2800      	cmp	r0, #0
 8007604:	d1f3      	bne.n	80075ee <__ieee754_rem_pio2+0x3be>
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <__ieee754_rem_pio2+0x414>)
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	2302      	movs	r3, #2
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	4622      	mov	r2, r4
 8007610:	465b      	mov	r3, fp
 8007612:	4651      	mov	r1, sl
 8007614:	4648      	mov	r0, r9
 8007616:	f000 f8df 	bl	80077d8 <__kernel_rem_pio2>
 800761a:	9b02      	ldr	r3, [sp, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	4683      	mov	fp, r0
 8007620:	f6bf ae46 	bge.w	80072b0 <__ieee754_rem_pio2+0x80>
 8007624:	e9da 2100 	ldrd	r2, r1, [sl]
 8007628:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800762c:	e9ca 2300 	strd	r2, r3, [sl]
 8007630:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007634:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007638:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800763c:	e73a      	b.n	80074b4 <__ieee754_rem_pio2+0x284>
 800763e:	bf00      	nop
 8007640:	41700000 	.word	0x41700000
 8007644:	0800b10c 	.word	0x0800b10c

08007648 <__kernel_cos>:
 8007648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	ec57 6b10 	vmov	r6, r7, d0
 8007650:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007654:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007658:	ed8d 1b00 	vstr	d1, [sp]
 800765c:	da07      	bge.n	800766e <__kernel_cos+0x26>
 800765e:	ee10 0a10 	vmov	r0, s0
 8007662:	4639      	mov	r1, r7
 8007664:	f7f9 fa78 	bl	8000b58 <__aeabi_d2iz>
 8007668:	2800      	cmp	r0, #0
 800766a:	f000 8088 	beq.w	800777e <__kernel_cos+0x136>
 800766e:	4632      	mov	r2, r6
 8007670:	463b      	mov	r3, r7
 8007672:	4630      	mov	r0, r6
 8007674:	4639      	mov	r1, r7
 8007676:	f7f8 ffbf 	bl	80005f8 <__aeabi_dmul>
 800767a:	4b51      	ldr	r3, [pc, #324]	; (80077c0 <__kernel_cos+0x178>)
 800767c:	2200      	movs	r2, #0
 800767e:	4604      	mov	r4, r0
 8007680:	460d      	mov	r5, r1
 8007682:	f7f8 ffb9 	bl	80005f8 <__aeabi_dmul>
 8007686:	a340      	add	r3, pc, #256	; (adr r3, 8007788 <__kernel_cos+0x140>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	4682      	mov	sl, r0
 800768e:	468b      	mov	fp, r1
 8007690:	4620      	mov	r0, r4
 8007692:	4629      	mov	r1, r5
 8007694:	f7f8 ffb0 	bl	80005f8 <__aeabi_dmul>
 8007698:	a33d      	add	r3, pc, #244	; (adr r3, 8007790 <__kernel_cos+0x148>)
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f7f8 fdf5 	bl	800028c <__adddf3>
 80076a2:	4622      	mov	r2, r4
 80076a4:	462b      	mov	r3, r5
 80076a6:	f7f8 ffa7 	bl	80005f8 <__aeabi_dmul>
 80076aa:	a33b      	add	r3, pc, #236	; (adr r3, 8007798 <__kernel_cos+0x150>)
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f7f8 fdea 	bl	8000288 <__aeabi_dsub>
 80076b4:	4622      	mov	r2, r4
 80076b6:	462b      	mov	r3, r5
 80076b8:	f7f8 ff9e 	bl	80005f8 <__aeabi_dmul>
 80076bc:	a338      	add	r3, pc, #224	; (adr r3, 80077a0 <__kernel_cos+0x158>)
 80076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c2:	f7f8 fde3 	bl	800028c <__adddf3>
 80076c6:	4622      	mov	r2, r4
 80076c8:	462b      	mov	r3, r5
 80076ca:	f7f8 ff95 	bl	80005f8 <__aeabi_dmul>
 80076ce:	a336      	add	r3, pc, #216	; (adr r3, 80077a8 <__kernel_cos+0x160>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	f7f8 fdd8 	bl	8000288 <__aeabi_dsub>
 80076d8:	4622      	mov	r2, r4
 80076da:	462b      	mov	r3, r5
 80076dc:	f7f8 ff8c 	bl	80005f8 <__aeabi_dmul>
 80076e0:	a333      	add	r3, pc, #204	; (adr r3, 80077b0 <__kernel_cos+0x168>)
 80076e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e6:	f7f8 fdd1 	bl	800028c <__adddf3>
 80076ea:	4622      	mov	r2, r4
 80076ec:	462b      	mov	r3, r5
 80076ee:	f7f8 ff83 	bl	80005f8 <__aeabi_dmul>
 80076f2:	4622      	mov	r2, r4
 80076f4:	462b      	mov	r3, r5
 80076f6:	f7f8 ff7f 	bl	80005f8 <__aeabi_dmul>
 80076fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076fe:	4604      	mov	r4, r0
 8007700:	460d      	mov	r5, r1
 8007702:	4630      	mov	r0, r6
 8007704:	4639      	mov	r1, r7
 8007706:	f7f8 ff77 	bl	80005f8 <__aeabi_dmul>
 800770a:	460b      	mov	r3, r1
 800770c:	4602      	mov	r2, r0
 800770e:	4629      	mov	r1, r5
 8007710:	4620      	mov	r0, r4
 8007712:	f7f8 fdb9 	bl	8000288 <__aeabi_dsub>
 8007716:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <__kernel_cos+0x17c>)
 8007718:	4598      	cmp	r8, r3
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	dc10      	bgt.n	8007742 <__kernel_cos+0xfa>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4650      	mov	r0, sl
 8007726:	4659      	mov	r1, fp
 8007728:	f7f8 fdae 	bl	8000288 <__aeabi_dsub>
 800772c:	460b      	mov	r3, r1
 800772e:	4926      	ldr	r1, [pc, #152]	; (80077c8 <__kernel_cos+0x180>)
 8007730:	4602      	mov	r2, r0
 8007732:	2000      	movs	r0, #0
 8007734:	f7f8 fda8 	bl	8000288 <__aeabi_dsub>
 8007738:	ec41 0b10 	vmov	d0, r0, r1
 800773c:	b003      	add	sp, #12
 800773e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007742:	4b22      	ldr	r3, [pc, #136]	; (80077cc <__kernel_cos+0x184>)
 8007744:	4920      	ldr	r1, [pc, #128]	; (80077c8 <__kernel_cos+0x180>)
 8007746:	4598      	cmp	r8, r3
 8007748:	bfcc      	ite	gt
 800774a:	4d21      	ldrgt	r5, [pc, #132]	; (80077d0 <__kernel_cos+0x188>)
 800774c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007750:	2400      	movs	r4, #0
 8007752:	4622      	mov	r2, r4
 8007754:	462b      	mov	r3, r5
 8007756:	2000      	movs	r0, #0
 8007758:	f7f8 fd96 	bl	8000288 <__aeabi_dsub>
 800775c:	4622      	mov	r2, r4
 800775e:	4680      	mov	r8, r0
 8007760:	4689      	mov	r9, r1
 8007762:	462b      	mov	r3, r5
 8007764:	4650      	mov	r0, sl
 8007766:	4659      	mov	r1, fp
 8007768:	f7f8 fd8e 	bl	8000288 <__aeabi_dsub>
 800776c:	4632      	mov	r2, r6
 800776e:	463b      	mov	r3, r7
 8007770:	f7f8 fd8a 	bl	8000288 <__aeabi_dsub>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	e7da      	b.n	8007734 <__kernel_cos+0xec>
 800777e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80077b8 <__kernel_cos+0x170>
 8007782:	e7db      	b.n	800773c <__kernel_cos+0xf4>
 8007784:	f3af 8000 	nop.w
 8007788:	be8838d4 	.word	0xbe8838d4
 800778c:	bda8fae9 	.word	0xbda8fae9
 8007790:	bdb4b1c4 	.word	0xbdb4b1c4
 8007794:	3e21ee9e 	.word	0x3e21ee9e
 8007798:	809c52ad 	.word	0x809c52ad
 800779c:	3e927e4f 	.word	0x3e927e4f
 80077a0:	19cb1590 	.word	0x19cb1590
 80077a4:	3efa01a0 	.word	0x3efa01a0
 80077a8:	16c15177 	.word	0x16c15177
 80077ac:	3f56c16c 	.word	0x3f56c16c
 80077b0:	5555554c 	.word	0x5555554c
 80077b4:	3fa55555 	.word	0x3fa55555
 80077b8:	00000000 	.word	0x00000000
 80077bc:	3ff00000 	.word	0x3ff00000
 80077c0:	3fe00000 	.word	0x3fe00000
 80077c4:	3fd33332 	.word	0x3fd33332
 80077c8:	3ff00000 	.word	0x3ff00000
 80077cc:	3fe90000 	.word	0x3fe90000
 80077d0:	3fd20000 	.word	0x3fd20000
 80077d4:	00000000 	.word	0x00000000

080077d8 <__kernel_rem_pio2>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	ed2d 8b02 	vpush	{d8}
 80077e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80077e4:	f112 0f14 	cmn.w	r2, #20
 80077e8:	9308      	str	r3, [sp, #32]
 80077ea:	9101      	str	r1, [sp, #4]
 80077ec:	4bc4      	ldr	r3, [pc, #784]	; (8007b00 <__kernel_rem_pio2+0x328>)
 80077ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80077f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80077f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077f6:	9302      	str	r3, [sp, #8]
 80077f8:	9b08      	ldr	r3, [sp, #32]
 80077fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80077fe:	bfa8      	it	ge
 8007800:	1ed4      	subge	r4, r2, #3
 8007802:	9306      	str	r3, [sp, #24]
 8007804:	bfb2      	itee	lt
 8007806:	2400      	movlt	r4, #0
 8007808:	2318      	movge	r3, #24
 800780a:	fb94 f4f3 	sdivge	r4, r4, r3
 800780e:	f06f 0317 	mvn.w	r3, #23
 8007812:	fb04 3303 	mla	r3, r4, r3, r3
 8007816:	eb03 0a02 	add.w	sl, r3, r2
 800781a:	9b02      	ldr	r3, [sp, #8]
 800781c:	9a06      	ldr	r2, [sp, #24]
 800781e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007af0 <__kernel_rem_pio2+0x318>
 8007822:	eb03 0802 	add.w	r8, r3, r2
 8007826:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007828:	1aa7      	subs	r7, r4, r2
 800782a:	ae22      	add	r6, sp, #136	; 0x88
 800782c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007830:	2500      	movs	r5, #0
 8007832:	4545      	cmp	r5, r8
 8007834:	dd13      	ble.n	800785e <__kernel_rem_pio2+0x86>
 8007836:	9b08      	ldr	r3, [sp, #32]
 8007838:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007af0 <__kernel_rem_pio2+0x318>
 800783c:	aa22      	add	r2, sp, #136	; 0x88
 800783e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007842:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007846:	f04f 0800 	mov.w	r8, #0
 800784a:	9b02      	ldr	r3, [sp, #8]
 800784c:	4598      	cmp	r8, r3
 800784e:	dc2f      	bgt.n	80078b0 <__kernel_rem_pio2+0xd8>
 8007850:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007854:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007858:	462f      	mov	r7, r5
 800785a:	2600      	movs	r6, #0
 800785c:	e01b      	b.n	8007896 <__kernel_rem_pio2+0xbe>
 800785e:	42ef      	cmn	r7, r5
 8007860:	d407      	bmi.n	8007872 <__kernel_rem_pio2+0x9a>
 8007862:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007866:	f7f8 fe5d 	bl	8000524 <__aeabi_i2d>
 800786a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800786e:	3501      	adds	r5, #1
 8007870:	e7df      	b.n	8007832 <__kernel_rem_pio2+0x5a>
 8007872:	ec51 0b18 	vmov	r0, r1, d8
 8007876:	e7f8      	b.n	800786a <__kernel_rem_pio2+0x92>
 8007878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800787c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007880:	f7f8 feba 	bl	80005f8 <__aeabi_dmul>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800788c:	f7f8 fcfe 	bl	800028c <__adddf3>
 8007890:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007894:	3601      	adds	r6, #1
 8007896:	9b06      	ldr	r3, [sp, #24]
 8007898:	429e      	cmp	r6, r3
 800789a:	f1a7 0708 	sub.w	r7, r7, #8
 800789e:	ddeb      	ble.n	8007878 <__kernel_rem_pio2+0xa0>
 80078a0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80078a4:	f108 0801 	add.w	r8, r8, #1
 80078a8:	ecab 7b02 	vstmia	fp!, {d7}
 80078ac:	3508      	adds	r5, #8
 80078ae:	e7cc      	b.n	800784a <__kernel_rem_pio2+0x72>
 80078b0:	9b02      	ldr	r3, [sp, #8]
 80078b2:	aa0e      	add	r2, sp, #56	; 0x38
 80078b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078b8:	930d      	str	r3, [sp, #52]	; 0x34
 80078ba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80078bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80078c0:	9c02      	ldr	r4, [sp, #8]
 80078c2:	930c      	str	r3, [sp, #48]	; 0x30
 80078c4:	00e3      	lsls	r3, r4, #3
 80078c6:	930a      	str	r3, [sp, #40]	; 0x28
 80078c8:	ab9a      	add	r3, sp, #616	; 0x268
 80078ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80078d2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80078d6:	ab72      	add	r3, sp, #456	; 0x1c8
 80078d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80078dc:	46c3      	mov	fp, r8
 80078de:	46a1      	mov	r9, r4
 80078e0:	f1b9 0f00 	cmp.w	r9, #0
 80078e4:	f1a5 0508 	sub.w	r5, r5, #8
 80078e8:	dc77      	bgt.n	80079da <__kernel_rem_pio2+0x202>
 80078ea:	ec47 6b10 	vmov	d0, r6, r7
 80078ee:	4650      	mov	r0, sl
 80078f0:	f000 fc0a 	bl	8008108 <scalbn>
 80078f4:	ec57 6b10 	vmov	r6, r7, d0
 80078f8:	2200      	movs	r2, #0
 80078fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80078fe:	ee10 0a10 	vmov	r0, s0
 8007902:	4639      	mov	r1, r7
 8007904:	f7f8 fe78 	bl	80005f8 <__aeabi_dmul>
 8007908:	ec41 0b10 	vmov	d0, r0, r1
 800790c:	f000 fb7c 	bl	8008008 <floor>
 8007910:	4b7c      	ldr	r3, [pc, #496]	; (8007b04 <__kernel_rem_pio2+0x32c>)
 8007912:	ec51 0b10 	vmov	r0, r1, d0
 8007916:	2200      	movs	r2, #0
 8007918:	f7f8 fe6e 	bl	80005f8 <__aeabi_dmul>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4630      	mov	r0, r6
 8007922:	4639      	mov	r1, r7
 8007924:	f7f8 fcb0 	bl	8000288 <__aeabi_dsub>
 8007928:	460f      	mov	r7, r1
 800792a:	4606      	mov	r6, r0
 800792c:	f7f9 f914 	bl	8000b58 <__aeabi_d2iz>
 8007930:	9004      	str	r0, [sp, #16]
 8007932:	f7f8 fdf7 	bl	8000524 <__aeabi_i2d>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	4630      	mov	r0, r6
 800793c:	4639      	mov	r1, r7
 800793e:	f7f8 fca3 	bl	8000288 <__aeabi_dsub>
 8007942:	f1ba 0f00 	cmp.w	sl, #0
 8007946:	4606      	mov	r6, r0
 8007948:	460f      	mov	r7, r1
 800794a:	dd6d      	ble.n	8007a28 <__kernel_rem_pio2+0x250>
 800794c:	1e62      	subs	r2, r4, #1
 800794e:	ab0e      	add	r3, sp, #56	; 0x38
 8007950:	9d04      	ldr	r5, [sp, #16]
 8007952:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007956:	f1ca 0118 	rsb	r1, sl, #24
 800795a:	fa40 f301 	asr.w	r3, r0, r1
 800795e:	441d      	add	r5, r3
 8007960:	408b      	lsls	r3, r1
 8007962:	1ac0      	subs	r0, r0, r3
 8007964:	ab0e      	add	r3, sp, #56	; 0x38
 8007966:	9504      	str	r5, [sp, #16]
 8007968:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800796c:	f1ca 0317 	rsb	r3, sl, #23
 8007970:	fa40 fb03 	asr.w	fp, r0, r3
 8007974:	f1bb 0f00 	cmp.w	fp, #0
 8007978:	dd65      	ble.n	8007a46 <__kernel_rem_pio2+0x26e>
 800797a:	9b04      	ldr	r3, [sp, #16]
 800797c:	2200      	movs	r2, #0
 800797e:	3301      	adds	r3, #1
 8007980:	9304      	str	r3, [sp, #16]
 8007982:	4615      	mov	r5, r2
 8007984:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007988:	4294      	cmp	r4, r2
 800798a:	f300 809c 	bgt.w	8007ac6 <__kernel_rem_pio2+0x2ee>
 800798e:	f1ba 0f00 	cmp.w	sl, #0
 8007992:	dd07      	ble.n	80079a4 <__kernel_rem_pio2+0x1cc>
 8007994:	f1ba 0f01 	cmp.w	sl, #1
 8007998:	f000 80c0 	beq.w	8007b1c <__kernel_rem_pio2+0x344>
 800799c:	f1ba 0f02 	cmp.w	sl, #2
 80079a0:	f000 80c6 	beq.w	8007b30 <__kernel_rem_pio2+0x358>
 80079a4:	f1bb 0f02 	cmp.w	fp, #2
 80079a8:	d14d      	bne.n	8007a46 <__kernel_rem_pio2+0x26e>
 80079aa:	4632      	mov	r2, r6
 80079ac:	463b      	mov	r3, r7
 80079ae:	4956      	ldr	r1, [pc, #344]	; (8007b08 <__kernel_rem_pio2+0x330>)
 80079b0:	2000      	movs	r0, #0
 80079b2:	f7f8 fc69 	bl	8000288 <__aeabi_dsub>
 80079b6:	4606      	mov	r6, r0
 80079b8:	460f      	mov	r7, r1
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	d043      	beq.n	8007a46 <__kernel_rem_pio2+0x26e>
 80079be:	4650      	mov	r0, sl
 80079c0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007af8 <__kernel_rem_pio2+0x320>
 80079c4:	f000 fba0 	bl	8008108 <scalbn>
 80079c8:	4630      	mov	r0, r6
 80079ca:	4639      	mov	r1, r7
 80079cc:	ec53 2b10 	vmov	r2, r3, d0
 80079d0:	f7f8 fc5a 	bl	8000288 <__aeabi_dsub>
 80079d4:	4606      	mov	r6, r0
 80079d6:	460f      	mov	r7, r1
 80079d8:	e035      	b.n	8007a46 <__kernel_rem_pio2+0x26e>
 80079da:	4b4c      	ldr	r3, [pc, #304]	; (8007b0c <__kernel_rem_pio2+0x334>)
 80079dc:	2200      	movs	r2, #0
 80079de:	4630      	mov	r0, r6
 80079e0:	4639      	mov	r1, r7
 80079e2:	f7f8 fe09 	bl	80005f8 <__aeabi_dmul>
 80079e6:	f7f9 f8b7 	bl	8000b58 <__aeabi_d2iz>
 80079ea:	f7f8 fd9b 	bl	8000524 <__aeabi_i2d>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	ec43 2b18 	vmov	d8, r2, r3
 80079f6:	4b46      	ldr	r3, [pc, #280]	; (8007b10 <__kernel_rem_pio2+0x338>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	f7f8 fdfd 	bl	80005f8 <__aeabi_dmul>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f8 fc3f 	bl	8000288 <__aeabi_dsub>
 8007a0a:	f7f9 f8a5 	bl	8000b58 <__aeabi_d2iz>
 8007a0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a12:	f84b 0b04 	str.w	r0, [fp], #4
 8007a16:	ec51 0b18 	vmov	r0, r1, d8
 8007a1a:	f7f8 fc37 	bl	800028c <__adddf3>
 8007a1e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007a22:	4606      	mov	r6, r0
 8007a24:	460f      	mov	r7, r1
 8007a26:	e75b      	b.n	80078e0 <__kernel_rem_pio2+0x108>
 8007a28:	d106      	bne.n	8007a38 <__kernel_rem_pio2+0x260>
 8007a2a:	1e63      	subs	r3, r4, #1
 8007a2c:	aa0e      	add	r2, sp, #56	; 0x38
 8007a2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007a32:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007a36:	e79d      	b.n	8007974 <__kernel_rem_pio2+0x19c>
 8007a38:	4b36      	ldr	r3, [pc, #216]	; (8007b14 <__kernel_rem_pio2+0x33c>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f7f9 f862 	bl	8000b04 <__aeabi_dcmpge>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d13d      	bne.n	8007ac0 <__kernel_rem_pio2+0x2e8>
 8007a44:	4683      	mov	fp, r0
 8007a46:	2200      	movs	r2, #0
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f9 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	f000 80c0 	beq.w	8007bd8 <__kernel_rem_pio2+0x400>
 8007a58:	1e65      	subs	r5, r4, #1
 8007a5a:	462b      	mov	r3, r5
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	9902      	ldr	r1, [sp, #8]
 8007a60:	428b      	cmp	r3, r1
 8007a62:	da6c      	bge.n	8007b3e <__kernel_rem_pio2+0x366>
 8007a64:	2a00      	cmp	r2, #0
 8007a66:	f000 8089 	beq.w	8007b7c <__kernel_rem_pio2+0x3a4>
 8007a6a:	ab0e      	add	r3, sp, #56	; 0x38
 8007a6c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007a70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 80ad 	beq.w	8007bd4 <__kernel_rem_pio2+0x3fc>
 8007a7a:	4650      	mov	r0, sl
 8007a7c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007af8 <__kernel_rem_pio2+0x320>
 8007a80:	f000 fb42 	bl	8008108 <scalbn>
 8007a84:	ab9a      	add	r3, sp, #616	; 0x268
 8007a86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007a8a:	ec57 6b10 	vmov	r6, r7, d0
 8007a8e:	00ec      	lsls	r4, r5, #3
 8007a90:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007a94:	46aa      	mov	sl, r5
 8007a96:	f1ba 0f00 	cmp.w	sl, #0
 8007a9a:	f280 80d6 	bge.w	8007c4a <__kernel_rem_pio2+0x472>
 8007a9e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007af0 <__kernel_rem_pio2+0x318>
 8007aa2:	462e      	mov	r6, r5
 8007aa4:	2e00      	cmp	r6, #0
 8007aa6:	f2c0 8104 	blt.w	8007cb2 <__kernel_rem_pio2+0x4da>
 8007aaa:	ab72      	add	r3, sp, #456	; 0x1c8
 8007aac:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007ab0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007b18 <__kernel_rem_pio2+0x340>
 8007ab4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007ab8:	f04f 0800 	mov.w	r8, #0
 8007abc:	1baf      	subs	r7, r5, r6
 8007abe:	e0ea      	b.n	8007c96 <__kernel_rem_pio2+0x4be>
 8007ac0:	f04f 0b02 	mov.w	fp, #2
 8007ac4:	e759      	b.n	800797a <__kernel_rem_pio2+0x1a2>
 8007ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8007aca:	b955      	cbnz	r5, 8007ae2 <__kernel_rem_pio2+0x30a>
 8007acc:	b123      	cbz	r3, 8007ad8 <__kernel_rem_pio2+0x300>
 8007ace:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007ad2:	f8c8 3000 	str.w	r3, [r8]
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	3201      	adds	r2, #1
 8007ada:	f108 0804 	add.w	r8, r8, #4
 8007ade:	461d      	mov	r5, r3
 8007ae0:	e752      	b.n	8007988 <__kernel_rem_pio2+0x1b0>
 8007ae2:	1acb      	subs	r3, r1, r3
 8007ae4:	f8c8 3000 	str.w	r3, [r8]
 8007ae8:	462b      	mov	r3, r5
 8007aea:	e7f5      	b.n	8007ad8 <__kernel_rem_pio2+0x300>
 8007aec:	f3af 8000 	nop.w
	...
 8007afc:	3ff00000 	.word	0x3ff00000
 8007b00:	0800b258 	.word	0x0800b258
 8007b04:	40200000 	.word	0x40200000
 8007b08:	3ff00000 	.word	0x3ff00000
 8007b0c:	3e700000 	.word	0x3e700000
 8007b10:	41700000 	.word	0x41700000
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	0800b218 	.word	0x0800b218
 8007b1c:	1e62      	subs	r2, r4, #1
 8007b1e:	ab0e      	add	r3, sp, #56	; 0x38
 8007b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007b28:	a90e      	add	r1, sp, #56	; 0x38
 8007b2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007b2e:	e739      	b.n	80079a4 <__kernel_rem_pio2+0x1cc>
 8007b30:	1e62      	subs	r2, r4, #1
 8007b32:	ab0e      	add	r3, sp, #56	; 0x38
 8007b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007b3c:	e7f4      	b.n	8007b28 <__kernel_rem_pio2+0x350>
 8007b3e:	a90e      	add	r1, sp, #56	; 0x38
 8007b40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	430a      	orrs	r2, r1
 8007b48:	e789      	b.n	8007a5e <__kernel_rem_pio2+0x286>
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007b50:	2900      	cmp	r1, #0
 8007b52:	d0fa      	beq.n	8007b4a <__kernel_rem_pio2+0x372>
 8007b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b56:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007b5a:	446a      	add	r2, sp
 8007b5c:	3a98      	subs	r2, #152	; 0x98
 8007b5e:	920a      	str	r2, [sp, #40]	; 0x28
 8007b60:	9a08      	ldr	r2, [sp, #32]
 8007b62:	18e3      	adds	r3, r4, r3
 8007b64:	18a5      	adds	r5, r4, r2
 8007b66:	aa22      	add	r2, sp, #136	; 0x88
 8007b68:	f104 0801 	add.w	r8, r4, #1
 8007b6c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007b70:	9304      	str	r3, [sp, #16]
 8007b72:	9b04      	ldr	r3, [sp, #16]
 8007b74:	4543      	cmp	r3, r8
 8007b76:	da04      	bge.n	8007b82 <__kernel_rem_pio2+0x3aa>
 8007b78:	461c      	mov	r4, r3
 8007b7a:	e6a3      	b.n	80078c4 <__kernel_rem_pio2+0xec>
 8007b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e7e4      	b.n	8007b4c <__kernel_rem_pio2+0x374>
 8007b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b84:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007b88:	f7f8 fccc 	bl	8000524 <__aeabi_i2d>
 8007b8c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b92:	46ab      	mov	fp, r5
 8007b94:	461c      	mov	r4, r3
 8007b96:	f04f 0900 	mov.w	r9, #0
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	2700      	movs	r7, #0
 8007b9e:	9b06      	ldr	r3, [sp, #24]
 8007ba0:	4599      	cmp	r9, r3
 8007ba2:	dd06      	ble.n	8007bb2 <__kernel_rem_pio2+0x3da>
 8007ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007baa:	f108 0801 	add.w	r8, r8, #1
 8007bae:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb0:	e7df      	b.n	8007b72 <__kernel_rem_pio2+0x39a>
 8007bb2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007bb6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007bba:	f7f8 fd1d 	bl	80005f8 <__aeabi_dmul>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	4639      	mov	r1, r7
 8007bc6:	f7f8 fb61 	bl	800028c <__adddf3>
 8007bca:	f109 0901 	add.w	r9, r9, #1
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	e7e4      	b.n	8007b9e <__kernel_rem_pio2+0x3c6>
 8007bd4:	3d01      	subs	r5, #1
 8007bd6:	e748      	b.n	8007a6a <__kernel_rem_pio2+0x292>
 8007bd8:	ec47 6b10 	vmov	d0, r6, r7
 8007bdc:	f1ca 0000 	rsb	r0, sl, #0
 8007be0:	f000 fa92 	bl	8008108 <scalbn>
 8007be4:	ec57 6b10 	vmov	r6, r7, d0
 8007be8:	4ba0      	ldr	r3, [pc, #640]	; (8007e6c <__kernel_rem_pio2+0x694>)
 8007bea:	ee10 0a10 	vmov	r0, s0
 8007bee:	2200      	movs	r2, #0
 8007bf0:	4639      	mov	r1, r7
 8007bf2:	f7f8 ff87 	bl	8000b04 <__aeabi_dcmpge>
 8007bf6:	b1f8      	cbz	r0, 8007c38 <__kernel_rem_pio2+0x460>
 8007bf8:	4b9d      	ldr	r3, [pc, #628]	; (8007e70 <__kernel_rem_pio2+0x698>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	4639      	mov	r1, r7
 8007c00:	f7f8 fcfa 	bl	80005f8 <__aeabi_dmul>
 8007c04:	f7f8 ffa8 	bl	8000b58 <__aeabi_d2iz>
 8007c08:	4680      	mov	r8, r0
 8007c0a:	f7f8 fc8b 	bl	8000524 <__aeabi_i2d>
 8007c0e:	4b97      	ldr	r3, [pc, #604]	; (8007e6c <__kernel_rem_pio2+0x694>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	f7f8 fcf1 	bl	80005f8 <__aeabi_dmul>
 8007c16:	460b      	mov	r3, r1
 8007c18:	4602      	mov	r2, r0
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7f8 fb33 	bl	8000288 <__aeabi_dsub>
 8007c22:	f7f8 ff99 	bl	8000b58 <__aeabi_d2iz>
 8007c26:	1c65      	adds	r5, r4, #1
 8007c28:	ab0e      	add	r3, sp, #56	; 0x38
 8007c2a:	f10a 0a18 	add.w	sl, sl, #24
 8007c2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c32:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007c36:	e720      	b.n	8007a7a <__kernel_rem_pio2+0x2a2>
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 ff8c 	bl	8000b58 <__aeabi_d2iz>
 8007c40:	ab0e      	add	r3, sp, #56	; 0x38
 8007c42:	4625      	mov	r5, r4
 8007c44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c48:	e717      	b.n	8007a7a <__kernel_rem_pio2+0x2a2>
 8007c4a:	ab0e      	add	r3, sp, #56	; 0x38
 8007c4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007c50:	f7f8 fc68 	bl	8000524 <__aeabi_i2d>
 8007c54:	4632      	mov	r2, r6
 8007c56:	463b      	mov	r3, r7
 8007c58:	f7f8 fcce 	bl	80005f8 <__aeabi_dmul>
 8007c5c:	4b84      	ldr	r3, [pc, #528]	; (8007e70 <__kernel_rem_pio2+0x698>)
 8007c5e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007c62:	2200      	movs	r2, #0
 8007c64:	4630      	mov	r0, r6
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8007c6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c70:	4606      	mov	r6, r0
 8007c72:	460f      	mov	r7, r1
 8007c74:	e70f      	b.n	8007a96 <__kernel_rem_pio2+0x2be>
 8007c76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007c7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007c7e:	f7f8 fcbb 	bl	80005f8 <__aeabi_dmul>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c8a:	f7f8 faff 	bl	800028c <__adddf3>
 8007c8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c92:	f108 0801 	add.w	r8, r8, #1
 8007c96:	9b02      	ldr	r3, [sp, #8]
 8007c98:	4598      	cmp	r8, r3
 8007c9a:	dc01      	bgt.n	8007ca0 <__kernel_rem_pio2+0x4c8>
 8007c9c:	45b8      	cmp	r8, r7
 8007c9e:	ddea      	ble.n	8007c76 <__kernel_rem_pio2+0x49e>
 8007ca0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007ca4:	ab4a      	add	r3, sp, #296	; 0x128
 8007ca6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007caa:	ed87 7b00 	vstr	d7, [r7]
 8007cae:	3e01      	subs	r6, #1
 8007cb0:	e6f8      	b.n	8007aa4 <__kernel_rem_pio2+0x2cc>
 8007cb2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	dc0b      	bgt.n	8007cd0 <__kernel_rem_pio2+0x4f8>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	dc35      	bgt.n	8007d28 <__kernel_rem_pio2+0x550>
 8007cbc:	d059      	beq.n	8007d72 <__kernel_rem_pio2+0x59a>
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	f003 0007 	and.w	r0, r3, #7
 8007cc4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007cc8:	ecbd 8b02 	vpop	{d8}
 8007ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d1f3      	bne.n	8007cbe <__kernel_rem_pio2+0x4e6>
 8007cd6:	ab4a      	add	r3, sp, #296	; 0x128
 8007cd8:	4423      	add	r3, r4
 8007cda:	9306      	str	r3, [sp, #24]
 8007cdc:	461c      	mov	r4, r3
 8007cde:	469a      	mov	sl, r3
 8007ce0:	9502      	str	r5, [sp, #8]
 8007ce2:	9b02      	ldr	r3, [sp, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f1aa 0a08 	sub.w	sl, sl, #8
 8007cea:	dc6b      	bgt.n	8007dc4 <__kernel_rem_pio2+0x5ec>
 8007cec:	46aa      	mov	sl, r5
 8007cee:	f1ba 0f01 	cmp.w	sl, #1
 8007cf2:	f1a4 0408 	sub.w	r4, r4, #8
 8007cf6:	f300 8085 	bgt.w	8007e04 <__kernel_rem_pio2+0x62c>
 8007cfa:	9c06      	ldr	r4, [sp, #24]
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	3408      	adds	r4, #8
 8007d00:	2100      	movs	r1, #0
 8007d02:	2d01      	cmp	r5, #1
 8007d04:	f300 809d 	bgt.w	8007e42 <__kernel_rem_pio2+0x66a>
 8007d08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007d0c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007d10:	f1bb 0f00 	cmp.w	fp, #0
 8007d14:	f040 809b 	bne.w	8007e4e <__kernel_rem_pio2+0x676>
 8007d18:	9b01      	ldr	r3, [sp, #4]
 8007d1a:	e9c3 5600 	strd	r5, r6, [r3]
 8007d1e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007d22:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007d26:	e7ca      	b.n	8007cbe <__kernel_rem_pio2+0x4e6>
 8007d28:	3408      	adds	r4, #8
 8007d2a:	ab4a      	add	r3, sp, #296	; 0x128
 8007d2c:	441c      	add	r4, r3
 8007d2e:	462e      	mov	r6, r5
 8007d30:	2000      	movs	r0, #0
 8007d32:	2100      	movs	r1, #0
 8007d34:	2e00      	cmp	r6, #0
 8007d36:	da36      	bge.n	8007da6 <__kernel_rem_pio2+0x5ce>
 8007d38:	f1bb 0f00 	cmp.w	fp, #0
 8007d3c:	d039      	beq.n	8007db2 <__kernel_rem_pio2+0x5da>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d44:	9c01      	ldr	r4, [sp, #4]
 8007d46:	e9c4 2300 	strd	r2, r3, [r4]
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007d52:	f7f8 fa99 	bl	8000288 <__aeabi_dsub>
 8007d56:	ae4c      	add	r6, sp, #304	; 0x130
 8007d58:	2401      	movs	r4, #1
 8007d5a:	42a5      	cmp	r5, r4
 8007d5c:	da2c      	bge.n	8007db8 <__kernel_rem_pio2+0x5e0>
 8007d5e:	f1bb 0f00 	cmp.w	fp, #0
 8007d62:	d002      	beq.n	8007d6a <__kernel_rem_pio2+0x592>
 8007d64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d68:	4619      	mov	r1, r3
 8007d6a:	9b01      	ldr	r3, [sp, #4]
 8007d6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007d70:	e7a5      	b.n	8007cbe <__kernel_rem_pio2+0x4e6>
 8007d72:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007d76:	eb0d 0403 	add.w	r4, sp, r3
 8007d7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007d7e:	2000      	movs	r0, #0
 8007d80:	2100      	movs	r1, #0
 8007d82:	2d00      	cmp	r5, #0
 8007d84:	da09      	bge.n	8007d9a <__kernel_rem_pio2+0x5c2>
 8007d86:	f1bb 0f00 	cmp.w	fp, #0
 8007d8a:	d002      	beq.n	8007d92 <__kernel_rem_pio2+0x5ba>
 8007d8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d90:	4619      	mov	r1, r3
 8007d92:	9b01      	ldr	r3, [sp, #4]
 8007d94:	e9c3 0100 	strd	r0, r1, [r3]
 8007d98:	e791      	b.n	8007cbe <__kernel_rem_pio2+0x4e6>
 8007d9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d9e:	f7f8 fa75 	bl	800028c <__adddf3>
 8007da2:	3d01      	subs	r5, #1
 8007da4:	e7ed      	b.n	8007d82 <__kernel_rem_pio2+0x5aa>
 8007da6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007daa:	f7f8 fa6f 	bl	800028c <__adddf3>
 8007dae:	3e01      	subs	r6, #1
 8007db0:	e7c0      	b.n	8007d34 <__kernel_rem_pio2+0x55c>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	e7c5      	b.n	8007d44 <__kernel_rem_pio2+0x56c>
 8007db8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007dbc:	f7f8 fa66 	bl	800028c <__adddf3>
 8007dc0:	3401      	adds	r4, #1
 8007dc2:	e7ca      	b.n	8007d5a <__kernel_rem_pio2+0x582>
 8007dc4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007dc8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007dcc:	9b02      	ldr	r3, [sp, #8]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	9302      	str	r3, [sp, #8]
 8007dd2:	4632      	mov	r2, r6
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	4640      	mov	r0, r8
 8007dd8:	4649      	mov	r1, r9
 8007dda:	f7f8 fa57 	bl	800028c <__adddf3>
 8007dde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4640      	mov	r0, r8
 8007de8:	4649      	mov	r1, r9
 8007dea:	f7f8 fa4d 	bl	8000288 <__aeabi_dsub>
 8007dee:	4632      	mov	r2, r6
 8007df0:	463b      	mov	r3, r7
 8007df2:	f7f8 fa4b 	bl	800028c <__adddf3>
 8007df6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007dfa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007dfe:	ed8a 7b00 	vstr	d7, [sl]
 8007e02:	e76e      	b.n	8007ce2 <__kernel_rem_pio2+0x50a>
 8007e04:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007e08:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	4632      	mov	r2, r6
 8007e10:	463b      	mov	r3, r7
 8007e12:	4649      	mov	r1, r9
 8007e14:	f7f8 fa3a 	bl	800028c <__adddf3>
 8007e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	f7f8 fa30 	bl	8000288 <__aeabi_dsub>
 8007e28:	4632      	mov	r2, r6
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	f7f8 fa2e 	bl	800028c <__adddf3>
 8007e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007e38:	ed84 7b00 	vstr	d7, [r4]
 8007e3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e40:	e755      	b.n	8007cee <__kernel_rem_pio2+0x516>
 8007e42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e46:	f7f8 fa21 	bl	800028c <__adddf3>
 8007e4a:	3d01      	subs	r5, #1
 8007e4c:	e759      	b.n	8007d02 <__kernel_rem_pio2+0x52a>
 8007e4e:	9b01      	ldr	r3, [sp, #4]
 8007e50:	9a01      	ldr	r2, [sp, #4]
 8007e52:	601d      	str	r5, [r3, #0]
 8007e54:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007e58:	605c      	str	r4, [r3, #4]
 8007e5a:	609f      	str	r7, [r3, #8]
 8007e5c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007e60:	60d3      	str	r3, [r2, #12]
 8007e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e66:	6110      	str	r0, [r2, #16]
 8007e68:	6153      	str	r3, [r2, #20]
 8007e6a:	e728      	b.n	8007cbe <__kernel_rem_pio2+0x4e6>
 8007e6c:	41700000 	.word	0x41700000
 8007e70:	3e700000 	.word	0x3e700000
 8007e74:	00000000 	.word	0x00000000

08007e78 <__kernel_sin>:
 8007e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7c:	ed2d 8b04 	vpush	{d8-d9}
 8007e80:	eeb0 8a41 	vmov.f32	s16, s2
 8007e84:	eef0 8a61 	vmov.f32	s17, s3
 8007e88:	ec55 4b10 	vmov	r4, r5, d0
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007e96:	9001      	str	r0, [sp, #4]
 8007e98:	da06      	bge.n	8007ea8 <__kernel_sin+0x30>
 8007e9a:	ee10 0a10 	vmov	r0, s0
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	f7f8 fe5a 	bl	8000b58 <__aeabi_d2iz>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d051      	beq.n	8007f4c <__kernel_sin+0xd4>
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	462b      	mov	r3, r5
 8007eac:	4620      	mov	r0, r4
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	4682      	mov	sl, r0
 8007eb6:	468b      	mov	fp, r1
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	4629      	mov	r1, r5
 8007ec0:	f7f8 fb9a 	bl	80005f8 <__aeabi_dmul>
 8007ec4:	a341      	add	r3, pc, #260	; (adr r3, 8007fcc <__kernel_sin+0x154>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	4680      	mov	r8, r0
 8007ecc:	4689      	mov	r9, r1
 8007ece:	4650      	mov	r0, sl
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	f7f8 fb91 	bl	80005f8 <__aeabi_dmul>
 8007ed6:	a33f      	add	r3, pc, #252	; (adr r3, 8007fd4 <__kernel_sin+0x15c>)
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	f7f8 f9d4 	bl	8000288 <__aeabi_dsub>
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	465b      	mov	r3, fp
 8007ee4:	f7f8 fb88 	bl	80005f8 <__aeabi_dmul>
 8007ee8:	a33c      	add	r3, pc, #240	; (adr r3, 8007fdc <__kernel_sin+0x164>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	f7f8 f9cd 	bl	800028c <__adddf3>
 8007ef2:	4652      	mov	r2, sl
 8007ef4:	465b      	mov	r3, fp
 8007ef6:	f7f8 fb7f 	bl	80005f8 <__aeabi_dmul>
 8007efa:	a33a      	add	r3, pc, #232	; (adr r3, 8007fe4 <__kernel_sin+0x16c>)
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	f7f8 f9c2 	bl	8000288 <__aeabi_dsub>
 8007f04:	4652      	mov	r2, sl
 8007f06:	465b      	mov	r3, fp
 8007f08:	f7f8 fb76 	bl	80005f8 <__aeabi_dmul>
 8007f0c:	a337      	add	r3, pc, #220	; (adr r3, 8007fec <__kernel_sin+0x174>)
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	f7f8 f9bb 	bl	800028c <__adddf3>
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	4606      	mov	r6, r0
 8007f1a:	460f      	mov	r7, r1
 8007f1c:	b9eb      	cbnz	r3, 8007f5a <__kernel_sin+0xe2>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4650      	mov	r0, sl
 8007f24:	4659      	mov	r1, fp
 8007f26:	f7f8 fb67 	bl	80005f8 <__aeabi_dmul>
 8007f2a:	a325      	add	r3, pc, #148	; (adr r3, 8007fc0 <__kernel_sin+0x148>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 f9aa 	bl	8000288 <__aeabi_dsub>
 8007f34:	4642      	mov	r2, r8
 8007f36:	464b      	mov	r3, r9
 8007f38:	f7f8 fb5e 	bl	80005f8 <__aeabi_dmul>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	4620      	mov	r0, r4
 8007f42:	4629      	mov	r1, r5
 8007f44:	f7f8 f9a2 	bl	800028c <__adddf3>
 8007f48:	4604      	mov	r4, r0
 8007f4a:	460d      	mov	r5, r1
 8007f4c:	ec45 4b10 	vmov	d0, r4, r5
 8007f50:	b003      	add	sp, #12
 8007f52:	ecbd 8b04 	vpop	{d8-d9}
 8007f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5a:	4b1b      	ldr	r3, [pc, #108]	; (8007fc8 <__kernel_sin+0x150>)
 8007f5c:	ec51 0b18 	vmov	r0, r1, d8
 8007f60:	2200      	movs	r2, #0
 8007f62:	f7f8 fb49 	bl	80005f8 <__aeabi_dmul>
 8007f66:	4632      	mov	r2, r6
 8007f68:	ec41 0b19 	vmov	d9, r0, r1
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	f7f8 fb41 	bl	80005f8 <__aeabi_dmul>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	ec51 0b19 	vmov	r0, r1, d9
 8007f7e:	f7f8 f983 	bl	8000288 <__aeabi_dsub>
 8007f82:	4652      	mov	r2, sl
 8007f84:	465b      	mov	r3, fp
 8007f86:	f7f8 fb37 	bl	80005f8 <__aeabi_dmul>
 8007f8a:	ec53 2b18 	vmov	r2, r3, d8
 8007f8e:	f7f8 f97b 	bl	8000288 <__aeabi_dsub>
 8007f92:	a30b      	add	r3, pc, #44	; (adr r3, 8007fc0 <__kernel_sin+0x148>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	4606      	mov	r6, r0
 8007f9a:	460f      	mov	r7, r1
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	f7f8 fb2a 	bl	80005f8 <__aeabi_dmul>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4630      	mov	r0, r6
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 f96e 	bl	800028c <__adddf3>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	f7f8 f966 	bl	8000288 <__aeabi_dsub>
 8007fbc:	e7c4      	b.n	8007f48 <__kernel_sin+0xd0>
 8007fbe:	bf00      	nop
 8007fc0:	55555549 	.word	0x55555549
 8007fc4:	3fc55555 	.word	0x3fc55555
 8007fc8:	3fe00000 	.word	0x3fe00000
 8007fcc:	5acfd57c 	.word	0x5acfd57c
 8007fd0:	3de5d93a 	.word	0x3de5d93a
 8007fd4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007fd8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007fdc:	57b1fe7d 	.word	0x57b1fe7d
 8007fe0:	3ec71de3 	.word	0x3ec71de3
 8007fe4:	19c161d5 	.word	0x19c161d5
 8007fe8:	3f2a01a0 	.word	0x3f2a01a0
 8007fec:	1110f8a6 	.word	0x1110f8a6
 8007ff0:	3f811111 	.word	0x3f811111

08007ff4 <fabs>:
 8007ff4:	ec51 0b10 	vmov	r0, r1, d0
 8007ff8:	ee10 2a10 	vmov	r2, s0
 8007ffc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008000:	ec43 2b10 	vmov	d0, r2, r3
 8008004:	4770      	bx	lr
	...

08008008 <floor>:
 8008008:	ec51 0b10 	vmov	r0, r1, d0
 800800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008010:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008014:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008018:	2e13      	cmp	r6, #19
 800801a:	ee10 5a10 	vmov	r5, s0
 800801e:	ee10 8a10 	vmov	r8, s0
 8008022:	460c      	mov	r4, r1
 8008024:	dc32      	bgt.n	800808c <floor+0x84>
 8008026:	2e00      	cmp	r6, #0
 8008028:	da14      	bge.n	8008054 <floor+0x4c>
 800802a:	a333      	add	r3, pc, #204	; (adr r3, 80080f8 <floor+0xf0>)
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	f7f8 f92c 	bl	800028c <__adddf3>
 8008034:	2200      	movs	r2, #0
 8008036:	2300      	movs	r3, #0
 8008038:	f7f8 fd6e 	bl	8000b18 <__aeabi_dcmpgt>
 800803c:	b138      	cbz	r0, 800804e <floor+0x46>
 800803e:	2c00      	cmp	r4, #0
 8008040:	da57      	bge.n	80080f2 <floor+0xea>
 8008042:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008046:	431d      	orrs	r5, r3
 8008048:	d001      	beq.n	800804e <floor+0x46>
 800804a:	4c2d      	ldr	r4, [pc, #180]	; (8008100 <floor+0xf8>)
 800804c:	2500      	movs	r5, #0
 800804e:	4621      	mov	r1, r4
 8008050:	4628      	mov	r0, r5
 8008052:	e025      	b.n	80080a0 <floor+0x98>
 8008054:	4f2b      	ldr	r7, [pc, #172]	; (8008104 <floor+0xfc>)
 8008056:	4137      	asrs	r7, r6
 8008058:	ea01 0307 	and.w	r3, r1, r7
 800805c:	4303      	orrs	r3, r0
 800805e:	d01f      	beq.n	80080a0 <floor+0x98>
 8008060:	a325      	add	r3, pc, #148	; (adr r3, 80080f8 <floor+0xf0>)
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f7f8 f911 	bl	800028c <__adddf3>
 800806a:	2200      	movs	r2, #0
 800806c:	2300      	movs	r3, #0
 800806e:	f7f8 fd53 	bl	8000b18 <__aeabi_dcmpgt>
 8008072:	2800      	cmp	r0, #0
 8008074:	d0eb      	beq.n	800804e <floor+0x46>
 8008076:	2c00      	cmp	r4, #0
 8008078:	bfbe      	ittt	lt
 800807a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800807e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008082:	19a4      	addlt	r4, r4, r6
 8008084:	ea24 0407 	bic.w	r4, r4, r7
 8008088:	2500      	movs	r5, #0
 800808a:	e7e0      	b.n	800804e <floor+0x46>
 800808c:	2e33      	cmp	r6, #51	; 0x33
 800808e:	dd0b      	ble.n	80080a8 <floor+0xa0>
 8008090:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008094:	d104      	bne.n	80080a0 <floor+0x98>
 8008096:	ee10 2a10 	vmov	r2, s0
 800809a:	460b      	mov	r3, r1
 800809c:	f7f8 f8f6 	bl	800028c <__adddf3>
 80080a0:	ec41 0b10 	vmov	d0, r0, r1
 80080a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80080ac:	f04f 33ff 	mov.w	r3, #4294967295
 80080b0:	fa23 f707 	lsr.w	r7, r3, r7
 80080b4:	4207      	tst	r7, r0
 80080b6:	d0f3      	beq.n	80080a0 <floor+0x98>
 80080b8:	a30f      	add	r3, pc, #60	; (adr r3, 80080f8 <floor+0xf0>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 f8e5 	bl	800028c <__adddf3>
 80080c2:	2200      	movs	r2, #0
 80080c4:	2300      	movs	r3, #0
 80080c6:	f7f8 fd27 	bl	8000b18 <__aeabi_dcmpgt>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d0bf      	beq.n	800804e <floor+0x46>
 80080ce:	2c00      	cmp	r4, #0
 80080d0:	da02      	bge.n	80080d8 <floor+0xd0>
 80080d2:	2e14      	cmp	r6, #20
 80080d4:	d103      	bne.n	80080de <floor+0xd6>
 80080d6:	3401      	adds	r4, #1
 80080d8:	ea25 0507 	bic.w	r5, r5, r7
 80080dc:	e7b7      	b.n	800804e <floor+0x46>
 80080de:	2301      	movs	r3, #1
 80080e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80080e4:	fa03 f606 	lsl.w	r6, r3, r6
 80080e8:	4435      	add	r5, r6
 80080ea:	4545      	cmp	r5, r8
 80080ec:	bf38      	it	cc
 80080ee:	18e4      	addcc	r4, r4, r3
 80080f0:	e7f2      	b.n	80080d8 <floor+0xd0>
 80080f2:	2500      	movs	r5, #0
 80080f4:	462c      	mov	r4, r5
 80080f6:	e7aa      	b.n	800804e <floor+0x46>
 80080f8:	8800759c 	.word	0x8800759c
 80080fc:	7e37e43c 	.word	0x7e37e43c
 8008100:	bff00000 	.word	0xbff00000
 8008104:	000fffff 	.word	0x000fffff

08008108 <scalbn>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	ec55 4b10 	vmov	r4, r5, d0
 800810e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008112:	4606      	mov	r6, r0
 8008114:	462b      	mov	r3, r5
 8008116:	b99a      	cbnz	r2, 8008140 <scalbn+0x38>
 8008118:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800811c:	4323      	orrs	r3, r4
 800811e:	d036      	beq.n	800818e <scalbn+0x86>
 8008120:	4b39      	ldr	r3, [pc, #228]	; (8008208 <scalbn+0x100>)
 8008122:	4629      	mov	r1, r5
 8008124:	ee10 0a10 	vmov	r0, s0
 8008128:	2200      	movs	r2, #0
 800812a:	f7f8 fa65 	bl	80005f8 <__aeabi_dmul>
 800812e:	4b37      	ldr	r3, [pc, #220]	; (800820c <scalbn+0x104>)
 8008130:	429e      	cmp	r6, r3
 8008132:	4604      	mov	r4, r0
 8008134:	460d      	mov	r5, r1
 8008136:	da10      	bge.n	800815a <scalbn+0x52>
 8008138:	a32b      	add	r3, pc, #172	; (adr r3, 80081e8 <scalbn+0xe0>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	e03a      	b.n	80081b6 <scalbn+0xae>
 8008140:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008144:	428a      	cmp	r2, r1
 8008146:	d10c      	bne.n	8008162 <scalbn+0x5a>
 8008148:	ee10 2a10 	vmov	r2, s0
 800814c:	4620      	mov	r0, r4
 800814e:	4629      	mov	r1, r5
 8008150:	f7f8 f89c 	bl	800028c <__adddf3>
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	e019      	b.n	800818e <scalbn+0x86>
 800815a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800815e:	460b      	mov	r3, r1
 8008160:	3a36      	subs	r2, #54	; 0x36
 8008162:	4432      	add	r2, r6
 8008164:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008168:	428a      	cmp	r2, r1
 800816a:	dd08      	ble.n	800817e <scalbn+0x76>
 800816c:	2d00      	cmp	r5, #0
 800816e:	a120      	add	r1, pc, #128	; (adr r1, 80081f0 <scalbn+0xe8>)
 8008170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008174:	da1c      	bge.n	80081b0 <scalbn+0xa8>
 8008176:	a120      	add	r1, pc, #128	; (adr r1, 80081f8 <scalbn+0xf0>)
 8008178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800817c:	e018      	b.n	80081b0 <scalbn+0xa8>
 800817e:	2a00      	cmp	r2, #0
 8008180:	dd08      	ble.n	8008194 <scalbn+0x8c>
 8008182:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008186:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800818a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800818e:	ec45 4b10 	vmov	d0, r4, r5
 8008192:	bd70      	pop	{r4, r5, r6, pc}
 8008194:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008198:	da19      	bge.n	80081ce <scalbn+0xc6>
 800819a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800819e:	429e      	cmp	r6, r3
 80081a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80081a4:	dd0a      	ble.n	80081bc <scalbn+0xb4>
 80081a6:	a112      	add	r1, pc, #72	; (adr r1, 80081f0 <scalbn+0xe8>)
 80081a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e2      	bne.n	8008176 <scalbn+0x6e>
 80081b0:	a30f      	add	r3, pc, #60	; (adr r3, 80081f0 <scalbn+0xe8>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f7f8 fa1f 	bl	80005f8 <__aeabi_dmul>
 80081ba:	e7cb      	b.n	8008154 <scalbn+0x4c>
 80081bc:	a10a      	add	r1, pc, #40	; (adr r1, 80081e8 <scalbn+0xe0>)
 80081be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0b8      	beq.n	8008138 <scalbn+0x30>
 80081c6:	a10e      	add	r1, pc, #56	; (adr r1, 8008200 <scalbn+0xf8>)
 80081c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081cc:	e7b4      	b.n	8008138 <scalbn+0x30>
 80081ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80081d2:	3236      	adds	r2, #54	; 0x36
 80081d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80081d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80081dc:	4620      	mov	r0, r4
 80081de:	4b0c      	ldr	r3, [pc, #48]	; (8008210 <scalbn+0x108>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	e7e8      	b.n	80081b6 <scalbn+0xae>
 80081e4:	f3af 8000 	nop.w
 80081e8:	c2f8f359 	.word	0xc2f8f359
 80081ec:	01a56e1f 	.word	0x01a56e1f
 80081f0:	8800759c 	.word	0x8800759c
 80081f4:	7e37e43c 	.word	0x7e37e43c
 80081f8:	8800759c 	.word	0x8800759c
 80081fc:	fe37e43c 	.word	0xfe37e43c
 8008200:	c2f8f359 	.word	0xc2f8f359
 8008204:	81a56e1f 	.word	0x81a56e1f
 8008208:	43500000 	.word	0x43500000
 800820c:	ffff3cb0 	.word	0xffff3cb0
 8008210:	3c900000 	.word	0x3c900000

08008214 <__errno>:
 8008214:	4b01      	ldr	r3, [pc, #4]	; (800821c <__errno+0x8>)
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	20000010 	.word	0x20000010

08008220 <__libc_init_array>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	4d0d      	ldr	r5, [pc, #52]	; (8008258 <__libc_init_array+0x38>)
 8008224:	4c0d      	ldr	r4, [pc, #52]	; (800825c <__libc_init_array+0x3c>)
 8008226:	1b64      	subs	r4, r4, r5
 8008228:	10a4      	asrs	r4, r4, #2
 800822a:	2600      	movs	r6, #0
 800822c:	42a6      	cmp	r6, r4
 800822e:	d109      	bne.n	8008244 <__libc_init_array+0x24>
 8008230:	4d0b      	ldr	r5, [pc, #44]	; (8008260 <__libc_init_array+0x40>)
 8008232:	4c0c      	ldr	r4, [pc, #48]	; (8008264 <__libc_init_array+0x44>)
 8008234:	f002 fdc4 	bl	800adc0 <_init>
 8008238:	1b64      	subs	r4, r4, r5
 800823a:	10a4      	asrs	r4, r4, #2
 800823c:	2600      	movs	r6, #0
 800823e:	42a6      	cmp	r6, r4
 8008240:	d105      	bne.n	800824e <__libc_init_array+0x2e>
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	f855 3b04 	ldr.w	r3, [r5], #4
 8008248:	4798      	blx	r3
 800824a:	3601      	adds	r6, #1
 800824c:	e7ee      	b.n	800822c <__libc_init_array+0xc>
 800824e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008252:	4798      	blx	r3
 8008254:	3601      	adds	r6, #1
 8008256:	e7f2      	b.n	800823e <__libc_init_array+0x1e>
 8008258:	0800b644 	.word	0x0800b644
 800825c:	0800b644 	.word	0x0800b644
 8008260:	0800b644 	.word	0x0800b644
 8008264:	0800b648 	.word	0x0800b648

08008268 <memcpy>:
 8008268:	440a      	add	r2, r1
 800826a:	4291      	cmp	r1, r2
 800826c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008270:	d100      	bne.n	8008274 <memcpy+0xc>
 8008272:	4770      	bx	lr
 8008274:	b510      	push	{r4, lr}
 8008276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800827a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800827e:	4291      	cmp	r1, r2
 8008280:	d1f9      	bne.n	8008276 <memcpy+0xe>
 8008282:	bd10      	pop	{r4, pc}

08008284 <memset>:
 8008284:	4402      	add	r2, r0
 8008286:	4603      	mov	r3, r0
 8008288:	4293      	cmp	r3, r2
 800828a:	d100      	bne.n	800828e <memset+0xa>
 800828c:	4770      	bx	lr
 800828e:	f803 1b01 	strb.w	r1, [r3], #1
 8008292:	e7f9      	b.n	8008288 <memset+0x4>

08008294 <__cvt>:
 8008294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	ec55 4b10 	vmov	r4, r5, d0
 800829c:	2d00      	cmp	r5, #0
 800829e:	460e      	mov	r6, r1
 80082a0:	4619      	mov	r1, r3
 80082a2:	462b      	mov	r3, r5
 80082a4:	bfbb      	ittet	lt
 80082a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80082aa:	461d      	movlt	r5, r3
 80082ac:	2300      	movge	r3, #0
 80082ae:	232d      	movlt	r3, #45	; 0x2d
 80082b0:	700b      	strb	r3, [r1, #0]
 80082b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80082b8:	4691      	mov	r9, r2
 80082ba:	f023 0820 	bic.w	r8, r3, #32
 80082be:	bfbc      	itt	lt
 80082c0:	4622      	movlt	r2, r4
 80082c2:	4614      	movlt	r4, r2
 80082c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082c8:	d005      	beq.n	80082d6 <__cvt+0x42>
 80082ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082ce:	d100      	bne.n	80082d2 <__cvt+0x3e>
 80082d0:	3601      	adds	r6, #1
 80082d2:	2102      	movs	r1, #2
 80082d4:	e000      	b.n	80082d8 <__cvt+0x44>
 80082d6:	2103      	movs	r1, #3
 80082d8:	ab03      	add	r3, sp, #12
 80082da:	9301      	str	r3, [sp, #4]
 80082dc:	ab02      	add	r3, sp, #8
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	ec45 4b10 	vmov	d0, r4, r5
 80082e4:	4653      	mov	r3, sl
 80082e6:	4632      	mov	r2, r6
 80082e8:	f000 fe1a 	bl	8008f20 <_dtoa_r>
 80082ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082f0:	4607      	mov	r7, r0
 80082f2:	d102      	bne.n	80082fa <__cvt+0x66>
 80082f4:	f019 0f01 	tst.w	r9, #1
 80082f8:	d022      	beq.n	8008340 <__cvt+0xac>
 80082fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082fe:	eb07 0906 	add.w	r9, r7, r6
 8008302:	d110      	bne.n	8008326 <__cvt+0x92>
 8008304:	783b      	ldrb	r3, [r7, #0]
 8008306:	2b30      	cmp	r3, #48	; 0x30
 8008308:	d10a      	bne.n	8008320 <__cvt+0x8c>
 800830a:	2200      	movs	r2, #0
 800830c:	2300      	movs	r3, #0
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f8 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008316:	b918      	cbnz	r0, 8008320 <__cvt+0x8c>
 8008318:	f1c6 0601 	rsb	r6, r6, #1
 800831c:	f8ca 6000 	str.w	r6, [sl]
 8008320:	f8da 3000 	ldr.w	r3, [sl]
 8008324:	4499      	add	r9, r3
 8008326:	2200      	movs	r2, #0
 8008328:	2300      	movs	r3, #0
 800832a:	4620      	mov	r0, r4
 800832c:	4629      	mov	r1, r5
 800832e:	f7f8 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008332:	b108      	cbz	r0, 8008338 <__cvt+0xa4>
 8008334:	f8cd 900c 	str.w	r9, [sp, #12]
 8008338:	2230      	movs	r2, #48	; 0x30
 800833a:	9b03      	ldr	r3, [sp, #12]
 800833c:	454b      	cmp	r3, r9
 800833e:	d307      	bcc.n	8008350 <__cvt+0xbc>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008344:	1bdb      	subs	r3, r3, r7
 8008346:	4638      	mov	r0, r7
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	b004      	add	sp, #16
 800834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008350:	1c59      	adds	r1, r3, #1
 8008352:	9103      	str	r1, [sp, #12]
 8008354:	701a      	strb	r2, [r3, #0]
 8008356:	e7f0      	b.n	800833a <__cvt+0xa6>

08008358 <__exponent>:
 8008358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800835a:	4603      	mov	r3, r0
 800835c:	2900      	cmp	r1, #0
 800835e:	bfb8      	it	lt
 8008360:	4249      	neglt	r1, r1
 8008362:	f803 2b02 	strb.w	r2, [r3], #2
 8008366:	bfb4      	ite	lt
 8008368:	222d      	movlt	r2, #45	; 0x2d
 800836a:	222b      	movge	r2, #43	; 0x2b
 800836c:	2909      	cmp	r1, #9
 800836e:	7042      	strb	r2, [r0, #1]
 8008370:	dd2a      	ble.n	80083c8 <__exponent+0x70>
 8008372:	f10d 0407 	add.w	r4, sp, #7
 8008376:	46a4      	mov	ip, r4
 8008378:	270a      	movs	r7, #10
 800837a:	46a6      	mov	lr, r4
 800837c:	460a      	mov	r2, r1
 800837e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008382:	fb07 1516 	mls	r5, r7, r6, r1
 8008386:	3530      	adds	r5, #48	; 0x30
 8008388:	2a63      	cmp	r2, #99	; 0x63
 800838a:	f104 34ff 	add.w	r4, r4, #4294967295
 800838e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008392:	4631      	mov	r1, r6
 8008394:	dcf1      	bgt.n	800837a <__exponent+0x22>
 8008396:	3130      	adds	r1, #48	; 0x30
 8008398:	f1ae 0502 	sub.w	r5, lr, #2
 800839c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80083a0:	1c44      	adds	r4, r0, #1
 80083a2:	4629      	mov	r1, r5
 80083a4:	4561      	cmp	r1, ip
 80083a6:	d30a      	bcc.n	80083be <__exponent+0x66>
 80083a8:	f10d 0209 	add.w	r2, sp, #9
 80083ac:	eba2 020e 	sub.w	r2, r2, lr
 80083b0:	4565      	cmp	r5, ip
 80083b2:	bf88      	it	hi
 80083b4:	2200      	movhi	r2, #0
 80083b6:	4413      	add	r3, r2
 80083b8:	1a18      	subs	r0, r3, r0
 80083ba:	b003      	add	sp, #12
 80083bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083c6:	e7ed      	b.n	80083a4 <__exponent+0x4c>
 80083c8:	2330      	movs	r3, #48	; 0x30
 80083ca:	3130      	adds	r1, #48	; 0x30
 80083cc:	7083      	strb	r3, [r0, #2]
 80083ce:	70c1      	strb	r1, [r0, #3]
 80083d0:	1d03      	adds	r3, r0, #4
 80083d2:	e7f1      	b.n	80083b8 <__exponent+0x60>

080083d4 <_printf_float>:
 80083d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d8:	ed2d 8b02 	vpush	{d8}
 80083dc:	b08d      	sub	sp, #52	; 0x34
 80083de:	460c      	mov	r4, r1
 80083e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083e4:	4616      	mov	r6, r2
 80083e6:	461f      	mov	r7, r3
 80083e8:	4605      	mov	r5, r0
 80083ea:	f001 fd3f 	bl	8009e6c <_localeconv_r>
 80083ee:	f8d0 a000 	ldr.w	sl, [r0]
 80083f2:	4650      	mov	r0, sl
 80083f4:	f7f7 feec 	bl	80001d0 <strlen>
 80083f8:	2300      	movs	r3, #0
 80083fa:	930a      	str	r3, [sp, #40]	; 0x28
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	9305      	str	r3, [sp, #20]
 8008400:	f8d8 3000 	ldr.w	r3, [r8]
 8008404:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008408:	3307      	adds	r3, #7
 800840a:	f023 0307 	bic.w	r3, r3, #7
 800840e:	f103 0208 	add.w	r2, r3, #8
 8008412:	f8c8 2000 	str.w	r2, [r8]
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800841e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008422:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008426:	9307      	str	r3, [sp, #28]
 8008428:	f8cd 8018 	str.w	r8, [sp, #24]
 800842c:	ee08 0a10 	vmov	s16, r0
 8008430:	4b9f      	ldr	r3, [pc, #636]	; (80086b0 <_printf_float+0x2dc>)
 8008432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008436:	f04f 32ff 	mov.w	r2, #4294967295
 800843a:	f7f8 fb77 	bl	8000b2c <__aeabi_dcmpun>
 800843e:	bb88      	cbnz	r0, 80084a4 <_printf_float+0xd0>
 8008440:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008444:	4b9a      	ldr	r3, [pc, #616]	; (80086b0 <_printf_float+0x2dc>)
 8008446:	f04f 32ff 	mov.w	r2, #4294967295
 800844a:	f7f8 fb51 	bl	8000af0 <__aeabi_dcmple>
 800844e:	bb48      	cbnz	r0, 80084a4 <_printf_float+0xd0>
 8008450:	2200      	movs	r2, #0
 8008452:	2300      	movs	r3, #0
 8008454:	4640      	mov	r0, r8
 8008456:	4649      	mov	r1, r9
 8008458:	f7f8 fb40 	bl	8000adc <__aeabi_dcmplt>
 800845c:	b110      	cbz	r0, 8008464 <_printf_float+0x90>
 800845e:	232d      	movs	r3, #45	; 0x2d
 8008460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008464:	4b93      	ldr	r3, [pc, #588]	; (80086b4 <_printf_float+0x2e0>)
 8008466:	4894      	ldr	r0, [pc, #592]	; (80086b8 <_printf_float+0x2e4>)
 8008468:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800846c:	bf94      	ite	ls
 800846e:	4698      	movls	r8, r3
 8008470:	4680      	movhi	r8, r0
 8008472:	2303      	movs	r3, #3
 8008474:	6123      	str	r3, [r4, #16]
 8008476:	9b05      	ldr	r3, [sp, #20]
 8008478:	f023 0204 	bic.w	r2, r3, #4
 800847c:	6022      	str	r2, [r4, #0]
 800847e:	f04f 0900 	mov.w	r9, #0
 8008482:	9700      	str	r7, [sp, #0]
 8008484:	4633      	mov	r3, r6
 8008486:	aa0b      	add	r2, sp, #44	; 0x2c
 8008488:	4621      	mov	r1, r4
 800848a:	4628      	mov	r0, r5
 800848c:	f000 f9d8 	bl	8008840 <_printf_common>
 8008490:	3001      	adds	r0, #1
 8008492:	f040 8090 	bne.w	80085b6 <_printf_float+0x1e2>
 8008496:	f04f 30ff 	mov.w	r0, #4294967295
 800849a:	b00d      	add	sp, #52	; 0x34
 800849c:	ecbd 8b02 	vpop	{d8}
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	4642      	mov	r2, r8
 80084a6:	464b      	mov	r3, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	4649      	mov	r1, r9
 80084ac:	f7f8 fb3e 	bl	8000b2c <__aeabi_dcmpun>
 80084b0:	b140      	cbz	r0, 80084c4 <_printf_float+0xf0>
 80084b2:	464b      	mov	r3, r9
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bfbc      	itt	lt
 80084b8:	232d      	movlt	r3, #45	; 0x2d
 80084ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084be:	487f      	ldr	r0, [pc, #508]	; (80086bc <_printf_float+0x2e8>)
 80084c0:	4b7f      	ldr	r3, [pc, #508]	; (80086c0 <_printf_float+0x2ec>)
 80084c2:	e7d1      	b.n	8008468 <_printf_float+0x94>
 80084c4:	6863      	ldr	r3, [r4, #4]
 80084c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084ca:	9206      	str	r2, [sp, #24]
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	d13f      	bne.n	8008550 <_printf_float+0x17c>
 80084d0:	2306      	movs	r3, #6
 80084d2:	6063      	str	r3, [r4, #4]
 80084d4:	9b05      	ldr	r3, [sp, #20]
 80084d6:	6861      	ldr	r1, [r4, #4]
 80084d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084dc:	2300      	movs	r3, #0
 80084de:	9303      	str	r3, [sp, #12]
 80084e0:	ab0a      	add	r3, sp, #40	; 0x28
 80084e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084e6:	ab09      	add	r3, sp, #36	; 0x24
 80084e8:	ec49 8b10 	vmov	d0, r8, r9
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	6022      	str	r2, [r4, #0]
 80084f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084f4:	4628      	mov	r0, r5
 80084f6:	f7ff fecd 	bl	8008294 <__cvt>
 80084fa:	9b06      	ldr	r3, [sp, #24]
 80084fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084fe:	2b47      	cmp	r3, #71	; 0x47
 8008500:	4680      	mov	r8, r0
 8008502:	d108      	bne.n	8008516 <_printf_float+0x142>
 8008504:	1cc8      	adds	r0, r1, #3
 8008506:	db02      	blt.n	800850e <_printf_float+0x13a>
 8008508:	6863      	ldr	r3, [r4, #4]
 800850a:	4299      	cmp	r1, r3
 800850c:	dd41      	ble.n	8008592 <_printf_float+0x1be>
 800850e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008512:	fa5f fb8b 	uxtb.w	fp, fp
 8008516:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800851a:	d820      	bhi.n	800855e <_printf_float+0x18a>
 800851c:	3901      	subs	r1, #1
 800851e:	465a      	mov	r2, fp
 8008520:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008524:	9109      	str	r1, [sp, #36]	; 0x24
 8008526:	f7ff ff17 	bl	8008358 <__exponent>
 800852a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800852c:	1813      	adds	r3, r2, r0
 800852e:	2a01      	cmp	r2, #1
 8008530:	4681      	mov	r9, r0
 8008532:	6123      	str	r3, [r4, #16]
 8008534:	dc02      	bgt.n	800853c <_printf_float+0x168>
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	07d2      	lsls	r2, r2, #31
 800853a:	d501      	bpl.n	8008540 <_printf_float+0x16c>
 800853c:	3301      	adds	r3, #1
 800853e:	6123      	str	r3, [r4, #16]
 8008540:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008544:	2b00      	cmp	r3, #0
 8008546:	d09c      	beq.n	8008482 <_printf_float+0xae>
 8008548:	232d      	movs	r3, #45	; 0x2d
 800854a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800854e:	e798      	b.n	8008482 <_printf_float+0xae>
 8008550:	9a06      	ldr	r2, [sp, #24]
 8008552:	2a47      	cmp	r2, #71	; 0x47
 8008554:	d1be      	bne.n	80084d4 <_printf_float+0x100>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1bc      	bne.n	80084d4 <_printf_float+0x100>
 800855a:	2301      	movs	r3, #1
 800855c:	e7b9      	b.n	80084d2 <_printf_float+0xfe>
 800855e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008562:	d118      	bne.n	8008596 <_printf_float+0x1c2>
 8008564:	2900      	cmp	r1, #0
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	dd0b      	ble.n	8008582 <_printf_float+0x1ae>
 800856a:	6121      	str	r1, [r4, #16]
 800856c:	b913      	cbnz	r3, 8008574 <_printf_float+0x1a0>
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	07d0      	lsls	r0, r2, #31
 8008572:	d502      	bpl.n	800857a <_printf_float+0x1a6>
 8008574:	3301      	adds	r3, #1
 8008576:	440b      	add	r3, r1
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	65a1      	str	r1, [r4, #88]	; 0x58
 800857c:	f04f 0900 	mov.w	r9, #0
 8008580:	e7de      	b.n	8008540 <_printf_float+0x16c>
 8008582:	b913      	cbnz	r3, 800858a <_printf_float+0x1b6>
 8008584:	6822      	ldr	r2, [r4, #0]
 8008586:	07d2      	lsls	r2, r2, #31
 8008588:	d501      	bpl.n	800858e <_printf_float+0x1ba>
 800858a:	3302      	adds	r3, #2
 800858c:	e7f4      	b.n	8008578 <_printf_float+0x1a4>
 800858e:	2301      	movs	r3, #1
 8008590:	e7f2      	b.n	8008578 <_printf_float+0x1a4>
 8008592:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008598:	4299      	cmp	r1, r3
 800859a:	db05      	blt.n	80085a8 <_printf_float+0x1d4>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	6121      	str	r1, [r4, #16]
 80085a0:	07d8      	lsls	r0, r3, #31
 80085a2:	d5ea      	bpl.n	800857a <_printf_float+0x1a6>
 80085a4:	1c4b      	adds	r3, r1, #1
 80085a6:	e7e7      	b.n	8008578 <_printf_float+0x1a4>
 80085a8:	2900      	cmp	r1, #0
 80085aa:	bfd4      	ite	le
 80085ac:	f1c1 0202 	rsble	r2, r1, #2
 80085b0:	2201      	movgt	r2, #1
 80085b2:	4413      	add	r3, r2
 80085b4:	e7e0      	b.n	8008578 <_printf_float+0x1a4>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	055a      	lsls	r2, r3, #21
 80085ba:	d407      	bmi.n	80085cc <_printf_float+0x1f8>
 80085bc:	6923      	ldr	r3, [r4, #16]
 80085be:	4642      	mov	r2, r8
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	d12c      	bne.n	8008624 <_printf_float+0x250>
 80085ca:	e764      	b.n	8008496 <_printf_float+0xc2>
 80085cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085d0:	f240 80e0 	bls.w	8008794 <_printf_float+0x3c0>
 80085d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085d8:	2200      	movs	r2, #0
 80085da:	2300      	movs	r3, #0
 80085dc:	f7f8 fa74 	bl	8000ac8 <__aeabi_dcmpeq>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d034      	beq.n	800864e <_printf_float+0x27a>
 80085e4:	4a37      	ldr	r2, [pc, #220]	; (80086c4 <_printf_float+0x2f0>)
 80085e6:	2301      	movs	r3, #1
 80085e8:	4631      	mov	r1, r6
 80085ea:	4628      	mov	r0, r5
 80085ec:	47b8      	blx	r7
 80085ee:	3001      	adds	r0, #1
 80085f0:	f43f af51 	beq.w	8008496 <_printf_float+0xc2>
 80085f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085f8:	429a      	cmp	r2, r3
 80085fa:	db02      	blt.n	8008602 <_printf_float+0x22e>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	07d8      	lsls	r0, r3, #31
 8008600:	d510      	bpl.n	8008624 <_printf_float+0x250>
 8008602:	ee18 3a10 	vmov	r3, s16
 8008606:	4652      	mov	r2, sl
 8008608:	4631      	mov	r1, r6
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	f43f af41 	beq.w	8008496 <_printf_float+0xc2>
 8008614:	f04f 0800 	mov.w	r8, #0
 8008618:	f104 091a 	add.w	r9, r4, #26
 800861c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861e:	3b01      	subs	r3, #1
 8008620:	4543      	cmp	r3, r8
 8008622:	dc09      	bgt.n	8008638 <_printf_float+0x264>
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	079b      	lsls	r3, r3, #30
 8008628:	f100 8105 	bmi.w	8008836 <_printf_float+0x462>
 800862c:	68e0      	ldr	r0, [r4, #12]
 800862e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008630:	4298      	cmp	r0, r3
 8008632:	bfb8      	it	lt
 8008634:	4618      	movlt	r0, r3
 8008636:	e730      	b.n	800849a <_printf_float+0xc6>
 8008638:	2301      	movs	r3, #1
 800863a:	464a      	mov	r2, r9
 800863c:	4631      	mov	r1, r6
 800863e:	4628      	mov	r0, r5
 8008640:	47b8      	blx	r7
 8008642:	3001      	adds	r0, #1
 8008644:	f43f af27 	beq.w	8008496 <_printf_float+0xc2>
 8008648:	f108 0801 	add.w	r8, r8, #1
 800864c:	e7e6      	b.n	800861c <_printf_float+0x248>
 800864e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008650:	2b00      	cmp	r3, #0
 8008652:	dc39      	bgt.n	80086c8 <_printf_float+0x2f4>
 8008654:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <_printf_float+0x2f0>)
 8008656:	2301      	movs	r3, #1
 8008658:	4631      	mov	r1, r6
 800865a:	4628      	mov	r0, r5
 800865c:	47b8      	blx	r7
 800865e:	3001      	adds	r0, #1
 8008660:	f43f af19 	beq.w	8008496 <_printf_float+0xc2>
 8008664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008668:	4313      	orrs	r3, r2
 800866a:	d102      	bne.n	8008672 <_printf_float+0x29e>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	07d9      	lsls	r1, r3, #31
 8008670:	d5d8      	bpl.n	8008624 <_printf_float+0x250>
 8008672:	ee18 3a10 	vmov	r3, s16
 8008676:	4652      	mov	r2, sl
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	47b8      	blx	r7
 800867e:	3001      	adds	r0, #1
 8008680:	f43f af09 	beq.w	8008496 <_printf_float+0xc2>
 8008684:	f04f 0900 	mov.w	r9, #0
 8008688:	f104 0a1a 	add.w	sl, r4, #26
 800868c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800868e:	425b      	negs	r3, r3
 8008690:	454b      	cmp	r3, r9
 8008692:	dc01      	bgt.n	8008698 <_printf_float+0x2c4>
 8008694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008696:	e792      	b.n	80085be <_printf_float+0x1ea>
 8008698:	2301      	movs	r3, #1
 800869a:	4652      	mov	r2, sl
 800869c:	4631      	mov	r1, r6
 800869e:	4628      	mov	r0, r5
 80086a0:	47b8      	blx	r7
 80086a2:	3001      	adds	r0, #1
 80086a4:	f43f aef7 	beq.w	8008496 <_printf_float+0xc2>
 80086a8:	f109 0901 	add.w	r9, r9, #1
 80086ac:	e7ee      	b.n	800868c <_printf_float+0x2b8>
 80086ae:	bf00      	nop
 80086b0:	7fefffff 	.word	0x7fefffff
 80086b4:	0800b26c 	.word	0x0800b26c
 80086b8:	0800b270 	.word	0x0800b270
 80086bc:	0800b278 	.word	0x0800b278
 80086c0:	0800b274 	.word	0x0800b274
 80086c4:	0800b27c 	.word	0x0800b27c
 80086c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086cc:	429a      	cmp	r2, r3
 80086ce:	bfa8      	it	ge
 80086d0:	461a      	movge	r2, r3
 80086d2:	2a00      	cmp	r2, #0
 80086d4:	4691      	mov	r9, r2
 80086d6:	dc37      	bgt.n	8008748 <_printf_float+0x374>
 80086d8:	f04f 0b00 	mov.w	fp, #0
 80086dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086e0:	f104 021a 	add.w	r2, r4, #26
 80086e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086e6:	9305      	str	r3, [sp, #20]
 80086e8:	eba3 0309 	sub.w	r3, r3, r9
 80086ec:	455b      	cmp	r3, fp
 80086ee:	dc33      	bgt.n	8008758 <_printf_float+0x384>
 80086f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086f4:	429a      	cmp	r2, r3
 80086f6:	db3b      	blt.n	8008770 <_printf_float+0x39c>
 80086f8:	6823      	ldr	r3, [r4, #0]
 80086fa:	07da      	lsls	r2, r3, #31
 80086fc:	d438      	bmi.n	8008770 <_printf_float+0x39c>
 80086fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008700:	9a05      	ldr	r2, [sp, #20]
 8008702:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008704:	1a9a      	subs	r2, r3, r2
 8008706:	eba3 0901 	sub.w	r9, r3, r1
 800870a:	4591      	cmp	r9, r2
 800870c:	bfa8      	it	ge
 800870e:	4691      	movge	r9, r2
 8008710:	f1b9 0f00 	cmp.w	r9, #0
 8008714:	dc35      	bgt.n	8008782 <_printf_float+0x3ae>
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800871e:	f104 0a1a 	add.w	sl, r4, #26
 8008722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008726:	1a9b      	subs	r3, r3, r2
 8008728:	eba3 0309 	sub.w	r3, r3, r9
 800872c:	4543      	cmp	r3, r8
 800872e:	f77f af79 	ble.w	8008624 <_printf_float+0x250>
 8008732:	2301      	movs	r3, #1
 8008734:	4652      	mov	r2, sl
 8008736:	4631      	mov	r1, r6
 8008738:	4628      	mov	r0, r5
 800873a:	47b8      	blx	r7
 800873c:	3001      	adds	r0, #1
 800873e:	f43f aeaa 	beq.w	8008496 <_printf_float+0xc2>
 8008742:	f108 0801 	add.w	r8, r8, #1
 8008746:	e7ec      	b.n	8008722 <_printf_float+0x34e>
 8008748:	4613      	mov	r3, r2
 800874a:	4631      	mov	r1, r6
 800874c:	4642      	mov	r2, r8
 800874e:	4628      	mov	r0, r5
 8008750:	47b8      	blx	r7
 8008752:	3001      	adds	r0, #1
 8008754:	d1c0      	bne.n	80086d8 <_printf_float+0x304>
 8008756:	e69e      	b.n	8008496 <_printf_float+0xc2>
 8008758:	2301      	movs	r3, #1
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	9205      	str	r2, [sp, #20]
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	f43f ae97 	beq.w	8008496 <_printf_float+0xc2>
 8008768:	9a05      	ldr	r2, [sp, #20]
 800876a:	f10b 0b01 	add.w	fp, fp, #1
 800876e:	e7b9      	b.n	80086e4 <_printf_float+0x310>
 8008770:	ee18 3a10 	vmov	r3, s16
 8008774:	4652      	mov	r2, sl
 8008776:	4631      	mov	r1, r6
 8008778:	4628      	mov	r0, r5
 800877a:	47b8      	blx	r7
 800877c:	3001      	adds	r0, #1
 800877e:	d1be      	bne.n	80086fe <_printf_float+0x32a>
 8008780:	e689      	b.n	8008496 <_printf_float+0xc2>
 8008782:	9a05      	ldr	r2, [sp, #20]
 8008784:	464b      	mov	r3, r9
 8008786:	4442      	add	r2, r8
 8008788:	4631      	mov	r1, r6
 800878a:	4628      	mov	r0, r5
 800878c:	47b8      	blx	r7
 800878e:	3001      	adds	r0, #1
 8008790:	d1c1      	bne.n	8008716 <_printf_float+0x342>
 8008792:	e680      	b.n	8008496 <_printf_float+0xc2>
 8008794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008796:	2a01      	cmp	r2, #1
 8008798:	dc01      	bgt.n	800879e <_printf_float+0x3ca>
 800879a:	07db      	lsls	r3, r3, #31
 800879c:	d538      	bpl.n	8008810 <_printf_float+0x43c>
 800879e:	2301      	movs	r3, #1
 80087a0:	4642      	mov	r2, r8
 80087a2:	4631      	mov	r1, r6
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b8      	blx	r7
 80087a8:	3001      	adds	r0, #1
 80087aa:	f43f ae74 	beq.w	8008496 <_printf_float+0xc2>
 80087ae:	ee18 3a10 	vmov	r3, s16
 80087b2:	4652      	mov	r2, sl
 80087b4:	4631      	mov	r1, r6
 80087b6:	4628      	mov	r0, r5
 80087b8:	47b8      	blx	r7
 80087ba:	3001      	adds	r0, #1
 80087bc:	f43f ae6b 	beq.w	8008496 <_printf_float+0xc2>
 80087c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087c4:	2200      	movs	r2, #0
 80087c6:	2300      	movs	r3, #0
 80087c8:	f7f8 f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80087cc:	b9d8      	cbnz	r0, 8008806 <_printf_float+0x432>
 80087ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d0:	f108 0201 	add.w	r2, r8, #1
 80087d4:	3b01      	subs	r3, #1
 80087d6:	4631      	mov	r1, r6
 80087d8:	4628      	mov	r0, r5
 80087da:	47b8      	blx	r7
 80087dc:	3001      	adds	r0, #1
 80087de:	d10e      	bne.n	80087fe <_printf_float+0x42a>
 80087e0:	e659      	b.n	8008496 <_printf_float+0xc2>
 80087e2:	2301      	movs	r3, #1
 80087e4:	4652      	mov	r2, sl
 80087e6:	4631      	mov	r1, r6
 80087e8:	4628      	mov	r0, r5
 80087ea:	47b8      	blx	r7
 80087ec:	3001      	adds	r0, #1
 80087ee:	f43f ae52 	beq.w	8008496 <_printf_float+0xc2>
 80087f2:	f108 0801 	add.w	r8, r8, #1
 80087f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f8:	3b01      	subs	r3, #1
 80087fa:	4543      	cmp	r3, r8
 80087fc:	dcf1      	bgt.n	80087e2 <_printf_float+0x40e>
 80087fe:	464b      	mov	r3, r9
 8008800:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008804:	e6dc      	b.n	80085c0 <_printf_float+0x1ec>
 8008806:	f04f 0800 	mov.w	r8, #0
 800880a:	f104 0a1a 	add.w	sl, r4, #26
 800880e:	e7f2      	b.n	80087f6 <_printf_float+0x422>
 8008810:	2301      	movs	r3, #1
 8008812:	4642      	mov	r2, r8
 8008814:	e7df      	b.n	80087d6 <_printf_float+0x402>
 8008816:	2301      	movs	r3, #1
 8008818:	464a      	mov	r2, r9
 800881a:	4631      	mov	r1, r6
 800881c:	4628      	mov	r0, r5
 800881e:	47b8      	blx	r7
 8008820:	3001      	adds	r0, #1
 8008822:	f43f ae38 	beq.w	8008496 <_printf_float+0xc2>
 8008826:	f108 0801 	add.w	r8, r8, #1
 800882a:	68e3      	ldr	r3, [r4, #12]
 800882c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800882e:	1a5b      	subs	r3, r3, r1
 8008830:	4543      	cmp	r3, r8
 8008832:	dcf0      	bgt.n	8008816 <_printf_float+0x442>
 8008834:	e6fa      	b.n	800862c <_printf_float+0x258>
 8008836:	f04f 0800 	mov.w	r8, #0
 800883a:	f104 0919 	add.w	r9, r4, #25
 800883e:	e7f4      	b.n	800882a <_printf_float+0x456>

08008840 <_printf_common>:
 8008840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	4616      	mov	r6, r2
 8008846:	4699      	mov	r9, r3
 8008848:	688a      	ldr	r2, [r1, #8]
 800884a:	690b      	ldr	r3, [r1, #16]
 800884c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008850:	4293      	cmp	r3, r2
 8008852:	bfb8      	it	lt
 8008854:	4613      	movlt	r3, r2
 8008856:	6033      	str	r3, [r6, #0]
 8008858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800885c:	4607      	mov	r7, r0
 800885e:	460c      	mov	r4, r1
 8008860:	b10a      	cbz	r2, 8008866 <_printf_common+0x26>
 8008862:	3301      	adds	r3, #1
 8008864:	6033      	str	r3, [r6, #0]
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	0699      	lsls	r1, r3, #26
 800886a:	bf42      	ittt	mi
 800886c:	6833      	ldrmi	r3, [r6, #0]
 800886e:	3302      	addmi	r3, #2
 8008870:	6033      	strmi	r3, [r6, #0]
 8008872:	6825      	ldr	r5, [r4, #0]
 8008874:	f015 0506 	ands.w	r5, r5, #6
 8008878:	d106      	bne.n	8008888 <_printf_common+0x48>
 800887a:	f104 0a19 	add.w	sl, r4, #25
 800887e:	68e3      	ldr	r3, [r4, #12]
 8008880:	6832      	ldr	r2, [r6, #0]
 8008882:	1a9b      	subs	r3, r3, r2
 8008884:	42ab      	cmp	r3, r5
 8008886:	dc26      	bgt.n	80088d6 <_printf_common+0x96>
 8008888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800888c:	1e13      	subs	r3, r2, #0
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	bf18      	it	ne
 8008892:	2301      	movne	r3, #1
 8008894:	0692      	lsls	r2, r2, #26
 8008896:	d42b      	bmi.n	80088f0 <_printf_common+0xb0>
 8008898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800889c:	4649      	mov	r1, r9
 800889e:	4638      	mov	r0, r7
 80088a0:	47c0      	blx	r8
 80088a2:	3001      	adds	r0, #1
 80088a4:	d01e      	beq.n	80088e4 <_printf_common+0xa4>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	68e5      	ldr	r5, [r4, #12]
 80088aa:	6832      	ldr	r2, [r6, #0]
 80088ac:	f003 0306 	and.w	r3, r3, #6
 80088b0:	2b04      	cmp	r3, #4
 80088b2:	bf08      	it	eq
 80088b4:	1aad      	subeq	r5, r5, r2
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	6922      	ldr	r2, [r4, #16]
 80088ba:	bf0c      	ite	eq
 80088bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088c0:	2500      	movne	r5, #0
 80088c2:	4293      	cmp	r3, r2
 80088c4:	bfc4      	itt	gt
 80088c6:	1a9b      	subgt	r3, r3, r2
 80088c8:	18ed      	addgt	r5, r5, r3
 80088ca:	2600      	movs	r6, #0
 80088cc:	341a      	adds	r4, #26
 80088ce:	42b5      	cmp	r5, r6
 80088d0:	d11a      	bne.n	8008908 <_printf_common+0xc8>
 80088d2:	2000      	movs	r0, #0
 80088d4:	e008      	b.n	80088e8 <_printf_common+0xa8>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4652      	mov	r2, sl
 80088da:	4649      	mov	r1, r9
 80088dc:	4638      	mov	r0, r7
 80088de:	47c0      	blx	r8
 80088e0:	3001      	adds	r0, #1
 80088e2:	d103      	bne.n	80088ec <_printf_common+0xac>
 80088e4:	f04f 30ff 	mov.w	r0, #4294967295
 80088e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ec:	3501      	adds	r5, #1
 80088ee:	e7c6      	b.n	800887e <_printf_common+0x3e>
 80088f0:	18e1      	adds	r1, r4, r3
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	2030      	movs	r0, #48	; 0x30
 80088f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088fa:	4422      	add	r2, r4
 80088fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008904:	3302      	adds	r3, #2
 8008906:	e7c7      	b.n	8008898 <_printf_common+0x58>
 8008908:	2301      	movs	r3, #1
 800890a:	4622      	mov	r2, r4
 800890c:	4649      	mov	r1, r9
 800890e:	4638      	mov	r0, r7
 8008910:	47c0      	blx	r8
 8008912:	3001      	adds	r0, #1
 8008914:	d0e6      	beq.n	80088e4 <_printf_common+0xa4>
 8008916:	3601      	adds	r6, #1
 8008918:	e7d9      	b.n	80088ce <_printf_common+0x8e>
	...

0800891c <_printf_i>:
 800891c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008920:	7e0f      	ldrb	r7, [r1, #24]
 8008922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008924:	2f78      	cmp	r7, #120	; 0x78
 8008926:	4691      	mov	r9, r2
 8008928:	4680      	mov	r8, r0
 800892a:	460c      	mov	r4, r1
 800892c:	469a      	mov	sl, r3
 800892e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008932:	d807      	bhi.n	8008944 <_printf_i+0x28>
 8008934:	2f62      	cmp	r7, #98	; 0x62
 8008936:	d80a      	bhi.n	800894e <_printf_i+0x32>
 8008938:	2f00      	cmp	r7, #0
 800893a:	f000 80d8 	beq.w	8008aee <_printf_i+0x1d2>
 800893e:	2f58      	cmp	r7, #88	; 0x58
 8008940:	f000 80a3 	beq.w	8008a8a <_printf_i+0x16e>
 8008944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800894c:	e03a      	b.n	80089c4 <_printf_i+0xa8>
 800894e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008952:	2b15      	cmp	r3, #21
 8008954:	d8f6      	bhi.n	8008944 <_printf_i+0x28>
 8008956:	a101      	add	r1, pc, #4	; (adr r1, 800895c <_printf_i+0x40>)
 8008958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800895c:	080089b5 	.word	0x080089b5
 8008960:	080089c9 	.word	0x080089c9
 8008964:	08008945 	.word	0x08008945
 8008968:	08008945 	.word	0x08008945
 800896c:	08008945 	.word	0x08008945
 8008970:	08008945 	.word	0x08008945
 8008974:	080089c9 	.word	0x080089c9
 8008978:	08008945 	.word	0x08008945
 800897c:	08008945 	.word	0x08008945
 8008980:	08008945 	.word	0x08008945
 8008984:	08008945 	.word	0x08008945
 8008988:	08008ad5 	.word	0x08008ad5
 800898c:	080089f9 	.word	0x080089f9
 8008990:	08008ab7 	.word	0x08008ab7
 8008994:	08008945 	.word	0x08008945
 8008998:	08008945 	.word	0x08008945
 800899c:	08008af7 	.word	0x08008af7
 80089a0:	08008945 	.word	0x08008945
 80089a4:	080089f9 	.word	0x080089f9
 80089a8:	08008945 	.word	0x08008945
 80089ac:	08008945 	.word	0x08008945
 80089b0:	08008abf 	.word	0x08008abf
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	1d1a      	adds	r2, r3, #4
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	602a      	str	r2, [r5, #0]
 80089bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089c4:	2301      	movs	r3, #1
 80089c6:	e0a3      	b.n	8008b10 <_printf_i+0x1f4>
 80089c8:	6820      	ldr	r0, [r4, #0]
 80089ca:	6829      	ldr	r1, [r5, #0]
 80089cc:	0606      	lsls	r6, r0, #24
 80089ce:	f101 0304 	add.w	r3, r1, #4
 80089d2:	d50a      	bpl.n	80089ea <_printf_i+0xce>
 80089d4:	680e      	ldr	r6, [r1, #0]
 80089d6:	602b      	str	r3, [r5, #0]
 80089d8:	2e00      	cmp	r6, #0
 80089da:	da03      	bge.n	80089e4 <_printf_i+0xc8>
 80089dc:	232d      	movs	r3, #45	; 0x2d
 80089de:	4276      	negs	r6, r6
 80089e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089e4:	485e      	ldr	r0, [pc, #376]	; (8008b60 <_printf_i+0x244>)
 80089e6:	230a      	movs	r3, #10
 80089e8:	e019      	b.n	8008a1e <_printf_i+0x102>
 80089ea:	680e      	ldr	r6, [r1, #0]
 80089ec:	602b      	str	r3, [r5, #0]
 80089ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80089f2:	bf18      	it	ne
 80089f4:	b236      	sxthne	r6, r6
 80089f6:	e7ef      	b.n	80089d8 <_printf_i+0xbc>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	6820      	ldr	r0, [r4, #0]
 80089fc:	1d19      	adds	r1, r3, #4
 80089fe:	6029      	str	r1, [r5, #0]
 8008a00:	0601      	lsls	r1, r0, #24
 8008a02:	d501      	bpl.n	8008a08 <_printf_i+0xec>
 8008a04:	681e      	ldr	r6, [r3, #0]
 8008a06:	e002      	b.n	8008a0e <_printf_i+0xf2>
 8008a08:	0646      	lsls	r6, r0, #25
 8008a0a:	d5fb      	bpl.n	8008a04 <_printf_i+0xe8>
 8008a0c:	881e      	ldrh	r6, [r3, #0]
 8008a0e:	4854      	ldr	r0, [pc, #336]	; (8008b60 <_printf_i+0x244>)
 8008a10:	2f6f      	cmp	r7, #111	; 0x6f
 8008a12:	bf0c      	ite	eq
 8008a14:	2308      	moveq	r3, #8
 8008a16:	230a      	movne	r3, #10
 8008a18:	2100      	movs	r1, #0
 8008a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a1e:	6865      	ldr	r5, [r4, #4]
 8008a20:	60a5      	str	r5, [r4, #8]
 8008a22:	2d00      	cmp	r5, #0
 8008a24:	bfa2      	ittt	ge
 8008a26:	6821      	ldrge	r1, [r4, #0]
 8008a28:	f021 0104 	bicge.w	r1, r1, #4
 8008a2c:	6021      	strge	r1, [r4, #0]
 8008a2e:	b90e      	cbnz	r6, 8008a34 <_printf_i+0x118>
 8008a30:	2d00      	cmp	r5, #0
 8008a32:	d04d      	beq.n	8008ad0 <_printf_i+0x1b4>
 8008a34:	4615      	mov	r5, r2
 8008a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8008a3e:	5dc7      	ldrb	r7, [r0, r7]
 8008a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a44:	4637      	mov	r7, r6
 8008a46:	42bb      	cmp	r3, r7
 8008a48:	460e      	mov	r6, r1
 8008a4a:	d9f4      	bls.n	8008a36 <_printf_i+0x11a>
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d10b      	bne.n	8008a68 <_printf_i+0x14c>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	07de      	lsls	r6, r3, #31
 8008a54:	d508      	bpl.n	8008a68 <_printf_i+0x14c>
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	6861      	ldr	r1, [r4, #4]
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	bfde      	ittt	le
 8008a5e:	2330      	movle	r3, #48	; 0x30
 8008a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a68:	1b52      	subs	r2, r2, r5
 8008a6a:	6122      	str	r2, [r4, #16]
 8008a6c:	f8cd a000 	str.w	sl, [sp]
 8008a70:	464b      	mov	r3, r9
 8008a72:	aa03      	add	r2, sp, #12
 8008a74:	4621      	mov	r1, r4
 8008a76:	4640      	mov	r0, r8
 8008a78:	f7ff fee2 	bl	8008840 <_printf_common>
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d14c      	bne.n	8008b1a <_printf_i+0x1fe>
 8008a80:	f04f 30ff 	mov.w	r0, #4294967295
 8008a84:	b004      	add	sp, #16
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	4835      	ldr	r0, [pc, #212]	; (8008b60 <_printf_i+0x244>)
 8008a8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a90:	6829      	ldr	r1, [r5, #0]
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a98:	6029      	str	r1, [r5, #0]
 8008a9a:	061d      	lsls	r5, r3, #24
 8008a9c:	d514      	bpl.n	8008ac8 <_printf_i+0x1ac>
 8008a9e:	07df      	lsls	r7, r3, #31
 8008aa0:	bf44      	itt	mi
 8008aa2:	f043 0320 	orrmi.w	r3, r3, #32
 8008aa6:	6023      	strmi	r3, [r4, #0]
 8008aa8:	b91e      	cbnz	r6, 8008ab2 <_printf_i+0x196>
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	f023 0320 	bic.w	r3, r3, #32
 8008ab0:	6023      	str	r3, [r4, #0]
 8008ab2:	2310      	movs	r3, #16
 8008ab4:	e7b0      	b.n	8008a18 <_printf_i+0xfc>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	f043 0320 	orr.w	r3, r3, #32
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	2378      	movs	r3, #120	; 0x78
 8008ac0:	4828      	ldr	r0, [pc, #160]	; (8008b64 <_printf_i+0x248>)
 8008ac2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ac6:	e7e3      	b.n	8008a90 <_printf_i+0x174>
 8008ac8:	0659      	lsls	r1, r3, #25
 8008aca:	bf48      	it	mi
 8008acc:	b2b6      	uxthmi	r6, r6
 8008ace:	e7e6      	b.n	8008a9e <_printf_i+0x182>
 8008ad0:	4615      	mov	r5, r2
 8008ad2:	e7bb      	b.n	8008a4c <_printf_i+0x130>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	6826      	ldr	r6, [r4, #0]
 8008ad8:	6961      	ldr	r1, [r4, #20]
 8008ada:	1d18      	adds	r0, r3, #4
 8008adc:	6028      	str	r0, [r5, #0]
 8008ade:	0635      	lsls	r5, r6, #24
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	d501      	bpl.n	8008ae8 <_printf_i+0x1cc>
 8008ae4:	6019      	str	r1, [r3, #0]
 8008ae6:	e002      	b.n	8008aee <_printf_i+0x1d2>
 8008ae8:	0670      	lsls	r0, r6, #25
 8008aea:	d5fb      	bpl.n	8008ae4 <_printf_i+0x1c8>
 8008aec:	8019      	strh	r1, [r3, #0]
 8008aee:	2300      	movs	r3, #0
 8008af0:	6123      	str	r3, [r4, #16]
 8008af2:	4615      	mov	r5, r2
 8008af4:	e7ba      	b.n	8008a6c <_printf_i+0x150>
 8008af6:	682b      	ldr	r3, [r5, #0]
 8008af8:	1d1a      	adds	r2, r3, #4
 8008afa:	602a      	str	r2, [r5, #0]
 8008afc:	681d      	ldr	r5, [r3, #0]
 8008afe:	6862      	ldr	r2, [r4, #4]
 8008b00:	2100      	movs	r1, #0
 8008b02:	4628      	mov	r0, r5
 8008b04:	f7f7 fb6c 	bl	80001e0 <memchr>
 8008b08:	b108      	cbz	r0, 8008b0e <_printf_i+0x1f2>
 8008b0a:	1b40      	subs	r0, r0, r5
 8008b0c:	6060      	str	r0, [r4, #4]
 8008b0e:	6863      	ldr	r3, [r4, #4]
 8008b10:	6123      	str	r3, [r4, #16]
 8008b12:	2300      	movs	r3, #0
 8008b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b18:	e7a8      	b.n	8008a6c <_printf_i+0x150>
 8008b1a:	6923      	ldr	r3, [r4, #16]
 8008b1c:	462a      	mov	r2, r5
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4640      	mov	r0, r8
 8008b22:	47d0      	blx	sl
 8008b24:	3001      	adds	r0, #1
 8008b26:	d0ab      	beq.n	8008a80 <_printf_i+0x164>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	079b      	lsls	r3, r3, #30
 8008b2c:	d413      	bmi.n	8008b56 <_printf_i+0x23a>
 8008b2e:	68e0      	ldr	r0, [r4, #12]
 8008b30:	9b03      	ldr	r3, [sp, #12]
 8008b32:	4298      	cmp	r0, r3
 8008b34:	bfb8      	it	lt
 8008b36:	4618      	movlt	r0, r3
 8008b38:	e7a4      	b.n	8008a84 <_printf_i+0x168>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	4649      	mov	r1, r9
 8008b40:	4640      	mov	r0, r8
 8008b42:	47d0      	blx	sl
 8008b44:	3001      	adds	r0, #1
 8008b46:	d09b      	beq.n	8008a80 <_printf_i+0x164>
 8008b48:	3501      	adds	r5, #1
 8008b4a:	68e3      	ldr	r3, [r4, #12]
 8008b4c:	9903      	ldr	r1, [sp, #12]
 8008b4e:	1a5b      	subs	r3, r3, r1
 8008b50:	42ab      	cmp	r3, r5
 8008b52:	dcf2      	bgt.n	8008b3a <_printf_i+0x21e>
 8008b54:	e7eb      	b.n	8008b2e <_printf_i+0x212>
 8008b56:	2500      	movs	r5, #0
 8008b58:	f104 0619 	add.w	r6, r4, #25
 8008b5c:	e7f5      	b.n	8008b4a <_printf_i+0x22e>
 8008b5e:	bf00      	nop
 8008b60:	0800b27e 	.word	0x0800b27e
 8008b64:	0800b28f 	.word	0x0800b28f

08008b68 <iprintf>:
 8008b68:	b40f      	push	{r0, r1, r2, r3}
 8008b6a:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <iprintf+0x2c>)
 8008b6c:	b513      	push	{r0, r1, r4, lr}
 8008b6e:	681c      	ldr	r4, [r3, #0]
 8008b70:	b124      	cbz	r4, 8008b7c <iprintf+0x14>
 8008b72:	69a3      	ldr	r3, [r4, #24]
 8008b74:	b913      	cbnz	r3, 8008b7c <iprintf+0x14>
 8008b76:	4620      	mov	r0, r4
 8008b78:	f001 f8da 	bl	8009d30 <__sinit>
 8008b7c:	ab05      	add	r3, sp, #20
 8008b7e:	9a04      	ldr	r2, [sp, #16]
 8008b80:	68a1      	ldr	r1, [r4, #8]
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	4620      	mov	r0, r4
 8008b86:	f001 fe89 	bl	800a89c <_vfiprintf_r>
 8008b8a:	b002      	add	sp, #8
 8008b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b90:	b004      	add	sp, #16
 8008b92:	4770      	bx	lr
 8008b94:	20000010 	.word	0x20000010

08008b98 <_puts_r>:
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	460e      	mov	r6, r1
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	b118      	cbz	r0, 8008ba8 <_puts_r+0x10>
 8008ba0:	6983      	ldr	r3, [r0, #24]
 8008ba2:	b90b      	cbnz	r3, 8008ba8 <_puts_r+0x10>
 8008ba4:	f001 f8c4 	bl	8009d30 <__sinit>
 8008ba8:	69ab      	ldr	r3, [r5, #24]
 8008baa:	68ac      	ldr	r4, [r5, #8]
 8008bac:	b913      	cbnz	r3, 8008bb4 <_puts_r+0x1c>
 8008bae:	4628      	mov	r0, r5
 8008bb0:	f001 f8be 	bl	8009d30 <__sinit>
 8008bb4:	4b2c      	ldr	r3, [pc, #176]	; (8008c68 <_puts_r+0xd0>)
 8008bb6:	429c      	cmp	r4, r3
 8008bb8:	d120      	bne.n	8008bfc <_puts_r+0x64>
 8008bba:	686c      	ldr	r4, [r5, #4]
 8008bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bbe:	07db      	lsls	r3, r3, #31
 8008bc0:	d405      	bmi.n	8008bce <_puts_r+0x36>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	0598      	lsls	r0, r3, #22
 8008bc6:	d402      	bmi.n	8008bce <_puts_r+0x36>
 8008bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bca:	f001 f954 	bl	8009e76 <__retarget_lock_acquire_recursive>
 8008bce:	89a3      	ldrh	r3, [r4, #12]
 8008bd0:	0719      	lsls	r1, r3, #28
 8008bd2:	d51d      	bpl.n	8008c10 <_puts_r+0x78>
 8008bd4:	6923      	ldr	r3, [r4, #16]
 8008bd6:	b1db      	cbz	r3, 8008c10 <_puts_r+0x78>
 8008bd8:	3e01      	subs	r6, #1
 8008bda:	68a3      	ldr	r3, [r4, #8]
 8008bdc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008be0:	3b01      	subs	r3, #1
 8008be2:	60a3      	str	r3, [r4, #8]
 8008be4:	bb39      	cbnz	r1, 8008c36 <_puts_r+0x9e>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	da38      	bge.n	8008c5c <_puts_r+0xc4>
 8008bea:	4622      	mov	r2, r4
 8008bec:	210a      	movs	r1, #10
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f000 f848 	bl	8008c84 <__swbuf_r>
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d011      	beq.n	8008c1c <_puts_r+0x84>
 8008bf8:	250a      	movs	r5, #10
 8008bfa:	e011      	b.n	8008c20 <_puts_r+0x88>
 8008bfc:	4b1b      	ldr	r3, [pc, #108]	; (8008c6c <_puts_r+0xd4>)
 8008bfe:	429c      	cmp	r4, r3
 8008c00:	d101      	bne.n	8008c06 <_puts_r+0x6e>
 8008c02:	68ac      	ldr	r4, [r5, #8]
 8008c04:	e7da      	b.n	8008bbc <_puts_r+0x24>
 8008c06:	4b1a      	ldr	r3, [pc, #104]	; (8008c70 <_puts_r+0xd8>)
 8008c08:	429c      	cmp	r4, r3
 8008c0a:	bf08      	it	eq
 8008c0c:	68ec      	ldreq	r4, [r5, #12]
 8008c0e:	e7d5      	b.n	8008bbc <_puts_r+0x24>
 8008c10:	4621      	mov	r1, r4
 8008c12:	4628      	mov	r0, r5
 8008c14:	f000 f888 	bl	8008d28 <__swsetup_r>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d0dd      	beq.n	8008bd8 <_puts_r+0x40>
 8008c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8008c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c22:	07da      	lsls	r2, r3, #31
 8008c24:	d405      	bmi.n	8008c32 <_puts_r+0x9a>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	059b      	lsls	r3, r3, #22
 8008c2a:	d402      	bmi.n	8008c32 <_puts_r+0x9a>
 8008c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c2e:	f001 f923 	bl	8009e78 <__retarget_lock_release_recursive>
 8008c32:	4628      	mov	r0, r5
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da04      	bge.n	8008c44 <_puts_r+0xac>
 8008c3a:	69a2      	ldr	r2, [r4, #24]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	dc06      	bgt.n	8008c4e <_puts_r+0xb6>
 8008c40:	290a      	cmp	r1, #10
 8008c42:	d004      	beq.n	8008c4e <_puts_r+0xb6>
 8008c44:	6823      	ldr	r3, [r4, #0]
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	6022      	str	r2, [r4, #0]
 8008c4a:	7019      	strb	r1, [r3, #0]
 8008c4c:	e7c5      	b.n	8008bda <_puts_r+0x42>
 8008c4e:	4622      	mov	r2, r4
 8008c50:	4628      	mov	r0, r5
 8008c52:	f000 f817 	bl	8008c84 <__swbuf_r>
 8008c56:	3001      	adds	r0, #1
 8008c58:	d1bf      	bne.n	8008bda <_puts_r+0x42>
 8008c5a:	e7df      	b.n	8008c1c <_puts_r+0x84>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	250a      	movs	r5, #10
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	6022      	str	r2, [r4, #0]
 8008c64:	701d      	strb	r5, [r3, #0]
 8008c66:	e7db      	b.n	8008c20 <_puts_r+0x88>
 8008c68:	0800b350 	.word	0x0800b350
 8008c6c:	0800b370 	.word	0x0800b370
 8008c70:	0800b330 	.word	0x0800b330

08008c74 <puts>:
 8008c74:	4b02      	ldr	r3, [pc, #8]	; (8008c80 <puts+0xc>)
 8008c76:	4601      	mov	r1, r0
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	f7ff bf8d 	b.w	8008b98 <_puts_r>
 8008c7e:	bf00      	nop
 8008c80:	20000010 	.word	0x20000010

08008c84 <__swbuf_r>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	460e      	mov	r6, r1
 8008c88:	4614      	mov	r4, r2
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	b118      	cbz	r0, 8008c96 <__swbuf_r+0x12>
 8008c8e:	6983      	ldr	r3, [r0, #24]
 8008c90:	b90b      	cbnz	r3, 8008c96 <__swbuf_r+0x12>
 8008c92:	f001 f84d 	bl	8009d30 <__sinit>
 8008c96:	4b21      	ldr	r3, [pc, #132]	; (8008d1c <__swbuf_r+0x98>)
 8008c98:	429c      	cmp	r4, r3
 8008c9a:	d12b      	bne.n	8008cf4 <__swbuf_r+0x70>
 8008c9c:	686c      	ldr	r4, [r5, #4]
 8008c9e:	69a3      	ldr	r3, [r4, #24]
 8008ca0:	60a3      	str	r3, [r4, #8]
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	071a      	lsls	r2, r3, #28
 8008ca6:	d52f      	bpl.n	8008d08 <__swbuf_r+0x84>
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	b36b      	cbz	r3, 8008d08 <__swbuf_r+0x84>
 8008cac:	6923      	ldr	r3, [r4, #16]
 8008cae:	6820      	ldr	r0, [r4, #0]
 8008cb0:	1ac0      	subs	r0, r0, r3
 8008cb2:	6963      	ldr	r3, [r4, #20]
 8008cb4:	b2f6      	uxtb	r6, r6
 8008cb6:	4283      	cmp	r3, r0
 8008cb8:	4637      	mov	r7, r6
 8008cba:	dc04      	bgt.n	8008cc6 <__swbuf_r+0x42>
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f000 ffa2 	bl	8009c08 <_fflush_r>
 8008cc4:	bb30      	cbnz	r0, 8008d14 <__swbuf_r+0x90>
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	3b01      	subs	r3, #1
 8008cca:	60a3      	str	r3, [r4, #8]
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	1c5a      	adds	r2, r3, #1
 8008cd0:	6022      	str	r2, [r4, #0]
 8008cd2:	701e      	strb	r6, [r3, #0]
 8008cd4:	6963      	ldr	r3, [r4, #20]
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	4283      	cmp	r3, r0
 8008cda:	d004      	beq.n	8008ce6 <__swbuf_r+0x62>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	07db      	lsls	r3, r3, #31
 8008ce0:	d506      	bpl.n	8008cf0 <__swbuf_r+0x6c>
 8008ce2:	2e0a      	cmp	r6, #10
 8008ce4:	d104      	bne.n	8008cf0 <__swbuf_r+0x6c>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4628      	mov	r0, r5
 8008cea:	f000 ff8d 	bl	8009c08 <_fflush_r>
 8008cee:	b988      	cbnz	r0, 8008d14 <__swbuf_r+0x90>
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf4:	4b0a      	ldr	r3, [pc, #40]	; (8008d20 <__swbuf_r+0x9c>)
 8008cf6:	429c      	cmp	r4, r3
 8008cf8:	d101      	bne.n	8008cfe <__swbuf_r+0x7a>
 8008cfa:	68ac      	ldr	r4, [r5, #8]
 8008cfc:	e7cf      	b.n	8008c9e <__swbuf_r+0x1a>
 8008cfe:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <__swbuf_r+0xa0>)
 8008d00:	429c      	cmp	r4, r3
 8008d02:	bf08      	it	eq
 8008d04:	68ec      	ldreq	r4, [r5, #12]
 8008d06:	e7ca      	b.n	8008c9e <__swbuf_r+0x1a>
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f000 f80c 	bl	8008d28 <__swsetup_r>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d0cb      	beq.n	8008cac <__swbuf_r+0x28>
 8008d14:	f04f 37ff 	mov.w	r7, #4294967295
 8008d18:	e7ea      	b.n	8008cf0 <__swbuf_r+0x6c>
 8008d1a:	bf00      	nop
 8008d1c:	0800b350 	.word	0x0800b350
 8008d20:	0800b370 	.word	0x0800b370
 8008d24:	0800b330 	.word	0x0800b330

08008d28 <__swsetup_r>:
 8008d28:	4b32      	ldr	r3, [pc, #200]	; (8008df4 <__swsetup_r+0xcc>)
 8008d2a:	b570      	push	{r4, r5, r6, lr}
 8008d2c:	681d      	ldr	r5, [r3, #0]
 8008d2e:	4606      	mov	r6, r0
 8008d30:	460c      	mov	r4, r1
 8008d32:	b125      	cbz	r5, 8008d3e <__swsetup_r+0x16>
 8008d34:	69ab      	ldr	r3, [r5, #24]
 8008d36:	b913      	cbnz	r3, 8008d3e <__swsetup_r+0x16>
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 fff9 	bl	8009d30 <__sinit>
 8008d3e:	4b2e      	ldr	r3, [pc, #184]	; (8008df8 <__swsetup_r+0xd0>)
 8008d40:	429c      	cmp	r4, r3
 8008d42:	d10f      	bne.n	8008d64 <__swsetup_r+0x3c>
 8008d44:	686c      	ldr	r4, [r5, #4]
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d4c:	0719      	lsls	r1, r3, #28
 8008d4e:	d42c      	bmi.n	8008daa <__swsetup_r+0x82>
 8008d50:	06dd      	lsls	r5, r3, #27
 8008d52:	d411      	bmi.n	8008d78 <__swsetup_r+0x50>
 8008d54:	2309      	movs	r3, #9
 8008d56:	6033      	str	r3, [r6, #0]
 8008d58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d62:	e03e      	b.n	8008de2 <__swsetup_r+0xba>
 8008d64:	4b25      	ldr	r3, [pc, #148]	; (8008dfc <__swsetup_r+0xd4>)
 8008d66:	429c      	cmp	r4, r3
 8008d68:	d101      	bne.n	8008d6e <__swsetup_r+0x46>
 8008d6a:	68ac      	ldr	r4, [r5, #8]
 8008d6c:	e7eb      	b.n	8008d46 <__swsetup_r+0x1e>
 8008d6e:	4b24      	ldr	r3, [pc, #144]	; (8008e00 <__swsetup_r+0xd8>)
 8008d70:	429c      	cmp	r4, r3
 8008d72:	bf08      	it	eq
 8008d74:	68ec      	ldreq	r4, [r5, #12]
 8008d76:	e7e6      	b.n	8008d46 <__swsetup_r+0x1e>
 8008d78:	0758      	lsls	r0, r3, #29
 8008d7a:	d512      	bpl.n	8008da2 <__swsetup_r+0x7a>
 8008d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d7e:	b141      	cbz	r1, 8008d92 <__swsetup_r+0x6a>
 8008d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d84:	4299      	cmp	r1, r3
 8008d86:	d002      	beq.n	8008d8e <__swsetup_r+0x66>
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f001 fc7d 	bl	800a688 <_free_r>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	6363      	str	r3, [r4, #52]	; 0x34
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d98:	81a3      	strh	r3, [r4, #12]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	6063      	str	r3, [r4, #4]
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	f043 0308 	orr.w	r3, r3, #8
 8008da8:	81a3      	strh	r3, [r4, #12]
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	b94b      	cbnz	r3, 8008dc2 <__swsetup_r+0x9a>
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008db8:	d003      	beq.n	8008dc2 <__swsetup_r+0x9a>
 8008dba:	4621      	mov	r1, r4
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	f001 f881 	bl	8009ec4 <__smakebuf_r>
 8008dc2:	89a0      	ldrh	r0, [r4, #12]
 8008dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dc8:	f010 0301 	ands.w	r3, r0, #1
 8008dcc:	d00a      	beq.n	8008de4 <__swsetup_r+0xbc>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60a3      	str	r3, [r4, #8]
 8008dd2:	6963      	ldr	r3, [r4, #20]
 8008dd4:	425b      	negs	r3, r3
 8008dd6:	61a3      	str	r3, [r4, #24]
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	b943      	cbnz	r3, 8008dee <__swsetup_r+0xc6>
 8008ddc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008de0:	d1ba      	bne.n	8008d58 <__swsetup_r+0x30>
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
 8008de4:	0781      	lsls	r1, r0, #30
 8008de6:	bf58      	it	pl
 8008de8:	6963      	ldrpl	r3, [r4, #20]
 8008dea:	60a3      	str	r3, [r4, #8]
 8008dec:	e7f4      	b.n	8008dd8 <__swsetup_r+0xb0>
 8008dee:	2000      	movs	r0, #0
 8008df0:	e7f7      	b.n	8008de2 <__swsetup_r+0xba>
 8008df2:	bf00      	nop
 8008df4:	20000010 	.word	0x20000010
 8008df8:	0800b350 	.word	0x0800b350
 8008dfc:	0800b370 	.word	0x0800b370
 8008e00:	0800b330 	.word	0x0800b330

08008e04 <quorem>:
 8008e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e08:	6903      	ldr	r3, [r0, #16]
 8008e0a:	690c      	ldr	r4, [r1, #16]
 8008e0c:	42a3      	cmp	r3, r4
 8008e0e:	4607      	mov	r7, r0
 8008e10:	f2c0 8081 	blt.w	8008f16 <quorem+0x112>
 8008e14:	3c01      	subs	r4, #1
 8008e16:	f101 0814 	add.w	r8, r1, #20
 8008e1a:	f100 0514 	add.w	r5, r0, #20
 8008e1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e22:	9301      	str	r3, [sp, #4]
 8008e24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e38:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e3c:	d331      	bcc.n	8008ea2 <quorem+0x9e>
 8008e3e:	f04f 0e00 	mov.w	lr, #0
 8008e42:	4640      	mov	r0, r8
 8008e44:	46ac      	mov	ip, r5
 8008e46:	46f2      	mov	sl, lr
 8008e48:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e4c:	b293      	uxth	r3, r2
 8008e4e:	fb06 e303 	mla	r3, r6, r3, lr
 8008e52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	ebaa 0303 	sub.w	r3, sl, r3
 8008e5c:	f8dc a000 	ldr.w	sl, [ip]
 8008e60:	0c12      	lsrs	r2, r2, #16
 8008e62:	fa13 f38a 	uxtah	r3, r3, sl
 8008e66:	fb06 e202 	mla	r2, r6, r2, lr
 8008e6a:	9300      	str	r3, [sp, #0]
 8008e6c:	9b00      	ldr	r3, [sp, #0]
 8008e6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e72:	b292      	uxth	r2, r2
 8008e74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e7c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e80:	4581      	cmp	r9, r0
 8008e82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e86:	f84c 3b04 	str.w	r3, [ip], #4
 8008e8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e8e:	d2db      	bcs.n	8008e48 <quorem+0x44>
 8008e90:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e94:	b92b      	cbnz	r3, 8008ea2 <quorem+0x9e>
 8008e96:	9b01      	ldr	r3, [sp, #4]
 8008e98:	3b04      	subs	r3, #4
 8008e9a:	429d      	cmp	r5, r3
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	d32e      	bcc.n	8008efe <quorem+0xfa>
 8008ea0:	613c      	str	r4, [r7, #16]
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	f001 fad8 	bl	800a458 <__mcmp>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	db24      	blt.n	8008ef6 <quorem+0xf2>
 8008eac:	3601      	adds	r6, #1
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f04f 0c00 	mov.w	ip, #0
 8008eb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008eb8:	f8d0 e000 	ldr.w	lr, [r0]
 8008ebc:	b293      	uxth	r3, r2
 8008ebe:	ebac 0303 	sub.w	r3, ip, r3
 8008ec2:	0c12      	lsrs	r2, r2, #16
 8008ec4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ec8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed6:	45c1      	cmp	r9, r8
 8008ed8:	f840 3b04 	str.w	r3, [r0], #4
 8008edc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ee0:	d2e8      	bcs.n	8008eb4 <quorem+0xb0>
 8008ee2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eea:	b922      	cbnz	r2, 8008ef6 <quorem+0xf2>
 8008eec:	3b04      	subs	r3, #4
 8008eee:	429d      	cmp	r5, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	d30a      	bcc.n	8008f0a <quorem+0x106>
 8008ef4:	613c      	str	r4, [r7, #16]
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	b003      	add	sp, #12
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	6812      	ldr	r2, [r2, #0]
 8008f00:	3b04      	subs	r3, #4
 8008f02:	2a00      	cmp	r2, #0
 8008f04:	d1cc      	bne.n	8008ea0 <quorem+0x9c>
 8008f06:	3c01      	subs	r4, #1
 8008f08:	e7c7      	b.n	8008e9a <quorem+0x96>
 8008f0a:	6812      	ldr	r2, [r2, #0]
 8008f0c:	3b04      	subs	r3, #4
 8008f0e:	2a00      	cmp	r2, #0
 8008f10:	d1f0      	bne.n	8008ef4 <quorem+0xf0>
 8008f12:	3c01      	subs	r4, #1
 8008f14:	e7eb      	b.n	8008eee <quorem+0xea>
 8008f16:	2000      	movs	r0, #0
 8008f18:	e7ee      	b.n	8008ef8 <quorem+0xf4>
 8008f1a:	0000      	movs	r0, r0
 8008f1c:	0000      	movs	r0, r0
	...

08008f20 <_dtoa_r>:
 8008f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f24:	ed2d 8b04 	vpush	{d8-d9}
 8008f28:	ec57 6b10 	vmov	r6, r7, d0
 8008f2c:	b093      	sub	sp, #76	; 0x4c
 8008f2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f34:	9106      	str	r1, [sp, #24]
 8008f36:	ee10 aa10 	vmov	sl, s0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3e:	930c      	str	r3, [sp, #48]	; 0x30
 8008f40:	46bb      	mov	fp, r7
 8008f42:	b975      	cbnz	r5, 8008f62 <_dtoa_r+0x42>
 8008f44:	2010      	movs	r0, #16
 8008f46:	f000 fffd 	bl	8009f44 <malloc>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f4e:	b920      	cbnz	r0, 8008f5a <_dtoa_r+0x3a>
 8008f50:	4ba7      	ldr	r3, [pc, #668]	; (80091f0 <_dtoa_r+0x2d0>)
 8008f52:	21ea      	movs	r1, #234	; 0xea
 8008f54:	48a7      	ldr	r0, [pc, #668]	; (80091f4 <_dtoa_r+0x2d4>)
 8008f56:	f001 fe37 	bl	800abc8 <__assert_func>
 8008f5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f5e:	6005      	str	r5, [r0, #0]
 8008f60:	60c5      	str	r5, [r0, #12]
 8008f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f64:	6819      	ldr	r1, [r3, #0]
 8008f66:	b151      	cbz	r1, 8008f7e <_dtoa_r+0x5e>
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	604a      	str	r2, [r1, #4]
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	4093      	lsls	r3, r2
 8008f70:	608b      	str	r3, [r1, #8]
 8008f72:	4620      	mov	r0, r4
 8008f74:	f001 f82e 	bl	8009fd4 <_Bfree>
 8008f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	1e3b      	subs	r3, r7, #0
 8008f80:	bfaa      	itet	ge
 8008f82:	2300      	movge	r3, #0
 8008f84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008f88:	f8c8 3000 	strge.w	r3, [r8]
 8008f8c:	4b9a      	ldr	r3, [pc, #616]	; (80091f8 <_dtoa_r+0x2d8>)
 8008f8e:	bfbc      	itt	lt
 8008f90:	2201      	movlt	r2, #1
 8008f92:	f8c8 2000 	strlt.w	r2, [r8]
 8008f96:	ea33 030b 	bics.w	r3, r3, fp
 8008f9a:	d11b      	bne.n	8008fd4 <_dtoa_r+0xb4>
 8008f9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fa8:	4333      	orrs	r3, r6
 8008faa:	f000 8592 	beq.w	8009ad2 <_dtoa_r+0xbb2>
 8008fae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fb0:	b963      	cbnz	r3, 8008fcc <_dtoa_r+0xac>
 8008fb2:	4b92      	ldr	r3, [pc, #584]	; (80091fc <_dtoa_r+0x2dc>)
 8008fb4:	e022      	b.n	8008ffc <_dtoa_r+0xdc>
 8008fb6:	4b92      	ldr	r3, [pc, #584]	; (8009200 <_dtoa_r+0x2e0>)
 8008fb8:	9301      	str	r3, [sp, #4]
 8008fba:	3308      	adds	r3, #8
 8008fbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	9801      	ldr	r0, [sp, #4]
 8008fc2:	b013      	add	sp, #76	; 0x4c
 8008fc4:	ecbd 8b04 	vpop	{d8-d9}
 8008fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fcc:	4b8b      	ldr	r3, [pc, #556]	; (80091fc <_dtoa_r+0x2dc>)
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	3303      	adds	r3, #3
 8008fd2:	e7f3      	b.n	8008fbc <_dtoa_r+0x9c>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	4650      	mov	r0, sl
 8008fda:	4659      	mov	r1, fp
 8008fdc:	f7f7 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fe0:	ec4b ab19 	vmov	d9, sl, fp
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	b158      	cbz	r0, 8009000 <_dtoa_r+0xe0>
 8008fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fea:	2301      	movs	r3, #1
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 856b 	beq.w	8009acc <_dtoa_r+0xbac>
 8008ff6:	4883      	ldr	r0, [pc, #524]	; (8009204 <_dtoa_r+0x2e4>)
 8008ff8:	6018      	str	r0, [r3, #0]
 8008ffa:	1e43      	subs	r3, r0, #1
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	e7df      	b.n	8008fc0 <_dtoa_r+0xa0>
 8009000:	ec4b ab10 	vmov	d0, sl, fp
 8009004:	aa10      	add	r2, sp, #64	; 0x40
 8009006:	a911      	add	r1, sp, #68	; 0x44
 8009008:	4620      	mov	r0, r4
 800900a:	f001 facb 	bl	800a5a4 <__d2b>
 800900e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009012:	ee08 0a10 	vmov	s16, r0
 8009016:	2d00      	cmp	r5, #0
 8009018:	f000 8084 	beq.w	8009124 <_dtoa_r+0x204>
 800901c:	ee19 3a90 	vmov	r3, s19
 8009020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009024:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009028:	4656      	mov	r6, sl
 800902a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800902e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009032:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009036:	4b74      	ldr	r3, [pc, #464]	; (8009208 <_dtoa_r+0x2e8>)
 8009038:	2200      	movs	r2, #0
 800903a:	4630      	mov	r0, r6
 800903c:	4639      	mov	r1, r7
 800903e:	f7f7 f923 	bl	8000288 <__aeabi_dsub>
 8009042:	a365      	add	r3, pc, #404	; (adr r3, 80091d8 <_dtoa_r+0x2b8>)
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f7f7 fad6 	bl	80005f8 <__aeabi_dmul>
 800904c:	a364      	add	r3, pc, #400	; (adr r3, 80091e0 <_dtoa_r+0x2c0>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f7f7 f91b 	bl	800028c <__adddf3>
 8009056:	4606      	mov	r6, r0
 8009058:	4628      	mov	r0, r5
 800905a:	460f      	mov	r7, r1
 800905c:	f7f7 fa62 	bl	8000524 <__aeabi_i2d>
 8009060:	a361      	add	r3, pc, #388	; (adr r3, 80091e8 <_dtoa_r+0x2c8>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	f7f7 fac7 	bl	80005f8 <__aeabi_dmul>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4630      	mov	r0, r6
 8009070:	4639      	mov	r1, r7
 8009072:	f7f7 f90b 	bl	800028c <__adddf3>
 8009076:	4606      	mov	r6, r0
 8009078:	460f      	mov	r7, r1
 800907a:	f7f7 fd6d 	bl	8000b58 <__aeabi_d2iz>
 800907e:	2200      	movs	r2, #0
 8009080:	9000      	str	r0, [sp, #0]
 8009082:	2300      	movs	r3, #0
 8009084:	4630      	mov	r0, r6
 8009086:	4639      	mov	r1, r7
 8009088:	f7f7 fd28 	bl	8000adc <__aeabi_dcmplt>
 800908c:	b150      	cbz	r0, 80090a4 <_dtoa_r+0x184>
 800908e:	9800      	ldr	r0, [sp, #0]
 8009090:	f7f7 fa48 	bl	8000524 <__aeabi_i2d>
 8009094:	4632      	mov	r2, r6
 8009096:	463b      	mov	r3, r7
 8009098:	f7f7 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800909c:	b910      	cbnz	r0, 80090a4 <_dtoa_r+0x184>
 800909e:	9b00      	ldr	r3, [sp, #0]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	2b16      	cmp	r3, #22
 80090a8:	d85a      	bhi.n	8009160 <_dtoa_r+0x240>
 80090aa:	9a00      	ldr	r2, [sp, #0]
 80090ac:	4b57      	ldr	r3, [pc, #348]	; (800920c <_dtoa_r+0x2ec>)
 80090ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	ec51 0b19 	vmov	r0, r1, d9
 80090ba:	f7f7 fd0f 	bl	8000adc <__aeabi_dcmplt>
 80090be:	2800      	cmp	r0, #0
 80090c0:	d050      	beq.n	8009164 <_dtoa_r+0x244>
 80090c2:	9b00      	ldr	r3, [sp, #0]
 80090c4:	3b01      	subs	r3, #1
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	2300      	movs	r3, #0
 80090ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80090cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090ce:	1b5d      	subs	r5, r3, r5
 80090d0:	1e6b      	subs	r3, r5, #1
 80090d2:	9305      	str	r3, [sp, #20]
 80090d4:	bf45      	ittet	mi
 80090d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80090da:	9304      	strmi	r3, [sp, #16]
 80090dc:	2300      	movpl	r3, #0
 80090de:	2300      	movmi	r3, #0
 80090e0:	bf4c      	ite	mi
 80090e2:	9305      	strmi	r3, [sp, #20]
 80090e4:	9304      	strpl	r3, [sp, #16]
 80090e6:	9b00      	ldr	r3, [sp, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	db3d      	blt.n	8009168 <_dtoa_r+0x248>
 80090ec:	9b05      	ldr	r3, [sp, #20]
 80090ee:	9a00      	ldr	r2, [sp, #0]
 80090f0:	920a      	str	r2, [sp, #40]	; 0x28
 80090f2:	4413      	add	r3, r2
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	2300      	movs	r3, #0
 80090f8:	9307      	str	r3, [sp, #28]
 80090fa:	9b06      	ldr	r3, [sp, #24]
 80090fc:	2b09      	cmp	r3, #9
 80090fe:	f200 8089 	bhi.w	8009214 <_dtoa_r+0x2f4>
 8009102:	2b05      	cmp	r3, #5
 8009104:	bfc4      	itt	gt
 8009106:	3b04      	subgt	r3, #4
 8009108:	9306      	strgt	r3, [sp, #24]
 800910a:	9b06      	ldr	r3, [sp, #24]
 800910c:	f1a3 0302 	sub.w	r3, r3, #2
 8009110:	bfcc      	ite	gt
 8009112:	2500      	movgt	r5, #0
 8009114:	2501      	movle	r5, #1
 8009116:	2b03      	cmp	r3, #3
 8009118:	f200 8087 	bhi.w	800922a <_dtoa_r+0x30a>
 800911c:	e8df f003 	tbb	[pc, r3]
 8009120:	59383a2d 	.word	0x59383a2d
 8009124:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009128:	441d      	add	r5, r3
 800912a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800912e:	2b20      	cmp	r3, #32
 8009130:	bfc1      	itttt	gt
 8009132:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009136:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800913a:	fa0b f303 	lslgt.w	r3, fp, r3
 800913e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009142:	bfda      	itte	le
 8009144:	f1c3 0320 	rsble	r3, r3, #32
 8009148:	fa06 f003 	lslle.w	r0, r6, r3
 800914c:	4318      	orrgt	r0, r3
 800914e:	f7f7 f9d9 	bl	8000504 <__aeabi_ui2d>
 8009152:	2301      	movs	r3, #1
 8009154:	4606      	mov	r6, r0
 8009156:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800915a:	3d01      	subs	r5, #1
 800915c:	930e      	str	r3, [sp, #56]	; 0x38
 800915e:	e76a      	b.n	8009036 <_dtoa_r+0x116>
 8009160:	2301      	movs	r3, #1
 8009162:	e7b2      	b.n	80090ca <_dtoa_r+0x1aa>
 8009164:	900b      	str	r0, [sp, #44]	; 0x2c
 8009166:	e7b1      	b.n	80090cc <_dtoa_r+0x1ac>
 8009168:	9b04      	ldr	r3, [sp, #16]
 800916a:	9a00      	ldr	r2, [sp, #0]
 800916c:	1a9b      	subs	r3, r3, r2
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	4253      	negs	r3, r2
 8009172:	9307      	str	r3, [sp, #28]
 8009174:	2300      	movs	r3, #0
 8009176:	930a      	str	r3, [sp, #40]	; 0x28
 8009178:	e7bf      	b.n	80090fa <_dtoa_r+0x1da>
 800917a:	2300      	movs	r3, #0
 800917c:	9308      	str	r3, [sp, #32]
 800917e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009180:	2b00      	cmp	r3, #0
 8009182:	dc55      	bgt.n	8009230 <_dtoa_r+0x310>
 8009184:	2301      	movs	r3, #1
 8009186:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800918a:	461a      	mov	r2, r3
 800918c:	9209      	str	r2, [sp, #36]	; 0x24
 800918e:	e00c      	b.n	80091aa <_dtoa_r+0x28a>
 8009190:	2301      	movs	r3, #1
 8009192:	e7f3      	b.n	800917c <_dtoa_r+0x25c>
 8009194:	2300      	movs	r3, #0
 8009196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009198:	9308      	str	r3, [sp, #32]
 800919a:	9b00      	ldr	r3, [sp, #0]
 800919c:	4413      	add	r3, r2
 800919e:	9302      	str	r3, [sp, #8]
 80091a0:	3301      	adds	r3, #1
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	9303      	str	r3, [sp, #12]
 80091a6:	bfb8      	it	lt
 80091a8:	2301      	movlt	r3, #1
 80091aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091ac:	2200      	movs	r2, #0
 80091ae:	6042      	str	r2, [r0, #4]
 80091b0:	2204      	movs	r2, #4
 80091b2:	f102 0614 	add.w	r6, r2, #20
 80091b6:	429e      	cmp	r6, r3
 80091b8:	6841      	ldr	r1, [r0, #4]
 80091ba:	d93d      	bls.n	8009238 <_dtoa_r+0x318>
 80091bc:	4620      	mov	r0, r4
 80091be:	f000 fec9 	bl	8009f54 <_Balloc>
 80091c2:	9001      	str	r0, [sp, #4]
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d13b      	bne.n	8009240 <_dtoa_r+0x320>
 80091c8:	4b11      	ldr	r3, [pc, #68]	; (8009210 <_dtoa_r+0x2f0>)
 80091ca:	4602      	mov	r2, r0
 80091cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80091d0:	e6c0      	b.n	8008f54 <_dtoa_r+0x34>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e7df      	b.n	8009196 <_dtoa_r+0x276>
 80091d6:	bf00      	nop
 80091d8:	636f4361 	.word	0x636f4361
 80091dc:	3fd287a7 	.word	0x3fd287a7
 80091e0:	8b60c8b3 	.word	0x8b60c8b3
 80091e4:	3fc68a28 	.word	0x3fc68a28
 80091e8:	509f79fb 	.word	0x509f79fb
 80091ec:	3fd34413 	.word	0x3fd34413
 80091f0:	0800b2ad 	.word	0x0800b2ad
 80091f4:	0800b2c4 	.word	0x0800b2c4
 80091f8:	7ff00000 	.word	0x7ff00000
 80091fc:	0800b2a9 	.word	0x0800b2a9
 8009200:	0800b2a0 	.word	0x0800b2a0
 8009204:	0800b27d 	.word	0x0800b27d
 8009208:	3ff80000 	.word	0x3ff80000
 800920c:	0800b418 	.word	0x0800b418
 8009210:	0800b31f 	.word	0x0800b31f
 8009214:	2501      	movs	r5, #1
 8009216:	2300      	movs	r3, #0
 8009218:	9306      	str	r3, [sp, #24]
 800921a:	9508      	str	r5, [sp, #32]
 800921c:	f04f 33ff 	mov.w	r3, #4294967295
 8009220:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009224:	2200      	movs	r2, #0
 8009226:	2312      	movs	r3, #18
 8009228:	e7b0      	b.n	800918c <_dtoa_r+0x26c>
 800922a:	2301      	movs	r3, #1
 800922c:	9308      	str	r3, [sp, #32]
 800922e:	e7f5      	b.n	800921c <_dtoa_r+0x2fc>
 8009230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009232:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009236:	e7b8      	b.n	80091aa <_dtoa_r+0x28a>
 8009238:	3101      	adds	r1, #1
 800923a:	6041      	str	r1, [r0, #4]
 800923c:	0052      	lsls	r2, r2, #1
 800923e:	e7b8      	b.n	80091b2 <_dtoa_r+0x292>
 8009240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009242:	9a01      	ldr	r2, [sp, #4]
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	9b03      	ldr	r3, [sp, #12]
 8009248:	2b0e      	cmp	r3, #14
 800924a:	f200 809d 	bhi.w	8009388 <_dtoa_r+0x468>
 800924e:	2d00      	cmp	r5, #0
 8009250:	f000 809a 	beq.w	8009388 <_dtoa_r+0x468>
 8009254:	9b00      	ldr	r3, [sp, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	dd32      	ble.n	80092c0 <_dtoa_r+0x3a0>
 800925a:	4ab7      	ldr	r2, [pc, #732]	; (8009538 <_dtoa_r+0x618>)
 800925c:	f003 030f 	and.w	r3, r3, #15
 8009260:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009264:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009268:	9b00      	ldr	r3, [sp, #0]
 800926a:	05d8      	lsls	r0, r3, #23
 800926c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009270:	d516      	bpl.n	80092a0 <_dtoa_r+0x380>
 8009272:	4bb2      	ldr	r3, [pc, #712]	; (800953c <_dtoa_r+0x61c>)
 8009274:	ec51 0b19 	vmov	r0, r1, d9
 8009278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800927c:	f7f7 fae6 	bl	800084c <__aeabi_ddiv>
 8009280:	f007 070f 	and.w	r7, r7, #15
 8009284:	4682      	mov	sl, r0
 8009286:	468b      	mov	fp, r1
 8009288:	2503      	movs	r5, #3
 800928a:	4eac      	ldr	r6, [pc, #688]	; (800953c <_dtoa_r+0x61c>)
 800928c:	b957      	cbnz	r7, 80092a4 <_dtoa_r+0x384>
 800928e:	4642      	mov	r2, r8
 8009290:	464b      	mov	r3, r9
 8009292:	4650      	mov	r0, sl
 8009294:	4659      	mov	r1, fp
 8009296:	f7f7 fad9 	bl	800084c <__aeabi_ddiv>
 800929a:	4682      	mov	sl, r0
 800929c:	468b      	mov	fp, r1
 800929e:	e028      	b.n	80092f2 <_dtoa_r+0x3d2>
 80092a0:	2502      	movs	r5, #2
 80092a2:	e7f2      	b.n	800928a <_dtoa_r+0x36a>
 80092a4:	07f9      	lsls	r1, r7, #31
 80092a6:	d508      	bpl.n	80092ba <_dtoa_r+0x39a>
 80092a8:	4640      	mov	r0, r8
 80092aa:	4649      	mov	r1, r9
 80092ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092b0:	f7f7 f9a2 	bl	80005f8 <__aeabi_dmul>
 80092b4:	3501      	adds	r5, #1
 80092b6:	4680      	mov	r8, r0
 80092b8:	4689      	mov	r9, r1
 80092ba:	107f      	asrs	r7, r7, #1
 80092bc:	3608      	adds	r6, #8
 80092be:	e7e5      	b.n	800928c <_dtoa_r+0x36c>
 80092c0:	f000 809b 	beq.w	80093fa <_dtoa_r+0x4da>
 80092c4:	9b00      	ldr	r3, [sp, #0]
 80092c6:	4f9d      	ldr	r7, [pc, #628]	; (800953c <_dtoa_r+0x61c>)
 80092c8:	425e      	negs	r6, r3
 80092ca:	4b9b      	ldr	r3, [pc, #620]	; (8009538 <_dtoa_r+0x618>)
 80092cc:	f006 020f 	and.w	r2, r6, #15
 80092d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d8:	ec51 0b19 	vmov	r0, r1, d9
 80092dc:	f7f7 f98c 	bl	80005f8 <__aeabi_dmul>
 80092e0:	1136      	asrs	r6, r6, #4
 80092e2:	4682      	mov	sl, r0
 80092e4:	468b      	mov	fp, r1
 80092e6:	2300      	movs	r3, #0
 80092e8:	2502      	movs	r5, #2
 80092ea:	2e00      	cmp	r6, #0
 80092ec:	d17a      	bne.n	80093e4 <_dtoa_r+0x4c4>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1d3      	bne.n	800929a <_dtoa_r+0x37a>
 80092f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 8082 	beq.w	80093fe <_dtoa_r+0x4de>
 80092fa:	4b91      	ldr	r3, [pc, #580]	; (8009540 <_dtoa_r+0x620>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	4650      	mov	r0, sl
 8009300:	4659      	mov	r1, fp
 8009302:	f7f7 fbeb 	bl	8000adc <__aeabi_dcmplt>
 8009306:	2800      	cmp	r0, #0
 8009308:	d079      	beq.n	80093fe <_dtoa_r+0x4de>
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d076      	beq.n	80093fe <_dtoa_r+0x4de>
 8009310:	9b02      	ldr	r3, [sp, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	dd36      	ble.n	8009384 <_dtoa_r+0x464>
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	4650      	mov	r0, sl
 800931a:	4659      	mov	r1, fp
 800931c:	1e5f      	subs	r7, r3, #1
 800931e:	2200      	movs	r2, #0
 8009320:	4b88      	ldr	r3, [pc, #544]	; (8009544 <_dtoa_r+0x624>)
 8009322:	f7f7 f969 	bl	80005f8 <__aeabi_dmul>
 8009326:	9e02      	ldr	r6, [sp, #8]
 8009328:	4682      	mov	sl, r0
 800932a:	468b      	mov	fp, r1
 800932c:	3501      	adds	r5, #1
 800932e:	4628      	mov	r0, r5
 8009330:	f7f7 f8f8 	bl	8000524 <__aeabi_i2d>
 8009334:	4652      	mov	r2, sl
 8009336:	465b      	mov	r3, fp
 8009338:	f7f7 f95e 	bl	80005f8 <__aeabi_dmul>
 800933c:	4b82      	ldr	r3, [pc, #520]	; (8009548 <_dtoa_r+0x628>)
 800933e:	2200      	movs	r2, #0
 8009340:	f7f6 ffa4 	bl	800028c <__adddf3>
 8009344:	46d0      	mov	r8, sl
 8009346:	46d9      	mov	r9, fp
 8009348:	4682      	mov	sl, r0
 800934a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800934e:	2e00      	cmp	r6, #0
 8009350:	d158      	bne.n	8009404 <_dtoa_r+0x4e4>
 8009352:	4b7e      	ldr	r3, [pc, #504]	; (800954c <_dtoa_r+0x62c>)
 8009354:	2200      	movs	r2, #0
 8009356:	4640      	mov	r0, r8
 8009358:	4649      	mov	r1, r9
 800935a:	f7f6 ff95 	bl	8000288 <__aeabi_dsub>
 800935e:	4652      	mov	r2, sl
 8009360:	465b      	mov	r3, fp
 8009362:	4680      	mov	r8, r0
 8009364:	4689      	mov	r9, r1
 8009366:	f7f7 fbd7 	bl	8000b18 <__aeabi_dcmpgt>
 800936a:	2800      	cmp	r0, #0
 800936c:	f040 8295 	bne.w	800989a <_dtoa_r+0x97a>
 8009370:	4652      	mov	r2, sl
 8009372:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009376:	4640      	mov	r0, r8
 8009378:	4649      	mov	r1, r9
 800937a:	f7f7 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800937e:	2800      	cmp	r0, #0
 8009380:	f040 8289 	bne.w	8009896 <_dtoa_r+0x976>
 8009384:	ec5b ab19 	vmov	sl, fp, d9
 8009388:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800938a:	2b00      	cmp	r3, #0
 800938c:	f2c0 8148 	blt.w	8009620 <_dtoa_r+0x700>
 8009390:	9a00      	ldr	r2, [sp, #0]
 8009392:	2a0e      	cmp	r2, #14
 8009394:	f300 8144 	bgt.w	8009620 <_dtoa_r+0x700>
 8009398:	4b67      	ldr	r3, [pc, #412]	; (8009538 <_dtoa_r+0x618>)
 800939a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800939e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f280 80d5 	bge.w	8009554 <_dtoa_r+0x634>
 80093aa:	9b03      	ldr	r3, [sp, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f300 80d1 	bgt.w	8009554 <_dtoa_r+0x634>
 80093b2:	f040 826f 	bne.w	8009894 <_dtoa_r+0x974>
 80093b6:	4b65      	ldr	r3, [pc, #404]	; (800954c <_dtoa_r+0x62c>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	4640      	mov	r0, r8
 80093bc:	4649      	mov	r1, r9
 80093be:	f7f7 f91b 	bl	80005f8 <__aeabi_dmul>
 80093c2:	4652      	mov	r2, sl
 80093c4:	465b      	mov	r3, fp
 80093c6:	f7f7 fb9d 	bl	8000b04 <__aeabi_dcmpge>
 80093ca:	9e03      	ldr	r6, [sp, #12]
 80093cc:	4637      	mov	r7, r6
 80093ce:	2800      	cmp	r0, #0
 80093d0:	f040 8245 	bne.w	800985e <_dtoa_r+0x93e>
 80093d4:	9d01      	ldr	r5, [sp, #4]
 80093d6:	2331      	movs	r3, #49	; 0x31
 80093d8:	f805 3b01 	strb.w	r3, [r5], #1
 80093dc:	9b00      	ldr	r3, [sp, #0]
 80093de:	3301      	adds	r3, #1
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	e240      	b.n	8009866 <_dtoa_r+0x946>
 80093e4:	07f2      	lsls	r2, r6, #31
 80093e6:	d505      	bpl.n	80093f4 <_dtoa_r+0x4d4>
 80093e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ec:	f7f7 f904 	bl	80005f8 <__aeabi_dmul>
 80093f0:	3501      	adds	r5, #1
 80093f2:	2301      	movs	r3, #1
 80093f4:	1076      	asrs	r6, r6, #1
 80093f6:	3708      	adds	r7, #8
 80093f8:	e777      	b.n	80092ea <_dtoa_r+0x3ca>
 80093fa:	2502      	movs	r5, #2
 80093fc:	e779      	b.n	80092f2 <_dtoa_r+0x3d2>
 80093fe:	9f00      	ldr	r7, [sp, #0]
 8009400:	9e03      	ldr	r6, [sp, #12]
 8009402:	e794      	b.n	800932e <_dtoa_r+0x40e>
 8009404:	9901      	ldr	r1, [sp, #4]
 8009406:	4b4c      	ldr	r3, [pc, #304]	; (8009538 <_dtoa_r+0x618>)
 8009408:	4431      	add	r1, r6
 800940a:	910d      	str	r1, [sp, #52]	; 0x34
 800940c:	9908      	ldr	r1, [sp, #32]
 800940e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009416:	2900      	cmp	r1, #0
 8009418:	d043      	beq.n	80094a2 <_dtoa_r+0x582>
 800941a:	494d      	ldr	r1, [pc, #308]	; (8009550 <_dtoa_r+0x630>)
 800941c:	2000      	movs	r0, #0
 800941e:	f7f7 fa15 	bl	800084c <__aeabi_ddiv>
 8009422:	4652      	mov	r2, sl
 8009424:	465b      	mov	r3, fp
 8009426:	f7f6 ff2f 	bl	8000288 <__aeabi_dsub>
 800942a:	9d01      	ldr	r5, [sp, #4]
 800942c:	4682      	mov	sl, r0
 800942e:	468b      	mov	fp, r1
 8009430:	4649      	mov	r1, r9
 8009432:	4640      	mov	r0, r8
 8009434:	f7f7 fb90 	bl	8000b58 <__aeabi_d2iz>
 8009438:	4606      	mov	r6, r0
 800943a:	f7f7 f873 	bl	8000524 <__aeabi_i2d>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	f7f6 ff1f 	bl	8000288 <__aeabi_dsub>
 800944a:	3630      	adds	r6, #48	; 0x30
 800944c:	f805 6b01 	strb.w	r6, [r5], #1
 8009450:	4652      	mov	r2, sl
 8009452:	465b      	mov	r3, fp
 8009454:	4680      	mov	r8, r0
 8009456:	4689      	mov	r9, r1
 8009458:	f7f7 fb40 	bl	8000adc <__aeabi_dcmplt>
 800945c:	2800      	cmp	r0, #0
 800945e:	d163      	bne.n	8009528 <_dtoa_r+0x608>
 8009460:	4642      	mov	r2, r8
 8009462:	464b      	mov	r3, r9
 8009464:	4936      	ldr	r1, [pc, #216]	; (8009540 <_dtoa_r+0x620>)
 8009466:	2000      	movs	r0, #0
 8009468:	f7f6 ff0e 	bl	8000288 <__aeabi_dsub>
 800946c:	4652      	mov	r2, sl
 800946e:	465b      	mov	r3, fp
 8009470:	f7f7 fb34 	bl	8000adc <__aeabi_dcmplt>
 8009474:	2800      	cmp	r0, #0
 8009476:	f040 80b5 	bne.w	80095e4 <_dtoa_r+0x6c4>
 800947a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800947c:	429d      	cmp	r5, r3
 800947e:	d081      	beq.n	8009384 <_dtoa_r+0x464>
 8009480:	4b30      	ldr	r3, [pc, #192]	; (8009544 <_dtoa_r+0x624>)
 8009482:	2200      	movs	r2, #0
 8009484:	4650      	mov	r0, sl
 8009486:	4659      	mov	r1, fp
 8009488:	f7f7 f8b6 	bl	80005f8 <__aeabi_dmul>
 800948c:	4b2d      	ldr	r3, [pc, #180]	; (8009544 <_dtoa_r+0x624>)
 800948e:	4682      	mov	sl, r0
 8009490:	468b      	mov	fp, r1
 8009492:	4640      	mov	r0, r8
 8009494:	4649      	mov	r1, r9
 8009496:	2200      	movs	r2, #0
 8009498:	f7f7 f8ae 	bl	80005f8 <__aeabi_dmul>
 800949c:	4680      	mov	r8, r0
 800949e:	4689      	mov	r9, r1
 80094a0:	e7c6      	b.n	8009430 <_dtoa_r+0x510>
 80094a2:	4650      	mov	r0, sl
 80094a4:	4659      	mov	r1, fp
 80094a6:	f7f7 f8a7 	bl	80005f8 <__aeabi_dmul>
 80094aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ac:	9d01      	ldr	r5, [sp, #4]
 80094ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80094b0:	4682      	mov	sl, r0
 80094b2:	468b      	mov	fp, r1
 80094b4:	4649      	mov	r1, r9
 80094b6:	4640      	mov	r0, r8
 80094b8:	f7f7 fb4e 	bl	8000b58 <__aeabi_d2iz>
 80094bc:	4606      	mov	r6, r0
 80094be:	f7f7 f831 	bl	8000524 <__aeabi_i2d>
 80094c2:	3630      	adds	r6, #48	; 0x30
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	4640      	mov	r0, r8
 80094ca:	4649      	mov	r1, r9
 80094cc:	f7f6 fedc 	bl	8000288 <__aeabi_dsub>
 80094d0:	f805 6b01 	strb.w	r6, [r5], #1
 80094d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094d6:	429d      	cmp	r5, r3
 80094d8:	4680      	mov	r8, r0
 80094da:	4689      	mov	r9, r1
 80094dc:	f04f 0200 	mov.w	r2, #0
 80094e0:	d124      	bne.n	800952c <_dtoa_r+0x60c>
 80094e2:	4b1b      	ldr	r3, [pc, #108]	; (8009550 <_dtoa_r+0x630>)
 80094e4:	4650      	mov	r0, sl
 80094e6:	4659      	mov	r1, fp
 80094e8:	f7f6 fed0 	bl	800028c <__adddf3>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4640      	mov	r0, r8
 80094f2:	4649      	mov	r1, r9
 80094f4:	f7f7 fb10 	bl	8000b18 <__aeabi_dcmpgt>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d173      	bne.n	80095e4 <_dtoa_r+0x6c4>
 80094fc:	4652      	mov	r2, sl
 80094fe:	465b      	mov	r3, fp
 8009500:	4913      	ldr	r1, [pc, #76]	; (8009550 <_dtoa_r+0x630>)
 8009502:	2000      	movs	r0, #0
 8009504:	f7f6 fec0 	bl	8000288 <__aeabi_dsub>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4640      	mov	r0, r8
 800950e:	4649      	mov	r1, r9
 8009510:	f7f7 fae4 	bl	8000adc <__aeabi_dcmplt>
 8009514:	2800      	cmp	r0, #0
 8009516:	f43f af35 	beq.w	8009384 <_dtoa_r+0x464>
 800951a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800951c:	1e6b      	subs	r3, r5, #1
 800951e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009520:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009524:	2b30      	cmp	r3, #48	; 0x30
 8009526:	d0f8      	beq.n	800951a <_dtoa_r+0x5fa>
 8009528:	9700      	str	r7, [sp, #0]
 800952a:	e049      	b.n	80095c0 <_dtoa_r+0x6a0>
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <_dtoa_r+0x624>)
 800952e:	f7f7 f863 	bl	80005f8 <__aeabi_dmul>
 8009532:	4680      	mov	r8, r0
 8009534:	4689      	mov	r9, r1
 8009536:	e7bd      	b.n	80094b4 <_dtoa_r+0x594>
 8009538:	0800b418 	.word	0x0800b418
 800953c:	0800b3f0 	.word	0x0800b3f0
 8009540:	3ff00000 	.word	0x3ff00000
 8009544:	40240000 	.word	0x40240000
 8009548:	401c0000 	.word	0x401c0000
 800954c:	40140000 	.word	0x40140000
 8009550:	3fe00000 	.word	0x3fe00000
 8009554:	9d01      	ldr	r5, [sp, #4]
 8009556:	4656      	mov	r6, sl
 8009558:	465f      	mov	r7, fp
 800955a:	4642      	mov	r2, r8
 800955c:	464b      	mov	r3, r9
 800955e:	4630      	mov	r0, r6
 8009560:	4639      	mov	r1, r7
 8009562:	f7f7 f973 	bl	800084c <__aeabi_ddiv>
 8009566:	f7f7 faf7 	bl	8000b58 <__aeabi_d2iz>
 800956a:	4682      	mov	sl, r0
 800956c:	f7f6 ffda 	bl	8000524 <__aeabi_i2d>
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	f7f7 f840 	bl	80005f8 <__aeabi_dmul>
 8009578:	4602      	mov	r2, r0
 800957a:	460b      	mov	r3, r1
 800957c:	4630      	mov	r0, r6
 800957e:	4639      	mov	r1, r7
 8009580:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009584:	f7f6 fe80 	bl	8000288 <__aeabi_dsub>
 8009588:	f805 6b01 	strb.w	r6, [r5], #1
 800958c:	9e01      	ldr	r6, [sp, #4]
 800958e:	9f03      	ldr	r7, [sp, #12]
 8009590:	1bae      	subs	r6, r5, r6
 8009592:	42b7      	cmp	r7, r6
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	d135      	bne.n	8009606 <_dtoa_r+0x6e6>
 800959a:	f7f6 fe77 	bl	800028c <__adddf3>
 800959e:	4642      	mov	r2, r8
 80095a0:	464b      	mov	r3, r9
 80095a2:	4606      	mov	r6, r0
 80095a4:	460f      	mov	r7, r1
 80095a6:	f7f7 fab7 	bl	8000b18 <__aeabi_dcmpgt>
 80095aa:	b9d0      	cbnz	r0, 80095e2 <_dtoa_r+0x6c2>
 80095ac:	4642      	mov	r2, r8
 80095ae:	464b      	mov	r3, r9
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	f7f7 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80095b8:	b110      	cbz	r0, 80095c0 <_dtoa_r+0x6a0>
 80095ba:	f01a 0f01 	tst.w	sl, #1
 80095be:	d110      	bne.n	80095e2 <_dtoa_r+0x6c2>
 80095c0:	4620      	mov	r0, r4
 80095c2:	ee18 1a10 	vmov	r1, s16
 80095c6:	f000 fd05 	bl	8009fd4 <_Bfree>
 80095ca:	2300      	movs	r3, #0
 80095cc:	9800      	ldr	r0, [sp, #0]
 80095ce:	702b      	strb	r3, [r5, #0]
 80095d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095d2:	3001      	adds	r0, #1
 80095d4:	6018      	str	r0, [r3, #0]
 80095d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f43f acf1 	beq.w	8008fc0 <_dtoa_r+0xa0>
 80095de:	601d      	str	r5, [r3, #0]
 80095e0:	e4ee      	b.n	8008fc0 <_dtoa_r+0xa0>
 80095e2:	9f00      	ldr	r7, [sp, #0]
 80095e4:	462b      	mov	r3, r5
 80095e6:	461d      	mov	r5, r3
 80095e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095ec:	2a39      	cmp	r2, #57	; 0x39
 80095ee:	d106      	bne.n	80095fe <_dtoa_r+0x6de>
 80095f0:	9a01      	ldr	r2, [sp, #4]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d1f7      	bne.n	80095e6 <_dtoa_r+0x6c6>
 80095f6:	9901      	ldr	r1, [sp, #4]
 80095f8:	2230      	movs	r2, #48	; 0x30
 80095fa:	3701      	adds	r7, #1
 80095fc:	700a      	strb	r2, [r1, #0]
 80095fe:	781a      	ldrb	r2, [r3, #0]
 8009600:	3201      	adds	r2, #1
 8009602:	701a      	strb	r2, [r3, #0]
 8009604:	e790      	b.n	8009528 <_dtoa_r+0x608>
 8009606:	4ba6      	ldr	r3, [pc, #664]	; (80098a0 <_dtoa_r+0x980>)
 8009608:	2200      	movs	r2, #0
 800960a:	f7f6 fff5 	bl	80005f8 <__aeabi_dmul>
 800960e:	2200      	movs	r2, #0
 8009610:	2300      	movs	r3, #0
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	f7f7 fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 800961a:	2800      	cmp	r0, #0
 800961c:	d09d      	beq.n	800955a <_dtoa_r+0x63a>
 800961e:	e7cf      	b.n	80095c0 <_dtoa_r+0x6a0>
 8009620:	9a08      	ldr	r2, [sp, #32]
 8009622:	2a00      	cmp	r2, #0
 8009624:	f000 80d7 	beq.w	80097d6 <_dtoa_r+0x8b6>
 8009628:	9a06      	ldr	r2, [sp, #24]
 800962a:	2a01      	cmp	r2, #1
 800962c:	f300 80ba 	bgt.w	80097a4 <_dtoa_r+0x884>
 8009630:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009632:	2a00      	cmp	r2, #0
 8009634:	f000 80b2 	beq.w	800979c <_dtoa_r+0x87c>
 8009638:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800963c:	9e07      	ldr	r6, [sp, #28]
 800963e:	9d04      	ldr	r5, [sp, #16]
 8009640:	9a04      	ldr	r2, [sp, #16]
 8009642:	441a      	add	r2, r3
 8009644:	9204      	str	r2, [sp, #16]
 8009646:	9a05      	ldr	r2, [sp, #20]
 8009648:	2101      	movs	r1, #1
 800964a:	441a      	add	r2, r3
 800964c:	4620      	mov	r0, r4
 800964e:	9205      	str	r2, [sp, #20]
 8009650:	f000 fd78 	bl	800a144 <__i2b>
 8009654:	4607      	mov	r7, r0
 8009656:	2d00      	cmp	r5, #0
 8009658:	dd0c      	ble.n	8009674 <_dtoa_r+0x754>
 800965a:	9b05      	ldr	r3, [sp, #20]
 800965c:	2b00      	cmp	r3, #0
 800965e:	dd09      	ble.n	8009674 <_dtoa_r+0x754>
 8009660:	42ab      	cmp	r3, r5
 8009662:	9a04      	ldr	r2, [sp, #16]
 8009664:	bfa8      	it	ge
 8009666:	462b      	movge	r3, r5
 8009668:	1ad2      	subs	r2, r2, r3
 800966a:	9204      	str	r2, [sp, #16]
 800966c:	9a05      	ldr	r2, [sp, #20]
 800966e:	1aed      	subs	r5, r5, r3
 8009670:	1ad3      	subs	r3, r2, r3
 8009672:	9305      	str	r3, [sp, #20]
 8009674:	9b07      	ldr	r3, [sp, #28]
 8009676:	b31b      	cbz	r3, 80096c0 <_dtoa_r+0x7a0>
 8009678:	9b08      	ldr	r3, [sp, #32]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 80af 	beq.w	80097de <_dtoa_r+0x8be>
 8009680:	2e00      	cmp	r6, #0
 8009682:	dd13      	ble.n	80096ac <_dtoa_r+0x78c>
 8009684:	4639      	mov	r1, r7
 8009686:	4632      	mov	r2, r6
 8009688:	4620      	mov	r0, r4
 800968a:	f000 fe1b 	bl	800a2c4 <__pow5mult>
 800968e:	ee18 2a10 	vmov	r2, s16
 8009692:	4601      	mov	r1, r0
 8009694:	4607      	mov	r7, r0
 8009696:	4620      	mov	r0, r4
 8009698:	f000 fd6a 	bl	800a170 <__multiply>
 800969c:	ee18 1a10 	vmov	r1, s16
 80096a0:	4680      	mov	r8, r0
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 fc96 	bl	8009fd4 <_Bfree>
 80096a8:	ee08 8a10 	vmov	s16, r8
 80096ac:	9b07      	ldr	r3, [sp, #28]
 80096ae:	1b9a      	subs	r2, r3, r6
 80096b0:	d006      	beq.n	80096c0 <_dtoa_r+0x7a0>
 80096b2:	ee18 1a10 	vmov	r1, s16
 80096b6:	4620      	mov	r0, r4
 80096b8:	f000 fe04 	bl	800a2c4 <__pow5mult>
 80096bc:	ee08 0a10 	vmov	s16, r0
 80096c0:	2101      	movs	r1, #1
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fd3e 	bl	800a144 <__i2b>
 80096c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	4606      	mov	r6, r0
 80096ce:	f340 8088 	ble.w	80097e2 <_dtoa_r+0x8c2>
 80096d2:	461a      	mov	r2, r3
 80096d4:	4601      	mov	r1, r0
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 fdf4 	bl	800a2c4 <__pow5mult>
 80096dc:	9b06      	ldr	r3, [sp, #24]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	4606      	mov	r6, r0
 80096e2:	f340 8081 	ble.w	80097e8 <_dtoa_r+0x8c8>
 80096e6:	f04f 0800 	mov.w	r8, #0
 80096ea:	6933      	ldr	r3, [r6, #16]
 80096ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096f0:	6918      	ldr	r0, [r3, #16]
 80096f2:	f000 fcd7 	bl	800a0a4 <__hi0bits>
 80096f6:	f1c0 0020 	rsb	r0, r0, #32
 80096fa:	9b05      	ldr	r3, [sp, #20]
 80096fc:	4418      	add	r0, r3
 80096fe:	f010 001f 	ands.w	r0, r0, #31
 8009702:	f000 8092 	beq.w	800982a <_dtoa_r+0x90a>
 8009706:	f1c0 0320 	rsb	r3, r0, #32
 800970a:	2b04      	cmp	r3, #4
 800970c:	f340 808a 	ble.w	8009824 <_dtoa_r+0x904>
 8009710:	f1c0 001c 	rsb	r0, r0, #28
 8009714:	9b04      	ldr	r3, [sp, #16]
 8009716:	4403      	add	r3, r0
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	9b05      	ldr	r3, [sp, #20]
 800971c:	4403      	add	r3, r0
 800971e:	4405      	add	r5, r0
 8009720:	9305      	str	r3, [sp, #20]
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd07      	ble.n	8009738 <_dtoa_r+0x818>
 8009728:	ee18 1a10 	vmov	r1, s16
 800972c:	461a      	mov	r2, r3
 800972e:	4620      	mov	r0, r4
 8009730:	f000 fe22 	bl	800a378 <__lshift>
 8009734:	ee08 0a10 	vmov	s16, r0
 8009738:	9b05      	ldr	r3, [sp, #20]
 800973a:	2b00      	cmp	r3, #0
 800973c:	dd05      	ble.n	800974a <_dtoa_r+0x82a>
 800973e:	4631      	mov	r1, r6
 8009740:	461a      	mov	r2, r3
 8009742:	4620      	mov	r0, r4
 8009744:	f000 fe18 	bl	800a378 <__lshift>
 8009748:	4606      	mov	r6, r0
 800974a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d06e      	beq.n	800982e <_dtoa_r+0x90e>
 8009750:	ee18 0a10 	vmov	r0, s16
 8009754:	4631      	mov	r1, r6
 8009756:	f000 fe7f 	bl	800a458 <__mcmp>
 800975a:	2800      	cmp	r0, #0
 800975c:	da67      	bge.n	800982e <_dtoa_r+0x90e>
 800975e:	9b00      	ldr	r3, [sp, #0]
 8009760:	3b01      	subs	r3, #1
 8009762:	ee18 1a10 	vmov	r1, s16
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	220a      	movs	r2, #10
 800976a:	2300      	movs	r3, #0
 800976c:	4620      	mov	r0, r4
 800976e:	f000 fc53 	bl	800a018 <__multadd>
 8009772:	9b08      	ldr	r3, [sp, #32]
 8009774:	ee08 0a10 	vmov	s16, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	f000 81b1 	beq.w	8009ae0 <_dtoa_r+0xbc0>
 800977e:	2300      	movs	r3, #0
 8009780:	4639      	mov	r1, r7
 8009782:	220a      	movs	r2, #10
 8009784:	4620      	mov	r0, r4
 8009786:	f000 fc47 	bl	800a018 <__multadd>
 800978a:	9b02      	ldr	r3, [sp, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	4607      	mov	r7, r0
 8009790:	f300 808e 	bgt.w	80098b0 <_dtoa_r+0x990>
 8009794:	9b06      	ldr	r3, [sp, #24]
 8009796:	2b02      	cmp	r3, #2
 8009798:	dc51      	bgt.n	800983e <_dtoa_r+0x91e>
 800979a:	e089      	b.n	80098b0 <_dtoa_r+0x990>
 800979c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800979e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097a2:	e74b      	b.n	800963c <_dtoa_r+0x71c>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	1e5e      	subs	r6, r3, #1
 80097a8:	9b07      	ldr	r3, [sp, #28]
 80097aa:	42b3      	cmp	r3, r6
 80097ac:	bfbf      	itttt	lt
 80097ae:	9b07      	ldrlt	r3, [sp, #28]
 80097b0:	9607      	strlt	r6, [sp, #28]
 80097b2:	1af2      	sublt	r2, r6, r3
 80097b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80097b6:	bfb6      	itet	lt
 80097b8:	189b      	addlt	r3, r3, r2
 80097ba:	1b9e      	subge	r6, r3, r6
 80097bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80097be:	9b03      	ldr	r3, [sp, #12]
 80097c0:	bfb8      	it	lt
 80097c2:	2600      	movlt	r6, #0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	bfb7      	itett	lt
 80097c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80097cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80097d0:	1a9d      	sublt	r5, r3, r2
 80097d2:	2300      	movlt	r3, #0
 80097d4:	e734      	b.n	8009640 <_dtoa_r+0x720>
 80097d6:	9e07      	ldr	r6, [sp, #28]
 80097d8:	9d04      	ldr	r5, [sp, #16]
 80097da:	9f08      	ldr	r7, [sp, #32]
 80097dc:	e73b      	b.n	8009656 <_dtoa_r+0x736>
 80097de:	9a07      	ldr	r2, [sp, #28]
 80097e0:	e767      	b.n	80096b2 <_dtoa_r+0x792>
 80097e2:	9b06      	ldr	r3, [sp, #24]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	dc18      	bgt.n	800981a <_dtoa_r+0x8fa>
 80097e8:	f1ba 0f00 	cmp.w	sl, #0
 80097ec:	d115      	bne.n	800981a <_dtoa_r+0x8fa>
 80097ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097f2:	b993      	cbnz	r3, 800981a <_dtoa_r+0x8fa>
 80097f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097f8:	0d1b      	lsrs	r3, r3, #20
 80097fa:	051b      	lsls	r3, r3, #20
 80097fc:	b183      	cbz	r3, 8009820 <_dtoa_r+0x900>
 80097fe:	9b04      	ldr	r3, [sp, #16]
 8009800:	3301      	adds	r3, #1
 8009802:	9304      	str	r3, [sp, #16]
 8009804:	9b05      	ldr	r3, [sp, #20]
 8009806:	3301      	adds	r3, #1
 8009808:	9305      	str	r3, [sp, #20]
 800980a:	f04f 0801 	mov.w	r8, #1
 800980e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009810:	2b00      	cmp	r3, #0
 8009812:	f47f af6a 	bne.w	80096ea <_dtoa_r+0x7ca>
 8009816:	2001      	movs	r0, #1
 8009818:	e76f      	b.n	80096fa <_dtoa_r+0x7da>
 800981a:	f04f 0800 	mov.w	r8, #0
 800981e:	e7f6      	b.n	800980e <_dtoa_r+0x8ee>
 8009820:	4698      	mov	r8, r3
 8009822:	e7f4      	b.n	800980e <_dtoa_r+0x8ee>
 8009824:	f43f af7d 	beq.w	8009722 <_dtoa_r+0x802>
 8009828:	4618      	mov	r0, r3
 800982a:	301c      	adds	r0, #28
 800982c:	e772      	b.n	8009714 <_dtoa_r+0x7f4>
 800982e:	9b03      	ldr	r3, [sp, #12]
 8009830:	2b00      	cmp	r3, #0
 8009832:	dc37      	bgt.n	80098a4 <_dtoa_r+0x984>
 8009834:	9b06      	ldr	r3, [sp, #24]
 8009836:	2b02      	cmp	r3, #2
 8009838:	dd34      	ble.n	80098a4 <_dtoa_r+0x984>
 800983a:	9b03      	ldr	r3, [sp, #12]
 800983c:	9302      	str	r3, [sp, #8]
 800983e:	9b02      	ldr	r3, [sp, #8]
 8009840:	b96b      	cbnz	r3, 800985e <_dtoa_r+0x93e>
 8009842:	4631      	mov	r1, r6
 8009844:	2205      	movs	r2, #5
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fbe6 	bl	800a018 <__multadd>
 800984c:	4601      	mov	r1, r0
 800984e:	4606      	mov	r6, r0
 8009850:	ee18 0a10 	vmov	r0, s16
 8009854:	f000 fe00 	bl	800a458 <__mcmp>
 8009858:	2800      	cmp	r0, #0
 800985a:	f73f adbb 	bgt.w	80093d4 <_dtoa_r+0x4b4>
 800985e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009860:	9d01      	ldr	r5, [sp, #4]
 8009862:	43db      	mvns	r3, r3
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	f04f 0800 	mov.w	r8, #0
 800986a:	4631      	mov	r1, r6
 800986c:	4620      	mov	r0, r4
 800986e:	f000 fbb1 	bl	8009fd4 <_Bfree>
 8009872:	2f00      	cmp	r7, #0
 8009874:	f43f aea4 	beq.w	80095c0 <_dtoa_r+0x6a0>
 8009878:	f1b8 0f00 	cmp.w	r8, #0
 800987c:	d005      	beq.n	800988a <_dtoa_r+0x96a>
 800987e:	45b8      	cmp	r8, r7
 8009880:	d003      	beq.n	800988a <_dtoa_r+0x96a>
 8009882:	4641      	mov	r1, r8
 8009884:	4620      	mov	r0, r4
 8009886:	f000 fba5 	bl	8009fd4 <_Bfree>
 800988a:	4639      	mov	r1, r7
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fba1 	bl	8009fd4 <_Bfree>
 8009892:	e695      	b.n	80095c0 <_dtoa_r+0x6a0>
 8009894:	2600      	movs	r6, #0
 8009896:	4637      	mov	r7, r6
 8009898:	e7e1      	b.n	800985e <_dtoa_r+0x93e>
 800989a:	9700      	str	r7, [sp, #0]
 800989c:	4637      	mov	r7, r6
 800989e:	e599      	b.n	80093d4 <_dtoa_r+0x4b4>
 80098a0:	40240000 	.word	0x40240000
 80098a4:	9b08      	ldr	r3, [sp, #32]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 80ca 	beq.w	8009a40 <_dtoa_r+0xb20>
 80098ac:	9b03      	ldr	r3, [sp, #12]
 80098ae:	9302      	str	r3, [sp, #8]
 80098b0:	2d00      	cmp	r5, #0
 80098b2:	dd05      	ble.n	80098c0 <_dtoa_r+0x9a0>
 80098b4:	4639      	mov	r1, r7
 80098b6:	462a      	mov	r2, r5
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 fd5d 	bl	800a378 <__lshift>
 80098be:	4607      	mov	r7, r0
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	d05b      	beq.n	800997e <_dtoa_r+0xa5e>
 80098c6:	6879      	ldr	r1, [r7, #4]
 80098c8:	4620      	mov	r0, r4
 80098ca:	f000 fb43 	bl	8009f54 <_Balloc>
 80098ce:	4605      	mov	r5, r0
 80098d0:	b928      	cbnz	r0, 80098de <_dtoa_r+0x9be>
 80098d2:	4b87      	ldr	r3, [pc, #540]	; (8009af0 <_dtoa_r+0xbd0>)
 80098d4:	4602      	mov	r2, r0
 80098d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80098da:	f7ff bb3b 	b.w	8008f54 <_dtoa_r+0x34>
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	3202      	adds	r2, #2
 80098e2:	0092      	lsls	r2, r2, #2
 80098e4:	f107 010c 	add.w	r1, r7, #12
 80098e8:	300c      	adds	r0, #12
 80098ea:	f7fe fcbd 	bl	8008268 <memcpy>
 80098ee:	2201      	movs	r2, #1
 80098f0:	4629      	mov	r1, r5
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fd40 	bl	800a378 <__lshift>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	f103 0901 	add.w	r9, r3, #1
 80098fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009902:	4413      	add	r3, r2
 8009904:	9305      	str	r3, [sp, #20]
 8009906:	f00a 0301 	and.w	r3, sl, #1
 800990a:	46b8      	mov	r8, r7
 800990c:	9304      	str	r3, [sp, #16]
 800990e:	4607      	mov	r7, r0
 8009910:	4631      	mov	r1, r6
 8009912:	ee18 0a10 	vmov	r0, s16
 8009916:	f7ff fa75 	bl	8008e04 <quorem>
 800991a:	4641      	mov	r1, r8
 800991c:	9002      	str	r0, [sp, #8]
 800991e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009922:	ee18 0a10 	vmov	r0, s16
 8009926:	f000 fd97 	bl	800a458 <__mcmp>
 800992a:	463a      	mov	r2, r7
 800992c:	9003      	str	r0, [sp, #12]
 800992e:	4631      	mov	r1, r6
 8009930:	4620      	mov	r0, r4
 8009932:	f000 fdad 	bl	800a490 <__mdiff>
 8009936:	68c2      	ldr	r2, [r0, #12]
 8009938:	f109 3bff 	add.w	fp, r9, #4294967295
 800993c:	4605      	mov	r5, r0
 800993e:	bb02      	cbnz	r2, 8009982 <_dtoa_r+0xa62>
 8009940:	4601      	mov	r1, r0
 8009942:	ee18 0a10 	vmov	r0, s16
 8009946:	f000 fd87 	bl	800a458 <__mcmp>
 800994a:	4602      	mov	r2, r0
 800994c:	4629      	mov	r1, r5
 800994e:	4620      	mov	r0, r4
 8009950:	9207      	str	r2, [sp, #28]
 8009952:	f000 fb3f 	bl	8009fd4 <_Bfree>
 8009956:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800995a:	ea43 0102 	orr.w	r1, r3, r2
 800995e:	9b04      	ldr	r3, [sp, #16]
 8009960:	430b      	orrs	r3, r1
 8009962:	464d      	mov	r5, r9
 8009964:	d10f      	bne.n	8009986 <_dtoa_r+0xa66>
 8009966:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800996a:	d02a      	beq.n	80099c2 <_dtoa_r+0xaa2>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	dd02      	ble.n	8009978 <_dtoa_r+0xa58>
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009978:	f88b a000 	strb.w	sl, [fp]
 800997c:	e775      	b.n	800986a <_dtoa_r+0x94a>
 800997e:	4638      	mov	r0, r7
 8009980:	e7ba      	b.n	80098f8 <_dtoa_r+0x9d8>
 8009982:	2201      	movs	r2, #1
 8009984:	e7e2      	b.n	800994c <_dtoa_r+0xa2c>
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	db04      	blt.n	8009996 <_dtoa_r+0xa76>
 800998c:	9906      	ldr	r1, [sp, #24]
 800998e:	430b      	orrs	r3, r1
 8009990:	9904      	ldr	r1, [sp, #16]
 8009992:	430b      	orrs	r3, r1
 8009994:	d122      	bne.n	80099dc <_dtoa_r+0xabc>
 8009996:	2a00      	cmp	r2, #0
 8009998:	ddee      	ble.n	8009978 <_dtoa_r+0xa58>
 800999a:	ee18 1a10 	vmov	r1, s16
 800999e:	2201      	movs	r2, #1
 80099a0:	4620      	mov	r0, r4
 80099a2:	f000 fce9 	bl	800a378 <__lshift>
 80099a6:	4631      	mov	r1, r6
 80099a8:	ee08 0a10 	vmov	s16, r0
 80099ac:	f000 fd54 	bl	800a458 <__mcmp>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	dc03      	bgt.n	80099bc <_dtoa_r+0xa9c>
 80099b4:	d1e0      	bne.n	8009978 <_dtoa_r+0xa58>
 80099b6:	f01a 0f01 	tst.w	sl, #1
 80099ba:	d0dd      	beq.n	8009978 <_dtoa_r+0xa58>
 80099bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80099c0:	d1d7      	bne.n	8009972 <_dtoa_r+0xa52>
 80099c2:	2339      	movs	r3, #57	; 0x39
 80099c4:	f88b 3000 	strb.w	r3, [fp]
 80099c8:	462b      	mov	r3, r5
 80099ca:	461d      	mov	r5, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099d2:	2a39      	cmp	r2, #57	; 0x39
 80099d4:	d071      	beq.n	8009aba <_dtoa_r+0xb9a>
 80099d6:	3201      	adds	r2, #1
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	e746      	b.n	800986a <_dtoa_r+0x94a>
 80099dc:	2a00      	cmp	r2, #0
 80099de:	dd07      	ble.n	80099f0 <_dtoa_r+0xad0>
 80099e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80099e4:	d0ed      	beq.n	80099c2 <_dtoa_r+0xaa2>
 80099e6:	f10a 0301 	add.w	r3, sl, #1
 80099ea:	f88b 3000 	strb.w	r3, [fp]
 80099ee:	e73c      	b.n	800986a <_dtoa_r+0x94a>
 80099f0:	9b05      	ldr	r3, [sp, #20]
 80099f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80099f6:	4599      	cmp	r9, r3
 80099f8:	d047      	beq.n	8009a8a <_dtoa_r+0xb6a>
 80099fa:	ee18 1a10 	vmov	r1, s16
 80099fe:	2300      	movs	r3, #0
 8009a00:	220a      	movs	r2, #10
 8009a02:	4620      	mov	r0, r4
 8009a04:	f000 fb08 	bl	800a018 <__multadd>
 8009a08:	45b8      	cmp	r8, r7
 8009a0a:	ee08 0a10 	vmov	s16, r0
 8009a0e:	f04f 0300 	mov.w	r3, #0
 8009a12:	f04f 020a 	mov.w	r2, #10
 8009a16:	4641      	mov	r1, r8
 8009a18:	4620      	mov	r0, r4
 8009a1a:	d106      	bne.n	8009a2a <_dtoa_r+0xb0a>
 8009a1c:	f000 fafc 	bl	800a018 <__multadd>
 8009a20:	4680      	mov	r8, r0
 8009a22:	4607      	mov	r7, r0
 8009a24:	f109 0901 	add.w	r9, r9, #1
 8009a28:	e772      	b.n	8009910 <_dtoa_r+0x9f0>
 8009a2a:	f000 faf5 	bl	800a018 <__multadd>
 8009a2e:	4639      	mov	r1, r7
 8009a30:	4680      	mov	r8, r0
 8009a32:	2300      	movs	r3, #0
 8009a34:	220a      	movs	r2, #10
 8009a36:	4620      	mov	r0, r4
 8009a38:	f000 faee 	bl	800a018 <__multadd>
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	e7f1      	b.n	8009a24 <_dtoa_r+0xb04>
 8009a40:	9b03      	ldr	r3, [sp, #12]
 8009a42:	9302      	str	r3, [sp, #8]
 8009a44:	9d01      	ldr	r5, [sp, #4]
 8009a46:	ee18 0a10 	vmov	r0, s16
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	f7ff f9da 	bl	8008e04 <quorem>
 8009a50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	f805 ab01 	strb.w	sl, [r5], #1
 8009a5a:	1aea      	subs	r2, r5, r3
 8009a5c:	9b02      	ldr	r3, [sp, #8]
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	dd09      	ble.n	8009a76 <_dtoa_r+0xb56>
 8009a62:	ee18 1a10 	vmov	r1, s16
 8009a66:	2300      	movs	r3, #0
 8009a68:	220a      	movs	r2, #10
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fad4 	bl	800a018 <__multadd>
 8009a70:	ee08 0a10 	vmov	s16, r0
 8009a74:	e7e7      	b.n	8009a46 <_dtoa_r+0xb26>
 8009a76:	9b02      	ldr	r3, [sp, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	bfc8      	it	gt
 8009a7c:	461d      	movgt	r5, r3
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	bfd8      	it	le
 8009a82:	2501      	movle	r5, #1
 8009a84:	441d      	add	r5, r3
 8009a86:	f04f 0800 	mov.w	r8, #0
 8009a8a:	ee18 1a10 	vmov	r1, s16
 8009a8e:	2201      	movs	r2, #1
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 fc71 	bl	800a378 <__lshift>
 8009a96:	4631      	mov	r1, r6
 8009a98:	ee08 0a10 	vmov	s16, r0
 8009a9c:	f000 fcdc 	bl	800a458 <__mcmp>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	dc91      	bgt.n	80099c8 <_dtoa_r+0xaa8>
 8009aa4:	d102      	bne.n	8009aac <_dtoa_r+0xb8c>
 8009aa6:	f01a 0f01 	tst.w	sl, #1
 8009aaa:	d18d      	bne.n	80099c8 <_dtoa_r+0xaa8>
 8009aac:	462b      	mov	r3, r5
 8009aae:	461d      	mov	r5, r3
 8009ab0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ab4:	2a30      	cmp	r2, #48	; 0x30
 8009ab6:	d0fa      	beq.n	8009aae <_dtoa_r+0xb8e>
 8009ab8:	e6d7      	b.n	800986a <_dtoa_r+0x94a>
 8009aba:	9a01      	ldr	r2, [sp, #4]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d184      	bne.n	80099ca <_dtoa_r+0xaaa>
 8009ac0:	9b00      	ldr	r3, [sp, #0]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	2331      	movs	r3, #49	; 0x31
 8009ac8:	7013      	strb	r3, [r2, #0]
 8009aca:	e6ce      	b.n	800986a <_dtoa_r+0x94a>
 8009acc:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <_dtoa_r+0xbd4>)
 8009ace:	f7ff ba95 	b.w	8008ffc <_dtoa_r+0xdc>
 8009ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f47f aa6e 	bne.w	8008fb6 <_dtoa_r+0x96>
 8009ada:	4b07      	ldr	r3, [pc, #28]	; (8009af8 <_dtoa_r+0xbd8>)
 8009adc:	f7ff ba8e 	b.w	8008ffc <_dtoa_r+0xdc>
 8009ae0:	9b02      	ldr	r3, [sp, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	dcae      	bgt.n	8009a44 <_dtoa_r+0xb24>
 8009ae6:	9b06      	ldr	r3, [sp, #24]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	f73f aea8 	bgt.w	800983e <_dtoa_r+0x91e>
 8009aee:	e7a9      	b.n	8009a44 <_dtoa_r+0xb24>
 8009af0:	0800b31f 	.word	0x0800b31f
 8009af4:	0800b27c 	.word	0x0800b27c
 8009af8:	0800b2a0 	.word	0x0800b2a0

08009afc <__sflush_r>:
 8009afc:	898a      	ldrh	r2, [r1, #12]
 8009afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b02:	4605      	mov	r5, r0
 8009b04:	0710      	lsls	r0, r2, #28
 8009b06:	460c      	mov	r4, r1
 8009b08:	d458      	bmi.n	8009bbc <__sflush_r+0xc0>
 8009b0a:	684b      	ldr	r3, [r1, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dc05      	bgt.n	8009b1c <__sflush_r+0x20>
 8009b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	dc02      	bgt.n	8009b1c <__sflush_r+0x20>
 8009b16:	2000      	movs	r0, #0
 8009b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b1e:	2e00      	cmp	r6, #0
 8009b20:	d0f9      	beq.n	8009b16 <__sflush_r+0x1a>
 8009b22:	2300      	movs	r3, #0
 8009b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b28:	682f      	ldr	r7, [r5, #0]
 8009b2a:	602b      	str	r3, [r5, #0]
 8009b2c:	d032      	beq.n	8009b94 <__sflush_r+0x98>
 8009b2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	075a      	lsls	r2, r3, #29
 8009b34:	d505      	bpl.n	8009b42 <__sflush_r+0x46>
 8009b36:	6863      	ldr	r3, [r4, #4]
 8009b38:	1ac0      	subs	r0, r0, r3
 8009b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b3c:	b10b      	cbz	r3, 8009b42 <__sflush_r+0x46>
 8009b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b40:	1ac0      	subs	r0, r0, r3
 8009b42:	2300      	movs	r3, #0
 8009b44:	4602      	mov	r2, r0
 8009b46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b48:	6a21      	ldr	r1, [r4, #32]
 8009b4a:	4628      	mov	r0, r5
 8009b4c:	47b0      	blx	r6
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	d106      	bne.n	8009b62 <__sflush_r+0x66>
 8009b54:	6829      	ldr	r1, [r5, #0]
 8009b56:	291d      	cmp	r1, #29
 8009b58:	d82c      	bhi.n	8009bb4 <__sflush_r+0xb8>
 8009b5a:	4a2a      	ldr	r2, [pc, #168]	; (8009c04 <__sflush_r+0x108>)
 8009b5c:	40ca      	lsrs	r2, r1
 8009b5e:	07d6      	lsls	r6, r2, #31
 8009b60:	d528      	bpl.n	8009bb4 <__sflush_r+0xb8>
 8009b62:	2200      	movs	r2, #0
 8009b64:	6062      	str	r2, [r4, #4]
 8009b66:	04d9      	lsls	r1, r3, #19
 8009b68:	6922      	ldr	r2, [r4, #16]
 8009b6a:	6022      	str	r2, [r4, #0]
 8009b6c:	d504      	bpl.n	8009b78 <__sflush_r+0x7c>
 8009b6e:	1c42      	adds	r2, r0, #1
 8009b70:	d101      	bne.n	8009b76 <__sflush_r+0x7a>
 8009b72:	682b      	ldr	r3, [r5, #0]
 8009b74:	b903      	cbnz	r3, 8009b78 <__sflush_r+0x7c>
 8009b76:	6560      	str	r0, [r4, #84]	; 0x54
 8009b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b7a:	602f      	str	r7, [r5, #0]
 8009b7c:	2900      	cmp	r1, #0
 8009b7e:	d0ca      	beq.n	8009b16 <__sflush_r+0x1a>
 8009b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b84:	4299      	cmp	r1, r3
 8009b86:	d002      	beq.n	8009b8e <__sflush_r+0x92>
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 fd7d 	bl	800a688 <_free_r>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	6360      	str	r0, [r4, #52]	; 0x34
 8009b92:	e7c1      	b.n	8009b18 <__sflush_r+0x1c>
 8009b94:	6a21      	ldr	r1, [r4, #32]
 8009b96:	2301      	movs	r3, #1
 8009b98:	4628      	mov	r0, r5
 8009b9a:	47b0      	blx	r6
 8009b9c:	1c41      	adds	r1, r0, #1
 8009b9e:	d1c7      	bne.n	8009b30 <__sflush_r+0x34>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0c4      	beq.n	8009b30 <__sflush_r+0x34>
 8009ba6:	2b1d      	cmp	r3, #29
 8009ba8:	d001      	beq.n	8009bae <__sflush_r+0xb2>
 8009baa:	2b16      	cmp	r3, #22
 8009bac:	d101      	bne.n	8009bb2 <__sflush_r+0xb6>
 8009bae:	602f      	str	r7, [r5, #0]
 8009bb0:	e7b1      	b.n	8009b16 <__sflush_r+0x1a>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bb8:	81a3      	strh	r3, [r4, #12]
 8009bba:	e7ad      	b.n	8009b18 <__sflush_r+0x1c>
 8009bbc:	690f      	ldr	r7, [r1, #16]
 8009bbe:	2f00      	cmp	r7, #0
 8009bc0:	d0a9      	beq.n	8009b16 <__sflush_r+0x1a>
 8009bc2:	0793      	lsls	r3, r2, #30
 8009bc4:	680e      	ldr	r6, [r1, #0]
 8009bc6:	bf08      	it	eq
 8009bc8:	694b      	ldreq	r3, [r1, #20]
 8009bca:	600f      	str	r7, [r1, #0]
 8009bcc:	bf18      	it	ne
 8009bce:	2300      	movne	r3, #0
 8009bd0:	eba6 0807 	sub.w	r8, r6, r7
 8009bd4:	608b      	str	r3, [r1, #8]
 8009bd6:	f1b8 0f00 	cmp.w	r8, #0
 8009bda:	dd9c      	ble.n	8009b16 <__sflush_r+0x1a>
 8009bdc:	6a21      	ldr	r1, [r4, #32]
 8009bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009be0:	4643      	mov	r3, r8
 8009be2:	463a      	mov	r2, r7
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b0      	blx	r6
 8009be8:	2800      	cmp	r0, #0
 8009bea:	dc06      	bgt.n	8009bfa <__sflush_r+0xfe>
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	e78e      	b.n	8009b18 <__sflush_r+0x1c>
 8009bfa:	4407      	add	r7, r0
 8009bfc:	eba8 0800 	sub.w	r8, r8, r0
 8009c00:	e7e9      	b.n	8009bd6 <__sflush_r+0xda>
 8009c02:	bf00      	nop
 8009c04:	20400001 	.word	0x20400001

08009c08 <_fflush_r>:
 8009c08:	b538      	push	{r3, r4, r5, lr}
 8009c0a:	690b      	ldr	r3, [r1, #16]
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	460c      	mov	r4, r1
 8009c10:	b913      	cbnz	r3, 8009c18 <_fflush_r+0x10>
 8009c12:	2500      	movs	r5, #0
 8009c14:	4628      	mov	r0, r5
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	b118      	cbz	r0, 8009c22 <_fflush_r+0x1a>
 8009c1a:	6983      	ldr	r3, [r0, #24]
 8009c1c:	b90b      	cbnz	r3, 8009c22 <_fflush_r+0x1a>
 8009c1e:	f000 f887 	bl	8009d30 <__sinit>
 8009c22:	4b14      	ldr	r3, [pc, #80]	; (8009c74 <_fflush_r+0x6c>)
 8009c24:	429c      	cmp	r4, r3
 8009c26:	d11b      	bne.n	8009c60 <_fflush_r+0x58>
 8009c28:	686c      	ldr	r4, [r5, #4]
 8009c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d0ef      	beq.n	8009c12 <_fflush_r+0xa>
 8009c32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c34:	07d0      	lsls	r0, r2, #31
 8009c36:	d404      	bmi.n	8009c42 <_fflush_r+0x3a>
 8009c38:	0599      	lsls	r1, r3, #22
 8009c3a:	d402      	bmi.n	8009c42 <_fflush_r+0x3a>
 8009c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c3e:	f000 f91a 	bl	8009e76 <__retarget_lock_acquire_recursive>
 8009c42:	4628      	mov	r0, r5
 8009c44:	4621      	mov	r1, r4
 8009c46:	f7ff ff59 	bl	8009afc <__sflush_r>
 8009c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c4c:	07da      	lsls	r2, r3, #31
 8009c4e:	4605      	mov	r5, r0
 8009c50:	d4e0      	bmi.n	8009c14 <_fflush_r+0xc>
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	059b      	lsls	r3, r3, #22
 8009c56:	d4dd      	bmi.n	8009c14 <_fflush_r+0xc>
 8009c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c5a:	f000 f90d 	bl	8009e78 <__retarget_lock_release_recursive>
 8009c5e:	e7d9      	b.n	8009c14 <_fflush_r+0xc>
 8009c60:	4b05      	ldr	r3, [pc, #20]	; (8009c78 <_fflush_r+0x70>)
 8009c62:	429c      	cmp	r4, r3
 8009c64:	d101      	bne.n	8009c6a <_fflush_r+0x62>
 8009c66:	68ac      	ldr	r4, [r5, #8]
 8009c68:	e7df      	b.n	8009c2a <_fflush_r+0x22>
 8009c6a:	4b04      	ldr	r3, [pc, #16]	; (8009c7c <_fflush_r+0x74>)
 8009c6c:	429c      	cmp	r4, r3
 8009c6e:	bf08      	it	eq
 8009c70:	68ec      	ldreq	r4, [r5, #12]
 8009c72:	e7da      	b.n	8009c2a <_fflush_r+0x22>
 8009c74:	0800b350 	.word	0x0800b350
 8009c78:	0800b370 	.word	0x0800b370
 8009c7c:	0800b330 	.word	0x0800b330

08009c80 <std>:
 8009c80:	2300      	movs	r3, #0
 8009c82:	b510      	push	{r4, lr}
 8009c84:	4604      	mov	r4, r0
 8009c86:	e9c0 3300 	strd	r3, r3, [r0]
 8009c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c8e:	6083      	str	r3, [r0, #8]
 8009c90:	8181      	strh	r1, [r0, #12]
 8009c92:	6643      	str	r3, [r0, #100]	; 0x64
 8009c94:	81c2      	strh	r2, [r0, #14]
 8009c96:	6183      	str	r3, [r0, #24]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	2208      	movs	r2, #8
 8009c9c:	305c      	adds	r0, #92	; 0x5c
 8009c9e:	f7fe faf1 	bl	8008284 <memset>
 8009ca2:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <std+0x38>)
 8009ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8009ca6:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <std+0x3c>)
 8009ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009caa:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <std+0x40>)
 8009cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cae:	4b05      	ldr	r3, [pc, #20]	; (8009cc4 <std+0x44>)
 8009cb0:	6224      	str	r4, [r4, #32]
 8009cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8009cb4:	bd10      	pop	{r4, pc}
 8009cb6:	bf00      	nop
 8009cb8:	0800ab1d 	.word	0x0800ab1d
 8009cbc:	0800ab3f 	.word	0x0800ab3f
 8009cc0:	0800ab77 	.word	0x0800ab77
 8009cc4:	0800ab9b 	.word	0x0800ab9b

08009cc8 <_cleanup_r>:
 8009cc8:	4901      	ldr	r1, [pc, #4]	; (8009cd0 <_cleanup_r+0x8>)
 8009cca:	f000 b8af 	b.w	8009e2c <_fwalk_reent>
 8009cce:	bf00      	nop
 8009cd0:	08009c09 	.word	0x08009c09

08009cd4 <__sfmoreglue>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	2268      	movs	r2, #104	; 0x68
 8009cd8:	1e4d      	subs	r5, r1, #1
 8009cda:	4355      	muls	r5, r2
 8009cdc:	460e      	mov	r6, r1
 8009cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009ce2:	f000 fd3d 	bl	800a760 <_malloc_r>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	b140      	cbz	r0, 8009cfc <__sfmoreglue+0x28>
 8009cea:	2100      	movs	r1, #0
 8009cec:	e9c0 1600 	strd	r1, r6, [r0]
 8009cf0:	300c      	adds	r0, #12
 8009cf2:	60a0      	str	r0, [r4, #8]
 8009cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009cf8:	f7fe fac4 	bl	8008284 <memset>
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	bd70      	pop	{r4, r5, r6, pc}

08009d00 <__sfp_lock_acquire>:
 8009d00:	4801      	ldr	r0, [pc, #4]	; (8009d08 <__sfp_lock_acquire+0x8>)
 8009d02:	f000 b8b8 	b.w	8009e76 <__retarget_lock_acquire_recursive>
 8009d06:	bf00      	nop
 8009d08:	200017b1 	.word	0x200017b1

08009d0c <__sfp_lock_release>:
 8009d0c:	4801      	ldr	r0, [pc, #4]	; (8009d14 <__sfp_lock_release+0x8>)
 8009d0e:	f000 b8b3 	b.w	8009e78 <__retarget_lock_release_recursive>
 8009d12:	bf00      	nop
 8009d14:	200017b1 	.word	0x200017b1

08009d18 <__sinit_lock_acquire>:
 8009d18:	4801      	ldr	r0, [pc, #4]	; (8009d20 <__sinit_lock_acquire+0x8>)
 8009d1a:	f000 b8ac 	b.w	8009e76 <__retarget_lock_acquire_recursive>
 8009d1e:	bf00      	nop
 8009d20:	200017b2 	.word	0x200017b2

08009d24 <__sinit_lock_release>:
 8009d24:	4801      	ldr	r0, [pc, #4]	; (8009d2c <__sinit_lock_release+0x8>)
 8009d26:	f000 b8a7 	b.w	8009e78 <__retarget_lock_release_recursive>
 8009d2a:	bf00      	nop
 8009d2c:	200017b2 	.word	0x200017b2

08009d30 <__sinit>:
 8009d30:	b510      	push	{r4, lr}
 8009d32:	4604      	mov	r4, r0
 8009d34:	f7ff fff0 	bl	8009d18 <__sinit_lock_acquire>
 8009d38:	69a3      	ldr	r3, [r4, #24]
 8009d3a:	b11b      	cbz	r3, 8009d44 <__sinit+0x14>
 8009d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d40:	f7ff bff0 	b.w	8009d24 <__sinit_lock_release>
 8009d44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d48:	6523      	str	r3, [r4, #80]	; 0x50
 8009d4a:	4b13      	ldr	r3, [pc, #76]	; (8009d98 <__sinit+0x68>)
 8009d4c:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <__sinit+0x6c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d52:	42a3      	cmp	r3, r4
 8009d54:	bf04      	itt	eq
 8009d56:	2301      	moveq	r3, #1
 8009d58:	61a3      	streq	r3, [r4, #24]
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 f820 	bl	8009da0 <__sfp>
 8009d60:	6060      	str	r0, [r4, #4]
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 f81c 	bl	8009da0 <__sfp>
 8009d68:	60a0      	str	r0, [r4, #8]
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	f000 f818 	bl	8009da0 <__sfp>
 8009d70:	2200      	movs	r2, #0
 8009d72:	60e0      	str	r0, [r4, #12]
 8009d74:	2104      	movs	r1, #4
 8009d76:	6860      	ldr	r0, [r4, #4]
 8009d78:	f7ff ff82 	bl	8009c80 <std>
 8009d7c:	68a0      	ldr	r0, [r4, #8]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	2109      	movs	r1, #9
 8009d82:	f7ff ff7d 	bl	8009c80 <std>
 8009d86:	68e0      	ldr	r0, [r4, #12]
 8009d88:	2202      	movs	r2, #2
 8009d8a:	2112      	movs	r1, #18
 8009d8c:	f7ff ff78 	bl	8009c80 <std>
 8009d90:	2301      	movs	r3, #1
 8009d92:	61a3      	str	r3, [r4, #24]
 8009d94:	e7d2      	b.n	8009d3c <__sinit+0xc>
 8009d96:	bf00      	nop
 8009d98:	0800b268 	.word	0x0800b268
 8009d9c:	08009cc9 	.word	0x08009cc9

08009da0 <__sfp>:
 8009da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da2:	4607      	mov	r7, r0
 8009da4:	f7ff ffac 	bl	8009d00 <__sfp_lock_acquire>
 8009da8:	4b1e      	ldr	r3, [pc, #120]	; (8009e24 <__sfp+0x84>)
 8009daa:	681e      	ldr	r6, [r3, #0]
 8009dac:	69b3      	ldr	r3, [r6, #24]
 8009dae:	b913      	cbnz	r3, 8009db6 <__sfp+0x16>
 8009db0:	4630      	mov	r0, r6
 8009db2:	f7ff ffbd 	bl	8009d30 <__sinit>
 8009db6:	3648      	adds	r6, #72	; 0x48
 8009db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	d503      	bpl.n	8009dc8 <__sfp+0x28>
 8009dc0:	6833      	ldr	r3, [r6, #0]
 8009dc2:	b30b      	cbz	r3, 8009e08 <__sfp+0x68>
 8009dc4:	6836      	ldr	r6, [r6, #0]
 8009dc6:	e7f7      	b.n	8009db8 <__sfp+0x18>
 8009dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009dcc:	b9d5      	cbnz	r5, 8009e04 <__sfp+0x64>
 8009dce:	4b16      	ldr	r3, [pc, #88]	; (8009e28 <__sfp+0x88>)
 8009dd0:	60e3      	str	r3, [r4, #12]
 8009dd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009dd6:	6665      	str	r5, [r4, #100]	; 0x64
 8009dd8:	f000 f84c 	bl	8009e74 <__retarget_lock_init_recursive>
 8009ddc:	f7ff ff96 	bl	8009d0c <__sfp_lock_release>
 8009de0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009de4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009de8:	6025      	str	r5, [r4, #0]
 8009dea:	61a5      	str	r5, [r4, #24]
 8009dec:	2208      	movs	r2, #8
 8009dee:	4629      	mov	r1, r5
 8009df0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009df4:	f7fe fa46 	bl	8008284 <memset>
 8009df8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009dfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e00:	4620      	mov	r0, r4
 8009e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e04:	3468      	adds	r4, #104	; 0x68
 8009e06:	e7d9      	b.n	8009dbc <__sfp+0x1c>
 8009e08:	2104      	movs	r1, #4
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	f7ff ff62 	bl	8009cd4 <__sfmoreglue>
 8009e10:	4604      	mov	r4, r0
 8009e12:	6030      	str	r0, [r6, #0]
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d1d5      	bne.n	8009dc4 <__sfp+0x24>
 8009e18:	f7ff ff78 	bl	8009d0c <__sfp_lock_release>
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	603b      	str	r3, [r7, #0]
 8009e20:	e7ee      	b.n	8009e00 <__sfp+0x60>
 8009e22:	bf00      	nop
 8009e24:	0800b268 	.word	0x0800b268
 8009e28:	ffff0001 	.word	0xffff0001

08009e2c <_fwalk_reent>:
 8009e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e30:	4606      	mov	r6, r0
 8009e32:	4688      	mov	r8, r1
 8009e34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e38:	2700      	movs	r7, #0
 8009e3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e3e:	f1b9 0901 	subs.w	r9, r9, #1
 8009e42:	d505      	bpl.n	8009e50 <_fwalk_reent+0x24>
 8009e44:	6824      	ldr	r4, [r4, #0]
 8009e46:	2c00      	cmp	r4, #0
 8009e48:	d1f7      	bne.n	8009e3a <_fwalk_reent+0xe>
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e50:	89ab      	ldrh	r3, [r5, #12]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d907      	bls.n	8009e66 <_fwalk_reent+0x3a>
 8009e56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	d003      	beq.n	8009e66 <_fwalk_reent+0x3a>
 8009e5e:	4629      	mov	r1, r5
 8009e60:	4630      	mov	r0, r6
 8009e62:	47c0      	blx	r8
 8009e64:	4307      	orrs	r7, r0
 8009e66:	3568      	adds	r5, #104	; 0x68
 8009e68:	e7e9      	b.n	8009e3e <_fwalk_reent+0x12>
	...

08009e6c <_localeconv_r>:
 8009e6c:	4800      	ldr	r0, [pc, #0]	; (8009e70 <_localeconv_r+0x4>)
 8009e6e:	4770      	bx	lr
 8009e70:	20000164 	.word	0x20000164

08009e74 <__retarget_lock_init_recursive>:
 8009e74:	4770      	bx	lr

08009e76 <__retarget_lock_acquire_recursive>:
 8009e76:	4770      	bx	lr

08009e78 <__retarget_lock_release_recursive>:
 8009e78:	4770      	bx	lr

08009e7a <__swhatbuf_r>:
 8009e7a:	b570      	push	{r4, r5, r6, lr}
 8009e7c:	460e      	mov	r6, r1
 8009e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e82:	2900      	cmp	r1, #0
 8009e84:	b096      	sub	sp, #88	; 0x58
 8009e86:	4614      	mov	r4, r2
 8009e88:	461d      	mov	r5, r3
 8009e8a:	da08      	bge.n	8009e9e <__swhatbuf_r+0x24>
 8009e8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	602a      	str	r2, [r5, #0]
 8009e94:	061a      	lsls	r2, r3, #24
 8009e96:	d410      	bmi.n	8009eba <__swhatbuf_r+0x40>
 8009e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e9c:	e00e      	b.n	8009ebc <__swhatbuf_r+0x42>
 8009e9e:	466a      	mov	r2, sp
 8009ea0:	f000 fed2 	bl	800ac48 <_fstat_r>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	dbf1      	blt.n	8009e8c <__swhatbuf_r+0x12>
 8009ea8:	9a01      	ldr	r2, [sp, #4]
 8009eaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009eae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009eb2:	425a      	negs	r2, r3
 8009eb4:	415a      	adcs	r2, r3
 8009eb6:	602a      	str	r2, [r5, #0]
 8009eb8:	e7ee      	b.n	8009e98 <__swhatbuf_r+0x1e>
 8009eba:	2340      	movs	r3, #64	; 0x40
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	b016      	add	sp, #88	; 0x58
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}

08009ec4 <__smakebuf_r>:
 8009ec4:	898b      	ldrh	r3, [r1, #12]
 8009ec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ec8:	079d      	lsls	r5, r3, #30
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460c      	mov	r4, r1
 8009ece:	d507      	bpl.n	8009ee0 <__smakebuf_r+0x1c>
 8009ed0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	6123      	str	r3, [r4, #16]
 8009ed8:	2301      	movs	r3, #1
 8009eda:	6163      	str	r3, [r4, #20]
 8009edc:	b002      	add	sp, #8
 8009ede:	bd70      	pop	{r4, r5, r6, pc}
 8009ee0:	ab01      	add	r3, sp, #4
 8009ee2:	466a      	mov	r2, sp
 8009ee4:	f7ff ffc9 	bl	8009e7a <__swhatbuf_r>
 8009ee8:	9900      	ldr	r1, [sp, #0]
 8009eea:	4605      	mov	r5, r0
 8009eec:	4630      	mov	r0, r6
 8009eee:	f000 fc37 	bl	800a760 <_malloc_r>
 8009ef2:	b948      	cbnz	r0, 8009f08 <__smakebuf_r+0x44>
 8009ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef8:	059a      	lsls	r2, r3, #22
 8009efa:	d4ef      	bmi.n	8009edc <__smakebuf_r+0x18>
 8009efc:	f023 0303 	bic.w	r3, r3, #3
 8009f00:	f043 0302 	orr.w	r3, r3, #2
 8009f04:	81a3      	strh	r3, [r4, #12]
 8009f06:	e7e3      	b.n	8009ed0 <__smakebuf_r+0xc>
 8009f08:	4b0d      	ldr	r3, [pc, #52]	; (8009f40 <__smakebuf_r+0x7c>)
 8009f0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	6020      	str	r0, [r4, #0]
 8009f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	9b00      	ldr	r3, [sp, #0]
 8009f18:	6163      	str	r3, [r4, #20]
 8009f1a:	9b01      	ldr	r3, [sp, #4]
 8009f1c:	6120      	str	r0, [r4, #16]
 8009f1e:	b15b      	cbz	r3, 8009f38 <__smakebuf_r+0x74>
 8009f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f24:	4630      	mov	r0, r6
 8009f26:	f000 fea1 	bl	800ac6c <_isatty_r>
 8009f2a:	b128      	cbz	r0, 8009f38 <__smakebuf_r+0x74>
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f023 0303 	bic.w	r3, r3, #3
 8009f32:	f043 0301 	orr.w	r3, r3, #1
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	89a0      	ldrh	r0, [r4, #12]
 8009f3a:	4305      	orrs	r5, r0
 8009f3c:	81a5      	strh	r5, [r4, #12]
 8009f3e:	e7cd      	b.n	8009edc <__smakebuf_r+0x18>
 8009f40:	08009cc9 	.word	0x08009cc9

08009f44 <malloc>:
 8009f44:	4b02      	ldr	r3, [pc, #8]	; (8009f50 <malloc+0xc>)
 8009f46:	4601      	mov	r1, r0
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	f000 bc09 	b.w	800a760 <_malloc_r>
 8009f4e:	bf00      	nop
 8009f50:	20000010 	.word	0x20000010

08009f54 <_Balloc>:
 8009f54:	b570      	push	{r4, r5, r6, lr}
 8009f56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f58:	4604      	mov	r4, r0
 8009f5a:	460d      	mov	r5, r1
 8009f5c:	b976      	cbnz	r6, 8009f7c <_Balloc+0x28>
 8009f5e:	2010      	movs	r0, #16
 8009f60:	f7ff fff0 	bl	8009f44 <malloc>
 8009f64:	4602      	mov	r2, r0
 8009f66:	6260      	str	r0, [r4, #36]	; 0x24
 8009f68:	b920      	cbnz	r0, 8009f74 <_Balloc+0x20>
 8009f6a:	4b18      	ldr	r3, [pc, #96]	; (8009fcc <_Balloc+0x78>)
 8009f6c:	4818      	ldr	r0, [pc, #96]	; (8009fd0 <_Balloc+0x7c>)
 8009f6e:	2166      	movs	r1, #102	; 0x66
 8009f70:	f000 fe2a 	bl	800abc8 <__assert_func>
 8009f74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f78:	6006      	str	r6, [r0, #0]
 8009f7a:	60c6      	str	r6, [r0, #12]
 8009f7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f7e:	68f3      	ldr	r3, [r6, #12]
 8009f80:	b183      	cbz	r3, 8009fa4 <_Balloc+0x50>
 8009f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f8a:	b9b8      	cbnz	r0, 8009fbc <_Balloc+0x68>
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	fa01 f605 	lsl.w	r6, r1, r5
 8009f92:	1d72      	adds	r2, r6, #5
 8009f94:	0092      	lsls	r2, r2, #2
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fb60 	bl	800a65c <_calloc_r>
 8009f9c:	b160      	cbz	r0, 8009fb8 <_Balloc+0x64>
 8009f9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fa2:	e00e      	b.n	8009fc2 <_Balloc+0x6e>
 8009fa4:	2221      	movs	r2, #33	; 0x21
 8009fa6:	2104      	movs	r1, #4
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f000 fb57 	bl	800a65c <_calloc_r>
 8009fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fb0:	60f0      	str	r0, [r6, #12]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1e4      	bne.n	8009f82 <_Balloc+0x2e>
 8009fb8:	2000      	movs	r0, #0
 8009fba:	bd70      	pop	{r4, r5, r6, pc}
 8009fbc:	6802      	ldr	r2, [r0, #0]
 8009fbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fc8:	e7f7      	b.n	8009fba <_Balloc+0x66>
 8009fca:	bf00      	nop
 8009fcc:	0800b2ad 	.word	0x0800b2ad
 8009fd0:	0800b390 	.word	0x0800b390

08009fd4 <_Bfree>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fd8:	4605      	mov	r5, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	b976      	cbnz	r6, 8009ffc <_Bfree+0x28>
 8009fde:	2010      	movs	r0, #16
 8009fe0:	f7ff ffb0 	bl	8009f44 <malloc>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	6268      	str	r0, [r5, #36]	; 0x24
 8009fe8:	b920      	cbnz	r0, 8009ff4 <_Bfree+0x20>
 8009fea:	4b09      	ldr	r3, [pc, #36]	; (800a010 <_Bfree+0x3c>)
 8009fec:	4809      	ldr	r0, [pc, #36]	; (800a014 <_Bfree+0x40>)
 8009fee:	218a      	movs	r1, #138	; 0x8a
 8009ff0:	f000 fdea 	bl	800abc8 <__assert_func>
 8009ff4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ff8:	6006      	str	r6, [r0, #0]
 8009ffa:	60c6      	str	r6, [r0, #12]
 8009ffc:	b13c      	cbz	r4, 800a00e <_Bfree+0x3a>
 8009ffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a000:	6862      	ldr	r2, [r4, #4]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a008:	6021      	str	r1, [r4, #0]
 800a00a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a00e:	bd70      	pop	{r4, r5, r6, pc}
 800a010:	0800b2ad 	.word	0x0800b2ad
 800a014:	0800b390 	.word	0x0800b390

0800a018 <__multadd>:
 800a018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a01c:	690d      	ldr	r5, [r1, #16]
 800a01e:	4607      	mov	r7, r0
 800a020:	460c      	mov	r4, r1
 800a022:	461e      	mov	r6, r3
 800a024:	f101 0c14 	add.w	ip, r1, #20
 800a028:	2000      	movs	r0, #0
 800a02a:	f8dc 3000 	ldr.w	r3, [ip]
 800a02e:	b299      	uxth	r1, r3
 800a030:	fb02 6101 	mla	r1, r2, r1, r6
 800a034:	0c1e      	lsrs	r6, r3, #16
 800a036:	0c0b      	lsrs	r3, r1, #16
 800a038:	fb02 3306 	mla	r3, r2, r6, r3
 800a03c:	b289      	uxth	r1, r1
 800a03e:	3001      	adds	r0, #1
 800a040:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a044:	4285      	cmp	r5, r0
 800a046:	f84c 1b04 	str.w	r1, [ip], #4
 800a04a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a04e:	dcec      	bgt.n	800a02a <__multadd+0x12>
 800a050:	b30e      	cbz	r6, 800a096 <__multadd+0x7e>
 800a052:	68a3      	ldr	r3, [r4, #8]
 800a054:	42ab      	cmp	r3, r5
 800a056:	dc19      	bgt.n	800a08c <__multadd+0x74>
 800a058:	6861      	ldr	r1, [r4, #4]
 800a05a:	4638      	mov	r0, r7
 800a05c:	3101      	adds	r1, #1
 800a05e:	f7ff ff79 	bl	8009f54 <_Balloc>
 800a062:	4680      	mov	r8, r0
 800a064:	b928      	cbnz	r0, 800a072 <__multadd+0x5a>
 800a066:	4602      	mov	r2, r0
 800a068:	4b0c      	ldr	r3, [pc, #48]	; (800a09c <__multadd+0x84>)
 800a06a:	480d      	ldr	r0, [pc, #52]	; (800a0a0 <__multadd+0x88>)
 800a06c:	21b5      	movs	r1, #181	; 0xb5
 800a06e:	f000 fdab 	bl	800abc8 <__assert_func>
 800a072:	6922      	ldr	r2, [r4, #16]
 800a074:	3202      	adds	r2, #2
 800a076:	f104 010c 	add.w	r1, r4, #12
 800a07a:	0092      	lsls	r2, r2, #2
 800a07c:	300c      	adds	r0, #12
 800a07e:	f7fe f8f3 	bl	8008268 <memcpy>
 800a082:	4621      	mov	r1, r4
 800a084:	4638      	mov	r0, r7
 800a086:	f7ff ffa5 	bl	8009fd4 <_Bfree>
 800a08a:	4644      	mov	r4, r8
 800a08c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a090:	3501      	adds	r5, #1
 800a092:	615e      	str	r6, [r3, #20]
 800a094:	6125      	str	r5, [r4, #16]
 800a096:	4620      	mov	r0, r4
 800a098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a09c:	0800b31f 	.word	0x0800b31f
 800a0a0:	0800b390 	.word	0x0800b390

0800a0a4 <__hi0bits>:
 800a0a4:	0c03      	lsrs	r3, r0, #16
 800a0a6:	041b      	lsls	r3, r3, #16
 800a0a8:	b9d3      	cbnz	r3, 800a0e0 <__hi0bits+0x3c>
 800a0aa:	0400      	lsls	r0, r0, #16
 800a0ac:	2310      	movs	r3, #16
 800a0ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a0b2:	bf04      	itt	eq
 800a0b4:	0200      	lsleq	r0, r0, #8
 800a0b6:	3308      	addeq	r3, #8
 800a0b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a0bc:	bf04      	itt	eq
 800a0be:	0100      	lsleq	r0, r0, #4
 800a0c0:	3304      	addeq	r3, #4
 800a0c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a0c6:	bf04      	itt	eq
 800a0c8:	0080      	lsleq	r0, r0, #2
 800a0ca:	3302      	addeq	r3, #2
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	db05      	blt.n	800a0dc <__hi0bits+0x38>
 800a0d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a0d4:	f103 0301 	add.w	r3, r3, #1
 800a0d8:	bf08      	it	eq
 800a0da:	2320      	moveq	r3, #32
 800a0dc:	4618      	mov	r0, r3
 800a0de:	4770      	bx	lr
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e7e4      	b.n	800a0ae <__hi0bits+0xa>

0800a0e4 <__lo0bits>:
 800a0e4:	6803      	ldr	r3, [r0, #0]
 800a0e6:	f013 0207 	ands.w	r2, r3, #7
 800a0ea:	4601      	mov	r1, r0
 800a0ec:	d00b      	beq.n	800a106 <__lo0bits+0x22>
 800a0ee:	07da      	lsls	r2, r3, #31
 800a0f0:	d423      	bmi.n	800a13a <__lo0bits+0x56>
 800a0f2:	0798      	lsls	r0, r3, #30
 800a0f4:	bf49      	itett	mi
 800a0f6:	085b      	lsrmi	r3, r3, #1
 800a0f8:	089b      	lsrpl	r3, r3, #2
 800a0fa:	2001      	movmi	r0, #1
 800a0fc:	600b      	strmi	r3, [r1, #0]
 800a0fe:	bf5c      	itt	pl
 800a100:	600b      	strpl	r3, [r1, #0]
 800a102:	2002      	movpl	r0, #2
 800a104:	4770      	bx	lr
 800a106:	b298      	uxth	r0, r3
 800a108:	b9a8      	cbnz	r0, 800a136 <__lo0bits+0x52>
 800a10a:	0c1b      	lsrs	r3, r3, #16
 800a10c:	2010      	movs	r0, #16
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	b90a      	cbnz	r2, 800a116 <__lo0bits+0x32>
 800a112:	3008      	adds	r0, #8
 800a114:	0a1b      	lsrs	r3, r3, #8
 800a116:	071a      	lsls	r2, r3, #28
 800a118:	bf04      	itt	eq
 800a11a:	091b      	lsreq	r3, r3, #4
 800a11c:	3004      	addeq	r0, #4
 800a11e:	079a      	lsls	r2, r3, #30
 800a120:	bf04      	itt	eq
 800a122:	089b      	lsreq	r3, r3, #2
 800a124:	3002      	addeq	r0, #2
 800a126:	07da      	lsls	r2, r3, #31
 800a128:	d403      	bmi.n	800a132 <__lo0bits+0x4e>
 800a12a:	085b      	lsrs	r3, r3, #1
 800a12c:	f100 0001 	add.w	r0, r0, #1
 800a130:	d005      	beq.n	800a13e <__lo0bits+0x5a>
 800a132:	600b      	str	r3, [r1, #0]
 800a134:	4770      	bx	lr
 800a136:	4610      	mov	r0, r2
 800a138:	e7e9      	b.n	800a10e <__lo0bits+0x2a>
 800a13a:	2000      	movs	r0, #0
 800a13c:	4770      	bx	lr
 800a13e:	2020      	movs	r0, #32
 800a140:	4770      	bx	lr
	...

0800a144 <__i2b>:
 800a144:	b510      	push	{r4, lr}
 800a146:	460c      	mov	r4, r1
 800a148:	2101      	movs	r1, #1
 800a14a:	f7ff ff03 	bl	8009f54 <_Balloc>
 800a14e:	4602      	mov	r2, r0
 800a150:	b928      	cbnz	r0, 800a15e <__i2b+0x1a>
 800a152:	4b05      	ldr	r3, [pc, #20]	; (800a168 <__i2b+0x24>)
 800a154:	4805      	ldr	r0, [pc, #20]	; (800a16c <__i2b+0x28>)
 800a156:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a15a:	f000 fd35 	bl	800abc8 <__assert_func>
 800a15e:	2301      	movs	r3, #1
 800a160:	6144      	str	r4, [r0, #20]
 800a162:	6103      	str	r3, [r0, #16]
 800a164:	bd10      	pop	{r4, pc}
 800a166:	bf00      	nop
 800a168:	0800b31f 	.word	0x0800b31f
 800a16c:	0800b390 	.word	0x0800b390

0800a170 <__multiply>:
 800a170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a174:	4691      	mov	r9, r2
 800a176:	690a      	ldr	r2, [r1, #16]
 800a178:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	bfb8      	it	lt
 800a180:	460b      	movlt	r3, r1
 800a182:	460c      	mov	r4, r1
 800a184:	bfbc      	itt	lt
 800a186:	464c      	movlt	r4, r9
 800a188:	4699      	movlt	r9, r3
 800a18a:	6927      	ldr	r7, [r4, #16]
 800a18c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a190:	68a3      	ldr	r3, [r4, #8]
 800a192:	6861      	ldr	r1, [r4, #4]
 800a194:	eb07 060a 	add.w	r6, r7, sl
 800a198:	42b3      	cmp	r3, r6
 800a19a:	b085      	sub	sp, #20
 800a19c:	bfb8      	it	lt
 800a19e:	3101      	addlt	r1, #1
 800a1a0:	f7ff fed8 	bl	8009f54 <_Balloc>
 800a1a4:	b930      	cbnz	r0, 800a1b4 <__multiply+0x44>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	4b44      	ldr	r3, [pc, #272]	; (800a2bc <__multiply+0x14c>)
 800a1aa:	4845      	ldr	r0, [pc, #276]	; (800a2c0 <__multiply+0x150>)
 800a1ac:	f240 115d 	movw	r1, #349	; 0x15d
 800a1b0:	f000 fd0a 	bl	800abc8 <__assert_func>
 800a1b4:	f100 0514 	add.w	r5, r0, #20
 800a1b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a1bc:	462b      	mov	r3, r5
 800a1be:	2200      	movs	r2, #0
 800a1c0:	4543      	cmp	r3, r8
 800a1c2:	d321      	bcc.n	800a208 <__multiply+0x98>
 800a1c4:	f104 0314 	add.w	r3, r4, #20
 800a1c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a1cc:	f109 0314 	add.w	r3, r9, #20
 800a1d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a1d4:	9202      	str	r2, [sp, #8]
 800a1d6:	1b3a      	subs	r2, r7, r4
 800a1d8:	3a15      	subs	r2, #21
 800a1da:	f022 0203 	bic.w	r2, r2, #3
 800a1de:	3204      	adds	r2, #4
 800a1e0:	f104 0115 	add.w	r1, r4, #21
 800a1e4:	428f      	cmp	r7, r1
 800a1e6:	bf38      	it	cc
 800a1e8:	2204      	movcc	r2, #4
 800a1ea:	9201      	str	r2, [sp, #4]
 800a1ec:	9a02      	ldr	r2, [sp, #8]
 800a1ee:	9303      	str	r3, [sp, #12]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d80c      	bhi.n	800a20e <__multiply+0x9e>
 800a1f4:	2e00      	cmp	r6, #0
 800a1f6:	dd03      	ble.n	800a200 <__multiply+0x90>
 800a1f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d05a      	beq.n	800a2b6 <__multiply+0x146>
 800a200:	6106      	str	r6, [r0, #16]
 800a202:	b005      	add	sp, #20
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	f843 2b04 	str.w	r2, [r3], #4
 800a20c:	e7d8      	b.n	800a1c0 <__multiply+0x50>
 800a20e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a212:	f1ba 0f00 	cmp.w	sl, #0
 800a216:	d024      	beq.n	800a262 <__multiply+0xf2>
 800a218:	f104 0e14 	add.w	lr, r4, #20
 800a21c:	46a9      	mov	r9, r5
 800a21e:	f04f 0c00 	mov.w	ip, #0
 800a222:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a226:	f8d9 1000 	ldr.w	r1, [r9]
 800a22a:	fa1f fb82 	uxth.w	fp, r2
 800a22e:	b289      	uxth	r1, r1
 800a230:	fb0a 110b 	mla	r1, sl, fp, r1
 800a234:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a238:	f8d9 2000 	ldr.w	r2, [r9]
 800a23c:	4461      	add	r1, ip
 800a23e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a242:	fb0a c20b 	mla	r2, sl, fp, ip
 800a246:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a24a:	b289      	uxth	r1, r1
 800a24c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a250:	4577      	cmp	r7, lr
 800a252:	f849 1b04 	str.w	r1, [r9], #4
 800a256:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a25a:	d8e2      	bhi.n	800a222 <__multiply+0xb2>
 800a25c:	9a01      	ldr	r2, [sp, #4]
 800a25e:	f845 c002 	str.w	ip, [r5, r2]
 800a262:	9a03      	ldr	r2, [sp, #12]
 800a264:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a268:	3304      	adds	r3, #4
 800a26a:	f1b9 0f00 	cmp.w	r9, #0
 800a26e:	d020      	beq.n	800a2b2 <__multiply+0x142>
 800a270:	6829      	ldr	r1, [r5, #0]
 800a272:	f104 0c14 	add.w	ip, r4, #20
 800a276:	46ae      	mov	lr, r5
 800a278:	f04f 0a00 	mov.w	sl, #0
 800a27c:	f8bc b000 	ldrh.w	fp, [ip]
 800a280:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a284:	fb09 220b 	mla	r2, r9, fp, r2
 800a288:	4492      	add	sl, r2
 800a28a:	b289      	uxth	r1, r1
 800a28c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a290:	f84e 1b04 	str.w	r1, [lr], #4
 800a294:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a298:	f8be 1000 	ldrh.w	r1, [lr]
 800a29c:	0c12      	lsrs	r2, r2, #16
 800a29e:	fb09 1102 	mla	r1, r9, r2, r1
 800a2a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a2a6:	4567      	cmp	r7, ip
 800a2a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a2ac:	d8e6      	bhi.n	800a27c <__multiply+0x10c>
 800a2ae:	9a01      	ldr	r2, [sp, #4]
 800a2b0:	50a9      	str	r1, [r5, r2]
 800a2b2:	3504      	adds	r5, #4
 800a2b4:	e79a      	b.n	800a1ec <__multiply+0x7c>
 800a2b6:	3e01      	subs	r6, #1
 800a2b8:	e79c      	b.n	800a1f4 <__multiply+0x84>
 800a2ba:	bf00      	nop
 800a2bc:	0800b31f 	.word	0x0800b31f
 800a2c0:	0800b390 	.word	0x0800b390

0800a2c4 <__pow5mult>:
 800a2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c8:	4615      	mov	r5, r2
 800a2ca:	f012 0203 	ands.w	r2, r2, #3
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	460f      	mov	r7, r1
 800a2d2:	d007      	beq.n	800a2e4 <__pow5mult+0x20>
 800a2d4:	4c25      	ldr	r4, [pc, #148]	; (800a36c <__pow5mult+0xa8>)
 800a2d6:	3a01      	subs	r2, #1
 800a2d8:	2300      	movs	r3, #0
 800a2da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a2de:	f7ff fe9b 	bl	800a018 <__multadd>
 800a2e2:	4607      	mov	r7, r0
 800a2e4:	10ad      	asrs	r5, r5, #2
 800a2e6:	d03d      	beq.n	800a364 <__pow5mult+0xa0>
 800a2e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a2ea:	b97c      	cbnz	r4, 800a30c <__pow5mult+0x48>
 800a2ec:	2010      	movs	r0, #16
 800a2ee:	f7ff fe29 	bl	8009f44 <malloc>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	6270      	str	r0, [r6, #36]	; 0x24
 800a2f6:	b928      	cbnz	r0, 800a304 <__pow5mult+0x40>
 800a2f8:	4b1d      	ldr	r3, [pc, #116]	; (800a370 <__pow5mult+0xac>)
 800a2fa:	481e      	ldr	r0, [pc, #120]	; (800a374 <__pow5mult+0xb0>)
 800a2fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a300:	f000 fc62 	bl	800abc8 <__assert_func>
 800a304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a308:	6004      	str	r4, [r0, #0]
 800a30a:	60c4      	str	r4, [r0, #12]
 800a30c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a314:	b94c      	cbnz	r4, 800a32a <__pow5mult+0x66>
 800a316:	f240 2171 	movw	r1, #625	; 0x271
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7ff ff12 	bl	800a144 <__i2b>
 800a320:	2300      	movs	r3, #0
 800a322:	f8c8 0008 	str.w	r0, [r8, #8]
 800a326:	4604      	mov	r4, r0
 800a328:	6003      	str	r3, [r0, #0]
 800a32a:	f04f 0900 	mov.w	r9, #0
 800a32e:	07eb      	lsls	r3, r5, #31
 800a330:	d50a      	bpl.n	800a348 <__pow5mult+0x84>
 800a332:	4639      	mov	r1, r7
 800a334:	4622      	mov	r2, r4
 800a336:	4630      	mov	r0, r6
 800a338:	f7ff ff1a 	bl	800a170 <__multiply>
 800a33c:	4639      	mov	r1, r7
 800a33e:	4680      	mov	r8, r0
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff fe47 	bl	8009fd4 <_Bfree>
 800a346:	4647      	mov	r7, r8
 800a348:	106d      	asrs	r5, r5, #1
 800a34a:	d00b      	beq.n	800a364 <__pow5mult+0xa0>
 800a34c:	6820      	ldr	r0, [r4, #0]
 800a34e:	b938      	cbnz	r0, 800a360 <__pow5mult+0x9c>
 800a350:	4622      	mov	r2, r4
 800a352:	4621      	mov	r1, r4
 800a354:	4630      	mov	r0, r6
 800a356:	f7ff ff0b 	bl	800a170 <__multiply>
 800a35a:	6020      	str	r0, [r4, #0]
 800a35c:	f8c0 9000 	str.w	r9, [r0]
 800a360:	4604      	mov	r4, r0
 800a362:	e7e4      	b.n	800a32e <__pow5mult+0x6a>
 800a364:	4638      	mov	r0, r7
 800a366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a36a:	bf00      	nop
 800a36c:	0800b4e0 	.word	0x0800b4e0
 800a370:	0800b2ad 	.word	0x0800b2ad
 800a374:	0800b390 	.word	0x0800b390

0800a378 <__lshift>:
 800a378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a37c:	460c      	mov	r4, r1
 800a37e:	6849      	ldr	r1, [r1, #4]
 800a380:	6923      	ldr	r3, [r4, #16]
 800a382:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a386:	68a3      	ldr	r3, [r4, #8]
 800a388:	4607      	mov	r7, r0
 800a38a:	4691      	mov	r9, r2
 800a38c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a390:	f108 0601 	add.w	r6, r8, #1
 800a394:	42b3      	cmp	r3, r6
 800a396:	db0b      	blt.n	800a3b0 <__lshift+0x38>
 800a398:	4638      	mov	r0, r7
 800a39a:	f7ff fddb 	bl	8009f54 <_Balloc>
 800a39e:	4605      	mov	r5, r0
 800a3a0:	b948      	cbnz	r0, 800a3b6 <__lshift+0x3e>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	4b2a      	ldr	r3, [pc, #168]	; (800a450 <__lshift+0xd8>)
 800a3a6:	482b      	ldr	r0, [pc, #172]	; (800a454 <__lshift+0xdc>)
 800a3a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a3ac:	f000 fc0c 	bl	800abc8 <__assert_func>
 800a3b0:	3101      	adds	r1, #1
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	e7ee      	b.n	800a394 <__lshift+0x1c>
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f100 0114 	add.w	r1, r0, #20
 800a3bc:	f100 0210 	add.w	r2, r0, #16
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	4553      	cmp	r3, sl
 800a3c4:	db37      	blt.n	800a436 <__lshift+0xbe>
 800a3c6:	6920      	ldr	r0, [r4, #16]
 800a3c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a3cc:	f104 0314 	add.w	r3, r4, #20
 800a3d0:	f019 091f 	ands.w	r9, r9, #31
 800a3d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a3d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3dc:	d02f      	beq.n	800a43e <__lshift+0xc6>
 800a3de:	f1c9 0e20 	rsb	lr, r9, #32
 800a3e2:	468a      	mov	sl, r1
 800a3e4:	f04f 0c00 	mov.w	ip, #0
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	fa02 f209 	lsl.w	r2, r2, r9
 800a3ee:	ea42 020c 	orr.w	r2, r2, ip
 800a3f2:	f84a 2b04 	str.w	r2, [sl], #4
 800a3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3fa:	4298      	cmp	r0, r3
 800a3fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a400:	d8f2      	bhi.n	800a3e8 <__lshift+0x70>
 800a402:	1b03      	subs	r3, r0, r4
 800a404:	3b15      	subs	r3, #21
 800a406:	f023 0303 	bic.w	r3, r3, #3
 800a40a:	3304      	adds	r3, #4
 800a40c:	f104 0215 	add.w	r2, r4, #21
 800a410:	4290      	cmp	r0, r2
 800a412:	bf38      	it	cc
 800a414:	2304      	movcc	r3, #4
 800a416:	f841 c003 	str.w	ip, [r1, r3]
 800a41a:	f1bc 0f00 	cmp.w	ip, #0
 800a41e:	d001      	beq.n	800a424 <__lshift+0xac>
 800a420:	f108 0602 	add.w	r6, r8, #2
 800a424:	3e01      	subs	r6, #1
 800a426:	4638      	mov	r0, r7
 800a428:	612e      	str	r6, [r5, #16]
 800a42a:	4621      	mov	r1, r4
 800a42c:	f7ff fdd2 	bl	8009fd4 <_Bfree>
 800a430:	4628      	mov	r0, r5
 800a432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a436:	f842 0f04 	str.w	r0, [r2, #4]!
 800a43a:	3301      	adds	r3, #1
 800a43c:	e7c1      	b.n	800a3c2 <__lshift+0x4a>
 800a43e:	3904      	subs	r1, #4
 800a440:	f853 2b04 	ldr.w	r2, [r3], #4
 800a444:	f841 2f04 	str.w	r2, [r1, #4]!
 800a448:	4298      	cmp	r0, r3
 800a44a:	d8f9      	bhi.n	800a440 <__lshift+0xc8>
 800a44c:	e7ea      	b.n	800a424 <__lshift+0xac>
 800a44e:	bf00      	nop
 800a450:	0800b31f 	.word	0x0800b31f
 800a454:	0800b390 	.word	0x0800b390

0800a458 <__mcmp>:
 800a458:	b530      	push	{r4, r5, lr}
 800a45a:	6902      	ldr	r2, [r0, #16]
 800a45c:	690c      	ldr	r4, [r1, #16]
 800a45e:	1b12      	subs	r2, r2, r4
 800a460:	d10e      	bne.n	800a480 <__mcmp+0x28>
 800a462:	f100 0314 	add.w	r3, r0, #20
 800a466:	3114      	adds	r1, #20
 800a468:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a46c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a470:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a474:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a478:	42a5      	cmp	r5, r4
 800a47a:	d003      	beq.n	800a484 <__mcmp+0x2c>
 800a47c:	d305      	bcc.n	800a48a <__mcmp+0x32>
 800a47e:	2201      	movs	r2, #1
 800a480:	4610      	mov	r0, r2
 800a482:	bd30      	pop	{r4, r5, pc}
 800a484:	4283      	cmp	r3, r0
 800a486:	d3f3      	bcc.n	800a470 <__mcmp+0x18>
 800a488:	e7fa      	b.n	800a480 <__mcmp+0x28>
 800a48a:	f04f 32ff 	mov.w	r2, #4294967295
 800a48e:	e7f7      	b.n	800a480 <__mcmp+0x28>

0800a490 <__mdiff>:
 800a490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a494:	460c      	mov	r4, r1
 800a496:	4606      	mov	r6, r0
 800a498:	4611      	mov	r1, r2
 800a49a:	4620      	mov	r0, r4
 800a49c:	4690      	mov	r8, r2
 800a49e:	f7ff ffdb 	bl	800a458 <__mcmp>
 800a4a2:	1e05      	subs	r5, r0, #0
 800a4a4:	d110      	bne.n	800a4c8 <__mdiff+0x38>
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	f7ff fd53 	bl	8009f54 <_Balloc>
 800a4ae:	b930      	cbnz	r0, 800a4be <__mdiff+0x2e>
 800a4b0:	4b3a      	ldr	r3, [pc, #232]	; (800a59c <__mdiff+0x10c>)
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	f240 2132 	movw	r1, #562	; 0x232
 800a4b8:	4839      	ldr	r0, [pc, #228]	; (800a5a0 <__mdiff+0x110>)
 800a4ba:	f000 fb85 	bl	800abc8 <__assert_func>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a4c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c8:	bfa4      	itt	ge
 800a4ca:	4643      	movge	r3, r8
 800a4cc:	46a0      	movge	r8, r4
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a4d4:	bfa6      	itte	ge
 800a4d6:	461c      	movge	r4, r3
 800a4d8:	2500      	movge	r5, #0
 800a4da:	2501      	movlt	r5, #1
 800a4dc:	f7ff fd3a 	bl	8009f54 <_Balloc>
 800a4e0:	b920      	cbnz	r0, 800a4ec <__mdiff+0x5c>
 800a4e2:	4b2e      	ldr	r3, [pc, #184]	; (800a59c <__mdiff+0x10c>)
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a4ea:	e7e5      	b.n	800a4b8 <__mdiff+0x28>
 800a4ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4f0:	6926      	ldr	r6, [r4, #16]
 800a4f2:	60c5      	str	r5, [r0, #12]
 800a4f4:	f104 0914 	add.w	r9, r4, #20
 800a4f8:	f108 0514 	add.w	r5, r8, #20
 800a4fc:	f100 0e14 	add.w	lr, r0, #20
 800a500:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a504:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a508:	f108 0210 	add.w	r2, r8, #16
 800a50c:	46f2      	mov	sl, lr
 800a50e:	2100      	movs	r1, #0
 800a510:	f859 3b04 	ldr.w	r3, [r9], #4
 800a514:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a518:	fa1f f883 	uxth.w	r8, r3
 800a51c:	fa11 f18b 	uxtah	r1, r1, fp
 800a520:	0c1b      	lsrs	r3, r3, #16
 800a522:	eba1 0808 	sub.w	r8, r1, r8
 800a526:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a52a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a52e:	fa1f f888 	uxth.w	r8, r8
 800a532:	1419      	asrs	r1, r3, #16
 800a534:	454e      	cmp	r6, r9
 800a536:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a53a:	f84a 3b04 	str.w	r3, [sl], #4
 800a53e:	d8e7      	bhi.n	800a510 <__mdiff+0x80>
 800a540:	1b33      	subs	r3, r6, r4
 800a542:	3b15      	subs	r3, #21
 800a544:	f023 0303 	bic.w	r3, r3, #3
 800a548:	3304      	adds	r3, #4
 800a54a:	3415      	adds	r4, #21
 800a54c:	42a6      	cmp	r6, r4
 800a54e:	bf38      	it	cc
 800a550:	2304      	movcc	r3, #4
 800a552:	441d      	add	r5, r3
 800a554:	4473      	add	r3, lr
 800a556:	469e      	mov	lr, r3
 800a558:	462e      	mov	r6, r5
 800a55a:	4566      	cmp	r6, ip
 800a55c:	d30e      	bcc.n	800a57c <__mdiff+0xec>
 800a55e:	f10c 0203 	add.w	r2, ip, #3
 800a562:	1b52      	subs	r2, r2, r5
 800a564:	f022 0203 	bic.w	r2, r2, #3
 800a568:	3d03      	subs	r5, #3
 800a56a:	45ac      	cmp	ip, r5
 800a56c:	bf38      	it	cc
 800a56e:	2200      	movcc	r2, #0
 800a570:	441a      	add	r2, r3
 800a572:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a576:	b17b      	cbz	r3, 800a598 <__mdiff+0x108>
 800a578:	6107      	str	r7, [r0, #16]
 800a57a:	e7a3      	b.n	800a4c4 <__mdiff+0x34>
 800a57c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a580:	fa11 f288 	uxtah	r2, r1, r8
 800a584:	1414      	asrs	r4, r2, #16
 800a586:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a58a:	b292      	uxth	r2, r2
 800a58c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a590:	f84e 2b04 	str.w	r2, [lr], #4
 800a594:	1421      	asrs	r1, r4, #16
 800a596:	e7e0      	b.n	800a55a <__mdiff+0xca>
 800a598:	3f01      	subs	r7, #1
 800a59a:	e7ea      	b.n	800a572 <__mdiff+0xe2>
 800a59c:	0800b31f 	.word	0x0800b31f
 800a5a0:	0800b390 	.word	0x0800b390

0800a5a4 <__d2b>:
 800a5a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5a8:	4689      	mov	r9, r1
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	ec57 6b10 	vmov	r6, r7, d0
 800a5b0:	4690      	mov	r8, r2
 800a5b2:	f7ff fccf 	bl	8009f54 <_Balloc>
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	b930      	cbnz	r0, 800a5c8 <__d2b+0x24>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	4b25      	ldr	r3, [pc, #148]	; (800a654 <__d2b+0xb0>)
 800a5be:	4826      	ldr	r0, [pc, #152]	; (800a658 <__d2b+0xb4>)
 800a5c0:	f240 310a 	movw	r1, #778	; 0x30a
 800a5c4:	f000 fb00 	bl	800abc8 <__assert_func>
 800a5c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a5cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5d0:	bb35      	cbnz	r5, 800a620 <__d2b+0x7c>
 800a5d2:	2e00      	cmp	r6, #0
 800a5d4:	9301      	str	r3, [sp, #4]
 800a5d6:	d028      	beq.n	800a62a <__d2b+0x86>
 800a5d8:	4668      	mov	r0, sp
 800a5da:	9600      	str	r6, [sp, #0]
 800a5dc:	f7ff fd82 	bl	800a0e4 <__lo0bits>
 800a5e0:	9900      	ldr	r1, [sp, #0]
 800a5e2:	b300      	cbz	r0, 800a626 <__d2b+0x82>
 800a5e4:	9a01      	ldr	r2, [sp, #4]
 800a5e6:	f1c0 0320 	rsb	r3, r0, #32
 800a5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a5ee:	430b      	orrs	r3, r1
 800a5f0:	40c2      	lsrs	r2, r0
 800a5f2:	6163      	str	r3, [r4, #20]
 800a5f4:	9201      	str	r2, [sp, #4]
 800a5f6:	9b01      	ldr	r3, [sp, #4]
 800a5f8:	61a3      	str	r3, [r4, #24]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	bf14      	ite	ne
 800a5fe:	2202      	movne	r2, #2
 800a600:	2201      	moveq	r2, #1
 800a602:	6122      	str	r2, [r4, #16]
 800a604:	b1d5      	cbz	r5, 800a63c <__d2b+0x98>
 800a606:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a60a:	4405      	add	r5, r0
 800a60c:	f8c9 5000 	str.w	r5, [r9]
 800a610:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a614:	f8c8 0000 	str.w	r0, [r8]
 800a618:	4620      	mov	r0, r4
 800a61a:	b003      	add	sp, #12
 800a61c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a624:	e7d5      	b.n	800a5d2 <__d2b+0x2e>
 800a626:	6161      	str	r1, [r4, #20]
 800a628:	e7e5      	b.n	800a5f6 <__d2b+0x52>
 800a62a:	a801      	add	r0, sp, #4
 800a62c:	f7ff fd5a 	bl	800a0e4 <__lo0bits>
 800a630:	9b01      	ldr	r3, [sp, #4]
 800a632:	6163      	str	r3, [r4, #20]
 800a634:	2201      	movs	r2, #1
 800a636:	6122      	str	r2, [r4, #16]
 800a638:	3020      	adds	r0, #32
 800a63a:	e7e3      	b.n	800a604 <__d2b+0x60>
 800a63c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a640:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a644:	f8c9 0000 	str.w	r0, [r9]
 800a648:	6918      	ldr	r0, [r3, #16]
 800a64a:	f7ff fd2b 	bl	800a0a4 <__hi0bits>
 800a64e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a652:	e7df      	b.n	800a614 <__d2b+0x70>
 800a654:	0800b31f 	.word	0x0800b31f
 800a658:	0800b390 	.word	0x0800b390

0800a65c <_calloc_r>:
 800a65c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a65e:	fba1 2402 	umull	r2, r4, r1, r2
 800a662:	b94c      	cbnz	r4, 800a678 <_calloc_r+0x1c>
 800a664:	4611      	mov	r1, r2
 800a666:	9201      	str	r2, [sp, #4]
 800a668:	f000 f87a 	bl	800a760 <_malloc_r>
 800a66c:	9a01      	ldr	r2, [sp, #4]
 800a66e:	4605      	mov	r5, r0
 800a670:	b930      	cbnz	r0, 800a680 <_calloc_r+0x24>
 800a672:	4628      	mov	r0, r5
 800a674:	b003      	add	sp, #12
 800a676:	bd30      	pop	{r4, r5, pc}
 800a678:	220c      	movs	r2, #12
 800a67a:	6002      	str	r2, [r0, #0]
 800a67c:	2500      	movs	r5, #0
 800a67e:	e7f8      	b.n	800a672 <_calloc_r+0x16>
 800a680:	4621      	mov	r1, r4
 800a682:	f7fd fdff 	bl	8008284 <memset>
 800a686:	e7f4      	b.n	800a672 <_calloc_r+0x16>

0800a688 <_free_r>:
 800a688:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a68a:	2900      	cmp	r1, #0
 800a68c:	d044      	beq.n	800a718 <_free_r+0x90>
 800a68e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a692:	9001      	str	r0, [sp, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	f1a1 0404 	sub.w	r4, r1, #4
 800a69a:	bfb8      	it	lt
 800a69c:	18e4      	addlt	r4, r4, r3
 800a69e:	f000 fb19 	bl	800acd4 <__malloc_lock>
 800a6a2:	4a1e      	ldr	r2, [pc, #120]	; (800a71c <_free_r+0x94>)
 800a6a4:	9801      	ldr	r0, [sp, #4]
 800a6a6:	6813      	ldr	r3, [r2, #0]
 800a6a8:	b933      	cbnz	r3, 800a6b8 <_free_r+0x30>
 800a6aa:	6063      	str	r3, [r4, #4]
 800a6ac:	6014      	str	r4, [r2, #0]
 800a6ae:	b003      	add	sp, #12
 800a6b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6b4:	f000 bb14 	b.w	800ace0 <__malloc_unlock>
 800a6b8:	42a3      	cmp	r3, r4
 800a6ba:	d908      	bls.n	800a6ce <_free_r+0x46>
 800a6bc:	6825      	ldr	r5, [r4, #0]
 800a6be:	1961      	adds	r1, r4, r5
 800a6c0:	428b      	cmp	r3, r1
 800a6c2:	bf01      	itttt	eq
 800a6c4:	6819      	ldreq	r1, [r3, #0]
 800a6c6:	685b      	ldreq	r3, [r3, #4]
 800a6c8:	1949      	addeq	r1, r1, r5
 800a6ca:	6021      	streq	r1, [r4, #0]
 800a6cc:	e7ed      	b.n	800a6aa <_free_r+0x22>
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	b10b      	cbz	r3, 800a6d8 <_free_r+0x50>
 800a6d4:	42a3      	cmp	r3, r4
 800a6d6:	d9fa      	bls.n	800a6ce <_free_r+0x46>
 800a6d8:	6811      	ldr	r1, [r2, #0]
 800a6da:	1855      	adds	r5, r2, r1
 800a6dc:	42a5      	cmp	r5, r4
 800a6de:	d10b      	bne.n	800a6f8 <_free_r+0x70>
 800a6e0:	6824      	ldr	r4, [r4, #0]
 800a6e2:	4421      	add	r1, r4
 800a6e4:	1854      	adds	r4, r2, r1
 800a6e6:	42a3      	cmp	r3, r4
 800a6e8:	6011      	str	r1, [r2, #0]
 800a6ea:	d1e0      	bne.n	800a6ae <_free_r+0x26>
 800a6ec:	681c      	ldr	r4, [r3, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	6053      	str	r3, [r2, #4]
 800a6f2:	4421      	add	r1, r4
 800a6f4:	6011      	str	r1, [r2, #0]
 800a6f6:	e7da      	b.n	800a6ae <_free_r+0x26>
 800a6f8:	d902      	bls.n	800a700 <_free_r+0x78>
 800a6fa:	230c      	movs	r3, #12
 800a6fc:	6003      	str	r3, [r0, #0]
 800a6fe:	e7d6      	b.n	800a6ae <_free_r+0x26>
 800a700:	6825      	ldr	r5, [r4, #0]
 800a702:	1961      	adds	r1, r4, r5
 800a704:	428b      	cmp	r3, r1
 800a706:	bf04      	itt	eq
 800a708:	6819      	ldreq	r1, [r3, #0]
 800a70a:	685b      	ldreq	r3, [r3, #4]
 800a70c:	6063      	str	r3, [r4, #4]
 800a70e:	bf04      	itt	eq
 800a710:	1949      	addeq	r1, r1, r5
 800a712:	6021      	streq	r1, [r4, #0]
 800a714:	6054      	str	r4, [r2, #4]
 800a716:	e7ca      	b.n	800a6ae <_free_r+0x26>
 800a718:	b003      	add	sp, #12
 800a71a:	bd30      	pop	{r4, r5, pc}
 800a71c:	200017b4 	.word	0x200017b4

0800a720 <sbrk_aligned>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	4e0e      	ldr	r6, [pc, #56]	; (800a75c <sbrk_aligned+0x3c>)
 800a724:	460c      	mov	r4, r1
 800a726:	6831      	ldr	r1, [r6, #0]
 800a728:	4605      	mov	r5, r0
 800a72a:	b911      	cbnz	r1, 800a732 <sbrk_aligned+0x12>
 800a72c:	f000 f9e6 	bl	800aafc <_sbrk_r>
 800a730:	6030      	str	r0, [r6, #0]
 800a732:	4621      	mov	r1, r4
 800a734:	4628      	mov	r0, r5
 800a736:	f000 f9e1 	bl	800aafc <_sbrk_r>
 800a73a:	1c43      	adds	r3, r0, #1
 800a73c:	d00a      	beq.n	800a754 <sbrk_aligned+0x34>
 800a73e:	1cc4      	adds	r4, r0, #3
 800a740:	f024 0403 	bic.w	r4, r4, #3
 800a744:	42a0      	cmp	r0, r4
 800a746:	d007      	beq.n	800a758 <sbrk_aligned+0x38>
 800a748:	1a21      	subs	r1, r4, r0
 800a74a:	4628      	mov	r0, r5
 800a74c:	f000 f9d6 	bl	800aafc <_sbrk_r>
 800a750:	3001      	adds	r0, #1
 800a752:	d101      	bne.n	800a758 <sbrk_aligned+0x38>
 800a754:	f04f 34ff 	mov.w	r4, #4294967295
 800a758:	4620      	mov	r0, r4
 800a75a:	bd70      	pop	{r4, r5, r6, pc}
 800a75c:	200017b8 	.word	0x200017b8

0800a760 <_malloc_r>:
 800a760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a764:	1ccd      	adds	r5, r1, #3
 800a766:	f025 0503 	bic.w	r5, r5, #3
 800a76a:	3508      	adds	r5, #8
 800a76c:	2d0c      	cmp	r5, #12
 800a76e:	bf38      	it	cc
 800a770:	250c      	movcc	r5, #12
 800a772:	2d00      	cmp	r5, #0
 800a774:	4607      	mov	r7, r0
 800a776:	db01      	blt.n	800a77c <_malloc_r+0x1c>
 800a778:	42a9      	cmp	r1, r5
 800a77a:	d905      	bls.n	800a788 <_malloc_r+0x28>
 800a77c:	230c      	movs	r3, #12
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	2600      	movs	r6, #0
 800a782:	4630      	mov	r0, r6
 800a784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a788:	4e2e      	ldr	r6, [pc, #184]	; (800a844 <_malloc_r+0xe4>)
 800a78a:	f000 faa3 	bl	800acd4 <__malloc_lock>
 800a78e:	6833      	ldr	r3, [r6, #0]
 800a790:	461c      	mov	r4, r3
 800a792:	bb34      	cbnz	r4, 800a7e2 <_malloc_r+0x82>
 800a794:	4629      	mov	r1, r5
 800a796:	4638      	mov	r0, r7
 800a798:	f7ff ffc2 	bl	800a720 <sbrk_aligned>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	4604      	mov	r4, r0
 800a7a0:	d14d      	bne.n	800a83e <_malloc_r+0xde>
 800a7a2:	6834      	ldr	r4, [r6, #0]
 800a7a4:	4626      	mov	r6, r4
 800a7a6:	2e00      	cmp	r6, #0
 800a7a8:	d140      	bne.n	800a82c <_malloc_r+0xcc>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	eb04 0803 	add.w	r8, r4, r3
 800a7b4:	f000 f9a2 	bl	800aafc <_sbrk_r>
 800a7b8:	4580      	cmp	r8, r0
 800a7ba:	d13a      	bne.n	800a832 <_malloc_r+0xd2>
 800a7bc:	6821      	ldr	r1, [r4, #0]
 800a7be:	3503      	adds	r5, #3
 800a7c0:	1a6d      	subs	r5, r5, r1
 800a7c2:	f025 0503 	bic.w	r5, r5, #3
 800a7c6:	3508      	adds	r5, #8
 800a7c8:	2d0c      	cmp	r5, #12
 800a7ca:	bf38      	it	cc
 800a7cc:	250c      	movcc	r5, #12
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f7ff ffa5 	bl	800a720 <sbrk_aligned>
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	d02b      	beq.n	800a832 <_malloc_r+0xd2>
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	442b      	add	r3, r5
 800a7de:	6023      	str	r3, [r4, #0]
 800a7e0:	e00e      	b.n	800a800 <_malloc_r+0xa0>
 800a7e2:	6822      	ldr	r2, [r4, #0]
 800a7e4:	1b52      	subs	r2, r2, r5
 800a7e6:	d41e      	bmi.n	800a826 <_malloc_r+0xc6>
 800a7e8:	2a0b      	cmp	r2, #11
 800a7ea:	d916      	bls.n	800a81a <_malloc_r+0xba>
 800a7ec:	1961      	adds	r1, r4, r5
 800a7ee:	42a3      	cmp	r3, r4
 800a7f0:	6025      	str	r5, [r4, #0]
 800a7f2:	bf18      	it	ne
 800a7f4:	6059      	strne	r1, [r3, #4]
 800a7f6:	6863      	ldr	r3, [r4, #4]
 800a7f8:	bf08      	it	eq
 800a7fa:	6031      	streq	r1, [r6, #0]
 800a7fc:	5162      	str	r2, [r4, r5]
 800a7fe:	604b      	str	r3, [r1, #4]
 800a800:	4638      	mov	r0, r7
 800a802:	f104 060b 	add.w	r6, r4, #11
 800a806:	f000 fa6b 	bl	800ace0 <__malloc_unlock>
 800a80a:	f026 0607 	bic.w	r6, r6, #7
 800a80e:	1d23      	adds	r3, r4, #4
 800a810:	1af2      	subs	r2, r6, r3
 800a812:	d0b6      	beq.n	800a782 <_malloc_r+0x22>
 800a814:	1b9b      	subs	r3, r3, r6
 800a816:	50a3      	str	r3, [r4, r2]
 800a818:	e7b3      	b.n	800a782 <_malloc_r+0x22>
 800a81a:	6862      	ldr	r2, [r4, #4]
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	bf0c      	ite	eq
 800a820:	6032      	streq	r2, [r6, #0]
 800a822:	605a      	strne	r2, [r3, #4]
 800a824:	e7ec      	b.n	800a800 <_malloc_r+0xa0>
 800a826:	4623      	mov	r3, r4
 800a828:	6864      	ldr	r4, [r4, #4]
 800a82a:	e7b2      	b.n	800a792 <_malloc_r+0x32>
 800a82c:	4634      	mov	r4, r6
 800a82e:	6876      	ldr	r6, [r6, #4]
 800a830:	e7b9      	b.n	800a7a6 <_malloc_r+0x46>
 800a832:	230c      	movs	r3, #12
 800a834:	603b      	str	r3, [r7, #0]
 800a836:	4638      	mov	r0, r7
 800a838:	f000 fa52 	bl	800ace0 <__malloc_unlock>
 800a83c:	e7a1      	b.n	800a782 <_malloc_r+0x22>
 800a83e:	6025      	str	r5, [r4, #0]
 800a840:	e7de      	b.n	800a800 <_malloc_r+0xa0>
 800a842:	bf00      	nop
 800a844:	200017b4 	.word	0x200017b4

0800a848 <__sfputc_r>:
 800a848:	6893      	ldr	r3, [r2, #8]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	b410      	push	{r4}
 800a850:	6093      	str	r3, [r2, #8]
 800a852:	da08      	bge.n	800a866 <__sfputc_r+0x1e>
 800a854:	6994      	ldr	r4, [r2, #24]
 800a856:	42a3      	cmp	r3, r4
 800a858:	db01      	blt.n	800a85e <__sfputc_r+0x16>
 800a85a:	290a      	cmp	r1, #10
 800a85c:	d103      	bne.n	800a866 <__sfputc_r+0x1e>
 800a85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a862:	f7fe ba0f 	b.w	8008c84 <__swbuf_r>
 800a866:	6813      	ldr	r3, [r2, #0]
 800a868:	1c58      	adds	r0, r3, #1
 800a86a:	6010      	str	r0, [r2, #0]
 800a86c:	7019      	strb	r1, [r3, #0]
 800a86e:	4608      	mov	r0, r1
 800a870:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a874:	4770      	bx	lr

0800a876 <__sfputs_r>:
 800a876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a878:	4606      	mov	r6, r0
 800a87a:	460f      	mov	r7, r1
 800a87c:	4614      	mov	r4, r2
 800a87e:	18d5      	adds	r5, r2, r3
 800a880:	42ac      	cmp	r4, r5
 800a882:	d101      	bne.n	800a888 <__sfputs_r+0x12>
 800a884:	2000      	movs	r0, #0
 800a886:	e007      	b.n	800a898 <__sfputs_r+0x22>
 800a888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a88c:	463a      	mov	r2, r7
 800a88e:	4630      	mov	r0, r6
 800a890:	f7ff ffda 	bl	800a848 <__sfputc_r>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d1f3      	bne.n	800a880 <__sfputs_r+0xa>
 800a898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a89c <_vfiprintf_r>:
 800a89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a0:	460d      	mov	r5, r1
 800a8a2:	b09d      	sub	sp, #116	; 0x74
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	4698      	mov	r8, r3
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	b118      	cbz	r0, 800a8b4 <_vfiprintf_r+0x18>
 800a8ac:	6983      	ldr	r3, [r0, #24]
 800a8ae:	b90b      	cbnz	r3, 800a8b4 <_vfiprintf_r+0x18>
 800a8b0:	f7ff fa3e 	bl	8009d30 <__sinit>
 800a8b4:	4b89      	ldr	r3, [pc, #548]	; (800aadc <_vfiprintf_r+0x240>)
 800a8b6:	429d      	cmp	r5, r3
 800a8b8:	d11b      	bne.n	800a8f2 <_vfiprintf_r+0x56>
 800a8ba:	6875      	ldr	r5, [r6, #4]
 800a8bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8be:	07d9      	lsls	r1, r3, #31
 800a8c0:	d405      	bmi.n	800a8ce <_vfiprintf_r+0x32>
 800a8c2:	89ab      	ldrh	r3, [r5, #12]
 800a8c4:	059a      	lsls	r2, r3, #22
 800a8c6:	d402      	bmi.n	800a8ce <_vfiprintf_r+0x32>
 800a8c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ca:	f7ff fad4 	bl	8009e76 <__retarget_lock_acquire_recursive>
 800a8ce:	89ab      	ldrh	r3, [r5, #12]
 800a8d0:	071b      	lsls	r3, r3, #28
 800a8d2:	d501      	bpl.n	800a8d8 <_vfiprintf_r+0x3c>
 800a8d4:	692b      	ldr	r3, [r5, #16]
 800a8d6:	b9eb      	cbnz	r3, 800a914 <_vfiprintf_r+0x78>
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f7fe fa24 	bl	8008d28 <__swsetup_r>
 800a8e0:	b1c0      	cbz	r0, 800a914 <_vfiprintf_r+0x78>
 800a8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8e4:	07dc      	lsls	r4, r3, #31
 800a8e6:	d50e      	bpl.n	800a906 <_vfiprintf_r+0x6a>
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	b01d      	add	sp, #116	; 0x74
 800a8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f2:	4b7b      	ldr	r3, [pc, #492]	; (800aae0 <_vfiprintf_r+0x244>)
 800a8f4:	429d      	cmp	r5, r3
 800a8f6:	d101      	bne.n	800a8fc <_vfiprintf_r+0x60>
 800a8f8:	68b5      	ldr	r5, [r6, #8]
 800a8fa:	e7df      	b.n	800a8bc <_vfiprintf_r+0x20>
 800a8fc:	4b79      	ldr	r3, [pc, #484]	; (800aae4 <_vfiprintf_r+0x248>)
 800a8fe:	429d      	cmp	r5, r3
 800a900:	bf08      	it	eq
 800a902:	68f5      	ldreq	r5, [r6, #12]
 800a904:	e7da      	b.n	800a8bc <_vfiprintf_r+0x20>
 800a906:	89ab      	ldrh	r3, [r5, #12]
 800a908:	0598      	lsls	r0, r3, #22
 800a90a:	d4ed      	bmi.n	800a8e8 <_vfiprintf_r+0x4c>
 800a90c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a90e:	f7ff fab3 	bl	8009e78 <__retarget_lock_release_recursive>
 800a912:	e7e9      	b.n	800a8e8 <_vfiprintf_r+0x4c>
 800a914:	2300      	movs	r3, #0
 800a916:	9309      	str	r3, [sp, #36]	; 0x24
 800a918:	2320      	movs	r3, #32
 800a91a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a91e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a922:	2330      	movs	r3, #48	; 0x30
 800a924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aae8 <_vfiprintf_r+0x24c>
 800a928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a92c:	f04f 0901 	mov.w	r9, #1
 800a930:	4623      	mov	r3, r4
 800a932:	469a      	mov	sl, r3
 800a934:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a938:	b10a      	cbz	r2, 800a93e <_vfiprintf_r+0xa2>
 800a93a:	2a25      	cmp	r2, #37	; 0x25
 800a93c:	d1f9      	bne.n	800a932 <_vfiprintf_r+0x96>
 800a93e:	ebba 0b04 	subs.w	fp, sl, r4
 800a942:	d00b      	beq.n	800a95c <_vfiprintf_r+0xc0>
 800a944:	465b      	mov	r3, fp
 800a946:	4622      	mov	r2, r4
 800a948:	4629      	mov	r1, r5
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7ff ff93 	bl	800a876 <__sfputs_r>
 800a950:	3001      	adds	r0, #1
 800a952:	f000 80aa 	beq.w	800aaaa <_vfiprintf_r+0x20e>
 800a956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a958:	445a      	add	r2, fp
 800a95a:	9209      	str	r2, [sp, #36]	; 0x24
 800a95c:	f89a 3000 	ldrb.w	r3, [sl]
 800a960:	2b00      	cmp	r3, #0
 800a962:	f000 80a2 	beq.w	800aaaa <_vfiprintf_r+0x20e>
 800a966:	2300      	movs	r3, #0
 800a968:	f04f 32ff 	mov.w	r2, #4294967295
 800a96c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a970:	f10a 0a01 	add.w	sl, sl, #1
 800a974:	9304      	str	r3, [sp, #16]
 800a976:	9307      	str	r3, [sp, #28]
 800a978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a97c:	931a      	str	r3, [sp, #104]	; 0x68
 800a97e:	4654      	mov	r4, sl
 800a980:	2205      	movs	r2, #5
 800a982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a986:	4858      	ldr	r0, [pc, #352]	; (800aae8 <_vfiprintf_r+0x24c>)
 800a988:	f7f5 fc2a 	bl	80001e0 <memchr>
 800a98c:	9a04      	ldr	r2, [sp, #16]
 800a98e:	b9d8      	cbnz	r0, 800a9c8 <_vfiprintf_r+0x12c>
 800a990:	06d1      	lsls	r1, r2, #27
 800a992:	bf44      	itt	mi
 800a994:	2320      	movmi	r3, #32
 800a996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a99a:	0713      	lsls	r3, r2, #28
 800a99c:	bf44      	itt	mi
 800a99e:	232b      	movmi	r3, #43	; 0x2b
 800a9a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9aa:	d015      	beq.n	800a9d8 <_vfiprintf_r+0x13c>
 800a9ac:	9a07      	ldr	r2, [sp, #28]
 800a9ae:	4654      	mov	r4, sl
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	f04f 0c0a 	mov.w	ip, #10
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9bc:	3b30      	subs	r3, #48	; 0x30
 800a9be:	2b09      	cmp	r3, #9
 800a9c0:	d94e      	bls.n	800aa60 <_vfiprintf_r+0x1c4>
 800a9c2:	b1b0      	cbz	r0, 800a9f2 <_vfiprintf_r+0x156>
 800a9c4:	9207      	str	r2, [sp, #28]
 800a9c6:	e014      	b.n	800a9f2 <_vfiprintf_r+0x156>
 800a9c8:	eba0 0308 	sub.w	r3, r0, r8
 800a9cc:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	9304      	str	r3, [sp, #16]
 800a9d4:	46a2      	mov	sl, r4
 800a9d6:	e7d2      	b.n	800a97e <_vfiprintf_r+0xe2>
 800a9d8:	9b03      	ldr	r3, [sp, #12]
 800a9da:	1d19      	adds	r1, r3, #4
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	9103      	str	r1, [sp, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	bfbb      	ittet	lt
 800a9e4:	425b      	neglt	r3, r3
 800a9e6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ea:	9307      	strge	r3, [sp, #28]
 800a9ec:	9307      	strlt	r3, [sp, #28]
 800a9ee:	bfb8      	it	lt
 800a9f0:	9204      	strlt	r2, [sp, #16]
 800a9f2:	7823      	ldrb	r3, [r4, #0]
 800a9f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f6:	d10c      	bne.n	800aa12 <_vfiprintf_r+0x176>
 800a9f8:	7863      	ldrb	r3, [r4, #1]
 800a9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a9fc:	d135      	bne.n	800aa6a <_vfiprintf_r+0x1ce>
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	1d1a      	adds	r2, r3, #4
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	9203      	str	r2, [sp, #12]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bfb8      	it	lt
 800aa0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa0e:	3402      	adds	r4, #2
 800aa10:	9305      	str	r3, [sp, #20]
 800aa12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aaf8 <_vfiprintf_r+0x25c>
 800aa16:	7821      	ldrb	r1, [r4, #0]
 800aa18:	2203      	movs	r2, #3
 800aa1a:	4650      	mov	r0, sl
 800aa1c:	f7f5 fbe0 	bl	80001e0 <memchr>
 800aa20:	b140      	cbz	r0, 800aa34 <_vfiprintf_r+0x198>
 800aa22:	2340      	movs	r3, #64	; 0x40
 800aa24:	eba0 000a 	sub.w	r0, r0, sl
 800aa28:	fa03 f000 	lsl.w	r0, r3, r0
 800aa2c:	9b04      	ldr	r3, [sp, #16]
 800aa2e:	4303      	orrs	r3, r0
 800aa30:	3401      	adds	r4, #1
 800aa32:	9304      	str	r3, [sp, #16]
 800aa34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa38:	482c      	ldr	r0, [pc, #176]	; (800aaec <_vfiprintf_r+0x250>)
 800aa3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa3e:	2206      	movs	r2, #6
 800aa40:	f7f5 fbce 	bl	80001e0 <memchr>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d03f      	beq.n	800aac8 <_vfiprintf_r+0x22c>
 800aa48:	4b29      	ldr	r3, [pc, #164]	; (800aaf0 <_vfiprintf_r+0x254>)
 800aa4a:	bb1b      	cbnz	r3, 800aa94 <_vfiprintf_r+0x1f8>
 800aa4c:	9b03      	ldr	r3, [sp, #12]
 800aa4e:	3307      	adds	r3, #7
 800aa50:	f023 0307 	bic.w	r3, r3, #7
 800aa54:	3308      	adds	r3, #8
 800aa56:	9303      	str	r3, [sp, #12]
 800aa58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5a:	443b      	add	r3, r7
 800aa5c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5e:	e767      	b.n	800a930 <_vfiprintf_r+0x94>
 800aa60:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa64:	460c      	mov	r4, r1
 800aa66:	2001      	movs	r0, #1
 800aa68:	e7a5      	b.n	800a9b6 <_vfiprintf_r+0x11a>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	3401      	adds	r4, #1
 800aa6e:	9305      	str	r3, [sp, #20]
 800aa70:	4619      	mov	r1, r3
 800aa72:	f04f 0c0a 	mov.w	ip, #10
 800aa76:	4620      	mov	r0, r4
 800aa78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa7c:	3a30      	subs	r2, #48	; 0x30
 800aa7e:	2a09      	cmp	r2, #9
 800aa80:	d903      	bls.n	800aa8a <_vfiprintf_r+0x1ee>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d0c5      	beq.n	800aa12 <_vfiprintf_r+0x176>
 800aa86:	9105      	str	r1, [sp, #20]
 800aa88:	e7c3      	b.n	800aa12 <_vfiprintf_r+0x176>
 800aa8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa8e:	4604      	mov	r4, r0
 800aa90:	2301      	movs	r3, #1
 800aa92:	e7f0      	b.n	800aa76 <_vfiprintf_r+0x1da>
 800aa94:	ab03      	add	r3, sp, #12
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	462a      	mov	r2, r5
 800aa9a:	4b16      	ldr	r3, [pc, #88]	; (800aaf4 <_vfiprintf_r+0x258>)
 800aa9c:	a904      	add	r1, sp, #16
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	f7fd fc98 	bl	80083d4 <_printf_float>
 800aaa4:	4607      	mov	r7, r0
 800aaa6:	1c78      	adds	r0, r7, #1
 800aaa8:	d1d6      	bne.n	800aa58 <_vfiprintf_r+0x1bc>
 800aaaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaac:	07d9      	lsls	r1, r3, #31
 800aaae:	d405      	bmi.n	800aabc <_vfiprintf_r+0x220>
 800aab0:	89ab      	ldrh	r3, [r5, #12]
 800aab2:	059a      	lsls	r2, r3, #22
 800aab4:	d402      	bmi.n	800aabc <_vfiprintf_r+0x220>
 800aab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aab8:	f7ff f9de 	bl	8009e78 <__retarget_lock_release_recursive>
 800aabc:	89ab      	ldrh	r3, [r5, #12]
 800aabe:	065b      	lsls	r3, r3, #25
 800aac0:	f53f af12 	bmi.w	800a8e8 <_vfiprintf_r+0x4c>
 800aac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aac6:	e711      	b.n	800a8ec <_vfiprintf_r+0x50>
 800aac8:	ab03      	add	r3, sp, #12
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	462a      	mov	r2, r5
 800aace:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <_vfiprintf_r+0x258>)
 800aad0:	a904      	add	r1, sp, #16
 800aad2:	4630      	mov	r0, r6
 800aad4:	f7fd ff22 	bl	800891c <_printf_i>
 800aad8:	e7e4      	b.n	800aaa4 <_vfiprintf_r+0x208>
 800aada:	bf00      	nop
 800aadc:	0800b350 	.word	0x0800b350
 800aae0:	0800b370 	.word	0x0800b370
 800aae4:	0800b330 	.word	0x0800b330
 800aae8:	0800b4ec 	.word	0x0800b4ec
 800aaec:	0800b4f6 	.word	0x0800b4f6
 800aaf0:	080083d5 	.word	0x080083d5
 800aaf4:	0800a877 	.word	0x0800a877
 800aaf8:	0800b4f2 	.word	0x0800b4f2

0800aafc <_sbrk_r>:
 800aafc:	b538      	push	{r3, r4, r5, lr}
 800aafe:	4d06      	ldr	r5, [pc, #24]	; (800ab18 <_sbrk_r+0x1c>)
 800ab00:	2300      	movs	r3, #0
 800ab02:	4604      	mov	r4, r0
 800ab04:	4608      	mov	r0, r1
 800ab06:	602b      	str	r3, [r5, #0]
 800ab08:	f7f7 fe82 	bl	8002810 <_sbrk>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d102      	bne.n	800ab16 <_sbrk_r+0x1a>
 800ab10:	682b      	ldr	r3, [r5, #0]
 800ab12:	b103      	cbz	r3, 800ab16 <_sbrk_r+0x1a>
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	bd38      	pop	{r3, r4, r5, pc}
 800ab18:	200017bc 	.word	0x200017bc

0800ab1c <__sread>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	460c      	mov	r4, r1
 800ab20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab24:	f000 f8e2 	bl	800acec <_read_r>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	bfab      	itete	ge
 800ab2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab30:	181b      	addge	r3, r3, r0
 800ab32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab36:	bfac      	ite	ge
 800ab38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab3a:	81a3      	strhlt	r3, [r4, #12]
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <__swrite>:
 800ab3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab42:	461f      	mov	r7, r3
 800ab44:	898b      	ldrh	r3, [r1, #12]
 800ab46:	05db      	lsls	r3, r3, #23
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	4616      	mov	r6, r2
 800ab4e:	d505      	bpl.n	800ab5c <__swrite+0x1e>
 800ab50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab54:	2302      	movs	r3, #2
 800ab56:	2200      	movs	r2, #0
 800ab58:	f000 f898 	bl	800ac8c <_lseek_r>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab66:	81a3      	strh	r3, [r4, #12]
 800ab68:	4632      	mov	r2, r6
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab72:	f000 b817 	b.w	800aba4 <_write_r>

0800ab76 <__sseek>:
 800ab76:	b510      	push	{r4, lr}
 800ab78:	460c      	mov	r4, r1
 800ab7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7e:	f000 f885 	bl	800ac8c <_lseek_r>
 800ab82:	1c43      	adds	r3, r0, #1
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	bf15      	itete	ne
 800ab88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab92:	81a3      	strheq	r3, [r4, #12]
 800ab94:	bf18      	it	ne
 800ab96:	81a3      	strhne	r3, [r4, #12]
 800ab98:	bd10      	pop	{r4, pc}

0800ab9a <__sclose>:
 800ab9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9e:	f000 b831 	b.w	800ac04 <_close_r>
	...

0800aba4 <_write_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d07      	ldr	r5, [pc, #28]	; (800abc4 <_write_r+0x20>)
 800aba8:	4604      	mov	r4, r0
 800abaa:	4608      	mov	r0, r1
 800abac:	4611      	mov	r1, r2
 800abae:	2200      	movs	r2, #0
 800abb0:	602a      	str	r2, [r5, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	f7f6 fd0e 	bl	80015d4 <_write>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_write_r+0x1e>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_write_r+0x1e>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	200017bc 	.word	0x200017bc

0800abc8 <__assert_func>:
 800abc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abca:	4614      	mov	r4, r2
 800abcc:	461a      	mov	r2, r3
 800abce:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <__assert_func+0x2c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4605      	mov	r5, r0
 800abd4:	68d8      	ldr	r0, [r3, #12]
 800abd6:	b14c      	cbz	r4, 800abec <__assert_func+0x24>
 800abd8:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <__assert_func+0x30>)
 800abda:	9100      	str	r1, [sp, #0]
 800abdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abe0:	4906      	ldr	r1, [pc, #24]	; (800abfc <__assert_func+0x34>)
 800abe2:	462b      	mov	r3, r5
 800abe4:	f000 f81e 	bl	800ac24 <fiprintf>
 800abe8:	f000 f89f 	bl	800ad2a <abort>
 800abec:	4b04      	ldr	r3, [pc, #16]	; (800ac00 <__assert_func+0x38>)
 800abee:	461c      	mov	r4, r3
 800abf0:	e7f3      	b.n	800abda <__assert_func+0x12>
 800abf2:	bf00      	nop
 800abf4:	20000010 	.word	0x20000010
 800abf8:	0800b4fd 	.word	0x0800b4fd
 800abfc:	0800b50a 	.word	0x0800b50a
 800ac00:	0800b538 	.word	0x0800b538

0800ac04 <_close_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4d06      	ldr	r5, [pc, #24]	; (800ac20 <_close_r+0x1c>)
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	4608      	mov	r0, r1
 800ac0e:	602b      	str	r3, [r5, #0]
 800ac10:	f7f7 fdf0 	bl	80027f4 <_close>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d102      	bne.n	800ac1e <_close_r+0x1a>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	b103      	cbz	r3, 800ac1e <_close_r+0x1a>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	200017bc 	.word	0x200017bc

0800ac24 <fiprintf>:
 800ac24:	b40e      	push	{r1, r2, r3}
 800ac26:	b503      	push	{r0, r1, lr}
 800ac28:	4601      	mov	r1, r0
 800ac2a:	ab03      	add	r3, sp, #12
 800ac2c:	4805      	ldr	r0, [pc, #20]	; (800ac44 <fiprintf+0x20>)
 800ac2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac32:	6800      	ldr	r0, [r0, #0]
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	f7ff fe31 	bl	800a89c <_vfiprintf_r>
 800ac3a:	b002      	add	sp, #8
 800ac3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac40:	b003      	add	sp, #12
 800ac42:	4770      	bx	lr
 800ac44:	20000010 	.word	0x20000010

0800ac48 <_fstat_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	; (800ac68 <_fstat_r+0x20>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	4611      	mov	r1, r2
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	f7f7 fdd1 	bl	80027fc <_fstat>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d102      	bne.n	800ac64 <_fstat_r+0x1c>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	b103      	cbz	r3, 800ac64 <_fstat_r+0x1c>
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	200017bc 	.word	0x200017bc

0800ac6c <_isatty_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d06      	ldr	r5, [pc, #24]	; (800ac88 <_isatty_r+0x1c>)
 800ac70:	2300      	movs	r3, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	f7f7 fdc6 	bl	8002808 <_isatty>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_isatty_r+0x1a>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_isatty_r+0x1a>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	200017bc 	.word	0x200017bc

0800ac8c <_lseek_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d07      	ldr	r5, [pc, #28]	; (800acac <_lseek_r+0x20>)
 800ac90:	4604      	mov	r4, r0
 800ac92:	4608      	mov	r0, r1
 800ac94:	4611      	mov	r1, r2
 800ac96:	2200      	movs	r2, #0
 800ac98:	602a      	str	r2, [r5, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f7f7 fdb6 	bl	800280c <_lseek>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_lseek_r+0x1e>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_lseek_r+0x1e>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	200017bc 	.word	0x200017bc

0800acb0 <__ascii_mbtowc>:
 800acb0:	b082      	sub	sp, #8
 800acb2:	b901      	cbnz	r1, 800acb6 <__ascii_mbtowc+0x6>
 800acb4:	a901      	add	r1, sp, #4
 800acb6:	b142      	cbz	r2, 800acca <__ascii_mbtowc+0x1a>
 800acb8:	b14b      	cbz	r3, 800acce <__ascii_mbtowc+0x1e>
 800acba:	7813      	ldrb	r3, [r2, #0]
 800acbc:	600b      	str	r3, [r1, #0]
 800acbe:	7812      	ldrb	r2, [r2, #0]
 800acc0:	1e10      	subs	r0, r2, #0
 800acc2:	bf18      	it	ne
 800acc4:	2001      	movne	r0, #1
 800acc6:	b002      	add	sp, #8
 800acc8:	4770      	bx	lr
 800acca:	4610      	mov	r0, r2
 800accc:	e7fb      	b.n	800acc6 <__ascii_mbtowc+0x16>
 800acce:	f06f 0001 	mvn.w	r0, #1
 800acd2:	e7f8      	b.n	800acc6 <__ascii_mbtowc+0x16>

0800acd4 <__malloc_lock>:
 800acd4:	4801      	ldr	r0, [pc, #4]	; (800acdc <__malloc_lock+0x8>)
 800acd6:	f7ff b8ce 	b.w	8009e76 <__retarget_lock_acquire_recursive>
 800acda:	bf00      	nop
 800acdc:	200017b0 	.word	0x200017b0

0800ace0 <__malloc_unlock>:
 800ace0:	4801      	ldr	r0, [pc, #4]	; (800ace8 <__malloc_unlock+0x8>)
 800ace2:	f7ff b8c9 	b.w	8009e78 <__retarget_lock_release_recursive>
 800ace6:	bf00      	nop
 800ace8:	200017b0 	.word	0x200017b0

0800acec <_read_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4d07      	ldr	r5, [pc, #28]	; (800ad0c <_read_r+0x20>)
 800acf0:	4604      	mov	r4, r0
 800acf2:	4608      	mov	r0, r1
 800acf4:	4611      	mov	r1, r2
 800acf6:	2200      	movs	r2, #0
 800acf8:	602a      	str	r2, [r5, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	f7f7 fd6c 	bl	80027d8 <_read>
 800ad00:	1c43      	adds	r3, r0, #1
 800ad02:	d102      	bne.n	800ad0a <_read_r+0x1e>
 800ad04:	682b      	ldr	r3, [r5, #0]
 800ad06:	b103      	cbz	r3, 800ad0a <_read_r+0x1e>
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	bd38      	pop	{r3, r4, r5, pc}
 800ad0c:	200017bc 	.word	0x200017bc

0800ad10 <__ascii_wctomb>:
 800ad10:	b149      	cbz	r1, 800ad26 <__ascii_wctomb+0x16>
 800ad12:	2aff      	cmp	r2, #255	; 0xff
 800ad14:	bf85      	ittet	hi
 800ad16:	238a      	movhi	r3, #138	; 0x8a
 800ad18:	6003      	strhi	r3, [r0, #0]
 800ad1a:	700a      	strbls	r2, [r1, #0]
 800ad1c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ad20:	bf98      	it	ls
 800ad22:	2001      	movls	r0, #1
 800ad24:	4770      	bx	lr
 800ad26:	4608      	mov	r0, r1
 800ad28:	4770      	bx	lr

0800ad2a <abort>:
 800ad2a:	b508      	push	{r3, lr}
 800ad2c:	2006      	movs	r0, #6
 800ad2e:	f000 f82b 	bl	800ad88 <raise>
 800ad32:	2001      	movs	r0, #1
 800ad34:	f7f7 fd4a 	bl	80027cc <_exit>

0800ad38 <_raise_r>:
 800ad38:	291f      	cmp	r1, #31
 800ad3a:	b538      	push	{r3, r4, r5, lr}
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	460d      	mov	r5, r1
 800ad40:	d904      	bls.n	800ad4c <_raise_r+0x14>
 800ad42:	2316      	movs	r3, #22
 800ad44:	6003      	str	r3, [r0, #0]
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ad4e:	b112      	cbz	r2, 800ad56 <_raise_r+0x1e>
 800ad50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad54:	b94b      	cbnz	r3, 800ad6a <_raise_r+0x32>
 800ad56:	4620      	mov	r0, r4
 800ad58:	f000 f830 	bl	800adbc <_getpid_r>
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	4601      	mov	r1, r0
 800ad60:	4620      	mov	r0, r4
 800ad62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad66:	f000 b817 	b.w	800ad98 <_kill_r>
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d00a      	beq.n	800ad84 <_raise_r+0x4c>
 800ad6e:	1c59      	adds	r1, r3, #1
 800ad70:	d103      	bne.n	800ad7a <_raise_r+0x42>
 800ad72:	2316      	movs	r3, #22
 800ad74:	6003      	str	r3, [r0, #0]
 800ad76:	2001      	movs	r0, #1
 800ad78:	e7e7      	b.n	800ad4a <_raise_r+0x12>
 800ad7a:	2400      	movs	r4, #0
 800ad7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad80:	4628      	mov	r0, r5
 800ad82:	4798      	blx	r3
 800ad84:	2000      	movs	r0, #0
 800ad86:	e7e0      	b.n	800ad4a <_raise_r+0x12>

0800ad88 <raise>:
 800ad88:	4b02      	ldr	r3, [pc, #8]	; (800ad94 <raise+0xc>)
 800ad8a:	4601      	mov	r1, r0
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	f7ff bfd3 	b.w	800ad38 <_raise_r>
 800ad92:	bf00      	nop
 800ad94:	20000010 	.word	0x20000010

0800ad98 <_kill_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	4d07      	ldr	r5, [pc, #28]	; (800adb8 <_kill_r+0x20>)
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	4604      	mov	r4, r0
 800ada0:	4608      	mov	r0, r1
 800ada2:	4611      	mov	r1, r2
 800ada4:	602b      	str	r3, [r5, #0]
 800ada6:	f7f7 fd09 	bl	80027bc <_kill>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	d102      	bne.n	800adb4 <_kill_r+0x1c>
 800adae:	682b      	ldr	r3, [r5, #0]
 800adb0:	b103      	cbz	r3, 800adb4 <_kill_r+0x1c>
 800adb2:	6023      	str	r3, [r4, #0]
 800adb4:	bd38      	pop	{r3, r4, r5, pc}
 800adb6:	bf00      	nop
 800adb8:	200017bc 	.word	0x200017bc

0800adbc <_getpid_r>:
 800adbc:	f7f7 bcfc 	b.w	80027b8 <_getpid>

0800adc0 <_init>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	bf00      	nop
 800adc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc6:	bc08      	pop	{r3}
 800adc8:	469e      	mov	lr, r3
 800adca:	4770      	bx	lr

0800adcc <_fini>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	bf00      	nop
 800add0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add2:	bc08      	pop	{r3}
 800add4:	469e      	mov	lr, r3
 800add6:	4770      	bx	lr
