
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d648  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  0800d7d8  0800d7d8  0001d7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3d4  0800e3d4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3d4  0800e3d4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3d4  0800e3d4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3d4  0800e3d4  0001e3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3d8  0800e3d8  0001e3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00001d14  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001ef4  20001ef4  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027d7b  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000521f  00000000  00000000  00047fca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000127a9  00000000  00000000  0004d1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001290  00000000  00000000  0005f998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000020b3  00000000  00000000  00060c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000234c5  00000000  00000000  00062cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00006d84  00000000  00000000  000861a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055d8  00000000  00000000  0008cf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000924fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d7c0 	.word	0x0800d7c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d7c0 	.word	0x0800d7c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c8a:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000c8c:	2400      	movs	r4, #0
{
 8000c8e:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c90:	eb0d 0002 	add.w	r0, sp, r2
 8000c94:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000c96:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000c9e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000ca2:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca4:	9404      	str	r4, [sp, #16]
 8000ca6:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ca8:	f00a fc94 	bl	800b5d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	483d      	ldr	r0, [pc, #244]	; (8000da4 <MX_ADC1_Init+0x11c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb2:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb6:	2301      	movs	r3, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cb8:	e9c0 c200 	strd	ip, r2, [r0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cbc:	8304      	strh	r4, [r0, #24]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	2204      	movs	r2, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc4:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cc6:	6103      	str	r3, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc8:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cce:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd0:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	6142      	str	r2, [r0, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cd6:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd8:	f004 fb36 	bl	8005348 <HAL_ADC_Init>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d14a      	bne.n	8000d76 <MX_ADC1_Init+0xee>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce2:	4830      	ldr	r0, [pc, #192]	; (8000da4 <MX_ADC1_Init+0x11c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce6:	a901      	add	r1, sp, #4
 8000ce8:	f005 fa0a 	bl	8006100 <HAL_ADCEx_MultiModeConfigChannel>
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d155      	bne.n	8000d9c <MX_ADC1_Init+0x114>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf0:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000cf2:	2005      	movs	r0, #5
 8000cf4:	e9cd 0306 	strd	r0, r3, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf8:	2201      	movs	r2, #1
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfa:	482a      	ldr	r0, [pc, #168]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000cfc:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cfe:	e9cd 2204 	strd	r2, r2, [sp, #16]
  sConfig.Offset = 0;
 8000d02:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d06:	f004 fddf 	bl	80058c8 <HAL_ADC_ConfigChannel>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d143      	bne.n	8000d96 <MX_ADC1_Init+0x10e>
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000d0e:	2104      	movs	r1, #4
 8000d10:	9110      	str	r1, [sp, #64]	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000d12:	2105      	movs	r1, #5
 8000d14:	910c      	str	r1, [sp, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d16:	2140      	movs	r1, #64	; 0x40
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d18:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d1a:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d1c:	9113      	str	r1, [sp, #76]	; 0x4c
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <MX_ADC1_Init+0x11c>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d20:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d22:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d24:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d28:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d2c:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d2e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d32:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d36:	f004 ff93 	bl	8005c60 <HAL_ADCEx_InjectedConfigChannel>
 8000d3a:	bb48      	cbnz	r0, 8000d90 <MX_ADC1_Init+0x108>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d3c:	2204      	movs	r2, #4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d3e:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000d42:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d44:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d48:	f004 ff8a 	bl	8005c60 <HAL_ADCEx_InjectedConfigChannel>
 8000d4c:	b9e8      	cbnz	r0, 8000d8a <MX_ADC1_Init+0x102>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d4e:	2205      	movs	r2, #5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d50:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000d54:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d5a:	f004 ff81 	bl	8005c60 <HAL_ADCEx_InjectedConfigChannel>
 8000d5e:	b988      	cbnz	r0, 8000d84 <MX_ADC1_Init+0xfc>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000d60:	2202      	movs	r2, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000d62:	2304      	movs	r3, #4
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000d66:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000d68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d6c:	f004 ff78 	bl	8005c60 <HAL_ADCEx_InjectedConfigChannel>
 8000d70:	b920      	cbnz	r0, 8000d7c <MX_ADC1_Init+0xf4>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d72:	b014      	add	sp, #80	; 0x50
 8000d74:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d76:	f003 fa21 	bl	80041bc <Error_Handler>
 8000d7a:	e7b1      	b.n	8000ce0 <MX_ADC1_Init+0x58>
    Error_Handler();
 8000d7c:	f003 fa1e 	bl	80041bc <Error_Handler>
}
 8000d80:	b014      	add	sp, #80	; 0x50
 8000d82:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d84:	f003 fa1a 	bl	80041bc <Error_Handler>
 8000d88:	e7ea      	b.n	8000d60 <MX_ADC1_Init+0xd8>
    Error_Handler();
 8000d8a:	f003 fa17 	bl	80041bc <Error_Handler>
 8000d8e:	e7de      	b.n	8000d4e <MX_ADC1_Init+0xc6>
    Error_Handler();
 8000d90:	f003 fa14 	bl	80041bc <Error_Handler>
 8000d94:	e7d2      	b.n	8000d3c <MX_ADC1_Init+0xb4>
    Error_Handler();
 8000d96:	f003 fa11 	bl	80041bc <Error_Handler>
 8000d9a:	e7b8      	b.n	8000d0e <MX_ADC1_Init+0x86>
    Error_Handler();
 8000d9c:	f003 fa0e 	bl	80041bc <Error_Handler>
 8000da0:	e7a6      	b.n	8000cf0 <MX_ADC1_Init+0x68>
 8000da2:	bf00      	nop
 8000da4:	20000224 	.word	0x20000224

08000da8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000da8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	2400      	movs	r4, #0
{
 8000dac:	b090      	sub	sp, #64	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	4621      	mov	r1, r4
 8000db2:	a806      	add	r0, sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000db4:	e9cd 4400 	strd	r4, r4, [sp]
 8000db8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000dbc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dc0:	f00a fc08 	bl	800b5d4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dc4:	4830      	ldr	r0, [pc, #192]	; (8000e88 <MX_ADC2_Init+0xe0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc6:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8000e8c <MX_ADC2_Init+0xe4>
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dca:	8304      	strh	r4, [r0, #24]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dd0:	2301      	movs	r3, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dd2:	e9c0 c200 	strd	ip, r2, [r0]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	2204      	movs	r2, #4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd8:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dde:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de4:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000de6:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000de8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dec:	6142      	str	r2, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dee:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df0:	f004 faaa 	bl	8005348 <HAL_ADC_Init>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d136      	bne.n	8000e66 <MX_ADC2_Init+0xbe>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df8:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_1;
 8000dfa:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfc:	4822      	ldr	r0, [pc, #136]	; (8000e88 <MX_ADC2_Init+0xe0>)
 8000dfe:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	e9cd 2200 	strd	r2, r2, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e04:	e9cd 3302 	strd	r3, r3, [sp, #8]
  sConfig.Offset = 0;
 8000e08:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e0c:	f004 fd5c 	bl	80058c8 <HAL_ADC_ConfigChannel>
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d135      	bne.n	8000e80 <MX_ADC2_Init+0xd8>
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e14:	2103      	movs	r1, #3
 8000e16:	910c      	str	r1, [sp, #48]	; 0x30
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000e18:	2105      	movs	r1, #5
 8000e1a:	9108      	str	r1, [sp, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e1c:	2140      	movs	r1, #64	; 0x40
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e1e:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e20:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e22:	910f      	str	r1, [sp, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e24:	4818      	ldr	r0, [pc, #96]	; (8000e88 <MX_ADC2_Init+0xe0>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e26:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e28:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e2a:	e9cd 2206 	strd	r2, r2, [sp, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e2e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e32:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e34:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e38:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e3c:	f004 ff10 	bl	8005c60 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	b9d8      	cbnz	r0, 8000e7a <MX_ADC2_Init+0xd2>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000e42:	2302      	movs	r3, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e44:	4810      	ldr	r0, [pc, #64]	; (8000e88 <MX_ADC2_Init+0xe0>)
 8000e46:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e48:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e4c:	f004 ff08 	bl	8005c60 <HAL_ADCEx_InjectedConfigChannel>
 8000e50:	b980      	cbnz	r0, 8000e74 <MX_ADC2_Init+0xcc>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e52:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <MX_ADC2_Init+0xe0>)
 8000e56:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e58:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e5c:	f004 ff00 	bl	8005c60 <HAL_ADCEx_InjectedConfigChannel>
 8000e60:	b920      	cbnz	r0, 8000e6c <MX_ADC2_Init+0xc4>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e62:	b010      	add	sp, #64	; 0x40
 8000e64:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e66:	f003 f9a9 	bl	80041bc <Error_Handler>
 8000e6a:	e7c5      	b.n	8000df8 <MX_ADC2_Init+0x50>
    Error_Handler();
 8000e6c:	f003 f9a6 	bl	80041bc <Error_Handler>
}
 8000e70:	b010      	add	sp, #64	; 0x40
 8000e72:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e74:	f003 f9a2 	bl	80041bc <Error_Handler>
 8000e78:	e7eb      	b.n	8000e52 <MX_ADC2_Init+0xaa>
    Error_Handler();
 8000e7a:	f003 f99f 	bl	80041bc <Error_Handler>
 8000e7e:	e7e0      	b.n	8000e42 <MX_ADC2_Init+0x9a>
    Error_Handler();
 8000e80:	f003 f99c 	bl	80041bc <Error_Handler>
 8000e84:	e7c6      	b.n	8000e14 <MX_ADC2_Init+0x6c>
 8000e86:	bf00      	nop
 8000e88:	20000274 	.word	0x20000274
 8000e8c:	50000100 	.word	0x50000100

08000e90 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e90:	b510      	push	{r4, lr}

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e92:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000e94:	2400      	movs	r4, #0
{
 8000e96:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e98:	eb0d 0002 	add.w	r0, sp, r2
 8000e9c:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000e9e:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000ea6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000eaa:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eac:	9404      	str	r4, [sp, #16]
 8000eae:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000eb0:	f00a fb90 	bl	800b5d4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000eb4:	4827      	ldr	r0, [pc, #156]	; (8000f54 <MX_ADC3_Init+0xc4>)
 8000eb6:	4a28      	ldr	r2, [pc, #160]	; (8000f58 <MX_ADC3_Init+0xc8>)
 8000eb8:	6002      	str	r2, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eba:	2301      	movs	r3, #1
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	2204      	movs	r2, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ebe:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec8:	6104      	str	r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ece:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ed0:	61c3      	str	r3, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ed2:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed6:	6142      	str	r2, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ed8:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eda:	f004 fa35 	bl	8005348 <HAL_ADC_Init>
 8000ede:	bb60      	cbnz	r0, 8000f3a <MX_ADC3_Init+0xaa>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <MX_ADC3_Init+0xc4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ee6:	a901      	add	r1, sp, #4
 8000ee8:	f005 f90a 	bl	8006100 <HAL_ADCEx_MultiModeConfigChannel>
 8000eec:	bb78      	cbnz	r0, 8000f4e <MX_ADC3_Init+0xbe>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eee:	2205      	movs	r2, #5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef0:	2001      	movs	r0, #1
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef2:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef4:	e9cd 2004 	strd	r2, r0, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ef8:	a904      	add	r1, sp, #16
 8000efa:	4816      	ldr	r0, [pc, #88]	; (8000f54 <MX_ADC3_Init+0xc4>)
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000efc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfig.Offset = 0;
 8000f00:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f04:	f004 fce0 	bl	80058c8 <HAL_ADC_ConfigChannel>
 8000f08:	b9f0      	cbnz	r0, 8000f48 <MX_ADC3_Init+0xb8>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0a:	2201      	movs	r2, #1
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000f0c:	2005      	movs	r0, #5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f0e:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f10:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f14:	2440      	movs	r4, #64	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000f16:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f18:	a90a      	add	r1, sp, #40	; 0x28
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_ADC3_Init+0xc4>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f1c:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f1e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f22:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f24:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f26:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f28:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f2c:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f30:	f004 fe96 	bl	8005c60 <HAL_ADCEx_InjectedConfigChannel>
 8000f34:	b920      	cbnz	r0, 8000f40 <MX_ADC3_Init+0xb0>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f36:	b014      	add	sp, #80	; 0x50
 8000f38:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f3a:	f003 f93f 	bl	80041bc <Error_Handler>
 8000f3e:	e7cf      	b.n	8000ee0 <MX_ADC3_Init+0x50>
    Error_Handler();
 8000f40:	f003 f93c 	bl	80041bc <Error_Handler>
}
 8000f44:	b014      	add	sp, #80	; 0x50
 8000f46:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f48:	f003 f938 	bl	80041bc <Error_Handler>
 8000f4c:	e7dd      	b.n	8000f0a <MX_ADC3_Init+0x7a>
    Error_Handler();
 8000f4e:	f003 f935 	bl	80041bc <Error_Handler>
 8000f52:	e7cc      	b.n	8000eee <MX_ADC3_Init+0x5e>
 8000f54:	200002c4 	.word	0x200002c4
 8000f58:	50000400 	.word	0x50000400
 8000f5c:	00000000 	.word	0x00000000

08000f60 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f60:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000f62:	6802      	ldr	r2, [r0, #0]
{
 8000f64:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8000f68:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000f70:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000f74:	930c      	str	r3, [sp, #48]	; 0x30
  if(adcHandle->Instance==ADC1)
 8000f76:	d024      	beq.n	8000fc2 <HAL_ADC_MspInit+0x62>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_ADC_MspInit+0x148>)
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d005      	beq.n	8000f8a <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <HAL_ADC_MspInit+0x14c>)
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d063      	beq.n	800104c <HAL_ADC_MspInit+0xec>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f84:	b00f      	add	sp, #60	; 0x3c
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f8a:	4a49      	ldr	r2, [pc, #292]	; (80010b0 <HAL_ADC_MspInit+0x150>)
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f90:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f94:	d04f      	beq.n	8001036 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fa2:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8001090 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	a908      	add	r1, sp, #32
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fb2:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f005 ffca 	bl	8006f50 <HAL_GPIO_Init>
}
 8000fbc:	b00f      	add	sp, #60	; 0x3c
 8000fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fc2:	4a3b      	ldr	r2, [pc, #236]	; (80010b0 <HAL_ADC_MspInit+0x150>)
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fc8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fcc:	d028      	beq.n	8001020 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000fde:	9202      	str	r2, [sp, #8]
 8000fe0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000ff2:	220b      	movs	r2, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000ff6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000ffc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001000:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f005 ffa5 	bl	8006f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001006:	ed9f 7b24 	vldr	d7, [pc, #144]	; 8001098 <HAL_ADC_MspInit+0x138>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800100c:	482a      	ldr	r0, [pc, #168]	; (80010b8 <HAL_ADC_MspInit+0x158>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001010:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001012:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001016:	f005 ff9b 	bl	8006f50 <HAL_GPIO_Init>
}
 800101a:	b00f      	add	sp, #60	; 0x3c
 800101c:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	9b01      	ldr	r3, [sp, #4]
 8001034:	e7cb      	b.n	8000fce <HAL_ADC_MspInit+0x6e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	9304      	str	r3, [sp, #16]
 8001048:	9b04      	ldr	r3, [sp, #16]
 800104a:	e7a4      	b.n	8000f96 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800104c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001050:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001054:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80010a0 <HAL_ADC_MspInit+0x140>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001058:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800105c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001068:	9206      	str	r2, [sp, #24]
 800106a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800107e:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f005 ff64 	bl	8006f50 <HAL_GPIO_Init>
}
 8001088:	e77c      	b.n	8000f84 <HAL_ADC_MspInit+0x24>
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	00000070 	.word	0x00000070
 8001094:	00000003 	.word	0x00000003
 8001098:	00000010 	.word	0x00000010
 800109c:	00000003 	.word	0x00000003
 80010a0:	00002000 	.word	0x00002000
 80010a4:	00000003 	.word	0x00000003
 80010a8:	50000100 	.word	0x50000100
 80010ac:	50000400 	.word	0x50000400
 80010b0:	200001fc 	.word	0x200001fc
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48001400 	.word	0x48001400
 80010bc:	48000400 	.word	0x48000400

080010c0 <getBatteryVoltage>:
  }
}

/* USER CODE BEGIN 1 */

inline float getBatteryVoltage(void) { return adc_raw.batt_v * 3.3 * 11 / 4096; }
 80010c0:	b508      	push	{r3, lr}
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <getBatteryVoltage+0x28>)
 80010c4:	6898      	ldr	r0, [r3, #8]
 80010c6:	f7ff fa2d 	bl	8000524 <__aeabi_i2d>
 80010ca:	a305      	add	r3, pc, #20	; (adr r3, 80010e0 <getBatteryVoltage+0x20>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fa92 	bl	80005f8 <__aeabi_dmul>
 80010d4:	f7ff fd88 	bl	8000be8 <__aeabi_d2f>
 80010d8:	ee00 0a10 	vmov	s0, r0
 80010dc:	bd08      	pop	{r3, pc}
 80010de:	bf00      	nop
 80010e0:	66666666 	.word	0x66666666
 80010e4:	3f822666 	.word	0x3f822666
 80010e8:	20000200 	.word	0x20000200
 80010ec:	00000000 	.word	0x00000000

080010f0 <getCurrentM0>:
// 50V/V * 5m = 250mV/A
inline float getCurrentM0(void) { return (adc_raw.cs_m0 - adc_raw.cs_adc_offset) * 3.3 / 4096 * 4; }
 80010f0:	b508      	push	{r3, lr}
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <getCurrentM0+0x30>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	1ac0      	subs	r0, r0, r3
 80010fa:	f7ff fa13 	bl	8000524 <__aeabi_i2d>
 80010fe:	a306      	add	r3, pc, #24	; (adr r3, 8001118 <getCurrentM0+0x28>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fa78 	bl	80005f8 <__aeabi_dmul>
 8001108:	f7ff fd6e 	bl	8000be8 <__aeabi_d2f>
 800110c:	ee00 0a10 	vmov	s0, r0
 8001110:	bd08      	pop	{r3, pc}
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	66666666 	.word	0x66666666
 800111c:	3f6a6666 	.word	0x3f6a6666
 8001120:	20000200 	.word	0x20000200
 8001124:	00000000 	.word	0x00000000

08001128 <getCurrentM1>:
inline float getCurrentM1(void) { return (adc_raw.cs_m1 - adc_raw.cs_adc_offset) * 3.3 / 4096 * 4; }
 8001128:	b508      	push	{r3, lr}
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <getCurrentM1+0x30>)
 800112c:	6858      	ldr	r0, [r3, #4]
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	1ac0      	subs	r0, r0, r3
 8001132:	f7ff f9f7 	bl	8000524 <__aeabi_i2d>
 8001136:	a306      	add	r3, pc, #24	; (adr r3, 8001150 <getCurrentM1+0x28>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa5c 	bl	80005f8 <__aeabi_dmul>
 8001140:	f7ff fd52 	bl	8000be8 <__aeabi_d2f>
 8001144:	ee00 0a10 	vmov	s0, r0
 8001148:	bd08      	pop	{r3, pc}
 800114a:	bf00      	nop
 800114c:	f3af 8000 	nop.w
 8001150:	66666666 	.word	0x66666666
 8001154:	3f6a6666 	.word	0x3f6a6666
 8001158:	20000200 	.word	0x20000200
 800115c:	00000000 	.word	0x00000000

08001160 <getTempM1>:

inline int getTempFET0(void) { return (-((float)adc_raw.temp_fet0 * 3.3 / 4096) + 1.5) * 70 + 25; }
inline int getTempFET1(void) { return (-((float)adc_raw.temp_fet1 * 3.3 / 4096) + 1.5) * 70 + 25; }
int getTempM1(void) { return (-((float)adc_raw.temp_m0 * 3.3 / 4096) + 1.5) * 70 + 25; }
 8001160:	b508      	push	{r3, lr}
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <getTempM1+0x50>)
 8001164:	6958      	ldr	r0, [r3, #20]
 8001166:	ee07 0a90 	vmov	s15, r0
 800116a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116e:	ee17 0a90 	vmov	r0, s15
 8001172:	f7ff f9e9 	bl	8000548 <__aeabi_f2d>
 8001176:	a30c      	add	r3, pc, #48	; (adr r3, 80011a8 <getTempM1+0x48>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa3c 	bl	80005f8 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	2000      	movs	r0, #0
 8001186:	490b      	ldr	r1, [pc, #44]	; (80011b4 <getTempM1+0x54>)
 8001188:	f7ff f87e 	bl	8000288 <__aeabi_dsub>
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <getTempM1+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	f7ff fa32 	bl	80005f8 <__aeabi_dmul>
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <getTempM1+0x5c>)
 8001196:	2200      	movs	r2, #0
 8001198:	f7ff f878 	bl	800028c <__adddf3>
 800119c:	f7ff fcdc 	bl	8000b58 <__aeabi_d2iz>
 80011a0:	bd08      	pop	{r3, pc}
 80011a2:	bf00      	nop
 80011a4:	f3af 8000 	nop.w
 80011a8:	66666666 	.word	0x66666666
 80011ac:	3f4a6666 	.word	0x3f4a6666
 80011b0:	20000200 	.word	0x20000200
 80011b4:	3ff80000 	.word	0x3ff80000
 80011b8:	40518000 	.word	0x40518000
 80011bc:	40390000 	.word	0x40390000

080011c0 <getTempM0>:
int getTempM0(void) { return (-((float)adc_raw.temp_m1 * 3.3 / 4096) + 1.5) * 70 + 25; }
 80011c0:	b508      	push	{r3, lr}
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <getTempM0+0x50>)
 80011c4:	6998      	ldr	r0, [r3, #24]
 80011c6:	ee07 0a90 	vmov	s15, r0
 80011ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ce:	ee17 0a90 	vmov	r0, s15
 80011d2:	f7ff f9b9 	bl	8000548 <__aeabi_f2d>
 80011d6:	a30c      	add	r3, pc, #48	; (adr r3, 8001208 <getTempM0+0x48>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fa0c 	bl	80005f8 <__aeabi_dmul>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	2000      	movs	r0, #0
 80011e6:	490b      	ldr	r1, [pc, #44]	; (8001214 <getTempM0+0x54>)
 80011e8:	f7ff f84e 	bl	8000288 <__aeabi_dsub>
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <getTempM0+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f7ff fa02 	bl	80005f8 <__aeabi_dmul>
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <getTempM0+0x5c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f7ff f848 	bl	800028c <__adddf3>
 80011fc:	f7ff fcac 	bl	8000b58 <__aeabi_d2iz>
 8001200:	bd08      	pop	{r3, pc}
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	66666666 	.word	0x66666666
 800120c:	3f4a6666 	.word	0x3f4a6666
 8001210:	20000200 	.word	0x20000200
 8001214:	3ff80000 	.word	0x3ff80000
 8001218:	40518000 	.word	0x40518000
 800121c:	40390000 	.word	0x40390000

08001220 <getGateDriverDCDCVoltage>:

inline float getGateDriverDCDCVoltage(void) { return (adc_raw.gd_dcdc_v) * 3.3 * 11 / 4096; }
 8001220:	b508      	push	{r3, lr}
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <getGateDriverDCDCVoltage+0x28>)
 8001224:	6a18      	ldr	r0, [r3, #32]
 8001226:	f7ff f97d 	bl	8000524 <__aeabi_i2d>
 800122a:	a305      	add	r3, pc, #20	; (adr r3, 8001240 <getGateDriverDCDCVoltage+0x20>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7ff f9e2 	bl	80005f8 <__aeabi_dmul>
 8001234:	f7ff fcd8 	bl	8000be8 <__aeabi_d2f>
 8001238:	ee00 0a10 	vmov	s0, r0
 800123c:	bd08      	pop	{r3, pc}
 800123e:	bf00      	nop
 8001240:	66666666 	.word	0x66666666
 8001244:	3f822666 	.word	0x3f822666
 8001248:	20000200 	.word	0x20000200

0800124c <updateADC_M0>:

// timer割り込みの中で更新する
inline void updateADC_M0(void)
{
 800124c:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800124e:	4e14      	ldr	r6, [pc, #80]	; (80012a0 <updateADC_M0+0x54>)
  adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001250:	4c14      	ldr	r4, [pc, #80]	; (80012a4 <updateADC_M0+0x58>)
 8001252:	4d15      	ldr	r5, [pc, #84]	; (80012a8 <updateADC_M0+0x5c>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	4630      	mov	r0, r6
 8001258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125c:	f005 ff66 	bl	800712c <HAL_GPIO_WritePin>
  adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001260:	2101      	movs	r1, #1
 8001262:	4620      	mov	r0, r4
 8001264:	f004 fb1a 	bl	800589c <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001268:	2102      	movs	r1, #2
  adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800126a:	6028      	str	r0, [r5, #0]
  adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800126c:	4620      	mov	r0, r4
 800126e:	f004 fb15 	bl	800589c <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001272:	2103      	movs	r1, #3
  adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001274:	6168      	str	r0, [r5, #20]
  adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001276:	4620      	mov	r0, r4
 8001278:	f004 fb10 	bl	800589c <HAL_ADCEx_InjectedGetValue>
  adc_raw.gd_dcdc_v = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 800127c:	2104      	movs	r1, #4
  adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800127e:	61a8      	str	r0, [r5, #24]
  adc_raw.gd_dcdc_v = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 8001280:	4620      	mov	r0, r4
 8001282:	f004 fb0b 	bl	800589c <HAL_ADCEx_InjectedGetValue>
 8001286:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc1);
 8001288:	4620      	mov	r0, r4
  adc_raw.gd_dcdc_v = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 800128a:	622b      	str	r3, [r5, #32]
  HAL_ADCEx_InjectedStart(&hadc1);
 800128c:	f004 fa7e 	bl	800578c <HAL_ADCEx_InjectedStart>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001290:	4630      	mov	r0, r6
 8001292:	2200      	movs	r2, #0
}
 8001294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129c:	f005 bf46 	b.w	800712c <HAL_GPIO_WritePin>
 80012a0:	48000800 	.word	0x48000800
 80012a4:	20000224 	.word	0x20000224
 80012a8:	20000200 	.word	0x20000200

080012ac <updateADC_M1>:

inline void updateADC_M1(void)
{
 80012ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80012ae:	4e16      	ldr	r6, [pc, #88]	; (8001308 <updateADC_M1+0x5c>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80012b0:	4f16      	ldr	r7, [pc, #88]	; (800130c <updateADC_M1+0x60>)
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80012b2:	4d17      	ldr	r5, [pc, #92]	; (8001310 <updateADC_M1+0x64>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80012b4:	4c17      	ldr	r4, [pc, #92]	; (8001314 <updateADC_M1+0x68>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	4630      	mov	r0, r6
 80012ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012be:	f005 ff35 	bl	800712c <HAL_GPIO_WritePin>
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80012c2:	2101      	movs	r1, #1
 80012c4:	4638      	mov	r0, r7
 80012c6:	f004 fae9 	bl	800589c <HAL_ADCEx_InjectedGetValue>
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80012ca:	2101      	movs	r1, #1
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80012cc:	60a0      	str	r0, [r4, #8]
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80012ce:	4628      	mov	r0, r5
 80012d0:	f004 fae4 	bl	800589c <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_fet0 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 80012d4:	2102      	movs	r1, #2
  adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80012d6:	6060      	str	r0, [r4, #4]
  adc_raw.temp_fet0 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 80012d8:	4628      	mov	r0, r5
 80012da:	f004 fadf 	bl	800589c <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_fet1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 80012de:	2103      	movs	r1, #3
  adc_raw.temp_fet0 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 80012e0:	60e0      	str	r0, [r4, #12]
  adc_raw.temp_fet1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 80012e2:	4628      	mov	r0, r5
 80012e4:	f004 fada 	bl	800589c <HAL_ADCEx_InjectedGetValue>
 80012e8:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc2);
 80012ea:	4628      	mov	r0, r5
  adc_raw.temp_fet1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 80012ec:	6123      	str	r3, [r4, #16]
  HAL_ADCEx_InjectedStart(&hadc2);
 80012ee:	f004 fa4d 	bl	800578c <HAL_ADCEx_InjectedStart>
  HAL_ADCEx_InjectedStart(&hadc3);
 80012f2:	4638      	mov	r0, r7
 80012f4:	f004 fa4a 	bl	800578c <HAL_ADCEx_InjectedStart>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012f8:	4630      	mov	r0, r6
 80012fa:	2200      	movs	r2, #0
}
 80012fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001304:	f005 bf12 	b.w	800712c <HAL_GPIO_WritePin>
 8001308:	48000800 	.word	0x48000800
 800130c:	200002c4 	.word	0x200002c4
 8001310:	20000274 	.word	0x20000274
 8001314:	20000200 	.word	0x20000200

08001318 <isNotZeroCurrent>:

bool isNotZeroCurrent() { return getCurrentM0() > 0.5 || getCurrentM1() > 0.5; }
 8001318:	b538      	push	{r3, r4, r5, lr}
inline float getCurrentM0(void) { return (adc_raw.cs_m0 - adc_raw.cs_adc_offset) * 3.3 / 4096 * 4; }
 800131a:	4c1b      	ldr	r4, [pc, #108]	; (8001388 <isNotZeroCurrent+0x70>)
 800131c:	69e5      	ldr	r5, [r4, #28]
 800131e:	6820      	ldr	r0, [r4, #0]
bool isNotZeroCurrent() { return getCurrentM0() > 0.5 || getCurrentM1() > 0.5; }
 8001320:	ed2d 8b02 	vpush	{d8}
inline float getCurrentM0(void) { return (adc_raw.cs_m0 - adc_raw.cs_adc_offset) * 3.3 / 4096 * 4; }
 8001324:	1b40      	subs	r0, r0, r5
 8001326:	f7ff f8fd 	bl	8000524 <__aeabi_i2d>
 800132a:	a315      	add	r3, pc, #84	; (adr r3, 8001380 <isNotZeroCurrent+0x68>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	f7ff fc58 	bl	8000be8 <__aeabi_d2f>
bool isNotZeroCurrent() { return getCurrentM0() > 0.5 || getCurrentM1() > 0.5; }
 8001338:	ee07 0a90 	vmov	s15, r0
 800133c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8001340:	eef4 7ac8 	vcmpe.f32	s15, s16
 8001344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001348:	dc16      	bgt.n	8001378 <isNotZeroCurrent+0x60>
inline float getCurrentM1(void) { return (adc_raw.cs_m1 - adc_raw.cs_adc_offset) * 3.3 / 4096 * 4; }
 800134a:	6860      	ldr	r0, [r4, #4]
 800134c:	1b40      	subs	r0, r0, r5
 800134e:	f7ff f8e9 	bl	8000524 <__aeabi_i2d>
 8001352:	a30b      	add	r3, pc, #44	; (adr r3, 8001380 <isNotZeroCurrent+0x68>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f94e 	bl	80005f8 <__aeabi_dmul>
 800135c:	f7ff fc44 	bl	8000be8 <__aeabi_d2f>
bool isNotZeroCurrent() { return getCurrentM0() > 0.5 || getCurrentM1() > 0.5; }
 8001360:	ee07 0a90 	vmov	s15, r0
 8001364:	eef4 7ac8 	vcmpe.f32	s15, s16
 8001368:	ecbd 8b02 	vpop	{d8}
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	bfcc      	ite	gt
 8001372:	2001      	movgt	r0, #1
 8001374:	2000      	movle	r0, #0
 8001376:	bd38      	pop	{r3, r4, r5, pc}
 8001378:	ecbd 8b02 	vpop	{d8}
 800137c:	2001      	movs	r0, #1
 800137e:	bd38      	pop	{r3, r4, r5, pc}
 8001380:	66666666 	.word	0x66666666
 8001384:	3f6a6666 	.word	0x3f6a6666
 8001388:	20000200 	.word	0x20000200

0800138c <MX_CAN_Init>:
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_CAN_Init+0x38>)
 800138e:	490e      	ldr	r1, [pc, #56]	; (80013c8 <MX_CAN_Init+0x3c>)
  hcan.Init.Prescaler = 4;
 8001390:	2204      	movs	r2, #4
{
 8001392:	b510      	push	{r4, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001394:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 4;
 8001396:	e9c0 1200 	strd	r1, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 800139a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 800139e:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80013a2:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013a6:	6182      	str	r2, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013a8:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013aa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80013ae:	e9c0 4104 	strd	r4, r1, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013b2:	f004 ff37 	bl	8006224 <HAL_CAN_Init>
 80013b6:	b900      	cbnz	r0, 80013ba <MX_CAN_Init+0x2e>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80013b8:	bd10      	pop	{r4, pc}
 80013ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80013be:	f002 befd 	b.w	80041bc <Error_Handler>
 80013c2:	bf00      	nop
 80013c4:	20000318 	.word	0x20000318
 80013c8:	40006400 	.word	0x40006400

080013cc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013cc:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <HAL_CAN_MspInit+0xa4>)
 80013d0:	6802      	ldr	r2, [r0, #0]
{
 80013d2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 80013d6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80013dc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80013e0:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN)
 80013e2:	d001      	beq.n	80013e8 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80013e4:	b009      	add	sp, #36	; 0x24
 80013e6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013ee:	69da      	ldr	r2, [r3, #28]
 80013f0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80013f4:	61da      	str	r2, [r3, #28]
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	695a      	ldr	r2, [r3, #20]
 8001402:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001410:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001414:	2302      	movs	r3, #2
 8001416:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800141e:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001420:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001422:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001426:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	f005 fd92 	bl	8006f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 15, 0);
 800142c:	4622      	mov	r2, r4
 800142e:	210f      	movs	r1, #15
 8001430:	2013      	movs	r0, #19
 8001432:	f005 fa6d 	bl	8006910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8001436:	2013      	movs	r0, #19
 8001438:	f005 faa8 	bl	800698c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 15, 0);
 800143c:	4622      	mov	r2, r4
 800143e:	210f      	movs	r1, #15
 8001440:	2014      	movs	r0, #20
 8001442:	f005 fa65 	bl	8006910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001446:	2014      	movs	r0, #20
 8001448:	f005 faa0 	bl	800698c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 800144c:	4622      	mov	r2, r4
 800144e:	2101      	movs	r1, #1
 8001450:	2015      	movs	r0, #21
 8001452:	f005 fa5d 	bl	8006910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001456:	2015      	movs	r0, #21
 8001458:	f005 fa98 	bl	800698c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 800145c:	4622      	mov	r2, r4
 800145e:	2101      	movs	r1, #1
 8001460:	2016      	movs	r0, #22
 8001462:	f005 fa55 	bl	8006910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 8001466:	2016      	movs	r0, #22
 8001468:	f005 fa90 	bl	800698c <HAL_NVIC_EnableIRQ>
}
 800146c:	b009      	add	sp, #36	; 0x24
 800146e:	bd30      	pop	{r4, r5, pc}
 8001470:	40006400 	.word	0x40006400

08001474 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(uint16_t board_addr)
{
 8001474:	b510      	push	{r4, lr}
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
  sFilterConfig.FilterBank = 0;
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5; //speed
 8001476:	3080      	adds	r0, #128	; 0x80
{
 8001478:	b08a      	sub	sp, #40	; 0x28
  sFilterConfig.FilterIdLow = (0x310) << 5; //motor calib
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5; //speed
 800147a:	0182      	lsls	r2, r0, #6
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5; //speed
 800147c:	4610      	mov	r0, r2
  sFilterConfig.FilterIdLow = (0x310) << 5; //motor calib
 800147e:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5; //speed
 8001482:	3220      	adds	r2, #32
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001484:	2300      	movs	r3, #0
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5; //speed
 8001486:	e9cd 1201 	strd	r1, r2, [sp, #4]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800148a:	2401      	movs	r4, #1
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5; //speed
 800148c:	9000      	str	r0, [sp, #0]
  sFilterConfig.FilterMaskIdLow = (0x320) << 5; // notused
 800148e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;
  //sFilterConfig.SlaveStartFilterBank = 0; dont supported F3xx
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001492:	481b      	ldr	r0, [pc, #108]	; (8001500 <CAN_Filter_Init+0x8c>)
  sFilterConfig.FilterBank = 0;
 8001494:	9305      	str	r3, [sp, #20]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001496:	4669      	mov	r1, sp
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001498:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sFilterConfig.FilterMaskIdLow = (0x320) << 5; // notused
 800149c:	9203      	str	r2, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800149e:	9304      	str	r3, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80014a0:	9408      	str	r4, [sp, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80014a2:	f004 ff3f 	bl	8006324 <HAL_CAN_ConfigFilter>
 80014a6:	b9f0      	cbnz	r0, 80014e6 <CAN_Filter_Init+0x72>
  {
    Error_Handler();
  }

  sFilterConfig.FilterIdHigh = (0x110) << 5;  // kick
  sFilterConfig.FilterIdLow = (0x010) << 5; // power enable
 80014a8:	f44f 7300 	mov.w	r3, #512	; 0x200
  sFilterConfig.FilterIdHigh = (0x110) << 5;  // kick
 80014ac:	f44f 5408 	mov.w	r4, #8704	; 0x2200
  sFilterConfig.FilterMaskIdHigh = (0x000) << 5; // emg stop
 80014b0:	2200      	movs	r2, #0
  sFilterConfig.FilterIdLow = (0x010) << 5; // power enable
 80014b2:	e9cd 4300 	strd	r4, r3, [sp]
  sFilterConfig.FilterMaskIdLow = (0x001) << 5; // error report
 80014b6:	2320      	movs	r3, #32
 80014b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
  sFilterConfig.FilterBank = 1;
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80014bc:	4810      	ldr	r0, [pc, #64]	; (8001500 <CAN_Filter_Init+0x8c>)
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80014be:	2201      	movs	r2, #1
 80014c0:	2301      	movs	r3, #1
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80014c2:	4669      	mov	r1, sp
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80014c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80014c8:	f004 ff2c 	bl	8006324 <HAL_CAN_ConfigFilter>
 80014cc:	b9a8      	cbnz	r0, 80014fa <CAN_Filter_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80014ce:	480c      	ldr	r0, [pc, #48]	; (8001500 <CAN_Filter_Init+0x8c>)
 80014d0:	2102      	movs	r1, #2
 80014d2:	f005 f8b9 	bl	8006648 <HAL_CAN_ActivateNotification>
 80014d6:	b968      	cbnz	r0, 80014f4 <CAN_Filter_Init+0x80>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 80014d8:	4809      	ldr	r0, [pc, #36]	; (8001500 <CAN_Filter_Init+0x8c>)
 80014da:	2110      	movs	r1, #16
 80014dc:	f005 f8b4 	bl	8006648 <HAL_CAN_ActivateNotification>
 80014e0:	b920      	cbnz	r0, 80014ec <CAN_Filter_Init+0x78>
  {
    Error_Handler();
  }
}
 80014e2:	b00a      	add	sp, #40	; 0x28
 80014e4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80014e6:	f002 fe69 	bl	80041bc <Error_Handler>
 80014ea:	e7dd      	b.n	80014a8 <CAN_Filter_Init+0x34>
    Error_Handler();
 80014ec:	f002 fe66 	bl	80041bc <Error_Handler>
}
 80014f0:	b00a      	add	sp, #40	; 0x28
 80014f2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80014f4:	f002 fe62 	bl	80041bc <Error_Handler>
 80014f8:	e7ee      	b.n	80014d8 <CAN_Filter_Init+0x64>
    Error_Handler();
 80014fa:	f002 fe5f 	bl	80041bc <Error_Handler>
 80014fe:	e7e6      	b.n	80014ce <CAN_Filter_Init+0x5a>
 8001500:	20000318 	.word	0x20000318

08001504 <sendFloat>:

void sendFloat(uint32_t can_id, float data)
{
 8001504:	b500      	push	{lr}
 8001506:	b08b      	sub	sp, #44	; 0x2c
  can_msg_buf_t msg;
  CAN_TxHeaderTypeDef can_header;
  uint32_t can_mailbox;
  can_header.StdId = can_id;
  can_header.ExtId = 0;
 8001508:	2100      	movs	r1, #0
  can_header.RTR = CAN_RTR_DATA;
  can_header.DLC = 4;
 800150a:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 800150c:	e9cd 0104 	strd	r0, r1, [sp, #16]
  can_header.DLC = 4;
 8001510:	e9cd 1207 	strd	r1, r2, [sp, #28]
  can_header.IDE = CAN_ID_STD;
  can_header.TransmitGlobalTime = DISABLE;
  msg.value = data;
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001514:	eb0d 0302 	add.w	r3, sp, r2
  can_header.IDE = CAN_ID_STD;
 8001518:	9106      	str	r1, [sp, #24]
  can_header.TransmitGlobalTime = DISABLE;
 800151a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <sendFloat+0x38>)
  msg.value = data;
 8001520:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001524:	aa02      	add	r2, sp, #8
 8001526:	a904      	add	r1, sp, #16
 8001528:	f004 ffa6 	bl	8006478 <HAL_CAN_AddTxMessage>
 800152c:	b118      	cbz	r0, 8001536 <sendFloat+0x32>
  {
    can_send_fail_cnt++;
 800152e:	4a04      	ldr	r2, [pc, #16]	; (8001540 <sendFloat+0x3c>)
 8001530:	6813      	ldr	r3, [r2, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	6013      	str	r3, [r2, #0]
  }
}
 8001536:	b00b      	add	sp, #44	; 0x2c
 8001538:	f85d fb04 	ldr.w	pc, [sp], #4
 800153c:	20000318 	.word	0x20000318
 8001540:	20000314 	.word	0x20000314

08001544 <sendSpeed>:
    can_send_fail_cnt++;
  }
}

void sendSpeed(int board_id, int motor, float speed, float angle)
{
 8001544:	b510      	push	{r4, lr}
  sendSpeedInfo(0x200 + board_id * 2 + motor, speed, angle);
 8001546:	f500 7080 	add.w	r0, r0, #256	; 0x100
{
 800154a:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 800154c:	2200      	movs	r2, #0
  sendSpeedInfo(0x200 + board_id * 2 + motor, speed, angle);
 800154e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 8;
 8001552:	2408      	movs	r4, #8
 8001554:	e9cd 2407 	strd	r2, r4, [sp, #28]
  can_header.StdId = can_id;
 8001558:	9104      	str	r1, [sp, #16]
  can_header.ExtId = 0;
 800155a:	9205      	str	r2, [sp, #20]
  can_header.IDE = CAN_ID_STD;
 800155c:	9206      	str	r2, [sp, #24]
  can_header.TransmitGlobalTime = DISABLE;
 800155e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <sendSpeed+0x44>)
  msg.speed.rev_p_sec = rev_per_sec_;
 8001564:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001568:	ab01      	add	r3, sp, #4
 800156a:	eb0d 0204 	add.w	r2, sp, r4
 800156e:	a904      	add	r1, sp, #16
  msg.speed.omni_angle = omni_angle_;
 8001570:	edcd 0a03 	vstr	s1, [sp, #12]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001574:	f004 ff80 	bl	8006478 <HAL_CAN_AddTxMessage>
 8001578:	b118      	cbz	r0, 8001582 <sendSpeed+0x3e>
    can_send_fail_cnt++;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <sendSpeed+0x48>)
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	6013      	str	r3, [r2, #0]
}
 8001582:	b00a      	add	sp, #40	; 0x28
 8001584:	bd10      	pop	{r4, pc}
 8001586:	bf00      	nop
 8001588:	20000318 	.word	0x20000318
 800158c:	20000314 	.word	0x20000314

08001590 <sendVoltage>:

void sendVoltage(int board_id, int motor, float voltage)
{
 8001590:	b510      	push	{r4, lr}
  sendFloat(0x210 + board_id * 2 + motor, voltage);
 8001592:	f500 7084 	add.w	r0, r0, #264	; 0x108
{
 8001596:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 8001598:	2400      	movs	r4, #0
  sendFloat(0x210 + board_id * 2 + motor, voltage);
 800159a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 800159e:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 80015a0:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 80015a4:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80015a8:	eb0d 0302 	add.w	r3, sp, r2
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <sendVoltage+0x40>)
  can_header.IDE = CAN_ID_STD;
 80015ae:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80015b0:	aa02      	add	r2, sp, #8
 80015b2:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 80015b4:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 80015b8:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80015bc:	f004 ff5c 	bl	8006478 <HAL_CAN_AddTxMessage>
 80015c0:	b118      	cbz	r0, 80015ca <sendVoltage+0x3a>
    can_send_fail_cnt++;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <sendVoltage+0x44>)
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	3301      	adds	r3, #1
 80015c8:	6013      	str	r3, [r2, #0]
}
 80015ca:	b00a      	add	sp, #40	; 0x28
 80015cc:	bd10      	pop	{r4, pc}
 80015ce:	bf00      	nop
 80015d0:	20000318 	.word	0x20000318
 80015d4:	20000314 	.word	0x20000314

080015d8 <sendTemperature>:

void sendTemperature(int board_id, int motor, float temp)
{
 80015d8:	b510      	push	{r4, lr}
  sendFloat(0x220 + board_id * 2 + motor, temp);
 80015da:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
 80015de:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 80015e0:	2400      	movs	r4, #0
  sendFloat(0x220 + board_id * 2 + motor, temp);
 80015e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 80015e6:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 80015e8:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 80015ec:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80015f0:	eb0d 0302 	add.w	r3, sp, r2
 80015f4:	4808      	ldr	r0, [pc, #32]	; (8001618 <sendTemperature+0x40>)
  can_header.IDE = CAN_ID_STD;
 80015f6:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80015f8:	aa02      	add	r2, sp, #8
 80015fa:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 80015fc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 8001600:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001604:	f004 ff38 	bl	8006478 <HAL_CAN_AddTxMessage>
 8001608:	b118      	cbz	r0, 8001612 <sendTemperature+0x3a>
    can_send_fail_cnt++;
 800160a:	4a04      	ldr	r2, [pc, #16]	; (800161c <sendTemperature+0x44>)
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	b00a      	add	sp, #40	; 0x28
 8001614:	bd10      	pop	{r4, pc}
 8001616:	bf00      	nop
 8001618:	20000318 	.word	0x20000318
 800161c:	20000314 	.word	0x20000314

08001620 <sendCurrent>:

void sendCurrent(int board_id, int motor, float current)
{
 8001620:	b510      	push	{r4, lr}
  sendFloat(0x230 + board_id * 2 + motor, current);
 8001622:	f500 708c 	add.w	r0, r0, #280	; 0x118
{
 8001626:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 8001628:	2400      	movs	r4, #0
  sendFloat(0x230 + board_id * 2 + motor, current);
 800162a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 800162e:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 8001630:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 8001634:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001638:	eb0d 0302 	add.w	r3, sp, r2
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <sendCurrent+0x40>)
  can_header.IDE = CAN_ID_STD;
 800163e:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001640:	aa02      	add	r2, sp, #8
 8001642:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 8001644:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 8001648:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 800164c:	f004 ff14 	bl	8006478 <HAL_CAN_AddTxMessage>
 8001650:	b118      	cbz	r0, 800165a <sendCurrent+0x3a>
    can_send_fail_cnt++;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <sendCurrent+0x44>)
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	6013      	str	r3, [r2, #0]
}
 800165a:	b00a      	add	sp, #40	; 0x28
 800165c:	bd10      	pop	{r4, pc}
 800165e:	bf00      	nop
 8001660:	20000318 	.word	0x20000318
 8001664:	20000314 	.word	0x20000314

08001668 <sendError>:

void sendError(uint32_t can_id, int16_t error_id, int16_t error_info, float error_value)
{
 8001668:	b510      	push	{r4, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
  can_msg_buf_t msg;
  CAN_TxHeaderTypeDef can_header;
  uint32_t can_mailbox;
  can_header.StdId = can_id;
  can_header.ExtId = 0;
 800166c:	2400      	movs	r4, #0
  can_header.RTR = CAN_RTR_DATA;
  can_header.DLC = 8;
 800166e:	2308      	movs	r3, #8
{
 8001670:	4694      	mov	ip, r2
  can_header.ExtId = 0;
 8001672:	e9cd 0404 	strd	r0, r4, [sp, #16]
  can_header.DLC = 8;
 8001676:	e9cd 4307 	strd	r4, r3, [sp, #28]
  can_header.IDE = CAN_ID_STD;
  can_header.TransmitGlobalTime = DISABLE;
  msg.error.id = error_id;
 800167a:	f8ad 1008 	strh.w	r1, [sp, #8]
  msg.error.info = error_info;
  msg.error.value = error_value;
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 800167e:	480a      	ldr	r0, [pc, #40]	; (80016a8 <sendError+0x40>)
  msg.error.value = error_value;
 8001680:	ed8d 0a03 	vstr	s0, [sp, #12]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001684:	ab01      	add	r3, sp, #4
 8001686:	aa02      	add	r2, sp, #8
 8001688:	a904      	add	r1, sp, #16
  can_header.IDE = CAN_ID_STD;
 800168a:	9406      	str	r4, [sp, #24]
  can_header.TransmitGlobalTime = DISABLE;
 800168c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.error.info = error_info;
 8001690:	f8ad c00a 	strh.w	ip, [sp, #10]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001694:	f004 fef0 	bl	8006478 <HAL_CAN_AddTxMessage>
 8001698:	b118      	cbz	r0, 80016a2 <sendError+0x3a>
    can_send_fail_cnt++;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <sendError+0x44>)
 800169c:	6813      	ldr	r3, [r2, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	6013      	str	r3, [r2, #0]
  }
}
 80016a2:	b00a      	add	sp, #40	; 0x28
 80016a4:	bd10      	pop	{r4, pc}
 80016a6:	bf00      	nop
 80016a8:	20000318 	.word	0x20000318
 80016ac:	20000314 	.word	0x20000314

080016b0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <MX_DMA_Init+0x30>)
{
 80016b2:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	615a      	str	r2, [r3, #20]
 80016bc:	695b      	ldr	r3, [r3, #20]
{
 80016be:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 80016c0:	210e      	movs	r1, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c2:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 80016c6:	4608      	mov	r0, r1
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016c8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 80016ca:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016cc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 80016ce:	f005 f91f 	bl	8006910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016d2:	200e      	movs	r0, #14

}
 80016d4:	b003      	add	sp, #12
 80016d6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80016da:	f005 b957 	b.w	800698c <HAL_NVIC_EnableIRQ>
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000

080016e4 <writeFlash>:
flash_t flash;
// 2K / page
// 128Kbyte -> 64page
// page : 0~
static void writeFlash(uint32_t board_id, float calib_m0, float calib_m1,float motor_calib_m0,float motor_calib_m1)
{
 80016e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016e8:	b089      	sub	sp, #36	; 0x24
    FLASH_EraseInitTypeDef erase;
    uint32_t page_error = 0;
    erase.TypeErase = TYPEERASE_PAGES;
 80016ea:	4925      	ldr	r1, [pc, #148]	; (8001780 <writeFlash+0x9c>)
    HAL_FLASH_Lock();

    HAL_FLASH_Unlock();
    uint32_t flash_raw;
    flash_raw = board_id;
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CAN_ID, flash_raw);
 80016ec:	4c24      	ldr	r4, [pc, #144]	; (8001780 <writeFlash+0x9c>)
{
 80016ee:	9001      	str	r0, [sp, #4]
    uint32_t page_error = 0;
 80016f0:	2500      	movs	r5, #0
    erase.NbPages = 1;
 80016f2:	2301      	movs	r3, #1
    erase.TypeErase = TYPEERASE_PAGES;
 80016f4:	2000      	movs	r0, #0
{
 80016f6:	ee10 9a10 	vmov	r9, s0
 80016fa:	ee10 8a90 	vmov	r8, s1
 80016fe:	ee11 7a10 	vmov	r7, s2
 8001702:	ee11 6a90 	vmov	r6, s3
    erase.NbPages = 1;
 8001706:	9306      	str	r3, [sp, #24]
    erase.TypeErase = TYPEERASE_PAGES;
 8001708:	e9cd 0104 	strd	r0, r1, [sp, #16]
    uint32_t page_error = 0;
 800170c:	9503      	str	r5, [sp, #12]
    HAL_FLASH_Unlock();
 800170e:	f005 fb59 	bl	8006dc4 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase, &page_error);
 8001712:	a903      	add	r1, sp, #12
 8001714:	a804      	add	r0, sp, #16
 8001716:	f005 fbb9 	bl	8006e8c <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 800171a:	f005 fb67 	bl	8006dec <HAL_FLASH_Lock>
    HAL_FLASH_Unlock();
 800171e:	f005 fb51 	bl	8006dc4 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CAN_ID, flash_raw);
 8001722:	9a01      	ldr	r2, [sp, #4]
 8001724:	462b      	mov	r3, r5
 8001726:	4621      	mov	r1, r4
 8001728:	2002      	movs	r0, #2
 800172a:	f005 fa7f 	bl	8006c2c <HAL_FLASH_Program>
    memcpy(&flash_raw, &calib_m0, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_ENC_CALIB_M0, flash_raw);
 800172e:	464a      	mov	r2, r9
 8001730:	462b      	mov	r3, r5
 8001732:	4914      	ldr	r1, [pc, #80]	; (8001784 <writeFlash+0xa0>)
 8001734:	2002      	movs	r0, #2
 8001736:	f005 fa79 	bl	8006c2c <HAL_FLASH_Program>
    memcpy(&flash_raw, &calib_m1, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_ENC_CALIB_M1, flash_raw);
 800173a:	4642      	mov	r2, r8
 800173c:	462b      	mov	r3, r5
 800173e:	4912      	ldr	r1, [pc, #72]	; (8001788 <writeFlash+0xa4>)
 8001740:	2002      	movs	r0, #2
 8001742:	f005 fa73 	bl	8006c2c <HAL_FLASH_Program>
    memcpy(&flash_raw, &motor_calib_m0, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_MOTOR_CALIB_CW_M0, flash_raw);
 8001746:	463a      	mov	r2, r7
 8001748:	462b      	mov	r3, r5
 800174a:	4910      	ldr	r1, [pc, #64]	; (800178c <writeFlash+0xa8>)
 800174c:	2002      	movs	r0, #2
 800174e:	f005 fa6d 	bl	8006c2c <HAL_FLASH_Program>
    memcpy(&flash_raw, &motor_calib_m1, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_MOTOR_CALIB_CW_M1, flash_raw);
 8001752:	4632      	mov	r2, r6
 8001754:	462b      	mov	r3, r5
 8001756:	490e      	ldr	r1, [pc, #56]	; (8001790 <writeFlash+0xac>)
 8001758:	2002      	movs	r0, #2
 800175a:	f005 fa67 	bl	8006c2c <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 800175e:	f005 fb45 	bl	8006dec <HAL_FLASH_Lock>
void writeCanBoardID(uint32_t id) { writeFlash(id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
void writeEncCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, calib_m0, calib_m1, flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
void writeMotorCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, flash.calib[0], flash.calib[1], calib_m0, calib_m1); }

void loadFlashData(void){
    memcpy(&flash.board_id, (uint32_t *)FLASH_ADDR_CAN_ID, 4);
 8001762:	e9d4 5200 	ldrd	r5, r2, [r4]
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <writeFlash+0xb0>)
    memcpy(&flash.calib[0], (uint32_t *)FLASH_ADDR_ENC_CALIB_M0, 4);
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800176e:	6922      	ldr	r2, [r4, #16]
    memcpy(&flash.calib[1], (uint32_t *)FLASH_ADDR_ENC_CALIB_M1, 4);
 8001770:	e9c3 0501 	strd	r0, r5, [r3, #4]
    memcpy(&flash.rps_per_v_cw[0], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CW_M0, 4);
    memcpy(&flash.rps_per_v_cw[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CW_M1, 4);
 8001774:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 8001778:	b009      	add	sp, #36	; 0x24
 800177a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800177e:	bf00      	nop
 8001780:	0801f000 	.word	0x0801f000
 8001784:	0801f004 	.word	0x0801f004
 8001788:	0801f008 	.word	0x0801f008
 800178c:	0801f00c 	.word	0x0801f00c
 8001790:	0801f010 	.word	0x0801f010
 8001794:	20000340 	.word	0x20000340

08001798 <writeCanBoardID>:
void writeCanBoardID(uint32_t id) { writeFlash(id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <writeCanBoardID+0x18>)
 800179a:	edd3 1a04 	vldr	s3, [r3, #16]
 800179e:	ed93 1a03 	vldr	s2, [r3, #12]
 80017a2:	edd3 0a01 	vldr	s1, [r3, #4]
 80017a6:	ed93 0a00 	vldr	s0, [r3]
 80017aa:	f7ff bf9b 	b.w	80016e4 <writeFlash>
 80017ae:	bf00      	nop
 80017b0:	20000340 	.word	0x20000340

080017b4 <writeEncCalibrationValue>:
void writeEncCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, calib_m0, calib_m1, flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <writeEncCalibrationValue+0x10>)
 80017b6:	edd3 1a04 	vldr	s3, [r3, #16]
 80017ba:	ed93 1a03 	vldr	s2, [r3, #12]
 80017be:	6898      	ldr	r0, [r3, #8]
 80017c0:	f7ff bf90 	b.w	80016e4 <writeFlash>
 80017c4:	20000340 	.word	0x20000340

080017c8 <writeMotorCalibrationValue>:
void writeMotorCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, flash.calib[0], flash.calib[1], calib_m0, calib_m1); }
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <writeMotorCalibrationValue+0x18>)
 80017ca:	eeb0 1a40 	vmov.f32	s2, s0
 80017ce:	eef0 1a60 	vmov.f32	s3, s1
 80017d2:	ed93 0a00 	vldr	s0, [r3]
 80017d6:	edd3 0a01 	vldr	s1, [r3, #4]
 80017da:	6898      	ldr	r0, [r3, #8]
 80017dc:	f7ff bf82 	b.w	80016e4 <writeFlash>
 80017e0:	20000340 	.word	0x20000340

080017e4 <loadFlashData>:
void loadFlashData(void){
 80017e4:	b410      	push	{r4}
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <loadFlashData+0x20>)
    memcpy(&flash.board_id, (uint32_t *)FLASH_ADDR_CAN_ID, 4);
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <loadFlashData+0x24>)
 80017ea:	e9d2 4100 	ldrd	r4, r1, [r2]
    memcpy(&flash.calib[0], (uint32_t *)FLASH_ADDR_ENC_CALIB_M0, 4);
 80017ee:	6019      	str	r1, [r3, #0]
 80017f0:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 80017f4:	6912      	ldr	r2, [r2, #16]
    memcpy(&flash.calib[1], (uint32_t *)FLASH_ADDR_ENC_CALIB_M1, 4);
 80017f6:	e9c3 0401 	strd	r0, r4, [r3, #4]
    memcpy(&flash.rps_per_v_cw[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CW_M1, 4);
 80017fa:	e9c3 1203 	strd	r1, r2, [r3, #12]

    // unused
    //memcpy(&flash.rps_per_v_ccw[0], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CCW_M0, 4);
    //memcpy(&flash.rps_per_v_ccw[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CCW_M1, 4);
}
 80017fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	0801f000 	.word	0x0801f000
 8001808:	20000340 	.word	0x20000340

0800180c <isPushedSW1>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
inline bool isPushedSW1(void)
{
 800180c:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800180e:	2101      	movs	r1, #1
 8001810:	4803      	ldr	r0, [pc, #12]	; (8001820 <isPushedSW1+0x14>)
 8001812:	f005 fc85 	bl	8007120 <HAL_GPIO_ReadPin>
}
 8001816:	fab0 f080 	clz	r0, r0
 800181a:	0940      	lsrs	r0, r0, #5
 800181c:	bd08      	pop	{r3, pc}
 800181e:	bf00      	nop
 8001820:	48000800 	.word	0x48000800

08001824 <isPushedSW2>:
inline bool isPushedSW2(void)
{
 8001824:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001826:	2102      	movs	r1, #2
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <isPushedSW2+0x14>)
 800182a:	f005 fc79 	bl	8007120 <HAL_GPIO_ReadPin>
}
 800182e:	fab0 f080 	clz	r0, r0
 8001832:	0940      	lsrs	r0, r0, #5
 8001834:	bd08      	pop	{r3, pc}
 8001836:	bf00      	nop
 8001838:	48000800 	.word	0x48000800

0800183c <isPushedSW3>:
inline bool isPushedSW3(void)
{
 800183c:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 800183e:	2104      	movs	r1, #4
 8001840:	4803      	ldr	r0, [pc, #12]	; (8001850 <isPushedSW3+0x14>)
 8001842:	f005 fc6d 	bl	8007120 <HAL_GPIO_ReadPin>
}
 8001846:	fab0 f080 	clz	r0, r0
 800184a:	0940      	lsrs	r0, r0, #5
 800184c:	bd08      	pop	{r3, pc}
 800184e:	bf00      	nop
 8001850:	48000800 	.word	0x48000800

08001854 <isPushedSW4>:
inline bool isPushedSW4(void)
{
 8001854:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8001856:	2108      	movs	r1, #8
 8001858:	4803      	ldr	r0, [pc, #12]	; (8001868 <isPushedSW4+0x14>)
 800185a:	f005 fc61 	bl	8007120 <HAL_GPIO_ReadPin>
}
 800185e:	fab0 f080 	clz	r0, r0
 8001862:	0940      	lsrs	r0, r0, #5
 8001864:	bd08      	pop	{r3, pc}
 8001866:	bf00      	nop
 8001868:	48000800 	.word	0x48000800

0800186c <setLedRed>:

inline void setLedRed(bool on){
 800186c:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, on);
 800186e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001872:	4801      	ldr	r0, [pc, #4]	; (8001878 <setLedRed+0xc>)
 8001874:	f005 bc5a 	b.w	800712c <HAL_GPIO_WritePin>
 8001878:	48000800 	.word	0x48000800

0800187c <setLedBlue>:
}
inline void setLedBlue(bool on){
 800187c:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, on);
 800187e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001882:	4801      	ldr	r0, [pc, #4]	; (8001888 <setLedBlue+0xc>)
 8001884:	f005 bc52 	b.w	800712c <HAL_GPIO_WritePin>
 8001888:	48000800 	.word	0x48000800

0800188c <setLedGreen>:
}
inline void setLedGreen(bool on){
 800188c:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, on);
 800188e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001892:	4801      	ldr	r0, [pc, #4]	; (8001898 <setLedGreen+0xc>)
 8001894:	f005 bc4a 	b.w	800712c <HAL_GPIO_WritePin>
 8001898:	48000800 	.word	0x48000800

0800189c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	2400      	movs	r4, #0
{
 80018a0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80018a6:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4b29      	ldr	r3, [pc, #164]	; (8001950 <MX_GPIO_Init+0xb4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ae:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018b0:	4e28      	ldr	r6, [pc, #160]	; (8001954 <MX_GPIO_Init+0xb8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80018b2:	4f29      	ldr	r7, [pc, #164]	; (8001958 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	695a      	ldr	r2, [r3, #20]
 80018bc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80018c0:	9200      	str	r2, [sp, #0]
 80018c2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80018d2:	9201      	str	r2, [sp, #4]
 80018d4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80018dc:	615a      	str	r2, [r3, #20]
 80018de:	695a      	ldr	r2, [r3, #20]
 80018e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80018e4:	9202      	str	r2, [sp, #8]
 80018e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e8:	695a      	ldr	r2, [r3, #20]
 80018ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f6:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80018f8:	4622      	mov	r2, r4
 80018fa:	4630      	mov	r0, r6
 80018fc:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001902:	f005 fc13 	bl	800712c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001906:	4622      	mov	r2, r4
 8001908:	4638      	mov	r0, r7
 800190a:	21c0      	movs	r1, #192	; 0xc0
 800190c:	f005 fc0e 	bl	800712c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001910:	2501      	movs	r5, #1
 8001912:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001916:	a904      	add	r1, sp, #16
 8001918:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f005 fb15 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001926:	220f      	movs	r2, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001928:	4630      	mov	r0, r6
 800192a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800192c:	2300      	movs	r3, #0
 800192e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001932:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001934:	f005 fb0c 	bl	8006f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001938:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	a904      	add	r1, sp, #16
 800193c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193e:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f005 fb03 	bl	8006f50 <HAL_GPIO_Init>

}
 800194a:	b00b      	add	sp, #44	; 0x2c
 800194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194e:	bf00      	nop
 8001950:	40021000 	.word	0x40021000
 8001954:	48000800 	.word	0x48000800
 8001958:	48000400 	.word	0x48000400
 800195c:	00000000 	.word	0x00000000

08001960 <can_rx_callback.part.0>:
  float tmp_speed = 0;
  if (calib_process.enc_calib_cnt != 0 || calib_process.motor_calib_cnt != 0) {
    return;
  }
  can_rx_cnt++;
  tmp_speed = can_rx_buf.value;
 8001960:	4839      	ldr	r0, [pc, #228]	; (8001a48 <can_rx_callback.part.0+0xe8>)
 8001962:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001a4c <can_rx_callback.part.0+0xec>
 8001966:	edd0 7a00 	vldr	s15, [r0]
  can_rx_cnt++;
 800196a:	4939      	ldr	r1, [pc, #228]	; (8001a50 <can_rx_callback.part.0+0xf0>)
 800196c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001a54 <can_rx_callback.part.0+0xf4>
 8001970:	680a      	ldr	r2, [r1, #0]
 8001972:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void can_rx_callback(void)
 800197a:	b508      	push	{r3, lr}
  if (tmp_speed > SPEED_CMD_LIMIT_RPS) {
    tmp_speed = SPEED_CMD_LIMIT_RPS;
  } else if (tmp_speed < -SPEED_CMD_LIMIT_RPS) {
    tmp_speed = -SPEED_CMD_LIMIT_RPS;
  }
  switch (can_rx_header.StdId) {
 800197c:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <can_rx_callback.part.0+0xf8>)
 800197e:	bfb8      	it	lt
 8001980:	eef0 7a66 	vmovlt.f32	s15, s13
 8001984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  can_rx_cnt++;
 800198e:	f102 0201 	add.w	r2, r2, #1
 8001992:	bf88      	it	hi
 8001994:	eef0 7a47 	vmovhi.f32	s15, s14
  switch (can_rx_header.StdId) {
 8001998:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
  can_rx_cnt++;
 800199c:	600a      	str	r2, [r1, #0]
  switch (can_rx_header.StdId) {
 800199e:	d823      	bhi.n	80019e8 <can_rx_callback.part.0+0x88>
 80019a0:	2bff      	cmp	r3, #255	; 0xff
 80019a2:	d914      	bls.n	80019ce <can_rx_callback.part.0+0x6e>
 80019a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80019a8:	2b10      	cmp	r3, #16
 80019aa:	d80f      	bhi.n	80019cc <can_rx_callback.part.0+0x6c>
 80019ac:	e8df f003 	tbb	[pc, r3]
 80019b0:	32093209 	.word	0x32093209
 80019b4:	0e0e0e0e 	.word	0x0e0e0e0e
 80019b8:	0e0e0e0e 	.word	0x0e0e0e0e
 80019bc:	0e0e0e0e 	.word	0x0e0e0e0e
 80019c0:	38          	.byte	0x38
 80019c1:	00          	.byte	0x00
      cmd[1].speed = tmp_speed;
      cmd[1].timeout_cnt = 100;
      break;

    case 0x102:
      cmd[0].speed = tmp_speed;
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <can_rx_callback.part.0+0xfc>)
      cmd[0].timeout_cnt = 100;
 80019c4:	2264      	movs	r2, #100	; 0x64
      cmd[0].speed = tmp_speed;
 80019c6:	edc3 7a00 	vstr	s15, [r3]
      cmd[0].timeout_cnt = 100;
 80019ca:	611a      	str	r2, [r3, #16]
      }
      break;
    default:
      break;
  }
}
 80019cc:	bd08      	pop	{r3, pc}
  switch (can_rx_header.StdId) {
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d1fc      	bne.n	80019cc <can_rx_callback.part.0+0x6c>
      if (can_rx_buf.data[0] == 0) {
 80019d2:	7803      	ldrb	r3, [r0, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f9      	bne.n	80019cc <can_rx_callback.part.0+0x6c>
        if (can_rx_buf.data[1] == 0) {
 80019d8:	7843      	ldrb	r3, [r0, #1]
 80019da:	b35b      	cbz	r3, 8001a34 <can_rx_callback.part.0+0xd4>
        } else if (can_rx_buf.data[1] == 1) {
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d1f5      	bne.n	80019cc <can_rx_callback.part.0+0x6c>
          power_enable_cnt = 100;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <can_rx_callback.part.0+0x100>)
 80019e2:	2264      	movs	r2, #100	; 0x64
 80019e4:	601a      	str	r2, [r3, #0]
}
 80019e6:	bd08      	pop	{r3, pc}
  switch (can_rx_header.StdId) {
 80019e8:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80019ec:	d1ee      	bne.n	80019cc <can_rx_callback.part.0+0x6c>
  }
}

void startCalibrationMode(void)
{
  p("calibration mode!\n");
 80019ee:	481d      	ldr	r0, [pc, #116]	; (8001a64 <can_rx_callback.part.0+0x104>)
 80019f0:	f003 fb32 	bl	8005058 <p>

  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 80019f4:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8001a40 <can_rx_callback.part.0+0xe0>
 80019f8:	491b      	ldr	r1, [pc, #108]	; (8001a68 <can_rx_callback.part.0+0x108>)
  calib_process.motor_calib_cnt = 0;
  manual_offset_radian = 0;

  cmd[0].speed = 0;
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <can_rx_callback.part.0+0xfc>)
  manual_offset_radian = 0;
 80019fc:	481b      	ldr	r0, [pc, #108]	; (8001a6c <can_rx_callback.part.0+0x10c>)
 80019fe:	2200      	movs	r2, #0
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8001a00:	ed81 7b00 	vstr	d7, [r1]
  cmd[1].speed = 0;

  cmd[0].out_v_final = 2.0;
 8001a04:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  manual_offset_radian = 0;
 8001a08:	6002      	str	r2, [r0, #0]
  cmd[0].speed = 0;
 8001a0a:	601a      	str	r2, [r3, #0]
  cmd[1].speed = 0;
 8001a0c:	615a      	str	r2, [r3, #20]
  cmd[0].out_v_final = 2.0;
 8001a0e:	60d9      	str	r1, [r3, #12]
  cmd[1].out_v_final = 2.0;
 8001a10:	6219      	str	r1, [r3, #32]
}
 8001a12:	bd08      	pop	{r3, pc}
      cmd[1].speed = tmp_speed;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <can_rx_callback.part.0+0xfc>)
      cmd[1].timeout_cnt = 100;
 8001a16:	2264      	movs	r2, #100	; 0x64
      cmd[1].speed = tmp_speed;
 8001a18:	edc3 7a05 	vstr	s15, [r3, #20]
      cmd[1].timeout_cnt = 100;
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a1e:	bd08      	pop	{r3, pc}
      if (can_rx_buf.data[0] == 3) {
 8001a20:	7803      	ldrb	r3, [r0, #0]
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d1d2      	bne.n	80019cc <can_rx_callback.part.0+0x6c>
        setPwmOutPutFreeWheel();
 8001a26:	f003 f9d7 	bl	8004dd8 <setPwmOutPutFreeWheel>
        free_wheel_cnt = KICK_FREE_WHEEL_CNT;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <can_rx_callback.part.0+0x110>)
 8001a2c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a30:	601a      	str	r2, [r3, #0]
}
 8001a32:	bd08      	pop	{r3, pc}
 8001a34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          HAL_NVIC_SystemReset();
 8001a38:	f004 bfb6 	b.w	80069a8 <HAL_NVIC_SystemReset>
 8001a3c:	f3af 8000 	nop.w
 8001a40:	000009c4 	.word	0x000009c4
 8001a44:	00000000 	.word	0x00000000
 8001a48:	200003cc 	.word	0x200003cc
 8001a4c:	c2480000 	.word	0xc2480000
 8001a50:	200003d4 	.word	0x200003d4
 8001a54:	42480000 	.word	0x42480000
 8001a58:	200003d8 	.word	0x200003d8
 8001a5c:	200003f4 	.word	0x200003f4
 8001a60:	200004e0 	.word	0x200004e0
 8001a64:	0800d7d8 	.word	0x0800d7d8
 8001a68:	200003b8 	.word	0x200003b8
 8001a6c:	20000448 	.word	0x20000448
 8001a70:	20000004 	.word	0x20000004

08001a74 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) { uart_rx_flag = true; }
 8001a74:	4b01      	ldr	r3, [pc, #4]	; (8001a7c <HAL_UART_RxCpltCallback+0x8>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	4770      	bx	lr
 8001a7c:	20000516 	.word	0x20000516

08001a80 <checkAngleCalibMode>:
{
 8001a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  calib[motor].xy_field.radian_ave_x += cos(ma702[motor].output_radian);
 8001a84:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8001bbc <checkAngleCalibMode+0x13c>
 8001a88:	4d49      	ldr	r5, [pc, #292]	; (8001bb0 <checkAngleCalibMode+0x130>)
 8001a8a:	eb00 08c0 	add.w	r8, r0, r0, lsl #3
 8001a8e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
{
 8001a92:	ed2d 8b02 	vpush	{d8}
 8001a96:	4606      	mov	r6, r0
  calib[motor].xy_field.radian_ave_x += cos(ma702[motor].output_radian);
 8001a98:	f8d8 0000 	ldr.w	r0, [r8]
 8001a9c:	f7fe fd54 	bl	8000548 <__aeabi_f2d>
 8001aa0:	ec41 0b10 	vmov	d0, r0, r1
 8001aa4:	ec41 0b18 	vmov	d8, r0, r1
 8001aa8:	272c      	movs	r7, #44	; 0x2c
 8001aaa:	f007 fd19 	bl	80094e0 <cos>
 8001aae:	fb06 f707 	mul.w	r7, r6, r7
 8001ab2:	19ec      	adds	r4, r5, r7
 8001ab4:	ec5b ab10 	vmov	sl, fp, d0
 8001ab8:	6960      	ldr	r0, [r4, #20]
 8001aba:	f7fe fd45 	bl	8000548 <__aeabi_f2d>
 8001abe:	4652      	mov	r2, sl
 8001ac0:	465b      	mov	r3, fp
 8001ac2:	f7fe fbe3 	bl	800028c <__adddf3>
 8001ac6:	f7ff f88f 	bl	8000be8 <__aeabi_d2f>
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001aca:	eeb0 0a48 	vmov.f32	s0, s16
 8001ace:	eef0 0a68 	vmov.f32	s1, s17
  calib[motor].xy_field.radian_ave_x += cos(ma702[motor].output_radian);
 8001ad2:	6160      	str	r0, [r4, #20]
 8001ad4:	ee08 0a10 	vmov	s16, r0
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001ad8:	f007 fd56 	bl	8009588 <sin>
 8001adc:	ec5b ab10 	vmov	sl, fp, d0
 8001ae0:	69a0      	ldr	r0, [r4, #24]
 8001ae2:	f7fe fd31 	bl	8000548 <__aeabi_f2d>
 8001ae6:	4652      	mov	r2, sl
 8001ae8:	465b      	mov	r3, fp
 8001aea:	f7fe fbcf 	bl	800028c <__adddf3>
 8001aee:	f7ff f87b 	bl	8000be8 <__aeabi_d2f>
  calib[motor].ave_cnt++;
 8001af2:	59eb      	ldr	r3, [r5, r7]
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed > 0) {
 8001af4:	6862      	ldr	r2, [r4, #4]
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001af6:	61a0      	str	r0, [r4, #24]
  calib[motor].ave_cnt++;
 8001af8:	3301      	adds	r3, #1
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed > 0) {
 8001afa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001afe:	ee07 0a10 	vmov	s14, r0
  calib[motor].ave_cnt++;
 8001b02:	51eb      	str	r3, [r5, r7]
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed > 0) {
 8001b04:	dd2c      	ble.n	8001b60 <checkAngleCalibMode+0xe0>
 8001b06:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001b0a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b0e:	da1f      	bge.n	8001b50 <checkAngleCalibMode+0xd0>
 8001b10:	4928      	ldr	r1, [pc, #160]	; (8001bb4 <checkAngleCalibMode+0x134>)
 8001b12:	edd1 7a00 	vldr	s15, [r1]
 8001b16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	dd15      	ble.n	8001b50 <checkAngleCalibMode+0xd0>
    calib[motor].xy_field.result_cw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calib[motor].result_ccw_cnt++;
 8001b2c:	68e3      	ldr	r3, [r4, #12]
    calib[motor].xy_field.radian_ave_x = 0;
 8001b2e:	6161      	str	r1, [r4, #20]
    calib[motor].xy_field.result_cw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001b30:	ee88 6a27 	vdiv.f32	s12, s16, s15
    calib[motor].result_ccw_cnt++;
 8001b34:	3301      	adds	r3, #1
    calib[motor].xy_field.radian_ave_y = 0;
 8001b36:	61a1      	str	r1, [r4, #24]
    calib[motor].result_ccw_cnt++;
 8001b38:	60e3      	str	r3, [r4, #12]
    calib[motor].xy_field.result_cw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001b3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    calib[motor].xy_field.result_cw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001b3e:	ed84 6a07 	vstr	s12, [r4, #28]
    calib[motor].xy_field.result_cw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001b42:	edc4 6a08 	vstr	s13, [r4, #32]
    calib[motor].ave_cnt = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	51eb      	str	r3, [r5, r7]
    calibration_print_flag = true;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <checkAngleCalibMode+0x138>)
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	7019      	strb	r1, [r3, #0]
}
 8001b50:	ecbd 8b02 	vpop	{d8}
  calib[motor].pre_raw = ma702[motor].enc_raw;
 8001b54:	232c      	movs	r3, #44	; 0x2c
 8001b56:	fb03 5006 	mla	r0, r3, r6, r5
 8001b5a:	6042      	str	r2, [r0, #4]
}
 8001b5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (calib[motor].pre_raw < HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw > HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed < 0) {
 8001b60:	d020      	beq.n	8001ba4 <checkAngleCalibMode+0x124>
 8001b62:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001b66:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b6a:	ddf1      	ble.n	8001b50 <checkAngleCalibMode+0xd0>
 8001b6c:	4911      	ldr	r1, [pc, #68]	; (8001bb4 <checkAngleCalibMode+0x134>)
 8001b6e:	edd1 7a00 	vldr	s15, [r1]
 8001b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	f04f 0100 	mov.w	r1, #0
 8001b7e:	d5e7      	bpl.n	8001b50 <checkAngleCalibMode+0xd0>
    calib[motor].xy_field.result_ccw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001b80:	ee07 3a90 	vmov	s15, r3
 8001b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calib[motor].result_cw_cnt++;
 8001b88:	68a3      	ldr	r3, [r4, #8]
    calib[motor].xy_field.radian_ave_x = 0;
 8001b8a:	6161      	str	r1, [r4, #20]
    calib[motor].xy_field.result_ccw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001b8c:	ee88 6a27 	vdiv.f32	s12, s16, s15
    calib[motor].result_cw_cnt++;
 8001b90:	3301      	adds	r3, #1
    calib[motor].xy_field.radian_ave_y = 0;
 8001b92:	61a1      	str	r1, [r4, #24]
    calib[motor].result_cw_cnt++;
 8001b94:	60a3      	str	r3, [r4, #8]
    calib[motor].xy_field.result_ccw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001b96:	eec7 6a27 	vdiv.f32	s13, s14, s15
    calib[motor].xy_field.result_ccw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001b9a:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
    calib[motor].xy_field.result_ccw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001b9e:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
 8001ba2:	e7d0      	b.n	8001b46 <checkAngleCalibMode+0xc6>
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed > 0) {
 8001ba4:	2324      	movs	r3, #36	; 0x24
 8001ba6:	fb03 9906 	mla	r9, r3, r6, r9
 8001baa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001bae:	e7cf      	b.n	8001b50 <checkAngleCalibMode+0xd0>
 8001bb0:	2000035c 	.word	0x2000035c
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	200003c8 	.word	0x200003c8
 8001bbc:	20000580 	.word	0x20000580

08001bc0 <HAL_TIM_PeriodElapsedCallback>:
{
 8001bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  interrupt_timer_cnt++;
 8001bc2:	496b      	ldr	r1, [pc, #428]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
  motor_select_toggle = !motor_select_toggle;
 8001bc4:	4c6b      	ldr	r4, [pc, #428]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
  interrupt_timer_cnt++;
 8001bc6:	680a      	ldr	r2, [r1, #0]
  motor_select_toggle = !motor_select_toggle;
 8001bc8:	7823      	ldrb	r3, [r4, #0]
{
 8001bca:	ed2d 8b02 	vpush	{d8}
  motor_select_toggle = !motor_select_toggle;
 8001bce:	f083 0301 	eor.w	r3, r3, #1
  interrupt_timer_cnt++;
 8001bd2:	3201      	adds	r2, #1
{
 8001bd4:	b083      	sub	sp, #12
  setLedBlue(false);
 8001bd6:	2000      	movs	r0, #0
  motor_select_toggle = !motor_select_toggle;
 8001bd8:	7023      	strb	r3, [r4, #0]
  interrupt_timer_cnt++;
 8001bda:	600a      	str	r2, [r1, #0]
  setLedBlue(false);
 8001bdc:	f7ff fe4e 	bl	800187c <setLedBlue>
  if (calib_process.enc_calib_cnt != 0) {
 8001be0:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d03f      	beq.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0xa8>
  manual_offset_radian += calib_force_rotation_speed;
 8001be8:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001bea:	4d65      	ldr	r5, [pc, #404]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ed95 8a00 	vldr	s16, [r5]
    calibrationProcess(motor_select_toggle);
 8001bf4:	7824      	ldrb	r4, [r4, #0]
  manual_offset_radian += calib_force_rotation_speed;
 8001bf6:	ee38 8a27 	vadd.f32	s16, s16, s15
  if (manual_offset_radian > M_PI * 2) {
 8001bfa:	ee18 0a10 	vmov	r0, s16
 8001bfe:	f7fe fca3 	bl	8000548 <__aeabi_f2d>
 8001c02:	a359      	add	r3, pc, #356	; (adr r3, 8001d68 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	4606      	mov	r6, r0
 8001c0a:	460f      	mov	r7, r1
 8001c0c:	f7fe ff84 	bl	8000b18 <__aeabi_dcmpgt>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	f040 8081 	bne.w	8001d18 <HAL_TIM_PeriodElapsedCallback+0x158>
  if (manual_offset_radian < 0) {
 8001c16:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  manual_offset_radian += calib_force_rotation_speed;
 8001c1e:	ed85 8a00 	vstr	s16, [r5]
  if (manual_offset_radian < 0) {
 8001c22:	f100 808f 	bmi.w	8001d44 <HAL_TIM_PeriodElapsedCallback+0x184>
  if (motor) {
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	d05e      	beq.n	8001ce8 <HAL_TIM_PeriodElapsedCallback+0x128>
    updateADC_M0();
 8001c2a:	f7ff fb0f 	bl	800124c <updateADC_M0>
    updateMA702_M0();
 8001c2e:	f002 fbef 	bl	8004410 <updateMA702_M0>
    setOutputRadianM0(manual_offset_radian, cmd[0].out_v_final, getBatteryVoltage(), MOTOR_CALIB_VOLTAGE_HIGH);
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c34:	ed95 8a00 	vldr	s16, [r5]
 8001c38:	edd3 0a03 	vldr	s1, [r3, #12]
 8001c3c:	edcd 0a01 	vstr	s1, [sp, #4]
 8001c40:	f7ff fa3e 	bl	80010c0 <getBatteryVoltage>
 8001c44:	eddd 0a01 	vldr	s1, [sp, #4]
 8001c48:	eeb0 1a40 	vmov.f32	s2, s0
 8001c4c:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8001c50:	eeb0 0a48 	vmov.f32	s0, s16
 8001c54:	f002 ff78 	bl	8004b48 <setOutputRadianM0>
  setLedBlue(true);
 8001c58:	2001      	movs	r0, #1
}
 8001c5a:	b003      	add	sp, #12
 8001c5c:	ecbd 8b02 	vpop	{d8}
 8001c60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  setLedBlue(true);
 8001c64:	f7ff be0a 	b.w	800187c <setLedBlue>
  if (motor) {
 8001c68:	7823      	ldrb	r3, [r4, #0]
 8001c6a:	b1f3      	cbz	r3, 8001caa <HAL_TIM_PeriodElapsedCallback+0xea>
    updateADC_M0();
 8001c6c:	f7ff faee 	bl	800124c <updateADC_M0>
    updateMA702_M0();
 8001c70:	f002 fbce 	bl	8004410 <updateMA702_M0>
    setOutputRadianM0(ma702[0].output_radian + enc_offset[0].final, cmd[0].out_v_final, getBatteryVoltage(), motor_param[0].output_voltage_limit);
 8001c74:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001c76:	4a45      	ldr	r2, [pc, #276]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001c7e:	ed92 8a00 	vldr	s16, [r2]
 8001c82:	edd3 0a03 	vldr	s1, [r3, #12]
 8001c86:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001c8a:	edcd 0a01 	vstr	s1, [sp, #4]
 8001c8e:	f7ff fa17 	bl	80010c0 <getBatteryVoltage>
 8001c92:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001c94:	eddd 0a01 	vldr	s1, [sp, #4]
 8001c98:	edd3 1a01 	vldr	s3, [r3, #4]
 8001c9c:	eeb0 1a40 	vmov.f32	s2, s0
 8001ca0:	eeb0 0a48 	vmov.f32	s0, s16
 8001ca4:	f002 ff50 	bl	8004b48 <setOutputRadianM0>
}
 8001ca8:	e7d6      	b.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x98>
    updateADC_M1();
 8001caa:	f7ff faff 	bl	80012ac <updateADC_M1>
    updateMA702_M1();
 8001cae:	f002 fc1f 	bl	80044f0 <updateMA702_M1>
    setOutputRadianM1(ma702[1].output_radian + enc_offset[1].final, cmd[1].out_v_final, getBatteryVoltage(), motor_param[1].output_voltage_limit);
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001cb4:	4a35      	ldr	r2, [pc, #212]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001cb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cba:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001cbc:	ed92 8a09 	vldr	s16, [r2, #36]	; 0x24
 8001cc0:	edd3 0a08 	vldr	s1, [r3, #32]
 8001cc4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001cc8:	edcd 0a01 	vstr	s1, [sp, #4]
 8001ccc:	f7ff f9f8 	bl	80010c0 <getBatteryVoltage>
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001cd2:	eddd 0a01 	vldr	s1, [sp, #4]
 8001cd6:	edd3 1a03 	vldr	s3, [r3, #12]
 8001cda:	eeb0 1a40 	vmov.f32	s2, s0
 8001cde:	eeb0 0a48 	vmov.f32	s0, s16
 8001ce2:	f002 ffa5 	bl	8004c30 <setOutputRadianM1>
 8001ce6:	e7b7      	b.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x98>
    updateADC_M1();
 8001ce8:	f7ff fae0 	bl	80012ac <updateADC_M1>
    updateMA702_M1();
 8001cec:	f002 fc00 	bl	80044f0 <updateMA702_M1>
    setOutputRadianM1(manual_offset_radian, cmd[1].out_v_final, getBatteryVoltage(), MOTOR_CALIB_VOLTAGE_HIGH);
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001cf2:	ed95 8a00 	vldr	s16, [r5]
 8001cf6:	edd3 0a08 	vldr	s1, [r3, #32]
 8001cfa:	edcd 0a01 	vstr	s1, [sp, #4]
 8001cfe:	f7ff f9df 	bl	80010c0 <getBatteryVoltage>
 8001d02:	eddd 0a01 	vldr	s1, [sp, #4]
 8001d06:	eeb0 1a40 	vmov.f32	s2, s0
 8001d0a:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8001d0e:	eeb0 0a48 	vmov.f32	s0, s16
 8001d12:	f002 ff8d 	bl	8004c30 <setOutputRadianM1>
 8001d16:	e79f      	b.n	8001c58 <HAL_TIM_PeriodElapsedCallback+0x98>
    manual_offset_radian -= M_PI * 2;
 8001d18:	a313      	add	r3, pc, #76	; (adr r3, 8001d68 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	4630      	mov	r0, r6
 8001d20:	4639      	mov	r1, r7
 8001d22:	f7fe fab1 	bl	8000288 <__aeabi_dsub>
 8001d26:	f7fe ff5f 	bl	8000be8 <__aeabi_d2f>
 8001d2a:	4603      	mov	r3, r0
    checkAngleCalibMode(motor);
 8001d2c:	4620      	mov	r0, r4
    manual_offset_radian -= M_PI * 2;
 8001d2e:	602b      	str	r3, [r5, #0]
    checkAngleCalibMode(motor);
 8001d30:	f7ff fea6 	bl	8001a80 <checkAngleCalibMode>
  if (manual_offset_radian < 0) {
 8001d34:	ed95 8a00 	vldr	s16, [r5]
 8001d38:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	f57f af71 	bpl.w	8001c26 <HAL_TIM_PeriodElapsedCallback+0x66>
    manual_offset_radian += M_PI * 2;
 8001d44:	ee18 0a10 	vmov	r0, s16
 8001d48:	f7fe fbfe 	bl	8000548 <__aeabi_f2d>
 8001d4c:	a306      	add	r3, pc, #24	; (adr r3, 8001d68 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f7fe fa9b 	bl	800028c <__adddf3>
 8001d56:	f7fe ff47 	bl	8000be8 <__aeabi_d2f>
 8001d5a:	4603      	mov	r3, r0
    checkAngleCalibMode(motor);
 8001d5c:	4620      	mov	r0, r4
    manual_offset_radian += M_PI * 2;
 8001d5e:	602b      	str	r3, [r5, #0]
    checkAngleCalibMode(motor);
 8001d60:	f7ff fe8e 	bl	8001a80 <checkAngleCalibMode>
 8001d64:	e75f      	b.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x66>
 8001d66:	bf00      	nop
 8001d68:	54442d18 	.word	0x54442d18
 8001d6c:	401921fb 	.word	0x401921fb
 8001d70:	20000440 	.word	0x20000440
 8001d74:	20000484 	.word	0x20000484
 8001d78:	200003b8 	.word	0x200003b8
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000448 	.word	0x20000448
 8001d84:	200003f4 	.word	0x200003f4
 8001d88:	2000041c 	.word	0x2000041c
 8001d8c:	20000580 	.word	0x20000580
 8001d90:	2000044c 	.word	0x2000044c

08001d94 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8001d94:	b508      	push	{r3, lr}
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	f004 fbc4 	bl	8006528 <HAL_CAN_GetRxMessage>
 8001da0:	b108      	cbz	r0, 8001da6 <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001da4:	e7fe      	b.n	8001da4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
  if (calib_process.enc_calib_cnt != 0 || calib_process.motor_calib_cnt != 0) {
 8001da6:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001da8:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	d103      	bne.n	8001db8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
}
 8001db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001db4:	f7ff bdd4 	b.w	8001960 <can_rx_callback.part.0>
 8001db8:	bd08      	pop	{r3, pc}
 8001dba:	bf00      	nop
 8001dbc:	200003d8 	.word	0x200003d8
 8001dc0:	200003cc 	.word	0x200003cc
 8001dc4:	200003b8 	.word	0x200003b8

08001dc8 <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 8001dc8:	b508      	push	{r3, lr}
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8001dcc:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	f004 fbaa 	bl	8006528 <HAL_CAN_GetRxMessage>
 8001dd4:	b108      	cbz	r0, 8001dda <HAL_CAN_RxFifo1MsgPendingCallback+0x12>
 8001dd6:	b672      	cpsid	i
  while (1) {
 8001dd8:	e7fe      	b.n	8001dd8 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
  if (calib_process.enc_calib_cnt != 0 || calib_process.motor_calib_cnt != 0) {
 8001dda:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8001ddc:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	d103      	bne.n	8001dec <HAL_CAN_RxFifo1MsgPendingCallback+0x24>
}
 8001de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001de8:	f7ff bdba 	b.w	8001960 <can_rx_callback.part.0>
 8001dec:	bd08      	pop	{r3, pc}
 8001dee:	bf00      	nop
 8001df0:	200003d8 	.word	0x200003d8
 8001df4:	200003cc 	.word	0x200003cc
 8001df8:	200003b8 	.word	0x200003b8

08001dfc <speedToOutputVoltage>:
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001dfc:	4a33      	ldr	r2, [pc, #204]	; (8001ecc <speedToOutputVoltage+0xd0>)
 8001dfe:	4934      	ldr	r1, [pc, #208]	; (8001ed0 <speedToOutputVoltage+0xd4>)
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001e00:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <speedToOutputVoltage+0xd8>)
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001e02:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001e06:	eb03 038c 	add.w	r3, r3, ip, lsl #2
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001e0a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8001e0e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8001e12:	edd1 7a00 	vldr	s15, [r1]
 8001e16:	ed92 6a02 	vldr	s12, [r2, #8]
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001e1a:	edd3 6a00 	vldr	s13, [r3]
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001e1e:	492e      	ldr	r1, [pc, #184]	; (8001ed8 <speedToOutputVoltage+0xdc>)
 8001e20:	ee26 7a27 	vmul.f32	s14, s12, s15
 8001e24:	222c      	movs	r2, #44	; 0x2c
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001e26:	ee67 7aa6 	vmul.f32	s15, s15, s13
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001e2a:	fb02 1200 	mla	r2, r2, r0, r1
  float output_voltage_diff = cmd[motor].out_v - pid[motor].eff_voltage;
 8001e2e:	ee77 5ac7 	vsub.f32	s11, s15, s14
  if (output_voltage_diff > +pid[motor].diff_voltage_limit) {
 8001e32:	ed92 5a09 	vldr	s10, [r2, #36]	; 0x24
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001e36:	ed82 7a00 	vstr	s14, [r2]
  if (output_voltage_diff > +pid[motor].diff_voltage_limit) {
 8001e3a:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001e42:	edc3 7a02 	vstr	s15, [r3, #8]
  if (output_voltage_diff > +pid[motor].diff_voltage_limit) {
 8001e46:	d52b      	bpl.n	8001ea0 <speedToOutputVoltage+0xa4>
    cmd[motor].out_v = pid[motor].eff_voltage + pid[motor].diff_voltage_limit;
 8001e48:	ee37 7a05 	vadd.f32	s14, s14, s10
 8001e4c:	ed83 7a02 	vstr	s14, [r3, #8]
  if (output_voltage_diff > +pid[motor].error_integral_limit) {
 8001e50:	232c      	movs	r3, #44	; 0x2c
 8001e52:	fb03 1300 	mla	r3, r3, r0, r1
 8001e56:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e5a:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e62:	d50f      	bpl.n	8001e84 <speedToOutputVoltage+0x88>
    if (fabs(motor_real[motor].rps) < fabs(cmd[motor].speed)) {
 8001e64:	eeb0 6ac6 	vabs.f32	s12, s12
 8001e68:	eef0 6ae6 	vabs.f32	s13, s13
 8001e6c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8001e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e74:	d513      	bpl.n	8001e9e <speedToOutputVoltage+0xa2>
      pid[motor].load_limit_cnt++;
 8001e76:	232c      	movs	r3, #44	; 0x2c
 8001e78:	fb03 1100 	mla	r1, r3, r0, r1
 8001e7c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001e7e:	3301      	adds	r3, #1
 8001e80:	628b      	str	r3, [r1, #40]	; 0x28
 8001e82:	4770      	bx	lr
  } else if (output_voltage_diff < -pid[motor].error_integral_limit) {
 8001e84:	eef1 7a67 	vneg.f32	s15, s15
 8001e88:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e90:	dc12      	bgt.n	8001eb8 <speedToOutputVoltage+0xbc>
  } else if (pid[motor].load_limit_cnt > 0) {
 8001e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e94:	2a00      	cmp	r2, #0
    pid[motor].load_limit_cnt--;
 8001e96:	bfc4      	itt	gt
 8001e98:	f102 32ff 	addgt.w	r2, r2, #4294967295
 8001e9c:	629a      	strgt	r2, [r3, #40]	; 0x28
}
 8001e9e:	4770      	bx	lr
  } else if (output_voltage_diff < -pid[motor].diff_voltage_limit) {
 8001ea0:	eef1 7a45 	vneg.f32	s15, s10
 8001ea4:	eef4 7ae5 	vcmpe.f32	s15, s11
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cmd[motor].out_v = pid[motor].eff_voltage - pid[motor].diff_voltage_limit;
 8001eac:	bfc4      	itt	gt
 8001eae:	ee37 7a45 	vsubgt.f32	s14, s14, s10
 8001eb2:	ed83 7a02 	vstrgt	s14, [r3, #8]
 8001eb6:	e7cb      	b.n	8001e50 <speedToOutputVoltage+0x54>
    if (fabs(motor_real[motor].rps) < fabs(cmd[motor].speed)) {
 8001eb8:	eeb0 6ac6 	vabs.f32	s12, s12
 8001ebc:	eef0 6ae6 	vabs.f32	s13, s13
 8001ec0:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	d4d5      	bmi.n	8001e76 <speedToOutputVoltage+0x7a>
 8001eca:	4770      	bx	lr
 8001ecc:	2000045c 	.word	0x2000045c
 8001ed0:	2000044c 	.word	0x2000044c
 8001ed4:	200003f4 	.word	0x200003f4
 8001ed8:	20000488 	.word	0x20000488
 8001edc:	00000000 	.word	0x00000000

08001ee0 <runMode>:
{
 8001ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (free_wheel_cnt > 0) {
 8001ee4:	f8df a35c 	ldr.w	sl, [pc, #860]	; 8002244 <runMode+0x364>
{
 8001ee8:	ed2d 8b02 	vpush	{d8}
  if (free_wheel_cnt > 0) {
 8001eec:	f8da 3000 	ldr.w	r3, [sl]
{
 8001ef0:	b087      	sub	sp, #28
  if (free_wheel_cnt > 0) {
 8001ef2:	b12b      	cbz	r3, 8001f00 <runMode+0x20>
    free_wheel_cnt--;
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	f8ca 3000 	str.w	r3, [sl]
    if (free_wheel_cnt == 0) {
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8093 	beq.w	8002026 <runMode+0x146>
  if (manual_offset_radian > M_PI * 2) {
 8001f00:	4fb9      	ldr	r7, [pc, #740]	; (80021e8 <runMode+0x308>)
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f7fe fb20 	bl	8000548 <__aeabi_f2d>
 8001f08:	a3b5      	add	r3, pc, #724	; (adr r3, 80021e0 <runMode+0x300>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fe03 	bl	8000b18 <__aeabi_dcmpgt>
 8001f12:	b108      	cbz	r0, 8001f18 <runMode+0x38>
    manual_offset_radian = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8002248 <runMode+0x368>
 8001f1c:	4db3      	ldr	r5, [pc, #716]	; (80021ec <runMode+0x30c>)
      cmd[i].speed = -40.0;
 8001f1e:	eddf 8ab4 	vldr	s17, [pc, #720]	; 80021f0 <runMode+0x310>
      cmd[i].out_v = 0;
 8001f22:	ed9f 8ab4 	vldr	s16, [pc, #720]	; 80021f4 <runMode+0x314>
 8001f26:	f8cd a010 	str.w	sl, [sp, #16]
 8001f2a:	4644      	mov	r4, r8
{
 8001f2c:	2600      	movs	r6, #0
    if (isPushedSW1()) {
 8001f2e:	f7ff fc6d 	bl	800180c <isPushedSW1>
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d069      	beq.n	800200a <runMode+0x12a>
      cmd[i].speed = 10.0;
 8001f36:	4bb0      	ldr	r3, [pc, #704]	; (80021f8 <runMode+0x318>)
 8001f38:	6023      	str	r3, [r4, #0]
    speedToOutputVoltage(i);
 8001f3a:	4630      	mov	r0, r6
 8001f3c:	f7ff ff5e 	bl	8001dfc <speedToOutputVoltage>
    if (cmd[i].timeout_cnt > 0) {
 8001f40:	6923      	ldr	r3, [r4, #16]
 8001f42:	2b00      	cmp	r3, #0
      cmd[i].timeout_cnt--;
 8001f44:	bfc4      	itt	gt
 8001f46:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8001f4a:	6123      	strgt	r3, [r4, #16]
    if (cmd[i].timeout_cnt == 0) {
 8001f4c:	bb63      	cbnz	r3, 8001fa8 <runMode+0xc8>
    if (free_wheel_cnt > 0) {
 8001f4e:	9b04      	ldr	r3, [sp, #16]
      cmd[i].out_v = 0;
 8001f50:	ed84 8a02 	vstr	s16, [r4, #8]
    if (free_wheel_cnt > 0) {
 8001f54:	f8d3 b000 	ldr.w	fp, [r3]
 8001f58:	f1bb 0f00 	cmp.w	fp, #0
 8001f5c:	f000 8198 	beq.w	8002290 <runMode+0x3b0>
      cmd[i].out_v = 0;
 8001f60:	ed84 8a02 	vstr	s16, [r4, #8]
  cmd[motor].out_v_final = cmd[motor].out_v;
 8001f64:	ed84 8a03 	vstr	s16, [r4, #12]
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 8001f68:	edd5 7a01 	vldr	s15, [r5, #4]
 8001f6c:	ed97 7a00 	vldr	s14, [r7]
 8001f70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f74:	462b      	mov	r3, r5
 8001f76:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 2; i++) {
 8001f7a:	3508      	adds	r5, #8
 8001f7c:	3414      	adds	r4, #20
 8001f7e:	2e00      	cmp	r6, #0
 8001f80:	d03e      	beq.n	8002000 <runMode+0x120>
  print_cnt++;
 8001f82:	4c9e      	ldr	r4, [pc, #632]	; (80021fc <runMode+0x31c>)
 8001f84:	7823      	ldrb	r3, [r4, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	b2db      	uxtb	r3, r3
  switch (print_cnt) {
 8001f8a:	1e5a      	subs	r2, r3, #1
  print_cnt++;
 8001f8c:	7023      	strb	r3, [r4, #0]
  switch (print_cnt) {
 8001f8e:	2a07      	cmp	r2, #7
 8001f90:	f200 8181 	bhi.w	8002296 <runMode+0x3b6>
 8001f94:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001f98:	0073004a 	.word	0x0073004a
 8001f9c:	00a8008c 	.word	0x00a8008c
 8001fa0:	00d000c1 	.word	0x00d000c1
 8001fa4:	015a00fa 	.word	0x015a00fa
    if (free_wheel_cnt > 0) {
 8001fa8:	9b04      	ldr	r3, [sp, #16]
 8001faa:	f8d3 b000 	ldr.w	fp, [r3]
 8001fae:	f1bb 0f00 	cmp.w	fp, #0
 8001fb2:	d1d5      	bne.n	8001f60 <runMode+0x80>
  cmd[motor].out_v_final = cmd[motor].out_v;
 8001fb4:	edd4 7a02 	vldr	s15, [r4, #8]
  if (cmd[motor].out_v_final < 0) {
 8001fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  cmd[motor].out_v_final = cmd[motor].out_v;
 8001fc0:	edc4 7a03 	vstr	s15, [r4, #12]
  if (cmd[motor].out_v_final < 0) {
 8001fc4:	d5d0      	bpl.n	8001f68 <runMode+0x88>
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 8001fc6:	6838      	ldr	r0, [r7, #0]
 8001fc8:	f7fe fabe 	bl	8000548 <__aeabi_f2d>
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <runMode+0x320>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f7fe f95a 	bl	8000288 <__aeabi_dsub>
 8001fd4:	4681      	mov	r9, r0
 8001fd6:	6868      	ldr	r0, [r5, #4]
 8001fd8:	468a      	mov	sl, r1
 8001fda:	f7fe fab5 	bl	8000548 <__aeabi_f2d>
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4651      	mov	r1, sl
 8001fe4:	4648      	mov	r0, r9
 8001fe6:	f7fe f951 	bl	800028c <__adddf3>
 8001fea:	f7fe fdfd 	bl	8000be8 <__aeabi_d2f>
 8001fee:	ee07 0a90 	vmov	s15, r0
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 2; i++) {
 8001ff8:	3508      	adds	r5, #8
 8001ffa:	3414      	adds	r4, #20
 8001ffc:	2e00      	cmp	r6, #0
 8001ffe:	d1c0      	bne.n	8001f82 <runMode+0xa2>
 8002000:	2601      	movs	r6, #1
    if (isPushedSW1()) {
 8002002:	f7ff fc03 	bl	800180c <isPushedSW1>
 8002006:	2800      	cmp	r0, #0
 8002008:	d195      	bne.n	8001f36 <runMode+0x56>
    } else if (isPushedSW2()) {
 800200a:	f7ff fc0b 	bl	8001824 <isPushedSW2>
 800200e:	b110      	cbz	r0, 8002016 <runMode+0x136>
      cmd[i].speed = -10.0;
 8002010:	4b7c      	ldr	r3, [pc, #496]	; (8002204 <runMode+0x324>)
 8002012:	6023      	str	r3, [r4, #0]
 8002014:	e791      	b.n	8001f3a <runMode+0x5a>
    } else if (isPushedSW3()) {
 8002016:	f7ff fc11 	bl	800183c <isPushedSW3>
 800201a:	2800      	cmp	r0, #0
 800201c:	f000 8130 	beq.w	8002280 <runMode+0x3a0>
      cmd[i].speed = -20.0;
 8002020:	4b79      	ldr	r3, [pc, #484]	; (8002208 <runMode+0x328>)
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	e789      	b.n	8001f3a <runMode+0x5a>
      resumePwmOutput();
 8002026:	f002 ff11 	bl	8004e4c <resumePwmOutput>
 800202a:	e769      	b.n	8001f00 <runMode+0x20>
      p("CS %+5.2f %+5.2f / BV %4.1f ", getCurrentM0(), getCurrentM1(), getBatteryVoltage());
 800202c:	f7ff f860 	bl	80010f0 <getCurrentM0>
 8002030:	ee10 5a10 	vmov	r5, s0
 8002034:	f7ff f878 	bl	8001128 <getCurrentM1>
 8002038:	ee10 4a10 	vmov	r4, s0
 800203c:	f7ff f840 	bl	80010c0 <getBatteryVoltage>
 8002040:	4628      	mov	r0, r5
 8002042:	ee10 5a10 	vmov	r5, s0
 8002046:	f7fe fa7f 	bl	8000548 <__aeabi_f2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4628      	mov	r0, r5
 8002050:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002054:	f7fe fa78 	bl	8000548 <__aeabi_f2d>
 8002058:	4606      	mov	r6, r0
 800205a:	460f      	mov	r7, r1
 800205c:	4620      	mov	r0, r4
 800205e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002062:	f7fe fa71 	bl	8000548 <__aeabi_f2d>
 8002066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800206a:	e9cd 0100 	strd	r0, r1, [sp]
 800206e:	4867      	ldr	r0, [pc, #412]	; (800220c <runMode+0x32c>)
 8002070:	f002 fff2 	bl	8005058 <p>
}
 8002074:	b007      	add	sp, #28
 8002076:	ecbd 8b02 	vpop	{d8}
 800207a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("RPS %+6.1f %+6.1f Free %4d ", motor_real[0].rps, motor_real[1].rps, free_wheel_cnt);
 800207e:	4c64      	ldr	r4, [pc, #400]	; (8002210 <runMode+0x330>)
 8002080:	68a0      	ldr	r0, [r4, #8]
 8002082:	f7fe fa61 	bl	8000548 <__aeabi_f2d>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	69e0      	ldr	r0, [r4, #28]
 800208c:	f8cd b008 	str.w	fp, [sp, #8]
 8002090:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002094:	f7fe fa58 	bl	8000548 <__aeabi_f2d>
 8002098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800209c:	e9cd 0100 	strd	r0, r1, [sp]
 80020a0:	485c      	ldr	r0, [pc, #368]	; (8002214 <runMode+0x334>)
 80020a2:	f002 ffd9 	bl	8005058 <p>
}
 80020a6:	b007      	add	sp, #28
 80020a8:	ecbd 8b02 	vpop	{d8}
 80020ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("RAW %5d %5d Out_v %+5.1f %5.1f ", ma702[0].enc_raw, ma702[1].enc_raw, cmd[0].out_v, cmd[1].out_v);
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <runMode+0x338>)
 80020b2:	f8d8 001c 	ldr.w	r0, [r8, #28]
 80020b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b8:	685c      	ldr	r4, [r3, #4]
 80020ba:	9204      	str	r2, [sp, #16]
 80020bc:	f7fe fa44 	bl	8000548 <__aeabi_f2d>
 80020c0:	4606      	mov	r6, r0
 80020c2:	460f      	mov	r7, r1
 80020c4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80020c8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80020cc:	f7fe fa3c 	bl	8000548 <__aeabi_f2d>
 80020d0:	9a04      	ldr	r2, [sp, #16]
 80020d2:	e9cd 0100 	strd	r0, r1, [sp]
 80020d6:	4851      	ldr	r0, [pc, #324]	; (800221c <runMode+0x33c>)
 80020d8:	4621      	mov	r1, r4
 80020da:	f002 ffbd 	bl	8005058 <p>
}
 80020de:	b007      	add	sp, #28
 80020e0:	ecbd 8b02 	vpop	{d8}
 80020e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("Rx %4ld CPU %3d GD %4.1f ", can_rx_cnt, main_loop_remain_counter, getGateDriverDCDCVoltage());
 80020e8:	4b4d      	ldr	r3, [pc, #308]	; (8002220 <runMode+0x340>)
 80020ea:	4c4e      	ldr	r4, [pc, #312]	; (8002224 <runMode+0x344>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	9204      	str	r2, [sp, #16]
 80020f0:	6825      	ldr	r5, [r4, #0]
 80020f2:	f7ff f895 	bl	8001220 <getGateDriverDCDCVoltage>
 80020f6:	ee10 0a10 	vmov	r0, s0
 80020fa:	f7fe fa25 	bl	8000548 <__aeabi_f2d>
 80020fe:	9a04      	ldr	r2, [sp, #16]
 8002100:	e9cd 0100 	strd	r0, r1, [sp]
 8002104:	4848      	ldr	r0, [pc, #288]	; (8002228 <runMode+0x348>)
 8002106:	4629      	mov	r1, r5
 8002108:	f002 ffa6 	bl	8005058 <p>
      can_rx_cnt = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	6023      	str	r3, [r4, #0]
}
 8002110:	b007      	add	sp, #28
 8002112:	ecbd 8b02 	vpop	{d8}
 8002116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("T %+4d %+4d ", getTempM0(), getTempM1());
 800211a:	f7ff f851 	bl	80011c0 <getTempM0>
 800211e:	9004      	str	r0, [sp, #16]
 8002120:	f7ff f81e 	bl	8001160 <getTempM1>
 8002124:	9904      	ldr	r1, [sp, #16]
 8002126:	4602      	mov	r2, r0
 8002128:	4840      	ldr	r0, [pc, #256]	; (800222c <runMode+0x34c>)
}
 800212a:	b007      	add	sp, #28
 800212c:	ecbd 8b02 	vpop	{d8}
 8002130:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      p("T %+4d %+4d ", getTempM0(), getTempM1());
 8002134:	f002 bf90 	b.w	8005058 <p>
      p("LoadV %+5.2f %+5.2f CanFail %4d ", cmd[0].out_v - pid[0].eff_voltage, cmd[1].out_v - pid[1].eff_voltage, can_send_fail_cnt);
 8002138:	4d3d      	ldr	r5, [pc, #244]	; (8002230 <runMode+0x350>)
 800213a:	ed98 7a02 	vldr	s14, [r8, #8]
 800213e:	edd5 7a00 	vldr	s15, [r5]
 8002142:	4c3c      	ldr	r4, [pc, #240]	; (8002234 <runMode+0x354>)
 8002144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002148:	ee17 0a90 	vmov	r0, s15
 800214c:	f7fe f9fc 	bl	8000548 <__aeabi_f2d>
 8002150:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8002154:	ed98 7a07 	vldr	s14, [r8, #28]
 8002158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	ee17 0a90 	vmov	r0, s15
 8002164:	6821      	ldr	r1, [r4, #0]
 8002166:	9102      	str	r1, [sp, #8]
 8002168:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800216c:	f7fe f9ec 	bl	8000548 <__aeabi_f2d>
 8002170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002174:	e9cd 0100 	strd	r0, r1, [sp]
 8002178:	482f      	ldr	r0, [pc, #188]	; (8002238 <runMode+0x358>)
 800217a:	f002 ff6d 	bl	8005058 <p>
      can_send_fail_cnt = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	6023      	str	r3, [r4, #0]
}
 8002182:	b007      	add	sp, #28
 8002184:	ecbd 8b02 	vpop	{d8}
 8002188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("LoadCnt %3.2f %3.2f ", (float)pid[0].load_limit_cnt / MOTOR_OVER_LOAD_CNT_LIMIT, (float)pid[1].load_limit_cnt / MOTOR_OVER_LOAD_CNT_LIMIT);
 800218c:	4c28      	ldr	r4, [pc, #160]	; (8002230 <runMode+0x350>)
 800218e:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 800223c <runMode+0x35c>
 8002192:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8002196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800219e:	ee17 0a90 	vmov	r0, s15
 80021a2:	f7fe f9d1 	bl	8000548 <__aeabi_f2d>
 80021a6:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 80021aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ae:	4602      	mov	r2, r0
 80021b0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80021b4:	460b      	mov	r3, r1
 80021b6:	ee17 0a90 	vmov	r0, s15
 80021ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80021be:	f7fe f9c3 	bl	8000548 <__aeabi_f2d>
 80021c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80021c6:	e9cd 0100 	strd	r0, r1, [sp]
 80021ca:	481d      	ldr	r0, [pc, #116]	; (8002240 <runMode+0x360>)
 80021cc:	f002 ff44 	bl	8005058 <p>
}
 80021d0:	b007      	add	sp, #28
 80021d2:	ecbd 8b02 	vpop	{d8}
 80021d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021da:	bf00      	nop
 80021dc:	f3af 8000 	nop.w
 80021e0:	54442d18 	.word	0x54442d18
 80021e4:	401921fb 	.word	0x401921fb
 80021e8:	20000448 	.word	0x20000448
 80021ec:	2000041c 	.word	0x2000041c
 80021f0:	c2200000 	.word	0xc2200000
 80021f4:	00000000 	.word	0x00000000
 80021f8:	41200000 	.word	0x41200000
 80021fc:	200004e4 	.word	0x200004e4
 8002200:	40100000 	.word	0x40100000
 8002204:	c1200000 	.word	0xc1200000
 8002208:	c1a00000 	.word	0xc1a00000
 800220c:	0800d7ec 	.word	0x0800d7ec
 8002210:	2000045c 	.word	0x2000045c
 8002214:	0800d80c 	.word	0x0800d80c
 8002218:	20000580 	.word	0x20000580
 800221c:	0800d828 	.word	0x0800d828
 8002220:	20000444 	.word	0x20000444
 8002224:	200003d4 	.word	0x200003d4
 8002228:	0800d848 	.word	0x0800d848
 800222c:	0800d864 	.word	0x0800d864
 8002230:	20000488 	.word	0x20000488
 8002234:	20000314 	.word	0x20000314
 8002238:	0800d874 	.word	0x0800d874
 800223c:	39aec33e 	.word	0x39aec33e
 8002240:	0800d898 	.word	0x0800d898
 8002244:	20000004 	.word	0x20000004
 8002248:	200003f4 	.word	0x200003f4
      p("TO %4d %4d diff max M0 %+6d, M1 %+6d ", cmd[0].timeout_cnt, cmd[1].timeout_cnt, motor_real[0].diff_cnt_max, motor_real[1].diff_cnt_max);
 800224c:	4c15      	ldr	r4, [pc, #84]	; (80022a4 <runMode+0x3c4>)
 800224e:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8002252:	69a0      	ldr	r0, [r4, #24]
 8002254:	6863      	ldr	r3, [r4, #4]
 8002256:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800225a:	9000      	str	r0, [sp, #0]
 800225c:	4812      	ldr	r0, [pc, #72]	; (80022a8 <runMode+0x3c8>)
 800225e:	f002 fefb 	bl	8005058 <p>
      ma702[0].diff_max = 0;
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <runMode+0x3cc>)
      motor_real[0].diff_cnt_max = 0;
 8002264:	2200      	movs	r2, #0
      ma702[0].diff_min = 65535;
 8002266:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800226a:	e9c3 1205 	strd	r1, r2, [r3, #20]
      ma702[1].diff_min = 65535;
 800226e:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
      motor_real[0].diff_cnt_max = 0;
 8002272:	6062      	str	r2, [r4, #4]
      motor_real[1].diff_cnt_max = 0;
 8002274:	61a2      	str	r2, [r4, #24]
}
 8002276:	b007      	add	sp, #28
 8002278:	ecbd 8b02 	vpop	{d8}
 800227c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (isPushedSW4()) {
 8002280:	f7ff fae8 	bl	8001854 <isPushedSW4>
 8002284:	2800      	cmp	r0, #0
 8002286:	f43f ae58 	beq.w	8001f3a <runMode+0x5a>
      cmd[i].speed = -40.0;
 800228a:	edc4 8a00 	vstr	s17, [r4]
 800228e:	e654      	b.n	8001f3a <runMode+0x5a>
  cmd[motor].out_v_final = cmd[motor].out_v;
 8002290:	ed84 8a03 	vstr	s16, [r4, #12]
  if (cmd[motor].out_v_final < 0) {
 8002294:	e668      	b.n	8001f68 <runMode+0x88>
      p("\n");
 8002296:	4806      	ldr	r0, [pc, #24]	; (80022b0 <runMode+0x3d0>)
 8002298:	f002 fede 	bl	8005058 <p>
      print_cnt = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	7023      	strb	r3, [r4, #0]
}
 80022a0:	e6e8      	b.n	8002074 <runMode+0x194>
 80022a2:	bf00      	nop
 80022a4:	2000045c 	.word	0x2000045c
 80022a8:	0800d8b0 	.word	0x0800d8b0
 80022ac:	20000580 	.word	0x20000580
 80022b0:	0800dad4 	.word	0x0800dad4
 80022b4:	00000000 	.word	0x00000000

080022b8 <encoderCalibrationMode>:
{
 80022b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (calibration_print_flag) {
 80022bc:	4bd2      	ldr	r3, [pc, #840]	; (8002608 <encoderCalibrationMode+0x350>)
{
 80022be:	ed2d 8b0e 	vpush	{d8-d14}
  if (calibration_print_flag) {
 80022c2:	781a      	ldrb	r2, [r3, #0]
{
 80022c4:	b095      	sub	sp, #84	; 0x54
  if (calibration_print_flag) {
 80022c6:	bb0a      	cbnz	r2, 800230c <encoderCalibrationMode+0x54>
  if (calib[0].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib[1].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib_force_rotation_speed > 0) {
 80022c8:	4cd0      	ldr	r4, [pc, #832]	; (800260c <encoderCalibrationMode+0x354>)
 80022ca:	68e3      	ldr	r3, [r4, #12]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	dd02      	ble.n	80022d6 <encoderCalibrationMode+0x1e>
 80022d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	dc0a      	bgt.n	80022ec <encoderCalibrationMode+0x34>
  if (calib[0].result_cw_cnt > MOTOR_CALIB_CYCLE && calib[1].result_cw_cnt > MOTOR_CALIB_CYCLE) {
 80022d6:	68a3      	ldr	r3, [r4, #8]
 80022d8:	2b0c      	cmp	r3, #12
 80022da:	dd02      	ble.n	80022e2 <encoderCalibrationMode+0x2a>
 80022dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	dc77      	bgt.n	80023d2 <encoderCalibrationMode+0x11a>
}
 80022e2:	b015      	add	sp, #84	; 0x54
 80022e4:	ecbd 8b0e 	vpop	{d8-d14}
 80022e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (calib[0].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib[1].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib_force_rotation_speed > 0) {
 80022ec:	4bc8      	ldr	r3, [pc, #800]	; (8002610 <encoderCalibrationMode+0x358>)
 80022ee:	edd3 7a00 	vldr	s15, [r3]
 80022f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	ddec      	ble.n	80022d6 <encoderCalibrationMode+0x1e>
    calib_force_rotation_speed = -calib_force_rotation_speed;  //CCW方向終わったので、回転方向反転
 80022fc:	eef1 7a67 	vneg.f32	s15, s15
    HAL_Delay(1);                                              // write out uart buffer
 8002300:	2001      	movs	r0, #1
    calib_force_rotation_speed = -calib_force_rotation_speed;  //CCW方向終わったので、回転方向反転
 8002302:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);                                              // write out uart buffer
 8002306:	f002 ff97 	bl	8005238 <HAL_Delay>
 800230a:	e7e4      	b.n	80022d6 <encoderCalibrationMode+0x1e>
    p("enc = %+5.2f %+5.2f  / M0 X %+5.2f Y %+5.2f / M1 X %+5.2f Y %+5.2f / Rad %+5.2f %+5.2f\n", ma702[0].output_radian, ma702[1].output_radian, cos(ma702[0].output_radian),
 800230c:	4cc1      	ldr	r4, [pc, #772]	; (8002614 <encoderCalibrationMode+0x35c>)
    calibration_print_flag = false;
 800230e:	2200      	movs	r2, #0
    p("enc = %+5.2f %+5.2f  / M0 X %+5.2f Y %+5.2f / M1 X %+5.2f Y %+5.2f / Rad %+5.2f %+5.2f\n", ma702[0].output_radian, ma702[1].output_radian, cos(ma702[0].output_radian),
 8002310:	6820      	ldr	r0, [r4, #0]
    calibration_print_flag = false;
 8002312:	701a      	strb	r2, [r3, #0]
    p("enc = %+5.2f %+5.2f  / M0 X %+5.2f Y %+5.2f / M1 X %+5.2f Y %+5.2f / Rad %+5.2f %+5.2f\n", ma702[0].output_radian, ma702[1].output_radian, cos(ma702[0].output_radian),
 8002314:	f7fe f918 	bl	8000548 <__aeabi_f2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800231e:	ec43 2b18 	vmov	d8, r2, r3
 8002322:	f7fe f911 	bl	8000548 <__aeabi_f2d>
 8002326:	eeb0 0a48 	vmov.f32	s0, s16
 800232a:	eef0 0a68 	vmov.f32	s1, s17
 800232e:	ec41 0b19 	vmov	d9, r0, r1
 8002332:	f007 f8d5 	bl	80094e0 <cos>
 8002336:	eeb0 da40 	vmov.f32	s26, s0
 800233a:	eef0 da60 	vmov.f32	s27, s1
 800233e:	eeb0 0a48 	vmov.f32	s0, s16
 8002342:	eef0 0a68 	vmov.f32	s1, s17
 8002346:	f007 f91f 	bl	8009588 <sin>
 800234a:	eeb0 aa40 	vmov.f32	s20, s0
 800234e:	eef0 aa60 	vmov.f32	s21, s1
 8002352:	eeb0 0a49 	vmov.f32	s0, s18
 8002356:	eef0 0a69 	vmov.f32	s1, s19
 800235a:	f007 f8c1 	bl	80094e0 <cos>
 800235e:	eeb0 ba40 	vmov.f32	s22, s0
 8002362:	eef0 ba60 	vmov.f32	s23, s1
 8002366:	eeb0 0a49 	vmov.f32	s0, s18
 800236a:	eef0 0a69 	vmov.f32	s1, s19
 800236e:	f007 f90b 	bl	8009588 <sin>
 8002372:	eeb0 1a4d 	vmov.f32	s2, s26
 8002376:	eef0 1a6d 	vmov.f32	s3, s27
 800237a:	eeb0 ca40 	vmov.f32	s24, s0
 800237e:	eef0 ca60 	vmov.f32	s25, s1
 8002382:	eeb0 0a4a 	vmov.f32	s0, s20
 8002386:	eef0 0a6a 	vmov.f32	s1, s21
 800238a:	f007 f8a5 	bl	80094d8 <atan2>
 800238e:	eeb0 1a4b 	vmov.f32	s2, s22
 8002392:	eef0 1a6b 	vmov.f32	s3, s23
 8002396:	eeb0 ea40 	vmov.f32	s28, s0
 800239a:	eef0 ea60 	vmov.f32	s29, s1
 800239e:	eeb0 0a4c 	vmov.f32	s0, s24
 80023a2:	eef0 0a6c 	vmov.f32	s1, s25
 80023a6:	f007 f897 	bl	80094d8 <atan2>
 80023aa:	ed8d eb0a 	vstr	d14, [sp, #40]	; 0x28
 80023ae:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
 80023b2:	ed8d cb08 	vstr	d12, [sp, #32]
 80023b6:	ed8d bb06 	vstr	d11, [sp, #24]
 80023ba:	ed8d ab04 	vstr	d10, [sp, #16]
 80023be:	ed8d db02 	vstr	d13, [sp, #8]
 80023c2:	ed8d 9b00 	vstr	d9, [sp]
 80023c6:	ec53 2b18 	vmov	r2, r3, d8
 80023ca:	4893      	ldr	r0, [pc, #588]	; (8002618 <encoderCalibrationMode+0x360>)
 80023cc:	f002 fe44 	bl	8005058 <p>
 80023d0:	e77a      	b.n	80022c8 <encoderCalibrationMode+0x10>
    cmd[0].out_v_final = 0;
 80023d2:	ed9f 9a92 	vldr	s18, [pc, #584]	; 800261c <encoderCalibrationMode+0x364>
 80023d6:	4d92      	ldr	r5, [pc, #584]	; (8002620 <encoderCalibrationMode+0x368>)
 80023d8:	f8df b274 	ldr.w	fp, [pc, #628]	; 8002650 <encoderCalibrationMode+0x398>
 80023dc:	ed85 9a03 	vstr	s18, [r5, #12]
    cmd[1].out_v_final = 0;
 80023e0:	ed85 9a08 	vstr	s18, [r5, #32]
    HAL_Delay(1);  // write out uart buffer
 80023e4:	2001      	movs	r0, #1
 80023e6:	f002 ff27 	bl	8005238 <HAL_Delay>
    for (int i = 0; i < 2; i++) {
 80023ea:	f04f 0900 	mov.w	r9, #0
 80023ee:	4b8d      	ldr	r3, [pc, #564]	; (8002624 <encoderCalibrationMode+0x36c>)
 80023f0:	930e      	str	r3, [sp, #56]	; 0x38
 80023f2:	4c86      	ldr	r4, [pc, #536]	; (800260c <encoderCalibrationMode+0x354>)
    float xy_field_ave_x[2] = {0}, xy_field_ave_y[2] = {0}, xy_field_offset_radian[2] = {0, 0};
 80023f4:	ed8d 9a12 	vstr	s18, [sp, #72]	; 0x48
 80023f8:	464b      	mov	r3, r9
 80023fa:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
    for (int i = 0; i < 2; i++) {
 80023fe:	46a9      	mov	r9, r5
 8002400:	46da      	mov	sl, fp
 8002402:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 8002406:	461d      	mov	r5, r3
      p("Motor : %d\n", i);
 8002408:	4887      	ldr	r0, [pc, #540]	; (8002628 <encoderCalibrationMode+0x370>)
 800240a:	4629      	mov	r1, r5
 800240c:	f002 fe24 	bl	8005058 <p>
      p("CW X %+5.2f Y %+5.2f\n", calib[i].xy_field.result_cw_x, calib[i].xy_field.result_cw_y);
 8002410:	69e0      	ldr	r0, [r4, #28]
 8002412:	f7fe f899 	bl	8000548 <__aeabi_f2d>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	6a20      	ldr	r0, [r4, #32]
 800241c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002420:	f7fe f892 	bl	8000548 <__aeabi_f2d>
 8002424:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002428:	e9cd 0100 	strd	r0, r1, [sp]
 800242c:	487f      	ldr	r0, [pc, #508]	; (800262c <encoderCalibrationMode+0x374>)
 800242e:	f002 fe13 	bl	8005058 <p>
      p("CCW X %+5.2f Y %+5.2f\n", calib[i].xy_field.result_ccw_x, calib[i].xy_field.result_ccw_y);
 8002432:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002434:	f7fe f888 	bl	8000548 <__aeabi_f2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800243e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002442:	f7fe f881 	bl	8000548 <__aeabi_f2d>
 8002446:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800244a:	e9cd 0100 	strd	r0, r1, [sp]
 800244e:	4878      	ldr	r0, [pc, #480]	; (8002630 <encoderCalibrationMode+0x378>)
 8002450:	f002 fe02 	bl	8005058 <p>
      p("CW rad %+5.2f\n", atan2(calib[i].xy_field.result_cw_y, calib[i].xy_field.result_cw_x));
 8002454:	69e0      	ldr	r0, [r4, #28]
 8002456:	f7fe f877 	bl	8000548 <__aeabi_f2d>
 800245a:	ec41 0b18 	vmov	d8, r0, r1
 800245e:	6a20      	ldr	r0, [r4, #32]
 8002460:	f7fe f872 	bl	8000548 <__aeabi_f2d>
 8002464:	eeb0 1a48 	vmov.f32	s2, s16
 8002468:	eef0 1a68 	vmov.f32	s3, s17
 800246c:	ec41 0b10 	vmov	d0, r0, r1
 8002470:	f007 f832 	bl	80094d8 <atan2>
 8002474:	486f      	ldr	r0, [pc, #444]	; (8002634 <encoderCalibrationMode+0x37c>)
 8002476:	ec53 2b10 	vmov	r2, r3, d0
 800247a:	f002 fded 	bl	8005058 <p>
      p("CCW rad %+5.2f\n", atan2(calib[i].xy_field.result_ccw_y, calib[i].xy_field.result_ccw_x));
 800247e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002480:	f7fe f862 	bl	8000548 <__aeabi_f2d>
 8002484:	ec41 0b18 	vmov	d8, r0, r1
 8002488:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800248a:	f7fe f85d 	bl	8000548 <__aeabi_f2d>
 800248e:	eeb0 1a48 	vmov.f32	s2, s16
 8002492:	eef0 1a68 	vmov.f32	s3, s17
 8002496:	ec41 0b10 	vmov	d0, r0, r1
 800249a:	f007 f81d 	bl	80094d8 <atan2>
 800249e:	4866      	ldr	r0, [pc, #408]	; (8002638 <encoderCalibrationMode+0x380>)
 80024a0:	ec53 2b10 	vmov	r2, r3, d0
 80024a4:	f002 fdd8 	bl	8005058 <p>
      xy_field_ave_y[i] = calib[i].xy_field.result_cw_y + calib[i].xy_field.result_ccw_y;
 80024a8:	ed94 7a08 	vldr	s14, [r4, #32]
 80024ac:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
      xy_field_offset_radian[i] = (2 * M_PI) - atan2(xy_field_ave_y[i], xy_field_ave_x[i]);
 80024b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b4:	ee17 0a90 	vmov	r0, s15
 80024b8:	f7fe f846 	bl	8000548 <__aeabi_f2d>
      xy_field_ave_x[i] = calib[i].xy_field.result_cw_x + calib[i].xy_field.result_ccw_x;
 80024bc:	ed94 7a07 	vldr	s14, [r4, #28]
 80024c0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
      xy_field_offset_radian[i] = (2 * M_PI) - atan2(xy_field_ave_y[i], xy_field_ave_x[i]);
 80024c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c8:	ec41 0b18 	vmov	d8, r0, r1
 80024cc:	ee17 0a90 	vmov	r0, s15
 80024d0:	f7fe f83a 	bl	8000548 <__aeabi_f2d>
 80024d4:	eeb0 0a48 	vmov.f32	s0, s16
 80024d8:	eef0 0a68 	vmov.f32	s1, s17
 80024dc:	460b      	mov	r3, r1
 80024de:	4602      	mov	r2, r0
 80024e0:	ec43 2b11 	vmov	d1, r2, r3
 80024e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80024e8:	f006 fff6 	bl	80094d8 <atan2>
 80024ec:	ec57 6b10 	vmov	r6, r7, d0
      p("CW+CCW X %+5.2f Y %+5.2f\n", xy_field_ave_x[i], xy_field_ave_y[i]);
 80024f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80024f4:	ed8d 8b00 	vstr	d8, [sp]
 80024f8:	4850      	ldr	r0, [pc, #320]	; (800263c <encoderCalibrationMode+0x384>)
 80024fa:	f002 fdad 	bl	8005058 <p>
      xy_field_offset_radian[i] = (2 * M_PI) - atan2(xy_field_ave_y[i], xy_field_ave_x[i]);
 80024fe:	4632      	mov	r2, r6
 8002500:	463b      	mov	r3, r7
 8002502:	a13f      	add	r1, pc, #252	; (adr r1, 8002600 <encoderCalibrationMode+0x348>)
 8002504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002508:	f7fd febe 	bl	8000288 <__aeabi_dsub>
 800250c:	f7fe fb6c 	bl	8000be8 <__aeabi_d2f>
      xy_field_offset_radian[i] += ROTATION_OFFSET_RADIAN;
 8002510:	ee07 0a10 	vmov	s14, r0
 8002514:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002518:	ee37 8a27 	vadd.f32	s16, s14, s15
      if (xy_field_offset_radian[i] > M_PI * 2) {
 800251c:	ee18 0a10 	vmov	r0, s16
 8002520:	f7fe f812 	bl	8000548 <__aeabi_f2d>
 8002524:	a336      	add	r3, pc, #216	; (adr r3, 8002600 <encoderCalibrationMode+0x348>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	4606      	mov	r6, r0
 800252c:	460f      	mov	r7, r1
 800252e:	f7fe faf3 	bl	8000b18 <__aeabi_dcmpgt>
 8002532:	2800      	cmp	r0, #0
 8002534:	f040 808e 	bne.w	8002654 <encoderCalibrationMode+0x39c>
      xy_field_offset_radian[i] += ROTATION_OFFSET_RADIAN;
 8002538:	ed88 8a00 	vstr	s16, [r8]
      if (xy_field_offset_radian[i] < 0) {
 800253c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002544:	d510      	bpl.n	8002568 <encoderCalibrationMode+0x2b0>
        xy_field_offset_radian[i] += M_PI * 2;
 8002546:	a32e      	add	r3, pc, #184	; (adr r3, 8002600 <encoderCalibrationMode+0x348>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	4630      	mov	r0, r6
 800254e:	4639      	mov	r1, r7
 8002550:	f7fd fe9c 	bl	800028c <__adddf3>
 8002554:	f7fe fb48 	bl	8000be8 <__aeabi_d2f>
 8002558:	ee08 0a10 	vmov	s16, r0
 800255c:	f8c8 0000 	str.w	r0, [r8]
      p("Rad M0 %+5.2f\n\n", xy_field_offset_radian[i]);
 8002560:	f7fd fff2 	bl	8000548 <__aeabi_f2d>
 8002564:	4606      	mov	r6, r0
 8002566:	460f      	mov	r7, r1
 8002568:	4632      	mov	r2, r6
 800256a:	463b      	mov	r3, r7
 800256c:	4834      	ldr	r0, [pc, #208]	; (8002640 <encoderCalibrationMode+0x388>)
 800256e:	f002 fd73 	bl	8005058 <p>
      flash.calib[i] = enc_offset[i].zero_calib;
 8002572:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 8002574:	ed8a 8a01 	vstr	s16, [sl, #4]
      calib[i].result_cw_cnt = 0;
 8002578:	2600      	movs	r6, #0
      flash.calib[i] = enc_offset[i].zero_calib;
 800257a:	eca3 8a01 	vstmia	r3!, {s16}
      calib[i].result_cw_cnt = 0;
 800257e:	60a6      	str	r6, [r4, #8]
      cmd[i].out_v_final = 0;
 8002580:	ed89 9a03 	vstr	s18, [r9, #12]
      calib[i].ave_cnt = 0;
 8002584:	f844 6b2c 	str.w	r6, [r4], #44
    for (int i = 0; i < 2; i++) {
 8002588:	f108 0804 	add.w	r8, r8, #4
      flash.calib[i] = enc_offset[i].zero_calib;
 800258c:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < 2; i++) {
 800258e:	f10a 0a08 	add.w	sl, sl, #8
 8002592:	f109 0914 	add.w	r9, r9, #20
 8002596:	2d00      	cmp	r5, #0
 8002598:	d06e      	beq.n	8002678 <encoderCalibrationMode+0x3c0>
    writeEncCalibrationValue(enc_offset[0].zero_calib, enc_offset[1].zero_calib);
 800259a:	eddb 0a03 	vldr	s1, [fp, #12]
 800259e:	ed9b 0a01 	vldr	s0, [fp, #4]
 80025a2:	f7ff f907 	bl	80017b4 <writeEncCalibrationValue>
      flash.calib[i] = xy_field_offset_radian[i];
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <encoderCalibrationMode+0x36c>)
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 80025a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80025aa:	9812      	ldr	r0, [sp, #72]	; 0x48
      flash.calib[i] = xy_field_offset_radian[i];
 80025ac:	6018      	str	r0, [r3, #0]
 80025ae:	605c      	str	r4, [r3, #4]
    manual_offset_radian = 0;  // 割り込みの中で加算してしまうので,enc_calib_cnt = 0にしてからでないといけない
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <encoderCalibrationMode+0x38c>)
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 80025b2:	f8cb 400c 	str.w	r4, [fp, #12]
    manual_offset_radian = 0;  // 割り込みの中で加算してしまうので,enc_calib_cnt = 0にしてからでないといけない
 80025b6:	ed83 9a00 	vstr	s18, [r3]
    calib_process.motor_calib_mode = 0;
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <encoderCalibrationMode+0x390>)
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 80025bc:	f8cb 0004 	str.w	r0, [fp, #4]
    calib_process.motor_calib_mode = 0;
 80025c0:	609e      	str	r6, [r3, #8]
    calib_process.enc_calib_cnt = 0;
 80025c2:	2701      	movs	r7, #1
 80025c4:	2600      	movs	r6, #0
 80025c6:	e9c3 6700 	strd	r6, r7, [r3]
    p("calib %+5.2f %+5.2f", enc_offset[0].zero_calib, enc_offset[1].zero_calib);
 80025ca:	f7fd ffbd 	bl	8000548 <__aeabi_f2d>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80025d8:	f7fd ffb6 	bl	8000548 <__aeabi_f2d>
 80025dc:	4604      	mov	r4, r0
 80025de:	460d      	mov	r5, r1
 80025e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80025e4:	e9cd 4500 	strd	r4, r5, [sp]
 80025e8:	4818      	ldr	r0, [pc, #96]	; (800264c <encoderCalibrationMode+0x394>)
 80025ea:	f002 fd35 	bl	8005058 <p>
    HAL_Delay(900);
 80025ee:	f44f 7061 	mov.w	r0, #900	; 0x384
}
 80025f2:	b015      	add	sp, #84	; 0x54
 80025f4:	ecbd 8b0e 	vpop	{d8-d14}
 80025f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(900);
 80025fc:	f002 be1c 	b.w	8005238 <HAL_Delay>
 8002600:	54442d18 	.word	0x54442d18
 8002604:	401921fb 	.word	0x401921fb
 8002608:	200003c8 	.word	0x200003c8
 800260c:	2000035c 	.word	0x2000035c
 8002610:	20000000 	.word	0x20000000
 8002614:	20000580 	.word	0x20000580
 8002618:	0800d8d8 	.word	0x0800d8d8
 800261c:	00000000 	.word	0x00000000
 8002620:	200003f4 	.word	0x200003f4
 8002624:	20000340 	.word	0x20000340
 8002628:	0800d930 	.word	0x0800d930
 800262c:	0800d978 	.word	0x0800d978
 8002630:	0800d93c 	.word	0x0800d93c
 8002634:	0800d954 	.word	0x0800d954
 8002638:	0800d964 	.word	0x0800d964
 800263c:	0800d974 	.word	0x0800d974
 8002640:	0800d990 	.word	0x0800d990
 8002644:	20000448 	.word	0x20000448
 8002648:	200003b8 	.word	0x200003b8
 800264c:	0800d9a0 	.word	0x0800d9a0
 8002650:	2000041c 	.word	0x2000041c
        xy_field_offset_radian[i] -= M_PI * 2;
 8002654:	a30a      	add	r3, pc, #40	; (adr r3, 8002680 <encoderCalibrationMode+0x3c8>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	4630      	mov	r0, r6
 800265c:	4639      	mov	r1, r7
 800265e:	f7fd fe13 	bl	8000288 <__aeabi_dsub>
 8002662:	f7fe fac1 	bl	8000be8 <__aeabi_d2f>
 8002666:	ee08 0a10 	vmov	s16, r0
 800266a:	f8c8 0000 	str.w	r0, [r8]
        xy_field_offset_radian[i] += M_PI * 2;
 800266e:	f7fd ff6b 	bl	8000548 <__aeabi_f2d>
 8002672:	4606      	mov	r6, r0
 8002674:	460f      	mov	r7, r1
 8002676:	e761      	b.n	800253c <encoderCalibrationMode+0x284>
 8002678:	2501      	movs	r5, #1
 800267a:	e6c5      	b.n	8002408 <encoderCalibrationMode+0x150>
 800267c:	f3af 8000 	nop.w
 8002680:	54442d18 	.word	0x54442d18
 8002684:	401921fb 	.word	0x401921fb

08002688 <motorCalibrationMode>:
{
 8002688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (calib_process.motor_calib_cnt > 1) {
 800268c:	f8df 936c 	ldr.w	r9, [pc, #876]	; 80029fc <motorCalibrationMode+0x374>
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 8002690:	4bc8      	ldr	r3, [pc, #800]	; (80029b4 <motorCalibrationMode+0x32c>)
  if (calib_process.motor_calib_cnt > 1) {
 8002692:	f8d9 4004 	ldr.w	r4, [r9, #4]
{
 8002696:	ed2d 8b02 	vpush	{d8}
  if (calib_process.motor_calib_cnt > 1) {
 800269a:	2c01      	cmp	r4, #1
{
 800269c:	b085      	sub	sp, #20
  if (calib_process.motor_calib_cnt > 1) {
 800269e:	f240 80a9 	bls.w	80027f4 <motorCalibrationMode+0x16c>
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80026a2:	ed93 8a00 	vldr	s16, [r3]
    calib_process.motor_calib_cnt--;
 80026a6:	3c01      	subs	r4, #1
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 80026a8:	ee18 0a10 	vmov	r0, s16
    calib_process.motor_calib_cnt--;
 80026ac:	f8c9 4004 	str.w	r4, [r9, #4]
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 80026b0:	f7fd ff4a 	bl	8000548 <__aeabi_f2d>
 80026b4:	4bc0      	ldr	r3, [pc, #768]	; (80029b8 <motorCalibrationMode+0x330>)
        cmd[i].out_v = calib_process.motor_calib_voltage;
 80026b6:	edd9 8a03 	vldr	s17, [r9, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f7fd fde4 	bl	8000288 <__aeabi_dsub>
    if (calib_process.motor_calib_cnt > 1) {
 80026c0:	2c01      	cmp	r4, #1
 80026c2:	4606      	mov	r6, r0
 80026c4:	460f      	mov	r7, r1
 80026c6:	f000 8214 	beq.w	8002af2 <motorCalibrationMode+0x46a>
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_START_CNT) {
 80026ca:	f240 53db 	movw	r3, #1499	; 0x5db
 80026ce:	429c      	cmp	r4, r3
 80026d0:	d93f      	bls.n	8002752 <motorCalibrationMode+0xca>
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_READY_CNT) {
 80026d2:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80026d6:	d346      	bcc.n	8002766 <motorCalibrationMode+0xde>
      cmd[i].out_v = 0;
 80026d8:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8002a00 <motorCalibrationMode+0x378>
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c8 3008 	str.w	r3, [r8, #8]
  cmd[motor].out_v_final = cmd[motor].out_v;
 80026e2:	f8c8 300c 	str.w	r3, [r8, #12]
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80026e6:	4db5      	ldr	r5, [pc, #724]	; (80029bc <motorCalibrationMode+0x334>)
 80026e8:	edd5 7a01 	vldr	s15, [r5, #4]
 80026ec:	ee78 7a27 	vadd.f32	s15, s16, s15
    if (calib_process.motor_calib_cnt > 1) {
 80026f0:	2c01      	cmp	r4, #1
 80026f2:	edc5 7a00 	vstr	s15, [r5]
 80026f6:	d953      	bls.n	80027a0 <motorCalibrationMode+0x118>
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_START_CNT) {
 80026f8:	f240 53db 	movw	r3, #1499	; 0x5db
 80026fc:	429c      	cmp	r4, r3
 80026fe:	d86c      	bhi.n	80027da <motorCalibrationMode+0x152>
        calib[i].rps_integral += motor_real[i].rps;
 8002700:	4baf      	ldr	r3, [pc, #700]	; (80029c0 <motorCalibrationMode+0x338>)
 8002702:	4ab0      	ldr	r2, [pc, #704]	; (80029c4 <motorCalibrationMode+0x33c>)
 8002704:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002708:	edd2 7a07 	vldr	s15, [r2, #28]
 800270c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002710:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
        cmd[i].out_v = calib_process.motor_calib_voltage;
 8002714:	eef0 7a68 	vmov.f32	s15, s17
  if (cmd[motor].out_v_final < 0) {
 8002718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800271c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cmd[i].out_v = calib_process.motor_calib_voltage;
 8002720:	edc8 8a07 	vstr	s17, [r8, #28]
  cmd[motor].out_v_final = cmd[motor].out_v;
 8002724:	edc8 7a08 	vstr	s15, [r8, #32]
  if (cmd[motor].out_v_final < 0) {
 8002728:	d544      	bpl.n	80027b4 <motorCalibrationMode+0x12c>
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 800272a:	68e8      	ldr	r0, [r5, #12]
 800272c:	f7fd ff0c 	bl	8000548 <__aeabi_f2d>
 8002730:	4632      	mov	r2, r6
 8002732:	463b      	mov	r3, r7
 8002734:	f7fd fdaa 	bl	800028c <__adddf3>
 8002738:	f7fe fa56 	bl	8000be8 <__aeabi_d2f>
 800273c:	ee08 0a10 	vmov	s16, r0
  if (calib_process.motor_calib_cnt == 1) {
 8002740:	2c01      	cmp	r4, #1
 8002742:	ed85 8a02 	vstr	s16, [r5, #8]
 8002746:	d03d      	beq.n	80027c4 <motorCalibrationMode+0x13c>
}
 8002748:	b005      	add	sp, #20
 800274a:	ecbd 8b02 	vpop	{d8}
 800274e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        calib[i].rps_integral += motor_real[i].rps;
 8002752:	4b9b      	ldr	r3, [pc, #620]	; (80029c0 <motorCalibrationMode+0x338>)
 8002754:	4a9b      	ldr	r2, [pc, #620]	; (80029c4 <motorCalibrationMode+0x33c>)
 8002756:	ed93 7a04 	vldr	s14, [r3, #16]
 800275a:	edd2 7a02 	vldr	s15, [r2, #8]
 800275e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002762:	edc3 7a04 	vstr	s15, [r3, #16]
        cmd[i].out_v = calib_process.motor_calib_voltage;
 8002766:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8002a00 <motorCalibrationMode+0x378>
 800276a:	eef0 7a68 	vmov.f32	s15, s17
 800276e:	edc8 8a02 	vstr	s17, [r8, #8]
  if (cmd[motor].out_v_final < 0) {
 8002772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  cmd[motor].out_v_final = cmd[motor].out_v;
 800277a:	edc8 7a03 	vstr	s15, [r8, #12]
  if (cmd[motor].out_v_final < 0) {
 800277e:	d5b2      	bpl.n	80026e6 <motorCalibrationMode+0x5e>
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 8002780:	4d8e      	ldr	r5, [pc, #568]	; (80029bc <motorCalibrationMode+0x334>)
 8002782:	6868      	ldr	r0, [r5, #4]
 8002784:	f7fd fee0 	bl	8000548 <__aeabi_f2d>
 8002788:	4632      	mov	r2, r6
 800278a:	463b      	mov	r3, r7
 800278c:	f7fd fd7e 	bl	800028c <__adddf3>
 8002790:	f7fe fa2a 	bl	8000be8 <__aeabi_d2f>
 8002794:	ee07 0a90 	vmov	s15, r0
    if (calib_process.motor_calib_cnt > 1) {
 8002798:	2c01      	cmp	r4, #1
 800279a:	edc5 7a00 	vstr	s15, [r5]
 800279e:	d8ab      	bhi.n	80026f8 <motorCalibrationMode+0x70>
    } else if (calib_process.motor_calib_cnt == 1) {
 80027a0:	d01e      	beq.n	80027e0 <motorCalibrationMode+0x158>
  cmd[motor].out_v_final = cmd[motor].out_v;
 80027a2:	edd8 7a07 	vldr	s15, [r8, #28]
  if (cmd[motor].out_v_final < 0) {
 80027a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  cmd[motor].out_v_final = cmd[motor].out_v;
 80027ae:	edc8 7a08 	vstr	s15, [r8, #32]
  if (cmd[motor].out_v_final < 0) {
 80027b2:	d4ba      	bmi.n	800272a <motorCalibrationMode+0xa2>
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80027b4:	edd5 7a03 	vldr	s15, [r5, #12]
 80027b8:	ee38 8a27 	vadd.f32	s16, s16, s15
  if (calib_process.motor_calib_cnt == 1) {
 80027bc:	2c01      	cmp	r4, #1
 80027be:	ed85 8a02 	vstr	s16, [r5, #8]
 80027c2:	d1c1      	bne.n	8002748 <motorCalibrationMode+0xc0>
    switch (calib_process.motor_calib_mode) {
 80027c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	f200 8194 	bhi.w	8002af6 <motorCalibrationMode+0x46e>
 80027ce:	e8df f013 	tbh	[pc, r3, lsl #1]
 80027d2:	016b      	.short	0x016b
 80027d4:	00800119 	.word	0x00800119
 80027d8:	0028      	.short	0x0028
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_READY_CNT) {
 80027da:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80027de:	d399      	bcc.n	8002714 <motorCalibrationMode+0x8c>
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80027e0:	edd5 7a03 	vldr	s15, [r5, #12]
      cmd[i].out_v = 0;
 80027e4:	2300      	movs	r3, #0
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80027e6:	ee38 8a27 	vadd.f32	s16, s16, s15
      cmd[i].out_v = 0;
 80027ea:	f8c8 301c 	str.w	r3, [r8, #28]
  cmd[motor].out_v_final = cmd[motor].out_v;
 80027ee:	f8c8 3020 	str.w	r3, [r8, #32]
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80027f2:	e7e3      	b.n	80027bc <motorCalibrationMode+0x134>
 80027f4:	ed93 8a00 	vldr	s16, [r3]
        cmd[i].out_v = calib_process.motor_calib_voltage;
 80027f8:	edd9 8a03 	vldr	s17, [r9, #12]
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 80027fc:	ee18 0a10 	vmov	r0, s16
 8002800:	f7fd fea2 	bl	8000548 <__aeabi_f2d>
 8002804:	4b6c      	ldr	r3, [pc, #432]	; (80029b8 <motorCalibrationMode+0x330>)
 8002806:	2200      	movs	r2, #0
 8002808:	f7fd fd3e 	bl	8000288 <__aeabi_dsub>
    } else if (calib_process.motor_calib_cnt == 1) {
 800280c:	2c01      	cmp	r4, #1
 800280e:	4606      	mov	r6, r0
 8002810:	460f      	mov	r7, r1
 8002812:	f000 816e 	beq.w	8002af2 <motorCalibrationMode+0x46a>
  cmd[motor].out_v_final = cmd[motor].out_v;
 8002816:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002a00 <motorCalibrationMode+0x378>
 800281a:	2400      	movs	r4, #0
 800281c:	edd8 7a02 	vldr	s15, [r8, #8]
 8002820:	e7a7      	b.n	8002772 <motorCalibrationMode+0xea>
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002822:	4b67      	ldr	r3, [pc, #412]	; (80029c0 <motorCalibrationMode+0x338>)
 8002824:	eddf 6a68 	vldr	s13, [pc, #416]	; 80029c8 <motorCalibrationMode+0x340>
 8002828:	ed93 7a04 	vldr	s14, [r3, #16]
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 800282c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002830:	4c66      	ldr	r4, [pc, #408]	; (80029cc <motorCalibrationMode+0x344>)
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002832:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002836:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 800283a:	ee87 8aa8 	vdiv.f32	s16, s15, s17
        calib[0].rps_integral = 0;
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
        calib[1].rps_integral = 0;
 8002842:	63da      	str	r2, [r3, #60]	; 0x3c
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002844:	eec7 6a28 	vdiv.f32	s13, s14, s17
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002848:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_h[0], rps_per_v_cw_h[1]);
 800284c:	ee16 0a90 	vmov	r0, s13
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002850:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_h[0], rps_per_v_cw_h[1]);
 8002854:	f7fd fe78 	bl	8000548 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	ee18 0a10 	vmov	r0, s16
 8002860:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002864:	f7fd fe70 	bl	8000548 <__aeabi_f2d>
 8002868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800286c:	e9cd 0100 	strd	r0, r1, [sp]
 8002870:	4857      	ldr	r0, [pc, #348]	; (80029d0 <motorCalibrationMode+0x348>)
 8002872:	f002 fbf1 	bl	8005058 <p>
        if (checkMotorRpsError(rps_per_v_cw_h[0], rps_per_v_cw_h[1])) {
 8002876:	edd4 6a00 	vldr	s13, [r4]
 800287a:	ed94 6a01 	vldr	s12, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 800287e:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8002882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002886:	eef0 7ae7 	vabs.f32	s15, s15
 800288a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002892:	f300 8127 	bgt.w	8002ae4 <motorCalibrationMode+0x45c>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002896:	eef4 6ac7 	vcmpe.f32	s13, s14
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289e:	f100 8197 	bmi.w	8002bd0 <motorCalibrationMode+0x548>
        if (rps_per_v_cw_l[0] < 4.0) {
 80028a2:	4a4c      	ldr	r2, [pc, #304]	; (80029d4 <motorCalibrationMode+0x34c>)
        calib_process.motor_calib_mode++;
 80028a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
        if (rps_per_v_cw_l[0] < 4.0) {
 80028a8:	ed92 7a00 	vldr	s14, [r2]
 80028ac:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80028b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        calib_process.motor_calib_mode++;
 80028b8:	f103 0302 	add.w	r3, r3, #2
        calib_process.motor_calib_cnt = MOTOR_CALIB_INIT_CNT;
 80028bc:	f640 12c4 	movw	r2, #2500	; 0x9c4
        calib_process.motor_calib_mode++;
 80028c0:	e9c9 2301 	strd	r2, r3, [r9, #4]
          calib_process.motor_calib_voltage = -MOTOR_CALIB_VOLTAGE_HIGH / 2;
 80028c4:	bf59      	ittee	pl
 80028c6:	4944      	ldrpl	r1, [pc, #272]	; (80029d8 <motorCalibrationMode+0x350>)
        if (rps_per_v_cw_l[0] < 4.0) {
 80028c8:	4b44      	ldrpl	r3, [pc, #272]	; (80029dc <motorCalibrationMode+0x354>)
 80028ca:	4b45      	ldrmi	r3, [pc, #276]	; (80029e0 <motorCalibrationMode+0x358>)
          calib_process.motor_calib_voltage = -MOTOR_CALIB_VOLTAGE_HIGH;
 80028cc:	4945      	ldrmi	r1, [pc, #276]	; (80029e4 <motorCalibrationMode+0x35c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	e0e0      	b.n	8002a94 <motorCalibrationMode+0x40c>
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <motorCalibrationMode+0x338>)
 80028d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80029c8 <motorCalibrationMode+0x340>
 80028d8:	ed93 7a04 	vldr	s14, [r3, #16]
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028dc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028e0:	4c41      	ldr	r4, [pc, #260]	; (80029e8 <motorCalibrationMode+0x360>)
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028e6:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028ea:	ee87 8aa8 	vdiv.f32	s16, s15, s17
        calib[0].rps_integral = 0;
 80028ee:	2200      	movs	r2, #0
 80028f0:	611a      	str	r2, [r3, #16]
        calib[1].rps_integral = 0;
 80028f2:	63da      	str	r2, [r3, #60]	; 0x3c
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028f4:	eec7 6a28 	vdiv.f32	s13, s14, s17
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028f8:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_l[0], rps_per_v_ccw_l[1]);
 80028fc:	ee16 0a90 	vmov	r0, s13
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002900:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_l[0], rps_per_v_ccw_l[1]);
 8002904:	f7fd fe20 	bl	8000548 <__aeabi_f2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	ee18 0a10 	vmov	r0, s16
 8002910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002914:	f7fd fe18 	bl	8000548 <__aeabi_f2d>
 8002918:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800291c:	e9cd 0100 	strd	r0, r1, [sp]
 8002920:	482b      	ldr	r0, [pc, #172]	; (80029d0 <motorCalibrationMode+0x348>)
 8002922:	f002 fb99 	bl	8005058 <p>
        if (checkMotorRpsError(rps_per_v_ccw_l[0], rps_per_v_ccw_l[1])) {
 8002926:	edd4 7a00 	vldr	s15, [r4]
 800292a:	ed94 6a01 	vldr	s12, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 800292e:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8002932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002936:	eeb0 7ac7 	vabs.f32	s14, s14
 800293a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002942:	f300 80cf 	bgt.w	8002ae4 <motorCalibrationMode+0x45c>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002946:	eef4 7ae6 	vcmpe.f32	s15, s13
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	f100 8138 	bmi.w	8002bc2 <motorCalibrationMode+0x53a>
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_l[0], rps_per_v_cw_l[1], rps_per_v_ccw_l[0], rps_per_v_ccw_l[1])) {
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <motorCalibrationMode+0x34c>)
 8002954:	edd3 6a00 	vldr	s13, [r3]
 8002958:	ed93 7a01 	vldr	s14, [r3, #4]
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 800295c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002960:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002964:	eef0 7ae7 	vabs.f32	s15, s15
 8002968:	eef4 7ae5 	vcmpe.f32	s15, s11
 800296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002970:	f300 8120 	bgt.w	8002bb4 <motorCalibrationMode+0x52c>
 8002974:	ee77 7a46 	vsub.f32	s15, s14, s12
 8002978:	eef0 7ae7 	vabs.f32	s15, s15
 800297c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002984:	f300 8116 	bgt.w	8002bb4 <motorCalibrationMode+0x52c>
        calib_process.motor_calib_mode++;
 8002988:	f8d9 3008 	ldr.w	r3, [r9, #8]
        if (rps_per_v_cw_l[0] < 4.0) {
 800298c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8002990:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        calib_process.motor_calib_mode++;
 8002998:	f103 0301 	add.w	r3, r3, #1
        calib_process.motor_calib_cnt = MOTOR_CALIB_INIT_CNT;
 800299c:	f640 12c4 	movw	r2, #2500	; 0x9c4
        calib_process.motor_calib_mode++;
 80029a0:	e9c9 2301 	strd	r2, r3, [r9, #4]
          calib_process.motor_calib_voltage = MOTOR_CALIB_VOLTAGE_HIGH / 2;
 80029a4:	bf59      	ittee	pl
 80029a6:	4911      	ldrpl	r1, [pc, #68]	; (80029ec <motorCalibrationMode+0x364>)
        if (rps_per_v_cw_l[0] < 4.0) {
 80029a8:	4b11      	ldrpl	r3, [pc, #68]	; (80029f0 <motorCalibrationMode+0x368>)
 80029aa:	4b12      	ldrmi	r3, [pc, #72]	; (80029f4 <motorCalibrationMode+0x36c>)
          calib_process.motor_calib_voltage = MOTOR_CALIB_VOLTAGE_HIGH;
 80029ac:	4912      	ldrmi	r1, [pc, #72]	; (80029f8 <motorCalibrationMode+0x370>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	e070      	b.n	8002a94 <motorCalibrationMode+0x40c>
 80029b2:	bf00      	nop
 80029b4:	20000448 	.word	0x20000448
 80029b8:	40100000 	.word	0x40100000
 80029bc:	2000041c 	.word	0x2000041c
 80029c0:	2000035c 	.word	0x2000035c
 80029c4:	2000045c 	.word	0x2000045c
 80029c8:	3a2ec33e 	.word	0x3a2ec33e
 80029cc:	200004f8 	.word	0x200004f8
 80029d0:	0800da2c 	.word	0x0800da2c
 80029d4:	20000500 	.word	0x20000500
 80029d8:	c0a00000 	.word	0xc0a00000
 80029dc:	c0140000 	.word	0xc0140000
 80029e0:	c0240000 	.word	0xc0240000
 80029e4:	c1200000 	.word	0xc1200000
 80029e8:	200004f0 	.word	0x200004f0
 80029ec:	40a00000 	.word	0x40a00000
 80029f0:	40140000 	.word	0x40140000
 80029f4:	40240000 	.word	0x40240000
 80029f8:	41200000 	.word	0x41200000
 80029fc:	200003b8 	.word	0x200003b8
 8002a00:	200003f4 	.word	0x200003f4
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002a04:	4b96      	ldr	r3, [pc, #600]	; (8002c60 <motorCalibrationMode+0x5d8>)
 8002a06:	eddf 6a97 	vldr	s13, [pc, #604]	; 8002c64 <motorCalibrationMode+0x5dc>
 8002a0a:	ed93 7a04 	vldr	s14, [r3, #16]
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002a0e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002a12:	4c95      	ldr	r4, [pc, #596]	; (8002c68 <motorCalibrationMode+0x5e0>)
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002a14:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002a18:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002a1c:	ee87 8aa8 	vdiv.f32	s16, s15, s17
        calib[0].rps_integral = 0;
 8002a20:	2200      	movs	r2, #0
 8002a22:	611a      	str	r2, [r3, #16]
        calib[1].rps_integral = 0;
 8002a24:	63da      	str	r2, [r3, #60]	; 0x3c
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002a26:	eec7 6a28 	vdiv.f32	s13, s14, s17
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002a2a:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_l[0], rps_per_v_cw_l[1]);
 8002a2e:	ee16 0a90 	vmov	r0, s13
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002a32:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_l[0], rps_per_v_cw_l[1]);
 8002a36:	f7fd fd87 	bl	8000548 <__aeabi_f2d>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	ee18 0a10 	vmov	r0, s16
 8002a42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a46:	f7fd fd7f 	bl	8000548 <__aeabi_f2d>
 8002a4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002a4e:	e9cd 0100 	strd	r0, r1, [sp]
 8002a52:	4886      	ldr	r0, [pc, #536]	; (8002c6c <motorCalibrationMode+0x5e4>)
 8002a54:	f002 fb00 	bl	8005058 <p>
        if (checkMotorRpsError(rps_per_v_cw_l[0], rps_per_v_cw_l[1])) {
 8002a58:	edd4 6a00 	vldr	s13, [r4]
 8002a5c:	ed94 6a01 	vldr	s12, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 8002a60:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8002a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a68:	eef0 7ae7 	vabs.f32	s15, s15
 8002a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a74:	dc36      	bgt.n	8002ae4 <motorCalibrationMode+0x45c>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002a76:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7e:	d42c      	bmi.n	8002ada <motorCalibrationMode+0x452>
        calib_process.motor_calib_mode++;
 8002a80:	f8d9 3008 	ldr.w	r3, [r9, #8]
        calib_process.motor_calib_voltage = -MOTOR_CALIB_VOLTAGE_LOW;
 8002a84:	497a      	ldr	r1, [pc, #488]	; (8002c70 <motorCalibrationMode+0x5e8>)
        calib_process.motor_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002a86:	f640 12c4 	movw	r2, #2500	; 0x9c4
        calib_process.motor_calib_mode++;
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	e9c9 2301 	strd	r2, r3, [r9, #4]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002a90:	4b78      	ldr	r3, [pc, #480]	; (8002c74 <motorCalibrationMode+0x5ec>)
 8002a92:	2200      	movs	r2, #0
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002a94:	4878      	ldr	r0, [pc, #480]	; (8002c78 <motorCalibrationMode+0x5f0>)
 8002a96:	f8c9 100c 	str.w	r1, [r9, #12]
}
 8002a9a:	b005      	add	sp, #20
 8002a9c:	ecbd 8b02 	vpop	{d8}
 8002aa0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002aa4:	f002 bad8 	b.w	8005058 <p>
        p("\n\nstart motor calib!!\n\n");
 8002aa8:	4874      	ldr	r0, [pc, #464]	; (8002c7c <motorCalibrationMode+0x5f4>)
 8002aaa:	f002 fad5 	bl	8005058 <p>
        calib_process.motor_calib_mode = 1;
 8002aae:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e9c9 2301 	strd	r2, r3, [r9, #4]
        calib_process.motor_calib_voltage = MOTOR_CALIB_VOLTAGE_LOW;
 8002ab8:	4b71      	ldr	r3, [pc, #452]	; (8002c80 <motorCalibrationMode+0x5f8>)
        calib[0].rps_integral = 0;
 8002aba:	4969      	ldr	r1, [pc, #420]	; (8002c60 <motorCalibrationMode+0x5d8>)
        calib_process.motor_calib_voltage = MOTOR_CALIB_VOLTAGE_LOW;
 8002abc:	f8c9 300c 	str.w	r3, [r9, #12]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002ac0:	486d      	ldr	r0, [pc, #436]	; (8002c78 <motorCalibrationMode+0x5f0>)
 8002ac2:	4b70      	ldr	r3, [pc, #448]	; (8002c84 <motorCalibrationMode+0x5fc>)
        calib[0].rps_integral = 0;
 8002ac4:	2400      	movs	r4, #0
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002ac6:	2200      	movs	r2, #0
        calib[0].rps_integral = 0;
 8002ac8:	610c      	str	r4, [r1, #16]
        calib[1].rps_integral = 0;
 8002aca:	63cc      	str	r4, [r1, #60]	; 0x3c
}
 8002acc:	b005      	add	sp, #20
 8002ace:	ecbd 8b02 	vpop	{d8}
 8002ad2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002ad6:	f002 babf 	b.w	8005058 <p>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002ada:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae2:	d5cd      	bpl.n	8002a80 <motorCalibrationMode+0x3f8>
    p("\n\nCALIBRATION ERROR!!!\n\n");
 8002ae4:	4868      	ldr	r0, [pc, #416]	; (8002c88 <motorCalibrationMode+0x600>)
 8002ae6:	f002 fab7 	bl	8005058 <p>
    calib_process.motor_calib_cnt = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c9 3004 	str.w	r3, [r9, #4]
    return true;
 8002af0:	e62a      	b.n	8002748 <motorCalibrationMode+0xc0>
{
 8002af2:	2401      	movs	r4, #1
 8002af4:	e5f0      	b.n	80026d8 <motorCalibrationMode+0x50>
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002af6:	4b5a      	ldr	r3, [pc, #360]	; (8002c60 <motorCalibrationMode+0x5d8>)
 8002af8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8002c64 <motorCalibrationMode+0x5dc>
 8002afc:	ed93 7a04 	vldr	s14, [r3, #16]
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002b00:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002b04:	4c61      	ldr	r4, [pc, #388]	; (8002c8c <motorCalibrationMode+0x604>)
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002b06:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002b0a:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002b0e:	ee87 8aa8 	vdiv.f32	s16, s15, s17
        calib[0].rps_integral = 0;
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
        calib[1].rps_integral = 0;
 8002b16:	63da      	str	r2, [r3, #60]	; 0x3c
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002b18:	eec7 6a28 	vdiv.f32	s13, s14, s17
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002b1c:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_h[0], rps_per_v_ccw_h[1]);
 8002b20:	ee16 0a90 	vmov	r0, s13
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002b24:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_h[0], rps_per_v_ccw_h[1]);
 8002b28:	f7fd fd0e 	bl	8000548 <__aeabi_f2d>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	ee18 0a10 	vmov	r0, s16
 8002b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b38:	f7fd fd06 	bl	8000548 <__aeabi_f2d>
 8002b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b40:	e9cd 0100 	strd	r0, r1, [sp]
 8002b44:	4849      	ldr	r0, [pc, #292]	; (8002c6c <motorCalibrationMode+0x5e4>)
 8002b46:	f002 fa87 	bl	8005058 <p>
        p("\n\n!!!!!!FINISH!!!!!!!!\n\n");
 8002b4a:	4851      	ldr	r0, [pc, #324]	; (8002c90 <motorCalibrationMode+0x608>)
 8002b4c:	f002 fa84 	bl	8005058 <p>
        if (checkMotorRpsError(rps_per_v_ccw_h[0], rps_per_v_ccw_h[1])) {
 8002b50:	ed94 6a00 	vldr	s12, [r4]
 8002b54:	edd4 6a01 	vldr	s13, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 8002b58:	ee36 7a66 	vsub.f32	s14, s12, s13
 8002b5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002b60:	eeb0 7ac7 	vabs.f32	s14, s14
 8002b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6c:	dcba      	bgt.n	8002ae4 <motorCalibrationMode+0x45c>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002b6e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b76:	d504      	bpl.n	8002b82 <motorCalibrationMode+0x4fa>
 8002b78:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	d4b0      	bmi.n	8002ae4 <motorCalibrationMode+0x45c>
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_h[0], rps_per_v_cw_h[1], rps_per_v_ccw_h[0], rps_per_v_ccw_h[1])) {
 8002b82:	4b44      	ldr	r3, [pc, #272]	; (8002c94 <motorCalibrationMode+0x60c>)
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 8002b84:	ed93 7a00 	vldr	s14, [r3]
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_h[0], rps_per_v_cw_h[1], rps_per_v_ccw_h[0], rps_per_v_ccw_h[1])) {
 8002b88:	edd3 7a01 	vldr	s15, [r3, #4]
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 8002b8c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8002b90:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002b94:	eeb0 7ac7 	vabs.f32	s14, s14
 8002b98:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	dc08      	bgt.n	8002bb4 <motorCalibrationMode+0x52c>
 8002ba2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ba6:	eef0 7ae7 	vabs.f32	s15, s15
 8002baa:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	dd14      	ble.n	8002bde <motorCalibrationMode+0x556>
    p("\n\nCALIBRATION ERROR!!! CW-CCW PARAM UNMATCH\n\n");
 8002bb4:	4838      	ldr	r0, [pc, #224]	; (8002c98 <motorCalibrationMode+0x610>)
 8002bb6:	f002 fa4f 	bl	8005058 <p>
    calib_process.motor_calib_cnt = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8c9 3004 	str.w	r3, [r9, #4]
    return true;
 8002bc0:	e5c2      	b.n	8002748 <motorCalibrationMode+0xc0>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002bc2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bca:	f57f aec2 	bpl.w	8002952 <motorCalibrationMode+0x2ca>
 8002bce:	e789      	b.n	8002ae4 <motorCalibrationMode+0x45c>
 8002bd0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd8:	f57f ae63 	bpl.w	80028a2 <motorCalibrationMode+0x21a>
 8002bdc:	e782      	b.n	8002ae4 <motorCalibrationMode+0x45c>
        p("save calib result...\n");
 8002bde:	482f      	ldr	r0, [pc, #188]	; (8002c9c <motorCalibrationMode+0x614>)
        p("enc data : %4.1f %4.1f\n", flash.calib[0], flash.calib[1]);
 8002be0:	4c2f      	ldr	r4, [pc, #188]	; (8002ca0 <motorCalibrationMode+0x618>)
        p("save calib result...\n");
 8002be2:	f002 fa39 	bl	8005058 <p>
        writeMotorCalibrationValue(rps_per_v_cw_l[0], rps_per_v_cw_l[1]);
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <motorCalibrationMode+0x5e0>)
 8002be8:	edd3 0a01 	vldr	s1, [r3, #4]
 8002bec:	ed93 0a00 	vldr	s0, [r3]
 8002bf0:	f7fe fdea 	bl	80017c8 <writeMotorCalibrationValue>
        HAL_Delay(10);
 8002bf4:	200a      	movs	r0, #10
 8002bf6:	f002 fb1f 	bl	8005238 <HAL_Delay>
        p("enc data : %4.1f %4.1f\n", flash.calib[0], flash.calib[1]);
 8002bfa:	6820      	ldr	r0, [r4, #0]
 8002bfc:	f7fd fca4 	bl	8000548 <__aeabi_f2d>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	6860      	ldr	r0, [r4, #4]
 8002c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c0a:	f7fd fc9d 	bl	8000548 <__aeabi_f2d>
 8002c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c12:	e9cd 0100 	strd	r0, r1, [sp]
 8002c16:	4823      	ldr	r0, [pc, #140]	; (8002ca4 <motorCalibrationMode+0x61c>)
 8002c18:	f002 fa1e 	bl	8005058 <p>
        p("motor data : %4.1f %4.1f\n", flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]);
 8002c1c:	68e0      	ldr	r0, [r4, #12]
 8002c1e:	f7fd fc93 	bl	8000548 <__aeabi_f2d>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	6920      	ldr	r0, [r4, #16]
 8002c28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c2c:	f7fd fc8c 	bl	8000548 <__aeabi_f2d>
 8002c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c34:	e9cd 0100 	strd	r0, r1, [sp]
 8002c38:	481b      	ldr	r0, [pc, #108]	; (8002ca8 <motorCalibrationMode+0x620>)
 8002c3a:	f002 fa0d 	bl	8005058 <p>
        HAL_Delay(1000);
 8002c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c42:	f002 faf9 	bl	8005238 <HAL_Delay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c46:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c4a:	4918      	ldr	r1, [pc, #96]	; (8002cac <motorCalibrationMode+0x624>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <motorCalibrationMode+0x628>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c4e:	68ca      	ldr	r2, [r1, #12]
 8002c50:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60cb      	str	r3, [r1, #12]
 8002c58:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002c5c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002c5e:	e7fd      	b.n	8002c5c <motorCalibrationMode+0x5d4>
 8002c60:	2000035c 	.word	0x2000035c
 8002c64:	3a2ec33e 	.word	0x3a2ec33e
 8002c68:	20000500 	.word	0x20000500
 8002c6c:	0800da2c 	.word	0x0800da2c
 8002c70:	c0400000 	.word	0xc0400000
 8002c74:	c0080000 	.word	0xc0080000
 8002c78:	0800da18 	.word	0x0800da18
 8002c7c:	0800da00 	.word	0x0800da00
 8002c80:	40400000 	.word	0x40400000
 8002c84:	40080000 	.word	0x40080000
 8002c88:	0800d9b4 	.word	0x0800d9b4
 8002c8c:	200004e8 	.word	0x200004e8
 8002c90:	0800da58 	.word	0x0800da58
 8002c94:	200004f8 	.word	0x200004f8
 8002c98:	0800d9d0 	.word	0x0800d9d0
 8002c9c:	0800da74 	.word	0x0800da74
 8002ca0:	20000340 	.word	0x20000340
 8002ca4:	0800da8c 	.word	0x0800da8c
 8002ca8:	0800daa4 	.word	0x0800daa4
 8002cac:	e000ed00 	.word	0xe000ed00
 8002cb0:	05fa0004 	.word	0x05fa0004
 8002cb4:	00000000 	.word	0x00000000

08002cb8 <startCalibrationMode>:
{
 8002cb8:	b508      	push	{r3, lr}
  p("calibration mode!\n");
 8002cba:	480b      	ldr	r0, [pc, #44]	; (8002ce8 <startCalibrationMode+0x30>)
 8002cbc:	f002 f9cc 	bl	8005058 <p>
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002cc0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8002ce0 <startCalibrationMode+0x28>
 8002cc4:	4909      	ldr	r1, [pc, #36]	; (8002cec <startCalibrationMode+0x34>)
  cmd[0].speed = 0;
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <startCalibrationMode+0x38>)
  manual_offset_radian = 0;
 8002cc8:	480a      	ldr	r0, [pc, #40]	; (8002cf4 <startCalibrationMode+0x3c>)
 8002cca:	2200      	movs	r2, #0
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002ccc:	ed81 7b00 	vstr	d7, [r1]
  cmd[0].out_v_final = 2.0;
 8002cd0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  manual_offset_radian = 0;
 8002cd4:	6002      	str	r2, [r0, #0]
  cmd[0].speed = 0;
 8002cd6:	601a      	str	r2, [r3, #0]
  cmd[1].speed = 0;
 8002cd8:	615a      	str	r2, [r3, #20]
  cmd[0].out_v_final = 2.0;
 8002cda:	60d9      	str	r1, [r3, #12]
  cmd[1].out_v_final = 2.0;
 8002cdc:	6219      	str	r1, [r3, #32]
}
 8002cde:	bd08      	pop	{r3, pc}
 8002ce0:	000009c4 	.word	0x000009c4
 8002ce4:	00000000 	.word	0x00000000
 8002ce8:	0800d7d8 	.word	0x0800d7d8
 8002cec:	200003b8 	.word	0x200003b8
 8002cf0:	200003f4 	.word	0x200003f4
 8002cf4:	20000448 	.word	0x20000448

08002cf8 <sendCanData>:
{
 8002cf8:	b570      	push	{r4, r5, r6, lr}
  sendSpeed(flash.board_id, 0, motor_real[0].rps, (float)ma702[0].enc_raw * 2 * M_PI / 65535);
 8002cfa:	4c65      	ldr	r4, [pc, #404]	; (8002e90 <sendCanData+0x198>)
 8002cfc:	4e65      	ldr	r6, [pc, #404]	; (8002e94 <sendCanData+0x19c>)
 8002cfe:	edd4 7a01 	vldr	s15, [r4, #4]
 8002d02:	4d65      	ldr	r5, [pc, #404]	; (8002e98 <sendCanData+0x1a0>)
 8002d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8002d08:	b082      	sub	sp, #8
  sendSpeed(flash.board_id, 0, motor_real[0].rps, (float)ma702[0].enc_raw * 2 * M_PI / 65535);
 8002d0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d0e:	ee17 0a90 	vmov	r0, s15
 8002d12:	f7fd fc19 	bl	8000548 <__aeabi_f2d>
 8002d16:	a35c      	add	r3, pc, #368	; (adr r3, 8002e88 <sendCanData+0x190>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fc6c 	bl	80005f8 <__aeabi_dmul>
 8002d20:	f7fd ff62 	bl	8000be8 <__aeabi_d2f>
 8002d24:	ed96 0a02 	vldr	s0, [r6, #8]
 8002d28:	ee00 0a90 	vmov	s1, r0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	68a8      	ldr	r0, [r5, #8]
 8002d30:	f7fe fc08 	bl	8001544 <sendSpeed>
  sendSpeed(flash.board_id, 1, motor_real[1].rps, (float)ma702[1].enc_raw * 2 * M_PI / 65535);
 8002d34:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  switch (transfer_cnt) {
 8002d38:	4c58      	ldr	r4, [pc, #352]	; (8002e9c <sendCanData+0x1a4>)
  sendSpeed(flash.board_id, 1, motor_real[1].rps, (float)ma702[1].enc_raw * 2 * M_PI / 65535);
 8002d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d42:	ee17 0a90 	vmov	r0, s15
 8002d46:	f7fd fbff 	bl	8000548 <__aeabi_f2d>
 8002d4a:	a34f      	add	r3, pc, #316	; (adr r3, 8002e88 <sendCanData+0x190>)
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f7fd fc52 	bl	80005f8 <__aeabi_dmul>
 8002d54:	f7fd ff48 	bl	8000be8 <__aeabi_d2f>
 8002d58:	ed96 0a07 	vldr	s0, [r6, #28]
 8002d5c:	ee00 0a90 	vmov	s1, r0
 8002d60:	2101      	movs	r1, #1
 8002d62:	68a8      	ldr	r0, [r5, #8]
 8002d64:	f7fe fbee 	bl	8001544 <sendSpeed>
  switch (transfer_cnt) {
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	2b32      	cmp	r3, #50	; 0x32
 8002d6c:	d824      	bhi.n	8002db8 <sendCanData+0xc0>
 8002d6e:	e8df f003 	tbb	[pc, r3]
 8002d72:	231a      	.short	0x231a
 8002d74:	23412334 	.word	0x23412334
 8002d78:	235b234e 	.word	0x235b234e
 8002d7c:	237b236b 	.word	0x237b236b
 8002d80:	23232327 	.word	0x23232327
 8002d84:	23232323 	.word	0x23232323
 8002d88:	23232323 	.word	0x23232323
 8002d8c:	23232323 	.word	0x23232323
 8002d90:	23232323 	.word	0x23232323
 8002d94:	23232323 	.word	0x23232323
 8002d98:	23232323 	.word	0x23232323
 8002d9c:	23232323 	.word	0x23232323
 8002da0:	23232323 	.word	0x23232323
 8002da4:	88          	.byte	0x88
 8002da5:	00          	.byte	0x00
      sendVoltage(flash.board_id, 0, getBatteryVoltage());
 8002da6:	68a8      	ldr	r0, [r5, #8]
 8002da8:	9001      	str	r0, [sp, #4]
 8002daa:	f7fe f989 	bl	80010c0 <getBatteryVoltage>
 8002dae:	9801      	ldr	r0, [sp, #4]
 8002db0:	2100      	movs	r1, #0
 8002db2:	f7fe fbed 	bl	8001590 <sendVoltage>
  transfer_cnt++;
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	6023      	str	r3, [r4, #0]
}
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
      sendFloat(0x501 + flash.board_id * 2, flash.rps_per_v_cw[1]);
 8002dc0:	68a8      	ldr	r0, [r5, #8]
 8002dc2:	ed95 0a04 	vldr	s0, [r5, #16]
 8002dc6:	0040      	lsls	r0, r0, #1
 8002dc8:	f200 5001 	addw	r0, r0, #1281	; 0x501
 8002dcc:	f7fe fb9a 	bl	8001504 <sendFloat>
  transfer_cnt++;
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	6023      	str	r3, [r4, #0]
}
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd70      	pop	{r4, r5, r6, pc}
      sendVoltage(flash.board_id, 1, getBatteryVoltage());
 8002dda:	68a8      	ldr	r0, [r5, #8]
 8002ddc:	9001      	str	r0, [sp, #4]
 8002dde:	f7fe f96f 	bl	80010c0 <getBatteryVoltage>
 8002de2:	9801      	ldr	r0, [sp, #4]
 8002de4:	2101      	movs	r1, #1
 8002de6:	f7fe fbd3 	bl	8001590 <sendVoltage>
  transfer_cnt++;
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	6023      	str	r3, [r4, #0]
}
 8002df0:	b002      	add	sp, #8
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
      sendCurrent(flash.board_id, 0, getCurrentM0());
 8002df4:	68a8      	ldr	r0, [r5, #8]
 8002df6:	9001      	str	r0, [sp, #4]
 8002df8:	f7fe f97a 	bl	80010f0 <getCurrentM0>
 8002dfc:	9801      	ldr	r0, [sp, #4]
 8002dfe:	2100      	movs	r1, #0
 8002e00:	f7fe fc0e 	bl	8001620 <sendCurrent>
  transfer_cnt++;
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	6023      	str	r3, [r4, #0]
}
 8002e0a:	b002      	add	sp, #8
 8002e0c:	bd70      	pop	{r4, r5, r6, pc}
      sendCurrent(flash.board_id, 1, getCurrentM1());
 8002e0e:	68a8      	ldr	r0, [r5, #8]
 8002e10:	9001      	str	r0, [sp, #4]
 8002e12:	f7fe f989 	bl	8001128 <getCurrentM1>
 8002e16:	9801      	ldr	r0, [sp, #4]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	f7fe fc01 	bl	8001620 <sendCurrent>
  transfer_cnt++;
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	6023      	str	r3, [r4, #0]
}
 8002e24:	b002      	add	sp, #8
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
      sendTemperature(flash.board_id, 0, getTempM0());
 8002e28:	68ad      	ldr	r5, [r5, #8]
 8002e2a:	f7fe f9c9 	bl	80011c0 <getTempM0>
 8002e2e:	ee07 0a90 	vmov	s15, r0
 8002e32:	2100      	movs	r1, #0
 8002e34:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002e38:	4628      	mov	r0, r5
 8002e3a:	f7fe fbcd 	bl	80015d8 <sendTemperature>
  transfer_cnt++;
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	6023      	str	r3, [r4, #0]
}
 8002e44:	b002      	add	sp, #8
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
      sendTemperature(flash.board_id, 1, getTempM1());
 8002e48:	68ad      	ldr	r5, [r5, #8]
 8002e4a:	f7fe f989 	bl	8001160 <getTempM1>
 8002e4e:	ee07 0a90 	vmov	s15, r0
 8002e52:	2101      	movs	r1, #1
 8002e54:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002e58:	4628      	mov	r0, r5
 8002e5a:	f7fe fbbd 	bl	80015d8 <sendTemperature>
  transfer_cnt++;
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	3301      	adds	r3, #1
 8002e62:	6023      	str	r3, [r4, #0]
}
 8002e64:	b002      	add	sp, #8
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
      sendFloat(0x500 + flash.board_id * 2, flash.rps_per_v_cw[0]);
 8002e68:	68a8      	ldr	r0, [r5, #8]
 8002e6a:	ed95 0a03 	vldr	s0, [r5, #12]
 8002e6e:	f500 7020 	add.w	r0, r0, #640	; 0x280
 8002e72:	0040      	lsls	r0, r0, #1
 8002e74:	f7fe fb46 	bl	8001504 <sendFloat>
  transfer_cnt++;
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	6023      	str	r3, [r4, #0]
}
 8002e7e:	b002      	add	sp, #8
 8002e80:	bd70      	pop	{r4, r5, r6, pc}
  switch (transfer_cnt) {
 8002e82:	2300      	movs	r3, #0
 8002e84:	e799      	b.n	8002dba <sendCanData+0xc2>
 8002e86:	bf00      	nop
 8002e88:	7658a371 	.word	0x7658a371
 8002e8c:	3f092214 	.word	0x3f092214
 8002e90:	20000580 	.word	0x20000580
 8002e94:	2000045c 	.word	0x2000045c
 8002e98:	20000340 	.word	0x20000340
 8002e9c:	20000508 	.word	0x20000508

08002ea0 <protect>:
{
 8002ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea2:	ed2d 8b02 	vpush	{d8}
 8002ea6:	b085      	sub	sp, #20
  if (getCurrentM0() > 6.0 || getCurrentM1() > 6.0) {
 8002ea8:	f7fe f922 	bl	80010f0 <getCurrentM0>
 8002eac:	eeb1 8a08 	vmov.f32	s16, #24	; 0x40c00000  6.0
 8002eb0:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	f300 80c5 	bgt.w	8003046 <protect+0x1a6>
 8002ebc:	f7fe f934 	bl	8001128 <getCurrentM1>
 8002ec0:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8002ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec8:	f300 80bd 	bgt.w	8003046 <protect+0x1a6>
  if (enc_over_speed_cnt_error_flag) {
 8002ecc:	4bbc      	ldr	r3, [pc, #752]	; (80031c0 <protect+0x320>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f040 8116 	bne.w	8003102 <protect+0x262>
  if (getBatteryVoltage() < THR_BATTERY_UNVER_VOLTAGE) {
 8002ed6:	f7fe f8f3 	bl	80010c0 <getBatteryVoltage>
 8002eda:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8002ede:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee6:	f100 81c9 	bmi.w	800327c <protect+0x3dc>
  if (getBatteryVoltage() > THR_BATTERY_OVER_VOLTAGE) {
 8002eea:	f7fe f8e9 	bl	80010c0 <getBatteryVoltage>
 8002eee:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8002ef2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efa:	f300 817d 	bgt.w	80031f8 <protect+0x358>
  if (getTempM0() > THR_MOTOR_OVER_TEMPERATURE || getTempM1() > THR_MOTOR_OVER_TEMPERATURE) {
 8002efe:	f7fe f95f 	bl	80011c0 <getTempM0>
 8002f02:	2846      	cmp	r0, #70	; 0x46
 8002f04:	dc53      	bgt.n	8002fae <protect+0x10e>
 8002f06:	f7fe f92b 	bl	8001160 <getTempM1>
 8002f0a:	2846      	cmp	r0, #70	; 0x46
 8002f0c:	dc4f      	bgt.n	8002fae <protect+0x10e>
  if (pid[0].load_limit_cnt > MOTOR_OVER_LOAD_CNT_LIMIT || pid[1].load_limit_cnt > MOTOR_OVER_LOAD_CNT_LIMIT) {
 8002f0e:	4cad      	ldr	r4, [pc, #692]	; (80031c4 <protect+0x324>)
 8002f10:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f12:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002f16:	429a      	cmp	r2, r3
 8002f18:	dc03      	bgt.n	8002f22 <protect+0x82>
 8002f1a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f340 8145 	ble.w	80031ac <protect+0x30c>
    forceStopAllPwmOutputAndTimer();
 8002f22:	f001 ff09 	bl	8004d38 <forceStopAllPwmOutputAndTimer>
    p("over load!! %d %d", pid[0].load_limit_cnt, pid[1].load_limit_cnt);
 8002f26:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002f28:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f2a:	48a7      	ldr	r0, [pc, #668]	; (80031c8 <protect+0x328>)
    error_id = OVER_LOAD;
 8002f2c:	4fa7      	ldr	r7, [pc, #668]	; (80031cc <protect+0x32c>)
    p("over load!! %d %d", pid[0].load_limit_cnt, pid[1].load_limit_cnt);
 8002f2e:	f002 f893 	bl	8005058 <p>
    setLedBlue(false);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f7fe fca2 	bl	800187c <setLedBlue>
    setLedGreen(false);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fe fca7 	bl	800188c <setLedGreen>
    setLedRed(true);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f7fe fc94 	bl	800186c <setLedRed>
    if (pid[0].load_limit_cnt > pid[1].load_limit_cnt) {
 8002f44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f46:	6d63      	ldr	r3, [r4, #84]	; 0x54
    error_id = OVER_LOAD;
 8002f48:	2108      	movs	r1, #8
    if (pid[0].load_limit_cnt > pid[1].load_limit_cnt) {
 8002f4a:	429a      	cmp	r2, r3
    error_id = OVER_LOAD;
 8002f4c:	8039      	strh	r1, [r7, #0]
    if (pid[0].load_limit_cnt > pid[1].load_limit_cnt) {
 8002f4e:	f300 8131 	bgt.w	80031b4 <protect+0x314>
      error_value = pid[1].load_limit_cnt;
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      error_info = 1;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4e9c      	ldr	r6, [pc, #624]	; (80031d0 <protect+0x330>)
 8002f5e:	4d9d      	ldr	r5, [pc, #628]	; (80031d4 <protect+0x334>)
  while (power_enable_cnt > 0) {
 8002f60:	4c9d      	ldr	r4, [pc, #628]	; (80031d8 <protect+0x338>)
  p("reset!!!");
 8002f62:	489e      	ldr	r0, [pc, #632]	; (80031dc <protect+0x33c>)
 8002f64:	802b      	strh	r3, [r5, #0]
 8002f66:	edc6 7a00 	vstr	s15, [r6]
 8002f6a:	f002 f875 	bl	8005058 <p>
  while (power_enable_cnt > 0) {
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	b19b      	cbz	r3, 8002f9a <protect+0xfa>
    power_enable_cnt--;
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	6023      	str	r3, [r4, #0]
    sendCanData();
 8002f78:	f7ff febe 	bl	8002cf8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 8002f7c:	ed96 0a00 	vldr	s0, [r6]
 8002f80:	f9b5 2000 	ldrsh.w	r2, [r5]
 8002f84:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f7fe fb6d 	bl	8001668 <sendError>
    HAL_Delay(2);
 8002f8e:	2002      	movs	r0, #2
 8002f90:	f002 f952 	bl	8005238 <HAL_Delay>
  while (power_enable_cnt > 0) {
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1eb      	bne.n	8002f72 <protect+0xd2>
  HAL_Delay(2);
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	f002 f94c 	bl	8005238 <HAL_Delay>
}
 8002fa0:	b005      	add	sp, #20
 8002fa2:	ecbd 8b02 	vpop	{d8}
 8002fa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  HAL_NVIC_SystemReset();
 8002faa:	f003 bcfd 	b.w	80069a8 <HAL_NVIC_SystemReset>
    forceStopAllPwmOutputAndTimer();
 8002fae:	f001 fec3 	bl	8004d38 <forceStopAllPwmOutputAndTimer>
    p("OVER Motor temperature!! M0 : %3d M1 : %3d", getTempM0(), getTempM1());
 8002fb2:	f7fe f905 	bl	80011c0 <getTempM0>
 8002fb6:	9002      	str	r0, [sp, #8]
 8002fb8:	f7fe f8d2 	bl	8001160 <getTempM1>
 8002fbc:	9902      	ldr	r1, [sp, #8]
    error_id = MOTOR_OVER_HEAT;
 8002fbe:	4f83      	ldr	r7, [pc, #524]	; (80031cc <protect+0x32c>)
    p("OVER Motor temperature!! M0 : %3d M1 : %3d", getTempM0(), getTempM1());
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4887      	ldr	r0, [pc, #540]	; (80031e0 <protect+0x340>)
 8002fc4:	f002 f848 	bl	8005058 <p>
    setLedBlue(true);
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f7fe fc57 	bl	800187c <setLedBlue>
    setLedGreen(true);
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f7fe fc5c 	bl	800188c <setLedGreen>
    setLedRed(true);
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f7fe fc49 	bl	800186c <setLedRed>
    error_id = MOTOR_OVER_HEAT;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	803b      	strh	r3, [r7, #0]
    if (getTempM0() > getTempM1()) {
 8002fde:	f7fe f8ef 	bl	80011c0 <getTempM0>
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	f7fe f8bc 	bl	8001160 <getTempM1>
 8002fe8:	4284      	cmp	r4, r0
 8002fea:	f300 80d5 	bgt.w	8003198 <protect+0x2f8>
      error_info = 1;
 8002fee:	4d79      	ldr	r5, [pc, #484]	; (80031d4 <protect+0x334>)
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	802b      	strh	r3, [r5, #0]
      error_value = (float)getTempM1();
 8002ff4:	f7fe f8b4 	bl	8001160 <getTempM1>
 8002ff8:	ee07 0a90 	vmov	s15, r0
 8002ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      error_value = (float)getTempM0();
 8003000:	4e73      	ldr	r6, [pc, #460]	; (80031d0 <protect+0x330>)
  while (power_enable_cnt > 0) {
 8003002:	4c75      	ldr	r4, [pc, #468]	; (80031d8 <protect+0x338>)
  p("reset!!!");
 8003004:	4875      	ldr	r0, [pc, #468]	; (80031dc <protect+0x33c>)
      error_value = (float)getTempM0();
 8003006:	edc6 7a00 	vstr	s15, [r6]
  p("reset!!!");
 800300a:	f002 f825 	bl	8005058 <p>
  while (power_enable_cnt > 0) {
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	b19b      	cbz	r3, 800303a <protect+0x19a>
    power_enable_cnt--;
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	3b01      	subs	r3, #1
 8003016:	6023      	str	r3, [r4, #0]
    sendCanData();
 8003018:	f7ff fe6e 	bl	8002cf8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 800301c:	ed96 0a00 	vldr	s0, [r6]
 8003020:	f9b5 2000 	ldrsh.w	r2, [r5]
 8003024:	f9b7 1000 	ldrsh.w	r1, [r7]
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe fb1d 	bl	8001668 <sendError>
    HAL_Delay(2);
 800302e:	2002      	movs	r0, #2
 8003030:	f002 f902 	bl	8005238 <HAL_Delay>
  while (power_enable_cnt > 0) {
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1eb      	bne.n	8003012 <protect+0x172>
  HAL_Delay(2);
 800303a:	2002      	movs	r0, #2
 800303c:	f002 f8fc 	bl	8005238 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8003040:	f003 fcb2 	bl	80069a8 <HAL_NVIC_SystemReset>
}
 8003044:	e763      	b.n	8002f0e <protect+0x6e>
    forceStopAllPwmOutputAndTimer();
 8003046:	f001 fe77 	bl	8004d38 <forceStopAllPwmOutputAndTimer>
    p("over current!! : %+6.2f %+6.2f\n", getCurrentM0(), getCurrentM1());
 800304a:	f7fe f851 	bl	80010f0 <getCurrentM0>
 800304e:	ee10 4a10 	vmov	r4, s0
 8003052:	f7fe f869 	bl	8001128 <getCurrentM1>
 8003056:	4620      	mov	r0, r4
 8003058:	ee10 4a10 	vmov	r4, s0
 800305c:	f7fd fa74 	bl	8000548 <__aeabi_f2d>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4620      	mov	r0, r4
 8003066:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800306a:	f7fd fa6d 	bl	8000548 <__aeabi_f2d>
 800306e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003072:	e9cd 0100 	strd	r0, r1, [sp]
 8003076:	485b      	ldr	r0, [pc, #364]	; (80031e4 <protect+0x344>)
    error_id = OVER_CURRENT;
 8003078:	4f54      	ldr	r7, [pc, #336]	; (80031cc <protect+0x32c>)
    p("over current!! : %+6.2f %+6.2f\n", getCurrentM0(), getCurrentM1());
 800307a:	f001 ffed 	bl	8005058 <p>
    setLedBlue(false);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fe fbfc 	bl	800187c <setLedBlue>
    setLedGreen(true);
 8003084:	2001      	movs	r0, #1
 8003086:	f7fe fc01 	bl	800188c <setLedGreen>
    setLedRed(true);
 800308a:	2001      	movs	r0, #1
 800308c:	f7fe fbee 	bl	800186c <setLedRed>
    error_id = OVER_CURRENT;
 8003090:	2302      	movs	r3, #2
 8003092:	803b      	strh	r3, [r7, #0]
    if (getCurrentM0() > getCurrentM1()) {
 8003094:	f7fe f82c 	bl	80010f0 <getCurrentM0>
 8003098:	eeb0 8a40 	vmov.f32	s16, s0
 800309c:	f7fe f844 	bl	8001128 <getCurrentM1>
 80030a0:	eeb4 8ac0 	vcmpe.f32	s16, s0
 80030a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a8:	dc70      	bgt.n	800318c <protect+0x2ec>
      error_info = 1;
 80030aa:	4d4a      	ldr	r5, [pc, #296]	; (80031d4 <protect+0x334>)
 80030ac:	2301      	movs	r3, #1
 80030ae:	802b      	strh	r3, [r5, #0]
      error_value = getCurrentM1();
 80030b0:	f7fe f83a 	bl	8001128 <getCurrentM1>
      error_value = getCurrentM0();
 80030b4:	4e46      	ldr	r6, [pc, #280]	; (80031d0 <protect+0x330>)
  while (power_enable_cnt > 0) {
 80030b6:	4c48      	ldr	r4, [pc, #288]	; (80031d8 <protect+0x338>)
  p("reset!!!");
 80030b8:	4848      	ldr	r0, [pc, #288]	; (80031dc <protect+0x33c>)
      error_value = getCurrentM0();
 80030ba:	ed86 0a00 	vstr	s0, [r6]
  p("reset!!!");
 80030be:	f001 ffcb 	bl	8005058 <p>
  while (power_enable_cnt > 0) {
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	b19b      	cbz	r3, 80030ee <protect+0x24e>
    power_enable_cnt--;
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	6023      	str	r3, [r4, #0]
    sendCanData();
 80030cc:	f7ff fe14 	bl	8002cf8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 80030d0:	ed96 0a00 	vldr	s0, [r6]
 80030d4:	f9b5 2000 	ldrsh.w	r2, [r5]
 80030d8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fe fac3 	bl	8001668 <sendError>
    HAL_Delay(2);
 80030e2:	2002      	movs	r0, #2
 80030e4:	f002 f8a8 	bl	8005238 <HAL_Delay>
  while (power_enable_cnt > 0) {
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1eb      	bne.n	80030c6 <protect+0x226>
  HAL_Delay(2);
 80030ee:	2002      	movs	r0, #2
 80030f0:	f002 f8a2 	bl	8005238 <HAL_Delay>
  HAL_NVIC_SystemReset();
 80030f4:	f003 fc58 	bl	80069a8 <HAL_NVIC_SystemReset>
  if (enc_over_speed_cnt_error_flag) {
 80030f8:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <protect+0x320>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f43f aeea 	beq.w	8002ed6 <protect+0x36>
    forceStopAllPwmOutputAndTimer();
 8003102:	f001 fe19 	bl	8004d38 <forceStopAllPwmOutputAndTimer>
    p("encoder error!!! ENC M%d diff %5d", enc_over_speed_cnt_error_enc_idx, enc_over_speed_cnt_error_enc_cnt);
 8003106:	4c38      	ldr	r4, [pc, #224]	; (80031e8 <protect+0x348>)
 8003108:	4b38      	ldr	r3, [pc, #224]	; (80031ec <protect+0x34c>)
 800310a:	6821      	ldr	r1, [r4, #0]
 800310c:	4838      	ldr	r0, [pc, #224]	; (80031f0 <protect+0x350>)
 800310e:	681a      	ldr	r2, [r3, #0]
    error_id = ENC_ERROR;
 8003110:	4f2e      	ldr	r7, [pc, #184]	; (80031cc <protect+0x32c>)
    error_info = enc_over_speed_cnt_error_enc_idx;
 8003112:	4d30      	ldr	r5, [pc, #192]	; (80031d4 <protect+0x334>)
    error_value = motor_real[enc_over_speed_cnt_error_enc_idx].diff_cnt_max;
 8003114:	4e2e      	ldr	r6, [pc, #184]	; (80031d0 <protect+0x330>)
    p("encoder error!!! ENC M%d diff %5d", enc_over_speed_cnt_error_enc_idx, enc_over_speed_cnt_error_enc_cnt);
 8003116:	f001 ff9f 	bl	8005058 <p>
    setLedBlue(true);
 800311a:	2001      	movs	r0, #1
 800311c:	f7fe fbae 	bl	800187c <setLedBlue>
    setLedGreen(false);
 8003120:	2000      	movs	r0, #0
 8003122:	f7fe fbb3 	bl	800188c <setLedGreen>
    setLedRed(true);
 8003126:	2001      	movs	r0, #1
 8003128:	f7fe fba0 	bl	800186c <setLedRed>
    error_info = enc_over_speed_cnt_error_enc_idx;
 800312c:	6821      	ldr	r1, [r4, #0]
    error_value = motor_real[enc_over_speed_cnt_error_enc_idx].diff_cnt_max;
 800312e:	6823      	ldr	r3, [r4, #0]
 8003130:	4a30      	ldr	r2, [pc, #192]	; (80031f4 <protect+0x354>)
  while (power_enable_cnt > 0) {
 8003132:	4c29      	ldr	r4, [pc, #164]	; (80031d8 <protect+0x338>)
  p("reset!!!");
 8003134:	4829      	ldr	r0, [pc, #164]	; (80031dc <protect+0x33c>)
    error_info = enc_over_speed_cnt_error_enc_idx;
 8003136:	8029      	strh	r1, [r5, #0]
    error_value = motor_real[enc_over_speed_cnt_error_enc_idx].diff_cnt_max;
 8003138:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800313c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003140:	edd3 7a01 	vldr	s15, [r3, #4]
 8003144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    error_id = ENC_ERROR;
 8003148:	2310      	movs	r3, #16
 800314a:	803b      	strh	r3, [r7, #0]
    error_value = motor_real[enc_over_speed_cnt_error_enc_idx].diff_cnt_max;
 800314c:	edc6 7a00 	vstr	s15, [r6]
  p("reset!!!");
 8003150:	f001 ff82 	bl	8005058 <p>
  while (power_enable_cnt > 0) {
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	b19b      	cbz	r3, 8003180 <protect+0x2e0>
    power_enable_cnt--;
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	3b01      	subs	r3, #1
 800315c:	6023      	str	r3, [r4, #0]
    sendCanData();
 800315e:	f7ff fdcb 	bl	8002cf8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 8003162:	ed96 0a00 	vldr	s0, [r6]
 8003166:	f9b5 2000 	ldrsh.w	r2, [r5]
 800316a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800316e:	2000      	movs	r0, #0
 8003170:	f7fe fa7a 	bl	8001668 <sendError>
    HAL_Delay(2);
 8003174:	2002      	movs	r0, #2
 8003176:	f002 f85f 	bl	8005238 <HAL_Delay>
  while (power_enable_cnt > 0) {
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1eb      	bne.n	8003158 <protect+0x2b8>
  HAL_Delay(2);
 8003180:	2002      	movs	r0, #2
 8003182:	f002 f859 	bl	8005238 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8003186:	f003 fc0f 	bl	80069a8 <HAL_NVIC_SystemReset>
}
 800318a:	e6a4      	b.n	8002ed6 <protect+0x36>
      error_info = 0;
 800318c:	4d11      	ldr	r5, [pc, #68]	; (80031d4 <protect+0x334>)
 800318e:	2300      	movs	r3, #0
 8003190:	802b      	strh	r3, [r5, #0]
      error_value = getCurrentM0();
 8003192:	f7fd ffad 	bl	80010f0 <getCurrentM0>
 8003196:	e78d      	b.n	80030b4 <protect+0x214>
      error_info = 0;
 8003198:	4d0e      	ldr	r5, [pc, #56]	; (80031d4 <protect+0x334>)
 800319a:	2300      	movs	r3, #0
 800319c:	802b      	strh	r3, [r5, #0]
      error_value = (float)getTempM0();
 800319e:	f7fe f80f 	bl	80011c0 <getTempM0>
 80031a2:	ee07 0a90 	vmov	s15, r0
 80031a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031aa:	e729      	b.n	8003000 <protect+0x160>
}
 80031ac:	b005      	add	sp, #20
 80031ae:	ecbd 8b02 	vpop	{d8}
 80031b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      error_value = pid[0].load_limit_cnt;
 80031b4:	ee07 2a90 	vmov	s15, r2
      error_info = 0;
 80031b8:	2300      	movs	r3, #0
      error_value = pid[0].load_limit_cnt;
 80031ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031be:	e6cd      	b.n	8002f5c <protect+0xbc>
 80031c0:	20000434 	.word	0x20000434
 80031c4:	20000488 	.word	0x20000488
 80031c8:	0800dbd4 	.word	0x0800dbd4
 80031cc:	20000436 	.word	0x20000436
 80031d0:	2000043c 	.word	0x2000043c
 80031d4:	20000438 	.word	0x20000438
 80031d8:	200004e0 	.word	0x200004e0
 80031dc:	0800db28 	.word	0x0800db28
 80031e0:	0800dba8 	.word	0x0800dba8
 80031e4:	0800db34 	.word	0x0800db34
 80031e8:	20000430 	.word	0x20000430
 80031ec:	2000042c 	.word	0x2000042c
 80031f0:	0800db54 	.word	0x0800db54
 80031f4:	2000045c 	.word	0x2000045c
    setPwmAll(0);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f001 fd8d 	bl	8004d18 <setPwmAll>
    p("OVER voltage!! %6.3f", getBatteryVoltage());
 80031fe:	f7fd ff5f 	bl	80010c0 <getBatteryVoltage>
 8003202:	ee10 0a10 	vmov	r0, s0
 8003206:	f7fd f99f 	bl	8000548 <__aeabi_f2d>
 800320a:	460b      	mov	r3, r1
 800320c:	4602      	mov	r2, r0
 800320e:	483c      	ldr	r0, [pc, #240]	; (8003300 <protect+0x460>)
    error_id = OVER_VOLTAGE;
 8003210:	4f3c      	ldr	r7, [pc, #240]	; (8003304 <protect+0x464>)
    error_info = 0;
 8003212:	4d3d      	ldr	r5, [pc, #244]	; (8003308 <protect+0x468>)
    error_value = getBatteryVoltage();
 8003214:	4e3d      	ldr	r6, [pc, #244]	; (800330c <protect+0x46c>)
  while (power_enable_cnt > 0) {
 8003216:	4c3e      	ldr	r4, [pc, #248]	; (8003310 <protect+0x470>)
    p("OVER voltage!! %6.3f", getBatteryVoltage());
 8003218:	f001 ff1e 	bl	8005058 <p>
    setLedBlue(true);
 800321c:	2001      	movs	r0, #1
 800321e:	f7fe fb2d 	bl	800187c <setLedBlue>
    setLedGreen(false);
 8003222:	2000      	movs	r0, #0
 8003224:	f7fe fb32 	bl	800188c <setLedGreen>
    setLedRed(true);
 8003228:	2001      	movs	r0, #1
 800322a:	f7fe fb1f 	bl	800186c <setLedRed>
    error_info = 0;
 800322e:	2300      	movs	r3, #0
    error_id = OVER_VOLTAGE;
 8003230:	2220      	movs	r2, #32
    error_info = 0;
 8003232:	802b      	strh	r3, [r5, #0]
    error_id = OVER_VOLTAGE;
 8003234:	803a      	strh	r2, [r7, #0]
    error_value = getBatteryVoltage();
 8003236:	f7fd ff43 	bl	80010c0 <getBatteryVoltage>
  p("reset!!!");
 800323a:	4836      	ldr	r0, [pc, #216]	; (8003314 <protect+0x474>)
    error_value = getBatteryVoltage();
 800323c:	ed86 0a00 	vstr	s0, [r6]
  p("reset!!!");
 8003240:	f001 ff0a 	bl	8005058 <p>
  while (power_enable_cnt > 0) {
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	b19b      	cbz	r3, 8003270 <protect+0x3d0>
    power_enable_cnt--;
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	3b01      	subs	r3, #1
 800324c:	6023      	str	r3, [r4, #0]
    sendCanData();
 800324e:	f7ff fd53 	bl	8002cf8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 8003252:	ed96 0a00 	vldr	s0, [r6]
 8003256:	f9b5 2000 	ldrsh.w	r2, [r5]
 800325a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800325e:	2000      	movs	r0, #0
 8003260:	f7fe fa02 	bl	8001668 <sendError>
    HAL_Delay(2);
 8003264:	2002      	movs	r0, #2
 8003266:	f001 ffe7 	bl	8005238 <HAL_Delay>
  while (power_enable_cnt > 0) {
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1eb      	bne.n	8003248 <protect+0x3a8>
  HAL_Delay(2);
 8003270:	2002      	movs	r0, #2
 8003272:	f001 ffe1 	bl	8005238 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8003276:	f003 fb97 	bl	80069a8 <HAL_NVIC_SystemReset>
}
 800327a:	e640      	b.n	8002efe <protect+0x5e>
    forceStopAllPwmOutputAndTimer();
 800327c:	f001 fd5c 	bl	8004d38 <forceStopAllPwmOutputAndTimer>
    p("UNDER voltage!! %6.3f", getBatteryVoltage());
 8003280:	f7fd ff1e 	bl	80010c0 <getBatteryVoltage>
 8003284:	ee10 0a10 	vmov	r0, s0
 8003288:	f7fd f95e 	bl	8000548 <__aeabi_f2d>
 800328c:	460b      	mov	r3, r1
 800328e:	4602      	mov	r2, r0
 8003290:	4821      	ldr	r0, [pc, #132]	; (8003318 <protect+0x478>)
    error_id = UNDER_VOLTAGE;
 8003292:	4f1c      	ldr	r7, [pc, #112]	; (8003304 <protect+0x464>)
    error_info = 0;
 8003294:	4d1c      	ldr	r5, [pc, #112]	; (8003308 <protect+0x468>)
    error_value = getBatteryVoltage();
 8003296:	4e1d      	ldr	r6, [pc, #116]	; (800330c <protect+0x46c>)
  while (power_enable_cnt > 0) {
 8003298:	4c1d      	ldr	r4, [pc, #116]	; (8003310 <protect+0x470>)
    p("UNDER voltage!! %6.3f", getBatteryVoltage());
 800329a:	f001 fedd 	bl	8005058 <p>
    setLedBlue(true);
 800329e:	2001      	movs	r0, #1
 80032a0:	f7fe faec 	bl	800187c <setLedBlue>
    setLedGreen(false);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fe faf1 	bl	800188c <setLedGreen>
    setLedRed(true);
 80032aa:	2001      	movs	r0, #1
 80032ac:	f7fe fade 	bl	800186c <setLedRed>
    error_info = 0;
 80032b0:	2300      	movs	r3, #0
    error_id = UNDER_VOLTAGE;
 80032b2:	2201      	movs	r2, #1
    error_info = 0;
 80032b4:	802b      	strh	r3, [r5, #0]
    error_id = UNDER_VOLTAGE;
 80032b6:	803a      	strh	r2, [r7, #0]
    error_value = getBatteryVoltage();
 80032b8:	f7fd ff02 	bl	80010c0 <getBatteryVoltage>
  p("reset!!!");
 80032bc:	4815      	ldr	r0, [pc, #84]	; (8003314 <protect+0x474>)
    error_value = getBatteryVoltage();
 80032be:	ed86 0a00 	vstr	s0, [r6]
  p("reset!!!");
 80032c2:	f001 fec9 	bl	8005058 <p>
  while (power_enable_cnt > 0) {
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	b19b      	cbz	r3, 80032f2 <protect+0x452>
    power_enable_cnt--;
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	6023      	str	r3, [r4, #0]
    sendCanData();
 80032d0:	f7ff fd12 	bl	8002cf8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 80032d4:	ed96 0a00 	vldr	s0, [r6]
 80032d8:	f9b5 2000 	ldrsh.w	r2, [r5]
 80032dc:	f9b7 1000 	ldrsh.w	r1, [r7]
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fe f9c1 	bl	8001668 <sendError>
    HAL_Delay(2);
 80032e6:	2002      	movs	r0, #2
 80032e8:	f001 ffa6 	bl	8005238 <HAL_Delay>
  while (power_enable_cnt > 0) {
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1eb      	bne.n	80032ca <protect+0x42a>
  HAL_Delay(2);
 80032f2:	2002      	movs	r0, #2
 80032f4:	f001 ffa0 	bl	8005238 <HAL_Delay>
  HAL_NVIC_SystemReset();
 80032f8:	f003 fb56 	bl	80069a8 <HAL_NVIC_SystemReset>
}
 80032fc:	e5f5      	b.n	8002eea <protect+0x4a>
 80032fe:	bf00      	nop
 8003300:	0800db90 	.word	0x0800db90
 8003304:	20000436 	.word	0x20000436
 8003308:	20000438 	.word	0x20000438
 800330c:	2000043c 	.word	0x2000043c
 8003310:	200004e0 	.word	0x200004e0
 8003314:	0800db28 	.word	0x0800db28
 8003318:	0800db78 	.word	0x0800db78
 800331c:	00000000 	.word	0x00000000

08003320 <SystemClock_Config>:
{
 8003320:	b510      	push	{r4, lr}
 8003322:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003324:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003326:	223c      	movs	r2, #60	; 0x3c
 8003328:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800332a:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800332e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003332:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003336:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003338:	9101      	str	r1, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800333a:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800333c:	f008 f94a 	bl	800b5d4 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003340:	2201      	movs	r2, #1
 8003342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003346:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800334a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800334c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800334e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003352:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003356:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003358:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800335c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800335e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003360:	f003 feea 	bl	8007138 <HAL_RCC_OscConfig>
 8003364:	b108      	cbz	r0, 800336a <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003366:	b672      	cpsid	i
  while (1) {
 8003368:	e7fe      	b.n	8003368 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800336a:	220f      	movs	r2, #15
 800336c:	4603      	mov	r3, r0
 800336e:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003370:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003372:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003376:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003378:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800337c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800337e:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003380:	f004 f9a2 	bl	80076c8 <HAL_RCC_ClockConfig>
 8003384:	4603      	mov	r3, r0
 8003386:	b108      	cbz	r0, 800338c <SystemClock_Config+0x6c>
 8003388:	b672      	cpsid	i
  while (1) {
 800338a:	e7fe      	b.n	800338a <SystemClock_Config+0x6a>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800338c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80033b8 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_TIM8 | RCC_PERIPHCLK_ADC34;
 8003390:	f243 1101 	movw	r1, #12545	; 0x3101
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003394:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8003398:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800339a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_TIM8 | RCC_PERIPHCLK_ADC34;
 800339e:	9110      	str	r1, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033a0:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80033a2:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80033a4:	f004 fada 	bl	800795c <HAL_RCCEx_PeriphCLKConfig>
 80033a8:	b108      	cbz	r0, 80033ae <SystemClock_Config+0x8e>
 80033aa:	b672      	cpsid	i
  while (1) {
 80033ac:	e7fe      	b.n	80033ac <SystemClock_Config+0x8c>
}
 80033ae:	b020      	add	sp, #128	; 0x80
 80033b0:	bd10      	pop	{r4, pc}
 80033b2:	bf00      	nop
 80033b4:	f3af 8000 	nop.w
	...

080033c0 <main>:
{
 80033c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c4:	ed2d 8b04 	vpush	{d8-d9}
 80033c8:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80033ca:	f001 ff11 	bl	80051f0 <HAL_Init>
  SystemClock_Config();
 80033ce:	f7ff ffa7 	bl	8003320 <SystemClock_Config>
  MX_GPIO_Init();
 80033d2:	f7fe fa63 	bl	800189c <MX_GPIO_Init>
  MX_DMA_Init();
 80033d6:	f7fe f96b 	bl	80016b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80033da:	f7fd fc55 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 80033de:	f7fd fce3 	bl	8000da8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80033e2:	f7fd fd55 	bl	8000e90 <MX_ADC3_Init>
  MX_CAN_Init();
 80033e6:	f7fd ffd1 	bl	800138c <MX_CAN_Init>
  MX_SPI1_Init();
 80033ea:	f000 fee9 	bl	80041c0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80033ee:	f001 fa63 	bl	80048b8 <MX_TIM1_Init>
  MX_TIM8_Init();
 80033f2:	f001 fae9 	bl	80049c8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80033f6:	f001 fd63 	bl	8004ec0 <MX_USART1_UART_Init>
  initFirstSin();
 80033fa:	f001 fb6d 	bl	8004ad8 <initFirstSin>
  setLedRed(true);
 80033fe:	2001      	movs	r0, #1
 8003400:	f7fe fa34 	bl	800186c <setLedRed>
  setLedGreen(true);
 8003404:	2001      	movs	r0, #1
 8003406:	f7fe fa41 	bl	800188c <setLedGreen>
  setLedBlue(true);
 800340a:	2001      	movs	r0, #1
 800340c:	f7fe fa36 	bl	800187c <setLedBlue>
  HAL_Delay(100);
 8003410:	2064      	movs	r0, #100	; 0x64
 8003412:	f001 ff11 	bl	8005238 <HAL_Delay>
  loadFlashData();
 8003416:	f7fe f9e5 	bl	80017e4 <loadFlashData>
  p("\n\n** Orion VV driver V4 start! **\n");
 800341a:	48d2      	ldr	r0, [pc, #840]	; (8003764 <main+0x3a4>)
 800341c:	f001 fe1c 	bl	8005058 <p>
    pid[i].pid_kp = 0.2;
 8003420:	49d1      	ldr	r1, [pc, #836]	; (8003768 <main+0x3a8>)
 8003422:	4ad2      	ldr	r2, [pc, #840]	; (800376c <main+0x3ac>)
 8003424:	604a      	str	r2, [r1, #4]
    pid[i].pid_ki = 0.3;
 8003426:	4ad2      	ldr	r2, [pc, #840]	; (8003770 <main+0x3b0>)
 8003428:	60ca      	str	r2, [r1, #12]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800342a:	48d2      	ldr	r0, [pc, #840]	; (8003774 <main+0x3b4>)
    pid[i].error_integral_limit = 4.0;
 800342c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
    pid[i].pid_kd = 0.0;
 8003430:	2300      	movs	r3, #0
    pid[i].error_integral_limit = 4.0;
 8003432:	61ca      	str	r2, [r1, #28]
    pid[i].diff_voltage_limit = 5.0;  // 2.0 -> 4.0 -> 6.0
 8003434:	4ad0      	ldr	r2, [pc, #832]	; (8003778 <main+0x3b8>)
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003436:	ed90 8a03 	vldr	s16, [r0, #12]
    pid[i].pid_kd = 0.0;
 800343a:	608b      	str	r3, [r1, #8]
    pid[i].diff_voltage_limit = 5.0;  // 2.0 -> 4.0 -> 6.0
 800343c:	624a      	str	r2, [r1, #36]	; 0x24
    cmd[i].speed = 0;
 800343e:	49cf      	ldr	r1, [pc, #828]	; (800377c <main+0x3bc>)
    enc_offset[i].zero_calib = flash.calib[i];
 8003440:	6800      	ldr	r0, [r0, #0]
    cmd[i].speed = 0;
 8003442:	600b      	str	r3, [r1, #0]
    cmd[i].timeout_cnt = -1;
 8003444:	f04f 32ff 	mov.w	r2, #4294967295
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003448:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    cmd[i].timeout_cnt = -1;
 800344c:	610a      	str	r2, [r1, #16]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800344e:	eeb4 8ae7 	vcmpe.f32	s16, s15
    enc_offset[i].zero_calib = flash.calib[i];
 8003452:	4acb      	ldr	r2, [pc, #812]	; (8003780 <main+0x3c0>)
    cmd[i].out_v = 0;
 8003454:	608b      	str	r3, [r1, #8]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cmd[i].out_v_final = 0;
 800345a:	60cb      	str	r3, [r1, #12]
    enc_offset[i].zero_calib = flash.calib[i];
 800345c:	6050      	str	r0, [r2, #4]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800345e:	dd07      	ble.n	8003470 <main+0xb0>
 8003460:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003464:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	f100 865c 	bmi.w	8004128 <main+0xd68>
      motor_param[i].voltage_per_rps = V_PER_RPS_DEFAULT;
 8003470:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8003784 <main+0x3c4>
    pid[i].pid_kd = 0.0;
 8003474:	49bc      	ldr	r1, [pc, #752]	; (8003768 <main+0x3a8>)
    cmd[i].speed = 0;
 8003476:	4ec1      	ldr	r6, [pc, #772]	; (800377c <main+0x3bc>)
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003478:	4dbe      	ldr	r5, [pc, #760]	; (8003774 <main+0x3b4>)
 800347a:	4cc3      	ldr	r4, [pc, #780]	; (8003788 <main+0x3c8>)
 800347c:	edd5 8a04 	vldr	s17, [r5, #16]
    enc_offset[i].zero_calib = flash.calib[i];
 8003480:	686d      	ldr	r5, [r5, #4]
 8003482:	ed84 7a00 	vstr	s14, [r4]
    pid[i].pid_kd = 0.0;
 8003486:	2300      	movs	r3, #0
 8003488:	634b      	str	r3, [r1, #52]	; 0x34
    cmd[i].speed = 0;
 800348a:	6173      	str	r3, [r6, #20]
    cmd[i].out_v = 0;
 800348c:	61f3      	str	r3, [r6, #28]
    cmd[i].out_v_final = 0;
 800348e:	6233      	str	r3, [r6, #32]
    pid[i].pid_kp = 0.2;
 8003490:	4bb6      	ldr	r3, [pc, #728]	; (800376c <main+0x3ac>)
 8003492:	630b      	str	r3, [r1, #48]	; 0x30
    pid[i].pid_ki = 0.3;
 8003494:	4bb6      	ldr	r3, [pc, #728]	; (8003770 <main+0x3b0>)
 8003496:	638b      	str	r3, [r1, #56]	; 0x38
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003498:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    pid[i].error_integral_limit = 4.0;
 800349c:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80034a0:	648b      	str	r3, [r1, #72]	; 0x48
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 80034a2:	eef4 8ae7 	vcmpe.f32	s17, s15
    pid[i].diff_voltage_limit = 5.0;  // 2.0 -> 4.0 -> 6.0
 80034a6:	4bb4      	ldr	r3, [pc, #720]	; (8003778 <main+0x3b8>)
 80034a8:	650b      	str	r3, [r1, #80]	; 0x50
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cmd[i].timeout_cnt = -1;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
    enc_offset[i].zero_calib = flash.calib[i];
 80034b2:	60d5      	str	r5, [r2, #12]
    cmd[i].timeout_cnt = -1;
 80034b4:	6273      	str	r3, [r6, #36]	; 0x24
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 80034b6:	dd07      	ble.n	80034c8 <main+0x108>
 80034b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034bc:	eef4 8ac7 	vcmpe.f32	s17, s14
 80034c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c4:	f100 862c 	bmi.w	8004120 <main+0xd60>
      motor_param[i].voltage_per_rps = V_PER_RPS_DEFAULT;
 80034c8:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003784 <main+0x3c4>
 80034cc:	ed84 7a02 	vstr	s14, [r4, #8]
  p("CAN ADDR 0x%03x\nenc offset M0 %6.3f M1 %6.3f\nRPS/V M0 %6.3f M1 %6.3f\n", flash.board_id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]);
 80034d0:	f7fd f83a 	bl	8000548 <__aeabi_f2d>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	ee18 0a90 	vmov	r0, s17
 80034dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80034e0:	f7fd f832 	bl	8000548 <__aeabi_f2d>
 80034e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80034e8:	ee18 0a10 	vmov	r0, s16
 80034ec:	f7fd f82c 	bl	8000548 <__aeabi_f2d>
 80034f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80034f4:	4628      	mov	r0, r5
 80034f6:	f7fd f827 	bl	8000548 <__aeabi_f2d>
 80034fa:	e9cd 0100 	strd	r0, r1, [sp]
 80034fe:	4d9d      	ldr	r5, [pc, #628]	; (8003774 <main+0x3b4>)
 8003500:	48a2      	ldr	r0, [pc, #648]	; (800378c <main+0x3cc>)
 8003502:	68a9      	ldr	r1, [r5, #8]
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 8003504:	ed9f 9aa2 	vldr	s18, [pc, #648]	; 8003790 <main+0x3d0>
  p("CAN ADDR 0x%03x\nenc offset M0 %6.3f M1 %6.3f\nRPS/V M0 %6.3f M1 %6.3f\n", flash.board_id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]);
 8003508:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800350c:	f001 fda4 	bl	8005058 <p>
  HAL_Delay(1);
 8003510:	2001      	movs	r0, #1
 8003512:	f001 fe91 	bl	8005238 <HAL_Delay>
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 8003516:	edd5 7a03 	vldr	s15, [r5, #12]
 800351a:	ee67 7a89 	vmul.f32	s15, s15, s18
  for (int i = 0; i < 2; i++) {
 800351e:	2600      	movs	r6, #0
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 8003520:	ee17 0a90 	vmov	r0, s15
 8003524:	f7fd f810 	bl	8000548 <__aeabi_f2d>
 8003528:	edd5 7a04 	vldr	s15, [r5, #16]
 800352c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	ee17 0a90 	vmov	r0, s15
 8003538:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800353c:	f7fd f804 	bl	8000548 <__aeabi_f2d>
 8003540:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003544:	e9cd 0100 	strd	r0, r1, [sp]
 8003548:	4892      	ldr	r0, [pc, #584]	; (8003794 <main+0x3d4>)
 800354a:	f001 fd85 	bl	8005058 <p>
  __HAL_SPI_ENABLE(&hspi1);
 800354e:	4b92      	ldr	r3, [pc, #584]	; (8003798 <main+0x3d8>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003550:	4892      	ldr	r0, [pc, #584]	; (800379c <main+0x3dc>)
  __HAL_SPI_ENABLE(&hspi1);
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	6813      	ldr	r3, [r2, #0]
 8003556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800355a:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800355c:	2180      	movs	r1, #128	; 0x80
 800355e:	2201      	movs	r2, #1
 8003560:	f003 fde4 	bl	800712c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003564:	2201      	movs	r2, #1
 8003566:	2140      	movs	r1, #64	; 0x40
 8003568:	488c      	ldr	r0, [pc, #560]	; (800379c <main+0x3dc>)
 800356a:	f003 fddf 	bl	800712c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800356e:	2001      	movs	r0, #1
 8003570:	f001 fe62 	bl	8005238 <HAL_Delay>
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 8003574:	ed95 6a03 	vldr	s12, [r5, #12]
  motor_param[1].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[1] * SPEED_REAL_LIMIT_GAIN;
 8003578:	edd5 6a04 	vldr	s13, [r5, #16]
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 800357c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80037a0 <main+0x3e0>
    p("0x%02x ", readRegisterMA702(i, 1));  // Z offset-H
 8003580:	4d88      	ldr	r5, [pc, #544]	; (80037a4 <main+0x3e4>)
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 8003582:	eec7 7a06 	vdiv.f32	s15, s14, s12
  motor_param[1].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[1] * SPEED_REAL_LIMIT_GAIN;
 8003586:	ee87 8a26 	vdiv.f32	s16, s14, s13
  p("output voltage limit : %5.2f %5.2f\n", motor_param[0].output_voltage_limit, motor_param[1].output_voltage_limit);
 800358a:	ee17 0a90 	vmov	r0, s15
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 800358e:	edc4 7a01 	vstr	s15, [r4, #4]
  motor_param[1].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[1] * SPEED_REAL_LIMIT_GAIN;
 8003592:	ed84 8a03 	vstr	s16, [r4, #12]
  p("output voltage limit : %5.2f %5.2f\n", motor_param[0].output_voltage_limit, motor_param[1].output_voltage_limit);
 8003596:	f7fc ffd7 	bl	8000548 <__aeabi_f2d>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	ee18 0a10 	vmov	r0, s16
 80035a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80035a6:	f7fc ffcf 	bl	8000548 <__aeabi_f2d>
 80035aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035ae:	e9cd 0100 	strd	r0, r1, [sp]
 80035b2:	487d      	ldr	r0, [pc, #500]	; (80037a8 <main+0x3e8>)
 80035b4:	f001 fd50 	bl	8005058 <p>
  HAL_Delay(1);
 80035b8:	2001      	movs	r0, #1
 80035ba:	f001 fe3d 	bl	8005238 <HAL_Delay>
  p("0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x09 0x0E 0x10 0x1B\n");
 80035be:	487b      	ldr	r0, [pc, #492]	; (80037ac <main+0x3ec>)
 80035c0:	f001 fd4a 	bl	8005058 <p>
    HAL_Delay(10);
 80035c4:	b2f4      	uxtb	r4, r6
 80035c6:	200a      	movs	r0, #10
 80035c8:	f001 fe36 	bl	8005238 <HAL_Delay>
    writeRegisterMA702(i, 5, 0xFF);
 80035cc:	22ff      	movs	r2, #255	; 0xff
 80035ce:	2105      	movs	r1, #5
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 fec5 	bl	8004360 <writeRegisterMA702>
    HAL_Delay(10);
 80035d6:	200a      	movs	r0, #10
 80035d8:	f001 fe2e 	bl	8005238 <HAL_Delay>
    writeRegisterMA702(i, 6, 0x1C);
 80035dc:	221c      	movs	r2, #28
 80035de:	2106      	movs	r1, #6
 80035e0:	4620      	mov	r0, r4
 80035e2:	f000 febd 	bl	8004360 <writeRegisterMA702>
    HAL_Delay(10);
 80035e6:	200a      	movs	r0, #10
 80035e8:	f001 fe26 	bl	8005238 <HAL_Delay>
    writeRegisterMA702(i, 0x10, 0x9C);
 80035ec:	229c      	movs	r2, #156	; 0x9c
 80035ee:	2110      	movs	r1, #16
 80035f0:	4620      	mov	r0, r4
 80035f2:	f000 feb5 	bl	8004360 <writeRegisterMA702>
    HAL_Delay(10);
 80035f6:	200a      	movs	r0, #10
 80035f8:	f001 fe1e 	bl	8005238 <HAL_Delay>
    writeRegisterMA702(i, 0x1B, 0x43);
 80035fc:	2243      	movs	r2, #67	; 0x43
 80035fe:	211b      	movs	r1, #27
 8003600:	4620      	mov	r0, r4
 8003602:	f000 fead 	bl	8004360 <writeRegisterMA702>
    HAL_Delay(10);
 8003606:	200a      	movs	r0, #10
 8003608:	f001 fe16 	bl	8005238 <HAL_Delay>
    writeRegisterMA702(i, 0x0E, 0x77);
 800360c:	2277      	movs	r2, #119	; 0x77
 800360e:	210e      	movs	r1, #14
 8003610:	4620      	mov	r0, r4
 8003612:	f000 fea5 	bl	8004360 <writeRegisterMA702>
    HAL_Delay(10);
 8003616:	200a      	movs	r0, #10
 8003618:	f001 fe0e 	bl	8005238 <HAL_Delay>
    p("reg = 0x%02x", readRegisterMA702(i, 0));  // Z offset-L
 800361c:	2100      	movs	r1, #0
 800361e:	4620      	mov	r0, r4
 8003620:	f000 fe38 	bl	8004294 <readRegisterMA702>
 8003624:	4601      	mov	r1, r0
 8003626:	4862      	ldr	r0, [pc, #392]	; (80037b0 <main+0x3f0>)
 8003628:	f001 fd16 	bl	8005058 <p>
    HAL_Delay(1);
 800362c:	2001      	movs	r0, #1
 800362e:	f001 fe03 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 1));  // Z offset-H
 8003632:	2101      	movs	r1, #1
 8003634:	4620      	mov	r0, r4
 8003636:	f000 fe2d 	bl	8004294 <readRegisterMA702>
 800363a:	4601      	mov	r1, r0
 800363c:	4628      	mov	r0, r5
 800363e:	f001 fd0b 	bl	8005058 <p>
    HAL_Delay(1);
 8003642:	2001      	movs	r0, #1
 8003644:	f001 fdf8 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 2));  // BCT (off-axis param)
 8003648:	2102      	movs	r1, #2
 800364a:	4620      	mov	r0, r4
 800364c:	f000 fe22 	bl	8004294 <readRegisterMA702>
 8003650:	4601      	mov	r1, r0
 8003652:	4628      	mov	r0, r5
 8003654:	f001 fd00 	bl	8005058 <p>
    HAL_Delay(1);
 8003658:	2001      	movs	r0, #1
 800365a:	f001 fded 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 3));  // ETY,ETX
 800365e:	2103      	movs	r1, #3
 8003660:	4620      	mov	r0, r4
 8003662:	f000 fe17 	bl	8004294 <readRegisterMA702>
 8003666:	4601      	mov	r1, r0
 8003668:	4628      	mov	r0, r5
 800366a:	f001 fcf5 	bl	8005058 <p>
    HAL_Delay(1);
 800366e:	2001      	movs	r0, #1
 8003670:	f001 fde2 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 4));  // PPT-L/ILIP
 8003674:	2104      	movs	r1, #4
 8003676:	4620      	mov	r0, r4
 8003678:	f000 fe0c 	bl	8004294 <readRegisterMA702>
 800367c:	4601      	mov	r1, r0
 800367e:	4628      	mov	r0, r5
 8003680:	f001 fcea 	bl	8005058 <p>
    HAL_Delay(1);
 8003684:	2001      	movs	r0, #1
 8003686:	f001 fdd7 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 5));  // PPT-H
 800368a:	2105      	movs	r1, #5
 800368c:	4620      	mov	r0, r4
 800368e:	f000 fe01 	bl	8004294 <readRegisterMA702>
 8003692:	4601      	mov	r1, r0
 8003694:	4628      	mov	r0, r5
 8003696:	f001 fcdf 	bl	8005058 <p>
    HAL_Delay(1);
 800369a:	2001      	movs	r0, #1
 800369c:	f001 fdcc 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 6));  // MGLT/MGHT
 80036a0:	2106      	movs	r1, #6
 80036a2:	4620      	mov	r0, r4
 80036a4:	f000 fdf6 	bl	8004294 <readRegisterMA702>
 80036a8:	4601      	mov	r1, r0
 80036aa:	4628      	mov	r0, r5
 80036ac:	f001 fcd4 	bl	8005058 <p>
    HAL_Delay(1);
 80036b0:	2001      	movs	r0, #1
 80036b2:	f001 fdc1 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 9));  // RD
 80036b6:	2109      	movs	r1, #9
 80036b8:	4620      	mov	r0, r4
 80036ba:	f000 fdeb 	bl	8004294 <readRegisterMA702>
 80036be:	4601      	mov	r1, r0
 80036c0:	4628      	mov	r0, r5
 80036c2:	f001 fcc9 	bl	8005058 <p>
    HAL_Delay(1);
 80036c6:	2001      	movs	r0, #1
 80036c8:	f001 fdb6 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 0xE));  // FW
 80036cc:	210e      	movs	r1, #14
 80036ce:	4620      	mov	r0, r4
 80036d0:	f000 fde0 	bl	8004294 <readRegisterMA702>
 80036d4:	4601      	mov	r1, r0
 80036d6:	4628      	mov	r0, r5
 80036d8:	f001 fcbe 	bl	8005058 <p>
    HAL_Delay(1);
 80036dc:	2001      	movs	r0, #1
 80036de:	f001 fdab 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 0x10));  // HYS
 80036e2:	2110      	movs	r1, #16
 80036e4:	4620      	mov	r0, r4
 80036e6:	f000 fdd5 	bl	8004294 <readRegisterMA702>
 80036ea:	4601      	mov	r1, r0
 80036ec:	4628      	mov	r0, r5
 80036ee:	f001 fcb3 	bl	8005058 <p>
    HAL_Delay(1);
 80036f2:	2001      	movs	r0, #1
 80036f4:	f001 fda0 	bl	8005238 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 0x1B));  // MGH&L
 80036f8:	211b      	movs	r1, #27
 80036fa:	4620      	mov	r0, r4
 80036fc:	f000 fdca 	bl	8004294 <readRegisterMA702>
 8003700:	4601      	mov	r1, r0
 8003702:	4628      	mov	r0, r5
 8003704:	f001 fca8 	bl	8005058 <p>
    HAL_Delay(1);
 8003708:	2001      	movs	r0, #1
 800370a:	f001 fd95 	bl	8005238 <HAL_Delay>
    p("\n");
 800370e:	4829      	ldr	r0, [pc, #164]	; (80037b4 <main+0x3f4>)
 8003710:	f001 fca2 	bl	8005058 <p>
  for (int i = 0; i < 2; i++) {
 8003714:	2e00      	cmp	r6, #0
 8003716:	f000 84f5 	beq.w	8004104 <main+0xd44>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800371a:	2100      	movs	r1, #0
 800371c:	4826      	ldr	r0, [pc, #152]	; (80037b8 <main+0x3f8>)
 800371e:	f001 ffeb 	bl	80056f8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003722:	2100      	movs	r1, #0
 8003724:	4825      	ldr	r0, [pc, #148]	; (80037bc <main+0x3fc>)
 8003726:	f001 ffe7 	bl	80056f8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800372a:	2100      	movs	r1, #0
 800372c:	4824      	ldr	r0, [pc, #144]	; (80037c0 <main+0x400>)
 800372e:	f001 ffe3 	bl	80056f8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8003732:	4821      	ldr	r0, [pc, #132]	; (80037b8 <main+0x3f8>)
 8003734:	f001 ff48 	bl	80055c8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8003738:	4820      	ldr	r0, [pc, #128]	; (80037bc <main+0x3fc>)
 800373a:	f001 ff45 	bl	80055c8 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800373e:	4820      	ldr	r0, [pc, #128]	; (80037c0 <main+0x400>)
 8003740:	f001 ff42 	bl	80055c8 <HAL_ADC_Start>
  htim1.Instance->CNT = 0;
 8003744:	481f      	ldr	r0, [pc, #124]	; (80037c4 <main+0x404>)
  htim8.Instance->CNT = 10;
 8003746:	4b20      	ldr	r3, [pc, #128]	; (80037c8 <main+0x408>)
  htim1.Instance->CNT = 0;
 8003748:	6802      	ldr	r2, [r0, #0]
  htim8.Instance->CNT = 10;
 800374a:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CNT = 0;
 800374c:	2400      	movs	r4, #0
 800374e:	6254      	str	r4, [r2, #36]	; 0x24
  htim8.Instance->CNT = 10;
 8003750:	220a      	movs	r2, #10
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim1);
 8003754:	f004 fb08 	bl	8007d68 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8003758:	4632      	mov	r2, r6
 800375a:	491c      	ldr	r1, [pc, #112]	; (80037cc <main+0x40c>)
 800375c:	481c      	ldr	r0, [pc, #112]	; (80037d0 <main+0x410>)
 800375e:	f005 fe9d 	bl	800949c <HAL_UART_Receive_IT>
 8003762:	e037      	b.n	80037d4 <main+0x414>
 8003764:	0800dbe8 	.word	0x0800dbe8
 8003768:	20000488 	.word	0x20000488
 800376c:	3e4ccccd 	.word	0x3e4ccccd
 8003770:	3e99999a 	.word	0x3e99999a
 8003774:	20000340 	.word	0x20000340
 8003778:	40a00000 	.word	0x40a00000
 800377c:	200003f4 	.word	0x200003f4
 8003780:	2000041c 	.word	0x2000041c
 8003784:	3e19999a 	.word	0x3e19999a
 8003788:	2000044c 	.word	0x2000044c
 800378c:	0800dc0c 	.word	0x0800dc0c
 8003790:	42700000 	.word	0x42700000
 8003794:	0800dc54 	.word	0x0800dc54
 8003798:	2000051c 	.word	0x2000051c
 800379c:	48000400 	.word	0x48000400
 80037a0:	42960000 	.word	0x42960000
 80037a4:	0800dcdc 	.word	0x0800dcdc
 80037a8:	0800dc70 	.word	0x0800dc70
 80037ac:	0800dc94 	.word	0x0800dc94
 80037b0:	0800dccc 	.word	0x0800dccc
 80037b4:	0800dad4 	.word	0x0800dad4
 80037b8:	20000224 	.word	0x20000224
 80037bc:	20000274 	.word	0x20000274
 80037c0:	200002c4 	.word	0x200002c4
 80037c4:	200005cc 	.word	0x200005cc
 80037c8:	20000618 	.word	0x20000618
 80037cc:	2000050c 	.word	0x2000050c
 80037d0:	200019cc 	.word	0x200019cc
  p("waiting startup voltage.... : %3.1fV\n", THR_BATTERY_UNVER_VOLTAGE + 2);
 80037d4:	4ba8      	ldr	r3, [pc, #672]	; (8003a78 <main+0x6b8>)
 80037d6:	48a9      	ldr	r0, [pc, #676]	; (8003a7c <main+0x6bc>)
 80037d8:	2200      	movs	r2, #0
    if (getBatteryVoltage() > THR_BATTERY_UNVER_VOLTAGE + 2.0) {
 80037da:	eeb3 8a06 	vmov.f32	s16, #54	; 0x41b00000  22.0
  p("waiting startup voltage.... : %3.1fV\n", THR_BATTERY_UNVER_VOLTAGE + 2);
 80037de:	f001 fc3b 	bl	8005058 <p>
    HAL_Delay(1);
 80037e2:	2001      	movs	r0, #1
 80037e4:	f001 fd28 	bl	8005238 <HAL_Delay>
    if (getBatteryVoltage() > THR_BATTERY_UNVER_VOLTAGE + 2.0) {
 80037e8:	f7fd fc6a 	bl	80010c0 <getBatteryVoltage>
 80037ec:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      over_startup_voltage = 0;
 80037f4:	bfd8      	it	le
 80037f6:	2400      	movle	r4, #0
    if (getBatteryVoltage() > THR_BATTERY_UNVER_VOLTAGE + 2.0) {
 80037f8:	ddf3      	ble.n	80037e2 <main+0x422>
      over_startup_voltage++;
 80037fa:	3401      	adds	r4, #1
  while (over_startup_voltage < 500) {
 80037fc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8003800:	d1ef      	bne.n	80037e2 <main+0x422>
  p("ADC : %5d %5d GD %4.2f Batt %4.2f\n", adc_raw.cs_m0, adc_raw.cs_m1, getGateDriverDCDCVoltage(), getBatteryVoltage());
 8003802:	4c9f      	ldr	r4, [pc, #636]	; (8003a80 <main+0x6c0>)
 8003804:	e9d4 6200 	ldrd	r6, r2, [r4]
 8003808:	9206      	str	r2, [sp, #24]
 800380a:	f7fd fd09 	bl	8001220 <getGateDriverDCDCVoltage>
 800380e:	ee10 5a10 	vmov	r5, s0
 8003812:	f7fd fc55 	bl	80010c0 <getBatteryVoltage>
 8003816:	ee10 0a10 	vmov	r0, s0
 800381a:	f7fc fe95 	bl	8000548 <__aeabi_f2d>
 800381e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003822:	4628      	mov	r0, r5
 8003824:	f7fc fe90 	bl	8000548 <__aeabi_f2d>
 8003828:	9a06      	ldr	r2, [sp, #24]
 800382a:	e9cd 0100 	strd	r0, r1, [sp]
 800382e:	4895      	ldr	r0, [pc, #596]	; (8003a84 <main+0x6c4>)
 8003830:	4631      	mov	r1, r6
 8003832:	f001 fc11 	bl	8005058 <p>
  if (adc_raw.cs_m0 < 100 && adc_raw.cs_m1 < 100) {
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	2b63      	cmp	r3, #99	; 0x63
 800383a:	f300 846d 	bgt.w	8004118 <main+0xd58>
 800383e:	6863      	ldr	r3, [r4, #4]
 8003840:	2b63      	cmp	r3, #99	; 0x63
 8003842:	bfd4      	ite	le
 8003844:	2300      	movle	r3, #0
 8003846:	2301      	movgt	r3, #1
 8003848:	02db      	lsls	r3, r3, #11
  HAL_TIM_PWM_Init(&htim8);
 800384a:	488f      	ldr	r0, [pc, #572]	; (8003a88 <main+0x6c8>)
 800384c:	61e3      	str	r3, [r4, #28]
 800384e:	f004 fadd 	bl	8007e0c <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim1);
 8003852:	488e      	ldr	r0, [pc, #568]	; (8003a8c <main+0x6cc>)
 8003854:	4d8e      	ldr	r5, [pc, #568]	; (8003a90 <main+0x6d0>)
 8003856:	4c8f      	ldr	r4, [pc, #572]	; (8003a94 <main+0x6d4>)
 8003858:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8003aa4 <main+0x6e4>
 800385c:	4f8e      	ldr	r7, [pc, #568]	; (8003a98 <main+0x6d8>)
 800385e:	4e8f      	ldr	r6, [pc, #572]	; (8003a9c <main+0x6dc>)
 8003860:	f004 fad4 	bl	8007e0c <HAL_TIM_PWM_Init>
  setPwmAll(TIM_PWM_CENTER);
 8003864:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003868:	f001 fa56 	bl	8004d18 <setPwmAll>
 800386c:	2301      	movs	r3, #1
 800386e:	9309      	str	r3, [sp, #36]	; 0x24
 8003870:	461a      	mov	r2, r3
    switch (turn_on_channel) {
 8003872:	1e93      	subs	r3, r2, #2
 8003874:	3a01      	subs	r2, #1
 8003876:	9208      	str	r2, [sp, #32]
 8003878:	2b04      	cmp	r3, #4
 800387a:	f200 8463 	bhi.w	8004144 <main+0xd84>
 800387e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003882:	00f1      	.short	0x00f1
 8003884:	00df00e8 	.word	0x00df00e8
 8003888:	000500a0 	.word	0x000500a0
        HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);  // M1 high & low
 800388c:	2108      	movs	r1, #8
 800388e:	487e      	ldr	r0, [pc, #504]	; (8003a88 <main+0x6c8>)
 8003890:	f004 fe9e 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);  // M0 high & low
 8003894:	487d      	ldr	r0, [pc, #500]	; (8003a8c <main+0x6cc>)
 8003896:	2108      	movs	r1, #8
 8003898:	f004 fe9a 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
    interrupt_timer_cnt = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	602b      	str	r3, [r5, #0]
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 80038a0:	682b      	ldr	r3, [r5, #0]
 80038a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038a6:	f080 8103 	bcs.w	8003ab0 <main+0x6f0>
        p("Current MM0 %+6.3f M1 %+6.3f ch:%d\n", getCurrentM0(), getCurrentM1(), turn_on_channel);
 80038aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8003aa8 <main+0x6e8>
  p("reset!!!");
 80038ae:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8003aac <main+0x6ec>
      if (isNotZeroCurrent() || getBatteryVoltage() < THR_BATTERY_UNVER_VOLTAGE) {
 80038b2:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 80038b6:	f7fd fd2f 	bl	8001318 <isNotZeroCurrent>
 80038ba:	b930      	cbnz	r0, 80038ca <main+0x50a>
 80038bc:	f7fd fc00 	bl	80010c0 <getBatteryVoltage>
 80038c0:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80038c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c8:	d53f      	bpl.n	800394a <main+0x58a>
        power_enable_cnt = 500;
 80038ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038ce:	6023      	str	r3, [r4, #0]
        forceStopAllPwmOutputAndTimer();
 80038d0:	f001 fa32 	bl	8004d38 <forceStopAllPwmOutputAndTimer>
        p("Current MM0 %+6.3f M1 %+6.3f ch:%d\n", getCurrentM0(), getCurrentM1(), turn_on_channel);
 80038d4:	f7fd fc0c 	bl	80010f0 <getCurrentM0>
 80038d8:	ee10 9a10 	vmov	r9, s0
 80038dc:	f7fd fc24 	bl	8001128 <getCurrentM1>
 80038e0:	4648      	mov	r0, r9
 80038e2:	ee10 9a10 	vmov	r9, s0
 80038e6:	f7fc fe2f 	bl	8000548 <__aeabi_f2d>
 80038ea:	460a      	mov	r2, r1
 80038ec:	4601      	mov	r1, r0
 80038ee:	4613      	mov	r3, r2
 80038f0:	460a      	mov	r2, r1
 80038f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80038f6:	4648      	mov	r0, r9
 80038f8:	9b08      	ldr	r3, [sp, #32]
 80038fa:	9302      	str	r3, [sp, #8]
 80038fc:	f7fc fe24 	bl	8000548 <__aeabi_f2d>
 8003900:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003904:	e9cd 0100 	strd	r0, r1, [sp]
 8003908:	4658      	mov	r0, fp
 800390a:	f001 fba5 	bl	8005058 <p>
  p("reset!!!");
 800390e:	4650      	mov	r0, sl
 8003910:	f001 fba2 	bl	8005058 <p>
  while (power_enable_cnt > 0) {
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	b19b      	cbz	r3, 8003940 <main+0x580>
    power_enable_cnt--;
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	3b01      	subs	r3, #1
 800391c:	6023      	str	r3, [r4, #0]
    sendCanData();
 800391e:	f7ff f9eb 	bl	8002cf8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 8003922:	ed98 0a00 	vldr	s0, [r8]
 8003926:	f9b7 2000 	ldrsh.w	r2, [r7]
 800392a:	f9b6 1000 	ldrsh.w	r1, [r6]
 800392e:	2000      	movs	r0, #0
 8003930:	f7fd fe9a 	bl	8001668 <sendError>
    HAL_Delay(2);
 8003934:	2002      	movs	r0, #2
 8003936:	f001 fc7f 	bl	8005238 <HAL_Delay>
  while (power_enable_cnt > 0) {
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1eb      	bne.n	8003918 <main+0x558>
  HAL_Delay(2);
 8003940:	2002      	movs	r0, #2
 8003942:	f001 fc79 	bl	8005238 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8003946:	f003 f82f 	bl	80069a8 <HAL_NVIC_SystemReset>
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 800394a:	682b      	ldr	r3, [r5, #0]
 800394c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003950:	d3b1      	bcc.n	80038b6 <main+0x4f6>
    p("ch:%2d CurrentCheck OK!! M0 %+6.3f M1 %+6.3f Battery %5.2f GD %5.2f\n", turn_on_channel, getCurrentM0(), getCurrentM1(), getBatteryVoltage(), getGateDriverDCDCVoltage());
 8003952:	f7fd fbcd 	bl	80010f0 <getCurrentM0>
 8003956:	ed8d 0a06 	vstr	s0, [sp, #24]
 800395a:	f7fd fbe5 	bl	8001128 <getCurrentM1>
 800395e:	ee10 aa10 	vmov	sl, s0
 8003962:	f7fd fbad 	bl	80010c0 <getBatteryVoltage>
 8003966:	ee10 ba10 	vmov	fp, s0
 800396a:	f7fd fc59 	bl	8001220 <getGateDriverDCDCVoltage>
 800396e:	9806      	ldr	r0, [sp, #24]
 8003970:	ed8d 0a06 	vstr	s0, [sp, #24]
 8003974:	f7fc fde8 	bl	8000548 <__aeabi_f2d>
 8003978:	9b06      	ldr	r3, [sp, #24]
 800397a:	460a      	mov	r2, r1
 800397c:	4601      	mov	r1, r0
 800397e:	4618      	mov	r0, r3
 8003980:	4613      	mov	r3, r2
 8003982:	460a      	mov	r2, r1
 8003984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003988:	f7fc fdde 	bl	8000548 <__aeabi_f2d>
 800398c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003990:	4658      	mov	r0, fp
 8003992:	f7fc fdd9 	bl	8000548 <__aeabi_f2d>
 8003996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800399a:	4650      	mov	r0, sl
 800399c:	f7fc fdd4 	bl	8000548 <__aeabi_f2d>
 80039a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80039a4:	e9cd 0100 	strd	r0, r1, [sp]
 80039a8:	9908      	ldr	r1, [sp, #32]
 80039aa:	483d      	ldr	r0, [pc, #244]	; (8003aa0 <main+0x6e0>)
 80039ac:	f001 fb54 	bl	8005058 <p>
  while (turn_on_channel < 6) {
 80039b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	f000 80a8 	beq.w	8003b08 <main+0x748>
 80039b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ba:	3301      	adds	r3, #1
 80039bc:	9309      	str	r3, [sp, #36]	; 0x24
 80039be:	461a      	mov	r2, r3
 80039c0:	e757      	b.n	8003872 <main+0x4b2>
        HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);  // M1 high & low
 80039c2:	2104      	movs	r1, #4
 80039c4:	4830      	ldr	r0, [pc, #192]	; (8003a88 <main+0x6c8>)
 80039c6:	f004 fe03 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);  // M0 high & low
 80039ca:	4830      	ldr	r0, [pc, #192]	; (8003a8c <main+0x6cc>)
 80039cc:	2104      	movs	r1, #4
 80039ce:	f004 fdff 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
    interrupt_timer_cnt = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	602b      	str	r3, [r5, #0]
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 80039d6:	682b      	ldr	r3, [r5, #0]
 80039d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039dc:	f4ff af65 	bcc.w	80038aa <main+0x4ea>
    p("ch:%2d CurrentCheck OK!! M0 %+6.3f M1 %+6.3f Battery %5.2f GD %5.2f\n", turn_on_channel, getCurrentM0(), getCurrentM1(), getBatteryVoltage(), getGateDriverDCDCVoltage());
 80039e0:	f7fd fb86 	bl	80010f0 <getCurrentM0>
 80039e4:	ed8d 0a06 	vstr	s0, [sp, #24]
 80039e8:	f7fd fb9e 	bl	8001128 <getCurrentM1>
 80039ec:	ee10 ba10 	vmov	fp, s0
 80039f0:	f7fd fb66 	bl	80010c0 <getBatteryVoltage>
 80039f4:	ee10 aa10 	vmov	sl, s0
 80039f8:	f7fd fc12 	bl	8001220 <getGateDriverDCDCVoltage>
 80039fc:	9806      	ldr	r0, [sp, #24]
 80039fe:	ed8d 0a06 	vstr	s0, [sp, #24]
 8003a02:	f7fc fda1 	bl	8000548 <__aeabi_f2d>
 8003a06:	9b06      	ldr	r3, [sp, #24]
 8003a08:	460a      	mov	r2, r1
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	4613      	mov	r3, r2
 8003a10:	460a      	mov	r2, r1
 8003a12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a16:	f7fc fd97 	bl	8000548 <__aeabi_f2d>
 8003a1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a1e:	4650      	mov	r0, sl
 8003a20:	f7fc fd92 	bl	8000548 <__aeabi_f2d>
 8003a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a28:	4658      	mov	r0, fp
 8003a2a:	f7fc fd8d 	bl	8000548 <__aeabi_f2d>
 8003a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003a32:	e9cd 0100 	strd	r0, r1, [sp]
 8003a36:	9908      	ldr	r1, [sp, #32]
 8003a38:	4819      	ldr	r0, [pc, #100]	; (8003aa0 <main+0x6e0>)
 8003a3a:	f001 fb0d 	bl	8005058 <p>
  while (turn_on_channel < 6) {
 8003a3e:	e7bb      	b.n	80039b8 <main+0x5f8>
        HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);  // M1 high & low
 8003a40:	2100      	movs	r1, #0
 8003a42:	4811      	ldr	r0, [pc, #68]	; (8003a88 <main+0x6c8>)
 8003a44:	f004 fdc4 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);  // M0 high & low
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4810      	ldr	r0, [pc, #64]	; (8003a8c <main+0x6cc>)
 8003a4c:	f004 fdc0 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
        break;
 8003a50:	e7bf      	b.n	80039d2 <main+0x612>
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);  // M0 low
 8003a52:	2108      	movs	r1, #8
 8003a54:	480c      	ldr	r0, [pc, #48]	; (8003a88 <main+0x6c8>)
 8003a56:	f004 fa61 	bl	8007f1c <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // M1 low
 8003a5a:	2108      	movs	r1, #8
 8003a5c:	480b      	ldr	r0, [pc, #44]	; (8003a8c <main+0x6cc>)
 8003a5e:	f004 fa5d 	bl	8007f1c <HAL_TIM_PWM_Start>
        break;
 8003a62:	e7b6      	b.n	80039d2 <main+0x612>
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);  // M0 low
 8003a64:	2104      	movs	r1, #4
 8003a66:	4808      	ldr	r0, [pc, #32]	; (8003a88 <main+0x6c8>)
 8003a68:	f004 fa58 	bl	8007f1c <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // M1 low
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	4807      	ldr	r0, [pc, #28]	; (8003a8c <main+0x6cc>)
 8003a70:	f004 fa54 	bl	8007f1c <HAL_TIM_PWM_Start>
        break;
 8003a74:	e7ad      	b.n	80039d2 <main+0x612>
 8003a76:	bf00      	nop
 8003a78:	40360000 	.word	0x40360000
 8003a7c:	0800dce4 	.word	0x0800dce4
 8003a80:	20000200 	.word	0x20000200
 8003a84:	0800dd0c 	.word	0x0800dd0c
 8003a88:	20000618 	.word	0x20000618
 8003a8c:	200005cc 	.word	0x200005cc
 8003a90:	20000440 	.word	0x20000440
 8003a94:	200004e0 	.word	0x200004e0
 8003a98:	20000438 	.word	0x20000438
 8003a9c:	20000436 	.word	0x20000436
 8003aa0:	0800dd54 	.word	0x0800dd54
 8003aa4:	2000043c 	.word	0x2000043c
 8003aa8:	0800dd30 	.word	0x0800dd30
 8003aac:	0800db28 	.word	0x0800db28
    p("ch:%2d CurrentCheck OK!! M0 %+6.3f M1 %+6.3f Battery %5.2f GD %5.2f\n", turn_on_channel, getCurrentM0(), getCurrentM1(), getBatteryVoltage(), getGateDriverDCDCVoltage());
 8003ab0:	f7fd fb1e 	bl	80010f0 <getCurrentM0>
 8003ab4:	ee10 7a10 	vmov	r7, s0
 8003ab8:	f7fd fb36 	bl	8001128 <getCurrentM1>
 8003abc:	ee10 4a10 	vmov	r4, s0
 8003ac0:	f7fd fafe 	bl	80010c0 <getBatteryVoltage>
 8003ac4:	ee10 6a10 	vmov	r6, s0
 8003ac8:	f7fd fbaa 	bl	8001220 <getGateDriverDCDCVoltage>
 8003acc:	4638      	mov	r0, r7
 8003ace:	ee10 7a10 	vmov	r7, s0
 8003ad2:	f7fc fd39 	bl	8000548 <__aeabi_f2d>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4638      	mov	r0, r7
 8003adc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003ae0:	f7fc fd32 	bl	8000548 <__aeabi_f2d>
 8003ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f7fc fd2d 	bl	8000548 <__aeabi_f2d>
 8003aee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003af2:	4620      	mov	r0, r4
 8003af4:	f7fc fd28 	bl	8000548 <__aeabi_f2d>
 8003af8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003afc:	e9cd 0100 	strd	r0, r1, [sp]
 8003b00:	48d1      	ldr	r0, [pc, #836]	; (8003e48 <main+0xa88>)
 8003b02:	2105      	movs	r1, #5
 8003b04:	f001 faa8 	bl	8005058 <p>
  resumePwmOutput();
 8003b08:	f001 f9a0 	bl	8004e4c <resumePwmOutput>
  if (isPushedSW1()) {
 8003b0c:	f7fd fe7e 	bl	800180c <isPushedSW1>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	f000 82fa 	beq.w	800410a <main+0xd4a>
    flash.board_id = 0;
 8003b16:	2000      	movs	r0, #0
    flash.board_id = 1;
 8003b18:	4bcc      	ldr	r3, [pc, #816]	; (8003e4c <main+0xa8c>)
 8003b1a:	461c      	mov	r4, r3
 8003b1c:	6098      	str	r0, [r3, #8]
    writeCanBoardID(flash.board_id);
 8003b1e:	f7fd fe3b 	bl	8001798 <writeCanBoardID>
    p("sed board id %d\n", flash.board_id);
 8003b22:	48cb      	ldr	r0, [pc, #812]	; (8003e50 <main+0xa90>)
 8003b24:	68a1      	ldr	r1, [r4, #8]
 8003b26:	f001 fa97 	bl	8005058 <p>
    HAL_Delay(1000);
 8003b2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b2e:	f001 fb83 	bl	8005238 <HAL_Delay>
  if (isPushedSW4()) {
 8003b32:	f7fd fe8f 	bl	8001854 <isPushedSW4>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	f040 82fa 	bne.w	8004130 <main+0xd70>
  CAN_Filter_Init(flash.board_id);
 8003b3c:	4bc3      	ldr	r3, [pc, #780]	; (8003e4c <main+0xa8c>)
 8003b3e:	f8df 833c 	ldr.w	r8, [pc, #828]	; 8003e7c <main+0xabc>
 8003b42:	8918      	ldrh	r0, [r3, #8]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003b44:	ed9f 8ac3 	vldr	s16, [pc, #780]	; 8003e54 <main+0xa94>
 8003b48:	4fc3      	ldr	r7, [pc, #780]	; (8003e58 <main+0xa98>)
 8003b4a:	4cc4      	ldr	r4, [pc, #784]	; (8003e5c <main+0xa9c>)
 8003b4c:	4ec4      	ldr	r6, [pc, #784]	; (8003e60 <main+0xaa0>)
 8003b4e:	f8df a330 	ldr.w	sl, [pc, #816]	; 8003e80 <main+0xac0>
 8003b52:	f8df 9330 	ldr.w	r9, [pc, #816]	; 8003e84 <main+0xac4>
        manual_offset_radian = 0;
 8003b56:	eddf 8ac3 	vldr	s17, [pc, #780]	; 8003e64 <main+0xaa4>
  CAN_Filter_Init(flash.board_id);
 8003b5a:	f7fd fc8b 	bl	8001474 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8003b5e:	48c2      	ldr	r0, [pc, #776]	; (8003e68 <main+0xaa8>)
 8003b60:	f002 fc58 	bl	8006414 <HAL_CAN_Start>
  p("start main loop!\n");
 8003b64:	48c1      	ldr	r0, [pc, #772]	; (8003e6c <main+0xaac>)
 8003b66:	f001 fa77 	bl	8005058 <p>
  setLedRed(false);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7fd fe7e 	bl	800186c <setLedRed>
  setLedGreen(false);
 8003b70:	2000      	movs	r0, #0
 8003b72:	f7fd fe8b 	bl	800188c <setLedGreen>
  setLedBlue(false);
 8003b76:	2000      	movs	r0, #0
 8003b78:	f7fd fe80 	bl	800187c <setLedBlue>
  if (uart_rx_flag) {
 8003b7c:	f898 3000 	ldrb.w	r3, [r8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d17e      	bne.n	8003c82 <main+0x8c2>
  int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 8003b84:	6872      	ldr	r2, [r6, #4]
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	eba3 0b02 	sub.w	fp, r3, r2
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8003b8c:	f51b 4f00 	cmn.w	fp, #32768	; 0x8000
 8003b90:	f280 8122 	bge.w	8003dd8 <main+0xa18>
    temp += ENC_CNT_MAX;
 8003b94:	f50b 3b80 	add.w	fp, fp, #65536	; 0x10000
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003b98:	ee07 ba90 	vmov	s15, fp
 8003b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8003ba0:	6863      	ldr	r3, [r4, #4]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003ba2:	ee67 7a88 	vmul.f32	s15, s15, s16
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8003ba6:	2b00      	cmp	r3, #0
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003ba8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8003bac:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8003bb0:	bfb8      	it	lt
 8003bb2:	425b      	neglt	r3, r3
 8003bb4:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 8003bb8:	428b      	cmp	r3, r1
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003bba:	ee17 3a10 	vmov	r3, s14
    motor_real[motor].diff_cnt_max = temp;
 8003bbe:	bfb8      	it	lt
 8003bc0:	f8c4 b004 	strlt.w	fp, [r4, #4]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	bfb8      	it	lt
 8003bc8:	425b      	neglt	r3, r3
 8003bca:	2b4b      	cmp	r3, #75	; 0x4b
 8003bcc:	dd04      	ble.n	8003bd8 <main+0x818>
 8003bce:	f8da 3000 	ldr.w	r3, [sl]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8289 	beq.w	80040ea <main+0xd2a>
  motor_real[motor].pre_enc_cnt_raw = ma702[motor].enc_raw;
 8003bd8:	6022      	str	r2, [r4, #0]
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8003bda:	edc4 7a02 	vstr	s15, [r4, #8]
  motor_real[motor].pre_rps = motor_real[motor].rps;
 8003bde:	edc4 7a03 	vstr	s15, [r4, #12]
  int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 8003be2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003be4:	6963      	ldr	r3, [r4, #20]
 8003be6:	eba3 0b02 	sub.w	fp, r3, r2
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8003bea:	f51b 4f00 	cmn.w	fp, #32768	; 0x8000
 8003bee:	f280 80ed 	bge.w	8003dcc <main+0xa0c>
    temp += ENC_CNT_MAX;
 8003bf2:	f50b 3b80 	add.w	fp, fp, #65536	; 0x10000
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003bf6:	ee07 ba90 	vmov	s15, fp
 8003bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8003bfe:	69a3      	ldr	r3, [r4, #24]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003c00:	ee67 7a88 	vmul.f32	s15, s15, s16
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8003c04:	2b00      	cmp	r3, #0
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003c06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8003c0a:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8003c0e:	bfb8      	it	lt
 8003c10:	425b      	neglt	r3, r3
 8003c12:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 8003c16:	428b      	cmp	r3, r1
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003c18:	ee17 3a10 	vmov	r3, s14
    motor_real[motor].diff_cnt_max = temp;
 8003c1c:	bfb8      	it	lt
 8003c1e:	f8c4 b018 	strlt.w	fp, [r4, #24]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bfb8      	it	lt
 8003c26:	425b      	neglt	r3, r3
 8003c28:	2b4b      	cmp	r3, #75	; 0x4b
 8003c2a:	dd04      	ble.n	8003c36 <main+0x876>
 8003c2c:	f8da 3000 	ldr.w	r3, [sl]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 824d 	beq.w	80040d0 <main+0xd10>
  motor_real[motor].pre_enc_cnt_raw = ma702[motor].enc_raw;
 8003c36:	6162      	str	r2, [r4, #20]
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8003c38:	edc4 7a07 	vstr	s15, [r4, #28]
  motor_real[motor].pre_rps = motor_real[motor].rps;
 8003c3c:	edc4 7a08 	vstr	s15, [r4, #32]
    sendCanData();
 8003c40:	f7ff f85a 	bl	8002cf8 <sendCanData>
    if (calib_process.enc_calib_cnt != 0) {
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f040 823f 	bne.w	80040ca <main+0xd0a>
    } else if (calib_process.motor_calib_cnt != 0) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 8238 	beq.w	80040c4 <main+0xd04>
      motorCalibrationMode();
 8003c54:	f7fe fd18 	bl	8002688 <motorCalibrationMode>
    protect();
 8003c58:	f7ff f922 	bl	8002ea0 <protect>
    setLedRed(true);
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fd fe05 	bl	800186c <setLedRed>
    main_loop_remain_counter = INTERRUPT_KHZ_1MS - interrupt_timer_cnt;
 8003c62:	682b      	ldr	r3, [r5, #0]
 8003c64:	f1c3 0314 	rsb	r3, r3, #20
 8003c68:	f8c9 3000 	str.w	r3, [r9]
    while (interrupt_timer_cnt <= INTERRUPT_KHZ_1MS)
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	2b14      	cmp	r3, #20
 8003c70:	d9fc      	bls.n	8003c6c <main+0x8ac>
    interrupt_timer_cnt = 0;
 8003c72:	2000      	movs	r0, #0
 8003c74:	6028      	str	r0, [r5, #0]
    setLedRed(false);
 8003c76:	f7fd fdf9 	bl	800186c <setLedRed>
  if (uart_rx_flag) {
 8003c7a:	f898 3000 	ldrb.w	r3, [r8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d080      	beq.n	8003b84 <main+0x7c4>
    uart_rx_flag = false;
 8003c82:	2300      	movs	r3, #0
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8003c84:	497a      	ldr	r1, [pc, #488]	; (8003e70 <main+0xab0>)
 8003c86:	487b      	ldr	r0, [pc, #492]	; (8003e74 <main+0xab4>)
    uart_rx_flag = false;
 8003c88:	f888 3000 	strb.w	r3, [r8]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f005 fc05 	bl	800949c <HAL_UART_Receive_IT>
    switch (uart_rx_buf[0]) {
 8003c92:	4b77      	ldr	r3, [pc, #476]	; (8003e70 <main+0xab0>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	3b30      	subs	r3, #48	; 0x30
 8003c98:	2b49      	cmp	r3, #73	; 0x49
 8003c9a:	f63f af73 	bhi.w	8003b84 <main+0x7c4>
 8003c9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <main+0x8e4>)
 8003ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca4:	080040b9 	.word	0x080040b9
 8003ca8:	08003b85 	.word	0x08003b85
 8003cac:	08003b85 	.word	0x08003b85
 8003cb0:	08003b85 	.word	0x08003b85
 8003cb4:	08003b85 	.word	0x08003b85
 8003cb8:	08003b85 	.word	0x08003b85
 8003cbc:	08003b85 	.word	0x08003b85
 8003cc0:	08003b85 	.word	0x08003b85
 8003cc4:	08003b85 	.word	0x08003b85
 8003cc8:	08003b85 	.word	0x08003b85
 8003ccc:	08003b85 	.word	0x08003b85
 8003cd0:	08003b85 	.word	0x08003b85
 8003cd4:	08003b85 	.word	0x08003b85
 8003cd8:	08003b85 	.word	0x08003b85
 8003cdc:	08003b85 	.word	0x08003b85
 8003ce0:	08003b85 	.word	0x08003b85
 8003ce4:	08003b85 	.word	0x08003b85
 8003ce8:	08003b85 	.word	0x08003b85
 8003cec:	08003b85 	.word	0x08003b85
 8003cf0:	08003b85 	.word	0x08003b85
 8003cf4:	08003b85 	.word	0x08003b85
 8003cf8:	08003b85 	.word	0x08003b85
 8003cfc:	08003b85 	.word	0x08003b85
 8003d00:	08003b85 	.word	0x08003b85
 8003d04:	08003b85 	.word	0x08003b85
 8003d08:	08003b85 	.word	0x08003b85
 8003d0c:	08003b85 	.word	0x08003b85
 8003d10:	08003b85 	.word	0x08003b85
 8003d14:	08003b85 	.word	0x08003b85
 8003d18:	08003b85 	.word	0x08003b85
 8003d1c:	08003b85 	.word	0x08003b85
 8003d20:	08003b85 	.word	0x08003b85
 8003d24:	08003b85 	.word	0x08003b85
 8003d28:	08003b85 	.word	0x08003b85
 8003d2c:	08003b85 	.word	0x08003b85
 8003d30:	08003b85 	.word	0x08003b85
 8003d34:	08003b85 	.word	0x08003b85
 8003d38:	08003b85 	.word	0x08003b85
 8003d3c:	08003b85 	.word	0x08003b85
 8003d40:	08003b85 	.word	0x08003b85
 8003d44:	08003b85 	.word	0x08003b85
 8003d48:	08003b85 	.word	0x08003b85
 8003d4c:	08003b85 	.word	0x08003b85
 8003d50:	08003b85 	.word	0x08003b85
 8003d54:	08003b85 	.word	0x08003b85
 8003d58:	08003b85 	.word	0x08003b85
 8003d5c:	08003b85 	.word	0x08003b85
 8003d60:	08003b85 	.word	0x08003b85
 8003d64:	08003b85 	.word	0x08003b85
 8003d68:	080040a5 	.word	0x080040a5
 8003d6c:	08003b85 	.word	0x08003b85
 8003d70:	08004075 	.word	0x08004075
 8003d74:	08004047 	.word	0x08004047
 8003d78:	08004001 	.word	0x08004001
 8003d7c:	08003fd3 	.word	0x08003fd3
 8003d80:	08003fa5 	.word	0x08003fa5
 8003d84:	08003f77 	.word	0x08003f77
 8003d88:	08003b85 	.word	0x08003b85
 8003d8c:	08003b85 	.word	0x08003b85
 8003d90:	08003b85 	.word	0x08003b85
 8003d94:	08003b85 	.word	0x08003b85
 8003d98:	08003b85 	.word	0x08003b85
 8003d9c:	08003f57 	.word	0x08003f57
 8003da0:	08003b85 	.word	0x08003b85
 8003da4:	08003b85 	.word	0x08003b85
 8003da8:	08003f2d 	.word	0x08003f2d
 8003dac:	08003ee7 	.word	0x08003ee7
 8003db0:	08003ecf 	.word	0x08003ecf
 8003db4:	08003e89 	.word	0x08003e89
 8003db8:	08003b85 	.word	0x08003b85
 8003dbc:	08003b85 	.word	0x08003b85
 8003dc0:	08003e13 	.word	0x08003e13
 8003dc4:	08003b85 	.word	0x08003b85
 8003dc8:	08003de5 	.word	0x08003de5
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 8003dcc:	f5bb 4f00 	cmp.w	fp, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 8003dd0:	bfc8      	it	gt
 8003dd2:	f5ab 3b80 	subgt.w	fp, fp, #65536	; 0x10000
 8003dd6:	e70e      	b.n	8003bf6 <main+0x836>
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 8003dd8:	f5bb 4f00 	cmp.w	fp, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 8003ddc:	bfc8      	it	gt
 8003dde:	f5ab 3b80 	subgt.w	fp, fp, #65536	; 0x10000
 8003de2:	e6d9      	b.n	8003b98 <main+0x7d8>
        motor_real[0].k += 0.1;
 8003de4:	6920      	ldr	r0, [r4, #16]
 8003de6:	f7fc fbaf 	bl	8000548 <__aeabi_f2d>
 8003dea:	a315      	add	r3, pc, #84	; (adr r3, 8003e40 <main+0xa80>)
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f7fc fa4c 	bl	800028c <__adddf3>
 8003df4:	f7fc fef8 	bl	8000be8 <__aeabi_d2f>
 8003df8:	6120      	str	r0, [r4, #16]
        motor_real[1].k += 0.1;
 8003dfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003dfc:	f7fc fba4 	bl	8000548 <__aeabi_f2d>
 8003e00:	a30f      	add	r3, pc, #60	; (adr r3, 8003e40 <main+0xa80>)
 8003e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e06:	f7fc fa41 	bl	800028c <__adddf3>
 8003e0a:	f7fc feed 	bl	8000be8 <__aeabi_d2f>
 8003e0e:	6260      	str	r0, [r4, #36]	; 0x24
        break;
 8003e10:	e6b8      	b.n	8003b84 <main+0x7c4>
        cmd[0].speed += 0.5;
 8003e12:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <main+0xab8>)
 8003e14:	ed93 7a00 	vldr	s14, [r3]
        cmd[1].speed += 0.5;
 8003e18:	edd3 7a05 	vldr	s15, [r3, #20]
        cmd[0].speed += 0.5;
 8003e1c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003e20:	ee37 7a26 	vadd.f32	s14, s14, s13
        cmd[1].speed += 0.5;
 8003e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
        cmd[1].speed -= 0.5;
 8003e28:	461a      	mov	r2, r3
        cmd[0].speed -= 0.5;
 8003e2a:	ed83 7a00 	vstr	s14, [r3]
        cmd[1].speed -= 0.5;
 8003e2e:	edc3 7a05 	vstr	s15, [r3, #20]
        cmd[0].timeout_cnt = -1;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
 8003e36:	6113      	str	r3, [r2, #16]
        cmd[1].timeout_cnt = -1;
 8003e38:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 8003e3a:	e6a3      	b.n	8003b84 <main+0x7c4>
 8003e3c:	f3af 8000 	nop.w
 8003e40:	9999999a 	.word	0x9999999a
 8003e44:	3fb99999 	.word	0x3fb99999
 8003e48:	0800dd54 	.word	0x0800dd54
 8003e4c:	20000340 	.word	0x20000340
 8003e50:	0800dd9c 	.word	0x0800dd9c
 8003e54:	3c7a0000 	.word	0x3c7a0000
 8003e58:	200003b8 	.word	0x200003b8
 8003e5c:	2000045c 	.word	0x2000045c
 8003e60:	20000580 	.word	0x20000580
 8003e64:	00000000 	.word	0x00000000
 8003e68:	20000318 	.word	0x20000318
 8003e6c:	0800ddc8 	.word	0x0800ddc8
 8003e70:	2000050c 	.word	0x2000050c
 8003e74:	200019cc 	.word	0x200019cc
 8003e78:	200003f4 	.word	0x200003f4
 8003e7c:	20000516 	.word	0x20000516
 8003e80:	20000004 	.word	0x20000004
 8003e84:	20000444 	.word	0x20000444
        pid[0].pid_kd += 0.1;
 8003e88:	4bbb      	ldr	r3, [pc, #748]	; (8004178 <main+0xdb8>)
 8003e8a:	6898      	ldr	r0, [r3, #8]
 8003e8c:	f7fc fb5c 	bl	8000548 <__aeabi_f2d>
 8003e90:	a3b5      	add	r3, pc, #724	; (adr r3, 8004168 <main+0xda8>)
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f7fc f9f9 	bl	800028c <__adddf3>
 8003e9a:	f7fc fea5 	bl	8000be8 <__aeabi_d2f>
 8003e9e:	4bb6      	ldr	r3, [pc, #728]	; (8004178 <main+0xdb8>)
 8003ea0:	4683      	mov	fp, r0
 8003ea2:	6098      	str	r0, [r3, #8]
        pid[1].pid_kd += 0.1;
 8003ea4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003ea6:	f7fc fb4f 	bl	8000548 <__aeabi_f2d>
 8003eaa:	a3af      	add	r3, pc, #700	; (adr r3, 8004168 <main+0xda8>)
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f7fc f9ec 	bl	800028c <__adddf3>
        pid[1].pid_kd -= 0.1;
 8003eb4:	f7fc fe98 	bl	8000be8 <__aeabi_d2f>
 8003eb8:	4baf      	ldr	r3, [pc, #700]	; (8004178 <main+0xdb8>)
 8003eba:	6358      	str	r0, [r3, #52]	; 0x34
        p("\nKD %+5.2f\n", pid[0].pid_kd);
 8003ebc:	4658      	mov	r0, fp
 8003ebe:	f7fc fb43 	bl	8000548 <__aeabi_f2d>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	48ad      	ldr	r0, [pc, #692]	; (800417c <main+0xdbc>)
 8003ec8:	f001 f8c6 	bl	8005058 <p>
        break;
 8003ecc:	e65a      	b.n	8003b84 <main+0x7c4>
        cmd[0].speed -= 0.5;
 8003ece:	4bac      	ldr	r3, [pc, #688]	; (8004180 <main+0xdc0>)
 8003ed0:	ed93 7a00 	vldr	s14, [r3]
        cmd[1].speed -= 0.5;
 8003ed4:	edd3 7a05 	vldr	s15, [r3, #20]
        cmd[0].speed -= 0.5;
 8003ed8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003edc:	ee37 7a66 	vsub.f32	s14, s14, s13
        cmd[1].speed -= 0.5;
 8003ee0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003ee4:	e7a0      	b.n	8003e28 <main+0xa68>
        pid[0].pid_ki += 0.1;
 8003ee6:	4ba4      	ldr	r3, [pc, #656]	; (8004178 <main+0xdb8>)
 8003ee8:	68d8      	ldr	r0, [r3, #12]
 8003eea:	f7fc fb2d 	bl	8000548 <__aeabi_f2d>
 8003eee:	a39e      	add	r3, pc, #632	; (adr r3, 8004168 <main+0xda8>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc f9ca 	bl	800028c <__adddf3>
 8003ef8:	f7fc fe76 	bl	8000be8 <__aeabi_d2f>
 8003efc:	4b9e      	ldr	r3, [pc, #632]	; (8004178 <main+0xdb8>)
 8003efe:	4683      	mov	fp, r0
 8003f00:	60d8      	str	r0, [r3, #12]
        pid[1].pid_ki += 0.1;
 8003f02:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f04:	f7fc fb20 	bl	8000548 <__aeabi_f2d>
 8003f08:	a397      	add	r3, pc, #604	; (adr r3, 8004168 <main+0xda8>)
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f7fc f9bd 	bl	800028c <__adddf3>
        pid[1].pid_ki -= 0.1;
 8003f12:	f7fc fe69 	bl	8000be8 <__aeabi_d2f>
 8003f16:	4b98      	ldr	r3, [pc, #608]	; (8004178 <main+0xdb8>)
 8003f18:	6398      	str	r0, [r3, #56]	; 0x38
        p("\nKI %+5.2f\n", pid[0].pid_ki);
 8003f1a:	4658      	mov	r0, fp
 8003f1c:	f7fc fb14 	bl	8000548 <__aeabi_f2d>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4897      	ldr	r0, [pc, #604]	; (8004184 <main+0xdc4>)
 8003f26:	f001 f897 	bl	8005058 <p>
        break;
 8003f2a:	e62b      	b.n	8003b84 <main+0x7c4>
        manual_offset_radian += 0.01;
 8003f2c:	4b96      	ldr	r3, [pc, #600]	; (8004188 <main+0xdc8>)
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	f7fc fb0a 	bl	8000548 <__aeabi_f2d>
 8003f34:	a38e      	add	r3, pc, #568	; (adr r3, 8004170 <main+0xdb0>)
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	f7fc f9a7 	bl	800028c <__adddf3>
        manual_offset_radian -= 0.01;
 8003f3e:	f7fc fe53 	bl	8000be8 <__aeabi_d2f>
 8003f42:	4b91      	ldr	r3, [pc, #580]	; (8004188 <main+0xdc8>)
 8003f44:	6018      	str	r0, [r3, #0]
        p("offset %+4.2f\n", manual_offset_radian);
 8003f46:	f7fc faff 	bl	8000548 <__aeabi_f2d>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	488f      	ldr	r0, [pc, #572]	; (800418c <main+0xdcc>)
 8003f50:	f001 f882 	bl	8005058 <p>
        break;
 8003f54:	e616      	b.n	8003b84 <main+0x7c4>
        p("run mode!\n");
 8003f56:	488e      	ldr	r0, [pc, #568]	; (8004190 <main+0xdd0>)
 8003f58:	f001 f87e 	bl	8005058 <p>
        manual_offset_radian = 0;
 8003f5c:	4b8a      	ldr	r3, [pc, #552]	; (8004188 <main+0xdc8>)
 8003f5e:	edc3 8a00 	vstr	s17, [r3]
        cmd[0].out_v = 0;
 8003f62:	4b87      	ldr	r3, [pc, #540]	; (8004180 <main+0xdc0>)
        calib_process.enc_calib_cnt = 0;
 8003f64:	2200      	movs	r2, #0
        cmd[0].out_v = 0;
 8003f66:	edc3 8a02 	vstr	s17, [r3, #8]
        cmd[1].out_v = 0;
 8003f6a:	edc3 8a07 	vstr	s17, [r3, #28]
        calib_process.enc_calib_cnt = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e9c7 2300 	strd	r2, r3, [r7]
        break;
 8003f74:	e606      	b.n	8003b84 <main+0x7c4>
        motor_real[0].k -= 0.1;
 8003f76:	6920      	ldr	r0, [r4, #16]
 8003f78:	f7fc fae6 	bl	8000548 <__aeabi_f2d>
 8003f7c:	a37a      	add	r3, pc, #488	; (adr r3, 8004168 <main+0xda8>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f7fc f981 	bl	8000288 <__aeabi_dsub>
 8003f86:	f7fc fe2f 	bl	8000be8 <__aeabi_d2f>
 8003f8a:	6120      	str	r0, [r4, #16]
        motor_real[1].k -= 0.1;
 8003f8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003f8e:	f7fc fadb 	bl	8000548 <__aeabi_f2d>
 8003f92:	a375      	add	r3, pc, #468	; (adr r3, 8004168 <main+0xda8>)
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f7fc f976 	bl	8000288 <__aeabi_dsub>
 8003f9c:	f7fc fe24 	bl	8000be8 <__aeabi_d2f>
 8003fa0:	6260      	str	r0, [r4, #36]	; 0x24
        break;
 8003fa2:	e5ef      	b.n	8003b84 <main+0x7c4>
        pid[0].pid_kd -= 0.1;
 8003fa4:	4b74      	ldr	r3, [pc, #464]	; (8004178 <main+0xdb8>)
 8003fa6:	6898      	ldr	r0, [r3, #8]
 8003fa8:	f7fc face 	bl	8000548 <__aeabi_f2d>
 8003fac:	a36e      	add	r3, pc, #440	; (adr r3, 8004168 <main+0xda8>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	f7fc f969 	bl	8000288 <__aeabi_dsub>
 8003fb6:	f7fc fe17 	bl	8000be8 <__aeabi_d2f>
 8003fba:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <main+0xdb8>)
 8003fbc:	4683      	mov	fp, r0
 8003fbe:	6098      	str	r0, [r3, #8]
        pid[1].pid_kd -= 0.1;
 8003fc0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003fc2:	f7fc fac1 	bl	8000548 <__aeabi_f2d>
 8003fc6:	a368      	add	r3, pc, #416	; (adr r3, 8004168 <main+0xda8>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	f7fc f95c 	bl	8000288 <__aeabi_dsub>
 8003fd0:	e770      	b.n	8003eb4 <main+0xaf4>
        pid[0].pid_ki -= 0.1;
 8003fd2:	4b69      	ldr	r3, [pc, #420]	; (8004178 <main+0xdb8>)
 8003fd4:	68d8      	ldr	r0, [r3, #12]
 8003fd6:	f7fc fab7 	bl	8000548 <__aeabi_f2d>
 8003fda:	a363      	add	r3, pc, #396	; (adr r3, 8004168 <main+0xda8>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fc f952 	bl	8000288 <__aeabi_dsub>
 8003fe4:	f7fc fe00 	bl	8000be8 <__aeabi_d2f>
 8003fe8:	4b63      	ldr	r3, [pc, #396]	; (8004178 <main+0xdb8>)
 8003fea:	4683      	mov	fp, r0
 8003fec:	60d8      	str	r0, [r3, #12]
        pid[1].pid_ki -= 0.1;
 8003fee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ff0:	f7fc faaa 	bl	8000548 <__aeabi_f2d>
 8003ff4:	a35c      	add	r3, pc, #368	; (adr r3, 8004168 <main+0xda8>)
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f7fc f945 	bl	8000288 <__aeabi_dsub>
 8003ffe:	e788      	b.n	8003f12 <main+0xb52>
        pid[0].pid_kp += 0.1;
 8004000:	4b5d      	ldr	r3, [pc, #372]	; (8004178 <main+0xdb8>)
 8004002:	6858      	ldr	r0, [r3, #4]
 8004004:	f7fc faa0 	bl	8000548 <__aeabi_f2d>
 8004008:	a357      	add	r3, pc, #348	; (adr r3, 8004168 <main+0xda8>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc f93d 	bl	800028c <__adddf3>
 8004012:	f7fc fde9 	bl	8000be8 <__aeabi_d2f>
 8004016:	4b58      	ldr	r3, [pc, #352]	; (8004178 <main+0xdb8>)
 8004018:	4683      	mov	fp, r0
 800401a:	6058      	str	r0, [r3, #4]
        pid[1].pid_kp += 0.1;
 800401c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800401e:	f7fc fa93 	bl	8000548 <__aeabi_f2d>
 8004022:	a351      	add	r3, pc, #324	; (adr r3, 8004168 <main+0xda8>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc f930 	bl	800028c <__adddf3>
        pid[1].pid_kp -= 0.1;
 800402c:	f7fc fddc 	bl	8000be8 <__aeabi_d2f>
 8004030:	4b51      	ldr	r3, [pc, #324]	; (8004178 <main+0xdb8>)
 8004032:	6318      	str	r0, [r3, #48]	; 0x30
        p("\nKP %+5.2f\n", pid[0].pid_kp);
 8004034:	4658      	mov	r0, fp
 8004036:	f7fc fa87 	bl	8000548 <__aeabi_f2d>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4855      	ldr	r0, [pc, #340]	; (8004194 <main+0xdd4>)
 8004040:	f001 f80a 	bl	8005058 <p>
        break;
 8004044:	e59e      	b.n	8003b84 <main+0x7c4>
        pid[0].pid_kp -= 0.1;
 8004046:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <main+0xdb8>)
 8004048:	6858      	ldr	r0, [r3, #4]
 800404a:	f7fc fa7d 	bl	8000548 <__aeabi_f2d>
 800404e:	a346      	add	r3, pc, #280	; (adr r3, 8004168 <main+0xda8>)
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f7fc f918 	bl	8000288 <__aeabi_dsub>
 8004058:	f7fc fdc6 	bl	8000be8 <__aeabi_d2f>
 800405c:	4b46      	ldr	r3, [pc, #280]	; (8004178 <main+0xdb8>)
 800405e:	4683      	mov	fp, r0
 8004060:	6058      	str	r0, [r3, #4]
        pid[1].pid_kp -= 0.1;
 8004062:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004064:	f7fc fa70 	bl	8000548 <__aeabi_f2d>
 8004068:	a33f      	add	r3, pc, #252	; (adr r3, 8004168 <main+0xda8>)
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	f7fc f90b 	bl	8000288 <__aeabi_dsub>
 8004072:	e7db      	b.n	800402c <main+0xc6c>
        p("\n\nstart calib mode!\n\n");
 8004074:	4848      	ldr	r0, [pc, #288]	; (8004198 <main+0xdd8>)
 8004076:	f000 ffef 	bl	8005058 <p>
  p("calibration mode!\n");
 800407a:	4848      	ldr	r0, [pc, #288]	; (800419c <main+0xddc>)
 800407c:	f000 ffec 	bl	8005058 <p>
  manual_offset_radian = 0;
 8004080:	4b41      	ldr	r3, [pc, #260]	; (8004188 <main+0xdc8>)
  cmd[0].speed = 0;
 8004082:	4a3f      	ldr	r2, [pc, #252]	; (8004180 <main+0xdc0>)
  manual_offset_radian = 0;
 8004084:	edc3 8a00 	vstr	s17, [r3]
  cmd[0].out_v_final = 2.0;
 8004088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800408c:	60d3      	str	r3, [r2, #12]
  cmd[1].out_v_final = 2.0;
 800408e:	6213      	str	r3, [r2, #32]
  cmd[0].speed = 0;
 8004090:	edc2 8a00 	vstr	s17, [r2]
  cmd[1].speed = 0;
 8004094:	edc2 8a05 	vstr	s17, [r2, #20]
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8004098:	2300      	movs	r3, #0
 800409a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800409e:	e9c7 2300 	strd	r2, r3, [r7]
}
 80040a2:	e56f      	b.n	8003b84 <main+0x7c4>
        manual_offset_radian -= 0.01;
 80040a4:	4b38      	ldr	r3, [pc, #224]	; (8004188 <main+0xdc8>)
 80040a6:	6818      	ldr	r0, [r3, #0]
 80040a8:	f7fc fa4e 	bl	8000548 <__aeabi_f2d>
 80040ac:	a330      	add	r3, pc, #192	; (adr r3, 8004170 <main+0xdb0>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f7fc f8e9 	bl	8000288 <__aeabi_dsub>
 80040b6:	e742      	b.n	8003f3e <main+0xb7e>
        p("enter sleep!\n");
 80040b8:	4839      	ldr	r0, [pc, #228]	; (80041a0 <main+0xde0>)
 80040ba:	f000 ffcd 	bl	8005058 <p>
        forceStopAllPwmOutputAndTimer();
 80040be:	f000 fe3b 	bl	8004d38 <forceStopAllPwmOutputAndTimer>
        while (1)
 80040c2:	e7fe      	b.n	80040c2 <main+0xd02>
      runMode();
 80040c4:	f7fd ff0c 	bl	8001ee0 <runMode>
 80040c8:	e5c6      	b.n	8003c58 <main+0x898>
      encoderCalibrationMode();
 80040ca:	f7fe f8f5 	bl	80022b8 <encoderCalibrationMode>
 80040ce:	e5c3      	b.n	8003c58 <main+0x898>
 80040d0:	9306      	str	r3, [sp, #24]
    setPwmOutPutFreeWheel();
 80040d2:	f000 fe81 	bl	8004dd8 <setPwmOutPutFreeWheel>
    enc_over_speed_cnt_error_flag = true;
 80040d6:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <main+0xde4>)
 80040d8:	2201      	movs	r2, #1
 80040da:	701a      	strb	r2, [r3, #0]
    enc_over_speed_cnt_error_enc_idx = 0;
 80040dc:	4a32      	ldr	r2, [pc, #200]	; (80041a8 <main+0xde8>)
 80040de:	9b06      	ldr	r3, [sp, #24]
 80040e0:	6013      	str	r3, [r2, #0]
    enc_over_speed_cnt_error_enc_cnt = temp;
 80040e2:	4b32      	ldr	r3, [pc, #200]	; (80041ac <main+0xdec>)
 80040e4:	f8c3 b000 	str.w	fp, [r3]
    return;
 80040e8:	e5aa      	b.n	8003c40 <main+0x880>
 80040ea:	9306      	str	r3, [sp, #24]
    setPwmOutPutFreeWheel();
 80040ec:	f000 fe74 	bl	8004dd8 <setPwmOutPutFreeWheel>
    enc_over_speed_cnt_error_flag = true;
 80040f0:	4b2c      	ldr	r3, [pc, #176]	; (80041a4 <main+0xde4>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
    enc_over_speed_cnt_error_enc_idx = 0;
 80040f6:	4a2c      	ldr	r2, [pc, #176]	; (80041a8 <main+0xde8>)
 80040f8:	9b06      	ldr	r3, [sp, #24]
 80040fa:	6013      	str	r3, [r2, #0]
    enc_over_speed_cnt_error_enc_cnt = temp;
 80040fc:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <main+0xdec>)
 80040fe:	f8c3 b000 	str.w	fp, [r3]
    return;
 8004102:	e56e      	b.n	8003be2 <main+0x822>
 8004104:	2601      	movs	r6, #1
 8004106:	f7ff ba5d 	b.w	80035c4 <main+0x204>
  } else if (isPushedSW2()) {
 800410a:	f7fd fb8b 	bl	8001824 <isPushedSW2>
 800410e:	2800      	cmp	r0, #0
 8004110:	f43f ad0f 	beq.w	8003b32 <main+0x772>
    flash.board_id = 1;
 8004114:	2001      	movs	r0, #1
 8004116:	e4ff      	b.n	8003b18 <main+0x758>
    adc_raw.cs_adc_offset = 2048;
 8004118:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800411c:	f7ff bb95 	b.w	800384a <main+0x48a>
      motor_param[i].voltage_per_rps = 1 / flash.rps_per_v_cw[i];
 8004120:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8004124:	f7ff b9d2 	b.w	80034cc <main+0x10c>
 8004128:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800412c:	f7ff b9a2 	b.w	8003474 <main+0xb4>
    startCalibrationMode();
 8004130:	f7fe fdc2 	bl	8002cb8 <startCalibrationMode>
    p("enc calibration mode!!\n");
 8004134:	481e      	ldr	r0, [pc, #120]	; (80041b0 <main+0xdf0>)
 8004136:	f000 ff8f 	bl	8005058 <p>
    while (isPushedSW4())
 800413a:	f7fd fb8b 	bl	8001854 <isPushedSW4>
 800413e:	2800      	cmp	r0, #0
 8004140:	d1fb      	bne.n	800413a <main+0xd7a>
 8004142:	e4fb      	b.n	8003b3c <main+0x77c>
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);  // M0 low
 8004144:	2100      	movs	r1, #0
 8004146:	481b      	ldr	r0, [pc, #108]	; (80041b4 <main+0xdf4>)
 8004148:	f003 fee8 	bl	8007f1c <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // M1 low
 800414c:	481a      	ldr	r0, [pc, #104]	; (80041b8 <main+0xdf8>)
 800414e:	2100      	movs	r1, #0
 8004150:	f003 fee4 	bl	8007f1c <HAL_TIM_PWM_Start>
    interrupt_timer_cnt = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	602b      	str	r3, [r5, #0]
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800415e:	f4ff aba4 	bcc.w	80038aa <main+0x4ea>
 8004162:	f7ff bbf6 	b.w	8003952 <main+0x592>
 8004166:	bf00      	nop
 8004168:	9999999a 	.word	0x9999999a
 800416c:	3fb99999 	.word	0x3fb99999
 8004170:	47ae147b 	.word	0x47ae147b
 8004174:	3f847ae1 	.word	0x3f847ae1
 8004178:	20000488 	.word	0x20000488
 800417c:	0800db0c 	.word	0x0800db0c
 8004180:	200003f4 	.word	0x200003f4
 8004184:	0800db00 	.word	0x0800db00
 8004188:	20000448 	.word	0x20000448
 800418c:	0800dae4 	.word	0x0800dae4
 8004190:	0800dad8 	.word	0x0800dad8
 8004194:	0800daf4 	.word	0x0800daf4
 8004198:	0800dac0 	.word	0x0800dac0
 800419c:	0800d7d8 	.word	0x0800d7d8
 80041a0:	0800db18 	.word	0x0800db18
 80041a4:	20000434 	.word	0x20000434
 80041a8:	20000430 	.word	0x20000430
 80041ac:	2000042c 	.word	0x2000042c
 80041b0:	0800ddb0 	.word	0x0800ddb0
 80041b4:	20000618 	.word	0x20000618
 80041b8:	200005cc 	.word	0x200005cc

080041bc <Error_Handler>:
 80041bc:	b672      	cpsid	i
  while (1) {
 80041be:	e7fe      	b.n	80041be <Error_Handler+0x2>

080041c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80041c0:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80041c2:	4811      	ldr	r0, [pc, #68]	; (8004208 <MX_SPI1_Init+0x48>)
 80041c4:	4c11      	ldr	r4, [pc, #68]	; (800420c <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041c6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041ca:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80041ce:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041d0:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80041d2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80041d6:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80041d8:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041da:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80041de:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041e2:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80041e6:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80041e8:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041ea:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ee:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80041f2:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80041f6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041f8:	f003 fcbc 	bl	8007b74 <HAL_SPI_Init>
 80041fc:	b900      	cbnz	r0, 8004200 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041fe:	bd10      	pop	{r4, pc}
 8004200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004204:	f7ff bfda 	b.w	80041bc <Error_Handler>
 8004208:	2000051c 	.word	0x2000051c
 800420c:	40013000 	.word	0x40013000

08004210 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004210:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <HAL_SPI_MspInit+0x7c>)
 8004214:	6801      	ldr	r1, [r0, #0]
{
 8004216:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004218:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 800421a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004220:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004224:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8004226:	d001      	beq.n	800422c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004228:	b009      	add	sp, #36	; 0x24
 800422a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800422c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004230:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004234:	2403      	movs	r4, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004236:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004238:	4815      	ldr	r0, [pc, #84]	; (8004290 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800423a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800423e:	619a      	str	r2, [r3, #24]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004246:	9200      	str	r2, [sp, #0]
 8004248:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004250:	615a      	str	r2, [r3, #20]
 8004252:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004254:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800425a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800425c:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800425e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8004260:	2228      	movs	r2, #40	; 0x28
 8004262:	2302      	movs	r3, #2
 8004264:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004268:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800426a:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800426c:	f002 fe70 	bl	8006f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004270:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004272:	2210      	movs	r2, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004274:	4806      	ldr	r0, [pc, #24]	; (8004290 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004276:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004278:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800427a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800427e:	e9cd 4505 	strd	r4, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004282:	f002 fe65 	bl	8006f50 <HAL_GPIO_Init>
}
 8004286:	b009      	add	sp, #36	; 0x24
 8004288:	bd30      	pop	{r4, r5, pc}
 800428a:	bf00      	nop
 800428c:	40013000 	.word	0x40013000
 8004290:	48000400 	.word	0x48000400

08004294 <readRegisterMA702>:
}

volatile static uint32_t delay_cnt = 0;

uint8_t readRegisterMA702(uint8_t enc, uint8_t address)
{
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	460e      	mov	r6, r1
  if (enc == 0)
 8004298:	4604      	mov	r4, r0
 800429a:	2800      	cmp	r0, #0
 800429c:	d14c      	bne.n	8004338 <readRegisterMA702+0xa4>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800429e:	482d      	ldr	r0, [pc, #180]	; (8004354 <readRegisterMA702+0xc0>)
 80042a0:	4622      	mov	r2, r4
 80042a2:	2140      	movs	r1, #64	; 0x40
 80042a4:	f002 ff42 	bl	800712c <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }

  hspi1.Instance->DR = 0x4000 | ((address & 0x1F) << 8);
 80042a8:	4d2b      	ldr	r5, [pc, #172]	; (8004358 <readRegisterMA702+0xc4>)
 80042aa:	0236      	lsls	r6, r6, #8
 80042ac:	682a      	ldr	r2, [r5, #0]
 80042ae:	f406 56f8 	and.w	r6, r6, #7936	; 0x1f00
 80042b2:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80042b6:	60d6      	str	r6, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80042b8:	6893      	ldr	r3, [r2, #8]
 80042ba:	07d9      	lsls	r1, r3, #31
 80042bc:	d5fc      	bpl.n	80042b8 <readRegisterMA702+0x24>
  {
  }
  if (enc == 0)
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80042be:	4825      	ldr	r0, [pc, #148]	; (8004354 <readRegisterMA702+0xc0>)
 80042c0:	2201      	movs	r2, #1
  if (enc == 0)
 80042c2:	bb24      	cbnz	r4, 800430e <readRegisterMA702+0x7a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80042c4:	2140      	movs	r1, #64	; 0x40
 80042c6:	f002 ff31 	bl	800712c <HAL_GPIO_WritePin>

    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++)
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <readRegisterMA702+0xc8>)
 80042cc:	601c      	str	r4, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	2a01      	cmp	r2, #1
 80042d2:	d805      	bhi.n	80042e0 <readRegisterMA702+0x4c>
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	3101      	adds	r1, #1
 80042d8:	6019      	str	r1, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2a01      	cmp	r2, #1
 80042de:	d9f9      	bls.n	80042d4 <readRegisterMA702+0x40>
    {
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80042e0:	481c      	ldr	r0, [pc, #112]	; (8004354 <readRegisterMA702+0xc0>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	2140      	movs	r1, #64	; 0x40
 80042e6:	f002 ff21 	bl	800712c <HAL_GPIO_WritePin>
    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++)
    {
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }
  uint16_t temp = hspi1.Instance->DR;
 80042ea:	682a      	ldr	r2, [r5, #0]

  hspi1.Instance->DR = 0;
 80042ec:	2300      	movs	r3, #0
  uint16_t temp = hspi1.Instance->DR;
 80042ee:	68d1      	ldr	r1, [r2, #12]
  hspi1.Instance->DR = 0;
 80042f0:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80042f2:	6893      	ldr	r3, [r2, #8]
 80042f4:	07db      	lsls	r3, r3, #31
 80042f6:	d5fc      	bpl.n	80042f2 <readRegisterMA702+0x5e>
  {
  }

  if (enc == 0)
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80042f8:	4816      	ldr	r0, [pc, #88]	; (8004354 <readRegisterMA702+0xc0>)
 80042fa:	2201      	movs	r2, #1
  if (enc == 0)
 80042fc:	bb14      	cbnz	r4, 8004344 <readRegisterMA702+0xb0>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80042fe:	2140      	movs	r1, #64	; 0x40
 8004300:	f002 ff14 	bl	800712c <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
  }

  return hspi1.Instance->DR >> 8;
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	68d8      	ldr	r0, [r3, #12]
}
 8004308:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800430c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	f002 ff0c 	bl	800712c <HAL_GPIO_WritePin>
    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++)
 8004314:	4b11      	ldr	r3, [pc, #68]	; (800435c <readRegisterMA702+0xc8>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	2a01      	cmp	r2, #1
 800431e:	d805      	bhi.n	800432c <readRegisterMA702+0x98>
 8004320:	6819      	ldr	r1, [r3, #0]
 8004322:	3101      	adds	r1, #1
 8004324:	6019      	str	r1, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	2a01      	cmp	r2, #1
 800432a:	d9f9      	bls.n	8004320 <readRegisterMA702+0x8c>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800432c:	4809      	ldr	r0, [pc, #36]	; (8004354 <readRegisterMA702+0xc0>)
 800432e:	2200      	movs	r2, #0
 8004330:	2180      	movs	r1, #128	; 0x80
 8004332:	f002 fefb 	bl	800712c <HAL_GPIO_WritePin>
 8004336:	e7d8      	b.n	80042ea <readRegisterMA702+0x56>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004338:	4806      	ldr	r0, [pc, #24]	; (8004354 <readRegisterMA702+0xc0>)
 800433a:	2200      	movs	r2, #0
 800433c:	2180      	movs	r1, #128	; 0x80
 800433e:	f002 fef5 	bl	800712c <HAL_GPIO_WritePin>
 8004342:	e7b1      	b.n	80042a8 <readRegisterMA702+0x14>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004344:	2180      	movs	r1, #128	; 0x80
 8004346:	f002 fef1 	bl	800712c <HAL_GPIO_WritePin>
  return hspi1.Instance->DR >> 8;
 800434a:	682b      	ldr	r3, [r5, #0]
 800434c:	68d8      	ldr	r0, [r3, #12]
}
 800434e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	48000400 	.word	0x48000400
 8004358:	2000051c 	.word	0x2000051c
 800435c:	20000518 	.word	0x20000518

08004360 <writeRegisterMA702>:

uint8_t writeRegisterMA702(uint8_t enc, uint8_t address, uint8_t value)
{
 8004360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004362:	460c      	mov	r4, r1
 8004364:	4617      	mov	r7, r2

  if (enc == 0)
 8004366:	4605      	mov	r5, r0
 8004368:	2800      	cmp	r0, #0
 800436a:	d13e      	bne.n	80043ea <writeRegisterMA702+0x8a>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800436c:	4602      	mov	r2, r0
 800436e:	2140      	movs	r1, #64	; 0x40
 8004370:	4825      	ldr	r0, [pc, #148]	; (8004408 <writeRegisterMA702+0xa8>)
 8004372:	f002 fedb 	bl	800712c <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }

  hspi1.Instance->DR = 0x8000 | ((address & 0x1F) << 8) | value;
 8004376:	4e25      	ldr	r6, [pc, #148]	; (800440c <writeRegisterMA702+0xac>)
 8004378:	0223      	lsls	r3, r4, #8
 800437a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	433b      	orrs	r3, r7
 8004382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004386:	60cb      	str	r3, [r1, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8004388:	688b      	ldr	r3, [r1, #8]
 800438a:	07da      	lsls	r2, r3, #31
 800438c:	d5fc      	bpl.n	8004388 <writeRegisterMA702+0x28>
  {
  }
  if (enc == 0)
 800438e:	b9f5      	cbnz	r5, 80043ce <writeRegisterMA702+0x6e>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004390:	2140      	movs	r1, #64	; 0x40
 8004392:	2201      	movs	r2, #1
 8004394:	481c      	ldr	r0, [pc, #112]	; (8004408 <writeRegisterMA702+0xa8>)
 8004396:	f002 fec9 	bl	800712c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800439a:	2014      	movs	r0, #20
 800439c:	f000 ff4c 	bl	8005238 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80043a0:	4819      	ldr	r0, [pc, #100]	; (8004408 <writeRegisterMA702+0xa8>)
 80043a2:	462a      	mov	r2, r5
 80043a4:	2140      	movs	r1, #64	; 0x40
 80043a6:	f002 fec1 	bl	800712c <HAL_GPIO_WritePin>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
    HAL_Delay(20);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }
  uint16_t temp = hspi1.Instance->DR;
 80043aa:	6831      	ldr	r1, [r6, #0]

  hspi1.Instance->DR = 0;
 80043ac:	2300      	movs	r3, #0
  uint16_t temp = hspi1.Instance->DR;
 80043ae:	68ca      	ldr	r2, [r1, #12]
  hspi1.Instance->DR = 0;
 80043b0:	60cb      	str	r3, [r1, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80043b2:	688b      	ldr	r3, [r1, #8]
 80043b4:	07db      	lsls	r3, r3, #31
 80043b6:	d5fc      	bpl.n	80043b2 <writeRegisterMA702+0x52>
  {
  }

  if (enc == 0)
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80043b8:	4813      	ldr	r0, [pc, #76]	; (8004408 <writeRegisterMA702+0xa8>)
 80043ba:	2201      	movs	r2, #1
  if (enc == 0)
 80043bc:	b9dd      	cbnz	r5, 80043f6 <writeRegisterMA702+0x96>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80043be:	2140      	movs	r1, #64	; 0x40
 80043c0:	f002 feb4 	bl	800712c <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
  }

  return hspi1.Instance->DR >> 8;
 80043c4:	6833      	ldr	r3, [r6, #0]
 80043c6:	68d8      	ldr	r0, [r3, #12]
}
 80043c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80043cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80043ce:	2201      	movs	r2, #1
 80043d0:	2180      	movs	r1, #128	; 0x80
 80043d2:	480d      	ldr	r0, [pc, #52]	; (8004408 <writeRegisterMA702+0xa8>)
 80043d4:	f002 feaa 	bl	800712c <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80043d8:	2014      	movs	r0, #20
 80043da:	f000 ff2d 	bl	8005238 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80043de:	480a      	ldr	r0, [pc, #40]	; (8004408 <writeRegisterMA702+0xa8>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	2180      	movs	r1, #128	; 0x80
 80043e4:	f002 fea2 	bl	800712c <HAL_GPIO_WritePin>
 80043e8:	e7df      	b.n	80043aa <writeRegisterMA702+0x4a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80043ea:	4807      	ldr	r0, [pc, #28]	; (8004408 <writeRegisterMA702+0xa8>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	2180      	movs	r1, #128	; 0x80
 80043f0:	f002 fe9c 	bl	800712c <HAL_GPIO_WritePin>
 80043f4:	e7bf      	b.n	8004376 <writeRegisterMA702+0x16>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80043f6:	2180      	movs	r1, #128	; 0x80
 80043f8:	f002 fe98 	bl	800712c <HAL_GPIO_WritePin>
  return hspi1.Instance->DR >> 8;
 80043fc:	6833      	ldr	r3, [r6, #0]
 80043fe:	68d8      	ldr	r0, [r3, #12]
}
 8004400:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004406:	bf00      	nop
 8004408:	48000400 	.word	0x48000400
 800440c:	2000051c 	.word	0x2000051c

08004410 <updateMA702_M0>:

inline void updateMA702_M0(void)
{
 8004410:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004412:	2200      	movs	r2, #0
 8004414:	2140      	movs	r1, #64	; 0x40
 8004416:	4830      	ldr	r0, [pc, #192]	; (80044d8 <updateMA702_M0+0xc8>)

  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 8004418:	4c30      	ldr	r4, [pc, #192]	; (80044dc <updateMA702_M0+0xcc>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800441a:	f002 fe87 	bl	800712c <HAL_GPIO_WritePin>

  ma702[1].enc_raw = hspi1.Instance->DR;
 800441e:	4b30      	ldr	r3, [pc, #192]	; (80044e0 <updateMA702_M0+0xd0>)
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 8004420:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  ma702[1].enc_raw = hspi1.Instance->DR;
 8004422:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 8004424:	2300      	movs	r3, #0
  ma702[1].enc_raw = hspi1.Instance->DR;
 8004426:	68d1      	ldr	r1, [r2, #12]
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 8004428:	6325      	str	r5, [r4, #48]	; 0x30
  hspi1.Instance->DR = 0;
 800442a:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800442c:	6893      	ldr	r3, [r2, #8]
 800442e:	07db      	lsls	r3, r3, #31
 8004430:	d5fc      	bpl.n	800442c <updateMA702_M0+0x1c>
  {
  }
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004432:	68d6      	ldr	r6, [r2, #12]

  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 8004434:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <updateMA702_M0+0xd4>)
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004436:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800443a:	4016      	ands	r6, r2
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 800443c:	fb83 2306 	smull	r2, r3, r3, r6
 8004440:	4433      	add	r3, r6
 8004442:	f241 5255 	movw	r2, #5461	; 0x1555
 8004446:	131b      	asrs	r3, r3, #12
 8004448:	fb02 6313 	mls	r3, r2, r3, r6
 800444c:	1ad2      	subs	r2, r2, r3
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 800444e:	ee07 2a90 	vmov	s15, r2
 8004452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004456:	eddf 7a24 	vldr	s15, [pc, #144]	; 80044e8 <updateMA702_M0+0xd8>
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 800445a:	62e2      	str	r2, [r4, #44]	; 0x2c
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 800445c:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004460:	62a6      	str	r6, [r4, #40]	; 0x28
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 8004462:	ee17 0a90 	vmov	r0, s15
 8004466:	f7fc f86f 	bl	8000548 <__aeabi_f2d>
 800446a:	a319      	add	r3, pc, #100	; (adr r3, 80044d0 <updateMA702_M0+0xc0>)
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f7fc f8c2 	bl	80005f8 <__aeabi_dmul>
 8004474:	f7fc fbb8 	bl	8000be8 <__aeabi_d2f>
  int temp = ma702[enc].pre_enc_raw - ma702[enc].enc_raw;
 8004478:	1bad      	subs	r5, r5, r6
  if (temp < -HARF_OF_ENC_CNT_MAX)
 800447a:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 800447e:	6260      	str	r0, [r4, #36]	; 0x24
  if (temp < -HARF_OF_ENC_CNT_MAX)
 8004480:	da1d      	bge.n	80044be <updateMA702_M0+0xae>
    temp += ENC_CNT_MAX;
 8004482:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
  if (abs(ma702[enc].diff_max) < abs(temp))
 8004486:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  ma702[enc].diff_enc = temp;
 8004488:	6365      	str	r5, [r4, #52]	; 0x34
  if (abs(ma702[enc].diff_max) < abs(temp))
 800448a:	2b00      	cmp	r3, #0
 800448c:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8004490:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8004494:	bfb8      	it	lt
 8004496:	425b      	neglt	r3, r3
 8004498:	4293      	cmp	r3, r2
  if (abs(ma702[enc].diff_min) > abs(temp))
 800449a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  updateDiff(1);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800449c:	480e      	ldr	r0, [pc, #56]	; (80044d8 <updateMA702_M0+0xc8>)
    ma702[enc].diff_max_cnt = ma702[enc].enc_raw;
 800449e:	bfb8      	it	lt
 80044a0:	e9c4 560f 	strdlt	r5, r6, [r4, #60]	; 0x3c
  if (abs(ma702[enc].diff_min) > abs(temp))
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bfb8      	it	lt
 80044a8:	425b      	neglt	r3, r3
 80044aa:	429a      	cmp	r2, r3
    ma702[enc].diff_min = temp;
 80044ac:	bfbc      	itt	lt
 80044ae:	63a5      	strlt	r5, [r4, #56]	; 0x38
    ma702[enc].diff_min_cnt = ma702[enc].enc_raw;
 80044b0:	6466      	strlt	r6, [r4, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80044b2:	2201      	movs	r2, #1
}
 80044b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80044b8:	2140      	movs	r1, #64	; 0x40
 80044ba:	f002 be37 	b.w	800712c <HAL_GPIO_WritePin>
  else if (temp > HARF_OF_ENC_CNT_MAX)
 80044be:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 80044c2:	bfc8      	it	gt
 80044c4:	f5a5 3580 	subgt.w	r5, r5, #65536	; 0x10000
 80044c8:	e7dd      	b.n	8004486 <updateMA702_M0+0x76>
 80044ca:	bf00      	nop
 80044cc:	f3af 8000 	nop.w
 80044d0:	54442d18 	.word	0x54442d18
 80044d4:	400921fb 	.word	0x400921fb
 80044d8:	48000400 	.word	0x48000400
 80044dc:	20000580 	.word	0x20000580
 80044e0:	2000051c 	.word	0x2000051c
 80044e4:	c003000d 	.word	0xc003000d
 80044e8:	39c00300 	.word	0x39c00300
 80044ec:	00000000 	.word	0x00000000

080044f0 <updateMA702_M1>:

inline void updateMA702_M1(void)
{
 80044f0:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80044f2:	2200      	movs	r2, #0
 80044f4:	2180      	movs	r1, #128	; 0x80
 80044f6:	4830      	ldr	r0, [pc, #192]	; (80045b8 <updateMA702_M1+0xc8>)

  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 80044f8:	4c30      	ldr	r4, [pc, #192]	; (80045bc <updateMA702_M1+0xcc>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80044fa:	f002 fe17 	bl	800712c <HAL_GPIO_WritePin>

  ma702[0].enc_raw = hspi1.Instance->DR;
 80044fe:	4b30      	ldr	r3, [pc, #192]	; (80045c0 <updateMA702_M1+0xd0>)
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8004500:	6865      	ldr	r5, [r4, #4]
  ma702[0].enc_raw = hspi1.Instance->DR;
 8004502:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 8004504:	2300      	movs	r3, #0
  ma702[0].enc_raw = hspi1.Instance->DR;
 8004506:	68d1      	ldr	r1, [r2, #12]
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8004508:	60e5      	str	r5, [r4, #12]
  hspi1.Instance->DR = 0;
 800450a:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 800450c:	6893      	ldr	r3, [r2, #8]
 800450e:	07db      	lsls	r3, r3, #31
 8004510:	d5fc      	bpl.n	800450c <updateMA702_M1+0x1c>
  {
  }
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004512:	68d6      	ldr	r6, [r2, #12]

  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 8004514:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <updateMA702_M1+0xd4>)
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004516:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800451a:	4016      	ands	r6, r2
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 800451c:	fb83 2306 	smull	r2, r3, r3, r6
 8004520:	4433      	add	r3, r6
 8004522:	f241 5255 	movw	r2, #5461	; 0x1555
 8004526:	131b      	asrs	r3, r3, #12
 8004528:	fb02 6313 	mls	r3, r2, r3, r6
 800452c:	1ad2      	subs	r2, r2, r3
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 800452e:	ee07 2a90 	vmov	s15, r2
 8004532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004536:	eddf 7a24 	vldr	s15, [pc, #144]	; 80045c8 <updateMA702_M1+0xd8>
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 800453a:	60a2      	str	r2, [r4, #8]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 800453c:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004540:	6066      	str	r6, [r4, #4]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 8004542:	ee17 0a90 	vmov	r0, s15
 8004546:	f7fb ffff 	bl	8000548 <__aeabi_f2d>
 800454a:	a319      	add	r3, pc, #100	; (adr r3, 80045b0 <updateMA702_M1+0xc0>)
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f7fc f852 	bl	80005f8 <__aeabi_dmul>
 8004554:	f7fc fb48 	bl	8000be8 <__aeabi_d2f>
  int temp = ma702[enc].pre_enc_raw - ma702[enc].enc_raw;
 8004558:	1bad      	subs	r5, r5, r6
  if (temp < -HARF_OF_ENC_CNT_MAX)
 800455a:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 800455e:	6020      	str	r0, [r4, #0]
  if (temp < -HARF_OF_ENC_CNT_MAX)
 8004560:	da1d      	bge.n	800459e <updateMA702_M1+0xae>
    temp += ENC_CNT_MAX;
 8004562:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
  if (abs(ma702[enc].diff_max) < abs(temp))
 8004566:	69a3      	ldr	r3, [r4, #24]
  ma702[enc].diff_enc = temp;
 8004568:	6125      	str	r5, [r4, #16]
  if (abs(ma702[enc].diff_max) < abs(temp))
 800456a:	2b00      	cmp	r3, #0
 800456c:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8004570:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8004574:	bfb8      	it	lt
 8004576:	425b      	neglt	r3, r3
 8004578:	4293      	cmp	r3, r2
  if (abs(ma702[enc].diff_min) > abs(temp))
 800457a:	6963      	ldr	r3, [r4, #20]

  updateDiff(0);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800457c:	480e      	ldr	r0, [pc, #56]	; (80045b8 <updateMA702_M1+0xc8>)
    ma702[enc].diff_max_cnt = ma702[enc].enc_raw;
 800457e:	bfb8      	it	lt
 8004580:	e9c4 5606 	strdlt	r5, r6, [r4, #24]
  if (abs(ma702[enc].diff_min) > abs(temp))
 8004584:	2b00      	cmp	r3, #0
 8004586:	bfb8      	it	lt
 8004588:	425b      	neglt	r3, r3
 800458a:	429a      	cmp	r2, r3
    ma702[enc].diff_min = temp;
 800458c:	bfbc      	itt	lt
 800458e:	6165      	strlt	r5, [r4, #20]
    ma702[enc].diff_min_cnt = ma702[enc].enc_raw;
 8004590:	6226      	strlt	r6, [r4, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004592:	2201      	movs	r2, #1
}
 8004594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004598:	2180      	movs	r1, #128	; 0x80
 800459a:	f002 bdc7 	b.w	800712c <HAL_GPIO_WritePin>
  else if (temp > HARF_OF_ENC_CNT_MAX)
 800459e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 80045a2:	bfc8      	it	gt
 80045a4:	f5a5 3580 	subgt.w	r5, r5, #65536	; 0x10000
 80045a8:	e7dd      	b.n	8004566 <updateMA702_M1+0x76>
 80045aa:	bf00      	nop
 80045ac:	f3af 8000 	nop.w
 80045b0:	54442d18 	.word	0x54442d18
 80045b4:	400921fb 	.word	0x400921fb
 80045b8:	48000400 	.word	0x48000400
 80045bc:	20000580 	.word	0x20000580
 80045c0:	2000051c 	.word	0x2000051c
 80045c4:	c003000d 	.word	0xc003000d
 80045c8:	39c00300 	.word	0x39c00300

080045cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_MspInit+0x2c>)
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	619a      	str	r2, [r3, #24]
 80045d6:	699a      	ldr	r2, [r3, #24]
{
 80045d8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045da:	f002 0201 	and.w	r2, r2, #1
 80045de:	9200      	str	r2, [sp, #0]
 80045e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80045e8:	61da      	str	r2, [r3, #28]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045f4:	b002      	add	sp, #8
 80045f6:	4770      	bx	lr
 80045f8:	40021000 	.word	0x40021000

080045fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045fc:	e7fe      	b.n	80045fc <NMI_Handler>
 80045fe:	bf00      	nop

08004600 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004600:	e7fe      	b.n	8004600 <HardFault_Handler>
 8004602:	bf00      	nop

08004604 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004604:	e7fe      	b.n	8004604 <MemManage_Handler>
 8004606:	bf00      	nop

08004608 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004608:	e7fe      	b.n	8004608 <BusFault_Handler>
 800460a:	bf00      	nop

0800460c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800460c:	e7fe      	b.n	800460c <UsageFault_Handler>
 800460e:	bf00      	nop

08004610 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop

08004614 <DebugMon_Handler>:
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop

08004618 <PendSV_Handler>:
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop

0800461c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800461c:	f000 bdfa 	b.w	8005214 <HAL_IncTick>

08004620 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004620:	4801      	ldr	r0, [pc, #4]	; (8004628 <DMA1_Channel4_IRQHandler+0x8>)
 8004622:	f002 bab9 	b.w	8006b98 <HAL_DMA_IRQHandler>
 8004626:	bf00      	nop
 8004628:	20001988 	.word	0x20001988

0800462c <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800462c:	4801      	ldr	r0, [pc, #4]	; (8004634 <USB_HP_CAN_TX_IRQHandler+0x8>)
 800462e:	f002 b833 	b.w	8006698 <HAL_CAN_IRQHandler>
 8004632:	bf00      	nop
 8004634:	20000318 	.word	0x20000318

08004638 <USB_LP_CAN_RX0_IRQHandler>:
 8004638:	4801      	ldr	r0, [pc, #4]	; (8004640 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 800463a:	f002 b82d 	b.w	8006698 <HAL_CAN_IRQHandler>
 800463e:	bf00      	nop
 8004640:	20000318 	.word	0x20000318

08004644 <CAN_RX1_IRQHandler>:
 8004644:	4801      	ldr	r0, [pc, #4]	; (800464c <CAN_RX1_IRQHandler+0x8>)
 8004646:	f002 b827 	b.w	8006698 <HAL_CAN_IRQHandler>
 800464a:	bf00      	nop
 800464c:	20000318 	.word	0x20000318

08004650 <CAN_SCE_IRQHandler>:
 8004650:	4801      	ldr	r0, [pc, #4]	; (8004658 <CAN_SCE_IRQHandler+0x8>)
 8004652:	f002 b821 	b.w	8006698 <HAL_CAN_IRQHandler>
 8004656:	bf00      	nop
 8004658:	20000318 	.word	0x20000318

0800465c <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800465c:	4801      	ldr	r0, [pc, #4]	; (8004664 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800465e:	f003 bd85 	b.w	800816c <HAL_TIM_IRQHandler>
 8004662:	bf00      	nop
 8004664:	200005cc 	.word	0x200005cc

08004668 <TIM1_CC_IRQHandler>:
 8004668:	4801      	ldr	r0, [pc, #4]	; (8004670 <TIM1_CC_IRQHandler+0x8>)
 800466a:	f003 bd7f 	b.w	800816c <HAL_TIM_IRQHandler>
 800466e:	bf00      	nop
 8004670:	200005cc 	.word	0x200005cc

08004674 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004674:	4801      	ldr	r0, [pc, #4]	; (800467c <USART1_IRQHandler+0x8>)
 8004676:	f004 b9b9 	b.w	80089ec <HAL_UART_IRQHandler>
 800467a:	bf00      	nop
 800467c:	200019cc 	.word	0x200019cc

08004680 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004680:	4801      	ldr	r0, [pc, #4]	; (8004688 <TIM8_UP_IRQHandler+0x8>)
 8004682:	f003 bd73 	b.w	800816c <HAL_TIM_IRQHandler>
 8004686:	bf00      	nop
 8004688:	20000618 	.word	0x20000618

0800468c <TIM8_CC_IRQHandler>:
 800468c:	4801      	ldr	r0, [pc, #4]	; (8004694 <TIM8_CC_IRQHandler+0x8>)
 800468e:	f003 bd6d 	b.w	800816c <HAL_TIM_IRQHandler>
 8004692:	bf00      	nop
 8004694:	20000618 	.word	0x20000618

08004698 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004698:	2001      	movs	r0, #1
 800469a:	4770      	bx	lr

0800469c <_kill>:

int _kill(int pid, int sig)
{
 800469c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800469e:	f006 ffeb 	bl	800b678 <__errno>
 80046a2:	2316      	movs	r3, #22
 80046a4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80046a6:	f04f 30ff 	mov.w	r0, #4294967295
 80046aa:	bd08      	pop	{r3, pc}

080046ac <_exit>:

void _exit (int status)
{
 80046ac:	b508      	push	{r3, lr}
	errno = EINVAL;
 80046ae:	f006 ffe3 	bl	800b678 <__errno>
 80046b2:	2316      	movs	r3, #22
 80046b4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80046b6:	e7fe      	b.n	80046b6 <_exit+0xa>

080046b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046b8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ba:	1e16      	subs	r6, r2, #0
 80046bc:	dd07      	ble.n	80046ce <_read+0x16>
 80046be:	460c      	mov	r4, r1
 80046c0:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80046c2:	f3af 8000 	nop.w
 80046c6:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ca:	42a5      	cmp	r5, r4
 80046cc:	d1f9      	bne.n	80046c2 <_read+0xa>
	}

return len;
}
 80046ce:	4630      	mov	r0, r6
 80046d0:	bd70      	pop	{r4, r5, r6, pc}
 80046d2:	bf00      	nop

080046d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046d4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d6:	1e16      	subs	r6, r2, #0
 80046d8:	dd07      	ble.n	80046ea <_write+0x16>
 80046da:	460c      	mov	r4, r1
 80046dc:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80046de:	f814 0b01 	ldrb.w	r0, [r4], #1
 80046e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046e6:	42ac      	cmp	r4, r5
 80046e8:	d1f9      	bne.n	80046de <_write+0xa>
	}
	return len;
}
 80046ea:	4630      	mov	r0, r6
 80046ec:	bd70      	pop	{r4, r5, r6, pc}
 80046ee:	bf00      	nop

080046f0 <_close>:

int _close(int file)
{
	return -1;
}
 80046f0:	f04f 30ff 	mov.w	r0, #4294967295
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop

080046f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80046f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046fc:	604b      	str	r3, [r1, #4]
	return 0;
}
 80046fe:	2000      	movs	r0, #0
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop

08004704 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004704:	2001      	movs	r0, #1
 8004706:	4770      	bx	lr

08004708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004708:	2000      	movs	r0, #0
 800470a:	4770      	bx	lr

0800470c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800470c:	490c      	ldr	r1, [pc, #48]	; (8004740 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800470e:	4a0d      	ldr	r2, [pc, #52]	; (8004744 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004710:	680b      	ldr	r3, [r1, #0]
{
 8004712:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004714:	4c0c      	ldr	r4, [pc, #48]	; (8004748 <_sbrk+0x3c>)
 8004716:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004718:	b12b      	cbz	r3, 8004726 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800471a:	4418      	add	r0, r3
 800471c:	4290      	cmp	r0, r2
 800471e:	d807      	bhi.n	8004730 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004720:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004722:	4618      	mov	r0, r3
 8004724:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <_sbrk+0x40>)
 8004728:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800472a:	4418      	add	r0, r3
 800472c:	4290      	cmp	r0, r2
 800472e:	d9f7      	bls.n	8004720 <_sbrk+0x14>
    errno = ENOMEM;
 8004730:	f006 ffa2 	bl	800b678 <__errno>
 8004734:	230c      	movs	r3, #12
 8004736:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd10      	pop	{r4, pc}
 8004740:	200005c8 	.word	0x200005c8
 8004744:	20008000 	.word	0x20008000
 8004748:	00000400 	.word	0x00000400
 800474c:	20001ef8 	.word	0x20001ef8

08004750 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004750:	4a03      	ldr	r2, [pc, #12]	; (8004760 <SystemInit+0x10>)
 8004752:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004756:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800475a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800475e:	4770      	bx	lr
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <HAL_TIM_PWM_MspInit>:
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * tim_pwmHandle)
{
 8004764:	b500      	push	{lr}
  if (tim_pwmHandle->Instance == TIM1) {
 8004766:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <HAL_TIM_PWM_MspInit+0x8c>)
 8004768:	6803      	ldr	r3, [r0, #0]
 800476a:	4293      	cmp	r3, r2
{
 800476c:	b083      	sub	sp, #12
  if (tim_pwmHandle->Instance == TIM1) {
 800476e:	d005      	beq.n	800477c <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  } else if (tim_pwmHandle->Instance == TIM8) {
 8004770:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <HAL_TIM_PWM_MspInit+0x90>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d01f      	beq.n	80047b6 <HAL_TIM_PWM_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004776:	b003      	add	sp, #12
 8004778:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 800477c:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_TIM_PWM_MspInit+0x94>)
 800477e:	6998      	ldr	r0, [r3, #24]
 8004780:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8004784:	6198      	str	r0, [r3, #24]
 8004786:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004788:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800478a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800478e:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004790:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004792:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004794:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004796:	f002 f8bb 	bl	8006910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800479a:	2019      	movs	r0, #25
 800479c:	f002 f8f6 	bl	800698c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80047a0:	2200      	movs	r2, #0
 80047a2:	201b      	movs	r0, #27
 80047a4:	4611      	mov	r1, r2
 80047a6:	f002 f8b3 	bl	8006910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80047aa:	201b      	movs	r0, #27
}
 80047ac:	b003      	add	sp, #12
 80047ae:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80047b2:	f002 b8eb 	b.w	800698c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_TIM_PWM_MspInit+0x94>)
 80047b8:	6998      	ldr	r0, [r3, #24]
 80047ba:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80047be:	6198      	str	r0, [r3, #24]
 80047c0:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80047c2:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80047c8:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047ca:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80047cc:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047ce:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80047d0:	f002 f89e 	bl	8006910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 80047d4:	202c      	movs	r0, #44	; 0x2c
 80047d6:	f002 f8d9 	bl	800698c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80047da:	2200      	movs	r2, #0
 80047dc:	202e      	movs	r0, #46	; 0x2e
 80047de:	4611      	mov	r1, r2
 80047e0:	f002 f896 	bl	8006910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80047e4:	202e      	movs	r0, #46	; 0x2e
}
 80047e6:	b003      	add	sp, #12
 80047e8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80047ec:	f002 b8ce 	b.w	800698c <HAL_NVIC_EnableIRQ>
 80047f0:	40012c00 	.word	0x40012c00
 80047f4:	40013400 	.word	0x40013400
 80047f8:	40021000 	.word	0x40021000

080047fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef * timHandle)
{
 80047fc:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (timHandle->Instance == TIM1) {
 80047fe:	6803      	ldr	r3, [r0, #0]
 8004800:	4a28      	ldr	r2, [pc, #160]	; (80048a4 <HAL_TIM_MspPostInit+0xa8>)
{
 8004802:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004804:	2400      	movs	r4, #0
  if (timHandle->Instance == TIM1) {
 8004806:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800480c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004810:	9408      	str	r4, [sp, #32]
  if (timHandle->Instance == TIM1) {
 8004812:	d004      	beq.n	800481e <HAL_TIM_MspPostInit+0x22>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  } else if (timHandle->Instance == TIM8) {
 8004814:	4a24      	ldr	r2, [pc, #144]	; (80048a8 <HAL_TIM_MspPostInit+0xac>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d02d      	beq.n	8004876 <HAL_TIM_MspPostInit+0x7a>

    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }
}
 800481a:	b00b      	add	sp, #44	; 0x2c
 800481c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800481e:	4b23      	ldr	r3, [pc, #140]	; (80048ac <HAL_TIM_MspPostInit+0xb0>)
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004826:	615a      	str	r2, [r3, #20]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800482e:	9201      	str	r2, [sp, #4]
 8004830:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004838:	615a      	str	r2, [r3, #20]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004840:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004842:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004844:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8004846:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800484a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800484c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8004850:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004854:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004856:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004858:	f002 fb7a 	bl	8006f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800485c:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800485e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004860:	4813      	ldr	r0, [pc, #76]	; (80048b0 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004862:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004864:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004866:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800486e:	f002 fb6f 	bl	8006f50 <HAL_GPIO_Init>
}
 8004872:	b00b      	add	sp, #44	; 0x2c
 8004874:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004878:	480e      	ldr	r0, [pc, #56]	; (80048b4 <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004880:	615a      	str	r2, [r3, #20]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004888:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 800488a:	f44f 54ee 	mov.w	r4, #7616	; 0x1dc0
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800488e:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8004890:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004892:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8004894:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004898:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800489a:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800489c:	f002 fb58 	bl	8006f50 <HAL_GPIO_Init>
}
 80048a0:	b00b      	add	sp, #44	; 0x2c
 80048a2:	bd30      	pop	{r4, r5, pc}
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40013400 	.word	0x40013400
 80048ac:	40021000 	.word	0x40021000
 80048b0:	48000400 	.word	0x48000400
 80048b4:	48000800 	.word	0x48000800

080048b8 <MX_TIM1_Init>:
{
 80048b8:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048ba:	2400      	movs	r4, #0
{
 80048bc:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048be:	222c      	movs	r2, #44	; 0x2c
 80048c0:	4621      	mov	r1, r4
 80048c2:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048c4:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048c8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80048cc:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80048d0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048d4:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048d6:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048d8:	f006 fe7c 	bl	800b5d4 <memset>
  htim1.Instance = TIM1;
 80048dc:	4838      	ldr	r0, [pc, #224]	; (80049c0 <MX_TIM1_Init+0x108>)
  htim1.Init.Prescaler = 1;
 80048de:	4a39      	ldr	r2, [pc, #228]	; (80049c4 <MX_TIM1_Init+0x10c>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80048e0:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 1800;
 80048e8:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80048ec:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 80048f0:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80048f4:	f003 fa8a 	bl	8007e0c <HAL_TIM_PWM_Init>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	d144      	bne.n	8004986 <MX_TIM1_Init+0xce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80048fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004900:	2270      	movs	r2, #112	; 0x70
 8004902:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004906:	482e      	ldr	r0, [pc, #184]	; (80049c0 <MX_TIM1_Init+0x108>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004908:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800490a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800490c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800490e:	f003 ff07 	bl	8008720 <HAL_TIMEx_MasterConfigSynchronization>
 8004912:	2800      	cmp	r0, #0
 8004914:	d14a      	bne.n	80049ac <MX_TIM1_Init+0xf4>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004916:	2000      	movs	r0, #0
 8004918:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 800491a:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800491c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004920:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004922:	4827      	ldr	r0, [pc, #156]	; (80049c0 <MX_TIM1_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004924:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004926:	a904      	add	r1, sp, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004928:	e9cd 2205 	strd	r2, r2, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800492c:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800492e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004930:	f003 fd14 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 8004934:	2800      	cmp	r0, #0
 8004936:	d136      	bne.n	80049a6 <MX_TIM1_Init+0xee>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004938:	4821      	ldr	r0, [pc, #132]	; (80049c0 <MX_TIM1_Init+0x108>)
 800493a:	2204      	movs	r2, #4
 800493c:	a904      	add	r1, sp, #16
 800493e:	f003 fd0d 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 8004942:	bb68      	cbnz	r0, 80049a0 <MX_TIM1_Init+0xe8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8004944:	481e      	ldr	r0, [pc, #120]	; (80049c0 <MX_TIM1_Init+0x108>)
 8004946:	2208      	movs	r2, #8
 8004948:	a904      	add	r1, sp, #16
 800494a:	f003 fd07 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 800494e:	bb20      	cbnz	r0, 800499a <MX_TIM1_Init+0xe2>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004950:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80049b8 <MX_TIM1_Init+0x100>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004954:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = 10;
 8004956:	240a      	movs	r4, #10
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 800495c:	4818      	ldr	r0, [pc, #96]	; (80049c0 <MX_TIM1_Init+0x108>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800495e:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8004960:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004962:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 10;
 8004966:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800496a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800496e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004972:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8004976:	f003 ff19 	bl	80087ac <HAL_TIMEx_ConfigBreakDeadTime>
 800497a:	b938      	cbnz	r0, 800498c <MX_TIM1_Init+0xd4>
  HAL_TIM_MspPostInit(&htim1);
 800497c:	4810      	ldr	r0, [pc, #64]	; (80049c0 <MX_TIM1_Init+0x108>)
 800497e:	f7ff ff3d 	bl	80047fc <HAL_TIM_MspPostInit>
}
 8004982:	b018      	add	sp, #96	; 0x60
 8004984:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004986:	f7ff fc19 	bl	80041bc <Error_Handler>
 800498a:	e7b7      	b.n	80048fc <MX_TIM1_Init+0x44>
    Error_Handler();
 800498c:	f7ff fc16 	bl	80041bc <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8004990:	480b      	ldr	r0, [pc, #44]	; (80049c0 <MX_TIM1_Init+0x108>)
 8004992:	f7ff ff33 	bl	80047fc <HAL_TIM_MspPostInit>
}
 8004996:	b018      	add	sp, #96	; 0x60
 8004998:	bd10      	pop	{r4, pc}
    Error_Handler();
 800499a:	f7ff fc0f 	bl	80041bc <Error_Handler>
 800499e:	e7d7      	b.n	8004950 <MX_TIM1_Init+0x98>
    Error_Handler();
 80049a0:	f7ff fc0c 	bl	80041bc <Error_Handler>
 80049a4:	e7ce      	b.n	8004944 <MX_TIM1_Init+0x8c>
    Error_Handler();
 80049a6:	f7ff fc09 	bl	80041bc <Error_Handler>
 80049aa:	e7c5      	b.n	8004938 <MX_TIM1_Init+0x80>
    Error_Handler();
 80049ac:	f7ff fc06 	bl	80041bc <Error_Handler>
 80049b0:	e7b1      	b.n	8004916 <MX_TIM1_Init+0x5e>
 80049b2:	bf00      	nop
 80049b4:	f3af 8000 	nop.w
 80049b8:	02000000 	.word	0x02000000
 80049bc:	00000000 	.word	0x00000000
 80049c0:	200005cc 	.word	0x200005cc
 80049c4:	40012c00 	.word	0x40012c00

080049c8 <MX_TIM8_Init>:
{
 80049c8:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049ca:	2400      	movs	r4, #0
{
 80049cc:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049ce:	222c      	movs	r2, #44	; 0x2c
 80049d0:	4621      	mov	r1, r4
 80049d2:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049d4:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049d8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80049dc:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80049e0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049e4:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049e6:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049e8:	f006 fdf4 	bl	800b5d4 <memset>
  htim8.Instance = TIM8;
 80049ec:	4838      	ldr	r0, [pc, #224]	; (8004ad0 <MX_TIM8_Init+0x108>)
  htim8.Init.Prescaler = 1;
 80049ee:	4a39      	ldr	r2, [pc, #228]	; (8004ad4 <MX_TIM8_Init+0x10c>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049f0:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 1800;
 80049f8:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80049fc:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 8004a00:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8004a04:	f003 fa02 	bl	8007e0c <HAL_TIM_PWM_Init>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d145      	bne.n	8004a98 <MX_TIM8_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004a0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a10:	2270      	movs	r2, #112	; 0x70
 8004a12:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8004a16:	482e      	ldr	r0, [pc, #184]	; (8004ad0 <MX_TIM8_Init+0x108>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004a18:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8004a1a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004a1c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8004a1e:	f003 fe7f 	bl	8008720 <HAL_TIMEx_MasterConfigSynchronization>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	d14b      	bne.n	8004abe <MX_TIM8_Init+0xf6>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a26:	2000      	movs	r0, #0
 8004a28:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 8004a2a:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a30:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004a32:	4827      	ldr	r0, [pc, #156]	; (8004ad0 <MX_TIM8_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a34:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004a36:	a904      	add	r1, sp, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a38:	e9cd 2205 	strd	r2, r2, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a3c:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a3e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004a40:	f003 fc8c 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d137      	bne.n	8004ab8 <MX_TIM8_Init+0xf0>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004a48:	4821      	ldr	r0, [pc, #132]	; (8004ad0 <MX_TIM8_Init+0x108>)
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	a904      	add	r1, sp, #16
 8004a4e:	f003 fc85 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 8004a52:	bb70      	cbnz	r0, 8004ab2 <MX_TIM8_Init+0xea>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8004a54:	481e      	ldr	r0, [pc, #120]	; (8004ad0 <MX_TIM8_Init+0x108>)
 8004a56:	2208      	movs	r2, #8
 8004a58:	a904      	add	r1, sp, #16
 8004a5a:	f003 fc7f 	bl	800835c <HAL_TIM_PWM_ConfigChannel>
 8004a5e:	bb28      	cbnz	r0, 8004aac <MX_TIM8_Init+0xe4>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004a60:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8004ac8 <MX_TIM8_Init+0x100>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a64:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a6a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 10;
 8004a6e:	240a      	movs	r4, #10
  sBreakDeadTimeConfig.BreakFilter = 4;
 8004a70:	2204      	movs	r2, #4
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8004a72:	4817      	ldr	r0, [pc, #92]	; (8004ad0 <MX_TIM8_Init+0x108>)
  sBreakDeadTimeConfig.BreakFilter = 4;
 8004a74:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8004a76:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a78:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 10;
 8004a7c:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004a80:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004a84:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a86:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8004a88:	f003 fe90 	bl	80087ac <HAL_TIMEx_ConfigBreakDeadTime>
 8004a8c:	b938      	cbnz	r0, 8004a9e <MX_TIM8_Init+0xd6>
  HAL_TIM_MspPostInit(&htim8);
 8004a8e:	4810      	ldr	r0, [pc, #64]	; (8004ad0 <MX_TIM8_Init+0x108>)
 8004a90:	f7ff feb4 	bl	80047fc <HAL_TIM_MspPostInit>
}
 8004a94:	b018      	add	sp, #96	; 0x60
 8004a96:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004a98:	f7ff fb90 	bl	80041bc <Error_Handler>
 8004a9c:	e7b6      	b.n	8004a0c <MX_TIM8_Init+0x44>
    Error_Handler();
 8004a9e:	f7ff fb8d 	bl	80041bc <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8004aa2:	480b      	ldr	r0, [pc, #44]	; (8004ad0 <MX_TIM8_Init+0x108>)
 8004aa4:	f7ff feaa 	bl	80047fc <HAL_TIM_MspPostInit>
}
 8004aa8:	b018      	add	sp, #96	; 0x60
 8004aaa:	bd10      	pop	{r4, pc}
    Error_Handler();
 8004aac:	f7ff fb86 	bl	80041bc <Error_Handler>
 8004ab0:	e7d6      	b.n	8004a60 <MX_TIM8_Init+0x98>
    Error_Handler();
 8004ab2:	f7ff fb83 	bl	80041bc <Error_Handler>
 8004ab6:	e7cd      	b.n	8004a54 <MX_TIM8_Init+0x8c>
    Error_Handler();
 8004ab8:	f7ff fb80 	bl	80041bc <Error_Handler>
 8004abc:	e7c4      	b.n	8004a48 <MX_TIM8_Init+0x80>
    Error_Handler();
 8004abe:	f7ff fb7d 	bl	80041bc <Error_Handler>
 8004ac2:	e7b0      	b.n	8004a26 <MX_TIM8_Init+0x5e>
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	02000000 	.word	0x02000000
 8004acc:	00000004 	.word	0x00000004
 8004ad0:	20000618 	.word	0x20000618
 8004ad4:	40013400 	.word	0x40013400

08004ad8 <initFirstSin>:
}

/* USER CODE BEGIN 1 */
float rad_to_sin_cnv_array[1024] = {0};
inline void initFirstSin(void)
{
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < 1024; i++) {
    float temp_rad = (float)i / 256 * M_PI * 2;
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8004ada:	4d19      	ldr	r5, [pc, #100]	; (8004b40 <initFirstSin+0x68>)
 8004adc:	2300      	movs	r3, #0
    float temp_rad = (float)i / 256 * M_PI * 2;
 8004ade:	a716      	add	r7, pc, #88	; (adr r7, 8004b38 <initFirstSin+0x60>)
 8004ae0:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8004ae4:	ed2d 8b02 	vpush	{d8}
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8004ae8:	f845 3b04 	str.w	r3, [r5], #4
    float temp_rad = (float)i / 256 * M_PI * 2;
 8004aec:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8004b44 <initFirstSin+0x6c>
  for (int i = 0; i < 1024; i++) {
 8004af0:	2401      	movs	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8004af2:	ee07 4a90 	vmov	s15, r4
 8004af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 1024; i++) {
 8004afa:	3401      	adds	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8004afc:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004b00:	ee17 0a90 	vmov	r0, s15
 8004b04:	f7fb fd20 	bl	8000548 <__aeabi_f2d>
 8004b08:	4632      	mov	r2, r6
 8004b0a:	463b      	mov	r3, r7
 8004b0c:	f7fb fd74 	bl	80005f8 <__aeabi_dmul>
 8004b10:	f7fc f86a 	bl	8000be8 <__aeabi_d2f>
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8004b14:	f7fb fd18 	bl	8000548 <__aeabi_f2d>
 8004b18:	ec41 0b10 	vmov	d0, r0, r1
 8004b1c:	f004 fd34 	bl	8009588 <sin>
 8004b20:	ec51 0b10 	vmov	r0, r1, d0
 8004b24:	f7fc f860 	bl	8000be8 <__aeabi_d2f>
  for (int i = 0; i < 1024; i++) {
 8004b28:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8004b2c:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < 1024; i++) {
 8004b30:	d1df      	bne.n	8004af2 <initFirstSin+0x1a>
    // printf("rad %4.3f sin %4.3f\n",temp_rad,rad_to_sin_cnv_array[i]);
    // HAL_Delay(1);
  }
}
 8004b32:	ecbd 8b02 	vpop	{d8}
 8004b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b38:	54442d18 	.word	0x54442d18
 8004b3c:	401921fb 	.word	0x401921fb
 8004b40:	20000664 	.word	0x20000664
 8004b44:	3b800000 	.word	0x3b800000

08004b48 <setOutputRadianM0>:

inline void setOutputRadianM0(float out_rad, float output_voltage, float battery_voltage, float output_voltage_limit)
{
  int voltage_propotional_cnt;

  if (battery_voltage < BATTERY_VOLTAGE_BOTTOM) {
 8004b48:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8004b4c:	eef0 0ae0 	vabs.f32	s1, s1
 8004b50:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8004b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    battery_voltage = BATTERY_VOLTAGE_BOTTOM;
  }
  if (output_voltage < 0) {
    output_voltage = -output_voltage;
  }
  if (output_voltage > output_voltage_limit) {
 8004b58:	eef4 1ae0 	vcmpe.f32	s3, s1
 8004b5c:	bfb8      	it	lt
 8004b5e:	eeb0 1a67 	vmovlt.f32	s2, s15
 8004b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_voltage = 0;
 8004b66:	bf48      	it	mi
 8004b68:	eddf 0a2d 	vldrmi	s1, [pc, #180]	; 8004c20 <setOutputRadianM0+0xd8>
  }
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 8004b6c:	eec0 7a81 	vdiv.f32	s15, s1, s2
{
 8004b70:	b510      	push	{r4, lr}
 8004b72:	ed2d 8b02 	vpush	{d8}
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 8004b76:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8004c24 <setOutputRadianM0+0xdc>
 8004b7a:	ee67 7a88 	vmul.f32	s15, s15, s16
{
 8004b7e:	ee10 4a10 	vmov	r4, s0
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 8004b82:	ee17 0a90 	vmov	r0, s15
 8004b86:	f7fb fcdf 	bl	8000548 <__aeabi_f2d>
 8004b8a:	a31f      	add	r3, pc, #124	; (adr r3, 8004c08 <setOutputRadianM0+0xc0>)
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	f7fb fd32 	bl	80005f8 <__aeabi_dmul>
 8004b94:	f7fb ffe0 	bl	8000b58 <__aeabi_d2iz>
 8004b98:	ee08 0a90 	vmov	s17, r0

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f7fb fcd3 	bl	8000548 <__aeabi_f2d>
 8004ba2:	a31b      	add	r3, pc, #108	; (adr r3, 8004c10 <setOutputRadianM0+0xc8>)
 8004ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba8:	f7fb fb70 	bl	800028c <__adddf3>
 8004bac:	a31a      	add	r3, pc, #104	; (adr r3, 8004c18 <setOutputRadianM0+0xd0>)
 8004bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb2:	f7fb fd21 	bl	80005f8 <__aeabi_dmul>
 8004bb6:	f7fb fff7 	bl	8000ba8 <__aeabi_d2uiz>
  htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <setOutputRadianM0+0xe0>)
 8004bbc:	b2c0      	uxtb	r0, r0
 8004bbe:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8004bc2:	edd1 7a00 	vldr	s15, [r1]
  htim1.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004bc6:	ed91 6a55 	vldr	s12, [r1, #340]	; 0x154
  htim1.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004bca:	edd1 6aaa 	vldr	s13, [r1, #680]	; 0x2a8
  htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <setOutputRadianM0+0xe4>)
 8004bd0:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8004bd4:	eeb0 7a48 	vmov.f32	s14, s16
 8004bd8:	eea8 7aa7 	vfma.f32	s14, s17, s15
 8004bdc:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004bde:	eef0 7a48 	vmov.f32	s15, s16
 8004be2:	eee8 7a86 	vfma.f32	s15, s17, s12
  htim1.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004be6:	eea8 8aa6 	vfma.f32	s16, s17, s13
  htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004bea:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim1.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004bee:	eebc 8ac8 	vcvt.u32.f32	s16, s16
  htim1.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004bf6:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004bfa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004bfe:	ed83 8a0f 	vstr	s16, [r3, #60]	; 0x3c
}
 8004c02:	ecbd 8b02 	vpop	{d8}
 8004c06:	bd10      	pop	{r4, pc}
 8004c08:	b4395810 	.word	0xb4395810
 8004c0c:	3ff276c8 	.word	0x3ff276c8
 8004c10:	54442d18 	.word	0x54442d18
 8004c14:	402921fb 	.word	0x402921fb
 8004c18:	3d5bfeba 	.word	0x3d5bfeba
 8004c1c:	40444ad1 	.word	0x40444ad1
 8004c20:	00000000 	.word	0x00000000
 8004c24:	44610000 	.word	0x44610000
 8004c28:	20000664 	.word	0x20000664
 8004c2c:	200005cc 	.word	0x200005cc

08004c30 <setOutputRadianM1>:

inline void setOutputRadianM1(float out_rad, float output_voltage, float battery_voltage, float output_voltage_limit)
{
  int voltage_propotional_cnt;
  if (battery_voltage < BATTERY_VOLTAGE_BOTTOM) {
 8004c30:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8004c34:	eef0 0ae0 	vabs.f32	s1, s1
 8004c38:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8004c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    battery_voltage = BATTERY_VOLTAGE_BOTTOM;
  }
  if (output_voltage < 0) {
    output_voltage = -output_voltage;
  }
  if (output_voltage > output_voltage_limit) {
 8004c40:	eef4 1ae0 	vcmpe.f32	s3, s1
 8004c44:	bfb8      	it	lt
 8004c46:	eeb0 1a67 	vmovlt.f32	s2, s15
 8004c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_voltage = 0;
 8004c4e:	bf48      	it	mi
 8004c50:	eddf 0a2d 	vldrmi	s1, [pc, #180]	; 8004d08 <setOutputRadianM1+0xd8>
  }
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 8004c54:	eec0 7a81 	vdiv.f32	s15, s1, s2
{
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	ed2d 8b02 	vpush	{d8}
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 8004c5e:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8004d0c <setOutputRadianM1+0xdc>
 8004c62:	ee67 7a88 	vmul.f32	s15, s15, s16
{
 8004c66:	ee10 4a10 	vmov	r4, s0
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 8004c6a:	ee17 0a90 	vmov	r0, s15
 8004c6e:	f7fb fc6b 	bl	8000548 <__aeabi_f2d>
 8004c72:	a31f      	add	r3, pc, #124	; (adr r3, 8004cf0 <setOutputRadianM1+0xc0>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb fcbe 	bl	80005f8 <__aeabi_dmul>
 8004c7c:	f7fb ff6c 	bl	8000b58 <__aeabi_d2iz>
 8004c80:	ee08 0a90 	vmov	s17, r0

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7fb fc5f 	bl	8000548 <__aeabi_f2d>
 8004c8a:	a31b      	add	r3, pc, #108	; (adr r3, 8004cf8 <setOutputRadianM1+0xc8>)
 8004c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c90:	f7fb fafc 	bl	800028c <__adddf3>
 8004c94:	a31a      	add	r3, pc, #104	; (adr r3, 8004d00 <setOutputRadianM1+0xd0>)
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f7fb fcad 	bl	80005f8 <__aeabi_dmul>
 8004c9e:	f7fb ff83 	bl	8000ba8 <__aeabi_d2uiz>
  htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004ca2:	4b1b      	ldr	r3, [pc, #108]	; (8004d10 <setOutputRadianM1+0xe0>)
 8004ca4:	b2c0      	uxtb	r0, r0
 8004ca6:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8004caa:	edd1 7a00 	vldr	s15, [r1]
  htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004cae:	ed91 6a55 	vldr	s12, [r1, #340]	; 0x154
  htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004cb2:	edd1 6aaa 	vldr	s13, [r1, #680]	; 0x2a8
  htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004cb6:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <setOutputRadianM1+0xe4>)
 8004cb8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8004cbc:	eeb0 7a48 	vmov.f32	s14, s16
 8004cc0:	eea8 7aa7 	vfma.f32	s14, s17, s15
 8004cc4:	681b      	ldr	r3, [r3, #0]
  htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004cc6:	eef0 7a48 	vmov.f32	s15, s16
 8004cca:	eee8 7a86 	vfma.f32	s15, s17, s12
  htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004cce:	eea8 8aa6 	vfma.f32	s16, s17, s13
  htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004cd2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004cd6:	eebc 8ac8 	vcvt.u32.f32	s16, s16
  htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004cda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004cde:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
  htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004ce2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004ce6:	ed83 8a0f 	vstr	s16, [r3, #60]	; 0x3c
}
 8004cea:	ecbd 8b02 	vpop	{d8}
 8004cee:	bd10      	pop	{r4, pc}
 8004cf0:	b4395810 	.word	0xb4395810
 8004cf4:	3ff276c8 	.word	0x3ff276c8
 8004cf8:	54442d18 	.word	0x54442d18
 8004cfc:	402921fb 	.word	0x402921fb
 8004d00:	3d5bfeba 	.word	0x3d5bfeba
 8004d04:	40444ad1 	.word	0x40444ad1
 8004d08:	00000000 	.word	0x00000000
 8004d0c:	44610000 	.word	0x44610000
 8004d10:	20000664 	.word	0x20000664
 8004d14:	20000618 	.word	0x20000618

08004d18 <setPwmAll>:

void setPwmAll(uint32_t pwm_cnt)
{
  htim8.Instance->CCR1 = pwm_cnt;
 8004d18:	4a05      	ldr	r2, [pc, #20]	; (8004d30 <setPwmAll+0x18>)
  htim8.Instance->CCR2 = pwm_cnt;
  htim8.Instance->CCR3 = pwm_cnt;
  htim1.Instance->CCR1 = pwm_cnt;
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <setPwmAll+0x1c>)
  htim8.Instance->CCR1 = pwm_cnt;
 8004d1c:	6812      	ldr	r2, [r2, #0]
  htim1.Instance->CCR1 = pwm_cnt;
 8004d1e:	681b      	ldr	r3, [r3, #0]
  htim8.Instance->CCR1 = pwm_cnt;
 8004d20:	6350      	str	r0, [r2, #52]	; 0x34
  htim8.Instance->CCR2 = pwm_cnt;
 8004d22:	6390      	str	r0, [r2, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt;
 8004d24:	63d0      	str	r0, [r2, #60]	; 0x3c
  htim1.Instance->CCR1 = pwm_cnt;
 8004d26:	6358      	str	r0, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = pwm_cnt;
 8004d28:	6398      	str	r0, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt;
 8004d2a:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000618 	.word	0x20000618
 8004d34:	200005cc 	.word	0x200005cc

08004d38 <forceStopAllPwmOutputAndTimer>:

void forceStopAllPwmOutputAndTimer(void)
{
 8004d38:	b538      	push	{r3, r4, r5, lr}
  HAL_TIM_Base_Stop_IT(&htim1);
 8004d3a:	4c25      	ldr	r4, [pc, #148]	; (8004dd0 <forceStopAllPwmOutputAndTimer+0x98>)
  HAL_TIM_Base_Stop_IT(&htim8);
 8004d3c:	4d25      	ldr	r5, [pc, #148]	; (8004dd4 <forceStopAllPwmOutputAndTimer+0x9c>)
  HAL_TIM_Base_Stop_IT(&htim1);
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f003 f84c 	bl	8007ddc <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim8);
 8004d44:	4628      	mov	r0, r5
 8004d46:	f003 f849 	bl	8007ddc <HAL_TIM_Base_Stop_IT>

  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f003 f98b 	bl	8008068 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8004d52:	2104      	movs	r1, #4
 8004d54:	4620      	mov	r0, r4
 8004d56:	f003 f987 	bl	8008068 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8004d5a:	2108      	movs	r1, #8
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f003 f983 	bl	8008068 <HAL_TIM_PWM_Stop>

  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8004d62:	2100      	movs	r1, #0
 8004d64:	4628      	mov	r0, r5
 8004d66:	f003 f97f 	bl	8008068 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8004d6a:	2104      	movs	r1, #4
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	f003 f97b 	bl	8008068 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8004d72:	2108      	movs	r1, #8
 8004d74:	4628      	mov	r0, r5
 8004d76:	f003 f977 	bl	8008068 <HAL_TIM_PWM_Stop>

  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f003 fc89 	bl	8008694 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8004d82:	2104      	movs	r1, #4
 8004d84:	4620      	mov	r0, r4
 8004d86:	f003 fc85 	bl	8008694 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8004d8a:	2108      	movs	r1, #8
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f003 fc81 	bl	8008694 <HAL_TIMEx_PWMN_Stop>

  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8004d92:	2100      	movs	r1, #0
 8004d94:	4628      	mov	r0, r5
 8004d96:	f003 fc7d 	bl	8008694 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8004d9a:	2104      	movs	r1, #4
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f003 fc79 	bl	8008694 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8004da2:	2108      	movs	r1, #8
 8004da4:	4628      	mov	r0, r5
 8004da6:	f003 fc75 	bl	8008694 <HAL_TIMEx_PWMN_Stop>
  htim8.Instance->CCR1 = pwm_cnt;
 8004daa:	6829      	ldr	r1, [r5, #0]
  htim1.Instance->CCR1 = pwm_cnt;
 8004dac:	6822      	ldr	r2, [r4, #0]
  htim8.Instance->CCR1 = pwm_cnt;
 8004dae:	f44f 7361 	mov.w	r3, #900	; 0x384
 8004db2:	634b      	str	r3, [r1, #52]	; 0x34
  htim8.Instance->CCR2 = pwm_cnt;
 8004db4:	638b      	str	r3, [r1, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt;
 8004db6:	63cb      	str	r3, [r1, #60]	; 0x3c
  htim1.Instance->CCR1 = pwm_cnt;
 8004db8:	6353      	str	r3, [r2, #52]	; 0x34
  htim1.Instance->CCR2 = pwm_cnt;
 8004dba:	6393      	str	r3, [r2, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt;
 8004dbc:	63d3      	str	r3, [r2, #60]	; 0x3c

  setPwmAll(TIM_PWM_CENTER);

  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 8004dbe:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8004dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dc4:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 8004dc6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004dc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004dcc:	6453      	str	r3, [r2, #68]	; 0x44
}
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	200005cc 	.word	0x200005cc
 8004dd4:	20000618 	.word	0x20000618

08004dd8 <setPwmOutPutFreeWheel>:

void setPwmOutPutFreeWheel(void)
{
 8004dd8:	b538      	push	{r3, r4, r5, lr}
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004dda:	4d1a      	ldr	r5, [pc, #104]	; (8004e44 <setPwmOutPutFreeWheel+0x6c>)
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);

  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8004ddc:	4c1a      	ldr	r4, [pc, #104]	; (8004e48 <setPwmOutPutFreeWheel+0x70>)
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004dde:	2100      	movs	r1, #0
 8004de0:	4628      	mov	r0, r5
 8004de2:	f003 f941 	bl	8008068 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8004de6:	2104      	movs	r1, #4
 8004de8:	4628      	mov	r0, r5
 8004dea:	f003 f93d 	bl	8008068 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8004dee:	2108      	movs	r1, #8
 8004df0:	4628      	mov	r0, r5
 8004df2:	f003 f939 	bl	8008068 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8004df6:	2100      	movs	r1, #0
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f003 f935 	bl	8008068 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8004dfe:	2104      	movs	r1, #4
 8004e00:	4620      	mov	r0, r4
 8004e02:	f003 f931 	bl	8008068 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8004e06:	2108      	movs	r1, #8
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f003 f92d 	bl	8008068 <HAL_TIM_PWM_Stop>

  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4628      	mov	r0, r5
 8004e12:	f003 fc3f 	bl	8008694 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8004e16:	2104      	movs	r1, #4
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f003 fc3b 	bl	8008694 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8004e1e:	2108      	movs	r1, #8
 8004e20:	4628      	mov	r0, r5
 8004e22:	f003 fc37 	bl	8008694 <HAL_TIMEx_PWMN_Stop>

  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8004e26:	2100      	movs	r1, #0
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f003 fc33 	bl	8008694 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8004e2e:	2104      	movs	r1, #4
 8004e30:	4620      	mov	r0, r4
 8004e32:	f003 fc2f 	bl	8008694 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8004e36:	4620      	mov	r0, r4
 8004e38:	2108      	movs	r1, #8
}
 8004e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8004e3e:	f003 bc29 	b.w	8008694 <HAL_TIMEx_PWMN_Stop>
 8004e42:	bf00      	nop
 8004e44:	200005cc 	.word	0x200005cc
 8004e48:	20000618 	.word	0x20000618

08004e4c <resumePwmOutput>:

void resumePwmOutput(void)
{
 8004e4c:	b538      	push	{r3, r4, r5, lr}
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004e4e:	4d1a      	ldr	r5, [pc, #104]	; (8004eb8 <resumePwmOutput+0x6c>)
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004e50:	4c1a      	ldr	r4, [pc, #104]	; (8004ebc <resumePwmOutput+0x70>)
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8004e52:	2100      	movs	r1, #0
 8004e54:	4628      	mov	r0, r5
 8004e56:	f003 f861 	bl	8007f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8004e5a:	2104      	movs	r1, #4
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	f003 f85d 	bl	8007f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8004e62:	2108      	movs	r1, #8
 8004e64:	4628      	mov	r0, r5
 8004e66:	f003 f859 	bl	8007f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f003 f855 	bl	8007f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004e72:	2104      	movs	r1, #4
 8004e74:	4620      	mov	r0, r4
 8004e76:	f003 f851 	bl	8007f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004e7a:	2108      	movs	r1, #8
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f003 f84d 	bl	8007f1c <HAL_TIM_PWM_Start>

  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8004e82:	2100      	movs	r1, #0
 8004e84:	4628      	mov	r0, r5
 8004e86:	f003 fba3 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8004e8a:	2104      	movs	r1, #4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f003 fb9f 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8004e92:	2108      	movs	r1, #8
 8004e94:	4628      	mov	r0, r5
 8004e96:	f003 fb9b 	bl	80085d0 <HAL_TIMEx_PWMN_Start>

  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f003 fb97 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004ea2:	2104      	movs	r1, #4
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f003 fb93 	bl	80085d0 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004eaa:	4620      	mov	r0, r4
 8004eac:	2108      	movs	r1, #8
}
 8004eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004eb2:	f003 bb8d 	b.w	80085d0 <HAL_TIMEx_PWMN_Start>
 8004eb6:	bf00      	nop
 8004eb8:	20000618 	.word	0x20000618
 8004ebc:	200005cc 	.word	0x200005cc

08004ec0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ec0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ec2:	480b      	ldr	r0, [pc, #44]	; (8004ef0 <MX_USART1_UART_Init+0x30>)
 8004ec4:	4c0b      	ldr	r4, [pc, #44]	; (8004ef4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 8004ec6:	490c      	ldr	r1, [pc, #48]	; (8004ef8 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ec8:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004eca:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 8004ecc:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ed0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ed4:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ed8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004edc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ee0:	f004 f92a 	bl	8009138 <HAL_UART_Init>
 8004ee4:	b900      	cbnz	r0, 8004ee8 <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ee6:	bd10      	pop	{r4, pc}
 8004ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004eec:	f7ff b966 	b.w	80041bc <Error_Handler>
 8004ef0:	200019cc 	.word	0x200019cc
 8004ef4:	40013800 	.word	0x40013800
 8004ef8:	001e8480 	.word	0x001e8480

08004efc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8004f00:	4b2e      	ldr	r3, [pc, #184]	; (8004fbc <HAL_UART_MspInit+0xc0>)
 8004f02:	6802      	ldr	r2, [r0, #0]
{
 8004f04:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f06:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8004f08:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f0a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004f0e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004f12:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8004f14:	d002      	beq.n	8004f1c <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004f16:	b008      	add	sp, #32
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f1c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f20:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f24:	699a      	ldr	r2, [r3, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004f26:	4e26      	ldr	r6, [pc, #152]	; (8004fc0 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f2c:	619a      	str	r2, [r3, #24]
 8004f2e:	699a      	ldr	r2, [r3, #24]
 8004f30:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004f34:	9200      	str	r2, [sp, #0]
 8004f36:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004f3e:	615a      	str	r2, [r3, #20]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f46:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f48:	2210      	movs	r2, #16
 8004f4a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f4c:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f4e:	a902      	add	r1, sp, #8
 8004f50:	4605      	mov	r5, r0
 8004f52:	481c      	ldr	r0, [pc, #112]	; (8004fc4 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004f54:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f58:	e9cd 8705 	strd	r8, r7, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f5c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f5e:	f001 fff7 	bl	8006f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f62:	2220      	movs	r2, #32
 8004f64:	2302      	movs	r3, #2
 8004f66:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f6a:	4816      	ldr	r0, [pc, #88]	; (8004fc4 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f6c:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f70:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f72:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f74:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f76:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f78:	f001 ffea 	bl	8006f50 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f7c:	4a12      	ldr	r2, [pc, #72]	; (8004fc8 <HAL_UART_MspInit+0xcc>)
 8004f7e:	2310      	movs	r3, #16
 8004f80:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004f84:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f8c:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f90:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004f94:	f001 fd34 	bl	8006a00 <HAL_DMA_Init>
 8004f98:	b960      	cbnz	r0, 8004fb4 <HAL_UART_MspInit+0xb8>
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	210f      	movs	r1, #15
 8004f9e:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004fa0:	672e      	str	r6, [r5, #112]	; 0x70
 8004fa2:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8004fa4:	f001 fcb4 	bl	8006910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004fa8:	2025      	movs	r0, #37	; 0x25
 8004faa:	f001 fcef 	bl	800698c <HAL_NVIC_EnableIRQ>
}
 8004fae:	b008      	add	sp, #32
 8004fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8004fb4:	f7ff f902 	bl	80041bc <Error_Handler>
 8004fb8:	e7ef      	b.n	8004f9a <HAL_UART_MspInit+0x9e>
 8004fba:	bf00      	nop
 8004fbc:	40013800 	.word	0x40013800
 8004fc0:	20001988 	.word	0x20001988
 8004fc4:	48000800 	.word	0x48000800
 8004fc8:	40020044 	.word	0x40020044

08004fcc <HAL_UART_TxCpltCallback>:
volatile bool is_in_printf_func = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

  if (sending_first_buf)
 8004fcc:	4a1a      	ldr	r2, [pc, #104]	; (8005038 <HAL_UART_TxCpltCallback+0x6c>)
{
 8004fce:	b538      	push	{r3, r4, r5, lr}
  if (sending_first_buf)
 8004fd0:	7813      	ldrb	r3, [r2, #0]
 8004fd2:	b15b      	cbz	r3, 8004fec <HAL_UART_TxCpltCallback+0x20>
  {                            // FIRST buf complete
    sending_first_buf = false; // complete!
 8004fd4:	2300      	movs	r3, #0

    if (second_buf_len > 0 && is_in_printf_func == false)
 8004fd6:	4c19      	ldr	r4, [pc, #100]	; (800503c <HAL_UART_TxCpltCallback+0x70>)
    sending_first_buf = false; // complete!
 8004fd8:	7013      	strb	r3, [r2, #0]
    if (second_buf_len > 0 && is_in_printf_func == false)
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	dd04      	ble.n	8004fea <HAL_UART_TxCpltCallback+0x1e>
 8004fe0:	4b17      	ldr	r3, [pc, #92]	; (8005040 <HAL_UART_TxCpltCallback+0x74>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004fe8:	b1db      	cbz	r3, 8005022 <HAL_UART_TxCpltCallback+0x56>
      sending_first_buf = true;
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
      first_buf_len = 0;
    }
  }
}
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
  else if (sending_second_buf)
 8004fec:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004ff0:	4b14      	ldr	r3, [pc, #80]	; (8005044 <HAL_UART_TxCpltCallback+0x78>)
 8004ff2:	7818      	ldrb	r0, [r3, #0]
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d0f8      	beq.n	8004fea <HAL_UART_TxCpltCallback+0x1e>
    if (first_buf_len > 0 && is_in_printf_func == false)
 8004ff8:	4c13      	ldr	r4, [pc, #76]	; (8005048 <HAL_UART_TxCpltCallback+0x7c>)
    sending_second_buf = false; // complete!
 8004ffa:	7019      	strb	r1, [r3, #0]
    if (first_buf_len > 0 && is_in_printf_func == false)
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	ddf3      	ble.n	8004fea <HAL_UART_TxCpltCallback+0x1e>
 8005002:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <HAL_UART_TxCpltCallback+0x74>)
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ed      	bne.n	8004fea <HAL_UART_TxCpltCallback+0x1e>
      sending_first_buf = true;
 800500e:	2301      	movs	r3, #1
 8005010:	7013      	strb	r3, [r2, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	490d      	ldr	r1, [pc, #52]	; (800504c <HAL_UART_TxCpltCallback+0x80>)
 8005016:	480e      	ldr	r0, [pc, #56]	; (8005050 <HAL_UART_TxCpltCallback+0x84>)
 8005018:	b292      	uxth	r2, r2
 800501a:	f003 fc13 	bl	8008844 <HAL_UART_Transmit_DMA>
      first_buf_len = 0;
 800501e:	6025      	str	r5, [r4, #0]
}
 8005020:	bd38      	pop	{r3, r4, r5, pc}
      sending_second_buf = true;
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <HAL_UART_TxCpltCallback+0x78>)
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 8005024:	490b      	ldr	r1, [pc, #44]	; (8005054 <HAL_UART_TxCpltCallback+0x88>)
 8005026:	480a      	ldr	r0, [pc, #40]	; (8005050 <HAL_UART_TxCpltCallback+0x84>)
      sending_second_buf = true;
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 800502c:	6822      	ldr	r2, [r4, #0]
 800502e:	b292      	uxth	r2, r2
 8005030:	f003 fc08 	bl	8008844 <HAL_UART_Transmit_DMA>
      second_buf_len = 0;
 8005034:	6025      	str	r5, [r4, #0]
}
 8005036:	bd38      	pop	{r3, r4, r5, pc}
 8005038:	20001d7c 	.word	0x20001d7c
 800503c:	20001d78 	.word	0x20001d78
 8005040:	20001a54 	.word	0x20001a54
 8005044:	20001d7d 	.word	0x20001d7d
 8005048:	20001984 	.word	0x20001984
 800504c:	20001664 	.word	0x20001664
 8005050:	200019cc 	.word	0x200019cc
 8005054:	20001a58 	.word	0x20001a58

08005058 <p>:

void p(const char *format, ...)
{
 8005058:	b40f      	push	{r0, r1, r2, r3}
 800505a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  va_list ap;
  va_start(ap, format);
  is_in_printf_func = true;
 800505e:	4c35      	ldr	r4, [pc, #212]	; (8005134 <p+0xdc>)

  if (sending_first_buf)
 8005060:	4d35      	ldr	r5, [pc, #212]	; (8005138 <p+0xe0>)
{
 8005062:	b082      	sub	sp, #8
  is_in_printf_func = true;
 8005064:	2601      	movs	r6, #1
{
 8005066:	aa08      	add	r2, sp, #32
  is_in_printf_func = true;
 8005068:	7026      	strb	r6, [r4, #0]
  if (sending_first_buf)
 800506a:	782b      	ldrb	r3, [r5, #0]
{
 800506c:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(ap, format);
 8005070:	9201      	str	r2, [sp, #4]
  if (sending_first_buf)
 8005072:	b30b      	cbz	r3, 80050b8 <p+0x60>
  {
    if (second_buf_len > UART_TEMP_BUF_SIZE / 2)
 8005074:	4e31      	ldr	r6, [pc, #196]	; (800513c <p+0xe4>)
 8005076:	6833      	ldr	r3, [r6, #0]
 8005078:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800507c:	dd06      	ble.n	800508c <p+0x34>
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
    first_buf_len = (int)strlen(first_buf);
    first_buf_len = 0;
    second_buf_len = 0;
  }
  is_in_printf_func = false;
 800507e:	2300      	movs	r3, #0
 8005080:	7023      	strb	r3, [r4, #0]
  return;
}
 8005082:	b002      	add	sp, #8
 8005084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005088:	b004      	add	sp, #16
 800508a:	4770      	bx	lr
    second_buf_len += vsprintf(second_buf + second_buf_len, format, ap);
 800508c:	6830      	ldr	r0, [r6, #0]
 800508e:	4f2c      	ldr	r7, [pc, #176]	; (8005140 <p+0xe8>)
 8005090:	4438      	add	r0, r7
 8005092:	f006 fa95 	bl	800b5c0 <vsiprintf>
 8005096:	6833      	ldr	r3, [r6, #0]
 8005098:	4418      	add	r0, r3
 800509a:	6030      	str	r0, [r6, #0]
    if (sending_first_buf == false)
 800509c:	782b      	ldrb	r3, [r5, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1ed      	bne.n	800507e <p+0x26>
      second_buf_len = (int)strlen(second_buf);
 80050a2:	4638      	mov	r0, r7
 80050a4:	f7fb f8e4 	bl	8000270 <strlen>
 80050a8:	6030      	str	r0, [r6, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len); // 2ms
 80050aa:	6832      	ldr	r2, [r6, #0]
 80050ac:	4825      	ldr	r0, [pc, #148]	; (8005144 <p+0xec>)
 80050ae:	4639      	mov	r1, r7
 80050b0:	b292      	uxth	r2, r2
 80050b2:	f003 fbc7 	bl	8008844 <HAL_UART_Transmit_DMA>
 80050b6:	e7e2      	b.n	800507e <p+0x26>
  else if (sending_second_buf)
 80050b8:	4f23      	ldr	r7, [pc, #140]	; (8005148 <p+0xf0>)
 80050ba:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80050be:	783b      	ldrb	r3, [r7, #0]
 80050c0:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 80050c4:	b303      	cbz	r3, 8005108 <p+0xb0>
    if (first_buf_len > UART_TEMP_BUF_SIZE / 2)
 80050c6:	4d21      	ldr	r5, [pc, #132]	; (800514c <p+0xf4>)
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80050ce:	dd05      	ble.n	80050dc <p+0x84>
      is_in_printf_func = false;
 80050d0:	7020      	strb	r0, [r4, #0]
}
 80050d2:	b002      	add	sp, #8
 80050d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050d8:	b004      	add	sp, #16
 80050da:	4770      	bx	lr
    first_buf_len += vsprintf(first_buf + first_buf_len, format, ap);
 80050dc:	6828      	ldr	r0, [r5, #0]
 80050de:	4e1c      	ldr	r6, [pc, #112]	; (8005150 <p+0xf8>)
 80050e0:	4430      	add	r0, r6
 80050e2:	f006 fa6d 	bl	800b5c0 <vsiprintf>
 80050e6:	682b      	ldr	r3, [r5, #0]
 80050e8:	4418      	add	r0, r3
 80050ea:	6028      	str	r0, [r5, #0]
    if (sending_second_buf == false)
 80050ec:	783b      	ldrb	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1c5      	bne.n	800507e <p+0x26>
      first_buf_len = (int)strlen(first_buf);
 80050f2:	4630      	mov	r0, r6
 80050f4:	f7fb f8bc 	bl	8000270 <strlen>
 80050f8:	6028      	str	r0, [r5, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 80050fa:	682a      	ldr	r2, [r5, #0]
 80050fc:	4811      	ldr	r0, [pc, #68]	; (8005144 <p+0xec>)
 80050fe:	4631      	mov	r1, r6
 8005100:	b292      	uxth	r2, r2
 8005102:	f003 fb9f 	bl	8008844 <HAL_UART_Transmit_DMA>
 8005106:	e7ba      	b.n	800507e <p+0x26>
    first_buf_len = vsprintf(first_buf, format, ap);
 8005108:	4811      	ldr	r0, [pc, #68]	; (8005150 <p+0xf8>)
 800510a:	4f10      	ldr	r7, [pc, #64]	; (800514c <p+0xf4>)
 800510c:	f006 fa58 	bl	800b5c0 <vsiprintf>
 8005110:	6038      	str	r0, [r7, #0]
    sending_first_buf = true;
 8005112:	702e      	strb	r6, [r5, #0]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	490e      	ldr	r1, [pc, #56]	; (8005150 <p+0xf8>)
 8005118:	480a      	ldr	r0, [pc, #40]	; (8005144 <p+0xec>)
 800511a:	b292      	uxth	r2, r2
 800511c:	f003 fb92 	bl	8008844 <HAL_UART_Transmit_DMA>
    first_buf_len = (int)strlen(first_buf);
 8005120:	480b      	ldr	r0, [pc, #44]	; (8005150 <p+0xf8>)
 8005122:	f7fb f8a5 	bl	8000270 <strlen>
    second_buf_len = 0;
 8005126:	4b05      	ldr	r3, [pc, #20]	; (800513c <p+0xe4>)
    first_buf_len = (int)strlen(first_buf);
 8005128:	6038      	str	r0, [r7, #0]
    first_buf_len = 0;
 800512a:	f8c7 8000 	str.w	r8, [r7]
    second_buf_len = 0;
 800512e:	f8c3 8000 	str.w	r8, [r3]
 8005132:	e7a4      	b.n	800507e <p+0x26>
 8005134:	20001a54 	.word	0x20001a54
 8005138:	20001d7c 	.word	0x20001d7c
 800513c:	20001d78 	.word	0x20001d78
 8005140:	20001a58 	.word	0x20001a58
 8005144:	200019cc 	.word	0x200019cc
 8005148:	20001d7d 	.word	0x20001d7d
 800514c:	20001984 	.word	0x20001984
 8005150:	20001664 	.word	0x20001664

08005154 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800518c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005158:	480d      	ldr	r0, [pc, #52]	; (8005190 <LoopForever+0x6>)
  ldr r1, =_edata
 800515a:	490e      	ldr	r1, [pc, #56]	; (8005194 <LoopForever+0xa>)
  ldr r2, =_sidata
 800515c:	4a0e      	ldr	r2, [pc, #56]	; (8005198 <LoopForever+0xe>)
  movs r3, #0
 800515e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005160:	e002      	b.n	8005168 <LoopCopyDataInit>

08005162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005166:	3304      	adds	r3, #4

08005168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800516a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800516c:	d3f9      	bcc.n	8005162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800516e:	4a0b      	ldr	r2, [pc, #44]	; (800519c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005170:	4c0b      	ldr	r4, [pc, #44]	; (80051a0 <LoopForever+0x16>)
  movs r3, #0
 8005172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005174:	e001      	b.n	800517a <LoopFillZerobss>

08005176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005178:	3204      	adds	r2, #4

0800517a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800517a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800517c:	d3fb      	bcc.n	8005176 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800517e:	f7ff fae7 	bl	8004750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005182:	f006 fa7f 	bl	800b684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005186:	f7fe f91b 	bl	80033c0 <main>

0800518a <LoopForever>:

LoopForever:
    b LoopForever
 800518a:	e7fe      	b.n	800518a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800518c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005194:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8005198:	0800e3dc 	.word	0x0800e3dc
  ldr r2, =_sbss
 800519c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80051a0:	20001ef4 	.word	0x20001ef4

080051a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80051a4:	e7fe      	b.n	80051a4 <ADC1_2_IRQHandler>
	...

080051a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051aa:	4a0e      	ldr	r2, [pc, #56]	; (80051e4 <HAL_InitTick+0x3c>)
 80051ac:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <HAL_InitTick+0x40>)
 80051ae:	7812      	ldrb	r2, [r2, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
{
 80051b2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80051b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051b8:	fbb0 f0f2 	udiv	r0, r0, r2
 80051bc:	fbb3 f0f0 	udiv	r0, r3, r0
 80051c0:	f001 fc04 	bl	80069cc <HAL_SYSTICK_Config>
 80051c4:	b908      	cbnz	r0, 80051ca <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051c6:	2d0f      	cmp	r5, #15
 80051c8:	d901      	bls.n	80051ce <HAL_InitTick+0x26>
    return HAL_ERROR;
 80051ca:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80051cc:	bd38      	pop	{r3, r4, r5, pc}
 80051ce:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051d0:	4602      	mov	r2, r0
 80051d2:	4629      	mov	r1, r5
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295
 80051d8:	f001 fb9a 	bl	8006910 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051dc:	4b03      	ldr	r3, [pc, #12]	; (80051ec <HAL_InitTick+0x44>)
 80051de:	4620      	mov	r0, r4
 80051e0:	601d      	str	r5, [r3, #0]
}
 80051e2:	bd38      	pop	{r3, r4, r5, pc}
 80051e4:	2000000c 	.word	0x2000000c
 80051e8:	20000008 	.word	0x20000008
 80051ec:	20000010 	.word	0x20000010

080051f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051f0:	4a07      	ldr	r2, [pc, #28]	; (8005210 <HAL_Init+0x20>)
{
 80051f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051f4:	6813      	ldr	r3, [r2, #0]
 80051f6:	f043 0310 	orr.w	r3, r3, #16
 80051fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051fc:	2003      	movs	r0, #3
 80051fe:	f001 fb75 	bl	80068ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005202:	200f      	movs	r0, #15
 8005204:	f7ff ffd0 	bl	80051a8 <HAL_InitTick>
  HAL_MspInit();
 8005208:	f7ff f9e0 	bl	80045cc <HAL_MspInit>
}
 800520c:	2000      	movs	r0, #0
 800520e:	bd08      	pop	{r3, pc}
 8005210:	40022000 	.word	0x40022000

08005214 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005214:	4a03      	ldr	r2, [pc, #12]	; (8005224 <HAL_IncTick+0x10>)
 8005216:	4b04      	ldr	r3, [pc, #16]	; (8005228 <HAL_IncTick+0x14>)
 8005218:	6811      	ldr	r1, [r2, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	440b      	add	r3, r1
 800521e:	6013      	str	r3, [r2, #0]
}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20001d80 	.word	0x20001d80
 8005228:	2000000c 	.word	0x2000000c

0800522c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800522c:	4b01      	ldr	r3, [pc, #4]	; (8005234 <HAL_GetTick+0x8>)
 800522e:	6818      	ldr	r0, [r3, #0]
}
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	20001d80 	.word	0x20001d80

08005238 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800523c:	f7ff fff6 	bl	800522c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005240:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005242:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005244:	d002      	beq.n	800524c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005246:	4b04      	ldr	r3, [pc, #16]	; (8005258 <HAL_Delay+0x20>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800524c:	f7ff ffee 	bl	800522c <HAL_GetTick>
 8005250:	1b43      	subs	r3, r0, r5
 8005252:	42a3      	cmp	r3, r4
 8005254:	d3fa      	bcc.n	800524c <HAL_Delay+0x14>
  {
  }
}
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	2000000c 	.word	0x2000000c

0800525c <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800525c:	6802      	ldr	r2, [r0, #0]
{
 800525e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005260:	6893      	ldr	r3, [r2, #8]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	2b01      	cmp	r3, #1
 8005268:	d001      	beq.n	800526e <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800526a:	2000      	movs	r0, #0
}
 800526c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800526e:	6811      	ldr	r1, [r2, #0]
 8005270:	07cc      	lsls	r4, r1, #31
 8005272:	d5fa      	bpl.n	800526a <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005274:	6891      	ldr	r1, [r2, #8]
 8005276:	f001 010d 	and.w	r1, r1, #13
 800527a:	2901      	cmp	r1, #1
 800527c:	4604      	mov	r4, r0
 800527e:	d009      	beq.n	8005294 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005280:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005282:	f042 0210 	orr.w	r2, r2, #16
 8005286:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005288:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800528a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800528c:	f043 0301 	orr.w	r3, r3, #1
 8005290:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005292:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8005294:	6893      	ldr	r3, [r2, #8]
 8005296:	2103      	movs	r1, #3
 8005298:	f043 0302 	orr.w	r3, r3, #2
 800529c:	6093      	str	r3, [r2, #8]
 800529e:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80052a0:	f7ff ffc4 	bl	800522c <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80052aa:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80052ac:	d403      	bmi.n	80052b6 <ADC_Disable+0x5a>
 80052ae:	e7dc      	b.n	800526a <ADC_Disable+0xe>
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	07db      	lsls	r3, r3, #31
 80052b4:	d5d9      	bpl.n	800526a <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052b6:	f7ff ffb9 	bl	800522c <HAL_GetTick>
 80052ba:	1b40      	subs	r0, r0, r5
 80052bc:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80052be:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052c0:	d9f6      	bls.n	80052b0 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	07d2      	lsls	r2, r2, #31
 80052c6:	d5f3      	bpl.n	80052b0 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ca:	f043 0310 	orr.w	r3, r3, #16
 80052ce:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80052d2:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052d4:	4303      	orrs	r3, r0
 80052d6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80052d8:	bd38      	pop	{r3, r4, r5, pc}
 80052da:	bf00      	nop

080052dc <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052dc:	6802      	ldr	r2, [r0, #0]
{
 80052de:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052e0:	6893      	ldr	r3, [r2, #8]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b01      	cmp	r3, #1
{
 80052e8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80052ea:	d025      	beq.n	8005338 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80052ec:	6891      	ldr	r1, [r2, #8]
 80052ee:	4b15      	ldr	r3, [pc, #84]	; (8005344 <ADC_Enable+0x68>)
 80052f0:	4219      	tst	r1, r3
 80052f2:	d008      	beq.n	8005306 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052f6:	f043 0310 	orr.w	r3, r3, #16
 80052fa:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80052fe:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005300:	4303      	orrs	r3, r0
 8005302:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005304:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8005306:	6893      	ldr	r3, [r2, #8]
 8005308:	f043 0301 	orr.w	r3, r3, #1
 800530c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 800530e:	f7ff ff8d 	bl	800522c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005312:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8005314:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	07d9      	lsls	r1, r3, #31
 800531a:	d40b      	bmi.n	8005334 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800531c:	f7ff ff86 	bl	800522c <HAL_GetTick>
 8005320:	1b43      	subs	r3, r0, r5
 8005322:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005324:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005326:	d9f6      	bls.n	8005316 <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	07d2      	lsls	r2, r2, #31
 800532c:	d5e2      	bpl.n	80052f4 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	07d9      	lsls	r1, r3, #31
 8005332:	d5f3      	bpl.n	800531c <ADC_Enable+0x40>
  return HAL_OK;
 8005334:	2000      	movs	r0, #0
}
 8005336:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	07d8      	lsls	r0, r3, #31
 800533c:	d5d6      	bpl.n	80052ec <ADC_Enable+0x10>
  return HAL_OK;
 800533e:	2000      	movs	r0, #0
 8005340:	e7f9      	b.n	8005336 <ADC_Enable+0x5a>
 8005342:	bf00      	nop
 8005344:	8000003f 	.word	0x8000003f

08005348 <HAL_ADC_Init>:
{
 8005348:	b530      	push	{r4, r5, lr}
 800534a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8005350:	2800      	cmp	r0, #0
 8005352:	f000 8099 	beq.w	8005488 <HAL_ADC_Init+0x140>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005356:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005358:	f013 0310 	ands.w	r3, r3, #16
 800535c:	4604      	mov	r4, r0
 800535e:	d117      	bne.n	8005390 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005360:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005362:	2d00      	cmp	r5, #0
 8005364:	f000 8093 	beq.w	800548e <HAL_ADC_Init+0x146>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005368:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800536a:	6891      	ldr	r1, [r2, #8]
 800536c:	00c9      	lsls	r1, r1, #3
 800536e:	d57f      	bpl.n	8005470 <HAL_ADC_Init+0x128>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005370:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005372:	008d      	lsls	r5, r1, #2
 8005374:	d47c      	bmi.n	8005470 <HAL_ADC_Init+0x128>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005376:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005378:	06c8      	lsls	r0, r1, #27
 800537a:	d400      	bmi.n	800537e <HAL_ADC_Init+0x36>
 800537c:	b163      	cbz	r3, 8005398 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 800537e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005380:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 8005384:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8005386:	f043 0310 	orr.w	r3, r3, #16
 800538a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800538c:	b003      	add	sp, #12
 800538e:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005390:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005392:	06da      	lsls	r2, r3, #27
 8005394:	d4f3      	bmi.n	800537e <HAL_ADC_Init+0x36>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005396:	6802      	ldr	r2, [r0, #0]
 8005398:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800539a:	0759      	lsls	r1, r3, #29
 800539c:	d4ef      	bmi.n	800537e <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 800539e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80053a4:	f043 0302 	orr.w	r3, r3, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053a8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80053ac:	6423      	str	r3, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053ae:	f000 80d8 	beq.w	8005562 <HAL_ADC_Init+0x21a>
 80053b2:	4b7d      	ldr	r3, [pc, #500]	; (80055a8 <HAL_ADC_Init+0x260>)
 80053b4:	429a      	cmp	r2, r3
 80053b6:	f000 80dc 	beq.w	8005572 <HAL_ADC_Init+0x22a>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80053ba:	497c      	ldr	r1, [pc, #496]	; (80055ac <HAL_ADC_Init+0x264>)
 80053bc:	428a      	cmp	r2, r1
 80053be:	d073      	beq.n	80054a8 <HAL_ADC_Init+0x160>
 80053c0:	4b7b      	ldr	r3, [pc, #492]	; (80055b0 <HAL_ADC_Init+0x268>)
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d071      	beq.n	80054aa <HAL_ADC_Init+0x162>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80053c6:	6893      	ldr	r3, [r2, #8]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	f000 80e2 	beq.w	8005596 <HAL_ADC_Init+0x24e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053d2:	4878      	ldr	r0, [pc, #480]	; (80055b4 <HAL_ADC_Init+0x26c>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 80053d4:	6883      	ldr	r3, [r0, #8]
 80053d6:	6861      	ldr	r1, [r4, #4]
 80053d8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80053dc:	430b      	orrs	r3, r1
 80053de:	6083      	str	r3, [r0, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80053e0:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053e8:	7e60      	ldrb	r0, [r4, #25]
 80053ea:	3901      	subs	r1, #1
 80053ec:	bf18      	it	ne
 80053ee:	2101      	movne	r1, #1
 80053f0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80053f4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053f8:	f894 1020 	ldrb.w	r1, [r4, #32]
 80053fc:	2901      	cmp	r1, #1
 80053fe:	f000 8094 	beq.w	800552a <HAL_ADC_Init+0x1e2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005402:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005404:	2901      	cmp	r1, #1
 8005406:	d00c      	beq.n	8005422 <HAL_ADC_Init+0xda>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005408:	4868      	ldr	r0, [pc, #416]	; (80055ac <HAL_ADC_Init+0x264>)
 800540a:	4282      	cmp	r2, r0
 800540c:	f000 809d 	beq.w	800554a <HAL_ADC_Init+0x202>
 8005410:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8005414:	4282      	cmp	r2, r0
 8005416:	f000 8098 	beq.w	800554a <HAL_ADC_Init+0x202>
 800541a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800541c:	4318      	orrs	r0, r3
 800541e:	ea41 0300 	orr.w	r3, r1, r0
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005422:	6891      	ldr	r1, [r2, #8]
 8005424:	f011 0f0c 	tst.w	r1, #12
 8005428:	d10c      	bne.n	8005444 <HAL_ADC_Init+0xfc>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800542a:	68d1      	ldr	r1, [r2, #12]
 800542c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005430:	f021 0102 	bic.w	r1, r1, #2
 8005434:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005436:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800543a:	7e20      	ldrb	r0, [r4, #24]
 800543c:	0049      	lsls	r1, r1, #1
 800543e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8005442:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8005444:	68d0      	ldr	r0, [r2, #12]
 8005446:	495c      	ldr	r1, [pc, #368]	; (80055b8 <HAL_ADC_Init+0x270>)
 8005448:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800544a:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800544c:	4319      	orrs	r1, r3
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800544e:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8005450:	60d1      	str	r1, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005452:	d072      	beq.n	800553a <HAL_ADC_Init+0x1f2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005454:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005456:	f023 030f 	bic.w	r3, r3, #15
 800545a:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800545c:	2000      	movs	r0, #0
 800545e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005460:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800546c:	b003      	add	sp, #12
 800546e:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8005470:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005472:	f023 0312 	bic.w	r3, r3, #18
 8005476:	f043 0310 	orr.w	r3, r3, #16
 800547a:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800547c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800547e:	f043 0301 	orr.w	r3, r3, #1
 8005482:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005484:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005486:	e77a      	b.n	800537e <HAL_ADC_Init+0x36>
    return HAL_ERROR;
 8005488:	2001      	movs	r0, #1
}
 800548a:	b003      	add	sp, #12
 800548c:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 800548e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8005492:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8005494:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8005498:	f7fb fd62 	bl	8000f60 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800549c:	6822      	ldr	r2, [r4, #0]
 800549e:	6893      	ldr	r3, [r2, #8]
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	d511      	bpl.n	80054c8 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054a4:	462b      	mov	r3, r5
 80054a6:	e760      	b.n	800536a <HAL_ADC_Init+0x22>
 80054a8:	4941      	ldr	r1, [pc, #260]	; (80055b0 <HAL_ADC_Init+0x268>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054aa:	4842      	ldr	r0, [pc, #264]	; (80055b4 <HAL_ADC_Init+0x26c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80054ac:	6893      	ldr	r3, [r2, #8]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d058      	beq.n	8005568 <HAL_ADC_Init+0x220>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80054b6:	688b      	ldr	r3, [r1, #8]
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d189      	bne.n	80053d4 <HAL_ADC_Init+0x8c>
 80054c0:	680b      	ldr	r3, [r1, #0]
 80054c2:	07db      	lsls	r3, r3, #31
 80054c4:	d48c      	bmi.n	80053e0 <HAL_ADC_Init+0x98>
 80054c6:	e785      	b.n	80053d4 <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 80054c8:	4620      	mov	r0, r4
 80054ca:	f7ff fec7 	bl	800525c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80054ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 80054d0:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80054d2:	06d0      	lsls	r0, r2, #27
 80054d4:	f53f af48 	bmi.w	8005368 <HAL_ADC_Init+0x20>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f47f af45 	bne.w	8005368 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 80054de:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80054e0:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80054e2:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80054e6:	f021 0102 	bic.w	r1, r1, #2
 80054ea:	f041 0102 	orr.w	r1, r1, #2
 80054ee:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80054f0:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80054f2:	4932      	ldr	r1, [pc, #200]	; (80055bc <HAL_ADC_Init+0x274>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80054f4:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 80054f8:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80054fa:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80054fc:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80054fe:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8005502:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005504:	482e      	ldr	r0, [pc, #184]	; (80055c0 <HAL_ADC_Init+0x278>)
 8005506:	fba0 0101 	umull	r0, r1, r0, r1
 800550a:	0c89      	lsrs	r1, r1, #18
 800550c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005510:	0049      	lsls	r1, r1, #1
 8005512:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8005514:	9901      	ldr	r1, [sp, #4]
 8005516:	2900      	cmp	r1, #0
 8005518:	f43f af27 	beq.w	800536a <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800551c:	9901      	ldr	r1, [sp, #4]
 800551e:	3901      	subs	r1, #1
 8005520:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8005522:	9901      	ldr	r1, [sp, #4]
 8005524:	2900      	cmp	r1, #0
 8005526:	d1f9      	bne.n	800551c <HAL_ADC_Init+0x1d4>
 8005528:	e71f      	b.n	800536a <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800552a:	bb30      	cbnz	r0, 800557a <HAL_ADC_Init+0x232>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800552c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800552e:	3901      	subs	r1, #1
 8005530:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 8005534:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 8005538:	e763      	b.n	8005402 <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800553a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800553c:	69e3      	ldr	r3, [r4, #28]
 800553e:	f021 010f 	bic.w	r1, r1, #15
 8005542:	3b01      	subs	r3, #1
 8005544:	430b      	orrs	r3, r1
 8005546:	6313      	str	r3, [r2, #48]	; 0x30
 8005548:	e788      	b.n	800545c <HAL_ADC_Init+0x114>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800554a:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 800554e:	d01f      	beq.n	8005590 <HAL_ADC_Init+0x248>
 8005550:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005554:	d024      	beq.n	80055a0 <HAL_ADC_Init+0x258>
 8005556:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 800555a:	bf08      	it	eq
 800555c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8005560:	e75b      	b.n	800541a <HAL_ADC_Init+0xd2>
 8005562:	4911      	ldr	r1, [pc, #68]	; (80055a8 <HAL_ADC_Init+0x260>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005564:	4817      	ldr	r0, [pc, #92]	; (80055c4 <HAL_ADC_Init+0x27c>)
 8005566:	e7a1      	b.n	80054ac <HAL_ADC_Init+0x164>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005568:	6813      	ldr	r3, [r2, #0]
 800556a:	07dd      	lsls	r5, r3, #31
 800556c:	f53f af38 	bmi.w	80053e0 <HAL_ADC_Init+0x98>
 8005570:	e7a1      	b.n	80054b6 <HAL_ADC_Init+0x16e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005572:	4814      	ldr	r0, [pc, #80]	; (80055c4 <HAL_ADC_Init+0x27c>)
 8005574:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8005578:	e798      	b.n	80054ac <HAL_ADC_Init+0x164>
        ADC_STATE_CLR_SET(hadc->State,
 800557a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800557c:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8005580:	f041 0120 	orr.w	r1, r1, #32
 8005584:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005586:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005588:	f041 0101 	orr.w	r1, r1, #1
 800558c:	6461      	str	r1, [r4, #68]	; 0x44
 800558e:	e738      	b.n	8005402 <HAL_ADC_Init+0xba>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005590:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005594:	e741      	b.n	800541a <HAL_ADC_Init+0xd2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005596:	6813      	ldr	r3, [r2, #0]
 8005598:	07db      	lsls	r3, r3, #31
 800559a:	f53f af21 	bmi.w	80053e0 <HAL_ADC_Init+0x98>
 800559e:	e718      	b.n	80053d2 <HAL_ADC_Init+0x8a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80055a0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80055a4:	e739      	b.n	800541a <HAL_ADC_Init+0xd2>
 80055a6:	bf00      	nop
 80055a8:	50000100 	.word	0x50000100
 80055ac:	50000400 	.word	0x50000400
 80055b0:	50000500 	.word	0x50000500
 80055b4:	50000700 	.word	0x50000700
 80055b8:	fff0c007 	.word	0xfff0c007
 80055bc:	20000008 	.word	0x20000008
 80055c0:	431bde83 	.word	0x431bde83
 80055c4:	50000300 	.word	0x50000300

080055c8 <HAL_ADC_Start>:
{
 80055c8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80055ca:	6803      	ldr	r3, [r0, #0]
 80055cc:	689d      	ldr	r5, [r3, #8]
 80055ce:	f015 0504 	ands.w	r5, r5, #4
 80055d2:	d12c      	bne.n	800562e <HAL_ADC_Start+0x66>
    __HAL_LOCK(hadc);
 80055d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	4604      	mov	r4, r0
 80055dc:	d027      	beq.n	800562e <HAL_ADC_Start+0x66>
 80055de:	2301      	movs	r3, #1
 80055e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 80055e4:	f7ff fe7a 	bl	80052dc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80055e8:	b9f0      	cbnz	r0, 8005628 <HAL_ADC_Start+0x60>
      ADC_STATE_CLR_SET(hadc->State,
 80055ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80055ec:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80055ee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80055fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 80055fe:	6422      	str	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005600:	d017      	beq.n	8005632 <HAL_ADC_Start+0x6a>
 8005602:	4a3a      	ldr	r2, [pc, #232]	; (80056ec <HAL_ADC_Start+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d068      	beq.n	80056da <HAL_ADC_Start+0x112>
 8005608:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 800560c:	6892      	ldr	r2, [r2, #8]
 800560e:	06d5      	lsls	r5, r2, #27
 8005610:	d011      	beq.n	8005636 <HAL_ADC_Start+0x6e>
 8005612:	4937      	ldr	r1, [pc, #220]	; (80056f0 <HAL_ADC_Start+0x128>)
 8005614:	428b      	cmp	r3, r1
 8005616:	d00e      	beq.n	8005636 <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005618:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800561a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800561e:	6422      	str	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005620:	68ca      	ldr	r2, [r1, #12]
 8005622:	0192      	lsls	r2, r2, #6
 8005624:	d514      	bpl.n	8005650 <HAL_ADC_Start+0x88>
 8005626:	e00d      	b.n	8005644 <HAL_ADC_Start+0x7c>
      __HAL_UNLOCK(hadc);
 8005628:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 800562c:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 800562e:	2002      	movs	r0, #2
}
 8005630:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005632:	4a30      	ldr	r2, [pc, #192]	; (80056f4 <HAL_ADC_Start+0x12c>)
 8005634:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005636:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005638:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800563c:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	0191      	lsls	r1, r2, #6
 8005642:	d505      	bpl.n	8005650 <HAL_ADC_Start+0x88>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005644:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005646:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800564a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800564e:	6422      	str	r2, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005650:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005652:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005656:	bf1c      	itt	ne
 8005658:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 800565a:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800565e:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8005660:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005662:	221c      	movs	r2, #28
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
 8005668:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800566c:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800566e:	d01a      	beq.n	80056a6 <HAL_ADC_Start+0xde>
 8005670:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <HAL_ADC_Start+0x124>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d022      	beq.n	80056bc <HAL_ADC_Start+0xf4>
 8005676:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 800567a:	06cd      	lsls	r5, r1, #27
 800567c:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8005680:	d00c      	beq.n	800569c <HAL_ADC_Start+0xd4>
 8005682:	6891      	ldr	r1, [r2, #8]
 8005684:	f001 011f 	and.w	r1, r1, #31
 8005688:	2905      	cmp	r1, #5
 800568a:	d007      	beq.n	800569c <HAL_ADC_Start+0xd4>
 800568c:	6892      	ldr	r2, [r2, #8]
 800568e:	f002 021f 	and.w	r2, r2, #31
 8005692:	2a09      	cmp	r2, #9
 8005694:	d002      	beq.n	800569c <HAL_ADC_Start+0xd4>
 8005696:	4a16      	ldr	r2, [pc, #88]	; (80056f0 <HAL_ADC_Start+0x128>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d1c7      	bne.n	800562c <HAL_ADC_Start+0x64>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	f042 0204 	orr.w	r2, r2, #4
 80056a2:	609a      	str	r2, [r3, #8]
}
 80056a4:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80056a6:	4a13      	ldr	r2, [pc, #76]	; (80056f4 <HAL_ADC_Start+0x12c>)
 80056a8:	6891      	ldr	r1, [r2, #8]
 80056aa:	06cc      	lsls	r4, r1, #27
 80056ac:	d0f6      	beq.n	800569c <HAL_ADC_Start+0xd4>
 80056ae:	6891      	ldr	r1, [r2, #8]
 80056b0:	f001 011f 	and.w	r1, r1, #31
 80056b4:	2905      	cmp	r1, #5
 80056b6:	d0f1      	beq.n	800569c <HAL_ADC_Start+0xd4>
 80056b8:	6892      	ldr	r2, [r2, #8]
 80056ba:	e7ef      	b.n	800569c <HAL_ADC_Start+0xd4>
 80056bc:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <HAL_ADC_Start+0x12c>)
 80056be:	6891      	ldr	r1, [r2, #8]
 80056c0:	06c9      	lsls	r1, r1, #27
 80056c2:	d0eb      	beq.n	800569c <HAL_ADC_Start+0xd4>
 80056c4:	6891      	ldr	r1, [r2, #8]
 80056c6:	f001 011f 	and.w	r1, r1, #31
 80056ca:	2905      	cmp	r1, #5
 80056cc:	d0e6      	beq.n	800569c <HAL_ADC_Start+0xd4>
 80056ce:	6892      	ldr	r2, [r2, #8]
 80056d0:	f002 021f 	and.w	r2, r2, #31
 80056d4:	2a09      	cmp	r2, #9
 80056d6:	d0e1      	beq.n	800569c <HAL_ADC_Start+0xd4>
}
 80056d8:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80056da:	4a06      	ldr	r2, [pc, #24]	; (80056f4 <HAL_ADC_Start+0x12c>)
 80056dc:	6892      	ldr	r2, [r2, #8]
 80056de:	06d2      	lsls	r2, r2, #27
 80056e0:	d0a9      	beq.n	8005636 <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80056e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80056e4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80056e8:	e797      	b.n	800561a <HAL_ADC_Start+0x52>
 80056ea:	bf00      	nop
 80056ec:	50000100 	.word	0x50000100
 80056f0:	50000400 	.word	0x50000400
 80056f4:	50000300 	.word	0x50000300

080056f8 <HAL_ADCEx_Calibration_Start>:
{
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80056fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d040      	beq.n	8005784 <HAL_ADCEx_Calibration_Start+0x8c>
 8005702:	2701      	movs	r7, #1
 8005704:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	f7ff fda6 	bl	800525c <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8005710:	4606      	mov	r6, r0
 8005712:	2800      	cmp	r0, #0
 8005714:	d131      	bne.n	800577a <HAL_ADCEx_Calibration_Start+0x82>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8005716:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 8005718:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800571a:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800571c:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800571e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8005722:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005724:	d103      	bne.n	800572e <HAL_ADCEx_Calibration_Start+0x36>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800572c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005734:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005736:	f7ff fd79 	bl	800522c <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800573a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 800573c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	da14      	bge.n	800576e <HAL_ADCEx_Calibration_Start+0x76>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005744:	f7ff fd72 	bl	800522c <HAL_GetTick>
 8005748:	1b43      	subs	r3, r0, r5
 800574a:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800574c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800574e:	d9f6      	bls.n	800573e <HAL_ADCEx_Calibration_Start+0x46>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	2a00      	cmp	r2, #0
 8005754:	daf3      	bge.n	800573e <HAL_ADCEx_Calibration_Start+0x46>
          ADC_STATE_CLR_SET(hadc->State,
 8005756:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8005758:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 800575a:	f023 0312 	bic.w	r3, r3, #18
 800575e:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 8005762:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 8005764:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 8005768:	6423      	str	r3, [r4, #64]	; 0x40
}
 800576a:	4630      	mov	r0, r6
 800576c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800576e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005770:	f023 0303 	bic.w	r3, r3, #3
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800577a:	2300      	movs	r3, #0
 800577c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005780:	4630      	mov	r0, r6
 8005782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8005784:	2602      	movs	r6, #2
}
 8005786:	4630      	mov	r0, r6
 8005788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800578a:	bf00      	nop

0800578c <HAL_ADCEx_InjectedStart>:
{
 800578c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800578e:	6803      	ldr	r3, [r0, #0]
 8005790:	689d      	ldr	r5, [r3, #8]
 8005792:	f015 0508 	ands.w	r5, r5, #8
 8005796:	d129      	bne.n	80057ec <HAL_ADCEx_InjectedStart+0x60>
    __HAL_LOCK(hadc);
 8005798:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	4604      	mov	r4, r0
 80057a0:	d024      	beq.n	80057ec <HAL_ADCEx_InjectedStart+0x60>
 80057a2:	2301      	movs	r3, #1
 80057a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 80057a8:	f7ff fd98 	bl	80052dc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80057ac:	b9d8      	cbnz	r0, 80057e6 <HAL_ADCEx_InjectedStart+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 80057ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80057b0:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80057b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80057be:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 80057c2:	6423      	str	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80057c4:	d014      	beq.n	80057f0 <HAL_ADCEx_InjectedStart+0x64>
 80057c6:	4b32      	ldr	r3, [pc, #200]	; (8005890 <HAL_ADCEx_InjectedStart+0x104>)
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d042      	beq.n	8005852 <HAL_ADCEx_InjectedStart+0xc6>
 80057cc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	06d9      	lsls	r1, r3, #27
 80057d4:	d00e      	beq.n	80057f4 <HAL_ADCEx_InjectedStart+0x68>
 80057d6:	4b2f      	ldr	r3, [pc, #188]	; (8005894 <HAL_ADCEx_InjectedStart+0x108>)
 80057d8:	429a      	cmp	r2, r3
 80057da:	d00b      	beq.n	80057f4 <HAL_ADCEx_InjectedStart+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e2:	6423      	str	r3, [r4, #64]	; 0x40
 80057e4:	e00a      	b.n	80057fc <HAL_ADCEx_InjectedStart+0x70>
      __HAL_UNLOCK(hadc);
 80057e6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80057ec:	2002      	movs	r0, #2
}
 80057ee:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80057f0:	4b29      	ldr	r3, [pc, #164]	; (8005898 <HAL_ADCEx_InjectedStart+0x10c>)
 80057f2:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80057fa:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80057fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057fe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        ADC_CLEAR_ERRORCODE(hadc);
 8005802:	bf08      	it	eq
 8005804:	6463      	streq	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8005806:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005808:	2360      	movs	r3, #96	; 0x60
      __HAL_UNLOCK(hadc);
 800580a:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800580e:	6013      	str	r3, [r2, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005810:	68d3      	ldr	r3, [r2, #12]
 8005812:	019b      	lsls	r3, r3, #6
 8005814:	d4e9      	bmi.n	80057ea <HAL_ADCEx_InjectedStart+0x5e>
 8005816:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800581a:	d01f      	beq.n	800585c <HAL_ADCEx_InjectedStart+0xd0>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 800581c:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <HAL_ADCEx_InjectedStart+0x104>)
 800581e:	429a      	cmp	r2, r3
 8005820:	d027      	beq.n	8005872 <HAL_ADCEx_InjectedStart+0xe6>
 8005822:	f8d3 1608 	ldr.w	r1, [r3, #1544]	; 0x608
 8005826:	06cd      	lsls	r5, r1, #27
 8005828:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800582c:	d00c      	beq.n	8005848 <HAL_ADCEx_InjectedStart+0xbc>
 800582e:	6899      	ldr	r1, [r3, #8]
 8005830:	f001 011f 	and.w	r1, r1, #31
 8005834:	2906      	cmp	r1, #6
 8005836:	d007      	beq.n	8005848 <HAL_ADCEx_InjectedStart+0xbc>
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2b07      	cmp	r3, #7
 8005840:	d002      	beq.n	8005848 <HAL_ADCEx_InjectedStart+0xbc>
 8005842:	4b14      	ldr	r3, [pc, #80]	; (8005894 <HAL_ADCEx_InjectedStart+0x108>)
 8005844:	429a      	cmp	r2, r3
 8005846:	d1d0      	bne.n	80057ea <HAL_ADCEx_InjectedStart+0x5e>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8005848:	6893      	ldr	r3, [r2, #8]
 800584a:	f043 0308 	orr.w	r3, r3, #8
 800584e:	6093      	str	r3, [r2, #8]
}
 8005850:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_ADCEx_InjectedStart+0x10c>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	06db      	lsls	r3, r3, #27
 8005858:	d0cc      	beq.n	80057f4 <HAL_ADCEx_InjectedStart+0x68>
 800585a:	e7bf      	b.n	80057dc <HAL_ADCEx_InjectedStart+0x50>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 800585c:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <HAL_ADCEx_InjectedStart+0x10c>)
 800585e:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005860:	06c9      	lsls	r1, r1, #27
 8005862:	d0f1      	beq.n	8005848 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005864:	6899      	ldr	r1, [r3, #8]
 8005866:	f001 011f 	and.w	r1, r1, #31
 800586a:	2906      	cmp	r1, #6
 800586c:	d0ec      	beq.n	8005848 <HAL_ADCEx_InjectedStart+0xbc>
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	e7ea      	b.n	8005848 <HAL_ADCEx_InjectedStart+0xbc>
 8005872:	4b09      	ldr	r3, [pc, #36]	; (8005898 <HAL_ADCEx_InjectedStart+0x10c>)
 8005874:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005876:	06cc      	lsls	r4, r1, #27
 8005878:	d0e6      	beq.n	8005848 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 800587a:	6899      	ldr	r1, [r3, #8]
 800587c:	f001 011f 	and.w	r1, r1, #31
 8005880:	2906      	cmp	r1, #6
 8005882:	d0e1      	beq.n	8005848 <HAL_ADCEx_InjectedStart+0xbc>
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 031f 	and.w	r3, r3, #31
 800588a:	2b07      	cmp	r3, #7
 800588c:	d0dc      	beq.n	8005848 <HAL_ADCEx_InjectedStart+0xbc>
}
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	50000100 	.word	0x50000100
 8005894:	50000400 	.word	0x50000400
 8005898:	50000300 	.word	0x50000300

0800589c <HAL_ADCEx_InjectedGetValue>:
  switch(InjectedRank)
 800589c:	2903      	cmp	r1, #3
 800589e:	d007      	beq.n	80058b0 <HAL_ADCEx_InjectedGetValue+0x14>
 80058a0:	2904      	cmp	r1, #4
 80058a2:	d00d      	beq.n	80058c0 <HAL_ADCEx_InjectedGetValue+0x24>
 80058a4:	2902      	cmp	r1, #2
 80058a6:	d007      	beq.n	80058b8 <HAL_ADCEx_InjectedGetValue+0x1c>
      tmp_jdr = hadc->Instance->JDR1;
 80058a8:	6803      	ldr	r3, [r0, #0]
 80058aa:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 80058ae:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 80058b0:	6803      	ldr	r3, [r0, #0]
 80058b2:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 80058b6:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 80058b8:	6803      	ldr	r3, [r0, #0]
 80058ba:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 80058be:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 80058c0:	6803      	ldr	r3, [r0, #0]
 80058c2:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 80058c6:	4770      	bx	lr

080058c8 <HAL_ADC_ConfigChannel>:
{
 80058c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80058ca:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80058ce:	68cc      	ldr	r4, [r1, #12]
{
 80058d0:	b083      	sub	sp, #12
 80058d2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80058d4:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 80058d6:	f04f 0000 	mov.w	r0, #0
 80058da:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80058dc:	f000 8107 	beq.w	8005aee <HAL_ADC_ConfigChannel+0x226>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80058e0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80058e2:	2001      	movs	r0, #1
 80058e4:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80058e8:	6895      	ldr	r5, [r2, #8]
 80058ea:	076d      	lsls	r5, r5, #29
 80058ec:	d43a      	bmi.n	8005964 <HAL_ADC_ConfigChannel+0x9c>
    if (sConfig->Rank < 5U)
 80058ee:	6848      	ldr	r0, [r1, #4]
 80058f0:	2804      	cmp	r0, #4
 80058f2:	f200 808b 	bhi.w	8005a0c <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 80058f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80058fa:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80058fc:	680d      	ldr	r5, [r1, #0]
 80058fe:	0040      	lsls	r0, r0, #1
 8005900:	f04f 0c1f 	mov.w	ip, #31
 8005904:	fa0c fc00 	lsl.w	ip, ip, r0
 8005908:	ea26 0c0c 	bic.w	ip, r6, ip
 800590c:	fa05 f000 	lsl.w	r0, r5, r0
 8005910:	ea4c 0000 	orr.w	r0, ip, r0
 8005914:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005916:	6890      	ldr	r0, [r2, #8]
 8005918:	f010 0f0c 	tst.w	r0, #12
 800591c:	d134      	bne.n	8005988 <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800591e:	2d09      	cmp	r5, #9
 8005920:	f200 808b 	bhi.w	8005a3a <HAL_ADC_ConfigChannel+0x172>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005924:	6950      	ldr	r0, [r2, #20]
 8005926:	688e      	ldr	r6, [r1, #8]
 8005928:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 800592c:	f04f 0c07 	mov.w	ip, #7
 8005930:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005934:	fa06 f60e 	lsl.w	r6, r6, lr
 8005938:	ea20 000c 	bic.w	r0, r0, ip
 800593c:	4330      	orrs	r0, r6
 800593e:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005940:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8005942:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005944:	694f      	ldr	r7, [r1, #20]
 8005946:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800594a:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 800594c:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800594e:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8005952:	2e03      	cmp	r6, #3
 8005954:	f200 8148 	bhi.w	8005be8 <HAL_ADC_ConfigChannel+0x320>
 8005958:	e8df f016 	tbh	[pc, r6, lsl #1]
 800595c:	010a000d 	.word	0x010a000d
 8005960:	00f60100 	.word	0x00f60100
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005966:	f042 0220 	orr.w	r2, r2, #32
 800596a:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005972:	b003      	add	sp, #12
 8005974:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005976:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8005978:	4eaa      	ldr	r6, [pc, #680]	; (8005c24 <HAL_ADC_ConfigChannel+0x35c>)
 800597a:	403e      	ands	r6, r7
 800597c:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8005980:	4330      	orrs	r0, r6
 8005982:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005986:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005988:	6890      	ldr	r0, [r2, #8]
 800598a:	f000 0003 	and.w	r0, r0, #3
 800598e:	2801      	cmp	r0, #1
 8005990:	f000 80a8 	beq.w	8005ae4 <HAL_ADC_ConfigChannel+0x21c>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005994:	2c01      	cmp	r4, #1
 8005996:	f000 80ad 	beq.w	8005af4 <HAL_ADC_ConfigChannel+0x22c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800599a:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 800599e:	2001      	movs	r0, #1
 80059a0:	40a8      	lsls	r0, r5
 80059a2:	ea21 0100 	bic.w	r1, r1, r0
 80059a6:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059aa:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80059ae:	d079      	beq.n	8005aa4 <HAL_ADC_ConfigChannel+0x1dc>
 80059b0:	499d      	ldr	r1, [pc, #628]	; (8005c28 <HAL_ADC_ConfigChannel+0x360>)
 80059b2:	428a      	cmp	r2, r1
 80059b4:	d076      	beq.n	8005aa4 <HAL_ADC_ConfigChannel+0x1dc>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80059b6:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059b8:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80059bc:	d075      	beq.n	8005aaa <HAL_ADC_ConfigChannel+0x1e2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80059be:	2d11      	cmp	r5, #17
 80059c0:	f040 80ae 	bne.w	8005b20 <HAL_ADC_ConfigChannel+0x258>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80059c4:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80059c6:	01c4      	lsls	r4, r0, #7
 80059c8:	d472      	bmi.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80059ca:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80059ce:	d071      	beq.n	8005ab4 <HAL_ADC_ConfigChannel+0x1ec>
 80059d0:	4895      	ldr	r0, [pc, #596]	; (8005c28 <HAL_ADC_ConfigChannel+0x360>)
 80059d2:	4282      	cmp	r2, r0
 80059d4:	f000 80df 	beq.w	8005b96 <HAL_ADC_ConfigChannel+0x2ce>
 80059d8:	4c94      	ldr	r4, [pc, #592]	; (8005c2c <HAL_ADC_ConfigChannel+0x364>)
 80059da:	42a2      	cmp	r2, r4
 80059dc:	f000 80fe 	beq.w	8005bdc <HAL_ADC_ConfigChannel+0x314>
 80059e0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80059e4:	4282      	cmp	r2, r0
 80059e6:	d066      	beq.n	8005ab6 <HAL_ADC_ConfigChannel+0x1ee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80059e8:	6890      	ldr	r0, [r2, #8]
 80059ea:	f000 0003 	and.w	r0, r0, #3
 80059ee:	2801      	cmp	r0, #1
 80059f0:	f000 80f6 	beq.w	8005be0 <HAL_ADC_ConfigChannel+0x318>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80059f4:	2d10      	cmp	r5, #16
 80059f6:	d05b      	beq.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80059f8:	2d11      	cmp	r5, #17
 80059fa:	d059      	beq.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80059fc:	2d12      	cmp	r5, #18
 80059fe:	d157      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005a00:	688a      	ldr	r2, [r1, #8]
 8005a02:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a06:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005a08:	608a      	str	r2, [r1, #8]
 8005a0a:	e7af      	b.n	800596c <HAL_ADC_ConfigChannel+0xa4>
    else if (sConfig->Rank < 10U)
 8005a0c:	2809      	cmp	r0, #9
 8005a0e:	d925      	bls.n	8005a5c <HAL_ADC_ConfigChannel+0x194>
    else if (sConfig->Rank < 15U)
 8005a10:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005a16:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8005a1a:	f200 8087 	bhi.w	8005b2c <HAL_ADC_ConfigChannel+0x264>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a1e:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8005a20:	680d      	ldr	r5, [r1, #0]
 8005a22:	383c      	subs	r0, #60	; 0x3c
 8005a24:	f04f 0c1f 	mov.w	ip, #31
 8005a28:	fa0c fc00 	lsl.w	ip, ip, r0
 8005a2c:	ea26 060c 	bic.w	r6, r6, ip
 8005a30:	fa05 f000 	lsl.w	r0, r5, r0
 8005a34:	4330      	orrs	r0, r6
 8005a36:	6390      	str	r0, [r2, #56]	; 0x38
 8005a38:	e76d      	b.n	8005916 <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005a3a:	688f      	ldr	r7, [r1, #8]
 8005a3c:	6990      	ldr	r0, [r2, #24]
 8005a3e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8005a42:	3e1e      	subs	r6, #30
 8005a44:	f04f 0e07 	mov.w	lr, #7
 8005a48:	fa07 fc06 	lsl.w	ip, r7, r6
 8005a4c:	fa0e f606 	lsl.w	r6, lr, r6
 8005a50:	ea20 0006 	bic.w	r0, r0, r6
 8005a54:	ea40 000c 	orr.w	r0, r0, ip
 8005a58:	6190      	str	r0, [r2, #24]
 8005a5a:	e771      	b.n	8005940 <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->SQR2,
 8005a5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005a60:	0040      	lsls	r0, r0, #1
 8005a62:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005a64:	680d      	ldr	r5, [r1, #0]
 8005a66:	381e      	subs	r0, #30
 8005a68:	f04f 0c1f 	mov.w	ip, #31
 8005a6c:	fa0c fc00 	lsl.w	ip, ip, r0
 8005a70:	ea26 060c 	bic.w	r6, r6, ip
 8005a74:	fa05 f000 	lsl.w	r0, r5, r0
 8005a78:	4330      	orrs	r0, r6
 8005a7a:	6350      	str	r0, [r2, #52]	; 0x34
 8005a7c:	e74b      	b.n	8005916 <HAL_ADC_ConfigChannel+0x4e>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005a7e:	688c      	ldr	r4, [r1, #8]
 8005a80:	6950      	ldr	r0, [r2, #20]
 8005a82:	1c69      	adds	r1, r5, #1
 8005a84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005a88:	2607      	movs	r6, #7
 8005a8a:	408c      	lsls	r4, r1
 8005a8c:	fa06 f101 	lsl.w	r1, r6, r1
 8005a90:	ea20 0101 	bic.w	r1, r0, r1
 8005a94:	4321      	orrs	r1, r4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a96:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8005a9a:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a9c:	d008      	beq.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
 8005a9e:	4962      	ldr	r1, [pc, #392]	; (8005c28 <HAL_ADC_ConfigChannel+0x360>)
 8005aa0:	428a      	cmp	r2, r1
 8005aa2:	d105      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005aa4:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005aa6:	4962      	ldr	r1, [pc, #392]	; (8005c30 <HAL_ADC_ConfigChannel+0x368>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005aa8:	d189      	bne.n	80059be <HAL_ADC_ConfigChannel+0xf6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005aaa:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005aac:	0206      	lsls	r6, r0, #8
 8005aae:	d58c      	bpl.n	80059ca <HAL_ADC_ConfigChannel+0x102>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e75b      	b.n	800596c <HAL_ADC_ConfigChannel+0xa4>
 8005ab4:	4c5c      	ldr	r4, [pc, #368]	; (8005c28 <HAL_ADC_ConfigChannel+0x360>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005ab6:	6890      	ldr	r0, [r2, #8]
 8005ab8:	f000 0003 	and.w	r0, r0, #3
 8005abc:	2801      	cmp	r0, #1
 8005abe:	d061      	beq.n	8005b84 <HAL_ADC_ConfigChannel+0x2bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005ac0:	68a0      	ldr	r0, [r4, #8]
 8005ac2:	f000 0003 	and.w	r0, r0, #3
 8005ac6:	2801      	cmp	r0, #1
 8005ac8:	d068      	beq.n	8005b9c <HAL_ADC_ConfigChannel+0x2d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005aca:	2d10      	cmp	r5, #16
 8005acc:	d06a      	beq.n	8005ba4 <HAL_ADC_ConfigChannel+0x2dc>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005ace:	2d11      	cmp	r5, #17
 8005ad0:	d194      	bne.n	80059fc <HAL_ADC_ConfigChannel+0x134>
 8005ad2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005ad6:	d1eb      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005ad8:	688a      	ldr	r2, [r1, #8]
 8005ada:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ade:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005ae0:	608a      	str	r2, [r1, #8]
 8005ae2:	e743      	b.n	800596c <HAL_ADC_ConfigChannel+0xa4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005ae4:	6810      	ldr	r0, [r2, #0]
 8005ae6:	07c7      	lsls	r7, r0, #31
 8005ae8:	f57f af54 	bpl.w	8005994 <HAL_ADC_ConfigChannel+0xcc>
 8005aec:	e7e0      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
  __HAL_LOCK(hadc);
 8005aee:	2002      	movs	r0, #2
}
 8005af0:	b003      	add	sp, #12
 8005af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005af4:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8005af8:	40ac      	lsls	r4, r5
 8005afa:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005afc:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005afe:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005b02:	d9bc      	bls.n	8005a7e <HAL_ADC_ConfigChannel+0x1b6>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005b04:	688c      	ldr	r4, [r1, #8]
 8005b06:	6990      	ldr	r0, [r2, #24]
 8005b08:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8005b0c:	391b      	subs	r1, #27
 8005b0e:	2607      	movs	r6, #7
 8005b10:	408c      	lsls	r4, r1
 8005b12:	fa06 f101 	lsl.w	r1, r6, r1
 8005b16:	ea20 0101 	bic.w	r1, r0, r1
 8005b1a:	4321      	orrs	r1, r4
 8005b1c:	6191      	str	r1, [r2, #24]
 8005b1e:	e744      	b.n	80059aa <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005b20:	2d12      	cmp	r5, #18
 8005b22:	d1c5      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005b24:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005b26:	0240      	lsls	r0, r0, #9
 8005b28:	d4c2      	bmi.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
 8005b2a:	e74e      	b.n	80059ca <HAL_ADC_ConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005b2c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8005b2e:	680d      	ldr	r5, [r1, #0]
 8005b30:	385a      	subs	r0, #90	; 0x5a
 8005b32:	f04f 0c1f 	mov.w	ip, #31
 8005b36:	fa0c fc00 	lsl.w	ip, ip, r0
 8005b3a:	ea26 060c 	bic.w	r6, r6, ip
 8005b3e:	fa05 f000 	lsl.w	r0, r5, r0
 8005b42:	4330      	orrs	r0, r6
 8005b44:	63d0      	str	r0, [r2, #60]	; 0x3c
 8005b46:	e6e6      	b.n	8005916 <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005b48:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8005b4a:	4e36      	ldr	r6, [pc, #216]	; (8005c24 <HAL_ADC_ConfigChannel+0x35c>)
 8005b4c:	403e      	ands	r6, r7
 8005b4e:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8005b52:	4330      	orrs	r0, r6
 8005b54:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005b58:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8005b5a:	e715      	b.n	8005988 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005b5c:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8005b5e:	4e31      	ldr	r6, [pc, #196]	; (8005c24 <HAL_ADC_ConfigChannel+0x35c>)
 8005b60:	403e      	ands	r6, r7
 8005b62:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8005b66:	4330      	orrs	r0, r6
 8005b68:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005b6c:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8005b6e:	e70b      	b.n	8005988 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005b70:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8005b72:	4e2c      	ldr	r6, [pc, #176]	; (8005c24 <HAL_ADC_ConfigChannel+0x35c>)
 8005b74:	403e      	ands	r6, r7
 8005b76:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8005b7a:	4330      	orrs	r0, r6
 8005b7c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005b80:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8005b82:	e701      	b.n	8005988 <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005b84:	6810      	ldr	r0, [r2, #0]
 8005b86:	07c6      	lsls	r6, r0, #31
 8005b88:	d59a      	bpl.n	8005ac0 <HAL_ADC_ConfigChannel+0x1f8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b8c:	f042 0220 	orr.w	r2, r2, #32
        tmp_hal_status = HAL_ERROR;
 8005b90:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005b94:	e6ea      	b.n	800596c <HAL_ADC_ConfigChannel+0xa4>
 8005b96:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8005b9a:	e78c      	b.n	8005ab6 <HAL_ADC_ConfigChannel+0x1ee>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005b9c:	6820      	ldr	r0, [r4, #0]
 8005b9e:	07c0      	lsls	r0, r0, #31
 8005ba0:	d4f3      	bmi.n	8005b8a <HAL_ADC_ConfigChannel+0x2c2>
 8005ba2:	e792      	b.n	8005aca <HAL_ADC_ConfigChannel+0x202>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005ba4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005ba8:	d182      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005baa:	4a22      	ldr	r2, [pc, #136]	; (8005c34 <HAL_ADC_ConfigChannel+0x36c>)
 8005bac:	4c22      	ldr	r4, [pc, #136]	; (8005c38 <HAL_ADC_ConfigChannel+0x370>)
 8005bae:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005bb0:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bb2:	fba4 4202 	umull	r4, r2, r4, r2
 8005bb6:	0c92      	lsrs	r2, r2, #18
 8005bb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005bbc:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005bc2:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bc4:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8005bc6:	9a01      	ldr	r2, [sp, #4]
 8005bc8:	2a00      	cmp	r2, #0
 8005bca:	f43f af71 	beq.w	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
            wait_loop_index--;
 8005bce:	9a01      	ldr	r2, [sp, #4]
 8005bd0:	3a01      	subs	r2, #1
 8005bd2:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8005bd4:	9a01      	ldr	r2, [sp, #4]
 8005bd6:	2a00      	cmp	r2, #0
 8005bd8:	d1f9      	bne.n	8005bce <HAL_ADC_ConfigChannel+0x306>
 8005bda:	e769      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0x1e8>
 8005bdc:	4c17      	ldr	r4, [pc, #92]	; (8005c3c <HAL_ADC_ConfigChannel+0x374>)
 8005bde:	e76a      	b.n	8005ab6 <HAL_ADC_ConfigChannel+0x1ee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	07d7      	lsls	r7, r2, #31
 8005be4:	d4d1      	bmi.n	8005b8a <HAL_ADC_ConfigChannel+0x2c2>
 8005be6:	e705      	b.n	80059f4 <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005be8:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005bea:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005bee:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8005bf2:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8005bf6:	d023      	beq.n	8005c40 <HAL_ADC_ConfigChannel+0x378>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005bf8:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005bfa:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005bfe:	4286      	cmp	r6, r0
 8005c00:	d023      	beq.n	8005c4a <HAL_ADC_ConfigChannel+0x382>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c02:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005c04:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c08:	4286      	cmp	r6, r0
 8005c0a:	d023      	beq.n	8005c54 <HAL_ADC_ConfigChannel+0x38c>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005c0c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005c0e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8005c12:	4286      	cmp	r6, r0
 8005c14:	f47f aeb8 	bne.w	8005988 <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005c18:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8005c1a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c1e:	66d0      	str	r0, [r2, #108]	; 0x6c
 8005c20:	e6b2      	b.n	8005988 <HAL_ADC_ConfigChannel+0xc0>
 8005c22:	bf00      	nop
 8005c24:	83fff000 	.word	0x83fff000
 8005c28:	50000100 	.word	0x50000100
 8005c2c:	50000400 	.word	0x50000400
 8005c30:	50000300 	.word	0x50000300
 8005c34:	20000008 	.word	0x20000008
 8005c38:	431bde83 	.word	0x431bde83
 8005c3c:	50000500 	.word	0x50000500
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005c40:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005c42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c46:	6610      	str	r0, [r2, #96]	; 0x60
 8005c48:	e7d6      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x330>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005c4a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005c4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c50:	6650      	str	r0, [r2, #100]	; 0x64
 8005c52:	e7d6      	b.n	8005c02 <HAL_ADC_ConfigChannel+0x33a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005c54:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005c56:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c5a:	6690      	str	r0, [r2, #104]	; 0x68
 8005c5c:	e7d6      	b.n	8005c0c <HAL_ADC_ConfigChannel+0x344>
 8005c5e:	bf00      	nop

08005c60 <HAL_ADCEx_InjectedConfigChannel>:
{
 8005c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c64:	4602      	mov	r2, r0
 8005c66:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8005c68:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c6c:	6900      	ldr	r0, [r0, #16]
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005c6e:	68cd      	ldr	r5, [r1, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005c70:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8005c72:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8005c74:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 8005c76:	f000 81ae 	beq.w	8005fd6 <HAL_ADCEx_InjectedConfigChannel+0x376>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005c80:	b358      	cbz	r0, 8005cda <HAL_ADCEx_InjectedConfigChannel+0x7a>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8005c82:	698f      	ldr	r7, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005c84:	429f      	cmp	r7, r3
 8005c86:	d028      	beq.n	8005cda <HAL_ADCEx_InjectedConfigChannel+0x7a>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005c88:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f040 812e 	bne.w	8005eec <HAL_ADCEx_InjectedConfigChannel+0x28c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005c90:	6a0c      	ldr	r4, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005c92:	64d7      	str	r7, [r2, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005c94:	2c01      	cmp	r4, #1
 8005c96:	f000 81f0 	beq.w	800607a <HAL_ADCEx_InjectedConfigChannel+0x41a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005c9a:	6813      	ldr	r3, [r2, #0]
 8005c9c:	48ac      	ldr	r0, [pc, #688]	; (8005f50 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8005c9e:	4283      	cmp	r3, r0
 8005ca0:	f107 37ff 	add.w	r7, r7, #4294967295
 8005ca4:	f000 81e1 	beq.w	800606a <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8005ca8:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8005cac:	4283      	cmp	r3, r0
 8005cae:	f000 81dc 	beq.w	800606a <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8005cb2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8005cb4:	4338      	orrs	r0, r7
 8005cb6:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005cb8:	684c      	ldr	r4, [r1, #4]
 8005cba:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8005cbc:	64d7      	str	r7, [r2, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005cbe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005cc2:	0064      	lsls	r4, r4, #1
 8005cc4:	3402      	adds	r4, #2
 8005cc6:	271f      	movs	r7, #31
 8005cc8:	40a6      	lsls	r6, r4
 8005cca:	fa07 f404 	lsl.w	r4, r7, r4
 8005cce:	ea20 0004 	bic.w	r0, r0, r4
 8005cd2:	4330      	orrs	r0, r6
 8005cd4:	6490      	str	r0, [r2, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e009      	b.n	8005cee <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005cda:	684b      	ldr	r3, [r1, #4]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	f000 80e9 	beq.w	8005eb4 <HAL_ADCEx_InjectedConfigChannel+0x254>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ce2:	6c10      	ldr	r0, [r2, #64]	; 0x40
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005ce4:	6813      	ldr	r3, [r2, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ce6:	f040 0020 	orr.w	r0, r0, #32
 8005cea:	6410      	str	r0, [r2, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8005cec:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005cee:	689c      	ldr	r4, [r3, #8]
 8005cf0:	0726      	lsls	r6, r4, #28
 8005cf2:	d40d      	bmi.n	8005d10 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005cf4:	7f4c      	ldrb	r4, [r1, #29]
 8005cf6:	2c00      	cmp	r4, #0
 8005cf8:	f040 80c5 	bne.w	8005e86 <HAL_ADCEx_InjectedConfigChannel+0x226>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8005cfc:	7f0c      	ldrb	r4, [r1, #28]
 8005cfe:	68de      	ldr	r6, [r3, #12]
 8005d00:	7f8f      	ldrb	r7, [r1, #30]
 8005d02:	0524      	lsls	r4, r4, #20
 8005d04:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
 8005d08:	ea44 5447 	orr.w	r4, r4, r7, lsl #21
 8005d0c:	4334      	orrs	r4, r6
 8005d0e:	60dc      	str	r4, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005d10:	689c      	ldr	r4, [r3, #8]
 8005d12:	f014 0f0c 	tst.w	r4, #12
 8005d16:	d13d      	bne.n	8005d94 <HAL_ADCEx_InjectedConfigChannel+0x134>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005d18:	6a0c      	ldr	r4, [r1, #32]
 8005d1a:	2c01      	cmp	r4, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8005d1c:	68dc      	ldr	r4, [r3, #12]
 8005d1e:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005d22:	f000 8153 	beq.w	8005fcc <HAL_ADCEx_InjectedConfigChannel+0x36c>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005d26:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005d28:	7f4c      	ldrb	r4, [r1, #29]
 8005d2a:	2c01      	cmp	r4, #1
 8005d2c:	f000 8130 	beq.w	8005f90 <HAL_ADCEx_InjectedConfigChannel+0x330>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005d30:	680e      	ldr	r6, [r1, #0]
 8005d32:	2e09      	cmp	r6, #9
 8005d34:	f240 8097 	bls.w	8005e66 <HAL_ADCEx_InjectedConfigChannel+0x206>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8005d38:	688f      	ldr	r7, [r1, #8]
 8005d3a:	699c      	ldr	r4, [r3, #24]
 8005d3c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8005d40:	f1ac 0c1e 	sub.w	ip, ip, #30
 8005d44:	fa07 fe0c 	lsl.w	lr, r7, ip
 8005d48:	2707      	movs	r7, #7
 8005d4a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8005d4e:	ea24 040c 	bic.w	r4, r4, ip
 8005d52:	ea44 040e 	orr.w	r4, r4, lr
 8005d56:	619c      	str	r4, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005d58:	68dc      	ldr	r4, [r3, #12]
 8005d5a:	f3c4 0cc1 	ubfx	ip, r4, #3, #2
    switch (sConfigInjected->InjectedOffsetNumber)
 8005d5e:	690c      	ldr	r4, [r1, #16]
 8005d60:	f104 3eff 	add.w	lr, r4, #4294967295
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005d64:	694c      	ldr	r4, [r1, #20]
 8005d66:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005d6a:	fa04 f40c 	lsl.w	r4, r4, ip
    switch (sConfigInjected->InjectedOffsetNumber)
 8005d6e:	f1be 0f03 	cmp.w	lr, #3
 8005d72:	f200 818e 	bhi.w	8006092 <HAL_ADCEx_InjectedConfigChannel+0x432>
 8005d76:	e8df f01e 	tbh	[pc, lr, lsl #1]
 8005d7a:	0004      	.short	0x0004
 8005d7c:	00f70101 	.word	0x00f70101
 8005d80:	00e1      	.short	0x00e1
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8005d82:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8005d84:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005d88:	4e72      	ldr	r6, [pc, #456]	; (8005f54 <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
 8005d8a:	403e      	ands	r6, r7
 8005d8c:	4334      	orrs	r4, r6
 8005d8e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005d92:	661c      	str	r4, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d94:	689c      	ldr	r4, [r3, #8]
 8005d96:	f004 0403 	and.w	r4, r4, #3
 8005d9a:	2c01      	cmp	r4, #1
 8005d9c:	d041      	beq.n	8005e22 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d9e:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005da0:	680c      	ldr	r4, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005da2:	d044      	beq.n	8005e2e <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005da4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005da8:	2501      	movs	r5, #1
 8005daa:	40a5      	lsls	r5, r4
 8005dac:	ea21 0105 	bic.w	r1, r1, r5
 8005db0:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005db8:	d02c      	beq.n	8005e14 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
 8005dba:	4967      	ldr	r1, [pc, #412]	; (8005f58 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8005dbc:	428b      	cmp	r3, r1
 8005dbe:	d029      	beq.n	8005e14 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005dc0:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005dc2:	4966      	ldr	r1, [pc, #408]	; (8005f5c <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005dc4:	d029      	beq.n	8005e1a <HAL_ADCEx_InjectedConfigChannel+0x1ba>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005dc6:	2c11      	cmp	r4, #17
 8005dc8:	d16e      	bne.n	8005ea8 <HAL_ADCEx_InjectedConfigChannel+0x248>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005dca:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8005dcc:	01ee      	lsls	r6, r5, #7
 8005dce:	d41b      	bmi.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005dd4:	f000 8103 	beq.w	8005fde <HAL_ADCEx_InjectedConfigChannel+0x37e>
 8005dd8:	4d5f      	ldr	r5, [pc, #380]	; (8005f58 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8005dda:	42ab      	cmp	r3, r5
 8005ddc:	f000 80de 	beq.w	8005f9c <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8005de0:	4e5b      	ldr	r6, [pc, #364]	; (8005f50 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8005de2:	42b3      	cmp	r3, r6
 8005de4:	f000 814d 	beq.w	8006082 <HAL_ADCEx_InjectedConfigChannel+0x422>
 8005de8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	f000 80d7 	beq.w	8005fa0 <HAL_ADCEx_InjectedConfigChannel+0x340>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005df2:	689d      	ldr	r5, [r3, #8]
 8005df4:	f005 0503 	and.w	r5, r5, #3
 8005df8:	2d01      	cmp	r5, #1
 8005dfa:	f000 8130 	beq.w	800605e <HAL_ADCEx_InjectedConfigChannel+0x3fe>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005dfe:	2c10      	cmp	r4, #16
 8005e00:	d002      	beq.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005e02:	2c11      	cmp	r4, #17
 8005e04:	f040 80da 	bne.w	8005fbc <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __HAL_UNLOCK(hadc);
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005e0e:	b002      	add	sp, #8
 8005e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e14:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e16:	4952      	ldr	r1, [pc, #328]	; (8005f60 <HAL_ADCEx_InjectedConfigChannel+0x300>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e18:	d1d5      	bne.n	8005dc6 <HAL_ADCEx_InjectedConfigChannel+0x166>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005e1a:	688d      	ldr	r5, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e1c:	022f      	lsls	r7, r5, #8
 8005e1e:	d5d7      	bpl.n	8005dd0 <HAL_ADCEx_InjectedConfigChannel+0x170>
 8005e20:	e7f2      	b.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005e22:	681c      	ldr	r4, [r3, #0]
 8005e24:	07e4      	lsls	r4, r4, #31
 8005e26:	d4ef      	bmi.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005e28:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005e2a:	680c      	ldr	r4, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005e2c:	d1ba      	bne.n	8005da4 <HAL_ADCEx_InjectedConfigChannel+0x144>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005e2e:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8005e32:	40a5      	lsls	r5, r4
 8005e34:	4335      	orrs	r5, r6
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005e36:	2c09      	cmp	r4, #9
        MODIFY_REG(hadc->Instance->SMPR2,
 8005e38:	688e      	ldr	r6, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005e3a:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005e3e:	d870      	bhi.n	8005f22 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005e40:	1c65      	adds	r5, r4, #1
 8005e42:	6959      	ldr	r1, [r3, #20]
 8005e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e48:	2707      	movs	r7, #7
 8005e4a:	40ae      	lsls	r6, r5
 8005e4c:	fa07 f505 	lsl.w	r5, r7, r5
 8005e50:	ea21 0105 	bic.w	r1, r1, r5
 8005e54:	4331      	orrs	r1, r6
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8005e5a:	6159      	str	r1, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e5c:	d0d4      	beq.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
 8005e5e:	493e      	ldr	r1, [pc, #248]	; (8005f58 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8005e60:	428b      	cmp	r3, r1
 8005e62:	d1ad      	bne.n	8005dc0 <HAL_ADCEx_InjectedConfigChannel+0x160>
 8005e64:	e7d0      	b.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8005e66:	695c      	ldr	r4, [r3, #20]
 8005e68:	688f      	ldr	r7, [r1, #8]
 8005e6a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8005e6e:	f04f 0e07 	mov.w	lr, #7
 8005e72:	fa0e fe08 	lsl.w	lr, lr, r8
 8005e76:	fa07 fc08 	lsl.w	ip, r7, r8
 8005e7a:	ea24 040e 	bic.w	r4, r4, lr
 8005e7e:	ea44 040c 	orr.w	r4, r4, ip
 8005e82:	615c      	str	r4, [r3, #20]
 8005e84:	e768      	b.n	8005d58 <HAL_ADCEx_InjectedConfigChannel+0xf8>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8005e86:	68dc      	ldr	r4, [r3, #12]
 8005e88:	7f8e      	ldrb	r6, [r1, #30]
 8005e8a:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005e8e:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8005e92:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8005e94:	7f0c      	ldrb	r4, [r1, #28]
 8005e96:	2c01      	cmp	r4, #1
 8005e98:	f47f af3a 	bne.w	8005d10 <HAL_ADCEx_InjectedConfigChannel+0xb0>
        tmp_hal_status = HAL_ERROR;
 8005e9c:	4620      	mov	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e9e:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8005ea0:	f044 0420 	orr.w	r4, r4, #32
 8005ea4:	6414      	str	r4, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005ea6:	e733      	b.n	8005d10 <HAL_ADCEx_InjectedConfigChannel+0xb0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005ea8:	2c12      	cmp	r4, #18
 8005eaa:	d1ad      	bne.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005eac:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8005eae:	026d      	lsls	r5, r5, #9
 8005eb0:	d4aa      	bmi.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
 8005eb2:	e78d      	b.n	8005dd0 <HAL_ADCEx_InjectedConfigChannel+0x170>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005eb4:	6a0c      	ldr	r4, [r1, #32]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8005eb6:	6808      	ldr	r0, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005eb8:	2c01      	cmp	r4, #1
 8005eba:	f000 809b 	beq.w	8005ff4 <HAL_ADCEx_InjectedConfigChannel+0x394>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8005ebe:	6813      	ldr	r3, [r2, #0]
 8005ec0:	4e23      	ldr	r6, [pc, #140]	; (8005f50 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8005ec2:	42b3      	cmp	r3, r6
 8005ec4:	ea4f 2000 	mov.w	r0, r0, lsl #8
 8005ec8:	f000 8097 	beq.w	8005ffa <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8005ecc:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8005ed0:	42b3      	cmp	r3, r6
 8005ed2:	f000 8092 	beq.w	8005ffa <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8005ed6:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005ed8:	4330      	orrs	r0, r6
 8005eda:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->Instance->JSQR           ,
 8005edc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005ede:	4e21      	ldr	r6, [pc, #132]	; (8005f64 <HAL_ADCEx_InjectedConfigChannel+0x304>)
 8005ee0:	4034      	ands	r4, r6
 8005ee2:	4304      	orrs	r4, r0
 8005ee4:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005ee6:	6490      	str	r0, [r2, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e700      	b.n	8005cee <HAL_ADCEx_InjectedConfigChannel+0x8e>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005eec:	684b      	ldr	r3, [r1, #4]
 8005eee:	680f      	ldr	r7, [r1, #0]
 8005ef0:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8005ef2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	3302      	adds	r3, #2
 8005efa:	f04f 0c1f 	mov.w	ip, #31
 8005efe:	409f      	lsls	r7, r3
 8005f00:	fa0c f303 	lsl.w	r3, ip, r3
 8005f04:	ea26 0603 	bic.w	r6, r6, r3
      hadc->InjectionConfig.ChannelCount --;
 8005f08:	3801      	subs	r0, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005f0a:	433e      	orrs	r6, r7
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005f0c:	6813      	ldr	r3, [r2, #0]
      hadc->InjectionConfig.ChannelCount --;
 8005f0e:	64d0      	str	r0, [r2, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005f10:	6496      	str	r6, [r2, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1e8      	bne.n	8005ee8 <HAL_ADCEx_InjectedConfigChannel+0x288>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8005f16:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005f18:	4f12      	ldr	r7, [pc, #72]	; (8005f64 <HAL_ADCEx_InjectedConfigChannel+0x304>)
 8005f1a:	403c      	ands	r4, r7
 8005f1c:	4334      	orrs	r4, r6
 8005f1e:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005f20:	e6e5      	b.n	8005cee <HAL_ADCEx_InjectedConfigChannel+0x8e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005f22:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005f26:	6999      	ldr	r1, [r3, #24]
 8005f28:	3d1b      	subs	r5, #27
 8005f2a:	2707      	movs	r7, #7
 8005f2c:	40ae      	lsls	r6, r5
 8005f2e:	fa07 f505 	lsl.w	r5, r7, r5
 8005f32:	ea21 0105 	bic.w	r1, r1, r5
 8005f36:	4331      	orrs	r1, r6
 8005f38:	6199      	str	r1, [r3, #24]
 8005f3a:	e73b      	b.n	8005db4 <HAL_ADCEx_InjectedConfigChannel+0x154>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8005f3c:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 8005f3e:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005f42:	4e04      	ldr	r6, [pc, #16]	; (8005f54 <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
 8005f44:	403e      	ands	r6, r7
 8005f46:	4334      	orrs	r4, r6
 8005f48:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005f4c:	66dc      	str	r4, [r3, #108]	; 0x6c
      break;
 8005f4e:	e721      	b.n	8005d94 <HAL_ADCEx_InjectedConfigChannel+0x134>
 8005f50:	50000400 	.word	0x50000400
 8005f54:	83fff000 	.word	0x83fff000
 8005f58:	50000100 	.word	0x50000100
 8005f5c:	50000700 	.word	0x50000700
 8005f60:	50000300 	.word	0x50000300
 8005f64:	82082000 	.word	0x82082000
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8005f68:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8005f6a:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005f6e:	4e5f      	ldr	r6, [pc, #380]	; (80060ec <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8005f70:	403e      	ands	r6, r7
 8005f72:	4334      	orrs	r4, r6
 8005f74:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005f78:	669c      	str	r4, [r3, #104]	; 0x68
      break;
 8005f7a:	e70b      	b.n	8005d94 <HAL_ADCEx_InjectedConfigChannel+0x134>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8005f7c:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8005f7e:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005f82:	4e5a      	ldr	r6, [pc, #360]	; (80060ec <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8005f84:	403e      	ands	r6, r7
 8005f86:	4334      	orrs	r4, r6
 8005f88:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005f8c:	665c      	str	r4, [r3, #100]	; 0x64
      break;
 8005f8e:	e701      	b.n	8005d94 <HAL_ADCEx_InjectedConfigChannel+0x134>
        tmp_hal_status = HAL_ERROR;
 8005f90:	4620      	mov	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f92:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8005f94:	f044 0420 	orr.w	r4, r4, #32
 8005f98:	6414      	str	r4, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005f9a:	e6c9      	b.n	8005d30 <HAL_ADCEx_InjectedConfigChannel+0xd0>
 8005f9c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005fa0:	689d      	ldr	r5, [r3, #8]
 8005fa2:	f005 0503 	and.w	r5, r5, #3
 8005fa6:	2d01      	cmp	r5, #1
 8005fa8:	d01b      	beq.n	8005fe2 <HAL_ADCEx_InjectedConfigChannel+0x382>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005faa:	68b5      	ldr	r5, [r6, #8]
 8005fac:	f005 0503 	and.w	r5, r5, #3
 8005fb0:	2d01      	cmp	r5, #1
 8005fb2:	d02a      	beq.n	800600a <HAL_ADCEx_InjectedConfigChannel+0x3aa>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005fb4:	2c10      	cmp	r4, #16
 8005fb6:	d02c      	beq.n	8006012 <HAL_ADCEx_InjectedConfigChannel+0x3b2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005fb8:	2c11      	cmp	r4, #17
 8005fba:	d047      	beq.n	800604c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005fbc:	2c12      	cmp	r4, #18
 8005fbe:	f47f af23 	bne.w	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005fc2:	688b      	ldr	r3, [r1, #8]
 8005fc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fc8:	608b      	str	r3, [r1, #8]
 8005fca:	e71d      	b.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8005fcc:	7f4e      	ldrb	r6, [r1, #29]
 8005fce:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8005fd2:	60dc      	str	r4, [r3, #12]
 8005fd4:	e6ac      	b.n	8005d30 <HAL_ADCEx_InjectedConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8005fd6:	2002      	movs	r0, #2
}
 8005fd8:	b002      	add	sp, #8
 8005fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fde:	4e44      	ldr	r6, [pc, #272]	; (80060f0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8005fe0:	e7de      	b.n	8005fa0 <HAL_ADCEx_InjectedConfigChannel+0x340>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005fe2:	681d      	ldr	r5, [r3, #0]
 8005fe4:	07ef      	lsls	r7, r5, #31
 8005fe6:	d5e0      	bpl.n	8005faa <HAL_ADCEx_InjectedConfigChannel+0x34a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fe8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005fea:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8005fee:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ff0:	6413      	str	r3, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005ff2:	e709      	b.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005ff4:	6813      	ldr	r3, [r2, #0]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8005ff6:	0200      	lsls	r0, r0, #8
 8005ff8:	e770      	b.n	8005edc <HAL_ADCEx_InjectedConfigChannel+0x27c>
 8005ffa:	2c14      	cmp	r4, #20
 8005ffc:	d043      	beq.n	8006086 <HAL_ADCEx_InjectedConfigChannel+0x426>
 8005ffe:	2c1c      	cmp	r4, #28
 8006000:	d031      	beq.n	8006066 <HAL_ADCEx_InjectedConfigChannel+0x406>
{
 8006002:	2c08      	cmp	r4, #8
 8006004:	bf08      	it	eq
 8006006:	2434      	moveq	r4, #52	; 0x34
 8006008:	e765      	b.n	8005ed6 <HAL_ADCEx_InjectedConfigChannel+0x276>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800600a:	6835      	ldr	r5, [r6, #0]
 800600c:	07ed      	lsls	r5, r5, #31
 800600e:	d4eb      	bmi.n	8005fe8 <HAL_ADCEx_InjectedConfigChannel+0x388>
 8006010:	e7d0      	b.n	8005fb4 <HAL_ADCEx_InjectedConfigChannel+0x354>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006012:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006016:	f47f aef7 	bne.w	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800601a:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <HAL_ADCEx_InjectedConfigChannel+0x494>)
 800601c:	4d36      	ldr	r5, [pc, #216]	; (80060f8 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 800601e:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006020:	688c      	ldr	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006022:	fba5 5303 	umull	r5, r3, r5, r3
 8006026:	0c9b      	lsrs	r3, r3, #18
 8006028:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800602c:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800602e:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8006032:	608c      	str	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006034:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8006036:	9b01      	ldr	r3, [sp, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	f43f aee5 	beq.w	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
            wait_loop_index--;
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	3b01      	subs	r3, #1
 8006042:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8006044:	9b01      	ldr	r3, [sp, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f9      	bne.n	800603e <HAL_ADCEx_InjectedConfigChannel+0x3de>
 800604a:	e6dd      	b.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800604c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006050:	f47f aeda 	bne.w	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006054:	688b      	ldr	r3, [r1, #8]
 8006056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800605a:	608b      	str	r3, [r1, #8]
 800605c:	e6d4      	b.n	8005e08 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	07db      	lsls	r3, r3, #31
 8006062:	d4c1      	bmi.n	8005fe8 <HAL_ADCEx_InjectedConfigChannel+0x388>
 8006064:	e6cb      	b.n	8005dfe <HAL_ADCEx_InjectedConfigChannel+0x19e>
{
 8006066:	2410      	movs	r4, #16
 8006068:	e735      	b.n	8005ed6 <HAL_ADCEx_InjectedConfigChannel+0x276>
 800606a:	2c14      	cmp	r4, #20
 800606c:	d00f      	beq.n	800608e <HAL_ADCEx_InjectedConfigChannel+0x42e>
 800606e:	2c1c      	cmp	r4, #28
 8006070:	d00b      	beq.n	800608a <HAL_ADCEx_InjectedConfigChannel+0x42a>
 8006072:	2c08      	cmp	r4, #8
 8006074:	bf08      	it	eq
 8006076:	2434      	moveq	r4, #52	; 0x34
 8006078:	e61b      	b.n	8005cb2 <HAL_ADCEx_InjectedConfigChannel+0x52>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 800607a:	1e78      	subs	r0, r7, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800607c:	6813      	ldr	r3, [r2, #0]
 800607e:	4607      	mov	r7, r0
 8006080:	e61a      	b.n	8005cb8 <HAL_ADCEx_InjectedConfigChannel+0x58>
 8006082:	4e1e      	ldr	r6, [pc, #120]	; (80060fc <HAL_ADCEx_InjectedConfigChannel+0x49c>)
 8006084:	e78c      	b.n	8005fa0 <HAL_ADCEx_InjectedConfigChannel+0x340>
{
 8006086:	241c      	movs	r4, #28
 8006088:	e725      	b.n	8005ed6 <HAL_ADCEx_InjectedConfigChannel+0x276>
 800608a:	2410      	movs	r4, #16
 800608c:	e611      	b.n	8005cb2 <HAL_ADCEx_InjectedConfigChannel+0x52>
 800608e:	241c      	movs	r4, #28
 8006090:	e60f      	b.n	8005cb2 <HAL_ADCEx_InjectedConfigChannel+0x52>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8006092:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8006094:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8006098:	ebb4 6f86 	cmp.w	r4, r6, lsl #26
 800609c:	ea4f 6786 	mov.w	r7, r6, lsl #26
 80060a0:	d014      	beq.n	80060cc <HAL_ADCEx_InjectedConfigChannel+0x46c>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80060a2:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80060a4:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80060a8:	42a7      	cmp	r7, r4
 80060aa:	d014      	beq.n	80060d6 <HAL_ADCEx_InjectedConfigChannel+0x476>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80060ac:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80060ae:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80060b2:	42a7      	cmp	r7, r4
 80060b4:	d014      	beq.n	80060e0 <HAL_ADCEx_InjectedConfigChannel+0x480>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80060b6:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 80060b8:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 80060bc:	42a7      	cmp	r7, r4
 80060be:	f47f ae69 	bne.w	8005d94 <HAL_ADCEx_InjectedConfigChannel+0x134>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80060c2:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 80060c4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80060c8:	66dc      	str	r4, [r3, #108]	; 0x6c
 80060ca:	e663      	b.n	8005d94 <HAL_ADCEx_InjectedConfigChannel+0x134>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80060cc:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 80060ce:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80060d2:	661c      	str	r4, [r3, #96]	; 0x60
 80060d4:	e7e5      	b.n	80060a2 <HAL_ADCEx_InjectedConfigChannel+0x442>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80060d6:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 80060d8:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80060dc:	665c      	str	r4, [r3, #100]	; 0x64
 80060de:	e7e5      	b.n	80060ac <HAL_ADCEx_InjectedConfigChannel+0x44c>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80060e0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 80060e2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80060e6:	669c      	str	r4, [r3, #104]	; 0x68
 80060e8:	e7e5      	b.n	80060b6 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80060ea:	bf00      	nop
 80060ec:	83fff000 	.word	0x83fff000
 80060f0:	50000100 	.word	0x50000100
 80060f4:	20000008 	.word	0x20000008
 80060f8:	431bde83 	.word	0x431bde83
 80060fc:	50000500 	.word	0x50000500

08006100 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006100:	6802      	ldr	r2, [r0, #0]
 8006102:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 8006106:	b4f0      	push	{r4, r5, r6, r7}
 8006108:	4603      	mov	r3, r0
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800610a:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800610c:	4841      	ldr	r0, [pc, #260]	; (8006214 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 800610e:	d00d      	beq.n	800612c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8006110:	4282      	cmp	r2, r0
 8006112:	d009      	beq.n	8006128 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8006114:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8006118:	4282      	cmp	r2, r0
 800611a:	d049      	beq.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 800611c:	4c3e      	ldr	r4, [pc, #248]	; (8006218 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 800611e:	42a2      	cmp	r2, r4
 8006120:	d004      	beq.n	800612c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8006122:	2001      	movs	r0, #1
} 
 8006124:	bcf0      	pop	{r4, r5, r6, r7}
 8006126:	4770      	bx	lr
 8006128:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 800612c:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
 8006130:	f1bc 0f01 	cmp.w	ip, #1
 8006134:	d042      	beq.n	80061bc <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8006136:	2401      	movs	r4, #1
 8006138:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800613c:	6894      	ldr	r4, [r2, #8]
 800613e:	0764      	lsls	r4, r4, #29
 8006140:	d509      	bpl.n	8006156 <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006144:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006148:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8006152:	bcf0      	pop	{r4, r5, r6, r7}
 8006154:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006156:	6884      	ldr	r4, [r0, #8]
 8006158:	0767      	lsls	r7, r4, #29
 800615a:	d4f2      	bmi.n	8006142 <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800615c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8006160:	d045      	beq.n	80061ee <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006162:	4f2c      	ldr	r7, [pc, #176]	; (8006214 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8006164:	4c2d      	ldr	r4, [pc, #180]	; (800621c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8006166:	4e2e      	ldr	r6, [pc, #184]	; (8006220 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8006168:	42ba      	cmp	r2, r7
 800616a:	bf18      	it	ne
 800616c:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800616e:	b345      	cbz	r5, 80061c2 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006170:	68a6      	ldr	r6, [r4, #8]
 8006172:	684f      	ldr	r7, [r1, #4]
 8006174:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 8006178:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 800617c:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8006180:	ea46 060c 	orr.w	r6, r6, ip
 8006184:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006186:	6896      	ldr	r6, [r2, #8]
 8006188:	f006 0603 	and.w	r6, r6, #3
 800618c:	2e01      	cmp	r6, #1
 800618e:	d03c      	beq.n	800620a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006190:	6882      	ldr	r2, [r0, #8]
 8006192:	f002 0203 	and.w	r2, r2, #3
 8006196:	2a01      	cmp	r2, #1
 8006198:	d02f      	beq.n	80061fa <HAL_ADCEx_MultiModeConfigChannel+0xfa>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800619a:	68a0      	ldr	r0, [r4, #8]
 800619c:	688a      	ldr	r2, [r1, #8]
 800619e:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 80061a2:	432a      	orrs	r2, r5
 80061a4:	f021 010f 	bic.w	r1, r1, #15
 80061a8:	430a      	orrs	r2, r1
 80061aa:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061ac:	2000      	movs	r0, #0
 80061ae:	e7cd      	b.n	800614c <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 80061b0:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
 80061b4:	4818      	ldr	r0, [pc, #96]	; (8006218 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 80061b6:	f1bc 0f01 	cmp.w	ip, #1
 80061ba:	d1bc      	bne.n	8006136 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80061bc:	2002      	movs	r0, #2
} 
 80061be:	bcf0      	pop	{r4, r5, r6, r7}
 80061c0:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80061c2:	68a1      	ldr	r1, [r4, #8]
 80061c4:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80061c8:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80061ca:	6891      	ldr	r1, [r2, #8]
 80061cc:	f001 0103 	and.w	r1, r1, #3
 80061d0:	2901      	cmp	r1, #1
 80061d2:	d016      	beq.n	8006202 <HAL_ADCEx_MultiModeConfigChannel+0x102>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80061d4:	6882      	ldr	r2, [r0, #8]
 80061d6:	f002 0203 	and.w	r2, r2, #3
 80061da:	2a01      	cmp	r2, #1
 80061dc:	d009      	beq.n	80061f2 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80061de:	68a2      	ldr	r2, [r4, #8]
 80061e0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80061e4:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061e8:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80061ea:	60a2      	str	r2, [r4, #8]
 80061ec:	e7ae      	b.n	800614c <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061ee:	4c0b      	ldr	r4, [pc, #44]	; (800621c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80061f0:	e7bd      	b.n	800616e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80061f2:	6802      	ldr	r2, [r0, #0]
 80061f4:	07d2      	lsls	r2, r2, #31
 80061f6:	d4d9      	bmi.n	80061ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80061f8:	e7f1      	b.n	80061de <HAL_ADCEx_MultiModeConfigChannel+0xde>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80061fa:	6802      	ldr	r2, [r0, #0]
 80061fc:	07d0      	lsls	r0, r2, #31
 80061fe:	d4d5      	bmi.n	80061ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006200:	e7cb      	b.n	800619a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	07d1      	lsls	r1, r2, #31
 8006206:	d4d1      	bmi.n	80061ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006208:	e7e4      	b.n	80061d4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	07d6      	lsls	r6, r2, #31
 800620e:	d5bf      	bpl.n	8006190 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8006210:	e7cc      	b.n	80061ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006212:	bf00      	nop
 8006214:	50000100 	.word	0x50000100
 8006218:	50000500 	.word	0x50000500
 800621c:	50000300 	.word	0x50000300
 8006220:	50000700 	.word	0x50000700

08006224 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006224:	2800      	cmp	r0, #0
 8006226:	d07b      	beq.n	8006320 <HAL_CAN_Init+0xfc>
{
 8006228:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800622a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800622e:	4604      	mov	r4, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d072      	beq.n	800631a <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006234:	6822      	ldr	r2, [r4, #0]
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	f043 0301 	orr.w	r3, r3, #1
 800623c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800623e:	f7fe fff5 	bl	800522c <HAL_GetTick>
 8006242:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006244:	e004      	b.n	8006250 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006246:	f7fe fff1 	bl	800522c <HAL_GetTick>
 800624a:	1b43      	subs	r3, r0, r5
 800624c:	2b0a      	cmp	r3, #10
 800624e:	d85b      	bhi.n	8006308 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	07d1      	lsls	r1, r2, #31
 8006256:	d5f6      	bpl.n	8006246 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	f022 0202 	bic.w	r2, r2, #2
 800625e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006260:	f7fe ffe4 	bl	800522c <HAL_GetTick>
 8006264:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006266:	e004      	b.n	8006272 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006268:	f7fe ffe0 	bl	800522c <HAL_GetTick>
 800626c:	1b40      	subs	r0, r0, r5
 800626e:	280a      	cmp	r0, #10
 8006270:	d84a      	bhi.n	8006308 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	0792      	lsls	r2, r2, #30
 8006278:	d4f6      	bmi.n	8006268 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800627a:	7e22      	ldrb	r2, [r4, #24]
 800627c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	bf0c      	ite	eq
 8006282:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006286:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800628a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800628c:	7e62      	ldrb	r2, [r4, #25]
 800628e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	bf0c      	ite	eq
 8006294:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006298:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800629c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800629e:	7ea2      	ldrb	r2, [r4, #26]
 80062a0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	bf0c      	ite	eq
 80062a6:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80062aa:	f022 0220 	bicne.w	r2, r2, #32
 80062ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80062b0:	7ee2      	ldrb	r2, [r4, #27]
 80062b2:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	bf0c      	ite	eq
 80062b8:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80062bc:	f042 0210 	orrne.w	r2, r2, #16
 80062c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80062c2:	7f22      	ldrb	r2, [r4, #28]
 80062c4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	bf0c      	ite	eq
 80062ca:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80062ce:	f022 0208 	bicne.w	r2, r2, #8
 80062d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80062d4:	7f62      	ldrb	r2, [r4, #29]
 80062d6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	bf0c      	ite	eq
 80062dc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80062e0:	f022 0204 	bicne.w	r2, r2, #4
 80062e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80062e6:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 80062ea:	6921      	ldr	r1, [r4, #16]
 80062ec:	4302      	orrs	r2, r0
 80062ee:	430a      	orrs	r2, r1
 80062f0:	6960      	ldr	r0, [r4, #20]
 80062f2:	6861      	ldr	r1, [r4, #4]
 80062f4:	4302      	orrs	r2, r0
 80062f6:	3901      	subs	r1, #1
 80062f8:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80062fa:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80062fc:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80062fe:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006300:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8006302:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8006306:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006308:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800630a:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800630c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006310:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8006312:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8006316:	2001      	movs	r0, #1
}
 8006318:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800631a:	f7fb f857 	bl	80013cc <HAL_CAN_MspInit>
 800631e:	e789      	b.n	8006234 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8006320:	2001      	movs	r0, #1
}
 8006322:	4770      	bx	lr

08006324 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006324:	b470      	push	{r4, r5, r6}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006326:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 800632a:	6804      	ldr	r4, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 800632c:	3a01      	subs	r2, #1
 800632e:	2a01      	cmp	r2, #1
 8006330:	d907      	bls.n	8006342 <HAL_CAN_ConfigFilter+0x1e>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006332:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006334:	4603      	mov	r3, r0
 8006336:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 800633a:	2001      	movs	r0, #1
  }
}
 800633c:	bc70      	pop	{r4, r5, r6}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800633e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006340:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006342:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006346:	694a      	ldr	r2, [r1, #20]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006348:	69cd      	ldr	r5, [r1, #28]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006352:	f002 001f 	and.w	r0, r2, #31
 8006356:	2301      	movs	r3, #1
 8006358:	4083      	lsls	r3, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800635a:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 800635e:	ea20 0003 	bic.w	r0, r0, r3
 8006362:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
 8006366:	43d8      	mvns	r0, r3
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006368:	2d00      	cmp	r5, #0
 800636a:	d13d      	bne.n	80063e8 <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800636c:	f8d4 520c 	ldr.w	r5, [r4, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006370:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006372:	4005      	ands	r5, r0
 8006374:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006378:	888d      	ldrh	r5, [r1, #4]
 800637a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800637e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006382:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006386:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006388:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800638a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800638e:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006392:	698a      	ldr	r2, [r1, #24]
 8006394:	bb12      	cbnz	r2, 80063dc <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006396:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 800639a:	4002      	ands	r2, r0
 800639c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80063a0:	690a      	ldr	r2, [r1, #16]
 80063a2:	b9aa      	cbnz	r2, 80063d0 <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80063a4:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 80063a8:	4010      	ands	r0, r2
 80063aa:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80063ae:	6a0a      	ldr	r2, [r1, #32]
 80063b0:	2a01      	cmp	r2, #1
 80063b2:	d104      	bne.n	80063be <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80063b4:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80063be:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 80063c2:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 80063c6:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80063c8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
}
 80063cc:	bc70      	pop	{r4, r5, r6}
 80063ce:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80063d0:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 80063d4:	431a      	orrs	r2, r3
 80063d6:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
 80063da:	e7e8      	b.n	80063ae <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80063dc:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 80063e0:	431a      	orrs	r2, r3
 80063e2:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
 80063e6:	e7db      	b.n	80063a0 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80063e8:	2d01      	cmp	r5, #1
 80063ea:	d1d2      	bne.n	8006392 <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80063ec:	f8d4 520c 	ldr.w	r5, [r4, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80063f0:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80063f2:	431d      	orrs	r5, r3
 80063f4:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80063f8:	888d      	ldrh	r5, [r1, #4]
 80063fa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80063fe:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006402:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006406:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006408:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800640a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800640e:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
 8006412:	e7be      	b.n	8006392 <HAL_CAN_ConfigFilter+0x6e>

08006414 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006414:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006416:	f890 3020 	ldrb.w	r3, [r0, #32]
 800641a:	2b01      	cmp	r3, #1
{
 800641c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800641e:	d006      	beq.n	800642e <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006420:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8006422:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006428:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 800642a:	4630      	mov	r0, r6
 800642c:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800642e:	6802      	ldr	r2, [r0, #0]
 8006430:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006432:	2302      	movs	r3, #2
 8006434:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006438:	6813      	ldr	r3, [r2, #0]
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006440:	f7fe fef4 	bl	800522c <HAL_GetTick>
 8006444:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006446:	e004      	b.n	8006452 <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006448:	f7fe fef0 	bl	800522c <HAL_GetTick>
 800644c:	1b43      	subs	r3, r0, r5
 800644e:	2b0a      	cmp	r3, #10
 8006450:	d808      	bhi.n	8006464 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f013 0301 	ands.w	r3, r3, #1
 800645a:	d1f5      	bne.n	8006448 <HAL_CAN_Start+0x34>
    return HAL_OK;
 800645c:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800645e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006460:	4630      	mov	r0, r6
 8006462:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006464:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8006466:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800646c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800646e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8006472:	4630      	mov	r0, r6
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	bf00      	nop

08006478 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006478:	b430      	push	{r4, r5}
 800647a:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800647c:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006480:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006484:	3801      	subs	r0, #1
 8006486:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006488:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800648a:	d83b      	bhi.n	8006504 <HAL_CAN_AddTxMessage+0x8c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800648c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8006490:	d108      	bne.n	80064a4 <HAL_CAN_AddTxMessage+0x2c>
      return HAL_OK;
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006492:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8006496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

      return HAL_ERROR;
 800649a:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800649c:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800649e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80064a2:	4770      	bx	lr
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80064a4:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80064a8:	2001      	movs	r0, #1
 80064aa:	40a0      	lsls	r0, r4
 80064ac:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80064ae:	688b      	ldr	r3, [r1, #8]
 80064b0:	b38b      	cbz	r3, 8006516 <HAL_CAN_AddTxMessage+0x9e>
                                                           pHeader->IDE |
 80064b2:	68c8      	ldr	r0, [r1, #12]
 80064b4:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80064b6:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 80064b8:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80064bc:	f104 0018 	add.w	r0, r4, #24
 80064c0:	0100      	lsls	r0, r0, #4
 80064c2:	502b      	str	r3, [r5, r0]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80064c4:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 80064c8:	690b      	ldr	r3, [r1, #16]
 80064ca:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 80064ce:	7d0b      	ldrb	r3, [r1, #20]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	ea4f 1104 	mov.w	r1, r4, lsl #4
 80064d6:	d105      	bne.n	80064e4 <HAL_CAN_AddTxMessage+0x6c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80064d8:	f8dc 3184 	ldr.w	r3, [ip, #388]	; 0x184
 80064dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e0:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80064e4:	186b      	adds	r3, r5, r1
 80064e6:	6851      	ldr	r1, [r2, #4]
 80064e8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80064ec:	6812      	ldr	r2, [r2, #0]
 80064ee:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80064f2:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 80064f6:	f043 0301 	orr.w	r3, r3, #1
      return HAL_OK;
 80064fa:	2000      	movs	r0, #0
}
 80064fc:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80064fe:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 8006502:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006504:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8006508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 800650c:	2001      	movs	r0, #1
}
 800650e:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006510:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8006514:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006516:	68cb      	ldr	r3, [r1, #12]
 8006518:	6808      	ldr	r0, [r1, #0]
 800651a:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 800651e:	f104 0318 	add.w	r3, r4, #24
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	50e8      	str	r0, [r5, r3]
 8006526:	e7cd      	b.n	80064c4 <HAL_CAN_AddTxMessage+0x4c>

08006528 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006528:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800652a:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800652e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006532:	f1be 0f01 	cmp.w	lr, #1
{
 8006536:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8006538:	d873      	bhi.n	8006622 <HAL_CAN_GetRxMessage+0xfa>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800653a:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800653c:	b951      	cbnz	r1, 8006554 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800653e:	68c4      	ldr	r4, [r0, #12]
 8006540:	07a4      	lsls	r4, r4, #30
 8006542:	d10a      	bne.n	800655a <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006544:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8006548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 800654c:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800654e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8006552:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006554:	6904      	ldr	r4, [r0, #16]
 8006556:	07a6      	lsls	r6, r4, #30
 8006558:	d0f4      	beq.n	8006544 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800655a:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 800655e:	010c      	lsls	r4, r1, #4
 8006560:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8006564:	f005 0504 	and.w	r5, r5, #4
 8006568:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800656a:	2d00      	cmp	r5, #0
 800656c:	d060      	beq.n	8006630 <HAL_CAN_GetRxMessage+0x108>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800656e:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8006572:	08ed      	lsrs	r5, r5, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006574:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006576:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800657a:	f005 0502 	and.w	r5, r5, #2
 800657e:	60d5      	str	r5, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006580:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
 8006584:	072d      	lsls	r5, r5, #28
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006586:	bf58      	it	pl
 8006588:	f8de 51b4 	ldrpl.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800658c:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006590:	bf54      	ite	pl
 8006592:	f005 050f 	andpl.w	r5, r5, #15
      pHeader->DLC = 8U;
 8006596:	2508      	movmi	r5, #8
 8006598:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800659a:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800659c:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80065a0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80065a4:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80065a6:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80065a8:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80065ac:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80065ae:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80065b0:	f8dc 2000 	ldr.w	r2, [ip]
 80065b4:	4422      	add	r2, r4
 80065b6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80065ba:	0a12      	lsrs	r2, r2, #8
 80065bc:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80065be:	f8dc 2000 	ldr.w	r2, [ip]
 80065c2:	4422      	add	r2, r4
 80065c4:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80065c8:	0c12      	lsrs	r2, r2, #16
 80065ca:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80065cc:	f8dc 2000 	ldr.w	r2, [ip]
 80065d0:	4422      	add	r2, r4
 80065d2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80065d6:	0e12      	lsrs	r2, r2, #24
 80065d8:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80065da:	f8dc 2000 	ldr.w	r2, [ip]
 80065de:	4422      	add	r2, r4
 80065e0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80065e4:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80065e6:	f8dc 2000 	ldr.w	r2, [ip]
 80065ea:	4422      	add	r2, r4
 80065ec:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80065f0:	0a12      	lsrs	r2, r2, #8
 80065f2:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80065f4:	f8dc 2000 	ldr.w	r2, [ip]
 80065f8:	4422      	add	r2, r4
 80065fa:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80065fe:	0c12      	lsrs	r2, r2, #16
 8006600:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006602:	f8dc 2000 	ldr.w	r2, [ip]
 8006606:	4422      	add	r2, r4
 8006608:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800660c:	0e12      	lsrs	r2, r2, #24
 800660e:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006610:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006614:	b989      	cbnz	r1, 800663a <HAL_CAN_GetRxMessage+0x112>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006616:	68d3      	ldr	r3, [r2, #12]
 8006618:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 800661c:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800661e:	60d3      	str	r3, [r2, #12]
}
 8006620:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006622:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8006628:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800662a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800662e:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006630:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8006634:	0d6d      	lsrs	r5, r5, #21
 8006636:	6015      	str	r5, [r2, #0]
 8006638:	e79d      	b.n	8006576 <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800663a:	6913      	ldr	r3, [r2, #16]
 800663c:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8006640:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006642:	6113      	str	r3, [r2, #16]
}
 8006644:	bd70      	pop	{r4, r5, r6, pc}
 8006646:	bf00      	nop

08006648 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8006648:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800664c:	3a01      	subs	r2, #1
 800664e:	2a01      	cmp	r2, #1
{
 8006650:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8006652:	d905      	bls.n	8006660 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006654:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006656:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 800665a:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800665c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800665e:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006660:	6802      	ldr	r2, [r0, #0]
 8006662:	6953      	ldr	r3, [r2, #20]
 8006664:	430b      	orrs	r3, r1
    return HAL_OK;
 8006666:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006668:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800666a:	4770      	bx	lr

0800666c <HAL_CAN_TxMailbox0CompleteCallback>:
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop

08006670 <HAL_CAN_TxMailbox1CompleteCallback>:
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop

08006674 <HAL_CAN_TxMailbox2CompleteCallback>:
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop

08006678 <HAL_CAN_TxMailbox0AbortCallback>:
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop

0800667c <HAL_CAN_TxMailbox1AbortCallback>:
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop

08006680 <HAL_CAN_TxMailbox2AbortCallback>:
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop

08006684 <HAL_CAN_RxFifo0FullCallback>:
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop

08006688 <HAL_CAN_RxFifo1FullCallback>:
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop

0800668c <HAL_CAN_SleepCallback>:
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop

08006694 <HAL_CAN_ErrorCallback>:
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop

08006698 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800669c:	6803      	ldr	r3, [r0, #0]
 800669e:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80066a0:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80066a4:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80066a6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80066aa:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80066ae:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80066b2:	f014 0601 	ands.w	r6, r4, #1
{
 80066b6:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80066b8:	d025      	beq.n	8006706 <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80066ba:	f017 0601 	ands.w	r6, r7, #1
 80066be:	f040 808f 	bne.w	80067e0 <HAL_CAN_IRQHandler+0x148>
 80066c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80066ca:	05f8      	lsls	r0, r7, #23
 80066cc:	d50d      	bpl.n	80066ea <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066d4:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80066d6:	05bb      	lsls	r3, r7, #22
 80066d8:	f100 80be 	bmi.w	8006858 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80066dc:	0578      	lsls	r0, r7, #21
 80066de:	f100 80e4 	bmi.w	80068aa <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80066e2:	053b      	lsls	r3, r7, #20
 80066e4:	f140 80f0 	bpl.w	80068c8 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80066e8:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80066ea:	03f8      	lsls	r0, r7, #15
 80066ec:	d50b      	bpl.n	8006706 <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80066f4:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80066f6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80066f8:	f100 80ba 	bmi.w	8006870 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80066fc:	037a      	lsls	r2, r7, #13
 80066fe:	f140 80cf 	bpl.w	80068a0 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006702:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006706:	0727      	lsls	r7, r4, #28
 8006708:	d502      	bpl.n	8006710 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800670a:	f01b 0f10 	tst.w	fp, #16
 800670e:	d161      	bne.n	80067d4 <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006710:	0760      	lsls	r0, r4, #29
 8006712:	d503      	bpl.n	800671c <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006714:	f01b 0f08 	tst.w	fp, #8
 8006718:	f040 808c 	bne.w	8006834 <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800671c:	07a1      	lsls	r1, r4, #30
 800671e:	d504      	bpl.n	800672a <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006720:	682b      	ldr	r3, [r5, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	079a      	lsls	r2, r3, #30
 8006726:	f040 808c 	bne.w	8006842 <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800672a:	0663      	lsls	r3, r4, #25
 800672c:	d502      	bpl.n	8006734 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800672e:	f01a 0f10 	tst.w	sl, #16
 8006732:	d149      	bne.n	80067c8 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006734:	06a7      	lsls	r7, r4, #26
 8006736:	d502      	bpl.n	800673e <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006738:	f01a 0f08 	tst.w	sl, #8
 800673c:	d173      	bne.n	8006826 <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800673e:	06e0      	lsls	r0, r4, #27
 8006740:	d503      	bpl.n	800674a <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006742:	682b      	ldr	r3, [r5, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	0799      	lsls	r1, r3, #30
 8006748:	d162      	bne.n	8006810 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800674a:	03a2      	lsls	r2, r4, #14
 800674c:	d502      	bpl.n	8006754 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800674e:	f018 0f10 	tst.w	r8, #16
 8006752:	d161      	bne.n	8006818 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006754:	03e3      	lsls	r3, r4, #15
 8006756:	d502      	bpl.n	800675e <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006758:	f018 0f08 	tst.w	r8, #8
 800675c:	d175      	bne.n	800684a <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800675e:	0427      	lsls	r7, r4, #16
 8006760:	d505      	bpl.n	800676e <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006762:	f018 0f04 	tst.w	r8, #4
 8006766:	d106      	bne.n	8006776 <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006768:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800676a:	2204      	movs	r2, #4
 800676c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800676e:	2e00      	cmp	r6, #0
 8006770:	d146      	bne.n	8006800 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006776:	05e0      	lsls	r0, r4, #23
 8006778:	d504      	bpl.n	8006784 <HAL_CAN_IRQHandler+0xec>
 800677a:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 800677e:	bf18      	it	ne
 8006780:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006784:	05a1      	lsls	r1, r4, #22
 8006786:	d504      	bpl.n	8006792 <HAL_CAN_IRQHandler+0xfa>
 8006788:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 800678c:	bf18      	it	ne
 800678e:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006792:	0562      	lsls	r2, r4, #21
 8006794:	d504      	bpl.n	80067a0 <HAL_CAN_IRQHandler+0x108>
 8006796:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800679a:	bf18      	it	ne
 800679c:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80067a0:	0523      	lsls	r3, r4, #20
 80067a2:	d5e1      	bpl.n	8006768 <HAL_CAN_IRQHandler+0xd0>
 80067a4:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 80067a8:	d0de      	beq.n	8006768 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 80067aa:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80067ae:	f000 809a 	beq.w	80068e6 <HAL_CAN_IRQHandler+0x24e>
 80067b2:	d861      	bhi.n	8006878 <HAL_CAN_IRQHandler+0x1e0>
 80067b4:	f1b9 0f20 	cmp.w	r9, #32
 80067b8:	f000 8083 	beq.w	80068c2 <HAL_CAN_IRQHandler+0x22a>
 80067bc:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80067c0:	d168      	bne.n	8006894 <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 80067c2:	f046 0620 	orr.w	r6, r6, #32
            break;
 80067c6:	e05f      	b.n	8006888 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80067cc:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80067d0:	611a      	str	r2, [r3, #16]
 80067d2:	e7af      	b.n	8006734 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80067d8:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80067dc:	60da      	str	r2, [r3, #12]
 80067de:	e797      	b.n	8006710 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80067e0:	2201      	movs	r2, #1
 80067e2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80067e4:	07bb      	lsls	r3, r7, #30
 80067e6:	d43b      	bmi.n	8006860 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80067e8:	077e      	lsls	r6, r7, #29
 80067ea:	d460      	bmi.n	80068ae <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80067ec:	f017 0608 	ands.w	r6, r7, #8
 80067f0:	d06e      	beq.n	80068d0 <HAL_CAN_IRQHandler+0x238>
 80067f2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80067f6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80067fa:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80067fe:	e764      	b.n	80066ca <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 8006800:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006802:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 8006804:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8006806:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8006808:	f7ff ff44 	bl	8006694 <HAL_CAN_ErrorCallback>
}
 800680c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006810:	4628      	mov	r0, r5
 8006812:	f7fb fad9 	bl	8001dc8 <HAL_CAN_RxFifo1MsgPendingCallback>
 8006816:	e798      	b.n	800674a <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	2210      	movs	r2, #16
 800681c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800681e:	4628      	mov	r0, r5
 8006820:	f7ff ff34 	bl	800668c <HAL_CAN_SleepCallback>
 8006824:	e796      	b.n	8006754 <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006826:	682b      	ldr	r3, [r5, #0]
 8006828:	2208      	movs	r2, #8
 800682a:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800682c:	4628      	mov	r0, r5
 800682e:	f7ff ff2b 	bl	8006688 <HAL_CAN_RxFifo1FullCallback>
 8006832:	e784      	b.n	800673e <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	2208      	movs	r2, #8
 8006838:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800683a:	4628      	mov	r0, r5
 800683c:	f7ff ff22 	bl	8006684 <HAL_CAN_RxFifo0FullCallback>
 8006840:	e76c      	b.n	800671c <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006842:	4628      	mov	r0, r5
 8006844:	f7fb faa6 	bl	8001d94 <HAL_CAN_RxFifo0MsgPendingCallback>
 8006848:	e76f      	b.n	800672a <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800684a:	682b      	ldr	r3, [r5, #0]
 800684c:	2208      	movs	r2, #8
 800684e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006850:	4628      	mov	r0, r5
 8006852:	f7ff ff1d 	bl	8006690 <HAL_CAN_WakeUpFromRxMsgCallback>
 8006856:	e782      	b.n	800675e <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006858:	4628      	mov	r0, r5
 800685a:	f7ff ff09 	bl	8006670 <HAL_CAN_TxMailbox1CompleteCallback>
 800685e:	e744      	b.n	80066ea <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006860:	f7ff ff04 	bl	800666c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006864:	2600      	movs	r6, #0
 8006866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800686a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800686e:	e72c      	b.n	80066ca <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006870:	4628      	mov	r0, r5
 8006872:	f7ff feff 	bl	8006674 <HAL_CAN_TxMailbox2CompleteCallback>
 8006876:	e746      	b.n	8006706 <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8006878:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 800687c:	d01e      	beq.n	80068bc <HAL_CAN_IRQHandler+0x224>
 800687e:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8006882:	bf08      	it	eq
 8006884:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	699a      	ldr	r2, [r3, #24]
 800688c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006890:	619a      	str	r2, [r3, #24]
 8006892:	e76a      	b.n	800676a <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 8006894:	f1b9 0f10 	cmp.w	r9, #16
 8006898:	d1f6      	bne.n	8006888 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 800689a:	f046 0608 	orr.w	r6, r6, #8
            break;
 800689e:	e7f3      	b.n	8006888 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80068a0:	033b      	lsls	r3, r7, #12
 80068a2:	d51c      	bpl.n	80068de <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80068a4:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 80068a8:	e72d      	b.n	8006706 <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80068aa:	4616      	mov	r6, r2
 80068ac:	e71d      	b.n	80066ea <HAL_CAN_IRQHandler+0x52>
 80068ae:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80068b2:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80068b6:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80068ba:	e706      	b.n	80066ca <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 80068bc:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80068c0:	e7e2      	b.n	8006888 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 80068c2:	f046 0610 	orr.w	r6, r6, #16
            break;
 80068c6:	e7df      	b.n	8006888 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80068c8:	4628      	mov	r0, r5
 80068ca:	f7ff fed7 	bl	800667c <HAL_CAN_TxMailbox1AbortCallback>
 80068ce:	e70c      	b.n	80066ea <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80068d0:	f7ff fed2 	bl	8006678 <HAL_CAN_TxMailbox0AbortCallback>
 80068d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068dc:	e6f5      	b.n	80066ca <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80068de:	4628      	mov	r0, r5
 80068e0:	f7ff fece 	bl	8006680 <HAL_CAN_TxMailbox2AbortCallback>
 80068e4:	e70f      	b.n	8006706 <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 80068e6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80068ea:	e7cd      	b.n	8006888 <HAL_CAN_IRQHandler+0x1f0>

080068ec <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068ec:	4907      	ldr	r1, [pc, #28]	; (800690c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80068ee:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068f0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068f2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068fa:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068fc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006906:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	e000ed00 	.word	0xe000ed00

08006910 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006910:	4b1c      	ldr	r3, [pc, #112]	; (8006984 <HAL_NVIC_SetPriority+0x74>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006918:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800691a:	f1c3 0e07 	rsb	lr, r3, #7
 800691e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006922:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006926:	bf28      	it	cs
 8006928:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800692c:	f1bc 0f06 	cmp.w	ip, #6
 8006930:	d91b      	bls.n	800696a <HAL_NVIC_SetPriority+0x5a>
 8006932:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006934:	f04f 3cff 	mov.w	ip, #4294967295
 8006938:	fa0c fc03 	lsl.w	ip, ip, r3
 800693c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006940:	f04f 3cff 	mov.w	ip, #4294967295
 8006944:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006948:	ea21 010c 	bic.w	r1, r1, ip
 800694c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800694e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006950:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006954:	db0c      	blt.n	8006970 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006956:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800695a:	0109      	lsls	r1, r1, #4
 800695c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006960:	b2c9      	uxtb	r1, r1
 8006962:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006966:	f85d fb04 	ldr.w	pc, [sp], #4
 800696a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800696c:	4613      	mov	r3, r2
 800696e:	e7e7      	b.n	8006940 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006970:	4b05      	ldr	r3, [pc, #20]	; (8006988 <HAL_NVIC_SetPriority+0x78>)
 8006972:	f000 000f 	and.w	r0, r0, #15
 8006976:	0109      	lsls	r1, r1, #4
 8006978:	4403      	add	r3, r0
 800697a:	b2c9      	uxtb	r1, r1
 800697c:	7619      	strb	r1, [r3, #24]
 800697e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006982:	bf00      	nop
 8006984:	e000ed00 	.word	0xe000ed00
 8006988:	e000ecfc 	.word	0xe000ecfc

0800698c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800698c:	2800      	cmp	r0, #0
 800698e:	db07      	blt.n	80069a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006990:	0941      	lsrs	r1, r0, #5
 8006992:	4a04      	ldr	r2, [pc, #16]	; (80069a4 <HAL_NVIC_EnableIRQ+0x18>)
 8006994:	f000 001f 	and.w	r0, r0, #31
 8006998:	2301      	movs	r3, #1
 800699a:	4083      	lsls	r3, r0
 800699c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	e000e100 	.word	0xe000e100

080069a8 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 80069a8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80069ac:	4905      	ldr	r1, [pc, #20]	; (80069c4 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80069ae:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80069b0:	68ca      	ldr	r2, [r1, #12]
 80069b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60cb      	str	r3, [r1, #12]
 80069ba:	f3bf 8f4f 	dsb	sy
    __NOP();
 80069be:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80069c0:	e7fd      	b.n	80069be <HAL_NVIC_SystemReset+0x16>
 80069c2:	bf00      	nop
 80069c4:	e000ed00 	.word	0xe000ed00
 80069c8:	05fa0004 	.word	0x05fa0004

080069cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069cc:	3801      	subs	r0, #1
 80069ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80069d2:	d210      	bcs.n	80069f6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069d4:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069da:	4c08      	ldr	r4, [pc, #32]	; (80069fc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069dc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069de:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80069e2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069e6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069e8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069ea:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069ec:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80069ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069f2:	6119      	str	r1, [r3, #16]
 80069f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80069f6:	2001      	movs	r0, #1
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	e000ed00 	.word	0xe000ed00

08006a00 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d035      	beq.n	8006a70 <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006a04:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 8006a08:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a0a:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8006a0c:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8006a0e:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a10:	6902      	ldr	r2, [r0, #16]
 8006a12:	4323      	orrs	r3, r4
 8006a14:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a16:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 8006a1a:	4323      	orrs	r3, r4
 8006a1c:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a1e:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a20:	4c14      	ldr	r4, [pc, #80]	; (8006a74 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a22:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 8006a24:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006a26:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8006a2a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8006a2e:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a30:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 8006a32:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a34:	d912      	bls.n	8006a5c <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006a36:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <HAL_DMA_Init+0x78>)
 8006a38:	4a10      	ldr	r2, [pc, #64]	; (8006a7c <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8006a3a:	4c11      	ldr	r4, [pc, #68]	; (8006a80 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006a3c:	440b      	add	r3, r1
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	091b      	lsrs	r3, r3, #4
 8006a44:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 8006a46:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a4a:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 8006a4c:	8401      	strh	r1, [r0, #32]
 8006a4e:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a52:	6382      	str	r2, [r0, #56]	; 0x38
}  
 8006a54:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8006a58:	4610      	mov	r0, r2
}  
 8006a5a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <HAL_DMA_Init+0x84>)
 8006a5e:	4a07      	ldr	r2, [pc, #28]	; (8006a7c <HAL_DMA_Init+0x7c>)
 8006a60:	440b      	add	r3, r1
 8006a62:	fba2 2303 	umull	r2, r3, r2, r3
 8006a66:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8006a68:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006a6c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8006a6e:	e7ea      	b.n	8006a46 <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8006a70:	2001      	movs	r0, #1
}  
 8006a72:	4770      	bx	lr
 8006a74:	40020407 	.word	0x40020407
 8006a78:	bffdfbf8 	.word	0xbffdfbf8
 8006a7c:	cccccccd 	.word	0xcccccccd
 8006a80:	40020400 	.word	0x40020400
 8006a84:	bffdfff8 	.word	0xbffdfff8

08006a88 <HAL_DMA_Start_IT>:
{
 8006a88:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8006a8a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006a8e:	2c01      	cmp	r4, #1
 8006a90:	d039      	beq.n	8006b06 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a92:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006a96:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a98:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 8006a9a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a9e:	d005      	beq.n	8006aac <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8006aa6:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8006aa8:	2002      	movs	r0, #2
} 
 8006aaa:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006aac:	2502      	movs	r5, #2
 8006aae:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006ab2:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006ab4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	f025 0501 	bic.w	r5, r5, #1
 8006ac0:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006ac2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006ac4:	fa0c f505 	lsl.w	r5, ip, r5
 8006ac8:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8006aca:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006acc:	6843      	ldr	r3, [r0, #4]
 8006ace:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8006ad0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8006ad2:	bf0b      	itete	eq
 8006ad4:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8006ad6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8006ad8:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8006ada:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8006adc:	b153      	cbz	r3, 8006af4 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f043 030e 	orr.w	r3, r3, #14
 8006ae4:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8006aec:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006aee:	6023      	str	r3, [r4, #0]
} 
 8006af0:	bc70      	pop	{r4, r5, r6}
 8006af2:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	f043 030a 	orr.w	r3, r3, #10
 8006afa:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	f023 0304 	bic.w	r3, r3, #4
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	e7ef      	b.n	8006ae6 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8006b06:	2002      	movs	r0, #2
} 
 8006b08:	bc70      	pop	{r4, r5, r6}
 8006b0a:	4770      	bx	lr

08006b0c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b0c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8006b10:	2a02      	cmp	r2, #2
{
 8006b12:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b14:	d006      	beq.n	8006b24 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b16:	2204      	movs	r2, #4
 8006b18:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8006b1a:	2200      	movs	r2, #0
    return HAL_ERROR;
 8006b1c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8006b1e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8006b22:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006b24:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006b26:	6c01      	ldr	r1, [r0, #64]	; 0x40
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006b28:	6810      	ldr	r0, [r2, #0]
 8006b2a:	f020 000e 	bic.w	r0, r0, #14
 8006b2e:	6010      	str	r0, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006b30:	6810      	ldr	r0, [r2, #0]
 8006b32:	f020 0001 	bic.w	r0, r0, #1
 8006b36:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006b38:	f04f 0c01 	mov.w	ip, #1
 8006b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b3e:	fa0c f101 	lsl.w	r1, ip, r1
 8006b42:	6051      	str	r1, [r2, #4]
    __HAL_UNLOCK(hdma);
 8006b44:	2200      	movs	r2, #0
  return HAL_OK;
 8006b46:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8006b48:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8006b4c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop

08006b54 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006b54:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8006b58:	2a02      	cmp	r2, #2
 8006b5a:	d003      	beq.n	8006b64 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8006b60:	2001      	movs	r0, #1
}
 8006b62:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006b64:	6802      	ldr	r2, [r0, #0]
 8006b66:	6811      	ldr	r1, [r2, #0]
 8006b68:	f021 010e 	bic.w	r1, r1, #14
{  
 8006b6c:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006b6e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006b70:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006b72:	6811      	ldr	r1, [r2, #0]
 8006b74:	f021 0101 	bic.w	r1, r1, #1
 8006b78:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006b7a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8006b80:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006b82:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8006b84:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8006b88:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8006b8c:	b112      	cbz	r2, 8006b94 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 8006b8e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8006b90:	2000      	movs	r0, #0
}
 8006b92:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006b94:	4610      	mov	r0, r2
}
 8006b96:	bd10      	pop	{r4, pc}

08006b98 <HAL_DMA_IRQHandler>:
{
 8006b98:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006b9a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006b9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006b9e:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006ba0:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006ba2:	2304      	movs	r3, #4
 8006ba4:	4093      	lsls	r3, r2
 8006ba6:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8006ba8:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006baa:	d00e      	beq.n	8006bca <HAL_DMA_IRQHandler+0x32>
 8006bac:	f015 0f04 	tst.w	r5, #4
 8006bb0:	d00b      	beq.n	8006bca <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	0692      	lsls	r2, r2, #26
 8006bb6:	d403      	bmi.n	8006bc0 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006bb8:	6822      	ldr	r2, [r4, #0]
 8006bba:	f022 0204 	bic.w	r2, r2, #4
 8006bbe:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8006bc0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006bc2:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8006bc4:	b1ca      	cbz	r2, 8006bfa <HAL_DMA_IRQHandler+0x62>
}  
 8006bc6:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8006bc8:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006bca:	2302      	movs	r3, #2
 8006bcc:	4093      	lsls	r3, r2
 8006bce:	420b      	tst	r3, r1
 8006bd0:	d015      	beq.n	8006bfe <HAL_DMA_IRQHandler+0x66>
 8006bd2:	f015 0f02 	tst.w	r5, #2
 8006bd6:	d012      	beq.n	8006bfe <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	0692      	lsls	r2, r2, #26
 8006bdc:	d406      	bmi.n	8006bec <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006bde:	6822      	ldr	r2, [r4, #0]
 8006be0:	f022 020a 	bic.w	r2, r2, #10
 8006be4:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8006be6:	2201      	movs	r2, #1
 8006be8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8006bec:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006bee:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <HAL_DMA_IRQHandler+0x2e>
}  
 8006bfa:	bc70      	pop	{r4, r5, r6}
 8006bfc:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006bfe:	2308      	movs	r3, #8
 8006c00:	4093      	lsls	r3, r2
 8006c02:	420b      	tst	r3, r1
 8006c04:	d0f9      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x62>
 8006c06:	072b      	lsls	r3, r5, #28
 8006c08:	d5f7      	bpl.n	8006bfa <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006c0a:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8006c0c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006c0e:	f023 030e 	bic.w	r3, r3, #14
 8006c12:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006c14:	2301      	movs	r3, #1
 8006c16:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8006c1a:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006c1e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 8006c20:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c22:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 8006c24:	2900      	cmp	r1, #0
 8006c26:	d0e8      	beq.n	8006bfa <HAL_DMA_IRQHandler+0x62>
}  
 8006c28:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8006c2a:	4708      	bx	r1

08006c2c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006c30:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8006dc0 <HAL_FLASH_Program+0x194>
{
 8006c34:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8006c36:	f89a 3018 	ldrb.w	r3, [sl, #24]
 8006c3a:	2b01      	cmp	r3, #1
{
 8006c3c:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8006c3e:	f000 80ad 	beq.w	8006d9c <HAL_FLASH_Program+0x170>
 8006c42:	2301      	movs	r3, #1
 8006c44:	4606      	mov	r6, r0
 8006c46:	4688      	mov	r8, r1
 8006c48:	4693      	mov	fp, r2
 8006c4a:	f88a 3018 	strb.w	r3, [sl, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006c4e:	f7fe faed 	bl	800522c <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006c52:	4d5a      	ldr	r5, [pc, #360]	; (8006dbc <HAL_FLASH_Program+0x190>)
  uint32_t tickstart = HAL_GetTick();
 8006c54:	4604      	mov	r4, r0
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006c56:	f24c 3750 	movw	r7, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006c5a:	e005      	b.n	8006c68 <HAL_FLASH_Program+0x3c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006c5c:	f7fe fae6 	bl	800522c <HAL_GetTick>
 8006c60:	1b00      	subs	r0, r0, r4
 8006c62:	42b8      	cmp	r0, r7
 8006c64:	f200 8083 	bhi.w	8006d6e <HAL_FLASH_Program+0x142>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006c68:	68eb      	ldr	r3, [r5, #12]
 8006c6a:	07db      	lsls	r3, r3, #31
 8006c6c:	d4f6      	bmi.n	8006c5c <HAL_FLASH_Program+0x30>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006c6e:	68eb      	ldr	r3, [r5, #12]
 8006c70:	0698      	lsls	r0, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006c72:	bf44      	itt	mi
 8006c74:	2320      	movmi	r3, #32
 8006c76:	60eb      	strmi	r3, [r5, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006c78:	4b50      	ldr	r3, [pc, #320]	; (8006dbc <HAL_FLASH_Program+0x190>)
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	06d1      	lsls	r1, r2, #27
 8006c7e:	d478      	bmi.n	8006d72 <HAL_FLASH_Program+0x146>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006c80:	68df      	ldr	r7, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006c82:	f017 0704 	ands.w	r7, r7, #4
 8006c86:	d174      	bne.n	8006d72 <HAL_FLASH_Program+0x146>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006c88:	2e01      	cmp	r6, #1
 8006c8a:	f000 8094 	beq.w	8006db6 <HAL_FLASH_Program+0x18a>
      nbiterations = 4U;
 8006c8e:	2e02      	cmp	r6, #2
 8006c90:	bf0c      	ite	eq
 8006c92:	2302      	moveq	r3, #2
 8006c94:	2304      	movne	r3, #4
 8006c96:	9301      	str	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006c98:	4c48      	ldr	r4, [pc, #288]	; (8006dbc <HAL_FLASH_Program+0x190>)
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006c9a:	f24c 3650 	movw	r6, #50000	; 0xc350
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006c9e:	013b      	lsls	r3, r7, #4
 8006ca0:	f1c3 0220 	rsb	r2, r3, #32
 8006ca4:	f1a3 0120 	sub.w	r1, r3, #32
 8006ca8:	fa09 f202 	lsl.w	r2, r9, r2
 8006cac:	fa2b f303 	lsr.w	r3, fp, r3
 8006cb0:	4313      	orrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f8ca 201c 	str.w	r2, [sl, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006cb8:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006cba:	fa29 f101 	lsr.w	r1, r9, r1
 8006cbe:	430b      	orrs	r3, r1
 8006cc0:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8006cc8:	f8a8 3000 	strh.w	r3, [r8]
  uint32_t tickstart = HAL_GetTick();
 8006ccc:	f7fe faae 	bl	800522c <HAL_GetTick>
 8006cd0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006cd2:	e004      	b.n	8006cde <HAL_FLASH_Program+0xb2>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006cd4:	f7fe faaa 	bl	800522c <HAL_GetTick>
 8006cd8:	1b40      	subs	r0, r0, r5
 8006cda:	42b0      	cmp	r0, r6
 8006cdc:	d81f      	bhi.n	8006d1e <HAL_FLASH_Program+0xf2>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006cde:	68e3      	ldr	r3, [r4, #12]
 8006ce0:	07db      	lsls	r3, r3, #31
 8006ce2:	d4f7      	bmi.n	8006cd4 <HAL_FLASH_Program+0xa8>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006ce4:	68e3      	ldr	r3, [r4, #12]
 8006ce6:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006ce8:	bf44      	itt	mi
 8006cea:	2320      	movmi	r3, #32
 8006cec:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006cee:	68e3      	ldr	r3, [r4, #12]
 8006cf0:	06d9      	lsls	r1, r3, #27
 8006cf2:	d41a      	bmi.n	8006d2a <HAL_FLASH_Program+0xfe>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006cf4:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006cf6:	f010 0004 	ands.w	r0, r0, #4
 8006cfa:	d116      	bne.n	8006d2a <HAL_FLASH_Program+0xfe>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
    for (index = 0U; index < nbiterations; index++)
 8006d02:	3701      	adds	r7, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006d04:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8006d06:	9b01      	ldr	r3, [sp, #4]
 8006d08:	b2fa      	uxtb	r2, r7
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	f108 0802 	add.w	r8, r8, #2
 8006d10:	d8c5      	bhi.n	8006c9e <HAL_FLASH_Program+0x72>
  __HAL_UNLOCK(&pFlash);
 8006d12:	2300      	movs	r3, #0
 8006d14:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8006d18:	b003      	add	sp, #12
 8006d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	2003      	movs	r0, #3
 8006d26:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8006d28:	e7f3      	b.n	8006d12 <HAL_FLASH_Program+0xe6>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006d2a:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <HAL_FLASH_Program+0x190>)
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	f013 0310 	ands.w	r3, r3, #16
 8006d32:	d01a      	beq.n	8006d6a <HAL_FLASH_Program+0x13e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006d34:	f8da 301c 	ldr.w	r3, [sl, #28]
 8006d38:	f043 0302 	orr.w	r3, r3, #2
 8006d3c:	f8ca 301c 	str.w	r3, [sl, #28]
 8006d40:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8006d42:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006d44:	4a1d      	ldr	r2, [pc, #116]	; (8006dbc <HAL_FLASH_Program+0x190>)
 8006d46:	68d2      	ldr	r2, [r2, #12]
 8006d48:	0752      	lsls	r2, r2, #29
 8006d4a:	d506      	bpl.n	8006d5a <HAL_FLASH_Program+0x12e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006d4c:	f8da 201c 	ldr.w	r2, [sl, #28]
 8006d50:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8006d54:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006d56:	f8ca 201c 	str.w	r2, [sl, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006d5a:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <HAL_FLASH_Program+0x190>)
 8006d5c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006d5e:	6913      	ldr	r3, [r2, #16]
 8006d60:	f023 0301 	bic.w	r3, r3, #1
    return HAL_ERROR;
 8006d64:	2001      	movs	r0, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006d66:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8006d68:	e7d3      	b.n	8006d12 <HAL_FLASH_Program+0xe6>
 8006d6a:	2104      	movs	r1, #4
 8006d6c:	e7ea      	b.n	8006d44 <HAL_FLASH_Program+0x118>
 8006d6e:	2003      	movs	r0, #3
 8006d70:	e7cf      	b.n	8006d12 <HAL_FLASH_Program+0xe6>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006d72:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <HAL_FLASH_Program+0x190>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f013 0310 	ands.w	r3, r3, #16
 8006d7a:	d113      	bne.n	8006da4 <HAL_FLASH_Program+0x178>
 8006d7c:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006d7e:	4a0f      	ldr	r2, [pc, #60]	; (8006dbc <HAL_FLASH_Program+0x190>)
 8006d80:	68d2      	ldr	r2, [r2, #12]
 8006d82:	0752      	lsls	r2, r2, #29
 8006d84:	d506      	bpl.n	8006d94 <HAL_FLASH_Program+0x168>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006d86:	f8da 201c 	ldr.w	r2, [sl, #28]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8006d8e:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006d90:	f8ca 201c 	str.w	r2, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006d94:	4a09      	ldr	r2, [pc, #36]	; (8006dbc <HAL_FLASH_Program+0x190>)
    return HAL_ERROR;
 8006d96:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006d98:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 8006d9a:	e7ba      	b.n	8006d12 <HAL_FLASH_Program+0xe6>
  __HAL_LOCK(&pFlash);
 8006d9c:	2002      	movs	r0, #2
}
 8006d9e:	b003      	add	sp, #12
 8006da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006da4:	f8da 301c 	ldr.w	r3, [sl, #28]
 8006da8:	f043 0302 	orr.w	r3, r3, #2
 8006dac:	f8ca 301c 	str.w	r3, [sl, #28]
 8006db0:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8006db2:	2310      	movs	r3, #16
 8006db4:	e7e3      	b.n	8006d7e <HAL_FLASH_Program+0x152>
      nbiterations = 1U;
 8006db6:	9601      	str	r6, [sp, #4]
 8006db8:	e76e      	b.n	8006c98 <HAL_FLASH_Program+0x6c>
 8006dba:	bf00      	nop
 8006dbc:	40022000 	.word	0x40022000
 8006dc0:	20001d88 	.word	0x20001d88

08006dc4 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <HAL_FLASH_Unlock+0x1c>)
 8006dc6:	6918      	ldr	r0, [r3, #16]
 8006dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dcc:	d006      	beq.n	8006ddc <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006dce:	4905      	ldr	r1, [pc, #20]	; (8006de4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006dd0:	4a05      	ldr	r2, [pc, #20]	; (8006de8 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006dd2:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006dd4:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006dd6:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40022000 	.word	0x40022000
 8006de4:	45670123 	.word	0x45670123
 8006de8:	cdef89ab 	.word	0xcdef89ab

08006dec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006dec:	4a03      	ldr	r2, [pc, #12]	; (8006dfc <HAL_FLASH_Lock+0x10>)
 8006dee:	6913      	ldr	r3, [r2, #16]
 8006df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8006df4:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006df6:	6113      	str	r3, [r2, #16]
}
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40022000 	.word	0x40022000

08006e00 <FLASH_WaitForLastOperation>:
{
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006e04:	f7fe fa12 	bl	800522c <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006e08:	4e1e      	ldr	r6, [pc, #120]	; (8006e84 <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 8006e0a:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006e0c:	1c60      	adds	r0, r4, #1
 8006e0e:	d112      	bne.n	8006e36 <FLASH_WaitForLastOperation+0x36>
 8006e10:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <FLASH_WaitForLastOperation+0x84>)
 8006e12:	68d3      	ldr	r3, [r2, #12]
 8006e14:	07d9      	lsls	r1, r3, #31
 8006e16:	d4fc      	bmi.n	8006e12 <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006e18:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <FLASH_WaitForLastOperation+0x84>)
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	0690      	lsls	r0, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006e1e:	bf44      	itt	mi
 8006e20:	2220      	movmi	r2, #32
 8006e22:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006e24:	4b17      	ldr	r3, [pc, #92]	; (8006e84 <FLASH_WaitForLastOperation+0x84>)
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	06d1      	lsls	r1, r2, #27
 8006e2a:	d40f      	bmi.n	8006e4c <FLASH_WaitForLastOperation+0x4c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006e2c:	68d8      	ldr	r0, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006e2e:	f010 0004 	ands.w	r0, r0, #4
 8006e32:	d10b      	bne.n	8006e4c <FLASH_WaitForLastOperation+0x4c>
}
 8006e34:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006e36:	68f3      	ldr	r3, [r6, #12]
 8006e38:	07db      	lsls	r3, r3, #31
 8006e3a:	d5ed      	bpl.n	8006e18 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006e3c:	b124      	cbz	r4, 8006e48 <FLASH_WaitForLastOperation+0x48>
 8006e3e:	f7fe f9f5 	bl	800522c <HAL_GetTick>
 8006e42:	1b40      	subs	r0, r0, r5
 8006e44:	42a0      	cmp	r0, r4
 8006e46:	d9e1      	bls.n	8006e0c <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8006e48:	2003      	movs	r0, #3
}
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006e4c:	4b0d      	ldr	r3, [pc, #52]	; (8006e84 <FLASH_WaitForLastOperation+0x84>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f013 0310 	ands.w	r3, r3, #16
 8006e54:	d014      	beq.n	8006e80 <FLASH_WaitForLastOperation+0x80>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006e56:	490c      	ldr	r1, [pc, #48]	; (8006e88 <FLASH_WaitForLastOperation+0x88>)
 8006e58:	69ca      	ldr	r2, [r1, #28]
 8006e5a:	f042 0202 	orr.w	r2, r2, #2
 8006e5e:	2014      	movs	r0, #20
    flags |= FLASH_FLAG_WRPERR;
 8006e60:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006e62:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006e64:	4a07      	ldr	r2, [pc, #28]	; (8006e84 <FLASH_WaitForLastOperation+0x84>)
 8006e66:	68d2      	ldr	r2, [r2, #12]
 8006e68:	0752      	lsls	r2, r2, #29
 8006e6a:	d505      	bpl.n	8006e78 <FLASH_WaitForLastOperation+0x78>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006e6c:	4906      	ldr	r1, [pc, #24]	; (8006e88 <FLASH_WaitForLastOperation+0x88>)
 8006e6e:	69ca      	ldr	r2, [r1, #28]
 8006e70:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8006e74:	4603      	mov	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006e76:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006e78:	4a02      	ldr	r2, [pc, #8]	; (8006e84 <FLASH_WaitForLastOperation+0x84>)
    return HAL_ERROR;
 8006e7a:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006e7c:	60d3      	str	r3, [r2, #12]
}
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	2004      	movs	r0, #4
 8006e82:	e7ef      	b.n	8006e64 <FLASH_WaitForLastOperation+0x64>
 8006e84:	40022000 	.word	0x40022000
 8006e88:	20001d88 	.word	0x20001d88

08006e8c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006e90:	4e2d      	ldr	r6, [pc, #180]	; (8006f48 <HAL_FLASHEx_Erase+0xbc>)
 8006e92:	7e33      	ldrb	r3, [r6, #24]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d054      	beq.n	8006f42 <HAL_FLASHEx_Erase+0xb6>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006e9c:	6803      	ldr	r3, [r0, #0]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	4681      	mov	r9, r0
 8006ea2:	d031      	beq.n	8006f08 <HAL_FLASHEx_Erase+0x7c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ea8:	4688      	mov	r8, r1
 8006eaa:	f7ff ffa9 	bl	8006e00 <FLASH_WaitForLastOperation>
 8006eae:	4607      	mov	r7, r0
 8006eb0:	bb78      	cbnz	r0, 8006f12 <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006eb6:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006eba:	e9d9 5301 	ldrd	r5, r3, [r9, #4]
 8006ebe:	eb05 23c3 	add.w	r3, r5, r3, lsl #11
 8006ec2:	429d      	cmp	r5, r3
 8006ec4:	d225      	bcs.n	8006f12 <HAL_FLASHEx_Erase+0x86>
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006ec6:	4c21      	ldr	r4, [pc, #132]	; (8006f4c <HAL_FLASHEx_Erase+0xc0>)
 8006ec8:	e007      	b.n	8006eda <HAL_FLASHEx_Erase+0x4e>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006eca:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
            address += FLASH_PAGE_SIZE)
 8006ece:	f505 6500 	add.w	r5, r5, #2048	; 0x800
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006ed2:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8006ed6:	42ab      	cmp	r3, r5
 8006ed8:	d91c      	bls.n	8006f14 <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006eda:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	f043 0302 	orr.w	r3, r3, #2
 8006ee2:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006ee4:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eec:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006eee:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ef2:	f7ff ff85 	bl	8006e00 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	f023 0302 	bic.w	r3, r3, #2
 8006efc:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d0e3      	beq.n	8006eca <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8006f02:	f8c8 5000 	str.w	r5, [r8]
            break;
 8006f06:	e005      	b.n	8006f14 <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006f08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006f0c:	f7ff ff78 	bl	8006e00 <FLASH_WaitForLastOperation>
 8006f10:	b120      	cbz	r0, 8006f1c <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f12:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8006f14:	2300      	movs	r3, #0
 8006f16:	7633      	strb	r3, [r6, #24]
}
 8006f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006f1c:	4c0b      	ldr	r4, [pc, #44]	; (8006f4c <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f1e:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	f043 0304 	orr.w	r3, r3, #4
 8006f26:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f2e:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006f30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006f34:	f7ff ff64 	bl	8006e00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006f38:	6923      	ldr	r3, [r4, #16]
 8006f3a:	f023 0304 	bic.w	r3, r3, #4
 8006f3e:	6123      	str	r3, [r4, #16]
 8006f40:	e7e8      	b.n	8006f14 <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 8006f42:	2002      	movs	r0, #2
}
 8006f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f48:	20001d88 	.word	0x20001d88
 8006f4c:	40022000 	.word	0x40022000

08006f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f54:	680c      	ldr	r4, [r1, #0]
{
 8006f56:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f58:	2c00      	cmp	r4, #0
 8006f5a:	d077      	beq.n	800704c <HAL_GPIO_Init+0xfc>
 8006f5c:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f60:	4e69      	ldr	r6, [pc, #420]	; (8007108 <HAL_GPIO_Init+0x1b8>)
  uint32_t position = 0x00u;
 8006f62:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006f64:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006f68:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006f6a:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8006f6e:	ea17 0a04 	ands.w	sl, r7, r4
 8006f72:	d065      	beq.n	8007040 <HAL_GPIO_Init+0xf0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f74:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006f78:	f001 0203 	and.w	r2, r1, #3
 8006f7c:	1e55      	subs	r5, r2, #1
 8006f7e:	2d01      	cmp	r5, #1
 8006f80:	d967      	bls.n	8007052 <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f82:	2a03      	cmp	r2, #3
 8006f84:	f040 80ab 	bne.w	80070de <HAL_GPIO_Init+0x18e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006f88:	fa02 f20c 	lsl.w	r2, r2, ip
 8006f8c:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8006f8e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006f90:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006f92:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f94:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006f98:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f9a:	d051      	beq.n	8007040 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f9c:	4d5b      	ldr	r5, [pc, #364]	; (800710c <HAL_GPIO_Init+0x1bc>)
 8006f9e:	69aa      	ldr	r2, [r5, #24]
 8006fa0:	f042 0201 	orr.w	r2, r2, #1
 8006fa4:	61aa      	str	r2, [r5, #24]
 8006fa6:	69aa      	ldr	r2, [r5, #24]
 8006fa8:	f002 0201 	and.w	r2, r2, #1
 8006fac:	9203      	str	r2, [sp, #12]
 8006fae:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8006fb0:	f023 0203 	bic.w	r2, r3, #3
 8006fb4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006fb8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006fbc:	f003 0503 	and.w	r5, r3, #3
 8006fc0:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 8006fc4:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006fc6:	250f      	movs	r5, #15
 8006fc8:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006fcc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006fd0:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006fd4:	d015      	beq.n	8007002 <HAL_GPIO_Init+0xb2>
 8006fd6:	4d4e      	ldr	r5, [pc, #312]	; (8007110 <HAL_GPIO_Init+0x1c0>)
 8006fd8:	42a8      	cmp	r0, r5
 8006fda:	f000 808b 	beq.w	80070f4 <HAL_GPIO_Init+0x1a4>
 8006fde:	4d4d      	ldr	r5, [pc, #308]	; (8007114 <HAL_GPIO_Init+0x1c4>)
 8006fe0:	42a8      	cmp	r0, r5
 8006fe2:	f000 808b 	beq.w	80070fc <HAL_GPIO_Init+0x1ac>
 8006fe6:	4d4c      	ldr	r5, [pc, #304]	; (8007118 <HAL_GPIO_Init+0x1c8>)
 8006fe8:	42a8      	cmp	r0, r5
 8006fea:	d07d      	beq.n	80070e8 <HAL_GPIO_Init+0x198>
 8006fec:	4d4b      	ldr	r5, [pc, #300]	; (800711c <HAL_GPIO_Init+0x1cc>)
 8006fee:	42a8      	cmp	r0, r5
 8006ff0:	bf13      	iteet	ne
 8006ff2:	2505      	movne	r5, #5
 8006ff4:	f04f 0804 	moveq.w	r8, #4
 8006ff8:	fa08 f509 	lsleq.w	r5, r8, r9
 8006ffc:	fa05 f509 	lslne.w	r5, r5, r9
 8007000:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007002:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR;
 8007004:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8007006:	ea6f 050a 	mvn.w	r5, sl
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800700a:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 800700c:	bf54      	ite	pl
 800700e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8007010:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8007014:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8007016:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007018:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 800701a:	bf54      	ite	pl
 800701c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800701e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR = temp;
 8007022:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8007024:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007026:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8007028:	bf54      	ite	pl
 800702a:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800702c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 8007030:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007032:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007034:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8007036:	bf54      	ite	pl
 8007038:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800703a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 800703e:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8007040:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007042:	fa34 f203 	lsrs.w	r2, r4, r3
 8007046:	f10c 0c02 	add.w	ip, ip, #2
 800704a:	d18e      	bne.n	8006f6a <HAL_GPIO_Init+0x1a>
  }
}
 800704c:	b005      	add	sp, #20
 800704e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007052:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007056:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800705a:	f04f 0803 	mov.w	r8, #3
 800705e:	fa08 f80c 	lsl.w	r8, r8, ip
 8007062:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007066:	fa05 f50c 	lsl.w	r5, r5, ip
 800706a:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 800706e:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007070:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8007074:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007078:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800707c:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8007080:	409f      	lsls	r7, r3
 8007082:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8007086:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8007088:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800708a:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800708e:	f8de 7008 	ldr.w	r7, [lr, #8]
 8007092:	fa07 f70c 	lsl.w	r7, r7, ip
 8007096:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800709a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800709c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800709e:	fa02 f20c 	lsl.w	r2, r2, ip
 80070a2:	f47f af74 	bne.w	8006f8e <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 80070a6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80070aa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070ae:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80070b2:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80070b6:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070b8:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070bc:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070c0:	fa07 f708 	lsl.w	r7, r7, r8
 80070c4:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070c6:	270f      	movs	r7, #15
 80070c8:	fa07 f808 	lsl.w	r8, r7, r8
 80070cc:	9f00      	ldr	r7, [sp, #0]
 80070ce:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070d2:	9f01      	ldr	r7, [sp, #4]
 80070d4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 80070d8:	f8c9 7020 	str.w	r7, [r9, #32]
 80070dc:	e757      	b.n	8006f8e <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80070de:	2503      	movs	r5, #3
 80070e0:	fa05 f50c 	lsl.w	r5, r5, ip
 80070e4:	43ed      	mvns	r5, r5
 80070e6:	e7cf      	b.n	8007088 <HAL_GPIO_Init+0x138>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80070e8:	f04f 0803 	mov.w	r8, #3
 80070ec:	fa08 f509 	lsl.w	r5, r8, r9
 80070f0:	432f      	orrs	r7, r5
 80070f2:	e786      	b.n	8007002 <HAL_GPIO_Init+0xb2>
 80070f4:	fa0b f509 	lsl.w	r5, fp, r9
 80070f8:	432f      	orrs	r7, r5
 80070fa:	e782      	b.n	8007002 <HAL_GPIO_Init+0xb2>
 80070fc:	f04f 0802 	mov.w	r8, #2
 8007100:	fa08 f509 	lsl.w	r5, r8, r9
 8007104:	432f      	orrs	r7, r5
 8007106:	e77c      	b.n	8007002 <HAL_GPIO_Init+0xb2>
 8007108:	40010400 	.word	0x40010400
 800710c:	40021000 	.word	0x40021000
 8007110:	48000400 	.word	0x48000400
 8007114:	48000800 	.word	0x48000800
 8007118:	48000c00 	.word	0x48000c00
 800711c:	48001000 	.word	0x48001000

08007120 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007120:	6903      	ldr	r3, [r0, #16]
 8007122:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007124:	bf14      	ite	ne
 8007126:	2001      	movne	r0, #1
 8007128:	2000      	moveq	r0, #0
 800712a:	4770      	bx	lr

0800712c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800712c:	b10a      	cbz	r2, 8007132 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800712e:	6181      	str	r1, [r0, #24]
 8007130:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007132:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop

08007138 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007138:	2800      	cmp	r0, #0
 800713a:	f000 8270 	beq.w	800761e <HAL_RCC_OscConfig+0x4e6>
{
 800713e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007142:	6803      	ldr	r3, [r0, #0]
 8007144:	07d9      	lsls	r1, r3, #31
{
 8007146:	b083      	sub	sp, #12
 8007148:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800714a:	d54d      	bpl.n	80071e8 <HAL_RCC_OscConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800714c:	49ae      	ldr	r1, [pc, #696]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
 800714e:	684a      	ldr	r2, [r1, #4]
 8007150:	f002 020c 	and.w	r2, r2, #12
 8007154:	2a04      	cmp	r2, #4
 8007156:	f000 8161 	beq.w	800741c <HAL_RCC_OscConfig+0x2e4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800715a:	684a      	ldr	r2, [r1, #4]
 800715c:	f002 020c 	and.w	r2, r2, #12
 8007160:	2a08      	cmp	r2, #8
 8007162:	f000 8157 	beq.w	8007414 <HAL_RCC_OscConfig+0x2dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007166:	6863      	ldr	r3, [r4, #4]
 8007168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800716c:	d017      	beq.n	800719e <HAL_RCC_OscConfig+0x66>
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 818e 	beq.w	8007490 <HAL_RCC_OscConfig+0x358>
 8007174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007178:	f000 823c 	beq.w	80075f4 <HAL_RCC_OscConfig+0x4bc>
 800717c:	4ba2      	ldr	r3, [pc, #648]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800718c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800718e:	4a9e      	ldr	r2, [pc, #632]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
 8007190:	68a1      	ldr	r1, [r4, #8]
 8007192:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007194:	f023 030f 	bic.w	r3, r3, #15
 8007198:	430b      	orrs	r3, r1
 800719a:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800719c:	e00a      	b.n	80071b4 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800719e:	4a9a      	ldr	r2, [pc, #616]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
 80071a0:	6813      	ldr	r3, [r2, #0]
 80071a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a6:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80071a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80071aa:	68a1      	ldr	r1, [r4, #8]
 80071ac:	f023 030f 	bic.w	r3, r3, #15
 80071b0:	430b      	orrs	r3, r1
 80071b2:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071b4:	f7fe f83a 	bl	800522c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071b8:	4f93      	ldr	r7, [pc, #588]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 80071ba:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071bc:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071c0:	2601      	movs	r6, #1
 80071c2:	e005      	b.n	80071d0 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071c4:	f7fe f832 	bl	800522c <HAL_GetTick>
 80071c8:	1b40      	subs	r0, r0, r5
 80071ca:	2864      	cmp	r0, #100	; 0x64
 80071cc:	f200 815c 	bhi.w	8007488 <HAL_RCC_OscConfig+0x350>
 80071d0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	fa98 f3a8 	rbit	r3, r8
 80071da:	fab3 f383 	clz	r3, r3
 80071de:	fa06 f303 	lsl.w	r3, r6, r3
 80071e2:	4213      	tst	r3, r2
 80071e4:	d0ee      	beq.n	80071c4 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	079f      	lsls	r7, r3, #30
 80071ea:	d53f      	bpl.n	800726c <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80071ec:	4a86      	ldr	r2, [pc, #536]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
 80071ee:	6851      	ldr	r1, [r2, #4]
 80071f0:	f011 0f0c 	tst.w	r1, #12
 80071f4:	f000 80c2 	beq.w	800737c <HAL_RCC_OscConfig+0x244>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80071f8:	6851      	ldr	r1, [r2, #4]
 80071fa:	f001 010c 	and.w	r1, r1, #12
 80071fe:	2908      	cmp	r1, #8
 8007200:	f000 80b8 	beq.w	8007374 <HAL_RCC_OscConfig+0x23c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007204:	6922      	ldr	r2, [r4, #16]
 8007206:	2a00      	cmp	r2, #0
 8007208:	f000 8197 	beq.w	800753a <HAL_RCC_OscConfig+0x402>
 800720c:	2501      	movs	r5, #1
 800720e:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007212:	fab3 f383 	clz	r3, r3
 8007216:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800721a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800721e:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007220:	4f79      	ldr	r7, [pc, #484]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
        __HAL_RCC_HSI_ENABLE();
 8007222:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8007224:	f7fe f802 	bl	800522c <HAL_GetTick>
 8007228:	f04f 0802 	mov.w	r8, #2
 800722c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800722e:	e005      	b.n	800723c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007230:	f7fd fffc 	bl	800522c <HAL_GetTick>
 8007234:	1b80      	subs	r0, r0, r6
 8007236:	2802      	cmp	r0, #2
 8007238:	f200 8126 	bhi.w	8007488 <HAL_RCC_OscConfig+0x350>
 800723c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	fa98 f3a8 	rbit	r3, r8
 8007246:	fab3 f383 	clz	r3, r3
 800724a:	fa05 f303 	lsl.w	r3, r5, r3
 800724e:	4213      	tst	r3, r2
 8007250:	d0ee      	beq.n	8007230 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	22f8      	movs	r2, #248	; 0xf8
 8007256:	fa92 f2a2 	rbit	r2, r2
 800725a:	6963      	ldr	r3, [r4, #20]
 800725c:	fab2 f282 	clz	r2, r2
 8007260:	4093      	lsls	r3, r2
 8007262:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8007266:	4313      	orrs	r3, r2
 8007268:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	071d      	lsls	r5, r3, #28
 800726e:	d420      	bmi.n	80072b2 <HAL_RCC_OscConfig+0x17a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007270:	0758      	lsls	r0, r3, #29
 8007272:	d54a      	bpl.n	800730a <HAL_RCC_OscConfig+0x1d2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007274:	4b64      	ldr	r3, [pc, #400]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
 8007276:	69da      	ldr	r2, [r3, #28]
 8007278:	00d1      	lsls	r1, r2, #3
 800727a:	f140 80ba 	bpl.w	80073f2 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 800727e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007280:	4e62      	ldr	r6, [pc, #392]	; (800740c <HAL_RCC_OscConfig+0x2d4>)
 8007282:	6833      	ldr	r3, [r6, #0]
 8007284:	05da      	lsls	r2, r3, #23
 8007286:	f140 80ef 	bpl.w	8007468 <HAL_RCC_OscConfig+0x330>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800728a:	68e3      	ldr	r3, [r4, #12]
 800728c:	2b01      	cmp	r3, #1
 800728e:	f000 8178 	beq.w	8007582 <HAL_RCC_OscConfig+0x44a>
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 8123 	beq.w	80074de <HAL_RCC_OscConfig+0x3a6>
 8007298:	2b05      	cmp	r3, #5
 800729a:	4b5b      	ldr	r3, [pc, #364]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
 800729c:	6a1a      	ldr	r2, [r3, #32]
 800729e:	f000 81b6 	beq.w	800760e <HAL_RCC_OscConfig+0x4d6>
 80072a2:	f022 0201 	bic.w	r2, r2, #1
 80072a6:	621a      	str	r2, [r3, #32]
 80072a8:	6a1a      	ldr	r2, [r3, #32]
 80072aa:	f022 0204 	bic.w	r2, r2, #4
 80072ae:	621a      	str	r2, [r3, #32]
 80072b0:	e16c      	b.n	800758c <HAL_RCC_OscConfig+0x454>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80072b2:	69a2      	ldr	r2, [r4, #24]
 80072b4:	2a00      	cmp	r2, #0
 80072b6:	d076      	beq.n	80073a6 <HAL_RCC_OscConfig+0x26e>
 80072b8:	2601      	movs	r6, #1
 80072ba:	fa96 f2a6 	rbit	r2, r6
      __HAL_RCC_LSI_ENABLE();
 80072be:	4b54      	ldr	r3, [pc, #336]	; (8007410 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072c0:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8007408 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_ENABLE();
 80072c4:	fab2 f282 	clz	r2, r2
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	2502      	movs	r5, #2
 80072ce:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 80072d0:	f7fd ffac 	bl	800522c <HAL_GetTick>
 80072d4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072d6:	e005      	b.n	80072e4 <HAL_RCC_OscConfig+0x1ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072d8:	f7fd ffa8 	bl	800522c <HAL_GetTick>
 80072dc:	1bc0      	subs	r0, r0, r7
 80072de:	2802      	cmp	r0, #2
 80072e0:	f200 80d2 	bhi.w	8007488 <HAL_RCC_OscConfig+0x350>
 80072e4:	fa95 f3a5 	rbit	r3, r5
 80072e8:	fa95 f3a5 	rbit	r3, r5
 80072ec:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072f0:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80072f4:	fa95 f3a5 	rbit	r3, r5
 80072f8:	fab3 f383 	clz	r3, r3
 80072fc:	fa06 f303 	lsl.w	r3, r6, r3
 8007300:	4213      	tst	r3, r2
 8007302:	d0e9      	beq.n	80072d8 <HAL_RCC_OscConfig+0x1a0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	0758      	lsls	r0, r3, #29
 8007308:	d4b4      	bmi.n	8007274 <HAL_RCC_OscConfig+0x13c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800730a:	69e0      	ldr	r0, [r4, #28]
 800730c:	b370      	cbz	r0, 800736c <HAL_RCC_OscConfig+0x234>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800730e:	4d3e      	ldr	r5, [pc, #248]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
 8007310:	686b      	ldr	r3, [r5, #4]
 8007312:	f003 030c 	and.w	r3, r3, #12
 8007316:	2b08      	cmp	r3, #8
 8007318:	f000 815b 	beq.w	80075d2 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800731c:	2802      	cmp	r0, #2
 800731e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007322:	f000 817e 	beq.w	8007622 <HAL_RCC_OscConfig+0x4ea>
 8007326:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800732a:	fab3 f383 	clz	r3, r3
 800732e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007332:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800733c:	f7fd ff76 	bl	800522c <HAL_GetTick>
 8007340:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8007344:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007346:	2601      	movs	r6, #1
 8007348:	e005      	b.n	8007356 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800734a:	f7fd ff6f 	bl	800522c <HAL_GetTick>
 800734e:	1b00      	subs	r0, r0, r4
 8007350:	2802      	cmp	r0, #2
 8007352:	f200 8099 	bhi.w	8007488 <HAL_RCC_OscConfig+0x350>
 8007356:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800735a:	682a      	ldr	r2, [r5, #0]
 800735c:	fa97 f3a7 	rbit	r3, r7
 8007360:	fab3 f383 	clz	r3, r3
 8007364:	fa06 f303 	lsl.w	r3, r6, r3
 8007368:	4213      	tst	r3, r2
 800736a:	d1ee      	bne.n	800734a <HAL_RCC_OscConfig+0x212>
        }
      }
    }
  }

  return HAL_OK;
 800736c:	2000      	movs	r0, #0
}
 800736e:	b003      	add	sp, #12
 8007370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007374:	6852      	ldr	r2, [r2, #4]
 8007376:	03d6      	lsls	r6, r2, #15
 8007378:	f53f af44 	bmi.w	8007204 <HAL_RCC_OscConfig+0xcc>
 800737c:	2202      	movs	r2, #2
 800737e:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007382:	4921      	ldr	r1, [pc, #132]	; (8007408 <HAL_RCC_OscConfig+0x2d0>)
 8007384:	6808      	ldr	r0, [r1, #0]
 8007386:	fa92 f2a2 	rbit	r2, r2
 800738a:	2101      	movs	r1, #1
 800738c:	fab2 f282 	clz	r2, r2
 8007390:	fa01 f202 	lsl.w	r2, r1, r2
 8007394:	4202      	tst	r2, r0
 8007396:	d056      	beq.n	8007446 <HAL_RCC_OscConfig+0x30e>
 8007398:	6922      	ldr	r2, [r4, #16]
 800739a:	428a      	cmp	r2, r1
 800739c:	d053      	beq.n	8007446 <HAL_RCC_OscConfig+0x30e>
        return HAL_ERROR;
 800739e:	2001      	movs	r0, #1
}
 80073a0:	b003      	add	sp, #12
 80073a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073a6:	2701      	movs	r7, #1
 80073a8:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 80073ac:	4b18      	ldr	r3, [pc, #96]	; (8007410 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073ae:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8007408 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_DISABLE();
 80073b2:	fab1 f181 	clz	r1, r1
 80073b6:	440b      	add	r3, r1
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	2502      	movs	r5, #2
 80073bc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80073be:	f7fd ff35 	bl	800522c <HAL_GetTick>
 80073c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073c4:	e004      	b.n	80073d0 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073c6:	f7fd ff31 	bl	800522c <HAL_GetTick>
 80073ca:	1b80      	subs	r0, r0, r6
 80073cc:	2802      	cmp	r0, #2
 80073ce:	d85b      	bhi.n	8007488 <HAL_RCC_OscConfig+0x350>
 80073d0:	fa95 f3a5 	rbit	r3, r5
 80073d4:	fa95 f3a5 	rbit	r3, r5
 80073d8:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073dc:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80073e0:	fa95 f3a5 	rbit	r3, r5
 80073e4:	fab3 f383 	clz	r3, r3
 80073e8:	fa07 f303 	lsl.w	r3, r7, r3
 80073ec:	4213      	tst	r3, r2
 80073ee:	d1ea      	bne.n	80073c6 <HAL_RCC_OscConfig+0x28e>
 80073f0:	e788      	b.n	8007304 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80073f2:	69da      	ldr	r2, [r3, #28]
 80073f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80073f8:	61da      	str	r2, [r3, #28]
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007404:	2501      	movs	r5, #1
 8007406:	e73b      	b.n	8007280 <HAL_RCC_OscConfig+0x148>
 8007408:	40021000 	.word	0x40021000
 800740c:	40007000 	.word	0x40007000
 8007410:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007414:	684a      	ldr	r2, [r1, #4]
 8007416:	03d2      	lsls	r2, r2, #15
 8007418:	f57f aea5 	bpl.w	8007166 <HAL_RCC_OscConfig+0x2e>
 800741c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007420:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007424:	49a7      	ldr	r1, [pc, #668]	; (80076c4 <HAL_RCC_OscConfig+0x58c>)
 8007426:	6808      	ldr	r0, [r1, #0]
 8007428:	fa92 f2a2 	rbit	r2, r2
 800742c:	2101      	movs	r1, #1
 800742e:	fab2 f282 	clz	r2, r2
 8007432:	fa01 f202 	lsl.w	r2, r1, r2
 8007436:	4202      	tst	r2, r0
 8007438:	f43f aed6 	beq.w	80071e8 <HAL_RCC_OscConfig+0xb0>
 800743c:	6862      	ldr	r2, [r4, #4]
 800743e:	2a00      	cmp	r2, #0
 8007440:	f47f aed2 	bne.w	80071e8 <HAL_RCC_OscConfig+0xb0>
 8007444:	e7ab      	b.n	800739e <HAL_RCC_OscConfig+0x266>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007446:	4d9f      	ldr	r5, [pc, #636]	; (80076c4 <HAL_RCC_OscConfig+0x58c>)
 8007448:	21f8      	movs	r1, #248	; 0xf8
 800744a:	6828      	ldr	r0, [r5, #0]
 800744c:	fa91 f1a1 	rbit	r1, r1
 8007450:	6962      	ldr	r2, [r4, #20]
 8007452:	fab1 f181 	clz	r1, r1
 8007456:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 800745a:	408a      	lsls	r2, r1
 800745c:	4302      	orrs	r2, r0
 800745e:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007460:	071d      	lsls	r5, r3, #28
 8007462:	f57f af05 	bpl.w	8007270 <HAL_RCC_OscConfig+0x138>
 8007466:	e724      	b.n	80072b2 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007468:	6833      	ldr	r3, [r6, #0]
 800746a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007470:	f7fd fedc 	bl	800522c <HAL_GetTick>
 8007474:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007476:	6833      	ldr	r3, [r6, #0]
 8007478:	05db      	lsls	r3, r3, #23
 800747a:	f53f af06 	bmi.w	800728a <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800747e:	f7fd fed5 	bl	800522c <HAL_GetTick>
 8007482:	1bc0      	subs	r0, r0, r7
 8007484:	2864      	cmp	r0, #100	; 0x64
 8007486:	d9f6      	bls.n	8007476 <HAL_RCC_OscConfig+0x33e>
            return HAL_TIMEOUT;
 8007488:	2003      	movs	r0, #3
}
 800748a:	b003      	add	sp, #12
 800748c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007490:	4d8c      	ldr	r5, [pc, #560]	; (80076c4 <HAL_RCC_OscConfig+0x58c>)
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007498:	602b      	str	r3, [r5, #0]
 800749a:	682b      	ldr	r3, [r5, #0]
 800749c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80074a0:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074a2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80074a4:	68a2      	ldr	r2, [r4, #8]
 80074a6:	f023 030f 	bic.w	r3, r3, #15
 80074aa:	4313      	orrs	r3, r2
 80074ac:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 80074ae:	f7fd febd 	bl	800522c <HAL_GetTick>
 80074b2:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80074b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074b8:	2701      	movs	r7, #1
 80074ba:	e004      	b.n	80074c6 <HAL_RCC_OscConfig+0x38e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074bc:	f7fd feb6 	bl	800522c <HAL_GetTick>
 80074c0:	1b80      	subs	r0, r0, r6
 80074c2:	2864      	cmp	r0, #100	; 0x64
 80074c4:	d8e0      	bhi.n	8007488 <HAL_RCC_OscConfig+0x350>
 80074c6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ca:	682a      	ldr	r2, [r5, #0]
 80074cc:	fa98 f3a8 	rbit	r3, r8
 80074d0:	fab3 f383 	clz	r3, r3
 80074d4:	fa07 f303 	lsl.w	r3, r7, r3
 80074d8:	4213      	tst	r3, r2
 80074da:	d1ef      	bne.n	80074bc <HAL_RCC_OscConfig+0x384>
 80074dc:	e683      	b.n	80071e6 <HAL_RCC_OscConfig+0xae>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074de:	4e79      	ldr	r6, [pc, #484]	; (80076c4 <HAL_RCC_OscConfig+0x58c>)
 80074e0:	6a33      	ldr	r3, [r6, #32]
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	6233      	str	r3, [r6, #32]
 80074e8:	6a33      	ldr	r3, [r6, #32]
 80074ea:	f023 0304 	bic.w	r3, r3, #4
 80074ee:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80074f0:	f7fd fe9c 	bl	800522c <HAL_GetTick>
 80074f4:	f04f 0902 	mov.w	r9, #2
 80074f8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074fa:	f04f 0801 	mov.w	r8, #1
 80074fe:	e006      	b.n	800750e <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007500:	f7fd fe94 	bl	800522c <HAL_GetTick>
 8007504:	f241 3388 	movw	r3, #5000	; 0x1388
 8007508:	1bc0      	subs	r0, r0, r7
 800750a:	4298      	cmp	r0, r3
 800750c:	d8bc      	bhi.n	8007488 <HAL_RCC_OscConfig+0x350>
 800750e:	fa99 f3a9 	rbit	r3, r9
 8007512:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007516:	6a32      	ldr	r2, [r6, #32]
 8007518:	fa99 f3a9 	rbit	r3, r9
 800751c:	fab3 f383 	clz	r3, r3
 8007520:	fa08 f303 	lsl.w	r3, r8, r3
 8007524:	4213      	tst	r3, r2
 8007526:	d1eb      	bne.n	8007500 <HAL_RCC_OscConfig+0x3c8>
    if(pwrclkchanged == SET)
 8007528:	2d00      	cmp	r5, #0
 800752a:	f43f aeee 	beq.w	800730a <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 800752e:	4a65      	ldr	r2, [pc, #404]	; (80076c4 <HAL_RCC_OscConfig+0x58c>)
 8007530:	69d3      	ldr	r3, [r2, #28]
 8007532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007536:	61d3      	str	r3, [r2, #28]
 8007538:	e6e7      	b.n	800730a <HAL_RCC_OscConfig+0x1d2>
 800753a:	2601      	movs	r6, #1
 800753c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8007540:	fab3 f383 	clz	r3, r3
 8007544:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007548:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800754c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800754e:	4f5d      	ldr	r7, [pc, #372]	; (80076c4 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_HSI_DISABLE();
 8007550:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007552:	f7fd fe6b 	bl	800522c <HAL_GetTick>
 8007556:	f04f 0802 	mov.w	r8, #2
 800755a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800755c:	e004      	b.n	8007568 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800755e:	f7fd fe65 	bl	800522c <HAL_GetTick>
 8007562:	1b40      	subs	r0, r0, r5
 8007564:	2802      	cmp	r0, #2
 8007566:	d88f      	bhi.n	8007488 <HAL_RCC_OscConfig+0x350>
 8007568:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	fa98 f3a8 	rbit	r3, r8
 8007572:	fab3 f383 	clz	r3, r3
 8007576:	fa06 f303 	lsl.w	r3, r6, r3
 800757a:	4213      	tst	r3, r2
 800757c:	d1ef      	bne.n	800755e <HAL_RCC_OscConfig+0x426>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	e674      	b.n	800726c <HAL_RCC_OscConfig+0x134>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007582:	4a50      	ldr	r2, [pc, #320]	; (80076c4 <HAL_RCC_OscConfig+0x58c>)
 8007584:	6a13      	ldr	r3, [r2, #32]
 8007586:	f043 0301 	orr.w	r3, r3, #1
 800758a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800758c:	f7fd fe4e 	bl	800522c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007590:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80076c4 <HAL_RCC_OscConfig+0x58c>
      tickstart = HAL_GetTick();
 8007594:	4606      	mov	r6, r0
 8007596:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759a:	2701      	movs	r7, #1
 800759c:	e007      	b.n	80075ae <HAL_RCC_OscConfig+0x476>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800759e:	f7fd fe45 	bl	800522c <HAL_GetTick>
 80075a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80075a6:	1b80      	subs	r0, r0, r6
 80075a8:	4298      	cmp	r0, r3
 80075aa:	f63f af6d 	bhi.w	8007488 <HAL_RCC_OscConfig+0x350>
 80075ae:	fa99 f3a9 	rbit	r3, r9
 80075b2:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b6:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80075ba:	fa99 f3a9 	rbit	r3, r9
 80075be:	fab3 f383 	clz	r3, r3
 80075c2:	fa07 f303 	lsl.w	r3, r7, r3
 80075c6:	4213      	tst	r3, r2
 80075c8:	d0e9      	beq.n	800759e <HAL_RCC_OscConfig+0x466>
    if(pwrclkchanged == SET)
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	f43f ae9d 	beq.w	800730a <HAL_RCC_OscConfig+0x1d2>
 80075d0:	e7ad      	b.n	800752e <HAL_RCC_OscConfig+0x3f6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075d2:	2801      	cmp	r0, #1
 80075d4:	f43f aecb 	beq.w	800736e <HAL_RCC_OscConfig+0x236>
        pll_config = RCC->CFGR;
 80075d8:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80075da:	6a22      	ldr	r2, [r4, #32]
 80075dc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80075e0:	4291      	cmp	r1, r2
 80075e2:	f47f aedc 	bne.w	800739e <HAL_RCC_OscConfig+0x266>
 80075e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80075e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 80075ec:	1a18      	subs	r0, r3, r0
 80075ee:	bf18      	it	ne
 80075f0:	2001      	movne	r0, #1
 80075f2:	e6bc      	b.n	800736e <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80075f8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	e5bf      	b.n	800718e <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800760e:	f042 0204 	orr.w	r2, r2, #4
 8007612:	621a      	str	r2, [r3, #32]
 8007614:	6a1a      	ldr	r2, [r3, #32]
 8007616:	f042 0201 	orr.w	r2, r2, #1
 800761a:	621a      	str	r2, [r3, #32]
 800761c:	e7b6      	b.n	800758c <HAL_RCC_OscConfig+0x454>
    return HAL_ERROR;
 800761e:	2001      	movs	r0, #1
}
 8007620:	4770      	bx	lr
 8007622:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8007626:	fab3 f383 	clz	r3, r3
 800762a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800762e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007638:	f7fd fdf8 	bl	800522c <HAL_GetTick>
 800763c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8007640:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007642:	2701      	movs	r7, #1
 8007644:	e005      	b.n	8007652 <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007646:	f7fd fdf1 	bl	800522c <HAL_GetTick>
 800764a:	1b80      	subs	r0, r0, r6
 800764c:	2802      	cmp	r0, #2
 800764e:	f63f af1b 	bhi.w	8007488 <HAL_RCC_OscConfig+0x350>
 8007652:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007656:	682a      	ldr	r2, [r5, #0]
 8007658:	fa98 f3a8 	rbit	r3, r8
 800765c:	fab3 f383 	clz	r3, r3
 8007660:	fa07 f303 	lsl.w	r3, r7, r3
 8007664:	4213      	tst	r3, r2
 8007666:	d1ee      	bne.n	8007646 <HAL_RCC_OscConfig+0x50e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007668:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 800766c:	686a      	ldr	r2, [r5, #4]
 800766e:	430b      	orrs	r3, r1
 8007670:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8007674:	4313      	orrs	r3, r2
 8007676:	606b      	str	r3, [r5, #4]
 8007678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800767c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8007680:	fab3 f383 	clz	r3, r3
 8007684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800768c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800768e:	4d0d      	ldr	r5, [pc, #52]	; (80076c4 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_PLL_ENABLE();
 8007690:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8007692:	f7fd fdcb 	bl	800522c <HAL_GetTick>
 8007696:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800769a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800769c:	2601      	movs	r6, #1
 800769e:	e005      	b.n	80076ac <HAL_RCC_OscConfig+0x574>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076a0:	f7fd fdc4 	bl	800522c <HAL_GetTick>
 80076a4:	1b00      	subs	r0, r0, r4
 80076a6:	2802      	cmp	r0, #2
 80076a8:	f63f aeee 	bhi.w	8007488 <HAL_RCC_OscConfig+0x350>
 80076ac:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80076b0:	682a      	ldr	r2, [r5, #0]
 80076b2:	fa97 f3a7 	rbit	r3, r7
 80076b6:	fab3 f383 	clz	r3, r3
 80076ba:	fa06 f303 	lsl.w	r3, r6, r3
 80076be:	4213      	tst	r3, r2
 80076c0:	d0ee      	beq.n	80076a0 <HAL_RCC_OscConfig+0x568>
 80076c2:	e653      	b.n	800736c <HAL_RCC_OscConfig+0x234>
 80076c4:	40021000 	.word	0x40021000

080076c8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076c8:	2800      	cmp	r0, #0
 80076ca:	f000 80b2 	beq.w	8007832 <HAL_RCC_ClockConfig+0x16a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076ce:	4a65      	ldr	r2, [pc, #404]	; (8007864 <HAL_RCC_ClockConfig+0x19c>)
 80076d0:	6813      	ldr	r3, [r2, #0]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	428b      	cmp	r3, r1
{
 80076d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076dc:	460d      	mov	r5, r1
 80076de:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076e0:	d20c      	bcs.n	80076fc <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076e2:	6813      	ldr	r3, [r2, #0]
 80076e4:	f023 0307 	bic.w	r3, r3, #7
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ec:	6813      	ldr	r3, [r2, #0]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	428b      	cmp	r3, r1
 80076f4:	d002      	beq.n	80076fc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80076f6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 80076f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	079f      	lsls	r7, r3, #30
 8007700:	d506      	bpl.n	8007710 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007702:	4959      	ldr	r1, [pc, #356]	; (8007868 <HAL_RCC_ClockConfig+0x1a0>)
 8007704:	68a0      	ldr	r0, [r4, #8]
 8007706:	684a      	ldr	r2, [r1, #4]
 8007708:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800770c:	4302      	orrs	r2, r0
 800770e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007710:	07de      	lsls	r6, r3, #31
 8007712:	d52d      	bpl.n	8007770 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007714:	6862      	ldr	r2, [r4, #4]
 8007716:	2a01      	cmp	r2, #1
 8007718:	f000 808d 	beq.w	8007836 <HAL_RCC_ClockConfig+0x16e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800771c:	2a02      	cmp	r2, #2
 800771e:	bf0c      	ite	eq
 8007720:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8007724:	2302      	movne	r3, #2
 8007726:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800772a:	494f      	ldr	r1, [pc, #316]	; (8007868 <HAL_RCC_ClockConfig+0x1a0>)
 800772c:	6808      	ldr	r0, [r1, #0]
 800772e:	fa93 f3a3 	rbit	r3, r3
 8007732:	2101      	movs	r1, #1
 8007734:	fab3 f383 	clz	r3, r3
 8007738:	fa01 f303 	lsl.w	r3, r1, r3
 800773c:	4203      	tst	r3, r0
 800773e:	d0da      	beq.n	80076f6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007740:	4e49      	ldr	r6, [pc, #292]	; (8007868 <HAL_RCC_ClockConfig+0x1a0>)
 8007742:	6873      	ldr	r3, [r6, #4]
 8007744:	f023 0303 	bic.w	r3, r3, #3
 8007748:	4313      	orrs	r3, r2
 800774a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800774c:	f7fd fd6e 	bl	800522c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007750:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007754:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007756:	e004      	b.n	8007762 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007758:	f7fd fd68 	bl	800522c <HAL_GetTick>
 800775c:	1bc0      	subs	r0, r0, r7
 800775e:	4540      	cmp	r0, r8
 8007760:	d879      	bhi.n	8007856 <HAL_RCC_ClockConfig+0x18e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007762:	6873      	ldr	r3, [r6, #4]
 8007764:	6862      	ldr	r2, [r4, #4]
 8007766:	f003 030c 	and.w	r3, r3, #12
 800776a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800776e:	d1f3      	bne.n	8007758 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007770:	4a3c      	ldr	r2, [pc, #240]	; (8007864 <HAL_RCC_ClockConfig+0x19c>)
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	f003 0307 	and.w	r3, r3, #7
 8007778:	42ab      	cmp	r3, r5
 800777a:	d909      	bls.n	8007790 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777c:	6813      	ldr	r3, [r2, #0]
 800777e:	f023 0307 	bic.w	r3, r3, #7
 8007782:	432b      	orrs	r3, r5
 8007784:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007786:	6813      	ldr	r3, [r2, #0]
 8007788:	f003 0307 	and.w	r3, r3, #7
 800778c:	42ab      	cmp	r3, r5
 800778e:	d1b2      	bne.n	80076f6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	0758      	lsls	r0, r3, #29
 8007794:	d506      	bpl.n	80077a4 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007796:	4934      	ldr	r1, [pc, #208]	; (8007868 <HAL_RCC_ClockConfig+0x1a0>)
 8007798:	68e0      	ldr	r0, [r4, #12]
 800779a:	684a      	ldr	r2, [r1, #4]
 800779c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077a0:	4302      	orrs	r2, r0
 80077a2:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077a4:	0719      	lsls	r1, r3, #28
 80077a6:	d507      	bpl.n	80077b8 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077a8:	4a2f      	ldr	r2, [pc, #188]	; (8007868 <HAL_RCC_ClockConfig+0x1a0>)
 80077aa:	6921      	ldr	r1, [r4, #16]
 80077ac:	6853      	ldr	r3, [r2, #4]
 80077ae:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80077b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80077b6:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80077b8:	492b      	ldr	r1, [pc, #172]	; (8007868 <HAL_RCC_ClockConfig+0x1a0>)
 80077ba:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80077bc:	f002 030c 	and.w	r3, r2, #12
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d017      	beq.n	80077f4 <HAL_RCC_ClockConfig+0x12c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80077c4:	4929      	ldr	r1, [pc, #164]	; (800786c <HAL_RCC_ClockConfig+0x1a4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80077c6:	4b28      	ldr	r3, [pc, #160]	; (8007868 <HAL_RCC_ClockConfig+0x1a0>)
 80077c8:	22f0      	movs	r2, #240	; 0xf0
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	fa92 f2a2 	rbit	r2, r2
 80077d0:	fab2 f282 	clz	r2, r2
 80077d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077d8:	40d3      	lsrs	r3, r2
 80077da:	4a25      	ldr	r2, [pc, #148]	; (8007870 <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 80077dc:	4825      	ldr	r0, [pc, #148]	; (8007874 <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80077de:	5cd3      	ldrb	r3, [r2, r3]
 80077e0:	4a25      	ldr	r2, [pc, #148]	; (8007878 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 80077e2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80077e4:	fa21 f303 	lsr.w	r3, r1, r3
 80077e8:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80077ea:	f7fd fcdd 	bl	80051a8 <HAL_InitTick>
  return HAL_OK;
 80077ee:	2000      	movs	r0, #0
}
 80077f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80077f8:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80077fc:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 8007800:	fab3 f383 	clz	r3, r3
 8007804:	4c1d      	ldr	r4, [pc, #116]	; (800787c <HAL_RCC_ClockConfig+0x1b4>)
 8007806:	fa20 f303 	lsr.w	r3, r0, r3
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800780a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800780c:	5ce3      	ldrb	r3, [r4, r3]
 800780e:	210f      	movs	r1, #15
 8007810:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007814:	03d2      	lsls	r2, r2, #15
 8007816:	d520      	bpl.n	800785a <HAL_RCC_ClockConfig+0x192>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007818:	fab1 f181 	clz	r1, r1
 800781c:	f000 000f 	and.w	r0, r0, #15
 8007820:	4c17      	ldr	r4, [pc, #92]	; (8007880 <HAL_RCC_ClockConfig+0x1b8>)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007822:	4a12      	ldr	r2, [pc, #72]	; (800786c <HAL_RCC_ClockConfig+0x1a4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007824:	40c8      	lsrs	r0, r1
 8007826:	5c21      	ldrb	r1, [r4, r0]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007828:	fbb2 f2f1 	udiv	r2, r2, r1
 800782c:	fb03 f102 	mul.w	r1, r3, r2
 8007830:	e7c9      	b.n	80077c6 <HAL_RCC_ClockConfig+0xfe>
    return HAL_ERROR;
 8007832:	2001      	movs	r0, #1
}
 8007834:	4770      	bx	lr
 8007836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800783a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800783e:	490a      	ldr	r1, [pc, #40]	; (8007868 <HAL_RCC_ClockConfig+0x1a0>)
 8007840:	6809      	ldr	r1, [r1, #0]
 8007842:	fa93 f3a3 	rbit	r3, r3
 8007846:	fab3 f383 	clz	r3, r3
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	420b      	tst	r3, r1
 8007850:	f47f af76 	bne.w	8007740 <HAL_RCC_ClockConfig+0x78>
 8007854:	e74f      	b.n	80076f6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8007856:	2003      	movs	r0, #3
 8007858:	e74e      	b.n	80076f8 <HAL_RCC_ClockConfig+0x30>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800785a:	490a      	ldr	r1, [pc, #40]	; (8007884 <HAL_RCC_ClockConfig+0x1bc>)
 800785c:	fb03 f101 	mul.w	r1, r3, r1
 8007860:	e7b1      	b.n	80077c6 <HAL_RCC_ClockConfig+0xfe>
 8007862:	bf00      	nop
 8007864:	40022000 	.word	0x40022000
 8007868:	40021000 	.word	0x40021000
 800786c:	007a1200 	.word	0x007a1200
 8007870:	0800dddc 	.word	0x0800dddc
 8007874:	20000010 	.word	0x20000010
 8007878:	20000008 	.word	0x20000008
 800787c:	0800ddf4 	.word	0x0800ddf4
 8007880:	0800de04 	.word	0x0800de04
 8007884:	003d0900 	.word	0x003d0900

08007888 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8007888:	4917      	ldr	r1, [pc, #92]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x60>)
 800788a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800788c:	f003 020c 	and.w	r2, r3, #12
 8007890:	2a08      	cmp	r2, #8
 8007892:	d001      	beq.n	8007898 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8007894:	4815      	ldr	r0, [pc, #84]	; (80078ec <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007896:	4770      	bx	lr
{
 8007898:	b410      	push	{r4}
 800789a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800789e:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80078a2:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80078a6:	fab2 f282 	clz	r2, r2
 80078aa:	4c11      	ldr	r4, [pc, #68]	; (80078f0 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80078ac:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80078ae:	fa20 f202 	lsr.w	r2, r0, r2
 80078b2:	5ca0      	ldrb	r0, [r4, r2]
 80078b4:	220f      	movs	r2, #15
 80078b6:	fa92 f2a2 	rbit	r2, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80078ba:	03db      	lsls	r3, r3, #15
 80078bc:	d50e      	bpl.n	80078dc <HAL_RCC_GetSysClockFreq+0x54>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80078be:	fab2 f282 	clz	r2, r2
 80078c2:	f001 010f 	and.w	r1, r1, #15
 80078c6:	4c0b      	ldr	r4, [pc, #44]	; (80078f4 <HAL_RCC_GetSysClockFreq+0x6c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80078c8:	4b08      	ldr	r3, [pc, #32]	; (80078ec <HAL_RCC_GetSysClockFreq+0x64>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80078ca:	40d1      	lsrs	r1, r2
 80078cc:	5c62      	ldrb	r2, [r4, r1]
}
 80078ce:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80078d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80078d6:	fb03 f000 	mul.w	r0, r3, r0
}
 80078da:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80078dc:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80078de:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80078e2:	fb03 f000 	mul.w	r0, r3, r0
}
 80078e6:	4770      	bx	lr
 80078e8:	40021000 	.word	0x40021000
 80078ec:	007a1200 	.word	0x007a1200
 80078f0:	0800ddf4 	.word	0x0800ddf4
 80078f4:	0800de04 	.word	0x0800de04
 80078f8:	003d0900 	.word	0x003d0900

080078fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80078fc:	4b08      	ldr	r3, [pc, #32]	; (8007920 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	fa92 f2a2 	rbit	r2, r2
 8007908:	fab2 f282 	clz	r2, r2
 800790c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007910:	4904      	ldr	r1, [pc, #16]	; (8007924 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8007912:	4805      	ldr	r0, [pc, #20]	; (8007928 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007914:	40d3      	lsrs	r3, r2
 8007916:	6800      	ldr	r0, [r0, #0]
 8007918:	5ccb      	ldrb	r3, [r1, r3]
}    
 800791a:	40d8      	lsrs	r0, r3
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40021000 	.word	0x40021000
 8007924:	0800ddec 	.word	0x0800ddec
 8007928:	20000008 	.word	0x20000008

0800792c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <HAL_RCC_GetPCLK2Freq+0x24>)
 800792e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	fa92 f2a2 	rbit	r2, r2
 8007938:	fab2 f282 	clz	r2, r2
 800793c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007940:	4904      	ldr	r1, [pc, #16]	; (8007954 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8007942:	4805      	ldr	r0, [pc, #20]	; (8007958 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007944:	40d3      	lsrs	r3, r2
 8007946:	6800      	ldr	r0, [r0, #0]
 8007948:	5ccb      	ldrb	r3, [r1, r3]
} 
 800794a:	40d8      	lsrs	r0, r3
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40021000 	.word	0x40021000
 8007954:	0800ddec 	.word	0x0800ddec
 8007958:	20000008 	.word	0x20000008

0800795c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800795c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007960:	6803      	ldr	r3, [r0, #0]
 8007962:	03dd      	lsls	r5, r3, #15
{
 8007964:	b083      	sub	sp, #12
 8007966:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007968:	d540      	bpl.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800796a:	4b7f      	ldr	r3, [pc, #508]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800796c:	69da      	ldr	r2, [r3, #28]
 800796e:	00d0      	lsls	r0, r2, #3
 8007970:	f140 80ba 	bpl.w	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007974:	4d7d      	ldr	r5, [pc, #500]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007976:	682b      	ldr	r3, [r5, #0]
 8007978:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 800797a:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800797e:	f140 80c3 	bpl.w	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007982:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8007986:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800798a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800798e:	d020      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007990:	6861      	ldr	r1, [r4, #4]
 8007992:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8007996:	429a      	cmp	r2, r3
 8007998:	d01c      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800799a:	f8d8 1020 	ldr.w	r1, [r8, #32]
 800799e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079a2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80079a6:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079aa:	4f71      	ldr	r7, [pc, #452]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80079ac:	fab2 f282 	clz	r2, r2
 80079b0:	443a      	add	r2, r7
 80079b2:	0092      	lsls	r2, r2, #2
 80079b4:	2501      	movs	r5, #1
 80079b6:	6015      	str	r5, [r2, #0]
 80079b8:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80079bc:	fab3 f383 	clz	r3, r3
 80079c0:	443b      	add	r3, r7
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	2200      	movs	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80079c8:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80079ca:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80079ce:	f100 80af 	bmi.w	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80079d2:	6861      	ldr	r1, [r4, #4]
 80079d4:	4a64      	ldr	r2, [pc, #400]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80079d6:	6a13      	ldr	r3, [r2, #32]
 80079d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079dc:	430b      	orrs	r3, r1
 80079de:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80079e0:	b11e      	cbz	r6, 80079ea <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079e2:	69d3      	ldr	r3, [r2, #28]
 80079e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	07df      	lsls	r7, r3, #31
 80079ee:	d506      	bpl.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079f0:	495d      	ldr	r1, [pc, #372]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80079f2:	68a0      	ldr	r0, [r4, #8]
 80079f4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80079f6:	f022 0203 	bic.w	r2, r2, #3
 80079fa:	4302      	orrs	r2, r0
 80079fc:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079fe:	079e      	lsls	r6, r3, #30
 8007a00:	d506      	bpl.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a02:	4959      	ldr	r1, [pc, #356]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007a04:	68e0      	ldr	r0, [r4, #12]
 8007a06:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007a08:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007a0c:	4302      	orrs	r2, r0
 8007a0e:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a10:	075d      	lsls	r5, r3, #29
 8007a12:	d506      	bpl.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a14:	4954      	ldr	r1, [pc, #336]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007a16:	6920      	ldr	r0, [r4, #16]
 8007a18:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007a1a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8007a1e:	4302      	orrs	r2, r0
 8007a20:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a22:	0698      	lsls	r0, r3, #26
 8007a24:	d506      	bpl.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a26:	4950      	ldr	r1, [pc, #320]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007a28:	69e0      	ldr	r0, [r4, #28]
 8007a2a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007a2c:	f022 0210 	bic.w	r2, r2, #16
 8007a30:	4302      	orrs	r2, r0
 8007a32:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a34:	0399      	lsls	r1, r3, #14
 8007a36:	d506      	bpl.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007a38:	494b      	ldr	r1, [pc, #300]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007a3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007a3c:	684a      	ldr	r2, [r1, #4]
 8007a3e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8007a42:	4302      	orrs	r2, r0
 8007a44:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a46:	065a      	lsls	r2, r3, #25
 8007a48:	d506      	bpl.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a4a:	4947      	ldr	r1, [pc, #284]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007a4c:	6a20      	ldr	r0, [r4, #32]
 8007a4e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007a50:	f022 0220 	bic.w	r2, r2, #32
 8007a54:	4302      	orrs	r2, r0
 8007a56:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a58:	071f      	lsls	r7, r3, #28
 8007a5a:	d506      	bpl.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a5c:	4942      	ldr	r1, [pc, #264]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007a5e:	6960      	ldr	r0, [r4, #20]
 8007a60:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007a62:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007a66:	4302      	orrs	r2, r0
 8007a68:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a6a:	06de      	lsls	r6, r3, #27
 8007a6c:	d506      	bpl.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a6e:	493e      	ldr	r1, [pc, #248]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007a70:	69a0      	ldr	r0, [r4, #24]
 8007a72:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007a74:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007a78:	4302      	orrs	r2, r0
 8007a7a:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a7c:	059d      	lsls	r5, r3, #22
 8007a7e:	d506      	bpl.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a80:	4939      	ldr	r1, [pc, #228]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007a82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007a84:	684a      	ldr	r2, [r1, #4]
 8007a86:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007a8a:	4302      	orrs	r2, r0
 8007a8c:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007a8e:	0618      	lsls	r0, r3, #24
 8007a90:	d506      	bpl.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007a92:	4935      	ldr	r1, [pc, #212]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007a94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a96:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007a98:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8007a9c:	4302      	orrs	r2, r0
 8007a9e:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007aa0:	05d9      	lsls	r1, r3, #23
 8007aa2:	d506      	bpl.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007aa4:	4930      	ldr	r1, [pc, #192]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007aa6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007aa8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007aaa:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8007aae:	4302      	orrs	r2, r0
 8007ab0:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007ab2:	04da      	lsls	r2, r3, #19
 8007ab4:	d506      	bpl.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007ab6:	492c      	ldr	r1, [pc, #176]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007ab8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007aba:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ac0:	4302      	orrs	r2, r0
 8007ac2:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007ac4:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8007ac8:	d103      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007aca:	4618      	mov	r0, r3
}
 8007acc:	b003      	add	sp, #12
 8007ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007ad2:	4a25      	ldr	r2, [pc, #148]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ad6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 8007adc:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007ade:	430b      	orrs	r3, r1
 8007ae0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8007ae2:	b003      	add	sp, #12
 8007ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ae8:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007aea:	4d20      	ldr	r5, [pc, #128]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x210>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007af0:	61da      	str	r2, [r3, #28]
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 8007b00:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b04:	f53f af3d 	bmi.w	8007982 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8007b10:	f7fd fb8c 	bl	800522c <HAL_GetTick>
 8007b14:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	05da      	lsls	r2, r3, #23
 8007b1a:	f53f af32 	bmi.w	8007982 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b1e:	f7fd fb85 	bl	800522c <HAL_GetTick>
 8007b22:	1bc0      	subs	r0, r0, r7
 8007b24:	2864      	cmp	r0, #100	; 0x64
 8007b26:	d9f6      	bls.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 8007b28:	2003      	movs	r0, #3
}
 8007b2a:	b003      	add	sp, #12
 8007b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8007b30:	f7fd fb7c 	bl	800522c <HAL_GetTick>
 8007b34:	f04f 0902 	mov.w	r9, #2
 8007b38:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b3a:	e006      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b3c:	f7fd fb76 	bl	800522c <HAL_GetTick>
 8007b40:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b44:	1bc0      	subs	r0, r0, r7
 8007b46:	4298      	cmp	r0, r3
 8007b48:	d8ee      	bhi.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007b4a:	fa99 f3a9 	rbit	r3, r9
 8007b4e:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b52:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8007b56:	fa99 f3a9 	rbit	r3, r9
 8007b5a:	fab3 f383 	clz	r3, r3
 8007b5e:	fa05 f303 	lsl.w	r3, r5, r3
 8007b62:	4213      	tst	r3, r2
 8007b64:	d0ea      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007b66:	e734      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007b68:	40021000 	.word	0x40021000
 8007b6c:	40007000 	.word	0x40007000
 8007b70:	10908100 	.word	0x10908100

08007b74 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d077      	beq.n	8007c68 <HAL_SPI_Init+0xf4>
{
 8007b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b7c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b7e:	4604      	mov	r4, r0
 8007b80:	2e00      	cmp	r6, #0
 8007b82:	d058      	beq.n	8007c36 <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b84:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b8a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b8e:	2200      	movs	r2, #0
 8007b90:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d059      	beq.n	8007c4e <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b9a:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b9c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007ba4:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ba6:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8007baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bae:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bb0:	d947      	bls.n	8007c42 <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bb2:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8007bb6:	d159      	bne.n	8007c6c <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bb8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bba:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bbc:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007bc0:	6862      	ldr	r2, [r4, #4]
 8007bc2:	68a3      	ldr	r3, [r4, #8]
 8007bc4:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007bc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	6962      	ldr	r2, [r4, #20]
 8007bd8:	f002 0201 	and.w	r2, r2, #1
 8007bdc:	431a      	orrs	r2, r3
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007be0:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bec:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007bee:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bf2:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8007bf6:	69a6      	ldr	r6, [r4, #24]
 8007bf8:	6a23      	ldr	r3, [r4, #32]
 8007bfa:	f003 0780 	and.w	r7, r3, #128	; 0x80
 8007bfe:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8007c02:	4313      	orrs	r3, r2
 8007c04:	ea43 0308 	orr.w	r3, r3, r8
 8007c08:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c0a:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c0c:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c0e:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c12:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c14:	ea4e 0306 	orr.w	r3, lr, r6
 8007c18:	ea43 030c 	orr.w	r3, r3, ip
 8007c1c:	4303      	orrs	r3, r0
 8007c1e:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c20:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c22:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8007c28:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c2a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c2c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007c2e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8007c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c36:	6843      	ldr	r3, [r0, #4]
 8007c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3c:	d0a5      	beq.n	8007b8a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007c3e:	61c6      	str	r6, [r0, #28]
 8007c40:	e7a3      	b.n	8007b8a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007c42:	d00b      	beq.n	8007c5c <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c48:	2500      	movs	r5, #0
 8007c4a:	62a5      	str	r5, [r4, #40]	; 0x28
 8007c4c:	e7b8      	b.n	8007bc0 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8007c4e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8007c52:	4620      	mov	r0, r4
 8007c54:	f7fc fadc 	bl	8004210 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c5a:	e79e      	b.n	8007b9a <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c5c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007c5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c62:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007c66:	e7ab      	b.n	8007bc0 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8007c68:	2001      	movs	r0, #1
}
 8007c6a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e7eb      	b.n	8007c48 <HAL_SPI_Init+0xd4>

08007c70 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c70:	6a03      	ldr	r3, [r0, #32]
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c78:	6a03      	ldr	r3, [r0, #32]
{
 8007c7a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c7e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c80:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c86:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007c8a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c8c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007c8e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8007c92:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c94:	4d13      	ldr	r5, [pc, #76]	; (8007ce4 <TIM_OC1_SetConfig+0x74>)
 8007c96:	42a8      	cmp	r0, r5
 8007c98:	d00f      	beq.n	8007cba <TIM_OC1_SetConfig+0x4a>
 8007c9a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007c9e:	42a8      	cmp	r0, r5
 8007ca0:	d00b      	beq.n	8007cba <TIM_OC1_SetConfig+0x4a>
 8007ca2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007ca6:	42a8      	cmp	r0, r5
 8007ca8:	d007      	beq.n	8007cba <TIM_OC1_SetConfig+0x4a>
 8007caa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007cae:	42a8      	cmp	r0, r5
 8007cb0:	d003      	beq.n	8007cba <TIM_OC1_SetConfig+0x4a>
 8007cb2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007cb6:	42a8      	cmp	r0, r5
 8007cb8:	d10d      	bne.n	8007cd6 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007cba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cbc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007cc0:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cc2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cc6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cca:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cce:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cd2:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cd6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007cd8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007cda:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007cdc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8007cde:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8007ce0:	6203      	str	r3, [r0, #32]
}
 8007ce2:	4770      	bx	lr
 8007ce4:	40012c00 	.word	0x40012c00

08007ce8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ce8:	6a03      	ldr	r3, [r0, #32]
 8007cea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cee:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf0:	6a03      	ldr	r3, [r0, #32]
{
 8007cf2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cf6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cf8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cfa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007cfe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007d02:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d04:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8007d06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d0e:	4d15      	ldr	r5, [pc, #84]	; (8007d64 <TIM_OC3_SetConfig+0x7c>)
 8007d10:	42a8      	cmp	r0, r5
 8007d12:	d010      	beq.n	8007d36 <TIM_OC3_SetConfig+0x4e>
 8007d14:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007d18:	42a8      	cmp	r0, r5
 8007d1a:	d00c      	beq.n	8007d36 <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d1c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007d20:	42a8      	cmp	r0, r5
 8007d22:	d00f      	beq.n	8007d44 <TIM_OC3_SetConfig+0x5c>
 8007d24:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007d28:	42a8      	cmp	r0, r5
 8007d2a:	d00b      	beq.n	8007d44 <TIM_OC3_SetConfig+0x5c>
 8007d2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007d30:	42a8      	cmp	r0, r5
 8007d32:	d10f      	bne.n	8007d54 <TIM_OC3_SetConfig+0x6c>
 8007d34:	e006      	b.n	8007d44 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d36:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d3c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d44:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d48:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d4c:	ea46 0c05 	orr.w	ip, r6, r5
 8007d50:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d54:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007d56:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007d58:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007d5a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8007d5c:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007d5e:	6203      	str	r3, [r0, #32]
}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40012c00 	.word	0x40012c00

08007d68 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007d68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d122      	bne.n	8007db6 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d70:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d72:	4917      	ldr	r1, [pc, #92]	; (8007dd0 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007d74:	2202      	movs	r2, #2
 8007d76:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d7a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d84:	d019      	beq.n	8007dba <HAL_TIM_Base_Start_IT+0x52>
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8a:	d016      	beq.n	8007dba <HAL_TIM_Base_Start_IT+0x52>
 8007d8c:	4a11      	ldr	r2, [pc, #68]	; (8007dd4 <HAL_TIM_Base_Start_IT+0x6c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <HAL_TIM_Base_Start_IT+0x52>
 8007d92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00f      	beq.n	8007dba <HAL_TIM_Base_Start_IT+0x52>
 8007d9a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00b      	beq.n	8007dba <HAL_TIM_Base_Start_IT+0x52>
 8007da2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d007      	beq.n	8007dba <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8007db0:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	4770      	bx	lr
    return HAL_ERROR;
 8007db6:	2001      	movs	r0, #1
 8007db8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dba:	6899      	ldr	r1, [r3, #8]
 8007dbc:	4a06      	ldr	r2, [pc, #24]	; (8007dd8 <HAL_TIM_Base_Start_IT+0x70>)
 8007dbe:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc0:	2a06      	cmp	r2, #6
 8007dc2:	d002      	beq.n	8007dca <HAL_TIM_Base_Start_IT+0x62>
 8007dc4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007dc8:	d1ef      	bne.n	8007daa <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8007dca:	2000      	movs	r0, #0
}
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	40012c00 	.word	0x40012c00
 8007dd4:	40000400 	.word	0x40000400
 8007dd8:	00010007 	.word	0x00010007

08007ddc <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ddc:	6803      	ldr	r3, [r0, #0]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	f022 0201 	bic.w	r2, r2, #1
 8007de4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8007de6:	6a1a      	ldr	r2, [r3, #32]
 8007de8:	f241 1111 	movw	r1, #4369	; 0x1111
 8007dec:	420a      	tst	r2, r1
 8007dee:	d108      	bne.n	8007e02 <HAL_TIM_Base_Stop_IT+0x26>
 8007df0:	6a19      	ldr	r1, [r3, #32]
 8007df2:	f240 4244 	movw	r2, #1092	; 0x444
 8007df6:	4211      	tst	r1, r2
 8007df8:	d103      	bne.n	8007e02 <HAL_TIM_Base_Stop_IT+0x26>
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f022 0201 	bic.w	r2, r2, #1
 8007e00:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007e02:	2301      	movs	r3, #1
 8007e04:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007e08:	2000      	movs	r0, #0
 8007e0a:	4770      	bx	lr

08007e0c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f000 8081 	beq.w	8007f14 <HAL_TIM_PWM_Init+0x108>
{
 8007e12:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007e14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007e18:	4604      	mov	r4, r0
 8007e1a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d06d      	beq.n	8007efe <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e22:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e24:	493c      	ldr	r1, [pc, #240]	; (8007f18 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007e26:	2302      	movs	r3, #2
 8007e28:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e2c:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007e2e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e30:	d051      	beq.n	8007ed6 <HAL_TIM_PWM_Init+0xca>
 8007e32:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007e36:	d021      	beq.n	8007e7c <HAL_TIM_PWM_Init+0x70>
 8007e38:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007e3c:	428a      	cmp	r2, r1
 8007e3e:	d01d      	beq.n	8007e7c <HAL_TIM_PWM_Init+0x70>
 8007e40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e44:	428a      	cmp	r2, r1
 8007e46:	d019      	beq.n	8007e7c <HAL_TIM_PWM_Init+0x70>
 8007e48:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8007e4c:	428a      	cmp	r2, r1
 8007e4e:	d042      	beq.n	8007ed6 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e50:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8007e54:	428a      	cmp	r2, r1
 8007e56:	d057      	beq.n	8007f08 <HAL_TIM_PWM_Init+0xfc>
 8007e58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e5c:	428a      	cmp	r2, r1
 8007e5e:	d053      	beq.n	8007f08 <HAL_TIM_PWM_Init+0xfc>
 8007e60:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e64:	428a      	cmp	r2, r1
 8007e66:	d04f      	beq.n	8007f08 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e68:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e6a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e70:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007e72:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007e74:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e76:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e78:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e7a:	e010      	b.n	8007e9e <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8007e7c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e7e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e84:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e8a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e8c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e92:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e94:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007e96:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007e98:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e9a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007e9c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ea2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007eaa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007eae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007eb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007eb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ebe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ec6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007eca:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007ece:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007ed2:	2000      	movs	r0, #0
}
 8007ed4:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8007ed6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ed8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007ede:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ee4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ee6:	69a1      	ldr	r1, [r4, #24]
 8007ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eec:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007eee:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ef0:	68e3      	ldr	r3, [r4, #12]
 8007ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef8:	6963      	ldr	r3, [r4, #20]
 8007efa:	6313      	str	r3, [r2, #48]	; 0x30
 8007efc:	e7cf      	b.n	8007e9e <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8007efe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007f02:	f7fc fc2f 	bl	8004764 <HAL_TIM_PWM_MspInit>
 8007f06:	e78c      	b.n	8007e22 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f08:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f0a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f10:	4303      	orrs	r3, r0
 8007f12:	e7e9      	b.n	8007ee8 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8007f14:	2001      	movs	r0, #1
}
 8007f16:	4770      	bx	lr
 8007f18:	40012c00 	.word	0x40012c00

08007f1c <HAL_TIM_PWM_Start>:
 8007f1c:	2910      	cmp	r1, #16
 8007f1e:	d80a      	bhi.n	8007f36 <HAL_TIM_PWM_Start+0x1a>
 8007f20:	e8df f001 	tbb	[pc, r1]
 8007f24:	09090955 	.word	0x09090955
 8007f28:	0909095b 	.word	0x0909095b
 8007f2c:	09090963 	.word	0x09090963
 8007f30:	09090968 	.word	0x09090968
 8007f34:	71          	.byte	0x71
 8007f35:	00          	.byte	0x00
 8007f36:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d14b      	bne.n	8007fd6 <HAL_TIM_PWM_Start+0xba>
 8007f3e:	2910      	cmp	r1, #16
 8007f40:	d80a      	bhi.n	8007f58 <HAL_TIM_PWM_Start+0x3c>
 8007f42:	e8df f001 	tbb	[pc, r1]
 8007f46:	0987      	.short	0x0987
 8007f48:	094e0909 	.word	0x094e0909
 8007f4c:	09700909 	.word	0x09700909
 8007f50:	096c0909 	.word	0x096c0909
 8007f54:	0909      	.short	0x0909
 8007f56:	68          	.byte	0x68
 8007f57:	00          	.byte	0x00
 8007f58:	2302      	movs	r3, #2
 8007f5a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007f5e:	6803      	ldr	r3, [r0, #0]
 8007f60:	2201      	movs	r2, #1
 8007f62:	6a18      	ldr	r0, [r3, #32]
 8007f64:	f001 011f 	and.w	r1, r1, #31
 8007f68:	fa02 f101 	lsl.w	r1, r2, r1
 8007f6c:	ea20 0001 	bic.w	r0, r0, r1
 8007f70:	6218      	str	r0, [r3, #32]
 8007f72:	6a18      	ldr	r0, [r3, #32]
 8007f74:	4a39      	ldr	r2, [pc, #228]	; (800805c <HAL_TIM_PWM_Start+0x140>)
 8007f76:	4301      	orrs	r1, r0
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	6219      	str	r1, [r3, #32]
 8007f7c:	d057      	beq.n	800802e <HAL_TIM_PWM_Start+0x112>
 8007f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d061      	beq.n	800804a <HAL_TIM_PWM_Start+0x12e>
 8007f86:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d05d      	beq.n	800804a <HAL_TIM_PWM_Start+0x12e>
 8007f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d059      	beq.n	800804a <HAL_TIM_PWM_Start+0x12e>
 8007f96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d055      	beq.n	800804a <HAL_TIM_PWM_Start+0x12e>
 8007f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa2:	d048      	beq.n	8008036 <HAL_TIM_PWM_Start+0x11a>
 8007fa4:	4a2e      	ldr	r2, [pc, #184]	; (8008060 <HAL_TIM_PWM_Start+0x144>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d045      	beq.n	8008036 <HAL_TIM_PWM_Start+0x11a>
 8007faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d041      	beq.n	8008036 <HAL_TIM_PWM_Start+0x11a>
 8007fb2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d03d      	beq.n	8008036 <HAL_TIM_PWM_Start+0x11a>
 8007fba:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d039      	beq.n	8008036 <HAL_TIM_PWM_Start+0x11a>
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	2000      	movs	r0, #0
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	4770      	bx	lr
 8007fce:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d03e      	beq.n	8008054 <HAL_TIM_PWM_Start+0x138>
 8007fd6:	2001      	movs	r0, #1
 8007fd8:	4770      	bx	lr
 8007fda:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d1f9      	bne.n	8007fd6 <HAL_TIM_PWM_Start+0xba>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007fe8:	e7b9      	b.n	8007f5e <HAL_TIM_PWM_Start+0x42>
 8007fea:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d0a5      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x22>
 8007ff2:	e7f0      	b.n	8007fd6 <HAL_TIM_PWM_Start+0xba>
 8007ff4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	bf18      	it	ne
 8007ffc:	2301      	movne	r3, #1
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d09d      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x22>
 8008002:	2001      	movs	r0, #1
 8008004:	4770      	bx	lr
 8008006:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800800a:	3b01      	subs	r3, #1
 800800c:	bf18      	it	ne
 800800e:	2301      	movne	r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d094      	beq.n	8007f3e <HAL_TIM_PWM_Start+0x22>
 8008014:	e7f5      	b.n	8008002 <HAL_TIM_PWM_Start+0xe6>
 8008016:	2302      	movs	r3, #2
 8008018:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 800801c:	e79f      	b.n	8007f5e <HAL_TIM_PWM_Start+0x42>
 800801e:	2302      	movs	r3, #2
 8008020:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008024:	e79b      	b.n	8007f5e <HAL_TIM_PWM_Start+0x42>
 8008026:	2302      	movs	r3, #2
 8008028:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800802c:	e797      	b.n	8007f5e <HAL_TIM_PWM_Start+0x42>
 800802e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008030:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008034:	645a      	str	r2, [r3, #68]	; 0x44
 8008036:	6899      	ldr	r1, [r3, #8]
 8008038:	4a0a      	ldr	r2, [pc, #40]	; (8008064 <HAL_TIM_PWM_Start+0x148>)
 800803a:	400a      	ands	r2, r1
 800803c:	2a06      	cmp	r2, #6
 800803e:	d002      	beq.n	8008046 <HAL_TIM_PWM_Start+0x12a>
 8008040:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008044:	d1bd      	bne.n	8007fc2 <HAL_TIM_PWM_Start+0xa6>
 8008046:	2000      	movs	r0, #0
 8008048:	4770      	bx	lr
 800804a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800804c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008050:	645a      	str	r2, [r3, #68]	; 0x44
 8008052:	e7a4      	b.n	8007f9e <HAL_TIM_PWM_Start+0x82>
 8008054:	2302      	movs	r3, #2
 8008056:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800805a:	e780      	b.n	8007f5e <HAL_TIM_PWM_Start+0x42>
 800805c:	40012c00 	.word	0x40012c00
 8008060:	40000400 	.word	0x40000400
 8008064:	00010007 	.word	0x00010007

08008068 <HAL_TIM_PWM_Stop>:
 8008068:	6803      	ldr	r3, [r0, #0]
 800806a:	b410      	push	{r4}
 800806c:	6a1a      	ldr	r2, [r3, #32]
 800806e:	f001 041f 	and.w	r4, r1, #31
 8008072:	f04f 0c01 	mov.w	ip, #1
 8008076:	fa0c fc04 	lsl.w	ip, ip, r4
 800807a:	ea22 020c 	bic.w	r2, r2, ip
 800807e:	621a      	str	r2, [r3, #32]
 8008080:	4a35      	ldr	r2, [pc, #212]	; (8008158 <HAL_TIM_PWM_Stop+0xf0>)
 8008082:	6a1c      	ldr	r4, [r3, #32]
 8008084:	621c      	str	r4, [r3, #32]
 8008086:	4293      	cmp	r3, r2
 8008088:	d021      	beq.n	80080ce <HAL_TIM_PWM_Stop+0x66>
 800808a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800808e:	4293      	cmp	r3, r2
 8008090:	d01d      	beq.n	80080ce <HAL_TIM_PWM_Stop+0x66>
 8008092:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008096:	4293      	cmp	r3, r2
 8008098:	d019      	beq.n	80080ce <HAL_TIM_PWM_Stop+0x66>
 800809a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800809e:	4293      	cmp	r3, r2
 80080a0:	d015      	beq.n	80080ce <HAL_TIM_PWM_Stop+0x66>
 80080a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d011      	beq.n	80080ce <HAL_TIM_PWM_Stop+0x66>
 80080aa:	6a1c      	ldr	r4, [r3, #32]
 80080ac:	f241 1211 	movw	r2, #4369	; 0x1111
 80080b0:	4214      	tst	r4, r2
 80080b2:	d104      	bne.n	80080be <HAL_TIM_PWM_Stop+0x56>
 80080b4:	6a1c      	ldr	r4, [r3, #32]
 80080b6:	f240 4244 	movw	r2, #1092	; 0x444
 80080ba:	4214      	tst	r4, r2
 80080bc:	d016      	beq.n	80080ec <HAL_TIM_PWM_Stop+0x84>
 80080be:	b9d9      	cbnz	r1, 80080f8 <HAL_TIM_PWM_Stop+0x90>
 80080c0:	2301      	movs	r3, #1
 80080c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80080c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080ca:	2000      	movs	r0, #0
 80080cc:	4770      	bx	lr
 80080ce:	6a1c      	ldr	r4, [r3, #32]
 80080d0:	f241 1211 	movw	r2, #4369	; 0x1111
 80080d4:	4214      	tst	r4, r2
 80080d6:	d1e8      	bne.n	80080aa <HAL_TIM_PWM_Stop+0x42>
 80080d8:	6a1c      	ldr	r4, [r3, #32]
 80080da:	f240 4244 	movw	r2, #1092	; 0x444
 80080de:	4214      	tst	r4, r2
 80080e0:	d1e3      	bne.n	80080aa <HAL_TIM_PWM_Stop+0x42>
 80080e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080e8:	645a      	str	r2, [r3, #68]	; 0x44
 80080ea:	e7de      	b.n	80080aa <HAL_TIM_PWM_Stop+0x42>
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	f022 0201 	bic.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d0e3      	beq.n	80080c0 <HAL_TIM_PWM_Stop+0x58>
 80080f8:	3904      	subs	r1, #4
 80080fa:	290c      	cmp	r1, #12
 80080fc:	d808      	bhi.n	8008110 <HAL_TIM_PWM_Stop+0xa8>
 80080fe:	e8df f001 	tbb	[pc, r1]
 8008102:	0723      	.short	0x0723
 8008104:	071c0707 	.word	0x071c0707
 8008108:	07150707 	.word	0x07150707
 800810c:	0707      	.short	0x0707
 800810e:	0e          	.byte	0x0e
 800810f:	00          	.byte	0x00
 8008110:	2301      	movs	r3, #1
 8008112:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8008116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811a:	2000      	movs	r0, #0
 800811c:	4770      	bx	lr
 800811e:	2301      	movs	r3, #1
 8008120:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8008124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008128:	2000      	movs	r0, #0
 800812a:	4770      	bx	lr
 800812c:	2301      	movs	r3, #1
 800812e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008136:	2000      	movs	r0, #0
 8008138:	4770      	bx	lr
 800813a:	2301      	movs	r3, #1
 800813c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008144:	2000      	movs	r0, #0
 8008146:	4770      	bx	lr
 8008148:	2301      	movs	r3, #1
 800814a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800814e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008152:	2000      	movs	r0, #0
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	40012c00 	.word	0x40012c00

0800815c <HAL_TIM_OC_DelayElapsedCallback>:
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop

08008160 <HAL_TIM_IC_CaptureCallback>:
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop

08008164 <HAL_TIM_PWM_PulseFinishedCallback>:
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop

08008168 <HAL_TIM_TriggerCallback>:
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop

0800816c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800816c:	6803      	ldr	r3, [r0, #0]
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	0791      	lsls	r1, r2, #30
{
 8008172:	b510      	push	{r4, lr}
 8008174:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008176:	d502      	bpl.n	800817e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	0792      	lsls	r2, r2, #30
 800817c:	d468      	bmi.n	8008250 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800817e:	691a      	ldr	r2, [r3, #16]
 8008180:	0752      	lsls	r2, r2, #29
 8008182:	d502      	bpl.n	800818a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	0750      	lsls	r0, r2, #29
 8008188:	d44f      	bmi.n	800822a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	0711      	lsls	r1, r2, #28
 800818e:	d502      	bpl.n	8008196 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	0712      	lsls	r2, r2, #28
 8008194:	d437      	bmi.n	8008206 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008196:	691a      	ldr	r2, [r3, #16]
 8008198:	06d0      	lsls	r0, r2, #27
 800819a:	d502      	bpl.n	80081a2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	06d1      	lsls	r1, r2, #27
 80081a0:	d41e      	bmi.n	80081e0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081a2:	691a      	ldr	r2, [r3, #16]
 80081a4:	07d2      	lsls	r2, r2, #31
 80081a6:	d502      	bpl.n	80081ae <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081a8:	68da      	ldr	r2, [r3, #12]
 80081aa:	07d0      	lsls	r0, r2, #31
 80081ac:	d469      	bmi.n	8008282 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	0611      	lsls	r1, r2, #24
 80081b2:	d502      	bpl.n	80081ba <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	0612      	lsls	r2, r2, #24
 80081b8:	d46b      	bmi.n	8008292 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	05d0      	lsls	r0, r2, #23
 80081be:	d502      	bpl.n	80081c6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	0611      	lsls	r1, r2, #24
 80081c4:	d46d      	bmi.n	80082a2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	0652      	lsls	r2, r2, #25
 80081ca:	d502      	bpl.n	80081d2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081cc:	68da      	ldr	r2, [r3, #12]
 80081ce:	0650      	lsls	r0, r2, #25
 80081d0:	d46f      	bmi.n	80082b2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	0691      	lsls	r1, r2, #26
 80081d6:	d502      	bpl.n	80081de <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	0692      	lsls	r2, r2, #26
 80081dc:	d449      	bmi.n	8008272 <HAL_TIM_IRQHandler+0x106>
}
 80081de:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081e0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081e4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081e6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80081f0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081f2:	d16f      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081f4:	f7ff ffb2 	bl	800815c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f8:	4620      	mov	r0, r4
 80081fa:	f7ff ffb3 	bl	8008164 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fe:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008200:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008202:	7722      	strb	r2, [r4, #28]
 8008204:	e7cd      	b.n	80081a2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008206:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800820a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800820c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800820e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8008214:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008216:	d15a      	bne.n	80082ce <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008218:	f7ff ffa0 	bl	800815c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821c:	4620      	mov	r0, r4
 800821e:	f7ff ffa1 	bl	8008164 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008222:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008224:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008226:	7722      	strb	r2, [r4, #28]
 8008228:	e7b5      	b.n	8008196 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800822a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800822e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008230:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008232:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800823a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800823c:	d144      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823e:	f7ff ff8d 	bl	800815c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008242:	4620      	mov	r0, r4
 8008244:	f7ff ff8e 	bl	8008164 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008248:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800824a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800824c:	7722      	strb	r2, [r4, #28]
 800824e:	e79c      	b.n	800818a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008250:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008254:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008256:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008258:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	0799      	lsls	r1, r3, #30
 800825e:	d130      	bne.n	80082c2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008260:	f7ff ff7c 	bl	800815c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008264:	4620      	mov	r0, r4
 8008266:	f7ff ff7d 	bl	8008164 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800826c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826e:	7722      	strb	r2, [r4, #28]
 8008270:	e785      	b.n	800817e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008272:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8008276:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008278:	611a      	str	r2, [r3, #16]
}
 800827a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800827e:	f000 badb 	b.w	8008838 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008282:	f06f 0201 	mvn.w	r2, #1
 8008286:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008288:	4620      	mov	r0, r4
 800828a:	f7f9 fc99 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	e78d      	b.n	80081ae <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008292:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008296:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008298:	4620      	mov	r0, r4
 800829a:	f000 facf 	bl	800883c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	e78b      	b.n	80081ba <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082a6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 fac9 	bl	8008840 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	e789      	b.n	80081c6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80082b8:	4620      	mov	r0, r4
 80082ba:	f7ff ff55 	bl	8008168 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	e787      	b.n	80081d2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	f7ff ff4d 	bl	8008160 <HAL_TIM_IC_CaptureCallback>
 80082c6:	e7d0      	b.n	800826a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80082c8:	f7ff ff4a 	bl	8008160 <HAL_TIM_IC_CaptureCallback>
 80082cc:	e7bc      	b.n	8008248 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80082ce:	f7ff ff47 	bl	8008160 <HAL_TIM_IC_CaptureCallback>
 80082d2:	e7a6      	b.n	8008222 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80082d4:	f7ff ff44 	bl	8008160 <HAL_TIM_IC_CaptureCallback>
 80082d8:	e791      	b.n	80081fe <HAL_TIM_IRQHandler+0x92>
 80082da:	bf00      	nop

080082dc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082dc:	6a03      	ldr	r3, [r0, #32]
 80082de:	f023 0310 	bic.w	r3, r3, #16
 80082e2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80082e4:	6a03      	ldr	r3, [r0, #32]
{
 80082e6:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80082e8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80082ea:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80082f2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082f6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082fa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80082fc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008300:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008304:	4d14      	ldr	r5, [pc, #80]	; (8008358 <TIM_OC2_SetConfig+0x7c>)
 8008306:	42a8      	cmp	r0, r5
 8008308:	d010      	beq.n	800832c <TIM_OC2_SetConfig+0x50>
 800830a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800830e:	42a8      	cmp	r0, r5
 8008310:	d00c      	beq.n	800832c <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008312:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8008316:	42a8      	cmp	r0, r5
 8008318:	d00f      	beq.n	800833a <TIM_OC2_SetConfig+0x5e>
 800831a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800831e:	42a8      	cmp	r0, r5
 8008320:	d00b      	beq.n	800833a <TIM_OC2_SetConfig+0x5e>
 8008322:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008326:	42a8      	cmp	r0, r5
 8008328:	d10f      	bne.n	800834a <TIM_OC2_SetConfig+0x6e>
 800832a:	e006      	b.n	800833a <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800832c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800832e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008332:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800833a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800833e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008342:	ea46 0c05 	orr.w	ip, r6, r5
 8008346:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800834a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800834c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800834e:	6182      	str	r2, [r0, #24]
}
 8008350:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008352:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008354:	6203      	str	r3, [r0, #32]
}
 8008356:	4770      	bx	lr
 8008358:	40012c00 	.word	0x40012c00

0800835c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800835c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008360:	2b01      	cmp	r3, #1
 8008362:	f000 812f 	beq.w	80085c4 <HAL_TIM_PWM_ConfigChannel+0x268>
 8008366:	2301      	movs	r3, #1
{
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	4604      	mov	r4, r0
 800836c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800836e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008372:	2a14      	cmp	r2, #20
 8008374:	d816      	bhi.n	80083a4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8008376:	e8df f012 	tbh	[pc, r2, lsl #1]
 800837a:	005f      	.short	0x005f
 800837c:	00150015 	.word	0x00150015
 8008380:	00740015 	.word	0x00740015
 8008384:	00150015 	.word	0x00150015
 8008388:	008a0015 	.word	0x008a0015
 800838c:	00150015 	.word	0x00150015
 8008390:	009f0015 	.word	0x009f0015
 8008394:	00150015 	.word	0x00150015
 8008398:	00e30015 	.word	0x00e30015
 800839c:	00150015 	.word	0x00150015
 80083a0:	001b0015 	.word	0x001b0015
  __HAL_UNLOCK(htim);
 80083a4:	2200      	movs	r2, #0
  switch (Channel)
 80083a6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80083a8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083b0:	6802      	ldr	r2, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b2:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083b4:	6a13      	ldr	r3, [r2, #32]
 80083b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083ba:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 80083bc:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80083be:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80083c0:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083c2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80083c6:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ca:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083ce:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083d4:	ea43 5306 	orr.w	r3, r3, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d8:	4e7c      	ldr	r6, [pc, #496]	; (80085cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 80083da:	42b2      	cmp	r2, r6
 80083dc:	d00f      	beq.n	80083fe <HAL_TIM_PWM_ConfigChannel+0xa2>
 80083de:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80083e2:	42b2      	cmp	r2, r6
 80083e4:	d00b      	beq.n	80083fe <HAL_TIM_PWM_ConfigChannel+0xa2>
 80083e6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80083ea:	42b2      	cmp	r2, r6
 80083ec:	d007      	beq.n	80083fe <HAL_TIM_PWM_ConfigChannel+0xa2>
 80083ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80083f2:	42b2      	cmp	r2, r6
 80083f4:	d003      	beq.n	80083fe <HAL_TIM_PWM_ConfigChannel+0xa2>
 80083f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80083fa:	42b2      	cmp	r2, r6
 80083fc:	d104      	bne.n	8008408 <HAL_TIM_PWM_ConfigChannel+0xac>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083fe:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008400:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008404:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008408:	6050      	str	r0, [r2, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800840a:	6551      	str	r1, [r2, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800840c:	6869      	ldr	r1, [r5, #4]
 800840e:	65d1      	str	r1, [r2, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008410:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008412:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008414:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008416:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800841a:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800841c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800841e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008422:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008424:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8008426:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800842a:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800842c:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800842e:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008430:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008434:	4618      	mov	r0, r3
 8008436:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008438:	6800      	ldr	r0, [r0, #0]
 800843a:	f7ff fc19 	bl	8007c70 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800843e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008440:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008442:	f043 0308 	orr.w	r3, r3, #8
 8008446:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008448:	6982      	ldr	r2, [r0, #24]
 800844a:	f022 0204 	bic.w	r2, r2, #4
 800844e:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008450:	6982      	ldr	r2, [r0, #24]
 8008452:	430a      	orrs	r2, r1
 8008454:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8008456:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008458:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800845a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800845e:	4618      	mov	r0, r3
 8008460:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008462:	6800      	ldr	r0, [r0, #0]
 8008464:	f7ff ff3a 	bl	80082dc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008468:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800846a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800846c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008470:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008472:	6982      	ldr	r2, [r0, #24]
 8008474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008478:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800847a:	6982      	ldr	r2, [r0, #24]
 800847c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008480:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8008482:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008484:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008486:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800848a:	4618      	mov	r0, r3
 800848c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800848e:	6800      	ldr	r0, [r0, #0]
 8008490:	f7ff fc2a 	bl	8007ce8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008494:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008496:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008498:	f043 0308 	orr.w	r3, r3, #8
 800849c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800849e:	69c2      	ldr	r2, [r0, #28]
 80084a0:	f022 0204 	bic.w	r2, r2, #4
 80084a4:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084a6:	69c2      	ldr	r2, [r0, #28]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 80084ac:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80084ae:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80084b0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084b8:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084ba:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084bc:	6a13      	ldr	r3, [r2, #32]
 80084be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084c2:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 80084c4:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80084c6:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80084c8:	69d1      	ldr	r1, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084ca:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80084ce:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084d6:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80084d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084dc:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e0:	4e3a      	ldr	r6, [pc, #232]	; (80085cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 80084e2:	42b2      	cmp	r2, r6
 80084e4:	d00f      	beq.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80084e6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80084ea:	42b2      	cmp	r2, r6
 80084ec:	d00b      	beq.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80084ee:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80084f2:	42b2      	cmp	r2, r6
 80084f4:	d007      	beq.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80084f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80084fa:	42b2      	cmp	r2, r6
 80084fc:	d003      	beq.n	8008506 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80084fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008502:	42b2      	cmp	r2, r6
 8008504:	d104      	bne.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x1b4>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008506:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008508:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800850c:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8008510:	6050      	str	r0, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008512:	61d1      	str	r1, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8008514:	6869      	ldr	r1, [r5, #4]
 8008516:	6411      	str	r1, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8008518:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800851a:	69d3      	ldr	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800851c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800851e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008522:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008524:	69d1      	ldr	r1, [r2, #28]
 8008526:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800852a:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800852c:	69d1      	ldr	r1, [r2, #28]
 800852e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8008532:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8008534:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008536:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008538:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800853c:	4618      	mov	r0, r3
 800853e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008540:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008542:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008544:	6a13      	ldr	r3, [r2, #32]
 8008546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800854a:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 800854c:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800854e:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8008550:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008552:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008556:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800855a:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800855c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800855e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008562:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008566:	4e19      	ldr	r6, [pc, #100]	; (80085cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 8008568:	42b2      	cmp	r2, r6
 800856a:	d00f      	beq.n	800858c <HAL_TIM_PWM_ConfigChannel+0x230>
 800856c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008570:	42b2      	cmp	r2, r6
 8008572:	d00b      	beq.n	800858c <HAL_TIM_PWM_ConfigChannel+0x230>
 8008574:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008578:	42b2      	cmp	r2, r6
 800857a:	d007      	beq.n	800858c <HAL_TIM_PWM_ConfigChannel+0x230>
 800857c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008580:	42b2      	cmp	r2, r6
 8008582:	d003      	beq.n	800858c <HAL_TIM_PWM_ConfigChannel+0x230>
 8008584:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008588:	42b2      	cmp	r2, r6
 800858a:	d104      	bne.n	8008596 <HAL_TIM_PWM_ConfigChannel+0x23a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800858c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800858e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008592:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008596:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008598:	6551      	str	r1, [r2, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800859a:	6869      	ldr	r1, [r5, #4]
 800859c:	6591      	str	r1, [r2, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800859e:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085a2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80085a4:	f043 0308 	orr.w	r3, r3, #8
 80085a8:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80085aa:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80085ac:	f021 0104 	bic.w	r1, r1, #4
 80085b0:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80085b2:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80085b4:	4301      	orrs	r1, r0
 80085b6:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80085b8:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80085ba:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80085bc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 80085c4:	2302      	movs	r3, #2
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	40012c00 	.word	0x40012c00

080085d0 <HAL_TIMEx_PWMN_Start>:
 80085d0:	2900      	cmp	r1, #0
 80085d2:	d139      	bne.n	8008648 <HAL_TIMEx_PWMN_Start+0x78>
 80085d4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d141      	bne.n	8008660 <HAL_TIMEx_PWMN_Start+0x90>
 80085dc:	2302      	movs	r3, #2
 80085de:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80085e2:	6803      	ldr	r3, [r0, #0]
 80085e4:	f001 011f 	and.w	r1, r1, #31
 80085e8:	6a18      	ldr	r0, [r3, #32]
 80085ea:	2204      	movs	r2, #4
 80085ec:	408a      	lsls	r2, r1
 80085ee:	ea20 0002 	bic.w	r0, r0, r2
 80085f2:	6218      	str	r0, [r3, #32]
 80085f4:	6a18      	ldr	r0, [r3, #32]
 80085f6:	4924      	ldr	r1, [pc, #144]	; (8008688 <HAL_TIMEx_PWMN_Start+0xb8>)
 80085f8:	4302      	orrs	r2, r0
 80085fa:	621a      	str	r2, [r3, #32]
 80085fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085fe:	428b      	cmp	r3, r1
 8008600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008604:	645a      	str	r2, [r3, #68]	; 0x44
 8008606:	d011      	beq.n	800862c <HAL_TIMEx_PWMN_Start+0x5c>
 8008608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800860c:	d00e      	beq.n	800862c <HAL_TIMEx_PWMN_Start+0x5c>
 800860e:	4a1f      	ldr	r2, [pc, #124]	; (800868c <HAL_TIMEx_PWMN_Start+0xbc>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d00b      	beq.n	800862c <HAL_TIMEx_PWMN_Start+0x5c>
 8008614:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008618:	4293      	cmp	r3, r2
 800861a:	d007      	beq.n	800862c <HAL_TIMEx_PWMN_Start+0x5c>
 800861c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008620:	4293      	cmp	r3, r2
 8008622:	d003      	beq.n	800862c <HAL_TIMEx_PWMN_Start+0x5c>
 8008624:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008628:	4293      	cmp	r3, r2
 800862a:	d107      	bne.n	800863c <HAL_TIMEx_PWMN_Start+0x6c>
 800862c:	6899      	ldr	r1, [r3, #8]
 800862e:	4a18      	ldr	r2, [pc, #96]	; (8008690 <HAL_TIMEx_PWMN_Start+0xc0>)
 8008630:	400a      	ands	r2, r1
 8008632:	2a06      	cmp	r2, #6
 8008634:	d016      	beq.n	8008664 <HAL_TIMEx_PWMN_Start+0x94>
 8008636:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800863a:	d013      	beq.n	8008664 <HAL_TIMEx_PWMN_Start+0x94>
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	f042 0201 	orr.w	r2, r2, #1
 8008642:	2000      	movs	r0, #0
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	4770      	bx	lr
 8008648:	2904      	cmp	r1, #4
 800864a:	d00d      	beq.n	8008668 <HAL_TIMEx_PWMN_Start+0x98>
 800864c:	2908      	cmp	r1, #8
 800864e:	d013      	beq.n	8008678 <HAL_TIMEx_PWMN_Start+0xa8>
 8008650:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8008654:	2b01      	cmp	r3, #1
 8008656:	d103      	bne.n	8008660 <HAL_TIMEx_PWMN_Start+0x90>
 8008658:	2302      	movs	r3, #2
 800865a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 800865e:	e7c0      	b.n	80085e2 <HAL_TIMEx_PWMN_Start+0x12>
 8008660:	2001      	movs	r0, #1
 8008662:	4770      	bx	lr
 8008664:	2000      	movs	r0, #0
 8008666:	4770      	bx	lr
 8008668:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800866c:	2b01      	cmp	r3, #1
 800866e:	d1f7      	bne.n	8008660 <HAL_TIMEx_PWMN_Start+0x90>
 8008670:	2302      	movs	r3, #2
 8008672:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008676:	e7b4      	b.n	80085e2 <HAL_TIMEx_PWMN_Start+0x12>
 8008678:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800867c:	2b01      	cmp	r3, #1
 800867e:	d1ef      	bne.n	8008660 <HAL_TIMEx_PWMN_Start+0x90>
 8008680:	2302      	movs	r3, #2
 8008682:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8008686:	e7ac      	b.n	80085e2 <HAL_TIMEx_PWMN_Start+0x12>
 8008688:	40012c00 	.word	0x40012c00
 800868c:	40000400 	.word	0x40000400
 8008690:	00010007 	.word	0x00010007

08008694 <HAL_TIMEx_PWMN_Stop>:
 8008694:	6803      	ldr	r3, [r0, #0]
 8008696:	b410      	push	{r4}
 8008698:	6a1a      	ldr	r2, [r3, #32]
 800869a:	f001 041f 	and.w	r4, r1, #31
 800869e:	f04f 0c04 	mov.w	ip, #4
 80086a2:	fa0c fc04 	lsl.w	ip, ip, r4
 80086a6:	ea22 020c 	bic.w	r2, r2, ip
 80086aa:	621a      	str	r2, [r3, #32]
 80086ac:	6a1a      	ldr	r2, [r3, #32]
 80086ae:	621a      	str	r2, [r3, #32]
 80086b0:	6a1c      	ldr	r4, [r3, #32]
 80086b2:	f241 1211 	movw	r2, #4369	; 0x1111
 80086b6:	4214      	tst	r4, r2
 80086b8:	d104      	bne.n	80086c4 <HAL_TIMEx_PWMN_Stop+0x30>
 80086ba:	6a1c      	ldr	r4, [r3, #32]
 80086bc:	f240 4244 	movw	r2, #1092	; 0x444
 80086c0:	4214      	tst	r4, r2
 80086c2:	d022      	beq.n	800870a <HAL_TIMEx_PWMN_Stop+0x76>
 80086c4:	6a1c      	ldr	r4, [r3, #32]
 80086c6:	f241 1211 	movw	r2, #4369	; 0x1111
 80086ca:	4214      	tst	r4, r2
 80086cc:	d104      	bne.n	80086d8 <HAL_TIMEx_PWMN_Stop+0x44>
 80086ce:	6a1c      	ldr	r4, [r3, #32]
 80086d0:	f240 4244 	movw	r2, #1092	; 0x444
 80086d4:	4214      	tst	r4, r2
 80086d6:	d013      	beq.n	8008700 <HAL_TIMEx_PWMN_Stop+0x6c>
 80086d8:	2301      	movs	r3, #1
 80086da:	b929      	cbnz	r1, 80086e8 <HAL_TIMEx_PWMN_Stop+0x54>
 80086dc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80086e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086e4:	2000      	movs	r0, #0
 80086e6:	4770      	bx	lr
 80086e8:	2904      	cmp	r1, #4
 80086ea:	d013      	beq.n	8008714 <HAL_TIMEx_PWMN_Stop+0x80>
 80086ec:	2908      	cmp	r1, #8
 80086ee:	bf0c      	ite	eq
 80086f0:	f880 3046 	strbeq.w	r3, [r0, #70]	; 0x46
 80086f4:	f880 3047 	strbne.w	r3, [r0, #71]	; 0x47
 80086f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086fc:	2000      	movs	r0, #0
 80086fe:	4770      	bx	lr
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	f022 0201 	bic.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	e7e6      	b.n	80086d8 <HAL_TIMEx_PWMN_Stop+0x44>
 800870a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800870c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008710:	645a      	str	r2, [r3, #68]	; 0x44
 8008712:	e7d7      	b.n	80086c4 <HAL_TIMEx_PWMN_Stop+0x30>
 8008714:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800871c:	2000      	movs	r0, #0
 800871e:	4770      	bx	lr

08008720 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008720:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008724:	2b01      	cmp	r3, #1
 8008726:	d03a      	beq.n	800879e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 8008728:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800872a:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800872c:	4d1d      	ldr	r5, [pc, #116]	; (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 800872e:	2302      	movs	r3, #2
 8008730:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008734:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8008736:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008738:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800873a:	d026      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800873c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008740:	42aa      	cmp	r2, r5
 8008742:	d022      	beq.n	800878a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008744:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800874a:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800874c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008750:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008752:	d00c      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8008754:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8008756:	429a      	cmp	r2, r3
 8008758:	d009      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800875a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800875e:	429a      	cmp	r2, r3
 8008760:	d005      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8008762:	42aa      	cmp	r2, r5
 8008764:	d003      	beq.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8008766:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800876a:	429a      	cmp	r2, r3
 800876c:	d104      	bne.n	8008778 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800876e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008770:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008774:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008776:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008778:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800877a:	2201      	movs	r2, #1
 800877c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008780:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008784:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8008786:	4618      	mov	r0, r3
}
 8008788:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800878a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800878c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008790:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008792:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008798:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800879a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800879c:	e7e7      	b.n	800876e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 800879e:	2002      	movs	r0, #2
}
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40012c00 	.word	0x40012c00
 80087a8:	40000400 	.word	0x40000400

080087ac <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d03d      	beq.n	8008830 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 80087b4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087b6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80087ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087be:	4602      	mov	r2, r0
 80087c0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087c2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087c4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087ca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087d0:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087d2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087d8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087e0:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087e2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087e8:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087ea:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087ec:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087f0:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80087f6:	4c0f      	ldr	r4, [pc, #60]	; (8008834 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d00b      	beq.n	8008814 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80087fc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8008800:	42a0      	cmp	r0, r4
 8008802:	d007      	beq.n	8008814 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8008804:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008806:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8008808:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800880c:	4608      	mov	r0, r1
}
 800880e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008812:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008814:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008816:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800881a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800881e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008820:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008826:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008828:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800882c:	430b      	orrs	r3, r1
 800882e:	e7e9      	b.n	8008804 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8008830:	2002      	movs	r0, #2
}
 8008832:	4770      	bx	lr
 8008834:	40012c00 	.word	0x40012c00

08008838 <HAL_TIMEx_CommutCallback>:
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop

0800883c <HAL_TIMEx_BreakCallback>:
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop

08008840 <HAL_TIMEx_Break2Callback>:
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop

08008844 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008844:	b570      	push	{r4, r5, r6, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008846:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 8008848:	2d20      	cmp	r5, #32
 800884a:	d12e      	bne.n	80088aa <HAL_UART_Transmit_DMA+0x66>
  {
    if ((pData == NULL) || (Size == 0U))
 800884c:	b359      	cbz	r1, 80088a6 <HAL_UART_Transmit_DMA+0x62>
 800884e:	b352      	cbz	r2, 80088a6 <HAL_UART_Transmit_DMA+0x62>

    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008850:	2300      	movs	r3, #0
    huart->TxXferCount = Size;
 8008852:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
 8008856:	4604      	mov	r4, r0
    huart->pTxBuffPtr  = pData;
 8008858:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800885a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->TxXferSize  = Size;
 800885e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 8008862:	6f00      	ldr	r0, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008864:	2621      	movs	r6, #33	; 0x21
 8008866:	67e6      	str	r6, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 8008868:	b160      	cbz	r0, 8008884 <HAL_UART_Transmit_DMA+0x40>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800886a:	4e14      	ldr	r6, [pc, #80]	; (80088bc <HAL_UART_Transmit_DMA+0x78>)

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800886c:	6343      	str	r3, [r0, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800886e:	4613      	mov	r3, r2
 8008870:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008872:	6286      	str	r6, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008874:	4e12      	ldr	r6, [pc, #72]	; (80088c0 <HAL_UART_Transmit_DMA+0x7c>)
 8008876:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008878:	4e12      	ldr	r6, [pc, #72]	; (80088c4 <HAL_UART_Transmit_DMA+0x80>)
 800887a:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800887c:	3228      	adds	r2, #40	; 0x28
 800887e:	f7fe f903 	bl	8006a88 <HAL_DMA_Start_IT>
 8008882:	b9a0      	cbnz	r0, 80088ae <HAL_UART_Transmit_DMA+0x6a>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008884:	6822      	ldr	r2, [r4, #0]
 8008886:	2340      	movs	r3, #64	; 0x40
 8008888:	6213      	str	r3, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888a:	f102 0308 	add.w	r3, r2, #8
 800888e:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	f102 0008 	add.w	r0, r2, #8
 800889a:	e840 3100 	strex	r1, r3, [r0]
 800889e:	2900      	cmp	r1, #0
 80088a0:	d1f3      	bne.n	800888a <HAL_UART_Transmit_DMA+0x46>

    return HAL_OK;
 80088a2:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80088a4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80088a6:	2001      	movs	r0, #1
}
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80088aa:	2002      	movs	r0, #2
}
 80088ac:	bd70      	pop	{r4, r5, r6, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088ae:	2310      	movs	r3, #16
 80088b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80088b4:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 80088b6:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 80088b8:	bd70      	pop	{r4, r5, r6, pc}
 80088ba:	bf00      	nop
 80088bc:	080088c9 	.word	0x080088c9
 80088c0:	08008911 	.word	0x08008911
 80088c4:	08008921 	.word	0x08008921

080088c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80088ca:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	d018      	beq.n	8008904 <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	6802      	ldr	r2, [r0, #0]
 80088d6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	f102 0308 	add.w	r3, r2, #8
 80088de:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	f102 0008 	add.w	r0, r2, #8
 80088ea:	e840 3100 	strex	r1, r3, [r0]
 80088ee:	2900      	cmp	r1, #0
 80088f0:	d1f3      	bne.n	80088da <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	e842 3100 	strex	r1, r3, [r2]
 80088fe:	2900      	cmp	r1, #0
 8008900:	d1f7      	bne.n	80088f2 <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008902:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8008904:	f7fc fb62 	bl	8004fcc <HAL_UART_TxCpltCallback>
}
 8008908:	bd08      	pop	{r3, pc}
 800890a:	bf00      	nop

0800890c <HAL_UART_TxHalfCpltCallback>:
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop

08008910 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008910:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008912:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008914:	f7ff fffa 	bl	800890c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008918:	bd08      	pop	{r3, pc}
 800891a:	bf00      	nop

0800891c <HAL_UART_ErrorCallback>:
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop

08008920 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008920:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008922:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008924:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
{
 8008926:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008928:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800892c:	689a      	ldr	r2, [r3, #8]
 800892e:	0612      	lsls	r2, r2, #24
 8008930:	d501      	bpl.n	8008936 <UART_DMAError+0x16>
 8008932:	2921      	cmp	r1, #33	; 0x21
 8008934:	d00d      	beq.n	8008952 <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	0652      	lsls	r2, r2, #25
 800893a:	d501      	bpl.n	8008940 <UART_DMAError+0x20>
 800893c:	2c22      	cmp	r4, #34	; 0x22
 800893e:	d016      	beq.n	800896e <UART_DMAError+0x4e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008940:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008944:	f043 0310 	orr.w	r3, r3, #16
 8008948:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800894c:	f7ff ffe6 	bl	800891c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008950:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8008952:	2200      	movs	r2, #0
 8008954:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800895c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008960:	e843 2100 	strex	r1, r2, [r3]
 8008964:	2900      	cmp	r1, #0
 8008966:	d1f7      	bne.n	8008958 <UART_DMAError+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8008968:	2220      	movs	r2, #32
 800896a:	67c2      	str	r2, [r0, #124]	; 0x7c
}
 800896c:	e7e3      	b.n	8008936 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 800896e:	2200      	movs	r2, #0
 8008970:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008978:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	e843 2100 	strex	r1, r2, [r3]
 8008980:	2900      	cmp	r1, #0
 8008982:	d1f7      	bne.n	8008974 <UART_DMAError+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	f103 0208 	add.w	r2, r3, #8
 8008988:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800898c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	f103 0408 	add.w	r4, r3, #8
 8008994:	e844 2100 	strex	r1, r2, [r4]
 8008998:	2900      	cmp	r1, #0
 800899a:	d1f3      	bne.n	8008984 <UART_DMAError+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800899c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800899e:	2a01      	cmp	r2, #1
 80089a0:	d006      	beq.n	80089b0 <UART_DMAError+0x90>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a2:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80089a4:	2220      	movs	r2, #32
 80089a6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  huart->RxISR = NULL;
 80089aa:	6683      	str	r3, [r0, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ac:	6603      	str	r3, [r0, #96]	; 0x60
}
 80089ae:	e7c7      	b.n	8008940 <UART_DMAError+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	e843 2100 	strex	r1, r2, [r3]
 80089bc:	2900      	cmp	r1, #0
 80089be:	d0f0      	beq.n	80089a2 <UART_DMAError+0x82>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	e853 2f00 	ldrex	r2, [r3]
 80089c4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	e843 2100 	strex	r1, r2, [r3]
 80089cc:	2900      	cmp	r1, #0
 80089ce:	d1ef      	bne.n	80089b0 <UART_DMAError+0x90>
 80089d0:	e7e7      	b.n	80089a2 <UART_DMAError+0x82>
 80089d2:	bf00      	nop

080089d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80089de:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089e2:	f7ff ff9b 	bl	800891c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089e6:	bd08      	pop	{r3, pc}

080089e8 <HAL_UARTEx_RxEventCallback>:
}
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop

080089ec <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80089ec:	6803      	ldr	r3, [r0, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089f0:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80089f2:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80089f6:	ea12 0f0c 	tst.w	r2, ip
{
 80089fa:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089fc:	689d      	ldr	r5, [r3, #8]
{
 80089fe:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8008a00:	d17f      	bne.n	8008b02 <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a02:	0696      	lsls	r6, r2, #26
 8008a04:	d502      	bpl.n	8008a0c <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a06:	068e      	lsls	r6, r1, #26
 8008a08:	f100 8117 	bmi.w	8008c3a <HAL_UART_IRQHandler+0x24e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a0c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008a0e:	2801      	cmp	r0, #1
 8008a10:	d024      	beq.n	8008a5c <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a12:	02d6      	lsls	r6, r2, #11
 8008a14:	d502      	bpl.n	8008a1c <HAL_UART_IRQHandler+0x30>
 8008a16:	0268      	lsls	r0, r5, #9
 8008a18:	f100 8114 	bmi.w	8008c44 <HAL_UART_IRQHandler+0x258>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008a1c:	0616      	lsls	r6, r2, #24
 8008a1e:	d414      	bmi.n	8008a4a <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a20:	0650      	lsls	r0, r2, #25
 8008a22:	d501      	bpl.n	8008a28 <HAL_UART_IRQHandler+0x3c>
 8008a24:	064a      	lsls	r2, r1, #25
 8008a26:	d400      	bmi.n	8008a2a <HAL_UART_IRQHandler+0x3e>
}
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	e843 2100 	strex	r1, r2, [r3]
 8008a36:	2900      	cmp	r1, #0
 8008a38:	d1f7      	bne.n	8008a2a <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a3a:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a3c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008a3e:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 8008a40:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a42:	4620      	mov	r0, r4
 8008a44:	f7fc fac2 	bl	8004fcc <HAL_UART_TxCpltCallback>
}
 8008a48:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008a4a:	060d      	lsls	r5, r1, #24
 8008a4c:	d5e8      	bpl.n	8008a20 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8008a4e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d0e9      	beq.n	8008a28 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8008a54:	4620      	mov	r0, r4
}
 8008a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8008a5a:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a5c:	06d6      	lsls	r6, r2, #27
 8008a5e:	d5d8      	bpl.n	8008a12 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a60:	06c8      	lsls	r0, r1, #27
 8008a62:	d5d6      	bpl.n	8008a12 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a64:	2210      	movs	r2, #16
 8008a66:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	0652      	lsls	r2, r2, #25
 8008a6c:	f140 8107 	bpl.w	8008c7e <HAL_UART_IRQHandler+0x292>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a70:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008a72:	6802      	ldr	r2, [r0, #0]
 8008a74:	6852      	ldr	r2, [r2, #4]
 8008a76:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	d0d5      	beq.n	8008a28 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a7c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8008a80:	4291      	cmp	r1, r2
 8008a82:	d9d1      	bls.n	8008a28 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8008a84:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a88:	6982      	ldr	r2, [r0, #24]
 8008a8a:	2a20      	cmp	r2, #32
 8008a8c:	d02f      	beq.n	8008aee <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	e843 2100 	strex	r1, r2, [r3]
 8008a9a:	2900      	cmp	r1, #0
 8008a9c:	d1f7      	bne.n	8008a8e <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	f103 0208 	add.w	r2, r3, #8
 8008aa2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	f103 0508 	add.w	r5, r3, #8
 8008aae:	e845 2100 	strex	r1, r2, [r5]
 8008ab2:	2900      	cmp	r1, #0
 8008ab4:	d1f3      	bne.n	8008a9e <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	f103 0208 	add.w	r2, r3, #8
 8008aba:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	f103 0508 	add.w	r5, r3, #8
 8008ac6:	e845 2100 	strex	r1, r2, [r5]
 8008aca:	2900      	cmp	r1, #0
 8008acc:	d1f3      	bne.n	8008ab6 <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 8008ace:	2220      	movs	r2, #32
 8008ad0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad4:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ada:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	e843 2100 	strex	r1, r2, [r3]
 8008ae2:	2900      	cmp	r1, #0
 8008ae4:	d1f7      	bne.n	8008ad6 <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ae6:	f7fe f811 	bl	8006b0c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008aea:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008aee:	2302      	movs	r3, #2
 8008af0:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008af2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8008af6:	1ac9      	subs	r1, r1, r3
 8008af8:	4620      	mov	r0, r4
 8008afa:	b289      	uxth	r1, r1
 8008afc:	f7ff ff74 	bl	80089e8 <HAL_UARTEx_RxEventCallback>
}
 8008b00:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008b02:	487d      	ldr	r0, [pc, #500]	; (8008cf8 <HAL_UART_IRQHandler+0x30c>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008b04:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008b08:	4008      	ands	r0, r1
 8008b0a:	4330      	orrs	r0, r6
 8008b0c:	f43f af7e 	beq.w	8008a0c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b10:	07d5      	lsls	r5, r2, #31
 8008b12:	d509      	bpl.n	8008b28 <HAL_UART_IRQHandler+0x13c>
 8008b14:	05c8      	lsls	r0, r1, #23
 8008b16:	d507      	bpl.n	8008b28 <HAL_UART_IRQHandler+0x13c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b18:	2001      	movs	r0, #1
 8008b1a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b1c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008b20:	f040 0001 	orr.w	r0, r0, #1
 8008b24:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b28:	0795      	lsls	r5, r2, #30
 8008b2a:	f140 8081 	bpl.w	8008c30 <HAL_UART_IRQHandler+0x244>
 8008b2e:	b18e      	cbz	r6, 8008b54 <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b30:	2002      	movs	r0, #2
 8008b32:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b34:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008b38:	f040 0004 	orr.w	r0, r0, #4
 8008b3c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b40:	0750      	lsls	r0, r2, #29
 8008b42:	d507      	bpl.n	8008b54 <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b44:	2004      	movs	r0, #4
 8008b46:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b48:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008b4c:	f040 0002 	orr.w	r0, r0, #2
 8008b50:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b54:	0710      	lsls	r0, r2, #28
 8008b56:	d50b      	bpl.n	8008b70 <HAL_UART_IRQHandler+0x184>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b58:	f001 0020 	and.w	r0, r1, #32
 8008b5c:	4330      	orrs	r0, r6
 8008b5e:	d007      	beq.n	8008b70 <HAL_UART_IRQHandler+0x184>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b60:	2008      	movs	r0, #8
 8008b62:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b64:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008b68:	f040 0008 	orr.w	r0, r0, #8
 8008b6c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b70:	0516      	lsls	r6, r2, #20
 8008b72:	d50a      	bpl.n	8008b8a <HAL_UART_IRQHandler+0x19e>
 8008b74:	014d      	lsls	r5, r1, #5
 8008b76:	d508      	bpl.n	8008b8a <HAL_UART_IRQHandler+0x19e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b78:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008b7c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b7e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008b82:	f040 0020 	orr.w	r0, r0, #32
 8008b86:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b8a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	f43f af4a 	beq.w	8008a28 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b94:	0690      	lsls	r0, r2, #26
 8008b96:	d506      	bpl.n	8008ba6 <HAL_UART_IRQHandler+0x1ba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b98:	0689      	lsls	r1, r1, #26
 8008b9a:	d504      	bpl.n	8008ba6 <HAL_UART_IRQHandler+0x1ba>
        if (huart->RxISR != NULL)
 8008b9c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008b9e:	b112      	cbz	r2, 8008ba6 <HAL_UART_IRQHandler+0x1ba>
          huart->RxISR(huart);
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ba4:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8008ba6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008baa:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008bac:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bb0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8008bb4:	ea52 0501 	orrs.w	r5, r2, r1
 8008bb8:	f000 8098 	beq.w	8008cec <HAL_UART_IRQHandler+0x300>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	e843 2100 	strex	r1, r2, [r3]
 8008bc8:	2900      	cmp	r1, #0
 8008bca:	d1f7      	bne.n	8008bbc <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bcc:	f103 0208 	add.w	r2, r3, #8
 8008bd0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	f103 0008 	add.w	r0, r3, #8
 8008bdc:	e840 2100 	strex	r1, r2, [r0]
 8008be0:	2900      	cmp	r1, #0
 8008be2:	d1f3      	bne.n	8008bcc <HAL_UART_IRQHandler+0x1e0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008be6:	2a01      	cmp	r2, #1
 8008be8:	d034      	beq.n	8008c54 <HAL_UART_IRQHandler+0x268>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bea:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008bec:	2120      	movs	r1, #32
 8008bee:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf2:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf4:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8008bf6:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf8:	064a      	lsls	r2, r1, #25
 8008bfa:	d53c      	bpl.n	8008c76 <HAL_UART_IRQHandler+0x28a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	f103 0208 	add.w	r2, r3, #8
 8008c00:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	f103 0008 	add.w	r0, r3, #8
 8008c0c:	e840 2100 	strex	r1, r2, [r0]
 8008c10:	2900      	cmp	r1, #0
 8008c12:	d1f3      	bne.n	8008bfc <HAL_UART_IRQHandler+0x210>
          if (huart->hdmarx != NULL)
 8008c14:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008c16:	b370      	cbz	r0, 8008c76 <HAL_UART_IRQHandler+0x28a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c18:	4b38      	ldr	r3, [pc, #224]	; (8008cfc <HAL_UART_IRQHandler+0x310>)
 8008c1a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c1c:	f7fd ff9a 	bl	8006b54 <HAL_DMA_Abort_IT>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	f43f af01 	beq.w	8008a28 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c26:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8008c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008c2e:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c30:	0755      	lsls	r5, r2, #29
 8008c32:	d58f      	bpl.n	8008b54 <HAL_UART_IRQHandler+0x168>
 8008c34:	2e00      	cmp	r6, #0
 8008c36:	d185      	bne.n	8008b44 <HAL_UART_IRQHandler+0x158>
 8008c38:	e78c      	b.n	8008b54 <HAL_UART_IRQHandler+0x168>
      if (huart->RxISR != NULL)
 8008c3a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f47f af0a 	bne.w	8008a56 <HAL_UART_IRQHandler+0x6a>
 8008c42:	e6f1      	b.n	8008a28 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008c48:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c4a:	621a      	str	r2, [r3, #32]
}
 8008c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008c50:	f000 bc40 	b.w	80094d4 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c58:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	e843 2100 	strex	r1, r2, [r3]
 8008c60:	2900      	cmp	r1, #0
 8008c62:	d0c2      	beq.n	8008bea <HAL_UART_IRQHandler+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	e853 2f00 	ldrex	r2, [r3]
 8008c68:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	e843 2100 	strex	r1, r2, [r3]
 8008c70:	2900      	cmp	r1, #0
 8008c72:	d1ef      	bne.n	8008c54 <HAL_UART_IRQHandler+0x268>
 8008c74:	e7b9      	b.n	8008bea <HAL_UART_IRQHandler+0x1fe>
            HAL_UART_ErrorCallback(huart);
 8008c76:	4620      	mov	r0, r4
 8008c78:	f7ff fe50 	bl	800891c <HAL_UART_ErrorCallback>
}
 8008c7c:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c7e:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8008c82:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c86:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8008c8a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c8c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008c8e:	2a00      	cmp	r2, #0
 8008c90:	f43f aeca 	beq.w	8008a28 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c94:	1a41      	subs	r1, r0, r1
 8008c96:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	f43f aec5 	beq.w	8008a28 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ca2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca6:	e843 2000 	strex	r0, r2, [r3]
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d1f7      	bne.n	8008c9e <HAL_UART_IRQHandler+0x2b2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	f103 0208 	add.w	r2, r3, #8
 8008cb2:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	f103 0508 	add.w	r5, r3, #8
 8008cbe:	e845 2000 	strex	r0, r2, [r5]
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d1f3      	bne.n	8008cae <HAL_UART_IRQHandler+0x2c2>
        huart->RxState = HAL_UART_STATE_READY;
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8008ccc:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cce:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd8:	e843 2000 	strex	r0, r2, [r3]
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d1f7      	bne.n	8008cd0 <HAL_UART_IRQHandler+0x2e4>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f7ff fe7f 	bl	80089e8 <HAL_UARTEx_RxEventCallback>
}
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8008cec:	4620      	mov	r0, r4
 8008cee:	f7ff fe15 	bl	800891c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8008cf6:	bd70      	pop	{r4, r5, r6, pc}
 8008cf8:	04000120 	.word	0x04000120
 8008cfc:	080089d5 	.word	0x080089d5

08008d00 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8008d00:	b508      	push	{r3, lr}
 8008d02:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	e843 2100 	strex	r1, r2, [r3]
 8008d10:	2900      	cmp	r1, #0
 8008d12:	d1f7      	bne.n	8008d04 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	f103 0208 	add.w	r2, r3, #8
 8008d18:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d1c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	f103 0c08 	add.w	ip, r3, #8
 8008d24:	e84c 2100 	strex	r1, r2, [ip]
 8008d28:	2900      	cmp	r1, #0
 8008d2a:	d1f3      	bne.n	8008d14 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d32:	6641      	str	r1, [r0, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d34:	685a      	ldr	r2, [r3, #4]
      huart->RxISR = NULL;
 8008d36:	6681      	str	r1, [r0, #104]	; 0x68
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d38:	0211      	lsls	r1, r2, #8
 8008d3a:	d416      	bmi.n	8008d6a <UART_RxISR_16BIT.part.0+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8008d3e:	2a01      	cmp	r2, #1
 8008d40:	d124      	bne.n	8008d8c <UART_RxISR_16BIT.part.0+0x8c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d42:	2200      	movs	r2, #0
 8008d44:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d4a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	e843 2100 	strex	r1, r2, [r3]
 8008d52:	2900      	cmp	r1, #0
 8008d54:	d1f7      	bne.n	8008d46 <UART_RxISR_16BIT.part.0+0x46>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d56:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d58:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d5c:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d5e:	bf44      	itt	mi
 8008d60:	2210      	movmi	r2, #16
 8008d62:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d64:	f7ff fe40 	bl	80089e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d68:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d6e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	e843 2100 	strex	r1, r2, [r3]
 8008d76:	2900      	cmp	r1, #0
 8008d78:	d0e0      	beq.n	8008d3c <UART_RxISR_16BIT.part.0+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	e853 2f00 	ldrex	r2, [r3]
 8008d7e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	e843 2100 	strex	r1, r2, [r3]
 8008d86:	2900      	cmp	r1, #0
 8008d88:	d1ef      	bne.n	8008d6a <UART_RxISR_16BIT.part.0+0x6a>
 8008d8a:	e7d7      	b.n	8008d3c <UART_RxISR_16BIT.part.0+0x3c>
        HAL_UART_RxCpltCallback(huart);
 8008d8c:	f7f8 fe72 	bl	8001a74 <HAL_UART_RxCpltCallback>
}
 8008d90:	bd08      	pop	{r3, pc}
 8008d92:	bf00      	nop

08008d94 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d94:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8008d98:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d9c:	2922      	cmp	r1, #34	; 0x22
 8008d9e:	d005      	beq.n	8008dac <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008da0:	6802      	ldr	r2, [r0, #0]
 8008da2:	6993      	ldr	r3, [r2, #24]
 8008da4:	f043 0308 	orr.w	r3, r3, #8
 8008da8:	6193      	str	r3, [r2, #24]
 8008daa:	4770      	bx	lr
{
 8008dac:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dae:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008db0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008db2:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8008db6:	ea02 020c 	and.w	r2, r2, ip
 8008dba:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8008dbe:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8008dc2:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8008dc4:	3a01      	subs	r2, #1
 8008dc6:	b292      	uxth	r2, r2
 8008dc8:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8008dcc:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	b91b      	cbnz	r3, 8008ddc <UART_RxISR_16BIT+0x48>
  }
}
 8008dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd8:	f7ff bf92 	b.w	8008d00 <UART_RxISR_16BIT.part.0>
 8008ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop

08008de4 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008de4:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8008de8:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dec:	2922      	cmp	r1, #34	; 0x22
 8008dee:	d005      	beq.n	8008dfc <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008df0:	6802      	ldr	r2, [r0, #0]
 8008df2:	6993      	ldr	r3, [r2, #24]
 8008df4:	f043 0308 	orr.w	r3, r3, #8
 8008df8:	6193      	str	r3, [r2, #24]
 8008dfa:	4770      	bx	lr
{
 8008dfc:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dfe:	6804      	ldr	r4, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e00:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e02:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e06:	ea02 020c 	and.w	r2, r2, ip
 8008e0a:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8008e0c:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8008e10:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8008e12:	3a01      	subs	r2, #1
 8008e14:	b292      	uxth	r2, r2
 8008e16:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8008e1a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8008e1e:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8008e20:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8008e22:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8008e24:	b91a      	cbnz	r2, 8008e2e <UART_RxISR_8BIT+0x4a>
}
 8008e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e2a:	f7ff bf69 	b.w	8008d00 <UART_RxISR_16BIT.part.0>
 8008e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008e36:	07da      	lsls	r2, r3, #31
{
 8008e38:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e3a:	d506      	bpl.n	8008e4a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e3c:	6801      	ldr	r1, [r0, #0]
 8008e3e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008e40:	684a      	ldr	r2, [r1, #4]
 8008e42:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008e46:	4322      	orrs	r2, r4
 8008e48:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e4a:	079c      	lsls	r4, r3, #30
 8008e4c:	d506      	bpl.n	8008e5c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e4e:	6801      	ldr	r1, [r0, #0]
 8008e50:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008e52:	684a      	ldr	r2, [r1, #4]
 8008e54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e58:	4322      	orrs	r2, r4
 8008e5a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e5c:	0759      	lsls	r1, r3, #29
 8008e5e:	d506      	bpl.n	8008e6e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e60:	6801      	ldr	r1, [r0, #0]
 8008e62:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008e64:	684a      	ldr	r2, [r1, #4]
 8008e66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e6a:	4322      	orrs	r2, r4
 8008e6c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e6e:	071a      	lsls	r2, r3, #28
 8008e70:	d506      	bpl.n	8008e80 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e72:	6801      	ldr	r1, [r0, #0]
 8008e74:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008e76:	684a      	ldr	r2, [r1, #4]
 8008e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e7c:	4322      	orrs	r2, r4
 8008e7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e80:	06dc      	lsls	r4, r3, #27
 8008e82:	d506      	bpl.n	8008e92 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e84:	6801      	ldr	r1, [r0, #0]
 8008e86:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008e88:	688a      	ldr	r2, [r1, #8]
 8008e8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e8e:	4322      	orrs	r2, r4
 8008e90:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e92:	0699      	lsls	r1, r3, #26
 8008e94:	d506      	bpl.n	8008ea4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e96:	6801      	ldr	r1, [r0, #0]
 8008e98:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008e9a:	688a      	ldr	r2, [r1, #8]
 8008e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ea0:	4322      	orrs	r2, r4
 8008ea2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ea4:	065a      	lsls	r2, r3, #25
 8008ea6:	d509      	bpl.n	8008ebc <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ea8:	6801      	ldr	r1, [r0, #0]
 8008eaa:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008eac:	684a      	ldr	r2, [r1, #4]
 8008eae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008eb2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eb4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eb8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eba:	d00b      	beq.n	8008ed4 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ebc:	061b      	lsls	r3, r3, #24
 8008ebe:	d506      	bpl.n	8008ece <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ec0:	6802      	ldr	r2, [r0, #0]
 8008ec2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008ec4:	6853      	ldr	r3, [r2, #4]
 8008ec6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008eca:	430b      	orrs	r3, r1
 8008ecc:	6053      	str	r3, [r2, #4]
}
 8008ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ed2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ed4:	684a      	ldr	r2, [r1, #4]
 8008ed6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008ed8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008edc:	4322      	orrs	r2, r4
 8008ede:	604a      	str	r2, [r1, #4]
 8008ee0:	e7ec      	b.n	8008ebc <UART_AdvFeatureConfig+0x88>
 8008ee2:	bf00      	nop

08008ee4 <UART_CheckIdleState>:
{
 8008ee4:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee6:	2300      	movs	r3, #0
{
 8008ee8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8008eee:	f7fc f99d 	bl	800522c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ef2:	6822      	ldr	r2, [r4, #0]
 8008ef4:	6813      	ldr	r3, [r2, #0]
 8008ef6:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8008ef8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008efa:	d40e      	bmi.n	8008f1a <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008efc:	6813      	ldr	r3, [r2, #0]
 8008efe:	0759      	lsls	r1, r3, #29
 8008f00:	d42f      	bmi.n	8008f62 <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f02:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008f04:	2220      	movs	r2, #32
 8008f06:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8008f08:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8008f0a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f10:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8008f12:	2300      	movs	r3, #0
 8008f14:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8008f18:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1a:	69d3      	ldr	r3, [r2, #28]
 8008f1c:	0298      	lsls	r0, r3, #10
 8008f1e:	d4ed      	bmi.n	8008efc <UART_CheckIdleState+0x18>
 8008f20:	e00c      	b.n	8008f3c <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f22:	6819      	ldr	r1, [r3, #0]
 8008f24:	0749      	lsls	r1, r1, #29
 8008f26:	461a      	mov	r2, r3
 8008f28:	d505      	bpl.n	8008f36 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f2a:	69d9      	ldr	r1, [r3, #28]
 8008f2c:	0708      	lsls	r0, r1, #28
 8008f2e:	d44a      	bmi.n	8008fc6 <UART_CheckIdleState+0xe2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f30:	69d9      	ldr	r1, [r3, #28]
 8008f32:	0509      	lsls	r1, r1, #20
 8008f34:	d475      	bmi.n	8009022 <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	0298      	lsls	r0, r3, #10
 8008f3a:	d4df      	bmi.n	8008efc <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f3c:	f7fc f976 	bl	800522c <HAL_GetTick>
 8008f40:	1b43      	subs	r3, r0, r5
 8008f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	d3eb      	bcc.n	8008f22 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f52:	e843 2100 	strex	r1, r2, [r3]
 8008f56:	2900      	cmp	r1, #0
 8008f58:	d1f7      	bne.n	8008f4a <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8008f5a:	2320      	movs	r3, #32
 8008f5c:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8008f5e:	2003      	movs	r0, #3
 8008f60:	e7d7      	b.n	8008f12 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f62:	69d3      	ldr	r3, [r2, #28]
 8008f64:	025b      	lsls	r3, r3, #9
 8008f66:	d4cc      	bmi.n	8008f02 <UART_CheckIdleState+0x1e>
 8008f68:	e00d      	b.n	8008f86 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	0750      	lsls	r0, r2, #29
 8008f6e:	d507      	bpl.n	8008f80 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f70:	69da      	ldr	r2, [r3, #28]
 8008f72:	0711      	lsls	r1, r2, #28
 8008f74:	f100 8083 	bmi.w	800907e <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f78:	69da      	ldr	r2, [r3, #28]
 8008f7a:	0512      	lsls	r2, r2, #20
 8008f7c:	f100 80ad 	bmi.w	80090da <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	025b      	lsls	r3, r3, #9
 8008f84:	d4bd      	bmi.n	8008f02 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f86:	f7fc f951 	bl	800522c <HAL_GetTick>
 8008f8a:	1b43      	subs	r3, r0, r5
 8008f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	d3ea      	bcc.n	8008f6a <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	e843 2100 	strex	r1, r2, [r3]
 8008fa0:	2900      	cmp	r1, #0
 8008fa2:	d1f7      	bne.n	8008f94 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa4:	f103 0208 	add.w	r2, r3, #8
 8008fa8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	f103 0008 	add.w	r0, r3, #8
 8008fb4:	e840 2100 	strex	r1, r2, [r0]
 8008fb8:	2900      	cmp	r1, #0
 8008fba:	d1f3      	bne.n	8008fa4 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8008fc2:	2003      	movs	r0, #3
 8008fc4:	e7a5      	b.n	8008f12 <UART_CheckIdleState+0x2e>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fc6:	2208      	movs	r2, #8
 8008fc8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd2:	e843 2100 	strex	r1, r2, [r3]
 8008fd6:	2900      	cmp	r1, #0
 8008fd8:	d1f7      	bne.n	8008fca <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fda:	f103 0208 	add.w	r2, r3, #8
 8008fde:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	f103 0008 	add.w	r0, r3, #8
 8008fea:	e840 2100 	strex	r1, r2, [r0]
 8008fee:	2900      	cmp	r1, #0
 8008ff0:	d1f3      	bne.n	8008fda <UART_CheckIdleState+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008ff4:	2a01      	cmp	r2, #1
 8008ff6:	d00b      	beq.n	8009010 <UART_CheckIdleState+0x12c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008ffa:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ffc:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008ffe:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8009002:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009004:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8009006:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800900a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 800900e:	e79c      	b.n	8008f4a <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009014:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	e843 2100 	strex	r1, r2, [r3]
 800901c:	2900      	cmp	r1, #0
 800901e:	d1f7      	bne.n	8009010 <UART_CheckIdleState+0x12c>
 8009020:	e7ea      	b.n	8008ff8 <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009022:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009026:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800902c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	e843 2100 	strex	r1, r2, [r3]
 8009034:	2900      	cmp	r1, #0
 8009036:	d1f7      	bne.n	8009028 <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	f103 0208 	add.w	r2, r3, #8
 800903c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009040:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	f103 0008 	add.w	r0, r3, #8
 8009048:	e840 2100 	strex	r1, r2, [r0]
 800904c:	2900      	cmp	r1, #0
 800904e:	d1f3      	bne.n	8009038 <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009050:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8009052:	2a01      	cmp	r2, #1
 8009054:	d00a      	beq.n	800906c <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009056:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009058:	2120      	movs	r1, #32
 800905a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800905e:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009060:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8009062:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009066:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 800906a:	e76e      	b.n	8008f4a <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009070:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	e843 2100 	strex	r1, r2, [r3]
 8009078:	2900      	cmp	r1, #0
 800907a:	d1f7      	bne.n	800906c <UART_CheckIdleState+0x188>
 800907c:	e7eb      	b.n	8009056 <UART_CheckIdleState+0x172>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800907e:	2208      	movs	r2, #8
 8009080:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009086:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	e843 2100 	strex	r1, r2, [r3]
 800908e:	2900      	cmp	r1, #0
 8009090:	d1f7      	bne.n	8009082 <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009092:	f103 0208 	add.w	r2, r3, #8
 8009096:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	f103 0008 	add.w	r0, r3, #8
 80090a2:	e840 2100 	strex	r1, r2, [r0]
 80090a6:	2900      	cmp	r1, #0
 80090a8:	d1f3      	bne.n	8009092 <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090aa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80090ac:	2a01      	cmp	r2, #1
 80090ae:	d00b      	beq.n	80090c8 <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80090b2:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090b4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80090b6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80090ba:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090bc:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 80090be:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80090c2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 80090c6:	e765      	b.n	8008f94 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090cc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	e843 2100 	strex	r1, r2, [r3]
 80090d4:	2900      	cmp	r1, #0
 80090d6:	d1f7      	bne.n	80090c8 <UART_CheckIdleState+0x1e4>
 80090d8:	e7ea      	b.n	80090b0 <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090de:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	e843 2100 	strex	r1, r2, [r3]
 80090ec:	2900      	cmp	r1, #0
 80090ee:	d1f7      	bne.n	80090e0 <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f0:	f103 0208 	add.w	r2, r3, #8
 80090f4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090f8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	f103 0008 	add.w	r0, r3, #8
 8009100:	e840 2100 	strex	r1, r2, [r0]
 8009104:	2900      	cmp	r1, #0
 8009106:	d1f3      	bne.n	80090f0 <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009108:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800910a:	2a01      	cmp	r2, #1
 800910c:	d00a      	beq.n	8009124 <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800910e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009110:	2120      	movs	r1, #32
 8009112:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8009116:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009118:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800911a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800911e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8009122:	e737      	b.n	8008f94 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009128:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	e843 2100 	strex	r1, r2, [r3]
 8009130:	2900      	cmp	r1, #0
 8009132:	d1f7      	bne.n	8009124 <UART_CheckIdleState+0x240>
 8009134:	e7eb      	b.n	800910e <UART_CheckIdleState+0x22a>
 8009136:	bf00      	nop

08009138 <HAL_UART_Init>:
  if (huart == NULL)
 8009138:	2800      	cmp	r0, #0
 800913a:	f000 80ec 	beq.w	8009316 <HAL_UART_Init+0x1de>
{
 800913e:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8009140:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8009142:	4604      	mov	r4, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d037      	beq.n	80091b8 <HAL_UART_Init+0x80>
  __HAL_UART_DISABLE(huart);
 8009148:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800914a:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800914c:	2224      	movs	r2, #36	; 0x24
 800914e:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8009150:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009152:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8009154:	f021 0101 	bic.w	r1, r1, #1
 8009158:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800915a:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800915c:	69e1      	ldr	r1, [r4, #28]
 800915e:	432a      	orrs	r2, r5
 8009160:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009162:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009166:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009168:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800916c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800916e:	4302      	orrs	r2, r0
 8009170:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8009176:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009178:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800917c:	4302      	orrs	r2, r0
 800917e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009180:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009182:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009184:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8009188:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800918a:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 800918c:	4886      	ldr	r0, [pc, #536]	; (80093a8 <HAL_UART_Init+0x270>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800918e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009190:	4283      	cmp	r3, r0
 8009192:	d016      	beq.n	80091c2 <HAL_UART_Init+0x8a>
 8009194:	4a85      	ldr	r2, [pc, #532]	; (80093ac <HAL_UART_Init+0x274>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d046      	beq.n	8009228 <HAL_UART_Init+0xf0>
 800919a:	4a85      	ldr	r2, [pc, #532]	; (80093b0 <HAL_UART_Init+0x278>)
 800919c:	4293      	cmp	r3, r2
 800919e:	f000 80a4 	beq.w	80092ea <HAL_UART_Init+0x1b2>
 80091a2:	4a84      	ldr	r2, [pc, #528]	; (80093b4 <HAL_UART_Init+0x27c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d071      	beq.n	800928c <HAL_UART_Init+0x154>
 80091a8:	4a83      	ldr	r2, [pc, #524]	; (80093b8 <HAL_UART_Init+0x280>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d07b      	beq.n	80092a6 <HAL_UART_Init+0x16e>
  huart->RxISR = NULL;
 80091ae:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80091b0:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 80091b4:	2001      	movs	r0, #1
 80091b6:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80091b8:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80091bc:	f7fb fe9e 	bl	8004efc <HAL_UART_MspInit>
 80091c0:	e7c2      	b.n	8009148 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091c2:	4b7e      	ldr	r3, [pc, #504]	; (80093bc <HAL_UART_Init+0x284>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	f003 0303 	and.w	r3, r3, #3
 80091ca:	3b01      	subs	r3, #1
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d93f      	bls.n	8009250 <HAL_UART_Init+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091d0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80091d4:	f000 80c9 	beq.w	800936a <HAL_UART_Init+0x232>
        pclk = HAL_RCC_GetPCLK2Freq();
 80091d8:	f7fe fba8 	bl	800792c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80091dc:	b160      	cbz	r0, 80091f8 <HAL_UART_Init+0xc0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091de:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e0:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091e4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80091e8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ec:	f1a0 0310 	sub.w	r3, r0, #16
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d8dc      	bhi.n	80091ae <HAL_UART_Init+0x76>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	60d8      	str	r0, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 80091fa:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80091fc:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009200:	2a00      	cmp	r2, #0
 8009202:	d16e      	bne.n	80092e2 <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009204:	6823      	ldr	r3, [r4, #0]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800920c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800920e:	689a      	ldr	r2, [r3, #8]
 8009210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009214:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800921c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800921e:	601a      	str	r2, [r3, #0]
}
 8009220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8009224:	f7ff be5e 	b.w	8008ee4 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009228:	4b64      	ldr	r3, [pc, #400]	; (80093bc <HAL_UART_Init+0x284>)
 800922a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009234:	d046      	beq.n	80092c4 <HAL_UART_Init+0x18c>
 8009236:	d84b      	bhi.n	80092d0 <HAL_UART_Init+0x198>
 8009238:	2b00      	cmp	r3, #0
 800923a:	d03d      	beq.n	80092b8 <HAL_UART_Init+0x180>
 800923c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009240:	d1b5      	bne.n	80091ae <HAL_UART_Init+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009242:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009246:	f000 8093 	beq.w	8009370 <HAL_UART_Init+0x238>
        pclk = HAL_RCC_GetSysClockFreq();
 800924a:	f7fe fb1d 	bl	8007888 <HAL_RCC_GetSysClockFreq>
        break;
 800924e:	e7c5      	b.n	80091dc <HAL_UART_Init+0xa4>
 8009250:	4a5b      	ldr	r2, [pc, #364]	; (80093c0 <HAL_UART_Init+0x288>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009252:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009256:	5cd3      	ldrb	r3, [r2, r3]
 8009258:	f000 808d 	beq.w	8009376 <HAL_UART_Init+0x23e>
    switch (clocksource)
 800925c:	2b08      	cmp	r3, #8
 800925e:	d8a6      	bhi.n	80091ae <HAL_UART_Init+0x76>
 8009260:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <HAL_UART_Init+0x130>)
 8009262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009266:	bf00      	nop
 8009268:	080092bf 	.word	0x080092bf
 800926c:	080091d9 	.word	0x080091d9
 8009270:	080092df 	.word	0x080092df
 8009274:	080091af 	.word	0x080091af
 8009278:	0800924b 	.word	0x0800924b
 800927c:	080091af 	.word	0x080091af
 8009280:	080091af 	.word	0x080091af
 8009284:	080091af 	.word	0x080091af
 8009288:	080092cb 	.word	0x080092cb
  UART_GETCLOCKSOURCE(huart, clocksource);
 800928c:	4b4b      	ldr	r3, [pc, #300]	; (80093bc <HAL_UART_Init+0x284>)
 800928e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009290:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009298:	d014      	beq.n	80092c4 <HAL_UART_Init+0x18c>
 800929a:	d838      	bhi.n	800930e <HAL_UART_Init+0x1d6>
 800929c:	b163      	cbz	r3, 80092b8 <HAL_UART_Init+0x180>
 800929e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092a2:	d0ce      	beq.n	8009242 <HAL_UART_Init+0x10a>
 80092a4:	e783      	b.n	80091ae <HAL_UART_Init+0x76>
 80092a6:	4b45      	ldr	r3, [pc, #276]	; (80093bc <HAL_UART_Init+0x284>)
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80092ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092b2:	d007      	beq.n	80092c4 <HAL_UART_Init+0x18c>
 80092b4:	d835      	bhi.n	8009322 <HAL_UART_Init+0x1ea>
 80092b6:	bb83      	cbnz	r3, 800931a <HAL_UART_Init+0x1e2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092b8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80092bc:	d035      	beq.n	800932a <HAL_UART_Init+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80092be:	f7fe fb1d 	bl	80078fc <HAL_RCC_GetPCLK1Freq>
        break;
 80092c2:	e78b      	b.n	80091dc <HAL_UART_Init+0xa4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092c4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80092c8:	d04a      	beq.n	8009360 <HAL_UART_Init+0x228>
        pclk = (uint32_t) LSE_VALUE;
 80092ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80092ce:	e786      	b.n	80091de <HAL_UART_Init+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80092d4:	f47f af6b 	bne.w	80091ae <HAL_UART_Init+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092d8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80092dc:	d043      	beq.n	8009366 <HAL_UART_Init+0x22e>
    switch (clocksource)
 80092de:	4839      	ldr	r0, [pc, #228]	; (80093c4 <HAL_UART_Init+0x28c>)
 80092e0:	e77d      	b.n	80091de <HAL_UART_Init+0xa6>
    UART_AdvFeatureConfig(huart);
 80092e2:	4620      	mov	r0, r4
 80092e4:	f7ff fda6 	bl	8008e34 <UART_AdvFeatureConfig>
 80092e8:	e78c      	b.n	8009204 <HAL_UART_Init+0xcc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ea:	4b34      	ldr	r3, [pc, #208]	; (80093bc <HAL_UART_Init+0x284>)
 80092ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ee:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80092f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80092f6:	d0e5      	beq.n	80092c4 <HAL_UART_Init+0x18c>
 80092f8:	d805      	bhi.n	8009306 <HAL_UART_Init+0x1ce>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0dc      	beq.n	80092b8 <HAL_UART_Init+0x180>
 80092fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009302:	d09e      	beq.n	8009242 <HAL_UART_Init+0x10a>
 8009304:	e753      	b.n	80091ae <HAL_UART_Init+0x76>
 8009306:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800930a:	d0e5      	beq.n	80092d8 <HAL_UART_Init+0x1a0>
 800930c:	e74f      	b.n	80091ae <HAL_UART_Init+0x76>
 800930e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009312:	d0e1      	beq.n	80092d8 <HAL_UART_Init+0x1a0>
 8009314:	e74b      	b.n	80091ae <HAL_UART_Init+0x76>
}
 8009316:	2001      	movs	r0, #1
 8009318:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800931a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800931e:	d090      	beq.n	8009242 <HAL_UART_Init+0x10a>
 8009320:	e745      	b.n	80091ae <HAL_UART_Init+0x76>
 8009322:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009326:	d0d7      	beq.n	80092d8 <HAL_UART_Init+0x1a0>
 8009328:	e741      	b.n	80091ae <HAL_UART_Init+0x76>
        pclk = HAL_RCC_GetPCLK1Freq();
 800932a:	f7fe fae7 	bl	80078fc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800932e:	2800      	cmp	r0, #0
 8009330:	f43f af62 	beq.w	80091f8 <HAL_UART_Init+0xc0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009334:	0043      	lsls	r3, r0, #1
 8009336:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009338:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800933c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009340:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009344:	f1a3 0210 	sub.w	r2, r3, #16
 8009348:	428a      	cmp	r2, r1
 800934a:	f63f af30 	bhi.w	80091ae <HAL_UART_Init+0x76>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800934e:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009352:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009354:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009356:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800935a:	4313      	orrs	r3, r2
 800935c:	60cb      	str	r3, [r1, #12]
  return ret;
 800935e:	e74b      	b.n	80091f8 <HAL_UART_Init+0xc0>
    switch (clocksource)
 8009360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009364:	e7e7      	b.n	8009336 <HAL_UART_Init+0x1fe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009366:	4b18      	ldr	r3, [pc, #96]	; (80093c8 <HAL_UART_Init+0x290>)
 8009368:	e7e5      	b.n	8009336 <HAL_UART_Init+0x1fe>
        pclk = HAL_RCC_GetPCLK2Freq();
 800936a:	f7fe fadf 	bl	800792c <HAL_RCC_GetPCLK2Freq>
        break;
 800936e:	e7de      	b.n	800932e <HAL_UART_Init+0x1f6>
        pclk = HAL_RCC_GetSysClockFreq();
 8009370:	f7fe fa8a 	bl	8007888 <HAL_RCC_GetSysClockFreq>
        break;
 8009374:	e7db      	b.n	800932e <HAL_UART_Init+0x1f6>
    switch (clocksource)
 8009376:	2b08      	cmp	r3, #8
 8009378:	f63f af19 	bhi.w	80091ae <HAL_UART_Init+0x76>
 800937c:	a201      	add	r2, pc, #4	; (adr r2, 8009384 <HAL_UART_Init+0x24c>)
 800937e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009382:	bf00      	nop
 8009384:	0800932b 	.word	0x0800932b
 8009388:	0800936b 	.word	0x0800936b
 800938c:	08009367 	.word	0x08009367
 8009390:	080091af 	.word	0x080091af
 8009394:	08009371 	.word	0x08009371
 8009398:	080091af 	.word	0x080091af
 800939c:	080091af 	.word	0x080091af
 80093a0:	080091af 	.word	0x080091af
 80093a4:	08009361 	.word	0x08009361
 80093a8:	40013800 	.word	0x40013800
 80093ac:	40004400 	.word	0x40004400
 80093b0:	40004800 	.word	0x40004800
 80093b4:	40004c00 	.word	0x40004c00
 80093b8:	40005000 	.word	0x40005000
 80093bc:	40021000 	.word	0x40021000
 80093c0:	0800de14 	.word	0x0800de14
 80093c4:	007a1200 	.word	0x007a1200
 80093c8:	00f42400 	.word	0x00f42400

080093cc <UART_Start_Receive_IT>:
{
 80093cc:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 80093ce:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 80093d0:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 80093d2:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 80093d4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 80093d8:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80093dc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80093e0:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 80093e2:	d044      	beq.n	800946e <UART_Start_Receive_IT+0xa2>
 80093e4:	2c00      	cmp	r4, #0
 80093e6:	d03c      	beq.n	8009462 <UART_Start_Receive_IT+0x96>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e8:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093ea:	2122      	movs	r1, #34	; 0x22
 80093ec:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ee:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  UART_MASK_COMPUTATION(huart);
 80093f2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093f6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fa:	f102 0308 	add.w	r3, r2, #8
 80093fe:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009402:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009406:	f102 0408 	add.w	r4, r2, #8
 800940a:	e844 3100 	strex	r1, r3, [r4]
 800940e:	2900      	cmp	r1, #0
 8009410:	d1f3      	bne.n	80093fa <UART_Start_Receive_IT+0x2e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009412:	6883      	ldr	r3, [r0, #8]
 8009414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009418:	6903      	ldr	r3, [r0, #16]
 800941a:	d00e      	beq.n	800943a <UART_Start_Receive_IT+0x6e>
    huart->RxISR = UART_RxISR_8BIT;
 800941c:	491d      	ldr	r1, [pc, #116]	; (8009494 <UART_Start_Receive_IT+0xc8>)
 800941e:	6681      	str	r1, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009420:	b173      	cbz	r3, 8009440 <UART_Start_Receive_IT+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009422:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009426:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	e842 3100 	strex	r1, r3, [r2]
 800942e:	2900      	cmp	r1, #0
 8009430:	d1f7      	bne.n	8009422 <UART_Start_Receive_IT+0x56>
}
 8009432:	2000      	movs	r0, #0
 8009434:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009438:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800943a:	b9fb      	cbnz	r3, 800947c <UART_Start_Receive_IT+0xb0>
 800943c:	4b16      	ldr	r3, [pc, #88]	; (8009498 <UART_Start_Receive_IT+0xcc>)
 800943e:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009440:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009444:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	e842 3100 	strex	r1, r3, [r2]
 800944c:	2900      	cmp	r1, #0
 800944e:	d0f0      	beq.n	8009432 <UART_Start_Receive_IT+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	e852 3f00 	ldrex	r3, [r2]
 8009454:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	e842 3100 	strex	r1, r3, [r2]
 800945c:	2900      	cmp	r1, #0
 800945e:	d1ef      	bne.n	8009440 <UART_Start_Receive_IT+0x74>
 8009460:	e7e7      	b.n	8009432 <UART_Start_Receive_IT+0x66>
  UART_MASK_COMPUTATION(huart);
 8009462:	6903      	ldr	r3, [r0, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	bf0c      	ite	eq
 8009468:	23ff      	moveq	r3, #255	; 0xff
 800946a:	237f      	movne	r3, #127	; 0x7f
 800946c:	e7bc      	b.n	80093e8 <UART_Start_Receive_IT+0x1c>
 800946e:	6902      	ldr	r2, [r0, #16]
 8009470:	2a00      	cmp	r2, #0
 8009472:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009476:	bf18      	it	ne
 8009478:	23ff      	movne	r3, #255	; 0xff
 800947a:	e7b5      	b.n	80093e8 <UART_Start_Receive_IT+0x1c>
    huart->RxISR = UART_RxISR_8BIT;
 800947c:	4b05      	ldr	r3, [pc, #20]	; (8009494 <UART_Start_Receive_IT+0xc8>)
 800947e:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009484:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009488:	e842 3100 	strex	r1, r3, [r2]
 800948c:	2900      	cmp	r1, #0
 800948e:	d1c8      	bne.n	8009422 <UART_Start_Receive_IT+0x56>
 8009490:	e7cf      	b.n	8009432 <UART_Start_Receive_IT+0x66>
 8009492:	bf00      	nop
 8009494:	08008de5 	.word	0x08008de5
 8009498:	08008d95 	.word	0x08008d95

0800949c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800949c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80094a0:	2b20      	cmp	r3, #32
 80094a2:	d115      	bne.n	80094d0 <HAL_UART_Receive_IT+0x34>
    if ((pData == NULL) || (Size == 0U))
 80094a4:	b101      	cbz	r1, 80094a8 <HAL_UART_Receive_IT+0xc>
 80094a6:	b90a      	cbnz	r2, 80094ac <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 80094a8:	2001      	movs	r0, #1
}
 80094aa:	4770      	bx	lr
{
 80094ac:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ae:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094b0:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b2:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094b4:	6863      	ldr	r3, [r4, #4]
 80094b6:	021b      	lsls	r3, r3, #8
 80094b8:	d507      	bpl.n	80094ca <HAL_UART_Receive_IT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	e844 3500 	strex	r5, r3, [r4]
 80094c6:	2d00      	cmp	r5, #0
 80094c8:	d1f7      	bne.n	80094ba <HAL_UART_Receive_IT+0x1e>
}
 80094ca:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80094cc:	f7ff bf7e 	b.w	80093cc <UART_Start_Receive_IT>
    return HAL_BUSY;
 80094d0:	2002      	movs	r0, #2
 80094d2:	4770      	bx	lr

080094d4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop

080094d8 <atan2>:
 80094d8:	f000 ba36 	b.w	8009948 <__ieee754_atan2>
 80094dc:	0000      	movs	r0, r0
	...

080094e0 <cos>:
 80094e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094e2:	ec53 2b10 	vmov	r2, r3, d0
 80094e6:	4826      	ldr	r0, [pc, #152]	; (8009580 <cos+0xa0>)
 80094e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80094ec:	4281      	cmp	r1, r0
 80094ee:	dc06      	bgt.n	80094fe <cos+0x1e>
 80094f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009578 <cos+0x98>
 80094f4:	b005      	add	sp, #20
 80094f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80094fa:	f000 b89d 	b.w	8009638 <__kernel_cos>
 80094fe:	4821      	ldr	r0, [pc, #132]	; (8009584 <cos+0xa4>)
 8009500:	4281      	cmp	r1, r0
 8009502:	dd09      	ble.n	8009518 <cos+0x38>
 8009504:	ee10 0a10 	vmov	r0, s0
 8009508:	4619      	mov	r1, r3
 800950a:	f7f6 febd 	bl	8000288 <__aeabi_dsub>
 800950e:	ec41 0b10 	vmov	d0, r0, r1
 8009512:	b005      	add	sp, #20
 8009514:	f85d fb04 	ldr.w	pc, [sp], #4
 8009518:	4668      	mov	r0, sp
 800951a:	f000 fadd 	bl	8009ad8 <__ieee754_rem_pio2>
 800951e:	f000 0003 	and.w	r0, r0, #3
 8009522:	2801      	cmp	r0, #1
 8009524:	d00b      	beq.n	800953e <cos+0x5e>
 8009526:	2802      	cmp	r0, #2
 8009528:	d016      	beq.n	8009558 <cos+0x78>
 800952a:	b9e0      	cbnz	r0, 8009566 <cos+0x86>
 800952c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009530:	ed9d 0b00 	vldr	d0, [sp]
 8009534:	f000 f880 	bl	8009638 <__kernel_cos>
 8009538:	ec51 0b10 	vmov	r0, r1, d0
 800953c:	e7e7      	b.n	800950e <cos+0x2e>
 800953e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009542:	ed9d 0b00 	vldr	d0, [sp]
 8009546:	f000 f93f 	bl	80097c8 <__kernel_sin>
 800954a:	ec53 2b10 	vmov	r2, r3, d0
 800954e:	ee10 0a10 	vmov	r0, s0
 8009552:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009556:	e7da      	b.n	800950e <cos+0x2e>
 8009558:	ed9d 1b02 	vldr	d1, [sp, #8]
 800955c:	ed9d 0b00 	vldr	d0, [sp]
 8009560:	f000 f86a 	bl	8009638 <__kernel_cos>
 8009564:	e7f1      	b.n	800954a <cos+0x6a>
 8009566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800956a:	ed9d 0b00 	vldr	d0, [sp]
 800956e:	2001      	movs	r0, #1
 8009570:	f000 f92a 	bl	80097c8 <__kernel_sin>
 8009574:	e7e0      	b.n	8009538 <cos+0x58>
 8009576:	bf00      	nop
	...
 8009580:	3fe921fb 	.word	0x3fe921fb
 8009584:	7fefffff 	.word	0x7fefffff

08009588 <sin>:
 8009588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800958a:	ec53 2b10 	vmov	r2, r3, d0
 800958e:	4828      	ldr	r0, [pc, #160]	; (8009630 <sin+0xa8>)
 8009590:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009594:	4281      	cmp	r1, r0
 8009596:	dc07      	bgt.n	80095a8 <sin+0x20>
 8009598:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009628 <sin+0xa0>
 800959c:	2000      	movs	r0, #0
 800959e:	b005      	add	sp, #20
 80095a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095a4:	f000 b910 	b.w	80097c8 <__kernel_sin>
 80095a8:	4822      	ldr	r0, [pc, #136]	; (8009634 <sin+0xac>)
 80095aa:	4281      	cmp	r1, r0
 80095ac:	dd09      	ble.n	80095c2 <sin+0x3a>
 80095ae:	ee10 0a10 	vmov	r0, s0
 80095b2:	4619      	mov	r1, r3
 80095b4:	f7f6 fe68 	bl	8000288 <__aeabi_dsub>
 80095b8:	ec41 0b10 	vmov	d0, r0, r1
 80095bc:	b005      	add	sp, #20
 80095be:	f85d fb04 	ldr.w	pc, [sp], #4
 80095c2:	4668      	mov	r0, sp
 80095c4:	f000 fa88 	bl	8009ad8 <__ieee754_rem_pio2>
 80095c8:	f000 0003 	and.w	r0, r0, #3
 80095cc:	2801      	cmp	r0, #1
 80095ce:	d00c      	beq.n	80095ea <sin+0x62>
 80095d0:	2802      	cmp	r0, #2
 80095d2:	d011      	beq.n	80095f8 <sin+0x70>
 80095d4:	b9f0      	cbnz	r0, 8009614 <sin+0x8c>
 80095d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095da:	ed9d 0b00 	vldr	d0, [sp]
 80095de:	2001      	movs	r0, #1
 80095e0:	f000 f8f2 	bl	80097c8 <__kernel_sin>
 80095e4:	ec51 0b10 	vmov	r0, r1, d0
 80095e8:	e7e6      	b.n	80095b8 <sin+0x30>
 80095ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095ee:	ed9d 0b00 	vldr	d0, [sp]
 80095f2:	f000 f821 	bl	8009638 <__kernel_cos>
 80095f6:	e7f5      	b.n	80095e4 <sin+0x5c>
 80095f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095fc:	ed9d 0b00 	vldr	d0, [sp]
 8009600:	2001      	movs	r0, #1
 8009602:	f000 f8e1 	bl	80097c8 <__kernel_sin>
 8009606:	ec53 2b10 	vmov	r2, r3, d0
 800960a:	ee10 0a10 	vmov	r0, s0
 800960e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009612:	e7d1      	b.n	80095b8 <sin+0x30>
 8009614:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009618:	ed9d 0b00 	vldr	d0, [sp]
 800961c:	f000 f80c 	bl	8009638 <__kernel_cos>
 8009620:	e7f1      	b.n	8009606 <sin+0x7e>
 8009622:	bf00      	nop
 8009624:	f3af 8000 	nop.w
	...
 8009630:	3fe921fb 	.word	0x3fe921fb
 8009634:	7fefffff 	.word	0x7fefffff

08009638 <__kernel_cos>:
 8009638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	ec57 6b10 	vmov	r6, r7, d0
 8009640:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009644:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009648:	ed8d 1b00 	vstr	d1, [sp]
 800964c:	da07      	bge.n	800965e <__kernel_cos+0x26>
 800964e:	ee10 0a10 	vmov	r0, s0
 8009652:	4639      	mov	r1, r7
 8009654:	f7f7 fa80 	bl	8000b58 <__aeabi_d2iz>
 8009658:	2800      	cmp	r0, #0
 800965a:	f000 8088 	beq.w	800976e <__kernel_cos+0x136>
 800965e:	4632      	mov	r2, r6
 8009660:	463b      	mov	r3, r7
 8009662:	4630      	mov	r0, r6
 8009664:	4639      	mov	r1, r7
 8009666:	f7f6 ffc7 	bl	80005f8 <__aeabi_dmul>
 800966a:	4b51      	ldr	r3, [pc, #324]	; (80097b0 <__kernel_cos+0x178>)
 800966c:	2200      	movs	r2, #0
 800966e:	4604      	mov	r4, r0
 8009670:	460d      	mov	r5, r1
 8009672:	f7f6 ffc1 	bl	80005f8 <__aeabi_dmul>
 8009676:	a340      	add	r3, pc, #256	; (adr r3, 8009778 <__kernel_cos+0x140>)
 8009678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967c:	4682      	mov	sl, r0
 800967e:	468b      	mov	fp, r1
 8009680:	4620      	mov	r0, r4
 8009682:	4629      	mov	r1, r5
 8009684:	f7f6 ffb8 	bl	80005f8 <__aeabi_dmul>
 8009688:	a33d      	add	r3, pc, #244	; (adr r3, 8009780 <__kernel_cos+0x148>)
 800968a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968e:	f7f6 fdfd 	bl	800028c <__adddf3>
 8009692:	4622      	mov	r2, r4
 8009694:	462b      	mov	r3, r5
 8009696:	f7f6 ffaf 	bl	80005f8 <__aeabi_dmul>
 800969a:	a33b      	add	r3, pc, #236	; (adr r3, 8009788 <__kernel_cos+0x150>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	f7f6 fdf2 	bl	8000288 <__aeabi_dsub>
 80096a4:	4622      	mov	r2, r4
 80096a6:	462b      	mov	r3, r5
 80096a8:	f7f6 ffa6 	bl	80005f8 <__aeabi_dmul>
 80096ac:	a338      	add	r3, pc, #224	; (adr r3, 8009790 <__kernel_cos+0x158>)
 80096ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b2:	f7f6 fdeb 	bl	800028c <__adddf3>
 80096b6:	4622      	mov	r2, r4
 80096b8:	462b      	mov	r3, r5
 80096ba:	f7f6 ff9d 	bl	80005f8 <__aeabi_dmul>
 80096be:	a336      	add	r3, pc, #216	; (adr r3, 8009798 <__kernel_cos+0x160>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f7f6 fde0 	bl	8000288 <__aeabi_dsub>
 80096c8:	4622      	mov	r2, r4
 80096ca:	462b      	mov	r3, r5
 80096cc:	f7f6 ff94 	bl	80005f8 <__aeabi_dmul>
 80096d0:	a333      	add	r3, pc, #204	; (adr r3, 80097a0 <__kernel_cos+0x168>)
 80096d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d6:	f7f6 fdd9 	bl	800028c <__adddf3>
 80096da:	4622      	mov	r2, r4
 80096dc:	462b      	mov	r3, r5
 80096de:	f7f6 ff8b 	bl	80005f8 <__aeabi_dmul>
 80096e2:	4622      	mov	r2, r4
 80096e4:	462b      	mov	r3, r5
 80096e6:	f7f6 ff87 	bl	80005f8 <__aeabi_dmul>
 80096ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ee:	4604      	mov	r4, r0
 80096f0:	460d      	mov	r5, r1
 80096f2:	4630      	mov	r0, r6
 80096f4:	4639      	mov	r1, r7
 80096f6:	f7f6 ff7f 	bl	80005f8 <__aeabi_dmul>
 80096fa:	460b      	mov	r3, r1
 80096fc:	4602      	mov	r2, r0
 80096fe:	4629      	mov	r1, r5
 8009700:	4620      	mov	r0, r4
 8009702:	f7f6 fdc1 	bl	8000288 <__aeabi_dsub>
 8009706:	4b2b      	ldr	r3, [pc, #172]	; (80097b4 <__kernel_cos+0x17c>)
 8009708:	4598      	cmp	r8, r3
 800970a:	4606      	mov	r6, r0
 800970c:	460f      	mov	r7, r1
 800970e:	dc10      	bgt.n	8009732 <__kernel_cos+0xfa>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4650      	mov	r0, sl
 8009716:	4659      	mov	r1, fp
 8009718:	f7f6 fdb6 	bl	8000288 <__aeabi_dsub>
 800971c:	460b      	mov	r3, r1
 800971e:	4926      	ldr	r1, [pc, #152]	; (80097b8 <__kernel_cos+0x180>)
 8009720:	4602      	mov	r2, r0
 8009722:	2000      	movs	r0, #0
 8009724:	f7f6 fdb0 	bl	8000288 <__aeabi_dsub>
 8009728:	ec41 0b10 	vmov	d0, r0, r1
 800972c:	b003      	add	sp, #12
 800972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009732:	4b22      	ldr	r3, [pc, #136]	; (80097bc <__kernel_cos+0x184>)
 8009734:	4920      	ldr	r1, [pc, #128]	; (80097b8 <__kernel_cos+0x180>)
 8009736:	4598      	cmp	r8, r3
 8009738:	bfcc      	ite	gt
 800973a:	4d21      	ldrgt	r5, [pc, #132]	; (80097c0 <__kernel_cos+0x188>)
 800973c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009740:	2400      	movs	r4, #0
 8009742:	4622      	mov	r2, r4
 8009744:	462b      	mov	r3, r5
 8009746:	2000      	movs	r0, #0
 8009748:	f7f6 fd9e 	bl	8000288 <__aeabi_dsub>
 800974c:	4622      	mov	r2, r4
 800974e:	4680      	mov	r8, r0
 8009750:	4689      	mov	r9, r1
 8009752:	462b      	mov	r3, r5
 8009754:	4650      	mov	r0, sl
 8009756:	4659      	mov	r1, fp
 8009758:	f7f6 fd96 	bl	8000288 <__aeabi_dsub>
 800975c:	4632      	mov	r2, r6
 800975e:	463b      	mov	r3, r7
 8009760:	f7f6 fd92 	bl	8000288 <__aeabi_dsub>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4640      	mov	r0, r8
 800976a:	4649      	mov	r1, r9
 800976c:	e7da      	b.n	8009724 <__kernel_cos+0xec>
 800976e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80097a8 <__kernel_cos+0x170>
 8009772:	e7db      	b.n	800972c <__kernel_cos+0xf4>
 8009774:	f3af 8000 	nop.w
 8009778:	be8838d4 	.word	0xbe8838d4
 800977c:	bda8fae9 	.word	0xbda8fae9
 8009780:	bdb4b1c4 	.word	0xbdb4b1c4
 8009784:	3e21ee9e 	.word	0x3e21ee9e
 8009788:	809c52ad 	.word	0x809c52ad
 800978c:	3e927e4f 	.word	0x3e927e4f
 8009790:	19cb1590 	.word	0x19cb1590
 8009794:	3efa01a0 	.word	0x3efa01a0
 8009798:	16c15177 	.word	0x16c15177
 800979c:	3f56c16c 	.word	0x3f56c16c
 80097a0:	5555554c 	.word	0x5555554c
 80097a4:	3fa55555 	.word	0x3fa55555
 80097a8:	00000000 	.word	0x00000000
 80097ac:	3ff00000 	.word	0x3ff00000
 80097b0:	3fe00000 	.word	0x3fe00000
 80097b4:	3fd33332 	.word	0x3fd33332
 80097b8:	3ff00000 	.word	0x3ff00000
 80097bc:	3fe90000 	.word	0x3fe90000
 80097c0:	3fd20000 	.word	0x3fd20000
 80097c4:	00000000 	.word	0x00000000

080097c8 <__kernel_sin>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	ed2d 8b04 	vpush	{d8-d9}
 80097d0:	eeb0 8a41 	vmov.f32	s16, s2
 80097d4:	eef0 8a61 	vmov.f32	s17, s3
 80097d8:	ec55 4b10 	vmov	r4, r5, d0
 80097dc:	b083      	sub	sp, #12
 80097de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80097e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80097e6:	9001      	str	r0, [sp, #4]
 80097e8:	da06      	bge.n	80097f8 <__kernel_sin+0x30>
 80097ea:	ee10 0a10 	vmov	r0, s0
 80097ee:	4629      	mov	r1, r5
 80097f0:	f7f7 f9b2 	bl	8000b58 <__aeabi_d2iz>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d051      	beq.n	800989c <__kernel_sin+0xd4>
 80097f8:	4622      	mov	r2, r4
 80097fa:	462b      	mov	r3, r5
 80097fc:	4620      	mov	r0, r4
 80097fe:	4629      	mov	r1, r5
 8009800:	f7f6 fefa 	bl	80005f8 <__aeabi_dmul>
 8009804:	4682      	mov	sl, r0
 8009806:	468b      	mov	fp, r1
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4620      	mov	r0, r4
 800980e:	4629      	mov	r1, r5
 8009810:	f7f6 fef2 	bl	80005f8 <__aeabi_dmul>
 8009814:	a341      	add	r3, pc, #260	; (adr r3, 800991c <__kernel_sin+0x154>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	4680      	mov	r8, r0
 800981c:	4689      	mov	r9, r1
 800981e:	4650      	mov	r0, sl
 8009820:	4659      	mov	r1, fp
 8009822:	f7f6 fee9 	bl	80005f8 <__aeabi_dmul>
 8009826:	a33f      	add	r3, pc, #252	; (adr r3, 8009924 <__kernel_sin+0x15c>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f7f6 fd2c 	bl	8000288 <__aeabi_dsub>
 8009830:	4652      	mov	r2, sl
 8009832:	465b      	mov	r3, fp
 8009834:	f7f6 fee0 	bl	80005f8 <__aeabi_dmul>
 8009838:	a33c      	add	r3, pc, #240	; (adr r3, 800992c <__kernel_sin+0x164>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 fd25 	bl	800028c <__adddf3>
 8009842:	4652      	mov	r2, sl
 8009844:	465b      	mov	r3, fp
 8009846:	f7f6 fed7 	bl	80005f8 <__aeabi_dmul>
 800984a:	a33a      	add	r3, pc, #232	; (adr r3, 8009934 <__kernel_sin+0x16c>)
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f7f6 fd1a 	bl	8000288 <__aeabi_dsub>
 8009854:	4652      	mov	r2, sl
 8009856:	465b      	mov	r3, fp
 8009858:	f7f6 fece 	bl	80005f8 <__aeabi_dmul>
 800985c:	a337      	add	r3, pc, #220	; (adr r3, 800993c <__kernel_sin+0x174>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fd13 	bl	800028c <__adddf3>
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	4606      	mov	r6, r0
 800986a:	460f      	mov	r7, r1
 800986c:	b9eb      	cbnz	r3, 80098aa <__kernel_sin+0xe2>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4650      	mov	r0, sl
 8009874:	4659      	mov	r1, fp
 8009876:	f7f6 febf 	bl	80005f8 <__aeabi_dmul>
 800987a:	a325      	add	r3, pc, #148	; (adr r3, 8009910 <__kernel_sin+0x148>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	f7f6 fd02 	bl	8000288 <__aeabi_dsub>
 8009884:	4642      	mov	r2, r8
 8009886:	464b      	mov	r3, r9
 8009888:	f7f6 feb6 	bl	80005f8 <__aeabi_dmul>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	4620      	mov	r0, r4
 8009892:	4629      	mov	r1, r5
 8009894:	f7f6 fcfa 	bl	800028c <__adddf3>
 8009898:	4604      	mov	r4, r0
 800989a:	460d      	mov	r5, r1
 800989c:	ec45 4b10 	vmov	d0, r4, r5
 80098a0:	b003      	add	sp, #12
 80098a2:	ecbd 8b04 	vpop	{d8-d9}
 80098a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098aa:	4b1b      	ldr	r3, [pc, #108]	; (8009918 <__kernel_sin+0x150>)
 80098ac:	ec51 0b18 	vmov	r0, r1, d8
 80098b0:	2200      	movs	r2, #0
 80098b2:	f7f6 fea1 	bl	80005f8 <__aeabi_dmul>
 80098b6:	4632      	mov	r2, r6
 80098b8:	ec41 0b19 	vmov	d9, r0, r1
 80098bc:	463b      	mov	r3, r7
 80098be:	4640      	mov	r0, r8
 80098c0:	4649      	mov	r1, r9
 80098c2:	f7f6 fe99 	bl	80005f8 <__aeabi_dmul>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	ec51 0b19 	vmov	r0, r1, d9
 80098ce:	f7f6 fcdb 	bl	8000288 <__aeabi_dsub>
 80098d2:	4652      	mov	r2, sl
 80098d4:	465b      	mov	r3, fp
 80098d6:	f7f6 fe8f 	bl	80005f8 <__aeabi_dmul>
 80098da:	ec53 2b18 	vmov	r2, r3, d8
 80098de:	f7f6 fcd3 	bl	8000288 <__aeabi_dsub>
 80098e2:	a30b      	add	r3, pc, #44	; (adr r3, 8009910 <__kernel_sin+0x148>)
 80098e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e8:	4606      	mov	r6, r0
 80098ea:	460f      	mov	r7, r1
 80098ec:	4640      	mov	r0, r8
 80098ee:	4649      	mov	r1, r9
 80098f0:	f7f6 fe82 	bl	80005f8 <__aeabi_dmul>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4630      	mov	r0, r6
 80098fa:	4639      	mov	r1, r7
 80098fc:	f7f6 fcc6 	bl	800028c <__adddf3>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4620      	mov	r0, r4
 8009906:	4629      	mov	r1, r5
 8009908:	f7f6 fcbe 	bl	8000288 <__aeabi_dsub>
 800990c:	e7c4      	b.n	8009898 <__kernel_sin+0xd0>
 800990e:	bf00      	nop
 8009910:	55555549 	.word	0x55555549
 8009914:	3fc55555 	.word	0x3fc55555
 8009918:	3fe00000 	.word	0x3fe00000
 800991c:	5acfd57c 	.word	0x5acfd57c
 8009920:	3de5d93a 	.word	0x3de5d93a
 8009924:	8a2b9ceb 	.word	0x8a2b9ceb
 8009928:	3e5ae5e6 	.word	0x3e5ae5e6
 800992c:	57b1fe7d 	.word	0x57b1fe7d
 8009930:	3ec71de3 	.word	0x3ec71de3
 8009934:	19c161d5 	.word	0x19c161d5
 8009938:	3f2a01a0 	.word	0x3f2a01a0
 800993c:	1110f8a6 	.word	0x1110f8a6
 8009940:	3f811111 	.word	0x3f811111
 8009944:	00000000 	.word	0x00000000

08009948 <__ieee754_atan2>:
 8009948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800994c:	ec57 6b11 	vmov	r6, r7, d1
 8009950:	4273      	negs	r3, r6
 8009952:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009ad0 <__ieee754_atan2+0x188>
 8009956:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800995a:	4333      	orrs	r3, r6
 800995c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009960:	4543      	cmp	r3, r8
 8009962:	ec51 0b10 	vmov	r0, r1, d0
 8009966:	ee11 5a10 	vmov	r5, s2
 800996a:	d80a      	bhi.n	8009982 <__ieee754_atan2+0x3a>
 800996c:	4244      	negs	r4, r0
 800996e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009972:	4304      	orrs	r4, r0
 8009974:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009978:	4544      	cmp	r4, r8
 800997a:	ee10 9a10 	vmov	r9, s0
 800997e:	468e      	mov	lr, r1
 8009980:	d907      	bls.n	8009992 <__ieee754_atan2+0x4a>
 8009982:	4632      	mov	r2, r6
 8009984:	463b      	mov	r3, r7
 8009986:	f7f6 fc81 	bl	800028c <__adddf3>
 800998a:	ec41 0b10 	vmov	d0, r0, r1
 800998e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009992:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009996:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800999a:	4334      	orrs	r4, r6
 800999c:	d103      	bne.n	80099a6 <__ieee754_atan2+0x5e>
 800999e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099a2:	f000 baa1 	b.w	8009ee8 <atan>
 80099a6:	17bc      	asrs	r4, r7, #30
 80099a8:	f004 0402 	and.w	r4, r4, #2
 80099ac:	ea53 0909 	orrs.w	r9, r3, r9
 80099b0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80099b4:	d107      	bne.n	80099c6 <__ieee754_atan2+0x7e>
 80099b6:	2c02      	cmp	r4, #2
 80099b8:	d05f      	beq.n	8009a7a <__ieee754_atan2+0x132>
 80099ba:	2c03      	cmp	r4, #3
 80099bc:	d1e5      	bne.n	800998a <__ieee754_atan2+0x42>
 80099be:	a140      	add	r1, pc, #256	; (adr r1, 8009ac0 <__ieee754_atan2+0x178>)
 80099c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c4:	e7e1      	b.n	800998a <__ieee754_atan2+0x42>
 80099c6:	4315      	orrs	r5, r2
 80099c8:	d106      	bne.n	80099d8 <__ieee754_atan2+0x90>
 80099ca:	f1be 0f00 	cmp.w	lr, #0
 80099ce:	da5f      	bge.n	8009a90 <__ieee754_atan2+0x148>
 80099d0:	a13d      	add	r1, pc, #244	; (adr r1, 8009ac8 <__ieee754_atan2+0x180>)
 80099d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d6:	e7d8      	b.n	800998a <__ieee754_atan2+0x42>
 80099d8:	4542      	cmp	r2, r8
 80099da:	d10f      	bne.n	80099fc <__ieee754_atan2+0xb4>
 80099dc:	4293      	cmp	r3, r2
 80099de:	f104 34ff 	add.w	r4, r4, #4294967295
 80099e2:	d107      	bne.n	80099f4 <__ieee754_atan2+0xac>
 80099e4:	2c02      	cmp	r4, #2
 80099e6:	d84c      	bhi.n	8009a82 <__ieee754_atan2+0x13a>
 80099e8:	4b33      	ldr	r3, [pc, #204]	; (8009ab8 <__ieee754_atan2+0x170>)
 80099ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099f2:	e7ca      	b.n	800998a <__ieee754_atan2+0x42>
 80099f4:	2c02      	cmp	r4, #2
 80099f6:	d848      	bhi.n	8009a8a <__ieee754_atan2+0x142>
 80099f8:	4b30      	ldr	r3, [pc, #192]	; (8009abc <__ieee754_atan2+0x174>)
 80099fa:	e7f6      	b.n	80099ea <__ieee754_atan2+0xa2>
 80099fc:	4543      	cmp	r3, r8
 80099fe:	d0e4      	beq.n	80099ca <__ieee754_atan2+0x82>
 8009a00:	1a9b      	subs	r3, r3, r2
 8009a02:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009a06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009a0a:	da1e      	bge.n	8009a4a <__ieee754_atan2+0x102>
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	da01      	bge.n	8009a14 <__ieee754_atan2+0xcc>
 8009a10:	323c      	adds	r2, #60	; 0x3c
 8009a12:	db1e      	blt.n	8009a52 <__ieee754_atan2+0x10a>
 8009a14:	4632      	mov	r2, r6
 8009a16:	463b      	mov	r3, r7
 8009a18:	f7f6 ff18 	bl	800084c <__aeabi_ddiv>
 8009a1c:	ec41 0b10 	vmov	d0, r0, r1
 8009a20:	f000 fc02 	bl	800a228 <fabs>
 8009a24:	f000 fa60 	bl	8009ee8 <atan>
 8009a28:	ec51 0b10 	vmov	r0, r1, d0
 8009a2c:	2c01      	cmp	r4, #1
 8009a2e:	d013      	beq.n	8009a58 <__ieee754_atan2+0x110>
 8009a30:	2c02      	cmp	r4, #2
 8009a32:	d015      	beq.n	8009a60 <__ieee754_atan2+0x118>
 8009a34:	2c00      	cmp	r4, #0
 8009a36:	d0a8      	beq.n	800998a <__ieee754_atan2+0x42>
 8009a38:	a317      	add	r3, pc, #92	; (adr r3, 8009a98 <__ieee754_atan2+0x150>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	f7f6 fc23 	bl	8000288 <__aeabi_dsub>
 8009a42:	a317      	add	r3, pc, #92	; (adr r3, 8009aa0 <__ieee754_atan2+0x158>)
 8009a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a48:	e014      	b.n	8009a74 <__ieee754_atan2+0x12c>
 8009a4a:	a117      	add	r1, pc, #92	; (adr r1, 8009aa8 <__ieee754_atan2+0x160>)
 8009a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a50:	e7ec      	b.n	8009a2c <__ieee754_atan2+0xe4>
 8009a52:	2000      	movs	r0, #0
 8009a54:	2100      	movs	r1, #0
 8009a56:	e7e9      	b.n	8009a2c <__ieee754_atan2+0xe4>
 8009a58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	e794      	b.n	800998a <__ieee754_atan2+0x42>
 8009a60:	a30d      	add	r3, pc, #52	; (adr r3, 8009a98 <__ieee754_atan2+0x150>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	f7f6 fc0f 	bl	8000288 <__aeabi_dsub>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	a10c      	add	r1, pc, #48	; (adr r1, 8009aa0 <__ieee754_atan2+0x158>)
 8009a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a74:	f7f6 fc08 	bl	8000288 <__aeabi_dsub>
 8009a78:	e787      	b.n	800998a <__ieee754_atan2+0x42>
 8009a7a:	a109      	add	r1, pc, #36	; (adr r1, 8009aa0 <__ieee754_atan2+0x158>)
 8009a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a80:	e783      	b.n	800998a <__ieee754_atan2+0x42>
 8009a82:	a10b      	add	r1, pc, #44	; (adr r1, 8009ab0 <__ieee754_atan2+0x168>)
 8009a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a88:	e77f      	b.n	800998a <__ieee754_atan2+0x42>
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	e77c      	b.n	800998a <__ieee754_atan2+0x42>
 8009a90:	a105      	add	r1, pc, #20	; (adr r1, 8009aa8 <__ieee754_atan2+0x160>)
 8009a92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a96:	e778      	b.n	800998a <__ieee754_atan2+0x42>
 8009a98:	33145c07 	.word	0x33145c07
 8009a9c:	3ca1a626 	.word	0x3ca1a626
 8009aa0:	54442d18 	.word	0x54442d18
 8009aa4:	400921fb 	.word	0x400921fb
 8009aa8:	54442d18 	.word	0x54442d18
 8009aac:	3ff921fb 	.word	0x3ff921fb
 8009ab0:	54442d18 	.word	0x54442d18
 8009ab4:	3fe921fb 	.word	0x3fe921fb
 8009ab8:	0800de18 	.word	0x0800de18
 8009abc:	0800de30 	.word	0x0800de30
 8009ac0:	54442d18 	.word	0x54442d18
 8009ac4:	c00921fb 	.word	0xc00921fb
 8009ac8:	54442d18 	.word	0x54442d18
 8009acc:	bff921fb 	.word	0xbff921fb
 8009ad0:	7ff00000 	.word	0x7ff00000
 8009ad4:	00000000 	.word	0x00000000

08009ad8 <__ieee754_rem_pio2>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	ed2d 8b02 	vpush	{d8}
 8009ae0:	ec55 4b10 	vmov	r4, r5, d0
 8009ae4:	4bca      	ldr	r3, [pc, #808]	; (8009e10 <__ieee754_rem_pio2+0x338>)
 8009ae6:	b08b      	sub	sp, #44	; 0x2c
 8009ae8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009aec:	4598      	cmp	r8, r3
 8009aee:	4682      	mov	sl, r0
 8009af0:	9502      	str	r5, [sp, #8]
 8009af2:	dc08      	bgt.n	8009b06 <__ieee754_rem_pio2+0x2e>
 8009af4:	2200      	movs	r2, #0
 8009af6:	2300      	movs	r3, #0
 8009af8:	ed80 0b00 	vstr	d0, [r0]
 8009afc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009b00:	f04f 0b00 	mov.w	fp, #0
 8009b04:	e028      	b.n	8009b58 <__ieee754_rem_pio2+0x80>
 8009b06:	4bc3      	ldr	r3, [pc, #780]	; (8009e14 <__ieee754_rem_pio2+0x33c>)
 8009b08:	4598      	cmp	r8, r3
 8009b0a:	dc78      	bgt.n	8009bfe <__ieee754_rem_pio2+0x126>
 8009b0c:	9b02      	ldr	r3, [sp, #8]
 8009b0e:	4ec2      	ldr	r6, [pc, #776]	; (8009e18 <__ieee754_rem_pio2+0x340>)
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	ee10 0a10 	vmov	r0, s0
 8009b16:	a3b0      	add	r3, pc, #704	; (adr r3, 8009dd8 <__ieee754_rem_pio2+0x300>)
 8009b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	dd39      	ble.n	8009b94 <__ieee754_rem_pio2+0xbc>
 8009b20:	f7f6 fbb2 	bl	8000288 <__aeabi_dsub>
 8009b24:	45b0      	cmp	r8, r6
 8009b26:	4604      	mov	r4, r0
 8009b28:	460d      	mov	r5, r1
 8009b2a:	d01b      	beq.n	8009b64 <__ieee754_rem_pio2+0x8c>
 8009b2c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009de0 <__ieee754_rem_pio2+0x308>)
 8009b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b32:	f7f6 fba9 	bl	8000288 <__aeabi_dsub>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	e9ca 2300 	strd	r2, r3, [sl]
 8009b3e:	4620      	mov	r0, r4
 8009b40:	4629      	mov	r1, r5
 8009b42:	f7f6 fba1 	bl	8000288 <__aeabi_dsub>
 8009b46:	a3a6      	add	r3, pc, #664	; (adr r3, 8009de0 <__ieee754_rem_pio2+0x308>)
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f7f6 fb9c 	bl	8000288 <__aeabi_dsub>
 8009b50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009b54:	f04f 0b01 	mov.w	fp, #1
 8009b58:	4658      	mov	r0, fp
 8009b5a:	b00b      	add	sp, #44	; 0x2c
 8009b5c:	ecbd 8b02 	vpop	{d8}
 8009b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b64:	a3a0      	add	r3, pc, #640	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x310>)
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	f7f6 fb8d 	bl	8000288 <__aeabi_dsub>
 8009b6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x318>)
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	4604      	mov	r4, r0
 8009b76:	460d      	mov	r5, r1
 8009b78:	f7f6 fb86 	bl	8000288 <__aeabi_dsub>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	e9ca 2300 	strd	r2, r3, [sl]
 8009b84:	4620      	mov	r0, r4
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7f6 fb7e 	bl	8000288 <__aeabi_dsub>
 8009b8c:	a398      	add	r3, pc, #608	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x318>)
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	e7db      	b.n	8009b4c <__ieee754_rem_pio2+0x74>
 8009b94:	f7f6 fb7a 	bl	800028c <__adddf3>
 8009b98:	45b0      	cmp	r8, r6
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	d016      	beq.n	8009bce <__ieee754_rem_pio2+0xf6>
 8009ba0:	a38f      	add	r3, pc, #572	; (adr r3, 8009de0 <__ieee754_rem_pio2+0x308>)
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	f7f6 fb71 	bl	800028c <__adddf3>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	e9ca 2300 	strd	r2, r3, [sl]
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	f7f6 fb67 	bl	8000288 <__aeabi_dsub>
 8009bba:	a389      	add	r3, pc, #548	; (adr r3, 8009de0 <__ieee754_rem_pio2+0x308>)
 8009bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc0:	f7f6 fb64 	bl	800028c <__adddf3>
 8009bc4:	f04f 3bff 	mov.w	fp, #4294967295
 8009bc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009bcc:	e7c4      	b.n	8009b58 <__ieee754_rem_pio2+0x80>
 8009bce:	a386      	add	r3, pc, #536	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x310>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	f7f6 fb5a 	bl	800028c <__adddf3>
 8009bd8:	a385      	add	r3, pc, #532	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x318>)
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	4604      	mov	r4, r0
 8009be0:	460d      	mov	r5, r1
 8009be2:	f7f6 fb53 	bl	800028c <__adddf3>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	e9ca 2300 	strd	r2, r3, [sl]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	f7f6 fb49 	bl	8000288 <__aeabi_dsub>
 8009bf6:	a37e      	add	r3, pc, #504	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x318>)
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	e7e0      	b.n	8009bc0 <__ieee754_rem_pio2+0xe8>
 8009bfe:	4b87      	ldr	r3, [pc, #540]	; (8009e1c <__ieee754_rem_pio2+0x344>)
 8009c00:	4598      	cmp	r8, r3
 8009c02:	f300 80d8 	bgt.w	8009db6 <__ieee754_rem_pio2+0x2de>
 8009c06:	f000 fb0f 	bl	800a228 <fabs>
 8009c0a:	ec55 4b10 	vmov	r4, r5, d0
 8009c0e:	ee10 0a10 	vmov	r0, s0
 8009c12:	a379      	add	r3, pc, #484	; (adr r3, 8009df8 <__ieee754_rem_pio2+0x320>)
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	4629      	mov	r1, r5
 8009c1a:	f7f6 fced 	bl	80005f8 <__aeabi_dmul>
 8009c1e:	4b80      	ldr	r3, [pc, #512]	; (8009e20 <__ieee754_rem_pio2+0x348>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	f7f6 fb33 	bl	800028c <__adddf3>
 8009c26:	f7f6 ff97 	bl	8000b58 <__aeabi_d2iz>
 8009c2a:	4683      	mov	fp, r0
 8009c2c:	f7f6 fc7a 	bl	8000524 <__aeabi_i2d>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	ec43 2b18 	vmov	d8, r2, r3
 8009c38:	a367      	add	r3, pc, #412	; (adr r3, 8009dd8 <__ieee754_rem_pio2+0x300>)
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fcdb 	bl	80005f8 <__aeabi_dmul>
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4620      	mov	r0, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f7f6 fb1d 	bl	8000288 <__aeabi_dsub>
 8009c4e:	a364      	add	r3, pc, #400	; (adr r3, 8009de0 <__ieee754_rem_pio2+0x308>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	4606      	mov	r6, r0
 8009c56:	460f      	mov	r7, r1
 8009c58:	ec51 0b18 	vmov	r0, r1, d8
 8009c5c:	f7f6 fccc 	bl	80005f8 <__aeabi_dmul>
 8009c60:	f1bb 0f1f 	cmp.w	fp, #31
 8009c64:	4604      	mov	r4, r0
 8009c66:	460d      	mov	r5, r1
 8009c68:	dc0d      	bgt.n	8009c86 <__ieee754_rem_pio2+0x1ae>
 8009c6a:	4b6e      	ldr	r3, [pc, #440]	; (8009e24 <__ieee754_rem_pio2+0x34c>)
 8009c6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c74:	4543      	cmp	r3, r8
 8009c76:	d006      	beq.n	8009c86 <__ieee754_rem_pio2+0x1ae>
 8009c78:	4622      	mov	r2, r4
 8009c7a:	462b      	mov	r3, r5
 8009c7c:	4630      	mov	r0, r6
 8009c7e:	4639      	mov	r1, r7
 8009c80:	f7f6 fb02 	bl	8000288 <__aeabi_dsub>
 8009c84:	e00e      	b.n	8009ca4 <__ieee754_rem_pio2+0x1cc>
 8009c86:	462b      	mov	r3, r5
 8009c88:	4622      	mov	r2, r4
 8009c8a:	4630      	mov	r0, r6
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	f7f6 fafb 	bl	8000288 <__aeabi_dsub>
 8009c92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009c96:	9303      	str	r3, [sp, #12]
 8009c98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009c9c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009ca0:	2b10      	cmp	r3, #16
 8009ca2:	dc02      	bgt.n	8009caa <__ieee754_rem_pio2+0x1d2>
 8009ca4:	e9ca 0100 	strd	r0, r1, [sl]
 8009ca8:	e039      	b.n	8009d1e <__ieee754_rem_pio2+0x246>
 8009caa:	a34f      	add	r3, pc, #316	; (adr r3, 8009de8 <__ieee754_rem_pio2+0x310>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	ec51 0b18 	vmov	r0, r1, d8
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	4604      	mov	r4, r0
 8009cba:	460d      	mov	r5, r1
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	f7f6 fae0 	bl	8000288 <__aeabi_dsub>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4680      	mov	r8, r0
 8009cce:	4689      	mov	r9, r1
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	4639      	mov	r1, r7
 8009cd4:	f7f6 fad8 	bl	8000288 <__aeabi_dsub>
 8009cd8:	4622      	mov	r2, r4
 8009cda:	462b      	mov	r3, r5
 8009cdc:	f7f6 fad4 	bl	8000288 <__aeabi_dsub>
 8009ce0:	a343      	add	r3, pc, #268	; (adr r3, 8009df0 <__ieee754_rem_pio2+0x318>)
 8009ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	460d      	mov	r5, r1
 8009cea:	ec51 0b18 	vmov	r0, r1, d8
 8009cee:	f7f6 fc83 	bl	80005f8 <__aeabi_dmul>
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	462b      	mov	r3, r5
 8009cf6:	f7f6 fac7 	bl	8000288 <__aeabi_dsub>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4604      	mov	r4, r0
 8009d00:	460d      	mov	r5, r1
 8009d02:	4640      	mov	r0, r8
 8009d04:	4649      	mov	r1, r9
 8009d06:	f7f6 fabf 	bl	8000288 <__aeabi_dsub>
 8009d0a:	9a03      	ldr	r2, [sp, #12]
 8009d0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	2b31      	cmp	r3, #49	; 0x31
 8009d14:	dc24      	bgt.n	8009d60 <__ieee754_rem_pio2+0x288>
 8009d16:	e9ca 0100 	strd	r0, r1, [sl]
 8009d1a:	4646      	mov	r6, r8
 8009d1c:	464f      	mov	r7, r9
 8009d1e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009d22:	4630      	mov	r0, r6
 8009d24:	4642      	mov	r2, r8
 8009d26:	464b      	mov	r3, r9
 8009d28:	4639      	mov	r1, r7
 8009d2a:	f7f6 faad 	bl	8000288 <__aeabi_dsub>
 8009d2e:	462b      	mov	r3, r5
 8009d30:	4622      	mov	r2, r4
 8009d32:	f7f6 faa9 	bl	8000288 <__aeabi_dsub>
 8009d36:	9b02      	ldr	r3, [sp, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d3e:	f6bf af0b 	bge.w	8009b58 <__ieee754_rem_pio2+0x80>
 8009d42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d46:	f8ca 3004 	str.w	r3, [sl, #4]
 8009d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d4e:	f8ca 8000 	str.w	r8, [sl]
 8009d52:	f8ca 0008 	str.w	r0, [sl, #8]
 8009d56:	f8ca 300c 	str.w	r3, [sl, #12]
 8009d5a:	f1cb 0b00 	rsb	fp, fp, #0
 8009d5e:	e6fb      	b.n	8009b58 <__ieee754_rem_pio2+0x80>
 8009d60:	a327      	add	r3, pc, #156	; (adr r3, 8009e00 <__ieee754_rem_pio2+0x328>)
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	ec51 0b18 	vmov	r0, r1, d8
 8009d6a:	f7f6 fc45 	bl	80005f8 <__aeabi_dmul>
 8009d6e:	4604      	mov	r4, r0
 8009d70:	460d      	mov	r5, r1
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f7f6 fa85 	bl	8000288 <__aeabi_dsub>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	460b      	mov	r3, r1
 8009d82:	4606      	mov	r6, r0
 8009d84:	460f      	mov	r7, r1
 8009d86:	4640      	mov	r0, r8
 8009d88:	4649      	mov	r1, r9
 8009d8a:	f7f6 fa7d 	bl	8000288 <__aeabi_dsub>
 8009d8e:	4622      	mov	r2, r4
 8009d90:	462b      	mov	r3, r5
 8009d92:	f7f6 fa79 	bl	8000288 <__aeabi_dsub>
 8009d96:	a31c      	add	r3, pc, #112	; (adr r3, 8009e08 <__ieee754_rem_pio2+0x330>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	460d      	mov	r5, r1
 8009da0:	ec51 0b18 	vmov	r0, r1, d8
 8009da4:	f7f6 fc28 	bl	80005f8 <__aeabi_dmul>
 8009da8:	4622      	mov	r2, r4
 8009daa:	462b      	mov	r3, r5
 8009dac:	f7f6 fa6c 	bl	8000288 <__aeabi_dsub>
 8009db0:	4604      	mov	r4, r0
 8009db2:	460d      	mov	r5, r1
 8009db4:	e760      	b.n	8009c78 <__ieee754_rem_pio2+0x1a0>
 8009db6:	4b1c      	ldr	r3, [pc, #112]	; (8009e28 <__ieee754_rem_pio2+0x350>)
 8009db8:	4598      	cmp	r8, r3
 8009dba:	dd37      	ble.n	8009e2c <__ieee754_rem_pio2+0x354>
 8009dbc:	ee10 2a10 	vmov	r2, s0
 8009dc0:	462b      	mov	r3, r5
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	f7f6 fa5f 	bl	8000288 <__aeabi_dsub>
 8009dca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009dce:	e9ca 0100 	strd	r0, r1, [sl]
 8009dd2:	e695      	b.n	8009b00 <__ieee754_rem_pio2+0x28>
 8009dd4:	f3af 8000 	nop.w
 8009dd8:	54400000 	.word	0x54400000
 8009ddc:	3ff921fb 	.word	0x3ff921fb
 8009de0:	1a626331 	.word	0x1a626331
 8009de4:	3dd0b461 	.word	0x3dd0b461
 8009de8:	1a600000 	.word	0x1a600000
 8009dec:	3dd0b461 	.word	0x3dd0b461
 8009df0:	2e037073 	.word	0x2e037073
 8009df4:	3ba3198a 	.word	0x3ba3198a
 8009df8:	6dc9c883 	.word	0x6dc9c883
 8009dfc:	3fe45f30 	.word	0x3fe45f30
 8009e00:	2e000000 	.word	0x2e000000
 8009e04:	3ba3198a 	.word	0x3ba3198a
 8009e08:	252049c1 	.word	0x252049c1
 8009e0c:	397b839a 	.word	0x397b839a
 8009e10:	3fe921fb 	.word	0x3fe921fb
 8009e14:	4002d97b 	.word	0x4002d97b
 8009e18:	3ff921fb 	.word	0x3ff921fb
 8009e1c:	413921fb 	.word	0x413921fb
 8009e20:	3fe00000 	.word	0x3fe00000
 8009e24:	0800de48 	.word	0x0800de48
 8009e28:	7fefffff 	.word	0x7fefffff
 8009e2c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8009e30:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8009e34:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8009e38:	4620      	mov	r0, r4
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	f7f6 fe8c 	bl	8000b58 <__aeabi_d2iz>
 8009e40:	f7f6 fb70 	bl	8000524 <__aeabi_i2d>
 8009e44:	4602      	mov	r2, r0
 8009e46:	460b      	mov	r3, r1
 8009e48:	4620      	mov	r0, r4
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e50:	f7f6 fa1a 	bl	8000288 <__aeabi_dsub>
 8009e54:	4b21      	ldr	r3, [pc, #132]	; (8009edc <__ieee754_rem_pio2+0x404>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	f7f6 fbce 	bl	80005f8 <__aeabi_dmul>
 8009e5c:	460d      	mov	r5, r1
 8009e5e:	4604      	mov	r4, r0
 8009e60:	f7f6 fe7a 	bl	8000b58 <__aeabi_d2iz>
 8009e64:	f7f6 fb5e 	bl	8000524 <__aeabi_i2d>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e74:	f7f6 fa08 	bl	8000288 <__aeabi_dsub>
 8009e78:	4b18      	ldr	r3, [pc, #96]	; (8009edc <__ieee754_rem_pio2+0x404>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f7f6 fbbc 	bl	80005f8 <__aeabi_dmul>
 8009e80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e84:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009e88:	2703      	movs	r7, #3
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8009e92:	4622      	mov	r2, r4
 8009e94:	462b      	mov	r3, r5
 8009e96:	46b9      	mov	r9, r7
 8009e98:	3f01      	subs	r7, #1
 8009e9a:	f7f6 fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d1f5      	bne.n	8009e8e <__ieee754_rem_pio2+0x3b6>
 8009ea2:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <__ieee754_rem_pio2+0x408>)
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	4632      	mov	r2, r6
 8009eac:	464b      	mov	r3, r9
 8009eae:	4651      	mov	r1, sl
 8009eb0:	a804      	add	r0, sp, #16
 8009eb2:	f000 f9c5 	bl	800a240 <__kernel_rem_pio2>
 8009eb6:	9b02      	ldr	r3, [sp, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	4683      	mov	fp, r0
 8009ebc:	f6bf ae4c 	bge.w	8009b58 <__ieee754_rem_pio2+0x80>
 8009ec0:	e9da 2100 	ldrd	r2, r1, [sl]
 8009ec4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ec8:	e9ca 2300 	strd	r2, r3, [sl]
 8009ecc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009ed0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ed4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009ed8:	e73f      	b.n	8009d5a <__ieee754_rem_pio2+0x282>
 8009eda:	bf00      	nop
 8009edc:	41700000 	.word	0x41700000
 8009ee0:	0800dec8 	.word	0x0800dec8
 8009ee4:	00000000 	.word	0x00000000

08009ee8 <atan>:
 8009ee8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	ec55 4b10 	vmov	r4, r5, d0
 8009ef0:	4bc3      	ldr	r3, [pc, #780]	; (800a200 <atan+0x318>)
 8009ef2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ef6:	429e      	cmp	r6, r3
 8009ef8:	46ab      	mov	fp, r5
 8009efa:	dd18      	ble.n	8009f2e <atan+0x46>
 8009efc:	4bc1      	ldr	r3, [pc, #772]	; (800a204 <atan+0x31c>)
 8009efe:	429e      	cmp	r6, r3
 8009f00:	dc01      	bgt.n	8009f06 <atan+0x1e>
 8009f02:	d109      	bne.n	8009f18 <atan+0x30>
 8009f04:	b144      	cbz	r4, 8009f18 <atan+0x30>
 8009f06:	4622      	mov	r2, r4
 8009f08:	462b      	mov	r3, r5
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	f7f6 f9bd 	bl	800028c <__adddf3>
 8009f12:	4604      	mov	r4, r0
 8009f14:	460d      	mov	r5, r1
 8009f16:	e006      	b.n	8009f26 <atan+0x3e>
 8009f18:	f1bb 0f00 	cmp.w	fp, #0
 8009f1c:	f300 8131 	bgt.w	800a182 <atan+0x29a>
 8009f20:	a59b      	add	r5, pc, #620	; (adr r5, 800a190 <atan+0x2a8>)
 8009f22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f26:	ec45 4b10 	vmov	d0, r4, r5
 8009f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2e:	4bb6      	ldr	r3, [pc, #728]	; (800a208 <atan+0x320>)
 8009f30:	429e      	cmp	r6, r3
 8009f32:	dc14      	bgt.n	8009f5e <atan+0x76>
 8009f34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009f38:	429e      	cmp	r6, r3
 8009f3a:	dc0d      	bgt.n	8009f58 <atan+0x70>
 8009f3c:	a396      	add	r3, pc, #600	; (adr r3, 800a198 <atan+0x2b0>)
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	ee10 0a10 	vmov	r0, s0
 8009f46:	4629      	mov	r1, r5
 8009f48:	f7f6 f9a0 	bl	800028c <__adddf3>
 8009f4c:	4baf      	ldr	r3, [pc, #700]	; (800a20c <atan+0x324>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f7f6 fde2 	bl	8000b18 <__aeabi_dcmpgt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d1e6      	bne.n	8009f26 <atan+0x3e>
 8009f58:	f04f 3aff 	mov.w	sl, #4294967295
 8009f5c:	e02b      	b.n	8009fb6 <atan+0xce>
 8009f5e:	f000 f963 	bl	800a228 <fabs>
 8009f62:	4bab      	ldr	r3, [pc, #684]	; (800a210 <atan+0x328>)
 8009f64:	429e      	cmp	r6, r3
 8009f66:	ec55 4b10 	vmov	r4, r5, d0
 8009f6a:	f300 80bf 	bgt.w	800a0ec <atan+0x204>
 8009f6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009f72:	429e      	cmp	r6, r3
 8009f74:	f300 80a0 	bgt.w	800a0b8 <atan+0x1d0>
 8009f78:	ee10 2a10 	vmov	r2, s0
 8009f7c:	ee10 0a10 	vmov	r0, s0
 8009f80:	462b      	mov	r3, r5
 8009f82:	4629      	mov	r1, r5
 8009f84:	f7f6 f982 	bl	800028c <__adddf3>
 8009f88:	4ba0      	ldr	r3, [pc, #640]	; (800a20c <atan+0x324>)
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f7f6 f97c 	bl	8000288 <__aeabi_dsub>
 8009f90:	2200      	movs	r2, #0
 8009f92:	4606      	mov	r6, r0
 8009f94:	460f      	mov	r7, r1
 8009f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7f6 f975 	bl	800028c <__adddf3>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	4639      	mov	r1, r7
 8009faa:	f7f6 fc4f 	bl	800084c <__aeabi_ddiv>
 8009fae:	f04f 0a00 	mov.w	sl, #0
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	4622      	mov	r2, r4
 8009fb8:	462b      	mov	r3, r5
 8009fba:	4620      	mov	r0, r4
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	f7f6 fb1b 	bl	80005f8 <__aeabi_dmul>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	4680      	mov	r8, r0
 8009fc8:	4689      	mov	r9, r1
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	a374      	add	r3, pc, #464	; (adr r3, 800a1a0 <atan+0x2b8>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	4606      	mov	r6, r0
 8009fd6:	460f      	mov	r7, r1
 8009fd8:	f7f6 fb0e 	bl	80005f8 <__aeabi_dmul>
 8009fdc:	a372      	add	r3, pc, #456	; (adr r3, 800a1a8 <atan+0x2c0>)
 8009fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe2:	f7f6 f953 	bl	800028c <__adddf3>
 8009fe6:	4632      	mov	r2, r6
 8009fe8:	463b      	mov	r3, r7
 8009fea:	f7f6 fb05 	bl	80005f8 <__aeabi_dmul>
 8009fee:	a370      	add	r3, pc, #448	; (adr r3, 800a1b0 <atan+0x2c8>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	f7f6 f94a 	bl	800028c <__adddf3>
 8009ff8:	4632      	mov	r2, r6
 8009ffa:	463b      	mov	r3, r7
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	a36d      	add	r3, pc, #436	; (adr r3, 800a1b8 <atan+0x2d0>)
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	f7f6 f941 	bl	800028c <__adddf3>
 800a00a:	4632      	mov	r2, r6
 800a00c:	463b      	mov	r3, r7
 800a00e:	f7f6 faf3 	bl	80005f8 <__aeabi_dmul>
 800a012:	a36b      	add	r3, pc, #428	; (adr r3, 800a1c0 <atan+0x2d8>)
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f7f6 f938 	bl	800028c <__adddf3>
 800a01c:	4632      	mov	r2, r6
 800a01e:	463b      	mov	r3, r7
 800a020:	f7f6 faea 	bl	80005f8 <__aeabi_dmul>
 800a024:	a368      	add	r3, pc, #416	; (adr r3, 800a1c8 <atan+0x2e0>)
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	f7f6 f92f 	bl	800028c <__adddf3>
 800a02e:	4642      	mov	r2, r8
 800a030:	464b      	mov	r3, r9
 800a032:	f7f6 fae1 	bl	80005f8 <__aeabi_dmul>
 800a036:	a366      	add	r3, pc, #408	; (adr r3, 800a1d0 <atan+0x2e8>)
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	4680      	mov	r8, r0
 800a03e:	4689      	mov	r9, r1
 800a040:	4630      	mov	r0, r6
 800a042:	4639      	mov	r1, r7
 800a044:	f7f6 fad8 	bl	80005f8 <__aeabi_dmul>
 800a048:	a363      	add	r3, pc, #396	; (adr r3, 800a1d8 <atan+0x2f0>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f7f6 f91b 	bl	8000288 <__aeabi_dsub>
 800a052:	4632      	mov	r2, r6
 800a054:	463b      	mov	r3, r7
 800a056:	f7f6 facf 	bl	80005f8 <__aeabi_dmul>
 800a05a:	a361      	add	r3, pc, #388	; (adr r3, 800a1e0 <atan+0x2f8>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 f912 	bl	8000288 <__aeabi_dsub>
 800a064:	4632      	mov	r2, r6
 800a066:	463b      	mov	r3, r7
 800a068:	f7f6 fac6 	bl	80005f8 <__aeabi_dmul>
 800a06c:	a35e      	add	r3, pc, #376	; (adr r3, 800a1e8 <atan+0x300>)
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	f7f6 f909 	bl	8000288 <__aeabi_dsub>
 800a076:	4632      	mov	r2, r6
 800a078:	463b      	mov	r3, r7
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	a35c      	add	r3, pc, #368	; (adr r3, 800a1f0 <atan+0x308>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f7f6 f900 	bl	8000288 <__aeabi_dsub>
 800a088:	4632      	mov	r2, r6
 800a08a:	463b      	mov	r3, r7
 800a08c:	f7f6 fab4 	bl	80005f8 <__aeabi_dmul>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4640      	mov	r0, r8
 800a096:	4649      	mov	r1, r9
 800a098:	f7f6 f8f8 	bl	800028c <__adddf3>
 800a09c:	4622      	mov	r2, r4
 800a09e:	462b      	mov	r3, r5
 800a0a0:	f7f6 faaa 	bl	80005f8 <__aeabi_dmul>
 800a0a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	d14b      	bne.n	800a146 <atan+0x25e>
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	f7f6 f8e9 	bl	8000288 <__aeabi_dsub>
 800a0b6:	e72c      	b.n	8009f12 <atan+0x2a>
 800a0b8:	ee10 0a10 	vmov	r0, s0
 800a0bc:	4b53      	ldr	r3, [pc, #332]	; (800a20c <atan+0x324>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 f8e1 	bl	8000288 <__aeabi_dsub>
 800a0c6:	4b51      	ldr	r3, [pc, #324]	; (800a20c <atan+0x324>)
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	460f      	mov	r7, r1
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7f6 f8db 	bl	800028c <__adddf3>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4630      	mov	r0, r6
 800a0dc:	4639      	mov	r1, r7
 800a0de:	f7f6 fbb5 	bl	800084c <__aeabi_ddiv>
 800a0e2:	f04f 0a01 	mov.w	sl, #1
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	e764      	b.n	8009fb6 <atan+0xce>
 800a0ec:	4b49      	ldr	r3, [pc, #292]	; (800a214 <atan+0x32c>)
 800a0ee:	429e      	cmp	r6, r3
 800a0f0:	da1d      	bge.n	800a12e <atan+0x246>
 800a0f2:	ee10 0a10 	vmov	r0, s0
 800a0f6:	4b48      	ldr	r3, [pc, #288]	; (800a218 <atan+0x330>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	f7f6 f8c4 	bl	8000288 <__aeabi_dsub>
 800a100:	4b45      	ldr	r3, [pc, #276]	; (800a218 <atan+0x330>)
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	2200      	movs	r2, #0
 800a108:	4620      	mov	r0, r4
 800a10a:	4629      	mov	r1, r5
 800a10c:	f7f6 fa74 	bl	80005f8 <__aeabi_dmul>
 800a110:	4b3e      	ldr	r3, [pc, #248]	; (800a20c <atan+0x324>)
 800a112:	2200      	movs	r2, #0
 800a114:	f7f6 f8ba 	bl	800028c <__adddf3>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4630      	mov	r0, r6
 800a11e:	4639      	mov	r1, r7
 800a120:	f7f6 fb94 	bl	800084c <__aeabi_ddiv>
 800a124:	f04f 0a02 	mov.w	sl, #2
 800a128:	4604      	mov	r4, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	e743      	b.n	8009fb6 <atan+0xce>
 800a12e:	462b      	mov	r3, r5
 800a130:	ee10 2a10 	vmov	r2, s0
 800a134:	4939      	ldr	r1, [pc, #228]	; (800a21c <atan+0x334>)
 800a136:	2000      	movs	r0, #0
 800a138:	f7f6 fb88 	bl	800084c <__aeabi_ddiv>
 800a13c:	f04f 0a03 	mov.w	sl, #3
 800a140:	4604      	mov	r4, r0
 800a142:	460d      	mov	r5, r1
 800a144:	e737      	b.n	8009fb6 <atan+0xce>
 800a146:	4b36      	ldr	r3, [pc, #216]	; (800a220 <atan+0x338>)
 800a148:	4e36      	ldr	r6, [pc, #216]	; (800a224 <atan+0x33c>)
 800a14a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	f7f6 f899 	bl	8000288 <__aeabi_dsub>
 800a156:	4622      	mov	r2, r4
 800a158:	462b      	mov	r3, r5
 800a15a:	f7f6 f895 	bl	8000288 <__aeabi_dsub>
 800a15e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a162:	4602      	mov	r2, r0
 800a164:	460b      	mov	r3, r1
 800a166:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a16a:	f7f6 f88d 	bl	8000288 <__aeabi_dsub>
 800a16e:	f1bb 0f00 	cmp.w	fp, #0
 800a172:	4604      	mov	r4, r0
 800a174:	460d      	mov	r5, r1
 800a176:	f6bf aed6 	bge.w	8009f26 <atan+0x3e>
 800a17a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a17e:	461d      	mov	r5, r3
 800a180:	e6d1      	b.n	8009f26 <atan+0x3e>
 800a182:	a51d      	add	r5, pc, #116	; (adr r5, 800a1f8 <atan+0x310>)
 800a184:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a188:	e6cd      	b.n	8009f26 <atan+0x3e>
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w
 800a190:	54442d18 	.word	0x54442d18
 800a194:	bff921fb 	.word	0xbff921fb
 800a198:	8800759c 	.word	0x8800759c
 800a19c:	7e37e43c 	.word	0x7e37e43c
 800a1a0:	e322da11 	.word	0xe322da11
 800a1a4:	3f90ad3a 	.word	0x3f90ad3a
 800a1a8:	24760deb 	.word	0x24760deb
 800a1ac:	3fa97b4b 	.word	0x3fa97b4b
 800a1b0:	a0d03d51 	.word	0xa0d03d51
 800a1b4:	3fb10d66 	.word	0x3fb10d66
 800a1b8:	c54c206e 	.word	0xc54c206e
 800a1bc:	3fb745cd 	.word	0x3fb745cd
 800a1c0:	920083ff 	.word	0x920083ff
 800a1c4:	3fc24924 	.word	0x3fc24924
 800a1c8:	5555550d 	.word	0x5555550d
 800a1cc:	3fd55555 	.word	0x3fd55555
 800a1d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a1d4:	bfa2b444 	.word	0xbfa2b444
 800a1d8:	52defd9a 	.word	0x52defd9a
 800a1dc:	3fadde2d 	.word	0x3fadde2d
 800a1e0:	af749a6d 	.word	0xaf749a6d
 800a1e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a1e8:	fe231671 	.word	0xfe231671
 800a1ec:	3fbc71c6 	.word	0x3fbc71c6
 800a1f0:	9998ebc4 	.word	0x9998ebc4
 800a1f4:	3fc99999 	.word	0x3fc99999
 800a1f8:	54442d18 	.word	0x54442d18
 800a1fc:	3ff921fb 	.word	0x3ff921fb
 800a200:	440fffff 	.word	0x440fffff
 800a204:	7ff00000 	.word	0x7ff00000
 800a208:	3fdbffff 	.word	0x3fdbffff
 800a20c:	3ff00000 	.word	0x3ff00000
 800a210:	3ff2ffff 	.word	0x3ff2ffff
 800a214:	40038000 	.word	0x40038000
 800a218:	3ff80000 	.word	0x3ff80000
 800a21c:	bff00000 	.word	0xbff00000
 800a220:	0800dff0 	.word	0x0800dff0
 800a224:	0800dfd0 	.word	0x0800dfd0

0800a228 <fabs>:
 800a228:	ec51 0b10 	vmov	r0, r1, d0
 800a22c:	ee10 2a10 	vmov	r2, s0
 800a230:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a234:	ec43 2b10 	vmov	d0, r2, r3
 800a238:	4770      	bx	lr
 800a23a:	0000      	movs	r0, r0
 800a23c:	0000      	movs	r0, r0
	...

0800a240 <__kernel_rem_pio2>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	ed2d 8b02 	vpush	{d8}
 800a248:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a24c:	f112 0f14 	cmn.w	r2, #20
 800a250:	9306      	str	r3, [sp, #24]
 800a252:	9104      	str	r1, [sp, #16]
 800a254:	4bc2      	ldr	r3, [pc, #776]	; (800a560 <__kernel_rem_pio2+0x320>)
 800a256:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a258:	9009      	str	r0, [sp, #36]	; 0x24
 800a25a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	9b06      	ldr	r3, [sp, #24]
 800a262:	f103 33ff 	add.w	r3, r3, #4294967295
 800a266:	bfa8      	it	ge
 800a268:	1ed4      	subge	r4, r2, #3
 800a26a:	9305      	str	r3, [sp, #20]
 800a26c:	bfb2      	itee	lt
 800a26e:	2400      	movlt	r4, #0
 800a270:	2318      	movge	r3, #24
 800a272:	fb94 f4f3 	sdivge	r4, r4, r3
 800a276:	f06f 0317 	mvn.w	r3, #23
 800a27a:	fb04 3303 	mla	r3, r4, r3, r3
 800a27e:	eb03 0a02 	add.w	sl, r3, r2
 800a282:	9b00      	ldr	r3, [sp, #0]
 800a284:	9a05      	ldr	r2, [sp, #20]
 800a286:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800a550 <__kernel_rem_pio2+0x310>
 800a28a:	eb03 0802 	add.w	r8, r3, r2
 800a28e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a290:	1aa7      	subs	r7, r4, r2
 800a292:	ae20      	add	r6, sp, #128	; 0x80
 800a294:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a298:	2500      	movs	r5, #0
 800a29a:	4545      	cmp	r5, r8
 800a29c:	dd13      	ble.n	800a2c6 <__kernel_rem_pio2+0x86>
 800a29e:	9b06      	ldr	r3, [sp, #24]
 800a2a0:	aa20      	add	r2, sp, #128	; 0x80
 800a2a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a2a6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a2aa:	f04f 0800 	mov.w	r8, #0
 800a2ae:	9b00      	ldr	r3, [sp, #0]
 800a2b0:	4598      	cmp	r8, r3
 800a2b2:	dc31      	bgt.n	800a318 <__kernel_rem_pio2+0xd8>
 800a2b4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800a550 <__kernel_rem_pio2+0x310>
 800a2b8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a2bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a2c0:	462f      	mov	r7, r5
 800a2c2:	2600      	movs	r6, #0
 800a2c4:	e01b      	b.n	800a2fe <__kernel_rem_pio2+0xbe>
 800a2c6:	42ef      	cmn	r7, r5
 800a2c8:	d407      	bmi.n	800a2da <__kernel_rem_pio2+0x9a>
 800a2ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a2ce:	f7f6 f929 	bl	8000524 <__aeabi_i2d>
 800a2d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a2d6:	3501      	adds	r5, #1
 800a2d8:	e7df      	b.n	800a29a <__kernel_rem_pio2+0x5a>
 800a2da:	ec51 0b18 	vmov	r0, r1, d8
 800a2de:	e7f8      	b.n	800a2d2 <__kernel_rem_pio2+0x92>
 800a2e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a2e8:	f7f6 f986 	bl	80005f8 <__aeabi_dmul>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2f4:	f7f5 ffca 	bl	800028c <__adddf3>
 800a2f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2fc:	3601      	adds	r6, #1
 800a2fe:	9b05      	ldr	r3, [sp, #20]
 800a300:	429e      	cmp	r6, r3
 800a302:	f1a7 0708 	sub.w	r7, r7, #8
 800a306:	ddeb      	ble.n	800a2e0 <__kernel_rem_pio2+0xa0>
 800a308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a30c:	f108 0801 	add.w	r8, r8, #1
 800a310:	ecab 7b02 	vstmia	fp!, {d7}
 800a314:	3508      	adds	r5, #8
 800a316:	e7ca      	b.n	800a2ae <__kernel_rem_pio2+0x6e>
 800a318:	9b00      	ldr	r3, [sp, #0]
 800a31a:	aa0c      	add	r2, sp, #48	; 0x30
 800a31c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a320:	930b      	str	r3, [sp, #44]	; 0x2c
 800a322:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a324:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a328:	9c00      	ldr	r4, [sp, #0]
 800a32a:	930a      	str	r3, [sp, #40]	; 0x28
 800a32c:	00e3      	lsls	r3, r4, #3
 800a32e:	9308      	str	r3, [sp, #32]
 800a330:	ab98      	add	r3, sp, #608	; 0x260
 800a332:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a336:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a33a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800a33e:	ab70      	add	r3, sp, #448	; 0x1c0
 800a340:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a344:	46c3      	mov	fp, r8
 800a346:	46a1      	mov	r9, r4
 800a348:	f1b9 0f00 	cmp.w	r9, #0
 800a34c:	f1a5 0508 	sub.w	r5, r5, #8
 800a350:	dc77      	bgt.n	800a442 <__kernel_rem_pio2+0x202>
 800a352:	ec47 6b10 	vmov	d0, r6, r7
 800a356:	4650      	mov	r0, sl
 800a358:	f000 fac2 	bl	800a8e0 <scalbn>
 800a35c:	ec57 6b10 	vmov	r6, r7, d0
 800a360:	2200      	movs	r2, #0
 800a362:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a366:	ee10 0a10 	vmov	r0, s0
 800a36a:	4639      	mov	r1, r7
 800a36c:	f7f6 f944 	bl	80005f8 <__aeabi_dmul>
 800a370:	ec41 0b10 	vmov	d0, r0, r1
 800a374:	f000 fb34 	bl	800a9e0 <floor>
 800a378:	4b7a      	ldr	r3, [pc, #488]	; (800a564 <__kernel_rem_pio2+0x324>)
 800a37a:	ec51 0b10 	vmov	r0, r1, d0
 800a37e:	2200      	movs	r2, #0
 800a380:	f7f6 f93a 	bl	80005f8 <__aeabi_dmul>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	4630      	mov	r0, r6
 800a38a:	4639      	mov	r1, r7
 800a38c:	f7f5 ff7c 	bl	8000288 <__aeabi_dsub>
 800a390:	460f      	mov	r7, r1
 800a392:	4606      	mov	r6, r0
 800a394:	f7f6 fbe0 	bl	8000b58 <__aeabi_d2iz>
 800a398:	9002      	str	r0, [sp, #8]
 800a39a:	f7f6 f8c3 	bl	8000524 <__aeabi_i2d>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	f7f5 ff6f 	bl	8000288 <__aeabi_dsub>
 800a3aa:	f1ba 0f00 	cmp.w	sl, #0
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	460f      	mov	r7, r1
 800a3b2:	dd6d      	ble.n	800a490 <__kernel_rem_pio2+0x250>
 800a3b4:	1e61      	subs	r1, r4, #1
 800a3b6:	ab0c      	add	r3, sp, #48	; 0x30
 800a3b8:	9d02      	ldr	r5, [sp, #8]
 800a3ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3be:	f1ca 0018 	rsb	r0, sl, #24
 800a3c2:	fa43 f200 	asr.w	r2, r3, r0
 800a3c6:	4415      	add	r5, r2
 800a3c8:	4082      	lsls	r2, r0
 800a3ca:	1a9b      	subs	r3, r3, r2
 800a3cc:	aa0c      	add	r2, sp, #48	; 0x30
 800a3ce:	9502      	str	r5, [sp, #8]
 800a3d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a3d4:	f1ca 0217 	rsb	r2, sl, #23
 800a3d8:	fa43 fb02 	asr.w	fp, r3, r2
 800a3dc:	f1bb 0f00 	cmp.w	fp, #0
 800a3e0:	dd65      	ble.n	800a4ae <__kernel_rem_pio2+0x26e>
 800a3e2:	9b02      	ldr	r3, [sp, #8]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	9302      	str	r3, [sp, #8]
 800a3ea:	4615      	mov	r5, r2
 800a3ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a3f0:	4294      	cmp	r4, r2
 800a3f2:	f300 809f 	bgt.w	800a534 <__kernel_rem_pio2+0x2f4>
 800a3f6:	f1ba 0f00 	cmp.w	sl, #0
 800a3fa:	dd07      	ble.n	800a40c <__kernel_rem_pio2+0x1cc>
 800a3fc:	f1ba 0f01 	cmp.w	sl, #1
 800a400:	f000 80c1 	beq.w	800a586 <__kernel_rem_pio2+0x346>
 800a404:	f1ba 0f02 	cmp.w	sl, #2
 800a408:	f000 80c7 	beq.w	800a59a <__kernel_rem_pio2+0x35a>
 800a40c:	f1bb 0f02 	cmp.w	fp, #2
 800a410:	d14d      	bne.n	800a4ae <__kernel_rem_pio2+0x26e>
 800a412:	4632      	mov	r2, r6
 800a414:	463b      	mov	r3, r7
 800a416:	4954      	ldr	r1, [pc, #336]	; (800a568 <__kernel_rem_pio2+0x328>)
 800a418:	2000      	movs	r0, #0
 800a41a:	f7f5 ff35 	bl	8000288 <__aeabi_dsub>
 800a41e:	4606      	mov	r6, r0
 800a420:	460f      	mov	r7, r1
 800a422:	2d00      	cmp	r5, #0
 800a424:	d043      	beq.n	800a4ae <__kernel_rem_pio2+0x26e>
 800a426:	4650      	mov	r0, sl
 800a428:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800a558 <__kernel_rem_pio2+0x318>
 800a42c:	f000 fa58 	bl	800a8e0 <scalbn>
 800a430:	4630      	mov	r0, r6
 800a432:	4639      	mov	r1, r7
 800a434:	ec53 2b10 	vmov	r2, r3, d0
 800a438:	f7f5 ff26 	bl	8000288 <__aeabi_dsub>
 800a43c:	4606      	mov	r6, r0
 800a43e:	460f      	mov	r7, r1
 800a440:	e035      	b.n	800a4ae <__kernel_rem_pio2+0x26e>
 800a442:	4b4a      	ldr	r3, [pc, #296]	; (800a56c <__kernel_rem_pio2+0x32c>)
 800a444:	2200      	movs	r2, #0
 800a446:	4630      	mov	r0, r6
 800a448:	4639      	mov	r1, r7
 800a44a:	f7f6 f8d5 	bl	80005f8 <__aeabi_dmul>
 800a44e:	f7f6 fb83 	bl	8000b58 <__aeabi_d2iz>
 800a452:	f7f6 f867 	bl	8000524 <__aeabi_i2d>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	ec43 2b18 	vmov	d8, r2, r3
 800a45e:	4b44      	ldr	r3, [pc, #272]	; (800a570 <__kernel_rem_pio2+0x330>)
 800a460:	2200      	movs	r2, #0
 800a462:	f7f6 f8c9 	bl	80005f8 <__aeabi_dmul>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	4630      	mov	r0, r6
 800a46c:	4639      	mov	r1, r7
 800a46e:	f7f5 ff0b 	bl	8000288 <__aeabi_dsub>
 800a472:	f7f6 fb71 	bl	8000b58 <__aeabi_d2iz>
 800a476:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a47a:	f84b 0b04 	str.w	r0, [fp], #4
 800a47e:	ec51 0b18 	vmov	r0, r1, d8
 800a482:	f7f5 ff03 	bl	800028c <__adddf3>
 800a486:	f109 39ff 	add.w	r9, r9, #4294967295
 800a48a:	4606      	mov	r6, r0
 800a48c:	460f      	mov	r7, r1
 800a48e:	e75b      	b.n	800a348 <__kernel_rem_pio2+0x108>
 800a490:	d106      	bne.n	800a4a0 <__kernel_rem_pio2+0x260>
 800a492:	1e63      	subs	r3, r4, #1
 800a494:	aa0c      	add	r2, sp, #48	; 0x30
 800a496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a49a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800a49e:	e79d      	b.n	800a3dc <__kernel_rem_pio2+0x19c>
 800a4a0:	4b34      	ldr	r3, [pc, #208]	; (800a574 <__kernel_rem_pio2+0x334>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f7f6 fb2e 	bl	8000b04 <__aeabi_dcmpge>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d140      	bne.n	800a52e <__kernel_rem_pio2+0x2ee>
 800a4ac:	4683      	mov	fp, r0
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	f7f6 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4ba:	2800      	cmp	r0, #0
 800a4bc:	f000 80c1 	beq.w	800a642 <__kernel_rem_pio2+0x402>
 800a4c0:	1e65      	subs	r5, r4, #1
 800a4c2:	462b      	mov	r3, r5
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	9900      	ldr	r1, [sp, #0]
 800a4c8:	428b      	cmp	r3, r1
 800a4ca:	da6d      	bge.n	800a5a8 <__kernel_rem_pio2+0x368>
 800a4cc:	2a00      	cmp	r2, #0
 800a4ce:	f000 808a 	beq.w	800a5e6 <__kernel_rem_pio2+0x3a6>
 800a4d2:	ab0c      	add	r3, sp, #48	; 0x30
 800a4d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a4d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 80ae 	beq.w	800a63e <__kernel_rem_pio2+0x3fe>
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a558 <__kernel_rem_pio2+0x318>
 800a4e8:	f000 f9fa 	bl	800a8e0 <scalbn>
 800a4ec:	1c6b      	adds	r3, r5, #1
 800a4ee:	00da      	lsls	r2, r3, #3
 800a4f0:	9205      	str	r2, [sp, #20]
 800a4f2:	ec57 6b10 	vmov	r6, r7, d0
 800a4f6:	aa70      	add	r2, sp, #448	; 0x1c0
 800a4f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800a56c <__kernel_rem_pio2+0x32c>
 800a4fc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800a500:	462c      	mov	r4, r5
 800a502:	f04f 0800 	mov.w	r8, #0
 800a506:	2c00      	cmp	r4, #0
 800a508:	f280 80d4 	bge.w	800a6b4 <__kernel_rem_pio2+0x474>
 800a50c:	462c      	mov	r4, r5
 800a50e:	2c00      	cmp	r4, #0
 800a510:	f2c0 8102 	blt.w	800a718 <__kernel_rem_pio2+0x4d8>
 800a514:	4b18      	ldr	r3, [pc, #96]	; (800a578 <__kernel_rem_pio2+0x338>)
 800a516:	461e      	mov	r6, r3
 800a518:	ab70      	add	r3, sp, #448	; 0x1c0
 800a51a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800a51e:	1b2b      	subs	r3, r5, r4
 800a520:	f04f 0900 	mov.w	r9, #0
 800a524:	f04f 0a00 	mov.w	sl, #0
 800a528:	2700      	movs	r7, #0
 800a52a:	9306      	str	r3, [sp, #24]
 800a52c:	e0e6      	b.n	800a6fc <__kernel_rem_pio2+0x4bc>
 800a52e:	f04f 0b02 	mov.w	fp, #2
 800a532:	e756      	b.n	800a3e2 <__kernel_rem_pio2+0x1a2>
 800a534:	f8d8 3000 	ldr.w	r3, [r8]
 800a538:	bb05      	cbnz	r5, 800a57c <__kernel_rem_pio2+0x33c>
 800a53a:	b123      	cbz	r3, 800a546 <__kernel_rem_pio2+0x306>
 800a53c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a540:	f8c8 3000 	str.w	r3, [r8]
 800a544:	2301      	movs	r3, #1
 800a546:	3201      	adds	r2, #1
 800a548:	f108 0804 	add.w	r8, r8, #4
 800a54c:	461d      	mov	r5, r3
 800a54e:	e74f      	b.n	800a3f0 <__kernel_rem_pio2+0x1b0>
	...
 800a55c:	3ff00000 	.word	0x3ff00000
 800a560:	0800e050 	.word	0x0800e050
 800a564:	40200000 	.word	0x40200000
 800a568:	3ff00000 	.word	0x3ff00000
 800a56c:	3e700000 	.word	0x3e700000
 800a570:	41700000 	.word	0x41700000
 800a574:	3fe00000 	.word	0x3fe00000
 800a578:	0800e010 	.word	0x0800e010
 800a57c:	1acb      	subs	r3, r1, r3
 800a57e:	f8c8 3000 	str.w	r3, [r8]
 800a582:	462b      	mov	r3, r5
 800a584:	e7df      	b.n	800a546 <__kernel_rem_pio2+0x306>
 800a586:	1e62      	subs	r2, r4, #1
 800a588:	ab0c      	add	r3, sp, #48	; 0x30
 800a58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a592:	a90c      	add	r1, sp, #48	; 0x30
 800a594:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a598:	e738      	b.n	800a40c <__kernel_rem_pio2+0x1cc>
 800a59a:	1e62      	subs	r2, r4, #1
 800a59c:	ab0c      	add	r3, sp, #48	; 0x30
 800a59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a5a6:	e7f4      	b.n	800a592 <__kernel_rem_pio2+0x352>
 800a5a8:	a90c      	add	r1, sp, #48	; 0x30
 800a5aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	e788      	b.n	800a4c6 <__kernel_rem_pio2+0x286>
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a5ba:	2900      	cmp	r1, #0
 800a5bc:	d0fa      	beq.n	800a5b4 <__kernel_rem_pio2+0x374>
 800a5be:	9a08      	ldr	r2, [sp, #32]
 800a5c0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800a5c4:	446a      	add	r2, sp
 800a5c6:	3a98      	subs	r2, #152	; 0x98
 800a5c8:	9208      	str	r2, [sp, #32]
 800a5ca:	9a06      	ldr	r2, [sp, #24]
 800a5cc:	a920      	add	r1, sp, #128	; 0x80
 800a5ce:	18a2      	adds	r2, r4, r2
 800a5d0:	18e3      	adds	r3, r4, r3
 800a5d2:	f104 0801 	add.w	r8, r4, #1
 800a5d6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a5da:	9302      	str	r3, [sp, #8]
 800a5dc:	9b02      	ldr	r3, [sp, #8]
 800a5de:	4543      	cmp	r3, r8
 800a5e0:	da04      	bge.n	800a5ec <__kernel_rem_pio2+0x3ac>
 800a5e2:	461c      	mov	r4, r3
 800a5e4:	e6a2      	b.n	800a32c <__kernel_rem_pio2+0xec>
 800a5e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e7e4      	b.n	800a5b6 <__kernel_rem_pio2+0x376>
 800a5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a5f2:	f7f5 ff97 	bl	8000524 <__aeabi_i2d>
 800a5f6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5fc:	46ab      	mov	fp, r5
 800a5fe:	461c      	mov	r4, r3
 800a600:	f04f 0900 	mov.w	r9, #0
 800a604:	2600      	movs	r6, #0
 800a606:	2700      	movs	r7, #0
 800a608:	9b05      	ldr	r3, [sp, #20]
 800a60a:	4599      	cmp	r9, r3
 800a60c:	dd06      	ble.n	800a61c <__kernel_rem_pio2+0x3dc>
 800a60e:	9b08      	ldr	r3, [sp, #32]
 800a610:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a614:	f108 0801 	add.w	r8, r8, #1
 800a618:	9308      	str	r3, [sp, #32]
 800a61a:	e7df      	b.n	800a5dc <__kernel_rem_pio2+0x39c>
 800a61c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a620:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a624:	f7f5 ffe8 	bl	80005f8 <__aeabi_dmul>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4630      	mov	r0, r6
 800a62e:	4639      	mov	r1, r7
 800a630:	f7f5 fe2c 	bl	800028c <__adddf3>
 800a634:	f109 0901 	add.w	r9, r9, #1
 800a638:	4606      	mov	r6, r0
 800a63a:	460f      	mov	r7, r1
 800a63c:	e7e4      	b.n	800a608 <__kernel_rem_pio2+0x3c8>
 800a63e:	3d01      	subs	r5, #1
 800a640:	e747      	b.n	800a4d2 <__kernel_rem_pio2+0x292>
 800a642:	ec47 6b10 	vmov	d0, r6, r7
 800a646:	f1ca 0000 	rsb	r0, sl, #0
 800a64a:	f000 f949 	bl	800a8e0 <scalbn>
 800a64e:	ec57 6b10 	vmov	r6, r7, d0
 800a652:	4ba0      	ldr	r3, [pc, #640]	; (800a8d4 <__kernel_rem_pio2+0x694>)
 800a654:	ee10 0a10 	vmov	r0, s0
 800a658:	2200      	movs	r2, #0
 800a65a:	4639      	mov	r1, r7
 800a65c:	f7f6 fa52 	bl	8000b04 <__aeabi_dcmpge>
 800a660:	b1f8      	cbz	r0, 800a6a2 <__kernel_rem_pio2+0x462>
 800a662:	4b9d      	ldr	r3, [pc, #628]	; (800a8d8 <__kernel_rem_pio2+0x698>)
 800a664:	2200      	movs	r2, #0
 800a666:	4630      	mov	r0, r6
 800a668:	4639      	mov	r1, r7
 800a66a:	f7f5 ffc5 	bl	80005f8 <__aeabi_dmul>
 800a66e:	f7f6 fa73 	bl	8000b58 <__aeabi_d2iz>
 800a672:	4680      	mov	r8, r0
 800a674:	f7f5 ff56 	bl	8000524 <__aeabi_i2d>
 800a678:	4b96      	ldr	r3, [pc, #600]	; (800a8d4 <__kernel_rem_pio2+0x694>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	f7f5 ffbc 	bl	80005f8 <__aeabi_dmul>
 800a680:	460b      	mov	r3, r1
 800a682:	4602      	mov	r2, r0
 800a684:	4639      	mov	r1, r7
 800a686:	4630      	mov	r0, r6
 800a688:	f7f5 fdfe 	bl	8000288 <__aeabi_dsub>
 800a68c:	f7f6 fa64 	bl	8000b58 <__aeabi_d2iz>
 800a690:	1c65      	adds	r5, r4, #1
 800a692:	ab0c      	add	r3, sp, #48	; 0x30
 800a694:	f10a 0a18 	add.w	sl, sl, #24
 800a698:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a69c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a6a0:	e71f      	b.n	800a4e2 <__kernel_rem_pio2+0x2a2>
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	f7f6 fa57 	bl	8000b58 <__aeabi_d2iz>
 800a6aa:	ab0c      	add	r3, sp, #48	; 0x30
 800a6ac:	4625      	mov	r5, r4
 800a6ae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a6b2:	e716      	b.n	800a4e2 <__kernel_rem_pio2+0x2a2>
 800a6b4:	ab0c      	add	r3, sp, #48	; 0x30
 800a6b6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a6ba:	f7f5 ff33 	bl	8000524 <__aeabi_i2d>
 800a6be:	4632      	mov	r2, r6
 800a6c0:	463b      	mov	r3, r7
 800a6c2:	f7f5 ff99 	bl	80005f8 <__aeabi_dmul>
 800a6c6:	4642      	mov	r2, r8
 800a6c8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a6cc:	464b      	mov	r3, r9
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	4639      	mov	r1, r7
 800a6d2:	f7f5 ff91 	bl	80005f8 <__aeabi_dmul>
 800a6d6:	3c01      	subs	r4, #1
 800a6d8:	4606      	mov	r6, r0
 800a6da:	460f      	mov	r7, r1
 800a6dc:	e713      	b.n	800a506 <__kernel_rem_pio2+0x2c6>
 800a6de:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a6e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800a6e6:	f7f5 ff87 	bl	80005f8 <__aeabi_dmul>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4648      	mov	r0, r9
 800a6f0:	4651      	mov	r1, sl
 800a6f2:	f7f5 fdcb 	bl	800028c <__adddf3>
 800a6f6:	3701      	adds	r7, #1
 800a6f8:	4681      	mov	r9, r0
 800a6fa:	468a      	mov	sl, r1
 800a6fc:	9b00      	ldr	r3, [sp, #0]
 800a6fe:	429f      	cmp	r7, r3
 800a700:	dc02      	bgt.n	800a708 <__kernel_rem_pio2+0x4c8>
 800a702:	9b06      	ldr	r3, [sp, #24]
 800a704:	429f      	cmp	r7, r3
 800a706:	ddea      	ble.n	800a6de <__kernel_rem_pio2+0x49e>
 800a708:	9a06      	ldr	r2, [sp, #24]
 800a70a:	ab48      	add	r3, sp, #288	; 0x120
 800a70c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800a710:	e9c6 9a00 	strd	r9, sl, [r6]
 800a714:	3c01      	subs	r4, #1
 800a716:	e6fa      	b.n	800a50e <__kernel_rem_pio2+0x2ce>
 800a718:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	dc0b      	bgt.n	800a736 <__kernel_rem_pio2+0x4f6>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	dc39      	bgt.n	800a796 <__kernel_rem_pio2+0x556>
 800a722:	d05d      	beq.n	800a7e0 <__kernel_rem_pio2+0x5a0>
 800a724:	9b02      	ldr	r3, [sp, #8]
 800a726:	f003 0007 	and.w	r0, r3, #7
 800a72a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a72e:	ecbd 8b02 	vpop	{d8}
 800a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a736:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a738:	2b03      	cmp	r3, #3
 800a73a:	d1f3      	bne.n	800a724 <__kernel_rem_pio2+0x4e4>
 800a73c:	9b05      	ldr	r3, [sp, #20]
 800a73e:	9500      	str	r5, [sp, #0]
 800a740:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a744:	eb0d 0403 	add.w	r4, sp, r3
 800a748:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800a74c:	46a2      	mov	sl, r4
 800a74e:	9b00      	ldr	r3, [sp, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	f1aa 0a08 	sub.w	sl, sl, #8
 800a756:	dc69      	bgt.n	800a82c <__kernel_rem_pio2+0x5ec>
 800a758:	46aa      	mov	sl, r5
 800a75a:	f1ba 0f01 	cmp.w	sl, #1
 800a75e:	f1a4 0408 	sub.w	r4, r4, #8
 800a762:	f300 8083 	bgt.w	800a86c <__kernel_rem_pio2+0x62c>
 800a766:	9c05      	ldr	r4, [sp, #20]
 800a768:	ab48      	add	r3, sp, #288	; 0x120
 800a76a:	441c      	add	r4, r3
 800a76c:	2000      	movs	r0, #0
 800a76e:	2100      	movs	r1, #0
 800a770:	2d01      	cmp	r5, #1
 800a772:	f300 809a 	bgt.w	800a8aa <__kernel_rem_pio2+0x66a>
 800a776:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800a77a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a77e:	f1bb 0f00 	cmp.w	fp, #0
 800a782:	f040 8098 	bne.w	800a8b6 <__kernel_rem_pio2+0x676>
 800a786:	9b04      	ldr	r3, [sp, #16]
 800a788:	e9c3 7800 	strd	r7, r8, [r3]
 800a78c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a790:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a794:	e7c6      	b.n	800a724 <__kernel_rem_pio2+0x4e4>
 800a796:	9e05      	ldr	r6, [sp, #20]
 800a798:	ab48      	add	r3, sp, #288	; 0x120
 800a79a:	441e      	add	r6, r3
 800a79c:	462c      	mov	r4, r5
 800a79e:	2000      	movs	r0, #0
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	2c00      	cmp	r4, #0
 800a7a4:	da33      	bge.n	800a80e <__kernel_rem_pio2+0x5ce>
 800a7a6:	f1bb 0f00 	cmp.w	fp, #0
 800a7aa:	d036      	beq.n	800a81a <__kernel_rem_pio2+0x5da>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7b2:	9c04      	ldr	r4, [sp, #16]
 800a7b4:	e9c4 2300 	strd	r2, r3, [r4]
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a7c0:	f7f5 fd62 	bl	8000288 <__aeabi_dsub>
 800a7c4:	ae4a      	add	r6, sp, #296	; 0x128
 800a7c6:	2401      	movs	r4, #1
 800a7c8:	42a5      	cmp	r5, r4
 800a7ca:	da29      	bge.n	800a820 <__kernel_rem_pio2+0x5e0>
 800a7cc:	f1bb 0f00 	cmp.w	fp, #0
 800a7d0:	d002      	beq.n	800a7d8 <__kernel_rem_pio2+0x598>
 800a7d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	9b04      	ldr	r3, [sp, #16]
 800a7da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a7de:	e7a1      	b.n	800a724 <__kernel_rem_pio2+0x4e4>
 800a7e0:	9c05      	ldr	r4, [sp, #20]
 800a7e2:	ab48      	add	r3, sp, #288	; 0x120
 800a7e4:	441c      	add	r4, r3
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	2d00      	cmp	r5, #0
 800a7ec:	da09      	bge.n	800a802 <__kernel_rem_pio2+0x5c2>
 800a7ee:	f1bb 0f00 	cmp.w	fp, #0
 800a7f2:	d002      	beq.n	800a7fa <__kernel_rem_pio2+0x5ba>
 800a7f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	9b04      	ldr	r3, [sp, #16]
 800a7fc:	e9c3 0100 	strd	r0, r1, [r3]
 800a800:	e790      	b.n	800a724 <__kernel_rem_pio2+0x4e4>
 800a802:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a806:	f7f5 fd41 	bl	800028c <__adddf3>
 800a80a:	3d01      	subs	r5, #1
 800a80c:	e7ed      	b.n	800a7ea <__kernel_rem_pio2+0x5aa>
 800a80e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a812:	f7f5 fd3b 	bl	800028c <__adddf3>
 800a816:	3c01      	subs	r4, #1
 800a818:	e7c3      	b.n	800a7a2 <__kernel_rem_pio2+0x562>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	e7c8      	b.n	800a7b2 <__kernel_rem_pio2+0x572>
 800a820:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a824:	f7f5 fd32 	bl	800028c <__adddf3>
 800a828:	3401      	adds	r4, #1
 800a82a:	e7cd      	b.n	800a7c8 <__kernel_rem_pio2+0x588>
 800a82c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a830:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a834:	9b00      	ldr	r3, [sp, #0]
 800a836:	3b01      	subs	r3, #1
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	4632      	mov	r2, r6
 800a83c:	463b      	mov	r3, r7
 800a83e:	4640      	mov	r0, r8
 800a840:	4649      	mov	r1, r9
 800a842:	f7f5 fd23 	bl	800028c <__adddf3>
 800a846:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	4640      	mov	r0, r8
 800a850:	4649      	mov	r1, r9
 800a852:	f7f5 fd19 	bl	8000288 <__aeabi_dsub>
 800a856:	4632      	mov	r2, r6
 800a858:	463b      	mov	r3, r7
 800a85a:	f7f5 fd17 	bl	800028c <__adddf3>
 800a85e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a862:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a866:	ed8a 7b00 	vstr	d7, [sl]
 800a86a:	e770      	b.n	800a74e <__kernel_rem_pio2+0x50e>
 800a86c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a870:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a874:	4640      	mov	r0, r8
 800a876:	4632      	mov	r2, r6
 800a878:	463b      	mov	r3, r7
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f5 fd06 	bl	800028c <__adddf3>
 800a880:	e9cd 0100 	strd	r0, r1, [sp]
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4640      	mov	r0, r8
 800a88a:	4649      	mov	r1, r9
 800a88c:	f7f5 fcfc 	bl	8000288 <__aeabi_dsub>
 800a890:	4632      	mov	r2, r6
 800a892:	463b      	mov	r3, r7
 800a894:	f7f5 fcfa 	bl	800028c <__adddf3>
 800a898:	ed9d 7b00 	vldr	d7, [sp]
 800a89c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a8a0:	ed84 7b00 	vstr	d7, [r4]
 800a8a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8a8:	e757      	b.n	800a75a <__kernel_rem_pio2+0x51a>
 800a8aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a8ae:	f7f5 fced 	bl	800028c <__adddf3>
 800a8b2:	3d01      	subs	r5, #1
 800a8b4:	e75c      	b.n	800a770 <__kernel_rem_pio2+0x530>
 800a8b6:	9b04      	ldr	r3, [sp, #16]
 800a8b8:	9a04      	ldr	r2, [sp, #16]
 800a8ba:	601f      	str	r7, [r3, #0]
 800a8bc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a8c0:	605c      	str	r4, [r3, #4]
 800a8c2:	609d      	str	r5, [r3, #8]
 800a8c4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a8c8:	60d3      	str	r3, [r2, #12]
 800a8ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8ce:	6110      	str	r0, [r2, #16]
 800a8d0:	6153      	str	r3, [r2, #20]
 800a8d2:	e727      	b.n	800a724 <__kernel_rem_pio2+0x4e4>
 800a8d4:	41700000 	.word	0x41700000
 800a8d8:	3e700000 	.word	0x3e700000
 800a8dc:	00000000 	.word	0x00000000

0800a8e0 <scalbn>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	ec55 4b10 	vmov	r4, r5, d0
 800a8e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	462b      	mov	r3, r5
 800a8ee:	b999      	cbnz	r1, 800a918 <scalbn+0x38>
 800a8f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8f4:	4323      	orrs	r3, r4
 800a8f6:	d03f      	beq.n	800a978 <scalbn+0x98>
 800a8f8:	4b35      	ldr	r3, [pc, #212]	; (800a9d0 <scalbn+0xf0>)
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	ee10 0a10 	vmov	r0, s0
 800a900:	2200      	movs	r2, #0
 800a902:	f7f5 fe79 	bl	80005f8 <__aeabi_dmul>
 800a906:	4b33      	ldr	r3, [pc, #204]	; (800a9d4 <scalbn+0xf4>)
 800a908:	429e      	cmp	r6, r3
 800a90a:	4604      	mov	r4, r0
 800a90c:	460d      	mov	r5, r1
 800a90e:	da10      	bge.n	800a932 <scalbn+0x52>
 800a910:	a327      	add	r3, pc, #156	; (adr r3, 800a9b0 <scalbn+0xd0>)
 800a912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a916:	e01f      	b.n	800a958 <scalbn+0x78>
 800a918:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a91c:	4291      	cmp	r1, r2
 800a91e:	d10c      	bne.n	800a93a <scalbn+0x5a>
 800a920:	ee10 2a10 	vmov	r2, s0
 800a924:	4620      	mov	r0, r4
 800a926:	4629      	mov	r1, r5
 800a928:	f7f5 fcb0 	bl	800028c <__adddf3>
 800a92c:	4604      	mov	r4, r0
 800a92e:	460d      	mov	r5, r1
 800a930:	e022      	b.n	800a978 <scalbn+0x98>
 800a932:	460b      	mov	r3, r1
 800a934:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a938:	3936      	subs	r1, #54	; 0x36
 800a93a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a93e:	4296      	cmp	r6, r2
 800a940:	dd0d      	ble.n	800a95e <scalbn+0x7e>
 800a942:	2d00      	cmp	r5, #0
 800a944:	a11c      	add	r1, pc, #112	; (adr r1, 800a9b8 <scalbn+0xd8>)
 800a946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a94a:	da02      	bge.n	800a952 <scalbn+0x72>
 800a94c:	a11c      	add	r1, pc, #112	; (adr r1, 800a9c0 <scalbn+0xe0>)
 800a94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a952:	a319      	add	r3, pc, #100	; (adr r3, 800a9b8 <scalbn+0xd8>)
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	f7f5 fe4e 	bl	80005f8 <__aeabi_dmul>
 800a95c:	e7e6      	b.n	800a92c <scalbn+0x4c>
 800a95e:	1872      	adds	r2, r6, r1
 800a960:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a964:	428a      	cmp	r2, r1
 800a966:	dcec      	bgt.n	800a942 <scalbn+0x62>
 800a968:	2a00      	cmp	r2, #0
 800a96a:	dd08      	ble.n	800a97e <scalbn+0x9e>
 800a96c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a970:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a974:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a978:	ec45 4b10 	vmov	d0, r4, r5
 800a97c:	bd70      	pop	{r4, r5, r6, pc}
 800a97e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a982:	da08      	bge.n	800a996 <scalbn+0xb6>
 800a984:	2d00      	cmp	r5, #0
 800a986:	a10a      	add	r1, pc, #40	; (adr r1, 800a9b0 <scalbn+0xd0>)
 800a988:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a98c:	dac0      	bge.n	800a910 <scalbn+0x30>
 800a98e:	a10e      	add	r1, pc, #56	; (adr r1, 800a9c8 <scalbn+0xe8>)
 800a990:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a994:	e7bc      	b.n	800a910 <scalbn+0x30>
 800a996:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a99a:	3236      	adds	r2, #54	; 0x36
 800a99c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a9a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	4b0c      	ldr	r3, [pc, #48]	; (800a9d8 <scalbn+0xf8>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	e7d5      	b.n	800a958 <scalbn+0x78>
 800a9ac:	f3af 8000 	nop.w
 800a9b0:	c2f8f359 	.word	0xc2f8f359
 800a9b4:	01a56e1f 	.word	0x01a56e1f
 800a9b8:	8800759c 	.word	0x8800759c
 800a9bc:	7e37e43c 	.word	0x7e37e43c
 800a9c0:	8800759c 	.word	0x8800759c
 800a9c4:	fe37e43c 	.word	0xfe37e43c
 800a9c8:	c2f8f359 	.word	0xc2f8f359
 800a9cc:	81a56e1f 	.word	0x81a56e1f
 800a9d0:	43500000 	.word	0x43500000
 800a9d4:	ffff3cb0 	.word	0xffff3cb0
 800a9d8:	3c900000 	.word	0x3c900000
 800a9dc:	00000000 	.word	0x00000000

0800a9e0 <floor>:
 800a9e0:	ec51 0b10 	vmov	r0, r1, d0
 800a9e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ec:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800a9f0:	2e13      	cmp	r6, #19
 800a9f2:	ee10 5a10 	vmov	r5, s0
 800a9f6:	ee10 8a10 	vmov	r8, s0
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	dc31      	bgt.n	800aa62 <floor+0x82>
 800a9fe:	2e00      	cmp	r6, #0
 800aa00:	da14      	bge.n	800aa2c <floor+0x4c>
 800aa02:	a333      	add	r3, pc, #204	; (adr r3, 800aad0 <floor+0xf0>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fc40 	bl	800028c <__adddf3>
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f7f6 f882 	bl	8000b18 <__aeabi_dcmpgt>
 800aa14:	b138      	cbz	r0, 800aa26 <floor+0x46>
 800aa16:	2c00      	cmp	r4, #0
 800aa18:	da53      	bge.n	800aac2 <floor+0xe2>
 800aa1a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800aa1e:	4325      	orrs	r5, r4
 800aa20:	d052      	beq.n	800aac8 <floor+0xe8>
 800aa22:	4c2d      	ldr	r4, [pc, #180]	; (800aad8 <floor+0xf8>)
 800aa24:	2500      	movs	r5, #0
 800aa26:	4621      	mov	r1, r4
 800aa28:	4628      	mov	r0, r5
 800aa2a:	e024      	b.n	800aa76 <floor+0x96>
 800aa2c:	4f2b      	ldr	r7, [pc, #172]	; (800aadc <floor+0xfc>)
 800aa2e:	4137      	asrs	r7, r6
 800aa30:	ea01 0307 	and.w	r3, r1, r7
 800aa34:	4303      	orrs	r3, r0
 800aa36:	d01e      	beq.n	800aa76 <floor+0x96>
 800aa38:	a325      	add	r3, pc, #148	; (adr r3, 800aad0 <floor+0xf0>)
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	f7f5 fc25 	bl	800028c <__adddf3>
 800aa42:	2200      	movs	r2, #0
 800aa44:	2300      	movs	r3, #0
 800aa46:	f7f6 f867 	bl	8000b18 <__aeabi_dcmpgt>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d0eb      	beq.n	800aa26 <floor+0x46>
 800aa4e:	2c00      	cmp	r4, #0
 800aa50:	bfbe      	ittt	lt
 800aa52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aa56:	4133      	asrlt	r3, r6
 800aa58:	18e4      	addlt	r4, r4, r3
 800aa5a:	ea24 0407 	bic.w	r4, r4, r7
 800aa5e:	2500      	movs	r5, #0
 800aa60:	e7e1      	b.n	800aa26 <floor+0x46>
 800aa62:	2e33      	cmp	r6, #51	; 0x33
 800aa64:	dd0b      	ble.n	800aa7e <floor+0x9e>
 800aa66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aa6a:	d104      	bne.n	800aa76 <floor+0x96>
 800aa6c:	ee10 2a10 	vmov	r2, s0
 800aa70:	460b      	mov	r3, r1
 800aa72:	f7f5 fc0b 	bl	800028c <__adddf3>
 800aa76:	ec41 0b10 	vmov	d0, r0, r1
 800aa7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa7e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800aa82:	f04f 37ff 	mov.w	r7, #4294967295
 800aa86:	40df      	lsrs	r7, r3
 800aa88:	4238      	tst	r0, r7
 800aa8a:	d0f4      	beq.n	800aa76 <floor+0x96>
 800aa8c:	a310      	add	r3, pc, #64	; (adr r3, 800aad0 <floor+0xf0>)
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	f7f5 fbfb 	bl	800028c <__adddf3>
 800aa96:	2200      	movs	r2, #0
 800aa98:	2300      	movs	r3, #0
 800aa9a:	f7f6 f83d 	bl	8000b18 <__aeabi_dcmpgt>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d0c1      	beq.n	800aa26 <floor+0x46>
 800aaa2:	2c00      	cmp	r4, #0
 800aaa4:	da0a      	bge.n	800aabc <floor+0xdc>
 800aaa6:	2e14      	cmp	r6, #20
 800aaa8:	d101      	bne.n	800aaae <floor+0xce>
 800aaaa:	3401      	adds	r4, #1
 800aaac:	e006      	b.n	800aabc <floor+0xdc>
 800aaae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800aab2:	2301      	movs	r3, #1
 800aab4:	40b3      	lsls	r3, r6
 800aab6:	441d      	add	r5, r3
 800aab8:	45a8      	cmp	r8, r5
 800aaba:	d8f6      	bhi.n	800aaaa <floor+0xca>
 800aabc:	ea25 0507 	bic.w	r5, r5, r7
 800aac0:	e7b1      	b.n	800aa26 <floor+0x46>
 800aac2:	2500      	movs	r5, #0
 800aac4:	462c      	mov	r4, r5
 800aac6:	e7ae      	b.n	800aa26 <floor+0x46>
 800aac8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800aacc:	e7ab      	b.n	800aa26 <floor+0x46>
 800aace:	bf00      	nop
 800aad0:	8800759c 	.word	0x8800759c
 800aad4:	7e37e43c 	.word	0x7e37e43c
 800aad8:	bff00000 	.word	0xbff00000
 800aadc:	000fffff 	.word	0x000fffff

0800aae0 <__cvt>:
 800aae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aae4:	ec55 4b10 	vmov	r4, r5, d0
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	460e      	mov	r6, r1
 800aaec:	4619      	mov	r1, r3
 800aaee:	462b      	mov	r3, r5
 800aaf0:	bfbb      	ittet	lt
 800aaf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aaf6:	461d      	movlt	r5, r3
 800aaf8:	2300      	movge	r3, #0
 800aafa:	232d      	movlt	r3, #45	; 0x2d
 800aafc:	700b      	strb	r3, [r1, #0]
 800aafe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab04:	4691      	mov	r9, r2
 800ab06:	f023 0820 	bic.w	r8, r3, #32
 800ab0a:	bfbc      	itt	lt
 800ab0c:	4622      	movlt	r2, r4
 800ab0e:	4614      	movlt	r4, r2
 800ab10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab14:	d005      	beq.n	800ab22 <__cvt+0x42>
 800ab16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab1a:	d100      	bne.n	800ab1e <__cvt+0x3e>
 800ab1c:	3601      	adds	r6, #1
 800ab1e:	2102      	movs	r1, #2
 800ab20:	e000      	b.n	800ab24 <__cvt+0x44>
 800ab22:	2103      	movs	r1, #3
 800ab24:	ab03      	add	r3, sp, #12
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	ab02      	add	r3, sp, #8
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	ec45 4b10 	vmov	d0, r4, r5
 800ab30:	4653      	mov	r3, sl
 800ab32:	4632      	mov	r2, r6
 800ab34:	f000 fe54 	bl	800b7e0 <_dtoa_r>
 800ab38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	d102      	bne.n	800ab46 <__cvt+0x66>
 800ab40:	f019 0f01 	tst.w	r9, #1
 800ab44:	d022      	beq.n	800ab8c <__cvt+0xac>
 800ab46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab4a:	eb07 0906 	add.w	r9, r7, r6
 800ab4e:	d110      	bne.n	800ab72 <__cvt+0x92>
 800ab50:	783b      	ldrb	r3, [r7, #0]
 800ab52:	2b30      	cmp	r3, #48	; 0x30
 800ab54:	d10a      	bne.n	800ab6c <__cvt+0x8c>
 800ab56:	2200      	movs	r2, #0
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	f7f5 ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab62:	b918      	cbnz	r0, 800ab6c <__cvt+0x8c>
 800ab64:	f1c6 0601 	rsb	r6, r6, #1
 800ab68:	f8ca 6000 	str.w	r6, [sl]
 800ab6c:	f8da 3000 	ldr.w	r3, [sl]
 800ab70:	4499      	add	r9, r3
 800ab72:	2200      	movs	r2, #0
 800ab74:	2300      	movs	r3, #0
 800ab76:	4620      	mov	r0, r4
 800ab78:	4629      	mov	r1, r5
 800ab7a:	f7f5 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab7e:	b108      	cbz	r0, 800ab84 <__cvt+0xa4>
 800ab80:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab84:	2230      	movs	r2, #48	; 0x30
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	454b      	cmp	r3, r9
 800ab8a:	d307      	bcc.n	800ab9c <__cvt+0xbc>
 800ab8c:	9b03      	ldr	r3, [sp, #12]
 800ab8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab90:	1bdb      	subs	r3, r3, r7
 800ab92:	4638      	mov	r0, r7
 800ab94:	6013      	str	r3, [r2, #0]
 800ab96:	b004      	add	sp, #16
 800ab98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab9c:	1c59      	adds	r1, r3, #1
 800ab9e:	9103      	str	r1, [sp, #12]
 800aba0:	701a      	strb	r2, [r3, #0]
 800aba2:	e7f0      	b.n	800ab86 <__cvt+0xa6>

0800aba4 <__exponent>:
 800aba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba6:	4603      	mov	r3, r0
 800aba8:	2900      	cmp	r1, #0
 800abaa:	bfb8      	it	lt
 800abac:	4249      	neglt	r1, r1
 800abae:	f803 2b02 	strb.w	r2, [r3], #2
 800abb2:	bfb4      	ite	lt
 800abb4:	222d      	movlt	r2, #45	; 0x2d
 800abb6:	222b      	movge	r2, #43	; 0x2b
 800abb8:	2909      	cmp	r1, #9
 800abba:	7042      	strb	r2, [r0, #1]
 800abbc:	dd2a      	ble.n	800ac14 <__exponent+0x70>
 800abbe:	f10d 0207 	add.w	r2, sp, #7
 800abc2:	4617      	mov	r7, r2
 800abc4:	260a      	movs	r6, #10
 800abc6:	4694      	mov	ip, r2
 800abc8:	fb91 f5f6 	sdiv	r5, r1, r6
 800abcc:	fb06 1415 	mls	r4, r6, r5, r1
 800abd0:	3430      	adds	r4, #48	; 0x30
 800abd2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800abd6:	460c      	mov	r4, r1
 800abd8:	2c63      	cmp	r4, #99	; 0x63
 800abda:	f102 32ff 	add.w	r2, r2, #4294967295
 800abde:	4629      	mov	r1, r5
 800abe0:	dcf1      	bgt.n	800abc6 <__exponent+0x22>
 800abe2:	3130      	adds	r1, #48	; 0x30
 800abe4:	f1ac 0402 	sub.w	r4, ip, #2
 800abe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800abec:	1c41      	adds	r1, r0, #1
 800abee:	4622      	mov	r2, r4
 800abf0:	42ba      	cmp	r2, r7
 800abf2:	d30a      	bcc.n	800ac0a <__exponent+0x66>
 800abf4:	f10d 0209 	add.w	r2, sp, #9
 800abf8:	eba2 020c 	sub.w	r2, r2, ip
 800abfc:	42bc      	cmp	r4, r7
 800abfe:	bf88      	it	hi
 800ac00:	2200      	movhi	r2, #0
 800ac02:	4413      	add	r3, r2
 800ac04:	1a18      	subs	r0, r3, r0
 800ac06:	b003      	add	sp, #12
 800ac08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ac0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ac12:	e7ed      	b.n	800abf0 <__exponent+0x4c>
 800ac14:	2330      	movs	r3, #48	; 0x30
 800ac16:	3130      	adds	r1, #48	; 0x30
 800ac18:	7083      	strb	r3, [r0, #2]
 800ac1a:	70c1      	strb	r1, [r0, #3]
 800ac1c:	1d03      	adds	r3, r0, #4
 800ac1e:	e7f1      	b.n	800ac04 <__exponent+0x60>

0800ac20 <_printf_float>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	ed2d 8b02 	vpush	{d8}
 800ac28:	b08d      	sub	sp, #52	; 0x34
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac30:	4616      	mov	r6, r2
 800ac32:	461f      	mov	r7, r3
 800ac34:	4605      	mov	r5, r0
 800ac36:	f000 fcd5 	bl	800b5e4 <_localeconv_r>
 800ac3a:	f8d0 a000 	ldr.w	sl, [r0]
 800ac3e:	4650      	mov	r0, sl
 800ac40:	f7f5 fb16 	bl	8000270 <strlen>
 800ac44:	2300      	movs	r3, #0
 800ac46:	930a      	str	r3, [sp, #40]	; 0x28
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	9305      	str	r3, [sp, #20]
 800ac4c:	f8d8 3000 	ldr.w	r3, [r8]
 800ac50:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac54:	3307      	adds	r3, #7
 800ac56:	f023 0307 	bic.w	r3, r3, #7
 800ac5a:	f103 0208 	add.w	r2, r3, #8
 800ac5e:	f8c8 2000 	str.w	r2, [r8]
 800ac62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac6a:	9307      	str	r3, [sp, #28]
 800ac6c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac70:	ee08 0a10 	vmov	s16, r0
 800ac74:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ac78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac7c:	4b9e      	ldr	r3, [pc, #632]	; (800aef8 <_printf_float+0x2d8>)
 800ac7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac82:	f7f5 ff53 	bl	8000b2c <__aeabi_dcmpun>
 800ac86:	bb88      	cbnz	r0, 800acec <_printf_float+0xcc>
 800ac88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac8c:	4b9a      	ldr	r3, [pc, #616]	; (800aef8 <_printf_float+0x2d8>)
 800ac8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac92:	f7f5 ff2d 	bl	8000af0 <__aeabi_dcmple>
 800ac96:	bb48      	cbnz	r0, 800acec <_printf_float+0xcc>
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4640      	mov	r0, r8
 800ac9e:	4649      	mov	r1, r9
 800aca0:	f7f5 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800aca4:	b110      	cbz	r0, 800acac <_printf_float+0x8c>
 800aca6:	232d      	movs	r3, #45	; 0x2d
 800aca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acac:	4a93      	ldr	r2, [pc, #588]	; (800aefc <_printf_float+0x2dc>)
 800acae:	4b94      	ldr	r3, [pc, #592]	; (800af00 <_printf_float+0x2e0>)
 800acb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800acb4:	bf94      	ite	ls
 800acb6:	4690      	movls	r8, r2
 800acb8:	4698      	movhi	r8, r3
 800acba:	2303      	movs	r3, #3
 800acbc:	6123      	str	r3, [r4, #16]
 800acbe:	9b05      	ldr	r3, [sp, #20]
 800acc0:	f023 0304 	bic.w	r3, r3, #4
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	f04f 0900 	mov.w	r9, #0
 800acca:	9700      	str	r7, [sp, #0]
 800accc:	4633      	mov	r3, r6
 800acce:	aa0b      	add	r2, sp, #44	; 0x2c
 800acd0:	4621      	mov	r1, r4
 800acd2:	4628      	mov	r0, r5
 800acd4:	f000 f9da 	bl	800b08c <_printf_common>
 800acd8:	3001      	adds	r0, #1
 800acda:	f040 8090 	bne.w	800adfe <_printf_float+0x1de>
 800acde:	f04f 30ff 	mov.w	r0, #4294967295
 800ace2:	b00d      	add	sp, #52	; 0x34
 800ace4:	ecbd 8b02 	vpop	{d8}
 800ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acec:	4642      	mov	r2, r8
 800acee:	464b      	mov	r3, r9
 800acf0:	4640      	mov	r0, r8
 800acf2:	4649      	mov	r1, r9
 800acf4:	f7f5 ff1a 	bl	8000b2c <__aeabi_dcmpun>
 800acf8:	b140      	cbz	r0, 800ad0c <_printf_float+0xec>
 800acfa:	464b      	mov	r3, r9
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	bfbc      	itt	lt
 800ad00:	232d      	movlt	r3, #45	; 0x2d
 800ad02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad06:	4a7f      	ldr	r2, [pc, #508]	; (800af04 <_printf_float+0x2e4>)
 800ad08:	4b7f      	ldr	r3, [pc, #508]	; (800af08 <_printf_float+0x2e8>)
 800ad0a:	e7d1      	b.n	800acb0 <_printf_float+0x90>
 800ad0c:	6863      	ldr	r3, [r4, #4]
 800ad0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad12:	9206      	str	r2, [sp, #24]
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	d13f      	bne.n	800ad98 <_printf_float+0x178>
 800ad18:	2306      	movs	r3, #6
 800ad1a:	6063      	str	r3, [r4, #4]
 800ad1c:	9b05      	ldr	r3, [sp, #20]
 800ad1e:	6861      	ldr	r1, [r4, #4]
 800ad20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad24:	2300      	movs	r3, #0
 800ad26:	9303      	str	r3, [sp, #12]
 800ad28:	ab0a      	add	r3, sp, #40	; 0x28
 800ad2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad2e:	ab09      	add	r3, sp, #36	; 0x24
 800ad30:	ec49 8b10 	vmov	d0, r8, r9
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	6022      	str	r2, [r4, #0]
 800ad38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f7ff fecf 	bl	800aae0 <__cvt>
 800ad42:	9b06      	ldr	r3, [sp, #24]
 800ad44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad46:	2b47      	cmp	r3, #71	; 0x47
 800ad48:	4680      	mov	r8, r0
 800ad4a:	d108      	bne.n	800ad5e <_printf_float+0x13e>
 800ad4c:	1cc8      	adds	r0, r1, #3
 800ad4e:	db02      	blt.n	800ad56 <_printf_float+0x136>
 800ad50:	6863      	ldr	r3, [r4, #4]
 800ad52:	4299      	cmp	r1, r3
 800ad54:	dd41      	ble.n	800adda <_printf_float+0x1ba>
 800ad56:	f1ab 0302 	sub.w	r3, fp, #2
 800ad5a:	fa5f fb83 	uxtb.w	fp, r3
 800ad5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad62:	d820      	bhi.n	800ada6 <_printf_float+0x186>
 800ad64:	3901      	subs	r1, #1
 800ad66:	465a      	mov	r2, fp
 800ad68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad6c:	9109      	str	r1, [sp, #36]	; 0x24
 800ad6e:	f7ff ff19 	bl	800aba4 <__exponent>
 800ad72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad74:	1813      	adds	r3, r2, r0
 800ad76:	2a01      	cmp	r2, #1
 800ad78:	4681      	mov	r9, r0
 800ad7a:	6123      	str	r3, [r4, #16]
 800ad7c:	dc02      	bgt.n	800ad84 <_printf_float+0x164>
 800ad7e:	6822      	ldr	r2, [r4, #0]
 800ad80:	07d2      	lsls	r2, r2, #31
 800ad82:	d501      	bpl.n	800ad88 <_printf_float+0x168>
 800ad84:	3301      	adds	r3, #1
 800ad86:	6123      	str	r3, [r4, #16]
 800ad88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d09c      	beq.n	800acca <_printf_float+0xaa>
 800ad90:	232d      	movs	r3, #45	; 0x2d
 800ad92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad96:	e798      	b.n	800acca <_printf_float+0xaa>
 800ad98:	9a06      	ldr	r2, [sp, #24]
 800ad9a:	2a47      	cmp	r2, #71	; 0x47
 800ad9c:	d1be      	bne.n	800ad1c <_printf_float+0xfc>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1bc      	bne.n	800ad1c <_printf_float+0xfc>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e7b9      	b.n	800ad1a <_printf_float+0xfa>
 800ada6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800adaa:	d118      	bne.n	800adde <_printf_float+0x1be>
 800adac:	2900      	cmp	r1, #0
 800adae:	6863      	ldr	r3, [r4, #4]
 800adb0:	dd0b      	ble.n	800adca <_printf_float+0x1aa>
 800adb2:	6121      	str	r1, [r4, #16]
 800adb4:	b913      	cbnz	r3, 800adbc <_printf_float+0x19c>
 800adb6:	6822      	ldr	r2, [r4, #0]
 800adb8:	07d0      	lsls	r0, r2, #31
 800adba:	d502      	bpl.n	800adc2 <_printf_float+0x1a2>
 800adbc:	3301      	adds	r3, #1
 800adbe:	440b      	add	r3, r1
 800adc0:	6123      	str	r3, [r4, #16]
 800adc2:	65a1      	str	r1, [r4, #88]	; 0x58
 800adc4:	f04f 0900 	mov.w	r9, #0
 800adc8:	e7de      	b.n	800ad88 <_printf_float+0x168>
 800adca:	b913      	cbnz	r3, 800add2 <_printf_float+0x1b2>
 800adcc:	6822      	ldr	r2, [r4, #0]
 800adce:	07d2      	lsls	r2, r2, #31
 800add0:	d501      	bpl.n	800add6 <_printf_float+0x1b6>
 800add2:	3302      	adds	r3, #2
 800add4:	e7f4      	b.n	800adc0 <_printf_float+0x1a0>
 800add6:	2301      	movs	r3, #1
 800add8:	e7f2      	b.n	800adc0 <_printf_float+0x1a0>
 800adda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade0:	4299      	cmp	r1, r3
 800ade2:	db05      	blt.n	800adf0 <_printf_float+0x1d0>
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	6121      	str	r1, [r4, #16]
 800ade8:	07d8      	lsls	r0, r3, #31
 800adea:	d5ea      	bpl.n	800adc2 <_printf_float+0x1a2>
 800adec:	1c4b      	adds	r3, r1, #1
 800adee:	e7e7      	b.n	800adc0 <_printf_float+0x1a0>
 800adf0:	2900      	cmp	r1, #0
 800adf2:	bfd4      	ite	le
 800adf4:	f1c1 0202 	rsble	r2, r1, #2
 800adf8:	2201      	movgt	r2, #1
 800adfa:	4413      	add	r3, r2
 800adfc:	e7e0      	b.n	800adc0 <_printf_float+0x1a0>
 800adfe:	6823      	ldr	r3, [r4, #0]
 800ae00:	055a      	lsls	r2, r3, #21
 800ae02:	d407      	bmi.n	800ae14 <_printf_float+0x1f4>
 800ae04:	6923      	ldr	r3, [r4, #16]
 800ae06:	4642      	mov	r2, r8
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	47b8      	blx	r7
 800ae0e:	3001      	adds	r0, #1
 800ae10:	d12c      	bne.n	800ae6c <_printf_float+0x24c>
 800ae12:	e764      	b.n	800acde <_printf_float+0xbe>
 800ae14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae18:	f240 80e0 	bls.w	800afdc <_printf_float+0x3bc>
 800ae1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae20:	2200      	movs	r2, #0
 800ae22:	2300      	movs	r3, #0
 800ae24:	f7f5 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	d034      	beq.n	800ae96 <_printf_float+0x276>
 800ae2c:	4a37      	ldr	r2, [pc, #220]	; (800af0c <_printf_float+0x2ec>)
 800ae2e:	2301      	movs	r3, #1
 800ae30:	4631      	mov	r1, r6
 800ae32:	4628      	mov	r0, r5
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	f43f af51 	beq.w	800acde <_printf_float+0xbe>
 800ae3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae40:	429a      	cmp	r2, r3
 800ae42:	db02      	blt.n	800ae4a <_printf_float+0x22a>
 800ae44:	6823      	ldr	r3, [r4, #0]
 800ae46:	07d8      	lsls	r0, r3, #31
 800ae48:	d510      	bpl.n	800ae6c <_printf_float+0x24c>
 800ae4a:	ee18 3a10 	vmov	r3, s16
 800ae4e:	4652      	mov	r2, sl
 800ae50:	4631      	mov	r1, r6
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b8      	blx	r7
 800ae56:	3001      	adds	r0, #1
 800ae58:	f43f af41 	beq.w	800acde <_printf_float+0xbe>
 800ae5c:	f04f 0800 	mov.w	r8, #0
 800ae60:	f104 091a 	add.w	r9, r4, #26
 800ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae66:	3b01      	subs	r3, #1
 800ae68:	4543      	cmp	r3, r8
 800ae6a:	dc09      	bgt.n	800ae80 <_printf_float+0x260>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	079b      	lsls	r3, r3, #30
 800ae70:	f100 8107 	bmi.w	800b082 <_printf_float+0x462>
 800ae74:	68e0      	ldr	r0, [r4, #12]
 800ae76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae78:	4298      	cmp	r0, r3
 800ae7a:	bfb8      	it	lt
 800ae7c:	4618      	movlt	r0, r3
 800ae7e:	e730      	b.n	800ace2 <_printf_float+0xc2>
 800ae80:	2301      	movs	r3, #1
 800ae82:	464a      	mov	r2, r9
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	47b8      	blx	r7
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f43f af27 	beq.w	800acde <_printf_float+0xbe>
 800ae90:	f108 0801 	add.w	r8, r8, #1
 800ae94:	e7e6      	b.n	800ae64 <_printf_float+0x244>
 800ae96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dc39      	bgt.n	800af10 <_printf_float+0x2f0>
 800ae9c:	4a1b      	ldr	r2, [pc, #108]	; (800af0c <_printf_float+0x2ec>)
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4631      	mov	r1, r6
 800aea2:	4628      	mov	r0, r5
 800aea4:	47b8      	blx	r7
 800aea6:	3001      	adds	r0, #1
 800aea8:	f43f af19 	beq.w	800acde <_printf_float+0xbe>
 800aeac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aeb0:	4313      	orrs	r3, r2
 800aeb2:	d102      	bne.n	800aeba <_printf_float+0x29a>
 800aeb4:	6823      	ldr	r3, [r4, #0]
 800aeb6:	07d9      	lsls	r1, r3, #31
 800aeb8:	d5d8      	bpl.n	800ae6c <_printf_float+0x24c>
 800aeba:	ee18 3a10 	vmov	r3, s16
 800aebe:	4652      	mov	r2, sl
 800aec0:	4631      	mov	r1, r6
 800aec2:	4628      	mov	r0, r5
 800aec4:	47b8      	blx	r7
 800aec6:	3001      	adds	r0, #1
 800aec8:	f43f af09 	beq.w	800acde <_printf_float+0xbe>
 800aecc:	f04f 0900 	mov.w	r9, #0
 800aed0:	f104 0a1a 	add.w	sl, r4, #26
 800aed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed6:	425b      	negs	r3, r3
 800aed8:	454b      	cmp	r3, r9
 800aeda:	dc01      	bgt.n	800aee0 <_printf_float+0x2c0>
 800aedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aede:	e792      	b.n	800ae06 <_printf_float+0x1e6>
 800aee0:	2301      	movs	r3, #1
 800aee2:	4652      	mov	r2, sl
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	f43f aef7 	beq.w	800acde <_printf_float+0xbe>
 800aef0:	f109 0901 	add.w	r9, r9, #1
 800aef4:	e7ee      	b.n	800aed4 <_printf_float+0x2b4>
 800aef6:	bf00      	nop
 800aef8:	7fefffff 	.word	0x7fefffff
 800aefc:	0800e060 	.word	0x0800e060
 800af00:	0800e064 	.word	0x0800e064
 800af04:	0800e068 	.word	0x0800e068
 800af08:	0800e06c 	.word	0x0800e06c
 800af0c:	0800e070 	.word	0x0800e070
 800af10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af14:	429a      	cmp	r2, r3
 800af16:	bfa8      	it	ge
 800af18:	461a      	movge	r2, r3
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	4691      	mov	r9, r2
 800af1e:	dc37      	bgt.n	800af90 <_printf_float+0x370>
 800af20:	f04f 0b00 	mov.w	fp, #0
 800af24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af28:	f104 021a 	add.w	r2, r4, #26
 800af2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af2e:	9305      	str	r3, [sp, #20]
 800af30:	eba3 0309 	sub.w	r3, r3, r9
 800af34:	455b      	cmp	r3, fp
 800af36:	dc33      	bgt.n	800afa0 <_printf_float+0x380>
 800af38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af3c:	429a      	cmp	r2, r3
 800af3e:	db3b      	blt.n	800afb8 <_printf_float+0x398>
 800af40:	6823      	ldr	r3, [r4, #0]
 800af42:	07da      	lsls	r2, r3, #31
 800af44:	d438      	bmi.n	800afb8 <_printf_float+0x398>
 800af46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af4a:	eba2 0903 	sub.w	r9, r2, r3
 800af4e:	9b05      	ldr	r3, [sp, #20]
 800af50:	1ad2      	subs	r2, r2, r3
 800af52:	4591      	cmp	r9, r2
 800af54:	bfa8      	it	ge
 800af56:	4691      	movge	r9, r2
 800af58:	f1b9 0f00 	cmp.w	r9, #0
 800af5c:	dc35      	bgt.n	800afca <_printf_float+0x3aa>
 800af5e:	f04f 0800 	mov.w	r8, #0
 800af62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af66:	f104 0a1a 	add.w	sl, r4, #26
 800af6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af6e:	1a9b      	subs	r3, r3, r2
 800af70:	eba3 0309 	sub.w	r3, r3, r9
 800af74:	4543      	cmp	r3, r8
 800af76:	f77f af79 	ble.w	800ae6c <_printf_float+0x24c>
 800af7a:	2301      	movs	r3, #1
 800af7c:	4652      	mov	r2, sl
 800af7e:	4631      	mov	r1, r6
 800af80:	4628      	mov	r0, r5
 800af82:	47b8      	blx	r7
 800af84:	3001      	adds	r0, #1
 800af86:	f43f aeaa 	beq.w	800acde <_printf_float+0xbe>
 800af8a:	f108 0801 	add.w	r8, r8, #1
 800af8e:	e7ec      	b.n	800af6a <_printf_float+0x34a>
 800af90:	4613      	mov	r3, r2
 800af92:	4631      	mov	r1, r6
 800af94:	4642      	mov	r2, r8
 800af96:	4628      	mov	r0, r5
 800af98:	47b8      	blx	r7
 800af9a:	3001      	adds	r0, #1
 800af9c:	d1c0      	bne.n	800af20 <_printf_float+0x300>
 800af9e:	e69e      	b.n	800acde <_printf_float+0xbe>
 800afa0:	2301      	movs	r3, #1
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	9205      	str	r2, [sp, #20]
 800afa8:	47b8      	blx	r7
 800afaa:	3001      	adds	r0, #1
 800afac:	f43f ae97 	beq.w	800acde <_printf_float+0xbe>
 800afb0:	9a05      	ldr	r2, [sp, #20]
 800afb2:	f10b 0b01 	add.w	fp, fp, #1
 800afb6:	e7b9      	b.n	800af2c <_printf_float+0x30c>
 800afb8:	ee18 3a10 	vmov	r3, s16
 800afbc:	4652      	mov	r2, sl
 800afbe:	4631      	mov	r1, r6
 800afc0:	4628      	mov	r0, r5
 800afc2:	47b8      	blx	r7
 800afc4:	3001      	adds	r0, #1
 800afc6:	d1be      	bne.n	800af46 <_printf_float+0x326>
 800afc8:	e689      	b.n	800acde <_printf_float+0xbe>
 800afca:	9a05      	ldr	r2, [sp, #20]
 800afcc:	464b      	mov	r3, r9
 800afce:	4442      	add	r2, r8
 800afd0:	4631      	mov	r1, r6
 800afd2:	4628      	mov	r0, r5
 800afd4:	47b8      	blx	r7
 800afd6:	3001      	adds	r0, #1
 800afd8:	d1c1      	bne.n	800af5e <_printf_float+0x33e>
 800afda:	e680      	b.n	800acde <_printf_float+0xbe>
 800afdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afde:	2a01      	cmp	r2, #1
 800afe0:	dc01      	bgt.n	800afe6 <_printf_float+0x3c6>
 800afe2:	07db      	lsls	r3, r3, #31
 800afe4:	d53a      	bpl.n	800b05c <_printf_float+0x43c>
 800afe6:	2301      	movs	r3, #1
 800afe8:	4642      	mov	r2, r8
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	f43f ae74 	beq.w	800acde <_printf_float+0xbe>
 800aff6:	ee18 3a10 	vmov	r3, s16
 800affa:	4652      	mov	r2, sl
 800affc:	4631      	mov	r1, r6
 800affe:	4628      	mov	r0, r5
 800b000:	47b8      	blx	r7
 800b002:	3001      	adds	r0, #1
 800b004:	f43f ae6b 	beq.w	800acde <_printf_float+0xbe>
 800b008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b00c:	2200      	movs	r2, #0
 800b00e:	2300      	movs	r3, #0
 800b010:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b014:	f7f5 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 800b018:	b9d8      	cbnz	r0, 800b052 <_printf_float+0x432>
 800b01a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b01e:	f108 0201 	add.w	r2, r8, #1
 800b022:	4631      	mov	r1, r6
 800b024:	4628      	mov	r0, r5
 800b026:	47b8      	blx	r7
 800b028:	3001      	adds	r0, #1
 800b02a:	d10e      	bne.n	800b04a <_printf_float+0x42a>
 800b02c:	e657      	b.n	800acde <_printf_float+0xbe>
 800b02e:	2301      	movs	r3, #1
 800b030:	4652      	mov	r2, sl
 800b032:	4631      	mov	r1, r6
 800b034:	4628      	mov	r0, r5
 800b036:	47b8      	blx	r7
 800b038:	3001      	adds	r0, #1
 800b03a:	f43f ae50 	beq.w	800acde <_printf_float+0xbe>
 800b03e:	f108 0801 	add.w	r8, r8, #1
 800b042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b044:	3b01      	subs	r3, #1
 800b046:	4543      	cmp	r3, r8
 800b048:	dcf1      	bgt.n	800b02e <_printf_float+0x40e>
 800b04a:	464b      	mov	r3, r9
 800b04c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b050:	e6da      	b.n	800ae08 <_printf_float+0x1e8>
 800b052:	f04f 0800 	mov.w	r8, #0
 800b056:	f104 0a1a 	add.w	sl, r4, #26
 800b05a:	e7f2      	b.n	800b042 <_printf_float+0x422>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4642      	mov	r2, r8
 800b060:	e7df      	b.n	800b022 <_printf_float+0x402>
 800b062:	2301      	movs	r3, #1
 800b064:	464a      	mov	r2, r9
 800b066:	4631      	mov	r1, r6
 800b068:	4628      	mov	r0, r5
 800b06a:	47b8      	blx	r7
 800b06c:	3001      	adds	r0, #1
 800b06e:	f43f ae36 	beq.w	800acde <_printf_float+0xbe>
 800b072:	f108 0801 	add.w	r8, r8, #1
 800b076:	68e3      	ldr	r3, [r4, #12]
 800b078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b07a:	1a5b      	subs	r3, r3, r1
 800b07c:	4543      	cmp	r3, r8
 800b07e:	dcf0      	bgt.n	800b062 <_printf_float+0x442>
 800b080:	e6f8      	b.n	800ae74 <_printf_float+0x254>
 800b082:	f04f 0800 	mov.w	r8, #0
 800b086:	f104 0919 	add.w	r9, r4, #25
 800b08a:	e7f4      	b.n	800b076 <_printf_float+0x456>

0800b08c <_printf_common>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	4616      	mov	r6, r2
 800b092:	4699      	mov	r9, r3
 800b094:	688a      	ldr	r2, [r1, #8]
 800b096:	690b      	ldr	r3, [r1, #16]
 800b098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b09c:	4293      	cmp	r3, r2
 800b09e:	bfb8      	it	lt
 800b0a0:	4613      	movlt	r3, r2
 800b0a2:	6033      	str	r3, [r6, #0]
 800b0a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b10a      	cbz	r2, 800b0b2 <_printf_common+0x26>
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	0699      	lsls	r1, r3, #26
 800b0b6:	bf42      	ittt	mi
 800b0b8:	6833      	ldrmi	r3, [r6, #0]
 800b0ba:	3302      	addmi	r3, #2
 800b0bc:	6033      	strmi	r3, [r6, #0]
 800b0be:	6825      	ldr	r5, [r4, #0]
 800b0c0:	f015 0506 	ands.w	r5, r5, #6
 800b0c4:	d106      	bne.n	800b0d4 <_printf_common+0x48>
 800b0c6:	f104 0a19 	add.w	sl, r4, #25
 800b0ca:	68e3      	ldr	r3, [r4, #12]
 800b0cc:	6832      	ldr	r2, [r6, #0]
 800b0ce:	1a9b      	subs	r3, r3, r2
 800b0d0:	42ab      	cmp	r3, r5
 800b0d2:	dc26      	bgt.n	800b122 <_printf_common+0x96>
 800b0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0d8:	1e13      	subs	r3, r2, #0
 800b0da:	6822      	ldr	r2, [r4, #0]
 800b0dc:	bf18      	it	ne
 800b0de:	2301      	movne	r3, #1
 800b0e0:	0692      	lsls	r2, r2, #26
 800b0e2:	d42b      	bmi.n	800b13c <_printf_common+0xb0>
 800b0e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	47c0      	blx	r8
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d01e      	beq.n	800b130 <_printf_common+0xa4>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	6922      	ldr	r2, [r4, #16]
 800b0f6:	f003 0306 	and.w	r3, r3, #6
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	bf02      	ittt	eq
 800b0fe:	68e5      	ldreq	r5, [r4, #12]
 800b100:	6833      	ldreq	r3, [r6, #0]
 800b102:	1aed      	subeq	r5, r5, r3
 800b104:	68a3      	ldr	r3, [r4, #8]
 800b106:	bf0c      	ite	eq
 800b108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b10c:	2500      	movne	r5, #0
 800b10e:	4293      	cmp	r3, r2
 800b110:	bfc4      	itt	gt
 800b112:	1a9b      	subgt	r3, r3, r2
 800b114:	18ed      	addgt	r5, r5, r3
 800b116:	2600      	movs	r6, #0
 800b118:	341a      	adds	r4, #26
 800b11a:	42b5      	cmp	r5, r6
 800b11c:	d11a      	bne.n	800b154 <_printf_common+0xc8>
 800b11e:	2000      	movs	r0, #0
 800b120:	e008      	b.n	800b134 <_printf_common+0xa8>
 800b122:	2301      	movs	r3, #1
 800b124:	4652      	mov	r2, sl
 800b126:	4649      	mov	r1, r9
 800b128:	4638      	mov	r0, r7
 800b12a:	47c0      	blx	r8
 800b12c:	3001      	adds	r0, #1
 800b12e:	d103      	bne.n	800b138 <_printf_common+0xac>
 800b130:	f04f 30ff 	mov.w	r0, #4294967295
 800b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b138:	3501      	adds	r5, #1
 800b13a:	e7c6      	b.n	800b0ca <_printf_common+0x3e>
 800b13c:	18e1      	adds	r1, r4, r3
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	2030      	movs	r0, #48	; 0x30
 800b142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b146:	4422      	add	r2, r4
 800b148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b14c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b150:	3302      	adds	r3, #2
 800b152:	e7c7      	b.n	800b0e4 <_printf_common+0x58>
 800b154:	2301      	movs	r3, #1
 800b156:	4622      	mov	r2, r4
 800b158:	4649      	mov	r1, r9
 800b15a:	4638      	mov	r0, r7
 800b15c:	47c0      	blx	r8
 800b15e:	3001      	adds	r0, #1
 800b160:	d0e6      	beq.n	800b130 <_printf_common+0xa4>
 800b162:	3601      	adds	r6, #1
 800b164:	e7d9      	b.n	800b11a <_printf_common+0x8e>
	...

0800b168 <_printf_i>:
 800b168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b16c:	7e0f      	ldrb	r7, [r1, #24]
 800b16e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b170:	2f78      	cmp	r7, #120	; 0x78
 800b172:	4691      	mov	r9, r2
 800b174:	4680      	mov	r8, r0
 800b176:	460c      	mov	r4, r1
 800b178:	469a      	mov	sl, r3
 800b17a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b17e:	d807      	bhi.n	800b190 <_printf_i+0x28>
 800b180:	2f62      	cmp	r7, #98	; 0x62
 800b182:	d80a      	bhi.n	800b19a <_printf_i+0x32>
 800b184:	2f00      	cmp	r7, #0
 800b186:	f000 80d4 	beq.w	800b332 <_printf_i+0x1ca>
 800b18a:	2f58      	cmp	r7, #88	; 0x58
 800b18c:	f000 80c0 	beq.w	800b310 <_printf_i+0x1a8>
 800b190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b198:	e03a      	b.n	800b210 <_printf_i+0xa8>
 800b19a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b19e:	2b15      	cmp	r3, #21
 800b1a0:	d8f6      	bhi.n	800b190 <_printf_i+0x28>
 800b1a2:	a101      	add	r1, pc, #4	; (adr r1, 800b1a8 <_printf_i+0x40>)
 800b1a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1a8:	0800b201 	.word	0x0800b201
 800b1ac:	0800b215 	.word	0x0800b215
 800b1b0:	0800b191 	.word	0x0800b191
 800b1b4:	0800b191 	.word	0x0800b191
 800b1b8:	0800b191 	.word	0x0800b191
 800b1bc:	0800b191 	.word	0x0800b191
 800b1c0:	0800b215 	.word	0x0800b215
 800b1c4:	0800b191 	.word	0x0800b191
 800b1c8:	0800b191 	.word	0x0800b191
 800b1cc:	0800b191 	.word	0x0800b191
 800b1d0:	0800b191 	.word	0x0800b191
 800b1d4:	0800b319 	.word	0x0800b319
 800b1d8:	0800b241 	.word	0x0800b241
 800b1dc:	0800b2d3 	.word	0x0800b2d3
 800b1e0:	0800b191 	.word	0x0800b191
 800b1e4:	0800b191 	.word	0x0800b191
 800b1e8:	0800b33b 	.word	0x0800b33b
 800b1ec:	0800b191 	.word	0x0800b191
 800b1f0:	0800b241 	.word	0x0800b241
 800b1f4:	0800b191 	.word	0x0800b191
 800b1f8:	0800b191 	.word	0x0800b191
 800b1fc:	0800b2db 	.word	0x0800b2db
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	1d1a      	adds	r2, r3, #4
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	602a      	str	r2, [r5, #0]
 800b208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b20c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b210:	2301      	movs	r3, #1
 800b212:	e09f      	b.n	800b354 <_printf_i+0x1ec>
 800b214:	6820      	ldr	r0, [r4, #0]
 800b216:	682b      	ldr	r3, [r5, #0]
 800b218:	0607      	lsls	r7, r0, #24
 800b21a:	f103 0104 	add.w	r1, r3, #4
 800b21e:	6029      	str	r1, [r5, #0]
 800b220:	d501      	bpl.n	800b226 <_printf_i+0xbe>
 800b222:	681e      	ldr	r6, [r3, #0]
 800b224:	e003      	b.n	800b22e <_printf_i+0xc6>
 800b226:	0646      	lsls	r6, r0, #25
 800b228:	d5fb      	bpl.n	800b222 <_printf_i+0xba>
 800b22a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b22e:	2e00      	cmp	r6, #0
 800b230:	da03      	bge.n	800b23a <_printf_i+0xd2>
 800b232:	232d      	movs	r3, #45	; 0x2d
 800b234:	4276      	negs	r6, r6
 800b236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b23a:	485a      	ldr	r0, [pc, #360]	; (800b3a4 <_printf_i+0x23c>)
 800b23c:	230a      	movs	r3, #10
 800b23e:	e012      	b.n	800b266 <_printf_i+0xfe>
 800b240:	682b      	ldr	r3, [r5, #0]
 800b242:	6820      	ldr	r0, [r4, #0]
 800b244:	1d19      	adds	r1, r3, #4
 800b246:	6029      	str	r1, [r5, #0]
 800b248:	0605      	lsls	r5, r0, #24
 800b24a:	d501      	bpl.n	800b250 <_printf_i+0xe8>
 800b24c:	681e      	ldr	r6, [r3, #0]
 800b24e:	e002      	b.n	800b256 <_printf_i+0xee>
 800b250:	0641      	lsls	r1, r0, #25
 800b252:	d5fb      	bpl.n	800b24c <_printf_i+0xe4>
 800b254:	881e      	ldrh	r6, [r3, #0]
 800b256:	4853      	ldr	r0, [pc, #332]	; (800b3a4 <_printf_i+0x23c>)
 800b258:	2f6f      	cmp	r7, #111	; 0x6f
 800b25a:	bf0c      	ite	eq
 800b25c:	2308      	moveq	r3, #8
 800b25e:	230a      	movne	r3, #10
 800b260:	2100      	movs	r1, #0
 800b262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b266:	6865      	ldr	r5, [r4, #4]
 800b268:	60a5      	str	r5, [r4, #8]
 800b26a:	2d00      	cmp	r5, #0
 800b26c:	bfa2      	ittt	ge
 800b26e:	6821      	ldrge	r1, [r4, #0]
 800b270:	f021 0104 	bicge.w	r1, r1, #4
 800b274:	6021      	strge	r1, [r4, #0]
 800b276:	b90e      	cbnz	r6, 800b27c <_printf_i+0x114>
 800b278:	2d00      	cmp	r5, #0
 800b27a:	d04b      	beq.n	800b314 <_printf_i+0x1ac>
 800b27c:	4615      	mov	r5, r2
 800b27e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b282:	fb03 6711 	mls	r7, r3, r1, r6
 800b286:	5dc7      	ldrb	r7, [r0, r7]
 800b288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b28c:	4637      	mov	r7, r6
 800b28e:	42bb      	cmp	r3, r7
 800b290:	460e      	mov	r6, r1
 800b292:	d9f4      	bls.n	800b27e <_printf_i+0x116>
 800b294:	2b08      	cmp	r3, #8
 800b296:	d10b      	bne.n	800b2b0 <_printf_i+0x148>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	07de      	lsls	r6, r3, #31
 800b29c:	d508      	bpl.n	800b2b0 <_printf_i+0x148>
 800b29e:	6923      	ldr	r3, [r4, #16]
 800b2a0:	6861      	ldr	r1, [r4, #4]
 800b2a2:	4299      	cmp	r1, r3
 800b2a4:	bfde      	ittt	le
 800b2a6:	2330      	movle	r3, #48	; 0x30
 800b2a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2b0:	1b52      	subs	r2, r2, r5
 800b2b2:	6122      	str	r2, [r4, #16]
 800b2b4:	f8cd a000 	str.w	sl, [sp]
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	aa03      	add	r2, sp, #12
 800b2bc:	4621      	mov	r1, r4
 800b2be:	4640      	mov	r0, r8
 800b2c0:	f7ff fee4 	bl	800b08c <_printf_common>
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d14a      	bne.n	800b35e <_printf_i+0x1f6>
 800b2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2cc:	b004      	add	sp, #16
 800b2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d2:	6823      	ldr	r3, [r4, #0]
 800b2d4:	f043 0320 	orr.w	r3, r3, #32
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	4833      	ldr	r0, [pc, #204]	; (800b3a8 <_printf_i+0x240>)
 800b2dc:	2778      	movs	r7, #120	; 0x78
 800b2de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2e2:	6823      	ldr	r3, [r4, #0]
 800b2e4:	6829      	ldr	r1, [r5, #0]
 800b2e6:	061f      	lsls	r7, r3, #24
 800b2e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2ec:	d402      	bmi.n	800b2f4 <_printf_i+0x18c>
 800b2ee:	065f      	lsls	r7, r3, #25
 800b2f0:	bf48      	it	mi
 800b2f2:	b2b6      	uxthmi	r6, r6
 800b2f4:	07df      	lsls	r7, r3, #31
 800b2f6:	bf48      	it	mi
 800b2f8:	f043 0320 	orrmi.w	r3, r3, #32
 800b2fc:	6029      	str	r1, [r5, #0]
 800b2fe:	bf48      	it	mi
 800b300:	6023      	strmi	r3, [r4, #0]
 800b302:	b91e      	cbnz	r6, 800b30c <_printf_i+0x1a4>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	f023 0320 	bic.w	r3, r3, #32
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	2310      	movs	r3, #16
 800b30e:	e7a7      	b.n	800b260 <_printf_i+0xf8>
 800b310:	4824      	ldr	r0, [pc, #144]	; (800b3a4 <_printf_i+0x23c>)
 800b312:	e7e4      	b.n	800b2de <_printf_i+0x176>
 800b314:	4615      	mov	r5, r2
 800b316:	e7bd      	b.n	800b294 <_printf_i+0x12c>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	6826      	ldr	r6, [r4, #0]
 800b31c:	6961      	ldr	r1, [r4, #20]
 800b31e:	1d18      	adds	r0, r3, #4
 800b320:	6028      	str	r0, [r5, #0]
 800b322:	0635      	lsls	r5, r6, #24
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	d501      	bpl.n	800b32c <_printf_i+0x1c4>
 800b328:	6019      	str	r1, [r3, #0]
 800b32a:	e002      	b.n	800b332 <_printf_i+0x1ca>
 800b32c:	0670      	lsls	r0, r6, #25
 800b32e:	d5fb      	bpl.n	800b328 <_printf_i+0x1c0>
 800b330:	8019      	strh	r1, [r3, #0]
 800b332:	2300      	movs	r3, #0
 800b334:	6123      	str	r3, [r4, #16]
 800b336:	4615      	mov	r5, r2
 800b338:	e7bc      	b.n	800b2b4 <_printf_i+0x14c>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	1d1a      	adds	r2, r3, #4
 800b33e:	602a      	str	r2, [r5, #0]
 800b340:	681d      	ldr	r5, [r3, #0]
 800b342:	6862      	ldr	r2, [r4, #4]
 800b344:	2100      	movs	r1, #0
 800b346:	4628      	mov	r0, r5
 800b348:	f7f4 ff42 	bl	80001d0 <memchr>
 800b34c:	b108      	cbz	r0, 800b352 <_printf_i+0x1ea>
 800b34e:	1b40      	subs	r0, r0, r5
 800b350:	6060      	str	r0, [r4, #4]
 800b352:	6863      	ldr	r3, [r4, #4]
 800b354:	6123      	str	r3, [r4, #16]
 800b356:	2300      	movs	r3, #0
 800b358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b35c:	e7aa      	b.n	800b2b4 <_printf_i+0x14c>
 800b35e:	6923      	ldr	r3, [r4, #16]
 800b360:	462a      	mov	r2, r5
 800b362:	4649      	mov	r1, r9
 800b364:	4640      	mov	r0, r8
 800b366:	47d0      	blx	sl
 800b368:	3001      	adds	r0, #1
 800b36a:	d0ad      	beq.n	800b2c8 <_printf_i+0x160>
 800b36c:	6823      	ldr	r3, [r4, #0]
 800b36e:	079b      	lsls	r3, r3, #30
 800b370:	d413      	bmi.n	800b39a <_printf_i+0x232>
 800b372:	68e0      	ldr	r0, [r4, #12]
 800b374:	9b03      	ldr	r3, [sp, #12]
 800b376:	4298      	cmp	r0, r3
 800b378:	bfb8      	it	lt
 800b37a:	4618      	movlt	r0, r3
 800b37c:	e7a6      	b.n	800b2cc <_printf_i+0x164>
 800b37e:	2301      	movs	r3, #1
 800b380:	4632      	mov	r2, r6
 800b382:	4649      	mov	r1, r9
 800b384:	4640      	mov	r0, r8
 800b386:	47d0      	blx	sl
 800b388:	3001      	adds	r0, #1
 800b38a:	d09d      	beq.n	800b2c8 <_printf_i+0x160>
 800b38c:	3501      	adds	r5, #1
 800b38e:	68e3      	ldr	r3, [r4, #12]
 800b390:	9903      	ldr	r1, [sp, #12]
 800b392:	1a5b      	subs	r3, r3, r1
 800b394:	42ab      	cmp	r3, r5
 800b396:	dcf2      	bgt.n	800b37e <_printf_i+0x216>
 800b398:	e7eb      	b.n	800b372 <_printf_i+0x20a>
 800b39a:	2500      	movs	r5, #0
 800b39c:	f104 0619 	add.w	r6, r4, #25
 800b3a0:	e7f5      	b.n	800b38e <_printf_i+0x226>
 800b3a2:	bf00      	nop
 800b3a4:	0800e072 	.word	0x0800e072
 800b3a8:	0800e083 	.word	0x0800e083

0800b3ac <std>:
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	b510      	push	{r4, lr}
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b3b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3ba:	6083      	str	r3, [r0, #8]
 800b3bc:	8181      	strh	r1, [r0, #12]
 800b3be:	6643      	str	r3, [r0, #100]	; 0x64
 800b3c0:	81c2      	strh	r2, [r0, #14]
 800b3c2:	6183      	str	r3, [r0, #24]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	2208      	movs	r2, #8
 800b3c8:	305c      	adds	r0, #92	; 0x5c
 800b3ca:	f000 f903 	bl	800b5d4 <memset>
 800b3ce:	4b05      	ldr	r3, [pc, #20]	; (800b3e4 <std+0x38>)
 800b3d0:	6263      	str	r3, [r4, #36]	; 0x24
 800b3d2:	4b05      	ldr	r3, [pc, #20]	; (800b3e8 <std+0x3c>)
 800b3d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3d6:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <std+0x40>)
 800b3d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3da:	4b05      	ldr	r3, [pc, #20]	; (800b3f0 <std+0x44>)
 800b3dc:	6224      	str	r4, [r4, #32]
 800b3de:	6323      	str	r3, [r4, #48]	; 0x30
 800b3e0:	bd10      	pop	{r4, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0800b50d 	.word	0x0800b50d
 800b3e8:	0800b52f 	.word	0x0800b52f
 800b3ec:	0800b567 	.word	0x0800b567
 800b3f0:	0800b58b 	.word	0x0800b58b

0800b3f4 <stdio_exit_handler>:
 800b3f4:	4a02      	ldr	r2, [pc, #8]	; (800b400 <stdio_exit_handler+0xc>)
 800b3f6:	4903      	ldr	r1, [pc, #12]	; (800b404 <stdio_exit_handler+0x10>)
 800b3f8:	4803      	ldr	r0, [pc, #12]	; (800b408 <stdio_exit_handler+0x14>)
 800b3fa:	f000 b869 	b.w	800b4d0 <_fwalk_sglue>
 800b3fe:	bf00      	nop
 800b400:	20000014 	.word	0x20000014
 800b404:	0800d079 	.word	0x0800d079
 800b408:	20000020 	.word	0x20000020

0800b40c <cleanup_stdio>:
 800b40c:	6841      	ldr	r1, [r0, #4]
 800b40e:	4b0c      	ldr	r3, [pc, #48]	; (800b440 <cleanup_stdio+0x34>)
 800b410:	4299      	cmp	r1, r3
 800b412:	b510      	push	{r4, lr}
 800b414:	4604      	mov	r4, r0
 800b416:	d001      	beq.n	800b41c <cleanup_stdio+0x10>
 800b418:	f001 fe2e 	bl	800d078 <_fflush_r>
 800b41c:	68a1      	ldr	r1, [r4, #8]
 800b41e:	4b09      	ldr	r3, [pc, #36]	; (800b444 <cleanup_stdio+0x38>)
 800b420:	4299      	cmp	r1, r3
 800b422:	d002      	beq.n	800b42a <cleanup_stdio+0x1e>
 800b424:	4620      	mov	r0, r4
 800b426:	f001 fe27 	bl	800d078 <_fflush_r>
 800b42a:	68e1      	ldr	r1, [r4, #12]
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <cleanup_stdio+0x3c>)
 800b42e:	4299      	cmp	r1, r3
 800b430:	d004      	beq.n	800b43c <cleanup_stdio+0x30>
 800b432:	4620      	mov	r0, r4
 800b434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b438:	f001 be1e 	b.w	800d078 <_fflush_r>
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	bf00      	nop
 800b440:	20001da8 	.word	0x20001da8
 800b444:	20001e10 	.word	0x20001e10
 800b448:	20001e78 	.word	0x20001e78

0800b44c <global_stdio_init.part.0>:
 800b44c:	b510      	push	{r4, lr}
 800b44e:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <global_stdio_init.part.0+0x30>)
 800b450:	4c0b      	ldr	r4, [pc, #44]	; (800b480 <global_stdio_init.part.0+0x34>)
 800b452:	4a0c      	ldr	r2, [pc, #48]	; (800b484 <global_stdio_init.part.0+0x38>)
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	4620      	mov	r0, r4
 800b458:	2200      	movs	r2, #0
 800b45a:	2104      	movs	r1, #4
 800b45c:	f7ff ffa6 	bl	800b3ac <std>
 800b460:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b464:	2201      	movs	r2, #1
 800b466:	2109      	movs	r1, #9
 800b468:	f7ff ffa0 	bl	800b3ac <std>
 800b46c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b470:	2202      	movs	r2, #2
 800b472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b476:	2112      	movs	r1, #18
 800b478:	f7ff bf98 	b.w	800b3ac <std>
 800b47c:	20001ee0 	.word	0x20001ee0
 800b480:	20001da8 	.word	0x20001da8
 800b484:	0800b3f5 	.word	0x0800b3f5

0800b488 <__sfp_lock_acquire>:
 800b488:	4801      	ldr	r0, [pc, #4]	; (800b490 <__sfp_lock_acquire+0x8>)
 800b48a:	f000 b91f 	b.w	800b6cc <__retarget_lock_acquire_recursive>
 800b48e:	bf00      	nop
 800b490:	20001ee9 	.word	0x20001ee9

0800b494 <__sfp_lock_release>:
 800b494:	4801      	ldr	r0, [pc, #4]	; (800b49c <__sfp_lock_release+0x8>)
 800b496:	f000 b91a 	b.w	800b6ce <__retarget_lock_release_recursive>
 800b49a:	bf00      	nop
 800b49c:	20001ee9 	.word	0x20001ee9

0800b4a0 <__sinit>:
 800b4a0:	b510      	push	{r4, lr}
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	f7ff fff0 	bl	800b488 <__sfp_lock_acquire>
 800b4a8:	6a23      	ldr	r3, [r4, #32]
 800b4aa:	b11b      	cbz	r3, 800b4b4 <__sinit+0x14>
 800b4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b0:	f7ff bff0 	b.w	800b494 <__sfp_lock_release>
 800b4b4:	4b04      	ldr	r3, [pc, #16]	; (800b4c8 <__sinit+0x28>)
 800b4b6:	6223      	str	r3, [r4, #32]
 800b4b8:	4b04      	ldr	r3, [pc, #16]	; (800b4cc <__sinit+0x2c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1f5      	bne.n	800b4ac <__sinit+0xc>
 800b4c0:	f7ff ffc4 	bl	800b44c <global_stdio_init.part.0>
 800b4c4:	e7f2      	b.n	800b4ac <__sinit+0xc>
 800b4c6:	bf00      	nop
 800b4c8:	0800b40d 	.word	0x0800b40d
 800b4cc:	20001ee0 	.word	0x20001ee0

0800b4d0 <_fwalk_sglue>:
 800b4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	4688      	mov	r8, r1
 800b4d8:	4614      	mov	r4, r2
 800b4da:	2600      	movs	r6, #0
 800b4dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b4e4:	d505      	bpl.n	800b4f2 <_fwalk_sglue+0x22>
 800b4e6:	6824      	ldr	r4, [r4, #0]
 800b4e8:	2c00      	cmp	r4, #0
 800b4ea:	d1f7      	bne.n	800b4dc <_fwalk_sglue+0xc>
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4f2:	89ab      	ldrh	r3, [r5, #12]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d907      	bls.n	800b508 <_fwalk_sglue+0x38>
 800b4f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	d003      	beq.n	800b508 <_fwalk_sglue+0x38>
 800b500:	4629      	mov	r1, r5
 800b502:	4638      	mov	r0, r7
 800b504:	47c0      	blx	r8
 800b506:	4306      	orrs	r6, r0
 800b508:	3568      	adds	r5, #104	; 0x68
 800b50a:	e7e9      	b.n	800b4e0 <_fwalk_sglue+0x10>

0800b50c <__sread>:
 800b50c:	b510      	push	{r4, lr}
 800b50e:	460c      	mov	r4, r1
 800b510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b514:	f000 f88c 	bl	800b630 <_read_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	bfab      	itete	ge
 800b51c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b51e:	89a3      	ldrhlt	r3, [r4, #12]
 800b520:	181b      	addge	r3, r3, r0
 800b522:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b526:	bfac      	ite	ge
 800b528:	6563      	strge	r3, [r4, #84]	; 0x54
 800b52a:	81a3      	strhlt	r3, [r4, #12]
 800b52c:	bd10      	pop	{r4, pc}

0800b52e <__swrite>:
 800b52e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b532:	461f      	mov	r7, r3
 800b534:	898b      	ldrh	r3, [r1, #12]
 800b536:	05db      	lsls	r3, r3, #23
 800b538:	4605      	mov	r5, r0
 800b53a:	460c      	mov	r4, r1
 800b53c:	4616      	mov	r6, r2
 800b53e:	d505      	bpl.n	800b54c <__swrite+0x1e>
 800b540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b544:	2302      	movs	r3, #2
 800b546:	2200      	movs	r2, #0
 800b548:	f000 f860 	bl	800b60c <_lseek_r>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b552:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b556:	81a3      	strh	r3, [r4, #12]
 800b558:	4632      	mov	r2, r6
 800b55a:	463b      	mov	r3, r7
 800b55c:	4628      	mov	r0, r5
 800b55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b562:	f000 b877 	b.w	800b654 <_write_r>

0800b566 <__sseek>:
 800b566:	b510      	push	{r4, lr}
 800b568:	460c      	mov	r4, r1
 800b56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56e:	f000 f84d 	bl	800b60c <_lseek_r>
 800b572:	1c43      	adds	r3, r0, #1
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	bf15      	itete	ne
 800b578:	6560      	strne	r0, [r4, #84]	; 0x54
 800b57a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b57e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b582:	81a3      	strheq	r3, [r4, #12]
 800b584:	bf18      	it	ne
 800b586:	81a3      	strhne	r3, [r4, #12]
 800b588:	bd10      	pop	{r4, pc}

0800b58a <__sclose>:
 800b58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b58e:	f000 b82d 	b.w	800b5ec <_close_r>
	...

0800b594 <_vsiprintf_r>:
 800b594:	b500      	push	{lr}
 800b596:	b09b      	sub	sp, #108	; 0x6c
 800b598:	9100      	str	r1, [sp, #0]
 800b59a:	9104      	str	r1, [sp, #16]
 800b59c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5a0:	9105      	str	r1, [sp, #20]
 800b5a2:	9102      	str	r1, [sp, #8]
 800b5a4:	4905      	ldr	r1, [pc, #20]	; (800b5bc <_vsiprintf_r+0x28>)
 800b5a6:	9103      	str	r1, [sp, #12]
 800b5a8:	4669      	mov	r1, sp
 800b5aa:	f001 fbe1 	bl	800cd70 <_svfiprintf_r>
 800b5ae:	9b00      	ldr	r3, [sp, #0]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	701a      	strb	r2, [r3, #0]
 800b5b4:	b01b      	add	sp, #108	; 0x6c
 800b5b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5ba:	bf00      	nop
 800b5bc:	ffff0208 	.word	0xffff0208

0800b5c0 <vsiprintf>:
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	460a      	mov	r2, r1
 800b5c4:	4601      	mov	r1, r0
 800b5c6:	4802      	ldr	r0, [pc, #8]	; (800b5d0 <vsiprintf+0x10>)
 800b5c8:	6800      	ldr	r0, [r0, #0]
 800b5ca:	f7ff bfe3 	b.w	800b594 <_vsiprintf_r>
 800b5ce:	bf00      	nop
 800b5d0:	2000006c 	.word	0x2000006c

0800b5d4 <memset>:
 800b5d4:	4402      	add	r2, r0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d100      	bne.n	800b5de <memset+0xa>
 800b5dc:	4770      	bx	lr
 800b5de:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e2:	e7f9      	b.n	800b5d8 <memset+0x4>

0800b5e4 <_localeconv_r>:
 800b5e4:	4800      	ldr	r0, [pc, #0]	; (800b5e8 <_localeconv_r+0x4>)
 800b5e6:	4770      	bx	lr
 800b5e8:	20000160 	.word	0x20000160

0800b5ec <_close_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d06      	ldr	r5, [pc, #24]	; (800b608 <_close_r+0x1c>)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	f7f9 f87a 	bl	80046f0 <_close>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_close_r+0x1a>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_close_r+0x1a>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	20001ee4 	.word	0x20001ee4

0800b60c <_lseek_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d07      	ldr	r5, [pc, #28]	; (800b62c <_lseek_r+0x20>)
 800b610:	4604      	mov	r4, r0
 800b612:	4608      	mov	r0, r1
 800b614:	4611      	mov	r1, r2
 800b616:	2200      	movs	r2, #0
 800b618:	602a      	str	r2, [r5, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	f7f9 f874 	bl	8004708 <_lseek>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_lseek_r+0x1e>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_lseek_r+0x1e>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	20001ee4 	.word	0x20001ee4

0800b630 <_read_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d07      	ldr	r5, [pc, #28]	; (800b650 <_read_r+0x20>)
 800b634:	4604      	mov	r4, r0
 800b636:	4608      	mov	r0, r1
 800b638:	4611      	mov	r1, r2
 800b63a:	2200      	movs	r2, #0
 800b63c:	602a      	str	r2, [r5, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	f7f9 f83a 	bl	80046b8 <_read>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_read_r+0x1e>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_read_r+0x1e>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	20001ee4 	.word	0x20001ee4

0800b654 <_write_r>:
 800b654:	b538      	push	{r3, r4, r5, lr}
 800b656:	4d07      	ldr	r5, [pc, #28]	; (800b674 <_write_r+0x20>)
 800b658:	4604      	mov	r4, r0
 800b65a:	4608      	mov	r0, r1
 800b65c:	4611      	mov	r1, r2
 800b65e:	2200      	movs	r2, #0
 800b660:	602a      	str	r2, [r5, #0]
 800b662:	461a      	mov	r2, r3
 800b664:	f7f9 f836 	bl	80046d4 <_write>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_write_r+0x1e>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_write_r+0x1e>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	20001ee4 	.word	0x20001ee4

0800b678 <__errno>:
 800b678:	4b01      	ldr	r3, [pc, #4]	; (800b680 <__errno+0x8>)
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	2000006c 	.word	0x2000006c

0800b684 <__libc_init_array>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	4d0d      	ldr	r5, [pc, #52]	; (800b6bc <__libc_init_array+0x38>)
 800b688:	4c0d      	ldr	r4, [pc, #52]	; (800b6c0 <__libc_init_array+0x3c>)
 800b68a:	1b64      	subs	r4, r4, r5
 800b68c:	10a4      	asrs	r4, r4, #2
 800b68e:	2600      	movs	r6, #0
 800b690:	42a6      	cmp	r6, r4
 800b692:	d109      	bne.n	800b6a8 <__libc_init_array+0x24>
 800b694:	4d0b      	ldr	r5, [pc, #44]	; (800b6c4 <__libc_init_array+0x40>)
 800b696:	4c0c      	ldr	r4, [pc, #48]	; (800b6c8 <__libc_init_array+0x44>)
 800b698:	f002 f892 	bl	800d7c0 <_init>
 800b69c:	1b64      	subs	r4, r4, r5
 800b69e:	10a4      	asrs	r4, r4, #2
 800b6a0:	2600      	movs	r6, #0
 800b6a2:	42a6      	cmp	r6, r4
 800b6a4:	d105      	bne.n	800b6b2 <__libc_init_array+0x2e>
 800b6a6:	bd70      	pop	{r4, r5, r6, pc}
 800b6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ac:	4798      	blx	r3
 800b6ae:	3601      	adds	r6, #1
 800b6b0:	e7ee      	b.n	800b690 <__libc_init_array+0xc>
 800b6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b6:	4798      	blx	r3
 800b6b8:	3601      	adds	r6, #1
 800b6ba:	e7f2      	b.n	800b6a2 <__libc_init_array+0x1e>
 800b6bc:	0800e3d4 	.word	0x0800e3d4
 800b6c0:	0800e3d4 	.word	0x0800e3d4
 800b6c4:	0800e3d4 	.word	0x0800e3d4
 800b6c8:	0800e3d8 	.word	0x0800e3d8

0800b6cc <__retarget_lock_acquire_recursive>:
 800b6cc:	4770      	bx	lr

0800b6ce <__retarget_lock_release_recursive>:
 800b6ce:	4770      	bx	lr

0800b6d0 <quorem>:
 800b6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	6903      	ldr	r3, [r0, #16]
 800b6d6:	690c      	ldr	r4, [r1, #16]
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	4607      	mov	r7, r0
 800b6dc:	db7e      	blt.n	800b7dc <quorem+0x10c>
 800b6de:	3c01      	subs	r4, #1
 800b6e0:	f101 0814 	add.w	r8, r1, #20
 800b6e4:	f100 0514 	add.w	r5, r0, #20
 800b6e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b702:	fbb2 f6f3 	udiv	r6, r2, r3
 800b706:	d331      	bcc.n	800b76c <quorem+0x9c>
 800b708:	f04f 0e00 	mov.w	lr, #0
 800b70c:	4640      	mov	r0, r8
 800b70e:	46ac      	mov	ip, r5
 800b710:	46f2      	mov	sl, lr
 800b712:	f850 2b04 	ldr.w	r2, [r0], #4
 800b716:	b293      	uxth	r3, r2
 800b718:	fb06 e303 	mla	r3, r6, r3, lr
 800b71c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b720:	0c1a      	lsrs	r2, r3, #16
 800b722:	b29b      	uxth	r3, r3
 800b724:	ebaa 0303 	sub.w	r3, sl, r3
 800b728:	f8dc a000 	ldr.w	sl, [ip]
 800b72c:	fa13 f38a 	uxtah	r3, r3, sl
 800b730:	fb06 220e 	mla	r2, r6, lr, r2
 800b734:	9300      	str	r3, [sp, #0]
 800b736:	9b00      	ldr	r3, [sp, #0]
 800b738:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b73c:	b292      	uxth	r2, r2
 800b73e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b746:	f8bd 3000 	ldrh.w	r3, [sp]
 800b74a:	4581      	cmp	r9, r0
 800b74c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b750:	f84c 3b04 	str.w	r3, [ip], #4
 800b754:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b758:	d2db      	bcs.n	800b712 <quorem+0x42>
 800b75a:	f855 300b 	ldr.w	r3, [r5, fp]
 800b75e:	b92b      	cbnz	r3, 800b76c <quorem+0x9c>
 800b760:	9b01      	ldr	r3, [sp, #4]
 800b762:	3b04      	subs	r3, #4
 800b764:	429d      	cmp	r5, r3
 800b766:	461a      	mov	r2, r3
 800b768:	d32c      	bcc.n	800b7c4 <quorem+0xf4>
 800b76a:	613c      	str	r4, [r7, #16]
 800b76c:	4638      	mov	r0, r7
 800b76e:	f001 f9a5 	bl	800cabc <__mcmp>
 800b772:	2800      	cmp	r0, #0
 800b774:	db22      	blt.n	800b7bc <quorem+0xec>
 800b776:	3601      	adds	r6, #1
 800b778:	4629      	mov	r1, r5
 800b77a:	2000      	movs	r0, #0
 800b77c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b780:	f8d1 c000 	ldr.w	ip, [r1]
 800b784:	b293      	uxth	r3, r2
 800b786:	1ac3      	subs	r3, r0, r3
 800b788:	0c12      	lsrs	r2, r2, #16
 800b78a:	fa13 f38c 	uxtah	r3, r3, ip
 800b78e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b796:	b29b      	uxth	r3, r3
 800b798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b79c:	45c1      	cmp	r9, r8
 800b79e:	f841 3b04 	str.w	r3, [r1], #4
 800b7a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7a6:	d2e9      	bcs.n	800b77c <quorem+0xac>
 800b7a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7b0:	b922      	cbnz	r2, 800b7bc <quorem+0xec>
 800b7b2:	3b04      	subs	r3, #4
 800b7b4:	429d      	cmp	r5, r3
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	d30a      	bcc.n	800b7d0 <quorem+0x100>
 800b7ba:	613c      	str	r4, [r7, #16]
 800b7bc:	4630      	mov	r0, r6
 800b7be:	b003      	add	sp, #12
 800b7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c4:	6812      	ldr	r2, [r2, #0]
 800b7c6:	3b04      	subs	r3, #4
 800b7c8:	2a00      	cmp	r2, #0
 800b7ca:	d1ce      	bne.n	800b76a <quorem+0x9a>
 800b7cc:	3c01      	subs	r4, #1
 800b7ce:	e7c9      	b.n	800b764 <quorem+0x94>
 800b7d0:	6812      	ldr	r2, [r2, #0]
 800b7d2:	3b04      	subs	r3, #4
 800b7d4:	2a00      	cmp	r2, #0
 800b7d6:	d1f0      	bne.n	800b7ba <quorem+0xea>
 800b7d8:	3c01      	subs	r4, #1
 800b7da:	e7eb      	b.n	800b7b4 <quorem+0xe4>
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e7ee      	b.n	800b7be <quorem+0xee>

0800b7e0 <_dtoa_r>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	ed2d 8b04 	vpush	{d8-d9}
 800b7e8:	69c5      	ldr	r5, [r0, #28]
 800b7ea:	b093      	sub	sp, #76	; 0x4c
 800b7ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b7f0:	ec57 6b10 	vmov	r6, r7, d0
 800b7f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7f8:	9107      	str	r1, [sp, #28]
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	920a      	str	r2, [sp, #40]	; 0x28
 800b7fe:	930d      	str	r3, [sp, #52]	; 0x34
 800b800:	b975      	cbnz	r5, 800b820 <_dtoa_r+0x40>
 800b802:	2010      	movs	r0, #16
 800b804:	f000 fe2a 	bl	800c45c <malloc>
 800b808:	4602      	mov	r2, r0
 800b80a:	61e0      	str	r0, [r4, #28]
 800b80c:	b920      	cbnz	r0, 800b818 <_dtoa_r+0x38>
 800b80e:	4bae      	ldr	r3, [pc, #696]	; (800bac8 <_dtoa_r+0x2e8>)
 800b810:	21ef      	movs	r1, #239	; 0xef
 800b812:	48ae      	ldr	r0, [pc, #696]	; (800bacc <_dtoa_r+0x2ec>)
 800b814:	f001 fc90 	bl	800d138 <__assert_func>
 800b818:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b81c:	6005      	str	r5, [r0, #0]
 800b81e:	60c5      	str	r5, [r0, #12]
 800b820:	69e3      	ldr	r3, [r4, #28]
 800b822:	6819      	ldr	r1, [r3, #0]
 800b824:	b151      	cbz	r1, 800b83c <_dtoa_r+0x5c>
 800b826:	685a      	ldr	r2, [r3, #4]
 800b828:	604a      	str	r2, [r1, #4]
 800b82a:	2301      	movs	r3, #1
 800b82c:	4093      	lsls	r3, r2
 800b82e:	608b      	str	r3, [r1, #8]
 800b830:	4620      	mov	r0, r4
 800b832:	f000 ff07 	bl	800c644 <_Bfree>
 800b836:	69e3      	ldr	r3, [r4, #28]
 800b838:	2200      	movs	r2, #0
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	1e3b      	subs	r3, r7, #0
 800b83e:	bfbb      	ittet	lt
 800b840:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b844:	9303      	strlt	r3, [sp, #12]
 800b846:	2300      	movge	r3, #0
 800b848:	2201      	movlt	r2, #1
 800b84a:	bfac      	ite	ge
 800b84c:	f8c8 3000 	strge.w	r3, [r8]
 800b850:	f8c8 2000 	strlt.w	r2, [r8]
 800b854:	4b9e      	ldr	r3, [pc, #632]	; (800bad0 <_dtoa_r+0x2f0>)
 800b856:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b85a:	ea33 0308 	bics.w	r3, r3, r8
 800b85e:	d11b      	bne.n	800b898 <_dtoa_r+0xb8>
 800b860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b862:	f242 730f 	movw	r3, #9999	; 0x270f
 800b866:	6013      	str	r3, [r2, #0]
 800b868:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b86c:	4333      	orrs	r3, r6
 800b86e:	f000 8593 	beq.w	800c398 <_dtoa_r+0xbb8>
 800b872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b874:	b963      	cbnz	r3, 800b890 <_dtoa_r+0xb0>
 800b876:	4b97      	ldr	r3, [pc, #604]	; (800bad4 <_dtoa_r+0x2f4>)
 800b878:	e027      	b.n	800b8ca <_dtoa_r+0xea>
 800b87a:	4b97      	ldr	r3, [pc, #604]	; (800bad8 <_dtoa_r+0x2f8>)
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	9800      	ldr	r0, [sp, #0]
 800b886:	b013      	add	sp, #76	; 0x4c
 800b888:	ecbd 8b04 	vpop	{d8-d9}
 800b88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b890:	4b90      	ldr	r3, [pc, #576]	; (800bad4 <_dtoa_r+0x2f4>)
 800b892:	9300      	str	r3, [sp, #0]
 800b894:	3303      	adds	r3, #3
 800b896:	e7f3      	b.n	800b880 <_dtoa_r+0xa0>
 800b898:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b89c:	2200      	movs	r2, #0
 800b89e:	ec51 0b17 	vmov	r0, r1, d7
 800b8a2:	eeb0 8a47 	vmov.f32	s16, s14
 800b8a6:	eef0 8a67 	vmov.f32	s17, s15
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	f7f5 f90c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8b0:	4681      	mov	r9, r0
 800b8b2:	b160      	cbz	r0, 800b8ce <_dtoa_r+0xee>
 800b8b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	6013      	str	r3, [r2, #0]
 800b8ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 8568 	beq.w	800c392 <_dtoa_r+0xbb2>
 800b8c2:	4b86      	ldr	r3, [pc, #536]	; (800badc <_dtoa_r+0x2fc>)
 800b8c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8c6:	6013      	str	r3, [r2, #0]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	e7da      	b.n	800b884 <_dtoa_r+0xa4>
 800b8ce:	aa10      	add	r2, sp, #64	; 0x40
 800b8d0:	a911      	add	r1, sp, #68	; 0x44
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	eeb0 0a48 	vmov.f32	s0, s16
 800b8d8:	eef0 0a68 	vmov.f32	s1, s17
 800b8dc:	f001 f994 	bl	800cc08 <__d2b>
 800b8e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b8e4:	4682      	mov	sl, r0
 800b8e6:	2d00      	cmp	r5, #0
 800b8e8:	d07f      	beq.n	800b9ea <_dtoa_r+0x20a>
 800b8ea:	ee18 3a90 	vmov	r3, s17
 800b8ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b8f6:	ec51 0b18 	vmov	r0, r1, d8
 800b8fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b902:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b906:	4619      	mov	r1, r3
 800b908:	2200      	movs	r2, #0
 800b90a:	4b75      	ldr	r3, [pc, #468]	; (800bae0 <_dtoa_r+0x300>)
 800b90c:	f7f4 fcbc 	bl	8000288 <__aeabi_dsub>
 800b910:	a367      	add	r3, pc, #412	; (adr r3, 800bab0 <_dtoa_r+0x2d0>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 fe6f 	bl	80005f8 <__aeabi_dmul>
 800b91a:	a367      	add	r3, pc, #412	; (adr r3, 800bab8 <_dtoa_r+0x2d8>)
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f7f4 fcb4 	bl	800028c <__adddf3>
 800b924:	4606      	mov	r6, r0
 800b926:	4628      	mov	r0, r5
 800b928:	460f      	mov	r7, r1
 800b92a:	f7f4 fdfb 	bl	8000524 <__aeabi_i2d>
 800b92e:	a364      	add	r3, pc, #400	; (adr r3, 800bac0 <_dtoa_r+0x2e0>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f7f4 fe60 	bl	80005f8 <__aeabi_dmul>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	f7f4 fca4 	bl	800028c <__adddf3>
 800b944:	4606      	mov	r6, r0
 800b946:	460f      	mov	r7, r1
 800b948:	f7f5 f906 	bl	8000b58 <__aeabi_d2iz>
 800b94c:	2200      	movs	r2, #0
 800b94e:	4683      	mov	fp, r0
 800b950:	2300      	movs	r3, #0
 800b952:	4630      	mov	r0, r6
 800b954:	4639      	mov	r1, r7
 800b956:	f7f5 f8c1 	bl	8000adc <__aeabi_dcmplt>
 800b95a:	b148      	cbz	r0, 800b970 <_dtoa_r+0x190>
 800b95c:	4658      	mov	r0, fp
 800b95e:	f7f4 fde1 	bl	8000524 <__aeabi_i2d>
 800b962:	4632      	mov	r2, r6
 800b964:	463b      	mov	r3, r7
 800b966:	f7f5 f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800b96a:	b908      	cbnz	r0, 800b970 <_dtoa_r+0x190>
 800b96c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b970:	f1bb 0f16 	cmp.w	fp, #22
 800b974:	d857      	bhi.n	800ba26 <_dtoa_r+0x246>
 800b976:	4b5b      	ldr	r3, [pc, #364]	; (800bae4 <_dtoa_r+0x304>)
 800b978:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	ec51 0b18 	vmov	r0, r1, d8
 800b984:	f7f5 f8aa 	bl	8000adc <__aeabi_dcmplt>
 800b988:	2800      	cmp	r0, #0
 800b98a:	d04e      	beq.n	800ba2a <_dtoa_r+0x24a>
 800b98c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b990:	2300      	movs	r3, #0
 800b992:	930c      	str	r3, [sp, #48]	; 0x30
 800b994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b996:	1b5b      	subs	r3, r3, r5
 800b998:	1e5a      	subs	r2, r3, #1
 800b99a:	bf45      	ittet	mi
 800b99c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b9a0:	9305      	strmi	r3, [sp, #20]
 800b9a2:	2300      	movpl	r3, #0
 800b9a4:	2300      	movmi	r3, #0
 800b9a6:	9206      	str	r2, [sp, #24]
 800b9a8:	bf54      	ite	pl
 800b9aa:	9305      	strpl	r3, [sp, #20]
 800b9ac:	9306      	strmi	r3, [sp, #24]
 800b9ae:	f1bb 0f00 	cmp.w	fp, #0
 800b9b2:	db3c      	blt.n	800ba2e <_dtoa_r+0x24e>
 800b9b4:	9b06      	ldr	r3, [sp, #24]
 800b9b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b9ba:	445b      	add	r3, fp
 800b9bc:	9306      	str	r3, [sp, #24]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9308      	str	r3, [sp, #32]
 800b9c2:	9b07      	ldr	r3, [sp, #28]
 800b9c4:	2b09      	cmp	r3, #9
 800b9c6:	d868      	bhi.n	800ba9a <_dtoa_r+0x2ba>
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	bfc4      	itt	gt
 800b9cc:	3b04      	subgt	r3, #4
 800b9ce:	9307      	strgt	r3, [sp, #28]
 800b9d0:	9b07      	ldr	r3, [sp, #28]
 800b9d2:	f1a3 0302 	sub.w	r3, r3, #2
 800b9d6:	bfcc      	ite	gt
 800b9d8:	2500      	movgt	r5, #0
 800b9da:	2501      	movle	r5, #1
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	f200 8085 	bhi.w	800baec <_dtoa_r+0x30c>
 800b9e2:	e8df f003 	tbb	[pc, r3]
 800b9e6:	3b2e      	.short	0x3b2e
 800b9e8:	5839      	.short	0x5839
 800b9ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9ee:	441d      	add	r5, r3
 800b9f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9f4:	2b20      	cmp	r3, #32
 800b9f6:	bfc1      	itttt	gt
 800b9f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9fc:	fa08 f803 	lslgt.w	r8, r8, r3
 800ba00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ba04:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ba08:	bfd6      	itet	le
 800ba0a:	f1c3 0320 	rsble	r3, r3, #32
 800ba0e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ba12:	fa06 f003 	lslle.w	r0, r6, r3
 800ba16:	f7f4 fd75 	bl	8000504 <__aeabi_ui2d>
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ba20:	3d01      	subs	r5, #1
 800ba22:	920e      	str	r2, [sp, #56]	; 0x38
 800ba24:	e76f      	b.n	800b906 <_dtoa_r+0x126>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e7b3      	b.n	800b992 <_dtoa_r+0x1b2>
 800ba2a:	900c      	str	r0, [sp, #48]	; 0x30
 800ba2c:	e7b2      	b.n	800b994 <_dtoa_r+0x1b4>
 800ba2e:	9b05      	ldr	r3, [sp, #20]
 800ba30:	eba3 030b 	sub.w	r3, r3, fp
 800ba34:	9305      	str	r3, [sp, #20]
 800ba36:	f1cb 0300 	rsb	r3, fp, #0
 800ba3a:	9308      	str	r3, [sp, #32]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba40:	e7bf      	b.n	800b9c2 <_dtoa_r+0x1e2>
 800ba42:	2300      	movs	r3, #0
 800ba44:	9309      	str	r3, [sp, #36]	; 0x24
 800ba46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	dc52      	bgt.n	800baf2 <_dtoa_r+0x312>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	9301      	str	r3, [sp, #4]
 800ba50:	9304      	str	r3, [sp, #16]
 800ba52:	461a      	mov	r2, r3
 800ba54:	920a      	str	r2, [sp, #40]	; 0x28
 800ba56:	e00b      	b.n	800ba70 <_dtoa_r+0x290>
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e7f3      	b.n	800ba44 <_dtoa_r+0x264>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba62:	445b      	add	r3, fp
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	3301      	adds	r3, #1
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	bfb8      	it	lt
 800ba6e:	2301      	movlt	r3, #1
 800ba70:	69e0      	ldr	r0, [r4, #28]
 800ba72:	2100      	movs	r1, #0
 800ba74:	2204      	movs	r2, #4
 800ba76:	f102 0614 	add.w	r6, r2, #20
 800ba7a:	429e      	cmp	r6, r3
 800ba7c:	d93d      	bls.n	800bafa <_dtoa_r+0x31a>
 800ba7e:	6041      	str	r1, [r0, #4]
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 fd9f 	bl	800c5c4 <_Balloc>
 800ba86:	9000      	str	r0, [sp, #0]
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d139      	bne.n	800bb00 <_dtoa_r+0x320>
 800ba8c:	4b16      	ldr	r3, [pc, #88]	; (800bae8 <_dtoa_r+0x308>)
 800ba8e:	4602      	mov	r2, r0
 800ba90:	f240 11af 	movw	r1, #431	; 0x1af
 800ba94:	e6bd      	b.n	800b812 <_dtoa_r+0x32>
 800ba96:	2301      	movs	r3, #1
 800ba98:	e7e1      	b.n	800ba5e <_dtoa_r+0x27e>
 800ba9a:	2501      	movs	r5, #1
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9307      	str	r3, [sp, #28]
 800baa0:	9509      	str	r5, [sp, #36]	; 0x24
 800baa2:	f04f 33ff 	mov.w	r3, #4294967295
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	9304      	str	r3, [sp, #16]
 800baaa:	2200      	movs	r2, #0
 800baac:	2312      	movs	r3, #18
 800baae:	e7d1      	b.n	800ba54 <_dtoa_r+0x274>
 800bab0:	636f4361 	.word	0x636f4361
 800bab4:	3fd287a7 	.word	0x3fd287a7
 800bab8:	8b60c8b3 	.word	0x8b60c8b3
 800babc:	3fc68a28 	.word	0x3fc68a28
 800bac0:	509f79fb 	.word	0x509f79fb
 800bac4:	3fd34413 	.word	0x3fd34413
 800bac8:	0800e0a1 	.word	0x0800e0a1
 800bacc:	0800e0b8 	.word	0x0800e0b8
 800bad0:	7ff00000 	.word	0x7ff00000
 800bad4:	0800e09d 	.word	0x0800e09d
 800bad8:	0800e094 	.word	0x0800e094
 800badc:	0800e071 	.word	0x0800e071
 800bae0:	3ff80000 	.word	0x3ff80000
 800bae4:	0800e1a8 	.word	0x0800e1a8
 800bae8:	0800e110 	.word	0x0800e110
 800baec:	2301      	movs	r3, #1
 800baee:	9309      	str	r3, [sp, #36]	; 0x24
 800baf0:	e7d7      	b.n	800baa2 <_dtoa_r+0x2c2>
 800baf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	9304      	str	r3, [sp, #16]
 800baf8:	e7ba      	b.n	800ba70 <_dtoa_r+0x290>
 800bafa:	3101      	adds	r1, #1
 800bafc:	0052      	lsls	r2, r2, #1
 800bafe:	e7ba      	b.n	800ba76 <_dtoa_r+0x296>
 800bb00:	69e3      	ldr	r3, [r4, #28]
 800bb02:	9a00      	ldr	r2, [sp, #0]
 800bb04:	601a      	str	r2, [r3, #0]
 800bb06:	9b04      	ldr	r3, [sp, #16]
 800bb08:	2b0e      	cmp	r3, #14
 800bb0a:	f200 80a8 	bhi.w	800bc5e <_dtoa_r+0x47e>
 800bb0e:	2d00      	cmp	r5, #0
 800bb10:	f000 80a5 	beq.w	800bc5e <_dtoa_r+0x47e>
 800bb14:	f1bb 0f00 	cmp.w	fp, #0
 800bb18:	dd38      	ble.n	800bb8c <_dtoa_r+0x3ac>
 800bb1a:	4bc0      	ldr	r3, [pc, #768]	; (800be1c <_dtoa_r+0x63c>)
 800bb1c:	f00b 020f 	and.w	r2, fp, #15
 800bb20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bb28:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bb2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bb30:	d019      	beq.n	800bb66 <_dtoa_r+0x386>
 800bb32:	4bbb      	ldr	r3, [pc, #748]	; (800be20 <_dtoa_r+0x640>)
 800bb34:	ec51 0b18 	vmov	r0, r1, d8
 800bb38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb3c:	f7f4 fe86 	bl	800084c <__aeabi_ddiv>
 800bb40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb44:	f008 080f 	and.w	r8, r8, #15
 800bb48:	2503      	movs	r5, #3
 800bb4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800be20 <_dtoa_r+0x640>
 800bb4e:	f1b8 0f00 	cmp.w	r8, #0
 800bb52:	d10a      	bne.n	800bb6a <_dtoa_r+0x38a>
 800bb54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb58:	4632      	mov	r2, r6
 800bb5a:	463b      	mov	r3, r7
 800bb5c:	f7f4 fe76 	bl	800084c <__aeabi_ddiv>
 800bb60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb64:	e02b      	b.n	800bbbe <_dtoa_r+0x3de>
 800bb66:	2502      	movs	r5, #2
 800bb68:	e7ef      	b.n	800bb4a <_dtoa_r+0x36a>
 800bb6a:	f018 0f01 	tst.w	r8, #1
 800bb6e:	d008      	beq.n	800bb82 <_dtoa_r+0x3a2>
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb78:	f7f4 fd3e 	bl	80005f8 <__aeabi_dmul>
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	4606      	mov	r6, r0
 800bb80:	460f      	mov	r7, r1
 800bb82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb86:	f109 0908 	add.w	r9, r9, #8
 800bb8a:	e7e0      	b.n	800bb4e <_dtoa_r+0x36e>
 800bb8c:	f000 809f 	beq.w	800bcce <_dtoa_r+0x4ee>
 800bb90:	f1cb 0600 	rsb	r6, fp, #0
 800bb94:	4ba1      	ldr	r3, [pc, #644]	; (800be1c <_dtoa_r+0x63c>)
 800bb96:	4fa2      	ldr	r7, [pc, #648]	; (800be20 <_dtoa_r+0x640>)
 800bb98:	f006 020f 	and.w	r2, r6, #15
 800bb9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	ec51 0b18 	vmov	r0, r1, d8
 800bba8:	f7f4 fd26 	bl	80005f8 <__aeabi_dmul>
 800bbac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbb0:	1136      	asrs	r6, r6, #4
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	2502      	movs	r5, #2
 800bbb6:	2e00      	cmp	r6, #0
 800bbb8:	d17e      	bne.n	800bcb8 <_dtoa_r+0x4d8>
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1d0      	bne.n	800bb60 <_dtoa_r+0x380>
 800bbbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 8084 	beq.w	800bcd2 <_dtoa_r+0x4f2>
 800bbca:	4b96      	ldr	r3, [pc, #600]	; (800be24 <_dtoa_r+0x644>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4640      	mov	r0, r8
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	f7f4 ff83 	bl	8000adc <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d07b      	beq.n	800bcd2 <_dtoa_r+0x4f2>
 800bbda:	9b04      	ldr	r3, [sp, #16]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d078      	beq.n	800bcd2 <_dtoa_r+0x4f2>
 800bbe0:	9b01      	ldr	r3, [sp, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	dd39      	ble.n	800bc5a <_dtoa_r+0x47a>
 800bbe6:	4b90      	ldr	r3, [pc, #576]	; (800be28 <_dtoa_r+0x648>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 fd03 	bl	80005f8 <__aeabi_dmul>
 800bbf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbf6:	9e01      	ldr	r6, [sp, #4]
 800bbf8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc02:	4628      	mov	r0, r5
 800bc04:	f7f4 fc8e 	bl	8000524 <__aeabi_i2d>
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	f7f4 fcf4 	bl	80005f8 <__aeabi_dmul>
 800bc10:	4b86      	ldr	r3, [pc, #536]	; (800be2c <_dtoa_r+0x64c>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	f7f4 fb3a 	bl	800028c <__adddf3>
 800bc18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bc1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc20:	9303      	str	r3, [sp, #12]
 800bc22:	2e00      	cmp	r6, #0
 800bc24:	d158      	bne.n	800bcd8 <_dtoa_r+0x4f8>
 800bc26:	4b82      	ldr	r3, [pc, #520]	; (800be30 <_dtoa_r+0x650>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	f7f4 fb2b 	bl	8000288 <__aeabi_dsub>
 800bc32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc36:	4680      	mov	r8, r0
 800bc38:	4689      	mov	r9, r1
 800bc3a:	f7f4 ff6d 	bl	8000b18 <__aeabi_dcmpgt>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	f040 8296 	bne.w	800c170 <_dtoa_r+0x990>
 800bc44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bc48:	4640      	mov	r0, r8
 800bc4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc4e:	4649      	mov	r1, r9
 800bc50:	f7f4 ff44 	bl	8000adc <__aeabi_dcmplt>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f040 8289 	bne.w	800c16c <_dtoa_r+0x98c>
 800bc5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f2c0 814e 	blt.w	800bf02 <_dtoa_r+0x722>
 800bc66:	f1bb 0f0e 	cmp.w	fp, #14
 800bc6a:	f300 814a 	bgt.w	800bf02 <_dtoa_r+0x722>
 800bc6e:	4b6b      	ldr	r3, [pc, #428]	; (800be1c <_dtoa_r+0x63c>)
 800bc70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	f280 80dc 	bge.w	800be38 <_dtoa_r+0x658>
 800bc80:	9b04      	ldr	r3, [sp, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	f300 80d8 	bgt.w	800be38 <_dtoa_r+0x658>
 800bc88:	f040 826f 	bne.w	800c16a <_dtoa_r+0x98a>
 800bc8c:	4b68      	ldr	r3, [pc, #416]	; (800be30 <_dtoa_r+0x650>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	4640      	mov	r0, r8
 800bc92:	4649      	mov	r1, r9
 800bc94:	f7f4 fcb0 	bl	80005f8 <__aeabi_dmul>
 800bc98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc9c:	f7f4 ff32 	bl	8000b04 <__aeabi_dcmpge>
 800bca0:	9e04      	ldr	r6, [sp, #16]
 800bca2:	4637      	mov	r7, r6
 800bca4:	2800      	cmp	r0, #0
 800bca6:	f040 8245 	bne.w	800c134 <_dtoa_r+0x954>
 800bcaa:	9d00      	ldr	r5, [sp, #0]
 800bcac:	2331      	movs	r3, #49	; 0x31
 800bcae:	f805 3b01 	strb.w	r3, [r5], #1
 800bcb2:	f10b 0b01 	add.w	fp, fp, #1
 800bcb6:	e241      	b.n	800c13c <_dtoa_r+0x95c>
 800bcb8:	07f2      	lsls	r2, r6, #31
 800bcba:	d505      	bpl.n	800bcc8 <_dtoa_r+0x4e8>
 800bcbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcc0:	f7f4 fc9a 	bl	80005f8 <__aeabi_dmul>
 800bcc4:	3501      	adds	r5, #1
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	1076      	asrs	r6, r6, #1
 800bcca:	3708      	adds	r7, #8
 800bccc:	e773      	b.n	800bbb6 <_dtoa_r+0x3d6>
 800bcce:	2502      	movs	r5, #2
 800bcd0:	e775      	b.n	800bbbe <_dtoa_r+0x3de>
 800bcd2:	9e04      	ldr	r6, [sp, #16]
 800bcd4:	465f      	mov	r7, fp
 800bcd6:	e792      	b.n	800bbfe <_dtoa_r+0x41e>
 800bcd8:	9900      	ldr	r1, [sp, #0]
 800bcda:	4b50      	ldr	r3, [pc, #320]	; (800be1c <_dtoa_r+0x63c>)
 800bcdc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bce0:	4431      	add	r1, r6
 800bce2:	9102      	str	r1, [sp, #8]
 800bce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bce6:	eeb0 9a47 	vmov.f32	s18, s14
 800bcea:	eef0 9a67 	vmov.f32	s19, s15
 800bcee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcf6:	2900      	cmp	r1, #0
 800bcf8:	d044      	beq.n	800bd84 <_dtoa_r+0x5a4>
 800bcfa:	494e      	ldr	r1, [pc, #312]	; (800be34 <_dtoa_r+0x654>)
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	f7f4 fda5 	bl	800084c <__aeabi_ddiv>
 800bd02:	ec53 2b19 	vmov	r2, r3, d9
 800bd06:	f7f4 fabf 	bl	8000288 <__aeabi_dsub>
 800bd0a:	9d00      	ldr	r5, [sp, #0]
 800bd0c:	ec41 0b19 	vmov	d9, r0, r1
 800bd10:	4649      	mov	r1, r9
 800bd12:	4640      	mov	r0, r8
 800bd14:	f7f4 ff20 	bl	8000b58 <__aeabi_d2iz>
 800bd18:	4606      	mov	r6, r0
 800bd1a:	f7f4 fc03 	bl	8000524 <__aeabi_i2d>
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	4640      	mov	r0, r8
 800bd24:	4649      	mov	r1, r9
 800bd26:	f7f4 faaf 	bl	8000288 <__aeabi_dsub>
 800bd2a:	3630      	adds	r6, #48	; 0x30
 800bd2c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd30:	ec53 2b19 	vmov	r2, r3, d9
 800bd34:	4680      	mov	r8, r0
 800bd36:	4689      	mov	r9, r1
 800bd38:	f7f4 fed0 	bl	8000adc <__aeabi_dcmplt>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d164      	bne.n	800be0a <_dtoa_r+0x62a>
 800bd40:	4642      	mov	r2, r8
 800bd42:	464b      	mov	r3, r9
 800bd44:	4937      	ldr	r1, [pc, #220]	; (800be24 <_dtoa_r+0x644>)
 800bd46:	2000      	movs	r0, #0
 800bd48:	f7f4 fa9e 	bl	8000288 <__aeabi_dsub>
 800bd4c:	ec53 2b19 	vmov	r2, r3, d9
 800bd50:	f7f4 fec4 	bl	8000adc <__aeabi_dcmplt>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	f040 80b6 	bne.w	800bec6 <_dtoa_r+0x6e6>
 800bd5a:	9b02      	ldr	r3, [sp, #8]
 800bd5c:	429d      	cmp	r5, r3
 800bd5e:	f43f af7c 	beq.w	800bc5a <_dtoa_r+0x47a>
 800bd62:	4b31      	ldr	r3, [pc, #196]	; (800be28 <_dtoa_r+0x648>)
 800bd64:	ec51 0b19 	vmov	r0, r1, d9
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f7f4 fc45 	bl	80005f8 <__aeabi_dmul>
 800bd6e:	4b2e      	ldr	r3, [pc, #184]	; (800be28 <_dtoa_r+0x648>)
 800bd70:	ec41 0b19 	vmov	d9, r0, r1
 800bd74:	2200      	movs	r2, #0
 800bd76:	4640      	mov	r0, r8
 800bd78:	4649      	mov	r1, r9
 800bd7a:	f7f4 fc3d 	bl	80005f8 <__aeabi_dmul>
 800bd7e:	4680      	mov	r8, r0
 800bd80:	4689      	mov	r9, r1
 800bd82:	e7c5      	b.n	800bd10 <_dtoa_r+0x530>
 800bd84:	ec51 0b17 	vmov	r0, r1, d7
 800bd88:	f7f4 fc36 	bl	80005f8 <__aeabi_dmul>
 800bd8c:	9b02      	ldr	r3, [sp, #8]
 800bd8e:	9d00      	ldr	r5, [sp, #0]
 800bd90:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd92:	ec41 0b19 	vmov	d9, r0, r1
 800bd96:	4649      	mov	r1, r9
 800bd98:	4640      	mov	r0, r8
 800bd9a:	f7f4 fedd 	bl	8000b58 <__aeabi_d2iz>
 800bd9e:	4606      	mov	r6, r0
 800bda0:	f7f4 fbc0 	bl	8000524 <__aeabi_i2d>
 800bda4:	3630      	adds	r6, #48	; 0x30
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fa6b 	bl	8000288 <__aeabi_dsub>
 800bdb2:	f805 6b01 	strb.w	r6, [r5], #1
 800bdb6:	9b02      	ldr	r3, [sp, #8]
 800bdb8:	429d      	cmp	r5, r3
 800bdba:	4680      	mov	r8, r0
 800bdbc:	4689      	mov	r9, r1
 800bdbe:	f04f 0200 	mov.w	r2, #0
 800bdc2:	d124      	bne.n	800be0e <_dtoa_r+0x62e>
 800bdc4:	4b1b      	ldr	r3, [pc, #108]	; (800be34 <_dtoa_r+0x654>)
 800bdc6:	ec51 0b19 	vmov	r0, r1, d9
 800bdca:	f7f4 fa5f 	bl	800028c <__adddf3>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4640      	mov	r0, r8
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	f7f4 fe9f 	bl	8000b18 <__aeabi_dcmpgt>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d173      	bne.n	800bec6 <_dtoa_r+0x6e6>
 800bdde:	ec53 2b19 	vmov	r2, r3, d9
 800bde2:	4914      	ldr	r1, [pc, #80]	; (800be34 <_dtoa_r+0x654>)
 800bde4:	2000      	movs	r0, #0
 800bde6:	f7f4 fa4f 	bl	8000288 <__aeabi_dsub>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4640      	mov	r0, r8
 800bdf0:	4649      	mov	r1, r9
 800bdf2:	f7f4 fe73 	bl	8000adc <__aeabi_dcmplt>
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f43f af2f 	beq.w	800bc5a <_dtoa_r+0x47a>
 800bdfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bdfe:	1e6b      	subs	r3, r5, #1
 800be00:	930f      	str	r3, [sp, #60]	; 0x3c
 800be02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be06:	2b30      	cmp	r3, #48	; 0x30
 800be08:	d0f8      	beq.n	800bdfc <_dtoa_r+0x61c>
 800be0a:	46bb      	mov	fp, r7
 800be0c:	e04a      	b.n	800bea4 <_dtoa_r+0x6c4>
 800be0e:	4b06      	ldr	r3, [pc, #24]	; (800be28 <_dtoa_r+0x648>)
 800be10:	f7f4 fbf2 	bl	80005f8 <__aeabi_dmul>
 800be14:	4680      	mov	r8, r0
 800be16:	4689      	mov	r9, r1
 800be18:	e7bd      	b.n	800bd96 <_dtoa_r+0x5b6>
 800be1a:	bf00      	nop
 800be1c:	0800e1a8 	.word	0x0800e1a8
 800be20:	0800e180 	.word	0x0800e180
 800be24:	3ff00000 	.word	0x3ff00000
 800be28:	40240000 	.word	0x40240000
 800be2c:	401c0000 	.word	0x401c0000
 800be30:	40140000 	.word	0x40140000
 800be34:	3fe00000 	.word	0x3fe00000
 800be38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be3c:	9d00      	ldr	r5, [sp, #0]
 800be3e:	4642      	mov	r2, r8
 800be40:	464b      	mov	r3, r9
 800be42:	4630      	mov	r0, r6
 800be44:	4639      	mov	r1, r7
 800be46:	f7f4 fd01 	bl	800084c <__aeabi_ddiv>
 800be4a:	f7f4 fe85 	bl	8000b58 <__aeabi_d2iz>
 800be4e:	9001      	str	r0, [sp, #4]
 800be50:	f7f4 fb68 	bl	8000524 <__aeabi_i2d>
 800be54:	4642      	mov	r2, r8
 800be56:	464b      	mov	r3, r9
 800be58:	f7f4 fbce 	bl	80005f8 <__aeabi_dmul>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4630      	mov	r0, r6
 800be62:	4639      	mov	r1, r7
 800be64:	f7f4 fa10 	bl	8000288 <__aeabi_dsub>
 800be68:	9e01      	ldr	r6, [sp, #4]
 800be6a:	9f04      	ldr	r7, [sp, #16]
 800be6c:	3630      	adds	r6, #48	; 0x30
 800be6e:	f805 6b01 	strb.w	r6, [r5], #1
 800be72:	9e00      	ldr	r6, [sp, #0]
 800be74:	1bae      	subs	r6, r5, r6
 800be76:	42b7      	cmp	r7, r6
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	d134      	bne.n	800bee8 <_dtoa_r+0x708>
 800be7e:	f7f4 fa05 	bl	800028c <__adddf3>
 800be82:	4642      	mov	r2, r8
 800be84:	464b      	mov	r3, r9
 800be86:	4606      	mov	r6, r0
 800be88:	460f      	mov	r7, r1
 800be8a:	f7f4 fe45 	bl	8000b18 <__aeabi_dcmpgt>
 800be8e:	b9c8      	cbnz	r0, 800bec4 <_dtoa_r+0x6e4>
 800be90:	4642      	mov	r2, r8
 800be92:	464b      	mov	r3, r9
 800be94:	4630      	mov	r0, r6
 800be96:	4639      	mov	r1, r7
 800be98:	f7f4 fe16 	bl	8000ac8 <__aeabi_dcmpeq>
 800be9c:	b110      	cbz	r0, 800bea4 <_dtoa_r+0x6c4>
 800be9e:	9b01      	ldr	r3, [sp, #4]
 800bea0:	07db      	lsls	r3, r3, #31
 800bea2:	d40f      	bmi.n	800bec4 <_dtoa_r+0x6e4>
 800bea4:	4651      	mov	r1, sl
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 fbcc 	bl	800c644 <_Bfree>
 800beac:	2300      	movs	r3, #0
 800beae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800beb0:	702b      	strb	r3, [r5, #0]
 800beb2:	f10b 0301 	add.w	r3, fp, #1
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f43f ace2 	beq.w	800b884 <_dtoa_r+0xa4>
 800bec0:	601d      	str	r5, [r3, #0]
 800bec2:	e4df      	b.n	800b884 <_dtoa_r+0xa4>
 800bec4:	465f      	mov	r7, fp
 800bec6:	462b      	mov	r3, r5
 800bec8:	461d      	mov	r5, r3
 800beca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bece:	2a39      	cmp	r2, #57	; 0x39
 800bed0:	d106      	bne.n	800bee0 <_dtoa_r+0x700>
 800bed2:	9a00      	ldr	r2, [sp, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d1f7      	bne.n	800bec8 <_dtoa_r+0x6e8>
 800bed8:	9900      	ldr	r1, [sp, #0]
 800beda:	2230      	movs	r2, #48	; 0x30
 800bedc:	3701      	adds	r7, #1
 800bede:	700a      	strb	r2, [r1, #0]
 800bee0:	781a      	ldrb	r2, [r3, #0]
 800bee2:	3201      	adds	r2, #1
 800bee4:	701a      	strb	r2, [r3, #0]
 800bee6:	e790      	b.n	800be0a <_dtoa_r+0x62a>
 800bee8:	4ba3      	ldr	r3, [pc, #652]	; (800c178 <_dtoa_r+0x998>)
 800beea:	2200      	movs	r2, #0
 800beec:	f7f4 fb84 	bl	80005f8 <__aeabi_dmul>
 800bef0:	2200      	movs	r2, #0
 800bef2:	2300      	movs	r3, #0
 800bef4:	4606      	mov	r6, r0
 800bef6:	460f      	mov	r7, r1
 800bef8:	f7f4 fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 800befc:	2800      	cmp	r0, #0
 800befe:	d09e      	beq.n	800be3e <_dtoa_r+0x65e>
 800bf00:	e7d0      	b.n	800bea4 <_dtoa_r+0x6c4>
 800bf02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf04:	2a00      	cmp	r2, #0
 800bf06:	f000 80ca 	beq.w	800c09e <_dtoa_r+0x8be>
 800bf0a:	9a07      	ldr	r2, [sp, #28]
 800bf0c:	2a01      	cmp	r2, #1
 800bf0e:	f300 80ad 	bgt.w	800c06c <_dtoa_r+0x88c>
 800bf12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf14:	2a00      	cmp	r2, #0
 800bf16:	f000 80a5 	beq.w	800c064 <_dtoa_r+0x884>
 800bf1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf1e:	9e08      	ldr	r6, [sp, #32]
 800bf20:	9d05      	ldr	r5, [sp, #20]
 800bf22:	9a05      	ldr	r2, [sp, #20]
 800bf24:	441a      	add	r2, r3
 800bf26:	9205      	str	r2, [sp, #20]
 800bf28:	9a06      	ldr	r2, [sp, #24]
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	441a      	add	r2, r3
 800bf2e:	4620      	mov	r0, r4
 800bf30:	9206      	str	r2, [sp, #24]
 800bf32:	f000 fc3d 	bl	800c7b0 <__i2b>
 800bf36:	4607      	mov	r7, r0
 800bf38:	b165      	cbz	r5, 800bf54 <_dtoa_r+0x774>
 800bf3a:	9b06      	ldr	r3, [sp, #24]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	dd09      	ble.n	800bf54 <_dtoa_r+0x774>
 800bf40:	42ab      	cmp	r3, r5
 800bf42:	9a05      	ldr	r2, [sp, #20]
 800bf44:	bfa8      	it	ge
 800bf46:	462b      	movge	r3, r5
 800bf48:	1ad2      	subs	r2, r2, r3
 800bf4a:	9205      	str	r2, [sp, #20]
 800bf4c:	9a06      	ldr	r2, [sp, #24]
 800bf4e:	1aed      	subs	r5, r5, r3
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	9306      	str	r3, [sp, #24]
 800bf54:	9b08      	ldr	r3, [sp, #32]
 800bf56:	b1f3      	cbz	r3, 800bf96 <_dtoa_r+0x7b6>
 800bf58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 80a3 	beq.w	800c0a6 <_dtoa_r+0x8c6>
 800bf60:	2e00      	cmp	r6, #0
 800bf62:	dd10      	ble.n	800bf86 <_dtoa_r+0x7a6>
 800bf64:	4639      	mov	r1, r7
 800bf66:	4632      	mov	r2, r6
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f000 fce1 	bl	800c930 <__pow5mult>
 800bf6e:	4652      	mov	r2, sl
 800bf70:	4601      	mov	r1, r0
 800bf72:	4607      	mov	r7, r0
 800bf74:	4620      	mov	r0, r4
 800bf76:	f000 fc31 	bl	800c7dc <__multiply>
 800bf7a:	4651      	mov	r1, sl
 800bf7c:	4680      	mov	r8, r0
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f000 fb60 	bl	800c644 <_Bfree>
 800bf84:	46c2      	mov	sl, r8
 800bf86:	9b08      	ldr	r3, [sp, #32]
 800bf88:	1b9a      	subs	r2, r3, r6
 800bf8a:	d004      	beq.n	800bf96 <_dtoa_r+0x7b6>
 800bf8c:	4651      	mov	r1, sl
 800bf8e:	4620      	mov	r0, r4
 800bf90:	f000 fcce 	bl	800c930 <__pow5mult>
 800bf94:	4682      	mov	sl, r0
 800bf96:	2101      	movs	r1, #1
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f000 fc09 	bl	800c7b0 <__i2b>
 800bf9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	f340 8081 	ble.w	800c0aa <_dtoa_r+0x8ca>
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	4601      	mov	r1, r0
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 fcbf 	bl	800c930 <__pow5mult>
 800bfb2:	9b07      	ldr	r3, [sp, #28]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	dd7a      	ble.n	800c0b0 <_dtoa_r+0x8d0>
 800bfba:	f04f 0800 	mov.w	r8, #0
 800bfbe:	6933      	ldr	r3, [r6, #16]
 800bfc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfc4:	6918      	ldr	r0, [r3, #16]
 800bfc6:	f000 fba5 	bl	800c714 <__hi0bits>
 800bfca:	f1c0 0020 	rsb	r0, r0, #32
 800bfce:	9b06      	ldr	r3, [sp, #24]
 800bfd0:	4418      	add	r0, r3
 800bfd2:	f010 001f 	ands.w	r0, r0, #31
 800bfd6:	f000 8094 	beq.w	800c102 <_dtoa_r+0x922>
 800bfda:	f1c0 0320 	rsb	r3, r0, #32
 800bfde:	2b04      	cmp	r3, #4
 800bfe0:	f340 8085 	ble.w	800c0ee <_dtoa_r+0x90e>
 800bfe4:	9b05      	ldr	r3, [sp, #20]
 800bfe6:	f1c0 001c 	rsb	r0, r0, #28
 800bfea:	4403      	add	r3, r0
 800bfec:	9305      	str	r3, [sp, #20]
 800bfee:	9b06      	ldr	r3, [sp, #24]
 800bff0:	4403      	add	r3, r0
 800bff2:	4405      	add	r5, r0
 800bff4:	9306      	str	r3, [sp, #24]
 800bff6:	9b05      	ldr	r3, [sp, #20]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dd05      	ble.n	800c008 <_dtoa_r+0x828>
 800bffc:	4651      	mov	r1, sl
 800bffe:	461a      	mov	r2, r3
 800c000:	4620      	mov	r0, r4
 800c002:	f000 fcef 	bl	800c9e4 <__lshift>
 800c006:	4682      	mov	sl, r0
 800c008:	9b06      	ldr	r3, [sp, #24]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	dd05      	ble.n	800c01a <_dtoa_r+0x83a>
 800c00e:	4631      	mov	r1, r6
 800c010:	461a      	mov	r2, r3
 800c012:	4620      	mov	r0, r4
 800c014:	f000 fce6 	bl	800c9e4 <__lshift>
 800c018:	4606      	mov	r6, r0
 800c01a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d072      	beq.n	800c106 <_dtoa_r+0x926>
 800c020:	4631      	mov	r1, r6
 800c022:	4650      	mov	r0, sl
 800c024:	f000 fd4a 	bl	800cabc <__mcmp>
 800c028:	2800      	cmp	r0, #0
 800c02a:	da6c      	bge.n	800c106 <_dtoa_r+0x926>
 800c02c:	2300      	movs	r3, #0
 800c02e:	4651      	mov	r1, sl
 800c030:	220a      	movs	r2, #10
 800c032:	4620      	mov	r0, r4
 800c034:	f000 fb28 	bl	800c688 <__multadd>
 800c038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c03a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c03e:	4682      	mov	sl, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	f000 81b0 	beq.w	800c3a6 <_dtoa_r+0xbc6>
 800c046:	2300      	movs	r3, #0
 800c048:	4639      	mov	r1, r7
 800c04a:	220a      	movs	r2, #10
 800c04c:	4620      	mov	r0, r4
 800c04e:	f000 fb1b 	bl	800c688 <__multadd>
 800c052:	9b01      	ldr	r3, [sp, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	4607      	mov	r7, r0
 800c058:	f300 8096 	bgt.w	800c188 <_dtoa_r+0x9a8>
 800c05c:	9b07      	ldr	r3, [sp, #28]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	dc59      	bgt.n	800c116 <_dtoa_r+0x936>
 800c062:	e091      	b.n	800c188 <_dtoa_r+0x9a8>
 800c064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c06a:	e758      	b.n	800bf1e <_dtoa_r+0x73e>
 800c06c:	9b04      	ldr	r3, [sp, #16]
 800c06e:	1e5e      	subs	r6, r3, #1
 800c070:	9b08      	ldr	r3, [sp, #32]
 800c072:	42b3      	cmp	r3, r6
 800c074:	bfbf      	itttt	lt
 800c076:	9b08      	ldrlt	r3, [sp, #32]
 800c078:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c07a:	9608      	strlt	r6, [sp, #32]
 800c07c:	1af3      	sublt	r3, r6, r3
 800c07e:	bfb4      	ite	lt
 800c080:	18d2      	addlt	r2, r2, r3
 800c082:	1b9e      	subge	r6, r3, r6
 800c084:	9b04      	ldr	r3, [sp, #16]
 800c086:	bfbc      	itt	lt
 800c088:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c08a:	2600      	movlt	r6, #0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	bfb7      	itett	lt
 800c090:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c094:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c098:	1a9d      	sublt	r5, r3, r2
 800c09a:	2300      	movlt	r3, #0
 800c09c:	e741      	b.n	800bf22 <_dtoa_r+0x742>
 800c09e:	9e08      	ldr	r6, [sp, #32]
 800c0a0:	9d05      	ldr	r5, [sp, #20]
 800c0a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c0a4:	e748      	b.n	800bf38 <_dtoa_r+0x758>
 800c0a6:	9a08      	ldr	r2, [sp, #32]
 800c0a8:	e770      	b.n	800bf8c <_dtoa_r+0x7ac>
 800c0aa:	9b07      	ldr	r3, [sp, #28]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	dc19      	bgt.n	800c0e4 <_dtoa_r+0x904>
 800c0b0:	9b02      	ldr	r3, [sp, #8]
 800c0b2:	b9bb      	cbnz	r3, 800c0e4 <_dtoa_r+0x904>
 800c0b4:	9b03      	ldr	r3, [sp, #12]
 800c0b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0ba:	b99b      	cbnz	r3, 800c0e4 <_dtoa_r+0x904>
 800c0bc:	9b03      	ldr	r3, [sp, #12]
 800c0be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0c2:	0d1b      	lsrs	r3, r3, #20
 800c0c4:	051b      	lsls	r3, r3, #20
 800c0c6:	b183      	cbz	r3, 800c0ea <_dtoa_r+0x90a>
 800c0c8:	9b05      	ldr	r3, [sp, #20]
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	9305      	str	r3, [sp, #20]
 800c0ce:	9b06      	ldr	r3, [sp, #24]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	9306      	str	r3, [sp, #24]
 800c0d4:	f04f 0801 	mov.w	r8, #1
 800c0d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	f47f af6f 	bne.w	800bfbe <_dtoa_r+0x7de>
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	e774      	b.n	800bfce <_dtoa_r+0x7ee>
 800c0e4:	f04f 0800 	mov.w	r8, #0
 800c0e8:	e7f6      	b.n	800c0d8 <_dtoa_r+0x8f8>
 800c0ea:	4698      	mov	r8, r3
 800c0ec:	e7f4      	b.n	800c0d8 <_dtoa_r+0x8f8>
 800c0ee:	d082      	beq.n	800bff6 <_dtoa_r+0x816>
 800c0f0:	9a05      	ldr	r2, [sp, #20]
 800c0f2:	331c      	adds	r3, #28
 800c0f4:	441a      	add	r2, r3
 800c0f6:	9205      	str	r2, [sp, #20]
 800c0f8:	9a06      	ldr	r2, [sp, #24]
 800c0fa:	441a      	add	r2, r3
 800c0fc:	441d      	add	r5, r3
 800c0fe:	9206      	str	r2, [sp, #24]
 800c100:	e779      	b.n	800bff6 <_dtoa_r+0x816>
 800c102:	4603      	mov	r3, r0
 800c104:	e7f4      	b.n	800c0f0 <_dtoa_r+0x910>
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	dc37      	bgt.n	800c17c <_dtoa_r+0x99c>
 800c10c:	9b07      	ldr	r3, [sp, #28]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	dd34      	ble.n	800c17c <_dtoa_r+0x99c>
 800c112:	9b04      	ldr	r3, [sp, #16]
 800c114:	9301      	str	r3, [sp, #4]
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	b963      	cbnz	r3, 800c134 <_dtoa_r+0x954>
 800c11a:	4631      	mov	r1, r6
 800c11c:	2205      	movs	r2, #5
 800c11e:	4620      	mov	r0, r4
 800c120:	f000 fab2 	bl	800c688 <__multadd>
 800c124:	4601      	mov	r1, r0
 800c126:	4606      	mov	r6, r0
 800c128:	4650      	mov	r0, sl
 800c12a:	f000 fcc7 	bl	800cabc <__mcmp>
 800c12e:	2800      	cmp	r0, #0
 800c130:	f73f adbb 	bgt.w	800bcaa <_dtoa_r+0x4ca>
 800c134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c136:	9d00      	ldr	r5, [sp, #0]
 800c138:	ea6f 0b03 	mvn.w	fp, r3
 800c13c:	f04f 0800 	mov.w	r8, #0
 800c140:	4631      	mov	r1, r6
 800c142:	4620      	mov	r0, r4
 800c144:	f000 fa7e 	bl	800c644 <_Bfree>
 800c148:	2f00      	cmp	r7, #0
 800c14a:	f43f aeab 	beq.w	800bea4 <_dtoa_r+0x6c4>
 800c14e:	f1b8 0f00 	cmp.w	r8, #0
 800c152:	d005      	beq.n	800c160 <_dtoa_r+0x980>
 800c154:	45b8      	cmp	r8, r7
 800c156:	d003      	beq.n	800c160 <_dtoa_r+0x980>
 800c158:	4641      	mov	r1, r8
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 fa72 	bl	800c644 <_Bfree>
 800c160:	4639      	mov	r1, r7
 800c162:	4620      	mov	r0, r4
 800c164:	f000 fa6e 	bl	800c644 <_Bfree>
 800c168:	e69c      	b.n	800bea4 <_dtoa_r+0x6c4>
 800c16a:	2600      	movs	r6, #0
 800c16c:	4637      	mov	r7, r6
 800c16e:	e7e1      	b.n	800c134 <_dtoa_r+0x954>
 800c170:	46bb      	mov	fp, r7
 800c172:	4637      	mov	r7, r6
 800c174:	e599      	b.n	800bcaa <_dtoa_r+0x4ca>
 800c176:	bf00      	nop
 800c178:	40240000 	.word	0x40240000
 800c17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 80c8 	beq.w	800c314 <_dtoa_r+0xb34>
 800c184:	9b04      	ldr	r3, [sp, #16]
 800c186:	9301      	str	r3, [sp, #4]
 800c188:	2d00      	cmp	r5, #0
 800c18a:	dd05      	ble.n	800c198 <_dtoa_r+0x9b8>
 800c18c:	4639      	mov	r1, r7
 800c18e:	462a      	mov	r2, r5
 800c190:	4620      	mov	r0, r4
 800c192:	f000 fc27 	bl	800c9e4 <__lshift>
 800c196:	4607      	mov	r7, r0
 800c198:	f1b8 0f00 	cmp.w	r8, #0
 800c19c:	d05b      	beq.n	800c256 <_dtoa_r+0xa76>
 800c19e:	6879      	ldr	r1, [r7, #4]
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f000 fa0f 	bl	800c5c4 <_Balloc>
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	b928      	cbnz	r0, 800c1b6 <_dtoa_r+0x9d6>
 800c1aa:	4b83      	ldr	r3, [pc, #524]	; (800c3b8 <_dtoa_r+0xbd8>)
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c1b2:	f7ff bb2e 	b.w	800b812 <_dtoa_r+0x32>
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	3202      	adds	r2, #2
 800c1ba:	0092      	lsls	r2, r2, #2
 800c1bc:	f107 010c 	add.w	r1, r7, #12
 800c1c0:	300c      	adds	r0, #12
 800c1c2:	f000 ffab 	bl	800d11c <memcpy>
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f000 fc0a 	bl	800c9e4 <__lshift>
 800c1d0:	9b00      	ldr	r3, [sp, #0]
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1da:	4413      	add	r3, r2
 800c1dc:	9308      	str	r3, [sp, #32]
 800c1de:	9b02      	ldr	r3, [sp, #8]
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	46b8      	mov	r8, r7
 800c1e6:	9306      	str	r3, [sp, #24]
 800c1e8:	4607      	mov	r7, r0
 800c1ea:	9b04      	ldr	r3, [sp, #16]
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	4650      	mov	r0, sl
 800c1f2:	9301      	str	r3, [sp, #4]
 800c1f4:	f7ff fa6c 	bl	800b6d0 <quorem>
 800c1f8:	4641      	mov	r1, r8
 800c1fa:	9002      	str	r0, [sp, #8]
 800c1fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c200:	4650      	mov	r0, sl
 800c202:	f000 fc5b 	bl	800cabc <__mcmp>
 800c206:	463a      	mov	r2, r7
 800c208:	9005      	str	r0, [sp, #20]
 800c20a:	4631      	mov	r1, r6
 800c20c:	4620      	mov	r0, r4
 800c20e:	f000 fc71 	bl	800caf4 <__mdiff>
 800c212:	68c2      	ldr	r2, [r0, #12]
 800c214:	4605      	mov	r5, r0
 800c216:	bb02      	cbnz	r2, 800c25a <_dtoa_r+0xa7a>
 800c218:	4601      	mov	r1, r0
 800c21a:	4650      	mov	r0, sl
 800c21c:	f000 fc4e 	bl	800cabc <__mcmp>
 800c220:	4602      	mov	r2, r0
 800c222:	4629      	mov	r1, r5
 800c224:	4620      	mov	r0, r4
 800c226:	9209      	str	r2, [sp, #36]	; 0x24
 800c228:	f000 fa0c 	bl	800c644 <_Bfree>
 800c22c:	9b07      	ldr	r3, [sp, #28]
 800c22e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c230:	9d04      	ldr	r5, [sp, #16]
 800c232:	ea43 0102 	orr.w	r1, r3, r2
 800c236:	9b06      	ldr	r3, [sp, #24]
 800c238:	4319      	orrs	r1, r3
 800c23a:	d110      	bne.n	800c25e <_dtoa_r+0xa7e>
 800c23c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c240:	d029      	beq.n	800c296 <_dtoa_r+0xab6>
 800c242:	9b05      	ldr	r3, [sp, #20]
 800c244:	2b00      	cmp	r3, #0
 800c246:	dd02      	ble.n	800c24e <_dtoa_r+0xa6e>
 800c248:	9b02      	ldr	r3, [sp, #8]
 800c24a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c24e:	9b01      	ldr	r3, [sp, #4]
 800c250:	f883 9000 	strb.w	r9, [r3]
 800c254:	e774      	b.n	800c140 <_dtoa_r+0x960>
 800c256:	4638      	mov	r0, r7
 800c258:	e7ba      	b.n	800c1d0 <_dtoa_r+0x9f0>
 800c25a:	2201      	movs	r2, #1
 800c25c:	e7e1      	b.n	800c222 <_dtoa_r+0xa42>
 800c25e:	9b05      	ldr	r3, [sp, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	db04      	blt.n	800c26e <_dtoa_r+0xa8e>
 800c264:	9907      	ldr	r1, [sp, #28]
 800c266:	430b      	orrs	r3, r1
 800c268:	9906      	ldr	r1, [sp, #24]
 800c26a:	430b      	orrs	r3, r1
 800c26c:	d120      	bne.n	800c2b0 <_dtoa_r+0xad0>
 800c26e:	2a00      	cmp	r2, #0
 800c270:	dded      	ble.n	800c24e <_dtoa_r+0xa6e>
 800c272:	4651      	mov	r1, sl
 800c274:	2201      	movs	r2, #1
 800c276:	4620      	mov	r0, r4
 800c278:	f000 fbb4 	bl	800c9e4 <__lshift>
 800c27c:	4631      	mov	r1, r6
 800c27e:	4682      	mov	sl, r0
 800c280:	f000 fc1c 	bl	800cabc <__mcmp>
 800c284:	2800      	cmp	r0, #0
 800c286:	dc03      	bgt.n	800c290 <_dtoa_r+0xab0>
 800c288:	d1e1      	bne.n	800c24e <_dtoa_r+0xa6e>
 800c28a:	f019 0f01 	tst.w	r9, #1
 800c28e:	d0de      	beq.n	800c24e <_dtoa_r+0xa6e>
 800c290:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c294:	d1d8      	bne.n	800c248 <_dtoa_r+0xa68>
 800c296:	9a01      	ldr	r2, [sp, #4]
 800c298:	2339      	movs	r3, #57	; 0x39
 800c29a:	7013      	strb	r3, [r2, #0]
 800c29c:	462b      	mov	r3, r5
 800c29e:	461d      	mov	r5, r3
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2a6:	2a39      	cmp	r2, #57	; 0x39
 800c2a8:	d06c      	beq.n	800c384 <_dtoa_r+0xba4>
 800c2aa:	3201      	adds	r2, #1
 800c2ac:	701a      	strb	r2, [r3, #0]
 800c2ae:	e747      	b.n	800c140 <_dtoa_r+0x960>
 800c2b0:	2a00      	cmp	r2, #0
 800c2b2:	dd07      	ble.n	800c2c4 <_dtoa_r+0xae4>
 800c2b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2b8:	d0ed      	beq.n	800c296 <_dtoa_r+0xab6>
 800c2ba:	9a01      	ldr	r2, [sp, #4]
 800c2bc:	f109 0301 	add.w	r3, r9, #1
 800c2c0:	7013      	strb	r3, [r2, #0]
 800c2c2:	e73d      	b.n	800c140 <_dtoa_r+0x960>
 800c2c4:	9b04      	ldr	r3, [sp, #16]
 800c2c6:	9a08      	ldr	r2, [sp, #32]
 800c2c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d043      	beq.n	800c358 <_dtoa_r+0xb78>
 800c2d0:	4651      	mov	r1, sl
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	220a      	movs	r2, #10
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f000 f9d6 	bl	800c688 <__multadd>
 800c2dc:	45b8      	cmp	r8, r7
 800c2de:	4682      	mov	sl, r0
 800c2e0:	f04f 0300 	mov.w	r3, #0
 800c2e4:	f04f 020a 	mov.w	r2, #10
 800c2e8:	4641      	mov	r1, r8
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	d107      	bne.n	800c2fe <_dtoa_r+0xb1e>
 800c2ee:	f000 f9cb 	bl	800c688 <__multadd>
 800c2f2:	4680      	mov	r8, r0
 800c2f4:	4607      	mov	r7, r0
 800c2f6:	9b04      	ldr	r3, [sp, #16]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	9304      	str	r3, [sp, #16]
 800c2fc:	e775      	b.n	800c1ea <_dtoa_r+0xa0a>
 800c2fe:	f000 f9c3 	bl	800c688 <__multadd>
 800c302:	4639      	mov	r1, r7
 800c304:	4680      	mov	r8, r0
 800c306:	2300      	movs	r3, #0
 800c308:	220a      	movs	r2, #10
 800c30a:	4620      	mov	r0, r4
 800c30c:	f000 f9bc 	bl	800c688 <__multadd>
 800c310:	4607      	mov	r7, r0
 800c312:	e7f0      	b.n	800c2f6 <_dtoa_r+0xb16>
 800c314:	9b04      	ldr	r3, [sp, #16]
 800c316:	9301      	str	r3, [sp, #4]
 800c318:	9d00      	ldr	r5, [sp, #0]
 800c31a:	4631      	mov	r1, r6
 800c31c:	4650      	mov	r0, sl
 800c31e:	f7ff f9d7 	bl	800b6d0 <quorem>
 800c322:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c326:	9b00      	ldr	r3, [sp, #0]
 800c328:	f805 9b01 	strb.w	r9, [r5], #1
 800c32c:	1aea      	subs	r2, r5, r3
 800c32e:	9b01      	ldr	r3, [sp, #4]
 800c330:	4293      	cmp	r3, r2
 800c332:	dd07      	ble.n	800c344 <_dtoa_r+0xb64>
 800c334:	4651      	mov	r1, sl
 800c336:	2300      	movs	r3, #0
 800c338:	220a      	movs	r2, #10
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 f9a4 	bl	800c688 <__multadd>
 800c340:	4682      	mov	sl, r0
 800c342:	e7ea      	b.n	800c31a <_dtoa_r+0xb3a>
 800c344:	9b01      	ldr	r3, [sp, #4]
 800c346:	2b00      	cmp	r3, #0
 800c348:	bfc8      	it	gt
 800c34a:	461d      	movgt	r5, r3
 800c34c:	9b00      	ldr	r3, [sp, #0]
 800c34e:	bfd8      	it	le
 800c350:	2501      	movle	r5, #1
 800c352:	441d      	add	r5, r3
 800c354:	f04f 0800 	mov.w	r8, #0
 800c358:	4651      	mov	r1, sl
 800c35a:	2201      	movs	r2, #1
 800c35c:	4620      	mov	r0, r4
 800c35e:	f000 fb41 	bl	800c9e4 <__lshift>
 800c362:	4631      	mov	r1, r6
 800c364:	4682      	mov	sl, r0
 800c366:	f000 fba9 	bl	800cabc <__mcmp>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	dc96      	bgt.n	800c29c <_dtoa_r+0xabc>
 800c36e:	d102      	bne.n	800c376 <_dtoa_r+0xb96>
 800c370:	f019 0f01 	tst.w	r9, #1
 800c374:	d192      	bne.n	800c29c <_dtoa_r+0xabc>
 800c376:	462b      	mov	r3, r5
 800c378:	461d      	mov	r5, r3
 800c37a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c37e:	2a30      	cmp	r2, #48	; 0x30
 800c380:	d0fa      	beq.n	800c378 <_dtoa_r+0xb98>
 800c382:	e6dd      	b.n	800c140 <_dtoa_r+0x960>
 800c384:	9a00      	ldr	r2, [sp, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d189      	bne.n	800c29e <_dtoa_r+0xabe>
 800c38a:	f10b 0b01 	add.w	fp, fp, #1
 800c38e:	2331      	movs	r3, #49	; 0x31
 800c390:	e796      	b.n	800c2c0 <_dtoa_r+0xae0>
 800c392:	4b0a      	ldr	r3, [pc, #40]	; (800c3bc <_dtoa_r+0xbdc>)
 800c394:	f7ff ba99 	b.w	800b8ca <_dtoa_r+0xea>
 800c398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f47f aa6d 	bne.w	800b87a <_dtoa_r+0x9a>
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <_dtoa_r+0xbe0>)
 800c3a2:	f7ff ba92 	b.w	800b8ca <_dtoa_r+0xea>
 800c3a6:	9b01      	ldr	r3, [sp, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	dcb5      	bgt.n	800c318 <_dtoa_r+0xb38>
 800c3ac:	9b07      	ldr	r3, [sp, #28]
 800c3ae:	2b02      	cmp	r3, #2
 800c3b0:	f73f aeb1 	bgt.w	800c116 <_dtoa_r+0x936>
 800c3b4:	e7b0      	b.n	800c318 <_dtoa_r+0xb38>
 800c3b6:	bf00      	nop
 800c3b8:	0800e110 	.word	0x0800e110
 800c3bc:	0800e070 	.word	0x0800e070
 800c3c0:	0800e094 	.word	0x0800e094

0800c3c4 <_free_r>:
 800c3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3c6:	2900      	cmp	r1, #0
 800c3c8:	d044      	beq.n	800c454 <_free_r+0x90>
 800c3ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ce:	9001      	str	r0, [sp, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f1a1 0404 	sub.w	r4, r1, #4
 800c3d6:	bfb8      	it	lt
 800c3d8:	18e4      	addlt	r4, r4, r3
 800c3da:	f000 f8e7 	bl	800c5ac <__malloc_lock>
 800c3de:	4a1e      	ldr	r2, [pc, #120]	; (800c458 <_free_r+0x94>)
 800c3e0:	9801      	ldr	r0, [sp, #4]
 800c3e2:	6813      	ldr	r3, [r2, #0]
 800c3e4:	b933      	cbnz	r3, 800c3f4 <_free_r+0x30>
 800c3e6:	6063      	str	r3, [r4, #4]
 800c3e8:	6014      	str	r4, [r2, #0]
 800c3ea:	b003      	add	sp, #12
 800c3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3f0:	f000 b8e2 	b.w	800c5b8 <__malloc_unlock>
 800c3f4:	42a3      	cmp	r3, r4
 800c3f6:	d908      	bls.n	800c40a <_free_r+0x46>
 800c3f8:	6825      	ldr	r5, [r4, #0]
 800c3fa:	1961      	adds	r1, r4, r5
 800c3fc:	428b      	cmp	r3, r1
 800c3fe:	bf01      	itttt	eq
 800c400:	6819      	ldreq	r1, [r3, #0]
 800c402:	685b      	ldreq	r3, [r3, #4]
 800c404:	1949      	addeq	r1, r1, r5
 800c406:	6021      	streq	r1, [r4, #0]
 800c408:	e7ed      	b.n	800c3e6 <_free_r+0x22>
 800c40a:	461a      	mov	r2, r3
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	b10b      	cbz	r3, 800c414 <_free_r+0x50>
 800c410:	42a3      	cmp	r3, r4
 800c412:	d9fa      	bls.n	800c40a <_free_r+0x46>
 800c414:	6811      	ldr	r1, [r2, #0]
 800c416:	1855      	adds	r5, r2, r1
 800c418:	42a5      	cmp	r5, r4
 800c41a:	d10b      	bne.n	800c434 <_free_r+0x70>
 800c41c:	6824      	ldr	r4, [r4, #0]
 800c41e:	4421      	add	r1, r4
 800c420:	1854      	adds	r4, r2, r1
 800c422:	42a3      	cmp	r3, r4
 800c424:	6011      	str	r1, [r2, #0]
 800c426:	d1e0      	bne.n	800c3ea <_free_r+0x26>
 800c428:	681c      	ldr	r4, [r3, #0]
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	6053      	str	r3, [r2, #4]
 800c42e:	440c      	add	r4, r1
 800c430:	6014      	str	r4, [r2, #0]
 800c432:	e7da      	b.n	800c3ea <_free_r+0x26>
 800c434:	d902      	bls.n	800c43c <_free_r+0x78>
 800c436:	230c      	movs	r3, #12
 800c438:	6003      	str	r3, [r0, #0]
 800c43a:	e7d6      	b.n	800c3ea <_free_r+0x26>
 800c43c:	6825      	ldr	r5, [r4, #0]
 800c43e:	1961      	adds	r1, r4, r5
 800c440:	428b      	cmp	r3, r1
 800c442:	bf04      	itt	eq
 800c444:	6819      	ldreq	r1, [r3, #0]
 800c446:	685b      	ldreq	r3, [r3, #4]
 800c448:	6063      	str	r3, [r4, #4]
 800c44a:	bf04      	itt	eq
 800c44c:	1949      	addeq	r1, r1, r5
 800c44e:	6021      	streq	r1, [r4, #0]
 800c450:	6054      	str	r4, [r2, #4]
 800c452:	e7ca      	b.n	800c3ea <_free_r+0x26>
 800c454:	b003      	add	sp, #12
 800c456:	bd30      	pop	{r4, r5, pc}
 800c458:	20001eec 	.word	0x20001eec

0800c45c <malloc>:
 800c45c:	4b02      	ldr	r3, [pc, #8]	; (800c468 <malloc+0xc>)
 800c45e:	4601      	mov	r1, r0
 800c460:	6818      	ldr	r0, [r3, #0]
 800c462:	f000 b823 	b.w	800c4ac <_malloc_r>
 800c466:	bf00      	nop
 800c468:	2000006c 	.word	0x2000006c

0800c46c <sbrk_aligned>:
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	4e0e      	ldr	r6, [pc, #56]	; (800c4a8 <sbrk_aligned+0x3c>)
 800c470:	460c      	mov	r4, r1
 800c472:	6831      	ldr	r1, [r6, #0]
 800c474:	4605      	mov	r5, r0
 800c476:	b911      	cbnz	r1, 800c47e <sbrk_aligned+0x12>
 800c478:	f000 fe40 	bl	800d0fc <_sbrk_r>
 800c47c:	6030      	str	r0, [r6, #0]
 800c47e:	4621      	mov	r1, r4
 800c480:	4628      	mov	r0, r5
 800c482:	f000 fe3b 	bl	800d0fc <_sbrk_r>
 800c486:	1c43      	adds	r3, r0, #1
 800c488:	d00a      	beq.n	800c4a0 <sbrk_aligned+0x34>
 800c48a:	1cc4      	adds	r4, r0, #3
 800c48c:	f024 0403 	bic.w	r4, r4, #3
 800c490:	42a0      	cmp	r0, r4
 800c492:	d007      	beq.n	800c4a4 <sbrk_aligned+0x38>
 800c494:	1a21      	subs	r1, r4, r0
 800c496:	4628      	mov	r0, r5
 800c498:	f000 fe30 	bl	800d0fc <_sbrk_r>
 800c49c:	3001      	adds	r0, #1
 800c49e:	d101      	bne.n	800c4a4 <sbrk_aligned+0x38>
 800c4a0:	f04f 34ff 	mov.w	r4, #4294967295
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	bd70      	pop	{r4, r5, r6, pc}
 800c4a8:	20001ef0 	.word	0x20001ef0

0800c4ac <_malloc_r>:
 800c4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b0:	1ccd      	adds	r5, r1, #3
 800c4b2:	f025 0503 	bic.w	r5, r5, #3
 800c4b6:	3508      	adds	r5, #8
 800c4b8:	2d0c      	cmp	r5, #12
 800c4ba:	bf38      	it	cc
 800c4bc:	250c      	movcc	r5, #12
 800c4be:	2d00      	cmp	r5, #0
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	db01      	blt.n	800c4c8 <_malloc_r+0x1c>
 800c4c4:	42a9      	cmp	r1, r5
 800c4c6:	d905      	bls.n	800c4d4 <_malloc_r+0x28>
 800c4c8:	230c      	movs	r3, #12
 800c4ca:	603b      	str	r3, [r7, #0]
 800c4cc:	2600      	movs	r6, #0
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c5a8 <_malloc_r+0xfc>
 800c4d8:	f000 f868 	bl	800c5ac <__malloc_lock>
 800c4dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c4e0:	461c      	mov	r4, r3
 800c4e2:	bb5c      	cbnz	r4, 800c53c <_malloc_r+0x90>
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	f7ff ffc0 	bl	800c46c <sbrk_aligned>
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	d155      	bne.n	800c59e <_malloc_r+0xf2>
 800c4f2:	f8d8 4000 	ldr.w	r4, [r8]
 800c4f6:	4626      	mov	r6, r4
 800c4f8:	2e00      	cmp	r6, #0
 800c4fa:	d145      	bne.n	800c588 <_malloc_r+0xdc>
 800c4fc:	2c00      	cmp	r4, #0
 800c4fe:	d048      	beq.n	800c592 <_malloc_r+0xe6>
 800c500:	6823      	ldr	r3, [r4, #0]
 800c502:	4631      	mov	r1, r6
 800c504:	4638      	mov	r0, r7
 800c506:	eb04 0903 	add.w	r9, r4, r3
 800c50a:	f000 fdf7 	bl	800d0fc <_sbrk_r>
 800c50e:	4581      	cmp	r9, r0
 800c510:	d13f      	bne.n	800c592 <_malloc_r+0xe6>
 800c512:	6821      	ldr	r1, [r4, #0]
 800c514:	1a6d      	subs	r5, r5, r1
 800c516:	4629      	mov	r1, r5
 800c518:	4638      	mov	r0, r7
 800c51a:	f7ff ffa7 	bl	800c46c <sbrk_aligned>
 800c51e:	3001      	adds	r0, #1
 800c520:	d037      	beq.n	800c592 <_malloc_r+0xe6>
 800c522:	6823      	ldr	r3, [r4, #0]
 800c524:	442b      	add	r3, r5
 800c526:	6023      	str	r3, [r4, #0]
 800c528:	f8d8 3000 	ldr.w	r3, [r8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d038      	beq.n	800c5a2 <_malloc_r+0xf6>
 800c530:	685a      	ldr	r2, [r3, #4]
 800c532:	42a2      	cmp	r2, r4
 800c534:	d12b      	bne.n	800c58e <_malloc_r+0xe2>
 800c536:	2200      	movs	r2, #0
 800c538:	605a      	str	r2, [r3, #4]
 800c53a:	e00f      	b.n	800c55c <_malloc_r+0xb0>
 800c53c:	6822      	ldr	r2, [r4, #0]
 800c53e:	1b52      	subs	r2, r2, r5
 800c540:	d41f      	bmi.n	800c582 <_malloc_r+0xd6>
 800c542:	2a0b      	cmp	r2, #11
 800c544:	d917      	bls.n	800c576 <_malloc_r+0xca>
 800c546:	1961      	adds	r1, r4, r5
 800c548:	42a3      	cmp	r3, r4
 800c54a:	6025      	str	r5, [r4, #0]
 800c54c:	bf18      	it	ne
 800c54e:	6059      	strne	r1, [r3, #4]
 800c550:	6863      	ldr	r3, [r4, #4]
 800c552:	bf08      	it	eq
 800c554:	f8c8 1000 	streq.w	r1, [r8]
 800c558:	5162      	str	r2, [r4, r5]
 800c55a:	604b      	str	r3, [r1, #4]
 800c55c:	4638      	mov	r0, r7
 800c55e:	f104 060b 	add.w	r6, r4, #11
 800c562:	f000 f829 	bl	800c5b8 <__malloc_unlock>
 800c566:	f026 0607 	bic.w	r6, r6, #7
 800c56a:	1d23      	adds	r3, r4, #4
 800c56c:	1af2      	subs	r2, r6, r3
 800c56e:	d0ae      	beq.n	800c4ce <_malloc_r+0x22>
 800c570:	1b9b      	subs	r3, r3, r6
 800c572:	50a3      	str	r3, [r4, r2]
 800c574:	e7ab      	b.n	800c4ce <_malloc_r+0x22>
 800c576:	42a3      	cmp	r3, r4
 800c578:	6862      	ldr	r2, [r4, #4]
 800c57a:	d1dd      	bne.n	800c538 <_malloc_r+0x8c>
 800c57c:	f8c8 2000 	str.w	r2, [r8]
 800c580:	e7ec      	b.n	800c55c <_malloc_r+0xb0>
 800c582:	4623      	mov	r3, r4
 800c584:	6864      	ldr	r4, [r4, #4]
 800c586:	e7ac      	b.n	800c4e2 <_malloc_r+0x36>
 800c588:	4634      	mov	r4, r6
 800c58a:	6876      	ldr	r6, [r6, #4]
 800c58c:	e7b4      	b.n	800c4f8 <_malloc_r+0x4c>
 800c58e:	4613      	mov	r3, r2
 800c590:	e7cc      	b.n	800c52c <_malloc_r+0x80>
 800c592:	230c      	movs	r3, #12
 800c594:	603b      	str	r3, [r7, #0]
 800c596:	4638      	mov	r0, r7
 800c598:	f000 f80e 	bl	800c5b8 <__malloc_unlock>
 800c59c:	e797      	b.n	800c4ce <_malloc_r+0x22>
 800c59e:	6025      	str	r5, [r4, #0]
 800c5a0:	e7dc      	b.n	800c55c <_malloc_r+0xb0>
 800c5a2:	605b      	str	r3, [r3, #4]
 800c5a4:	deff      	udf	#255	; 0xff
 800c5a6:	bf00      	nop
 800c5a8:	20001eec 	.word	0x20001eec

0800c5ac <__malloc_lock>:
 800c5ac:	4801      	ldr	r0, [pc, #4]	; (800c5b4 <__malloc_lock+0x8>)
 800c5ae:	f7ff b88d 	b.w	800b6cc <__retarget_lock_acquire_recursive>
 800c5b2:	bf00      	nop
 800c5b4:	20001ee8 	.word	0x20001ee8

0800c5b8 <__malloc_unlock>:
 800c5b8:	4801      	ldr	r0, [pc, #4]	; (800c5c0 <__malloc_unlock+0x8>)
 800c5ba:	f7ff b888 	b.w	800b6ce <__retarget_lock_release_recursive>
 800c5be:	bf00      	nop
 800c5c0:	20001ee8 	.word	0x20001ee8

0800c5c4 <_Balloc>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	69c6      	ldr	r6, [r0, #28]
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	b976      	cbnz	r6, 800c5ec <_Balloc+0x28>
 800c5ce:	2010      	movs	r0, #16
 800c5d0:	f7ff ff44 	bl	800c45c <malloc>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	61e0      	str	r0, [r4, #28]
 800c5d8:	b920      	cbnz	r0, 800c5e4 <_Balloc+0x20>
 800c5da:	4b18      	ldr	r3, [pc, #96]	; (800c63c <_Balloc+0x78>)
 800c5dc:	4818      	ldr	r0, [pc, #96]	; (800c640 <_Balloc+0x7c>)
 800c5de:	216b      	movs	r1, #107	; 0x6b
 800c5e0:	f000 fdaa 	bl	800d138 <__assert_func>
 800c5e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5e8:	6006      	str	r6, [r0, #0]
 800c5ea:	60c6      	str	r6, [r0, #12]
 800c5ec:	69e6      	ldr	r6, [r4, #28]
 800c5ee:	68f3      	ldr	r3, [r6, #12]
 800c5f0:	b183      	cbz	r3, 800c614 <_Balloc+0x50>
 800c5f2:	69e3      	ldr	r3, [r4, #28]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5fa:	b9b8      	cbnz	r0, 800c62c <_Balloc+0x68>
 800c5fc:	2101      	movs	r1, #1
 800c5fe:	fa01 f605 	lsl.w	r6, r1, r5
 800c602:	1d72      	adds	r2, r6, #5
 800c604:	0092      	lsls	r2, r2, #2
 800c606:	4620      	mov	r0, r4
 800c608:	f000 fdb4 	bl	800d174 <_calloc_r>
 800c60c:	b160      	cbz	r0, 800c628 <_Balloc+0x64>
 800c60e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c612:	e00e      	b.n	800c632 <_Balloc+0x6e>
 800c614:	2221      	movs	r2, #33	; 0x21
 800c616:	2104      	movs	r1, #4
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fdab 	bl	800d174 <_calloc_r>
 800c61e:	69e3      	ldr	r3, [r4, #28]
 800c620:	60f0      	str	r0, [r6, #12]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1e4      	bne.n	800c5f2 <_Balloc+0x2e>
 800c628:	2000      	movs	r0, #0
 800c62a:	bd70      	pop	{r4, r5, r6, pc}
 800c62c:	6802      	ldr	r2, [r0, #0]
 800c62e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c632:	2300      	movs	r3, #0
 800c634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c638:	e7f7      	b.n	800c62a <_Balloc+0x66>
 800c63a:	bf00      	nop
 800c63c:	0800e0a1 	.word	0x0800e0a1
 800c640:	0800e121 	.word	0x0800e121

0800c644 <_Bfree>:
 800c644:	b570      	push	{r4, r5, r6, lr}
 800c646:	69c6      	ldr	r6, [r0, #28]
 800c648:	4605      	mov	r5, r0
 800c64a:	460c      	mov	r4, r1
 800c64c:	b976      	cbnz	r6, 800c66c <_Bfree+0x28>
 800c64e:	2010      	movs	r0, #16
 800c650:	f7ff ff04 	bl	800c45c <malloc>
 800c654:	4602      	mov	r2, r0
 800c656:	61e8      	str	r0, [r5, #28]
 800c658:	b920      	cbnz	r0, 800c664 <_Bfree+0x20>
 800c65a:	4b09      	ldr	r3, [pc, #36]	; (800c680 <_Bfree+0x3c>)
 800c65c:	4809      	ldr	r0, [pc, #36]	; (800c684 <_Bfree+0x40>)
 800c65e:	218f      	movs	r1, #143	; 0x8f
 800c660:	f000 fd6a 	bl	800d138 <__assert_func>
 800c664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c668:	6006      	str	r6, [r0, #0]
 800c66a:	60c6      	str	r6, [r0, #12]
 800c66c:	b13c      	cbz	r4, 800c67e <_Bfree+0x3a>
 800c66e:	69eb      	ldr	r3, [r5, #28]
 800c670:	6862      	ldr	r2, [r4, #4]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c678:	6021      	str	r1, [r4, #0]
 800c67a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	0800e0a1 	.word	0x0800e0a1
 800c684:	0800e121 	.word	0x0800e121

0800c688 <__multadd>:
 800c688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c68c:	690d      	ldr	r5, [r1, #16]
 800c68e:	4607      	mov	r7, r0
 800c690:	460c      	mov	r4, r1
 800c692:	461e      	mov	r6, r3
 800c694:	f101 0c14 	add.w	ip, r1, #20
 800c698:	2000      	movs	r0, #0
 800c69a:	f8dc 3000 	ldr.w	r3, [ip]
 800c69e:	b299      	uxth	r1, r3
 800c6a0:	fb02 6101 	mla	r1, r2, r1, r6
 800c6a4:	0c1e      	lsrs	r6, r3, #16
 800c6a6:	0c0b      	lsrs	r3, r1, #16
 800c6a8:	fb02 3306 	mla	r3, r2, r6, r3
 800c6ac:	b289      	uxth	r1, r1
 800c6ae:	3001      	adds	r0, #1
 800c6b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6b4:	4285      	cmp	r5, r0
 800c6b6:	f84c 1b04 	str.w	r1, [ip], #4
 800c6ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6be:	dcec      	bgt.n	800c69a <__multadd+0x12>
 800c6c0:	b30e      	cbz	r6, 800c706 <__multadd+0x7e>
 800c6c2:	68a3      	ldr	r3, [r4, #8]
 800c6c4:	42ab      	cmp	r3, r5
 800c6c6:	dc19      	bgt.n	800c6fc <__multadd+0x74>
 800c6c8:	6861      	ldr	r1, [r4, #4]
 800c6ca:	4638      	mov	r0, r7
 800c6cc:	3101      	adds	r1, #1
 800c6ce:	f7ff ff79 	bl	800c5c4 <_Balloc>
 800c6d2:	4680      	mov	r8, r0
 800c6d4:	b928      	cbnz	r0, 800c6e2 <__multadd+0x5a>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	4b0c      	ldr	r3, [pc, #48]	; (800c70c <__multadd+0x84>)
 800c6da:	480d      	ldr	r0, [pc, #52]	; (800c710 <__multadd+0x88>)
 800c6dc:	21ba      	movs	r1, #186	; 0xba
 800c6de:	f000 fd2b 	bl	800d138 <__assert_func>
 800c6e2:	6922      	ldr	r2, [r4, #16]
 800c6e4:	3202      	adds	r2, #2
 800c6e6:	f104 010c 	add.w	r1, r4, #12
 800c6ea:	0092      	lsls	r2, r2, #2
 800c6ec:	300c      	adds	r0, #12
 800c6ee:	f000 fd15 	bl	800d11c <memcpy>
 800c6f2:	4621      	mov	r1, r4
 800c6f4:	4638      	mov	r0, r7
 800c6f6:	f7ff ffa5 	bl	800c644 <_Bfree>
 800c6fa:	4644      	mov	r4, r8
 800c6fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c700:	3501      	adds	r5, #1
 800c702:	615e      	str	r6, [r3, #20]
 800c704:	6125      	str	r5, [r4, #16]
 800c706:	4620      	mov	r0, r4
 800c708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c70c:	0800e110 	.word	0x0800e110
 800c710:	0800e121 	.word	0x0800e121

0800c714 <__hi0bits>:
 800c714:	0c03      	lsrs	r3, r0, #16
 800c716:	041b      	lsls	r3, r3, #16
 800c718:	b9d3      	cbnz	r3, 800c750 <__hi0bits+0x3c>
 800c71a:	0400      	lsls	r0, r0, #16
 800c71c:	2310      	movs	r3, #16
 800c71e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c722:	bf04      	itt	eq
 800c724:	0200      	lsleq	r0, r0, #8
 800c726:	3308      	addeq	r3, #8
 800c728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c72c:	bf04      	itt	eq
 800c72e:	0100      	lsleq	r0, r0, #4
 800c730:	3304      	addeq	r3, #4
 800c732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c736:	bf04      	itt	eq
 800c738:	0080      	lsleq	r0, r0, #2
 800c73a:	3302      	addeq	r3, #2
 800c73c:	2800      	cmp	r0, #0
 800c73e:	db05      	blt.n	800c74c <__hi0bits+0x38>
 800c740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c744:	f103 0301 	add.w	r3, r3, #1
 800c748:	bf08      	it	eq
 800c74a:	2320      	moveq	r3, #32
 800c74c:	4618      	mov	r0, r3
 800c74e:	4770      	bx	lr
 800c750:	2300      	movs	r3, #0
 800c752:	e7e4      	b.n	800c71e <__hi0bits+0xa>

0800c754 <__lo0bits>:
 800c754:	6803      	ldr	r3, [r0, #0]
 800c756:	f013 0207 	ands.w	r2, r3, #7
 800c75a:	d00c      	beq.n	800c776 <__lo0bits+0x22>
 800c75c:	07d9      	lsls	r1, r3, #31
 800c75e:	d422      	bmi.n	800c7a6 <__lo0bits+0x52>
 800c760:	079a      	lsls	r2, r3, #30
 800c762:	bf49      	itett	mi
 800c764:	085b      	lsrmi	r3, r3, #1
 800c766:	089b      	lsrpl	r3, r3, #2
 800c768:	6003      	strmi	r3, [r0, #0]
 800c76a:	2201      	movmi	r2, #1
 800c76c:	bf5c      	itt	pl
 800c76e:	6003      	strpl	r3, [r0, #0]
 800c770:	2202      	movpl	r2, #2
 800c772:	4610      	mov	r0, r2
 800c774:	4770      	bx	lr
 800c776:	b299      	uxth	r1, r3
 800c778:	b909      	cbnz	r1, 800c77e <__lo0bits+0x2a>
 800c77a:	0c1b      	lsrs	r3, r3, #16
 800c77c:	2210      	movs	r2, #16
 800c77e:	b2d9      	uxtb	r1, r3
 800c780:	b909      	cbnz	r1, 800c786 <__lo0bits+0x32>
 800c782:	3208      	adds	r2, #8
 800c784:	0a1b      	lsrs	r3, r3, #8
 800c786:	0719      	lsls	r1, r3, #28
 800c788:	bf04      	itt	eq
 800c78a:	091b      	lsreq	r3, r3, #4
 800c78c:	3204      	addeq	r2, #4
 800c78e:	0799      	lsls	r1, r3, #30
 800c790:	bf04      	itt	eq
 800c792:	089b      	lsreq	r3, r3, #2
 800c794:	3202      	addeq	r2, #2
 800c796:	07d9      	lsls	r1, r3, #31
 800c798:	d403      	bmi.n	800c7a2 <__lo0bits+0x4e>
 800c79a:	085b      	lsrs	r3, r3, #1
 800c79c:	f102 0201 	add.w	r2, r2, #1
 800c7a0:	d003      	beq.n	800c7aa <__lo0bits+0x56>
 800c7a2:	6003      	str	r3, [r0, #0]
 800c7a4:	e7e5      	b.n	800c772 <__lo0bits+0x1e>
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	e7e3      	b.n	800c772 <__lo0bits+0x1e>
 800c7aa:	2220      	movs	r2, #32
 800c7ac:	e7e1      	b.n	800c772 <__lo0bits+0x1e>
	...

0800c7b0 <__i2b>:
 800c7b0:	b510      	push	{r4, lr}
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	f7ff ff05 	bl	800c5c4 <_Balloc>
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	b928      	cbnz	r0, 800c7ca <__i2b+0x1a>
 800c7be:	4b05      	ldr	r3, [pc, #20]	; (800c7d4 <__i2b+0x24>)
 800c7c0:	4805      	ldr	r0, [pc, #20]	; (800c7d8 <__i2b+0x28>)
 800c7c2:	f240 1145 	movw	r1, #325	; 0x145
 800c7c6:	f000 fcb7 	bl	800d138 <__assert_func>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	6144      	str	r4, [r0, #20]
 800c7ce:	6103      	str	r3, [r0, #16]
 800c7d0:	bd10      	pop	{r4, pc}
 800c7d2:	bf00      	nop
 800c7d4:	0800e110 	.word	0x0800e110
 800c7d8:	0800e121 	.word	0x0800e121

0800c7dc <__multiply>:
 800c7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e0:	4691      	mov	r9, r2
 800c7e2:	690a      	ldr	r2, [r1, #16]
 800c7e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	bfb8      	it	lt
 800c7ec:	460b      	movlt	r3, r1
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	bfbc      	itt	lt
 800c7f2:	464c      	movlt	r4, r9
 800c7f4:	4699      	movlt	r9, r3
 800c7f6:	6927      	ldr	r7, [r4, #16]
 800c7f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c7fc:	68a3      	ldr	r3, [r4, #8]
 800c7fe:	6861      	ldr	r1, [r4, #4]
 800c800:	eb07 060a 	add.w	r6, r7, sl
 800c804:	42b3      	cmp	r3, r6
 800c806:	b085      	sub	sp, #20
 800c808:	bfb8      	it	lt
 800c80a:	3101      	addlt	r1, #1
 800c80c:	f7ff feda 	bl	800c5c4 <_Balloc>
 800c810:	b930      	cbnz	r0, 800c820 <__multiply+0x44>
 800c812:	4602      	mov	r2, r0
 800c814:	4b44      	ldr	r3, [pc, #272]	; (800c928 <__multiply+0x14c>)
 800c816:	4845      	ldr	r0, [pc, #276]	; (800c92c <__multiply+0x150>)
 800c818:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c81c:	f000 fc8c 	bl	800d138 <__assert_func>
 800c820:	f100 0514 	add.w	r5, r0, #20
 800c824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c828:	462b      	mov	r3, r5
 800c82a:	2200      	movs	r2, #0
 800c82c:	4543      	cmp	r3, r8
 800c82e:	d321      	bcc.n	800c874 <__multiply+0x98>
 800c830:	f104 0314 	add.w	r3, r4, #20
 800c834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c838:	f109 0314 	add.w	r3, r9, #20
 800c83c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c840:	9202      	str	r2, [sp, #8]
 800c842:	1b3a      	subs	r2, r7, r4
 800c844:	3a15      	subs	r2, #21
 800c846:	f022 0203 	bic.w	r2, r2, #3
 800c84a:	3204      	adds	r2, #4
 800c84c:	f104 0115 	add.w	r1, r4, #21
 800c850:	428f      	cmp	r7, r1
 800c852:	bf38      	it	cc
 800c854:	2204      	movcc	r2, #4
 800c856:	9201      	str	r2, [sp, #4]
 800c858:	9a02      	ldr	r2, [sp, #8]
 800c85a:	9303      	str	r3, [sp, #12]
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d80c      	bhi.n	800c87a <__multiply+0x9e>
 800c860:	2e00      	cmp	r6, #0
 800c862:	dd03      	ble.n	800c86c <__multiply+0x90>
 800c864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d05b      	beq.n	800c924 <__multiply+0x148>
 800c86c:	6106      	str	r6, [r0, #16]
 800c86e:	b005      	add	sp, #20
 800c870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c874:	f843 2b04 	str.w	r2, [r3], #4
 800c878:	e7d8      	b.n	800c82c <__multiply+0x50>
 800c87a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c87e:	f1ba 0f00 	cmp.w	sl, #0
 800c882:	d024      	beq.n	800c8ce <__multiply+0xf2>
 800c884:	f104 0e14 	add.w	lr, r4, #20
 800c888:	46a9      	mov	r9, r5
 800c88a:	f04f 0c00 	mov.w	ip, #0
 800c88e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c892:	f8d9 1000 	ldr.w	r1, [r9]
 800c896:	fa1f fb82 	uxth.w	fp, r2
 800c89a:	b289      	uxth	r1, r1
 800c89c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c8a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c8a4:	f8d9 2000 	ldr.w	r2, [r9]
 800c8a8:	4461      	add	r1, ip
 800c8aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c8ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800c8b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c8b6:	b289      	uxth	r1, r1
 800c8b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c8bc:	4577      	cmp	r7, lr
 800c8be:	f849 1b04 	str.w	r1, [r9], #4
 800c8c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c8c6:	d8e2      	bhi.n	800c88e <__multiply+0xb2>
 800c8c8:	9a01      	ldr	r2, [sp, #4]
 800c8ca:	f845 c002 	str.w	ip, [r5, r2]
 800c8ce:	9a03      	ldr	r2, [sp, #12]
 800c8d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	f1b9 0f00 	cmp.w	r9, #0
 800c8da:	d021      	beq.n	800c920 <__multiply+0x144>
 800c8dc:	6829      	ldr	r1, [r5, #0]
 800c8de:	f104 0c14 	add.w	ip, r4, #20
 800c8e2:	46ae      	mov	lr, r5
 800c8e4:	f04f 0a00 	mov.w	sl, #0
 800c8e8:	f8bc b000 	ldrh.w	fp, [ip]
 800c8ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c8f0:	fb09 220b 	mla	r2, r9, fp, r2
 800c8f4:	4452      	add	r2, sl
 800c8f6:	b289      	uxth	r1, r1
 800c8f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c8fc:	f84e 1b04 	str.w	r1, [lr], #4
 800c900:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c904:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c908:	f8be 1000 	ldrh.w	r1, [lr]
 800c90c:	fb09 110a 	mla	r1, r9, sl, r1
 800c910:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c914:	4567      	cmp	r7, ip
 800c916:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c91a:	d8e5      	bhi.n	800c8e8 <__multiply+0x10c>
 800c91c:	9a01      	ldr	r2, [sp, #4]
 800c91e:	50a9      	str	r1, [r5, r2]
 800c920:	3504      	adds	r5, #4
 800c922:	e799      	b.n	800c858 <__multiply+0x7c>
 800c924:	3e01      	subs	r6, #1
 800c926:	e79b      	b.n	800c860 <__multiply+0x84>
 800c928:	0800e110 	.word	0x0800e110
 800c92c:	0800e121 	.word	0x0800e121

0800c930 <__pow5mult>:
 800c930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c934:	4615      	mov	r5, r2
 800c936:	f012 0203 	ands.w	r2, r2, #3
 800c93a:	4606      	mov	r6, r0
 800c93c:	460f      	mov	r7, r1
 800c93e:	d007      	beq.n	800c950 <__pow5mult+0x20>
 800c940:	4c25      	ldr	r4, [pc, #148]	; (800c9d8 <__pow5mult+0xa8>)
 800c942:	3a01      	subs	r2, #1
 800c944:	2300      	movs	r3, #0
 800c946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c94a:	f7ff fe9d 	bl	800c688 <__multadd>
 800c94e:	4607      	mov	r7, r0
 800c950:	10ad      	asrs	r5, r5, #2
 800c952:	d03d      	beq.n	800c9d0 <__pow5mult+0xa0>
 800c954:	69f4      	ldr	r4, [r6, #28]
 800c956:	b97c      	cbnz	r4, 800c978 <__pow5mult+0x48>
 800c958:	2010      	movs	r0, #16
 800c95a:	f7ff fd7f 	bl	800c45c <malloc>
 800c95e:	4602      	mov	r2, r0
 800c960:	61f0      	str	r0, [r6, #28]
 800c962:	b928      	cbnz	r0, 800c970 <__pow5mult+0x40>
 800c964:	4b1d      	ldr	r3, [pc, #116]	; (800c9dc <__pow5mult+0xac>)
 800c966:	481e      	ldr	r0, [pc, #120]	; (800c9e0 <__pow5mult+0xb0>)
 800c968:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c96c:	f000 fbe4 	bl	800d138 <__assert_func>
 800c970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c974:	6004      	str	r4, [r0, #0]
 800c976:	60c4      	str	r4, [r0, #12]
 800c978:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c97c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c980:	b94c      	cbnz	r4, 800c996 <__pow5mult+0x66>
 800c982:	f240 2171 	movw	r1, #625	; 0x271
 800c986:	4630      	mov	r0, r6
 800c988:	f7ff ff12 	bl	800c7b0 <__i2b>
 800c98c:	2300      	movs	r3, #0
 800c98e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c992:	4604      	mov	r4, r0
 800c994:	6003      	str	r3, [r0, #0]
 800c996:	f04f 0900 	mov.w	r9, #0
 800c99a:	07eb      	lsls	r3, r5, #31
 800c99c:	d50a      	bpl.n	800c9b4 <__pow5mult+0x84>
 800c99e:	4639      	mov	r1, r7
 800c9a0:	4622      	mov	r2, r4
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f7ff ff1a 	bl	800c7dc <__multiply>
 800c9a8:	4639      	mov	r1, r7
 800c9aa:	4680      	mov	r8, r0
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	f7ff fe49 	bl	800c644 <_Bfree>
 800c9b2:	4647      	mov	r7, r8
 800c9b4:	106d      	asrs	r5, r5, #1
 800c9b6:	d00b      	beq.n	800c9d0 <__pow5mult+0xa0>
 800c9b8:	6820      	ldr	r0, [r4, #0]
 800c9ba:	b938      	cbnz	r0, 800c9cc <__pow5mult+0x9c>
 800c9bc:	4622      	mov	r2, r4
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	f7ff ff0b 	bl	800c7dc <__multiply>
 800c9c6:	6020      	str	r0, [r4, #0]
 800c9c8:	f8c0 9000 	str.w	r9, [r0]
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	e7e4      	b.n	800c99a <__pow5mult+0x6a>
 800c9d0:	4638      	mov	r0, r7
 800c9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9d6:	bf00      	nop
 800c9d8:	0800e270 	.word	0x0800e270
 800c9dc:	0800e0a1 	.word	0x0800e0a1
 800c9e0:	0800e121 	.word	0x0800e121

0800c9e4 <__lshift>:
 800c9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e8:	460c      	mov	r4, r1
 800c9ea:	6849      	ldr	r1, [r1, #4]
 800c9ec:	6923      	ldr	r3, [r4, #16]
 800c9ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c9f2:	68a3      	ldr	r3, [r4, #8]
 800c9f4:	4607      	mov	r7, r0
 800c9f6:	4691      	mov	r9, r2
 800c9f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c9fc:	f108 0601 	add.w	r6, r8, #1
 800ca00:	42b3      	cmp	r3, r6
 800ca02:	db0b      	blt.n	800ca1c <__lshift+0x38>
 800ca04:	4638      	mov	r0, r7
 800ca06:	f7ff fddd 	bl	800c5c4 <_Balloc>
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	b948      	cbnz	r0, 800ca22 <__lshift+0x3e>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	4b28      	ldr	r3, [pc, #160]	; (800cab4 <__lshift+0xd0>)
 800ca12:	4829      	ldr	r0, [pc, #164]	; (800cab8 <__lshift+0xd4>)
 800ca14:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ca18:	f000 fb8e 	bl	800d138 <__assert_func>
 800ca1c:	3101      	adds	r1, #1
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	e7ee      	b.n	800ca00 <__lshift+0x1c>
 800ca22:	2300      	movs	r3, #0
 800ca24:	f100 0114 	add.w	r1, r0, #20
 800ca28:	f100 0210 	add.w	r2, r0, #16
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	4553      	cmp	r3, sl
 800ca30:	db33      	blt.n	800ca9a <__lshift+0xb6>
 800ca32:	6920      	ldr	r0, [r4, #16]
 800ca34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca38:	f104 0314 	add.w	r3, r4, #20
 800ca3c:	f019 091f 	ands.w	r9, r9, #31
 800ca40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ca48:	d02b      	beq.n	800caa2 <__lshift+0xbe>
 800ca4a:	f1c9 0e20 	rsb	lr, r9, #32
 800ca4e:	468a      	mov	sl, r1
 800ca50:	2200      	movs	r2, #0
 800ca52:	6818      	ldr	r0, [r3, #0]
 800ca54:	fa00 f009 	lsl.w	r0, r0, r9
 800ca58:	4310      	orrs	r0, r2
 800ca5a:	f84a 0b04 	str.w	r0, [sl], #4
 800ca5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca62:	459c      	cmp	ip, r3
 800ca64:	fa22 f20e 	lsr.w	r2, r2, lr
 800ca68:	d8f3      	bhi.n	800ca52 <__lshift+0x6e>
 800ca6a:	ebac 0304 	sub.w	r3, ip, r4
 800ca6e:	3b15      	subs	r3, #21
 800ca70:	f023 0303 	bic.w	r3, r3, #3
 800ca74:	3304      	adds	r3, #4
 800ca76:	f104 0015 	add.w	r0, r4, #21
 800ca7a:	4584      	cmp	ip, r0
 800ca7c:	bf38      	it	cc
 800ca7e:	2304      	movcc	r3, #4
 800ca80:	50ca      	str	r2, [r1, r3]
 800ca82:	b10a      	cbz	r2, 800ca88 <__lshift+0xa4>
 800ca84:	f108 0602 	add.w	r6, r8, #2
 800ca88:	3e01      	subs	r6, #1
 800ca8a:	4638      	mov	r0, r7
 800ca8c:	612e      	str	r6, [r5, #16]
 800ca8e:	4621      	mov	r1, r4
 800ca90:	f7ff fdd8 	bl	800c644 <_Bfree>
 800ca94:	4628      	mov	r0, r5
 800ca96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca9e:	3301      	adds	r3, #1
 800caa0:	e7c5      	b.n	800ca2e <__lshift+0x4a>
 800caa2:	3904      	subs	r1, #4
 800caa4:	f853 2b04 	ldr.w	r2, [r3], #4
 800caa8:	f841 2f04 	str.w	r2, [r1, #4]!
 800caac:	459c      	cmp	ip, r3
 800caae:	d8f9      	bhi.n	800caa4 <__lshift+0xc0>
 800cab0:	e7ea      	b.n	800ca88 <__lshift+0xa4>
 800cab2:	bf00      	nop
 800cab4:	0800e110 	.word	0x0800e110
 800cab8:	0800e121 	.word	0x0800e121

0800cabc <__mcmp>:
 800cabc:	b530      	push	{r4, r5, lr}
 800cabe:	6902      	ldr	r2, [r0, #16]
 800cac0:	690c      	ldr	r4, [r1, #16]
 800cac2:	1b12      	subs	r2, r2, r4
 800cac4:	d10e      	bne.n	800cae4 <__mcmp+0x28>
 800cac6:	f100 0314 	add.w	r3, r0, #20
 800caca:	3114      	adds	r1, #20
 800cacc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cad0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cad4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cad8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cadc:	42a5      	cmp	r5, r4
 800cade:	d003      	beq.n	800cae8 <__mcmp+0x2c>
 800cae0:	d305      	bcc.n	800caee <__mcmp+0x32>
 800cae2:	2201      	movs	r2, #1
 800cae4:	4610      	mov	r0, r2
 800cae6:	bd30      	pop	{r4, r5, pc}
 800cae8:	4283      	cmp	r3, r0
 800caea:	d3f3      	bcc.n	800cad4 <__mcmp+0x18>
 800caec:	e7fa      	b.n	800cae4 <__mcmp+0x28>
 800caee:	f04f 32ff 	mov.w	r2, #4294967295
 800caf2:	e7f7      	b.n	800cae4 <__mcmp+0x28>

0800caf4 <__mdiff>:
 800caf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caf8:	460c      	mov	r4, r1
 800cafa:	4606      	mov	r6, r0
 800cafc:	4611      	mov	r1, r2
 800cafe:	4620      	mov	r0, r4
 800cb00:	4690      	mov	r8, r2
 800cb02:	f7ff ffdb 	bl	800cabc <__mcmp>
 800cb06:	1e05      	subs	r5, r0, #0
 800cb08:	d110      	bne.n	800cb2c <__mdiff+0x38>
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	4630      	mov	r0, r6
 800cb0e:	f7ff fd59 	bl	800c5c4 <_Balloc>
 800cb12:	b930      	cbnz	r0, 800cb22 <__mdiff+0x2e>
 800cb14:	4b3a      	ldr	r3, [pc, #232]	; (800cc00 <__mdiff+0x10c>)
 800cb16:	4602      	mov	r2, r0
 800cb18:	f240 2137 	movw	r1, #567	; 0x237
 800cb1c:	4839      	ldr	r0, [pc, #228]	; (800cc04 <__mdiff+0x110>)
 800cb1e:	f000 fb0b 	bl	800d138 <__assert_func>
 800cb22:	2301      	movs	r3, #1
 800cb24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2c:	bfa4      	itt	ge
 800cb2e:	4643      	movge	r3, r8
 800cb30:	46a0      	movge	r8, r4
 800cb32:	4630      	mov	r0, r6
 800cb34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cb38:	bfa6      	itte	ge
 800cb3a:	461c      	movge	r4, r3
 800cb3c:	2500      	movge	r5, #0
 800cb3e:	2501      	movlt	r5, #1
 800cb40:	f7ff fd40 	bl	800c5c4 <_Balloc>
 800cb44:	b920      	cbnz	r0, 800cb50 <__mdiff+0x5c>
 800cb46:	4b2e      	ldr	r3, [pc, #184]	; (800cc00 <__mdiff+0x10c>)
 800cb48:	4602      	mov	r2, r0
 800cb4a:	f240 2145 	movw	r1, #581	; 0x245
 800cb4e:	e7e5      	b.n	800cb1c <__mdiff+0x28>
 800cb50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cb54:	6926      	ldr	r6, [r4, #16]
 800cb56:	60c5      	str	r5, [r0, #12]
 800cb58:	f104 0914 	add.w	r9, r4, #20
 800cb5c:	f108 0514 	add.w	r5, r8, #20
 800cb60:	f100 0e14 	add.w	lr, r0, #20
 800cb64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cb68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cb6c:	f108 0210 	add.w	r2, r8, #16
 800cb70:	46f2      	mov	sl, lr
 800cb72:	2100      	movs	r1, #0
 800cb74:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb7c:	fa11 f88b 	uxtah	r8, r1, fp
 800cb80:	b299      	uxth	r1, r3
 800cb82:	0c1b      	lsrs	r3, r3, #16
 800cb84:	eba8 0801 	sub.w	r8, r8, r1
 800cb88:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb8c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb90:	fa1f f888 	uxth.w	r8, r8
 800cb94:	1419      	asrs	r1, r3, #16
 800cb96:	454e      	cmp	r6, r9
 800cb98:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb9c:	f84a 3b04 	str.w	r3, [sl], #4
 800cba0:	d8e8      	bhi.n	800cb74 <__mdiff+0x80>
 800cba2:	1b33      	subs	r3, r6, r4
 800cba4:	3b15      	subs	r3, #21
 800cba6:	f023 0303 	bic.w	r3, r3, #3
 800cbaa:	3304      	adds	r3, #4
 800cbac:	3415      	adds	r4, #21
 800cbae:	42a6      	cmp	r6, r4
 800cbb0:	bf38      	it	cc
 800cbb2:	2304      	movcc	r3, #4
 800cbb4:	441d      	add	r5, r3
 800cbb6:	4473      	add	r3, lr
 800cbb8:	469e      	mov	lr, r3
 800cbba:	462e      	mov	r6, r5
 800cbbc:	4566      	cmp	r6, ip
 800cbbe:	d30e      	bcc.n	800cbde <__mdiff+0xea>
 800cbc0:	f10c 0203 	add.w	r2, ip, #3
 800cbc4:	1b52      	subs	r2, r2, r5
 800cbc6:	f022 0203 	bic.w	r2, r2, #3
 800cbca:	3d03      	subs	r5, #3
 800cbcc:	45ac      	cmp	ip, r5
 800cbce:	bf38      	it	cc
 800cbd0:	2200      	movcc	r2, #0
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cbd8:	b17a      	cbz	r2, 800cbfa <__mdiff+0x106>
 800cbda:	6107      	str	r7, [r0, #16]
 800cbdc:	e7a4      	b.n	800cb28 <__mdiff+0x34>
 800cbde:	f856 8b04 	ldr.w	r8, [r6], #4
 800cbe2:	fa11 f288 	uxtah	r2, r1, r8
 800cbe6:	1414      	asrs	r4, r2, #16
 800cbe8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cbec:	b292      	uxth	r2, r2
 800cbee:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cbf2:	f84e 2b04 	str.w	r2, [lr], #4
 800cbf6:	1421      	asrs	r1, r4, #16
 800cbf8:	e7e0      	b.n	800cbbc <__mdiff+0xc8>
 800cbfa:	3f01      	subs	r7, #1
 800cbfc:	e7ea      	b.n	800cbd4 <__mdiff+0xe0>
 800cbfe:	bf00      	nop
 800cc00:	0800e110 	.word	0x0800e110
 800cc04:	0800e121 	.word	0x0800e121

0800cc08 <__d2b>:
 800cc08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc0c:	460f      	mov	r7, r1
 800cc0e:	2101      	movs	r1, #1
 800cc10:	ec59 8b10 	vmov	r8, r9, d0
 800cc14:	4616      	mov	r6, r2
 800cc16:	f7ff fcd5 	bl	800c5c4 <_Balloc>
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	b930      	cbnz	r0, 800cc2c <__d2b+0x24>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	4b24      	ldr	r3, [pc, #144]	; (800ccb4 <__d2b+0xac>)
 800cc22:	4825      	ldr	r0, [pc, #148]	; (800ccb8 <__d2b+0xb0>)
 800cc24:	f240 310f 	movw	r1, #783	; 0x30f
 800cc28:	f000 fa86 	bl	800d138 <__assert_func>
 800cc2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc34:	bb2d      	cbnz	r5, 800cc82 <__d2b+0x7a>
 800cc36:	9301      	str	r3, [sp, #4]
 800cc38:	f1b8 0300 	subs.w	r3, r8, #0
 800cc3c:	d026      	beq.n	800cc8c <__d2b+0x84>
 800cc3e:	4668      	mov	r0, sp
 800cc40:	9300      	str	r3, [sp, #0]
 800cc42:	f7ff fd87 	bl	800c754 <__lo0bits>
 800cc46:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cc4a:	b1e8      	cbz	r0, 800cc88 <__d2b+0x80>
 800cc4c:	f1c0 0320 	rsb	r3, r0, #32
 800cc50:	fa02 f303 	lsl.w	r3, r2, r3
 800cc54:	430b      	orrs	r3, r1
 800cc56:	40c2      	lsrs	r2, r0
 800cc58:	6163      	str	r3, [r4, #20]
 800cc5a:	9201      	str	r2, [sp, #4]
 800cc5c:	9b01      	ldr	r3, [sp, #4]
 800cc5e:	61a3      	str	r3, [r4, #24]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	bf14      	ite	ne
 800cc64:	2202      	movne	r2, #2
 800cc66:	2201      	moveq	r2, #1
 800cc68:	6122      	str	r2, [r4, #16]
 800cc6a:	b1bd      	cbz	r5, 800cc9c <__d2b+0x94>
 800cc6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc70:	4405      	add	r5, r0
 800cc72:	603d      	str	r5, [r7, #0]
 800cc74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc78:	6030      	str	r0, [r6, #0]
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	b003      	add	sp, #12
 800cc7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc86:	e7d6      	b.n	800cc36 <__d2b+0x2e>
 800cc88:	6161      	str	r1, [r4, #20]
 800cc8a:	e7e7      	b.n	800cc5c <__d2b+0x54>
 800cc8c:	a801      	add	r0, sp, #4
 800cc8e:	f7ff fd61 	bl	800c754 <__lo0bits>
 800cc92:	9b01      	ldr	r3, [sp, #4]
 800cc94:	6163      	str	r3, [r4, #20]
 800cc96:	3020      	adds	r0, #32
 800cc98:	2201      	movs	r2, #1
 800cc9a:	e7e5      	b.n	800cc68 <__d2b+0x60>
 800cc9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cca0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cca4:	6038      	str	r0, [r7, #0]
 800cca6:	6918      	ldr	r0, [r3, #16]
 800cca8:	f7ff fd34 	bl	800c714 <__hi0bits>
 800ccac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ccb0:	e7e2      	b.n	800cc78 <__d2b+0x70>
 800ccb2:	bf00      	nop
 800ccb4:	0800e110 	.word	0x0800e110
 800ccb8:	0800e121 	.word	0x0800e121

0800ccbc <__ssputs_r>:
 800ccbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc0:	688e      	ldr	r6, [r1, #8]
 800ccc2:	461f      	mov	r7, r3
 800ccc4:	42be      	cmp	r6, r7
 800ccc6:	680b      	ldr	r3, [r1, #0]
 800ccc8:	4682      	mov	sl, r0
 800ccca:	460c      	mov	r4, r1
 800cccc:	4690      	mov	r8, r2
 800ccce:	d82c      	bhi.n	800cd2a <__ssputs_r+0x6e>
 800ccd0:	898a      	ldrh	r2, [r1, #12]
 800ccd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccd6:	d026      	beq.n	800cd26 <__ssputs_r+0x6a>
 800ccd8:	6965      	ldr	r5, [r4, #20]
 800ccda:	6909      	ldr	r1, [r1, #16]
 800ccdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cce0:	eba3 0901 	sub.w	r9, r3, r1
 800cce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cce8:	1c7b      	adds	r3, r7, #1
 800ccea:	444b      	add	r3, r9
 800ccec:	106d      	asrs	r5, r5, #1
 800ccee:	429d      	cmp	r5, r3
 800ccf0:	bf38      	it	cc
 800ccf2:	461d      	movcc	r5, r3
 800ccf4:	0553      	lsls	r3, r2, #21
 800ccf6:	d527      	bpl.n	800cd48 <__ssputs_r+0x8c>
 800ccf8:	4629      	mov	r1, r5
 800ccfa:	f7ff fbd7 	bl	800c4ac <_malloc_r>
 800ccfe:	4606      	mov	r6, r0
 800cd00:	b360      	cbz	r0, 800cd5c <__ssputs_r+0xa0>
 800cd02:	6921      	ldr	r1, [r4, #16]
 800cd04:	464a      	mov	r2, r9
 800cd06:	f000 fa09 	bl	800d11c <memcpy>
 800cd0a:	89a3      	ldrh	r3, [r4, #12]
 800cd0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	6126      	str	r6, [r4, #16]
 800cd18:	6165      	str	r5, [r4, #20]
 800cd1a:	444e      	add	r6, r9
 800cd1c:	eba5 0509 	sub.w	r5, r5, r9
 800cd20:	6026      	str	r6, [r4, #0]
 800cd22:	60a5      	str	r5, [r4, #8]
 800cd24:	463e      	mov	r6, r7
 800cd26:	42be      	cmp	r6, r7
 800cd28:	d900      	bls.n	800cd2c <__ssputs_r+0x70>
 800cd2a:	463e      	mov	r6, r7
 800cd2c:	6820      	ldr	r0, [r4, #0]
 800cd2e:	4632      	mov	r2, r6
 800cd30:	4641      	mov	r1, r8
 800cd32:	f000 f9c9 	bl	800d0c8 <memmove>
 800cd36:	68a3      	ldr	r3, [r4, #8]
 800cd38:	1b9b      	subs	r3, r3, r6
 800cd3a:	60a3      	str	r3, [r4, #8]
 800cd3c:	6823      	ldr	r3, [r4, #0]
 800cd3e:	4433      	add	r3, r6
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	2000      	movs	r0, #0
 800cd44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd48:	462a      	mov	r2, r5
 800cd4a:	f000 fa3b 	bl	800d1c4 <_realloc_r>
 800cd4e:	4606      	mov	r6, r0
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d1e0      	bne.n	800cd16 <__ssputs_r+0x5a>
 800cd54:	6921      	ldr	r1, [r4, #16]
 800cd56:	4650      	mov	r0, sl
 800cd58:	f7ff fb34 	bl	800c3c4 <_free_r>
 800cd5c:	230c      	movs	r3, #12
 800cd5e:	f8ca 3000 	str.w	r3, [sl]
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd68:	81a3      	strh	r3, [r4, #12]
 800cd6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cd6e:	e7e9      	b.n	800cd44 <__ssputs_r+0x88>

0800cd70 <_svfiprintf_r>:
 800cd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd74:	4698      	mov	r8, r3
 800cd76:	898b      	ldrh	r3, [r1, #12]
 800cd78:	061b      	lsls	r3, r3, #24
 800cd7a:	b09d      	sub	sp, #116	; 0x74
 800cd7c:	4607      	mov	r7, r0
 800cd7e:	460d      	mov	r5, r1
 800cd80:	4614      	mov	r4, r2
 800cd82:	d50e      	bpl.n	800cda2 <_svfiprintf_r+0x32>
 800cd84:	690b      	ldr	r3, [r1, #16]
 800cd86:	b963      	cbnz	r3, 800cda2 <_svfiprintf_r+0x32>
 800cd88:	2140      	movs	r1, #64	; 0x40
 800cd8a:	f7ff fb8f 	bl	800c4ac <_malloc_r>
 800cd8e:	6028      	str	r0, [r5, #0]
 800cd90:	6128      	str	r0, [r5, #16]
 800cd92:	b920      	cbnz	r0, 800cd9e <_svfiprintf_r+0x2e>
 800cd94:	230c      	movs	r3, #12
 800cd96:	603b      	str	r3, [r7, #0]
 800cd98:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9c:	e0d0      	b.n	800cf40 <_svfiprintf_r+0x1d0>
 800cd9e:	2340      	movs	r3, #64	; 0x40
 800cda0:	616b      	str	r3, [r5, #20]
 800cda2:	2300      	movs	r3, #0
 800cda4:	9309      	str	r3, [sp, #36]	; 0x24
 800cda6:	2320      	movs	r3, #32
 800cda8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdac:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdb0:	2330      	movs	r3, #48	; 0x30
 800cdb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cf58 <_svfiprintf_r+0x1e8>
 800cdb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdba:	f04f 0901 	mov.w	r9, #1
 800cdbe:	4623      	mov	r3, r4
 800cdc0:	469a      	mov	sl, r3
 800cdc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdc6:	b10a      	cbz	r2, 800cdcc <_svfiprintf_r+0x5c>
 800cdc8:	2a25      	cmp	r2, #37	; 0x25
 800cdca:	d1f9      	bne.n	800cdc0 <_svfiprintf_r+0x50>
 800cdcc:	ebba 0b04 	subs.w	fp, sl, r4
 800cdd0:	d00b      	beq.n	800cdea <_svfiprintf_r+0x7a>
 800cdd2:	465b      	mov	r3, fp
 800cdd4:	4622      	mov	r2, r4
 800cdd6:	4629      	mov	r1, r5
 800cdd8:	4638      	mov	r0, r7
 800cdda:	f7ff ff6f 	bl	800ccbc <__ssputs_r>
 800cdde:	3001      	adds	r0, #1
 800cde0:	f000 80a9 	beq.w	800cf36 <_svfiprintf_r+0x1c6>
 800cde4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cde6:	445a      	add	r2, fp
 800cde8:	9209      	str	r2, [sp, #36]	; 0x24
 800cdea:	f89a 3000 	ldrb.w	r3, [sl]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	f000 80a1 	beq.w	800cf36 <_svfiprintf_r+0x1c6>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f04f 32ff 	mov.w	r2, #4294967295
 800cdfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdfe:	f10a 0a01 	add.w	sl, sl, #1
 800ce02:	9304      	str	r3, [sp, #16]
 800ce04:	9307      	str	r3, [sp, #28]
 800ce06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ce0c:	4654      	mov	r4, sl
 800ce0e:	2205      	movs	r2, #5
 800ce10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce14:	4850      	ldr	r0, [pc, #320]	; (800cf58 <_svfiprintf_r+0x1e8>)
 800ce16:	f7f3 f9db 	bl	80001d0 <memchr>
 800ce1a:	9a04      	ldr	r2, [sp, #16]
 800ce1c:	b9d8      	cbnz	r0, 800ce56 <_svfiprintf_r+0xe6>
 800ce1e:	06d0      	lsls	r0, r2, #27
 800ce20:	bf44      	itt	mi
 800ce22:	2320      	movmi	r3, #32
 800ce24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce28:	0711      	lsls	r1, r2, #28
 800ce2a:	bf44      	itt	mi
 800ce2c:	232b      	movmi	r3, #43	; 0x2b
 800ce2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce32:	f89a 3000 	ldrb.w	r3, [sl]
 800ce36:	2b2a      	cmp	r3, #42	; 0x2a
 800ce38:	d015      	beq.n	800ce66 <_svfiprintf_r+0xf6>
 800ce3a:	9a07      	ldr	r2, [sp, #28]
 800ce3c:	4654      	mov	r4, sl
 800ce3e:	2000      	movs	r0, #0
 800ce40:	f04f 0c0a 	mov.w	ip, #10
 800ce44:	4621      	mov	r1, r4
 800ce46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce4a:	3b30      	subs	r3, #48	; 0x30
 800ce4c:	2b09      	cmp	r3, #9
 800ce4e:	d94d      	bls.n	800ceec <_svfiprintf_r+0x17c>
 800ce50:	b1b0      	cbz	r0, 800ce80 <_svfiprintf_r+0x110>
 800ce52:	9207      	str	r2, [sp, #28]
 800ce54:	e014      	b.n	800ce80 <_svfiprintf_r+0x110>
 800ce56:	eba0 0308 	sub.w	r3, r0, r8
 800ce5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	9304      	str	r3, [sp, #16]
 800ce62:	46a2      	mov	sl, r4
 800ce64:	e7d2      	b.n	800ce0c <_svfiprintf_r+0x9c>
 800ce66:	9b03      	ldr	r3, [sp, #12]
 800ce68:	1d19      	adds	r1, r3, #4
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	9103      	str	r1, [sp, #12]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	bfbb      	ittet	lt
 800ce72:	425b      	neglt	r3, r3
 800ce74:	f042 0202 	orrlt.w	r2, r2, #2
 800ce78:	9307      	strge	r3, [sp, #28]
 800ce7a:	9307      	strlt	r3, [sp, #28]
 800ce7c:	bfb8      	it	lt
 800ce7e:	9204      	strlt	r2, [sp, #16]
 800ce80:	7823      	ldrb	r3, [r4, #0]
 800ce82:	2b2e      	cmp	r3, #46	; 0x2e
 800ce84:	d10c      	bne.n	800cea0 <_svfiprintf_r+0x130>
 800ce86:	7863      	ldrb	r3, [r4, #1]
 800ce88:	2b2a      	cmp	r3, #42	; 0x2a
 800ce8a:	d134      	bne.n	800cef6 <_svfiprintf_r+0x186>
 800ce8c:	9b03      	ldr	r3, [sp, #12]
 800ce8e:	1d1a      	adds	r2, r3, #4
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	9203      	str	r2, [sp, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	bfb8      	it	lt
 800ce98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce9c:	3402      	adds	r4, #2
 800ce9e:	9305      	str	r3, [sp, #20]
 800cea0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cf68 <_svfiprintf_r+0x1f8>
 800cea4:	7821      	ldrb	r1, [r4, #0]
 800cea6:	2203      	movs	r2, #3
 800cea8:	4650      	mov	r0, sl
 800ceaa:	f7f3 f991 	bl	80001d0 <memchr>
 800ceae:	b138      	cbz	r0, 800cec0 <_svfiprintf_r+0x150>
 800ceb0:	9b04      	ldr	r3, [sp, #16]
 800ceb2:	eba0 000a 	sub.w	r0, r0, sl
 800ceb6:	2240      	movs	r2, #64	; 0x40
 800ceb8:	4082      	lsls	r2, r0
 800ceba:	4313      	orrs	r3, r2
 800cebc:	3401      	adds	r4, #1
 800cebe:	9304      	str	r3, [sp, #16]
 800cec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec4:	4825      	ldr	r0, [pc, #148]	; (800cf5c <_svfiprintf_r+0x1ec>)
 800cec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ceca:	2206      	movs	r2, #6
 800cecc:	f7f3 f980 	bl	80001d0 <memchr>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d038      	beq.n	800cf46 <_svfiprintf_r+0x1d6>
 800ced4:	4b22      	ldr	r3, [pc, #136]	; (800cf60 <_svfiprintf_r+0x1f0>)
 800ced6:	bb1b      	cbnz	r3, 800cf20 <_svfiprintf_r+0x1b0>
 800ced8:	9b03      	ldr	r3, [sp, #12]
 800ceda:	3307      	adds	r3, #7
 800cedc:	f023 0307 	bic.w	r3, r3, #7
 800cee0:	3308      	adds	r3, #8
 800cee2:	9303      	str	r3, [sp, #12]
 800cee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cee6:	4433      	add	r3, r6
 800cee8:	9309      	str	r3, [sp, #36]	; 0x24
 800ceea:	e768      	b.n	800cdbe <_svfiprintf_r+0x4e>
 800ceec:	fb0c 3202 	mla	r2, ip, r2, r3
 800cef0:	460c      	mov	r4, r1
 800cef2:	2001      	movs	r0, #1
 800cef4:	e7a6      	b.n	800ce44 <_svfiprintf_r+0xd4>
 800cef6:	2300      	movs	r3, #0
 800cef8:	3401      	adds	r4, #1
 800cefa:	9305      	str	r3, [sp, #20]
 800cefc:	4619      	mov	r1, r3
 800cefe:	f04f 0c0a 	mov.w	ip, #10
 800cf02:	4620      	mov	r0, r4
 800cf04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf08:	3a30      	subs	r2, #48	; 0x30
 800cf0a:	2a09      	cmp	r2, #9
 800cf0c:	d903      	bls.n	800cf16 <_svfiprintf_r+0x1a6>
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0c6      	beq.n	800cea0 <_svfiprintf_r+0x130>
 800cf12:	9105      	str	r1, [sp, #20]
 800cf14:	e7c4      	b.n	800cea0 <_svfiprintf_r+0x130>
 800cf16:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e7f0      	b.n	800cf02 <_svfiprintf_r+0x192>
 800cf20:	ab03      	add	r3, sp, #12
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	462a      	mov	r2, r5
 800cf26:	4b0f      	ldr	r3, [pc, #60]	; (800cf64 <_svfiprintf_r+0x1f4>)
 800cf28:	a904      	add	r1, sp, #16
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	f7fd fe78 	bl	800ac20 <_printf_float>
 800cf30:	1c42      	adds	r2, r0, #1
 800cf32:	4606      	mov	r6, r0
 800cf34:	d1d6      	bne.n	800cee4 <_svfiprintf_r+0x174>
 800cf36:	89ab      	ldrh	r3, [r5, #12]
 800cf38:	065b      	lsls	r3, r3, #25
 800cf3a:	f53f af2d 	bmi.w	800cd98 <_svfiprintf_r+0x28>
 800cf3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf40:	b01d      	add	sp, #116	; 0x74
 800cf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf46:	ab03      	add	r3, sp, #12
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	462a      	mov	r2, r5
 800cf4c:	4b05      	ldr	r3, [pc, #20]	; (800cf64 <_svfiprintf_r+0x1f4>)
 800cf4e:	a904      	add	r1, sp, #16
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7fe f909 	bl	800b168 <_printf_i>
 800cf56:	e7eb      	b.n	800cf30 <_svfiprintf_r+0x1c0>
 800cf58:	0800e27c 	.word	0x0800e27c
 800cf5c:	0800e286 	.word	0x0800e286
 800cf60:	0800ac21 	.word	0x0800ac21
 800cf64:	0800ccbd 	.word	0x0800ccbd
 800cf68:	0800e282 	.word	0x0800e282

0800cf6c <__sflush_r>:
 800cf6c:	898a      	ldrh	r2, [r1, #12]
 800cf6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf72:	4605      	mov	r5, r0
 800cf74:	0710      	lsls	r0, r2, #28
 800cf76:	460c      	mov	r4, r1
 800cf78:	d458      	bmi.n	800d02c <__sflush_r+0xc0>
 800cf7a:	684b      	ldr	r3, [r1, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	dc05      	bgt.n	800cf8c <__sflush_r+0x20>
 800cf80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dc02      	bgt.n	800cf8c <__sflush_r+0x20>
 800cf86:	2000      	movs	r0, #0
 800cf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf8e:	2e00      	cmp	r6, #0
 800cf90:	d0f9      	beq.n	800cf86 <__sflush_r+0x1a>
 800cf92:	2300      	movs	r3, #0
 800cf94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf98:	682f      	ldr	r7, [r5, #0]
 800cf9a:	6a21      	ldr	r1, [r4, #32]
 800cf9c:	602b      	str	r3, [r5, #0]
 800cf9e:	d032      	beq.n	800d006 <__sflush_r+0x9a>
 800cfa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	075a      	lsls	r2, r3, #29
 800cfa6:	d505      	bpl.n	800cfb4 <__sflush_r+0x48>
 800cfa8:	6863      	ldr	r3, [r4, #4]
 800cfaa:	1ac0      	subs	r0, r0, r3
 800cfac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfae:	b10b      	cbz	r3, 800cfb4 <__sflush_r+0x48>
 800cfb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfb2:	1ac0      	subs	r0, r0, r3
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfba:	6a21      	ldr	r1, [r4, #32]
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b0      	blx	r6
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	d106      	bne.n	800cfd4 <__sflush_r+0x68>
 800cfc6:	6829      	ldr	r1, [r5, #0]
 800cfc8:	291d      	cmp	r1, #29
 800cfca:	d82b      	bhi.n	800d024 <__sflush_r+0xb8>
 800cfcc:	4a29      	ldr	r2, [pc, #164]	; (800d074 <__sflush_r+0x108>)
 800cfce:	410a      	asrs	r2, r1
 800cfd0:	07d6      	lsls	r6, r2, #31
 800cfd2:	d427      	bmi.n	800d024 <__sflush_r+0xb8>
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	6062      	str	r2, [r4, #4]
 800cfd8:	04d9      	lsls	r1, r3, #19
 800cfda:	6922      	ldr	r2, [r4, #16]
 800cfdc:	6022      	str	r2, [r4, #0]
 800cfde:	d504      	bpl.n	800cfea <__sflush_r+0x7e>
 800cfe0:	1c42      	adds	r2, r0, #1
 800cfe2:	d101      	bne.n	800cfe8 <__sflush_r+0x7c>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	b903      	cbnz	r3, 800cfea <__sflush_r+0x7e>
 800cfe8:	6560      	str	r0, [r4, #84]	; 0x54
 800cfea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfec:	602f      	str	r7, [r5, #0]
 800cfee:	2900      	cmp	r1, #0
 800cff0:	d0c9      	beq.n	800cf86 <__sflush_r+0x1a>
 800cff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cff6:	4299      	cmp	r1, r3
 800cff8:	d002      	beq.n	800d000 <__sflush_r+0x94>
 800cffa:	4628      	mov	r0, r5
 800cffc:	f7ff f9e2 	bl	800c3c4 <_free_r>
 800d000:	2000      	movs	r0, #0
 800d002:	6360      	str	r0, [r4, #52]	; 0x34
 800d004:	e7c0      	b.n	800cf88 <__sflush_r+0x1c>
 800d006:	2301      	movs	r3, #1
 800d008:	4628      	mov	r0, r5
 800d00a:	47b0      	blx	r6
 800d00c:	1c41      	adds	r1, r0, #1
 800d00e:	d1c8      	bne.n	800cfa2 <__sflush_r+0x36>
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d0c5      	beq.n	800cfa2 <__sflush_r+0x36>
 800d016:	2b1d      	cmp	r3, #29
 800d018:	d001      	beq.n	800d01e <__sflush_r+0xb2>
 800d01a:	2b16      	cmp	r3, #22
 800d01c:	d101      	bne.n	800d022 <__sflush_r+0xb6>
 800d01e:	602f      	str	r7, [r5, #0]
 800d020:	e7b1      	b.n	800cf86 <__sflush_r+0x1a>
 800d022:	89a3      	ldrh	r3, [r4, #12]
 800d024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d028:	81a3      	strh	r3, [r4, #12]
 800d02a:	e7ad      	b.n	800cf88 <__sflush_r+0x1c>
 800d02c:	690f      	ldr	r7, [r1, #16]
 800d02e:	2f00      	cmp	r7, #0
 800d030:	d0a9      	beq.n	800cf86 <__sflush_r+0x1a>
 800d032:	0793      	lsls	r3, r2, #30
 800d034:	680e      	ldr	r6, [r1, #0]
 800d036:	bf08      	it	eq
 800d038:	694b      	ldreq	r3, [r1, #20]
 800d03a:	600f      	str	r7, [r1, #0]
 800d03c:	bf18      	it	ne
 800d03e:	2300      	movne	r3, #0
 800d040:	eba6 0807 	sub.w	r8, r6, r7
 800d044:	608b      	str	r3, [r1, #8]
 800d046:	f1b8 0f00 	cmp.w	r8, #0
 800d04a:	dd9c      	ble.n	800cf86 <__sflush_r+0x1a>
 800d04c:	6a21      	ldr	r1, [r4, #32]
 800d04e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d050:	4643      	mov	r3, r8
 800d052:	463a      	mov	r2, r7
 800d054:	4628      	mov	r0, r5
 800d056:	47b0      	blx	r6
 800d058:	2800      	cmp	r0, #0
 800d05a:	dc06      	bgt.n	800d06a <__sflush_r+0xfe>
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d062:	81a3      	strh	r3, [r4, #12]
 800d064:	f04f 30ff 	mov.w	r0, #4294967295
 800d068:	e78e      	b.n	800cf88 <__sflush_r+0x1c>
 800d06a:	4407      	add	r7, r0
 800d06c:	eba8 0800 	sub.w	r8, r8, r0
 800d070:	e7e9      	b.n	800d046 <__sflush_r+0xda>
 800d072:	bf00      	nop
 800d074:	dfbffffe 	.word	0xdfbffffe

0800d078 <_fflush_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	690b      	ldr	r3, [r1, #16]
 800d07c:	4605      	mov	r5, r0
 800d07e:	460c      	mov	r4, r1
 800d080:	b913      	cbnz	r3, 800d088 <_fflush_r+0x10>
 800d082:	2500      	movs	r5, #0
 800d084:	4628      	mov	r0, r5
 800d086:	bd38      	pop	{r3, r4, r5, pc}
 800d088:	b118      	cbz	r0, 800d092 <_fflush_r+0x1a>
 800d08a:	6a03      	ldr	r3, [r0, #32]
 800d08c:	b90b      	cbnz	r3, 800d092 <_fflush_r+0x1a>
 800d08e:	f7fe fa07 	bl	800b4a0 <__sinit>
 800d092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d0f3      	beq.n	800d082 <_fflush_r+0xa>
 800d09a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d09c:	07d0      	lsls	r0, r2, #31
 800d09e:	d404      	bmi.n	800d0aa <_fflush_r+0x32>
 800d0a0:	0599      	lsls	r1, r3, #22
 800d0a2:	d402      	bmi.n	800d0aa <_fflush_r+0x32>
 800d0a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0a6:	f7fe fb11 	bl	800b6cc <__retarget_lock_acquire_recursive>
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f7ff ff5d 	bl	800cf6c <__sflush_r>
 800d0b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0b4:	07da      	lsls	r2, r3, #31
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	d4e4      	bmi.n	800d084 <_fflush_r+0xc>
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	059b      	lsls	r3, r3, #22
 800d0be:	d4e1      	bmi.n	800d084 <_fflush_r+0xc>
 800d0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0c2:	f7fe fb04 	bl	800b6ce <__retarget_lock_release_recursive>
 800d0c6:	e7dd      	b.n	800d084 <_fflush_r+0xc>

0800d0c8 <memmove>:
 800d0c8:	4288      	cmp	r0, r1
 800d0ca:	b510      	push	{r4, lr}
 800d0cc:	eb01 0402 	add.w	r4, r1, r2
 800d0d0:	d902      	bls.n	800d0d8 <memmove+0x10>
 800d0d2:	4284      	cmp	r4, r0
 800d0d4:	4623      	mov	r3, r4
 800d0d6:	d807      	bhi.n	800d0e8 <memmove+0x20>
 800d0d8:	1e43      	subs	r3, r0, #1
 800d0da:	42a1      	cmp	r1, r4
 800d0dc:	d008      	beq.n	800d0f0 <memmove+0x28>
 800d0de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0e6:	e7f8      	b.n	800d0da <memmove+0x12>
 800d0e8:	4402      	add	r2, r0
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	428a      	cmp	r2, r1
 800d0ee:	d100      	bne.n	800d0f2 <memmove+0x2a>
 800d0f0:	bd10      	pop	{r4, pc}
 800d0f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0fa:	e7f7      	b.n	800d0ec <memmove+0x24>

0800d0fc <_sbrk_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4d06      	ldr	r5, [pc, #24]	; (800d118 <_sbrk_r+0x1c>)
 800d100:	2300      	movs	r3, #0
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	f7f7 fb00 	bl	800470c <_sbrk>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d102      	bne.n	800d116 <_sbrk_r+0x1a>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b103      	cbz	r3, 800d116 <_sbrk_r+0x1a>
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	20001ee4 	.word	0x20001ee4

0800d11c <memcpy>:
 800d11c:	440a      	add	r2, r1
 800d11e:	4291      	cmp	r1, r2
 800d120:	f100 33ff 	add.w	r3, r0, #4294967295
 800d124:	d100      	bne.n	800d128 <memcpy+0xc>
 800d126:	4770      	bx	lr
 800d128:	b510      	push	{r4, lr}
 800d12a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d12e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d132:	4291      	cmp	r1, r2
 800d134:	d1f9      	bne.n	800d12a <memcpy+0xe>
 800d136:	bd10      	pop	{r4, pc}

0800d138 <__assert_func>:
 800d138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d13a:	4614      	mov	r4, r2
 800d13c:	461a      	mov	r2, r3
 800d13e:	4b09      	ldr	r3, [pc, #36]	; (800d164 <__assert_func+0x2c>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4605      	mov	r5, r0
 800d144:	68d8      	ldr	r0, [r3, #12]
 800d146:	b14c      	cbz	r4, 800d15c <__assert_func+0x24>
 800d148:	4b07      	ldr	r3, [pc, #28]	; (800d168 <__assert_func+0x30>)
 800d14a:	9100      	str	r1, [sp, #0]
 800d14c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d150:	4906      	ldr	r1, [pc, #24]	; (800d16c <__assert_func+0x34>)
 800d152:	462b      	mov	r3, r5
 800d154:	f000 f872 	bl	800d23c <fiprintf>
 800d158:	f000 f882 	bl	800d260 <abort>
 800d15c:	4b04      	ldr	r3, [pc, #16]	; (800d170 <__assert_func+0x38>)
 800d15e:	461c      	mov	r4, r3
 800d160:	e7f3      	b.n	800d14a <__assert_func+0x12>
 800d162:	bf00      	nop
 800d164:	2000006c 	.word	0x2000006c
 800d168:	0800e297 	.word	0x0800e297
 800d16c:	0800e2a4 	.word	0x0800e2a4
 800d170:	0800e2d2 	.word	0x0800e2d2

0800d174 <_calloc_r>:
 800d174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d176:	fba1 2402 	umull	r2, r4, r1, r2
 800d17a:	b94c      	cbnz	r4, 800d190 <_calloc_r+0x1c>
 800d17c:	4611      	mov	r1, r2
 800d17e:	9201      	str	r2, [sp, #4]
 800d180:	f7ff f994 	bl	800c4ac <_malloc_r>
 800d184:	9a01      	ldr	r2, [sp, #4]
 800d186:	4605      	mov	r5, r0
 800d188:	b930      	cbnz	r0, 800d198 <_calloc_r+0x24>
 800d18a:	4628      	mov	r0, r5
 800d18c:	b003      	add	sp, #12
 800d18e:	bd30      	pop	{r4, r5, pc}
 800d190:	220c      	movs	r2, #12
 800d192:	6002      	str	r2, [r0, #0]
 800d194:	2500      	movs	r5, #0
 800d196:	e7f8      	b.n	800d18a <_calloc_r+0x16>
 800d198:	4621      	mov	r1, r4
 800d19a:	f7fe fa1b 	bl	800b5d4 <memset>
 800d19e:	e7f4      	b.n	800d18a <_calloc_r+0x16>

0800d1a0 <__ascii_mbtowc>:
 800d1a0:	b082      	sub	sp, #8
 800d1a2:	b901      	cbnz	r1, 800d1a6 <__ascii_mbtowc+0x6>
 800d1a4:	a901      	add	r1, sp, #4
 800d1a6:	b142      	cbz	r2, 800d1ba <__ascii_mbtowc+0x1a>
 800d1a8:	b14b      	cbz	r3, 800d1be <__ascii_mbtowc+0x1e>
 800d1aa:	7813      	ldrb	r3, [r2, #0]
 800d1ac:	600b      	str	r3, [r1, #0]
 800d1ae:	7812      	ldrb	r2, [r2, #0]
 800d1b0:	1e10      	subs	r0, r2, #0
 800d1b2:	bf18      	it	ne
 800d1b4:	2001      	movne	r0, #1
 800d1b6:	b002      	add	sp, #8
 800d1b8:	4770      	bx	lr
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	e7fb      	b.n	800d1b6 <__ascii_mbtowc+0x16>
 800d1be:	f06f 0001 	mvn.w	r0, #1
 800d1c2:	e7f8      	b.n	800d1b6 <__ascii_mbtowc+0x16>

0800d1c4 <_realloc_r>:
 800d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c8:	4680      	mov	r8, r0
 800d1ca:	4614      	mov	r4, r2
 800d1cc:	460e      	mov	r6, r1
 800d1ce:	b921      	cbnz	r1, 800d1da <_realloc_r+0x16>
 800d1d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	f7ff b969 	b.w	800c4ac <_malloc_r>
 800d1da:	b92a      	cbnz	r2, 800d1e8 <_realloc_r+0x24>
 800d1dc:	f7ff f8f2 	bl	800c3c4 <_free_r>
 800d1e0:	4625      	mov	r5, r4
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1e8:	f000 f841 	bl	800d26e <_malloc_usable_size_r>
 800d1ec:	4284      	cmp	r4, r0
 800d1ee:	4607      	mov	r7, r0
 800d1f0:	d802      	bhi.n	800d1f8 <_realloc_r+0x34>
 800d1f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1f6:	d812      	bhi.n	800d21e <_realloc_r+0x5a>
 800d1f8:	4621      	mov	r1, r4
 800d1fa:	4640      	mov	r0, r8
 800d1fc:	f7ff f956 	bl	800c4ac <_malloc_r>
 800d200:	4605      	mov	r5, r0
 800d202:	2800      	cmp	r0, #0
 800d204:	d0ed      	beq.n	800d1e2 <_realloc_r+0x1e>
 800d206:	42bc      	cmp	r4, r7
 800d208:	4622      	mov	r2, r4
 800d20a:	4631      	mov	r1, r6
 800d20c:	bf28      	it	cs
 800d20e:	463a      	movcs	r2, r7
 800d210:	f7ff ff84 	bl	800d11c <memcpy>
 800d214:	4631      	mov	r1, r6
 800d216:	4640      	mov	r0, r8
 800d218:	f7ff f8d4 	bl	800c3c4 <_free_r>
 800d21c:	e7e1      	b.n	800d1e2 <_realloc_r+0x1e>
 800d21e:	4635      	mov	r5, r6
 800d220:	e7df      	b.n	800d1e2 <_realloc_r+0x1e>

0800d222 <__ascii_wctomb>:
 800d222:	b149      	cbz	r1, 800d238 <__ascii_wctomb+0x16>
 800d224:	2aff      	cmp	r2, #255	; 0xff
 800d226:	bf85      	ittet	hi
 800d228:	238a      	movhi	r3, #138	; 0x8a
 800d22a:	6003      	strhi	r3, [r0, #0]
 800d22c:	700a      	strbls	r2, [r1, #0]
 800d22e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d232:	bf98      	it	ls
 800d234:	2001      	movls	r0, #1
 800d236:	4770      	bx	lr
 800d238:	4608      	mov	r0, r1
 800d23a:	4770      	bx	lr

0800d23c <fiprintf>:
 800d23c:	b40e      	push	{r1, r2, r3}
 800d23e:	b503      	push	{r0, r1, lr}
 800d240:	4601      	mov	r1, r0
 800d242:	ab03      	add	r3, sp, #12
 800d244:	4805      	ldr	r0, [pc, #20]	; (800d25c <fiprintf+0x20>)
 800d246:	f853 2b04 	ldr.w	r2, [r3], #4
 800d24a:	6800      	ldr	r0, [r0, #0]
 800d24c:	9301      	str	r3, [sp, #4]
 800d24e:	f000 f83f 	bl	800d2d0 <_vfiprintf_r>
 800d252:	b002      	add	sp, #8
 800d254:	f85d eb04 	ldr.w	lr, [sp], #4
 800d258:	b003      	add	sp, #12
 800d25a:	4770      	bx	lr
 800d25c:	2000006c 	.word	0x2000006c

0800d260 <abort>:
 800d260:	b508      	push	{r3, lr}
 800d262:	2006      	movs	r0, #6
 800d264:	f000 fa0c 	bl	800d680 <raise>
 800d268:	2001      	movs	r0, #1
 800d26a:	f7f7 fa1f 	bl	80046ac <_exit>

0800d26e <_malloc_usable_size_r>:
 800d26e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d272:	1f18      	subs	r0, r3, #4
 800d274:	2b00      	cmp	r3, #0
 800d276:	bfbc      	itt	lt
 800d278:	580b      	ldrlt	r3, [r1, r0]
 800d27a:	18c0      	addlt	r0, r0, r3
 800d27c:	4770      	bx	lr

0800d27e <__sfputc_r>:
 800d27e:	6893      	ldr	r3, [r2, #8]
 800d280:	3b01      	subs	r3, #1
 800d282:	2b00      	cmp	r3, #0
 800d284:	b410      	push	{r4}
 800d286:	6093      	str	r3, [r2, #8]
 800d288:	da08      	bge.n	800d29c <__sfputc_r+0x1e>
 800d28a:	6994      	ldr	r4, [r2, #24]
 800d28c:	42a3      	cmp	r3, r4
 800d28e:	db01      	blt.n	800d294 <__sfputc_r+0x16>
 800d290:	290a      	cmp	r1, #10
 800d292:	d103      	bne.n	800d29c <__sfputc_r+0x1e>
 800d294:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d298:	f000 b934 	b.w	800d504 <__swbuf_r>
 800d29c:	6813      	ldr	r3, [r2, #0]
 800d29e:	1c58      	adds	r0, r3, #1
 800d2a0:	6010      	str	r0, [r2, #0]
 800d2a2:	7019      	strb	r1, [r3, #0]
 800d2a4:	4608      	mov	r0, r1
 800d2a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <__sfputs_r>:
 800d2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	460f      	mov	r7, r1
 800d2b2:	4614      	mov	r4, r2
 800d2b4:	18d5      	adds	r5, r2, r3
 800d2b6:	42ac      	cmp	r4, r5
 800d2b8:	d101      	bne.n	800d2be <__sfputs_r+0x12>
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	e007      	b.n	800d2ce <__sfputs_r+0x22>
 800d2be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c2:	463a      	mov	r2, r7
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7ff ffda 	bl	800d27e <__sfputc_r>
 800d2ca:	1c43      	adds	r3, r0, #1
 800d2cc:	d1f3      	bne.n	800d2b6 <__sfputs_r+0xa>
 800d2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d2d0 <_vfiprintf_r>:
 800d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	460d      	mov	r5, r1
 800d2d6:	b09d      	sub	sp, #116	; 0x74
 800d2d8:	4614      	mov	r4, r2
 800d2da:	4698      	mov	r8, r3
 800d2dc:	4606      	mov	r6, r0
 800d2de:	b118      	cbz	r0, 800d2e8 <_vfiprintf_r+0x18>
 800d2e0:	6a03      	ldr	r3, [r0, #32]
 800d2e2:	b90b      	cbnz	r3, 800d2e8 <_vfiprintf_r+0x18>
 800d2e4:	f7fe f8dc 	bl	800b4a0 <__sinit>
 800d2e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2ea:	07d9      	lsls	r1, r3, #31
 800d2ec:	d405      	bmi.n	800d2fa <_vfiprintf_r+0x2a>
 800d2ee:	89ab      	ldrh	r3, [r5, #12]
 800d2f0:	059a      	lsls	r2, r3, #22
 800d2f2:	d402      	bmi.n	800d2fa <_vfiprintf_r+0x2a>
 800d2f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2f6:	f7fe f9e9 	bl	800b6cc <__retarget_lock_acquire_recursive>
 800d2fa:	89ab      	ldrh	r3, [r5, #12]
 800d2fc:	071b      	lsls	r3, r3, #28
 800d2fe:	d501      	bpl.n	800d304 <_vfiprintf_r+0x34>
 800d300:	692b      	ldr	r3, [r5, #16]
 800d302:	b99b      	cbnz	r3, 800d32c <_vfiprintf_r+0x5c>
 800d304:	4629      	mov	r1, r5
 800d306:	4630      	mov	r0, r6
 800d308:	f000 f93a 	bl	800d580 <__swsetup_r>
 800d30c:	b170      	cbz	r0, 800d32c <_vfiprintf_r+0x5c>
 800d30e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d310:	07dc      	lsls	r4, r3, #31
 800d312:	d504      	bpl.n	800d31e <_vfiprintf_r+0x4e>
 800d314:	f04f 30ff 	mov.w	r0, #4294967295
 800d318:	b01d      	add	sp, #116	; 0x74
 800d31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d31e:	89ab      	ldrh	r3, [r5, #12]
 800d320:	0598      	lsls	r0, r3, #22
 800d322:	d4f7      	bmi.n	800d314 <_vfiprintf_r+0x44>
 800d324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d326:	f7fe f9d2 	bl	800b6ce <__retarget_lock_release_recursive>
 800d32a:	e7f3      	b.n	800d314 <_vfiprintf_r+0x44>
 800d32c:	2300      	movs	r3, #0
 800d32e:	9309      	str	r3, [sp, #36]	; 0x24
 800d330:	2320      	movs	r3, #32
 800d332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d336:	f8cd 800c 	str.w	r8, [sp, #12]
 800d33a:	2330      	movs	r3, #48	; 0x30
 800d33c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d4f0 <_vfiprintf_r+0x220>
 800d340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d344:	f04f 0901 	mov.w	r9, #1
 800d348:	4623      	mov	r3, r4
 800d34a:	469a      	mov	sl, r3
 800d34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d350:	b10a      	cbz	r2, 800d356 <_vfiprintf_r+0x86>
 800d352:	2a25      	cmp	r2, #37	; 0x25
 800d354:	d1f9      	bne.n	800d34a <_vfiprintf_r+0x7a>
 800d356:	ebba 0b04 	subs.w	fp, sl, r4
 800d35a:	d00b      	beq.n	800d374 <_vfiprintf_r+0xa4>
 800d35c:	465b      	mov	r3, fp
 800d35e:	4622      	mov	r2, r4
 800d360:	4629      	mov	r1, r5
 800d362:	4630      	mov	r0, r6
 800d364:	f7ff ffa2 	bl	800d2ac <__sfputs_r>
 800d368:	3001      	adds	r0, #1
 800d36a:	f000 80a9 	beq.w	800d4c0 <_vfiprintf_r+0x1f0>
 800d36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d370:	445a      	add	r2, fp
 800d372:	9209      	str	r2, [sp, #36]	; 0x24
 800d374:	f89a 3000 	ldrb.w	r3, [sl]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 80a1 	beq.w	800d4c0 <_vfiprintf_r+0x1f0>
 800d37e:	2300      	movs	r3, #0
 800d380:	f04f 32ff 	mov.w	r2, #4294967295
 800d384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d388:	f10a 0a01 	add.w	sl, sl, #1
 800d38c:	9304      	str	r3, [sp, #16]
 800d38e:	9307      	str	r3, [sp, #28]
 800d390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d394:	931a      	str	r3, [sp, #104]	; 0x68
 800d396:	4654      	mov	r4, sl
 800d398:	2205      	movs	r2, #5
 800d39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d39e:	4854      	ldr	r0, [pc, #336]	; (800d4f0 <_vfiprintf_r+0x220>)
 800d3a0:	f7f2 ff16 	bl	80001d0 <memchr>
 800d3a4:	9a04      	ldr	r2, [sp, #16]
 800d3a6:	b9d8      	cbnz	r0, 800d3e0 <_vfiprintf_r+0x110>
 800d3a8:	06d1      	lsls	r1, r2, #27
 800d3aa:	bf44      	itt	mi
 800d3ac:	2320      	movmi	r3, #32
 800d3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3b2:	0713      	lsls	r3, r2, #28
 800d3b4:	bf44      	itt	mi
 800d3b6:	232b      	movmi	r3, #43	; 0x2b
 800d3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d3c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3c2:	d015      	beq.n	800d3f0 <_vfiprintf_r+0x120>
 800d3c4:	9a07      	ldr	r2, [sp, #28]
 800d3c6:	4654      	mov	r4, sl
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	f04f 0c0a 	mov.w	ip, #10
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3d4:	3b30      	subs	r3, #48	; 0x30
 800d3d6:	2b09      	cmp	r3, #9
 800d3d8:	d94d      	bls.n	800d476 <_vfiprintf_r+0x1a6>
 800d3da:	b1b0      	cbz	r0, 800d40a <_vfiprintf_r+0x13a>
 800d3dc:	9207      	str	r2, [sp, #28]
 800d3de:	e014      	b.n	800d40a <_vfiprintf_r+0x13a>
 800d3e0:	eba0 0308 	sub.w	r3, r0, r8
 800d3e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	9304      	str	r3, [sp, #16]
 800d3ec:	46a2      	mov	sl, r4
 800d3ee:	e7d2      	b.n	800d396 <_vfiprintf_r+0xc6>
 800d3f0:	9b03      	ldr	r3, [sp, #12]
 800d3f2:	1d19      	adds	r1, r3, #4
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	9103      	str	r1, [sp, #12]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	bfbb      	ittet	lt
 800d3fc:	425b      	neglt	r3, r3
 800d3fe:	f042 0202 	orrlt.w	r2, r2, #2
 800d402:	9307      	strge	r3, [sp, #28]
 800d404:	9307      	strlt	r3, [sp, #28]
 800d406:	bfb8      	it	lt
 800d408:	9204      	strlt	r2, [sp, #16]
 800d40a:	7823      	ldrb	r3, [r4, #0]
 800d40c:	2b2e      	cmp	r3, #46	; 0x2e
 800d40e:	d10c      	bne.n	800d42a <_vfiprintf_r+0x15a>
 800d410:	7863      	ldrb	r3, [r4, #1]
 800d412:	2b2a      	cmp	r3, #42	; 0x2a
 800d414:	d134      	bne.n	800d480 <_vfiprintf_r+0x1b0>
 800d416:	9b03      	ldr	r3, [sp, #12]
 800d418:	1d1a      	adds	r2, r3, #4
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	9203      	str	r2, [sp, #12]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	bfb8      	it	lt
 800d422:	f04f 33ff 	movlt.w	r3, #4294967295
 800d426:	3402      	adds	r4, #2
 800d428:	9305      	str	r3, [sp, #20]
 800d42a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d500 <_vfiprintf_r+0x230>
 800d42e:	7821      	ldrb	r1, [r4, #0]
 800d430:	2203      	movs	r2, #3
 800d432:	4650      	mov	r0, sl
 800d434:	f7f2 fecc 	bl	80001d0 <memchr>
 800d438:	b138      	cbz	r0, 800d44a <_vfiprintf_r+0x17a>
 800d43a:	9b04      	ldr	r3, [sp, #16]
 800d43c:	eba0 000a 	sub.w	r0, r0, sl
 800d440:	2240      	movs	r2, #64	; 0x40
 800d442:	4082      	lsls	r2, r0
 800d444:	4313      	orrs	r3, r2
 800d446:	3401      	adds	r4, #1
 800d448:	9304      	str	r3, [sp, #16]
 800d44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d44e:	4829      	ldr	r0, [pc, #164]	; (800d4f4 <_vfiprintf_r+0x224>)
 800d450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d454:	2206      	movs	r2, #6
 800d456:	f7f2 febb 	bl	80001d0 <memchr>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d03f      	beq.n	800d4de <_vfiprintf_r+0x20e>
 800d45e:	4b26      	ldr	r3, [pc, #152]	; (800d4f8 <_vfiprintf_r+0x228>)
 800d460:	bb1b      	cbnz	r3, 800d4aa <_vfiprintf_r+0x1da>
 800d462:	9b03      	ldr	r3, [sp, #12]
 800d464:	3307      	adds	r3, #7
 800d466:	f023 0307 	bic.w	r3, r3, #7
 800d46a:	3308      	adds	r3, #8
 800d46c:	9303      	str	r3, [sp, #12]
 800d46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d470:	443b      	add	r3, r7
 800d472:	9309      	str	r3, [sp, #36]	; 0x24
 800d474:	e768      	b.n	800d348 <_vfiprintf_r+0x78>
 800d476:	fb0c 3202 	mla	r2, ip, r2, r3
 800d47a:	460c      	mov	r4, r1
 800d47c:	2001      	movs	r0, #1
 800d47e:	e7a6      	b.n	800d3ce <_vfiprintf_r+0xfe>
 800d480:	2300      	movs	r3, #0
 800d482:	3401      	adds	r4, #1
 800d484:	9305      	str	r3, [sp, #20]
 800d486:	4619      	mov	r1, r3
 800d488:	f04f 0c0a 	mov.w	ip, #10
 800d48c:	4620      	mov	r0, r4
 800d48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d492:	3a30      	subs	r2, #48	; 0x30
 800d494:	2a09      	cmp	r2, #9
 800d496:	d903      	bls.n	800d4a0 <_vfiprintf_r+0x1d0>
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d0c6      	beq.n	800d42a <_vfiprintf_r+0x15a>
 800d49c:	9105      	str	r1, [sp, #20]
 800d49e:	e7c4      	b.n	800d42a <_vfiprintf_r+0x15a>
 800d4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e7f0      	b.n	800d48c <_vfiprintf_r+0x1bc>
 800d4aa:	ab03      	add	r3, sp, #12
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	462a      	mov	r2, r5
 800d4b0:	4b12      	ldr	r3, [pc, #72]	; (800d4fc <_vfiprintf_r+0x22c>)
 800d4b2:	a904      	add	r1, sp, #16
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	f7fd fbb3 	bl	800ac20 <_printf_float>
 800d4ba:	4607      	mov	r7, r0
 800d4bc:	1c78      	adds	r0, r7, #1
 800d4be:	d1d6      	bne.n	800d46e <_vfiprintf_r+0x19e>
 800d4c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4c2:	07d9      	lsls	r1, r3, #31
 800d4c4:	d405      	bmi.n	800d4d2 <_vfiprintf_r+0x202>
 800d4c6:	89ab      	ldrh	r3, [r5, #12]
 800d4c8:	059a      	lsls	r2, r3, #22
 800d4ca:	d402      	bmi.n	800d4d2 <_vfiprintf_r+0x202>
 800d4cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4ce:	f7fe f8fe 	bl	800b6ce <__retarget_lock_release_recursive>
 800d4d2:	89ab      	ldrh	r3, [r5, #12]
 800d4d4:	065b      	lsls	r3, r3, #25
 800d4d6:	f53f af1d 	bmi.w	800d314 <_vfiprintf_r+0x44>
 800d4da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4dc:	e71c      	b.n	800d318 <_vfiprintf_r+0x48>
 800d4de:	ab03      	add	r3, sp, #12
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	462a      	mov	r2, r5
 800d4e4:	4b05      	ldr	r3, [pc, #20]	; (800d4fc <_vfiprintf_r+0x22c>)
 800d4e6:	a904      	add	r1, sp, #16
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f7fd fe3d 	bl	800b168 <_printf_i>
 800d4ee:	e7e4      	b.n	800d4ba <_vfiprintf_r+0x1ea>
 800d4f0:	0800e27c 	.word	0x0800e27c
 800d4f4:	0800e286 	.word	0x0800e286
 800d4f8:	0800ac21 	.word	0x0800ac21
 800d4fc:	0800d2ad 	.word	0x0800d2ad
 800d500:	0800e282 	.word	0x0800e282

0800d504 <__swbuf_r>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	460e      	mov	r6, r1
 800d508:	4614      	mov	r4, r2
 800d50a:	4605      	mov	r5, r0
 800d50c:	b118      	cbz	r0, 800d516 <__swbuf_r+0x12>
 800d50e:	6a03      	ldr	r3, [r0, #32]
 800d510:	b90b      	cbnz	r3, 800d516 <__swbuf_r+0x12>
 800d512:	f7fd ffc5 	bl	800b4a0 <__sinit>
 800d516:	69a3      	ldr	r3, [r4, #24]
 800d518:	60a3      	str	r3, [r4, #8]
 800d51a:	89a3      	ldrh	r3, [r4, #12]
 800d51c:	071a      	lsls	r2, r3, #28
 800d51e:	d525      	bpl.n	800d56c <__swbuf_r+0x68>
 800d520:	6923      	ldr	r3, [r4, #16]
 800d522:	b31b      	cbz	r3, 800d56c <__swbuf_r+0x68>
 800d524:	6823      	ldr	r3, [r4, #0]
 800d526:	6922      	ldr	r2, [r4, #16]
 800d528:	1a98      	subs	r0, r3, r2
 800d52a:	6963      	ldr	r3, [r4, #20]
 800d52c:	b2f6      	uxtb	r6, r6
 800d52e:	4283      	cmp	r3, r0
 800d530:	4637      	mov	r7, r6
 800d532:	dc04      	bgt.n	800d53e <__swbuf_r+0x3a>
 800d534:	4621      	mov	r1, r4
 800d536:	4628      	mov	r0, r5
 800d538:	f7ff fd9e 	bl	800d078 <_fflush_r>
 800d53c:	b9e0      	cbnz	r0, 800d578 <__swbuf_r+0x74>
 800d53e:	68a3      	ldr	r3, [r4, #8]
 800d540:	3b01      	subs	r3, #1
 800d542:	60a3      	str	r3, [r4, #8]
 800d544:	6823      	ldr	r3, [r4, #0]
 800d546:	1c5a      	adds	r2, r3, #1
 800d548:	6022      	str	r2, [r4, #0]
 800d54a:	701e      	strb	r6, [r3, #0]
 800d54c:	6962      	ldr	r2, [r4, #20]
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	429a      	cmp	r2, r3
 800d552:	d004      	beq.n	800d55e <__swbuf_r+0x5a>
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	07db      	lsls	r3, r3, #31
 800d558:	d506      	bpl.n	800d568 <__swbuf_r+0x64>
 800d55a:	2e0a      	cmp	r6, #10
 800d55c:	d104      	bne.n	800d568 <__swbuf_r+0x64>
 800d55e:	4621      	mov	r1, r4
 800d560:	4628      	mov	r0, r5
 800d562:	f7ff fd89 	bl	800d078 <_fflush_r>
 800d566:	b938      	cbnz	r0, 800d578 <__swbuf_r+0x74>
 800d568:	4638      	mov	r0, r7
 800d56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d56c:	4621      	mov	r1, r4
 800d56e:	4628      	mov	r0, r5
 800d570:	f000 f806 	bl	800d580 <__swsetup_r>
 800d574:	2800      	cmp	r0, #0
 800d576:	d0d5      	beq.n	800d524 <__swbuf_r+0x20>
 800d578:	f04f 37ff 	mov.w	r7, #4294967295
 800d57c:	e7f4      	b.n	800d568 <__swbuf_r+0x64>
	...

0800d580 <__swsetup_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4b2a      	ldr	r3, [pc, #168]	; (800d62c <__swsetup_r+0xac>)
 800d584:	4605      	mov	r5, r0
 800d586:	6818      	ldr	r0, [r3, #0]
 800d588:	460c      	mov	r4, r1
 800d58a:	b118      	cbz	r0, 800d594 <__swsetup_r+0x14>
 800d58c:	6a03      	ldr	r3, [r0, #32]
 800d58e:	b90b      	cbnz	r3, 800d594 <__swsetup_r+0x14>
 800d590:	f7fd ff86 	bl	800b4a0 <__sinit>
 800d594:	89a3      	ldrh	r3, [r4, #12]
 800d596:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d59a:	0718      	lsls	r0, r3, #28
 800d59c:	d422      	bmi.n	800d5e4 <__swsetup_r+0x64>
 800d59e:	06d9      	lsls	r1, r3, #27
 800d5a0:	d407      	bmi.n	800d5b2 <__swsetup_r+0x32>
 800d5a2:	2309      	movs	r3, #9
 800d5a4:	602b      	str	r3, [r5, #0]
 800d5a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5aa:	81a3      	strh	r3, [r4, #12]
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b0:	e034      	b.n	800d61c <__swsetup_r+0x9c>
 800d5b2:	0758      	lsls	r0, r3, #29
 800d5b4:	d512      	bpl.n	800d5dc <__swsetup_r+0x5c>
 800d5b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5b8:	b141      	cbz	r1, 800d5cc <__swsetup_r+0x4c>
 800d5ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5be:	4299      	cmp	r1, r3
 800d5c0:	d002      	beq.n	800d5c8 <__swsetup_r+0x48>
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f7fe fefe 	bl	800c3c4 <_free_r>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	6363      	str	r3, [r4, #52]	; 0x34
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5d2:	81a3      	strh	r3, [r4, #12]
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	6063      	str	r3, [r4, #4]
 800d5d8:	6923      	ldr	r3, [r4, #16]
 800d5da:	6023      	str	r3, [r4, #0]
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	f043 0308 	orr.w	r3, r3, #8
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	6923      	ldr	r3, [r4, #16]
 800d5e6:	b94b      	cbnz	r3, 800d5fc <__swsetup_r+0x7c>
 800d5e8:	89a3      	ldrh	r3, [r4, #12]
 800d5ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5f2:	d003      	beq.n	800d5fc <__swsetup_r+0x7c>
 800d5f4:	4621      	mov	r1, r4
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f000 f884 	bl	800d704 <__smakebuf_r>
 800d5fc:	89a0      	ldrh	r0, [r4, #12]
 800d5fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d602:	f010 0301 	ands.w	r3, r0, #1
 800d606:	d00a      	beq.n	800d61e <__swsetup_r+0x9e>
 800d608:	2300      	movs	r3, #0
 800d60a:	60a3      	str	r3, [r4, #8]
 800d60c:	6963      	ldr	r3, [r4, #20]
 800d60e:	425b      	negs	r3, r3
 800d610:	61a3      	str	r3, [r4, #24]
 800d612:	6923      	ldr	r3, [r4, #16]
 800d614:	b943      	cbnz	r3, 800d628 <__swsetup_r+0xa8>
 800d616:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d61a:	d1c4      	bne.n	800d5a6 <__swsetup_r+0x26>
 800d61c:	bd38      	pop	{r3, r4, r5, pc}
 800d61e:	0781      	lsls	r1, r0, #30
 800d620:	bf58      	it	pl
 800d622:	6963      	ldrpl	r3, [r4, #20]
 800d624:	60a3      	str	r3, [r4, #8]
 800d626:	e7f4      	b.n	800d612 <__swsetup_r+0x92>
 800d628:	2000      	movs	r0, #0
 800d62a:	e7f7      	b.n	800d61c <__swsetup_r+0x9c>
 800d62c:	2000006c 	.word	0x2000006c

0800d630 <_raise_r>:
 800d630:	291f      	cmp	r1, #31
 800d632:	b538      	push	{r3, r4, r5, lr}
 800d634:	4604      	mov	r4, r0
 800d636:	460d      	mov	r5, r1
 800d638:	d904      	bls.n	800d644 <_raise_r+0x14>
 800d63a:	2316      	movs	r3, #22
 800d63c:	6003      	str	r3, [r0, #0]
 800d63e:	f04f 30ff 	mov.w	r0, #4294967295
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d646:	b112      	cbz	r2, 800d64e <_raise_r+0x1e>
 800d648:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d64c:	b94b      	cbnz	r3, 800d662 <_raise_r+0x32>
 800d64e:	4620      	mov	r0, r4
 800d650:	f000 f830 	bl	800d6b4 <_getpid_r>
 800d654:	462a      	mov	r2, r5
 800d656:	4601      	mov	r1, r0
 800d658:	4620      	mov	r0, r4
 800d65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d65e:	f000 b817 	b.w	800d690 <_kill_r>
 800d662:	2b01      	cmp	r3, #1
 800d664:	d00a      	beq.n	800d67c <_raise_r+0x4c>
 800d666:	1c59      	adds	r1, r3, #1
 800d668:	d103      	bne.n	800d672 <_raise_r+0x42>
 800d66a:	2316      	movs	r3, #22
 800d66c:	6003      	str	r3, [r0, #0]
 800d66e:	2001      	movs	r0, #1
 800d670:	e7e7      	b.n	800d642 <_raise_r+0x12>
 800d672:	2400      	movs	r4, #0
 800d674:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d678:	4628      	mov	r0, r5
 800d67a:	4798      	blx	r3
 800d67c:	2000      	movs	r0, #0
 800d67e:	e7e0      	b.n	800d642 <_raise_r+0x12>

0800d680 <raise>:
 800d680:	4b02      	ldr	r3, [pc, #8]	; (800d68c <raise+0xc>)
 800d682:	4601      	mov	r1, r0
 800d684:	6818      	ldr	r0, [r3, #0]
 800d686:	f7ff bfd3 	b.w	800d630 <_raise_r>
 800d68a:	bf00      	nop
 800d68c:	2000006c 	.word	0x2000006c

0800d690 <_kill_r>:
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	4d07      	ldr	r5, [pc, #28]	; (800d6b0 <_kill_r+0x20>)
 800d694:	2300      	movs	r3, #0
 800d696:	4604      	mov	r4, r0
 800d698:	4608      	mov	r0, r1
 800d69a:	4611      	mov	r1, r2
 800d69c:	602b      	str	r3, [r5, #0]
 800d69e:	f7f6 fffd 	bl	800469c <_kill>
 800d6a2:	1c43      	adds	r3, r0, #1
 800d6a4:	d102      	bne.n	800d6ac <_kill_r+0x1c>
 800d6a6:	682b      	ldr	r3, [r5, #0]
 800d6a8:	b103      	cbz	r3, 800d6ac <_kill_r+0x1c>
 800d6aa:	6023      	str	r3, [r4, #0]
 800d6ac:	bd38      	pop	{r3, r4, r5, pc}
 800d6ae:	bf00      	nop
 800d6b0:	20001ee4 	.word	0x20001ee4

0800d6b4 <_getpid_r>:
 800d6b4:	f7f6 bff0 	b.w	8004698 <_getpid>

0800d6b8 <__swhatbuf_r>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6c0:	2900      	cmp	r1, #0
 800d6c2:	b096      	sub	sp, #88	; 0x58
 800d6c4:	4615      	mov	r5, r2
 800d6c6:	461e      	mov	r6, r3
 800d6c8:	da0d      	bge.n	800d6e6 <__swhatbuf_r+0x2e>
 800d6ca:	89a3      	ldrh	r3, [r4, #12]
 800d6cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d6d0:	f04f 0100 	mov.w	r1, #0
 800d6d4:	bf0c      	ite	eq
 800d6d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d6da:	2340      	movne	r3, #64	; 0x40
 800d6dc:	2000      	movs	r0, #0
 800d6de:	6031      	str	r1, [r6, #0]
 800d6e0:	602b      	str	r3, [r5, #0]
 800d6e2:	b016      	add	sp, #88	; 0x58
 800d6e4:	bd70      	pop	{r4, r5, r6, pc}
 800d6e6:	466a      	mov	r2, sp
 800d6e8:	f000 f848 	bl	800d77c <_fstat_r>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	dbec      	blt.n	800d6ca <__swhatbuf_r+0x12>
 800d6f0:	9901      	ldr	r1, [sp, #4]
 800d6f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d6f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d6fa:	4259      	negs	r1, r3
 800d6fc:	4159      	adcs	r1, r3
 800d6fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d702:	e7eb      	b.n	800d6dc <__swhatbuf_r+0x24>

0800d704 <__smakebuf_r>:
 800d704:	898b      	ldrh	r3, [r1, #12]
 800d706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d708:	079d      	lsls	r5, r3, #30
 800d70a:	4606      	mov	r6, r0
 800d70c:	460c      	mov	r4, r1
 800d70e:	d507      	bpl.n	800d720 <__smakebuf_r+0x1c>
 800d710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	6123      	str	r3, [r4, #16]
 800d718:	2301      	movs	r3, #1
 800d71a:	6163      	str	r3, [r4, #20]
 800d71c:	b002      	add	sp, #8
 800d71e:	bd70      	pop	{r4, r5, r6, pc}
 800d720:	ab01      	add	r3, sp, #4
 800d722:	466a      	mov	r2, sp
 800d724:	f7ff ffc8 	bl	800d6b8 <__swhatbuf_r>
 800d728:	9900      	ldr	r1, [sp, #0]
 800d72a:	4605      	mov	r5, r0
 800d72c:	4630      	mov	r0, r6
 800d72e:	f7fe febd 	bl	800c4ac <_malloc_r>
 800d732:	b948      	cbnz	r0, 800d748 <__smakebuf_r+0x44>
 800d734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d738:	059a      	lsls	r2, r3, #22
 800d73a:	d4ef      	bmi.n	800d71c <__smakebuf_r+0x18>
 800d73c:	f023 0303 	bic.w	r3, r3, #3
 800d740:	f043 0302 	orr.w	r3, r3, #2
 800d744:	81a3      	strh	r3, [r4, #12]
 800d746:	e7e3      	b.n	800d710 <__smakebuf_r+0xc>
 800d748:	89a3      	ldrh	r3, [r4, #12]
 800d74a:	6020      	str	r0, [r4, #0]
 800d74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d750:	81a3      	strh	r3, [r4, #12]
 800d752:	9b00      	ldr	r3, [sp, #0]
 800d754:	6163      	str	r3, [r4, #20]
 800d756:	9b01      	ldr	r3, [sp, #4]
 800d758:	6120      	str	r0, [r4, #16]
 800d75a:	b15b      	cbz	r3, 800d774 <__smakebuf_r+0x70>
 800d75c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d760:	4630      	mov	r0, r6
 800d762:	f000 f81d 	bl	800d7a0 <_isatty_r>
 800d766:	b128      	cbz	r0, 800d774 <__smakebuf_r+0x70>
 800d768:	89a3      	ldrh	r3, [r4, #12]
 800d76a:	f023 0303 	bic.w	r3, r3, #3
 800d76e:	f043 0301 	orr.w	r3, r3, #1
 800d772:	81a3      	strh	r3, [r4, #12]
 800d774:	89a3      	ldrh	r3, [r4, #12]
 800d776:	431d      	orrs	r5, r3
 800d778:	81a5      	strh	r5, [r4, #12]
 800d77a:	e7cf      	b.n	800d71c <__smakebuf_r+0x18>

0800d77c <_fstat_r>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	4d07      	ldr	r5, [pc, #28]	; (800d79c <_fstat_r+0x20>)
 800d780:	2300      	movs	r3, #0
 800d782:	4604      	mov	r4, r0
 800d784:	4608      	mov	r0, r1
 800d786:	4611      	mov	r1, r2
 800d788:	602b      	str	r3, [r5, #0]
 800d78a:	f7f6 ffb5 	bl	80046f8 <_fstat>
 800d78e:	1c43      	adds	r3, r0, #1
 800d790:	d102      	bne.n	800d798 <_fstat_r+0x1c>
 800d792:	682b      	ldr	r3, [r5, #0]
 800d794:	b103      	cbz	r3, 800d798 <_fstat_r+0x1c>
 800d796:	6023      	str	r3, [r4, #0]
 800d798:	bd38      	pop	{r3, r4, r5, pc}
 800d79a:	bf00      	nop
 800d79c:	20001ee4 	.word	0x20001ee4

0800d7a0 <_isatty_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	4d06      	ldr	r5, [pc, #24]	; (800d7bc <_isatty_r+0x1c>)
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	4608      	mov	r0, r1
 800d7aa:	602b      	str	r3, [r5, #0]
 800d7ac:	f7f6 ffaa 	bl	8004704 <_isatty>
 800d7b0:	1c43      	adds	r3, r0, #1
 800d7b2:	d102      	bne.n	800d7ba <_isatty_r+0x1a>
 800d7b4:	682b      	ldr	r3, [r5, #0]
 800d7b6:	b103      	cbz	r3, 800d7ba <_isatty_r+0x1a>
 800d7b8:	6023      	str	r3, [r4, #0]
 800d7ba:	bd38      	pop	{r3, r4, r5, pc}
 800d7bc:	20001ee4 	.word	0x20001ee4

0800d7c0 <_init>:
 800d7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c2:	bf00      	nop
 800d7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7c6:	bc08      	pop	{r3}
 800d7c8:	469e      	mov	lr, r3
 800d7ca:	4770      	bx	lr

0800d7cc <_fini>:
 800d7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ce:	bf00      	nop
 800d7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7d2:	bc08      	pop	{r3}
 800d7d4:	469e      	mov	lr, r3
 800d7d6:	4770      	bx	lr
