
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d438  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  0800d5c8  0800d5c8  0001d5c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e1dc  0800e1dc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e1dc  0800e1dc  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e1dc  0800e1dc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1dc  0800e1dc  0001e1dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1e0  0800e1e0  0001e1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e1e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00001d1c  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001efc  20001efc  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027e8b  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000530a  00000000  00000000  000480da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0001272b  00000000  00000000  0004d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001260  00000000  00000000  0005fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000211e  00000000  00000000  00060d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000234ca  00000000  00000000  00062e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00006d6c  00000000  00000000  00086358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005500  00000000  00000000  0008d0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  000925c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d5b0 	.word	0x0800d5b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d5b0 	.word	0x0800d5b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c8a:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000c8c:	2400      	movs	r4, #0
{
 8000c8e:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c90:	eb0d 0002 	add.w	r0, sp, r2
 8000c94:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000c96:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000c9e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000ca2:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca4:	9404      	str	r4, [sp, #16]
 8000ca6:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ca8:	f00a fb8c 	bl	800b3c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	483d      	ldr	r0, [pc, #244]	; (8000da4 <MX_ADC1_Init+0x11c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb2:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb6:	2301      	movs	r3, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cb8:	e9c0 c200 	strd	ip, r2, [r0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cbc:	8304      	strh	r4, [r0, #24]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	2204      	movs	r2, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc4:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cc6:	6103      	str	r3, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc8:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cce:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd0:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	6142      	str	r2, [r0, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cd6:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000cd8:	f004 fa1e 	bl	8005118 <HAL_ADC_Init>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d14a      	bne.n	8000d76 <MX_ADC1_Init+0xee>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000ce2:	4830      	ldr	r0, [pc, #192]	; (8000da4 <MX_ADC1_Init+0x11c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000ce6:	a901      	add	r1, sp, #4
 8000ce8:	f005 f8f2 	bl	8005ed0 <HAL_ADCEx_MultiModeConfigChannel>
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d155      	bne.n	8000d9c <MX_ADC1_Init+0x114>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf0:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000cf2:	2005      	movs	r0, #5
 8000cf4:	e9cd 0306 	strd	r0, r3, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf8:	2201      	movs	r2, #1
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cfa:	482a      	ldr	r0, [pc, #168]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000cfc:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cfe:	e9cd 2204 	strd	r2, r2, [sp, #16]
  sConfig.Offset = 0;
 8000d02:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d06:	f004 fcc7 	bl	8005698 <HAL_ADC_ConfigChannel>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d143      	bne.n	8000d96 <MX_ADC1_Init+0x10e>
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000d0e:	2104      	movs	r1, #4
 8000d10:	9110      	str	r1, [sp, #64]	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000d12:	2105      	movs	r1, #5
 8000d14:	910c      	str	r1, [sp, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d16:	2140      	movs	r1, #64	; 0x40
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d18:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d1a:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d1c:	9113      	str	r1, [sp, #76]	; 0x4c
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <MX_ADC1_Init+0x11c>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d20:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d22:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d24:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d28:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d2c:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d2e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d32:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d36:	f004 fe7b 	bl	8005a30 <HAL_ADCEx_InjectedConfigChannel>
 8000d3a:	bb48      	cbnz	r0, 8000d90 <MX_ADC1_Init+0x108>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d3c:	2204      	movs	r2, #4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d3e:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000d42:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d44:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d48:	f004 fe72 	bl	8005a30 <HAL_ADCEx_InjectedConfigChannel>
 8000d4c:	b9e8      	cbnz	r0, 8000d8a <MX_ADC1_Init+0x102>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d4e:	2205      	movs	r2, #5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d50:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000d54:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d5a:	f004 fe69 	bl	8005a30 <HAL_ADCEx_InjectedConfigChannel>
 8000d5e:	b988      	cbnz	r0, 8000d84 <MX_ADC1_Init+0xfc>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000d60:	2202      	movs	r2, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000d62:	2304      	movs	r3, #4
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000d66:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000d68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d6c:	f004 fe60 	bl	8005a30 <HAL_ADCEx_InjectedConfigChannel>
 8000d70:	b920      	cbnz	r0, 8000d7c <MX_ADC1_Init+0xf4>
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000d72:	b014      	add	sp, #80	; 0x50
 8000d74:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d76:	f003 f953 	bl	8004020 <Error_Handler>
 8000d7a:	e7b1      	b.n	8000ce0 <MX_ADC1_Init+0x58>
    Error_Handler();
 8000d7c:	f003 f950 	bl	8004020 <Error_Handler>
}
 8000d80:	b014      	add	sp, #80	; 0x50
 8000d82:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d84:	f003 f94c 	bl	8004020 <Error_Handler>
 8000d88:	e7ea      	b.n	8000d60 <MX_ADC1_Init+0xd8>
    Error_Handler();
 8000d8a:	f003 f949 	bl	8004020 <Error_Handler>
 8000d8e:	e7de      	b.n	8000d4e <MX_ADC1_Init+0xc6>
    Error_Handler();
 8000d90:	f003 f946 	bl	8004020 <Error_Handler>
 8000d94:	e7d2      	b.n	8000d3c <MX_ADC1_Init+0xb4>
    Error_Handler();
 8000d96:	f003 f943 	bl	8004020 <Error_Handler>
 8000d9a:	e7b8      	b.n	8000d0e <MX_ADC1_Init+0x86>
    Error_Handler();
 8000d9c:	f003 f940 	bl	8004020 <Error_Handler>
 8000da0:	e7a6      	b.n	8000cf0 <MX_ADC1_Init+0x68>
 8000da2:	bf00      	nop
 8000da4:	20000224 	.word	0x20000224

08000da8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000da8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	2400      	movs	r4, #0
{
 8000dac:	b090      	sub	sp, #64	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	4621      	mov	r1, r4
 8000db2:	a806      	add	r0, sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000db4:	e9cd 4400 	strd	r4, r4, [sp]
 8000db8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000dbc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dc0:	f00a fb00 	bl	800b3c4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dc4:	4830      	ldr	r0, [pc, #192]	; (8000e88 <MX_ADC2_Init+0xe0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc6:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8000e8c <MX_ADC2_Init+0xe4>
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dca:	8304      	strh	r4, [r0, #24]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dd0:	2301      	movs	r3, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dd2:	e9c0 c200 	strd	ip, r2, [r0]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	2204      	movs	r2, #4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd8:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dde:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de4:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000de6:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000de8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dec:	6142      	str	r2, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dee:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000df0:	f004 f992 	bl	8005118 <HAL_ADC_Init>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d136      	bne.n	8000e66 <MX_ADC2_Init+0xbe>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df8:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_1;
 8000dfa:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000dfc:	4822      	ldr	r0, [pc, #136]	; (8000e88 <MX_ADC2_Init+0xe0>)
 8000dfe:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	e9cd 2200 	strd	r2, r2, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e04:	e9cd 3302 	strd	r3, r3, [sp, #8]
  sConfig.Offset = 0;
 8000e08:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000e0c:	f004 fc44 	bl	8005698 <HAL_ADC_ConfigChannel>
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d135      	bne.n	8000e80 <MX_ADC2_Init+0xd8>
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e14:	2103      	movs	r1, #3
 8000e16:	910c      	str	r1, [sp, #48]	; 0x30
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000e18:	2105      	movs	r1, #5
 8000e1a:	9108      	str	r1, [sp, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e1c:	2140      	movs	r1, #64	; 0x40
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e1e:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e20:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e22:	910f      	str	r1, [sp, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e24:	4818      	ldr	r0, [pc, #96]	; (8000e88 <MX_ADC2_Init+0xe0>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e26:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e28:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e2a:	e9cd 2206 	strd	r2, r2, [sp, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e2e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e32:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e34:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e38:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e3c:	f004 fdf8 	bl	8005a30 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	b9d8      	cbnz	r0, 8000e7a <MX_ADC2_Init+0xd2>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000e42:	2302      	movs	r3, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e44:	4810      	ldr	r0, [pc, #64]	; (8000e88 <MX_ADC2_Init+0xe0>)
 8000e46:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e48:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e4c:	f004 fdf0 	bl	8005a30 <HAL_ADCEx_InjectedConfigChannel>
 8000e50:	b980      	cbnz	r0, 8000e74 <MX_ADC2_Init+0xcc>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e52:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <MX_ADC2_Init+0xe0>)
 8000e56:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e58:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e5c:	f004 fde8 	bl	8005a30 <HAL_ADCEx_InjectedConfigChannel>
 8000e60:	b920      	cbnz	r0, 8000e6c <MX_ADC2_Init+0xc4>
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 8000e62:	b010      	add	sp, #64	; 0x40
 8000e64:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e66:	f003 f8db 	bl	8004020 <Error_Handler>
 8000e6a:	e7c5      	b.n	8000df8 <MX_ADC2_Init+0x50>
    Error_Handler();
 8000e6c:	f003 f8d8 	bl	8004020 <Error_Handler>
}
 8000e70:	b010      	add	sp, #64	; 0x40
 8000e72:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e74:	f003 f8d4 	bl	8004020 <Error_Handler>
 8000e78:	e7eb      	b.n	8000e52 <MX_ADC2_Init+0xaa>
    Error_Handler();
 8000e7a:	f003 f8d1 	bl	8004020 <Error_Handler>
 8000e7e:	e7e0      	b.n	8000e42 <MX_ADC2_Init+0x9a>
    Error_Handler();
 8000e80:	f003 f8ce 	bl	8004020 <Error_Handler>
 8000e84:	e7c6      	b.n	8000e14 <MX_ADC2_Init+0x6c>
 8000e86:	bf00      	nop
 8000e88:	20000274 	.word	0x20000274
 8000e8c:	50000100 	.word	0x50000100

08000e90 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e90:	b510      	push	{r4, lr}

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e92:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000e94:	2400      	movs	r4, #0
{
 8000e96:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e98:	eb0d 0002 	add.w	r0, sp, r2
 8000e9c:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000e9e:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000ea6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000eaa:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eac:	9404      	str	r4, [sp, #16]
 8000eae:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000eb0:	f00a fa88 	bl	800b3c4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000eb4:	4827      	ldr	r0, [pc, #156]	; (8000f54 <MX_ADC3_Init+0xc4>)
 8000eb6:	4a28      	ldr	r2, [pc, #160]	; (8000f58 <MX_ADC3_Init+0xc8>)
 8000eb8:	6002      	str	r2, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eba:	2301      	movs	r3, #1
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	2204      	movs	r2, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ebe:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec8:	6104      	str	r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ece:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ed0:	61c3      	str	r3, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ed2:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed6:	6142      	str	r2, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ed8:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000eda:	f004 f91d 	bl	8005118 <HAL_ADC_Init>
 8000ede:	bb60      	cbnz	r0, 8000f3a <MX_ADC3_Init+0xaa>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK) {
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <MX_ADC3_Init+0xc4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK) {
 8000ee6:	a901      	add	r1, sp, #4
 8000ee8:	f004 fff2 	bl	8005ed0 <HAL_ADCEx_MultiModeConfigChannel>
 8000eec:	bb78      	cbnz	r0, 8000f4e <MX_ADC3_Init+0xbe>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eee:	2205      	movs	r2, #5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef0:	2001      	movs	r0, #1
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef2:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef4:	e9cd 2004 	strd	r2, r0, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000ef8:	a904      	add	r1, sp, #16
 8000efa:	4816      	ldr	r0, [pc, #88]	; (8000f54 <MX_ADC3_Init+0xc4>)
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000efc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfig.Offset = 0;
 8000f00:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000f04:	f004 fbc8 	bl	8005698 <HAL_ADC_ConfigChannel>
 8000f08:	b9f0      	cbnz	r0, 8000f48 <MX_ADC3_Init+0xb8>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0a:	2201      	movs	r2, #1
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000f0c:	2005      	movs	r0, #5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f0e:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f10:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f14:	2440      	movs	r4, #64	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000f16:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK) {
 8000f18:	a90a      	add	r1, sp, #40	; 0x28
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_ADC3_Init+0xc4>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f1c:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f1e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f22:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f24:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f26:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f28:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f2c:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK) {
 8000f30:	f004 fd7e 	bl	8005a30 <HAL_ADCEx_InjectedConfigChannel>
 8000f34:	b920      	cbnz	r0, 8000f40 <MX_ADC3_Init+0xb0>
    Error_Handler();
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */
}
 8000f36:	b014      	add	sp, #80	; 0x50
 8000f38:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f3a:	f003 f871 	bl	8004020 <Error_Handler>
 8000f3e:	e7cf      	b.n	8000ee0 <MX_ADC3_Init+0x50>
    Error_Handler();
 8000f40:	f003 f86e 	bl	8004020 <Error_Handler>
}
 8000f44:	b014      	add	sp, #80	; 0x50
 8000f46:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f48:	f003 f86a 	bl	8004020 <Error_Handler>
 8000f4c:	e7dd      	b.n	8000f0a <MX_ADC3_Init+0x7a>
    Error_Handler();
 8000f4e:	f003 f867 	bl	8004020 <Error_Handler>
 8000f52:	e7cc      	b.n	8000eee <MX_ADC3_Init+0x5e>
 8000f54:	200002c4 	.word	0x200002c4
 8000f58:	50000400 	.word	0x50000400
 8000f5c:	00000000 	.word	0x00000000

08000f60 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED = 0;

void HAL_ADC_MspInit(ADC_HandleTypeDef * adcHandle)
{
 8000f60:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (adcHandle->Instance == ADC1) {
 8000f62:	6802      	ldr	r2, [r0, #0]
{
 8000f64:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	2300      	movs	r3, #0
  if (adcHandle->Instance == ADC1) {
 8000f68:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000f70:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000f74:	930c      	str	r3, [sp, #48]	; 0x30
  if (adcHandle->Instance == ADC1) {
 8000f76:	d024      	beq.n	8000fc2 <HAL_ADC_MspInit+0x62>
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  } else if (adcHandle->Instance == ADC2) {
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_ADC_MspInit+0x148>)
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d005      	beq.n	8000f8a <HAL_ADC_MspInit+0x2a>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  } else if (adcHandle->Instance == ADC3) {
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <HAL_ADC_MspInit+0x14c>)
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d063      	beq.n	800104c <HAL_ADC_MspInit+0xec>

    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f84:	b00f      	add	sp, #60	; 0x3c
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f8a:	4a49      	ldr	r2, [pc, #292]	; (80010b0 <HAL_ADC_MspInit+0x150>)
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	3301      	adds	r3, #1
    if (HAL_RCC_ADC12_CLK_ENABLED == 1) {
 8000f90:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f92:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_ADC12_CLK_ENABLED == 1) {
 8000f94:	d04f      	beq.n	8001036 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8000fa2:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8001090 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	a908      	add	r1, sp, #32
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8000fb2:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f005 feb2 	bl	8006d20 <HAL_GPIO_Init>
}
 8000fbc:	b00f      	add	sp, #60	; 0x3c
 8000fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fc2:	4a3b      	ldr	r2, [pc, #236]	; (80010b0 <HAL_ADC_MspInit+0x150>)
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	3301      	adds	r3, #1
    if (HAL_RCC_ADC12_CLK_ENABLED == 1) {
 8000fc8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fca:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_ADC12_CLK_ENABLED == 1) {
 8000fcc:	d028      	beq.n	8001020 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000fde:	9202      	str	r2, [sp, #8]
 8000fe0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3;
 8000ff2:	220b      	movs	r2, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3;
 8000ff6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3;
 8000ffc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001000:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f005 fe8d 	bl	8006d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001006:	ed9f 7b24 	vldr	d7, [pc, #144]	; 8001098 <HAL_ADC_MspInit+0x138>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800100c:	482a      	ldr	r0, [pc, #168]	; (80010b8 <HAL_ADC_MspInit+0x158>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001010:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001012:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001016:	f005 fe83 	bl	8006d20 <HAL_GPIO_Init>
}
 800101a:	b00f      	add	sp, #60	; 0x3c
 800101c:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	9b01      	ldr	r3, [sp, #4]
 8001034:	e7cb      	b.n	8000fce <HAL_ADC_MspInit+0x6e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	9304      	str	r3, [sp, #16]
 8001048:	9b04      	ldr	r3, [sp, #16]
 800104a:	e7a4      	b.n	8000f96 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800104c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001050:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001054:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80010a0 <HAL_ADC_MspInit+0x140>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001058:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800105c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001068:	9206      	str	r2, [sp, #24]
 800106a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800107e:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f005 fe4c 	bl	8006d20 <HAL_GPIO_Init>
}
 8001088:	e77c      	b.n	8000f84 <HAL_ADC_MspInit+0x24>
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	00000070 	.word	0x00000070
 8001094:	00000003 	.word	0x00000003
 8001098:	00000010 	.word	0x00000010
 800109c:	00000003 	.word	0x00000003
 80010a0:	00002000 	.word	0x00002000
 80010a4:	00000003 	.word	0x00000003
 80010a8:	50000100 	.word	0x50000100
 80010ac:	50000400 	.word	0x50000400
 80010b0:	200001fc 	.word	0x200001fc
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48001400 	.word	0x48001400
 80010bc:	48000400 	.word	0x48000400

080010c0 <getBatteryVoltage>:
  }
}

/* USER CODE BEGIN 1 */

inline float getBatteryVoltage(void) { return adc_raw.batt_v * 3.3 * 11 / 4096; }
 80010c0:	b508      	push	{r3, lr}
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <getBatteryVoltage+0x28>)
 80010c4:	6898      	ldr	r0, [r3, #8]
 80010c6:	f7ff fa2d 	bl	8000524 <__aeabi_i2d>
 80010ca:	a305      	add	r3, pc, #20	; (adr r3, 80010e0 <getBatteryVoltage+0x20>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fa92 	bl	80005f8 <__aeabi_dmul>
 80010d4:	f7ff fd88 	bl	8000be8 <__aeabi_d2f>
 80010d8:	ee00 0a10 	vmov	s0, r0
 80010dc:	bd08      	pop	{r3, pc}
 80010de:	bf00      	nop
 80010e0:	66666666 	.word	0x66666666
 80010e4:	3f822666 	.word	0x3f822666
 80010e8:	20000200 	.word	0x20000200
 80010ec:	00000000 	.word	0x00000000

080010f0 <getGateDriverDCDCVoltage>:

inline float getGateDriverDCDCVoltage(void) { return (adc_raw.gd_dcdc_v) * 3.3 * 11 / 4096; }
 80010f0:	b508      	push	{r3, lr}
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <getGateDriverDCDCVoltage+0x28>)
 80010f4:	6a18      	ldr	r0, [r3, #32]
 80010f6:	f7ff fa15 	bl	8000524 <__aeabi_i2d>
 80010fa:	a305      	add	r3, pc, #20	; (adr r3, 8001110 <getGateDriverDCDCVoltage+0x20>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fa7a 	bl	80005f8 <__aeabi_dmul>
 8001104:	f7ff fd70 	bl	8000be8 <__aeabi_d2f>
 8001108:	ee00 0a10 	vmov	s0, r0
 800110c:	bd08      	pop	{r3, pc}
 800110e:	bf00      	nop
 8001110:	66666666 	.word	0x66666666
 8001114:	3f822666 	.word	0x3f822666
 8001118:	20000200 	.word	0x20000200
 800111c:	00000000 	.word	0x00000000

08001120 <isNotZeroCurrent>:
  HAL_ADCEx_InjectedStart(&hadc2);
  HAL_ADCEx_InjectedStart(&hadc3);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
}

bool isNotZeroCurrent() { return getCurrentMotor(0) > 0.5 || getCurrentMotor(0) > 0.5; }
 8001120:	b508      	push	{r3, lr}
// 50V/V * 5m = 250mV/A

inline float getCurrentMotor(bool motor) { return (adc_raw.cs_motor[motor] - adc_raw.cs_adc_offset) * 3.3 / 4096 * 4; }
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <isNotZeroCurrent+0x40>)
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	1ac0      	subs	r0, r0, r3
 800112a:	f7ff f9fb 	bl	8000524 <__aeabi_i2d>
 800112e:	a30a      	add	r3, pc, #40	; (adr r3, 8001158 <isNotZeroCurrent+0x38>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa60 	bl	80005f8 <__aeabi_dmul>
 8001138:	f7ff fd56 	bl	8000be8 <__aeabi_d2f>
bool isNotZeroCurrent() { return getCurrentMotor(0) > 0.5 || getCurrentMotor(0) > 0.5; }
 800113c:	ee07 0a10 	vmov	s14, r0
 8001140:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	bfcc      	ite	gt
 800114e:	2001      	movgt	r0, #1
 8001150:	2000      	movle	r0, #0
 8001152:	bd08      	pop	{r3, pc}
 8001154:	f3af 8000 	nop.w
 8001158:	66666666 	.word	0x66666666
 800115c:	3f6a6666 	.word	0x3f6a6666
 8001160:	20000200 	.word	0x20000200
 8001164:	00000000 	.word	0x00000000

08001168 <getCurrentMotor>:
inline float getCurrentMotor(bool motor) { return (adc_raw.cs_motor[motor] - adc_raw.cs_adc_offset) * 3.3 / 4096 * 4; }
 8001168:	b508      	push	{r3, lr}
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <getCurrentMotor+0x30>)
 800116c:	69da      	ldr	r2, [r3, #28]
 800116e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001172:	1a80      	subs	r0, r0, r2
 8001174:	f7ff f9d6 	bl	8000524 <__aeabi_i2d>
 8001178:	a305      	add	r3, pc, #20	; (adr r3, 8001190 <getCurrentMotor+0x28>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fa3b 	bl	80005f8 <__aeabi_dmul>
 8001182:	f7ff fd31 	bl	8000be8 <__aeabi_d2f>
 8001186:	ee00 0a10 	vmov	s0, r0
 800118a:	bd08      	pop	{r3, pc}
 800118c:	f3af 8000 	nop.w
 8001190:	66666666 	.word	0x66666666
 8001194:	3f6a6666 	.word	0x3f6a6666
 8001198:	20000200 	.word	0x20000200
 800119c:	00000000 	.word	0x00000000

080011a0 <getTempMotor>:
inline int getTempFET(bool motor) { return (-((float)adc_raw.temp_fet[motor] * 3.3 / 4096) + 1.5) * 70 + 25; }
inline int getTempMotor(bool motor) { return (-((float)adc_raw.temp_motor[motor] * 3.3 / 4096) + 1.5) * 70 + 25; }
 80011a0:	b508      	push	{r3, lr}
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <getTempMotor+0x50>)
 80011a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80011a8:	6940      	ldr	r0, [r0, #20]
 80011aa:	ee07 0a90 	vmov	s15, r0
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	ee17 0a90 	vmov	r0, s15
 80011b6:	f7ff f9c7 	bl	8000548 <__aeabi_f2d>
 80011ba:	a30b      	add	r3, pc, #44	; (adr r3, 80011e8 <getTempMotor+0x48>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fa1a 	bl	80005f8 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	2000      	movs	r0, #0
 80011ca:	490a      	ldr	r1, [pc, #40]	; (80011f4 <getTempMotor+0x54>)
 80011cc:	f7ff f85c 	bl	8000288 <__aeabi_dsub>
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <getTempMotor+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f7ff fa10 	bl	80005f8 <__aeabi_dmul>
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <getTempMotor+0x5c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f7ff f856 	bl	800028c <__adddf3>
 80011e0:	f7ff fcba 	bl	8000b58 <__aeabi_d2iz>
 80011e4:	bd08      	pop	{r3, pc}
 80011e6:	bf00      	nop
 80011e8:	66666666 	.word	0x66666666
 80011ec:	3f4a6666 	.word	0x3f4a6666
 80011f0:	20000200 	.word	0x20000200
 80011f4:	3ff80000 	.word	0x3ff80000
 80011f8:	40518000 	.word	0x40518000
 80011fc:	40390000 	.word	0x40390000

08001200 <updateADC>:

inline void updateADC(bool motor)
{
 8001200:	b538      	push	{r3, r4, r5, lr}
  if (motor == 0) {
 8001202:	bb68      	cbnz	r0, 8001260 <updateADC+0x60>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	4604      	mov	r4, r0
 8001208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120c:	4829      	ldr	r0, [pc, #164]	; (80012b4 <updateADC+0xb4>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 800120e:	4d2a      	ldr	r5, [pc, #168]	; (80012b8 <updateADC+0xb8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001210:	f005 fe74 	bl	8006efc <HAL_GPIO_WritePin>
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 8001214:	2101      	movs	r1, #1
 8001216:	4829      	ldr	r0, [pc, #164]	; (80012bc <updateADC+0xbc>)
 8001218:	f004 fa28 	bl	800566c <HAL_ADCEx_InjectedGetValue>
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800121c:	2101      	movs	r1, #1
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 800121e:	4603      	mov	r3, r0
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001220:	4827      	ldr	r0, [pc, #156]	; (80012c0 <updateADC+0xc0>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 8001222:	60ab      	str	r3, [r5, #8]
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001224:	f004 fa22 	bl	800566c <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 8001228:	2102      	movs	r1, #2
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800122a:	4603      	mov	r3, r0
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 800122c:	4824      	ldr	r0, [pc, #144]	; (80012c0 <updateADC+0xc0>)
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800122e:	606b      	str	r3, [r5, #4]
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 8001230:	f004 fa1c 	bl	800566c <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_fet[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 8001234:	2103      	movs	r1, #3
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 8001236:	4603      	mov	r3, r0
  adc_raw.temp_fet[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 8001238:	4821      	ldr	r0, [pc, #132]	; (80012c0 <updateADC+0xc0>)
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 800123a:	60eb      	str	r3, [r5, #12]
  adc_raw.temp_fet[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 800123c:	f004 fa16 	bl	800566c <HAL_ADCEx_InjectedGetValue>
 8001240:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc2);
 8001242:	481f      	ldr	r0, [pc, #124]	; (80012c0 <updateADC+0xc0>)
  adc_raw.temp_fet[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 8001244:	612b      	str	r3, [r5, #16]
  HAL_ADCEx_InjectedStart(&hadc2);
 8001246:	f004 f989 	bl	800555c <HAL_ADCEx_InjectedStart>
  HAL_ADCEx_InjectedStart(&hadc3);
 800124a:	481c      	ldr	r0, [pc, #112]	; (80012bc <updateADC+0xbc>)
 800124c:	f004 f986 	bl	800555c <HAL_ADCEx_InjectedStart>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001250:	4622      	mov	r2, r4
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <updateADC+0xb4>)
    updateADC_M0();
  } else {
    updateADC_M1();
  }
}
 8001254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125c:	f005 be4e 	b.w	8006efc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <updateADC+0xb4>)
  adc_raw.cs_motor[0] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001264:	4c14      	ldr	r4, [pc, #80]	; (80012b8 <updateADC+0xb8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	f005 fe47 	bl	8006efc <HAL_GPIO_WritePin>
  adc_raw.cs_motor[0] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800126e:	2101      	movs	r1, #1
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <updateADC+0xc4>)
 8001272:	f004 f9fb 	bl	800566c <HAL_ADCEx_InjectedGetValue>
 8001276:	4603      	mov	r3, r0
 8001278:	6023      	str	r3, [r4, #0]
  adc_raw.temp_motor[0] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800127a:	2102      	movs	r1, #2
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <updateADC+0xc4>)
 800127e:	f004 f9f5 	bl	800566c <HAL_ADCEx_InjectedGetValue>
 8001282:	4603      	mov	r3, r0
 8001284:	6163      	str	r3, [r4, #20]
  adc_raw.temp_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001286:	2103      	movs	r1, #3
 8001288:	480e      	ldr	r0, [pc, #56]	; (80012c4 <updateADC+0xc4>)
 800128a:	f004 f9ef 	bl	800566c <HAL_ADCEx_InjectedGetValue>
 800128e:	4603      	mov	r3, r0
  adc_raw.gd_dcdc_v = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 8001290:	2104      	movs	r1, #4
  adc_raw.temp_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001292:	61a3      	str	r3, [r4, #24]
  adc_raw.gd_dcdc_v = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <updateADC+0xc4>)
 8001296:	f004 f9e9 	bl	800566c <HAL_ADCEx_InjectedGetValue>
 800129a:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc1);
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <updateADC+0xc4>)
  adc_raw.gd_dcdc_v = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 800129e:	6223      	str	r3, [r4, #32]
  HAL_ADCEx_InjectedStart(&hadc1);
 80012a0:	f004 f95c 	bl	800555c <HAL_ADCEx_InjectedStart>
}
 80012a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <updateADC+0xb4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b0:	f005 be24 	b.w	8006efc <HAL_GPIO_WritePin>
 80012b4:	48000800 	.word	0x48000800
 80012b8:	20000200 	.word	0x20000200
 80012bc:	200002c4 	.word	0x200002c4
 80012c0:	20000274 	.word	0x20000274
 80012c4:	20000224 	.word	0x20000224

080012c8 <MX_CAN_Init>:
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_CAN_Init+0x38>)
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <MX_CAN_Init+0x3c>)
  hcan.Init.Prescaler = 4;
 80012cc:	2204      	movs	r2, #4
{
 80012ce:	b510      	push	{r4, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012d0:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 4;
 80012d2:	e9c0 1200 	strd	r1, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80012da:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012de:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012e2:	6182      	str	r2, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012e4:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012ea:	e9c0 4104 	strd	r4, r1, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012ee:	f004 fe81 	bl	8005ff4 <HAL_CAN_Init>
 80012f2:	b900      	cbnz	r0, 80012f6 <MX_CAN_Init+0x2e>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012f4:	bd10      	pop	{r4, pc}
 80012f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80012fa:	f002 be91 	b.w	8004020 <Error_Handler>
 80012fe:	bf00      	nop
 8001300:	20000318 	.word	0x20000318
 8001304:	40006400 	.word	0x40006400

08001308 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001308:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <HAL_CAN_MspInit+0xa4>)
 800130c:	6802      	ldr	r2, [r0, #0]
{
 800130e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 8001312:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001318:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800131c:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN)
 800131e:	d001      	beq.n	8001324 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8001320:	b009      	add	sp, #36	; 0x24
 8001322:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001324:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 800132a:	69da      	ldr	r2, [r3, #28]
 800132c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001330:	61da      	str	r2, [r3, #28]
 8001332:	69da      	ldr	r2, [r3, #28]
 8001334:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001338:	9200      	str	r2, [sp, #0]
 800133a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800134c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001350:	2302      	movs	r3, #2
 8001352:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800135a:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800135e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f005 fcdc 	bl	8006d20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 15, 0);
 8001368:	4622      	mov	r2, r4
 800136a:	210f      	movs	r1, #15
 800136c:	2013      	movs	r0, #19
 800136e:	f005 f9b7 	bl	80066e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8001372:	2013      	movs	r0, #19
 8001374:	f005 f9f2 	bl	800675c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 15, 0);
 8001378:	4622      	mov	r2, r4
 800137a:	210f      	movs	r1, #15
 800137c:	2014      	movs	r0, #20
 800137e:	f005 f9af 	bl	80066e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001382:	2014      	movs	r0, #20
 8001384:	f005 f9ea 	bl	800675c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 8001388:	4622      	mov	r2, r4
 800138a:	2101      	movs	r1, #1
 800138c:	2015      	movs	r0, #21
 800138e:	f005 f9a7 	bl	80066e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001392:	2015      	movs	r0, #21
 8001394:	f005 f9e2 	bl	800675c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 8001398:	4622      	mov	r2, r4
 800139a:	2101      	movs	r1, #1
 800139c:	2016      	movs	r0, #22
 800139e:	f005 f99f 	bl	80066e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80013a2:	2016      	movs	r0, #22
 80013a4:	f005 f9da 	bl	800675c <HAL_NVIC_EnableIRQ>
}
 80013a8:	b009      	add	sp, #36	; 0x24
 80013aa:	bd30      	pop	{r4, r5, pc}
 80013ac:	40006400 	.word	0x40006400

080013b0 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(uint16_t board_addr)
{
 80013b0:	b510      	push	{r4, lr}
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
  sFilterConfig.FilterBank = 0;
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5; //speed
 80013b2:	3080      	adds	r0, #128	; 0x80
{
 80013b4:	b08a      	sub	sp, #40	; 0x28
  sFilterConfig.FilterIdLow = (0x310) << 5; //motor calib
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5; //speed
 80013b6:	0182      	lsls	r2, r0, #6
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5; //speed
 80013b8:	4610      	mov	r0, r2
  sFilterConfig.FilterIdLow = (0x310) << 5; //motor calib
 80013ba:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5; //speed
 80013be:	3220      	adds	r2, #32
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80013c0:	2300      	movs	r3, #0
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5; //speed
 80013c2:	e9cd 1201 	strd	r1, r2, [sp, #4]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80013c6:	2401      	movs	r4, #1
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5; //speed
 80013c8:	9000      	str	r0, [sp, #0]
  sFilterConfig.FilterMaskIdLow = (0x320) << 5; // notused
 80013ca:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;
  //sFilterConfig.SlaveStartFilterBank = 0; dont supported F3xx
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80013ce:	481b      	ldr	r0, [pc, #108]	; (800143c <CAN_Filter_Init+0x8c>)
  sFilterConfig.FilterBank = 0;
 80013d0:	9305      	str	r3, [sp, #20]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80013d2:	4669      	mov	r1, sp
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80013d4:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sFilterConfig.FilterMaskIdLow = (0x320) << 5; // notused
 80013d8:	9203      	str	r2, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013da:	9304      	str	r3, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80013dc:	9408      	str	r4, [sp, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80013de:	f004 fe89 	bl	80060f4 <HAL_CAN_ConfigFilter>
 80013e2:	b9f0      	cbnz	r0, 8001422 <CAN_Filter_Init+0x72>
  {
    Error_Handler();
  }

  sFilterConfig.FilterIdHigh = (0x110) << 5;  // kick
  sFilterConfig.FilterIdLow = (0x010) << 5; // power enable
 80013e4:	f44f 7300 	mov.w	r3, #512	; 0x200
  sFilterConfig.FilterIdHigh = (0x110) << 5;  // kick
 80013e8:	f44f 5408 	mov.w	r4, #8704	; 0x2200
  sFilterConfig.FilterMaskIdHigh = (0x000) << 5; // emg stop
 80013ec:	2200      	movs	r2, #0
  sFilterConfig.FilterIdLow = (0x010) << 5; // power enable
 80013ee:	e9cd 4300 	strd	r4, r3, [sp]
  sFilterConfig.FilterMaskIdLow = (0x001) << 5; // error report
 80013f2:	2320      	movs	r3, #32
 80013f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
  sFilterConfig.FilterBank = 1;
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <CAN_Filter_Init+0x8c>)
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80013fa:	2201      	movs	r2, #1
 80013fc:	2301      	movs	r3, #1
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80013fe:	4669      	mov	r1, sp
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001400:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001404:	f004 fe76 	bl	80060f4 <HAL_CAN_ConfigFilter>
 8001408:	b9a8      	cbnz	r0, 8001436 <CAN_Filter_Init+0x86>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <CAN_Filter_Init+0x8c>)
 800140c:	2102      	movs	r1, #2
 800140e:	f005 f803 	bl	8006418 <HAL_CAN_ActivateNotification>
 8001412:	b968      	cbnz	r0, 8001430 <CAN_Filter_Init+0x80>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <CAN_Filter_Init+0x8c>)
 8001416:	2110      	movs	r1, #16
 8001418:	f004 fffe 	bl	8006418 <HAL_CAN_ActivateNotification>
 800141c:	b920      	cbnz	r0, 8001428 <CAN_Filter_Init+0x78>
  {
    Error_Handler();
  }
}
 800141e:	b00a      	add	sp, #40	; 0x28
 8001420:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001422:	f002 fdfd 	bl	8004020 <Error_Handler>
 8001426:	e7dd      	b.n	80013e4 <CAN_Filter_Init+0x34>
    Error_Handler();
 8001428:	f002 fdfa 	bl	8004020 <Error_Handler>
}
 800142c:	b00a      	add	sp, #40	; 0x28
 800142e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001430:	f002 fdf6 	bl	8004020 <Error_Handler>
 8001434:	e7ee      	b.n	8001414 <CAN_Filter_Init+0x64>
    Error_Handler();
 8001436:	f002 fdf3 	bl	8004020 <Error_Handler>
 800143a:	e7e6      	b.n	800140a <CAN_Filter_Init+0x5a>
 800143c:	20000318 	.word	0x20000318

08001440 <sendFloat>:

void sendFloat(uint32_t can_id, float data)
{
 8001440:	b500      	push	{lr}
 8001442:	b08b      	sub	sp, #44	; 0x2c
  can_msg_buf_t msg;
  CAN_TxHeaderTypeDef can_header;
  uint32_t can_mailbox;
  can_header.StdId = can_id;
  can_header.ExtId = 0;
 8001444:	2100      	movs	r1, #0
  can_header.RTR = CAN_RTR_DATA;
  can_header.DLC = 4;
 8001446:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 8001448:	e9cd 0104 	strd	r0, r1, [sp, #16]
  can_header.DLC = 4;
 800144c:	e9cd 1207 	strd	r1, r2, [sp, #28]
  can_header.IDE = CAN_ID_STD;
  can_header.TransmitGlobalTime = DISABLE;
  msg.value = data;
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001450:	eb0d 0302 	add.w	r3, sp, r2
  can_header.IDE = CAN_ID_STD;
 8001454:	9106      	str	r1, [sp, #24]
  can_header.TransmitGlobalTime = DISABLE;
 8001456:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 800145a:	4807      	ldr	r0, [pc, #28]	; (8001478 <sendFloat+0x38>)
  msg.value = data;
 800145c:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001460:	aa02      	add	r2, sp, #8
 8001462:	a904      	add	r1, sp, #16
 8001464:	f004 fef0 	bl	8006248 <HAL_CAN_AddTxMessage>
 8001468:	b118      	cbz	r0, 8001472 <sendFloat+0x32>
  {
    can_send_fail_cnt++;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <sendFloat+0x3c>)
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	6013      	str	r3, [r2, #0]
  }
}
 8001472:	b00b      	add	sp, #44	; 0x2c
 8001474:	f85d fb04 	ldr.w	pc, [sp], #4
 8001478:	20000318 	.word	0x20000318
 800147c:	20000314 	.word	0x20000314

08001480 <sendSpeed>:
    can_send_fail_cnt++;
  }
}

void sendSpeed(int board_id, int motor, float speed, float angle)
{
 8001480:	b510      	push	{r4, lr}
  sendSpeedInfo(0x200 + board_id * 2 + motor, speed, angle);
 8001482:	f500 7080 	add.w	r0, r0, #256	; 0x100
{
 8001486:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 8001488:	2200      	movs	r2, #0
  sendSpeedInfo(0x200 + board_id * 2 + motor, speed, angle);
 800148a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 8;
 800148e:	2408      	movs	r4, #8
 8001490:	e9cd 2407 	strd	r2, r4, [sp, #28]
  can_header.StdId = can_id;
 8001494:	9104      	str	r1, [sp, #16]
  can_header.ExtId = 0;
 8001496:	9205      	str	r2, [sp, #20]
  can_header.IDE = CAN_ID_STD;
 8001498:	9206      	str	r2, [sp, #24]
  can_header.TransmitGlobalTime = DISABLE;
 800149a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <sendSpeed+0x44>)
  msg.speed.rev_p_sec = rev_per_sec_;
 80014a0:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80014a4:	ab01      	add	r3, sp, #4
 80014a6:	eb0d 0204 	add.w	r2, sp, r4
 80014aa:	a904      	add	r1, sp, #16
  msg.speed.omni_angle = omni_angle_;
 80014ac:	edcd 0a03 	vstr	s1, [sp, #12]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80014b0:	f004 feca 	bl	8006248 <HAL_CAN_AddTxMessage>
 80014b4:	b118      	cbz	r0, 80014be <sendSpeed+0x3e>
    can_send_fail_cnt++;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <sendSpeed+0x48>)
 80014b8:	6813      	ldr	r3, [r2, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	6013      	str	r3, [r2, #0]
}
 80014be:	b00a      	add	sp, #40	; 0x28
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	bf00      	nop
 80014c4:	20000318 	.word	0x20000318
 80014c8:	20000314 	.word	0x20000314

080014cc <sendVoltage>:

void sendVoltage(int board_id, int motor, float voltage)
{
 80014cc:	b510      	push	{r4, lr}
  sendFloat(0x210 + board_id * 2 + motor, voltage);
 80014ce:	f500 7084 	add.w	r0, r0, #264	; 0x108
{
 80014d2:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 80014d4:	2400      	movs	r4, #0
  sendFloat(0x210 + board_id * 2 + motor, voltage);
 80014d6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 80014da:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 80014dc:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 80014e0:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80014e4:	eb0d 0302 	add.w	r3, sp, r2
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <sendVoltage+0x40>)
  can_header.IDE = CAN_ID_STD;
 80014ea:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80014ec:	aa02      	add	r2, sp, #8
 80014ee:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 80014f0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 80014f4:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 80014f8:	f004 fea6 	bl	8006248 <HAL_CAN_AddTxMessage>
 80014fc:	b118      	cbz	r0, 8001506 <sendVoltage+0x3a>
    can_send_fail_cnt++;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <sendVoltage+0x44>)
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	6013      	str	r3, [r2, #0]
}
 8001506:	b00a      	add	sp, #40	; 0x28
 8001508:	bd10      	pop	{r4, pc}
 800150a:	bf00      	nop
 800150c:	20000318 	.word	0x20000318
 8001510:	20000314 	.word	0x20000314

08001514 <sendTemperature>:

void sendTemperature(int board_id, int motor, float temp)
{
 8001514:	b510      	push	{r4, lr}
  sendFloat(0x220 + board_id * 2 + motor, temp);
 8001516:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
 800151a:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 800151c:	2400      	movs	r4, #0
  sendFloat(0x220 + board_id * 2 + motor, temp);
 800151e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 8001522:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 8001524:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 8001528:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 800152c:	eb0d 0302 	add.w	r3, sp, r2
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <sendTemperature+0x40>)
  can_header.IDE = CAN_ID_STD;
 8001532:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001534:	aa02      	add	r2, sp, #8
 8001536:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 8001538:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 800153c:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001540:	f004 fe82 	bl	8006248 <HAL_CAN_AddTxMessage>
 8001544:	b118      	cbz	r0, 800154e <sendTemperature+0x3a>
    can_send_fail_cnt++;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <sendTemperature+0x44>)
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	6013      	str	r3, [r2, #0]
}
 800154e:	b00a      	add	sp, #40	; 0x28
 8001550:	bd10      	pop	{r4, pc}
 8001552:	bf00      	nop
 8001554:	20000318 	.word	0x20000318
 8001558:	20000314 	.word	0x20000314

0800155c <sendCurrent>:

void sendCurrent(int board_id, int motor, float current)
{
 800155c:	b510      	push	{r4, lr}
  sendFloat(0x230 + board_id * 2 + motor, current);
 800155e:	f500 708c 	add.w	r0, r0, #280	; 0x118
{
 8001562:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 8001564:	2400      	movs	r4, #0
  sendFloat(0x230 + board_id * 2 + motor, current);
 8001566:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 800156a:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 800156c:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 8001570:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001574:	eb0d 0302 	add.w	r3, sp, r2
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <sendCurrent+0x40>)
  can_header.IDE = CAN_ID_STD;
 800157a:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 800157c:	aa02      	add	r2, sp, #8
 800157e:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 8001580:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 8001584:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0)
 8001588:	f004 fe5e 	bl	8006248 <HAL_CAN_AddTxMessage>
 800158c:	b118      	cbz	r0, 8001596 <sendCurrent+0x3a>
    can_send_fail_cnt++;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <sendCurrent+0x44>)
 8001590:	6813      	ldr	r3, [r2, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	6013      	str	r3, [r2, #0]
}
 8001596:	b00a      	add	sp, #40	; 0x28
 8001598:	bd10      	pop	{r4, pc}
 800159a:	bf00      	nop
 800159c:	20000318 	.word	0x20000318
 80015a0:	20000314 	.word	0x20000314

080015a4 <sendError>:

// id : motor
void sendError(uint32_t can_id, int16_t error_id, int16_t error_info, float error_value)
{
 80015a4:	b510      	push	{r4, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
  can_msg_buf_t msg;
  CAN_TxHeaderTypeDef can_header;
  uint32_t can_mailbox;
  can_header.StdId = can_id;
  can_header.ExtId = 0;
 80015a8:	2400      	movs	r4, #0
  can_header.RTR = CAN_RTR_DATA;
  can_header.DLC = 8;
 80015aa:	2308      	movs	r3, #8
{
 80015ac:	4694      	mov	ip, r2
  can_header.ExtId = 0;
 80015ae:	e9cd 0404 	strd	r0, r4, [sp, #16]
  can_header.DLC = 8;
 80015b2:	e9cd 4307 	strd	r4, r3, [sp, #28]
  can_header.IDE = CAN_ID_STD;
  can_header.TransmitGlobalTime = DISABLE;
  msg.error.id = error_id;
 80015b6:	f8ad 1008 	strh.w	r1, [sp, #8]
  msg.error.info = error_info;
  msg.error.value = error_value;
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80015ba:	480a      	ldr	r0, [pc, #40]	; (80015e4 <sendError+0x40>)
  msg.error.value = error_value;
 80015bc:	ed8d 0a03 	vstr	s0, [sp, #12]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80015c0:	ab01      	add	r3, sp, #4
 80015c2:	aa02      	add	r2, sp, #8
 80015c4:	a904      	add	r1, sp, #16
  can_header.IDE = CAN_ID_STD;
 80015c6:	9406      	str	r4, [sp, #24]
  can_header.TransmitGlobalTime = DISABLE;
 80015c8:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.error.info = error_info;
 80015cc:	f8ad c00a 	strh.w	ip, [sp, #10]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80015d0:	f004 fe3a 	bl	8006248 <HAL_CAN_AddTxMessage>
 80015d4:	b118      	cbz	r0, 80015de <sendError+0x3a>
    can_send_fail_cnt++;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <sendError+0x44>)
 80015d8:	6813      	ldr	r3, [r2, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	6013      	str	r3, [r2, #0]
  }
}
 80015de:	b00a      	add	sp, #40	; 0x28
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	bf00      	nop
 80015e4:	20000318 	.word	0x20000318
 80015e8:	20000314 	.word	0x20000314

080015ec <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <MX_DMA_Init+0x30>)
{
 80015ee:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	695b      	ldr	r3, [r3, #20]
{
 80015fa:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 80015fc:	210e      	movs	r1, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fe:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 8001602:	4608      	mov	r0, r1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001604:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 8001606:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001608:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 800160a:	f005 f869 	bl	80066e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800160e:	200e      	movs	r0, #14

}
 8001610:	b003      	add	sp, #12
 8001612:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001616:	f005 b8a1 	b.w	800675c <HAL_NVIC_EnableIRQ>
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000

08001620 <writeFlash>:
flash_t flash;
// 2K / page
// 128Kbyte -> 64page
// page : 0~
static void writeFlash(uint32_t board_id, float calib_m0, float calib_m1,float motor_calib_m0,float motor_calib_m1)
{
 8001620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001624:	b089      	sub	sp, #36	; 0x24
    FLASH_EraseInitTypeDef erase;
    uint32_t page_error = 0;
    erase.TypeErase = TYPEERASE_PAGES;
 8001626:	4925      	ldr	r1, [pc, #148]	; (80016bc <writeFlash+0x9c>)
    HAL_FLASH_Lock();

    HAL_FLASH_Unlock();
    uint32_t flash_raw;
    flash_raw = board_id;
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CAN_ID, flash_raw);
 8001628:	4c24      	ldr	r4, [pc, #144]	; (80016bc <writeFlash+0x9c>)
{
 800162a:	9001      	str	r0, [sp, #4]
    uint32_t page_error = 0;
 800162c:	2500      	movs	r5, #0
    erase.NbPages = 1;
 800162e:	2301      	movs	r3, #1
    erase.TypeErase = TYPEERASE_PAGES;
 8001630:	2000      	movs	r0, #0
{
 8001632:	ee10 9a10 	vmov	r9, s0
 8001636:	ee10 8a90 	vmov	r8, s1
 800163a:	ee11 7a10 	vmov	r7, s2
 800163e:	ee11 6a90 	vmov	r6, s3
    erase.NbPages = 1;
 8001642:	9306      	str	r3, [sp, #24]
    erase.TypeErase = TYPEERASE_PAGES;
 8001644:	e9cd 0104 	strd	r0, r1, [sp, #16]
    uint32_t page_error = 0;
 8001648:	9503      	str	r5, [sp, #12]
    HAL_FLASH_Unlock();
 800164a:	f005 faa3 	bl	8006b94 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase, &page_error);
 800164e:	a903      	add	r1, sp, #12
 8001650:	a804      	add	r0, sp, #16
 8001652:	f005 fb03 	bl	8006c5c <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8001656:	f005 fab1 	bl	8006bbc <HAL_FLASH_Lock>
    HAL_FLASH_Unlock();
 800165a:	f005 fa9b 	bl	8006b94 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CAN_ID, flash_raw);
 800165e:	9a01      	ldr	r2, [sp, #4]
 8001660:	462b      	mov	r3, r5
 8001662:	4621      	mov	r1, r4
 8001664:	2002      	movs	r0, #2
 8001666:	f005 f9c9 	bl	80069fc <HAL_FLASH_Program>
    memcpy(&flash_raw, &calib_m0, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_ENC_CALIB_M0, flash_raw);
 800166a:	464a      	mov	r2, r9
 800166c:	462b      	mov	r3, r5
 800166e:	4914      	ldr	r1, [pc, #80]	; (80016c0 <writeFlash+0xa0>)
 8001670:	2002      	movs	r0, #2
 8001672:	f005 f9c3 	bl	80069fc <HAL_FLASH_Program>
    memcpy(&flash_raw, &calib_m1, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_ENC_CALIB_M1, flash_raw);
 8001676:	4642      	mov	r2, r8
 8001678:	462b      	mov	r3, r5
 800167a:	4912      	ldr	r1, [pc, #72]	; (80016c4 <writeFlash+0xa4>)
 800167c:	2002      	movs	r0, #2
 800167e:	f005 f9bd 	bl	80069fc <HAL_FLASH_Program>
    memcpy(&flash_raw, &motor_calib_m0, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_MOTOR_CALIB_CW_M0, flash_raw);
 8001682:	463a      	mov	r2, r7
 8001684:	462b      	mov	r3, r5
 8001686:	4910      	ldr	r1, [pc, #64]	; (80016c8 <writeFlash+0xa8>)
 8001688:	2002      	movs	r0, #2
 800168a:	f005 f9b7 	bl	80069fc <HAL_FLASH_Program>
    memcpy(&flash_raw, &motor_calib_m1, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_MOTOR_CALIB_CW_M1, flash_raw);
 800168e:	4632      	mov	r2, r6
 8001690:	462b      	mov	r3, r5
 8001692:	490e      	ldr	r1, [pc, #56]	; (80016cc <writeFlash+0xac>)
 8001694:	2002      	movs	r0, #2
 8001696:	f005 f9b1 	bl	80069fc <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 800169a:	f005 fa8f 	bl	8006bbc <HAL_FLASH_Lock>
void writeCanBoardID(uint32_t id) { writeFlash(id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
void writeEncCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, calib_m0, calib_m1, flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
void writeMotorCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, flash.calib[0], flash.calib[1], calib_m0, calib_m1); }

void loadFlashData(void){
    memcpy(&flash.board_id, (uint32_t *)FLASH_ADDR_CAN_ID, 4);
 800169e:	e9d4 5200 	ldrd	r5, r2, [r4]
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <writeFlash+0xb0>)
    memcpy(&flash.calib[0], (uint32_t *)FLASH_ADDR_ENC_CALIB_M0, 4);
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80016aa:	6922      	ldr	r2, [r4, #16]
    memcpy(&flash.calib[1], (uint32_t *)FLASH_ADDR_ENC_CALIB_M1, 4);
 80016ac:	e9c3 0501 	strd	r0, r5, [r3, #4]
    memcpy(&flash.rps_per_v_cw[0], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CW_M0, 4);
    memcpy(&flash.rps_per_v_cw[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CW_M1, 4);
 80016b0:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 80016b4:	b009      	add	sp, #36	; 0x24
 80016b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016ba:	bf00      	nop
 80016bc:	0801f000 	.word	0x0801f000
 80016c0:	0801f004 	.word	0x0801f004
 80016c4:	0801f008 	.word	0x0801f008
 80016c8:	0801f00c 	.word	0x0801f00c
 80016cc:	0801f010 	.word	0x0801f010
 80016d0:	20000340 	.word	0x20000340

080016d4 <writeCanBoardID>:
void writeCanBoardID(uint32_t id) { writeFlash(id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <writeCanBoardID+0x18>)
 80016d6:	edd3 1a04 	vldr	s3, [r3, #16]
 80016da:	ed93 1a03 	vldr	s2, [r3, #12]
 80016de:	edd3 0a01 	vldr	s1, [r3, #4]
 80016e2:	ed93 0a00 	vldr	s0, [r3]
 80016e6:	f7ff bf9b 	b.w	8001620 <writeFlash>
 80016ea:	bf00      	nop
 80016ec:	20000340 	.word	0x20000340

080016f0 <writeEncCalibrationValue>:
void writeEncCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, calib_m0, calib_m1, flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <writeEncCalibrationValue+0x10>)
 80016f2:	edd3 1a04 	vldr	s3, [r3, #16]
 80016f6:	ed93 1a03 	vldr	s2, [r3, #12]
 80016fa:	6898      	ldr	r0, [r3, #8]
 80016fc:	f7ff bf90 	b.w	8001620 <writeFlash>
 8001700:	20000340 	.word	0x20000340

08001704 <writeMotorCalibrationValue>:
void writeMotorCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, flash.calib[0], flash.calib[1], calib_m0, calib_m1); }
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <writeMotorCalibrationValue+0x18>)
 8001706:	eeb0 1a40 	vmov.f32	s2, s0
 800170a:	eef0 1a60 	vmov.f32	s3, s1
 800170e:	ed93 0a00 	vldr	s0, [r3]
 8001712:	edd3 0a01 	vldr	s1, [r3, #4]
 8001716:	6898      	ldr	r0, [r3, #8]
 8001718:	f7ff bf82 	b.w	8001620 <writeFlash>
 800171c:	20000340 	.word	0x20000340

08001720 <loadFlashData>:
void loadFlashData(void){
 8001720:	b410      	push	{r4}
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <loadFlashData+0x20>)
    memcpy(&flash.board_id, (uint32_t *)FLASH_ADDR_CAN_ID, 4);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <loadFlashData+0x24>)
 8001726:	e9d2 4100 	ldrd	r4, r1, [r2]
    memcpy(&flash.calib[0], (uint32_t *)FLASH_ADDR_ENC_CALIB_M0, 4);
 800172a:	6019      	str	r1, [r3, #0]
 800172c:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8001730:	6912      	ldr	r2, [r2, #16]
    memcpy(&flash.calib[1], (uint32_t *)FLASH_ADDR_ENC_CALIB_M1, 4);
 8001732:	e9c3 0401 	strd	r0, r4, [r3, #4]
    memcpy(&flash.rps_per_v_cw[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CW_M1, 4);
 8001736:	e9c3 1203 	strd	r1, r2, [r3, #12]

    // unused
    //memcpy(&flash.rps_per_v_ccw[0], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CCW_M0, 4);
    //memcpy(&flash.rps_per_v_ccw[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CCW_M1, 4);
}
 800173a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	0801f000 	.word	0x0801f000
 8001744:	20000340 	.word	0x20000340

08001748 <isPushedSW1>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
inline bool isPushedSW1(void)
{
 8001748:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800174a:	2101      	movs	r1, #1
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <isPushedSW1+0x14>)
 800174e:	f005 fbcf 	bl	8006ef0 <HAL_GPIO_ReadPin>
}
 8001752:	fab0 f080 	clz	r0, r0
 8001756:	0940      	lsrs	r0, r0, #5
 8001758:	bd08      	pop	{r3, pc}
 800175a:	bf00      	nop
 800175c:	48000800 	.word	0x48000800

08001760 <isPushedSW2>:
inline bool isPushedSW2(void)
{
 8001760:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001762:	2102      	movs	r1, #2
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <isPushedSW2+0x14>)
 8001766:	f005 fbc3 	bl	8006ef0 <HAL_GPIO_ReadPin>
}
 800176a:	fab0 f080 	clz	r0, r0
 800176e:	0940      	lsrs	r0, r0, #5
 8001770:	bd08      	pop	{r3, pc}
 8001772:	bf00      	nop
 8001774:	48000800 	.word	0x48000800

08001778 <isPushedSW3>:
inline bool isPushedSW3(void)
{
 8001778:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 800177a:	2104      	movs	r1, #4
 800177c:	4803      	ldr	r0, [pc, #12]	; (800178c <isPushedSW3+0x14>)
 800177e:	f005 fbb7 	bl	8006ef0 <HAL_GPIO_ReadPin>
}
 8001782:	fab0 f080 	clz	r0, r0
 8001786:	0940      	lsrs	r0, r0, #5
 8001788:	bd08      	pop	{r3, pc}
 800178a:	bf00      	nop
 800178c:	48000800 	.word	0x48000800

08001790 <isPushedSW4>:
inline bool isPushedSW4(void)
{
 8001790:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 8001792:	2108      	movs	r1, #8
 8001794:	4803      	ldr	r0, [pc, #12]	; (80017a4 <isPushedSW4+0x14>)
 8001796:	f005 fbab 	bl	8006ef0 <HAL_GPIO_ReadPin>
}
 800179a:	fab0 f080 	clz	r0, r0
 800179e:	0940      	lsrs	r0, r0, #5
 80017a0:	bd08      	pop	{r3, pc}
 80017a2:	bf00      	nop
 80017a4:	48000800 	.word	0x48000800

080017a8 <setLedRed>:

inline void setLedRed(bool on){
 80017a8:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, on);
 80017aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ae:	4801      	ldr	r0, [pc, #4]	; (80017b4 <setLedRed+0xc>)
 80017b0:	f005 bba4 	b.w	8006efc <HAL_GPIO_WritePin>
 80017b4:	48000800 	.word	0x48000800

080017b8 <setLedBlue>:
}
inline void setLedBlue(bool on){
 80017b8:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, on);
 80017ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017be:	4801      	ldr	r0, [pc, #4]	; (80017c4 <setLedBlue+0xc>)
 80017c0:	f005 bb9c 	b.w	8006efc <HAL_GPIO_WritePin>
 80017c4:	48000800 	.word	0x48000800

080017c8 <setLedGreen>:
}
inline void setLedGreen(bool on){
 80017c8:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, on);
 80017ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ce:	4801      	ldr	r0, [pc, #4]	; (80017d4 <setLedGreen+0xc>)
 80017d0:	f005 bb94 	b.w	8006efc <HAL_GPIO_WritePin>
 80017d4:	48000800 	.word	0x48000800

080017d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	2400      	movs	r4, #0
{
 80017dc:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80017e2:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	4b29      	ldr	r3, [pc, #164]	; (800188c <MX_GPIO_Init+0xb4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017ec:	4e28      	ldr	r6, [pc, #160]	; (8001890 <MX_GPIO_Init+0xb8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80017ee:	4f29      	ldr	r7, [pc, #164]	; (8001894 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017f4:	615a      	str	r2, [r3, #20]
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80017fc:	9200      	str	r2, [sp, #0]
 80017fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800180e:	9201      	str	r2, [sp, #4]
 8001810:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001818:	615a      	str	r2, [r3, #20]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001820:	9202      	str	r2, [sp, #8]
 8001822:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001832:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001834:	4622      	mov	r2, r4
 8001836:	4630      	mov	r0, r6
 8001838:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800183e:	f005 fb5d 	bl	8006efc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001842:	4622      	mov	r2, r4
 8001844:	4638      	mov	r0, r7
 8001846:	21c0      	movs	r1, #192	; 0xc0
 8001848:	f005 fb58 	bl	8006efc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2501      	movs	r5, #1
 800184e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001852:	a904      	add	r1, sp, #16
 8001854:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f005 fa5f 	bl	8006d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001862:	220f      	movs	r2, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001864:	4630      	mov	r0, r6
 8001866:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001868:	2300      	movs	r3, #0
 800186a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800186e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001870:	f005 fa56 	bl	8006d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001874:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	a904      	add	r1, sp, #16
 8001878:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f005 fa4d 	bl	8006d20 <HAL_GPIO_Init>

}
 8001886:	b00b      	add	sp, #44	; 0x2c
 8001888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	48000800 	.word	0x48000800
 8001894:	48000400 	.word	0x48000400

08001898 <can_rx_callback.part.0>:
  float tmp_speed = 0;
  if (calib_process.enc_calib_cnt != 0 || calib_process.motor_calib_cnt != 0) {
    return;
  }
  can_rx_cnt++;
  tmp_speed = can_rx_buf.value;
 8001898:	4839      	ldr	r0, [pc, #228]	; (8001980 <can_rx_callback.part.0+0xe8>)
 800189a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001984 <can_rx_callback.part.0+0xec>
 800189e:	edd0 7a00 	vldr	s15, [r0]
  can_rx_cnt++;
 80018a2:	4939      	ldr	r1, [pc, #228]	; (8001988 <can_rx_callback.part.0+0xf0>)
 80018a4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800198c <can_rx_callback.part.0+0xf4>
 80018a8:	680a      	ldr	r2, [r1, #0]
 80018aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void can_rx_callback(void)
 80018b2:	b508      	push	{r3, lr}
  if (tmp_speed > SPEED_CMD_LIMIT_RPS) {
    tmp_speed = SPEED_CMD_LIMIT_RPS;
  } else if (tmp_speed < -SPEED_CMD_LIMIT_RPS) {
    tmp_speed = -SPEED_CMD_LIMIT_RPS;
  }
  switch (can_rx_header.StdId) {
 80018b4:	4b36      	ldr	r3, [pc, #216]	; (8001990 <can_rx_callback.part.0+0xf8>)
 80018b6:	bfb8      	it	lt
 80018b8:	eef0 7a66 	vmovlt.f32	s15, s13
 80018bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  can_rx_cnt++;
 80018c6:	f102 0201 	add.w	r2, r2, #1
 80018ca:	bf88      	it	hi
 80018cc:	eef0 7a47 	vmovhi.f32	s15, s14
  switch (can_rx_header.StdId) {
 80018d0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
  can_rx_cnt++;
 80018d4:	600a      	str	r2, [r1, #0]
  switch (can_rx_header.StdId) {
 80018d6:	d823      	bhi.n	8001920 <can_rx_callback.part.0+0x88>
 80018d8:	2bff      	cmp	r3, #255	; 0xff
 80018da:	d914      	bls.n	8001906 <can_rx_callback.part.0+0x6e>
 80018dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018e0:	2b10      	cmp	r3, #16
 80018e2:	d80f      	bhi.n	8001904 <can_rx_callback.part.0+0x6c>
 80018e4:	e8df f003 	tbb	[pc, r3]
 80018e8:	32093209 	.word	0x32093209
 80018ec:	0e0e0e0e 	.word	0x0e0e0e0e
 80018f0:	0e0e0e0e 	.word	0x0e0e0e0e
 80018f4:	0e0e0e0e 	.word	0x0e0e0e0e
 80018f8:	38          	.byte	0x38
 80018f9:	00          	.byte	0x00
      cmd[1].speed = tmp_speed;
      cmd[1].timeout_cnt = 100;
      break;

    case 0x102:
      cmd[0].speed = tmp_speed;
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <can_rx_callback.part.0+0xfc>)
      cmd[0].timeout_cnt = 100;
 80018fc:	2264      	movs	r2, #100	; 0x64
      cmd[0].speed = tmp_speed;
 80018fe:	edc3 7a00 	vstr	s15, [r3]
      cmd[0].timeout_cnt = 100;
 8001902:	611a      	str	r2, [r3, #16]
      }
      break;
    default:
      break;
  }
}
 8001904:	bd08      	pop	{r3, pc}
  switch (can_rx_header.StdId) {
 8001906:	2b10      	cmp	r3, #16
 8001908:	d1fc      	bne.n	8001904 <can_rx_callback.part.0+0x6c>
      if (can_rx_buf.data[0] == 0) {
 800190a:	7803      	ldrb	r3, [r0, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f9      	bne.n	8001904 <can_rx_callback.part.0+0x6c>
        if (can_rx_buf.data[1] == 0) {
 8001910:	7843      	ldrb	r3, [r0, #1]
 8001912:	b35b      	cbz	r3, 800196c <can_rx_callback.part.0+0xd4>
        } else if (can_rx_buf.data[1] == 1) {
 8001914:	2b01      	cmp	r3, #1
 8001916:	d1f5      	bne.n	8001904 <can_rx_callback.part.0+0x6c>
          power_enable_cnt = 100;
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <can_rx_callback.part.0+0x100>)
 800191a:	2264      	movs	r2, #100	; 0x64
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bd08      	pop	{r3, pc}
  switch (can_rx_header.StdId) {
 8001920:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8001924:	d1ee      	bne.n	8001904 <can_rx_callback.part.0+0x6c>
  }
}

void startCalibrationMode(void)
{
  p("calibration mode!\n");
 8001926:	481d      	ldr	r0, [pc, #116]	; (800199c <can_rx_callback.part.0+0x104>)
 8001928:	f003 fa7e 	bl	8004e28 <p>

  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 800192c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8001978 <can_rx_callback.part.0+0xe0>
 8001930:	491b      	ldr	r1, [pc, #108]	; (80019a0 <can_rx_callback.part.0+0x108>)
  calib_process.motor_calib_cnt = 0;
  manual_offset_radian = 0;

  cmd[0].speed = 0;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <can_rx_callback.part.0+0xfc>)
  manual_offset_radian = 0;
 8001934:	481b      	ldr	r0, [pc, #108]	; (80019a4 <can_rx_callback.part.0+0x10c>)
 8001936:	2200      	movs	r2, #0
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8001938:	ed81 7b00 	vstr	d7, [r1]
  cmd[1].speed = 0;

  cmd[0].out_v_final = 2.0;
 800193c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  manual_offset_radian = 0;
 8001940:	6002      	str	r2, [r0, #0]
  cmd[0].speed = 0;
 8001942:	601a      	str	r2, [r3, #0]
  cmd[1].speed = 0;
 8001944:	615a      	str	r2, [r3, #20]
  cmd[0].out_v_final = 2.0;
 8001946:	60d9      	str	r1, [r3, #12]
  cmd[1].out_v_final = 2.0;
 8001948:	6219      	str	r1, [r3, #32]
}
 800194a:	bd08      	pop	{r3, pc}
      cmd[1].speed = tmp_speed;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <can_rx_callback.part.0+0xfc>)
      cmd[1].timeout_cnt = 100;
 800194e:	2264      	movs	r2, #100	; 0x64
      cmd[1].speed = tmp_speed;
 8001950:	edc3 7a05 	vstr	s15, [r3, #20]
      cmd[1].timeout_cnt = 100;
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001956:	bd08      	pop	{r3, pc}
      if (can_rx_buf.data[0] == 3) {
 8001958:	7803      	ldrb	r3, [r0, #0]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d1d2      	bne.n	8001904 <can_rx_callback.part.0+0x6c>
        setPwmOutPutFreeWheel();
 800195e:	f003 f8f3 	bl	8004b48 <setPwmOutPutFreeWheel>
        free_wheel_cnt = KICK_FREE_WHEEL_CNT;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <can_rx_callback.part.0+0x110>)
 8001964:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bd08      	pop	{r3, pc}
 800196c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          HAL_NVIC_SystemReset();
 8001970:	f004 bf02 	b.w	8006778 <HAL_NVIC_SystemReset>
 8001974:	f3af 8000 	nop.w
 8001978:	000009c4 	.word	0x000009c4
 800197c:	00000000 	.word	0x00000000
 8001980:	200003cc 	.word	0x200003cc
 8001984:	c2480000 	.word	0xc2480000
 8001988:	200003d4 	.word	0x200003d4
 800198c:	42480000 	.word	0x42480000
 8001990:	200003d8 	.word	0x200003d8
 8001994:	200003f4 	.word	0x200003f4
 8001998:	200004e8 	.word	0x200004e8
 800199c:	0800d5c8 	.word	0x0800d5c8
 80019a0:	200003b8 	.word	0x200003b8
 80019a4:	20000448 	.word	0x20000448
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) { uart_rx_flag = true; }
 80019ac:	4b01      	ldr	r3, [pc, #4]	; (80019b4 <HAL_UART_RxCpltCallback+0x8>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	4770      	bx	lr
 80019b4:	2000051e 	.word	0x2000051e

080019b8 <checkAngleCalibMode>:
{
 80019b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  calib[motor].xy_field.radian_ave_x += cos(ma702[motor].output_radian);
 80019bc:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8001af4 <checkAngleCalibMode+0x13c>
 80019c0:	4d49      	ldr	r5, [pc, #292]	; (8001ae8 <checkAngleCalibMode+0x130>)
 80019c2:	eb00 08c0 	add.w	r8, r0, r0, lsl #3
 80019c6:	eb09 0888 	add.w	r8, r9, r8, lsl #2
{
 80019ca:	ed2d 8b02 	vpush	{d8}
 80019ce:	4606      	mov	r6, r0
  calib[motor].xy_field.radian_ave_x += cos(ma702[motor].output_radian);
 80019d0:	f8d8 0000 	ldr.w	r0, [r8]
 80019d4:	f7fe fdb8 	bl	8000548 <__aeabi_f2d>
 80019d8:	ec41 0b10 	vmov	d0, r0, r1
 80019dc:	ec41 0b18 	vmov	d8, r0, r1
 80019e0:	272c      	movs	r7, #44	; 0x2c
 80019e2:	f007 fc75 	bl	80092d0 <cos>
 80019e6:	fb06 f707 	mul.w	r7, r6, r7
 80019ea:	19ec      	adds	r4, r5, r7
 80019ec:	ec5b ab10 	vmov	sl, fp, d0
 80019f0:	6960      	ldr	r0, [r4, #20]
 80019f2:	f7fe fda9 	bl	8000548 <__aeabi_f2d>
 80019f6:	4652      	mov	r2, sl
 80019f8:	465b      	mov	r3, fp
 80019fa:	f7fe fc47 	bl	800028c <__adddf3>
 80019fe:	f7ff f8f3 	bl	8000be8 <__aeabi_d2f>
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001a02:	eeb0 0a48 	vmov.f32	s0, s16
 8001a06:	eef0 0a68 	vmov.f32	s1, s17
  calib[motor].xy_field.radian_ave_x += cos(ma702[motor].output_radian);
 8001a0a:	6160      	str	r0, [r4, #20]
 8001a0c:	ee08 0a10 	vmov	s16, r0
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001a10:	f007 fcb2 	bl	8009378 <sin>
 8001a14:	ec5b ab10 	vmov	sl, fp, d0
 8001a18:	69a0      	ldr	r0, [r4, #24]
 8001a1a:	f7fe fd95 	bl	8000548 <__aeabi_f2d>
 8001a1e:	4652      	mov	r2, sl
 8001a20:	465b      	mov	r3, fp
 8001a22:	f7fe fc33 	bl	800028c <__adddf3>
 8001a26:	f7ff f8df 	bl	8000be8 <__aeabi_d2f>
  calib[motor].ave_cnt++;
 8001a2a:	59eb      	ldr	r3, [r5, r7]
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed > 0) {
 8001a2c:	6862      	ldr	r2, [r4, #4]
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001a2e:	61a0      	str	r0, [r4, #24]
  calib[motor].ave_cnt++;
 8001a30:	3301      	adds	r3, #1
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed > 0) {
 8001a32:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001a36:	ee07 0a10 	vmov	s14, r0
  calib[motor].ave_cnt++;
 8001a3a:	51eb      	str	r3, [r5, r7]
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed > 0) {
 8001a3c:	dd2c      	ble.n	8001a98 <checkAngleCalibMode+0xe0>
 8001a3e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001a42:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a46:	da1f      	bge.n	8001a88 <checkAngleCalibMode+0xd0>
 8001a48:	4928      	ldr	r1, [pc, #160]	; (8001aec <checkAngleCalibMode+0x134>)
 8001a4a:	edd1 7a00 	vldr	s15, [r1]
 8001a4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a56:	f04f 0100 	mov.w	r1, #0
 8001a5a:	dd15      	ble.n	8001a88 <checkAngleCalibMode+0xd0>
    calib[motor].xy_field.result_cw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calib[motor].result_ccw_cnt++;
 8001a64:	68e3      	ldr	r3, [r4, #12]
    calib[motor].xy_field.radian_ave_x = 0;
 8001a66:	6161      	str	r1, [r4, #20]
    calib[motor].xy_field.result_cw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001a68:	ee88 6a27 	vdiv.f32	s12, s16, s15
    calib[motor].result_ccw_cnt++;
 8001a6c:	3301      	adds	r3, #1
    calib[motor].xy_field.radian_ave_y = 0;
 8001a6e:	61a1      	str	r1, [r4, #24]
    calib[motor].result_ccw_cnt++;
 8001a70:	60e3      	str	r3, [r4, #12]
    calib[motor].xy_field.result_cw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001a72:	eec7 6a27 	vdiv.f32	s13, s14, s15
    calib[motor].xy_field.result_cw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001a76:	ed84 6a07 	vstr	s12, [r4, #28]
    calib[motor].xy_field.result_cw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001a7a:	edc4 6a08 	vstr	s13, [r4, #32]
    calib[motor].ave_cnt = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	51eb      	str	r3, [r5, r7]
    calibration_print_flag = true;
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <checkAngleCalibMode+0x138>)
 8001a84:	2101      	movs	r1, #1
 8001a86:	7019      	strb	r1, [r3, #0]
}
 8001a88:	ecbd 8b02 	vpop	{d8}
  calib[motor].pre_raw = ma702[motor].enc_raw;
 8001a8c:	232c      	movs	r3, #44	; 0x2c
 8001a8e:	fb03 5006 	mla	r0, r3, r6, r5
 8001a92:	6042      	str	r2, [r0, #4]
}
 8001a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (calib[motor].pre_raw < HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw > HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed < 0) {
 8001a98:	d020      	beq.n	8001adc <checkAngleCalibMode+0x124>
 8001a9a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001a9e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001aa2:	ddf1      	ble.n	8001a88 <checkAngleCalibMode+0xd0>
 8001aa4:	4911      	ldr	r1, [pc, #68]	; (8001aec <checkAngleCalibMode+0x134>)
 8001aa6:	edd1 7a00 	vldr	s15, [r1]
 8001aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab2:	f04f 0100 	mov.w	r1, #0
 8001ab6:	d5e7      	bpl.n	8001a88 <checkAngleCalibMode+0xd0>
    calib[motor].xy_field.result_ccw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calib[motor].result_cw_cnt++;
 8001ac0:	68a3      	ldr	r3, [r4, #8]
    calib[motor].xy_field.radian_ave_x = 0;
 8001ac2:	6161      	str	r1, [r4, #20]
    calib[motor].xy_field.result_ccw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001ac4:	ee88 6a27 	vdiv.f32	s12, s16, s15
    calib[motor].result_cw_cnt++;
 8001ac8:	3301      	adds	r3, #1
    calib[motor].xy_field.radian_ave_y = 0;
 8001aca:	61a1      	str	r1, [r4, #24]
    calib[motor].result_cw_cnt++;
 8001acc:	60a3      	str	r3, [r4, #8]
    calib[motor].xy_field.result_ccw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001ace:	eec7 6a27 	vdiv.f32	s13, s14, s15
    calib[motor].xy_field.result_ccw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001ad2:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
    calib[motor].xy_field.result_ccw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001ad6:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
 8001ada:	e7d0      	b.n	8001a7e <checkAngleCalibMode+0xc6>
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_force_rotation_speed > 0) {
 8001adc:	2324      	movs	r3, #36	; 0x24
 8001ade:	fb03 9906 	mla	r9, r3, r6, r9
 8001ae2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001ae6:	e7cf      	b.n	8001a88 <checkAngleCalibMode+0xd0>
 8001ae8:	2000035c 	.word	0x2000035c
 8001aec:	20000000 	.word	0x20000000
 8001af0:	200003c8 	.word	0x200003c8
 8001af4:	20000588 	.word	0x20000588

08001af8 <HAL_TIM_PeriodElapsedCallback>:
{
 8001af8:	b5f0      	push	{r4, r5, r6, r7, lr}
  interrupt_timer_cnt++;
 8001afa:	4959      	ldr	r1, [pc, #356]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x168>)
  motor_select_toggle = !motor_select_toggle;
 8001afc:	4c59      	ldr	r4, [pc, #356]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x16c>)
  interrupt_timer_cnt++;
 8001afe:	680a      	ldr	r2, [r1, #0]
  motor_select_toggle = !motor_select_toggle;
 8001b00:	7823      	ldrb	r3, [r4, #0]
{
 8001b02:	ed2d 8b02 	vpush	{d8}
  motor_select_toggle = !motor_select_toggle;
 8001b06:	f083 0301 	eor.w	r3, r3, #1
  interrupt_timer_cnt++;
 8001b0a:	3201      	adds	r2, #1
{
 8001b0c:	b083      	sub	sp, #12
  setLedBlue(false);
 8001b0e:	2000      	movs	r0, #0
  motor_select_toggle = !motor_select_toggle;
 8001b10:	7023      	strb	r3, [r4, #0]
  interrupt_timer_cnt++;
 8001b12:	600a      	str	r2, [r1, #0]
  setLedBlue(false);
 8001b14:	f7ff fe50 	bl	80017b8 <setLedBlue>
  if (calib_process.enc_calib_cnt != 0) {
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03b      	beq.n	8001b98 <HAL_TIM_PeriodElapsedCallback+0xa0>
  manual_offset_radian += calib_force_rotation_speed;
 8001b20:	4b52      	ldr	r3, [pc, #328]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001b22:	4d53      	ldr	r5, [pc, #332]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ed95 8a00 	vldr	s16, [r5]
    calibrationProcess_itr(motor_select_toggle);
 8001b2c:	7824      	ldrb	r4, [r4, #0]
  manual_offset_radian += calib_force_rotation_speed;
 8001b2e:	ee38 8a27 	vadd.f32	s16, s16, s15
  if (manual_offset_radian > M_PI * 2) {
 8001b32:	ee18 0a10 	vmov	r0, s16
 8001b36:	f7fe fd07 	bl	8000548 <__aeabi_f2d>
 8001b3a:	a347      	add	r3, pc, #284	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	4606      	mov	r6, r0
 8001b42:	460f      	mov	r7, r1
 8001b44:	f7fe ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d15b      	bne.n	8001c04 <HAL_TIM_PeriodElapsedCallback+0x10c>
  if (manual_offset_radian < 0) {
 8001b4c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  manual_offset_radian += calib_force_rotation_speed;
 8001b54:	ed85 8a00 	vstr	s16, [r5]
  if (manual_offset_radian < 0) {
 8001b58:	d46a      	bmi.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0x138>
  updateADC(motor);
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	f7ff fb50 	bl	8001200 <updateADC>
  updateMA702(motor);
 8001b60:	4620      	mov	r0, r4
 8001b62:	f002 fb89 	bl	8004278 <updateMA702>
  setOutputRadianMotor(motor, manual_offset_radian, cmd[motor].out_v_final, getBatteryVoltage(), MOTOR_CALIB_VOLTAGE_HIGH);
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001b68:	ed95 8a00 	vldr	s16, [r5]
 8001b6c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001b70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001b74:	edd3 0a03 	vldr	s1, [r3, #12]
 8001b78:	edcd 0a01 	vstr	s1, [sp, #4]
 8001b7c:	f7ff faa0 	bl	80010c0 <getBatteryVoltage>
 8001b80:	eddd 0a01 	vldr	s1, [sp, #4]
 8001b84:	eeb0 1a40 	vmov.f32	s2, s0
 8001b88:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001b8c:	eeb0 0a48 	vmov.f32	s0, s16
 8001b90:	4620      	mov	r0, r4
 8001b92:	f002 fef9 	bl	8004988 <setOutputRadianMotor>
}
 8001b96:	e02d      	b.n	8001bf4 <HAL_TIM_PeriodElapsedCallback+0xfc>
    motorProcess_itr(motor_select_toggle);
 8001b98:	7824      	ldrb	r4, [r4, #0]
  updateADC(motor);
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f7ff fb30 	bl	8001200 <updateADC>
  updateMA702(motor);
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	f002 fb69 	bl	8004278 <updateMA702>
  setOutputRadianMotor(motor, ma702[motor].output_radian + enc_offset[motor].final, cmd[motor].out_v_final, getBatteryVoltage(), motor_param[motor].output_voltage_limit);
 8001ba6:	4934      	ldr	r1, [pc, #208]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001ba8:	4a34      	ldr	r2, [pc, #208]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001baa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001bae:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001bb2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001bb8:	edd2 7a00 	vldr	s15, [r2]
 8001bbc:	ed91 8a00 	vldr	s16, [r1]
 8001bc0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001bc4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001bc8:	edd3 0a03 	vldr	s1, [r3, #12]
 8001bcc:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001bd0:	edcd 0a01 	vstr	s1, [sp, #4]
 8001bd4:	f7ff fa74 	bl	80010c0 <getBatteryVoltage>
 8001bd8:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001bda:	eddd 0a01 	vldr	s1, [sp, #4]
 8001bde:	00e2      	lsls	r2, r4, #3
 8001be0:	4413      	add	r3, r2
 8001be2:	eeb0 1a40 	vmov.f32	s2, s0
 8001be6:	edd3 1a01 	vldr	s3, [r3, #4]
 8001bea:	eeb0 0a48 	vmov.f32	s0, s16
 8001bee:	4620      	mov	r0, r4
 8001bf0:	f002 feca 	bl	8004988 <setOutputRadianMotor>
  setLedBlue(true);
 8001bf4:	2001      	movs	r0, #1
}
 8001bf6:	b003      	add	sp, #12
 8001bf8:	ecbd 8b02 	vpop	{d8}
 8001bfc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  setLedBlue(true);
 8001c00:	f7ff bdda 	b.w	80017b8 <setLedBlue>
    manual_offset_radian -= M_PI * 2;
 8001c04:	a314      	add	r3, pc, #80	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0a:	4630      	mov	r0, r6
 8001c0c:	4639      	mov	r1, r7
 8001c0e:	f7fe fb3b 	bl	8000288 <__aeabi_dsub>
 8001c12:	f7fe ffe9 	bl	8000be8 <__aeabi_d2f>
 8001c16:	4603      	mov	r3, r0
    checkAngleCalibMode(!motor);
 8001c18:	f084 0001 	eor.w	r0, r4, #1
    manual_offset_radian -= M_PI * 2;
 8001c1c:	602b      	str	r3, [r5, #0]
    checkAngleCalibMode(!motor);
 8001c1e:	f7ff fecb 	bl	80019b8 <checkAngleCalibMode>
  if (manual_offset_radian < 0) {
 8001c22:	ed95 8a00 	vldr	s16, [r5]
 8001c26:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d594      	bpl.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x62>
    manual_offset_radian += M_PI * 2;
 8001c30:	ee18 0a10 	vmov	r0, s16
 8001c34:	f7fe fc88 	bl	8000548 <__aeabi_f2d>
 8001c38:	a307      	add	r3, pc, #28	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	f7fe fb25 	bl	800028c <__adddf3>
 8001c42:	f7fe ffd1 	bl	8000be8 <__aeabi_d2f>
 8001c46:	4603      	mov	r3, r0
    checkAngleCalibMode(!motor);
 8001c48:	f084 0001 	eor.w	r0, r4, #1
    manual_offset_radian += M_PI * 2;
 8001c4c:	602b      	str	r3, [r5, #0]
    checkAngleCalibMode(!motor);
 8001c4e:	f7ff feb3 	bl	80019b8 <checkAngleCalibMode>
 8001c52:	e782      	b.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x62>
 8001c54:	f3af 8000 	nop.w
 8001c58:	54442d18 	.word	0x54442d18
 8001c5c:	401921fb 	.word	0x401921fb
 8001c60:	20000440 	.word	0x20000440
 8001c64:	20000484 	.word	0x20000484
 8001c68:	200003b8 	.word	0x200003b8
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000448 	.word	0x20000448
 8001c74:	200003f4 	.word	0x200003f4
 8001c78:	20000588 	.word	0x20000588
 8001c7c:	2000041c 	.word	0x2000041c
 8001c80:	2000044c 	.word	0x2000044c

08001c84 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8001c84:	b508      	push	{r3, lr}
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	f004 fb34 	bl	80062f8 <HAL_CAN_GetRxMessage>
 8001c90:	b108      	cbz	r0, 8001c96 <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c92:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001c94:	e7fe      	b.n	8001c94 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
  if (calib_process.enc_calib_cnt != 0 || calib_process.motor_calib_cnt != 0) {
 8001c96:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001c98:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	d103      	bne.n	8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
}
 8001ca0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001ca4:	f7ff bdf8 	b.w	8001898 <can_rx_callback.part.0>
 8001ca8:	bd08      	pop	{r3, pc}
 8001caa:	bf00      	nop
 8001cac:	200003d8 	.word	0x200003d8
 8001cb0:	200003cc 	.word	0x200003cc
 8001cb4:	200003b8 	.word	0x200003b8

08001cb8 <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 8001cb8:	b508      	push	{r3, lr}
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	f004 fb1a 	bl	80062f8 <HAL_CAN_GetRxMessage>
 8001cc4:	b108      	cbz	r0, 8001cca <HAL_CAN_RxFifo1MsgPendingCallback+0x12>
 8001cc6:	b672      	cpsid	i
  while (1) {
 8001cc8:	e7fe      	b.n	8001cc8 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
  if (calib_process.enc_calib_cnt != 0 || calib_process.motor_calib_cnt != 0) {
 8001cca:	4a07      	ldr	r2, [pc, #28]	; (8001ce8 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8001ccc:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	d103      	bne.n	8001cdc <HAL_CAN_RxFifo1MsgPendingCallback+0x24>
}
 8001cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001cd8:	f7ff bdde 	b.w	8001898 <can_rx_callback.part.0>
 8001cdc:	bd08      	pop	{r3, pc}
 8001cde:	bf00      	nop
 8001ce0:	200003d8 	.word	0x200003d8
 8001ce4:	200003cc 	.word	0x200003cc
 8001ce8:	200003b8 	.word	0x200003b8

08001cec <speedToOutputVoltage>:
{
 8001cec:	b410      	push	{r4}
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001cee:	4929      	ldr	r1, [pc, #164]	; (8001d94 <speedToOutputVoltage+0xa8>)
 8001cf0:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <speedToOutputVoltage+0xac>)
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001cf2:	4c2a      	ldr	r4, [pc, #168]	; (8001d9c <speedToOutputVoltage+0xb0>)
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001cf4:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8001cf8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001cfc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001d00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001d04:	ed91 7a00 	vldr	s14, [r1]
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001d08:	ed92 6a00 	vldr	s12, [r2]
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001d0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d10:	4923      	ldr	r1, [pc, #140]	; (8001da0 <speedToOutputVoltage+0xb4>)
 8001d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d16:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001d1a:	ee27 7a06 	vmul.f32	s14, s14, s12
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001d1e:	eb01 1303 	add.w	r3, r1, r3, lsl #4
  if (output_voltage_diff > +pid[motor].diff_voltage_limit) {
 8001d22:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
  cmd[motor].out_v = cmd[motor].speed * motor_param[motor].voltage_per_rps;
 8001d26:	ed82 7a02 	vstr	s14, [r2, #8]
  float output_voltage_diff = cmd[motor].out_v - pid[motor].eff_voltage;
 8001d2a:	ee37 6a67 	vsub.f32	s12, s14, s15
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001d2e:	edc3 7a00 	vstr	s15, [r3]
  if (output_voltage_diff > +pid[motor].diff_voltage_limit) {
 8001d32:	eef4 6ac6 	vcmpe.f32	s13, s12
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  pid[motor].eff_voltage = motor_real[motor].rps * motor_param[motor].voltage_per_rps;
 8001d3a:	ea4f 0280 	mov.w	r2, r0, lsl #2
 8001d3e:	ea4f 0c40 	mov.w	ip, r0, lsl #1
  if (output_voltage_diff > +pid[motor].diff_voltage_limit) {
 8001d42:	d512      	bpl.n	8001d6a <speedToOutputVoltage+0x7e>
    cmd[motor].out_v = pid[motor].eff_voltage + pid[motor].diff_voltage_limit;
 8001d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
    pid[motor].output_voltage_limitting = true;
 8001d48:	4484      	add	ip, r0
 8001d4a:	eb01 110c 	add.w	r1, r1, ip, lsl #4
    cmd[motor].out_v = pid[motor].eff_voltage - pid[motor].diff_voltage_limit;
 8001d4e:	4402      	add	r2, r0
    pid[motor].load_limit_cnt++;
 8001d50:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    cmd[motor].out_v = pid[motor].eff_voltage - pid[motor].diff_voltage_limit;
 8001d52:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    pid[motor].output_voltage_limitting = true;
 8001d56:	2201      	movs	r2, #1
    pid[motor].load_limit_cnt++;
 8001d58:	4413      	add	r3, r2
    cmd[motor].out_v = pid[motor].eff_voltage - pid[motor].diff_voltage_limit;
 8001d5a:	edc4 7a02 	vstr	s15, [r4, #8]
    pid[motor].output_voltage_limitting = true;
 8001d5e:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
    pid[motor].load_limit_cnt++;
 8001d62:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001d64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d68:	4770      	bx	lr
  } else if (output_voltage_diff < -pid[motor].diff_voltage_limit) {
 8001d6a:	eeb1 7a66 	vneg.f32	s14, s13
 8001d6e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8001d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d76:	dd02      	ble.n	8001d7e <speedToOutputVoltage+0x92>
    cmd[motor].out_v = pid[motor].eff_voltage - pid[motor].diff_voltage_limit;
 8001d78:	ee77 7ae6 	vsub.f32	s15, s15, s13
    pid[motor].output_voltage_limitting = true;
 8001d7c:	e7e4      	b.n	8001d48 <speedToOutputVoltage+0x5c>
  } else if (pid[motor].load_limit_cnt > 0) {
 8001d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pid[motor].output_voltage_limitting = false;
 8001d80:	2100      	movs	r1, #0
  } else if (pid[motor].load_limit_cnt > 0) {
 8001d82:	428a      	cmp	r2, r1
    pid[motor].output_voltage_limitting = false;
 8001d84:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
  } else if (pid[motor].load_limit_cnt > 0) {
 8001d88:	ddec      	ble.n	8001d64 <speedToOutputVoltage+0x78>
    pid[motor].load_limit_cnt--;
 8001d8a:	3a01      	subs	r2, #1
}
 8001d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pid[motor].load_limit_cnt--;
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d92:	4770      	bx	lr
 8001d94:	2000044c 	.word	0x2000044c
 8001d98:	2000045c 	.word	0x2000045c
 8001d9c:	200003f4 	.word	0x200003f4
 8001da0:	20000488 	.word	0x20000488
 8001da4:	00000000 	.word	0x00000000

08001da8 <runMode>:
{
 8001da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (free_wheel_cnt > 0) {
 8001dac:	f8df a37c 	ldr.w	sl, [pc, #892]	; 800212c <runMode+0x384>
{
 8001db0:	ed2d 8b02 	vpush	{d8}
  if (free_wheel_cnt > 0) {
 8001db4:	f8da 3000 	ldr.w	r3, [sl]
{
 8001db8:	b087      	sub	sp, #28
  if (free_wheel_cnt > 0) {
 8001dba:	b12b      	cbz	r3, 8001dc8 <runMode+0x20>
    free_wheel_cnt--;
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	f8ca 3000 	str.w	r3, [sl]
    if (free_wheel_cnt == 0) {
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8093 	beq.w	8001eee <runMode+0x146>
  if (manual_offset_radian > M_PI * 2) {
 8001dc8:	4fc1      	ldr	r7, [pc, #772]	; (80020d0 <runMode+0x328>)
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f7fe fbbc 	bl	8000548 <__aeabi_f2d>
 8001dd0:	a3bd      	add	r3, pc, #756	; (adr r3, 80020c8 <runMode+0x320>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fe9f 	bl	8000b18 <__aeabi_dcmpgt>
 8001dda:	b108      	cbz	r0, 8001de0 <runMode+0x38>
    manual_offset_radian = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	f8df 834c 	ldr.w	r8, [pc, #844]	; 8002130 <runMode+0x388>
 8001de4:	4dbb      	ldr	r5, [pc, #748]	; (80020d4 <runMode+0x32c>)
      cmd[i].speed = -40.0;
 8001de6:	eddf 8abc 	vldr	s17, [pc, #752]	; 80020d8 <runMode+0x330>
      cmd[i].out_v = 0;
 8001dea:	ed9f 8abc 	vldr	s16, [pc, #752]	; 80020dc <runMode+0x334>
 8001dee:	f8cd a010 	str.w	sl, [sp, #16]
 8001df2:	4644      	mov	r4, r8
{
 8001df4:	2600      	movs	r6, #0
    if (isPushedSW1()) {
 8001df6:	f7ff fca7 	bl	8001748 <isPushedSW1>
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	d069      	beq.n	8001ed2 <runMode+0x12a>
      cmd[i].speed = 10.0;
 8001dfe:	4bb8      	ldr	r3, [pc, #736]	; (80020e0 <runMode+0x338>)
 8001e00:	6023      	str	r3, [r4, #0]
    speedToOutputVoltage(i);
 8001e02:	4630      	mov	r0, r6
 8001e04:	f7ff ff72 	bl	8001cec <speedToOutputVoltage>
    if (cmd[i].timeout_cnt > 0) {
 8001e08:	6923      	ldr	r3, [r4, #16]
 8001e0a:	2b00      	cmp	r3, #0
      cmd[i].timeout_cnt--;
 8001e0c:	bfc4      	itt	gt
 8001e0e:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8001e12:	6123      	strgt	r3, [r4, #16]
    if (cmd[i].timeout_cnt == 0) {
 8001e14:	bb63      	cbnz	r3, 8001e70 <runMode+0xc8>
    if (free_wheel_cnt > 0) {
 8001e16:	9b04      	ldr	r3, [sp, #16]
      cmd[i].out_v = 0;
 8001e18:	ed84 8a02 	vstr	s16, [r4, #8]
    if (free_wheel_cnt > 0) {
 8001e1c:	f8d3 b000 	ldr.w	fp, [r3]
 8001e20:	f1bb 0f00 	cmp.w	fp, #0
 8001e24:	f000 81ab 	beq.w	800217e <runMode+0x3d6>
      cmd[i].out_v = 0;
 8001e28:	ed84 8a02 	vstr	s16, [r4, #8]
  cmd[motor].out_v_final = cmd[motor].out_v;
 8001e2c:	ed84 8a03 	vstr	s16, [r4, #12]
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 8001e30:	edd5 7a01 	vldr	s15, [r5, #4]
 8001e34:	ed97 7a00 	vldr	s14, [r7]
 8001e38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 2; i++) {
 8001e42:	3508      	adds	r5, #8
 8001e44:	3414      	adds	r4, #20
 8001e46:	2e00      	cmp	r6, #0
 8001e48:	d03e      	beq.n	8001ec8 <runMode+0x120>
  print_cnt++;
 8001e4a:	4ca6      	ldr	r4, [pc, #664]	; (80020e4 <runMode+0x33c>)
 8001e4c:	7823      	ldrb	r3, [r4, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	b2db      	uxtb	r3, r3
  switch (print_cnt) {
 8001e52:	1e5a      	subs	r2, r3, #1
  print_cnt++;
 8001e54:	7023      	strb	r3, [r4, #0]
  switch (print_cnt) {
 8001e56:	2a07      	cmp	r2, #7
 8001e58:	f200 8194 	bhi.w	8002184 <runMode+0x3dc>
 8001e5c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001e60:	0075004a 	.word	0x0075004a
 8001e64:	00aa008e 	.word	0x00aa008e
 8001e68:	00e000c3 	.word	0x00e000c3
 8001e6c:	016a010a 	.word	0x016a010a
    if (free_wheel_cnt > 0) {
 8001e70:	9b04      	ldr	r3, [sp, #16]
 8001e72:	f8d3 b000 	ldr.w	fp, [r3]
 8001e76:	f1bb 0f00 	cmp.w	fp, #0
 8001e7a:	d1d5      	bne.n	8001e28 <runMode+0x80>
  cmd[motor].out_v_final = cmd[motor].out_v;
 8001e7c:	edd4 7a02 	vldr	s15, [r4, #8]
  if (cmd[motor].out_v_final < 0) {
 8001e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  cmd[motor].out_v_final = cmd[motor].out_v;
 8001e88:	edc4 7a03 	vstr	s15, [r4, #12]
  if (cmd[motor].out_v_final < 0) {
 8001e8c:	d5d0      	bpl.n	8001e30 <runMode+0x88>
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 8001e8e:	6838      	ldr	r0, [r7, #0]
 8001e90:	f7fe fb5a 	bl	8000548 <__aeabi_f2d>
 8001e94:	4b94      	ldr	r3, [pc, #592]	; (80020e8 <runMode+0x340>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	f7fe f9f6 	bl	8000288 <__aeabi_dsub>
 8001e9c:	4681      	mov	r9, r0
 8001e9e:	6868      	ldr	r0, [r5, #4]
 8001ea0:	468a      	mov	sl, r1
 8001ea2:	f7fe fb51 	bl	8000548 <__aeabi_f2d>
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4651      	mov	r1, sl
 8001eac:	4648      	mov	r0, r9
 8001eae:	f7fe f9ed 	bl	800028c <__adddf3>
 8001eb2:	f7fe fe99 	bl	8000be8 <__aeabi_d2f>
 8001eb6:	ee07 0a90 	vmov	s15, r0
 8001eba:	462b      	mov	r3, r5
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < 2; i++) {
 8001ec0:	3508      	adds	r5, #8
 8001ec2:	3414      	adds	r4, #20
 8001ec4:	2e00      	cmp	r6, #0
 8001ec6:	d1c0      	bne.n	8001e4a <runMode+0xa2>
 8001ec8:	2601      	movs	r6, #1
    if (isPushedSW1()) {
 8001eca:	f7ff fc3d 	bl	8001748 <isPushedSW1>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d195      	bne.n	8001dfe <runMode+0x56>
    } else if (isPushedSW2()) {
 8001ed2:	f7ff fc45 	bl	8001760 <isPushedSW2>
 8001ed6:	b110      	cbz	r0, 8001ede <runMode+0x136>
      cmd[i].speed = -10.0;
 8001ed8:	4b84      	ldr	r3, [pc, #528]	; (80020ec <runMode+0x344>)
 8001eda:	6023      	str	r3, [r4, #0]
 8001edc:	e791      	b.n	8001e02 <runMode+0x5a>
    } else if (isPushedSW3()) {
 8001ede:	f7ff fc4b 	bl	8001778 <isPushedSW3>
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	f000 8143 	beq.w	800216e <runMode+0x3c6>
      cmd[i].speed = -20.0;
 8001ee8:	4b81      	ldr	r3, [pc, #516]	; (80020f0 <runMode+0x348>)
 8001eea:	6023      	str	r3, [r4, #0]
 8001eec:	e789      	b.n	8001e02 <runMode+0x5a>
      resumePwmOutput();
 8001eee:	f002 fe77 	bl	8004be0 <resumePwmOutput>
 8001ef2:	e769      	b.n	8001dc8 <runMode+0x20>
      p("\e[0mCS %+5.2f %+5.2f / BV %4.1f ", getCurrentMotor(0), getCurrentMotor(1), getBatteryVoltage());
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff f937 	bl	8001168 <getCurrentMotor>
 8001efa:	2001      	movs	r0, #1
 8001efc:	ee10 5a10 	vmov	r5, s0
 8001f00:	f7ff f932 	bl	8001168 <getCurrentMotor>
 8001f04:	ee10 4a10 	vmov	r4, s0
 8001f08:	f7ff f8da 	bl	80010c0 <getBatteryVoltage>
 8001f0c:	4628      	mov	r0, r5
 8001f0e:	ee10 5a10 	vmov	r5, s0
 8001f12:	f7fe fb19 	bl	8000548 <__aeabi_f2d>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f20:	f7fe fb12 	bl	8000548 <__aeabi_f2d>
 8001f24:	4606      	mov	r6, r0
 8001f26:	460f      	mov	r7, r1
 8001f28:	4620      	mov	r0, r4
 8001f2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001f2e:	f7fe fb0b 	bl	8000548 <__aeabi_f2d>
 8001f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001f36:	e9cd 0100 	strd	r0, r1, [sp]
 8001f3a:	486e      	ldr	r0, [pc, #440]	; (80020f4 <runMode+0x34c>)
 8001f3c:	f002 ff74 	bl	8004e28 <p>
}
 8001f40:	b007      	add	sp, #28
 8001f42:	ecbd 8b02 	vpop	{d8}
 8001f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("RPS %+6.1f %+6.1f Free %4d ", motor_real[0].rps, motor_real[1].rps, free_wheel_cnt);
 8001f4a:	4c6b      	ldr	r4, [pc, #428]	; (80020f8 <runMode+0x350>)
 8001f4c:	68a0      	ldr	r0, [r4, #8]
 8001f4e:	f7fe fafb 	bl	8000548 <__aeabi_f2d>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	69e0      	ldr	r0, [r4, #28]
 8001f58:	f8cd b008 	str.w	fp, [sp, #8]
 8001f5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f60:	f7fe faf2 	bl	8000548 <__aeabi_f2d>
 8001f64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001f68:	e9cd 0100 	strd	r0, r1, [sp]
 8001f6c:	4863      	ldr	r0, [pc, #396]	; (80020fc <runMode+0x354>)
 8001f6e:	f002 ff5b 	bl	8004e28 <p>
}
 8001f72:	b007      	add	sp, #28
 8001f74:	ecbd 8b02 	vpop	{d8}
 8001f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("RAW %5d %5d Out_v %+5.1f %+5.1f ", ma702[0].enc_raw, ma702[1].enc_raw, cmd[0].out_v, cmd[1].out_v);
 8001f7c:	4b60      	ldr	r3, [pc, #384]	; (8002100 <runMode+0x358>)
 8001f7e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8001f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f84:	685c      	ldr	r4, [r3, #4]
 8001f86:	9204      	str	r2, [sp, #16]
 8001f88:	f7fe fade 	bl	8000548 <__aeabi_f2d>
 8001f8c:	4606      	mov	r6, r0
 8001f8e:	460f      	mov	r7, r1
 8001f90:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8001f94:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001f98:	f7fe fad6 	bl	8000548 <__aeabi_f2d>
 8001f9c:	9a04      	ldr	r2, [sp, #16]
 8001f9e:	e9cd 0100 	strd	r0, r1, [sp]
 8001fa2:	4858      	ldr	r0, [pc, #352]	; (8002104 <runMode+0x35c>)
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	f002 ff3f 	bl	8004e28 <p>
}
 8001faa:	b007      	add	sp, #28
 8001fac:	ecbd 8b02 	vpop	{d8}
 8001fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("Rx %4ld CPU %3d GD %4.1f ", can_rx_cnt, main_loop_remain_counter, getGateDriverDCDCVoltage());
 8001fb4:	4b54      	ldr	r3, [pc, #336]	; (8002108 <runMode+0x360>)
 8001fb6:	4c55      	ldr	r4, [pc, #340]	; (800210c <runMode+0x364>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	9204      	str	r2, [sp, #16]
 8001fbc:	6825      	ldr	r5, [r4, #0]
 8001fbe:	f7ff f897 	bl	80010f0 <getGateDriverDCDCVoltage>
 8001fc2:	ee10 0a10 	vmov	r0, s0
 8001fc6:	f7fe fabf 	bl	8000548 <__aeabi_f2d>
 8001fca:	9a04      	ldr	r2, [sp, #16]
 8001fcc:	e9cd 0100 	strd	r0, r1, [sp]
 8001fd0:	484f      	ldr	r0, [pc, #316]	; (8002110 <runMode+0x368>)
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f002 ff28 	bl	8004e28 <p>
      can_rx_cnt = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6023      	str	r3, [r4, #0]
}
 8001fdc:	b007      	add	sp, #28
 8001fde:	ecbd 8b02 	vpop	{d8}
 8001fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("Eff %+6.2f %+6.2f %d %d ", pid[0].eff_voltage, pid[1].eff_voltage, pid[0].output_voltage_limitting, pid[1].output_voltage_limitting);
 8001fe6:	4c4b      	ldr	r4, [pc, #300]	; (8002114 <runMode+0x36c>)
 8001fe8:	6820      	ldr	r0, [r4, #0]
 8001fea:	f7fe faad 	bl	8000548 <__aeabi_f2d>
 8001fee:	f894 505c 	ldrb.w	r5, [r4, #92]	; 0x5c
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ffc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002000:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8002004:	f7fe faa0 	bl	8000548 <__aeabi_f2d>
 8002008:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800200c:	e9cd 0100 	strd	r0, r1, [sp]
 8002010:	4841      	ldr	r0, [pc, #260]	; (8002118 <runMode+0x370>)
 8002012:	f002 ff09 	bl	8004e28 <p>
}
 8002016:	b007      	add	sp, #28
 8002018:	ecbd 8b02 	vpop	{d8}
 800201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("LoadV %+5.2f %+5.2f CanFail %4d ", cmd[0].out_v - pid[0].eff_voltage, cmd[1].out_v - pid[1].eff_voltage, can_send_fail_cnt);
 8002020:	4d3c      	ldr	r5, [pc, #240]	; (8002114 <runMode+0x36c>)
 8002022:	ed98 7a02 	vldr	s14, [r8, #8]
 8002026:	edd5 7a00 	vldr	s15, [r5]
 800202a:	4c3c      	ldr	r4, [pc, #240]	; (800211c <runMode+0x374>)
 800202c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002030:	ee17 0a90 	vmov	r0, s15
 8002034:	f7fe fa88 	bl	8000548 <__aeabi_f2d>
 8002038:	edd5 7a0c 	vldr	s15, [r5, #48]	; 0x30
 800203c:	ed98 7a07 	vldr	s14, [r8, #28]
 8002040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	ee17 0a90 	vmov	r0, s15
 800204c:	6821      	ldr	r1, [r4, #0]
 800204e:	9102      	str	r1, [sp, #8]
 8002050:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002054:	f7fe fa78 	bl	8000548 <__aeabi_f2d>
 8002058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800205c:	e9cd 0100 	strd	r0, r1, [sp]
 8002060:	482f      	ldr	r0, [pc, #188]	; (8002120 <runMode+0x378>)
 8002062:	f002 fee1 	bl	8004e28 <p>
      can_send_fail_cnt = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	6023      	str	r3, [r4, #0]
}
 800206a:	b007      	add	sp, #28
 800206c:	ecbd 8b02 	vpop	{d8}
 8002070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("LoadCnt %4.3f %4.3f ", (float)pid[0].load_limit_cnt / MOTOR_OVER_LOAD_CNT_LIMIT, (float)pid[1].load_limit_cnt / MOTOR_OVER_LOAD_CNT_LIMIT);
 8002074:	4c27      	ldr	r4, [pc, #156]	; (8002114 <runMode+0x36c>)
 8002076:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8002124 <runMode+0x37c>
 800207a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800207e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002082:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002086:	ee17 0a90 	vmov	r0, s15
 800208a:	f7fe fa5d 	bl	8000548 <__aeabi_f2d>
 800208e:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8002092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002096:	4602      	mov	r2, r0
 8002098:	ee67 7a88 	vmul.f32	s15, s15, s16
 800209c:	460b      	mov	r3, r1
 800209e:	ee17 0a90 	vmov	r0, s15
 80020a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80020a6:	f7fe fa4f 	bl	8000548 <__aeabi_f2d>
 80020aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80020ae:	e9cd 0100 	strd	r0, r1, [sp]
 80020b2:	481d      	ldr	r0, [pc, #116]	; (8002128 <runMode+0x380>)
 80020b4:	f002 feb8 	bl	8004e28 <p>
}
 80020b8:	b007      	add	sp, #28
 80020ba:	ecbd 8b02 	vpop	{d8}
 80020be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020c2:	bf00      	nop
 80020c4:	f3af 8000 	nop.w
 80020c8:	54442d18 	.word	0x54442d18
 80020cc:	401921fb 	.word	0x401921fb
 80020d0:	20000448 	.word	0x20000448
 80020d4:	2000041c 	.word	0x2000041c
 80020d8:	c2200000 	.word	0xc2200000
 80020dc:	00000000 	.word	0x00000000
 80020e0:	41200000 	.word	0x41200000
 80020e4:	200004ec 	.word	0x200004ec
 80020e8:	40100000 	.word	0x40100000
 80020ec:	c1200000 	.word	0xc1200000
 80020f0:	c1a00000 	.word	0xc1a00000
 80020f4:	0800d5dc 	.word	0x0800d5dc
 80020f8:	2000045c 	.word	0x2000045c
 80020fc:	0800d600 	.word	0x0800d600
 8002100:	20000588 	.word	0x20000588
 8002104:	0800d61c 	.word	0x0800d61c
 8002108:	20000444 	.word	0x20000444
 800210c:	200003d4 	.word	0x200003d4
 8002110:	0800d640 	.word	0x0800d640
 8002114:	20000488 	.word	0x20000488
 8002118:	0800d65c 	.word	0x0800d65c
 800211c:	20000314 	.word	0x20000314
 8002120:	0800d678 	.word	0x0800d678
 8002124:	39aec33e 	.word	0x39aec33e
 8002128:	0800d69c 	.word	0x0800d69c
 800212c:	20000004 	.word	0x20000004
 8002130:	200003f4 	.word	0x200003f4
      p("TO %4d %4d diff max M0 %+6d, M1 %+6d %d", cmd[0].timeout_cnt, cmd[1].timeout_cnt, motor_real[0].diff_cnt_max, motor_real[1].diff_cnt_max, enc_over_speed_cnt_error_flag);
 8002134:	4c16      	ldr	r4, [pc, #88]	; (8002190 <runMode+0x3e8>)
 8002136:	4b17      	ldr	r3, [pc, #92]	; (8002194 <runMode+0x3ec>)
 8002138:	69a2      	ldr	r2, [r4, #24]
 800213a:	7819      	ldrb	r1, [r3, #0]
 800213c:	4816      	ldr	r0, [pc, #88]	; (8002198 <runMode+0x3f0>)
 800213e:	6863      	ldr	r3, [r4, #4]
 8002140:	e9cd 2100 	strd	r2, r1, [sp]
 8002144:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8002148:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800214c:	f002 fe6c 	bl	8004e28 <p>
      ma702[0].diff_max = 0;
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <runMode+0x3f4>)
      motor_real[0].diff_cnt_max = 0;
 8002152:	2200      	movs	r2, #0
      ma702[0].diff_min = 65535;
 8002154:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002158:	e9c3 1205 	strd	r1, r2, [r3, #20]
      ma702[1].diff_min = 65535;
 800215c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
      motor_real[0].diff_cnt_max = 0;
 8002160:	6062      	str	r2, [r4, #4]
      motor_real[1].diff_cnt_max = 0;
 8002162:	61a2      	str	r2, [r4, #24]
}
 8002164:	b007      	add	sp, #28
 8002166:	ecbd 8b02 	vpop	{d8}
 800216a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (isPushedSW4()) {
 800216e:	f7ff fb0f 	bl	8001790 <isPushedSW4>
 8002172:	2800      	cmp	r0, #0
 8002174:	f43f ae45 	beq.w	8001e02 <runMode+0x5a>
      cmd[i].speed = -40.0;
 8002178:	edc4 8a00 	vstr	s17, [r4]
 800217c:	e641      	b.n	8001e02 <runMode+0x5a>
  cmd[motor].out_v_final = cmd[motor].out_v;
 800217e:	ed84 8a03 	vstr	s16, [r4, #12]
  if (cmd[motor].out_v_final < 0) {
 8002182:	e655      	b.n	8001e30 <runMode+0x88>
      p("\n");
 8002184:	4806      	ldr	r0, [pc, #24]	; (80021a0 <runMode+0x3f8>)
 8002186:	f002 fe4f 	bl	8004e28 <p>
      print_cnt = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	7023      	strb	r3, [r4, #0]
}
 800218e:	e6d7      	b.n	8001f40 <runMode+0x198>
 8002190:	2000045c 	.word	0x2000045c
 8002194:	20000434 	.word	0x20000434
 8002198:	0800d6b4 	.word	0x0800d6b4
 800219c:	20000588 	.word	0x20000588
 80021a0:	0800d8d8 	.word	0x0800d8d8
 80021a4:	00000000 	.word	0x00000000

080021a8 <encoderCalibrationMode>:
{
 80021a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (calibration_print_flag) {
 80021ac:	4bd2      	ldr	r3, [pc, #840]	; (80024f8 <encoderCalibrationMode+0x350>)
{
 80021ae:	ed2d 8b0e 	vpush	{d8-d14}
  if (calibration_print_flag) {
 80021b2:	781a      	ldrb	r2, [r3, #0]
{
 80021b4:	b095      	sub	sp, #84	; 0x54
  if (calibration_print_flag) {
 80021b6:	bb0a      	cbnz	r2, 80021fc <encoderCalibrationMode+0x54>
  if (calib[0].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib[1].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib_force_rotation_speed > 0) {
 80021b8:	4cd0      	ldr	r4, [pc, #832]	; (80024fc <encoderCalibrationMode+0x354>)
 80021ba:	68e3      	ldr	r3, [r4, #12]
 80021bc:	2b0c      	cmp	r3, #12
 80021be:	dd02      	ble.n	80021c6 <encoderCalibrationMode+0x1e>
 80021c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	dc0a      	bgt.n	80021dc <encoderCalibrationMode+0x34>
  if (calib[0].result_cw_cnt > MOTOR_CALIB_CYCLE && calib[1].result_cw_cnt > MOTOR_CALIB_CYCLE) {
 80021c6:	68a3      	ldr	r3, [r4, #8]
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	dd02      	ble.n	80021d2 <encoderCalibrationMode+0x2a>
 80021cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	dc77      	bgt.n	80022c2 <encoderCalibrationMode+0x11a>
}
 80021d2:	b015      	add	sp, #84	; 0x54
 80021d4:	ecbd 8b0e 	vpop	{d8-d14}
 80021d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (calib[0].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib[1].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib_force_rotation_speed > 0) {
 80021dc:	4bc8      	ldr	r3, [pc, #800]	; (8002500 <encoderCalibrationMode+0x358>)
 80021de:	edd3 7a00 	vldr	s15, [r3]
 80021e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ea:	ddec      	ble.n	80021c6 <encoderCalibrationMode+0x1e>
    calib_force_rotation_speed = -calib_force_rotation_speed;  //CCW方向終わったので、回転方向反転
 80021ec:	eef1 7a67 	vneg.f32	s15, s15
    HAL_Delay(1);                                              // write out uart buffer
 80021f0:	2001      	movs	r0, #1
    calib_force_rotation_speed = -calib_force_rotation_speed;  //CCW方向終わったので、回転方向反転
 80021f2:	edc3 7a00 	vstr	s15, [r3]
    HAL_Delay(1);                                              // write out uart buffer
 80021f6:	f002 ff07 	bl	8005008 <HAL_Delay>
 80021fa:	e7e4      	b.n	80021c6 <encoderCalibrationMode+0x1e>
    p("enc = %+5.2f %+5.2f  / M0 X %+5.2f Y %+5.2f / M1 X %+5.2f Y %+5.2f / Rad %+5.2f %+5.2f\n", ma702[0].output_radian, ma702[1].output_radian, cos(ma702[0].output_radian),
 80021fc:	4cc1      	ldr	r4, [pc, #772]	; (8002504 <encoderCalibrationMode+0x35c>)
    calibration_print_flag = false;
 80021fe:	2200      	movs	r2, #0
    p("enc = %+5.2f %+5.2f  / M0 X %+5.2f Y %+5.2f / M1 X %+5.2f Y %+5.2f / Rad %+5.2f %+5.2f\n", ma702[0].output_radian, ma702[1].output_radian, cos(ma702[0].output_radian),
 8002200:	6820      	ldr	r0, [r4, #0]
    calibration_print_flag = false;
 8002202:	701a      	strb	r2, [r3, #0]
    p("enc = %+5.2f %+5.2f  / M0 X %+5.2f Y %+5.2f / M1 X %+5.2f Y %+5.2f / Rad %+5.2f %+5.2f\n", ma702[0].output_radian, ma702[1].output_radian, cos(ma702[0].output_radian),
 8002204:	f7fe f9a0 	bl	8000548 <__aeabi_f2d>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800220e:	ec43 2b18 	vmov	d8, r2, r3
 8002212:	f7fe f999 	bl	8000548 <__aeabi_f2d>
 8002216:	eeb0 0a48 	vmov.f32	s0, s16
 800221a:	eef0 0a68 	vmov.f32	s1, s17
 800221e:	ec41 0b19 	vmov	d9, r0, r1
 8002222:	f007 f855 	bl	80092d0 <cos>
 8002226:	eeb0 da40 	vmov.f32	s26, s0
 800222a:	eef0 da60 	vmov.f32	s27, s1
 800222e:	eeb0 0a48 	vmov.f32	s0, s16
 8002232:	eef0 0a68 	vmov.f32	s1, s17
 8002236:	f007 f89f 	bl	8009378 <sin>
 800223a:	eeb0 aa40 	vmov.f32	s20, s0
 800223e:	eef0 aa60 	vmov.f32	s21, s1
 8002242:	eeb0 0a49 	vmov.f32	s0, s18
 8002246:	eef0 0a69 	vmov.f32	s1, s19
 800224a:	f007 f841 	bl	80092d0 <cos>
 800224e:	eeb0 ba40 	vmov.f32	s22, s0
 8002252:	eef0 ba60 	vmov.f32	s23, s1
 8002256:	eeb0 0a49 	vmov.f32	s0, s18
 800225a:	eef0 0a69 	vmov.f32	s1, s19
 800225e:	f007 f88b 	bl	8009378 <sin>
 8002262:	eeb0 1a4d 	vmov.f32	s2, s26
 8002266:	eef0 1a6d 	vmov.f32	s3, s27
 800226a:	eeb0 ca40 	vmov.f32	s24, s0
 800226e:	eef0 ca60 	vmov.f32	s25, s1
 8002272:	eeb0 0a4a 	vmov.f32	s0, s20
 8002276:	eef0 0a6a 	vmov.f32	s1, s21
 800227a:	f007 f825 	bl	80092c8 <atan2>
 800227e:	eeb0 1a4b 	vmov.f32	s2, s22
 8002282:	eef0 1a6b 	vmov.f32	s3, s23
 8002286:	eeb0 ea40 	vmov.f32	s28, s0
 800228a:	eef0 ea60 	vmov.f32	s29, s1
 800228e:	eeb0 0a4c 	vmov.f32	s0, s24
 8002292:	eef0 0a6c 	vmov.f32	s1, s25
 8002296:	f007 f817 	bl	80092c8 <atan2>
 800229a:	ed8d eb0a 	vstr	d14, [sp, #40]	; 0x28
 800229e:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
 80022a2:	ed8d cb08 	vstr	d12, [sp, #32]
 80022a6:	ed8d bb06 	vstr	d11, [sp, #24]
 80022aa:	ed8d ab04 	vstr	d10, [sp, #16]
 80022ae:	ed8d db02 	vstr	d13, [sp, #8]
 80022b2:	ed8d 9b00 	vstr	d9, [sp]
 80022b6:	ec53 2b18 	vmov	r2, r3, d8
 80022ba:	4893      	ldr	r0, [pc, #588]	; (8002508 <encoderCalibrationMode+0x360>)
 80022bc:	f002 fdb4 	bl	8004e28 <p>
 80022c0:	e77a      	b.n	80021b8 <encoderCalibrationMode+0x10>
    cmd[0].out_v_final = 0;
 80022c2:	ed9f 9a92 	vldr	s18, [pc, #584]	; 800250c <encoderCalibrationMode+0x364>
 80022c6:	4d92      	ldr	r5, [pc, #584]	; (8002510 <encoderCalibrationMode+0x368>)
 80022c8:	f8df b274 	ldr.w	fp, [pc, #628]	; 8002540 <encoderCalibrationMode+0x398>
 80022cc:	ed85 9a03 	vstr	s18, [r5, #12]
    cmd[1].out_v_final = 0;
 80022d0:	ed85 9a08 	vstr	s18, [r5, #32]
    HAL_Delay(1);  // write out uart buffer
 80022d4:	2001      	movs	r0, #1
 80022d6:	f002 fe97 	bl	8005008 <HAL_Delay>
    for (int i = 0; i < 2; i++) {
 80022da:	f04f 0900 	mov.w	r9, #0
 80022de:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <encoderCalibrationMode+0x36c>)
 80022e0:	930e      	str	r3, [sp, #56]	; 0x38
 80022e2:	4c86      	ldr	r4, [pc, #536]	; (80024fc <encoderCalibrationMode+0x354>)
    float xy_field_ave_x[2] = {0}, xy_field_ave_y[2] = {0}, xy_field_offset_radian[2] = {0, 0};
 80022e4:	ed8d 9a12 	vstr	s18, [sp, #72]	; 0x48
 80022e8:	464b      	mov	r3, r9
 80022ea:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
    for (int i = 0; i < 2; i++) {
 80022ee:	46a9      	mov	r9, r5
 80022f0:	46da      	mov	sl, fp
 80022f2:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 80022f6:	461d      	mov	r5, r3
      p("Motor : %d\n", i);
 80022f8:	4887      	ldr	r0, [pc, #540]	; (8002518 <encoderCalibrationMode+0x370>)
 80022fa:	4629      	mov	r1, r5
 80022fc:	f002 fd94 	bl	8004e28 <p>
      p("CW X %+5.2f Y %+5.2f\n", calib[i].xy_field.result_cw_x, calib[i].xy_field.result_cw_y);
 8002300:	69e0      	ldr	r0, [r4, #28]
 8002302:	f7fe f921 	bl	8000548 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	6a20      	ldr	r0, [r4, #32]
 800230c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002310:	f7fe f91a 	bl	8000548 <__aeabi_f2d>
 8002314:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002318:	e9cd 0100 	strd	r0, r1, [sp]
 800231c:	487f      	ldr	r0, [pc, #508]	; (800251c <encoderCalibrationMode+0x374>)
 800231e:	f002 fd83 	bl	8004e28 <p>
      p("CCW X %+5.2f Y %+5.2f\n", calib[i].xy_field.result_ccw_x, calib[i].xy_field.result_ccw_y);
 8002322:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002324:	f7fe f910 	bl	8000548 <__aeabi_f2d>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800232e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002332:	f7fe f909 	bl	8000548 <__aeabi_f2d>
 8002336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800233a:	e9cd 0100 	strd	r0, r1, [sp]
 800233e:	4878      	ldr	r0, [pc, #480]	; (8002520 <encoderCalibrationMode+0x378>)
 8002340:	f002 fd72 	bl	8004e28 <p>
      p("CW rad %+5.2f\n", atan2(calib[i].xy_field.result_cw_y, calib[i].xy_field.result_cw_x));
 8002344:	69e0      	ldr	r0, [r4, #28]
 8002346:	f7fe f8ff 	bl	8000548 <__aeabi_f2d>
 800234a:	ec41 0b18 	vmov	d8, r0, r1
 800234e:	6a20      	ldr	r0, [r4, #32]
 8002350:	f7fe f8fa 	bl	8000548 <__aeabi_f2d>
 8002354:	eeb0 1a48 	vmov.f32	s2, s16
 8002358:	eef0 1a68 	vmov.f32	s3, s17
 800235c:	ec41 0b10 	vmov	d0, r0, r1
 8002360:	f006 ffb2 	bl	80092c8 <atan2>
 8002364:	486f      	ldr	r0, [pc, #444]	; (8002524 <encoderCalibrationMode+0x37c>)
 8002366:	ec53 2b10 	vmov	r2, r3, d0
 800236a:	f002 fd5d 	bl	8004e28 <p>
      p("CCW rad %+5.2f\n", atan2(calib[i].xy_field.result_ccw_y, calib[i].xy_field.result_ccw_x));
 800236e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002370:	f7fe f8ea 	bl	8000548 <__aeabi_f2d>
 8002374:	ec41 0b18 	vmov	d8, r0, r1
 8002378:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800237a:	f7fe f8e5 	bl	8000548 <__aeabi_f2d>
 800237e:	eeb0 1a48 	vmov.f32	s2, s16
 8002382:	eef0 1a68 	vmov.f32	s3, s17
 8002386:	ec41 0b10 	vmov	d0, r0, r1
 800238a:	f006 ff9d 	bl	80092c8 <atan2>
 800238e:	4866      	ldr	r0, [pc, #408]	; (8002528 <encoderCalibrationMode+0x380>)
 8002390:	ec53 2b10 	vmov	r2, r3, d0
 8002394:	f002 fd48 	bl	8004e28 <p>
      xy_field_ave_y[i] = calib[i].xy_field.result_cw_y + calib[i].xy_field.result_ccw_y;
 8002398:	ed94 7a08 	vldr	s14, [r4, #32]
 800239c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
      xy_field_offset_radian[i] = (2 * M_PI) - atan2(xy_field_ave_y[i], xy_field_ave_x[i]);
 80023a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a4:	ee17 0a90 	vmov	r0, s15
 80023a8:	f7fe f8ce 	bl	8000548 <__aeabi_f2d>
      xy_field_ave_x[i] = calib[i].xy_field.result_cw_x + calib[i].xy_field.result_ccw_x;
 80023ac:	ed94 7a07 	vldr	s14, [r4, #28]
 80023b0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
      xy_field_offset_radian[i] = (2 * M_PI) - atan2(xy_field_ave_y[i], xy_field_ave_x[i]);
 80023b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b8:	ec41 0b18 	vmov	d8, r0, r1
 80023bc:	ee17 0a90 	vmov	r0, s15
 80023c0:	f7fe f8c2 	bl	8000548 <__aeabi_f2d>
 80023c4:	eeb0 0a48 	vmov.f32	s0, s16
 80023c8:	eef0 0a68 	vmov.f32	s1, s17
 80023cc:	460b      	mov	r3, r1
 80023ce:	4602      	mov	r2, r0
 80023d0:	ec43 2b11 	vmov	d1, r2, r3
 80023d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80023d8:	f006 ff76 	bl	80092c8 <atan2>
 80023dc:	ec57 6b10 	vmov	r6, r7, d0
      p("CW+CCW X %+5.2f Y %+5.2f\n", xy_field_ave_x[i], xy_field_ave_y[i]);
 80023e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80023e4:	ed8d 8b00 	vstr	d8, [sp]
 80023e8:	4850      	ldr	r0, [pc, #320]	; (800252c <encoderCalibrationMode+0x384>)
 80023ea:	f002 fd1d 	bl	8004e28 <p>
      xy_field_offset_radian[i] = (2 * M_PI) - atan2(xy_field_ave_y[i], xy_field_ave_x[i]);
 80023ee:	4632      	mov	r2, r6
 80023f0:	463b      	mov	r3, r7
 80023f2:	a13f      	add	r1, pc, #252	; (adr r1, 80024f0 <encoderCalibrationMode+0x348>)
 80023f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023f8:	f7fd ff46 	bl	8000288 <__aeabi_dsub>
 80023fc:	f7fe fbf4 	bl	8000be8 <__aeabi_d2f>
      xy_field_offset_radian[i] += ROTATION_OFFSET_RADIAN;
 8002400:	ee07 0a10 	vmov	s14, r0
 8002404:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002408:	ee37 8a27 	vadd.f32	s16, s14, s15
      if (xy_field_offset_radian[i] > M_PI * 2) {
 800240c:	ee18 0a10 	vmov	r0, s16
 8002410:	f7fe f89a 	bl	8000548 <__aeabi_f2d>
 8002414:	a336      	add	r3, pc, #216	; (adr r3, 80024f0 <encoderCalibrationMode+0x348>)
 8002416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241a:	4606      	mov	r6, r0
 800241c:	460f      	mov	r7, r1
 800241e:	f7fe fb7b 	bl	8000b18 <__aeabi_dcmpgt>
 8002422:	2800      	cmp	r0, #0
 8002424:	f040 808e 	bne.w	8002544 <encoderCalibrationMode+0x39c>
      xy_field_offset_radian[i] += ROTATION_OFFSET_RADIAN;
 8002428:	ed88 8a00 	vstr	s16, [r8]
      if (xy_field_offset_radian[i] < 0) {
 800242c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002434:	d510      	bpl.n	8002458 <encoderCalibrationMode+0x2b0>
        xy_field_offset_radian[i] += M_PI * 2;
 8002436:	a32e      	add	r3, pc, #184	; (adr r3, 80024f0 <encoderCalibrationMode+0x348>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	4630      	mov	r0, r6
 800243e:	4639      	mov	r1, r7
 8002440:	f7fd ff24 	bl	800028c <__adddf3>
 8002444:	f7fe fbd0 	bl	8000be8 <__aeabi_d2f>
 8002448:	ee08 0a10 	vmov	s16, r0
 800244c:	f8c8 0000 	str.w	r0, [r8]
      p("Rad M0 %+5.2f\n\n", xy_field_offset_radian[i]);
 8002450:	f7fe f87a 	bl	8000548 <__aeabi_f2d>
 8002454:	4606      	mov	r6, r0
 8002456:	460f      	mov	r7, r1
 8002458:	4632      	mov	r2, r6
 800245a:	463b      	mov	r3, r7
 800245c:	4834      	ldr	r0, [pc, #208]	; (8002530 <encoderCalibrationMode+0x388>)
 800245e:	f002 fce3 	bl	8004e28 <p>
      flash.calib[i] = enc_offset[i].zero_calib;
 8002462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 8002464:	ed8a 8a01 	vstr	s16, [sl, #4]
      calib[i].result_cw_cnt = 0;
 8002468:	2600      	movs	r6, #0
      flash.calib[i] = enc_offset[i].zero_calib;
 800246a:	eca3 8a01 	vstmia	r3!, {s16}
      calib[i].result_cw_cnt = 0;
 800246e:	60a6      	str	r6, [r4, #8]
      cmd[i].out_v_final = 0;
 8002470:	ed89 9a03 	vstr	s18, [r9, #12]
      calib[i].ave_cnt = 0;
 8002474:	f844 6b2c 	str.w	r6, [r4], #44
    for (int i = 0; i < 2; i++) {
 8002478:	f108 0804 	add.w	r8, r8, #4
      flash.calib[i] = enc_offset[i].zero_calib;
 800247c:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < 2; i++) {
 800247e:	f10a 0a08 	add.w	sl, sl, #8
 8002482:	f109 0914 	add.w	r9, r9, #20
 8002486:	2d00      	cmp	r5, #0
 8002488:	d06e      	beq.n	8002568 <encoderCalibrationMode+0x3c0>
    writeEncCalibrationValue(enc_offset[0].zero_calib, enc_offset[1].zero_calib);
 800248a:	eddb 0a03 	vldr	s1, [fp, #12]
 800248e:	ed9b 0a01 	vldr	s0, [fp, #4]
 8002492:	f7ff f92d 	bl	80016f0 <writeEncCalibrationValue>
      flash.calib[i] = xy_field_offset_radian[i];
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <encoderCalibrationMode+0x36c>)
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 8002498:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800249a:	9812      	ldr	r0, [sp, #72]	; 0x48
      flash.calib[i] = xy_field_offset_radian[i];
 800249c:	6018      	str	r0, [r3, #0]
 800249e:	605c      	str	r4, [r3, #4]
    manual_offset_radian = 0;  // 割り込みの中で加算してしまうので,enc_calib_cnt = 0にしてからでないといけない
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <encoderCalibrationMode+0x38c>)
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 80024a2:	f8cb 400c 	str.w	r4, [fp, #12]
    manual_offset_radian = 0;  // 割り込みの中で加算してしまうので,enc_calib_cnt = 0にしてからでないといけない
 80024a6:	ed83 9a00 	vstr	s18, [r3]
    calib_process.motor_calib_mode = 0;
 80024aa:	4b23      	ldr	r3, [pc, #140]	; (8002538 <encoderCalibrationMode+0x390>)
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 80024ac:	f8cb 0004 	str.w	r0, [fp, #4]
    calib_process.motor_calib_mode = 0;
 80024b0:	609e      	str	r6, [r3, #8]
    calib_process.enc_calib_cnt = 0;
 80024b2:	2701      	movs	r7, #1
 80024b4:	2600      	movs	r6, #0
 80024b6:	e9c3 6700 	strd	r6, r7, [r3]
    p("calib %+5.2f %+5.2f", enc_offset[0].zero_calib, enc_offset[1].zero_calib);
 80024ba:	f7fe f845 	bl	8000548 <__aeabi_f2d>
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4620      	mov	r0, r4
 80024c4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80024c8:	f7fe f83e 	bl	8000548 <__aeabi_f2d>
 80024cc:	4604      	mov	r4, r0
 80024ce:	460d      	mov	r5, r1
 80024d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80024d4:	e9cd 4500 	strd	r4, r5, [sp]
 80024d8:	4818      	ldr	r0, [pc, #96]	; (800253c <encoderCalibrationMode+0x394>)
 80024da:	f002 fca5 	bl	8004e28 <p>
    HAL_Delay(900);
 80024de:	f44f 7061 	mov.w	r0, #900	; 0x384
}
 80024e2:	b015      	add	sp, #84	; 0x54
 80024e4:	ecbd 8b0e 	vpop	{d8-d14}
 80024e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(900);
 80024ec:	f002 bd8c 	b.w	8005008 <HAL_Delay>
 80024f0:	54442d18 	.word	0x54442d18
 80024f4:	401921fb 	.word	0x401921fb
 80024f8:	200003c8 	.word	0x200003c8
 80024fc:	2000035c 	.word	0x2000035c
 8002500:	20000000 	.word	0x20000000
 8002504:	20000588 	.word	0x20000588
 8002508:	0800d6dc 	.word	0x0800d6dc
 800250c:	00000000 	.word	0x00000000
 8002510:	200003f4 	.word	0x200003f4
 8002514:	20000340 	.word	0x20000340
 8002518:	0800d734 	.word	0x0800d734
 800251c:	0800d77c 	.word	0x0800d77c
 8002520:	0800d740 	.word	0x0800d740
 8002524:	0800d758 	.word	0x0800d758
 8002528:	0800d768 	.word	0x0800d768
 800252c:	0800d778 	.word	0x0800d778
 8002530:	0800d794 	.word	0x0800d794
 8002534:	20000448 	.word	0x20000448
 8002538:	200003b8 	.word	0x200003b8
 800253c:	0800d7a4 	.word	0x0800d7a4
 8002540:	2000041c 	.word	0x2000041c
        xy_field_offset_radian[i] -= M_PI * 2;
 8002544:	a30a      	add	r3, pc, #40	; (adr r3, 8002570 <encoderCalibrationMode+0x3c8>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	4630      	mov	r0, r6
 800254c:	4639      	mov	r1, r7
 800254e:	f7fd fe9b 	bl	8000288 <__aeabi_dsub>
 8002552:	f7fe fb49 	bl	8000be8 <__aeabi_d2f>
 8002556:	ee08 0a10 	vmov	s16, r0
 800255a:	f8c8 0000 	str.w	r0, [r8]
        xy_field_offset_radian[i] += M_PI * 2;
 800255e:	f7fd fff3 	bl	8000548 <__aeabi_f2d>
 8002562:	4606      	mov	r6, r0
 8002564:	460f      	mov	r7, r1
 8002566:	e761      	b.n	800242c <encoderCalibrationMode+0x284>
 8002568:	2501      	movs	r5, #1
 800256a:	e6c5      	b.n	80022f8 <encoderCalibrationMode+0x150>
 800256c:	f3af 8000 	nop.w
 8002570:	54442d18 	.word	0x54442d18
 8002574:	401921fb 	.word	0x401921fb

08002578 <motorCalibrationMode>:
{
 8002578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (calib_process.motor_calib_cnt > 1) {
 800257c:	f8df 932c 	ldr.w	r9, [pc, #812]	; 80028ac <motorCalibrationMode+0x334>
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 8002580:	4bbc      	ldr	r3, [pc, #752]	; (8002874 <motorCalibrationMode+0x2fc>)
  if (calib_process.motor_calib_cnt > 1) {
 8002582:	f8d9 4004 	ldr.w	r4, [r9, #4]
{
 8002586:	ed2d 8b02 	vpush	{d8}
  if (calib_process.motor_calib_cnt > 1) {
 800258a:	2c01      	cmp	r4, #1
{
 800258c:	b085      	sub	sp, #20
  if (calib_process.motor_calib_cnt > 1) {
 800258e:	f240 80a9 	bls.w	80026e4 <motorCalibrationMode+0x16c>
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 8002592:	ed93 8a00 	vldr	s16, [r3]
    calib_process.motor_calib_cnt--;
 8002596:	3c01      	subs	r4, #1
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 8002598:	ee18 0a10 	vmov	r0, s16
    calib_process.motor_calib_cnt--;
 800259c:	f8c9 4004 	str.w	r4, [r9, #4]
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 80025a0:	f7fd ffd2 	bl	8000548 <__aeabi_f2d>
 80025a4:	4bb4      	ldr	r3, [pc, #720]	; (8002878 <motorCalibrationMode+0x300>)
        cmd[i].out_v = calib_process.motor_calib_voltage;
 80025a6:	edd9 8a03 	vldr	s17, [r9, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f7fd fe6c 	bl	8000288 <__aeabi_dsub>
    if (calib_process.motor_calib_cnt > 1) {
 80025b0:	2c01      	cmp	r4, #1
 80025b2:	4606      	mov	r6, r0
 80025b4:	460f      	mov	r7, r1
 80025b6:	f000 81f4 	beq.w	80029a2 <motorCalibrationMode+0x42a>
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_START_CNT) {
 80025ba:	f240 53db 	movw	r3, #1499	; 0x5db
 80025be:	429c      	cmp	r4, r3
 80025c0:	d93f      	bls.n	8002642 <motorCalibrationMode+0xca>
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_READY_CNT) {
 80025c2:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80025c6:	d346      	bcc.n	8002656 <motorCalibrationMode+0xde>
      cmd[i].out_v = 0;
 80025c8:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 80028b0 <motorCalibrationMode+0x338>
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c8 3008 	str.w	r3, [r8, #8]
  cmd[motor].out_v_final = cmd[motor].out_v;
 80025d2:	f8c8 300c 	str.w	r3, [r8, #12]
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80025d6:	4da9      	ldr	r5, [pc, #676]	; (800287c <motorCalibrationMode+0x304>)
 80025d8:	edd5 7a01 	vldr	s15, [r5, #4]
 80025dc:	ee78 7a27 	vadd.f32	s15, s16, s15
    if (calib_process.motor_calib_cnt > 1) {
 80025e0:	2c01      	cmp	r4, #1
 80025e2:	edc5 7a00 	vstr	s15, [r5]
 80025e6:	d953      	bls.n	8002690 <motorCalibrationMode+0x118>
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_START_CNT) {
 80025e8:	f240 53db 	movw	r3, #1499	; 0x5db
 80025ec:	429c      	cmp	r4, r3
 80025ee:	d86c      	bhi.n	80026ca <motorCalibrationMode+0x152>
        calib[i].rps_integral += motor_real[i].rps;
 80025f0:	4ba3      	ldr	r3, [pc, #652]	; (8002880 <motorCalibrationMode+0x308>)
 80025f2:	4aa4      	ldr	r2, [pc, #656]	; (8002884 <motorCalibrationMode+0x30c>)
 80025f4:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80025f8:	edd2 7a07 	vldr	s15, [r2, #28]
 80025fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002600:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
        cmd[i].out_v = calib_process.motor_calib_voltage;
 8002604:	eef0 7a68 	vmov.f32	s15, s17
  if (cmd[motor].out_v_final < 0) {
 8002608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        cmd[i].out_v = calib_process.motor_calib_voltage;
 8002610:	edc8 8a07 	vstr	s17, [r8, #28]
  cmd[motor].out_v_final = cmd[motor].out_v;
 8002614:	edc8 7a08 	vstr	s15, [r8, #32]
  if (cmd[motor].out_v_final < 0) {
 8002618:	d544      	bpl.n	80026a4 <motorCalibrationMode+0x12c>
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 800261a:	68e8      	ldr	r0, [r5, #12]
 800261c:	f7fd ff94 	bl	8000548 <__aeabi_f2d>
 8002620:	4632      	mov	r2, r6
 8002622:	463b      	mov	r3, r7
 8002624:	f7fd fe32 	bl	800028c <__adddf3>
 8002628:	f7fe fade 	bl	8000be8 <__aeabi_d2f>
 800262c:	ee08 0a10 	vmov	s16, r0
  if (calib_process.motor_calib_cnt == 1) {
 8002630:	2c01      	cmp	r4, #1
 8002632:	ed85 8a02 	vstr	s16, [r5, #8]
 8002636:	d03d      	beq.n	80026b4 <motorCalibrationMode+0x13c>
}
 8002638:	b005      	add	sp, #20
 800263a:	ecbd 8b02 	vpop	{d8}
 800263e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        calib[i].rps_integral += motor_real[i].rps;
 8002642:	4b8f      	ldr	r3, [pc, #572]	; (8002880 <motorCalibrationMode+0x308>)
 8002644:	4a8f      	ldr	r2, [pc, #572]	; (8002884 <motorCalibrationMode+0x30c>)
 8002646:	ed93 7a04 	vldr	s14, [r3, #16]
 800264a:	edd2 7a02 	vldr	s15, [r2, #8]
 800264e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002652:	edc3 7a04 	vstr	s15, [r3, #16]
        cmd[i].out_v = calib_process.motor_calib_voltage;
 8002656:	f8df 8258 	ldr.w	r8, [pc, #600]	; 80028b0 <motorCalibrationMode+0x338>
 800265a:	eef0 7a68 	vmov.f32	s15, s17
 800265e:	edc8 8a02 	vstr	s17, [r8, #8]
  if (cmd[motor].out_v_final < 0) {
 8002662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  cmd[motor].out_v_final = cmd[motor].out_v;
 800266a:	edc8 7a03 	vstr	s15, [r8, #12]
  if (cmd[motor].out_v_final < 0) {
 800266e:	d5b2      	bpl.n	80025d6 <motorCalibrationMode+0x5e>
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 8002670:	4d82      	ldr	r5, [pc, #520]	; (800287c <motorCalibrationMode+0x304>)
 8002672:	6868      	ldr	r0, [r5, #4]
 8002674:	f7fd ff68 	bl	8000548 <__aeabi_f2d>
 8002678:	4632      	mov	r2, r6
 800267a:	463b      	mov	r3, r7
 800267c:	f7fd fe06 	bl	800028c <__adddf3>
 8002680:	f7fe fab2 	bl	8000be8 <__aeabi_d2f>
 8002684:	ee07 0a90 	vmov	s15, r0
    if (calib_process.motor_calib_cnt > 1) {
 8002688:	2c01      	cmp	r4, #1
 800268a:	edc5 7a00 	vstr	s15, [r5]
 800268e:	d8ab      	bhi.n	80025e8 <motorCalibrationMode+0x70>
    } else if (calib_process.motor_calib_cnt == 1) {
 8002690:	d01e      	beq.n	80026d0 <motorCalibrationMode+0x158>
  cmd[motor].out_v_final = cmd[motor].out_v;
 8002692:	edd8 7a07 	vldr	s15, [r8, #28]
  if (cmd[motor].out_v_final < 0) {
 8002696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  cmd[motor].out_v_final = cmd[motor].out_v;
 800269e:	edc8 7a08 	vstr	s15, [r8, #32]
  if (cmd[motor].out_v_final < 0) {
 80026a2:	d4ba      	bmi.n	800261a <motorCalibrationMode+0xa2>
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80026a4:	edd5 7a03 	vldr	s15, [r5, #12]
 80026a8:	ee38 8a27 	vadd.f32	s16, s16, s15
  if (calib_process.motor_calib_cnt == 1) {
 80026ac:	2c01      	cmp	r4, #1
 80026ae:	ed85 8a02 	vstr	s16, [r5, #8]
 80026b2:	d1c1      	bne.n	8002638 <motorCalibrationMode+0xc0>
    switch (calib_process.motor_calib_mode) {
 80026b4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	f200 8174 	bhi.w	80029a6 <motorCalibrationMode+0x42e>
 80026be:	e8df f013 	tbh	[pc, r3, lsl #1]
 80026c2:	014b      	.short	0x014b
 80026c4:	007300f9 	.word	0x007300f9
 80026c8:	0028      	.short	0x0028
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_READY_CNT) {
 80026ca:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 80026ce:	d399      	bcc.n	8002604 <motorCalibrationMode+0x8c>
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80026d0:	edd5 7a03 	vldr	s15, [r5, #12]
      cmd[i].out_v = 0;
 80026d4:	2300      	movs	r3, #0
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80026d6:	ee38 8a27 	vadd.f32	s16, s16, s15
      cmd[i].out_v = 0;
 80026da:	f8c8 301c 	str.w	r3, [r8, #28]
  cmd[motor].out_v_final = cmd[motor].out_v;
 80026de:	f8c8 3020 	str.w	r3, [r8, #32]
    enc_offset[motor].final = enc_offset[motor].zero_calib + manual_offset_radian;
 80026e2:	e7e3      	b.n	80026ac <motorCalibrationMode+0x134>
 80026e4:	ed93 8a00 	vldr	s16, [r3]
        cmd[i].out_v = calib_process.motor_calib_voltage;
 80026e8:	edd9 8a03 	vldr	s17, [r9, #12]
    enc_offset[motor].final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset[motor].zero_calib + manual_offset_radian;
 80026ec:	ee18 0a10 	vmov	r0, s16
 80026f0:	f7fd ff2a 	bl	8000548 <__aeabi_f2d>
 80026f4:	4b60      	ldr	r3, [pc, #384]	; (8002878 <motorCalibrationMode+0x300>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	f7fd fdc6 	bl	8000288 <__aeabi_dsub>
    } else if (calib_process.motor_calib_cnt == 1) {
 80026fc:	2c01      	cmp	r4, #1
 80026fe:	4606      	mov	r6, r0
 8002700:	460f      	mov	r7, r1
 8002702:	f000 814e 	beq.w	80029a2 <motorCalibrationMode+0x42a>
  cmd[motor].out_v_final = cmd[motor].out_v;
 8002706:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80028b0 <motorCalibrationMode+0x338>
 800270a:	2400      	movs	r4, #0
 800270c:	edd8 7a02 	vldr	s15, [r8, #8]
 8002710:	e7a7      	b.n	8002662 <motorCalibrationMode+0xea>
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002712:	4b5b      	ldr	r3, [pc, #364]	; (8002880 <motorCalibrationMode+0x308>)
 8002714:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002888 <motorCalibrationMode+0x310>
 8002718:	ed93 7a04 	vldr	s14, [r3, #16]
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 800271c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002720:	4c5a      	ldr	r4, [pc, #360]	; (800288c <motorCalibrationMode+0x314>)
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002722:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002726:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 800272a:	ee87 8aa8 	vdiv.f32	s16, s15, s17
        calib[0].rps_integral = 0;
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]
        calib[1].rps_integral = 0;
 8002732:	63da      	str	r2, [r3, #60]	; 0x3c
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002734:	eec7 6a28 	vdiv.f32	s13, s14, s17
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002738:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_h[0], rps_per_v_cw_h[1]);
 800273c:	ee16 0a90 	vmov	r0, s13
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002740:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_h[0], rps_per_v_cw_h[1]);
 8002744:	f7fd ff00 	bl	8000548 <__aeabi_f2d>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	ee18 0a10 	vmov	r0, s16
 8002750:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002754:	f7fd fef8 	bl	8000548 <__aeabi_f2d>
 8002758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800275c:	e9cd 0100 	strd	r0, r1, [sp]
 8002760:	484b      	ldr	r0, [pc, #300]	; (8002890 <motorCalibrationMode+0x318>)
 8002762:	f002 fb61 	bl	8004e28 <p>
        if (checkMotorRpsError(rps_per_v_cw_h[0], rps_per_v_cw_h[1])) {
 8002766:	edd4 6a00 	vldr	s13, [r4]
 800276a:	ed94 6a01 	vldr	s12, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 800276e:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8002772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002776:	eef0 7ae7 	vabs.f32	s15, s15
 800277a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002782:	f300 8107 	bgt.w	8002994 <motorCalibrationMode+0x41c>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002786:	eef4 6ac7 	vcmpe.f32	s13, s14
 800278a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278e:	f100 8177 	bmi.w	8002a80 <motorCalibrationMode+0x508>
        calib_process.motor_calib_mode++;
 8002792:	f8d9 3008 	ldr.w	r3, [r9, #8]
        calib_process.motor_calib_voltage = -MOTOR_CALIB_VOLTAGE_HIGH;
 8002796:	493f      	ldr	r1, [pc, #252]	; (8002894 <motorCalibrationMode+0x31c>)
        calib_process.motor_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002798:	f640 12c4 	movw	r2, #2500	; 0x9c4
        calib_process.motor_calib_mode++;
 800279c:	3302      	adds	r3, #2
 800279e:	e9c9 2301 	strd	r2, r3, [r9, #4]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <motorCalibrationMode+0x320>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	e0cd      	b.n	8002944 <motorCalibrationMode+0x3cc>
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027a8:	4b35      	ldr	r3, [pc, #212]	; (8002880 <motorCalibrationMode+0x308>)
 80027aa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002888 <motorCalibrationMode+0x310>
 80027ae:	ed93 7a04 	vldr	s14, [r3, #16]
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027b2:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027b6:	4c39      	ldr	r4, [pc, #228]	; (800289c <motorCalibrationMode+0x324>)
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027bc:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027c0:	ee87 8aa8 	vdiv.f32	s16, s15, s17
        calib[0].rps_integral = 0;
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
        calib[1].rps_integral = 0;
 80027c8:	63da      	str	r2, [r3, #60]	; 0x3c
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027ca:	eec7 6a28 	vdiv.f32	s13, s14, s17
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027ce:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_l[0], rps_per_v_ccw_l[1]);
 80027d2:	ee16 0a90 	vmov	r0, s13
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027d6:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_l[0], rps_per_v_ccw_l[1]);
 80027da:	f7fd feb5 	bl	8000548 <__aeabi_f2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	ee18 0a10 	vmov	r0, s16
 80027e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027ea:	f7fd fead 	bl	8000548 <__aeabi_f2d>
 80027ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80027f2:	e9cd 0100 	strd	r0, r1, [sp]
 80027f6:	4826      	ldr	r0, [pc, #152]	; (8002890 <motorCalibrationMode+0x318>)
 80027f8:	f002 fb16 	bl	8004e28 <p>
        if (checkMotorRpsError(rps_per_v_ccw_l[0], rps_per_v_ccw_l[1])) {
 80027fc:	ed94 7a00 	vldr	s14, [r4]
 8002800:	ed94 6a01 	vldr	s12, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 8002804:	ee77 7a46 	vsub.f32	s15, s14, s12
 8002808:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800280c:	eef0 7ae7 	vabs.f32	s15, s15
 8002810:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002818:	f300 80bc 	bgt.w	8002994 <motorCalibrationMode+0x41c>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 800281c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002824:	f100 8125 	bmi.w	8002a72 <motorCalibrationMode+0x4fa>
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_l[0], rps_per_v_cw_l[1], rps_per_v_ccw_l[0], rps_per_v_ccw_l[1])) {
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <motorCalibrationMode+0x328>)
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 800282a:	edd3 7a00 	vldr	s15, [r3]
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_l[0], rps_per_v_cw_l[1], rps_per_v_ccw_l[0], rps_per_v_ccw_l[1])) {
 800282e:	edd3 6a01 	vldr	s13, [r3, #4]
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 8002832:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002836:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800283a:	eef0 7ae7 	vabs.f32	s15, s15
 800283e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	f300 810d 	bgt.w	8002a64 <motorCalibrationMode+0x4ec>
 800284a:	ee76 7ac6 	vsub.f32	s15, s13, s12
 800284e:	eef0 7ae7 	vabs.f32	s15, s15
 8002852:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800285a:	f300 8103 	bgt.w	8002a64 <motorCalibrationMode+0x4ec>
        calib_process.motor_calib_mode++;
 800285e:	f8d9 3008 	ldr.w	r3, [r9, #8]
        calib_process.motor_calib_voltage = MOTOR_CALIB_VOLTAGE_HIGH;
 8002862:	4910      	ldr	r1, [pc, #64]	; (80028a4 <motorCalibrationMode+0x32c>)
        calib_process.motor_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002864:	f640 12c4 	movw	r2, #2500	; 0x9c4
        calib_process.motor_calib_mode++;
 8002868:	3301      	adds	r3, #1
 800286a:	e9c9 2301 	strd	r2, r3, [r9, #4]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <motorCalibrationMode+0x330>)
 8002870:	2200      	movs	r2, #0
 8002872:	e067      	b.n	8002944 <motorCalibrationMode+0x3cc>
 8002874:	20000448 	.word	0x20000448
 8002878:	40100000 	.word	0x40100000
 800287c:	2000041c 	.word	0x2000041c
 8002880:	2000035c 	.word	0x2000035c
 8002884:	2000045c 	.word	0x2000045c
 8002888:	3a2ec33e 	.word	0x3a2ec33e
 800288c:	20000500 	.word	0x20000500
 8002890:	0800d830 	.word	0x0800d830
 8002894:	c0a00000 	.word	0xc0a00000
 8002898:	c0140000 	.word	0xc0140000
 800289c:	200004f8 	.word	0x200004f8
 80028a0:	20000508 	.word	0x20000508
 80028a4:	40a00000 	.word	0x40a00000
 80028a8:	40140000 	.word	0x40140000
 80028ac:	200003b8 	.word	0x200003b8
 80028b0:	200003f4 	.word	0x200003f4
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028b4:	4b96      	ldr	r3, [pc, #600]	; (8002b10 <motorCalibrationMode+0x598>)
 80028b6:	eddf 6a97 	vldr	s13, [pc, #604]	; 8002b14 <motorCalibrationMode+0x59c>
 80028ba:	ed93 7a04 	vldr	s14, [r3, #16]
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028be:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028c2:	4c95      	ldr	r4, [pc, #596]	; (8002b18 <motorCalibrationMode+0x5a0>)
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028c8:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028cc:	ee87 8aa8 	vdiv.f32	s16, s15, s17
        calib[0].rps_integral = 0;
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
        calib[1].rps_integral = 0;
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028d6:	eec7 6a28 	vdiv.f32	s13, s14, s17
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028da:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_l[0], rps_per_v_cw_l[1]);
 80028de:	ee16 0a90 	vmov	r0, s13
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80028e2:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_l[0], rps_per_v_cw_l[1]);
 80028e6:	f7fd fe2f 	bl	8000548 <__aeabi_f2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	ee18 0a10 	vmov	r0, s16
 80028f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028f6:	f7fd fe27 	bl	8000548 <__aeabi_f2d>
 80028fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028fe:	e9cd 0100 	strd	r0, r1, [sp]
 8002902:	4886      	ldr	r0, [pc, #536]	; (8002b1c <motorCalibrationMode+0x5a4>)
 8002904:	f002 fa90 	bl	8004e28 <p>
        if (checkMotorRpsError(rps_per_v_cw_l[0], rps_per_v_cw_l[1])) {
 8002908:	edd4 6a00 	vldr	s13, [r4]
 800290c:	ed94 6a01 	vldr	s12, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 8002910:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8002914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002918:	eef0 7ae7 	vabs.f32	s15, s15
 800291c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002924:	dc36      	bgt.n	8002994 <motorCalibrationMode+0x41c>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002926:	eef4 6ac7 	vcmpe.f32	s13, s14
 800292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292e:	d42c      	bmi.n	800298a <motorCalibrationMode+0x412>
        calib_process.motor_calib_mode++;
 8002930:	f8d9 3008 	ldr.w	r3, [r9, #8]
        calib_process.motor_calib_voltage = -MOTOR_CALIB_VOLTAGE_LOW;
 8002934:	497a      	ldr	r1, [pc, #488]	; (8002b20 <motorCalibrationMode+0x5a8>)
        calib_process.motor_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002936:	f640 12c4 	movw	r2, #2500	; 0x9c4
        calib_process.motor_calib_mode++;
 800293a:	3301      	adds	r3, #1
 800293c:	e9c9 2301 	strd	r2, r3, [r9, #4]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002940:	4b78      	ldr	r3, [pc, #480]	; (8002b24 <motorCalibrationMode+0x5ac>)
 8002942:	2200      	movs	r2, #0
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002944:	4878      	ldr	r0, [pc, #480]	; (8002b28 <motorCalibrationMode+0x5b0>)
        calib_process.motor_calib_voltage = -MOTOR_CALIB_VOLTAGE_HIGH;
 8002946:	f8c9 100c 	str.w	r1, [r9, #12]
}
 800294a:	b005      	add	sp, #20
 800294c:	ecbd 8b02 	vpop	{d8}
 8002950:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002954:	f002 ba68 	b.w	8004e28 <p>
        p("\n\nstart motor calib!!\n\n");
 8002958:	4874      	ldr	r0, [pc, #464]	; (8002b2c <motorCalibrationMode+0x5b4>)
 800295a:	f002 fa65 	bl	8004e28 <p>
        calib_process.motor_calib_mode = 1;
 800295e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002962:	2301      	movs	r3, #1
 8002964:	e9c9 2301 	strd	r2, r3, [r9, #4]
        calib_process.motor_calib_voltage = MOTOR_CALIB_VOLTAGE_LOW;
 8002968:	4b71      	ldr	r3, [pc, #452]	; (8002b30 <motorCalibrationMode+0x5b8>)
        calib[0].rps_integral = 0;
 800296a:	4969      	ldr	r1, [pc, #420]	; (8002b10 <motorCalibrationMode+0x598>)
        calib_process.motor_calib_voltage = MOTOR_CALIB_VOLTAGE_LOW;
 800296c:	f8c9 300c 	str.w	r3, [r9, #12]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002970:	486d      	ldr	r0, [pc, #436]	; (8002b28 <motorCalibrationMode+0x5b0>)
 8002972:	4b70      	ldr	r3, [pc, #448]	; (8002b34 <motorCalibrationMode+0x5bc>)
        calib[0].rps_integral = 0;
 8002974:	2400      	movs	r4, #0
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002976:	2200      	movs	r2, #0
        calib[0].rps_integral = 0;
 8002978:	610c      	str	r4, [r1, #16]
        calib[1].rps_integral = 0;
 800297a:	63cc      	str	r4, [r1, #60]	; 0x3c
}
 800297c:	b005      	add	sp, #20
 800297e:	ecbd 8b02 	vpop	{d8}
 8002982:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002986:	f002 ba4f 	b.w	8004e28 <p>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 800298a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	d5cd      	bpl.n	8002930 <motorCalibrationMode+0x3b8>
    p("\n\nCALIBRATION ERROR!!!\n\n");
 8002994:	4868      	ldr	r0, [pc, #416]	; (8002b38 <motorCalibrationMode+0x5c0>)
 8002996:	f002 fa47 	bl	8004e28 <p>
    calib_process.motor_calib_cnt = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c9 3004 	str.w	r3, [r9, #4]
    return true;
 80029a0:	e64a      	b.n	8002638 <motorCalibrationMode+0xc0>
{
 80029a2:	2401      	movs	r4, #1
 80029a4:	e610      	b.n	80025c8 <motorCalibrationMode+0x50>
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80029a6:	4b5a      	ldr	r3, [pc, #360]	; (8002b10 <motorCalibrationMode+0x598>)
 80029a8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8002b14 <motorCalibrationMode+0x59c>
 80029ac:	ed93 7a04 	vldr	s14, [r3, #16]
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80029b0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80029b4:	4c61      	ldr	r4, [pc, #388]	; (8002b3c <motorCalibrationMode+0x5c4>)
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80029b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80029ba:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80029be:	ee87 8aa8 	vdiv.f32	s16, s15, s17
        calib[0].rps_integral = 0;
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
        calib[1].rps_integral = 0;
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80029c8:	eec7 6a28 	vdiv.f32	s13, s14, s17
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80029cc:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_h[0], rps_per_v_ccw_h[1]);
 80029d0:	ee16 0a90 	vmov	r0, s13
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80029d4:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_h[0], rps_per_v_ccw_h[1]);
 80029d8:	f7fd fdb6 	bl	8000548 <__aeabi_f2d>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	ee18 0a10 	vmov	r0, s16
 80029e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80029e8:	f7fd fdae 	bl	8000548 <__aeabi_f2d>
 80029ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80029f0:	e9cd 0100 	strd	r0, r1, [sp]
 80029f4:	4849      	ldr	r0, [pc, #292]	; (8002b1c <motorCalibrationMode+0x5a4>)
 80029f6:	f002 fa17 	bl	8004e28 <p>
        p("\n\n!!!!!!FINISH!!!!!!!!\n\n");
 80029fa:	4851      	ldr	r0, [pc, #324]	; (8002b40 <motorCalibrationMode+0x5c8>)
 80029fc:	f002 fa14 	bl	8004e28 <p>
        if (checkMotorRpsError(rps_per_v_ccw_h[0], rps_per_v_ccw_h[1])) {
 8002a00:	ed94 6a00 	vldr	s12, [r4]
 8002a04:	edd4 6a01 	vldr	s13, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 8002a08:	ee36 7a66 	vsub.f32	s14, s12, s13
 8002a0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002a10:	eeb0 7ac7 	vabs.f32	s14, s14
 8002a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1c:	dcba      	bgt.n	8002994 <motorCalibrationMode+0x41c>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002a1e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	d504      	bpl.n	8002a32 <motorCalibrationMode+0x4ba>
 8002a28:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	d4b0      	bmi.n	8002994 <motorCalibrationMode+0x41c>
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_h[0], rps_per_v_cw_h[1], rps_per_v_ccw_h[0], rps_per_v_ccw_h[1])) {
 8002a32:	4b44      	ldr	r3, [pc, #272]	; (8002b44 <motorCalibrationMode+0x5cc>)
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 8002a34:	ed93 7a00 	vldr	s14, [r3]
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_h[0], rps_per_v_cw_h[1], rps_per_v_ccw_h[0], rps_per_v_ccw_h[1])) {
 8002a38:	edd3 7a01 	vldr	s15, [r3, #4]
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 8002a3c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8002a40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002a44:	eeb0 7ac7 	vabs.f32	s14, s14
 8002a48:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8002a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a50:	dc08      	bgt.n	8002a64 <motorCalibrationMode+0x4ec>
 8002a52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002a56:	eef0 7ae7 	vabs.f32	s15, s15
 8002a5a:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a62:	dd14      	ble.n	8002a8e <motorCalibrationMode+0x516>
    p("\n\nCALIBRATION ERROR!!! CW-CCW PARAM UNMATCH\n\n");
 8002a64:	4838      	ldr	r0, [pc, #224]	; (8002b48 <motorCalibrationMode+0x5d0>)
 8002a66:	f002 f9df 	bl	8004e28 <p>
    calib_process.motor_calib_cnt = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c9 3004 	str.w	r3, [r9, #4]
    return true;
 8002a70:	e5e2      	b.n	8002638 <motorCalibrationMode+0xc0>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002a72:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	f57f aed5 	bpl.w	8002828 <motorCalibrationMode+0x2b0>
 8002a7e:	e789      	b.n	8002994 <motorCalibrationMode+0x41c>
 8002a80:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a88:	f57f ae83 	bpl.w	8002792 <motorCalibrationMode+0x21a>
 8002a8c:	e782      	b.n	8002994 <motorCalibrationMode+0x41c>
        p("save calib result...\n");
 8002a8e:	482f      	ldr	r0, [pc, #188]	; (8002b4c <motorCalibrationMode+0x5d4>)
        p("enc data : %4.2f %4.2f\n", flash.calib[0], flash.calib[1]);
 8002a90:	4c2f      	ldr	r4, [pc, #188]	; (8002b50 <motorCalibrationMode+0x5d8>)
        p("save calib result...\n");
 8002a92:	f002 f9c9 	bl	8004e28 <p>
        writeMotorCalibrationValue(rps_per_v_cw_l[0], rps_per_v_cw_l[1]);
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <motorCalibrationMode+0x5a0>)
 8002a98:	edd3 0a01 	vldr	s1, [r3, #4]
 8002a9c:	ed93 0a00 	vldr	s0, [r3]
 8002aa0:	f7fe fe30 	bl	8001704 <writeMotorCalibrationValue>
        HAL_Delay(10);
 8002aa4:	200a      	movs	r0, #10
 8002aa6:	f002 faaf 	bl	8005008 <HAL_Delay>
        p("enc data : %4.2f %4.2f\n", flash.calib[0], flash.calib[1]);
 8002aaa:	6820      	ldr	r0, [r4, #0]
 8002aac:	f7fd fd4c 	bl	8000548 <__aeabi_f2d>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	6860      	ldr	r0, [r4, #4]
 8002ab6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002aba:	f7fd fd45 	bl	8000548 <__aeabi_f2d>
 8002abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ac2:	e9cd 0100 	strd	r0, r1, [sp]
 8002ac6:	4823      	ldr	r0, [pc, #140]	; (8002b54 <motorCalibrationMode+0x5dc>)
 8002ac8:	f002 f9ae 	bl	8004e28 <p>
        p("motor data : %4.2f %4.2f\n", flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]);
 8002acc:	68e0      	ldr	r0, [r4, #12]
 8002ace:	f7fd fd3b 	bl	8000548 <__aeabi_f2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	6920      	ldr	r0, [r4, #16]
 8002ad8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002adc:	f7fd fd34 	bl	8000548 <__aeabi_f2d>
 8002ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ae4:	e9cd 0100 	strd	r0, r1, [sp]
 8002ae8:	481b      	ldr	r0, [pc, #108]	; (8002b58 <motorCalibrationMode+0x5e0>)
 8002aea:	f002 f99d 	bl	8004e28 <p>
        HAL_Delay(1000);
 8002aee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002af2:	f002 fa89 	bl	8005008 <HAL_Delay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002af6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002afa:	4918      	ldr	r1, [pc, #96]	; (8002b5c <motorCalibrationMode+0x5e4>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002afc:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <motorCalibrationMode+0x5e8>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002afe:	68ca      	ldr	r2, [r1, #12]
 8002b00:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60cb      	str	r3, [r1, #12]
 8002b08:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b0c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002b0e:	e7fd      	b.n	8002b0c <motorCalibrationMode+0x594>
 8002b10:	2000035c 	.word	0x2000035c
 8002b14:	3a2ec33e 	.word	0x3a2ec33e
 8002b18:	20000508 	.word	0x20000508
 8002b1c:	0800d830 	.word	0x0800d830
 8002b20:	c0400000 	.word	0xc0400000
 8002b24:	c0080000 	.word	0xc0080000
 8002b28:	0800d81c 	.word	0x0800d81c
 8002b2c:	0800d804 	.word	0x0800d804
 8002b30:	40400000 	.word	0x40400000
 8002b34:	40080000 	.word	0x40080000
 8002b38:	0800d7b8 	.word	0x0800d7b8
 8002b3c:	200004f0 	.word	0x200004f0
 8002b40:	0800d85c 	.word	0x0800d85c
 8002b44:	20000500 	.word	0x20000500
 8002b48:	0800d7d4 	.word	0x0800d7d4
 8002b4c:	0800d878 	.word	0x0800d878
 8002b50:	20000340 	.word	0x20000340
 8002b54:	0800d890 	.word	0x0800d890
 8002b58:	0800d8a8 	.word	0x0800d8a8
 8002b5c:	e000ed00 	.word	0xe000ed00
 8002b60:	05fa0004 	.word	0x05fa0004
 8002b64:	00000000 	.word	0x00000000

08002b68 <startCalibrationMode>:
{
 8002b68:	b508      	push	{r3, lr}
  p("calibration mode!\n");
 8002b6a:	480b      	ldr	r0, [pc, #44]	; (8002b98 <startCalibrationMode+0x30>)
 8002b6c:	f002 f95c 	bl	8004e28 <p>
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002b70:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8002b90 <startCalibrationMode+0x28>
 8002b74:	4909      	ldr	r1, [pc, #36]	; (8002b9c <startCalibrationMode+0x34>)
  cmd[0].speed = 0;
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <startCalibrationMode+0x38>)
  manual_offset_radian = 0;
 8002b78:	480a      	ldr	r0, [pc, #40]	; (8002ba4 <startCalibrationMode+0x3c>)
 8002b7a:	2200      	movs	r2, #0
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002b7c:	ed81 7b00 	vstr	d7, [r1]
  cmd[0].out_v_final = 2.0;
 8002b80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  manual_offset_radian = 0;
 8002b84:	6002      	str	r2, [r0, #0]
  cmd[0].speed = 0;
 8002b86:	601a      	str	r2, [r3, #0]
  cmd[1].speed = 0;
 8002b88:	615a      	str	r2, [r3, #20]
  cmd[0].out_v_final = 2.0;
 8002b8a:	60d9      	str	r1, [r3, #12]
  cmd[1].out_v_final = 2.0;
 8002b8c:	6219      	str	r1, [r3, #32]
}
 8002b8e:	bd08      	pop	{r3, pc}
 8002b90:	000009c4 	.word	0x000009c4
 8002b94:	00000000 	.word	0x00000000
 8002b98:	0800d5c8 	.word	0x0800d5c8
 8002b9c:	200003b8 	.word	0x200003b8
 8002ba0:	200003f4 	.word	0x200003f4
 8002ba4:	20000448 	.word	0x20000448

08002ba8 <sendCanData>:
{
 8002ba8:	b570      	push	{r4, r5, r6, lr}
  sendSpeed(flash.board_id, 0, motor_real[0].rps, (float)ma702[0].enc_raw * 2 * M_PI / 65535);
 8002baa:	4c67      	ldr	r4, [pc, #412]	; (8002d48 <sendCanData+0x1a0>)
 8002bac:	4e67      	ldr	r6, [pc, #412]	; (8002d4c <sendCanData+0x1a4>)
 8002bae:	edd4 7a01 	vldr	s15, [r4, #4]
 8002bb2:	4d67      	ldr	r5, [pc, #412]	; (8002d50 <sendCanData+0x1a8>)
 8002bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8002bb8:	b082      	sub	sp, #8
  sendSpeed(flash.board_id, 0, motor_real[0].rps, (float)ma702[0].enc_raw * 2 * M_PI / 65535);
 8002bba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bbe:	ee17 0a90 	vmov	r0, s15
 8002bc2:	f7fd fcc1 	bl	8000548 <__aeabi_f2d>
 8002bc6:	a35e      	add	r3, pc, #376	; (adr r3, 8002d40 <sendCanData+0x198>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f7fd fd14 	bl	80005f8 <__aeabi_dmul>
 8002bd0:	f7fe f80a 	bl	8000be8 <__aeabi_d2f>
 8002bd4:	ed96 0a02 	vldr	s0, [r6, #8]
 8002bd8:	ee00 0a90 	vmov	s1, r0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	68a8      	ldr	r0, [r5, #8]
 8002be0:	f7fe fc4e 	bl	8001480 <sendSpeed>
  sendSpeed(flash.board_id, 1, motor_real[1].rps, (float)ma702[1].enc_raw * 2 * M_PI / 65535);
 8002be4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  switch (transfer_cnt) {
 8002be8:	4c5a      	ldr	r4, [pc, #360]	; (8002d54 <sendCanData+0x1ac>)
  sendSpeed(flash.board_id, 1, motor_real[1].rps, (float)ma702[1].enc_raw * 2 * M_PI / 65535);
 8002bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bf2:	ee17 0a90 	vmov	r0, s15
 8002bf6:	f7fd fca7 	bl	8000548 <__aeabi_f2d>
 8002bfa:	a351      	add	r3, pc, #324	; (adr r3, 8002d40 <sendCanData+0x198>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd fcfa 	bl	80005f8 <__aeabi_dmul>
 8002c04:	f7fd fff0 	bl	8000be8 <__aeabi_d2f>
 8002c08:	ed96 0a07 	vldr	s0, [r6, #28]
 8002c0c:	ee00 0a90 	vmov	s1, r0
 8002c10:	2101      	movs	r1, #1
 8002c12:	68a8      	ldr	r0, [r5, #8]
 8002c14:	f7fe fc34 	bl	8001480 <sendSpeed>
  switch (transfer_cnt) {
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	2b32      	cmp	r3, #50	; 0x32
 8002c1c:	d824      	bhi.n	8002c68 <sendCanData+0xc0>
 8002c1e:	e8df f003 	tbb	[pc, r3]
 8002c22:	231a      	.short	0x231a
 8002c24:	23412334 	.word	0x23412334
 8002c28:	235b234e 	.word	0x235b234e
 8002c2c:	237d236c 	.word	0x237d236c
 8002c30:	23232327 	.word	0x23232327
 8002c34:	23232323 	.word	0x23232323
 8002c38:	23232323 	.word	0x23232323
 8002c3c:	23232323 	.word	0x23232323
 8002c40:	23232323 	.word	0x23232323
 8002c44:	23232323 	.word	0x23232323
 8002c48:	23232323 	.word	0x23232323
 8002c4c:	23232323 	.word	0x23232323
 8002c50:	23232323 	.word	0x23232323
 8002c54:	8a          	.byte	0x8a
 8002c55:	00          	.byte	0x00
      sendVoltage(flash.board_id, 0, getBatteryVoltage());
 8002c56:	68a8      	ldr	r0, [r5, #8]
 8002c58:	9001      	str	r0, [sp, #4]
 8002c5a:	f7fe fa31 	bl	80010c0 <getBatteryVoltage>
 8002c5e:	9801      	ldr	r0, [sp, #4]
 8002c60:	2100      	movs	r1, #0
 8002c62:	f7fe fc33 	bl	80014cc <sendVoltage>
  transfer_cnt++;
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	6023      	str	r3, [r4, #0]
}
 8002c6c:	b002      	add	sp, #8
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
      sendFloat(0x501 + flash.board_id * 2, flash.rps_per_v_cw[1]);
 8002c70:	68a8      	ldr	r0, [r5, #8]
 8002c72:	ed95 0a04 	vldr	s0, [r5, #16]
 8002c76:	0040      	lsls	r0, r0, #1
 8002c78:	f200 5001 	addw	r0, r0, #1281	; 0x501
 8002c7c:	f7fe fbe0 	bl	8001440 <sendFloat>
  transfer_cnt++;
 8002c80:	6823      	ldr	r3, [r4, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	6023      	str	r3, [r4, #0]
}
 8002c86:	b002      	add	sp, #8
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
      sendVoltage(flash.board_id, 1, getBatteryVoltage());
 8002c8a:	68a8      	ldr	r0, [r5, #8]
 8002c8c:	9001      	str	r0, [sp, #4]
 8002c8e:	f7fe fa17 	bl	80010c0 <getBatteryVoltage>
 8002c92:	9801      	ldr	r0, [sp, #4]
 8002c94:	2101      	movs	r1, #1
 8002c96:	f7fe fc19 	bl	80014cc <sendVoltage>
  transfer_cnt++;
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	6023      	str	r3, [r4, #0]
}
 8002ca0:	b002      	add	sp, #8
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
      sendCurrent(flash.board_id, 0, getCurrentMotor(0));
 8002ca4:	68ad      	ldr	r5, [r5, #8]
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fe fa5e 	bl	8001168 <getCurrentMotor>
 8002cac:	2100      	movs	r1, #0
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f7fe fc54 	bl	800155c <sendCurrent>
  transfer_cnt++;
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	6023      	str	r3, [r4, #0]
}
 8002cba:	b002      	add	sp, #8
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
      sendCurrent(flash.board_id, 1, getCurrentMotor(1));
 8002cbe:	68ad      	ldr	r5, [r5, #8]
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	f7fe fa51 	bl	8001168 <getCurrentMotor>
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f7fe fc47 	bl	800155c <sendCurrent>
  transfer_cnt++;
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	6023      	str	r3, [r4, #0]
}
 8002cd4:	b002      	add	sp, #8
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}
      sendTemperature(flash.board_id, 0, getTempMotor(0));
 8002cd8:	2000      	movs	r0, #0
 8002cda:	68ad      	ldr	r5, [r5, #8]
 8002cdc:	f7fe fa60 	bl	80011a0 <getTempMotor>
 8002ce0:	ee07 0a90 	vmov	s15, r0
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002cea:	4628      	mov	r0, r5
 8002cec:	f7fe fc12 	bl	8001514 <sendTemperature>
  transfer_cnt++;
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	6023      	str	r3, [r4, #0]
}
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd70      	pop	{r4, r5, r6, pc}
      sendTemperature(flash.board_id, 1, getTempMotor(1));
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	68ad      	ldr	r5, [r5, #8]
 8002cfe:	f7fe fa4f 	bl	80011a0 <getTempMotor>
 8002d02:	ee07 0a90 	vmov	s15, r0
 8002d06:	2101      	movs	r1, #1
 8002d08:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f7fe fc01 	bl	8001514 <sendTemperature>
  transfer_cnt++;
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	6023      	str	r3, [r4, #0]
}
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
      sendFloat(0x500 + flash.board_id * 2, flash.rps_per_v_cw[0]);
 8002d1c:	68a8      	ldr	r0, [r5, #8]
 8002d1e:	ed95 0a03 	vldr	s0, [r5, #12]
 8002d22:	f500 7020 	add.w	r0, r0, #640	; 0x280
 8002d26:	0040      	lsls	r0, r0, #1
 8002d28:	f7fe fb8a 	bl	8001440 <sendFloat>
  transfer_cnt++;
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	6023      	str	r3, [r4, #0]
}
 8002d32:	b002      	add	sp, #8
 8002d34:	bd70      	pop	{r4, r5, r6, pc}
  switch (transfer_cnt) {
 8002d36:	2300      	movs	r3, #0
 8002d38:	e797      	b.n	8002c6a <sendCanData+0xc2>
 8002d3a:	bf00      	nop
 8002d3c:	f3af 8000 	nop.w
 8002d40:	7658a371 	.word	0x7658a371
 8002d44:	3f092214 	.word	0x3f092214
 8002d48:	20000588 	.word	0x20000588
 8002d4c:	2000045c 	.word	0x2000045c
 8002d50:	20000340 	.word	0x20000340
 8002d54:	20000510 	.word	0x20000510

08002d58 <protect>:
{
 8002d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5c:	f8df 9358 	ldr.w	r9, [pc, #856]	; 80030b8 <protect+0x360>
 8002d60:	f8df a358 	ldr.w	sl, [pc, #856]	; 80030bc <protect+0x364>
      error_id = OVER_CURRENT;
 8002d64:	f8df 8338 	ldr.w	r8, [pc, #824]	; 80030a0 <protect+0x348>
      error_info = i;
 8002d68:	4fca      	ldr	r7, [pc, #808]	; (8003094 <protect+0x33c>)
{
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	464e      	mov	r6, r9
  for (int i = 0; i < 2; i++) {
 8002d6e:	2500      	movs	r5, #0
    if (getCurrentMotor(i) > THR_MOTOR_OVER_CURRENT && (pid[i].load_limit_cnt == 0 || pid[i].load_limit_cnt > 100)) {  // load_limit_cntが1~100の間は無視する
 8002d70:	4628      	mov	r0, r5
 8002d72:	f7fe f9f9 	bl	8001168 <getCurrentMotor>
 8002d76:	eef1 7a0a 	vmov.f32	s15, #26	; 0x40d00000  6.5
 8002d7a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d82:	462c      	mov	r4, r5
 8002d84:	dd04      	ble.n	8002d90 <protect+0x38>
 8002d86:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d07f      	beq.n	8002e8c <protect+0x134>
 8002d8c:	2b64      	cmp	r3, #100	; 0x64
 8002d8e:	dc7d      	bgt.n	8002e8c <protect+0x134>
  for (int i = 0; i < 2; i++) {
 8002d90:	f10a 0a14 	add.w	sl, sl, #20
 8002d94:	3630      	adds	r6, #48	; 0x30
 8002d96:	2d00      	cmp	r5, #0
 8002d98:	f000 80d3 	beq.w	8002f42 <protect+0x1ea>
  if (getBatteryVoltage() < THR_BATTERY_UNVER_VOLTAGE) {
 8002d9c:	f7fe f990 	bl	80010c0 <getBatteryVoltage>
 8002da0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8002da4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dac:	f100 818a 	bmi.w	80030c4 <protect+0x36c>
  if (getBatteryVoltage() > THR_BATTERY_OVER_VOLTAGE) {
 8002db0:	f7fe f986 	bl	80010c0 <getBatteryVoltage>
 8002db4:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8003098 <protect+0x340>
 8002db8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc0:	f300 8120 	bgt.w	8003004 <protect+0x2ac>
  if (getTempMotor(0) > THR_MOTOR_OVER_TEMPERATURE || getTempMotor(1) > THR_MOTOR_OVER_TEMPERATURE) {
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fe f9eb 	bl	80011a0 <getTempMotor>
 8002dca:	2846      	cmp	r0, #70	; 0x46
 8002dcc:	f300 80bb 	bgt.w	8002f46 <protect+0x1ee>
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f7fe f9e5 	bl	80011a0 <getTempMotor>
 8002dd6:	2846      	cmp	r0, #70	; 0x46
 8002dd8:	f300 80b5 	bgt.w	8002f46 <protect+0x1ee>
  if (pid[0].load_limit_cnt > MOTOR_OVER_LOAD_CNT_LIMIT || pid[1].load_limit_cnt > MOTOR_OVER_LOAD_CNT_LIMIT) {
 8002ddc:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8002de0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dc04      	bgt.n	8002df2 <protect+0x9a>
 8002de8:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f340 8100 	ble.w	8002ff2 <protect+0x29a>
    forceStopAllPwmOutputAndTimer();
 8002df2:	f001 fe57 	bl	8004aa4 <forceStopAllPwmOutputAndTimer>
    p("over load!! %d %d", pid[0].load_limit_cnt, pid[1].load_limit_cnt);
 8002df6:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
 8002dfa:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8002dfe:	48a7      	ldr	r0, [pc, #668]	; (800309c <protect+0x344>)
    error_id = OVER_LOAD;
 8002e00:	4fa7      	ldr	r7, [pc, #668]	; (80030a0 <protect+0x348>)
    p("over load!! %d %d", pid[0].load_limit_cnt, pid[1].load_limit_cnt);
 8002e02:	f002 f811 	bl	8004e28 <p>
    setLedBlue(false);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fe fcd6 	bl	80017b8 <setLedBlue>
    setLedGreen(false);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fe fcdb 	bl	80017c8 <setLedGreen>
    setLedRed(true);
 8002e12:	2001      	movs	r0, #1
 8002e14:	f7fe fcc8 	bl	80017a8 <setLedRed>
    if (pid[0].load_limit_cnt > pid[1].load_limit_cnt) {
 8002e18:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8002e1c:	f8d9 3058 	ldr.w	r3, [r9, #88]	; 0x58
    error_id = OVER_LOAD;
 8002e20:	2108      	movs	r1, #8
    if (pid[0].load_limit_cnt > pid[1].load_limit_cnt) {
 8002e22:	429a      	cmp	r2, r3
    error_id = OVER_LOAD;
 8002e24:	8039      	strh	r1, [r7, #0]
    if (pid[0].load_limit_cnt > pid[1].load_limit_cnt) {
 8002e26:	f300 80e7 	bgt.w	8002ff8 <protect+0x2a0>
      error_value = pid[1].load_limit_cnt;
 8002e2a:	ee07 3a90 	vmov	s15, r3
 8002e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      error_info = 1;
 8002e32:	2201      	movs	r2, #1
 8002e34:	4c9b      	ldr	r4, [pc, #620]	; (80030a4 <protect+0x34c>)
 8002e36:	4e97      	ldr	r6, [pc, #604]	; (8003094 <protect+0x33c>)
  while (power_enable_cnt > 0) {
 8002e38:	f8df b284 	ldr.w	fp, [pc, #644]	; 80030c0 <protect+0x368>
  p("reset!!!");
 8002e3c:	489a      	ldr	r0, [pc, #616]	; (80030a8 <protect+0x350>)
 8002e3e:	8032      	strh	r2, [r6, #0]
 8002e40:	edc4 7a00 	vstr	s15, [r4]
 8002e44:	f001 fff0 	bl	8004e28 <p>
  while (power_enable_cnt > 0) {
 8002e48:	f8db 2000 	ldr.w	r2, [fp]
 8002e4c:	b1b2      	cbz	r2, 8002e7c <protect+0x124>
    power_enable_cnt--;
 8002e4e:	f8db 2000 	ldr.w	r2, [fp]
 8002e52:	3a01      	subs	r2, #1
 8002e54:	f8cb 2000 	str.w	r2, [fp]
    sendCanData();
 8002e58:	f7ff fea6 	bl	8002ba8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 8002e5c:	f9b6 2000 	ldrsh.w	r2, [r6]
 8002e60:	ed94 0a00 	vldr	s0, [r4]
 8002e64:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fe fb9b 	bl	80015a4 <sendError>
    HAL_Delay(2);
 8002e6e:	2002      	movs	r0, #2
 8002e70:	f002 f8ca 	bl	8005008 <HAL_Delay>
  while (power_enable_cnt > 0) {
 8002e74:	f8db 2000 	ldr.w	r2, [fp]
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	d1e8      	bne.n	8002e4e <protect+0xf6>
  HAL_Delay(2);
 8002e7c:	2002      	movs	r0, #2
 8002e7e:	f002 f8c3 	bl	8005008 <HAL_Delay>
}
 8002e82:	b007      	add	sp, #28
 8002e84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_NVIC_SystemReset();
 8002e88:	f003 bc76 	b.w	8006778 <HAL_NVIC_SystemReset>
      forceStopAllPwmOutputAndTimer();
 8002e8c:	f001 fe0a 	bl	8004aa4 <forceStopAllPwmOutputAndTimer>
      p("M%d over current!! : %+6.2f / out_v %+6.2f / %d cnt %4d\n", i, getCurrentMotor(i), cmd[i].out_v_final, pid[i].output_voltage_limitting, pid[i].load_limit_cnt);
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7fe f969 	bl	8001168 <getCurrentMotor>
 8002e96:	ee10 0a10 	vmov	r0, s0
 8002e9a:	f7fd fb55 	bl	8000548 <__aeabi_f2d>
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002ea2:	9103      	str	r1, [sp, #12]
 8002ea4:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 8002ea8:	9102      	str	r1, [sp, #8]
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f8da 000c 	ldr.w	r0, [sl, #12]
  while (power_enable_cnt > 0) {
 8002eb0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80030c0 <protect+0x368>
      p("M%d over current!! : %+6.2f / out_v %+6.2f / %d cnt %4d\n", i, getCurrentMotor(i), cmd[i].out_v_final, pid[i].output_voltage_limitting, pid[i].load_limit_cnt);
 8002eb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002eb8:	f7fd fb46 	bl	8000548 <__aeabi_f2d>
 8002ebc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ec0:	e9cd 0100 	strd	r0, r1, [sp]
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	4879      	ldr	r0, [pc, #484]	; (80030ac <protect+0x354>)
 8002ec8:	f001 ffae 	bl	8004e28 <p>
      setLedBlue(false);
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7fe fc73 	bl	80017b8 <setLedBlue>
      setLedGreen(true);
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f7fe fc78 	bl	80017c8 <setLedGreen>
      setLedRed(true);
 8002ed8:	2001      	movs	r0, #1
 8002eda:	f7fe fc65 	bl	80017a8 <setLedRed>
      error_value = getCurrentMotor(i);
 8002ede:	4620      	mov	r0, r4
      error_id = OVER_CURRENT;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	f8a8 3000 	strh.w	r3, [r8]
      error_info = i;
 8002ee6:	803d      	strh	r5, [r7, #0]
      error_value = getCurrentMotor(i);
 8002ee8:	f7fe f93e 	bl	8001168 <getCurrentMotor>
 8002eec:	4c6d      	ldr	r4, [pc, #436]	; (80030a4 <protect+0x34c>)
  p("reset!!!");
 8002eee:	486e      	ldr	r0, [pc, #440]	; (80030a8 <protect+0x350>)
      error_value = getCurrentMotor(i);
 8002ef0:	ed84 0a00 	vstr	s0, [r4]
  p("reset!!!");
 8002ef4:	f001 ff98 	bl	8004e28 <p>
  while (power_enable_cnt > 0) {
 8002ef8:	f8db 2000 	ldr.w	r2, [fp]
 8002efc:	b1b2      	cbz	r2, 8002f2c <protect+0x1d4>
    power_enable_cnt--;
 8002efe:	f8db 2000 	ldr.w	r2, [fp]
 8002f02:	3a01      	subs	r2, #1
 8002f04:	f8cb 2000 	str.w	r2, [fp]
    sendCanData();
 8002f08:	f7ff fe4e 	bl	8002ba8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 8002f0c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002f10:	ed94 0a00 	vldr	s0, [r4]
 8002f14:	f9b8 1000 	ldrsh.w	r1, [r8]
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fe fb43 	bl	80015a4 <sendError>
    HAL_Delay(2);
 8002f1e:	2002      	movs	r0, #2
 8002f20:	f002 f872 	bl	8005008 <HAL_Delay>
  while (power_enable_cnt > 0) {
 8002f24:	f8db 2000 	ldr.w	r2, [fp]
 8002f28:	2a00      	cmp	r2, #0
 8002f2a:	d1e8      	bne.n	8002efe <protect+0x1a6>
  HAL_Delay(2);
 8002f2c:	2002      	movs	r0, #2
 8002f2e:	f002 f86b 	bl	8005008 <HAL_Delay>
  for (int i = 0; i < 2; i++) {
 8002f32:	f10a 0a14 	add.w	sl, sl, #20
  HAL_NVIC_SystemReset();
 8002f36:	f003 fc1f 	bl	8006778 <HAL_NVIC_SystemReset>
  for (int i = 0; i < 2; i++) {
 8002f3a:	3630      	adds	r6, #48	; 0x30
 8002f3c:	2d00      	cmp	r5, #0
 8002f3e:	f47f af2d 	bne.w	8002d9c <protect+0x44>
 8002f42:	2501      	movs	r5, #1
 8002f44:	e714      	b.n	8002d70 <protect+0x18>
    forceStopAllPwmOutputAndTimer();
 8002f46:	f001 fdad 	bl	8004aa4 <forceStopAllPwmOutputAndTimer>
    p("OVER Motor temperature!! M0 : %3d M1 : %3d", getTempMotor(0), getTempMotor(1));
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7fe f928 	bl	80011a0 <getTempMotor>
 8002f50:	9004      	str	r0, [sp, #16]
 8002f52:	2001      	movs	r0, #1
 8002f54:	f7fe f924 	bl	80011a0 <getTempMotor>
 8002f58:	9904      	ldr	r1, [sp, #16]
    error_id = MOTOR_OVER_HEAT;
 8002f5a:	4f51      	ldr	r7, [pc, #324]	; (80030a0 <protect+0x348>)
    p("OVER Motor temperature!! M0 : %3d M1 : %3d", getTempMotor(0), getTempMotor(1));
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4854      	ldr	r0, [pc, #336]	; (80030b0 <protect+0x358>)
 8002f60:	f001 ff62 	bl	8004e28 <p>
    setLedBlue(true);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7fe fc27 	bl	80017b8 <setLedBlue>
    setLedGreen(true);
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	f7fe fc2c 	bl	80017c8 <setLedGreen>
    setLedRed(true);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f7fe fc19 	bl	80017a8 <setLedRed>
    error_id = MOTOR_OVER_HEAT;
 8002f76:	2304      	movs	r3, #4
    if (getTempMotor(0) > getTempMotor(1)) {
 8002f78:	2000      	movs	r0, #0
    error_id = MOTOR_OVER_HEAT;
 8002f7a:	803b      	strh	r3, [r7, #0]
    if (getTempMotor(0) > getTempMotor(1)) {
 8002f7c:	f7fe f910 	bl	80011a0 <getTempMotor>
 8002f80:	4604      	mov	r4, r0
 8002f82:	2001      	movs	r0, #1
 8002f84:	f7fe f90c 	bl	80011a0 <getTempMotor>
 8002f88:	4284      	cmp	r4, r0
 8002f8a:	dc30      	bgt.n	8002fee <protect+0x296>
      error_info = 1;
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	4e41      	ldr	r6, [pc, #260]	; (8003094 <protect+0x33c>)
      error_value = (float)getTempMotor(0);
 8002f90:	4c44      	ldr	r4, [pc, #272]	; (80030a4 <protect+0x34c>)
      error_info = 1;
 8002f92:	8030      	strh	r0, [r6, #0]
      error_value = (float)getTempMotor(1);
 8002f94:	f7fe f904 	bl	80011a0 <getTempMotor>
 8002f98:	ee07 0a90 	vmov	s15, r0
  while (power_enable_cnt > 0) {
 8002f9c:	f8df b120 	ldr.w	fp, [pc, #288]	; 80030c0 <protect+0x368>
  p("reset!!!");
 8002fa0:	4841      	ldr	r0, [pc, #260]	; (80030a8 <protect+0x350>)
      error_value = (float)getTempMotor(1);
 8002fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      error_value = (float)getTempMotor(0);
 8002fa6:	edc4 7a00 	vstr	s15, [r4]
  p("reset!!!");
 8002faa:	f001 ff3d 	bl	8004e28 <p>
  while (power_enable_cnt > 0) {
 8002fae:	f8db 2000 	ldr.w	r2, [fp]
 8002fb2:	b1b2      	cbz	r2, 8002fe2 <protect+0x28a>
    power_enable_cnt--;
 8002fb4:	f8db 2000 	ldr.w	r2, [fp]
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	f8cb 2000 	str.w	r2, [fp]
    sendCanData();
 8002fbe:	f7ff fdf3 	bl	8002ba8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 8002fc2:	f9b6 2000 	ldrsh.w	r2, [r6]
 8002fc6:	ed94 0a00 	vldr	s0, [r4]
 8002fca:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fe fae8 	bl	80015a4 <sendError>
    HAL_Delay(2);
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f002 f817 	bl	8005008 <HAL_Delay>
  while (power_enable_cnt > 0) {
 8002fda:	f8db 2000 	ldr.w	r2, [fp]
 8002fde:	2a00      	cmp	r2, #0
 8002fe0:	d1e8      	bne.n	8002fb4 <protect+0x25c>
  HAL_Delay(2);
 8002fe2:	2002      	movs	r0, #2
 8002fe4:	f002 f810 	bl	8005008 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8002fe8:	f003 fbc6 	bl	8006778 <HAL_NVIC_SystemReset>
}
 8002fec:	e6f6      	b.n	8002ddc <protect+0x84>
      error_info = 0;
 8002fee:	2000      	movs	r0, #0
 8002ff0:	e7cd      	b.n	8002f8e <protect+0x236>
}
 8002ff2:	b007      	add	sp, #28
 8002ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      error_value = pid[0].load_limit_cnt;
 8002ff8:	ee07 2a90 	vmov	s15, r2
      error_info = 0;
 8002ffc:	2200      	movs	r2, #0
      error_value = pid[0].load_limit_cnt;
 8002ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003002:	e717      	b.n	8002e34 <protect+0xdc>
    setPwmAll(0);
 8003004:	2000      	movs	r0, #0
 8003006:	f001 fd3d 	bl	8004a84 <setPwmAll>
    p("OVER voltage!! %6.3f", getBatteryVoltage());
 800300a:	f7fe f859 	bl	80010c0 <getBatteryVoltage>
 800300e:	ee10 0a10 	vmov	r0, s0
 8003012:	f7fd fa99 	bl	8000548 <__aeabi_f2d>
 8003016:	460b      	mov	r3, r1
 8003018:	4602      	mov	r2, r0
 800301a:	4826      	ldr	r0, [pc, #152]	; (80030b4 <protect+0x35c>)
    error_id = OVER_VOLTAGE;
 800301c:	4f20      	ldr	r7, [pc, #128]	; (80030a0 <protect+0x348>)
    error_info = 0;
 800301e:	4e1d      	ldr	r6, [pc, #116]	; (8003094 <protect+0x33c>)
    error_value = getBatteryVoltage();
 8003020:	4c20      	ldr	r4, [pc, #128]	; (80030a4 <protect+0x34c>)
  while (power_enable_cnt > 0) {
 8003022:	f8df b09c 	ldr.w	fp, [pc, #156]	; 80030c0 <protect+0x368>
    p("OVER voltage!! %6.3f", getBatteryVoltage());
 8003026:	f001 feff 	bl	8004e28 <p>
    setLedBlue(true);
 800302a:	2001      	movs	r0, #1
 800302c:	f7fe fbc4 	bl	80017b8 <setLedBlue>
    setLedGreen(false);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fe fbc9 	bl	80017c8 <setLedGreen>
    setLedRed(true);
 8003036:	2001      	movs	r0, #1
 8003038:	f7fe fbb6 	bl	80017a8 <setLedRed>
    error_id = OVER_VOLTAGE;
 800303c:	2220      	movs	r2, #32
    error_info = 0;
 800303e:	2300      	movs	r3, #0
    error_id = OVER_VOLTAGE;
 8003040:	803a      	strh	r2, [r7, #0]
    error_info = 0;
 8003042:	8033      	strh	r3, [r6, #0]
    error_value = getBatteryVoltage();
 8003044:	f7fe f83c 	bl	80010c0 <getBatteryVoltage>
  p("reset!!!");
 8003048:	4817      	ldr	r0, [pc, #92]	; (80030a8 <protect+0x350>)
    error_value = getBatteryVoltage();
 800304a:	ed84 0a00 	vstr	s0, [r4]
  p("reset!!!");
 800304e:	f001 feeb 	bl	8004e28 <p>
  while (power_enable_cnt > 0) {
 8003052:	f8db 2000 	ldr.w	r2, [fp]
 8003056:	b1b2      	cbz	r2, 8003086 <protect+0x32e>
    power_enable_cnt--;
 8003058:	f8db 2000 	ldr.w	r2, [fp]
 800305c:	3a01      	subs	r2, #1
 800305e:	f8cb 2000 	str.w	r2, [fp]
    sendCanData();
 8003062:	f7ff fda1 	bl	8002ba8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 8003066:	f9b6 2000 	ldrsh.w	r2, [r6]
 800306a:	ed94 0a00 	vldr	s0, [r4]
 800306e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8003072:	2000      	movs	r0, #0
 8003074:	f7fe fa96 	bl	80015a4 <sendError>
    HAL_Delay(2);
 8003078:	2002      	movs	r0, #2
 800307a:	f001 ffc5 	bl	8005008 <HAL_Delay>
  while (power_enable_cnt > 0) {
 800307e:	f8db 2000 	ldr.w	r2, [fp]
 8003082:	2a00      	cmp	r2, #0
 8003084:	d1e8      	bne.n	8003058 <protect+0x300>
  HAL_Delay(2);
 8003086:	2002      	movs	r0, #2
 8003088:	f001 ffbe 	bl	8005008 <HAL_Delay>
  HAL_NVIC_SystemReset();
 800308c:	f003 fb74 	bl	8006778 <HAL_NVIC_SystemReset>
}
 8003090:	e698      	b.n	8002dc4 <protect+0x6c>
 8003092:	bf00      	nop
 8003094:	20000438 	.word	0x20000438
 8003098:	420c0000 	.word	0x420c0000
 800309c:	0800d9d0 	.word	0x0800d9d0
 80030a0:	20000436 	.word	0x20000436
 80030a4:	2000043c 	.word	0x2000043c
 80030a8:	0800d92c 	.word	0x0800d92c
 80030ac:	0800d938 	.word	0x0800d938
 80030b0:	0800d9a4 	.word	0x0800d9a4
 80030b4:	0800d98c 	.word	0x0800d98c
 80030b8:	20000488 	.word	0x20000488
 80030bc:	200003f4 	.word	0x200003f4
 80030c0:	200004e8 	.word	0x200004e8
    forceStopAllPwmOutputAndTimer();
 80030c4:	f001 fcee 	bl	8004aa4 <forceStopAllPwmOutputAndTimer>
    p("UNDER voltage!! %6.3f", getBatteryVoltage());
 80030c8:	f7fd fffa 	bl	80010c0 <getBatteryVoltage>
 80030cc:	ee10 0a10 	vmov	r0, s0
 80030d0:	f7fd fa3a 	bl	8000548 <__aeabi_f2d>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	481d      	ldr	r0, [pc, #116]	; (8003150 <protect+0x3f8>)
    error_id = UNDER_VOLTAGE;
 80030da:	4f1e      	ldr	r7, [pc, #120]	; (8003154 <protect+0x3fc>)
    error_info = 0;
 80030dc:	4e1e      	ldr	r6, [pc, #120]	; (8003158 <protect+0x400>)
    error_value = getBatteryVoltage();
 80030de:	4c1f      	ldr	r4, [pc, #124]	; (800315c <protect+0x404>)
  while (power_enable_cnt > 0) {
 80030e0:	f8df b080 	ldr.w	fp, [pc, #128]	; 8003164 <protect+0x40c>
    p("UNDER voltage!! %6.3f", getBatteryVoltage());
 80030e4:	f001 fea0 	bl	8004e28 <p>
    setLedBlue(true);
 80030e8:	4628      	mov	r0, r5
 80030ea:	f7fe fb65 	bl	80017b8 <setLedBlue>
    setLedGreen(false);
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7fe fb6a 	bl	80017c8 <setLedGreen>
    setLedRed(true);
 80030f4:	4628      	mov	r0, r5
 80030f6:	f7fe fb57 	bl	80017a8 <setLedRed>
    error_info = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	8033      	strh	r3, [r6, #0]
    error_id = UNDER_VOLTAGE;
 80030fe:	803d      	strh	r5, [r7, #0]
    error_value = getBatteryVoltage();
 8003100:	f7fd ffde 	bl	80010c0 <getBatteryVoltage>
  p("reset!!!");
 8003104:	4816      	ldr	r0, [pc, #88]	; (8003160 <protect+0x408>)
    error_value = getBatteryVoltage();
 8003106:	ed84 0a00 	vstr	s0, [r4]
  p("reset!!!");
 800310a:	f001 fe8d 	bl	8004e28 <p>
  while (power_enable_cnt > 0) {
 800310e:	f8db 2000 	ldr.w	r2, [fp]
 8003112:	b1b2      	cbz	r2, 8003142 <protect+0x3ea>
    power_enable_cnt--;
 8003114:	f8db 2000 	ldr.w	r2, [fp]
 8003118:	3a01      	subs	r2, #1
 800311a:	f8cb 2000 	str.w	r2, [fp]
    sendCanData();
 800311e:	f7ff fd43 	bl	8002ba8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 8003122:	f9b6 2000 	ldrsh.w	r2, [r6]
 8003126:	ed94 0a00 	vldr	s0, [r4]
 800312a:	f9b7 1000 	ldrsh.w	r1, [r7]
 800312e:	2000      	movs	r0, #0
 8003130:	f7fe fa38 	bl	80015a4 <sendError>
    HAL_Delay(2);
 8003134:	2002      	movs	r0, #2
 8003136:	f001 ff67 	bl	8005008 <HAL_Delay>
  while (power_enable_cnt > 0) {
 800313a:	f8db 2000 	ldr.w	r2, [fp]
 800313e:	2a00      	cmp	r2, #0
 8003140:	d1e8      	bne.n	8003114 <protect+0x3bc>
  HAL_Delay(2);
 8003142:	2002      	movs	r0, #2
 8003144:	f001 ff60 	bl	8005008 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8003148:	f003 fb16 	bl	8006778 <HAL_NVIC_SystemReset>
}
 800314c:	e630      	b.n	8002db0 <protect+0x58>
 800314e:	bf00      	nop
 8003150:	0800d974 	.word	0x0800d974
 8003154:	20000436 	.word	0x20000436
 8003158:	20000438 	.word	0x20000438
 800315c:	2000043c 	.word	0x2000043c
 8003160:	0800d92c 	.word	0x0800d92c
 8003164:	200004e8 	.word	0x200004e8

08003168 <SystemClock_Config>:
{
 8003168:	b510      	push	{r4, lr}
 800316a:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800316c:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800316e:	223c      	movs	r2, #60	; 0x3c
 8003170:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003172:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003176:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800317a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800317e:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003180:	9101      	str	r1, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003182:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003184:	f008 f91e 	bl	800b3c4 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003188:	2201      	movs	r2, #1
 800318a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800318e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003192:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003194:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800319a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800319e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031a0:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031a4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80031a6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80031a8:	f003 feae 	bl	8006f08 <HAL_RCC_OscConfig>
 80031ac:	b108      	cbz	r0, 80031b2 <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 80031ae:	b672      	cpsid	i
  while (1) {
 80031b0:	e7fe      	b.n	80031b0 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031b2:	220f      	movs	r2, #15
 80031b4:	4603      	mov	r3, r0
 80031b6:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80031b8:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80031be:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031c6:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80031c8:	f004 f966 	bl	8007498 <HAL_RCC_ClockConfig>
 80031cc:	4603      	mov	r3, r0
 80031ce:	b108      	cbz	r0, 80031d4 <SystemClock_Config+0x6c>
 80031d0:	b672      	cpsid	i
  while (1) {
 80031d2:	e7fe      	b.n	80031d2 <SystemClock_Config+0x6a>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80031d4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8003200 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_TIM8 | RCC_PERIPHCLK_ADC34;
 80031d8:	f243 1101 	movw	r1, #12545	; 0x3101
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80031dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80031e0:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80031e2:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_TIM8 | RCC_PERIPHCLK_ADC34;
 80031e6:	9110      	str	r1, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031e8:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80031ea:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80031ec:	f004 fa9e 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 80031f0:	b108      	cbz	r0, 80031f6 <SystemClock_Config+0x8e>
 80031f2:	b672      	cpsid	i
  while (1) {
 80031f4:	e7fe      	b.n	80031f4 <SystemClock_Config+0x8c>
}
 80031f6:	b020      	add	sp, #128	; 0x80
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	bf00      	nop
 80031fc:	f3af 8000 	nop.w
	...

08003208 <main>:
{
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	ed2d 8b04 	vpush	{d8-d9}
 8003210:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8003212:	f001 fed5 	bl	8004fc0 <HAL_Init>
  SystemClock_Config();
 8003216:	f7ff ffa7 	bl	8003168 <SystemClock_Config>
  MX_GPIO_Init();
 800321a:	f7fe fadd 	bl	80017d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800321e:	f7fe f9e5 	bl	80015ec <MX_DMA_Init>
  MX_ADC1_Init();
 8003222:	f7fd fd31 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003226:	f7fd fdbf 	bl	8000da8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800322a:	f7fd fe31 	bl	8000e90 <MX_ADC3_Init>
  MX_CAN_Init();
 800322e:	f7fe f84b 	bl	80012c8 <MX_CAN_Init>
  MX_SPI1_Init();
 8003232:	f000 fef7 	bl	8004024 <MX_SPI1_Init>
  MX_TIM1_Init();
 8003236:	f001 fa5f 	bl	80046f8 <MX_TIM1_Init>
  MX_TIM8_Init();
 800323a:	f001 fae5 	bl	8004808 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800323e:	f001 fd27 	bl	8004c90 <MX_USART1_UART_Init>
  initFirstSin();
 8003242:	f001 fb69 	bl	8004918 <initFirstSin>
  setLedRed(true);
 8003246:	2001      	movs	r0, #1
 8003248:	f7fe faae 	bl	80017a8 <setLedRed>
  setLedGreen(true);
 800324c:	2001      	movs	r0, #1
 800324e:	f7fe fabb 	bl	80017c8 <setLedGreen>
  setLedBlue(true);
 8003252:	2001      	movs	r0, #1
 8003254:	f7fe fab0 	bl	80017b8 <setLedBlue>
  HAL_Delay(100);
 8003258:	2064      	movs	r0, #100	; 0x64
 800325a:	f001 fed5 	bl	8005008 <HAL_Delay>
  loadFlashData();
 800325e:	f7fe fa5f 	bl	8001720 <loadFlashData>
  p("\n\n** Orion VV driver V4 start! **\n");
 8003262:	48d2      	ldr	r0, [pc, #840]	; (80035ac <main+0x3a4>)
 8003264:	f001 fde0 	bl	8004e28 <p>
    pid[i].pid_kp = 0.2;
 8003268:	49d1      	ldr	r1, [pc, #836]	; (80035b0 <main+0x3a8>)
 800326a:	4ad2      	ldr	r2, [pc, #840]	; (80035b4 <main+0x3ac>)
 800326c:	604a      	str	r2, [r1, #4]
    pid[i].pid_ki = 0.3;
 800326e:	4ad2      	ldr	r2, [pc, #840]	; (80035b8 <main+0x3b0>)
 8003270:	60ca      	str	r2, [r1, #12]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003272:	48d2      	ldr	r0, [pc, #840]	; (80035bc <main+0x3b4>)
    pid[i].error_integral_limit = 4.0;
 8003274:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
    pid[i].pid_kd = 0.0;
 8003278:	2300      	movs	r3, #0
    pid[i].error_integral_limit = 4.0;
 800327a:	61ca      	str	r2, [r1, #28]
    pid[i].diff_voltage_limit = 6.0;  // 2.0 -> 4.0 -> 6.0
 800327c:	4ad0      	ldr	r2, [pc, #832]	; (80035c0 <main+0x3b8>)
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800327e:	ed90 8a03 	vldr	s16, [r0, #12]
    pid[i].pid_kd = 0.0;
 8003282:	608b      	str	r3, [r1, #8]
    pid[i].diff_voltage_limit = 6.0;  // 2.0 -> 4.0 -> 6.0
 8003284:	624a      	str	r2, [r1, #36]	; 0x24
    cmd[i].speed = 0;
 8003286:	49cf      	ldr	r1, [pc, #828]	; (80035c4 <main+0x3bc>)
    enc_offset[i].zero_calib = flash.calib[i];
 8003288:	6800      	ldr	r0, [r0, #0]
    cmd[i].speed = 0;
 800328a:	600b      	str	r3, [r1, #0]
    cmd[i].timeout_cnt = -1;
 800328c:	f04f 32ff 	mov.w	r2, #4294967295
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003290:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    cmd[i].timeout_cnt = -1;
 8003294:	610a      	str	r2, [r1, #16]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003296:	eeb4 8ae7 	vcmpe.f32	s16, s15
    enc_offset[i].zero_calib = flash.calib[i];
 800329a:	4acb      	ldr	r2, [pc, #812]	; (80035c8 <main+0x3c0>)
    cmd[i].out_v = 0;
 800329c:	608b      	str	r3, [r1, #8]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800329e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cmd[i].out_v_final = 0;
 80032a2:	60cb      	str	r3, [r1, #12]
    enc_offset[i].zero_calib = flash.calib[i];
 80032a4:	6050      	str	r0, [r2, #4]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 80032a6:	dd07      	ble.n	80032b8 <main+0xb0>
 80032a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032ac:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80032b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b4:	f100 866a 	bmi.w	8003f8c <main+0xd84>
      motor_param[i].voltage_per_rps = V_PER_RPS_DEFAULT;
 80032b8:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 80035cc <main+0x3c4>
    pid[i].pid_kd = 0.0;
 80032bc:	49bc      	ldr	r1, [pc, #752]	; (80035b0 <main+0x3a8>)
    cmd[i].speed = 0;
 80032be:	4ec1      	ldr	r6, [pc, #772]	; (80035c4 <main+0x3bc>)
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 80032c0:	4dbe      	ldr	r5, [pc, #760]	; (80035bc <main+0x3b4>)
 80032c2:	4cc3      	ldr	r4, [pc, #780]	; (80035d0 <main+0x3c8>)
 80032c4:	edd5 8a04 	vldr	s17, [r5, #16]
    enc_offset[i].zero_calib = flash.calib[i];
 80032c8:	686d      	ldr	r5, [r5, #4]
 80032ca:	ed84 7a00 	vstr	s14, [r4]
    pid[i].pid_kd = 0.0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	638b      	str	r3, [r1, #56]	; 0x38
    cmd[i].speed = 0;
 80032d2:	6173      	str	r3, [r6, #20]
    cmd[i].out_v = 0;
 80032d4:	61f3      	str	r3, [r6, #28]
    cmd[i].out_v_final = 0;
 80032d6:	6233      	str	r3, [r6, #32]
    pid[i].pid_kp = 0.2;
 80032d8:	4bb6      	ldr	r3, [pc, #728]	; (80035b4 <main+0x3ac>)
 80032da:	634b      	str	r3, [r1, #52]	; 0x34
    pid[i].pid_ki = 0.3;
 80032dc:	4bb6      	ldr	r3, [pc, #728]	; (80035b8 <main+0x3b0>)
 80032de:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 80032e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    pid[i].error_integral_limit = 4.0;
 80032e4:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80032e8:	64cb      	str	r3, [r1, #76]	; 0x4c
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 80032ea:	eef4 8ae7 	vcmpe.f32	s17, s15
    pid[i].diff_voltage_limit = 6.0;  // 2.0 -> 4.0 -> 6.0
 80032ee:	4bb4      	ldr	r3, [pc, #720]	; (80035c0 <main+0x3b8>)
 80032f0:	654b      	str	r3, [r1, #84]	; 0x54
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 80032f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cmd[i].timeout_cnt = -1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
    enc_offset[i].zero_calib = flash.calib[i];
 80032fa:	60d5      	str	r5, [r2, #12]
    cmd[i].timeout_cnt = -1;
 80032fc:	6273      	str	r3, [r6, #36]	; 0x24
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 80032fe:	dd07      	ble.n	8003310 <main+0x108>
 8003300:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003304:	eef4 8ac7 	vcmpe.f32	s17, s14
 8003308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330c:	f100 863a 	bmi.w	8003f84 <main+0xd7c>
      motor_param[i].voltage_per_rps = V_PER_RPS_DEFAULT;
 8003310:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80035cc <main+0x3c4>
 8003314:	ed84 7a02 	vstr	s14, [r4, #8]
  p("CAN ADDR 0x%03x\nenc offset M0 %6.3f M1 %6.3f\nRPS/V M0 %6.3f M1 %6.3f\n", flash.board_id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]);
 8003318:	f7fd f916 	bl	8000548 <__aeabi_f2d>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	ee18 0a90 	vmov	r0, s17
 8003324:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003328:	f7fd f90e 	bl	8000548 <__aeabi_f2d>
 800332c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003330:	ee18 0a10 	vmov	r0, s16
 8003334:	f7fd f908 	bl	8000548 <__aeabi_f2d>
 8003338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800333c:	4628      	mov	r0, r5
 800333e:	f7fd f903 	bl	8000548 <__aeabi_f2d>
 8003342:	e9cd 0100 	strd	r0, r1, [sp]
 8003346:	4d9d      	ldr	r5, [pc, #628]	; (80035bc <main+0x3b4>)
 8003348:	48a2      	ldr	r0, [pc, #648]	; (80035d4 <main+0x3cc>)
 800334a:	68a9      	ldr	r1, [r5, #8]
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 800334c:	ed9f 9aa2 	vldr	s18, [pc, #648]	; 80035d8 <main+0x3d0>
  p("CAN ADDR 0x%03x\nenc offset M0 %6.3f M1 %6.3f\nRPS/V M0 %6.3f M1 %6.3f\n", flash.board_id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]);
 8003350:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003354:	f001 fd68 	bl	8004e28 <p>
  HAL_Delay(1);
 8003358:	2001      	movs	r0, #1
 800335a:	f001 fe55 	bl	8005008 <HAL_Delay>
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 800335e:	edd5 7a03 	vldr	s15, [r5, #12]
 8003362:	ee67 7a89 	vmul.f32	s15, s15, s18
  for (int i = 0; i < 2; i++) {
 8003366:	2600      	movs	r6, #0
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 8003368:	ee17 0a90 	vmov	r0, s15
 800336c:	f7fd f8ec 	bl	8000548 <__aeabi_f2d>
 8003370:	edd5 7a04 	vldr	s15, [r5, #16]
 8003374:	ee67 7a89 	vmul.f32	s15, s15, s18
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	ee17 0a90 	vmov	r0, s15
 8003380:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003384:	f7fd f8e0 	bl	8000548 <__aeabi_f2d>
 8003388:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800338c:	e9cd 0100 	strd	r0, r1, [sp]
 8003390:	4892      	ldr	r0, [pc, #584]	; (80035dc <main+0x3d4>)
 8003392:	f001 fd49 	bl	8004e28 <p>
  __HAL_SPI_ENABLE(&hspi1);
 8003396:	4b92      	ldr	r3, [pc, #584]	; (80035e0 <main+0x3d8>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003398:	4892      	ldr	r0, [pc, #584]	; (80035e4 <main+0x3dc>)
  __HAL_SPI_ENABLE(&hspi1);
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a2:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80033a4:	2180      	movs	r1, #128	; 0x80
 80033a6:	2201      	movs	r2, #1
 80033a8:	f003 fda8 	bl	8006efc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80033ac:	2201      	movs	r2, #1
 80033ae:	2140      	movs	r1, #64	; 0x40
 80033b0:	488c      	ldr	r0, [pc, #560]	; (80035e4 <main+0x3dc>)
 80033b2:	f003 fda3 	bl	8006efc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80033b6:	2001      	movs	r0, #1
 80033b8:	f001 fe26 	bl	8005008 <HAL_Delay>
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 80033bc:	ed95 6a03 	vldr	s12, [r5, #12]
  motor_param[1].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[1] * SPEED_REAL_LIMIT_GAIN;
 80033c0:	edd5 6a04 	vldr	s13, [r5, #16]
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 80033c4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80035e8 <main+0x3e0>
    p("0x%02x ", readRegisterMA702(i, 1));  // Z offset-H
 80033c8:	4d88      	ldr	r5, [pc, #544]	; (80035ec <main+0x3e4>)
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 80033ca:	eec7 7a06 	vdiv.f32	s15, s14, s12
  motor_param[1].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[1] * SPEED_REAL_LIMIT_GAIN;
 80033ce:	ee87 8a26 	vdiv.f32	s16, s14, s13
  p("output voltage limit : %5.2f %5.2f\n", motor_param[0].output_voltage_limit, motor_param[1].output_voltage_limit);
 80033d2:	ee17 0a90 	vmov	r0, s15
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 80033d6:	edc4 7a01 	vstr	s15, [r4, #4]
  motor_param[1].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[1] * SPEED_REAL_LIMIT_GAIN;
 80033da:	ed84 8a03 	vstr	s16, [r4, #12]
  p("output voltage limit : %5.2f %5.2f\n", motor_param[0].output_voltage_limit, motor_param[1].output_voltage_limit);
 80033de:	f7fd f8b3 	bl	8000548 <__aeabi_f2d>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	ee18 0a10 	vmov	r0, s16
 80033ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80033ee:	f7fd f8ab 	bl	8000548 <__aeabi_f2d>
 80033f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80033f6:	e9cd 0100 	strd	r0, r1, [sp]
 80033fa:	487d      	ldr	r0, [pc, #500]	; (80035f0 <main+0x3e8>)
 80033fc:	f001 fd14 	bl	8004e28 <p>
  HAL_Delay(1);
 8003400:	2001      	movs	r0, #1
 8003402:	f001 fe01 	bl	8005008 <HAL_Delay>
  p("0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x09 0x0E 0x10 0x1B\n");
 8003406:	487b      	ldr	r0, [pc, #492]	; (80035f4 <main+0x3ec>)
 8003408:	f001 fd0e 	bl	8004e28 <p>
    HAL_Delay(10);
 800340c:	200a      	movs	r0, #10
 800340e:	f001 fdfb 	bl	8005008 <HAL_Delay>
    writeRegisterMA702(i, 5, 0xFF);
 8003412:	22ff      	movs	r2, #255	; 0xff
 8003414:	2105      	movs	r1, #5
 8003416:	4630      	mov	r0, r6
 8003418:	f000 fed4 	bl	80041c4 <writeRegisterMA702>
    HAL_Delay(10);
 800341c:	200a      	movs	r0, #10
 800341e:	f001 fdf3 	bl	8005008 <HAL_Delay>
    writeRegisterMA702(i, 6, 0x1C);
 8003422:	221c      	movs	r2, #28
 8003424:	2106      	movs	r1, #6
 8003426:	4630      	mov	r0, r6
 8003428:	f000 fecc 	bl	80041c4 <writeRegisterMA702>
    HAL_Delay(10);
 800342c:	200a      	movs	r0, #10
 800342e:	f001 fdeb 	bl	8005008 <HAL_Delay>
    writeRegisterMA702(i, 0x10, 0x9C);
 8003432:	229c      	movs	r2, #156	; 0x9c
 8003434:	2110      	movs	r1, #16
 8003436:	4630      	mov	r0, r6
 8003438:	f000 fec4 	bl	80041c4 <writeRegisterMA702>
    HAL_Delay(10);
 800343c:	200a      	movs	r0, #10
 800343e:	f001 fde3 	bl	8005008 <HAL_Delay>
    writeRegisterMA702(i, 0x1B, 0x43);
 8003442:	2243      	movs	r2, #67	; 0x43
 8003444:	211b      	movs	r1, #27
 8003446:	4630      	mov	r0, r6
 8003448:	f000 febc 	bl	80041c4 <writeRegisterMA702>
    HAL_Delay(10);
 800344c:	200a      	movs	r0, #10
 800344e:	f001 fddb 	bl	8005008 <HAL_Delay>
    writeRegisterMA702(i, 0x0E, 0x77);
 8003452:	2277      	movs	r2, #119	; 0x77
 8003454:	210e      	movs	r1, #14
 8003456:	4630      	mov	r0, r6
 8003458:	f000 feb4 	bl	80041c4 <writeRegisterMA702>
    HAL_Delay(10);
 800345c:	200a      	movs	r0, #10
 800345e:	f001 fdd3 	bl	8005008 <HAL_Delay>
    p("reg = 0x%02x", readRegisterMA702(i, 0));  // Z offset-L
 8003462:	2100      	movs	r1, #0
 8003464:	4630      	mov	r0, r6
 8003466:	f000 fe47 	bl	80040f8 <readRegisterMA702>
 800346a:	4601      	mov	r1, r0
 800346c:	4862      	ldr	r0, [pc, #392]	; (80035f8 <main+0x3f0>)
 800346e:	f001 fcdb 	bl	8004e28 <p>
    HAL_Delay(1);
 8003472:	2001      	movs	r0, #1
 8003474:	f001 fdc8 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 1));  // Z offset-H
 8003478:	2101      	movs	r1, #1
 800347a:	4630      	mov	r0, r6
 800347c:	f000 fe3c 	bl	80040f8 <readRegisterMA702>
 8003480:	4601      	mov	r1, r0
 8003482:	4628      	mov	r0, r5
 8003484:	f001 fcd0 	bl	8004e28 <p>
    HAL_Delay(1);
 8003488:	2001      	movs	r0, #1
 800348a:	f001 fdbd 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 2));  // BCT (off-axis param)
 800348e:	2102      	movs	r1, #2
 8003490:	4630      	mov	r0, r6
 8003492:	f000 fe31 	bl	80040f8 <readRegisterMA702>
 8003496:	4601      	mov	r1, r0
 8003498:	4628      	mov	r0, r5
 800349a:	f001 fcc5 	bl	8004e28 <p>
    HAL_Delay(1);
 800349e:	2001      	movs	r0, #1
 80034a0:	f001 fdb2 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 3));  // ETY,ETX
 80034a4:	2103      	movs	r1, #3
 80034a6:	4630      	mov	r0, r6
 80034a8:	f000 fe26 	bl	80040f8 <readRegisterMA702>
 80034ac:	4601      	mov	r1, r0
 80034ae:	4628      	mov	r0, r5
 80034b0:	f001 fcba 	bl	8004e28 <p>
    HAL_Delay(1);
 80034b4:	2001      	movs	r0, #1
 80034b6:	f001 fda7 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 4));  // PPT-L/ILIP
 80034ba:	2104      	movs	r1, #4
 80034bc:	4630      	mov	r0, r6
 80034be:	f000 fe1b 	bl	80040f8 <readRegisterMA702>
 80034c2:	4601      	mov	r1, r0
 80034c4:	4628      	mov	r0, r5
 80034c6:	f001 fcaf 	bl	8004e28 <p>
    HAL_Delay(1);
 80034ca:	2001      	movs	r0, #1
 80034cc:	f001 fd9c 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 5));  // PPT-H
 80034d0:	2105      	movs	r1, #5
 80034d2:	4630      	mov	r0, r6
 80034d4:	f000 fe10 	bl	80040f8 <readRegisterMA702>
 80034d8:	4601      	mov	r1, r0
 80034da:	4628      	mov	r0, r5
 80034dc:	f001 fca4 	bl	8004e28 <p>
    HAL_Delay(1);
 80034e0:	2001      	movs	r0, #1
 80034e2:	f001 fd91 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 6));  // MGLT/MGHT
 80034e6:	2106      	movs	r1, #6
 80034e8:	4630      	mov	r0, r6
 80034ea:	f000 fe05 	bl	80040f8 <readRegisterMA702>
 80034ee:	4601      	mov	r1, r0
 80034f0:	4628      	mov	r0, r5
 80034f2:	f001 fc99 	bl	8004e28 <p>
    HAL_Delay(1);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f001 fd86 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 9));  // RD
 80034fc:	2109      	movs	r1, #9
 80034fe:	4630      	mov	r0, r6
 8003500:	f000 fdfa 	bl	80040f8 <readRegisterMA702>
 8003504:	4601      	mov	r1, r0
 8003506:	4628      	mov	r0, r5
 8003508:	f001 fc8e 	bl	8004e28 <p>
    HAL_Delay(1);
 800350c:	2001      	movs	r0, #1
 800350e:	f001 fd7b 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 0xE));  // FW
 8003512:	210e      	movs	r1, #14
 8003514:	4630      	mov	r0, r6
 8003516:	f000 fdef 	bl	80040f8 <readRegisterMA702>
 800351a:	4601      	mov	r1, r0
 800351c:	4628      	mov	r0, r5
 800351e:	f001 fc83 	bl	8004e28 <p>
    HAL_Delay(1);
 8003522:	2001      	movs	r0, #1
 8003524:	f001 fd70 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 0x10));  // HYS
 8003528:	2110      	movs	r1, #16
 800352a:	4630      	mov	r0, r6
 800352c:	f000 fde4 	bl	80040f8 <readRegisterMA702>
 8003530:	4601      	mov	r1, r0
 8003532:	4628      	mov	r0, r5
 8003534:	f001 fc78 	bl	8004e28 <p>
    HAL_Delay(1);
 8003538:	2001      	movs	r0, #1
 800353a:	f001 fd65 	bl	8005008 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 0x1B));  // MGH&L
 800353e:	211b      	movs	r1, #27
 8003540:	4630      	mov	r0, r6
 8003542:	f000 fdd9 	bl	80040f8 <readRegisterMA702>
 8003546:	4601      	mov	r1, r0
 8003548:	4628      	mov	r0, r5
 800354a:	f001 fc6d 	bl	8004e28 <p>
    HAL_Delay(1);
 800354e:	2001      	movs	r0, #1
 8003550:	f001 fd5a 	bl	8005008 <HAL_Delay>
    p("\n");
 8003554:	4829      	ldr	r0, [pc, #164]	; (80035fc <main+0x3f4>)
 8003556:	f001 fc67 	bl	8004e28 <p>
  for (int i = 0; i < 2; i++) {
 800355a:	2e00      	cmp	r6, #0
 800355c:	f000 8504 	beq.w	8003f68 <main+0xd60>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003560:	2100      	movs	r1, #0
 8003562:	4827      	ldr	r0, [pc, #156]	; (8003600 <main+0x3f8>)
 8003564:	f001 ffb0 	bl	80054c8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8003568:	2100      	movs	r1, #0
 800356a:	4826      	ldr	r0, [pc, #152]	; (8003604 <main+0x3fc>)
 800356c:	f001 ffac 	bl	80054c8 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8003570:	2100      	movs	r1, #0
 8003572:	4825      	ldr	r0, [pc, #148]	; (8003608 <main+0x400>)
 8003574:	f001 ffa8 	bl	80054c8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 8003578:	4821      	ldr	r0, [pc, #132]	; (8003600 <main+0x3f8>)
 800357a:	f001 ff0d 	bl	8005398 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800357e:	4821      	ldr	r0, [pc, #132]	; (8003604 <main+0x3fc>)
 8003580:	f001 ff0a 	bl	8005398 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8003584:	4820      	ldr	r0, [pc, #128]	; (8003608 <main+0x400>)
 8003586:	f001 ff07 	bl	8005398 <HAL_ADC_Start>
  htim1.Instance->CNT = 0;
 800358a:	4820      	ldr	r0, [pc, #128]	; (800360c <main+0x404>)
  htim8.Instance->CNT = 10;
 800358c:	4b20      	ldr	r3, [pc, #128]	; (8003610 <main+0x408>)
  htim1.Instance->CNT = 0;
 800358e:	6802      	ldr	r2, [r0, #0]
  htim8.Instance->CNT = 10;
 8003590:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CNT = 0;
 8003592:	2400      	movs	r4, #0
 8003594:	6254      	str	r4, [r2, #36]	; 0x24
  htim8.Instance->CNT = 10;
 8003596:	220a      	movs	r2, #10
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim1);
 800359a:	f004 facd 	bl	8007b38 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800359e:	4632      	mov	r2, r6
 80035a0:	491c      	ldr	r1, [pc, #112]	; (8003614 <main+0x40c>)
 80035a2:	481d      	ldr	r0, [pc, #116]	; (8003618 <main+0x410>)
 80035a4:	f005 fe72 	bl	800928c <HAL_UART_Receive_IT>
 80035a8:	e038      	b.n	800361c <main+0x414>
 80035aa:	bf00      	nop
 80035ac:	0800d9e4 	.word	0x0800d9e4
 80035b0:	20000488 	.word	0x20000488
 80035b4:	3e4ccccd 	.word	0x3e4ccccd
 80035b8:	3e99999a 	.word	0x3e99999a
 80035bc:	20000340 	.word	0x20000340
 80035c0:	40c00000 	.word	0x40c00000
 80035c4:	200003f4 	.word	0x200003f4
 80035c8:	2000041c 	.word	0x2000041c
 80035cc:	3e19999a 	.word	0x3e19999a
 80035d0:	2000044c 	.word	0x2000044c
 80035d4:	0800da08 	.word	0x0800da08
 80035d8:	42700000 	.word	0x42700000
 80035dc:	0800da50 	.word	0x0800da50
 80035e0:	20000524 	.word	0x20000524
 80035e4:	48000400 	.word	0x48000400
 80035e8:	42960000 	.word	0x42960000
 80035ec:	0800dad8 	.word	0x0800dad8
 80035f0:	0800da6c 	.word	0x0800da6c
 80035f4:	0800da90 	.word	0x0800da90
 80035f8:	0800dac8 	.word	0x0800dac8
 80035fc:	0800d8d8 	.word	0x0800d8d8
 8003600:	20000224 	.word	0x20000224
 8003604:	20000274 	.word	0x20000274
 8003608:	200002c4 	.word	0x200002c4
 800360c:	200005d4 	.word	0x200005d4
 8003610:	20000620 	.word	0x20000620
 8003614:	20000514 	.word	0x20000514
 8003618:	200019d4 	.word	0x200019d4
  p("waiting startup voltage.... : %3.1fV\n", THR_BATTERY_UNVER_VOLTAGE + 2);
 800361c:	4bab      	ldr	r3, [pc, #684]	; (80038cc <main+0x6c4>)
 800361e:	48ac      	ldr	r0, [pc, #688]	; (80038d0 <main+0x6c8>)
 8003620:	2200      	movs	r2, #0
    if (getBatteryVoltage() > THR_BATTERY_UNVER_VOLTAGE + 2.0) {
 8003622:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
  p("waiting startup voltage.... : %3.1fV\n", THR_BATTERY_UNVER_VOLTAGE + 2);
 8003626:	f001 fbff 	bl	8004e28 <p>
    HAL_Delay(1);
 800362a:	2001      	movs	r0, #1
 800362c:	f001 fcec 	bl	8005008 <HAL_Delay>
    if (getBatteryVoltage() > THR_BATTERY_UNVER_VOLTAGE + 2.0) {
 8003630:	f7fd fd46 	bl	80010c0 <getBatteryVoltage>
 8003634:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8003638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      over_startup_voltage = 0;
 800363c:	bfd8      	it	le
 800363e:	2400      	movle	r4, #0
    if (getBatteryVoltage() > THR_BATTERY_UNVER_VOLTAGE + 2.0) {
 8003640:	ddf3      	ble.n	800362a <main+0x422>
      over_startup_voltage++;
 8003642:	3401      	adds	r4, #1
  while (over_startup_voltage < 500) {
 8003644:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8003648:	d1ef      	bne.n	800362a <main+0x422>
  p("ADC : %5d %5d GD %4.2f Batt %4.2f\n", adc_raw.cs_motor[0], adc_raw.cs_motor[1], getGateDriverDCDCVoltage(), getBatteryVoltage());
 800364a:	4ca2      	ldr	r4, [pc, #648]	; (80038d4 <main+0x6cc>)
 800364c:	e9d4 6200 	ldrd	r6, r2, [r4]
 8003650:	9206      	str	r2, [sp, #24]
 8003652:	f7fd fd4d 	bl	80010f0 <getGateDriverDCDCVoltage>
 8003656:	ee10 5a10 	vmov	r5, s0
 800365a:	f7fd fd31 	bl	80010c0 <getBatteryVoltage>
 800365e:	ee10 0a10 	vmov	r0, s0
 8003662:	f7fc ff71 	bl	8000548 <__aeabi_f2d>
 8003666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800366a:	4628      	mov	r0, r5
 800366c:	f7fc ff6c 	bl	8000548 <__aeabi_f2d>
 8003670:	9a06      	ldr	r2, [sp, #24]
 8003672:	e9cd 0100 	strd	r0, r1, [sp]
 8003676:	4898      	ldr	r0, [pc, #608]	; (80038d8 <main+0x6d0>)
 8003678:	4631      	mov	r1, r6
 800367a:	f001 fbd5 	bl	8004e28 <p>
  if (adc_raw.cs_motor[0] < 100 && adc_raw.cs_motor[1] < 100) {
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	2b63      	cmp	r3, #99	; 0x63
 8003682:	f300 847b 	bgt.w	8003f7c <main+0xd74>
 8003686:	6863      	ldr	r3, [r4, #4]
 8003688:	2b63      	cmp	r3, #99	; 0x63
 800368a:	bfd4      	ite	le
 800368c:	2300      	movle	r3, #0
 800368e:	2301      	movgt	r3, #1
 8003690:	02db      	lsls	r3, r3, #11
  HAL_TIM_PWM_Init(&htim8);
 8003692:	4892      	ldr	r0, [pc, #584]	; (80038dc <main+0x6d4>)
 8003694:	61e3      	str	r3, [r4, #28]
 8003696:	f004 faa1 	bl	8007bdc <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim1);
 800369a:	4891      	ldr	r0, [pc, #580]	; (80038e0 <main+0x6d8>)
 800369c:	4d91      	ldr	r5, [pc, #580]	; (80038e4 <main+0x6dc>)
 800369e:	4c92      	ldr	r4, [pc, #584]	; (80038e8 <main+0x6e0>)
 80036a0:	f8df 8254 	ldr.w	r8, [pc, #596]	; 80038f8 <main+0x6f0>
 80036a4:	4f91      	ldr	r7, [pc, #580]	; (80038ec <main+0x6e4>)
 80036a6:	4e92      	ldr	r6, [pc, #584]	; (80038f0 <main+0x6e8>)
 80036a8:	f004 fa98 	bl	8007bdc <HAL_TIM_PWM_Init>
  setPwmAll(TIM_PWM_CENTER);
 80036ac:	f44f 7061 	mov.w	r0, #900	; 0x384
 80036b0:	f001 f9e8 	bl	8004a84 <setPwmAll>
 80036b4:	2301      	movs	r3, #1
 80036b6:	9309      	str	r3, [sp, #36]	; 0x24
 80036b8:	461a      	mov	r2, r3
    switch (turn_on_channel) {
 80036ba:	1e93      	subs	r3, r2, #2
 80036bc:	3a01      	subs	r2, #1
 80036be:	9208      	str	r2, [sp, #32]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	f200 8497 	bhi.w	8003ff4 <main+0xdec>
 80036c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80036ca:	00f8      	.short	0x00f8
 80036cc:	00e600ef 	.word	0x00e600ef
 80036d0:	000500a5 	.word	0x000500a5
        HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);  // M1 high & low
 80036d4:	2108      	movs	r1, #8
 80036d6:	4881      	ldr	r0, [pc, #516]	; (80038dc <main+0x6d4>)
 80036d8:	f004 fe72 	bl	80083c0 <HAL_TIMEx_PWMN_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);  // M0 high & low
 80036dc:	4880      	ldr	r0, [pc, #512]	; (80038e0 <main+0x6d8>)
 80036de:	2108      	movs	r1, #8
 80036e0:	f004 fe6e 	bl	80083c0 <HAL_TIMEx_PWMN_Start>
    interrupt_timer_cnt = 0;
 80036e4:	2000      	movs	r0, #0
 80036e6:	6028      	str	r0, [r5, #0]
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 80036e8:	682b      	ldr	r3, [r5, #0]
 80036ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ee:	f080 8109 	bcs.w	8003904 <main+0x6fc>
        p("fail check!! Current M0 %+6.3f M1 %+6.3f ch:%d\n", getCurrentMotor(0), getCurrentMotor(1), turn_on_channel);
 80036f2:	f8df b208 	ldr.w	fp, [pc, #520]	; 80038fc <main+0x6f4>
  p("reset!!!");
 80036f6:	f8df a208 	ldr.w	sl, [pc, #520]	; 8003900 <main+0x6f8>
      if (isNotZeroCurrent() || getBatteryVoltage() < THR_BATTERY_UNVER_VOLTAGE) {
 80036fa:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 80036fe:	f7fd fd0f 	bl	8001120 <isNotZeroCurrent>
 8003702:	b930      	cbnz	r0, 8003712 <main+0x50a>
 8003704:	f7fd fcdc 	bl	80010c0 <getBatteryVoltage>
 8003708:	eeb4 0ac8 	vcmpe.f32	s0, s16
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	d541      	bpl.n	8003796 <main+0x58e>
        forceStopAllPwmOutputAndTimer();
 8003712:	f001 f9c7 	bl	8004aa4 <forceStopAllPwmOutputAndTimer>
        p("fail check!! Current M0 %+6.3f M1 %+6.3f ch:%d\n", getCurrentMotor(0), getCurrentMotor(1), turn_on_channel);
 8003716:	2000      	movs	r0, #0
 8003718:	f7fd fd26 	bl	8001168 <getCurrentMotor>
 800371c:	2001      	movs	r0, #1
 800371e:	ee10 9a10 	vmov	r9, s0
 8003722:	f7fd fd21 	bl	8001168 <getCurrentMotor>
 8003726:	4648      	mov	r0, r9
 8003728:	ee10 9a10 	vmov	r9, s0
 800372c:	f7fc ff0c 	bl	8000548 <__aeabi_f2d>
 8003730:	460a      	mov	r2, r1
 8003732:	4601      	mov	r1, r0
 8003734:	4613      	mov	r3, r2
 8003736:	460a      	mov	r2, r1
 8003738:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800373c:	4648      	mov	r0, r9
 800373e:	9b08      	ldr	r3, [sp, #32]
 8003740:	9302      	str	r3, [sp, #8]
 8003742:	f7fc ff01 	bl	8000548 <__aeabi_f2d>
 8003746:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800374a:	e9cd 0100 	strd	r0, r1, [sp]
 800374e:	4658      	mov	r0, fp
 8003750:	f001 fb6a 	bl	8004e28 <p>
        power_enable_cnt = 500;
 8003754:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  p("reset!!!");
 8003758:	4650      	mov	r0, sl
        power_enable_cnt = 500;
 800375a:	6023      	str	r3, [r4, #0]
  p("reset!!!");
 800375c:	f001 fb64 	bl	8004e28 <p>
  while (power_enable_cnt > 0) {
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	b19b      	cbz	r3, 800378c <main+0x584>
    power_enable_cnt--;
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	3b01      	subs	r3, #1
 8003768:	6023      	str	r3, [r4, #0]
    sendCanData();
 800376a:	f7ff fa1d 	bl	8002ba8 <sendCanData>
    sendError(0, error_id, error_info, error_value);
 800376e:	ed98 0a00 	vldr	s0, [r8]
 8003772:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003776:	f9b6 1000 	ldrsh.w	r1, [r6]
 800377a:	2000      	movs	r0, #0
 800377c:	f7fd ff12 	bl	80015a4 <sendError>
    HAL_Delay(2);
 8003780:	2002      	movs	r0, #2
 8003782:	f001 fc41 	bl	8005008 <HAL_Delay>
  while (power_enable_cnt > 0) {
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1eb      	bne.n	8003764 <main+0x55c>
  HAL_Delay(2);
 800378c:	2002      	movs	r0, #2
 800378e:	f001 fc3b 	bl	8005008 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8003792:	f002 fff1 	bl	8006778 <HAL_NVIC_SystemReset>
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 8003796:	682b      	ldr	r3, [r5, #0]
 8003798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800379c:	d3af      	bcc.n	80036fe <main+0x4f6>
    p("ch:%2d CurrentCheck OK!! M0 %+6.3f M1 %+6.3f Battery %5.2f GD %5.2f\n", turn_on_channel, getCurrentMotor(0), getCurrentMotor(1), getBatteryVoltage(), getGateDriverDCDCVoltage());
 800379e:	2000      	movs	r0, #0
 80037a0:	f7fd fce2 	bl	8001168 <getCurrentMotor>
 80037a4:	2001      	movs	r0, #1
 80037a6:	ed8d 0a06 	vstr	s0, [sp, #24]
 80037aa:	f7fd fcdd 	bl	8001168 <getCurrentMotor>
 80037ae:	ee10 aa10 	vmov	sl, s0
 80037b2:	f7fd fc85 	bl	80010c0 <getBatteryVoltage>
 80037b6:	ee10 ba10 	vmov	fp, s0
 80037ba:	f7fd fc99 	bl	80010f0 <getGateDriverDCDCVoltage>
 80037be:	9b06      	ldr	r3, [sp, #24]
 80037c0:	ed8d 0a06 	vstr	s0, [sp, #24]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fc febf 	bl	8000548 <__aeabi_f2d>
 80037ca:	9b06      	ldr	r3, [sp, #24]
 80037cc:	460a      	mov	r2, r1
 80037ce:	4601      	mov	r1, r0
 80037d0:	4618      	mov	r0, r3
 80037d2:	4613      	mov	r3, r2
 80037d4:	460a      	mov	r2, r1
 80037d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80037da:	f7fc feb5 	bl	8000548 <__aeabi_f2d>
 80037de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80037e2:	4658      	mov	r0, fp
 80037e4:	f7fc feb0 	bl	8000548 <__aeabi_f2d>
 80037e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037ec:	4650      	mov	r0, sl
 80037ee:	f7fc feab 	bl	8000548 <__aeabi_f2d>
 80037f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80037f6:	e9cd 0100 	strd	r0, r1, [sp]
 80037fa:	9908      	ldr	r1, [sp, #32]
 80037fc:	483d      	ldr	r0, [pc, #244]	; (80038f4 <main+0x6ec>)
 80037fe:	f001 fb13 	bl	8004e28 <p>
  while (turn_on_channel < 6) {
 8003802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003804:	2b06      	cmp	r3, #6
 8003806:	f000 80aa 	beq.w	800395e <main+0x756>
 800380a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800380c:	3301      	adds	r3, #1
 800380e:	9309      	str	r3, [sp, #36]	; 0x24
 8003810:	461a      	mov	r2, r3
 8003812:	e752      	b.n	80036ba <main+0x4b2>
        HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);  // M1 high & low
 8003814:	2104      	movs	r1, #4
 8003816:	4831      	ldr	r0, [pc, #196]	; (80038dc <main+0x6d4>)
 8003818:	f004 fdd2 	bl	80083c0 <HAL_TIMEx_PWMN_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);  // M0 high & low
 800381c:	4830      	ldr	r0, [pc, #192]	; (80038e0 <main+0x6d8>)
 800381e:	2104      	movs	r1, #4
 8003820:	f004 fdce 	bl	80083c0 <HAL_TIMEx_PWMN_Start>
    interrupt_timer_cnt = 0;
 8003824:	2000      	movs	r0, #0
 8003826:	6028      	str	r0, [r5, #0]
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 8003828:	682b      	ldr	r3, [r5, #0]
 800382a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800382e:	f4ff af60 	bcc.w	80036f2 <main+0x4ea>
    p("ch:%2d CurrentCheck OK!! M0 %+6.3f M1 %+6.3f Battery %5.2f GD %5.2f\n", turn_on_channel, getCurrentMotor(0), getCurrentMotor(1), getBatteryVoltage(), getGateDriverDCDCVoltage());
 8003832:	f7fd fc99 	bl	8001168 <getCurrentMotor>
 8003836:	2001      	movs	r0, #1
 8003838:	ed8d 0a06 	vstr	s0, [sp, #24]
 800383c:	f7fd fc94 	bl	8001168 <getCurrentMotor>
 8003840:	ee10 ba10 	vmov	fp, s0
 8003844:	f7fd fc3c 	bl	80010c0 <getBatteryVoltage>
 8003848:	ee10 aa10 	vmov	sl, s0
 800384c:	f7fd fc50 	bl	80010f0 <getGateDriverDCDCVoltage>
 8003850:	9b06      	ldr	r3, [sp, #24]
 8003852:	ed8d 0a06 	vstr	s0, [sp, #24]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe76 	bl	8000548 <__aeabi_f2d>
 800385c:	9b06      	ldr	r3, [sp, #24]
 800385e:	460a      	mov	r2, r1
 8003860:	4601      	mov	r1, r0
 8003862:	4618      	mov	r0, r3
 8003864:	4613      	mov	r3, r2
 8003866:	460a      	mov	r2, r1
 8003868:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800386c:	f7fc fe6c 	bl	8000548 <__aeabi_f2d>
 8003870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003874:	4650      	mov	r0, sl
 8003876:	f7fc fe67 	bl	8000548 <__aeabi_f2d>
 800387a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800387e:	4658      	mov	r0, fp
 8003880:	f7fc fe62 	bl	8000548 <__aeabi_f2d>
 8003884:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003888:	e9cd 0100 	strd	r0, r1, [sp]
 800388c:	9908      	ldr	r1, [sp, #32]
 800388e:	4819      	ldr	r0, [pc, #100]	; (80038f4 <main+0x6ec>)
 8003890:	f001 faca 	bl	8004e28 <p>
  while (turn_on_channel < 6) {
 8003894:	e7b9      	b.n	800380a <main+0x602>
        HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);  // M1 high & low
 8003896:	2100      	movs	r1, #0
 8003898:	4810      	ldr	r0, [pc, #64]	; (80038dc <main+0x6d4>)
 800389a:	f004 fd91 	bl	80083c0 <HAL_TIMEx_PWMN_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);  // M0 high & low
 800389e:	2100      	movs	r1, #0
 80038a0:	480f      	ldr	r0, [pc, #60]	; (80038e0 <main+0x6d8>)
 80038a2:	f004 fd8d 	bl	80083c0 <HAL_TIMEx_PWMN_Start>
        break;
 80038a6:	e7bd      	b.n	8003824 <main+0x61c>
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);  // M0 low
 80038a8:	2108      	movs	r1, #8
 80038aa:	480c      	ldr	r0, [pc, #48]	; (80038dc <main+0x6d4>)
 80038ac:	f004 fa1e 	bl	8007cec <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // M1 low
 80038b0:	2108      	movs	r1, #8
 80038b2:	480b      	ldr	r0, [pc, #44]	; (80038e0 <main+0x6d8>)
 80038b4:	f004 fa1a 	bl	8007cec <HAL_TIM_PWM_Start>
        break;
 80038b8:	e7b4      	b.n	8003824 <main+0x61c>
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);  // M0 low
 80038ba:	2104      	movs	r1, #4
 80038bc:	4807      	ldr	r0, [pc, #28]	; (80038dc <main+0x6d4>)
 80038be:	f004 fa15 	bl	8007cec <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // M1 low
 80038c2:	2104      	movs	r1, #4
 80038c4:	4806      	ldr	r0, [pc, #24]	; (80038e0 <main+0x6d8>)
 80038c6:	f004 fa11 	bl	8007cec <HAL_TIM_PWM_Start>
        break;
 80038ca:	e7ab      	b.n	8003824 <main+0x61c>
 80038cc:	40340000 	.word	0x40340000
 80038d0:	0800dae0 	.word	0x0800dae0
 80038d4:	20000200 	.word	0x20000200
 80038d8:	0800db08 	.word	0x0800db08
 80038dc:	20000620 	.word	0x20000620
 80038e0:	200005d4 	.word	0x200005d4
 80038e4:	20000440 	.word	0x20000440
 80038e8:	200004e8 	.word	0x200004e8
 80038ec:	20000438 	.word	0x20000438
 80038f0:	20000436 	.word	0x20000436
 80038f4:	0800db5c 	.word	0x0800db5c
 80038f8:	2000043c 	.word	0x2000043c
 80038fc:	0800db2c 	.word	0x0800db2c
 8003900:	0800d92c 	.word	0x0800d92c
    p("ch:%2d CurrentCheck OK!! M0 %+6.3f M1 %+6.3f Battery %5.2f GD %5.2f\n", turn_on_channel, getCurrentMotor(0), getCurrentMotor(1), getBatteryVoltage(), getGateDriverDCDCVoltage());
 8003904:	f7fd fc30 	bl	8001168 <getCurrentMotor>
 8003908:	2001      	movs	r0, #1
 800390a:	ee10 7a10 	vmov	r7, s0
 800390e:	f7fd fc2b 	bl	8001168 <getCurrentMotor>
 8003912:	ee10 4a10 	vmov	r4, s0
 8003916:	f7fd fbd3 	bl	80010c0 <getBatteryVoltage>
 800391a:	ee10 6a10 	vmov	r6, s0
 800391e:	f7fd fbe7 	bl	80010f0 <getGateDriverDCDCVoltage>
 8003922:	4638      	mov	r0, r7
 8003924:	ee10 7a10 	vmov	r7, s0
 8003928:	f7fc fe0e 	bl	8000548 <__aeabi_f2d>
 800392c:	4602      	mov	r2, r0
 800392e:	460b      	mov	r3, r1
 8003930:	4638      	mov	r0, r7
 8003932:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003936:	f7fc fe07 	bl	8000548 <__aeabi_f2d>
 800393a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800393e:	4630      	mov	r0, r6
 8003940:	f7fc fe02 	bl	8000548 <__aeabi_f2d>
 8003944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003948:	4620      	mov	r0, r4
 800394a:	f7fc fdfd 	bl	8000548 <__aeabi_f2d>
 800394e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003952:	e9cd 0100 	strd	r0, r1, [sp]
 8003956:	48d0      	ldr	r0, [pc, #832]	; (8003c98 <main+0xa90>)
 8003958:	2105      	movs	r1, #5
 800395a:	f001 fa65 	bl	8004e28 <p>
  if (isPushedSW1()) {
 800395e:	f7fd fef3 	bl	8001748 <isPushedSW1>
 8003962:	2800      	cmp	r0, #0
 8003964:	f000 8303 	beq.w	8003f6e <main+0xd66>
    flash.board_id = 0;
 8003968:	2000      	movs	r0, #0
    flash.board_id = 1;
 800396a:	4bcc      	ldr	r3, [pc, #816]	; (8003c9c <main+0xa94>)
 800396c:	461c      	mov	r4, r3
 800396e:	6098      	str	r0, [r3, #8]
    writeCanBoardID(flash.board_id);
 8003970:	f7fd feb0 	bl	80016d4 <writeCanBoardID>
    p("sed board id %d\n", flash.board_id);
 8003974:	48ca      	ldr	r0, [pc, #808]	; (8003ca0 <main+0xa98>)
 8003976:	68a1      	ldr	r1, [r4, #8]
 8003978:	f001 fa56 	bl	8004e28 <p>
    HAL_Delay(1000);
 800397c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003980:	f001 fb42 	bl	8005008 <HAL_Delay>
  if (isPushedSW4()) {
 8003984:	f7fd ff04 	bl	8001790 <isPushedSW4>
 8003988:	2800      	cmp	r0, #0
 800398a:	f040 8303 	bne.w	8003f94 <main+0xd8c>
  CAN_Filter_Init(flash.board_id);
 800398e:	4bc3      	ldr	r3, [pc, #780]	; (8003c9c <main+0xa94>)
 8003990:	f8df 9338 	ldr.w	r9, [pc, #824]	; 8003ccc <main+0xac4>
 8003994:	8918      	ldrh	r0, [r3, #8]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003996:	ed9f 8ac3 	vldr	s16, [pc, #780]	; 8003ca4 <main+0xa9c>
 800399a:	4fc3      	ldr	r7, [pc, #780]	; (8003ca8 <main+0xaa0>)
 800399c:	4cc3      	ldr	r4, [pc, #780]	; (8003cac <main+0xaa4>)
 800399e:	4ec4      	ldr	r6, [pc, #784]	; (8003cb0 <main+0xaa8>)
 80039a0:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8003cd0 <main+0xac8>
 80039a4:	f8df a32c 	ldr.w	sl, [pc, #812]	; 8003cd4 <main+0xacc>
        manual_offset_radian = 0;
 80039a8:	eddf 8ac2 	vldr	s17, [pc, #776]	; 8003cb4 <main+0xaac>
  CAN_Filter_Init(flash.board_id);
 80039ac:	f7fd fd00 	bl	80013b0 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 80039b0:	48c1      	ldr	r0, [pc, #772]	; (8003cb8 <main+0xab0>)
 80039b2:	f002 fc17 	bl	80061e4 <HAL_CAN_Start>
  p("start main loop!\n");
 80039b6:	48c1      	ldr	r0, [pc, #772]	; (8003cbc <main+0xab4>)
 80039b8:	f001 fa36 	bl	8004e28 <p>
  setLedRed(false);
 80039bc:	2000      	movs	r0, #0
 80039be:	f7fd fef3 	bl	80017a8 <setLedRed>
  setLedGreen(false);
 80039c2:	2000      	movs	r0, #0
 80039c4:	f7fd ff00 	bl	80017c8 <setLedGreen>
  setLedBlue(false);
 80039c8:	2000      	movs	r0, #0
 80039ca:	f7fd fef5 	bl	80017b8 <setLedBlue>
  if (uart_rx_flag) {
 80039ce:	f899 3000 	ldrb.w	r3, [r9]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d17e      	bne.n	8003ad4 <main+0x8cc>
  int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 80039d6:	6872      	ldr	r2, [r6, #4]
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	eba3 0b02 	sub.w	fp, r3, r2
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 80039de:	f51b 4f00 	cmn.w	fp, #32768	; 0x8000
 80039e2:	f280 8123 	bge.w	8003c2c <main+0xa24>
    temp += ENC_CNT_MAX;
 80039e6:	f50b 3b80 	add.w	fp, fp, #65536	; 0x10000
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 80039ea:	ee07 ba90 	vmov	s15, fp
 80039ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 80039f2:	6863      	ldr	r3, [r4, #4]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 80039f4:	ee67 7a88 	vmul.f32	s15, s15, s16
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 80039f8:	2b00      	cmp	r3, #0
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 80039fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 80039fe:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8003a02:	bfb8      	it	lt
 8003a04:	425b      	neglt	r3, r3
 8003a06:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 8003a0a:	428b      	cmp	r3, r1
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003a0c:	ee17 3a10 	vmov	r3, s14
    motor_real[motor].diff_cnt_max = temp;
 8003a10:	bfb8      	it	lt
 8003a12:	f8c4 b004 	strlt.w	fp, [r4, #4]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bfb8      	it	lt
 8003a1a:	425b      	neglt	r3, r3
 8003a1c:	2b4b      	cmp	r3, #75	; 0x4b
 8003a1e:	dd04      	ble.n	8003a2a <main+0x822>
 8003a20:	f8d8 3000 	ldr.w	r3, [r8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 828d 	beq.w	8003f44 <main+0xd3c>
  motor_real[motor].pre_enc_cnt_raw = ma702[motor].enc_raw;
 8003a2a:	6022      	str	r2, [r4, #0]
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8003a2c:	edc4 7a02 	vstr	s15, [r4, #8]
  motor_real[motor].pre_rps = motor_real[motor].rps;
 8003a30:	edc4 7a03 	vstr	s15, [r4, #12]
  int temp = motor_real[motor].pre_enc_cnt_raw - ma702[motor].enc_raw;
 8003a34:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003a36:	6963      	ldr	r3, [r4, #20]
 8003a38:	eba3 0b02 	sub.w	fp, r3, r2
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8003a3c:	f51b 4f00 	cmn.w	fp, #32768	; 0x8000
 8003a40:	f280 80ee 	bge.w	8003c20 <main+0xa18>
    temp += ENC_CNT_MAX;
 8003a44:	f50b 3b80 	add.w	fp, fp, #65536	; 0x10000
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003a48:	ee07 ba90 	vmov	s15, fp
 8003a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8003a50:	69a3      	ldr	r3, [r4, #24]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003a52:	ee67 7a88 	vmul.f32	s15, s15, s16
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8003a56:	2b00      	cmp	r3, #0
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003a58:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (abs(motor_real[motor].diff_cnt_max) < abs(temp)) {
 8003a5c:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8003a60:	bfb8      	it	lt
 8003a62:	425b      	neglt	r3, r3
 8003a64:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 8003a68:	428b      	cmp	r3, r1
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003a6a:	ee17 3a10 	vmov	r3, s14
    motor_real[motor].diff_cnt_max = temp;
 8003a6e:	bfb8      	it	lt
 8003a70:	f8c4 b018 	strlt.w	fp, [r4, #24]
  if (abs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && free_wheel_cnt == 0) {
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bfb8      	it	lt
 8003a78:	425b      	neglt	r3, r3
 8003a7a:	2b4b      	cmp	r3, #75	; 0x4b
 8003a7c:	dd04      	ble.n	8003a88 <main+0x880>
 8003a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 824c 	beq.w	8003f20 <main+0xd18>
  motor_real[motor].pre_enc_cnt_raw = ma702[motor].enc_raw;
 8003a88:	6162      	str	r2, [r4, #20]
  motor_real[motor].rps = (float)temp / ENC_CNT_MAX * 1000;
 8003a8a:	edc4 7a07 	vstr	s15, [r4, #28]
  motor_real[motor].pre_rps = motor_real[motor].rps;
 8003a8e:	edc4 7a08 	vstr	s15, [r4, #32]
    sendCanData();
 8003a92:	f7ff f889 	bl	8002ba8 <sendCanData>
    if (calib_process.enc_calib_cnt != 0) {
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f040 823e 	bne.w	8003f1a <main+0xd12>
    } else if (calib_process.motor_calib_cnt != 0) {
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 8237 	beq.w	8003f14 <main+0xd0c>
      motorCalibrationMode();
 8003aa6:	f7fe fd67 	bl	8002578 <motorCalibrationMode>
    protect();
 8003aaa:	f7ff f955 	bl	8002d58 <protect>
    setLedRed(true);
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f7fd fe7a 	bl	80017a8 <setLedRed>
    main_loop_remain_counter = INTERRUPT_KHZ_1MS - interrupt_timer_cnt;
 8003ab4:	682b      	ldr	r3, [r5, #0]
 8003ab6:	f1c3 0314 	rsb	r3, r3, #20
 8003aba:	f8ca 3000 	str.w	r3, [sl]
    while (interrupt_timer_cnt <= INTERRUPT_KHZ_1MS)
 8003abe:	682b      	ldr	r3, [r5, #0]
 8003ac0:	2b14      	cmp	r3, #20
 8003ac2:	d9fc      	bls.n	8003abe <main+0x8b6>
    interrupt_timer_cnt = 0;
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	6028      	str	r0, [r5, #0]
    setLedRed(false);
 8003ac8:	f7fd fe6e 	bl	80017a8 <setLedRed>
  if (uart_rx_flag) {
 8003acc:	f899 3000 	ldrb.w	r3, [r9]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d080      	beq.n	80039d6 <main+0x7ce>
    uart_rx_flag = false;
 8003ad4:	2300      	movs	r3, #0
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8003ad6:	497a      	ldr	r1, [pc, #488]	; (8003cc0 <main+0xab8>)
 8003ad8:	487a      	ldr	r0, [pc, #488]	; (8003cc4 <main+0xabc>)
    uart_rx_flag = false;
 8003ada:	f889 3000 	strb.w	r3, [r9]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f005 fbd4 	bl	800928c <HAL_UART_Receive_IT>
    switch (uart_rx_buf[0]) {
 8003ae4:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <main+0xab8>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	3b30      	subs	r3, #48	; 0x30
 8003aea:	2b49      	cmp	r3, #73	; 0x49
 8003aec:	f63f af73 	bhi.w	80039d6 <main+0x7ce>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <main+0x8f0>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003f09 	.word	0x08003f09
 8003afc:	080039d7 	.word	0x080039d7
 8003b00:	080039d7 	.word	0x080039d7
 8003b04:	080039d7 	.word	0x080039d7
 8003b08:	080039d7 	.word	0x080039d7
 8003b0c:	080039d7 	.word	0x080039d7
 8003b10:	080039d7 	.word	0x080039d7
 8003b14:	080039d7 	.word	0x080039d7
 8003b18:	080039d7 	.word	0x080039d7
 8003b1c:	080039d7 	.word	0x080039d7
 8003b20:	080039d7 	.word	0x080039d7
 8003b24:	080039d7 	.word	0x080039d7
 8003b28:	080039d7 	.word	0x080039d7
 8003b2c:	080039d7 	.word	0x080039d7
 8003b30:	080039d7 	.word	0x080039d7
 8003b34:	080039d7 	.word	0x080039d7
 8003b38:	080039d7 	.word	0x080039d7
 8003b3c:	080039d7 	.word	0x080039d7
 8003b40:	080039d7 	.word	0x080039d7
 8003b44:	080039d7 	.word	0x080039d7
 8003b48:	080039d7 	.word	0x080039d7
 8003b4c:	080039d7 	.word	0x080039d7
 8003b50:	080039d7 	.word	0x080039d7
 8003b54:	080039d7 	.word	0x080039d7
 8003b58:	080039d7 	.word	0x080039d7
 8003b5c:	080039d7 	.word	0x080039d7
 8003b60:	080039d7 	.word	0x080039d7
 8003b64:	080039d7 	.word	0x080039d7
 8003b68:	080039d7 	.word	0x080039d7
 8003b6c:	080039d7 	.word	0x080039d7
 8003b70:	080039d7 	.word	0x080039d7
 8003b74:	080039d7 	.word	0x080039d7
 8003b78:	080039d7 	.word	0x080039d7
 8003b7c:	080039d7 	.word	0x080039d7
 8003b80:	080039d7 	.word	0x080039d7
 8003b84:	080039d7 	.word	0x080039d7
 8003b88:	080039d7 	.word	0x080039d7
 8003b8c:	080039d7 	.word	0x080039d7
 8003b90:	080039d7 	.word	0x080039d7
 8003b94:	080039d7 	.word	0x080039d7
 8003b98:	080039d7 	.word	0x080039d7
 8003b9c:	080039d7 	.word	0x080039d7
 8003ba0:	080039d7 	.word	0x080039d7
 8003ba4:	080039d7 	.word	0x080039d7
 8003ba8:	080039d7 	.word	0x080039d7
 8003bac:	080039d7 	.word	0x080039d7
 8003bb0:	080039d7 	.word	0x080039d7
 8003bb4:	080039d7 	.word	0x080039d7
 8003bb8:	080039d7 	.word	0x080039d7
 8003bbc:	08003ef5 	.word	0x08003ef5
 8003bc0:	080039d7 	.word	0x080039d7
 8003bc4:	08003ec5 	.word	0x08003ec5
 8003bc8:	08003e97 	.word	0x08003e97
 8003bcc:	08003e51 	.word	0x08003e51
 8003bd0:	08003e23 	.word	0x08003e23
 8003bd4:	08003df5 	.word	0x08003df5
 8003bd8:	08003dc7 	.word	0x08003dc7
 8003bdc:	080039d7 	.word	0x080039d7
 8003be0:	080039d7 	.word	0x080039d7
 8003be4:	080039d7 	.word	0x080039d7
 8003be8:	080039d7 	.word	0x080039d7
 8003bec:	080039d7 	.word	0x080039d7
 8003bf0:	08003da7 	.word	0x08003da7
 8003bf4:	080039d7 	.word	0x080039d7
 8003bf8:	080039d7 	.word	0x080039d7
 8003bfc:	08003d7d 	.word	0x08003d7d
 8003c00:	08003d37 	.word	0x08003d37
 8003c04:	08003d1f 	.word	0x08003d1f
 8003c08:	08003cd9 	.word	0x08003cd9
 8003c0c:	080039d7 	.word	0x080039d7
 8003c10:	080039d7 	.word	0x080039d7
 8003c14:	08003c67 	.word	0x08003c67
 8003c18:	080039d7 	.word	0x080039d7
 8003c1c:	08003c39 	.word	0x08003c39
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 8003c20:	f5bb 4f00 	cmp.w	fp, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 8003c24:	bfc8      	it	gt
 8003c26:	f5ab 3b80 	subgt.w	fp, fp, #65536	; 0x10000
 8003c2a:	e70d      	b.n	8003a48 <main+0x840>
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 8003c2c:	f5bb 4f00 	cmp.w	fp, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 8003c30:	bfc8      	it	gt
 8003c32:	f5ab 3b80 	subgt.w	fp, fp, #65536	; 0x10000
 8003c36:	e6d8      	b.n	80039ea <main+0x7e2>
        motor_real[0].k += 0.1;
 8003c38:	6920      	ldr	r0, [r4, #16]
 8003c3a:	f7fc fc85 	bl	8000548 <__aeabi_f2d>
 8003c3e:	a314      	add	r3, pc, #80	; (adr r3, 8003c90 <main+0xa88>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fc fb22 	bl	800028c <__adddf3>
 8003c48:	f7fc ffce 	bl	8000be8 <__aeabi_d2f>
 8003c4c:	6120      	str	r0, [r4, #16]
        motor_real[1].k += 0.1;
 8003c4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c50:	f7fc fc7a 	bl	8000548 <__aeabi_f2d>
 8003c54:	a30e      	add	r3, pc, #56	; (adr r3, 8003c90 <main+0xa88>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fb17 	bl	800028c <__adddf3>
 8003c5e:	f7fc ffc3 	bl	8000be8 <__aeabi_d2f>
 8003c62:	6260      	str	r0, [r4, #36]	; 0x24
        break;
 8003c64:	e6b7      	b.n	80039d6 <main+0x7ce>
        cmd[0].speed += 0.5;
 8003c66:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <main+0xac0>)
 8003c68:	ed93 7a00 	vldr	s14, [r3]
        cmd[1].speed += 0.5;
 8003c6c:	edd3 7a05 	vldr	s15, [r3, #20]
        cmd[0].speed += 0.5;
 8003c70:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003c74:	ee37 7a26 	vadd.f32	s14, s14, s13
        cmd[1].speed += 0.5;
 8003c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        cmd[1].speed -= 0.5;
 8003c7c:	461a      	mov	r2, r3
        cmd[0].speed -= 0.5;
 8003c7e:	ed83 7a00 	vstr	s14, [r3]
        cmd[1].speed -= 0.5;
 8003c82:	edc3 7a05 	vstr	s15, [r3, #20]
        cmd[0].timeout_cnt = -1;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	6113      	str	r3, [r2, #16]
        cmd[1].timeout_cnt = -1;
 8003c8c:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 8003c8e:	e6a2      	b.n	80039d6 <main+0x7ce>
 8003c90:	9999999a 	.word	0x9999999a
 8003c94:	3fb99999 	.word	0x3fb99999
 8003c98:	0800db5c 	.word	0x0800db5c
 8003c9c:	20000340 	.word	0x20000340
 8003ca0:	0800dba4 	.word	0x0800dba4
 8003ca4:	3c7a0000 	.word	0x3c7a0000
 8003ca8:	200003b8 	.word	0x200003b8
 8003cac:	2000045c 	.word	0x2000045c
 8003cb0:	20000588 	.word	0x20000588
 8003cb4:	00000000 	.word	0x00000000
 8003cb8:	20000318 	.word	0x20000318
 8003cbc:	0800dbd0 	.word	0x0800dbd0
 8003cc0:	20000514 	.word	0x20000514
 8003cc4:	200019d4 	.word	0x200019d4
 8003cc8:	200003f4 	.word	0x200003f4
 8003ccc:	2000051e 	.word	0x2000051e
 8003cd0:	20000004 	.word	0x20000004
 8003cd4:	20000444 	.word	0x20000444
        pid[0].pid_kd += 0.1;
 8003cd8:	4bb7      	ldr	r3, [pc, #732]	; (8003fb8 <main+0xdb0>)
 8003cda:	6898      	ldr	r0, [r3, #8]
 8003cdc:	f7fc fc34 	bl	8000548 <__aeabi_f2d>
 8003ce0:	a3b1      	add	r3, pc, #708	; (adr r3, 8003fa8 <main+0xda0>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f7fc fad1 	bl	800028c <__adddf3>
 8003cea:	f7fc ff7d 	bl	8000be8 <__aeabi_d2f>
 8003cee:	4bb2      	ldr	r3, [pc, #712]	; (8003fb8 <main+0xdb0>)
 8003cf0:	4683      	mov	fp, r0
 8003cf2:	6098      	str	r0, [r3, #8]
        pid[1].pid_kd += 0.1;
 8003cf4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cf6:	f7fc fc27 	bl	8000548 <__aeabi_f2d>
 8003cfa:	a3ab      	add	r3, pc, #684	; (adr r3, 8003fa8 <main+0xda0>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f7fc fac4 	bl	800028c <__adddf3>
        pid[1].pid_kd -= 0.1;
 8003d04:	f7fc ff70 	bl	8000be8 <__aeabi_d2f>
 8003d08:	4bab      	ldr	r3, [pc, #684]	; (8003fb8 <main+0xdb0>)
 8003d0a:	6398      	str	r0, [r3, #56]	; 0x38
        p("\nKD %+5.2f\n", pid[0].pid_kd);
 8003d0c:	4658      	mov	r0, fp
 8003d0e:	f7fc fc1b 	bl	8000548 <__aeabi_f2d>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	48a9      	ldr	r0, [pc, #676]	; (8003fbc <main+0xdb4>)
 8003d18:	f001 f886 	bl	8004e28 <p>
        break;
 8003d1c:	e65b      	b.n	80039d6 <main+0x7ce>
        cmd[0].speed -= 0.5;
 8003d1e:	4ba8      	ldr	r3, [pc, #672]	; (8003fc0 <main+0xdb8>)
 8003d20:	ed93 7a00 	vldr	s14, [r3]
        cmd[1].speed -= 0.5;
 8003d24:	edd3 7a05 	vldr	s15, [r3, #20]
        cmd[0].speed -= 0.5;
 8003d28:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003d2c:	ee37 7a66 	vsub.f32	s14, s14, s13
        cmd[1].speed -= 0.5;
 8003d30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003d34:	e7a2      	b.n	8003c7c <main+0xa74>
        pid[0].pid_ki += 0.1;
 8003d36:	4ba0      	ldr	r3, [pc, #640]	; (8003fb8 <main+0xdb0>)
 8003d38:	68d8      	ldr	r0, [r3, #12]
 8003d3a:	f7fc fc05 	bl	8000548 <__aeabi_f2d>
 8003d3e:	a39a      	add	r3, pc, #616	; (adr r3, 8003fa8 <main+0xda0>)
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	f7fc faa2 	bl	800028c <__adddf3>
 8003d48:	f7fc ff4e 	bl	8000be8 <__aeabi_d2f>
 8003d4c:	4b9a      	ldr	r3, [pc, #616]	; (8003fb8 <main+0xdb0>)
 8003d4e:	4683      	mov	fp, r0
 8003d50:	60d8      	str	r0, [r3, #12]
        pid[1].pid_ki += 0.1;
 8003d52:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d54:	f7fc fbf8 	bl	8000548 <__aeabi_f2d>
 8003d58:	a393      	add	r3, pc, #588	; (adr r3, 8003fa8 <main+0xda0>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f7fc fa95 	bl	800028c <__adddf3>
        pid[1].pid_ki -= 0.1;
 8003d62:	f7fc ff41 	bl	8000be8 <__aeabi_d2f>
 8003d66:	4b94      	ldr	r3, [pc, #592]	; (8003fb8 <main+0xdb0>)
 8003d68:	63d8      	str	r0, [r3, #60]	; 0x3c
        p("\nKI %+5.2f\n", pid[0].pid_ki);
 8003d6a:	4658      	mov	r0, fp
 8003d6c:	f7fc fbec 	bl	8000548 <__aeabi_f2d>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4893      	ldr	r0, [pc, #588]	; (8003fc4 <main+0xdbc>)
 8003d76:	f001 f857 	bl	8004e28 <p>
        break;
 8003d7a:	e62c      	b.n	80039d6 <main+0x7ce>
        manual_offset_radian += 0.01;
 8003d7c:	4b92      	ldr	r3, [pc, #584]	; (8003fc8 <main+0xdc0>)
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	f7fc fbe2 	bl	8000548 <__aeabi_f2d>
 8003d84:	a38a      	add	r3, pc, #552	; (adr r3, 8003fb0 <main+0xda8>)
 8003d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8a:	f7fc fa7f 	bl	800028c <__adddf3>
        manual_offset_radian -= 0.01;
 8003d8e:	f7fc ff2b 	bl	8000be8 <__aeabi_d2f>
 8003d92:	4b8d      	ldr	r3, [pc, #564]	; (8003fc8 <main+0xdc0>)
 8003d94:	6018      	str	r0, [r3, #0]
        p("offset %+4.2f\n", manual_offset_radian);
 8003d96:	f7fc fbd7 	bl	8000548 <__aeabi_f2d>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	488b      	ldr	r0, [pc, #556]	; (8003fcc <main+0xdc4>)
 8003da0:	f001 f842 	bl	8004e28 <p>
        break;
 8003da4:	e617      	b.n	80039d6 <main+0x7ce>
        p("run mode!\n");
 8003da6:	488a      	ldr	r0, [pc, #552]	; (8003fd0 <main+0xdc8>)
 8003da8:	f001 f83e 	bl	8004e28 <p>
        manual_offset_radian = 0;
 8003dac:	4b86      	ldr	r3, [pc, #536]	; (8003fc8 <main+0xdc0>)
 8003dae:	edc3 8a00 	vstr	s17, [r3]
        cmd[0].out_v = 0;
 8003db2:	4b83      	ldr	r3, [pc, #524]	; (8003fc0 <main+0xdb8>)
        calib_process.enc_calib_cnt = 0;
 8003db4:	2200      	movs	r2, #0
        cmd[0].out_v = 0;
 8003db6:	edc3 8a02 	vstr	s17, [r3, #8]
        cmd[1].out_v = 0;
 8003dba:	edc3 8a07 	vstr	s17, [r3, #28]
        calib_process.enc_calib_cnt = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	e9c7 2300 	strd	r2, r3, [r7]
        break;
 8003dc4:	e607      	b.n	80039d6 <main+0x7ce>
        motor_real[0].k -= 0.1;
 8003dc6:	6920      	ldr	r0, [r4, #16]
 8003dc8:	f7fc fbbe 	bl	8000548 <__aeabi_f2d>
 8003dcc:	a376      	add	r3, pc, #472	; (adr r3, 8003fa8 <main+0xda0>)
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f7fc fa59 	bl	8000288 <__aeabi_dsub>
 8003dd6:	f7fc ff07 	bl	8000be8 <__aeabi_d2f>
 8003dda:	6120      	str	r0, [r4, #16]
        motor_real[1].k -= 0.1;
 8003ddc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003dde:	f7fc fbb3 	bl	8000548 <__aeabi_f2d>
 8003de2:	a371      	add	r3, pc, #452	; (adr r3, 8003fa8 <main+0xda0>)
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f7fc fa4e 	bl	8000288 <__aeabi_dsub>
 8003dec:	f7fc fefc 	bl	8000be8 <__aeabi_d2f>
 8003df0:	6260      	str	r0, [r4, #36]	; 0x24
        break;
 8003df2:	e5f0      	b.n	80039d6 <main+0x7ce>
        pid[0].pid_kd -= 0.1;
 8003df4:	4b70      	ldr	r3, [pc, #448]	; (8003fb8 <main+0xdb0>)
 8003df6:	6898      	ldr	r0, [r3, #8]
 8003df8:	f7fc fba6 	bl	8000548 <__aeabi_f2d>
 8003dfc:	a36a      	add	r3, pc, #424	; (adr r3, 8003fa8 <main+0xda0>)
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f7fc fa41 	bl	8000288 <__aeabi_dsub>
 8003e06:	f7fc feef 	bl	8000be8 <__aeabi_d2f>
 8003e0a:	4b6b      	ldr	r3, [pc, #428]	; (8003fb8 <main+0xdb0>)
 8003e0c:	4683      	mov	fp, r0
 8003e0e:	6098      	str	r0, [r3, #8]
        pid[1].pid_kd -= 0.1;
 8003e10:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e12:	f7fc fb99 	bl	8000548 <__aeabi_f2d>
 8003e16:	a364      	add	r3, pc, #400	; (adr r3, 8003fa8 <main+0xda0>)
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f7fc fa34 	bl	8000288 <__aeabi_dsub>
 8003e20:	e770      	b.n	8003d04 <main+0xafc>
        pid[0].pid_ki -= 0.1;
 8003e22:	4b65      	ldr	r3, [pc, #404]	; (8003fb8 <main+0xdb0>)
 8003e24:	68d8      	ldr	r0, [r3, #12]
 8003e26:	f7fc fb8f 	bl	8000548 <__aeabi_f2d>
 8003e2a:	a35f      	add	r3, pc, #380	; (adr r3, 8003fa8 <main+0xda0>)
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f7fc fa2a 	bl	8000288 <__aeabi_dsub>
 8003e34:	f7fc fed8 	bl	8000be8 <__aeabi_d2f>
 8003e38:	4b5f      	ldr	r3, [pc, #380]	; (8003fb8 <main+0xdb0>)
 8003e3a:	4683      	mov	fp, r0
 8003e3c:	60d8      	str	r0, [r3, #12]
        pid[1].pid_ki -= 0.1;
 8003e3e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e40:	f7fc fb82 	bl	8000548 <__aeabi_f2d>
 8003e44:	a358      	add	r3, pc, #352	; (adr r3, 8003fa8 <main+0xda0>)
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f7fc fa1d 	bl	8000288 <__aeabi_dsub>
 8003e4e:	e788      	b.n	8003d62 <main+0xb5a>
        pid[0].pid_kp += 0.1;
 8003e50:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <main+0xdb0>)
 8003e52:	6858      	ldr	r0, [r3, #4]
 8003e54:	f7fc fb78 	bl	8000548 <__aeabi_f2d>
 8003e58:	a353      	add	r3, pc, #332	; (adr r3, 8003fa8 <main+0xda0>)
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	f7fc fa15 	bl	800028c <__adddf3>
 8003e62:	f7fc fec1 	bl	8000be8 <__aeabi_d2f>
 8003e66:	4b54      	ldr	r3, [pc, #336]	; (8003fb8 <main+0xdb0>)
 8003e68:	4683      	mov	fp, r0
 8003e6a:	6058      	str	r0, [r3, #4]
        pid[1].pid_kp += 0.1;
 8003e6c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003e6e:	f7fc fb6b 	bl	8000548 <__aeabi_f2d>
 8003e72:	a34d      	add	r3, pc, #308	; (adr r3, 8003fa8 <main+0xda0>)
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f7fc fa08 	bl	800028c <__adddf3>
        pid[1].pid_kp -= 0.1;
 8003e7c:	f7fc feb4 	bl	8000be8 <__aeabi_d2f>
 8003e80:	4b4d      	ldr	r3, [pc, #308]	; (8003fb8 <main+0xdb0>)
 8003e82:	6358      	str	r0, [r3, #52]	; 0x34
        p("\nKP %+5.2f\n", pid[0].pid_kp);
 8003e84:	4658      	mov	r0, fp
 8003e86:	f7fc fb5f 	bl	8000548 <__aeabi_f2d>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4851      	ldr	r0, [pc, #324]	; (8003fd4 <main+0xdcc>)
 8003e90:	f000 ffca 	bl	8004e28 <p>
        break;
 8003e94:	e59f      	b.n	80039d6 <main+0x7ce>
        pid[0].pid_kp -= 0.1;
 8003e96:	4b48      	ldr	r3, [pc, #288]	; (8003fb8 <main+0xdb0>)
 8003e98:	6858      	ldr	r0, [r3, #4]
 8003e9a:	f7fc fb55 	bl	8000548 <__aeabi_f2d>
 8003e9e:	a342      	add	r3, pc, #264	; (adr r3, 8003fa8 <main+0xda0>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f7fc f9f0 	bl	8000288 <__aeabi_dsub>
 8003ea8:	f7fc fe9e 	bl	8000be8 <__aeabi_d2f>
 8003eac:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <main+0xdb0>)
 8003eae:	4683      	mov	fp, r0
 8003eb0:	6058      	str	r0, [r3, #4]
        pid[1].pid_kp -= 0.1;
 8003eb2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003eb4:	f7fc fb48 	bl	8000548 <__aeabi_f2d>
 8003eb8:	a33b      	add	r3, pc, #236	; (adr r3, 8003fa8 <main+0xda0>)
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	f7fc f9e3 	bl	8000288 <__aeabi_dsub>
 8003ec2:	e7db      	b.n	8003e7c <main+0xc74>
        p("\n\nstart calib mode!\n\n");
 8003ec4:	4844      	ldr	r0, [pc, #272]	; (8003fd8 <main+0xdd0>)
 8003ec6:	f000 ffaf 	bl	8004e28 <p>
  p("calibration mode!\n");
 8003eca:	4844      	ldr	r0, [pc, #272]	; (8003fdc <main+0xdd4>)
 8003ecc:	f000 ffac 	bl	8004e28 <p>
  manual_offset_radian = 0;
 8003ed0:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <main+0xdc0>)
  cmd[0].speed = 0;
 8003ed2:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <main+0xdb8>)
  manual_offset_radian = 0;
 8003ed4:	edc3 8a00 	vstr	s17, [r3]
  cmd[0].out_v_final = 2.0;
 8003ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003edc:	60d3      	str	r3, [r2, #12]
  cmd[1].out_v_final = 2.0;
 8003ede:	6213      	str	r3, [r2, #32]
  cmd[0].speed = 0;
 8003ee0:	edc2 8a00 	vstr	s17, [r2]
  cmd[1].speed = 0;
 8003ee4:	edc2 8a05 	vstr	s17, [r2, #20]
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003eee:	e9c7 2300 	strd	r2, r3, [r7]
}
 8003ef2:	e570      	b.n	80039d6 <main+0x7ce>
        manual_offset_radian -= 0.01;
 8003ef4:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <main+0xdc0>)
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	f7fc fb26 	bl	8000548 <__aeabi_f2d>
 8003efc:	a32c      	add	r3, pc, #176	; (adr r3, 8003fb0 <main+0xda8>)
 8003efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f02:	f7fc f9c1 	bl	8000288 <__aeabi_dsub>
 8003f06:	e742      	b.n	8003d8e <main+0xb86>
        p("enter sleep!\n");
 8003f08:	4835      	ldr	r0, [pc, #212]	; (8003fe0 <main+0xdd8>)
 8003f0a:	f000 ff8d 	bl	8004e28 <p>
        forceStopAllPwmOutputAndTimer();
 8003f0e:	f000 fdc9 	bl	8004aa4 <forceStopAllPwmOutputAndTimer>
        while (1)
 8003f12:	e7fe      	b.n	8003f12 <main+0xd0a>
      runMode();
 8003f14:	f7fd ff48 	bl	8001da8 <runMode>
 8003f18:	e5c7      	b.n	8003aaa <main+0x8a2>
      encoderCalibrationMode();
 8003f1a:	f7fe f945 	bl	80021a8 <encoderCalibrationMode>
 8003f1e:	e5c4      	b.n	8003aaa <main+0x8a2>
 8003f20:	9306      	str	r3, [sp, #24]
    setPwmOutPutFreeWheel();
 8003f22:	f000 fe11 	bl	8004b48 <setPwmOutPutFreeWheel>
    free_wheel_cnt += 10;
 8003f26:	f8d8 2000 	ldr.w	r2, [r8]
    enc_over_speed_cnt_error_flag = true;
 8003f2a:	4b2e      	ldr	r3, [pc, #184]	; (8003fe4 <main+0xddc>)
    free_wheel_cnt += 10;
 8003f2c:	320a      	adds	r2, #10
 8003f2e:	f8c8 2000 	str.w	r2, [r8]
    enc_over_speed_cnt_error_flag = true;
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
    enc_over_speed_cnt_error_enc_idx = 0;
 8003f36:	4a2c      	ldr	r2, [pc, #176]	; (8003fe8 <main+0xde0>)
 8003f38:	9b06      	ldr	r3, [sp, #24]
 8003f3a:	6013      	str	r3, [r2, #0]
    enc_over_speed_cnt_error_enc_cnt = temp;
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	; (8003fec <main+0xde4>)
 8003f3e:	f8c3 b000 	str.w	fp, [r3]
    return;
 8003f42:	e5a6      	b.n	8003a92 <main+0x88a>
 8003f44:	9306      	str	r3, [sp, #24]
    setPwmOutPutFreeWheel();
 8003f46:	f000 fdff 	bl	8004b48 <setPwmOutPutFreeWheel>
    free_wheel_cnt += 10;
 8003f4a:	f8d8 2000 	ldr.w	r2, [r8]
    enc_over_speed_cnt_error_flag = true;
 8003f4e:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <main+0xddc>)
    free_wheel_cnt += 10;
 8003f50:	320a      	adds	r2, #10
 8003f52:	f8c8 2000 	str.w	r2, [r8]
    enc_over_speed_cnt_error_flag = true;
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
    enc_over_speed_cnt_error_enc_idx = 0;
 8003f5a:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <main+0xde0>)
 8003f5c:	9b06      	ldr	r3, [sp, #24]
 8003f5e:	6013      	str	r3, [r2, #0]
    enc_over_speed_cnt_error_enc_cnt = temp;
 8003f60:	4b22      	ldr	r3, [pc, #136]	; (8003fec <main+0xde4>)
 8003f62:	f8c3 b000 	str.w	fp, [r3]
    return;
 8003f66:	e565      	b.n	8003a34 <main+0x82c>
 8003f68:	2601      	movs	r6, #1
 8003f6a:	f7ff ba4f 	b.w	800340c <main+0x204>
  } else if (isPushedSW2()) {
 8003f6e:	f7fd fbf7 	bl	8001760 <isPushedSW2>
 8003f72:	2800      	cmp	r0, #0
 8003f74:	f43f ad06 	beq.w	8003984 <main+0x77c>
    flash.board_id = 1;
 8003f78:	2001      	movs	r0, #1
 8003f7a:	e4f6      	b.n	800396a <main+0x762>
    adc_raw.cs_adc_offset = 2048;
 8003f7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f80:	f7ff bb87 	b.w	8003692 <main+0x48a>
      motor_param[i].voltage_per_rps = 1 / flash.rps_per_v_cw[i];
 8003f84:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8003f88:	f7ff b9c4 	b.w	8003314 <main+0x10c>
 8003f8c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8003f90:	f7ff b994 	b.w	80032bc <main+0xb4>
    startCalibrationMode();
 8003f94:	f7fe fde8 	bl	8002b68 <startCalibrationMode>
    p("enc calibration mode!!\n");
 8003f98:	4815      	ldr	r0, [pc, #84]	; (8003ff0 <main+0xde8>)
 8003f9a:	f000 ff45 	bl	8004e28 <p>
    while (isPushedSW4())
 8003f9e:	f7fd fbf7 	bl	8001790 <isPushedSW4>
 8003fa2:	2800      	cmp	r0, #0
 8003fa4:	d1fb      	bne.n	8003f9e <main+0xd96>
 8003fa6:	e4f2      	b.n	800398e <main+0x786>
 8003fa8:	9999999a 	.word	0x9999999a
 8003fac:	3fb99999 	.word	0x3fb99999
 8003fb0:	47ae147b 	.word	0x47ae147b
 8003fb4:	3f847ae1 	.word	0x3f847ae1
 8003fb8:	20000488 	.word	0x20000488
 8003fbc:	0800d910 	.word	0x0800d910
 8003fc0:	200003f4 	.word	0x200003f4
 8003fc4:	0800d904 	.word	0x0800d904
 8003fc8:	20000448 	.word	0x20000448
 8003fcc:	0800d8e8 	.word	0x0800d8e8
 8003fd0:	0800d8dc 	.word	0x0800d8dc
 8003fd4:	0800d8f8 	.word	0x0800d8f8
 8003fd8:	0800d8c4 	.word	0x0800d8c4
 8003fdc:	0800d5c8 	.word	0x0800d5c8
 8003fe0:	0800d91c 	.word	0x0800d91c
 8003fe4:	20000434 	.word	0x20000434
 8003fe8:	20000430 	.word	0x20000430
 8003fec:	2000042c 	.word	0x2000042c
 8003ff0:	0800dbb8 	.word	0x0800dbb8
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);  // M0 low
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4808      	ldr	r0, [pc, #32]	; (8004018 <main+0xe10>)
 8003ff8:	f003 fe78 	bl	8007cec <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // M1 low
 8003ffc:	4807      	ldr	r0, [pc, #28]	; (800401c <main+0xe14>)
 8003ffe:	2100      	movs	r1, #0
 8004000:	f003 fe74 	bl	8007cec <HAL_TIM_PWM_Start>
    interrupt_timer_cnt = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	602b      	str	r3, [r5, #0]
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800400e:	f4ff ab70 	bcc.w	80036f2 <main+0x4ea>
 8004012:	f7ff bbc4 	b.w	800379e <main+0x596>
 8004016:	bf00      	nop
 8004018:	20000620 	.word	0x20000620
 800401c:	200005d4 	.word	0x200005d4

08004020 <Error_Handler>:
 8004020:	b672      	cpsid	i
  while (1) {
 8004022:	e7fe      	b.n	8004022 <Error_Handler+0x2>

08004024 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004024:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004026:	4811      	ldr	r0, [pc, #68]	; (800406c <MX_SPI1_Init+0x48>)
 8004028:	4c11      	ldr	r4, [pc, #68]	; (8004070 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800402a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800402e:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004032:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004034:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004036:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800403a:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800403c:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800403e:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004042:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004046:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800404a:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 800404c:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800404e:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004052:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004056:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800405a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800405c:	f003 fc72 	bl	8007944 <HAL_SPI_Init>
 8004060:	b900      	cbnz	r0, 8004064 <MX_SPI1_Init+0x40>
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8004062:	bd10      	pop	{r4, pc}
 8004064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004068:	f7ff bfda 	b.w	8004020 <Error_Handler>
 800406c:	20000524 	.word	0x20000524
 8004070:	40013000 	.word	0x40013000

08004074 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef * spiHandle)
{
 8004074:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (spiHandle->Instance == SPI1) {
 8004076:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <HAL_SPI_MspInit+0x7c>)
 8004078:	6801      	ldr	r1, [r0, #0]
{
 800407a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407c:	2300      	movs	r3, #0
  if (spiHandle->Instance == SPI1) {
 800407e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004084:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004088:	9306      	str	r3, [sp, #24]
  if (spiHandle->Instance == SPI1) {
 800408a:	d001      	beq.n	8004090 <HAL_SPI_MspInit+0x1c>

    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }
}
 800408c:	b009      	add	sp, #36	; 0x24
 800408e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004090:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004094:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004098:	2403      	movs	r4, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800409a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800409c:	4815      	ldr	r0, [pc, #84]	; (80040f4 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800409e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040a2:	619a      	str	r2, [r3, #24]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040aa:	9200      	str	r2, [sp, #0]
 80040ac:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80040b4:	615a      	str	r2, [r3, #20]
 80040b6:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040b8:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040c0:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 80040c4:	2228      	movs	r2, #40	; 0x28
 80040c6:	2302      	movs	r3, #2
 80040c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040cc:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ce:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d0:	f002 fe26 	bl	8006d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040d6:	2210      	movs	r2, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d8:	4806      	ldr	r0, [pc, #24]	; (80040f4 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040da:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040dc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040de:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040e2:	e9cd 4505 	strd	r4, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e6:	f002 fe1b 	bl	8006d20 <HAL_GPIO_Init>
}
 80040ea:	b009      	add	sp, #36	; 0x24
 80040ec:	bd30      	pop	{r4, r5, pc}
 80040ee:	bf00      	nop
 80040f0:	40013000 	.word	0x40013000
 80040f4:	48000400 	.word	0x48000400

080040f8 <readRegisterMA702>:
}

volatile static uint32_t delay_cnt = 0;

uint8_t readRegisterMA702(bool enc, uint8_t address)
{
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	460e      	mov	r6, r1
  if (enc == 0) {
 80040fc:	4604      	mov	r4, r0
 80040fe:	2800      	cmp	r0, #0
 8004100:	d14c      	bne.n	800419c <readRegisterMA702+0xa4>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004102:	482d      	ldr	r0, [pc, #180]	; (80041b8 <readRegisterMA702+0xc0>)
 8004104:	4622      	mov	r2, r4
 8004106:	2140      	movs	r1, #64	; 0x40
 8004108:	f002 fef8 	bl	8006efc <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }

  hspi1.Instance->DR = 0x4000 | ((address & 0x1F) << 8);
 800410c:	4d2b      	ldr	r5, [pc, #172]	; (80041bc <readRegisterMA702+0xc4>)
 800410e:	0236      	lsls	r6, r6, #8
 8004110:	682a      	ldr	r2, [r5, #0]
 8004112:	f406 56f8 	and.w	r6, r6, #7936	; 0x1f00
 8004116:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800411a:	60d6      	str	r6, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 800411c:	6893      	ldr	r3, [r2, #8]
 800411e:	07d9      	lsls	r1, r3, #31
 8004120:	d5fc      	bpl.n	800411c <readRegisterMA702+0x24>
  }
  if (enc == 0) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004122:	4825      	ldr	r0, [pc, #148]	; (80041b8 <readRegisterMA702+0xc0>)
 8004124:	2201      	movs	r2, #1
  if (enc == 0) {
 8004126:	bb24      	cbnz	r4, 8004172 <readRegisterMA702+0x7a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004128:	2140      	movs	r1, #64	; 0x40
 800412a:	f002 fee7 	bl	8006efc <HAL_GPIO_WritePin>

    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++) {
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <readRegisterMA702+0xc8>)
 8004130:	601c      	str	r4, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	2a01      	cmp	r2, #1
 8004136:	d805      	bhi.n	8004144 <readRegisterMA702+0x4c>
 8004138:	6819      	ldr	r1, [r3, #0]
 800413a:	3101      	adds	r1, #1
 800413c:	6019      	str	r1, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	2a01      	cmp	r2, #1
 8004142:	d9f9      	bls.n	8004138 <readRegisterMA702+0x40>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004144:	481c      	ldr	r0, [pc, #112]	; (80041b8 <readRegisterMA702+0xc0>)
 8004146:	2200      	movs	r2, #0
 8004148:	2140      	movs	r1, #64	; 0x40
 800414a:	f002 fed7 	bl	8006efc <HAL_GPIO_WritePin>

    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++) {
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }
  uint16_t temp = hspi1.Instance->DR;
 800414e:	682a      	ldr	r2, [r5, #0]

  hspi1.Instance->DR = 0;
 8004150:	2300      	movs	r3, #0
  uint16_t temp = hspi1.Instance->DR;
 8004152:	68d1      	ldr	r1, [r2, #12]
  hspi1.Instance->DR = 0;
 8004154:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 8004156:	6893      	ldr	r3, [r2, #8]
 8004158:	07db      	lsls	r3, r3, #31
 800415a:	d5fc      	bpl.n	8004156 <readRegisterMA702+0x5e>
  }

  if (enc == 0) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800415c:	4816      	ldr	r0, [pc, #88]	; (80041b8 <readRegisterMA702+0xc0>)
 800415e:	2201      	movs	r2, #1
  if (enc == 0) {
 8004160:	bb14      	cbnz	r4, 80041a8 <readRegisterMA702+0xb0>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004162:	2140      	movs	r1, #64	; 0x40
 8004164:	f002 feca 	bl	8006efc <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
  }

  return hspi1.Instance->DR >> 8;
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	68d8      	ldr	r0, [r3, #12]
}
 800416c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004170:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004172:	2180      	movs	r1, #128	; 0x80
 8004174:	f002 fec2 	bl	8006efc <HAL_GPIO_WritePin>
    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++) {
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <readRegisterMA702+0xc8>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	2a01      	cmp	r2, #1
 8004182:	d805      	bhi.n	8004190 <readRegisterMA702+0x98>
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	3101      	adds	r1, #1
 8004188:	6019      	str	r1, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2a01      	cmp	r2, #1
 800418e:	d9f9      	bls.n	8004184 <readRegisterMA702+0x8c>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004190:	4809      	ldr	r0, [pc, #36]	; (80041b8 <readRegisterMA702+0xc0>)
 8004192:	2200      	movs	r2, #0
 8004194:	2180      	movs	r1, #128	; 0x80
 8004196:	f002 feb1 	bl	8006efc <HAL_GPIO_WritePin>
 800419a:	e7d8      	b.n	800414e <readRegisterMA702+0x56>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800419c:	4806      	ldr	r0, [pc, #24]	; (80041b8 <readRegisterMA702+0xc0>)
 800419e:	2200      	movs	r2, #0
 80041a0:	2180      	movs	r1, #128	; 0x80
 80041a2:	f002 feab 	bl	8006efc <HAL_GPIO_WritePin>
 80041a6:	e7b1      	b.n	800410c <readRegisterMA702+0x14>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	f002 fea7 	bl	8006efc <HAL_GPIO_WritePin>
  return hspi1.Instance->DR >> 8;
 80041ae:	682b      	ldr	r3, [r5, #0]
 80041b0:	68d8      	ldr	r0, [r3, #12]
}
 80041b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80041b6:	bd70      	pop	{r4, r5, r6, pc}
 80041b8:	48000400 	.word	0x48000400
 80041bc:	20000524 	.word	0x20000524
 80041c0:	20000520 	.word	0x20000520

080041c4 <writeRegisterMA702>:

uint8_t writeRegisterMA702(bool enc, uint8_t address, uint8_t value)
{
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	460c      	mov	r4, r1
 80041c8:	4617      	mov	r7, r2
  if (enc == 0) {
 80041ca:	4605      	mov	r5, r0
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d13e      	bne.n	800424e <writeRegisterMA702+0x8a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80041d0:	4602      	mov	r2, r0
 80041d2:	2140      	movs	r1, #64	; 0x40
 80041d4:	4825      	ldr	r0, [pc, #148]	; (800426c <writeRegisterMA702+0xa8>)
 80041d6:	f002 fe91 	bl	8006efc <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }

  hspi1.Instance->DR = 0x8000 | ((address & 0x1F) << 8) | value;
 80041da:	4e25      	ldr	r6, [pc, #148]	; (8004270 <writeRegisterMA702+0xac>)
 80041dc:	0223      	lsls	r3, r4, #8
 80041de:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80041e2:	6831      	ldr	r1, [r6, #0]
 80041e4:	433b      	orrs	r3, r7
 80041e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ea:	60cb      	str	r3, [r1, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 80041ec:	688b      	ldr	r3, [r1, #8]
 80041ee:	07da      	lsls	r2, r3, #31
 80041f0:	d5fc      	bpl.n	80041ec <writeRegisterMA702+0x28>
  }
  if (enc == 0) {
 80041f2:	b9f5      	cbnz	r5, 8004232 <writeRegisterMA702+0x6e>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80041f4:	2140      	movs	r1, #64	; 0x40
 80041f6:	2201      	movs	r2, #1
 80041f8:	481c      	ldr	r0, [pc, #112]	; (800426c <writeRegisterMA702+0xa8>)
 80041fa:	f002 fe7f 	bl	8006efc <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80041fe:	2014      	movs	r0, #20
 8004200:	f000 ff02 	bl	8005008 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004204:	4819      	ldr	r0, [pc, #100]	; (800426c <writeRegisterMA702+0xa8>)
 8004206:	462a      	mov	r2, r5
 8004208:	2140      	movs	r1, #64	; 0x40
 800420a:	f002 fe77 	bl	8006efc <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
    HAL_Delay(20);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }
  uint16_t temp = hspi1.Instance->DR;
 800420e:	6831      	ldr	r1, [r6, #0]

  hspi1.Instance->DR = 0;
 8004210:	2300      	movs	r3, #0
  uint16_t temp = hspi1.Instance->DR;
 8004212:	68ca      	ldr	r2, [r1, #12]
  hspi1.Instance->DR = 0;
 8004214:	60cb      	str	r3, [r1, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 8004216:	688b      	ldr	r3, [r1, #8]
 8004218:	07db      	lsls	r3, r3, #31
 800421a:	d5fc      	bpl.n	8004216 <writeRegisterMA702+0x52>
  }

  if (enc == 0) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800421c:	4813      	ldr	r0, [pc, #76]	; (800426c <writeRegisterMA702+0xa8>)
 800421e:	2201      	movs	r2, #1
  if (enc == 0) {
 8004220:	b9dd      	cbnz	r5, 800425a <writeRegisterMA702+0x96>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004222:	2140      	movs	r1, #64	; 0x40
 8004224:	f002 fe6a 	bl	8006efc <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
  }

  return hspi1.Instance->DR >> 8;
 8004228:	6833      	ldr	r3, [r6, #0]
 800422a:	68d8      	ldr	r0, [r3, #12]
}
 800422c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004232:	2201      	movs	r2, #1
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	480d      	ldr	r0, [pc, #52]	; (800426c <writeRegisterMA702+0xa8>)
 8004238:	f002 fe60 	bl	8006efc <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800423c:	2014      	movs	r0, #20
 800423e:	f000 fee3 	bl	8005008 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004242:	480a      	ldr	r0, [pc, #40]	; (800426c <writeRegisterMA702+0xa8>)
 8004244:	2200      	movs	r2, #0
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	f002 fe58 	bl	8006efc <HAL_GPIO_WritePin>
 800424c:	e7df      	b.n	800420e <writeRegisterMA702+0x4a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800424e:	4807      	ldr	r0, [pc, #28]	; (800426c <writeRegisterMA702+0xa8>)
 8004250:	2200      	movs	r2, #0
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	f002 fe52 	bl	8006efc <HAL_GPIO_WritePin>
 8004258:	e7bf      	b.n	80041da <writeRegisterMA702+0x16>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	f002 fe4e 	bl	8006efc <HAL_GPIO_WritePin>
  return hspi1.Instance->DR >> 8;
 8004260:	6833      	ldr	r3, [r6, #0]
 8004262:	68d8      	ldr	r0, [r3, #12]
}
 8004264:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800426a:	bf00      	nop
 800426c:	48000400 	.word	0x48000400
 8004270:	20000524 	.word	0x20000524
 8004274:	00000000 	.word	0x00000000

08004278 <updateMA702>:
  updateDiff(0);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
}

inline void updateMA702(bool motor)
{
 8004278:	b570      	push	{r4, r5, r6, lr}
  if (motor == 0) {
 800427a:	2800      	cmp	r0, #0
 800427c:	d158      	bne.n	8004330 <updateMA702+0xb8>
 800427e:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004280:	2180      	movs	r1, #128	; 0x80
 8004282:	485d      	ldr	r0, [pc, #372]	; (80043f8 <updateMA702+0x180>)
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8004284:	4c5d      	ldr	r4, [pc, #372]	; (80043fc <updateMA702+0x184>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004286:	4632      	mov	r2, r6
 8004288:	f002 fe38 	bl	8006efc <HAL_GPIO_WritePin>
  ma702[0].enc_raw = hspi1.Instance->DR;
 800428c:	4b5c      	ldr	r3, [pc, #368]	; (8004400 <updateMA702+0x188>)
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 800428e:	6865      	ldr	r5, [r4, #4]
  ma702[0].enc_raw = hspi1.Instance->DR;
 8004290:	6819      	ldr	r1, [r3, #0]
 8004292:	68cb      	ldr	r3, [r1, #12]
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8004294:	60e5      	str	r5, [r4, #12]
  hspi1.Instance->DR = 0;
 8004296:	60ce      	str	r6, [r1, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 8004298:	688b      	ldr	r3, [r1, #8]
 800429a:	07da      	lsls	r2, r3, #31
 800429c:	d5fc      	bpl.n	8004298 <updateMA702+0x20>
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 800429e:	68ce      	ldr	r6, [r1, #12]
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 80042a0:	4b58      	ldr	r3, [pc, #352]	; (8004404 <updateMA702+0x18c>)
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80042a2:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80042a6:	4016      	ands	r6, r2
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 80042a8:	fb83 2306 	smull	r2, r3, r3, r6
 80042ac:	4433      	add	r3, r6
 80042ae:	f241 5255 	movw	r2, #5461	; 0x1555
 80042b2:	131b      	asrs	r3, r3, #12
 80042b4:	fb02 6313 	mls	r3, r2, r3, r6
 80042b8:	1ad2      	subs	r2, r2, r3
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 80042ba:	ee07 2a90 	vmov	s15, r2
 80042be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042c2:	eddf 7a51 	vldr	s15, [pc, #324]	; 8004408 <updateMA702+0x190>
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 80042c6:	60a2      	str	r2, [r4, #8]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 80042c8:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80042cc:	6066      	str	r6, [r4, #4]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 80042ce:	ee17 0a90 	vmov	r0, s15
 80042d2:	f7fc f939 	bl	8000548 <__aeabi_f2d>
 80042d6:	a346      	add	r3, pc, #280	; (adr r3, 80043f0 <updateMA702+0x178>)
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f7fc f98c 	bl	80005f8 <__aeabi_dmul>
 80042e0:	f7fc fc82 	bl	8000be8 <__aeabi_d2f>
  int temp = ma702[enc].pre_enc_raw - ma702[enc].enc_raw;
 80042e4:	1bad      	subs	r5, r5, r6
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 80042e6:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 80042ea:	6020      	str	r0, [r4, #0]
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 80042ec:	db7c      	blt.n	80043e8 <updateMA702+0x170>
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 80042ee:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 80042f2:	bfc8      	it	gt
 80042f4:	f5a5 3580 	subgt.w	r5, r5, #65536	; 0x10000
  if (abs(ma702[enc].diff_max) < abs(temp)) {
 80042f8:	69a3      	ldr	r3, [r4, #24]
  ma702[enc].diff_enc = temp;
 80042fa:	6125      	str	r5, [r4, #16]
  if (abs(ma702[enc].diff_max) < abs(temp)) {
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8004302:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8004306:	bfb8      	it	lt
 8004308:	425b      	neglt	r3, r3
 800430a:	4293      	cmp	r3, r2
  if (abs(ma702[enc].diff_min) > abs(temp)) {
 800430c:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800430e:	483a      	ldr	r0, [pc, #232]	; (80043f8 <updateMA702+0x180>)
    ma702[enc].diff_max_cnt = ma702[enc].enc_raw;
 8004310:	bfb8      	it	lt
 8004312:	e9c4 5606 	strdlt	r5, r6, [r4, #24]
  if (abs(ma702[enc].diff_min) > abs(temp)) {
 8004316:	2b00      	cmp	r3, #0
 8004318:	bfb8      	it	lt
 800431a:	425b      	neglt	r3, r3
 800431c:	429a      	cmp	r2, r3
    ma702[enc].diff_min = temp;
 800431e:	bfbc      	itt	lt
 8004320:	6165      	strlt	r5, [r4, #20]
    ma702[enc].diff_min_cnt = ma702[enc].enc_raw;
 8004322:	6226      	strlt	r6, [r4, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004324:	2201      	movs	r2, #1
    updateMA702_M0();
  } else {
    updateMA702_M1();
  }
}
 8004326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800432a:	2180      	movs	r1, #128	; 0x80
 800432c:	f002 bde6 	b.w	8006efc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004330:	2200      	movs	r2, #0
 8004332:	2140      	movs	r1, #64	; 0x40
 8004334:	4830      	ldr	r0, [pc, #192]	; (80043f8 <updateMA702+0x180>)
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 8004336:	4c31      	ldr	r4, [pc, #196]	; (80043fc <updateMA702+0x184>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004338:	f002 fde0 	bl	8006efc <HAL_GPIO_WritePin>
  ma702[1].enc_raw = hspi1.Instance->DR;
 800433c:	4b30      	ldr	r3, [pc, #192]	; (8004400 <updateMA702+0x188>)
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 800433e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  ma702[1].enc_raw = hspi1.Instance->DR;
 8004340:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 8004342:	2300      	movs	r3, #0
  ma702[1].enc_raw = hspi1.Instance->DR;
 8004344:	68d1      	ldr	r1, [r2, #12]
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 8004346:	6325      	str	r5, [r4, #48]	; 0x30
  hspi1.Instance->DR = 0;
 8004348:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 800434a:	6893      	ldr	r3, [r2, #8]
 800434c:	07db      	lsls	r3, r3, #31
 800434e:	d5fc      	bpl.n	800434a <updateMA702+0xd2>
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004350:	68d6      	ldr	r6, [r2, #12]
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 8004352:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <updateMA702+0x18c>)
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004354:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004358:	4016      	ands	r6, r2
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 800435a:	fb83 2306 	smull	r2, r3, r3, r6
 800435e:	4433      	add	r3, r6
 8004360:	f241 5255 	movw	r2, #5461	; 0x1555
 8004364:	131b      	asrs	r3, r3, #12
 8004366:	fb02 6313 	mls	r3, r2, r3, r6
 800436a:	1ad2      	subs	r2, r2, r3
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 800436c:	ee07 2a90 	vmov	s15, r2
 8004370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004374:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004408 <updateMA702+0x190>
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 8004378:	62e2      	str	r2, [r4, #44]	; 0x2c
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 800437a:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 800437e:	62a6      	str	r6, [r4, #40]	; 0x28
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 8004380:	ee17 0a90 	vmov	r0, s15
 8004384:	f7fc f8e0 	bl	8000548 <__aeabi_f2d>
 8004388:	a319      	add	r3, pc, #100	; (adr r3, 80043f0 <updateMA702+0x178>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fc f933 	bl	80005f8 <__aeabi_dmul>
 8004392:	f7fc fc29 	bl	8000be8 <__aeabi_d2f>
  int temp = ma702[enc].pre_enc_raw - ma702[enc].enc_raw;
 8004396:	1bad      	subs	r5, r5, r6
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8004398:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 800439c:	6260      	str	r0, [r4, #36]	; 0x24
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 800439e:	db20      	blt.n	80043e2 <updateMA702+0x16a>
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 80043a0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 80043a4:	bfc8      	it	gt
 80043a6:	f5a5 3580 	subgt.w	r5, r5, #65536	; 0x10000
  if (abs(ma702[enc].diff_max) < abs(temp)) {
 80043aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  ma702[enc].diff_enc = temp;
 80043ac:	6365      	str	r5, [r4, #52]	; 0x34
  if (abs(ma702[enc].diff_max) < abs(temp)) {
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 80043b4:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 80043b8:	bfb8      	it	lt
 80043ba:	425b      	neglt	r3, r3
 80043bc:	4293      	cmp	r3, r2
  if (abs(ma702[enc].diff_min) > abs(temp)) {
 80043be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80043c0:	480d      	ldr	r0, [pc, #52]	; (80043f8 <updateMA702+0x180>)
    ma702[enc].diff_max_cnt = ma702[enc].enc_raw;
 80043c2:	bfb8      	it	lt
 80043c4:	e9c4 560f 	strdlt	r5, r6, [r4, #60]	; 0x3c
  if (abs(ma702[enc].diff_min) > abs(temp)) {
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bfb8      	it	lt
 80043cc:	425b      	neglt	r3, r3
 80043ce:	429a      	cmp	r2, r3
    ma702[enc].diff_min = temp;
 80043d0:	bfbc      	itt	lt
 80043d2:	63a5      	strlt	r5, [r4, #56]	; 0x38
    ma702[enc].diff_min_cnt = ma702[enc].enc_raw;
 80043d4:	6466      	strlt	r6, [r4, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80043d6:	2201      	movs	r2, #1
}
 80043d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80043dc:	2140      	movs	r1, #64	; 0x40
 80043de:	f002 bd8d 	b.w	8006efc <HAL_GPIO_WritePin>
    temp += ENC_CNT_MAX;
 80043e2:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80043e6:	e7e0      	b.n	80043aa <updateMA702+0x132>
 80043e8:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80043ec:	e784      	b.n	80042f8 <updateMA702+0x80>
 80043ee:	bf00      	nop
 80043f0:	54442d18 	.word	0x54442d18
 80043f4:	400921fb 	.word	0x400921fb
 80043f8:	48000400 	.word	0x48000400
 80043fc:	20000588 	.word	0x20000588
 8004400:	20000524 	.word	0x20000524
 8004404:	c003000d 	.word	0xc003000d
 8004408:	39c00300 	.word	0x39c00300

0800440c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440c:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <HAL_MspInit+0x2c>)
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	f042 0201 	orr.w	r2, r2, #1
 8004414:	619a      	str	r2, [r3, #24]
 8004416:	699a      	ldr	r2, [r3, #24]
{
 8004418:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800441a:	f002 0201 	and.w	r2, r2, #1
 800441e:	9200      	str	r2, [sp, #0]
 8004420:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004428:	61da      	str	r2, [r3, #28]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004434:	b002      	add	sp, #8
 8004436:	4770      	bx	lr
 8004438:	40021000 	.word	0x40021000

0800443c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800443c:	e7fe      	b.n	800443c <NMI_Handler>
 800443e:	bf00      	nop

08004440 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004440:	e7fe      	b.n	8004440 <HardFault_Handler>
 8004442:	bf00      	nop

08004444 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004444:	e7fe      	b.n	8004444 <MemManage_Handler>
 8004446:	bf00      	nop

08004448 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004448:	e7fe      	b.n	8004448 <BusFault_Handler>
 800444a:	bf00      	nop

0800444c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800444c:	e7fe      	b.n	800444c <UsageFault_Handler>
 800444e:	bf00      	nop

08004450 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop

08004454 <DebugMon_Handler>:
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop

08004458 <PendSV_Handler>:
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop

0800445c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800445c:	f000 bdc2 	b.w	8004fe4 <HAL_IncTick>

08004460 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004460:	4801      	ldr	r0, [pc, #4]	; (8004468 <DMA1_Channel4_IRQHandler+0x8>)
 8004462:	f002 ba81 	b.w	8006968 <HAL_DMA_IRQHandler>
 8004466:	bf00      	nop
 8004468:	20001990 	.word	0x20001990

0800446c <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800446c:	4801      	ldr	r0, [pc, #4]	; (8004474 <USB_HP_CAN_TX_IRQHandler+0x8>)
 800446e:	f001 bffb 	b.w	8006468 <HAL_CAN_IRQHandler>
 8004472:	bf00      	nop
 8004474:	20000318 	.word	0x20000318

08004478 <USB_LP_CAN_RX0_IRQHandler>:
 8004478:	4801      	ldr	r0, [pc, #4]	; (8004480 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 800447a:	f001 bff5 	b.w	8006468 <HAL_CAN_IRQHandler>
 800447e:	bf00      	nop
 8004480:	20000318 	.word	0x20000318

08004484 <CAN_RX1_IRQHandler>:
 8004484:	4801      	ldr	r0, [pc, #4]	; (800448c <CAN_RX1_IRQHandler+0x8>)
 8004486:	f001 bfef 	b.w	8006468 <HAL_CAN_IRQHandler>
 800448a:	bf00      	nop
 800448c:	20000318 	.word	0x20000318

08004490 <CAN_SCE_IRQHandler>:
 8004490:	4801      	ldr	r0, [pc, #4]	; (8004498 <CAN_SCE_IRQHandler+0x8>)
 8004492:	f001 bfe9 	b.w	8006468 <HAL_CAN_IRQHandler>
 8004496:	bf00      	nop
 8004498:	20000318 	.word	0x20000318

0800449c <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800449c:	4801      	ldr	r0, [pc, #4]	; (80044a4 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800449e:	f003 bd4d 	b.w	8007f3c <HAL_TIM_IRQHandler>
 80044a2:	bf00      	nop
 80044a4:	200005d4 	.word	0x200005d4

080044a8 <TIM1_CC_IRQHandler>:
 80044a8:	4801      	ldr	r0, [pc, #4]	; (80044b0 <TIM1_CC_IRQHandler+0x8>)
 80044aa:	f003 bd47 	b.w	8007f3c <HAL_TIM_IRQHandler>
 80044ae:	bf00      	nop
 80044b0:	200005d4 	.word	0x200005d4

080044b4 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044b4:	4801      	ldr	r0, [pc, #4]	; (80044bc <USART1_IRQHandler+0x8>)
 80044b6:	f004 b991 	b.w	80087dc <HAL_UART_IRQHandler>
 80044ba:	bf00      	nop
 80044bc:	200019d4 	.word	0x200019d4

080044c0 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80044c0:	4801      	ldr	r0, [pc, #4]	; (80044c8 <TIM8_UP_IRQHandler+0x8>)
 80044c2:	f003 bd3b 	b.w	8007f3c <HAL_TIM_IRQHandler>
 80044c6:	bf00      	nop
 80044c8:	20000620 	.word	0x20000620

080044cc <TIM8_CC_IRQHandler>:
 80044cc:	4801      	ldr	r0, [pc, #4]	; (80044d4 <TIM8_CC_IRQHandler+0x8>)
 80044ce:	f003 bd35 	b.w	8007f3c <HAL_TIM_IRQHandler>
 80044d2:	bf00      	nop
 80044d4:	20000620 	.word	0x20000620

080044d8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80044d8:	2001      	movs	r0, #1
 80044da:	4770      	bx	lr

080044dc <_kill>:

int _kill(int pid, int sig)
{
 80044dc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80044de:	f006 ffc3 	bl	800b468 <__errno>
 80044e2:	2316      	movs	r3, #22
 80044e4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80044e6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ea:	bd08      	pop	{r3, pc}

080044ec <_exit>:

void _exit (int status)
{
 80044ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80044ee:	f006 ffbb 	bl	800b468 <__errno>
 80044f2:	2316      	movs	r3, #22
 80044f4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80044f6:	e7fe      	b.n	80044f6 <_exit+0xa>

080044f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80044f8:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044fa:	1e16      	subs	r6, r2, #0
 80044fc:	dd07      	ble.n	800450e <_read+0x16>
 80044fe:	460c      	mov	r4, r1
 8004500:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8004502:	f3af 8000 	nop.w
 8004506:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800450a:	42a5      	cmp	r5, r4
 800450c:	d1f9      	bne.n	8004502 <_read+0xa>
	}

return len;
}
 800450e:	4630      	mov	r0, r6
 8004510:	bd70      	pop	{r4, r5, r6, pc}
 8004512:	bf00      	nop

08004514 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004514:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004516:	1e16      	subs	r6, r2, #0
 8004518:	dd07      	ble.n	800452a <_write+0x16>
 800451a:	460c      	mov	r4, r1
 800451c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800451e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8004522:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004526:	42ac      	cmp	r4, r5
 8004528:	d1f9      	bne.n	800451e <_write+0xa>
	}
	return len;
}
 800452a:	4630      	mov	r0, r6
 800452c:	bd70      	pop	{r4, r5, r6, pc}
 800452e:	bf00      	nop

08004530 <_close>:

int _close(int file)
{
	return -1;
}
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop

08004538 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800453c:	604b      	str	r3, [r1, #4]
	return 0;
}
 800453e:	2000      	movs	r0, #0
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop

08004544 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004544:	2001      	movs	r0, #1
 8004546:	4770      	bx	lr

08004548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004548:	2000      	movs	r0, #0
 800454a:	4770      	bx	lr

0800454c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800454c:	490c      	ldr	r1, [pc, #48]	; (8004580 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800454e:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004550:	680b      	ldr	r3, [r1, #0]
{
 8004552:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004554:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <_sbrk+0x3c>)
 8004556:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004558:	b12b      	cbz	r3, 8004566 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800455a:	4418      	add	r0, r3
 800455c:	4290      	cmp	r0, r2
 800455e:	d807      	bhi.n	8004570 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004560:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8004562:	4618      	mov	r0, r3
 8004564:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <_sbrk+0x40>)
 8004568:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800456a:	4418      	add	r0, r3
 800456c:	4290      	cmp	r0, r2
 800456e:	d9f7      	bls.n	8004560 <_sbrk+0x14>
    errno = ENOMEM;
 8004570:	f006 ff7a 	bl	800b468 <__errno>
 8004574:	230c      	movs	r3, #12
 8004576:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800457c:	4618      	mov	r0, r3
 800457e:	bd10      	pop	{r4, pc}
 8004580:	200005d0 	.word	0x200005d0
 8004584:	20008000 	.word	0x20008000
 8004588:	00000400 	.word	0x00000400
 800458c:	20001f00 	.word	0x20001f00

08004590 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004590:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <SystemInit+0x10>)
 8004592:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004596:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800459a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800459e:	4770      	bx	lr
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <HAL_TIM_PWM_MspInit>:
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * tim_pwmHandle)
{
 80045a4:	b500      	push	{lr}
  if (tim_pwmHandle->Instance == TIM1) {
 80045a6:	4a22      	ldr	r2, [pc, #136]	; (8004630 <HAL_TIM_PWM_MspInit+0x8c>)
 80045a8:	6803      	ldr	r3, [r0, #0]
 80045aa:	4293      	cmp	r3, r2
{
 80045ac:	b083      	sub	sp, #12
  if (tim_pwmHandle->Instance == TIM1) {
 80045ae:	d005      	beq.n	80045bc <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  } else if (tim_pwmHandle->Instance == TIM8) {
 80045b0:	4a20      	ldr	r2, [pc, #128]	; (8004634 <HAL_TIM_PWM_MspInit+0x90>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01f      	beq.n	80045f6 <HAL_TIM_PWM_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }
}
 80045b6:	b003      	add	sp, #12
 80045b8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045bc:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <HAL_TIM_PWM_MspInit+0x94>)
 80045be:	6998      	ldr	r0, [r3, #24]
 80045c0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80045c4:	6198      	str	r0, [r3, #24]
 80045c6:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80045c8:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80045ce:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045d0:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80045d2:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045d4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80045d6:	f002 f883 	bl	80066e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80045da:	2019      	movs	r0, #25
 80045dc:	f002 f8be 	bl	800675c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80045e0:	2200      	movs	r2, #0
 80045e2:	201b      	movs	r0, #27
 80045e4:	4611      	mov	r1, r2
 80045e6:	f002 f87b 	bl	80066e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80045ea:	201b      	movs	r0, #27
}
 80045ec:	b003      	add	sp, #12
 80045ee:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80045f2:	f002 b8b3 	b.w	800675c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_TIM_PWM_MspInit+0x94>)
 80045f8:	6998      	ldr	r0, [r3, #24]
 80045fa:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80045fe:	6198      	str	r0, [r3, #24]
 8004600:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8004602:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8004608:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 800460a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 800460c:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM8_CLK_ENABLE();
 800460e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8004610:	f002 f866 	bl	80066e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8004614:	202c      	movs	r0, #44	; 0x2c
 8004616:	f002 f8a1 	bl	800675c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800461a:	2200      	movs	r2, #0
 800461c:	202e      	movs	r0, #46	; 0x2e
 800461e:	4611      	mov	r1, r2
 8004620:	f002 f85e 	bl	80066e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004624:	202e      	movs	r0, #46	; 0x2e
}
 8004626:	b003      	add	sp, #12
 8004628:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800462c:	f002 b896 	b.w	800675c <HAL_NVIC_EnableIRQ>
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40013400 	.word	0x40013400
 8004638:	40021000 	.word	0x40021000

0800463c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef * timHandle)
{
 800463c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (timHandle->Instance == TIM1) {
 800463e:	6803      	ldr	r3, [r0, #0]
 8004640:	4a28      	ldr	r2, [pc, #160]	; (80046e4 <HAL_TIM_MspPostInit+0xa8>)
{
 8004642:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004644:	2400      	movs	r4, #0
  if (timHandle->Instance == TIM1) {
 8004646:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004648:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800464c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004650:	9408      	str	r4, [sp, #32]
  if (timHandle->Instance == TIM1) {
 8004652:	d004      	beq.n	800465e <HAL_TIM_MspPostInit+0x22>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  } else if (timHandle->Instance == TIM8) {
 8004654:	4a24      	ldr	r2, [pc, #144]	; (80046e8 <HAL_TIM_MspPostInit+0xac>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d02d      	beq.n	80046b6 <HAL_TIM_MspPostInit+0x7a>

    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }
}
 800465a:	b00b      	add	sp, #44	; 0x2c
 800465c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465e:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_TIM_MspPostInit+0xb0>)
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004666:	615a      	str	r2, [r3, #20]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800466e:	9201      	str	r2, [sp, #4]
 8004670:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004678:	615a      	str	r2, [r3, #20]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004680:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004682:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004684:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8004686:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800468a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8004690:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004694:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004696:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004698:	f002 fb42 	bl	8006d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800469c:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a0:	4813      	ldr	r0, [pc, #76]	; (80046f0 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80046a2:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046a4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046aa:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ae:	f002 fb37 	bl	8006d20 <HAL_GPIO_Init>
}
 80046b2:	b00b      	add	sp, #44	; 0x2c
 80046b4:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046b8:	480e      	ldr	r0, [pc, #56]	; (80046f4 <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80046c0:	615a      	str	r2, [r3, #20]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80046ca:	f44f 54ee 	mov.w	r4, #7616	; 0x1dc0
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80046ce:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80046d0:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046d2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80046d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046d8:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80046da:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046dc:	f002 fb20 	bl	8006d20 <HAL_GPIO_Init>
}
 80046e0:	b00b      	add	sp, #44	; 0x2c
 80046e2:	bd30      	pop	{r4, r5, pc}
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40013400 	.word	0x40013400
 80046ec:	40021000 	.word	0x40021000
 80046f0:	48000400 	.word	0x48000400
 80046f4:	48000800 	.word	0x48000800

080046f8 <MX_TIM1_Init>:
{
 80046f8:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046fa:	2400      	movs	r4, #0
{
 80046fc:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80046fe:	222c      	movs	r2, #44	; 0x2c
 8004700:	4621      	mov	r1, r4
 8004702:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004704:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004708:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800470c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8004710:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004714:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004716:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004718:	f006 fe54 	bl	800b3c4 <memset>
  htim1.Instance = TIM1;
 800471c:	4838      	ldr	r0, [pc, #224]	; (8004800 <MX_TIM1_Init+0x108>)
  htim1.Init.Prescaler = 1;
 800471e:	4a39      	ldr	r2, [pc, #228]	; (8004804 <MX_TIM1_Init+0x10c>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004720:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 8004722:	2301      	movs	r3, #1
 8004724:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 1800;
 8004728:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800472c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8004730:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8004734:	f003 fa52 	bl	8007bdc <HAL_TIM_PWM_Init>
 8004738:	2800      	cmp	r0, #0
 800473a:	d144      	bne.n	80047c6 <MX_TIM1_Init+0xce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800473c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004740:	2270      	movs	r2, #112	; 0x70
 8004742:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004746:	482e      	ldr	r0, [pc, #184]	; (8004800 <MX_TIM1_Init+0x108>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004748:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800474a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800474c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800474e:	f003 fedf 	bl	8008510 <HAL_TIMEx_MasterConfigSynchronization>
 8004752:	2800      	cmp	r0, #0
 8004754:	d14a      	bne.n	80047ec <MX_TIM1_Init+0xf4>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004756:	2000      	movs	r0, #0
 8004758:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 800475a:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800475c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004760:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004762:	4827      	ldr	r0, [pc, #156]	; (8004800 <MX_TIM1_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004764:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004766:	a904      	add	r1, sp, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004768:	e9cd 2205 	strd	r2, r2, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800476c:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800476e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004770:	f003 fcdc 	bl	800812c <HAL_TIM_PWM_ConfigChannel>
 8004774:	2800      	cmp	r0, #0
 8004776:	d136      	bne.n	80047e6 <MX_TIM1_Init+0xee>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004778:	4821      	ldr	r0, [pc, #132]	; (8004800 <MX_TIM1_Init+0x108>)
 800477a:	2204      	movs	r2, #4
 800477c:	a904      	add	r1, sp, #16
 800477e:	f003 fcd5 	bl	800812c <HAL_TIM_PWM_ConfigChannel>
 8004782:	bb68      	cbnz	r0, 80047e0 <MX_TIM1_Init+0xe8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8004784:	481e      	ldr	r0, [pc, #120]	; (8004800 <MX_TIM1_Init+0x108>)
 8004786:	2208      	movs	r2, #8
 8004788:	a904      	add	r1, sp, #16
 800478a:	f003 fccf 	bl	800812c <HAL_TIM_PWM_ConfigChannel>
 800478e:	bb20      	cbnz	r0, 80047da <MX_TIM1_Init+0xe2>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004790:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80047f8 <MX_TIM1_Init+0x100>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004794:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = 10;
 8004796:	240a      	movs	r4, #10
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 800479c:	4818      	ldr	r0, [pc, #96]	; (8004800 <MX_TIM1_Init+0x108>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800479e:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 80047a0:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80047a2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 10;
 80047a6:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047aa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80047ae:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80047b2:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 80047b6:	f003 fef1 	bl	800859c <HAL_TIMEx_ConfigBreakDeadTime>
 80047ba:	b938      	cbnz	r0, 80047cc <MX_TIM1_Init+0xd4>
  HAL_TIM_MspPostInit(&htim1);
 80047bc:	4810      	ldr	r0, [pc, #64]	; (8004800 <MX_TIM1_Init+0x108>)
 80047be:	f7ff ff3d 	bl	800463c <HAL_TIM_MspPostInit>
}
 80047c2:	b018      	add	sp, #96	; 0x60
 80047c4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80047c6:	f7ff fc2b 	bl	8004020 <Error_Handler>
 80047ca:	e7b7      	b.n	800473c <MX_TIM1_Init+0x44>
    Error_Handler();
 80047cc:	f7ff fc28 	bl	8004020 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80047d0:	480b      	ldr	r0, [pc, #44]	; (8004800 <MX_TIM1_Init+0x108>)
 80047d2:	f7ff ff33 	bl	800463c <HAL_TIM_MspPostInit>
}
 80047d6:	b018      	add	sp, #96	; 0x60
 80047d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80047da:	f7ff fc21 	bl	8004020 <Error_Handler>
 80047de:	e7d7      	b.n	8004790 <MX_TIM1_Init+0x98>
    Error_Handler();
 80047e0:	f7ff fc1e 	bl	8004020 <Error_Handler>
 80047e4:	e7ce      	b.n	8004784 <MX_TIM1_Init+0x8c>
    Error_Handler();
 80047e6:	f7ff fc1b 	bl	8004020 <Error_Handler>
 80047ea:	e7c5      	b.n	8004778 <MX_TIM1_Init+0x80>
    Error_Handler();
 80047ec:	f7ff fc18 	bl	8004020 <Error_Handler>
 80047f0:	e7b1      	b.n	8004756 <MX_TIM1_Init+0x5e>
 80047f2:	bf00      	nop
 80047f4:	f3af 8000 	nop.w
 80047f8:	02000000 	.word	0x02000000
 80047fc:	00000000 	.word	0x00000000
 8004800:	200005d4 	.word	0x200005d4
 8004804:	40012c00 	.word	0x40012c00

08004808 <MX_TIM8_Init>:
{
 8004808:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800480a:	2400      	movs	r4, #0
{
 800480c:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800480e:	222c      	movs	r2, #44	; 0x2c
 8004810:	4621      	mov	r1, r4
 8004812:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004814:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004818:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800481c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8004820:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004824:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004826:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004828:	f006 fdcc 	bl	800b3c4 <memset>
  htim8.Instance = TIM8;
 800482c:	4838      	ldr	r0, [pc, #224]	; (8004910 <MX_TIM8_Init+0x108>)
  htim8.Init.Prescaler = 1;
 800482e:	4a39      	ldr	r2, [pc, #228]	; (8004914 <MX_TIM8_Init+0x10c>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004830:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 8004832:	2301      	movs	r3, #1
 8004834:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 1800;
 8004838:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 800483c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 8004840:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8004844:	f003 f9ca 	bl	8007bdc <HAL_TIM_PWM_Init>
 8004848:	2800      	cmp	r0, #0
 800484a:	d145      	bne.n	80048d8 <MX_TIM8_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800484c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004850:	2270      	movs	r2, #112	; 0x70
 8004852:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8004856:	482e      	ldr	r0, [pc, #184]	; (8004910 <MX_TIM8_Init+0x108>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004858:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 800485a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800485c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 800485e:	f003 fe57 	bl	8008510 <HAL_TIMEx_MasterConfigSynchronization>
 8004862:	2800      	cmp	r0, #0
 8004864:	d14b      	bne.n	80048fe <MX_TIM8_Init+0xf6>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004866:	2000      	movs	r0, #0
 8004868:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 800486a:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800486c:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004870:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004872:	4827      	ldr	r0, [pc, #156]	; (8004910 <MX_TIM8_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004874:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004876:	a904      	add	r1, sp, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004878:	e9cd 2205 	strd	r2, r2, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800487c:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800487e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004880:	f003 fc54 	bl	800812c <HAL_TIM_PWM_ConfigChannel>
 8004884:	2800      	cmp	r0, #0
 8004886:	d137      	bne.n	80048f8 <MX_TIM8_Init+0xf0>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004888:	4821      	ldr	r0, [pc, #132]	; (8004910 <MX_TIM8_Init+0x108>)
 800488a:	2204      	movs	r2, #4
 800488c:	a904      	add	r1, sp, #16
 800488e:	f003 fc4d 	bl	800812c <HAL_TIM_PWM_ConfigChannel>
 8004892:	bb70      	cbnz	r0, 80048f2 <MX_TIM8_Init+0xea>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8004894:	481e      	ldr	r0, [pc, #120]	; (8004910 <MX_TIM8_Init+0x108>)
 8004896:	2208      	movs	r2, #8
 8004898:	a904      	add	r1, sp, #16
 800489a:	f003 fc47 	bl	800812c <HAL_TIM_PWM_ConfigChannel>
 800489e:	bb28      	cbnz	r0, 80048ec <MX_TIM8_Init+0xe4>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048a0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8004908 <MX_TIM8_Init+0x100>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048a4:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048aa:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 10;
 80048ae:	240a      	movs	r4, #10
  sBreakDeadTimeConfig.BreakFilter = 4;
 80048b0:	2204      	movs	r2, #4
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 80048b2:	4817      	ldr	r0, [pc, #92]	; (8004910 <MX_TIM8_Init+0x108>)
  sBreakDeadTimeConfig.BreakFilter = 4;
 80048b4:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 80048b6:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048b8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 10;
 80048bc:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048c0:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048c4:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048c6:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 80048c8:	f003 fe68 	bl	800859c <HAL_TIMEx_ConfigBreakDeadTime>
 80048cc:	b938      	cbnz	r0, 80048de <MX_TIM8_Init+0xd6>
  HAL_TIM_MspPostInit(&htim8);
 80048ce:	4810      	ldr	r0, [pc, #64]	; (8004910 <MX_TIM8_Init+0x108>)
 80048d0:	f7ff feb4 	bl	800463c <HAL_TIM_MspPostInit>
}
 80048d4:	b018      	add	sp, #96	; 0x60
 80048d6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80048d8:	f7ff fba2 	bl	8004020 <Error_Handler>
 80048dc:	e7b6      	b.n	800484c <MX_TIM8_Init+0x44>
    Error_Handler();
 80048de:	f7ff fb9f 	bl	8004020 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 80048e2:	480b      	ldr	r0, [pc, #44]	; (8004910 <MX_TIM8_Init+0x108>)
 80048e4:	f7ff feaa 	bl	800463c <HAL_TIM_MspPostInit>
}
 80048e8:	b018      	add	sp, #96	; 0x60
 80048ea:	bd10      	pop	{r4, pc}
    Error_Handler();
 80048ec:	f7ff fb98 	bl	8004020 <Error_Handler>
 80048f0:	e7d6      	b.n	80048a0 <MX_TIM8_Init+0x98>
    Error_Handler();
 80048f2:	f7ff fb95 	bl	8004020 <Error_Handler>
 80048f6:	e7cd      	b.n	8004894 <MX_TIM8_Init+0x8c>
    Error_Handler();
 80048f8:	f7ff fb92 	bl	8004020 <Error_Handler>
 80048fc:	e7c4      	b.n	8004888 <MX_TIM8_Init+0x80>
    Error_Handler();
 80048fe:	f7ff fb8f 	bl	8004020 <Error_Handler>
 8004902:	e7b0      	b.n	8004866 <MX_TIM8_Init+0x5e>
 8004904:	f3af 8000 	nop.w
 8004908:	02000000 	.word	0x02000000
 800490c:	00000004 	.word	0x00000004
 8004910:	20000620 	.word	0x20000620
 8004914:	40013400 	.word	0x40013400

08004918 <initFirstSin>:
}

/* USER CODE BEGIN 1 */
float rad_to_sin_cnv_array[1024] = {0};
inline void initFirstSin(void)
{
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < 1024; i++) {
    float temp_rad = (float)i / 256 * M_PI * 2;
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 800491a:	4d19      	ldr	r5, [pc, #100]	; (8004980 <initFirstSin+0x68>)
 800491c:	2300      	movs	r3, #0
    float temp_rad = (float)i / 256 * M_PI * 2;
 800491e:	a716      	add	r7, pc, #88	; (adr r7, 8004978 <initFirstSin+0x60>)
 8004920:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8004924:	ed2d 8b02 	vpush	{d8}
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8004928:	f845 3b04 	str.w	r3, [r5], #4
    float temp_rad = (float)i / 256 * M_PI * 2;
 800492c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8004984 <initFirstSin+0x6c>
  for (int i = 0; i < 1024; i++) {
 8004930:	2401      	movs	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8004932:	ee07 4a90 	vmov	s15, r4
 8004936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 1024; i++) {
 800493a:	3401      	adds	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 800493c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004940:	ee17 0a90 	vmov	r0, s15
 8004944:	f7fb fe00 	bl	8000548 <__aeabi_f2d>
 8004948:	4632      	mov	r2, r6
 800494a:	463b      	mov	r3, r7
 800494c:	f7fb fe54 	bl	80005f8 <__aeabi_dmul>
 8004950:	f7fc f94a 	bl	8000be8 <__aeabi_d2f>
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8004954:	f7fb fdf8 	bl	8000548 <__aeabi_f2d>
 8004958:	ec41 0b10 	vmov	d0, r0, r1
 800495c:	f004 fd0c 	bl	8009378 <sin>
 8004960:	ec51 0b10 	vmov	r0, r1, d0
 8004964:	f7fc f940 	bl	8000be8 <__aeabi_d2f>
  for (int i = 0; i < 1024; i++) {
 8004968:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 800496c:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < 1024; i++) {
 8004970:	d1df      	bne.n	8004932 <initFirstSin+0x1a>
    // printf("rad %4.3f sin %4.3f\n",temp_rad,rad_to_sin_cnv_array[i]);
    // HAL_Delay(1);
  }
}
 8004972:	ecbd 8b02 	vpop	{d8}
 8004976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004978:	54442d18 	.word	0x54442d18
 800497c:	401921fb 	.word	0x401921fb
 8004980:	2000066c 	.word	0x2000066c
 8004984:	3b800000 	.word	0x3b800000

08004988 <setOutputRadianMotor>:
#define X2_PER_R3 (1.154)

inline void setOutputRadianMotor(bool motor,float out_rad, float output_voltage, float battery_voltage, float output_voltage_limit){
  int voltage_propotional_cnt;

  if (battery_voltage < BATTERY_VOLTAGE_BOTTOM) {
 8004988:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 800498c:	eef0 0ae0 	vabs.f32	s1, s1
 8004990:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8004994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    battery_voltage = BATTERY_VOLTAGE_BOTTOM;
  }
  if (output_voltage < 0) {
    output_voltage = -output_voltage;
  }
  if (output_voltage > output_voltage_limit) {
 8004998:	eef4 1ae0 	vcmpe.f32	s3, s1
 800499c:	bfb8      	it	lt
 800499e:	eeb0 1a67 	vmovlt.f32	s2, s15
 80049a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_voltage = 0;
 80049a6:	bf48      	it	mi
 80049a8:	eddf 0a31 	vldrmi	s1, [pc, #196]	; 8004a70 <setOutputRadianMotor+0xe8>
  }
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 80049ac:	eec0 7a81 	vdiv.f32	s15, s1, s2
inline void setOutputRadianMotor(bool motor,float out_rad, float output_voltage, float battery_voltage, float output_voltage_limit){
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4604      	mov	r4, r0
 80049b4:	ed2d 8b02 	vpush	{d8}
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 80049b8:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8004a74 <setOutputRadianMotor+0xec>
 80049bc:	ee67 7a88 	vmul.f32	s15, s15, s16
inline void setOutputRadianMotor(bool motor,float out_rad, float output_voltage, float battery_voltage, float output_voltage_limit){
 80049c0:	ee10 5a10 	vmov	r5, s0
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 80049c4:	ee17 0a90 	vmov	r0, s15
 80049c8:	f7fb fdbe 	bl	8000548 <__aeabi_f2d>
 80049cc:	a322      	add	r3, pc, #136	; (adr r3, 8004a58 <setOutputRadianMotor+0xd0>)
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	f7fb fe11 	bl	80005f8 <__aeabi_dmul>
 80049d6:	f7fc f8bf 	bl	8000b58 <__aeabi_d2iz>
 80049da:	4603      	mov	r3, r0

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 80049dc:	4628      	mov	r0, r5
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 80049de:	ee08 3a90 	vmov	s17, r3
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 80049e2:	f7fb fdb1 	bl	8000548 <__aeabi_f2d>
 80049e6:	a31e      	add	r3, pc, #120	; (adr r3, 8004a60 <setOutputRadianMotor+0xd8>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f7fb fc4e 	bl	800028c <__adddf3>
 80049f0:	a31d      	add	r3, pc, #116	; (adr r3, 8004a68 <setOutputRadianMotor+0xe0>)
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f7fb fdff 	bl	80005f8 <__aeabi_dmul>
 80049fa:	f7fc f8d5 	bl	8000ba8 <__aeabi_d2uiz>
  if (motor == 0) {
    htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <setOutputRadianMotor+0xf0>)
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8004a00:	b2c3      	uxtb	r3, r0
    htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004a02:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 8004a06:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8004a0a:	edd0 7a00 	vldr	s15, [r0]
    htim1.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004a0e:	ed90 6a55 	vldr	s12, [r0, #340]	; 0x154
    htim1.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004a12:	edd0 6aaa 	vldr	s13, [r0, #680]	; 0x2a8
    htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004a16:	eeb0 7a48 	vmov.f32	s14, s16
 8004a1a:	eea8 7aa7 	vfma.f32	s14, s17, s15
    htim1.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004a1e:	eef0 7a48 	vmov.f32	s15, s16
 8004a22:	eee8 7a86 	vfma.f32	s15, s17, s12
    htim1.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004a26:	eea8 8aa6 	vfma.f32	s16, s17, s13
  if (motor == 0) {
 8004a2a:	b984      	cbnz	r4, 8004a4e <setOutputRadianMotor+0xc6>
    htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <setOutputRadianMotor+0xf4>)
  } else {
    htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004a2e:	681b      	ldr	r3, [r3, #0]
    htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
    htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004a30:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004a34:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004a3c:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
    htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004a40:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004a44:	ed83 8a0f 	vstr	s16, [r3, #60]	; 0x3c
  }
}
 8004a48:	ecbd 8b02 	vpop	{d8}
 8004a4c:	bd38      	pop	{r3, r4, r5, pc}
    htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <setOutputRadianMotor+0xf8>)
 8004a50:	e7ed      	b.n	8004a2e <setOutputRadianMotor+0xa6>
 8004a52:	bf00      	nop
 8004a54:	f3af 8000 	nop.w
 8004a58:	b4395810 	.word	0xb4395810
 8004a5c:	3ff276c8 	.word	0x3ff276c8
 8004a60:	54442d18 	.word	0x54442d18
 8004a64:	402921fb 	.word	0x402921fb
 8004a68:	3d5bfeba 	.word	0x3d5bfeba
 8004a6c:	40444ad1 	.word	0x40444ad1
 8004a70:	00000000 	.word	0x00000000
 8004a74:	44610000 	.word	0x44610000
 8004a78:	2000066c 	.word	0x2000066c
 8004a7c:	200005d4 	.word	0x200005d4
 8004a80:	20000620 	.word	0x20000620

08004a84 <setPwmAll>:
  htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
}

void setPwmAll(uint32_t pwm_cnt)
{
  htim8.Instance->CCR1 = pwm_cnt;
 8004a84:	4a05      	ldr	r2, [pc, #20]	; (8004a9c <setPwmAll+0x18>)
  htim8.Instance->CCR2 = pwm_cnt;
  htim8.Instance->CCR3 = pwm_cnt;
  htim1.Instance->CCR1 = pwm_cnt;
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <setPwmAll+0x1c>)
  htim8.Instance->CCR1 = pwm_cnt;
 8004a88:	6812      	ldr	r2, [r2, #0]
  htim1.Instance->CCR1 = pwm_cnt;
 8004a8a:	681b      	ldr	r3, [r3, #0]
  htim8.Instance->CCR1 = pwm_cnt;
 8004a8c:	6350      	str	r0, [r2, #52]	; 0x34
  htim8.Instance->CCR2 = pwm_cnt;
 8004a8e:	6390      	str	r0, [r2, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt;
 8004a90:	63d0      	str	r0, [r2, #60]	; 0x3c
  htim1.Instance->CCR1 = pwm_cnt;
 8004a92:	6358      	str	r0, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = pwm_cnt;
 8004a94:	6398      	str	r0, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt;
 8004a96:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000620 	.word	0x20000620
 8004aa0:	200005d4 	.word	0x200005d4

08004aa4 <forceStopAllPwmOutputAndTimer>:

void forceStopAllPwmOutputAndTimer(void)
{
 8004aa4:	b538      	push	{r3, r4, r5, lr}
  htim8.Instance->CCR1 = pwm_cnt;
 8004aa6:	4d26      	ldr	r5, [pc, #152]	; (8004b40 <forceStopAllPwmOutputAndTimer+0x9c>)
  htim1.Instance->CCR1 = pwm_cnt;
 8004aa8:	4c26      	ldr	r4, [pc, #152]	; (8004b44 <forceStopAllPwmOutputAndTimer+0xa0>)
  htim8.Instance->CCR1 = pwm_cnt;
 8004aaa:	6829      	ldr	r1, [r5, #0]
  htim1.Instance->CCR1 = pwm_cnt;
 8004aac:	6822      	ldr	r2, [r4, #0]
  htim8.Instance->CCR1 = pwm_cnt;
 8004aae:	f44f 7361 	mov.w	r3, #900	; 0x384
 8004ab2:	634b      	str	r3, [r1, #52]	; 0x34
  setPwmAll(TIM_PWM_CENTER);

  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004ab4:	4620      	mov	r0, r4
  htim8.Instance->CCR2 = pwm_cnt;
 8004ab6:	638b      	str	r3, [r1, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt;
 8004ab8:	63cb      	str	r3, [r1, #60]	; 0x3c
  htim1.Instance->CCR1 = pwm_cnt;
 8004aba:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004abc:	2100      	movs	r1, #0
  htim1.Instance->CCR2 = pwm_cnt;
 8004abe:	6393      	str	r3, [r2, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt;
 8004ac0:	63d3      	str	r3, [r2, #60]	; 0x3c
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8004ac2:	f003 f9b9 	bl	8007e38 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8004ac6:	2104      	movs	r1, #4
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f003 f9b5 	bl	8007e38 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8004ace:	2108      	movs	r1, #8
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f003 f9b1 	bl	8007e38 <HAL_TIM_PWM_Stop>

  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f003 f9ad 	bl	8007e38 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8004ade:	2104      	movs	r1, #4
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	f003 f9a9 	bl	8007e38 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8004ae6:	2108      	movs	r1, #8
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f003 f9a5 	bl	8007e38 <HAL_TIM_PWM_Stop>

  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8004aee:	2100      	movs	r1, #0
 8004af0:	4620      	mov	r0, r4
 8004af2:	f003 fcc7 	bl	8008484 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8004af6:	2104      	movs	r1, #4
 8004af8:	4620      	mov	r0, r4
 8004afa:	f003 fcc3 	bl	8008484 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8004afe:	2108      	movs	r1, #8
 8004b00:	4620      	mov	r0, r4
 8004b02:	f003 fcbf 	bl	8008484 <HAL_TIMEx_PWMN_Stop>

  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8004b06:	2100      	movs	r1, #0
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f003 fcbb 	bl	8008484 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8004b0e:	2104      	movs	r1, #4
 8004b10:	4628      	mov	r0, r5
 8004b12:	f003 fcb7 	bl	8008484 <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 8004b16:	2108      	movs	r1, #8
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f003 fcb3 	bl	8008484 <HAL_TIMEx_PWMN_Stop>

  HAL_TIM_Base_Stop_IT(&htim1);
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f003 f844 	bl	8007bac <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim8);
 8004b24:	4628      	mov	r0, r5
 8004b26:	f003 f841 	bl	8007bac <HAL_TIM_Base_Stop_IT>

  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 8004b2a:	6829      	ldr	r1, [r5, #0]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 8004b2c:	6822      	ldr	r2, [r4, #0]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 8004b2e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8004b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b34:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 8004b36:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004b38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b3c:	6453      	str	r3, [r2, #68]	; 0x44
}
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	20000620 	.word	0x20000620
 8004b44:	200005d4 	.word	0x200005d4

08004b48 <setPwmOutPutFreeWheel>:
  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
}

void setPwmOutPutFreeWheel(void)
{
 8004b48:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004b4a:	4d23      	ldr	r5, [pc, #140]	; (8004bd8 <setPwmOutPutFreeWheel+0x90>)
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);

  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004b4c:	4c23      	ldr	r4, [pc, #140]	; (8004bdc <setPwmOutPutFreeWheel+0x94>)
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004b4e:	6828      	ldr	r0, [r5, #0]
 8004b50:	2200      	movs	r2, #0
 8004b52:	4611      	mov	r1, r2
 8004b54:	f003 fc24 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004b58:	6828      	ldr	r0, [r5, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	f003 fc1f 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 8004b62:	6828      	ldr	r0, [r5, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2108      	movs	r1, #8
 8004b68:	f003 fc1a 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4611      	mov	r1, r2
 8004b70:	6820      	ldr	r0, [r4, #0]
 8004b72:	f003 fc15 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004b76:	6820      	ldr	r0, [r4, #0]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2104      	movs	r1, #4
 8004b7c:	f003 fc10 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 8004b80:	2200      	movs	r2, #0
 8004b82:	2108      	movs	r1, #8
 8004b84:	6820      	ldr	r0, [r4, #0]
 8004b86:	f003 fc0b 	bl	80083a0 <TIM_CCxChannelCmd>

  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCxN_DISABLE);
 8004b8a:	682a      	ldr	r2, [r5, #0]
  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCxN_DISABLE);
  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_DISABLE);

  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCxN_DISABLE);
 8004b8c:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~tmp;
 8004b8e:	6a11      	ldr	r1, [r2, #32]
 8004b90:	f021 0104 	bic.w	r1, r1, #4
 8004b94:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b96:	6a11      	ldr	r1, [r2, #32]
 8004b98:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004b9a:	6a11      	ldr	r1, [r2, #32]
 8004b9c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004ba0:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ba2:	6a11      	ldr	r1, [r2, #32]
 8004ba4:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004ba6:	6a11      	ldr	r1, [r2, #32]
 8004ba8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004bac:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bae:	6a11      	ldr	r1, [r2, #32]
 8004bb0:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004bb2:	6a1a      	ldr	r2, [r3, #32]
 8004bb4:	f022 0204 	bic.w	r2, r2, #4
 8004bb8:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bba:	6a1a      	ldr	r2, [r3, #32]
 8004bbc:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bc6:	6a1a      	ldr	r2, [r3, #32]
 8004bc8:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	621a      	str	r2, [r3, #32]
  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCxN_DISABLE);
  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCxN_DISABLE);
}
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	200005d4 	.word	0x200005d4
 8004bdc:	20000620 	.word	0x20000620

08004be0 <resumePwmOutput>:

void resumePwmOutput(void)
{
 8004be0:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004be2:	4d29      	ldr	r5, [pc, #164]	; (8004c88 <resumePwmOutput+0xa8>)
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);

  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004be4:	4c29      	ldr	r4, [pc, #164]	; (8004c8c <resumePwmOutput+0xac>)
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004be6:	6828      	ldr	r0, [r5, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	2100      	movs	r1, #0
 8004bec:	f003 fbd8 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bf0:	6828      	ldr	r0, [r5, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	2104      	movs	r1, #4
 8004bf6:	f003 fbd3 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 8004bfa:	6828      	ldr	r0, [r5, #0]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	2108      	movs	r1, #8
 8004c00:	f003 fbce 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004c04:	6820      	ldr	r0, [r4, #0]
 8004c06:	2201      	movs	r2, #1
 8004c08:	2100      	movs	r1, #0
 8004c0a:	f003 fbc9 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c0e:	6820      	ldr	r0, [r4, #0]
 8004c10:	2201      	movs	r2, #1
 8004c12:	2104      	movs	r1, #4
 8004c14:	f003 fbc4 	bl	80083a0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 8004c18:	2201      	movs	r2, #1
 8004c1a:	2108      	movs	r1, #8
 8004c1c:	6820      	ldr	r0, [r4, #0]
 8004c1e:	f003 fbbf 	bl	80083a0 <TIM_CCxChannelCmd>

  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCxN_ENABLE);
 8004c22:	682a      	ldr	r2, [r5, #0]
  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);

  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCxN_ENABLE);
 8004c24:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~tmp;
 8004c26:	6a11      	ldr	r1, [r2, #32]
 8004c28:	f021 0104 	bic.w	r1, r1, #4
 8004c2c:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c2e:	6a11      	ldr	r1, [r2, #32]
 8004c30:	f041 0104 	orr.w	r1, r1, #4
 8004c34:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004c36:	6a11      	ldr	r1, [r2, #32]
 8004c38:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004c3c:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c3e:	6a11      	ldr	r1, [r2, #32]
 8004c40:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004c44:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004c46:	6a11      	ldr	r1, [r2, #32]
 8004c48:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004c4c:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c4e:	6a11      	ldr	r1, [r2, #32]
 8004c50:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004c54:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	f022 0204 	bic.w	r2, r2, #4
 8004c5c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c5e:	6a1a      	ldr	r2, [r3, #32]
 8004c60:	f042 0204 	orr.w	r2, r2, #4
 8004c64:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8004c66:	6a1a      	ldr	r2, [r3, #32]
 8004c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c74:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c7c:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c7e:	6a1a      	ldr	r2, [r3, #32]
 8004c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c84:	621a      	str	r2, [r3, #32]
  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);
}
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	200005d4 	.word	0x200005d4
 8004c8c:	20000620 	.word	0x20000620

08004c90 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004c90:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c92:	480b      	ldr	r0, [pc, #44]	; (8004cc0 <MX_USART1_UART_Init+0x30>)
 8004c94:	4c0b      	ldr	r4, [pc, #44]	; (8004cc4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 8004c96:	490c      	ldr	r1, [pc, #48]	; (8004cc8 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c98:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004c9a:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 8004c9c:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ca0:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004ca4:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ca8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cac:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004cb0:	f004 f93a 	bl	8008f28 <HAL_UART_Init>
 8004cb4:	b900      	cbnz	r0, 8004cb8 <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004cb6:	bd10      	pop	{r4, pc}
 8004cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004cbc:	f7ff b9b0 	b.w	8004020 <Error_Handler>
 8004cc0:	200019d4 	.word	0x200019d4
 8004cc4:	40013800 	.word	0x40013800
 8004cc8:	001e8480 	.word	0x001e8480

08004ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8004cd0:	4b2e      	ldr	r3, [pc, #184]	; (8004d8c <HAL_UART_MspInit+0xc0>)
 8004cd2:	6802      	ldr	r2, [r0, #0]
{
 8004cd4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd6:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8004cd8:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cda:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004cde:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004ce2:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8004ce4:	d002      	beq.n	8004cec <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004ce6:	b008      	add	sp, #32
 8004ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cec:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cf0:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cf4:	699a      	ldr	r2, [r3, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004cf6:	4e26      	ldr	r6, [pc, #152]	; (8004d90 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cfc:	619a      	str	r2, [r3, #24]
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004d04:	9200      	str	r2, [sp, #0]
 8004d06:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004d0e:	615a      	str	r2, [r3, #20]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d16:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d18:	2210      	movs	r2, #16
 8004d1a:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d1c:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d1e:	a902      	add	r1, sp, #8
 8004d20:	4605      	mov	r5, r0
 8004d22:	481c      	ldr	r0, [pc, #112]	; (8004d94 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d24:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d28:	e9cd 8705 	strd	r8, r7, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d2c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d2e:	f001 fff7 	bl	8006d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d32:	2220      	movs	r2, #32
 8004d34:	2302      	movs	r3, #2
 8004d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d3a:	4816      	ldr	r0, [pc, #88]	; (8004d94 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d3c:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d40:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d42:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d44:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d46:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d48:	f001 ffea 	bl	8006d20 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d4c:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <HAL_UART_MspInit+0xcc>)
 8004d4e:	2310      	movs	r3, #16
 8004d50:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004d54:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d56:	2380      	movs	r3, #128	; 0x80
 8004d58:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d5c:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d60:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004d64:	f001 fd34 	bl	80067d0 <HAL_DMA_Init>
 8004d68:	b960      	cbnz	r0, 8004d84 <HAL_UART_MspInit+0xb8>
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	210f      	movs	r1, #15
 8004d6e:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004d70:	672e      	str	r6, [r5, #112]	; 0x70
 8004d72:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8004d74:	f001 fcb4 	bl	80066e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004d78:	2025      	movs	r0, #37	; 0x25
 8004d7a:	f001 fcef 	bl	800675c <HAL_NVIC_EnableIRQ>
}
 8004d7e:	b008      	add	sp, #32
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8004d84:	f7ff f94c 	bl	8004020 <Error_Handler>
 8004d88:	e7ef      	b.n	8004d6a <HAL_UART_MspInit+0x9e>
 8004d8a:	bf00      	nop
 8004d8c:	40013800 	.word	0x40013800
 8004d90:	20001990 	.word	0x20001990
 8004d94:	48000800 	.word	0x48000800
 8004d98:	40020044 	.word	0x40020044

08004d9c <HAL_UART_TxCpltCallback>:
volatile bool is_in_printf_func = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

  if (sending_first_buf)
 8004d9c:	4a1a      	ldr	r2, [pc, #104]	; (8004e08 <HAL_UART_TxCpltCallback+0x6c>)
{
 8004d9e:	b538      	push	{r3, r4, r5, lr}
  if (sending_first_buf)
 8004da0:	7813      	ldrb	r3, [r2, #0]
 8004da2:	b15b      	cbz	r3, 8004dbc <HAL_UART_TxCpltCallback+0x20>
  {                            // FIRST buf complete
    sending_first_buf = false; // complete!
 8004da4:	2300      	movs	r3, #0

    if (second_buf_len > 0 && is_in_printf_func == false)
 8004da6:	4c19      	ldr	r4, [pc, #100]	; (8004e0c <HAL_UART_TxCpltCallback+0x70>)
    sending_first_buf = false; // complete!
 8004da8:	7013      	strb	r3, [r2, #0]
    if (second_buf_len > 0 && is_in_printf_func == false)
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dd04      	ble.n	8004dba <HAL_UART_TxCpltCallback+0x1e>
 8004db0:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <HAL_UART_TxCpltCallback+0x74>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004db8:	b1db      	cbz	r3, 8004df2 <HAL_UART_TxCpltCallback+0x56>
      sending_first_buf = true;
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
      first_buf_len = 0;
    }
  }
}
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
  else if (sending_second_buf)
 8004dbc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004dc0:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <HAL_UART_TxCpltCallback+0x78>)
 8004dc2:	7818      	ldrb	r0, [r3, #0]
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d0f8      	beq.n	8004dba <HAL_UART_TxCpltCallback+0x1e>
    if (first_buf_len > 0 && is_in_printf_func == false)
 8004dc8:	4c13      	ldr	r4, [pc, #76]	; (8004e18 <HAL_UART_TxCpltCallback+0x7c>)
    sending_second_buf = false; // complete!
 8004dca:	7019      	strb	r1, [r3, #0]
    if (first_buf_len > 0 && is_in_printf_func == false)
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	ddf3      	ble.n	8004dba <HAL_UART_TxCpltCallback+0x1e>
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <HAL_UART_TxCpltCallback+0x74>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1ed      	bne.n	8004dba <HAL_UART_TxCpltCallback+0x1e>
      sending_first_buf = true;
 8004dde:	2301      	movs	r3, #1
 8004de0:	7013      	strb	r3, [r2, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	490d      	ldr	r1, [pc, #52]	; (8004e1c <HAL_UART_TxCpltCallback+0x80>)
 8004de6:	480e      	ldr	r0, [pc, #56]	; (8004e20 <HAL_UART_TxCpltCallback+0x84>)
 8004de8:	b292      	uxth	r2, r2
 8004dea:	f003 fc23 	bl	8008634 <HAL_UART_Transmit_DMA>
      first_buf_len = 0;
 8004dee:	6025      	str	r5, [r4, #0]
}
 8004df0:	bd38      	pop	{r3, r4, r5, pc}
      sending_second_buf = true;
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <HAL_UART_TxCpltCallback+0x78>)
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 8004df4:	490b      	ldr	r1, [pc, #44]	; (8004e24 <HAL_UART_TxCpltCallback+0x88>)
 8004df6:	480a      	ldr	r0, [pc, #40]	; (8004e20 <HAL_UART_TxCpltCallback+0x84>)
      sending_second_buf = true;
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 8004dfc:	6822      	ldr	r2, [r4, #0]
 8004dfe:	b292      	uxth	r2, r2
 8004e00:	f003 fc18 	bl	8008634 <HAL_UART_Transmit_DMA>
      second_buf_len = 0;
 8004e04:	6025      	str	r5, [r4, #0]
}
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	20001d84 	.word	0x20001d84
 8004e0c:	20001d80 	.word	0x20001d80
 8004e10:	20001a5c 	.word	0x20001a5c
 8004e14:	20001d85 	.word	0x20001d85
 8004e18:	2000198c 	.word	0x2000198c
 8004e1c:	2000166c 	.word	0x2000166c
 8004e20:	200019d4 	.word	0x200019d4
 8004e24:	20001a60 	.word	0x20001a60

08004e28 <p>:

void p(const char *format, ...)
{
 8004e28:	b40f      	push	{r0, r1, r2, r3}
 8004e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  va_list ap;
  va_start(ap, format);
  is_in_printf_func = true;
 8004e2e:	4c35      	ldr	r4, [pc, #212]	; (8004f04 <p+0xdc>)

  if (sending_first_buf)
 8004e30:	4d35      	ldr	r5, [pc, #212]	; (8004f08 <p+0xe0>)
{
 8004e32:	b082      	sub	sp, #8
  is_in_printf_func = true;
 8004e34:	2601      	movs	r6, #1
{
 8004e36:	aa08      	add	r2, sp, #32
  is_in_printf_func = true;
 8004e38:	7026      	strb	r6, [r4, #0]
  if (sending_first_buf)
 8004e3a:	782b      	ldrb	r3, [r5, #0]
{
 8004e3c:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(ap, format);
 8004e40:	9201      	str	r2, [sp, #4]
  if (sending_first_buf)
 8004e42:	b30b      	cbz	r3, 8004e88 <p+0x60>
  {
    if (second_buf_len > UART_TEMP_BUF_SIZE / 2)
 8004e44:	4e31      	ldr	r6, [pc, #196]	; (8004f0c <p+0xe4>)
 8004e46:	6833      	ldr	r3, [r6, #0]
 8004e48:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004e4c:	dd06      	ble.n	8004e5c <p+0x34>
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
    first_buf_len = (int)strlen(first_buf);
    first_buf_len = 0;
    second_buf_len = 0;
  }
  is_in_printf_func = false;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	7023      	strb	r3, [r4, #0]
  return;
}
 8004e52:	b002      	add	sp, #8
 8004e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e58:	b004      	add	sp, #16
 8004e5a:	4770      	bx	lr
    second_buf_len += vsprintf(second_buf + second_buf_len, format, ap);
 8004e5c:	6830      	ldr	r0, [r6, #0]
 8004e5e:	4f2c      	ldr	r7, [pc, #176]	; (8004f10 <p+0xe8>)
 8004e60:	4438      	add	r0, r7
 8004e62:	f006 faa5 	bl	800b3b0 <vsiprintf>
 8004e66:	6833      	ldr	r3, [r6, #0]
 8004e68:	4418      	add	r0, r3
 8004e6a:	6030      	str	r0, [r6, #0]
    if (sending_first_buf == false)
 8004e6c:	782b      	ldrb	r3, [r5, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1ed      	bne.n	8004e4e <p+0x26>
      second_buf_len = (int)strlen(second_buf);
 8004e72:	4638      	mov	r0, r7
 8004e74:	f7fb f9fc 	bl	8000270 <strlen>
 8004e78:	6030      	str	r0, [r6, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len); // 2ms
 8004e7a:	6832      	ldr	r2, [r6, #0]
 8004e7c:	4825      	ldr	r0, [pc, #148]	; (8004f14 <p+0xec>)
 8004e7e:	4639      	mov	r1, r7
 8004e80:	b292      	uxth	r2, r2
 8004e82:	f003 fbd7 	bl	8008634 <HAL_UART_Transmit_DMA>
 8004e86:	e7e2      	b.n	8004e4e <p+0x26>
  else if (sending_second_buf)
 8004e88:	4f23      	ldr	r7, [pc, #140]	; (8004f18 <p+0xf0>)
 8004e8a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004e8e:	783b      	ldrb	r3, [r7, #0]
 8004e90:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8004e94:	b303      	cbz	r3, 8004ed8 <p+0xb0>
    if (first_buf_len > UART_TEMP_BUF_SIZE / 2)
 8004e96:	4d21      	ldr	r5, [pc, #132]	; (8004f1c <p+0xf4>)
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004e9e:	dd05      	ble.n	8004eac <p+0x84>
      is_in_printf_func = false;
 8004ea0:	7020      	strb	r0, [r4, #0]
}
 8004ea2:	b002      	add	sp, #8
 8004ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea8:	b004      	add	sp, #16
 8004eaa:	4770      	bx	lr
    first_buf_len += vsprintf(first_buf + first_buf_len, format, ap);
 8004eac:	6828      	ldr	r0, [r5, #0]
 8004eae:	4e1c      	ldr	r6, [pc, #112]	; (8004f20 <p+0xf8>)
 8004eb0:	4430      	add	r0, r6
 8004eb2:	f006 fa7d 	bl	800b3b0 <vsiprintf>
 8004eb6:	682b      	ldr	r3, [r5, #0]
 8004eb8:	4418      	add	r0, r3
 8004eba:	6028      	str	r0, [r5, #0]
    if (sending_second_buf == false)
 8004ebc:	783b      	ldrb	r3, [r7, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1c5      	bne.n	8004e4e <p+0x26>
      first_buf_len = (int)strlen(first_buf);
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	f7fb f9d4 	bl	8000270 <strlen>
 8004ec8:	6028      	str	r0, [r5, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 8004eca:	682a      	ldr	r2, [r5, #0]
 8004ecc:	4811      	ldr	r0, [pc, #68]	; (8004f14 <p+0xec>)
 8004ece:	4631      	mov	r1, r6
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	f003 fbaf 	bl	8008634 <HAL_UART_Transmit_DMA>
 8004ed6:	e7ba      	b.n	8004e4e <p+0x26>
    first_buf_len = vsprintf(first_buf, format, ap);
 8004ed8:	4811      	ldr	r0, [pc, #68]	; (8004f20 <p+0xf8>)
 8004eda:	4f10      	ldr	r7, [pc, #64]	; (8004f1c <p+0xf4>)
 8004edc:	f006 fa68 	bl	800b3b0 <vsiprintf>
 8004ee0:	6038      	str	r0, [r7, #0]
    sending_first_buf = true;
 8004ee2:	702e      	strb	r6, [r5, #0]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	490e      	ldr	r1, [pc, #56]	; (8004f20 <p+0xf8>)
 8004ee8:	480a      	ldr	r0, [pc, #40]	; (8004f14 <p+0xec>)
 8004eea:	b292      	uxth	r2, r2
 8004eec:	f003 fba2 	bl	8008634 <HAL_UART_Transmit_DMA>
    first_buf_len = (int)strlen(first_buf);
 8004ef0:	480b      	ldr	r0, [pc, #44]	; (8004f20 <p+0xf8>)
 8004ef2:	f7fb f9bd 	bl	8000270 <strlen>
    second_buf_len = 0;
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <p+0xe4>)
    first_buf_len = (int)strlen(first_buf);
 8004ef8:	6038      	str	r0, [r7, #0]
    first_buf_len = 0;
 8004efa:	f8c7 8000 	str.w	r8, [r7]
    second_buf_len = 0;
 8004efe:	f8c3 8000 	str.w	r8, [r3]
 8004f02:	e7a4      	b.n	8004e4e <p+0x26>
 8004f04:	20001a5c 	.word	0x20001a5c
 8004f08:	20001d84 	.word	0x20001d84
 8004f0c:	20001d80 	.word	0x20001d80
 8004f10:	20001a60 	.word	0x20001a60
 8004f14:	200019d4 	.word	0x200019d4
 8004f18:	20001d85 	.word	0x20001d85
 8004f1c:	2000198c 	.word	0x2000198c
 8004f20:	2000166c 	.word	0x2000166c

08004f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f28:	480d      	ldr	r0, [pc, #52]	; (8004f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f2a:	490e      	ldr	r1, [pc, #56]	; (8004f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f2c:	4a0e      	ldr	r2, [pc, #56]	; (8004f68 <LoopForever+0xe>)
  movs r3, #0
 8004f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f30:	e002      	b.n	8004f38 <LoopCopyDataInit>

08004f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f36:	3304      	adds	r3, #4

08004f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f3c:	d3f9      	bcc.n	8004f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f3e:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f40:	4c0b      	ldr	r4, [pc, #44]	; (8004f70 <LoopForever+0x16>)
  movs r3, #0
 8004f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f44:	e001      	b.n	8004f4a <LoopFillZerobss>

08004f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f48:	3204      	adds	r2, #4

08004f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f4c:	d3fb      	bcc.n	8004f46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f4e:	f7ff fb1f 	bl	8004590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f52:	f006 fa8f 	bl	800b474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f56:	f7fe f957 	bl	8003208 <main>

08004f5a <LoopForever>:

LoopForever:
    b LoopForever
 8004f5a:	e7fe      	b.n	8004f5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004f5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f64:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004f68:	0800e1e4 	.word	0x0800e1e4
  ldr r2, =_sbss
 8004f6c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004f70:	20001efc 	.word	0x20001efc

08004f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f74:	e7fe      	b.n	8004f74 <ADC1_2_IRQHandler>
	...

08004f78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f78:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f7a:	4a0e      	ldr	r2, [pc, #56]	; (8004fb4 <HAL_InitTick+0x3c>)
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <HAL_InitTick+0x40>)
 8004f7e:	7812      	ldrb	r2, [r2, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
{
 8004f82:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f88:	fbb0 f0f2 	udiv	r0, r0, r2
 8004f8c:	fbb3 f0f0 	udiv	r0, r3, r0
 8004f90:	f001 fc04 	bl	800679c <HAL_SYSTICK_Config>
 8004f94:	b908      	cbnz	r0, 8004f9a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f96:	2d0f      	cmp	r5, #15
 8004f98:	d901      	bls.n	8004f9e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004f9a:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8004f9c:	bd38      	pop	{r3, r4, r5, pc}
 8004f9e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa8:	f001 fb9a 	bl	80066e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fac:	4b03      	ldr	r3, [pc, #12]	; (8004fbc <HAL_InitTick+0x44>)
 8004fae:	4620      	mov	r0, r4
 8004fb0:	601d      	str	r5, [r3, #0]
}
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	2000000c 	.word	0x2000000c
 8004fb8:	20000008 	.word	0x20000008
 8004fbc:	20000010 	.word	0x20000010

08004fc0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fc0:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <HAL_Init+0x20>)
{
 8004fc2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	f043 0310 	orr.w	r3, r3, #16
 8004fca:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fcc:	2003      	movs	r0, #3
 8004fce:	f001 fb75 	bl	80066bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fd2:	200f      	movs	r0, #15
 8004fd4:	f7ff ffd0 	bl	8004f78 <HAL_InitTick>
  HAL_MspInit();
 8004fd8:	f7ff fa18 	bl	800440c <HAL_MspInit>
}
 8004fdc:	2000      	movs	r0, #0
 8004fde:	bd08      	pop	{r3, pc}
 8004fe0:	40022000 	.word	0x40022000

08004fe4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004fe4:	4a03      	ldr	r2, [pc, #12]	; (8004ff4 <HAL_IncTick+0x10>)
 8004fe6:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <HAL_IncTick+0x14>)
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	440b      	add	r3, r1
 8004fee:	6013      	str	r3, [r2, #0]
}
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20001d88 	.word	0x20001d88
 8004ff8:	2000000c 	.word	0x2000000c

08004ffc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004ffc:	4b01      	ldr	r3, [pc, #4]	; (8005004 <HAL_GetTick+0x8>)
 8004ffe:	6818      	ldr	r0, [r3, #0]
}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20001d88 	.word	0x20001d88

08005008 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800500c:	f7ff fff6 	bl	8004ffc <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005010:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005012:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005014:	d002      	beq.n	800501c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005016:	4b04      	ldr	r3, [pc, #16]	; (8005028 <HAL_Delay+0x20>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800501c:	f7ff ffee 	bl	8004ffc <HAL_GetTick>
 8005020:	1b43      	subs	r3, r0, r5
 8005022:	42a3      	cmp	r3, r4
 8005024:	d3fa      	bcc.n	800501c <HAL_Delay+0x14>
  {
  }
}
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	2000000c 	.word	0x2000000c

0800502c <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800502c:	6802      	ldr	r2, [r0, #0]
{
 800502e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005030:	6893      	ldr	r3, [r2, #8]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	2b01      	cmp	r3, #1
 8005038:	d001      	beq.n	800503e <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800503a:	2000      	movs	r0, #0
}
 800503c:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800503e:	6811      	ldr	r1, [r2, #0]
 8005040:	07cc      	lsls	r4, r1, #31
 8005042:	d5fa      	bpl.n	800503a <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005044:	6891      	ldr	r1, [r2, #8]
 8005046:	f001 010d 	and.w	r1, r1, #13
 800504a:	2901      	cmp	r1, #1
 800504c:	4604      	mov	r4, r0
 800504e:	d009      	beq.n	8005064 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005050:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005052:	f042 0210 	orr.w	r2, r2, #16
 8005056:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005058:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800505a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005062:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8005064:	6893      	ldr	r3, [r2, #8]
 8005066:	2103      	movs	r1, #3
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	6093      	str	r3, [r2, #8]
 800506e:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8005070:	f7ff ffc4 	bl	8004ffc <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 800507a:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800507c:	d403      	bmi.n	8005086 <ADC_Disable+0x5a>
 800507e:	e7dc      	b.n	800503a <ADC_Disable+0xe>
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	07db      	lsls	r3, r3, #31
 8005084:	d5d9      	bpl.n	800503a <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005086:	f7ff ffb9 	bl	8004ffc <HAL_GetTick>
 800508a:	1b40      	subs	r0, r0, r5
 800508c:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800508e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005090:	d9f6      	bls.n	8005080 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	07d2      	lsls	r2, r2, #31
 8005096:	d5f3      	bpl.n	8005080 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800509a:	f043 0310 	orr.w	r3, r3, #16
 800509e:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80050a2:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a4:	4303      	orrs	r3, r0
 80050a6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80050a8:	bd38      	pop	{r3, r4, r5, pc}
 80050aa:	bf00      	nop

080050ac <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050ac:	6802      	ldr	r2, [r0, #0]
{
 80050ae:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050b0:	6893      	ldr	r3, [r2, #8]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b01      	cmp	r3, #1
{
 80050b8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050ba:	d025      	beq.n	8005108 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80050bc:	6891      	ldr	r1, [r2, #8]
 80050be:	4b15      	ldr	r3, [pc, #84]	; (8005114 <ADC_Enable+0x68>)
 80050c0:	4219      	tst	r1, r3
 80050c2:	d008      	beq.n	80050d6 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050c6:	f043 0310 	orr.w	r3, r3, #16
 80050ca:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80050ce:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050d0:	4303      	orrs	r3, r0
 80050d2:	6463      	str	r3, [r4, #68]	; 0x44
}
 80050d4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80050d6:	6893      	ldr	r3, [r2, #8]
 80050d8:	f043 0301 	orr.w	r3, r3, #1
 80050dc:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80050de:	f7ff ff8d 	bl	8004ffc <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050e2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 80050e4:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	07d9      	lsls	r1, r3, #31
 80050ea:	d40b      	bmi.n	8005104 <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050ec:	f7ff ff86 	bl	8004ffc <HAL_GetTick>
 80050f0:	1b43      	subs	r3, r0, r5
 80050f2:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050f4:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80050f6:	d9f6      	bls.n	80050e6 <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	07d2      	lsls	r2, r2, #31
 80050fc:	d5e2      	bpl.n	80050c4 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	07d9      	lsls	r1, r3, #31
 8005102:	d5f3      	bpl.n	80050ec <ADC_Enable+0x40>
  return HAL_OK;
 8005104:	2000      	movs	r0, #0
}
 8005106:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005108:	6813      	ldr	r3, [r2, #0]
 800510a:	07d8      	lsls	r0, r3, #31
 800510c:	d5d6      	bpl.n	80050bc <ADC_Enable+0x10>
  return HAL_OK;
 800510e:	2000      	movs	r0, #0
 8005110:	e7f9      	b.n	8005106 <ADC_Enable+0x5a>
 8005112:	bf00      	nop
 8005114:	8000003f 	.word	0x8000003f

08005118 <HAL_ADC_Init>:
{
 8005118:	b530      	push	{r4, r5, lr}
 800511a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8005120:	2800      	cmp	r0, #0
 8005122:	f000 8099 	beq.w	8005258 <HAL_ADC_Init+0x140>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005126:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005128:	f013 0310 	ands.w	r3, r3, #16
 800512c:	4604      	mov	r4, r0
 800512e:	d117      	bne.n	8005160 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8005130:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005132:	2d00      	cmp	r5, #0
 8005134:	f000 8093 	beq.w	800525e <HAL_ADC_Init+0x146>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005138:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800513a:	6891      	ldr	r1, [r2, #8]
 800513c:	00c9      	lsls	r1, r1, #3
 800513e:	d57f      	bpl.n	8005240 <HAL_ADC_Init+0x128>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8005140:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005142:	008d      	lsls	r5, r1, #2
 8005144:	d47c      	bmi.n	8005240 <HAL_ADC_Init+0x128>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005146:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005148:	06c8      	lsls	r0, r1, #27
 800514a:	d400      	bmi.n	800514e <HAL_ADC_Init+0x36>
 800514c:	b163      	cbz	r3, 8005168 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 800514e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005150:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 8005154:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8005156:	f043 0310 	orr.w	r3, r3, #16
 800515a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800515c:	b003      	add	sp, #12
 800515e:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005160:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005162:	06da      	lsls	r2, r3, #27
 8005164:	d4f3      	bmi.n	800514e <HAL_ADC_Init+0x36>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005166:	6802      	ldr	r2, [r0, #0]
 8005168:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800516a:	0759      	lsls	r1, r3, #29
 800516c:	d4ef      	bmi.n	800514e <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 800516e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005170:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005174:	f043 0302 	orr.w	r3, r3, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005178:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800517c:	6423      	str	r3, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800517e:	f000 80d8 	beq.w	8005332 <HAL_ADC_Init+0x21a>
 8005182:	4b7d      	ldr	r3, [pc, #500]	; (8005378 <HAL_ADC_Init+0x260>)
 8005184:	429a      	cmp	r2, r3
 8005186:	f000 80dc 	beq.w	8005342 <HAL_ADC_Init+0x22a>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800518a:	497c      	ldr	r1, [pc, #496]	; (800537c <HAL_ADC_Init+0x264>)
 800518c:	428a      	cmp	r2, r1
 800518e:	d073      	beq.n	8005278 <HAL_ADC_Init+0x160>
 8005190:	4b7b      	ldr	r3, [pc, #492]	; (8005380 <HAL_ADC_Init+0x268>)
 8005192:	429a      	cmp	r2, r3
 8005194:	d071      	beq.n	800527a <HAL_ADC_Init+0x162>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005196:	6893      	ldr	r3, [r2, #8]
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	2b01      	cmp	r3, #1
 800519e:	f000 80e2 	beq.w	8005366 <HAL_ADC_Init+0x24e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051a2:	4878      	ldr	r0, [pc, #480]	; (8005384 <HAL_ADC_Init+0x26c>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 80051a4:	6883      	ldr	r3, [r0, #8]
 80051a6:	6861      	ldr	r1, [r4, #4]
 80051a8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6083      	str	r3, [r0, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80051b0:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80051b4:	430b      	orrs	r3, r1
 80051b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051b8:	7e60      	ldrb	r0, [r4, #25]
 80051ba:	3901      	subs	r1, #1
 80051bc:	bf18      	it	ne
 80051be:	2101      	movne	r1, #1
 80051c0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80051c4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80051c8:	f894 1020 	ldrb.w	r1, [r4, #32]
 80051cc:	2901      	cmp	r1, #1
 80051ce:	f000 8094 	beq.w	80052fa <HAL_ADC_Init+0x1e2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80051d4:	2901      	cmp	r1, #1
 80051d6:	d00c      	beq.n	80051f2 <HAL_ADC_Init+0xda>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80051d8:	4868      	ldr	r0, [pc, #416]	; (800537c <HAL_ADC_Init+0x264>)
 80051da:	4282      	cmp	r2, r0
 80051dc:	f000 809d 	beq.w	800531a <HAL_ADC_Init+0x202>
 80051e0:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80051e4:	4282      	cmp	r2, r0
 80051e6:	f000 8098 	beq.w	800531a <HAL_ADC_Init+0x202>
 80051ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80051ec:	4318      	orrs	r0, r3
 80051ee:	ea41 0300 	orr.w	r3, r1, r0
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80051f2:	6891      	ldr	r1, [r2, #8]
 80051f4:	f011 0f0c 	tst.w	r1, #12
 80051f8:	d10c      	bne.n	8005214 <HAL_ADC_Init+0xfc>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80051fa:	68d1      	ldr	r1, [r2, #12]
 80051fc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005200:	f021 0102 	bic.w	r1, r1, #2
 8005204:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8005206:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800520a:	7e20      	ldrb	r0, [r4, #24]
 800520c:	0049      	lsls	r1, r1, #1
 800520e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8005212:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8005214:	68d0      	ldr	r0, [r2, #12]
 8005216:	495c      	ldr	r1, [pc, #368]	; (8005388 <HAL_ADC_Init+0x270>)
 8005218:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800521a:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800521c:	4319      	orrs	r1, r3
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800521e:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8005220:	60d1      	str	r1, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005222:	d072      	beq.n	800530a <HAL_ADC_Init+0x1f2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005224:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005226:	f023 030f 	bic.w	r3, r3, #15
 800522a:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800522c:	2000      	movs	r0, #0
 800522e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005230:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800523c:	b003      	add	sp, #12
 800523e:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8005240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005242:	f023 0312 	bic.w	r3, r3, #18
 8005246:	f043 0310 	orr.w	r3, r3, #16
 800524a:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800524c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005254:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005256:	e77a      	b.n	800514e <HAL_ADC_Init+0x36>
    return HAL_ERROR;
 8005258:	2001      	movs	r0, #1
}
 800525a:	b003      	add	sp, #12
 800525c:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 800525e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8005262:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8005264:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8005268:	f7fb fe7a 	bl	8000f60 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800526c:	6822      	ldr	r2, [r4, #0]
 800526e:	6893      	ldr	r3, [r2, #8]
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	d511      	bpl.n	8005298 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005274:	462b      	mov	r3, r5
 8005276:	e760      	b.n	800513a <HAL_ADC_Init+0x22>
 8005278:	4941      	ldr	r1, [pc, #260]	; (8005380 <HAL_ADC_Init+0x268>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800527a:	4842      	ldr	r0, [pc, #264]	; (8005384 <HAL_ADC_Init+0x26c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800527c:	6893      	ldr	r3, [r2, #8]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d058      	beq.n	8005338 <HAL_ADC_Init+0x220>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005286:	688b      	ldr	r3, [r1, #8]
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d189      	bne.n	80051a4 <HAL_ADC_Init+0x8c>
 8005290:	680b      	ldr	r3, [r1, #0]
 8005292:	07db      	lsls	r3, r3, #31
 8005294:	d48c      	bmi.n	80051b0 <HAL_ADC_Init+0x98>
 8005296:	e785      	b.n	80051a4 <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 8005298:	4620      	mov	r0, r4
 800529a:	f7ff fec7 	bl	800502c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800529e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 80052a0:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80052a2:	06d0      	lsls	r0, r2, #27
 80052a4:	f53f af48 	bmi.w	8005138 <HAL_ADC_Init+0x20>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f47f af45 	bne.w	8005138 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 80052ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80052b0:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80052b2:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80052b6:	f021 0102 	bic.w	r1, r1, #2
 80052ba:	f041 0102 	orr.w	r1, r1, #2
 80052be:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80052c0:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052c2:	4932      	ldr	r1, [pc, #200]	; (800538c <HAL_ADC_Init+0x274>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80052c4:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 80052c8:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80052ca:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052cc:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80052ce:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80052d2:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052d4:	482e      	ldr	r0, [pc, #184]	; (8005390 <HAL_ADC_Init+0x278>)
 80052d6:	fba0 0101 	umull	r0, r1, r0, r1
 80052da:	0c89      	lsrs	r1, r1, #18
 80052dc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80052e0:	0049      	lsls	r1, r1, #1
 80052e2:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80052e4:	9901      	ldr	r1, [sp, #4]
 80052e6:	2900      	cmp	r1, #0
 80052e8:	f43f af27 	beq.w	800513a <HAL_ADC_Init+0x22>
            wait_loop_index--;
 80052ec:	9901      	ldr	r1, [sp, #4]
 80052ee:	3901      	subs	r1, #1
 80052f0:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80052f2:	9901      	ldr	r1, [sp, #4]
 80052f4:	2900      	cmp	r1, #0
 80052f6:	d1f9      	bne.n	80052ec <HAL_ADC_Init+0x1d4>
 80052f8:	e71f      	b.n	800513a <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80052fa:	bb30      	cbnz	r0, 800534a <HAL_ADC_Init+0x232>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80052fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80052fe:	3901      	subs	r1, #1
 8005300:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 8005304:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 8005308:	e763      	b.n	80051d2 <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800530a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800530c:	69e3      	ldr	r3, [r4, #28]
 800530e:	f021 010f 	bic.w	r1, r1, #15
 8005312:	3b01      	subs	r3, #1
 8005314:	430b      	orrs	r3, r1
 8005316:	6313      	str	r3, [r2, #48]	; 0x30
 8005318:	e788      	b.n	800522c <HAL_ADC_Init+0x114>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800531a:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 800531e:	d01f      	beq.n	8005360 <HAL_ADC_Init+0x248>
 8005320:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005324:	d024      	beq.n	8005370 <HAL_ADC_Init+0x258>
 8005326:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 800532a:	bf08      	it	eq
 800532c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8005330:	e75b      	b.n	80051ea <HAL_ADC_Init+0xd2>
 8005332:	4911      	ldr	r1, [pc, #68]	; (8005378 <HAL_ADC_Init+0x260>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005334:	4817      	ldr	r0, [pc, #92]	; (8005394 <HAL_ADC_Init+0x27c>)
 8005336:	e7a1      	b.n	800527c <HAL_ADC_Init+0x164>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	07dd      	lsls	r5, r3, #31
 800533c:	f53f af38 	bmi.w	80051b0 <HAL_ADC_Init+0x98>
 8005340:	e7a1      	b.n	8005286 <HAL_ADC_Init+0x16e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005342:	4814      	ldr	r0, [pc, #80]	; (8005394 <HAL_ADC_Init+0x27c>)
 8005344:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8005348:	e798      	b.n	800527c <HAL_ADC_Init+0x164>
        ADC_STATE_CLR_SET(hadc->State,
 800534a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800534c:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8005350:	f041 0120 	orr.w	r1, r1, #32
 8005354:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005356:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005358:	f041 0101 	orr.w	r1, r1, #1
 800535c:	6461      	str	r1, [r4, #68]	; 0x44
 800535e:	e738      	b.n	80051d2 <HAL_ADC_Init+0xba>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005360:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005364:	e741      	b.n	80051ea <HAL_ADC_Init+0xd2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005366:	6813      	ldr	r3, [r2, #0]
 8005368:	07db      	lsls	r3, r3, #31
 800536a:	f53f af21 	bmi.w	80051b0 <HAL_ADC_Init+0x98>
 800536e:	e718      	b.n	80051a2 <HAL_ADC_Init+0x8a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005370:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8005374:	e739      	b.n	80051ea <HAL_ADC_Init+0xd2>
 8005376:	bf00      	nop
 8005378:	50000100 	.word	0x50000100
 800537c:	50000400 	.word	0x50000400
 8005380:	50000500 	.word	0x50000500
 8005384:	50000700 	.word	0x50000700
 8005388:	fff0c007 	.word	0xfff0c007
 800538c:	20000008 	.word	0x20000008
 8005390:	431bde83 	.word	0x431bde83
 8005394:	50000300 	.word	0x50000300

08005398 <HAL_ADC_Start>:
{
 8005398:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800539a:	6803      	ldr	r3, [r0, #0]
 800539c:	689d      	ldr	r5, [r3, #8]
 800539e:	f015 0504 	ands.w	r5, r5, #4
 80053a2:	d12c      	bne.n	80053fe <HAL_ADC_Start+0x66>
    __HAL_LOCK(hadc);
 80053a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	4604      	mov	r4, r0
 80053ac:	d027      	beq.n	80053fe <HAL_ADC_Start+0x66>
 80053ae:	2301      	movs	r3, #1
 80053b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 80053b4:	f7ff fe7a 	bl	80050ac <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80053b8:	b9f0      	cbnz	r0, 80053f8 <HAL_ADC_Start+0x60>
      ADC_STATE_CLR_SET(hadc->State,
 80053ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80053bc:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80053be:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80053ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 80053ce:	6422      	str	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80053d0:	d017      	beq.n	8005402 <HAL_ADC_Start+0x6a>
 80053d2:	4a3a      	ldr	r2, [pc, #232]	; (80054bc <HAL_ADC_Start+0x124>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d068      	beq.n	80054aa <HAL_ADC_Start+0x112>
 80053d8:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 80053dc:	6892      	ldr	r2, [r2, #8]
 80053de:	06d5      	lsls	r5, r2, #27
 80053e0:	d011      	beq.n	8005406 <HAL_ADC_Start+0x6e>
 80053e2:	4937      	ldr	r1, [pc, #220]	; (80054c0 <HAL_ADC_Start+0x128>)
 80053e4:	428b      	cmp	r3, r1
 80053e6:	d00e      	beq.n	8005406 <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80053ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80053ee:	6422      	str	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80053f0:	68ca      	ldr	r2, [r1, #12]
 80053f2:	0192      	lsls	r2, r2, #6
 80053f4:	d514      	bpl.n	8005420 <HAL_ADC_Start+0x88>
 80053f6:	e00d      	b.n	8005414 <HAL_ADC_Start+0x7c>
      __HAL_UNLOCK(hadc);
 80053f8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 80053fc:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80053fe:	2002      	movs	r0, #2
}
 8005400:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005402:	4a30      	ldr	r2, [pc, #192]	; (80054c4 <HAL_ADC_Start+0x12c>)
 8005404:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005406:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005408:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800540c:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	0191      	lsls	r1, r2, #6
 8005412:	d505      	bpl.n	8005420 <HAL_ADC_Start+0x88>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005414:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005416:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800541a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800541e:	6422      	str	r2, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005420:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005422:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005426:	bf1c      	itt	ne
 8005428:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 800542a:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800542e:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8005430:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005432:	221c      	movs	r2, #28
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
 8005438:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800543c:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800543e:	d01a      	beq.n	8005476 <HAL_ADC_Start+0xde>
 8005440:	4a1e      	ldr	r2, [pc, #120]	; (80054bc <HAL_ADC_Start+0x124>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_ADC_Start+0xf4>
 8005446:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 800544a:	06cd      	lsls	r5, r1, #27
 800544c:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8005450:	d00c      	beq.n	800546c <HAL_ADC_Start+0xd4>
 8005452:	6891      	ldr	r1, [r2, #8]
 8005454:	f001 011f 	and.w	r1, r1, #31
 8005458:	2905      	cmp	r1, #5
 800545a:	d007      	beq.n	800546c <HAL_ADC_Start+0xd4>
 800545c:	6892      	ldr	r2, [r2, #8]
 800545e:	f002 021f 	and.w	r2, r2, #31
 8005462:	2a09      	cmp	r2, #9
 8005464:	d002      	beq.n	800546c <HAL_ADC_Start+0xd4>
 8005466:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <HAL_ADC_Start+0x128>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d1c7      	bne.n	80053fc <HAL_ADC_Start+0x64>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	f042 0204 	orr.w	r2, r2, #4
 8005472:	609a      	str	r2, [r3, #8]
}
 8005474:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005476:	4a13      	ldr	r2, [pc, #76]	; (80054c4 <HAL_ADC_Start+0x12c>)
 8005478:	6891      	ldr	r1, [r2, #8]
 800547a:	06cc      	lsls	r4, r1, #27
 800547c:	d0f6      	beq.n	800546c <HAL_ADC_Start+0xd4>
 800547e:	6891      	ldr	r1, [r2, #8]
 8005480:	f001 011f 	and.w	r1, r1, #31
 8005484:	2905      	cmp	r1, #5
 8005486:	d0f1      	beq.n	800546c <HAL_ADC_Start+0xd4>
 8005488:	6892      	ldr	r2, [r2, #8]
 800548a:	e7ef      	b.n	800546c <HAL_ADC_Start+0xd4>
 800548c:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <HAL_ADC_Start+0x12c>)
 800548e:	6891      	ldr	r1, [r2, #8]
 8005490:	06c9      	lsls	r1, r1, #27
 8005492:	d0eb      	beq.n	800546c <HAL_ADC_Start+0xd4>
 8005494:	6891      	ldr	r1, [r2, #8]
 8005496:	f001 011f 	and.w	r1, r1, #31
 800549a:	2905      	cmp	r1, #5
 800549c:	d0e6      	beq.n	800546c <HAL_ADC_Start+0xd4>
 800549e:	6892      	ldr	r2, [r2, #8]
 80054a0:	f002 021f 	and.w	r2, r2, #31
 80054a4:	2a09      	cmp	r2, #9
 80054a6:	d0e1      	beq.n	800546c <HAL_ADC_Start+0xd4>
}
 80054a8:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80054aa:	4a06      	ldr	r2, [pc, #24]	; (80054c4 <HAL_ADC_Start+0x12c>)
 80054ac:	6892      	ldr	r2, [r2, #8]
 80054ae:	06d2      	lsls	r2, r2, #27
 80054b0:	d0a9      	beq.n	8005406 <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80054b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80054b4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80054b8:	e797      	b.n	80053ea <HAL_ADC_Start+0x52>
 80054ba:	bf00      	nop
 80054bc:	50000100 	.word	0x50000100
 80054c0:	50000400 	.word	0x50000400
 80054c4:	50000300 	.word	0x50000300

080054c8 <HAL_ADCEx_Calibration_Start>:
{
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80054ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d040      	beq.n	8005554 <HAL_ADCEx_Calibration_Start+0x8c>
 80054d2:	2701      	movs	r7, #1
 80054d4:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 80054d8:	4604      	mov	r4, r0
 80054da:	460d      	mov	r5, r1
 80054dc:	f7ff fda6 	bl	800502c <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80054e0:	4606      	mov	r6, r0
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d131      	bne.n	800554a <HAL_ADCEx_Calibration_Start+0x82>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80054e6:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80054e8:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80054ea:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80054ec:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80054ee:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80054f2:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80054f4:	d103      	bne.n	80054fe <HAL_ADCEx_Calibration_Start+0x36>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80054fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005504:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005506:	f7ff fd79 	bl	8004ffc <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800550a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 800550c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	da14      	bge.n	800553e <HAL_ADCEx_Calibration_Start+0x76>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005514:	f7ff fd72 	bl	8004ffc <HAL_GetTick>
 8005518:	1b43      	subs	r3, r0, r5
 800551a:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800551c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800551e:	d9f6      	bls.n	800550e <HAL_ADCEx_Calibration_Start+0x46>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	2a00      	cmp	r2, #0
 8005524:	daf3      	bge.n	800550e <HAL_ADCEx_Calibration_Start+0x46>
          ADC_STATE_CLR_SET(hadc->State,
 8005526:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8005528:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 800552a:	f023 0312 	bic.w	r3, r3, #18
 800552e:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 8005532:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 8005534:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 8005538:	6423      	str	r3, [r4, #64]	; 0x40
}
 800553a:	4630      	mov	r0, r6
 800553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 800553e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005540:	f023 0303 	bic.w	r3, r3, #3
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800554a:	2300      	movs	r3, #0
 800554c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005550:	4630      	mov	r0, r6
 8005552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8005554:	2602      	movs	r6, #2
}
 8005556:	4630      	mov	r0, r6
 8005558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800555a:	bf00      	nop

0800555c <HAL_ADCEx_InjectedStart>:
{
 800555c:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800555e:	6803      	ldr	r3, [r0, #0]
 8005560:	689d      	ldr	r5, [r3, #8]
 8005562:	f015 0508 	ands.w	r5, r5, #8
 8005566:	d129      	bne.n	80055bc <HAL_ADCEx_InjectedStart+0x60>
    __HAL_LOCK(hadc);
 8005568:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800556c:	2b01      	cmp	r3, #1
 800556e:	4604      	mov	r4, r0
 8005570:	d024      	beq.n	80055bc <HAL_ADCEx_InjectedStart+0x60>
 8005572:	2301      	movs	r3, #1
 8005574:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8005578:	f7ff fd98 	bl	80050ac <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800557c:	b9d8      	cbnz	r0, 80055b6 <HAL_ADCEx_InjectedStart+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 800557e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005580:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8005582:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800558e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 8005592:	6423      	str	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005594:	d014      	beq.n	80055c0 <HAL_ADCEx_InjectedStart+0x64>
 8005596:	4b32      	ldr	r3, [pc, #200]	; (8005660 <HAL_ADCEx_InjectedStart+0x104>)
 8005598:	429a      	cmp	r2, r3
 800559a:	d042      	beq.n	8005622 <HAL_ADCEx_InjectedStart+0xc6>
 800559c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	06d9      	lsls	r1, r3, #27
 80055a4:	d00e      	beq.n	80055c4 <HAL_ADCEx_InjectedStart+0x68>
 80055a6:	4b2f      	ldr	r3, [pc, #188]	; (8005664 <HAL_ADCEx_InjectedStart+0x108>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d00b      	beq.n	80055c4 <HAL_ADCEx_InjectedStart+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80055ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055b2:	6423      	str	r3, [r4, #64]	; 0x40
 80055b4:	e00a      	b.n	80055cc <HAL_ADCEx_InjectedStart+0x70>
      __HAL_UNLOCK(hadc);
 80055b6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80055bc:	2002      	movs	r0, #2
}
 80055be:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80055c0:	4b29      	ldr	r3, [pc, #164]	; (8005668 <HAL_ADCEx_InjectedStart+0x10c>)
 80055c2:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80055c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80055ca:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80055cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055ce:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        ADC_CLEAR_ERRORCODE(hadc);
 80055d2:	bf08      	it	eq
 80055d4:	6463      	streq	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80055d6:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80055d8:	2360      	movs	r3, #96	; 0x60
      __HAL_UNLOCK(hadc);
 80055da:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80055de:	6013      	str	r3, [r2, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80055e0:	68d3      	ldr	r3, [r2, #12]
 80055e2:	019b      	lsls	r3, r3, #6
 80055e4:	d4e9      	bmi.n	80055ba <HAL_ADCEx_InjectedStart+0x5e>
 80055e6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80055ea:	d01f      	beq.n	800562c <HAL_ADCEx_InjectedStart+0xd0>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80055ec:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <HAL_ADCEx_InjectedStart+0x104>)
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d027      	beq.n	8005642 <HAL_ADCEx_InjectedStart+0xe6>
 80055f2:	f8d3 1608 	ldr.w	r1, [r3, #1544]	; 0x608
 80055f6:	06cd      	lsls	r5, r1, #27
 80055f8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80055fc:	d00c      	beq.n	8005618 <HAL_ADCEx_InjectedStart+0xbc>
 80055fe:	6899      	ldr	r1, [r3, #8]
 8005600:	f001 011f 	and.w	r1, r1, #31
 8005604:	2906      	cmp	r1, #6
 8005606:	d007      	beq.n	8005618 <HAL_ADCEx_InjectedStart+0xbc>
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2b07      	cmp	r3, #7
 8005610:	d002      	beq.n	8005618 <HAL_ADCEx_InjectedStart+0xbc>
 8005612:	4b14      	ldr	r3, [pc, #80]	; (8005664 <HAL_ADCEx_InjectedStart+0x108>)
 8005614:	429a      	cmp	r2, r3
 8005616:	d1d0      	bne.n	80055ba <HAL_ADCEx_InjectedStart+0x5e>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8005618:	6893      	ldr	r3, [r2, #8]
 800561a:	f043 0308 	orr.w	r3, r3, #8
 800561e:	6093      	str	r3, [r2, #8]
}
 8005620:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005622:	4b11      	ldr	r3, [pc, #68]	; (8005668 <HAL_ADCEx_InjectedStart+0x10c>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	06db      	lsls	r3, r3, #27
 8005628:	d0cc      	beq.n	80055c4 <HAL_ADCEx_InjectedStart+0x68>
 800562a:	e7bf      	b.n	80055ac <HAL_ADCEx_InjectedStart+0x50>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 800562c:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <HAL_ADCEx_InjectedStart+0x10c>)
 800562e:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005630:	06c9      	lsls	r1, r1, #27
 8005632:	d0f1      	beq.n	8005618 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005634:	6899      	ldr	r1, [r3, #8]
 8005636:	f001 011f 	and.w	r1, r1, #31
 800563a:	2906      	cmp	r1, #6
 800563c:	d0ec      	beq.n	8005618 <HAL_ADCEx_InjectedStart+0xbc>
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	e7ea      	b.n	8005618 <HAL_ADCEx_InjectedStart+0xbc>
 8005642:	4b09      	ldr	r3, [pc, #36]	; (8005668 <HAL_ADCEx_InjectedStart+0x10c>)
 8005644:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005646:	06cc      	lsls	r4, r1, #27
 8005648:	d0e6      	beq.n	8005618 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 800564a:	6899      	ldr	r1, [r3, #8]
 800564c:	f001 011f 	and.w	r1, r1, #31
 8005650:	2906      	cmp	r1, #6
 8005652:	d0e1      	beq.n	8005618 <HAL_ADCEx_InjectedStart+0xbc>
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 031f 	and.w	r3, r3, #31
 800565a:	2b07      	cmp	r3, #7
 800565c:	d0dc      	beq.n	8005618 <HAL_ADCEx_InjectedStart+0xbc>
}
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	50000100 	.word	0x50000100
 8005664:	50000400 	.word	0x50000400
 8005668:	50000300 	.word	0x50000300

0800566c <HAL_ADCEx_InjectedGetValue>:
  switch(InjectedRank)
 800566c:	2903      	cmp	r1, #3
 800566e:	d007      	beq.n	8005680 <HAL_ADCEx_InjectedGetValue+0x14>
 8005670:	2904      	cmp	r1, #4
 8005672:	d00d      	beq.n	8005690 <HAL_ADCEx_InjectedGetValue+0x24>
 8005674:	2902      	cmp	r1, #2
 8005676:	d007      	beq.n	8005688 <HAL_ADCEx_InjectedGetValue+0x1c>
      tmp_jdr = hadc->Instance->JDR1;
 8005678:	6803      	ldr	r3, [r0, #0]
 800567a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 800567e:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8005680:	6803      	ldr	r3, [r0, #0]
 8005682:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 8005686:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 8005688:	6803      	ldr	r3, [r0, #0]
 800568a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 800568e:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8005690:	6803      	ldr	r3, [r0, #0]
 8005692:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 8005696:	4770      	bx	lr

08005698 <HAL_ADC_ConfigChannel>:
{
 8005698:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800569a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800569e:	68cc      	ldr	r4, [r1, #12]
{
 80056a0:	b083      	sub	sp, #12
 80056a2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80056a4:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 80056a6:	f04f 0000 	mov.w	r0, #0
 80056aa:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80056ac:	f000 8107 	beq.w	80058be <HAL_ADC_ConfigChannel+0x226>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80056b0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80056b2:	2001      	movs	r0, #1
 80056b4:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80056b8:	6895      	ldr	r5, [r2, #8]
 80056ba:	076d      	lsls	r5, r5, #29
 80056bc:	d43a      	bmi.n	8005734 <HAL_ADC_ConfigChannel+0x9c>
    if (sConfig->Rank < 5U)
 80056be:	6848      	ldr	r0, [r1, #4]
 80056c0:	2804      	cmp	r0, #4
 80056c2:	f200 808b 	bhi.w	80057dc <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 80056c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80056ca:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80056cc:	680d      	ldr	r5, [r1, #0]
 80056ce:	0040      	lsls	r0, r0, #1
 80056d0:	f04f 0c1f 	mov.w	ip, #31
 80056d4:	fa0c fc00 	lsl.w	ip, ip, r0
 80056d8:	ea26 0c0c 	bic.w	ip, r6, ip
 80056dc:	fa05 f000 	lsl.w	r0, r5, r0
 80056e0:	ea4c 0000 	orr.w	r0, ip, r0
 80056e4:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80056e6:	6890      	ldr	r0, [r2, #8]
 80056e8:	f010 0f0c 	tst.w	r0, #12
 80056ec:	d134      	bne.n	8005758 <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80056ee:	2d09      	cmp	r5, #9
 80056f0:	f200 808b 	bhi.w	800580a <HAL_ADC_ConfigChannel+0x172>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80056f4:	6950      	ldr	r0, [r2, #20]
 80056f6:	688e      	ldr	r6, [r1, #8]
 80056f8:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80056fc:	f04f 0c07 	mov.w	ip, #7
 8005700:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005704:	fa06 f60e 	lsl.w	r6, r6, lr
 8005708:	ea20 000c 	bic.w	r0, r0, ip
 800570c:	4330      	orrs	r0, r6
 800570e:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005710:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8005712:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005714:	694f      	ldr	r7, [r1, #20]
 8005716:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800571a:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 800571c:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800571e:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8005722:	2e03      	cmp	r6, #3
 8005724:	f200 8148 	bhi.w	80059b8 <HAL_ADC_ConfigChannel+0x320>
 8005728:	e8df f016 	tbh	[pc, r6, lsl #1]
 800572c:	010a000d 	.word	0x010a000d
 8005730:	00f60100 	.word	0x00f60100
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005736:	f042 0220 	orr.w	r2, r2, #32
 800573a:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005742:	b003      	add	sp, #12
 8005744:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005746:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8005748:	4eaa      	ldr	r6, [pc, #680]	; (80059f4 <HAL_ADC_ConfigChannel+0x35c>)
 800574a:	403e      	ands	r6, r7
 800574c:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8005750:	4330      	orrs	r0, r6
 8005752:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005756:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005758:	6890      	ldr	r0, [r2, #8]
 800575a:	f000 0003 	and.w	r0, r0, #3
 800575e:	2801      	cmp	r0, #1
 8005760:	f000 80a8 	beq.w	80058b4 <HAL_ADC_ConfigChannel+0x21c>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005764:	2c01      	cmp	r4, #1
 8005766:	f000 80ad 	beq.w	80058c4 <HAL_ADC_ConfigChannel+0x22c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800576a:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 800576e:	2001      	movs	r0, #1
 8005770:	40a8      	lsls	r0, r5
 8005772:	ea21 0100 	bic.w	r1, r1, r0
 8005776:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800577a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800577e:	d079      	beq.n	8005874 <HAL_ADC_ConfigChannel+0x1dc>
 8005780:	499d      	ldr	r1, [pc, #628]	; (80059f8 <HAL_ADC_ConfigChannel+0x360>)
 8005782:	428a      	cmp	r2, r1
 8005784:	d076      	beq.n	8005874 <HAL_ADC_ConfigChannel+0x1dc>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005786:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005788:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800578c:	d075      	beq.n	800587a <HAL_ADC_ConfigChannel+0x1e2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800578e:	2d11      	cmp	r5, #17
 8005790:	f040 80ae 	bne.w	80058f0 <HAL_ADC_ConfigChannel+0x258>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005794:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005796:	01c4      	lsls	r4, r0, #7
 8005798:	d472      	bmi.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800579a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800579e:	d071      	beq.n	8005884 <HAL_ADC_ConfigChannel+0x1ec>
 80057a0:	4895      	ldr	r0, [pc, #596]	; (80059f8 <HAL_ADC_ConfigChannel+0x360>)
 80057a2:	4282      	cmp	r2, r0
 80057a4:	f000 80df 	beq.w	8005966 <HAL_ADC_ConfigChannel+0x2ce>
 80057a8:	4c94      	ldr	r4, [pc, #592]	; (80059fc <HAL_ADC_ConfigChannel+0x364>)
 80057aa:	42a2      	cmp	r2, r4
 80057ac:	f000 80fe 	beq.w	80059ac <HAL_ADC_ConfigChannel+0x314>
 80057b0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80057b4:	4282      	cmp	r2, r0
 80057b6:	d066      	beq.n	8005886 <HAL_ADC_ConfigChannel+0x1ee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80057b8:	6890      	ldr	r0, [r2, #8]
 80057ba:	f000 0003 	and.w	r0, r0, #3
 80057be:	2801      	cmp	r0, #1
 80057c0:	f000 80f6 	beq.w	80059b0 <HAL_ADC_ConfigChannel+0x318>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80057c4:	2d10      	cmp	r5, #16
 80057c6:	d05b      	beq.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80057c8:	2d11      	cmp	r5, #17
 80057ca:	d059      	beq.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80057cc:	2d12      	cmp	r5, #18
 80057ce:	d157      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80057d0:	688a      	ldr	r2, [r1, #8]
 80057d2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057d6:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80057d8:	608a      	str	r2, [r1, #8]
 80057da:	e7af      	b.n	800573c <HAL_ADC_ConfigChannel+0xa4>
    else if (sConfig->Rank < 10U)
 80057dc:	2809      	cmp	r0, #9
 80057de:	d925      	bls.n	800582c <HAL_ADC_ConfigChannel+0x194>
    else if (sConfig->Rank < 15U)
 80057e0:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80057e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80057e6:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 80057ea:	f200 8087 	bhi.w	80058fc <HAL_ADC_ConfigChannel+0x264>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80057ee:	6b96      	ldr	r6, [r2, #56]	; 0x38
 80057f0:	680d      	ldr	r5, [r1, #0]
 80057f2:	383c      	subs	r0, #60	; 0x3c
 80057f4:	f04f 0c1f 	mov.w	ip, #31
 80057f8:	fa0c fc00 	lsl.w	ip, ip, r0
 80057fc:	ea26 060c 	bic.w	r6, r6, ip
 8005800:	fa05 f000 	lsl.w	r0, r5, r0
 8005804:	4330      	orrs	r0, r6
 8005806:	6390      	str	r0, [r2, #56]	; 0x38
 8005808:	e76d      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800580a:	688f      	ldr	r7, [r1, #8]
 800580c:	6990      	ldr	r0, [r2, #24]
 800580e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8005812:	3e1e      	subs	r6, #30
 8005814:	f04f 0e07 	mov.w	lr, #7
 8005818:	fa07 fc06 	lsl.w	ip, r7, r6
 800581c:	fa0e f606 	lsl.w	r6, lr, r6
 8005820:	ea20 0006 	bic.w	r0, r0, r6
 8005824:	ea40 000c 	orr.w	r0, r0, ip
 8005828:	6190      	str	r0, [r2, #24]
 800582a:	e771      	b.n	8005710 <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->SQR2,
 800582c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005830:	0040      	lsls	r0, r0, #1
 8005832:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8005834:	680d      	ldr	r5, [r1, #0]
 8005836:	381e      	subs	r0, #30
 8005838:	f04f 0c1f 	mov.w	ip, #31
 800583c:	fa0c fc00 	lsl.w	ip, ip, r0
 8005840:	ea26 060c 	bic.w	r6, r6, ip
 8005844:	fa05 f000 	lsl.w	r0, r5, r0
 8005848:	4330      	orrs	r0, r6
 800584a:	6350      	str	r0, [r2, #52]	; 0x34
 800584c:	e74b      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x4e>
        MODIFY_REG(hadc->Instance->SMPR1,
 800584e:	688c      	ldr	r4, [r1, #8]
 8005850:	6950      	ldr	r0, [r2, #20]
 8005852:	1c69      	adds	r1, r5, #1
 8005854:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005858:	2607      	movs	r6, #7
 800585a:	408c      	lsls	r4, r1
 800585c:	fa06 f101 	lsl.w	r1, r6, r1
 8005860:	ea20 0101 	bic.w	r1, r0, r1
 8005864:	4321      	orrs	r1, r4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005866:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 800586a:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800586c:	d008      	beq.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
 800586e:	4962      	ldr	r1, [pc, #392]	; (80059f8 <HAL_ADC_ConfigChannel+0x360>)
 8005870:	428a      	cmp	r2, r1
 8005872:	d105      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005874:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005876:	4962      	ldr	r1, [pc, #392]	; (8005a00 <HAL_ADC_ConfigChannel+0x368>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005878:	d189      	bne.n	800578e <HAL_ADC_ConfigChannel+0xf6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800587a:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800587c:	0206      	lsls	r6, r0, #8
 800587e:	d58c      	bpl.n	800579a <HAL_ADC_ConfigChannel+0x102>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005880:	2000      	movs	r0, #0
 8005882:	e75b      	b.n	800573c <HAL_ADC_ConfigChannel+0xa4>
 8005884:	4c5c      	ldr	r4, [pc, #368]	; (80059f8 <HAL_ADC_ConfigChannel+0x360>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005886:	6890      	ldr	r0, [r2, #8]
 8005888:	f000 0003 	and.w	r0, r0, #3
 800588c:	2801      	cmp	r0, #1
 800588e:	d061      	beq.n	8005954 <HAL_ADC_ConfigChannel+0x2bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005890:	68a0      	ldr	r0, [r4, #8]
 8005892:	f000 0003 	and.w	r0, r0, #3
 8005896:	2801      	cmp	r0, #1
 8005898:	d068      	beq.n	800596c <HAL_ADC_ConfigChannel+0x2d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800589a:	2d10      	cmp	r5, #16
 800589c:	d06a      	beq.n	8005974 <HAL_ADC_ConfigChannel+0x2dc>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800589e:	2d11      	cmp	r5, #17
 80058a0:	d194      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x134>
 80058a2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80058a6:	d1eb      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80058a8:	688a      	ldr	r2, [r1, #8]
 80058aa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ae:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80058b0:	608a      	str	r2, [r1, #8]
 80058b2:	e743      	b.n	800573c <HAL_ADC_ConfigChannel+0xa4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80058b4:	6810      	ldr	r0, [r2, #0]
 80058b6:	07c7      	lsls	r7, r0, #31
 80058b8:	f57f af54 	bpl.w	8005764 <HAL_ADC_ConfigChannel+0xcc>
 80058bc:	e7e0      	b.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
  __HAL_LOCK(hadc);
 80058be:	2002      	movs	r0, #2
}
 80058c0:	b003      	add	sp, #12
 80058c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80058c4:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 80058c8:	40ac      	lsls	r4, r5
 80058ca:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80058cc:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80058ce:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80058d2:	d9bc      	bls.n	800584e <HAL_ADC_ConfigChannel+0x1b6>
        MODIFY_REG(hadc->Instance->SMPR2,
 80058d4:	688c      	ldr	r4, [r1, #8]
 80058d6:	6990      	ldr	r0, [r2, #24]
 80058d8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80058dc:	391b      	subs	r1, #27
 80058de:	2607      	movs	r6, #7
 80058e0:	408c      	lsls	r4, r1
 80058e2:	fa06 f101 	lsl.w	r1, r6, r1
 80058e6:	ea20 0101 	bic.w	r1, r0, r1
 80058ea:	4321      	orrs	r1, r4
 80058ec:	6191      	str	r1, [r2, #24]
 80058ee:	e744      	b.n	800577a <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80058f0:	2d12      	cmp	r5, #18
 80058f2:	d1c5      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80058f4:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80058f6:	0240      	lsls	r0, r0, #9
 80058f8:	d4c2      	bmi.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
 80058fa:	e74e      	b.n	800579a <HAL_ADC_ConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80058fc:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80058fe:	680d      	ldr	r5, [r1, #0]
 8005900:	385a      	subs	r0, #90	; 0x5a
 8005902:	f04f 0c1f 	mov.w	ip, #31
 8005906:	fa0c fc00 	lsl.w	ip, ip, r0
 800590a:	ea26 060c 	bic.w	r6, r6, ip
 800590e:	fa05 f000 	lsl.w	r0, r5, r0
 8005912:	4330      	orrs	r0, r6
 8005914:	63d0      	str	r0, [r2, #60]	; 0x3c
 8005916:	e6e6      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005918:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 800591a:	4e36      	ldr	r6, [pc, #216]	; (80059f4 <HAL_ADC_ConfigChannel+0x35c>)
 800591c:	403e      	ands	r6, r7
 800591e:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8005922:	4330      	orrs	r0, r6
 8005924:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005928:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 800592a:	e715      	b.n	8005758 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 800592c:	6e97      	ldr	r7, [r2, #104]	; 0x68
 800592e:	4e31      	ldr	r6, [pc, #196]	; (80059f4 <HAL_ADC_ConfigChannel+0x35c>)
 8005930:	403e      	ands	r6, r7
 8005932:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8005936:	4330      	orrs	r0, r6
 8005938:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800593c:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 800593e:	e70b      	b.n	8005758 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005940:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8005942:	4e2c      	ldr	r6, [pc, #176]	; (80059f4 <HAL_ADC_ConfigChannel+0x35c>)
 8005944:	403e      	ands	r6, r7
 8005946:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800594a:	4330      	orrs	r0, r6
 800594c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005950:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8005952:	e701      	b.n	8005758 <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005954:	6810      	ldr	r0, [r2, #0]
 8005956:	07c6      	lsls	r6, r0, #31
 8005958:	d59a      	bpl.n	8005890 <HAL_ADC_ConfigChannel+0x1f8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800595a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800595c:	f042 0220 	orr.w	r2, r2, #32
        tmp_hal_status = HAL_ERROR;
 8005960:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005962:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005964:	e6ea      	b.n	800573c <HAL_ADC_ConfigChannel+0xa4>
 8005966:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 800596a:	e78c      	b.n	8005886 <HAL_ADC_ConfigChannel+0x1ee>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800596c:	6820      	ldr	r0, [r4, #0]
 800596e:	07c0      	lsls	r0, r0, #31
 8005970:	d4f3      	bmi.n	800595a <HAL_ADC_ConfigChannel+0x2c2>
 8005972:	e792      	b.n	800589a <HAL_ADC_ConfigChannel+0x202>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005974:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005978:	d182      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800597a:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <HAL_ADC_ConfigChannel+0x36c>)
 800597c:	4c22      	ldr	r4, [pc, #136]	; (8005a08 <HAL_ADC_ConfigChannel+0x370>)
 800597e:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005980:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005982:	fba4 4202 	umull	r4, r2, r4, r2
 8005986:	0c92      	lsrs	r2, r2, #18
 8005988:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800598c:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800598e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005992:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005994:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8005996:	9a01      	ldr	r2, [sp, #4]
 8005998:	2a00      	cmp	r2, #0
 800599a:	f43f af71 	beq.w	8005880 <HAL_ADC_ConfigChannel+0x1e8>
            wait_loop_index--;
 800599e:	9a01      	ldr	r2, [sp, #4]
 80059a0:	3a01      	subs	r2, #1
 80059a2:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80059a4:	9a01      	ldr	r2, [sp, #4]
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	d1f9      	bne.n	800599e <HAL_ADC_ConfigChannel+0x306>
 80059aa:	e769      	b.n	8005880 <HAL_ADC_ConfigChannel+0x1e8>
 80059ac:	4c17      	ldr	r4, [pc, #92]	; (8005a0c <HAL_ADC_ConfigChannel+0x374>)
 80059ae:	e76a      	b.n	8005886 <HAL_ADC_ConfigChannel+0x1ee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80059b0:	6812      	ldr	r2, [r2, #0]
 80059b2:	07d7      	lsls	r7, r2, #31
 80059b4:	d4d1      	bmi.n	800595a <HAL_ADC_ConfigChannel+0x2c2>
 80059b6:	e705      	b.n	80057c4 <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80059b8:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80059ba:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80059be:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 80059c2:	ea4f 6685 	mov.w	r6, r5, lsl #26
 80059c6:	d023      	beq.n	8005a10 <HAL_ADC_ConfigChannel+0x378>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80059c8:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80059ca:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80059ce:	4286      	cmp	r6, r0
 80059d0:	d023      	beq.n	8005a1a <HAL_ADC_ConfigChannel+0x382>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80059d2:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80059d4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80059d8:	4286      	cmp	r6, r0
 80059da:	d023      	beq.n	8005a24 <HAL_ADC_ConfigChannel+0x38c>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80059dc:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80059de:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80059e2:	4286      	cmp	r6, r0
 80059e4:	f47f aeb8 	bne.w	8005758 <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80059e8:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80059ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80059ee:	66d0      	str	r0, [r2, #108]	; 0x6c
 80059f0:	e6b2      	b.n	8005758 <HAL_ADC_ConfigChannel+0xc0>
 80059f2:	bf00      	nop
 80059f4:	83fff000 	.word	0x83fff000
 80059f8:	50000100 	.word	0x50000100
 80059fc:	50000400 	.word	0x50000400
 8005a00:	50000300 	.word	0x50000300
 8005a04:	20000008 	.word	0x20000008
 8005a08:	431bde83 	.word	0x431bde83
 8005a0c:	50000500 	.word	0x50000500
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005a10:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8005a12:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005a16:	6610      	str	r0, [r2, #96]	; 0x60
 8005a18:	e7d6      	b.n	80059c8 <HAL_ADC_ConfigChannel+0x330>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005a1a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005a1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005a20:	6650      	str	r0, [r2, #100]	; 0x64
 8005a22:	e7d6      	b.n	80059d2 <HAL_ADC_ConfigChannel+0x33a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005a24:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8005a26:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005a2a:	6690      	str	r0, [r2, #104]	; 0x68
 8005a2c:	e7d6      	b.n	80059dc <HAL_ADC_ConfigChannel+0x344>
 8005a2e:	bf00      	nop

08005a30 <HAL_ADCEx_InjectedConfigChannel>:
{
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a34:	4602      	mov	r2, r0
 8005a36:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8005a38:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005a3c:	6900      	ldr	r0, [r0, #16]
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005a3e:	68cd      	ldr	r5, [r1, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005a40:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8005a42:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8005a44:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 8005a46:	f000 81ae 	beq.w	8005da6 <HAL_ADCEx_InjectedConfigChannel+0x376>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005a50:	b358      	cbz	r0, 8005aaa <HAL_ADCEx_InjectedConfigChannel+0x7a>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8005a52:	698f      	ldr	r7, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005a54:	429f      	cmp	r7, r3
 8005a56:	d028      	beq.n	8005aaa <HAL_ADCEx_InjectedConfigChannel+0x7a>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005a58:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8005a5a:	2800      	cmp	r0, #0
 8005a5c:	f040 812e 	bne.w	8005cbc <HAL_ADCEx_InjectedConfigChannel+0x28c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005a60:	6a0c      	ldr	r4, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005a62:	64d7      	str	r7, [r2, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005a64:	2c01      	cmp	r4, #1
 8005a66:	f000 81f0 	beq.w	8005e4a <HAL_ADCEx_InjectedConfigChannel+0x41a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	48ac      	ldr	r0, [pc, #688]	; (8005d20 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8005a6e:	4283      	cmp	r3, r0
 8005a70:	f107 37ff 	add.w	r7, r7, #4294967295
 8005a74:	f000 81e1 	beq.w	8005e3a <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8005a78:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8005a7c:	4283      	cmp	r3, r0
 8005a7e:	f000 81dc 	beq.w	8005e3a <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8005a82:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8005a84:	4338      	orrs	r0, r7
 8005a86:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005a88:	684c      	ldr	r4, [r1, #4]
 8005a8a:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8005a8c:	64d7      	str	r7, [r2, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005a8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005a92:	0064      	lsls	r4, r4, #1
 8005a94:	3402      	adds	r4, #2
 8005a96:	271f      	movs	r7, #31
 8005a98:	40a6      	lsls	r6, r4
 8005a9a:	fa07 f404 	lsl.w	r4, r7, r4
 8005a9e:	ea20 0004 	bic.w	r0, r0, r4
 8005aa2:	4330      	orrs	r0, r6
 8005aa4:	6490      	str	r0, [r2, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	e009      	b.n	8005abe <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005aaa:	684b      	ldr	r3, [r1, #4]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	f000 80e9 	beq.w	8005c84 <HAL_ADCEx_InjectedConfigChannel+0x254>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ab2:	6c10      	ldr	r0, [r2, #64]	; 0x40
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005ab4:	6813      	ldr	r3, [r2, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ab6:	f040 0020 	orr.w	r0, r0, #32
 8005aba:	6410      	str	r0, [r2, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8005abc:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005abe:	689c      	ldr	r4, [r3, #8]
 8005ac0:	0726      	lsls	r6, r4, #28
 8005ac2:	d40d      	bmi.n	8005ae0 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005ac4:	7f4c      	ldrb	r4, [r1, #29]
 8005ac6:	2c00      	cmp	r4, #0
 8005ac8:	f040 80c5 	bne.w	8005c56 <HAL_ADCEx_InjectedConfigChannel+0x226>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8005acc:	7f0c      	ldrb	r4, [r1, #28]
 8005ace:	68de      	ldr	r6, [r3, #12]
 8005ad0:	7f8f      	ldrb	r7, [r1, #30]
 8005ad2:	0524      	lsls	r4, r4, #20
 8005ad4:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
 8005ad8:	ea44 5447 	orr.w	r4, r4, r7, lsl #21
 8005adc:	4334      	orrs	r4, r6
 8005ade:	60dc      	str	r4, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005ae0:	689c      	ldr	r4, [r3, #8]
 8005ae2:	f014 0f0c 	tst.w	r4, #12
 8005ae6:	d13d      	bne.n	8005b64 <HAL_ADCEx_InjectedConfigChannel+0x134>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005ae8:	6a0c      	ldr	r4, [r1, #32]
 8005aea:	2c01      	cmp	r4, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8005aec:	68dc      	ldr	r4, [r3, #12]
 8005aee:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005af2:	f000 8153 	beq.w	8005d9c <HAL_ADCEx_InjectedConfigChannel+0x36c>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005af6:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005af8:	7f4c      	ldrb	r4, [r1, #29]
 8005afa:	2c01      	cmp	r4, #1
 8005afc:	f000 8130 	beq.w	8005d60 <HAL_ADCEx_InjectedConfigChannel+0x330>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005b00:	680e      	ldr	r6, [r1, #0]
 8005b02:	2e09      	cmp	r6, #9
 8005b04:	f240 8097 	bls.w	8005c36 <HAL_ADCEx_InjectedConfigChannel+0x206>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8005b08:	688f      	ldr	r7, [r1, #8]
 8005b0a:	699c      	ldr	r4, [r3, #24]
 8005b0c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8005b10:	f1ac 0c1e 	sub.w	ip, ip, #30
 8005b14:	fa07 fe0c 	lsl.w	lr, r7, ip
 8005b18:	2707      	movs	r7, #7
 8005b1a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8005b1e:	ea24 040c 	bic.w	r4, r4, ip
 8005b22:	ea44 040e 	orr.w	r4, r4, lr
 8005b26:	619c      	str	r4, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005b28:	68dc      	ldr	r4, [r3, #12]
 8005b2a:	f3c4 0cc1 	ubfx	ip, r4, #3, #2
    switch (sConfigInjected->InjectedOffsetNumber)
 8005b2e:	690c      	ldr	r4, [r1, #16]
 8005b30:	f104 3eff 	add.w	lr, r4, #4294967295
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005b34:	694c      	ldr	r4, [r1, #20]
 8005b36:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005b3a:	fa04 f40c 	lsl.w	r4, r4, ip
    switch (sConfigInjected->InjectedOffsetNumber)
 8005b3e:	f1be 0f03 	cmp.w	lr, #3
 8005b42:	f200 818e 	bhi.w	8005e62 <HAL_ADCEx_InjectedConfigChannel+0x432>
 8005b46:	e8df f01e 	tbh	[pc, lr, lsl #1]
 8005b4a:	0004      	.short	0x0004
 8005b4c:	00f70101 	.word	0x00f70101
 8005b50:	00e1      	.short	0x00e1
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8005b52:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8005b54:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005b58:	4e72      	ldr	r6, [pc, #456]	; (8005d24 <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
 8005b5a:	403e      	ands	r6, r7
 8005b5c:	4334      	orrs	r4, r6
 8005b5e:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005b62:	661c      	str	r4, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b64:	689c      	ldr	r4, [r3, #8]
 8005b66:	f004 0403 	and.w	r4, r4, #3
 8005b6a:	2c01      	cmp	r4, #1
 8005b6c:	d041      	beq.n	8005bf2 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b6e:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005b70:	680c      	ldr	r4, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005b72:	d044      	beq.n	8005bfe <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005b74:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005b78:	2501      	movs	r5, #1
 8005b7a:	40a5      	lsls	r5, r4
 8005b7c:	ea21 0105 	bic.w	r1, r1, r5
 8005b80:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b88:	d02c      	beq.n	8005be4 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
 8005b8a:	4967      	ldr	r1, [pc, #412]	; (8005d28 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	d029      	beq.n	8005be4 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b90:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b92:	4966      	ldr	r1, [pc, #408]	; (8005d2c <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b94:	d029      	beq.n	8005bea <HAL_ADCEx_InjectedConfigChannel+0x1ba>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005b96:	2c11      	cmp	r4, #17
 8005b98:	d16e      	bne.n	8005c78 <HAL_ADCEx_InjectedConfigChannel+0x248>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005b9a:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8005b9c:	01ee      	lsls	r6, r5, #7
 8005b9e:	d41b      	bmi.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ba4:	f000 8103 	beq.w	8005dae <HAL_ADCEx_InjectedConfigChannel+0x37e>
 8005ba8:	4d5f      	ldr	r5, [pc, #380]	; (8005d28 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8005baa:	42ab      	cmp	r3, r5
 8005bac:	f000 80de 	beq.w	8005d6c <HAL_ADCEx_InjectedConfigChannel+0x33c>
 8005bb0:	4e5b      	ldr	r6, [pc, #364]	; (8005d20 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8005bb2:	42b3      	cmp	r3, r6
 8005bb4:	f000 814d 	beq.w	8005e52 <HAL_ADCEx_InjectedConfigChannel+0x422>
 8005bb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bbc:	42ab      	cmp	r3, r5
 8005bbe:	f000 80d7 	beq.w	8005d70 <HAL_ADCEx_InjectedConfigChannel+0x340>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005bc2:	689d      	ldr	r5, [r3, #8]
 8005bc4:	f005 0503 	and.w	r5, r5, #3
 8005bc8:	2d01      	cmp	r5, #1
 8005bca:	f000 8130 	beq.w	8005e2e <HAL_ADCEx_InjectedConfigChannel+0x3fe>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005bce:	2c10      	cmp	r4, #16
 8005bd0:	d002      	beq.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005bd2:	2c11      	cmp	r4, #17
 8005bd4:	f040 80da 	bne.w	8005d8c <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __HAL_UNLOCK(hadc);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8005bde:	b002      	add	sp, #8
 8005be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005be4:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005be6:	4952      	ldr	r1, [pc, #328]	; (8005d30 <HAL_ADCEx_InjectedConfigChannel+0x300>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005be8:	d1d5      	bne.n	8005b96 <HAL_ADCEx_InjectedConfigChannel+0x166>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005bea:	688d      	ldr	r5, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005bec:	022f      	lsls	r7, r5, #8
 8005bee:	d5d7      	bpl.n	8005ba0 <HAL_ADCEx_InjectedConfigChannel+0x170>
 8005bf0:	e7f2      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005bf2:	681c      	ldr	r4, [r3, #0]
 8005bf4:	07e4      	lsls	r4, r4, #31
 8005bf6:	d4ef      	bmi.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005bf8:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005bfa:	680c      	ldr	r4, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005bfc:	d1ba      	bne.n	8005b74 <HAL_ADCEx_InjectedConfigChannel+0x144>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005bfe:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 8005c02:	40a5      	lsls	r5, r4
 8005c04:	4335      	orrs	r5, r6
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005c06:	2c09      	cmp	r4, #9
        MODIFY_REG(hadc->Instance->SMPR2,
 8005c08:	688e      	ldr	r6, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005c0a:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005c0e:	d870      	bhi.n	8005cf2 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005c10:	1c65      	adds	r5, r4, #1
 8005c12:	6959      	ldr	r1, [r3, #20]
 8005c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c18:	2707      	movs	r7, #7
 8005c1a:	40ae      	lsls	r6, r5
 8005c1c:	fa07 f505 	lsl.w	r5, r7, r5
 8005c20:	ea21 0105 	bic.w	r1, r1, r5
 8005c24:	4331      	orrs	r1, r6
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8005c2a:	6159      	str	r1, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c2c:	d0d4      	beq.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
 8005c2e:	493e      	ldr	r1, [pc, #248]	; (8005d28 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8005c30:	428b      	cmp	r3, r1
 8005c32:	d1ad      	bne.n	8005b90 <HAL_ADCEx_InjectedConfigChannel+0x160>
 8005c34:	e7d0      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8005c36:	695c      	ldr	r4, [r3, #20]
 8005c38:	688f      	ldr	r7, [r1, #8]
 8005c3a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8005c3e:	f04f 0e07 	mov.w	lr, #7
 8005c42:	fa0e fe08 	lsl.w	lr, lr, r8
 8005c46:	fa07 fc08 	lsl.w	ip, r7, r8
 8005c4a:	ea24 040e 	bic.w	r4, r4, lr
 8005c4e:	ea44 040c 	orr.w	r4, r4, ip
 8005c52:	615c      	str	r4, [r3, #20]
 8005c54:	e768      	b.n	8005b28 <HAL_ADCEx_InjectedConfigChannel+0xf8>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8005c56:	68dc      	ldr	r4, [r3, #12]
 8005c58:	7f8e      	ldrb	r6, [r1, #30]
 8005c5a:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005c5e:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8005c62:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8005c64:	7f0c      	ldrb	r4, [r1, #28]
 8005c66:	2c01      	cmp	r4, #1
 8005c68:	f47f af3a 	bne.w	8005ae0 <HAL_ADCEx_InjectedConfigChannel+0xb0>
        tmp_hal_status = HAL_ERROR;
 8005c6c:	4620      	mov	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c6e:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8005c70:	f044 0420 	orr.w	r4, r4, #32
 8005c74:	6414      	str	r4, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005c76:	e733      	b.n	8005ae0 <HAL_ADCEx_InjectedConfigChannel+0xb0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005c78:	2c12      	cmp	r4, #18
 8005c7a:	d1ad      	bne.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005c7c:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8005c7e:	026d      	lsls	r5, r5, #9
 8005c80:	d4aa      	bmi.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
 8005c82:	e78d      	b.n	8005ba0 <HAL_ADCEx_InjectedConfigChannel+0x170>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005c84:	6a0c      	ldr	r4, [r1, #32]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8005c86:	6808      	ldr	r0, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005c88:	2c01      	cmp	r4, #1
 8005c8a:	f000 809b 	beq.w	8005dc4 <HAL_ADCEx_InjectedConfigChannel+0x394>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8005c8e:	6813      	ldr	r3, [r2, #0]
 8005c90:	4e23      	ldr	r6, [pc, #140]	; (8005d20 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8005c92:	42b3      	cmp	r3, r6
 8005c94:	ea4f 2000 	mov.w	r0, r0, lsl #8
 8005c98:	f000 8097 	beq.w	8005dca <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8005c9c:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8005ca0:	42b3      	cmp	r3, r6
 8005ca2:	f000 8092 	beq.w	8005dca <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8005ca6:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005ca8:	4330      	orrs	r0, r6
 8005caa:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->Instance->JSQR           ,
 8005cac:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005cae:	4e21      	ldr	r6, [pc, #132]	; (8005d34 <HAL_ADCEx_InjectedConfigChannel+0x304>)
 8005cb0:	4034      	ands	r4, r6
 8005cb2:	4304      	orrs	r4, r0
 8005cb4:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005cb6:	6490      	str	r0, [r2, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cb8:	2000      	movs	r0, #0
 8005cba:	e700      	b.n	8005abe <HAL_ADCEx_InjectedConfigChannel+0x8e>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005cbc:	684b      	ldr	r3, [r1, #4]
 8005cbe:	680f      	ldr	r7, [r1, #0]
 8005cc0:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8005cc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	3302      	adds	r3, #2
 8005cca:	f04f 0c1f 	mov.w	ip, #31
 8005cce:	409f      	lsls	r7, r3
 8005cd0:	fa0c f303 	lsl.w	r3, ip, r3
 8005cd4:	ea26 0603 	bic.w	r6, r6, r3
      hadc->InjectionConfig.ChannelCount --;
 8005cd8:	3801      	subs	r0, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005cda:	433e      	orrs	r6, r7
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005cdc:	6813      	ldr	r3, [r2, #0]
      hadc->InjectionConfig.ChannelCount --;
 8005cde:	64d0      	str	r0, [r2, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005ce0:	6496      	str	r6, [r2, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d1e8      	bne.n	8005cb8 <HAL_ADCEx_InjectedConfigChannel+0x288>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8005ce6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005ce8:	4f12      	ldr	r7, [pc, #72]	; (8005d34 <HAL_ADCEx_InjectedConfigChannel+0x304>)
 8005cea:	403c      	ands	r4, r7
 8005cec:	4334      	orrs	r4, r6
 8005cee:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005cf0:	e6e5      	b.n	8005abe <HAL_ADCEx_InjectedConfigChannel+0x8e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005cf2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005cf6:	6999      	ldr	r1, [r3, #24]
 8005cf8:	3d1b      	subs	r5, #27
 8005cfa:	2707      	movs	r7, #7
 8005cfc:	40ae      	lsls	r6, r5
 8005cfe:	fa07 f505 	lsl.w	r5, r7, r5
 8005d02:	ea21 0105 	bic.w	r1, r1, r5
 8005d06:	4331      	orrs	r1, r6
 8005d08:	6199      	str	r1, [r3, #24]
 8005d0a:	e73b      	b.n	8005b84 <HAL_ADCEx_InjectedConfigChannel+0x154>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8005d0c:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 8005d0e:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005d12:	4e04      	ldr	r6, [pc, #16]	; (8005d24 <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
 8005d14:	403e      	ands	r6, r7
 8005d16:	4334      	orrs	r4, r6
 8005d18:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005d1c:	66dc      	str	r4, [r3, #108]	; 0x6c
      break;
 8005d1e:	e721      	b.n	8005b64 <HAL_ADCEx_InjectedConfigChannel+0x134>
 8005d20:	50000400 	.word	0x50000400
 8005d24:	83fff000 	.word	0x83fff000
 8005d28:	50000100 	.word	0x50000100
 8005d2c:	50000700 	.word	0x50000700
 8005d30:	50000300 	.word	0x50000300
 8005d34:	82082000 	.word	0x82082000
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8005d38:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8005d3a:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005d3e:	4e5f      	ldr	r6, [pc, #380]	; (8005ebc <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8005d40:	403e      	ands	r6, r7
 8005d42:	4334      	orrs	r4, r6
 8005d44:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005d48:	669c      	str	r4, [r3, #104]	; 0x68
      break;
 8005d4a:	e70b      	b.n	8005b64 <HAL_ADCEx_InjectedConfigChannel+0x134>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8005d4c:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8005d4e:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005d52:	4e5a      	ldr	r6, [pc, #360]	; (8005ebc <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8005d54:	403e      	ands	r6, r7
 8005d56:	4334      	orrs	r4, r6
 8005d58:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005d5c:	665c      	str	r4, [r3, #100]	; 0x64
      break;
 8005d5e:	e701      	b.n	8005b64 <HAL_ADCEx_InjectedConfigChannel+0x134>
        tmp_hal_status = HAL_ERROR;
 8005d60:	4620      	mov	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d62:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8005d64:	f044 0420 	orr.w	r4, r4, #32
 8005d68:	6414      	str	r4, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005d6a:	e6c9      	b.n	8005b00 <HAL_ADCEx_InjectedConfigChannel+0xd0>
 8005d6c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005d70:	689d      	ldr	r5, [r3, #8]
 8005d72:	f005 0503 	and.w	r5, r5, #3
 8005d76:	2d01      	cmp	r5, #1
 8005d78:	d01b      	beq.n	8005db2 <HAL_ADCEx_InjectedConfigChannel+0x382>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005d7a:	68b5      	ldr	r5, [r6, #8]
 8005d7c:	f005 0503 	and.w	r5, r5, #3
 8005d80:	2d01      	cmp	r5, #1
 8005d82:	d02a      	beq.n	8005dda <HAL_ADCEx_InjectedConfigChannel+0x3aa>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005d84:	2c10      	cmp	r4, #16
 8005d86:	d02c      	beq.n	8005de2 <HAL_ADCEx_InjectedConfigChannel+0x3b2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005d88:	2c11      	cmp	r4, #17
 8005d8a:	d047      	beq.n	8005e1c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005d8c:	2c12      	cmp	r4, #18
 8005d8e:	f47f af23 	bne.w	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005d92:	688b      	ldr	r3, [r1, #8]
 8005d94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d98:	608b      	str	r3, [r1, #8]
 8005d9a:	e71d      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8005d9c:	7f4e      	ldrb	r6, [r1, #29]
 8005d9e:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8005da2:	60dc      	str	r4, [r3, #12]
 8005da4:	e6ac      	b.n	8005b00 <HAL_ADCEx_InjectedConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8005da6:	2002      	movs	r0, #2
}
 8005da8:	b002      	add	sp, #8
 8005daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dae:	4e44      	ldr	r6, [pc, #272]	; (8005ec0 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8005db0:	e7de      	b.n	8005d70 <HAL_ADCEx_InjectedConfigChannel+0x340>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005db2:	681d      	ldr	r5, [r3, #0]
 8005db4:	07ef      	lsls	r7, r5, #31
 8005db6:	d5e0      	bpl.n	8005d7a <HAL_ADCEx_InjectedConfigChannel+0x34a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005db8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005dba:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8005dbe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dc0:	6413      	str	r3, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005dc2:	e709      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005dc4:	6813      	ldr	r3, [r2, #0]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8005dc6:	0200      	lsls	r0, r0, #8
 8005dc8:	e770      	b.n	8005cac <HAL_ADCEx_InjectedConfigChannel+0x27c>
 8005dca:	2c14      	cmp	r4, #20
 8005dcc:	d043      	beq.n	8005e56 <HAL_ADCEx_InjectedConfigChannel+0x426>
 8005dce:	2c1c      	cmp	r4, #28
 8005dd0:	d031      	beq.n	8005e36 <HAL_ADCEx_InjectedConfigChannel+0x406>
{
 8005dd2:	2c08      	cmp	r4, #8
 8005dd4:	bf08      	it	eq
 8005dd6:	2434      	moveq	r4, #52	; 0x34
 8005dd8:	e765      	b.n	8005ca6 <HAL_ADCEx_InjectedConfigChannel+0x276>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005dda:	6835      	ldr	r5, [r6, #0]
 8005ddc:	07ed      	lsls	r5, r5, #31
 8005dde:	d4eb      	bmi.n	8005db8 <HAL_ADCEx_InjectedConfigChannel+0x388>
 8005de0:	e7d0      	b.n	8005d84 <HAL_ADCEx_InjectedConfigChannel+0x354>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005de6:	f47f aef7 	bne.w	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005dea:	4b36      	ldr	r3, [pc, #216]	; (8005ec4 <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8005dec:	4d36      	ldr	r5, [pc, #216]	; (8005ec8 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 8005dee:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005df0:	688c      	ldr	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005df2:	fba5 5303 	umull	r5, r3, r5, r3
 8005df6:	0c9b      	lsrs	r3, r3, #18
 8005df8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005dfc:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005dfe:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8005e02:	608c      	str	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005e04:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005e06:	9b01      	ldr	r3, [sp, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f43f aee5 	beq.w	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
            wait_loop_index--;
 8005e0e:	9b01      	ldr	r3, [sp, #4]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005e14:	9b01      	ldr	r3, [sp, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f9      	bne.n	8005e0e <HAL_ADCEx_InjectedConfigChannel+0x3de>
 8005e1a:	e6dd      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e20:	f47f aeda 	bne.w	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005e24:	688b      	ldr	r3, [r1, #8]
 8005e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e2a:	608b      	str	r3, [r1, #8]
 8005e2c:	e6d4      	b.n	8005bd8 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	07db      	lsls	r3, r3, #31
 8005e32:	d4c1      	bmi.n	8005db8 <HAL_ADCEx_InjectedConfigChannel+0x388>
 8005e34:	e6cb      	b.n	8005bce <HAL_ADCEx_InjectedConfigChannel+0x19e>
{
 8005e36:	2410      	movs	r4, #16
 8005e38:	e735      	b.n	8005ca6 <HAL_ADCEx_InjectedConfigChannel+0x276>
 8005e3a:	2c14      	cmp	r4, #20
 8005e3c:	d00f      	beq.n	8005e5e <HAL_ADCEx_InjectedConfigChannel+0x42e>
 8005e3e:	2c1c      	cmp	r4, #28
 8005e40:	d00b      	beq.n	8005e5a <HAL_ADCEx_InjectedConfigChannel+0x42a>
 8005e42:	2c08      	cmp	r4, #8
 8005e44:	bf08      	it	eq
 8005e46:	2434      	moveq	r4, #52	; 0x34
 8005e48:	e61b      	b.n	8005a82 <HAL_ADCEx_InjectedConfigChannel+0x52>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8005e4a:	1e78      	subs	r0, r7, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005e4c:	6813      	ldr	r3, [r2, #0]
 8005e4e:	4607      	mov	r7, r0
 8005e50:	e61a      	b.n	8005a88 <HAL_ADCEx_InjectedConfigChannel+0x58>
 8005e52:	4e1e      	ldr	r6, [pc, #120]	; (8005ecc <HAL_ADCEx_InjectedConfigChannel+0x49c>)
 8005e54:	e78c      	b.n	8005d70 <HAL_ADCEx_InjectedConfigChannel+0x340>
{
 8005e56:	241c      	movs	r4, #28
 8005e58:	e725      	b.n	8005ca6 <HAL_ADCEx_InjectedConfigChannel+0x276>
 8005e5a:	2410      	movs	r4, #16
 8005e5c:	e611      	b.n	8005a82 <HAL_ADCEx_InjectedConfigChannel+0x52>
 8005e5e:	241c      	movs	r4, #28
 8005e60:	e60f      	b.n	8005a82 <HAL_ADCEx_InjectedConfigChannel+0x52>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005e62:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8005e64:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005e68:	ebb4 6f86 	cmp.w	r4, r6, lsl #26
 8005e6c:	ea4f 6786 	mov.w	r7, r6, lsl #26
 8005e70:	d014      	beq.n	8005e9c <HAL_ADCEx_InjectedConfigChannel+0x46c>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005e72:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8005e74:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005e78:	42a7      	cmp	r7, r4
 8005e7a:	d014      	beq.n	8005ea6 <HAL_ADCEx_InjectedConfigChannel+0x476>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005e7c:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8005e7e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005e82:	42a7      	cmp	r7, r4
 8005e84:	d014      	beq.n	8005eb0 <HAL_ADCEx_InjectedConfigChannel+0x480>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005e86:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8005e88:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005e8c:	42a7      	cmp	r7, r4
 8005e8e:	f47f ae69 	bne.w	8005b64 <HAL_ADCEx_InjectedConfigChannel+0x134>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005e92:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8005e94:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005e98:	66dc      	str	r4, [r3, #108]	; 0x6c
 8005e9a:	e663      	b.n	8005b64 <HAL_ADCEx_InjectedConfigChannel+0x134>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005e9c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8005e9e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005ea2:	661c      	str	r4, [r3, #96]	; 0x60
 8005ea4:	e7e5      	b.n	8005e72 <HAL_ADCEx_InjectedConfigChannel+0x442>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005ea6:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8005ea8:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005eac:	665c      	str	r4, [r3, #100]	; 0x64
 8005eae:	e7e5      	b.n	8005e7c <HAL_ADCEx_InjectedConfigChannel+0x44c>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005eb0:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8005eb2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005eb6:	669c      	str	r4, [r3, #104]	; 0x68
 8005eb8:	e7e5      	b.n	8005e86 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8005eba:	bf00      	nop
 8005ebc:	83fff000 	.word	0x83fff000
 8005ec0:	50000100 	.word	0x50000100
 8005ec4:	20000008 	.word	0x20000008
 8005ec8:	431bde83 	.word	0x431bde83
 8005ecc:	50000500 	.word	0x50000500

08005ed0 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005ed0:	6802      	ldr	r2, [r0, #0]
 8005ed2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 8005ed6:	b4f0      	push	{r4, r5, r6, r7}
 8005ed8:	4603      	mov	r3, r0
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005eda:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005edc:	4841      	ldr	r0, [pc, #260]	; (8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8005ede:	d00d      	beq.n	8005efc <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8005ee0:	4282      	cmp	r2, r0
 8005ee2:	d009      	beq.n	8005ef8 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8005ee4:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8005ee8:	4282      	cmp	r2, r0
 8005eea:	d049      	beq.n	8005f80 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8005eec:	4c3e      	ldr	r4, [pc, #248]	; (8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8005eee:	42a2      	cmp	r2, r4
 8005ef0:	d004      	beq.n	8005efc <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8005ef2:	2001      	movs	r0, #1
} 
 8005ef4:	bcf0      	pop	{r4, r5, r6, r7}
 8005ef6:	4770      	bx	lr
 8005ef8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8005efc:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
 8005f00:	f1bc 0f01 	cmp.w	ip, #1
 8005f04:	d042      	beq.n	8005f8c <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8005f06:	2401      	movs	r4, #1
 8005f08:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005f0c:	6894      	ldr	r4, [r2, #8]
 8005f0e:	0764      	lsls	r4, r4, #29
 8005f10:	d509      	bpl.n	8005f26 <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f14:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8005f18:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8005f22:	bcf0      	pop	{r4, r5, r6, r7}
 8005f24:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005f26:	6884      	ldr	r4, [r0, #8]
 8005f28:	0767      	lsls	r7, r4, #29
 8005f2a:	d4f2      	bmi.n	8005f12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f2c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005f30:	d045      	beq.n	8005fbe <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005f32:	4f2c      	ldr	r7, [pc, #176]	; (8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8005f34:	4c2d      	ldr	r4, [pc, #180]	; (8005fec <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8005f36:	4e2e      	ldr	r6, [pc, #184]	; (8005ff0 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8005f38:	42ba      	cmp	r2, r7
 8005f3a:	bf18      	it	ne
 8005f3c:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f3e:	b345      	cbz	r5, 8005f92 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005f40:	68a6      	ldr	r6, [r4, #8]
 8005f42:	684f      	ldr	r7, [r1, #4]
 8005f44:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 8005f48:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 8005f4c:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8005f50:	ea46 060c 	orr.w	r6, r6, ip
 8005f54:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005f56:	6896      	ldr	r6, [r2, #8]
 8005f58:	f006 0603 	and.w	r6, r6, #3
 8005f5c:	2e01      	cmp	r6, #1
 8005f5e:	d03c      	beq.n	8005fda <HAL_ADCEx_MultiModeConfigChannel+0x10a>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005f60:	6882      	ldr	r2, [r0, #8]
 8005f62:	f002 0203 	and.w	r2, r2, #3
 8005f66:	2a01      	cmp	r2, #1
 8005f68:	d02f      	beq.n	8005fca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005f6a:	68a0      	ldr	r0, [r4, #8]
 8005f6c:	688a      	ldr	r2, [r1, #8]
 8005f6e:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8005f72:	432a      	orrs	r2, r5
 8005f74:	f021 010f 	bic.w	r1, r1, #15
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	e7cd      	b.n	8005f1c <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 8005f80:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
 8005f84:	4818      	ldr	r0, [pc, #96]	; (8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8005f86:	f1bc 0f01 	cmp.w	ip, #1
 8005f8a:	d1bc      	bne.n	8005f06 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005f8c:	2002      	movs	r0, #2
} 
 8005f8e:	bcf0      	pop	{r4, r5, r6, r7}
 8005f90:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f92:	68a1      	ldr	r1, [r4, #8]
 8005f94:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005f98:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005f9a:	6891      	ldr	r1, [r2, #8]
 8005f9c:	f001 0103 	and.w	r1, r1, #3
 8005fa0:	2901      	cmp	r1, #1
 8005fa2:	d016      	beq.n	8005fd2 <HAL_ADCEx_MultiModeConfigChannel+0x102>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005fa4:	6882      	ldr	r2, [r0, #8]
 8005fa6:	f002 0203 	and.w	r2, r2, #3
 8005faa:	2a01      	cmp	r2, #1
 8005fac:	d009      	beq.n	8005fc2 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005fae:	68a2      	ldr	r2, [r4, #8]
 8005fb0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005fb4:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fb8:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005fba:	60a2      	str	r2, [r4, #8]
 8005fbc:	e7ae      	b.n	8005f1c <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fbe:	4c0b      	ldr	r4, [pc, #44]	; (8005fec <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8005fc0:	e7bd      	b.n	8005f3e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005fc2:	6802      	ldr	r2, [r0, #0]
 8005fc4:	07d2      	lsls	r2, r2, #31
 8005fc6:	d4d9      	bmi.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005fc8:	e7f1      	b.n	8005fae <HAL_ADCEx_MultiModeConfigChannel+0xde>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005fca:	6802      	ldr	r2, [r0, #0]
 8005fcc:	07d0      	lsls	r0, r2, #31
 8005fce:	d4d5      	bmi.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005fd0:	e7cb      	b.n	8005f6a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	07d1      	lsls	r1, r2, #31
 8005fd6:	d4d1      	bmi.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005fd8:	e7e4      	b.n	8005fa4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	07d6      	lsls	r6, r2, #31
 8005fde:	d5bf      	bpl.n	8005f60 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8005fe0:	e7cc      	b.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005fe2:	bf00      	nop
 8005fe4:	50000100 	.word	0x50000100
 8005fe8:	50000500 	.word	0x50000500
 8005fec:	50000300 	.word	0x50000300
 8005ff0:	50000700 	.word	0x50000700

08005ff4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d07b      	beq.n	80060f0 <HAL_CAN_Init+0xfc>
{
 8005ff8:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005ffa:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005ffe:	4604      	mov	r4, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d072      	beq.n	80060ea <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	6813      	ldr	r3, [r2, #0]
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800600e:	f7fe fff5 	bl	8004ffc <HAL_GetTick>
 8006012:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006014:	e004      	b.n	8006020 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006016:	f7fe fff1 	bl	8004ffc <HAL_GetTick>
 800601a:	1b43      	subs	r3, r0, r5
 800601c:	2b0a      	cmp	r3, #10
 800601e:	d85b      	bhi.n	80060d8 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	07d1      	lsls	r1, r2, #31
 8006026:	d5f6      	bpl.n	8006016 <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	f022 0202 	bic.w	r2, r2, #2
 800602e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006030:	f7fe ffe4 	bl	8004ffc <HAL_GetTick>
 8006034:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006036:	e004      	b.n	8006042 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006038:	f7fe ffe0 	bl	8004ffc <HAL_GetTick>
 800603c:	1b40      	subs	r0, r0, r5
 800603e:	280a      	cmp	r0, #10
 8006040:	d84a      	bhi.n	80060d8 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	0792      	lsls	r2, r2, #30
 8006048:	d4f6      	bmi.n	8006038 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800604a:	7e22      	ldrb	r2, [r4, #24]
 800604c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	bf0c      	ite	eq
 8006052:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006056:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800605a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800605c:	7e62      	ldrb	r2, [r4, #25]
 800605e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	bf0c      	ite	eq
 8006064:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006068:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800606c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800606e:	7ea2      	ldrb	r2, [r4, #26]
 8006070:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	bf0c      	ite	eq
 8006076:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800607a:	f022 0220 	bicne.w	r2, r2, #32
 800607e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006080:	7ee2      	ldrb	r2, [r4, #27]
 8006082:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	bf0c      	ite	eq
 8006088:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800608c:	f042 0210 	orrne.w	r2, r2, #16
 8006090:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006092:	7f22      	ldrb	r2, [r4, #28]
 8006094:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	bf0c      	ite	eq
 800609a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800609e:	f022 0208 	bicne.w	r2, r2, #8
 80060a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80060a4:	7f62      	ldrb	r2, [r4, #29]
 80060a6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	bf0c      	ite	eq
 80060ac:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80060b0:	f022 0204 	bicne.w	r2, r2, #4
 80060b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80060b6:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 80060ba:	6921      	ldr	r1, [r4, #16]
 80060bc:	4302      	orrs	r2, r0
 80060be:	430a      	orrs	r2, r1
 80060c0:	6960      	ldr	r0, [r4, #20]
 80060c2:	6861      	ldr	r1, [r4, #4]
 80060c4:	4302      	orrs	r2, r0
 80060c6:	3901      	subs	r1, #1
 80060c8:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80060ca:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80060cc:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80060ce:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80060d0:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80060d2:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 80060d6:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80060d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80060da:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80060dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e0:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80060e2:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 80060e6:	2001      	movs	r0, #1
}
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80060ea:	f7fb f90d 	bl	8001308 <HAL_CAN_MspInit>
 80060ee:	e789      	b.n	8006004 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 80060f0:	2001      	movs	r0, #1
}
 80060f2:	4770      	bx	lr

080060f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80060f4:	b470      	push	{r4, r5, r6}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80060f6:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 80060fa:	6804      	ldr	r4, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80060fc:	3a01      	subs	r2, #1
 80060fe:	2a01      	cmp	r2, #1
 8006100:	d907      	bls.n	8006112 <HAL_CAN_ConfigFilter+0x1e>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006102:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006104:	4603      	mov	r3, r0
 8006106:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 800610a:	2001      	movs	r0, #1
  }
}
 800610c:	bc70      	pop	{r4, r5, r6}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006110:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006112:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006116:	694a      	ldr	r2, [r1, #20]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006118:	69cd      	ldr	r5, [r1, #28]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006122:	f002 001f 	and.w	r0, r2, #31
 8006126:	2301      	movs	r3, #1
 8006128:	4083      	lsls	r3, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800612a:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 800612e:	ea20 0003 	bic.w	r0, r0, r3
 8006132:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
 8006136:	43d8      	mvns	r0, r3
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006138:	2d00      	cmp	r5, #0
 800613a:	d13d      	bne.n	80061b8 <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800613c:	f8d4 520c 	ldr.w	r5, [r4, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006140:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006142:	4005      	ands	r5, r0
 8006144:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006148:	888d      	ldrh	r5, [r1, #4]
 800614a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800614e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006152:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006156:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006158:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800615a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800615e:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006162:	698a      	ldr	r2, [r1, #24]
 8006164:	bb12      	cbnz	r2, 80061ac <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006166:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 800616a:	4002      	ands	r2, r0
 800616c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006170:	690a      	ldr	r2, [r1, #16]
 8006172:	b9aa      	cbnz	r2, 80061a0 <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006174:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8006178:	4010      	ands	r0, r2
 800617a:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800617e:	6a0a      	ldr	r2, [r1, #32]
 8006180:	2a01      	cmp	r2, #1
 8006182:	d104      	bne.n	800618e <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006184:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8006188:	4313      	orrs	r3, r2
 800618a:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800618e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8006192:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 8006196:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006198:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
}
 800619c:	bc70      	pop	{r4, r5, r6}
 800619e:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80061a0:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 80061a4:	431a      	orrs	r2, r3
 80061a6:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
 80061aa:	e7e8      	b.n	800617e <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80061ac:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 80061b0:	431a      	orrs	r2, r3
 80061b2:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
 80061b6:	e7db      	b.n	8006170 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80061b8:	2d01      	cmp	r5, #1
 80061ba:	d1d2      	bne.n	8006162 <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80061bc:	f8d4 520c 	ldr.w	r5, [r4, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80061c0:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80061c2:	431d      	orrs	r5, r3
 80061c4:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80061c8:	888d      	ldrh	r5, [r1, #4]
 80061ca:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80061ce:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80061d2:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80061d6:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80061d8:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80061da:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80061de:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
 80061e2:	e7be      	b.n	8006162 <HAL_CAN_ConfigFilter+0x6e>

080061e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80061e4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80061e6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80061ea:	2b01      	cmp	r3, #1
{
 80061ec:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80061ee:	d006      	beq.n	80061fe <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80061f0:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80061f2:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80061f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061f8:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 80061fa:	4630      	mov	r0, r6
 80061fc:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80061fe:	6802      	ldr	r2, [r0, #0]
 8006200:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006202:	2302      	movs	r3, #2
 8006204:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006208:	6813      	ldr	r3, [r2, #0]
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006210:	f7fe fef4 	bl	8004ffc <HAL_GetTick>
 8006214:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006216:	e004      	b.n	8006222 <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006218:	f7fe fef0 	bl	8004ffc <HAL_GetTick>
 800621c:	1b43      	subs	r3, r0, r5
 800621e:	2b0a      	cmp	r3, #10
 8006220:	d808      	bhi.n	8006234 <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f013 0301 	ands.w	r3, r3, #1
 800622a:	d1f5      	bne.n	8006218 <HAL_CAN_Start+0x34>
    return HAL_OK;
 800622c:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800622e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006230:	4630      	mov	r0, r6
 8006232:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006234:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8006236:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800623e:	f884 2020 	strb.w	r2, [r4, #32]
}
 8006242:	4630      	mov	r0, r6
 8006244:	bd70      	pop	{r4, r5, r6, pc}
 8006246:	bf00      	nop

08006248 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006248:	b430      	push	{r4, r5}
 800624a:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800624c:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006250:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006254:	3801      	subs	r0, #1
 8006256:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006258:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800625a:	d83b      	bhi.n	80062d4 <HAL_CAN_AddTxMessage+0x8c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800625c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8006260:	d108      	bne.n	8006274 <HAL_CAN_AddTxMessage+0x2c>
      return HAL_OK;
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006262:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8006266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

      return HAL_ERROR;
 800626a:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800626c:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800626e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8006272:	4770      	bx	lr
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006274:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006278:	2001      	movs	r0, #1
 800627a:	40a0      	lsls	r0, r4
 800627c:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800627e:	688b      	ldr	r3, [r1, #8]
 8006280:	b38b      	cbz	r3, 80062e6 <HAL_CAN_AddTxMessage+0x9e>
                                                           pHeader->IDE |
 8006282:	68c8      	ldr	r0, [r1, #12]
 8006284:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006286:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 8006288:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800628c:	f104 0018 	add.w	r0, r4, #24
 8006290:	0100      	lsls	r0, r0, #4
 8006292:	502b      	str	r3, [r5, r0]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006294:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 8006298:	690b      	ldr	r3, [r1, #16]
 800629a:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800629e:	7d0b      	ldrb	r3, [r1, #20]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	ea4f 1104 	mov.w	r1, r4, lsl #4
 80062a6:	d105      	bne.n	80062b4 <HAL_CAN_AddTxMessage+0x6c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80062a8:	f8dc 3184 	ldr.w	r3, [ip, #388]	; 0x184
 80062ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b0:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80062b4:	186b      	adds	r3, r5, r1
 80062b6:	6851      	ldr	r1, [r2, #4]
 80062b8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80062c2:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 80062c6:	f043 0301 	orr.w	r3, r3, #1
      return HAL_OK;
 80062ca:	2000      	movs	r0, #0
}
 80062cc:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80062ce:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 80062d2:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80062d4:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80062d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 80062dc:	2001      	movs	r0, #1
}
 80062de:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80062e0:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80062e4:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80062e6:	68cb      	ldr	r3, [r1, #12]
 80062e8:	6808      	ldr	r0, [r1, #0]
 80062ea:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 80062ee:	f104 0318 	add.w	r3, r4, #24
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	50e8      	str	r0, [r5, r3]
 80062f6:	e7cd      	b.n	8006294 <HAL_CAN_AddTxMessage+0x4c>

080062f8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80062f8:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80062fa:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80062fe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006302:	f1be 0f01 	cmp.w	lr, #1
{
 8006306:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8006308:	d873      	bhi.n	80063f2 <HAL_CAN_GetRxMessage+0xfa>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800630a:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800630c:	b951      	cbnz	r1, 8006324 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800630e:	68c4      	ldr	r4, [r0, #12]
 8006310:	07a4      	lsls	r4, r4, #30
 8006312:	d10a      	bne.n	800632a <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006314:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8006318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 800631c:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800631e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8006322:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006324:	6904      	ldr	r4, [r0, #16]
 8006326:	07a6      	lsls	r6, r4, #30
 8006328:	d0f4      	beq.n	8006314 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800632a:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 800632e:	010c      	lsls	r4, r1, #4
 8006330:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8006334:	f005 0504 	and.w	r5, r5, #4
 8006338:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800633a:	2d00      	cmp	r5, #0
 800633c:	d060      	beq.n	8006400 <HAL_CAN_GetRxMessage+0x108>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800633e:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8006342:	08ed      	lsrs	r5, r5, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006344:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006346:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800634a:	f005 0502 	and.w	r5, r5, #2
 800634e:	60d5      	str	r5, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006350:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
 8006354:	072d      	lsls	r5, r5, #28
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006356:	bf58      	it	pl
 8006358:	f8de 51b4 	ldrpl.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800635c:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006360:	bf54      	ite	pl
 8006362:	f005 050f 	andpl.w	r5, r5, #15
      pHeader->DLC = 8U;
 8006366:	2508      	movmi	r5, #8
 8006368:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800636a:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800636c:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006370:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8006374:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006376:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006378:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800637c:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800637e:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006380:	f8dc 2000 	ldr.w	r2, [ip]
 8006384:	4422      	add	r2, r4
 8006386:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800638a:	0a12      	lsrs	r2, r2, #8
 800638c:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800638e:	f8dc 2000 	ldr.w	r2, [ip]
 8006392:	4422      	add	r2, r4
 8006394:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8006398:	0c12      	lsrs	r2, r2, #16
 800639a:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800639c:	f8dc 2000 	ldr.w	r2, [ip]
 80063a0:	4422      	add	r2, r4
 80063a2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80063a6:	0e12      	lsrs	r2, r2, #24
 80063a8:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80063aa:	f8dc 2000 	ldr.w	r2, [ip]
 80063ae:	4422      	add	r2, r4
 80063b0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80063b4:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80063b6:	f8dc 2000 	ldr.w	r2, [ip]
 80063ba:	4422      	add	r2, r4
 80063bc:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80063c0:	0a12      	lsrs	r2, r2, #8
 80063c2:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80063c4:	f8dc 2000 	ldr.w	r2, [ip]
 80063c8:	4422      	add	r2, r4
 80063ca:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80063ce:	0c12      	lsrs	r2, r2, #16
 80063d0:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80063d2:	f8dc 2000 	ldr.w	r2, [ip]
 80063d6:	4422      	add	r2, r4
 80063d8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80063dc:	0e12      	lsrs	r2, r2, #24
 80063de:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80063e0:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80063e4:	b989      	cbnz	r1, 800640a <HAL_CAN_GetRxMessage+0x112>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80063e6:	68d3      	ldr	r3, [r2, #12]
 80063e8:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80063ec:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80063ee:	60d3      	str	r3, [r2, #12]
}
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80063f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80063f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 80063f8:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80063fa:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006400:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8006404:	0d6d      	lsrs	r5, r5, #21
 8006406:	6015      	str	r5, [r2, #0]
 8006408:	e79d      	b.n	8006346 <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800640a:	6913      	ldr	r3, [r2, #16]
 800640c:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8006410:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006412:	6113      	str	r3, [r2, #16]
}
 8006414:	bd70      	pop	{r4, r5, r6, pc}
 8006416:	bf00      	nop

08006418 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8006418:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800641c:	3a01      	subs	r2, #1
 800641e:	2a01      	cmp	r2, #1
{
 8006420:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8006422:	d905      	bls.n	8006430 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006424:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8006426:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 800642a:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800642c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800642e:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006430:	6802      	ldr	r2, [r0, #0]
 8006432:	6953      	ldr	r3, [r2, #20]
 8006434:	430b      	orrs	r3, r1
    return HAL_OK;
 8006436:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006438:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800643a:	4770      	bx	lr

0800643c <HAL_CAN_TxMailbox0CompleteCallback>:
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop

08006440 <HAL_CAN_TxMailbox1CompleteCallback>:
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop

08006444 <HAL_CAN_TxMailbox2CompleteCallback>:
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop

08006448 <HAL_CAN_TxMailbox0AbortCallback>:
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop

0800644c <HAL_CAN_TxMailbox1AbortCallback>:
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop

08006450 <HAL_CAN_TxMailbox2AbortCallback>:
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <HAL_CAN_RxFifo0FullCallback>:
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop

08006458 <HAL_CAN_RxFifo1FullCallback>:
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop

0800645c <HAL_CAN_SleepCallback>:
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop

08006460 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop

08006464 <HAL_CAN_ErrorCallback>:
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop

08006468 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800646c:	6803      	ldr	r3, [r0, #0]
 800646e:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006470:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006474:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006476:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800647a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800647e:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006482:	f014 0601 	ands.w	r6, r4, #1
{
 8006486:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006488:	d025      	beq.n	80064d6 <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800648a:	f017 0601 	ands.w	r6, r7, #1
 800648e:	f040 808f 	bne.w	80065b0 <HAL_CAN_IRQHandler+0x148>
 8006492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006496:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800649a:	05f8      	lsls	r0, r7, #23
 800649c:	d50d      	bpl.n	80064ba <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80064a4:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80064a6:	05bb      	lsls	r3, r7, #22
 80064a8:	f100 80be 	bmi.w	8006628 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80064ac:	0578      	lsls	r0, r7, #21
 80064ae:	f100 80e4 	bmi.w	800667a <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80064b2:	053b      	lsls	r3, r7, #20
 80064b4:	f140 80f0 	bpl.w	8006698 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80064b8:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80064ba:	03f8      	lsls	r0, r7, #15
 80064bc:	d50b      	bpl.n	80064d6 <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80064c4:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80064c6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80064c8:	f100 80ba 	bmi.w	8006640 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80064cc:	037a      	lsls	r2, r7, #13
 80064ce:	f140 80cf 	bpl.w	8006670 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80064d2:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80064d6:	0727      	lsls	r7, r4, #28
 80064d8:	d502      	bpl.n	80064e0 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80064da:	f01b 0f10 	tst.w	fp, #16
 80064de:	d161      	bne.n	80065a4 <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80064e0:	0760      	lsls	r0, r4, #29
 80064e2:	d503      	bpl.n	80064ec <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80064e4:	f01b 0f08 	tst.w	fp, #8
 80064e8:	f040 808c 	bne.w	8006604 <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80064ec:	07a1      	lsls	r1, r4, #30
 80064ee:	d504      	bpl.n	80064fa <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	079a      	lsls	r2, r3, #30
 80064f6:	f040 808c 	bne.w	8006612 <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80064fa:	0663      	lsls	r3, r4, #25
 80064fc:	d502      	bpl.n	8006504 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80064fe:	f01a 0f10 	tst.w	sl, #16
 8006502:	d149      	bne.n	8006598 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006504:	06a7      	lsls	r7, r4, #26
 8006506:	d502      	bpl.n	800650e <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006508:	f01a 0f08 	tst.w	sl, #8
 800650c:	d173      	bne.n	80065f6 <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800650e:	06e0      	lsls	r0, r4, #27
 8006510:	d503      	bpl.n	800651a <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006512:	682b      	ldr	r3, [r5, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	0799      	lsls	r1, r3, #30
 8006518:	d162      	bne.n	80065e0 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800651a:	03a2      	lsls	r2, r4, #14
 800651c:	d502      	bpl.n	8006524 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800651e:	f018 0f10 	tst.w	r8, #16
 8006522:	d161      	bne.n	80065e8 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006524:	03e3      	lsls	r3, r4, #15
 8006526:	d502      	bpl.n	800652e <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006528:	f018 0f08 	tst.w	r8, #8
 800652c:	d175      	bne.n	800661a <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800652e:	0427      	lsls	r7, r4, #16
 8006530:	d505      	bpl.n	800653e <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006532:	f018 0f04 	tst.w	r8, #4
 8006536:	d106      	bne.n	8006546 <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006538:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800653a:	2204      	movs	r2, #4
 800653c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800653e:	2e00      	cmp	r6, #0
 8006540:	d146      	bne.n	80065d0 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006542:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006546:	05e0      	lsls	r0, r4, #23
 8006548:	d504      	bpl.n	8006554 <HAL_CAN_IRQHandler+0xec>
 800654a:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 800654e:	bf18      	it	ne
 8006550:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006554:	05a1      	lsls	r1, r4, #22
 8006556:	d504      	bpl.n	8006562 <HAL_CAN_IRQHandler+0xfa>
 8006558:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 800655c:	bf18      	it	ne
 800655e:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006562:	0562      	lsls	r2, r4, #21
 8006564:	d504      	bpl.n	8006570 <HAL_CAN_IRQHandler+0x108>
 8006566:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800656a:	bf18      	it	ne
 800656c:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006570:	0523      	lsls	r3, r4, #20
 8006572:	d5e1      	bpl.n	8006538 <HAL_CAN_IRQHandler+0xd0>
 8006574:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8006578:	d0de      	beq.n	8006538 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 800657a:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800657e:	f000 809a 	beq.w	80066b6 <HAL_CAN_IRQHandler+0x24e>
 8006582:	d861      	bhi.n	8006648 <HAL_CAN_IRQHandler+0x1e0>
 8006584:	f1b9 0f20 	cmp.w	r9, #32
 8006588:	f000 8083 	beq.w	8006692 <HAL_CAN_IRQHandler+0x22a>
 800658c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8006590:	d168      	bne.n	8006664 <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006592:	f046 0620 	orr.w	r6, r6, #32
            break;
 8006596:	e05f      	b.n	8006658 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800659c:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80065a0:	611a      	str	r2, [r3, #16]
 80065a2:	e7af      	b.n	8006504 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80065a8:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80065ac:	60da      	str	r2, [r3, #12]
 80065ae:	e797      	b.n	80064e0 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80065b0:	2201      	movs	r2, #1
 80065b2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80065b4:	07bb      	lsls	r3, r7, #30
 80065b6:	d43b      	bmi.n	8006630 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80065b8:	077e      	lsls	r6, r7, #29
 80065ba:	d460      	bmi.n	800667e <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80065bc:	f017 0608 	ands.w	r6, r7, #8
 80065c0:	d06e      	beq.n	80066a0 <HAL_CAN_IRQHandler+0x238>
 80065c2:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80065c6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80065ca:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80065ce:	e764      	b.n	800649a <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 80065d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065d2:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 80065d4:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80065d6:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80065d8:	f7ff ff44 	bl	8006464 <HAL_CAN_ErrorCallback>
}
 80065dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80065e0:	4628      	mov	r0, r5
 80065e2:	f7fb fb69 	bl	8001cb8 <HAL_CAN_RxFifo1MsgPendingCallback>
 80065e6:	e798      	b.n	800651a <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	2210      	movs	r2, #16
 80065ec:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80065ee:	4628      	mov	r0, r5
 80065f0:	f7ff ff34 	bl	800645c <HAL_CAN_SleepCallback>
 80065f4:	e796      	b.n	8006524 <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80065f6:	682b      	ldr	r3, [r5, #0]
 80065f8:	2208      	movs	r2, #8
 80065fa:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80065fc:	4628      	mov	r0, r5
 80065fe:	f7ff ff2b 	bl	8006458 <HAL_CAN_RxFifo1FullCallback>
 8006602:	e784      	b.n	800650e <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006604:	682b      	ldr	r3, [r5, #0]
 8006606:	2208      	movs	r2, #8
 8006608:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800660a:	4628      	mov	r0, r5
 800660c:	f7ff ff22 	bl	8006454 <HAL_CAN_RxFifo0FullCallback>
 8006610:	e76c      	b.n	80064ec <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006612:	4628      	mov	r0, r5
 8006614:	f7fb fb36 	bl	8001c84 <HAL_CAN_RxFifo0MsgPendingCallback>
 8006618:	e76f      	b.n	80064fa <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800661a:	682b      	ldr	r3, [r5, #0]
 800661c:	2208      	movs	r2, #8
 800661e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006620:	4628      	mov	r0, r5
 8006622:	f7ff ff1d 	bl	8006460 <HAL_CAN_WakeUpFromRxMsgCallback>
 8006626:	e782      	b.n	800652e <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006628:	4628      	mov	r0, r5
 800662a:	f7ff ff09 	bl	8006440 <HAL_CAN_TxMailbox1CompleteCallback>
 800662e:	e744      	b.n	80064ba <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006630:	f7ff ff04 	bl	800643c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006634:	2600      	movs	r6, #0
 8006636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800663a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800663e:	e72c      	b.n	800649a <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006640:	4628      	mov	r0, r5
 8006642:	f7ff feff 	bl	8006444 <HAL_CAN_TxMailbox2CompleteCallback>
 8006646:	e746      	b.n	80064d6 <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8006648:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 800664c:	d01e      	beq.n	800668c <HAL_CAN_IRQHandler+0x224>
 800664e:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8006652:	bf08      	it	eq
 8006654:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006660:	619a      	str	r2, [r3, #24]
 8006662:	e76a      	b.n	800653a <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 8006664:	f1b9 0f10 	cmp.w	r9, #16
 8006668:	d1f6      	bne.n	8006658 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 800666a:	f046 0608 	orr.w	r6, r6, #8
            break;
 800666e:	e7f3      	b.n	8006658 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006670:	033b      	lsls	r3, r7, #12
 8006672:	d51c      	bpl.n	80066ae <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006674:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8006678:	e72d      	b.n	80064d6 <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800667a:	4616      	mov	r6, r2
 800667c:	e71d      	b.n	80064ba <HAL_CAN_IRQHandler+0x52>
 800667e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006682:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006686:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800668a:	e706      	b.n	800649a <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 800668c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8006690:	e7e2      	b.n	8006658 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006692:	f046 0610 	orr.w	r6, r6, #16
            break;
 8006696:	e7df      	b.n	8006658 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006698:	4628      	mov	r0, r5
 800669a:	f7ff fed7 	bl	800644c <HAL_CAN_TxMailbox1AbortCallback>
 800669e:	e70c      	b.n	80064ba <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80066a0:	f7ff fed2 	bl	8006448 <HAL_CAN_TxMailbox0AbortCallback>
 80066a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066ac:	e6f5      	b.n	800649a <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80066ae:	4628      	mov	r0, r5
 80066b0:	f7ff fece 	bl	8006450 <HAL_CAN_TxMailbox2AbortCallback>
 80066b4:	e70f      	b.n	80064d6 <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 80066b6:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80066ba:	e7cd      	b.n	8006658 <HAL_CAN_IRQHandler+0x1f0>

080066bc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066bc:	4907      	ldr	r1, [pc, #28]	; (80066dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80066be:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066c0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066c2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066ca:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066cc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066ce:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80066d6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	e000ed00 	.word	0xe000ed00

080066e0 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066e0:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <HAL_NVIC_SetPriority+0x74>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066e8:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066ea:	f1c3 0e07 	rsb	lr, r3, #7
 80066ee:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066f2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066f6:	bf28      	it	cs
 80066f8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066fc:	f1bc 0f06 	cmp.w	ip, #6
 8006700:	d91b      	bls.n	800673a <HAL_NVIC_SetPriority+0x5a>
 8006702:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006704:	f04f 3cff 	mov.w	ip, #4294967295
 8006708:	fa0c fc03 	lsl.w	ip, ip, r3
 800670c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006710:	f04f 3cff 	mov.w	ip, #4294967295
 8006714:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006718:	ea21 010c 	bic.w	r1, r1, ip
 800671c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800671e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006720:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8006724:	db0c      	blt.n	8006740 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006726:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800672a:	0109      	lsls	r1, r1, #4
 800672c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006730:	b2c9      	uxtb	r1, r1
 8006732:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006736:	f85d fb04 	ldr.w	pc, [sp], #4
 800673a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800673c:	4613      	mov	r3, r2
 800673e:	e7e7      	b.n	8006710 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <HAL_NVIC_SetPriority+0x78>)
 8006742:	f000 000f 	and.w	r0, r0, #15
 8006746:	0109      	lsls	r1, r1, #4
 8006748:	4403      	add	r3, r0
 800674a:	b2c9      	uxtb	r1, r1
 800674c:	7619      	strb	r1, [r3, #24]
 800674e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006752:	bf00      	nop
 8006754:	e000ed00 	.word	0xe000ed00
 8006758:	e000ecfc 	.word	0xe000ecfc

0800675c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800675c:	2800      	cmp	r0, #0
 800675e:	db07      	blt.n	8006770 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006760:	0941      	lsrs	r1, r0, #5
 8006762:	4a04      	ldr	r2, [pc, #16]	; (8006774 <HAL_NVIC_EnableIRQ+0x18>)
 8006764:	f000 001f 	and.w	r0, r0, #31
 8006768:	2301      	movs	r3, #1
 800676a:	4083      	lsls	r3, r0
 800676c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	e000e100 	.word	0xe000e100

08006778 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006778:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800677c:	4905      	ldr	r1, [pc, #20]	; (8006794 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800677e:	4b06      	ldr	r3, [pc, #24]	; (8006798 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006780:	68ca      	ldr	r2, [r1, #12]
 8006782:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006786:	4313      	orrs	r3, r2
 8006788:	60cb      	str	r3, [r1, #12]
 800678a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800678e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006790:	e7fd      	b.n	800678e <HAL_NVIC_SystemReset+0x16>
 8006792:	bf00      	nop
 8006794:	e000ed00 	.word	0xe000ed00
 8006798:	05fa0004 	.word	0x05fa0004

0800679c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800679c:	3801      	subs	r0, #1
 800679e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80067a2:	d210      	bcs.n	80067c6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067a4:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067aa:	4c08      	ldr	r4, [pc, #32]	; (80067cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ae:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80067b2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067b6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067b8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067ba:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067bc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80067be:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067c2:	6119      	str	r1, [r3, #16]
 80067c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80067c6:	2001      	movs	r0, #1
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	e000ed00 	.word	0xe000ed00

080067d0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d035      	beq.n	8006840 <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80067d4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 80067d8:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067da:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80067dc:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 80067de:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067e0:	6902      	ldr	r2, [r0, #16]
 80067e2:	4323      	orrs	r3, r4
 80067e4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067e6:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 80067ea:	4323      	orrs	r3, r4
 80067ec:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80067ee:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067f0:	4c14      	ldr	r4, [pc, #80]	; (8006844 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 80067f2:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 80067f4:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80067f6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80067fa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80067fe:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006800:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 8006802:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006804:	d912      	bls.n	800682c <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006806:	4b10      	ldr	r3, [pc, #64]	; (8006848 <HAL_DMA_Init+0x78>)
 8006808:	4a10      	ldr	r2, [pc, #64]	; (800684c <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 800680a:	4c11      	ldr	r4, [pc, #68]	; (8006850 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800680c:	440b      	add	r3, r1
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	091b      	lsrs	r3, r3, #4
 8006814:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 8006816:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800681a:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 800681c:	8401      	strh	r1, [r0, #32]
 800681e:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006822:	6382      	str	r2, [r0, #56]	; 0x38
}  
 8006824:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8006828:	4610      	mov	r0, r2
}  
 800682a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_DMA_Init+0x84>)
 800682e:	4a07      	ldr	r2, [pc, #28]	; (800684c <HAL_DMA_Init+0x7c>)
 8006830:	440b      	add	r3, r1
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8006838:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800683c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800683e:	e7ea      	b.n	8006816 <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8006840:	2001      	movs	r0, #1
}  
 8006842:	4770      	bx	lr
 8006844:	40020407 	.word	0x40020407
 8006848:	bffdfbf8 	.word	0xbffdfbf8
 800684c:	cccccccd 	.word	0xcccccccd
 8006850:	40020400 	.word	0x40020400
 8006854:	bffdfff8 	.word	0xbffdfff8

08006858 <HAL_DMA_Start_IT>:
{
 8006858:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 800685a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800685e:	2c01      	cmp	r4, #1
 8006860:	d039      	beq.n	80068d6 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8006862:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8006866:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006868:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 800686a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800686e:	d005      	beq.n	800687c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8006870:	2300      	movs	r3, #0
 8006872:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8006876:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8006878:	2002      	movs	r0, #2
} 
 800687a:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 800687c:	2502      	movs	r5, #2
 800687e:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006882:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006884:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006886:	2500      	movs	r5, #0
 8006888:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800688a:	6825      	ldr	r5, [r4, #0]
 800688c:	f025 0501 	bic.w	r5, r5, #1
 8006890:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006892:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006894:	fa0c f505 	lsl.w	r5, ip, r5
 8006898:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800689a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800689c:	6843      	ldr	r3, [r0, #4]
 800689e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80068a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 80068a2:	bf0b      	itete	eq
 80068a4:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80068a6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80068a8:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80068aa:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80068ac:	b153      	cbz	r3, 80068c4 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	f043 030e 	orr.w	r3, r3, #14
 80068b4:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 80068bc:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80068be:	6023      	str	r3, [r4, #0]
} 
 80068c0:	bc70      	pop	{r4, r5, r6}
 80068c2:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	f043 030a 	orr.w	r3, r3, #10
 80068ca:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	f023 0304 	bic.w	r3, r3, #4
 80068d2:	6023      	str	r3, [r4, #0]
 80068d4:	e7ef      	b.n	80068b6 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80068d6:	2002      	movs	r0, #2
} 
 80068d8:	bc70      	pop	{r4, r5, r6}
 80068da:	4770      	bx	lr

080068dc <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068dc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80068e0:	2a02      	cmp	r2, #2
{
 80068e2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068e4:	d006      	beq.n	80068f4 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068e6:	2204      	movs	r2, #4
 80068e8:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80068ea:	2200      	movs	r2, #0
    return HAL_ERROR;
 80068ec:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80068ee:	f883 2020 	strb.w	r2, [r3, #32]
}
 80068f2:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80068f4:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80068f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80068f8:	6810      	ldr	r0, [r2, #0]
 80068fa:	f020 000e 	bic.w	r0, r0, #14
 80068fe:	6010      	str	r0, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006900:	6810      	ldr	r0, [r2, #0]
 8006902:	f020 0001 	bic.w	r0, r0, #1
 8006906:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006908:	f04f 0c01 	mov.w	ip, #1
 800690c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690e:	fa0c f101 	lsl.w	r1, ip, r1
 8006912:	6051      	str	r1, [r2, #4]
    __HAL_UNLOCK(hdma);
 8006914:	2200      	movs	r2, #0
  return HAL_OK;
 8006916:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8006918:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800691c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop

08006924 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006924:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8006928:	2a02      	cmp	r2, #2
 800692a:	d003      	beq.n	8006934 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800692c:	2204      	movs	r2, #4
 800692e:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8006930:	2001      	movs	r0, #1
}
 8006932:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006934:	6802      	ldr	r2, [r0, #0]
 8006936:	6811      	ldr	r1, [r2, #0]
 8006938:	f021 010e 	bic.w	r1, r1, #14
{  
 800693c:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800693e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006940:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006942:	6811      	ldr	r1, [r2, #0]
 8006944:	f021 0101 	bic.w	r1, r1, #1
 8006948:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800694a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800694c:	2101      	movs	r1, #1
 800694e:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8006950:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006952:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8006954:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8006958:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800695c:	b112      	cbz	r2, 8006964 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 800695e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8006960:	2000      	movs	r0, #0
}
 8006962:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006964:	4610      	mov	r0, r2
}
 8006966:	bd10      	pop	{r4, pc}

08006968 <HAL_DMA_IRQHandler>:
{
 8006968:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800696a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800696c:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800696e:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006970:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006972:	2304      	movs	r3, #4
 8006974:	4093      	lsls	r3, r2
 8006976:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8006978:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800697a:	d00e      	beq.n	800699a <HAL_DMA_IRQHandler+0x32>
 800697c:	f015 0f04 	tst.w	r5, #4
 8006980:	d00b      	beq.n	800699a <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006982:	6822      	ldr	r2, [r4, #0]
 8006984:	0692      	lsls	r2, r2, #26
 8006986:	d403      	bmi.n	8006990 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006988:	6822      	ldr	r2, [r4, #0]
 800698a:	f022 0204 	bic.w	r2, r2, #4
 800698e:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8006990:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006992:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8006994:	b1ca      	cbz	r2, 80069ca <HAL_DMA_IRQHandler+0x62>
}  
 8006996:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8006998:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800699a:	2302      	movs	r3, #2
 800699c:	4093      	lsls	r3, r2
 800699e:	420b      	tst	r3, r1
 80069a0:	d015      	beq.n	80069ce <HAL_DMA_IRQHandler+0x66>
 80069a2:	f015 0f02 	tst.w	r5, #2
 80069a6:	d012      	beq.n	80069ce <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069a8:	6822      	ldr	r2, [r4, #0]
 80069aa:	0692      	lsls	r2, r2, #26
 80069ac:	d406      	bmi.n	80069bc <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	f022 020a 	bic.w	r2, r2, #10
 80069b4:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80069b6:	2201      	movs	r2, #1
 80069b8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 80069bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80069be:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 80069c0:	2100      	movs	r1, #0
 80069c2:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	d1e5      	bne.n	8006996 <HAL_DMA_IRQHandler+0x2e>
}  
 80069ca:	bc70      	pop	{r4, r5, r6}
 80069cc:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80069ce:	2308      	movs	r3, #8
 80069d0:	4093      	lsls	r3, r2
 80069d2:	420b      	tst	r3, r1
 80069d4:	d0f9      	beq.n	80069ca <HAL_DMA_IRQHandler+0x62>
 80069d6:	072b      	lsls	r3, r5, #28
 80069d8:	d5f7      	bpl.n	80069ca <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80069da:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 80069dc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80069de:	f023 030e 	bic.w	r3, r3, #14
 80069e2:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80069e4:	2301      	movs	r3, #1
 80069e6:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 80069ea:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80069ee:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 80069f0:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069f2:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d0e8      	beq.n	80069ca <HAL_DMA_IRQHandler+0x62>
}  
 80069f8:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80069fa:	4708      	bx	r1

080069fc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80069fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a00:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8006b90 <HAL_FLASH_Program+0x194>
{
 8006a04:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8006a06:	f89a 3018 	ldrb.w	r3, [sl, #24]
 8006a0a:	2b01      	cmp	r3, #1
{
 8006a0c:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8006a0e:	f000 80ad 	beq.w	8006b6c <HAL_FLASH_Program+0x170>
 8006a12:	2301      	movs	r3, #1
 8006a14:	4606      	mov	r6, r0
 8006a16:	4688      	mov	r8, r1
 8006a18:	4693      	mov	fp, r2
 8006a1a:	f88a 3018 	strb.w	r3, [sl, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006a1e:	f7fe faed 	bl	8004ffc <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006a22:	4d5a      	ldr	r5, [pc, #360]	; (8006b8c <HAL_FLASH_Program+0x190>)
  uint32_t tickstart = HAL_GetTick();
 8006a24:	4604      	mov	r4, r0
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006a26:	f24c 3750 	movw	r7, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006a2a:	e005      	b.n	8006a38 <HAL_FLASH_Program+0x3c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006a2c:	f7fe fae6 	bl	8004ffc <HAL_GetTick>
 8006a30:	1b00      	subs	r0, r0, r4
 8006a32:	42b8      	cmp	r0, r7
 8006a34:	f200 8083 	bhi.w	8006b3e <HAL_FLASH_Program+0x142>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006a38:	68eb      	ldr	r3, [r5, #12]
 8006a3a:	07db      	lsls	r3, r3, #31
 8006a3c:	d4f6      	bmi.n	8006a2c <HAL_FLASH_Program+0x30>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006a3e:	68eb      	ldr	r3, [r5, #12]
 8006a40:	0698      	lsls	r0, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006a42:	bf44      	itt	mi
 8006a44:	2320      	movmi	r3, #32
 8006a46:	60eb      	strmi	r3, [r5, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006a48:	4b50      	ldr	r3, [pc, #320]	; (8006b8c <HAL_FLASH_Program+0x190>)
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	06d1      	lsls	r1, r2, #27
 8006a4e:	d478      	bmi.n	8006b42 <HAL_FLASH_Program+0x146>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006a50:	68df      	ldr	r7, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006a52:	f017 0704 	ands.w	r7, r7, #4
 8006a56:	d174      	bne.n	8006b42 <HAL_FLASH_Program+0x146>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006a58:	2e01      	cmp	r6, #1
 8006a5a:	f000 8094 	beq.w	8006b86 <HAL_FLASH_Program+0x18a>
      nbiterations = 4U;
 8006a5e:	2e02      	cmp	r6, #2
 8006a60:	bf0c      	ite	eq
 8006a62:	2302      	moveq	r3, #2
 8006a64:	2304      	movne	r3, #4
 8006a66:	9301      	str	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006a68:	4c48      	ldr	r4, [pc, #288]	; (8006b8c <HAL_FLASH_Program+0x190>)
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006a6a:	f24c 3650 	movw	r6, #50000	; 0xc350
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006a6e:	013b      	lsls	r3, r7, #4
 8006a70:	f1c3 0220 	rsb	r2, r3, #32
 8006a74:	f1a3 0120 	sub.w	r1, r3, #32
 8006a78:	fa09 f202 	lsl.w	r2, r9, r2
 8006a7c:	fa2b f303 	lsr.w	r3, fp, r3
 8006a80:	4313      	orrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8ca 201c 	str.w	r2, [sl, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006a88:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006a8a:	fa29 f101 	lsr.w	r1, r9, r1
 8006a8e:	430b      	orrs	r3, r1
 8006a90:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8006a98:	f8a8 3000 	strh.w	r3, [r8]
  uint32_t tickstart = HAL_GetTick();
 8006a9c:	f7fe faae 	bl	8004ffc <HAL_GetTick>
 8006aa0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006aa2:	e004      	b.n	8006aae <HAL_FLASH_Program+0xb2>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006aa4:	f7fe faaa 	bl	8004ffc <HAL_GetTick>
 8006aa8:	1b40      	subs	r0, r0, r5
 8006aaa:	42b0      	cmp	r0, r6
 8006aac:	d81f      	bhi.n	8006aee <HAL_FLASH_Program+0xf2>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006aae:	68e3      	ldr	r3, [r4, #12]
 8006ab0:	07db      	lsls	r3, r3, #31
 8006ab2:	d4f7      	bmi.n	8006aa4 <HAL_FLASH_Program+0xa8>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006ab4:	68e3      	ldr	r3, [r4, #12]
 8006ab6:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006ab8:	bf44      	itt	mi
 8006aba:	2320      	movmi	r3, #32
 8006abc:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	06d9      	lsls	r1, r3, #27
 8006ac2:	d41a      	bmi.n	8006afa <HAL_FLASH_Program+0xfe>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006ac4:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006ac6:	f010 0004 	ands.w	r0, r0, #4
 8006aca:	d116      	bne.n	8006afa <HAL_FLASH_Program+0xfe>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006acc:	6923      	ldr	r3, [r4, #16]
 8006ace:	f023 0301 	bic.w	r3, r3, #1
    for (index = 0U; index < nbiterations; index++)
 8006ad2:	3701      	adds	r7, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006ad4:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8006ad6:	9b01      	ldr	r3, [sp, #4]
 8006ad8:	b2fa      	uxtb	r2, r7
 8006ada:	4293      	cmp	r3, r2
 8006adc:	f108 0802 	add.w	r8, r8, #2
 8006ae0:	d8c5      	bhi.n	8006a6e <HAL_FLASH_Program+0x72>
  __HAL_UNLOCK(&pFlash);
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f88a 3018 	strb.w	r3, [sl, #24]
}
 8006ae8:	b003      	add	sp, #12
 8006aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	f023 0301 	bic.w	r3, r3, #1
 8006af4:	2003      	movs	r0, #3
 8006af6:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8006af8:	e7f3      	b.n	8006ae2 <HAL_FLASH_Program+0xe6>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006afa:	4b24      	ldr	r3, [pc, #144]	; (8006b8c <HAL_FLASH_Program+0x190>)
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f013 0310 	ands.w	r3, r3, #16
 8006b02:	d01a      	beq.n	8006b3a <HAL_FLASH_Program+0x13e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006b04:	f8da 301c 	ldr.w	r3, [sl, #28]
 8006b08:	f043 0302 	orr.w	r3, r3, #2
 8006b0c:	f8ca 301c 	str.w	r3, [sl, #28]
 8006b10:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8006b12:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006b14:	4a1d      	ldr	r2, [pc, #116]	; (8006b8c <HAL_FLASH_Program+0x190>)
 8006b16:	68d2      	ldr	r2, [r2, #12]
 8006b18:	0752      	lsls	r2, r2, #29
 8006b1a:	d506      	bpl.n	8006b2a <HAL_FLASH_Program+0x12e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006b1c:	f8da 201c 	ldr.w	r2, [sl, #28]
 8006b20:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8006b24:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006b26:	f8ca 201c 	str.w	r2, [sl, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006b2a:	4a18      	ldr	r2, [pc, #96]	; (8006b8c <HAL_FLASH_Program+0x190>)
 8006b2c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006b2e:	6913      	ldr	r3, [r2, #16]
 8006b30:	f023 0301 	bic.w	r3, r3, #1
    return HAL_ERROR;
 8006b34:	2001      	movs	r0, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006b36:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8006b38:	e7d3      	b.n	8006ae2 <HAL_FLASH_Program+0xe6>
 8006b3a:	2104      	movs	r1, #4
 8006b3c:	e7ea      	b.n	8006b14 <HAL_FLASH_Program+0x118>
 8006b3e:	2003      	movs	r0, #3
 8006b40:	e7cf      	b.n	8006ae2 <HAL_FLASH_Program+0xe6>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006b42:	4b12      	ldr	r3, [pc, #72]	; (8006b8c <HAL_FLASH_Program+0x190>)
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f013 0310 	ands.w	r3, r3, #16
 8006b4a:	d113      	bne.n	8006b74 <HAL_FLASH_Program+0x178>
 8006b4c:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006b4e:	4a0f      	ldr	r2, [pc, #60]	; (8006b8c <HAL_FLASH_Program+0x190>)
 8006b50:	68d2      	ldr	r2, [r2, #12]
 8006b52:	0752      	lsls	r2, r2, #29
 8006b54:	d506      	bpl.n	8006b64 <HAL_FLASH_Program+0x168>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006b56:	f8da 201c 	ldr.w	r2, [sl, #28]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8006b5e:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006b60:	f8ca 201c 	str.w	r2, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006b64:	4a09      	ldr	r2, [pc, #36]	; (8006b8c <HAL_FLASH_Program+0x190>)
    return HAL_ERROR;
 8006b66:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006b68:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 8006b6a:	e7ba      	b.n	8006ae2 <HAL_FLASH_Program+0xe6>
  __HAL_LOCK(&pFlash);
 8006b6c:	2002      	movs	r0, #2
}
 8006b6e:	b003      	add	sp, #12
 8006b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006b74:	f8da 301c 	ldr.w	r3, [sl, #28]
 8006b78:	f043 0302 	orr.w	r3, r3, #2
 8006b7c:	f8ca 301c 	str.w	r3, [sl, #28]
 8006b80:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8006b82:	2310      	movs	r3, #16
 8006b84:	e7e3      	b.n	8006b4e <HAL_FLASH_Program+0x152>
      nbiterations = 1U;
 8006b86:	9601      	str	r6, [sp, #4]
 8006b88:	e76e      	b.n	8006a68 <HAL_FLASH_Program+0x6c>
 8006b8a:	bf00      	nop
 8006b8c:	40022000 	.word	0x40022000
 8006b90:	20001d90 	.word	0x20001d90

08006b94 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006b94:	4b06      	ldr	r3, [pc, #24]	; (8006bb0 <HAL_FLASH_Unlock+0x1c>)
 8006b96:	6918      	ldr	r0, [r3, #16]
 8006b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b9c:	d006      	beq.n	8006bac <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006b9e:	4905      	ldr	r1, [pc, #20]	; (8006bb4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006ba0:	4a05      	ldr	r2, [pc, #20]	; (8006bb8 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006ba2:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006ba4:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006ba6:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba8:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	40022000 	.word	0x40022000
 8006bb4:	45670123 	.word	0x45670123
 8006bb8:	cdef89ab 	.word	0xcdef89ab

08006bbc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006bbc:	4a03      	ldr	r2, [pc, #12]	; (8006bcc <HAL_FLASH_Lock+0x10>)
 8006bbe:	6913      	ldr	r3, [r2, #16]
 8006bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8006bc4:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006bc6:	6113      	str	r3, [r2, #16]
}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40022000 	.word	0x40022000

08006bd0 <FLASH_WaitForLastOperation>:
{
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006bd4:	f7fe fa12 	bl	8004ffc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006bd8:	4e1e      	ldr	r6, [pc, #120]	; (8006c54 <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 8006bda:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006bdc:	1c60      	adds	r0, r4, #1
 8006bde:	d112      	bne.n	8006c06 <FLASH_WaitForLastOperation+0x36>
 8006be0:	4a1c      	ldr	r2, [pc, #112]	; (8006c54 <FLASH_WaitForLastOperation+0x84>)
 8006be2:	68d3      	ldr	r3, [r2, #12]
 8006be4:	07d9      	lsls	r1, r3, #31
 8006be6:	d4fc      	bmi.n	8006be2 <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006be8:	4b1a      	ldr	r3, [pc, #104]	; (8006c54 <FLASH_WaitForLastOperation+0x84>)
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	0690      	lsls	r0, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006bee:	bf44      	itt	mi
 8006bf0:	2220      	movmi	r2, #32
 8006bf2:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006bf4:	4b17      	ldr	r3, [pc, #92]	; (8006c54 <FLASH_WaitForLastOperation+0x84>)
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	06d1      	lsls	r1, r2, #27
 8006bfa:	d40f      	bmi.n	8006c1c <FLASH_WaitForLastOperation+0x4c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006bfc:	68d8      	ldr	r0, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006bfe:	f010 0004 	ands.w	r0, r0, #4
 8006c02:	d10b      	bne.n	8006c1c <FLASH_WaitForLastOperation+0x4c>
}
 8006c04:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006c06:	68f3      	ldr	r3, [r6, #12]
 8006c08:	07db      	lsls	r3, r3, #31
 8006c0a:	d5ed      	bpl.n	8006be8 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006c0c:	b124      	cbz	r4, 8006c18 <FLASH_WaitForLastOperation+0x48>
 8006c0e:	f7fe f9f5 	bl	8004ffc <HAL_GetTick>
 8006c12:	1b40      	subs	r0, r0, r5
 8006c14:	42a0      	cmp	r0, r4
 8006c16:	d9e1      	bls.n	8006bdc <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8006c18:	2003      	movs	r0, #3
}
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006c1c:	4b0d      	ldr	r3, [pc, #52]	; (8006c54 <FLASH_WaitForLastOperation+0x84>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f013 0310 	ands.w	r3, r3, #16
 8006c24:	d014      	beq.n	8006c50 <FLASH_WaitForLastOperation+0x80>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006c26:	490c      	ldr	r1, [pc, #48]	; (8006c58 <FLASH_WaitForLastOperation+0x88>)
 8006c28:	69ca      	ldr	r2, [r1, #28]
 8006c2a:	f042 0202 	orr.w	r2, r2, #2
 8006c2e:	2014      	movs	r0, #20
    flags |= FLASH_FLAG_WRPERR;
 8006c30:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006c32:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006c34:	4a07      	ldr	r2, [pc, #28]	; (8006c54 <FLASH_WaitForLastOperation+0x84>)
 8006c36:	68d2      	ldr	r2, [r2, #12]
 8006c38:	0752      	lsls	r2, r2, #29
 8006c3a:	d505      	bpl.n	8006c48 <FLASH_WaitForLastOperation+0x78>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006c3c:	4906      	ldr	r1, [pc, #24]	; (8006c58 <FLASH_WaitForLastOperation+0x88>)
 8006c3e:	69ca      	ldr	r2, [r1, #28]
 8006c40:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8006c44:	4603      	mov	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006c46:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006c48:	4a02      	ldr	r2, [pc, #8]	; (8006c54 <FLASH_WaitForLastOperation+0x84>)
    return HAL_ERROR;
 8006c4a:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006c4c:	60d3      	str	r3, [r2, #12]
}
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	2004      	movs	r0, #4
 8006c52:	e7ef      	b.n	8006c34 <FLASH_WaitForLastOperation+0x64>
 8006c54:	40022000 	.word	0x40022000
 8006c58:	20001d90 	.word	0x20001d90

08006c5c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006c60:	4e2d      	ldr	r6, [pc, #180]	; (8006d18 <HAL_FLASHEx_Erase+0xbc>)
 8006c62:	7e33      	ldrb	r3, [r6, #24]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d054      	beq.n	8006d12 <HAL_FLASHEx_Erase+0xb6>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006c6c:	6803      	ldr	r3, [r0, #0]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	4681      	mov	r9, r0
 8006c72:	d031      	beq.n	8006cd8 <HAL_FLASHEx_Erase+0x7c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006c74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c78:	4688      	mov	r8, r1
 8006c7a:	f7ff ffa9 	bl	8006bd0 <FLASH_WaitForLastOperation>
 8006c7e:	4607      	mov	r7, r0
 8006c80:	bb78      	cbnz	r0, 8006ce2 <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006c82:	f04f 33ff 	mov.w	r3, #4294967295
 8006c86:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006c8a:	e9d9 5301 	ldrd	r5, r3, [r9, #4]
 8006c8e:	eb05 23c3 	add.w	r3, r5, r3, lsl #11
 8006c92:	429d      	cmp	r5, r3
 8006c94:	d225      	bcs.n	8006ce2 <HAL_FLASHEx_Erase+0x86>
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006c96:	4c21      	ldr	r4, [pc, #132]	; (8006d1c <HAL_FLASHEx_Erase+0xc0>)
 8006c98:	e007      	b.n	8006caa <HAL_FLASHEx_Erase+0x4e>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006c9a:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
            address += FLASH_PAGE_SIZE)
 8006c9e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006ca2:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8006ca6:	42ab      	cmp	r3, r5
 8006ca8:	d91c      	bls.n	8006ce4 <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006caa:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	f043 0302 	orr.w	r3, r3, #2
 8006cb2:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006cb4:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cbc:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006cbe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006cc2:	f7ff ff85 	bl	8006bd0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	f023 0302 	bic.w	r3, r3, #2
 8006ccc:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	d0e3      	beq.n	8006c9a <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8006cd2:	f8c8 5000 	str.w	r5, [r8]
            break;
 8006cd6:	e005      	b.n	8006ce4 <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006cd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006cdc:	f7ff ff78 	bl	8006bd0 <FLASH_WaitForLastOperation>
 8006ce0:	b120      	cbz	r0, 8006cec <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ce2:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	7633      	strb	r3, [r6, #24]
}
 8006ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006cec:	4c0b      	ldr	r4, [pc, #44]	; (8006d1c <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006cee:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006cf0:	6923      	ldr	r3, [r4, #16]
 8006cf2:	f043 0304 	orr.w	r3, r3, #4
 8006cf6:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cfe:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006d00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006d04:	f7ff ff64 	bl	8006bd0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	f023 0304 	bic.w	r3, r3, #4
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	e7e8      	b.n	8006ce4 <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 8006d12:	2002      	movs	r0, #2
}
 8006d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d18:	20001d90 	.word	0x20001d90
 8006d1c:	40022000 	.word	0x40022000

08006d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d24:	680c      	ldr	r4, [r1, #0]
{
 8006d26:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d28:	2c00      	cmp	r4, #0
 8006d2a:	d077      	beq.n	8006e1c <HAL_GPIO_Init+0xfc>
 8006d2c:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d30:	4e69      	ldr	r6, [pc, #420]	; (8006ed8 <HAL_GPIO_Init+0x1b8>)
  uint32_t position = 0x00u;
 8006d32:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d34:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006d38:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d3a:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8006d3e:	ea17 0a04 	ands.w	sl, r7, r4
 8006d42:	d065      	beq.n	8006e10 <HAL_GPIO_Init+0xf0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d44:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006d48:	f001 0203 	and.w	r2, r1, #3
 8006d4c:	1e55      	subs	r5, r2, #1
 8006d4e:	2d01      	cmp	r5, #1
 8006d50:	d967      	bls.n	8006e22 <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d52:	2a03      	cmp	r2, #3
 8006d54:	f040 80ab 	bne.w	8006eae <HAL_GPIO_Init+0x18e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006d58:	fa02 f20c 	lsl.w	r2, r2, ip
 8006d5c:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8006d5e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006d60:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d62:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d64:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006d68:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d6a:	d051      	beq.n	8006e10 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d6c:	4d5b      	ldr	r5, [pc, #364]	; (8006edc <HAL_GPIO_Init+0x1bc>)
 8006d6e:	69aa      	ldr	r2, [r5, #24]
 8006d70:	f042 0201 	orr.w	r2, r2, #1
 8006d74:	61aa      	str	r2, [r5, #24]
 8006d76:	69aa      	ldr	r2, [r5, #24]
 8006d78:	f002 0201 	and.w	r2, r2, #1
 8006d7c:	9203      	str	r2, [sp, #12]
 8006d7e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8006d80:	f023 0203 	bic.w	r2, r3, #3
 8006d84:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006d88:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006d8c:	f003 0503 	and.w	r5, r3, #3
 8006d90:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 8006d94:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006d96:	250f      	movs	r5, #15
 8006d98:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006d9c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006da0:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006da4:	d015      	beq.n	8006dd2 <HAL_GPIO_Init+0xb2>
 8006da6:	4d4e      	ldr	r5, [pc, #312]	; (8006ee0 <HAL_GPIO_Init+0x1c0>)
 8006da8:	42a8      	cmp	r0, r5
 8006daa:	f000 808b 	beq.w	8006ec4 <HAL_GPIO_Init+0x1a4>
 8006dae:	4d4d      	ldr	r5, [pc, #308]	; (8006ee4 <HAL_GPIO_Init+0x1c4>)
 8006db0:	42a8      	cmp	r0, r5
 8006db2:	f000 808b 	beq.w	8006ecc <HAL_GPIO_Init+0x1ac>
 8006db6:	4d4c      	ldr	r5, [pc, #304]	; (8006ee8 <HAL_GPIO_Init+0x1c8>)
 8006db8:	42a8      	cmp	r0, r5
 8006dba:	d07d      	beq.n	8006eb8 <HAL_GPIO_Init+0x198>
 8006dbc:	4d4b      	ldr	r5, [pc, #300]	; (8006eec <HAL_GPIO_Init+0x1cc>)
 8006dbe:	42a8      	cmp	r0, r5
 8006dc0:	bf13      	iteet	ne
 8006dc2:	2505      	movne	r5, #5
 8006dc4:	f04f 0804 	moveq.w	r8, #4
 8006dc8:	fa08 f509 	lsleq.w	r5, r8, r9
 8006dcc:	fa05 f509 	lslne.w	r5, r5, r9
 8006dd0:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006dd2:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR;
 8006dd4:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8006dd6:	ea6f 050a 	mvn.w	r5, sl
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006dda:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8006ddc:	bf54      	ite	pl
 8006dde:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006de0:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8006de4:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8006de6:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006de8:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8006dea:	bf54      	ite	pl
 8006dec:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006dee:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR = temp;
 8006df2:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8006df4:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006df6:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8006df8:	bf54      	ite	pl
 8006dfa:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006dfc:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 8006e00:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e02:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006e04:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8006e06:	bf54      	ite	pl
 8006e08:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006e0a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8006e0e:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8006e10:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e12:	fa34 f203 	lsrs.w	r2, r4, r3
 8006e16:	f10c 0c02 	add.w	ip, ip, #2
 8006e1a:	d18e      	bne.n	8006d3a <HAL_GPIO_Init+0x1a>
  }
}
 8006e1c:	b005      	add	sp, #20
 8006e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006e22:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e26:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006e2a:	f04f 0803 	mov.w	r8, #3
 8006e2e:	fa08 f80c 	lsl.w	r8, r8, ip
 8006e32:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006e36:	fa05 f50c 	lsl.w	r5, r5, ip
 8006e3a:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8006e3e:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006e40:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8006e44:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e48:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e4c:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8006e50:	409f      	lsls	r7, r3
 8006e52:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006e56:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006e58:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006e5a:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006e5e:	f8de 7008 	ldr.w	r7, [lr, #8]
 8006e62:	fa07 f70c 	lsl.w	r7, r7, ip
 8006e66:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e6a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006e6c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e6e:	fa02 f20c 	lsl.w	r2, r2, ip
 8006e72:	f47f af74 	bne.w	8006d5e <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 8006e76:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8006e7a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e7e:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8006e82:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8006e86:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e88:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e8c:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e90:	fa07 f708 	lsl.w	r7, r7, r8
 8006e94:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e96:	270f      	movs	r7, #15
 8006e98:	fa07 f808 	lsl.w	r8, r7, r8
 8006e9c:	9f00      	ldr	r7, [sp, #0]
 8006e9e:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006ea2:	9f01      	ldr	r7, [sp, #4]
 8006ea4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8006ea8:	f8c9 7020 	str.w	r7, [r9, #32]
 8006eac:	e757      	b.n	8006d5e <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006eae:	2503      	movs	r5, #3
 8006eb0:	fa05 f50c 	lsl.w	r5, r5, ip
 8006eb4:	43ed      	mvns	r5, r5
 8006eb6:	e7cf      	b.n	8006e58 <HAL_GPIO_Init+0x138>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006eb8:	f04f 0803 	mov.w	r8, #3
 8006ebc:	fa08 f509 	lsl.w	r5, r8, r9
 8006ec0:	432f      	orrs	r7, r5
 8006ec2:	e786      	b.n	8006dd2 <HAL_GPIO_Init+0xb2>
 8006ec4:	fa0b f509 	lsl.w	r5, fp, r9
 8006ec8:	432f      	orrs	r7, r5
 8006eca:	e782      	b.n	8006dd2 <HAL_GPIO_Init+0xb2>
 8006ecc:	f04f 0802 	mov.w	r8, #2
 8006ed0:	fa08 f509 	lsl.w	r5, r8, r9
 8006ed4:	432f      	orrs	r7, r5
 8006ed6:	e77c      	b.n	8006dd2 <HAL_GPIO_Init+0xb2>
 8006ed8:	40010400 	.word	0x40010400
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	48000400 	.word	0x48000400
 8006ee4:	48000800 	.word	0x48000800
 8006ee8:	48000c00 	.word	0x48000c00
 8006eec:	48001000 	.word	0x48001000

08006ef0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ef0:	6903      	ldr	r3, [r0, #16]
 8006ef2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006ef4:	bf14      	ite	ne
 8006ef6:	2001      	movne	r0, #1
 8006ef8:	2000      	moveq	r0, #0
 8006efa:	4770      	bx	lr

08006efc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006efc:	b10a      	cbz	r2, 8006f02 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006efe:	6181      	str	r1, [r0, #24]
 8006f00:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f02:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop

08006f08 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	f000 8270 	beq.w	80073ee <HAL_RCC_OscConfig+0x4e6>
{
 8006f0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f12:	6803      	ldr	r3, [r0, #0]
 8006f14:	07d9      	lsls	r1, r3, #31
{
 8006f16:	b083      	sub	sp, #12
 8006f18:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f1a:	d54d      	bpl.n	8006fb8 <HAL_RCC_OscConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006f1c:	49ae      	ldr	r1, [pc, #696]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
 8006f1e:	684a      	ldr	r2, [r1, #4]
 8006f20:	f002 020c 	and.w	r2, r2, #12
 8006f24:	2a04      	cmp	r2, #4
 8006f26:	f000 8161 	beq.w	80071ec <HAL_RCC_OscConfig+0x2e4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006f2a:	684a      	ldr	r2, [r1, #4]
 8006f2c:	f002 020c 	and.w	r2, r2, #12
 8006f30:	2a08      	cmp	r2, #8
 8006f32:	f000 8157 	beq.w	80071e4 <HAL_RCC_OscConfig+0x2dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f36:	6863      	ldr	r3, [r4, #4]
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3c:	d017      	beq.n	8006f6e <HAL_RCC_OscConfig+0x66>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 818e 	beq.w	8007260 <HAL_RCC_OscConfig+0x358>
 8006f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f48:	f000 823c 	beq.w	80073c4 <HAL_RCC_OscConfig+0x4bc>
 8006f4c:	4ba2      	ldr	r3, [pc, #648]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f5c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f5e:	4a9e      	ldr	r2, [pc, #632]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
 8006f60:	68a1      	ldr	r1, [r4, #8]
 8006f62:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006f64:	f023 030f 	bic.w	r3, r3, #15
 8006f68:	430b      	orrs	r3, r1
 8006f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f6c:	e00a      	b.n	8006f84 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f6e:	4a9a      	ldr	r2, [pc, #616]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f76:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006f7a:	68a1      	ldr	r1, [r4, #8]
 8006f7c:	f023 030f 	bic.w	r3, r3, #15
 8006f80:	430b      	orrs	r3, r1
 8006f82:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f84:	f7fe f83a 	bl	8004ffc <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f88:	4f93      	ldr	r7, [pc, #588]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8006f8a:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f8c:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f90:	2601      	movs	r6, #1
 8006f92:	e005      	b.n	8006fa0 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f94:	f7fe f832 	bl	8004ffc <HAL_GetTick>
 8006f98:	1b40      	subs	r0, r0, r5
 8006f9a:	2864      	cmp	r0, #100	; 0x64
 8006f9c:	f200 815c 	bhi.w	8007258 <HAL_RCC_OscConfig+0x350>
 8006fa0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	fa98 f3a8 	rbit	r3, r8
 8006faa:	fab3 f383 	clz	r3, r3
 8006fae:	fa06 f303 	lsl.w	r3, r6, r3
 8006fb2:	4213      	tst	r3, r2
 8006fb4:	d0ee      	beq.n	8006f94 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	079f      	lsls	r7, r3, #30
 8006fba:	d53f      	bpl.n	800703c <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006fbc:	4a86      	ldr	r2, [pc, #536]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
 8006fbe:	6851      	ldr	r1, [r2, #4]
 8006fc0:	f011 0f0c 	tst.w	r1, #12
 8006fc4:	f000 80c2 	beq.w	800714c <HAL_RCC_OscConfig+0x244>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006fc8:	6851      	ldr	r1, [r2, #4]
 8006fca:	f001 010c 	and.w	r1, r1, #12
 8006fce:	2908      	cmp	r1, #8
 8006fd0:	f000 80b8 	beq.w	8007144 <HAL_RCC_OscConfig+0x23c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fd4:	6922      	ldr	r2, [r4, #16]
 8006fd6:	2a00      	cmp	r2, #0
 8006fd8:	f000 8197 	beq.w	800730a <HAL_RCC_OscConfig+0x402>
 8006fdc:	2501      	movs	r5, #1
 8006fde:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fe2:	fab3 f383 	clz	r3, r3
 8006fe6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006fea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006fee:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff0:	4f79      	ldr	r7, [pc, #484]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
        __HAL_RCC_HSI_ENABLE();
 8006ff2:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8006ff4:	f7fe f802 	bl	8004ffc <HAL_GetTick>
 8006ff8:	f04f 0802 	mov.w	r8, #2
 8006ffc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ffe:	e005      	b.n	800700c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007000:	f7fd fffc 	bl	8004ffc <HAL_GetTick>
 8007004:	1b80      	subs	r0, r0, r6
 8007006:	2802      	cmp	r0, #2
 8007008:	f200 8126 	bhi.w	8007258 <HAL_RCC_OscConfig+0x350>
 800700c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	fa98 f3a8 	rbit	r3, r8
 8007016:	fab3 f383 	clz	r3, r3
 800701a:	fa05 f303 	lsl.w	r3, r5, r3
 800701e:	4213      	tst	r3, r2
 8007020:	d0ee      	beq.n	8007000 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	22f8      	movs	r2, #248	; 0xf8
 8007026:	fa92 f2a2 	rbit	r2, r2
 800702a:	6963      	ldr	r3, [r4, #20]
 800702c:	fab2 f282 	clz	r2, r2
 8007030:	4093      	lsls	r3, r2
 8007032:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8007036:	4313      	orrs	r3, r2
 8007038:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	071d      	lsls	r5, r3, #28
 800703e:	d420      	bmi.n	8007082 <HAL_RCC_OscConfig+0x17a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007040:	0758      	lsls	r0, r3, #29
 8007042:	d54a      	bpl.n	80070da <HAL_RCC_OscConfig+0x1d2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007044:	4b64      	ldr	r3, [pc, #400]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
 8007046:	69da      	ldr	r2, [r3, #28]
 8007048:	00d1      	lsls	r1, r2, #3
 800704a:	f140 80ba 	bpl.w	80071c2 <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 800704e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007050:	4e62      	ldr	r6, [pc, #392]	; (80071dc <HAL_RCC_OscConfig+0x2d4>)
 8007052:	6833      	ldr	r3, [r6, #0]
 8007054:	05da      	lsls	r2, r3, #23
 8007056:	f140 80ef 	bpl.w	8007238 <HAL_RCC_OscConfig+0x330>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800705a:	68e3      	ldr	r3, [r4, #12]
 800705c:	2b01      	cmp	r3, #1
 800705e:	f000 8178 	beq.w	8007352 <HAL_RCC_OscConfig+0x44a>
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 8123 	beq.w	80072ae <HAL_RCC_OscConfig+0x3a6>
 8007068:	2b05      	cmp	r3, #5
 800706a:	4b5b      	ldr	r3, [pc, #364]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
 800706c:	6a1a      	ldr	r2, [r3, #32]
 800706e:	f000 81b6 	beq.w	80073de <HAL_RCC_OscConfig+0x4d6>
 8007072:	f022 0201 	bic.w	r2, r2, #1
 8007076:	621a      	str	r2, [r3, #32]
 8007078:	6a1a      	ldr	r2, [r3, #32]
 800707a:	f022 0204 	bic.w	r2, r2, #4
 800707e:	621a      	str	r2, [r3, #32]
 8007080:	e16c      	b.n	800735c <HAL_RCC_OscConfig+0x454>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007082:	69a2      	ldr	r2, [r4, #24]
 8007084:	2a00      	cmp	r2, #0
 8007086:	d076      	beq.n	8007176 <HAL_RCC_OscConfig+0x26e>
 8007088:	2601      	movs	r6, #1
 800708a:	fa96 f2a6 	rbit	r2, r6
      __HAL_RCC_LSI_ENABLE();
 800708e:	4b54      	ldr	r3, [pc, #336]	; (80071e0 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007090:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80071d8 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_ENABLE();
 8007094:	fab2 f282 	clz	r2, r2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	2502      	movs	r5, #2
 800709e:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 80070a0:	f7fd ffac 	bl	8004ffc <HAL_GetTick>
 80070a4:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070a6:	e005      	b.n	80070b4 <HAL_RCC_OscConfig+0x1ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070a8:	f7fd ffa8 	bl	8004ffc <HAL_GetTick>
 80070ac:	1bc0      	subs	r0, r0, r7
 80070ae:	2802      	cmp	r0, #2
 80070b0:	f200 80d2 	bhi.w	8007258 <HAL_RCC_OscConfig+0x350>
 80070b4:	fa95 f3a5 	rbit	r3, r5
 80070b8:	fa95 f3a5 	rbit	r3, r5
 80070bc:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070c0:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80070c4:	fa95 f3a5 	rbit	r3, r5
 80070c8:	fab3 f383 	clz	r3, r3
 80070cc:	fa06 f303 	lsl.w	r3, r6, r3
 80070d0:	4213      	tst	r3, r2
 80070d2:	d0e9      	beq.n	80070a8 <HAL_RCC_OscConfig+0x1a0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070d4:	6823      	ldr	r3, [r4, #0]
 80070d6:	0758      	lsls	r0, r3, #29
 80070d8:	d4b4      	bmi.n	8007044 <HAL_RCC_OscConfig+0x13c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070da:	69e0      	ldr	r0, [r4, #28]
 80070dc:	b370      	cbz	r0, 800713c <HAL_RCC_OscConfig+0x234>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070de:	4d3e      	ldr	r5, [pc, #248]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
 80070e0:	686b      	ldr	r3, [r5, #4]
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	f000 815b 	beq.w	80073a2 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070ec:	2802      	cmp	r0, #2
 80070ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070f2:	f000 817e 	beq.w	80073f2 <HAL_RCC_OscConfig+0x4ea>
 80070f6:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070fa:	fab3 f383 	clz	r3, r3
 80070fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007102:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800710c:	f7fd ff76 	bl	8004ffc <HAL_GetTick>
 8007110:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8007114:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007116:	2601      	movs	r6, #1
 8007118:	e005      	b.n	8007126 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800711a:	f7fd ff6f 	bl	8004ffc <HAL_GetTick>
 800711e:	1b00      	subs	r0, r0, r4
 8007120:	2802      	cmp	r0, #2
 8007122:	f200 8099 	bhi.w	8007258 <HAL_RCC_OscConfig+0x350>
 8007126:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800712a:	682a      	ldr	r2, [r5, #0]
 800712c:	fa97 f3a7 	rbit	r3, r7
 8007130:	fab3 f383 	clz	r3, r3
 8007134:	fa06 f303 	lsl.w	r3, r6, r3
 8007138:	4213      	tst	r3, r2
 800713a:	d1ee      	bne.n	800711a <HAL_RCC_OscConfig+0x212>
        }
      }
    }
  }

  return HAL_OK;
 800713c:	2000      	movs	r0, #0
}
 800713e:	b003      	add	sp, #12
 8007140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007144:	6852      	ldr	r2, [r2, #4]
 8007146:	03d6      	lsls	r6, r2, #15
 8007148:	f53f af44 	bmi.w	8006fd4 <HAL_RCC_OscConfig+0xcc>
 800714c:	2202      	movs	r2, #2
 800714e:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007152:	4921      	ldr	r1, [pc, #132]	; (80071d8 <HAL_RCC_OscConfig+0x2d0>)
 8007154:	6808      	ldr	r0, [r1, #0]
 8007156:	fa92 f2a2 	rbit	r2, r2
 800715a:	2101      	movs	r1, #1
 800715c:	fab2 f282 	clz	r2, r2
 8007160:	fa01 f202 	lsl.w	r2, r1, r2
 8007164:	4202      	tst	r2, r0
 8007166:	d056      	beq.n	8007216 <HAL_RCC_OscConfig+0x30e>
 8007168:	6922      	ldr	r2, [r4, #16]
 800716a:	428a      	cmp	r2, r1
 800716c:	d053      	beq.n	8007216 <HAL_RCC_OscConfig+0x30e>
        return HAL_ERROR;
 800716e:	2001      	movs	r0, #1
}
 8007170:	b003      	add	sp, #12
 8007172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007176:	2701      	movs	r7, #1
 8007178:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 800717c:	4b18      	ldr	r3, [pc, #96]	; (80071e0 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800717e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80071d8 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_DISABLE();
 8007182:	fab1 f181 	clz	r1, r1
 8007186:	440b      	add	r3, r1
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	2502      	movs	r5, #2
 800718c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800718e:	f7fd ff35 	bl	8004ffc <HAL_GetTick>
 8007192:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007194:	e004      	b.n	80071a0 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007196:	f7fd ff31 	bl	8004ffc <HAL_GetTick>
 800719a:	1b80      	subs	r0, r0, r6
 800719c:	2802      	cmp	r0, #2
 800719e:	d85b      	bhi.n	8007258 <HAL_RCC_OscConfig+0x350>
 80071a0:	fa95 f3a5 	rbit	r3, r5
 80071a4:	fa95 f3a5 	rbit	r3, r5
 80071a8:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071ac:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80071b0:	fa95 f3a5 	rbit	r3, r5
 80071b4:	fab3 f383 	clz	r3, r3
 80071b8:	fa07 f303 	lsl.w	r3, r7, r3
 80071bc:	4213      	tst	r3, r2
 80071be:	d1ea      	bne.n	8007196 <HAL_RCC_OscConfig+0x28e>
 80071c0:	e788      	b.n	80070d4 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80071c8:	61da      	str	r2, [r3, #28]
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80071d4:	2501      	movs	r5, #1
 80071d6:	e73b      	b.n	8007050 <HAL_RCC_OscConfig+0x148>
 80071d8:	40021000 	.word	0x40021000
 80071dc:	40007000 	.word	0x40007000
 80071e0:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80071e4:	684a      	ldr	r2, [r1, #4]
 80071e6:	03d2      	lsls	r2, r2, #15
 80071e8:	f57f aea5 	bpl.w	8006f36 <HAL_RCC_OscConfig+0x2e>
 80071ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80071f0:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f4:	49a7      	ldr	r1, [pc, #668]	; (8007494 <HAL_RCC_OscConfig+0x58c>)
 80071f6:	6808      	ldr	r0, [r1, #0]
 80071f8:	fa92 f2a2 	rbit	r2, r2
 80071fc:	2101      	movs	r1, #1
 80071fe:	fab2 f282 	clz	r2, r2
 8007202:	fa01 f202 	lsl.w	r2, r1, r2
 8007206:	4202      	tst	r2, r0
 8007208:	f43f aed6 	beq.w	8006fb8 <HAL_RCC_OscConfig+0xb0>
 800720c:	6862      	ldr	r2, [r4, #4]
 800720e:	2a00      	cmp	r2, #0
 8007210:	f47f aed2 	bne.w	8006fb8 <HAL_RCC_OscConfig+0xb0>
 8007214:	e7ab      	b.n	800716e <HAL_RCC_OscConfig+0x266>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007216:	4d9f      	ldr	r5, [pc, #636]	; (8007494 <HAL_RCC_OscConfig+0x58c>)
 8007218:	21f8      	movs	r1, #248	; 0xf8
 800721a:	6828      	ldr	r0, [r5, #0]
 800721c:	fa91 f1a1 	rbit	r1, r1
 8007220:	6962      	ldr	r2, [r4, #20]
 8007222:	fab1 f181 	clz	r1, r1
 8007226:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 800722a:	408a      	lsls	r2, r1
 800722c:	4302      	orrs	r2, r0
 800722e:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007230:	071d      	lsls	r5, r3, #28
 8007232:	f57f af05 	bpl.w	8007040 <HAL_RCC_OscConfig+0x138>
 8007236:	e724      	b.n	8007082 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007238:	6833      	ldr	r3, [r6, #0]
 800723a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007240:	f7fd fedc 	bl	8004ffc <HAL_GetTick>
 8007244:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007246:	6833      	ldr	r3, [r6, #0]
 8007248:	05db      	lsls	r3, r3, #23
 800724a:	f53f af06 	bmi.w	800705a <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800724e:	f7fd fed5 	bl	8004ffc <HAL_GetTick>
 8007252:	1bc0      	subs	r0, r0, r7
 8007254:	2864      	cmp	r0, #100	; 0x64
 8007256:	d9f6      	bls.n	8007246 <HAL_RCC_OscConfig+0x33e>
            return HAL_TIMEOUT;
 8007258:	2003      	movs	r0, #3
}
 800725a:	b003      	add	sp, #12
 800725c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007260:	4d8c      	ldr	r5, [pc, #560]	; (8007494 <HAL_RCC_OscConfig+0x58c>)
 8007262:	682b      	ldr	r3, [r5, #0]
 8007264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007268:	602b      	str	r3, [r5, #0]
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007270:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007272:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007274:	68a2      	ldr	r2, [r4, #8]
 8007276:	f023 030f 	bic.w	r3, r3, #15
 800727a:	4313      	orrs	r3, r2
 800727c:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 800727e:	f7fd febd 	bl	8004ffc <HAL_GetTick>
 8007282:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8007286:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007288:	2701      	movs	r7, #1
 800728a:	e004      	b.n	8007296 <HAL_RCC_OscConfig+0x38e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800728c:	f7fd feb6 	bl	8004ffc <HAL_GetTick>
 8007290:	1b80      	subs	r0, r0, r6
 8007292:	2864      	cmp	r0, #100	; 0x64
 8007294:	d8e0      	bhi.n	8007258 <HAL_RCC_OscConfig+0x350>
 8007296:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800729a:	682a      	ldr	r2, [r5, #0]
 800729c:	fa98 f3a8 	rbit	r3, r8
 80072a0:	fab3 f383 	clz	r3, r3
 80072a4:	fa07 f303 	lsl.w	r3, r7, r3
 80072a8:	4213      	tst	r3, r2
 80072aa:	d1ef      	bne.n	800728c <HAL_RCC_OscConfig+0x384>
 80072ac:	e683      	b.n	8006fb6 <HAL_RCC_OscConfig+0xae>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072ae:	4e79      	ldr	r6, [pc, #484]	; (8007494 <HAL_RCC_OscConfig+0x58c>)
 80072b0:	6a33      	ldr	r3, [r6, #32]
 80072b2:	f023 0301 	bic.w	r3, r3, #1
 80072b6:	6233      	str	r3, [r6, #32]
 80072b8:	6a33      	ldr	r3, [r6, #32]
 80072ba:	f023 0304 	bic.w	r3, r3, #4
 80072be:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80072c0:	f7fd fe9c 	bl	8004ffc <HAL_GetTick>
 80072c4:	f04f 0902 	mov.w	r9, #2
 80072c8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ca:	f04f 0801 	mov.w	r8, #1
 80072ce:	e006      	b.n	80072de <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072d0:	f7fd fe94 	bl	8004ffc <HAL_GetTick>
 80072d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80072d8:	1bc0      	subs	r0, r0, r7
 80072da:	4298      	cmp	r0, r3
 80072dc:	d8bc      	bhi.n	8007258 <HAL_RCC_OscConfig+0x350>
 80072de:	fa99 f3a9 	rbit	r3, r9
 80072e2:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072e6:	6a32      	ldr	r2, [r6, #32]
 80072e8:	fa99 f3a9 	rbit	r3, r9
 80072ec:	fab3 f383 	clz	r3, r3
 80072f0:	fa08 f303 	lsl.w	r3, r8, r3
 80072f4:	4213      	tst	r3, r2
 80072f6:	d1eb      	bne.n	80072d0 <HAL_RCC_OscConfig+0x3c8>
    if(pwrclkchanged == SET)
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	f43f aeee 	beq.w	80070da <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80072fe:	4a65      	ldr	r2, [pc, #404]	; (8007494 <HAL_RCC_OscConfig+0x58c>)
 8007300:	69d3      	ldr	r3, [r2, #28]
 8007302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007306:	61d3      	str	r3, [r2, #28]
 8007308:	e6e7      	b.n	80070da <HAL_RCC_OscConfig+0x1d2>
 800730a:	2601      	movs	r6, #1
 800730c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8007310:	fab3 f383 	clz	r3, r3
 8007314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800731c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800731e:	4f5d      	ldr	r7, [pc, #372]	; (8007494 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_HSI_DISABLE();
 8007320:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007322:	f7fd fe6b 	bl	8004ffc <HAL_GetTick>
 8007326:	f04f 0802 	mov.w	r8, #2
 800732a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800732c:	e004      	b.n	8007338 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800732e:	f7fd fe65 	bl	8004ffc <HAL_GetTick>
 8007332:	1b40      	subs	r0, r0, r5
 8007334:	2802      	cmp	r0, #2
 8007336:	d88f      	bhi.n	8007258 <HAL_RCC_OscConfig+0x350>
 8007338:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	fa98 f3a8 	rbit	r3, r8
 8007342:	fab3 f383 	clz	r3, r3
 8007346:	fa06 f303 	lsl.w	r3, r6, r3
 800734a:	4213      	tst	r3, r2
 800734c:	d1ef      	bne.n	800732e <HAL_RCC_OscConfig+0x426>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	e674      	b.n	800703c <HAL_RCC_OscConfig+0x134>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007352:	4a50      	ldr	r2, [pc, #320]	; (8007494 <HAL_RCC_OscConfig+0x58c>)
 8007354:	6a13      	ldr	r3, [r2, #32]
 8007356:	f043 0301 	orr.w	r3, r3, #1
 800735a:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800735c:	f7fd fe4e 	bl	8004ffc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007360:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8007494 <HAL_RCC_OscConfig+0x58c>
      tickstart = HAL_GetTick();
 8007364:	4606      	mov	r6, r0
 8007366:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800736a:	2701      	movs	r7, #1
 800736c:	e007      	b.n	800737e <HAL_RCC_OscConfig+0x476>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800736e:	f7fd fe45 	bl	8004ffc <HAL_GetTick>
 8007372:	f241 3388 	movw	r3, #5000	; 0x1388
 8007376:	1b80      	subs	r0, r0, r6
 8007378:	4298      	cmp	r0, r3
 800737a:	f63f af6d 	bhi.w	8007258 <HAL_RCC_OscConfig+0x350>
 800737e:	fa99 f3a9 	rbit	r3, r9
 8007382:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007386:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800738a:	fa99 f3a9 	rbit	r3, r9
 800738e:	fab3 f383 	clz	r3, r3
 8007392:	fa07 f303 	lsl.w	r3, r7, r3
 8007396:	4213      	tst	r3, r2
 8007398:	d0e9      	beq.n	800736e <HAL_RCC_OscConfig+0x466>
    if(pwrclkchanged == SET)
 800739a:	2d00      	cmp	r5, #0
 800739c:	f43f ae9d 	beq.w	80070da <HAL_RCC_OscConfig+0x1d2>
 80073a0:	e7ad      	b.n	80072fe <HAL_RCC_OscConfig+0x3f6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073a2:	2801      	cmp	r0, #1
 80073a4:	f43f aecb 	beq.w	800713e <HAL_RCC_OscConfig+0x236>
        pll_config = RCC->CFGR;
 80073a8:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80073aa:	6a22      	ldr	r2, [r4, #32]
 80073ac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80073b0:	4291      	cmp	r1, r2
 80073b2:	f47f aedc 	bne.w	800716e <HAL_RCC_OscConfig+0x266>
 80073b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80073b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 80073bc:	1a18      	subs	r0, r3, r0
 80073be:	bf18      	it	ne
 80073c0:	2001      	movne	r0, #1
 80073c2:	e6bc      	b.n	800713e <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80073c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073c8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	e5bf      	b.n	8006f5e <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073de:	f042 0204 	orr.w	r2, r2, #4
 80073e2:	621a      	str	r2, [r3, #32]
 80073e4:	6a1a      	ldr	r2, [r3, #32]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	621a      	str	r2, [r3, #32]
 80073ec:	e7b6      	b.n	800735c <HAL_RCC_OscConfig+0x454>
    return HAL_ERROR;
 80073ee:	2001      	movs	r0, #1
}
 80073f0:	4770      	bx	lr
 80073f2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80073f6:	fab3 f383 	clz	r3, r3
 80073fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80073fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007408:	f7fd fdf8 	bl	8004ffc <HAL_GetTick>
 800740c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8007410:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007412:	2701      	movs	r7, #1
 8007414:	e005      	b.n	8007422 <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007416:	f7fd fdf1 	bl	8004ffc <HAL_GetTick>
 800741a:	1b80      	subs	r0, r0, r6
 800741c:	2802      	cmp	r0, #2
 800741e:	f63f af1b 	bhi.w	8007258 <HAL_RCC_OscConfig+0x350>
 8007422:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007426:	682a      	ldr	r2, [r5, #0]
 8007428:	fa98 f3a8 	rbit	r3, r8
 800742c:	fab3 f383 	clz	r3, r3
 8007430:	fa07 f303 	lsl.w	r3, r7, r3
 8007434:	4213      	tst	r3, r2
 8007436:	d1ee      	bne.n	8007416 <HAL_RCC_OscConfig+0x50e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007438:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 800743c:	686a      	ldr	r2, [r5, #4]
 800743e:	430b      	orrs	r3, r1
 8007440:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8007444:	4313      	orrs	r3, r2
 8007446:	606b      	str	r3, [r5, #4]
 8007448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800744c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8007450:	fab3 f383 	clz	r3, r3
 8007454:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007458:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800745c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800745e:	4d0d      	ldr	r5, [pc, #52]	; (8007494 <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_PLL_ENABLE();
 8007460:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8007462:	f7fd fdcb 	bl	8004ffc <HAL_GetTick>
 8007466:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800746a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800746c:	2601      	movs	r6, #1
 800746e:	e005      	b.n	800747c <HAL_RCC_OscConfig+0x574>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007470:	f7fd fdc4 	bl	8004ffc <HAL_GetTick>
 8007474:	1b00      	subs	r0, r0, r4
 8007476:	2802      	cmp	r0, #2
 8007478:	f63f aeee 	bhi.w	8007258 <HAL_RCC_OscConfig+0x350>
 800747c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007480:	682a      	ldr	r2, [r5, #0]
 8007482:	fa97 f3a7 	rbit	r3, r7
 8007486:	fab3 f383 	clz	r3, r3
 800748a:	fa06 f303 	lsl.w	r3, r6, r3
 800748e:	4213      	tst	r3, r2
 8007490:	d0ee      	beq.n	8007470 <HAL_RCC_OscConfig+0x568>
 8007492:	e653      	b.n	800713c <HAL_RCC_OscConfig+0x234>
 8007494:	40021000 	.word	0x40021000

08007498 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007498:	2800      	cmp	r0, #0
 800749a:	f000 80b2 	beq.w	8007602 <HAL_RCC_ClockConfig+0x16a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800749e:	4a65      	ldr	r2, [pc, #404]	; (8007634 <HAL_RCC_ClockConfig+0x19c>)
 80074a0:	6813      	ldr	r3, [r2, #0]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	428b      	cmp	r3, r1
{
 80074a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ac:	460d      	mov	r5, r1
 80074ae:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074b0:	d20c      	bcs.n	80074cc <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	f023 0307 	bic.w	r3, r3, #7
 80074b8:	430b      	orrs	r3, r1
 80074ba:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074bc:	6813      	ldr	r3, [r2, #0]
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	428b      	cmp	r3, r1
 80074c4:	d002      	beq.n	80074cc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80074c6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 80074c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	079f      	lsls	r7, r3, #30
 80074d0:	d506      	bpl.n	80074e0 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074d2:	4959      	ldr	r1, [pc, #356]	; (8007638 <HAL_RCC_ClockConfig+0x1a0>)
 80074d4:	68a0      	ldr	r0, [r4, #8]
 80074d6:	684a      	ldr	r2, [r1, #4]
 80074d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80074dc:	4302      	orrs	r2, r0
 80074de:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074e0:	07de      	lsls	r6, r3, #31
 80074e2:	d52d      	bpl.n	8007540 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074e4:	6862      	ldr	r2, [r4, #4]
 80074e6:	2a01      	cmp	r2, #1
 80074e8:	f000 808d 	beq.w	8007606 <HAL_RCC_ClockConfig+0x16e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074ec:	2a02      	cmp	r2, #2
 80074ee:	bf0c      	ite	eq
 80074f0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80074f4:	2302      	movne	r3, #2
 80074f6:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074fa:	494f      	ldr	r1, [pc, #316]	; (8007638 <HAL_RCC_ClockConfig+0x1a0>)
 80074fc:	6808      	ldr	r0, [r1, #0]
 80074fe:	fa93 f3a3 	rbit	r3, r3
 8007502:	2101      	movs	r1, #1
 8007504:	fab3 f383 	clz	r3, r3
 8007508:	fa01 f303 	lsl.w	r3, r1, r3
 800750c:	4203      	tst	r3, r0
 800750e:	d0da      	beq.n	80074c6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007510:	4e49      	ldr	r6, [pc, #292]	; (8007638 <HAL_RCC_ClockConfig+0x1a0>)
 8007512:	6873      	ldr	r3, [r6, #4]
 8007514:	f023 0303 	bic.w	r3, r3, #3
 8007518:	4313      	orrs	r3, r2
 800751a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800751c:	f7fd fd6e 	bl	8004ffc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007520:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8007524:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007526:	e004      	b.n	8007532 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007528:	f7fd fd68 	bl	8004ffc <HAL_GetTick>
 800752c:	1bc0      	subs	r0, r0, r7
 800752e:	4540      	cmp	r0, r8
 8007530:	d879      	bhi.n	8007626 <HAL_RCC_ClockConfig+0x18e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007532:	6873      	ldr	r3, [r6, #4]
 8007534:	6862      	ldr	r2, [r4, #4]
 8007536:	f003 030c 	and.w	r3, r3, #12
 800753a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800753e:	d1f3      	bne.n	8007528 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007540:	4a3c      	ldr	r2, [pc, #240]	; (8007634 <HAL_RCC_ClockConfig+0x19c>)
 8007542:	6813      	ldr	r3, [r2, #0]
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	42ab      	cmp	r3, r5
 800754a:	d909      	bls.n	8007560 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800754c:	6813      	ldr	r3, [r2, #0]
 800754e:	f023 0307 	bic.w	r3, r3, #7
 8007552:	432b      	orrs	r3, r5
 8007554:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007556:	6813      	ldr	r3, [r2, #0]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	42ab      	cmp	r3, r5
 800755e:	d1b2      	bne.n	80074c6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	0758      	lsls	r0, r3, #29
 8007564:	d506      	bpl.n	8007574 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007566:	4934      	ldr	r1, [pc, #208]	; (8007638 <HAL_RCC_ClockConfig+0x1a0>)
 8007568:	68e0      	ldr	r0, [r4, #12]
 800756a:	684a      	ldr	r2, [r1, #4]
 800756c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007570:	4302      	orrs	r2, r0
 8007572:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007574:	0719      	lsls	r1, r3, #28
 8007576:	d507      	bpl.n	8007588 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007578:	4a2f      	ldr	r2, [pc, #188]	; (8007638 <HAL_RCC_ClockConfig+0x1a0>)
 800757a:	6921      	ldr	r1, [r4, #16]
 800757c:	6853      	ldr	r3, [r2, #4]
 800757e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007582:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007586:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8007588:	492b      	ldr	r1, [pc, #172]	; (8007638 <HAL_RCC_ClockConfig+0x1a0>)
 800758a:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800758c:	f002 030c 	and.w	r3, r2, #12
 8007590:	2b08      	cmp	r3, #8
 8007592:	d017      	beq.n	80075c4 <HAL_RCC_ClockConfig+0x12c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007594:	4929      	ldr	r1, [pc, #164]	; (800763c <HAL_RCC_ClockConfig+0x1a4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007596:	4b28      	ldr	r3, [pc, #160]	; (8007638 <HAL_RCC_ClockConfig+0x1a0>)
 8007598:	22f0      	movs	r2, #240	; 0xf0
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	fa92 f2a2 	rbit	r2, r2
 80075a0:	fab2 f282 	clz	r2, r2
 80075a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075a8:	40d3      	lsrs	r3, r2
 80075aa:	4a25      	ldr	r2, [pc, #148]	; (8007640 <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 80075ac:	4825      	ldr	r0, [pc, #148]	; (8007644 <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80075ae:	5cd3      	ldrb	r3, [r2, r3]
 80075b0:	4a25      	ldr	r2, [pc, #148]	; (8007648 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 80075b2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80075b4:	fa21 f303 	lsr.w	r3, r1, r3
 80075b8:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80075ba:	f7fd fcdd 	bl	8004f78 <HAL_InitTick>
  return HAL_OK;
 80075be:	2000      	movs	r0, #0
}
 80075c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80075c8:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80075cc:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 80075d0:	fab3 f383 	clz	r3, r3
 80075d4:	4c1d      	ldr	r4, [pc, #116]	; (800764c <HAL_RCC_ClockConfig+0x1b4>)
 80075d6:	fa20 f303 	lsr.w	r3, r0, r3
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80075da:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80075dc:	5ce3      	ldrb	r3, [r4, r3]
 80075de:	210f      	movs	r1, #15
 80075e0:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80075e4:	03d2      	lsls	r2, r2, #15
 80075e6:	d520      	bpl.n	800762a <HAL_RCC_ClockConfig+0x192>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80075e8:	fab1 f181 	clz	r1, r1
 80075ec:	f000 000f 	and.w	r0, r0, #15
 80075f0:	4c17      	ldr	r4, [pc, #92]	; (8007650 <HAL_RCC_ClockConfig+0x1b8>)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80075f2:	4a12      	ldr	r2, [pc, #72]	; (800763c <HAL_RCC_ClockConfig+0x1a4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80075f4:	40c8      	lsrs	r0, r1
 80075f6:	5c21      	ldrb	r1, [r4, r0]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80075f8:	fbb2 f2f1 	udiv	r2, r2, r1
 80075fc:	fb03 f102 	mul.w	r1, r3, r2
 8007600:	e7c9      	b.n	8007596 <HAL_RCC_ClockConfig+0xfe>
    return HAL_ERROR;
 8007602:	2001      	movs	r0, #1
}
 8007604:	4770      	bx	lr
 8007606:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800760a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800760e:	490a      	ldr	r1, [pc, #40]	; (8007638 <HAL_RCC_ClockConfig+0x1a0>)
 8007610:	6809      	ldr	r1, [r1, #0]
 8007612:	fa93 f3a3 	rbit	r3, r3
 8007616:	fab3 f383 	clz	r3, r3
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	420b      	tst	r3, r1
 8007620:	f47f af76 	bne.w	8007510 <HAL_RCC_ClockConfig+0x78>
 8007624:	e74f      	b.n	80074c6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8007626:	2003      	movs	r0, #3
 8007628:	e74e      	b.n	80074c8 <HAL_RCC_ClockConfig+0x30>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800762a:	490a      	ldr	r1, [pc, #40]	; (8007654 <HAL_RCC_ClockConfig+0x1bc>)
 800762c:	fb03 f101 	mul.w	r1, r3, r1
 8007630:	e7b1      	b.n	8007596 <HAL_RCC_ClockConfig+0xfe>
 8007632:	bf00      	nop
 8007634:	40022000 	.word	0x40022000
 8007638:	40021000 	.word	0x40021000
 800763c:	007a1200 	.word	0x007a1200
 8007640:	0800dbe4 	.word	0x0800dbe4
 8007644:	20000010 	.word	0x20000010
 8007648:	20000008 	.word	0x20000008
 800764c:	0800dbfc 	.word	0x0800dbfc
 8007650:	0800dc0c 	.word	0x0800dc0c
 8007654:	003d0900 	.word	0x003d0900

08007658 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8007658:	4917      	ldr	r1, [pc, #92]	; (80076b8 <HAL_RCC_GetSysClockFreq+0x60>)
 800765a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800765c:	f003 020c 	and.w	r2, r3, #12
 8007660:	2a08      	cmp	r2, #8
 8007662:	d001      	beq.n	8007668 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8007664:	4815      	ldr	r0, [pc, #84]	; (80076bc <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007666:	4770      	bx	lr
{
 8007668:	b410      	push	{r4}
 800766a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800766e:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007672:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8007676:	fab2 f282 	clz	r2, r2
 800767a:	4c11      	ldr	r4, [pc, #68]	; (80076c0 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800767c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800767e:	fa20 f202 	lsr.w	r2, r0, r2
 8007682:	5ca0      	ldrb	r0, [r4, r2]
 8007684:	220f      	movs	r2, #15
 8007686:	fa92 f2a2 	rbit	r2, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800768a:	03db      	lsls	r3, r3, #15
 800768c:	d50e      	bpl.n	80076ac <HAL_RCC_GetSysClockFreq+0x54>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800768e:	fab2 f282 	clz	r2, r2
 8007692:	f001 010f 	and.w	r1, r1, #15
 8007696:	4c0b      	ldr	r4, [pc, #44]	; (80076c4 <HAL_RCC_GetSysClockFreq+0x6c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007698:	4b08      	ldr	r3, [pc, #32]	; (80076bc <HAL_RCC_GetSysClockFreq+0x64>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800769a:	40d1      	lsrs	r1, r2
 800769c:	5c62      	ldrb	r2, [r4, r1]
}
 800769e:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80076a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80076a6:	fb03 f000 	mul.w	r0, r3, r0
}
 80076aa:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80076ae:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80076b2:	fb03 f000 	mul.w	r0, r3, r0
}
 80076b6:	4770      	bx	lr
 80076b8:	40021000 	.word	0x40021000
 80076bc:	007a1200 	.word	0x007a1200
 80076c0:	0800dbfc 	.word	0x0800dbfc
 80076c4:	0800dc0c 	.word	0x0800dc0c
 80076c8:	003d0900 	.word	0x003d0900

080076cc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80076cc:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	fa92 f2a2 	rbit	r2, r2
 80076d8:	fab2 f282 	clz	r2, r2
 80076dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076e0:	4904      	ldr	r1, [pc, #16]	; (80076f4 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80076e2:	4805      	ldr	r0, [pc, #20]	; (80076f8 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80076e4:	40d3      	lsrs	r3, r2
 80076e6:	6800      	ldr	r0, [r0, #0]
 80076e8:	5ccb      	ldrb	r3, [r1, r3]
}    
 80076ea:	40d8      	lsrs	r0, r3
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40021000 	.word	0x40021000
 80076f4:	0800dbf4 	.word	0x0800dbf4
 80076f8:	20000008 	.word	0x20000008

080076fc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80076fc:	4b08      	ldr	r3, [pc, #32]	; (8007720 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	fa92 f2a2 	rbit	r2, r2
 8007708:	fab2 f282 	clz	r2, r2
 800770c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007710:	4904      	ldr	r1, [pc, #16]	; (8007724 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8007712:	4805      	ldr	r0, [pc, #20]	; (8007728 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007714:	40d3      	lsrs	r3, r2
 8007716:	6800      	ldr	r0, [r0, #0]
 8007718:	5ccb      	ldrb	r3, [r1, r3]
} 
 800771a:	40d8      	lsrs	r0, r3
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40021000 	.word	0x40021000
 8007724:	0800dbf4 	.word	0x0800dbf4
 8007728:	20000008 	.word	0x20000008

0800772c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800772c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007730:	6803      	ldr	r3, [r0, #0]
 8007732:	03dd      	lsls	r5, r3, #15
{
 8007734:	b083      	sub	sp, #12
 8007736:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007738:	d540      	bpl.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800773a:	4b7f      	ldr	r3, [pc, #508]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800773c:	69da      	ldr	r2, [r3, #28]
 800773e:	00d0      	lsls	r0, r2, #3
 8007740:	f140 80ba 	bpl.w	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007744:	4d7d      	ldr	r5, [pc, #500]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007746:	682b      	ldr	r3, [r5, #0]
 8007748:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 800774a:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800774e:	f140 80c3 	bpl.w	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007752:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8007756:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800775a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800775e:	d020      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007760:	6861      	ldr	r1, [r4, #4]
 8007762:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8007766:	429a      	cmp	r2, r3
 8007768:	d01c      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800776a:	f8d8 1020 	ldr.w	r1, [r8, #32]
 800776e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007772:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8007776:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800777a:	4f71      	ldr	r7, [pc, #452]	; (8007940 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800777c:	fab2 f282 	clz	r2, r2
 8007780:	443a      	add	r2, r7
 8007782:	0092      	lsls	r2, r2, #2
 8007784:	2501      	movs	r5, #1
 8007786:	6015      	str	r5, [r2, #0]
 8007788:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800778c:	fab3 f383 	clz	r3, r3
 8007790:	443b      	add	r3, r7
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007798:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 800779a:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800779e:	f100 80af 	bmi.w	8007900 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80077a2:	6861      	ldr	r1, [r4, #4]
 80077a4:	4a64      	ldr	r2, [pc, #400]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80077a6:	6a13      	ldr	r3, [r2, #32]
 80077a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ac:	430b      	orrs	r3, r1
 80077ae:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80077b0:	b11e      	cbz	r6, 80077ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077b2:	69d3      	ldr	r3, [r2, #28]
 80077b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077b8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	07df      	lsls	r7, r3, #31
 80077be:	d506      	bpl.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077c0:	495d      	ldr	r1, [pc, #372]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80077c2:	68a0      	ldr	r0, [r4, #8]
 80077c4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80077c6:	f022 0203 	bic.w	r2, r2, #3
 80077ca:	4302      	orrs	r2, r0
 80077cc:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077ce:	079e      	lsls	r6, r3, #30
 80077d0:	d506      	bpl.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077d2:	4959      	ldr	r1, [pc, #356]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80077d4:	68e0      	ldr	r0, [r4, #12]
 80077d6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80077d8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80077dc:	4302      	orrs	r2, r0
 80077de:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077e0:	075d      	lsls	r5, r3, #29
 80077e2:	d506      	bpl.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077e4:	4954      	ldr	r1, [pc, #336]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80077e6:	6920      	ldr	r0, [r4, #16]
 80077e8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80077ea:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80077ee:	4302      	orrs	r2, r0
 80077f0:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077f2:	0698      	lsls	r0, r3, #26
 80077f4:	d506      	bpl.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80077f6:	4950      	ldr	r1, [pc, #320]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80077f8:	69e0      	ldr	r0, [r4, #28]
 80077fa:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80077fc:	f022 0210 	bic.w	r2, r2, #16
 8007800:	4302      	orrs	r2, r0
 8007802:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007804:	0399      	lsls	r1, r3, #14
 8007806:	d506      	bpl.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007808:	494b      	ldr	r1, [pc, #300]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800780a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800780c:	684a      	ldr	r2, [r1, #4]
 800780e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8007812:	4302      	orrs	r2, r0
 8007814:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007816:	065a      	lsls	r2, r3, #25
 8007818:	d506      	bpl.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800781a:	4947      	ldr	r1, [pc, #284]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800781c:	6a20      	ldr	r0, [r4, #32]
 800781e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007820:	f022 0220 	bic.w	r2, r2, #32
 8007824:	4302      	orrs	r2, r0
 8007826:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007828:	071f      	lsls	r7, r3, #28
 800782a:	d506      	bpl.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800782c:	4942      	ldr	r1, [pc, #264]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800782e:	6960      	ldr	r0, [r4, #20]
 8007830:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007832:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007836:	4302      	orrs	r2, r0
 8007838:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800783a:	06de      	lsls	r6, r3, #27
 800783c:	d506      	bpl.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800783e:	493e      	ldr	r1, [pc, #248]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007840:	69a0      	ldr	r0, [r4, #24]
 8007842:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007844:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007848:	4302      	orrs	r2, r0
 800784a:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800784c:	059d      	lsls	r5, r3, #22
 800784e:	d506      	bpl.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007850:	4939      	ldr	r1, [pc, #228]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007852:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007854:	684a      	ldr	r2, [r1, #4]
 8007856:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800785a:	4302      	orrs	r2, r0
 800785c:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800785e:	0618      	lsls	r0, r3, #24
 8007860:	d506      	bpl.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007862:	4935      	ldr	r1, [pc, #212]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007864:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007866:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007868:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800786c:	4302      	orrs	r2, r0
 800786e:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007870:	05d9      	lsls	r1, r3, #23
 8007872:	d506      	bpl.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007874:	4930      	ldr	r1, [pc, #192]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007876:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007878:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800787a:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 800787e:	4302      	orrs	r2, r0
 8007880:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007882:	04da      	lsls	r2, r3, #19
 8007884:	d506      	bpl.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007886:	492c      	ldr	r1, [pc, #176]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007888:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800788a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800788c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007890:	4302      	orrs	r2, r0
 8007892:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007894:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8007898:	d103      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800789a:	4618      	mov	r0, r3
}
 800789c:	b003      	add	sp, #12
 800789e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80078a2:	4a25      	ldr	r2, [pc, #148]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80078a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80078a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 80078ac:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80078ae:	430b      	orrs	r3, r1
 80078b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80078b2:	b003      	add	sp, #12
 80078b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80078b8:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ba:	4d20      	ldr	r5, [pc, #128]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x210>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80078bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80078c0:	61da      	str	r2, [r3, #28]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c8:	9301      	str	r3, [sp, #4]
 80078ca:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 80078d0:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d4:	f53f af3d 	bmi.w	8007752 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078de:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80078e0:	f7fd fb8c 	bl	8004ffc <HAL_GetTick>
 80078e4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	05da      	lsls	r2, r3, #23
 80078ea:	f53f af32 	bmi.w	8007752 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078ee:	f7fd fb85 	bl	8004ffc <HAL_GetTick>
 80078f2:	1bc0      	subs	r0, r0, r7
 80078f4:	2864      	cmp	r0, #100	; 0x64
 80078f6:	d9f6      	bls.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 80078f8:	2003      	movs	r0, #3
}
 80078fa:	b003      	add	sp, #12
 80078fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8007900:	f7fd fb7c 	bl	8004ffc <HAL_GetTick>
 8007904:	f04f 0902 	mov.w	r9, #2
 8007908:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800790a:	e006      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800790c:	f7fd fb76 	bl	8004ffc <HAL_GetTick>
 8007910:	f241 3388 	movw	r3, #5000	; 0x1388
 8007914:	1bc0      	subs	r0, r0, r7
 8007916:	4298      	cmp	r0, r3
 8007918:	d8ee      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800791a:	fa99 f3a9 	rbit	r3, r9
 800791e:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007922:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8007926:	fa99 f3a9 	rbit	r3, r9
 800792a:	fab3 f383 	clz	r3, r3
 800792e:	fa05 f303 	lsl.w	r3, r5, r3
 8007932:	4213      	tst	r3, r2
 8007934:	d0ea      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007936:	e734      	b.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007938:	40021000 	.word	0x40021000
 800793c:	40007000 	.word	0x40007000
 8007940:	10908100 	.word	0x10908100

08007944 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007944:	2800      	cmp	r0, #0
 8007946:	d077      	beq.n	8007a38 <HAL_SPI_Init+0xf4>
{
 8007948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800794c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800794e:	4604      	mov	r4, r0
 8007950:	2e00      	cmp	r6, #0
 8007952:	d058      	beq.n	8007a06 <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007954:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007956:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800795a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800795e:	2200      	movs	r2, #0
 8007960:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007962:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007966:	2b00      	cmp	r3, #0
 8007968:	d059      	beq.n	8007a1e <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800796a:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800796c:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800796e:	2302      	movs	r3, #2
 8007970:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007974:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007976:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800797a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797e:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007980:	d947      	bls.n	8007a12 <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007982:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 8007986:	d159      	bne.n	8007a3c <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007988:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800798a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800798c:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007990:	6862      	ldr	r2, [r4, #4]
 8007992:	68a3      	ldr	r3, [r4, #8]
 8007994:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007998:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800799c:	431a      	orrs	r2, r3
 800799e:	6923      	ldr	r3, [r4, #16]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	4313      	orrs	r3, r2
 80079a6:	6962      	ldr	r2, [r4, #20]
 80079a8:	f002 0201 	and.w	r2, r2, #1
 80079ac:	431a      	orrs	r2, r3
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079b0:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 80079b4:	f003 0308 	and.w	r3, r3, #8
 80079b8:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079bc:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079be:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079c2:	f003 0838 	and.w	r8, r3, #56	; 0x38
 80079c6:	69a6      	ldr	r6, [r4, #24]
 80079c8:	6a23      	ldr	r3, [r4, #32]
 80079ca:	f003 0780 	and.w	r7, r3, #128	; 0x80
 80079ce:	f406 7300 	and.w	r3, r6, #512	; 0x200
 80079d2:	4313      	orrs	r3, r2
 80079d4:	ea43 0308 	orr.w	r3, r3, r8
 80079d8:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079da:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079dc:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079de:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80079e2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079e4:	ea4e 0306 	orr.w	r3, lr, r6
 80079e8:	ea43 030c 	orr.w	r3, r3, ip
 80079ec:	4303      	orrs	r3, r0
 80079ee:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079f0:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079f2:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80079f8:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079fa:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079fc:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80079fe:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8007a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a06:	6843      	ldr	r3, [r0, #4]
 8007a08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a0c:	d0a5      	beq.n	800795a <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a0e:	61c6      	str	r6, [r0, #28]
 8007a10:	e7a3      	b.n	800795a <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007a12:	d00b      	beq.n	8007a2c <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a18:	2500      	movs	r5, #0
 8007a1a:	62a5      	str	r5, [r4, #40]	; 0x28
 8007a1c:	e7b8      	b.n	8007990 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8007a1e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8007a22:	4620      	mov	r0, r4
 8007a24:	f7fc fb26 	bl	8004074 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a2a:	e79e      	b.n	800796a <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a2c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007a2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a32:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007a36:	e7ab      	b.n	8007990 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8007a38:	2001      	movs	r0, #1
}
 8007a3a:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e7eb      	b.n	8007a18 <HAL_SPI_Init+0xd4>

08007a40 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a40:	6a03      	ldr	r3, [r0, #32]
 8007a42:	f023 0301 	bic.w	r3, r3, #1
 8007a46:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a48:	6a03      	ldr	r3, [r0, #32]
{
 8007a4a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a4e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007a56:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007a5a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a5c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007a5e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8007a62:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a64:	4d13      	ldr	r5, [pc, #76]	; (8007ab4 <TIM_OC1_SetConfig+0x74>)
 8007a66:	42a8      	cmp	r0, r5
 8007a68:	d00f      	beq.n	8007a8a <TIM_OC1_SetConfig+0x4a>
 8007a6a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007a6e:	42a8      	cmp	r0, r5
 8007a70:	d00b      	beq.n	8007a8a <TIM_OC1_SetConfig+0x4a>
 8007a72:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007a76:	42a8      	cmp	r0, r5
 8007a78:	d007      	beq.n	8007a8a <TIM_OC1_SetConfig+0x4a>
 8007a7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a7e:	42a8      	cmp	r0, r5
 8007a80:	d003      	beq.n	8007a8a <TIM_OC1_SetConfig+0x4a>
 8007a82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a86:	42a8      	cmp	r0, r5
 8007a88:	d10d      	bne.n	8007aa6 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a8a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a8c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007a90:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a92:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a96:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a9a:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a9e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007aa2:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007aa6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007aa8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007aaa:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007aac:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8007aae:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8007ab0:	6203      	str	r3, [r0, #32]
}
 8007ab2:	4770      	bx	lr
 8007ab4:	40012c00 	.word	0x40012c00

08007ab8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ab8:	6a03      	ldr	r3, [r0, #32]
 8007aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007abe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac0:	6a03      	ldr	r3, [r0, #32]
{
 8007ac2:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ac4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ac6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ac8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007aca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ace:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007ad2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ad4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8007ad6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ada:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ade:	4d15      	ldr	r5, [pc, #84]	; (8007b34 <TIM_OC3_SetConfig+0x7c>)
 8007ae0:	42a8      	cmp	r0, r5
 8007ae2:	d010      	beq.n	8007b06 <TIM_OC3_SetConfig+0x4e>
 8007ae4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007ae8:	42a8      	cmp	r0, r5
 8007aea:	d00c      	beq.n	8007b06 <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aec:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007af0:	42a8      	cmp	r0, r5
 8007af2:	d00f      	beq.n	8007b14 <TIM_OC3_SetConfig+0x5c>
 8007af4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007af8:	42a8      	cmp	r0, r5
 8007afa:	d00b      	beq.n	8007b14 <TIM_OC3_SetConfig+0x5c>
 8007afc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007b00:	42a8      	cmp	r0, r5
 8007b02:	d10f      	bne.n	8007b24 <TIM_OC3_SetConfig+0x6c>
 8007b04:	e006      	b.n	8007b14 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b06:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b0c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b14:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b18:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b1c:	ea46 0c05 	orr.w	ip, r6, r5
 8007b20:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b24:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007b26:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007b28:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007b2a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8007b2c:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007b2e:	6203      	str	r3, [r0, #32]
}
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	40012c00 	.word	0x40012c00

08007b38 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007b38:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d122      	bne.n	8007b86 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b40:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b42:	4917      	ldr	r1, [pc, #92]	; (8007ba0 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007b44:	2202      	movs	r2, #2
 8007b46:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b4a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b4e:	f042 0201 	orr.w	r2, r2, #1
 8007b52:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b54:	d019      	beq.n	8007b8a <HAL_TIM_Base_Start_IT+0x52>
 8007b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5a:	d016      	beq.n	8007b8a <HAL_TIM_Base_Start_IT+0x52>
 8007b5c:	4a11      	ldr	r2, [pc, #68]	; (8007ba4 <HAL_TIM_Base_Start_IT+0x6c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d013      	beq.n	8007b8a <HAL_TIM_Base_Start_IT+0x52>
 8007b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00f      	beq.n	8007b8a <HAL_TIM_Base_Start_IT+0x52>
 8007b6a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d00b      	beq.n	8007b8a <HAL_TIM_Base_Start_IT+0x52>
 8007b72:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d007      	beq.n	8007b8a <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8007b80:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	4770      	bx	lr
    return HAL_ERROR;
 8007b86:	2001      	movs	r0, #1
 8007b88:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b8a:	6899      	ldr	r1, [r3, #8]
 8007b8c:	4a06      	ldr	r2, [pc, #24]	; (8007ba8 <HAL_TIM_Base_Start_IT+0x70>)
 8007b8e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b90:	2a06      	cmp	r2, #6
 8007b92:	d002      	beq.n	8007b9a <HAL_TIM_Base_Start_IT+0x62>
 8007b94:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007b98:	d1ef      	bne.n	8007b7a <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8007b9a:	2000      	movs	r0, #0
}
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	00010007 	.word	0x00010007

08007bac <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007bac:	6803      	ldr	r3, [r0, #0]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	f022 0201 	bic.w	r2, r2, #1
 8007bb4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8007bb6:	6a1a      	ldr	r2, [r3, #32]
 8007bb8:	f241 1111 	movw	r1, #4369	; 0x1111
 8007bbc:	420a      	tst	r2, r1
 8007bbe:	d108      	bne.n	8007bd2 <HAL_TIM_Base_Stop_IT+0x26>
 8007bc0:	6a19      	ldr	r1, [r3, #32]
 8007bc2:	f240 4244 	movw	r2, #1092	; 0x444
 8007bc6:	4211      	tst	r1, r2
 8007bc8:	d103      	bne.n	8007bd2 <HAL_TIM_Base_Stop_IT+0x26>
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	f022 0201 	bic.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8007bd8:	2000      	movs	r0, #0
 8007bda:	4770      	bx	lr

08007bdc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	f000 8081 	beq.w	8007ce4 <HAL_TIM_PWM_Init+0x108>
{
 8007be2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007be4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007be8:	4604      	mov	r4, r0
 8007bea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d06d      	beq.n	8007cce <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bf4:	493c      	ldr	r1, [pc, #240]	; (8007ce8 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bfc:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8007bfe:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c00:	d051      	beq.n	8007ca6 <HAL_TIM_PWM_Init+0xca>
 8007c02:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007c06:	d021      	beq.n	8007c4c <HAL_TIM_PWM_Init+0x70>
 8007c08:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007c0c:	428a      	cmp	r2, r1
 8007c0e:	d01d      	beq.n	8007c4c <HAL_TIM_PWM_Init+0x70>
 8007c10:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c14:	428a      	cmp	r2, r1
 8007c16:	d019      	beq.n	8007c4c <HAL_TIM_PWM_Init+0x70>
 8007c18:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8007c1c:	428a      	cmp	r2, r1
 8007c1e:	d042      	beq.n	8007ca6 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c20:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8007c24:	428a      	cmp	r2, r1
 8007c26:	d057      	beq.n	8007cd8 <HAL_TIM_PWM_Init+0xfc>
 8007c28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c2c:	428a      	cmp	r2, r1
 8007c2e:	d053      	beq.n	8007cd8 <HAL_TIM_PWM_Init+0xfc>
 8007c30:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c34:	428a      	cmp	r2, r1
 8007c36:	d04f      	beq.n	8007cd8 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c38:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c3a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c40:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007c42:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007c44:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c46:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c48:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c4a:	e010      	b.n	8007c6e <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8007c4c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c4e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007c54:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c5a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c5c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c62:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c64:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007c66:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007c68:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c6a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007c6c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c72:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c76:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007c7a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007c7e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007c82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007c86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c8e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c96:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007c9a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007c9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007ca2:	2000      	movs	r0, #0
}
 8007ca4:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8007ca6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ca8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007cae:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cb4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cb6:	69a1      	ldr	r1, [r4, #24]
 8007cb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cbc:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007cbe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cc0:	68e3      	ldr	r3, [r4, #12]
 8007cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007cc4:	6863      	ldr	r3, [r4, #4]
 8007cc6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007cc8:	6963      	ldr	r3, [r4, #20]
 8007cca:	6313      	str	r3, [r2, #48]	; 0x30
 8007ccc:	e7cf      	b.n	8007c6e <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8007cce:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007cd2:	f7fc fc67 	bl	80045a4 <HAL_TIM_PWM_MspInit>
 8007cd6:	e78c      	b.n	8007bf2 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cd8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cda:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ce0:	4303      	orrs	r3, r0
 8007ce2:	e7e9      	b.n	8007cb8 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8007ce4:	2001      	movs	r0, #1
}
 8007ce6:	4770      	bx	lr
 8007ce8:	40012c00 	.word	0x40012c00

08007cec <HAL_TIM_PWM_Start>:
 8007cec:	2910      	cmp	r1, #16
 8007cee:	d80a      	bhi.n	8007d06 <HAL_TIM_PWM_Start+0x1a>
 8007cf0:	e8df f001 	tbb	[pc, r1]
 8007cf4:	09090955 	.word	0x09090955
 8007cf8:	0909095b 	.word	0x0909095b
 8007cfc:	09090963 	.word	0x09090963
 8007d00:	09090968 	.word	0x09090968
 8007d04:	71          	.byte	0x71
 8007d05:	00          	.byte	0x00
 8007d06:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d14b      	bne.n	8007da6 <HAL_TIM_PWM_Start+0xba>
 8007d0e:	2910      	cmp	r1, #16
 8007d10:	d80a      	bhi.n	8007d28 <HAL_TIM_PWM_Start+0x3c>
 8007d12:	e8df f001 	tbb	[pc, r1]
 8007d16:	0987      	.short	0x0987
 8007d18:	094e0909 	.word	0x094e0909
 8007d1c:	09700909 	.word	0x09700909
 8007d20:	096c0909 	.word	0x096c0909
 8007d24:	0909      	.short	0x0909
 8007d26:	68          	.byte	0x68
 8007d27:	00          	.byte	0x00
 8007d28:	2302      	movs	r3, #2
 8007d2a:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007d2e:	6803      	ldr	r3, [r0, #0]
 8007d30:	2201      	movs	r2, #1
 8007d32:	6a18      	ldr	r0, [r3, #32]
 8007d34:	f001 011f 	and.w	r1, r1, #31
 8007d38:	fa02 f101 	lsl.w	r1, r2, r1
 8007d3c:	ea20 0001 	bic.w	r0, r0, r1
 8007d40:	6218      	str	r0, [r3, #32]
 8007d42:	6a18      	ldr	r0, [r3, #32]
 8007d44:	4a39      	ldr	r2, [pc, #228]	; (8007e2c <HAL_TIM_PWM_Start+0x140>)
 8007d46:	4301      	orrs	r1, r0
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	6219      	str	r1, [r3, #32]
 8007d4c:	d057      	beq.n	8007dfe <HAL_TIM_PWM_Start+0x112>
 8007d4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d061      	beq.n	8007e1a <HAL_TIM_PWM_Start+0x12e>
 8007d56:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d05d      	beq.n	8007e1a <HAL_TIM_PWM_Start+0x12e>
 8007d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d059      	beq.n	8007e1a <HAL_TIM_PWM_Start+0x12e>
 8007d66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d055      	beq.n	8007e1a <HAL_TIM_PWM_Start+0x12e>
 8007d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d72:	d048      	beq.n	8007e06 <HAL_TIM_PWM_Start+0x11a>
 8007d74:	4a2e      	ldr	r2, [pc, #184]	; (8007e30 <HAL_TIM_PWM_Start+0x144>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d045      	beq.n	8007e06 <HAL_TIM_PWM_Start+0x11a>
 8007d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d041      	beq.n	8007e06 <HAL_TIM_PWM_Start+0x11a>
 8007d82:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d03d      	beq.n	8007e06 <HAL_TIM_PWM_Start+0x11a>
 8007d8a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d039      	beq.n	8007e06 <HAL_TIM_PWM_Start+0x11a>
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	f042 0201 	orr.w	r2, r2, #1
 8007d98:	2000      	movs	r0, #0
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	4770      	bx	lr
 8007d9e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d03e      	beq.n	8007e24 <HAL_TIM_PWM_Start+0x138>
 8007da6:	2001      	movs	r0, #1
 8007da8:	4770      	bx	lr
 8007daa:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d1f9      	bne.n	8007da6 <HAL_TIM_PWM_Start+0xba>
 8007db2:	2302      	movs	r3, #2
 8007db4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007db8:	e7b9      	b.n	8007d2e <HAL_TIM_PWM_Start+0x42>
 8007dba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d0a5      	beq.n	8007d0e <HAL_TIM_PWM_Start+0x22>
 8007dc2:	e7f0      	b.n	8007da6 <HAL_TIM_PWM_Start+0xba>
 8007dc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	bf18      	it	ne
 8007dcc:	2301      	movne	r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d09d      	beq.n	8007d0e <HAL_TIM_PWM_Start+0x22>
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	4770      	bx	lr
 8007dd6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8007dda:	3b01      	subs	r3, #1
 8007ddc:	bf18      	it	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d094      	beq.n	8007d0e <HAL_TIM_PWM_Start+0x22>
 8007de4:	e7f5      	b.n	8007dd2 <HAL_TIM_PWM_Start+0xe6>
 8007de6:	2302      	movs	r3, #2
 8007de8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8007dec:	e79f      	b.n	8007d2e <HAL_TIM_PWM_Start+0x42>
 8007dee:	2302      	movs	r3, #2
 8007df0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007df4:	e79b      	b.n	8007d2e <HAL_TIM_PWM_Start+0x42>
 8007df6:	2302      	movs	r3, #2
 8007df8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8007dfc:	e797      	b.n	8007d2e <HAL_TIM_PWM_Start+0x42>
 8007dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e04:	645a      	str	r2, [r3, #68]	; 0x44
 8007e06:	6899      	ldr	r1, [r3, #8]
 8007e08:	4a0a      	ldr	r2, [pc, #40]	; (8007e34 <HAL_TIM_PWM_Start+0x148>)
 8007e0a:	400a      	ands	r2, r1
 8007e0c:	2a06      	cmp	r2, #6
 8007e0e:	d002      	beq.n	8007e16 <HAL_TIM_PWM_Start+0x12a>
 8007e10:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007e14:	d1bd      	bne.n	8007d92 <HAL_TIM_PWM_Start+0xa6>
 8007e16:	2000      	movs	r0, #0
 8007e18:	4770      	bx	lr
 8007e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e20:	645a      	str	r2, [r3, #68]	; 0x44
 8007e22:	e7a4      	b.n	8007d6e <HAL_TIM_PWM_Start+0x82>
 8007e24:	2302      	movs	r3, #2
 8007e26:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8007e2a:	e780      	b.n	8007d2e <HAL_TIM_PWM_Start+0x42>
 8007e2c:	40012c00 	.word	0x40012c00
 8007e30:	40000400 	.word	0x40000400
 8007e34:	00010007 	.word	0x00010007

08007e38 <HAL_TIM_PWM_Stop>:
 8007e38:	6803      	ldr	r3, [r0, #0]
 8007e3a:	b410      	push	{r4}
 8007e3c:	6a1a      	ldr	r2, [r3, #32]
 8007e3e:	f001 041f 	and.w	r4, r1, #31
 8007e42:	f04f 0c01 	mov.w	ip, #1
 8007e46:	fa0c fc04 	lsl.w	ip, ip, r4
 8007e4a:	ea22 020c 	bic.w	r2, r2, ip
 8007e4e:	621a      	str	r2, [r3, #32]
 8007e50:	4a35      	ldr	r2, [pc, #212]	; (8007f28 <HAL_TIM_PWM_Stop+0xf0>)
 8007e52:	6a1c      	ldr	r4, [r3, #32]
 8007e54:	621c      	str	r4, [r3, #32]
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d021      	beq.n	8007e9e <HAL_TIM_PWM_Stop+0x66>
 8007e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d01d      	beq.n	8007e9e <HAL_TIM_PWM_Stop+0x66>
 8007e62:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d019      	beq.n	8007e9e <HAL_TIM_PWM_Stop+0x66>
 8007e6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d015      	beq.n	8007e9e <HAL_TIM_PWM_Stop+0x66>
 8007e72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d011      	beq.n	8007e9e <HAL_TIM_PWM_Stop+0x66>
 8007e7a:	6a1c      	ldr	r4, [r3, #32]
 8007e7c:	f241 1211 	movw	r2, #4369	; 0x1111
 8007e80:	4214      	tst	r4, r2
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_PWM_Stop+0x56>
 8007e84:	6a1c      	ldr	r4, [r3, #32]
 8007e86:	f240 4244 	movw	r2, #1092	; 0x444
 8007e8a:	4214      	tst	r4, r2
 8007e8c:	d016      	beq.n	8007ebc <HAL_TIM_PWM_Stop+0x84>
 8007e8e:	b9d9      	cbnz	r1, 8007ec8 <HAL_TIM_PWM_Stop+0x90>
 8007e90:	2301      	movs	r3, #1
 8007e92:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8007e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	4770      	bx	lr
 8007e9e:	6a1c      	ldr	r4, [r3, #32]
 8007ea0:	f241 1211 	movw	r2, #4369	; 0x1111
 8007ea4:	4214      	tst	r4, r2
 8007ea6:	d1e8      	bne.n	8007e7a <HAL_TIM_PWM_Stop+0x42>
 8007ea8:	6a1c      	ldr	r4, [r3, #32]
 8007eaa:	f240 4244 	movw	r2, #1092	; 0x444
 8007eae:	4214      	tst	r4, r2
 8007eb0:	d1e3      	bne.n	8007e7a <HAL_TIM_PWM_Stop+0x42>
 8007eb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007eb8:	645a      	str	r2, [r3, #68]	; 0x44
 8007eba:	e7de      	b.n	8007e7a <HAL_TIM_PWM_Stop+0x42>
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	f022 0201 	bic.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	d0e3      	beq.n	8007e90 <HAL_TIM_PWM_Stop+0x58>
 8007ec8:	3904      	subs	r1, #4
 8007eca:	290c      	cmp	r1, #12
 8007ecc:	d808      	bhi.n	8007ee0 <HAL_TIM_PWM_Stop+0xa8>
 8007ece:	e8df f001 	tbb	[pc, r1]
 8007ed2:	0723      	.short	0x0723
 8007ed4:	071c0707 	.word	0x071c0707
 8007ed8:	07150707 	.word	0x07150707
 8007edc:	0707      	.short	0x0707
 8007ede:	0e          	.byte	0x0e
 8007edf:	00          	.byte	0x00
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eea:	2000      	movs	r0, #0
 8007eec:	4770      	bx	lr
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8007ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ef8:	2000      	movs	r0, #0
 8007efa:	4770      	bx	lr
 8007efc:	2301      	movs	r3, #1
 8007efe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f06:	2000      	movs	r0, #0
 8007f08:	4770      	bx	lr
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8007f10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f14:	2000      	movs	r0, #0
 8007f16:	4770      	bx	lr
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f22:	2000      	movs	r0, #0
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	40012c00 	.word	0x40012c00

08007f2c <HAL_TIM_OC_DelayElapsedCallback>:
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop

08007f30 <HAL_TIM_IC_CaptureCallback>:
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop

08007f34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop

08007f38 <HAL_TIM_TriggerCallback>:
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop

08007f3c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f3c:	6803      	ldr	r3, [r0, #0]
 8007f3e:	691a      	ldr	r2, [r3, #16]
 8007f40:	0791      	lsls	r1, r2, #30
{
 8007f42:	b510      	push	{r4, lr}
 8007f44:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f46:	d502      	bpl.n	8007f4e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	0792      	lsls	r2, r2, #30
 8007f4c:	d468      	bmi.n	8008020 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	0752      	lsls	r2, r2, #29
 8007f52:	d502      	bpl.n	8007f5a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	0750      	lsls	r0, r2, #29
 8007f58:	d44f      	bmi.n	8007ffa <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	0711      	lsls	r1, r2, #28
 8007f5e:	d502      	bpl.n	8007f66 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	0712      	lsls	r2, r2, #28
 8007f64:	d437      	bmi.n	8007fd6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	06d0      	lsls	r0, r2, #27
 8007f6a:	d502      	bpl.n	8007f72 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	06d1      	lsls	r1, r2, #27
 8007f70:	d41e      	bmi.n	8007fb0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	07d2      	lsls	r2, r2, #31
 8007f76:	d502      	bpl.n	8007f7e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f78:	68da      	ldr	r2, [r3, #12]
 8007f7a:	07d0      	lsls	r0, r2, #31
 8007f7c:	d469      	bmi.n	8008052 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	0611      	lsls	r1, r2, #24
 8007f82:	d502      	bpl.n	8007f8a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	0612      	lsls	r2, r2, #24
 8007f88:	d46b      	bmi.n	8008062 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	05d0      	lsls	r0, r2, #23
 8007f8e:	d502      	bpl.n	8007f96 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	0611      	lsls	r1, r2, #24
 8007f94:	d46d      	bmi.n	8008072 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	0652      	lsls	r2, r2, #25
 8007f9a:	d502      	bpl.n	8007fa2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	0650      	lsls	r0, r2, #25
 8007fa0:	d46f      	bmi.n	8008082 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	0691      	lsls	r1, r2, #26
 8007fa6:	d502      	bpl.n	8007fae <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	0692      	lsls	r2, r2, #26
 8007fac:	d449      	bmi.n	8008042 <HAL_TIM_IRQHandler+0x106>
}
 8007fae:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fb0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fb4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fb6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fb8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007fc0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fc2:	d16f      	bne.n	80080a4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fc4:	f7ff ffb2 	bl	8007f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc8:	4620      	mov	r0, r4
 8007fca:	f7ff ffb3 	bl	8007f34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fce:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fd0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fd2:	7722      	strb	r2, [r4, #28]
 8007fd4:	e7cd      	b.n	8007f72 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fd6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fda:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fdc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fde:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fe6:	d15a      	bne.n	800809e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe8:	f7ff ffa0 	bl	8007f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fec:	4620      	mov	r0, r4
 8007fee:	f7ff ffa1 	bl	8007f34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ff4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	7722      	strb	r2, [r4, #28]
 8007ff8:	e7b5      	b.n	8007f66 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ffa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ffe:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008000:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008002:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800800a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800800c:	d144      	bne.n	8008098 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800e:	f7ff ff8d 	bl	8007f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008012:	4620      	mov	r0, r4
 8008014:	f7ff ff8e 	bl	8007f34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008018:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800801a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801c:	7722      	strb	r2, [r4, #28]
 800801e:	e79c      	b.n	8007f5a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008020:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008024:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008026:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008028:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	0799      	lsls	r1, r3, #30
 800802e:	d130      	bne.n	8008092 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008030:	f7ff ff7c 	bl	8007f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008034:	4620      	mov	r0, r4
 8008036:	f7ff ff7d 	bl	8007f34 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800803c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803e:	7722      	strb	r2, [r4, #28]
 8008040:	e785      	b.n	8007f4e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008042:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8008046:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008048:	611a      	str	r2, [r3, #16]
}
 800804a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800804e:	f000 baeb 	b.w	8008628 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008052:	f06f 0201 	mvn.w	r2, #1
 8008056:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008058:	4620      	mov	r0, r4
 800805a:	f7f9 fd4d 	bl	8001af8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	e78d      	b.n	8007f7e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008062:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008066:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fadf 	bl	800862c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	e78b      	b.n	8007f8a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008072:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008076:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fad9 	bl	8008630 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800807e:	6823      	ldr	r3, [r4, #0]
 8008080:	e789      	b.n	8007f96 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008082:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008086:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008088:	4620      	mov	r0, r4
 800808a:	f7ff ff55 	bl	8007f38 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	e787      	b.n	8007fa2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8008092:	f7ff ff4d 	bl	8007f30 <HAL_TIM_IC_CaptureCallback>
 8008096:	e7d0      	b.n	800803a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8008098:	f7ff ff4a 	bl	8007f30 <HAL_TIM_IC_CaptureCallback>
 800809c:	e7bc      	b.n	8008018 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800809e:	f7ff ff47 	bl	8007f30 <HAL_TIM_IC_CaptureCallback>
 80080a2:	e7a6      	b.n	8007ff2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80080a4:	f7ff ff44 	bl	8007f30 <HAL_TIM_IC_CaptureCallback>
 80080a8:	e791      	b.n	8007fce <HAL_TIM_IRQHandler+0x92>
 80080aa:	bf00      	nop

080080ac <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ac:	6a03      	ldr	r3, [r0, #32]
 80080ae:	f023 0310 	bic.w	r3, r3, #16
 80080b2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80080b4:	6a03      	ldr	r3, [r0, #32]
{
 80080b6:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80080b8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80080ba:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080bc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80080c2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080ca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80080cc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080d4:	4d14      	ldr	r5, [pc, #80]	; (8008128 <TIM_OC2_SetConfig+0x7c>)
 80080d6:	42a8      	cmp	r0, r5
 80080d8:	d010      	beq.n	80080fc <TIM_OC2_SetConfig+0x50>
 80080da:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80080de:	42a8      	cmp	r0, r5
 80080e0:	d00c      	beq.n	80080fc <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80080e6:	42a8      	cmp	r0, r5
 80080e8:	d00f      	beq.n	800810a <TIM_OC2_SetConfig+0x5e>
 80080ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80080ee:	42a8      	cmp	r0, r5
 80080f0:	d00b      	beq.n	800810a <TIM_OC2_SetConfig+0x5e>
 80080f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80080f6:	42a8      	cmp	r0, r5
 80080f8:	d10f      	bne.n	800811a <TIM_OC2_SetConfig+0x6e>
 80080fa:	e006      	b.n	800810a <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080fc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80080fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008102:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800810a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800810e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008112:	ea46 0c05 	orr.w	ip, r6, r5
 8008116:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800811a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800811c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800811e:	6182      	str	r2, [r0, #24]
}
 8008120:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008122:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008124:	6203      	str	r3, [r0, #32]
}
 8008126:	4770      	bx	lr
 8008128:	40012c00 	.word	0x40012c00

0800812c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800812c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008130:	2b01      	cmp	r3, #1
 8008132:	f000 812f 	beq.w	8008394 <HAL_TIM_PWM_ConfigChannel+0x268>
 8008136:	2301      	movs	r3, #1
{
 8008138:	b570      	push	{r4, r5, r6, lr}
 800813a:	4604      	mov	r4, r0
 800813c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800813e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8008142:	2a14      	cmp	r2, #20
 8008144:	d816      	bhi.n	8008174 <HAL_TIM_PWM_ConfigChannel+0x48>
 8008146:	e8df f012 	tbh	[pc, r2, lsl #1]
 800814a:	005f      	.short	0x005f
 800814c:	00150015 	.word	0x00150015
 8008150:	00740015 	.word	0x00740015
 8008154:	00150015 	.word	0x00150015
 8008158:	008a0015 	.word	0x008a0015
 800815c:	00150015 	.word	0x00150015
 8008160:	009f0015 	.word	0x009f0015
 8008164:	00150015 	.word	0x00150015
 8008168:	00e30015 	.word	0x00e30015
 800816c:	00150015 	.word	0x00150015
 8008170:	001b0015 	.word	0x001b0015
  __HAL_UNLOCK(htim);
 8008174:	2200      	movs	r2, #0
  switch (Channel)
 8008176:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8008178:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800817c:	4618      	mov	r0, r3
 800817e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008180:	6802      	ldr	r2, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008182:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008184:	6a13      	ldr	r3, [r2, #32]
 8008186:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800818a:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 800818c:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800818e:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8008190:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008192:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008196:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800819a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800819e:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081a4:	ea43 5306 	orr.w	r3, r3, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a8:	4e7c      	ldr	r6, [pc, #496]	; (800839c <HAL_TIM_PWM_ConfigChannel+0x270>)
 80081aa:	42b2      	cmp	r2, r6
 80081ac:	d00f      	beq.n	80081ce <HAL_TIM_PWM_ConfigChannel+0xa2>
 80081ae:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80081b2:	42b2      	cmp	r2, r6
 80081b4:	d00b      	beq.n	80081ce <HAL_TIM_PWM_ConfigChannel+0xa2>
 80081b6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80081ba:	42b2      	cmp	r2, r6
 80081bc:	d007      	beq.n	80081ce <HAL_TIM_PWM_ConfigChannel+0xa2>
 80081be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80081c2:	42b2      	cmp	r2, r6
 80081c4:	d003      	beq.n	80081ce <HAL_TIM_PWM_ConfigChannel+0xa2>
 80081c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80081ca:	42b2      	cmp	r2, r6
 80081cc:	d104      	bne.n	80081d8 <HAL_TIM_PWM_ConfigChannel+0xac>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081ce:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081d0:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081d4:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d8:	6050      	str	r0, [r2, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80081da:	6551      	str	r1, [r2, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80081dc:	6869      	ldr	r1, [r5, #4]
 80081de:	65d1      	str	r1, [r2, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e0:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081e4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80081e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80081ea:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80081ec:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80081ee:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80081f2:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081f4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80081f6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80081fa:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80081fc:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80081fe:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008200:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008204:	4618      	mov	r0, r3
 8008206:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008208:	6800      	ldr	r0, [r0, #0]
 800820a:	f7ff fc19 	bl	8007a40 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800820e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008210:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008212:	f043 0308 	orr.w	r3, r3, #8
 8008216:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008218:	6982      	ldr	r2, [r0, #24]
 800821a:	f022 0204 	bic.w	r2, r2, #4
 800821e:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008220:	6982      	ldr	r2, [r0, #24]
 8008222:	430a      	orrs	r2, r1
 8008224:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8008226:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008228:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800822a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800822e:	4618      	mov	r0, r3
 8008230:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008232:	6800      	ldr	r0, [r0, #0]
 8008234:	f7ff ff3a 	bl	80080ac <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008238:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800823a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800823c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008240:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008242:	6982      	ldr	r2, [r0, #24]
 8008244:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008248:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800824a:	6982      	ldr	r2, [r0, #24]
 800824c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008250:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 8008252:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008254:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008256:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800825a:	4618      	mov	r0, r3
 800825c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800825e:	6800      	ldr	r0, [r0, #0]
 8008260:	f7ff fc2a 	bl	8007ab8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008264:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008266:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008268:	f043 0308 	orr.w	r3, r3, #8
 800826c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800826e:	69c2      	ldr	r2, [r0, #28]
 8008270:	f022 0204 	bic.w	r2, r2, #4
 8008274:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008276:	69c2      	ldr	r2, [r0, #28]
 8008278:	430a      	orrs	r2, r1
 800827a:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 800827c:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800827e:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008280:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008284:	4618      	mov	r0, r3
 8008286:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008288:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800828a:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800828c:	6a13      	ldr	r3, [r2, #32]
 800828e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008292:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8008294:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8008296:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8008298:	69d1      	ldr	r1, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800829a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800829e:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082a2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082a6:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80082a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082ac:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b0:	4e3a      	ldr	r6, [pc, #232]	; (800839c <HAL_TIM_PWM_ConfigChannel+0x270>)
 80082b2:	42b2      	cmp	r2, r6
 80082b4:	d00f      	beq.n	80082d6 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80082b6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80082ba:	42b2      	cmp	r2, r6
 80082bc:	d00b      	beq.n	80082d6 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80082be:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80082c2:	42b2      	cmp	r2, r6
 80082c4:	d007      	beq.n	80082d6 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80082c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80082ca:	42b2      	cmp	r2, r6
 80082cc:	d003      	beq.n	80082d6 <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80082ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80082d2:	42b2      	cmp	r2, r6
 80082d4:	d104      	bne.n	80082e0 <HAL_TIM_PWM_ConfigChannel+0x1b4>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082d6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082d8:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082dc:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 80082e0:	6050      	str	r0, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80082e2:	61d1      	str	r1, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80082e4:	6869      	ldr	r1, [r5, #4]
 80082e6:	6411      	str	r1, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80082e8:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082ea:	69d3      	ldr	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ec:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80082f2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082f4:	69d1      	ldr	r1, [r2, #28]
 80082f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80082fa:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082fc:	69d1      	ldr	r1, [r2, #28]
 80082fe:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8008302:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8008304:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008306:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008308:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800830c:	4618      	mov	r0, r3
 800830e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008310:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008312:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008314:	6a13      	ldr	r3, [r2, #32]
 8008316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800831a:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 800831c:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800831e:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8008320:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008322:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008326:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800832a:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800832c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800832e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008332:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008336:	4e19      	ldr	r6, [pc, #100]	; (800839c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8008338:	42b2      	cmp	r2, r6
 800833a:	d00f      	beq.n	800835c <HAL_TIM_PWM_ConfigChannel+0x230>
 800833c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008340:	42b2      	cmp	r2, r6
 8008342:	d00b      	beq.n	800835c <HAL_TIM_PWM_ConfigChannel+0x230>
 8008344:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008348:	42b2      	cmp	r2, r6
 800834a:	d007      	beq.n	800835c <HAL_TIM_PWM_ConfigChannel+0x230>
 800834c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008350:	42b2      	cmp	r2, r6
 8008352:	d003      	beq.n	800835c <HAL_TIM_PWM_ConfigChannel+0x230>
 8008354:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008358:	42b2      	cmp	r2, r6
 800835a:	d104      	bne.n	8008366 <HAL_TIM_PWM_ConfigChannel+0x23a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800835c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800835e:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008362:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008366:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008368:	6551      	str	r1, [r2, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800836a:	6869      	ldr	r1, [r5, #4]
 800836c:	6591      	str	r1, [r2, #88]	; 0x58
  TIMx->CCER = tmpccer;
 800836e:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008370:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008372:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008374:	f043 0308 	orr.w	r3, r3, #8
 8008378:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800837a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800837c:	f021 0104 	bic.w	r1, r1, #4
 8008380:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008382:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8008384:	4301      	orrs	r1, r0
 8008386:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8008388:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800838a:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800838c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008390:	4618      	mov	r0, r3
 8008392:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8008394:	2302      	movs	r3, #2
}
 8008396:	4618      	mov	r0, r3
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40012c00 	.word	0x40012c00

080083a0 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083a0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083a2:	f001 011f 	and.w	r1, r1, #31
 80083a6:	f04f 0c01 	mov.w	ip, #1
 80083aa:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 80083ae:	ea23 030c 	bic.w	r3, r3, ip
 80083b2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083b4:	6a03      	ldr	r3, [r0, #32]
 80083b6:	408a      	lsls	r2, r1
 80083b8:	431a      	orrs	r2, r3
 80083ba:	6202      	str	r2, [r0, #32]
}
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop

080083c0 <HAL_TIMEx_PWMN_Start>:
 80083c0:	2900      	cmp	r1, #0
 80083c2:	d139      	bne.n	8008438 <HAL_TIMEx_PWMN_Start+0x78>
 80083c4:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d141      	bne.n	8008450 <HAL_TIMEx_PWMN_Start+0x90>
 80083cc:	2302      	movs	r3, #2
 80083ce:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80083d2:	6803      	ldr	r3, [r0, #0]
 80083d4:	f001 011f 	and.w	r1, r1, #31
 80083d8:	6a18      	ldr	r0, [r3, #32]
 80083da:	2204      	movs	r2, #4
 80083dc:	408a      	lsls	r2, r1
 80083de:	ea20 0002 	bic.w	r0, r0, r2
 80083e2:	6218      	str	r0, [r3, #32]
 80083e4:	6a18      	ldr	r0, [r3, #32]
 80083e6:	4924      	ldr	r1, [pc, #144]	; (8008478 <HAL_TIMEx_PWMN_Start+0xb8>)
 80083e8:	4302      	orrs	r2, r0
 80083ea:	621a      	str	r2, [r3, #32]
 80083ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ee:	428b      	cmp	r3, r1
 80083f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083f4:	645a      	str	r2, [r3, #68]	; 0x44
 80083f6:	d011      	beq.n	800841c <HAL_TIMEx_PWMN_Start+0x5c>
 80083f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083fc:	d00e      	beq.n	800841c <HAL_TIMEx_PWMN_Start+0x5c>
 80083fe:	4a1f      	ldr	r2, [pc, #124]	; (800847c <HAL_TIMEx_PWMN_Start+0xbc>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00b      	beq.n	800841c <HAL_TIMEx_PWMN_Start+0x5c>
 8008404:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008408:	4293      	cmp	r3, r2
 800840a:	d007      	beq.n	800841c <HAL_TIMEx_PWMN_Start+0x5c>
 800840c:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008410:	4293      	cmp	r3, r2
 8008412:	d003      	beq.n	800841c <HAL_TIMEx_PWMN_Start+0x5c>
 8008414:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008418:	4293      	cmp	r3, r2
 800841a:	d107      	bne.n	800842c <HAL_TIMEx_PWMN_Start+0x6c>
 800841c:	6899      	ldr	r1, [r3, #8]
 800841e:	4a18      	ldr	r2, [pc, #96]	; (8008480 <HAL_TIMEx_PWMN_Start+0xc0>)
 8008420:	400a      	ands	r2, r1
 8008422:	2a06      	cmp	r2, #6
 8008424:	d016      	beq.n	8008454 <HAL_TIMEx_PWMN_Start+0x94>
 8008426:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800842a:	d013      	beq.n	8008454 <HAL_TIMEx_PWMN_Start+0x94>
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	2000      	movs	r0, #0
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	4770      	bx	lr
 8008438:	2904      	cmp	r1, #4
 800843a:	d00d      	beq.n	8008458 <HAL_TIMEx_PWMN_Start+0x98>
 800843c:	2908      	cmp	r1, #8
 800843e:	d013      	beq.n	8008468 <HAL_TIMEx_PWMN_Start+0xa8>
 8008440:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8008444:	2b01      	cmp	r3, #1
 8008446:	d103      	bne.n	8008450 <HAL_TIMEx_PWMN_Start+0x90>
 8008448:	2302      	movs	r3, #2
 800844a:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 800844e:	e7c0      	b.n	80083d2 <HAL_TIMEx_PWMN_Start+0x12>
 8008450:	2001      	movs	r0, #1
 8008452:	4770      	bx	lr
 8008454:	2000      	movs	r0, #0
 8008456:	4770      	bx	lr
 8008458:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800845c:	2b01      	cmp	r3, #1
 800845e:	d1f7      	bne.n	8008450 <HAL_TIMEx_PWMN_Start+0x90>
 8008460:	2302      	movs	r3, #2
 8008462:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008466:	e7b4      	b.n	80083d2 <HAL_TIMEx_PWMN_Start+0x12>
 8008468:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800846c:	2b01      	cmp	r3, #1
 800846e:	d1ef      	bne.n	8008450 <HAL_TIMEx_PWMN_Start+0x90>
 8008470:	2302      	movs	r3, #2
 8008472:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 8008476:	e7ac      	b.n	80083d2 <HAL_TIMEx_PWMN_Start+0x12>
 8008478:	40012c00 	.word	0x40012c00
 800847c:	40000400 	.word	0x40000400
 8008480:	00010007 	.word	0x00010007

08008484 <HAL_TIMEx_PWMN_Stop>:
 8008484:	6803      	ldr	r3, [r0, #0]
 8008486:	b410      	push	{r4}
 8008488:	6a1a      	ldr	r2, [r3, #32]
 800848a:	f001 041f 	and.w	r4, r1, #31
 800848e:	f04f 0c04 	mov.w	ip, #4
 8008492:	fa0c fc04 	lsl.w	ip, ip, r4
 8008496:	ea22 020c 	bic.w	r2, r2, ip
 800849a:	621a      	str	r2, [r3, #32]
 800849c:	6a1a      	ldr	r2, [r3, #32]
 800849e:	621a      	str	r2, [r3, #32]
 80084a0:	6a1c      	ldr	r4, [r3, #32]
 80084a2:	f241 1211 	movw	r2, #4369	; 0x1111
 80084a6:	4214      	tst	r4, r2
 80084a8:	d104      	bne.n	80084b4 <HAL_TIMEx_PWMN_Stop+0x30>
 80084aa:	6a1c      	ldr	r4, [r3, #32]
 80084ac:	f240 4244 	movw	r2, #1092	; 0x444
 80084b0:	4214      	tst	r4, r2
 80084b2:	d022      	beq.n	80084fa <HAL_TIMEx_PWMN_Stop+0x76>
 80084b4:	6a1c      	ldr	r4, [r3, #32]
 80084b6:	f241 1211 	movw	r2, #4369	; 0x1111
 80084ba:	4214      	tst	r4, r2
 80084bc:	d104      	bne.n	80084c8 <HAL_TIMEx_PWMN_Stop+0x44>
 80084be:	6a1c      	ldr	r4, [r3, #32]
 80084c0:	f240 4244 	movw	r2, #1092	; 0x444
 80084c4:	4214      	tst	r4, r2
 80084c6:	d013      	beq.n	80084f0 <HAL_TIMEx_PWMN_Stop+0x6c>
 80084c8:	2301      	movs	r3, #1
 80084ca:	b929      	cbnz	r1, 80084d8 <HAL_TIMEx_PWMN_Stop+0x54>
 80084cc:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80084d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084d4:	2000      	movs	r0, #0
 80084d6:	4770      	bx	lr
 80084d8:	2904      	cmp	r1, #4
 80084da:	d013      	beq.n	8008504 <HAL_TIMEx_PWMN_Stop+0x80>
 80084dc:	2908      	cmp	r1, #8
 80084de:	bf0c      	ite	eq
 80084e0:	f880 3046 	strbeq.w	r3, [r0, #70]	; 0x46
 80084e4:	f880 3047 	strbne.w	r3, [r0, #71]	; 0x47
 80084e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ec:	2000      	movs	r0, #0
 80084ee:	4770      	bx	lr
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	f022 0201 	bic.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	e7e6      	b.n	80084c8 <HAL_TIMEx_PWMN_Stop+0x44>
 80084fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008500:	645a      	str	r2, [r3, #68]	; 0x44
 8008502:	e7d7      	b.n	80084b4 <HAL_TIMEx_PWMN_Stop+0x30>
 8008504:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800850c:	2000      	movs	r0, #0
 800850e:	4770      	bx	lr

08008510 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008510:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d03a      	beq.n	800858e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 8008518:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800851a:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800851c:	4d1d      	ldr	r5, [pc, #116]	; (8008594 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 800851e:	2302      	movs	r3, #2
 8008520:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008524:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8008526:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008528:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800852a:	d026      	beq.n	800857a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 800852c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008530:	42aa      	cmp	r2, r5
 8008532:	d022      	beq.n	800857a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008534:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800853a:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800853c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008540:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008542:	d00c      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8008544:	4b14      	ldr	r3, [pc, #80]	; (8008598 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8008546:	429a      	cmp	r2, r3
 8008548:	d009      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800854a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800854e:	429a      	cmp	r2, r3
 8008550:	d005      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8008552:	42aa      	cmp	r2, r5
 8008554:	d003      	beq.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8008556:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800855a:	429a      	cmp	r2, r3
 800855c:	d104      	bne.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800855e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008560:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008564:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008566:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008568:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800856a:	2201      	movs	r2, #1
 800856c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008570:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8008574:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8008576:	4618      	mov	r0, r3
}
 8008578:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800857a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800857c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008580:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008582:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008588:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800858a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800858c:	e7e7      	b.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 800858e:	2002      	movs	r0, #2
}
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	40012c00 	.word	0x40012c00
 8008598:	40000400 	.word	0x40000400

0800859c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800859c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d03d      	beq.n	8008620 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 80085a4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085a6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80085aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ae:	4602      	mov	r2, r0
 80085b0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085b2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085b4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085ba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085c0:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085c2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085c8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085ca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085d0:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085d2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085d8:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085da:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085dc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80085e0:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80085e6:	4c0f      	ldr	r4, [pc, #60]	; (8008624 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80085e8:	42a0      	cmp	r0, r4
 80085ea:	d00b      	beq.n	8008604 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80085ec:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80085f0:	42a0      	cmp	r0, r4
 80085f2:	d007      	beq.n	8008604 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80085f4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80085f6:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80085f8:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80085fc:	4608      	mov	r0, r1
}
 80085fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008602:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008604:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8008606:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800860a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800860e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008610:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008616:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008618:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800861c:	430b      	orrs	r3, r1
 800861e:	e7e9      	b.n	80085f4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8008620:	2002      	movs	r0, #2
}
 8008622:	4770      	bx	lr
 8008624:	40012c00 	.word	0x40012c00

08008628 <HAL_TIMEx_CommutCallback>:
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop

0800862c <HAL_TIMEx_BreakCallback>:
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop

08008630 <HAL_TIMEx_Break2Callback>:
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop

08008634 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008634:	b570      	push	{r4, r5, r6, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008636:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 8008638:	2d20      	cmp	r5, #32
 800863a:	d12e      	bne.n	800869a <HAL_UART_Transmit_DMA+0x66>
  {
    if ((pData == NULL) || (Size == 0U))
 800863c:	b359      	cbz	r1, 8008696 <HAL_UART_Transmit_DMA+0x62>
 800863e:	b352      	cbz	r2, 8008696 <HAL_UART_Transmit_DMA+0x62>

    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008640:	2300      	movs	r3, #0
    huart->TxXferCount = Size;
 8008642:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
 8008646:	4604      	mov	r4, r0
    huart->pTxBuffPtr  = pData;
 8008648:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800864a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->TxXferSize  = Size;
 800864e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 8008652:	6f00      	ldr	r0, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008654:	2621      	movs	r6, #33	; 0x21
 8008656:	67e6      	str	r6, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 8008658:	b160      	cbz	r0, 8008674 <HAL_UART_Transmit_DMA+0x40>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800865a:	4e14      	ldr	r6, [pc, #80]	; (80086ac <HAL_UART_Transmit_DMA+0x78>)

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800865c:	6343      	str	r3, [r0, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800865e:	4613      	mov	r3, r2
 8008660:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008662:	6286      	str	r6, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008664:	4e12      	ldr	r6, [pc, #72]	; (80086b0 <HAL_UART_Transmit_DMA+0x7c>)
 8008666:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008668:	4e12      	ldr	r6, [pc, #72]	; (80086b4 <HAL_UART_Transmit_DMA+0x80>)
 800866a:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800866c:	3228      	adds	r2, #40	; 0x28
 800866e:	f7fe f8f3 	bl	8006858 <HAL_DMA_Start_IT>
 8008672:	b9a0      	cbnz	r0, 800869e <HAL_UART_Transmit_DMA+0x6a>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	2340      	movs	r3, #64	; 0x40
 8008678:	6213      	str	r3, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	f102 0308 	add.w	r3, r2, #8
 800867e:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	f102 0008 	add.w	r0, r2, #8
 800868a:	e840 3100 	strex	r1, r3, [r0]
 800868e:	2900      	cmp	r1, #0
 8008690:	d1f3      	bne.n	800867a <HAL_UART_Transmit_DMA+0x46>

    return HAL_OK;
 8008692:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008694:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8008696:	2001      	movs	r0, #1
}
 8008698:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800869a:	2002      	movs	r0, #2
}
 800869c:	bd70      	pop	{r4, r5, r6, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800869e:	2310      	movs	r3, #16
 80086a0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 80086a4:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 80086a6:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 80086a8:	bd70      	pop	{r4, r5, r6, pc}
 80086aa:	bf00      	nop
 80086ac:	080086b9 	.word	0x080086b9
 80086b0:	08008701 	.word	0x08008701
 80086b4:	08008711 	.word	0x08008711

080086b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80086ba:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086bc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d018      	beq.n	80086f4 <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	6802      	ldr	r2, [r0, #0]
 80086c6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	f102 0308 	add.w	r3, r2, #8
 80086ce:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	f102 0008 	add.w	r0, r2, #8
 80086da:	e840 3100 	strex	r1, r3, [r0]
 80086de:	2900      	cmp	r1, #0
 80086e0:	d1f3      	bne.n	80086ca <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	e842 3100 	strex	r1, r3, [r2]
 80086ee:	2900      	cmp	r1, #0
 80086f0:	d1f7      	bne.n	80086e2 <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086f2:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80086f4:	f7fc fb52 	bl	8004d9c <HAL_UART_TxCpltCallback>
}
 80086f8:	bd08      	pop	{r3, pc}
 80086fa:	bf00      	nop

080086fc <HAL_UART_TxHalfCpltCallback>:
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop

08008700 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008700:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008702:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008704:	f7ff fffa 	bl	80086fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008708:	bd08      	pop	{r3, pc}
 800870a:	bf00      	nop

0800870c <HAL_UART_ErrorCallback>:
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop

08008710 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008710:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008712:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008714:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
{
 8008716:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008718:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	0612      	lsls	r2, r2, #24
 8008720:	d501      	bpl.n	8008726 <UART_DMAError+0x16>
 8008722:	2921      	cmp	r1, #33	; 0x21
 8008724:	d00d      	beq.n	8008742 <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	0652      	lsls	r2, r2, #25
 800872a:	d501      	bpl.n	8008730 <UART_DMAError+0x20>
 800872c:	2c22      	cmp	r4, #34	; 0x22
 800872e:	d016      	beq.n	800875e <UART_DMAError+0x4e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008730:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008734:	f043 0310 	orr.w	r3, r3, #16
 8008738:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800873c:	f7ff ffe6 	bl	800870c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008740:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8008742:	2200      	movs	r2, #0
 8008744:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800874c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	e843 2100 	strex	r1, r2, [r3]
 8008754:	2900      	cmp	r1, #0
 8008756:	d1f7      	bne.n	8008748 <UART_DMAError+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8008758:	2220      	movs	r2, #32
 800875a:	67c2      	str	r2, [r0, #124]	; 0x7c
}
 800875c:	e7e3      	b.n	8008726 <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 800875e:	2200      	movs	r2, #0
 8008760:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008768:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	e843 2100 	strex	r1, r2, [r3]
 8008770:	2900      	cmp	r1, #0
 8008772:	d1f7      	bne.n	8008764 <UART_DMAError+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	f103 0208 	add.w	r2, r3, #8
 8008778:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800877c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	f103 0408 	add.w	r4, r3, #8
 8008784:	e844 2100 	strex	r1, r2, [r4]
 8008788:	2900      	cmp	r1, #0
 800878a:	d1f3      	bne.n	8008774 <UART_DMAError+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800878e:	2a01      	cmp	r2, #1
 8008790:	d006      	beq.n	80087a0 <UART_DMAError+0x90>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008792:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008794:	2220      	movs	r2, #32
 8008796:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  huart->RxISR = NULL;
 800879a:	6683      	str	r3, [r0, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879c:	6603      	str	r3, [r0, #96]	; 0x60
}
 800879e:	e7c7      	b.n	8008730 <UART_DMAError+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	e843 2100 	strex	r1, r2, [r3]
 80087ac:	2900      	cmp	r1, #0
 80087ae:	d0f0      	beq.n	8008792 <UART_DMAError+0x82>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	e853 2f00 	ldrex	r2, [r3]
 80087b4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	e843 2100 	strex	r1, r2, [r3]
 80087bc:	2900      	cmp	r1, #0
 80087be:	d1ef      	bne.n	80087a0 <UART_DMAError+0x90>
 80087c0:	e7e7      	b.n	8008792 <UART_DMAError+0x82>
 80087c2:	bf00      	nop

080087c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087c4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087ce:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087d2:	f7ff ff9b 	bl	800870c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087d6:	bd08      	pop	{r3, pc}

080087d8 <HAL_UARTEx_RxEventCallback>:
}
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop

080087dc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087dc:	6803      	ldr	r3, [r0, #0]
 80087de:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087e0:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087e2:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80087e6:	ea12 0f0c 	tst.w	r2, ip
{
 80087ea:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087ec:	689d      	ldr	r5, [r3, #8]
{
 80087ee:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80087f0:	d17f      	bne.n	80088f2 <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087f2:	0696      	lsls	r6, r2, #26
 80087f4:	d502      	bpl.n	80087fc <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087f6:	068e      	lsls	r6, r1, #26
 80087f8:	f100 8117 	bmi.w	8008a2a <HAL_UART_IRQHandler+0x24e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80087fe:	2801      	cmp	r0, #1
 8008800:	d024      	beq.n	800884c <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008802:	02d6      	lsls	r6, r2, #11
 8008804:	d502      	bpl.n	800880c <HAL_UART_IRQHandler+0x30>
 8008806:	0268      	lsls	r0, r5, #9
 8008808:	f100 8114 	bmi.w	8008a34 <HAL_UART_IRQHandler+0x258>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800880c:	0616      	lsls	r6, r2, #24
 800880e:	d414      	bmi.n	800883a <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008810:	0650      	lsls	r0, r2, #25
 8008812:	d501      	bpl.n	8008818 <HAL_UART_IRQHandler+0x3c>
 8008814:	064a      	lsls	r2, r1, #25
 8008816:	d400      	bmi.n	800881a <HAL_UART_IRQHandler+0x3e>
}
 8008818:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800881e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	e843 2100 	strex	r1, r2, [r3]
 8008826:	2900      	cmp	r1, #0
 8008828:	d1f7      	bne.n	800881a <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800882a:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800882c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800882e:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 8008830:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008832:	4620      	mov	r0, r4
 8008834:	f7fc fab2 	bl	8004d9c <HAL_UART_TxCpltCallback>
}
 8008838:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800883a:	060d      	lsls	r5, r1, #24
 800883c:	d5e8      	bpl.n	8008810 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 800883e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0e9      	beq.n	8008818 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8008844:	4620      	mov	r0, r4
}
 8008846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800884a:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800884c:	06d6      	lsls	r6, r2, #27
 800884e:	d5d8      	bpl.n	8008802 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008850:	06c8      	lsls	r0, r1, #27
 8008852:	d5d6      	bpl.n	8008802 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008854:	2210      	movs	r2, #16
 8008856:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	0652      	lsls	r2, r2, #25
 800885c:	f140 8107 	bpl.w	8008a6e <HAL_UART_IRQHandler+0x292>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008860:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008862:	6802      	ldr	r2, [r0, #0]
 8008864:	6852      	ldr	r2, [r2, #4]
 8008866:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008868:	2a00      	cmp	r2, #0
 800886a:	d0d5      	beq.n	8008818 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800886c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8008870:	4291      	cmp	r1, r2
 8008872:	d9d1      	bls.n	8008818 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8008874:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008878:	6982      	ldr	r2, [r0, #24]
 800887a:	2a20      	cmp	r2, #32
 800887c:	d02f      	beq.n	80088de <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	e843 2100 	strex	r1, r2, [r3]
 800888a:	2900      	cmp	r1, #0
 800888c:	d1f7      	bne.n	800887e <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	f103 0208 	add.w	r2, r3, #8
 8008892:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008896:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	f103 0508 	add.w	r5, r3, #8
 800889e:	e845 2100 	strex	r1, r2, [r5]
 80088a2:	2900      	cmp	r1, #0
 80088a4:	d1f3      	bne.n	800888e <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	f103 0208 	add.w	r2, r3, #8
 80088aa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	f103 0508 	add.w	r5, r3, #8
 80088b6:	e845 2100 	strex	r1, r2, [r5]
 80088ba:	2900      	cmp	r1, #0
 80088bc:	d1f3      	bne.n	80088a6 <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 80088be:	2220      	movs	r2, #32
 80088c0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088c4:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ce:	e843 2100 	strex	r1, r2, [r3]
 80088d2:	2900      	cmp	r1, #0
 80088d4:	d1f7      	bne.n	80088c6 <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088d6:	f7fe f801 	bl	80068dc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088da:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088de:	2302      	movs	r3, #2
 80088e0:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088e2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80088e6:	1ac9      	subs	r1, r1, r3
 80088e8:	4620      	mov	r0, r4
 80088ea:	b289      	uxth	r1, r1
 80088ec:	f7ff ff74 	bl	80087d8 <HAL_UARTEx_RxEventCallback>
}
 80088f0:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80088f2:	487d      	ldr	r0, [pc, #500]	; (8008ae8 <HAL_UART_IRQHandler+0x30c>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80088f4:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80088f8:	4008      	ands	r0, r1
 80088fa:	4330      	orrs	r0, r6
 80088fc:	f43f af7e 	beq.w	80087fc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008900:	07d5      	lsls	r5, r2, #31
 8008902:	d509      	bpl.n	8008918 <HAL_UART_IRQHandler+0x13c>
 8008904:	05c8      	lsls	r0, r1, #23
 8008906:	d507      	bpl.n	8008918 <HAL_UART_IRQHandler+0x13c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008908:	2001      	movs	r0, #1
 800890a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800890c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008910:	f040 0001 	orr.w	r0, r0, #1
 8008914:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008918:	0795      	lsls	r5, r2, #30
 800891a:	f140 8081 	bpl.w	8008a20 <HAL_UART_IRQHandler+0x244>
 800891e:	b18e      	cbz	r6, 8008944 <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008920:	2002      	movs	r0, #2
 8008922:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008924:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008928:	f040 0004 	orr.w	r0, r0, #4
 800892c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008930:	0750      	lsls	r0, r2, #29
 8008932:	d507      	bpl.n	8008944 <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008934:	2004      	movs	r0, #4
 8008936:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008938:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800893c:	f040 0002 	orr.w	r0, r0, #2
 8008940:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008944:	0710      	lsls	r0, r2, #28
 8008946:	d50b      	bpl.n	8008960 <HAL_UART_IRQHandler+0x184>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008948:	f001 0020 	and.w	r0, r1, #32
 800894c:	4330      	orrs	r0, r6
 800894e:	d007      	beq.n	8008960 <HAL_UART_IRQHandler+0x184>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008950:	2008      	movs	r0, #8
 8008952:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008954:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008958:	f040 0008 	orr.w	r0, r0, #8
 800895c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008960:	0516      	lsls	r6, r2, #20
 8008962:	d50a      	bpl.n	800897a <HAL_UART_IRQHandler+0x19e>
 8008964:	014d      	lsls	r5, r1, #5
 8008966:	d508      	bpl.n	800897a <HAL_UART_IRQHandler+0x19e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008968:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800896c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800896e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008972:	f040 0020 	orr.w	r0, r0, #32
 8008976:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800897a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800897e:	2800      	cmp	r0, #0
 8008980:	f43f af4a 	beq.w	8008818 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008984:	0690      	lsls	r0, r2, #26
 8008986:	d506      	bpl.n	8008996 <HAL_UART_IRQHandler+0x1ba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008988:	0689      	lsls	r1, r1, #26
 800898a:	d504      	bpl.n	8008996 <HAL_UART_IRQHandler+0x1ba>
        if (huart->RxISR != NULL)
 800898c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800898e:	b112      	cbz	r2, 8008996 <HAL_UART_IRQHandler+0x1ba>
          huart->RxISR(huart);
 8008990:	4620      	mov	r0, r4
 8008992:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008994:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8008996:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800899a:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800899c:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089a0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80089a4:	ea52 0501 	orrs.w	r5, r2, r1
 80089a8:	f000 8098 	beq.w	8008adc <HAL_UART_IRQHandler+0x300>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	e843 2100 	strex	r1, r2, [r3]
 80089b8:	2900      	cmp	r1, #0
 80089ba:	d1f7      	bne.n	80089ac <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	f103 0208 	add.w	r2, r3, #8
 80089c0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	f103 0008 	add.w	r0, r3, #8
 80089cc:	e840 2100 	strex	r1, r2, [r0]
 80089d0:	2900      	cmp	r1, #0
 80089d2:	d1f3      	bne.n	80089bc <HAL_UART_IRQHandler+0x1e0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80089d6:	2a01      	cmp	r2, #1
 80089d8:	d034      	beq.n	8008a44 <HAL_UART_IRQHandler+0x268>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089da:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80089dc:	2120      	movs	r1, #32
 80089de:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e2:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e4:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 80089e6:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e8:	064a      	lsls	r2, r1, #25
 80089ea:	d53c      	bpl.n	8008a66 <HAL_UART_IRQHandler+0x28a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	f103 0208 	add.w	r2, r3, #8
 80089f0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	f103 0008 	add.w	r0, r3, #8
 80089fc:	e840 2100 	strex	r1, r2, [r0]
 8008a00:	2900      	cmp	r1, #0
 8008a02:	d1f3      	bne.n	80089ec <HAL_UART_IRQHandler+0x210>
          if (huart->hdmarx != NULL)
 8008a04:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8008a06:	b370      	cbz	r0, 8008a66 <HAL_UART_IRQHandler+0x28a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a08:	4b38      	ldr	r3, [pc, #224]	; (8008aec <HAL_UART_IRQHandler+0x310>)
 8008a0a:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a0c:	f7fd ff8a 	bl	8006924 <HAL_DMA_Abort_IT>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f43f af01 	beq.w	8008818 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a16:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8008a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008a1e:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a20:	0755      	lsls	r5, r2, #29
 8008a22:	d58f      	bpl.n	8008944 <HAL_UART_IRQHandler+0x168>
 8008a24:	2e00      	cmp	r6, #0
 8008a26:	d185      	bne.n	8008934 <HAL_UART_IRQHandler+0x158>
 8008a28:	e78c      	b.n	8008944 <HAL_UART_IRQHandler+0x168>
      if (huart->RxISR != NULL)
 8008a2a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f47f af0a 	bne.w	8008846 <HAL_UART_IRQHandler+0x6a>
 8008a32:	e6f1      	b.n	8008818 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008a38:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a3a:	621a      	str	r2, [r3, #32]
}
 8008a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008a40:	f000 bc40 	b.w	80092c4 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a48:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	e843 2100 	strex	r1, r2, [r3]
 8008a50:	2900      	cmp	r1, #0
 8008a52:	d0c2      	beq.n	80089da <HAL_UART_IRQHandler+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	e853 2f00 	ldrex	r2, [r3]
 8008a58:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	e843 2100 	strex	r1, r2, [r3]
 8008a60:	2900      	cmp	r1, #0
 8008a62:	d1ef      	bne.n	8008a44 <HAL_UART_IRQHandler+0x268>
 8008a64:	e7b9      	b.n	80089da <HAL_UART_IRQHandler+0x1fe>
            HAL_UART_ErrorCallback(huart);
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7ff fe50 	bl	800870c <HAL_UART_ErrorCallback>
}
 8008a6c:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a6e:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8008a72:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a76:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8008a7a:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a7c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	f43f aeca 	beq.w	8008818 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a84:	1a41      	subs	r1, r0, r1
 8008a86:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008a88:	2900      	cmp	r1, #0
 8008a8a:	f43f aec5 	beq.w	8008818 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	e843 2000 	strex	r0, r2, [r3]
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d1f7      	bne.n	8008a8e <HAL_UART_IRQHandler+0x2b2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	f103 0208 	add.w	r2, r3, #8
 8008aa2:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	f103 0508 	add.w	r5, r3, #8
 8008aae:	e845 2000 	strex	r0, r2, [r5]
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	d1f3      	bne.n	8008a9e <HAL_UART_IRQHandler+0x2c2>
        huart->RxState = HAL_UART_STATE_READY;
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 8008abc:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008abe:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	e843 2000 	strex	r0, r2, [r3]
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d1f7      	bne.n	8008ac0 <HAL_UART_IRQHandler+0x2e4>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f7ff fe7f 	bl	80087d8 <HAL_UARTEx_RxEventCallback>
}
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8008adc:	4620      	mov	r0, r4
 8008ade:	f7ff fe15 	bl	800870c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	04000120 	.word	0x04000120
 8008aec:	080087c5 	.word	0x080087c5

08008af0 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8008af0:	b508      	push	{r3, lr}
 8008af2:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008af8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	e843 2100 	strex	r1, r2, [r3]
 8008b00:	2900      	cmp	r1, #0
 8008b02:	d1f7      	bne.n	8008af4 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	f103 0208 	add.w	r2, r3, #8
 8008b08:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	f103 0c08 	add.w	ip, r3, #8
 8008b14:	e84c 2100 	strex	r1, r2, [ip]
 8008b18:	2900      	cmp	r1, #0
 8008b1a:	d1f3      	bne.n	8008b04 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b22:	6641      	str	r1, [r0, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b24:	685a      	ldr	r2, [r3, #4]
      huart->RxISR = NULL;
 8008b26:	6681      	str	r1, [r0, #104]	; 0x68
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b28:	0211      	lsls	r1, r2, #8
 8008b2a:	d416      	bmi.n	8008b5a <UART_RxISR_16BIT.part.0+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b2c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8008b2e:	2a01      	cmp	r2, #1
 8008b30:	d124      	bne.n	8008b7c <UART_RxISR_16BIT.part.0+0x8c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b32:	2200      	movs	r2, #0
 8008b34:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b3a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	e843 2100 	strex	r1, r2, [r3]
 8008b42:	2900      	cmp	r1, #0
 8008b44:	d1f7      	bne.n	8008b36 <UART_RxISR_16BIT.part.0+0x46>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b46:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b48:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b4c:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b4e:	bf44      	itt	mi
 8008b50:	2210      	movmi	r2, #16
 8008b52:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b54:	f7ff fe40 	bl	80087d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b58:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b5e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	e843 2100 	strex	r1, r2, [r3]
 8008b66:	2900      	cmp	r1, #0
 8008b68:	d0e0      	beq.n	8008b2c <UART_RxISR_16BIT.part.0+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	e853 2f00 	ldrex	r2, [r3]
 8008b6e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	e843 2100 	strex	r1, r2, [r3]
 8008b76:	2900      	cmp	r1, #0
 8008b78:	d1ef      	bne.n	8008b5a <UART_RxISR_16BIT.part.0+0x6a>
 8008b7a:	e7d7      	b.n	8008b2c <UART_RxISR_16BIT.part.0+0x3c>
        HAL_UART_RxCpltCallback(huart);
 8008b7c:	f7f8 ff16 	bl	80019ac <HAL_UART_RxCpltCallback>
}
 8008b80:	bd08      	pop	{r3, pc}
 8008b82:	bf00      	nop

08008b84 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b84:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8008b88:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b8c:	2922      	cmp	r1, #34	; 0x22
 8008b8e:	d005      	beq.n	8008b9c <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b90:	6802      	ldr	r2, [r0, #0]
 8008b92:	6993      	ldr	r3, [r2, #24]
 8008b94:	f043 0308 	orr.w	r3, r3, #8
 8008b98:	6193      	str	r3, [r2, #24]
 8008b9a:	4770      	bx	lr
{
 8008b9c:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b9e:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ba0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ba2:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ba6:	ea02 020c 	and.w	r2, r2, ip
 8008baa:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8008bae:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8008bb2:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8008bb4:	3a01      	subs	r2, #1
 8008bb6:	b292      	uxth	r2, r2
 8008bb8:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8008bbc:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	b91b      	cbnz	r3, 8008bcc <UART_RxISR_16BIT+0x48>
  }
}
 8008bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc8:	f7ff bf92 	b.w	8008af0 <UART_RxISR_16BIT.part.0>
 8008bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop

08008bd4 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bd4:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8008bd8:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bdc:	2922      	cmp	r1, #34	; 0x22
 8008bde:	d005      	beq.n	8008bec <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008be0:	6802      	ldr	r2, [r0, #0]
 8008be2:	6993      	ldr	r3, [r2, #24]
 8008be4:	f043 0308 	orr.w	r3, r3, #8
 8008be8:	6193      	str	r3, [r2, #24]
 8008bea:	4770      	bx	lr
{
 8008bec:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bee:	6804      	ldr	r4, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bf0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bf2:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bf6:	ea02 020c 	and.w	r2, r2, ip
 8008bfa:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8008bfc:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8008c00:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8008c02:	3a01      	subs	r2, #1
 8008c04:	b292      	uxth	r2, r2
 8008c06:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8008c0a:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8008c0e:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8008c10:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8008c12:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8008c14:	b91a      	cbnz	r2, 8008c1e <UART_RxISR_8BIT+0x4a>
}
 8008c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c1a:	f7ff bf69 	b.w	8008af0 <UART_RxISR_16BIT.part.0>
 8008c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c26:	07da      	lsls	r2, r3, #31
{
 8008c28:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c2a:	d506      	bpl.n	8008c3a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c2c:	6801      	ldr	r1, [r0, #0]
 8008c2e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008c30:	684a      	ldr	r2, [r1, #4]
 8008c32:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008c36:	4322      	orrs	r2, r4
 8008c38:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c3a:	079c      	lsls	r4, r3, #30
 8008c3c:	d506      	bpl.n	8008c4c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c3e:	6801      	ldr	r1, [r0, #0]
 8008c40:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008c42:	684a      	ldr	r2, [r1, #4]
 8008c44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c48:	4322      	orrs	r2, r4
 8008c4a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c4c:	0759      	lsls	r1, r3, #29
 8008c4e:	d506      	bpl.n	8008c5e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c50:	6801      	ldr	r1, [r0, #0]
 8008c52:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008c54:	684a      	ldr	r2, [r1, #4]
 8008c56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c5a:	4322      	orrs	r2, r4
 8008c5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c5e:	071a      	lsls	r2, r3, #28
 8008c60:	d506      	bpl.n	8008c70 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c62:	6801      	ldr	r1, [r0, #0]
 8008c64:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008c66:	684a      	ldr	r2, [r1, #4]
 8008c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c6c:	4322      	orrs	r2, r4
 8008c6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c70:	06dc      	lsls	r4, r3, #27
 8008c72:	d506      	bpl.n	8008c82 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c74:	6801      	ldr	r1, [r0, #0]
 8008c76:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008c78:	688a      	ldr	r2, [r1, #8]
 8008c7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c7e:	4322      	orrs	r2, r4
 8008c80:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c82:	0699      	lsls	r1, r3, #26
 8008c84:	d506      	bpl.n	8008c94 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c86:	6801      	ldr	r1, [r0, #0]
 8008c88:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008c8a:	688a      	ldr	r2, [r1, #8]
 8008c8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c90:	4322      	orrs	r2, r4
 8008c92:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c94:	065a      	lsls	r2, r3, #25
 8008c96:	d509      	bpl.n	8008cac <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c98:	6801      	ldr	r1, [r0, #0]
 8008c9a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008c9c:	684a      	ldr	r2, [r1, #4]
 8008c9e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008ca2:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ca4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ca8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008caa:	d00b      	beq.n	8008cc4 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cac:	061b      	lsls	r3, r3, #24
 8008cae:	d506      	bpl.n	8008cbe <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cb0:	6802      	ldr	r2, [r0, #0]
 8008cb2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008cb4:	6853      	ldr	r3, [r2, #4]
 8008cb6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	6053      	str	r3, [r2, #4]
}
 8008cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cc2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cc4:	684a      	ldr	r2, [r1, #4]
 8008cc6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008cc8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008ccc:	4322      	orrs	r2, r4
 8008cce:	604a      	str	r2, [r1, #4]
 8008cd0:	e7ec      	b.n	8008cac <UART_AdvFeatureConfig+0x88>
 8008cd2:	bf00      	nop

08008cd4 <UART_CheckIdleState>:
{
 8008cd4:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd6:	2300      	movs	r3, #0
{
 8008cd8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cda:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8008cde:	f7fc f98d 	bl	8004ffc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ce2:	6822      	ldr	r2, [r4, #0]
 8008ce4:	6813      	ldr	r3, [r2, #0]
 8008ce6:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8008ce8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cea:	d40e      	bmi.n	8008d0a <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cec:	6813      	ldr	r3, [r2, #0]
 8008cee:	0759      	lsls	r1, r3, #29
 8008cf0:	d42f      	bmi.n	8008d52 <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8008cf8:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8008cfa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cfe:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d00:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8008d02:	2300      	movs	r3, #0
 8008d04:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8008d08:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d0a:	69d3      	ldr	r3, [r2, #28]
 8008d0c:	0298      	lsls	r0, r3, #10
 8008d0e:	d4ed      	bmi.n	8008cec <UART_CheckIdleState+0x18>
 8008d10:	e00c      	b.n	8008d2c <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	0749      	lsls	r1, r1, #29
 8008d16:	461a      	mov	r2, r3
 8008d18:	d505      	bpl.n	8008d26 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d1a:	69d9      	ldr	r1, [r3, #28]
 8008d1c:	0708      	lsls	r0, r1, #28
 8008d1e:	d44a      	bmi.n	8008db6 <UART_CheckIdleState+0xe2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d20:	69d9      	ldr	r1, [r3, #28]
 8008d22:	0509      	lsls	r1, r1, #20
 8008d24:	d475      	bmi.n	8008e12 <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	0298      	lsls	r0, r3, #10
 8008d2a:	d4df      	bmi.n	8008cec <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d2c:	f7fc f966 	bl	8004ffc <HAL_GetTick>
 8008d30:	1b43      	subs	r3, r0, r5
 8008d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	d3eb      	bcc.n	8008d12 <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008d3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	e843 2100 	strex	r1, r2, [r3]
 8008d46:	2900      	cmp	r1, #0
 8008d48:	d1f7      	bne.n	8008d3a <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8008d4a:	2320      	movs	r3, #32
 8008d4c:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8008d4e:	2003      	movs	r0, #3
 8008d50:	e7d7      	b.n	8008d02 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d52:	69d3      	ldr	r3, [r2, #28]
 8008d54:	025b      	lsls	r3, r3, #9
 8008d56:	d4cc      	bmi.n	8008cf2 <UART_CheckIdleState+0x1e>
 8008d58:	e00d      	b.n	8008d76 <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	0750      	lsls	r0, r2, #29
 8008d5e:	d507      	bpl.n	8008d70 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d60:	69da      	ldr	r2, [r3, #28]
 8008d62:	0711      	lsls	r1, r2, #28
 8008d64:	f100 8083 	bmi.w	8008e6e <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d68:	69da      	ldr	r2, [r3, #28]
 8008d6a:	0512      	lsls	r2, r2, #20
 8008d6c:	f100 80ad 	bmi.w	8008eca <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	025b      	lsls	r3, r3, #9
 8008d74:	d4bd      	bmi.n	8008cf2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d76:	f7fc f941 	bl	8004ffc <HAL_GetTick>
 8008d7a:	1b43      	subs	r3, r0, r5
 8008d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	d3ea      	bcc.n	8008d5a <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	e843 2100 	strex	r1, r2, [r3]
 8008d90:	2900      	cmp	r1, #0
 8008d92:	d1f7      	bne.n	8008d84 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	f103 0208 	add.w	r2, r3, #8
 8008d98:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	f103 0008 	add.w	r0, r3, #8
 8008da4:	e840 2100 	strex	r1, r2, [r0]
 8008da8:	2900      	cmp	r1, #0
 8008daa:	d1f3      	bne.n	8008d94 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8008dac:	2320      	movs	r3, #32
 8008dae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8008db2:	2003      	movs	r0, #3
 8008db4:	e7a5      	b.n	8008d02 <UART_CheckIdleState+0x2e>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008db6:	2208      	movs	r2, #8
 8008db8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	e843 2100 	strex	r1, r2, [r3]
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d1f7      	bne.n	8008dba <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dca:	f103 0208 	add.w	r2, r3, #8
 8008dce:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	f103 0008 	add.w	r0, r3, #8
 8008dda:	e840 2100 	strex	r1, r2, [r0]
 8008dde:	2900      	cmp	r1, #0
 8008de0:	d1f3      	bne.n	8008dca <UART_CheckIdleState+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008de4:	2a01      	cmp	r2, #1
 8008de6:	d00b      	beq.n	8008e00 <UART_CheckIdleState+0x12c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008dea:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dec:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008dee:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008df2:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df4:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8008df6:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dfa:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8008dfe:	e79c      	b.n	8008d3a <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e04:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	e843 2100 	strex	r1, r2, [r3]
 8008e0c:	2900      	cmp	r1, #0
 8008e0e:	d1f7      	bne.n	8008e00 <UART_CheckIdleState+0x12c>
 8008e10:	e7ea      	b.n	8008de8 <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e16:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e20:	e843 2100 	strex	r1, r2, [r3]
 8008e24:	2900      	cmp	r1, #0
 8008e26:	d1f7      	bne.n	8008e18 <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	f103 0208 	add.w	r2, r3, #8
 8008e2c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e30:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	f103 0008 	add.w	r0, r3, #8
 8008e38:	e840 2100 	strex	r1, r2, [r0]
 8008e3c:	2900      	cmp	r1, #0
 8008e3e:	d1f3      	bne.n	8008e28 <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e40:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008e42:	2a01      	cmp	r2, #1
 8008e44:	d00a      	beq.n	8008e5c <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e46:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008e48:	2120      	movs	r1, #32
 8008e4a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008e4e:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e50:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8008e52:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e56:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8008e5a:	e76e      	b.n	8008d3a <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e60:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	e843 2100 	strex	r1, r2, [r3]
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	d1f7      	bne.n	8008e5c <UART_CheckIdleState+0x188>
 8008e6c:	e7eb      	b.n	8008e46 <UART_CheckIdleState+0x172>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e6e:	2208      	movs	r2, #8
 8008e70:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e76:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	e843 2100 	strex	r1, r2, [r3]
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d1f7      	bne.n	8008e72 <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	f103 0208 	add.w	r2, r3, #8
 8008e86:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	f103 0008 	add.w	r0, r3, #8
 8008e92:	e840 2100 	strex	r1, r2, [r0]
 8008e96:	2900      	cmp	r1, #0
 8008e98:	d1f3      	bne.n	8008e82 <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008e9c:	2a01      	cmp	r2, #1
 8008e9e:	d00b      	beq.n	8008eb8 <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008ea2:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ea4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008ea6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008eaa:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eac:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8008eae:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008eb2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8008eb6:	e765      	b.n	8008d84 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ebc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	e843 2100 	strex	r1, r2, [r3]
 8008ec4:	2900      	cmp	r1, #0
 8008ec6:	d1f7      	bne.n	8008eb8 <UART_CheckIdleState+0x1e4>
 8008ec8:	e7ea      	b.n	8008ea0 <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ece:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ed4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	e843 2100 	strex	r1, r2, [r3]
 8008edc:	2900      	cmp	r1, #0
 8008ede:	d1f7      	bne.n	8008ed0 <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	f103 0208 	add.w	r2, r3, #8
 8008ee4:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	f103 0008 	add.w	r0, r3, #8
 8008ef0:	e840 2100 	strex	r1, r2, [r0]
 8008ef4:	2900      	cmp	r1, #0
 8008ef6:	d1f3      	bne.n	8008ee0 <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008efa:	2a01      	cmp	r2, #1
 8008efc:	d00a      	beq.n	8008f14 <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008efe:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008f00:	2120      	movs	r1, #32
 8008f02:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008f06:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f08:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8008f0a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f0e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8008f12:	e737      	b.n	8008d84 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f18:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	e843 2100 	strex	r1, r2, [r3]
 8008f20:	2900      	cmp	r1, #0
 8008f22:	d1f7      	bne.n	8008f14 <UART_CheckIdleState+0x240>
 8008f24:	e7eb      	b.n	8008efe <UART_CheckIdleState+0x22a>
 8008f26:	bf00      	nop

08008f28 <HAL_UART_Init>:
  if (huart == NULL)
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	f000 80ec 	beq.w	8009106 <HAL_UART_Init+0x1de>
{
 8008f2e:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8008f30:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8008f32:	4604      	mov	r4, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d037      	beq.n	8008fa8 <HAL_UART_Init+0x80>
  __HAL_UART_DISABLE(huart);
 8008f38:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f3a:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8008f3c:	2224      	movs	r2, #36	; 0x24
 8008f3e:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8008f40:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f42:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8008f44:	f021 0101 	bic.w	r1, r1, #1
 8008f48:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f4a:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f4c:	69e1      	ldr	r1, [r4, #28]
 8008f4e:	432a      	orrs	r2, r5
 8008f50:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f52:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f56:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f58:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f5c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f5e:	4302      	orrs	r2, r0
 8008f60:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8008f66:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f68:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008f6c:	4302      	orrs	r2, r0
 8008f6e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f70:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f72:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f74:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8008f78:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f7a:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f7c:	4886      	ldr	r0, [pc, #536]	; (8009198 <HAL_UART_Init+0x270>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f7e:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f80:	4283      	cmp	r3, r0
 8008f82:	d016      	beq.n	8008fb2 <HAL_UART_Init+0x8a>
 8008f84:	4a85      	ldr	r2, [pc, #532]	; (800919c <HAL_UART_Init+0x274>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d046      	beq.n	8009018 <HAL_UART_Init+0xf0>
 8008f8a:	4a85      	ldr	r2, [pc, #532]	; (80091a0 <HAL_UART_Init+0x278>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	f000 80a4 	beq.w	80090da <HAL_UART_Init+0x1b2>
 8008f92:	4a84      	ldr	r2, [pc, #528]	; (80091a4 <HAL_UART_Init+0x27c>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d071      	beq.n	800907c <HAL_UART_Init+0x154>
 8008f98:	4a83      	ldr	r2, [pc, #524]	; (80091a8 <HAL_UART_Init+0x280>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d07b      	beq.n	8009096 <HAL_UART_Init+0x16e>
  huart->RxISR = NULL;
 8008f9e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008fa0:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8008fa4:	2001      	movs	r0, #1
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8008fa8:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8008fac:	f7fb fe8e 	bl	8004ccc <HAL_UART_MspInit>
 8008fb0:	e7c2      	b.n	8008f38 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fb2:	4b7e      	ldr	r3, [pc, #504]	; (80091ac <HAL_UART_Init+0x284>)
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	f003 0303 	and.w	r3, r3, #3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d93f      	bls.n	8009040 <HAL_UART_Init+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fc0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008fc4:	f000 80c9 	beq.w	800915a <HAL_UART_Init+0x232>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fc8:	f7fe fb98 	bl	80076fc <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008fcc:	b160      	cbz	r0, 8008fe8 <HAL_UART_Init+0xc0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fce:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fd0:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008fd4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008fd8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008fdc:	f1a0 0310 	sub.w	r3, r0, #16
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d8dc      	bhi.n	8008f9e <HAL_UART_Init+0x76>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	60d8      	str	r0, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008fe8:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8008fea:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008fec:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ff0:	2a00      	cmp	r2, #0
 8008ff2:	d16e      	bne.n	80090d2 <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ff4:	6823      	ldr	r3, [r4, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ffc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009004:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800900c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800900e:	601a      	str	r2, [r3, #0]
}
 8009010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8009014:	f7ff be5e 	b.w	8008cd4 <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009018:	4b64      	ldr	r3, [pc, #400]	; (80091ac <HAL_UART_Init+0x284>)
 800901a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009024:	d046      	beq.n	80090b4 <HAL_UART_Init+0x18c>
 8009026:	d84b      	bhi.n	80090c0 <HAL_UART_Init+0x198>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d03d      	beq.n	80090a8 <HAL_UART_Init+0x180>
 800902c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009030:	d1b5      	bne.n	8008f9e <HAL_UART_Init+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009032:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009036:	f000 8093 	beq.w	8009160 <HAL_UART_Init+0x238>
        pclk = HAL_RCC_GetSysClockFreq();
 800903a:	f7fe fb0d 	bl	8007658 <HAL_RCC_GetSysClockFreq>
        break;
 800903e:	e7c5      	b.n	8008fcc <HAL_UART_Init+0xa4>
 8009040:	4a5b      	ldr	r2, [pc, #364]	; (80091b0 <HAL_UART_Init+0x288>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009042:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009046:	5cd3      	ldrb	r3, [r2, r3]
 8009048:	f000 808d 	beq.w	8009166 <HAL_UART_Init+0x23e>
    switch (clocksource)
 800904c:	2b08      	cmp	r3, #8
 800904e:	d8a6      	bhi.n	8008f9e <HAL_UART_Init+0x76>
 8009050:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <HAL_UART_Init+0x130>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	080090af 	.word	0x080090af
 800905c:	08008fc9 	.word	0x08008fc9
 8009060:	080090cf 	.word	0x080090cf
 8009064:	08008f9f 	.word	0x08008f9f
 8009068:	0800903b 	.word	0x0800903b
 800906c:	08008f9f 	.word	0x08008f9f
 8009070:	08008f9f 	.word	0x08008f9f
 8009074:	08008f9f 	.word	0x08008f9f
 8009078:	080090bb 	.word	0x080090bb
  UART_GETCLOCKSOURCE(huart, clocksource);
 800907c:	4b4b      	ldr	r3, [pc, #300]	; (80091ac <HAL_UART_Init+0x284>)
 800907e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009080:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009088:	d014      	beq.n	80090b4 <HAL_UART_Init+0x18c>
 800908a:	d838      	bhi.n	80090fe <HAL_UART_Init+0x1d6>
 800908c:	b163      	cbz	r3, 80090a8 <HAL_UART_Init+0x180>
 800908e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009092:	d0ce      	beq.n	8009032 <HAL_UART_Init+0x10a>
 8009094:	e783      	b.n	8008f9e <HAL_UART_Init+0x76>
 8009096:	4b45      	ldr	r3, [pc, #276]	; (80091ac <HAL_UART_Init+0x284>)
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800909e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090a2:	d007      	beq.n	80090b4 <HAL_UART_Init+0x18c>
 80090a4:	d835      	bhi.n	8009112 <HAL_UART_Init+0x1ea>
 80090a6:	bb83      	cbnz	r3, 800910a <HAL_UART_Init+0x1e2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090a8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80090ac:	d035      	beq.n	800911a <HAL_UART_Init+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80090ae:	f7fe fb0d 	bl	80076cc <HAL_RCC_GetPCLK1Freq>
        break;
 80090b2:	e78b      	b.n	8008fcc <HAL_UART_Init+0xa4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090b4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80090b8:	d04a      	beq.n	8009150 <HAL_UART_Init+0x228>
        pclk = (uint32_t) LSE_VALUE;
 80090ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80090be:	e786      	b.n	8008fce <HAL_UART_Init+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090c4:	f47f af6b 	bne.w	8008f9e <HAL_UART_Init+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090c8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80090cc:	d043      	beq.n	8009156 <HAL_UART_Init+0x22e>
    switch (clocksource)
 80090ce:	4839      	ldr	r0, [pc, #228]	; (80091b4 <HAL_UART_Init+0x28c>)
 80090d0:	e77d      	b.n	8008fce <HAL_UART_Init+0xa6>
    UART_AdvFeatureConfig(huart);
 80090d2:	4620      	mov	r0, r4
 80090d4:	f7ff fda6 	bl	8008c24 <UART_AdvFeatureConfig>
 80090d8:	e78c      	b.n	8008ff4 <HAL_UART_Init+0xcc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090da:	4b34      	ldr	r3, [pc, #208]	; (80091ac <HAL_UART_Init+0x284>)
 80090dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090de:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80090e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80090e6:	d0e5      	beq.n	80090b4 <HAL_UART_Init+0x18c>
 80090e8:	d805      	bhi.n	80090f6 <HAL_UART_Init+0x1ce>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0dc      	beq.n	80090a8 <HAL_UART_Init+0x180>
 80090ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090f2:	d09e      	beq.n	8009032 <HAL_UART_Init+0x10a>
 80090f4:	e753      	b.n	8008f9e <HAL_UART_Init+0x76>
 80090f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80090fa:	d0e5      	beq.n	80090c8 <HAL_UART_Init+0x1a0>
 80090fc:	e74f      	b.n	8008f9e <HAL_UART_Init+0x76>
 80090fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009102:	d0e1      	beq.n	80090c8 <HAL_UART_Init+0x1a0>
 8009104:	e74b      	b.n	8008f9e <HAL_UART_Init+0x76>
}
 8009106:	2001      	movs	r0, #1
 8009108:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 800910a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800910e:	d090      	beq.n	8009032 <HAL_UART_Init+0x10a>
 8009110:	e745      	b.n	8008f9e <HAL_UART_Init+0x76>
 8009112:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009116:	d0d7      	beq.n	80090c8 <HAL_UART_Init+0x1a0>
 8009118:	e741      	b.n	8008f9e <HAL_UART_Init+0x76>
        pclk = HAL_RCC_GetPCLK1Freq();
 800911a:	f7fe fad7 	bl	80076cc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800911e:	2800      	cmp	r0, #0
 8009120:	f43f af62 	beq.w	8008fe8 <HAL_UART_Init+0xc0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009124:	0043      	lsls	r3, r0, #1
 8009126:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009128:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800912c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009130:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009134:	f1a3 0210 	sub.w	r2, r3, #16
 8009138:	428a      	cmp	r2, r1
 800913a:	f63f af30 	bhi.w	8008f9e <HAL_UART_Init+0x76>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800913e:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009142:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009144:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009146:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800914a:	4313      	orrs	r3, r2
 800914c:	60cb      	str	r3, [r1, #12]
  return ret;
 800914e:	e74b      	b.n	8008fe8 <HAL_UART_Init+0xc0>
    switch (clocksource)
 8009150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009154:	e7e7      	b.n	8009126 <HAL_UART_Init+0x1fe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009156:	4b18      	ldr	r3, [pc, #96]	; (80091b8 <HAL_UART_Init+0x290>)
 8009158:	e7e5      	b.n	8009126 <HAL_UART_Init+0x1fe>
        pclk = HAL_RCC_GetPCLK2Freq();
 800915a:	f7fe facf 	bl	80076fc <HAL_RCC_GetPCLK2Freq>
        break;
 800915e:	e7de      	b.n	800911e <HAL_UART_Init+0x1f6>
        pclk = HAL_RCC_GetSysClockFreq();
 8009160:	f7fe fa7a 	bl	8007658 <HAL_RCC_GetSysClockFreq>
        break;
 8009164:	e7db      	b.n	800911e <HAL_UART_Init+0x1f6>
    switch (clocksource)
 8009166:	2b08      	cmp	r3, #8
 8009168:	f63f af19 	bhi.w	8008f9e <HAL_UART_Init+0x76>
 800916c:	a201      	add	r2, pc, #4	; (adr r2, 8009174 <HAL_UART_Init+0x24c>)
 800916e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009172:	bf00      	nop
 8009174:	0800911b 	.word	0x0800911b
 8009178:	0800915b 	.word	0x0800915b
 800917c:	08009157 	.word	0x08009157
 8009180:	08008f9f 	.word	0x08008f9f
 8009184:	08009161 	.word	0x08009161
 8009188:	08008f9f 	.word	0x08008f9f
 800918c:	08008f9f 	.word	0x08008f9f
 8009190:	08008f9f 	.word	0x08008f9f
 8009194:	08009151 	.word	0x08009151
 8009198:	40013800 	.word	0x40013800
 800919c:	40004400 	.word	0x40004400
 80091a0:	40004800 	.word	0x40004800
 80091a4:	40004c00 	.word	0x40004c00
 80091a8:	40005000 	.word	0x40005000
 80091ac:	40021000 	.word	0x40021000
 80091b0:	0800dc1c 	.word	0x0800dc1c
 80091b4:	007a1200 	.word	0x007a1200
 80091b8:	00f42400 	.word	0x00f42400

080091bc <UART_Start_Receive_IT>:
{
 80091bc:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 80091be:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 80091c0:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 80091c2:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 80091c4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 80091c8:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80091cc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80091d0:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 80091d2:	d044      	beq.n	800925e <UART_Start_Receive_IT+0xa2>
 80091d4:	2c00      	cmp	r4, #0
 80091d6:	d03c      	beq.n	8009252 <UART_Start_Receive_IT+0x96>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d8:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091da:	2122      	movs	r1, #34	; 0x22
 80091dc:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091de:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  UART_MASK_COMPUTATION(huart);
 80091e2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091e6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	f102 0308 	add.w	r3, r2, #8
 80091ee:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	f102 0408 	add.w	r4, r2, #8
 80091fa:	e844 3100 	strex	r1, r3, [r4]
 80091fe:	2900      	cmp	r1, #0
 8009200:	d1f3      	bne.n	80091ea <UART_Start_Receive_IT+0x2e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009202:	6883      	ldr	r3, [r0, #8]
 8009204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009208:	6903      	ldr	r3, [r0, #16]
 800920a:	d00e      	beq.n	800922a <UART_Start_Receive_IT+0x6e>
    huart->RxISR = UART_RxISR_8BIT;
 800920c:	491d      	ldr	r1, [pc, #116]	; (8009284 <UART_Start_Receive_IT+0xc8>)
 800920e:	6681      	str	r1, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009210:	b173      	cbz	r3, 8009230 <UART_Start_Receive_IT+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009216:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	e842 3100 	strex	r1, r3, [r2]
 800921e:	2900      	cmp	r1, #0
 8009220:	d1f7      	bne.n	8009212 <UART_Start_Receive_IT+0x56>
}
 8009222:	2000      	movs	r0, #0
 8009224:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009228:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922a:	b9fb      	cbnz	r3, 800926c <UART_Start_Receive_IT+0xb0>
 800922c:	4b16      	ldr	r3, [pc, #88]	; (8009288 <UART_Start_Receive_IT+0xcc>)
 800922e:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009234:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009238:	e842 3100 	strex	r1, r3, [r2]
 800923c:	2900      	cmp	r1, #0
 800923e:	d0f0      	beq.n	8009222 <UART_Start_Receive_IT+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	e852 3f00 	ldrex	r3, [r2]
 8009244:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009248:	e842 3100 	strex	r1, r3, [r2]
 800924c:	2900      	cmp	r1, #0
 800924e:	d1ef      	bne.n	8009230 <UART_Start_Receive_IT+0x74>
 8009250:	e7e7      	b.n	8009222 <UART_Start_Receive_IT+0x66>
  UART_MASK_COMPUTATION(huart);
 8009252:	6903      	ldr	r3, [r0, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	bf0c      	ite	eq
 8009258:	23ff      	moveq	r3, #255	; 0xff
 800925a:	237f      	movne	r3, #127	; 0x7f
 800925c:	e7bc      	b.n	80091d8 <UART_Start_Receive_IT+0x1c>
 800925e:	6902      	ldr	r2, [r0, #16]
 8009260:	2a00      	cmp	r2, #0
 8009262:	f240 13ff 	movw	r3, #511	; 0x1ff
 8009266:	bf18      	it	ne
 8009268:	23ff      	movne	r3, #255	; 0xff
 800926a:	e7b5      	b.n	80091d8 <UART_Start_Receive_IT+0x1c>
    huart->RxISR = UART_RxISR_8BIT;
 800926c:	4b05      	ldr	r3, [pc, #20]	; (8009284 <UART_Start_Receive_IT+0xc8>)
 800926e:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009274:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	e842 3100 	strex	r1, r3, [r2]
 800927c:	2900      	cmp	r1, #0
 800927e:	d1c8      	bne.n	8009212 <UART_Start_Receive_IT+0x56>
 8009280:	e7cf      	b.n	8009222 <UART_Start_Receive_IT+0x66>
 8009282:	bf00      	nop
 8009284:	08008bd5 	.word	0x08008bd5
 8009288:	08008b85 	.word	0x08008b85

0800928c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800928c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8009290:	2b20      	cmp	r3, #32
 8009292:	d115      	bne.n	80092c0 <HAL_UART_Receive_IT+0x34>
    if ((pData == NULL) || (Size == 0U))
 8009294:	b101      	cbz	r1, 8009298 <HAL_UART_Receive_IT+0xc>
 8009296:	b90a      	cbnz	r2, 800929c <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8009298:	2001      	movs	r0, #1
}
 800929a:	4770      	bx	lr
{
 800929c:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800929e:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092a0:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092a2:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092a4:	6863      	ldr	r3, [r4, #4]
 80092a6:	021b      	lsls	r3, r3, #8
 80092a8:	d507      	bpl.n	80092ba <HAL_UART_Receive_IT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	e844 3500 	strex	r5, r3, [r4]
 80092b6:	2d00      	cmp	r5, #0
 80092b8:	d1f7      	bne.n	80092aa <HAL_UART_Receive_IT+0x1e>
}
 80092ba:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80092bc:	f7ff bf7e 	b.w	80091bc <UART_Start_Receive_IT>
    return HAL_BUSY;
 80092c0:	2002      	movs	r0, #2
 80092c2:	4770      	bx	lr

080092c4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop

080092c8 <atan2>:
 80092c8:	f000 ba36 	b.w	8009738 <__ieee754_atan2>
 80092cc:	0000      	movs	r0, r0
	...

080092d0 <cos>:
 80092d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092d2:	ec53 2b10 	vmov	r2, r3, d0
 80092d6:	4826      	ldr	r0, [pc, #152]	; (8009370 <cos+0xa0>)
 80092d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80092dc:	4281      	cmp	r1, r0
 80092de:	dc06      	bgt.n	80092ee <cos+0x1e>
 80092e0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009368 <cos+0x98>
 80092e4:	b005      	add	sp, #20
 80092e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80092ea:	f000 b89d 	b.w	8009428 <__kernel_cos>
 80092ee:	4821      	ldr	r0, [pc, #132]	; (8009374 <cos+0xa4>)
 80092f0:	4281      	cmp	r1, r0
 80092f2:	dd09      	ble.n	8009308 <cos+0x38>
 80092f4:	ee10 0a10 	vmov	r0, s0
 80092f8:	4619      	mov	r1, r3
 80092fa:	f7f6 ffc5 	bl	8000288 <__aeabi_dsub>
 80092fe:	ec41 0b10 	vmov	d0, r0, r1
 8009302:	b005      	add	sp, #20
 8009304:	f85d fb04 	ldr.w	pc, [sp], #4
 8009308:	4668      	mov	r0, sp
 800930a:	f000 fadd 	bl	80098c8 <__ieee754_rem_pio2>
 800930e:	f000 0003 	and.w	r0, r0, #3
 8009312:	2801      	cmp	r0, #1
 8009314:	d00b      	beq.n	800932e <cos+0x5e>
 8009316:	2802      	cmp	r0, #2
 8009318:	d016      	beq.n	8009348 <cos+0x78>
 800931a:	b9e0      	cbnz	r0, 8009356 <cos+0x86>
 800931c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009320:	ed9d 0b00 	vldr	d0, [sp]
 8009324:	f000 f880 	bl	8009428 <__kernel_cos>
 8009328:	ec51 0b10 	vmov	r0, r1, d0
 800932c:	e7e7      	b.n	80092fe <cos+0x2e>
 800932e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009332:	ed9d 0b00 	vldr	d0, [sp]
 8009336:	f000 f93f 	bl	80095b8 <__kernel_sin>
 800933a:	ec53 2b10 	vmov	r2, r3, d0
 800933e:	ee10 0a10 	vmov	r0, s0
 8009342:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009346:	e7da      	b.n	80092fe <cos+0x2e>
 8009348:	ed9d 1b02 	vldr	d1, [sp, #8]
 800934c:	ed9d 0b00 	vldr	d0, [sp]
 8009350:	f000 f86a 	bl	8009428 <__kernel_cos>
 8009354:	e7f1      	b.n	800933a <cos+0x6a>
 8009356:	ed9d 1b02 	vldr	d1, [sp, #8]
 800935a:	ed9d 0b00 	vldr	d0, [sp]
 800935e:	2001      	movs	r0, #1
 8009360:	f000 f92a 	bl	80095b8 <__kernel_sin>
 8009364:	e7e0      	b.n	8009328 <cos+0x58>
 8009366:	bf00      	nop
	...
 8009370:	3fe921fb 	.word	0x3fe921fb
 8009374:	7fefffff 	.word	0x7fefffff

08009378 <sin>:
 8009378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800937a:	ec53 2b10 	vmov	r2, r3, d0
 800937e:	4828      	ldr	r0, [pc, #160]	; (8009420 <sin+0xa8>)
 8009380:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009384:	4281      	cmp	r1, r0
 8009386:	dc07      	bgt.n	8009398 <sin+0x20>
 8009388:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009418 <sin+0xa0>
 800938c:	2000      	movs	r0, #0
 800938e:	b005      	add	sp, #20
 8009390:	f85d eb04 	ldr.w	lr, [sp], #4
 8009394:	f000 b910 	b.w	80095b8 <__kernel_sin>
 8009398:	4822      	ldr	r0, [pc, #136]	; (8009424 <sin+0xac>)
 800939a:	4281      	cmp	r1, r0
 800939c:	dd09      	ble.n	80093b2 <sin+0x3a>
 800939e:	ee10 0a10 	vmov	r0, s0
 80093a2:	4619      	mov	r1, r3
 80093a4:	f7f6 ff70 	bl	8000288 <__aeabi_dsub>
 80093a8:	ec41 0b10 	vmov	d0, r0, r1
 80093ac:	b005      	add	sp, #20
 80093ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80093b2:	4668      	mov	r0, sp
 80093b4:	f000 fa88 	bl	80098c8 <__ieee754_rem_pio2>
 80093b8:	f000 0003 	and.w	r0, r0, #3
 80093bc:	2801      	cmp	r0, #1
 80093be:	d00c      	beq.n	80093da <sin+0x62>
 80093c0:	2802      	cmp	r0, #2
 80093c2:	d011      	beq.n	80093e8 <sin+0x70>
 80093c4:	b9f0      	cbnz	r0, 8009404 <sin+0x8c>
 80093c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093ca:	ed9d 0b00 	vldr	d0, [sp]
 80093ce:	2001      	movs	r0, #1
 80093d0:	f000 f8f2 	bl	80095b8 <__kernel_sin>
 80093d4:	ec51 0b10 	vmov	r0, r1, d0
 80093d8:	e7e6      	b.n	80093a8 <sin+0x30>
 80093da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093de:	ed9d 0b00 	vldr	d0, [sp]
 80093e2:	f000 f821 	bl	8009428 <__kernel_cos>
 80093e6:	e7f5      	b.n	80093d4 <sin+0x5c>
 80093e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80093ec:	ed9d 0b00 	vldr	d0, [sp]
 80093f0:	2001      	movs	r0, #1
 80093f2:	f000 f8e1 	bl	80095b8 <__kernel_sin>
 80093f6:	ec53 2b10 	vmov	r2, r3, d0
 80093fa:	ee10 0a10 	vmov	r0, s0
 80093fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009402:	e7d1      	b.n	80093a8 <sin+0x30>
 8009404:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009408:	ed9d 0b00 	vldr	d0, [sp]
 800940c:	f000 f80c 	bl	8009428 <__kernel_cos>
 8009410:	e7f1      	b.n	80093f6 <sin+0x7e>
 8009412:	bf00      	nop
 8009414:	f3af 8000 	nop.w
	...
 8009420:	3fe921fb 	.word	0x3fe921fb
 8009424:	7fefffff 	.word	0x7fefffff

08009428 <__kernel_cos>:
 8009428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	ec57 6b10 	vmov	r6, r7, d0
 8009430:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009434:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009438:	ed8d 1b00 	vstr	d1, [sp]
 800943c:	da07      	bge.n	800944e <__kernel_cos+0x26>
 800943e:	ee10 0a10 	vmov	r0, s0
 8009442:	4639      	mov	r1, r7
 8009444:	f7f7 fb88 	bl	8000b58 <__aeabi_d2iz>
 8009448:	2800      	cmp	r0, #0
 800944a:	f000 8088 	beq.w	800955e <__kernel_cos+0x136>
 800944e:	4632      	mov	r2, r6
 8009450:	463b      	mov	r3, r7
 8009452:	4630      	mov	r0, r6
 8009454:	4639      	mov	r1, r7
 8009456:	f7f7 f8cf 	bl	80005f8 <__aeabi_dmul>
 800945a:	4b51      	ldr	r3, [pc, #324]	; (80095a0 <__kernel_cos+0x178>)
 800945c:	2200      	movs	r2, #0
 800945e:	4604      	mov	r4, r0
 8009460:	460d      	mov	r5, r1
 8009462:	f7f7 f8c9 	bl	80005f8 <__aeabi_dmul>
 8009466:	a340      	add	r3, pc, #256	; (adr r3, 8009568 <__kernel_cos+0x140>)
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	4682      	mov	sl, r0
 800946e:	468b      	mov	fp, r1
 8009470:	4620      	mov	r0, r4
 8009472:	4629      	mov	r1, r5
 8009474:	f7f7 f8c0 	bl	80005f8 <__aeabi_dmul>
 8009478:	a33d      	add	r3, pc, #244	; (adr r3, 8009570 <__kernel_cos+0x148>)
 800947a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947e:	f7f6 ff05 	bl	800028c <__adddf3>
 8009482:	4622      	mov	r2, r4
 8009484:	462b      	mov	r3, r5
 8009486:	f7f7 f8b7 	bl	80005f8 <__aeabi_dmul>
 800948a:	a33b      	add	r3, pc, #236	; (adr r3, 8009578 <__kernel_cos+0x150>)
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f7f6 fefa 	bl	8000288 <__aeabi_dsub>
 8009494:	4622      	mov	r2, r4
 8009496:	462b      	mov	r3, r5
 8009498:	f7f7 f8ae 	bl	80005f8 <__aeabi_dmul>
 800949c:	a338      	add	r3, pc, #224	; (adr r3, 8009580 <__kernel_cos+0x158>)
 800949e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a2:	f7f6 fef3 	bl	800028c <__adddf3>
 80094a6:	4622      	mov	r2, r4
 80094a8:	462b      	mov	r3, r5
 80094aa:	f7f7 f8a5 	bl	80005f8 <__aeabi_dmul>
 80094ae:	a336      	add	r3, pc, #216	; (adr r3, 8009588 <__kernel_cos+0x160>)
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f7f6 fee8 	bl	8000288 <__aeabi_dsub>
 80094b8:	4622      	mov	r2, r4
 80094ba:	462b      	mov	r3, r5
 80094bc:	f7f7 f89c 	bl	80005f8 <__aeabi_dmul>
 80094c0:	a333      	add	r3, pc, #204	; (adr r3, 8009590 <__kernel_cos+0x168>)
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	f7f6 fee1 	bl	800028c <__adddf3>
 80094ca:	4622      	mov	r2, r4
 80094cc:	462b      	mov	r3, r5
 80094ce:	f7f7 f893 	bl	80005f8 <__aeabi_dmul>
 80094d2:	4622      	mov	r2, r4
 80094d4:	462b      	mov	r3, r5
 80094d6:	f7f7 f88f 	bl	80005f8 <__aeabi_dmul>
 80094da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094de:	4604      	mov	r4, r0
 80094e0:	460d      	mov	r5, r1
 80094e2:	4630      	mov	r0, r6
 80094e4:	4639      	mov	r1, r7
 80094e6:	f7f7 f887 	bl	80005f8 <__aeabi_dmul>
 80094ea:	460b      	mov	r3, r1
 80094ec:	4602      	mov	r2, r0
 80094ee:	4629      	mov	r1, r5
 80094f0:	4620      	mov	r0, r4
 80094f2:	f7f6 fec9 	bl	8000288 <__aeabi_dsub>
 80094f6:	4b2b      	ldr	r3, [pc, #172]	; (80095a4 <__kernel_cos+0x17c>)
 80094f8:	4598      	cmp	r8, r3
 80094fa:	4606      	mov	r6, r0
 80094fc:	460f      	mov	r7, r1
 80094fe:	dc10      	bgt.n	8009522 <__kernel_cos+0xfa>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	4650      	mov	r0, sl
 8009506:	4659      	mov	r1, fp
 8009508:	f7f6 febe 	bl	8000288 <__aeabi_dsub>
 800950c:	460b      	mov	r3, r1
 800950e:	4926      	ldr	r1, [pc, #152]	; (80095a8 <__kernel_cos+0x180>)
 8009510:	4602      	mov	r2, r0
 8009512:	2000      	movs	r0, #0
 8009514:	f7f6 feb8 	bl	8000288 <__aeabi_dsub>
 8009518:	ec41 0b10 	vmov	d0, r0, r1
 800951c:	b003      	add	sp, #12
 800951e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009522:	4b22      	ldr	r3, [pc, #136]	; (80095ac <__kernel_cos+0x184>)
 8009524:	4920      	ldr	r1, [pc, #128]	; (80095a8 <__kernel_cos+0x180>)
 8009526:	4598      	cmp	r8, r3
 8009528:	bfcc      	ite	gt
 800952a:	4d21      	ldrgt	r5, [pc, #132]	; (80095b0 <__kernel_cos+0x188>)
 800952c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009530:	2400      	movs	r4, #0
 8009532:	4622      	mov	r2, r4
 8009534:	462b      	mov	r3, r5
 8009536:	2000      	movs	r0, #0
 8009538:	f7f6 fea6 	bl	8000288 <__aeabi_dsub>
 800953c:	4622      	mov	r2, r4
 800953e:	4680      	mov	r8, r0
 8009540:	4689      	mov	r9, r1
 8009542:	462b      	mov	r3, r5
 8009544:	4650      	mov	r0, sl
 8009546:	4659      	mov	r1, fp
 8009548:	f7f6 fe9e 	bl	8000288 <__aeabi_dsub>
 800954c:	4632      	mov	r2, r6
 800954e:	463b      	mov	r3, r7
 8009550:	f7f6 fe9a 	bl	8000288 <__aeabi_dsub>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4640      	mov	r0, r8
 800955a:	4649      	mov	r1, r9
 800955c:	e7da      	b.n	8009514 <__kernel_cos+0xec>
 800955e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009598 <__kernel_cos+0x170>
 8009562:	e7db      	b.n	800951c <__kernel_cos+0xf4>
 8009564:	f3af 8000 	nop.w
 8009568:	be8838d4 	.word	0xbe8838d4
 800956c:	bda8fae9 	.word	0xbda8fae9
 8009570:	bdb4b1c4 	.word	0xbdb4b1c4
 8009574:	3e21ee9e 	.word	0x3e21ee9e
 8009578:	809c52ad 	.word	0x809c52ad
 800957c:	3e927e4f 	.word	0x3e927e4f
 8009580:	19cb1590 	.word	0x19cb1590
 8009584:	3efa01a0 	.word	0x3efa01a0
 8009588:	16c15177 	.word	0x16c15177
 800958c:	3f56c16c 	.word	0x3f56c16c
 8009590:	5555554c 	.word	0x5555554c
 8009594:	3fa55555 	.word	0x3fa55555
 8009598:	00000000 	.word	0x00000000
 800959c:	3ff00000 	.word	0x3ff00000
 80095a0:	3fe00000 	.word	0x3fe00000
 80095a4:	3fd33332 	.word	0x3fd33332
 80095a8:	3ff00000 	.word	0x3ff00000
 80095ac:	3fe90000 	.word	0x3fe90000
 80095b0:	3fd20000 	.word	0x3fd20000
 80095b4:	00000000 	.word	0x00000000

080095b8 <__kernel_sin>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	ed2d 8b04 	vpush	{d8-d9}
 80095c0:	eeb0 8a41 	vmov.f32	s16, s2
 80095c4:	eef0 8a61 	vmov.f32	s17, s3
 80095c8:	ec55 4b10 	vmov	r4, r5, d0
 80095cc:	b083      	sub	sp, #12
 80095ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80095d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80095d6:	9001      	str	r0, [sp, #4]
 80095d8:	da06      	bge.n	80095e8 <__kernel_sin+0x30>
 80095da:	ee10 0a10 	vmov	r0, s0
 80095de:	4629      	mov	r1, r5
 80095e0:	f7f7 faba 	bl	8000b58 <__aeabi_d2iz>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	d051      	beq.n	800968c <__kernel_sin+0xd4>
 80095e8:	4622      	mov	r2, r4
 80095ea:	462b      	mov	r3, r5
 80095ec:	4620      	mov	r0, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	f7f7 f802 	bl	80005f8 <__aeabi_dmul>
 80095f4:	4682      	mov	sl, r0
 80095f6:	468b      	mov	fp, r1
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4620      	mov	r0, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f6 fffa 	bl	80005f8 <__aeabi_dmul>
 8009604:	a341      	add	r3, pc, #260	; (adr r3, 800970c <__kernel_sin+0x154>)
 8009606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800960a:	4680      	mov	r8, r0
 800960c:	4689      	mov	r9, r1
 800960e:	4650      	mov	r0, sl
 8009610:	4659      	mov	r1, fp
 8009612:	f7f6 fff1 	bl	80005f8 <__aeabi_dmul>
 8009616:	a33f      	add	r3, pc, #252	; (adr r3, 8009714 <__kernel_sin+0x15c>)
 8009618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961c:	f7f6 fe34 	bl	8000288 <__aeabi_dsub>
 8009620:	4652      	mov	r2, sl
 8009622:	465b      	mov	r3, fp
 8009624:	f7f6 ffe8 	bl	80005f8 <__aeabi_dmul>
 8009628:	a33c      	add	r3, pc, #240	; (adr r3, 800971c <__kernel_sin+0x164>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	f7f6 fe2d 	bl	800028c <__adddf3>
 8009632:	4652      	mov	r2, sl
 8009634:	465b      	mov	r3, fp
 8009636:	f7f6 ffdf 	bl	80005f8 <__aeabi_dmul>
 800963a:	a33a      	add	r3, pc, #232	; (adr r3, 8009724 <__kernel_sin+0x16c>)
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f7f6 fe22 	bl	8000288 <__aeabi_dsub>
 8009644:	4652      	mov	r2, sl
 8009646:	465b      	mov	r3, fp
 8009648:	f7f6 ffd6 	bl	80005f8 <__aeabi_dmul>
 800964c:	a337      	add	r3, pc, #220	; (adr r3, 800972c <__kernel_sin+0x174>)
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	f7f6 fe1b 	bl	800028c <__adddf3>
 8009656:	9b01      	ldr	r3, [sp, #4]
 8009658:	4606      	mov	r6, r0
 800965a:	460f      	mov	r7, r1
 800965c:	b9eb      	cbnz	r3, 800969a <__kernel_sin+0xe2>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4650      	mov	r0, sl
 8009664:	4659      	mov	r1, fp
 8009666:	f7f6 ffc7 	bl	80005f8 <__aeabi_dmul>
 800966a:	a325      	add	r3, pc, #148	; (adr r3, 8009700 <__kernel_sin+0x148>)
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	f7f6 fe0a 	bl	8000288 <__aeabi_dsub>
 8009674:	4642      	mov	r2, r8
 8009676:	464b      	mov	r3, r9
 8009678:	f7f6 ffbe 	bl	80005f8 <__aeabi_dmul>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4620      	mov	r0, r4
 8009682:	4629      	mov	r1, r5
 8009684:	f7f6 fe02 	bl	800028c <__adddf3>
 8009688:	4604      	mov	r4, r0
 800968a:	460d      	mov	r5, r1
 800968c:	ec45 4b10 	vmov	d0, r4, r5
 8009690:	b003      	add	sp, #12
 8009692:	ecbd 8b04 	vpop	{d8-d9}
 8009696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969a:	4b1b      	ldr	r3, [pc, #108]	; (8009708 <__kernel_sin+0x150>)
 800969c:	ec51 0b18 	vmov	r0, r1, d8
 80096a0:	2200      	movs	r2, #0
 80096a2:	f7f6 ffa9 	bl	80005f8 <__aeabi_dmul>
 80096a6:	4632      	mov	r2, r6
 80096a8:	ec41 0b19 	vmov	d9, r0, r1
 80096ac:	463b      	mov	r3, r7
 80096ae:	4640      	mov	r0, r8
 80096b0:	4649      	mov	r1, r9
 80096b2:	f7f6 ffa1 	bl	80005f8 <__aeabi_dmul>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	ec51 0b19 	vmov	r0, r1, d9
 80096be:	f7f6 fde3 	bl	8000288 <__aeabi_dsub>
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	f7f6 ff97 	bl	80005f8 <__aeabi_dmul>
 80096ca:	ec53 2b18 	vmov	r2, r3, d8
 80096ce:	f7f6 fddb 	bl	8000288 <__aeabi_dsub>
 80096d2:	a30b      	add	r3, pc, #44	; (adr r3, 8009700 <__kernel_sin+0x148>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	4606      	mov	r6, r0
 80096da:	460f      	mov	r7, r1
 80096dc:	4640      	mov	r0, r8
 80096de:	4649      	mov	r1, r9
 80096e0:	f7f6 ff8a 	bl	80005f8 <__aeabi_dmul>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4630      	mov	r0, r6
 80096ea:	4639      	mov	r1, r7
 80096ec:	f7f6 fdce 	bl	800028c <__adddf3>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f6 fdc6 	bl	8000288 <__aeabi_dsub>
 80096fc:	e7c4      	b.n	8009688 <__kernel_sin+0xd0>
 80096fe:	bf00      	nop
 8009700:	55555549 	.word	0x55555549
 8009704:	3fc55555 	.word	0x3fc55555
 8009708:	3fe00000 	.word	0x3fe00000
 800970c:	5acfd57c 	.word	0x5acfd57c
 8009710:	3de5d93a 	.word	0x3de5d93a
 8009714:	8a2b9ceb 	.word	0x8a2b9ceb
 8009718:	3e5ae5e6 	.word	0x3e5ae5e6
 800971c:	57b1fe7d 	.word	0x57b1fe7d
 8009720:	3ec71de3 	.word	0x3ec71de3
 8009724:	19c161d5 	.word	0x19c161d5
 8009728:	3f2a01a0 	.word	0x3f2a01a0
 800972c:	1110f8a6 	.word	0x1110f8a6
 8009730:	3f811111 	.word	0x3f811111
 8009734:	00000000 	.word	0x00000000

08009738 <__ieee754_atan2>:
 8009738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800973c:	ec57 6b11 	vmov	r6, r7, d1
 8009740:	4273      	negs	r3, r6
 8009742:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80098c0 <__ieee754_atan2+0x188>
 8009746:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800974a:	4333      	orrs	r3, r6
 800974c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009750:	4543      	cmp	r3, r8
 8009752:	ec51 0b10 	vmov	r0, r1, d0
 8009756:	ee11 5a10 	vmov	r5, s2
 800975a:	d80a      	bhi.n	8009772 <__ieee754_atan2+0x3a>
 800975c:	4244      	negs	r4, r0
 800975e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009762:	4304      	orrs	r4, r0
 8009764:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009768:	4544      	cmp	r4, r8
 800976a:	ee10 9a10 	vmov	r9, s0
 800976e:	468e      	mov	lr, r1
 8009770:	d907      	bls.n	8009782 <__ieee754_atan2+0x4a>
 8009772:	4632      	mov	r2, r6
 8009774:	463b      	mov	r3, r7
 8009776:	f7f6 fd89 	bl	800028c <__adddf3>
 800977a:	ec41 0b10 	vmov	d0, r0, r1
 800977e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009782:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8009786:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800978a:	4334      	orrs	r4, r6
 800978c:	d103      	bne.n	8009796 <__ieee754_atan2+0x5e>
 800978e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009792:	f000 baa1 	b.w	8009cd8 <atan>
 8009796:	17bc      	asrs	r4, r7, #30
 8009798:	f004 0402 	and.w	r4, r4, #2
 800979c:	ea53 0909 	orrs.w	r9, r3, r9
 80097a0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80097a4:	d107      	bne.n	80097b6 <__ieee754_atan2+0x7e>
 80097a6:	2c02      	cmp	r4, #2
 80097a8:	d05f      	beq.n	800986a <__ieee754_atan2+0x132>
 80097aa:	2c03      	cmp	r4, #3
 80097ac:	d1e5      	bne.n	800977a <__ieee754_atan2+0x42>
 80097ae:	a140      	add	r1, pc, #256	; (adr r1, 80098b0 <__ieee754_atan2+0x178>)
 80097b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097b4:	e7e1      	b.n	800977a <__ieee754_atan2+0x42>
 80097b6:	4315      	orrs	r5, r2
 80097b8:	d106      	bne.n	80097c8 <__ieee754_atan2+0x90>
 80097ba:	f1be 0f00 	cmp.w	lr, #0
 80097be:	da5f      	bge.n	8009880 <__ieee754_atan2+0x148>
 80097c0:	a13d      	add	r1, pc, #244	; (adr r1, 80098b8 <__ieee754_atan2+0x180>)
 80097c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c6:	e7d8      	b.n	800977a <__ieee754_atan2+0x42>
 80097c8:	4542      	cmp	r2, r8
 80097ca:	d10f      	bne.n	80097ec <__ieee754_atan2+0xb4>
 80097cc:	4293      	cmp	r3, r2
 80097ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80097d2:	d107      	bne.n	80097e4 <__ieee754_atan2+0xac>
 80097d4:	2c02      	cmp	r4, #2
 80097d6:	d84c      	bhi.n	8009872 <__ieee754_atan2+0x13a>
 80097d8:	4b33      	ldr	r3, [pc, #204]	; (80098a8 <__ieee754_atan2+0x170>)
 80097da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097e2:	e7ca      	b.n	800977a <__ieee754_atan2+0x42>
 80097e4:	2c02      	cmp	r4, #2
 80097e6:	d848      	bhi.n	800987a <__ieee754_atan2+0x142>
 80097e8:	4b30      	ldr	r3, [pc, #192]	; (80098ac <__ieee754_atan2+0x174>)
 80097ea:	e7f6      	b.n	80097da <__ieee754_atan2+0xa2>
 80097ec:	4543      	cmp	r3, r8
 80097ee:	d0e4      	beq.n	80097ba <__ieee754_atan2+0x82>
 80097f0:	1a9b      	subs	r3, r3, r2
 80097f2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80097f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80097fa:	da1e      	bge.n	800983a <__ieee754_atan2+0x102>
 80097fc:	2f00      	cmp	r7, #0
 80097fe:	da01      	bge.n	8009804 <__ieee754_atan2+0xcc>
 8009800:	323c      	adds	r2, #60	; 0x3c
 8009802:	db1e      	blt.n	8009842 <__ieee754_atan2+0x10a>
 8009804:	4632      	mov	r2, r6
 8009806:	463b      	mov	r3, r7
 8009808:	f7f7 f820 	bl	800084c <__aeabi_ddiv>
 800980c:	ec41 0b10 	vmov	d0, r0, r1
 8009810:	f000 fc02 	bl	800a018 <fabs>
 8009814:	f000 fa60 	bl	8009cd8 <atan>
 8009818:	ec51 0b10 	vmov	r0, r1, d0
 800981c:	2c01      	cmp	r4, #1
 800981e:	d013      	beq.n	8009848 <__ieee754_atan2+0x110>
 8009820:	2c02      	cmp	r4, #2
 8009822:	d015      	beq.n	8009850 <__ieee754_atan2+0x118>
 8009824:	2c00      	cmp	r4, #0
 8009826:	d0a8      	beq.n	800977a <__ieee754_atan2+0x42>
 8009828:	a317      	add	r3, pc, #92	; (adr r3, 8009888 <__ieee754_atan2+0x150>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 fd2b 	bl	8000288 <__aeabi_dsub>
 8009832:	a317      	add	r3, pc, #92	; (adr r3, 8009890 <__ieee754_atan2+0x158>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	e014      	b.n	8009864 <__ieee754_atan2+0x12c>
 800983a:	a117      	add	r1, pc, #92	; (adr r1, 8009898 <__ieee754_atan2+0x160>)
 800983c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009840:	e7ec      	b.n	800981c <__ieee754_atan2+0xe4>
 8009842:	2000      	movs	r0, #0
 8009844:	2100      	movs	r1, #0
 8009846:	e7e9      	b.n	800981c <__ieee754_atan2+0xe4>
 8009848:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800984c:	4619      	mov	r1, r3
 800984e:	e794      	b.n	800977a <__ieee754_atan2+0x42>
 8009850:	a30d      	add	r3, pc, #52	; (adr r3, 8009888 <__ieee754_atan2+0x150>)
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	f7f6 fd17 	bl	8000288 <__aeabi_dsub>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	a10c      	add	r1, pc, #48	; (adr r1, 8009890 <__ieee754_atan2+0x158>)
 8009860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009864:	f7f6 fd10 	bl	8000288 <__aeabi_dsub>
 8009868:	e787      	b.n	800977a <__ieee754_atan2+0x42>
 800986a:	a109      	add	r1, pc, #36	; (adr r1, 8009890 <__ieee754_atan2+0x158>)
 800986c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009870:	e783      	b.n	800977a <__ieee754_atan2+0x42>
 8009872:	a10b      	add	r1, pc, #44	; (adr r1, 80098a0 <__ieee754_atan2+0x168>)
 8009874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009878:	e77f      	b.n	800977a <__ieee754_atan2+0x42>
 800987a:	2000      	movs	r0, #0
 800987c:	2100      	movs	r1, #0
 800987e:	e77c      	b.n	800977a <__ieee754_atan2+0x42>
 8009880:	a105      	add	r1, pc, #20	; (adr r1, 8009898 <__ieee754_atan2+0x160>)
 8009882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009886:	e778      	b.n	800977a <__ieee754_atan2+0x42>
 8009888:	33145c07 	.word	0x33145c07
 800988c:	3ca1a626 	.word	0x3ca1a626
 8009890:	54442d18 	.word	0x54442d18
 8009894:	400921fb 	.word	0x400921fb
 8009898:	54442d18 	.word	0x54442d18
 800989c:	3ff921fb 	.word	0x3ff921fb
 80098a0:	54442d18 	.word	0x54442d18
 80098a4:	3fe921fb 	.word	0x3fe921fb
 80098a8:	0800dc20 	.word	0x0800dc20
 80098ac:	0800dc38 	.word	0x0800dc38
 80098b0:	54442d18 	.word	0x54442d18
 80098b4:	c00921fb 	.word	0xc00921fb
 80098b8:	54442d18 	.word	0x54442d18
 80098bc:	bff921fb 	.word	0xbff921fb
 80098c0:	7ff00000 	.word	0x7ff00000
 80098c4:	00000000 	.word	0x00000000

080098c8 <__ieee754_rem_pio2>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	ed2d 8b02 	vpush	{d8}
 80098d0:	ec55 4b10 	vmov	r4, r5, d0
 80098d4:	4bca      	ldr	r3, [pc, #808]	; (8009c00 <__ieee754_rem_pio2+0x338>)
 80098d6:	b08b      	sub	sp, #44	; 0x2c
 80098d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80098dc:	4598      	cmp	r8, r3
 80098de:	4682      	mov	sl, r0
 80098e0:	9502      	str	r5, [sp, #8]
 80098e2:	dc08      	bgt.n	80098f6 <__ieee754_rem_pio2+0x2e>
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	ed80 0b00 	vstr	d0, [r0]
 80098ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80098f0:	f04f 0b00 	mov.w	fp, #0
 80098f4:	e028      	b.n	8009948 <__ieee754_rem_pio2+0x80>
 80098f6:	4bc3      	ldr	r3, [pc, #780]	; (8009c04 <__ieee754_rem_pio2+0x33c>)
 80098f8:	4598      	cmp	r8, r3
 80098fa:	dc78      	bgt.n	80099ee <__ieee754_rem_pio2+0x126>
 80098fc:	9b02      	ldr	r3, [sp, #8]
 80098fe:	4ec2      	ldr	r6, [pc, #776]	; (8009c08 <__ieee754_rem_pio2+0x340>)
 8009900:	2b00      	cmp	r3, #0
 8009902:	ee10 0a10 	vmov	r0, s0
 8009906:	a3b0      	add	r3, pc, #704	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x300>)
 8009908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990c:	4629      	mov	r1, r5
 800990e:	dd39      	ble.n	8009984 <__ieee754_rem_pio2+0xbc>
 8009910:	f7f6 fcba 	bl	8000288 <__aeabi_dsub>
 8009914:	45b0      	cmp	r8, r6
 8009916:	4604      	mov	r4, r0
 8009918:	460d      	mov	r5, r1
 800991a:	d01b      	beq.n	8009954 <__ieee754_rem_pio2+0x8c>
 800991c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009bd0 <__ieee754_rem_pio2+0x308>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f7f6 fcb1 	bl	8000288 <__aeabi_dsub>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	e9ca 2300 	strd	r2, r3, [sl]
 800992e:	4620      	mov	r0, r4
 8009930:	4629      	mov	r1, r5
 8009932:	f7f6 fca9 	bl	8000288 <__aeabi_dsub>
 8009936:	a3a6      	add	r3, pc, #664	; (adr r3, 8009bd0 <__ieee754_rem_pio2+0x308>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	f7f6 fca4 	bl	8000288 <__aeabi_dsub>
 8009940:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009944:	f04f 0b01 	mov.w	fp, #1
 8009948:	4658      	mov	r0, fp
 800994a:	b00b      	add	sp, #44	; 0x2c
 800994c:	ecbd 8b02 	vpop	{d8}
 8009950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009954:	a3a0      	add	r3, pc, #640	; (adr r3, 8009bd8 <__ieee754_rem_pio2+0x310>)
 8009956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995a:	f7f6 fc95 	bl	8000288 <__aeabi_dsub>
 800995e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009be0 <__ieee754_rem_pio2+0x318>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	4604      	mov	r4, r0
 8009966:	460d      	mov	r5, r1
 8009968:	f7f6 fc8e 	bl	8000288 <__aeabi_dsub>
 800996c:	4602      	mov	r2, r0
 800996e:	460b      	mov	r3, r1
 8009970:	e9ca 2300 	strd	r2, r3, [sl]
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f6 fc86 	bl	8000288 <__aeabi_dsub>
 800997c:	a398      	add	r3, pc, #608	; (adr r3, 8009be0 <__ieee754_rem_pio2+0x318>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	e7db      	b.n	800993c <__ieee754_rem_pio2+0x74>
 8009984:	f7f6 fc82 	bl	800028c <__adddf3>
 8009988:	45b0      	cmp	r8, r6
 800998a:	4604      	mov	r4, r0
 800998c:	460d      	mov	r5, r1
 800998e:	d016      	beq.n	80099be <__ieee754_rem_pio2+0xf6>
 8009990:	a38f      	add	r3, pc, #572	; (adr r3, 8009bd0 <__ieee754_rem_pio2+0x308>)
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	f7f6 fc79 	bl	800028c <__adddf3>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	e9ca 2300 	strd	r2, r3, [sl]
 80099a2:	4620      	mov	r0, r4
 80099a4:	4629      	mov	r1, r5
 80099a6:	f7f6 fc6f 	bl	8000288 <__aeabi_dsub>
 80099aa:	a389      	add	r3, pc, #548	; (adr r3, 8009bd0 <__ieee754_rem_pio2+0x308>)
 80099ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b0:	f7f6 fc6c 	bl	800028c <__adddf3>
 80099b4:	f04f 3bff 	mov.w	fp, #4294967295
 80099b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80099bc:	e7c4      	b.n	8009948 <__ieee754_rem_pio2+0x80>
 80099be:	a386      	add	r3, pc, #536	; (adr r3, 8009bd8 <__ieee754_rem_pio2+0x310>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f6 fc62 	bl	800028c <__adddf3>
 80099c8:	a385      	add	r3, pc, #532	; (adr r3, 8009be0 <__ieee754_rem_pio2+0x318>)
 80099ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ce:	4604      	mov	r4, r0
 80099d0:	460d      	mov	r5, r1
 80099d2:	f7f6 fc5b 	bl	800028c <__adddf3>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	e9ca 2300 	strd	r2, r3, [sl]
 80099de:	4620      	mov	r0, r4
 80099e0:	4629      	mov	r1, r5
 80099e2:	f7f6 fc51 	bl	8000288 <__aeabi_dsub>
 80099e6:	a37e      	add	r3, pc, #504	; (adr r3, 8009be0 <__ieee754_rem_pio2+0x318>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	e7e0      	b.n	80099b0 <__ieee754_rem_pio2+0xe8>
 80099ee:	4b87      	ldr	r3, [pc, #540]	; (8009c0c <__ieee754_rem_pio2+0x344>)
 80099f0:	4598      	cmp	r8, r3
 80099f2:	f300 80d8 	bgt.w	8009ba6 <__ieee754_rem_pio2+0x2de>
 80099f6:	f000 fb0f 	bl	800a018 <fabs>
 80099fa:	ec55 4b10 	vmov	r4, r5, d0
 80099fe:	ee10 0a10 	vmov	r0, s0
 8009a02:	a379      	add	r3, pc, #484	; (adr r3, 8009be8 <__ieee754_rem_pio2+0x320>)
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	4629      	mov	r1, r5
 8009a0a:	f7f6 fdf5 	bl	80005f8 <__aeabi_dmul>
 8009a0e:	4b80      	ldr	r3, [pc, #512]	; (8009c10 <__ieee754_rem_pio2+0x348>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	f7f6 fc3b 	bl	800028c <__adddf3>
 8009a16:	f7f7 f89f 	bl	8000b58 <__aeabi_d2iz>
 8009a1a:	4683      	mov	fp, r0
 8009a1c:	f7f6 fd82 	bl	8000524 <__aeabi_i2d>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	ec43 2b18 	vmov	d8, r2, r3
 8009a28:	a367      	add	r3, pc, #412	; (adr r3, 8009bc8 <__ieee754_rem_pio2+0x300>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f7f6 fde3 	bl	80005f8 <__aeabi_dmul>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4620      	mov	r0, r4
 8009a38:	4629      	mov	r1, r5
 8009a3a:	f7f6 fc25 	bl	8000288 <__aeabi_dsub>
 8009a3e:	a364      	add	r3, pc, #400	; (adr r3, 8009bd0 <__ieee754_rem_pio2+0x308>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	4606      	mov	r6, r0
 8009a46:	460f      	mov	r7, r1
 8009a48:	ec51 0b18 	vmov	r0, r1, d8
 8009a4c:	f7f6 fdd4 	bl	80005f8 <__aeabi_dmul>
 8009a50:	f1bb 0f1f 	cmp.w	fp, #31
 8009a54:	4604      	mov	r4, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	dc0d      	bgt.n	8009a76 <__ieee754_rem_pio2+0x1ae>
 8009a5a:	4b6e      	ldr	r3, [pc, #440]	; (8009c14 <__ieee754_rem_pio2+0x34c>)
 8009a5c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a64:	4543      	cmp	r3, r8
 8009a66:	d006      	beq.n	8009a76 <__ieee754_rem_pio2+0x1ae>
 8009a68:	4622      	mov	r2, r4
 8009a6a:	462b      	mov	r3, r5
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	4639      	mov	r1, r7
 8009a70:	f7f6 fc0a 	bl	8000288 <__aeabi_dsub>
 8009a74:	e00e      	b.n	8009a94 <__ieee754_rem_pio2+0x1cc>
 8009a76:	462b      	mov	r3, r5
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	f7f6 fc03 	bl	8000288 <__aeabi_dsub>
 8009a82:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009a86:	9303      	str	r3, [sp, #12]
 8009a88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009a8c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009a90:	2b10      	cmp	r3, #16
 8009a92:	dc02      	bgt.n	8009a9a <__ieee754_rem_pio2+0x1d2>
 8009a94:	e9ca 0100 	strd	r0, r1, [sl]
 8009a98:	e039      	b.n	8009b0e <__ieee754_rem_pio2+0x246>
 8009a9a:	a34f      	add	r3, pc, #316	; (adr r3, 8009bd8 <__ieee754_rem_pio2+0x310>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	ec51 0b18 	vmov	r0, r1, d8
 8009aa4:	f7f6 fda8 	bl	80005f8 <__aeabi_dmul>
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	4639      	mov	r1, r7
 8009ab4:	f7f6 fbe8 	bl	8000288 <__aeabi_dsub>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4680      	mov	r8, r0
 8009abe:	4689      	mov	r9, r1
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	4639      	mov	r1, r7
 8009ac4:	f7f6 fbe0 	bl	8000288 <__aeabi_dsub>
 8009ac8:	4622      	mov	r2, r4
 8009aca:	462b      	mov	r3, r5
 8009acc:	f7f6 fbdc 	bl	8000288 <__aeabi_dsub>
 8009ad0:	a343      	add	r3, pc, #268	; (adr r3, 8009be0 <__ieee754_rem_pio2+0x318>)
 8009ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	460d      	mov	r5, r1
 8009ada:	ec51 0b18 	vmov	r0, r1, d8
 8009ade:	f7f6 fd8b 	bl	80005f8 <__aeabi_dmul>
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	f7f6 fbcf 	bl	8000288 <__aeabi_dsub>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	4604      	mov	r4, r0
 8009af0:	460d      	mov	r5, r1
 8009af2:	4640      	mov	r0, r8
 8009af4:	4649      	mov	r1, r9
 8009af6:	f7f6 fbc7 	bl	8000288 <__aeabi_dsub>
 8009afa:	9a03      	ldr	r2, [sp, #12]
 8009afc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	2b31      	cmp	r3, #49	; 0x31
 8009b04:	dc24      	bgt.n	8009b50 <__ieee754_rem_pio2+0x288>
 8009b06:	e9ca 0100 	strd	r0, r1, [sl]
 8009b0a:	4646      	mov	r6, r8
 8009b0c:	464f      	mov	r7, r9
 8009b0e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b12:	4630      	mov	r0, r6
 8009b14:	4642      	mov	r2, r8
 8009b16:	464b      	mov	r3, r9
 8009b18:	4639      	mov	r1, r7
 8009b1a:	f7f6 fbb5 	bl	8000288 <__aeabi_dsub>
 8009b1e:	462b      	mov	r3, r5
 8009b20:	4622      	mov	r2, r4
 8009b22:	f7f6 fbb1 	bl	8000288 <__aeabi_dsub>
 8009b26:	9b02      	ldr	r3, [sp, #8]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009b2e:	f6bf af0b 	bge.w	8009948 <__ieee754_rem_pio2+0x80>
 8009b32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009b36:	f8ca 3004 	str.w	r3, [sl, #4]
 8009b3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b3e:	f8ca 8000 	str.w	r8, [sl]
 8009b42:	f8ca 0008 	str.w	r0, [sl, #8]
 8009b46:	f8ca 300c 	str.w	r3, [sl, #12]
 8009b4a:	f1cb 0b00 	rsb	fp, fp, #0
 8009b4e:	e6fb      	b.n	8009948 <__ieee754_rem_pio2+0x80>
 8009b50:	a327      	add	r3, pc, #156	; (adr r3, 8009bf0 <__ieee754_rem_pio2+0x328>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	ec51 0b18 	vmov	r0, r1, d8
 8009b5a:	f7f6 fd4d 	bl	80005f8 <__aeabi_dmul>
 8009b5e:	4604      	mov	r4, r0
 8009b60:	460d      	mov	r5, r1
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 fb8d 	bl	8000288 <__aeabi_dsub>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4606      	mov	r6, r0
 8009b74:	460f      	mov	r7, r1
 8009b76:	4640      	mov	r0, r8
 8009b78:	4649      	mov	r1, r9
 8009b7a:	f7f6 fb85 	bl	8000288 <__aeabi_dsub>
 8009b7e:	4622      	mov	r2, r4
 8009b80:	462b      	mov	r3, r5
 8009b82:	f7f6 fb81 	bl	8000288 <__aeabi_dsub>
 8009b86:	a31c      	add	r3, pc, #112	; (adr r3, 8009bf8 <__ieee754_rem_pio2+0x330>)
 8009b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	460d      	mov	r5, r1
 8009b90:	ec51 0b18 	vmov	r0, r1, d8
 8009b94:	f7f6 fd30 	bl	80005f8 <__aeabi_dmul>
 8009b98:	4622      	mov	r2, r4
 8009b9a:	462b      	mov	r3, r5
 8009b9c:	f7f6 fb74 	bl	8000288 <__aeabi_dsub>
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	460d      	mov	r5, r1
 8009ba4:	e760      	b.n	8009a68 <__ieee754_rem_pio2+0x1a0>
 8009ba6:	4b1c      	ldr	r3, [pc, #112]	; (8009c18 <__ieee754_rem_pio2+0x350>)
 8009ba8:	4598      	cmp	r8, r3
 8009baa:	dd37      	ble.n	8009c1c <__ieee754_rem_pio2+0x354>
 8009bac:	ee10 2a10 	vmov	r2, s0
 8009bb0:	462b      	mov	r3, r5
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4629      	mov	r1, r5
 8009bb6:	f7f6 fb67 	bl	8000288 <__aeabi_dsub>
 8009bba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009bbe:	e9ca 0100 	strd	r0, r1, [sl]
 8009bc2:	e695      	b.n	80098f0 <__ieee754_rem_pio2+0x28>
 8009bc4:	f3af 8000 	nop.w
 8009bc8:	54400000 	.word	0x54400000
 8009bcc:	3ff921fb 	.word	0x3ff921fb
 8009bd0:	1a626331 	.word	0x1a626331
 8009bd4:	3dd0b461 	.word	0x3dd0b461
 8009bd8:	1a600000 	.word	0x1a600000
 8009bdc:	3dd0b461 	.word	0x3dd0b461
 8009be0:	2e037073 	.word	0x2e037073
 8009be4:	3ba3198a 	.word	0x3ba3198a
 8009be8:	6dc9c883 	.word	0x6dc9c883
 8009bec:	3fe45f30 	.word	0x3fe45f30
 8009bf0:	2e000000 	.word	0x2e000000
 8009bf4:	3ba3198a 	.word	0x3ba3198a
 8009bf8:	252049c1 	.word	0x252049c1
 8009bfc:	397b839a 	.word	0x397b839a
 8009c00:	3fe921fb 	.word	0x3fe921fb
 8009c04:	4002d97b 	.word	0x4002d97b
 8009c08:	3ff921fb 	.word	0x3ff921fb
 8009c0c:	413921fb 	.word	0x413921fb
 8009c10:	3fe00000 	.word	0x3fe00000
 8009c14:	0800dc50 	.word	0x0800dc50
 8009c18:	7fefffff 	.word	0x7fefffff
 8009c1c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8009c20:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8009c24:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8009c28:	4620      	mov	r0, r4
 8009c2a:	460d      	mov	r5, r1
 8009c2c:	f7f6 ff94 	bl	8000b58 <__aeabi_d2iz>
 8009c30:	f7f6 fc78 	bl	8000524 <__aeabi_i2d>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	4620      	mov	r0, r4
 8009c3a:	4629      	mov	r1, r5
 8009c3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c40:	f7f6 fb22 	bl	8000288 <__aeabi_dsub>
 8009c44:	4b21      	ldr	r3, [pc, #132]	; (8009ccc <__ieee754_rem_pio2+0x404>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	f7f6 fcd6 	bl	80005f8 <__aeabi_dmul>
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	4604      	mov	r4, r0
 8009c50:	f7f6 ff82 	bl	8000b58 <__aeabi_d2iz>
 8009c54:	f7f6 fc66 	bl	8000524 <__aeabi_i2d>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c64:	f7f6 fb10 	bl	8000288 <__aeabi_dsub>
 8009c68:	4b18      	ldr	r3, [pc, #96]	; (8009ccc <__ieee754_rem_pio2+0x404>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c74:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009c78:	2703      	movs	r7, #3
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	2500      	movs	r5, #0
 8009c7e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8009c82:	4622      	mov	r2, r4
 8009c84:	462b      	mov	r3, r5
 8009c86:	46b9      	mov	r9, r7
 8009c88:	3f01      	subs	r7, #1
 8009c8a:	f7f6 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d1f5      	bne.n	8009c7e <__ieee754_rem_pio2+0x3b6>
 8009c92:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <__ieee754_rem_pio2+0x408>)
 8009c94:	9301      	str	r3, [sp, #4]
 8009c96:	2302      	movs	r3, #2
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	464b      	mov	r3, r9
 8009c9e:	4651      	mov	r1, sl
 8009ca0:	a804      	add	r0, sp, #16
 8009ca2:	f000 f9c5 	bl	800a030 <__kernel_rem_pio2>
 8009ca6:	9b02      	ldr	r3, [sp, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	4683      	mov	fp, r0
 8009cac:	f6bf ae4c 	bge.w	8009948 <__ieee754_rem_pio2+0x80>
 8009cb0:	e9da 2100 	ldrd	r2, r1, [sl]
 8009cb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cb8:	e9ca 2300 	strd	r2, r3, [sl]
 8009cbc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009cc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cc4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009cc8:	e73f      	b.n	8009b4a <__ieee754_rem_pio2+0x282>
 8009cca:	bf00      	nop
 8009ccc:	41700000 	.word	0x41700000
 8009cd0:	0800dcd0 	.word	0x0800dcd0
 8009cd4:	00000000 	.word	0x00000000

08009cd8 <atan>:
 8009cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	ec55 4b10 	vmov	r4, r5, d0
 8009ce0:	4bc3      	ldr	r3, [pc, #780]	; (8009ff0 <atan+0x318>)
 8009ce2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ce6:	429e      	cmp	r6, r3
 8009ce8:	46ab      	mov	fp, r5
 8009cea:	dd18      	ble.n	8009d1e <atan+0x46>
 8009cec:	4bc1      	ldr	r3, [pc, #772]	; (8009ff4 <atan+0x31c>)
 8009cee:	429e      	cmp	r6, r3
 8009cf0:	dc01      	bgt.n	8009cf6 <atan+0x1e>
 8009cf2:	d109      	bne.n	8009d08 <atan+0x30>
 8009cf4:	b144      	cbz	r4, 8009d08 <atan+0x30>
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 fac5 	bl	800028c <__adddf3>
 8009d02:	4604      	mov	r4, r0
 8009d04:	460d      	mov	r5, r1
 8009d06:	e006      	b.n	8009d16 <atan+0x3e>
 8009d08:	f1bb 0f00 	cmp.w	fp, #0
 8009d0c:	f300 8131 	bgt.w	8009f72 <atan+0x29a>
 8009d10:	a59b      	add	r5, pc, #620	; (adr r5, 8009f80 <atan+0x2a8>)
 8009d12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d16:	ec45 4b10 	vmov	d0, r4, r5
 8009d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1e:	4bb6      	ldr	r3, [pc, #728]	; (8009ff8 <atan+0x320>)
 8009d20:	429e      	cmp	r6, r3
 8009d22:	dc14      	bgt.n	8009d4e <atan+0x76>
 8009d24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009d28:	429e      	cmp	r6, r3
 8009d2a:	dc0d      	bgt.n	8009d48 <atan+0x70>
 8009d2c:	a396      	add	r3, pc, #600	; (adr r3, 8009f88 <atan+0x2b0>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	ee10 0a10 	vmov	r0, s0
 8009d36:	4629      	mov	r1, r5
 8009d38:	f7f6 faa8 	bl	800028c <__adddf3>
 8009d3c:	4baf      	ldr	r3, [pc, #700]	; (8009ffc <atan+0x324>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f7f6 feea 	bl	8000b18 <__aeabi_dcmpgt>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d1e6      	bne.n	8009d16 <atan+0x3e>
 8009d48:	f04f 3aff 	mov.w	sl, #4294967295
 8009d4c:	e02b      	b.n	8009da6 <atan+0xce>
 8009d4e:	f000 f963 	bl	800a018 <fabs>
 8009d52:	4bab      	ldr	r3, [pc, #684]	; (800a000 <atan+0x328>)
 8009d54:	429e      	cmp	r6, r3
 8009d56:	ec55 4b10 	vmov	r4, r5, d0
 8009d5a:	f300 80bf 	bgt.w	8009edc <atan+0x204>
 8009d5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009d62:	429e      	cmp	r6, r3
 8009d64:	f300 80a0 	bgt.w	8009ea8 <atan+0x1d0>
 8009d68:	ee10 2a10 	vmov	r2, s0
 8009d6c:	ee10 0a10 	vmov	r0, s0
 8009d70:	462b      	mov	r3, r5
 8009d72:	4629      	mov	r1, r5
 8009d74:	f7f6 fa8a 	bl	800028c <__adddf3>
 8009d78:	4ba0      	ldr	r3, [pc, #640]	; (8009ffc <atan+0x324>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f7f6 fa84 	bl	8000288 <__aeabi_dsub>
 8009d80:	2200      	movs	r2, #0
 8009d82:	4606      	mov	r6, r0
 8009d84:	460f      	mov	r7, r1
 8009d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	f7f6 fa7d 	bl	800028c <__adddf3>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4630      	mov	r0, r6
 8009d98:	4639      	mov	r1, r7
 8009d9a:	f7f6 fd57 	bl	800084c <__aeabi_ddiv>
 8009d9e:	f04f 0a00 	mov.w	sl, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	460d      	mov	r5, r1
 8009da6:	4622      	mov	r2, r4
 8009da8:	462b      	mov	r3, r5
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7f6 fc23 	bl	80005f8 <__aeabi_dmul>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4680      	mov	r8, r0
 8009db8:	4689      	mov	r9, r1
 8009dba:	f7f6 fc1d 	bl	80005f8 <__aeabi_dmul>
 8009dbe:	a374      	add	r3, pc, #464	; (adr r3, 8009f90 <atan+0x2b8>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	4606      	mov	r6, r0
 8009dc6:	460f      	mov	r7, r1
 8009dc8:	f7f6 fc16 	bl	80005f8 <__aeabi_dmul>
 8009dcc:	a372      	add	r3, pc, #456	; (adr r3, 8009f98 <atan+0x2c0>)
 8009dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd2:	f7f6 fa5b 	bl	800028c <__adddf3>
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	463b      	mov	r3, r7
 8009dda:	f7f6 fc0d 	bl	80005f8 <__aeabi_dmul>
 8009dde:	a370      	add	r3, pc, #448	; (adr r3, 8009fa0 <atan+0x2c8>)
 8009de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de4:	f7f6 fa52 	bl	800028c <__adddf3>
 8009de8:	4632      	mov	r2, r6
 8009dea:	463b      	mov	r3, r7
 8009dec:	f7f6 fc04 	bl	80005f8 <__aeabi_dmul>
 8009df0:	a36d      	add	r3, pc, #436	; (adr r3, 8009fa8 <atan+0x2d0>)
 8009df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df6:	f7f6 fa49 	bl	800028c <__adddf3>
 8009dfa:	4632      	mov	r2, r6
 8009dfc:	463b      	mov	r3, r7
 8009dfe:	f7f6 fbfb 	bl	80005f8 <__aeabi_dmul>
 8009e02:	a36b      	add	r3, pc, #428	; (adr r3, 8009fb0 <atan+0x2d8>)
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	f7f6 fa40 	bl	800028c <__adddf3>
 8009e0c:	4632      	mov	r2, r6
 8009e0e:	463b      	mov	r3, r7
 8009e10:	f7f6 fbf2 	bl	80005f8 <__aeabi_dmul>
 8009e14:	a368      	add	r3, pc, #416	; (adr r3, 8009fb8 <atan+0x2e0>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f7f6 fa37 	bl	800028c <__adddf3>
 8009e1e:	4642      	mov	r2, r8
 8009e20:	464b      	mov	r3, r9
 8009e22:	f7f6 fbe9 	bl	80005f8 <__aeabi_dmul>
 8009e26:	a366      	add	r3, pc, #408	; (adr r3, 8009fc0 <atan+0x2e8>)
 8009e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	4689      	mov	r9, r1
 8009e30:	4630      	mov	r0, r6
 8009e32:	4639      	mov	r1, r7
 8009e34:	f7f6 fbe0 	bl	80005f8 <__aeabi_dmul>
 8009e38:	a363      	add	r3, pc, #396	; (adr r3, 8009fc8 <atan+0x2f0>)
 8009e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3e:	f7f6 fa23 	bl	8000288 <__aeabi_dsub>
 8009e42:	4632      	mov	r2, r6
 8009e44:	463b      	mov	r3, r7
 8009e46:	f7f6 fbd7 	bl	80005f8 <__aeabi_dmul>
 8009e4a:	a361      	add	r3, pc, #388	; (adr r3, 8009fd0 <atan+0x2f8>)
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	f7f6 fa1a 	bl	8000288 <__aeabi_dsub>
 8009e54:	4632      	mov	r2, r6
 8009e56:	463b      	mov	r3, r7
 8009e58:	f7f6 fbce 	bl	80005f8 <__aeabi_dmul>
 8009e5c:	a35e      	add	r3, pc, #376	; (adr r3, 8009fd8 <atan+0x300>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	f7f6 fa11 	bl	8000288 <__aeabi_dsub>
 8009e66:	4632      	mov	r2, r6
 8009e68:	463b      	mov	r3, r7
 8009e6a:	f7f6 fbc5 	bl	80005f8 <__aeabi_dmul>
 8009e6e:	a35c      	add	r3, pc, #368	; (adr r3, 8009fe0 <atan+0x308>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f7f6 fa08 	bl	8000288 <__aeabi_dsub>
 8009e78:	4632      	mov	r2, r6
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	f7f6 fbbc 	bl	80005f8 <__aeabi_dmul>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	4640      	mov	r0, r8
 8009e86:	4649      	mov	r1, r9
 8009e88:	f7f6 fa00 	bl	800028c <__adddf3>
 8009e8c:	4622      	mov	r2, r4
 8009e8e:	462b      	mov	r3, r5
 8009e90:	f7f6 fbb2 	bl	80005f8 <__aeabi_dmul>
 8009e94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	d14b      	bne.n	8009f36 <atan+0x25e>
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f7f6 f9f1 	bl	8000288 <__aeabi_dsub>
 8009ea6:	e72c      	b.n	8009d02 <atan+0x2a>
 8009ea8:	ee10 0a10 	vmov	r0, s0
 8009eac:	4b53      	ldr	r3, [pc, #332]	; (8009ffc <atan+0x324>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	f7f6 f9e9 	bl	8000288 <__aeabi_dsub>
 8009eb6:	4b51      	ldr	r3, [pc, #324]	; (8009ffc <atan+0x324>)
 8009eb8:	4606      	mov	r6, r0
 8009eba:	460f      	mov	r7, r1
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	f7f6 f9e3 	bl	800028c <__adddf3>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	4630      	mov	r0, r6
 8009ecc:	4639      	mov	r1, r7
 8009ece:	f7f6 fcbd 	bl	800084c <__aeabi_ddiv>
 8009ed2:	f04f 0a01 	mov.w	sl, #1
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	460d      	mov	r5, r1
 8009eda:	e764      	b.n	8009da6 <atan+0xce>
 8009edc:	4b49      	ldr	r3, [pc, #292]	; (800a004 <atan+0x32c>)
 8009ede:	429e      	cmp	r6, r3
 8009ee0:	da1d      	bge.n	8009f1e <atan+0x246>
 8009ee2:	ee10 0a10 	vmov	r0, s0
 8009ee6:	4b48      	ldr	r3, [pc, #288]	; (800a008 <atan+0x330>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4629      	mov	r1, r5
 8009eec:	f7f6 f9cc 	bl	8000288 <__aeabi_dsub>
 8009ef0:	4b45      	ldr	r3, [pc, #276]	; (800a008 <atan+0x330>)
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	460f      	mov	r7, r1
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 fb7c 	bl	80005f8 <__aeabi_dmul>
 8009f00:	4b3e      	ldr	r3, [pc, #248]	; (8009ffc <atan+0x324>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	f7f6 f9c2 	bl	800028c <__adddf3>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	4639      	mov	r1, r7
 8009f10:	f7f6 fc9c 	bl	800084c <__aeabi_ddiv>
 8009f14:	f04f 0a02 	mov.w	sl, #2
 8009f18:	4604      	mov	r4, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	e743      	b.n	8009da6 <atan+0xce>
 8009f1e:	462b      	mov	r3, r5
 8009f20:	ee10 2a10 	vmov	r2, s0
 8009f24:	4939      	ldr	r1, [pc, #228]	; (800a00c <atan+0x334>)
 8009f26:	2000      	movs	r0, #0
 8009f28:	f7f6 fc90 	bl	800084c <__aeabi_ddiv>
 8009f2c:	f04f 0a03 	mov.w	sl, #3
 8009f30:	4604      	mov	r4, r0
 8009f32:	460d      	mov	r5, r1
 8009f34:	e737      	b.n	8009da6 <atan+0xce>
 8009f36:	4b36      	ldr	r3, [pc, #216]	; (800a010 <atan+0x338>)
 8009f38:	4e36      	ldr	r6, [pc, #216]	; (800a014 <atan+0x33c>)
 8009f3a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f42:	f7f6 f9a1 	bl	8000288 <__aeabi_dsub>
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	f7f6 f99d 	bl	8000288 <__aeabi_dsub>
 8009f4e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009f5a:	f7f6 f995 	bl	8000288 <__aeabi_dsub>
 8009f5e:	f1bb 0f00 	cmp.w	fp, #0
 8009f62:	4604      	mov	r4, r0
 8009f64:	460d      	mov	r5, r1
 8009f66:	f6bf aed6 	bge.w	8009d16 <atan+0x3e>
 8009f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f6e:	461d      	mov	r5, r3
 8009f70:	e6d1      	b.n	8009d16 <atan+0x3e>
 8009f72:	a51d      	add	r5, pc, #116	; (adr r5, 8009fe8 <atan+0x310>)
 8009f74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f78:	e6cd      	b.n	8009d16 <atan+0x3e>
 8009f7a:	bf00      	nop
 8009f7c:	f3af 8000 	nop.w
 8009f80:	54442d18 	.word	0x54442d18
 8009f84:	bff921fb 	.word	0xbff921fb
 8009f88:	8800759c 	.word	0x8800759c
 8009f8c:	7e37e43c 	.word	0x7e37e43c
 8009f90:	e322da11 	.word	0xe322da11
 8009f94:	3f90ad3a 	.word	0x3f90ad3a
 8009f98:	24760deb 	.word	0x24760deb
 8009f9c:	3fa97b4b 	.word	0x3fa97b4b
 8009fa0:	a0d03d51 	.word	0xa0d03d51
 8009fa4:	3fb10d66 	.word	0x3fb10d66
 8009fa8:	c54c206e 	.word	0xc54c206e
 8009fac:	3fb745cd 	.word	0x3fb745cd
 8009fb0:	920083ff 	.word	0x920083ff
 8009fb4:	3fc24924 	.word	0x3fc24924
 8009fb8:	5555550d 	.word	0x5555550d
 8009fbc:	3fd55555 	.word	0x3fd55555
 8009fc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8009fc4:	bfa2b444 	.word	0xbfa2b444
 8009fc8:	52defd9a 	.word	0x52defd9a
 8009fcc:	3fadde2d 	.word	0x3fadde2d
 8009fd0:	af749a6d 	.word	0xaf749a6d
 8009fd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8009fd8:	fe231671 	.word	0xfe231671
 8009fdc:	3fbc71c6 	.word	0x3fbc71c6
 8009fe0:	9998ebc4 	.word	0x9998ebc4
 8009fe4:	3fc99999 	.word	0x3fc99999
 8009fe8:	54442d18 	.word	0x54442d18
 8009fec:	3ff921fb 	.word	0x3ff921fb
 8009ff0:	440fffff 	.word	0x440fffff
 8009ff4:	7ff00000 	.word	0x7ff00000
 8009ff8:	3fdbffff 	.word	0x3fdbffff
 8009ffc:	3ff00000 	.word	0x3ff00000
 800a000:	3ff2ffff 	.word	0x3ff2ffff
 800a004:	40038000 	.word	0x40038000
 800a008:	3ff80000 	.word	0x3ff80000
 800a00c:	bff00000 	.word	0xbff00000
 800a010:	0800ddf8 	.word	0x0800ddf8
 800a014:	0800ddd8 	.word	0x0800ddd8

0800a018 <fabs>:
 800a018:	ec51 0b10 	vmov	r0, r1, d0
 800a01c:	ee10 2a10 	vmov	r2, s0
 800a020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a024:	ec43 2b10 	vmov	d0, r2, r3
 800a028:	4770      	bx	lr
 800a02a:	0000      	movs	r0, r0
 800a02c:	0000      	movs	r0, r0
	...

0800a030 <__kernel_rem_pio2>:
 800a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a034:	ed2d 8b02 	vpush	{d8}
 800a038:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a03c:	f112 0f14 	cmn.w	r2, #20
 800a040:	9306      	str	r3, [sp, #24]
 800a042:	9104      	str	r1, [sp, #16]
 800a044:	4bc2      	ldr	r3, [pc, #776]	; (800a350 <__kernel_rem_pio2+0x320>)
 800a046:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a048:	9009      	str	r0, [sp, #36]	; 0x24
 800a04a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	9b06      	ldr	r3, [sp, #24]
 800a052:	f103 33ff 	add.w	r3, r3, #4294967295
 800a056:	bfa8      	it	ge
 800a058:	1ed4      	subge	r4, r2, #3
 800a05a:	9305      	str	r3, [sp, #20]
 800a05c:	bfb2      	itee	lt
 800a05e:	2400      	movlt	r4, #0
 800a060:	2318      	movge	r3, #24
 800a062:	fb94 f4f3 	sdivge	r4, r4, r3
 800a066:	f06f 0317 	mvn.w	r3, #23
 800a06a:	fb04 3303 	mla	r3, r4, r3, r3
 800a06e:	eb03 0a02 	add.w	sl, r3, r2
 800a072:	9b00      	ldr	r3, [sp, #0]
 800a074:	9a05      	ldr	r2, [sp, #20]
 800a076:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800a340 <__kernel_rem_pio2+0x310>
 800a07a:	eb03 0802 	add.w	r8, r3, r2
 800a07e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a080:	1aa7      	subs	r7, r4, r2
 800a082:	ae20      	add	r6, sp, #128	; 0x80
 800a084:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a088:	2500      	movs	r5, #0
 800a08a:	4545      	cmp	r5, r8
 800a08c:	dd13      	ble.n	800a0b6 <__kernel_rem_pio2+0x86>
 800a08e:	9b06      	ldr	r3, [sp, #24]
 800a090:	aa20      	add	r2, sp, #128	; 0x80
 800a092:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a096:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a09a:	f04f 0800 	mov.w	r8, #0
 800a09e:	9b00      	ldr	r3, [sp, #0]
 800a0a0:	4598      	cmp	r8, r3
 800a0a2:	dc31      	bgt.n	800a108 <__kernel_rem_pio2+0xd8>
 800a0a4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800a340 <__kernel_rem_pio2+0x310>
 800a0a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a0ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0b0:	462f      	mov	r7, r5
 800a0b2:	2600      	movs	r6, #0
 800a0b4:	e01b      	b.n	800a0ee <__kernel_rem_pio2+0xbe>
 800a0b6:	42ef      	cmn	r7, r5
 800a0b8:	d407      	bmi.n	800a0ca <__kernel_rem_pio2+0x9a>
 800a0ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a0be:	f7f6 fa31 	bl	8000524 <__aeabi_i2d>
 800a0c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a0c6:	3501      	adds	r5, #1
 800a0c8:	e7df      	b.n	800a08a <__kernel_rem_pio2+0x5a>
 800a0ca:	ec51 0b18 	vmov	r0, r1, d8
 800a0ce:	e7f8      	b.n	800a0c2 <__kernel_rem_pio2+0x92>
 800a0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a0d8:	f7f6 fa8e 	bl	80005f8 <__aeabi_dmul>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0e4:	f7f6 f8d2 	bl	800028c <__adddf3>
 800a0e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0ec:	3601      	adds	r6, #1
 800a0ee:	9b05      	ldr	r3, [sp, #20]
 800a0f0:	429e      	cmp	r6, r3
 800a0f2:	f1a7 0708 	sub.w	r7, r7, #8
 800a0f6:	ddeb      	ble.n	800a0d0 <__kernel_rem_pio2+0xa0>
 800a0f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0fc:	f108 0801 	add.w	r8, r8, #1
 800a100:	ecab 7b02 	vstmia	fp!, {d7}
 800a104:	3508      	adds	r5, #8
 800a106:	e7ca      	b.n	800a09e <__kernel_rem_pio2+0x6e>
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	aa0c      	add	r2, sp, #48	; 0x30
 800a10c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a110:	930b      	str	r3, [sp, #44]	; 0x2c
 800a112:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a114:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a118:	9c00      	ldr	r4, [sp, #0]
 800a11a:	930a      	str	r3, [sp, #40]	; 0x28
 800a11c:	00e3      	lsls	r3, r4, #3
 800a11e:	9308      	str	r3, [sp, #32]
 800a120:	ab98      	add	r3, sp, #608	; 0x260
 800a122:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a126:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a12a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800a12e:	ab70      	add	r3, sp, #448	; 0x1c0
 800a130:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a134:	46c3      	mov	fp, r8
 800a136:	46a1      	mov	r9, r4
 800a138:	f1b9 0f00 	cmp.w	r9, #0
 800a13c:	f1a5 0508 	sub.w	r5, r5, #8
 800a140:	dc77      	bgt.n	800a232 <__kernel_rem_pio2+0x202>
 800a142:	ec47 6b10 	vmov	d0, r6, r7
 800a146:	4650      	mov	r0, sl
 800a148:	f000 fac2 	bl	800a6d0 <scalbn>
 800a14c:	ec57 6b10 	vmov	r6, r7, d0
 800a150:	2200      	movs	r2, #0
 800a152:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a156:	ee10 0a10 	vmov	r0, s0
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 fa4c 	bl	80005f8 <__aeabi_dmul>
 800a160:	ec41 0b10 	vmov	d0, r0, r1
 800a164:	f000 fb34 	bl	800a7d0 <floor>
 800a168:	4b7a      	ldr	r3, [pc, #488]	; (800a354 <__kernel_rem_pio2+0x324>)
 800a16a:	ec51 0b10 	vmov	r0, r1, d0
 800a16e:	2200      	movs	r2, #0
 800a170:	f7f6 fa42 	bl	80005f8 <__aeabi_dmul>
 800a174:	4602      	mov	r2, r0
 800a176:	460b      	mov	r3, r1
 800a178:	4630      	mov	r0, r6
 800a17a:	4639      	mov	r1, r7
 800a17c:	f7f6 f884 	bl	8000288 <__aeabi_dsub>
 800a180:	460f      	mov	r7, r1
 800a182:	4606      	mov	r6, r0
 800a184:	f7f6 fce8 	bl	8000b58 <__aeabi_d2iz>
 800a188:	9002      	str	r0, [sp, #8]
 800a18a:	f7f6 f9cb 	bl	8000524 <__aeabi_i2d>
 800a18e:	4602      	mov	r2, r0
 800a190:	460b      	mov	r3, r1
 800a192:	4630      	mov	r0, r6
 800a194:	4639      	mov	r1, r7
 800a196:	f7f6 f877 	bl	8000288 <__aeabi_dsub>
 800a19a:	f1ba 0f00 	cmp.w	sl, #0
 800a19e:	4606      	mov	r6, r0
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	dd6d      	ble.n	800a280 <__kernel_rem_pio2+0x250>
 800a1a4:	1e61      	subs	r1, r4, #1
 800a1a6:	ab0c      	add	r3, sp, #48	; 0x30
 800a1a8:	9d02      	ldr	r5, [sp, #8]
 800a1aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a1ae:	f1ca 0018 	rsb	r0, sl, #24
 800a1b2:	fa43 f200 	asr.w	r2, r3, r0
 800a1b6:	4415      	add	r5, r2
 800a1b8:	4082      	lsls	r2, r0
 800a1ba:	1a9b      	subs	r3, r3, r2
 800a1bc:	aa0c      	add	r2, sp, #48	; 0x30
 800a1be:	9502      	str	r5, [sp, #8]
 800a1c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a1c4:	f1ca 0217 	rsb	r2, sl, #23
 800a1c8:	fa43 fb02 	asr.w	fp, r3, r2
 800a1cc:	f1bb 0f00 	cmp.w	fp, #0
 800a1d0:	dd65      	ble.n	800a29e <__kernel_rem_pio2+0x26e>
 800a1d2:	9b02      	ldr	r3, [sp, #8]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	9302      	str	r3, [sp, #8]
 800a1da:	4615      	mov	r5, r2
 800a1dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a1e0:	4294      	cmp	r4, r2
 800a1e2:	f300 809f 	bgt.w	800a324 <__kernel_rem_pio2+0x2f4>
 800a1e6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ea:	dd07      	ble.n	800a1fc <__kernel_rem_pio2+0x1cc>
 800a1ec:	f1ba 0f01 	cmp.w	sl, #1
 800a1f0:	f000 80c1 	beq.w	800a376 <__kernel_rem_pio2+0x346>
 800a1f4:	f1ba 0f02 	cmp.w	sl, #2
 800a1f8:	f000 80c7 	beq.w	800a38a <__kernel_rem_pio2+0x35a>
 800a1fc:	f1bb 0f02 	cmp.w	fp, #2
 800a200:	d14d      	bne.n	800a29e <__kernel_rem_pio2+0x26e>
 800a202:	4632      	mov	r2, r6
 800a204:	463b      	mov	r3, r7
 800a206:	4954      	ldr	r1, [pc, #336]	; (800a358 <__kernel_rem_pio2+0x328>)
 800a208:	2000      	movs	r0, #0
 800a20a:	f7f6 f83d 	bl	8000288 <__aeabi_dsub>
 800a20e:	4606      	mov	r6, r0
 800a210:	460f      	mov	r7, r1
 800a212:	2d00      	cmp	r5, #0
 800a214:	d043      	beq.n	800a29e <__kernel_rem_pio2+0x26e>
 800a216:	4650      	mov	r0, sl
 800a218:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800a348 <__kernel_rem_pio2+0x318>
 800a21c:	f000 fa58 	bl	800a6d0 <scalbn>
 800a220:	4630      	mov	r0, r6
 800a222:	4639      	mov	r1, r7
 800a224:	ec53 2b10 	vmov	r2, r3, d0
 800a228:	f7f6 f82e 	bl	8000288 <__aeabi_dsub>
 800a22c:	4606      	mov	r6, r0
 800a22e:	460f      	mov	r7, r1
 800a230:	e035      	b.n	800a29e <__kernel_rem_pio2+0x26e>
 800a232:	4b4a      	ldr	r3, [pc, #296]	; (800a35c <__kernel_rem_pio2+0x32c>)
 800a234:	2200      	movs	r2, #0
 800a236:	4630      	mov	r0, r6
 800a238:	4639      	mov	r1, r7
 800a23a:	f7f6 f9dd 	bl	80005f8 <__aeabi_dmul>
 800a23e:	f7f6 fc8b 	bl	8000b58 <__aeabi_d2iz>
 800a242:	f7f6 f96f 	bl	8000524 <__aeabi_i2d>
 800a246:	4602      	mov	r2, r0
 800a248:	460b      	mov	r3, r1
 800a24a:	ec43 2b18 	vmov	d8, r2, r3
 800a24e:	4b44      	ldr	r3, [pc, #272]	; (800a360 <__kernel_rem_pio2+0x330>)
 800a250:	2200      	movs	r2, #0
 800a252:	f7f6 f9d1 	bl	80005f8 <__aeabi_dmul>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	4630      	mov	r0, r6
 800a25c:	4639      	mov	r1, r7
 800a25e:	f7f6 f813 	bl	8000288 <__aeabi_dsub>
 800a262:	f7f6 fc79 	bl	8000b58 <__aeabi_d2iz>
 800a266:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a26a:	f84b 0b04 	str.w	r0, [fp], #4
 800a26e:	ec51 0b18 	vmov	r0, r1, d8
 800a272:	f7f6 f80b 	bl	800028c <__adddf3>
 800a276:	f109 39ff 	add.w	r9, r9, #4294967295
 800a27a:	4606      	mov	r6, r0
 800a27c:	460f      	mov	r7, r1
 800a27e:	e75b      	b.n	800a138 <__kernel_rem_pio2+0x108>
 800a280:	d106      	bne.n	800a290 <__kernel_rem_pio2+0x260>
 800a282:	1e63      	subs	r3, r4, #1
 800a284:	aa0c      	add	r2, sp, #48	; 0x30
 800a286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a28a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800a28e:	e79d      	b.n	800a1cc <__kernel_rem_pio2+0x19c>
 800a290:	4b34      	ldr	r3, [pc, #208]	; (800a364 <__kernel_rem_pio2+0x334>)
 800a292:	2200      	movs	r2, #0
 800a294:	f7f6 fc36 	bl	8000b04 <__aeabi_dcmpge>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d140      	bne.n	800a31e <__kernel_rem_pio2+0x2ee>
 800a29c:	4683      	mov	fp, r0
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	4639      	mov	r1, r7
 800a2a6:	f7f6 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	f000 80c1 	beq.w	800a432 <__kernel_rem_pio2+0x402>
 800a2b0:	1e65      	subs	r5, r4, #1
 800a2b2:	462b      	mov	r3, r5
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	9900      	ldr	r1, [sp, #0]
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	da6d      	bge.n	800a398 <__kernel_rem_pio2+0x368>
 800a2bc:	2a00      	cmp	r2, #0
 800a2be:	f000 808a 	beq.w	800a3d6 <__kernel_rem_pio2+0x3a6>
 800a2c2:	ab0c      	add	r3, sp, #48	; 0x30
 800a2c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a2c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 80ae 	beq.w	800a42e <__kernel_rem_pio2+0x3fe>
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a348 <__kernel_rem_pio2+0x318>
 800a2d8:	f000 f9fa 	bl	800a6d0 <scalbn>
 800a2dc:	1c6b      	adds	r3, r5, #1
 800a2de:	00da      	lsls	r2, r3, #3
 800a2e0:	9205      	str	r2, [sp, #20]
 800a2e2:	ec57 6b10 	vmov	r6, r7, d0
 800a2e6:	aa70      	add	r2, sp, #448	; 0x1c0
 800a2e8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800a35c <__kernel_rem_pio2+0x32c>
 800a2ec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800a2f0:	462c      	mov	r4, r5
 800a2f2:	f04f 0800 	mov.w	r8, #0
 800a2f6:	2c00      	cmp	r4, #0
 800a2f8:	f280 80d4 	bge.w	800a4a4 <__kernel_rem_pio2+0x474>
 800a2fc:	462c      	mov	r4, r5
 800a2fe:	2c00      	cmp	r4, #0
 800a300:	f2c0 8102 	blt.w	800a508 <__kernel_rem_pio2+0x4d8>
 800a304:	4b18      	ldr	r3, [pc, #96]	; (800a368 <__kernel_rem_pio2+0x338>)
 800a306:	461e      	mov	r6, r3
 800a308:	ab70      	add	r3, sp, #448	; 0x1c0
 800a30a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800a30e:	1b2b      	subs	r3, r5, r4
 800a310:	f04f 0900 	mov.w	r9, #0
 800a314:	f04f 0a00 	mov.w	sl, #0
 800a318:	2700      	movs	r7, #0
 800a31a:	9306      	str	r3, [sp, #24]
 800a31c:	e0e6      	b.n	800a4ec <__kernel_rem_pio2+0x4bc>
 800a31e:	f04f 0b02 	mov.w	fp, #2
 800a322:	e756      	b.n	800a1d2 <__kernel_rem_pio2+0x1a2>
 800a324:	f8d8 3000 	ldr.w	r3, [r8]
 800a328:	bb05      	cbnz	r5, 800a36c <__kernel_rem_pio2+0x33c>
 800a32a:	b123      	cbz	r3, 800a336 <__kernel_rem_pio2+0x306>
 800a32c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a330:	f8c8 3000 	str.w	r3, [r8]
 800a334:	2301      	movs	r3, #1
 800a336:	3201      	adds	r2, #1
 800a338:	f108 0804 	add.w	r8, r8, #4
 800a33c:	461d      	mov	r5, r3
 800a33e:	e74f      	b.n	800a1e0 <__kernel_rem_pio2+0x1b0>
	...
 800a34c:	3ff00000 	.word	0x3ff00000
 800a350:	0800de58 	.word	0x0800de58
 800a354:	40200000 	.word	0x40200000
 800a358:	3ff00000 	.word	0x3ff00000
 800a35c:	3e700000 	.word	0x3e700000
 800a360:	41700000 	.word	0x41700000
 800a364:	3fe00000 	.word	0x3fe00000
 800a368:	0800de18 	.word	0x0800de18
 800a36c:	1acb      	subs	r3, r1, r3
 800a36e:	f8c8 3000 	str.w	r3, [r8]
 800a372:	462b      	mov	r3, r5
 800a374:	e7df      	b.n	800a336 <__kernel_rem_pio2+0x306>
 800a376:	1e62      	subs	r2, r4, #1
 800a378:	ab0c      	add	r3, sp, #48	; 0x30
 800a37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a37e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a382:	a90c      	add	r1, sp, #48	; 0x30
 800a384:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a388:	e738      	b.n	800a1fc <__kernel_rem_pio2+0x1cc>
 800a38a:	1e62      	subs	r2, r4, #1
 800a38c:	ab0c      	add	r3, sp, #48	; 0x30
 800a38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a392:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a396:	e7f4      	b.n	800a382 <__kernel_rem_pio2+0x352>
 800a398:	a90c      	add	r1, sp, #48	; 0x30
 800a39a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	e788      	b.n	800a2b6 <__kernel_rem_pio2+0x286>
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a3aa:	2900      	cmp	r1, #0
 800a3ac:	d0fa      	beq.n	800a3a4 <__kernel_rem_pio2+0x374>
 800a3ae:	9a08      	ldr	r2, [sp, #32]
 800a3b0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800a3b4:	446a      	add	r2, sp
 800a3b6:	3a98      	subs	r2, #152	; 0x98
 800a3b8:	9208      	str	r2, [sp, #32]
 800a3ba:	9a06      	ldr	r2, [sp, #24]
 800a3bc:	a920      	add	r1, sp, #128	; 0x80
 800a3be:	18a2      	adds	r2, r4, r2
 800a3c0:	18e3      	adds	r3, r4, r3
 800a3c2:	f104 0801 	add.w	r8, r4, #1
 800a3c6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a3ca:	9302      	str	r3, [sp, #8]
 800a3cc:	9b02      	ldr	r3, [sp, #8]
 800a3ce:	4543      	cmp	r3, r8
 800a3d0:	da04      	bge.n	800a3dc <__kernel_rem_pio2+0x3ac>
 800a3d2:	461c      	mov	r4, r3
 800a3d4:	e6a2      	b.n	800a11c <__kernel_rem_pio2+0xec>
 800a3d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e7e4      	b.n	800a3a6 <__kernel_rem_pio2+0x376>
 800a3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a3e2:	f7f6 f89f 	bl	8000524 <__aeabi_i2d>
 800a3e6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ec:	46ab      	mov	fp, r5
 800a3ee:	461c      	mov	r4, r3
 800a3f0:	f04f 0900 	mov.w	r9, #0
 800a3f4:	2600      	movs	r6, #0
 800a3f6:	2700      	movs	r7, #0
 800a3f8:	9b05      	ldr	r3, [sp, #20]
 800a3fa:	4599      	cmp	r9, r3
 800a3fc:	dd06      	ble.n	800a40c <__kernel_rem_pio2+0x3dc>
 800a3fe:	9b08      	ldr	r3, [sp, #32]
 800a400:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a404:	f108 0801 	add.w	r8, r8, #1
 800a408:	9308      	str	r3, [sp, #32]
 800a40a:	e7df      	b.n	800a3cc <__kernel_rem_pio2+0x39c>
 800a40c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a410:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a414:	f7f6 f8f0 	bl	80005f8 <__aeabi_dmul>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4630      	mov	r0, r6
 800a41e:	4639      	mov	r1, r7
 800a420:	f7f5 ff34 	bl	800028c <__adddf3>
 800a424:	f109 0901 	add.w	r9, r9, #1
 800a428:	4606      	mov	r6, r0
 800a42a:	460f      	mov	r7, r1
 800a42c:	e7e4      	b.n	800a3f8 <__kernel_rem_pio2+0x3c8>
 800a42e:	3d01      	subs	r5, #1
 800a430:	e747      	b.n	800a2c2 <__kernel_rem_pio2+0x292>
 800a432:	ec47 6b10 	vmov	d0, r6, r7
 800a436:	f1ca 0000 	rsb	r0, sl, #0
 800a43a:	f000 f949 	bl	800a6d0 <scalbn>
 800a43e:	ec57 6b10 	vmov	r6, r7, d0
 800a442:	4ba0      	ldr	r3, [pc, #640]	; (800a6c4 <__kernel_rem_pio2+0x694>)
 800a444:	ee10 0a10 	vmov	r0, s0
 800a448:	2200      	movs	r2, #0
 800a44a:	4639      	mov	r1, r7
 800a44c:	f7f6 fb5a 	bl	8000b04 <__aeabi_dcmpge>
 800a450:	b1f8      	cbz	r0, 800a492 <__kernel_rem_pio2+0x462>
 800a452:	4b9d      	ldr	r3, [pc, #628]	; (800a6c8 <__kernel_rem_pio2+0x698>)
 800a454:	2200      	movs	r2, #0
 800a456:	4630      	mov	r0, r6
 800a458:	4639      	mov	r1, r7
 800a45a:	f7f6 f8cd 	bl	80005f8 <__aeabi_dmul>
 800a45e:	f7f6 fb7b 	bl	8000b58 <__aeabi_d2iz>
 800a462:	4680      	mov	r8, r0
 800a464:	f7f6 f85e 	bl	8000524 <__aeabi_i2d>
 800a468:	4b96      	ldr	r3, [pc, #600]	; (800a6c4 <__kernel_rem_pio2+0x694>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	f7f6 f8c4 	bl	80005f8 <__aeabi_dmul>
 800a470:	460b      	mov	r3, r1
 800a472:	4602      	mov	r2, r0
 800a474:	4639      	mov	r1, r7
 800a476:	4630      	mov	r0, r6
 800a478:	f7f5 ff06 	bl	8000288 <__aeabi_dsub>
 800a47c:	f7f6 fb6c 	bl	8000b58 <__aeabi_d2iz>
 800a480:	1c65      	adds	r5, r4, #1
 800a482:	ab0c      	add	r3, sp, #48	; 0x30
 800a484:	f10a 0a18 	add.w	sl, sl, #24
 800a488:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a48c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a490:	e71f      	b.n	800a2d2 <__kernel_rem_pio2+0x2a2>
 800a492:	4630      	mov	r0, r6
 800a494:	4639      	mov	r1, r7
 800a496:	f7f6 fb5f 	bl	8000b58 <__aeabi_d2iz>
 800a49a:	ab0c      	add	r3, sp, #48	; 0x30
 800a49c:	4625      	mov	r5, r4
 800a49e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a4a2:	e716      	b.n	800a2d2 <__kernel_rem_pio2+0x2a2>
 800a4a4:	ab0c      	add	r3, sp, #48	; 0x30
 800a4a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a4aa:	f7f6 f83b 	bl	8000524 <__aeabi_i2d>
 800a4ae:	4632      	mov	r2, r6
 800a4b0:	463b      	mov	r3, r7
 800a4b2:	f7f6 f8a1 	bl	80005f8 <__aeabi_dmul>
 800a4b6:	4642      	mov	r2, r8
 800a4b8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a4bc:	464b      	mov	r3, r9
 800a4be:	4630      	mov	r0, r6
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	f7f6 f899 	bl	80005f8 <__aeabi_dmul>
 800a4c6:	3c01      	subs	r4, #1
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	460f      	mov	r7, r1
 800a4cc:	e713      	b.n	800a2f6 <__kernel_rem_pio2+0x2c6>
 800a4ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a4d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4648      	mov	r0, r9
 800a4e0:	4651      	mov	r1, sl
 800a4e2:	f7f5 fed3 	bl	800028c <__adddf3>
 800a4e6:	3701      	adds	r7, #1
 800a4e8:	4681      	mov	r9, r0
 800a4ea:	468a      	mov	sl, r1
 800a4ec:	9b00      	ldr	r3, [sp, #0]
 800a4ee:	429f      	cmp	r7, r3
 800a4f0:	dc02      	bgt.n	800a4f8 <__kernel_rem_pio2+0x4c8>
 800a4f2:	9b06      	ldr	r3, [sp, #24]
 800a4f4:	429f      	cmp	r7, r3
 800a4f6:	ddea      	ble.n	800a4ce <__kernel_rem_pio2+0x49e>
 800a4f8:	9a06      	ldr	r2, [sp, #24]
 800a4fa:	ab48      	add	r3, sp, #288	; 0x120
 800a4fc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800a500:	e9c6 9a00 	strd	r9, sl, [r6]
 800a504:	3c01      	subs	r4, #1
 800a506:	e6fa      	b.n	800a2fe <__kernel_rem_pio2+0x2ce>
 800a508:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	dc0b      	bgt.n	800a526 <__kernel_rem_pio2+0x4f6>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	dc39      	bgt.n	800a586 <__kernel_rem_pio2+0x556>
 800a512:	d05d      	beq.n	800a5d0 <__kernel_rem_pio2+0x5a0>
 800a514:	9b02      	ldr	r3, [sp, #8]
 800a516:	f003 0007 	and.w	r0, r3, #7
 800a51a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a51e:	ecbd 8b02 	vpop	{d8}
 800a522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a526:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a528:	2b03      	cmp	r3, #3
 800a52a:	d1f3      	bne.n	800a514 <__kernel_rem_pio2+0x4e4>
 800a52c:	9b05      	ldr	r3, [sp, #20]
 800a52e:	9500      	str	r5, [sp, #0]
 800a530:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a534:	eb0d 0403 	add.w	r4, sp, r3
 800a538:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800a53c:	46a2      	mov	sl, r4
 800a53e:	9b00      	ldr	r3, [sp, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	f1aa 0a08 	sub.w	sl, sl, #8
 800a546:	dc69      	bgt.n	800a61c <__kernel_rem_pio2+0x5ec>
 800a548:	46aa      	mov	sl, r5
 800a54a:	f1ba 0f01 	cmp.w	sl, #1
 800a54e:	f1a4 0408 	sub.w	r4, r4, #8
 800a552:	f300 8083 	bgt.w	800a65c <__kernel_rem_pio2+0x62c>
 800a556:	9c05      	ldr	r4, [sp, #20]
 800a558:	ab48      	add	r3, sp, #288	; 0x120
 800a55a:	441c      	add	r4, r3
 800a55c:	2000      	movs	r0, #0
 800a55e:	2100      	movs	r1, #0
 800a560:	2d01      	cmp	r5, #1
 800a562:	f300 809a 	bgt.w	800a69a <__kernel_rem_pio2+0x66a>
 800a566:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800a56a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a56e:	f1bb 0f00 	cmp.w	fp, #0
 800a572:	f040 8098 	bne.w	800a6a6 <__kernel_rem_pio2+0x676>
 800a576:	9b04      	ldr	r3, [sp, #16]
 800a578:	e9c3 7800 	strd	r7, r8, [r3]
 800a57c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a580:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a584:	e7c6      	b.n	800a514 <__kernel_rem_pio2+0x4e4>
 800a586:	9e05      	ldr	r6, [sp, #20]
 800a588:	ab48      	add	r3, sp, #288	; 0x120
 800a58a:	441e      	add	r6, r3
 800a58c:	462c      	mov	r4, r5
 800a58e:	2000      	movs	r0, #0
 800a590:	2100      	movs	r1, #0
 800a592:	2c00      	cmp	r4, #0
 800a594:	da33      	bge.n	800a5fe <__kernel_rem_pio2+0x5ce>
 800a596:	f1bb 0f00 	cmp.w	fp, #0
 800a59a:	d036      	beq.n	800a60a <__kernel_rem_pio2+0x5da>
 800a59c:	4602      	mov	r2, r0
 800a59e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5a2:	9c04      	ldr	r4, [sp, #16]
 800a5a4:	e9c4 2300 	strd	r2, r3, [r4]
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a5b0:	f7f5 fe6a 	bl	8000288 <__aeabi_dsub>
 800a5b4:	ae4a      	add	r6, sp, #296	; 0x128
 800a5b6:	2401      	movs	r4, #1
 800a5b8:	42a5      	cmp	r5, r4
 800a5ba:	da29      	bge.n	800a610 <__kernel_rem_pio2+0x5e0>
 800a5bc:	f1bb 0f00 	cmp.w	fp, #0
 800a5c0:	d002      	beq.n	800a5c8 <__kernel_rem_pio2+0x598>
 800a5c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	9b04      	ldr	r3, [sp, #16]
 800a5ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a5ce:	e7a1      	b.n	800a514 <__kernel_rem_pio2+0x4e4>
 800a5d0:	9c05      	ldr	r4, [sp, #20]
 800a5d2:	ab48      	add	r3, sp, #288	; 0x120
 800a5d4:	441c      	add	r4, r3
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	2100      	movs	r1, #0
 800a5da:	2d00      	cmp	r5, #0
 800a5dc:	da09      	bge.n	800a5f2 <__kernel_rem_pio2+0x5c2>
 800a5de:	f1bb 0f00 	cmp.w	fp, #0
 800a5e2:	d002      	beq.n	800a5ea <__kernel_rem_pio2+0x5ba>
 800a5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	9b04      	ldr	r3, [sp, #16]
 800a5ec:	e9c3 0100 	strd	r0, r1, [r3]
 800a5f0:	e790      	b.n	800a514 <__kernel_rem_pio2+0x4e4>
 800a5f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a5f6:	f7f5 fe49 	bl	800028c <__adddf3>
 800a5fa:	3d01      	subs	r5, #1
 800a5fc:	e7ed      	b.n	800a5da <__kernel_rem_pio2+0x5aa>
 800a5fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a602:	f7f5 fe43 	bl	800028c <__adddf3>
 800a606:	3c01      	subs	r4, #1
 800a608:	e7c3      	b.n	800a592 <__kernel_rem_pio2+0x562>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	e7c8      	b.n	800a5a2 <__kernel_rem_pio2+0x572>
 800a610:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a614:	f7f5 fe3a 	bl	800028c <__adddf3>
 800a618:	3401      	adds	r4, #1
 800a61a:	e7cd      	b.n	800a5b8 <__kernel_rem_pio2+0x588>
 800a61c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a620:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a624:	9b00      	ldr	r3, [sp, #0]
 800a626:	3b01      	subs	r3, #1
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	4632      	mov	r2, r6
 800a62c:	463b      	mov	r3, r7
 800a62e:	4640      	mov	r0, r8
 800a630:	4649      	mov	r1, r9
 800a632:	f7f5 fe2b 	bl	800028c <__adddf3>
 800a636:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a63a:	4602      	mov	r2, r0
 800a63c:	460b      	mov	r3, r1
 800a63e:	4640      	mov	r0, r8
 800a640:	4649      	mov	r1, r9
 800a642:	f7f5 fe21 	bl	8000288 <__aeabi_dsub>
 800a646:	4632      	mov	r2, r6
 800a648:	463b      	mov	r3, r7
 800a64a:	f7f5 fe1f 	bl	800028c <__adddf3>
 800a64e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a652:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a656:	ed8a 7b00 	vstr	d7, [sl]
 800a65a:	e770      	b.n	800a53e <__kernel_rem_pio2+0x50e>
 800a65c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a660:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a664:	4640      	mov	r0, r8
 800a666:	4632      	mov	r2, r6
 800a668:	463b      	mov	r3, r7
 800a66a:	4649      	mov	r1, r9
 800a66c:	f7f5 fe0e 	bl	800028c <__adddf3>
 800a670:	e9cd 0100 	strd	r0, r1, [sp]
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4640      	mov	r0, r8
 800a67a:	4649      	mov	r1, r9
 800a67c:	f7f5 fe04 	bl	8000288 <__aeabi_dsub>
 800a680:	4632      	mov	r2, r6
 800a682:	463b      	mov	r3, r7
 800a684:	f7f5 fe02 	bl	800028c <__adddf3>
 800a688:	ed9d 7b00 	vldr	d7, [sp]
 800a68c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a690:	ed84 7b00 	vstr	d7, [r4]
 800a694:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a698:	e757      	b.n	800a54a <__kernel_rem_pio2+0x51a>
 800a69a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a69e:	f7f5 fdf5 	bl	800028c <__adddf3>
 800a6a2:	3d01      	subs	r5, #1
 800a6a4:	e75c      	b.n	800a560 <__kernel_rem_pio2+0x530>
 800a6a6:	9b04      	ldr	r3, [sp, #16]
 800a6a8:	9a04      	ldr	r2, [sp, #16]
 800a6aa:	601f      	str	r7, [r3, #0]
 800a6ac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a6b0:	605c      	str	r4, [r3, #4]
 800a6b2:	609d      	str	r5, [r3, #8]
 800a6b4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a6b8:	60d3      	str	r3, [r2, #12]
 800a6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6be:	6110      	str	r0, [r2, #16]
 800a6c0:	6153      	str	r3, [r2, #20]
 800a6c2:	e727      	b.n	800a514 <__kernel_rem_pio2+0x4e4>
 800a6c4:	41700000 	.word	0x41700000
 800a6c8:	3e700000 	.word	0x3e700000
 800a6cc:	00000000 	.word	0x00000000

0800a6d0 <scalbn>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	ec55 4b10 	vmov	r4, r5, d0
 800a6d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a6da:	4606      	mov	r6, r0
 800a6dc:	462b      	mov	r3, r5
 800a6de:	b999      	cbnz	r1, 800a708 <scalbn+0x38>
 800a6e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a6e4:	4323      	orrs	r3, r4
 800a6e6:	d03f      	beq.n	800a768 <scalbn+0x98>
 800a6e8:	4b35      	ldr	r3, [pc, #212]	; (800a7c0 <scalbn+0xf0>)
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	ee10 0a10 	vmov	r0, s0
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f7f5 ff81 	bl	80005f8 <__aeabi_dmul>
 800a6f6:	4b33      	ldr	r3, [pc, #204]	; (800a7c4 <scalbn+0xf4>)
 800a6f8:	429e      	cmp	r6, r3
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	460d      	mov	r5, r1
 800a6fe:	da10      	bge.n	800a722 <scalbn+0x52>
 800a700:	a327      	add	r3, pc, #156	; (adr r3, 800a7a0 <scalbn+0xd0>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	e01f      	b.n	800a748 <scalbn+0x78>
 800a708:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a70c:	4291      	cmp	r1, r2
 800a70e:	d10c      	bne.n	800a72a <scalbn+0x5a>
 800a710:	ee10 2a10 	vmov	r2, s0
 800a714:	4620      	mov	r0, r4
 800a716:	4629      	mov	r1, r5
 800a718:	f7f5 fdb8 	bl	800028c <__adddf3>
 800a71c:	4604      	mov	r4, r0
 800a71e:	460d      	mov	r5, r1
 800a720:	e022      	b.n	800a768 <scalbn+0x98>
 800a722:	460b      	mov	r3, r1
 800a724:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a728:	3936      	subs	r1, #54	; 0x36
 800a72a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a72e:	4296      	cmp	r6, r2
 800a730:	dd0d      	ble.n	800a74e <scalbn+0x7e>
 800a732:	2d00      	cmp	r5, #0
 800a734:	a11c      	add	r1, pc, #112	; (adr r1, 800a7a8 <scalbn+0xd8>)
 800a736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a73a:	da02      	bge.n	800a742 <scalbn+0x72>
 800a73c:	a11c      	add	r1, pc, #112	; (adr r1, 800a7b0 <scalbn+0xe0>)
 800a73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a742:	a319      	add	r3, pc, #100	; (adr r3, 800a7a8 <scalbn+0xd8>)
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	f7f5 ff56 	bl	80005f8 <__aeabi_dmul>
 800a74c:	e7e6      	b.n	800a71c <scalbn+0x4c>
 800a74e:	1872      	adds	r2, r6, r1
 800a750:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a754:	428a      	cmp	r2, r1
 800a756:	dcec      	bgt.n	800a732 <scalbn+0x62>
 800a758:	2a00      	cmp	r2, #0
 800a75a:	dd08      	ble.n	800a76e <scalbn+0x9e>
 800a75c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a760:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a764:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a768:	ec45 4b10 	vmov	d0, r4, r5
 800a76c:	bd70      	pop	{r4, r5, r6, pc}
 800a76e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a772:	da08      	bge.n	800a786 <scalbn+0xb6>
 800a774:	2d00      	cmp	r5, #0
 800a776:	a10a      	add	r1, pc, #40	; (adr r1, 800a7a0 <scalbn+0xd0>)
 800a778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a77c:	dac0      	bge.n	800a700 <scalbn+0x30>
 800a77e:	a10e      	add	r1, pc, #56	; (adr r1, 800a7b8 <scalbn+0xe8>)
 800a780:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a784:	e7bc      	b.n	800a700 <scalbn+0x30>
 800a786:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a78a:	3236      	adds	r2, #54	; 0x36
 800a78c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a790:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a794:	4620      	mov	r0, r4
 800a796:	4b0c      	ldr	r3, [pc, #48]	; (800a7c8 <scalbn+0xf8>)
 800a798:	2200      	movs	r2, #0
 800a79a:	e7d5      	b.n	800a748 <scalbn+0x78>
 800a79c:	f3af 8000 	nop.w
 800a7a0:	c2f8f359 	.word	0xc2f8f359
 800a7a4:	01a56e1f 	.word	0x01a56e1f
 800a7a8:	8800759c 	.word	0x8800759c
 800a7ac:	7e37e43c 	.word	0x7e37e43c
 800a7b0:	8800759c 	.word	0x8800759c
 800a7b4:	fe37e43c 	.word	0xfe37e43c
 800a7b8:	c2f8f359 	.word	0xc2f8f359
 800a7bc:	81a56e1f 	.word	0x81a56e1f
 800a7c0:	43500000 	.word	0x43500000
 800a7c4:	ffff3cb0 	.word	0xffff3cb0
 800a7c8:	3c900000 	.word	0x3c900000
 800a7cc:	00000000 	.word	0x00000000

0800a7d0 <floor>:
 800a7d0:	ec51 0b10 	vmov	r0, r1, d0
 800a7d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7dc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800a7e0:	2e13      	cmp	r6, #19
 800a7e2:	ee10 5a10 	vmov	r5, s0
 800a7e6:	ee10 8a10 	vmov	r8, s0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	dc31      	bgt.n	800a852 <floor+0x82>
 800a7ee:	2e00      	cmp	r6, #0
 800a7f0:	da14      	bge.n	800a81c <floor+0x4c>
 800a7f2:	a333      	add	r3, pc, #204	; (adr r3, 800a8c0 <floor+0xf0>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	f7f5 fd48 	bl	800028c <__adddf3>
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2300      	movs	r3, #0
 800a800:	f7f6 f98a 	bl	8000b18 <__aeabi_dcmpgt>
 800a804:	b138      	cbz	r0, 800a816 <floor+0x46>
 800a806:	2c00      	cmp	r4, #0
 800a808:	da53      	bge.n	800a8b2 <floor+0xe2>
 800a80a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a80e:	4325      	orrs	r5, r4
 800a810:	d052      	beq.n	800a8b8 <floor+0xe8>
 800a812:	4c2d      	ldr	r4, [pc, #180]	; (800a8c8 <floor+0xf8>)
 800a814:	2500      	movs	r5, #0
 800a816:	4621      	mov	r1, r4
 800a818:	4628      	mov	r0, r5
 800a81a:	e024      	b.n	800a866 <floor+0x96>
 800a81c:	4f2b      	ldr	r7, [pc, #172]	; (800a8cc <floor+0xfc>)
 800a81e:	4137      	asrs	r7, r6
 800a820:	ea01 0307 	and.w	r3, r1, r7
 800a824:	4303      	orrs	r3, r0
 800a826:	d01e      	beq.n	800a866 <floor+0x96>
 800a828:	a325      	add	r3, pc, #148	; (adr r3, 800a8c0 <floor+0xf0>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f7f5 fd2d 	bl	800028c <__adddf3>
 800a832:	2200      	movs	r2, #0
 800a834:	2300      	movs	r3, #0
 800a836:	f7f6 f96f 	bl	8000b18 <__aeabi_dcmpgt>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d0eb      	beq.n	800a816 <floor+0x46>
 800a83e:	2c00      	cmp	r4, #0
 800a840:	bfbe      	ittt	lt
 800a842:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a846:	4133      	asrlt	r3, r6
 800a848:	18e4      	addlt	r4, r4, r3
 800a84a:	ea24 0407 	bic.w	r4, r4, r7
 800a84e:	2500      	movs	r5, #0
 800a850:	e7e1      	b.n	800a816 <floor+0x46>
 800a852:	2e33      	cmp	r6, #51	; 0x33
 800a854:	dd0b      	ble.n	800a86e <floor+0x9e>
 800a856:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a85a:	d104      	bne.n	800a866 <floor+0x96>
 800a85c:	ee10 2a10 	vmov	r2, s0
 800a860:	460b      	mov	r3, r1
 800a862:	f7f5 fd13 	bl	800028c <__adddf3>
 800a866:	ec41 0b10 	vmov	d0, r0, r1
 800a86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800a872:	f04f 37ff 	mov.w	r7, #4294967295
 800a876:	40df      	lsrs	r7, r3
 800a878:	4238      	tst	r0, r7
 800a87a:	d0f4      	beq.n	800a866 <floor+0x96>
 800a87c:	a310      	add	r3, pc, #64	; (adr r3, 800a8c0 <floor+0xf0>)
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	f7f5 fd03 	bl	800028c <__adddf3>
 800a886:	2200      	movs	r2, #0
 800a888:	2300      	movs	r3, #0
 800a88a:	f7f6 f945 	bl	8000b18 <__aeabi_dcmpgt>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d0c1      	beq.n	800a816 <floor+0x46>
 800a892:	2c00      	cmp	r4, #0
 800a894:	da0a      	bge.n	800a8ac <floor+0xdc>
 800a896:	2e14      	cmp	r6, #20
 800a898:	d101      	bne.n	800a89e <floor+0xce>
 800a89a:	3401      	adds	r4, #1
 800a89c:	e006      	b.n	800a8ac <floor+0xdc>
 800a89e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	40b3      	lsls	r3, r6
 800a8a6:	441d      	add	r5, r3
 800a8a8:	45a8      	cmp	r8, r5
 800a8aa:	d8f6      	bhi.n	800a89a <floor+0xca>
 800a8ac:	ea25 0507 	bic.w	r5, r5, r7
 800a8b0:	e7b1      	b.n	800a816 <floor+0x46>
 800a8b2:	2500      	movs	r5, #0
 800a8b4:	462c      	mov	r4, r5
 800a8b6:	e7ae      	b.n	800a816 <floor+0x46>
 800a8b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a8bc:	e7ab      	b.n	800a816 <floor+0x46>
 800a8be:	bf00      	nop
 800a8c0:	8800759c 	.word	0x8800759c
 800a8c4:	7e37e43c 	.word	0x7e37e43c
 800a8c8:	bff00000 	.word	0xbff00000
 800a8cc:	000fffff 	.word	0x000fffff

0800a8d0 <__cvt>:
 800a8d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	ec55 4b10 	vmov	r4, r5, d0
 800a8d8:	2d00      	cmp	r5, #0
 800a8da:	460e      	mov	r6, r1
 800a8dc:	4619      	mov	r1, r3
 800a8de:	462b      	mov	r3, r5
 800a8e0:	bfbb      	ittet	lt
 800a8e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8e6:	461d      	movlt	r5, r3
 800a8e8:	2300      	movge	r3, #0
 800a8ea:	232d      	movlt	r3, #45	; 0x2d
 800a8ec:	700b      	strb	r3, [r1, #0]
 800a8ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8f4:	4691      	mov	r9, r2
 800a8f6:	f023 0820 	bic.w	r8, r3, #32
 800a8fa:	bfbc      	itt	lt
 800a8fc:	4622      	movlt	r2, r4
 800a8fe:	4614      	movlt	r4, r2
 800a900:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a904:	d005      	beq.n	800a912 <__cvt+0x42>
 800a906:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a90a:	d100      	bne.n	800a90e <__cvt+0x3e>
 800a90c:	3601      	adds	r6, #1
 800a90e:	2102      	movs	r1, #2
 800a910:	e000      	b.n	800a914 <__cvt+0x44>
 800a912:	2103      	movs	r1, #3
 800a914:	ab03      	add	r3, sp, #12
 800a916:	9301      	str	r3, [sp, #4]
 800a918:	ab02      	add	r3, sp, #8
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	ec45 4b10 	vmov	d0, r4, r5
 800a920:	4653      	mov	r3, sl
 800a922:	4632      	mov	r2, r6
 800a924:	f000 fe54 	bl	800b5d0 <_dtoa_r>
 800a928:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a92c:	4607      	mov	r7, r0
 800a92e:	d102      	bne.n	800a936 <__cvt+0x66>
 800a930:	f019 0f01 	tst.w	r9, #1
 800a934:	d022      	beq.n	800a97c <__cvt+0xac>
 800a936:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a93a:	eb07 0906 	add.w	r9, r7, r6
 800a93e:	d110      	bne.n	800a962 <__cvt+0x92>
 800a940:	783b      	ldrb	r3, [r7, #0]
 800a942:	2b30      	cmp	r3, #48	; 0x30
 800a944:	d10a      	bne.n	800a95c <__cvt+0x8c>
 800a946:	2200      	movs	r2, #0
 800a948:	2300      	movs	r3, #0
 800a94a:	4620      	mov	r0, r4
 800a94c:	4629      	mov	r1, r5
 800a94e:	f7f6 f8bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a952:	b918      	cbnz	r0, 800a95c <__cvt+0x8c>
 800a954:	f1c6 0601 	rsb	r6, r6, #1
 800a958:	f8ca 6000 	str.w	r6, [sl]
 800a95c:	f8da 3000 	ldr.w	r3, [sl]
 800a960:	4499      	add	r9, r3
 800a962:	2200      	movs	r2, #0
 800a964:	2300      	movs	r3, #0
 800a966:	4620      	mov	r0, r4
 800a968:	4629      	mov	r1, r5
 800a96a:	f7f6 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a96e:	b108      	cbz	r0, 800a974 <__cvt+0xa4>
 800a970:	f8cd 900c 	str.w	r9, [sp, #12]
 800a974:	2230      	movs	r2, #48	; 0x30
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	454b      	cmp	r3, r9
 800a97a:	d307      	bcc.n	800a98c <__cvt+0xbc>
 800a97c:	9b03      	ldr	r3, [sp, #12]
 800a97e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a980:	1bdb      	subs	r3, r3, r7
 800a982:	4638      	mov	r0, r7
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	b004      	add	sp, #16
 800a988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98c:	1c59      	adds	r1, r3, #1
 800a98e:	9103      	str	r1, [sp, #12]
 800a990:	701a      	strb	r2, [r3, #0]
 800a992:	e7f0      	b.n	800a976 <__cvt+0xa6>

0800a994 <__exponent>:
 800a994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a996:	4603      	mov	r3, r0
 800a998:	2900      	cmp	r1, #0
 800a99a:	bfb8      	it	lt
 800a99c:	4249      	neglt	r1, r1
 800a99e:	f803 2b02 	strb.w	r2, [r3], #2
 800a9a2:	bfb4      	ite	lt
 800a9a4:	222d      	movlt	r2, #45	; 0x2d
 800a9a6:	222b      	movge	r2, #43	; 0x2b
 800a9a8:	2909      	cmp	r1, #9
 800a9aa:	7042      	strb	r2, [r0, #1]
 800a9ac:	dd2a      	ble.n	800aa04 <__exponent+0x70>
 800a9ae:	f10d 0207 	add.w	r2, sp, #7
 800a9b2:	4617      	mov	r7, r2
 800a9b4:	260a      	movs	r6, #10
 800a9b6:	4694      	mov	ip, r2
 800a9b8:	fb91 f5f6 	sdiv	r5, r1, r6
 800a9bc:	fb06 1415 	mls	r4, r6, r5, r1
 800a9c0:	3430      	adds	r4, #48	; 0x30
 800a9c2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	2c63      	cmp	r4, #99	; 0x63
 800a9ca:	f102 32ff 	add.w	r2, r2, #4294967295
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	dcf1      	bgt.n	800a9b6 <__exponent+0x22>
 800a9d2:	3130      	adds	r1, #48	; 0x30
 800a9d4:	f1ac 0402 	sub.w	r4, ip, #2
 800a9d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a9dc:	1c41      	adds	r1, r0, #1
 800a9de:	4622      	mov	r2, r4
 800a9e0:	42ba      	cmp	r2, r7
 800a9e2:	d30a      	bcc.n	800a9fa <__exponent+0x66>
 800a9e4:	f10d 0209 	add.w	r2, sp, #9
 800a9e8:	eba2 020c 	sub.w	r2, r2, ip
 800a9ec:	42bc      	cmp	r4, r7
 800a9ee:	bf88      	it	hi
 800a9f0:	2200      	movhi	r2, #0
 800a9f2:	4413      	add	r3, r2
 800a9f4:	1a18      	subs	r0, r3, r0
 800a9f6:	b003      	add	sp, #12
 800a9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a9fe:	f801 5f01 	strb.w	r5, [r1, #1]!
 800aa02:	e7ed      	b.n	800a9e0 <__exponent+0x4c>
 800aa04:	2330      	movs	r3, #48	; 0x30
 800aa06:	3130      	adds	r1, #48	; 0x30
 800aa08:	7083      	strb	r3, [r0, #2]
 800aa0a:	70c1      	strb	r1, [r0, #3]
 800aa0c:	1d03      	adds	r3, r0, #4
 800aa0e:	e7f1      	b.n	800a9f4 <__exponent+0x60>

0800aa10 <_printf_float>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	ed2d 8b02 	vpush	{d8}
 800aa18:	b08d      	sub	sp, #52	; 0x34
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aa20:	4616      	mov	r6, r2
 800aa22:	461f      	mov	r7, r3
 800aa24:	4605      	mov	r5, r0
 800aa26:	f000 fcd5 	bl	800b3d4 <_localeconv_r>
 800aa2a:	f8d0 a000 	ldr.w	sl, [r0]
 800aa2e:	4650      	mov	r0, sl
 800aa30:	f7f5 fc1e 	bl	8000270 <strlen>
 800aa34:	2300      	movs	r3, #0
 800aa36:	930a      	str	r3, [sp, #40]	; 0x28
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	9305      	str	r3, [sp, #20]
 800aa3c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa40:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa44:	3307      	adds	r3, #7
 800aa46:	f023 0307 	bic.w	r3, r3, #7
 800aa4a:	f103 0208 	add.w	r2, r3, #8
 800aa4e:	f8c8 2000 	str.w	r2, [r8]
 800aa52:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa5a:	9307      	str	r3, [sp, #28]
 800aa5c:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa60:	ee08 0a10 	vmov	s16, r0
 800aa64:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800aa68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa6c:	4b9e      	ldr	r3, [pc, #632]	; (800ace8 <_printf_float+0x2d8>)
 800aa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa72:	f7f6 f85b 	bl	8000b2c <__aeabi_dcmpun>
 800aa76:	bb88      	cbnz	r0, 800aadc <_printf_float+0xcc>
 800aa78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa7c:	4b9a      	ldr	r3, [pc, #616]	; (800ace8 <_printf_float+0x2d8>)
 800aa7e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa82:	f7f6 f835 	bl	8000af0 <__aeabi_dcmple>
 800aa86:	bb48      	cbnz	r0, 800aadc <_printf_float+0xcc>
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	4649      	mov	r1, r9
 800aa90:	f7f6 f824 	bl	8000adc <__aeabi_dcmplt>
 800aa94:	b110      	cbz	r0, 800aa9c <_printf_float+0x8c>
 800aa96:	232d      	movs	r3, #45	; 0x2d
 800aa98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa9c:	4a93      	ldr	r2, [pc, #588]	; (800acec <_printf_float+0x2dc>)
 800aa9e:	4b94      	ldr	r3, [pc, #592]	; (800acf0 <_printf_float+0x2e0>)
 800aaa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aaa4:	bf94      	ite	ls
 800aaa6:	4690      	movls	r8, r2
 800aaa8:	4698      	movhi	r8, r3
 800aaaa:	2303      	movs	r3, #3
 800aaac:	6123      	str	r3, [r4, #16]
 800aaae:	9b05      	ldr	r3, [sp, #20]
 800aab0:	f023 0304 	bic.w	r3, r3, #4
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	f04f 0900 	mov.w	r9, #0
 800aaba:	9700      	str	r7, [sp, #0]
 800aabc:	4633      	mov	r3, r6
 800aabe:	aa0b      	add	r2, sp, #44	; 0x2c
 800aac0:	4621      	mov	r1, r4
 800aac2:	4628      	mov	r0, r5
 800aac4:	f000 f9da 	bl	800ae7c <_printf_common>
 800aac8:	3001      	adds	r0, #1
 800aaca:	f040 8090 	bne.w	800abee <_printf_float+0x1de>
 800aace:	f04f 30ff 	mov.w	r0, #4294967295
 800aad2:	b00d      	add	sp, #52	; 0x34
 800aad4:	ecbd 8b02 	vpop	{d8}
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aadc:	4642      	mov	r2, r8
 800aade:	464b      	mov	r3, r9
 800aae0:	4640      	mov	r0, r8
 800aae2:	4649      	mov	r1, r9
 800aae4:	f7f6 f822 	bl	8000b2c <__aeabi_dcmpun>
 800aae8:	b140      	cbz	r0, 800aafc <_printf_float+0xec>
 800aaea:	464b      	mov	r3, r9
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	bfbc      	itt	lt
 800aaf0:	232d      	movlt	r3, #45	; 0x2d
 800aaf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aaf6:	4a7f      	ldr	r2, [pc, #508]	; (800acf4 <_printf_float+0x2e4>)
 800aaf8:	4b7f      	ldr	r3, [pc, #508]	; (800acf8 <_printf_float+0x2e8>)
 800aafa:	e7d1      	b.n	800aaa0 <_printf_float+0x90>
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab02:	9206      	str	r2, [sp, #24]
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	d13f      	bne.n	800ab88 <_printf_float+0x178>
 800ab08:	2306      	movs	r3, #6
 800ab0a:	6063      	str	r3, [r4, #4]
 800ab0c:	9b05      	ldr	r3, [sp, #20]
 800ab0e:	6861      	ldr	r1, [r4, #4]
 800ab10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ab14:	2300      	movs	r3, #0
 800ab16:	9303      	str	r3, [sp, #12]
 800ab18:	ab0a      	add	r3, sp, #40	; 0x28
 800ab1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ab1e:	ab09      	add	r3, sp, #36	; 0x24
 800ab20:	ec49 8b10 	vmov	d0, r8, r9
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	6022      	str	r2, [r4, #0]
 800ab28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f7ff fecf 	bl	800a8d0 <__cvt>
 800ab32:	9b06      	ldr	r3, [sp, #24]
 800ab34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab36:	2b47      	cmp	r3, #71	; 0x47
 800ab38:	4680      	mov	r8, r0
 800ab3a:	d108      	bne.n	800ab4e <_printf_float+0x13e>
 800ab3c:	1cc8      	adds	r0, r1, #3
 800ab3e:	db02      	blt.n	800ab46 <_printf_float+0x136>
 800ab40:	6863      	ldr	r3, [r4, #4]
 800ab42:	4299      	cmp	r1, r3
 800ab44:	dd41      	ble.n	800abca <_printf_float+0x1ba>
 800ab46:	f1ab 0302 	sub.w	r3, fp, #2
 800ab4a:	fa5f fb83 	uxtb.w	fp, r3
 800ab4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab52:	d820      	bhi.n	800ab96 <_printf_float+0x186>
 800ab54:	3901      	subs	r1, #1
 800ab56:	465a      	mov	r2, fp
 800ab58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab5c:	9109      	str	r1, [sp, #36]	; 0x24
 800ab5e:	f7ff ff19 	bl	800a994 <__exponent>
 800ab62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab64:	1813      	adds	r3, r2, r0
 800ab66:	2a01      	cmp	r2, #1
 800ab68:	4681      	mov	r9, r0
 800ab6a:	6123      	str	r3, [r4, #16]
 800ab6c:	dc02      	bgt.n	800ab74 <_printf_float+0x164>
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	07d2      	lsls	r2, r2, #31
 800ab72:	d501      	bpl.n	800ab78 <_printf_float+0x168>
 800ab74:	3301      	adds	r3, #1
 800ab76:	6123      	str	r3, [r4, #16]
 800ab78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d09c      	beq.n	800aaba <_printf_float+0xaa>
 800ab80:	232d      	movs	r3, #45	; 0x2d
 800ab82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab86:	e798      	b.n	800aaba <_printf_float+0xaa>
 800ab88:	9a06      	ldr	r2, [sp, #24]
 800ab8a:	2a47      	cmp	r2, #71	; 0x47
 800ab8c:	d1be      	bne.n	800ab0c <_printf_float+0xfc>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1bc      	bne.n	800ab0c <_printf_float+0xfc>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e7b9      	b.n	800ab0a <_printf_float+0xfa>
 800ab96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab9a:	d118      	bne.n	800abce <_printf_float+0x1be>
 800ab9c:	2900      	cmp	r1, #0
 800ab9e:	6863      	ldr	r3, [r4, #4]
 800aba0:	dd0b      	ble.n	800abba <_printf_float+0x1aa>
 800aba2:	6121      	str	r1, [r4, #16]
 800aba4:	b913      	cbnz	r3, 800abac <_printf_float+0x19c>
 800aba6:	6822      	ldr	r2, [r4, #0]
 800aba8:	07d0      	lsls	r0, r2, #31
 800abaa:	d502      	bpl.n	800abb2 <_printf_float+0x1a2>
 800abac:	3301      	adds	r3, #1
 800abae:	440b      	add	r3, r1
 800abb0:	6123      	str	r3, [r4, #16]
 800abb2:	65a1      	str	r1, [r4, #88]	; 0x58
 800abb4:	f04f 0900 	mov.w	r9, #0
 800abb8:	e7de      	b.n	800ab78 <_printf_float+0x168>
 800abba:	b913      	cbnz	r3, 800abc2 <_printf_float+0x1b2>
 800abbc:	6822      	ldr	r2, [r4, #0]
 800abbe:	07d2      	lsls	r2, r2, #31
 800abc0:	d501      	bpl.n	800abc6 <_printf_float+0x1b6>
 800abc2:	3302      	adds	r3, #2
 800abc4:	e7f4      	b.n	800abb0 <_printf_float+0x1a0>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e7f2      	b.n	800abb0 <_printf_float+0x1a0>
 800abca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800abce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd0:	4299      	cmp	r1, r3
 800abd2:	db05      	blt.n	800abe0 <_printf_float+0x1d0>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	6121      	str	r1, [r4, #16]
 800abd8:	07d8      	lsls	r0, r3, #31
 800abda:	d5ea      	bpl.n	800abb2 <_printf_float+0x1a2>
 800abdc:	1c4b      	adds	r3, r1, #1
 800abde:	e7e7      	b.n	800abb0 <_printf_float+0x1a0>
 800abe0:	2900      	cmp	r1, #0
 800abe2:	bfd4      	ite	le
 800abe4:	f1c1 0202 	rsble	r2, r1, #2
 800abe8:	2201      	movgt	r2, #1
 800abea:	4413      	add	r3, r2
 800abec:	e7e0      	b.n	800abb0 <_printf_float+0x1a0>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	055a      	lsls	r2, r3, #21
 800abf2:	d407      	bmi.n	800ac04 <_printf_float+0x1f4>
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	4642      	mov	r2, r8
 800abf8:	4631      	mov	r1, r6
 800abfa:	4628      	mov	r0, r5
 800abfc:	47b8      	blx	r7
 800abfe:	3001      	adds	r0, #1
 800ac00:	d12c      	bne.n	800ac5c <_printf_float+0x24c>
 800ac02:	e764      	b.n	800aace <_printf_float+0xbe>
 800ac04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac08:	f240 80e0 	bls.w	800adcc <_printf_float+0x3bc>
 800ac0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac10:	2200      	movs	r2, #0
 800ac12:	2300      	movs	r3, #0
 800ac14:	f7f5 ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d034      	beq.n	800ac86 <_printf_float+0x276>
 800ac1c:	4a37      	ldr	r2, [pc, #220]	; (800acfc <_printf_float+0x2ec>)
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4631      	mov	r1, r6
 800ac22:	4628      	mov	r0, r5
 800ac24:	47b8      	blx	r7
 800ac26:	3001      	adds	r0, #1
 800ac28:	f43f af51 	beq.w	800aace <_printf_float+0xbe>
 800ac2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac30:	429a      	cmp	r2, r3
 800ac32:	db02      	blt.n	800ac3a <_printf_float+0x22a>
 800ac34:	6823      	ldr	r3, [r4, #0]
 800ac36:	07d8      	lsls	r0, r3, #31
 800ac38:	d510      	bpl.n	800ac5c <_printf_float+0x24c>
 800ac3a:	ee18 3a10 	vmov	r3, s16
 800ac3e:	4652      	mov	r2, sl
 800ac40:	4631      	mov	r1, r6
 800ac42:	4628      	mov	r0, r5
 800ac44:	47b8      	blx	r7
 800ac46:	3001      	adds	r0, #1
 800ac48:	f43f af41 	beq.w	800aace <_printf_float+0xbe>
 800ac4c:	f04f 0800 	mov.w	r8, #0
 800ac50:	f104 091a 	add.w	r9, r4, #26
 800ac54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4543      	cmp	r3, r8
 800ac5a:	dc09      	bgt.n	800ac70 <_printf_float+0x260>
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	079b      	lsls	r3, r3, #30
 800ac60:	f100 8107 	bmi.w	800ae72 <_printf_float+0x462>
 800ac64:	68e0      	ldr	r0, [r4, #12]
 800ac66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac68:	4298      	cmp	r0, r3
 800ac6a:	bfb8      	it	lt
 800ac6c:	4618      	movlt	r0, r3
 800ac6e:	e730      	b.n	800aad2 <_printf_float+0xc2>
 800ac70:	2301      	movs	r3, #1
 800ac72:	464a      	mov	r2, r9
 800ac74:	4631      	mov	r1, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b8      	blx	r7
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f43f af27 	beq.w	800aace <_printf_float+0xbe>
 800ac80:	f108 0801 	add.w	r8, r8, #1
 800ac84:	e7e6      	b.n	800ac54 <_printf_float+0x244>
 800ac86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	dc39      	bgt.n	800ad00 <_printf_float+0x2f0>
 800ac8c:	4a1b      	ldr	r2, [pc, #108]	; (800acfc <_printf_float+0x2ec>)
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4631      	mov	r1, r6
 800ac92:	4628      	mov	r0, r5
 800ac94:	47b8      	blx	r7
 800ac96:	3001      	adds	r0, #1
 800ac98:	f43f af19 	beq.w	800aace <_printf_float+0xbe>
 800ac9c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aca0:	4313      	orrs	r3, r2
 800aca2:	d102      	bne.n	800acaa <_printf_float+0x29a>
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	07d9      	lsls	r1, r3, #31
 800aca8:	d5d8      	bpl.n	800ac5c <_printf_float+0x24c>
 800acaa:	ee18 3a10 	vmov	r3, s16
 800acae:	4652      	mov	r2, sl
 800acb0:	4631      	mov	r1, r6
 800acb2:	4628      	mov	r0, r5
 800acb4:	47b8      	blx	r7
 800acb6:	3001      	adds	r0, #1
 800acb8:	f43f af09 	beq.w	800aace <_printf_float+0xbe>
 800acbc:	f04f 0900 	mov.w	r9, #0
 800acc0:	f104 0a1a 	add.w	sl, r4, #26
 800acc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc6:	425b      	negs	r3, r3
 800acc8:	454b      	cmp	r3, r9
 800acca:	dc01      	bgt.n	800acd0 <_printf_float+0x2c0>
 800accc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acce:	e792      	b.n	800abf6 <_printf_float+0x1e6>
 800acd0:	2301      	movs	r3, #1
 800acd2:	4652      	mov	r2, sl
 800acd4:	4631      	mov	r1, r6
 800acd6:	4628      	mov	r0, r5
 800acd8:	47b8      	blx	r7
 800acda:	3001      	adds	r0, #1
 800acdc:	f43f aef7 	beq.w	800aace <_printf_float+0xbe>
 800ace0:	f109 0901 	add.w	r9, r9, #1
 800ace4:	e7ee      	b.n	800acc4 <_printf_float+0x2b4>
 800ace6:	bf00      	nop
 800ace8:	7fefffff 	.word	0x7fefffff
 800acec:	0800de68 	.word	0x0800de68
 800acf0:	0800de6c 	.word	0x0800de6c
 800acf4:	0800de70 	.word	0x0800de70
 800acf8:	0800de74 	.word	0x0800de74
 800acfc:	0800de78 	.word	0x0800de78
 800ad00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad04:	429a      	cmp	r2, r3
 800ad06:	bfa8      	it	ge
 800ad08:	461a      	movge	r2, r3
 800ad0a:	2a00      	cmp	r2, #0
 800ad0c:	4691      	mov	r9, r2
 800ad0e:	dc37      	bgt.n	800ad80 <_printf_float+0x370>
 800ad10:	f04f 0b00 	mov.w	fp, #0
 800ad14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad18:	f104 021a 	add.w	r2, r4, #26
 800ad1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad1e:	9305      	str	r3, [sp, #20]
 800ad20:	eba3 0309 	sub.w	r3, r3, r9
 800ad24:	455b      	cmp	r3, fp
 800ad26:	dc33      	bgt.n	800ad90 <_printf_float+0x380>
 800ad28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	db3b      	blt.n	800ada8 <_printf_float+0x398>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	07da      	lsls	r2, r3, #31
 800ad34:	d438      	bmi.n	800ada8 <_printf_float+0x398>
 800ad36:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ad3a:	eba2 0903 	sub.w	r9, r2, r3
 800ad3e:	9b05      	ldr	r3, [sp, #20]
 800ad40:	1ad2      	subs	r2, r2, r3
 800ad42:	4591      	cmp	r9, r2
 800ad44:	bfa8      	it	ge
 800ad46:	4691      	movge	r9, r2
 800ad48:	f1b9 0f00 	cmp.w	r9, #0
 800ad4c:	dc35      	bgt.n	800adba <_printf_float+0x3aa>
 800ad4e:	f04f 0800 	mov.w	r8, #0
 800ad52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad56:	f104 0a1a 	add.w	sl, r4, #26
 800ad5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad5e:	1a9b      	subs	r3, r3, r2
 800ad60:	eba3 0309 	sub.w	r3, r3, r9
 800ad64:	4543      	cmp	r3, r8
 800ad66:	f77f af79 	ble.w	800ac5c <_printf_float+0x24c>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	4652      	mov	r2, sl
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b8      	blx	r7
 800ad74:	3001      	adds	r0, #1
 800ad76:	f43f aeaa 	beq.w	800aace <_printf_float+0xbe>
 800ad7a:	f108 0801 	add.w	r8, r8, #1
 800ad7e:	e7ec      	b.n	800ad5a <_printf_float+0x34a>
 800ad80:	4613      	mov	r3, r2
 800ad82:	4631      	mov	r1, r6
 800ad84:	4642      	mov	r2, r8
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	d1c0      	bne.n	800ad10 <_printf_float+0x300>
 800ad8e:	e69e      	b.n	800aace <_printf_float+0xbe>
 800ad90:	2301      	movs	r3, #1
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	9205      	str	r2, [sp, #20]
 800ad98:	47b8      	blx	r7
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	f43f ae97 	beq.w	800aace <_printf_float+0xbe>
 800ada0:	9a05      	ldr	r2, [sp, #20]
 800ada2:	f10b 0b01 	add.w	fp, fp, #1
 800ada6:	e7b9      	b.n	800ad1c <_printf_float+0x30c>
 800ada8:	ee18 3a10 	vmov	r3, s16
 800adac:	4652      	mov	r2, sl
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	d1be      	bne.n	800ad36 <_printf_float+0x326>
 800adb8:	e689      	b.n	800aace <_printf_float+0xbe>
 800adba:	9a05      	ldr	r2, [sp, #20]
 800adbc:	464b      	mov	r3, r9
 800adbe:	4442      	add	r2, r8
 800adc0:	4631      	mov	r1, r6
 800adc2:	4628      	mov	r0, r5
 800adc4:	47b8      	blx	r7
 800adc6:	3001      	adds	r0, #1
 800adc8:	d1c1      	bne.n	800ad4e <_printf_float+0x33e>
 800adca:	e680      	b.n	800aace <_printf_float+0xbe>
 800adcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adce:	2a01      	cmp	r2, #1
 800add0:	dc01      	bgt.n	800add6 <_printf_float+0x3c6>
 800add2:	07db      	lsls	r3, r3, #31
 800add4:	d53a      	bpl.n	800ae4c <_printf_float+0x43c>
 800add6:	2301      	movs	r3, #1
 800add8:	4642      	mov	r2, r8
 800adda:	4631      	mov	r1, r6
 800addc:	4628      	mov	r0, r5
 800adde:	47b8      	blx	r7
 800ade0:	3001      	adds	r0, #1
 800ade2:	f43f ae74 	beq.w	800aace <_printf_float+0xbe>
 800ade6:	ee18 3a10 	vmov	r3, s16
 800adea:	4652      	mov	r2, sl
 800adec:	4631      	mov	r1, r6
 800adee:	4628      	mov	r0, r5
 800adf0:	47b8      	blx	r7
 800adf2:	3001      	adds	r0, #1
 800adf4:	f43f ae6b 	beq.w	800aace <_printf_float+0xbe>
 800adf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adfc:	2200      	movs	r2, #0
 800adfe:	2300      	movs	r3, #0
 800ae00:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ae04:	f7f5 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae08:	b9d8      	cbnz	r0, 800ae42 <_printf_float+0x432>
 800ae0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ae0e:	f108 0201 	add.w	r2, r8, #1
 800ae12:	4631      	mov	r1, r6
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	d10e      	bne.n	800ae3a <_printf_float+0x42a>
 800ae1c:	e657      	b.n	800aace <_printf_float+0xbe>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	4652      	mov	r2, sl
 800ae22:	4631      	mov	r1, r6
 800ae24:	4628      	mov	r0, r5
 800ae26:	47b8      	blx	r7
 800ae28:	3001      	adds	r0, #1
 800ae2a:	f43f ae50 	beq.w	800aace <_printf_float+0xbe>
 800ae2e:	f108 0801 	add.w	r8, r8, #1
 800ae32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae34:	3b01      	subs	r3, #1
 800ae36:	4543      	cmp	r3, r8
 800ae38:	dcf1      	bgt.n	800ae1e <_printf_float+0x40e>
 800ae3a:	464b      	mov	r3, r9
 800ae3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae40:	e6da      	b.n	800abf8 <_printf_float+0x1e8>
 800ae42:	f04f 0800 	mov.w	r8, #0
 800ae46:	f104 0a1a 	add.w	sl, r4, #26
 800ae4a:	e7f2      	b.n	800ae32 <_printf_float+0x422>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	4642      	mov	r2, r8
 800ae50:	e7df      	b.n	800ae12 <_printf_float+0x402>
 800ae52:	2301      	movs	r3, #1
 800ae54:	464a      	mov	r2, r9
 800ae56:	4631      	mov	r1, r6
 800ae58:	4628      	mov	r0, r5
 800ae5a:	47b8      	blx	r7
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	f43f ae36 	beq.w	800aace <_printf_float+0xbe>
 800ae62:	f108 0801 	add.w	r8, r8, #1
 800ae66:	68e3      	ldr	r3, [r4, #12]
 800ae68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae6a:	1a5b      	subs	r3, r3, r1
 800ae6c:	4543      	cmp	r3, r8
 800ae6e:	dcf0      	bgt.n	800ae52 <_printf_float+0x442>
 800ae70:	e6f8      	b.n	800ac64 <_printf_float+0x254>
 800ae72:	f04f 0800 	mov.w	r8, #0
 800ae76:	f104 0919 	add.w	r9, r4, #25
 800ae7a:	e7f4      	b.n	800ae66 <_printf_float+0x456>

0800ae7c <_printf_common>:
 800ae7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae80:	4616      	mov	r6, r2
 800ae82:	4699      	mov	r9, r3
 800ae84:	688a      	ldr	r2, [r1, #8]
 800ae86:	690b      	ldr	r3, [r1, #16]
 800ae88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	bfb8      	it	lt
 800ae90:	4613      	movlt	r3, r2
 800ae92:	6033      	str	r3, [r6, #0]
 800ae94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae98:	4607      	mov	r7, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	b10a      	cbz	r2, 800aea2 <_printf_common+0x26>
 800ae9e:	3301      	adds	r3, #1
 800aea0:	6033      	str	r3, [r6, #0]
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	0699      	lsls	r1, r3, #26
 800aea6:	bf42      	ittt	mi
 800aea8:	6833      	ldrmi	r3, [r6, #0]
 800aeaa:	3302      	addmi	r3, #2
 800aeac:	6033      	strmi	r3, [r6, #0]
 800aeae:	6825      	ldr	r5, [r4, #0]
 800aeb0:	f015 0506 	ands.w	r5, r5, #6
 800aeb4:	d106      	bne.n	800aec4 <_printf_common+0x48>
 800aeb6:	f104 0a19 	add.w	sl, r4, #25
 800aeba:	68e3      	ldr	r3, [r4, #12]
 800aebc:	6832      	ldr	r2, [r6, #0]
 800aebe:	1a9b      	subs	r3, r3, r2
 800aec0:	42ab      	cmp	r3, r5
 800aec2:	dc26      	bgt.n	800af12 <_printf_common+0x96>
 800aec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aec8:	1e13      	subs	r3, r2, #0
 800aeca:	6822      	ldr	r2, [r4, #0]
 800aecc:	bf18      	it	ne
 800aece:	2301      	movne	r3, #1
 800aed0:	0692      	lsls	r2, r2, #26
 800aed2:	d42b      	bmi.n	800af2c <_printf_common+0xb0>
 800aed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aed8:	4649      	mov	r1, r9
 800aeda:	4638      	mov	r0, r7
 800aedc:	47c0      	blx	r8
 800aede:	3001      	adds	r0, #1
 800aee0:	d01e      	beq.n	800af20 <_printf_common+0xa4>
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	6922      	ldr	r2, [r4, #16]
 800aee6:	f003 0306 	and.w	r3, r3, #6
 800aeea:	2b04      	cmp	r3, #4
 800aeec:	bf02      	ittt	eq
 800aeee:	68e5      	ldreq	r5, [r4, #12]
 800aef0:	6833      	ldreq	r3, [r6, #0]
 800aef2:	1aed      	subeq	r5, r5, r3
 800aef4:	68a3      	ldr	r3, [r4, #8]
 800aef6:	bf0c      	ite	eq
 800aef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aefc:	2500      	movne	r5, #0
 800aefe:	4293      	cmp	r3, r2
 800af00:	bfc4      	itt	gt
 800af02:	1a9b      	subgt	r3, r3, r2
 800af04:	18ed      	addgt	r5, r5, r3
 800af06:	2600      	movs	r6, #0
 800af08:	341a      	adds	r4, #26
 800af0a:	42b5      	cmp	r5, r6
 800af0c:	d11a      	bne.n	800af44 <_printf_common+0xc8>
 800af0e:	2000      	movs	r0, #0
 800af10:	e008      	b.n	800af24 <_printf_common+0xa8>
 800af12:	2301      	movs	r3, #1
 800af14:	4652      	mov	r2, sl
 800af16:	4649      	mov	r1, r9
 800af18:	4638      	mov	r0, r7
 800af1a:	47c0      	blx	r8
 800af1c:	3001      	adds	r0, #1
 800af1e:	d103      	bne.n	800af28 <_printf_common+0xac>
 800af20:	f04f 30ff 	mov.w	r0, #4294967295
 800af24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af28:	3501      	adds	r5, #1
 800af2a:	e7c6      	b.n	800aeba <_printf_common+0x3e>
 800af2c:	18e1      	adds	r1, r4, r3
 800af2e:	1c5a      	adds	r2, r3, #1
 800af30:	2030      	movs	r0, #48	; 0x30
 800af32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af36:	4422      	add	r2, r4
 800af38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af40:	3302      	adds	r3, #2
 800af42:	e7c7      	b.n	800aed4 <_printf_common+0x58>
 800af44:	2301      	movs	r3, #1
 800af46:	4622      	mov	r2, r4
 800af48:	4649      	mov	r1, r9
 800af4a:	4638      	mov	r0, r7
 800af4c:	47c0      	blx	r8
 800af4e:	3001      	adds	r0, #1
 800af50:	d0e6      	beq.n	800af20 <_printf_common+0xa4>
 800af52:	3601      	adds	r6, #1
 800af54:	e7d9      	b.n	800af0a <_printf_common+0x8e>
	...

0800af58 <_printf_i>:
 800af58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af5c:	7e0f      	ldrb	r7, [r1, #24]
 800af5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af60:	2f78      	cmp	r7, #120	; 0x78
 800af62:	4691      	mov	r9, r2
 800af64:	4680      	mov	r8, r0
 800af66:	460c      	mov	r4, r1
 800af68:	469a      	mov	sl, r3
 800af6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af6e:	d807      	bhi.n	800af80 <_printf_i+0x28>
 800af70:	2f62      	cmp	r7, #98	; 0x62
 800af72:	d80a      	bhi.n	800af8a <_printf_i+0x32>
 800af74:	2f00      	cmp	r7, #0
 800af76:	f000 80d4 	beq.w	800b122 <_printf_i+0x1ca>
 800af7a:	2f58      	cmp	r7, #88	; 0x58
 800af7c:	f000 80c0 	beq.w	800b100 <_printf_i+0x1a8>
 800af80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af88:	e03a      	b.n	800b000 <_printf_i+0xa8>
 800af8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af8e:	2b15      	cmp	r3, #21
 800af90:	d8f6      	bhi.n	800af80 <_printf_i+0x28>
 800af92:	a101      	add	r1, pc, #4	; (adr r1, 800af98 <_printf_i+0x40>)
 800af94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af98:	0800aff1 	.word	0x0800aff1
 800af9c:	0800b005 	.word	0x0800b005
 800afa0:	0800af81 	.word	0x0800af81
 800afa4:	0800af81 	.word	0x0800af81
 800afa8:	0800af81 	.word	0x0800af81
 800afac:	0800af81 	.word	0x0800af81
 800afb0:	0800b005 	.word	0x0800b005
 800afb4:	0800af81 	.word	0x0800af81
 800afb8:	0800af81 	.word	0x0800af81
 800afbc:	0800af81 	.word	0x0800af81
 800afc0:	0800af81 	.word	0x0800af81
 800afc4:	0800b109 	.word	0x0800b109
 800afc8:	0800b031 	.word	0x0800b031
 800afcc:	0800b0c3 	.word	0x0800b0c3
 800afd0:	0800af81 	.word	0x0800af81
 800afd4:	0800af81 	.word	0x0800af81
 800afd8:	0800b12b 	.word	0x0800b12b
 800afdc:	0800af81 	.word	0x0800af81
 800afe0:	0800b031 	.word	0x0800b031
 800afe4:	0800af81 	.word	0x0800af81
 800afe8:	0800af81 	.word	0x0800af81
 800afec:	0800b0cb 	.word	0x0800b0cb
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	1d1a      	adds	r2, r3, #4
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	602a      	str	r2, [r5, #0]
 800aff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800affc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b000:	2301      	movs	r3, #1
 800b002:	e09f      	b.n	800b144 <_printf_i+0x1ec>
 800b004:	6820      	ldr	r0, [r4, #0]
 800b006:	682b      	ldr	r3, [r5, #0]
 800b008:	0607      	lsls	r7, r0, #24
 800b00a:	f103 0104 	add.w	r1, r3, #4
 800b00e:	6029      	str	r1, [r5, #0]
 800b010:	d501      	bpl.n	800b016 <_printf_i+0xbe>
 800b012:	681e      	ldr	r6, [r3, #0]
 800b014:	e003      	b.n	800b01e <_printf_i+0xc6>
 800b016:	0646      	lsls	r6, r0, #25
 800b018:	d5fb      	bpl.n	800b012 <_printf_i+0xba>
 800b01a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b01e:	2e00      	cmp	r6, #0
 800b020:	da03      	bge.n	800b02a <_printf_i+0xd2>
 800b022:	232d      	movs	r3, #45	; 0x2d
 800b024:	4276      	negs	r6, r6
 800b026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b02a:	485a      	ldr	r0, [pc, #360]	; (800b194 <_printf_i+0x23c>)
 800b02c:	230a      	movs	r3, #10
 800b02e:	e012      	b.n	800b056 <_printf_i+0xfe>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	6820      	ldr	r0, [r4, #0]
 800b034:	1d19      	adds	r1, r3, #4
 800b036:	6029      	str	r1, [r5, #0]
 800b038:	0605      	lsls	r5, r0, #24
 800b03a:	d501      	bpl.n	800b040 <_printf_i+0xe8>
 800b03c:	681e      	ldr	r6, [r3, #0]
 800b03e:	e002      	b.n	800b046 <_printf_i+0xee>
 800b040:	0641      	lsls	r1, r0, #25
 800b042:	d5fb      	bpl.n	800b03c <_printf_i+0xe4>
 800b044:	881e      	ldrh	r6, [r3, #0]
 800b046:	4853      	ldr	r0, [pc, #332]	; (800b194 <_printf_i+0x23c>)
 800b048:	2f6f      	cmp	r7, #111	; 0x6f
 800b04a:	bf0c      	ite	eq
 800b04c:	2308      	moveq	r3, #8
 800b04e:	230a      	movne	r3, #10
 800b050:	2100      	movs	r1, #0
 800b052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b056:	6865      	ldr	r5, [r4, #4]
 800b058:	60a5      	str	r5, [r4, #8]
 800b05a:	2d00      	cmp	r5, #0
 800b05c:	bfa2      	ittt	ge
 800b05e:	6821      	ldrge	r1, [r4, #0]
 800b060:	f021 0104 	bicge.w	r1, r1, #4
 800b064:	6021      	strge	r1, [r4, #0]
 800b066:	b90e      	cbnz	r6, 800b06c <_printf_i+0x114>
 800b068:	2d00      	cmp	r5, #0
 800b06a:	d04b      	beq.n	800b104 <_printf_i+0x1ac>
 800b06c:	4615      	mov	r5, r2
 800b06e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b072:	fb03 6711 	mls	r7, r3, r1, r6
 800b076:	5dc7      	ldrb	r7, [r0, r7]
 800b078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b07c:	4637      	mov	r7, r6
 800b07e:	42bb      	cmp	r3, r7
 800b080:	460e      	mov	r6, r1
 800b082:	d9f4      	bls.n	800b06e <_printf_i+0x116>
 800b084:	2b08      	cmp	r3, #8
 800b086:	d10b      	bne.n	800b0a0 <_printf_i+0x148>
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	07de      	lsls	r6, r3, #31
 800b08c:	d508      	bpl.n	800b0a0 <_printf_i+0x148>
 800b08e:	6923      	ldr	r3, [r4, #16]
 800b090:	6861      	ldr	r1, [r4, #4]
 800b092:	4299      	cmp	r1, r3
 800b094:	bfde      	ittt	le
 800b096:	2330      	movle	r3, #48	; 0x30
 800b098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b09c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0a0:	1b52      	subs	r2, r2, r5
 800b0a2:	6122      	str	r2, [r4, #16]
 800b0a4:	f8cd a000 	str.w	sl, [sp]
 800b0a8:	464b      	mov	r3, r9
 800b0aa:	aa03      	add	r2, sp, #12
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	f7ff fee4 	bl	800ae7c <_printf_common>
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	d14a      	bne.n	800b14e <_printf_i+0x1f6>
 800b0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0bc:	b004      	add	sp, #16
 800b0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	f043 0320 	orr.w	r3, r3, #32
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	4833      	ldr	r0, [pc, #204]	; (800b198 <_printf_i+0x240>)
 800b0cc:	2778      	movs	r7, #120	; 0x78
 800b0ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	6829      	ldr	r1, [r5, #0]
 800b0d6:	061f      	lsls	r7, r3, #24
 800b0d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0dc:	d402      	bmi.n	800b0e4 <_printf_i+0x18c>
 800b0de:	065f      	lsls	r7, r3, #25
 800b0e0:	bf48      	it	mi
 800b0e2:	b2b6      	uxthmi	r6, r6
 800b0e4:	07df      	lsls	r7, r3, #31
 800b0e6:	bf48      	it	mi
 800b0e8:	f043 0320 	orrmi.w	r3, r3, #32
 800b0ec:	6029      	str	r1, [r5, #0]
 800b0ee:	bf48      	it	mi
 800b0f0:	6023      	strmi	r3, [r4, #0]
 800b0f2:	b91e      	cbnz	r6, 800b0fc <_printf_i+0x1a4>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	f023 0320 	bic.w	r3, r3, #32
 800b0fa:	6023      	str	r3, [r4, #0]
 800b0fc:	2310      	movs	r3, #16
 800b0fe:	e7a7      	b.n	800b050 <_printf_i+0xf8>
 800b100:	4824      	ldr	r0, [pc, #144]	; (800b194 <_printf_i+0x23c>)
 800b102:	e7e4      	b.n	800b0ce <_printf_i+0x176>
 800b104:	4615      	mov	r5, r2
 800b106:	e7bd      	b.n	800b084 <_printf_i+0x12c>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	6826      	ldr	r6, [r4, #0]
 800b10c:	6961      	ldr	r1, [r4, #20]
 800b10e:	1d18      	adds	r0, r3, #4
 800b110:	6028      	str	r0, [r5, #0]
 800b112:	0635      	lsls	r5, r6, #24
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	d501      	bpl.n	800b11c <_printf_i+0x1c4>
 800b118:	6019      	str	r1, [r3, #0]
 800b11a:	e002      	b.n	800b122 <_printf_i+0x1ca>
 800b11c:	0670      	lsls	r0, r6, #25
 800b11e:	d5fb      	bpl.n	800b118 <_printf_i+0x1c0>
 800b120:	8019      	strh	r1, [r3, #0]
 800b122:	2300      	movs	r3, #0
 800b124:	6123      	str	r3, [r4, #16]
 800b126:	4615      	mov	r5, r2
 800b128:	e7bc      	b.n	800b0a4 <_printf_i+0x14c>
 800b12a:	682b      	ldr	r3, [r5, #0]
 800b12c:	1d1a      	adds	r2, r3, #4
 800b12e:	602a      	str	r2, [r5, #0]
 800b130:	681d      	ldr	r5, [r3, #0]
 800b132:	6862      	ldr	r2, [r4, #4]
 800b134:	2100      	movs	r1, #0
 800b136:	4628      	mov	r0, r5
 800b138:	f7f5 f84a 	bl	80001d0 <memchr>
 800b13c:	b108      	cbz	r0, 800b142 <_printf_i+0x1ea>
 800b13e:	1b40      	subs	r0, r0, r5
 800b140:	6060      	str	r0, [r4, #4]
 800b142:	6863      	ldr	r3, [r4, #4]
 800b144:	6123      	str	r3, [r4, #16]
 800b146:	2300      	movs	r3, #0
 800b148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b14c:	e7aa      	b.n	800b0a4 <_printf_i+0x14c>
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	462a      	mov	r2, r5
 800b152:	4649      	mov	r1, r9
 800b154:	4640      	mov	r0, r8
 800b156:	47d0      	blx	sl
 800b158:	3001      	adds	r0, #1
 800b15a:	d0ad      	beq.n	800b0b8 <_printf_i+0x160>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	079b      	lsls	r3, r3, #30
 800b160:	d413      	bmi.n	800b18a <_printf_i+0x232>
 800b162:	68e0      	ldr	r0, [r4, #12]
 800b164:	9b03      	ldr	r3, [sp, #12]
 800b166:	4298      	cmp	r0, r3
 800b168:	bfb8      	it	lt
 800b16a:	4618      	movlt	r0, r3
 800b16c:	e7a6      	b.n	800b0bc <_printf_i+0x164>
 800b16e:	2301      	movs	r3, #1
 800b170:	4632      	mov	r2, r6
 800b172:	4649      	mov	r1, r9
 800b174:	4640      	mov	r0, r8
 800b176:	47d0      	blx	sl
 800b178:	3001      	adds	r0, #1
 800b17a:	d09d      	beq.n	800b0b8 <_printf_i+0x160>
 800b17c:	3501      	adds	r5, #1
 800b17e:	68e3      	ldr	r3, [r4, #12]
 800b180:	9903      	ldr	r1, [sp, #12]
 800b182:	1a5b      	subs	r3, r3, r1
 800b184:	42ab      	cmp	r3, r5
 800b186:	dcf2      	bgt.n	800b16e <_printf_i+0x216>
 800b188:	e7eb      	b.n	800b162 <_printf_i+0x20a>
 800b18a:	2500      	movs	r5, #0
 800b18c:	f104 0619 	add.w	r6, r4, #25
 800b190:	e7f5      	b.n	800b17e <_printf_i+0x226>
 800b192:	bf00      	nop
 800b194:	0800de7a 	.word	0x0800de7a
 800b198:	0800de8b 	.word	0x0800de8b

0800b19c <std>:
 800b19c:	2300      	movs	r3, #0
 800b19e:	b510      	push	{r4, lr}
 800b1a0:	4604      	mov	r4, r0
 800b1a2:	e9c0 3300 	strd	r3, r3, [r0]
 800b1a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1aa:	6083      	str	r3, [r0, #8]
 800b1ac:	8181      	strh	r1, [r0, #12]
 800b1ae:	6643      	str	r3, [r0, #100]	; 0x64
 800b1b0:	81c2      	strh	r2, [r0, #14]
 800b1b2:	6183      	str	r3, [r0, #24]
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	2208      	movs	r2, #8
 800b1b8:	305c      	adds	r0, #92	; 0x5c
 800b1ba:	f000 f903 	bl	800b3c4 <memset>
 800b1be:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <std+0x38>)
 800b1c0:	6263      	str	r3, [r4, #36]	; 0x24
 800b1c2:	4b05      	ldr	r3, [pc, #20]	; (800b1d8 <std+0x3c>)
 800b1c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1c6:	4b05      	ldr	r3, [pc, #20]	; (800b1dc <std+0x40>)
 800b1c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1ca:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <std+0x44>)
 800b1cc:	6224      	str	r4, [r4, #32]
 800b1ce:	6323      	str	r3, [r4, #48]	; 0x30
 800b1d0:	bd10      	pop	{r4, pc}
 800b1d2:	bf00      	nop
 800b1d4:	0800b2fd 	.word	0x0800b2fd
 800b1d8:	0800b31f 	.word	0x0800b31f
 800b1dc:	0800b357 	.word	0x0800b357
 800b1e0:	0800b37b 	.word	0x0800b37b

0800b1e4 <stdio_exit_handler>:
 800b1e4:	4a02      	ldr	r2, [pc, #8]	; (800b1f0 <stdio_exit_handler+0xc>)
 800b1e6:	4903      	ldr	r1, [pc, #12]	; (800b1f4 <stdio_exit_handler+0x10>)
 800b1e8:	4803      	ldr	r0, [pc, #12]	; (800b1f8 <stdio_exit_handler+0x14>)
 800b1ea:	f000 b869 	b.w	800b2c0 <_fwalk_sglue>
 800b1ee:	bf00      	nop
 800b1f0:	20000014 	.word	0x20000014
 800b1f4:	0800ce69 	.word	0x0800ce69
 800b1f8:	20000020 	.word	0x20000020

0800b1fc <cleanup_stdio>:
 800b1fc:	6841      	ldr	r1, [r0, #4]
 800b1fe:	4b0c      	ldr	r3, [pc, #48]	; (800b230 <cleanup_stdio+0x34>)
 800b200:	4299      	cmp	r1, r3
 800b202:	b510      	push	{r4, lr}
 800b204:	4604      	mov	r4, r0
 800b206:	d001      	beq.n	800b20c <cleanup_stdio+0x10>
 800b208:	f001 fe2e 	bl	800ce68 <_fflush_r>
 800b20c:	68a1      	ldr	r1, [r4, #8]
 800b20e:	4b09      	ldr	r3, [pc, #36]	; (800b234 <cleanup_stdio+0x38>)
 800b210:	4299      	cmp	r1, r3
 800b212:	d002      	beq.n	800b21a <cleanup_stdio+0x1e>
 800b214:	4620      	mov	r0, r4
 800b216:	f001 fe27 	bl	800ce68 <_fflush_r>
 800b21a:	68e1      	ldr	r1, [r4, #12]
 800b21c:	4b06      	ldr	r3, [pc, #24]	; (800b238 <cleanup_stdio+0x3c>)
 800b21e:	4299      	cmp	r1, r3
 800b220:	d004      	beq.n	800b22c <cleanup_stdio+0x30>
 800b222:	4620      	mov	r0, r4
 800b224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b228:	f001 be1e 	b.w	800ce68 <_fflush_r>
 800b22c:	bd10      	pop	{r4, pc}
 800b22e:	bf00      	nop
 800b230:	20001db0 	.word	0x20001db0
 800b234:	20001e18 	.word	0x20001e18
 800b238:	20001e80 	.word	0x20001e80

0800b23c <global_stdio_init.part.0>:
 800b23c:	b510      	push	{r4, lr}
 800b23e:	4b0b      	ldr	r3, [pc, #44]	; (800b26c <global_stdio_init.part.0+0x30>)
 800b240:	4c0b      	ldr	r4, [pc, #44]	; (800b270 <global_stdio_init.part.0+0x34>)
 800b242:	4a0c      	ldr	r2, [pc, #48]	; (800b274 <global_stdio_init.part.0+0x38>)
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	4620      	mov	r0, r4
 800b248:	2200      	movs	r2, #0
 800b24a:	2104      	movs	r1, #4
 800b24c:	f7ff ffa6 	bl	800b19c <std>
 800b250:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b254:	2201      	movs	r2, #1
 800b256:	2109      	movs	r1, #9
 800b258:	f7ff ffa0 	bl	800b19c <std>
 800b25c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b260:	2202      	movs	r2, #2
 800b262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b266:	2112      	movs	r1, #18
 800b268:	f7ff bf98 	b.w	800b19c <std>
 800b26c:	20001ee8 	.word	0x20001ee8
 800b270:	20001db0 	.word	0x20001db0
 800b274:	0800b1e5 	.word	0x0800b1e5

0800b278 <__sfp_lock_acquire>:
 800b278:	4801      	ldr	r0, [pc, #4]	; (800b280 <__sfp_lock_acquire+0x8>)
 800b27a:	f000 b91f 	b.w	800b4bc <__retarget_lock_acquire_recursive>
 800b27e:	bf00      	nop
 800b280:	20001ef1 	.word	0x20001ef1

0800b284 <__sfp_lock_release>:
 800b284:	4801      	ldr	r0, [pc, #4]	; (800b28c <__sfp_lock_release+0x8>)
 800b286:	f000 b91a 	b.w	800b4be <__retarget_lock_release_recursive>
 800b28a:	bf00      	nop
 800b28c:	20001ef1 	.word	0x20001ef1

0800b290 <__sinit>:
 800b290:	b510      	push	{r4, lr}
 800b292:	4604      	mov	r4, r0
 800b294:	f7ff fff0 	bl	800b278 <__sfp_lock_acquire>
 800b298:	6a23      	ldr	r3, [r4, #32]
 800b29a:	b11b      	cbz	r3, 800b2a4 <__sinit+0x14>
 800b29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2a0:	f7ff bff0 	b.w	800b284 <__sfp_lock_release>
 800b2a4:	4b04      	ldr	r3, [pc, #16]	; (800b2b8 <__sinit+0x28>)
 800b2a6:	6223      	str	r3, [r4, #32]
 800b2a8:	4b04      	ldr	r3, [pc, #16]	; (800b2bc <__sinit+0x2c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1f5      	bne.n	800b29c <__sinit+0xc>
 800b2b0:	f7ff ffc4 	bl	800b23c <global_stdio_init.part.0>
 800b2b4:	e7f2      	b.n	800b29c <__sinit+0xc>
 800b2b6:	bf00      	nop
 800b2b8:	0800b1fd 	.word	0x0800b1fd
 800b2bc:	20001ee8 	.word	0x20001ee8

0800b2c0 <_fwalk_sglue>:
 800b2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c4:	4607      	mov	r7, r0
 800b2c6:	4688      	mov	r8, r1
 800b2c8:	4614      	mov	r4, r2
 800b2ca:	2600      	movs	r6, #0
 800b2cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2d0:	f1b9 0901 	subs.w	r9, r9, #1
 800b2d4:	d505      	bpl.n	800b2e2 <_fwalk_sglue+0x22>
 800b2d6:	6824      	ldr	r4, [r4, #0]
 800b2d8:	2c00      	cmp	r4, #0
 800b2da:	d1f7      	bne.n	800b2cc <_fwalk_sglue+0xc>
 800b2dc:	4630      	mov	r0, r6
 800b2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e2:	89ab      	ldrh	r3, [r5, #12]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d907      	bls.n	800b2f8 <_fwalk_sglue+0x38>
 800b2e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	d003      	beq.n	800b2f8 <_fwalk_sglue+0x38>
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	47c0      	blx	r8
 800b2f6:	4306      	orrs	r6, r0
 800b2f8:	3568      	adds	r5, #104	; 0x68
 800b2fa:	e7e9      	b.n	800b2d0 <_fwalk_sglue+0x10>

0800b2fc <__sread>:
 800b2fc:	b510      	push	{r4, lr}
 800b2fe:	460c      	mov	r4, r1
 800b300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b304:	f000 f88c 	bl	800b420 <_read_r>
 800b308:	2800      	cmp	r0, #0
 800b30a:	bfab      	itete	ge
 800b30c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b30e:	89a3      	ldrhlt	r3, [r4, #12]
 800b310:	181b      	addge	r3, r3, r0
 800b312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b316:	bfac      	ite	ge
 800b318:	6563      	strge	r3, [r4, #84]	; 0x54
 800b31a:	81a3      	strhlt	r3, [r4, #12]
 800b31c:	bd10      	pop	{r4, pc}

0800b31e <__swrite>:
 800b31e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b322:	461f      	mov	r7, r3
 800b324:	898b      	ldrh	r3, [r1, #12]
 800b326:	05db      	lsls	r3, r3, #23
 800b328:	4605      	mov	r5, r0
 800b32a:	460c      	mov	r4, r1
 800b32c:	4616      	mov	r6, r2
 800b32e:	d505      	bpl.n	800b33c <__swrite+0x1e>
 800b330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b334:	2302      	movs	r3, #2
 800b336:	2200      	movs	r2, #0
 800b338:	f000 f860 	bl	800b3fc <_lseek_r>
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	4632      	mov	r2, r6
 800b34a:	463b      	mov	r3, r7
 800b34c:	4628      	mov	r0, r5
 800b34e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b352:	f000 b877 	b.w	800b444 <_write_r>

0800b356 <__sseek>:
 800b356:	b510      	push	{r4, lr}
 800b358:	460c      	mov	r4, r1
 800b35a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b35e:	f000 f84d 	bl	800b3fc <_lseek_r>
 800b362:	1c43      	adds	r3, r0, #1
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	bf15      	itete	ne
 800b368:	6560      	strne	r0, [r4, #84]	; 0x54
 800b36a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b36e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b372:	81a3      	strheq	r3, [r4, #12]
 800b374:	bf18      	it	ne
 800b376:	81a3      	strhne	r3, [r4, #12]
 800b378:	bd10      	pop	{r4, pc}

0800b37a <__sclose>:
 800b37a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b37e:	f000 b82d 	b.w	800b3dc <_close_r>
	...

0800b384 <_vsiprintf_r>:
 800b384:	b500      	push	{lr}
 800b386:	b09b      	sub	sp, #108	; 0x6c
 800b388:	9100      	str	r1, [sp, #0]
 800b38a:	9104      	str	r1, [sp, #16]
 800b38c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b390:	9105      	str	r1, [sp, #20]
 800b392:	9102      	str	r1, [sp, #8]
 800b394:	4905      	ldr	r1, [pc, #20]	; (800b3ac <_vsiprintf_r+0x28>)
 800b396:	9103      	str	r1, [sp, #12]
 800b398:	4669      	mov	r1, sp
 800b39a:	f001 fbe1 	bl	800cb60 <_svfiprintf_r>
 800b39e:	9b00      	ldr	r3, [sp, #0]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	b01b      	add	sp, #108	; 0x6c
 800b3a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3aa:	bf00      	nop
 800b3ac:	ffff0208 	.word	0xffff0208

0800b3b0 <vsiprintf>:
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	460a      	mov	r2, r1
 800b3b4:	4601      	mov	r1, r0
 800b3b6:	4802      	ldr	r0, [pc, #8]	; (800b3c0 <vsiprintf+0x10>)
 800b3b8:	6800      	ldr	r0, [r0, #0]
 800b3ba:	f7ff bfe3 	b.w	800b384 <_vsiprintf_r>
 800b3be:	bf00      	nop
 800b3c0:	2000006c 	.word	0x2000006c

0800b3c4 <memset>:
 800b3c4:	4402      	add	r2, r0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d100      	bne.n	800b3ce <memset+0xa>
 800b3cc:	4770      	bx	lr
 800b3ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b3d2:	e7f9      	b.n	800b3c8 <memset+0x4>

0800b3d4 <_localeconv_r>:
 800b3d4:	4800      	ldr	r0, [pc, #0]	; (800b3d8 <_localeconv_r+0x4>)
 800b3d6:	4770      	bx	lr
 800b3d8:	20000160 	.word	0x20000160

0800b3dc <_close_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4d06      	ldr	r5, [pc, #24]	; (800b3f8 <_close_r+0x1c>)
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	602b      	str	r3, [r5, #0]
 800b3e8:	f7f9 f8a2 	bl	8004530 <_close>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_close_r+0x1a>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_close_r+0x1a>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	20001eec 	.word	0x20001eec

0800b3fc <_lseek_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4d07      	ldr	r5, [pc, #28]	; (800b41c <_lseek_r+0x20>)
 800b400:	4604      	mov	r4, r0
 800b402:	4608      	mov	r0, r1
 800b404:	4611      	mov	r1, r2
 800b406:	2200      	movs	r2, #0
 800b408:	602a      	str	r2, [r5, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	f7f9 f89c 	bl	8004548 <_lseek>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d102      	bne.n	800b41a <_lseek_r+0x1e>
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	b103      	cbz	r3, 800b41a <_lseek_r+0x1e>
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	20001eec 	.word	0x20001eec

0800b420 <_read_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4d07      	ldr	r5, [pc, #28]	; (800b440 <_read_r+0x20>)
 800b424:	4604      	mov	r4, r0
 800b426:	4608      	mov	r0, r1
 800b428:	4611      	mov	r1, r2
 800b42a:	2200      	movs	r2, #0
 800b42c:	602a      	str	r2, [r5, #0]
 800b42e:	461a      	mov	r2, r3
 800b430:	f7f9 f862 	bl	80044f8 <_read>
 800b434:	1c43      	adds	r3, r0, #1
 800b436:	d102      	bne.n	800b43e <_read_r+0x1e>
 800b438:	682b      	ldr	r3, [r5, #0]
 800b43a:	b103      	cbz	r3, 800b43e <_read_r+0x1e>
 800b43c:	6023      	str	r3, [r4, #0]
 800b43e:	bd38      	pop	{r3, r4, r5, pc}
 800b440:	20001eec 	.word	0x20001eec

0800b444 <_write_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	4d07      	ldr	r5, [pc, #28]	; (800b464 <_write_r+0x20>)
 800b448:	4604      	mov	r4, r0
 800b44a:	4608      	mov	r0, r1
 800b44c:	4611      	mov	r1, r2
 800b44e:	2200      	movs	r2, #0
 800b450:	602a      	str	r2, [r5, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	f7f9 f85e 	bl	8004514 <_write>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_write_r+0x1e>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_write_r+0x1e>
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	20001eec 	.word	0x20001eec

0800b468 <__errno>:
 800b468:	4b01      	ldr	r3, [pc, #4]	; (800b470 <__errno+0x8>)
 800b46a:	6818      	ldr	r0, [r3, #0]
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	2000006c 	.word	0x2000006c

0800b474 <__libc_init_array>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	4d0d      	ldr	r5, [pc, #52]	; (800b4ac <__libc_init_array+0x38>)
 800b478:	4c0d      	ldr	r4, [pc, #52]	; (800b4b0 <__libc_init_array+0x3c>)
 800b47a:	1b64      	subs	r4, r4, r5
 800b47c:	10a4      	asrs	r4, r4, #2
 800b47e:	2600      	movs	r6, #0
 800b480:	42a6      	cmp	r6, r4
 800b482:	d109      	bne.n	800b498 <__libc_init_array+0x24>
 800b484:	4d0b      	ldr	r5, [pc, #44]	; (800b4b4 <__libc_init_array+0x40>)
 800b486:	4c0c      	ldr	r4, [pc, #48]	; (800b4b8 <__libc_init_array+0x44>)
 800b488:	f002 f892 	bl	800d5b0 <_init>
 800b48c:	1b64      	subs	r4, r4, r5
 800b48e:	10a4      	asrs	r4, r4, #2
 800b490:	2600      	movs	r6, #0
 800b492:	42a6      	cmp	r6, r4
 800b494:	d105      	bne.n	800b4a2 <__libc_init_array+0x2e>
 800b496:	bd70      	pop	{r4, r5, r6, pc}
 800b498:	f855 3b04 	ldr.w	r3, [r5], #4
 800b49c:	4798      	blx	r3
 800b49e:	3601      	adds	r6, #1
 800b4a0:	e7ee      	b.n	800b480 <__libc_init_array+0xc>
 800b4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4a6:	4798      	blx	r3
 800b4a8:	3601      	adds	r6, #1
 800b4aa:	e7f2      	b.n	800b492 <__libc_init_array+0x1e>
 800b4ac:	0800e1dc 	.word	0x0800e1dc
 800b4b0:	0800e1dc 	.word	0x0800e1dc
 800b4b4:	0800e1dc 	.word	0x0800e1dc
 800b4b8:	0800e1e0 	.word	0x0800e1e0

0800b4bc <__retarget_lock_acquire_recursive>:
 800b4bc:	4770      	bx	lr

0800b4be <__retarget_lock_release_recursive>:
 800b4be:	4770      	bx	lr

0800b4c0 <quorem>:
 800b4c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	6903      	ldr	r3, [r0, #16]
 800b4c6:	690c      	ldr	r4, [r1, #16]
 800b4c8:	42a3      	cmp	r3, r4
 800b4ca:	4607      	mov	r7, r0
 800b4cc:	db7e      	blt.n	800b5cc <quorem+0x10c>
 800b4ce:	3c01      	subs	r4, #1
 800b4d0:	f101 0814 	add.w	r8, r1, #20
 800b4d4:	f100 0514 	add.w	r5, r0, #20
 800b4d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b4f6:	d331      	bcc.n	800b55c <quorem+0x9c>
 800b4f8:	f04f 0e00 	mov.w	lr, #0
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	46ac      	mov	ip, r5
 800b500:	46f2      	mov	sl, lr
 800b502:	f850 2b04 	ldr.w	r2, [r0], #4
 800b506:	b293      	uxth	r3, r2
 800b508:	fb06 e303 	mla	r3, r6, r3, lr
 800b50c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b510:	0c1a      	lsrs	r2, r3, #16
 800b512:	b29b      	uxth	r3, r3
 800b514:	ebaa 0303 	sub.w	r3, sl, r3
 800b518:	f8dc a000 	ldr.w	sl, [ip]
 800b51c:	fa13 f38a 	uxtah	r3, r3, sl
 800b520:	fb06 220e 	mla	r2, r6, lr, r2
 800b524:	9300      	str	r3, [sp, #0]
 800b526:	9b00      	ldr	r3, [sp, #0]
 800b528:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b52c:	b292      	uxth	r2, r2
 800b52e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b532:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b536:	f8bd 3000 	ldrh.w	r3, [sp]
 800b53a:	4581      	cmp	r9, r0
 800b53c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b540:	f84c 3b04 	str.w	r3, [ip], #4
 800b544:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b548:	d2db      	bcs.n	800b502 <quorem+0x42>
 800b54a:	f855 300b 	ldr.w	r3, [r5, fp]
 800b54e:	b92b      	cbnz	r3, 800b55c <quorem+0x9c>
 800b550:	9b01      	ldr	r3, [sp, #4]
 800b552:	3b04      	subs	r3, #4
 800b554:	429d      	cmp	r5, r3
 800b556:	461a      	mov	r2, r3
 800b558:	d32c      	bcc.n	800b5b4 <quorem+0xf4>
 800b55a:	613c      	str	r4, [r7, #16]
 800b55c:	4638      	mov	r0, r7
 800b55e:	f001 f9a5 	bl	800c8ac <__mcmp>
 800b562:	2800      	cmp	r0, #0
 800b564:	db22      	blt.n	800b5ac <quorem+0xec>
 800b566:	3601      	adds	r6, #1
 800b568:	4629      	mov	r1, r5
 800b56a:	2000      	movs	r0, #0
 800b56c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b570:	f8d1 c000 	ldr.w	ip, [r1]
 800b574:	b293      	uxth	r3, r2
 800b576:	1ac3      	subs	r3, r0, r3
 800b578:	0c12      	lsrs	r2, r2, #16
 800b57a:	fa13 f38c 	uxtah	r3, r3, ip
 800b57e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b582:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b586:	b29b      	uxth	r3, r3
 800b588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b58c:	45c1      	cmp	r9, r8
 800b58e:	f841 3b04 	str.w	r3, [r1], #4
 800b592:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b596:	d2e9      	bcs.n	800b56c <quorem+0xac>
 800b598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b59c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5a0:	b922      	cbnz	r2, 800b5ac <quorem+0xec>
 800b5a2:	3b04      	subs	r3, #4
 800b5a4:	429d      	cmp	r5, r3
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	d30a      	bcc.n	800b5c0 <quorem+0x100>
 800b5aa:	613c      	str	r4, [r7, #16]
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	b003      	add	sp, #12
 800b5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b4:	6812      	ldr	r2, [r2, #0]
 800b5b6:	3b04      	subs	r3, #4
 800b5b8:	2a00      	cmp	r2, #0
 800b5ba:	d1ce      	bne.n	800b55a <quorem+0x9a>
 800b5bc:	3c01      	subs	r4, #1
 800b5be:	e7c9      	b.n	800b554 <quorem+0x94>
 800b5c0:	6812      	ldr	r2, [r2, #0]
 800b5c2:	3b04      	subs	r3, #4
 800b5c4:	2a00      	cmp	r2, #0
 800b5c6:	d1f0      	bne.n	800b5aa <quorem+0xea>
 800b5c8:	3c01      	subs	r4, #1
 800b5ca:	e7eb      	b.n	800b5a4 <quorem+0xe4>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	e7ee      	b.n	800b5ae <quorem+0xee>

0800b5d0 <_dtoa_r>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	ed2d 8b04 	vpush	{d8-d9}
 800b5d8:	69c5      	ldr	r5, [r0, #28]
 800b5da:	b093      	sub	sp, #76	; 0x4c
 800b5dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b5e0:	ec57 6b10 	vmov	r6, r7, d0
 800b5e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b5e8:	9107      	str	r1, [sp, #28]
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	920a      	str	r2, [sp, #40]	; 0x28
 800b5ee:	930d      	str	r3, [sp, #52]	; 0x34
 800b5f0:	b975      	cbnz	r5, 800b610 <_dtoa_r+0x40>
 800b5f2:	2010      	movs	r0, #16
 800b5f4:	f000 fe2a 	bl	800c24c <malloc>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	61e0      	str	r0, [r4, #28]
 800b5fc:	b920      	cbnz	r0, 800b608 <_dtoa_r+0x38>
 800b5fe:	4bae      	ldr	r3, [pc, #696]	; (800b8b8 <_dtoa_r+0x2e8>)
 800b600:	21ef      	movs	r1, #239	; 0xef
 800b602:	48ae      	ldr	r0, [pc, #696]	; (800b8bc <_dtoa_r+0x2ec>)
 800b604:	f001 fc90 	bl	800cf28 <__assert_func>
 800b608:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b60c:	6005      	str	r5, [r0, #0]
 800b60e:	60c5      	str	r5, [r0, #12]
 800b610:	69e3      	ldr	r3, [r4, #28]
 800b612:	6819      	ldr	r1, [r3, #0]
 800b614:	b151      	cbz	r1, 800b62c <_dtoa_r+0x5c>
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	604a      	str	r2, [r1, #4]
 800b61a:	2301      	movs	r3, #1
 800b61c:	4093      	lsls	r3, r2
 800b61e:	608b      	str	r3, [r1, #8]
 800b620:	4620      	mov	r0, r4
 800b622:	f000 ff07 	bl	800c434 <_Bfree>
 800b626:	69e3      	ldr	r3, [r4, #28]
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]
 800b62c:	1e3b      	subs	r3, r7, #0
 800b62e:	bfbb      	ittet	lt
 800b630:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b634:	9303      	strlt	r3, [sp, #12]
 800b636:	2300      	movge	r3, #0
 800b638:	2201      	movlt	r2, #1
 800b63a:	bfac      	ite	ge
 800b63c:	f8c8 3000 	strge.w	r3, [r8]
 800b640:	f8c8 2000 	strlt.w	r2, [r8]
 800b644:	4b9e      	ldr	r3, [pc, #632]	; (800b8c0 <_dtoa_r+0x2f0>)
 800b646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b64a:	ea33 0308 	bics.w	r3, r3, r8
 800b64e:	d11b      	bne.n	800b688 <_dtoa_r+0xb8>
 800b650:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b652:	f242 730f 	movw	r3, #9999	; 0x270f
 800b656:	6013      	str	r3, [r2, #0]
 800b658:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b65c:	4333      	orrs	r3, r6
 800b65e:	f000 8593 	beq.w	800c188 <_dtoa_r+0xbb8>
 800b662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b664:	b963      	cbnz	r3, 800b680 <_dtoa_r+0xb0>
 800b666:	4b97      	ldr	r3, [pc, #604]	; (800b8c4 <_dtoa_r+0x2f4>)
 800b668:	e027      	b.n	800b6ba <_dtoa_r+0xea>
 800b66a:	4b97      	ldr	r3, [pc, #604]	; (800b8c8 <_dtoa_r+0x2f8>)
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	3308      	adds	r3, #8
 800b670:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b672:	6013      	str	r3, [r2, #0]
 800b674:	9800      	ldr	r0, [sp, #0]
 800b676:	b013      	add	sp, #76	; 0x4c
 800b678:	ecbd 8b04 	vpop	{d8-d9}
 800b67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b680:	4b90      	ldr	r3, [pc, #576]	; (800b8c4 <_dtoa_r+0x2f4>)
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	3303      	adds	r3, #3
 800b686:	e7f3      	b.n	800b670 <_dtoa_r+0xa0>
 800b688:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b68c:	2200      	movs	r2, #0
 800b68e:	ec51 0b17 	vmov	r0, r1, d7
 800b692:	eeb0 8a47 	vmov.f32	s16, s14
 800b696:	eef0 8a67 	vmov.f32	s17, s15
 800b69a:	2300      	movs	r3, #0
 800b69c:	f7f5 fa14 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6a0:	4681      	mov	r9, r0
 800b6a2:	b160      	cbz	r0, 800b6be <_dtoa_r+0xee>
 800b6a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	6013      	str	r3, [r2, #0]
 800b6aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	f000 8568 	beq.w	800c182 <_dtoa_r+0xbb2>
 800b6b2:	4b86      	ldr	r3, [pc, #536]	; (800b8cc <_dtoa_r+0x2fc>)
 800b6b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b6b6:	6013      	str	r3, [r2, #0]
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	e7da      	b.n	800b674 <_dtoa_r+0xa4>
 800b6be:	aa10      	add	r2, sp, #64	; 0x40
 800b6c0:	a911      	add	r1, sp, #68	; 0x44
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	eeb0 0a48 	vmov.f32	s0, s16
 800b6c8:	eef0 0a68 	vmov.f32	s1, s17
 800b6cc:	f001 f994 	bl	800c9f8 <__d2b>
 800b6d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b6d4:	4682      	mov	sl, r0
 800b6d6:	2d00      	cmp	r5, #0
 800b6d8:	d07f      	beq.n	800b7da <_dtoa_r+0x20a>
 800b6da:	ee18 3a90 	vmov	r3, s17
 800b6de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b6e6:	ec51 0b18 	vmov	r0, r1, d8
 800b6ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b6ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b6f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4b75      	ldr	r3, [pc, #468]	; (800b8d0 <_dtoa_r+0x300>)
 800b6fc:	f7f4 fdc4 	bl	8000288 <__aeabi_dsub>
 800b700:	a367      	add	r3, pc, #412	; (adr r3, 800b8a0 <_dtoa_r+0x2d0>)
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	f7f4 ff77 	bl	80005f8 <__aeabi_dmul>
 800b70a:	a367      	add	r3, pc, #412	; (adr r3, 800b8a8 <_dtoa_r+0x2d8>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f7f4 fdbc 	bl	800028c <__adddf3>
 800b714:	4606      	mov	r6, r0
 800b716:	4628      	mov	r0, r5
 800b718:	460f      	mov	r7, r1
 800b71a:	f7f4 ff03 	bl	8000524 <__aeabi_i2d>
 800b71e:	a364      	add	r3, pc, #400	; (adr r3, 800b8b0 <_dtoa_r+0x2e0>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f7f4 ff68 	bl	80005f8 <__aeabi_dmul>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f4 fdac 	bl	800028c <__adddf3>
 800b734:	4606      	mov	r6, r0
 800b736:	460f      	mov	r7, r1
 800b738:	f7f5 fa0e 	bl	8000b58 <__aeabi_d2iz>
 800b73c:	2200      	movs	r2, #0
 800b73e:	4683      	mov	fp, r0
 800b740:	2300      	movs	r3, #0
 800b742:	4630      	mov	r0, r6
 800b744:	4639      	mov	r1, r7
 800b746:	f7f5 f9c9 	bl	8000adc <__aeabi_dcmplt>
 800b74a:	b148      	cbz	r0, 800b760 <_dtoa_r+0x190>
 800b74c:	4658      	mov	r0, fp
 800b74e:	f7f4 fee9 	bl	8000524 <__aeabi_i2d>
 800b752:	4632      	mov	r2, r6
 800b754:	463b      	mov	r3, r7
 800b756:	f7f5 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b75a:	b908      	cbnz	r0, 800b760 <_dtoa_r+0x190>
 800b75c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b760:	f1bb 0f16 	cmp.w	fp, #22
 800b764:	d857      	bhi.n	800b816 <_dtoa_r+0x246>
 800b766:	4b5b      	ldr	r3, [pc, #364]	; (800b8d4 <_dtoa_r+0x304>)
 800b768:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	ec51 0b18 	vmov	r0, r1, d8
 800b774:	f7f5 f9b2 	bl	8000adc <__aeabi_dcmplt>
 800b778:	2800      	cmp	r0, #0
 800b77a:	d04e      	beq.n	800b81a <_dtoa_r+0x24a>
 800b77c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b780:	2300      	movs	r3, #0
 800b782:	930c      	str	r3, [sp, #48]	; 0x30
 800b784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b786:	1b5b      	subs	r3, r3, r5
 800b788:	1e5a      	subs	r2, r3, #1
 800b78a:	bf45      	ittet	mi
 800b78c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b790:	9305      	strmi	r3, [sp, #20]
 800b792:	2300      	movpl	r3, #0
 800b794:	2300      	movmi	r3, #0
 800b796:	9206      	str	r2, [sp, #24]
 800b798:	bf54      	ite	pl
 800b79a:	9305      	strpl	r3, [sp, #20]
 800b79c:	9306      	strmi	r3, [sp, #24]
 800b79e:	f1bb 0f00 	cmp.w	fp, #0
 800b7a2:	db3c      	blt.n	800b81e <_dtoa_r+0x24e>
 800b7a4:	9b06      	ldr	r3, [sp, #24]
 800b7a6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b7aa:	445b      	add	r3, fp
 800b7ac:	9306      	str	r3, [sp, #24]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	9308      	str	r3, [sp, #32]
 800b7b2:	9b07      	ldr	r3, [sp, #28]
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	d868      	bhi.n	800b88a <_dtoa_r+0x2ba>
 800b7b8:	2b05      	cmp	r3, #5
 800b7ba:	bfc4      	itt	gt
 800b7bc:	3b04      	subgt	r3, #4
 800b7be:	9307      	strgt	r3, [sp, #28]
 800b7c0:	9b07      	ldr	r3, [sp, #28]
 800b7c2:	f1a3 0302 	sub.w	r3, r3, #2
 800b7c6:	bfcc      	ite	gt
 800b7c8:	2500      	movgt	r5, #0
 800b7ca:	2501      	movle	r5, #1
 800b7cc:	2b03      	cmp	r3, #3
 800b7ce:	f200 8085 	bhi.w	800b8dc <_dtoa_r+0x30c>
 800b7d2:	e8df f003 	tbb	[pc, r3]
 800b7d6:	3b2e      	.short	0x3b2e
 800b7d8:	5839      	.short	0x5839
 800b7da:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b7de:	441d      	add	r5, r3
 800b7e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b7e4:	2b20      	cmp	r3, #32
 800b7e6:	bfc1      	itttt	gt
 800b7e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7ec:	fa08 f803 	lslgt.w	r8, r8, r3
 800b7f0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b7f4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b7f8:	bfd6      	itet	le
 800b7fa:	f1c3 0320 	rsble	r3, r3, #32
 800b7fe:	ea48 0003 	orrgt.w	r0, r8, r3
 800b802:	fa06 f003 	lslle.w	r0, r6, r3
 800b806:	f7f4 fe7d 	bl	8000504 <__aeabi_ui2d>
 800b80a:	2201      	movs	r2, #1
 800b80c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b810:	3d01      	subs	r5, #1
 800b812:	920e      	str	r2, [sp, #56]	; 0x38
 800b814:	e76f      	b.n	800b6f6 <_dtoa_r+0x126>
 800b816:	2301      	movs	r3, #1
 800b818:	e7b3      	b.n	800b782 <_dtoa_r+0x1b2>
 800b81a:	900c      	str	r0, [sp, #48]	; 0x30
 800b81c:	e7b2      	b.n	800b784 <_dtoa_r+0x1b4>
 800b81e:	9b05      	ldr	r3, [sp, #20]
 800b820:	eba3 030b 	sub.w	r3, r3, fp
 800b824:	9305      	str	r3, [sp, #20]
 800b826:	f1cb 0300 	rsb	r3, fp, #0
 800b82a:	9308      	str	r3, [sp, #32]
 800b82c:	2300      	movs	r3, #0
 800b82e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b830:	e7bf      	b.n	800b7b2 <_dtoa_r+0x1e2>
 800b832:	2300      	movs	r3, #0
 800b834:	9309      	str	r3, [sp, #36]	; 0x24
 800b836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b838:	2b00      	cmp	r3, #0
 800b83a:	dc52      	bgt.n	800b8e2 <_dtoa_r+0x312>
 800b83c:	2301      	movs	r3, #1
 800b83e:	9301      	str	r3, [sp, #4]
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	461a      	mov	r2, r3
 800b844:	920a      	str	r2, [sp, #40]	; 0x28
 800b846:	e00b      	b.n	800b860 <_dtoa_r+0x290>
 800b848:	2301      	movs	r3, #1
 800b84a:	e7f3      	b.n	800b834 <_dtoa_r+0x264>
 800b84c:	2300      	movs	r3, #0
 800b84e:	9309      	str	r3, [sp, #36]	; 0x24
 800b850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b852:	445b      	add	r3, fp
 800b854:	9301      	str	r3, [sp, #4]
 800b856:	3301      	adds	r3, #1
 800b858:	2b01      	cmp	r3, #1
 800b85a:	9304      	str	r3, [sp, #16]
 800b85c:	bfb8      	it	lt
 800b85e:	2301      	movlt	r3, #1
 800b860:	69e0      	ldr	r0, [r4, #28]
 800b862:	2100      	movs	r1, #0
 800b864:	2204      	movs	r2, #4
 800b866:	f102 0614 	add.w	r6, r2, #20
 800b86a:	429e      	cmp	r6, r3
 800b86c:	d93d      	bls.n	800b8ea <_dtoa_r+0x31a>
 800b86e:	6041      	str	r1, [r0, #4]
 800b870:	4620      	mov	r0, r4
 800b872:	f000 fd9f 	bl	800c3b4 <_Balloc>
 800b876:	9000      	str	r0, [sp, #0]
 800b878:	2800      	cmp	r0, #0
 800b87a:	d139      	bne.n	800b8f0 <_dtoa_r+0x320>
 800b87c:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <_dtoa_r+0x308>)
 800b87e:	4602      	mov	r2, r0
 800b880:	f240 11af 	movw	r1, #431	; 0x1af
 800b884:	e6bd      	b.n	800b602 <_dtoa_r+0x32>
 800b886:	2301      	movs	r3, #1
 800b888:	e7e1      	b.n	800b84e <_dtoa_r+0x27e>
 800b88a:	2501      	movs	r5, #1
 800b88c:	2300      	movs	r3, #0
 800b88e:	9307      	str	r3, [sp, #28]
 800b890:	9509      	str	r5, [sp, #36]	; 0x24
 800b892:	f04f 33ff 	mov.w	r3, #4294967295
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	9304      	str	r3, [sp, #16]
 800b89a:	2200      	movs	r2, #0
 800b89c:	2312      	movs	r3, #18
 800b89e:	e7d1      	b.n	800b844 <_dtoa_r+0x274>
 800b8a0:	636f4361 	.word	0x636f4361
 800b8a4:	3fd287a7 	.word	0x3fd287a7
 800b8a8:	8b60c8b3 	.word	0x8b60c8b3
 800b8ac:	3fc68a28 	.word	0x3fc68a28
 800b8b0:	509f79fb 	.word	0x509f79fb
 800b8b4:	3fd34413 	.word	0x3fd34413
 800b8b8:	0800dea9 	.word	0x0800dea9
 800b8bc:	0800dec0 	.word	0x0800dec0
 800b8c0:	7ff00000 	.word	0x7ff00000
 800b8c4:	0800dea5 	.word	0x0800dea5
 800b8c8:	0800de9c 	.word	0x0800de9c
 800b8cc:	0800de79 	.word	0x0800de79
 800b8d0:	3ff80000 	.word	0x3ff80000
 800b8d4:	0800dfb0 	.word	0x0800dfb0
 800b8d8:	0800df18 	.word	0x0800df18
 800b8dc:	2301      	movs	r3, #1
 800b8de:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e0:	e7d7      	b.n	800b892 <_dtoa_r+0x2c2>
 800b8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	9304      	str	r3, [sp, #16]
 800b8e8:	e7ba      	b.n	800b860 <_dtoa_r+0x290>
 800b8ea:	3101      	adds	r1, #1
 800b8ec:	0052      	lsls	r2, r2, #1
 800b8ee:	e7ba      	b.n	800b866 <_dtoa_r+0x296>
 800b8f0:	69e3      	ldr	r3, [r4, #28]
 800b8f2:	9a00      	ldr	r2, [sp, #0]
 800b8f4:	601a      	str	r2, [r3, #0]
 800b8f6:	9b04      	ldr	r3, [sp, #16]
 800b8f8:	2b0e      	cmp	r3, #14
 800b8fa:	f200 80a8 	bhi.w	800ba4e <_dtoa_r+0x47e>
 800b8fe:	2d00      	cmp	r5, #0
 800b900:	f000 80a5 	beq.w	800ba4e <_dtoa_r+0x47e>
 800b904:	f1bb 0f00 	cmp.w	fp, #0
 800b908:	dd38      	ble.n	800b97c <_dtoa_r+0x3ac>
 800b90a:	4bc0      	ldr	r3, [pc, #768]	; (800bc0c <_dtoa_r+0x63c>)
 800b90c:	f00b 020f 	and.w	r2, fp, #15
 800b910:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b914:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b918:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b91c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b920:	d019      	beq.n	800b956 <_dtoa_r+0x386>
 800b922:	4bbb      	ldr	r3, [pc, #748]	; (800bc10 <_dtoa_r+0x640>)
 800b924:	ec51 0b18 	vmov	r0, r1, d8
 800b928:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b92c:	f7f4 ff8e 	bl	800084c <__aeabi_ddiv>
 800b930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b934:	f008 080f 	and.w	r8, r8, #15
 800b938:	2503      	movs	r5, #3
 800b93a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bc10 <_dtoa_r+0x640>
 800b93e:	f1b8 0f00 	cmp.w	r8, #0
 800b942:	d10a      	bne.n	800b95a <_dtoa_r+0x38a>
 800b944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b948:	4632      	mov	r2, r6
 800b94a:	463b      	mov	r3, r7
 800b94c:	f7f4 ff7e 	bl	800084c <__aeabi_ddiv>
 800b950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b954:	e02b      	b.n	800b9ae <_dtoa_r+0x3de>
 800b956:	2502      	movs	r5, #2
 800b958:	e7ef      	b.n	800b93a <_dtoa_r+0x36a>
 800b95a:	f018 0f01 	tst.w	r8, #1
 800b95e:	d008      	beq.n	800b972 <_dtoa_r+0x3a2>
 800b960:	4630      	mov	r0, r6
 800b962:	4639      	mov	r1, r7
 800b964:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b968:	f7f4 fe46 	bl	80005f8 <__aeabi_dmul>
 800b96c:	3501      	adds	r5, #1
 800b96e:	4606      	mov	r6, r0
 800b970:	460f      	mov	r7, r1
 800b972:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b976:	f109 0908 	add.w	r9, r9, #8
 800b97a:	e7e0      	b.n	800b93e <_dtoa_r+0x36e>
 800b97c:	f000 809f 	beq.w	800babe <_dtoa_r+0x4ee>
 800b980:	f1cb 0600 	rsb	r6, fp, #0
 800b984:	4ba1      	ldr	r3, [pc, #644]	; (800bc0c <_dtoa_r+0x63c>)
 800b986:	4fa2      	ldr	r7, [pc, #648]	; (800bc10 <_dtoa_r+0x640>)
 800b988:	f006 020f 	and.w	r2, r6, #15
 800b98c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	ec51 0b18 	vmov	r0, r1, d8
 800b998:	f7f4 fe2e 	bl	80005f8 <__aeabi_dmul>
 800b99c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9a0:	1136      	asrs	r6, r6, #4
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	2502      	movs	r5, #2
 800b9a6:	2e00      	cmp	r6, #0
 800b9a8:	d17e      	bne.n	800baa8 <_dtoa_r+0x4d8>
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1d0      	bne.n	800b950 <_dtoa_r+0x380>
 800b9ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9b0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 8084 	beq.w	800bac2 <_dtoa_r+0x4f2>
 800b9ba:	4b96      	ldr	r3, [pc, #600]	; (800bc14 <_dtoa_r+0x644>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	4640      	mov	r0, r8
 800b9c0:	4649      	mov	r1, r9
 800b9c2:	f7f5 f88b 	bl	8000adc <__aeabi_dcmplt>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d07b      	beq.n	800bac2 <_dtoa_r+0x4f2>
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d078      	beq.n	800bac2 <_dtoa_r+0x4f2>
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	dd39      	ble.n	800ba4a <_dtoa_r+0x47a>
 800b9d6:	4b90      	ldr	r3, [pc, #576]	; (800bc18 <_dtoa_r+0x648>)
 800b9d8:	2200      	movs	r2, #0
 800b9da:	4640      	mov	r0, r8
 800b9dc:	4649      	mov	r1, r9
 800b9de:	f7f4 fe0b 	bl	80005f8 <__aeabi_dmul>
 800b9e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9e6:	9e01      	ldr	r6, [sp, #4]
 800b9e8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	f7f4 fd96 	bl	8000524 <__aeabi_i2d>
 800b9f8:	4642      	mov	r2, r8
 800b9fa:	464b      	mov	r3, r9
 800b9fc:	f7f4 fdfc 	bl	80005f8 <__aeabi_dmul>
 800ba00:	4b86      	ldr	r3, [pc, #536]	; (800bc1c <_dtoa_r+0x64c>)
 800ba02:	2200      	movs	r2, #0
 800ba04:	f7f4 fc42 	bl	800028c <__adddf3>
 800ba08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ba0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba10:	9303      	str	r3, [sp, #12]
 800ba12:	2e00      	cmp	r6, #0
 800ba14:	d158      	bne.n	800bac8 <_dtoa_r+0x4f8>
 800ba16:	4b82      	ldr	r3, [pc, #520]	; (800bc20 <_dtoa_r+0x650>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	4649      	mov	r1, r9
 800ba1e:	f7f4 fc33 	bl	8000288 <__aeabi_dsub>
 800ba22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba26:	4680      	mov	r8, r0
 800ba28:	4689      	mov	r9, r1
 800ba2a:	f7f5 f875 	bl	8000b18 <__aeabi_dcmpgt>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	f040 8296 	bne.w	800bf60 <_dtoa_r+0x990>
 800ba34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ba38:	4640      	mov	r0, r8
 800ba3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba3e:	4649      	mov	r1, r9
 800ba40:	f7f5 f84c 	bl	8000adc <__aeabi_dcmplt>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	f040 8289 	bne.w	800bf5c <_dtoa_r+0x98c>
 800ba4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ba4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f2c0 814e 	blt.w	800bcf2 <_dtoa_r+0x722>
 800ba56:	f1bb 0f0e 	cmp.w	fp, #14
 800ba5a:	f300 814a 	bgt.w	800bcf2 <_dtoa_r+0x722>
 800ba5e:	4b6b      	ldr	r3, [pc, #428]	; (800bc0c <_dtoa_r+0x63c>)
 800ba60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f280 80dc 	bge.w	800bc28 <_dtoa_r+0x658>
 800ba70:	9b04      	ldr	r3, [sp, #16]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f300 80d8 	bgt.w	800bc28 <_dtoa_r+0x658>
 800ba78:	f040 826f 	bne.w	800bf5a <_dtoa_r+0x98a>
 800ba7c:	4b68      	ldr	r3, [pc, #416]	; (800bc20 <_dtoa_r+0x650>)
 800ba7e:	2200      	movs	r2, #0
 800ba80:	4640      	mov	r0, r8
 800ba82:	4649      	mov	r1, r9
 800ba84:	f7f4 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ba88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba8c:	f7f5 f83a 	bl	8000b04 <__aeabi_dcmpge>
 800ba90:	9e04      	ldr	r6, [sp, #16]
 800ba92:	4637      	mov	r7, r6
 800ba94:	2800      	cmp	r0, #0
 800ba96:	f040 8245 	bne.w	800bf24 <_dtoa_r+0x954>
 800ba9a:	9d00      	ldr	r5, [sp, #0]
 800ba9c:	2331      	movs	r3, #49	; 0x31
 800ba9e:	f805 3b01 	strb.w	r3, [r5], #1
 800baa2:	f10b 0b01 	add.w	fp, fp, #1
 800baa6:	e241      	b.n	800bf2c <_dtoa_r+0x95c>
 800baa8:	07f2      	lsls	r2, r6, #31
 800baaa:	d505      	bpl.n	800bab8 <_dtoa_r+0x4e8>
 800baac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab0:	f7f4 fda2 	bl	80005f8 <__aeabi_dmul>
 800bab4:	3501      	adds	r5, #1
 800bab6:	2301      	movs	r3, #1
 800bab8:	1076      	asrs	r6, r6, #1
 800baba:	3708      	adds	r7, #8
 800babc:	e773      	b.n	800b9a6 <_dtoa_r+0x3d6>
 800babe:	2502      	movs	r5, #2
 800bac0:	e775      	b.n	800b9ae <_dtoa_r+0x3de>
 800bac2:	9e04      	ldr	r6, [sp, #16]
 800bac4:	465f      	mov	r7, fp
 800bac6:	e792      	b.n	800b9ee <_dtoa_r+0x41e>
 800bac8:	9900      	ldr	r1, [sp, #0]
 800baca:	4b50      	ldr	r3, [pc, #320]	; (800bc0c <_dtoa_r+0x63c>)
 800bacc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bad0:	4431      	add	r1, r6
 800bad2:	9102      	str	r1, [sp, #8]
 800bad4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bad6:	eeb0 9a47 	vmov.f32	s18, s14
 800bada:	eef0 9a67 	vmov.f32	s19, s15
 800bade:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bae6:	2900      	cmp	r1, #0
 800bae8:	d044      	beq.n	800bb74 <_dtoa_r+0x5a4>
 800baea:	494e      	ldr	r1, [pc, #312]	; (800bc24 <_dtoa_r+0x654>)
 800baec:	2000      	movs	r0, #0
 800baee:	f7f4 fead 	bl	800084c <__aeabi_ddiv>
 800baf2:	ec53 2b19 	vmov	r2, r3, d9
 800baf6:	f7f4 fbc7 	bl	8000288 <__aeabi_dsub>
 800bafa:	9d00      	ldr	r5, [sp, #0]
 800bafc:	ec41 0b19 	vmov	d9, r0, r1
 800bb00:	4649      	mov	r1, r9
 800bb02:	4640      	mov	r0, r8
 800bb04:	f7f5 f828 	bl	8000b58 <__aeabi_d2iz>
 800bb08:	4606      	mov	r6, r0
 800bb0a:	f7f4 fd0b 	bl	8000524 <__aeabi_i2d>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4640      	mov	r0, r8
 800bb14:	4649      	mov	r1, r9
 800bb16:	f7f4 fbb7 	bl	8000288 <__aeabi_dsub>
 800bb1a:	3630      	adds	r6, #48	; 0x30
 800bb1c:	f805 6b01 	strb.w	r6, [r5], #1
 800bb20:	ec53 2b19 	vmov	r2, r3, d9
 800bb24:	4680      	mov	r8, r0
 800bb26:	4689      	mov	r9, r1
 800bb28:	f7f4 ffd8 	bl	8000adc <__aeabi_dcmplt>
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d164      	bne.n	800bbfa <_dtoa_r+0x62a>
 800bb30:	4642      	mov	r2, r8
 800bb32:	464b      	mov	r3, r9
 800bb34:	4937      	ldr	r1, [pc, #220]	; (800bc14 <_dtoa_r+0x644>)
 800bb36:	2000      	movs	r0, #0
 800bb38:	f7f4 fba6 	bl	8000288 <__aeabi_dsub>
 800bb3c:	ec53 2b19 	vmov	r2, r3, d9
 800bb40:	f7f4 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	f040 80b6 	bne.w	800bcb6 <_dtoa_r+0x6e6>
 800bb4a:	9b02      	ldr	r3, [sp, #8]
 800bb4c:	429d      	cmp	r5, r3
 800bb4e:	f43f af7c 	beq.w	800ba4a <_dtoa_r+0x47a>
 800bb52:	4b31      	ldr	r3, [pc, #196]	; (800bc18 <_dtoa_r+0x648>)
 800bb54:	ec51 0b19 	vmov	r0, r1, d9
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f7f4 fd4d 	bl	80005f8 <__aeabi_dmul>
 800bb5e:	4b2e      	ldr	r3, [pc, #184]	; (800bc18 <_dtoa_r+0x648>)
 800bb60:	ec41 0b19 	vmov	d9, r0, r1
 800bb64:	2200      	movs	r2, #0
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f4 fd45 	bl	80005f8 <__aeabi_dmul>
 800bb6e:	4680      	mov	r8, r0
 800bb70:	4689      	mov	r9, r1
 800bb72:	e7c5      	b.n	800bb00 <_dtoa_r+0x530>
 800bb74:	ec51 0b17 	vmov	r0, r1, d7
 800bb78:	f7f4 fd3e 	bl	80005f8 <__aeabi_dmul>
 800bb7c:	9b02      	ldr	r3, [sp, #8]
 800bb7e:	9d00      	ldr	r5, [sp, #0]
 800bb80:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb82:	ec41 0b19 	vmov	d9, r0, r1
 800bb86:	4649      	mov	r1, r9
 800bb88:	4640      	mov	r0, r8
 800bb8a:	f7f4 ffe5 	bl	8000b58 <__aeabi_d2iz>
 800bb8e:	4606      	mov	r6, r0
 800bb90:	f7f4 fcc8 	bl	8000524 <__aeabi_i2d>
 800bb94:	3630      	adds	r6, #48	; 0x30
 800bb96:	4602      	mov	r2, r0
 800bb98:	460b      	mov	r3, r1
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	f7f4 fb73 	bl	8000288 <__aeabi_dsub>
 800bba2:	f805 6b01 	strb.w	r6, [r5], #1
 800bba6:	9b02      	ldr	r3, [sp, #8]
 800bba8:	429d      	cmp	r5, r3
 800bbaa:	4680      	mov	r8, r0
 800bbac:	4689      	mov	r9, r1
 800bbae:	f04f 0200 	mov.w	r2, #0
 800bbb2:	d124      	bne.n	800bbfe <_dtoa_r+0x62e>
 800bbb4:	4b1b      	ldr	r3, [pc, #108]	; (800bc24 <_dtoa_r+0x654>)
 800bbb6:	ec51 0b19 	vmov	r0, r1, d9
 800bbba:	f7f4 fb67 	bl	800028c <__adddf3>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	f7f4 ffa7 	bl	8000b18 <__aeabi_dcmpgt>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d173      	bne.n	800bcb6 <_dtoa_r+0x6e6>
 800bbce:	ec53 2b19 	vmov	r2, r3, d9
 800bbd2:	4914      	ldr	r1, [pc, #80]	; (800bc24 <_dtoa_r+0x654>)
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	f7f4 fb57 	bl	8000288 <__aeabi_dsub>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	4640      	mov	r0, r8
 800bbe0:	4649      	mov	r1, r9
 800bbe2:	f7f4 ff7b 	bl	8000adc <__aeabi_dcmplt>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f43f af2f 	beq.w	800ba4a <_dtoa_r+0x47a>
 800bbec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bbee:	1e6b      	subs	r3, r5, #1
 800bbf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbf2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bbf6:	2b30      	cmp	r3, #48	; 0x30
 800bbf8:	d0f8      	beq.n	800bbec <_dtoa_r+0x61c>
 800bbfa:	46bb      	mov	fp, r7
 800bbfc:	e04a      	b.n	800bc94 <_dtoa_r+0x6c4>
 800bbfe:	4b06      	ldr	r3, [pc, #24]	; (800bc18 <_dtoa_r+0x648>)
 800bc00:	f7f4 fcfa 	bl	80005f8 <__aeabi_dmul>
 800bc04:	4680      	mov	r8, r0
 800bc06:	4689      	mov	r9, r1
 800bc08:	e7bd      	b.n	800bb86 <_dtoa_r+0x5b6>
 800bc0a:	bf00      	nop
 800bc0c:	0800dfb0 	.word	0x0800dfb0
 800bc10:	0800df88 	.word	0x0800df88
 800bc14:	3ff00000 	.word	0x3ff00000
 800bc18:	40240000 	.word	0x40240000
 800bc1c:	401c0000 	.word	0x401c0000
 800bc20:	40140000 	.word	0x40140000
 800bc24:	3fe00000 	.word	0x3fe00000
 800bc28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bc2c:	9d00      	ldr	r5, [sp, #0]
 800bc2e:	4642      	mov	r2, r8
 800bc30:	464b      	mov	r3, r9
 800bc32:	4630      	mov	r0, r6
 800bc34:	4639      	mov	r1, r7
 800bc36:	f7f4 fe09 	bl	800084c <__aeabi_ddiv>
 800bc3a:	f7f4 ff8d 	bl	8000b58 <__aeabi_d2iz>
 800bc3e:	9001      	str	r0, [sp, #4]
 800bc40:	f7f4 fc70 	bl	8000524 <__aeabi_i2d>
 800bc44:	4642      	mov	r2, r8
 800bc46:	464b      	mov	r3, r9
 800bc48:	f7f4 fcd6 	bl	80005f8 <__aeabi_dmul>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 fb18 	bl	8000288 <__aeabi_dsub>
 800bc58:	9e01      	ldr	r6, [sp, #4]
 800bc5a:	9f04      	ldr	r7, [sp, #16]
 800bc5c:	3630      	adds	r6, #48	; 0x30
 800bc5e:	f805 6b01 	strb.w	r6, [r5], #1
 800bc62:	9e00      	ldr	r6, [sp, #0]
 800bc64:	1bae      	subs	r6, r5, r6
 800bc66:	42b7      	cmp	r7, r6
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	d134      	bne.n	800bcd8 <_dtoa_r+0x708>
 800bc6e:	f7f4 fb0d 	bl	800028c <__adddf3>
 800bc72:	4642      	mov	r2, r8
 800bc74:	464b      	mov	r3, r9
 800bc76:	4606      	mov	r6, r0
 800bc78:	460f      	mov	r7, r1
 800bc7a:	f7f4 ff4d 	bl	8000b18 <__aeabi_dcmpgt>
 800bc7e:	b9c8      	cbnz	r0, 800bcb4 <_dtoa_r+0x6e4>
 800bc80:	4642      	mov	r2, r8
 800bc82:	464b      	mov	r3, r9
 800bc84:	4630      	mov	r0, r6
 800bc86:	4639      	mov	r1, r7
 800bc88:	f7f4 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc8c:	b110      	cbz	r0, 800bc94 <_dtoa_r+0x6c4>
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	07db      	lsls	r3, r3, #31
 800bc92:	d40f      	bmi.n	800bcb4 <_dtoa_r+0x6e4>
 800bc94:	4651      	mov	r1, sl
 800bc96:	4620      	mov	r0, r4
 800bc98:	f000 fbcc 	bl	800c434 <_Bfree>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bca0:	702b      	strb	r3, [r5, #0]
 800bca2:	f10b 0301 	add.w	r3, fp, #1
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f43f ace2 	beq.w	800b674 <_dtoa_r+0xa4>
 800bcb0:	601d      	str	r5, [r3, #0]
 800bcb2:	e4df      	b.n	800b674 <_dtoa_r+0xa4>
 800bcb4:	465f      	mov	r7, fp
 800bcb6:	462b      	mov	r3, r5
 800bcb8:	461d      	mov	r5, r3
 800bcba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcbe:	2a39      	cmp	r2, #57	; 0x39
 800bcc0:	d106      	bne.n	800bcd0 <_dtoa_r+0x700>
 800bcc2:	9a00      	ldr	r2, [sp, #0]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d1f7      	bne.n	800bcb8 <_dtoa_r+0x6e8>
 800bcc8:	9900      	ldr	r1, [sp, #0]
 800bcca:	2230      	movs	r2, #48	; 0x30
 800bccc:	3701      	adds	r7, #1
 800bcce:	700a      	strb	r2, [r1, #0]
 800bcd0:	781a      	ldrb	r2, [r3, #0]
 800bcd2:	3201      	adds	r2, #1
 800bcd4:	701a      	strb	r2, [r3, #0]
 800bcd6:	e790      	b.n	800bbfa <_dtoa_r+0x62a>
 800bcd8:	4ba3      	ldr	r3, [pc, #652]	; (800bf68 <_dtoa_r+0x998>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f7f4 fc8c 	bl	80005f8 <__aeabi_dmul>
 800bce0:	2200      	movs	r2, #0
 800bce2:	2300      	movs	r3, #0
 800bce4:	4606      	mov	r6, r0
 800bce6:	460f      	mov	r7, r1
 800bce8:	f7f4 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d09e      	beq.n	800bc2e <_dtoa_r+0x65e>
 800bcf0:	e7d0      	b.n	800bc94 <_dtoa_r+0x6c4>
 800bcf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcf4:	2a00      	cmp	r2, #0
 800bcf6:	f000 80ca 	beq.w	800be8e <_dtoa_r+0x8be>
 800bcfa:	9a07      	ldr	r2, [sp, #28]
 800bcfc:	2a01      	cmp	r2, #1
 800bcfe:	f300 80ad 	bgt.w	800be5c <_dtoa_r+0x88c>
 800bd02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd04:	2a00      	cmp	r2, #0
 800bd06:	f000 80a5 	beq.w	800be54 <_dtoa_r+0x884>
 800bd0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd0e:	9e08      	ldr	r6, [sp, #32]
 800bd10:	9d05      	ldr	r5, [sp, #20]
 800bd12:	9a05      	ldr	r2, [sp, #20]
 800bd14:	441a      	add	r2, r3
 800bd16:	9205      	str	r2, [sp, #20]
 800bd18:	9a06      	ldr	r2, [sp, #24]
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	441a      	add	r2, r3
 800bd1e:	4620      	mov	r0, r4
 800bd20:	9206      	str	r2, [sp, #24]
 800bd22:	f000 fc3d 	bl	800c5a0 <__i2b>
 800bd26:	4607      	mov	r7, r0
 800bd28:	b165      	cbz	r5, 800bd44 <_dtoa_r+0x774>
 800bd2a:	9b06      	ldr	r3, [sp, #24]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	dd09      	ble.n	800bd44 <_dtoa_r+0x774>
 800bd30:	42ab      	cmp	r3, r5
 800bd32:	9a05      	ldr	r2, [sp, #20]
 800bd34:	bfa8      	it	ge
 800bd36:	462b      	movge	r3, r5
 800bd38:	1ad2      	subs	r2, r2, r3
 800bd3a:	9205      	str	r2, [sp, #20]
 800bd3c:	9a06      	ldr	r2, [sp, #24]
 800bd3e:	1aed      	subs	r5, r5, r3
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	9306      	str	r3, [sp, #24]
 800bd44:	9b08      	ldr	r3, [sp, #32]
 800bd46:	b1f3      	cbz	r3, 800bd86 <_dtoa_r+0x7b6>
 800bd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 80a3 	beq.w	800be96 <_dtoa_r+0x8c6>
 800bd50:	2e00      	cmp	r6, #0
 800bd52:	dd10      	ble.n	800bd76 <_dtoa_r+0x7a6>
 800bd54:	4639      	mov	r1, r7
 800bd56:	4632      	mov	r2, r6
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 fce1 	bl	800c720 <__pow5mult>
 800bd5e:	4652      	mov	r2, sl
 800bd60:	4601      	mov	r1, r0
 800bd62:	4607      	mov	r7, r0
 800bd64:	4620      	mov	r0, r4
 800bd66:	f000 fc31 	bl	800c5cc <__multiply>
 800bd6a:	4651      	mov	r1, sl
 800bd6c:	4680      	mov	r8, r0
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f000 fb60 	bl	800c434 <_Bfree>
 800bd74:	46c2      	mov	sl, r8
 800bd76:	9b08      	ldr	r3, [sp, #32]
 800bd78:	1b9a      	subs	r2, r3, r6
 800bd7a:	d004      	beq.n	800bd86 <_dtoa_r+0x7b6>
 800bd7c:	4651      	mov	r1, sl
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 fcce 	bl	800c720 <__pow5mult>
 800bd84:	4682      	mov	sl, r0
 800bd86:	2101      	movs	r1, #1
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fc09 	bl	800c5a0 <__i2b>
 800bd8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	4606      	mov	r6, r0
 800bd94:	f340 8081 	ble.w	800be9a <_dtoa_r+0x8ca>
 800bd98:	461a      	mov	r2, r3
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f000 fcbf 	bl	800c720 <__pow5mult>
 800bda2:	9b07      	ldr	r3, [sp, #28]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	4606      	mov	r6, r0
 800bda8:	dd7a      	ble.n	800bea0 <_dtoa_r+0x8d0>
 800bdaa:	f04f 0800 	mov.w	r8, #0
 800bdae:	6933      	ldr	r3, [r6, #16]
 800bdb0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bdb4:	6918      	ldr	r0, [r3, #16]
 800bdb6:	f000 fba5 	bl	800c504 <__hi0bits>
 800bdba:	f1c0 0020 	rsb	r0, r0, #32
 800bdbe:	9b06      	ldr	r3, [sp, #24]
 800bdc0:	4418      	add	r0, r3
 800bdc2:	f010 001f 	ands.w	r0, r0, #31
 800bdc6:	f000 8094 	beq.w	800bef2 <_dtoa_r+0x922>
 800bdca:	f1c0 0320 	rsb	r3, r0, #32
 800bdce:	2b04      	cmp	r3, #4
 800bdd0:	f340 8085 	ble.w	800bede <_dtoa_r+0x90e>
 800bdd4:	9b05      	ldr	r3, [sp, #20]
 800bdd6:	f1c0 001c 	rsb	r0, r0, #28
 800bdda:	4403      	add	r3, r0
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	9b06      	ldr	r3, [sp, #24]
 800bde0:	4403      	add	r3, r0
 800bde2:	4405      	add	r5, r0
 800bde4:	9306      	str	r3, [sp, #24]
 800bde6:	9b05      	ldr	r3, [sp, #20]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	dd05      	ble.n	800bdf8 <_dtoa_r+0x828>
 800bdec:	4651      	mov	r1, sl
 800bdee:	461a      	mov	r2, r3
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	f000 fcef 	bl	800c7d4 <__lshift>
 800bdf6:	4682      	mov	sl, r0
 800bdf8:	9b06      	ldr	r3, [sp, #24]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	dd05      	ble.n	800be0a <_dtoa_r+0x83a>
 800bdfe:	4631      	mov	r1, r6
 800be00:	461a      	mov	r2, r3
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fce6 	bl	800c7d4 <__lshift>
 800be08:	4606      	mov	r6, r0
 800be0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d072      	beq.n	800bef6 <_dtoa_r+0x926>
 800be10:	4631      	mov	r1, r6
 800be12:	4650      	mov	r0, sl
 800be14:	f000 fd4a 	bl	800c8ac <__mcmp>
 800be18:	2800      	cmp	r0, #0
 800be1a:	da6c      	bge.n	800bef6 <_dtoa_r+0x926>
 800be1c:	2300      	movs	r3, #0
 800be1e:	4651      	mov	r1, sl
 800be20:	220a      	movs	r2, #10
 800be22:	4620      	mov	r0, r4
 800be24:	f000 fb28 	bl	800c478 <__multadd>
 800be28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be2e:	4682      	mov	sl, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	f000 81b0 	beq.w	800c196 <_dtoa_r+0xbc6>
 800be36:	2300      	movs	r3, #0
 800be38:	4639      	mov	r1, r7
 800be3a:	220a      	movs	r2, #10
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 fb1b 	bl	800c478 <__multadd>
 800be42:	9b01      	ldr	r3, [sp, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	4607      	mov	r7, r0
 800be48:	f300 8096 	bgt.w	800bf78 <_dtoa_r+0x9a8>
 800be4c:	9b07      	ldr	r3, [sp, #28]
 800be4e:	2b02      	cmp	r3, #2
 800be50:	dc59      	bgt.n	800bf06 <_dtoa_r+0x936>
 800be52:	e091      	b.n	800bf78 <_dtoa_r+0x9a8>
 800be54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be5a:	e758      	b.n	800bd0e <_dtoa_r+0x73e>
 800be5c:	9b04      	ldr	r3, [sp, #16]
 800be5e:	1e5e      	subs	r6, r3, #1
 800be60:	9b08      	ldr	r3, [sp, #32]
 800be62:	42b3      	cmp	r3, r6
 800be64:	bfbf      	itttt	lt
 800be66:	9b08      	ldrlt	r3, [sp, #32]
 800be68:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800be6a:	9608      	strlt	r6, [sp, #32]
 800be6c:	1af3      	sublt	r3, r6, r3
 800be6e:	bfb4      	ite	lt
 800be70:	18d2      	addlt	r2, r2, r3
 800be72:	1b9e      	subge	r6, r3, r6
 800be74:	9b04      	ldr	r3, [sp, #16]
 800be76:	bfbc      	itt	lt
 800be78:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800be7a:	2600      	movlt	r6, #0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	bfb7      	itett	lt
 800be80:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800be84:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800be88:	1a9d      	sublt	r5, r3, r2
 800be8a:	2300      	movlt	r3, #0
 800be8c:	e741      	b.n	800bd12 <_dtoa_r+0x742>
 800be8e:	9e08      	ldr	r6, [sp, #32]
 800be90:	9d05      	ldr	r5, [sp, #20]
 800be92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be94:	e748      	b.n	800bd28 <_dtoa_r+0x758>
 800be96:	9a08      	ldr	r2, [sp, #32]
 800be98:	e770      	b.n	800bd7c <_dtoa_r+0x7ac>
 800be9a:	9b07      	ldr	r3, [sp, #28]
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	dc19      	bgt.n	800bed4 <_dtoa_r+0x904>
 800bea0:	9b02      	ldr	r3, [sp, #8]
 800bea2:	b9bb      	cbnz	r3, 800bed4 <_dtoa_r+0x904>
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800beaa:	b99b      	cbnz	r3, 800bed4 <_dtoa_r+0x904>
 800beac:	9b03      	ldr	r3, [sp, #12]
 800beae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800beb2:	0d1b      	lsrs	r3, r3, #20
 800beb4:	051b      	lsls	r3, r3, #20
 800beb6:	b183      	cbz	r3, 800beda <_dtoa_r+0x90a>
 800beb8:	9b05      	ldr	r3, [sp, #20]
 800beba:	3301      	adds	r3, #1
 800bebc:	9305      	str	r3, [sp, #20]
 800bebe:	9b06      	ldr	r3, [sp, #24]
 800bec0:	3301      	adds	r3, #1
 800bec2:	9306      	str	r3, [sp, #24]
 800bec4:	f04f 0801 	mov.w	r8, #1
 800bec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beca:	2b00      	cmp	r3, #0
 800becc:	f47f af6f 	bne.w	800bdae <_dtoa_r+0x7de>
 800bed0:	2001      	movs	r0, #1
 800bed2:	e774      	b.n	800bdbe <_dtoa_r+0x7ee>
 800bed4:	f04f 0800 	mov.w	r8, #0
 800bed8:	e7f6      	b.n	800bec8 <_dtoa_r+0x8f8>
 800beda:	4698      	mov	r8, r3
 800bedc:	e7f4      	b.n	800bec8 <_dtoa_r+0x8f8>
 800bede:	d082      	beq.n	800bde6 <_dtoa_r+0x816>
 800bee0:	9a05      	ldr	r2, [sp, #20]
 800bee2:	331c      	adds	r3, #28
 800bee4:	441a      	add	r2, r3
 800bee6:	9205      	str	r2, [sp, #20]
 800bee8:	9a06      	ldr	r2, [sp, #24]
 800beea:	441a      	add	r2, r3
 800beec:	441d      	add	r5, r3
 800beee:	9206      	str	r2, [sp, #24]
 800bef0:	e779      	b.n	800bde6 <_dtoa_r+0x816>
 800bef2:	4603      	mov	r3, r0
 800bef4:	e7f4      	b.n	800bee0 <_dtoa_r+0x910>
 800bef6:	9b04      	ldr	r3, [sp, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	dc37      	bgt.n	800bf6c <_dtoa_r+0x99c>
 800befc:	9b07      	ldr	r3, [sp, #28]
 800befe:	2b02      	cmp	r3, #2
 800bf00:	dd34      	ble.n	800bf6c <_dtoa_r+0x99c>
 800bf02:	9b04      	ldr	r3, [sp, #16]
 800bf04:	9301      	str	r3, [sp, #4]
 800bf06:	9b01      	ldr	r3, [sp, #4]
 800bf08:	b963      	cbnz	r3, 800bf24 <_dtoa_r+0x954>
 800bf0a:	4631      	mov	r1, r6
 800bf0c:	2205      	movs	r2, #5
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 fab2 	bl	800c478 <__multadd>
 800bf14:	4601      	mov	r1, r0
 800bf16:	4606      	mov	r6, r0
 800bf18:	4650      	mov	r0, sl
 800bf1a:	f000 fcc7 	bl	800c8ac <__mcmp>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	f73f adbb 	bgt.w	800ba9a <_dtoa_r+0x4ca>
 800bf24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf26:	9d00      	ldr	r5, [sp, #0]
 800bf28:	ea6f 0b03 	mvn.w	fp, r3
 800bf2c:	f04f 0800 	mov.w	r8, #0
 800bf30:	4631      	mov	r1, r6
 800bf32:	4620      	mov	r0, r4
 800bf34:	f000 fa7e 	bl	800c434 <_Bfree>
 800bf38:	2f00      	cmp	r7, #0
 800bf3a:	f43f aeab 	beq.w	800bc94 <_dtoa_r+0x6c4>
 800bf3e:	f1b8 0f00 	cmp.w	r8, #0
 800bf42:	d005      	beq.n	800bf50 <_dtoa_r+0x980>
 800bf44:	45b8      	cmp	r8, r7
 800bf46:	d003      	beq.n	800bf50 <_dtoa_r+0x980>
 800bf48:	4641      	mov	r1, r8
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f000 fa72 	bl	800c434 <_Bfree>
 800bf50:	4639      	mov	r1, r7
 800bf52:	4620      	mov	r0, r4
 800bf54:	f000 fa6e 	bl	800c434 <_Bfree>
 800bf58:	e69c      	b.n	800bc94 <_dtoa_r+0x6c4>
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	4637      	mov	r7, r6
 800bf5e:	e7e1      	b.n	800bf24 <_dtoa_r+0x954>
 800bf60:	46bb      	mov	fp, r7
 800bf62:	4637      	mov	r7, r6
 800bf64:	e599      	b.n	800ba9a <_dtoa_r+0x4ca>
 800bf66:	bf00      	nop
 800bf68:	40240000 	.word	0x40240000
 800bf6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 80c8 	beq.w	800c104 <_dtoa_r+0xb34>
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	9301      	str	r3, [sp, #4]
 800bf78:	2d00      	cmp	r5, #0
 800bf7a:	dd05      	ble.n	800bf88 <_dtoa_r+0x9b8>
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	462a      	mov	r2, r5
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 fc27 	bl	800c7d4 <__lshift>
 800bf86:	4607      	mov	r7, r0
 800bf88:	f1b8 0f00 	cmp.w	r8, #0
 800bf8c:	d05b      	beq.n	800c046 <_dtoa_r+0xa76>
 800bf8e:	6879      	ldr	r1, [r7, #4]
 800bf90:	4620      	mov	r0, r4
 800bf92:	f000 fa0f 	bl	800c3b4 <_Balloc>
 800bf96:	4605      	mov	r5, r0
 800bf98:	b928      	cbnz	r0, 800bfa6 <_dtoa_r+0x9d6>
 800bf9a:	4b83      	ldr	r3, [pc, #524]	; (800c1a8 <_dtoa_r+0xbd8>)
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bfa2:	f7ff bb2e 	b.w	800b602 <_dtoa_r+0x32>
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	3202      	adds	r2, #2
 800bfaa:	0092      	lsls	r2, r2, #2
 800bfac:	f107 010c 	add.w	r1, r7, #12
 800bfb0:	300c      	adds	r0, #12
 800bfb2:	f000 ffab 	bl	800cf0c <memcpy>
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	4629      	mov	r1, r5
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f000 fc0a 	bl	800c7d4 <__lshift>
 800bfc0:	9b00      	ldr	r3, [sp, #0]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	9304      	str	r3, [sp, #16]
 800bfc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfca:	4413      	add	r3, r2
 800bfcc:	9308      	str	r3, [sp, #32]
 800bfce:	9b02      	ldr	r3, [sp, #8]
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	46b8      	mov	r8, r7
 800bfd6:	9306      	str	r3, [sp, #24]
 800bfd8:	4607      	mov	r7, r0
 800bfda:	9b04      	ldr	r3, [sp, #16]
 800bfdc:	4631      	mov	r1, r6
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	4650      	mov	r0, sl
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	f7ff fa6c 	bl	800b4c0 <quorem>
 800bfe8:	4641      	mov	r1, r8
 800bfea:	9002      	str	r0, [sp, #8]
 800bfec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bff0:	4650      	mov	r0, sl
 800bff2:	f000 fc5b 	bl	800c8ac <__mcmp>
 800bff6:	463a      	mov	r2, r7
 800bff8:	9005      	str	r0, [sp, #20]
 800bffa:	4631      	mov	r1, r6
 800bffc:	4620      	mov	r0, r4
 800bffe:	f000 fc71 	bl	800c8e4 <__mdiff>
 800c002:	68c2      	ldr	r2, [r0, #12]
 800c004:	4605      	mov	r5, r0
 800c006:	bb02      	cbnz	r2, 800c04a <_dtoa_r+0xa7a>
 800c008:	4601      	mov	r1, r0
 800c00a:	4650      	mov	r0, sl
 800c00c:	f000 fc4e 	bl	800c8ac <__mcmp>
 800c010:	4602      	mov	r2, r0
 800c012:	4629      	mov	r1, r5
 800c014:	4620      	mov	r0, r4
 800c016:	9209      	str	r2, [sp, #36]	; 0x24
 800c018:	f000 fa0c 	bl	800c434 <_Bfree>
 800c01c:	9b07      	ldr	r3, [sp, #28]
 800c01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c020:	9d04      	ldr	r5, [sp, #16]
 800c022:	ea43 0102 	orr.w	r1, r3, r2
 800c026:	9b06      	ldr	r3, [sp, #24]
 800c028:	4319      	orrs	r1, r3
 800c02a:	d110      	bne.n	800c04e <_dtoa_r+0xa7e>
 800c02c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c030:	d029      	beq.n	800c086 <_dtoa_r+0xab6>
 800c032:	9b05      	ldr	r3, [sp, #20]
 800c034:	2b00      	cmp	r3, #0
 800c036:	dd02      	ble.n	800c03e <_dtoa_r+0xa6e>
 800c038:	9b02      	ldr	r3, [sp, #8]
 800c03a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c03e:	9b01      	ldr	r3, [sp, #4]
 800c040:	f883 9000 	strb.w	r9, [r3]
 800c044:	e774      	b.n	800bf30 <_dtoa_r+0x960>
 800c046:	4638      	mov	r0, r7
 800c048:	e7ba      	b.n	800bfc0 <_dtoa_r+0x9f0>
 800c04a:	2201      	movs	r2, #1
 800c04c:	e7e1      	b.n	800c012 <_dtoa_r+0xa42>
 800c04e:	9b05      	ldr	r3, [sp, #20]
 800c050:	2b00      	cmp	r3, #0
 800c052:	db04      	blt.n	800c05e <_dtoa_r+0xa8e>
 800c054:	9907      	ldr	r1, [sp, #28]
 800c056:	430b      	orrs	r3, r1
 800c058:	9906      	ldr	r1, [sp, #24]
 800c05a:	430b      	orrs	r3, r1
 800c05c:	d120      	bne.n	800c0a0 <_dtoa_r+0xad0>
 800c05e:	2a00      	cmp	r2, #0
 800c060:	dded      	ble.n	800c03e <_dtoa_r+0xa6e>
 800c062:	4651      	mov	r1, sl
 800c064:	2201      	movs	r2, #1
 800c066:	4620      	mov	r0, r4
 800c068:	f000 fbb4 	bl	800c7d4 <__lshift>
 800c06c:	4631      	mov	r1, r6
 800c06e:	4682      	mov	sl, r0
 800c070:	f000 fc1c 	bl	800c8ac <__mcmp>
 800c074:	2800      	cmp	r0, #0
 800c076:	dc03      	bgt.n	800c080 <_dtoa_r+0xab0>
 800c078:	d1e1      	bne.n	800c03e <_dtoa_r+0xa6e>
 800c07a:	f019 0f01 	tst.w	r9, #1
 800c07e:	d0de      	beq.n	800c03e <_dtoa_r+0xa6e>
 800c080:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c084:	d1d8      	bne.n	800c038 <_dtoa_r+0xa68>
 800c086:	9a01      	ldr	r2, [sp, #4]
 800c088:	2339      	movs	r3, #57	; 0x39
 800c08a:	7013      	strb	r3, [r2, #0]
 800c08c:	462b      	mov	r3, r5
 800c08e:	461d      	mov	r5, r3
 800c090:	3b01      	subs	r3, #1
 800c092:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c096:	2a39      	cmp	r2, #57	; 0x39
 800c098:	d06c      	beq.n	800c174 <_dtoa_r+0xba4>
 800c09a:	3201      	adds	r2, #1
 800c09c:	701a      	strb	r2, [r3, #0]
 800c09e:	e747      	b.n	800bf30 <_dtoa_r+0x960>
 800c0a0:	2a00      	cmp	r2, #0
 800c0a2:	dd07      	ble.n	800c0b4 <_dtoa_r+0xae4>
 800c0a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c0a8:	d0ed      	beq.n	800c086 <_dtoa_r+0xab6>
 800c0aa:	9a01      	ldr	r2, [sp, #4]
 800c0ac:	f109 0301 	add.w	r3, r9, #1
 800c0b0:	7013      	strb	r3, [r2, #0]
 800c0b2:	e73d      	b.n	800bf30 <_dtoa_r+0x960>
 800c0b4:	9b04      	ldr	r3, [sp, #16]
 800c0b6:	9a08      	ldr	r2, [sp, #32]
 800c0b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d043      	beq.n	800c148 <_dtoa_r+0xb78>
 800c0c0:	4651      	mov	r1, sl
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	220a      	movs	r2, #10
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	f000 f9d6 	bl	800c478 <__multadd>
 800c0cc:	45b8      	cmp	r8, r7
 800c0ce:	4682      	mov	sl, r0
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	f04f 020a 	mov.w	r2, #10
 800c0d8:	4641      	mov	r1, r8
 800c0da:	4620      	mov	r0, r4
 800c0dc:	d107      	bne.n	800c0ee <_dtoa_r+0xb1e>
 800c0de:	f000 f9cb 	bl	800c478 <__multadd>
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	9b04      	ldr	r3, [sp, #16]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	9304      	str	r3, [sp, #16]
 800c0ec:	e775      	b.n	800bfda <_dtoa_r+0xa0a>
 800c0ee:	f000 f9c3 	bl	800c478 <__multadd>
 800c0f2:	4639      	mov	r1, r7
 800c0f4:	4680      	mov	r8, r0
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	220a      	movs	r2, #10
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f000 f9bc 	bl	800c478 <__multadd>
 800c100:	4607      	mov	r7, r0
 800c102:	e7f0      	b.n	800c0e6 <_dtoa_r+0xb16>
 800c104:	9b04      	ldr	r3, [sp, #16]
 800c106:	9301      	str	r3, [sp, #4]
 800c108:	9d00      	ldr	r5, [sp, #0]
 800c10a:	4631      	mov	r1, r6
 800c10c:	4650      	mov	r0, sl
 800c10e:	f7ff f9d7 	bl	800b4c0 <quorem>
 800c112:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c116:	9b00      	ldr	r3, [sp, #0]
 800c118:	f805 9b01 	strb.w	r9, [r5], #1
 800c11c:	1aea      	subs	r2, r5, r3
 800c11e:	9b01      	ldr	r3, [sp, #4]
 800c120:	4293      	cmp	r3, r2
 800c122:	dd07      	ble.n	800c134 <_dtoa_r+0xb64>
 800c124:	4651      	mov	r1, sl
 800c126:	2300      	movs	r3, #0
 800c128:	220a      	movs	r2, #10
 800c12a:	4620      	mov	r0, r4
 800c12c:	f000 f9a4 	bl	800c478 <__multadd>
 800c130:	4682      	mov	sl, r0
 800c132:	e7ea      	b.n	800c10a <_dtoa_r+0xb3a>
 800c134:	9b01      	ldr	r3, [sp, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	bfc8      	it	gt
 800c13a:	461d      	movgt	r5, r3
 800c13c:	9b00      	ldr	r3, [sp, #0]
 800c13e:	bfd8      	it	le
 800c140:	2501      	movle	r5, #1
 800c142:	441d      	add	r5, r3
 800c144:	f04f 0800 	mov.w	r8, #0
 800c148:	4651      	mov	r1, sl
 800c14a:	2201      	movs	r2, #1
 800c14c:	4620      	mov	r0, r4
 800c14e:	f000 fb41 	bl	800c7d4 <__lshift>
 800c152:	4631      	mov	r1, r6
 800c154:	4682      	mov	sl, r0
 800c156:	f000 fba9 	bl	800c8ac <__mcmp>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	dc96      	bgt.n	800c08c <_dtoa_r+0xabc>
 800c15e:	d102      	bne.n	800c166 <_dtoa_r+0xb96>
 800c160:	f019 0f01 	tst.w	r9, #1
 800c164:	d192      	bne.n	800c08c <_dtoa_r+0xabc>
 800c166:	462b      	mov	r3, r5
 800c168:	461d      	mov	r5, r3
 800c16a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c16e:	2a30      	cmp	r2, #48	; 0x30
 800c170:	d0fa      	beq.n	800c168 <_dtoa_r+0xb98>
 800c172:	e6dd      	b.n	800bf30 <_dtoa_r+0x960>
 800c174:	9a00      	ldr	r2, [sp, #0]
 800c176:	429a      	cmp	r2, r3
 800c178:	d189      	bne.n	800c08e <_dtoa_r+0xabe>
 800c17a:	f10b 0b01 	add.w	fp, fp, #1
 800c17e:	2331      	movs	r3, #49	; 0x31
 800c180:	e796      	b.n	800c0b0 <_dtoa_r+0xae0>
 800c182:	4b0a      	ldr	r3, [pc, #40]	; (800c1ac <_dtoa_r+0xbdc>)
 800c184:	f7ff ba99 	b.w	800b6ba <_dtoa_r+0xea>
 800c188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f47f aa6d 	bne.w	800b66a <_dtoa_r+0x9a>
 800c190:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <_dtoa_r+0xbe0>)
 800c192:	f7ff ba92 	b.w	800b6ba <_dtoa_r+0xea>
 800c196:	9b01      	ldr	r3, [sp, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	dcb5      	bgt.n	800c108 <_dtoa_r+0xb38>
 800c19c:	9b07      	ldr	r3, [sp, #28]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	f73f aeb1 	bgt.w	800bf06 <_dtoa_r+0x936>
 800c1a4:	e7b0      	b.n	800c108 <_dtoa_r+0xb38>
 800c1a6:	bf00      	nop
 800c1a8:	0800df18 	.word	0x0800df18
 800c1ac:	0800de78 	.word	0x0800de78
 800c1b0:	0800de9c 	.word	0x0800de9c

0800c1b4 <_free_r>:
 800c1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1b6:	2900      	cmp	r1, #0
 800c1b8:	d044      	beq.n	800c244 <_free_r+0x90>
 800c1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1be:	9001      	str	r0, [sp, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f1a1 0404 	sub.w	r4, r1, #4
 800c1c6:	bfb8      	it	lt
 800c1c8:	18e4      	addlt	r4, r4, r3
 800c1ca:	f000 f8e7 	bl	800c39c <__malloc_lock>
 800c1ce:	4a1e      	ldr	r2, [pc, #120]	; (800c248 <_free_r+0x94>)
 800c1d0:	9801      	ldr	r0, [sp, #4]
 800c1d2:	6813      	ldr	r3, [r2, #0]
 800c1d4:	b933      	cbnz	r3, 800c1e4 <_free_r+0x30>
 800c1d6:	6063      	str	r3, [r4, #4]
 800c1d8:	6014      	str	r4, [r2, #0]
 800c1da:	b003      	add	sp, #12
 800c1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1e0:	f000 b8e2 	b.w	800c3a8 <__malloc_unlock>
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	d908      	bls.n	800c1fa <_free_r+0x46>
 800c1e8:	6825      	ldr	r5, [r4, #0]
 800c1ea:	1961      	adds	r1, r4, r5
 800c1ec:	428b      	cmp	r3, r1
 800c1ee:	bf01      	itttt	eq
 800c1f0:	6819      	ldreq	r1, [r3, #0]
 800c1f2:	685b      	ldreq	r3, [r3, #4]
 800c1f4:	1949      	addeq	r1, r1, r5
 800c1f6:	6021      	streq	r1, [r4, #0]
 800c1f8:	e7ed      	b.n	800c1d6 <_free_r+0x22>
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	b10b      	cbz	r3, 800c204 <_free_r+0x50>
 800c200:	42a3      	cmp	r3, r4
 800c202:	d9fa      	bls.n	800c1fa <_free_r+0x46>
 800c204:	6811      	ldr	r1, [r2, #0]
 800c206:	1855      	adds	r5, r2, r1
 800c208:	42a5      	cmp	r5, r4
 800c20a:	d10b      	bne.n	800c224 <_free_r+0x70>
 800c20c:	6824      	ldr	r4, [r4, #0]
 800c20e:	4421      	add	r1, r4
 800c210:	1854      	adds	r4, r2, r1
 800c212:	42a3      	cmp	r3, r4
 800c214:	6011      	str	r1, [r2, #0]
 800c216:	d1e0      	bne.n	800c1da <_free_r+0x26>
 800c218:	681c      	ldr	r4, [r3, #0]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	6053      	str	r3, [r2, #4]
 800c21e:	440c      	add	r4, r1
 800c220:	6014      	str	r4, [r2, #0]
 800c222:	e7da      	b.n	800c1da <_free_r+0x26>
 800c224:	d902      	bls.n	800c22c <_free_r+0x78>
 800c226:	230c      	movs	r3, #12
 800c228:	6003      	str	r3, [r0, #0]
 800c22a:	e7d6      	b.n	800c1da <_free_r+0x26>
 800c22c:	6825      	ldr	r5, [r4, #0]
 800c22e:	1961      	adds	r1, r4, r5
 800c230:	428b      	cmp	r3, r1
 800c232:	bf04      	itt	eq
 800c234:	6819      	ldreq	r1, [r3, #0]
 800c236:	685b      	ldreq	r3, [r3, #4]
 800c238:	6063      	str	r3, [r4, #4]
 800c23a:	bf04      	itt	eq
 800c23c:	1949      	addeq	r1, r1, r5
 800c23e:	6021      	streq	r1, [r4, #0]
 800c240:	6054      	str	r4, [r2, #4]
 800c242:	e7ca      	b.n	800c1da <_free_r+0x26>
 800c244:	b003      	add	sp, #12
 800c246:	bd30      	pop	{r4, r5, pc}
 800c248:	20001ef4 	.word	0x20001ef4

0800c24c <malloc>:
 800c24c:	4b02      	ldr	r3, [pc, #8]	; (800c258 <malloc+0xc>)
 800c24e:	4601      	mov	r1, r0
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f000 b823 	b.w	800c29c <_malloc_r>
 800c256:	bf00      	nop
 800c258:	2000006c 	.word	0x2000006c

0800c25c <sbrk_aligned>:
 800c25c:	b570      	push	{r4, r5, r6, lr}
 800c25e:	4e0e      	ldr	r6, [pc, #56]	; (800c298 <sbrk_aligned+0x3c>)
 800c260:	460c      	mov	r4, r1
 800c262:	6831      	ldr	r1, [r6, #0]
 800c264:	4605      	mov	r5, r0
 800c266:	b911      	cbnz	r1, 800c26e <sbrk_aligned+0x12>
 800c268:	f000 fe40 	bl	800ceec <_sbrk_r>
 800c26c:	6030      	str	r0, [r6, #0]
 800c26e:	4621      	mov	r1, r4
 800c270:	4628      	mov	r0, r5
 800c272:	f000 fe3b 	bl	800ceec <_sbrk_r>
 800c276:	1c43      	adds	r3, r0, #1
 800c278:	d00a      	beq.n	800c290 <sbrk_aligned+0x34>
 800c27a:	1cc4      	adds	r4, r0, #3
 800c27c:	f024 0403 	bic.w	r4, r4, #3
 800c280:	42a0      	cmp	r0, r4
 800c282:	d007      	beq.n	800c294 <sbrk_aligned+0x38>
 800c284:	1a21      	subs	r1, r4, r0
 800c286:	4628      	mov	r0, r5
 800c288:	f000 fe30 	bl	800ceec <_sbrk_r>
 800c28c:	3001      	adds	r0, #1
 800c28e:	d101      	bne.n	800c294 <sbrk_aligned+0x38>
 800c290:	f04f 34ff 	mov.w	r4, #4294967295
 800c294:	4620      	mov	r0, r4
 800c296:	bd70      	pop	{r4, r5, r6, pc}
 800c298:	20001ef8 	.word	0x20001ef8

0800c29c <_malloc_r>:
 800c29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a0:	1ccd      	adds	r5, r1, #3
 800c2a2:	f025 0503 	bic.w	r5, r5, #3
 800c2a6:	3508      	adds	r5, #8
 800c2a8:	2d0c      	cmp	r5, #12
 800c2aa:	bf38      	it	cc
 800c2ac:	250c      	movcc	r5, #12
 800c2ae:	2d00      	cmp	r5, #0
 800c2b0:	4607      	mov	r7, r0
 800c2b2:	db01      	blt.n	800c2b8 <_malloc_r+0x1c>
 800c2b4:	42a9      	cmp	r1, r5
 800c2b6:	d905      	bls.n	800c2c4 <_malloc_r+0x28>
 800c2b8:	230c      	movs	r3, #12
 800c2ba:	603b      	str	r3, [r7, #0]
 800c2bc:	2600      	movs	r6, #0
 800c2be:	4630      	mov	r0, r6
 800c2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c398 <_malloc_r+0xfc>
 800c2c8:	f000 f868 	bl	800c39c <__malloc_lock>
 800c2cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d0:	461c      	mov	r4, r3
 800c2d2:	bb5c      	cbnz	r4, 800c32c <_malloc_r+0x90>
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	f7ff ffc0 	bl	800c25c <sbrk_aligned>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	4604      	mov	r4, r0
 800c2e0:	d155      	bne.n	800c38e <_malloc_r+0xf2>
 800c2e2:	f8d8 4000 	ldr.w	r4, [r8]
 800c2e6:	4626      	mov	r6, r4
 800c2e8:	2e00      	cmp	r6, #0
 800c2ea:	d145      	bne.n	800c378 <_malloc_r+0xdc>
 800c2ec:	2c00      	cmp	r4, #0
 800c2ee:	d048      	beq.n	800c382 <_malloc_r+0xe6>
 800c2f0:	6823      	ldr	r3, [r4, #0]
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	eb04 0903 	add.w	r9, r4, r3
 800c2fa:	f000 fdf7 	bl	800ceec <_sbrk_r>
 800c2fe:	4581      	cmp	r9, r0
 800c300:	d13f      	bne.n	800c382 <_malloc_r+0xe6>
 800c302:	6821      	ldr	r1, [r4, #0]
 800c304:	1a6d      	subs	r5, r5, r1
 800c306:	4629      	mov	r1, r5
 800c308:	4638      	mov	r0, r7
 800c30a:	f7ff ffa7 	bl	800c25c <sbrk_aligned>
 800c30e:	3001      	adds	r0, #1
 800c310:	d037      	beq.n	800c382 <_malloc_r+0xe6>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	442b      	add	r3, r5
 800c316:	6023      	str	r3, [r4, #0]
 800c318:	f8d8 3000 	ldr.w	r3, [r8]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d038      	beq.n	800c392 <_malloc_r+0xf6>
 800c320:	685a      	ldr	r2, [r3, #4]
 800c322:	42a2      	cmp	r2, r4
 800c324:	d12b      	bne.n	800c37e <_malloc_r+0xe2>
 800c326:	2200      	movs	r2, #0
 800c328:	605a      	str	r2, [r3, #4]
 800c32a:	e00f      	b.n	800c34c <_malloc_r+0xb0>
 800c32c:	6822      	ldr	r2, [r4, #0]
 800c32e:	1b52      	subs	r2, r2, r5
 800c330:	d41f      	bmi.n	800c372 <_malloc_r+0xd6>
 800c332:	2a0b      	cmp	r2, #11
 800c334:	d917      	bls.n	800c366 <_malloc_r+0xca>
 800c336:	1961      	adds	r1, r4, r5
 800c338:	42a3      	cmp	r3, r4
 800c33a:	6025      	str	r5, [r4, #0]
 800c33c:	bf18      	it	ne
 800c33e:	6059      	strne	r1, [r3, #4]
 800c340:	6863      	ldr	r3, [r4, #4]
 800c342:	bf08      	it	eq
 800c344:	f8c8 1000 	streq.w	r1, [r8]
 800c348:	5162      	str	r2, [r4, r5]
 800c34a:	604b      	str	r3, [r1, #4]
 800c34c:	4638      	mov	r0, r7
 800c34e:	f104 060b 	add.w	r6, r4, #11
 800c352:	f000 f829 	bl	800c3a8 <__malloc_unlock>
 800c356:	f026 0607 	bic.w	r6, r6, #7
 800c35a:	1d23      	adds	r3, r4, #4
 800c35c:	1af2      	subs	r2, r6, r3
 800c35e:	d0ae      	beq.n	800c2be <_malloc_r+0x22>
 800c360:	1b9b      	subs	r3, r3, r6
 800c362:	50a3      	str	r3, [r4, r2]
 800c364:	e7ab      	b.n	800c2be <_malloc_r+0x22>
 800c366:	42a3      	cmp	r3, r4
 800c368:	6862      	ldr	r2, [r4, #4]
 800c36a:	d1dd      	bne.n	800c328 <_malloc_r+0x8c>
 800c36c:	f8c8 2000 	str.w	r2, [r8]
 800c370:	e7ec      	b.n	800c34c <_malloc_r+0xb0>
 800c372:	4623      	mov	r3, r4
 800c374:	6864      	ldr	r4, [r4, #4]
 800c376:	e7ac      	b.n	800c2d2 <_malloc_r+0x36>
 800c378:	4634      	mov	r4, r6
 800c37a:	6876      	ldr	r6, [r6, #4]
 800c37c:	e7b4      	b.n	800c2e8 <_malloc_r+0x4c>
 800c37e:	4613      	mov	r3, r2
 800c380:	e7cc      	b.n	800c31c <_malloc_r+0x80>
 800c382:	230c      	movs	r3, #12
 800c384:	603b      	str	r3, [r7, #0]
 800c386:	4638      	mov	r0, r7
 800c388:	f000 f80e 	bl	800c3a8 <__malloc_unlock>
 800c38c:	e797      	b.n	800c2be <_malloc_r+0x22>
 800c38e:	6025      	str	r5, [r4, #0]
 800c390:	e7dc      	b.n	800c34c <_malloc_r+0xb0>
 800c392:	605b      	str	r3, [r3, #4]
 800c394:	deff      	udf	#255	; 0xff
 800c396:	bf00      	nop
 800c398:	20001ef4 	.word	0x20001ef4

0800c39c <__malloc_lock>:
 800c39c:	4801      	ldr	r0, [pc, #4]	; (800c3a4 <__malloc_lock+0x8>)
 800c39e:	f7ff b88d 	b.w	800b4bc <__retarget_lock_acquire_recursive>
 800c3a2:	bf00      	nop
 800c3a4:	20001ef0 	.word	0x20001ef0

0800c3a8 <__malloc_unlock>:
 800c3a8:	4801      	ldr	r0, [pc, #4]	; (800c3b0 <__malloc_unlock+0x8>)
 800c3aa:	f7ff b888 	b.w	800b4be <__retarget_lock_release_recursive>
 800c3ae:	bf00      	nop
 800c3b0:	20001ef0 	.word	0x20001ef0

0800c3b4 <_Balloc>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	69c6      	ldr	r6, [r0, #28]
 800c3b8:	4604      	mov	r4, r0
 800c3ba:	460d      	mov	r5, r1
 800c3bc:	b976      	cbnz	r6, 800c3dc <_Balloc+0x28>
 800c3be:	2010      	movs	r0, #16
 800c3c0:	f7ff ff44 	bl	800c24c <malloc>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	61e0      	str	r0, [r4, #28]
 800c3c8:	b920      	cbnz	r0, 800c3d4 <_Balloc+0x20>
 800c3ca:	4b18      	ldr	r3, [pc, #96]	; (800c42c <_Balloc+0x78>)
 800c3cc:	4818      	ldr	r0, [pc, #96]	; (800c430 <_Balloc+0x7c>)
 800c3ce:	216b      	movs	r1, #107	; 0x6b
 800c3d0:	f000 fdaa 	bl	800cf28 <__assert_func>
 800c3d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3d8:	6006      	str	r6, [r0, #0]
 800c3da:	60c6      	str	r6, [r0, #12]
 800c3dc:	69e6      	ldr	r6, [r4, #28]
 800c3de:	68f3      	ldr	r3, [r6, #12]
 800c3e0:	b183      	cbz	r3, 800c404 <_Balloc+0x50>
 800c3e2:	69e3      	ldr	r3, [r4, #28]
 800c3e4:	68db      	ldr	r3, [r3, #12]
 800c3e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3ea:	b9b8      	cbnz	r0, 800c41c <_Balloc+0x68>
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c3f2:	1d72      	adds	r2, r6, #5
 800c3f4:	0092      	lsls	r2, r2, #2
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 fdb4 	bl	800cf64 <_calloc_r>
 800c3fc:	b160      	cbz	r0, 800c418 <_Balloc+0x64>
 800c3fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c402:	e00e      	b.n	800c422 <_Balloc+0x6e>
 800c404:	2221      	movs	r2, #33	; 0x21
 800c406:	2104      	movs	r1, #4
 800c408:	4620      	mov	r0, r4
 800c40a:	f000 fdab 	bl	800cf64 <_calloc_r>
 800c40e:	69e3      	ldr	r3, [r4, #28]
 800c410:	60f0      	str	r0, [r6, #12]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1e4      	bne.n	800c3e2 <_Balloc+0x2e>
 800c418:	2000      	movs	r0, #0
 800c41a:	bd70      	pop	{r4, r5, r6, pc}
 800c41c:	6802      	ldr	r2, [r0, #0]
 800c41e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c422:	2300      	movs	r3, #0
 800c424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c428:	e7f7      	b.n	800c41a <_Balloc+0x66>
 800c42a:	bf00      	nop
 800c42c:	0800dea9 	.word	0x0800dea9
 800c430:	0800df29 	.word	0x0800df29

0800c434 <_Bfree>:
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	69c6      	ldr	r6, [r0, #28]
 800c438:	4605      	mov	r5, r0
 800c43a:	460c      	mov	r4, r1
 800c43c:	b976      	cbnz	r6, 800c45c <_Bfree+0x28>
 800c43e:	2010      	movs	r0, #16
 800c440:	f7ff ff04 	bl	800c24c <malloc>
 800c444:	4602      	mov	r2, r0
 800c446:	61e8      	str	r0, [r5, #28]
 800c448:	b920      	cbnz	r0, 800c454 <_Bfree+0x20>
 800c44a:	4b09      	ldr	r3, [pc, #36]	; (800c470 <_Bfree+0x3c>)
 800c44c:	4809      	ldr	r0, [pc, #36]	; (800c474 <_Bfree+0x40>)
 800c44e:	218f      	movs	r1, #143	; 0x8f
 800c450:	f000 fd6a 	bl	800cf28 <__assert_func>
 800c454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c458:	6006      	str	r6, [r0, #0]
 800c45a:	60c6      	str	r6, [r0, #12]
 800c45c:	b13c      	cbz	r4, 800c46e <_Bfree+0x3a>
 800c45e:	69eb      	ldr	r3, [r5, #28]
 800c460:	6862      	ldr	r2, [r4, #4]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c468:	6021      	str	r1, [r4, #0]
 800c46a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c46e:	bd70      	pop	{r4, r5, r6, pc}
 800c470:	0800dea9 	.word	0x0800dea9
 800c474:	0800df29 	.word	0x0800df29

0800c478 <__multadd>:
 800c478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47c:	690d      	ldr	r5, [r1, #16]
 800c47e:	4607      	mov	r7, r0
 800c480:	460c      	mov	r4, r1
 800c482:	461e      	mov	r6, r3
 800c484:	f101 0c14 	add.w	ip, r1, #20
 800c488:	2000      	movs	r0, #0
 800c48a:	f8dc 3000 	ldr.w	r3, [ip]
 800c48e:	b299      	uxth	r1, r3
 800c490:	fb02 6101 	mla	r1, r2, r1, r6
 800c494:	0c1e      	lsrs	r6, r3, #16
 800c496:	0c0b      	lsrs	r3, r1, #16
 800c498:	fb02 3306 	mla	r3, r2, r6, r3
 800c49c:	b289      	uxth	r1, r1
 800c49e:	3001      	adds	r0, #1
 800c4a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4a4:	4285      	cmp	r5, r0
 800c4a6:	f84c 1b04 	str.w	r1, [ip], #4
 800c4aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4ae:	dcec      	bgt.n	800c48a <__multadd+0x12>
 800c4b0:	b30e      	cbz	r6, 800c4f6 <__multadd+0x7e>
 800c4b2:	68a3      	ldr	r3, [r4, #8]
 800c4b4:	42ab      	cmp	r3, r5
 800c4b6:	dc19      	bgt.n	800c4ec <__multadd+0x74>
 800c4b8:	6861      	ldr	r1, [r4, #4]
 800c4ba:	4638      	mov	r0, r7
 800c4bc:	3101      	adds	r1, #1
 800c4be:	f7ff ff79 	bl	800c3b4 <_Balloc>
 800c4c2:	4680      	mov	r8, r0
 800c4c4:	b928      	cbnz	r0, 800c4d2 <__multadd+0x5a>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	4b0c      	ldr	r3, [pc, #48]	; (800c4fc <__multadd+0x84>)
 800c4ca:	480d      	ldr	r0, [pc, #52]	; (800c500 <__multadd+0x88>)
 800c4cc:	21ba      	movs	r1, #186	; 0xba
 800c4ce:	f000 fd2b 	bl	800cf28 <__assert_func>
 800c4d2:	6922      	ldr	r2, [r4, #16]
 800c4d4:	3202      	adds	r2, #2
 800c4d6:	f104 010c 	add.w	r1, r4, #12
 800c4da:	0092      	lsls	r2, r2, #2
 800c4dc:	300c      	adds	r0, #12
 800c4de:	f000 fd15 	bl	800cf0c <memcpy>
 800c4e2:	4621      	mov	r1, r4
 800c4e4:	4638      	mov	r0, r7
 800c4e6:	f7ff ffa5 	bl	800c434 <_Bfree>
 800c4ea:	4644      	mov	r4, r8
 800c4ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c4f0:	3501      	adds	r5, #1
 800c4f2:	615e      	str	r6, [r3, #20]
 800c4f4:	6125      	str	r5, [r4, #16]
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4fc:	0800df18 	.word	0x0800df18
 800c500:	0800df29 	.word	0x0800df29

0800c504 <__hi0bits>:
 800c504:	0c03      	lsrs	r3, r0, #16
 800c506:	041b      	lsls	r3, r3, #16
 800c508:	b9d3      	cbnz	r3, 800c540 <__hi0bits+0x3c>
 800c50a:	0400      	lsls	r0, r0, #16
 800c50c:	2310      	movs	r3, #16
 800c50e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c512:	bf04      	itt	eq
 800c514:	0200      	lsleq	r0, r0, #8
 800c516:	3308      	addeq	r3, #8
 800c518:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c51c:	bf04      	itt	eq
 800c51e:	0100      	lsleq	r0, r0, #4
 800c520:	3304      	addeq	r3, #4
 800c522:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c526:	bf04      	itt	eq
 800c528:	0080      	lsleq	r0, r0, #2
 800c52a:	3302      	addeq	r3, #2
 800c52c:	2800      	cmp	r0, #0
 800c52e:	db05      	blt.n	800c53c <__hi0bits+0x38>
 800c530:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c534:	f103 0301 	add.w	r3, r3, #1
 800c538:	bf08      	it	eq
 800c53a:	2320      	moveq	r3, #32
 800c53c:	4618      	mov	r0, r3
 800c53e:	4770      	bx	lr
 800c540:	2300      	movs	r3, #0
 800c542:	e7e4      	b.n	800c50e <__hi0bits+0xa>

0800c544 <__lo0bits>:
 800c544:	6803      	ldr	r3, [r0, #0]
 800c546:	f013 0207 	ands.w	r2, r3, #7
 800c54a:	d00c      	beq.n	800c566 <__lo0bits+0x22>
 800c54c:	07d9      	lsls	r1, r3, #31
 800c54e:	d422      	bmi.n	800c596 <__lo0bits+0x52>
 800c550:	079a      	lsls	r2, r3, #30
 800c552:	bf49      	itett	mi
 800c554:	085b      	lsrmi	r3, r3, #1
 800c556:	089b      	lsrpl	r3, r3, #2
 800c558:	6003      	strmi	r3, [r0, #0]
 800c55a:	2201      	movmi	r2, #1
 800c55c:	bf5c      	itt	pl
 800c55e:	6003      	strpl	r3, [r0, #0]
 800c560:	2202      	movpl	r2, #2
 800c562:	4610      	mov	r0, r2
 800c564:	4770      	bx	lr
 800c566:	b299      	uxth	r1, r3
 800c568:	b909      	cbnz	r1, 800c56e <__lo0bits+0x2a>
 800c56a:	0c1b      	lsrs	r3, r3, #16
 800c56c:	2210      	movs	r2, #16
 800c56e:	b2d9      	uxtb	r1, r3
 800c570:	b909      	cbnz	r1, 800c576 <__lo0bits+0x32>
 800c572:	3208      	adds	r2, #8
 800c574:	0a1b      	lsrs	r3, r3, #8
 800c576:	0719      	lsls	r1, r3, #28
 800c578:	bf04      	itt	eq
 800c57a:	091b      	lsreq	r3, r3, #4
 800c57c:	3204      	addeq	r2, #4
 800c57e:	0799      	lsls	r1, r3, #30
 800c580:	bf04      	itt	eq
 800c582:	089b      	lsreq	r3, r3, #2
 800c584:	3202      	addeq	r2, #2
 800c586:	07d9      	lsls	r1, r3, #31
 800c588:	d403      	bmi.n	800c592 <__lo0bits+0x4e>
 800c58a:	085b      	lsrs	r3, r3, #1
 800c58c:	f102 0201 	add.w	r2, r2, #1
 800c590:	d003      	beq.n	800c59a <__lo0bits+0x56>
 800c592:	6003      	str	r3, [r0, #0]
 800c594:	e7e5      	b.n	800c562 <__lo0bits+0x1e>
 800c596:	2200      	movs	r2, #0
 800c598:	e7e3      	b.n	800c562 <__lo0bits+0x1e>
 800c59a:	2220      	movs	r2, #32
 800c59c:	e7e1      	b.n	800c562 <__lo0bits+0x1e>
	...

0800c5a0 <__i2b>:
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	f7ff ff05 	bl	800c3b4 <_Balloc>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	b928      	cbnz	r0, 800c5ba <__i2b+0x1a>
 800c5ae:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <__i2b+0x24>)
 800c5b0:	4805      	ldr	r0, [pc, #20]	; (800c5c8 <__i2b+0x28>)
 800c5b2:	f240 1145 	movw	r1, #325	; 0x145
 800c5b6:	f000 fcb7 	bl	800cf28 <__assert_func>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	6144      	str	r4, [r0, #20]
 800c5be:	6103      	str	r3, [r0, #16]
 800c5c0:	bd10      	pop	{r4, pc}
 800c5c2:	bf00      	nop
 800c5c4:	0800df18 	.word	0x0800df18
 800c5c8:	0800df29 	.word	0x0800df29

0800c5cc <__multiply>:
 800c5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d0:	4691      	mov	r9, r2
 800c5d2:	690a      	ldr	r2, [r1, #16]
 800c5d4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	bfb8      	it	lt
 800c5dc:	460b      	movlt	r3, r1
 800c5de:	460c      	mov	r4, r1
 800c5e0:	bfbc      	itt	lt
 800c5e2:	464c      	movlt	r4, r9
 800c5e4:	4699      	movlt	r9, r3
 800c5e6:	6927      	ldr	r7, [r4, #16]
 800c5e8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5ec:	68a3      	ldr	r3, [r4, #8]
 800c5ee:	6861      	ldr	r1, [r4, #4]
 800c5f0:	eb07 060a 	add.w	r6, r7, sl
 800c5f4:	42b3      	cmp	r3, r6
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	bfb8      	it	lt
 800c5fa:	3101      	addlt	r1, #1
 800c5fc:	f7ff feda 	bl	800c3b4 <_Balloc>
 800c600:	b930      	cbnz	r0, 800c610 <__multiply+0x44>
 800c602:	4602      	mov	r2, r0
 800c604:	4b44      	ldr	r3, [pc, #272]	; (800c718 <__multiply+0x14c>)
 800c606:	4845      	ldr	r0, [pc, #276]	; (800c71c <__multiply+0x150>)
 800c608:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c60c:	f000 fc8c 	bl	800cf28 <__assert_func>
 800c610:	f100 0514 	add.w	r5, r0, #20
 800c614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c618:	462b      	mov	r3, r5
 800c61a:	2200      	movs	r2, #0
 800c61c:	4543      	cmp	r3, r8
 800c61e:	d321      	bcc.n	800c664 <__multiply+0x98>
 800c620:	f104 0314 	add.w	r3, r4, #20
 800c624:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c628:	f109 0314 	add.w	r3, r9, #20
 800c62c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c630:	9202      	str	r2, [sp, #8]
 800c632:	1b3a      	subs	r2, r7, r4
 800c634:	3a15      	subs	r2, #21
 800c636:	f022 0203 	bic.w	r2, r2, #3
 800c63a:	3204      	adds	r2, #4
 800c63c:	f104 0115 	add.w	r1, r4, #21
 800c640:	428f      	cmp	r7, r1
 800c642:	bf38      	it	cc
 800c644:	2204      	movcc	r2, #4
 800c646:	9201      	str	r2, [sp, #4]
 800c648:	9a02      	ldr	r2, [sp, #8]
 800c64a:	9303      	str	r3, [sp, #12]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d80c      	bhi.n	800c66a <__multiply+0x9e>
 800c650:	2e00      	cmp	r6, #0
 800c652:	dd03      	ble.n	800c65c <__multiply+0x90>
 800c654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d05b      	beq.n	800c714 <__multiply+0x148>
 800c65c:	6106      	str	r6, [r0, #16]
 800c65e:	b005      	add	sp, #20
 800c660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c664:	f843 2b04 	str.w	r2, [r3], #4
 800c668:	e7d8      	b.n	800c61c <__multiply+0x50>
 800c66a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c66e:	f1ba 0f00 	cmp.w	sl, #0
 800c672:	d024      	beq.n	800c6be <__multiply+0xf2>
 800c674:	f104 0e14 	add.w	lr, r4, #20
 800c678:	46a9      	mov	r9, r5
 800c67a:	f04f 0c00 	mov.w	ip, #0
 800c67e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c682:	f8d9 1000 	ldr.w	r1, [r9]
 800c686:	fa1f fb82 	uxth.w	fp, r2
 800c68a:	b289      	uxth	r1, r1
 800c68c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c690:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c694:	f8d9 2000 	ldr.w	r2, [r9]
 800c698:	4461      	add	r1, ip
 800c69a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c69e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c6a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c6a6:	b289      	uxth	r1, r1
 800c6a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c6ac:	4577      	cmp	r7, lr
 800c6ae:	f849 1b04 	str.w	r1, [r9], #4
 800c6b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c6b6:	d8e2      	bhi.n	800c67e <__multiply+0xb2>
 800c6b8:	9a01      	ldr	r2, [sp, #4]
 800c6ba:	f845 c002 	str.w	ip, [r5, r2]
 800c6be:	9a03      	ldr	r2, [sp, #12]
 800c6c0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ca:	d021      	beq.n	800c710 <__multiply+0x144>
 800c6cc:	6829      	ldr	r1, [r5, #0]
 800c6ce:	f104 0c14 	add.w	ip, r4, #20
 800c6d2:	46ae      	mov	lr, r5
 800c6d4:	f04f 0a00 	mov.w	sl, #0
 800c6d8:	f8bc b000 	ldrh.w	fp, [ip]
 800c6dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c6e0:	fb09 220b 	mla	r2, r9, fp, r2
 800c6e4:	4452      	add	r2, sl
 800c6e6:	b289      	uxth	r1, r1
 800c6e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c6ec:	f84e 1b04 	str.w	r1, [lr], #4
 800c6f0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c6f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6f8:	f8be 1000 	ldrh.w	r1, [lr]
 800c6fc:	fb09 110a 	mla	r1, r9, sl, r1
 800c700:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c704:	4567      	cmp	r7, ip
 800c706:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c70a:	d8e5      	bhi.n	800c6d8 <__multiply+0x10c>
 800c70c:	9a01      	ldr	r2, [sp, #4]
 800c70e:	50a9      	str	r1, [r5, r2]
 800c710:	3504      	adds	r5, #4
 800c712:	e799      	b.n	800c648 <__multiply+0x7c>
 800c714:	3e01      	subs	r6, #1
 800c716:	e79b      	b.n	800c650 <__multiply+0x84>
 800c718:	0800df18 	.word	0x0800df18
 800c71c:	0800df29 	.word	0x0800df29

0800c720 <__pow5mult>:
 800c720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c724:	4615      	mov	r5, r2
 800c726:	f012 0203 	ands.w	r2, r2, #3
 800c72a:	4606      	mov	r6, r0
 800c72c:	460f      	mov	r7, r1
 800c72e:	d007      	beq.n	800c740 <__pow5mult+0x20>
 800c730:	4c25      	ldr	r4, [pc, #148]	; (800c7c8 <__pow5mult+0xa8>)
 800c732:	3a01      	subs	r2, #1
 800c734:	2300      	movs	r3, #0
 800c736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c73a:	f7ff fe9d 	bl	800c478 <__multadd>
 800c73e:	4607      	mov	r7, r0
 800c740:	10ad      	asrs	r5, r5, #2
 800c742:	d03d      	beq.n	800c7c0 <__pow5mult+0xa0>
 800c744:	69f4      	ldr	r4, [r6, #28]
 800c746:	b97c      	cbnz	r4, 800c768 <__pow5mult+0x48>
 800c748:	2010      	movs	r0, #16
 800c74a:	f7ff fd7f 	bl	800c24c <malloc>
 800c74e:	4602      	mov	r2, r0
 800c750:	61f0      	str	r0, [r6, #28]
 800c752:	b928      	cbnz	r0, 800c760 <__pow5mult+0x40>
 800c754:	4b1d      	ldr	r3, [pc, #116]	; (800c7cc <__pow5mult+0xac>)
 800c756:	481e      	ldr	r0, [pc, #120]	; (800c7d0 <__pow5mult+0xb0>)
 800c758:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c75c:	f000 fbe4 	bl	800cf28 <__assert_func>
 800c760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c764:	6004      	str	r4, [r0, #0]
 800c766:	60c4      	str	r4, [r0, #12]
 800c768:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c76c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c770:	b94c      	cbnz	r4, 800c786 <__pow5mult+0x66>
 800c772:	f240 2171 	movw	r1, #625	; 0x271
 800c776:	4630      	mov	r0, r6
 800c778:	f7ff ff12 	bl	800c5a0 <__i2b>
 800c77c:	2300      	movs	r3, #0
 800c77e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c782:	4604      	mov	r4, r0
 800c784:	6003      	str	r3, [r0, #0]
 800c786:	f04f 0900 	mov.w	r9, #0
 800c78a:	07eb      	lsls	r3, r5, #31
 800c78c:	d50a      	bpl.n	800c7a4 <__pow5mult+0x84>
 800c78e:	4639      	mov	r1, r7
 800c790:	4622      	mov	r2, r4
 800c792:	4630      	mov	r0, r6
 800c794:	f7ff ff1a 	bl	800c5cc <__multiply>
 800c798:	4639      	mov	r1, r7
 800c79a:	4680      	mov	r8, r0
 800c79c:	4630      	mov	r0, r6
 800c79e:	f7ff fe49 	bl	800c434 <_Bfree>
 800c7a2:	4647      	mov	r7, r8
 800c7a4:	106d      	asrs	r5, r5, #1
 800c7a6:	d00b      	beq.n	800c7c0 <__pow5mult+0xa0>
 800c7a8:	6820      	ldr	r0, [r4, #0]
 800c7aa:	b938      	cbnz	r0, 800c7bc <__pow5mult+0x9c>
 800c7ac:	4622      	mov	r2, r4
 800c7ae:	4621      	mov	r1, r4
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7ff ff0b 	bl	800c5cc <__multiply>
 800c7b6:	6020      	str	r0, [r4, #0]
 800c7b8:	f8c0 9000 	str.w	r9, [r0]
 800c7bc:	4604      	mov	r4, r0
 800c7be:	e7e4      	b.n	800c78a <__pow5mult+0x6a>
 800c7c0:	4638      	mov	r0, r7
 800c7c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7c6:	bf00      	nop
 800c7c8:	0800e078 	.word	0x0800e078
 800c7cc:	0800dea9 	.word	0x0800dea9
 800c7d0:	0800df29 	.word	0x0800df29

0800c7d4 <__lshift>:
 800c7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d8:	460c      	mov	r4, r1
 800c7da:	6849      	ldr	r1, [r1, #4]
 800c7dc:	6923      	ldr	r3, [r4, #16]
 800c7de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7e2:	68a3      	ldr	r3, [r4, #8]
 800c7e4:	4607      	mov	r7, r0
 800c7e6:	4691      	mov	r9, r2
 800c7e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7ec:	f108 0601 	add.w	r6, r8, #1
 800c7f0:	42b3      	cmp	r3, r6
 800c7f2:	db0b      	blt.n	800c80c <__lshift+0x38>
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	f7ff fddd 	bl	800c3b4 <_Balloc>
 800c7fa:	4605      	mov	r5, r0
 800c7fc:	b948      	cbnz	r0, 800c812 <__lshift+0x3e>
 800c7fe:	4602      	mov	r2, r0
 800c800:	4b28      	ldr	r3, [pc, #160]	; (800c8a4 <__lshift+0xd0>)
 800c802:	4829      	ldr	r0, [pc, #164]	; (800c8a8 <__lshift+0xd4>)
 800c804:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c808:	f000 fb8e 	bl	800cf28 <__assert_func>
 800c80c:	3101      	adds	r1, #1
 800c80e:	005b      	lsls	r3, r3, #1
 800c810:	e7ee      	b.n	800c7f0 <__lshift+0x1c>
 800c812:	2300      	movs	r3, #0
 800c814:	f100 0114 	add.w	r1, r0, #20
 800c818:	f100 0210 	add.w	r2, r0, #16
 800c81c:	4618      	mov	r0, r3
 800c81e:	4553      	cmp	r3, sl
 800c820:	db33      	blt.n	800c88a <__lshift+0xb6>
 800c822:	6920      	ldr	r0, [r4, #16]
 800c824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c828:	f104 0314 	add.w	r3, r4, #20
 800c82c:	f019 091f 	ands.w	r9, r9, #31
 800c830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c838:	d02b      	beq.n	800c892 <__lshift+0xbe>
 800c83a:	f1c9 0e20 	rsb	lr, r9, #32
 800c83e:	468a      	mov	sl, r1
 800c840:	2200      	movs	r2, #0
 800c842:	6818      	ldr	r0, [r3, #0]
 800c844:	fa00 f009 	lsl.w	r0, r0, r9
 800c848:	4310      	orrs	r0, r2
 800c84a:	f84a 0b04 	str.w	r0, [sl], #4
 800c84e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c852:	459c      	cmp	ip, r3
 800c854:	fa22 f20e 	lsr.w	r2, r2, lr
 800c858:	d8f3      	bhi.n	800c842 <__lshift+0x6e>
 800c85a:	ebac 0304 	sub.w	r3, ip, r4
 800c85e:	3b15      	subs	r3, #21
 800c860:	f023 0303 	bic.w	r3, r3, #3
 800c864:	3304      	adds	r3, #4
 800c866:	f104 0015 	add.w	r0, r4, #21
 800c86a:	4584      	cmp	ip, r0
 800c86c:	bf38      	it	cc
 800c86e:	2304      	movcc	r3, #4
 800c870:	50ca      	str	r2, [r1, r3]
 800c872:	b10a      	cbz	r2, 800c878 <__lshift+0xa4>
 800c874:	f108 0602 	add.w	r6, r8, #2
 800c878:	3e01      	subs	r6, #1
 800c87a:	4638      	mov	r0, r7
 800c87c:	612e      	str	r6, [r5, #16]
 800c87e:	4621      	mov	r1, r4
 800c880:	f7ff fdd8 	bl	800c434 <_Bfree>
 800c884:	4628      	mov	r0, r5
 800c886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c88a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c88e:	3301      	adds	r3, #1
 800c890:	e7c5      	b.n	800c81e <__lshift+0x4a>
 800c892:	3904      	subs	r1, #4
 800c894:	f853 2b04 	ldr.w	r2, [r3], #4
 800c898:	f841 2f04 	str.w	r2, [r1, #4]!
 800c89c:	459c      	cmp	ip, r3
 800c89e:	d8f9      	bhi.n	800c894 <__lshift+0xc0>
 800c8a0:	e7ea      	b.n	800c878 <__lshift+0xa4>
 800c8a2:	bf00      	nop
 800c8a4:	0800df18 	.word	0x0800df18
 800c8a8:	0800df29 	.word	0x0800df29

0800c8ac <__mcmp>:
 800c8ac:	b530      	push	{r4, r5, lr}
 800c8ae:	6902      	ldr	r2, [r0, #16]
 800c8b0:	690c      	ldr	r4, [r1, #16]
 800c8b2:	1b12      	subs	r2, r2, r4
 800c8b4:	d10e      	bne.n	800c8d4 <__mcmp+0x28>
 800c8b6:	f100 0314 	add.w	r3, r0, #20
 800c8ba:	3114      	adds	r1, #20
 800c8bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c8c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c8c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c8c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c8cc:	42a5      	cmp	r5, r4
 800c8ce:	d003      	beq.n	800c8d8 <__mcmp+0x2c>
 800c8d0:	d305      	bcc.n	800c8de <__mcmp+0x32>
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	bd30      	pop	{r4, r5, pc}
 800c8d8:	4283      	cmp	r3, r0
 800c8da:	d3f3      	bcc.n	800c8c4 <__mcmp+0x18>
 800c8dc:	e7fa      	b.n	800c8d4 <__mcmp+0x28>
 800c8de:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e2:	e7f7      	b.n	800c8d4 <__mcmp+0x28>

0800c8e4 <__mdiff>:
 800c8e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e8:	460c      	mov	r4, r1
 800c8ea:	4606      	mov	r6, r0
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	4690      	mov	r8, r2
 800c8f2:	f7ff ffdb 	bl	800c8ac <__mcmp>
 800c8f6:	1e05      	subs	r5, r0, #0
 800c8f8:	d110      	bne.n	800c91c <__mdiff+0x38>
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	f7ff fd59 	bl	800c3b4 <_Balloc>
 800c902:	b930      	cbnz	r0, 800c912 <__mdiff+0x2e>
 800c904:	4b3a      	ldr	r3, [pc, #232]	; (800c9f0 <__mdiff+0x10c>)
 800c906:	4602      	mov	r2, r0
 800c908:	f240 2137 	movw	r1, #567	; 0x237
 800c90c:	4839      	ldr	r0, [pc, #228]	; (800c9f4 <__mdiff+0x110>)
 800c90e:	f000 fb0b 	bl	800cf28 <__assert_func>
 800c912:	2301      	movs	r3, #1
 800c914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	bfa4      	itt	ge
 800c91e:	4643      	movge	r3, r8
 800c920:	46a0      	movge	r8, r4
 800c922:	4630      	mov	r0, r6
 800c924:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c928:	bfa6      	itte	ge
 800c92a:	461c      	movge	r4, r3
 800c92c:	2500      	movge	r5, #0
 800c92e:	2501      	movlt	r5, #1
 800c930:	f7ff fd40 	bl	800c3b4 <_Balloc>
 800c934:	b920      	cbnz	r0, 800c940 <__mdiff+0x5c>
 800c936:	4b2e      	ldr	r3, [pc, #184]	; (800c9f0 <__mdiff+0x10c>)
 800c938:	4602      	mov	r2, r0
 800c93a:	f240 2145 	movw	r1, #581	; 0x245
 800c93e:	e7e5      	b.n	800c90c <__mdiff+0x28>
 800c940:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c944:	6926      	ldr	r6, [r4, #16]
 800c946:	60c5      	str	r5, [r0, #12]
 800c948:	f104 0914 	add.w	r9, r4, #20
 800c94c:	f108 0514 	add.w	r5, r8, #20
 800c950:	f100 0e14 	add.w	lr, r0, #20
 800c954:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c958:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c95c:	f108 0210 	add.w	r2, r8, #16
 800c960:	46f2      	mov	sl, lr
 800c962:	2100      	movs	r1, #0
 800c964:	f859 3b04 	ldr.w	r3, [r9], #4
 800c968:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c96c:	fa11 f88b 	uxtah	r8, r1, fp
 800c970:	b299      	uxth	r1, r3
 800c972:	0c1b      	lsrs	r3, r3, #16
 800c974:	eba8 0801 	sub.w	r8, r8, r1
 800c978:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c97c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c980:	fa1f f888 	uxth.w	r8, r8
 800c984:	1419      	asrs	r1, r3, #16
 800c986:	454e      	cmp	r6, r9
 800c988:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c98c:	f84a 3b04 	str.w	r3, [sl], #4
 800c990:	d8e8      	bhi.n	800c964 <__mdiff+0x80>
 800c992:	1b33      	subs	r3, r6, r4
 800c994:	3b15      	subs	r3, #21
 800c996:	f023 0303 	bic.w	r3, r3, #3
 800c99a:	3304      	adds	r3, #4
 800c99c:	3415      	adds	r4, #21
 800c99e:	42a6      	cmp	r6, r4
 800c9a0:	bf38      	it	cc
 800c9a2:	2304      	movcc	r3, #4
 800c9a4:	441d      	add	r5, r3
 800c9a6:	4473      	add	r3, lr
 800c9a8:	469e      	mov	lr, r3
 800c9aa:	462e      	mov	r6, r5
 800c9ac:	4566      	cmp	r6, ip
 800c9ae:	d30e      	bcc.n	800c9ce <__mdiff+0xea>
 800c9b0:	f10c 0203 	add.w	r2, ip, #3
 800c9b4:	1b52      	subs	r2, r2, r5
 800c9b6:	f022 0203 	bic.w	r2, r2, #3
 800c9ba:	3d03      	subs	r5, #3
 800c9bc:	45ac      	cmp	ip, r5
 800c9be:	bf38      	it	cc
 800c9c0:	2200      	movcc	r2, #0
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c9c8:	b17a      	cbz	r2, 800c9ea <__mdiff+0x106>
 800c9ca:	6107      	str	r7, [r0, #16]
 800c9cc:	e7a4      	b.n	800c918 <__mdiff+0x34>
 800c9ce:	f856 8b04 	ldr.w	r8, [r6], #4
 800c9d2:	fa11 f288 	uxtah	r2, r1, r8
 800c9d6:	1414      	asrs	r4, r2, #16
 800c9d8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c9dc:	b292      	uxth	r2, r2
 800c9de:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c9e2:	f84e 2b04 	str.w	r2, [lr], #4
 800c9e6:	1421      	asrs	r1, r4, #16
 800c9e8:	e7e0      	b.n	800c9ac <__mdiff+0xc8>
 800c9ea:	3f01      	subs	r7, #1
 800c9ec:	e7ea      	b.n	800c9c4 <__mdiff+0xe0>
 800c9ee:	bf00      	nop
 800c9f0:	0800df18 	.word	0x0800df18
 800c9f4:	0800df29 	.word	0x0800df29

0800c9f8 <__d2b>:
 800c9f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c9fc:	460f      	mov	r7, r1
 800c9fe:	2101      	movs	r1, #1
 800ca00:	ec59 8b10 	vmov	r8, r9, d0
 800ca04:	4616      	mov	r6, r2
 800ca06:	f7ff fcd5 	bl	800c3b4 <_Balloc>
 800ca0a:	4604      	mov	r4, r0
 800ca0c:	b930      	cbnz	r0, 800ca1c <__d2b+0x24>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	4b24      	ldr	r3, [pc, #144]	; (800caa4 <__d2b+0xac>)
 800ca12:	4825      	ldr	r0, [pc, #148]	; (800caa8 <__d2b+0xb0>)
 800ca14:	f240 310f 	movw	r1, #783	; 0x30f
 800ca18:	f000 fa86 	bl	800cf28 <__assert_func>
 800ca1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca24:	bb2d      	cbnz	r5, 800ca72 <__d2b+0x7a>
 800ca26:	9301      	str	r3, [sp, #4]
 800ca28:	f1b8 0300 	subs.w	r3, r8, #0
 800ca2c:	d026      	beq.n	800ca7c <__d2b+0x84>
 800ca2e:	4668      	mov	r0, sp
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	f7ff fd87 	bl	800c544 <__lo0bits>
 800ca36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca3a:	b1e8      	cbz	r0, 800ca78 <__d2b+0x80>
 800ca3c:	f1c0 0320 	rsb	r3, r0, #32
 800ca40:	fa02 f303 	lsl.w	r3, r2, r3
 800ca44:	430b      	orrs	r3, r1
 800ca46:	40c2      	lsrs	r2, r0
 800ca48:	6163      	str	r3, [r4, #20]
 800ca4a:	9201      	str	r2, [sp, #4]
 800ca4c:	9b01      	ldr	r3, [sp, #4]
 800ca4e:	61a3      	str	r3, [r4, #24]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	bf14      	ite	ne
 800ca54:	2202      	movne	r2, #2
 800ca56:	2201      	moveq	r2, #1
 800ca58:	6122      	str	r2, [r4, #16]
 800ca5a:	b1bd      	cbz	r5, 800ca8c <__d2b+0x94>
 800ca5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca60:	4405      	add	r5, r0
 800ca62:	603d      	str	r5, [r7, #0]
 800ca64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca68:	6030      	str	r0, [r6, #0]
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	b003      	add	sp, #12
 800ca6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca76:	e7d6      	b.n	800ca26 <__d2b+0x2e>
 800ca78:	6161      	str	r1, [r4, #20]
 800ca7a:	e7e7      	b.n	800ca4c <__d2b+0x54>
 800ca7c:	a801      	add	r0, sp, #4
 800ca7e:	f7ff fd61 	bl	800c544 <__lo0bits>
 800ca82:	9b01      	ldr	r3, [sp, #4]
 800ca84:	6163      	str	r3, [r4, #20]
 800ca86:	3020      	adds	r0, #32
 800ca88:	2201      	movs	r2, #1
 800ca8a:	e7e5      	b.n	800ca58 <__d2b+0x60>
 800ca8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ca94:	6038      	str	r0, [r7, #0]
 800ca96:	6918      	ldr	r0, [r3, #16]
 800ca98:	f7ff fd34 	bl	800c504 <__hi0bits>
 800ca9c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800caa0:	e7e2      	b.n	800ca68 <__d2b+0x70>
 800caa2:	bf00      	nop
 800caa4:	0800df18 	.word	0x0800df18
 800caa8:	0800df29 	.word	0x0800df29

0800caac <__ssputs_r>:
 800caac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab0:	688e      	ldr	r6, [r1, #8]
 800cab2:	461f      	mov	r7, r3
 800cab4:	42be      	cmp	r6, r7
 800cab6:	680b      	ldr	r3, [r1, #0]
 800cab8:	4682      	mov	sl, r0
 800caba:	460c      	mov	r4, r1
 800cabc:	4690      	mov	r8, r2
 800cabe:	d82c      	bhi.n	800cb1a <__ssputs_r+0x6e>
 800cac0:	898a      	ldrh	r2, [r1, #12]
 800cac2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cac6:	d026      	beq.n	800cb16 <__ssputs_r+0x6a>
 800cac8:	6965      	ldr	r5, [r4, #20]
 800caca:	6909      	ldr	r1, [r1, #16]
 800cacc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cad0:	eba3 0901 	sub.w	r9, r3, r1
 800cad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cad8:	1c7b      	adds	r3, r7, #1
 800cada:	444b      	add	r3, r9
 800cadc:	106d      	asrs	r5, r5, #1
 800cade:	429d      	cmp	r5, r3
 800cae0:	bf38      	it	cc
 800cae2:	461d      	movcc	r5, r3
 800cae4:	0553      	lsls	r3, r2, #21
 800cae6:	d527      	bpl.n	800cb38 <__ssputs_r+0x8c>
 800cae8:	4629      	mov	r1, r5
 800caea:	f7ff fbd7 	bl	800c29c <_malloc_r>
 800caee:	4606      	mov	r6, r0
 800caf0:	b360      	cbz	r0, 800cb4c <__ssputs_r+0xa0>
 800caf2:	6921      	ldr	r1, [r4, #16]
 800caf4:	464a      	mov	r2, r9
 800caf6:	f000 fa09 	bl	800cf0c <memcpy>
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb04:	81a3      	strh	r3, [r4, #12]
 800cb06:	6126      	str	r6, [r4, #16]
 800cb08:	6165      	str	r5, [r4, #20]
 800cb0a:	444e      	add	r6, r9
 800cb0c:	eba5 0509 	sub.w	r5, r5, r9
 800cb10:	6026      	str	r6, [r4, #0]
 800cb12:	60a5      	str	r5, [r4, #8]
 800cb14:	463e      	mov	r6, r7
 800cb16:	42be      	cmp	r6, r7
 800cb18:	d900      	bls.n	800cb1c <__ssputs_r+0x70>
 800cb1a:	463e      	mov	r6, r7
 800cb1c:	6820      	ldr	r0, [r4, #0]
 800cb1e:	4632      	mov	r2, r6
 800cb20:	4641      	mov	r1, r8
 800cb22:	f000 f9c9 	bl	800ceb8 <memmove>
 800cb26:	68a3      	ldr	r3, [r4, #8]
 800cb28:	1b9b      	subs	r3, r3, r6
 800cb2a:	60a3      	str	r3, [r4, #8]
 800cb2c:	6823      	ldr	r3, [r4, #0]
 800cb2e:	4433      	add	r3, r6
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	2000      	movs	r0, #0
 800cb34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb38:	462a      	mov	r2, r5
 800cb3a:	f000 fa3b 	bl	800cfb4 <_realloc_r>
 800cb3e:	4606      	mov	r6, r0
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d1e0      	bne.n	800cb06 <__ssputs_r+0x5a>
 800cb44:	6921      	ldr	r1, [r4, #16]
 800cb46:	4650      	mov	r0, sl
 800cb48:	f7ff fb34 	bl	800c1b4 <_free_r>
 800cb4c:	230c      	movs	r3, #12
 800cb4e:	f8ca 3000 	str.w	r3, [sl]
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5e:	e7e9      	b.n	800cb34 <__ssputs_r+0x88>

0800cb60 <_svfiprintf_r>:
 800cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb64:	4698      	mov	r8, r3
 800cb66:	898b      	ldrh	r3, [r1, #12]
 800cb68:	061b      	lsls	r3, r3, #24
 800cb6a:	b09d      	sub	sp, #116	; 0x74
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	460d      	mov	r5, r1
 800cb70:	4614      	mov	r4, r2
 800cb72:	d50e      	bpl.n	800cb92 <_svfiprintf_r+0x32>
 800cb74:	690b      	ldr	r3, [r1, #16]
 800cb76:	b963      	cbnz	r3, 800cb92 <_svfiprintf_r+0x32>
 800cb78:	2140      	movs	r1, #64	; 0x40
 800cb7a:	f7ff fb8f 	bl	800c29c <_malloc_r>
 800cb7e:	6028      	str	r0, [r5, #0]
 800cb80:	6128      	str	r0, [r5, #16]
 800cb82:	b920      	cbnz	r0, 800cb8e <_svfiprintf_r+0x2e>
 800cb84:	230c      	movs	r3, #12
 800cb86:	603b      	str	r3, [r7, #0]
 800cb88:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8c:	e0d0      	b.n	800cd30 <_svfiprintf_r+0x1d0>
 800cb8e:	2340      	movs	r3, #64	; 0x40
 800cb90:	616b      	str	r3, [r5, #20]
 800cb92:	2300      	movs	r3, #0
 800cb94:	9309      	str	r3, [sp, #36]	; 0x24
 800cb96:	2320      	movs	r3, #32
 800cb98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cba0:	2330      	movs	r3, #48	; 0x30
 800cba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd48 <_svfiprintf_r+0x1e8>
 800cba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbaa:	f04f 0901 	mov.w	r9, #1
 800cbae:	4623      	mov	r3, r4
 800cbb0:	469a      	mov	sl, r3
 800cbb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbb6:	b10a      	cbz	r2, 800cbbc <_svfiprintf_r+0x5c>
 800cbb8:	2a25      	cmp	r2, #37	; 0x25
 800cbba:	d1f9      	bne.n	800cbb0 <_svfiprintf_r+0x50>
 800cbbc:	ebba 0b04 	subs.w	fp, sl, r4
 800cbc0:	d00b      	beq.n	800cbda <_svfiprintf_r+0x7a>
 800cbc2:	465b      	mov	r3, fp
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	4638      	mov	r0, r7
 800cbca:	f7ff ff6f 	bl	800caac <__ssputs_r>
 800cbce:	3001      	adds	r0, #1
 800cbd0:	f000 80a9 	beq.w	800cd26 <_svfiprintf_r+0x1c6>
 800cbd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbd6:	445a      	add	r2, fp
 800cbd8:	9209      	str	r2, [sp, #36]	; 0x24
 800cbda:	f89a 3000 	ldrb.w	r3, [sl]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f000 80a1 	beq.w	800cd26 <_svfiprintf_r+0x1c6>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbee:	f10a 0a01 	add.w	sl, sl, #1
 800cbf2:	9304      	str	r3, [sp, #16]
 800cbf4:	9307      	str	r3, [sp, #28]
 800cbf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbfa:	931a      	str	r3, [sp, #104]	; 0x68
 800cbfc:	4654      	mov	r4, sl
 800cbfe:	2205      	movs	r2, #5
 800cc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc04:	4850      	ldr	r0, [pc, #320]	; (800cd48 <_svfiprintf_r+0x1e8>)
 800cc06:	f7f3 fae3 	bl	80001d0 <memchr>
 800cc0a:	9a04      	ldr	r2, [sp, #16]
 800cc0c:	b9d8      	cbnz	r0, 800cc46 <_svfiprintf_r+0xe6>
 800cc0e:	06d0      	lsls	r0, r2, #27
 800cc10:	bf44      	itt	mi
 800cc12:	2320      	movmi	r3, #32
 800cc14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc18:	0711      	lsls	r1, r2, #28
 800cc1a:	bf44      	itt	mi
 800cc1c:	232b      	movmi	r3, #43	; 0x2b
 800cc1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc22:	f89a 3000 	ldrb.w	r3, [sl]
 800cc26:	2b2a      	cmp	r3, #42	; 0x2a
 800cc28:	d015      	beq.n	800cc56 <_svfiprintf_r+0xf6>
 800cc2a:	9a07      	ldr	r2, [sp, #28]
 800cc2c:	4654      	mov	r4, sl
 800cc2e:	2000      	movs	r0, #0
 800cc30:	f04f 0c0a 	mov.w	ip, #10
 800cc34:	4621      	mov	r1, r4
 800cc36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc3a:	3b30      	subs	r3, #48	; 0x30
 800cc3c:	2b09      	cmp	r3, #9
 800cc3e:	d94d      	bls.n	800ccdc <_svfiprintf_r+0x17c>
 800cc40:	b1b0      	cbz	r0, 800cc70 <_svfiprintf_r+0x110>
 800cc42:	9207      	str	r2, [sp, #28]
 800cc44:	e014      	b.n	800cc70 <_svfiprintf_r+0x110>
 800cc46:	eba0 0308 	sub.w	r3, r0, r8
 800cc4a:	fa09 f303 	lsl.w	r3, r9, r3
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	9304      	str	r3, [sp, #16]
 800cc52:	46a2      	mov	sl, r4
 800cc54:	e7d2      	b.n	800cbfc <_svfiprintf_r+0x9c>
 800cc56:	9b03      	ldr	r3, [sp, #12]
 800cc58:	1d19      	adds	r1, r3, #4
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	9103      	str	r1, [sp, #12]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	bfbb      	ittet	lt
 800cc62:	425b      	neglt	r3, r3
 800cc64:	f042 0202 	orrlt.w	r2, r2, #2
 800cc68:	9307      	strge	r3, [sp, #28]
 800cc6a:	9307      	strlt	r3, [sp, #28]
 800cc6c:	bfb8      	it	lt
 800cc6e:	9204      	strlt	r2, [sp, #16]
 800cc70:	7823      	ldrb	r3, [r4, #0]
 800cc72:	2b2e      	cmp	r3, #46	; 0x2e
 800cc74:	d10c      	bne.n	800cc90 <_svfiprintf_r+0x130>
 800cc76:	7863      	ldrb	r3, [r4, #1]
 800cc78:	2b2a      	cmp	r3, #42	; 0x2a
 800cc7a:	d134      	bne.n	800cce6 <_svfiprintf_r+0x186>
 800cc7c:	9b03      	ldr	r3, [sp, #12]
 800cc7e:	1d1a      	adds	r2, r3, #4
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	9203      	str	r2, [sp, #12]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	bfb8      	it	lt
 800cc88:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc8c:	3402      	adds	r4, #2
 800cc8e:	9305      	str	r3, [sp, #20]
 800cc90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cd58 <_svfiprintf_r+0x1f8>
 800cc94:	7821      	ldrb	r1, [r4, #0]
 800cc96:	2203      	movs	r2, #3
 800cc98:	4650      	mov	r0, sl
 800cc9a:	f7f3 fa99 	bl	80001d0 <memchr>
 800cc9e:	b138      	cbz	r0, 800ccb0 <_svfiprintf_r+0x150>
 800cca0:	9b04      	ldr	r3, [sp, #16]
 800cca2:	eba0 000a 	sub.w	r0, r0, sl
 800cca6:	2240      	movs	r2, #64	; 0x40
 800cca8:	4082      	lsls	r2, r0
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	3401      	adds	r4, #1
 800ccae:	9304      	str	r3, [sp, #16]
 800ccb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb4:	4825      	ldr	r0, [pc, #148]	; (800cd4c <_svfiprintf_r+0x1ec>)
 800ccb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccba:	2206      	movs	r2, #6
 800ccbc:	f7f3 fa88 	bl	80001d0 <memchr>
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d038      	beq.n	800cd36 <_svfiprintf_r+0x1d6>
 800ccc4:	4b22      	ldr	r3, [pc, #136]	; (800cd50 <_svfiprintf_r+0x1f0>)
 800ccc6:	bb1b      	cbnz	r3, 800cd10 <_svfiprintf_r+0x1b0>
 800ccc8:	9b03      	ldr	r3, [sp, #12]
 800ccca:	3307      	adds	r3, #7
 800cccc:	f023 0307 	bic.w	r3, r3, #7
 800ccd0:	3308      	adds	r3, #8
 800ccd2:	9303      	str	r3, [sp, #12]
 800ccd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd6:	4433      	add	r3, r6
 800ccd8:	9309      	str	r3, [sp, #36]	; 0x24
 800ccda:	e768      	b.n	800cbae <_svfiprintf_r+0x4e>
 800ccdc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cce0:	460c      	mov	r4, r1
 800cce2:	2001      	movs	r0, #1
 800cce4:	e7a6      	b.n	800cc34 <_svfiprintf_r+0xd4>
 800cce6:	2300      	movs	r3, #0
 800cce8:	3401      	adds	r4, #1
 800ccea:	9305      	str	r3, [sp, #20]
 800ccec:	4619      	mov	r1, r3
 800ccee:	f04f 0c0a 	mov.w	ip, #10
 800ccf2:	4620      	mov	r0, r4
 800ccf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccf8:	3a30      	subs	r2, #48	; 0x30
 800ccfa:	2a09      	cmp	r2, #9
 800ccfc:	d903      	bls.n	800cd06 <_svfiprintf_r+0x1a6>
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0c6      	beq.n	800cc90 <_svfiprintf_r+0x130>
 800cd02:	9105      	str	r1, [sp, #20]
 800cd04:	e7c4      	b.n	800cc90 <_svfiprintf_r+0x130>
 800cd06:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e7f0      	b.n	800ccf2 <_svfiprintf_r+0x192>
 800cd10:	ab03      	add	r3, sp, #12
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	462a      	mov	r2, r5
 800cd16:	4b0f      	ldr	r3, [pc, #60]	; (800cd54 <_svfiprintf_r+0x1f4>)
 800cd18:	a904      	add	r1, sp, #16
 800cd1a:	4638      	mov	r0, r7
 800cd1c:	f7fd fe78 	bl	800aa10 <_printf_float>
 800cd20:	1c42      	adds	r2, r0, #1
 800cd22:	4606      	mov	r6, r0
 800cd24:	d1d6      	bne.n	800ccd4 <_svfiprintf_r+0x174>
 800cd26:	89ab      	ldrh	r3, [r5, #12]
 800cd28:	065b      	lsls	r3, r3, #25
 800cd2a:	f53f af2d 	bmi.w	800cb88 <_svfiprintf_r+0x28>
 800cd2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd30:	b01d      	add	sp, #116	; 0x74
 800cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd36:	ab03      	add	r3, sp, #12
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	462a      	mov	r2, r5
 800cd3c:	4b05      	ldr	r3, [pc, #20]	; (800cd54 <_svfiprintf_r+0x1f4>)
 800cd3e:	a904      	add	r1, sp, #16
 800cd40:	4638      	mov	r0, r7
 800cd42:	f7fe f909 	bl	800af58 <_printf_i>
 800cd46:	e7eb      	b.n	800cd20 <_svfiprintf_r+0x1c0>
 800cd48:	0800e084 	.word	0x0800e084
 800cd4c:	0800e08e 	.word	0x0800e08e
 800cd50:	0800aa11 	.word	0x0800aa11
 800cd54:	0800caad 	.word	0x0800caad
 800cd58:	0800e08a 	.word	0x0800e08a

0800cd5c <__sflush_r>:
 800cd5c:	898a      	ldrh	r2, [r1, #12]
 800cd5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd62:	4605      	mov	r5, r0
 800cd64:	0710      	lsls	r0, r2, #28
 800cd66:	460c      	mov	r4, r1
 800cd68:	d458      	bmi.n	800ce1c <__sflush_r+0xc0>
 800cd6a:	684b      	ldr	r3, [r1, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	dc05      	bgt.n	800cd7c <__sflush_r+0x20>
 800cd70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	dc02      	bgt.n	800cd7c <__sflush_r+0x20>
 800cd76:	2000      	movs	r0, #0
 800cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd7e:	2e00      	cmp	r6, #0
 800cd80:	d0f9      	beq.n	800cd76 <__sflush_r+0x1a>
 800cd82:	2300      	movs	r3, #0
 800cd84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd88:	682f      	ldr	r7, [r5, #0]
 800cd8a:	6a21      	ldr	r1, [r4, #32]
 800cd8c:	602b      	str	r3, [r5, #0]
 800cd8e:	d032      	beq.n	800cdf6 <__sflush_r+0x9a>
 800cd90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd92:	89a3      	ldrh	r3, [r4, #12]
 800cd94:	075a      	lsls	r2, r3, #29
 800cd96:	d505      	bpl.n	800cda4 <__sflush_r+0x48>
 800cd98:	6863      	ldr	r3, [r4, #4]
 800cd9a:	1ac0      	subs	r0, r0, r3
 800cd9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd9e:	b10b      	cbz	r3, 800cda4 <__sflush_r+0x48>
 800cda0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cda2:	1ac0      	subs	r0, r0, r3
 800cda4:	2300      	movs	r3, #0
 800cda6:	4602      	mov	r2, r0
 800cda8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdaa:	6a21      	ldr	r1, [r4, #32]
 800cdac:	4628      	mov	r0, r5
 800cdae:	47b0      	blx	r6
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	89a3      	ldrh	r3, [r4, #12]
 800cdb4:	d106      	bne.n	800cdc4 <__sflush_r+0x68>
 800cdb6:	6829      	ldr	r1, [r5, #0]
 800cdb8:	291d      	cmp	r1, #29
 800cdba:	d82b      	bhi.n	800ce14 <__sflush_r+0xb8>
 800cdbc:	4a29      	ldr	r2, [pc, #164]	; (800ce64 <__sflush_r+0x108>)
 800cdbe:	410a      	asrs	r2, r1
 800cdc0:	07d6      	lsls	r6, r2, #31
 800cdc2:	d427      	bmi.n	800ce14 <__sflush_r+0xb8>
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	6062      	str	r2, [r4, #4]
 800cdc8:	04d9      	lsls	r1, r3, #19
 800cdca:	6922      	ldr	r2, [r4, #16]
 800cdcc:	6022      	str	r2, [r4, #0]
 800cdce:	d504      	bpl.n	800cdda <__sflush_r+0x7e>
 800cdd0:	1c42      	adds	r2, r0, #1
 800cdd2:	d101      	bne.n	800cdd8 <__sflush_r+0x7c>
 800cdd4:	682b      	ldr	r3, [r5, #0]
 800cdd6:	b903      	cbnz	r3, 800cdda <__sflush_r+0x7e>
 800cdd8:	6560      	str	r0, [r4, #84]	; 0x54
 800cdda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cddc:	602f      	str	r7, [r5, #0]
 800cdde:	2900      	cmp	r1, #0
 800cde0:	d0c9      	beq.n	800cd76 <__sflush_r+0x1a>
 800cde2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cde6:	4299      	cmp	r1, r3
 800cde8:	d002      	beq.n	800cdf0 <__sflush_r+0x94>
 800cdea:	4628      	mov	r0, r5
 800cdec:	f7ff f9e2 	bl	800c1b4 <_free_r>
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	6360      	str	r0, [r4, #52]	; 0x34
 800cdf4:	e7c0      	b.n	800cd78 <__sflush_r+0x1c>
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	47b0      	blx	r6
 800cdfc:	1c41      	adds	r1, r0, #1
 800cdfe:	d1c8      	bne.n	800cd92 <__sflush_r+0x36>
 800ce00:	682b      	ldr	r3, [r5, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d0c5      	beq.n	800cd92 <__sflush_r+0x36>
 800ce06:	2b1d      	cmp	r3, #29
 800ce08:	d001      	beq.n	800ce0e <__sflush_r+0xb2>
 800ce0a:	2b16      	cmp	r3, #22
 800ce0c:	d101      	bne.n	800ce12 <__sflush_r+0xb6>
 800ce0e:	602f      	str	r7, [r5, #0]
 800ce10:	e7b1      	b.n	800cd76 <__sflush_r+0x1a>
 800ce12:	89a3      	ldrh	r3, [r4, #12]
 800ce14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce18:	81a3      	strh	r3, [r4, #12]
 800ce1a:	e7ad      	b.n	800cd78 <__sflush_r+0x1c>
 800ce1c:	690f      	ldr	r7, [r1, #16]
 800ce1e:	2f00      	cmp	r7, #0
 800ce20:	d0a9      	beq.n	800cd76 <__sflush_r+0x1a>
 800ce22:	0793      	lsls	r3, r2, #30
 800ce24:	680e      	ldr	r6, [r1, #0]
 800ce26:	bf08      	it	eq
 800ce28:	694b      	ldreq	r3, [r1, #20]
 800ce2a:	600f      	str	r7, [r1, #0]
 800ce2c:	bf18      	it	ne
 800ce2e:	2300      	movne	r3, #0
 800ce30:	eba6 0807 	sub.w	r8, r6, r7
 800ce34:	608b      	str	r3, [r1, #8]
 800ce36:	f1b8 0f00 	cmp.w	r8, #0
 800ce3a:	dd9c      	ble.n	800cd76 <__sflush_r+0x1a>
 800ce3c:	6a21      	ldr	r1, [r4, #32]
 800ce3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce40:	4643      	mov	r3, r8
 800ce42:	463a      	mov	r2, r7
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b0      	blx	r6
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	dc06      	bgt.n	800ce5a <__sflush_r+0xfe>
 800ce4c:	89a3      	ldrh	r3, [r4, #12]
 800ce4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce52:	81a3      	strh	r3, [r4, #12]
 800ce54:	f04f 30ff 	mov.w	r0, #4294967295
 800ce58:	e78e      	b.n	800cd78 <__sflush_r+0x1c>
 800ce5a:	4407      	add	r7, r0
 800ce5c:	eba8 0800 	sub.w	r8, r8, r0
 800ce60:	e7e9      	b.n	800ce36 <__sflush_r+0xda>
 800ce62:	bf00      	nop
 800ce64:	dfbffffe 	.word	0xdfbffffe

0800ce68 <_fflush_r>:
 800ce68:	b538      	push	{r3, r4, r5, lr}
 800ce6a:	690b      	ldr	r3, [r1, #16]
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	460c      	mov	r4, r1
 800ce70:	b913      	cbnz	r3, 800ce78 <_fflush_r+0x10>
 800ce72:	2500      	movs	r5, #0
 800ce74:	4628      	mov	r0, r5
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	b118      	cbz	r0, 800ce82 <_fflush_r+0x1a>
 800ce7a:	6a03      	ldr	r3, [r0, #32]
 800ce7c:	b90b      	cbnz	r3, 800ce82 <_fflush_r+0x1a>
 800ce7e:	f7fe fa07 	bl	800b290 <__sinit>
 800ce82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d0f3      	beq.n	800ce72 <_fflush_r+0xa>
 800ce8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce8c:	07d0      	lsls	r0, r2, #31
 800ce8e:	d404      	bmi.n	800ce9a <_fflush_r+0x32>
 800ce90:	0599      	lsls	r1, r3, #22
 800ce92:	d402      	bmi.n	800ce9a <_fflush_r+0x32>
 800ce94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce96:	f7fe fb11 	bl	800b4bc <__retarget_lock_acquire_recursive>
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	4621      	mov	r1, r4
 800ce9e:	f7ff ff5d 	bl	800cd5c <__sflush_r>
 800cea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cea4:	07da      	lsls	r2, r3, #31
 800cea6:	4605      	mov	r5, r0
 800cea8:	d4e4      	bmi.n	800ce74 <_fflush_r+0xc>
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	059b      	lsls	r3, r3, #22
 800ceae:	d4e1      	bmi.n	800ce74 <_fflush_r+0xc>
 800ceb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceb2:	f7fe fb04 	bl	800b4be <__retarget_lock_release_recursive>
 800ceb6:	e7dd      	b.n	800ce74 <_fflush_r+0xc>

0800ceb8 <memmove>:
 800ceb8:	4288      	cmp	r0, r1
 800ceba:	b510      	push	{r4, lr}
 800cebc:	eb01 0402 	add.w	r4, r1, r2
 800cec0:	d902      	bls.n	800cec8 <memmove+0x10>
 800cec2:	4284      	cmp	r4, r0
 800cec4:	4623      	mov	r3, r4
 800cec6:	d807      	bhi.n	800ced8 <memmove+0x20>
 800cec8:	1e43      	subs	r3, r0, #1
 800ceca:	42a1      	cmp	r1, r4
 800cecc:	d008      	beq.n	800cee0 <memmove+0x28>
 800cece:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ced2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ced6:	e7f8      	b.n	800ceca <memmove+0x12>
 800ced8:	4402      	add	r2, r0
 800ceda:	4601      	mov	r1, r0
 800cedc:	428a      	cmp	r2, r1
 800cede:	d100      	bne.n	800cee2 <memmove+0x2a>
 800cee0:	bd10      	pop	{r4, pc}
 800cee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ceea:	e7f7      	b.n	800cedc <memmove+0x24>

0800ceec <_sbrk_r>:
 800ceec:	b538      	push	{r3, r4, r5, lr}
 800ceee:	4d06      	ldr	r5, [pc, #24]	; (800cf08 <_sbrk_r+0x1c>)
 800cef0:	2300      	movs	r3, #0
 800cef2:	4604      	mov	r4, r0
 800cef4:	4608      	mov	r0, r1
 800cef6:	602b      	str	r3, [r5, #0]
 800cef8:	f7f7 fb28 	bl	800454c <_sbrk>
 800cefc:	1c43      	adds	r3, r0, #1
 800cefe:	d102      	bne.n	800cf06 <_sbrk_r+0x1a>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	b103      	cbz	r3, 800cf06 <_sbrk_r+0x1a>
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	bd38      	pop	{r3, r4, r5, pc}
 800cf08:	20001eec 	.word	0x20001eec

0800cf0c <memcpy>:
 800cf0c:	440a      	add	r2, r1
 800cf0e:	4291      	cmp	r1, r2
 800cf10:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf14:	d100      	bne.n	800cf18 <memcpy+0xc>
 800cf16:	4770      	bx	lr
 800cf18:	b510      	push	{r4, lr}
 800cf1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf22:	4291      	cmp	r1, r2
 800cf24:	d1f9      	bne.n	800cf1a <memcpy+0xe>
 800cf26:	bd10      	pop	{r4, pc}

0800cf28 <__assert_func>:
 800cf28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf2a:	4614      	mov	r4, r2
 800cf2c:	461a      	mov	r2, r3
 800cf2e:	4b09      	ldr	r3, [pc, #36]	; (800cf54 <__assert_func+0x2c>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4605      	mov	r5, r0
 800cf34:	68d8      	ldr	r0, [r3, #12]
 800cf36:	b14c      	cbz	r4, 800cf4c <__assert_func+0x24>
 800cf38:	4b07      	ldr	r3, [pc, #28]	; (800cf58 <__assert_func+0x30>)
 800cf3a:	9100      	str	r1, [sp, #0]
 800cf3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf40:	4906      	ldr	r1, [pc, #24]	; (800cf5c <__assert_func+0x34>)
 800cf42:	462b      	mov	r3, r5
 800cf44:	f000 f872 	bl	800d02c <fiprintf>
 800cf48:	f000 f882 	bl	800d050 <abort>
 800cf4c:	4b04      	ldr	r3, [pc, #16]	; (800cf60 <__assert_func+0x38>)
 800cf4e:	461c      	mov	r4, r3
 800cf50:	e7f3      	b.n	800cf3a <__assert_func+0x12>
 800cf52:	bf00      	nop
 800cf54:	2000006c 	.word	0x2000006c
 800cf58:	0800e09f 	.word	0x0800e09f
 800cf5c:	0800e0ac 	.word	0x0800e0ac
 800cf60:	0800e0da 	.word	0x0800e0da

0800cf64 <_calloc_r>:
 800cf64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf66:	fba1 2402 	umull	r2, r4, r1, r2
 800cf6a:	b94c      	cbnz	r4, 800cf80 <_calloc_r+0x1c>
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	9201      	str	r2, [sp, #4]
 800cf70:	f7ff f994 	bl	800c29c <_malloc_r>
 800cf74:	9a01      	ldr	r2, [sp, #4]
 800cf76:	4605      	mov	r5, r0
 800cf78:	b930      	cbnz	r0, 800cf88 <_calloc_r+0x24>
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	b003      	add	sp, #12
 800cf7e:	bd30      	pop	{r4, r5, pc}
 800cf80:	220c      	movs	r2, #12
 800cf82:	6002      	str	r2, [r0, #0]
 800cf84:	2500      	movs	r5, #0
 800cf86:	e7f8      	b.n	800cf7a <_calloc_r+0x16>
 800cf88:	4621      	mov	r1, r4
 800cf8a:	f7fe fa1b 	bl	800b3c4 <memset>
 800cf8e:	e7f4      	b.n	800cf7a <_calloc_r+0x16>

0800cf90 <__ascii_mbtowc>:
 800cf90:	b082      	sub	sp, #8
 800cf92:	b901      	cbnz	r1, 800cf96 <__ascii_mbtowc+0x6>
 800cf94:	a901      	add	r1, sp, #4
 800cf96:	b142      	cbz	r2, 800cfaa <__ascii_mbtowc+0x1a>
 800cf98:	b14b      	cbz	r3, 800cfae <__ascii_mbtowc+0x1e>
 800cf9a:	7813      	ldrb	r3, [r2, #0]
 800cf9c:	600b      	str	r3, [r1, #0]
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	1e10      	subs	r0, r2, #0
 800cfa2:	bf18      	it	ne
 800cfa4:	2001      	movne	r0, #1
 800cfa6:	b002      	add	sp, #8
 800cfa8:	4770      	bx	lr
 800cfaa:	4610      	mov	r0, r2
 800cfac:	e7fb      	b.n	800cfa6 <__ascii_mbtowc+0x16>
 800cfae:	f06f 0001 	mvn.w	r0, #1
 800cfb2:	e7f8      	b.n	800cfa6 <__ascii_mbtowc+0x16>

0800cfb4 <_realloc_r>:
 800cfb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb8:	4680      	mov	r8, r0
 800cfba:	4614      	mov	r4, r2
 800cfbc:	460e      	mov	r6, r1
 800cfbe:	b921      	cbnz	r1, 800cfca <_realloc_r+0x16>
 800cfc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	f7ff b969 	b.w	800c29c <_malloc_r>
 800cfca:	b92a      	cbnz	r2, 800cfd8 <_realloc_r+0x24>
 800cfcc:	f7ff f8f2 	bl	800c1b4 <_free_r>
 800cfd0:	4625      	mov	r5, r4
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd8:	f000 f841 	bl	800d05e <_malloc_usable_size_r>
 800cfdc:	4284      	cmp	r4, r0
 800cfde:	4607      	mov	r7, r0
 800cfe0:	d802      	bhi.n	800cfe8 <_realloc_r+0x34>
 800cfe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfe6:	d812      	bhi.n	800d00e <_realloc_r+0x5a>
 800cfe8:	4621      	mov	r1, r4
 800cfea:	4640      	mov	r0, r8
 800cfec:	f7ff f956 	bl	800c29c <_malloc_r>
 800cff0:	4605      	mov	r5, r0
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d0ed      	beq.n	800cfd2 <_realloc_r+0x1e>
 800cff6:	42bc      	cmp	r4, r7
 800cff8:	4622      	mov	r2, r4
 800cffa:	4631      	mov	r1, r6
 800cffc:	bf28      	it	cs
 800cffe:	463a      	movcs	r2, r7
 800d000:	f7ff ff84 	bl	800cf0c <memcpy>
 800d004:	4631      	mov	r1, r6
 800d006:	4640      	mov	r0, r8
 800d008:	f7ff f8d4 	bl	800c1b4 <_free_r>
 800d00c:	e7e1      	b.n	800cfd2 <_realloc_r+0x1e>
 800d00e:	4635      	mov	r5, r6
 800d010:	e7df      	b.n	800cfd2 <_realloc_r+0x1e>

0800d012 <__ascii_wctomb>:
 800d012:	b149      	cbz	r1, 800d028 <__ascii_wctomb+0x16>
 800d014:	2aff      	cmp	r2, #255	; 0xff
 800d016:	bf85      	ittet	hi
 800d018:	238a      	movhi	r3, #138	; 0x8a
 800d01a:	6003      	strhi	r3, [r0, #0]
 800d01c:	700a      	strbls	r2, [r1, #0]
 800d01e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d022:	bf98      	it	ls
 800d024:	2001      	movls	r0, #1
 800d026:	4770      	bx	lr
 800d028:	4608      	mov	r0, r1
 800d02a:	4770      	bx	lr

0800d02c <fiprintf>:
 800d02c:	b40e      	push	{r1, r2, r3}
 800d02e:	b503      	push	{r0, r1, lr}
 800d030:	4601      	mov	r1, r0
 800d032:	ab03      	add	r3, sp, #12
 800d034:	4805      	ldr	r0, [pc, #20]	; (800d04c <fiprintf+0x20>)
 800d036:	f853 2b04 	ldr.w	r2, [r3], #4
 800d03a:	6800      	ldr	r0, [r0, #0]
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	f000 f83f 	bl	800d0c0 <_vfiprintf_r>
 800d042:	b002      	add	sp, #8
 800d044:	f85d eb04 	ldr.w	lr, [sp], #4
 800d048:	b003      	add	sp, #12
 800d04a:	4770      	bx	lr
 800d04c:	2000006c 	.word	0x2000006c

0800d050 <abort>:
 800d050:	b508      	push	{r3, lr}
 800d052:	2006      	movs	r0, #6
 800d054:	f000 fa0c 	bl	800d470 <raise>
 800d058:	2001      	movs	r0, #1
 800d05a:	f7f7 fa47 	bl	80044ec <_exit>

0800d05e <_malloc_usable_size_r>:
 800d05e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d062:	1f18      	subs	r0, r3, #4
 800d064:	2b00      	cmp	r3, #0
 800d066:	bfbc      	itt	lt
 800d068:	580b      	ldrlt	r3, [r1, r0]
 800d06a:	18c0      	addlt	r0, r0, r3
 800d06c:	4770      	bx	lr

0800d06e <__sfputc_r>:
 800d06e:	6893      	ldr	r3, [r2, #8]
 800d070:	3b01      	subs	r3, #1
 800d072:	2b00      	cmp	r3, #0
 800d074:	b410      	push	{r4}
 800d076:	6093      	str	r3, [r2, #8]
 800d078:	da08      	bge.n	800d08c <__sfputc_r+0x1e>
 800d07a:	6994      	ldr	r4, [r2, #24]
 800d07c:	42a3      	cmp	r3, r4
 800d07e:	db01      	blt.n	800d084 <__sfputc_r+0x16>
 800d080:	290a      	cmp	r1, #10
 800d082:	d103      	bne.n	800d08c <__sfputc_r+0x1e>
 800d084:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d088:	f000 b934 	b.w	800d2f4 <__swbuf_r>
 800d08c:	6813      	ldr	r3, [r2, #0]
 800d08e:	1c58      	adds	r0, r3, #1
 800d090:	6010      	str	r0, [r2, #0]
 800d092:	7019      	strb	r1, [r3, #0]
 800d094:	4608      	mov	r0, r1
 800d096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <__sfputs_r>:
 800d09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09e:	4606      	mov	r6, r0
 800d0a0:	460f      	mov	r7, r1
 800d0a2:	4614      	mov	r4, r2
 800d0a4:	18d5      	adds	r5, r2, r3
 800d0a6:	42ac      	cmp	r4, r5
 800d0a8:	d101      	bne.n	800d0ae <__sfputs_r+0x12>
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	e007      	b.n	800d0be <__sfputs_r+0x22>
 800d0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b2:	463a      	mov	r2, r7
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	f7ff ffda 	bl	800d06e <__sfputc_r>
 800d0ba:	1c43      	adds	r3, r0, #1
 800d0bc:	d1f3      	bne.n	800d0a6 <__sfputs_r+0xa>
 800d0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0c0 <_vfiprintf_r>:
 800d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	460d      	mov	r5, r1
 800d0c6:	b09d      	sub	sp, #116	; 0x74
 800d0c8:	4614      	mov	r4, r2
 800d0ca:	4698      	mov	r8, r3
 800d0cc:	4606      	mov	r6, r0
 800d0ce:	b118      	cbz	r0, 800d0d8 <_vfiprintf_r+0x18>
 800d0d0:	6a03      	ldr	r3, [r0, #32]
 800d0d2:	b90b      	cbnz	r3, 800d0d8 <_vfiprintf_r+0x18>
 800d0d4:	f7fe f8dc 	bl	800b290 <__sinit>
 800d0d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0da:	07d9      	lsls	r1, r3, #31
 800d0dc:	d405      	bmi.n	800d0ea <_vfiprintf_r+0x2a>
 800d0de:	89ab      	ldrh	r3, [r5, #12]
 800d0e0:	059a      	lsls	r2, r3, #22
 800d0e2:	d402      	bmi.n	800d0ea <_vfiprintf_r+0x2a>
 800d0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0e6:	f7fe f9e9 	bl	800b4bc <__retarget_lock_acquire_recursive>
 800d0ea:	89ab      	ldrh	r3, [r5, #12]
 800d0ec:	071b      	lsls	r3, r3, #28
 800d0ee:	d501      	bpl.n	800d0f4 <_vfiprintf_r+0x34>
 800d0f0:	692b      	ldr	r3, [r5, #16]
 800d0f2:	b99b      	cbnz	r3, 800d11c <_vfiprintf_r+0x5c>
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f000 f93a 	bl	800d370 <__swsetup_r>
 800d0fc:	b170      	cbz	r0, 800d11c <_vfiprintf_r+0x5c>
 800d0fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d100:	07dc      	lsls	r4, r3, #31
 800d102:	d504      	bpl.n	800d10e <_vfiprintf_r+0x4e>
 800d104:	f04f 30ff 	mov.w	r0, #4294967295
 800d108:	b01d      	add	sp, #116	; 0x74
 800d10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d10e:	89ab      	ldrh	r3, [r5, #12]
 800d110:	0598      	lsls	r0, r3, #22
 800d112:	d4f7      	bmi.n	800d104 <_vfiprintf_r+0x44>
 800d114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d116:	f7fe f9d2 	bl	800b4be <__retarget_lock_release_recursive>
 800d11a:	e7f3      	b.n	800d104 <_vfiprintf_r+0x44>
 800d11c:	2300      	movs	r3, #0
 800d11e:	9309      	str	r3, [sp, #36]	; 0x24
 800d120:	2320      	movs	r3, #32
 800d122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d126:	f8cd 800c 	str.w	r8, [sp, #12]
 800d12a:	2330      	movs	r3, #48	; 0x30
 800d12c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d2e0 <_vfiprintf_r+0x220>
 800d130:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d134:	f04f 0901 	mov.w	r9, #1
 800d138:	4623      	mov	r3, r4
 800d13a:	469a      	mov	sl, r3
 800d13c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d140:	b10a      	cbz	r2, 800d146 <_vfiprintf_r+0x86>
 800d142:	2a25      	cmp	r2, #37	; 0x25
 800d144:	d1f9      	bne.n	800d13a <_vfiprintf_r+0x7a>
 800d146:	ebba 0b04 	subs.w	fp, sl, r4
 800d14a:	d00b      	beq.n	800d164 <_vfiprintf_r+0xa4>
 800d14c:	465b      	mov	r3, fp
 800d14e:	4622      	mov	r2, r4
 800d150:	4629      	mov	r1, r5
 800d152:	4630      	mov	r0, r6
 800d154:	f7ff ffa2 	bl	800d09c <__sfputs_r>
 800d158:	3001      	adds	r0, #1
 800d15a:	f000 80a9 	beq.w	800d2b0 <_vfiprintf_r+0x1f0>
 800d15e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d160:	445a      	add	r2, fp
 800d162:	9209      	str	r2, [sp, #36]	; 0x24
 800d164:	f89a 3000 	ldrb.w	r3, [sl]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f000 80a1 	beq.w	800d2b0 <_vfiprintf_r+0x1f0>
 800d16e:	2300      	movs	r3, #0
 800d170:	f04f 32ff 	mov.w	r2, #4294967295
 800d174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d178:	f10a 0a01 	add.w	sl, sl, #1
 800d17c:	9304      	str	r3, [sp, #16]
 800d17e:	9307      	str	r3, [sp, #28]
 800d180:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d184:	931a      	str	r3, [sp, #104]	; 0x68
 800d186:	4654      	mov	r4, sl
 800d188:	2205      	movs	r2, #5
 800d18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d18e:	4854      	ldr	r0, [pc, #336]	; (800d2e0 <_vfiprintf_r+0x220>)
 800d190:	f7f3 f81e 	bl	80001d0 <memchr>
 800d194:	9a04      	ldr	r2, [sp, #16]
 800d196:	b9d8      	cbnz	r0, 800d1d0 <_vfiprintf_r+0x110>
 800d198:	06d1      	lsls	r1, r2, #27
 800d19a:	bf44      	itt	mi
 800d19c:	2320      	movmi	r3, #32
 800d19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1a2:	0713      	lsls	r3, r2, #28
 800d1a4:	bf44      	itt	mi
 800d1a6:	232b      	movmi	r3, #43	; 0x2b
 800d1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d1b2:	d015      	beq.n	800d1e0 <_vfiprintf_r+0x120>
 800d1b4:	9a07      	ldr	r2, [sp, #28]
 800d1b6:	4654      	mov	r4, sl
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	f04f 0c0a 	mov.w	ip, #10
 800d1be:	4621      	mov	r1, r4
 800d1c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1c4:	3b30      	subs	r3, #48	; 0x30
 800d1c6:	2b09      	cmp	r3, #9
 800d1c8:	d94d      	bls.n	800d266 <_vfiprintf_r+0x1a6>
 800d1ca:	b1b0      	cbz	r0, 800d1fa <_vfiprintf_r+0x13a>
 800d1cc:	9207      	str	r2, [sp, #28]
 800d1ce:	e014      	b.n	800d1fa <_vfiprintf_r+0x13a>
 800d1d0:	eba0 0308 	sub.w	r3, r0, r8
 800d1d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	9304      	str	r3, [sp, #16]
 800d1dc:	46a2      	mov	sl, r4
 800d1de:	e7d2      	b.n	800d186 <_vfiprintf_r+0xc6>
 800d1e0:	9b03      	ldr	r3, [sp, #12]
 800d1e2:	1d19      	adds	r1, r3, #4
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	9103      	str	r1, [sp, #12]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	bfbb      	ittet	lt
 800d1ec:	425b      	neglt	r3, r3
 800d1ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d1f2:	9307      	strge	r3, [sp, #28]
 800d1f4:	9307      	strlt	r3, [sp, #28]
 800d1f6:	bfb8      	it	lt
 800d1f8:	9204      	strlt	r2, [sp, #16]
 800d1fa:	7823      	ldrb	r3, [r4, #0]
 800d1fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d1fe:	d10c      	bne.n	800d21a <_vfiprintf_r+0x15a>
 800d200:	7863      	ldrb	r3, [r4, #1]
 800d202:	2b2a      	cmp	r3, #42	; 0x2a
 800d204:	d134      	bne.n	800d270 <_vfiprintf_r+0x1b0>
 800d206:	9b03      	ldr	r3, [sp, #12]
 800d208:	1d1a      	adds	r2, r3, #4
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	9203      	str	r2, [sp, #12]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	bfb8      	it	lt
 800d212:	f04f 33ff 	movlt.w	r3, #4294967295
 800d216:	3402      	adds	r4, #2
 800d218:	9305      	str	r3, [sp, #20]
 800d21a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d2f0 <_vfiprintf_r+0x230>
 800d21e:	7821      	ldrb	r1, [r4, #0]
 800d220:	2203      	movs	r2, #3
 800d222:	4650      	mov	r0, sl
 800d224:	f7f2 ffd4 	bl	80001d0 <memchr>
 800d228:	b138      	cbz	r0, 800d23a <_vfiprintf_r+0x17a>
 800d22a:	9b04      	ldr	r3, [sp, #16]
 800d22c:	eba0 000a 	sub.w	r0, r0, sl
 800d230:	2240      	movs	r2, #64	; 0x40
 800d232:	4082      	lsls	r2, r0
 800d234:	4313      	orrs	r3, r2
 800d236:	3401      	adds	r4, #1
 800d238:	9304      	str	r3, [sp, #16]
 800d23a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d23e:	4829      	ldr	r0, [pc, #164]	; (800d2e4 <_vfiprintf_r+0x224>)
 800d240:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d244:	2206      	movs	r2, #6
 800d246:	f7f2 ffc3 	bl	80001d0 <memchr>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d03f      	beq.n	800d2ce <_vfiprintf_r+0x20e>
 800d24e:	4b26      	ldr	r3, [pc, #152]	; (800d2e8 <_vfiprintf_r+0x228>)
 800d250:	bb1b      	cbnz	r3, 800d29a <_vfiprintf_r+0x1da>
 800d252:	9b03      	ldr	r3, [sp, #12]
 800d254:	3307      	adds	r3, #7
 800d256:	f023 0307 	bic.w	r3, r3, #7
 800d25a:	3308      	adds	r3, #8
 800d25c:	9303      	str	r3, [sp, #12]
 800d25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d260:	443b      	add	r3, r7
 800d262:	9309      	str	r3, [sp, #36]	; 0x24
 800d264:	e768      	b.n	800d138 <_vfiprintf_r+0x78>
 800d266:	fb0c 3202 	mla	r2, ip, r2, r3
 800d26a:	460c      	mov	r4, r1
 800d26c:	2001      	movs	r0, #1
 800d26e:	e7a6      	b.n	800d1be <_vfiprintf_r+0xfe>
 800d270:	2300      	movs	r3, #0
 800d272:	3401      	adds	r4, #1
 800d274:	9305      	str	r3, [sp, #20]
 800d276:	4619      	mov	r1, r3
 800d278:	f04f 0c0a 	mov.w	ip, #10
 800d27c:	4620      	mov	r0, r4
 800d27e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d282:	3a30      	subs	r2, #48	; 0x30
 800d284:	2a09      	cmp	r2, #9
 800d286:	d903      	bls.n	800d290 <_vfiprintf_r+0x1d0>
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d0c6      	beq.n	800d21a <_vfiprintf_r+0x15a>
 800d28c:	9105      	str	r1, [sp, #20]
 800d28e:	e7c4      	b.n	800d21a <_vfiprintf_r+0x15a>
 800d290:	fb0c 2101 	mla	r1, ip, r1, r2
 800d294:	4604      	mov	r4, r0
 800d296:	2301      	movs	r3, #1
 800d298:	e7f0      	b.n	800d27c <_vfiprintf_r+0x1bc>
 800d29a:	ab03      	add	r3, sp, #12
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	462a      	mov	r2, r5
 800d2a0:	4b12      	ldr	r3, [pc, #72]	; (800d2ec <_vfiprintf_r+0x22c>)
 800d2a2:	a904      	add	r1, sp, #16
 800d2a4:	4630      	mov	r0, r6
 800d2a6:	f7fd fbb3 	bl	800aa10 <_printf_float>
 800d2aa:	4607      	mov	r7, r0
 800d2ac:	1c78      	adds	r0, r7, #1
 800d2ae:	d1d6      	bne.n	800d25e <_vfiprintf_r+0x19e>
 800d2b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2b2:	07d9      	lsls	r1, r3, #31
 800d2b4:	d405      	bmi.n	800d2c2 <_vfiprintf_r+0x202>
 800d2b6:	89ab      	ldrh	r3, [r5, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d402      	bmi.n	800d2c2 <_vfiprintf_r+0x202>
 800d2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2be:	f7fe f8fe 	bl	800b4be <__retarget_lock_release_recursive>
 800d2c2:	89ab      	ldrh	r3, [r5, #12]
 800d2c4:	065b      	lsls	r3, r3, #25
 800d2c6:	f53f af1d 	bmi.w	800d104 <_vfiprintf_r+0x44>
 800d2ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2cc:	e71c      	b.n	800d108 <_vfiprintf_r+0x48>
 800d2ce:	ab03      	add	r3, sp, #12
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	462a      	mov	r2, r5
 800d2d4:	4b05      	ldr	r3, [pc, #20]	; (800d2ec <_vfiprintf_r+0x22c>)
 800d2d6:	a904      	add	r1, sp, #16
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f7fd fe3d 	bl	800af58 <_printf_i>
 800d2de:	e7e4      	b.n	800d2aa <_vfiprintf_r+0x1ea>
 800d2e0:	0800e084 	.word	0x0800e084
 800d2e4:	0800e08e 	.word	0x0800e08e
 800d2e8:	0800aa11 	.word	0x0800aa11
 800d2ec:	0800d09d 	.word	0x0800d09d
 800d2f0:	0800e08a 	.word	0x0800e08a

0800d2f4 <__swbuf_r>:
 800d2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f6:	460e      	mov	r6, r1
 800d2f8:	4614      	mov	r4, r2
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	b118      	cbz	r0, 800d306 <__swbuf_r+0x12>
 800d2fe:	6a03      	ldr	r3, [r0, #32]
 800d300:	b90b      	cbnz	r3, 800d306 <__swbuf_r+0x12>
 800d302:	f7fd ffc5 	bl	800b290 <__sinit>
 800d306:	69a3      	ldr	r3, [r4, #24]
 800d308:	60a3      	str	r3, [r4, #8]
 800d30a:	89a3      	ldrh	r3, [r4, #12]
 800d30c:	071a      	lsls	r2, r3, #28
 800d30e:	d525      	bpl.n	800d35c <__swbuf_r+0x68>
 800d310:	6923      	ldr	r3, [r4, #16]
 800d312:	b31b      	cbz	r3, 800d35c <__swbuf_r+0x68>
 800d314:	6823      	ldr	r3, [r4, #0]
 800d316:	6922      	ldr	r2, [r4, #16]
 800d318:	1a98      	subs	r0, r3, r2
 800d31a:	6963      	ldr	r3, [r4, #20]
 800d31c:	b2f6      	uxtb	r6, r6
 800d31e:	4283      	cmp	r3, r0
 800d320:	4637      	mov	r7, r6
 800d322:	dc04      	bgt.n	800d32e <__swbuf_r+0x3a>
 800d324:	4621      	mov	r1, r4
 800d326:	4628      	mov	r0, r5
 800d328:	f7ff fd9e 	bl	800ce68 <_fflush_r>
 800d32c:	b9e0      	cbnz	r0, 800d368 <__swbuf_r+0x74>
 800d32e:	68a3      	ldr	r3, [r4, #8]
 800d330:	3b01      	subs	r3, #1
 800d332:	60a3      	str	r3, [r4, #8]
 800d334:	6823      	ldr	r3, [r4, #0]
 800d336:	1c5a      	adds	r2, r3, #1
 800d338:	6022      	str	r2, [r4, #0]
 800d33a:	701e      	strb	r6, [r3, #0]
 800d33c:	6962      	ldr	r2, [r4, #20]
 800d33e:	1c43      	adds	r3, r0, #1
 800d340:	429a      	cmp	r2, r3
 800d342:	d004      	beq.n	800d34e <__swbuf_r+0x5a>
 800d344:	89a3      	ldrh	r3, [r4, #12]
 800d346:	07db      	lsls	r3, r3, #31
 800d348:	d506      	bpl.n	800d358 <__swbuf_r+0x64>
 800d34a:	2e0a      	cmp	r6, #10
 800d34c:	d104      	bne.n	800d358 <__swbuf_r+0x64>
 800d34e:	4621      	mov	r1, r4
 800d350:	4628      	mov	r0, r5
 800d352:	f7ff fd89 	bl	800ce68 <_fflush_r>
 800d356:	b938      	cbnz	r0, 800d368 <__swbuf_r+0x74>
 800d358:	4638      	mov	r0, r7
 800d35a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d35c:	4621      	mov	r1, r4
 800d35e:	4628      	mov	r0, r5
 800d360:	f000 f806 	bl	800d370 <__swsetup_r>
 800d364:	2800      	cmp	r0, #0
 800d366:	d0d5      	beq.n	800d314 <__swbuf_r+0x20>
 800d368:	f04f 37ff 	mov.w	r7, #4294967295
 800d36c:	e7f4      	b.n	800d358 <__swbuf_r+0x64>
	...

0800d370 <__swsetup_r>:
 800d370:	b538      	push	{r3, r4, r5, lr}
 800d372:	4b2a      	ldr	r3, [pc, #168]	; (800d41c <__swsetup_r+0xac>)
 800d374:	4605      	mov	r5, r0
 800d376:	6818      	ldr	r0, [r3, #0]
 800d378:	460c      	mov	r4, r1
 800d37a:	b118      	cbz	r0, 800d384 <__swsetup_r+0x14>
 800d37c:	6a03      	ldr	r3, [r0, #32]
 800d37e:	b90b      	cbnz	r3, 800d384 <__swsetup_r+0x14>
 800d380:	f7fd ff86 	bl	800b290 <__sinit>
 800d384:	89a3      	ldrh	r3, [r4, #12]
 800d386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d38a:	0718      	lsls	r0, r3, #28
 800d38c:	d422      	bmi.n	800d3d4 <__swsetup_r+0x64>
 800d38e:	06d9      	lsls	r1, r3, #27
 800d390:	d407      	bmi.n	800d3a2 <__swsetup_r+0x32>
 800d392:	2309      	movs	r3, #9
 800d394:	602b      	str	r3, [r5, #0]
 800d396:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d39a:	81a3      	strh	r3, [r4, #12]
 800d39c:	f04f 30ff 	mov.w	r0, #4294967295
 800d3a0:	e034      	b.n	800d40c <__swsetup_r+0x9c>
 800d3a2:	0758      	lsls	r0, r3, #29
 800d3a4:	d512      	bpl.n	800d3cc <__swsetup_r+0x5c>
 800d3a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3a8:	b141      	cbz	r1, 800d3bc <__swsetup_r+0x4c>
 800d3aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3ae:	4299      	cmp	r1, r3
 800d3b0:	d002      	beq.n	800d3b8 <__swsetup_r+0x48>
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	f7fe fefe 	bl	800c1b4 <_free_r>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	6363      	str	r3, [r4, #52]	; 0x34
 800d3bc:	89a3      	ldrh	r3, [r4, #12]
 800d3be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3c2:	81a3      	strh	r3, [r4, #12]
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	6063      	str	r3, [r4, #4]
 800d3c8:	6923      	ldr	r3, [r4, #16]
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	89a3      	ldrh	r3, [r4, #12]
 800d3ce:	f043 0308 	orr.w	r3, r3, #8
 800d3d2:	81a3      	strh	r3, [r4, #12]
 800d3d4:	6923      	ldr	r3, [r4, #16]
 800d3d6:	b94b      	cbnz	r3, 800d3ec <__swsetup_r+0x7c>
 800d3d8:	89a3      	ldrh	r3, [r4, #12]
 800d3da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3e2:	d003      	beq.n	800d3ec <__swsetup_r+0x7c>
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	4628      	mov	r0, r5
 800d3e8:	f000 f884 	bl	800d4f4 <__smakebuf_r>
 800d3ec:	89a0      	ldrh	r0, [r4, #12]
 800d3ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3f2:	f010 0301 	ands.w	r3, r0, #1
 800d3f6:	d00a      	beq.n	800d40e <__swsetup_r+0x9e>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	60a3      	str	r3, [r4, #8]
 800d3fc:	6963      	ldr	r3, [r4, #20]
 800d3fe:	425b      	negs	r3, r3
 800d400:	61a3      	str	r3, [r4, #24]
 800d402:	6923      	ldr	r3, [r4, #16]
 800d404:	b943      	cbnz	r3, 800d418 <__swsetup_r+0xa8>
 800d406:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d40a:	d1c4      	bne.n	800d396 <__swsetup_r+0x26>
 800d40c:	bd38      	pop	{r3, r4, r5, pc}
 800d40e:	0781      	lsls	r1, r0, #30
 800d410:	bf58      	it	pl
 800d412:	6963      	ldrpl	r3, [r4, #20]
 800d414:	60a3      	str	r3, [r4, #8]
 800d416:	e7f4      	b.n	800d402 <__swsetup_r+0x92>
 800d418:	2000      	movs	r0, #0
 800d41a:	e7f7      	b.n	800d40c <__swsetup_r+0x9c>
 800d41c:	2000006c 	.word	0x2000006c

0800d420 <_raise_r>:
 800d420:	291f      	cmp	r1, #31
 800d422:	b538      	push	{r3, r4, r5, lr}
 800d424:	4604      	mov	r4, r0
 800d426:	460d      	mov	r5, r1
 800d428:	d904      	bls.n	800d434 <_raise_r+0x14>
 800d42a:	2316      	movs	r3, #22
 800d42c:	6003      	str	r3, [r0, #0]
 800d42e:	f04f 30ff 	mov.w	r0, #4294967295
 800d432:	bd38      	pop	{r3, r4, r5, pc}
 800d434:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d436:	b112      	cbz	r2, 800d43e <_raise_r+0x1e>
 800d438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d43c:	b94b      	cbnz	r3, 800d452 <_raise_r+0x32>
 800d43e:	4620      	mov	r0, r4
 800d440:	f000 f830 	bl	800d4a4 <_getpid_r>
 800d444:	462a      	mov	r2, r5
 800d446:	4601      	mov	r1, r0
 800d448:	4620      	mov	r0, r4
 800d44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d44e:	f000 b817 	b.w	800d480 <_kill_r>
 800d452:	2b01      	cmp	r3, #1
 800d454:	d00a      	beq.n	800d46c <_raise_r+0x4c>
 800d456:	1c59      	adds	r1, r3, #1
 800d458:	d103      	bne.n	800d462 <_raise_r+0x42>
 800d45a:	2316      	movs	r3, #22
 800d45c:	6003      	str	r3, [r0, #0]
 800d45e:	2001      	movs	r0, #1
 800d460:	e7e7      	b.n	800d432 <_raise_r+0x12>
 800d462:	2400      	movs	r4, #0
 800d464:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d468:	4628      	mov	r0, r5
 800d46a:	4798      	blx	r3
 800d46c:	2000      	movs	r0, #0
 800d46e:	e7e0      	b.n	800d432 <_raise_r+0x12>

0800d470 <raise>:
 800d470:	4b02      	ldr	r3, [pc, #8]	; (800d47c <raise+0xc>)
 800d472:	4601      	mov	r1, r0
 800d474:	6818      	ldr	r0, [r3, #0]
 800d476:	f7ff bfd3 	b.w	800d420 <_raise_r>
 800d47a:	bf00      	nop
 800d47c:	2000006c 	.word	0x2000006c

0800d480 <_kill_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4d07      	ldr	r5, [pc, #28]	; (800d4a0 <_kill_r+0x20>)
 800d484:	2300      	movs	r3, #0
 800d486:	4604      	mov	r4, r0
 800d488:	4608      	mov	r0, r1
 800d48a:	4611      	mov	r1, r2
 800d48c:	602b      	str	r3, [r5, #0]
 800d48e:	f7f7 f825 	bl	80044dc <_kill>
 800d492:	1c43      	adds	r3, r0, #1
 800d494:	d102      	bne.n	800d49c <_kill_r+0x1c>
 800d496:	682b      	ldr	r3, [r5, #0]
 800d498:	b103      	cbz	r3, 800d49c <_kill_r+0x1c>
 800d49a:	6023      	str	r3, [r4, #0]
 800d49c:	bd38      	pop	{r3, r4, r5, pc}
 800d49e:	bf00      	nop
 800d4a0:	20001eec 	.word	0x20001eec

0800d4a4 <_getpid_r>:
 800d4a4:	f7f7 b818 	b.w	80044d8 <_getpid>

0800d4a8 <__swhatbuf_r>:
 800d4a8:	b570      	push	{r4, r5, r6, lr}
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b0:	2900      	cmp	r1, #0
 800d4b2:	b096      	sub	sp, #88	; 0x58
 800d4b4:	4615      	mov	r5, r2
 800d4b6:	461e      	mov	r6, r3
 800d4b8:	da0d      	bge.n	800d4d6 <__swhatbuf_r+0x2e>
 800d4ba:	89a3      	ldrh	r3, [r4, #12]
 800d4bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d4c0:	f04f 0100 	mov.w	r1, #0
 800d4c4:	bf0c      	ite	eq
 800d4c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d4ca:	2340      	movne	r3, #64	; 0x40
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	6031      	str	r1, [r6, #0]
 800d4d0:	602b      	str	r3, [r5, #0]
 800d4d2:	b016      	add	sp, #88	; 0x58
 800d4d4:	bd70      	pop	{r4, r5, r6, pc}
 800d4d6:	466a      	mov	r2, sp
 800d4d8:	f000 f848 	bl	800d56c <_fstat_r>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	dbec      	blt.n	800d4ba <__swhatbuf_r+0x12>
 800d4e0:	9901      	ldr	r1, [sp, #4]
 800d4e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d4e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d4ea:	4259      	negs	r1, r3
 800d4ec:	4159      	adcs	r1, r3
 800d4ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4f2:	e7eb      	b.n	800d4cc <__swhatbuf_r+0x24>

0800d4f4 <__smakebuf_r>:
 800d4f4:	898b      	ldrh	r3, [r1, #12]
 800d4f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4f8:	079d      	lsls	r5, r3, #30
 800d4fa:	4606      	mov	r6, r0
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	d507      	bpl.n	800d510 <__smakebuf_r+0x1c>
 800d500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d504:	6023      	str	r3, [r4, #0]
 800d506:	6123      	str	r3, [r4, #16]
 800d508:	2301      	movs	r3, #1
 800d50a:	6163      	str	r3, [r4, #20]
 800d50c:	b002      	add	sp, #8
 800d50e:	bd70      	pop	{r4, r5, r6, pc}
 800d510:	ab01      	add	r3, sp, #4
 800d512:	466a      	mov	r2, sp
 800d514:	f7ff ffc8 	bl	800d4a8 <__swhatbuf_r>
 800d518:	9900      	ldr	r1, [sp, #0]
 800d51a:	4605      	mov	r5, r0
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7fe febd 	bl	800c29c <_malloc_r>
 800d522:	b948      	cbnz	r0, 800d538 <__smakebuf_r+0x44>
 800d524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d528:	059a      	lsls	r2, r3, #22
 800d52a:	d4ef      	bmi.n	800d50c <__smakebuf_r+0x18>
 800d52c:	f023 0303 	bic.w	r3, r3, #3
 800d530:	f043 0302 	orr.w	r3, r3, #2
 800d534:	81a3      	strh	r3, [r4, #12]
 800d536:	e7e3      	b.n	800d500 <__smakebuf_r+0xc>
 800d538:	89a3      	ldrh	r3, [r4, #12]
 800d53a:	6020      	str	r0, [r4, #0]
 800d53c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d540:	81a3      	strh	r3, [r4, #12]
 800d542:	9b00      	ldr	r3, [sp, #0]
 800d544:	6163      	str	r3, [r4, #20]
 800d546:	9b01      	ldr	r3, [sp, #4]
 800d548:	6120      	str	r0, [r4, #16]
 800d54a:	b15b      	cbz	r3, 800d564 <__smakebuf_r+0x70>
 800d54c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d550:	4630      	mov	r0, r6
 800d552:	f000 f81d 	bl	800d590 <_isatty_r>
 800d556:	b128      	cbz	r0, 800d564 <__smakebuf_r+0x70>
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	f023 0303 	bic.w	r3, r3, #3
 800d55e:	f043 0301 	orr.w	r3, r3, #1
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	89a3      	ldrh	r3, [r4, #12]
 800d566:	431d      	orrs	r5, r3
 800d568:	81a5      	strh	r5, [r4, #12]
 800d56a:	e7cf      	b.n	800d50c <__smakebuf_r+0x18>

0800d56c <_fstat_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4d07      	ldr	r5, [pc, #28]	; (800d58c <_fstat_r+0x20>)
 800d570:	2300      	movs	r3, #0
 800d572:	4604      	mov	r4, r0
 800d574:	4608      	mov	r0, r1
 800d576:	4611      	mov	r1, r2
 800d578:	602b      	str	r3, [r5, #0]
 800d57a:	f7f6 ffdd 	bl	8004538 <_fstat>
 800d57e:	1c43      	adds	r3, r0, #1
 800d580:	d102      	bne.n	800d588 <_fstat_r+0x1c>
 800d582:	682b      	ldr	r3, [r5, #0]
 800d584:	b103      	cbz	r3, 800d588 <_fstat_r+0x1c>
 800d586:	6023      	str	r3, [r4, #0]
 800d588:	bd38      	pop	{r3, r4, r5, pc}
 800d58a:	bf00      	nop
 800d58c:	20001eec 	.word	0x20001eec

0800d590 <_isatty_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d06      	ldr	r5, [pc, #24]	; (800d5ac <_isatty_r+0x1c>)
 800d594:	2300      	movs	r3, #0
 800d596:	4604      	mov	r4, r0
 800d598:	4608      	mov	r0, r1
 800d59a:	602b      	str	r3, [r5, #0]
 800d59c:	f7f6 ffd2 	bl	8004544 <_isatty>
 800d5a0:	1c43      	adds	r3, r0, #1
 800d5a2:	d102      	bne.n	800d5aa <_isatty_r+0x1a>
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	b103      	cbz	r3, 800d5aa <_isatty_r+0x1a>
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	bd38      	pop	{r3, r4, r5, pc}
 800d5ac:	20001eec 	.word	0x20001eec

0800d5b0 <_init>:
 800d5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5b2:	bf00      	nop
 800d5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5b6:	bc08      	pop	{r3}
 800d5b8:	469e      	mov	lr, r3
 800d5ba:	4770      	bx	lr

0800d5bc <_fini>:
 800d5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5be:	bf00      	nop
 800d5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5c2:	bc08      	pop	{r3}
 800d5c4:	469e      	mov	lr, r3
 800d5c6:	4770      	bx	lr
