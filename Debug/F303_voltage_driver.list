
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d230  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c34  0800d3c0  0800d3c0  0001d3c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dff4  0800dff4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800dff4  0800dff4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dff4  0800dff4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dff4  0800dff4  0001dff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dff8  0800dff8  0001dff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800dffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00001d24  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001efc  20001efc  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002821a  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000540b  00000000  00000000  00048461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 000126a3  00000000  00000000  0004d86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001278  00000000  00000000  0005ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002060  00000000  00000000  00061188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000233c6  00000000  00000000  000631e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00006d81  00000000  00000000  000865ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005554  00000000  00000000  0008d330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00092884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d3a8 	.word	0x0800d3a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d3a8 	.word	0x0800d3a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c8a:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000c8c:	2400      	movs	r4, #0
{
 8000c8e:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c90:	eb0d 0002 	add.w	r0, sp, r2
 8000c94:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000c96:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000c9e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000ca2:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca4:	9404      	str	r4, [sp, #16]
 8000ca6:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ca8:	f00a fa88 	bl	800b1bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	483d      	ldr	r0, [pc, #244]	; (8000da4 <MX_ADC1_Init+0x11c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb2:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb6:	2301      	movs	r3, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cb8:	e9c0 c200 	strd	ip, r2, [r0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cbc:	8304      	strh	r4, [r0, #24]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	2204      	movs	r2, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc0:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc4:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cc6:	6103      	str	r3, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc8:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cce:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd0:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	6142      	str	r2, [r0, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cd6:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000cd8:	f004 f91a 	bl	8004f10 <HAL_ADC_Init>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d14a      	bne.n	8000d76 <MX_ADC1_Init+0xee>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000ce2:	4830      	ldr	r0, [pc, #192]	; (8000da4 <MX_ADC1_Init+0x11c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000ce6:	a901      	add	r1, sp, #4
 8000ce8:	f004 ffee 	bl	8005cc8 <HAL_ADCEx_MultiModeConfigChannel>
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d155      	bne.n	8000d9c <MX_ADC1_Init+0x114>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf0:	2300      	movs	r3, #0
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000cf2:	2005      	movs	r0, #5
 8000cf4:	e9cd 0306 	strd	r0, r3, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf8:	2201      	movs	r2, #1
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000cfa:	482a      	ldr	r0, [pc, #168]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000cfc:	a904      	add	r1, sp, #16
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cfe:	e9cd 2204 	strd	r2, r2, [sp, #16]
  sConfig.Offset = 0;
 8000d02:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d06:	f004 fbc3 	bl	8005490 <HAL_ADC_ConfigChannel>
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d143      	bne.n	8000d96 <MX_ADC1_Init+0x10e>
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 4;
 8000d0e:	2104      	movs	r1, #4
 8000d10:	9110      	str	r1, [sp, #64]	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000d12:	2105      	movs	r1, #5
 8000d14:	910c      	str	r1, [sp, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d16:	2140      	movs	r1, #64	; 0x40
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d18:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d1a:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000d1c:	9113      	str	r1, [sp, #76]	; 0x4c
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <MX_ADC1_Init+0x11c>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d20:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d22:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d24:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d28:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d2c:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d2e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d32:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d36:	f004 fd77 	bl	8005828 <HAL_ADCEx_InjectedConfigChannel>
 8000d3a:	bb48      	cbnz	r0, 8000d90 <MX_ADC1_Init+0x108>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d3c:	2204      	movs	r2, #4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d3e:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000d42:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000d44:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d48:	f004 fd6e 	bl	8005828 <HAL_ADCEx_InjectedConfigChannel>
 8000d4c:	b9e8      	cbnz	r0, 8000d8a <MX_ADC1_Init+0x102>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d4e:	2205      	movs	r2, #5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d50:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d52:	4814      	ldr	r0, [pc, #80]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000d54:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000d56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d5a:	f004 fd65 	bl	8005828 <HAL_ADCEx_InjectedConfigChannel>
 8000d5e:	b988      	cbnz	r0, 8000d84 <MX_ADC1_Init+0xfc>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000d60:	2202      	movs	r2, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000d62:	2304      	movs	r3, #4
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d64:	480f      	ldr	r0, [pc, #60]	; (8000da4 <MX_ADC1_Init+0x11c>)
 8000d66:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8000d68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000d6c:	f004 fd5c 	bl	8005828 <HAL_ADCEx_InjectedConfigChannel>
 8000d70:	b920      	cbnz	r0, 8000d7c <MX_ADC1_Init+0xf4>
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000d72:	b014      	add	sp, #80	; 0x50
 8000d74:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d76:	f002 ff89 	bl	8003c8c <Error_Handler>
 8000d7a:	e7b1      	b.n	8000ce0 <MX_ADC1_Init+0x58>
    Error_Handler();
 8000d7c:	f002 ff86 	bl	8003c8c <Error_Handler>
}
 8000d80:	b014      	add	sp, #80	; 0x50
 8000d82:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d84:	f002 ff82 	bl	8003c8c <Error_Handler>
 8000d88:	e7ea      	b.n	8000d60 <MX_ADC1_Init+0xd8>
    Error_Handler();
 8000d8a:	f002 ff7f 	bl	8003c8c <Error_Handler>
 8000d8e:	e7de      	b.n	8000d4e <MX_ADC1_Init+0xc6>
    Error_Handler();
 8000d90:	f002 ff7c 	bl	8003c8c <Error_Handler>
 8000d94:	e7d2      	b.n	8000d3c <MX_ADC1_Init+0xb4>
    Error_Handler();
 8000d96:	f002 ff79 	bl	8003c8c <Error_Handler>
 8000d9a:	e7b8      	b.n	8000d0e <MX_ADC1_Init+0x86>
    Error_Handler();
 8000d9c:	f002 ff76 	bl	8003c8c <Error_Handler>
 8000da0:	e7a6      	b.n	8000cf0 <MX_ADC1_Init+0x68>
 8000da2:	bf00      	nop
 8000da4:	2000021c 	.word	0x2000021c

08000da8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000da8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	2400      	movs	r4, #0
{
 8000dac:	b090      	sub	sp, #64	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	4621      	mov	r1, r4
 8000db2:	a806      	add	r0, sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000db4:	e9cd 4400 	strd	r4, r4, [sp]
 8000db8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000dbc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dc0:	f00a f9fc 	bl	800b1bc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dc4:	4830      	ldr	r0, [pc, #192]	; (8000e88 <MX_ADC2_Init+0xe0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc6:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 8000e8c <MX_ADC2_Init+0xe4>
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dca:	8304      	strh	r4, [r0, #24]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dd0:	2301      	movs	r3, #1
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dd2:	e9c0 c200 	strd	ip, r2, [r0]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	2204      	movs	r2, #4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd8:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dde:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de4:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000de6:	61c3      	str	r3, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000de8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dec:	6142      	str	r2, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dee:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000df0:	f004 f88e 	bl	8004f10 <HAL_ADC_Init>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d136      	bne.n	8000e66 <MX_ADC2_Init+0xbe>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000df8:	2300      	movs	r3, #0
  sConfig.Channel = ADC_CHANNEL_1;
 8000dfa:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000dfc:	4822      	ldr	r0, [pc, #136]	; (8000e88 <MX_ADC2_Init+0xe0>)
 8000dfe:	4669      	mov	r1, sp
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	e9cd 2200 	strd	r2, r2, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e04:	e9cd 3302 	strd	r3, r3, [sp, #8]
  sConfig.Offset = 0;
 8000e08:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000e0c:	f004 fb40 	bl	8005490 <HAL_ADC_ConfigChannel>
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d135      	bne.n	8000e80 <MX_ADC2_Init+0xd8>
  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000e14:	2103      	movs	r1, #3
 8000e16:	910c      	str	r1, [sp, #48]	; 0x30
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000e18:	2105      	movs	r1, #5
 8000e1a:	9108      	str	r1, [sp, #32]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e1c:	2140      	movs	r1, #64	; 0x40
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e1e:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e20:	2201      	movs	r2, #1
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000e22:	910f      	str	r1, [sp, #60]	; 0x3c
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e24:	4818      	ldr	r0, [pc, #96]	; (8000e88 <MX_ADC2_Init+0xe0>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e26:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e28:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e2a:	e9cd 2206 	strd	r2, r2, [sp, #24]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e2e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e32:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e34:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e38:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e3c:	f004 fcf4 	bl	8005828 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	b9d8      	cbnz	r0, 8000e7a <MX_ADC2_Init+0xd2>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000e42:	2302      	movs	r3, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e44:	4810      	ldr	r0, [pc, #64]	; (8000e88 <MX_ADC2_Init+0xe0>)
 8000e46:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000e48:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e4c:	f004 fcec 	bl	8005828 <HAL_ADCEx_InjectedConfigChannel>
 8000e50:	b980      	cbnz	r0, 8000e74 <MX_ADC2_Init+0xcc>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8000e52:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <MX_ADC2_Init+0xe0>)
 8000e56:	a906      	add	r1, sp, #24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e58:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK) {
 8000e5c:	f004 fce4 	bl	8005828 <HAL_ADCEx_InjectedConfigChannel>
 8000e60:	b920      	cbnz	r0, 8000e6c <MX_ADC2_Init+0xc4>
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */
}
 8000e62:	b010      	add	sp, #64	; 0x40
 8000e64:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e66:	f002 ff11 	bl	8003c8c <Error_Handler>
 8000e6a:	e7c5      	b.n	8000df8 <MX_ADC2_Init+0x50>
    Error_Handler();
 8000e6c:	f002 ff0e 	bl	8003c8c <Error_Handler>
}
 8000e70:	b010      	add	sp, #64	; 0x40
 8000e72:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e74:	f002 ff0a 	bl	8003c8c <Error_Handler>
 8000e78:	e7eb      	b.n	8000e52 <MX_ADC2_Init+0xaa>
    Error_Handler();
 8000e7a:	f002 ff07 	bl	8003c8c <Error_Handler>
 8000e7e:	e7e0      	b.n	8000e42 <MX_ADC2_Init+0x9a>
    Error_Handler();
 8000e80:	f002 ff04 	bl	8003c8c <Error_Handler>
 8000e84:	e7c6      	b.n	8000e14 <MX_ADC2_Init+0x6c>
 8000e86:	bf00      	nop
 8000e88:	2000026c 	.word	0x2000026c
 8000e8c:	50000100 	.word	0x50000100

08000e90 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e90:	b510      	push	{r4, lr}

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e92:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000e94:	2400      	movs	r4, #0
{
 8000e96:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e98:	eb0d 0002 	add.w	r0, sp, r2
 8000e9c:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000e9e:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea2:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000ea6:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000eaa:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eac:	9404      	str	r4, [sp, #16]
 8000eae:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000eb0:	f00a f984 	bl	800b1bc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000eb4:	4827      	ldr	r0, [pc, #156]	; (8000f54 <MX_ADC3_Init+0xc4>)
 8000eb6:	4a28      	ldr	r2, [pc, #160]	; (8000f58 <MX_ADC3_Init+0xc8>)
 8000eb8:	6002      	str	r2, [r0, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc3.Init.ContinuousConvMode = DISABLE;
  hadc3.Init.DiscontinuousConvMode = DISABLE;
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eba:	2301      	movs	r3, #1
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	2204      	movs	r2, #4
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ebe:	8304      	strh	r4, [r0, #24]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec8:	6104      	str	r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ece:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ed0:	61c3      	str	r3, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ed2:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed6:	6142      	str	r2, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ed8:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8000eda:	f004 f819 	bl	8004f10 <HAL_ADC_Init>
 8000ede:	bb60      	cbnz	r0, 8000f3a <MX_ADC3_Init+0xaa>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee0:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK) {
 8000ee2:	481c      	ldr	r0, [pc, #112]	; (8000f54 <MX_ADC3_Init+0xc4>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ee4:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK) {
 8000ee6:	a901      	add	r1, sp, #4
 8000ee8:	f004 feee 	bl	8005cc8 <HAL_ADCEx_MultiModeConfigChannel>
 8000eec:	bb78      	cbnz	r0, 8000f4e <MX_ADC3_Init+0xbe>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000eee:	2205      	movs	r2, #5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef0:	2001      	movs	r0, #1
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef2:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef4:	e9cd 2004 	strd	r2, r0, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000ef8:	a904      	add	r1, sp, #16
 8000efa:	4816      	ldr	r0, [pc, #88]	; (8000f54 <MX_ADC3_Init+0xc4>)
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000efc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sConfig.Offset = 0;
 8000f00:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8000f04:	f004 fac4 	bl	8005490 <HAL_ADC_ConfigChannel>
 8000f08:	b9f0      	cbnz	r0, 8000f48 <MX_ADC3_Init+0xb8>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f0a:	2201      	movs	r2, #1
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000f0c:	2005      	movs	r0, #5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f0e:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000f10:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f14:	2440      	movs	r4, #64	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000f16:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK) {
 8000f18:	a90a      	add	r1, sp, #40	; 0x28
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <MX_ADC3_Init+0xc4>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f1c:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f1e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f22:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000f24:	9413      	str	r4, [sp, #76]	; 0x4c
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f26:	9212      	str	r2, [sp, #72]	; 0x48
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f28:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f2c:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK) {
 8000f30:	f004 fc7a 	bl	8005828 <HAL_ADCEx_InjectedConfigChannel>
 8000f34:	b920      	cbnz	r0, 8000f40 <MX_ADC3_Init+0xb0>
    Error_Handler();
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */
}
 8000f36:	b014      	add	sp, #80	; 0x50
 8000f38:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f3a:	f002 fea7 	bl	8003c8c <Error_Handler>
 8000f3e:	e7cf      	b.n	8000ee0 <MX_ADC3_Init+0x50>
    Error_Handler();
 8000f40:	f002 fea4 	bl	8003c8c <Error_Handler>
}
 8000f44:	b014      	add	sp, #80	; 0x50
 8000f46:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f48:	f002 fea0 	bl	8003c8c <Error_Handler>
 8000f4c:	e7dd      	b.n	8000f0a <MX_ADC3_Init+0x7a>
    Error_Handler();
 8000f4e:	f002 fe9d 	bl	8003c8c <Error_Handler>
 8000f52:	e7cc      	b.n	8000eee <MX_ADC3_Init+0x5e>
 8000f54:	200002bc 	.word	0x200002bc
 8000f58:	50000400 	.word	0x50000400
 8000f5c:	00000000 	.word	0x00000000

08000f60 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED = 0;

void HAL_ADC_MspInit(ADC_HandleTypeDef * adcHandle)
{
 8000f60:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (adcHandle->Instance == ADC1) {
 8000f62:	6802      	ldr	r2, [r0, #0]
{
 8000f64:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	2300      	movs	r3, #0
  if (adcHandle->Instance == ADC1) {
 8000f68:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000f70:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000f74:	930c      	str	r3, [sp, #48]	; 0x30
  if (adcHandle->Instance == ADC1) {
 8000f76:	d024      	beq.n	8000fc2 <HAL_ADC_MspInit+0x62>
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  } else if (adcHandle->Instance == ADC2) {
 8000f78:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_ADC_MspInit+0x148>)
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d005      	beq.n	8000f8a <HAL_ADC_MspInit+0x2a>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  } else if (adcHandle->Instance == ADC3) {
 8000f7e:	4b4b      	ldr	r3, [pc, #300]	; (80010ac <HAL_ADC_MspInit+0x14c>)
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d063      	beq.n	800104c <HAL_ADC_MspInit+0xec>

    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f84:	b00f      	add	sp, #60	; 0x3c
 8000f86:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f8a:	4a49      	ldr	r2, [pc, #292]	; (80010b0 <HAL_ADC_MspInit+0x150>)
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	3301      	adds	r3, #1
    if (HAL_RCC_ADC12_CLK_ENABLED == 1) {
 8000f90:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f92:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_ADC12_CLK_ENABLED == 1) {
 8000f94:	d04f      	beq.n	8001036 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8000fa2:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8001090 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	a908      	add	r1, sp, #32
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8000fb2:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f005 fdae 	bl	8006b18 <HAL_GPIO_Init>
}
 8000fbc:	b00f      	add	sp, #60	; 0x3c
 8000fbe:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fc2:	4a3b      	ldr	r2, [pc, #236]	; (80010b0 <HAL_ADC_MspInit+0x150>)
 8000fc4:	6813      	ldr	r3, [r2, #0]
 8000fc6:	3301      	adds	r3, #1
    if (HAL_RCC_ADC12_CLK_ENABLED == 1) {
 8000fc8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fca:	6013      	str	r3, [r2, #0]
    if (HAL_RCC_ADC12_CLK_ENABLED == 1) {
 8000fcc:	d028      	beq.n	8001020 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000fde:	9202      	str	r2, [sp, #8]
 8000fe0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe2:	695a      	ldr	r2, [r3, #20]
 8000fe4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3;
 8000ff2:	220b      	movs	r2, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3;
 8000ff6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3;
 8000ffc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001000:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f005 fd89 	bl	8006b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001006:	ed9f 7b24 	vldr	d7, [pc, #144]	; 8001098 <HAL_ADC_MspInit+0x138>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800100c:	482a      	ldr	r0, [pc, #168]	; (80010b8 <HAL_ADC_MspInit+0x158>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001010:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001012:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001016:	f005 fd7f 	bl	8006b18 <HAL_GPIO_Init>
}
 800101a:	b00f      	add	sp, #60	; 0x3c
 800101c:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8001022:	695a      	ldr	r2, [r3, #20]
 8001024:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	9b01      	ldr	r3, [sp, #4]
 8001034:	e7cb      	b.n	8000fce <HAL_ADC_MspInit+0x6e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001036:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <HAL_ADC_MspInit+0x154>)
 8001038:	695a      	ldr	r2, [r3, #20]
 800103a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	9304      	str	r3, [sp, #16]
 8001048:	9b04      	ldr	r3, [sp, #16]
 800104a:	e7a4      	b.n	8000f96 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800104c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001050:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001054:	ed9f 7b12 	vldr	d7, [pc, #72]	; 80010a0 <HAL_ADC_MspInit+0x140>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001058:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <HAL_ADC_MspInit+0x15c>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800105c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	695a      	ldr	r2, [r3, #20]
 8001064:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001068:	9206      	str	r2, [sp, #24]
 800106a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106c:	695a      	ldr	r2, [r3, #20]
 800106e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800107a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800107e:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f005 fd48 	bl	8006b18 <HAL_GPIO_Init>
}
 8001088:	e77c      	b.n	8000f84 <HAL_ADC_MspInit+0x24>
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	00000070 	.word	0x00000070
 8001094:	00000003 	.word	0x00000003
 8001098:	00000010 	.word	0x00000010
 800109c:	00000003 	.word	0x00000003
 80010a0:	00002000 	.word	0x00002000
 80010a4:	00000003 	.word	0x00000003
 80010a8:	50000100 	.word	0x50000100
 80010ac:	50000400 	.word	0x50000400
 80010b0:	200001f4 	.word	0x200001f4
 80010b4:	40021000 	.word	0x40021000
 80010b8:	48001400 	.word	0x48001400
 80010bc:	48000400 	.word	0x48000400

080010c0 <getBatteryVoltage>:
  }
}

/* USER CODE BEGIN 1 */

inline float getBatteryVoltage(void) { return adc_raw.batt_v * 3.3 * 11 / 4096; }
 80010c0:	b508      	push	{r3, lr}
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <getBatteryVoltage+0x28>)
 80010c4:	6898      	ldr	r0, [r3, #8]
 80010c6:	f7ff fa2d 	bl	8000524 <__aeabi_i2d>
 80010ca:	a305      	add	r3, pc, #20	; (adr r3, 80010e0 <getBatteryVoltage+0x20>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fa92 	bl	80005f8 <__aeabi_dmul>
 80010d4:	f7ff fd88 	bl	8000be8 <__aeabi_d2f>
 80010d8:	ee00 0a10 	vmov	s0, r0
 80010dc:	bd08      	pop	{r3, pc}
 80010de:	bf00      	nop
 80010e0:	66666666 	.word	0x66666666
 80010e4:	3f822666 	.word	0x3f822666
 80010e8:	200001f8 	.word	0x200001f8
 80010ec:	00000000 	.word	0x00000000

080010f0 <getGateDriverDCDCVoltage>:

inline float getGateDriverDCDCVoltage(void) { return (adc_raw.gd_dcdc_v) * 3.3 * 11 / 4096; }
 80010f0:	b508      	push	{r3, lr}
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <getGateDriverDCDCVoltage+0x28>)
 80010f4:	6a18      	ldr	r0, [r3, #32]
 80010f6:	f7ff fa15 	bl	8000524 <__aeabi_i2d>
 80010fa:	a305      	add	r3, pc, #20	; (adr r3, 8001110 <getGateDriverDCDCVoltage+0x20>)
 80010fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001100:	f7ff fa7a 	bl	80005f8 <__aeabi_dmul>
 8001104:	f7ff fd70 	bl	8000be8 <__aeabi_d2f>
 8001108:	ee00 0a10 	vmov	s0, r0
 800110c:	bd08      	pop	{r3, pc}
 800110e:	bf00      	nop
 8001110:	66666666 	.word	0x66666666
 8001114:	3f822666 	.word	0x3f822666
 8001118:	200001f8 	.word	0x200001f8
 800111c:	00000000 	.word	0x00000000

08001120 <isNotZeroCurrent>:
  HAL_ADCEx_InjectedStart(&hadc2);
  HAL_ADCEx_InjectedStart(&hadc3);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
}

bool isNotZeroCurrent() { return getCurrentMotor(0) > 0.5 || getCurrentMotor(0) > 0.5; }
 8001120:	b508      	push	{r3, lr}
// 50V/V * 5m = 250mV/A

inline float getCurrentMotor(bool motor) { return (adc_raw.cs_motor[motor] - adc_raw.cs_adc_offset) * 3.3 / 4096 * 4; }
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <isNotZeroCurrent+0x40>)
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	1ac0      	subs	r0, r0, r3
 800112a:	f7ff f9fb 	bl	8000524 <__aeabi_i2d>
 800112e:	a30a      	add	r3, pc, #40	; (adr r3, 8001158 <isNotZeroCurrent+0x38>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa60 	bl	80005f8 <__aeabi_dmul>
 8001138:	f7ff fd56 	bl	8000be8 <__aeabi_d2f>
bool isNotZeroCurrent() { return getCurrentMotor(0) > 0.5 || getCurrentMotor(0) > 0.5; }
 800113c:	ee07 0a10 	vmov	s14, r0
 8001140:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	bfcc      	ite	gt
 800114e:	2001      	movgt	r0, #1
 8001150:	2000      	movle	r0, #0
 8001152:	bd08      	pop	{r3, pc}
 8001154:	f3af 8000 	nop.w
 8001158:	66666666 	.word	0x66666666
 800115c:	3f6a6666 	.word	0x3f6a6666
 8001160:	200001f8 	.word	0x200001f8
 8001164:	00000000 	.word	0x00000000

08001168 <getCurrentMotor>:
inline float getCurrentMotor(bool motor) { return (adc_raw.cs_motor[motor] - adc_raw.cs_adc_offset) * 3.3 / 4096 * 4; }
 8001168:	b508      	push	{r3, lr}
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <getCurrentMotor+0x30>)
 800116c:	69da      	ldr	r2, [r3, #28]
 800116e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001172:	1a80      	subs	r0, r0, r2
 8001174:	f7ff f9d6 	bl	8000524 <__aeabi_i2d>
 8001178:	a305      	add	r3, pc, #20	; (adr r3, 8001190 <getCurrentMotor+0x28>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff fa3b 	bl	80005f8 <__aeabi_dmul>
 8001182:	f7ff fd31 	bl	8000be8 <__aeabi_d2f>
 8001186:	ee00 0a10 	vmov	s0, r0
 800118a:	bd08      	pop	{r3, pc}
 800118c:	f3af 8000 	nop.w
 8001190:	66666666 	.word	0x66666666
 8001194:	3f6a6666 	.word	0x3f6a6666
 8001198:	200001f8 	.word	0x200001f8
 800119c:	00000000 	.word	0x00000000

080011a0 <getTempMotor>:
inline int getTempFET(bool motor) { return (-((float)adc_raw.temp_fet[motor] * 3.3 / 4096) + 1.5) * 70 + 25; }
inline int getTempMotor(bool motor) { return (-((float)adc_raw.temp_motor[motor] * 3.3 / 4096) + 1.5) * 70 + 25; }
 80011a0:	b508      	push	{r3, lr}
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <getTempMotor+0x50>)
 80011a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80011a8:	6940      	ldr	r0, [r0, #20]
 80011aa:	ee07 0a90 	vmov	s15, r0
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	ee17 0a90 	vmov	r0, s15
 80011b6:	f7ff f9c7 	bl	8000548 <__aeabi_f2d>
 80011ba:	a30b      	add	r3, pc, #44	; (adr r3, 80011e8 <getTempMotor+0x48>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fa1a 	bl	80005f8 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	2000      	movs	r0, #0
 80011ca:	490a      	ldr	r1, [pc, #40]	; (80011f4 <getTempMotor+0x54>)
 80011cc:	f7ff f85c 	bl	8000288 <__aeabi_dsub>
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <getTempMotor+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	f7ff fa10 	bl	80005f8 <__aeabi_dmul>
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <getTempMotor+0x5c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f7ff f856 	bl	800028c <__adddf3>
 80011e0:	f7ff fcba 	bl	8000b58 <__aeabi_d2iz>
 80011e4:	bd08      	pop	{r3, pc}
 80011e6:	bf00      	nop
 80011e8:	66666666 	.word	0x66666666
 80011ec:	3f4a6666 	.word	0x3f4a6666
 80011f0:	200001f8 	.word	0x200001f8
 80011f4:	3ff80000 	.word	0x3ff80000
 80011f8:	40518000 	.word	0x40518000
 80011fc:	40390000 	.word	0x40390000

08001200 <updateADC>:

inline void updateADC(bool motor)
{
 8001200:	b538      	push	{r3, r4, r5, lr}
  if (motor == 0) {
 8001202:	bb68      	cbnz	r0, 8001260 <updateADC+0x60>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	4604      	mov	r4, r0
 8001208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120c:	4829      	ldr	r0, [pc, #164]	; (80012b4 <updateADC+0xb4>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 800120e:	4d2a      	ldr	r5, [pc, #168]	; (80012b8 <updateADC+0xb8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001210:	f005 fd70 	bl	8006cf4 <HAL_GPIO_WritePin>
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 8001214:	2101      	movs	r1, #1
 8001216:	4829      	ldr	r0, [pc, #164]	; (80012bc <updateADC+0xbc>)
 8001218:	f004 f924 	bl	8005464 <HAL_ADCEx_InjectedGetValue>
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800121c:	2101      	movs	r1, #1
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 800121e:	4603      	mov	r3, r0
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001220:	4827      	ldr	r0, [pc, #156]	; (80012c0 <updateADC+0xc0>)
  adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 8001222:	60ab      	str	r3, [r5, #8]
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001224:	f004 f91e 	bl	8005464 <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 8001228:	2102      	movs	r1, #2
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800122a:	4603      	mov	r3, r0
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 800122c:	4824      	ldr	r0, [pc, #144]	; (80012c0 <updateADC+0xc0>)
  adc_raw.cs_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800122e:	606b      	str	r3, [r5, #4]
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 8001230:	f004 f918 	bl	8005464 <HAL_ADCEx_InjectedGetValue>
  adc_raw.temp_fet[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 8001234:	2103      	movs	r1, #3
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 8001236:	4603      	mov	r3, r0
  adc_raw.temp_fet[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 8001238:	4821      	ldr	r0, [pc, #132]	; (80012c0 <updateADC+0xc0>)
  adc_raw.temp_fet[0] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_2);
 800123a:	60eb      	str	r3, [r5, #12]
  adc_raw.temp_fet[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 800123c:	f004 f912 	bl	8005464 <HAL_ADCEx_InjectedGetValue>
 8001240:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc2);
 8001242:	481f      	ldr	r0, [pc, #124]	; (80012c0 <updateADC+0xc0>)
  adc_raw.temp_fet[1] = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_3);
 8001244:	612b      	str	r3, [r5, #16]
  HAL_ADCEx_InjectedStart(&hadc2);
 8001246:	f004 f885 	bl	8005354 <HAL_ADCEx_InjectedStart>
  HAL_ADCEx_InjectedStart(&hadc3);
 800124a:	481c      	ldr	r0, [pc, #112]	; (80012bc <updateADC+0xbc>)
 800124c:	f004 f882 	bl	8005354 <HAL_ADCEx_InjectedStart>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001250:	4622      	mov	r2, r4
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <updateADC+0xb4>)
    updateADC_M0();
  } else {
    updateADC_M1();
  }
}
 8001254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125c:	f005 bd4a 	b.w	8006cf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <updateADC+0xb4>)
  adc_raw.cs_motor[0] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001264:	4c14      	ldr	r4, [pc, #80]	; (80012b8 <updateADC+0xb8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	f005 fd43 	bl	8006cf4 <HAL_GPIO_WritePin>
  adc_raw.cs_motor[0] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800126e:	2101      	movs	r1, #1
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <updateADC+0xc4>)
 8001272:	f004 f8f7 	bl	8005464 <HAL_ADCEx_InjectedGetValue>
 8001276:	4603      	mov	r3, r0
 8001278:	6023      	str	r3, [r4, #0]
  adc_raw.temp_motor[0] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800127a:	2102      	movs	r1, #2
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <updateADC+0xc4>)
 800127e:	f004 f8f1 	bl	8005464 <HAL_ADCEx_InjectedGetValue>
 8001282:	4603      	mov	r3, r0
 8001284:	6163      	str	r3, [r4, #20]
  adc_raw.temp_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001286:	2103      	movs	r1, #3
 8001288:	480e      	ldr	r0, [pc, #56]	; (80012c4 <updateADC+0xc4>)
 800128a:	f004 f8eb 	bl	8005464 <HAL_ADCEx_InjectedGetValue>
 800128e:	4603      	mov	r3, r0
  adc_raw.gd_dcdc_v = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 8001290:	2104      	movs	r1, #4
  adc_raw.temp_motor[1] = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001292:	61a3      	str	r3, [r4, #24]
  adc_raw.gd_dcdc_v = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <updateADC+0xc4>)
 8001296:	f004 f8e5 	bl	8005464 <HAL_ADCEx_InjectedGetValue>
 800129a:	4603      	mov	r3, r0
  HAL_ADCEx_InjectedStart(&hadc1);
 800129c:	4809      	ldr	r0, [pc, #36]	; (80012c4 <updateADC+0xc4>)
  adc_raw.gd_dcdc_v = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_4);
 800129e:	6223      	str	r3, [r4, #32]
  HAL_ADCEx_InjectedStart(&hadc1);
 80012a0:	f004 f858 	bl	8005354 <HAL_ADCEx_InjectedStart>
}
 80012a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <updateADC+0xb4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b0:	f005 bd20 	b.w	8006cf4 <HAL_GPIO_WritePin>
 80012b4:	48000800 	.word	0x48000800
 80012b8:	200001f8 	.word	0x200001f8
 80012bc:	200002bc 	.word	0x200002bc
 80012c0:	2000026c 	.word	0x2000026c
 80012c4:	2000021c 	.word	0x2000021c

080012c8 <MX_CAN_Init>:
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_CAN_Init+0x38>)
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <MX_CAN_Init+0x3c>)
  hcan.Init.Prescaler = 4;
 80012cc:	2204      	movs	r2, #4
{
 80012ce:	b510      	push	{r4, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012d0:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 4;
 80012d2:	e9c0 1200 	strd	r1, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80012da:	f44f 3440 	mov.w	r4, #196608	; 0x30000
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012de:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012e2:	6182      	str	r2, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012e4:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012ea:	e9c0 4104 	strd	r4, r1, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80012ee:	f004 fd7d 	bl	8005dec <HAL_CAN_Init>
 80012f2:	b900      	cbnz	r0, 80012f6 <MX_CAN_Init+0x2e>
    Error_Handler();
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */
}
 80012f4:	bd10      	pop	{r4, pc}
 80012f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80012fa:	f002 bcc7 	b.w	8003c8c <Error_Handler>
 80012fe:	bf00      	nop
 8001300:	20000310 	.word	0x20000310
 8001304:	40006400 	.word	0x40006400

08001308 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef * canHandle)
{
 8001308:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (canHandle->Instance == CAN) {
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <HAL_CAN_MspInit+0xa4>)
 800130c:	6802      	ldr	r2, [r0, #0]
{
 800130e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	2400      	movs	r4, #0
  if (canHandle->Instance == CAN) {
 8001312:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001318:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800131c:	9406      	str	r4, [sp, #24]
  if (canHandle->Instance == CAN) {
 800131e:	d001      	beq.n	8001324 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
    /* USER CODE BEGIN CAN_MspInit 1 */

    /* USER CODE END CAN_MspInit 1 */
  }
}
 8001320:	b009      	add	sp, #36	; 0x24
 8001322:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001324:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 800132a:	69da      	ldr	r2, [r3, #28]
 800132c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001330:	61da      	str	r2, [r3, #28]
 8001332:	69da      	ldr	r2, [r3, #28]
 8001334:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001338:	9200      	str	r2, [sp, #0]
 800133a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 800134c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001350:	2302      	movs	r3, #2
 8001352:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800135a:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800135e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f005 fbd8 	bl	8006b18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 15, 0);
 8001368:	4622      	mov	r2, r4
 800136a:	210f      	movs	r1, #15
 800136c:	2013      	movs	r0, #19
 800136e:	f005 f8b3 	bl	80064d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 8001372:	2013      	movs	r0, #19
 8001374:	f005 f8ee 	bl	8006554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 15, 0);
 8001378:	4622      	mov	r2, r4
 800137a:	210f      	movs	r1, #15
 800137c:	2014      	movs	r0, #20
 800137e:	f005 f8ab 	bl	80064d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001382:	2014      	movs	r0, #20
 8001384:	f005 f8e6 	bl	8006554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 8001388:	4622      	mov	r2, r4
 800138a:	2101      	movs	r1, #1
 800138c:	2015      	movs	r0, #21
 800138e:	f005 f8a3 	bl	80064d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 8001392:	2015      	movs	r0, #21
 8001394:	f005 f8de 	bl	8006554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 8001398:	4622      	mov	r2, r4
 800139a:	2101      	movs	r1, #1
 800139c:	2016      	movs	r0, #22
 800139e:	f005 f89b 	bl	80064d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 80013a2:	2016      	movs	r0, #22
 80013a4:	f005 f8d6 	bl	8006554 <HAL_NVIC_EnableIRQ>
}
 80013a8:	b009      	add	sp, #36	; 0x24
 80013aa:	bd30      	pop	{r4, r5, pc}
 80013ac:	40006400 	.word	0x40006400

080013b0 <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(uint16_t board_addr)
{
 80013b0:	b510      	push	{r4, lr}
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
  sFilterConfig.FilterBank = 0;
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5;      //speed
 80013b2:	3080      	adds	r0, #128	; 0x80
{
 80013b4:	b08a      	sub	sp, #40	; 0x28
  sFilterConfig.FilterIdLow = (0x310) << 5;                        //motor calib
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5;  //speed
 80013b6:	0182      	lsls	r2, r0, #6
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5;      //speed
 80013b8:	4610      	mov	r0, r2
  sFilterConfig.FilterIdLow = (0x310) << 5;                        //motor calib
 80013ba:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5;  //speed
 80013be:	3220      	adds	r2, #32
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80013c0:	2300      	movs	r3, #0
  sFilterConfig.FilterMaskIdHigh = (0x101 + board_addr * 2) << 5;  //speed
 80013c2:	e9cd 1201 	strd	r1, r2, [sp, #4]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80013c6:	2401      	movs	r4, #1
  sFilterConfig.FilterIdHigh = (0x100 + board_addr * 2) << 5;      //speed
 80013c8:	9000      	str	r0, [sp, #0]
  sFilterConfig.FilterMaskIdLow = (0x320) << 5;                    // notused
 80013ca:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;
  //sFilterConfig.SlaveStartFilterBank = 0; dont supported F3xx
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80013ce:	481b      	ldr	r0, [pc, #108]	; (800143c <CAN_Filter_Init+0x8c>)
  sFilterConfig.FilterBank = 0;
 80013d0:	9305      	str	r3, [sp, #20]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80013d2:	4669      	mov	r1, sp
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80013d4:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sFilterConfig.FilterMaskIdLow = (0x320) << 5;                    // notused
 80013d8:	9203      	str	r2, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013da:	9304      	str	r3, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80013dc:	9408      	str	r4, [sp, #32]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80013de:	f004 fd85 	bl	8005eec <HAL_CAN_ConfigFilter>
 80013e2:	b9f0      	cbnz	r0, 8001422 <CAN_Filter_Init+0x72>
    Error_Handler();
  }

  sFilterConfig.FilterIdHigh = (0x110) << 5;      // kick
  sFilterConfig.FilterIdLow = (0x010) << 5;       // power enable
 80013e4:	f44f 7300 	mov.w	r3, #512	; 0x200
  sFilterConfig.FilterIdHigh = (0x110) << 5;      // kick
 80013e8:	f44f 5408 	mov.w	r4, #8704	; 0x2200
  sFilterConfig.FilterMaskIdHigh = (0x000) << 5;  // emg stop
 80013ec:	2200      	movs	r2, #0
  sFilterConfig.FilterIdLow = (0x010) << 5;       // power enable
 80013ee:	e9cd 4300 	strd	r4, r3, [sp]
  sFilterConfig.FilterMaskIdLow = (0x001) << 5;   // error report
 80013f2:	2320      	movs	r3, #32
 80013f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
  sFilterConfig.FilterBank = 1;
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <CAN_Filter_Init+0x8c>)
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80013fa:	2201      	movs	r2, #1
 80013fc:	2301      	movs	r3, #1
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80013fe:	4669      	mov	r1, sp
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001400:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 8001404:	f004 fd72 	bl	8005eec <HAL_CAN_ConfigFilter>
 8001408:	b9a8      	cbnz	r0, 8001436 <CAN_Filter_Init+0x86>
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <CAN_Filter_Init+0x8c>)
 800140c:	2102      	movs	r1, #2
 800140e:	f004 feff 	bl	8006210 <HAL_CAN_ActivateNotification>
 8001412:	b968      	cbnz	r0, 8001430 <CAN_Filter_Init+0x80>
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK) {
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <CAN_Filter_Init+0x8c>)
 8001416:	2110      	movs	r1, #16
 8001418:	f004 fefa 	bl	8006210 <HAL_CAN_ActivateNotification>
 800141c:	b920      	cbnz	r0, 8001428 <CAN_Filter_Init+0x78>
    Error_Handler();
  }
}
 800141e:	b00a      	add	sp, #40	; 0x28
 8001420:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001422:	f002 fc33 	bl	8003c8c <Error_Handler>
 8001426:	e7dd      	b.n	80013e4 <CAN_Filter_Init+0x34>
    Error_Handler();
 8001428:	f002 fc30 	bl	8003c8c <Error_Handler>
}
 800142c:	b00a      	add	sp, #40	; 0x28
 800142e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001430:	f002 fc2c 	bl	8003c8c <Error_Handler>
 8001434:	e7ee      	b.n	8001414 <CAN_Filter_Init+0x64>
    Error_Handler();
 8001436:	f002 fc29 	bl	8003c8c <Error_Handler>
 800143a:	e7e6      	b.n	800140a <CAN_Filter_Init+0x5a>
 800143c:	20000310 	.word	0x20000310

08001440 <sendFloat>:

void sendFloat(uint32_t can_id, float data)
{
 8001440:	b500      	push	{lr}
 8001442:	b08b      	sub	sp, #44	; 0x2c
  can_msg_buf_t msg;
  CAN_TxHeaderTypeDef can_header;
  uint32_t can_mailbox;
  can_header.StdId = can_id;
  can_header.ExtId = 0;
 8001444:	2100      	movs	r1, #0
  can_header.RTR = CAN_RTR_DATA;
  can_header.DLC = 4;
 8001446:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 8001448:	e9cd 0104 	strd	r0, r1, [sp, #16]
  can_header.DLC = 4;
 800144c:	e9cd 1207 	strd	r1, r2, [sp, #28]
  can_header.IDE = CAN_ID_STD;
  can_header.TransmitGlobalTime = DISABLE;
  msg.value = data;
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001450:	eb0d 0302 	add.w	r3, sp, r2
  can_header.IDE = CAN_ID_STD;
 8001454:	9106      	str	r1, [sp, #24]
  can_header.TransmitGlobalTime = DISABLE;
 8001456:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 800145a:	4807      	ldr	r0, [pc, #28]	; (8001478 <sendFloat+0x38>)
  msg.value = data;
 800145c:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001460:	aa02      	add	r2, sp, #8
 8001462:	a904      	add	r1, sp, #16
 8001464:	f004 fdec 	bl	8006040 <HAL_CAN_AddTxMessage>
 8001468:	b118      	cbz	r0, 8001472 <sendFloat+0x32>
    ex_can_send_fail_cnt++;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <sendFloat+0x3c>)
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	6013      	str	r3, [r2, #0]
  }
}
 8001472:	b00b      	add	sp, #44	; 0x2c
 8001474:	f85d fb04 	ldr.w	pc, [sp], #4
 8001478:	20000310 	.word	0x20000310
 800147c:	2000030c 	.word	0x2000030c

08001480 <sendSpeed>:
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
    ex_can_send_fail_cnt++;
  }
}

void sendSpeed(int board_id, int motor, float speed, float angle) { sendSpeedInfo(0x200 + board_id * 2 + motor, speed, angle); }
 8001480:	b510      	push	{r4, lr}
 8001482:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8001486:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 8001488:	2200      	movs	r2, #0
void sendSpeed(int board_id, int motor, float speed, float angle) { sendSpeedInfo(0x200 + board_id * 2 + motor, speed, angle); }
 800148a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 8;
 800148e:	2408      	movs	r4, #8
 8001490:	e9cd 2407 	strd	r2, r4, [sp, #28]
  can_header.StdId = can_id;
 8001494:	9104      	str	r1, [sp, #16]
  can_header.ExtId = 0;
 8001496:	9205      	str	r2, [sp, #20]
  can_header.IDE = CAN_ID_STD;
 8001498:	9206      	str	r2, [sp, #24]
  can_header.TransmitGlobalTime = DISABLE;
 800149a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <sendSpeed+0x44>)
  msg.speed.rev_p_sec = rev_per_sec_;
 80014a0:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80014a4:	ab01      	add	r3, sp, #4
 80014a6:	eb0d 0204 	add.w	r2, sp, r4
 80014aa:	a904      	add	r1, sp, #16
  msg.speed.omni_angle = omni_angle_;
 80014ac:	edcd 0a03 	vstr	s1, [sp, #12]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80014b0:	f004 fdc6 	bl	8006040 <HAL_CAN_AddTxMessage>
 80014b4:	b118      	cbz	r0, 80014be <sendSpeed+0x3e>
    ex_can_send_fail_cnt++;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <sendSpeed+0x48>)
 80014b8:	6813      	ldr	r3, [r2, #0]
 80014ba:	3301      	adds	r3, #1
 80014bc:	6013      	str	r3, [r2, #0]
void sendSpeed(int board_id, int motor, float speed, float angle) { sendSpeedInfo(0x200 + board_id * 2 + motor, speed, angle); }
 80014be:	b00a      	add	sp, #40	; 0x28
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	bf00      	nop
 80014c4:	20000310 	.word	0x20000310
 80014c8:	2000030c 	.word	0x2000030c

080014cc <sendVoltage>:

void sendVoltage(int board_id, int motor, float voltage) { sendFloat(0x210 + board_id * 2 + motor, voltage); }
 80014cc:	b510      	push	{r4, lr}
 80014ce:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80014d2:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 80014d4:	2400      	movs	r4, #0
void sendVoltage(int board_id, int motor, float voltage) { sendFloat(0x210 + board_id * 2 + motor, voltage); }
 80014d6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 80014da:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 80014dc:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 80014e0:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80014e4:	eb0d 0302 	add.w	r3, sp, r2
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <sendVoltage+0x40>)
  can_header.IDE = CAN_ID_STD;
 80014ea:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80014ec:	aa02      	add	r2, sp, #8
 80014ee:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 80014f0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 80014f4:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80014f8:	f004 fda2 	bl	8006040 <HAL_CAN_AddTxMessage>
 80014fc:	b118      	cbz	r0, 8001506 <sendVoltage+0x3a>
    ex_can_send_fail_cnt++;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <sendVoltage+0x44>)
 8001500:	6813      	ldr	r3, [r2, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	6013      	str	r3, [r2, #0]
void sendVoltage(int board_id, int motor, float voltage) { sendFloat(0x210 + board_id * 2 + motor, voltage); }
 8001506:	b00a      	add	sp, #40	; 0x28
 8001508:	bd10      	pop	{r4, pc}
 800150a:	bf00      	nop
 800150c:	20000310 	.word	0x20000310
 8001510:	2000030c 	.word	0x2000030c

08001514 <sendTemperature>:

void sendTemperature(int board_id, int motor, float temp) { sendFloat(0x220 + board_id * 2 + motor, temp); }
 8001514:	b510      	push	{r4, lr}
 8001516:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800151a:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 800151c:	2400      	movs	r4, #0
void sendTemperature(int board_id, int motor, float temp) { sendFloat(0x220 + board_id * 2 + motor, temp); }
 800151e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 8001522:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 8001524:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 8001528:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 800152c:	eb0d 0302 	add.w	r3, sp, r2
 8001530:	4808      	ldr	r0, [pc, #32]	; (8001554 <sendTemperature+0x40>)
  can_header.IDE = CAN_ID_STD;
 8001532:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001534:	aa02      	add	r2, sp, #8
 8001536:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 8001538:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 800153c:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001540:	f004 fd7e 	bl	8006040 <HAL_CAN_AddTxMessage>
 8001544:	b118      	cbz	r0, 800154e <sendTemperature+0x3a>
    ex_can_send_fail_cnt++;
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <sendTemperature+0x44>)
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	6013      	str	r3, [r2, #0]
void sendTemperature(int board_id, int motor, float temp) { sendFloat(0x220 + board_id * 2 + motor, temp); }
 800154e:	b00a      	add	sp, #40	; 0x28
 8001550:	bd10      	pop	{r4, pc}
 8001552:	bf00      	nop
 8001554:	20000310 	.word	0x20000310
 8001558:	2000030c 	.word	0x2000030c

0800155c <sendCurrent>:

void sendCurrent(int board_id, int motor, float current) { sendFloat(0x230 + board_id * 2 + motor, current); }
 800155c:	b510      	push	{r4, lr}
 800155e:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8001562:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
 8001564:	2400      	movs	r4, #0
void sendCurrent(int board_id, int motor, float current) { sendFloat(0x230 + board_id * 2 + motor, current); }
 8001566:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  can_header.DLC = 4;
 800156a:	2204      	movs	r2, #4
  can_header.ExtId = 0;
 800156c:	e9cd 1404 	strd	r1, r4, [sp, #16]
  can_header.DLC = 4;
 8001570:	e9cd 4207 	strd	r4, r2, [sp, #28]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001574:	eb0d 0302 	add.w	r3, sp, r2
 8001578:	4808      	ldr	r0, [pc, #32]	; (800159c <sendCurrent+0x40>)
  can_header.IDE = CAN_ID_STD;
 800157a:	9406      	str	r4, [sp, #24]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 800157c:	aa02      	add	r2, sp, #8
 800157e:	a904      	add	r1, sp, #16
  can_header.TransmitGlobalTime = DISABLE;
 8001580:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  msg.value = data;
 8001584:	ed8d 0a02 	vstr	s0, [sp, #8]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 8001588:	f004 fd5a 	bl	8006040 <HAL_CAN_AddTxMessage>
 800158c:	b118      	cbz	r0, 8001596 <sendCurrent+0x3a>
    ex_can_send_fail_cnt++;
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <sendCurrent+0x44>)
 8001590:	6813      	ldr	r3, [r2, #0]
 8001592:	3301      	adds	r3, #1
 8001594:	6013      	str	r3, [r2, #0]
void sendCurrent(int board_id, int motor, float current) { sendFloat(0x230 + board_id * 2 + motor, current); }
 8001596:	b00a      	add	sp, #40	; 0x28
 8001598:	bd10      	pop	{r4, pc}
 800159a:	bf00      	nop
 800159c:	20000310 	.word	0x20000310
 80015a0:	2000030c 	.word	0x2000030c
 80015a4:	00000000 	.word	0x00000000

080015a8 <sendError>:

// id : motor
void sendError(uint16_t error_id, uint16_t error_info, float error_value)
{
 80015a8:	b510      	push	{r4, lr}
  can_msg_buf_t msg;
  CAN_TxHeaderTypeDef can_header;
  uint32_t can_mailbox;
  can_header.StdId = 0;
 80015aa:	ed9f 7b11 	vldr	d7, [pc, #68]	; 80015f0 <sendError+0x48>
{
 80015ae:	b08a      	sub	sp, #40	; 0x28
  can_header.ExtId = 0;
  can_header.RTR = CAN_RTR_DATA;
  can_header.DLC = 8;
 80015b0:	2408      	movs	r4, #8
  can_header.IDE = CAN_ID_STD;
  can_header.TransmitGlobalTime = DISABLE;
 80015b2:	2200      	movs	r2, #0
  msg.error.id = error_id;
 80015b4:	f8ad 0008 	strh.w	r0, [sp, #8]
  msg.error.info = error_info;
 80015b8:	f8ad 100a 	strh.w	r1, [sp, #10]
  can_header.TransmitGlobalTime = DISABLE;
 80015bc:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  msg.error.value = error_value;
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <sendError+0x50>)
  msg.error.value = error_value;
 80015c2:	ed8d 0a03 	vstr	s0, [sp, #12]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80015c6:	ab01      	add	r3, sp, #4
 80015c8:	eb0d 0204 	add.w	r2, sp, r4
 80015cc:	a904      	add	r1, sp, #16
  can_header.StdId = 0;
 80015ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 80015d2:	ed8d 7b06 	vstr	d7, [sp, #24]
  can_header.DLC = 8;
 80015d6:	9408      	str	r4, [sp, #32]
  if (HAL_CAN_AddTxMessage(&hcan, &can_header, msg.data, &can_mailbox) != 0) {
 80015d8:	f004 fd32 	bl	8006040 <HAL_CAN_AddTxMessage>
 80015dc:	b118      	cbz	r0, 80015e6 <sendError+0x3e>
    ex_can_send_fail_cnt++;
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <sendError+0x54>)
 80015e0:	6813      	ldr	r3, [r2, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	6013      	str	r3, [r2, #0]
  }
}
 80015e6:	b00a      	add	sp, #40	; 0x28
 80015e8:	bd10      	pop	{r4, pc}
 80015ea:	bf00      	nop
 80015ec:	f3af 8000 	nop.w
	...
 80015f8:	20000310 	.word	0x20000310
 80015fc:	2000030c 	.word	0x2000030c

08001600 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_DMA_Init+0x30>)
{
 8001602:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	f042 0201 	orr.w	r2, r2, #1
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	695b      	ldr	r3, [r3, #20]
{
 800160e:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 8001610:	210e      	movs	r1, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001612:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 8001616:	4608      	mov	r0, r1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001618:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 800161a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800161c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 14, 0);
 800161e:	f004 ff5b 	bl	80064d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001622:	200e      	movs	r0, #14

}
 8001624:	b003      	add	sp, #12
 8001626:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800162a:	f004 bf93 	b.w	8006554 <HAL_NVIC_EnableIRQ>
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <writeFlash>:
flash_t flash;
// 2K / page
// 128Kbyte -> 64page
// page : 0~
static void writeFlash(uint32_t board_id, float calib_m0, float calib_m1,float motor_calib_m0,float motor_calib_m1)
{
 8001634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001638:	b089      	sub	sp, #36	; 0x24
    FLASH_EraseInitTypeDef erase;
    uint32_t page_error = 0;
    erase.TypeErase = TYPEERASE_PAGES;
 800163a:	4925      	ldr	r1, [pc, #148]	; (80016d0 <writeFlash+0x9c>)
    HAL_FLASH_Lock();

    HAL_FLASH_Unlock();
    uint32_t flash_raw;
    flash_raw = board_id;
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CAN_ID, flash_raw);
 800163c:	4c24      	ldr	r4, [pc, #144]	; (80016d0 <writeFlash+0x9c>)
{
 800163e:	9001      	str	r0, [sp, #4]
    uint32_t page_error = 0;
 8001640:	2500      	movs	r5, #0
    erase.NbPages = 1;
 8001642:	2301      	movs	r3, #1
    erase.TypeErase = TYPEERASE_PAGES;
 8001644:	2000      	movs	r0, #0
{
 8001646:	ee10 9a10 	vmov	r9, s0
 800164a:	ee10 8a90 	vmov	r8, s1
 800164e:	ee11 7a10 	vmov	r7, s2
 8001652:	ee11 6a90 	vmov	r6, s3
    erase.NbPages = 1;
 8001656:	9306      	str	r3, [sp, #24]
    erase.TypeErase = TYPEERASE_PAGES;
 8001658:	e9cd 0104 	strd	r0, r1, [sp, #16]
    uint32_t page_error = 0;
 800165c:	9503      	str	r5, [sp, #12]
    HAL_FLASH_Unlock();
 800165e:	f005 f995 	bl	800698c <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase, &page_error);
 8001662:	a903      	add	r1, sp, #12
 8001664:	a804      	add	r0, sp, #16
 8001666:	f005 f9f5 	bl	8006a54 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 800166a:	f005 f9a3 	bl	80069b4 <HAL_FLASH_Lock>
    HAL_FLASH_Unlock();
 800166e:	f005 f98d 	bl	800698c <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_CAN_ID, flash_raw);
 8001672:	9a01      	ldr	r2, [sp, #4]
 8001674:	462b      	mov	r3, r5
 8001676:	4621      	mov	r1, r4
 8001678:	2002      	movs	r0, #2
 800167a:	f005 f8bb 	bl	80067f4 <HAL_FLASH_Program>
    memcpy(&flash_raw, &calib_m0, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_ENC_CALIB_M0, flash_raw);
 800167e:	464a      	mov	r2, r9
 8001680:	462b      	mov	r3, r5
 8001682:	4914      	ldr	r1, [pc, #80]	; (80016d4 <writeFlash+0xa0>)
 8001684:	2002      	movs	r0, #2
 8001686:	f005 f8b5 	bl	80067f4 <HAL_FLASH_Program>
    memcpy(&flash_raw, &calib_m1, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_ENC_CALIB_M1, flash_raw);
 800168a:	4642      	mov	r2, r8
 800168c:	462b      	mov	r3, r5
 800168e:	4912      	ldr	r1, [pc, #72]	; (80016d8 <writeFlash+0xa4>)
 8001690:	2002      	movs	r0, #2
 8001692:	f005 f8af 	bl	80067f4 <HAL_FLASH_Program>
    memcpy(&flash_raw, &motor_calib_m0, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_MOTOR_CALIB_CW_M0, flash_raw);
 8001696:	463a      	mov	r2, r7
 8001698:	462b      	mov	r3, r5
 800169a:	4910      	ldr	r1, [pc, #64]	; (80016dc <writeFlash+0xa8>)
 800169c:	2002      	movs	r0, #2
 800169e:	f005 f8a9 	bl	80067f4 <HAL_FLASH_Program>
    memcpy(&flash_raw, &motor_calib_m1, 4);
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR_MOTOR_CALIB_CW_M1, flash_raw);
 80016a2:	4632      	mov	r2, r6
 80016a4:	462b      	mov	r3, r5
 80016a6:	490e      	ldr	r1, [pc, #56]	; (80016e0 <writeFlash+0xac>)
 80016a8:	2002      	movs	r0, #2
 80016aa:	f005 f8a3 	bl	80067f4 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 80016ae:	f005 f981 	bl	80069b4 <HAL_FLASH_Lock>
void writeCanBoardID(uint32_t id) { writeFlash(id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
void writeEncCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, calib_m0, calib_m1, flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
void writeMotorCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, flash.calib[0], flash.calib[1], calib_m0, calib_m1); }

void loadFlashData(void){
    memcpy(&flash.board_id, (uint32_t *)FLASH_ADDR_CAN_ID, 4);
 80016b2:	e9d4 5200 	ldrd	r5, r2, [r4]
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <writeFlash+0xb0>)
    memcpy(&flash.calib[0], (uint32_t *)FLASH_ADDR_ENC_CALIB_M0, 4);
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80016be:	6922      	ldr	r2, [r4, #16]
    memcpy(&flash.calib[1], (uint32_t *)FLASH_ADDR_ENC_CALIB_M1, 4);
 80016c0:	e9c3 0501 	strd	r0, r5, [r3, #4]
    memcpy(&flash.rps_per_v_cw[0], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CW_M0, 4);
    memcpy(&flash.rps_per_v_cw[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CW_M1, 4);
 80016c4:	e9c3 1203 	strd	r1, r2, [r3, #12]
}
 80016c8:	b009      	add	sp, #36	; 0x24
 80016ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016ce:	bf00      	nop
 80016d0:	0801f000 	.word	0x0801f000
 80016d4:	0801f004 	.word	0x0801f004
 80016d8:	0801f008 	.word	0x0801f008
 80016dc:	0801f00c 	.word	0x0801f00c
 80016e0:	0801f010 	.word	0x0801f010
 80016e4:	20000338 	.word	0x20000338

080016e8 <writeCanBoardID>:
void writeCanBoardID(uint32_t id) { writeFlash(id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <writeCanBoardID+0x18>)
 80016ea:	edd3 1a04 	vldr	s3, [r3, #16]
 80016ee:	ed93 1a03 	vldr	s2, [r3, #12]
 80016f2:	edd3 0a01 	vldr	s1, [r3, #4]
 80016f6:	ed93 0a00 	vldr	s0, [r3]
 80016fa:	f7ff bf9b 	b.w	8001634 <writeFlash>
 80016fe:	bf00      	nop
 8001700:	20000338 	.word	0x20000338

08001704 <writeEncCalibrationValue>:
void writeEncCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, calib_m0, calib_m1, flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]); }
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <writeEncCalibrationValue+0x10>)
 8001706:	edd3 1a04 	vldr	s3, [r3, #16]
 800170a:	ed93 1a03 	vldr	s2, [r3, #12]
 800170e:	6898      	ldr	r0, [r3, #8]
 8001710:	f7ff bf90 	b.w	8001634 <writeFlash>
 8001714:	20000338 	.word	0x20000338

08001718 <writeMotorCalibrationValue>:
void writeMotorCalibrationValue(float calib_m0, float calib_m1) { writeFlash(flash.board_id, flash.calib[0], flash.calib[1], calib_m0, calib_m1); }
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <writeMotorCalibrationValue+0x18>)
 800171a:	eeb0 1a40 	vmov.f32	s2, s0
 800171e:	eef0 1a60 	vmov.f32	s3, s1
 8001722:	ed93 0a00 	vldr	s0, [r3]
 8001726:	edd3 0a01 	vldr	s1, [r3, #4]
 800172a:	6898      	ldr	r0, [r3, #8]
 800172c:	f7ff bf82 	b.w	8001634 <writeFlash>
 8001730:	20000338 	.word	0x20000338

08001734 <loadFlashData>:
void loadFlashData(void){
 8001734:	b410      	push	{r4}
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <loadFlashData+0x20>)
    memcpy(&flash.board_id, (uint32_t *)FLASH_ADDR_CAN_ID, 4);
 8001738:	4b07      	ldr	r3, [pc, #28]	; (8001758 <loadFlashData+0x24>)
 800173a:	e9d2 4100 	ldrd	r4, r1, [r2]
    memcpy(&flash.calib[0], (uint32_t *)FLASH_ADDR_ENC_CALIB_M0, 4);
 800173e:	6019      	str	r1, [r3, #0]
 8001740:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
 8001744:	6912      	ldr	r2, [r2, #16]
    memcpy(&flash.calib[1], (uint32_t *)FLASH_ADDR_ENC_CALIB_M1, 4);
 8001746:	e9c3 0401 	strd	r0, r4, [r3, #4]
    memcpy(&flash.rps_per_v_cw[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CW_M1, 4);
 800174a:	e9c3 1203 	strd	r1, r2, [r3, #12]

    // unused
    //memcpy(&flash.rps_per_v_ccw[0], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CCW_M0, 4);
    //memcpy(&flash.rps_per_v_ccw[1], (uint32_t *)FLASH_ADDR_MOTOR_CALIB_CCW_M1, 4);
}
 800174e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	0801f000 	.word	0x0801f000
 8001758:	20000338 	.word	0x20000338

0800175c <isPushedSW1>:
/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
inline bool isPushedSW1(void)
{
 800175c:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 800175e:	2101      	movs	r1, #1
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <isPushedSW1+0x14>)
 8001762:	f005 fac1 	bl	8006ce8 <HAL_GPIO_ReadPin>
}
 8001766:	fab0 f080 	clz	r0, r0
 800176a:	0940      	lsrs	r0, r0, #5
 800176c:	bd08      	pop	{r3, pc}
 800176e:	bf00      	nop
 8001770:	48000800 	.word	0x48000800

08001774 <isPushedSW2>:
inline bool isPushedSW2(void)
{
 8001774:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8001776:	2102      	movs	r1, #2
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <isPushedSW2+0x14>)
 800177a:	f005 fab5 	bl	8006ce8 <HAL_GPIO_ReadPin>
}
 800177e:	fab0 f080 	clz	r0, r0
 8001782:	0940      	lsrs	r0, r0, #5
 8001784:	bd08      	pop	{r3, pc}
 8001786:	bf00      	nop
 8001788:	48000800 	.word	0x48000800

0800178c <isPushedSW3>:
inline bool isPushedSW3(void)
{
 800178c:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 800178e:	2104      	movs	r1, #4
 8001790:	4803      	ldr	r0, [pc, #12]	; (80017a0 <isPushedSW3+0x14>)
 8001792:	f005 faa9 	bl	8006ce8 <HAL_GPIO_ReadPin>
}
 8001796:	fab0 f080 	clz	r0, r0
 800179a:	0940      	lsrs	r0, r0, #5
 800179c:	bd08      	pop	{r3, pc}
 800179e:	bf00      	nop
 80017a0:	48000800 	.word	0x48000800

080017a4 <isPushedSW4>:
inline bool isPushedSW4(void)
{
 80017a4:	b508      	push	{r3, lr}
  return !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3);
 80017a6:	2108      	movs	r1, #8
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <isPushedSW4+0x14>)
 80017aa:	f005 fa9d 	bl	8006ce8 <HAL_GPIO_ReadPin>
}
 80017ae:	fab0 f080 	clz	r0, r0
 80017b2:	0940      	lsrs	r0, r0, #5
 80017b4:	bd08      	pop	{r3, pc}
 80017b6:	bf00      	nop
 80017b8:	48000800 	.word	0x48000800

080017bc <setLedRed>:

inline void setLedRed(bool on){
 80017bc:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, on);
 80017be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c2:	4801      	ldr	r0, [pc, #4]	; (80017c8 <setLedRed+0xc>)
 80017c4:	f005 ba96 	b.w	8006cf4 <HAL_GPIO_WritePin>
 80017c8:	48000800 	.word	0x48000800

080017cc <setLedBlue>:
}
inline void setLedBlue(bool on){
 80017cc:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, on);
 80017ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d2:	4801      	ldr	r0, [pc, #4]	; (80017d8 <setLedBlue+0xc>)
 80017d4:	f005 ba8e 	b.w	8006cf4 <HAL_GPIO_WritePin>
 80017d8:	48000800 	.word	0x48000800

080017dc <setLedGreen>:
}
inline void setLedGreen(bool on){
 80017dc:	4602      	mov	r2, r0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, on);
 80017de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017e2:	4801      	ldr	r0, [pc, #4]	; (80017e8 <setLedGreen+0xc>)
 80017e4:	f005 ba86 	b.w	8006cf4 <HAL_GPIO_WritePin>
 80017e8:	48000800 	.word	0x48000800

080017ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	2400      	movs	r4, #0
{
 80017f0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80017f6:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <MX_GPIO_Init+0xb4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001800:	4e28      	ldr	r6, [pc, #160]	; (80018a4 <MX_GPIO_Init+0xb8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001802:	4f29      	ldr	r7, [pc, #164]	; (80018a8 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001804:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001808:	615a      	str	r2, [r3, #20]
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001810:	9200      	str	r2, [sp, #0]
 8001812:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800181a:	615a      	str	r2, [r3, #20]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001822:	9201      	str	r2, [sp, #4]
 8001824:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800182c:	615a      	str	r2, [r3, #20]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001834:	9202      	str	r2, [sp, #8]
 8001836:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001846:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001848:	4622      	mov	r2, r4
 800184a:	4630      	mov	r0, r6
 800184c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001850:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001852:	f005 fa4f 	bl	8006cf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001856:	4622      	mov	r2, r4
 8001858:	4638      	mov	r0, r7
 800185a:	21c0      	movs	r1, #192	; 0xc0
 800185c:	f005 fa4a 	bl	8006cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2501      	movs	r5, #1
 8001862:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	a904      	add	r1, sp, #16
 8001868:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001872:	f005 f951 	bl	8006b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001876:	220f      	movs	r2, #15
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001878:	4630      	mov	r0, r6
 800187a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800187c:	2300      	movs	r3, #0
 800187e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001882:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001884:	f005 f948 	bl	8006b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001888:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	a904      	add	r1, sp, #16
 800188c:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	e9cd 3504 	strd	r3, r5, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	e9cd 4406 	strd	r4, r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f005 f93f 	bl	8006b18 <HAL_GPIO_Init>

}
 800189a:	b00b      	add	sp, #44	; 0x2c
 800189c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	48000800 	.word	0x48000800
 80018a8:	48000400 	.word	0x48000400
 80018ac:	00000000 	.word	0x00000000

080018b0 <can_rx_callback.part.0>:
  float tmp_speed = 0;
  if (calib_process.enc_calib_cnt != 0 || calib_process.motor_calib_cnt != 0) {
    return;
  }
  can_rx_cnt++;
  tmp_speed = can_rx_buf.value;
 80018b0:	4839      	ldr	r0, [pc, #228]	; (8001998 <can_rx_callback.part.0+0xe8>)
 80018b2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800199c <can_rx_callback.part.0+0xec>
 80018b6:	edd0 7a00 	vldr	s15, [r0]
  can_rx_cnt++;
 80018ba:	4939      	ldr	r1, [pc, #228]	; (80019a0 <can_rx_callback.part.0+0xf0>)
 80018bc:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80019a4 <can_rx_callback.part.0+0xf4>
 80018c0:	680a      	ldr	r2, [r1, #0]
 80018c2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void can_rx_callback(void)
 80018ca:	b508      	push	{r3, lr}
  if (tmp_speed > SPEED_CMD_LIMIT_RPS) {
    tmp_speed = SPEED_CMD_LIMIT_RPS;
  } else if (tmp_speed < -SPEED_CMD_LIMIT_RPS) {
    tmp_speed = -SPEED_CMD_LIMIT_RPS;
  }
  switch (can_rx_header.StdId) {
 80018cc:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <can_rx_callback.part.0+0xf8>)
 80018ce:	bfb8      	it	lt
 80018d0:	eef0 7a66 	vmovlt.f32	s15, s13
 80018d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  can_rx_cnt++;
 80018de:	f102 0201 	add.w	r2, r2, #1
 80018e2:	bf88      	it	hi
 80018e4:	eef0 7a47 	vmovhi.f32	s15, s14
  switch (can_rx_header.StdId) {
 80018e8:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
  can_rx_cnt++;
 80018ec:	600a      	str	r2, [r1, #0]
  switch (can_rx_header.StdId) {
 80018ee:	d823      	bhi.n	8001938 <can_rx_callback.part.0+0x88>
 80018f0:	2bff      	cmp	r3, #255	; 0xff
 80018f2:	d914      	bls.n	800191e <can_rx_callback.part.0+0x6e>
 80018f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d80f      	bhi.n	800191c <can_rx_callback.part.0+0x6c>
 80018fc:	e8df f003 	tbb	[pc, r3]
 8001900:	32093209 	.word	0x32093209
 8001904:	0e0e0e0e 	.word	0x0e0e0e0e
 8001908:	0e0e0e0e 	.word	0x0e0e0e0e
 800190c:	0e0e0e0e 	.word	0x0e0e0e0e
 8001910:	38          	.byte	0x38
 8001911:	00          	.byte	0x00
      cmd[1].speed = tmp_speed;
      cmd[1].timeout_cnt = 100;
      break;

    case 0x102:
      cmd[0].speed = tmp_speed;
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <can_rx_callback.part.0+0xfc>)
      cmd[0].timeout_cnt = 100;
 8001914:	2264      	movs	r2, #100	; 0x64
      cmd[0].speed = tmp_speed;
 8001916:	edc3 7a00 	vstr	s15, [r3]
      cmd[0].timeout_cnt = 100;
 800191a:	611a      	str	r2, [r3, #16]
      }
      break;
    default:
      break;
  }
}
 800191c:	bd08      	pop	{r3, pc}
  switch (can_rx_header.StdId) {
 800191e:	2b10      	cmp	r3, #16
 8001920:	d1fc      	bne.n	800191c <can_rx_callback.part.0+0x6c>
      if (can_rx_buf.data[0] == 0) {
 8001922:	7803      	ldrb	r3, [r0, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f9      	bne.n	800191c <can_rx_callback.part.0+0x6c>
        if (can_rx_buf.data[1] == 0) {
 8001928:	7843      	ldrb	r3, [r0, #1]
 800192a:	b35b      	cbz	r3, 8001984 <can_rx_callback.part.0+0xd4>
        } else if (can_rx_buf.data[1] == 1) {
 800192c:	2b01      	cmp	r3, #1
 800192e:	d1f5      	bne.n	800191c <can_rx_callback.part.0+0x6c>
          sys.power_enable_cnt = 100;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <can_rx_callback.part.0+0x100>)
 8001932:	2264      	movs	r2, #100	; 0x64
 8001934:	609a      	str	r2, [r3, #8]
}
 8001936:	bd08      	pop	{r3, pc}
  switch (can_rx_header.StdId) {
 8001938:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 800193c:	d1ee      	bne.n	800191c <can_rx_callback.part.0+0x6c>
  }
}

void startCalibrationMode(void)
{
  p("calibration mode!\n");
 800193e:	481d      	ldr	r0, [pc, #116]	; (80019b4 <can_rx_callback.part.0+0x104>)
 8001940:	f003 f96e 	bl	8004c20 <p>

  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8001944:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8001990 <can_rx_callback.part.0+0xe0>
 8001948:	491b      	ldr	r1, [pc, #108]	; (80019b8 <can_rx_callback.part.0+0x108>)
  calib_process.motor_calib_cnt = 0;
  sys.manual_offset_radian = 0;

  cmd[0].speed = 0;
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <can_rx_callback.part.0+0xfc>)
  sys.manual_offset_radian = 0;
 800194c:	4818      	ldr	r0, [pc, #96]	; (80019b0 <can_rx_callback.part.0+0x100>)
 800194e:	2200      	movs	r2, #0
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8001950:	ed81 7b00 	vstr	d7, [r1]
  cmd[1].speed = 0;

  cmd[0].out_v_final = 2.0;
 8001954:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  sys.manual_offset_radian = 0;
 8001958:	6042      	str	r2, [r0, #4]
  cmd[0].speed = 0;
 800195a:	601a      	str	r2, [r3, #0]
  cmd[1].speed = 0;
 800195c:	615a      	str	r2, [r3, #20]
  cmd[0].out_v_final = 2.0;
 800195e:	60d9      	str	r1, [r3, #12]
  cmd[1].out_v_final = 2.0;
 8001960:	6219      	str	r1, [r3, #32]
}
 8001962:	bd08      	pop	{r3, pc}
      cmd[1].speed = tmp_speed;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <can_rx_callback.part.0+0xfc>)
      cmd[1].timeout_cnt = 100;
 8001966:	2264      	movs	r2, #100	; 0x64
      cmd[1].speed = tmp_speed;
 8001968:	edc3 7a05 	vstr	s15, [r3, #20]
      cmd[1].timeout_cnt = 100;
 800196c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800196e:	bd08      	pop	{r3, pc}
      if (can_rx_buf.data[0] == 3) {
 8001970:	7803      	ldrb	r3, [r0, #0]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d1d2      	bne.n	800191c <can_rx_callback.part.0+0x6c>
        setPwmOutPutFreeWheel();
 8001976:	f002 ffe3 	bl	8004940 <setPwmOutPutFreeWheel>
        sys.free_wheel_cnt = KICK_FREE_WHEEL_CNT;
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <can_rx_callback.part.0+0x100>)
 800197c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001980:	601a      	str	r2, [r3, #0]
}
 8001982:	bd08      	pop	{r3, pc}
 8001984:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
          HAL_NVIC_SystemReset();
 8001988:	f004 bdf2 	b.w	8006570 <HAL_NVIC_SystemReset>
 800198c:	f3af 8000 	nop.w
 8001990:	000009c4 	.word	0x000009c4
 8001994:	00000000 	.word	0x00000000
 8001998:	200003c8 	.word	0x200003c8
 800199c:	c2480000 	.word	0xc2480000
 80019a0:	200003d0 	.word	0x200003d0
 80019a4:	42480000 	.word	0x42480000
 80019a8:	200003d4 	.word	0x200003d4
 80019ac:	200003f0 	.word	0x200003f0
 80019b0:	20000504 	.word	0x20000504
 80019b4:	0800d3c0 	.word	0x0800d3c0
 80019b8:	200003b0 	.word	0x200003b0

080019bc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) { uart_rx_flag = true; }
 80019bc:	4b01      	ldr	r3, [pc, #4]	; (80019c4 <HAL_UART_RxCpltCallback+0x8>)
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	4770      	bx	lr
 80019c4:	2000051e 	.word	0x2000051e

080019c8 <checkAngleCalibMode>:
{
 80019c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  calib[motor].xy_field.radian_ave_x += cos(ma702[motor].output_radian);
 80019cc:	f8df 9138 	ldr.w	r9, [pc, #312]	; 8001b08 <checkAngleCalibMode+0x140>
 80019d0:	4d4b      	ldr	r5, [pc, #300]	; (8001b00 <checkAngleCalibMode+0x138>)
 80019d2:	eb00 08c0 	add.w	r8, r0, r0, lsl #3
 80019d6:	eb09 0888 	add.w	r8, r9, r8, lsl #2
{
 80019da:	ed2d 8b02 	vpush	{d8}
 80019de:	4606      	mov	r6, r0
  calib[motor].xy_field.radian_ave_x += cos(ma702[motor].output_radian);
 80019e0:	f8d8 0000 	ldr.w	r0, [r8]
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_f2d>
 80019e8:	ec41 0b10 	vmov	d0, r0, r1
 80019ec:	ec41 0b18 	vmov	d8, r0, r1
 80019f0:	272c      	movs	r7, #44	; 0x2c
 80019f2:	f007 fb69 	bl	80090c8 <cos>
 80019f6:	fb06 f707 	mul.w	r7, r6, r7
 80019fa:	19ec      	adds	r4, r5, r7
 80019fc:	ec5b ab10 	vmov	sl, fp, d0
 8001a00:	6960      	ldr	r0, [r4, #20]
 8001a02:	f7fe fda1 	bl	8000548 <__aeabi_f2d>
 8001a06:	4652      	mov	r2, sl
 8001a08:	465b      	mov	r3, fp
 8001a0a:	f7fe fc3f 	bl	800028c <__adddf3>
 8001a0e:	f7ff f8eb 	bl	8000be8 <__aeabi_d2f>
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001a12:	eeb0 0a48 	vmov.f32	s0, s16
 8001a16:	eef0 0a68 	vmov.f32	s1, s17
  calib[motor].xy_field.radian_ave_x += cos(ma702[motor].output_radian);
 8001a1a:	6160      	str	r0, [r4, #20]
 8001a1c:	ee08 0a10 	vmov	s16, r0
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001a20:	f007 fba6 	bl	8009170 <sin>
 8001a24:	ec5b ab10 	vmov	sl, fp, d0
 8001a28:	69a0      	ldr	r0, [r4, #24]
 8001a2a:	f7fe fd8d 	bl	8000548 <__aeabi_f2d>
 8001a2e:	4652      	mov	r2, sl
 8001a30:	465b      	mov	r3, fp
 8001a32:	f7fe fc2b 	bl	800028c <__adddf3>
 8001a36:	f7ff f8d7 	bl	8000be8 <__aeabi_d2f>
  calib[motor].ave_cnt++;
 8001a3a:	59eb      	ldr	r3, [r5, r7]
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_process.force_rotation_speed > 0) {
 8001a3c:	6862      	ldr	r2, [r4, #4]
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001a3e:	61a0      	str	r0, [r4, #24]
  calib[motor].ave_cnt++;
 8001a40:	3301      	adds	r3, #1
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_process.force_rotation_speed > 0) {
 8001a42:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  calib[motor].xy_field.radian_ave_y += sin(ma702[motor].output_radian);
 8001a46:	ee07 0a10 	vmov	s14, r0
  calib[motor].ave_cnt++;
 8001a4a:	51eb      	str	r3, [r5, r7]
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_process.force_rotation_speed > 0) {
 8001a4c:	dd2b      	ble.n	8001aa6 <checkAngleCalibMode+0xde>
 8001a4e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001a52:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a56:	da1e      	bge.n	8001a96 <checkAngleCalibMode+0xce>
 8001a58:	492a      	ldr	r1, [pc, #168]	; (8001b04 <checkAngleCalibMode+0x13c>)
 8001a5a:	edd1 7a04 	vldr	s15, [r1, #16]
 8001a5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	dd14      	ble.n	8001a96 <checkAngleCalibMode+0xce>
    calib[motor].xy_field.result_cw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calib[motor].result_ccw_cnt++;
 8001a74:	68e3      	ldr	r3, [r4, #12]
    calib[motor].xy_field.radian_ave_x = 0;
 8001a76:	6160      	str	r0, [r4, #20]
    calib[motor].xy_field.result_cw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001a78:	ee88 6a27 	vdiv.f32	s12, s16, s15
    calib[motor].result_ccw_cnt++;
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	60e3      	str	r3, [r4, #12]
    calib_process.print_flag = true;
 8001a80:	2301      	movs	r3, #1
 8001a82:	750b      	strb	r3, [r1, #20]
    calib[motor].ave_cnt = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	51eb      	str	r3, [r5, r7]
    calib[motor].xy_field.radian_ave_y = 0;
 8001a88:	61a0      	str	r0, [r4, #24]
    calib[motor].xy_field.result_cw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001a8a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    calib[motor].xy_field.result_cw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001a8e:	ed84 6a07 	vstr	s12, [r4, #28]
    calib[motor].xy_field.result_cw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001a92:	edc4 6a08 	vstr	s13, [r4, #32]
}
 8001a96:	ecbd 8b02 	vpop	{d8}
  calib[motor].pre_raw = ma702[motor].enc_raw;
 8001a9a:	232c      	movs	r3, #44	; 0x2c
 8001a9c:	fb03 5006 	mla	r0, r3, r6, r5
 8001aa0:	6042      	str	r2, [r0, #4]
}
 8001aa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (calib[motor].pre_raw < HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw > HARF_OF_ENC_CNT_MAX && calib_process.force_rotation_speed < 0) {
 8001aa6:	d024      	beq.n	8001af2 <checkAngleCalibMode+0x12a>
 8001aa8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8001aac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ab0:	ddf1      	ble.n	8001a96 <checkAngleCalibMode+0xce>
 8001ab2:	4914      	ldr	r1, [pc, #80]	; (8001b04 <checkAngleCalibMode+0x13c>)
 8001ab4:	edd1 7a04 	vldr	s15, [r1, #16]
 8001ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	d5e7      	bpl.n	8001a96 <checkAngleCalibMode+0xce>
    calib[motor].xy_field.result_ccw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calib[motor].result_cw_cnt++;
 8001ace:	68a3      	ldr	r3, [r4, #8]
    calib[motor].xy_field.radian_ave_x = 0;
 8001ad0:	6160      	str	r0, [r4, #20]
    calib[motor].xy_field.result_ccw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001ad2:	ee88 6a27 	vdiv.f32	s12, s16, s15
    calib[motor].result_cw_cnt++;
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60a3      	str	r3, [r4, #8]
    calib[motor].ave_cnt = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	51eb      	str	r3, [r5, r7]
    calib_process.print_flag = true;
 8001ade:	2301      	movs	r3, #1
    calib[motor].xy_field.radian_ave_y = 0;
 8001ae0:	61a0      	str	r0, [r4, #24]
    calib_process.print_flag = true;
 8001ae2:	750b      	strb	r3, [r1, #20]
    calib[motor].xy_field.result_ccw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001ae4:	eec7 6a27 	vdiv.f32	s13, s14, s15
    calib[motor].xy_field.result_ccw_x = calib[motor].xy_field.radian_ave_x / calib[motor].ave_cnt;
 8001ae8:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
    calib[motor].xy_field.result_ccw_y = calib[motor].xy_field.radian_ave_y / calib[motor].ave_cnt;
 8001aec:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
 8001af0:	e7d1      	b.n	8001a96 <checkAngleCalibMode+0xce>
  if (calib[motor].pre_raw > HARF_OF_ENC_CNT_MAX && ma702[motor].enc_raw < HARF_OF_ENC_CNT_MAX && calib_process.force_rotation_speed > 0) {
 8001af2:	2324      	movs	r3, #36	; 0x24
 8001af4:	fb03 9906 	mla	r9, r3, r6, r9
 8001af8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001afc:	e7cb      	b.n	8001a96 <checkAngleCalibMode+0xce>
 8001afe:	bf00      	nop
 8001b00:	20000354 	.word	0x20000354
 8001b04:	200003b0 	.word	0x200003b0
 8001b08:	20000588 	.word	0x20000588
 8001b0c:	00000000 	.word	0x00000000

08001b10 <HAL_TIM_PeriodElapsedCallback>:
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
  interrupt_timer_cnt++;
 8001b12:	4959      	ldr	r1, [pc, #356]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x168>)
  motor_select_toggle = !motor_select_toggle;
 8001b14:	4c59      	ldr	r4, [pc, #356]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x16c>)
  interrupt_timer_cnt++;
 8001b16:	680a      	ldr	r2, [r1, #0]
  motor_select_toggle = !motor_select_toggle;
 8001b18:	7823      	ldrb	r3, [r4, #0]
{
 8001b1a:	ed2d 8b02 	vpush	{d8}
  interrupt_timer_cnt++;
 8001b1e:	3201      	adds	r2, #1
  motor_select_toggle = !motor_select_toggle;
 8001b20:	f083 0301 	eor.w	r3, r3, #1
{
 8001b24:	b083      	sub	sp, #12
  setLedBlue(false);
 8001b26:	2000      	movs	r0, #0
  interrupt_timer_cnt++;
 8001b28:	600a      	str	r2, [r1, #0]
  motor_select_toggle = !motor_select_toggle;
 8001b2a:	7023      	strb	r3, [r4, #0]
  setLedBlue(false);
 8001b2c:	f7ff fe4e 	bl	80017cc <setLedBlue>
  if (calib_process.enc_calib_cnt != 0) {
 8001b30:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2a00      	cmp	r2, #0
 8001b36:	d03a      	beq.n	8001bae <HAL_TIM_PeriodElapsedCallback+0x9e>
  sys.manual_offset_radian += calib_process.force_rotation_speed;
 8001b38:	4d52      	ldr	r5, [pc, #328]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001b3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b3e:	ed95 8a01 	vldr	s16, [r5, #4]
    calibrationProcess_itr(motor_select_toggle);
 8001b42:	7824      	ldrb	r4, [r4, #0]
  sys.manual_offset_radian += calib_process.force_rotation_speed;
 8001b44:	ee38 8a27 	vadd.f32	s16, s16, s15
  if (sys.manual_offset_radian > M_PI * 2) {
 8001b48:	ee18 0a10 	vmov	r0, s16
 8001b4c:	f7fe fcfc 	bl	8000548 <__aeabi_f2d>
 8001b50:	a347      	add	r3, pc, #284	; (adr r3, 8001c70 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	4606      	mov	r6, r0
 8001b58:	460f      	mov	r7, r1
 8001b5a:	f7fe ffdd 	bl	8000b18 <__aeabi_dcmpgt>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d15b      	bne.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x10a>
  if (sys.manual_offset_radian < 0) {
 8001b62:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  sys.manual_offset_radian += calib_process.force_rotation_speed;
 8001b6a:	ed85 8a01 	vstr	s16, [r5, #4]
  if (sys.manual_offset_radian < 0) {
 8001b6e:	d46a      	bmi.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0x136>
  updateADC(motor);
 8001b70:	4620      	mov	r0, r4
 8001b72:	f7ff fb45 	bl	8001200 <updateADC>
  updateMA702(motor);
 8001b76:	4620      	mov	r0, r4
 8001b78:	f002 fa7a 	bl	8004070 <updateMA702>
  setOutputRadianMotor(motor, sys.manual_offset_radian, cmd[motor].out_v_final, getBatteryVoltage(), MOTOR_CALIB_VOLTAGE_HIGH);
 8001b7c:	4b42      	ldr	r3, [pc, #264]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001b7e:	ed95 8a01 	vldr	s16, [r5, #4]
 8001b82:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001b86:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001b8a:	edd3 0a03 	vldr	s1, [r3, #12]
 8001b8e:	edcd 0a01 	vstr	s1, [sp, #4]
 8001b92:	f7ff fa95 	bl	80010c0 <getBatteryVoltage>
 8001b96:	eddd 0a01 	vldr	s1, [sp, #4]
 8001b9a:	eeb0 1a40 	vmov.f32	s2, s0
 8001b9e:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8001ba2:	eeb0 0a48 	vmov.f32	s0, s16
 8001ba6:	4620      	mov	r0, r4
 8001ba8:	f002 fdea 	bl	8004780 <setOutputRadianMotor>
}
 8001bac:	e02d      	b.n	8001c0a <HAL_TIM_PeriodElapsedCallback+0xfa>
    motorProcess_itr(motor_select_toggle);
 8001bae:	7824      	ldrb	r4, [r4, #0]
  updateADC(motor);
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff fb25 	bl	8001200 <updateADC>
  updateMA702(motor);
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f002 fa5a 	bl	8004070 <updateMA702>
  setOutputRadianMotor(motor, ma702[motor].output_radian + enc_offset[motor].final, cmd[motor].out_v_final, getBatteryVoltage(), motor_param[motor].output_voltage_limit);
 8001bbc:	4933      	ldr	r1, [pc, #204]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001bbe:	4a34      	ldr	r2, [pc, #208]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001bc0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001bc4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8001bc8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001bcc:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001bce:	edd2 7a00 	vldr	s15, [r2]
 8001bd2:	ed91 8a00 	vldr	s16, [r1]
 8001bd6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001bda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001bde:	edd3 0a03 	vldr	s1, [r3, #12]
 8001be2:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001be6:	edcd 0a01 	vstr	s1, [sp, #4]
 8001bea:	f7ff fa69 	bl	80010c0 <getBatteryVoltage>
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001bf0:	eddd 0a01 	vldr	s1, [sp, #4]
 8001bf4:	00e2      	lsls	r2, r4, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	eeb0 1a40 	vmov.f32	s2, s0
 8001bfc:	edd3 1a01 	vldr	s3, [r3, #4]
 8001c00:	eeb0 0a48 	vmov.f32	s0, s16
 8001c04:	4620      	mov	r0, r4
 8001c06:	f002 fdbb 	bl	8004780 <setOutputRadianMotor>
  setLedBlue(true);
 8001c0a:	2001      	movs	r0, #1
}
 8001c0c:	b003      	add	sp, #12
 8001c0e:	ecbd 8b02 	vpop	{d8}
 8001c12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  setLedBlue(true);
 8001c16:	f7ff bdd9 	b.w	80017cc <setLedBlue>
    sys.manual_offset_radian -= M_PI * 2;
 8001c1a:	a315      	add	r3, pc, #84	; (adr r3, 8001c70 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	4630      	mov	r0, r6
 8001c22:	4639      	mov	r1, r7
 8001c24:	f7fe fb30 	bl	8000288 <__aeabi_dsub>
 8001c28:	f7fe ffde 	bl	8000be8 <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	ee08 3a10 	vmov	s16, r3
    checkAngleCalibMode(!motor);
 8001c32:	f084 0001 	eor.w	r0, r4, #1
    sys.manual_offset_radian -= M_PI * 2;
 8001c36:	606b      	str	r3, [r5, #4]
    checkAngleCalibMode(!motor);
 8001c38:	f7ff fec6 	bl	80019c8 <checkAngleCalibMode>
  if (sys.manual_offset_radian < 0) {
 8001c3c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	d594      	bpl.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x60>
    sys.manual_offset_radian += M_PI * 2;
 8001c46:	ee18 0a10 	vmov	r0, s16
 8001c4a:	f7fe fc7d 	bl	8000548 <__aeabi_f2d>
 8001c4e:	a308      	add	r3, pc, #32	; (adr r3, 8001c70 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	f7fe fb1a 	bl	800028c <__adddf3>
 8001c58:	f7fe ffc6 	bl	8000be8 <__aeabi_d2f>
 8001c5c:	4603      	mov	r3, r0
    checkAngleCalibMode(!motor);
 8001c5e:	f084 0001 	eor.w	r0, r4, #1
    sys.manual_offset_radian += M_PI * 2;
 8001c62:	606b      	str	r3, [r5, #4]
    checkAngleCalibMode(!motor);
 8001c64:	f7ff feb0 	bl	80019c8 <checkAngleCalibMode>
 8001c68:	e782      	b.n	8001b70 <HAL_TIM_PeriodElapsedCallback+0x60>
 8001c6a:	bf00      	nop
 8001c6c:	f3af 8000 	nop.w
 8001c70:	54442d18 	.word	0x54442d18
 8001c74:	401921fb 	.word	0x401921fb
 8001c78:	2000043c 	.word	0x2000043c
 8001c7c:	2000047c 	.word	0x2000047c
 8001c80:	200003b0 	.word	0x200003b0
 8001c84:	20000504 	.word	0x20000504
 8001c88:	200003f0 	.word	0x200003f0
 8001c8c:	20000588 	.word	0x20000588
 8001c90:	20000424 	.word	0x20000424
 8001c94:	20000444 	.word	0x20000444

08001c98 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8001c98:	b508      	push	{r3, lr}
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f004 fa26 	bl	80060f0 <HAL_CAN_GetRxMessage>
 8001ca4:	b108      	cbz	r0, 8001caa <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001ca8:	e7fe      	b.n	8001ca8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
  if (calib_process.enc_calib_cnt != 0 || calib_process.motor_calib_cnt != 0) {
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001cac:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	d103      	bne.n	8001cbc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
}
 8001cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001cb8:	f7ff bdfa 	b.w	80018b0 <can_rx_callback.part.0>
 8001cbc:	bd08      	pop	{r3, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200003d4 	.word	0x200003d4
 8001cc4:	200003c8 	.word	0x200003c8
 8001cc8:	200003b0 	.word	0x200003b0

08001ccc <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 8001ccc:	b508      	push	{r3, lr}
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &can_rx_header, can_rx_buf.data) != HAL_OK) {
 8001cce:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	f004 fa0c 	bl	80060f0 <HAL_CAN_GetRxMessage>
 8001cd8:	b108      	cbz	r0, 8001cde <HAL_CAN_RxFifo1MsgPendingCallback+0x12>
 8001cda:	b672      	cpsid	i
  while (1) {
 8001cdc:	e7fe      	b.n	8001cdc <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
  if (calib_process.enc_calib_cnt != 0 || calib_process.motor_calib_cnt != 0) {
 8001cde:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8001ce0:	e9d2 3200 	ldrd	r3, r2, [r2]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	d103      	bne.n	8001cf0 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>
}
 8001ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001cec:	f7ff bde0 	b.w	80018b0 <can_rx_callback.part.0>
 8001cf0:	bd08      	pop	{r3, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200003d4 	.word	0x200003d4
 8001cf8:	200003c8 	.word	0x200003c8
 8001cfc:	200003b0 	.word	0x200003b0

08001d00 <runMode>:
{
 8001d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sys.free_wheel_cnt > 0) {
 8001d04:	4db0      	ldr	r5, [pc, #704]	; (8001fc8 <runMode+0x2c8>)
{
 8001d06:	ed2d 8b04 	vpush	{d8-d9}
  if (sys.free_wheel_cnt > 0) {
 8001d0a:	682b      	ldr	r3, [r5, #0]
{
 8001d0c:	b087      	sub	sp, #28
  if (sys.free_wheel_cnt > 0) {
 8001d0e:	b11b      	cbz	r3, 8001d18 <runMode+0x18>
    sys.free_wheel_cnt--;
 8001d10:	3b01      	subs	r3, #1
 8001d12:	602b      	str	r3, [r5, #0]
    if (sys.free_wheel_cnt == 0) {
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d06a      	beq.n	8001dee <runMode+0xee>
  if (sys.manual_offset_radian > M_PI * 2) {
 8001d18:	6868      	ldr	r0, [r5, #4]
 8001d1a:	f7fe fc15 	bl	8000548 <__aeabi_f2d>
 8001d1e:	a3a8      	add	r3, pc, #672	; (adr r3, 8001fc0 <runMode+0x2c0>)
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	f7fe fef8 	bl	8000b18 <__aeabi_dcmpgt>
 8001d28:	b108      	cbz	r0, 8001d2e <runMode+0x2e>
    sys.manual_offset_radian = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	606b      	str	r3, [r5, #4]
 8001d2e:	f8df a2e8 	ldr.w	sl, [pc, #744]	; 8002018 <runMode+0x318>
 8001d32:	f8df b2b8 	ldr.w	fp, [pc, #696]	; 8001fec <runMode+0x2ec>
 8001d36:	f8df 92e4 	ldr.w	r9, [pc, #740]	; 800201c <runMode+0x31c>
 8001d3a:	f8df 82e4 	ldr.w	r8, [pc, #740]	; 8002020 <runMode+0x320>
      cmd[i].speed = -40.0;
 8001d3e:	ed9f 9aa3 	vldr	s18, [pc, #652]	; 8001fcc <runMode+0x2cc>
      cmd[i].out_v = 0;
 8001d42:	ed9f 8aa3 	vldr	s16, [pc, #652]	; 8001fd0 <runMode+0x2d0>
 8001d46:	4ea3      	ldr	r6, [pc, #652]	; (8001fd4 <runMode+0x2d4>)
 8001d48:	4657      	mov	r7, sl
{
 8001d4a:	2400      	movs	r4, #0
      cmd[i].speed = -20.0;
 8001d4c:	eefb 8a04 	vmov.f32	s17, #180	; 0xc1a00000 -20.0
    if (isPushedSW1()) {
 8001d50:	f7ff fd04 	bl	800175c <isPushedSW1>
 8001d54:	2800      	cmp	r0, #0
 8001d56:	d03b      	beq.n	8001dd0 <runMode+0xd0>
      cmd[i].speed = 10.0;
 8001d58:	4b9f      	ldr	r3, [pc, #636]	; (8001fd8 <runMode+0x2d8>)
 8001d5a:	f8cb 3000 	str.w	r3, [fp]
    speedToOutputVoltage(&pid[i], &motor_real[i], &motor_param[i], &cmd[i]);
 8001d5e:	465b      	mov	r3, fp
 8001d60:	eb09 0204 	add.w	r2, r9, r4
 8001d64:	4631      	mov	r1, r6
 8001d66:	4638      	mov	r0, r7
 8001d68:	f001 ff92 	bl	8003c90 <speedToOutputVoltage>
    if (cmd[i].timeout_cnt > 0) {
 8001d6c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001d70:	2b00      	cmp	r3, #0
      cmd[i].timeout_cnt--;
 8001d72:	bfc4      	itt	gt
 8001d74:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8001d78:	f8cb 3010 	strgt.w	r3, [fp, #16]
    if (cmd[i].timeout_cnt == 0) {
 8001d7c:	b90b      	cbnz	r3, 8001d82 <runMode+0x82>
      cmd[i].out_v = 0;
 8001d7e:	ed8b 8a02 	vstr	s16, [fp, #8]
    if (sys.free_wheel_cnt > 0) {
 8001d82:	682b      	ldr	r3, [r5, #0]
    setFinalOutputVoltage(&cmd[i], &enc_offset[i], sys.manual_offset_radian);  // select Vq-offset angle
 8001d84:	ed95 0a01 	vldr	s0, [r5, #4]
    if (sys.free_wheel_cnt > 0) {
 8001d88:	b10b      	cbz	r3, 8001d8e <runMode+0x8e>
      cmd[i].out_v = 0;
 8001d8a:	ed8b 8a02 	vstr	s16, [fp, #8]
    setFinalOutputVoltage(&cmd[i], &enc_offset[i], sys.manual_offset_radian);  // select Vq-offset angle
 8001d8e:	eb08 0104 	add.w	r1, r8, r4
 8001d92:	4658      	mov	r0, fp
  for (int i = 0; i < 2; i++) {
 8001d94:	3408      	adds	r4, #8
    setFinalOutputVoltage(&cmd[i], &enc_offset[i], sys.manual_offset_radian);  // select Vq-offset angle
 8001d96:	f001 ffb1 	bl	8003cfc <setFinalOutputVoltage>
  for (int i = 0; i < 2; i++) {
 8001d9a:	2c10      	cmp	r4, #16
 8001d9c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8001da0:	f106 0614 	add.w	r6, r6, #20
 8001da4:	f10b 0b14 	add.w	fp, fp, #20
 8001da8:	d1d2      	bne.n	8001d50 <runMode+0x50>
  print_cnt++;
 8001daa:	4c8c      	ldr	r4, [pc, #560]	; (8001fdc <runMode+0x2dc>)
 8001dac:	7823      	ldrb	r3, [r4, #0]
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	7023      	strb	r3, [r4, #0]
  switch (print_cnt) {
 8001db4:	3b01      	subs	r3, #1
 8001db6:	2b07      	cmp	r3, #7
 8001db8:	f200 8159 	bhi.w	800206e <runMode+0x36e>
 8001dbc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001dc0:	001a0085 	.word	0x001a0085
 8001dc4:	004e0033 	.word	0x004e0033
 8001dc8:	00b00067 	.word	0x00b00067
 8001dcc:	013200da 	.word	0x013200da
    } else if (isPushedSW2()) {
 8001dd0:	f7ff fcd0 	bl	8001774 <isPushedSW2>
 8001dd4:	b118      	cbz	r0, 8001dde <runMode+0xde>
      cmd[i].speed = -10.0;
 8001dd6:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <runMode+0x2e0>)
 8001dd8:	f8cb 3000 	str.w	r3, [fp]
 8001ddc:	e7bf      	b.n	8001d5e <runMode+0x5e>
    } else if (isPushedSW3()) {
 8001dde:	f7ff fcd5 	bl	800178c <isPushedSW3>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	f000 813b 	beq.w	800205e <runMode+0x35e>
      cmd[i].speed = -20.0;
 8001de8:	edcb 8a00 	vstr	s17, [fp]
 8001dec:	e7b7      	b.n	8001d5e <runMode+0x5e>
      resumePwmOutput();
 8001dee:	f002 fdf3 	bl	80049d8 <resumePwmOutput>
 8001df2:	e791      	b.n	8001d18 <runMode+0x18>
      p("RPS %+6.1f %+6.1f Free %4d ", motor_real[0].rps, motor_real[1].rps, sys.free_wheel_cnt);
 8001df4:	4c77      	ldr	r4, [pc, #476]	; (8001fd4 <runMode+0x2d4>)
 8001df6:	68a0      	ldr	r0, [r4, #8]
 8001df8:	f7fe fba6 	bl	8000548 <__aeabi_f2d>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	69e0      	ldr	r0, [r4, #28]
 8001e02:	6829      	ldr	r1, [r5, #0]
 8001e04:	9102      	str	r1, [sp, #8]
 8001e06:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e0a:	f7fe fb9d 	bl	8000548 <__aeabi_f2d>
 8001e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001e12:	e9cd 0100 	strd	r0, r1, [sp]
 8001e16:	4873      	ldr	r0, [pc, #460]	; (8001fe4 <runMode+0x2e4>)
 8001e18:	f002 ff02 	bl	8004c20 <p>
}
 8001e1c:	b007      	add	sp, #28
 8001e1e:	ecbd 8b04 	vpop	{d8-d9}
 8001e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("RAW %5d %5d Out_v %+5.1f %+5.1f ", ma702[0].enc_raw, ma702[1].enc_raw, cmd[0].out_v, cmd[1].out_v);
 8001e26:	4b70      	ldr	r3, [pc, #448]	; (8001fe8 <runMode+0x2e8>)
 8001e28:	4d70      	ldr	r5, [pc, #448]	; (8001fec <runMode+0x2ec>)
 8001e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e2c:	69e8      	ldr	r0, [r5, #28]
 8001e2e:	685c      	ldr	r4, [r3, #4]
 8001e30:	9204      	str	r2, [sp, #16]
 8001e32:	f7fe fb89 	bl	8000548 <__aeabi_f2d>
 8001e36:	4606      	mov	r6, r0
 8001e38:	460f      	mov	r7, r1
 8001e3a:	68a8      	ldr	r0, [r5, #8]
 8001e3c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001e40:	f7fe fb82 	bl	8000548 <__aeabi_f2d>
 8001e44:	9a04      	ldr	r2, [sp, #16]
 8001e46:	e9cd 0100 	strd	r0, r1, [sp]
 8001e4a:	4869      	ldr	r0, [pc, #420]	; (8001ff0 <runMode+0x2f0>)
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	f002 fee7 	bl	8004c20 <p>
}
 8001e52:	b007      	add	sp, #28
 8001e54:	ecbd 8b04 	vpop	{d8-d9}
 8001e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("Rx %4ld CPU %3d GD %4.1f ", can_rx_cnt, main_loop_remain_counter, getGateDriverDCDCVoltage());
 8001e5c:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <runMode+0x2f4>)
 8001e5e:	4c66      	ldr	r4, [pc, #408]	; (8001ff8 <runMode+0x2f8>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	9204      	str	r2, [sp, #16]
 8001e64:	6825      	ldr	r5, [r4, #0]
 8001e66:	f7ff f943 	bl	80010f0 <getGateDriverDCDCVoltage>
 8001e6a:	ee10 0a10 	vmov	r0, s0
 8001e6e:	f7fe fb6b 	bl	8000548 <__aeabi_f2d>
 8001e72:	9a04      	ldr	r2, [sp, #16]
 8001e74:	e9cd 0100 	strd	r0, r1, [sp]
 8001e78:	4860      	ldr	r0, [pc, #384]	; (8001ffc <runMode+0x2fc>)
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	f002 fed0 	bl	8004c20 <p>
      can_rx_cnt = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	6023      	str	r3, [r4, #0]
}
 8001e84:	b007      	add	sp, #28
 8001e86:	ecbd 8b04 	vpop	{d8-d9}
 8001e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("Eff %+6.2f %+6.2f %d %d ", pid[0].eff_voltage, pid[1].eff_voltage, pid[0].output_voltage_limitting, pid[1].output_voltage_limitting);
 8001e8e:	f8da 0000 	ldr.w	r0, [sl]
 8001e92:	f7fe fb59 	bl	8000548 <__aeabi_f2d>
 8001e96:	f89a 405c 	ldrb.w	r4, [sl, #92]	; 0x5c
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	f89a 102c 	ldrb.w	r1, [sl, #44]	; 0x2c
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8001ea6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001eaa:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8001eae:	f7fe fb4b 	bl	8000548 <__aeabi_f2d>
 8001eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001eb6:	e9cd 0100 	strd	r0, r1, [sp]
 8001eba:	4851      	ldr	r0, [pc, #324]	; (8002000 <runMode+0x300>)
 8001ebc:	f002 feb0 	bl	8004c20 <p>
}
 8001ec0:	b007      	add	sp, #28
 8001ec2:	ecbd 8b04 	vpop	{d8-d9}
 8001ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("\e[0mCS %+5.2f %+5.2f / BV %4.1f ", getCurrentMotor(0), getCurrentMotor(1), getBatteryVoltage());
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7ff f94c 	bl	8001168 <getCurrentMotor>
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	ee10 5a10 	vmov	r5, s0
 8001ed6:	f7ff f947 	bl	8001168 <getCurrentMotor>
 8001eda:	ee10 4a10 	vmov	r4, s0
 8001ede:	f7ff f8ef 	bl	80010c0 <getBatteryVoltage>
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	ee10 5a10 	vmov	r5, s0
 8001ee8:	f7fe fb2e 	bl	8000548 <__aeabi_f2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ef6:	f7fe fb27 	bl	8000548 <__aeabi_f2d>
 8001efa:	4606      	mov	r6, r0
 8001efc:	460f      	mov	r7, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8001f04:	f7fe fb20 	bl	8000548 <__aeabi_f2d>
 8001f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001f0c:	e9cd 0100 	strd	r0, r1, [sp]
 8001f10:	483c      	ldr	r0, [pc, #240]	; (8002004 <runMode+0x304>)
 8001f12:	f002 fe85 	bl	8004c20 <p>
}
 8001f16:	b007      	add	sp, #28
 8001f18:	ecbd 8b04 	vpop	{d8-d9}
 8001f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("LoadV %+5.2f %+5.2f CanFail %4d ", cmd[0].out_v - pid[0].eff_voltage, cmd[1].out_v - pid[1].eff_voltage, ex_can_send_fail_cnt);
 8001f20:	4d32      	ldr	r5, [pc, #200]	; (8001fec <runMode+0x2ec>)
 8001f22:	edda 7a00 	vldr	s15, [sl]
 8001f26:	ed95 7a02 	vldr	s14, [r5, #8]
 8001f2a:	4c37      	ldr	r4, [pc, #220]	; (8002008 <runMode+0x308>)
 8001f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f30:	ee17 0a90 	vmov	r0, s15
 8001f34:	f7fe fb08 	bl	8000548 <__aeabi_f2d>
 8001f38:	ed95 7a07 	vldr	s14, [r5, #28]
 8001f3c:	edda 7a0c 	vldr	s15, [sl, #48]	; 0x30
 8001f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	ee17 0a90 	vmov	r0, s15
 8001f4c:	6821      	ldr	r1, [r4, #0]
 8001f4e:	9102      	str	r1, [sp, #8]
 8001f50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f54:	f7fe faf8 	bl	8000548 <__aeabi_f2d>
 8001f58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001f5c:	e9cd 0100 	strd	r0, r1, [sp]
 8001f60:	482a      	ldr	r0, [pc, #168]	; (800200c <runMode+0x30c>)
 8001f62:	f002 fe5d 	bl	8004c20 <p>
      ex_can_send_fail_cnt = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	6023      	str	r3, [r4, #0]
}
 8001f6a:	b007      	add	sp, #28
 8001f6c:	ecbd 8b04 	vpop	{d8-d9}
 8001f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p("LoadCnt %4.3f %4.3f ", (float)pid[0].load_limit_cnt / MOTOR_OVER_LOAD_CNT_LIMIT, (float)pid[1].load_limit_cnt / MOTOR_OVER_LOAD_CNT_LIMIT);
 8001f74:	edda 7a0a 	vldr	s15, [sl, #40]	; 0x28
 8001f78:	ed9f 8a25 	vldr	s16, [pc, #148]	; 8002010 <runMode+0x310>
 8001f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f80:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001f84:	ee17 0a90 	vmov	r0, s15
 8001f88:	f7fe fade 	bl	8000548 <__aeabi_f2d>
 8001f8c:	edda 7a16 	vldr	s15, [sl, #88]	; 0x58
 8001f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f94:	4602      	mov	r2, r0
 8001f96:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	ee17 0a90 	vmov	r0, s15
 8001fa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001fa4:	f7fe fad0 	bl	8000548 <__aeabi_f2d>
 8001fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001fac:	e9cd 0100 	strd	r0, r1, [sp]
 8001fb0:	4818      	ldr	r0, [pc, #96]	; (8002014 <runMode+0x314>)
 8001fb2:	f002 fe35 	bl	8004c20 <p>
}
 8001fb6:	b007      	add	sp, #28
 8001fb8:	ecbd 8b04 	vpop	{d8-d9}
 8001fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc0:	54442d18 	.word	0x54442d18
 8001fc4:	401921fb 	.word	0x401921fb
 8001fc8:	20000504 	.word	0x20000504
 8001fcc:	c2200000 	.word	0xc2200000
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	20000454 	.word	0x20000454
 8001fd8:	41200000 	.word	0x41200000
 8001fdc:	200004e0 	.word	0x200004e0
 8001fe0:	c1200000 	.word	0xc1200000
 8001fe4:	0800d3f8 	.word	0x0800d3f8
 8001fe8:	20000588 	.word	0x20000588
 8001fec:	200003f0 	.word	0x200003f0
 8001ff0:	0800d414 	.word	0x0800d414
 8001ff4:	20000440 	.word	0x20000440
 8001ff8:	200003d0 	.word	0x200003d0
 8001ffc:	0800d438 	.word	0x0800d438
 8002000:	0800d454 	.word	0x0800d454
 8002004:	0800d3d4 	.word	0x0800d3d4
 8002008:	2000030c 	.word	0x2000030c
 800200c:	0800d470 	.word	0x0800d470
 8002010:	39aec33e 	.word	0x39aec33e
 8002014:	0800d494 	.word	0x0800d494
 8002018:	20000480 	.word	0x20000480
 800201c:	20000444 	.word	0x20000444
 8002020:	20000424 	.word	0x20000424
      p("TO %4d %4d diff max M0 %+6d, M1 %+6d %d", cmd[0].timeout_cnt, cmd[1].timeout_cnt, motor_real[0].diff_cnt_max, motor_real[1].diff_cnt_max, enc_error_watcher.detect_flag);
 8002024:	4c15      	ldr	r4, [pc, #84]	; (800207c <runMode+0x37c>)
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <runMode+0x380>)
 8002028:	69a2      	ldr	r2, [r4, #24]
 800202a:	7819      	ldrb	r1, [r3, #0]
 800202c:	6863      	ldr	r3, [r4, #4]
 800202e:	4815      	ldr	r0, [pc, #84]	; (8002084 <runMode+0x384>)
 8002030:	e9cd 2100 	strd	r2, r1, [sp]
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <runMode+0x388>)
 8002036:	4611      	mov	r1, r2
 8002038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800203a:	6909      	ldr	r1, [r1, #16]
 800203c:	f002 fdf0 	bl	8004c20 <p>
      ma702[0].diff_max = 0;
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <runMode+0x38c>)
      motor_real[0].diff_cnt_max = 0;
 8002042:	2200      	movs	r2, #0
      ma702[0].diff_min = 65535;
 8002044:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002048:	e9c3 1205 	strd	r1, r2, [r3, #20]
      ma702[1].diff_min = 65535;
 800204c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
      motor_real[0].diff_cnt_max = 0;
 8002050:	6062      	str	r2, [r4, #4]
      motor_real[1].diff_cnt_max = 0;
 8002052:	61a2      	str	r2, [r4, #24]
}
 8002054:	b007      	add	sp, #28
 8002056:	ecbd 8b04 	vpop	{d8-d9}
 800205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (isPushedSW4()) {
 800205e:	f7ff fba1 	bl	80017a4 <isPushedSW4>
 8002062:	2800      	cmp	r0, #0
 8002064:	f43f ae7b 	beq.w	8001d5e <runMode+0x5e>
      cmd[i].speed = -40.0;
 8002068:	ed8b 9a00 	vstr	s18, [fp]
 800206c:	e677      	b.n	8001d5e <runMode+0x5e>
      p("\n");
 800206e:	4808      	ldr	r0, [pc, #32]	; (8002090 <runMode+0x390>)
 8002070:	f002 fdd6 	bl	8004c20 <p>
      print_cnt = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	7023      	strb	r3, [r4, #0]
}
 8002078:	e6d0      	b.n	8001e1c <runMode+0x11c>
 800207a:	bf00      	nop
 800207c:	20000454 	.word	0x20000454
 8002080:	20000418 	.word	0x20000418
 8002084:	0800d4ac 	.word	0x0800d4ac
 8002088:	200003f0 	.word	0x200003f0
 800208c:	20000588 	.word	0x20000588
 8002090:	0800d6d0 	.word	0x0800d6d0
 8002094:	00000000 	.word	0x00000000

08002098 <encoderCalibrationMode>:
{
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (calib_process.print_flag) {
 800209c:	4dd0      	ldr	r5, [pc, #832]	; (80023e0 <encoderCalibrationMode+0x348>)
{
 800209e:	ed2d 8b0e 	vpush	{d8-d14}
  if (calib_process.print_flag) {
 80020a2:	7d2b      	ldrb	r3, [r5, #20]
{
 80020a4:	b095      	sub	sp, #84	; 0x54
  if (calib_process.print_flag) {
 80020a6:	bb03      	cbnz	r3, 80020ea <encoderCalibrationMode+0x52>
  if (calib[0].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib[1].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib_process.force_rotation_speed > 0) {
 80020a8:	4cce      	ldr	r4, [pc, #824]	; (80023e4 <encoderCalibrationMode+0x34c>)
 80020aa:	68e3      	ldr	r3, [r4, #12]
 80020ac:	2b0c      	cmp	r3, #12
 80020ae:	dd02      	ble.n	80020b6 <encoderCalibrationMode+0x1e>
 80020b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	dc0a      	bgt.n	80020cc <encoderCalibrationMode+0x34>
  if (calib[0].result_cw_cnt > MOTOR_CALIB_CYCLE && calib[1].result_cw_cnt > MOTOR_CALIB_CYCLE) {
 80020b6:	68a3      	ldr	r3, [r4, #8]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	dd02      	ble.n	80020c2 <encoderCalibrationMode+0x2a>
 80020bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	dc76      	bgt.n	80021b0 <encoderCalibrationMode+0x118>
}
 80020c2:	b015      	add	sp, #84	; 0x54
 80020c4:	ecbd 8b0e 	vpop	{d8-d14}
 80020c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (calib[0].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib[1].result_ccw_cnt > MOTOR_CALIB_CYCLE && calib_process.force_rotation_speed > 0) {
 80020cc:	edd5 7a04 	vldr	s15, [r5, #16]
 80020d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d8:	dded      	ble.n	80020b6 <encoderCalibrationMode+0x1e>
    calib_process.force_rotation_speed = -calib_process.force_rotation_speed;  //CCW方向終わったので、回転方向反転
 80020da:	eef1 7a67 	vneg.f32	s15, s15
    HAL_Delay(1);                                                              // write out uart buffer
 80020de:	2001      	movs	r0, #1
    calib_process.force_rotation_speed = -calib_process.force_rotation_speed;  //CCW方向終わったので、回転方向反転
 80020e0:	edc5 7a04 	vstr	s15, [r5, #16]
    HAL_Delay(1);                                                              // write out uart buffer
 80020e4:	f002 fe8c 	bl	8004e00 <HAL_Delay>
 80020e8:	e7e5      	b.n	80020b6 <encoderCalibrationMode+0x1e>
    p("enc = %+5.2f %+5.2f  / M0 X %+5.2f Y %+5.2f / M1 X %+5.2f Y %+5.2f / Rad %+5.2f %+5.2f\n", ma702[0].output_radian, ma702[1].output_radian, cos(ma702[0].output_radian),
 80020ea:	4cbf      	ldr	r4, [pc, #764]	; (80023e8 <encoderCalibrationMode+0x350>)
    calib_process.print_flag = false;
 80020ec:	2300      	movs	r3, #0
    p("enc = %+5.2f %+5.2f  / M0 X %+5.2f Y %+5.2f / M1 X %+5.2f Y %+5.2f / Rad %+5.2f %+5.2f\n", ma702[0].output_radian, ma702[1].output_radian, cos(ma702[0].output_radian),
 80020ee:	6820      	ldr	r0, [r4, #0]
    calib_process.print_flag = false;
 80020f0:	752b      	strb	r3, [r5, #20]
    p("enc = %+5.2f %+5.2f  / M0 X %+5.2f Y %+5.2f / M1 X %+5.2f Y %+5.2f / Rad %+5.2f %+5.2f\n", ma702[0].output_radian, ma702[1].output_radian, cos(ma702[0].output_radian),
 80020f2:	f7fe fa29 	bl	8000548 <__aeabi_f2d>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80020fc:	ec43 2b18 	vmov	d8, r2, r3
 8002100:	f7fe fa22 	bl	8000548 <__aeabi_f2d>
 8002104:	eeb0 0a48 	vmov.f32	s0, s16
 8002108:	eef0 0a68 	vmov.f32	s1, s17
 800210c:	ec41 0b19 	vmov	d9, r0, r1
 8002110:	f006 ffda 	bl	80090c8 <cos>
 8002114:	eeb0 da40 	vmov.f32	s26, s0
 8002118:	eef0 da60 	vmov.f32	s27, s1
 800211c:	eeb0 0a48 	vmov.f32	s0, s16
 8002120:	eef0 0a68 	vmov.f32	s1, s17
 8002124:	f007 f824 	bl	8009170 <sin>
 8002128:	eeb0 aa40 	vmov.f32	s20, s0
 800212c:	eef0 aa60 	vmov.f32	s21, s1
 8002130:	eeb0 0a49 	vmov.f32	s0, s18
 8002134:	eef0 0a69 	vmov.f32	s1, s19
 8002138:	f006 ffc6 	bl	80090c8 <cos>
 800213c:	eeb0 ba40 	vmov.f32	s22, s0
 8002140:	eef0 ba60 	vmov.f32	s23, s1
 8002144:	eeb0 0a49 	vmov.f32	s0, s18
 8002148:	eef0 0a69 	vmov.f32	s1, s19
 800214c:	f007 f810 	bl	8009170 <sin>
 8002150:	eeb0 1a4d 	vmov.f32	s2, s26
 8002154:	eef0 1a6d 	vmov.f32	s3, s27
 8002158:	eeb0 ca40 	vmov.f32	s24, s0
 800215c:	eef0 ca60 	vmov.f32	s25, s1
 8002160:	eeb0 0a4a 	vmov.f32	s0, s20
 8002164:	eef0 0a6a 	vmov.f32	s1, s21
 8002168:	f006 ffaa 	bl	80090c0 <atan2>
 800216c:	eeb0 1a4b 	vmov.f32	s2, s22
 8002170:	eef0 1a6b 	vmov.f32	s3, s23
 8002174:	eeb0 ea40 	vmov.f32	s28, s0
 8002178:	eef0 ea60 	vmov.f32	s29, s1
 800217c:	eeb0 0a4c 	vmov.f32	s0, s24
 8002180:	eef0 0a6c 	vmov.f32	s1, s25
 8002184:	f006 ff9c 	bl	80090c0 <atan2>
 8002188:	ed8d eb0a 	vstr	d14, [sp, #40]	; 0x28
 800218c:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
 8002190:	ed8d cb08 	vstr	d12, [sp, #32]
 8002194:	ed8d bb06 	vstr	d11, [sp, #24]
 8002198:	ed8d ab04 	vstr	d10, [sp, #16]
 800219c:	ed8d db02 	vstr	d13, [sp, #8]
 80021a0:	ed8d 9b00 	vstr	d9, [sp]
 80021a4:	ec53 2b18 	vmov	r2, r3, d8
 80021a8:	4890      	ldr	r0, [pc, #576]	; (80023ec <encoderCalibrationMode+0x354>)
 80021aa:	f002 fd39 	bl	8004c20 <p>
 80021ae:	e77b      	b.n	80020a8 <encoderCalibrationMode+0x10>
    cmd[0].out_v_final = 0;
 80021b0:	4b8f      	ldr	r3, [pc, #572]	; (80023f0 <encoderCalibrationMode+0x358>)
 80021b2:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80023f4 <encoderCalibrationMode+0x35c>
 80021b6:	4c8b      	ldr	r4, [pc, #556]	; (80023e4 <encoderCalibrationMode+0x34c>)
 80021b8:	ed83 9a03 	vstr	s18, [r3, #12]
    cmd[1].out_v_final = 0;
 80021bc:	ed83 9a08 	vstr	s18, [r3, #32]
    HAL_Delay(1);  // write out uart buffer
 80021c0:	2001      	movs	r0, #1
 80021c2:	469a      	mov	sl, r3
 80021c4:	f8df b250 	ldr.w	fp, [pc, #592]	; 8002418 <encoderCalibrationMode+0x380>
 80021c8:	f002 fe1a 	bl	8004e00 <HAL_Delay>
    float xy_field_ave_x[2] = {0}, xy_field_ave_y[2] = {0}, xy_field_offset_radian[2] = {0, 0};
 80021cc:	4b8a      	ldr	r3, [pc, #552]	; (80023f8 <encoderCalibrationMode+0x360>)
 80021ce:	ed8d 9a12 	vstr	s18, [sp, #72]	; 0x48
 80021d2:	ed8d 9a13 	vstr	s18, [sp, #76]	; 0x4c
    for (int i = 0; i < 2; i++) {
 80021d6:	930e      	str	r3, [sp, #56]	; 0x38
 80021d8:	f10d 0848 	add.w	r8, sp, #72	; 0x48
 80021dc:	f04f 0900 	mov.w	r9, #0
      p("Motor : %d\n", i);
 80021e0:	4886      	ldr	r0, [pc, #536]	; (80023fc <encoderCalibrationMode+0x364>)
 80021e2:	4649      	mov	r1, r9
 80021e4:	f002 fd1c 	bl	8004c20 <p>
      p("CW X %+5.2f Y %+5.2f\n", calib[i].xy_field.result_cw_x, calib[i].xy_field.result_cw_y);
 80021e8:	69e0      	ldr	r0, [r4, #28]
 80021ea:	f7fe f9ad 	bl	8000548 <__aeabi_f2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	6a20      	ldr	r0, [r4, #32]
 80021f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80021f8:	f7fe f9a6 	bl	8000548 <__aeabi_f2d>
 80021fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002200:	e9cd 0100 	strd	r0, r1, [sp]
 8002204:	487e      	ldr	r0, [pc, #504]	; (8002400 <encoderCalibrationMode+0x368>)
 8002206:	f002 fd0b 	bl	8004c20 <p>
      p("CCW X %+5.2f Y %+5.2f\n", calib[i].xy_field.result_ccw_x, calib[i].xy_field.result_ccw_y);
 800220a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800220c:	f7fe f99c 	bl	8000548 <__aeabi_f2d>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002216:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800221a:	f7fe f995 	bl	8000548 <__aeabi_f2d>
 800221e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002222:	e9cd 0100 	strd	r0, r1, [sp]
 8002226:	4877      	ldr	r0, [pc, #476]	; (8002404 <encoderCalibrationMode+0x36c>)
 8002228:	f002 fcfa 	bl	8004c20 <p>
      p("CW rad %+5.2f\n", atan2(calib[i].xy_field.result_cw_y, calib[i].xy_field.result_cw_x));
 800222c:	69e0      	ldr	r0, [r4, #28]
 800222e:	f7fe f98b 	bl	8000548 <__aeabi_f2d>
 8002232:	ec41 0b18 	vmov	d8, r0, r1
 8002236:	6a20      	ldr	r0, [r4, #32]
 8002238:	f7fe f986 	bl	8000548 <__aeabi_f2d>
 800223c:	eeb0 1a48 	vmov.f32	s2, s16
 8002240:	eef0 1a68 	vmov.f32	s3, s17
 8002244:	ec41 0b10 	vmov	d0, r0, r1
 8002248:	f006 ff3a 	bl	80090c0 <atan2>
 800224c:	486e      	ldr	r0, [pc, #440]	; (8002408 <encoderCalibrationMode+0x370>)
 800224e:	ec53 2b10 	vmov	r2, r3, d0
 8002252:	f002 fce5 	bl	8004c20 <p>
      p("CCW rad %+5.2f\n", atan2(calib[i].xy_field.result_ccw_y, calib[i].xy_field.result_ccw_x));
 8002256:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002258:	f7fe f976 	bl	8000548 <__aeabi_f2d>
 800225c:	ec41 0b18 	vmov	d8, r0, r1
 8002260:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002262:	f7fe f971 	bl	8000548 <__aeabi_f2d>
 8002266:	eeb0 1a48 	vmov.f32	s2, s16
 800226a:	eef0 1a68 	vmov.f32	s3, s17
 800226e:	ec41 0b10 	vmov	d0, r0, r1
 8002272:	f006 ff25 	bl	80090c0 <atan2>
 8002276:	4865      	ldr	r0, [pc, #404]	; (800240c <encoderCalibrationMode+0x374>)
 8002278:	ec53 2b10 	vmov	r2, r3, d0
 800227c:	f002 fcd0 	bl	8004c20 <p>
      xy_field_ave_y[i] = calib[i].xy_field.result_cw_y + calib[i].xy_field.result_ccw_y;
 8002280:	ed94 7a08 	vldr	s14, [r4, #32]
 8002284:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
      xy_field_offset_radian[i] = (2 * M_PI) - atan2(xy_field_ave_y[i], xy_field_ave_x[i]);
 8002288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228c:	ee17 0a90 	vmov	r0, s15
 8002290:	f7fe f95a 	bl	8000548 <__aeabi_f2d>
      xy_field_ave_x[i] = calib[i].xy_field.result_cw_x + calib[i].xy_field.result_ccw_x;
 8002294:	ed94 7a07 	vldr	s14, [r4, #28]
 8002298:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
      xy_field_offset_radian[i] = (2 * M_PI) - atan2(xy_field_ave_y[i], xy_field_ave_x[i]);
 800229c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a0:	ec41 0b18 	vmov	d8, r0, r1
 80022a4:	ee17 0a90 	vmov	r0, s15
 80022a8:	f7fe f94e 	bl	8000548 <__aeabi_f2d>
 80022ac:	eeb0 0a48 	vmov.f32	s0, s16
 80022b0:	eef0 0a68 	vmov.f32	s1, s17
 80022b4:	460b      	mov	r3, r1
 80022b6:	4602      	mov	r2, r0
 80022b8:	ec43 2b11 	vmov	d1, r2, r3
 80022bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80022c0:	f006 fefe 	bl	80090c0 <atan2>
 80022c4:	ec57 6b10 	vmov	r6, r7, d0
      p("CW+CCW X %+5.2f Y %+5.2f\n", xy_field_ave_x[i], xy_field_ave_y[i]);
 80022c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80022cc:	ed8d 8b00 	vstr	d8, [sp]
 80022d0:	484f      	ldr	r0, [pc, #316]	; (8002410 <encoderCalibrationMode+0x378>)
 80022d2:	f002 fca5 	bl	8004c20 <p>
      xy_field_offset_radian[i] = (2 * M_PI) - atan2(xy_field_ave_y[i], xy_field_ave_x[i]);
 80022d6:	4632      	mov	r2, r6
 80022d8:	463b      	mov	r3, r7
 80022da:	a13f      	add	r1, pc, #252	; (adr r1, 80023d8 <encoderCalibrationMode+0x340>)
 80022dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022e0:	f7fd ffd2 	bl	8000288 <__aeabi_dsub>
 80022e4:	f7fe fc80 	bl	8000be8 <__aeabi_d2f>
      xy_field_offset_radian[i] += ROTATION_OFFSET_RADIAN;
 80022e8:	ee07 0a10 	vmov	s14, r0
 80022ec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80022f0:	ee37 8a27 	vadd.f32	s16, s14, s15
      if (xy_field_offset_radian[i] > M_PI * 2) {
 80022f4:	ee18 0a10 	vmov	r0, s16
 80022f8:	f7fe f926 	bl	8000548 <__aeabi_f2d>
 80022fc:	a336      	add	r3, pc, #216	; (adr r3, 80023d8 <encoderCalibrationMode+0x340>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	4606      	mov	r6, r0
 8002304:	460f      	mov	r7, r1
 8002306:	f7fe fc07 	bl	8000b18 <__aeabi_dcmpgt>
 800230a:	2800      	cmp	r0, #0
 800230c:	f040 808a 	bne.w	8002424 <encoderCalibrationMode+0x38c>
      xy_field_offset_radian[i] += ROTATION_OFFSET_RADIAN;
 8002310:	ed88 8a00 	vstr	s16, [r8]
      if (xy_field_offset_radian[i] < 0) {
 8002314:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d510      	bpl.n	8002340 <encoderCalibrationMode+0x2a8>
        xy_field_offset_radian[i] += M_PI * 2;
 800231e:	a32e      	add	r3, pc, #184	; (adr r3, 80023d8 <encoderCalibrationMode+0x340>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	4630      	mov	r0, r6
 8002326:	4639      	mov	r1, r7
 8002328:	f7fd ffb0 	bl	800028c <__adddf3>
 800232c:	f7fe fc5c 	bl	8000be8 <__aeabi_d2f>
 8002330:	ee08 0a10 	vmov	s16, r0
 8002334:	f8c8 0000 	str.w	r0, [r8]
      p("Rad M0 %+5.2f\n\n", xy_field_offset_radian[i]);
 8002338:	f7fe f906 	bl	8000548 <__aeabi_f2d>
 800233c:	4606      	mov	r6, r0
 800233e:	460f      	mov	r7, r1
 8002340:	4632      	mov	r2, r6
 8002342:	463b      	mov	r3, r7
 8002344:	4833      	ldr	r0, [pc, #204]	; (8002414 <encoderCalibrationMode+0x37c>)
 8002346:	f002 fc6b 	bl	8004c20 <p>
      flash.calib[i] = enc_offset[i].zero_calib;
 800234a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 800234c:	ed8b 8a01 	vstr	s16, [fp, #4]
      calib[i].result_cw_cnt = 0;
 8002350:	2600      	movs	r6, #0
      flash.calib[i] = enc_offset[i].zero_calib;
 8002352:	eca3 8a01 	vstmia	r3!, {s16}
      calib[i].result_cw_cnt = 0;
 8002356:	60a6      	str	r6, [r4, #8]
      cmd[i].out_v_final = 0;
 8002358:	ed8a 9a03 	vstr	s18, [sl, #12]
      calib[i].ave_cnt = 0;
 800235c:	f844 6b2c 	str.w	r6, [r4], #44
    for (int i = 0; i < 2; i++) {
 8002360:	f108 0804 	add.w	r8, r8, #4
      flash.calib[i] = enc_offset[i].zero_calib;
 8002364:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < 2; i++) {
 8002366:	f10b 0b08 	add.w	fp, fp, #8
 800236a:	f10a 0a14 	add.w	sl, sl, #20
 800236e:	f1b9 0f00 	cmp.w	r9, #0
 8002372:	d069      	beq.n	8002448 <encoderCalibrationMode+0x3b0>
    writeEncCalibrationValue(enc_offset[0].zero_calib, enc_offset[1].zero_calib);
 8002374:	4c28      	ldr	r4, [pc, #160]	; (8002418 <encoderCalibrationMode+0x380>)
 8002376:	edd4 0a03 	vldr	s1, [r4, #12]
 800237a:	ed94 0a01 	vldr	s0, [r4, #4]
 800237e:	f7ff f9c1 	bl	8001704 <writeEncCalibrationValue>
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 8002382:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002384:	6060      	str	r0, [r4, #4]
 8002386:	4623      	mov	r3, r4
 8002388:	9c13      	ldr	r4, [sp, #76]	; 0x4c
      flash.calib[i] = xy_field_offset_radian[i];
 800238a:	4a1b      	ldr	r2, [pc, #108]	; (80023f8 <encoderCalibrationMode+0x360>)
      enc_offset[i].zero_calib = xy_field_offset_radian[i];
 800238c:	60dc      	str	r4, [r3, #12]
    sys.manual_offset_radian = 0;  // 割り込みの中で加算してしまうので,enc_calib_cnt = 0にしてからでないといけない
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <encoderCalibrationMode+0x384>)
      flash.calib[i] = xy_field_offset_radian[i];
 8002390:	6054      	str	r4, [r2, #4]
    sys.manual_offset_radian = 0;  // 割り込みの中で加算してしまうので,enc_calib_cnt = 0にしてからでないといけない
 8002392:	ed83 9a01 	vstr	s18, [r3, #4]
      flash.calib[i] = xy_field_offset_radian[i];
 8002396:	6010      	str	r0, [r2, #0]
    calib_process.enc_calib_cnt = 0;
 8002398:	2301      	movs	r3, #1
 800239a:	2200      	movs	r2, #0
 800239c:	e9c5 2300 	strd	r2, r3, [r5]
    calib_process.motor_calib_mode = 0;
 80023a0:	60ae      	str	r6, [r5, #8]
    p("calib %+5.2f %+5.2f", enc_offset[0].zero_calib, enc_offset[1].zero_calib);
 80023a2:	f7fe f8d1 	bl	8000548 <__aeabi_f2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4620      	mov	r0, r4
 80023ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80023b0:	f7fe f8ca 	bl	8000548 <__aeabi_f2d>
 80023b4:	4604      	mov	r4, r0
 80023b6:	460d      	mov	r5, r1
 80023b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80023bc:	e9cd 4500 	strd	r4, r5, [sp]
 80023c0:	4817      	ldr	r0, [pc, #92]	; (8002420 <encoderCalibrationMode+0x388>)
 80023c2:	f002 fc2d 	bl	8004c20 <p>
    HAL_Delay(900);
 80023c6:	f44f 7061 	mov.w	r0, #900	; 0x384
}
 80023ca:	b015      	add	sp, #84	; 0x54
 80023cc:	ecbd 8b0e 	vpop	{d8-d14}
 80023d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    HAL_Delay(900);
 80023d4:	f002 bd14 	b.w	8004e00 <HAL_Delay>
 80023d8:	54442d18 	.word	0x54442d18
 80023dc:	401921fb 	.word	0x401921fb
 80023e0:	200003b0 	.word	0x200003b0
 80023e4:	20000354 	.word	0x20000354
 80023e8:	20000588 	.word	0x20000588
 80023ec:	0800d4d4 	.word	0x0800d4d4
 80023f0:	200003f0 	.word	0x200003f0
 80023f4:	00000000 	.word	0x00000000
 80023f8:	20000338 	.word	0x20000338
 80023fc:	0800d52c 	.word	0x0800d52c
 8002400:	0800d574 	.word	0x0800d574
 8002404:	0800d538 	.word	0x0800d538
 8002408:	0800d550 	.word	0x0800d550
 800240c:	0800d560 	.word	0x0800d560
 8002410:	0800d570 	.word	0x0800d570
 8002414:	0800d58c 	.word	0x0800d58c
 8002418:	20000424 	.word	0x20000424
 800241c:	20000504 	.word	0x20000504
 8002420:	0800d59c 	.word	0x0800d59c
        xy_field_offset_radian[i] -= M_PI * 2;
 8002424:	a30a      	add	r3, pc, #40	; (adr r3, 8002450 <encoderCalibrationMode+0x3b8>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	4630      	mov	r0, r6
 800242c:	4639      	mov	r1, r7
 800242e:	f7fd ff2b 	bl	8000288 <__aeabi_dsub>
 8002432:	f7fe fbd9 	bl	8000be8 <__aeabi_d2f>
 8002436:	ee08 0a10 	vmov	s16, r0
 800243a:	f8c8 0000 	str.w	r0, [r8]
        xy_field_offset_radian[i] += M_PI * 2;
 800243e:	f7fe f883 	bl	8000548 <__aeabi_f2d>
 8002442:	4606      	mov	r6, r0
 8002444:	460f      	mov	r7, r1
 8002446:	e765      	b.n	8002314 <encoderCalibrationMode+0x27c>
 8002448:	f04f 0901 	mov.w	r9, #1
 800244c:	e6c8      	b.n	80021e0 <encoderCalibrationMode+0x148>
 800244e:	bf00      	nop
 8002450:	54442d18 	.word	0x54442d18
 8002454:	401921fb 	.word	0x401921fb

08002458 <motorCalibrationMode>:
{
 8002458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (calib_process.motor_calib_cnt > 1) {
 800245c:	4ebe      	ldr	r6, [pc, #760]	; (8002758 <motorCalibrationMode+0x300>)
 800245e:	4cbf      	ldr	r4, [pc, #764]	; (800275c <motorCalibrationMode+0x304>)
 8002460:	6873      	ldr	r3, [r6, #4]
 8002462:	f8df 9340 	ldr.w	r9, [pc, #832]	; 80027a4 <motorCalibrationMode+0x34c>
 8002466:	4dbe      	ldr	r5, [pc, #760]	; (8002760 <motorCalibrationMode+0x308>)
 8002468:	f8df a33c 	ldr.w	sl, [pc, #828]	; 80027a8 <motorCalibrationMode+0x350>
 800246c:	f8df 833c 	ldr.w	r8, [pc, #828]	; 80027ac <motorCalibrationMode+0x354>
{
 8002470:	ed2d 8b02 	vpush	{d8}
  if (calib_process.motor_calib_cnt > 1) {
 8002474:	2b01      	cmp	r3, #1
    calib_process.motor_calib_cnt--;
 8002476:	bf88      	it	hi
 8002478:	f103 33ff 	addhi.w	r3, r3, #4294967295
      cmd[i].out_v = 0;
 800247c:	ed9f 8ab9 	vldr	s16, [pc, #740]	; 8002764 <motorCalibrationMode+0x30c>
    calib_process.motor_calib_cnt--;
 8002480:	bf88      	it	hi
 8002482:	6073      	strhi	r3, [r6, #4]
{
 8002484:	b085      	sub	sp, #20
 8002486:	46cb      	mov	fp, r9
 8002488:	f104 0728 	add.w	r7, r4, #40	; 0x28
    if (calib_process.motor_calib_cnt > 1) {
 800248c:	2b01      	cmp	r3, #1
 800248e:	d924      	bls.n	80024da <motorCalibrationMode+0x82>
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_START_CNT) {
 8002490:	f240 52db 	movw	r2, #1499	; 0x5db
 8002494:	4293      	cmp	r3, r2
 8002496:	d824      	bhi.n	80024e2 <motorCalibrationMode+0x8a>
        calib[i].rps_integral += motor_real[i].rps;
 8002498:	eddb 7a04 	vldr	s15, [fp, #16]
 800249c:	ed9a 7a02 	vldr	s14, [sl, #8]
 80024a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a4:	edcb 7a04 	vstr	s15, [fp, #16]
        cmd[i].out_v = calib_process.motor_calib_voltage;
 80024a8:	68f3      	ldr	r3, [r6, #12]
 80024aa:	60a3      	str	r3, [r4, #8]
    setFinalOutputVoltage(&cmd[i], &enc_offset[i], sys.manual_offset_radian);  // select Vq-offset angle
 80024ac:	4629      	mov	r1, r5
 80024ae:	4620      	mov	r0, r4
 80024b0:	ed98 0a01 	vldr	s0, [r8, #4]
  for (int i = 0; i < 2; i++) {
 80024b4:	3414      	adds	r4, #20
    setFinalOutputVoltage(&cmd[i], &enc_offset[i], sys.manual_offset_radian);  // select Vq-offset angle
 80024b6:	f001 fc21 	bl	8003cfc <setFinalOutputVoltage>
  for (int i = 0; i < 2; i++) {
 80024ba:	42bc      	cmp	r4, r7
  if (calib_process.motor_calib_cnt == 1) {
 80024bc:	6873      	ldr	r3, [r6, #4]
  for (int i = 0; i < 2; i++) {
 80024be:	f105 0508 	add.w	r5, r5, #8
 80024c2:	f10b 0b2c 	add.w	fp, fp, #44	; 0x2c
 80024c6:	f10a 0a14 	add.w	sl, sl, #20
 80024ca:	d1df      	bne.n	800248c <motorCalibrationMode+0x34>
  if (calib_process.motor_calib_cnt == 1) {
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d00e      	beq.n	80024ee <motorCalibrationMode+0x96>
}
 80024d0:	b005      	add	sp, #20
 80024d2:	ecbd 8b02 	vpop	{d8}
 80024d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (calib_process.motor_calib_cnt == 1) {
 80024da:	d1e7      	bne.n	80024ac <motorCalibrationMode+0x54>
      cmd[i].out_v = 0;
 80024dc:	ed84 8a02 	vstr	s16, [r4, #8]
 80024e0:	e7e4      	b.n	80024ac <motorCalibrationMode+0x54>
      if (calib_process.motor_calib_cnt < MOTOR_CALIB_READY_CNT) {
 80024e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80024e6:	d3df      	bcc.n	80024a8 <motorCalibrationMode+0x50>
      cmd[i].out_v = 0;
 80024e8:	ed84 8a02 	vstr	s16, [r4, #8]
 80024ec:	e7de      	b.n	80024ac <motorCalibrationMode+0x54>
    switch (calib_process.motor_calib_mode) {
 80024ee:	68b3      	ldr	r3, [r6, #8]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	f200 815f 	bhi.w	80027b4 <motorCalibrationMode+0x35c>
 80024f6:	e8df f003 	tbb	[pc, r3]
 80024fa:	d0b7      	.short	0xd0b7
 80024fc:	024f      	.short	0x024f
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80024fe:	ed99 7a04 	vldr	s14, [r9, #16]
 8002502:	eddf 6aab 	vldr	s13, [pc, #684]	; 80027b0 <motorCalibrationMode+0x358>
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002506:	edd9 7a0f 	vldr	s15, [r9, #60]	; 0x3c
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 800250a:	ed96 6a03 	vldr	s12, [r6, #12]
 800250e:	4c96      	ldr	r4, [pc, #600]	; (8002768 <motorCalibrationMode+0x310>)
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002510:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002514:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002518:	ee87 8a86 	vdiv.f32	s16, s15, s12
        calib[0].rps_integral = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c9 3010 	str.w	r3, [r9, #16]
        calib[1].rps_integral = 0;
 8002522:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002526:	eec7 6a06 	vdiv.f32	s13, s14, s12
        rps_per_v_cw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 800252a:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_h[0], rps_per_v_cw_h[1]);
 800252e:	ee16 0a90 	vmov	r0, s13
        rps_per_v_cw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002532:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_h[0], rps_per_v_cw_h[1]);
 8002536:	f7fe f807 	bl	8000548 <__aeabi_f2d>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	ee18 0a10 	vmov	r0, s16
 8002542:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002546:	f7fd ffff 	bl	8000548 <__aeabi_f2d>
 800254a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800254e:	e9cd 0100 	strd	r0, r1, [sp]
 8002552:	4886      	ldr	r0, [pc, #536]	; (800276c <motorCalibrationMode+0x314>)
 8002554:	f002 fb64 	bl	8004c20 <p>
        if (checkMotorRpsError(rps_per_v_cw_h[0], rps_per_v_cw_h[1])) {
 8002558:	edd4 6a00 	vldr	s13, [r4]
 800255c:	ed94 6a01 	vldr	s12, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 8002560:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8002564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002568:	eef0 7ae7 	vabs.f32	s15, s15
 800256c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	f300 80e9 	bgt.w	800274a <motorCalibrationMode+0x2f2>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002578:	eef4 6ac7 	vcmpe.f32	s13, s14
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	f100 8187 	bmi.w	8002892 <motorCalibrationMode+0x43a>
        calib_process.motor_calib_mode++;
 8002584:	68b3      	ldr	r3, [r6, #8]
        calib_process.motor_calib_voltage = -MOTOR_CALIB_VOLTAGE_HIGH;
 8002586:	497a      	ldr	r1, [pc, #488]	; (8002770 <motorCalibrationMode+0x318>)
        calib_process.motor_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002588:	f640 12c4 	movw	r2, #2500	; 0x9c4
        calib_process.motor_calib_mode++;
 800258c:	3302      	adds	r3, #2
 800258e:	e9c6 2301 	strd	r2, r3, [r6, #4]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002592:	4b78      	ldr	r3, [pc, #480]	; (8002774 <motorCalibrationMode+0x31c>)
 8002594:	2200      	movs	r2, #0
 8002596:	e0ca      	b.n	800272e <motorCalibrationMode+0x2d6>
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 8002598:	ed99 7a04 	vldr	s14, [r9, #16]
 800259c:	eddf 6a84 	vldr	s13, [pc, #528]	; 80027b0 <motorCalibrationMode+0x358>
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80025a0:	edd9 7a0f 	vldr	s15, [r9, #60]	; 0x3c
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80025a4:	ed96 6a03 	vldr	s12, [r6, #12]
 80025a8:	4c73      	ldr	r4, [pc, #460]	; (8002778 <motorCalibrationMode+0x320>)
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80025aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80025ae:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80025b2:	ee87 8a86 	vdiv.f32	s16, s15, s12
        calib[0].rps_integral = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c9 3010 	str.w	r3, [r9, #16]
        calib[1].rps_integral = 0;
 80025bc:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80025c0:	eec7 6a06 	vdiv.f32	s13, s14, s12
        rps_per_v_ccw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80025c4:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_l[0], rps_per_v_ccw_l[1]);
 80025c8:	ee16 0a90 	vmov	r0, s13
        rps_per_v_ccw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80025cc:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_l[0], rps_per_v_ccw_l[1]);
 80025d0:	f7fd ffba 	bl	8000548 <__aeabi_f2d>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	ee18 0a10 	vmov	r0, s16
 80025dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025e0:	f7fd ffb2 	bl	8000548 <__aeabi_f2d>
 80025e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80025e8:	e9cd 0100 	strd	r0, r1, [sp]
 80025ec:	485f      	ldr	r0, [pc, #380]	; (800276c <motorCalibrationMode+0x314>)
 80025ee:	f002 fb17 	bl	8004c20 <p>
        if (checkMotorRpsError(rps_per_v_ccw_l[0], rps_per_v_ccw_l[1])) {
 80025f2:	ed94 7a00 	vldr	s14, [r4]
 80025f6:	ed94 6a01 	vldr	s12, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 80025fa:	ee77 7a46 	vsub.f32	s15, s14, s12
 80025fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002602:	eef0 7ae7 	vabs.f32	s15, s15
 8002606:	eef4 7ae6 	vcmpe.f32	s15, s13
 800260a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260e:	f300 809c 	bgt.w	800274a <motorCalibrationMode+0x2f2>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002612:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261a:	f100 8133 	bmi.w	8002884 <motorCalibrationMode+0x42c>
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_l[0], rps_per_v_cw_l[1], rps_per_v_ccw_l[0], rps_per_v_ccw_l[1])) {
 800261e:	4b57      	ldr	r3, [pc, #348]	; (800277c <motorCalibrationMode+0x324>)
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 8002620:	edd3 7a00 	vldr	s15, [r3]
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_l[0], rps_per_v_cw_l[1], rps_per_v_ccw_l[0], rps_per_v_ccw_l[1])) {
 8002624:	edd3 6a01 	vldr	s13, [r3, #4]
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 8002628:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800262c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002630:	eef0 7ae7 	vabs.f32	s15, s15
 8002634:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800263c:	f300 811c 	bgt.w	8002878 <motorCalibrationMode+0x420>
 8002640:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8002644:	eef0 7ae7 	vabs.f32	s15, s15
 8002648:	eef4 7ae5 	vcmpe.f32	s15, s11
 800264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002650:	f300 8112 	bgt.w	8002878 <motorCalibrationMode+0x420>
        calib_process.motor_calib_mode++;
 8002654:	68b3      	ldr	r3, [r6, #8]
        calib_process.motor_calib_voltage = MOTOR_CALIB_VOLTAGE_HIGH;
 8002656:	494a      	ldr	r1, [pc, #296]	; (8002780 <motorCalibrationMode+0x328>)
        calib_process.motor_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002658:	f640 12c4 	movw	r2, #2500	; 0x9c4
        calib_process.motor_calib_mode++;
 800265c:	3301      	adds	r3, #1
 800265e:	e9c6 2301 	strd	r2, r3, [r6, #4]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002662:	4b48      	ldr	r3, [pc, #288]	; (8002784 <motorCalibrationMode+0x32c>)
 8002664:	2200      	movs	r2, #0
 8002666:	e062      	b.n	800272e <motorCalibrationMode+0x2d6>
        p("\n\nstart motor calib!!\n\n");
 8002668:	4847      	ldr	r0, [pc, #284]	; (8002788 <motorCalibrationMode+0x330>)
 800266a:	f002 fad9 	bl	8004c20 <p>
        calib_process.motor_calib_mode = 1;
 800266e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002672:	2301      	movs	r3, #1
 8002674:	e9c6 2301 	strd	r2, r3, [r6, #4]
        calib_process.motor_calib_voltage = MOTOR_CALIB_VOLTAGE_LOW;
 8002678:	4b44      	ldr	r3, [pc, #272]	; (800278c <motorCalibrationMode+0x334>)
 800267a:	60f3      	str	r3, [r6, #12]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 800267c:	4844      	ldr	r0, [pc, #272]	; (8002790 <motorCalibrationMode+0x338>)
 800267e:	4b45      	ldr	r3, [pc, #276]	; (8002794 <motorCalibrationMode+0x33c>)
        calib[0].rps_integral = 0;
 8002680:	2100      	movs	r1, #0
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002682:	2200      	movs	r2, #0
        calib[0].rps_integral = 0;
 8002684:	f8c9 1010 	str.w	r1, [r9, #16]
        calib[1].rps_integral = 0;
 8002688:	f8c9 103c 	str.w	r1, [r9, #60]	; 0x3c
}
 800268c:	b005      	add	sp, #20
 800268e:	ecbd 8b02 	vpop	{d8}
 8002692:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 8002696:	f002 bac3 	b.w	8004c20 <p>
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 800269a:	ed99 7a04 	vldr	s14, [r9, #16]
 800269e:	eddf 6a44 	vldr	s13, [pc, #272]	; 80027b0 <motorCalibrationMode+0x358>
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80026a2:	edd9 7a0f 	vldr	s15, [r9, #60]	; 0x3c
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80026a6:	ed96 6a03 	vldr	s12, [r6, #12]
 80026aa:	4c34      	ldr	r4, [pc, #208]	; (800277c <motorCalibrationMode+0x324>)
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80026ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80026b0:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80026b4:	ee87 8a86 	vdiv.f32	s16, s15, s12
        calib[0].rps_integral = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c9 3010 	str.w	r3, [r9, #16]
        calib[1].rps_integral = 0;
 80026be:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80026c2:	eec7 6a06 	vdiv.f32	s13, s14, s12
        rps_per_v_cw_l[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80026c6:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_l[0], rps_per_v_cw_l[1]);
 80026ca:	ee16 0a90 	vmov	r0, s13
        rps_per_v_cw_l[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80026ce:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_cw_l[0], rps_per_v_cw_l[1]);
 80026d2:	f7fd ff39 	bl	8000548 <__aeabi_f2d>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	ee18 0a10 	vmov	r0, s16
 80026de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026e2:	f7fd ff31 	bl	8000548 <__aeabi_f2d>
 80026e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80026ea:	e9cd 0100 	strd	r0, r1, [sp]
 80026ee:	481f      	ldr	r0, [pc, #124]	; (800276c <motorCalibrationMode+0x314>)
 80026f0:	f002 fa96 	bl	8004c20 <p>
        if (checkMotorRpsError(rps_per_v_cw_l[0], rps_per_v_cw_l[1])) {
 80026f4:	edd4 6a00 	vldr	s13, [r4]
 80026f8:	ed94 6a01 	vldr	s12, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 80026fc:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8002700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002704:	eef0 7ae7 	vabs.f32	s15, s15
 8002708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002710:	dc1b      	bgt.n	800274a <motorCalibrationMode+0x2f2>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002712:	eef4 6ac7 	vcmpe.f32	s13, s14
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	d411      	bmi.n	8002740 <motorCalibrationMode+0x2e8>
        calib_process.motor_calib_mode++;
 800271c:	68b3      	ldr	r3, [r6, #8]
        calib_process.motor_calib_voltage = -MOTOR_CALIB_VOLTAGE_LOW;
 800271e:	491e      	ldr	r1, [pc, #120]	; (8002798 <motorCalibrationMode+0x340>)
        calib_process.motor_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002720:	f640 12c4 	movw	r2, #2500	; 0x9c4
        calib_process.motor_calib_mode++;
 8002724:	3301      	adds	r3, #1
 8002726:	e9c6 2301 	strd	r2, r3, [r6, #4]
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 800272a:	4b1c      	ldr	r3, [pc, #112]	; (800279c <motorCalibrationMode+0x344>)
 800272c:	2200      	movs	r2, #0
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 800272e:	4818      	ldr	r0, [pc, #96]	; (8002790 <motorCalibrationMode+0x338>)
        calib_process.motor_calib_voltage = -MOTOR_CALIB_VOLTAGE_HIGH;
 8002730:	60f1      	str	r1, [r6, #12]
}
 8002732:	b005      	add	sp, #20
 8002734:	ecbd 8b02 	vpop	{d8}
 8002738:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        p("set output V = %f\n", calib_process.motor_calib_voltage);
 800273c:	f002 ba70 	b.w	8004c20 <p>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002740:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	d5e8      	bpl.n	800271c <motorCalibrationMode+0x2c4>
    p("\n\nCALIBRATION ERROR!!!\n\n");
 800274a:	4815      	ldr	r0, [pc, #84]	; (80027a0 <motorCalibrationMode+0x348>)
 800274c:	f002 fa68 	bl	8004c20 <p>
    calib_process.motor_calib_cnt = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	6073      	str	r3, [r6, #4]
    return true;
 8002754:	e6bc      	b.n	80024d0 <motorCalibrationMode+0x78>
 8002756:	bf00      	nop
 8002758:	200003b0 	.word	0x200003b0
 800275c:	200003f0 	.word	0x200003f0
 8002760:	20000424 	.word	0x20000424
 8002764:	00000000 	.word	0x00000000
 8002768:	200004f4 	.word	0x200004f4
 800276c:	0800d628 	.word	0x0800d628
 8002770:	c0a00000 	.word	0xc0a00000
 8002774:	c0140000 	.word	0xc0140000
 8002778:	200004ec 	.word	0x200004ec
 800277c:	200004fc 	.word	0x200004fc
 8002780:	40a00000 	.word	0x40a00000
 8002784:	40140000 	.word	0x40140000
 8002788:	0800d5fc 	.word	0x0800d5fc
 800278c:	40400000 	.word	0x40400000
 8002790:	0800d614 	.word	0x0800d614
 8002794:	40080000 	.word	0x40080000
 8002798:	c0400000 	.word	0xc0400000
 800279c:	c0080000 	.word	0xc0080000
 80027a0:	0800d5b0 	.word	0x0800d5b0
 80027a4:	20000354 	.word	0x20000354
 80027a8:	20000454 	.word	0x20000454
 80027ac:	20000504 	.word	0x20000504
 80027b0:	3a2ec33e 	.word	0x3a2ec33e
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027b4:	ed99 7a04 	vldr	s14, [r9, #16]
 80027b8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80027b0 <motorCalibrationMode+0x358>
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027bc:	edd9 7a0f 	vldr	s15, [r9, #60]	; 0x3c
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027c0:	ed96 6a03 	vldr	s12, [r6, #12]
 80027c4:	4c57      	ldr	r4, [pc, #348]	; (8002924 <motorCalibrationMode+0x4cc>)
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027ca:	ee27 7a26 	vmul.f32	s14, s14, s13
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027ce:	ee87 8a86 	vdiv.f32	s16, s15, s12
        calib[0].rps_integral = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c9 3010 	str.w	r3, [r9, #16]
        calib[1].rps_integral = 0;
 80027d8:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027dc:	eec7 6a06 	vdiv.f32	s13, s14, s12
        rps_per_v_ccw_h[1] = calib[1].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027e0:	ed84 8a01 	vstr	s16, [r4, #4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_h[0], rps_per_v_ccw_h[1]);
 80027e4:	ee16 0a90 	vmov	r0, s13
        rps_per_v_ccw_h[0] = calib[0].rps_integral / calib_process.motor_calib_voltage / MOTOR_CALIB_START_CNT;
 80027e8:	edc4 6a00 	vstr	s13, [r4]
        p("\n\nMotor Calib rps/v \n M0 %6.2f\n M1 %6.2f\n\n", rps_per_v_ccw_h[0], rps_per_v_ccw_h[1]);
 80027ec:	f7fd feac 	bl	8000548 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	ee18 0a10 	vmov	r0, s16
 80027f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027fc:	f7fd fea4 	bl	8000548 <__aeabi_f2d>
 8002800:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002804:	e9cd 0100 	strd	r0, r1, [sp]
 8002808:	4847      	ldr	r0, [pc, #284]	; (8002928 <motorCalibrationMode+0x4d0>)
 800280a:	f002 fa09 	bl	8004c20 <p>
        p("\n\n!!!!!!FINISH!!!!!!!!\n\n");
 800280e:	4847      	ldr	r0, [pc, #284]	; (800292c <motorCalibrationMode+0x4d4>)
 8002810:	f002 fa06 	bl	8004c20 <p>
        if (checkMotorRpsError(rps_per_v_ccw_h[0], rps_per_v_ccw_h[1])) {
 8002814:	ed94 6a00 	vldr	s12, [r4]
 8002818:	edd4 6a01 	vldr	s13, [r4, #4]
  if (fabs(m0 - m1) > MOTOR_CALIB_M0_M1_ERROR_TRERANCE) {
 800281c:	ee36 7a66 	vsub.f32	s14, s12, s13
 8002820:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002824:	eeb0 7ac7 	vabs.f32	s14, s14
 8002828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	dc8b      	bgt.n	800274a <motorCalibrationMode+0x2f2>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002832:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	d504      	bpl.n	8002846 <motorCalibrationMode+0x3ee>
 800283c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	d481      	bmi.n	800274a <motorCalibrationMode+0x2f2>
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_h[0], rps_per_v_cw_h[1], rps_per_v_ccw_h[0], rps_per_v_ccw_h[1])) {
 8002846:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <motorCalibrationMode+0x4d8>)
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 8002848:	ed93 7a00 	vldr	s14, [r3]
        } else if (checkMotorRpsHighLowError(rps_per_v_cw_h[0], rps_per_v_cw_h[1], rps_per_v_ccw_h[0], rps_per_v_ccw_h[1])) {
 800284c:	edd3 7a01 	vldr	s15, [r3, #4]
  if (fabs(m0_cw - m0_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE || fabs(m1_cw - m1_ccw) > MOTOR_CALIB_CW_CCW_ERROR_TRERANCE) {
 8002850:	ee37 7a46 	vsub.f32	s14, s14, s12
 8002854:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002858:	eeb0 7ac7 	vabs.f32	s14, s14
 800285c:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	dc08      	bgt.n	8002878 <motorCalibrationMode+0x420>
 8002866:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800286a:	eef0 7ae7 	vabs.f32	s15, s15
 800286e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8002872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002876:	dd13      	ble.n	80028a0 <motorCalibrationMode+0x448>
    p("\n\nCALIBRATION ERROR!!! CW-CCW PARAM UNMATCH\n\n");
 8002878:	482e      	ldr	r0, [pc, #184]	; (8002934 <motorCalibrationMode+0x4dc>)
 800287a:	f002 f9d1 	bl	8004c20 <p>
    calib_process.motor_calib_cnt = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	6073      	str	r3, [r6, #4]
    return true;
 8002882:	e625      	b.n	80024d0 <motorCalibrationMode+0x78>
  if (m0 < MOTOR_CALIB_UNDER_LIMIT && m1 < MOTOR_CALIB_UNDER_LIMIT) {
 8002884:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	f57f aec7 	bpl.w	800261e <motorCalibrationMode+0x1c6>
 8002890:	e75b      	b.n	800274a <motorCalibrationMode+0x2f2>
 8002892:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289a:	f57f ae73 	bpl.w	8002584 <motorCalibrationMode+0x12c>
 800289e:	e754      	b.n	800274a <motorCalibrationMode+0x2f2>
        p("save calib result...\n");
 80028a0:	4825      	ldr	r0, [pc, #148]	; (8002938 <motorCalibrationMode+0x4e0>)
        p("enc data : %4.2f %4.2f\n", flash.calib[0], flash.calib[1]);
 80028a2:	4c26      	ldr	r4, [pc, #152]	; (800293c <motorCalibrationMode+0x4e4>)
        p("save calib result...\n");
 80028a4:	f002 f9bc 	bl	8004c20 <p>
        writeMotorCalibrationValue(rps_per_v_cw_l[0], rps_per_v_cw_l[1]);
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <motorCalibrationMode+0x4e8>)
 80028aa:	edd3 0a01 	vldr	s1, [r3, #4]
 80028ae:	ed93 0a00 	vldr	s0, [r3]
 80028b2:	f7fe ff31 	bl	8001718 <writeMotorCalibrationValue>
        HAL_Delay(10);
 80028b6:	200a      	movs	r0, #10
 80028b8:	f002 faa2 	bl	8004e00 <HAL_Delay>
        p("enc data : %4.2f %4.2f\n", flash.calib[0], flash.calib[1]);
 80028bc:	6820      	ldr	r0, [r4, #0]
 80028be:	f7fd fe43 	bl	8000548 <__aeabi_f2d>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	6860      	ldr	r0, [r4, #4]
 80028c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028cc:	f7fd fe3c 	bl	8000548 <__aeabi_f2d>
 80028d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028d4:	e9cd 0100 	strd	r0, r1, [sp]
 80028d8:	481a      	ldr	r0, [pc, #104]	; (8002944 <motorCalibrationMode+0x4ec>)
 80028da:	f002 f9a1 	bl	8004c20 <p>
        p("motor data : %4.2f %4.2f\n", flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]);
 80028de:	68e0      	ldr	r0, [r4, #12]
 80028e0:	f7fd fe32 	bl	8000548 <__aeabi_f2d>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	6920      	ldr	r0, [r4, #16]
 80028ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028ee:	f7fd fe2b 	bl	8000548 <__aeabi_f2d>
 80028f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028f6:	e9cd 0100 	strd	r0, r1, [sp]
 80028fa:	4813      	ldr	r0, [pc, #76]	; (8002948 <motorCalibrationMode+0x4f0>)
 80028fc:	f002 f990 	bl	8004c20 <p>
        HAL_Delay(1000);
 8002900:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002904:	f002 fa7c 	bl	8004e00 <HAL_Delay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002908:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800290c:	490f      	ldr	r1, [pc, #60]	; (800294c <motorCalibrationMode+0x4f4>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <motorCalibrationMode+0x4f8>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002910:	68ca      	ldr	r2, [r1, #12]
 8002912:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002916:	4313      	orrs	r3, r2
 8002918:	60cb      	str	r3, [r1, #12]
 800291a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800291e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8002920:	e7fd      	b.n	800291e <motorCalibrationMode+0x4c6>
 8002922:	bf00      	nop
 8002924:	200004e4 	.word	0x200004e4
 8002928:	0800d628 	.word	0x0800d628
 800292c:	0800d654 	.word	0x0800d654
 8002930:	200004f4 	.word	0x200004f4
 8002934:	0800d5cc 	.word	0x0800d5cc
 8002938:	0800d670 	.word	0x0800d670
 800293c:	20000338 	.word	0x20000338
 8002940:	200004fc 	.word	0x200004fc
 8002944:	0800d688 	.word	0x0800d688
 8002948:	0800d6a0 	.word	0x0800d6a0
 800294c:	e000ed00 	.word	0xe000ed00
 8002950:	05fa0004 	.word	0x05fa0004
 8002954:	00000000 	.word	0x00000000

08002958 <startCalibrationMode>:
{
 8002958:	b508      	push	{r3, lr}
  p("calibration mode!\n");
 800295a:	480b      	ldr	r0, [pc, #44]	; (8002988 <startCalibrationMode+0x30>)
 800295c:	f002 f960 	bl	8004c20 <p>
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8002960:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8002980 <startCalibrationMode+0x28>
 8002964:	4909      	ldr	r1, [pc, #36]	; (800298c <startCalibrationMode+0x34>)
  cmd[0].speed = 0;
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <startCalibrationMode+0x38>)
  sys.manual_offset_radian = 0;
 8002968:	480a      	ldr	r0, [pc, #40]	; (8002994 <startCalibrationMode+0x3c>)
 800296a:	2200      	movs	r2, #0
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 800296c:	ed81 7b00 	vstr	d7, [r1]
  cmd[0].out_v_final = 2.0;
 8002970:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  sys.manual_offset_radian = 0;
 8002974:	6042      	str	r2, [r0, #4]
  cmd[0].speed = 0;
 8002976:	601a      	str	r2, [r3, #0]
  cmd[1].speed = 0;
 8002978:	615a      	str	r2, [r3, #20]
  cmd[0].out_v_final = 2.0;
 800297a:	60d9      	str	r1, [r3, #12]
  cmd[1].out_v_final = 2.0;
 800297c:	6219      	str	r1, [r3, #32]
}
 800297e:	bd08      	pop	{r3, pc}
 8002980:	000009c4 	.word	0x000009c4
 8002984:	00000000 	.word	0x00000000
 8002988:	0800d3c0 	.word	0x0800d3c0
 800298c:	200003b0 	.word	0x200003b0
 8002990:	200003f0 	.word	0x200003f0
 8002994:	20000504 	.word	0x20000504

08002998 <sendCanData>:
{
 8002998:	b570      	push	{r4, r5, r6, lr}
  sendSpeed(flash.board_id, 0, motor_real[0].rps, (float)ma702[0].enc_raw * 2 * M_PI / 65535);
 800299a:	4c67      	ldr	r4, [pc, #412]	; (8002b38 <sendCanData+0x1a0>)
 800299c:	4e67      	ldr	r6, [pc, #412]	; (8002b3c <sendCanData+0x1a4>)
 800299e:	edd4 7a01 	vldr	s15, [r4, #4]
 80029a2:	4d67      	ldr	r5, [pc, #412]	; (8002b40 <sendCanData+0x1a8>)
 80029a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80029a8:	b082      	sub	sp, #8
  sendSpeed(flash.board_id, 0, motor_real[0].rps, (float)ma702[0].enc_raw * 2 * M_PI / 65535);
 80029aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029ae:	ee17 0a90 	vmov	r0, s15
 80029b2:	f7fd fdc9 	bl	8000548 <__aeabi_f2d>
 80029b6:	a35e      	add	r3, pc, #376	; (adr r3, 8002b30 <sendCanData+0x198>)
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	f7fd fe1c 	bl	80005f8 <__aeabi_dmul>
 80029c0:	f7fe f912 	bl	8000be8 <__aeabi_d2f>
 80029c4:	ed96 0a02 	vldr	s0, [r6, #8]
 80029c8:	ee00 0a90 	vmov	s1, r0
 80029cc:	2100      	movs	r1, #0
 80029ce:	68a8      	ldr	r0, [r5, #8]
 80029d0:	f7fe fd56 	bl	8001480 <sendSpeed>
  sendSpeed(flash.board_id, 1, motor_real[1].rps, (float)ma702[1].enc_raw * 2 * M_PI / 65535);
 80029d4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
  switch (transfer_cnt) {
 80029d8:	4c5a      	ldr	r4, [pc, #360]	; (8002b44 <sendCanData+0x1ac>)
  sendSpeed(flash.board_id, 1, motor_real[1].rps, (float)ma702[1].enc_raw * 2 * M_PI / 65535);
 80029da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029e2:	ee17 0a90 	vmov	r0, s15
 80029e6:	f7fd fdaf 	bl	8000548 <__aeabi_f2d>
 80029ea:	a351      	add	r3, pc, #324	; (adr r3, 8002b30 <sendCanData+0x198>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fd fe02 	bl	80005f8 <__aeabi_dmul>
 80029f4:	f7fe f8f8 	bl	8000be8 <__aeabi_d2f>
 80029f8:	ed96 0a07 	vldr	s0, [r6, #28]
 80029fc:	ee00 0a90 	vmov	s1, r0
 8002a00:	2101      	movs	r1, #1
 8002a02:	68a8      	ldr	r0, [r5, #8]
 8002a04:	f7fe fd3c 	bl	8001480 <sendSpeed>
  switch (transfer_cnt) {
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	2b32      	cmp	r3, #50	; 0x32
 8002a0c:	d824      	bhi.n	8002a58 <sendCanData+0xc0>
 8002a0e:	e8df f003 	tbb	[pc, r3]
 8002a12:	231a      	.short	0x231a
 8002a14:	23412334 	.word	0x23412334
 8002a18:	235b234e 	.word	0x235b234e
 8002a1c:	237d236c 	.word	0x237d236c
 8002a20:	23232327 	.word	0x23232327
 8002a24:	23232323 	.word	0x23232323
 8002a28:	23232323 	.word	0x23232323
 8002a2c:	23232323 	.word	0x23232323
 8002a30:	23232323 	.word	0x23232323
 8002a34:	23232323 	.word	0x23232323
 8002a38:	23232323 	.word	0x23232323
 8002a3c:	23232323 	.word	0x23232323
 8002a40:	23232323 	.word	0x23232323
 8002a44:	8a          	.byte	0x8a
 8002a45:	00          	.byte	0x00
      sendVoltage(flash.board_id, 0, getBatteryVoltage());
 8002a46:	68a8      	ldr	r0, [r5, #8]
 8002a48:	9001      	str	r0, [sp, #4]
 8002a4a:	f7fe fb39 	bl	80010c0 <getBatteryVoltage>
 8002a4e:	9801      	ldr	r0, [sp, #4]
 8002a50:	2100      	movs	r1, #0
 8002a52:	f7fe fd3b 	bl	80014cc <sendVoltage>
  transfer_cnt++;
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	6023      	str	r3, [r4, #0]
}
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
      sendFloat(0x501 + flash.board_id * 2, flash.rps_per_v_cw[1]);
 8002a60:	68a8      	ldr	r0, [r5, #8]
 8002a62:	ed95 0a04 	vldr	s0, [r5, #16]
 8002a66:	0040      	lsls	r0, r0, #1
 8002a68:	f200 5001 	addw	r0, r0, #1281	; 0x501
 8002a6c:	f7fe fce8 	bl	8001440 <sendFloat>
  transfer_cnt++;
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	6023      	str	r3, [r4, #0]
}
 8002a76:	b002      	add	sp, #8
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
      sendVoltage(flash.board_id, 1, getBatteryVoltage());
 8002a7a:	68a8      	ldr	r0, [r5, #8]
 8002a7c:	9001      	str	r0, [sp, #4]
 8002a7e:	f7fe fb1f 	bl	80010c0 <getBatteryVoltage>
 8002a82:	9801      	ldr	r0, [sp, #4]
 8002a84:	2101      	movs	r1, #1
 8002a86:	f7fe fd21 	bl	80014cc <sendVoltage>
  transfer_cnt++;
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	6023      	str	r3, [r4, #0]
}
 8002a90:	b002      	add	sp, #8
 8002a92:	bd70      	pop	{r4, r5, r6, pc}
      sendCurrent(flash.board_id, 0, getCurrentMotor(0));
 8002a94:	68ad      	ldr	r5, [r5, #8]
 8002a96:	2000      	movs	r0, #0
 8002a98:	f7fe fb66 	bl	8001168 <getCurrentMotor>
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	f7fe fd5c 	bl	800155c <sendCurrent>
  transfer_cnt++;
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	6023      	str	r3, [r4, #0]
}
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
      sendCurrent(flash.board_id, 1, getCurrentMotor(1));
 8002aae:	68ad      	ldr	r5, [r5, #8]
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	f7fe fb59 	bl	8001168 <getCurrentMotor>
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4628      	mov	r0, r5
 8002aba:	f7fe fd4f 	bl	800155c <sendCurrent>
  transfer_cnt++;
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	6023      	str	r3, [r4, #0]
}
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
      sendTemperature(flash.board_id, 0, getTempMotor(0));
 8002ac8:	2000      	movs	r0, #0
 8002aca:	68ad      	ldr	r5, [r5, #8]
 8002acc:	f7fe fb68 	bl	80011a0 <getTempMotor>
 8002ad0:	ee07 0a90 	vmov	s15, r0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002ada:	4628      	mov	r0, r5
 8002adc:	f7fe fd1a 	bl	8001514 <sendTemperature>
  transfer_cnt++;
 8002ae0:	6823      	ldr	r3, [r4, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	6023      	str	r3, [r4, #0]
}
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd70      	pop	{r4, r5, r6, pc}
      sendTemperature(flash.board_id, 1, getTempMotor(1));
 8002aea:	2001      	movs	r0, #1
 8002aec:	68ad      	ldr	r5, [r5, #8]
 8002aee:	f7fe fb57 	bl	80011a0 <getTempMotor>
 8002af2:	ee07 0a90 	vmov	s15, r0
 8002af6:	2101      	movs	r1, #1
 8002af8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002afc:	4628      	mov	r0, r5
 8002afe:	f7fe fd09 	bl	8001514 <sendTemperature>
  transfer_cnt++;
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	6023      	str	r3, [r4, #0]
}
 8002b08:	b002      	add	sp, #8
 8002b0a:	bd70      	pop	{r4, r5, r6, pc}
      sendFloat(0x500 + flash.board_id * 2, flash.rps_per_v_cw[0]);
 8002b0c:	68a8      	ldr	r0, [r5, #8]
 8002b0e:	ed95 0a03 	vldr	s0, [r5, #12]
 8002b12:	f500 7020 	add.w	r0, r0, #640	; 0x280
 8002b16:	0040      	lsls	r0, r0, #1
 8002b18:	f7fe fc92 	bl	8001440 <sendFloat>
  transfer_cnt++;
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	6023      	str	r3, [r4, #0]
}
 8002b22:	b002      	add	sp, #8
 8002b24:	bd70      	pop	{r4, r5, r6, pc}
  switch (transfer_cnt) {
 8002b26:	2300      	movs	r3, #0
 8002b28:	e797      	b.n	8002a5a <sendCanData+0xc2>
 8002b2a:	bf00      	nop
 8002b2c:	f3af 8000 	nop.w
 8002b30:	7658a371 	.word	0x7658a371
 8002b34:	3f092214 	.word	0x3f092214
 8002b38:	20000588 	.word	0x20000588
 8002b3c:	20000454 	.word	0x20000454
 8002b40:	20000338 	.word	0x20000338
 8002b44:	20000510 	.word	0x20000510

08002b48 <protect>:
{
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	f8df 8304 	ldr.w	r8, [pc, #772]	; 8002e54 <protect+0x30c>
 8002b50:	f8df 9304 	ldr.w	r9, [pc, #772]	; 8002e58 <protect+0x310>
      p("M%d over current!! : %+6.2f / out_v %+6.2f / %d cnt %4d\n", i, getCurrentMotor(i), cmd[i].out_v_final, pid[i].output_voltage_limitting, pid[i].load_limit_cnt);
 8002b54:	f8df b304 	ldr.w	fp, [pc, #772]	; 8002e5c <protect+0x314>
      error.id = OVER_CURRENT;
 8002b58:	4cb7      	ldr	r4, [pc, #732]	; (8002e38 <protect+0x2f0>)
  p("reset!!!");
 8002b5a:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8002e48 <protect+0x300>
{
 8002b5e:	b087      	sub	sp, #28
 8002b60:	4647      	mov	r7, r8
  for (int i = 0; i < 2; i++) {
 8002b62:	2600      	movs	r6, #0
    if (getCurrentMotor(i) > THR_MOTOR_OVER_CURRENT && (pid[i].load_limit_cnt == 0 || pid[i].load_limit_cnt > 100)) {  // load_limit_cntが1~100の間は無視する
 8002b64:	4630      	mov	r0, r6
 8002b66:	f7fe faff 	bl	8001168 <getCurrentMotor>
 8002b6a:	eef1 7a0a 	vmov.f32	s15, #26	; 0x40d00000  6.5
 8002b6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b76:	4635      	mov	r5, r6
 8002b78:	dd04      	ble.n	8002b84 <protect+0x3c>
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d074      	beq.n	8002c6a <protect+0x122>
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	dc72      	bgt.n	8002c6a <protect+0x122>
  for (int i = 0; i < 2; i++) {
 8002b84:	f109 0914 	add.w	r9, r9, #20
 8002b88:	3730      	adds	r7, #48	; 0x30
 8002b8a:	2e00      	cmp	r6, #0
 8002b8c:	f000 80bd 	beq.w	8002d0a <protect+0x1c2>
  if (getBatteryVoltage() < THR_BATTERY_UNVER_VOLTAGE) {
 8002b90:	f7fe fa96 	bl	80010c0 <getBatteryVoltage>
 8002b94:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8002b98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba0:	f100 815e 	bmi.w	8002e60 <protect+0x318>
  if (getBatteryVoltage() > THR_BATTERY_OVER_VOLTAGE) {
 8002ba4:	f7fe fa8c 	bl	80010c0 <getBatteryVoltage>
 8002ba8:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8002e3c <protect+0x2f4>
 8002bac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	f300 8106 	bgt.w	8002dc4 <protect+0x27c>
  if (getTempMotor(0) > THR_MOTOR_OVER_TEMPERATURE || getTempMotor(1) > THR_MOTOR_OVER_TEMPERATURE) {
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fe faf1 	bl	80011a0 <getTempMotor>
 8002bbe:	2846      	cmp	r0, #70	; 0x46
 8002bc0:	f300 80a5 	bgt.w	8002d0e <protect+0x1c6>
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f7fe faeb 	bl	80011a0 <getTempMotor>
 8002bca:	2846      	cmp	r0, #70	; 0x46
 8002bcc:	f300 809f 	bgt.w	8002d0e <protect+0x1c6>
  if (pid[0].load_limit_cnt > MOTOR_OVER_LOAD_CNT_LIMIT || pid[1].load_limit_cnt > MOTOR_OVER_LOAD_CNT_LIMIT) {
 8002bd0:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8002bd4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	dc04      	bgt.n	8002be6 <protect+0x9e>
 8002bdc:	f8d8 2058 	ldr.w	r2, [r8, #88]	; 0x58
 8002be0:	429a      	cmp	r2, r3
 8002be2:	f340 80e6 	ble.w	8002db2 <protect+0x26a>
    forceStopAllPwmOutputAndTimer();
 8002be6:	f001 fe59 	bl	800489c <forceStopAllPwmOutputAndTimer>
    p("over load!! %d %d", pid[0].load_limit_cnt, pid[1].load_limit_cnt);
 8002bea:	f8d8 2058 	ldr.w	r2, [r8, #88]	; 0x58
 8002bee:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8002bf2:	4893      	ldr	r0, [pc, #588]	; (8002e40 <protect+0x2f8>)
    error.id = OVER_LOAD;
 8002bf4:	4c90      	ldr	r4, [pc, #576]	; (8002e38 <protect+0x2f0>)
    p("over load!! %d %d", pid[0].load_limit_cnt, pid[1].load_limit_cnt);
 8002bf6:	f002 f813 	bl	8004c20 <p>
    setLedBlue(false);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fe fde6 	bl	80017cc <setLedBlue>
    setLedGreen(false);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fe fdeb 	bl	80017dc <setLedGreen>
    setLedRed(true);
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7fe fdd8 	bl	80017bc <setLedRed>
    if (pid[0].load_limit_cnt > pid[1].load_limit_cnt) {
 8002c0c:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8002c10:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
    error.id = OVER_LOAD;
 8002c14:	2108      	movs	r1, #8
    if (pid[0].load_limit_cnt > pid[1].load_limit_cnt) {
 8002c16:	429a      	cmp	r2, r3
    error.id = OVER_LOAD;
 8002c18:	8021      	strh	r1, [r4, #0]
    if (pid[0].load_limit_cnt > pid[1].load_limit_cnt) {
 8002c1a:	f300 80cd 	bgt.w	8002db8 <protect+0x270>
      error.value = pid[1].load_limit_cnt;
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      error.info = 1;
 8002c26:	2301      	movs	r3, #1
  while (sys.power_enable_cnt > 0) {
 8002c28:	4d86      	ldr	r5, [pc, #536]	; (8002e44 <protect+0x2fc>)
  p("reset!!!");
 8002c2a:	4887      	ldr	r0, [pc, #540]	; (8002e48 <protect+0x300>)
 8002c2c:	8063      	strh	r3, [r4, #2]
 8002c2e:	edc4 7a01 	vstr	s15, [r4, #4]
 8002c32:	f001 fff5 	bl	8004c20 <p>
  while (sys.power_enable_cnt > 0) {
 8002c36:	68ab      	ldr	r3, [r5, #8]
 8002c38:	b17b      	cbz	r3, 8002c5a <protect+0x112>
    sys.power_enable_cnt--;
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	60ab      	str	r3, [r5, #8]
    sendCanData();
 8002c3e:	f7ff feab 	bl	8002998 <sendCanData>
    sendError(error.id, error.info, error.value);
 8002c42:	ed94 0a01 	vldr	s0, [r4, #4]
 8002c46:	8861      	ldrh	r1, [r4, #2]
 8002c48:	8820      	ldrh	r0, [r4, #0]
 8002c4a:	f7fe fcad 	bl	80015a8 <sendError>
    HAL_Delay(2);
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f002 f8d6 	bl	8004e00 <HAL_Delay>
  while (sys.power_enable_cnt > 0) {
 8002c54:	68ab      	ldr	r3, [r5, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ef      	bne.n	8002c3a <protect+0xf2>
  HAL_Delay(2);
 8002c5a:	2002      	movs	r0, #2
 8002c5c:	f002 f8d0 	bl	8004e00 <HAL_Delay>
}
 8002c60:	b007      	add	sp, #28
 8002c62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_NVIC_SystemReset();
 8002c66:	f003 bc83 	b.w	8006570 <HAL_NVIC_SystemReset>
      forceStopAllPwmOutputAndTimer();
 8002c6a:	f001 fe17 	bl	800489c <forceStopAllPwmOutputAndTimer>
      p("M%d over current!! : %+6.2f / out_v %+6.2f / %d cnt %4d\n", i, getCurrentMotor(i), cmd[i].out_v_final, pid[i].output_voltage_limitting, pid[i].load_limit_cnt);
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f7fe fa7a 	bl	8001168 <getCurrentMotor>
 8002c74:	ee10 0a10 	vmov	r0, s0
 8002c78:	f7fd fc66 	bl	8000548 <__aeabi_f2d>
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c80:	9103      	str	r1, [sp, #12]
 8002c82:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002c86:	9102      	str	r1, [sp, #8]
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002c8e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c92:	f7fd fc59 	bl	8000548 <__aeabi_f2d>
 8002c96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c9a:	e9cd 0100 	strd	r0, r1, [sp]
 8002c9e:	4631      	mov	r1, r6
 8002ca0:	4658      	mov	r0, fp
 8002ca2:	f001 ffbd 	bl	8004c20 <p>
      setLedBlue(false);
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f7fe fd90 	bl	80017cc <setLedBlue>
      setLedGreen(true);
 8002cac:	2001      	movs	r0, #1
 8002cae:	f7fe fd95 	bl	80017dc <setLedGreen>
      setLedRed(true);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f7fe fd82 	bl	80017bc <setLedRed>
      error.id = OVER_CURRENT;
 8002cb8:	2302      	movs	r3, #2
      error.value = getCurrentMotor(i);
 8002cba:	4628      	mov	r0, r5
      error.id = OVER_CURRENT;
 8002cbc:	8023      	strh	r3, [r4, #0]
      error.info = i;
 8002cbe:	8066      	strh	r6, [r4, #2]
      error.value = getCurrentMotor(i);
 8002cc0:	f7fe fa52 	bl	8001168 <getCurrentMotor>
  while (sys.power_enable_cnt > 0) {
 8002cc4:	4d5f      	ldr	r5, [pc, #380]	; (8002e44 <protect+0x2fc>)
      error.value = getCurrentMotor(i);
 8002cc6:	ed84 0a01 	vstr	s0, [r4, #4]
  p("reset!!!");
 8002cca:	4650      	mov	r0, sl
 8002ccc:	f001 ffa8 	bl	8004c20 <p>
  while (sys.power_enable_cnt > 0) {
 8002cd0:	68ab      	ldr	r3, [r5, #8]
 8002cd2:	b17b      	cbz	r3, 8002cf4 <protect+0x1ac>
    sys.power_enable_cnt--;
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	60ab      	str	r3, [r5, #8]
    sendCanData();
 8002cd8:	f7ff fe5e 	bl	8002998 <sendCanData>
    sendError(error.id, error.info, error.value);
 8002cdc:	ed94 0a01 	vldr	s0, [r4, #4]
 8002ce0:	8861      	ldrh	r1, [r4, #2]
 8002ce2:	8820      	ldrh	r0, [r4, #0]
 8002ce4:	f7fe fc60 	bl	80015a8 <sendError>
    HAL_Delay(2);
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f002 f889 	bl	8004e00 <HAL_Delay>
  while (sys.power_enable_cnt > 0) {
 8002cee:	68ab      	ldr	r3, [r5, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ef      	bne.n	8002cd4 <protect+0x18c>
  HAL_Delay(2);
 8002cf4:	2002      	movs	r0, #2
 8002cf6:	f002 f883 	bl	8004e00 <HAL_Delay>
  for (int i = 0; i < 2; i++) {
 8002cfa:	f109 0914 	add.w	r9, r9, #20
  HAL_NVIC_SystemReset();
 8002cfe:	f003 fc37 	bl	8006570 <HAL_NVIC_SystemReset>
  for (int i = 0; i < 2; i++) {
 8002d02:	3730      	adds	r7, #48	; 0x30
 8002d04:	2e00      	cmp	r6, #0
 8002d06:	f47f af43 	bne.w	8002b90 <protect+0x48>
 8002d0a:	2601      	movs	r6, #1
 8002d0c:	e72a      	b.n	8002b64 <protect+0x1c>
    forceStopAllPwmOutputAndTimer();
 8002d0e:	f001 fdc5 	bl	800489c <forceStopAllPwmOutputAndTimer>
    p("OVER Motor temperature!! M0 : %3d M1 : %3d", getTempMotor(0), getTempMotor(1));
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7fe fa44 	bl	80011a0 <getTempMotor>
 8002d18:	9004      	str	r0, [sp, #16]
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7fe fa40 	bl	80011a0 <getTempMotor>
 8002d20:	9904      	ldr	r1, [sp, #16]
    error.id = MOTOR_OVER_HEAT;
 8002d22:	4c45      	ldr	r4, [pc, #276]	; (8002e38 <protect+0x2f0>)
    p("OVER Motor temperature!! M0 : %3d M1 : %3d", getTempMotor(0), getTempMotor(1));
 8002d24:	4602      	mov	r2, r0
 8002d26:	4849      	ldr	r0, [pc, #292]	; (8002e4c <protect+0x304>)
 8002d28:	f001 ff7a 	bl	8004c20 <p>
    setLedBlue(true);
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f7fe fd4d 	bl	80017cc <setLedBlue>
    setLedGreen(true);
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fe fd52 	bl	80017dc <setLedGreen>
    setLedRed(true);
 8002d38:	2001      	movs	r0, #1
 8002d3a:	f7fe fd3f 	bl	80017bc <setLedRed>
    error.id = MOTOR_OVER_HEAT;
 8002d3e:	2304      	movs	r3, #4
    if (getTempMotor(0) > getTempMotor(1)) {
 8002d40:	2000      	movs	r0, #0
    error.id = MOTOR_OVER_HEAT;
 8002d42:	8023      	strh	r3, [r4, #0]
    if (getTempMotor(0) > getTempMotor(1)) {
 8002d44:	f7fe fa2c 	bl	80011a0 <getTempMotor>
 8002d48:	4605      	mov	r5, r0
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	f7fe fa28 	bl	80011a0 <getTempMotor>
 8002d50:	4285      	cmp	r5, r0
 8002d52:	dc25      	bgt.n	8002da0 <protect+0x258>
      error.info = 1;
 8002d54:	2001      	movs	r0, #1
 8002d56:	8060      	strh	r0, [r4, #2]
      error.value = (float)getTempMotor(1);
 8002d58:	f7fe fa22 	bl	80011a0 <getTempMotor>
 8002d5c:	ee07 0a90 	vmov	s15, r0
 8002d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  while (sys.power_enable_cnt > 0) {
 8002d64:	4d37      	ldr	r5, [pc, #220]	; (8002e44 <protect+0x2fc>)
  p("reset!!!");
 8002d66:	4838      	ldr	r0, [pc, #224]	; (8002e48 <protect+0x300>)
      error.value = (float)getTempMotor(0);
 8002d68:	edc4 7a01 	vstr	s15, [r4, #4]
  p("reset!!!");
 8002d6c:	f001 ff58 	bl	8004c20 <p>
  while (sys.power_enable_cnt > 0) {
 8002d70:	68ab      	ldr	r3, [r5, #8]
 8002d72:	b17b      	cbz	r3, 8002d94 <protect+0x24c>
    sys.power_enable_cnt--;
 8002d74:	3b01      	subs	r3, #1
 8002d76:	60ab      	str	r3, [r5, #8]
    sendCanData();
 8002d78:	f7ff fe0e 	bl	8002998 <sendCanData>
    sendError(error.id, error.info, error.value);
 8002d7c:	ed94 0a01 	vldr	s0, [r4, #4]
 8002d80:	8861      	ldrh	r1, [r4, #2]
 8002d82:	8820      	ldrh	r0, [r4, #0]
 8002d84:	f7fe fc10 	bl	80015a8 <sendError>
    HAL_Delay(2);
 8002d88:	2002      	movs	r0, #2
 8002d8a:	f002 f839 	bl	8004e00 <HAL_Delay>
  while (sys.power_enable_cnt > 0) {
 8002d8e:	68ab      	ldr	r3, [r5, #8]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ef      	bne.n	8002d74 <protect+0x22c>
  HAL_Delay(2);
 8002d94:	2002      	movs	r0, #2
 8002d96:	f002 f833 	bl	8004e00 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8002d9a:	f003 fbe9 	bl	8006570 <HAL_NVIC_SystemReset>
}
 8002d9e:	e717      	b.n	8002bd0 <protect+0x88>
      error.info = 0;
 8002da0:	2000      	movs	r0, #0
 8002da2:	8060      	strh	r0, [r4, #2]
      error.value = (float)getTempMotor(0);
 8002da4:	f7fe f9fc 	bl	80011a0 <getTempMotor>
 8002da8:	ee07 0a90 	vmov	s15, r0
 8002dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002db0:	e7d8      	b.n	8002d64 <protect+0x21c>
}
 8002db2:	b007      	add	sp, #28
 8002db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      error.value = pid[0].load_limit_cnt;
 8002db8:	ee07 2a90 	vmov	s15, r2
      error.info = 0;
 8002dbc:	2300      	movs	r3, #0
      error.value = pid[0].load_limit_cnt;
 8002dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc2:	e731      	b.n	8002c28 <protect+0xe0>
    setPwmAll(0);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f001 fd59 	bl	800487c <setPwmAll>
    p("OVER voltage!! %6.3f", getBatteryVoltage());
 8002dca:	f7fe f979 	bl	80010c0 <getBatteryVoltage>
 8002dce:	ee10 0a10 	vmov	r0, s0
 8002dd2:	f7fd fbb9 	bl	8000548 <__aeabi_f2d>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	481d      	ldr	r0, [pc, #116]	; (8002e50 <protect+0x308>)
    error.id = OVER_VOLTAGE;
 8002ddc:	4c16      	ldr	r4, [pc, #88]	; (8002e38 <protect+0x2f0>)
  while (sys.power_enable_cnt > 0) {
 8002dde:	4d19      	ldr	r5, [pc, #100]	; (8002e44 <protect+0x2fc>)
    p("OVER voltage!! %6.3f", getBatteryVoltage());
 8002de0:	f001 ff1e 	bl	8004c20 <p>
    setLedBlue(true);
 8002de4:	2001      	movs	r0, #1
 8002de6:	f7fe fcf1 	bl	80017cc <setLedBlue>
    setLedGreen(false);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fe fcf6 	bl	80017dc <setLedGreen>
    setLedRed(true);
 8002df0:	2001      	movs	r0, #1
 8002df2:	f7fe fce3 	bl	80017bc <setLedRed>
    error.id = OVER_VOLTAGE;
 8002df6:	2320      	movs	r3, #32
 8002df8:	6023      	str	r3, [r4, #0]
    error.value = getBatteryVoltage();
 8002dfa:	f7fe f961 	bl	80010c0 <getBatteryVoltage>
  p("reset!!!");
 8002dfe:	4812      	ldr	r0, [pc, #72]	; (8002e48 <protect+0x300>)
    error.value = getBatteryVoltage();
 8002e00:	ed84 0a01 	vstr	s0, [r4, #4]
  p("reset!!!");
 8002e04:	f001 ff0c 	bl	8004c20 <p>
  while (sys.power_enable_cnt > 0) {
 8002e08:	68ab      	ldr	r3, [r5, #8]
 8002e0a:	b17b      	cbz	r3, 8002e2c <protect+0x2e4>
    sys.power_enable_cnt--;
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	60ab      	str	r3, [r5, #8]
    sendCanData();
 8002e10:	f7ff fdc2 	bl	8002998 <sendCanData>
    sendError(error.id, error.info, error.value);
 8002e14:	ed94 0a01 	vldr	s0, [r4, #4]
 8002e18:	8861      	ldrh	r1, [r4, #2]
 8002e1a:	8820      	ldrh	r0, [r4, #0]
 8002e1c:	f7fe fbc4 	bl	80015a8 <sendError>
    HAL_Delay(2);
 8002e20:	2002      	movs	r0, #2
 8002e22:	f001 ffed 	bl	8004e00 <HAL_Delay>
  while (sys.power_enable_cnt > 0) {
 8002e26:	68ab      	ldr	r3, [r5, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ef      	bne.n	8002e0c <protect+0x2c4>
  HAL_Delay(2);
 8002e2c:	2002      	movs	r0, #2
 8002e2e:	f001 ffe7 	bl	8004e00 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8002e32:	f003 fb9d 	bl	8006570 <HAL_NVIC_SystemReset>
}
 8002e36:	e6bf      	b.n	8002bb8 <protect+0x70>
 8002e38:	20000434 	.word	0x20000434
 8002e3c:	420c0000 	.word	0x420c0000
 8002e40:	0800d7c8 	.word	0x0800d7c8
 8002e44:	20000504 	.word	0x20000504
 8002e48:	0800d724 	.word	0x0800d724
 8002e4c:	0800d79c 	.word	0x0800d79c
 8002e50:	0800d784 	.word	0x0800d784
 8002e54:	20000480 	.word	0x20000480
 8002e58:	200003f0 	.word	0x200003f0
 8002e5c:	0800d730 	.word	0x0800d730
    forceStopAllPwmOutputAndTimer();
 8002e60:	f001 fd1c 	bl	800489c <forceStopAllPwmOutputAndTimer>
    p("UNDER voltage!! %6.3f", getBatteryVoltage());
 8002e64:	f7fe f92c 	bl	80010c0 <getBatteryVoltage>
 8002e68:	ee10 0a10 	vmov	r0, s0
 8002e6c:	f7fd fb6c 	bl	8000548 <__aeabi_f2d>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4816      	ldr	r0, [pc, #88]	; (8002ed0 <protect+0x388>)
    error.id = UNDER_VOLTAGE;
 8002e76:	4c17      	ldr	r4, [pc, #92]	; (8002ed4 <protect+0x38c>)
  while (sys.power_enable_cnt > 0) {
 8002e78:	4d17      	ldr	r5, [pc, #92]	; (8002ed8 <protect+0x390>)
    p("UNDER voltage!! %6.3f", getBatteryVoltage());
 8002e7a:	f001 fed1 	bl	8004c20 <p>
    setLedBlue(true);
 8002e7e:	4630      	mov	r0, r6
 8002e80:	f7fe fca4 	bl	80017cc <setLedBlue>
    setLedGreen(false);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fe fca9 	bl	80017dc <setLedGreen>
    setLedRed(true);
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f7fe fc96 	bl	80017bc <setLedRed>
    error.id = UNDER_VOLTAGE;
 8002e90:	6026      	str	r6, [r4, #0]
    error.value = getBatteryVoltage();
 8002e92:	f7fe f915 	bl	80010c0 <getBatteryVoltage>
  p("reset!!!");
 8002e96:	4811      	ldr	r0, [pc, #68]	; (8002edc <protect+0x394>)
    error.value = getBatteryVoltage();
 8002e98:	ed84 0a01 	vstr	s0, [r4, #4]
  p("reset!!!");
 8002e9c:	f001 fec0 	bl	8004c20 <p>
  while (sys.power_enable_cnt > 0) {
 8002ea0:	68ab      	ldr	r3, [r5, #8]
 8002ea2:	b17b      	cbz	r3, 8002ec4 <protect+0x37c>
    sys.power_enable_cnt--;
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60ab      	str	r3, [r5, #8]
    sendCanData();
 8002ea8:	f7ff fd76 	bl	8002998 <sendCanData>
    sendError(error.id, error.info, error.value);
 8002eac:	ed94 0a01 	vldr	s0, [r4, #4]
 8002eb0:	8861      	ldrh	r1, [r4, #2]
 8002eb2:	8820      	ldrh	r0, [r4, #0]
 8002eb4:	f7fe fb78 	bl	80015a8 <sendError>
    HAL_Delay(2);
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f001 ffa1 	bl	8004e00 <HAL_Delay>
  while (sys.power_enable_cnt > 0) {
 8002ebe:	68ab      	ldr	r3, [r5, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ef      	bne.n	8002ea4 <protect+0x35c>
  HAL_Delay(2);
 8002ec4:	2002      	movs	r0, #2
 8002ec6:	f001 ff9b 	bl	8004e00 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8002eca:	f003 fb51 	bl	8006570 <HAL_NVIC_SystemReset>
}
 8002ece:	e669      	b.n	8002ba4 <protect+0x5c>
 8002ed0:	0800d76c 	.word	0x0800d76c
 8002ed4:	20000434 	.word	0x20000434
 8002ed8:	20000504 	.word	0x20000504
 8002edc:	0800d724 	.word	0x0800d724

08002ee0 <SystemClock_Config>:
{
 8002ee0:	b510      	push	{r4, lr}
 8002ee2:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ee4:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ee6:	223c      	movs	r2, #60	; 0x3c
 8002ee8:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002eea:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eee:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002ef2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef6:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ef8:	9101      	str	r1, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002efa:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002efc:	f008 f95e 	bl	800b1bc <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f00:	2201      	movs	r2, #1
 8002f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f06:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f0a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f0c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002f16:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f18:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f1c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002f1e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002f20:	f003 feee 	bl	8006d00 <HAL_RCC_OscConfig>
 8002f24:	b108      	cbz	r0, 8002f2a <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f26:	b672      	cpsid	i
  while (1) {
 8002f28:	e7fe      	b.n	8002f28 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f30:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f36:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f38:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f3c:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f3e:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002f40:	f004 f9a6 	bl	8007290 <HAL_RCC_ClockConfig>
 8002f44:	4603      	mov	r3, r0
 8002f46:	b108      	cbz	r0, 8002f4c <SystemClock_Config+0x6c>
 8002f48:	b672      	cpsid	i
  while (1) {
 8002f4a:	e7fe      	b.n	8002f4a <SystemClock_Config+0x6a>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002f4c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8002f78 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_TIM8 | RCC_PERIPHCLK_ADC34;
 8002f50:	f243 1101 	movw	r1, #12545	; 0x3101
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002f58:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002f5a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_TIM1 | RCC_PERIPHCLK_TIM8 | RCC_PERIPHCLK_ADC34;
 8002f5e:	9110      	str	r1, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f60:	9312      	str	r3, [sp, #72]	; 0x48
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002f62:	921a      	str	r2, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002f64:	f004 fade 	bl	8007524 <HAL_RCCEx_PeriphCLKConfig>
 8002f68:	b108      	cbz	r0, 8002f6e <SystemClock_Config+0x8e>
 8002f6a:	b672      	cpsid	i
  while (1) {
 8002f6c:	e7fe      	b.n	8002f6c <SystemClock_Config+0x8c>
}
 8002f6e:	b020      	add	sp, #128	; 0x80
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	bf00      	nop
 8002f74:	f3af 8000 	nop.w
	...

08002f80 <main>:
{
 8002f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f84:	ed2d 8b04 	vpush	{d8-d9}
 8002f88:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8002f8a:	f001 ff15 	bl	8004db8 <HAL_Init>
  SystemClock_Config();
 8002f8e:	f7ff ffa7 	bl	8002ee0 <SystemClock_Config>
  MX_GPIO_Init();
 8002f92:	f7fe fc2b 	bl	80017ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002f96:	f7fe fb33 	bl	8001600 <MX_DMA_Init>
  MX_ADC1_Init();
 8002f9a:	f7fd fe75 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002f9e:	f7fd ff03 	bl	8000da8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8002fa2:	f7fd ff75 	bl	8000e90 <MX_ADC3_Init>
  MX_CAN_Init();
 8002fa6:	f7fe f98f 	bl	80012c8 <MX_CAN_Init>
  MX_SPI1_Init();
 8002faa:	f000 ff39 	bl	8003e20 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002fae:	f001 fa9f 	bl	80044f0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002fb2:	f001 fb25 	bl	8004600 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002fb6:	f001 fd67 	bl	8004a88 <MX_USART1_UART_Init>
  initFirstSin();
 8002fba:	f001 fba9 	bl	8004710 <initFirstSin>
  setLedRed(true);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7fe fbfc 	bl	80017bc <setLedRed>
  setLedGreen(true);
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	f7fe fc09 	bl	80017dc <setLedGreen>
  setLedBlue(true);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7fe fbfe 	bl	80017cc <setLedBlue>
  HAL_Delay(100);
 8002fd0:	2064      	movs	r0, #100	; 0x64
 8002fd2:	f001 ff15 	bl	8004e00 <HAL_Delay>
  loadFlashData();
 8002fd6:	f7fe fbad 	bl	8001734 <loadFlashData>
  p("\n\n** Orion VV driver V4 start! %s %s **\n", __DATE__, __TIME__);
 8002fda:	4ad2      	ldr	r2, [pc, #840]	; (8003324 <main+0x3a4>)
 8002fdc:	49d2      	ldr	r1, [pc, #840]	; (8003328 <main+0x3a8>)
 8002fde:	48d3      	ldr	r0, [pc, #844]	; (800332c <main+0x3ac>)
    cmd[i].speed = 0;
 8002fe0:	4cd3      	ldr	r4, [pc, #844]	; (8003330 <main+0x3b0>)
  calib_process.force_rotation_speed = 0.005;
 8002fe2:	4fd4      	ldr	r7, [pc, #848]	; (8003334 <main+0x3b4>)
  sys.free_wheel_cnt = START_UP_FREE_WHEEL_CNT;
 8002fe4:	4dd4      	ldr	r5, [pc, #848]	; (8003338 <main+0x3b8>)
  p("\n\n** Orion VV driver V4 start! %s %s **\n", __DATE__, __TIME__);
 8002fe6:	f001 fe1b 	bl	8004c20 <p>
    pid[i].pid_kd = 0.0;
 8002fea:	4ad4      	ldr	r2, [pc, #848]	; (800333c <main+0x3bc>)
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8002fec:	49d4      	ldr	r1, [pc, #848]	; (8003340 <main+0x3c0>)
    pid[i].pid_kd = 0.0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6093      	str	r3, [r2, #8]
    cmd[i].speed = 0;
 8002ff2:	6023      	str	r3, [r4, #0]
    cmd[i].out_v = 0;
 8002ff4:	60a3      	str	r3, [r4, #8]
    cmd[i].out_v_final = 0;
 8002ff6:	60e3      	str	r3, [r4, #12]
  calib_process.force_rotation_speed = 0.005;
 8002ff8:	4bd2      	ldr	r3, [pc, #840]	; (8003344 <main+0x3c4>)
 8002ffa:	613b      	str	r3, [r7, #16]
    pid[i].pid_kp = 0.2;
 8002ffc:	4bd2      	ldr	r3, [pc, #840]	; (8003348 <main+0x3c8>)
 8002ffe:	6053      	str	r3, [r2, #4]
    pid[i].pid_ki = 0.3;
 8003000:	4bd2      	ldr	r3, [pc, #840]	; (800334c <main+0x3cc>)
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003002:	ed91 8a03 	vldr	s16, [r1, #12]
    enc_offset[i].zero_calib = flash.calib[i];
 8003006:	6808      	ldr	r0, [r1, #0]
    pid[i].pid_ki = 0.3;
 8003008:	60d3      	str	r3, [r2, #12]
 800300a:	4611      	mov	r1, r2
  sys.free_wheel_cnt = START_UP_FREE_WHEEL_CNT;
 800300c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003010:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  sys.free_wheel_cnt = START_UP_FREE_WHEEL_CNT;
 8003014:	602b      	str	r3, [r5, #0]
    pid[i].error_integral_limit = 4.0;
 8003016:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
    enc_offset[i].zero_calib = flash.calib[i];
 800301a:	4acd      	ldr	r2, [pc, #820]	; (8003350 <main+0x3d0>)
    pid[i].error_integral_limit = 4.0;
 800301c:	61cb      	str	r3, [r1, #28]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800301e:	eeb4 8ae7 	vcmpe.f32	s16, s15
    pid[i].diff_voltage_limit = 6.0;  // 2.0 -> 4.0 -> 6.0
 8003022:	4bcc      	ldr	r3, [pc, #816]	; (8003354 <main+0x3d4>)
 8003024:	624b      	str	r3, [r1, #36]	; 0x24
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cmd[i].timeout_cnt = -1;
 800302a:	f04f 33ff 	mov.w	r3, #4294967295
    enc_offset[i].zero_calib = flash.calib[i];
 800302e:	6050      	str	r0, [r2, #4]
    cmd[i].timeout_cnt = -1;
 8003030:	6123      	str	r3, [r4, #16]
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003032:	dd07      	ble.n	8003044 <main+0xc4>
 8003034:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003038:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	f100 85e6 	bmi.w	8003c10 <main+0xc90>
      motor_param[i].voltage_per_rps = V_PER_RPS_DEFAULT;
 8003044:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8003358 <main+0x3d8>
    pid[i].pid_kd = 0.0;
 8003048:	49bc      	ldr	r1, [pc, #752]	; (800333c <main+0x3bc>)
    cmd[i].speed = 0;
 800304a:	4cb9      	ldr	r4, [pc, #740]	; (8003330 <main+0x3b0>)
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800304c:	4ebc      	ldr	r6, [pc, #752]	; (8003340 <main+0x3c0>)
    pid[i].pid_kd = 0.0;
 800304e:	2300      	movs	r3, #0
    cmd[i].speed = 0;
 8003050:	6163      	str	r3, [r4, #20]
    cmd[i].out_v = 0;
 8003052:	61e3      	str	r3, [r4, #28]
    cmd[i].out_v_final = 0;
 8003054:	6223      	str	r3, [r4, #32]
    pid[i].pid_kd = 0.0;
 8003056:	638b      	str	r3, [r1, #56]	; 0x38
    pid[i].pid_kp = 0.2;
 8003058:	4bbb      	ldr	r3, [pc, #748]	; (8003348 <main+0x3c8>)
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800305a:	edd6 8a04 	vldr	s17, [r6, #16]
    pid[i].pid_kp = 0.2;
 800305e:	634b      	str	r3, [r1, #52]	; 0x34
    pid[i].pid_ki = 0.3;
 8003060:	4bba      	ldr	r3, [pc, #744]	; (800334c <main+0x3cc>)
    enc_offset[i].zero_calib = flash.calib[i];
 8003062:	6876      	ldr	r6, [r6, #4]
    pid[i].pid_ki = 0.3;
 8003064:	63cb      	str	r3, [r1, #60]	; 0x3c
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003066:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    pid[i].error_integral_limit = 4.0;
 800306a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800306e:	4cbb      	ldr	r4, [pc, #748]	; (800335c <main+0x3dc>)
    enc_offset[i].zero_calib = flash.calib[i];
 8003070:	60d6      	str	r6, [r2, #12]
    pid[i].error_integral_limit = 4.0;
 8003072:	64cb      	str	r3, [r1, #76]	; 0x4c
    cmd[i].timeout_cnt = -1;
 8003074:	4aae      	ldr	r2, [pc, #696]	; (8003330 <main+0x3b0>)
    pid[i].diff_voltage_limit = 6.0;  // 2.0 -> 4.0 -> 6.0
 8003076:	4bb7      	ldr	r3, [pc, #732]	; (8003354 <main+0x3d4>)
 8003078:	654b      	str	r3, [r1, #84]	; 0x54
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800307a:	eef4 8ae7 	vcmpe.f32	s17, s15
    cmd[i].timeout_cnt = -1;
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 8003082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003086:	ed84 7a00 	vstr	s14, [r4]
    cmd[i].timeout_cnt = -1;
 800308a:	6253      	str	r3, [r2, #36]	; 0x24
    if (1 < flash.rps_per_v_cw[i] && flash.rps_per_v_cw[i] < 10) {
 800308c:	dd07      	ble.n	800309e <main+0x11e>
 800308e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003092:	eef4 8ac7 	vcmpe.f32	s17, s14
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	f100 85b5 	bmi.w	8003c08 <main+0xc88>
      motor_param[i].voltage_per_rps = V_PER_RPS_DEFAULT;
 800309e:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8003358 <main+0x3d8>
 80030a2:	ed84 7a02 	vstr	s14, [r4, #8]
  p("CAN ADDR 0x%03x\nenc offset M0 %6.3f M1 %6.3f\nRPS/V M0 %6.3f M1 %6.3f\n", flash.board_id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]);
 80030a6:	f7fd fa4f 	bl	8000548 <__aeabi_f2d>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	ee18 0a90 	vmov	r0, s17
 80030b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80030b6:	f7fd fa47 	bl	8000548 <__aeabi_f2d>
 80030ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030be:	ee18 0a10 	vmov	r0, s16
 80030c2:	f7fd fa41 	bl	8000548 <__aeabi_f2d>
 80030c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030ca:	4630      	mov	r0, r6
 80030cc:	f7fd fa3c 	bl	8000548 <__aeabi_f2d>
 80030d0:	e9cd 0100 	strd	r0, r1, [sp]
 80030d4:	4e9a      	ldr	r6, [pc, #616]	; (8003340 <main+0x3c0>)
 80030d6:	48a2      	ldr	r0, [pc, #648]	; (8003360 <main+0x3e0>)
 80030d8:	68b1      	ldr	r1, [r6, #8]
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 80030da:	ed9f 9aa2 	vldr	s18, [pc, #648]	; 8003364 <main+0x3e4>
  p("CAN ADDR 0x%03x\nenc offset M0 %6.3f M1 %6.3f\nRPS/V M0 %6.3f M1 %6.3f\n", flash.board_id, flash.calib[0], flash.calib[1], flash.rps_per_v_cw[0], flash.rps_per_v_cw[1]);
 80030de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80030e2:	f001 fd9d 	bl	8004c20 <p>
  HAL_Delay(1);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f001 fe8a 	bl	8004e00 <HAL_Delay>
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 80030ec:	edd6 7a03 	vldr	s15, [r6, #12]
    p("0x%02x ", readRegisterMA702(i, 1));  // Z offset-H
 80030f0:	4e9d      	ldr	r6, [pc, #628]	; (8003368 <main+0x3e8>)
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 80030f2:	ee67 7a89 	vmul.f32	s15, s15, s18
  for (int i = 0; i < 2; i++) {
 80030f6:	f04f 0800 	mov.w	r8, #0
  p("Kv M0 %6.3f M1 %6.3f rpm/V\n", flash.rps_per_v_cw[0] * 60, flash.rps_per_v_cw[1] * 60);
 80030fa:	ee17 0a90 	vmov	r0, s15
 80030fe:	f7fd fa23 	bl	8000548 <__aeabi_f2d>
 8003102:	4b8f      	ldr	r3, [pc, #572]	; (8003340 <main+0x3c0>)
 8003104:	edd3 7a04 	vldr	s15, [r3, #16]
 8003108:	ee67 7a89 	vmul.f32	s15, s15, s18
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	ee17 0a90 	vmov	r0, s15
 8003114:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003118:	f7fd fa16 	bl	8000548 <__aeabi_f2d>
 800311c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003120:	e9cd 0100 	strd	r0, r1, [sp]
 8003124:	4891      	ldr	r0, [pc, #580]	; (800336c <main+0x3ec>)
 8003126:	f001 fd7b 	bl	8004c20 <p>
  __HAL_SPI_ENABLE(&hspi1);
 800312a:	4b91      	ldr	r3, [pc, #580]	; (8003370 <main+0x3f0>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800312c:	4891      	ldr	r0, [pc, #580]	; (8003374 <main+0x3f4>)
  __HAL_SPI_ENABLE(&hspi1);
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	6813      	ldr	r3, [r2, #0]
 8003132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003136:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	2201      	movs	r2, #1
 800313c:	f003 fdda 	bl	8006cf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003140:	2201      	movs	r2, #1
 8003142:	2140      	movs	r1, #64	; 0x40
 8003144:	488b      	ldr	r0, [pc, #556]	; (8003374 <main+0x3f4>)
 8003146:	f003 fdd5 	bl	8006cf4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800314a:	2001      	movs	r0, #1
 800314c:	f001 fe58 	bl	8004e00 <HAL_Delay>
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 8003150:	4b7b      	ldr	r3, [pc, #492]	; (8003340 <main+0x3c0>)
 8003152:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8003378 <main+0x3f8>
 8003156:	ed93 6a03 	vldr	s12, [r3, #12]
  motor_param[1].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[1] * SPEED_REAL_LIMIT_GAIN;
 800315a:	edd3 6a04 	vldr	s13, [r3, #16]
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 800315e:	eec7 7a06 	vdiv.f32	s15, s14, s12
  motor_param[1].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[1] * SPEED_REAL_LIMIT_GAIN;
 8003162:	ee87 8a26 	vdiv.f32	s16, s14, s13
  p("output voltage limit : %5.2f %5.2f\n", motor_param[0].output_voltage_limit, motor_param[1].output_voltage_limit);
 8003166:	ee17 0a90 	vmov	r0, s15
  motor_param[0].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[0] * SPEED_REAL_LIMIT_GAIN;
 800316a:	edc4 7a01 	vstr	s15, [r4, #4]
  motor_param[1].output_voltage_limit = SPEED_CMD_LIMIT_RPS / flash.rps_per_v_cw[1] * SPEED_REAL_LIMIT_GAIN;
 800316e:	ed84 8a03 	vstr	s16, [r4, #12]
  p("output voltage limit : %5.2f %5.2f\n", motor_param[0].output_voltage_limit, motor_param[1].output_voltage_limit);
 8003172:	f7fd f9e9 	bl	8000548 <__aeabi_f2d>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	ee18 0a10 	vmov	r0, s16
 800317e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003182:	f7fd f9e1 	bl	8000548 <__aeabi_f2d>
 8003186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800318a:	e9cd 0100 	strd	r0, r1, [sp]
 800318e:	487b      	ldr	r0, [pc, #492]	; (800337c <main+0x3fc>)
 8003190:	f001 fd46 	bl	8004c20 <p>
  HAL_Delay(1);
 8003194:	2001      	movs	r0, #1
 8003196:	f001 fe33 	bl	8004e00 <HAL_Delay>
  p("0x00 0x01 0x02 0x03 0x04 0x05 0x06 0x09 0x0E 0x10 0x1B\n");
 800319a:	4879      	ldr	r0, [pc, #484]	; (8003380 <main+0x400>)
 800319c:	f001 fd40 	bl	8004c20 <p>
    HAL_Delay(10);
 80031a0:	200a      	movs	r0, #10
 80031a2:	f001 fe2d 	bl	8004e00 <HAL_Delay>
    writeRegisterMA702(i, 5, 0xFF);
 80031a6:	22ff      	movs	r2, #255	; 0xff
 80031a8:	2105      	movs	r1, #5
 80031aa:	4640      	mov	r0, r8
 80031ac:	f000 ff08 	bl	8003fc0 <writeRegisterMA702>
    HAL_Delay(10);
 80031b0:	200a      	movs	r0, #10
 80031b2:	f001 fe25 	bl	8004e00 <HAL_Delay>
    writeRegisterMA702(i, 6, 0x1C);
 80031b6:	221c      	movs	r2, #28
 80031b8:	2106      	movs	r1, #6
 80031ba:	4640      	mov	r0, r8
 80031bc:	f000 ff00 	bl	8003fc0 <writeRegisterMA702>
    HAL_Delay(10);
 80031c0:	200a      	movs	r0, #10
 80031c2:	f001 fe1d 	bl	8004e00 <HAL_Delay>
    writeRegisterMA702(i, 0x10, 0x9C);
 80031c6:	229c      	movs	r2, #156	; 0x9c
 80031c8:	2110      	movs	r1, #16
 80031ca:	4640      	mov	r0, r8
 80031cc:	f000 fef8 	bl	8003fc0 <writeRegisterMA702>
    HAL_Delay(10);
 80031d0:	200a      	movs	r0, #10
 80031d2:	f001 fe15 	bl	8004e00 <HAL_Delay>
    writeRegisterMA702(i, 0x1B, 0x43);
 80031d6:	2243      	movs	r2, #67	; 0x43
 80031d8:	211b      	movs	r1, #27
 80031da:	4640      	mov	r0, r8
 80031dc:	f000 fef0 	bl	8003fc0 <writeRegisterMA702>
    HAL_Delay(10);
 80031e0:	200a      	movs	r0, #10
 80031e2:	f001 fe0d 	bl	8004e00 <HAL_Delay>
    writeRegisterMA702(i, 0x0E, 0x77);
 80031e6:	2277      	movs	r2, #119	; 0x77
 80031e8:	210e      	movs	r1, #14
 80031ea:	4640      	mov	r0, r8
 80031ec:	f000 fee8 	bl	8003fc0 <writeRegisterMA702>
    HAL_Delay(10);
 80031f0:	200a      	movs	r0, #10
 80031f2:	f001 fe05 	bl	8004e00 <HAL_Delay>
    p("reg = 0x%02x", readRegisterMA702(i, 0));  // Z offset-L
 80031f6:	2100      	movs	r1, #0
 80031f8:	4640      	mov	r0, r8
 80031fa:	f000 fe7b 	bl	8003ef4 <readRegisterMA702>
 80031fe:	4601      	mov	r1, r0
 8003200:	4860      	ldr	r0, [pc, #384]	; (8003384 <main+0x404>)
 8003202:	f001 fd0d 	bl	8004c20 <p>
    HAL_Delay(1);
 8003206:	2001      	movs	r0, #1
 8003208:	f001 fdfa 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 1));  // Z offset-H
 800320c:	2101      	movs	r1, #1
 800320e:	4640      	mov	r0, r8
 8003210:	f000 fe70 	bl	8003ef4 <readRegisterMA702>
 8003214:	4601      	mov	r1, r0
 8003216:	4630      	mov	r0, r6
 8003218:	f001 fd02 	bl	8004c20 <p>
    HAL_Delay(1);
 800321c:	2001      	movs	r0, #1
 800321e:	f001 fdef 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 2));  // BCT (off-axis param)
 8003222:	2102      	movs	r1, #2
 8003224:	4640      	mov	r0, r8
 8003226:	f000 fe65 	bl	8003ef4 <readRegisterMA702>
 800322a:	4601      	mov	r1, r0
 800322c:	4630      	mov	r0, r6
 800322e:	f001 fcf7 	bl	8004c20 <p>
    HAL_Delay(1);
 8003232:	2001      	movs	r0, #1
 8003234:	f001 fde4 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 3));  // ETY,ETX
 8003238:	2103      	movs	r1, #3
 800323a:	4640      	mov	r0, r8
 800323c:	f000 fe5a 	bl	8003ef4 <readRegisterMA702>
 8003240:	4601      	mov	r1, r0
 8003242:	4630      	mov	r0, r6
 8003244:	f001 fcec 	bl	8004c20 <p>
    HAL_Delay(1);
 8003248:	2001      	movs	r0, #1
 800324a:	f001 fdd9 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 4));  // PPT-L/ILIP
 800324e:	2104      	movs	r1, #4
 8003250:	4640      	mov	r0, r8
 8003252:	f000 fe4f 	bl	8003ef4 <readRegisterMA702>
 8003256:	4601      	mov	r1, r0
 8003258:	4630      	mov	r0, r6
 800325a:	f001 fce1 	bl	8004c20 <p>
    HAL_Delay(1);
 800325e:	2001      	movs	r0, #1
 8003260:	f001 fdce 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 5));  // PPT-H
 8003264:	2105      	movs	r1, #5
 8003266:	4640      	mov	r0, r8
 8003268:	f000 fe44 	bl	8003ef4 <readRegisterMA702>
 800326c:	4601      	mov	r1, r0
 800326e:	4630      	mov	r0, r6
 8003270:	f001 fcd6 	bl	8004c20 <p>
    HAL_Delay(1);
 8003274:	2001      	movs	r0, #1
 8003276:	f001 fdc3 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 6));  // MGLT/MGHT
 800327a:	2106      	movs	r1, #6
 800327c:	4640      	mov	r0, r8
 800327e:	f000 fe39 	bl	8003ef4 <readRegisterMA702>
 8003282:	4601      	mov	r1, r0
 8003284:	4630      	mov	r0, r6
 8003286:	f001 fccb 	bl	8004c20 <p>
    HAL_Delay(1);
 800328a:	2001      	movs	r0, #1
 800328c:	f001 fdb8 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 9));  // RD
 8003290:	2109      	movs	r1, #9
 8003292:	4640      	mov	r0, r8
 8003294:	f000 fe2e 	bl	8003ef4 <readRegisterMA702>
 8003298:	4601      	mov	r1, r0
 800329a:	4630      	mov	r0, r6
 800329c:	f001 fcc0 	bl	8004c20 <p>
    HAL_Delay(1);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f001 fdad 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 0xE));  // FW
 80032a6:	210e      	movs	r1, #14
 80032a8:	4640      	mov	r0, r8
 80032aa:	f000 fe23 	bl	8003ef4 <readRegisterMA702>
 80032ae:	4601      	mov	r1, r0
 80032b0:	4630      	mov	r0, r6
 80032b2:	f001 fcb5 	bl	8004c20 <p>
    HAL_Delay(1);
 80032b6:	2001      	movs	r0, #1
 80032b8:	f001 fda2 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 0x10));  // HYS
 80032bc:	2110      	movs	r1, #16
 80032be:	4640      	mov	r0, r8
 80032c0:	f000 fe18 	bl	8003ef4 <readRegisterMA702>
 80032c4:	4601      	mov	r1, r0
 80032c6:	4630      	mov	r0, r6
 80032c8:	f001 fcaa 	bl	8004c20 <p>
    HAL_Delay(1);
 80032cc:	2001      	movs	r0, #1
 80032ce:	f001 fd97 	bl	8004e00 <HAL_Delay>
    p("0x%02x ", readRegisterMA702(i, 0x1B));  // MGH&L
 80032d2:	211b      	movs	r1, #27
 80032d4:	4640      	mov	r0, r8
 80032d6:	f000 fe0d 	bl	8003ef4 <readRegisterMA702>
 80032da:	4601      	mov	r1, r0
 80032dc:	4630      	mov	r0, r6
 80032de:	f001 fc9f 	bl	8004c20 <p>
    HAL_Delay(1);
 80032e2:	2001      	movs	r0, #1
 80032e4:	f001 fd8c 	bl	8004e00 <HAL_Delay>
    p("\n");
 80032e8:	4827      	ldr	r0, [pc, #156]	; (8003388 <main+0x408>)
 80032ea:	f001 fc99 	bl	8004c20 <p>
  for (int i = 0; i < 2; i++) {
 80032ee:	f1b8 0f00 	cmp.w	r8, #0
 80032f2:	f000 846e 	beq.w	8003bd2 <main+0xc52>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80032f6:	2100      	movs	r1, #0
 80032f8:	4824      	ldr	r0, [pc, #144]	; (800338c <main+0x40c>)
 80032fa:	f001 ffe1 	bl	80052c0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80032fe:	2100      	movs	r1, #0
 8003300:	4823      	ldr	r0, [pc, #140]	; (8003390 <main+0x410>)
 8003302:	f001 ffdd 	bl	80052c0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8003306:	2100      	movs	r1, #0
 8003308:	4822      	ldr	r0, [pc, #136]	; (8003394 <main+0x414>)
 800330a:	f001 ffd9 	bl	80052c0 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 800330e:	481f      	ldr	r0, [pc, #124]	; (800338c <main+0x40c>)
 8003310:	f001 ff3e 	bl	8005190 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8003314:	481e      	ldr	r0, [pc, #120]	; (8003390 <main+0x410>)
 8003316:	f001 ff3b 	bl	8005190 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 800331a:	481e      	ldr	r0, [pc, #120]	; (8003394 <main+0x414>)
 800331c:	f001 ff38 	bl	8005190 <HAL_ADC_Start>
 8003320:	e03a      	b.n	8003398 <main+0x418>
 8003322:	bf00      	nop
 8003324:	0800d7dc 	.word	0x0800d7dc
 8003328:	0800d7e8 	.word	0x0800d7e8
 800332c:	0800d7f4 	.word	0x0800d7f4
 8003330:	200003f0 	.word	0x200003f0
 8003334:	200003b0 	.word	0x200003b0
 8003338:	20000504 	.word	0x20000504
 800333c:	20000480 	.word	0x20000480
 8003340:	20000338 	.word	0x20000338
 8003344:	3ba3d70a 	.word	0x3ba3d70a
 8003348:	3e4ccccd 	.word	0x3e4ccccd
 800334c:	3e99999a 	.word	0x3e99999a
 8003350:	20000424 	.word	0x20000424
 8003354:	40c00000 	.word	0x40c00000
 8003358:	3e19999a 	.word	0x3e19999a
 800335c:	20000444 	.word	0x20000444
 8003360:	0800d820 	.word	0x0800d820
 8003364:	42700000 	.word	0x42700000
 8003368:	0800d8f0 	.word	0x0800d8f0
 800336c:	0800d868 	.word	0x0800d868
 8003370:	20000524 	.word	0x20000524
 8003374:	48000400 	.word	0x48000400
 8003378:	42960000 	.word	0x42960000
 800337c:	0800d884 	.word	0x0800d884
 8003380:	0800d8a8 	.word	0x0800d8a8
 8003384:	0800d8e0 	.word	0x0800d8e0
 8003388:	0800d6d0 	.word	0x0800d6d0
 800338c:	2000021c 	.word	0x2000021c
 8003390:	2000026c 	.word	0x2000026c
 8003394:	200002bc 	.word	0x200002bc
  htim1.Instance->CNT = 0;
 8003398:	48ad      	ldr	r0, [pc, #692]	; (8003650 <main+0x6d0>)
  htim8.Instance->CNT = 10;
 800339a:	4bae      	ldr	r3, [pc, #696]	; (8003654 <main+0x6d4>)
  htim1.Instance->CNT = 0;
 800339c:	6802      	ldr	r2, [r0, #0]
  htim8.Instance->CNT = 10;
 800339e:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CNT = 0;
 80033a0:	2400      	movs	r4, #0
 80033a2:	6254      	str	r4, [r2, #36]	; 0x24
  htim8.Instance->CNT = 10;
 80033a4:	220a      	movs	r2, #10
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim1);
 80033a8:	f004 fac2 	bl	8007930 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80033ac:	4642      	mov	r2, r8
 80033ae:	49aa      	ldr	r1, [pc, #680]	; (8003658 <main+0x6d8>)
 80033b0:	48aa      	ldr	r0, [pc, #680]	; (800365c <main+0x6dc>)
 80033b2:	f005 fe67 	bl	8009084 <HAL_UART_Receive_IT>
  p("waiting startup voltage.... : %3.1fV\n", THR_BATTERY_UNVER_VOLTAGE + 2);
 80033b6:	48aa      	ldr	r0, [pc, #680]	; (8003660 <main+0x6e0>)
 80033b8:	4baa      	ldr	r3, [pc, #680]	; (8003664 <main+0x6e4>)
 80033ba:	2200      	movs	r2, #0
    if (getBatteryVoltage() > THR_BATTERY_UNVER_VOLTAGE + 2.0) {
 80033bc:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
  p("waiting startup voltage.... : %3.1fV\n", THR_BATTERY_UNVER_VOLTAGE + 2);
 80033c0:	f001 fc2e 	bl	8004c20 <p>
    HAL_Delay(1);
 80033c4:	2001      	movs	r0, #1
 80033c6:	f001 fd1b 	bl	8004e00 <HAL_Delay>
    if (getBatteryVoltage() > THR_BATTERY_UNVER_VOLTAGE + 2.0) {
 80033ca:	f7fd fe79 	bl	80010c0 <getBatteryVoltage>
 80033ce:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      over_startup_voltage = 0;
 80033d6:	bfd8      	it	le
 80033d8:	2400      	movle	r4, #0
    if (getBatteryVoltage() > THR_BATTERY_UNVER_VOLTAGE + 2.0) {
 80033da:	ddf3      	ble.n	80033c4 <main+0x444>
      over_startup_voltage++;
 80033dc:	3401      	adds	r4, #1
  while (over_startup_voltage < 500) {
 80033de:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 80033e2:	d1ef      	bne.n	80033c4 <main+0x444>
  p("ADC : %5d %5d GD %4.2f Batt %4.2f\n", adc_raw.cs_motor[0], adc_raw.cs_motor[1], getGateDriverDCDCVoltage(), getBatteryVoltage());
 80033e4:	4ca0      	ldr	r4, [pc, #640]	; (8003668 <main+0x6e8>)
 80033e6:	e9d4 8200 	ldrd	r8, r2, [r4]
 80033ea:	9206      	str	r2, [sp, #24]
 80033ec:	f7fd fe80 	bl	80010f0 <getGateDriverDCDCVoltage>
 80033f0:	ee10 6a10 	vmov	r6, s0
 80033f4:	f7fd fe64 	bl	80010c0 <getBatteryVoltage>
 80033f8:	ee10 0a10 	vmov	r0, s0
 80033fc:	f7fd f8a4 	bl	8000548 <__aeabi_f2d>
 8003400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003404:	4630      	mov	r0, r6
 8003406:	f7fd f89f 	bl	8000548 <__aeabi_f2d>
 800340a:	9a06      	ldr	r2, [sp, #24]
 800340c:	e9cd 0100 	strd	r0, r1, [sp]
 8003410:	4896      	ldr	r0, [pc, #600]	; (800366c <main+0x6ec>)
 8003412:	4641      	mov	r1, r8
 8003414:	f001 fc04 	bl	8004c20 <p>
  if (adc_raw.cs_motor[0] < 100 && adc_raw.cs_motor[1] < 100) {
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	2b63      	cmp	r3, #99	; 0x63
 800341c:	f300 83f1 	bgt.w	8003c02 <main+0xc82>
 8003420:	6863      	ldr	r3, [r4, #4]
 8003422:	2b63      	cmp	r3, #99	; 0x63
 8003424:	bfd4      	ite	le
 8003426:	2300      	movle	r3, #0
 8003428:	2301      	movgt	r3, #1
 800342a:	02db      	lsls	r3, r3, #11
  HAL_TIM_PWM_Init(&htim8);
 800342c:	4889      	ldr	r0, [pc, #548]	; (8003654 <main+0x6d4>)
 800342e:	61e3      	str	r3, [r4, #28]
 8003430:	f004 fad0 	bl	80079d4 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim1);
 8003434:	4886      	ldr	r0, [pc, #536]	; (8003650 <main+0x6d0>)
 8003436:	4e8e      	ldr	r6, [pc, #568]	; (8003670 <main+0x6f0>)
 8003438:	4c8e      	ldr	r4, [pc, #568]	; (8003674 <main+0x6f4>)
 800343a:	f004 facb 	bl	80079d4 <HAL_TIM_PWM_Init>
  setPwmAll(TIM_PWM_CENTER);
 800343e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003442:	f001 fa1b 	bl	800487c <setPwmAll>
 8003446:	2301      	movs	r3, #1
 8003448:	9309      	str	r3, [sp, #36]	; 0x24
 800344a:	f103 38ff 	add.w	r8, r3, #4294967295
    switch (turn_on_channel) {
 800344e:	3b02      	subs	r3, #2
 8003450:	2b04      	cmp	r3, #4
 8003452:	f200 83eb 	bhi.w	8003c2c <main+0xcac>
 8003456:	e8df f013 	tbh	[pc, r3, lsl #1]
 800345a:	00f1      	.short	0x00f1
 800345c:	00df00e8 	.word	0x00df00e8
 8003460:	0005009e 	.word	0x0005009e
        HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);  // M1 high & low
 8003464:	2108      	movs	r1, #8
 8003466:	487b      	ldr	r0, [pc, #492]	; (8003654 <main+0x6d4>)
 8003468:	f004 fea6 	bl	80081b8 <HAL_TIMEx_PWMN_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);  // M0 high & low
 800346c:	4878      	ldr	r0, [pc, #480]	; (8003650 <main+0x6d0>)
 800346e:	2108      	movs	r1, #8
 8003470:	f004 fea2 	bl	80081b8 <HAL_TIMEx_PWMN_Start>
    interrupt_timer_cnt = 0;
 8003474:	2000      	movs	r0, #0
 8003476:	6030      	str	r0, [r6, #0]
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 8003478:	6833      	ldr	r3, [r6, #0]
 800347a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800347e:	f080 8101 	bcs.w	8003684 <main+0x704>
        p("fail check!! Current M0 %+6.3f M1 %+6.3f ch:%d\n", getCurrentMotor(0), getCurrentMotor(1), turn_on_channel);
 8003482:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 800367c <main+0x6fc>
  p("reset!!!");
 8003486:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8003680 <main+0x700>
      if (isNotZeroCurrent() || getBatteryVoltage() < THR_BATTERY_UNVER_VOLTAGE) {
 800348a:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 800348e:	f7fd fe47 	bl	8001120 <isNotZeroCurrent>
 8003492:	b930      	cbnz	r0, 80034a2 <main+0x522>
 8003494:	f7fd fe14 	bl	80010c0 <getBatteryVoltage>
 8003498:	eeb4 0ac8 	vcmpe.f32	s0, s16
 800349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a0:	d53b      	bpl.n	800351a <main+0x59a>
        forceStopAllPwmOutputAndTimer();
 80034a2:	f001 f9fb 	bl	800489c <forceStopAllPwmOutputAndTimer>
        p("fail check!! Current M0 %+6.3f M1 %+6.3f ch:%d\n", getCurrentMotor(0), getCurrentMotor(1), turn_on_channel);
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7fd fe5e 	bl	8001168 <getCurrentMotor>
 80034ac:	2001      	movs	r0, #1
 80034ae:	ee10 ba10 	vmov	fp, s0
 80034b2:	f7fd fe59 	bl	8001168 <getCurrentMotor>
 80034b6:	4658      	mov	r0, fp
 80034b8:	ee10 ba10 	vmov	fp, s0
 80034bc:	f7fd f844 	bl	8000548 <__aeabi_f2d>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4658      	mov	r0, fp
 80034c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80034ca:	f8cd 8008 	str.w	r8, [sp, #8]
 80034ce:	f7fd f83b 	bl	8000548 <__aeabi_f2d>
 80034d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80034d6:	e9cd 0100 	strd	r0, r1, [sp]
 80034da:	4650      	mov	r0, sl
 80034dc:	f001 fba0 	bl	8004c20 <p>
        sys.power_enable_cnt = 500;
 80034e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  p("reset!!!");
 80034e4:	4648      	mov	r0, r9
        sys.power_enable_cnt = 500;
 80034e6:	60ab      	str	r3, [r5, #8]
  p("reset!!!");
 80034e8:	f001 fb9a 	bl	8004c20 <p>
  while (sys.power_enable_cnt > 0) {
 80034ec:	68ab      	ldr	r3, [r5, #8]
 80034ee:	b17b      	cbz	r3, 8003510 <main+0x590>
    sys.power_enable_cnt--;
 80034f0:	3b01      	subs	r3, #1
 80034f2:	60ab      	str	r3, [r5, #8]
    sendCanData();
 80034f4:	f7ff fa50 	bl	8002998 <sendCanData>
    sendError(error.id, error.info, error.value);
 80034f8:	ed94 0a01 	vldr	s0, [r4, #4]
 80034fc:	8861      	ldrh	r1, [r4, #2]
 80034fe:	8820      	ldrh	r0, [r4, #0]
 8003500:	f7fe f852 	bl	80015a8 <sendError>
    HAL_Delay(2);
 8003504:	2002      	movs	r0, #2
 8003506:	f001 fc7b 	bl	8004e00 <HAL_Delay>
  while (sys.power_enable_cnt > 0) {
 800350a:	68ab      	ldr	r3, [r5, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ef      	bne.n	80034f0 <main+0x570>
  HAL_Delay(2);
 8003510:	2002      	movs	r0, #2
 8003512:	f001 fc75 	bl	8004e00 <HAL_Delay>
  HAL_NVIC_SystemReset();
 8003516:	f003 f82b 	bl	8006570 <HAL_NVIC_SystemReset>
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 800351a:	6833      	ldr	r3, [r6, #0]
 800351c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003520:	d3b5      	bcc.n	800348e <main+0x50e>
    p("ch:%2d CurrentCheck OK!! M0 %+6.3f M1 %+6.3f Battery %5.2f GD %5.2f\n", turn_on_channel, getCurrentMotor(0), getCurrentMotor(1), getBatteryVoltage(), getGateDriverDCDCVoltage());
 8003522:	2000      	movs	r0, #0
 8003524:	f7fd fe20 	bl	8001168 <getCurrentMotor>
 8003528:	2001      	movs	r0, #1
 800352a:	ed8d 0a06 	vstr	s0, [sp, #24]
 800352e:	f7fd fe1b 	bl	8001168 <getCurrentMotor>
 8003532:	ee10 9a10 	vmov	r9, s0
 8003536:	f7fd fdc3 	bl	80010c0 <getBatteryVoltage>
 800353a:	ee10 aa10 	vmov	sl, s0
 800353e:	f7fd fdd7 	bl	80010f0 <getGateDriverDCDCVoltage>
 8003542:	9b06      	ldr	r3, [sp, #24]
 8003544:	ed8d 0a06 	vstr	s0, [sp, #24]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fc fffd 	bl	8000548 <__aeabi_f2d>
 800354e:	9b06      	ldr	r3, [sp, #24]
 8003550:	460a      	mov	r2, r1
 8003552:	4601      	mov	r1, r0
 8003554:	4618      	mov	r0, r3
 8003556:	4613      	mov	r3, r2
 8003558:	460a      	mov	r2, r1
 800355a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800355e:	f7fc fff3 	bl	8000548 <__aeabi_f2d>
 8003562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003566:	4650      	mov	r0, sl
 8003568:	f7fc ffee 	bl	8000548 <__aeabi_f2d>
 800356c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003570:	4648      	mov	r0, r9
 8003572:	f7fc ffe9 	bl	8000548 <__aeabi_f2d>
 8003576:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800357a:	e9cd 0100 	strd	r0, r1, [sp]
 800357e:	483e      	ldr	r0, [pc, #248]	; (8003678 <main+0x6f8>)
 8003580:	4641      	mov	r1, r8
 8003582:	f001 fb4d 	bl	8004c20 <p>
  while (turn_on_channel < 6) {
 8003586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003588:	2b06      	cmp	r3, #6
 800358a:	f000 80a8 	beq.w	80036de <main+0x75e>
 800358e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003590:	3301      	adds	r3, #1
 8003592:	9309      	str	r3, [sp, #36]	; 0x24
 8003594:	e759      	b.n	800344a <main+0x4ca>
        HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);  // M1 high & low
 8003596:	2104      	movs	r1, #4
 8003598:	482e      	ldr	r0, [pc, #184]	; (8003654 <main+0x6d4>)
 800359a:	f004 fe0d 	bl	80081b8 <HAL_TIMEx_PWMN_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);  // M0 high & low
 800359e:	482c      	ldr	r0, [pc, #176]	; (8003650 <main+0x6d0>)
 80035a0:	2104      	movs	r1, #4
 80035a2:	f004 fe09 	bl	80081b8 <HAL_TIMEx_PWMN_Start>
    interrupt_timer_cnt = 0;
 80035a6:	2000      	movs	r0, #0
 80035a8:	6030      	str	r0, [r6, #0]
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 80035aa:	6833      	ldr	r3, [r6, #0]
 80035ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035b0:	f4ff af67 	bcc.w	8003482 <main+0x502>
    p("ch:%2d CurrentCheck OK!! M0 %+6.3f M1 %+6.3f Battery %5.2f GD %5.2f\n", turn_on_channel, getCurrentMotor(0), getCurrentMotor(1), getBatteryVoltage(), getGateDriverDCDCVoltage());
 80035b4:	f7fd fdd8 	bl	8001168 <getCurrentMotor>
 80035b8:	2001      	movs	r0, #1
 80035ba:	ed8d 0a06 	vstr	s0, [sp, #24]
 80035be:	f7fd fdd3 	bl	8001168 <getCurrentMotor>
 80035c2:	ee10 9a10 	vmov	r9, s0
 80035c6:	f7fd fd7b 	bl	80010c0 <getBatteryVoltage>
 80035ca:	ee10 aa10 	vmov	sl, s0
 80035ce:	f7fd fd8f 	bl	80010f0 <getGateDriverDCDCVoltage>
 80035d2:	9b06      	ldr	r3, [sp, #24]
 80035d4:	ed8d 0a06 	vstr	s0, [sp, #24]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fc ffb5 	bl	8000548 <__aeabi_f2d>
 80035de:	9b06      	ldr	r3, [sp, #24]
 80035e0:	460a      	mov	r2, r1
 80035e2:	4601      	mov	r1, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	4613      	mov	r3, r2
 80035e8:	460a      	mov	r2, r1
 80035ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80035ee:	f7fc ffab 	bl	8000548 <__aeabi_f2d>
 80035f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80035f6:	4650      	mov	r0, sl
 80035f8:	f7fc ffa6 	bl	8000548 <__aeabi_f2d>
 80035fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003600:	4648      	mov	r0, r9
 8003602:	f7fc ffa1 	bl	8000548 <__aeabi_f2d>
 8003606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800360a:	e9cd 0100 	strd	r0, r1, [sp]
 800360e:	481a      	ldr	r0, [pc, #104]	; (8003678 <main+0x6f8>)
 8003610:	4641      	mov	r1, r8
 8003612:	f001 fb05 	bl	8004c20 <p>
  while (turn_on_channel < 6) {
 8003616:	e7ba      	b.n	800358e <main+0x60e>
        HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);  // M1 high & low
 8003618:	2100      	movs	r1, #0
 800361a:	480e      	ldr	r0, [pc, #56]	; (8003654 <main+0x6d4>)
 800361c:	f004 fdcc 	bl	80081b8 <HAL_TIMEx_PWMN_Start>
        HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);  // M0 high & low
 8003620:	2100      	movs	r1, #0
 8003622:	480b      	ldr	r0, [pc, #44]	; (8003650 <main+0x6d0>)
 8003624:	f004 fdc8 	bl	80081b8 <HAL_TIMEx_PWMN_Start>
        break;
 8003628:	e7bd      	b.n	80035a6 <main+0x626>
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);  // M0 low
 800362a:	2108      	movs	r1, #8
 800362c:	4809      	ldr	r0, [pc, #36]	; (8003654 <main+0x6d4>)
 800362e:	f004 fa59 	bl	8007ae4 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // M1 low
 8003632:	2108      	movs	r1, #8
 8003634:	4806      	ldr	r0, [pc, #24]	; (8003650 <main+0x6d0>)
 8003636:	f004 fa55 	bl	8007ae4 <HAL_TIM_PWM_Start>
        break;
 800363a:	e7b4      	b.n	80035a6 <main+0x626>
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);  // M0 low
 800363c:	2104      	movs	r1, #4
 800363e:	4805      	ldr	r0, [pc, #20]	; (8003654 <main+0x6d4>)
 8003640:	f004 fa50 	bl	8007ae4 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // M1 low
 8003644:	2104      	movs	r1, #4
 8003646:	4802      	ldr	r0, [pc, #8]	; (8003650 <main+0x6d0>)
 8003648:	f004 fa4c 	bl	8007ae4 <HAL_TIM_PWM_Start>
        break;
 800364c:	e7ab      	b.n	80035a6 <main+0x626>
 800364e:	bf00      	nop
 8003650:	200005d4 	.word	0x200005d4
 8003654:	20000620 	.word	0x20000620
 8003658:	20000514 	.word	0x20000514
 800365c:	200019d4 	.word	0x200019d4
 8003660:	0800d8f8 	.word	0x0800d8f8
 8003664:	40340000 	.word	0x40340000
 8003668:	200001f8 	.word	0x200001f8
 800366c:	0800d920 	.word	0x0800d920
 8003670:	2000043c 	.word	0x2000043c
 8003674:	20000434 	.word	0x20000434
 8003678:	0800d974 	.word	0x0800d974
 800367c:	0800d944 	.word	0x0800d944
 8003680:	0800d724 	.word	0x0800d724
    p("ch:%2d CurrentCheck OK!! M0 %+6.3f M1 %+6.3f Battery %5.2f GD %5.2f\n", turn_on_channel, getCurrentMotor(0), getCurrentMotor(1), getBatteryVoltage(), getGateDriverDCDCVoltage());
 8003684:	f7fd fd70 	bl	8001168 <getCurrentMotor>
 8003688:	2001      	movs	r0, #1
 800368a:	ee10 9a10 	vmov	r9, s0
 800368e:	f7fd fd6b 	bl	8001168 <getCurrentMotor>
 8003692:	ee10 4a10 	vmov	r4, s0
 8003696:	f7fd fd13 	bl	80010c0 <getBatteryVoltage>
 800369a:	ee10 8a10 	vmov	r8, s0
 800369e:	f7fd fd27 	bl	80010f0 <getGateDriverDCDCVoltage>
 80036a2:	4648      	mov	r0, r9
 80036a4:	ee10 9a10 	vmov	r9, s0
 80036a8:	f7fc ff4e 	bl	8000548 <__aeabi_f2d>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4648      	mov	r0, r9
 80036b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80036b6:	f7fc ff47 	bl	8000548 <__aeabi_f2d>
 80036ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80036be:	4640      	mov	r0, r8
 80036c0:	f7fc ff42 	bl	8000548 <__aeabi_f2d>
 80036c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7fc ff3d 	bl	8000548 <__aeabi_f2d>
 80036ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80036d2:	e9cd 0100 	strd	r0, r1, [sp]
 80036d6:	48d0      	ldr	r0, [pc, #832]	; (8003a18 <main+0xa98>)
 80036d8:	2105      	movs	r1, #5
 80036da:	f001 faa1 	bl	8004c20 <p>
  if (isPushedSW1()) {
 80036de:	f7fe f83d 	bl	800175c <isPushedSW1>
 80036e2:	2800      	cmp	r0, #0
 80036e4:	f000 8279 	beq.w	8003bda <main+0xc5a>
    flash.board_id = 0;
 80036e8:	4bcc      	ldr	r3, [pc, #816]	; (8003a1c <main+0xa9c>)
 80036ea:	461c      	mov	r4, r3
 80036ec:	2000      	movs	r0, #0
 80036ee:	6098      	str	r0, [r3, #8]
    writeCanBoardID(flash.board_id);
 80036f0:	f7fd fffa 	bl	80016e8 <writeCanBoardID>
    p("sed board id %d\n", flash.board_id);
 80036f4:	48ca      	ldr	r0, [pc, #808]	; (8003a20 <main+0xaa0>)
 80036f6:	68a1      	ldr	r1, [r4, #8]
 80036f8:	f001 fa92 	bl	8004c20 <p>
    HAL_Delay(1000);
 80036fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003700:	f001 fb7e 	bl	8004e00 <HAL_Delay>
  if (isPushedSW4()) {
 8003704:	f7fe f84e 	bl	80017a4 <isPushedSW4>
 8003708:	2800      	cmp	r0, #0
 800370a:	f040 8285 	bne.w	8003c18 <main+0xc98>
  CAN_Filter_Init(flash.board_id);
 800370e:	4bc3      	ldr	r3, [pc, #780]	; (8003a1c <main+0xa9c>)
 8003710:	4cc4      	ldr	r4, [pc, #784]	; (8003a24 <main+0xaa4>)
 8003712:	8918      	ldrh	r0, [r3, #8]
 8003714:	f8df 8350 	ldr.w	r8, [pc, #848]	; 8003a68 <main+0xae8>
        sys.manual_offset_radian = 0;
 8003718:	ed9f 8ac3 	vldr	s16, [pc, #780]	; 8003a28 <main+0xaa8>
  CAN_Filter_Init(flash.board_id);
 800371c:	f7fd fe48 	bl	80013b0 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan);
 8003720:	48c2      	ldr	r0, [pc, #776]	; (8003a2c <main+0xaac>)
 8003722:	f002 fc5b 	bl	8005fdc <HAL_CAN_Start>
  p("start main loop!\n");
 8003726:	48c2      	ldr	r0, [pc, #776]	; (8003a30 <main+0xab0>)
 8003728:	f001 fa7a 	bl	8004c20 <p>
  setLedRed(false);
 800372c:	2000      	movs	r0, #0
 800372e:	f7fe f845 	bl	80017bc <setLedRed>
  setLedGreen(false);
 8003732:	2000      	movs	r0, #0
 8003734:	f7fe f852 	bl	80017dc <setLedGreen>
  setLedBlue(false);
 8003738:	2000      	movs	r0, #0
 800373a:	f7fe f847 	bl	80017cc <setLedBlue>
  if (uart_rx_flag) {
 800373e:	7823      	ldrb	r3, [r4, #0]
        motor_real[0].k -= 0.1;
 8003740:	f20f 2bc4 	addw	fp, pc, #708	; 0x2c4
 8003744:	e9db ab00 	ldrd	sl, fp, [fp]
  if (uart_rx_flag) {
 8003748:	bb5b      	cbnz	r3, 80037a2 <main+0x822>
      calcMotorSpeed(&motor_real[i], &ma702[i], &sys, &enc_error_watcher);
 800374a:	4bba      	ldr	r3, [pc, #744]	; (8003a34 <main+0xab4>)
 800374c:	4aba      	ldr	r2, [pc, #744]	; (8003a38 <main+0xab8>)
 800374e:	49bb      	ldr	r1, [pc, #748]	; (8003a3c <main+0xabc>)
 8003750:	48bb      	ldr	r0, [pc, #748]	; (8003a40 <main+0xac0>)
 8003752:	f000 fb09 	bl	8003d68 <calcMotorSpeed>
 8003756:	4bb7      	ldr	r3, [pc, #732]	; (8003a34 <main+0xab4>)
 8003758:	4ab7      	ldr	r2, [pc, #732]	; (8003a38 <main+0xab8>)
 800375a:	49ba      	ldr	r1, [pc, #744]	; (8003a44 <main+0xac4>)
 800375c:	48ba      	ldr	r0, [pc, #744]	; (8003a48 <main+0xac8>)
 800375e:	f000 fb03 	bl	8003d68 <calcMotorSpeed>
    sendCanData();
 8003762:	f7ff f919 	bl	8002998 <sendCanData>
    if (calib_process.enc_calib_cnt != 0) {
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f040 822f 	bne.w	8003bcc <main+0xc4c>
    } else if (calib_process.motor_calib_cnt != 0) {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8228 	beq.w	8003bc6 <main+0xc46>
      motorCalibrationMode();
 8003776:	f7fe fe6f 	bl	8002458 <motorCalibrationMode>
    protect();
 800377a:	f7ff f9e5 	bl	8002b48 <protect>
    setLedRed(true);
 800377e:	2001      	movs	r0, #1
 8003780:	f7fe f81c 	bl	80017bc <setLedRed>
    main_loop_remain_counter = INTERRUPT_KHZ_1MS - interrupt_timer_cnt;
 8003784:	6833      	ldr	r3, [r6, #0]
 8003786:	f1c3 0314 	rsb	r3, r3, #20
 800378a:	f8c8 3000 	str.w	r3, [r8]
    while (interrupt_timer_cnt <= INTERRUPT_KHZ_1MS)
 800378e:	6833      	ldr	r3, [r6, #0]
 8003790:	2b14      	cmp	r3, #20
 8003792:	d9fc      	bls.n	800378e <main+0x80e>
    interrupt_timer_cnt = 0;
 8003794:	2000      	movs	r0, #0
 8003796:	6030      	str	r0, [r6, #0]
    setLedRed(false);
 8003798:	f7fe f810 	bl	80017bc <setLedRed>
  if (uart_rx_flag) {
 800379c:	7823      	ldrb	r3, [r4, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0d3      	beq.n	800374a <main+0x7ca>
    uart_rx_flag = false;
 80037a2:	2300      	movs	r3, #0
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80037a4:	49a9      	ldr	r1, [pc, #676]	; (8003a4c <main+0xacc>)
 80037a6:	48aa      	ldr	r0, [pc, #680]	; (8003a50 <main+0xad0>)
    uart_rx_flag = false;
 80037a8:	7023      	strb	r3, [r4, #0]
    HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80037aa:	2201      	movs	r2, #1
 80037ac:	f005 fc6a 	bl	8009084 <HAL_UART_Receive_IT>
    switch (uart_rx_buf[0]) {
 80037b0:	4ba6      	ldr	r3, [pc, #664]	; (8003a4c <main+0xacc>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	3b30      	subs	r3, #48	; 0x30
 80037b6:	2b49      	cmp	r3, #73	; 0x49
 80037b8:	d8c7      	bhi.n	800374a <main+0x7ca>
 80037ba:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <main+0x840>)
 80037bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c0:	08003bbb 	.word	0x08003bbb
 80037c4:	0800374b 	.word	0x0800374b
 80037c8:	0800374b 	.word	0x0800374b
 80037cc:	0800374b 	.word	0x0800374b
 80037d0:	0800374b 	.word	0x0800374b
 80037d4:	0800374b 	.word	0x0800374b
 80037d8:	0800374b 	.word	0x0800374b
 80037dc:	0800374b 	.word	0x0800374b
 80037e0:	0800374b 	.word	0x0800374b
 80037e4:	0800374b 	.word	0x0800374b
 80037e8:	0800374b 	.word	0x0800374b
 80037ec:	0800374b 	.word	0x0800374b
 80037f0:	0800374b 	.word	0x0800374b
 80037f4:	0800374b 	.word	0x0800374b
 80037f8:	0800374b 	.word	0x0800374b
 80037fc:	0800374b 	.word	0x0800374b
 8003800:	0800374b 	.word	0x0800374b
 8003804:	0800374b 	.word	0x0800374b
 8003808:	0800374b 	.word	0x0800374b
 800380c:	0800374b 	.word	0x0800374b
 8003810:	0800374b 	.word	0x0800374b
 8003814:	0800374b 	.word	0x0800374b
 8003818:	0800374b 	.word	0x0800374b
 800381c:	0800374b 	.word	0x0800374b
 8003820:	0800374b 	.word	0x0800374b
 8003824:	0800374b 	.word	0x0800374b
 8003828:	0800374b 	.word	0x0800374b
 800382c:	0800374b 	.word	0x0800374b
 8003830:	0800374b 	.word	0x0800374b
 8003834:	0800374b 	.word	0x0800374b
 8003838:	0800374b 	.word	0x0800374b
 800383c:	0800374b 	.word	0x0800374b
 8003840:	0800374b 	.word	0x0800374b
 8003844:	0800374b 	.word	0x0800374b
 8003848:	0800374b 	.word	0x0800374b
 800384c:	0800374b 	.word	0x0800374b
 8003850:	0800374b 	.word	0x0800374b
 8003854:	0800374b 	.word	0x0800374b
 8003858:	0800374b 	.word	0x0800374b
 800385c:	0800374b 	.word	0x0800374b
 8003860:	0800374b 	.word	0x0800374b
 8003864:	0800374b 	.word	0x0800374b
 8003868:	0800374b 	.word	0x0800374b
 800386c:	0800374b 	.word	0x0800374b
 8003870:	0800374b 	.word	0x0800374b
 8003874:	0800374b 	.word	0x0800374b
 8003878:	0800374b 	.word	0x0800374b
 800387c:	0800374b 	.word	0x0800374b
 8003880:	0800374b 	.word	0x0800374b
 8003884:	08003ba9 	.word	0x08003ba9
 8003888:	0800374b 	.word	0x0800374b
 800388c:	08003b7b 	.word	0x08003b7b
 8003890:	08003b51 	.word	0x08003b51
 8003894:	08003b0f 	.word	0x08003b0f
 8003898:	08003ae5 	.word	0x08003ae5
 800389c:	08003abb 	.word	0x08003abb
 80038a0:	08003a8b 	.word	0x08003a8b
 80038a4:	0800374b 	.word	0x0800374b
 80038a8:	0800374b 	.word	0x0800374b
 80038ac:	0800374b 	.word	0x0800374b
 80038b0:	0800374b 	.word	0x0800374b
 80038b4:	0800374b 	.word	0x0800374b
 80038b8:	08003a6d 	.word	0x08003a6d
 80038bc:	0800374b 	.word	0x0800374b
 80038c0:	0800374b 	.word	0x0800374b
 80038c4:	080039df 	.word	0x080039df
 80038c8:	0800399d 	.word	0x0800399d
 80038cc:	08003985 	.word	0x08003985
 80038d0:	08003943 	.word	0x08003943
 80038d4:	0800374b 	.word	0x0800374b
 80038d8:	0800374b 	.word	0x0800374b
 80038dc:	08003919 	.word	0x08003919
 80038e0:	0800374b 	.word	0x0800374b
 80038e4:	080038e9 	.word	0x080038e9
        motor_real[0].k += 0.1;
 80038e8:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <main+0xac0>)
 80038ea:	6918      	ldr	r0, [r3, #16]
 80038ec:	f7fc fe2c 	bl	8000548 <__aeabi_f2d>
 80038f0:	4652      	mov	r2, sl
 80038f2:	465b      	mov	r3, fp
 80038f4:	f7fc fcca 	bl	800028c <__adddf3>
 80038f8:	f7fd f976 	bl	8000be8 <__aeabi_d2f>
 80038fc:	4b50      	ldr	r3, [pc, #320]	; (8003a40 <main+0xac0>)
 80038fe:	6118      	str	r0, [r3, #16]
        motor_real[1].k += 0.1;
 8003900:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003902:	f7fc fe21 	bl	8000548 <__aeabi_f2d>
 8003906:	465b      	mov	r3, fp
 8003908:	4652      	mov	r2, sl
 800390a:	f7fc fcbf 	bl	800028c <__adddf3>
 800390e:	f7fd f96b 	bl	8000be8 <__aeabi_d2f>
 8003912:	4b4b      	ldr	r3, [pc, #300]	; (8003a40 <main+0xac0>)
 8003914:	6258      	str	r0, [r3, #36]	; 0x24
        break;
 8003916:	e718      	b.n	800374a <main+0x7ca>
        cmd[0].speed += 0.5;
 8003918:	4b4e      	ldr	r3, [pc, #312]	; (8003a54 <main+0xad4>)
 800391a:	ed93 7a00 	vldr	s14, [r3]
        cmd[1].speed += 0.5;
 800391e:	edd3 7a05 	vldr	s15, [r3, #20]
        cmd[0].speed += 0.5;
 8003922:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003926:	ee37 7a26 	vadd.f32	s14, s14, s13
        cmd[1].speed += 0.5;
 800392a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        cmd[1].speed -= 0.5;
 800392e:	461a      	mov	r2, r3
        cmd[0].speed -= 0.5;
 8003930:	ed83 7a00 	vstr	s14, [r3]
        cmd[1].speed -= 0.5;
 8003934:	edc3 7a05 	vstr	s15, [r3, #20]
        cmd[0].timeout_cnt = -1;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
 800393c:	6113      	str	r3, [r2, #16]
        cmd[1].timeout_cnt = -1;
 800393e:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 8003940:	e703      	b.n	800374a <main+0x7ca>
        pid[0].pid_kd += 0.1;
 8003942:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <main+0xad8>)
 8003944:	6898      	ldr	r0, [r3, #8]
 8003946:	f7fc fdff 	bl	8000548 <__aeabi_f2d>
 800394a:	4652      	mov	r2, sl
 800394c:	465b      	mov	r3, fp
 800394e:	f7fc fc9d 	bl	800028c <__adddf3>
 8003952:	f7fd f949 	bl	8000be8 <__aeabi_d2f>
 8003956:	4b40      	ldr	r3, [pc, #256]	; (8003a58 <main+0xad8>)
 8003958:	4681      	mov	r9, r0
 800395a:	6098      	str	r0, [r3, #8]
        pid[1].pid_kd += 0.1;
 800395c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800395e:	f7fc fdf3 	bl	8000548 <__aeabi_f2d>
 8003962:	4652      	mov	r2, sl
 8003964:	465b      	mov	r3, fp
 8003966:	f7fc fc91 	bl	800028c <__adddf3>
        pid[1].pid_kd -= 0.1;
 800396a:	f7fd f93d 	bl	8000be8 <__aeabi_d2f>
 800396e:	4b3a      	ldr	r3, [pc, #232]	; (8003a58 <main+0xad8>)
 8003970:	6398      	str	r0, [r3, #56]	; 0x38
        p("\nKD %+5.2f\n", pid[0].pid_kd);
 8003972:	4648      	mov	r0, r9
 8003974:	f7fc fde8 	bl	8000548 <__aeabi_f2d>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4837      	ldr	r0, [pc, #220]	; (8003a5c <main+0xadc>)
 800397e:	f001 f94f 	bl	8004c20 <p>
        break;
 8003982:	e6e2      	b.n	800374a <main+0x7ca>
        cmd[0].speed -= 0.5;
 8003984:	4b33      	ldr	r3, [pc, #204]	; (8003a54 <main+0xad4>)
 8003986:	ed93 7a00 	vldr	s14, [r3]
        cmd[1].speed -= 0.5;
 800398a:	edd3 7a05 	vldr	s15, [r3, #20]
        cmd[0].speed -= 0.5;
 800398e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003992:	ee37 7a66 	vsub.f32	s14, s14, s13
        cmd[1].speed -= 0.5;
 8003996:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800399a:	e7c8      	b.n	800392e <main+0x9ae>
        pid[0].pid_ki += 0.1;
 800399c:	4b2e      	ldr	r3, [pc, #184]	; (8003a58 <main+0xad8>)
 800399e:	68d8      	ldr	r0, [r3, #12]
 80039a0:	f7fc fdd2 	bl	8000548 <__aeabi_f2d>
 80039a4:	4652      	mov	r2, sl
 80039a6:	465b      	mov	r3, fp
 80039a8:	f7fc fc70 	bl	800028c <__adddf3>
 80039ac:	f7fd f91c 	bl	8000be8 <__aeabi_d2f>
 80039b0:	4b29      	ldr	r3, [pc, #164]	; (8003a58 <main+0xad8>)
 80039b2:	4681      	mov	r9, r0
 80039b4:	60d8      	str	r0, [r3, #12]
        pid[1].pid_ki += 0.1;
 80039b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80039b8:	f7fc fdc6 	bl	8000548 <__aeabi_f2d>
 80039bc:	4652      	mov	r2, sl
 80039be:	465b      	mov	r3, fp
 80039c0:	f7fc fc64 	bl	800028c <__adddf3>
        pid[1].pid_ki -= 0.1;
 80039c4:	f7fd f910 	bl	8000be8 <__aeabi_d2f>
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <main+0xad8>)
 80039ca:	63d8      	str	r0, [r3, #60]	; 0x3c
        p("\nKI %+5.2f\n", pid[0].pid_ki);
 80039cc:	4648      	mov	r0, r9
 80039ce:	f7fc fdbb 	bl	8000548 <__aeabi_f2d>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4822      	ldr	r0, [pc, #136]	; (8003a60 <main+0xae0>)
 80039d8:	f001 f922 	bl	8004c20 <p>
        break;
 80039dc:	e6b5      	b.n	800374a <main+0x7ca>
        sys.manual_offset_radian += 0.01;
 80039de:	6868      	ldr	r0, [r5, #4]
 80039e0:	f7fc fdb2 	bl	8000548 <__aeabi_f2d>
 80039e4:	a30a      	add	r3, pc, #40	; (adr r3, 8003a10 <main+0xa90>)
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f7fc fc4f 	bl	800028c <__adddf3>
        sys.manual_offset_radian -= 0.01;
 80039ee:	f7fd f8fb 	bl	8000be8 <__aeabi_d2f>
 80039f2:	6068      	str	r0, [r5, #4]
        p("offset %+4.2f\n", sys.manual_offset_radian);
 80039f4:	f7fc fda8 	bl	8000548 <__aeabi_f2d>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4819      	ldr	r0, [pc, #100]	; (8003a64 <main+0xae4>)
 80039fe:	f001 f90f 	bl	8004c20 <p>
        break;
 8003a02:	e6a2      	b.n	800374a <main+0x7ca>
 8003a04:	f3af 8000 	nop.w
 8003a08:	9999999a 	.word	0x9999999a
 8003a0c:	3fb99999 	.word	0x3fb99999
 8003a10:	47ae147b 	.word	0x47ae147b
 8003a14:	3f847ae1 	.word	0x3f847ae1
 8003a18:	0800d974 	.word	0x0800d974
 8003a1c:	20000338 	.word	0x20000338
 8003a20:	0800d9bc 	.word	0x0800d9bc
 8003a24:	2000051e 	.word	0x2000051e
 8003a28:	00000000 	.word	0x00000000
 8003a2c:	20000310 	.word	0x20000310
 8003a30:	0800d9e8 	.word	0x0800d9e8
 8003a34:	20000418 	.word	0x20000418
 8003a38:	20000504 	.word	0x20000504
 8003a3c:	20000588 	.word	0x20000588
 8003a40:	20000454 	.word	0x20000454
 8003a44:	200005ac 	.word	0x200005ac
 8003a48:	20000468 	.word	0x20000468
 8003a4c:	20000514 	.word	0x20000514
 8003a50:	200019d4 	.word	0x200019d4
 8003a54:	200003f0 	.word	0x200003f0
 8003a58:	20000480 	.word	0x20000480
 8003a5c:	0800d708 	.word	0x0800d708
 8003a60:	0800d6fc 	.word	0x0800d6fc
 8003a64:	0800d6e0 	.word	0x0800d6e0
 8003a68:	20000440 	.word	0x20000440
        p("run mode!\n");
 8003a6c:	487a      	ldr	r0, [pc, #488]	; (8003c58 <main+0xcd8>)
 8003a6e:	f001 f8d7 	bl	8004c20 <p>
        cmd[0].out_v = 0;
 8003a72:	4b7a      	ldr	r3, [pc, #488]	; (8003c5c <main+0xcdc>)
        sys.manual_offset_radian = 0;
 8003a74:	ed85 8a01 	vstr	s16, [r5, #4]
        cmd[0].out_v = 0;
 8003a78:	ed83 8a02 	vstr	s16, [r3, #8]
        cmd[1].out_v = 0;
 8003a7c:	ed83 8a07 	vstr	s16, [r3, #28]
        calib_process.enc_calib_cnt = 0;
 8003a80:	2200      	movs	r2, #0
 8003a82:	2300      	movs	r3, #0
 8003a84:	e9c7 2300 	strd	r2, r3, [r7]
        break;
 8003a88:	e65f      	b.n	800374a <main+0x7ca>
        motor_real[0].k -= 0.1;
 8003a8a:	4b75      	ldr	r3, [pc, #468]	; (8003c60 <main+0xce0>)
 8003a8c:	6918      	ldr	r0, [r3, #16]
 8003a8e:	f7fc fd5b 	bl	8000548 <__aeabi_f2d>
 8003a92:	4652      	mov	r2, sl
 8003a94:	465b      	mov	r3, fp
 8003a96:	f7fc fbf7 	bl	8000288 <__aeabi_dsub>
 8003a9a:	f7fd f8a5 	bl	8000be8 <__aeabi_d2f>
 8003a9e:	4b70      	ldr	r3, [pc, #448]	; (8003c60 <main+0xce0>)
 8003aa0:	6118      	str	r0, [r3, #16]
        motor_real[1].k -= 0.1;
 8003aa2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003aa4:	f7fc fd50 	bl	8000548 <__aeabi_f2d>
 8003aa8:	465b      	mov	r3, fp
 8003aaa:	4652      	mov	r2, sl
 8003aac:	f7fc fbec 	bl	8000288 <__aeabi_dsub>
 8003ab0:	f7fd f89a 	bl	8000be8 <__aeabi_d2f>
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <main+0xce0>)
 8003ab6:	6258      	str	r0, [r3, #36]	; 0x24
        break;
 8003ab8:	e647      	b.n	800374a <main+0x7ca>
        pid[0].pid_kd -= 0.1;
 8003aba:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <main+0xce4>)
 8003abc:	6898      	ldr	r0, [r3, #8]
 8003abe:	f7fc fd43 	bl	8000548 <__aeabi_f2d>
 8003ac2:	4652      	mov	r2, sl
 8003ac4:	465b      	mov	r3, fp
 8003ac6:	f7fc fbdf 	bl	8000288 <__aeabi_dsub>
 8003aca:	f7fd f88d 	bl	8000be8 <__aeabi_d2f>
 8003ace:	4b65      	ldr	r3, [pc, #404]	; (8003c64 <main+0xce4>)
 8003ad0:	4681      	mov	r9, r0
 8003ad2:	6098      	str	r0, [r3, #8]
        pid[1].pid_kd -= 0.1;
 8003ad4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ad6:	f7fc fd37 	bl	8000548 <__aeabi_f2d>
 8003ada:	4652      	mov	r2, sl
 8003adc:	465b      	mov	r3, fp
 8003ade:	f7fc fbd3 	bl	8000288 <__aeabi_dsub>
 8003ae2:	e742      	b.n	800396a <main+0x9ea>
        pid[0].pid_ki -= 0.1;
 8003ae4:	4b5f      	ldr	r3, [pc, #380]	; (8003c64 <main+0xce4>)
 8003ae6:	68d8      	ldr	r0, [r3, #12]
 8003ae8:	f7fc fd2e 	bl	8000548 <__aeabi_f2d>
 8003aec:	4652      	mov	r2, sl
 8003aee:	465b      	mov	r3, fp
 8003af0:	f7fc fbca 	bl	8000288 <__aeabi_dsub>
 8003af4:	f7fd f878 	bl	8000be8 <__aeabi_d2f>
 8003af8:	4b5a      	ldr	r3, [pc, #360]	; (8003c64 <main+0xce4>)
 8003afa:	4681      	mov	r9, r0
 8003afc:	60d8      	str	r0, [r3, #12]
        pid[1].pid_ki -= 0.1;
 8003afe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b00:	f7fc fd22 	bl	8000548 <__aeabi_f2d>
 8003b04:	4652      	mov	r2, sl
 8003b06:	465b      	mov	r3, fp
 8003b08:	f7fc fbbe 	bl	8000288 <__aeabi_dsub>
 8003b0c:	e75a      	b.n	80039c4 <main+0xa44>
        pid[0].pid_kp += 0.1;
 8003b0e:	4b55      	ldr	r3, [pc, #340]	; (8003c64 <main+0xce4>)
 8003b10:	6858      	ldr	r0, [r3, #4]
 8003b12:	f7fc fd19 	bl	8000548 <__aeabi_f2d>
 8003b16:	4652      	mov	r2, sl
 8003b18:	465b      	mov	r3, fp
 8003b1a:	f7fc fbb7 	bl	800028c <__adddf3>
 8003b1e:	f7fd f863 	bl	8000be8 <__aeabi_d2f>
 8003b22:	4b50      	ldr	r3, [pc, #320]	; (8003c64 <main+0xce4>)
 8003b24:	4681      	mov	r9, r0
 8003b26:	6058      	str	r0, [r3, #4]
        pid[1].pid_kp += 0.1;
 8003b28:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b2a:	f7fc fd0d 	bl	8000548 <__aeabi_f2d>
 8003b2e:	4652      	mov	r2, sl
 8003b30:	465b      	mov	r3, fp
 8003b32:	f7fc fbab 	bl	800028c <__adddf3>
        pid[1].pid_kp -= 0.1;
 8003b36:	f7fd f857 	bl	8000be8 <__aeabi_d2f>
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <main+0xce4>)
 8003b3c:	6358      	str	r0, [r3, #52]	; 0x34
        p("\nKP %+5.2f\n", pid[0].pid_kp);
 8003b3e:	4648      	mov	r0, r9
 8003b40:	f7fc fd02 	bl	8000548 <__aeabi_f2d>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4847      	ldr	r0, [pc, #284]	; (8003c68 <main+0xce8>)
 8003b4a:	f001 f869 	bl	8004c20 <p>
        break;
 8003b4e:	e5fc      	b.n	800374a <main+0x7ca>
        pid[0].pid_kp -= 0.1;
 8003b50:	4b44      	ldr	r3, [pc, #272]	; (8003c64 <main+0xce4>)
 8003b52:	6858      	ldr	r0, [r3, #4]
 8003b54:	f7fc fcf8 	bl	8000548 <__aeabi_f2d>
 8003b58:	4652      	mov	r2, sl
 8003b5a:	465b      	mov	r3, fp
 8003b5c:	f7fc fb94 	bl	8000288 <__aeabi_dsub>
 8003b60:	f7fd f842 	bl	8000be8 <__aeabi_d2f>
 8003b64:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <main+0xce4>)
 8003b66:	4681      	mov	r9, r0
 8003b68:	6058      	str	r0, [r3, #4]
        pid[1].pid_kp -= 0.1;
 8003b6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003b6c:	f7fc fcec 	bl	8000548 <__aeabi_f2d>
 8003b70:	4652      	mov	r2, sl
 8003b72:	465b      	mov	r3, fp
 8003b74:	f7fc fb88 	bl	8000288 <__aeabi_dsub>
 8003b78:	e7dd      	b.n	8003b36 <main+0xbb6>
        p("\n\nstart calib mode!\n\n");
 8003b7a:	483c      	ldr	r0, [pc, #240]	; (8003c6c <main+0xcec>)
 8003b7c:	f001 f850 	bl	8004c20 <p>
  p("calibration mode!\n");
 8003b80:	483b      	ldr	r0, [pc, #236]	; (8003c70 <main+0xcf0>)
 8003b82:	f001 f84d 	bl	8004c20 <p>
  cmd[0].speed = 0;
 8003b86:	4a35      	ldr	r2, [pc, #212]	; (8003c5c <main+0xcdc>)
  sys.manual_offset_radian = 0;
 8003b88:	ed85 8a01 	vstr	s16, [r5, #4]
  cmd[0].out_v_final = 2.0;
 8003b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b90:	60d3      	str	r3, [r2, #12]
  cmd[1].out_v_final = 2.0;
 8003b92:	6213      	str	r3, [r2, #32]
  cmd[0].speed = 0;
 8003b94:	ed82 8a00 	vstr	s16, [r2]
  cmd[1].speed = 0;
 8003b98:	ed82 8a05 	vstr	s16, [r2, #20]
  calib_process.enc_calib_cnt = MOTOR_CALIB_INIT_CNT;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003ba2:	e9c7 2300 	strd	r2, r3, [r7]
}
 8003ba6:	e5d0      	b.n	800374a <main+0x7ca>
        sys.manual_offset_radian -= 0.01;
 8003ba8:	6868      	ldr	r0, [r5, #4]
 8003baa:	f7fc fccd 	bl	8000548 <__aeabi_f2d>
 8003bae:	a328      	add	r3, pc, #160	; (adr r3, 8003c50 <main+0xcd0>)
 8003bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb4:	f7fc fb68 	bl	8000288 <__aeabi_dsub>
 8003bb8:	e719      	b.n	80039ee <main+0xa6e>
        p("enter sleep!\n");
 8003bba:	482e      	ldr	r0, [pc, #184]	; (8003c74 <main+0xcf4>)
 8003bbc:	f001 f830 	bl	8004c20 <p>
        forceStopAllPwmOutputAndTimer();
 8003bc0:	f000 fe6c 	bl	800489c <forceStopAllPwmOutputAndTimer>
        while (1)
 8003bc4:	e7fe      	b.n	8003bc4 <main+0xc44>
      runMode();
 8003bc6:	f7fe f89b 	bl	8001d00 <runMode>
 8003bca:	e5d6      	b.n	800377a <main+0x7fa>
      encoderCalibrationMode();
 8003bcc:	f7fe fa64 	bl	8002098 <encoderCalibrationMode>
 8003bd0:	e5d3      	b.n	800377a <main+0x7fa>
 8003bd2:	f04f 0801 	mov.w	r8, #1
 8003bd6:	f7ff bae3 	b.w	80031a0 <main+0x220>
  } else if (isPushedSW2()) {
 8003bda:	f7fd fdcb 	bl	8001774 <isPushedSW2>
 8003bde:	2800      	cmp	r0, #0
 8003be0:	f43f ad90 	beq.w	8003704 <main+0x784>
    flash.board_id = 1;
 8003be4:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <main+0xcf8>)
 8003be6:	461c      	mov	r4, r3
 8003be8:	2001      	movs	r0, #1
 8003bea:	6098      	str	r0, [r3, #8]
    writeCanBoardID(flash.board_id);
 8003bec:	f7fd fd7c 	bl	80016e8 <writeCanBoardID>
    p("sed board id %d\n", flash.board_id);
 8003bf0:	4822      	ldr	r0, [pc, #136]	; (8003c7c <main+0xcfc>)
 8003bf2:	68a1      	ldr	r1, [r4, #8]
 8003bf4:	f001 f814 	bl	8004c20 <p>
    HAL_Delay(1000);
 8003bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bfc:	f001 f900 	bl	8004e00 <HAL_Delay>
 8003c00:	e580      	b.n	8003704 <main+0x784>
    adc_raw.cs_adc_offset = 2048;
 8003c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003c06:	e411      	b.n	800342c <main+0x4ac>
      motor_param[i].voltage_per_rps = 1 / flash.rps_per_v_cw[i];
 8003c08:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8003c0c:	f7ff ba49 	b.w	80030a2 <main+0x122>
 8003c10:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8003c14:	f7ff ba18 	b.w	8003048 <main+0xc8>
    startCalibrationMode();
 8003c18:	f7fe fe9e 	bl	8002958 <startCalibrationMode>
    p("enc calibration mode!!\n");
 8003c1c:	4818      	ldr	r0, [pc, #96]	; (8003c80 <main+0xd00>)
 8003c1e:	f000 ffff 	bl	8004c20 <p>
    while (isPushedSW4())
 8003c22:	f7fd fdbf 	bl	80017a4 <isPushedSW4>
 8003c26:	2800      	cmp	r0, #0
 8003c28:	d1fb      	bne.n	8003c22 <main+0xca2>
 8003c2a:	e570      	b.n	800370e <main+0x78e>
        HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);  // M0 low
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4815      	ldr	r0, [pc, #84]	; (8003c84 <main+0xd04>)
 8003c30:	f003 ff58 	bl	8007ae4 <HAL_TIM_PWM_Start>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // M1 low
 8003c34:	4814      	ldr	r0, [pc, #80]	; (8003c88 <main+0xd08>)
 8003c36:	2100      	movs	r1, #0
 8003c38:	f003 ff54 	bl	8007ae4 <HAL_TIM_PWM_Start>
    interrupt_timer_cnt = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6033      	str	r3, [r6, #0]
    while (interrupt_timer_cnt < INTERRUPT_KHZ_1MS * 50) {
 8003c40:	6833      	ldr	r3, [r6, #0]
 8003c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c46:	f4ff ac1c 	bcc.w	8003482 <main+0x502>
 8003c4a:	e46a      	b.n	8003522 <main+0x5a2>
 8003c4c:	f3af 8000 	nop.w
 8003c50:	47ae147b 	.word	0x47ae147b
 8003c54:	3f847ae1 	.word	0x3f847ae1
 8003c58:	0800d6d4 	.word	0x0800d6d4
 8003c5c:	200003f0 	.word	0x200003f0
 8003c60:	20000454 	.word	0x20000454
 8003c64:	20000480 	.word	0x20000480
 8003c68:	0800d6f0 	.word	0x0800d6f0
 8003c6c:	0800d6bc 	.word	0x0800d6bc
 8003c70:	0800d3c0 	.word	0x0800d3c0
 8003c74:	0800d714 	.word	0x0800d714
 8003c78:	20000338 	.word	0x20000338
 8003c7c:	0800d9bc 	.word	0x0800d9bc
 8003c80:	0800d9d0 	.word	0x0800d9d0
 8003c84:	20000620 	.word	0x20000620
 8003c88:	200005d4 	.word	0x200005d4

08003c8c <Error_Handler>:
 8003c8c:	b672      	cpsid	i
  while (1) {
 8003c8e:	e7fe      	b.n	8003c8e <Error_Handler+0x2>

08003c90 <speedToOutputVoltage>:

#include "tim.h"

void speedToOutputVoltage(motor_pid_control_t * pid, motor_real_t * real, motor_param_t * param, motor_control_cmd_t * cmd)
{
  pid->eff_voltage = real->rps * param->voltage_per_rps;
 8003c90:	ed92 7a00 	vldr	s14, [r2]
 8003c94:	edd1 7a02 	vldr	s15, [r1, #8]
  }

  pid[motor].error_diff = motor_real[motor].rps - pid[motor].pre_real_rps;
  pid[motor].pre_real_rps = motor_real[motor].rps;*/

  cmd->out_v = cmd->speed * param->voltage_per_rps;
 8003c98:	edd3 6a00 	vldr	s13, [r3]
  pid->eff_voltage = real->rps * param->voltage_per_rps;
 8003c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
  cmd->out_v = cmd->speed * param->voltage_per_rps;
 8003ca0:	ee27 7a26 	vmul.f32	s14, s14, s13
  //        +pid[motor].error_diff * pid[motor].pid_kp + pid[motor].error_integral * pid[motor].pid_ki + pid[motor].error_diff * pid[motor].pid_kd; // PID

  // 出力電圧リミット

  float output_voltage_diff = cmd->out_v - pid->eff_voltage;
  if (output_voltage_diff > +pid->diff_voltage_limit) {
 8003ca4:	edd0 6a09 	vldr	s13, [r0, #36]	; 0x24
  pid->eff_voltage = real->rps * param->voltage_per_rps;
 8003ca8:	edc0 7a00 	vstr	s15, [r0]
  float output_voltage_diff = cmd->out_v - pid->eff_voltage;
 8003cac:	ee37 6a67 	vsub.f32	s12, s14, s15
  cmd->out_v = cmd->speed * param->voltage_per_rps;
 8003cb0:	ed83 7a02 	vstr	s14, [r3, #8]
  if (output_voltage_diff > +pid->diff_voltage_limit) {
 8003cb4:	eef4 6ac6 	vcmpe.f32	s13, s12
 8003cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbc:	d50a      	bpl.n	8003cd4 <speedToOutputVoltage+0x44>
    cmd->out_v = pid->eff_voltage + pid->diff_voltage_limit;
 8003cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
  } else {
    pid->output_voltage_limitting = false;
  }

  if (pid->output_voltage_limitting) {
    pid->load_limit_cnt++;
 8003cc2:	6a82      	ldr	r2, [r0, #40]	; 0x28
    cmd->out_v = pid->eff_voltage - pid->diff_voltage_limit;
 8003cc4:	edc3 7a02 	vstr	s15, [r3, #8]
    pid->output_voltage_limitting = true;
 8003cc8:	2101      	movs	r1, #1
    pid->load_limit_cnt++;
 8003cca:	440a      	add	r2, r1
    pid->output_voltage_limitting = true;
 8003ccc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    pid->load_limit_cnt++;
 8003cd0:	6282      	str	r2, [r0, #40]	; 0x28
  } else if (pid->load_limit_cnt > 0) {
    pid->load_limit_cnt--;
  }
}
 8003cd2:	4770      	bx	lr
  } else if (output_voltage_diff < -pid->diff_voltage_limit) {
 8003cd4:	eeb1 7a66 	vneg.f32	s14, s13
 8003cd8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8003cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce0:	dd02      	ble.n	8003ce8 <speedToOutputVoltage+0x58>
    cmd->out_v = pid->eff_voltage - pid->diff_voltage_limit;
 8003ce2:	ee77 7ae6 	vsub.f32	s15, s15, s13
    pid->output_voltage_limitting = true;
 8003ce6:	e7ec      	b.n	8003cc2 <speedToOutputVoltage+0x32>
  } else if (pid->load_limit_cnt > 0) {
 8003ce8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    pid->output_voltage_limitting = false;
 8003cea:	2200      	movs	r2, #0
  } else if (pid->load_limit_cnt > 0) {
 8003cec:	4293      	cmp	r3, r2
    pid->output_voltage_limitting = false;
 8003cee:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
  } else if (pid->load_limit_cnt > 0) {
 8003cf2:	ddee      	ble.n	8003cd2 <speedToOutputVoltage+0x42>
    pid->load_limit_cnt--;
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	6283      	str	r3, [r0, #40]	; 0x28
}
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop

08003cfc <setFinalOutputVoltage>:

void setFinalOutputVoltage(motor_control_cmd_t * cmd, enc_offset_t * enc_offset, float manual_offset)
{
 8003cfc:	b5d0      	push	{r4, r6, r7, lr}
  cmd->out_v_final = cmd->out_v;
 8003cfe:	edd0 7a02 	vldr	s15, [r0, #8]
  if (cmd->out_v_final < 0) {
 8003d02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8003d0a:	ed2d 8b02 	vpush	{d8}
 8003d0e:	460c      	mov	r4, r1
  cmd->out_v_final = cmd->out_v;
 8003d10:	edc0 7a03 	vstr	s15, [r0, #12]
{
 8003d14:	eeb0 8a40 	vmov.f32	s16, s0
  if (cmd->out_v_final < 0) {
 8003d18:	d408      	bmi.n	8003d2c <setFinalOutputVoltage+0x30>
    // 2.4
    enc_offset->final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset->zero_calib + manual_offset;
  } else {
    enc_offset->final = enc_offset->zero_calib + manual_offset;
  }
}
 8003d1a:	ecbd 8b02 	vpop	{d8}
    enc_offset->final = enc_offset->zero_calib + manual_offset;
 8003d1e:	edd1 7a01 	vldr	s15, [r1, #4]
 8003d22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003d26:	ed84 0a00 	vstr	s0, [r4]
}
 8003d2a:	bdd0      	pop	{r4, r6, r7, pc}
    enc_offset->final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset->zero_calib + manual_offset;
 8003d2c:	6848      	ldr	r0, [r1, #4]
 8003d2e:	f7fc fc0b 	bl	8000548 <__aeabi_f2d>
 8003d32:	4606      	mov	r6, r0
 8003d34:	ee18 0a10 	vmov	r0, s16
 8003d38:	460f      	mov	r7, r1
 8003d3a:	f7fc fc05 	bl	8000548 <__aeabi_f2d>
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <setFinalOutputVoltage+0x68>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	f7fc faa1 	bl	8000288 <__aeabi_dsub>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	f7fc fa9d 	bl	800028c <__adddf3>
 8003d52:	f7fc ff49 	bl	8000be8 <__aeabi_d2f>
}
 8003d56:	ecbd 8b02 	vpop	{d8}
    enc_offset->final = -(ROTATION_OFFSET_RADIAN * 2) + enc_offset->zero_calib + manual_offset;
 8003d5a:	ee00 0a10 	vmov	s0, r0
 8003d5e:	ed84 0a00 	vstr	s0, [r4]
}
 8003d62:	bdd0      	pop	{r4, r6, r7, pc}
 8003d64:	40100000 	.word	0x40100000

08003d68 <calcMotorSpeed>:

void calcMotorSpeed(motor_real_t * real, ma702_t * enc, system_t * sys, enc_error_watcher_t * enc_error)
{
 8003d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int temp = real->pre_enc_cnt_raw - enc->enc_raw;
 8003d6c:	6804      	ldr	r4, [r0, #0]
 8003d6e:	f8d1 a004 	ldr.w	sl, [r1, #4]
{
 8003d72:	b083      	sub	sp, #12
  int temp = real->pre_enc_cnt_raw - enc->enc_raw;
 8003d74:	eba4 040a 	sub.w	r4, r4, sl
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8003d78:	f514 4f00 	cmn.w	r4, #32768	; 0x8000
{
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	4693      	mov	fp, r2
 8003d80:	9301      	str	r3, [sp, #4]
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8003d82:	da33      	bge.n	8003dec <calcMotorSpeed+0x84>
    temp += ENC_CNT_MAX;
 8003d84:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
    temp -= ENC_CNT_MAX;
  }

  if (fabs(real->diff_cnt_max) < fabs(temp)) {
 8003d88:	6868      	ldr	r0, [r5, #4]
 8003d8a:	f7fc fbcb 	bl	8000524 <__aeabi_i2d>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4620      	mov	r0, r4
 8003d92:	4690      	mov	r8, r2
 8003d94:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8003d98:	f7fc fbc4 	bl	8000524 <__aeabi_i2d>
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	460f      	mov	r7, r1
 8003da0:	4640      	mov	r0, r8
 8003da2:	4649      	mov	r1, r9
 8003da4:	4632      	mov	r2, r6
 8003da6:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8003daa:	f7fc fe97 	bl	8000adc <__aeabi_dcmplt>
 8003dae:	b100      	cbz	r0, 8003db2 <calcMotorSpeed+0x4a>
    real->diff_cnt_max = temp;
 8003db0:	606c      	str	r4, [r5, #4]
  }

  // 異常な回転数の場合に無視
  if (fabs((float)temp / ENC_CNT_MAX * 1000) > SPEED_CMD_LIMIT_RPS * 1.5 && sys->free_wheel_cnt == 0) {
 8003db2:	ee07 4a90 	vmov	s15, r4
 8003db6:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003e18 <calcMotorSpeed+0xb0>
 8003dba:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003e1c <calcMotorSpeed+0xb4>
 8003dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003dc6:	eef0 6ae7 	vabs.f32	s13, s15
 8003dca:	eef4 6ac7 	vcmpe.f32	s13, s14
 8003dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd2:	dd02      	ble.n	8003dda <calcMotorSpeed+0x72>
 8003dd4:	f8db 6000 	ldr.w	r6, [fp]
 8003dd8:	b176      	cbz	r6, 8003df8 <calcMotorSpeed+0x90>
    enc_error->cnt = temp;
    return;
  }

  // motor_real[motor].rps = ((float)temp / ENC_CNT_MAX * 1000) * motor_real[motor].k + (1-motor_real[motor].k) * motor_real[motor].pre_rps; // rps
  real->rps = (float)temp / ENC_CNT_MAX * 1000;
 8003dda:	edc5 7a02 	vstr	s15, [r5, #8]
  real->pre_rps = real->rps;
 8003dde:	edc5 7a03 	vstr	s15, [r5, #12]
  real->pre_enc_cnt_raw = enc->enc_raw;
 8003de2:	f8c5 a000 	str.w	sl, [r5]
 8003de6:	b003      	add	sp, #12
 8003de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 8003dec:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 8003df0:	bfc8      	it	gt
 8003df2:	f5a4 3480 	subgt.w	r4, r4, #65536	; 0x10000
 8003df6:	e7c7      	b.n	8003d88 <calcMotorSpeed+0x20>
    setPwmOutPutFreeWheel();
 8003df8:	f000 fda2 	bl	8004940 <setPwmOutPutFreeWheel>
    sys->free_wheel_cnt += 10;
 8003dfc:	f8db 3000 	ldr.w	r3, [fp]
    enc_error->detect_flag = true;
 8003e00:	9a01      	ldr	r2, [sp, #4]
    sys->free_wheel_cnt += 10;
 8003e02:	330a      	adds	r3, #10
 8003e04:	f8cb 3000 	str.w	r3, [fp]
    enc_error->detect_flag = true;
 8003e08:	2301      	movs	r3, #1
    enc_error->cnt = temp;
 8003e0a:	e9c2 6401 	strd	r6, r4, [r2, #4]
    enc_error->detect_flag = true;
 8003e0e:	7013      	strb	r3, [r2, #0]
 8003e10:	b003      	add	sp, #12
 8003e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e16:	bf00      	nop
 8003e18:	3c7a0000 	.word	0x3c7a0000
 8003e1c:	42960000 	.word	0x42960000

08003e20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003e20:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003e22:	4811      	ldr	r0, [pc, #68]	; (8003e68 <MX_SPI1_Init+0x48>)
 8003e24:	4c11      	ldr	r4, [pc, #68]	; (8003e6c <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e26:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e2a:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003e2e:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e30:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003e32:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003e36:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003e38:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003e3e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e42:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003e46:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8003e48:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e4a:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003e52:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003e56:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003e58:	f003 fc70 	bl	800773c <HAL_SPI_Init>
 8003e5c:	b900      	cbnz	r0, 8003e60 <MX_SPI1_Init+0x40>
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8003e5e:	bd10      	pop	{r4, pc}
 8003e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003e64:	f7ff bf12 	b.w	8003c8c <Error_Handler>
 8003e68:	20000524 	.word	0x20000524
 8003e6c:	40013000 	.word	0x40013000

08003e70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef * spiHandle)
{
 8003e70:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (spiHandle->Instance == SPI1) {
 8003e72:	4a1e      	ldr	r2, [pc, #120]	; (8003eec <HAL_SPI_MspInit+0x7c>)
 8003e74:	6801      	ldr	r1, [r0, #0]
{
 8003e76:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e78:	2300      	movs	r3, #0
  if (spiHandle->Instance == SPI1) {
 8003e7a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003e80:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003e84:	9306      	str	r3, [sp, #24]
  if (spiHandle->Instance == SPI1) {
 8003e86:	d001      	beq.n	8003e8c <HAL_SPI_MspInit+0x1c>

    /* USER CODE BEGIN SPI1_MspInit 1 */

    /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003e88:	b009      	add	sp, #36	; 0x24
 8003e8a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003e90:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e94:	2403      	movs	r4, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e96:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e98:	4815      	ldr	r0, [pc, #84]	; (8003ef0 <HAL_SPI_MspInit+0x80>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e9e:	619a      	str	r2, [r3, #24]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ea6:	9200      	str	r2, [sp, #0]
 8003ea8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003eb0:	615a      	str	r2, [r3, #20]
 8003eb2:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eb4:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ebc:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ebe:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5;
 8003ec0:	2228      	movs	r2, #40	; 0x28
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ec8:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eca:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ecc:	f002 fe24 	bl	8006b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ed2:	2210      	movs	r2, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed4:	4806      	ldr	r0, [pc, #24]	; (8003ef0 <HAL_SPI_MspInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ed6:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ed8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003eda:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ede:	e9cd 4505 	strd	r4, r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee2:	f002 fe19 	bl	8006b18 <HAL_GPIO_Init>
}
 8003ee6:	b009      	add	sp, #36	; 0x24
 8003ee8:	bd30      	pop	{r4, r5, pc}
 8003eea:	bf00      	nop
 8003eec:	40013000 	.word	0x40013000
 8003ef0:	48000400 	.word	0x48000400

08003ef4 <readRegisterMA702>:
}

volatile static uint32_t delay_cnt = 0;

uint8_t readRegisterMA702(bool enc, uint8_t address)
{
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	460e      	mov	r6, r1
  if (enc == 0) {
 8003ef8:	4604      	mov	r4, r0
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d14c      	bne.n	8003f98 <readRegisterMA702+0xa4>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003efe:	482d      	ldr	r0, [pc, #180]	; (8003fb4 <readRegisterMA702+0xc0>)
 8003f00:	4622      	mov	r2, r4
 8003f02:	2140      	movs	r1, #64	; 0x40
 8003f04:	f002 fef6 	bl	8006cf4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }

  hspi1.Instance->DR = 0x4000 | ((address & 0x1F) << 8);
 8003f08:	4d2b      	ldr	r5, [pc, #172]	; (8003fb8 <readRegisterMA702+0xc4>)
 8003f0a:	0236      	lsls	r6, r6, #8
 8003f0c:	682a      	ldr	r2, [r5, #0]
 8003f0e:	f406 56f8 	and.w	r6, r6, #7936	; 0x1f00
 8003f12:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8003f16:	60d6      	str	r6, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 8003f18:	6893      	ldr	r3, [r2, #8]
 8003f1a:	07d9      	lsls	r1, r3, #31
 8003f1c:	d5fc      	bpl.n	8003f18 <readRegisterMA702+0x24>
  }
  if (enc == 0) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003f1e:	4825      	ldr	r0, [pc, #148]	; (8003fb4 <readRegisterMA702+0xc0>)
 8003f20:	2201      	movs	r2, #1
  if (enc == 0) {
 8003f22:	bb24      	cbnz	r4, 8003f6e <readRegisterMA702+0x7a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003f24:	2140      	movs	r1, #64	; 0x40
 8003f26:	f002 fee5 	bl	8006cf4 <HAL_GPIO_WritePin>

    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++) {
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <readRegisterMA702+0xc8>)
 8003f2c:	601c      	str	r4, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	2a01      	cmp	r2, #1
 8003f32:	d805      	bhi.n	8003f40 <readRegisterMA702+0x4c>
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	3101      	adds	r1, #1
 8003f38:	6019      	str	r1, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	2a01      	cmp	r2, #1
 8003f3e:	d9f9      	bls.n	8003f34 <readRegisterMA702+0x40>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003f40:	481c      	ldr	r0, [pc, #112]	; (8003fb4 <readRegisterMA702+0xc0>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	2140      	movs	r1, #64	; 0x40
 8003f46:	f002 fed5 	bl	8006cf4 <HAL_GPIO_WritePin>

    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++) {
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }
  uint16_t temp = hspi1.Instance->DR;
 8003f4a:	682a      	ldr	r2, [r5, #0]

  hspi1.Instance->DR = 0;
 8003f4c:	2300      	movs	r3, #0
  uint16_t temp = hspi1.Instance->DR;
 8003f4e:	68d1      	ldr	r1, [r2, #12]
  hspi1.Instance->DR = 0;
 8003f50:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 8003f52:	6893      	ldr	r3, [r2, #8]
 8003f54:	07db      	lsls	r3, r3, #31
 8003f56:	d5fc      	bpl.n	8003f52 <readRegisterMA702+0x5e>
  }

  if (enc == 0) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003f58:	4816      	ldr	r0, [pc, #88]	; (8003fb4 <readRegisterMA702+0xc0>)
 8003f5a:	2201      	movs	r2, #1
  if (enc == 0) {
 8003f5c:	bb14      	cbnz	r4, 8003fa4 <readRegisterMA702+0xb0>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003f5e:	2140      	movs	r1, #64	; 0x40
 8003f60:	f002 fec8 	bl	8006cf4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
  }

  return hspi1.Instance->DR >> 8;
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	68d8      	ldr	r0, [r3, #12]
}
 8003f68:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003f6c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003f6e:	2180      	movs	r1, #128	; 0x80
 8003f70:	f002 fec0 	bl	8006cf4 <HAL_GPIO_WritePin>
    for (delay_cnt = 0; delay_cnt < 2; delay_cnt++) {
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <readRegisterMA702+0xc8>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2a01      	cmp	r2, #1
 8003f7e:	d805      	bhi.n	8003f8c <readRegisterMA702+0x98>
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	3101      	adds	r1, #1
 8003f84:	6019      	str	r1, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	2a01      	cmp	r2, #1
 8003f8a:	d9f9      	bls.n	8003f80 <readRegisterMA702+0x8c>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8003f8c:	4809      	ldr	r0, [pc, #36]	; (8003fb4 <readRegisterMA702+0xc0>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2180      	movs	r1, #128	; 0x80
 8003f92:	f002 feaf 	bl	8006cf4 <HAL_GPIO_WritePin>
 8003f96:	e7d8      	b.n	8003f4a <readRegisterMA702+0x56>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8003f98:	4806      	ldr	r0, [pc, #24]	; (8003fb4 <readRegisterMA702+0xc0>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2180      	movs	r1, #128	; 0x80
 8003f9e:	f002 fea9 	bl	8006cf4 <HAL_GPIO_WritePin>
 8003fa2:	e7b1      	b.n	8003f08 <readRegisterMA702+0x14>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	f002 fea5 	bl	8006cf4 <HAL_GPIO_WritePin>
  return hspi1.Instance->DR >> 8;
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	68d8      	ldr	r0, [r3, #12]
}
 8003fae:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	48000400 	.word	0x48000400
 8003fb8:	20000524 	.word	0x20000524
 8003fbc:	20000520 	.word	0x20000520

08003fc0 <writeRegisterMA702>:

uint8_t writeRegisterMA702(bool enc, uint8_t address, uint8_t value)
{
 8003fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	4617      	mov	r7, r2
  if (enc == 0) {
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d13e      	bne.n	800404a <writeRegisterMA702+0x8a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8003fcc:	4602      	mov	r2, r0
 8003fce:	2140      	movs	r1, #64	; 0x40
 8003fd0:	4825      	ldr	r0, [pc, #148]	; (8004068 <writeRegisterMA702+0xa8>)
 8003fd2:	f002 fe8f 	bl	8006cf4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }

  hspi1.Instance->DR = 0x8000 | ((address & 0x1F) << 8) | value;
 8003fd6:	4e25      	ldr	r6, [pc, #148]	; (800406c <writeRegisterMA702+0xac>)
 8003fd8:	0223      	lsls	r3, r4, #8
 8003fda:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8003fde:	6831      	ldr	r1, [r6, #0]
 8003fe0:	433b      	orrs	r3, r7
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fe6:	60cb      	str	r3, [r1, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 8003fe8:	688b      	ldr	r3, [r1, #8]
 8003fea:	07da      	lsls	r2, r3, #31
 8003fec:	d5fc      	bpl.n	8003fe8 <writeRegisterMA702+0x28>
  }
  if (enc == 0) {
 8003fee:	b9f5      	cbnz	r5, 800402e <writeRegisterMA702+0x6e>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003ff0:	2140      	movs	r1, #64	; 0x40
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	481c      	ldr	r0, [pc, #112]	; (8004068 <writeRegisterMA702+0xa8>)
 8003ff6:	f002 fe7d 	bl	8006cf4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8003ffa:	2014      	movs	r0, #20
 8003ffc:	f000 ff00 	bl	8004e00 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004000:	4819      	ldr	r0, [pc, #100]	; (8004068 <writeRegisterMA702+0xa8>)
 8004002:	462a      	mov	r2, r5
 8004004:	2140      	movs	r1, #64	; 0x40
 8004006:	f002 fe75 	bl	8006cf4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
    HAL_Delay(20);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
  }
  uint16_t temp = hspi1.Instance->DR;
 800400a:	6831      	ldr	r1, [r6, #0]

  hspi1.Instance->DR = 0;
 800400c:	2300      	movs	r3, #0
  uint16_t temp = hspi1.Instance->DR;
 800400e:	68ca      	ldr	r2, [r1, #12]
  hspi1.Instance->DR = 0;
 8004010:	60cb      	str	r3, [r1, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 8004012:	688b      	ldr	r3, [r1, #8]
 8004014:	07db      	lsls	r3, r3, #31
 8004016:	d5fc      	bpl.n	8004012 <writeRegisterMA702+0x52>
  }

  if (enc == 0) {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004018:	4813      	ldr	r0, [pc, #76]	; (8004068 <writeRegisterMA702+0xa8>)
 800401a:	2201      	movs	r2, #1
  if (enc == 0) {
 800401c:	b9dd      	cbnz	r5, 8004056 <writeRegisterMA702+0x96>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800401e:	2140      	movs	r1, #64	; 0x40
 8004020:	f002 fe68 	bl	8006cf4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
  }

  return hspi1.Instance->DR >> 8;
 8004024:	6833      	ldr	r3, [r6, #0]
 8004026:	68d8      	ldr	r0, [r3, #12]
}
 8004028:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800402c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800402e:	2201      	movs	r2, #1
 8004030:	2180      	movs	r1, #128	; 0x80
 8004032:	480d      	ldr	r0, [pc, #52]	; (8004068 <writeRegisterMA702+0xa8>)
 8004034:	f002 fe5e 	bl	8006cf4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8004038:	2014      	movs	r0, #20
 800403a:	f000 fee1 	bl	8004e00 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800403e:	480a      	ldr	r0, [pc, #40]	; (8004068 <writeRegisterMA702+0xa8>)
 8004040:	2200      	movs	r2, #0
 8004042:	2180      	movs	r1, #128	; 0x80
 8004044:	f002 fe56 	bl	8006cf4 <HAL_GPIO_WritePin>
 8004048:	e7df      	b.n	800400a <writeRegisterMA702+0x4a>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800404a:	4807      	ldr	r0, [pc, #28]	; (8004068 <writeRegisterMA702+0xa8>)
 800404c:	2200      	movs	r2, #0
 800404e:	2180      	movs	r1, #128	; 0x80
 8004050:	f002 fe50 	bl	8006cf4 <HAL_GPIO_WritePin>
 8004054:	e7bf      	b.n	8003fd6 <writeRegisterMA702+0x16>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	f002 fe4c 	bl	8006cf4 <HAL_GPIO_WritePin>
  return hspi1.Instance->DR >> 8;
 800405c:	6833      	ldr	r3, [r6, #0]
 800405e:	68d8      	ldr	r0, [r3, #12]
}
 8004060:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8004064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004066:	bf00      	nop
 8004068:	48000400 	.word	0x48000400
 800406c:	20000524 	.word	0x20000524

08004070 <updateMA702>:
  updateDiff(0);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
}

inline void updateMA702(bool motor)
{
 8004070:	b570      	push	{r4, r5, r6, lr}
  if (motor == 0) {
 8004072:	2800      	cmp	r0, #0
 8004074:	d158      	bne.n	8004128 <updateMA702+0xb8>
 8004076:	4606      	mov	r6, r0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004078:	2180      	movs	r1, #128	; 0x80
 800407a:	485d      	ldr	r0, [pc, #372]	; (80041f0 <updateMA702+0x180>)
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 800407c:	4c5d      	ldr	r4, [pc, #372]	; (80041f4 <updateMA702+0x184>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800407e:	4632      	mov	r2, r6
 8004080:	f002 fe38 	bl	8006cf4 <HAL_GPIO_WritePin>
  ma702[0].enc_raw = hspi1.Instance->DR;
 8004084:	4b5c      	ldr	r3, [pc, #368]	; (80041f8 <updateMA702+0x188>)
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 8004086:	6865      	ldr	r5, [r4, #4]
  ma702[0].enc_raw = hspi1.Instance->DR;
 8004088:	6819      	ldr	r1, [r3, #0]
 800408a:	68cb      	ldr	r3, [r1, #12]
  ma702[0].pre_enc_raw = ma702[0].enc_raw;
 800408c:	60e5      	str	r5, [r4, #12]
  hspi1.Instance->DR = 0;
 800408e:	60ce      	str	r6, [r1, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 8004090:	688b      	ldr	r3, [r1, #8]
 8004092:	07da      	lsls	r2, r3, #31
 8004094:	d5fc      	bpl.n	8004090 <updateMA702+0x20>
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004096:	68ce      	ldr	r6, [r1, #12]
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 8004098:	4b58      	ldr	r3, [pc, #352]	; (80041fc <updateMA702+0x18c>)
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 800409a:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800409e:	4016      	ands	r6, r2
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 80040a0:	fb83 2306 	smull	r2, r3, r3, r6
 80040a4:	4433      	add	r3, r6
 80040a6:	f241 5255 	movw	r2, #5461	; 0x1555
 80040aa:	131b      	asrs	r3, r3, #12
 80040ac:	fb02 6313 	mls	r3, r2, r3, r6
 80040b0:	1ad2      	subs	r2, r2, r3
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 80040b2:	ee07 2a90 	vmov	s15, r2
 80040b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ba:	eddf 7a51 	vldr	s15, [pc, #324]	; 8004200 <updateMA702+0x190>
  ma702[0].enc_elec_raw = 5461 - (ma702[0].enc_raw % 5461);
 80040be:	60a2      	str	r2, [r4, #8]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 80040c0:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80040c4:	6066      	str	r6, [r4, #4]
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 80040c6:	ee17 0a90 	vmov	r0, s15
 80040ca:	f7fc fa3d 	bl	8000548 <__aeabi_f2d>
 80040ce:	a346      	add	r3, pc, #280	; (adr r3, 80041e8 <updateMA702+0x178>)
 80040d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d4:	f7fc fa90 	bl	80005f8 <__aeabi_dmul>
 80040d8:	f7fc fd86 	bl	8000be8 <__aeabi_d2f>
  int temp = ma702[enc].pre_enc_raw - ma702[enc].enc_raw;
 80040dc:	1bad      	subs	r5, r5, r6
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 80040de:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
  ma702[0].output_radian = (float)ma702[0].enc_elec_raw / 5461 * 2 * M_PI;
 80040e2:	6020      	str	r0, [r4, #0]
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 80040e4:	db7c      	blt.n	80041e0 <updateMA702+0x170>
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 80040e6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 80040ea:	bfc8      	it	gt
 80040ec:	f5a5 3580 	subgt.w	r5, r5, #65536	; 0x10000
  if (abs(ma702[enc].diff_max) < abs(temp)) {
 80040f0:	69a3      	ldr	r3, [r4, #24]
  ma702[enc].diff_enc = temp;
 80040f2:	6125      	str	r5, [r4, #16]
  if (abs(ma702[enc].diff_max) < abs(temp)) {
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 80040fa:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 80040fe:	bfb8      	it	lt
 8004100:	425b      	neglt	r3, r3
 8004102:	4293      	cmp	r3, r2
  if (abs(ma702[enc].diff_min) > abs(temp)) {
 8004104:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004106:	483a      	ldr	r0, [pc, #232]	; (80041f0 <updateMA702+0x180>)
    ma702[enc].diff_max_cnt = ma702[enc].enc_raw;
 8004108:	bfb8      	it	lt
 800410a:	e9c4 5606 	strdlt	r5, r6, [r4, #24]
  if (abs(ma702[enc].diff_min) > abs(temp)) {
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	425b      	neglt	r3, r3
 8004114:	429a      	cmp	r2, r3
    ma702[enc].diff_min = temp;
 8004116:	bfbc      	itt	lt
 8004118:	6165      	strlt	r5, [r4, #20]
    ma702[enc].diff_min_cnt = ma702[enc].enc_raw;
 800411a:	6226      	strlt	r6, [r4, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800411c:	2201      	movs	r2, #1
    updateMA702_M0();
  } else {
    updateMA702_M1();
  }
}
 800411e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	f002 bde6 	b.w	8006cf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004128:	2200      	movs	r2, #0
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	4830      	ldr	r0, [pc, #192]	; (80041f0 <updateMA702+0x180>)
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 800412e:	4c31      	ldr	r4, [pc, #196]	; (80041f4 <updateMA702+0x184>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004130:	f002 fde0 	bl	8006cf4 <HAL_GPIO_WritePin>
  ma702[1].enc_raw = hspi1.Instance->DR;
 8004134:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <updateMA702+0x188>)
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 8004136:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  ma702[1].enc_raw = hspi1.Instance->DR;
 8004138:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 800413a:	2300      	movs	r3, #0
  ma702[1].enc_raw = hspi1.Instance->DR;
 800413c:	68d1      	ldr	r1, [r2, #12]
  ma702[1].pre_enc_raw = ma702[1].enc_raw;
 800413e:	6325      	str	r5, [r4, #48]	; 0x30
  hspi1.Instance->DR = 0;
 8004140:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET) {
 8004142:	6893      	ldr	r3, [r2, #8]
 8004144:	07db      	lsls	r3, r3, #31
 8004146:	d5fc      	bpl.n	8004142 <updateMA702+0xd2>
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004148:	68d6      	ldr	r6, [r2, #12]
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 800414a:	4b2c      	ldr	r3, [pc, #176]	; (80041fc <updateMA702+0x18c>)
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 800414c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8004150:	4016      	ands	r6, r2
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 8004152:	fb83 2306 	smull	r2, r3, r3, r6
 8004156:	4433      	add	r3, r6
 8004158:	f241 5255 	movw	r2, #5461	; 0x1555
 800415c:	131b      	asrs	r3, r3, #12
 800415e:	fb02 6313 	mls	r3, r2, r3, r6
 8004162:	1ad2      	subs	r2, r2, r3
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 8004164:	ee07 2a90 	vmov	s15, r2
 8004168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800416c:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004200 <updateMA702+0x190>
  ma702[1].enc_elec_raw = 5461 - (ma702[1].enc_raw % 5461);
 8004170:	62e2      	str	r2, [r4, #44]	; 0x2c
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8004176:	62a6      	str	r6, [r4, #40]	; 0x28
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 8004178:	ee17 0a90 	vmov	r0, s15
 800417c:	f7fc f9e4 	bl	8000548 <__aeabi_f2d>
 8004180:	a319      	add	r3, pc, #100	; (adr r3, 80041e8 <updateMA702+0x178>)
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	f7fc fa37 	bl	80005f8 <__aeabi_dmul>
 800418a:	f7fc fd2d 	bl	8000be8 <__aeabi_d2f>
  int temp = ma702[enc].pre_enc_raw - ma702[enc].enc_raw;
 800418e:	1bad      	subs	r5, r5, r6
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8004190:	f515 4f00 	cmn.w	r5, #32768	; 0x8000
  ma702[1].output_radian = (float)ma702[1].enc_elec_raw / 5461 * 2 * M_PI;
 8004194:	6260      	str	r0, [r4, #36]	; 0x24
  if (temp < -HARF_OF_ENC_CNT_MAX) {
 8004196:	db20      	blt.n	80041da <updateMA702+0x16a>
  } else if (temp > HARF_OF_ENC_CNT_MAX) {
 8004198:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    temp -= ENC_CNT_MAX;
 800419c:	bfc8      	it	gt
 800419e:	f5a5 3580 	subgt.w	r5, r5, #65536	; 0x10000
  if (abs(ma702[enc].diff_max) < abs(temp)) {
 80041a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  ma702[enc].diff_enc = temp;
 80041a4:	6365      	str	r5, [r4, #52]	; 0x34
  if (abs(ma702[enc].diff_max) < abs(temp)) {
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 80041ac:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 80041b0:	bfb8      	it	lt
 80041b2:	425b      	neglt	r3, r3
 80041b4:	4293      	cmp	r3, r2
  if (abs(ma702[enc].diff_min) > abs(temp)) {
 80041b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80041b8:	480d      	ldr	r0, [pc, #52]	; (80041f0 <updateMA702+0x180>)
    ma702[enc].diff_max_cnt = ma702[enc].enc_raw;
 80041ba:	bfb8      	it	lt
 80041bc:	e9c4 560f 	strdlt	r5, r6, [r4, #60]	; 0x3c
  if (abs(ma702[enc].diff_min) > abs(temp)) {
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bfb8      	it	lt
 80041c4:	425b      	neglt	r3, r3
 80041c6:	429a      	cmp	r2, r3
    ma702[enc].diff_min = temp;
 80041c8:	bfbc      	itt	lt
 80041ca:	63a5      	strlt	r5, [r4, #56]	; 0x38
    ma702[enc].diff_min_cnt = ma702[enc].enc_raw;
 80041cc:	6466      	strlt	r6, [r4, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80041ce:	2201      	movs	r2, #1
}
 80041d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80041d4:	2140      	movs	r1, #64	; 0x40
 80041d6:	f002 bd8d 	b.w	8006cf4 <HAL_GPIO_WritePin>
    temp += ENC_CNT_MAX;
 80041da:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80041de:	e7e0      	b.n	80041a2 <updateMA702+0x132>
 80041e0:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 80041e4:	e784      	b.n	80040f0 <updateMA702+0x80>
 80041e6:	bf00      	nop
 80041e8:	54442d18 	.word	0x54442d18
 80041ec:	400921fb 	.word	0x400921fb
 80041f0:	48000400 	.word	0x48000400
 80041f4:	20000588 	.word	0x20000588
 80041f8:	20000524 	.word	0x20000524
 80041fc:	c003000d 	.word	0xc003000d
 8004200:	39c00300 	.word	0x39c00300

08004204 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_MspInit+0x2c>)
 8004206:	699a      	ldr	r2, [r3, #24]
 8004208:	f042 0201 	orr.w	r2, r2, #1
 800420c:	619a      	str	r2, [r3, #24]
 800420e:	699a      	ldr	r2, [r3, #24]
{
 8004210:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004212:	f002 0201 	and.w	r2, r2, #1
 8004216:	9200      	str	r2, [sp, #0]
 8004218:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004220:	61da      	str	r2, [r3, #28]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422c:	b002      	add	sp, #8
 800422e:	4770      	bx	lr
 8004230:	40021000 	.word	0x40021000

08004234 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004234:	e7fe      	b.n	8004234 <NMI_Handler>
 8004236:	bf00      	nop

08004238 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004238:	e7fe      	b.n	8004238 <HardFault_Handler>
 800423a:	bf00      	nop

0800423c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800423c:	e7fe      	b.n	800423c <MemManage_Handler>
 800423e:	bf00      	nop

08004240 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004240:	e7fe      	b.n	8004240 <BusFault_Handler>
 8004242:	bf00      	nop

08004244 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004244:	e7fe      	b.n	8004244 <UsageFault_Handler>
 8004246:	bf00      	nop

08004248 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop

0800424c <DebugMon_Handler>:
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop

08004250 <PendSV_Handler>:
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop

08004254 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004254:	f000 bdc2 	b.w	8004ddc <HAL_IncTick>

08004258 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004258:	4801      	ldr	r0, [pc, #4]	; (8004260 <DMA1_Channel4_IRQHandler+0x8>)
 800425a:	f002 ba81 	b.w	8006760 <HAL_DMA_IRQHandler>
 800425e:	bf00      	nop
 8004260:	20001990 	.word	0x20001990

08004264 <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004264:	4801      	ldr	r0, [pc, #4]	; (800426c <USB_HP_CAN_TX_IRQHandler+0x8>)
 8004266:	f001 bffb 	b.w	8006260 <HAL_CAN_IRQHandler>
 800426a:	bf00      	nop
 800426c:	20000310 	.word	0x20000310

08004270 <USB_LP_CAN_RX0_IRQHandler>:
 8004270:	4801      	ldr	r0, [pc, #4]	; (8004278 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8004272:	f001 bff5 	b.w	8006260 <HAL_CAN_IRQHandler>
 8004276:	bf00      	nop
 8004278:	20000310 	.word	0x20000310

0800427c <CAN_RX1_IRQHandler>:
 800427c:	4801      	ldr	r0, [pc, #4]	; (8004284 <CAN_RX1_IRQHandler+0x8>)
 800427e:	f001 bfef 	b.w	8006260 <HAL_CAN_IRQHandler>
 8004282:	bf00      	nop
 8004284:	20000310 	.word	0x20000310

08004288 <CAN_SCE_IRQHandler>:
 8004288:	4801      	ldr	r0, [pc, #4]	; (8004290 <CAN_SCE_IRQHandler+0x8>)
 800428a:	f001 bfe9 	b.w	8006260 <HAL_CAN_IRQHandler>
 800428e:	bf00      	nop
 8004290:	20000310 	.word	0x20000310

08004294 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004294:	4801      	ldr	r0, [pc, #4]	; (800429c <TIM1_UP_TIM16_IRQHandler+0x8>)
 8004296:	f003 bd4d 	b.w	8007d34 <HAL_TIM_IRQHandler>
 800429a:	bf00      	nop
 800429c:	200005d4 	.word	0x200005d4

080042a0 <TIM1_CC_IRQHandler>:
 80042a0:	4801      	ldr	r0, [pc, #4]	; (80042a8 <TIM1_CC_IRQHandler+0x8>)
 80042a2:	f003 bd47 	b.w	8007d34 <HAL_TIM_IRQHandler>
 80042a6:	bf00      	nop
 80042a8:	200005d4 	.word	0x200005d4

080042ac <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80042ac:	4801      	ldr	r0, [pc, #4]	; (80042b4 <USART1_IRQHandler+0x8>)
 80042ae:	f004 b991 	b.w	80085d4 <HAL_UART_IRQHandler>
 80042b2:	bf00      	nop
 80042b4:	200019d4 	.word	0x200019d4

080042b8 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80042b8:	4801      	ldr	r0, [pc, #4]	; (80042c0 <TIM8_UP_IRQHandler+0x8>)
 80042ba:	f003 bd3b 	b.w	8007d34 <HAL_TIM_IRQHandler>
 80042be:	bf00      	nop
 80042c0:	20000620 	.word	0x20000620

080042c4 <TIM8_CC_IRQHandler>:
 80042c4:	4801      	ldr	r0, [pc, #4]	; (80042cc <TIM8_CC_IRQHandler+0x8>)
 80042c6:	f003 bd35 	b.w	8007d34 <HAL_TIM_IRQHandler>
 80042ca:	bf00      	nop
 80042cc:	20000620 	.word	0x20000620

080042d0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80042d0:	2001      	movs	r0, #1
 80042d2:	4770      	bx	lr

080042d4 <_kill>:

int _kill(int pid, int sig)
{
 80042d4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80042d6:	f006 ffc3 	bl	800b260 <__errno>
 80042da:	2316      	movs	r3, #22
 80042dc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80042de:	f04f 30ff 	mov.w	r0, #4294967295
 80042e2:	bd08      	pop	{r3, pc}

080042e4 <_exit>:

void _exit (int status)
{
 80042e4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80042e6:	f006 ffbb 	bl	800b260 <__errno>
 80042ea:	2316      	movs	r3, #22
 80042ec:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80042ee:	e7fe      	b.n	80042ee <_exit+0xa>

080042f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042f0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f2:	1e16      	subs	r6, r2, #0
 80042f4:	dd07      	ble.n	8004306 <_read+0x16>
 80042f6:	460c      	mov	r4, r1
 80042f8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80042fa:	f3af 8000 	nop.w
 80042fe:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004302:	42a5      	cmp	r5, r4
 8004304:	d1f9      	bne.n	80042fa <_read+0xa>
	}

return len;
}
 8004306:	4630      	mov	r0, r6
 8004308:	bd70      	pop	{r4, r5, r6, pc}
 800430a:	bf00      	nop

0800430c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800430c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800430e:	1e16      	subs	r6, r2, #0
 8004310:	dd07      	ble.n	8004322 <_write+0x16>
 8004312:	460c      	mov	r4, r1
 8004314:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8004316:	f814 0b01 	ldrb.w	r0, [r4], #1
 800431a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800431e:	42ac      	cmp	r4, r5
 8004320:	d1f9      	bne.n	8004316 <_write+0xa>
	}
	return len;
}
 8004322:	4630      	mov	r0, r6
 8004324:	bd70      	pop	{r4, r5, r6, pc}
 8004326:	bf00      	nop

08004328 <_close>:

int _close(int file)
{
	return -1;
}
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop

08004330 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004334:	604b      	str	r3, [r1, #4]
	return 0;
}
 8004336:	2000      	movs	r0, #0
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop

0800433c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800433c:	2001      	movs	r0, #1
 800433e:	4770      	bx	lr

08004340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004340:	2000      	movs	r0, #0
 8004342:	4770      	bx	lr

08004344 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004344:	490c      	ldr	r1, [pc, #48]	; (8004378 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004346:	4a0d      	ldr	r2, [pc, #52]	; (800437c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8004348:	680b      	ldr	r3, [r1, #0]
{
 800434a:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800434c:	4c0c      	ldr	r4, [pc, #48]	; (8004380 <_sbrk+0x3c>)
 800434e:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8004350:	b12b      	cbz	r3, 800435e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004352:	4418      	add	r0, r3
 8004354:	4290      	cmp	r0, r2
 8004356:	d807      	bhi.n	8004368 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8004358:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800435a:	4618      	mov	r0, r3
 800435c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <_sbrk+0x40>)
 8004360:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8004362:	4418      	add	r0, r3
 8004364:	4290      	cmp	r0, r2
 8004366:	d9f7      	bls.n	8004358 <_sbrk+0x14>
    errno = ENOMEM;
 8004368:	f006 ff7a 	bl	800b260 <__errno>
 800436c:	230c      	movs	r3, #12
 800436e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004370:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd10      	pop	{r4, pc}
 8004378:	200005d0 	.word	0x200005d0
 800437c:	20008000 	.word	0x20008000
 8004380:	00000400 	.word	0x00000400
 8004384:	20001f00 	.word	0x20001f00

08004388 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004388:	4a03      	ldr	r2, [pc, #12]	; (8004398 <SystemInit+0x10>)
 800438a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800438e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004392:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004396:	4770      	bx	lr
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <HAL_TIM_PWM_MspInit>:
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef * tim_pwmHandle)
{
 800439c:	b500      	push	{lr}
  if (tim_pwmHandle->Instance == TIM1) {
 800439e:	4a22      	ldr	r2, [pc, #136]	; (8004428 <HAL_TIM_PWM_MspInit+0x8c>)
 80043a0:	6803      	ldr	r3, [r0, #0]
 80043a2:	4293      	cmp	r3, r2
{
 80043a4:	b083      	sub	sp, #12
  if (tim_pwmHandle->Instance == TIM1) {
 80043a6:	d005      	beq.n	80043b4 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  } else if (tim_pwmHandle->Instance == TIM8) {
 80043a8:	4a20      	ldr	r2, [pc, #128]	; (800442c <HAL_TIM_PWM_MspInit+0x90>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01f      	beq.n	80043ee <HAL_TIM_PWM_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }
}
 80043ae:	b003      	add	sp, #12
 80043b0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043b4:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <HAL_TIM_PWM_MspInit+0x94>)
 80043b6:	6998      	ldr	r0, [r3, #24]
 80043b8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80043bc:	6198      	str	r0, [r3, #24]
 80043be:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80043c0:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80043c6:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043c8:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80043ca:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043cc:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80043ce:	f002 f883 	bl	80064d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80043d2:	2019      	movs	r0, #25
 80043d4:	f002 f8be 	bl	8006554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80043d8:	2200      	movs	r2, #0
 80043da:	201b      	movs	r0, #27
 80043dc:	4611      	mov	r1, r2
 80043de:	f002 f87b 	bl	80064d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80043e2:	201b      	movs	r0, #27
}
 80043e4:	b003      	add	sp, #12
 80043e6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80043ea:	f002 b8b3 	b.w	8006554 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_TIM_PWM_MspInit+0x94>)
 80043f0:	6998      	ldr	r0, [r3, #24]
 80043f2:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80043f6:	6198      	str	r0, [r3, #24]
 80043f8:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 80043fa:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 80043fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8004400:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004402:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8004404:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004406:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8004408:	f002 f866 	bl	80064d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 800440c:	202c      	movs	r0, #44	; 0x2c
 800440e:	f002 f8a1 	bl	8006554 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8004412:	2200      	movs	r2, #0
 8004414:	202e      	movs	r0, #46	; 0x2e
 8004416:	4611      	mov	r1, r2
 8004418:	f002 f85e 	bl	80064d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800441c:	202e      	movs	r0, #46	; 0x2e
}
 800441e:	b003      	add	sp, #12
 8004420:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8004424:	f002 b896 	b.w	8006554 <HAL_NVIC_EnableIRQ>
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40013400 	.word	0x40013400
 8004430:	40021000 	.word	0x40021000

08004434 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef * timHandle)
{
 8004434:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (timHandle->Instance == TIM1) {
 8004436:	6803      	ldr	r3, [r0, #0]
 8004438:	4a28      	ldr	r2, [pc, #160]	; (80044dc <HAL_TIM_MspPostInit+0xa8>)
{
 800443a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443c:	2400      	movs	r4, #0
  if (timHandle->Instance == TIM1) {
 800443e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004440:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004444:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004448:	9408      	str	r4, [sp, #32]
  if (timHandle->Instance == TIM1) {
 800444a:	d004      	beq.n	8004456 <HAL_TIM_MspPostInit+0x22>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  } else if (timHandle->Instance == TIM8) {
 800444c:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <HAL_TIM_MspPostInit+0xac>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d02d      	beq.n	80044ae <HAL_TIM_MspPostInit+0x7a>

    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }
}
 8004452:	b00b      	add	sp, #44	; 0x2c
 8004454:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004456:	4b23      	ldr	r3, [pc, #140]	; (80044e4 <HAL_TIM_MspPostInit+0xb0>)
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800445e:	615a      	str	r2, [r3, #20]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8004466:	9201      	str	r2, [sp, #4]
 8004468:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004470:	615a      	str	r2, [r3, #20]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004478:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800447a:	2506      	movs	r5, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 800447e:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8004482:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8004488:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800448c:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800448e:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004490:	f002 fb42 	bl	8006b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004494:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004498:	4813      	ldr	r0, [pc, #76]	; (80044e8 <HAL_TIM_MspPostInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800449a:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a2:	e9cd 4406 	strd	r4, r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a6:	f002 fb37 	bl	8006b18 <HAL_GPIO_Init>
}
 80044aa:	b00b      	add	sp, #44	; 0x2c
 80044ac:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <HAL_TIM_MspPostInit+0xb0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044b0:	480e      	ldr	r0, [pc, #56]	; (80044ec <HAL_TIM_MspPostInit+0xb8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80044b8:	615a      	str	r2, [r3, #20]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80044c2:	f44f 54ee 	mov.w	r4, #7616	; 0x1dc0
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80044c6:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80044c8:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80044cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044d0:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80044d2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044d4:	f002 fb20 	bl	8006b18 <HAL_GPIO_Init>
}
 80044d8:	b00b      	add	sp, #44	; 0x2c
 80044da:	bd30      	pop	{r4, r5, pc}
 80044dc:	40012c00 	.word	0x40012c00
 80044e0:	40013400 	.word	0x40013400
 80044e4:	40021000 	.word	0x40021000
 80044e8:	48000400 	.word	0x48000400
 80044ec:	48000800 	.word	0x48000800

080044f0 <MX_TIM1_Init>:
{
 80044f0:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044f2:	2400      	movs	r4, #0
{
 80044f4:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044f6:	222c      	movs	r2, #44	; 0x2c
 80044f8:	4621      	mov	r1, r4
 80044fa:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044fc:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004500:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004504:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8004508:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800450c:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800450e:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004510:	f006 fe54 	bl	800b1bc <memset>
  htim1.Instance = TIM1;
 8004514:	4838      	ldr	r0, [pc, #224]	; (80045f8 <MX_TIM1_Init+0x108>)
  htim1.Init.Prescaler = 1;
 8004516:	4a39      	ldr	r2, [pc, #228]	; (80045fc <MX_TIM1_Init+0x10c>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004518:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 800451a:	2301      	movs	r3, #1
 800451c:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 1800;
 8004520:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8004524:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8004528:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800452c:	f003 fa52 	bl	80079d4 <HAL_TIM_PWM_Init>
 8004530:	2800      	cmp	r0, #0
 8004532:	d144      	bne.n	80045be <MX_TIM1_Init+0xce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004534:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004538:	2270      	movs	r2, #112	; 0x70
 800453a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800453e:	482e      	ldr	r0, [pc, #184]	; (80045f8 <MX_TIM1_Init+0x108>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004540:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004542:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004544:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8004546:	f003 fedf 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 800454a:	2800      	cmp	r0, #0
 800454c:	d14a      	bne.n	80045e4 <MX_TIM1_Init+0xf4>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800454e:	2000      	movs	r0, #0
 8004550:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 8004552:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004554:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004558:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800455a:	4827      	ldr	r0, [pc, #156]	; (80045f8 <MX_TIM1_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800455c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800455e:	a904      	add	r1, sp, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004560:	e9cd 2205 	strd	r2, r2, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004564:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004566:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004568:	f003 fcdc 	bl	8007f24 <HAL_TIM_PWM_ConfigChannel>
 800456c:	2800      	cmp	r0, #0
 800456e:	d136      	bne.n	80045de <MX_TIM1_Init+0xee>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004570:	4821      	ldr	r0, [pc, #132]	; (80045f8 <MX_TIM1_Init+0x108>)
 8004572:	2204      	movs	r2, #4
 8004574:	a904      	add	r1, sp, #16
 8004576:	f003 fcd5 	bl	8007f24 <HAL_TIM_PWM_ConfigChannel>
 800457a:	bb68      	cbnz	r0, 80045d8 <MX_TIM1_Init+0xe8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800457c:	481e      	ldr	r0, [pc, #120]	; (80045f8 <MX_TIM1_Init+0x108>)
 800457e:	2208      	movs	r2, #8
 8004580:	a904      	add	r1, sp, #16
 8004582:	f003 fccf 	bl	8007f24 <HAL_TIM_PWM_ConfigChannel>
 8004586:	bb20      	cbnz	r0, 80045d2 <MX_TIM1_Init+0xe2>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004588:	ed9f 7b19 	vldr	d7, [pc, #100]	; 80045f0 <MX_TIM1_Init+0x100>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800458c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.DeadTime = 10;
 800458e:	240a      	movs	r4, #10
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8004594:	4818      	ldr	r0, [pc, #96]	; (80045f8 <MX_TIM1_Init+0x108>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004596:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8004598:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800459a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 10;
 800459e:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045a2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80045a6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80045aa:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 80045ae:	f003 fef1 	bl	8008394 <HAL_TIMEx_ConfigBreakDeadTime>
 80045b2:	b938      	cbnz	r0, 80045c4 <MX_TIM1_Init+0xd4>
  HAL_TIM_MspPostInit(&htim1);
 80045b4:	4810      	ldr	r0, [pc, #64]	; (80045f8 <MX_TIM1_Init+0x108>)
 80045b6:	f7ff ff3d 	bl	8004434 <HAL_TIM_MspPostInit>
}
 80045ba:	b018      	add	sp, #96	; 0x60
 80045bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80045be:	f7ff fb65 	bl	8003c8c <Error_Handler>
 80045c2:	e7b7      	b.n	8004534 <MX_TIM1_Init+0x44>
    Error_Handler();
 80045c4:	f7ff fb62 	bl	8003c8c <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80045c8:	480b      	ldr	r0, [pc, #44]	; (80045f8 <MX_TIM1_Init+0x108>)
 80045ca:	f7ff ff33 	bl	8004434 <HAL_TIM_MspPostInit>
}
 80045ce:	b018      	add	sp, #96	; 0x60
 80045d0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80045d2:	f7ff fb5b 	bl	8003c8c <Error_Handler>
 80045d6:	e7d7      	b.n	8004588 <MX_TIM1_Init+0x98>
    Error_Handler();
 80045d8:	f7ff fb58 	bl	8003c8c <Error_Handler>
 80045dc:	e7ce      	b.n	800457c <MX_TIM1_Init+0x8c>
    Error_Handler();
 80045de:	f7ff fb55 	bl	8003c8c <Error_Handler>
 80045e2:	e7c5      	b.n	8004570 <MX_TIM1_Init+0x80>
    Error_Handler();
 80045e4:	f7ff fb52 	bl	8003c8c <Error_Handler>
 80045e8:	e7b1      	b.n	800454e <MX_TIM1_Init+0x5e>
 80045ea:	bf00      	nop
 80045ec:	f3af 8000 	nop.w
 80045f0:	02000000 	.word	0x02000000
 80045f4:	00000000 	.word	0x00000000
 80045f8:	200005d4 	.word	0x200005d4
 80045fc:	40012c00 	.word	0x40012c00

08004600 <MX_TIM8_Init>:
{
 8004600:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004602:	2400      	movs	r4, #0
{
 8004604:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004606:	222c      	movs	r2, #44	; 0x2c
 8004608:	4621      	mov	r1, r4
 800460a:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800460c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004610:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004614:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8004618:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800461c:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800461e:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004620:	f006 fdcc 	bl	800b1bc <memset>
  htim8.Instance = TIM8;
 8004624:	4838      	ldr	r0, [pc, #224]	; (8004708 <MX_TIM8_Init+0x108>)
  htim8.Init.Prescaler = 1;
 8004626:	4a39      	ldr	r2, [pc, #228]	; (800470c <MX_TIM8_Init+0x10c>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004628:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 800462a:	2301      	movs	r3, #1
 800462c:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 1800;
 8004630:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8004634:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 8004638:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800463c:	f003 f9ca 	bl	80079d4 <HAL_TIM_PWM_Init>
 8004640:	2800      	cmp	r0, #0
 8004642:	d145      	bne.n	80046d0 <MX_TIM8_Init+0xd0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8004644:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004648:	2270      	movs	r2, #112	; 0x70
 800464a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 800464e:	482e      	ldr	r0, [pc, #184]	; (8004708 <MX_TIM8_Init+0x108>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004650:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8004652:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004654:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8004656:	f003 fe57 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 800465a:	2800      	cmp	r0, #0
 800465c:	d14b      	bne.n	80046f6 <MX_TIM8_Init+0xf6>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800465e:	2000      	movs	r0, #0
 8004660:	2100      	movs	r1, #0
  sConfigOC.Pulse = 0;
 8004662:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004664:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004668:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800466a:	4827      	ldr	r0, [pc, #156]	; (8004708 <MX_TIM8_Init+0x108>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800466c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800466e:	a904      	add	r1, sp, #16
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004670:	e9cd 2205 	strd	r2, r2, [sp, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004674:	9207      	str	r2, [sp, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004676:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8004678:	f003 fc54 	bl	8007f24 <HAL_TIM_PWM_ConfigChannel>
 800467c:	2800      	cmp	r0, #0
 800467e:	d137      	bne.n	80046f0 <MX_TIM8_Init+0xf0>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004680:	4821      	ldr	r0, [pc, #132]	; (8004708 <MX_TIM8_Init+0x108>)
 8004682:	2204      	movs	r2, #4
 8004684:	a904      	add	r1, sp, #16
 8004686:	f003 fc4d 	bl	8007f24 <HAL_TIM_PWM_ConfigChannel>
 800468a:	bb70      	cbnz	r0, 80046ea <MX_TIM8_Init+0xea>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800468c:	481e      	ldr	r0, [pc, #120]	; (8004708 <MX_TIM8_Init+0x108>)
 800468e:	2208      	movs	r2, #8
 8004690:	a904      	add	r1, sp, #16
 8004692:	f003 fc47 	bl	8007f24 <HAL_TIM_PWM_ConfigChannel>
 8004696:	bb28      	cbnz	r0, 80046e4 <MX_TIM8_Init+0xe4>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004698:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8004700 <MX_TIM8_Init+0x100>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800469c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800469e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046a2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 10;
 80046a6:	240a      	movs	r4, #10
  sBreakDeadTimeConfig.BreakFilter = 4;
 80046a8:	2204      	movs	r2, #4
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 80046aa:	4817      	ldr	r0, [pc, #92]	; (8004708 <MX_TIM8_Init+0x108>)
  sBreakDeadTimeConfig.BreakFilter = 4;
 80046ac:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 80046ae:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046b0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  sBreakDeadTimeConfig.DeadTime = 10;
 80046b4:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80046b8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80046bc:	9313      	str	r3, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046be:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 80046c0:	f003 fe68 	bl	8008394 <HAL_TIMEx_ConfigBreakDeadTime>
 80046c4:	b938      	cbnz	r0, 80046d6 <MX_TIM8_Init+0xd6>
  HAL_TIM_MspPostInit(&htim8);
 80046c6:	4810      	ldr	r0, [pc, #64]	; (8004708 <MX_TIM8_Init+0x108>)
 80046c8:	f7ff feb4 	bl	8004434 <HAL_TIM_MspPostInit>
}
 80046cc:	b018      	add	sp, #96	; 0x60
 80046ce:	bd10      	pop	{r4, pc}
    Error_Handler();
 80046d0:	f7ff fadc 	bl	8003c8c <Error_Handler>
 80046d4:	e7b6      	b.n	8004644 <MX_TIM8_Init+0x44>
    Error_Handler();
 80046d6:	f7ff fad9 	bl	8003c8c <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 80046da:	480b      	ldr	r0, [pc, #44]	; (8004708 <MX_TIM8_Init+0x108>)
 80046dc:	f7ff feaa 	bl	8004434 <HAL_TIM_MspPostInit>
}
 80046e0:	b018      	add	sp, #96	; 0x60
 80046e2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80046e4:	f7ff fad2 	bl	8003c8c <Error_Handler>
 80046e8:	e7d6      	b.n	8004698 <MX_TIM8_Init+0x98>
    Error_Handler();
 80046ea:	f7ff facf 	bl	8003c8c <Error_Handler>
 80046ee:	e7cd      	b.n	800468c <MX_TIM8_Init+0x8c>
    Error_Handler();
 80046f0:	f7ff facc 	bl	8003c8c <Error_Handler>
 80046f4:	e7c4      	b.n	8004680 <MX_TIM8_Init+0x80>
    Error_Handler();
 80046f6:	f7ff fac9 	bl	8003c8c <Error_Handler>
 80046fa:	e7b0      	b.n	800465e <MX_TIM8_Init+0x5e>
 80046fc:	f3af 8000 	nop.w
 8004700:	02000000 	.word	0x02000000
 8004704:	00000004 	.word	0x00000004
 8004708:	20000620 	.word	0x20000620
 800470c:	40013400 	.word	0x40013400

08004710 <initFirstSin>:
}

/* USER CODE BEGIN 1 */
float rad_to_sin_cnv_array[1024] = {0};
inline void initFirstSin(void)
{
 8004710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < 1024; i++) {
    float temp_rad = (float)i / 256 * M_PI * 2;
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8004712:	4d19      	ldr	r5, [pc, #100]	; (8004778 <initFirstSin+0x68>)
 8004714:	2300      	movs	r3, #0
    float temp_rad = (float)i / 256 * M_PI * 2;
 8004716:	a716      	add	r7, pc, #88	; (adr r7, 8004770 <initFirstSin+0x60>)
 8004718:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 800471c:	ed2d 8b02 	vpush	{d8}
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8004720:	f845 3b04 	str.w	r3, [r5], #4
    float temp_rad = (float)i / 256 * M_PI * 2;
 8004724:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800477c <initFirstSin+0x6c>
  for (int i = 0; i < 1024; i++) {
 8004728:	2401      	movs	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 800472a:	ee07 4a90 	vmov	s15, r4
 800472e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 1024; i++) {
 8004732:	3401      	adds	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8004734:	ee67 7a88 	vmul.f32	s15, s15, s16
 8004738:	ee17 0a90 	vmov	r0, s15
 800473c:	f7fb ff04 	bl	8000548 <__aeabi_f2d>
 8004740:	4632      	mov	r2, r6
 8004742:	463b      	mov	r3, r7
 8004744:	f7fb ff58 	bl	80005f8 <__aeabi_dmul>
 8004748:	f7fc fa4e 	bl	8000be8 <__aeabi_d2f>
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 800474c:	f7fb fefc 	bl	8000548 <__aeabi_f2d>
 8004750:	ec41 0b10 	vmov	d0, r0, r1
 8004754:	f004 fd0c 	bl	8009170 <sin>
 8004758:	ec51 0b10 	vmov	r0, r1, d0
 800475c:	f7fc fa44 	bl	8000be8 <__aeabi_d2f>
  for (int i = 0; i < 1024; i++) {
 8004760:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8004764:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < 1024; i++) {
 8004768:	d1df      	bne.n	800472a <initFirstSin+0x1a>
    // printf("rad %4.3f sin %4.3f\n",temp_rad,rad_to_sin_cnv_array[i]);
    // HAL_Delay(1);
  }
}
 800476a:	ecbd 8b02 	vpop	{d8}
 800476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004770:	54442d18 	.word	0x54442d18
 8004774:	401921fb 	.word	0x401921fb
 8004778:	2000066c 	.word	0x2000066c
 800477c:	3b800000 	.word	0x3b800000

08004780 <setOutputRadianMotor>:
#define X2_PER_R3 (1.154)

inline void setOutputRadianMotor(bool motor,float out_rad, float output_voltage, float battery_voltage, float output_voltage_limit){
  int voltage_propotional_cnt;

  if (battery_voltage < BATTERY_VOLTAGE_BOTTOM) {
 8004780:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8004784:	eef0 0ae0 	vabs.f32	s1, s1
 8004788:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800478c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    battery_voltage = BATTERY_VOLTAGE_BOTTOM;
  }
  if (output_voltage < 0) {
    output_voltage = -output_voltage;
  }
  if (output_voltage > output_voltage_limit) {
 8004790:	eef4 1ae0 	vcmpe.f32	s3, s1
 8004794:	bfb8      	it	lt
 8004796:	eeb0 1a67 	vmovlt.f32	s2, s15
 800479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    output_voltage = 0;
 800479e:	bf48      	it	mi
 80047a0:	eddf 0a31 	vldrmi	s1, [pc, #196]	; 8004868 <setOutputRadianMotor+0xe8>
  }
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 80047a4:	eec0 7a81 	vdiv.f32	s15, s1, s2
inline void setOutputRadianMotor(bool motor,float out_rad, float output_voltage, float battery_voltage, float output_voltage_limit){
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4604      	mov	r4, r0
 80047ac:	ed2d 8b02 	vpush	{d8}
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 80047b0:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 800486c <setOutputRadianMotor+0xec>
 80047b4:	ee67 7a88 	vmul.f32	s15, s15, s16
inline void setOutputRadianMotor(bool motor,float out_rad, float output_voltage, float battery_voltage, float output_voltage_limit){
 80047b8:	ee10 5a10 	vmov	r5, s0
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 80047bc:	ee17 0a90 	vmov	r0, s15
 80047c0:	f7fb fec2 	bl	8000548 <__aeabi_f2d>
 80047c4:	a322      	add	r3, pc, #136	; (adr r3, 8004850 <setOutputRadianMotor+0xd0>)
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f7fb ff15 	bl	80005f8 <__aeabi_dmul>
 80047ce:	f7fc f9c3 	bl	8000b58 <__aeabi_d2iz>
 80047d2:	4603      	mov	r3, r0

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 80047d4:	4628      	mov	r0, r5
  voltage_propotional_cnt = output_voltage / battery_voltage * TIM_PWM_CENTER * X2_PER_R3;
 80047d6:	ee08 3a90 	vmov	s17, r3
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 80047da:	f7fb feb5 	bl	8000548 <__aeabi_f2d>
 80047de:	a31e      	add	r3, pc, #120	; (adr r3, 8004858 <setOutputRadianMotor+0xd8>)
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	f7fb fd52 	bl	800028c <__adddf3>
 80047e8:	a31d      	add	r3, pc, #116	; (adr r3, 8004860 <setOutputRadianMotor+0xe0>)
 80047ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ee:	f7fb ff03 	bl	80005f8 <__aeabi_dmul>
 80047f2:	f7fc f9d9 	bl	8000ba8 <__aeabi_d2uiz>
  if (motor == 0) {
    htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80047f6:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <setOutputRadianMotor+0xf0>)
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 80047f8:	b2c3      	uxtb	r3, r0
    htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80047fa:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 80047fe:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8004802:	edd0 7a00 	vldr	s15, [r0]
    htim1.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004806:	ed90 6a55 	vldr	s12, [r0, #340]	; 0x154
    htim1.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 800480a:	edd0 6aaa 	vldr	s13, [r0, #680]	; 0x2a8
    htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 800480e:	eeb0 7a48 	vmov.f32	s14, s16
 8004812:	eea8 7aa7 	vfma.f32	s14, s17, s15
    htim1.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004816:	eef0 7a48 	vmov.f32	s15, s16
 800481a:	eee8 7a86 	vfma.f32	s15, s17, s12
    htim1.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 800481e:	eea8 8aa6 	vfma.f32	s16, s17, s13
  if (motor == 0) {
 8004822:	b984      	cbnz	r4, 8004846 <setOutputRadianMotor+0xc6>
    htim1.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <setOutputRadianMotor+0xf4>)
  } else {
    htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004826:	681b      	ldr	r3, [r3, #0]
    htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
    htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8004828:	eebc 8ac8 	vcvt.u32.f32	s16, s16
    htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 800482c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004834:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
    htim8.Instance->CCR2 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8004838:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 800483c:	ed83 8a0f 	vstr	s16, [r3, #60]	; 0x3c
  }
}
 8004840:	ecbd 8b02 	vpop	{d8}
 8004844:	bd38      	pop	{r3, r4, r5, pc}
    htim8.Instance->CCR1 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <setOutputRadianMotor+0xf8>)
 8004848:	e7ed      	b.n	8004826 <setOutputRadianMotor+0xa6>
 800484a:	bf00      	nop
 800484c:	f3af 8000 	nop.w
 8004850:	b4395810 	.word	0xb4395810
 8004854:	3ff276c8 	.word	0x3ff276c8
 8004858:	54442d18 	.word	0x54442d18
 800485c:	402921fb 	.word	0x402921fb
 8004860:	3d5bfeba 	.word	0x3d5bfeba
 8004864:	40444ad1 	.word	0x40444ad1
 8004868:	00000000 	.word	0x00000000
 800486c:	44610000 	.word	0x44610000
 8004870:	2000066c 	.word	0x2000066c
 8004874:	200005d4 	.word	0x200005d4
 8004878:	20000620 	.word	0x20000620

0800487c <setPwmAll>:
  htim8.Instance->CCR3 = TIM_PWM_CENTER + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
}

void setPwmAll(uint32_t pwm_cnt)
{
  htim8.Instance->CCR1 = pwm_cnt;
 800487c:	4a05      	ldr	r2, [pc, #20]	; (8004894 <setPwmAll+0x18>)
  htim8.Instance->CCR2 = pwm_cnt;
  htim8.Instance->CCR3 = pwm_cnt;
  htim1.Instance->CCR1 = pwm_cnt;
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <setPwmAll+0x1c>)
  htim8.Instance->CCR1 = pwm_cnt;
 8004880:	6812      	ldr	r2, [r2, #0]
  htim1.Instance->CCR1 = pwm_cnt;
 8004882:	681b      	ldr	r3, [r3, #0]
  htim8.Instance->CCR1 = pwm_cnt;
 8004884:	6350      	str	r0, [r2, #52]	; 0x34
  htim8.Instance->CCR2 = pwm_cnt;
 8004886:	6390      	str	r0, [r2, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt;
 8004888:	63d0      	str	r0, [r2, #60]	; 0x3c
  htim1.Instance->CCR1 = pwm_cnt;
 800488a:	6358      	str	r0, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = pwm_cnt;
 800488c:	6398      	str	r0, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt;
 800488e:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	20000620 	.word	0x20000620
 8004898:	200005d4 	.word	0x200005d4

0800489c <forceStopAllPwmOutputAndTimer>:

void forceStopAllPwmOutputAndTimer(void)
{
 800489c:	b538      	push	{r3, r4, r5, lr}
  htim8.Instance->CCR1 = pwm_cnt;
 800489e:	4d26      	ldr	r5, [pc, #152]	; (8004938 <forceStopAllPwmOutputAndTimer+0x9c>)
  htim1.Instance->CCR1 = pwm_cnt;
 80048a0:	4c26      	ldr	r4, [pc, #152]	; (800493c <forceStopAllPwmOutputAndTimer+0xa0>)
  htim8.Instance->CCR1 = pwm_cnt;
 80048a2:	6829      	ldr	r1, [r5, #0]
  htim1.Instance->CCR1 = pwm_cnt;
 80048a4:	6822      	ldr	r2, [r4, #0]
  htim8.Instance->CCR1 = pwm_cnt;
 80048a6:	f44f 7361 	mov.w	r3, #900	; 0x384
 80048aa:	634b      	str	r3, [r1, #52]	; 0x34
  setPwmAll(TIM_PWM_CENTER);

  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80048ac:	4620      	mov	r0, r4
  htim8.Instance->CCR2 = pwm_cnt;
 80048ae:	638b      	str	r3, [r1, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt;
 80048b0:	63cb      	str	r3, [r1, #60]	; 0x3c
  htim1.Instance->CCR1 = pwm_cnt;
 80048b2:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80048b4:	2100      	movs	r1, #0
  htim1.Instance->CCR2 = pwm_cnt;
 80048b6:	6393      	str	r3, [r2, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt;
 80048b8:	63d3      	str	r3, [r2, #60]	; 0x3c
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80048ba:	f003 f9b9 	bl	8007c30 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80048be:	2104      	movs	r1, #4
 80048c0:	4620      	mov	r0, r4
 80048c2:	f003 f9b5 	bl	8007c30 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80048c6:	2108      	movs	r1, #8
 80048c8:	4620      	mov	r0, r4
 80048ca:	f003 f9b1 	bl	8007c30 <HAL_TIM_PWM_Stop>

  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80048ce:	2100      	movs	r1, #0
 80048d0:	4628      	mov	r0, r5
 80048d2:	f003 f9ad 	bl	8007c30 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 80048d6:	2104      	movs	r1, #4
 80048d8:	4628      	mov	r0, r5
 80048da:	f003 f9a9 	bl	8007c30 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 80048de:	2108      	movs	r1, #8
 80048e0:	4628      	mov	r0, r5
 80048e2:	f003 f9a5 	bl	8007c30 <HAL_TIM_PWM_Stop>

  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80048e6:	2100      	movs	r1, #0
 80048e8:	4620      	mov	r0, r4
 80048ea:	f003 fcc7 	bl	800827c <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80048ee:	2104      	movs	r1, #4
 80048f0:	4620      	mov	r0, r4
 80048f2:	f003 fcc3 	bl	800827c <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 80048f6:	2108      	movs	r1, #8
 80048f8:	4620      	mov	r0, r4
 80048fa:	f003 fcbf 	bl	800827c <HAL_TIMEx_PWMN_Stop>

  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80048fe:	2100      	movs	r1, #0
 8004900:	4628      	mov	r0, r5
 8004902:	f003 fcbb 	bl	800827c <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_2);
 8004906:	2104      	movs	r1, #4
 8004908:	4628      	mov	r0, r5
 800490a:	f003 fcb7 	bl	800827c <HAL_TIMEx_PWMN_Stop>
  HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_3);
 800490e:	2108      	movs	r1, #8
 8004910:	4628      	mov	r0, r5
 8004912:	f003 fcb3 	bl	800827c <HAL_TIMEx_PWMN_Stop>

  HAL_TIM_Base_Stop_IT(&htim1);
 8004916:	4620      	mov	r0, r4
 8004918:	f003 f844 	bl	80079a4 <HAL_TIM_Base_Stop_IT>
  HAL_TIM_Base_Stop_IT(&htim8);
 800491c:	4628      	mov	r0, r5
 800491e:	f003 f841 	bl	80079a4 <HAL_TIM_Base_Stop_IT>

  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 8004922:	6829      	ldr	r1, [r5, #0]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 8004924:	6822      	ldr	r2, [r4, #0]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 8004926:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8004928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800492c:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 800492e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004934:	6453      	str	r3, [r2, #68]	; 0x44
}
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	20000620 	.word	0x20000620
 800493c:	200005d4 	.word	0x200005d4

08004940 <setPwmOutPutFreeWheel>:
  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
}

void setPwmOutPutFreeWheel(void)
{
 8004940:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004942:	4d23      	ldr	r5, [pc, #140]	; (80049d0 <setPwmOutPutFreeWheel+0x90>)
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);

  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004944:	4c23      	ldr	r4, [pc, #140]	; (80049d4 <setPwmOutPutFreeWheel+0x94>)
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004946:	6828      	ldr	r0, [r5, #0]
 8004948:	2200      	movs	r2, #0
 800494a:	4611      	mov	r1, r2
 800494c:	f003 fc24 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004950:	6828      	ldr	r0, [r5, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	2104      	movs	r1, #4
 8004956:	f003 fc1f 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 800495a:	6828      	ldr	r0, [r5, #0]
 800495c:	2200      	movs	r2, #0
 800495e:	2108      	movs	r1, #8
 8004960:	f003 fc1a 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004964:	2200      	movs	r2, #0
 8004966:	4611      	mov	r1, r2
 8004968:	6820      	ldr	r0, [r4, #0]
 800496a:	f003 fc15 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800496e:	6820      	ldr	r0, [r4, #0]
 8004970:	2200      	movs	r2, #0
 8004972:	2104      	movs	r1, #4
 8004974:	f003 fc10 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_DISABLE);
 8004978:	2200      	movs	r2, #0
 800497a:	2108      	movs	r1, #8
 800497c:	6820      	ldr	r0, [r4, #0]
 800497e:	f003 fc0b 	bl	8008198 <TIM_CCxChannelCmd>

  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCxN_DISABLE);
 8004982:	682a      	ldr	r2, [r5, #0]
  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCxN_DISABLE);
  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_DISABLE);

  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCxN_DISABLE);
 8004984:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~tmp;
 8004986:	6a11      	ldr	r1, [r2, #32]
 8004988:	f021 0104 	bic.w	r1, r1, #4
 800498c:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800498e:	6a11      	ldr	r1, [r2, #32]
 8004990:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004992:	6a11      	ldr	r1, [r2, #32]
 8004994:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004998:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800499a:	6a11      	ldr	r1, [r2, #32]
 800499c:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 800499e:	6a11      	ldr	r1, [r2, #32]
 80049a0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80049a4:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049a6:	6a11      	ldr	r1, [r2, #32]
 80049a8:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 80049aa:	6a1a      	ldr	r2, [r3, #32]
 80049ac:	f022 0204 	bic.w	r2, r2, #4
 80049b0:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049bc:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c8:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	621a      	str	r2, [r3, #32]
  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCxN_DISABLE);
  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCxN_DISABLE);
}
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	200005d4 	.word	0x200005d4
 80049d4:	20000620 	.word	0x20000620

080049d8 <resumePwmOutput>:

void resumePwmOutput(void)
{
 80049d8:	b538      	push	{r3, r4, r5, lr}
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049da:	4d29      	ldr	r5, [pc, #164]	; (8004a80 <resumePwmOutput+0xa8>)
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);

  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049dc:	4c29      	ldr	r4, [pc, #164]	; (8004a84 <resumePwmOutput+0xac>)
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049de:	6828      	ldr	r0, [r5, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	2100      	movs	r1, #0
 80049e4:	f003 fbd8 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049e8:	6828      	ldr	r0, [r5, #0]
 80049ea:	2201      	movs	r2, #1
 80049ec:	2104      	movs	r1, #4
 80049ee:	f003 fbd3 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 80049f2:	6828      	ldr	r0, [r5, #0]
 80049f4:	2201      	movs	r2, #1
 80049f6:	2108      	movs	r1, #8
 80049f8:	f003 fbce 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	2201      	movs	r2, #1
 8004a00:	2100      	movs	r1, #0
 8004a02:	f003 fbc9 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	2104      	movs	r1, #4
 8004a0c:	f003 fbc4 	bl	8008198 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);
 8004a10:	2201      	movs	r2, #1
 8004a12:	2108      	movs	r1, #8
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	f003 fbbf 	bl	8008198 <TIM_CCxChannelCmd>

  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_1, TIM_CCxN_ENABLE);
 8004a1a:	682a      	ldr	r2, [r5, #0]
  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
  TIM_CCxNChannelCmd(htim1.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);

  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_1, TIM_CCxN_ENABLE);
 8004a1c:	6823      	ldr	r3, [r4, #0]
  TIMx->CCER &= ~tmp;
 8004a1e:	6a11      	ldr	r1, [r2, #32]
 8004a20:	f021 0104 	bic.w	r1, r1, #4
 8004a24:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a26:	6a11      	ldr	r1, [r2, #32]
 8004a28:	f041 0104 	orr.w	r1, r1, #4
 8004a2c:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004a2e:	6a11      	ldr	r1, [r2, #32]
 8004a30:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004a34:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a36:	6a11      	ldr	r1, [r2, #32]
 8004a38:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8004a3c:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004a3e:	6a11      	ldr	r1, [r2, #32]
 8004a40:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004a44:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a46:	6a11      	ldr	r1, [r2, #32]
 8004a48:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004a4c:	6211      	str	r1, [r2, #32]
  TIMx->CCER &= ~tmp;
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	f022 0204 	bic.w	r2, r2, #4
 8004a54:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	f042 0204 	orr.w	r2, r2, #4
 8004a5c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8004a5e:	6a1a      	ldr	r2, [r3, #32]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a66:	6a1a      	ldr	r2, [r3, #32]
 8004a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a6c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a74:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a76:	6a1a      	ldr	r2, [r3, #32]
 8004a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a7c:	621a      	str	r2, [r3, #32]
  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_2, TIM_CCxN_ENABLE);
  TIM_CCxNChannelCmd(htim8.Instance, TIM_CHANNEL_3, TIM_CCxN_ENABLE);
}
 8004a7e:	bd38      	pop	{r3, r4, r5, pc}
 8004a80:	200005d4 	.word	0x200005d4
 8004a84:	20000620 	.word	0x20000620

08004a88 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a88:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a8a:	480b      	ldr	r0, [pc, #44]	; (8004ab8 <MX_USART1_UART_Init+0x30>)
 8004a8c:	4c0b      	ldr	r4, [pc, #44]	; (8004abc <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 8004a8e:	490c      	ldr	r1, [pc, #48]	; (8004ac0 <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a90:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a92:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 8004a94:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a98:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a9c:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004aa0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004aa4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004aa8:	f004 f93a 	bl	8008d20 <HAL_UART_Init>
 8004aac:	b900      	cbnz	r0, 8004ab0 <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004aae:	bd10      	pop	{r4, pc}
 8004ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004ab4:	f7ff b8ea 	b.w	8003c8c <Error_Handler>
 8004ab8:	200019d4 	.word	0x200019d4
 8004abc:	40013800 	.word	0x40013800
 8004ac0:	001e8480 	.word	0x001e8480

08004ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8004ac8:	4b2e      	ldr	r3, [pc, #184]	; (8004b84 <HAL_UART_MspInit+0xc0>)
 8004aca:	6802      	ldr	r2, [r0, #0]
{
 8004acc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ace:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8004ad0:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ad2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004ad6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8004ada:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8004adc:	d002      	beq.n	8004ae4 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004ade:	b008      	add	sp, #32
 8004ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ae4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ae8:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8004aec:	699a      	ldr	r2, [r3, #24]
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004aee:	4e26      	ldr	r6, [pc, #152]	; (8004b88 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004af0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af4:	619a      	str	r2, [r3, #24]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004afc:	9200      	str	r2, [sp, #0]
 8004afe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004b06:	615a      	str	r2, [r3, #20]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b0e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004b10:	2210      	movs	r2, #16
 8004b12:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b14:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b16:	a902      	add	r1, sp, #8
 8004b18:	4605      	mov	r5, r0
 8004b1a:	481c      	ldr	r0, [pc, #112]	; (8004b8c <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004b1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b20:	e9cd 8705 	strd	r8, r7, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b24:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b26:	f001 fff7 	bl	8006b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b32:	4816      	ldr	r0, [pc, #88]	; (8004b8c <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b34:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b38:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b3a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b3c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b3e:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b40:	f001 ffea 	bl	8006b18 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b44:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <HAL_UART_MspInit+0xcc>)
 8004b46:	2310      	movs	r3, #16
 8004b48:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004b4c:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b4e:	2380      	movs	r3, #128	; 0x80
 8004b50:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b54:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b58:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004b5c:	f001 fd34 	bl	80065c8 <HAL_DMA_Init>
 8004b60:	b960      	cbnz	r0, 8004b7c <HAL_UART_MspInit+0xb8>
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8004b62:	2200      	movs	r2, #0
 8004b64:	210f      	movs	r1, #15
 8004b66:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8004b68:	672e      	str	r6, [r5, #112]	; 0x70
 8004b6a:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8004b6c:	f001 fcb4 	bl	80064d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b70:	2025      	movs	r0, #37	; 0x25
 8004b72:	f001 fcef 	bl	8006554 <HAL_NVIC_EnableIRQ>
}
 8004b76:	b008      	add	sp, #32
 8004b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8004b7c:	f7ff f886 	bl	8003c8c <Error_Handler>
 8004b80:	e7ef      	b.n	8004b62 <HAL_UART_MspInit+0x9e>
 8004b82:	bf00      	nop
 8004b84:	40013800 	.word	0x40013800
 8004b88:	20001990 	.word	0x20001990
 8004b8c:	48000800 	.word	0x48000800
 8004b90:	40020044 	.word	0x40020044

08004b94 <HAL_UART_TxCpltCallback>:
volatile bool is_in_printf_func = false;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

  if (sending_first_buf)
 8004b94:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <HAL_UART_TxCpltCallback+0x6c>)
{
 8004b96:	b538      	push	{r3, r4, r5, lr}
  if (sending_first_buf)
 8004b98:	7813      	ldrb	r3, [r2, #0]
 8004b9a:	b15b      	cbz	r3, 8004bb4 <HAL_UART_TxCpltCallback+0x20>
  {                            // FIRST buf complete
    sending_first_buf = false; // complete!
 8004b9c:	2300      	movs	r3, #0

    if (second_buf_len > 0 && is_in_printf_func == false)
 8004b9e:	4c19      	ldr	r4, [pc, #100]	; (8004c04 <HAL_UART_TxCpltCallback+0x70>)
    sending_first_buf = false; // complete!
 8004ba0:	7013      	strb	r3, [r2, #0]
    if (second_buf_len > 0 && is_in_printf_func == false)
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	dd04      	ble.n	8004bb2 <HAL_UART_TxCpltCallback+0x1e>
 8004ba8:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <HAL_UART_TxCpltCallback+0x74>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004bb0:	b1db      	cbz	r3, 8004bea <HAL_UART_TxCpltCallback+0x56>
      sending_first_buf = true;
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
      first_buf_len = 0;
    }
  }
}
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
  else if (sending_second_buf)
 8004bb4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004bb8:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <HAL_UART_TxCpltCallback+0x78>)
 8004bba:	7818      	ldrb	r0, [r3, #0]
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d0f8      	beq.n	8004bb2 <HAL_UART_TxCpltCallback+0x1e>
    if (first_buf_len > 0 && is_in_printf_func == false)
 8004bc0:	4c13      	ldr	r4, [pc, #76]	; (8004c10 <HAL_UART_TxCpltCallback+0x7c>)
    sending_second_buf = false; // complete!
 8004bc2:	7019      	strb	r1, [r3, #0]
    if (first_buf_len > 0 && is_in_printf_func == false)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	ddf3      	ble.n	8004bb2 <HAL_UART_TxCpltCallback+0x1e>
 8004bca:	4b0f      	ldr	r3, [pc, #60]	; (8004c08 <HAL_UART_TxCpltCallback+0x74>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ed      	bne.n	8004bb2 <HAL_UART_TxCpltCallback+0x1e>
      sending_first_buf = true;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	7013      	strb	r3, [r2, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len);
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	490d      	ldr	r1, [pc, #52]	; (8004c14 <HAL_UART_TxCpltCallback+0x80>)
 8004bde:	480e      	ldr	r0, [pc, #56]	; (8004c18 <HAL_UART_TxCpltCallback+0x84>)
 8004be0:	b292      	uxth	r2, r2
 8004be2:	f003 fc23 	bl	800842c <HAL_UART_Transmit_DMA>
      first_buf_len = 0;
 8004be6:	6025      	str	r5, [r4, #0]
}
 8004be8:	bd38      	pop	{r3, r4, r5, pc}
      sending_second_buf = true;
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_UART_TxCpltCallback+0x78>)
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 8004bec:	490b      	ldr	r1, [pc, #44]	; (8004c1c <HAL_UART_TxCpltCallback+0x88>)
 8004bee:	480a      	ldr	r0, [pc, #40]	; (8004c18 <HAL_UART_TxCpltCallback+0x84>)
      sending_second_buf = true;
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len);
 8004bf4:	6822      	ldr	r2, [r4, #0]
 8004bf6:	b292      	uxth	r2, r2
 8004bf8:	f003 fc18 	bl	800842c <HAL_UART_Transmit_DMA>
      second_buf_len = 0;
 8004bfc:	6025      	str	r5, [r4, #0]
}
 8004bfe:	bd38      	pop	{r3, r4, r5, pc}
 8004c00:	20001d84 	.word	0x20001d84
 8004c04:	20001d80 	.word	0x20001d80
 8004c08:	20001a5c 	.word	0x20001a5c
 8004c0c:	20001d85 	.word	0x20001d85
 8004c10:	2000198c 	.word	0x2000198c
 8004c14:	2000166c 	.word	0x2000166c
 8004c18:	200019d4 	.word	0x200019d4
 8004c1c:	20001a60 	.word	0x20001a60

08004c20 <p>:

void p(const char *format, ...)
{
 8004c20:	b40f      	push	{r0, r1, r2, r3}
 8004c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  va_list ap;
  va_start(ap, format);
  is_in_printf_func = true;
 8004c26:	4c35      	ldr	r4, [pc, #212]	; (8004cfc <p+0xdc>)

  if (sending_first_buf)
 8004c28:	4d35      	ldr	r5, [pc, #212]	; (8004d00 <p+0xe0>)
{
 8004c2a:	b082      	sub	sp, #8
  is_in_printf_func = true;
 8004c2c:	2601      	movs	r6, #1
{
 8004c2e:	aa08      	add	r2, sp, #32
  is_in_printf_func = true;
 8004c30:	7026      	strb	r6, [r4, #0]
  if (sending_first_buf)
 8004c32:	782b      	ldrb	r3, [r5, #0]
{
 8004c34:	f852 1b04 	ldr.w	r1, [r2], #4
  va_start(ap, format);
 8004c38:	9201      	str	r2, [sp, #4]
  if (sending_first_buf)
 8004c3a:	b30b      	cbz	r3, 8004c80 <p+0x60>
  {
    if (second_buf_len > UART_TEMP_BUF_SIZE / 2)
 8004c3c:	4e31      	ldr	r6, [pc, #196]	; (8004d04 <p+0xe4>)
 8004c3e:	6833      	ldr	r3, [r6, #0]
 8004c40:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004c44:	dd06      	ble.n	8004c54 <p+0x34>
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
    first_buf_len = (int)strlen(first_buf);
    first_buf_len = 0;
    second_buf_len = 0;
  }
  is_in_printf_func = false;
 8004c46:	2300      	movs	r3, #0
 8004c48:	7023      	strb	r3, [r4, #0]
  return;
}
 8004c4a:	b002      	add	sp, #8
 8004c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c50:	b004      	add	sp, #16
 8004c52:	4770      	bx	lr
    second_buf_len += vsprintf(second_buf + second_buf_len, format, ap);
 8004c54:	6830      	ldr	r0, [r6, #0]
 8004c56:	4f2c      	ldr	r7, [pc, #176]	; (8004d08 <p+0xe8>)
 8004c58:	4438      	add	r0, r7
 8004c5a:	f006 faa5 	bl	800b1a8 <vsiprintf>
 8004c5e:	6833      	ldr	r3, [r6, #0]
 8004c60:	4418      	add	r0, r3
 8004c62:	6030      	str	r0, [r6, #0]
    if (sending_first_buf == false)
 8004c64:	782b      	ldrb	r3, [r5, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ed      	bne.n	8004c46 <p+0x26>
      second_buf_len = (int)strlen(second_buf);
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	f7fb fb00 	bl	8000270 <strlen>
 8004c70:	6030      	str	r0, [r6, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)second_buf, second_buf_len); // 2ms
 8004c72:	6832      	ldr	r2, [r6, #0]
 8004c74:	4825      	ldr	r0, [pc, #148]	; (8004d0c <p+0xec>)
 8004c76:	4639      	mov	r1, r7
 8004c78:	b292      	uxth	r2, r2
 8004c7a:	f003 fbd7 	bl	800842c <HAL_UART_Transmit_DMA>
 8004c7e:	e7e2      	b.n	8004c46 <p+0x26>
  else if (sending_second_buf)
 8004c80:	4f23      	ldr	r7, [pc, #140]	; (8004d10 <p+0xf0>)
 8004c82:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004c86:	783b      	ldrb	r3, [r7, #0]
 8004c88:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8004c8c:	b303      	cbz	r3, 8004cd0 <p+0xb0>
    if (first_buf_len > UART_TEMP_BUF_SIZE / 2)
 8004c8e:	4d21      	ldr	r5, [pc, #132]	; (8004d14 <p+0xf4>)
 8004c90:	682b      	ldr	r3, [r5, #0]
 8004c92:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004c96:	dd05      	ble.n	8004ca4 <p+0x84>
      is_in_printf_func = false;
 8004c98:	7020      	strb	r0, [r4, #0]
}
 8004c9a:	b002      	add	sp, #8
 8004c9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	b004      	add	sp, #16
 8004ca2:	4770      	bx	lr
    first_buf_len += vsprintf(first_buf + first_buf_len, format, ap);
 8004ca4:	6828      	ldr	r0, [r5, #0]
 8004ca6:	4e1c      	ldr	r6, [pc, #112]	; (8004d18 <p+0xf8>)
 8004ca8:	4430      	add	r0, r6
 8004caa:	f006 fa7d 	bl	800b1a8 <vsiprintf>
 8004cae:	682b      	ldr	r3, [r5, #0]
 8004cb0:	4418      	add	r0, r3
 8004cb2:	6028      	str	r0, [r5, #0]
    if (sending_second_buf == false)
 8004cb4:	783b      	ldrb	r3, [r7, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1c5      	bne.n	8004c46 <p+0x26>
      first_buf_len = (int)strlen(first_buf);
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f7fb fad8 	bl	8000270 <strlen>
 8004cc0:	6028      	str	r0, [r5, #0]
      HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 8004cc2:	682a      	ldr	r2, [r5, #0]
 8004cc4:	4811      	ldr	r0, [pc, #68]	; (8004d0c <p+0xec>)
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	b292      	uxth	r2, r2
 8004cca:	f003 fbaf 	bl	800842c <HAL_UART_Transmit_DMA>
 8004cce:	e7ba      	b.n	8004c46 <p+0x26>
    first_buf_len = vsprintf(first_buf, format, ap);
 8004cd0:	4811      	ldr	r0, [pc, #68]	; (8004d18 <p+0xf8>)
 8004cd2:	4f10      	ldr	r7, [pc, #64]	; (8004d14 <p+0xf4>)
 8004cd4:	f006 fa68 	bl	800b1a8 <vsiprintf>
 8004cd8:	6038      	str	r0, [r7, #0]
    sending_first_buf = true;
 8004cda:	702e      	strb	r6, [r5, #0]
    HAL_UART_Transmit_DMA(&huart1, (uint8_t *)first_buf, first_buf_len); // 2ms
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	490e      	ldr	r1, [pc, #56]	; (8004d18 <p+0xf8>)
 8004ce0:	480a      	ldr	r0, [pc, #40]	; (8004d0c <p+0xec>)
 8004ce2:	b292      	uxth	r2, r2
 8004ce4:	f003 fba2 	bl	800842c <HAL_UART_Transmit_DMA>
    first_buf_len = (int)strlen(first_buf);
 8004ce8:	480b      	ldr	r0, [pc, #44]	; (8004d18 <p+0xf8>)
 8004cea:	f7fb fac1 	bl	8000270 <strlen>
    second_buf_len = 0;
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <p+0xe4>)
    first_buf_len = (int)strlen(first_buf);
 8004cf0:	6038      	str	r0, [r7, #0]
    first_buf_len = 0;
 8004cf2:	f8c7 8000 	str.w	r8, [r7]
    second_buf_len = 0;
 8004cf6:	f8c3 8000 	str.w	r8, [r3]
 8004cfa:	e7a4      	b.n	8004c46 <p+0x26>
 8004cfc:	20001a5c 	.word	0x20001a5c
 8004d00:	20001d84 	.word	0x20001d84
 8004d04:	20001d80 	.word	0x20001d80
 8004d08:	20001a60 	.word	0x20001a60
 8004d0c:	200019d4 	.word	0x200019d4
 8004d10:	20001d85 	.word	0x20001d85
 8004d14:	2000198c 	.word	0x2000198c
 8004d18:	2000166c 	.word	0x2000166c

08004d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d54 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d20:	480d      	ldr	r0, [pc, #52]	; (8004d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8004d22:	490e      	ldr	r1, [pc, #56]	; (8004d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d24:	4a0e      	ldr	r2, [pc, #56]	; (8004d60 <LoopForever+0xe>)
  movs r3, #0
 8004d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d28:	e002      	b.n	8004d30 <LoopCopyDataInit>

08004d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d2e:	3304      	adds	r3, #4

08004d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d34:	d3f9      	bcc.n	8004d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d36:	4a0b      	ldr	r2, [pc, #44]	; (8004d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d38:	4c0b      	ldr	r4, [pc, #44]	; (8004d68 <LoopForever+0x16>)
  movs r3, #0
 8004d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d3c:	e001      	b.n	8004d42 <LoopFillZerobss>

08004d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d40:	3204      	adds	r2, #4

08004d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d44:	d3fb      	bcc.n	8004d3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004d46:	f7ff fb1f 	bl	8004388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d4a:	f006 fa8f 	bl	800b26c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d4e:	f7fe f917 	bl	8002f80 <main>

08004d52 <LoopForever>:

LoopForever:
    b LoopForever
 8004d52:	e7fe      	b.n	8004d52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d54:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d5c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8004d60:	0800dffc 	.word	0x0800dffc
  ldr r2, =_sbss
 8004d64:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004d68:	20001efc 	.word	0x20001efc

08004d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d6c:	e7fe      	b.n	8004d6c <ADC1_2_IRQHandler>
	...

08004d70 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d70:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d72:	4a0e      	ldr	r2, [pc, #56]	; (8004dac <HAL_InitTick+0x3c>)
 8004d74:	4b0e      	ldr	r3, [pc, #56]	; (8004db0 <HAL_InitTick+0x40>)
 8004d76:	7812      	ldrb	r2, [r2, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
{
 8004d7a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d80:	fbb0 f0f2 	udiv	r0, r0, r2
 8004d84:	fbb3 f0f0 	udiv	r0, r3, r0
 8004d88:	f001 fc04 	bl	8006594 <HAL_SYSTICK_Config>
 8004d8c:	b908      	cbnz	r0, 8004d92 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d8e:	2d0f      	cmp	r5, #15
 8004d90:	d901      	bls.n	8004d96 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004d92:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8004d94:	bd38      	pop	{r3, r4, r5, pc}
 8004d96:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004da0:	f001 fb9a 	bl	80064d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004da4:	4b03      	ldr	r3, [pc, #12]	; (8004db4 <HAL_InitTick+0x44>)
 8004da6:	4620      	mov	r0, r4
 8004da8:	601d      	str	r5, [r3, #0]
}
 8004daa:	bd38      	pop	{r3, r4, r5, pc}
 8004dac:	20000004 	.word	0x20000004
 8004db0:	20000000 	.word	0x20000000
 8004db4:	20000008 	.word	0x20000008

08004db8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004db8:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <HAL_Init+0x20>)
{
 8004dba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004dbc:	6813      	ldr	r3, [r2, #0]
 8004dbe:	f043 0310 	orr.w	r3, r3, #16
 8004dc2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dc4:	2003      	movs	r0, #3
 8004dc6:	f001 fb75 	bl	80064b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dca:	200f      	movs	r0, #15
 8004dcc:	f7ff ffd0 	bl	8004d70 <HAL_InitTick>
  HAL_MspInit();
 8004dd0:	f7ff fa18 	bl	8004204 <HAL_MspInit>
}
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	bd08      	pop	{r3, pc}
 8004dd8:	40022000 	.word	0x40022000

08004ddc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004ddc:	4a03      	ldr	r2, [pc, #12]	; (8004dec <HAL_IncTick+0x10>)
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <HAL_IncTick+0x14>)
 8004de0:	6811      	ldr	r1, [r2, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	440b      	add	r3, r1
 8004de6:	6013      	str	r3, [r2, #0]
}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20001d88 	.word	0x20001d88
 8004df0:	20000004 	.word	0x20000004

08004df4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004df4:	4b01      	ldr	r3, [pc, #4]	; (8004dfc <HAL_GetTick+0x8>)
 8004df6:	6818      	ldr	r0, [r3, #0]
}
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20001d88 	.word	0x20001d88

08004e00 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004e04:	f7ff fff6 	bl	8004df4 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e08:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8004e0a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8004e0c:	d002      	beq.n	8004e14 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e0e:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <HAL_Delay+0x20>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004e14:	f7ff ffee 	bl	8004df4 <HAL_GetTick>
 8004e18:	1b43      	subs	r3, r0, r5
 8004e1a:	42a3      	cmp	r3, r4
 8004e1c:	d3fa      	bcc.n	8004e14 <HAL_Delay+0x14>
  {
  }
}
 8004e1e:	bd38      	pop	{r3, r4, r5, pc}
 8004e20:	20000004 	.word	0x20000004

08004e24 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004e24:	6802      	ldr	r2, [r0, #0]
{
 8004e26:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004e28:	6893      	ldr	r3, [r2, #8]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d001      	beq.n	8004e36 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004e32:	2000      	movs	r0, #0
}
 8004e34:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004e36:	6811      	ldr	r1, [r2, #0]
 8004e38:	07cc      	lsls	r4, r1, #31
 8004e3a:	d5fa      	bpl.n	8004e32 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004e3c:	6891      	ldr	r1, [r2, #8]
 8004e3e:	f001 010d 	and.w	r1, r1, #13
 8004e42:	2901      	cmp	r1, #1
 8004e44:	4604      	mov	r4, r0
 8004e46:	d009      	beq.n	8004e5c <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e48:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8004e4a:	f042 0210 	orr.w	r2, r2, #16
 8004e4e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004e50:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e52:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8004e5c:	6893      	ldr	r3, [r2, #8]
 8004e5e:	2103      	movs	r1, #3
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	6093      	str	r3, [r2, #8]
 8004e66:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8004e68:	f7ff ffc4 	bl	8004df4 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8004e72:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e74:	d403      	bmi.n	8004e7e <ADC_Disable+0x5a>
 8004e76:	e7dc      	b.n	8004e32 <ADC_Disable+0xe>
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	07db      	lsls	r3, r3, #31
 8004e7c:	d5d9      	bpl.n	8004e32 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e7e:	f7ff ffb9 	bl	8004df4 <HAL_GetTick>
 8004e82:	1b40      	subs	r0, r0, r5
 8004e84:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e86:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e88:	d9f6      	bls.n	8004e78 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	07d2      	lsls	r2, r2, #31
 8004e8e:	d5f3      	bpl.n	8004e78 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e92:	f043 0310 	orr.w	r3, r3, #16
 8004e96:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e98:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8004e9a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9c:	4303      	orrs	r3, r0
 8004e9e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004ea0:	bd38      	pop	{r3, r4, r5, pc}
 8004ea2:	bf00      	nop

08004ea4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ea4:	6802      	ldr	r2, [r0, #0]
{
 8004ea6:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ea8:	6893      	ldr	r3, [r2, #8]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b01      	cmp	r3, #1
{
 8004eb0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004eb2:	d025      	beq.n	8004f00 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004eb4:	6891      	ldr	r1, [r2, #8]
 8004eb6:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <ADC_Enable+0x68>)
 8004eb8:	4219      	tst	r1, r3
 8004eba:	d008      	beq.n	8004ece <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ebc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ebe:	f043 0310 	orr.w	r3, r3, #16
 8004ec2:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ec4:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8004ec6:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ec8:	4303      	orrs	r3, r0
 8004eca:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004ecc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8004ece:	6893      	ldr	r3, [r2, #8]
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8004ed6:	f7ff ff8d 	bl	8004df4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004eda:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8004edc:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	07d9      	lsls	r1, r3, #31
 8004ee2:	d40b      	bmi.n	8004efc <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ee4:	f7ff ff86 	bl	8004df4 <HAL_GetTick>
 8004ee8:	1b43      	subs	r3, r0, r5
 8004eea:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004eec:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004eee:	d9f6      	bls.n	8004ede <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	07d2      	lsls	r2, r2, #31
 8004ef4:	d5e2      	bpl.n	8004ebc <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	07d9      	lsls	r1, r3, #31
 8004efa:	d5f3      	bpl.n	8004ee4 <ADC_Enable+0x40>
  return HAL_OK;
 8004efc:	2000      	movs	r0, #0
}
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f00:	6813      	ldr	r3, [r2, #0]
 8004f02:	07d8      	lsls	r0, r3, #31
 8004f04:	d5d6      	bpl.n	8004eb4 <ADC_Enable+0x10>
  return HAL_OK;
 8004f06:	2000      	movs	r0, #0
 8004f08:	e7f9      	b.n	8004efe <ADC_Enable+0x5a>
 8004f0a:	bf00      	nop
 8004f0c:	8000003f 	.word	0x8000003f

08004f10 <HAL_ADC_Init>:
{
 8004f10:	b530      	push	{r4, r5, lr}
 8004f12:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	f000 8099 	beq.w	8005050 <HAL_ADC_Init+0x140>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f1e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004f20:	f013 0310 	ands.w	r3, r3, #16
 8004f24:	4604      	mov	r4, r0
 8004f26:	d117      	bne.n	8004f58 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004f28:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004f2a:	2d00      	cmp	r5, #0
 8004f2c:	f000 8093 	beq.w	8005056 <HAL_ADC_Init+0x146>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004f30:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004f32:	6891      	ldr	r1, [r2, #8]
 8004f34:	00c9      	lsls	r1, r1, #3
 8004f36:	d57f      	bpl.n	8005038 <HAL_ADC_Init+0x128>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004f38:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004f3a:	008d      	lsls	r5, r1, #2
 8004f3c:	d47c      	bmi.n	8005038 <HAL_ADC_Init+0x128>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004f3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004f40:	06c8      	lsls	r0, r1, #27
 8004f42:	d400      	bmi.n	8004f46 <HAL_ADC_Init+0x36>
 8004f44:	b163      	cbz	r3, 8004f60 <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 8004f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f48:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 8004f4c:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8004f4e:	f043 0310 	orr.w	r3, r3, #16
 8004f52:	6423      	str	r3, [r4, #64]	; 0x40
}
 8004f54:	b003      	add	sp, #12
 8004f56:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004f58:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004f5a:	06da      	lsls	r2, r3, #27
 8004f5c:	d4f3      	bmi.n	8004f46 <HAL_ADC_Init+0x36>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004f5e:	6802      	ldr	r2, [r0, #0]
 8004f60:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8004f62:	0759      	lsls	r1, r3, #29
 8004f64:	d4ef      	bmi.n	8004f46 <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8004f66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f70:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8004f74:	6423      	str	r3, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f76:	f000 80d8 	beq.w	800512a <HAL_ADC_Init+0x21a>
 8004f7a:	4b7d      	ldr	r3, [pc, #500]	; (8005170 <HAL_ADC_Init+0x260>)
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	f000 80dc 	beq.w	800513a <HAL_ADC_Init+0x22a>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004f82:	497c      	ldr	r1, [pc, #496]	; (8005174 <HAL_ADC_Init+0x264>)
 8004f84:	428a      	cmp	r2, r1
 8004f86:	d073      	beq.n	8005070 <HAL_ADC_Init+0x160>
 8004f88:	4b7b      	ldr	r3, [pc, #492]	; (8005178 <HAL_ADC_Init+0x268>)
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d071      	beq.n	8005072 <HAL_ADC_Init+0x162>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004f8e:	6893      	ldr	r3, [r2, #8]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	f000 80e2 	beq.w	800515e <HAL_ADC_Init+0x24e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f9a:	4878      	ldr	r0, [pc, #480]	; (800517c <HAL_ADC_Init+0x26c>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004f9c:	6883      	ldr	r3, [r0, #8]
 8004f9e:	6861      	ldr	r1, [r4, #4]
 8004fa0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	6083      	str	r3, [r0, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004fa8:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fb0:	7e60      	ldrb	r0, [r4, #25]
 8004fb2:	3901      	subs	r1, #1
 8004fb4:	bf18      	it	ne
 8004fb6:	2101      	movne	r1, #1
 8004fb8:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 8004fbc:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004fc0:	f894 1020 	ldrb.w	r1, [r4, #32]
 8004fc4:	2901      	cmp	r1, #1
 8004fc6:	f000 8094 	beq.w	80050f2 <HAL_ADC_Init+0x1e2>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004fcc:	2901      	cmp	r1, #1
 8004fce:	d00c      	beq.n	8004fea <HAL_ADC_Init+0xda>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004fd0:	4868      	ldr	r0, [pc, #416]	; (8005174 <HAL_ADC_Init+0x264>)
 8004fd2:	4282      	cmp	r2, r0
 8004fd4:	f000 809d 	beq.w	8005112 <HAL_ADC_Init+0x202>
 8004fd8:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8004fdc:	4282      	cmp	r2, r0
 8004fde:	f000 8098 	beq.w	8005112 <HAL_ADC_Init+0x202>
 8004fe2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004fe4:	4318      	orrs	r0, r3
 8004fe6:	ea41 0300 	orr.w	r3, r1, r0
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004fea:	6891      	ldr	r1, [r2, #8]
 8004fec:	f011 0f0c 	tst.w	r1, #12
 8004ff0:	d10c      	bne.n	800500c <HAL_ADC_Init+0xfc>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004ff2:	68d1      	ldr	r1, [r2, #12]
 8004ff4:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004ff8:	f021 0102 	bic.w	r1, r1, #2
 8004ffc:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004ffe:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8005002:	7e20      	ldrb	r0, [r4, #24]
 8005004:	0049      	lsls	r1, r1, #1
 8005006:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 800500a:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 800500c:	68d0      	ldr	r0, [r2, #12]
 800500e:	495c      	ldr	r1, [pc, #368]	; (8005180 <HAL_ADC_Init+0x270>)
 8005010:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005012:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8005014:	4319      	orrs	r1, r3
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005016:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8005018:	60d1      	str	r1, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800501a:	d072      	beq.n	8005102 <HAL_ADC_Init+0x1f2>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800501c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800501e:	f023 030f 	bic.w	r3, r3, #15
 8005022:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8005024:	2000      	movs	r0, #0
 8005026:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005028:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	f043 0301 	orr.w	r3, r3, #1
 8005032:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005034:	b003      	add	sp, #12
 8005036:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8005038:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800503a:	f023 0312 	bic.w	r3, r3, #18
 800503e:	f043 0310 	orr.w	r3, r3, #16
 8005042:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005044:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800504c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800504e:	e77a      	b.n	8004f46 <HAL_ADC_Init+0x36>
    return HAL_ERROR;
 8005050:	2001      	movs	r0, #1
}
 8005052:	b003      	add	sp, #12
 8005054:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8005056:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 800505a:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 800505c:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8005060:	f7fb ff7e 	bl	8000f60 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	6893      	ldr	r3, [r2, #8]
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	d511      	bpl.n	8005090 <HAL_ADC_Init+0x180>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800506c:	462b      	mov	r3, r5
 800506e:	e760      	b.n	8004f32 <HAL_ADC_Init+0x22>
 8005070:	4941      	ldr	r1, [pc, #260]	; (8005178 <HAL_ADC_Init+0x268>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005072:	4842      	ldr	r0, [pc, #264]	; (800517c <HAL_ADC_Init+0x26c>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005074:	6893      	ldr	r3, [r2, #8]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d058      	beq.n	8005130 <HAL_ADC_Init+0x220>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800507e:	688b      	ldr	r3, [r1, #8]
 8005080:	f003 0303 	and.w	r3, r3, #3
 8005084:	2b01      	cmp	r3, #1
 8005086:	d189      	bne.n	8004f9c <HAL_ADC_Init+0x8c>
 8005088:	680b      	ldr	r3, [r1, #0]
 800508a:	07db      	lsls	r3, r3, #31
 800508c:	d48c      	bmi.n	8004fa8 <HAL_ADC_Init+0x98>
 800508e:	e785      	b.n	8004f9c <HAL_ADC_Init+0x8c>
        tmp_hal_status = ADC_Disable(hadc);
 8005090:	4620      	mov	r0, r4
 8005092:	f7ff fec7 	bl	8004e24 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005096:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 8005098:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800509a:	06d0      	lsls	r0, r2, #27
 800509c:	f53f af48 	bmi.w	8004f30 <HAL_ADC_Init+0x20>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f47f af45 	bne.w	8004f30 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 80050a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80050a8:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80050aa:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80050ae:	f021 0102 	bic.w	r1, r1, #2
 80050b2:	f041 0102 	orr.w	r1, r1, #2
 80050b6:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80050b8:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050ba:	4932      	ldr	r1, [pc, #200]	; (8005184 <HAL_ADC_Init+0x274>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80050bc:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 80050c0:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80050c2:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050c4:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80050c6:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80050ca:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050cc:	482e      	ldr	r0, [pc, #184]	; (8005188 <HAL_ADC_Init+0x278>)
 80050ce:	fba0 0101 	umull	r0, r1, r0, r1
 80050d2:	0c89      	lsrs	r1, r1, #18
 80050d4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80050d8:	0049      	lsls	r1, r1, #1
 80050da:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80050dc:	9901      	ldr	r1, [sp, #4]
 80050de:	2900      	cmp	r1, #0
 80050e0:	f43f af27 	beq.w	8004f32 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 80050e4:	9901      	ldr	r1, [sp, #4]
 80050e6:	3901      	subs	r1, #1
 80050e8:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 80050ea:	9901      	ldr	r1, [sp, #4]
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d1f9      	bne.n	80050e4 <HAL_ADC_Init+0x1d4>
 80050f0:	e71f      	b.n	8004f32 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80050f2:	bb30      	cbnz	r0, 8005142 <HAL_ADC_Init+0x232>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80050f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050f6:	3901      	subs	r1, #1
 80050f8:	ea43 4141 	orr.w	r1, r3, r1, lsl #17
 80050fc:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
 8005100:	e763      	b.n	8004fca <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8005102:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005104:	69e3      	ldr	r3, [r4, #28]
 8005106:	f021 010f 	bic.w	r1, r1, #15
 800510a:	3b01      	subs	r3, #1
 800510c:	430b      	orrs	r3, r1
 800510e:	6313      	str	r3, [r2, #48]	; 0x30
 8005110:	e788      	b.n	8005024 <HAL_ADC_Init+0x114>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005112:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 8005116:	d01f      	beq.n	8005158 <HAL_ADC_Init+0x248>
 8005118:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800511c:	d024      	beq.n	8005168 <HAL_ADC_Init+0x258>
 800511e:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8005122:	bf08      	it	eq
 8005124:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8005128:	e75b      	b.n	8004fe2 <HAL_ADC_Init+0xd2>
 800512a:	4911      	ldr	r1, [pc, #68]	; (8005170 <HAL_ADC_Init+0x260>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800512c:	4817      	ldr	r0, [pc, #92]	; (800518c <HAL_ADC_Init+0x27c>)
 800512e:	e7a1      	b.n	8005074 <HAL_ADC_Init+0x164>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005130:	6813      	ldr	r3, [r2, #0]
 8005132:	07dd      	lsls	r5, r3, #31
 8005134:	f53f af38 	bmi.w	8004fa8 <HAL_ADC_Init+0x98>
 8005138:	e7a1      	b.n	800507e <HAL_ADC_Init+0x16e>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800513a:	4814      	ldr	r0, [pc, #80]	; (800518c <HAL_ADC_Init+0x27c>)
 800513c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8005140:	e798      	b.n	8005074 <HAL_ADC_Init+0x164>
        ADC_STATE_CLR_SET(hadc->State,
 8005142:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005144:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8005148:	f041 0120 	orr.w	r1, r1, #32
 800514c:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800514e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005150:	f041 0101 	orr.w	r1, r1, #1
 8005154:	6461      	str	r1, [r4, #68]	; 0x44
 8005156:	e738      	b.n	8004fca <HAL_ADC_Init+0xba>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005158:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800515c:	e741      	b.n	8004fe2 <HAL_ADC_Init+0xd2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800515e:	6813      	ldr	r3, [r2, #0]
 8005160:	07db      	lsls	r3, r3, #31
 8005162:	f53f af21 	bmi.w	8004fa8 <HAL_ADC_Init+0x98>
 8005166:	e718      	b.n	8004f9a <HAL_ADC_Init+0x8a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8005168:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 800516c:	e739      	b.n	8004fe2 <HAL_ADC_Init+0xd2>
 800516e:	bf00      	nop
 8005170:	50000100 	.word	0x50000100
 8005174:	50000400 	.word	0x50000400
 8005178:	50000500 	.word	0x50000500
 800517c:	50000700 	.word	0x50000700
 8005180:	fff0c007 	.word	0xfff0c007
 8005184:	20000000 	.word	0x20000000
 8005188:	431bde83 	.word	0x431bde83
 800518c:	50000300 	.word	0x50000300

08005190 <HAL_ADC_Start>:
{
 8005190:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005192:	6803      	ldr	r3, [r0, #0]
 8005194:	689d      	ldr	r5, [r3, #8]
 8005196:	f015 0504 	ands.w	r5, r5, #4
 800519a:	d12c      	bne.n	80051f6 <HAL_ADC_Start+0x66>
    __HAL_LOCK(hadc);
 800519c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	4604      	mov	r4, r0
 80051a4:	d027      	beq.n	80051f6 <HAL_ADC_Start+0x66>
 80051a6:	2301      	movs	r3, #1
 80051a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 80051ac:	f7ff fe7a 	bl	8004ea4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80051b0:	b9f0      	cbnz	r0, 80051f0 <HAL_ADC_Start+0x60>
      ADC_STATE_CLR_SET(hadc->State,
 80051b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051b4:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80051b6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80051ba:	f022 0201 	bic.w	r2, r2, #1
 80051be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 80051c6:	6422      	str	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051c8:	d017      	beq.n	80051fa <HAL_ADC_Start+0x6a>
 80051ca:	4a3a      	ldr	r2, [pc, #232]	; (80052b4 <HAL_ADC_Start+0x124>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d068      	beq.n	80052a2 <HAL_ADC_Start+0x112>
 80051d0:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 80051d4:	6892      	ldr	r2, [r2, #8]
 80051d6:	06d5      	lsls	r5, r2, #27
 80051d8:	d011      	beq.n	80051fe <HAL_ADC_Start+0x6e>
 80051da:	4937      	ldr	r1, [pc, #220]	; (80052b8 <HAL_ADC_Start+0x128>)
 80051dc:	428b      	cmp	r3, r1
 80051de:	d00e      	beq.n	80051fe <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051e6:	6422      	str	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80051e8:	68ca      	ldr	r2, [r1, #12]
 80051ea:	0192      	lsls	r2, r2, #6
 80051ec:	d514      	bpl.n	8005218 <HAL_ADC_Start+0x88>
 80051ee:	e00d      	b.n	800520c <HAL_ADC_Start+0x7c>
      __HAL_UNLOCK(hadc);
 80051f0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 80051f4:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80051f6:	2002      	movs	r0, #2
}
 80051f8:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051fa:	4a30      	ldr	r2, [pc, #192]	; (80052bc <HAL_ADC_Start+0x12c>)
 80051fc:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80051fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005200:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005204:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	0191      	lsls	r1, r2, #6
 800520a:	d505      	bpl.n	8005218 <HAL_ADC_Start+0x88>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800520c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800520e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005212:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005216:	6422      	str	r2, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005218:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800521a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800521e:	bf1c      	itt	ne
 8005220:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8005222:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8005226:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8005228:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800522a:	221c      	movs	r2, #28
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800522c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
 8005230:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005234:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005236:	d01a      	beq.n	800526e <HAL_ADC_Start+0xde>
 8005238:	4a1e      	ldr	r2, [pc, #120]	; (80052b4 <HAL_ADC_Start+0x124>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d022      	beq.n	8005284 <HAL_ADC_Start+0xf4>
 800523e:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 8005242:	06cd      	lsls	r5, r1, #27
 8005244:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8005248:	d00c      	beq.n	8005264 <HAL_ADC_Start+0xd4>
 800524a:	6891      	ldr	r1, [r2, #8]
 800524c:	f001 011f 	and.w	r1, r1, #31
 8005250:	2905      	cmp	r1, #5
 8005252:	d007      	beq.n	8005264 <HAL_ADC_Start+0xd4>
 8005254:	6892      	ldr	r2, [r2, #8]
 8005256:	f002 021f 	and.w	r2, r2, #31
 800525a:	2a09      	cmp	r2, #9
 800525c:	d002      	beq.n	8005264 <HAL_ADC_Start+0xd4>
 800525e:	4a16      	ldr	r2, [pc, #88]	; (80052b8 <HAL_ADC_Start+0x128>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d1c7      	bne.n	80051f4 <HAL_ADC_Start+0x64>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	f042 0204 	orr.w	r2, r2, #4
 800526a:	609a      	str	r2, [r3, #8]
}
 800526c:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <HAL_ADC_Start+0x12c>)
 8005270:	6891      	ldr	r1, [r2, #8]
 8005272:	06cc      	lsls	r4, r1, #27
 8005274:	d0f6      	beq.n	8005264 <HAL_ADC_Start+0xd4>
 8005276:	6891      	ldr	r1, [r2, #8]
 8005278:	f001 011f 	and.w	r1, r1, #31
 800527c:	2905      	cmp	r1, #5
 800527e:	d0f1      	beq.n	8005264 <HAL_ADC_Start+0xd4>
 8005280:	6892      	ldr	r2, [r2, #8]
 8005282:	e7ef      	b.n	8005264 <HAL_ADC_Start+0xd4>
 8005284:	4a0d      	ldr	r2, [pc, #52]	; (80052bc <HAL_ADC_Start+0x12c>)
 8005286:	6891      	ldr	r1, [r2, #8]
 8005288:	06c9      	lsls	r1, r1, #27
 800528a:	d0eb      	beq.n	8005264 <HAL_ADC_Start+0xd4>
 800528c:	6891      	ldr	r1, [r2, #8]
 800528e:	f001 011f 	and.w	r1, r1, #31
 8005292:	2905      	cmp	r1, #5
 8005294:	d0e6      	beq.n	8005264 <HAL_ADC_Start+0xd4>
 8005296:	6892      	ldr	r2, [r2, #8]
 8005298:	f002 021f 	and.w	r2, r2, #31
 800529c:	2a09      	cmp	r2, #9
 800529e:	d0e1      	beq.n	8005264 <HAL_ADC_Start+0xd4>
}
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80052a2:	4a06      	ldr	r2, [pc, #24]	; (80052bc <HAL_ADC_Start+0x12c>)
 80052a4:	6892      	ldr	r2, [r2, #8]
 80052a6:	06d2      	lsls	r2, r2, #27
 80052a8:	d0a9      	beq.n	80051fe <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80052ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80052b0:	e797      	b.n	80051e2 <HAL_ADC_Start+0x52>
 80052b2:	bf00      	nop
 80052b4:	50000100 	.word	0x50000100
 80052b8:	50000400 	.word	0x50000400
 80052bc:	50000300 	.word	0x50000300

080052c0 <HAL_ADCEx_Calibration_Start>:
{
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80052c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d040      	beq.n	800534c <HAL_ADCEx_Calibration_Start+0x8c>
 80052ca:	2701      	movs	r7, #1
 80052cc:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 80052d0:	4604      	mov	r4, r0
 80052d2:	460d      	mov	r5, r1
 80052d4:	f7ff fda6 	bl	8004e24 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 80052d8:	4606      	mov	r6, r0
 80052da:	2800      	cmp	r0, #0
 80052dc:	d131      	bne.n	8005342 <HAL_ADCEx_Calibration_Start+0x82>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80052de:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 80052e0:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80052e2:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052e4:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80052e6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80052ea:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052ec:	d103      	bne.n	80052f6 <HAL_ADCEx_Calibration_Start+0x36>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80052fc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80052fe:	f7ff fd79 	bl	8004df4 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005302:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8005304:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	da14      	bge.n	8005336 <HAL_ADCEx_Calibration_Start+0x76>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800530c:	f7ff fd72 	bl	8004df4 <HAL_GetTick>
 8005310:	1b43      	subs	r3, r0, r5
 8005312:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005314:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005316:	d9f6      	bls.n	8005306 <HAL_ADCEx_Calibration_Start+0x46>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	2a00      	cmp	r2, #0
 800531c:	daf3      	bge.n	8005306 <HAL_ADCEx_Calibration_Start+0x46>
          ADC_STATE_CLR_SET(hadc->State,
 800531e:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8005320:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 8005322:	f023 0312 	bic.w	r3, r3, #18
 8005326:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 800532a:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 800532c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 8005330:	6423      	str	r3, [r4, #64]	; 0x40
}
 8005332:	4630      	mov	r0, r6
 8005334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8005336:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005338:	f023 0303 	bic.w	r3, r3, #3
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005342:	2300      	movs	r3, #0
 8005344:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005348:	4630      	mov	r0, r6
 800534a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 800534c:	2602      	movs	r6, #2
}
 800534e:	4630      	mov	r0, r6
 8005350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005352:	bf00      	nop

08005354 <HAL_ADCEx_InjectedStart>:
{
 8005354:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005356:	6803      	ldr	r3, [r0, #0]
 8005358:	689d      	ldr	r5, [r3, #8]
 800535a:	f015 0508 	ands.w	r5, r5, #8
 800535e:	d129      	bne.n	80053b4 <HAL_ADCEx_InjectedStart+0x60>
    __HAL_LOCK(hadc);
 8005360:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005364:	2b01      	cmp	r3, #1
 8005366:	4604      	mov	r4, r0
 8005368:	d024      	beq.n	80053b4 <HAL_ADCEx_InjectedStart+0x60>
 800536a:	2301      	movs	r3, #1
 800536c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8005370:	f7ff fd98 	bl	8004ea4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005374:	b9d8      	cbnz	r0, 80053ae <HAL_ADCEx_InjectedStart+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8005376:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005378:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800537a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800537e:	f023 0301 	bic.w	r3, r3, #1
 8005382:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005386:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 800538a:	6423      	str	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800538c:	d014      	beq.n	80053b8 <HAL_ADCEx_InjectedStart+0x64>
 800538e:	4b32      	ldr	r3, [pc, #200]	; (8005458 <HAL_ADCEx_InjectedStart+0x104>)
 8005390:	429a      	cmp	r2, r3
 8005392:	d042      	beq.n	800541a <HAL_ADCEx_InjectedStart+0xc6>
 8005394:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	06d9      	lsls	r1, r3, #27
 800539c:	d00e      	beq.n	80053bc <HAL_ADCEx_InjectedStart+0x68>
 800539e:	4b2f      	ldr	r3, [pc, #188]	; (800545c <HAL_ADCEx_InjectedStart+0x108>)
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d00b      	beq.n	80053bc <HAL_ADCEx_InjectedStart+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053aa:	6423      	str	r3, [r4, #64]	; 0x40
 80053ac:	e00a      	b.n	80053c4 <HAL_ADCEx_InjectedStart+0x70>
      __HAL_UNLOCK(hadc);
 80053ae:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80053b4:	2002      	movs	r0, #2
}
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80053b8:	4b29      	ldr	r3, [pc, #164]	; (8005460 <HAL_ADCEx_InjectedStart+0x10c>)
 80053ba:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80053c2:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80053c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053c6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        ADC_CLEAR_ERRORCODE(hadc);
 80053ca:	bf08      	it	eq
 80053cc:	6463      	streq	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80053ce:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80053d0:	2360      	movs	r3, #96	; 0x60
      __HAL_UNLOCK(hadc);
 80053d2:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80053d6:	6013      	str	r3, [r2, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80053d8:	68d3      	ldr	r3, [r2, #12]
 80053da:	019b      	lsls	r3, r3, #6
 80053dc:	d4e9      	bmi.n	80053b2 <HAL_ADCEx_InjectedStart+0x5e>
 80053de:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80053e2:	d01f      	beq.n	8005424 <HAL_ADCEx_InjectedStart+0xd0>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80053e4:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <HAL_ADCEx_InjectedStart+0x104>)
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d027      	beq.n	800543a <HAL_ADCEx_InjectedStart+0xe6>
 80053ea:	f8d3 1608 	ldr.w	r1, [r3, #1544]	; 0x608
 80053ee:	06cd      	lsls	r5, r1, #27
 80053f0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80053f4:	d00c      	beq.n	8005410 <HAL_ADCEx_InjectedStart+0xbc>
 80053f6:	6899      	ldr	r1, [r3, #8]
 80053f8:	f001 011f 	and.w	r1, r1, #31
 80053fc:	2906      	cmp	r1, #6
 80053fe:	d007      	beq.n	8005410 <HAL_ADCEx_InjectedStart+0xbc>
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 031f 	and.w	r3, r3, #31
 8005406:	2b07      	cmp	r3, #7
 8005408:	d002      	beq.n	8005410 <HAL_ADCEx_InjectedStart+0xbc>
 800540a:	4b14      	ldr	r3, [pc, #80]	; (800545c <HAL_ADCEx_InjectedStart+0x108>)
 800540c:	429a      	cmp	r2, r3
 800540e:	d1d0      	bne.n	80053b2 <HAL_ADCEx_InjectedStart+0x5e>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8005410:	6893      	ldr	r3, [r2, #8]
 8005412:	f043 0308 	orr.w	r3, r3, #8
 8005416:	6093      	str	r3, [r2, #8]
}
 8005418:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800541a:	4b11      	ldr	r3, [pc, #68]	; (8005460 <HAL_ADCEx_InjectedStart+0x10c>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	06db      	lsls	r3, r3, #27
 8005420:	d0cc      	beq.n	80053bc <HAL_ADCEx_InjectedStart+0x68>
 8005422:	e7bf      	b.n	80053a4 <HAL_ADCEx_InjectedStart+0x50>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005424:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <HAL_ADCEx_InjectedStart+0x10c>)
 8005426:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8005428:	06c9      	lsls	r1, r1, #27
 800542a:	d0f1      	beq.n	8005410 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 800542c:	6899      	ldr	r1, [r3, #8]
 800542e:	f001 011f 	and.w	r1, r1, #31
 8005432:	2906      	cmp	r1, #6
 8005434:	d0ec      	beq.n	8005410 <HAL_ADCEx_InjectedStart+0xbc>
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	e7ea      	b.n	8005410 <HAL_ADCEx_InjectedStart+0xbc>
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <HAL_ADCEx_InjectedStart+0x10c>)
 800543c:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 800543e:	06cc      	lsls	r4, r1, #27
 8005440:	d0e6      	beq.n	8005410 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005442:	6899      	ldr	r1, [r3, #8]
 8005444:	f001 011f 	and.w	r1, r1, #31
 8005448:	2906      	cmp	r1, #6
 800544a:	d0e1      	beq.n	8005410 <HAL_ADCEx_InjectedStart+0xbc>
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	2b07      	cmp	r3, #7
 8005454:	d0dc      	beq.n	8005410 <HAL_ADCEx_InjectedStart+0xbc>
}
 8005456:	bd38      	pop	{r3, r4, r5, pc}
 8005458:	50000100 	.word	0x50000100
 800545c:	50000400 	.word	0x50000400
 8005460:	50000300 	.word	0x50000300

08005464 <HAL_ADCEx_InjectedGetValue>:
  switch(InjectedRank)
 8005464:	2903      	cmp	r1, #3
 8005466:	d007      	beq.n	8005478 <HAL_ADCEx_InjectedGetValue+0x14>
 8005468:	2904      	cmp	r1, #4
 800546a:	d00d      	beq.n	8005488 <HAL_ADCEx_InjectedGetValue+0x24>
 800546c:	2902      	cmp	r1, #2
 800546e:	d007      	beq.n	8005480 <HAL_ADCEx_InjectedGetValue+0x1c>
      tmp_jdr = hadc->Instance->JDR1;
 8005470:	6803      	ldr	r3, [r0, #0]
 8005472:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8005476:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8005478:	6803      	ldr	r3, [r0, #0]
 800547a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 800547e:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 8005480:	6803      	ldr	r3, [r0, #0]
 8005482:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 8005486:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8005488:	6803      	ldr	r3, [r0, #0]
 800548a:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 800548e:	4770      	bx	lr

08005490 <HAL_ADC_ConfigChannel>:
{
 8005490:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8005492:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005496:	68cc      	ldr	r4, [r1, #12]
{
 8005498:	b083      	sub	sp, #12
 800549a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800549c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 800549e:	f04f 0000 	mov.w	r0, #0
 80054a2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80054a4:	f000 8107 	beq.w	80056b6 <HAL_ADC_ConfigChannel+0x226>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054a8:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80054aa:	2001      	movs	r0, #1
 80054ac:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80054b0:	6895      	ldr	r5, [r2, #8]
 80054b2:	076d      	lsls	r5, r5, #29
 80054b4:	d43a      	bmi.n	800552c <HAL_ADC_ConfigChannel+0x9c>
    if (sConfig->Rank < 5U)
 80054b6:	6848      	ldr	r0, [r1, #4]
 80054b8:	2804      	cmp	r0, #4
 80054ba:	f200 808b 	bhi.w	80055d4 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 80054be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80054c2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80054c4:	680d      	ldr	r5, [r1, #0]
 80054c6:	0040      	lsls	r0, r0, #1
 80054c8:	f04f 0c1f 	mov.w	ip, #31
 80054cc:	fa0c fc00 	lsl.w	ip, ip, r0
 80054d0:	ea26 0c0c 	bic.w	ip, r6, ip
 80054d4:	fa05 f000 	lsl.w	r0, r5, r0
 80054d8:	ea4c 0000 	orr.w	r0, ip, r0
 80054dc:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80054de:	6890      	ldr	r0, [r2, #8]
 80054e0:	f010 0f0c 	tst.w	r0, #12
 80054e4:	d134      	bne.n	8005550 <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80054e6:	2d09      	cmp	r5, #9
 80054e8:	f200 808b 	bhi.w	8005602 <HAL_ADC_ConfigChannel+0x172>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80054ec:	6950      	ldr	r0, [r2, #20]
 80054ee:	688e      	ldr	r6, [r1, #8]
 80054f0:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 80054f4:	f04f 0c07 	mov.w	ip, #7
 80054f8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80054fc:	fa06 f60e 	lsl.w	r6, r6, lr
 8005500:	ea20 000c 	bic.w	r0, r0, ip
 8005504:	4330      	orrs	r0, r6
 8005506:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005508:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 800550a:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800550c:	694f      	ldr	r7, [r1, #20]
 800550e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005512:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8005514:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005516:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 800551a:	2e03      	cmp	r6, #3
 800551c:	f200 8148 	bhi.w	80057b0 <HAL_ADC_ConfigChannel+0x320>
 8005520:	e8df f016 	tbh	[pc, r6, lsl #1]
 8005524:	010a000d 	.word	0x010a000d
 8005528:	00f60100 	.word	0x00f60100
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800552c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800552e:	f042 0220 	orr.w	r2, r2, #32
 8005532:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800553a:	b003      	add	sp, #12
 800553c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 800553e:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8005540:	4eaa      	ldr	r6, [pc, #680]	; (80057ec <HAL_ADC_ConfigChannel+0x35c>)
 8005542:	403e      	ands	r6, r7
 8005544:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8005548:	4330      	orrs	r0, r6
 800554a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800554e:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005550:	6890      	ldr	r0, [r2, #8]
 8005552:	f000 0003 	and.w	r0, r0, #3
 8005556:	2801      	cmp	r0, #1
 8005558:	f000 80a8 	beq.w	80056ac <HAL_ADC_ConfigChannel+0x21c>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800555c:	2c01      	cmp	r4, #1
 800555e:	f000 80ad 	beq.w	80056bc <HAL_ADC_ConfigChannel+0x22c>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005562:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8005566:	2001      	movs	r0, #1
 8005568:	40a8      	lsls	r0, r5
 800556a:	ea21 0100 	bic.w	r1, r1, r0
 800556e:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005572:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005576:	d079      	beq.n	800566c <HAL_ADC_ConfigChannel+0x1dc>
 8005578:	499d      	ldr	r1, [pc, #628]	; (80057f0 <HAL_ADC_ConfigChannel+0x360>)
 800557a:	428a      	cmp	r2, r1
 800557c:	d076      	beq.n	800566c <HAL_ADC_ConfigChannel+0x1dc>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800557e:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005580:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005584:	d075      	beq.n	8005672 <HAL_ADC_ConfigChannel+0x1e2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005586:	2d11      	cmp	r5, #17
 8005588:	f040 80ae 	bne.w	80056e8 <HAL_ADC_ConfigChannel+0x258>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800558c:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800558e:	01c4      	lsls	r4, r0, #7
 8005590:	d472      	bmi.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005592:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005596:	d071      	beq.n	800567c <HAL_ADC_ConfigChannel+0x1ec>
 8005598:	4895      	ldr	r0, [pc, #596]	; (80057f0 <HAL_ADC_ConfigChannel+0x360>)
 800559a:	4282      	cmp	r2, r0
 800559c:	f000 80df 	beq.w	800575e <HAL_ADC_ConfigChannel+0x2ce>
 80055a0:	4c94      	ldr	r4, [pc, #592]	; (80057f4 <HAL_ADC_ConfigChannel+0x364>)
 80055a2:	42a2      	cmp	r2, r4
 80055a4:	f000 80fe 	beq.w	80057a4 <HAL_ADC_ConfigChannel+0x314>
 80055a8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80055ac:	4282      	cmp	r2, r0
 80055ae:	d066      	beq.n	800567e <HAL_ADC_ConfigChannel+0x1ee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80055b0:	6890      	ldr	r0, [r2, #8]
 80055b2:	f000 0003 	and.w	r0, r0, #3
 80055b6:	2801      	cmp	r0, #1
 80055b8:	f000 80f6 	beq.w	80057a8 <HAL_ADC_ConfigChannel+0x318>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80055bc:	2d10      	cmp	r5, #16
 80055be:	d05b      	beq.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80055c0:	2d11      	cmp	r5, #17
 80055c2:	d059      	beq.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80055c4:	2d12      	cmp	r5, #18
 80055c6:	d157      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80055c8:	688a      	ldr	r2, [r1, #8]
 80055ca:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055ce:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80055d0:	608a      	str	r2, [r1, #8]
 80055d2:	e7af      	b.n	8005534 <HAL_ADC_ConfigChannel+0xa4>
    else if (sConfig->Rank < 10U)
 80055d4:	2809      	cmp	r0, #9
 80055d6:	d925      	bls.n	8005624 <HAL_ADC_ConfigChannel+0x194>
    else if (sConfig->Rank < 15U)
 80055d8:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80055da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80055de:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 80055e2:	f200 8087 	bhi.w	80056f4 <HAL_ADC_ConfigChannel+0x264>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80055e6:	6b96      	ldr	r6, [r2, #56]	; 0x38
 80055e8:	680d      	ldr	r5, [r1, #0]
 80055ea:	383c      	subs	r0, #60	; 0x3c
 80055ec:	f04f 0c1f 	mov.w	ip, #31
 80055f0:	fa0c fc00 	lsl.w	ip, ip, r0
 80055f4:	ea26 060c 	bic.w	r6, r6, ip
 80055f8:	fa05 f000 	lsl.w	r0, r5, r0
 80055fc:	4330      	orrs	r0, r6
 80055fe:	6390      	str	r0, [r2, #56]	; 0x38
 8005600:	e76d      	b.n	80054de <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005602:	688f      	ldr	r7, [r1, #8]
 8005604:	6990      	ldr	r0, [r2, #24]
 8005606:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800560a:	3e1e      	subs	r6, #30
 800560c:	f04f 0e07 	mov.w	lr, #7
 8005610:	fa07 fc06 	lsl.w	ip, r7, r6
 8005614:	fa0e f606 	lsl.w	r6, lr, r6
 8005618:	ea20 0006 	bic.w	r0, r0, r6
 800561c:	ea40 000c 	orr.w	r0, r0, ip
 8005620:	6190      	str	r0, [r2, #24]
 8005622:	e771      	b.n	8005508 <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->SQR2,
 8005624:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005628:	0040      	lsls	r0, r0, #1
 800562a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800562c:	680d      	ldr	r5, [r1, #0]
 800562e:	381e      	subs	r0, #30
 8005630:	f04f 0c1f 	mov.w	ip, #31
 8005634:	fa0c fc00 	lsl.w	ip, ip, r0
 8005638:	ea26 060c 	bic.w	r6, r6, ip
 800563c:	fa05 f000 	lsl.w	r0, r5, r0
 8005640:	4330      	orrs	r0, r6
 8005642:	6350      	str	r0, [r2, #52]	; 0x34
 8005644:	e74b      	b.n	80054de <HAL_ADC_ConfigChannel+0x4e>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005646:	688c      	ldr	r4, [r1, #8]
 8005648:	6950      	ldr	r0, [r2, #20]
 800564a:	1c69      	adds	r1, r5, #1
 800564c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8005650:	2607      	movs	r6, #7
 8005652:	408c      	lsls	r4, r1
 8005654:	fa06 f101 	lsl.w	r1, r6, r1
 8005658:	ea20 0101 	bic.w	r1, r0, r1
 800565c:	4321      	orrs	r1, r4
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800565e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8005662:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005664:	d008      	beq.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
 8005666:	4962      	ldr	r1, [pc, #392]	; (80057f0 <HAL_ADC_ConfigChannel+0x360>)
 8005668:	428a      	cmp	r2, r1
 800566a:	d105      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800566c:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800566e:	4962      	ldr	r1, [pc, #392]	; (80057f8 <HAL_ADC_ConfigChannel+0x368>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005670:	d189      	bne.n	8005586 <HAL_ADC_ConfigChannel+0xf6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005672:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005674:	0206      	lsls	r6, r0, #8
 8005676:	d58c      	bpl.n	8005592 <HAL_ADC_ConfigChannel+0x102>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005678:	2000      	movs	r0, #0
 800567a:	e75b      	b.n	8005534 <HAL_ADC_ConfigChannel+0xa4>
 800567c:	4c5c      	ldr	r4, [pc, #368]	; (80057f0 <HAL_ADC_ConfigChannel+0x360>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800567e:	6890      	ldr	r0, [r2, #8]
 8005680:	f000 0003 	and.w	r0, r0, #3
 8005684:	2801      	cmp	r0, #1
 8005686:	d061      	beq.n	800574c <HAL_ADC_ConfigChannel+0x2bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005688:	68a0      	ldr	r0, [r4, #8]
 800568a:	f000 0003 	and.w	r0, r0, #3
 800568e:	2801      	cmp	r0, #1
 8005690:	d068      	beq.n	8005764 <HAL_ADC_ConfigChannel+0x2d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005692:	2d10      	cmp	r5, #16
 8005694:	d06a      	beq.n	800576c <HAL_ADC_ConfigChannel+0x2dc>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005696:	2d11      	cmp	r5, #17
 8005698:	d194      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x134>
 800569a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800569e:	d1eb      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80056a0:	688a      	ldr	r2, [r1, #8]
 80056a2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056a6:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80056a8:	608a      	str	r2, [r1, #8]
 80056aa:	e743      	b.n	8005534 <HAL_ADC_ConfigChannel+0xa4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80056ac:	6810      	ldr	r0, [r2, #0]
 80056ae:	07c7      	lsls	r7, r0, #31
 80056b0:	f57f af54 	bpl.w	800555c <HAL_ADC_ConfigChannel+0xcc>
 80056b4:	e7e0      	b.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
  __HAL_LOCK(hadc);
 80056b6:	2002      	movs	r0, #2
}
 80056b8:	b003      	add	sp, #12
 80056ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80056bc:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 80056c0:	40ac      	lsls	r4, r5
 80056c2:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80056c4:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80056c6:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80056ca:	d9bc      	bls.n	8005646 <HAL_ADC_ConfigChannel+0x1b6>
        MODIFY_REG(hadc->Instance->SMPR2,
 80056cc:	688c      	ldr	r4, [r1, #8]
 80056ce:	6990      	ldr	r0, [r2, #24]
 80056d0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80056d4:	391b      	subs	r1, #27
 80056d6:	2607      	movs	r6, #7
 80056d8:	408c      	lsls	r4, r1
 80056da:	fa06 f101 	lsl.w	r1, r6, r1
 80056de:	ea20 0101 	bic.w	r1, r0, r1
 80056e2:	4321      	orrs	r1, r4
 80056e4:	6191      	str	r1, [r2, #24]
 80056e6:	e744      	b.n	8005572 <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80056e8:	2d12      	cmp	r5, #18
 80056ea:	d1c5      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80056ec:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80056ee:	0240      	lsls	r0, r0, #9
 80056f0:	d4c2      	bmi.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
 80056f2:	e74e      	b.n	8005592 <HAL_ADC_ConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80056f4:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 80056f6:	680d      	ldr	r5, [r1, #0]
 80056f8:	385a      	subs	r0, #90	; 0x5a
 80056fa:	f04f 0c1f 	mov.w	ip, #31
 80056fe:	fa0c fc00 	lsl.w	ip, ip, r0
 8005702:	ea26 060c 	bic.w	r6, r6, ip
 8005706:	fa05 f000 	lsl.w	r0, r5, r0
 800570a:	4330      	orrs	r0, r6
 800570c:	63d0      	str	r0, [r2, #60]	; 0x3c
 800570e:	e6e6      	b.n	80054de <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005710:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8005712:	4e36      	ldr	r6, [pc, #216]	; (80057ec <HAL_ADC_ConfigChannel+0x35c>)
 8005714:	403e      	ands	r6, r7
 8005716:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800571a:	4330      	orrs	r0, r6
 800571c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005720:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8005722:	e715      	b.n	8005550 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005724:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8005726:	4e31      	ldr	r6, [pc, #196]	; (80057ec <HAL_ADC_ConfigChannel+0x35c>)
 8005728:	403e      	ands	r6, r7
 800572a:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800572e:	4330      	orrs	r0, r6
 8005730:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005734:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8005736:	e70b      	b.n	8005550 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005738:	6e57      	ldr	r7, [r2, #100]	; 0x64
 800573a:	4e2c      	ldr	r6, [pc, #176]	; (80057ec <HAL_ADC_ConfigChannel+0x35c>)
 800573c:	403e      	ands	r6, r7
 800573e:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8005742:	4330      	orrs	r0, r6
 8005744:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005748:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 800574a:	e701      	b.n	8005550 <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800574c:	6810      	ldr	r0, [r2, #0]
 800574e:	07c6      	lsls	r6, r0, #31
 8005750:	d59a      	bpl.n	8005688 <HAL_ADC_ConfigChannel+0x1f8>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005754:	f042 0220 	orr.w	r2, r2, #32
        tmp_hal_status = HAL_ERROR;
 8005758:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800575a:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 800575c:	e6ea      	b.n	8005534 <HAL_ADC_ConfigChannel+0xa4>
 800575e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8005762:	e78c      	b.n	800567e <HAL_ADC_ConfigChannel+0x1ee>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	07c0      	lsls	r0, r0, #31
 8005768:	d4f3      	bmi.n	8005752 <HAL_ADC_ConfigChannel+0x2c2>
 800576a:	e792      	b.n	8005692 <HAL_ADC_ConfigChannel+0x202>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800576c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005770:	d182      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005772:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_ADC_ConfigChannel+0x36c>)
 8005774:	4c22      	ldr	r4, [pc, #136]	; (8005800 <HAL_ADC_ConfigChannel+0x370>)
 8005776:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005778:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800577a:	fba4 4202 	umull	r4, r2, r4, r2
 800577e:	0c92      	lsrs	r2, r2, #18
 8005780:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005784:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005786:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800578a:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800578c:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800578e:	9a01      	ldr	r2, [sp, #4]
 8005790:	2a00      	cmp	r2, #0
 8005792:	f43f af71 	beq.w	8005678 <HAL_ADC_ConfigChannel+0x1e8>
            wait_loop_index--;
 8005796:	9a01      	ldr	r2, [sp, #4]
 8005798:	3a01      	subs	r2, #1
 800579a:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800579c:	9a01      	ldr	r2, [sp, #4]
 800579e:	2a00      	cmp	r2, #0
 80057a0:	d1f9      	bne.n	8005796 <HAL_ADC_ConfigChannel+0x306>
 80057a2:	e769      	b.n	8005678 <HAL_ADC_ConfigChannel+0x1e8>
 80057a4:	4c17      	ldr	r4, [pc, #92]	; (8005804 <HAL_ADC_ConfigChannel+0x374>)
 80057a6:	e76a      	b.n	800567e <HAL_ADC_ConfigChannel+0x1ee>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	07d7      	lsls	r7, r2, #31
 80057ac:	d4d1      	bmi.n	8005752 <HAL_ADC_ConfigChannel+0x2c2>
 80057ae:	e705      	b.n	80055bc <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057b0:	6e10      	ldr	r0, [r2, #96]	; 0x60
 80057b2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80057b6:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 80057ba:	ea4f 6685 	mov.w	r6, r5, lsl #26
 80057be:	d023      	beq.n	8005808 <HAL_ADC_ConfigChannel+0x378>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057c0:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80057c2:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80057c6:	4286      	cmp	r6, r0
 80057c8:	d023      	beq.n	8005812 <HAL_ADC_ConfigChannel+0x382>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057ca:	6e90      	ldr	r0, [r2, #104]	; 0x68
 80057cc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80057d0:	4286      	cmp	r6, r0
 80057d2:	d023      	beq.n	800581c <HAL_ADC_ConfigChannel+0x38c>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80057d4:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80057d6:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80057da:	4286      	cmp	r6, r0
 80057dc:	f47f aeb8 	bne.w	8005550 <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80057e0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 80057e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80057e6:	66d0      	str	r0, [r2, #108]	; 0x6c
 80057e8:	e6b2      	b.n	8005550 <HAL_ADC_ConfigChannel+0xc0>
 80057ea:	bf00      	nop
 80057ec:	83fff000 	.word	0x83fff000
 80057f0:	50000100 	.word	0x50000100
 80057f4:	50000400 	.word	0x50000400
 80057f8:	50000300 	.word	0x50000300
 80057fc:	20000000 	.word	0x20000000
 8005800:	431bde83 	.word	0x431bde83
 8005804:	50000500 	.word	0x50000500
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005808:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800580a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800580e:	6610      	str	r0, [r2, #96]	; 0x60
 8005810:	e7d6      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x330>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005812:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8005814:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005818:	6650      	str	r0, [r2, #100]	; 0x64
 800581a:	e7d6      	b.n	80057ca <HAL_ADC_ConfigChannel+0x33a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800581c:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800581e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005822:	6690      	str	r0, [r2, #104]	; 0x68
 8005824:	e7d6      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x344>
 8005826:	bf00      	nop

08005828 <HAL_ADCEx_InjectedConfigChannel>:
{
 8005828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800582c:	4602      	mov	r2, r0
 800582e:	b082      	sub	sp, #8
  __HAL_LOCK(hadc);
 8005830:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005834:	6900      	ldr	r0, [r0, #16]
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005836:	68cd      	ldr	r5, [r1, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005838:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800583a:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 800583c:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 800583e:	f000 81ae 	beq.w	8005b9e <HAL_ADCEx_InjectedConfigChannel+0x376>
 8005842:	2301      	movs	r3, #1
 8005844:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005848:	b358      	cbz	r0, 80058a2 <HAL_ADCEx_InjectedConfigChannel+0x7a>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 800584a:	698f      	ldr	r7, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800584c:	429f      	cmp	r7, r3
 800584e:	d028      	beq.n	80058a2 <HAL_ADCEx_InjectedConfigChannel+0x7a>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005850:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8005852:	2800      	cmp	r0, #0
 8005854:	f040 812e 	bne.w	8005ab4 <HAL_ADCEx_InjectedConfigChannel+0x28c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005858:	6a0c      	ldr	r4, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800585a:	64d7      	str	r7, [r2, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800585c:	2c01      	cmp	r4, #1
 800585e:	f000 81f0 	beq.w	8005c42 <HAL_ADCEx_InjectedConfigChannel+0x41a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005862:	6813      	ldr	r3, [r2, #0]
 8005864:	48ac      	ldr	r0, [pc, #688]	; (8005b18 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8005866:	4283      	cmp	r3, r0
 8005868:	f107 37ff 	add.w	r7, r7, #4294967295
 800586c:	f000 81e1 	beq.w	8005c32 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8005870:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8005874:	4283      	cmp	r3, r0
 8005876:	f000 81dc 	beq.w	8005c32 <HAL_ADCEx_InjectedConfigChannel+0x40a>
 800587a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800587c:	4338      	orrs	r0, r7
 800587e:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005880:	684c      	ldr	r4, [r1, #4]
 8005882:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8005884:	64d7      	str	r7, [r2, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005886:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800588a:	0064      	lsls	r4, r4, #1
 800588c:	3402      	adds	r4, #2
 800588e:	271f      	movs	r7, #31
 8005890:	40a6      	lsls	r6, r4
 8005892:	fa07 f404 	lsl.w	r4, r7, r4
 8005896:	ea20 0004 	bic.w	r0, r0, r4
 800589a:	4330      	orrs	r0, r6
 800589c:	6490      	str	r0, [r2, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800589e:	2000      	movs	r0, #0
 80058a0:	e009      	b.n	80058b6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80058a2:	684b      	ldr	r3, [r1, #4]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	f000 80e9 	beq.w	8005a7c <HAL_ADCEx_InjectedConfigChannel+0x254>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058aa:	6c10      	ldr	r0, [r2, #64]	; 0x40
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80058ac:	6813      	ldr	r3, [r2, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058ae:	f040 0020 	orr.w	r0, r0, #32
 80058b2:	6410      	str	r0, [r2, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 80058b4:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80058b6:	689c      	ldr	r4, [r3, #8]
 80058b8:	0726      	lsls	r6, r4, #28
 80058ba:	d40d      	bmi.n	80058d8 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80058bc:	7f4c      	ldrb	r4, [r1, #29]
 80058be:	2c00      	cmp	r4, #0
 80058c0:	f040 80c5 	bne.w	8005a4e <HAL_ADCEx_InjectedConfigChannel+0x226>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 80058c4:	7f0c      	ldrb	r4, [r1, #28]
 80058c6:	68de      	ldr	r6, [r3, #12]
 80058c8:	7f8f      	ldrb	r7, [r1, #30]
 80058ca:	0524      	lsls	r4, r4, #20
 80058cc:	f426 1640 	bic.w	r6, r6, #3145728	; 0x300000
 80058d0:	ea44 5447 	orr.w	r4, r4, r7, lsl #21
 80058d4:	4334      	orrs	r4, r6
 80058d6:	60dc      	str	r4, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80058d8:	689c      	ldr	r4, [r3, #8]
 80058da:	f014 0f0c 	tst.w	r4, #12
 80058de:	d13d      	bne.n	800595c <HAL_ADCEx_InjectedConfigChannel+0x134>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80058e0:	6a0c      	ldr	r4, [r1, #32]
 80058e2:	2c01      	cmp	r4, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 80058e4:	68dc      	ldr	r4, [r3, #12]
 80058e6:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80058ea:	f000 8153 	beq.w	8005b94 <HAL_ADCEx_InjectedConfigChannel+0x36c>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80058ee:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80058f0:	7f4c      	ldrb	r4, [r1, #29]
 80058f2:	2c01      	cmp	r4, #1
 80058f4:	f000 8130 	beq.w	8005b58 <HAL_ADCEx_InjectedConfigChannel+0x330>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80058f8:	680e      	ldr	r6, [r1, #0]
 80058fa:	2e09      	cmp	r6, #9
 80058fc:	f240 8097 	bls.w	8005a2e <HAL_ADCEx_InjectedConfigChannel+0x206>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8005900:	688f      	ldr	r7, [r1, #8]
 8005902:	699c      	ldr	r4, [r3, #24]
 8005904:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8005908:	f1ac 0c1e 	sub.w	ip, ip, #30
 800590c:	fa07 fe0c 	lsl.w	lr, r7, ip
 8005910:	2707      	movs	r7, #7
 8005912:	fa07 fc0c 	lsl.w	ip, r7, ip
 8005916:	ea24 040c 	bic.w	r4, r4, ip
 800591a:	ea44 040e 	orr.w	r4, r4, lr
 800591e:	619c      	str	r4, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005920:	68dc      	ldr	r4, [r3, #12]
 8005922:	f3c4 0cc1 	ubfx	ip, r4, #3, #2
    switch (sConfigInjected->InjectedOffsetNumber)
 8005926:	690c      	ldr	r4, [r1, #16]
 8005928:	f104 3eff 	add.w	lr, r4, #4294967295
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800592c:	694c      	ldr	r4, [r1, #20]
 800592e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005932:	fa04 f40c 	lsl.w	r4, r4, ip
    switch (sConfigInjected->InjectedOffsetNumber)
 8005936:	f1be 0f03 	cmp.w	lr, #3
 800593a:	f200 818e 	bhi.w	8005c5a <HAL_ADCEx_InjectedConfigChannel+0x432>
 800593e:	e8df f01e 	tbh	[pc, lr, lsl #1]
 8005942:	0004      	.short	0x0004
 8005944:	00f70101 	.word	0x00f70101
 8005948:	00e1      	.short	0x00e1
      MODIFY_REG(hadc->Instance->OFR1                               ,
 800594a:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 800594c:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005950:	4e72      	ldr	r6, [pc, #456]	; (8005b1c <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
 8005952:	403e      	ands	r6, r7
 8005954:	4334      	orrs	r4, r6
 8005956:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800595a:	661c      	str	r4, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800595c:	689c      	ldr	r4, [r3, #8]
 800595e:	f004 0403 	and.w	r4, r4, #3
 8005962:	2c01      	cmp	r4, #1
 8005964:	d041      	beq.n	80059ea <HAL_ADCEx_InjectedConfigChannel+0x1c2>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005966:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005968:	680c      	ldr	r4, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 800596a:	d044      	beq.n	80059f6 <HAL_ADCEx_InjectedConfigChannel+0x1ce>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800596c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005970:	2501      	movs	r5, #1
 8005972:	40a5      	lsls	r5, r4
 8005974:	ea21 0105 	bic.w	r1, r1, r5
 8005978:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800597c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005980:	d02c      	beq.n	80059dc <HAL_ADCEx_InjectedConfigChannel+0x1b4>
 8005982:	4967      	ldr	r1, [pc, #412]	; (8005b20 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8005984:	428b      	cmp	r3, r1
 8005986:	d029      	beq.n	80059dc <HAL_ADCEx_InjectedConfigChannel+0x1b4>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8005988:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800598a:	4966      	ldr	r1, [pc, #408]	; (8005b24 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800598c:	d029      	beq.n	80059e2 <HAL_ADCEx_InjectedConfigChannel+0x1ba>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800598e:	2c11      	cmp	r4, #17
 8005990:	d16e      	bne.n	8005a70 <HAL_ADCEx_InjectedConfigChannel+0x248>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005992:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8005994:	01ee      	lsls	r6, r5, #7
 8005996:	d41b      	bmi.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800599c:	f000 8103 	beq.w	8005ba6 <HAL_ADCEx_InjectedConfigChannel+0x37e>
 80059a0:	4d5f      	ldr	r5, [pc, #380]	; (8005b20 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 80059a2:	42ab      	cmp	r3, r5
 80059a4:	f000 80de 	beq.w	8005b64 <HAL_ADCEx_InjectedConfigChannel+0x33c>
 80059a8:	4e5b      	ldr	r6, [pc, #364]	; (8005b18 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 80059aa:	42b3      	cmp	r3, r6
 80059ac:	f000 814d 	beq.w	8005c4a <HAL_ADCEx_InjectedConfigChannel+0x422>
 80059b0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059b4:	42ab      	cmp	r3, r5
 80059b6:	f000 80d7 	beq.w	8005b68 <HAL_ADCEx_InjectedConfigChannel+0x340>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80059ba:	689d      	ldr	r5, [r3, #8]
 80059bc:	f005 0503 	and.w	r5, r5, #3
 80059c0:	2d01      	cmp	r5, #1
 80059c2:	f000 8130 	beq.w	8005c26 <HAL_ADCEx_InjectedConfigChannel+0x3fe>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80059c6:	2c10      	cmp	r4, #16
 80059c8:	d002      	beq.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80059ca:	2c11      	cmp	r4, #17
 80059cc:	f040 80da 	bne.w	8005b84 <HAL_ADCEx_InjectedConfigChannel+0x35c>
  __HAL_UNLOCK(hadc);
 80059d0:	2300      	movs	r3, #0
 80059d2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80059d6:	b002      	add	sp, #8
 80059d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80059dc:	2c10      	cmp	r4, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059de:	4952      	ldr	r1, [pc, #328]	; (8005b28 <HAL_ADCEx_InjectedConfigChannel+0x300>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80059e0:	d1d5      	bne.n	800598e <HAL_ADCEx_InjectedConfigChannel+0x166>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80059e2:	688d      	ldr	r5, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80059e4:	022f      	lsls	r7, r5, #8
 80059e6:	d5d7      	bpl.n	8005998 <HAL_ADCEx_InjectedConfigChannel+0x170>
 80059e8:	e7f2      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80059ea:	681c      	ldr	r4, [r3, #0]
 80059ec:	07e4      	lsls	r4, r4, #31
 80059ee:	d4ef      	bmi.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80059f0:	2d01      	cmp	r5, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80059f2:	680c      	ldr	r4, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80059f4:	d1ba      	bne.n	800596c <HAL_ADCEx_InjectedConfigChannel+0x144>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80059f6:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 80059fa:	40a5      	lsls	r5, r4
 80059fc:	4335      	orrs	r5, r6
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80059fe:	2c09      	cmp	r4, #9
        MODIFY_REG(hadc->Instance->SMPR2,
 8005a00:	688e      	ldr	r6, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8005a02:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8005a06:	d870      	bhi.n	8005aea <HAL_ADCEx_InjectedConfigChannel+0x2c2>
        MODIFY_REG(hadc->Instance->SMPR1,
 8005a08:	1c65      	adds	r5, r4, #1
 8005a0a:	6959      	ldr	r1, [r3, #20]
 8005a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a10:	2707      	movs	r7, #7
 8005a12:	40ae      	lsls	r6, r5
 8005a14:	fa07 f505 	lsl.w	r5, r7, r5
 8005a18:	ea21 0105 	bic.w	r1, r1, r5
 8005a1c:	4331      	orrs	r1, r6
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8005a22:	6159      	str	r1, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a24:	d0d4      	beq.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
 8005a26:	493e      	ldr	r1, [pc, #248]	; (8005b20 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	d1ad      	bne.n	8005988 <HAL_ADCEx_InjectedConfigChannel+0x160>
 8005a2c:	e7d0      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8005a2e:	695c      	ldr	r4, [r3, #20]
 8005a30:	688f      	ldr	r7, [r1, #8]
 8005a32:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8005a36:	f04f 0e07 	mov.w	lr, #7
 8005a3a:	fa0e fe08 	lsl.w	lr, lr, r8
 8005a3e:	fa07 fc08 	lsl.w	ip, r7, r8
 8005a42:	ea24 040e 	bic.w	r4, r4, lr
 8005a46:	ea44 040c 	orr.w	r4, r4, ip
 8005a4a:	615c      	str	r4, [r3, #20]
 8005a4c:	e768      	b.n	8005920 <HAL_ADCEx_InjectedConfigChannel+0xf8>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8005a4e:	68dc      	ldr	r4, [r3, #12]
 8005a50:	7f8e      	ldrb	r6, [r1, #30]
 8005a52:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8005a56:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8005a5a:	60dc      	str	r4, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8005a5c:	7f0c      	ldrb	r4, [r1, #28]
 8005a5e:	2c01      	cmp	r4, #1
 8005a60:	f47f af3a 	bne.w	80058d8 <HAL_ADCEx_InjectedConfigChannel+0xb0>
        tmp_hal_status = HAL_ERROR;
 8005a64:	4620      	mov	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a66:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8005a68:	f044 0420 	orr.w	r4, r4, #32
 8005a6c:	6414      	str	r4, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005a6e:	e733      	b.n	80058d8 <HAL_ADCEx_InjectedConfigChannel+0xb0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005a70:	2c12      	cmp	r4, #18
 8005a72:	d1ad      	bne.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005a74:	688d      	ldr	r5, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8005a76:	026d      	lsls	r5, r5, #9
 8005a78:	d4aa      	bmi.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
 8005a7a:	e78d      	b.n	8005998 <HAL_ADCEx_InjectedConfigChannel+0x170>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005a7c:	6a0c      	ldr	r4, [r1, #32]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8005a7e:	6808      	ldr	r0, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005a80:	2c01      	cmp	r4, #1
 8005a82:	f000 809b 	beq.w	8005bbc <HAL_ADCEx_InjectedConfigChannel+0x394>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8005a86:	6813      	ldr	r3, [r2, #0]
 8005a88:	4e23      	ldr	r6, [pc, #140]	; (8005b18 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8005a8a:	42b3      	cmp	r3, r6
 8005a8c:	ea4f 2000 	mov.w	r0, r0, lsl #8
 8005a90:	f000 8097 	beq.w	8005bc2 <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8005a94:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8005a98:	42b3      	cmp	r3, r6
 8005a9a:	f000 8092 	beq.w	8005bc2 <HAL_ADCEx_InjectedConfigChannel+0x39a>
 8005a9e:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005aa0:	4330      	orrs	r0, r6
 8005aa2:	4320      	orrs	r0, r4
      MODIFY_REG(hadc->Instance->JSQR           ,
 8005aa4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005aa6:	4e21      	ldr	r6, [pc, #132]	; (8005b2c <HAL_ADCEx_InjectedConfigChannel+0x304>)
 8005aa8:	4034      	ands	r4, r6
 8005aaa:	4304      	orrs	r4, r0
 8005aac:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005aae:	6490      	str	r0, [r2, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e700      	b.n	80058b6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005ab4:	684b      	ldr	r3, [r1, #4]
 8005ab6:	680f      	ldr	r7, [r1, #0]
 8005ab8:	6c96      	ldr	r6, [r2, #72]	; 0x48
 8005aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	3302      	adds	r3, #2
 8005ac2:	f04f 0c1f 	mov.w	ip, #31
 8005ac6:	409f      	lsls	r7, r3
 8005ac8:	fa0c f303 	lsl.w	r3, ip, r3
 8005acc:	ea26 0603 	bic.w	r6, r6, r3
      hadc->InjectionConfig.ChannelCount --;
 8005ad0:	3801      	subs	r0, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005ad2:	433e      	orrs	r6, r7
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005ad4:	6813      	ldr	r3, [r2, #0]
      hadc->InjectionConfig.ChannelCount --;
 8005ad6:	64d0      	str	r0, [r2, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8005ad8:	6496      	str	r6, [r2, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d1e8      	bne.n	8005ab0 <HAL_ADCEx_InjectedConfigChannel+0x288>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8005ade:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005ae0:	4f12      	ldr	r7, [pc, #72]	; (8005b2c <HAL_ADCEx_InjectedConfigChannel+0x304>)
 8005ae2:	403c      	ands	r4, r7
 8005ae4:	4334      	orrs	r4, r6
 8005ae6:	64dc      	str	r4, [r3, #76]	; 0x4c
 8005ae8:	e6e5      	b.n	80058b6 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8005aea:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8005aee:	6999      	ldr	r1, [r3, #24]
 8005af0:	3d1b      	subs	r5, #27
 8005af2:	2707      	movs	r7, #7
 8005af4:	40ae      	lsls	r6, r5
 8005af6:	fa07 f505 	lsl.w	r5, r7, r5
 8005afa:	ea21 0105 	bic.w	r1, r1, r5
 8005afe:	4331      	orrs	r1, r6
 8005b00:	6199      	str	r1, [r3, #24]
 8005b02:	e73b      	b.n	800597c <HAL_ADCEx_InjectedConfigChannel+0x154>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8005b04:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 8005b06:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005b0a:	4e04      	ldr	r6, [pc, #16]	; (8005b1c <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
 8005b0c:	403e      	ands	r6, r7
 8005b0e:	4334      	orrs	r4, r6
 8005b10:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005b14:	66dc      	str	r4, [r3, #108]	; 0x6c
      break;
 8005b16:	e721      	b.n	800595c <HAL_ADCEx_InjectedConfigChannel+0x134>
 8005b18:	50000400 	.word	0x50000400
 8005b1c:	83fff000 	.word	0x83fff000
 8005b20:	50000100 	.word	0x50000100
 8005b24:	50000700 	.word	0x50000700
 8005b28:	50000300 	.word	0x50000300
 8005b2c:	82082000 	.word	0x82082000
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8005b30:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8005b32:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005b36:	4e5f      	ldr	r6, [pc, #380]	; (8005cb4 <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8005b38:	403e      	ands	r6, r7
 8005b3a:	4334      	orrs	r4, r6
 8005b3c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005b40:	669c      	str	r4, [r3, #104]	; 0x68
      break;
 8005b42:	e70b      	b.n	800595c <HAL_ADCEx_InjectedConfigChannel+0x134>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8005b44:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8005b46:	ea44 6486 	orr.w	r4, r4, r6, lsl #26
 8005b4a:	4e5a      	ldr	r6, [pc, #360]	; (8005cb4 <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8005b4c:	403e      	ands	r6, r7
 8005b4e:	4334      	orrs	r4, r6
 8005b50:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8005b54:	665c      	str	r4, [r3, #100]	; 0x64
      break;
 8005b56:	e701      	b.n	800595c <HAL_ADCEx_InjectedConfigChannel+0x134>
        tmp_hal_status = HAL_ERROR;
 8005b58:	4620      	mov	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b5a:	6c14      	ldr	r4, [r2, #64]	; 0x40
 8005b5c:	f044 0420 	orr.w	r4, r4, #32
 8005b60:	6414      	str	r4, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005b62:	e6c9      	b.n	80058f8 <HAL_ADCEx_InjectedConfigChannel+0xd0>
 8005b64:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005b68:	689d      	ldr	r5, [r3, #8]
 8005b6a:	f005 0503 	and.w	r5, r5, #3
 8005b6e:	2d01      	cmp	r5, #1
 8005b70:	d01b      	beq.n	8005baa <HAL_ADCEx_InjectedConfigChannel+0x382>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005b72:	68b5      	ldr	r5, [r6, #8]
 8005b74:	f005 0503 	and.w	r5, r5, #3
 8005b78:	2d01      	cmp	r5, #1
 8005b7a:	d02a      	beq.n	8005bd2 <HAL_ADCEx_InjectedConfigChannel+0x3aa>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005b7c:	2c10      	cmp	r4, #16
 8005b7e:	d02c      	beq.n	8005bda <HAL_ADCEx_InjectedConfigChannel+0x3b2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005b80:	2c11      	cmp	r4, #17
 8005b82:	d047      	beq.n	8005c14 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005b84:	2c12      	cmp	r4, #18
 8005b86:	f47f af23 	bne.w	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005b8a:	688b      	ldr	r3, [r1, #8]
 8005b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b90:	608b      	str	r3, [r1, #8]
 8005b92:	e71d      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8005b94:	7f4e      	ldrb	r6, [r1, #29]
 8005b96:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8005b9a:	60dc      	str	r4, [r3, #12]
 8005b9c:	e6ac      	b.n	80058f8 <HAL_ADCEx_InjectedConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8005b9e:	2002      	movs	r0, #2
}
 8005ba0:	b002      	add	sp, #8
 8005ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba6:	4e44      	ldr	r6, [pc, #272]	; (8005cb8 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8005ba8:	e7de      	b.n	8005b68 <HAL_ADCEx_InjectedConfigChannel+0x340>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005baa:	681d      	ldr	r5, [r3, #0]
 8005bac:	07ef      	lsls	r7, r5, #31
 8005bae:	d5e0      	bpl.n	8005b72 <HAL_ADCEx_InjectedConfigChannel+0x34a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bb0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005bb2:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8005bb6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bb8:	6413      	str	r3, [r2, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8005bba:	e709      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005bbc:	6813      	ldr	r3, [r2, #0]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8005bbe:	0200      	lsls	r0, r0, #8
 8005bc0:	e770      	b.n	8005aa4 <HAL_ADCEx_InjectedConfigChannel+0x27c>
 8005bc2:	2c14      	cmp	r4, #20
 8005bc4:	d043      	beq.n	8005c4e <HAL_ADCEx_InjectedConfigChannel+0x426>
 8005bc6:	2c1c      	cmp	r4, #28
 8005bc8:	d031      	beq.n	8005c2e <HAL_ADCEx_InjectedConfigChannel+0x406>
{
 8005bca:	2c08      	cmp	r4, #8
 8005bcc:	bf08      	it	eq
 8005bce:	2434      	moveq	r4, #52	; 0x34
 8005bd0:	e765      	b.n	8005a9e <HAL_ADCEx_InjectedConfigChannel+0x276>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005bd2:	6835      	ldr	r5, [r6, #0]
 8005bd4:	07ed      	lsls	r5, r5, #31
 8005bd6:	d4eb      	bmi.n	8005bb0 <HAL_ADCEx_InjectedConfigChannel+0x388>
 8005bd8:	e7d0      	b.n	8005b7c <HAL_ADCEx_InjectedConfigChannel+0x354>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bde:	f47f aef7 	bne.w	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005be2:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8005be4:	4d36      	ldr	r5, [pc, #216]	; (8005cc0 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 8005be6:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005be8:	688c      	ldr	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bea:	fba5 5303 	umull	r5, r3, r5, r3
 8005bee:	0c9b      	lsrs	r3, r3, #18
 8005bf0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005bf4:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005bf6:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8005bfa:	608c      	str	r4, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bfc:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005bfe:	9b01      	ldr	r3, [sp, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f43f aee5 	beq.w	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
            wait_loop_index--;
 8005c06:	9b01      	ldr	r3, [sp, #4]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f9      	bne.n	8005c06 <HAL_ADCEx_InjectedConfigChannel+0x3de>
 8005c12:	e6dd      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c18:	f47f aeda 	bne.w	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005c1c:	688b      	ldr	r3, [r1, #8]
 8005c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c22:	608b      	str	r3, [r1, #8]
 8005c24:	e6d4      	b.n	80059d0 <HAL_ADCEx_InjectedConfigChannel+0x1a8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	07db      	lsls	r3, r3, #31
 8005c2a:	d4c1      	bmi.n	8005bb0 <HAL_ADCEx_InjectedConfigChannel+0x388>
 8005c2c:	e6cb      	b.n	80059c6 <HAL_ADCEx_InjectedConfigChannel+0x19e>
{
 8005c2e:	2410      	movs	r4, #16
 8005c30:	e735      	b.n	8005a9e <HAL_ADCEx_InjectedConfigChannel+0x276>
 8005c32:	2c14      	cmp	r4, #20
 8005c34:	d00f      	beq.n	8005c56 <HAL_ADCEx_InjectedConfigChannel+0x42e>
 8005c36:	2c1c      	cmp	r4, #28
 8005c38:	d00b      	beq.n	8005c52 <HAL_ADCEx_InjectedConfigChannel+0x42a>
 8005c3a:	2c08      	cmp	r4, #8
 8005c3c:	bf08      	it	eq
 8005c3e:	2434      	moveq	r4, #52	; 0x34
 8005c40:	e61b      	b.n	800587a <HAL_ADCEx_InjectedConfigChannel+0x52>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8005c42:	1e78      	subs	r0, r7, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8005c44:	6813      	ldr	r3, [r2, #0]
 8005c46:	4607      	mov	r7, r0
 8005c48:	e61a      	b.n	8005880 <HAL_ADCEx_InjectedConfigChannel+0x58>
 8005c4a:	4e1e      	ldr	r6, [pc, #120]	; (8005cc4 <HAL_ADCEx_InjectedConfigChannel+0x49c>)
 8005c4c:	e78c      	b.n	8005b68 <HAL_ADCEx_InjectedConfigChannel+0x340>
{
 8005c4e:	241c      	movs	r4, #28
 8005c50:	e725      	b.n	8005a9e <HAL_ADCEx_InjectedConfigChannel+0x276>
 8005c52:	2410      	movs	r4, #16
 8005c54:	e611      	b.n	800587a <HAL_ADCEx_InjectedConfigChannel+0x52>
 8005c56:	241c      	movs	r4, #28
 8005c58:	e60f      	b.n	800587a <HAL_ADCEx_InjectedConfigChannel+0x52>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005c5a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8005c5c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005c60:	ebb4 6f86 	cmp.w	r4, r6, lsl #26
 8005c64:	ea4f 6786 	mov.w	r7, r6, lsl #26
 8005c68:	d014      	beq.n	8005c94 <HAL_ADCEx_InjectedConfigChannel+0x46c>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005c6a:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8005c6c:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005c70:	42a7      	cmp	r7, r4
 8005c72:	d014      	beq.n	8005c9e <HAL_ADCEx_InjectedConfigChannel+0x476>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005c74:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8005c76:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005c7a:	42a7      	cmp	r7, r4
 8005c7c:	d014      	beq.n	8005ca8 <HAL_ADCEx_InjectedConfigChannel+0x480>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8005c7e:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8005c80:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8005c84:	42a7      	cmp	r7, r4
 8005c86:	f47f ae69 	bne.w	800595c <HAL_ADCEx_InjectedConfigChannel+0x134>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005c8a:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8005c8c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005c90:	66dc      	str	r4, [r3, #108]	; 0x6c
 8005c92:	e663      	b.n	800595c <HAL_ADCEx_InjectedConfigChannel+0x134>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005c94:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8005c96:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005c9a:	661c      	str	r4, [r3, #96]	; 0x60
 8005c9c:	e7e5      	b.n	8005c6a <HAL_ADCEx_InjectedConfigChannel+0x442>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005c9e:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8005ca0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005ca4:	665c      	str	r4, [r3, #100]	; 0x64
 8005ca6:	e7e5      	b.n	8005c74 <HAL_ADCEx_InjectedConfigChannel+0x44c>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005ca8:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8005caa:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005cae:	669c      	str	r4, [r3, #104]	; 0x68
 8005cb0:	e7e5      	b.n	8005c7e <HAL_ADCEx_InjectedConfigChannel+0x456>
 8005cb2:	bf00      	nop
 8005cb4:	83fff000 	.word	0x83fff000
 8005cb8:	50000100 	.word	0x50000100
 8005cbc:	20000000 	.word	0x20000000
 8005cc0:	431bde83 	.word	0x431bde83
 8005cc4:	50000500 	.word	0x50000500

08005cc8 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005cc8:	6802      	ldr	r2, [r0, #0]
 8005cca:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
{
 8005cce:	b4f0      	push	{r4, r5, r6, r7}
 8005cd0:	4603      	mov	r3, r0
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005cd2:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005cd4:	4841      	ldr	r0, [pc, #260]	; (8005ddc <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8005cd6:	d00d      	beq.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8005cd8:	4282      	cmp	r2, r0
 8005cda:	d009      	beq.n	8005cf0 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8005cdc:	f500 7040 	add.w	r0, r0, #768	; 0x300
 8005ce0:	4282      	cmp	r2, r0
 8005ce2:	d049      	beq.n	8005d78 <HAL_ADCEx_MultiModeConfigChannel+0xb0>
 8005ce4:	4c3e      	ldr	r4, [pc, #248]	; (8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8005ce6:	42a2      	cmp	r2, r4
 8005ce8:	d004      	beq.n	8005cf4 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8005cea:	2001      	movs	r0, #1
} 
 8005cec:	bcf0      	pop	{r4, r5, r6, r7}
 8005cee:	4770      	bx	lr
 8005cf0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8005cf4:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
 8005cf8:	f1bc 0f01 	cmp.w	ip, #1
 8005cfc:	d042      	beq.n	8005d84 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8005cfe:	2401      	movs	r4, #1
 8005d00:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005d04:	6894      	ldr	r4, [r2, #8]
 8005d06:	0764      	lsls	r4, r4, #29
 8005d08:	d509      	bpl.n	8005d1e <HAL_ADCEx_MultiModeConfigChannel+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d0c:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8005d10:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8005d1a:	bcf0      	pop	{r4, r5, r6, r7}
 8005d1c:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005d1e:	6884      	ldr	r4, [r0, #8]
 8005d20:	0767      	lsls	r7, r4, #29
 8005d22:	d4f2      	bmi.n	8005d0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d24:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8005d28:	d045      	beq.n	8005db6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005d2a:	4f2c      	ldr	r7, [pc, #176]	; (8005ddc <HAL_ADCEx_MultiModeConfigChannel+0x114>)
 8005d2c:	4c2d      	ldr	r4, [pc, #180]	; (8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8005d2e:	4e2e      	ldr	r6, [pc, #184]	; (8005de8 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8005d30:	42ba      	cmp	r2, r7
 8005d32:	bf18      	it	ne
 8005d34:	4634      	movne	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005d36:	b345      	cbz	r5, 8005d8a <HAL_ADCEx_MultiModeConfigChannel+0xc2>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005d38:	68a6      	ldr	r6, [r4, #8]
 8005d3a:	684f      	ldr	r7, [r1, #4]
 8005d3c:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 8005d40:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 8005d44:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 8005d48:	ea46 060c 	orr.w	r6, r6, ip
 8005d4c:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005d4e:	6896      	ldr	r6, [r2, #8]
 8005d50:	f006 0603 	and.w	r6, r6, #3
 8005d54:	2e01      	cmp	r6, #1
 8005d56:	d03c      	beq.n	8005dd2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005d58:	6882      	ldr	r2, [r0, #8]
 8005d5a:	f002 0203 	and.w	r2, r2, #3
 8005d5e:	2a01      	cmp	r2, #1
 8005d60:	d02f      	beq.n	8005dc2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005d62:	68a0      	ldr	r0, [r4, #8]
 8005d64:	688a      	ldr	r2, [r1, #8]
 8005d66:	f420 6171 	bic.w	r1, r0, #3856	; 0xf10
 8005d6a:	432a      	orrs	r2, r5
 8005d6c:	f021 010f 	bic.w	r1, r1, #15
 8005d70:	430a      	orrs	r2, r1
 8005d72:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d74:	2000      	movs	r0, #0
 8005d76:	e7cd      	b.n	8005d14 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 8005d78:	f893 c03c 	ldrb.w	ip, [r3, #60]	; 0x3c
 8005d7c:	4818      	ldr	r0, [pc, #96]	; (8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8005d7e:	f1bc 0f01 	cmp.w	ip, #1
 8005d82:	d1bc      	bne.n	8005cfe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8005d84:	2002      	movs	r0, #2
} 
 8005d86:	bcf0      	pop	{r4, r5, r6, r7}
 8005d88:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005d8a:	68a1      	ldr	r1, [r4, #8]
 8005d8c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8005d90:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005d92:	6891      	ldr	r1, [r2, #8]
 8005d94:	f001 0103 	and.w	r1, r1, #3
 8005d98:	2901      	cmp	r1, #1
 8005d9a:	d016      	beq.n	8005dca <HAL_ADCEx_MultiModeConfigChannel+0x102>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005d9c:	6882      	ldr	r2, [r0, #8]
 8005d9e:	f002 0203 	and.w	r2, r2, #3
 8005da2:	2a01      	cmp	r2, #1
 8005da4:	d009      	beq.n	8005dba <HAL_ADCEx_MultiModeConfigChannel+0xf2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005da6:	68a2      	ldr	r2, [r4, #8]
 8005da8:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8005dac:	f022 020f 	bic.w	r2, r2, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005db0:	2000      	movs	r0, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8005db2:	60a2      	str	r2, [r4, #8]
 8005db4:	e7ae      	b.n	8005d14 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005db6:	4c0b      	ldr	r4, [pc, #44]	; (8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8005db8:	e7bd      	b.n	8005d36 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005dba:	6802      	ldr	r2, [r0, #0]
 8005dbc:	07d2      	lsls	r2, r2, #31
 8005dbe:	d4d9      	bmi.n	8005d74 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005dc0:	e7f1      	b.n	8005da6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005dc2:	6802      	ldr	r2, [r0, #0]
 8005dc4:	07d0      	lsls	r0, r2, #31
 8005dc6:	d4d5      	bmi.n	8005d74 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005dc8:	e7cb      	b.n	8005d62 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	07d1      	lsls	r1, r2, #31
 8005dce:	d4d1      	bmi.n	8005d74 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005dd0:	e7e4      	b.n	8005d9c <HAL_ADCEx_MultiModeConfigChannel+0xd4>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005dd2:	6812      	ldr	r2, [r2, #0]
 8005dd4:	07d6      	lsls	r6, r2, #31
 8005dd6:	d5bf      	bpl.n	8005d58 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8005dd8:	e7cc      	b.n	8005d74 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005dda:	bf00      	nop
 8005ddc:	50000100 	.word	0x50000100
 8005de0:	50000500 	.word	0x50000500
 8005de4:	50000300 	.word	0x50000300
 8005de8:	50000700 	.word	0x50000700

08005dec <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d07b      	beq.n	8005ee8 <HAL_CAN_Init+0xfc>
{
 8005df0:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005df2:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005df6:	4604      	mov	r4, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d072      	beq.n	8005ee2 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005dfc:	6822      	ldr	r2, [r4, #0]
 8005dfe:	6813      	ldr	r3, [r2, #0]
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e06:	f7fe fff5 	bl	8004df4 <HAL_GetTick>
 8005e0a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005e0c:	e004      	b.n	8005e18 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e0e:	f7fe fff1 	bl	8004df4 <HAL_GetTick>
 8005e12:	1b43      	subs	r3, r0, r5
 8005e14:	2b0a      	cmp	r3, #10
 8005e16:	d85b      	bhi.n	8005ed0 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	07d1      	lsls	r1, r2, #31
 8005e1e:	d5f6      	bpl.n	8005e0e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	f022 0202 	bic.w	r2, r2, #2
 8005e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e28:	f7fe ffe4 	bl	8004df4 <HAL_GetTick>
 8005e2c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005e2e:	e004      	b.n	8005e3a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e30:	f7fe ffe0 	bl	8004df4 <HAL_GetTick>
 8005e34:	1b40      	subs	r0, r0, r5
 8005e36:	280a      	cmp	r0, #10
 8005e38:	d84a      	bhi.n	8005ed0 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	0792      	lsls	r2, r2, #30
 8005e40:	d4f6      	bmi.n	8005e30 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005e42:	7e22      	ldrb	r2, [r4, #24]
 8005e44:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	bf0c      	ite	eq
 8005e4a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005e4e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8005e52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005e54:	7e62      	ldrb	r2, [r4, #25]
 8005e56:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	bf0c      	ite	eq
 8005e5c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005e60:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8005e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005e66:	7ea2      	ldrb	r2, [r4, #26]
 8005e68:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	bf0c      	ite	eq
 8005e6e:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005e72:	f022 0220 	bicne.w	r2, r2, #32
 8005e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005e78:	7ee2      	ldrb	r2, [r4, #27]
 8005e7a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	bf0c      	ite	eq
 8005e80:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005e84:	f042 0210 	orrne.w	r2, r2, #16
 8005e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005e8a:	7f22      	ldrb	r2, [r4, #28]
 8005e8c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	bf0c      	ite	eq
 8005e92:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005e96:	f022 0208 	bicne.w	r2, r2, #8
 8005e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005e9c:	7f62      	ldrb	r2, [r4, #29]
 8005e9e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	bf0c      	ite	eq
 8005ea4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005ea8:	f022 0204 	bicne.w	r2, r2, #4
 8005eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005eae:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8005eb2:	6921      	ldr	r1, [r4, #16]
 8005eb4:	4302      	orrs	r2, r0
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	6960      	ldr	r0, [r4, #20]
 8005eba:	6861      	ldr	r1, [r4, #4]
 8005ebc:	4302      	orrs	r2, r0
 8005ebe:	3901      	subs	r1, #1
 8005ec0:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005ec2:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005ec4:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005ec6:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005ec8:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8005eca:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8005ed2:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed8:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8005eda:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 8005ede:	2001      	movs	r0, #1
}
 8005ee0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8005ee2:	f7fb fa11 	bl	8001308 <HAL_CAN_MspInit>
 8005ee6:	e789      	b.n	8005dfc <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8005ee8:	2001      	movs	r0, #1
}
 8005eea:	4770      	bx	lr

08005eec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005eec:	b470      	push	{r4, r5, r6}
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005eee:	f890 2020 	ldrb.w	r2, [r0, #32]
  CAN_TypeDef *can_ip = hcan->Instance;
 8005ef2:	6804      	ldr	r4, [r0, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8005ef4:	3a01      	subs	r2, #1
 8005ef6:	2a01      	cmp	r2, #1
 8005ef8:	d907      	bls.n	8005f0a <HAL_CAN_ConfigFilter+0x1e>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005efa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005efc:	4603      	mov	r3, r0
 8005efe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8005f02:	2001      	movs	r0, #1
  }
}
 8005f04:	bc70      	pop	{r4, r5, r6}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005f08:	4770      	bx	lr
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005f0a:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005f0e:	694a      	ldr	r2, [r1, #20]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005f10:	69cd      	ldr	r5, [r1, #28]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005f1a:	f002 001f 	and.w	r0, r2, #31
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4083      	lsls	r3, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005f22:	f8d4 021c 	ldr.w	r0, [r4, #540]	; 0x21c
 8005f26:	ea20 0003 	bic.w	r0, r0, r3
 8005f2a:	f8c4 021c 	str.w	r0, [r4, #540]	; 0x21c
 8005f2e:	43d8      	mvns	r0, r3
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005f30:	2d00      	cmp	r5, #0
 8005f32:	d13d      	bne.n	8005fb0 <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005f34:	f8d4 520c 	ldr.w	r5, [r4, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005f38:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005f3a:	4005      	ands	r5, r0
 8005f3c:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005f40:	888d      	ldrh	r5, [r1, #4]
 8005f42:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005f46:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005f4a:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005f4e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005f50:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005f52:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005f56:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005f5a:	698a      	ldr	r2, [r1, #24]
 8005f5c:	bb12      	cbnz	r2, 8005fa4 <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005f5e:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8005f62:	4002      	ands	r2, r0
 8005f64:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005f68:	690a      	ldr	r2, [r1, #16]
 8005f6a:	b9aa      	cbnz	r2, 8005f98 <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005f6c:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8005f70:	4010      	ands	r0, r2
 8005f72:	f8c4 0214 	str.w	r0, [r4, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005f76:	6a0a      	ldr	r2, [r1, #32]
 8005f78:	2a01      	cmp	r2, #1
 8005f7a:	d104      	bne.n	8005f86 <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005f7c:	f8d4 221c 	ldr.w	r2, [r4, #540]	; 0x21c
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005f86:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
    return HAL_OK;
 8005f8e:	2000      	movs	r0, #0
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005f90:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
}
 8005f94:	bc70      	pop	{r4, r5, r6}
 8005f96:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005f98:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	f8c4 2214 	str.w	r2, [r4, #532]	; 0x214
 8005fa2:	e7e8      	b.n	8005f76 <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005fa4:	f8d4 2204 	ldr.w	r2, [r4, #516]	; 0x204
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
 8005fae:	e7db      	b.n	8005f68 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005fb0:	2d01      	cmp	r5, #1
 8005fb2:	d1d2      	bne.n	8005f5a <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005fb4:	f8d4 520c 	ldr.w	r5, [r4, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005fb8:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005fba:	431d      	orrs	r5, r3
 8005fbc:	f8c4 520c 	str.w	r5, [r4, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005fc0:	888d      	ldrh	r5, [r1, #4]
 8005fc2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005fc6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005fca:	f8c2 5240 	str.w	r5, [r2, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005fce:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005fd0:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005fd2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005fd6:	f8c2 5244 	str.w	r5, [r2, #580]	; 0x244
 8005fda:	e7be      	b.n	8005f5a <HAL_CAN_ConfigFilter+0x6e>

08005fdc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005fdc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005fde:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005fe2:	2b01      	cmp	r3, #1
{
 8005fe4:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8005fe6:	d006      	beq.n	8005ff6 <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005fe8:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8005fea:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005fec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff0:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8005ff2:	4630      	mov	r0, r6
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005ff6:	6802      	ldr	r2, [r0, #0]
 8005ff8:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006000:	6813      	ldr	r3, [r2, #0]
 8006002:	f023 0301 	bic.w	r3, r3, #1
 8006006:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006008:	f7fe fef4 	bl	8004df4 <HAL_GetTick>
 800600c:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800600e:	e004      	b.n	800601a <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006010:	f7fe fef0 	bl	8004df4 <HAL_GetTick>
 8006014:	1b43      	subs	r3, r0, r5
 8006016:	2b0a      	cmp	r3, #10
 8006018:	d808      	bhi.n	800602c <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f013 0301 	ands.w	r3, r3, #1
 8006022:	d1f5      	bne.n	8006010 <HAL_CAN_Start+0x34>
    return HAL_OK;
 8006024:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006026:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006028:	4630      	mov	r0, r6
 800602a:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800602c:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800602e:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006034:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8006036:	f884 2020 	strb.w	r2, [r4, #32]
}
 800603a:	4630      	mov	r0, r6
 800603c:	bd70      	pop	{r4, r5, r6, pc}
 800603e:	bf00      	nop

08006040 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006040:	b430      	push	{r4, r5}
 8006042:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006044:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006048:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800604c:	3801      	subs	r0, #1
 800604e:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006050:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8006052:	d83b      	bhi.n	80060cc <HAL_CAN_AddTxMessage+0x8c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006054:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8006058:	d108      	bne.n	800606c <HAL_CAN_AddTxMessage+0x2c>
      return HAL_OK;
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800605a:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 800605e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

      return HAL_ERROR;
 8006062:	2001      	movs	r0, #1
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8006064:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006066:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 800606a:	4770      	bx	lr
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800606c:	f3c4 6401 	ubfx	r4, r4, #24, #2
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006070:	2001      	movs	r0, #1
 8006072:	40a0      	lsls	r0, r4
 8006074:	6018      	str	r0, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8006076:	688b      	ldr	r3, [r1, #8]
 8006078:	b38b      	cbz	r3, 80060de <HAL_CAN_AddTxMessage+0x9e>
                                                           pHeader->IDE |
 800607a:	68c8      	ldr	r0, [r1, #12]
 800607c:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800607e:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 8006080:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006084:	f104 0018 	add.w	r0, r4, #24
 8006088:	0100      	lsls	r0, r0, #4
 800608a:	502b      	str	r3, [r5, r0]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800608c:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 8006090:	690b      	ldr	r3, [r1, #16]
 8006092:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006096:	7d0b      	ldrb	r3, [r1, #20]
 8006098:	2b01      	cmp	r3, #1
 800609a:	ea4f 1104 	mov.w	r1, r4, lsl #4
 800609e:	d105      	bne.n	80060ac <HAL_CAN_AddTxMessage+0x6c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80060a0:	f8dc 3184 	ldr.w	r3, [ip, #388]	; 0x184
 80060a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a8:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80060ac:	186b      	adds	r3, r5, r1
 80060ae:	6851      	ldr	r1, [r2, #4]
 80060b0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80060b4:	6812      	ldr	r2, [r2, #0]
 80060b6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80060ba:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 80060be:	f043 0301 	orr.w	r3, r3, #1
      return HAL_OK;
 80060c2:	2000      	movs	r0, #0
}
 80060c4:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80060c6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 80060ca:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80060cc:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 80060d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 80060d4:	2001      	movs	r0, #1
}
 80060d6:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80060d8:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80060dc:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80060de:	68cb      	ldr	r3, [r1, #12]
 80060e0:	6808      	ldr	r0, [r1, #0]
 80060e2:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 80060e6:	f104 0318 	add.w	r3, r4, #24
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	50e8      	str	r0, [r5, r3]
 80060ee:	e7cd      	b.n	800608c <HAL_CAN_AddTxMessage+0x4c>

080060f0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80060f0:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80060f2:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80060f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80060fa:	f1be 0f01 	cmp.w	lr, #1
{
 80060fe:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8006100:	d873      	bhi.n	80061ea <HAL_CAN_GetRxMessage+0xfa>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006102:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006104:	b951      	cbnz	r1, 800611c <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006106:	68c4      	ldr	r4, [r0, #12]
 8006108:	07a4      	lsls	r4, r4, #30
 800610a:	d10a      	bne.n	8006122 <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800610c:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8006110:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 8006114:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006116:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800611a:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800611c:	6904      	ldr	r4, [r0, #16]
 800611e:	07a6      	lsls	r6, r4, #30
 8006120:	d0f4      	beq.n	800610c <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006122:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 8006126:	010c      	lsls	r4, r1, #4
 8006128:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800612c:	f005 0504 	and.w	r5, r5, #4
 8006130:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006132:	2d00      	cmp	r5, #0
 8006134:	d060      	beq.n	80061f8 <HAL_CAN_GetRxMessage+0x108>
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006136:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800613a:	08ed      	lsrs	r5, r5, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800613c:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800613e:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8006142:	f005 0502 	and.w	r5, r5, #2
 8006146:	60d5      	str	r5, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006148:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
 800614c:	072d      	lsls	r5, r5, #28
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800614e:	bf58      	it	pl
 8006150:	f8de 51b4 	ldrpl.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006154:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006158:	bf54      	ite	pl
 800615a:	f005 050f 	andpl.w	r5, r5, #15
      pHeader->DLC = 8U;
 800615e:	2508      	movmi	r5, #8
 8006160:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006162:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006164:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006168:	f3c6 2607 	ubfx	r6, r6, #8, #8
 800616c:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800616e:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006170:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006174:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006176:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006178:	f8dc 2000 	ldr.w	r2, [ip]
 800617c:	4422      	add	r2, r4
 800617e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8006182:	0a12      	lsrs	r2, r2, #8
 8006184:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006186:	f8dc 2000 	ldr.w	r2, [ip]
 800618a:	4422      	add	r2, r4
 800618c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8006190:	0c12      	lsrs	r2, r2, #16
 8006192:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006194:	f8dc 2000 	ldr.w	r2, [ip]
 8006198:	4422      	add	r2, r4
 800619a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800619e:	0e12      	lsrs	r2, r2, #24
 80061a0:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80061a2:	f8dc 2000 	ldr.w	r2, [ip]
 80061a6:	4422      	add	r2, r4
 80061a8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80061ac:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80061ae:	f8dc 2000 	ldr.w	r2, [ip]
 80061b2:	4422      	add	r2, r4
 80061b4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80061b8:	0a12      	lsrs	r2, r2, #8
 80061ba:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80061bc:	f8dc 2000 	ldr.w	r2, [ip]
 80061c0:	4422      	add	r2, r4
 80061c2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80061c6:	0c12      	lsrs	r2, r2, #16
 80061c8:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80061ca:	f8dc 2000 	ldr.w	r2, [ip]
 80061ce:	4422      	add	r2, r4
 80061d0:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80061d4:	0e12      	lsrs	r2, r2, #24
 80061d6:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80061d8:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80061dc:	b989      	cbnz	r1, 8006202 <HAL_CAN_GetRxMessage+0x112>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80061de:	68d3      	ldr	r3, [r2, #12]
 80061e0:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 80061e4:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80061e6:	60d3      	str	r3, [r2, #12]
}
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80061ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80061ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 80061f0:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80061f2:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 80061f6:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80061f8:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80061fc:	0d6d      	lsrs	r5, r5, #21
 80061fe:	6015      	str	r5, [r2, #0]
 8006200:	e79d      	b.n	800613e <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006202:	6913      	ldr	r3, [r2, #16]
 8006204:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8006208:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800620a:	6113      	str	r3, [r2, #16]
}
 800620c:	bd70      	pop	{r4, r5, r6, pc}
 800620e:	bf00      	nop

08006210 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8006210:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006214:	3a01      	subs	r2, #1
 8006216:	2a01      	cmp	r2, #1
{
 8006218:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 800621a:	d905      	bls.n	8006228 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800621c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800621e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 8006222:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006224:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8006226:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006228:	6802      	ldr	r2, [r0, #0]
 800622a:	6953      	ldr	r3, [r2, #20]
 800622c:	430b      	orrs	r3, r1
    return HAL_OK;
 800622e:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006230:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8006232:	4770      	bx	lr

08006234 <HAL_CAN_TxMailbox0CompleteCallback>:
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop

08006238 <HAL_CAN_TxMailbox1CompleteCallback>:
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop

0800623c <HAL_CAN_TxMailbox2CompleteCallback>:
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop

08006240 <HAL_CAN_TxMailbox0AbortCallback>:
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop

08006244 <HAL_CAN_TxMailbox1AbortCallback>:
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop

08006248 <HAL_CAN_TxMailbox2AbortCallback>:
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop

0800624c <HAL_CAN_RxFifo0FullCallback>:
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop

08006250 <HAL_CAN_RxFifo1FullCallback>:
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop

08006254 <HAL_CAN_SleepCallback>:
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop

08006258 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop

0800625c <HAL_CAN_ErrorCallback>:
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop

08006260 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006264:	6803      	ldr	r3, [r0, #0]
 8006266:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006268:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800626c:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800626e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006272:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006276:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800627a:	f014 0601 	ands.w	r6, r4, #1
{
 800627e:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006280:	d025      	beq.n	80062ce <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006282:	f017 0601 	ands.w	r6, r7, #1
 8006286:	f040 808f 	bne.w	80063a8 <HAL_CAN_IRQHandler+0x148>
 800628a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800628e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006292:	05f8      	lsls	r0, r7, #23
 8006294:	d50d      	bpl.n	80062b2 <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006296:	682b      	ldr	r3, [r5, #0]
 8006298:	f44f 7080 	mov.w	r0, #256	; 0x100
 800629c:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800629e:	05bb      	lsls	r3, r7, #22
 80062a0:	f100 80be 	bmi.w	8006420 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80062a4:	0578      	lsls	r0, r7, #21
 80062a6:	f100 80e4 	bmi.w	8006472 <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80062aa:	053b      	lsls	r3, r7, #20
 80062ac:	f140 80f0 	bpl.w	8006490 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80062b0:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80062b2:	03f8      	lsls	r0, r7, #15
 80062b4:	d50b      	bpl.n	80062ce <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80062b6:	682b      	ldr	r3, [r5, #0]
 80062b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80062bc:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80062be:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80062c0:	f100 80ba 	bmi.w	8006438 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80062c4:	037a      	lsls	r2, r7, #13
 80062c6:	f140 80cf 	bpl.w	8006468 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80062ca:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80062ce:	0727      	lsls	r7, r4, #28
 80062d0:	d502      	bpl.n	80062d8 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80062d2:	f01b 0f10 	tst.w	fp, #16
 80062d6:	d161      	bne.n	800639c <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80062d8:	0760      	lsls	r0, r4, #29
 80062da:	d503      	bpl.n	80062e4 <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80062dc:	f01b 0f08 	tst.w	fp, #8
 80062e0:	f040 808c 	bne.w	80063fc <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80062e4:	07a1      	lsls	r1, r4, #30
 80062e6:	d504      	bpl.n	80062f2 <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	079a      	lsls	r2, r3, #30
 80062ee:	f040 808c 	bne.w	800640a <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80062f2:	0663      	lsls	r3, r4, #25
 80062f4:	d502      	bpl.n	80062fc <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80062f6:	f01a 0f10 	tst.w	sl, #16
 80062fa:	d149      	bne.n	8006390 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80062fc:	06a7      	lsls	r7, r4, #26
 80062fe:	d502      	bpl.n	8006306 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006300:	f01a 0f08 	tst.w	sl, #8
 8006304:	d173      	bne.n	80063ee <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006306:	06e0      	lsls	r0, r4, #27
 8006308:	d503      	bpl.n	8006312 <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800630a:	682b      	ldr	r3, [r5, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	0799      	lsls	r1, r3, #30
 8006310:	d162      	bne.n	80063d8 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006312:	03a2      	lsls	r2, r4, #14
 8006314:	d502      	bpl.n	800631c <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006316:	f018 0f10 	tst.w	r8, #16
 800631a:	d161      	bne.n	80063e0 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800631c:	03e3      	lsls	r3, r4, #15
 800631e:	d502      	bpl.n	8006326 <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006320:	f018 0f08 	tst.w	r8, #8
 8006324:	d175      	bne.n	8006412 <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006326:	0427      	lsls	r7, r4, #16
 8006328:	d505      	bpl.n	8006336 <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800632a:	f018 0f04 	tst.w	r8, #4
 800632e:	d106      	bne.n	800633e <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006330:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006332:	2204      	movs	r2, #4
 8006334:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006336:	2e00      	cmp	r6, #0
 8006338:	d146      	bne.n	80063c8 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800633a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800633e:	05e0      	lsls	r0, r4, #23
 8006340:	d504      	bpl.n	800634c <HAL_CAN_IRQHandler+0xec>
 8006342:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8006346:	bf18      	it	ne
 8006348:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800634c:	05a1      	lsls	r1, r4, #22
 800634e:	d504      	bpl.n	800635a <HAL_CAN_IRQHandler+0xfa>
 8006350:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8006354:	bf18      	it	ne
 8006356:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800635a:	0562      	lsls	r2, r4, #21
 800635c:	d504      	bpl.n	8006368 <HAL_CAN_IRQHandler+0x108>
 800635e:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8006362:	bf18      	it	ne
 8006364:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006368:	0523      	lsls	r3, r4, #20
 800636a:	d5e1      	bpl.n	8006330 <HAL_CAN_IRQHandler+0xd0>
 800636c:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8006370:	d0de      	beq.n	8006330 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 8006372:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8006376:	f000 809a 	beq.w	80064ae <HAL_CAN_IRQHandler+0x24e>
 800637a:	d861      	bhi.n	8006440 <HAL_CAN_IRQHandler+0x1e0>
 800637c:	f1b9 0f20 	cmp.w	r9, #32
 8006380:	f000 8083 	beq.w	800648a <HAL_CAN_IRQHandler+0x22a>
 8006384:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8006388:	d168      	bne.n	800645c <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 800638a:	f046 0620 	orr.w	r6, r6, #32
            break;
 800638e:	e05f      	b.n	8006450 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006394:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006398:	611a      	str	r2, [r3, #16]
 800639a:	e7af      	b.n	80062fc <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80063a0:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	e797      	b.n	80062d8 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80063a8:	2201      	movs	r2, #1
 80063aa:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80063ac:	07bb      	lsls	r3, r7, #30
 80063ae:	d43b      	bmi.n	8006428 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80063b0:	077e      	lsls	r6, r7, #29
 80063b2:	d460      	bmi.n	8006476 <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80063b4:	f017 0608 	ands.w	r6, r7, #8
 80063b8:	d06e      	beq.n	8006498 <HAL_CAN_IRQHandler+0x238>
 80063ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80063be:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80063c2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80063c6:	e764      	b.n	8006292 <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 80063c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063ca:	4333      	orrs	r3, r6
    HAL_CAN_ErrorCallback(hcan);
 80063cc:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80063ce:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80063d0:	f7ff ff44 	bl	800625c <HAL_CAN_ErrorCallback>
}
 80063d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80063d8:	4628      	mov	r0, r5
 80063da:	f7fb fc77 	bl	8001ccc <HAL_CAN_RxFifo1MsgPendingCallback>
 80063de:	e798      	b.n	8006312 <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	2210      	movs	r2, #16
 80063e4:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7ff ff34 	bl	8006254 <HAL_CAN_SleepCallback>
 80063ec:	e796      	b.n	800631c <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80063ee:	682b      	ldr	r3, [r5, #0]
 80063f0:	2208      	movs	r2, #8
 80063f2:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80063f4:	4628      	mov	r0, r5
 80063f6:	f7ff ff2b 	bl	8006250 <HAL_CAN_RxFifo1FullCallback>
 80063fa:	e784      	b.n	8006306 <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	2208      	movs	r2, #8
 8006400:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006402:	4628      	mov	r0, r5
 8006404:	f7ff ff22 	bl	800624c <HAL_CAN_RxFifo0FullCallback>
 8006408:	e76c      	b.n	80062e4 <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800640a:	4628      	mov	r0, r5
 800640c:	f7fb fc44 	bl	8001c98 <HAL_CAN_RxFifo0MsgPendingCallback>
 8006410:	e76f      	b.n	80062f2 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006412:	682b      	ldr	r3, [r5, #0]
 8006414:	2208      	movs	r2, #8
 8006416:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006418:	4628      	mov	r0, r5
 800641a:	f7ff ff1d 	bl	8006258 <HAL_CAN_WakeUpFromRxMsgCallback>
 800641e:	e782      	b.n	8006326 <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006420:	4628      	mov	r0, r5
 8006422:	f7ff ff09 	bl	8006238 <HAL_CAN_TxMailbox1CompleteCallback>
 8006426:	e744      	b.n	80062b2 <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006428:	f7ff ff04 	bl	8006234 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800642c:	2600      	movs	r6, #0
 800642e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006436:	e72c      	b.n	8006292 <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006438:	4628      	mov	r0, r5
 800643a:	f7ff feff 	bl	800623c <HAL_CAN_TxMailbox2CompleteCallback>
 800643e:	e746      	b.n	80062ce <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8006440:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8006444:	d01e      	beq.n	8006484 <HAL_CAN_IRQHandler+0x224>
 8006446:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 800644a:	bf08      	it	eq
 800644c:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006450:	682b      	ldr	r3, [r5, #0]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006458:	619a      	str	r2, [r3, #24]
 800645a:	e76a      	b.n	8006332 <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 800645c:	f1b9 0f10 	cmp.w	r9, #16
 8006460:	d1f6      	bne.n	8006450 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 8006462:	f046 0608 	orr.w	r6, r6, #8
            break;
 8006466:	e7f3      	b.n	8006450 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006468:	033b      	lsls	r3, r7, #12
 800646a:	d51c      	bpl.n	80064a6 <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800646c:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8006470:	e72d      	b.n	80062ce <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006472:	4616      	mov	r6, r2
 8006474:	e71d      	b.n	80062b2 <HAL_CAN_IRQHandler+0x52>
 8006476:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800647a:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800647e:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8006482:	e706      	b.n	8006292 <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8006484:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8006488:	e7e2      	b.n	8006450 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 800648a:	f046 0610 	orr.w	r6, r6, #16
            break;
 800648e:	e7df      	b.n	8006450 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006490:	4628      	mov	r0, r5
 8006492:	f7ff fed7 	bl	8006244 <HAL_CAN_TxMailbox1AbortCallback>
 8006496:	e70c      	b.n	80062b2 <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006498:	f7ff fed2 	bl	8006240 <HAL_CAN_TxMailbox0AbortCallback>
 800649c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064a4:	e6f5      	b.n	8006292 <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80064a6:	4628      	mov	r0, r5
 80064a8:	f7ff fece 	bl	8006248 <HAL_CAN_TxMailbox2AbortCallback>
 80064ac:	e70f      	b.n	80062ce <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 80064ae:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80064b2:	e7cd      	b.n	8006450 <HAL_CAN_IRQHandler+0x1f0>

080064b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064b4:	4907      	ldr	r1, [pc, #28]	; (80064d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80064b6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064b8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064ba:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064c2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064c4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80064ce:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	e000ed00 	.word	0xe000ed00

080064d8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064d8:	4b1c      	ldr	r3, [pc, #112]	; (800654c <HAL_NVIC_SetPriority+0x74>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064e0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064e2:	f1c3 0e07 	rsb	lr, r3, #7
 80064e6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064ea:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064ee:	bf28      	it	cs
 80064f0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064f4:	f1bc 0f06 	cmp.w	ip, #6
 80064f8:	d91b      	bls.n	8006532 <HAL_NVIC_SetPriority+0x5a>
 80064fa:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064fc:	f04f 3cff 	mov.w	ip, #4294967295
 8006500:	fa0c fc03 	lsl.w	ip, ip, r3
 8006504:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006508:	f04f 3cff 	mov.w	ip, #4294967295
 800650c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8006510:	ea21 010c 	bic.w	r1, r1, ip
 8006514:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8006516:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006518:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800651c:	db0c      	blt.n	8006538 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800651e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006522:	0109      	lsls	r1, r1, #4
 8006524:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006528:	b2c9      	uxtb	r1, r1
 800652a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800652e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006532:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006534:	4613      	mov	r3, r2
 8006536:	e7e7      	b.n	8006508 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_NVIC_SetPriority+0x78>)
 800653a:	f000 000f 	and.w	r0, r0, #15
 800653e:	0109      	lsls	r1, r1, #4
 8006540:	4403      	add	r3, r0
 8006542:	b2c9      	uxtb	r1, r1
 8006544:	7619      	strb	r1, [r3, #24]
 8006546:	f85d fb04 	ldr.w	pc, [sp], #4
 800654a:	bf00      	nop
 800654c:	e000ed00 	.word	0xe000ed00
 8006550:	e000ecfc 	.word	0xe000ecfc

08006554 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006554:	2800      	cmp	r0, #0
 8006556:	db07      	blt.n	8006568 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006558:	0941      	lsrs	r1, r0, #5
 800655a:	4a04      	ldr	r2, [pc, #16]	; (800656c <HAL_NVIC_EnableIRQ+0x18>)
 800655c:	f000 001f 	and.w	r0, r0, #31
 8006560:	2301      	movs	r3, #1
 8006562:	4083      	lsls	r3, r0
 8006564:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	e000e100 	.word	0xe000e100

08006570 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006570:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006574:	4905      	ldr	r1, [pc, #20]	; (800658c <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006576:	4b06      	ldr	r3, [pc, #24]	; (8006590 <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006578:	68ca      	ldr	r2, [r1, #12]
 800657a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800657e:	4313      	orrs	r3, r2
 8006580:	60cb      	str	r3, [r1, #12]
 8006582:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006586:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006588:	e7fd      	b.n	8006586 <HAL_NVIC_SystemReset+0x16>
 800658a:	bf00      	nop
 800658c:	e000ed00 	.word	0xe000ed00
 8006590:	05fa0004 	.word	0x05fa0004

08006594 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006594:	3801      	subs	r0, #1
 8006596:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800659a:	d210      	bcs.n	80065be <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800659c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800659e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065a2:	4c08      	ldr	r4, [pc, #32]	; (80065c4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065a4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065a6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80065aa:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065ae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065b0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065b2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065b4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80065b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065ba:	6119      	str	r1, [r3, #16]
 80065bc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80065be:	2001      	movs	r0, #1
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	e000ed00 	.word	0xe000ed00

080065c8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d035      	beq.n	8006638 <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065cc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 80065d0:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d2:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80065d4:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 80065d6:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d8:	6902      	ldr	r2, [r0, #16]
 80065da:	4323      	orrs	r3, r4
 80065dc:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065de:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 80065e2:	4323      	orrs	r3, r4
 80065e4:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80065e6:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065e8:	4c14      	ldr	r4, [pc, #80]	; (800663c <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 80065ea:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 80065ec:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80065ee:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80065f2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80065f6:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065f8:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 80065fa:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065fc:	d912      	bls.n	8006624 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80065fe:	4b10      	ldr	r3, [pc, #64]	; (8006640 <HAL_DMA_Init+0x78>)
 8006600:	4a10      	ldr	r2, [pc, #64]	; (8006644 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8006602:	4c11      	ldr	r4, [pc, #68]	; (8006648 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006604:	440b      	add	r3, r1
 8006606:	fba2 2303 	umull	r2, r3, r2, r3
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 800660e:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006612:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 8006614:	8401      	strh	r1, [r0, #32]
 8006616:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800661a:	6382      	str	r2, [r0, #56]	; 0x38
}  
 800661c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8006620:	4610      	mov	r0, r2
}  
 8006622:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006624:	4b09      	ldr	r3, [pc, #36]	; (800664c <HAL_DMA_Init+0x84>)
 8006626:	4a07      	ldr	r2, [pc, #28]	; (8006644 <HAL_DMA_Init+0x7c>)
 8006628:	440b      	add	r3, r1
 800662a:	fba2 2303 	umull	r2, r3, r2, r3
 800662e:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8006630:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006634:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8006636:	e7ea      	b.n	800660e <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8006638:	2001      	movs	r0, #1
}  
 800663a:	4770      	bx	lr
 800663c:	40020407 	.word	0x40020407
 8006640:	bffdfbf8 	.word	0xbffdfbf8
 8006644:	cccccccd 	.word	0xcccccccd
 8006648:	40020400 	.word	0x40020400
 800664c:	bffdfff8 	.word	0xbffdfff8

08006650 <HAL_DMA_Start_IT>:
{
 8006650:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8006652:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006656:	2c01      	cmp	r4, #1
 8006658:	d039      	beq.n	80066ce <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 800665a:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800665e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8006660:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 8006662:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006666:	d005      	beq.n	8006674 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8006668:	2300      	movs	r3, #0
 800666a:	f880 3020 	strb.w	r3, [r0, #32]
} 
 800666e:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8006670:	2002      	movs	r0, #2
} 
 8006672:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006674:	2502      	movs	r5, #2
 8006676:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800667a:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800667c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800667e:	2500      	movs	r5, #0
 8006680:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006682:	6825      	ldr	r5, [r4, #0]
 8006684:	f025 0501 	bic.w	r5, r5, #1
 8006688:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800668a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800668c:	fa0c f505 	lsl.w	r5, ip, r5
 8006690:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8006692:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006694:	6843      	ldr	r3, [r0, #4]
 8006696:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8006698:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 800669a:	bf0b      	itete	eq
 800669c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800669e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80066a0:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80066a2:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80066a4:	b153      	cbz	r3, 80066bc <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	f043 030e 	orr.w	r3, r3, #14
 80066ac:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 80066b4:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80066b6:	6023      	str	r3, [r4, #0]
} 
 80066b8:	bc70      	pop	{r4, r5, r6}
 80066ba:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	f043 030a 	orr.w	r3, r3, #10
 80066c2:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	f023 0304 	bic.w	r3, r3, #4
 80066ca:	6023      	str	r3, [r4, #0]
 80066cc:	e7ef      	b.n	80066ae <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80066ce:	2002      	movs	r0, #2
} 
 80066d0:	bc70      	pop	{r4, r5, r6}
 80066d2:	4770      	bx	lr

080066d4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066d4:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80066d8:	2a02      	cmp	r2, #2
{
 80066da:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066dc:	d006      	beq.n	80066ec <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066de:	2204      	movs	r2, #4
 80066e0:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80066e2:	2200      	movs	r2, #0
    return HAL_ERROR;
 80066e4:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80066e6:	f883 2020 	strb.w	r2, [r3, #32]
}
 80066ea:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80066ec:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80066ee:	6c01      	ldr	r1, [r0, #64]	; 0x40
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80066f0:	6810      	ldr	r0, [r2, #0]
 80066f2:	f020 000e 	bic.w	r0, r0, #14
 80066f6:	6010      	str	r0, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80066f8:	6810      	ldr	r0, [r2, #0]
 80066fa:	f020 0001 	bic.w	r0, r0, #1
 80066fe:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006700:	f04f 0c01 	mov.w	ip, #1
 8006704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006706:	fa0c f101 	lsl.w	r1, ip, r1
 800670a:	6051      	str	r1, [r2, #4]
    __HAL_UNLOCK(hdma);
 800670c:	2200      	movs	r2, #0
  return HAL_OK;
 800670e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY; 
 8006710:	f883 c021 	strb.w	ip, [r3, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8006714:	f883 2020 	strb.w	r2, [r3, #32]
}
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop

0800671c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800671c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8006720:	2a02      	cmp	r2, #2
 8006722:	d003      	beq.n	800672c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006724:	2204      	movs	r2, #4
 8006726:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8006728:	2001      	movs	r0, #1
}
 800672a:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800672c:	6802      	ldr	r2, [r0, #0]
 800672e:	6811      	ldr	r1, [r2, #0]
 8006730:	f021 010e 	bic.w	r1, r1, #14
{  
 8006734:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006736:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006738:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800673a:	6811      	ldr	r1, [r2, #0]
 800673c:	f021 0101 	bic.w	r1, r1, #1
 8006740:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006742:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006744:	2101      	movs	r1, #1
 8006746:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8006748:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800674a:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 800674c:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8006750:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8006754:	b112      	cbz	r2, 800675c <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 8006756:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8006758:	2000      	movs	r0, #0
}
 800675a:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800675c:	4610      	mov	r0, r2
}
 800675e:	bd10      	pop	{r4, pc}

08006760 <HAL_DMA_IRQHandler>:
{
 8006760:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006762:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006764:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006766:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006768:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800676a:	2304      	movs	r3, #4
 800676c:	4093      	lsls	r3, r2
 800676e:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8006770:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006772:	d00e      	beq.n	8006792 <HAL_DMA_IRQHandler+0x32>
 8006774:	f015 0f04 	tst.w	r5, #4
 8006778:	d00b      	beq.n	8006792 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800677a:	6822      	ldr	r2, [r4, #0]
 800677c:	0692      	lsls	r2, r2, #26
 800677e:	d403      	bmi.n	8006788 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006780:	6822      	ldr	r2, [r4, #0]
 8006782:	f022 0204 	bic.w	r2, r2, #4
 8006786:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8006788:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800678a:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 800678c:	b1ca      	cbz	r2, 80067c2 <HAL_DMA_IRQHandler+0x62>
}  
 800678e:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8006790:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006792:	2302      	movs	r3, #2
 8006794:	4093      	lsls	r3, r2
 8006796:	420b      	tst	r3, r1
 8006798:	d015      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x66>
 800679a:	f015 0f02 	tst.w	r5, #2
 800679e:	d012      	beq.n	80067c6 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	0692      	lsls	r2, r2, #26
 80067a4:	d406      	bmi.n	80067b4 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80067a6:	6822      	ldr	r2, [r4, #0]
 80067a8:	f022 020a 	bic.w	r2, r2, #10
 80067ac:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80067ae:	2201      	movs	r2, #1
 80067b0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 80067b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80067b6:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 80067b8:	2100      	movs	r1, #0
 80067ba:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80067be:	2a00      	cmp	r2, #0
 80067c0:	d1e5      	bne.n	800678e <HAL_DMA_IRQHandler+0x2e>
}  
 80067c2:	bc70      	pop	{r4, r5, r6}
 80067c4:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80067c6:	2308      	movs	r3, #8
 80067c8:	4093      	lsls	r3, r2
 80067ca:	420b      	tst	r3, r1
 80067cc:	d0f9      	beq.n	80067c2 <HAL_DMA_IRQHandler+0x62>
 80067ce:	072b      	lsls	r3, r5, #28
 80067d0:	d5f7      	bpl.n	80067c2 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80067d2:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 80067d4:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80067d6:	f023 030e 	bic.w	r3, r3, #14
 80067da:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80067dc:	2301      	movs	r3, #1
 80067de:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 80067e2:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80067e6:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 80067e8:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80067ea:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d0e8      	beq.n	80067c2 <HAL_DMA_IRQHandler+0x62>
}  
 80067f0:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80067f2:	4708      	bx	r1

080067f4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80067f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80067f8:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8006988 <HAL_FLASH_Program+0x194>
{
 80067fc:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80067fe:	f89a 3018 	ldrb.w	r3, [sl, #24]
 8006802:	2b01      	cmp	r3, #1
{
 8006804:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 8006806:	f000 80ad 	beq.w	8006964 <HAL_FLASH_Program+0x170>
 800680a:	2301      	movs	r3, #1
 800680c:	4606      	mov	r6, r0
 800680e:	4688      	mov	r8, r1
 8006810:	4693      	mov	fp, r2
 8006812:	f88a 3018 	strb.w	r3, [sl, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006816:	f7fe faed 	bl	8004df4 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800681a:	4d5a      	ldr	r5, [pc, #360]	; (8006984 <HAL_FLASH_Program+0x190>)
  uint32_t tickstart = HAL_GetTick();
 800681c:	4604      	mov	r4, r0
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800681e:	f24c 3750 	movw	r7, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006822:	e005      	b.n	8006830 <HAL_FLASH_Program+0x3c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006824:	f7fe fae6 	bl	8004df4 <HAL_GetTick>
 8006828:	1b00      	subs	r0, r0, r4
 800682a:	42b8      	cmp	r0, r7
 800682c:	f200 8083 	bhi.w	8006936 <HAL_FLASH_Program+0x142>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006830:	68eb      	ldr	r3, [r5, #12]
 8006832:	07db      	lsls	r3, r3, #31
 8006834:	d4f6      	bmi.n	8006824 <HAL_FLASH_Program+0x30>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006836:	68eb      	ldr	r3, [r5, #12]
 8006838:	0698      	lsls	r0, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800683a:	bf44      	itt	mi
 800683c:	2320      	movmi	r3, #32
 800683e:	60eb      	strmi	r3, [r5, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006840:	4b50      	ldr	r3, [pc, #320]	; (8006984 <HAL_FLASH_Program+0x190>)
 8006842:	68da      	ldr	r2, [r3, #12]
 8006844:	06d1      	lsls	r1, r2, #27
 8006846:	d478      	bmi.n	800693a <HAL_FLASH_Program+0x146>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006848:	68df      	ldr	r7, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800684a:	f017 0704 	ands.w	r7, r7, #4
 800684e:	d174      	bne.n	800693a <HAL_FLASH_Program+0x146>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006850:	2e01      	cmp	r6, #1
 8006852:	f000 8094 	beq.w	800697e <HAL_FLASH_Program+0x18a>
      nbiterations = 4U;
 8006856:	2e02      	cmp	r6, #2
 8006858:	bf0c      	ite	eq
 800685a:	2302      	moveq	r3, #2
 800685c:	2304      	movne	r3, #4
 800685e:	9301      	str	r3, [sp, #4]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006860:	4c48      	ldr	r4, [pc, #288]	; (8006984 <HAL_FLASH_Program+0x190>)
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006862:	f24c 3650 	movw	r6, #50000	; 0xc350
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006866:	013b      	lsls	r3, r7, #4
 8006868:	f1c3 0220 	rsb	r2, r3, #32
 800686c:	f1a3 0120 	sub.w	r1, r3, #32
 8006870:	fa09 f202 	lsl.w	r2, r9, r2
 8006874:	fa2b f303 	lsr.w	r3, fp, r3
 8006878:	4313      	orrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800687a:	2200      	movs	r2, #0
 800687c:	f8ca 201c 	str.w	r2, [sl, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006880:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006882:	fa29 f101 	lsr.w	r1, r9, r1
 8006886:	430b      	orrs	r3, r1
 8006888:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8006890:	f8a8 3000 	strh.w	r3, [r8]
  uint32_t tickstart = HAL_GetTick();
 8006894:	f7fe faae 	bl	8004df4 <HAL_GetTick>
 8006898:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800689a:	e004      	b.n	80068a6 <HAL_FLASH_Program+0xb2>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800689c:	f7fe faaa 	bl	8004df4 <HAL_GetTick>
 80068a0:	1b40      	subs	r0, r0, r5
 80068a2:	42b0      	cmp	r0, r6
 80068a4:	d81f      	bhi.n	80068e6 <HAL_FLASH_Program+0xf2>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80068a6:	68e3      	ldr	r3, [r4, #12]
 80068a8:	07db      	lsls	r3, r3, #31
 80068aa:	d4f7      	bmi.n	800689c <HAL_FLASH_Program+0xa8>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80068ac:	68e3      	ldr	r3, [r4, #12]
 80068ae:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80068b0:	bf44      	itt	mi
 80068b2:	2320      	movmi	r3, #32
 80068b4:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	06d9      	lsls	r1, r3, #27
 80068ba:	d41a      	bmi.n	80068f2 <HAL_FLASH_Program+0xfe>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80068bc:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80068be:	f010 0004 	ands.w	r0, r0, #4
 80068c2:	d116      	bne.n	80068f2 <HAL_FLASH_Program+0xfe>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	f023 0301 	bic.w	r3, r3, #1
    for (index = 0U; index < nbiterations; index++)
 80068ca:	3701      	adds	r7, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80068cc:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 80068ce:	9b01      	ldr	r3, [sp, #4]
 80068d0:	b2fa      	uxtb	r2, r7
 80068d2:	4293      	cmp	r3, r2
 80068d4:	f108 0802 	add.w	r8, r8, #2
 80068d8:	d8c5      	bhi.n	8006866 <HAL_FLASH_Program+0x72>
  __HAL_UNLOCK(&pFlash);
 80068da:	2300      	movs	r3, #0
 80068dc:	f88a 3018 	strb.w	r3, [sl, #24]
}
 80068e0:	b003      	add	sp, #12
 80068e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	f023 0301 	bic.w	r3, r3, #1
 80068ec:	2003      	movs	r0, #3
 80068ee:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80068f0:	e7f3      	b.n	80068da <HAL_FLASH_Program+0xe6>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80068f2:	4b24      	ldr	r3, [pc, #144]	; (8006984 <HAL_FLASH_Program+0x190>)
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f013 0310 	ands.w	r3, r3, #16
 80068fa:	d01a      	beq.n	8006932 <HAL_FLASH_Program+0x13e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80068fc:	f8da 301c 	ldr.w	r3, [sl, #28]
 8006900:	f043 0302 	orr.w	r3, r3, #2
 8006904:	f8ca 301c 	str.w	r3, [sl, #28]
 8006908:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 800690a:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800690c:	4a1d      	ldr	r2, [pc, #116]	; (8006984 <HAL_FLASH_Program+0x190>)
 800690e:	68d2      	ldr	r2, [r2, #12]
 8006910:	0752      	lsls	r2, r2, #29
 8006912:	d506      	bpl.n	8006922 <HAL_FLASH_Program+0x12e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006914:	f8da 201c 	ldr.w	r2, [sl, #28]
 8006918:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 800691c:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800691e:	f8ca 201c 	str.w	r2, [sl, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006922:	4a18      	ldr	r2, [pc, #96]	; (8006984 <HAL_FLASH_Program+0x190>)
 8006924:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006926:	6913      	ldr	r3, [r2, #16]
 8006928:	f023 0301 	bic.w	r3, r3, #1
    return HAL_ERROR;
 800692c:	2001      	movs	r0, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800692e:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8006930:	e7d3      	b.n	80068da <HAL_FLASH_Program+0xe6>
 8006932:	2104      	movs	r1, #4
 8006934:	e7ea      	b.n	800690c <HAL_FLASH_Program+0x118>
 8006936:	2003      	movs	r0, #3
 8006938:	e7cf      	b.n	80068da <HAL_FLASH_Program+0xe6>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800693a:	4b12      	ldr	r3, [pc, #72]	; (8006984 <HAL_FLASH_Program+0x190>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f013 0310 	ands.w	r3, r3, #16
 8006942:	d113      	bne.n	800696c <HAL_FLASH_Program+0x178>
 8006944:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006946:	4a0f      	ldr	r2, [pc, #60]	; (8006984 <HAL_FLASH_Program+0x190>)
 8006948:	68d2      	ldr	r2, [r2, #12]
 800694a:	0752      	lsls	r2, r2, #29
 800694c:	d506      	bpl.n	800695c <HAL_FLASH_Program+0x168>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800694e:	f8da 201c 	ldr.w	r2, [sl, #28]
 8006952:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8006956:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006958:	f8ca 201c 	str.w	r2, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 800695c:	4a09      	ldr	r2, [pc, #36]	; (8006984 <HAL_FLASH_Program+0x190>)
    return HAL_ERROR;
 800695e:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006960:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 8006962:	e7ba      	b.n	80068da <HAL_FLASH_Program+0xe6>
  __HAL_LOCK(&pFlash);
 8006964:	2002      	movs	r0, #2
}
 8006966:	b003      	add	sp, #12
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800696c:	f8da 301c 	ldr.w	r3, [sl, #28]
 8006970:	f043 0302 	orr.w	r3, r3, #2
 8006974:	f8ca 301c 	str.w	r3, [sl, #28]
 8006978:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 800697a:	2310      	movs	r3, #16
 800697c:	e7e3      	b.n	8006946 <HAL_FLASH_Program+0x152>
      nbiterations = 1U;
 800697e:	9601      	str	r6, [sp, #4]
 8006980:	e76e      	b.n	8006860 <HAL_FLASH_Program+0x6c>
 8006982:	bf00      	nop
 8006984:	40022000 	.word	0x40022000
 8006988:	20001d90 	.word	0x20001d90

0800698c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <HAL_FLASH_Unlock+0x1c>)
 800698e:	6918      	ldr	r0, [r3, #16]
 8006990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006994:	d006      	beq.n	80069a4 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006996:	4905      	ldr	r1, [pc, #20]	; (80069ac <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006998:	4a05      	ldr	r2, [pc, #20]	; (80069b0 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800699a:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800699c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800699e:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80069a0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40022000 	.word	0x40022000
 80069ac:	45670123 	.word	0x45670123
 80069b0:	cdef89ab 	.word	0xcdef89ab

080069b4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80069b4:	4a03      	ldr	r2, [pc, #12]	; (80069c4 <HAL_FLASH_Lock+0x10>)
 80069b6:	6913      	ldr	r3, [r2, #16]
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 80069bc:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80069be:	6113      	str	r3, [r2, #16]
}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40022000 	.word	0x40022000

080069c8 <FLASH_WaitForLastOperation>:
{
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80069cc:	f7fe fa12 	bl	8004df4 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80069d0:	4e1e      	ldr	r6, [pc, #120]	; (8006a4c <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 80069d2:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80069d4:	1c60      	adds	r0, r4, #1
 80069d6:	d112      	bne.n	80069fe <FLASH_WaitForLastOperation+0x36>
 80069d8:	4a1c      	ldr	r2, [pc, #112]	; (8006a4c <FLASH_WaitForLastOperation+0x84>)
 80069da:	68d3      	ldr	r3, [r2, #12]
 80069dc:	07d9      	lsls	r1, r3, #31
 80069de:	d4fc      	bmi.n	80069da <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80069e0:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <FLASH_WaitForLastOperation+0x84>)
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	0690      	lsls	r0, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80069e6:	bf44      	itt	mi
 80069e8:	2220      	movmi	r2, #32
 80069ea:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80069ec:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <FLASH_WaitForLastOperation+0x84>)
 80069ee:	68da      	ldr	r2, [r3, #12]
 80069f0:	06d1      	lsls	r1, r2, #27
 80069f2:	d40f      	bmi.n	8006a14 <FLASH_WaitForLastOperation+0x4c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80069f4:	68d8      	ldr	r0, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80069f6:	f010 0004 	ands.w	r0, r0, #4
 80069fa:	d10b      	bne.n	8006a14 <FLASH_WaitForLastOperation+0x4c>
}
 80069fc:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80069fe:	68f3      	ldr	r3, [r6, #12]
 8006a00:	07db      	lsls	r3, r3, #31
 8006a02:	d5ed      	bpl.n	80069e0 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006a04:	b124      	cbz	r4, 8006a10 <FLASH_WaitForLastOperation+0x48>
 8006a06:	f7fe f9f5 	bl	8004df4 <HAL_GetTick>
 8006a0a:	1b40      	subs	r0, r0, r5
 8006a0c:	42a0      	cmp	r0, r4
 8006a0e:	d9e1      	bls.n	80069d4 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8006a10:	2003      	movs	r0, #3
}
 8006a12:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006a14:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <FLASH_WaitForLastOperation+0x84>)
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f013 0310 	ands.w	r3, r3, #16
 8006a1c:	d014      	beq.n	8006a48 <FLASH_WaitForLastOperation+0x80>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006a1e:	490c      	ldr	r1, [pc, #48]	; (8006a50 <FLASH_WaitForLastOperation+0x88>)
 8006a20:	69ca      	ldr	r2, [r1, #28]
 8006a22:	f042 0202 	orr.w	r2, r2, #2
 8006a26:	2014      	movs	r0, #20
    flags |= FLASH_FLAG_WRPERR;
 8006a28:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006a2a:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006a2c:	4a07      	ldr	r2, [pc, #28]	; (8006a4c <FLASH_WaitForLastOperation+0x84>)
 8006a2e:	68d2      	ldr	r2, [r2, #12]
 8006a30:	0752      	lsls	r2, r2, #29
 8006a32:	d505      	bpl.n	8006a40 <FLASH_WaitForLastOperation+0x78>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006a34:	4906      	ldr	r1, [pc, #24]	; (8006a50 <FLASH_WaitForLastOperation+0x88>)
 8006a36:	69ca      	ldr	r2, [r1, #28]
 8006a38:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8006a3c:	4603      	mov	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006a3e:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006a40:	4a02      	ldr	r2, [pc, #8]	; (8006a4c <FLASH_WaitForLastOperation+0x84>)
    return HAL_ERROR;
 8006a42:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006a44:	60d3      	str	r3, [r2, #12]
}
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	2004      	movs	r0, #4
 8006a4a:	e7ef      	b.n	8006a2c <FLASH_WaitForLastOperation+0x64>
 8006a4c:	40022000 	.word	0x40022000
 8006a50:	20001d90 	.word	0x20001d90

08006a54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a58:	4e2d      	ldr	r6, [pc, #180]	; (8006b10 <HAL_FLASHEx_Erase+0xbc>)
 8006a5a:	7e33      	ldrb	r3, [r6, #24]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d054      	beq.n	8006b0a <HAL_FLASHEx_Erase+0xb6>
 8006a60:	2301      	movs	r3, #1
 8006a62:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006a64:	6803      	ldr	r3, [r0, #0]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	4681      	mov	r9, r0
 8006a6a:	d031      	beq.n	8006ad0 <HAL_FLASHEx_Erase+0x7c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006a6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a70:	4688      	mov	r8, r1
 8006a72:	f7ff ffa9 	bl	80069c8 <FLASH_WaitForLastOperation>
 8006a76:	4607      	mov	r7, r0
 8006a78:	bb78      	cbnz	r0, 8006ada <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7e:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006a82:	e9d9 5301 	ldrd	r5, r3, [r9, #4]
 8006a86:	eb05 23c3 	add.w	r3, r5, r3, lsl #11
 8006a8a:	429d      	cmp	r5, r3
 8006a8c:	d225      	bcs.n	8006ada <HAL_FLASHEx_Erase+0x86>
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006a8e:	4c21      	ldr	r4, [pc, #132]	; (8006b14 <HAL_FLASHEx_Erase+0xc0>)
 8006a90:	e007      	b.n	8006aa2 <HAL_FLASHEx_Erase+0x4e>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006a92:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
            address += FLASH_PAGE_SIZE)
 8006a96:	f505 6500 	add.w	r5, r5, #2048	; 0x800
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006a9a:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
 8006a9e:	42ab      	cmp	r3, r5
 8006aa0:	d91c      	bls.n	8006adc <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006aa2:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006aa4:	6923      	ldr	r3, [r4, #16]
 8006aa6:	f043 0302 	orr.w	r3, r3, #2
 8006aaa:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006aac:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006aae:	6923      	ldr	r3, [r4, #16]
 8006ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab4:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ab6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006aba:	f7ff ff85 	bl	80069c8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	f023 0302 	bic.w	r3, r3, #2
 8006ac4:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d0e3      	beq.n	8006a92 <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8006aca:	f8c8 5000 	str.w	r5, [r8]
            break;
 8006ace:	e005      	b.n	8006adc <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006ad0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ad4:	f7ff ff78 	bl	80069c8 <FLASH_WaitForLastOperation>
 8006ad8:	b120      	cbz	r0, 8006ae4 <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ada:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8006adc:	2300      	movs	r3, #0
 8006ade:	7633      	strb	r3, [r6, #24]
}
 8006ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006ae4:	4c0b      	ldr	r4, [pc, #44]	; (8006b14 <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006ae6:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006ae8:	6923      	ldr	r3, [r4, #16]
 8006aea:	f043 0304 	orr.w	r3, r3, #4
 8006aee:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006af0:	6923      	ldr	r3, [r4, #16]
 8006af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af6:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006af8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006afc:	f7ff ff64 	bl	80069c8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006b00:	6923      	ldr	r3, [r4, #16]
 8006b02:	f023 0304 	bic.w	r3, r3, #4
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	e7e8      	b.n	8006adc <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 8006b0a:	2002      	movs	r0, #2
}
 8006b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b10:	20001d90 	.word	0x20001d90
 8006b14:	40022000 	.word	0x40022000

08006b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b1c:	680c      	ldr	r4, [r1, #0]
{
 8006b1e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b20:	2c00      	cmp	r4, #0
 8006b22:	d077      	beq.n	8006c14 <HAL_GPIO_Init+0xfc>
 8006b24:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b28:	4e69      	ldr	r6, [pc, #420]	; (8006cd0 <HAL_GPIO_Init+0x1b8>)
  uint32_t position = 0x00u;
 8006b2a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b2c:	f04f 0b01 	mov.w	fp, #1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b30:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b32:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8006b36:	ea17 0a04 	ands.w	sl, r7, r4
 8006b3a:	d065      	beq.n	8006c08 <HAL_GPIO_Init+0xf0>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b3c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006b40:	f001 0203 	and.w	r2, r1, #3
 8006b44:	1e55      	subs	r5, r2, #1
 8006b46:	2d01      	cmp	r5, #1
 8006b48:	d967      	bls.n	8006c1a <HAL_GPIO_Init+0x102>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b4a:	2a03      	cmp	r2, #3
 8006b4c:	f040 80ab 	bne.w	8006ca6 <HAL_GPIO_Init+0x18e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006b50:	fa02 f20c 	lsl.w	r2, r2, ip
 8006b54:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8006b56:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006b58:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006b5a:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b5c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8006b60:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b62:	d051      	beq.n	8006c08 <HAL_GPIO_Init+0xf0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b64:	4d5b      	ldr	r5, [pc, #364]	; (8006cd4 <HAL_GPIO_Init+0x1bc>)
 8006b66:	69aa      	ldr	r2, [r5, #24]
 8006b68:	f042 0201 	orr.w	r2, r2, #1
 8006b6c:	61aa      	str	r2, [r5, #24]
 8006b6e:	69aa      	ldr	r2, [r5, #24]
 8006b70:	f002 0201 	and.w	r2, r2, #1
 8006b74:	9203      	str	r2, [sp, #12]
 8006b76:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8006b78:	f023 0203 	bic.w	r2, r3, #3
 8006b7c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006b80:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b84:	f003 0503 	and.w	r5, r3, #3
 8006b88:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp = SYSCFG->EXTICR[position >> 2u];
 8006b8c:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b8e:	250f      	movs	r5, #15
 8006b90:	fa05 f809 	lsl.w	r8, r5, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b94:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006b98:	ea27 0708 	bic.w	r7, r7, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006b9c:	d015      	beq.n	8006bca <HAL_GPIO_Init+0xb2>
 8006b9e:	4d4e      	ldr	r5, [pc, #312]	; (8006cd8 <HAL_GPIO_Init+0x1c0>)
 8006ba0:	42a8      	cmp	r0, r5
 8006ba2:	f000 808b 	beq.w	8006cbc <HAL_GPIO_Init+0x1a4>
 8006ba6:	4d4d      	ldr	r5, [pc, #308]	; (8006cdc <HAL_GPIO_Init+0x1c4>)
 8006ba8:	42a8      	cmp	r0, r5
 8006baa:	f000 808b 	beq.w	8006cc4 <HAL_GPIO_Init+0x1ac>
 8006bae:	4d4c      	ldr	r5, [pc, #304]	; (8006ce0 <HAL_GPIO_Init+0x1c8>)
 8006bb0:	42a8      	cmp	r0, r5
 8006bb2:	d07d      	beq.n	8006cb0 <HAL_GPIO_Init+0x198>
 8006bb4:	4d4b      	ldr	r5, [pc, #300]	; (8006ce4 <HAL_GPIO_Init+0x1cc>)
 8006bb6:	42a8      	cmp	r0, r5
 8006bb8:	bf13      	iteet	ne
 8006bba:	2505      	movne	r5, #5
 8006bbc:	f04f 0804 	moveq.w	r8, #4
 8006bc0:	fa08 f509 	lsleq.w	r5, r8, r9
 8006bc4:	fa05 f509 	lslne.w	r5, r5, r9
 8006bc8:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006bca:	6097      	str	r7, [r2, #8]
        temp = EXTI->RTSR;
 8006bcc:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8006bce:	ea6f 050a 	mvn.w	r5, sl
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006bd2:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8006bd4:	bf54      	ite	pl
 8006bd6:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006bd8:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8006bdc:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8006bde:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006be0:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8006be2:	bf54      	ite	pl
 8006be4:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006be6:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR = temp;
 8006bea:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8006bec:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006bee:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8006bf0:	bf54      	ite	pl
 8006bf2:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006bf4:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR = temp;
 8006bf8:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bfa:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006bfc:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8006bfe:	bf54      	ite	pl
 8006c00:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8006c02:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8006c06:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8006c08:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c0a:	fa34 f203 	lsrs.w	r2, r4, r3
 8006c0e:	f10c 0c02 	add.w	ip, ip, #2
 8006c12:	d18e      	bne.n	8006b32 <HAL_GPIO_Init+0x1a>
  }
}
 8006c14:	b005      	add	sp, #20
 8006c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006c1a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c1e:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006c22:	f04f 0803 	mov.w	r8, #3
 8006c26:	fa08 f80c 	lsl.w	r8, r8, ip
 8006c2a:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c2e:	fa05 f50c 	lsl.w	r5, r5, ip
 8006c32:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8006c36:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006c38:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8006c3c:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c40:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c44:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8006c48:	409f      	lsls	r7, r3
 8006c4a:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006c4e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8006c50:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006c52:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006c56:	f8de 7008 	ldr.w	r7, [lr, #8]
 8006c5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8006c5e:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c62:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8006c64:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c66:	fa02 f20c 	lsl.w	r2, r2, ip
 8006c6a:	f47f af74 	bne.w	8006b56 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3u];
 8006c6e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8006c72:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c76:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8006c7a:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8006c7e:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c80:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c84:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c88:	fa07 f708 	lsl.w	r7, r7, r8
 8006c8c:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c8e:	270f      	movs	r7, #15
 8006c90:	fa07 f808 	lsl.w	r8, r7, r8
 8006c94:	9f00      	ldr	r7, [sp, #0]
 8006c96:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c9a:	9f01      	ldr	r7, [sp, #4]
 8006c9c:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8006ca0:	f8c9 7020 	str.w	r7, [r9, #32]
 8006ca4:	e757      	b.n	8006b56 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006ca6:	2503      	movs	r5, #3
 8006ca8:	fa05 f50c 	lsl.w	r5, r5, ip
 8006cac:	43ed      	mvns	r5, r5
 8006cae:	e7cf      	b.n	8006c50 <HAL_GPIO_Init+0x138>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006cb0:	f04f 0803 	mov.w	r8, #3
 8006cb4:	fa08 f509 	lsl.w	r5, r8, r9
 8006cb8:	432f      	orrs	r7, r5
 8006cba:	e786      	b.n	8006bca <HAL_GPIO_Init+0xb2>
 8006cbc:	fa0b f509 	lsl.w	r5, fp, r9
 8006cc0:	432f      	orrs	r7, r5
 8006cc2:	e782      	b.n	8006bca <HAL_GPIO_Init+0xb2>
 8006cc4:	f04f 0802 	mov.w	r8, #2
 8006cc8:	fa08 f509 	lsl.w	r5, r8, r9
 8006ccc:	432f      	orrs	r7, r5
 8006cce:	e77c      	b.n	8006bca <HAL_GPIO_Init+0xb2>
 8006cd0:	40010400 	.word	0x40010400
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	48000400 	.word	0x48000400
 8006cdc:	48000800 	.word	0x48000800
 8006ce0:	48000c00 	.word	0x48000c00
 8006ce4:	48001000 	.word	0x48001000

08006ce8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ce8:	6903      	ldr	r3, [r0, #16]
 8006cea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006cec:	bf14      	ite	ne
 8006cee:	2001      	movne	r0, #1
 8006cf0:	2000      	moveq	r0, #0
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006cf4:	b10a      	cbz	r2, 8006cfa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006cf6:	6181      	str	r1, [r0, #24]
 8006cf8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006cfa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop

08006d00 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f000 8270 	beq.w	80071e6 <HAL_RCC_OscConfig+0x4e6>
{
 8006d06:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d0a:	6803      	ldr	r3, [r0, #0]
 8006d0c:	07d9      	lsls	r1, r3, #31
{
 8006d0e:	b083      	sub	sp, #12
 8006d10:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d12:	d54d      	bpl.n	8006db0 <HAL_RCC_OscConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006d14:	49ae      	ldr	r1, [pc, #696]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
 8006d16:	684a      	ldr	r2, [r1, #4]
 8006d18:	f002 020c 	and.w	r2, r2, #12
 8006d1c:	2a04      	cmp	r2, #4
 8006d1e:	f000 8161 	beq.w	8006fe4 <HAL_RCC_OscConfig+0x2e4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006d22:	684a      	ldr	r2, [r1, #4]
 8006d24:	f002 020c 	and.w	r2, r2, #12
 8006d28:	2a08      	cmp	r2, #8
 8006d2a:	f000 8157 	beq.w	8006fdc <HAL_RCC_OscConfig+0x2dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d2e:	6863      	ldr	r3, [r4, #4]
 8006d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d34:	d017      	beq.n	8006d66 <HAL_RCC_OscConfig+0x66>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	f000 818e 	beq.w	8007058 <HAL_RCC_OscConfig+0x358>
 8006d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d40:	f000 823c 	beq.w	80071bc <HAL_RCC_OscConfig+0x4bc>
 8006d44:	4ba2      	ldr	r3, [pc, #648]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d54:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d56:	4a9e      	ldr	r2, [pc, #632]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
 8006d58:	68a1      	ldr	r1, [r4, #8]
 8006d5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006d5c:	f023 030f 	bic.w	r3, r3, #15
 8006d60:	430b      	orrs	r3, r1
 8006d62:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d64:	e00a      	b.n	8006d7c <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d66:	4a9a      	ldr	r2, [pc, #616]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
 8006d68:	6813      	ldr	r3, [r2, #0]
 8006d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d6e:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006d72:	68a1      	ldr	r1, [r4, #8]
 8006d74:	f023 030f 	bic.w	r3, r3, #15
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d7c:	f7fe f83a 	bl	8004df4 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d80:	4f93      	ldr	r7, [pc, #588]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
        tickstart = HAL_GetTick();
 8006d82:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d84:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d88:	2601      	movs	r6, #1
 8006d8a:	e005      	b.n	8006d98 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d8c:	f7fe f832 	bl	8004df4 <HAL_GetTick>
 8006d90:	1b40      	subs	r0, r0, r5
 8006d92:	2864      	cmp	r0, #100	; 0x64
 8006d94:	f200 815c 	bhi.w	8007050 <HAL_RCC_OscConfig+0x350>
 8006d98:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	fa98 f3a8 	rbit	r3, r8
 8006da2:	fab3 f383 	clz	r3, r3
 8006da6:	fa06 f303 	lsl.w	r3, r6, r3
 8006daa:	4213      	tst	r3, r2
 8006dac:	d0ee      	beq.n	8006d8c <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	079f      	lsls	r7, r3, #30
 8006db2:	d53f      	bpl.n	8006e34 <HAL_RCC_OscConfig+0x134>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006db4:	4a86      	ldr	r2, [pc, #536]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
 8006db6:	6851      	ldr	r1, [r2, #4]
 8006db8:	f011 0f0c 	tst.w	r1, #12
 8006dbc:	f000 80c2 	beq.w	8006f44 <HAL_RCC_OscConfig+0x244>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006dc0:	6851      	ldr	r1, [r2, #4]
 8006dc2:	f001 010c 	and.w	r1, r1, #12
 8006dc6:	2908      	cmp	r1, #8
 8006dc8:	f000 80b8 	beq.w	8006f3c <HAL_RCC_OscConfig+0x23c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dcc:	6922      	ldr	r2, [r4, #16]
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	f000 8197 	beq.w	8007102 <HAL_RCC_OscConfig+0x402>
 8006dd4:	2501      	movs	r5, #1
 8006dd6:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dda:	fab3 f383 	clz	r3, r3
 8006dde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006de2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006de6:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006de8:	4f79      	ldr	r7, [pc, #484]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
        __HAL_RCC_HSI_ENABLE();
 8006dea:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8006dec:	f7fe f802 	bl	8004df4 <HAL_GetTick>
 8006df0:	f04f 0802 	mov.w	r8, #2
 8006df4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df6:	e005      	b.n	8006e04 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006df8:	f7fd fffc 	bl	8004df4 <HAL_GetTick>
 8006dfc:	1b80      	subs	r0, r0, r6
 8006dfe:	2802      	cmp	r0, #2
 8006e00:	f200 8126 	bhi.w	8007050 <HAL_RCC_OscConfig+0x350>
 8006e04:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	fa98 f3a8 	rbit	r3, r8
 8006e0e:	fab3 f383 	clz	r3, r3
 8006e12:	fa05 f303 	lsl.w	r3, r5, r3
 8006e16:	4213      	tst	r3, r2
 8006e18:	d0ee      	beq.n	8006df8 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	22f8      	movs	r2, #248	; 0xf8
 8006e1e:	fa92 f2a2 	rbit	r2, r2
 8006e22:	6963      	ldr	r3, [r4, #20]
 8006e24:	fab2 f282 	clz	r2, r2
 8006e28:	4093      	lsls	r3, r2
 8006e2a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	071d      	lsls	r5, r3, #28
 8006e36:	d420      	bmi.n	8006e7a <HAL_RCC_OscConfig+0x17a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e38:	0758      	lsls	r0, r3, #29
 8006e3a:	d54a      	bpl.n	8006ed2 <HAL_RCC_OscConfig+0x1d2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e3c:	4b64      	ldr	r3, [pc, #400]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	00d1      	lsls	r1, r2, #3
 8006e42:	f140 80ba 	bpl.w	8006fba <HAL_RCC_OscConfig+0x2ba>
    FlagStatus       pwrclkchanged = RESET;
 8006e46:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e48:	4e62      	ldr	r6, [pc, #392]	; (8006fd4 <HAL_RCC_OscConfig+0x2d4>)
 8006e4a:	6833      	ldr	r3, [r6, #0]
 8006e4c:	05da      	lsls	r2, r3, #23
 8006e4e:	f140 80ef 	bpl.w	8007030 <HAL_RCC_OscConfig+0x330>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e52:	68e3      	ldr	r3, [r4, #12]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	f000 8178 	beq.w	800714a <HAL_RCC_OscConfig+0x44a>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 8123 	beq.w	80070a6 <HAL_RCC_OscConfig+0x3a6>
 8006e60:	2b05      	cmp	r3, #5
 8006e62:	4b5b      	ldr	r3, [pc, #364]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
 8006e64:	6a1a      	ldr	r2, [r3, #32]
 8006e66:	f000 81b6 	beq.w	80071d6 <HAL_RCC_OscConfig+0x4d6>
 8006e6a:	f022 0201 	bic.w	r2, r2, #1
 8006e6e:	621a      	str	r2, [r3, #32]
 8006e70:	6a1a      	ldr	r2, [r3, #32]
 8006e72:	f022 0204 	bic.w	r2, r2, #4
 8006e76:	621a      	str	r2, [r3, #32]
 8006e78:	e16c      	b.n	8007154 <HAL_RCC_OscConfig+0x454>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e7a:	69a2      	ldr	r2, [r4, #24]
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	d076      	beq.n	8006f6e <HAL_RCC_OscConfig+0x26e>
 8006e80:	2601      	movs	r6, #1
 8006e82:	fa96 f2a6 	rbit	r2, r6
      __HAL_RCC_LSI_ENABLE();
 8006e86:	4b54      	ldr	r3, [pc, #336]	; (8006fd8 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e88:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8006fd0 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_ENABLE();
 8006e8c:	fab2 f282 	clz	r2, r2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	2502      	movs	r5, #2
 8006e96:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 8006e98:	f7fd ffac 	bl	8004df4 <HAL_GetTick>
 8006e9c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e9e:	e005      	b.n	8006eac <HAL_RCC_OscConfig+0x1ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ea0:	f7fd ffa8 	bl	8004df4 <HAL_GetTick>
 8006ea4:	1bc0      	subs	r0, r0, r7
 8006ea6:	2802      	cmp	r0, #2
 8006ea8:	f200 80d2 	bhi.w	8007050 <HAL_RCC_OscConfig+0x350>
 8006eac:	fa95 f3a5 	rbit	r3, r5
 8006eb0:	fa95 f3a5 	rbit	r3, r5
 8006eb4:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eb8:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8006ebc:	fa95 f3a5 	rbit	r3, r5
 8006ec0:	fab3 f383 	clz	r3, r3
 8006ec4:	fa06 f303 	lsl.w	r3, r6, r3
 8006ec8:	4213      	tst	r3, r2
 8006eca:	d0e9      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x1a0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	0758      	lsls	r0, r3, #29
 8006ed0:	d4b4      	bmi.n	8006e3c <HAL_RCC_OscConfig+0x13c>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ed2:	69e0      	ldr	r0, [r4, #28]
 8006ed4:	b370      	cbz	r0, 8006f34 <HAL_RCC_OscConfig+0x234>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ed6:	4d3e      	ldr	r5, [pc, #248]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
 8006ed8:	686b      	ldr	r3, [r5, #4]
 8006eda:	f003 030c 	and.w	r3, r3, #12
 8006ede:	2b08      	cmp	r3, #8
 8006ee0:	f000 815b 	beq.w	800719a <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ee4:	2802      	cmp	r0, #2
 8006ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006eea:	f000 817e 	beq.w	80071ea <HAL_RCC_OscConfig+0x4ea>
 8006eee:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef2:	fab3 f383 	clz	r3, r3
 8006ef6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006efa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f04:	f7fd ff76 	bl	8004df4 <HAL_GetTick>
 8006f08:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8006f0c:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f0e:	2601      	movs	r6, #1
 8006f10:	e005      	b.n	8006f1e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f12:	f7fd ff6f 	bl	8004df4 <HAL_GetTick>
 8006f16:	1b00      	subs	r0, r0, r4
 8006f18:	2802      	cmp	r0, #2
 8006f1a:	f200 8099 	bhi.w	8007050 <HAL_RCC_OscConfig+0x350>
 8006f1e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f22:	682a      	ldr	r2, [r5, #0]
 8006f24:	fa97 f3a7 	rbit	r3, r7
 8006f28:	fab3 f383 	clz	r3, r3
 8006f2c:	fa06 f303 	lsl.w	r3, r6, r3
 8006f30:	4213      	tst	r3, r2
 8006f32:	d1ee      	bne.n	8006f12 <HAL_RCC_OscConfig+0x212>
        }
      }
    }
  }

  return HAL_OK;
 8006f34:	2000      	movs	r0, #0
}
 8006f36:	b003      	add	sp, #12
 8006f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006f3c:	6852      	ldr	r2, [r2, #4]
 8006f3e:	03d6      	lsls	r6, r2, #15
 8006f40:	f53f af44 	bmi.w	8006dcc <HAL_RCC_OscConfig+0xcc>
 8006f44:	2202      	movs	r2, #2
 8006f46:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f4a:	4921      	ldr	r1, [pc, #132]	; (8006fd0 <HAL_RCC_OscConfig+0x2d0>)
 8006f4c:	6808      	ldr	r0, [r1, #0]
 8006f4e:	fa92 f2a2 	rbit	r2, r2
 8006f52:	2101      	movs	r1, #1
 8006f54:	fab2 f282 	clz	r2, r2
 8006f58:	fa01 f202 	lsl.w	r2, r1, r2
 8006f5c:	4202      	tst	r2, r0
 8006f5e:	d056      	beq.n	800700e <HAL_RCC_OscConfig+0x30e>
 8006f60:	6922      	ldr	r2, [r4, #16]
 8006f62:	428a      	cmp	r2, r1
 8006f64:	d053      	beq.n	800700e <HAL_RCC_OscConfig+0x30e>
        return HAL_ERROR;
 8006f66:	2001      	movs	r0, #1
}
 8006f68:	b003      	add	sp, #12
 8006f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f6e:	2701      	movs	r7, #1
 8006f70:	fa97 f1a7 	rbit	r1, r7
      __HAL_RCC_LSI_DISABLE();
 8006f74:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <HAL_RCC_OscConfig+0x2d8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f76:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006fd0 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_LSI_DISABLE();
 8006f7a:	fab1 f181 	clz	r1, r1
 8006f7e:	440b      	add	r3, r1
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	2502      	movs	r5, #2
 8006f84:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006f86:	f7fd ff35 	bl	8004df4 <HAL_GetTick>
 8006f8a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f8c:	e004      	b.n	8006f98 <HAL_RCC_OscConfig+0x298>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f8e:	f7fd ff31 	bl	8004df4 <HAL_GetTick>
 8006f92:	1b80      	subs	r0, r0, r6
 8006f94:	2802      	cmp	r0, #2
 8006f96:	d85b      	bhi.n	8007050 <HAL_RCC_OscConfig+0x350>
 8006f98:	fa95 f3a5 	rbit	r3, r5
 8006f9c:	fa95 f3a5 	rbit	r3, r5
 8006fa0:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fa4:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8006fa8:	fa95 f3a5 	rbit	r3, r5
 8006fac:	fab3 f383 	clz	r3, r3
 8006fb0:	fa07 f303 	lsl.w	r3, r7, r3
 8006fb4:	4213      	tst	r3, r2
 8006fb6:	d1ea      	bne.n	8006f8e <HAL_RCC_OscConfig+0x28e>
 8006fb8:	e788      	b.n	8006ecc <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006fc0:	61da      	str	r2, [r3, #28]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006fcc:	2501      	movs	r5, #1
 8006fce:	e73b      	b.n	8006e48 <HAL_RCC_OscConfig+0x148>
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	40007000 	.word	0x40007000
 8006fd8:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006fdc:	684a      	ldr	r2, [r1, #4]
 8006fde:	03d2      	lsls	r2, r2, #15
 8006fe0:	f57f aea5 	bpl.w	8006d2e <HAL_RCC_OscConfig+0x2e>
 8006fe4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006fe8:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fec:	49a7      	ldr	r1, [pc, #668]	; (800728c <HAL_RCC_OscConfig+0x58c>)
 8006fee:	6808      	ldr	r0, [r1, #0]
 8006ff0:	fa92 f2a2 	rbit	r2, r2
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	fab2 f282 	clz	r2, r2
 8006ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8006ffe:	4202      	tst	r2, r0
 8007000:	f43f aed6 	beq.w	8006db0 <HAL_RCC_OscConfig+0xb0>
 8007004:	6862      	ldr	r2, [r4, #4]
 8007006:	2a00      	cmp	r2, #0
 8007008:	f47f aed2 	bne.w	8006db0 <HAL_RCC_OscConfig+0xb0>
 800700c:	e7ab      	b.n	8006f66 <HAL_RCC_OscConfig+0x266>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800700e:	4d9f      	ldr	r5, [pc, #636]	; (800728c <HAL_RCC_OscConfig+0x58c>)
 8007010:	21f8      	movs	r1, #248	; 0xf8
 8007012:	6828      	ldr	r0, [r5, #0]
 8007014:	fa91 f1a1 	rbit	r1, r1
 8007018:	6962      	ldr	r2, [r4, #20]
 800701a:	fab1 f181 	clz	r1, r1
 800701e:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8007022:	408a      	lsls	r2, r1
 8007024:	4302      	orrs	r2, r0
 8007026:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007028:	071d      	lsls	r5, r3, #28
 800702a:	f57f af05 	bpl.w	8006e38 <HAL_RCC_OscConfig+0x138>
 800702e:	e724      	b.n	8006e7a <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007030:	6833      	ldr	r3, [r6, #0]
 8007032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007036:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007038:	f7fd fedc 	bl	8004df4 <HAL_GetTick>
 800703c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800703e:	6833      	ldr	r3, [r6, #0]
 8007040:	05db      	lsls	r3, r3, #23
 8007042:	f53f af06 	bmi.w	8006e52 <HAL_RCC_OscConfig+0x152>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007046:	f7fd fed5 	bl	8004df4 <HAL_GetTick>
 800704a:	1bc0      	subs	r0, r0, r7
 800704c:	2864      	cmp	r0, #100	; 0x64
 800704e:	d9f6      	bls.n	800703e <HAL_RCC_OscConfig+0x33e>
            return HAL_TIMEOUT;
 8007050:	2003      	movs	r0, #3
}
 8007052:	b003      	add	sp, #12
 8007054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007058:	4d8c      	ldr	r5, [pc, #560]	; (800728c <HAL_RCC_OscConfig+0x58c>)
 800705a:	682b      	ldr	r3, [r5, #0]
 800705c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007068:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800706a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800706c:	68a2      	ldr	r2, [r4, #8]
 800706e:	f023 030f 	bic.w	r3, r3, #15
 8007072:	4313      	orrs	r3, r2
 8007074:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8007076:	f7fd febd 	bl	8004df4 <HAL_GetTick>
 800707a:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 800707e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007080:	2701      	movs	r7, #1
 8007082:	e004      	b.n	800708e <HAL_RCC_OscConfig+0x38e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007084:	f7fd feb6 	bl	8004df4 <HAL_GetTick>
 8007088:	1b80      	subs	r0, r0, r6
 800708a:	2864      	cmp	r0, #100	; 0x64
 800708c:	d8e0      	bhi.n	8007050 <HAL_RCC_OscConfig+0x350>
 800708e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007092:	682a      	ldr	r2, [r5, #0]
 8007094:	fa98 f3a8 	rbit	r3, r8
 8007098:	fab3 f383 	clz	r3, r3
 800709c:	fa07 f303 	lsl.w	r3, r7, r3
 80070a0:	4213      	tst	r3, r2
 80070a2:	d1ef      	bne.n	8007084 <HAL_RCC_OscConfig+0x384>
 80070a4:	e683      	b.n	8006dae <HAL_RCC_OscConfig+0xae>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070a6:	4e79      	ldr	r6, [pc, #484]	; (800728c <HAL_RCC_OscConfig+0x58c>)
 80070a8:	6a33      	ldr	r3, [r6, #32]
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	6233      	str	r3, [r6, #32]
 80070b0:	6a33      	ldr	r3, [r6, #32]
 80070b2:	f023 0304 	bic.w	r3, r3, #4
 80070b6:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80070b8:	f7fd fe9c 	bl	8004df4 <HAL_GetTick>
 80070bc:	f04f 0902 	mov.w	r9, #2
 80070c0:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c2:	f04f 0801 	mov.w	r8, #1
 80070c6:	e006      	b.n	80070d6 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070c8:	f7fd fe94 	bl	8004df4 <HAL_GetTick>
 80070cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80070d0:	1bc0      	subs	r0, r0, r7
 80070d2:	4298      	cmp	r0, r3
 80070d4:	d8bc      	bhi.n	8007050 <HAL_RCC_OscConfig+0x350>
 80070d6:	fa99 f3a9 	rbit	r3, r9
 80070da:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070de:	6a32      	ldr	r2, [r6, #32]
 80070e0:	fa99 f3a9 	rbit	r3, r9
 80070e4:	fab3 f383 	clz	r3, r3
 80070e8:	fa08 f303 	lsl.w	r3, r8, r3
 80070ec:	4213      	tst	r3, r2
 80070ee:	d1eb      	bne.n	80070c8 <HAL_RCC_OscConfig+0x3c8>
    if(pwrclkchanged == SET)
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	f43f aeee 	beq.w	8006ed2 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80070f6:	4a65      	ldr	r2, [pc, #404]	; (800728c <HAL_RCC_OscConfig+0x58c>)
 80070f8:	69d3      	ldr	r3, [r2, #28]
 80070fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070fe:	61d3      	str	r3, [r2, #28]
 8007100:	e6e7      	b.n	8006ed2 <HAL_RCC_OscConfig+0x1d2>
 8007102:	2601      	movs	r6, #1
 8007104:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8007108:	fab3 f383 	clz	r3, r3
 800710c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007110:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007114:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007116:	4f5d      	ldr	r7, [pc, #372]	; (800728c <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_HSI_DISABLE();
 8007118:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800711a:	f7fd fe6b 	bl	8004df4 <HAL_GetTick>
 800711e:	f04f 0802 	mov.w	r8, #2
 8007122:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007124:	e004      	b.n	8007130 <HAL_RCC_OscConfig+0x430>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007126:	f7fd fe65 	bl	8004df4 <HAL_GetTick>
 800712a:	1b40      	subs	r0, r0, r5
 800712c:	2802      	cmp	r0, #2
 800712e:	d88f      	bhi.n	8007050 <HAL_RCC_OscConfig+0x350>
 8007130:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	fa98 f3a8 	rbit	r3, r8
 800713a:	fab3 f383 	clz	r3, r3
 800713e:	fa06 f303 	lsl.w	r3, r6, r3
 8007142:	4213      	tst	r3, r2
 8007144:	d1ef      	bne.n	8007126 <HAL_RCC_OscConfig+0x426>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	e674      	b.n	8006e34 <HAL_RCC_OscConfig+0x134>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800714a:	4a50      	ldr	r2, [pc, #320]	; (800728c <HAL_RCC_OscConfig+0x58c>)
 800714c:	6a13      	ldr	r3, [r2, #32]
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8007154:	f7fd fe4e 	bl	8004df4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007158:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800728c <HAL_RCC_OscConfig+0x58c>
      tickstart = HAL_GetTick();
 800715c:	4606      	mov	r6, r0
 800715e:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007162:	2701      	movs	r7, #1
 8007164:	e007      	b.n	8007176 <HAL_RCC_OscConfig+0x476>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007166:	f7fd fe45 	bl	8004df4 <HAL_GetTick>
 800716a:	f241 3388 	movw	r3, #5000	; 0x1388
 800716e:	1b80      	subs	r0, r0, r6
 8007170:	4298      	cmp	r0, r3
 8007172:	f63f af6d 	bhi.w	8007050 <HAL_RCC_OscConfig+0x350>
 8007176:	fa99 f3a9 	rbit	r3, r9
 800717a:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717e:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8007182:	fa99 f3a9 	rbit	r3, r9
 8007186:	fab3 f383 	clz	r3, r3
 800718a:	fa07 f303 	lsl.w	r3, r7, r3
 800718e:	4213      	tst	r3, r2
 8007190:	d0e9      	beq.n	8007166 <HAL_RCC_OscConfig+0x466>
    if(pwrclkchanged == SET)
 8007192:	2d00      	cmp	r5, #0
 8007194:	f43f ae9d 	beq.w	8006ed2 <HAL_RCC_OscConfig+0x1d2>
 8007198:	e7ad      	b.n	80070f6 <HAL_RCC_OscConfig+0x3f6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800719a:	2801      	cmp	r0, #1
 800719c:	f43f aecb 	beq.w	8006f36 <HAL_RCC_OscConfig+0x236>
        pll_config = RCC->CFGR;
 80071a0:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80071a2:	6a22      	ldr	r2, [r4, #32]
 80071a4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80071a8:	4291      	cmp	r1, r2
 80071aa:	f47f aedc 	bne.w	8006f66 <HAL_RCC_OscConfig+0x266>
 80071ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80071b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 80071b4:	1a18      	subs	r0, r3, r0
 80071b6:	bf18      	it	ne
 80071b8:	2001      	movne	r0, #1
 80071ba:	e6bc      	b.n	8006f36 <HAL_RCC_OscConfig+0x236>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071c0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	e5bf      	b.n	8006d56 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071d6:	f042 0204 	orr.w	r2, r2, #4
 80071da:	621a      	str	r2, [r3, #32]
 80071dc:	6a1a      	ldr	r2, [r3, #32]
 80071de:	f042 0201 	orr.w	r2, r2, #1
 80071e2:	621a      	str	r2, [r3, #32]
 80071e4:	e7b6      	b.n	8007154 <HAL_RCC_OscConfig+0x454>
    return HAL_ERROR;
 80071e6:	2001      	movs	r0, #1
}
 80071e8:	4770      	bx	lr
 80071ea:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80071ee:	fab3 f383 	clz	r3, r3
 80071f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80071f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007200:	f7fd fdf8 	bl	8004df4 <HAL_GetTick>
 8007204:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8007208:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800720a:	2701      	movs	r7, #1
 800720c:	e005      	b.n	800721a <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800720e:	f7fd fdf1 	bl	8004df4 <HAL_GetTick>
 8007212:	1b80      	subs	r0, r0, r6
 8007214:	2802      	cmp	r0, #2
 8007216:	f63f af1b 	bhi.w	8007050 <HAL_RCC_OscConfig+0x350>
 800721a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800721e:	682a      	ldr	r2, [r5, #0]
 8007220:	fa98 f3a8 	rbit	r3, r8
 8007224:	fab3 f383 	clz	r3, r3
 8007228:	fa07 f303 	lsl.w	r3, r7, r3
 800722c:	4213      	tst	r3, r2
 800722e:	d1ee      	bne.n	800720e <HAL_RCC_OscConfig+0x50e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007230:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8007234:	686a      	ldr	r2, [r5, #4]
 8007236:	430b      	orrs	r3, r1
 8007238:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800723c:	4313      	orrs	r3, r2
 800723e:	606b      	str	r3, [r5, #4]
 8007240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007244:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8007248:	fab3 f383 	clz	r3, r3
 800724c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007250:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007254:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007256:	4d0d      	ldr	r5, [pc, #52]	; (800728c <HAL_RCC_OscConfig+0x58c>)
        __HAL_RCC_PLL_ENABLE();
 8007258:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 800725a:	f7fd fdcb 	bl	8004df4 <HAL_GetTick>
 800725e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8007262:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007264:	2601      	movs	r6, #1
 8007266:	e005      	b.n	8007274 <HAL_RCC_OscConfig+0x574>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007268:	f7fd fdc4 	bl	8004df4 <HAL_GetTick>
 800726c:	1b00      	subs	r0, r0, r4
 800726e:	2802      	cmp	r0, #2
 8007270:	f63f aeee 	bhi.w	8007050 <HAL_RCC_OscConfig+0x350>
 8007274:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007278:	682a      	ldr	r2, [r5, #0]
 800727a:	fa97 f3a7 	rbit	r3, r7
 800727e:	fab3 f383 	clz	r3, r3
 8007282:	fa06 f303 	lsl.w	r3, r6, r3
 8007286:	4213      	tst	r3, r2
 8007288:	d0ee      	beq.n	8007268 <HAL_RCC_OscConfig+0x568>
 800728a:	e653      	b.n	8006f34 <HAL_RCC_OscConfig+0x234>
 800728c:	40021000 	.word	0x40021000

08007290 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007290:	2800      	cmp	r0, #0
 8007292:	f000 80b2 	beq.w	80073fa <HAL_RCC_ClockConfig+0x16a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007296:	4a65      	ldr	r2, [pc, #404]	; (800742c <HAL_RCC_ClockConfig+0x19c>)
 8007298:	6813      	ldr	r3, [r2, #0]
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	428b      	cmp	r3, r1
{
 80072a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a4:	460d      	mov	r5, r1
 80072a6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072a8:	d20c      	bcs.n	80072c4 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072aa:	6813      	ldr	r3, [r2, #0]
 80072ac:	f023 0307 	bic.w	r3, r3, #7
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b4:	6813      	ldr	r3, [r2, #0]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	428b      	cmp	r3, r1
 80072bc:	d002      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80072be:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 80072c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	079f      	lsls	r7, r3, #30
 80072c8:	d506      	bpl.n	80072d8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072ca:	4959      	ldr	r1, [pc, #356]	; (8007430 <HAL_RCC_ClockConfig+0x1a0>)
 80072cc:	68a0      	ldr	r0, [r4, #8]
 80072ce:	684a      	ldr	r2, [r1, #4]
 80072d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80072d4:	4302      	orrs	r2, r0
 80072d6:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072d8:	07de      	lsls	r6, r3, #31
 80072da:	d52d      	bpl.n	8007338 <HAL_RCC_ClockConfig+0xa8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072dc:	6862      	ldr	r2, [r4, #4]
 80072de:	2a01      	cmp	r2, #1
 80072e0:	f000 808d 	beq.w	80073fe <HAL_RCC_ClockConfig+0x16e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072e4:	2a02      	cmp	r2, #2
 80072e6:	bf0c      	ite	eq
 80072e8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80072ec:	2302      	movne	r3, #2
 80072ee:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f2:	494f      	ldr	r1, [pc, #316]	; (8007430 <HAL_RCC_ClockConfig+0x1a0>)
 80072f4:	6808      	ldr	r0, [r1, #0]
 80072f6:	fa93 f3a3 	rbit	r3, r3
 80072fa:	2101      	movs	r1, #1
 80072fc:	fab3 f383 	clz	r3, r3
 8007300:	fa01 f303 	lsl.w	r3, r1, r3
 8007304:	4203      	tst	r3, r0
 8007306:	d0da      	beq.n	80072be <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007308:	4e49      	ldr	r6, [pc, #292]	; (8007430 <HAL_RCC_ClockConfig+0x1a0>)
 800730a:	6873      	ldr	r3, [r6, #4]
 800730c:	f023 0303 	bic.w	r3, r3, #3
 8007310:	4313      	orrs	r3, r2
 8007312:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007314:	f7fd fd6e 	bl	8004df4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007318:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800731c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800731e:	e004      	b.n	800732a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007320:	f7fd fd68 	bl	8004df4 <HAL_GetTick>
 8007324:	1bc0      	subs	r0, r0, r7
 8007326:	4540      	cmp	r0, r8
 8007328:	d879      	bhi.n	800741e <HAL_RCC_ClockConfig+0x18e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800732a:	6873      	ldr	r3, [r6, #4]
 800732c:	6862      	ldr	r2, [r4, #4]
 800732e:	f003 030c 	and.w	r3, r3, #12
 8007332:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007336:	d1f3      	bne.n	8007320 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007338:	4a3c      	ldr	r2, [pc, #240]	; (800742c <HAL_RCC_ClockConfig+0x19c>)
 800733a:	6813      	ldr	r3, [r2, #0]
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	42ab      	cmp	r3, r5
 8007342:	d909      	bls.n	8007358 <HAL_RCC_ClockConfig+0xc8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007344:	6813      	ldr	r3, [r2, #0]
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	432b      	orrs	r3, r5
 800734c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800734e:	6813      	ldr	r3, [r2, #0]
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	42ab      	cmp	r3, r5
 8007356:	d1b2      	bne.n	80072be <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	0758      	lsls	r0, r3, #29
 800735c:	d506      	bpl.n	800736c <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800735e:	4934      	ldr	r1, [pc, #208]	; (8007430 <HAL_RCC_ClockConfig+0x1a0>)
 8007360:	68e0      	ldr	r0, [r4, #12]
 8007362:	684a      	ldr	r2, [r1, #4]
 8007364:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007368:	4302      	orrs	r2, r0
 800736a:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800736c:	0719      	lsls	r1, r3, #28
 800736e:	d507      	bpl.n	8007380 <HAL_RCC_ClockConfig+0xf0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007370:	4a2f      	ldr	r2, [pc, #188]	; (8007430 <HAL_RCC_ClockConfig+0x1a0>)
 8007372:	6921      	ldr	r1, [r4, #16]
 8007374:	6853      	ldr	r3, [r2, #4]
 8007376:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800737a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800737e:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8007380:	492b      	ldr	r1, [pc, #172]	; (8007430 <HAL_RCC_ClockConfig+0x1a0>)
 8007382:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007384:	f002 030c 	and.w	r3, r2, #12
 8007388:	2b08      	cmp	r3, #8
 800738a:	d017      	beq.n	80073bc <HAL_RCC_ClockConfig+0x12c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800738c:	4929      	ldr	r1, [pc, #164]	; (8007434 <HAL_RCC_ClockConfig+0x1a4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800738e:	4b28      	ldr	r3, [pc, #160]	; (8007430 <HAL_RCC_ClockConfig+0x1a0>)
 8007390:	22f0      	movs	r2, #240	; 0xf0
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	fa92 f2a2 	rbit	r2, r2
 8007398:	fab2 f282 	clz	r2, r2
 800739c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073a0:	40d3      	lsrs	r3, r2
 80073a2:	4a25      	ldr	r2, [pc, #148]	; (8007438 <HAL_RCC_ClockConfig+0x1a8>)
  HAL_InitTick (uwTickPrio);
 80073a4:	4825      	ldr	r0, [pc, #148]	; (800743c <HAL_RCC_ClockConfig+0x1ac>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80073a6:	5cd3      	ldrb	r3, [r2, r3]
 80073a8:	4a25      	ldr	r2, [pc, #148]	; (8007440 <HAL_RCC_ClockConfig+0x1b0>)
  HAL_InitTick (uwTickPrio);
 80073aa:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80073ac:	fa21 f303 	lsr.w	r3, r1, r3
 80073b0:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80073b2:	f7fd fcdd 	bl	8004d70 <HAL_InitTick>
  return HAL_OK;
 80073b6:	2000      	movs	r0, #0
}
 80073b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073bc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80073c0:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80073c4:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 80073c8:	fab3 f383 	clz	r3, r3
 80073cc:	4c1d      	ldr	r4, [pc, #116]	; (8007444 <HAL_RCC_ClockConfig+0x1b4>)
 80073ce:	fa20 f303 	lsr.w	r3, r0, r3
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80073d2:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80073d4:	5ce3      	ldrb	r3, [r4, r3]
 80073d6:	210f      	movs	r1, #15
 80073d8:	fa91 f1a1 	rbit	r1, r1
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80073dc:	03d2      	lsls	r2, r2, #15
 80073de:	d520      	bpl.n	8007422 <HAL_RCC_ClockConfig+0x192>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80073e0:	fab1 f181 	clz	r1, r1
 80073e4:	f000 000f 	and.w	r0, r0, #15
 80073e8:	4c17      	ldr	r4, [pc, #92]	; (8007448 <HAL_RCC_ClockConfig+0x1b8>)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80073ea:	4a12      	ldr	r2, [pc, #72]	; (8007434 <HAL_RCC_ClockConfig+0x1a4>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80073ec:	40c8      	lsrs	r0, r1
 80073ee:	5c21      	ldrb	r1, [r4, r0]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80073f0:	fbb2 f2f1 	udiv	r2, r2, r1
 80073f4:	fb03 f102 	mul.w	r1, r3, r2
 80073f8:	e7c9      	b.n	800738e <HAL_RCC_ClockConfig+0xfe>
    return HAL_ERROR;
 80073fa:	2001      	movs	r0, #1
}
 80073fc:	4770      	bx	lr
 80073fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007402:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007406:	490a      	ldr	r1, [pc, #40]	; (8007430 <HAL_RCC_ClockConfig+0x1a0>)
 8007408:	6809      	ldr	r1, [r1, #0]
 800740a:	fa93 f3a3 	rbit	r3, r3
 800740e:	fab3 f383 	clz	r3, r3
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	420b      	tst	r3, r1
 8007418:	f47f af76 	bne.w	8007308 <HAL_RCC_ClockConfig+0x78>
 800741c:	e74f      	b.n	80072be <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800741e:	2003      	movs	r0, #3
 8007420:	e74e      	b.n	80072c0 <HAL_RCC_ClockConfig+0x30>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007422:	490a      	ldr	r1, [pc, #40]	; (800744c <HAL_RCC_ClockConfig+0x1bc>)
 8007424:	fb03 f101 	mul.w	r1, r3, r1
 8007428:	e7b1      	b.n	800738e <HAL_RCC_ClockConfig+0xfe>
 800742a:	bf00      	nop
 800742c:	40022000 	.word	0x40022000
 8007430:	40021000 	.word	0x40021000
 8007434:	007a1200 	.word	0x007a1200
 8007438:	0800d9fc 	.word	0x0800d9fc
 800743c:	20000008 	.word	0x20000008
 8007440:	20000000 	.word	0x20000000
 8007444:	0800da14 	.word	0x0800da14
 8007448:	0800da24 	.word	0x0800da24
 800744c:	003d0900 	.word	0x003d0900

08007450 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8007450:	4917      	ldr	r1, [pc, #92]	; (80074b0 <HAL_RCC_GetSysClockFreq+0x60>)
 8007452:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8007454:	f003 020c 	and.w	r2, r3, #12
 8007458:	2a08      	cmp	r2, #8
 800745a:	d001      	beq.n	8007460 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 800745c:	4815      	ldr	r0, [pc, #84]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x64>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800745e:	4770      	bx	lr
{
 8007460:	b410      	push	{r4}
 8007462:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007466:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800746a:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 800746e:	fab2 f282 	clz	r2, r2
 8007472:	4c11      	ldr	r4, [pc, #68]	; (80074b8 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007474:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007476:	fa20 f202 	lsr.w	r2, r0, r2
 800747a:	5ca0      	ldrb	r0, [r4, r2]
 800747c:	220f      	movs	r2, #15
 800747e:	fa92 f2a2 	rbit	r2, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007482:	03db      	lsls	r3, r3, #15
 8007484:	d50e      	bpl.n	80074a4 <HAL_RCC_GetSysClockFreq+0x54>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007486:	fab2 f282 	clz	r2, r2
 800748a:	f001 010f 	and.w	r1, r1, #15
 800748e:	4c0b      	ldr	r4, [pc, #44]	; (80074bc <HAL_RCC_GetSysClockFreq+0x6c>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007490:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <HAL_RCC_GetSysClockFreq+0x64>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007492:	40d1      	lsrs	r1, r2
 8007494:	5c62      	ldrb	r2, [r4, r1]
}
 8007496:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800749a:	fbb3 f3f2 	udiv	r3, r3, r2
 800749e:	fb03 f000 	mul.w	r0, r3, r0
}
 80074a2:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80074a4:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80074a6:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80074aa:	fb03 f000 	mul.w	r0, r3, r0
}
 80074ae:	4770      	bx	lr
 80074b0:	40021000 	.word	0x40021000
 80074b4:	007a1200 	.word	0x007a1200
 80074b8:	0800da14 	.word	0x0800da14
 80074bc:	0800da24 	.word	0x0800da24
 80074c0:	003d0900 	.word	0x003d0900

080074c4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80074c4:	4b08      	ldr	r3, [pc, #32]	; (80074e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	fa92 f2a2 	rbit	r2, r2
 80074d0:	fab2 f282 	clz	r2, r2
 80074d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074d8:	4904      	ldr	r1, [pc, #16]	; (80074ec <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 80074da:	4805      	ldr	r0, [pc, #20]	; (80074f0 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80074dc:	40d3      	lsrs	r3, r2
 80074de:	6800      	ldr	r0, [r0, #0]
 80074e0:	5ccb      	ldrb	r3, [r1, r3]
}    
 80074e2:	40d8      	lsrs	r0, r3
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40021000 	.word	0x40021000
 80074ec:	0800da0c 	.word	0x0800da0c
 80074f0:	20000000 	.word	0x20000000

080074f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80074f4:	4b08      	ldr	r3, [pc, #32]	; (8007518 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	fa92 f2a2 	rbit	r2, r2
 8007500:	fab2 f282 	clz	r2, r2
 8007504:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007508:	4904      	ldr	r1, [pc, #16]	; (800751c <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 800750a:	4805      	ldr	r0, [pc, #20]	; (8007520 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800750c:	40d3      	lsrs	r3, r2
 800750e:	6800      	ldr	r0, [r0, #0]
 8007510:	5ccb      	ldrb	r3, [r1, r3]
} 
 8007512:	40d8      	lsrs	r0, r3
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40021000 	.word	0x40021000
 800751c:	0800da0c 	.word	0x0800da0c
 8007520:	20000000 	.word	0x20000000

08007524 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007528:	6803      	ldr	r3, [r0, #0]
 800752a:	03dd      	lsls	r5, r3, #15
{
 800752c:	b083      	sub	sp, #12
 800752e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007530:	d540      	bpl.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007532:	4b7f      	ldr	r3, [pc, #508]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007534:	69da      	ldr	r2, [r3, #28]
 8007536:	00d0      	lsls	r0, r2, #3
 8007538:	f140 80ba 	bpl.w	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800753c:	4d7d      	ldr	r5, [pc, #500]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 8007542:	f04f 0600 	mov.w	r6, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007546:	f140 80c3 	bpl.w	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800754a:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800754e:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007552:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8007556:	d020      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007558:	6861      	ldr	r1, [r4, #4]
 800755a:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800755e:	429a      	cmp	r2, r3
 8007560:	d01c      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007562:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8007566:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800756a:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 800756e:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007572:	4f71      	ldr	r7, [pc, #452]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007574:	fab2 f282 	clz	r2, r2
 8007578:	443a      	add	r2, r7
 800757a:	0092      	lsls	r2, r2, #2
 800757c:	2501      	movs	r5, #1
 800757e:	6015      	str	r5, [r2, #0]
 8007580:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007584:	fab3 f383 	clz	r3, r3
 8007588:	443b      	add	r3, r7
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007590:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8007592:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007596:	f100 80af 	bmi.w	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800759a:	6861      	ldr	r1, [r4, #4]
 800759c:	4a64      	ldr	r2, [pc, #400]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800759e:	6a13      	ldr	r3, [r2, #32]
 80075a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a4:	430b      	orrs	r3, r1
 80075a6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80075a8:	b11e      	cbz	r6, 80075b2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075aa:	69d3      	ldr	r3, [r2, #28]
 80075ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	07df      	lsls	r7, r3, #31
 80075b6:	d506      	bpl.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075b8:	495d      	ldr	r1, [pc, #372]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80075ba:	68a0      	ldr	r0, [r4, #8]
 80075bc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80075be:	f022 0203 	bic.w	r2, r2, #3
 80075c2:	4302      	orrs	r2, r0
 80075c4:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075c6:	079e      	lsls	r6, r3, #30
 80075c8:	d506      	bpl.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075ca:	4959      	ldr	r1, [pc, #356]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80075cc:	68e0      	ldr	r0, [r4, #12]
 80075ce:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80075d0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80075d4:	4302      	orrs	r2, r0
 80075d6:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075d8:	075d      	lsls	r5, r3, #29
 80075da:	d506      	bpl.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075dc:	4954      	ldr	r1, [pc, #336]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80075de:	6920      	ldr	r0, [r4, #16]
 80075e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80075e2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80075e6:	4302      	orrs	r2, r0
 80075e8:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075ea:	0698      	lsls	r0, r3, #26
 80075ec:	d506      	bpl.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ee:	4950      	ldr	r1, [pc, #320]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80075f0:	69e0      	ldr	r0, [r4, #28]
 80075f2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80075f4:	f022 0210 	bic.w	r2, r2, #16
 80075f8:	4302      	orrs	r2, r0
 80075fa:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075fc:	0399      	lsls	r1, r3, #14
 80075fe:	d506      	bpl.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007600:	494b      	ldr	r1, [pc, #300]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007602:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007604:	684a      	ldr	r2, [r1, #4]
 8007606:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800760a:	4302      	orrs	r2, r0
 800760c:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800760e:	065a      	lsls	r2, r3, #25
 8007610:	d506      	bpl.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007612:	4947      	ldr	r1, [pc, #284]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007614:	6a20      	ldr	r0, [r4, #32]
 8007616:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007618:	f022 0220 	bic.w	r2, r2, #32
 800761c:	4302      	orrs	r2, r0
 800761e:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007620:	071f      	lsls	r7, r3, #28
 8007622:	d506      	bpl.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007624:	4942      	ldr	r1, [pc, #264]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007626:	6960      	ldr	r0, [r4, #20]
 8007628:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800762a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800762e:	4302      	orrs	r2, r0
 8007630:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007632:	06de      	lsls	r6, r3, #27
 8007634:	d506      	bpl.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007636:	493e      	ldr	r1, [pc, #248]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007638:	69a0      	ldr	r0, [r4, #24]
 800763a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800763c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8007640:	4302      	orrs	r2, r0
 8007642:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007644:	059d      	lsls	r5, r3, #22
 8007646:	d506      	bpl.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007648:	4939      	ldr	r1, [pc, #228]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800764a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800764c:	684a      	ldr	r2, [r1, #4]
 800764e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007652:	4302      	orrs	r2, r0
 8007654:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007656:	0618      	lsls	r0, r3, #24
 8007658:	d506      	bpl.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800765a:	4935      	ldr	r1, [pc, #212]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800765c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800765e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007660:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8007664:	4302      	orrs	r2, r0
 8007666:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007668:	05d9      	lsls	r1, r3, #23
 800766a:	d506      	bpl.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800766c:	4930      	ldr	r1, [pc, #192]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800766e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007670:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007672:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8007676:	4302      	orrs	r2, r0
 8007678:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800767a:	04da      	lsls	r2, r3, #19
 800767c:	d506      	bpl.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800767e:	492c      	ldr	r1, [pc, #176]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8007680:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007682:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8007684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007688:	4302      	orrs	r2, r0
 800768a:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800768c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8007690:	d103      	bne.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007692:	4618      	mov	r0, r3
}
 8007694:	b003      	add	sp, #12
 8007696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800769a:	4a25      	ldr	r2, [pc, #148]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800769c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800769e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80076a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 80076a4:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80076a6:	430b      	orrs	r3, r1
 80076a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80076aa:	b003      	add	sp, #12
 80076ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80076b0:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076b2:	4d20      	ldr	r5, [pc, #128]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x210>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80076b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80076b8:	61da      	str	r2, [r3, #28]
 80076ba:	69db      	ldr	r3, [r3, #28]
 80076bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 80076c8:	f04f 0601 	mov.w	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076cc:	f53f af3d 	bmi.w	800754a <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076d6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80076d8:	f7fd fb8c 	bl	8004df4 <HAL_GetTick>
 80076dc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076de:	682b      	ldr	r3, [r5, #0]
 80076e0:	05da      	lsls	r2, r3, #23
 80076e2:	f53f af32 	bmi.w	800754a <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076e6:	f7fd fb85 	bl	8004df4 <HAL_GetTick>
 80076ea:	1bc0      	subs	r0, r0, r7
 80076ec:	2864      	cmp	r0, #100	; 0x64
 80076ee:	d9f6      	bls.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 80076f0:	2003      	movs	r0, #3
}
 80076f2:	b003      	add	sp, #12
 80076f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 80076f8:	f7fd fb7c 	bl	8004df4 <HAL_GetTick>
 80076fc:	f04f 0902 	mov.w	r9, #2
 8007700:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007702:	e006      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007704:	f7fd fb76 	bl	8004df4 <HAL_GetTick>
 8007708:	f241 3388 	movw	r3, #5000	; 0x1388
 800770c:	1bc0      	subs	r0, r0, r7
 800770e:	4298      	cmp	r0, r3
 8007710:	d8ee      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007712:	fa99 f3a9 	rbit	r3, r9
 8007716:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800771a:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800771e:	fa99 f3a9 	rbit	r3, r9
 8007722:	fab3 f383 	clz	r3, r3
 8007726:	fa05 f303 	lsl.w	r3, r5, r3
 800772a:	4213      	tst	r3, r2
 800772c:	d0ea      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800772e:	e734      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007730:	40021000 	.word	0x40021000
 8007734:	40007000 	.word	0x40007000
 8007738:	10908100 	.word	0x10908100

0800773c <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800773c:	2800      	cmp	r0, #0
 800773e:	d077      	beq.n	8007830 <HAL_SPI_Init+0xf4>
{
 8007740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007744:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007746:	4604      	mov	r4, r0
 8007748:	2e00      	cmp	r6, #0
 800774a:	d058      	beq.n	80077fe <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800774c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800774e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007752:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007756:	2200      	movs	r2, #0
 8007758:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800775a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800775e:	2b00      	cmp	r3, #0
 8007760:	d059      	beq.n	8007816 <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007762:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007764:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007766:	2302      	movs	r3, #2
 8007768:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800776c:	680a      	ldr	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800776e:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8007772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007776:	600a      	str	r2, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007778:	d947      	bls.n	800780a <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800777a:	f5b7 6f70 	cmp.w	r7, #3840	; 0xf00
 800777e:	d159      	bne.n	8007834 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007780:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007782:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007784:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 8007788:	6862      	ldr	r2, [r4, #4]
 800778a:	68a3      	ldr	r3, [r4, #8]
 800778c:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8007790:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007794:	431a      	orrs	r2, r3
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	4313      	orrs	r3, r2
 800779e:	6962      	ldr	r2, [r4, #20]
 80077a0:	f002 0201 	and.w	r2, r2, #1
 80077a4:	431a      	orrs	r2, r3
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077a8:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077b4:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077b6:	f006 0c10 	and.w	ip, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077ba:	f003 0838 	and.w	r8, r3, #56	; 0x38
 80077be:	69a6      	ldr	r6, [r4, #24]
 80077c0:	6a23      	ldr	r3, [r4, #32]
 80077c2:	f003 0780 	and.w	r7, r3, #128	; 0x80
 80077c6:	f406 7300 	and.w	r3, r6, #512	; 0x200
 80077ca:	4313      	orrs	r3, r2
 80077cc:	ea43 0308 	orr.w	r3, r3, r8
 80077d0:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077d2:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077d4:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077d6:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80077da:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077dc:	ea4e 0306 	orr.w	r3, lr, r6
 80077e0:	ea43 030c 	orr.w	r3, r3, ip
 80077e4:	4303      	orrs	r3, r0
 80077e6:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077e8:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077ea:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80077f0:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077f2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077f4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80077f6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 80077fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077fe:	6843      	ldr	r3, [r0, #4]
 8007800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007804:	d0a5      	beq.n	8007752 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007806:	61c6      	str	r6, [r0, #28]
 8007808:	e7a3      	b.n	8007752 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800780a:	d00b      	beq.n	8007824 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800780c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007810:	2500      	movs	r5, #0
 8007812:	62a5      	str	r5, [r4, #40]	; 0x28
 8007814:	e7b8      	b.n	8007788 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8007816:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800781a:	4620      	mov	r0, r4
 800781c:	f7fc fb28 	bl	8003e70 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007820:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007822:	e79e      	b.n	8007762 <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007824:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007826:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800782a:	f405 5500 	and.w	r5, r5, #8192	; 0x2000
 800782e:	e7ab      	b.n	8007788 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8007830:	2001      	movs	r0, #1
}
 8007832:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007834:	2000      	movs	r0, #0
 8007836:	e7eb      	b.n	8007810 <HAL_SPI_Init+0xd4>

08007838 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007838:	6a03      	ldr	r3, [r0, #32]
 800783a:	f023 0301 	bic.w	r3, r3, #1
 800783e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007840:	6a03      	ldr	r3, [r0, #32]
{
 8007842:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007844:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007846:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007848:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800784a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800784e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007852:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007854:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007856:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800785a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800785c:	4d13      	ldr	r5, [pc, #76]	; (80078ac <TIM_OC1_SetConfig+0x74>)
 800785e:	42a8      	cmp	r0, r5
 8007860:	d00f      	beq.n	8007882 <TIM_OC1_SetConfig+0x4a>
 8007862:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007866:	42a8      	cmp	r0, r5
 8007868:	d00b      	beq.n	8007882 <TIM_OC1_SetConfig+0x4a>
 800786a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800786e:	42a8      	cmp	r0, r5
 8007870:	d007      	beq.n	8007882 <TIM_OC1_SetConfig+0x4a>
 8007872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007876:	42a8      	cmp	r0, r5
 8007878:	d003      	beq.n	8007882 <TIM_OC1_SetConfig+0x4a>
 800787a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800787e:	42a8      	cmp	r0, r5
 8007880:	d10d      	bne.n	800789e <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007882:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007884:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007888:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800788a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800788e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8007892:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007896:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800789a:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800789e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80078a0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80078a2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80078a4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80078a6:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80078a8:	6203      	str	r3, [r0, #32]
}
 80078aa:	4770      	bx	lr
 80078ac:	40012c00 	.word	0x40012c00

080078b0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078b0:	6a03      	ldr	r3, [r0, #32]
 80078b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b8:	6a03      	ldr	r3, [r0, #32]
{
 80078ba:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078be:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80078c6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80078ca:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078cc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80078ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078d6:	4d15      	ldr	r5, [pc, #84]	; (800792c <TIM_OC3_SetConfig+0x7c>)
 80078d8:	42a8      	cmp	r0, r5
 80078da:	d010      	beq.n	80078fe <TIM_OC3_SetConfig+0x4e>
 80078dc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80078e0:	42a8      	cmp	r0, r5
 80078e2:	d00c      	beq.n	80078fe <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80078e8:	42a8      	cmp	r0, r5
 80078ea:	d00f      	beq.n	800790c <TIM_OC3_SetConfig+0x5c>
 80078ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80078f0:	42a8      	cmp	r0, r5
 80078f2:	d00b      	beq.n	800790c <TIM_OC3_SetConfig+0x5c>
 80078f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80078f8:	42a8      	cmp	r0, r5
 80078fa:	d10f      	bne.n	800791c <TIM_OC3_SetConfig+0x6c>
 80078fc:	e006      	b.n	800790c <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007900:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007904:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8007908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800790c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007910:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007914:	ea46 0c05 	orr.w	ip, r6, r5
 8007918:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800791c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800791e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007920:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8007922:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8007924:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8007926:	6203      	str	r3, [r0, #32]
}
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	40012c00 	.word	0x40012c00

08007930 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007930:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007934:	2b01      	cmp	r3, #1
 8007936:	d122      	bne.n	800797e <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007938:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793a:	4917      	ldr	r1, [pc, #92]	; (8007998 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 800793c:	2202      	movs	r2, #2
 800793e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007942:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007944:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800794c:	d019      	beq.n	8007982 <HAL_TIM_Base_Start_IT+0x52>
 800794e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007952:	d016      	beq.n	8007982 <HAL_TIM_Base_Start_IT+0x52>
 8007954:	4a11      	ldr	r2, [pc, #68]	; (800799c <HAL_TIM_Base_Start_IT+0x6c>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d013      	beq.n	8007982 <HAL_TIM_Base_Start_IT+0x52>
 800795a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800795e:	4293      	cmp	r3, r2
 8007960:	d00f      	beq.n	8007982 <HAL_TIM_Base_Start_IT+0x52>
 8007962:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007966:	4293      	cmp	r3, r2
 8007968:	d00b      	beq.n	8007982 <HAL_TIM_Base_Start_IT+0x52>
 800796a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800796e:	4293      	cmp	r3, r2
 8007970:	d007      	beq.n	8007982 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8007978:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800797a:	601a      	str	r2, [r3, #0]
 800797c:	4770      	bx	lr
    return HAL_ERROR;
 800797e:	2001      	movs	r0, #1
 8007980:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007982:	6899      	ldr	r1, [r3, #8]
 8007984:	4a06      	ldr	r2, [pc, #24]	; (80079a0 <HAL_TIM_Base_Start_IT+0x70>)
 8007986:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007988:	2a06      	cmp	r2, #6
 800798a:	d002      	beq.n	8007992 <HAL_TIM_Base_Start_IT+0x62>
 800798c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007990:	d1ef      	bne.n	8007972 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8007992:	2000      	movs	r0, #0
}
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40000400 	.word	0x40000400
 80079a0:	00010007 	.word	0x00010007

080079a4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80079a4:	6803      	ldr	r3, [r0, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	f022 0201 	bic.w	r2, r2, #1
 80079ac:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80079ae:	6a1a      	ldr	r2, [r3, #32]
 80079b0:	f241 1111 	movw	r1, #4369	; 0x1111
 80079b4:	420a      	tst	r2, r1
 80079b6:	d108      	bne.n	80079ca <HAL_TIM_Base_Stop_IT+0x26>
 80079b8:	6a19      	ldr	r1, [r3, #32]
 80079ba:	f240 4244 	movw	r2, #1092	; 0x444
 80079be:	4211      	tst	r1, r2
 80079c0:	d103      	bne.n	80079ca <HAL_TIM_Base_Stop_IT+0x26>
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	f022 0201 	bic.w	r2, r2, #1
 80079c8:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80079ca:	2301      	movs	r3, #1
 80079cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80079d0:	2000      	movs	r0, #0
 80079d2:	4770      	bx	lr

080079d4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f000 8081 	beq.w	8007adc <HAL_TIM_PWM_Init+0x108>
{
 80079da:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80079dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80079e0:	4604      	mov	r4, r0
 80079e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d06d      	beq.n	8007ac6 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ea:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079ec:	493c      	ldr	r1, [pc, #240]	; (8007ae0 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80079ee:	2302      	movs	r3, #2
 80079f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079f4:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80079f6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079f8:	d051      	beq.n	8007a9e <HAL_TIM_PWM_Init+0xca>
 80079fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80079fe:	d021      	beq.n	8007a44 <HAL_TIM_PWM_Init+0x70>
 8007a00:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8007a04:	428a      	cmp	r2, r1
 8007a06:	d01d      	beq.n	8007a44 <HAL_TIM_PWM_Init+0x70>
 8007a08:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a0c:	428a      	cmp	r2, r1
 8007a0e:	d019      	beq.n	8007a44 <HAL_TIM_PWM_Init+0x70>
 8007a10:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8007a14:	428a      	cmp	r2, r1
 8007a16:	d042      	beq.n	8007a9e <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a18:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8007a1c:	428a      	cmp	r2, r1
 8007a1e:	d057      	beq.n	8007ad0 <HAL_TIM_PWM_Init+0xfc>
 8007a20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a24:	428a      	cmp	r2, r1
 8007a26:	d053      	beq.n	8007ad0 <HAL_TIM_PWM_Init+0xfc>
 8007a28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a2c:	428a      	cmp	r2, r1
 8007a2e:	d04f      	beq.n	8007ad0 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a30:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a32:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a38:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8007a3a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8007a3c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a3e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007a40:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a42:	e010      	b.n	8007a66 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8007a44:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a46:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007a4c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a52:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a54:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a5a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a5c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8007a5e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007a60:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a62:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007a64:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8007a66:	2301      	movs	r3, #1
 8007a68:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a6a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007a72:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007a76:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007a7a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007a7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007a8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a8e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007a92:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007a96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007a9a:	2000      	movs	r0, #0
}
 8007a9c:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8007a9e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aa0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007aa6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aac:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007aae:	69a1      	ldr	r1, [r4, #24]
 8007ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ab4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8007ab6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ab8:	68e3      	ldr	r3, [r4, #12]
 8007aba:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007abc:	6863      	ldr	r3, [r4, #4]
 8007abe:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8007ac0:	6963      	ldr	r3, [r4, #20]
 8007ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ac4:	e7cf      	b.n	8007a66 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8007ac6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007aca:	f7fc fc67 	bl	800439c <HAL_TIM_PWM_MspInit>
 8007ace:	e78c      	b.n	80079ea <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ad2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ad8:	4303      	orrs	r3, r0
 8007ada:	e7e9      	b.n	8007ab0 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8007adc:	2001      	movs	r0, #1
}
 8007ade:	4770      	bx	lr
 8007ae0:	40012c00 	.word	0x40012c00

08007ae4 <HAL_TIM_PWM_Start>:
 8007ae4:	2910      	cmp	r1, #16
 8007ae6:	d80a      	bhi.n	8007afe <HAL_TIM_PWM_Start+0x1a>
 8007ae8:	e8df f001 	tbb	[pc, r1]
 8007aec:	09090955 	.word	0x09090955
 8007af0:	0909095b 	.word	0x0909095b
 8007af4:	09090963 	.word	0x09090963
 8007af8:	09090968 	.word	0x09090968
 8007afc:	71          	.byte	0x71
 8007afd:	00          	.byte	0x00
 8007afe:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d14b      	bne.n	8007b9e <HAL_TIM_PWM_Start+0xba>
 8007b06:	2910      	cmp	r1, #16
 8007b08:	d80a      	bhi.n	8007b20 <HAL_TIM_PWM_Start+0x3c>
 8007b0a:	e8df f001 	tbb	[pc, r1]
 8007b0e:	0987      	.short	0x0987
 8007b10:	094e0909 	.word	0x094e0909
 8007b14:	09700909 	.word	0x09700909
 8007b18:	096c0909 	.word	0x096c0909
 8007b1c:	0909      	.short	0x0909
 8007b1e:	68          	.byte	0x68
 8007b1f:	00          	.byte	0x00
 8007b20:	2302      	movs	r3, #2
 8007b22:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007b26:	6803      	ldr	r3, [r0, #0]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	6a18      	ldr	r0, [r3, #32]
 8007b2c:	f001 011f 	and.w	r1, r1, #31
 8007b30:	fa02 f101 	lsl.w	r1, r2, r1
 8007b34:	ea20 0001 	bic.w	r0, r0, r1
 8007b38:	6218      	str	r0, [r3, #32]
 8007b3a:	6a18      	ldr	r0, [r3, #32]
 8007b3c:	4a39      	ldr	r2, [pc, #228]	; (8007c24 <HAL_TIM_PWM_Start+0x140>)
 8007b3e:	4301      	orrs	r1, r0
 8007b40:	4293      	cmp	r3, r2
 8007b42:	6219      	str	r1, [r3, #32]
 8007b44:	d057      	beq.n	8007bf6 <HAL_TIM_PWM_Start+0x112>
 8007b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d061      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x12e>
 8007b4e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d05d      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x12e>
 8007b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d059      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x12e>
 8007b5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d055      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x12e>
 8007b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6a:	d048      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x11a>
 8007b6c:	4a2e      	ldr	r2, [pc, #184]	; (8007c28 <HAL_TIM_PWM_Start+0x144>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d045      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x11a>
 8007b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d041      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x11a>
 8007b7a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d03d      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x11a>
 8007b82:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d039      	beq.n	8007bfe <HAL_TIM_PWM_Start+0x11a>
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	f042 0201 	orr.w	r2, r2, #1
 8007b90:	2000      	movs	r0, #0
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	4770      	bx	lr
 8007b96:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d03e      	beq.n	8007c1c <HAL_TIM_PWM_Start+0x138>
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	4770      	bx	lr
 8007ba2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d1f9      	bne.n	8007b9e <HAL_TIM_PWM_Start+0xba>
 8007baa:	2302      	movs	r3, #2
 8007bac:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007bb0:	e7b9      	b.n	8007b26 <HAL_TIM_PWM_Start+0x42>
 8007bb2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d0a5      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x22>
 8007bba:	e7f0      	b.n	8007b9e <HAL_TIM_PWM_Start+0xba>
 8007bbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	bf18      	it	ne
 8007bc4:	2301      	movne	r3, #1
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d09d      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x22>
 8007bca:	2001      	movs	r0, #1
 8007bcc:	4770      	bx	lr
 8007bce:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	bf18      	it	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d094      	beq.n	8007b06 <HAL_TIM_PWM_Start+0x22>
 8007bdc:	e7f5      	b.n	8007bca <HAL_TIM_PWM_Start+0xe6>
 8007bde:	2302      	movs	r3, #2
 8007be0:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8007be4:	e79f      	b.n	8007b26 <HAL_TIM_PWM_Start+0x42>
 8007be6:	2302      	movs	r3, #2
 8007be8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007bec:	e79b      	b.n	8007b26 <HAL_TIM_PWM_Start+0x42>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8007bf4:	e797      	b.n	8007b26 <HAL_TIM_PWM_Start+0x42>
 8007bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bfc:	645a      	str	r2, [r3, #68]	; 0x44
 8007bfe:	6899      	ldr	r1, [r3, #8]
 8007c00:	4a0a      	ldr	r2, [pc, #40]	; (8007c2c <HAL_TIM_PWM_Start+0x148>)
 8007c02:	400a      	ands	r2, r1
 8007c04:	2a06      	cmp	r2, #6
 8007c06:	d002      	beq.n	8007c0e <HAL_TIM_PWM_Start+0x12a>
 8007c08:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007c0c:	d1bd      	bne.n	8007b8a <HAL_TIM_PWM_Start+0xa6>
 8007c0e:	2000      	movs	r0, #0
 8007c10:	4770      	bx	lr
 8007c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c18:	645a      	str	r2, [r3, #68]	; 0x44
 8007c1a:	e7a4      	b.n	8007b66 <HAL_TIM_PWM_Start+0x82>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8007c22:	e780      	b.n	8007b26 <HAL_TIM_PWM_Start+0x42>
 8007c24:	40012c00 	.word	0x40012c00
 8007c28:	40000400 	.word	0x40000400
 8007c2c:	00010007 	.word	0x00010007

08007c30 <HAL_TIM_PWM_Stop>:
 8007c30:	6803      	ldr	r3, [r0, #0]
 8007c32:	b410      	push	{r4}
 8007c34:	6a1a      	ldr	r2, [r3, #32]
 8007c36:	f001 041f 	and.w	r4, r1, #31
 8007c3a:	f04f 0c01 	mov.w	ip, #1
 8007c3e:	fa0c fc04 	lsl.w	ip, ip, r4
 8007c42:	ea22 020c 	bic.w	r2, r2, ip
 8007c46:	621a      	str	r2, [r3, #32]
 8007c48:	4a35      	ldr	r2, [pc, #212]	; (8007d20 <HAL_TIM_PWM_Stop+0xf0>)
 8007c4a:	6a1c      	ldr	r4, [r3, #32]
 8007c4c:	621c      	str	r4, [r3, #32]
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d021      	beq.n	8007c96 <HAL_TIM_PWM_Stop+0x66>
 8007c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d01d      	beq.n	8007c96 <HAL_TIM_PWM_Stop+0x66>
 8007c5a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d019      	beq.n	8007c96 <HAL_TIM_PWM_Stop+0x66>
 8007c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d015      	beq.n	8007c96 <HAL_TIM_PWM_Stop+0x66>
 8007c6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d011      	beq.n	8007c96 <HAL_TIM_PWM_Stop+0x66>
 8007c72:	6a1c      	ldr	r4, [r3, #32]
 8007c74:	f241 1211 	movw	r2, #4369	; 0x1111
 8007c78:	4214      	tst	r4, r2
 8007c7a:	d104      	bne.n	8007c86 <HAL_TIM_PWM_Stop+0x56>
 8007c7c:	6a1c      	ldr	r4, [r3, #32]
 8007c7e:	f240 4244 	movw	r2, #1092	; 0x444
 8007c82:	4214      	tst	r4, r2
 8007c84:	d016      	beq.n	8007cb4 <HAL_TIM_PWM_Stop+0x84>
 8007c86:	b9d9      	cbnz	r1, 8007cc0 <HAL_TIM_PWM_Stop+0x90>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8007c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c92:	2000      	movs	r0, #0
 8007c94:	4770      	bx	lr
 8007c96:	6a1c      	ldr	r4, [r3, #32]
 8007c98:	f241 1211 	movw	r2, #4369	; 0x1111
 8007c9c:	4214      	tst	r4, r2
 8007c9e:	d1e8      	bne.n	8007c72 <HAL_TIM_PWM_Stop+0x42>
 8007ca0:	6a1c      	ldr	r4, [r3, #32]
 8007ca2:	f240 4244 	movw	r2, #1092	; 0x444
 8007ca6:	4214      	tst	r4, r2
 8007ca8:	d1e3      	bne.n	8007c72 <HAL_TIM_PWM_Stop+0x42>
 8007caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007cb0:	645a      	str	r2, [r3, #68]	; 0x44
 8007cb2:	e7de      	b.n	8007c72 <HAL_TIM_PWM_Stop+0x42>
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	f022 0201 	bic.w	r2, r2, #1
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	d0e3      	beq.n	8007c88 <HAL_TIM_PWM_Stop+0x58>
 8007cc0:	3904      	subs	r1, #4
 8007cc2:	290c      	cmp	r1, #12
 8007cc4:	d808      	bhi.n	8007cd8 <HAL_TIM_PWM_Stop+0xa8>
 8007cc6:	e8df f001 	tbb	[pc, r1]
 8007cca:	0723      	.short	0x0723
 8007ccc:	071c0707 	.word	0x071c0707
 8007cd0:	07150707 	.word	0x07150707
 8007cd4:	0707      	.short	0x0707
 8007cd6:	0e          	.byte	0x0e
 8007cd7:	00          	.byte	0x00
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8007cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ce2:	2000      	movs	r0, #0
 8007ce4:	4770      	bx	lr
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8007cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	4770      	bx	lr
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8007cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cfe:	2000      	movs	r0, #0
 8007d00:	4770      	bx	lr
 8007d02:	2301      	movs	r3, #1
 8007d04:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8007d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	4770      	bx	lr
 8007d10:	2301      	movs	r3, #1
 8007d12:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8007d16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	40012c00 	.word	0x40012c00

08007d24 <HAL_TIM_OC_DelayElapsedCallback>:
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop

08007d28 <HAL_TIM_IC_CaptureCallback>:
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop

08007d2c <HAL_TIM_PWM_PulseFinishedCallback>:
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop

08007d30 <HAL_TIM_TriggerCallback>:
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop

08007d34 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d34:	6803      	ldr	r3, [r0, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	0791      	lsls	r1, r2, #30
{
 8007d3a:	b510      	push	{r4, lr}
 8007d3c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d3e:	d502      	bpl.n	8007d46 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	0792      	lsls	r2, r2, #30
 8007d44:	d468      	bmi.n	8007e18 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	0752      	lsls	r2, r2, #29
 8007d4a:	d502      	bpl.n	8007d52 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	0750      	lsls	r0, r2, #29
 8007d50:	d44f      	bmi.n	8007df2 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d52:	691a      	ldr	r2, [r3, #16]
 8007d54:	0711      	lsls	r1, r2, #28
 8007d56:	d502      	bpl.n	8007d5e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	0712      	lsls	r2, r2, #28
 8007d5c:	d437      	bmi.n	8007dce <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d5e:	691a      	ldr	r2, [r3, #16]
 8007d60:	06d0      	lsls	r0, r2, #27
 8007d62:	d502      	bpl.n	8007d6a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	06d1      	lsls	r1, r2, #27
 8007d68:	d41e      	bmi.n	8007da8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	07d2      	lsls	r2, r2, #31
 8007d6e:	d502      	bpl.n	8007d76 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	07d0      	lsls	r0, r2, #31
 8007d74:	d469      	bmi.n	8007e4a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d76:	691a      	ldr	r2, [r3, #16]
 8007d78:	0611      	lsls	r1, r2, #24
 8007d7a:	d502      	bpl.n	8007d82 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d7c:	68da      	ldr	r2, [r3, #12]
 8007d7e:	0612      	lsls	r2, r2, #24
 8007d80:	d46b      	bmi.n	8007e5a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d82:	691a      	ldr	r2, [r3, #16]
 8007d84:	05d0      	lsls	r0, r2, #23
 8007d86:	d502      	bpl.n	8007d8e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	0611      	lsls	r1, r2, #24
 8007d8c:	d46d      	bmi.n	8007e6a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	0652      	lsls	r2, r2, #25
 8007d92:	d502      	bpl.n	8007d9a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	0650      	lsls	r0, r2, #25
 8007d98:	d46f      	bmi.n	8007e7a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d9a:	691a      	ldr	r2, [r3, #16]
 8007d9c:	0691      	lsls	r1, r2, #26
 8007d9e:	d502      	bpl.n	8007da6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	0692      	lsls	r2, r2, #26
 8007da4:	d449      	bmi.n	8007e3a <HAL_TIM_IRQHandler+0x106>
}
 8007da6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007da8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dac:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dae:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007db0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007db8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dba:	d16f      	bne.n	8007e9c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbc:	f7ff ffb2 	bl	8007d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f7ff ffb3 	bl	8007d2c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007dc8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dca:	7722      	strb	r2, [r4, #28]
 8007dcc:	e7cd      	b.n	8007d6a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dce:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dd2:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dd4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dd6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dd8:	69db      	ldr	r3, [r3, #28]
 8007dda:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8007ddc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dde:	d15a      	bne.n	8007e96 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de0:	f7ff ffa0 	bl	8007d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de4:	4620      	mov	r0, r4
 8007de6:	f7ff ffa1 	bl	8007d2c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dea:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dec:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dee:	7722      	strb	r2, [r4, #28]
 8007df0:	e7b5      	b.n	8007d5e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007df2:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007df6:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007df8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dfa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007e02:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e04:	d144      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e06:	f7ff ff8d 	bl	8007d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f7ff ff8e 	bl	8007d2c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e10:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e12:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e14:	7722      	strb	r2, [r4, #28]
 8007e16:	e79c      	b.n	8007d52 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e18:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e1c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e1e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e20:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	0799      	lsls	r1, r3, #30
 8007e26:	d130      	bne.n	8007e8a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e28:	f7ff ff7c 	bl	8007d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7ff ff7d 	bl	8007d2c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e32:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e34:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e36:	7722      	strb	r2, [r4, #28]
 8007e38:	e785      	b.n	8007d46 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e3a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007e3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e40:	611a      	str	r2, [r3, #16]
}
 8007e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007e46:	f000 baeb 	b.w	8008420 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e4a:	f06f 0201 	mvn.w	r2, #1
 8007e4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e50:	4620      	mov	r0, r4
 8007e52:	f7f9 fe5d 	bl	8001b10 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e56:	6823      	ldr	r3, [r4, #0]
 8007e58:	e78d      	b.n	8007d76 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e5e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fadf 	bl	8008424 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	e78b      	b.n	8007d82 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 fad9 	bl	8008428 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	e789      	b.n	8007d8e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e7e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007e80:	4620      	mov	r0, r4
 8007e82:	f7ff ff55 	bl	8007d30 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	e787      	b.n	8007d9a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8007e8a:	f7ff ff4d 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 8007e8e:	e7d0      	b.n	8007e32 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e90:	f7ff ff4a 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 8007e94:	e7bc      	b.n	8007e10 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e96:	f7ff ff47 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 8007e9a:	e7a6      	b.n	8007dea <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007e9c:	f7ff ff44 	bl	8007d28 <HAL_TIM_IC_CaptureCallback>
 8007ea0:	e791      	b.n	8007dc6 <HAL_TIM_IRQHandler+0x92>
 8007ea2:	bf00      	nop

08007ea4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ea4:	6a03      	ldr	r3, [r0, #32]
 8007ea6:	f023 0310 	bic.w	r3, r3, #16
 8007eaa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007eac:	6a03      	ldr	r3, [r0, #32]
{
 8007eae:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8007eb0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007eb2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007eb6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007eba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ebe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ec2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007ec4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ec8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ecc:	4d14      	ldr	r5, [pc, #80]	; (8007f20 <TIM_OC2_SetConfig+0x7c>)
 8007ece:	42a8      	cmp	r0, r5
 8007ed0:	d010      	beq.n	8007ef4 <TIM_OC2_SetConfig+0x50>
 8007ed2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007ed6:	42a8      	cmp	r0, r5
 8007ed8:	d00c      	beq.n	8007ef4 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eda:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8007ede:	42a8      	cmp	r0, r5
 8007ee0:	d00f      	beq.n	8007f02 <TIM_OC2_SetConfig+0x5e>
 8007ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007ee6:	42a8      	cmp	r0, r5
 8007ee8:	d00b      	beq.n	8007f02 <TIM_OC2_SetConfig+0x5e>
 8007eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007eee:	42a8      	cmp	r0, r5
 8007ef0:	d10f      	bne.n	8007f12 <TIM_OC2_SetConfig+0x6e>
 8007ef2:	e006      	b.n	8007f02 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ef4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007efa:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f02:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f06:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f0a:	ea46 0c05 	orr.w	ip, r6, r5
 8007f0e:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8007f12:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8007f14:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007f16:	6182      	str	r2, [r0, #24]
}
 8007f18:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8007f1a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007f1c:	6203      	str	r3, [r0, #32]
}
 8007f1e:	4770      	bx	lr
 8007f20:	40012c00 	.word	0x40012c00

08007f24 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8007f24:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	f000 812f 	beq.w	800818c <HAL_TIM_PWM_ConfigChannel+0x268>
 8007f2e:	2301      	movs	r3, #1
{
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8007f36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007f3a:	2a14      	cmp	r2, #20
 8007f3c:	d816      	bhi.n	8007f6c <HAL_TIM_PWM_ConfigChannel+0x48>
 8007f3e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007f42:	005f      	.short	0x005f
 8007f44:	00150015 	.word	0x00150015
 8007f48:	00740015 	.word	0x00740015
 8007f4c:	00150015 	.word	0x00150015
 8007f50:	008a0015 	.word	0x008a0015
 8007f54:	00150015 	.word	0x00150015
 8007f58:	009f0015 	.word	0x009f0015
 8007f5c:	00150015 	.word	0x00150015
 8007f60:	00e30015 	.word	0x00e30015
 8007f64:	00150015 	.word	0x00150015
 8007f68:	001b0015 	.word	0x001b0015
  __HAL_UNLOCK(htim);
 8007f6c:	2200      	movs	r2, #0
  switch (Channel)
 8007f6e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8007f70:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007f78:	6802      	ldr	r2, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f7a:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f7c:	6a13      	ldr	r3, [r2, #32]
 8007f7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f82:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8007f84:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8007f86:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8007f88:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f8a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007f8e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f92:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f96:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f9c:	ea43 5306 	orr.w	r3, r3, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa0:	4e7c      	ldr	r6, [pc, #496]	; (8008194 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007fa2:	42b2      	cmp	r2, r6
 8007fa4:	d00f      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8007fa6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007faa:	42b2      	cmp	r2, r6
 8007fac:	d00b      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8007fae:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8007fb2:	42b2      	cmp	r2, r6
 8007fb4:	d007      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8007fb6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007fba:	42b2      	cmp	r2, r6
 8007fbc:	d003      	beq.n	8007fc6 <HAL_TIM_PWM_ConfigChannel+0xa2>
 8007fbe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8007fc2:	42b2      	cmp	r2, r6
 8007fc4:	d104      	bne.n	8007fd0 <HAL_TIM_PWM_ConfigChannel+0xac>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fc6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007fc8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fcc:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd0:	6050      	str	r0, [r2, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fd2:	6551      	str	r1, [r2, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fd4:	6869      	ldr	r1, [r5, #4]
 8007fd6:	65d1      	str	r1, [r2, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fd8:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fda:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fdc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007fe2:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007fe4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007fe6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007fea:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007fec:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8007fee:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8007ff2:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8007ff4:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007ff6:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8007ff8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008000:	6800      	ldr	r0, [r0, #0]
 8008002:	f7ff fc19 	bl	8007838 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008006:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008008:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800800a:	f043 0308 	orr.w	r3, r3, #8
 800800e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008010:	6982      	ldr	r2, [r0, #24]
 8008012:	f022 0204 	bic.w	r2, r2, #4
 8008016:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008018:	6982      	ldr	r2, [r0, #24]
 800801a:	430a      	orrs	r2, r1
 800801c:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 800801e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008020:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008022:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008026:	4618      	mov	r0, r3
 8008028:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	f7ff ff3a 	bl	8007ea4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008030:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008032:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008034:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008038:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800803a:	6982      	ldr	r2, [r0, #24]
 800803c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008040:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008042:	6982      	ldr	r2, [r0, #24]
 8008044:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008048:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 800804a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800804c:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800804e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008052:	4618      	mov	r0, r3
 8008054:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008056:	6800      	ldr	r0, [r0, #0]
 8008058:	f7ff fc2a 	bl	80078b0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800805c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800805e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008060:	f043 0308 	orr.w	r3, r3, #8
 8008064:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008066:	69c2      	ldr	r2, [r0, #28]
 8008068:	f022 0204 	bic.w	r2, r2, #4
 800806c:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800806e:	69c2      	ldr	r2, [r0, #28]
 8008070:	430a      	orrs	r2, r1
 8008072:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 8008074:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008076:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008078:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800807c:	4618      	mov	r0, r3
 800807e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008080:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008082:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008084:	6a13      	ldr	r3, [r2, #32]
 8008086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800808a:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 800808c:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800808e:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8008090:	69d1      	ldr	r1, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008092:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008096:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800809a:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800809e:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80080a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080a4:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a8:	4e3a      	ldr	r6, [pc, #232]	; (8008194 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80080aa:	42b2      	cmp	r2, r6
 80080ac:	d00f      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80080ae:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80080b2:	42b2      	cmp	r2, r6
 80080b4:	d00b      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80080b6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80080ba:	42b2      	cmp	r2, r6
 80080bc:	d007      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80080be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80080c2:	42b2      	cmp	r2, r6
 80080c4:	d003      	beq.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x1aa>
 80080c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80080ca:	42b2      	cmp	r2, r6
 80080cc:	d104      	bne.n	80080d8 <HAL_TIM_PWM_ConfigChannel+0x1b4>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080ce:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080d0:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080d4:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 80080d8:	6050      	str	r0, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80080da:	61d1      	str	r1, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80080dc:	6869      	ldr	r1, [r5, #4]
 80080de:	6411      	str	r1, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80080e0:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080e2:	69d3      	ldr	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080e4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80080ea:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080ec:	69d1      	ldr	r1, [r2, #28]
 80080ee:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80080f2:	61d1      	str	r1, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080f4:	69d1      	ldr	r1, [r2, #28]
 80080f6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80080fa:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80080fc:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80080fe:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008100:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008104:	4618      	mov	r0, r3
 8008106:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008108:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800810a:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800810c:	6a13      	ldr	r3, [r2, #32]
 800810e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008112:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8008114:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8008116:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8008118:	6d51      	ldr	r1, [r2, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800811a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800811e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008122:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008124:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008126:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800812a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800812e:	4e19      	ldr	r6, [pc, #100]	; (8008194 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8008130:	42b2      	cmp	r2, r6
 8008132:	d00f      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x230>
 8008134:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8008138:	42b2      	cmp	r2, r6
 800813a:	d00b      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x230>
 800813c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8008140:	42b2      	cmp	r2, r6
 8008142:	d007      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x230>
 8008144:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008148:	42b2      	cmp	r2, r6
 800814a:	d003      	beq.n	8008154 <HAL_TIM_PWM_ConfigChannel+0x230>
 800814c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008150:	42b2      	cmp	r2, r6
 8008152:	d104      	bne.n	800815e <HAL_TIM_PWM_ConfigChannel+0x23a>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008154:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008156:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800815a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 800815e:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008160:	6551      	str	r1, [r2, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8008162:	6869      	ldr	r1, [r5, #4]
 8008164:	6591      	str	r1, [r2, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8008166:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008168:	6d53      	ldr	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800816a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800816c:	f043 0308 	orr.w	r3, r3, #8
 8008170:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008172:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8008174:	f021 0104 	bic.w	r1, r1, #4
 8008178:	6551      	str	r1, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800817a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800817c:	4301      	orrs	r1, r0
 800817e:	6551      	str	r1, [r2, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8008180:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008182:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8008184:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8008188:	4618      	mov	r0, r3
 800818a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800818c:	2302      	movs	r3, #2
}
 800818e:	4618      	mov	r0, r3
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40012c00 	.word	0x40012c00

08008198 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008198:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800819a:	f001 011f 	and.w	r1, r1, #31
 800819e:	f04f 0c01 	mov.w	ip, #1
 80081a2:	fa0c fc01 	lsl.w	ip, ip, r1
  TIMx->CCER &= ~tmp;
 80081a6:	ea23 030c 	bic.w	r3, r3, ip
 80081aa:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081ac:	6a03      	ldr	r3, [r0, #32]
 80081ae:	408a      	lsls	r2, r1
 80081b0:	431a      	orrs	r2, r3
 80081b2:	6202      	str	r2, [r0, #32]
}
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop

080081b8 <HAL_TIMEx_PWMN_Start>:
 80081b8:	2900      	cmp	r1, #0
 80081ba:	d139      	bne.n	8008230 <HAL_TIMEx_PWMN_Start+0x78>
 80081bc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d141      	bne.n	8008248 <HAL_TIMEx_PWMN_Start+0x90>
 80081c4:	2302      	movs	r3, #2
 80081c6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80081ca:	6803      	ldr	r3, [r0, #0]
 80081cc:	f001 011f 	and.w	r1, r1, #31
 80081d0:	6a18      	ldr	r0, [r3, #32]
 80081d2:	2204      	movs	r2, #4
 80081d4:	408a      	lsls	r2, r1
 80081d6:	ea20 0002 	bic.w	r0, r0, r2
 80081da:	6218      	str	r0, [r3, #32]
 80081dc:	6a18      	ldr	r0, [r3, #32]
 80081de:	4924      	ldr	r1, [pc, #144]	; (8008270 <HAL_TIMEx_PWMN_Start+0xb8>)
 80081e0:	4302      	orrs	r2, r0
 80081e2:	621a      	str	r2, [r3, #32]
 80081e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081e6:	428b      	cmp	r3, r1
 80081e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081ec:	645a      	str	r2, [r3, #68]	; 0x44
 80081ee:	d011      	beq.n	8008214 <HAL_TIMEx_PWMN_Start+0x5c>
 80081f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f4:	d00e      	beq.n	8008214 <HAL_TIMEx_PWMN_Start+0x5c>
 80081f6:	4a1f      	ldr	r2, [pc, #124]	; (8008274 <HAL_TIMEx_PWMN_Start+0xbc>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d00b      	beq.n	8008214 <HAL_TIMEx_PWMN_Start+0x5c>
 80081fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008200:	4293      	cmp	r3, r2
 8008202:	d007      	beq.n	8008214 <HAL_TIMEx_PWMN_Start+0x5c>
 8008204:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8008208:	4293      	cmp	r3, r2
 800820a:	d003      	beq.n	8008214 <HAL_TIMEx_PWMN_Start+0x5c>
 800820c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8008210:	4293      	cmp	r3, r2
 8008212:	d107      	bne.n	8008224 <HAL_TIMEx_PWMN_Start+0x6c>
 8008214:	6899      	ldr	r1, [r3, #8]
 8008216:	4a18      	ldr	r2, [pc, #96]	; (8008278 <HAL_TIMEx_PWMN_Start+0xc0>)
 8008218:	400a      	ands	r2, r1
 800821a:	2a06      	cmp	r2, #6
 800821c:	d016      	beq.n	800824c <HAL_TIMEx_PWMN_Start+0x94>
 800821e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008222:	d013      	beq.n	800824c <HAL_TIMEx_PWMN_Start+0x94>
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	f042 0201 	orr.w	r2, r2, #1
 800822a:	2000      	movs	r0, #0
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	4770      	bx	lr
 8008230:	2904      	cmp	r1, #4
 8008232:	d00d      	beq.n	8008250 <HAL_TIMEx_PWMN_Start+0x98>
 8008234:	2908      	cmp	r1, #8
 8008236:	d013      	beq.n	8008260 <HAL_TIMEx_PWMN_Start+0xa8>
 8008238:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 800823c:	2b01      	cmp	r3, #1
 800823e:	d103      	bne.n	8008248 <HAL_TIMEx_PWMN_Start+0x90>
 8008240:	2302      	movs	r3, #2
 8008242:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 8008246:	e7c0      	b.n	80081ca <HAL_TIMEx_PWMN_Start+0x12>
 8008248:	2001      	movs	r0, #1
 800824a:	4770      	bx	lr
 800824c:	2000      	movs	r0, #0
 800824e:	4770      	bx	lr
 8008250:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008254:	2b01      	cmp	r3, #1
 8008256:	d1f7      	bne.n	8008248 <HAL_TIMEx_PWMN_Start+0x90>
 8008258:	2302      	movs	r3, #2
 800825a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800825e:	e7b4      	b.n	80081ca <HAL_TIMEx_PWMN_Start+0x12>
 8008260:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8008264:	2b01      	cmp	r3, #1
 8008266:	d1ef      	bne.n	8008248 <HAL_TIMEx_PWMN_Start+0x90>
 8008268:	2302      	movs	r3, #2
 800826a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 800826e:	e7ac      	b.n	80081ca <HAL_TIMEx_PWMN_Start+0x12>
 8008270:	40012c00 	.word	0x40012c00
 8008274:	40000400 	.word	0x40000400
 8008278:	00010007 	.word	0x00010007

0800827c <HAL_TIMEx_PWMN_Stop>:
 800827c:	6803      	ldr	r3, [r0, #0]
 800827e:	b410      	push	{r4}
 8008280:	6a1a      	ldr	r2, [r3, #32]
 8008282:	f001 041f 	and.w	r4, r1, #31
 8008286:	f04f 0c04 	mov.w	ip, #4
 800828a:	fa0c fc04 	lsl.w	ip, ip, r4
 800828e:	ea22 020c 	bic.w	r2, r2, ip
 8008292:	621a      	str	r2, [r3, #32]
 8008294:	6a1a      	ldr	r2, [r3, #32]
 8008296:	621a      	str	r2, [r3, #32]
 8008298:	6a1c      	ldr	r4, [r3, #32]
 800829a:	f241 1211 	movw	r2, #4369	; 0x1111
 800829e:	4214      	tst	r4, r2
 80082a0:	d104      	bne.n	80082ac <HAL_TIMEx_PWMN_Stop+0x30>
 80082a2:	6a1c      	ldr	r4, [r3, #32]
 80082a4:	f240 4244 	movw	r2, #1092	; 0x444
 80082a8:	4214      	tst	r4, r2
 80082aa:	d022      	beq.n	80082f2 <HAL_TIMEx_PWMN_Stop+0x76>
 80082ac:	6a1c      	ldr	r4, [r3, #32]
 80082ae:	f241 1211 	movw	r2, #4369	; 0x1111
 80082b2:	4214      	tst	r4, r2
 80082b4:	d104      	bne.n	80082c0 <HAL_TIMEx_PWMN_Stop+0x44>
 80082b6:	6a1c      	ldr	r4, [r3, #32]
 80082b8:	f240 4244 	movw	r2, #1092	; 0x444
 80082bc:	4214      	tst	r4, r2
 80082be:	d013      	beq.n	80082e8 <HAL_TIMEx_PWMN_Stop+0x6c>
 80082c0:	2301      	movs	r3, #1
 80082c2:	b929      	cbnz	r1, 80082d0 <HAL_TIMEx_PWMN_Stop+0x54>
 80082c4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80082c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082cc:	2000      	movs	r0, #0
 80082ce:	4770      	bx	lr
 80082d0:	2904      	cmp	r1, #4
 80082d2:	d013      	beq.n	80082fc <HAL_TIMEx_PWMN_Stop+0x80>
 80082d4:	2908      	cmp	r1, #8
 80082d6:	bf0c      	ite	eq
 80082d8:	f880 3046 	strbeq.w	r3, [r0, #70]	; 0x46
 80082dc:	f880 3047 	strbne.w	r3, [r0, #71]	; 0x47
 80082e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082e4:	2000      	movs	r0, #0
 80082e6:	4770      	bx	lr
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	f022 0201 	bic.w	r2, r2, #1
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e7e6      	b.n	80082c0 <HAL_TIMEx_PWMN_Stop+0x44>
 80082f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082f8:	645a      	str	r2, [r3, #68]	; 0x44
 80082fa:	e7d7      	b.n	80082ac <HAL_TIMEx_PWMN_Stop+0x30>
 80082fc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8008300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008304:	2000      	movs	r0, #0
 8008306:	4770      	bx	lr

08008308 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008308:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800830c:	2b01      	cmp	r3, #1
 800830e:	d03a      	beq.n	8008386 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 8008310:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008312:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008314:	4d1d      	ldr	r5, [pc, #116]	; (800838c <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 8008316:	2302      	movs	r3, #2
 8008318:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800831c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800831e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8008320:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008322:	d026      	beq.n	8008372 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008324:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008328:	42aa      	cmp	r2, r5
 800832a:	d022      	beq.n	8008372 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800832c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800832e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008332:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008334:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008338:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833a:	d00c      	beq.n	8008356 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800833c:	4b14      	ldr	r3, [pc, #80]	; (8008390 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800833e:	429a      	cmp	r2, r3
 8008340:	d009      	beq.n	8008356 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8008342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008346:	429a      	cmp	r2, r3
 8008348:	d005      	beq.n	8008356 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800834a:	42aa      	cmp	r2, r5
 800834c:	d003      	beq.n	8008356 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800834e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8008352:	429a      	cmp	r2, r3
 8008354:	d104      	bne.n	8008360 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008356:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008358:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800835c:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800835e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008360:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008362:	2201      	movs	r2, #1
 8008364:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008368:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800836c:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800836e:	4618      	mov	r0, r3
}
 8008370:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008372:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008374:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008378:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800837a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800837c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008380:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008382:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008384:	e7e7      	b.n	8008356 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8008386:	2002      	movs	r0, #2
}
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40012c00 	.word	0x40012c00
 8008390:	40000400 	.word	0x40000400

08008394 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008394:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008398:	2b01      	cmp	r3, #1
 800839a:	d03d      	beq.n	8008418 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 800839c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800839e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80083a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a6:	4602      	mov	r2, r0
 80083a8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083aa:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083ac:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083b2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083b8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083ba:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083c0:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083c8:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083ca:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80083d0:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80083d4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80083d8:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80083da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80083de:	4c0f      	ldr	r4, [pc, #60]	; (800841c <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d00b      	beq.n	80083fc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80083e4:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80083e8:	42a0      	cmp	r0, r4
 80083ea:	d007      	beq.n	80083fc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80083ec:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80083ee:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80083f0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80083f4:	4608      	mov	r0, r1
}
 80083f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fa:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80083fc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80083fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008402:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008406:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008408:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800840a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800840e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008410:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008414:	430b      	orrs	r3, r1
 8008416:	e7e9      	b.n	80083ec <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8008418:	2002      	movs	r0, #2
}
 800841a:	4770      	bx	lr
 800841c:	40012c00 	.word	0x40012c00

08008420 <HAL_TIMEx_CommutCallback>:
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop

08008424 <HAL_TIMEx_BreakCallback>:
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop

08008428 <HAL_TIMEx_Break2Callback>:
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop

0800842c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800842c:	b570      	push	{r4, r5, r6, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800842e:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 8008430:	2d20      	cmp	r5, #32
 8008432:	d12e      	bne.n	8008492 <HAL_UART_Transmit_DMA+0x66>
  {
    if ((pData == NULL) || (Size == 0U))
 8008434:	b359      	cbz	r1, 800848e <HAL_UART_Transmit_DMA+0x62>
 8008436:	b352      	cbz	r2, 800848e <HAL_UART_Transmit_DMA+0x62>

    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008438:	2300      	movs	r3, #0
    huart->TxXferCount = Size;
 800843a:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
 800843e:	4604      	mov	r4, r0
    huart->pTxBuffPtr  = pData;
 8008440:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008442:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->TxXferSize  = Size;
 8008446:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 800844a:	6f00      	ldr	r0, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800844c:	2621      	movs	r6, #33	; 0x21
 800844e:	67e6      	str	r6, [r4, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 8008450:	b160      	cbz	r0, 800846c <HAL_UART_Transmit_DMA+0x40>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008452:	4e14      	ldr	r6, [pc, #80]	; (80084a4 <HAL_UART_Transmit_DMA+0x78>)

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008454:	6343      	str	r3, [r0, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008456:	4613      	mov	r3, r2
 8008458:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800845a:	6286      	str	r6, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800845c:	4e12      	ldr	r6, [pc, #72]	; (80084a8 <HAL_UART_Transmit_DMA+0x7c>)
 800845e:	62c6      	str	r6, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008460:	4e12      	ldr	r6, [pc, #72]	; (80084ac <HAL_UART_Transmit_DMA+0x80>)
 8008462:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008464:	3228      	adds	r2, #40	; 0x28
 8008466:	f7fe f8f3 	bl	8006650 <HAL_DMA_Start_IT>
 800846a:	b9a0      	cbnz	r0, 8008496 <HAL_UART_Transmit_DMA+0x6a>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800846c:	6822      	ldr	r2, [r4, #0]
 800846e:	2340      	movs	r3, #64	; 0x40
 8008470:	6213      	str	r3, [r2, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008472:	f102 0308 	add.w	r3, r2, #8
 8008476:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800847a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	f102 0008 	add.w	r0, r2, #8
 8008482:	e840 3100 	strex	r1, r3, [r0]
 8008486:	2900      	cmp	r1, #0
 8008488:	d1f3      	bne.n	8008472 <HAL_UART_Transmit_DMA+0x46>

    return HAL_OK;
 800848a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800848c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800848e:	2001      	movs	r0, #1
}
 8008490:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8008492:	2002      	movs	r0, #2
}
 8008494:	bd70      	pop	{r4, r5, r6, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008496:	2310      	movs	r3, #16
 8008498:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        return HAL_ERROR;
 800849c:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 800849e:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
 80084a2:	bf00      	nop
 80084a4:	080084b1 	.word	0x080084b1
 80084a8:	080084f9 	.word	0x080084f9
 80084ac:	08008509 	.word	0x08008509

080084b0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80084b2:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d018      	beq.n	80084ec <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	6802      	ldr	r2, [r0, #0]
 80084be:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c2:	f102 0308 	add.w	r3, r2, #8
 80084c6:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	f102 0008 	add.w	r0, r2, #8
 80084d2:	e840 3100 	strex	r1, r3, [r0]
 80084d6:	2900      	cmp	r1, #0
 80084d8:	d1f3      	bne.n	80084c2 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	e842 3100 	strex	r1, r3, [r2]
 80084e6:	2900      	cmp	r1, #0
 80084e8:	d1f7      	bne.n	80084da <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084ea:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80084ec:	f7fc fb52 	bl	8004b94 <HAL_UART_TxCpltCallback>
}
 80084f0:	bd08      	pop	{r3, pc}
 80084f2:	bf00      	nop

080084f4 <HAL_UART_TxHalfCpltCallback>:
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop

080084f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084f8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80084fa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80084fc:	f7ff fffa 	bl	80084f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008500:	bd08      	pop	{r3, pc}
 8008502:	bf00      	nop

08008504 <HAL_UART_ErrorCallback>:
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop

08008508 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008508:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800850a:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800850c:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
{
 800850e:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008510:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	0612      	lsls	r2, r2, #24
 8008518:	d501      	bpl.n	800851e <UART_DMAError+0x16>
 800851a:	2921      	cmp	r1, #33	; 0x21
 800851c:	d00d      	beq.n	800853a <UART_DMAError+0x32>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800851e:	689a      	ldr	r2, [r3, #8]
 8008520:	0652      	lsls	r2, r2, #25
 8008522:	d501      	bpl.n	8008528 <UART_DMAError+0x20>
 8008524:	2c22      	cmp	r4, #34	; 0x22
 8008526:	d016      	beq.n	8008556 <UART_DMAError+0x4e>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008528:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800852c:	f043 0310 	orr.w	r3, r3, #16
 8008530:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008534:	f7ff ffe6 	bl	8008504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008538:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 800853a:	2200      	movs	r2, #0
 800853c:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008544:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	e843 2100 	strex	r1, r2, [r3]
 800854c:	2900      	cmp	r1, #0
 800854e:	d1f7      	bne.n	8008540 <UART_DMAError+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8008550:	2220      	movs	r2, #32
 8008552:	67c2      	str	r2, [r0, #124]	; 0x7c
}
 8008554:	e7e3      	b.n	800851e <UART_DMAError+0x16>
    huart->RxXferCount = 0U;
 8008556:	2200      	movs	r2, #0
 8008558:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008560:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008564:	e843 2100 	strex	r1, r2, [r3]
 8008568:	2900      	cmp	r1, #0
 800856a:	d1f7      	bne.n	800855c <UART_DMAError+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	f103 0208 	add.w	r2, r3, #8
 8008570:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008574:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	f103 0408 	add.w	r4, r3, #8
 800857c:	e844 2100 	strex	r1, r2, [r4]
 8008580:	2900      	cmp	r1, #0
 8008582:	d1f3      	bne.n	800856c <UART_DMAError+0x64>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008584:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8008586:	2a01      	cmp	r2, #1
 8008588:	d006      	beq.n	8008598 <UART_DMAError+0x90>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800858c:	2220      	movs	r2, #32
 800858e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  huart->RxISR = NULL;
 8008592:	6683      	str	r3, [r0, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008594:	6603      	str	r3, [r0, #96]	; 0x60
}
 8008596:	e7c7      	b.n	8008528 <UART_DMAError+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800859c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a0:	e843 2100 	strex	r1, r2, [r3]
 80085a4:	2900      	cmp	r1, #0
 80085a6:	d0f0      	beq.n	800858a <UART_DMAError+0x82>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	e853 2f00 	ldrex	r2, [r3]
 80085ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	e843 2100 	strex	r1, r2, [r3]
 80085b4:	2900      	cmp	r1, #0
 80085b6:	d1ef      	bne.n	8008598 <UART_DMAError+0x90>
 80085b8:	e7e7      	b.n	800858a <UART_DMAError+0x82>
 80085ba:	bf00      	nop

080085bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085bc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085be:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80085c6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085ca:	f7ff ff9b 	bl	8008504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ce:	bd08      	pop	{r3, pc}

080085d0 <HAL_UARTEx_RxEventCallback>:
}
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop

080085d4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085d4:	6803      	ldr	r3, [r0, #0]
 80085d6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085d8:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085da:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80085de:	ea12 0f0c 	tst.w	r2, ip
{
 80085e2:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085e4:	689d      	ldr	r5, [r3, #8]
{
 80085e6:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80085e8:	d17f      	bne.n	80086ea <HAL_UART_IRQHandler+0x116>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80085ea:	0696      	lsls	r6, r2, #26
 80085ec:	d502      	bpl.n	80085f4 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085ee:	068e      	lsls	r6, r1, #26
 80085f0:	f100 8117 	bmi.w	8008822 <HAL_UART_IRQHandler+0x24e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085f4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80085f6:	2801      	cmp	r0, #1
 80085f8:	d024      	beq.n	8008644 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085fa:	02d6      	lsls	r6, r2, #11
 80085fc:	d502      	bpl.n	8008604 <HAL_UART_IRQHandler+0x30>
 80085fe:	0268      	lsls	r0, r5, #9
 8008600:	f100 8114 	bmi.w	800882c <HAL_UART_IRQHandler+0x258>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008604:	0616      	lsls	r6, r2, #24
 8008606:	d414      	bmi.n	8008632 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008608:	0650      	lsls	r0, r2, #25
 800860a:	d501      	bpl.n	8008610 <HAL_UART_IRQHandler+0x3c>
 800860c:	064a      	lsls	r2, r1, #25
 800860e:	d400      	bmi.n	8008612 <HAL_UART_IRQHandler+0x3e>
}
 8008610:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	e843 2100 	strex	r1, r2, [r3]
 800861e:	2900      	cmp	r1, #0
 8008620:	d1f7      	bne.n	8008612 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008622:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008624:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008626:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->TxISR = NULL;
 8008628:	66e3      	str	r3, [r4, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800862a:	4620      	mov	r0, r4
 800862c:	f7fc fab2 	bl	8004b94 <HAL_UART_TxCpltCallback>
}
 8008630:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008632:	060d      	lsls	r5, r1, #24
 8008634:	d5e8      	bpl.n	8008608 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8008636:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0e9      	beq.n	8008610 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 800863c:	4620      	mov	r0, r4
}
 800863e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8008642:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008644:	06d6      	lsls	r6, r2, #27
 8008646:	d5d8      	bpl.n	80085fa <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008648:	06c8      	lsls	r0, r1, #27
 800864a:	d5d6      	bpl.n	80085fa <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800864c:	2210      	movs	r2, #16
 800864e:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008650:	689a      	ldr	r2, [r3, #8]
 8008652:	0652      	lsls	r2, r2, #25
 8008654:	f140 8107 	bpl.w	8008866 <HAL_UART_IRQHandler+0x292>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008658:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800865a:	6802      	ldr	r2, [r0, #0]
 800865c:	6852      	ldr	r2, [r2, #4]
 800865e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008660:	2a00      	cmp	r2, #0
 8008662:	d0d5      	beq.n	8008610 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008664:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8008668:	4291      	cmp	r1, r2
 800866a:	d9d1      	bls.n	8008610 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 800866c:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008670:	6982      	ldr	r2, [r0, #24]
 8008672:	2a20      	cmp	r2, #32
 8008674:	d02f      	beq.n	80086d6 <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800867a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867e:	e843 2100 	strex	r1, r2, [r3]
 8008682:	2900      	cmp	r1, #0
 8008684:	d1f7      	bne.n	8008676 <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	f103 0208 	add.w	r2, r3, #8
 800868a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800868e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	f103 0508 	add.w	r5, r3, #8
 8008696:	e845 2100 	strex	r1, r2, [r5]
 800869a:	2900      	cmp	r1, #0
 800869c:	d1f3      	bne.n	8008686 <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	f103 0208 	add.w	r2, r3, #8
 80086a2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	f103 0508 	add.w	r5, r3, #8
 80086ae:	e845 2100 	strex	r1, r2, [r5]
 80086b2:	2900      	cmp	r1, #0
 80086b4:	d1f3      	bne.n	800869e <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 80086b6:	2220      	movs	r2, #32
 80086b8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086bc:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c6:	e843 2100 	strex	r1, r2, [r3]
 80086ca:	2900      	cmp	r1, #0
 80086cc:	d1f7      	bne.n	80086be <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086ce:	f7fe f801 	bl	80066d4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086d2:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086d6:	2302      	movs	r3, #2
 80086d8:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086da:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80086de:	1ac9      	subs	r1, r1, r3
 80086e0:	4620      	mov	r0, r4
 80086e2:	b289      	uxth	r1, r1
 80086e4:	f7ff ff74 	bl	80085d0 <HAL_UARTEx_RxEventCallback>
}
 80086e8:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80086ea:	487d      	ldr	r0, [pc, #500]	; (80088e0 <HAL_UART_IRQHandler+0x30c>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80086ec:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80086f0:	4008      	ands	r0, r1
 80086f2:	4330      	orrs	r0, r6
 80086f4:	f43f af7e 	beq.w	80085f4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086f8:	07d5      	lsls	r5, r2, #31
 80086fa:	d509      	bpl.n	8008710 <HAL_UART_IRQHandler+0x13c>
 80086fc:	05c8      	lsls	r0, r1, #23
 80086fe:	d507      	bpl.n	8008710 <HAL_UART_IRQHandler+0x13c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008700:	2001      	movs	r0, #1
 8008702:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008704:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008708:	f040 0001 	orr.w	r0, r0, #1
 800870c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008710:	0795      	lsls	r5, r2, #30
 8008712:	f140 8081 	bpl.w	8008818 <HAL_UART_IRQHandler+0x244>
 8008716:	b18e      	cbz	r6, 800873c <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008718:	2002      	movs	r0, #2
 800871a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800871c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008720:	f040 0004 	orr.w	r0, r0, #4
 8008724:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008728:	0750      	lsls	r0, r2, #29
 800872a:	d507      	bpl.n	800873c <HAL_UART_IRQHandler+0x168>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800872c:	2004      	movs	r0, #4
 800872e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008730:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008734:	f040 0002 	orr.w	r0, r0, #2
 8008738:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 800873c:	0710      	lsls	r0, r2, #28
 800873e:	d50b      	bpl.n	8008758 <HAL_UART_IRQHandler+0x184>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008740:	f001 0020 	and.w	r0, r1, #32
 8008744:	4330      	orrs	r0, r6
 8008746:	d007      	beq.n	8008758 <HAL_UART_IRQHandler+0x184>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008748:	2008      	movs	r0, #8
 800874a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800874c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008750:	f040 0008 	orr.w	r0, r0, #8
 8008754:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008758:	0516      	lsls	r6, r2, #20
 800875a:	d50a      	bpl.n	8008772 <HAL_UART_IRQHandler+0x19e>
 800875c:	014d      	lsls	r5, r1, #5
 800875e:	d508      	bpl.n	8008772 <HAL_UART_IRQHandler+0x19e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008760:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008764:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008766:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800876a:	f040 0020 	orr.w	r0, r0, #32
 800876e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008772:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f af4a 	beq.w	8008610 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800877c:	0690      	lsls	r0, r2, #26
 800877e:	d506      	bpl.n	800878e <HAL_UART_IRQHandler+0x1ba>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008780:	0689      	lsls	r1, r1, #26
 8008782:	d504      	bpl.n	800878e <HAL_UART_IRQHandler+0x1ba>
        if (huart->RxISR != NULL)
 8008784:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008786:	b112      	cbz	r2, 800878e <HAL_UART_IRQHandler+0x1ba>
          huart->RxISR(huart);
 8008788:	4620      	mov	r0, r4
 800878a:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800878c:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 800878e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008792:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008794:	f001 0128 	and.w	r1, r1, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008798:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800879c:	ea52 0501 	orrs.w	r5, r2, r1
 80087a0:	f000 8098 	beq.w	80088d4 <HAL_UART_IRQHandler+0x300>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	e843 2100 	strex	r1, r2, [r3]
 80087b0:	2900      	cmp	r1, #0
 80087b2:	d1f7      	bne.n	80087a4 <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	f103 0208 	add.w	r2, r3, #8
 80087b8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087bc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	f103 0008 	add.w	r0, r3, #8
 80087c4:	e840 2100 	strex	r1, r2, [r0]
 80087c8:	2900      	cmp	r1, #0
 80087ca:	d1f3      	bne.n	80087b4 <HAL_UART_IRQHandler+0x1e0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80087ce:	2a01      	cmp	r2, #1
 80087d0:	d034      	beq.n	800883c <HAL_UART_IRQHandler+0x268>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80087d4:	2120      	movs	r1, #32
 80087d6:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087da:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087dc:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 80087de:	66a2      	str	r2, [r4, #104]	; 0x68
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e0:	064a      	lsls	r2, r1, #25
 80087e2:	d53c      	bpl.n	800885e <HAL_UART_IRQHandler+0x28a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	f103 0208 	add.w	r2, r3, #8
 80087e8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f0:	f103 0008 	add.w	r0, r3, #8
 80087f4:	e840 2100 	strex	r1, r2, [r0]
 80087f8:	2900      	cmp	r1, #0
 80087fa:	d1f3      	bne.n	80087e4 <HAL_UART_IRQHandler+0x210>
          if (huart->hdmarx != NULL)
 80087fc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80087fe:	b370      	cbz	r0, 800885e <HAL_UART_IRQHandler+0x28a>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008800:	4b38      	ldr	r3, [pc, #224]	; (80088e4 <HAL_UART_IRQHandler+0x310>)
 8008802:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008804:	f7fd ff8a 	bl	800671c <HAL_DMA_Abort_IT>
 8008808:	2800      	cmp	r0, #0
 800880a:	f43f af01 	beq.w	8008610 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800880e:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8008810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008814:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008816:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008818:	0755      	lsls	r5, r2, #29
 800881a:	d58f      	bpl.n	800873c <HAL_UART_IRQHandler+0x168>
 800881c:	2e00      	cmp	r6, #0
 800881e:	d185      	bne.n	800872c <HAL_UART_IRQHandler+0x158>
 8008820:	e78c      	b.n	800873c <HAL_UART_IRQHandler+0x168>
      if (huart->RxISR != NULL)
 8008822:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8008824:	2b00      	cmp	r3, #0
 8008826:	f47f af0a 	bne.w	800863e <HAL_UART_IRQHandler+0x6a>
 800882a:	e6f1      	b.n	8008610 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800882c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8008830:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008832:	621a      	str	r2, [r3, #32]
}
 8008834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008838:	f000 bc40 	b.w	80090bc <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008840:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	e843 2100 	strex	r1, r2, [r3]
 8008848:	2900      	cmp	r1, #0
 800884a:	d0c2      	beq.n	80087d2 <HAL_UART_IRQHandler+0x1fe>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884c:	e853 2f00 	ldrex	r2, [r3]
 8008850:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	e843 2100 	strex	r1, r2, [r3]
 8008858:	2900      	cmp	r1, #0
 800885a:	d1ef      	bne.n	800883c <HAL_UART_IRQHandler+0x268>
 800885c:	e7b9      	b.n	80087d2 <HAL_UART_IRQHandler+0x1fe>
            HAL_UART_ErrorCallback(huart);
 800885e:	4620      	mov	r0, r4
 8008860:	f7ff fe50 	bl	8008504 <HAL_UART_ErrorCallback>
}
 8008864:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008866:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 800886a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800886e:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8008872:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008874:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008876:	2a00      	cmp	r2, #0
 8008878:	f43f aeca 	beq.w	8008610 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800887c:	1a41      	subs	r1, r0, r1
 800887e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008880:	2900      	cmp	r1, #0
 8008882:	f43f aec5 	beq.w	8008610 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008886:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800888a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	e843 2000 	strex	r0, r2, [r3]
 8008892:	2800      	cmp	r0, #0
 8008894:	d1f7      	bne.n	8008886 <HAL_UART_IRQHandler+0x2b2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	f103 0208 	add.w	r2, r3, #8
 800889a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a2:	f103 0508 	add.w	r5, r3, #8
 80088a6:	e845 2000 	strex	r0, r2, [r5]
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d1f3      	bne.n	8008896 <HAL_UART_IRQHandler+0x2c2>
        huart->RxState = HAL_UART_STATE_READY;
 80088ae:	2220      	movs	r2, #32
 80088b0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
        huart->RxISR = NULL;
 80088b4:	66a0      	str	r0, [r4, #104]	; 0x68
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b6:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088bc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	e843 2000 	strex	r0, r2, [r3]
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d1f7      	bne.n	80088b8 <HAL_UART_IRQHandler+0x2e4>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088c8:	2302      	movs	r3, #2
 80088ca:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088cc:	4620      	mov	r0, r4
 80088ce:	f7ff fe7f 	bl	80085d0 <HAL_UARTEx_RxEventCallback>
}
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80088d4:	4620      	mov	r0, r4
 80088d6:	f7ff fe15 	bl	8008504 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088da:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 80088de:	bd70      	pop	{r4, r5, r6, pc}
 80088e0:	04000120 	.word	0x04000120
 80088e4:	080085bd 	.word	0x080085bd

080088e8 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 80088e8:	b508      	push	{r3, lr}
 80088ea:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	e843 2100 	strex	r1, r2, [r3]
 80088f8:	2900      	cmp	r1, #0
 80088fa:	d1f7      	bne.n	80088ec <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	f103 0208 	add.w	r2, r3, #8
 8008900:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008904:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	f103 0c08 	add.w	ip, r3, #8
 800890c:	e84c 2100 	strex	r1, r2, [ip]
 8008910:	2900      	cmp	r1, #0
 8008912:	d1f3      	bne.n	80088fc <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008914:	2220      	movs	r2, #32
 8008916:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800891a:	6641      	str	r1, [r0, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800891c:	685a      	ldr	r2, [r3, #4]
      huart->RxISR = NULL;
 800891e:	6681      	str	r1, [r0, #104]	; 0x68
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008920:	0211      	lsls	r1, r2, #8
 8008922:	d416      	bmi.n	8008952 <UART_RxISR_16BIT.part.0+0x6a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008924:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8008926:	2a01      	cmp	r2, #1
 8008928:	d124      	bne.n	8008974 <UART_RxISR_16BIT.part.0+0x8c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892a:	2200      	movs	r2, #0
 800892c:	6602      	str	r2, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008932:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	e843 2100 	strex	r1, r2, [r3]
 800893a:	2900      	cmp	r1, #0
 800893c:	d1f7      	bne.n	800892e <UART_RxISR_16BIT.part.0+0x46>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800893e:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008940:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008944:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008946:	bf44      	itt	mi
 8008948:	2210      	movmi	r2, #16
 800894a:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800894c:	f7ff fe40 	bl	80085d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008950:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008956:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	e843 2100 	strex	r1, r2, [r3]
 800895e:	2900      	cmp	r1, #0
 8008960:	d0e0      	beq.n	8008924 <UART_RxISR_16BIT.part.0+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	e853 2f00 	ldrex	r2, [r3]
 8008966:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	e843 2100 	strex	r1, r2, [r3]
 800896e:	2900      	cmp	r1, #0
 8008970:	d1ef      	bne.n	8008952 <UART_RxISR_16BIT.part.0+0x6a>
 8008972:	e7d7      	b.n	8008924 <UART_RxISR_16BIT.part.0+0x3c>
        HAL_UART_RxCpltCallback(huart);
 8008974:	f7f9 f822 	bl	80019bc <HAL_UART_RxCpltCallback>
}
 8008978:	bd08      	pop	{r3, pc}
 800897a:	bf00      	nop

0800897c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800897c:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 8008980:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008984:	2922      	cmp	r1, #34	; 0x22
 8008986:	d005      	beq.n	8008994 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008988:	6802      	ldr	r2, [r0, #0]
 800898a:	6993      	ldr	r3, [r2, #24]
 800898c:	f043 0308 	orr.w	r3, r3, #8
 8008990:	6193      	str	r3, [r2, #24]
 8008992:	4770      	bx	lr
{
 8008994:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008996:	6804      	ldr	r4, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008998:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800899a:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 800899e:	ea02 020c 	and.w	r2, r2, ip
 80089a2:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80089a6:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 80089aa:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80089ac:	3a01      	subs	r2, #1
 80089ae:	b292      	uxth	r2, r2
 80089b0:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 80089b4:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	b91b      	cbnz	r3, 80089c4 <UART_RxISR_16BIT+0x48>
  }
}
 80089bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c0:	f7ff bf92 	b.w	80088e8 <UART_RxISR_16BIT.part.0>
 80089c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop

080089cc <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089cc:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
  uint16_t uhMask = huart->Mask;
 80089d0:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089d4:	2922      	cmp	r1, #34	; 0x22
 80089d6:	d005      	beq.n	80089e4 <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089d8:	6802      	ldr	r2, [r0, #0]
 80089da:	6993      	ldr	r3, [r2, #24]
 80089dc:	f043 0308 	orr.w	r3, r3, #8
 80089e0:	6193      	str	r3, [r2, #24]
 80089e2:	4770      	bx	lr
{
 80089e4:	b410      	push	{r4}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089e6:	6804      	ldr	r4, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089e8:	6d41      	ldr	r1, [r0, #84]	; 0x54
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089ea:	f8b4 c024 	ldrh.w	ip, [r4, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089ee:	ea02 020c 	and.w	r2, r2, ip
 80089f2:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 80089f4:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 80089f8:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80089fa:	3a01      	subs	r2, #1
 80089fc:	b292      	uxth	r2, r2
 80089fe:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8008a02:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8008a06:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8008a08:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8008a0a:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8008a0c:	b91a      	cbnz	r2, 8008a16 <UART_RxISR_8BIT+0x4a>
}
 8008a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a12:	f7ff bf69 	b.w	80088e8 <UART_RxISR_16BIT.part.0>
 8008a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008a1e:	07da      	lsls	r2, r3, #31
{
 8008a20:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a22:	d506      	bpl.n	8008a32 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a24:	6801      	ldr	r1, [r0, #0]
 8008a26:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8008a28:	684a      	ldr	r2, [r1, #4]
 8008a2a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008a2e:	4322      	orrs	r2, r4
 8008a30:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a32:	079c      	lsls	r4, r3, #30
 8008a34:	d506      	bpl.n	8008a44 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a36:	6801      	ldr	r1, [r0, #0]
 8008a38:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008a3a:	684a      	ldr	r2, [r1, #4]
 8008a3c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008a40:	4322      	orrs	r2, r4
 8008a42:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a44:	0759      	lsls	r1, r3, #29
 8008a46:	d506      	bpl.n	8008a56 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a48:	6801      	ldr	r1, [r0, #0]
 8008a4a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008a4c:	684a      	ldr	r2, [r1, #4]
 8008a4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a52:	4322      	orrs	r2, r4
 8008a54:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a56:	071a      	lsls	r2, r3, #28
 8008a58:	d506      	bpl.n	8008a68 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a5a:	6801      	ldr	r1, [r0, #0]
 8008a5c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008a5e:	684a      	ldr	r2, [r1, #4]
 8008a60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a64:	4322      	orrs	r2, r4
 8008a66:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a68:	06dc      	lsls	r4, r3, #27
 8008a6a:	d506      	bpl.n	8008a7a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a6c:	6801      	ldr	r1, [r0, #0]
 8008a6e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008a70:	688a      	ldr	r2, [r1, #8]
 8008a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a76:	4322      	orrs	r2, r4
 8008a78:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a7a:	0699      	lsls	r1, r3, #26
 8008a7c:	d506      	bpl.n	8008a8c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a7e:	6801      	ldr	r1, [r0, #0]
 8008a80:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008a82:	688a      	ldr	r2, [r1, #8]
 8008a84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a88:	4322      	orrs	r2, r4
 8008a8a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a8c:	065a      	lsls	r2, r3, #25
 8008a8e:	d509      	bpl.n	8008aa4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a90:	6801      	ldr	r1, [r0, #0]
 8008a92:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008a94:	684a      	ldr	r2, [r1, #4]
 8008a96:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008a9a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a9c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008aa0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aa2:	d00b      	beq.n	8008abc <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aa4:	061b      	lsls	r3, r3, #24
 8008aa6:	d506      	bpl.n	8008ab6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aa8:	6802      	ldr	r2, [r0, #0]
 8008aaa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008aac:	6853      	ldr	r3, [r2, #4]
 8008aae:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	6053      	str	r3, [r2, #4]
}
 8008ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008aba:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008abc:	684a      	ldr	r2, [r1, #4]
 8008abe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008ac0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008ac4:	4322      	orrs	r2, r4
 8008ac6:	604a      	str	r2, [r1, #4]
 8008ac8:	e7ec      	b.n	8008aa4 <UART_AdvFeatureConfig+0x88>
 8008aca:	bf00      	nop

08008acc <UART_CheckIdleState>:
{
 8008acc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ace:	2300      	movs	r3, #0
{
 8008ad0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8008ad6:	f7fc f98d 	bl	8004df4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ada:	6822      	ldr	r2, [r4, #0]
 8008adc:	6813      	ldr	r3, [r2, #0]
 8008ade:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8008ae0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ae2:	d40e      	bmi.n	8008b02 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ae4:	6813      	ldr	r3, [r2, #0]
 8008ae6:	0759      	lsls	r1, r3, #29
 8008ae8:	d42f      	bmi.n	8008b4a <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aea:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008aec:	2220      	movs	r2, #32
 8008aee:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8008af0:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8008af2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af6:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af8:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(huart);
 8008afa:	2300      	movs	r3, #0
 8008afc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8008b00:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b02:	69d3      	ldr	r3, [r2, #28]
 8008b04:	0298      	lsls	r0, r3, #10
 8008b06:	d4ed      	bmi.n	8008ae4 <UART_CheckIdleState+0x18>
 8008b08:	e00c      	b.n	8008b24 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b0a:	6819      	ldr	r1, [r3, #0]
 8008b0c:	0749      	lsls	r1, r1, #29
 8008b0e:	461a      	mov	r2, r3
 8008b10:	d505      	bpl.n	8008b1e <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b12:	69d9      	ldr	r1, [r3, #28]
 8008b14:	0708      	lsls	r0, r1, #28
 8008b16:	d44a      	bmi.n	8008bae <UART_CheckIdleState+0xe2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b18:	69d9      	ldr	r1, [r3, #28]
 8008b1a:	0509      	lsls	r1, r1, #20
 8008b1c:	d475      	bmi.n	8008c0a <UART_CheckIdleState+0x13e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b1e:	69db      	ldr	r3, [r3, #28]
 8008b20:	0298      	lsls	r0, r3, #10
 8008b22:	d4df      	bmi.n	8008ae4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b24:	f7fc f966 	bl	8004df4 <HAL_GetTick>
 8008b28:	1b43      	subs	r3, r0, r5
 8008b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	d3eb      	bcc.n	8008b0a <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3a:	e843 2100 	strex	r1, r2, [r3]
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	d1f7      	bne.n	8008b32 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8008b42:	2320      	movs	r3, #32
 8008b44:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8008b46:	2003      	movs	r0, #3
 8008b48:	e7d7      	b.n	8008afa <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b4a:	69d3      	ldr	r3, [r2, #28]
 8008b4c:	025b      	lsls	r3, r3, #9
 8008b4e:	d4cc      	bmi.n	8008aea <UART_CheckIdleState+0x1e>
 8008b50:	e00d      	b.n	8008b6e <UART_CheckIdleState+0xa2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	0750      	lsls	r0, r2, #29
 8008b56:	d507      	bpl.n	8008b68 <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b58:	69da      	ldr	r2, [r3, #28]
 8008b5a:	0711      	lsls	r1, r2, #28
 8008b5c:	f100 8083 	bmi.w	8008c66 <UART_CheckIdleState+0x19a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b60:	69da      	ldr	r2, [r3, #28]
 8008b62:	0512      	lsls	r2, r2, #20
 8008b64:	f100 80ad 	bmi.w	8008cc2 <UART_CheckIdleState+0x1f6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	025b      	lsls	r3, r3, #9
 8008b6c:	d4bd      	bmi.n	8008aea <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6e:	f7fc f941 	bl	8004df4 <HAL_GetTick>
 8008b72:	1b43      	subs	r3, r0, r5
 8008b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	d3ea      	bcc.n	8008b52 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b84:	e843 2100 	strex	r1, r2, [r3]
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	d1f7      	bne.n	8008b7c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	f103 0208 	add.w	r2, r3, #8
 8008b90:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b94:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b98:	f103 0008 	add.w	r0, r3, #8
 8008b9c:	e840 2100 	strex	r1, r2, [r0]
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	d1f3      	bne.n	8008b8c <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8008ba4:	2320      	movs	r3, #32
 8008ba6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 8008baa:	2003      	movs	r0, #3
 8008bac:	e7a5      	b.n	8008afa <UART_CheckIdleState+0x2e>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bae:	2208      	movs	r2, #8
 8008bb0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	e843 2100 	strex	r1, r2, [r3]
 8008bbe:	2900      	cmp	r1, #0
 8008bc0:	d1f7      	bne.n	8008bb2 <UART_CheckIdleState+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	f103 0208 	add.w	r2, r3, #8
 8008bc6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bca:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bce:	f103 0008 	add.w	r0, r3, #8
 8008bd2:	e840 2100 	strex	r1, r2, [r0]
 8008bd6:	2900      	cmp	r1, #0
 8008bd8:	d1f3      	bne.n	8008bc2 <UART_CheckIdleState+0xf6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bda:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008bdc:	2a01      	cmp	r2, #1
 8008bde:	d00b      	beq.n	8008bf8 <UART_CheckIdleState+0x12c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008be2:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008be4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008be6:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008bea:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bec:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8008bee:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bf2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8008bf6:	e79c      	b.n	8008b32 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c00:	e843 2100 	strex	r1, r2, [r3]
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d1f7      	bne.n	8008bf8 <UART_CheckIdleState+0x12c>
 8008c08:	e7ea      	b.n	8008be0 <UART_CheckIdleState+0x114>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c0e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	e843 2100 	strex	r1, r2, [r3]
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	d1f7      	bne.n	8008c10 <UART_CheckIdleState+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c20:	f103 0208 	add.w	r2, r3, #8
 8008c24:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c28:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	f103 0008 	add.w	r0, r3, #8
 8008c30:	e840 2100 	strex	r1, r2, [r0]
 8008c34:	2900      	cmp	r1, #0
 8008c36:	d1f3      	bne.n	8008c20 <UART_CheckIdleState+0x154>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c38:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008c3a:	2a01      	cmp	r2, #1
 8008c3c:	d00a      	beq.n	8008c54 <UART_CheckIdleState+0x188>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c3e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008c40:	2120      	movs	r1, #32
 8008c42:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008c46:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c48:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8008c4a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c4e:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8008c52:	e76e      	b.n	8008b32 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c58:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	e843 2100 	strex	r1, r2, [r3]
 8008c60:	2900      	cmp	r1, #0
 8008c62:	d1f7      	bne.n	8008c54 <UART_CheckIdleState+0x188>
 8008c64:	e7eb      	b.n	8008c3e <UART_CheckIdleState+0x172>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c66:	2208      	movs	r2, #8
 8008c68:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	e843 2100 	strex	r1, r2, [r3]
 8008c76:	2900      	cmp	r1, #0
 8008c78:	d1f7      	bne.n	8008c6a <UART_CheckIdleState+0x19e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	f103 0208 	add.w	r2, r3, #8
 8008c7e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c82:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	f103 0008 	add.w	r0, r3, #8
 8008c8a:	e840 2100 	strex	r1, r2, [r0]
 8008c8e:	2900      	cmp	r1, #0
 8008c90:	d1f3      	bne.n	8008c7a <UART_CheckIdleState+0x1ae>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c92:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008c94:	2a01      	cmp	r2, #1
 8008c96:	d00b      	beq.n	8008cb0 <UART_CheckIdleState+0x1e4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c98:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008c9a:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c9c:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008c9e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008ca2:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca4:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8008ca6:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008caa:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8008cae:	e765      	b.n	8008b7c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb8:	e843 2100 	strex	r1, r2, [r3]
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	d1f7      	bne.n	8008cb0 <UART_CheckIdleState+0x1e4>
 8008cc0:	e7ea      	b.n	8008c98 <UART_CheckIdleState+0x1cc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cc6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ccc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd0:	e843 2100 	strex	r1, r2, [r3]
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	d1f7      	bne.n	8008cc8 <UART_CheckIdleState+0x1fc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	f103 0208 	add.w	r2, r3, #8
 8008cdc:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce4:	f103 0008 	add.w	r0, r3, #8
 8008ce8:	e840 2100 	strex	r1, r2, [r0]
 8008cec:	2900      	cmp	r1, #0
 8008cee:	d1f3      	bne.n	8008cd8 <UART_CheckIdleState+0x20c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008cf2:	2a01      	cmp	r2, #1
 8008cf4:	d00a      	beq.n	8008d0c <UART_CheckIdleState+0x240>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008cf8:	2120      	movs	r1, #32
 8008cfa:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8008cfe:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d00:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8008d02:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d06:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 8008d0a:	e737      	b.n	8008b7c <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d10:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	e843 2100 	strex	r1, r2, [r3]
 8008d18:	2900      	cmp	r1, #0
 8008d1a:	d1f7      	bne.n	8008d0c <UART_CheckIdleState+0x240>
 8008d1c:	e7eb      	b.n	8008cf6 <UART_CheckIdleState+0x22a>
 8008d1e:	bf00      	nop

08008d20 <HAL_UART_Init>:
  if (huart == NULL)
 8008d20:	2800      	cmp	r0, #0
 8008d22:	f000 80ec 	beq.w	8008efe <HAL_UART_Init+0x1de>
{
 8008d26:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8008d28:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d037      	beq.n	8008da0 <HAL_UART_Init+0x80>
  __HAL_UART_DISABLE(huart);
 8008d30:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d32:	6925      	ldr	r5, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8008d34:	2224      	movs	r2, #36	; 0x24
 8008d36:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8008d38:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d3a:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8008d3c:	f021 0101 	bic.w	r1, r1, #1
 8008d40:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d42:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d44:	69e1      	ldr	r1, [r4, #28]
 8008d46:	432a      	orrs	r2, r5
 8008d48:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d4a:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d4e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d50:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d54:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d56:	4302      	orrs	r2, r0
 8008d58:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8008d5e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d60:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008d64:	4302      	orrs	r2, r0
 8008d66:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d68:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d6a:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d6c:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8008d70:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d72:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d74:	4886      	ldr	r0, [pc, #536]	; (8008f90 <HAL_UART_Init+0x270>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d76:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d78:	4283      	cmp	r3, r0
 8008d7a:	d016      	beq.n	8008daa <HAL_UART_Init+0x8a>
 8008d7c:	4a85      	ldr	r2, [pc, #532]	; (8008f94 <HAL_UART_Init+0x274>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d046      	beq.n	8008e10 <HAL_UART_Init+0xf0>
 8008d82:	4a85      	ldr	r2, [pc, #532]	; (8008f98 <HAL_UART_Init+0x278>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	f000 80a4 	beq.w	8008ed2 <HAL_UART_Init+0x1b2>
 8008d8a:	4a84      	ldr	r2, [pc, #528]	; (8008f9c <HAL_UART_Init+0x27c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d071      	beq.n	8008e74 <HAL_UART_Init+0x154>
 8008d90:	4a83      	ldr	r2, [pc, #524]	; (8008fa0 <HAL_UART_Init+0x280>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d07b      	beq.n	8008e8e <HAL_UART_Init+0x16e>
  huart->RxISR = NULL;
 8008d96:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008d98:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8008da0:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8008da4:	f7fb fe8e 	bl	8004ac4 <HAL_UART_MspInit>
 8008da8:	e7c2      	b.n	8008d30 <HAL_UART_Init+0x10>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008daa:	4b7e      	ldr	r3, [pc, #504]	; (8008fa4 <HAL_UART_Init+0x284>)
 8008dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	3b01      	subs	r3, #1
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d93f      	bls.n	8008e38 <HAL_UART_Init+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008dbc:	f000 80c9 	beq.w	8008f52 <HAL_UART_Init+0x232>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008dc0:	f7fe fb98 	bl	80074f4 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008dc4:	b160      	cbz	r0, 8008de0 <HAL_UART_Init+0xc0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dc6:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dc8:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008dcc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008dd0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dd4:	f1a0 0310 	sub.w	r3, r0, #16
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d8dc      	bhi.n	8008d96 <HAL_UART_Init+0x76>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	60d8      	str	r0, [r3, #12]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008de0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  huart->RxISR = NULL;
 8008de2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8008de4:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008de8:	2a00      	cmp	r2, #0
 8008dea:	d16e      	bne.n	8008eca <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008df4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df6:	689a      	ldr	r2, [r3, #8]
 8008df8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dfc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8008e04:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8008e06:	601a      	str	r2, [r3, #0]
}
 8008e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8008e0c:	f7ff be5e 	b.w	8008acc <UART_CheckIdleState>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e10:	4b64      	ldr	r3, [pc, #400]	; (8008fa4 <HAL_UART_Init+0x284>)
 8008e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e1c:	d046      	beq.n	8008eac <HAL_UART_Init+0x18c>
 8008e1e:	d84b      	bhi.n	8008eb8 <HAL_UART_Init+0x198>
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d03d      	beq.n	8008ea0 <HAL_UART_Init+0x180>
 8008e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e28:	d1b5      	bne.n	8008d96 <HAL_UART_Init+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e2a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008e2e:	f000 8093 	beq.w	8008f58 <HAL_UART_Init+0x238>
        pclk = HAL_RCC_GetSysClockFreq();
 8008e32:	f7fe fb0d 	bl	8007450 <HAL_RCC_GetSysClockFreq>
        break;
 8008e36:	e7c5      	b.n	8008dc4 <HAL_UART_Init+0xa4>
 8008e38:	4a5b      	ldr	r2, [pc, #364]	; (8008fa8 <HAL_UART_Init+0x288>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e3a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008e3e:	5cd3      	ldrb	r3, [r2, r3]
 8008e40:	f000 808d 	beq.w	8008f5e <HAL_UART_Init+0x23e>
    switch (clocksource)
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d8a6      	bhi.n	8008d96 <HAL_UART_Init+0x76>
 8008e48:	a201      	add	r2, pc, #4	; (adr r2, 8008e50 <HAL_UART_Init+0x130>)
 8008e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e4e:	bf00      	nop
 8008e50:	08008ea7 	.word	0x08008ea7
 8008e54:	08008dc1 	.word	0x08008dc1
 8008e58:	08008ec7 	.word	0x08008ec7
 8008e5c:	08008d97 	.word	0x08008d97
 8008e60:	08008e33 	.word	0x08008e33
 8008e64:	08008d97 	.word	0x08008d97
 8008e68:	08008d97 	.word	0x08008d97
 8008e6c:	08008d97 	.word	0x08008d97
 8008e70:	08008eb3 	.word	0x08008eb3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e74:	4b4b      	ldr	r3, [pc, #300]	; (8008fa4 <HAL_UART_Init+0x284>)
 8008e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e78:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e80:	d014      	beq.n	8008eac <HAL_UART_Init+0x18c>
 8008e82:	d838      	bhi.n	8008ef6 <HAL_UART_Init+0x1d6>
 8008e84:	b163      	cbz	r3, 8008ea0 <HAL_UART_Init+0x180>
 8008e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e8a:	d0ce      	beq.n	8008e2a <HAL_UART_Init+0x10a>
 8008e8c:	e783      	b.n	8008d96 <HAL_UART_Init+0x76>
 8008e8e:	4b45      	ldr	r3, [pc, #276]	; (8008fa4 <HAL_UART_Init+0x284>)
 8008e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e92:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e9a:	d007      	beq.n	8008eac <HAL_UART_Init+0x18c>
 8008e9c:	d835      	bhi.n	8008f0a <HAL_UART_Init+0x1ea>
 8008e9e:	bb83      	cbnz	r3, 8008f02 <HAL_UART_Init+0x1e2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008ea4:	d035      	beq.n	8008f12 <HAL_UART_Init+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ea6:	f7fe fb0d 	bl	80074c4 <HAL_RCC_GetPCLK1Freq>
        break;
 8008eaa:	e78b      	b.n	8008dc4 <HAL_UART_Init+0xa4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008eb0:	d04a      	beq.n	8008f48 <HAL_UART_Init+0x228>
        pclk = (uint32_t) LSE_VALUE;
 8008eb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008eb6:	e786      	b.n	8008dc6 <HAL_UART_Init+0xa6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008eb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ebc:	f47f af6b 	bne.w	8008d96 <HAL_UART_Init+0x76>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ec0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008ec4:	d043      	beq.n	8008f4e <HAL_UART_Init+0x22e>
    switch (clocksource)
 8008ec6:	4839      	ldr	r0, [pc, #228]	; (8008fac <HAL_UART_Init+0x28c>)
 8008ec8:	e77d      	b.n	8008dc6 <HAL_UART_Init+0xa6>
    UART_AdvFeatureConfig(huart);
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f7ff fda6 	bl	8008a1c <UART_AdvFeatureConfig>
 8008ed0:	e78c      	b.n	8008dec <HAL_UART_Init+0xcc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ed2:	4b34      	ldr	r3, [pc, #208]	; (8008fa4 <HAL_UART_Init+0x284>)
 8008ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008eda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ede:	d0e5      	beq.n	8008eac <HAL_UART_Init+0x18c>
 8008ee0:	d805      	bhi.n	8008eee <HAL_UART_Init+0x1ce>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0dc      	beq.n	8008ea0 <HAL_UART_Init+0x180>
 8008ee6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008eea:	d09e      	beq.n	8008e2a <HAL_UART_Init+0x10a>
 8008eec:	e753      	b.n	8008d96 <HAL_UART_Init+0x76>
 8008eee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008ef2:	d0e5      	beq.n	8008ec0 <HAL_UART_Init+0x1a0>
 8008ef4:	e74f      	b.n	8008d96 <HAL_UART_Init+0x76>
 8008ef6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008efa:	d0e1      	beq.n	8008ec0 <HAL_UART_Init+0x1a0>
 8008efc:	e74b      	b.n	8008d96 <HAL_UART_Init+0x76>
}
 8008efe:	2001      	movs	r0, #1
 8008f00:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f06:	d090      	beq.n	8008e2a <HAL_UART_Init+0x10a>
 8008f08:	e745      	b.n	8008d96 <HAL_UART_Init+0x76>
 8008f0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f0e:	d0d7      	beq.n	8008ec0 <HAL_UART_Init+0x1a0>
 8008f10:	e741      	b.n	8008d96 <HAL_UART_Init+0x76>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f12:	f7fe fad7 	bl	80074c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008f16:	2800      	cmp	r0, #0
 8008f18:	f43f af62 	beq.w	8008de0 <HAL_UART_Init+0xc0>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f1c:	0043      	lsls	r3, r0, #1
 8008f1e:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f20:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f24:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008f28:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f2c:	f1a3 0210 	sub.w	r2, r3, #16
 8008f30:	428a      	cmp	r2, r1
 8008f32:	f63f af30 	bhi.w	8008d96 <HAL_UART_Init+0x76>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f36:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8008f3a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f3c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f3e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60cb      	str	r3, [r1, #12]
  return ret;
 8008f46:	e74b      	b.n	8008de0 <HAL_UART_Init+0xc0>
    switch (clocksource)
 8008f48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f4c:	e7e7      	b.n	8008f1e <HAL_UART_Init+0x1fe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f4e:	4b18      	ldr	r3, [pc, #96]	; (8008fb0 <HAL_UART_Init+0x290>)
 8008f50:	e7e5      	b.n	8008f1e <HAL_UART_Init+0x1fe>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f52:	f7fe facf 	bl	80074f4 <HAL_RCC_GetPCLK2Freq>
        break;
 8008f56:	e7de      	b.n	8008f16 <HAL_UART_Init+0x1f6>
        pclk = HAL_RCC_GetSysClockFreq();
 8008f58:	f7fe fa7a 	bl	8007450 <HAL_RCC_GetSysClockFreq>
        break;
 8008f5c:	e7db      	b.n	8008f16 <HAL_UART_Init+0x1f6>
    switch (clocksource)
 8008f5e:	2b08      	cmp	r3, #8
 8008f60:	f63f af19 	bhi.w	8008d96 <HAL_UART_Init+0x76>
 8008f64:	a201      	add	r2, pc, #4	; (adr r2, 8008f6c <HAL_UART_Init+0x24c>)
 8008f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6a:	bf00      	nop
 8008f6c:	08008f13 	.word	0x08008f13
 8008f70:	08008f53 	.word	0x08008f53
 8008f74:	08008f4f 	.word	0x08008f4f
 8008f78:	08008d97 	.word	0x08008d97
 8008f7c:	08008f59 	.word	0x08008f59
 8008f80:	08008d97 	.word	0x08008d97
 8008f84:	08008d97 	.word	0x08008d97
 8008f88:	08008d97 	.word	0x08008d97
 8008f8c:	08008f49 	.word	0x08008f49
 8008f90:	40013800 	.word	0x40013800
 8008f94:	40004400 	.word	0x40004400
 8008f98:	40004800 	.word	0x40004800
 8008f9c:	40004c00 	.word	0x40004c00
 8008fa0:	40005000 	.word	0x40005000
 8008fa4:	40021000 	.word	0x40021000
 8008fa8:	0800da34 	.word	0x0800da34
 8008fac:	007a1200 	.word	0x007a1200
 8008fb0:	00f42400 	.word	0x00f42400

08008fb4 <UART_Start_Receive_IT>:
{
 8008fb4:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 8008fb6:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8008fb8:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 8008fba:	2300      	movs	r3, #0
  UART_MASK_COMPUTATION(huart);
 8008fbc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8008fc0:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8008fc4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008fc8:	6683      	str	r3, [r0, #104]	; 0x68
  UART_MASK_COMPUTATION(huart);
 8008fca:	d044      	beq.n	8009056 <UART_Start_Receive_IT+0xa2>
 8008fcc:	2c00      	cmp	r4, #0
 8008fce:	d03c      	beq.n	800904a <UART_Start_Receive_IT+0x96>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd0:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fd2:	2122      	movs	r1, #34	; 0x22
 8008fd4:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd6:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
  UART_MASK_COMPUTATION(huart);
 8008fda:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fde:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe2:	f102 0308 	add.w	r3, r2, #8
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fea:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	f102 0408 	add.w	r4, r2, #8
 8008ff2:	e844 3100 	strex	r1, r3, [r4]
 8008ff6:	2900      	cmp	r1, #0
 8008ff8:	d1f3      	bne.n	8008fe2 <UART_Start_Receive_IT+0x2e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ffa:	6883      	ldr	r3, [r0, #8]
 8008ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009000:	6903      	ldr	r3, [r0, #16]
 8009002:	d00e      	beq.n	8009022 <UART_Start_Receive_IT+0x6e>
    huart->RxISR = UART_RxISR_8BIT;
 8009004:	491d      	ldr	r1, [pc, #116]	; (800907c <UART_Start_Receive_IT+0xc8>)
 8009006:	6681      	str	r1, [r0, #104]	; 0x68
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009008:	b173      	cbz	r3, 8009028 <UART_Start_Receive_IT+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800900e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	e842 3100 	strex	r1, r3, [r2]
 8009016:	2900      	cmp	r1, #0
 8009018:	d1f7      	bne.n	800900a <UART_Start_Receive_IT+0x56>
}
 800901a:	2000      	movs	r0, #0
 800901c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009020:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009022:	b9fb      	cbnz	r3, 8009064 <UART_Start_Receive_IT+0xb0>
 8009024:	4b16      	ldr	r3, [pc, #88]	; (8009080 <UART_Start_Receive_IT+0xcc>)
 8009026:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800902c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	e842 3100 	strex	r1, r3, [r2]
 8009034:	2900      	cmp	r1, #0
 8009036:	d0f0      	beq.n	800901a <UART_Start_Receive_IT+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	e852 3f00 	ldrex	r3, [r2]
 800903c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	e842 3100 	strex	r1, r3, [r2]
 8009044:	2900      	cmp	r1, #0
 8009046:	d1ef      	bne.n	8009028 <UART_Start_Receive_IT+0x74>
 8009048:	e7e7      	b.n	800901a <UART_Start_Receive_IT+0x66>
  UART_MASK_COMPUTATION(huart);
 800904a:	6903      	ldr	r3, [r0, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	bf0c      	ite	eq
 8009050:	23ff      	moveq	r3, #255	; 0xff
 8009052:	237f      	movne	r3, #127	; 0x7f
 8009054:	e7bc      	b.n	8008fd0 <UART_Start_Receive_IT+0x1c>
 8009056:	6902      	ldr	r2, [r0, #16]
 8009058:	2a00      	cmp	r2, #0
 800905a:	f240 13ff 	movw	r3, #511	; 0x1ff
 800905e:	bf18      	it	ne
 8009060:	23ff      	movne	r3, #255	; 0xff
 8009062:	e7b5      	b.n	8008fd0 <UART_Start_Receive_IT+0x1c>
    huart->RxISR = UART_RxISR_8BIT;
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <UART_Start_Receive_IT+0xc8>)
 8009066:	6683      	str	r3, [r0, #104]	; 0x68
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800906c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	e842 3100 	strex	r1, r3, [r2]
 8009074:	2900      	cmp	r1, #0
 8009076:	d1c8      	bne.n	800900a <UART_Start_Receive_IT+0x56>
 8009078:	e7cf      	b.n	800901a <UART_Start_Receive_IT+0x66>
 800907a:	bf00      	nop
 800907c:	080089cd 	.word	0x080089cd
 8009080:	0800897d 	.word	0x0800897d

08009084 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8009084:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8009088:	2b20      	cmp	r3, #32
 800908a:	d115      	bne.n	80090b8 <HAL_UART_Receive_IT+0x34>
    if ((pData == NULL) || (Size == 0U))
 800908c:	b101      	cbz	r1, 8009090 <HAL_UART_Receive_IT+0xc>
 800908e:	b90a      	cbnz	r2, 8009094 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8009090:	2001      	movs	r0, #1
}
 8009092:	4770      	bx	lr
{
 8009094:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009096:	2300      	movs	r3, #0
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009098:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909a:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800909c:	6863      	ldr	r3, [r4, #4]
 800909e:	021b      	lsls	r3, r3, #8
 80090a0:	d507      	bpl.n	80090b2 <HAL_UART_Receive_IT+0x2e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	e844 3500 	strex	r5, r3, [r4]
 80090ae:	2d00      	cmp	r5, #0
 80090b0:	d1f7      	bne.n	80090a2 <HAL_UART_Receive_IT+0x1e>
}
 80090b2:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80090b4:	f7ff bf7e 	b.w	8008fb4 <UART_Start_Receive_IT>
    return HAL_BUSY;
 80090b8:	2002      	movs	r0, #2
 80090ba:	4770      	bx	lr

080090bc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop

080090c0 <atan2>:
 80090c0:	f000 ba36 	b.w	8009530 <__ieee754_atan2>
 80090c4:	0000      	movs	r0, r0
	...

080090c8 <cos>:
 80090c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ca:	ec53 2b10 	vmov	r2, r3, d0
 80090ce:	4826      	ldr	r0, [pc, #152]	; (8009168 <cos+0xa0>)
 80090d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090d4:	4281      	cmp	r1, r0
 80090d6:	dc06      	bgt.n	80090e6 <cos+0x1e>
 80090d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009160 <cos+0x98>
 80090dc:	b005      	add	sp, #20
 80090de:	f85d eb04 	ldr.w	lr, [sp], #4
 80090e2:	f000 b89d 	b.w	8009220 <__kernel_cos>
 80090e6:	4821      	ldr	r0, [pc, #132]	; (800916c <cos+0xa4>)
 80090e8:	4281      	cmp	r1, r0
 80090ea:	dd09      	ble.n	8009100 <cos+0x38>
 80090ec:	ee10 0a10 	vmov	r0, s0
 80090f0:	4619      	mov	r1, r3
 80090f2:	f7f7 f8c9 	bl	8000288 <__aeabi_dsub>
 80090f6:	ec41 0b10 	vmov	d0, r0, r1
 80090fa:	b005      	add	sp, #20
 80090fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009100:	4668      	mov	r0, sp
 8009102:	f000 fadd 	bl	80096c0 <__ieee754_rem_pio2>
 8009106:	f000 0003 	and.w	r0, r0, #3
 800910a:	2801      	cmp	r0, #1
 800910c:	d00b      	beq.n	8009126 <cos+0x5e>
 800910e:	2802      	cmp	r0, #2
 8009110:	d016      	beq.n	8009140 <cos+0x78>
 8009112:	b9e0      	cbnz	r0, 800914e <cos+0x86>
 8009114:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009118:	ed9d 0b00 	vldr	d0, [sp]
 800911c:	f000 f880 	bl	8009220 <__kernel_cos>
 8009120:	ec51 0b10 	vmov	r0, r1, d0
 8009124:	e7e7      	b.n	80090f6 <cos+0x2e>
 8009126:	ed9d 1b02 	vldr	d1, [sp, #8]
 800912a:	ed9d 0b00 	vldr	d0, [sp]
 800912e:	f000 f93f 	bl	80093b0 <__kernel_sin>
 8009132:	ec53 2b10 	vmov	r2, r3, d0
 8009136:	ee10 0a10 	vmov	r0, s0
 800913a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800913e:	e7da      	b.n	80090f6 <cos+0x2e>
 8009140:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009144:	ed9d 0b00 	vldr	d0, [sp]
 8009148:	f000 f86a 	bl	8009220 <__kernel_cos>
 800914c:	e7f1      	b.n	8009132 <cos+0x6a>
 800914e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009152:	ed9d 0b00 	vldr	d0, [sp]
 8009156:	2001      	movs	r0, #1
 8009158:	f000 f92a 	bl	80093b0 <__kernel_sin>
 800915c:	e7e0      	b.n	8009120 <cos+0x58>
 800915e:	bf00      	nop
	...
 8009168:	3fe921fb 	.word	0x3fe921fb
 800916c:	7fefffff 	.word	0x7fefffff

08009170 <sin>:
 8009170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009172:	ec53 2b10 	vmov	r2, r3, d0
 8009176:	4828      	ldr	r0, [pc, #160]	; (8009218 <sin+0xa8>)
 8009178:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800917c:	4281      	cmp	r1, r0
 800917e:	dc07      	bgt.n	8009190 <sin+0x20>
 8009180:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009210 <sin+0xa0>
 8009184:	2000      	movs	r0, #0
 8009186:	b005      	add	sp, #20
 8009188:	f85d eb04 	ldr.w	lr, [sp], #4
 800918c:	f000 b910 	b.w	80093b0 <__kernel_sin>
 8009190:	4822      	ldr	r0, [pc, #136]	; (800921c <sin+0xac>)
 8009192:	4281      	cmp	r1, r0
 8009194:	dd09      	ble.n	80091aa <sin+0x3a>
 8009196:	ee10 0a10 	vmov	r0, s0
 800919a:	4619      	mov	r1, r3
 800919c:	f7f7 f874 	bl	8000288 <__aeabi_dsub>
 80091a0:	ec41 0b10 	vmov	d0, r0, r1
 80091a4:	b005      	add	sp, #20
 80091a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80091aa:	4668      	mov	r0, sp
 80091ac:	f000 fa88 	bl	80096c0 <__ieee754_rem_pio2>
 80091b0:	f000 0003 	and.w	r0, r0, #3
 80091b4:	2801      	cmp	r0, #1
 80091b6:	d00c      	beq.n	80091d2 <sin+0x62>
 80091b8:	2802      	cmp	r0, #2
 80091ba:	d011      	beq.n	80091e0 <sin+0x70>
 80091bc:	b9f0      	cbnz	r0, 80091fc <sin+0x8c>
 80091be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091c2:	ed9d 0b00 	vldr	d0, [sp]
 80091c6:	2001      	movs	r0, #1
 80091c8:	f000 f8f2 	bl	80093b0 <__kernel_sin>
 80091cc:	ec51 0b10 	vmov	r0, r1, d0
 80091d0:	e7e6      	b.n	80091a0 <sin+0x30>
 80091d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091d6:	ed9d 0b00 	vldr	d0, [sp]
 80091da:	f000 f821 	bl	8009220 <__kernel_cos>
 80091de:	e7f5      	b.n	80091cc <sin+0x5c>
 80091e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091e4:	ed9d 0b00 	vldr	d0, [sp]
 80091e8:	2001      	movs	r0, #1
 80091ea:	f000 f8e1 	bl	80093b0 <__kernel_sin>
 80091ee:	ec53 2b10 	vmov	r2, r3, d0
 80091f2:	ee10 0a10 	vmov	r0, s0
 80091f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80091fa:	e7d1      	b.n	80091a0 <sin+0x30>
 80091fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009200:	ed9d 0b00 	vldr	d0, [sp]
 8009204:	f000 f80c 	bl	8009220 <__kernel_cos>
 8009208:	e7f1      	b.n	80091ee <sin+0x7e>
 800920a:	bf00      	nop
 800920c:	f3af 8000 	nop.w
	...
 8009218:	3fe921fb 	.word	0x3fe921fb
 800921c:	7fefffff 	.word	0x7fefffff

08009220 <__kernel_cos>:
 8009220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	ec57 6b10 	vmov	r6, r7, d0
 8009228:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800922c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009230:	ed8d 1b00 	vstr	d1, [sp]
 8009234:	da07      	bge.n	8009246 <__kernel_cos+0x26>
 8009236:	ee10 0a10 	vmov	r0, s0
 800923a:	4639      	mov	r1, r7
 800923c:	f7f7 fc8c 	bl	8000b58 <__aeabi_d2iz>
 8009240:	2800      	cmp	r0, #0
 8009242:	f000 8088 	beq.w	8009356 <__kernel_cos+0x136>
 8009246:	4632      	mov	r2, r6
 8009248:	463b      	mov	r3, r7
 800924a:	4630      	mov	r0, r6
 800924c:	4639      	mov	r1, r7
 800924e:	f7f7 f9d3 	bl	80005f8 <__aeabi_dmul>
 8009252:	4b51      	ldr	r3, [pc, #324]	; (8009398 <__kernel_cos+0x178>)
 8009254:	2200      	movs	r2, #0
 8009256:	4604      	mov	r4, r0
 8009258:	460d      	mov	r5, r1
 800925a:	f7f7 f9cd 	bl	80005f8 <__aeabi_dmul>
 800925e:	a340      	add	r3, pc, #256	; (adr r3, 8009360 <__kernel_cos+0x140>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	4682      	mov	sl, r0
 8009266:	468b      	mov	fp, r1
 8009268:	4620      	mov	r0, r4
 800926a:	4629      	mov	r1, r5
 800926c:	f7f7 f9c4 	bl	80005f8 <__aeabi_dmul>
 8009270:	a33d      	add	r3, pc, #244	; (adr r3, 8009368 <__kernel_cos+0x148>)
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f7f7 f809 	bl	800028c <__adddf3>
 800927a:	4622      	mov	r2, r4
 800927c:	462b      	mov	r3, r5
 800927e:	f7f7 f9bb 	bl	80005f8 <__aeabi_dmul>
 8009282:	a33b      	add	r3, pc, #236	; (adr r3, 8009370 <__kernel_cos+0x150>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	f7f6 fffe 	bl	8000288 <__aeabi_dsub>
 800928c:	4622      	mov	r2, r4
 800928e:	462b      	mov	r3, r5
 8009290:	f7f7 f9b2 	bl	80005f8 <__aeabi_dmul>
 8009294:	a338      	add	r3, pc, #224	; (adr r3, 8009378 <__kernel_cos+0x158>)
 8009296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929a:	f7f6 fff7 	bl	800028c <__adddf3>
 800929e:	4622      	mov	r2, r4
 80092a0:	462b      	mov	r3, r5
 80092a2:	f7f7 f9a9 	bl	80005f8 <__aeabi_dmul>
 80092a6:	a336      	add	r3, pc, #216	; (adr r3, 8009380 <__kernel_cos+0x160>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	f7f6 ffec 	bl	8000288 <__aeabi_dsub>
 80092b0:	4622      	mov	r2, r4
 80092b2:	462b      	mov	r3, r5
 80092b4:	f7f7 f9a0 	bl	80005f8 <__aeabi_dmul>
 80092b8:	a333      	add	r3, pc, #204	; (adr r3, 8009388 <__kernel_cos+0x168>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f6 ffe5 	bl	800028c <__adddf3>
 80092c2:	4622      	mov	r2, r4
 80092c4:	462b      	mov	r3, r5
 80092c6:	f7f7 f997 	bl	80005f8 <__aeabi_dmul>
 80092ca:	4622      	mov	r2, r4
 80092cc:	462b      	mov	r3, r5
 80092ce:	f7f7 f993 	bl	80005f8 <__aeabi_dmul>
 80092d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092d6:	4604      	mov	r4, r0
 80092d8:	460d      	mov	r5, r1
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f7 f98b 	bl	80005f8 <__aeabi_dmul>
 80092e2:	460b      	mov	r3, r1
 80092e4:	4602      	mov	r2, r0
 80092e6:	4629      	mov	r1, r5
 80092e8:	4620      	mov	r0, r4
 80092ea:	f7f6 ffcd 	bl	8000288 <__aeabi_dsub>
 80092ee:	4b2b      	ldr	r3, [pc, #172]	; (800939c <__kernel_cos+0x17c>)
 80092f0:	4598      	cmp	r8, r3
 80092f2:	4606      	mov	r6, r0
 80092f4:	460f      	mov	r7, r1
 80092f6:	dc10      	bgt.n	800931a <__kernel_cos+0xfa>
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	4650      	mov	r0, sl
 80092fe:	4659      	mov	r1, fp
 8009300:	f7f6 ffc2 	bl	8000288 <__aeabi_dsub>
 8009304:	460b      	mov	r3, r1
 8009306:	4926      	ldr	r1, [pc, #152]	; (80093a0 <__kernel_cos+0x180>)
 8009308:	4602      	mov	r2, r0
 800930a:	2000      	movs	r0, #0
 800930c:	f7f6 ffbc 	bl	8000288 <__aeabi_dsub>
 8009310:	ec41 0b10 	vmov	d0, r0, r1
 8009314:	b003      	add	sp, #12
 8009316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931a:	4b22      	ldr	r3, [pc, #136]	; (80093a4 <__kernel_cos+0x184>)
 800931c:	4920      	ldr	r1, [pc, #128]	; (80093a0 <__kernel_cos+0x180>)
 800931e:	4598      	cmp	r8, r3
 8009320:	bfcc      	ite	gt
 8009322:	4d21      	ldrgt	r5, [pc, #132]	; (80093a8 <__kernel_cos+0x188>)
 8009324:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009328:	2400      	movs	r4, #0
 800932a:	4622      	mov	r2, r4
 800932c:	462b      	mov	r3, r5
 800932e:	2000      	movs	r0, #0
 8009330:	f7f6 ffaa 	bl	8000288 <__aeabi_dsub>
 8009334:	4622      	mov	r2, r4
 8009336:	4680      	mov	r8, r0
 8009338:	4689      	mov	r9, r1
 800933a:	462b      	mov	r3, r5
 800933c:	4650      	mov	r0, sl
 800933e:	4659      	mov	r1, fp
 8009340:	f7f6 ffa2 	bl	8000288 <__aeabi_dsub>
 8009344:	4632      	mov	r2, r6
 8009346:	463b      	mov	r3, r7
 8009348:	f7f6 ff9e 	bl	8000288 <__aeabi_dsub>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4640      	mov	r0, r8
 8009352:	4649      	mov	r1, r9
 8009354:	e7da      	b.n	800930c <__kernel_cos+0xec>
 8009356:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009390 <__kernel_cos+0x170>
 800935a:	e7db      	b.n	8009314 <__kernel_cos+0xf4>
 800935c:	f3af 8000 	nop.w
 8009360:	be8838d4 	.word	0xbe8838d4
 8009364:	bda8fae9 	.word	0xbda8fae9
 8009368:	bdb4b1c4 	.word	0xbdb4b1c4
 800936c:	3e21ee9e 	.word	0x3e21ee9e
 8009370:	809c52ad 	.word	0x809c52ad
 8009374:	3e927e4f 	.word	0x3e927e4f
 8009378:	19cb1590 	.word	0x19cb1590
 800937c:	3efa01a0 	.word	0x3efa01a0
 8009380:	16c15177 	.word	0x16c15177
 8009384:	3f56c16c 	.word	0x3f56c16c
 8009388:	5555554c 	.word	0x5555554c
 800938c:	3fa55555 	.word	0x3fa55555
 8009390:	00000000 	.word	0x00000000
 8009394:	3ff00000 	.word	0x3ff00000
 8009398:	3fe00000 	.word	0x3fe00000
 800939c:	3fd33332 	.word	0x3fd33332
 80093a0:	3ff00000 	.word	0x3ff00000
 80093a4:	3fe90000 	.word	0x3fe90000
 80093a8:	3fd20000 	.word	0x3fd20000
 80093ac:	00000000 	.word	0x00000000

080093b0 <__kernel_sin>:
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	ed2d 8b04 	vpush	{d8-d9}
 80093b8:	eeb0 8a41 	vmov.f32	s16, s2
 80093bc:	eef0 8a61 	vmov.f32	s17, s3
 80093c0:	ec55 4b10 	vmov	r4, r5, d0
 80093c4:	b083      	sub	sp, #12
 80093c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80093ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80093ce:	9001      	str	r0, [sp, #4]
 80093d0:	da06      	bge.n	80093e0 <__kernel_sin+0x30>
 80093d2:	ee10 0a10 	vmov	r0, s0
 80093d6:	4629      	mov	r1, r5
 80093d8:	f7f7 fbbe 	bl	8000b58 <__aeabi_d2iz>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d051      	beq.n	8009484 <__kernel_sin+0xd4>
 80093e0:	4622      	mov	r2, r4
 80093e2:	462b      	mov	r3, r5
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	4682      	mov	sl, r0
 80093ee:	468b      	mov	fp, r1
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4620      	mov	r0, r4
 80093f6:	4629      	mov	r1, r5
 80093f8:	f7f7 f8fe 	bl	80005f8 <__aeabi_dmul>
 80093fc:	a341      	add	r3, pc, #260	; (adr r3, 8009504 <__kernel_sin+0x154>)
 80093fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009402:	4680      	mov	r8, r0
 8009404:	4689      	mov	r9, r1
 8009406:	4650      	mov	r0, sl
 8009408:	4659      	mov	r1, fp
 800940a:	f7f7 f8f5 	bl	80005f8 <__aeabi_dmul>
 800940e:	a33f      	add	r3, pc, #252	; (adr r3, 800950c <__kernel_sin+0x15c>)
 8009410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009414:	f7f6 ff38 	bl	8000288 <__aeabi_dsub>
 8009418:	4652      	mov	r2, sl
 800941a:	465b      	mov	r3, fp
 800941c:	f7f7 f8ec 	bl	80005f8 <__aeabi_dmul>
 8009420:	a33c      	add	r3, pc, #240	; (adr r3, 8009514 <__kernel_sin+0x164>)
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	f7f6 ff31 	bl	800028c <__adddf3>
 800942a:	4652      	mov	r2, sl
 800942c:	465b      	mov	r3, fp
 800942e:	f7f7 f8e3 	bl	80005f8 <__aeabi_dmul>
 8009432:	a33a      	add	r3, pc, #232	; (adr r3, 800951c <__kernel_sin+0x16c>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f7f6 ff26 	bl	8000288 <__aeabi_dsub>
 800943c:	4652      	mov	r2, sl
 800943e:	465b      	mov	r3, fp
 8009440:	f7f7 f8da 	bl	80005f8 <__aeabi_dmul>
 8009444:	a337      	add	r3, pc, #220	; (adr r3, 8009524 <__kernel_sin+0x174>)
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f6 ff1f 	bl	800028c <__adddf3>
 800944e:	9b01      	ldr	r3, [sp, #4]
 8009450:	4606      	mov	r6, r0
 8009452:	460f      	mov	r7, r1
 8009454:	b9eb      	cbnz	r3, 8009492 <__kernel_sin+0xe2>
 8009456:	4602      	mov	r2, r0
 8009458:	460b      	mov	r3, r1
 800945a:	4650      	mov	r0, sl
 800945c:	4659      	mov	r1, fp
 800945e:	f7f7 f8cb 	bl	80005f8 <__aeabi_dmul>
 8009462:	a325      	add	r3, pc, #148	; (adr r3, 80094f8 <__kernel_sin+0x148>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	f7f6 ff0e 	bl	8000288 <__aeabi_dsub>
 800946c:	4642      	mov	r2, r8
 800946e:	464b      	mov	r3, r9
 8009470:	f7f7 f8c2 	bl	80005f8 <__aeabi_dmul>
 8009474:	4602      	mov	r2, r0
 8009476:	460b      	mov	r3, r1
 8009478:	4620      	mov	r0, r4
 800947a:	4629      	mov	r1, r5
 800947c:	f7f6 ff06 	bl	800028c <__adddf3>
 8009480:	4604      	mov	r4, r0
 8009482:	460d      	mov	r5, r1
 8009484:	ec45 4b10 	vmov	d0, r4, r5
 8009488:	b003      	add	sp, #12
 800948a:	ecbd 8b04 	vpop	{d8-d9}
 800948e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009492:	4b1b      	ldr	r3, [pc, #108]	; (8009500 <__kernel_sin+0x150>)
 8009494:	ec51 0b18 	vmov	r0, r1, d8
 8009498:	2200      	movs	r2, #0
 800949a:	f7f7 f8ad 	bl	80005f8 <__aeabi_dmul>
 800949e:	4632      	mov	r2, r6
 80094a0:	ec41 0b19 	vmov	d9, r0, r1
 80094a4:	463b      	mov	r3, r7
 80094a6:	4640      	mov	r0, r8
 80094a8:	4649      	mov	r1, r9
 80094aa:	f7f7 f8a5 	bl	80005f8 <__aeabi_dmul>
 80094ae:	4602      	mov	r2, r0
 80094b0:	460b      	mov	r3, r1
 80094b2:	ec51 0b19 	vmov	r0, r1, d9
 80094b6:	f7f6 fee7 	bl	8000288 <__aeabi_dsub>
 80094ba:	4652      	mov	r2, sl
 80094bc:	465b      	mov	r3, fp
 80094be:	f7f7 f89b 	bl	80005f8 <__aeabi_dmul>
 80094c2:	ec53 2b18 	vmov	r2, r3, d8
 80094c6:	f7f6 fedf 	bl	8000288 <__aeabi_dsub>
 80094ca:	a30b      	add	r3, pc, #44	; (adr r3, 80094f8 <__kernel_sin+0x148>)
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	4606      	mov	r6, r0
 80094d2:	460f      	mov	r7, r1
 80094d4:	4640      	mov	r0, r8
 80094d6:	4649      	mov	r1, r9
 80094d8:	f7f7 f88e 	bl	80005f8 <__aeabi_dmul>
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	4630      	mov	r0, r6
 80094e2:	4639      	mov	r1, r7
 80094e4:	f7f6 fed2 	bl	800028c <__adddf3>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4620      	mov	r0, r4
 80094ee:	4629      	mov	r1, r5
 80094f0:	f7f6 feca 	bl	8000288 <__aeabi_dsub>
 80094f4:	e7c4      	b.n	8009480 <__kernel_sin+0xd0>
 80094f6:	bf00      	nop
 80094f8:	55555549 	.word	0x55555549
 80094fc:	3fc55555 	.word	0x3fc55555
 8009500:	3fe00000 	.word	0x3fe00000
 8009504:	5acfd57c 	.word	0x5acfd57c
 8009508:	3de5d93a 	.word	0x3de5d93a
 800950c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009510:	3e5ae5e6 	.word	0x3e5ae5e6
 8009514:	57b1fe7d 	.word	0x57b1fe7d
 8009518:	3ec71de3 	.word	0x3ec71de3
 800951c:	19c161d5 	.word	0x19c161d5
 8009520:	3f2a01a0 	.word	0x3f2a01a0
 8009524:	1110f8a6 	.word	0x1110f8a6
 8009528:	3f811111 	.word	0x3f811111
 800952c:	00000000 	.word	0x00000000

08009530 <__ieee754_atan2>:
 8009530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009534:	ec57 6b11 	vmov	r6, r7, d1
 8009538:	4273      	negs	r3, r6
 800953a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80096b8 <__ieee754_atan2+0x188>
 800953e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009542:	4333      	orrs	r3, r6
 8009544:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009548:	4543      	cmp	r3, r8
 800954a:	ec51 0b10 	vmov	r0, r1, d0
 800954e:	ee11 5a10 	vmov	r5, s2
 8009552:	d80a      	bhi.n	800956a <__ieee754_atan2+0x3a>
 8009554:	4244      	negs	r4, r0
 8009556:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800955a:	4304      	orrs	r4, r0
 800955c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009560:	4544      	cmp	r4, r8
 8009562:	ee10 9a10 	vmov	r9, s0
 8009566:	468e      	mov	lr, r1
 8009568:	d907      	bls.n	800957a <__ieee754_atan2+0x4a>
 800956a:	4632      	mov	r2, r6
 800956c:	463b      	mov	r3, r7
 800956e:	f7f6 fe8d 	bl	800028c <__adddf3>
 8009572:	ec41 0b10 	vmov	d0, r0, r1
 8009576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800957a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800957e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009582:	4334      	orrs	r4, r6
 8009584:	d103      	bne.n	800958e <__ieee754_atan2+0x5e>
 8009586:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800958a:	f000 baa1 	b.w	8009ad0 <atan>
 800958e:	17bc      	asrs	r4, r7, #30
 8009590:	f004 0402 	and.w	r4, r4, #2
 8009594:	ea53 0909 	orrs.w	r9, r3, r9
 8009598:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800959c:	d107      	bne.n	80095ae <__ieee754_atan2+0x7e>
 800959e:	2c02      	cmp	r4, #2
 80095a0:	d05f      	beq.n	8009662 <__ieee754_atan2+0x132>
 80095a2:	2c03      	cmp	r4, #3
 80095a4:	d1e5      	bne.n	8009572 <__ieee754_atan2+0x42>
 80095a6:	a140      	add	r1, pc, #256	; (adr r1, 80096a8 <__ieee754_atan2+0x178>)
 80095a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ac:	e7e1      	b.n	8009572 <__ieee754_atan2+0x42>
 80095ae:	4315      	orrs	r5, r2
 80095b0:	d106      	bne.n	80095c0 <__ieee754_atan2+0x90>
 80095b2:	f1be 0f00 	cmp.w	lr, #0
 80095b6:	da5f      	bge.n	8009678 <__ieee754_atan2+0x148>
 80095b8:	a13d      	add	r1, pc, #244	; (adr r1, 80096b0 <__ieee754_atan2+0x180>)
 80095ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095be:	e7d8      	b.n	8009572 <__ieee754_atan2+0x42>
 80095c0:	4542      	cmp	r2, r8
 80095c2:	d10f      	bne.n	80095e4 <__ieee754_atan2+0xb4>
 80095c4:	4293      	cmp	r3, r2
 80095c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80095ca:	d107      	bne.n	80095dc <__ieee754_atan2+0xac>
 80095cc:	2c02      	cmp	r4, #2
 80095ce:	d84c      	bhi.n	800966a <__ieee754_atan2+0x13a>
 80095d0:	4b33      	ldr	r3, [pc, #204]	; (80096a0 <__ieee754_atan2+0x170>)
 80095d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80095da:	e7ca      	b.n	8009572 <__ieee754_atan2+0x42>
 80095dc:	2c02      	cmp	r4, #2
 80095de:	d848      	bhi.n	8009672 <__ieee754_atan2+0x142>
 80095e0:	4b30      	ldr	r3, [pc, #192]	; (80096a4 <__ieee754_atan2+0x174>)
 80095e2:	e7f6      	b.n	80095d2 <__ieee754_atan2+0xa2>
 80095e4:	4543      	cmp	r3, r8
 80095e6:	d0e4      	beq.n	80095b2 <__ieee754_atan2+0x82>
 80095e8:	1a9b      	subs	r3, r3, r2
 80095ea:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80095ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 80095f2:	da1e      	bge.n	8009632 <__ieee754_atan2+0x102>
 80095f4:	2f00      	cmp	r7, #0
 80095f6:	da01      	bge.n	80095fc <__ieee754_atan2+0xcc>
 80095f8:	323c      	adds	r2, #60	; 0x3c
 80095fa:	db1e      	blt.n	800963a <__ieee754_atan2+0x10a>
 80095fc:	4632      	mov	r2, r6
 80095fe:	463b      	mov	r3, r7
 8009600:	f7f7 f924 	bl	800084c <__aeabi_ddiv>
 8009604:	ec41 0b10 	vmov	d0, r0, r1
 8009608:	f000 fc02 	bl	8009e10 <fabs>
 800960c:	f000 fa60 	bl	8009ad0 <atan>
 8009610:	ec51 0b10 	vmov	r0, r1, d0
 8009614:	2c01      	cmp	r4, #1
 8009616:	d013      	beq.n	8009640 <__ieee754_atan2+0x110>
 8009618:	2c02      	cmp	r4, #2
 800961a:	d015      	beq.n	8009648 <__ieee754_atan2+0x118>
 800961c:	2c00      	cmp	r4, #0
 800961e:	d0a8      	beq.n	8009572 <__ieee754_atan2+0x42>
 8009620:	a317      	add	r3, pc, #92	; (adr r3, 8009680 <__ieee754_atan2+0x150>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f6 fe2f 	bl	8000288 <__aeabi_dsub>
 800962a:	a317      	add	r3, pc, #92	; (adr r3, 8009688 <__ieee754_atan2+0x158>)
 800962c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009630:	e014      	b.n	800965c <__ieee754_atan2+0x12c>
 8009632:	a117      	add	r1, pc, #92	; (adr r1, 8009690 <__ieee754_atan2+0x160>)
 8009634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009638:	e7ec      	b.n	8009614 <__ieee754_atan2+0xe4>
 800963a:	2000      	movs	r0, #0
 800963c:	2100      	movs	r1, #0
 800963e:	e7e9      	b.n	8009614 <__ieee754_atan2+0xe4>
 8009640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009644:	4619      	mov	r1, r3
 8009646:	e794      	b.n	8009572 <__ieee754_atan2+0x42>
 8009648:	a30d      	add	r3, pc, #52	; (adr r3, 8009680 <__ieee754_atan2+0x150>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 fe1b 	bl	8000288 <__aeabi_dsub>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	a10c      	add	r1, pc, #48	; (adr r1, 8009688 <__ieee754_atan2+0x158>)
 8009658:	e9d1 0100 	ldrd	r0, r1, [r1]
 800965c:	f7f6 fe14 	bl	8000288 <__aeabi_dsub>
 8009660:	e787      	b.n	8009572 <__ieee754_atan2+0x42>
 8009662:	a109      	add	r1, pc, #36	; (adr r1, 8009688 <__ieee754_atan2+0x158>)
 8009664:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009668:	e783      	b.n	8009572 <__ieee754_atan2+0x42>
 800966a:	a10b      	add	r1, pc, #44	; (adr r1, 8009698 <__ieee754_atan2+0x168>)
 800966c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009670:	e77f      	b.n	8009572 <__ieee754_atan2+0x42>
 8009672:	2000      	movs	r0, #0
 8009674:	2100      	movs	r1, #0
 8009676:	e77c      	b.n	8009572 <__ieee754_atan2+0x42>
 8009678:	a105      	add	r1, pc, #20	; (adr r1, 8009690 <__ieee754_atan2+0x160>)
 800967a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800967e:	e778      	b.n	8009572 <__ieee754_atan2+0x42>
 8009680:	33145c07 	.word	0x33145c07
 8009684:	3ca1a626 	.word	0x3ca1a626
 8009688:	54442d18 	.word	0x54442d18
 800968c:	400921fb 	.word	0x400921fb
 8009690:	54442d18 	.word	0x54442d18
 8009694:	3ff921fb 	.word	0x3ff921fb
 8009698:	54442d18 	.word	0x54442d18
 800969c:	3fe921fb 	.word	0x3fe921fb
 80096a0:	0800da38 	.word	0x0800da38
 80096a4:	0800da50 	.word	0x0800da50
 80096a8:	54442d18 	.word	0x54442d18
 80096ac:	c00921fb 	.word	0xc00921fb
 80096b0:	54442d18 	.word	0x54442d18
 80096b4:	bff921fb 	.word	0xbff921fb
 80096b8:	7ff00000 	.word	0x7ff00000
 80096bc:	00000000 	.word	0x00000000

080096c0 <__ieee754_rem_pio2>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	ed2d 8b02 	vpush	{d8}
 80096c8:	ec55 4b10 	vmov	r4, r5, d0
 80096cc:	4bca      	ldr	r3, [pc, #808]	; (80099f8 <__ieee754_rem_pio2+0x338>)
 80096ce:	b08b      	sub	sp, #44	; 0x2c
 80096d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80096d4:	4598      	cmp	r8, r3
 80096d6:	4682      	mov	sl, r0
 80096d8:	9502      	str	r5, [sp, #8]
 80096da:	dc08      	bgt.n	80096ee <__ieee754_rem_pio2+0x2e>
 80096dc:	2200      	movs	r2, #0
 80096de:	2300      	movs	r3, #0
 80096e0:	ed80 0b00 	vstr	d0, [r0]
 80096e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80096e8:	f04f 0b00 	mov.w	fp, #0
 80096ec:	e028      	b.n	8009740 <__ieee754_rem_pio2+0x80>
 80096ee:	4bc3      	ldr	r3, [pc, #780]	; (80099fc <__ieee754_rem_pio2+0x33c>)
 80096f0:	4598      	cmp	r8, r3
 80096f2:	dc78      	bgt.n	80097e6 <__ieee754_rem_pio2+0x126>
 80096f4:	9b02      	ldr	r3, [sp, #8]
 80096f6:	4ec2      	ldr	r6, [pc, #776]	; (8009a00 <__ieee754_rem_pio2+0x340>)
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	ee10 0a10 	vmov	r0, s0
 80096fe:	a3b0      	add	r3, pc, #704	; (adr r3, 80099c0 <__ieee754_rem_pio2+0x300>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	4629      	mov	r1, r5
 8009706:	dd39      	ble.n	800977c <__ieee754_rem_pio2+0xbc>
 8009708:	f7f6 fdbe 	bl	8000288 <__aeabi_dsub>
 800970c:	45b0      	cmp	r8, r6
 800970e:	4604      	mov	r4, r0
 8009710:	460d      	mov	r5, r1
 8009712:	d01b      	beq.n	800974c <__ieee754_rem_pio2+0x8c>
 8009714:	a3ac      	add	r3, pc, #688	; (adr r3, 80099c8 <__ieee754_rem_pio2+0x308>)
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	f7f6 fdb5 	bl	8000288 <__aeabi_dsub>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	e9ca 2300 	strd	r2, r3, [sl]
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f7f6 fdad 	bl	8000288 <__aeabi_dsub>
 800972e:	a3a6      	add	r3, pc, #664	; (adr r3, 80099c8 <__ieee754_rem_pio2+0x308>)
 8009730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009734:	f7f6 fda8 	bl	8000288 <__aeabi_dsub>
 8009738:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800973c:	f04f 0b01 	mov.w	fp, #1
 8009740:	4658      	mov	r0, fp
 8009742:	b00b      	add	sp, #44	; 0x2c
 8009744:	ecbd 8b02 	vpop	{d8}
 8009748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974c:	a3a0      	add	r3, pc, #640	; (adr r3, 80099d0 <__ieee754_rem_pio2+0x310>)
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	f7f6 fd99 	bl	8000288 <__aeabi_dsub>
 8009756:	a3a0      	add	r3, pc, #640	; (adr r3, 80099d8 <__ieee754_rem_pio2+0x318>)
 8009758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975c:	4604      	mov	r4, r0
 800975e:	460d      	mov	r5, r1
 8009760:	f7f6 fd92 	bl	8000288 <__aeabi_dsub>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	e9ca 2300 	strd	r2, r3, [sl]
 800976c:	4620      	mov	r0, r4
 800976e:	4629      	mov	r1, r5
 8009770:	f7f6 fd8a 	bl	8000288 <__aeabi_dsub>
 8009774:	a398      	add	r3, pc, #608	; (adr r3, 80099d8 <__ieee754_rem_pio2+0x318>)
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	e7db      	b.n	8009734 <__ieee754_rem_pio2+0x74>
 800977c:	f7f6 fd86 	bl	800028c <__adddf3>
 8009780:	45b0      	cmp	r8, r6
 8009782:	4604      	mov	r4, r0
 8009784:	460d      	mov	r5, r1
 8009786:	d016      	beq.n	80097b6 <__ieee754_rem_pio2+0xf6>
 8009788:	a38f      	add	r3, pc, #572	; (adr r3, 80099c8 <__ieee754_rem_pio2+0x308>)
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f6 fd7d 	bl	800028c <__adddf3>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	e9ca 2300 	strd	r2, r3, [sl]
 800979a:	4620      	mov	r0, r4
 800979c:	4629      	mov	r1, r5
 800979e:	f7f6 fd73 	bl	8000288 <__aeabi_dsub>
 80097a2:	a389      	add	r3, pc, #548	; (adr r3, 80099c8 <__ieee754_rem_pio2+0x308>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 fd70 	bl	800028c <__adddf3>
 80097ac:	f04f 3bff 	mov.w	fp, #4294967295
 80097b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80097b4:	e7c4      	b.n	8009740 <__ieee754_rem_pio2+0x80>
 80097b6:	a386      	add	r3, pc, #536	; (adr r3, 80099d0 <__ieee754_rem_pio2+0x310>)
 80097b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097bc:	f7f6 fd66 	bl	800028c <__adddf3>
 80097c0:	a385      	add	r3, pc, #532	; (adr r3, 80099d8 <__ieee754_rem_pio2+0x318>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	4604      	mov	r4, r0
 80097c8:	460d      	mov	r5, r1
 80097ca:	f7f6 fd5f 	bl	800028c <__adddf3>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	e9ca 2300 	strd	r2, r3, [sl]
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f6 fd55 	bl	8000288 <__aeabi_dsub>
 80097de:	a37e      	add	r3, pc, #504	; (adr r3, 80099d8 <__ieee754_rem_pio2+0x318>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	e7e0      	b.n	80097a8 <__ieee754_rem_pio2+0xe8>
 80097e6:	4b87      	ldr	r3, [pc, #540]	; (8009a04 <__ieee754_rem_pio2+0x344>)
 80097e8:	4598      	cmp	r8, r3
 80097ea:	f300 80d8 	bgt.w	800999e <__ieee754_rem_pio2+0x2de>
 80097ee:	f000 fb0f 	bl	8009e10 <fabs>
 80097f2:	ec55 4b10 	vmov	r4, r5, d0
 80097f6:	ee10 0a10 	vmov	r0, s0
 80097fa:	a379      	add	r3, pc, #484	; (adr r3, 80099e0 <__ieee754_rem_pio2+0x320>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	4629      	mov	r1, r5
 8009802:	f7f6 fef9 	bl	80005f8 <__aeabi_dmul>
 8009806:	4b80      	ldr	r3, [pc, #512]	; (8009a08 <__ieee754_rem_pio2+0x348>)
 8009808:	2200      	movs	r2, #0
 800980a:	f7f6 fd3f 	bl	800028c <__adddf3>
 800980e:	f7f7 f9a3 	bl	8000b58 <__aeabi_d2iz>
 8009812:	4683      	mov	fp, r0
 8009814:	f7f6 fe86 	bl	8000524 <__aeabi_i2d>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	ec43 2b18 	vmov	d8, r2, r3
 8009820:	a367      	add	r3, pc, #412	; (adr r3, 80099c0 <__ieee754_rem_pio2+0x300>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 fee7 	bl	80005f8 <__aeabi_dmul>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	4620      	mov	r0, r4
 8009830:	4629      	mov	r1, r5
 8009832:	f7f6 fd29 	bl	8000288 <__aeabi_dsub>
 8009836:	a364      	add	r3, pc, #400	; (adr r3, 80099c8 <__ieee754_rem_pio2+0x308>)
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	4606      	mov	r6, r0
 800983e:	460f      	mov	r7, r1
 8009840:	ec51 0b18 	vmov	r0, r1, d8
 8009844:	f7f6 fed8 	bl	80005f8 <__aeabi_dmul>
 8009848:	f1bb 0f1f 	cmp.w	fp, #31
 800984c:	4604      	mov	r4, r0
 800984e:	460d      	mov	r5, r1
 8009850:	dc0d      	bgt.n	800986e <__ieee754_rem_pio2+0x1ae>
 8009852:	4b6e      	ldr	r3, [pc, #440]	; (8009a0c <__ieee754_rem_pio2+0x34c>)
 8009854:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800985c:	4543      	cmp	r3, r8
 800985e:	d006      	beq.n	800986e <__ieee754_rem_pio2+0x1ae>
 8009860:	4622      	mov	r2, r4
 8009862:	462b      	mov	r3, r5
 8009864:	4630      	mov	r0, r6
 8009866:	4639      	mov	r1, r7
 8009868:	f7f6 fd0e 	bl	8000288 <__aeabi_dsub>
 800986c:	e00e      	b.n	800988c <__ieee754_rem_pio2+0x1cc>
 800986e:	462b      	mov	r3, r5
 8009870:	4622      	mov	r2, r4
 8009872:	4630      	mov	r0, r6
 8009874:	4639      	mov	r1, r7
 8009876:	f7f6 fd07 	bl	8000288 <__aeabi_dsub>
 800987a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800987e:	9303      	str	r3, [sp, #12]
 8009880:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009884:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009888:	2b10      	cmp	r3, #16
 800988a:	dc02      	bgt.n	8009892 <__ieee754_rem_pio2+0x1d2>
 800988c:	e9ca 0100 	strd	r0, r1, [sl]
 8009890:	e039      	b.n	8009906 <__ieee754_rem_pio2+0x246>
 8009892:	a34f      	add	r3, pc, #316	; (adr r3, 80099d0 <__ieee754_rem_pio2+0x310>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	ec51 0b18 	vmov	r0, r1, d8
 800989c:	f7f6 feac 	bl	80005f8 <__aeabi_dmul>
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4630      	mov	r0, r6
 80098aa:	4639      	mov	r1, r7
 80098ac:	f7f6 fcec 	bl	8000288 <__aeabi_dsub>
 80098b0:	4602      	mov	r2, r0
 80098b2:	460b      	mov	r3, r1
 80098b4:	4680      	mov	r8, r0
 80098b6:	4689      	mov	r9, r1
 80098b8:	4630      	mov	r0, r6
 80098ba:	4639      	mov	r1, r7
 80098bc:	f7f6 fce4 	bl	8000288 <__aeabi_dsub>
 80098c0:	4622      	mov	r2, r4
 80098c2:	462b      	mov	r3, r5
 80098c4:	f7f6 fce0 	bl	8000288 <__aeabi_dsub>
 80098c8:	a343      	add	r3, pc, #268	; (adr r3, 80099d8 <__ieee754_rem_pio2+0x318>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	4604      	mov	r4, r0
 80098d0:	460d      	mov	r5, r1
 80098d2:	ec51 0b18 	vmov	r0, r1, d8
 80098d6:	f7f6 fe8f 	bl	80005f8 <__aeabi_dmul>
 80098da:	4622      	mov	r2, r4
 80098dc:	462b      	mov	r3, r5
 80098de:	f7f6 fcd3 	bl	8000288 <__aeabi_dsub>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4604      	mov	r4, r0
 80098e8:	460d      	mov	r5, r1
 80098ea:	4640      	mov	r0, r8
 80098ec:	4649      	mov	r1, r9
 80098ee:	f7f6 fccb 	bl	8000288 <__aeabi_dsub>
 80098f2:	9a03      	ldr	r2, [sp, #12]
 80098f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	2b31      	cmp	r3, #49	; 0x31
 80098fc:	dc24      	bgt.n	8009948 <__ieee754_rem_pio2+0x288>
 80098fe:	e9ca 0100 	strd	r0, r1, [sl]
 8009902:	4646      	mov	r6, r8
 8009904:	464f      	mov	r7, r9
 8009906:	e9da 8900 	ldrd	r8, r9, [sl]
 800990a:	4630      	mov	r0, r6
 800990c:	4642      	mov	r2, r8
 800990e:	464b      	mov	r3, r9
 8009910:	4639      	mov	r1, r7
 8009912:	f7f6 fcb9 	bl	8000288 <__aeabi_dsub>
 8009916:	462b      	mov	r3, r5
 8009918:	4622      	mov	r2, r4
 800991a:	f7f6 fcb5 	bl	8000288 <__aeabi_dsub>
 800991e:	9b02      	ldr	r3, [sp, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009926:	f6bf af0b 	bge.w	8009740 <__ieee754_rem_pio2+0x80>
 800992a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800992e:	f8ca 3004 	str.w	r3, [sl, #4]
 8009932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009936:	f8ca 8000 	str.w	r8, [sl]
 800993a:	f8ca 0008 	str.w	r0, [sl, #8]
 800993e:	f8ca 300c 	str.w	r3, [sl, #12]
 8009942:	f1cb 0b00 	rsb	fp, fp, #0
 8009946:	e6fb      	b.n	8009740 <__ieee754_rem_pio2+0x80>
 8009948:	a327      	add	r3, pc, #156	; (adr r3, 80099e8 <__ieee754_rem_pio2+0x328>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	ec51 0b18 	vmov	r0, r1, d8
 8009952:	f7f6 fe51 	bl	80005f8 <__aeabi_dmul>
 8009956:	4604      	mov	r4, r0
 8009958:	460d      	mov	r5, r1
 800995a:	4602      	mov	r2, r0
 800995c:	460b      	mov	r3, r1
 800995e:	4640      	mov	r0, r8
 8009960:	4649      	mov	r1, r9
 8009962:	f7f6 fc91 	bl	8000288 <__aeabi_dsub>
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	4606      	mov	r6, r0
 800996c:	460f      	mov	r7, r1
 800996e:	4640      	mov	r0, r8
 8009970:	4649      	mov	r1, r9
 8009972:	f7f6 fc89 	bl	8000288 <__aeabi_dsub>
 8009976:	4622      	mov	r2, r4
 8009978:	462b      	mov	r3, r5
 800997a:	f7f6 fc85 	bl	8000288 <__aeabi_dsub>
 800997e:	a31c      	add	r3, pc, #112	; (adr r3, 80099f0 <__ieee754_rem_pio2+0x330>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	4604      	mov	r4, r0
 8009986:	460d      	mov	r5, r1
 8009988:	ec51 0b18 	vmov	r0, r1, d8
 800998c:	f7f6 fe34 	bl	80005f8 <__aeabi_dmul>
 8009990:	4622      	mov	r2, r4
 8009992:	462b      	mov	r3, r5
 8009994:	f7f6 fc78 	bl	8000288 <__aeabi_dsub>
 8009998:	4604      	mov	r4, r0
 800999a:	460d      	mov	r5, r1
 800999c:	e760      	b.n	8009860 <__ieee754_rem_pio2+0x1a0>
 800999e:	4b1c      	ldr	r3, [pc, #112]	; (8009a10 <__ieee754_rem_pio2+0x350>)
 80099a0:	4598      	cmp	r8, r3
 80099a2:	dd37      	ble.n	8009a14 <__ieee754_rem_pio2+0x354>
 80099a4:	ee10 2a10 	vmov	r2, s0
 80099a8:	462b      	mov	r3, r5
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7f6 fc6b 	bl	8000288 <__aeabi_dsub>
 80099b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80099b6:	e9ca 0100 	strd	r0, r1, [sl]
 80099ba:	e695      	b.n	80096e8 <__ieee754_rem_pio2+0x28>
 80099bc:	f3af 8000 	nop.w
 80099c0:	54400000 	.word	0x54400000
 80099c4:	3ff921fb 	.word	0x3ff921fb
 80099c8:	1a626331 	.word	0x1a626331
 80099cc:	3dd0b461 	.word	0x3dd0b461
 80099d0:	1a600000 	.word	0x1a600000
 80099d4:	3dd0b461 	.word	0x3dd0b461
 80099d8:	2e037073 	.word	0x2e037073
 80099dc:	3ba3198a 	.word	0x3ba3198a
 80099e0:	6dc9c883 	.word	0x6dc9c883
 80099e4:	3fe45f30 	.word	0x3fe45f30
 80099e8:	2e000000 	.word	0x2e000000
 80099ec:	3ba3198a 	.word	0x3ba3198a
 80099f0:	252049c1 	.word	0x252049c1
 80099f4:	397b839a 	.word	0x397b839a
 80099f8:	3fe921fb 	.word	0x3fe921fb
 80099fc:	4002d97b 	.word	0x4002d97b
 8009a00:	3ff921fb 	.word	0x3ff921fb
 8009a04:	413921fb 	.word	0x413921fb
 8009a08:	3fe00000 	.word	0x3fe00000
 8009a0c:	0800da68 	.word	0x0800da68
 8009a10:	7fefffff 	.word	0x7fefffff
 8009a14:	ea4f 5628 	mov.w	r6, r8, asr #20
 8009a18:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8009a1c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8009a20:	4620      	mov	r0, r4
 8009a22:	460d      	mov	r5, r1
 8009a24:	f7f7 f898 	bl	8000b58 <__aeabi_d2iz>
 8009a28:	f7f6 fd7c 	bl	8000524 <__aeabi_i2d>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4620      	mov	r0, r4
 8009a32:	4629      	mov	r1, r5
 8009a34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a38:	f7f6 fc26 	bl	8000288 <__aeabi_dsub>
 8009a3c:	4b21      	ldr	r3, [pc, #132]	; (8009ac4 <__ieee754_rem_pio2+0x404>)
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f7f6 fdda 	bl	80005f8 <__aeabi_dmul>
 8009a44:	460d      	mov	r5, r1
 8009a46:	4604      	mov	r4, r0
 8009a48:	f7f7 f886 	bl	8000b58 <__aeabi_d2iz>
 8009a4c:	f7f6 fd6a 	bl	8000524 <__aeabi_i2d>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4620      	mov	r0, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a5c:	f7f6 fc14 	bl	8000288 <__aeabi_dsub>
 8009a60:	4b18      	ldr	r3, [pc, #96]	; (8009ac4 <__ieee754_rem_pio2+0x404>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	f7f6 fdc8 	bl	80005f8 <__aeabi_dmul>
 8009a68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a6c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009a70:	2703      	movs	r7, #3
 8009a72:	2400      	movs	r4, #0
 8009a74:	2500      	movs	r5, #0
 8009a76:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	46b9      	mov	r9, r7
 8009a80:	3f01      	subs	r7, #1
 8009a82:	f7f7 f821 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a86:	2800      	cmp	r0, #0
 8009a88:	d1f5      	bne.n	8009a76 <__ieee754_rem_pio2+0x3b6>
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <__ieee754_rem_pio2+0x408>)
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	2302      	movs	r3, #2
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	4632      	mov	r2, r6
 8009a94:	464b      	mov	r3, r9
 8009a96:	4651      	mov	r1, sl
 8009a98:	a804      	add	r0, sp, #16
 8009a9a:	f000 f9c5 	bl	8009e28 <__kernel_rem_pio2>
 8009a9e:	9b02      	ldr	r3, [sp, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	4683      	mov	fp, r0
 8009aa4:	f6bf ae4c 	bge.w	8009740 <__ieee754_rem_pio2+0x80>
 8009aa8:	e9da 2100 	ldrd	r2, r1, [sl]
 8009aac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ab0:	e9ca 2300 	strd	r2, r3, [sl]
 8009ab4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009ab8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009abc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009ac0:	e73f      	b.n	8009942 <__ieee754_rem_pio2+0x282>
 8009ac2:	bf00      	nop
 8009ac4:	41700000 	.word	0x41700000
 8009ac8:	0800dae8 	.word	0x0800dae8
 8009acc:	00000000 	.word	0x00000000

08009ad0 <atan>:
 8009ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	ec55 4b10 	vmov	r4, r5, d0
 8009ad8:	4bc3      	ldr	r3, [pc, #780]	; (8009de8 <atan+0x318>)
 8009ada:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ade:	429e      	cmp	r6, r3
 8009ae0:	46ab      	mov	fp, r5
 8009ae2:	dd18      	ble.n	8009b16 <atan+0x46>
 8009ae4:	4bc1      	ldr	r3, [pc, #772]	; (8009dec <atan+0x31c>)
 8009ae6:	429e      	cmp	r6, r3
 8009ae8:	dc01      	bgt.n	8009aee <atan+0x1e>
 8009aea:	d109      	bne.n	8009b00 <atan+0x30>
 8009aec:	b144      	cbz	r4, 8009b00 <atan+0x30>
 8009aee:	4622      	mov	r2, r4
 8009af0:	462b      	mov	r3, r5
 8009af2:	4620      	mov	r0, r4
 8009af4:	4629      	mov	r1, r5
 8009af6:	f7f6 fbc9 	bl	800028c <__adddf3>
 8009afa:	4604      	mov	r4, r0
 8009afc:	460d      	mov	r5, r1
 8009afe:	e006      	b.n	8009b0e <atan+0x3e>
 8009b00:	f1bb 0f00 	cmp.w	fp, #0
 8009b04:	f300 8131 	bgt.w	8009d6a <atan+0x29a>
 8009b08:	a59b      	add	r5, pc, #620	; (adr r5, 8009d78 <atan+0x2a8>)
 8009b0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b0e:	ec45 4b10 	vmov	d0, r4, r5
 8009b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b16:	4bb6      	ldr	r3, [pc, #728]	; (8009df0 <atan+0x320>)
 8009b18:	429e      	cmp	r6, r3
 8009b1a:	dc14      	bgt.n	8009b46 <atan+0x76>
 8009b1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009b20:	429e      	cmp	r6, r3
 8009b22:	dc0d      	bgt.n	8009b40 <atan+0x70>
 8009b24:	a396      	add	r3, pc, #600	; (adr r3, 8009d80 <atan+0x2b0>)
 8009b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2a:	ee10 0a10 	vmov	r0, s0
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f7f6 fbac 	bl	800028c <__adddf3>
 8009b34:	4baf      	ldr	r3, [pc, #700]	; (8009df4 <atan+0x324>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	f7f6 ffee 	bl	8000b18 <__aeabi_dcmpgt>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d1e6      	bne.n	8009b0e <atan+0x3e>
 8009b40:	f04f 3aff 	mov.w	sl, #4294967295
 8009b44:	e02b      	b.n	8009b9e <atan+0xce>
 8009b46:	f000 f963 	bl	8009e10 <fabs>
 8009b4a:	4bab      	ldr	r3, [pc, #684]	; (8009df8 <atan+0x328>)
 8009b4c:	429e      	cmp	r6, r3
 8009b4e:	ec55 4b10 	vmov	r4, r5, d0
 8009b52:	f300 80bf 	bgt.w	8009cd4 <atan+0x204>
 8009b56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009b5a:	429e      	cmp	r6, r3
 8009b5c:	f300 80a0 	bgt.w	8009ca0 <atan+0x1d0>
 8009b60:	ee10 2a10 	vmov	r2, s0
 8009b64:	ee10 0a10 	vmov	r0, s0
 8009b68:	462b      	mov	r3, r5
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	f7f6 fb8e 	bl	800028c <__adddf3>
 8009b70:	4ba0      	ldr	r3, [pc, #640]	; (8009df4 <atan+0x324>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	f7f6 fb88 	bl	8000288 <__aeabi_dsub>
 8009b78:	2200      	movs	r2, #0
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460f      	mov	r7, r1
 8009b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b82:	4620      	mov	r0, r4
 8009b84:	4629      	mov	r1, r5
 8009b86:	f7f6 fb81 	bl	800028c <__adddf3>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4630      	mov	r0, r6
 8009b90:	4639      	mov	r1, r7
 8009b92:	f7f6 fe5b 	bl	800084c <__aeabi_ddiv>
 8009b96:	f04f 0a00 	mov.w	sl, #0
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	460d      	mov	r5, r1
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	462b      	mov	r3, r5
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	4629      	mov	r1, r5
 8009ba6:	f7f6 fd27 	bl	80005f8 <__aeabi_dmul>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4680      	mov	r8, r0
 8009bb0:	4689      	mov	r9, r1
 8009bb2:	f7f6 fd21 	bl	80005f8 <__aeabi_dmul>
 8009bb6:	a374      	add	r3, pc, #464	; (adr r3, 8009d88 <atan+0x2b8>)
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	460f      	mov	r7, r1
 8009bc0:	f7f6 fd1a 	bl	80005f8 <__aeabi_dmul>
 8009bc4:	a372      	add	r3, pc, #456	; (adr r3, 8009d90 <atan+0x2c0>)
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	f7f6 fb5f 	bl	800028c <__adddf3>
 8009bce:	4632      	mov	r2, r6
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	f7f6 fd11 	bl	80005f8 <__aeabi_dmul>
 8009bd6:	a370      	add	r3, pc, #448	; (adr r3, 8009d98 <atan+0x2c8>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f7f6 fb56 	bl	800028c <__adddf3>
 8009be0:	4632      	mov	r2, r6
 8009be2:	463b      	mov	r3, r7
 8009be4:	f7f6 fd08 	bl	80005f8 <__aeabi_dmul>
 8009be8:	a36d      	add	r3, pc, #436	; (adr r3, 8009da0 <atan+0x2d0>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f7f6 fb4d 	bl	800028c <__adddf3>
 8009bf2:	4632      	mov	r2, r6
 8009bf4:	463b      	mov	r3, r7
 8009bf6:	f7f6 fcff 	bl	80005f8 <__aeabi_dmul>
 8009bfa:	a36b      	add	r3, pc, #428	; (adr r3, 8009da8 <atan+0x2d8>)
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	f7f6 fb44 	bl	800028c <__adddf3>
 8009c04:	4632      	mov	r2, r6
 8009c06:	463b      	mov	r3, r7
 8009c08:	f7f6 fcf6 	bl	80005f8 <__aeabi_dmul>
 8009c0c:	a368      	add	r3, pc, #416	; (adr r3, 8009db0 <atan+0x2e0>)
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f7f6 fb3b 	bl	800028c <__adddf3>
 8009c16:	4642      	mov	r2, r8
 8009c18:	464b      	mov	r3, r9
 8009c1a:	f7f6 fced 	bl	80005f8 <__aeabi_dmul>
 8009c1e:	a366      	add	r3, pc, #408	; (adr r3, 8009db8 <atan+0x2e8>)
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	4680      	mov	r8, r0
 8009c26:	4689      	mov	r9, r1
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	f7f6 fce4 	bl	80005f8 <__aeabi_dmul>
 8009c30:	a363      	add	r3, pc, #396	; (adr r3, 8009dc0 <atan+0x2f0>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	f7f6 fb27 	bl	8000288 <__aeabi_dsub>
 8009c3a:	4632      	mov	r2, r6
 8009c3c:	463b      	mov	r3, r7
 8009c3e:	f7f6 fcdb 	bl	80005f8 <__aeabi_dmul>
 8009c42:	a361      	add	r3, pc, #388	; (adr r3, 8009dc8 <atan+0x2f8>)
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f7f6 fb1e 	bl	8000288 <__aeabi_dsub>
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	463b      	mov	r3, r7
 8009c50:	f7f6 fcd2 	bl	80005f8 <__aeabi_dmul>
 8009c54:	a35e      	add	r3, pc, #376	; (adr r3, 8009dd0 <atan+0x300>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	f7f6 fb15 	bl	8000288 <__aeabi_dsub>
 8009c5e:	4632      	mov	r2, r6
 8009c60:	463b      	mov	r3, r7
 8009c62:	f7f6 fcc9 	bl	80005f8 <__aeabi_dmul>
 8009c66:	a35c      	add	r3, pc, #368	; (adr r3, 8009dd8 <atan+0x308>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f7f6 fb0c 	bl	8000288 <__aeabi_dsub>
 8009c70:	4632      	mov	r2, r6
 8009c72:	463b      	mov	r3, r7
 8009c74:	f7f6 fcc0 	bl	80005f8 <__aeabi_dmul>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	4649      	mov	r1, r9
 8009c80:	f7f6 fb04 	bl	800028c <__adddf3>
 8009c84:	4622      	mov	r2, r4
 8009c86:	462b      	mov	r3, r5
 8009c88:	f7f6 fcb6 	bl	80005f8 <__aeabi_dmul>
 8009c8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009c90:	4602      	mov	r2, r0
 8009c92:	460b      	mov	r3, r1
 8009c94:	d14b      	bne.n	8009d2e <atan+0x25e>
 8009c96:	4620      	mov	r0, r4
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f7f6 faf5 	bl	8000288 <__aeabi_dsub>
 8009c9e:	e72c      	b.n	8009afa <atan+0x2a>
 8009ca0:	ee10 0a10 	vmov	r0, s0
 8009ca4:	4b53      	ldr	r3, [pc, #332]	; (8009df4 <atan+0x324>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7f6 faed 	bl	8000288 <__aeabi_dsub>
 8009cae:	4b51      	ldr	r3, [pc, #324]	; (8009df4 <atan+0x324>)
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	460f      	mov	r7, r1
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	4629      	mov	r1, r5
 8009cba:	f7f6 fae7 	bl	800028c <__adddf3>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	f7f6 fdc1 	bl	800084c <__aeabi_ddiv>
 8009cca:	f04f 0a01 	mov.w	sl, #1
 8009cce:	4604      	mov	r4, r0
 8009cd0:	460d      	mov	r5, r1
 8009cd2:	e764      	b.n	8009b9e <atan+0xce>
 8009cd4:	4b49      	ldr	r3, [pc, #292]	; (8009dfc <atan+0x32c>)
 8009cd6:	429e      	cmp	r6, r3
 8009cd8:	da1d      	bge.n	8009d16 <atan+0x246>
 8009cda:	ee10 0a10 	vmov	r0, s0
 8009cde:	4b48      	ldr	r3, [pc, #288]	; (8009e00 <atan+0x330>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fad0 	bl	8000288 <__aeabi_dsub>
 8009ce8:	4b45      	ldr	r3, [pc, #276]	; (8009e00 <atan+0x330>)
 8009cea:	4606      	mov	r6, r0
 8009cec:	460f      	mov	r7, r1
 8009cee:	2200      	movs	r2, #0
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	f7f6 fc80 	bl	80005f8 <__aeabi_dmul>
 8009cf8:	4b3e      	ldr	r3, [pc, #248]	; (8009df4 <atan+0x324>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f7f6 fac6 	bl	800028c <__adddf3>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4630      	mov	r0, r6
 8009d06:	4639      	mov	r1, r7
 8009d08:	f7f6 fda0 	bl	800084c <__aeabi_ddiv>
 8009d0c:	f04f 0a02 	mov.w	sl, #2
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	e743      	b.n	8009b9e <atan+0xce>
 8009d16:	462b      	mov	r3, r5
 8009d18:	ee10 2a10 	vmov	r2, s0
 8009d1c:	4939      	ldr	r1, [pc, #228]	; (8009e04 <atan+0x334>)
 8009d1e:	2000      	movs	r0, #0
 8009d20:	f7f6 fd94 	bl	800084c <__aeabi_ddiv>
 8009d24:	f04f 0a03 	mov.w	sl, #3
 8009d28:	4604      	mov	r4, r0
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	e737      	b.n	8009b9e <atan+0xce>
 8009d2e:	4b36      	ldr	r3, [pc, #216]	; (8009e08 <atan+0x338>)
 8009d30:	4e36      	ldr	r6, [pc, #216]	; (8009e0c <atan+0x33c>)
 8009d32:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	f7f6 faa5 	bl	8000288 <__aeabi_dsub>
 8009d3e:	4622      	mov	r2, r4
 8009d40:	462b      	mov	r3, r5
 8009d42:	f7f6 faa1 	bl	8000288 <__aeabi_dsub>
 8009d46:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009d52:	f7f6 fa99 	bl	8000288 <__aeabi_dsub>
 8009d56:	f1bb 0f00 	cmp.w	fp, #0
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	460d      	mov	r5, r1
 8009d5e:	f6bf aed6 	bge.w	8009b0e <atan+0x3e>
 8009d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d66:	461d      	mov	r5, r3
 8009d68:	e6d1      	b.n	8009b0e <atan+0x3e>
 8009d6a:	a51d      	add	r5, pc, #116	; (adr r5, 8009de0 <atan+0x310>)
 8009d6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d70:	e6cd      	b.n	8009b0e <atan+0x3e>
 8009d72:	bf00      	nop
 8009d74:	f3af 8000 	nop.w
 8009d78:	54442d18 	.word	0x54442d18
 8009d7c:	bff921fb 	.word	0xbff921fb
 8009d80:	8800759c 	.word	0x8800759c
 8009d84:	7e37e43c 	.word	0x7e37e43c
 8009d88:	e322da11 	.word	0xe322da11
 8009d8c:	3f90ad3a 	.word	0x3f90ad3a
 8009d90:	24760deb 	.word	0x24760deb
 8009d94:	3fa97b4b 	.word	0x3fa97b4b
 8009d98:	a0d03d51 	.word	0xa0d03d51
 8009d9c:	3fb10d66 	.word	0x3fb10d66
 8009da0:	c54c206e 	.word	0xc54c206e
 8009da4:	3fb745cd 	.word	0x3fb745cd
 8009da8:	920083ff 	.word	0x920083ff
 8009dac:	3fc24924 	.word	0x3fc24924
 8009db0:	5555550d 	.word	0x5555550d
 8009db4:	3fd55555 	.word	0x3fd55555
 8009db8:	2c6a6c2f 	.word	0x2c6a6c2f
 8009dbc:	bfa2b444 	.word	0xbfa2b444
 8009dc0:	52defd9a 	.word	0x52defd9a
 8009dc4:	3fadde2d 	.word	0x3fadde2d
 8009dc8:	af749a6d 	.word	0xaf749a6d
 8009dcc:	3fb3b0f2 	.word	0x3fb3b0f2
 8009dd0:	fe231671 	.word	0xfe231671
 8009dd4:	3fbc71c6 	.word	0x3fbc71c6
 8009dd8:	9998ebc4 	.word	0x9998ebc4
 8009ddc:	3fc99999 	.word	0x3fc99999
 8009de0:	54442d18 	.word	0x54442d18
 8009de4:	3ff921fb 	.word	0x3ff921fb
 8009de8:	440fffff 	.word	0x440fffff
 8009dec:	7ff00000 	.word	0x7ff00000
 8009df0:	3fdbffff 	.word	0x3fdbffff
 8009df4:	3ff00000 	.word	0x3ff00000
 8009df8:	3ff2ffff 	.word	0x3ff2ffff
 8009dfc:	40038000 	.word	0x40038000
 8009e00:	3ff80000 	.word	0x3ff80000
 8009e04:	bff00000 	.word	0xbff00000
 8009e08:	0800dc10 	.word	0x0800dc10
 8009e0c:	0800dbf0 	.word	0x0800dbf0

08009e10 <fabs>:
 8009e10:	ec51 0b10 	vmov	r0, r1, d0
 8009e14:	ee10 2a10 	vmov	r2, s0
 8009e18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e1c:	ec43 2b10 	vmov	d0, r2, r3
 8009e20:	4770      	bx	lr
 8009e22:	0000      	movs	r0, r0
 8009e24:	0000      	movs	r0, r0
	...

08009e28 <__kernel_rem_pio2>:
 8009e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2c:	ed2d 8b02 	vpush	{d8}
 8009e30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009e34:	f112 0f14 	cmn.w	r2, #20
 8009e38:	9306      	str	r3, [sp, #24]
 8009e3a:	9104      	str	r1, [sp, #16]
 8009e3c:	4bc2      	ldr	r3, [pc, #776]	; (800a148 <__kernel_rem_pio2+0x320>)
 8009e3e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009e40:	9009      	str	r0, [sp, #36]	; 0x24
 8009e42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	9b06      	ldr	r3, [sp, #24]
 8009e4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e4e:	bfa8      	it	ge
 8009e50:	1ed4      	subge	r4, r2, #3
 8009e52:	9305      	str	r3, [sp, #20]
 8009e54:	bfb2      	itee	lt
 8009e56:	2400      	movlt	r4, #0
 8009e58:	2318      	movge	r3, #24
 8009e5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8009e5e:	f06f 0317 	mvn.w	r3, #23
 8009e62:	fb04 3303 	mla	r3, r4, r3, r3
 8009e66:	eb03 0a02 	add.w	sl, r3, r2
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	9a05      	ldr	r2, [sp, #20]
 8009e6e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800a138 <__kernel_rem_pio2+0x310>
 8009e72:	eb03 0802 	add.w	r8, r3, r2
 8009e76:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009e78:	1aa7      	subs	r7, r4, r2
 8009e7a:	ae20      	add	r6, sp, #128	; 0x80
 8009e7c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009e80:	2500      	movs	r5, #0
 8009e82:	4545      	cmp	r5, r8
 8009e84:	dd13      	ble.n	8009eae <__kernel_rem_pio2+0x86>
 8009e86:	9b06      	ldr	r3, [sp, #24]
 8009e88:	aa20      	add	r2, sp, #128	; 0x80
 8009e8a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009e8e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009e92:	f04f 0800 	mov.w	r8, #0
 8009e96:	9b00      	ldr	r3, [sp, #0]
 8009e98:	4598      	cmp	r8, r3
 8009e9a:	dc31      	bgt.n	8009f00 <__kernel_rem_pio2+0xd8>
 8009e9c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800a138 <__kernel_rem_pio2+0x310>
 8009ea0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009ea4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ea8:	462f      	mov	r7, r5
 8009eaa:	2600      	movs	r6, #0
 8009eac:	e01b      	b.n	8009ee6 <__kernel_rem_pio2+0xbe>
 8009eae:	42ef      	cmn	r7, r5
 8009eb0:	d407      	bmi.n	8009ec2 <__kernel_rem_pio2+0x9a>
 8009eb2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009eb6:	f7f6 fb35 	bl	8000524 <__aeabi_i2d>
 8009eba:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009ebe:	3501      	adds	r5, #1
 8009ec0:	e7df      	b.n	8009e82 <__kernel_rem_pio2+0x5a>
 8009ec2:	ec51 0b18 	vmov	r0, r1, d8
 8009ec6:	e7f8      	b.n	8009eba <__kernel_rem_pio2+0x92>
 8009ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ecc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009ed0:	f7f6 fb92 	bl	80005f8 <__aeabi_dmul>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009edc:	f7f6 f9d6 	bl	800028c <__adddf3>
 8009ee0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ee4:	3601      	adds	r6, #1
 8009ee6:	9b05      	ldr	r3, [sp, #20]
 8009ee8:	429e      	cmp	r6, r3
 8009eea:	f1a7 0708 	sub.w	r7, r7, #8
 8009eee:	ddeb      	ble.n	8009ec8 <__kernel_rem_pio2+0xa0>
 8009ef0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ef4:	f108 0801 	add.w	r8, r8, #1
 8009ef8:	ecab 7b02 	vstmia	fp!, {d7}
 8009efc:	3508      	adds	r5, #8
 8009efe:	e7ca      	b.n	8009e96 <__kernel_rem_pio2+0x6e>
 8009f00:	9b00      	ldr	r3, [sp, #0]
 8009f02:	aa0c      	add	r2, sp, #48	; 0x30
 8009f04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f0a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009f0c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009f10:	9c00      	ldr	r4, [sp, #0]
 8009f12:	930a      	str	r3, [sp, #40]	; 0x28
 8009f14:	00e3      	lsls	r3, r4, #3
 8009f16:	9308      	str	r3, [sp, #32]
 8009f18:	ab98      	add	r3, sp, #608	; 0x260
 8009f1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f1e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009f22:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8009f26:	ab70      	add	r3, sp, #448	; 0x1c0
 8009f28:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009f2c:	46c3      	mov	fp, r8
 8009f2e:	46a1      	mov	r9, r4
 8009f30:	f1b9 0f00 	cmp.w	r9, #0
 8009f34:	f1a5 0508 	sub.w	r5, r5, #8
 8009f38:	dc77      	bgt.n	800a02a <__kernel_rem_pio2+0x202>
 8009f3a:	ec47 6b10 	vmov	d0, r6, r7
 8009f3e:	4650      	mov	r0, sl
 8009f40:	f000 fac2 	bl	800a4c8 <scalbn>
 8009f44:	ec57 6b10 	vmov	r6, r7, d0
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009f4e:	ee10 0a10 	vmov	r0, s0
 8009f52:	4639      	mov	r1, r7
 8009f54:	f7f6 fb50 	bl	80005f8 <__aeabi_dmul>
 8009f58:	ec41 0b10 	vmov	d0, r0, r1
 8009f5c:	f000 fb34 	bl	800a5c8 <floor>
 8009f60:	4b7a      	ldr	r3, [pc, #488]	; (800a14c <__kernel_rem_pio2+0x324>)
 8009f62:	ec51 0b10 	vmov	r0, r1, d0
 8009f66:	2200      	movs	r2, #0
 8009f68:	f7f6 fb46 	bl	80005f8 <__aeabi_dmul>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4630      	mov	r0, r6
 8009f72:	4639      	mov	r1, r7
 8009f74:	f7f6 f988 	bl	8000288 <__aeabi_dsub>
 8009f78:	460f      	mov	r7, r1
 8009f7a:	4606      	mov	r6, r0
 8009f7c:	f7f6 fdec 	bl	8000b58 <__aeabi_d2iz>
 8009f80:	9002      	str	r0, [sp, #8]
 8009f82:	f7f6 facf 	bl	8000524 <__aeabi_i2d>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	f7f6 f97b 	bl	8000288 <__aeabi_dsub>
 8009f92:	f1ba 0f00 	cmp.w	sl, #0
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	dd6d      	ble.n	800a078 <__kernel_rem_pio2+0x250>
 8009f9c:	1e61      	subs	r1, r4, #1
 8009f9e:	ab0c      	add	r3, sp, #48	; 0x30
 8009fa0:	9d02      	ldr	r5, [sp, #8]
 8009fa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fa6:	f1ca 0018 	rsb	r0, sl, #24
 8009faa:	fa43 f200 	asr.w	r2, r3, r0
 8009fae:	4415      	add	r5, r2
 8009fb0:	4082      	lsls	r2, r0
 8009fb2:	1a9b      	subs	r3, r3, r2
 8009fb4:	aa0c      	add	r2, sp, #48	; 0x30
 8009fb6:	9502      	str	r5, [sp, #8]
 8009fb8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009fbc:	f1ca 0217 	rsb	r2, sl, #23
 8009fc0:	fa43 fb02 	asr.w	fp, r3, r2
 8009fc4:	f1bb 0f00 	cmp.w	fp, #0
 8009fc8:	dd65      	ble.n	800a096 <__kernel_rem_pio2+0x26e>
 8009fca:	9b02      	ldr	r3, [sp, #8]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	3301      	adds	r3, #1
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	4615      	mov	r5, r2
 8009fd4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009fd8:	4294      	cmp	r4, r2
 8009fda:	f300 809f 	bgt.w	800a11c <__kernel_rem_pio2+0x2f4>
 8009fde:	f1ba 0f00 	cmp.w	sl, #0
 8009fe2:	dd07      	ble.n	8009ff4 <__kernel_rem_pio2+0x1cc>
 8009fe4:	f1ba 0f01 	cmp.w	sl, #1
 8009fe8:	f000 80c1 	beq.w	800a16e <__kernel_rem_pio2+0x346>
 8009fec:	f1ba 0f02 	cmp.w	sl, #2
 8009ff0:	f000 80c7 	beq.w	800a182 <__kernel_rem_pio2+0x35a>
 8009ff4:	f1bb 0f02 	cmp.w	fp, #2
 8009ff8:	d14d      	bne.n	800a096 <__kernel_rem_pio2+0x26e>
 8009ffa:	4632      	mov	r2, r6
 8009ffc:	463b      	mov	r3, r7
 8009ffe:	4954      	ldr	r1, [pc, #336]	; (800a150 <__kernel_rem_pio2+0x328>)
 800a000:	2000      	movs	r0, #0
 800a002:	f7f6 f941 	bl	8000288 <__aeabi_dsub>
 800a006:	4606      	mov	r6, r0
 800a008:	460f      	mov	r7, r1
 800a00a:	2d00      	cmp	r5, #0
 800a00c:	d043      	beq.n	800a096 <__kernel_rem_pio2+0x26e>
 800a00e:	4650      	mov	r0, sl
 800a010:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800a140 <__kernel_rem_pio2+0x318>
 800a014:	f000 fa58 	bl	800a4c8 <scalbn>
 800a018:	4630      	mov	r0, r6
 800a01a:	4639      	mov	r1, r7
 800a01c:	ec53 2b10 	vmov	r2, r3, d0
 800a020:	f7f6 f932 	bl	8000288 <__aeabi_dsub>
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	e035      	b.n	800a096 <__kernel_rem_pio2+0x26e>
 800a02a:	4b4a      	ldr	r3, [pc, #296]	; (800a154 <__kernel_rem_pio2+0x32c>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	4630      	mov	r0, r6
 800a030:	4639      	mov	r1, r7
 800a032:	f7f6 fae1 	bl	80005f8 <__aeabi_dmul>
 800a036:	f7f6 fd8f 	bl	8000b58 <__aeabi_d2iz>
 800a03a:	f7f6 fa73 	bl	8000524 <__aeabi_i2d>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	ec43 2b18 	vmov	d8, r2, r3
 800a046:	4b44      	ldr	r3, [pc, #272]	; (800a158 <__kernel_rem_pio2+0x330>)
 800a048:	2200      	movs	r2, #0
 800a04a:	f7f6 fad5 	bl	80005f8 <__aeabi_dmul>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4630      	mov	r0, r6
 800a054:	4639      	mov	r1, r7
 800a056:	f7f6 f917 	bl	8000288 <__aeabi_dsub>
 800a05a:	f7f6 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800a05e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a062:	f84b 0b04 	str.w	r0, [fp], #4
 800a066:	ec51 0b18 	vmov	r0, r1, d8
 800a06a:	f7f6 f90f 	bl	800028c <__adddf3>
 800a06e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a072:	4606      	mov	r6, r0
 800a074:	460f      	mov	r7, r1
 800a076:	e75b      	b.n	8009f30 <__kernel_rem_pio2+0x108>
 800a078:	d106      	bne.n	800a088 <__kernel_rem_pio2+0x260>
 800a07a:	1e63      	subs	r3, r4, #1
 800a07c:	aa0c      	add	r2, sp, #48	; 0x30
 800a07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a082:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800a086:	e79d      	b.n	8009fc4 <__kernel_rem_pio2+0x19c>
 800a088:	4b34      	ldr	r3, [pc, #208]	; (800a15c <__kernel_rem_pio2+0x334>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	f7f6 fd3a 	bl	8000b04 <__aeabi_dcmpge>
 800a090:	2800      	cmp	r0, #0
 800a092:	d140      	bne.n	800a116 <__kernel_rem_pio2+0x2ee>
 800a094:	4683      	mov	fp, r0
 800a096:	2200      	movs	r2, #0
 800a098:	2300      	movs	r3, #0
 800a09a:	4630      	mov	r0, r6
 800a09c:	4639      	mov	r1, r7
 800a09e:	f7f6 fd13 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	f000 80c1 	beq.w	800a22a <__kernel_rem_pio2+0x402>
 800a0a8:	1e65      	subs	r5, r4, #1
 800a0aa:	462b      	mov	r3, r5
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	9900      	ldr	r1, [sp, #0]
 800a0b0:	428b      	cmp	r3, r1
 800a0b2:	da6d      	bge.n	800a190 <__kernel_rem_pio2+0x368>
 800a0b4:	2a00      	cmp	r2, #0
 800a0b6:	f000 808a 	beq.w	800a1ce <__kernel_rem_pio2+0x3a6>
 800a0ba:	ab0c      	add	r3, sp, #48	; 0x30
 800a0bc:	f1aa 0a18 	sub.w	sl, sl, #24
 800a0c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 80ae 	beq.w	800a226 <__kernel_rem_pio2+0x3fe>
 800a0ca:	4650      	mov	r0, sl
 800a0cc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a140 <__kernel_rem_pio2+0x318>
 800a0d0:	f000 f9fa 	bl	800a4c8 <scalbn>
 800a0d4:	1c6b      	adds	r3, r5, #1
 800a0d6:	00da      	lsls	r2, r3, #3
 800a0d8:	9205      	str	r2, [sp, #20]
 800a0da:	ec57 6b10 	vmov	r6, r7, d0
 800a0de:	aa70      	add	r2, sp, #448	; 0x1c0
 800a0e0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800a154 <__kernel_rem_pio2+0x32c>
 800a0e4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800a0e8:	462c      	mov	r4, r5
 800a0ea:	f04f 0800 	mov.w	r8, #0
 800a0ee:	2c00      	cmp	r4, #0
 800a0f0:	f280 80d4 	bge.w	800a29c <__kernel_rem_pio2+0x474>
 800a0f4:	462c      	mov	r4, r5
 800a0f6:	2c00      	cmp	r4, #0
 800a0f8:	f2c0 8102 	blt.w	800a300 <__kernel_rem_pio2+0x4d8>
 800a0fc:	4b18      	ldr	r3, [pc, #96]	; (800a160 <__kernel_rem_pio2+0x338>)
 800a0fe:	461e      	mov	r6, r3
 800a100:	ab70      	add	r3, sp, #448	; 0x1c0
 800a102:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800a106:	1b2b      	subs	r3, r5, r4
 800a108:	f04f 0900 	mov.w	r9, #0
 800a10c:	f04f 0a00 	mov.w	sl, #0
 800a110:	2700      	movs	r7, #0
 800a112:	9306      	str	r3, [sp, #24]
 800a114:	e0e6      	b.n	800a2e4 <__kernel_rem_pio2+0x4bc>
 800a116:	f04f 0b02 	mov.w	fp, #2
 800a11a:	e756      	b.n	8009fca <__kernel_rem_pio2+0x1a2>
 800a11c:	f8d8 3000 	ldr.w	r3, [r8]
 800a120:	bb05      	cbnz	r5, 800a164 <__kernel_rem_pio2+0x33c>
 800a122:	b123      	cbz	r3, 800a12e <__kernel_rem_pio2+0x306>
 800a124:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a128:	f8c8 3000 	str.w	r3, [r8]
 800a12c:	2301      	movs	r3, #1
 800a12e:	3201      	adds	r2, #1
 800a130:	f108 0804 	add.w	r8, r8, #4
 800a134:	461d      	mov	r5, r3
 800a136:	e74f      	b.n	8009fd8 <__kernel_rem_pio2+0x1b0>
	...
 800a144:	3ff00000 	.word	0x3ff00000
 800a148:	0800dc70 	.word	0x0800dc70
 800a14c:	40200000 	.word	0x40200000
 800a150:	3ff00000 	.word	0x3ff00000
 800a154:	3e700000 	.word	0x3e700000
 800a158:	41700000 	.word	0x41700000
 800a15c:	3fe00000 	.word	0x3fe00000
 800a160:	0800dc30 	.word	0x0800dc30
 800a164:	1acb      	subs	r3, r1, r3
 800a166:	f8c8 3000 	str.w	r3, [r8]
 800a16a:	462b      	mov	r3, r5
 800a16c:	e7df      	b.n	800a12e <__kernel_rem_pio2+0x306>
 800a16e:	1e62      	subs	r2, r4, #1
 800a170:	ab0c      	add	r3, sp, #48	; 0x30
 800a172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a176:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a17a:	a90c      	add	r1, sp, #48	; 0x30
 800a17c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a180:	e738      	b.n	8009ff4 <__kernel_rem_pio2+0x1cc>
 800a182:	1e62      	subs	r2, r4, #1
 800a184:	ab0c      	add	r3, sp, #48	; 0x30
 800a186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a18e:	e7f4      	b.n	800a17a <__kernel_rem_pio2+0x352>
 800a190:	a90c      	add	r1, sp, #48	; 0x30
 800a192:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a196:	3b01      	subs	r3, #1
 800a198:	430a      	orrs	r2, r1
 800a19a:	e788      	b.n	800a0ae <__kernel_rem_pio2+0x286>
 800a19c:	3301      	adds	r3, #1
 800a19e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a1a2:	2900      	cmp	r1, #0
 800a1a4:	d0fa      	beq.n	800a19c <__kernel_rem_pio2+0x374>
 800a1a6:	9a08      	ldr	r2, [sp, #32]
 800a1a8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800a1ac:	446a      	add	r2, sp
 800a1ae:	3a98      	subs	r2, #152	; 0x98
 800a1b0:	9208      	str	r2, [sp, #32]
 800a1b2:	9a06      	ldr	r2, [sp, #24]
 800a1b4:	a920      	add	r1, sp, #128	; 0x80
 800a1b6:	18a2      	adds	r2, r4, r2
 800a1b8:	18e3      	adds	r3, r4, r3
 800a1ba:	f104 0801 	add.w	r8, r4, #1
 800a1be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a1c2:	9302      	str	r3, [sp, #8]
 800a1c4:	9b02      	ldr	r3, [sp, #8]
 800a1c6:	4543      	cmp	r3, r8
 800a1c8:	da04      	bge.n	800a1d4 <__kernel_rem_pio2+0x3ac>
 800a1ca:	461c      	mov	r4, r3
 800a1cc:	e6a2      	b.n	8009f14 <__kernel_rem_pio2+0xec>
 800a1ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e7e4      	b.n	800a19e <__kernel_rem_pio2+0x376>
 800a1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a1da:	f7f6 f9a3 	bl	8000524 <__aeabi_i2d>
 800a1de:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e4:	46ab      	mov	fp, r5
 800a1e6:	461c      	mov	r4, r3
 800a1e8:	f04f 0900 	mov.w	r9, #0
 800a1ec:	2600      	movs	r6, #0
 800a1ee:	2700      	movs	r7, #0
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	4599      	cmp	r9, r3
 800a1f4:	dd06      	ble.n	800a204 <__kernel_rem_pio2+0x3dc>
 800a1f6:	9b08      	ldr	r3, [sp, #32]
 800a1f8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a1fc:	f108 0801 	add.w	r8, r8, #1
 800a200:	9308      	str	r3, [sp, #32]
 800a202:	e7df      	b.n	800a1c4 <__kernel_rem_pio2+0x39c>
 800a204:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a208:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a20c:	f7f6 f9f4 	bl	80005f8 <__aeabi_dmul>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	4630      	mov	r0, r6
 800a216:	4639      	mov	r1, r7
 800a218:	f7f6 f838 	bl	800028c <__adddf3>
 800a21c:	f109 0901 	add.w	r9, r9, #1
 800a220:	4606      	mov	r6, r0
 800a222:	460f      	mov	r7, r1
 800a224:	e7e4      	b.n	800a1f0 <__kernel_rem_pio2+0x3c8>
 800a226:	3d01      	subs	r5, #1
 800a228:	e747      	b.n	800a0ba <__kernel_rem_pio2+0x292>
 800a22a:	ec47 6b10 	vmov	d0, r6, r7
 800a22e:	f1ca 0000 	rsb	r0, sl, #0
 800a232:	f000 f949 	bl	800a4c8 <scalbn>
 800a236:	ec57 6b10 	vmov	r6, r7, d0
 800a23a:	4ba0      	ldr	r3, [pc, #640]	; (800a4bc <__kernel_rem_pio2+0x694>)
 800a23c:	ee10 0a10 	vmov	r0, s0
 800a240:	2200      	movs	r2, #0
 800a242:	4639      	mov	r1, r7
 800a244:	f7f6 fc5e 	bl	8000b04 <__aeabi_dcmpge>
 800a248:	b1f8      	cbz	r0, 800a28a <__kernel_rem_pio2+0x462>
 800a24a:	4b9d      	ldr	r3, [pc, #628]	; (800a4c0 <__kernel_rem_pio2+0x698>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	4630      	mov	r0, r6
 800a250:	4639      	mov	r1, r7
 800a252:	f7f6 f9d1 	bl	80005f8 <__aeabi_dmul>
 800a256:	f7f6 fc7f 	bl	8000b58 <__aeabi_d2iz>
 800a25a:	4680      	mov	r8, r0
 800a25c:	f7f6 f962 	bl	8000524 <__aeabi_i2d>
 800a260:	4b96      	ldr	r3, [pc, #600]	; (800a4bc <__kernel_rem_pio2+0x694>)
 800a262:	2200      	movs	r2, #0
 800a264:	f7f6 f9c8 	bl	80005f8 <__aeabi_dmul>
 800a268:	460b      	mov	r3, r1
 800a26a:	4602      	mov	r2, r0
 800a26c:	4639      	mov	r1, r7
 800a26e:	4630      	mov	r0, r6
 800a270:	f7f6 f80a 	bl	8000288 <__aeabi_dsub>
 800a274:	f7f6 fc70 	bl	8000b58 <__aeabi_d2iz>
 800a278:	1c65      	adds	r5, r4, #1
 800a27a:	ab0c      	add	r3, sp, #48	; 0x30
 800a27c:	f10a 0a18 	add.w	sl, sl, #24
 800a280:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a284:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a288:	e71f      	b.n	800a0ca <__kernel_rem_pio2+0x2a2>
 800a28a:	4630      	mov	r0, r6
 800a28c:	4639      	mov	r1, r7
 800a28e:	f7f6 fc63 	bl	8000b58 <__aeabi_d2iz>
 800a292:	ab0c      	add	r3, sp, #48	; 0x30
 800a294:	4625      	mov	r5, r4
 800a296:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a29a:	e716      	b.n	800a0ca <__kernel_rem_pio2+0x2a2>
 800a29c:	ab0c      	add	r3, sp, #48	; 0x30
 800a29e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a2a2:	f7f6 f93f 	bl	8000524 <__aeabi_i2d>
 800a2a6:	4632      	mov	r2, r6
 800a2a8:	463b      	mov	r3, r7
 800a2aa:	f7f6 f9a5 	bl	80005f8 <__aeabi_dmul>
 800a2ae:	4642      	mov	r2, r8
 800a2b0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a2b4:	464b      	mov	r3, r9
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	f7f6 f99d 	bl	80005f8 <__aeabi_dmul>
 800a2be:	3c01      	subs	r4, #1
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	460f      	mov	r7, r1
 800a2c4:	e713      	b.n	800a0ee <__kernel_rem_pio2+0x2c6>
 800a2c6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a2ca:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800a2ce:	f7f6 f993 	bl	80005f8 <__aeabi_dmul>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4648      	mov	r0, r9
 800a2d8:	4651      	mov	r1, sl
 800a2da:	f7f5 ffd7 	bl	800028c <__adddf3>
 800a2de:	3701      	adds	r7, #1
 800a2e0:	4681      	mov	r9, r0
 800a2e2:	468a      	mov	sl, r1
 800a2e4:	9b00      	ldr	r3, [sp, #0]
 800a2e6:	429f      	cmp	r7, r3
 800a2e8:	dc02      	bgt.n	800a2f0 <__kernel_rem_pio2+0x4c8>
 800a2ea:	9b06      	ldr	r3, [sp, #24]
 800a2ec:	429f      	cmp	r7, r3
 800a2ee:	ddea      	ble.n	800a2c6 <__kernel_rem_pio2+0x49e>
 800a2f0:	9a06      	ldr	r2, [sp, #24]
 800a2f2:	ab48      	add	r3, sp, #288	; 0x120
 800a2f4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800a2f8:	e9c6 9a00 	strd	r9, sl, [r6]
 800a2fc:	3c01      	subs	r4, #1
 800a2fe:	e6fa      	b.n	800a0f6 <__kernel_rem_pio2+0x2ce>
 800a300:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a302:	2b02      	cmp	r3, #2
 800a304:	dc0b      	bgt.n	800a31e <__kernel_rem_pio2+0x4f6>
 800a306:	2b00      	cmp	r3, #0
 800a308:	dc39      	bgt.n	800a37e <__kernel_rem_pio2+0x556>
 800a30a:	d05d      	beq.n	800a3c8 <__kernel_rem_pio2+0x5a0>
 800a30c:	9b02      	ldr	r3, [sp, #8]
 800a30e:	f003 0007 	and.w	r0, r3, #7
 800a312:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a316:	ecbd 8b02 	vpop	{d8}
 800a31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800a320:	2b03      	cmp	r3, #3
 800a322:	d1f3      	bne.n	800a30c <__kernel_rem_pio2+0x4e4>
 800a324:	9b05      	ldr	r3, [sp, #20]
 800a326:	9500      	str	r5, [sp, #0]
 800a328:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a32c:	eb0d 0403 	add.w	r4, sp, r3
 800a330:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800a334:	46a2      	mov	sl, r4
 800a336:	9b00      	ldr	r3, [sp, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f1aa 0a08 	sub.w	sl, sl, #8
 800a33e:	dc69      	bgt.n	800a414 <__kernel_rem_pio2+0x5ec>
 800a340:	46aa      	mov	sl, r5
 800a342:	f1ba 0f01 	cmp.w	sl, #1
 800a346:	f1a4 0408 	sub.w	r4, r4, #8
 800a34a:	f300 8083 	bgt.w	800a454 <__kernel_rem_pio2+0x62c>
 800a34e:	9c05      	ldr	r4, [sp, #20]
 800a350:	ab48      	add	r3, sp, #288	; 0x120
 800a352:	441c      	add	r4, r3
 800a354:	2000      	movs	r0, #0
 800a356:	2100      	movs	r1, #0
 800a358:	2d01      	cmp	r5, #1
 800a35a:	f300 809a 	bgt.w	800a492 <__kernel_rem_pio2+0x66a>
 800a35e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800a362:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a366:	f1bb 0f00 	cmp.w	fp, #0
 800a36a:	f040 8098 	bne.w	800a49e <__kernel_rem_pio2+0x676>
 800a36e:	9b04      	ldr	r3, [sp, #16]
 800a370:	e9c3 7800 	strd	r7, r8, [r3]
 800a374:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a378:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a37c:	e7c6      	b.n	800a30c <__kernel_rem_pio2+0x4e4>
 800a37e:	9e05      	ldr	r6, [sp, #20]
 800a380:	ab48      	add	r3, sp, #288	; 0x120
 800a382:	441e      	add	r6, r3
 800a384:	462c      	mov	r4, r5
 800a386:	2000      	movs	r0, #0
 800a388:	2100      	movs	r1, #0
 800a38a:	2c00      	cmp	r4, #0
 800a38c:	da33      	bge.n	800a3f6 <__kernel_rem_pio2+0x5ce>
 800a38e:	f1bb 0f00 	cmp.w	fp, #0
 800a392:	d036      	beq.n	800a402 <__kernel_rem_pio2+0x5da>
 800a394:	4602      	mov	r2, r0
 800a396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a39a:	9c04      	ldr	r4, [sp, #16]
 800a39c:	e9c4 2300 	strd	r2, r3, [r4]
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a3a8:	f7f5 ff6e 	bl	8000288 <__aeabi_dsub>
 800a3ac:	ae4a      	add	r6, sp, #296	; 0x128
 800a3ae:	2401      	movs	r4, #1
 800a3b0:	42a5      	cmp	r5, r4
 800a3b2:	da29      	bge.n	800a408 <__kernel_rem_pio2+0x5e0>
 800a3b4:	f1bb 0f00 	cmp.w	fp, #0
 800a3b8:	d002      	beq.n	800a3c0 <__kernel_rem_pio2+0x598>
 800a3ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3be:	4619      	mov	r1, r3
 800a3c0:	9b04      	ldr	r3, [sp, #16]
 800a3c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a3c6:	e7a1      	b.n	800a30c <__kernel_rem_pio2+0x4e4>
 800a3c8:	9c05      	ldr	r4, [sp, #20]
 800a3ca:	ab48      	add	r3, sp, #288	; 0x120
 800a3cc:	441c      	add	r4, r3
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	2d00      	cmp	r5, #0
 800a3d4:	da09      	bge.n	800a3ea <__kernel_rem_pio2+0x5c2>
 800a3d6:	f1bb 0f00 	cmp.w	fp, #0
 800a3da:	d002      	beq.n	800a3e2 <__kernel_rem_pio2+0x5ba>
 800a3dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	9b04      	ldr	r3, [sp, #16]
 800a3e4:	e9c3 0100 	strd	r0, r1, [r3]
 800a3e8:	e790      	b.n	800a30c <__kernel_rem_pio2+0x4e4>
 800a3ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a3ee:	f7f5 ff4d 	bl	800028c <__adddf3>
 800a3f2:	3d01      	subs	r5, #1
 800a3f4:	e7ed      	b.n	800a3d2 <__kernel_rem_pio2+0x5aa>
 800a3f6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800a3fa:	f7f5 ff47 	bl	800028c <__adddf3>
 800a3fe:	3c01      	subs	r4, #1
 800a400:	e7c3      	b.n	800a38a <__kernel_rem_pio2+0x562>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	e7c8      	b.n	800a39a <__kernel_rem_pio2+0x572>
 800a408:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a40c:	f7f5 ff3e 	bl	800028c <__adddf3>
 800a410:	3401      	adds	r4, #1
 800a412:	e7cd      	b.n	800a3b0 <__kernel_rem_pio2+0x588>
 800a414:	e9da 8900 	ldrd	r8, r9, [sl]
 800a418:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a41c:	9b00      	ldr	r3, [sp, #0]
 800a41e:	3b01      	subs	r3, #1
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	4632      	mov	r2, r6
 800a424:	463b      	mov	r3, r7
 800a426:	4640      	mov	r0, r8
 800a428:	4649      	mov	r1, r9
 800a42a:	f7f5 ff2f 	bl	800028c <__adddf3>
 800a42e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a432:	4602      	mov	r2, r0
 800a434:	460b      	mov	r3, r1
 800a436:	4640      	mov	r0, r8
 800a438:	4649      	mov	r1, r9
 800a43a:	f7f5 ff25 	bl	8000288 <__aeabi_dsub>
 800a43e:	4632      	mov	r2, r6
 800a440:	463b      	mov	r3, r7
 800a442:	f7f5 ff23 	bl	800028c <__adddf3>
 800a446:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a44a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a44e:	ed8a 7b00 	vstr	d7, [sl]
 800a452:	e770      	b.n	800a336 <__kernel_rem_pio2+0x50e>
 800a454:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a458:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a45c:	4640      	mov	r0, r8
 800a45e:	4632      	mov	r2, r6
 800a460:	463b      	mov	r3, r7
 800a462:	4649      	mov	r1, r9
 800a464:	f7f5 ff12 	bl	800028c <__adddf3>
 800a468:	e9cd 0100 	strd	r0, r1, [sp]
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4640      	mov	r0, r8
 800a472:	4649      	mov	r1, r9
 800a474:	f7f5 ff08 	bl	8000288 <__aeabi_dsub>
 800a478:	4632      	mov	r2, r6
 800a47a:	463b      	mov	r3, r7
 800a47c:	f7f5 ff06 	bl	800028c <__adddf3>
 800a480:	ed9d 7b00 	vldr	d7, [sp]
 800a484:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a488:	ed84 7b00 	vstr	d7, [r4]
 800a48c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a490:	e757      	b.n	800a342 <__kernel_rem_pio2+0x51a>
 800a492:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a496:	f7f5 fef9 	bl	800028c <__adddf3>
 800a49a:	3d01      	subs	r5, #1
 800a49c:	e75c      	b.n	800a358 <__kernel_rem_pio2+0x530>
 800a49e:	9b04      	ldr	r3, [sp, #16]
 800a4a0:	9a04      	ldr	r2, [sp, #16]
 800a4a2:	601f      	str	r7, [r3, #0]
 800a4a4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a4a8:	605c      	str	r4, [r3, #4]
 800a4aa:	609d      	str	r5, [r3, #8]
 800a4ac:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a4b0:	60d3      	str	r3, [r2, #12]
 800a4b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4b6:	6110      	str	r0, [r2, #16]
 800a4b8:	6153      	str	r3, [r2, #20]
 800a4ba:	e727      	b.n	800a30c <__kernel_rem_pio2+0x4e4>
 800a4bc:	41700000 	.word	0x41700000
 800a4c0:	3e700000 	.word	0x3e700000
 800a4c4:	00000000 	.word	0x00000000

0800a4c8 <scalbn>:
 800a4c8:	b570      	push	{r4, r5, r6, lr}
 800a4ca:	ec55 4b10 	vmov	r4, r5, d0
 800a4ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	b999      	cbnz	r1, 800a500 <scalbn+0x38>
 800a4d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a4dc:	4323      	orrs	r3, r4
 800a4de:	d03f      	beq.n	800a560 <scalbn+0x98>
 800a4e0:	4b35      	ldr	r3, [pc, #212]	; (800a5b8 <scalbn+0xf0>)
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	ee10 0a10 	vmov	r0, s0
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f7f6 f885 	bl	80005f8 <__aeabi_dmul>
 800a4ee:	4b33      	ldr	r3, [pc, #204]	; (800a5bc <scalbn+0xf4>)
 800a4f0:	429e      	cmp	r6, r3
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	460d      	mov	r5, r1
 800a4f6:	da10      	bge.n	800a51a <scalbn+0x52>
 800a4f8:	a327      	add	r3, pc, #156	; (adr r3, 800a598 <scalbn+0xd0>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	e01f      	b.n	800a540 <scalbn+0x78>
 800a500:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a504:	4291      	cmp	r1, r2
 800a506:	d10c      	bne.n	800a522 <scalbn+0x5a>
 800a508:	ee10 2a10 	vmov	r2, s0
 800a50c:	4620      	mov	r0, r4
 800a50e:	4629      	mov	r1, r5
 800a510:	f7f5 febc 	bl	800028c <__adddf3>
 800a514:	4604      	mov	r4, r0
 800a516:	460d      	mov	r5, r1
 800a518:	e022      	b.n	800a560 <scalbn+0x98>
 800a51a:	460b      	mov	r3, r1
 800a51c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a520:	3936      	subs	r1, #54	; 0x36
 800a522:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a526:	4296      	cmp	r6, r2
 800a528:	dd0d      	ble.n	800a546 <scalbn+0x7e>
 800a52a:	2d00      	cmp	r5, #0
 800a52c:	a11c      	add	r1, pc, #112	; (adr r1, 800a5a0 <scalbn+0xd8>)
 800a52e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a532:	da02      	bge.n	800a53a <scalbn+0x72>
 800a534:	a11c      	add	r1, pc, #112	; (adr r1, 800a5a8 <scalbn+0xe0>)
 800a536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a53a:	a319      	add	r3, pc, #100	; (adr r3, 800a5a0 <scalbn+0xd8>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f7f6 f85a 	bl	80005f8 <__aeabi_dmul>
 800a544:	e7e6      	b.n	800a514 <scalbn+0x4c>
 800a546:	1872      	adds	r2, r6, r1
 800a548:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a54c:	428a      	cmp	r2, r1
 800a54e:	dcec      	bgt.n	800a52a <scalbn+0x62>
 800a550:	2a00      	cmp	r2, #0
 800a552:	dd08      	ble.n	800a566 <scalbn+0x9e>
 800a554:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a558:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a55c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a560:	ec45 4b10 	vmov	d0, r4, r5
 800a564:	bd70      	pop	{r4, r5, r6, pc}
 800a566:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a56a:	da08      	bge.n	800a57e <scalbn+0xb6>
 800a56c:	2d00      	cmp	r5, #0
 800a56e:	a10a      	add	r1, pc, #40	; (adr r1, 800a598 <scalbn+0xd0>)
 800a570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a574:	dac0      	bge.n	800a4f8 <scalbn+0x30>
 800a576:	a10e      	add	r1, pc, #56	; (adr r1, 800a5b0 <scalbn+0xe8>)
 800a578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a57c:	e7bc      	b.n	800a4f8 <scalbn+0x30>
 800a57e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a582:	3236      	adds	r2, #54	; 0x36
 800a584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a588:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a58c:	4620      	mov	r0, r4
 800a58e:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <scalbn+0xf8>)
 800a590:	2200      	movs	r2, #0
 800a592:	e7d5      	b.n	800a540 <scalbn+0x78>
 800a594:	f3af 8000 	nop.w
 800a598:	c2f8f359 	.word	0xc2f8f359
 800a59c:	01a56e1f 	.word	0x01a56e1f
 800a5a0:	8800759c 	.word	0x8800759c
 800a5a4:	7e37e43c 	.word	0x7e37e43c
 800a5a8:	8800759c 	.word	0x8800759c
 800a5ac:	fe37e43c 	.word	0xfe37e43c
 800a5b0:	c2f8f359 	.word	0xc2f8f359
 800a5b4:	81a56e1f 	.word	0x81a56e1f
 800a5b8:	43500000 	.word	0x43500000
 800a5bc:	ffff3cb0 	.word	0xffff3cb0
 800a5c0:	3c900000 	.word	0x3c900000
 800a5c4:	00000000 	.word	0x00000000

0800a5c8 <floor>:
 800a5c8:	ec51 0b10 	vmov	r0, r1, d0
 800a5cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800a5d8:	2e13      	cmp	r6, #19
 800a5da:	ee10 5a10 	vmov	r5, s0
 800a5de:	ee10 8a10 	vmov	r8, s0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	dc31      	bgt.n	800a64a <floor+0x82>
 800a5e6:	2e00      	cmp	r6, #0
 800a5e8:	da14      	bge.n	800a614 <floor+0x4c>
 800a5ea:	a333      	add	r3, pc, #204	; (adr r3, 800a6b8 <floor+0xf0>)
 800a5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f0:	f7f5 fe4c 	bl	800028c <__adddf3>
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f7f6 fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 800a5fc:	b138      	cbz	r0, 800a60e <floor+0x46>
 800a5fe:	2c00      	cmp	r4, #0
 800a600:	da53      	bge.n	800a6aa <floor+0xe2>
 800a602:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a606:	4325      	orrs	r5, r4
 800a608:	d052      	beq.n	800a6b0 <floor+0xe8>
 800a60a:	4c2d      	ldr	r4, [pc, #180]	; (800a6c0 <floor+0xf8>)
 800a60c:	2500      	movs	r5, #0
 800a60e:	4621      	mov	r1, r4
 800a610:	4628      	mov	r0, r5
 800a612:	e024      	b.n	800a65e <floor+0x96>
 800a614:	4f2b      	ldr	r7, [pc, #172]	; (800a6c4 <floor+0xfc>)
 800a616:	4137      	asrs	r7, r6
 800a618:	ea01 0307 	and.w	r3, r1, r7
 800a61c:	4303      	orrs	r3, r0
 800a61e:	d01e      	beq.n	800a65e <floor+0x96>
 800a620:	a325      	add	r3, pc, #148	; (adr r3, 800a6b8 <floor+0xf0>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f7f5 fe31 	bl	800028c <__adddf3>
 800a62a:	2200      	movs	r2, #0
 800a62c:	2300      	movs	r3, #0
 800a62e:	f7f6 fa73 	bl	8000b18 <__aeabi_dcmpgt>
 800a632:	2800      	cmp	r0, #0
 800a634:	d0eb      	beq.n	800a60e <floor+0x46>
 800a636:	2c00      	cmp	r4, #0
 800a638:	bfbe      	ittt	lt
 800a63a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a63e:	4133      	asrlt	r3, r6
 800a640:	18e4      	addlt	r4, r4, r3
 800a642:	ea24 0407 	bic.w	r4, r4, r7
 800a646:	2500      	movs	r5, #0
 800a648:	e7e1      	b.n	800a60e <floor+0x46>
 800a64a:	2e33      	cmp	r6, #51	; 0x33
 800a64c:	dd0b      	ble.n	800a666 <floor+0x9e>
 800a64e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a652:	d104      	bne.n	800a65e <floor+0x96>
 800a654:	ee10 2a10 	vmov	r2, s0
 800a658:	460b      	mov	r3, r1
 800a65a:	f7f5 fe17 	bl	800028c <__adddf3>
 800a65e:	ec41 0b10 	vmov	d0, r0, r1
 800a662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a666:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800a66a:	f04f 37ff 	mov.w	r7, #4294967295
 800a66e:	40df      	lsrs	r7, r3
 800a670:	4238      	tst	r0, r7
 800a672:	d0f4      	beq.n	800a65e <floor+0x96>
 800a674:	a310      	add	r3, pc, #64	; (adr r3, 800a6b8 <floor+0xf0>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	f7f5 fe07 	bl	800028c <__adddf3>
 800a67e:	2200      	movs	r2, #0
 800a680:	2300      	movs	r3, #0
 800a682:	f7f6 fa49 	bl	8000b18 <__aeabi_dcmpgt>
 800a686:	2800      	cmp	r0, #0
 800a688:	d0c1      	beq.n	800a60e <floor+0x46>
 800a68a:	2c00      	cmp	r4, #0
 800a68c:	da0a      	bge.n	800a6a4 <floor+0xdc>
 800a68e:	2e14      	cmp	r6, #20
 800a690:	d101      	bne.n	800a696 <floor+0xce>
 800a692:	3401      	adds	r4, #1
 800a694:	e006      	b.n	800a6a4 <floor+0xdc>
 800a696:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a69a:	2301      	movs	r3, #1
 800a69c:	40b3      	lsls	r3, r6
 800a69e:	441d      	add	r5, r3
 800a6a0:	45a8      	cmp	r8, r5
 800a6a2:	d8f6      	bhi.n	800a692 <floor+0xca>
 800a6a4:	ea25 0507 	bic.w	r5, r5, r7
 800a6a8:	e7b1      	b.n	800a60e <floor+0x46>
 800a6aa:	2500      	movs	r5, #0
 800a6ac:	462c      	mov	r4, r5
 800a6ae:	e7ae      	b.n	800a60e <floor+0x46>
 800a6b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a6b4:	e7ab      	b.n	800a60e <floor+0x46>
 800a6b6:	bf00      	nop
 800a6b8:	8800759c 	.word	0x8800759c
 800a6bc:	7e37e43c 	.word	0x7e37e43c
 800a6c0:	bff00000 	.word	0xbff00000
 800a6c4:	000fffff 	.word	0x000fffff

0800a6c8 <__cvt>:
 800a6c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6cc:	ec55 4b10 	vmov	r4, r5, d0
 800a6d0:	2d00      	cmp	r5, #0
 800a6d2:	460e      	mov	r6, r1
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	bfbb      	ittet	lt
 800a6da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a6de:	461d      	movlt	r5, r3
 800a6e0:	2300      	movge	r3, #0
 800a6e2:	232d      	movlt	r3, #45	; 0x2d
 800a6e4:	700b      	strb	r3, [r1, #0]
 800a6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a6ec:	4691      	mov	r9, r2
 800a6ee:	f023 0820 	bic.w	r8, r3, #32
 800a6f2:	bfbc      	itt	lt
 800a6f4:	4622      	movlt	r2, r4
 800a6f6:	4614      	movlt	r4, r2
 800a6f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a6fc:	d005      	beq.n	800a70a <__cvt+0x42>
 800a6fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a702:	d100      	bne.n	800a706 <__cvt+0x3e>
 800a704:	3601      	adds	r6, #1
 800a706:	2102      	movs	r1, #2
 800a708:	e000      	b.n	800a70c <__cvt+0x44>
 800a70a:	2103      	movs	r1, #3
 800a70c:	ab03      	add	r3, sp, #12
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	ab02      	add	r3, sp, #8
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	ec45 4b10 	vmov	d0, r4, r5
 800a718:	4653      	mov	r3, sl
 800a71a:	4632      	mov	r2, r6
 800a71c:	f000 fe54 	bl	800b3c8 <_dtoa_r>
 800a720:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a724:	4607      	mov	r7, r0
 800a726:	d102      	bne.n	800a72e <__cvt+0x66>
 800a728:	f019 0f01 	tst.w	r9, #1
 800a72c:	d022      	beq.n	800a774 <__cvt+0xac>
 800a72e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a732:	eb07 0906 	add.w	r9, r7, r6
 800a736:	d110      	bne.n	800a75a <__cvt+0x92>
 800a738:	783b      	ldrb	r3, [r7, #0]
 800a73a:	2b30      	cmp	r3, #48	; 0x30
 800a73c:	d10a      	bne.n	800a754 <__cvt+0x8c>
 800a73e:	2200      	movs	r2, #0
 800a740:	2300      	movs	r3, #0
 800a742:	4620      	mov	r0, r4
 800a744:	4629      	mov	r1, r5
 800a746:	f7f6 f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a74a:	b918      	cbnz	r0, 800a754 <__cvt+0x8c>
 800a74c:	f1c6 0601 	rsb	r6, r6, #1
 800a750:	f8ca 6000 	str.w	r6, [sl]
 800a754:	f8da 3000 	ldr.w	r3, [sl]
 800a758:	4499      	add	r9, r3
 800a75a:	2200      	movs	r2, #0
 800a75c:	2300      	movs	r3, #0
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f6 f9b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a766:	b108      	cbz	r0, 800a76c <__cvt+0xa4>
 800a768:	f8cd 900c 	str.w	r9, [sp, #12]
 800a76c:	2230      	movs	r2, #48	; 0x30
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	454b      	cmp	r3, r9
 800a772:	d307      	bcc.n	800a784 <__cvt+0xbc>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a778:	1bdb      	subs	r3, r3, r7
 800a77a:	4638      	mov	r0, r7
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	b004      	add	sp, #16
 800a780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a784:	1c59      	adds	r1, r3, #1
 800a786:	9103      	str	r1, [sp, #12]
 800a788:	701a      	strb	r2, [r3, #0]
 800a78a:	e7f0      	b.n	800a76e <__cvt+0xa6>

0800a78c <__exponent>:
 800a78c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a78e:	4603      	mov	r3, r0
 800a790:	2900      	cmp	r1, #0
 800a792:	bfb8      	it	lt
 800a794:	4249      	neglt	r1, r1
 800a796:	f803 2b02 	strb.w	r2, [r3], #2
 800a79a:	bfb4      	ite	lt
 800a79c:	222d      	movlt	r2, #45	; 0x2d
 800a79e:	222b      	movge	r2, #43	; 0x2b
 800a7a0:	2909      	cmp	r1, #9
 800a7a2:	7042      	strb	r2, [r0, #1]
 800a7a4:	dd2a      	ble.n	800a7fc <__exponent+0x70>
 800a7a6:	f10d 0207 	add.w	r2, sp, #7
 800a7aa:	4617      	mov	r7, r2
 800a7ac:	260a      	movs	r6, #10
 800a7ae:	4694      	mov	ip, r2
 800a7b0:	fb91 f5f6 	sdiv	r5, r1, r6
 800a7b4:	fb06 1415 	mls	r4, r6, r5, r1
 800a7b8:	3430      	adds	r4, #48	; 0x30
 800a7ba:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a7be:	460c      	mov	r4, r1
 800a7c0:	2c63      	cmp	r4, #99	; 0x63
 800a7c2:	f102 32ff 	add.w	r2, r2, #4294967295
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	dcf1      	bgt.n	800a7ae <__exponent+0x22>
 800a7ca:	3130      	adds	r1, #48	; 0x30
 800a7cc:	f1ac 0402 	sub.w	r4, ip, #2
 800a7d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a7d4:	1c41      	adds	r1, r0, #1
 800a7d6:	4622      	mov	r2, r4
 800a7d8:	42ba      	cmp	r2, r7
 800a7da:	d30a      	bcc.n	800a7f2 <__exponent+0x66>
 800a7dc:	f10d 0209 	add.w	r2, sp, #9
 800a7e0:	eba2 020c 	sub.w	r2, r2, ip
 800a7e4:	42bc      	cmp	r4, r7
 800a7e6:	bf88      	it	hi
 800a7e8:	2200      	movhi	r2, #0
 800a7ea:	4413      	add	r3, r2
 800a7ec:	1a18      	subs	r0, r3, r0
 800a7ee:	b003      	add	sp, #12
 800a7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7f2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a7f6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a7fa:	e7ed      	b.n	800a7d8 <__exponent+0x4c>
 800a7fc:	2330      	movs	r3, #48	; 0x30
 800a7fe:	3130      	adds	r1, #48	; 0x30
 800a800:	7083      	strb	r3, [r0, #2]
 800a802:	70c1      	strb	r1, [r0, #3]
 800a804:	1d03      	adds	r3, r0, #4
 800a806:	e7f1      	b.n	800a7ec <__exponent+0x60>

0800a808 <_printf_float>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	ed2d 8b02 	vpush	{d8}
 800a810:	b08d      	sub	sp, #52	; 0x34
 800a812:	460c      	mov	r4, r1
 800a814:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a818:	4616      	mov	r6, r2
 800a81a:	461f      	mov	r7, r3
 800a81c:	4605      	mov	r5, r0
 800a81e:	f000 fcd5 	bl	800b1cc <_localeconv_r>
 800a822:	f8d0 a000 	ldr.w	sl, [r0]
 800a826:	4650      	mov	r0, sl
 800a828:	f7f5 fd22 	bl	8000270 <strlen>
 800a82c:	2300      	movs	r3, #0
 800a82e:	930a      	str	r3, [sp, #40]	; 0x28
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	9305      	str	r3, [sp, #20]
 800a834:	f8d8 3000 	ldr.w	r3, [r8]
 800a838:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a83c:	3307      	adds	r3, #7
 800a83e:	f023 0307 	bic.w	r3, r3, #7
 800a842:	f103 0208 	add.w	r2, r3, #8
 800a846:	f8c8 2000 	str.w	r2, [r8]
 800a84a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a84e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a852:	9307      	str	r3, [sp, #28]
 800a854:	f8cd 8018 	str.w	r8, [sp, #24]
 800a858:	ee08 0a10 	vmov	s16, r0
 800a85c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a860:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a864:	4b9e      	ldr	r3, [pc, #632]	; (800aae0 <_printf_float+0x2d8>)
 800a866:	f04f 32ff 	mov.w	r2, #4294967295
 800a86a:	f7f6 f95f 	bl	8000b2c <__aeabi_dcmpun>
 800a86e:	bb88      	cbnz	r0, 800a8d4 <_printf_float+0xcc>
 800a870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a874:	4b9a      	ldr	r3, [pc, #616]	; (800aae0 <_printf_float+0x2d8>)
 800a876:	f04f 32ff 	mov.w	r2, #4294967295
 800a87a:	f7f6 f939 	bl	8000af0 <__aeabi_dcmple>
 800a87e:	bb48      	cbnz	r0, 800a8d4 <_printf_float+0xcc>
 800a880:	2200      	movs	r2, #0
 800a882:	2300      	movs	r3, #0
 800a884:	4640      	mov	r0, r8
 800a886:	4649      	mov	r1, r9
 800a888:	f7f6 f928 	bl	8000adc <__aeabi_dcmplt>
 800a88c:	b110      	cbz	r0, 800a894 <_printf_float+0x8c>
 800a88e:	232d      	movs	r3, #45	; 0x2d
 800a890:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a894:	4a93      	ldr	r2, [pc, #588]	; (800aae4 <_printf_float+0x2dc>)
 800a896:	4b94      	ldr	r3, [pc, #592]	; (800aae8 <_printf_float+0x2e0>)
 800a898:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a89c:	bf94      	ite	ls
 800a89e:	4690      	movls	r8, r2
 800a8a0:	4698      	movhi	r8, r3
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	9b05      	ldr	r3, [sp, #20]
 800a8a8:	f023 0304 	bic.w	r3, r3, #4
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	f04f 0900 	mov.w	r9, #0
 800a8b2:	9700      	str	r7, [sp, #0]
 800a8b4:	4633      	mov	r3, r6
 800a8b6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f000 f9da 	bl	800ac74 <_printf_common>
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	f040 8090 	bne.w	800a9e6 <_printf_float+0x1de>
 800a8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ca:	b00d      	add	sp, #52	; 0x34
 800a8cc:	ecbd 8b02 	vpop	{d8}
 800a8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d4:	4642      	mov	r2, r8
 800a8d6:	464b      	mov	r3, r9
 800a8d8:	4640      	mov	r0, r8
 800a8da:	4649      	mov	r1, r9
 800a8dc:	f7f6 f926 	bl	8000b2c <__aeabi_dcmpun>
 800a8e0:	b140      	cbz	r0, 800a8f4 <_printf_float+0xec>
 800a8e2:	464b      	mov	r3, r9
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	bfbc      	itt	lt
 800a8e8:	232d      	movlt	r3, #45	; 0x2d
 800a8ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8ee:	4a7f      	ldr	r2, [pc, #508]	; (800aaec <_printf_float+0x2e4>)
 800a8f0:	4b7f      	ldr	r3, [pc, #508]	; (800aaf0 <_printf_float+0x2e8>)
 800a8f2:	e7d1      	b.n	800a898 <_printf_float+0x90>
 800a8f4:	6863      	ldr	r3, [r4, #4]
 800a8f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a8fa:	9206      	str	r2, [sp, #24]
 800a8fc:	1c5a      	adds	r2, r3, #1
 800a8fe:	d13f      	bne.n	800a980 <_printf_float+0x178>
 800a900:	2306      	movs	r3, #6
 800a902:	6063      	str	r3, [r4, #4]
 800a904:	9b05      	ldr	r3, [sp, #20]
 800a906:	6861      	ldr	r1, [r4, #4]
 800a908:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a90c:	2300      	movs	r3, #0
 800a90e:	9303      	str	r3, [sp, #12]
 800a910:	ab0a      	add	r3, sp, #40	; 0x28
 800a912:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a916:	ab09      	add	r3, sp, #36	; 0x24
 800a918:	ec49 8b10 	vmov	d0, r8, r9
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	6022      	str	r2, [r4, #0]
 800a920:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a924:	4628      	mov	r0, r5
 800a926:	f7ff fecf 	bl	800a6c8 <__cvt>
 800a92a:	9b06      	ldr	r3, [sp, #24]
 800a92c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a92e:	2b47      	cmp	r3, #71	; 0x47
 800a930:	4680      	mov	r8, r0
 800a932:	d108      	bne.n	800a946 <_printf_float+0x13e>
 800a934:	1cc8      	adds	r0, r1, #3
 800a936:	db02      	blt.n	800a93e <_printf_float+0x136>
 800a938:	6863      	ldr	r3, [r4, #4]
 800a93a:	4299      	cmp	r1, r3
 800a93c:	dd41      	ble.n	800a9c2 <_printf_float+0x1ba>
 800a93e:	f1ab 0302 	sub.w	r3, fp, #2
 800a942:	fa5f fb83 	uxtb.w	fp, r3
 800a946:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a94a:	d820      	bhi.n	800a98e <_printf_float+0x186>
 800a94c:	3901      	subs	r1, #1
 800a94e:	465a      	mov	r2, fp
 800a950:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a954:	9109      	str	r1, [sp, #36]	; 0x24
 800a956:	f7ff ff19 	bl	800a78c <__exponent>
 800a95a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a95c:	1813      	adds	r3, r2, r0
 800a95e:	2a01      	cmp	r2, #1
 800a960:	4681      	mov	r9, r0
 800a962:	6123      	str	r3, [r4, #16]
 800a964:	dc02      	bgt.n	800a96c <_printf_float+0x164>
 800a966:	6822      	ldr	r2, [r4, #0]
 800a968:	07d2      	lsls	r2, r2, #31
 800a96a:	d501      	bpl.n	800a970 <_printf_float+0x168>
 800a96c:	3301      	adds	r3, #1
 800a96e:	6123      	str	r3, [r4, #16]
 800a970:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a974:	2b00      	cmp	r3, #0
 800a976:	d09c      	beq.n	800a8b2 <_printf_float+0xaa>
 800a978:	232d      	movs	r3, #45	; 0x2d
 800a97a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a97e:	e798      	b.n	800a8b2 <_printf_float+0xaa>
 800a980:	9a06      	ldr	r2, [sp, #24]
 800a982:	2a47      	cmp	r2, #71	; 0x47
 800a984:	d1be      	bne.n	800a904 <_printf_float+0xfc>
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1bc      	bne.n	800a904 <_printf_float+0xfc>
 800a98a:	2301      	movs	r3, #1
 800a98c:	e7b9      	b.n	800a902 <_printf_float+0xfa>
 800a98e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a992:	d118      	bne.n	800a9c6 <_printf_float+0x1be>
 800a994:	2900      	cmp	r1, #0
 800a996:	6863      	ldr	r3, [r4, #4]
 800a998:	dd0b      	ble.n	800a9b2 <_printf_float+0x1aa>
 800a99a:	6121      	str	r1, [r4, #16]
 800a99c:	b913      	cbnz	r3, 800a9a4 <_printf_float+0x19c>
 800a99e:	6822      	ldr	r2, [r4, #0]
 800a9a0:	07d0      	lsls	r0, r2, #31
 800a9a2:	d502      	bpl.n	800a9aa <_printf_float+0x1a2>
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	440b      	add	r3, r1
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9ac:	f04f 0900 	mov.w	r9, #0
 800a9b0:	e7de      	b.n	800a970 <_printf_float+0x168>
 800a9b2:	b913      	cbnz	r3, 800a9ba <_printf_float+0x1b2>
 800a9b4:	6822      	ldr	r2, [r4, #0]
 800a9b6:	07d2      	lsls	r2, r2, #31
 800a9b8:	d501      	bpl.n	800a9be <_printf_float+0x1b6>
 800a9ba:	3302      	adds	r3, #2
 800a9bc:	e7f4      	b.n	800a9a8 <_printf_float+0x1a0>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e7f2      	b.n	800a9a8 <_printf_float+0x1a0>
 800a9c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c8:	4299      	cmp	r1, r3
 800a9ca:	db05      	blt.n	800a9d8 <_printf_float+0x1d0>
 800a9cc:	6823      	ldr	r3, [r4, #0]
 800a9ce:	6121      	str	r1, [r4, #16]
 800a9d0:	07d8      	lsls	r0, r3, #31
 800a9d2:	d5ea      	bpl.n	800a9aa <_printf_float+0x1a2>
 800a9d4:	1c4b      	adds	r3, r1, #1
 800a9d6:	e7e7      	b.n	800a9a8 <_printf_float+0x1a0>
 800a9d8:	2900      	cmp	r1, #0
 800a9da:	bfd4      	ite	le
 800a9dc:	f1c1 0202 	rsble	r2, r1, #2
 800a9e0:	2201      	movgt	r2, #1
 800a9e2:	4413      	add	r3, r2
 800a9e4:	e7e0      	b.n	800a9a8 <_printf_float+0x1a0>
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	055a      	lsls	r2, r3, #21
 800a9ea:	d407      	bmi.n	800a9fc <_printf_float+0x1f4>
 800a9ec:	6923      	ldr	r3, [r4, #16]
 800a9ee:	4642      	mov	r2, r8
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	47b8      	blx	r7
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	d12c      	bne.n	800aa54 <_printf_float+0x24c>
 800a9fa:	e764      	b.n	800a8c6 <_printf_float+0xbe>
 800a9fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aa00:	f240 80e0 	bls.w	800abc4 <_printf_float+0x3bc>
 800aa04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f7f6 f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d034      	beq.n	800aa7e <_printf_float+0x276>
 800aa14:	4a37      	ldr	r2, [pc, #220]	; (800aaf4 <_printf_float+0x2ec>)
 800aa16:	2301      	movs	r3, #1
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f43f af51 	beq.w	800a8c6 <_printf_float+0xbe>
 800aa24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	db02      	blt.n	800aa32 <_printf_float+0x22a>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	07d8      	lsls	r0, r3, #31
 800aa30:	d510      	bpl.n	800aa54 <_printf_float+0x24c>
 800aa32:	ee18 3a10 	vmov	r3, s16
 800aa36:	4652      	mov	r2, sl
 800aa38:	4631      	mov	r1, r6
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	47b8      	blx	r7
 800aa3e:	3001      	adds	r0, #1
 800aa40:	f43f af41 	beq.w	800a8c6 <_printf_float+0xbe>
 800aa44:	f04f 0800 	mov.w	r8, #0
 800aa48:	f104 091a 	add.w	r9, r4, #26
 800aa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa4e:	3b01      	subs	r3, #1
 800aa50:	4543      	cmp	r3, r8
 800aa52:	dc09      	bgt.n	800aa68 <_printf_float+0x260>
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	079b      	lsls	r3, r3, #30
 800aa58:	f100 8107 	bmi.w	800ac6a <_printf_float+0x462>
 800aa5c:	68e0      	ldr	r0, [r4, #12]
 800aa5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa60:	4298      	cmp	r0, r3
 800aa62:	bfb8      	it	lt
 800aa64:	4618      	movlt	r0, r3
 800aa66:	e730      	b.n	800a8ca <_printf_float+0xc2>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	464a      	mov	r2, r9
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4628      	mov	r0, r5
 800aa70:	47b8      	blx	r7
 800aa72:	3001      	adds	r0, #1
 800aa74:	f43f af27 	beq.w	800a8c6 <_printf_float+0xbe>
 800aa78:	f108 0801 	add.w	r8, r8, #1
 800aa7c:	e7e6      	b.n	800aa4c <_printf_float+0x244>
 800aa7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	dc39      	bgt.n	800aaf8 <_printf_float+0x2f0>
 800aa84:	4a1b      	ldr	r2, [pc, #108]	; (800aaf4 <_printf_float+0x2ec>)
 800aa86:	2301      	movs	r3, #1
 800aa88:	4631      	mov	r1, r6
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	47b8      	blx	r7
 800aa8e:	3001      	adds	r0, #1
 800aa90:	f43f af19 	beq.w	800a8c6 <_printf_float+0xbe>
 800aa94:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	d102      	bne.n	800aaa2 <_printf_float+0x29a>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	07d9      	lsls	r1, r3, #31
 800aaa0:	d5d8      	bpl.n	800aa54 <_printf_float+0x24c>
 800aaa2:	ee18 3a10 	vmov	r3, s16
 800aaa6:	4652      	mov	r2, sl
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	4628      	mov	r0, r5
 800aaac:	47b8      	blx	r7
 800aaae:	3001      	adds	r0, #1
 800aab0:	f43f af09 	beq.w	800a8c6 <_printf_float+0xbe>
 800aab4:	f04f 0900 	mov.w	r9, #0
 800aab8:	f104 0a1a 	add.w	sl, r4, #26
 800aabc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aabe:	425b      	negs	r3, r3
 800aac0:	454b      	cmp	r3, r9
 800aac2:	dc01      	bgt.n	800aac8 <_printf_float+0x2c0>
 800aac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac6:	e792      	b.n	800a9ee <_printf_float+0x1e6>
 800aac8:	2301      	movs	r3, #1
 800aaca:	4652      	mov	r2, sl
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	f43f aef7 	beq.w	800a8c6 <_printf_float+0xbe>
 800aad8:	f109 0901 	add.w	r9, r9, #1
 800aadc:	e7ee      	b.n	800aabc <_printf_float+0x2b4>
 800aade:	bf00      	nop
 800aae0:	7fefffff 	.word	0x7fefffff
 800aae4:	0800dc80 	.word	0x0800dc80
 800aae8:	0800dc84 	.word	0x0800dc84
 800aaec:	0800dc88 	.word	0x0800dc88
 800aaf0:	0800dc8c 	.word	0x0800dc8c
 800aaf4:	0800dc90 	.word	0x0800dc90
 800aaf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aafa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aafc:	429a      	cmp	r2, r3
 800aafe:	bfa8      	it	ge
 800ab00:	461a      	movge	r2, r3
 800ab02:	2a00      	cmp	r2, #0
 800ab04:	4691      	mov	r9, r2
 800ab06:	dc37      	bgt.n	800ab78 <_printf_float+0x370>
 800ab08:	f04f 0b00 	mov.w	fp, #0
 800ab0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab10:	f104 021a 	add.w	r2, r4, #26
 800ab14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab16:	9305      	str	r3, [sp, #20]
 800ab18:	eba3 0309 	sub.w	r3, r3, r9
 800ab1c:	455b      	cmp	r3, fp
 800ab1e:	dc33      	bgt.n	800ab88 <_printf_float+0x380>
 800ab20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab24:	429a      	cmp	r2, r3
 800ab26:	db3b      	blt.n	800aba0 <_printf_float+0x398>
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	07da      	lsls	r2, r3, #31
 800ab2c:	d438      	bmi.n	800aba0 <_printf_float+0x398>
 800ab2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ab32:	eba2 0903 	sub.w	r9, r2, r3
 800ab36:	9b05      	ldr	r3, [sp, #20]
 800ab38:	1ad2      	subs	r2, r2, r3
 800ab3a:	4591      	cmp	r9, r2
 800ab3c:	bfa8      	it	ge
 800ab3e:	4691      	movge	r9, r2
 800ab40:	f1b9 0f00 	cmp.w	r9, #0
 800ab44:	dc35      	bgt.n	800abb2 <_printf_float+0x3aa>
 800ab46:	f04f 0800 	mov.w	r8, #0
 800ab4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab4e:	f104 0a1a 	add.w	sl, r4, #26
 800ab52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab56:	1a9b      	subs	r3, r3, r2
 800ab58:	eba3 0309 	sub.w	r3, r3, r9
 800ab5c:	4543      	cmp	r3, r8
 800ab5e:	f77f af79 	ble.w	800aa54 <_printf_float+0x24c>
 800ab62:	2301      	movs	r3, #1
 800ab64:	4652      	mov	r2, sl
 800ab66:	4631      	mov	r1, r6
 800ab68:	4628      	mov	r0, r5
 800ab6a:	47b8      	blx	r7
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	f43f aeaa 	beq.w	800a8c6 <_printf_float+0xbe>
 800ab72:	f108 0801 	add.w	r8, r8, #1
 800ab76:	e7ec      	b.n	800ab52 <_printf_float+0x34a>
 800ab78:	4613      	mov	r3, r2
 800ab7a:	4631      	mov	r1, r6
 800ab7c:	4642      	mov	r2, r8
 800ab7e:	4628      	mov	r0, r5
 800ab80:	47b8      	blx	r7
 800ab82:	3001      	adds	r0, #1
 800ab84:	d1c0      	bne.n	800ab08 <_printf_float+0x300>
 800ab86:	e69e      	b.n	800a8c6 <_printf_float+0xbe>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	9205      	str	r2, [sp, #20]
 800ab90:	47b8      	blx	r7
 800ab92:	3001      	adds	r0, #1
 800ab94:	f43f ae97 	beq.w	800a8c6 <_printf_float+0xbe>
 800ab98:	9a05      	ldr	r2, [sp, #20]
 800ab9a:	f10b 0b01 	add.w	fp, fp, #1
 800ab9e:	e7b9      	b.n	800ab14 <_printf_float+0x30c>
 800aba0:	ee18 3a10 	vmov	r3, s16
 800aba4:	4652      	mov	r2, sl
 800aba6:	4631      	mov	r1, r6
 800aba8:	4628      	mov	r0, r5
 800abaa:	47b8      	blx	r7
 800abac:	3001      	adds	r0, #1
 800abae:	d1be      	bne.n	800ab2e <_printf_float+0x326>
 800abb0:	e689      	b.n	800a8c6 <_printf_float+0xbe>
 800abb2:	9a05      	ldr	r2, [sp, #20]
 800abb4:	464b      	mov	r3, r9
 800abb6:	4442      	add	r2, r8
 800abb8:	4631      	mov	r1, r6
 800abba:	4628      	mov	r0, r5
 800abbc:	47b8      	blx	r7
 800abbe:	3001      	adds	r0, #1
 800abc0:	d1c1      	bne.n	800ab46 <_printf_float+0x33e>
 800abc2:	e680      	b.n	800a8c6 <_printf_float+0xbe>
 800abc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abc6:	2a01      	cmp	r2, #1
 800abc8:	dc01      	bgt.n	800abce <_printf_float+0x3c6>
 800abca:	07db      	lsls	r3, r3, #31
 800abcc:	d53a      	bpl.n	800ac44 <_printf_float+0x43c>
 800abce:	2301      	movs	r3, #1
 800abd0:	4642      	mov	r2, r8
 800abd2:	4631      	mov	r1, r6
 800abd4:	4628      	mov	r0, r5
 800abd6:	47b8      	blx	r7
 800abd8:	3001      	adds	r0, #1
 800abda:	f43f ae74 	beq.w	800a8c6 <_printf_float+0xbe>
 800abde:	ee18 3a10 	vmov	r3, s16
 800abe2:	4652      	mov	r2, sl
 800abe4:	4631      	mov	r1, r6
 800abe6:	4628      	mov	r0, r5
 800abe8:	47b8      	blx	r7
 800abea:	3001      	adds	r0, #1
 800abec:	f43f ae6b 	beq.w	800a8c6 <_printf_float+0xbe>
 800abf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abf4:	2200      	movs	r2, #0
 800abf6:	2300      	movs	r3, #0
 800abf8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800abfc:	f7f5 ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac00:	b9d8      	cbnz	r0, 800ac3a <_printf_float+0x432>
 800ac02:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ac06:	f108 0201 	add.w	r2, r8, #1
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	47b8      	blx	r7
 800ac10:	3001      	adds	r0, #1
 800ac12:	d10e      	bne.n	800ac32 <_printf_float+0x42a>
 800ac14:	e657      	b.n	800a8c6 <_printf_float+0xbe>
 800ac16:	2301      	movs	r3, #1
 800ac18:	4652      	mov	r2, sl
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b8      	blx	r7
 800ac20:	3001      	adds	r0, #1
 800ac22:	f43f ae50 	beq.w	800a8c6 <_printf_float+0xbe>
 800ac26:	f108 0801 	add.w	r8, r8, #1
 800ac2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	4543      	cmp	r3, r8
 800ac30:	dcf1      	bgt.n	800ac16 <_printf_float+0x40e>
 800ac32:	464b      	mov	r3, r9
 800ac34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac38:	e6da      	b.n	800a9f0 <_printf_float+0x1e8>
 800ac3a:	f04f 0800 	mov.w	r8, #0
 800ac3e:	f104 0a1a 	add.w	sl, r4, #26
 800ac42:	e7f2      	b.n	800ac2a <_printf_float+0x422>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4642      	mov	r2, r8
 800ac48:	e7df      	b.n	800ac0a <_printf_float+0x402>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	464a      	mov	r2, r9
 800ac4e:	4631      	mov	r1, r6
 800ac50:	4628      	mov	r0, r5
 800ac52:	47b8      	blx	r7
 800ac54:	3001      	adds	r0, #1
 800ac56:	f43f ae36 	beq.w	800a8c6 <_printf_float+0xbe>
 800ac5a:	f108 0801 	add.w	r8, r8, #1
 800ac5e:	68e3      	ldr	r3, [r4, #12]
 800ac60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac62:	1a5b      	subs	r3, r3, r1
 800ac64:	4543      	cmp	r3, r8
 800ac66:	dcf0      	bgt.n	800ac4a <_printf_float+0x442>
 800ac68:	e6f8      	b.n	800aa5c <_printf_float+0x254>
 800ac6a:	f04f 0800 	mov.w	r8, #0
 800ac6e:	f104 0919 	add.w	r9, r4, #25
 800ac72:	e7f4      	b.n	800ac5e <_printf_float+0x456>

0800ac74 <_printf_common>:
 800ac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	4616      	mov	r6, r2
 800ac7a:	4699      	mov	r9, r3
 800ac7c:	688a      	ldr	r2, [r1, #8]
 800ac7e:	690b      	ldr	r3, [r1, #16]
 800ac80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	bfb8      	it	lt
 800ac88:	4613      	movlt	r3, r2
 800ac8a:	6033      	str	r3, [r6, #0]
 800ac8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac90:	4607      	mov	r7, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	b10a      	cbz	r2, 800ac9a <_printf_common+0x26>
 800ac96:	3301      	adds	r3, #1
 800ac98:	6033      	str	r3, [r6, #0]
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	0699      	lsls	r1, r3, #26
 800ac9e:	bf42      	ittt	mi
 800aca0:	6833      	ldrmi	r3, [r6, #0]
 800aca2:	3302      	addmi	r3, #2
 800aca4:	6033      	strmi	r3, [r6, #0]
 800aca6:	6825      	ldr	r5, [r4, #0]
 800aca8:	f015 0506 	ands.w	r5, r5, #6
 800acac:	d106      	bne.n	800acbc <_printf_common+0x48>
 800acae:	f104 0a19 	add.w	sl, r4, #25
 800acb2:	68e3      	ldr	r3, [r4, #12]
 800acb4:	6832      	ldr	r2, [r6, #0]
 800acb6:	1a9b      	subs	r3, r3, r2
 800acb8:	42ab      	cmp	r3, r5
 800acba:	dc26      	bgt.n	800ad0a <_printf_common+0x96>
 800acbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acc0:	1e13      	subs	r3, r2, #0
 800acc2:	6822      	ldr	r2, [r4, #0]
 800acc4:	bf18      	it	ne
 800acc6:	2301      	movne	r3, #1
 800acc8:	0692      	lsls	r2, r2, #26
 800acca:	d42b      	bmi.n	800ad24 <_printf_common+0xb0>
 800accc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acd0:	4649      	mov	r1, r9
 800acd2:	4638      	mov	r0, r7
 800acd4:	47c0      	blx	r8
 800acd6:	3001      	adds	r0, #1
 800acd8:	d01e      	beq.n	800ad18 <_printf_common+0xa4>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	6922      	ldr	r2, [r4, #16]
 800acde:	f003 0306 	and.w	r3, r3, #6
 800ace2:	2b04      	cmp	r3, #4
 800ace4:	bf02      	ittt	eq
 800ace6:	68e5      	ldreq	r5, [r4, #12]
 800ace8:	6833      	ldreq	r3, [r6, #0]
 800acea:	1aed      	subeq	r5, r5, r3
 800acec:	68a3      	ldr	r3, [r4, #8]
 800acee:	bf0c      	ite	eq
 800acf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acf4:	2500      	movne	r5, #0
 800acf6:	4293      	cmp	r3, r2
 800acf8:	bfc4      	itt	gt
 800acfa:	1a9b      	subgt	r3, r3, r2
 800acfc:	18ed      	addgt	r5, r5, r3
 800acfe:	2600      	movs	r6, #0
 800ad00:	341a      	adds	r4, #26
 800ad02:	42b5      	cmp	r5, r6
 800ad04:	d11a      	bne.n	800ad3c <_printf_common+0xc8>
 800ad06:	2000      	movs	r0, #0
 800ad08:	e008      	b.n	800ad1c <_printf_common+0xa8>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	4649      	mov	r1, r9
 800ad10:	4638      	mov	r0, r7
 800ad12:	47c0      	blx	r8
 800ad14:	3001      	adds	r0, #1
 800ad16:	d103      	bne.n	800ad20 <_printf_common+0xac>
 800ad18:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad20:	3501      	adds	r5, #1
 800ad22:	e7c6      	b.n	800acb2 <_printf_common+0x3e>
 800ad24:	18e1      	adds	r1, r4, r3
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	2030      	movs	r0, #48	; 0x30
 800ad2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad2e:	4422      	add	r2, r4
 800ad30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad38:	3302      	adds	r3, #2
 800ad3a:	e7c7      	b.n	800accc <_printf_common+0x58>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	4622      	mov	r2, r4
 800ad40:	4649      	mov	r1, r9
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c0      	blx	r8
 800ad46:	3001      	adds	r0, #1
 800ad48:	d0e6      	beq.n	800ad18 <_printf_common+0xa4>
 800ad4a:	3601      	adds	r6, #1
 800ad4c:	e7d9      	b.n	800ad02 <_printf_common+0x8e>
	...

0800ad50 <_printf_i>:
 800ad50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	7e0f      	ldrb	r7, [r1, #24]
 800ad56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad58:	2f78      	cmp	r7, #120	; 0x78
 800ad5a:	4691      	mov	r9, r2
 800ad5c:	4680      	mov	r8, r0
 800ad5e:	460c      	mov	r4, r1
 800ad60:	469a      	mov	sl, r3
 800ad62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad66:	d807      	bhi.n	800ad78 <_printf_i+0x28>
 800ad68:	2f62      	cmp	r7, #98	; 0x62
 800ad6a:	d80a      	bhi.n	800ad82 <_printf_i+0x32>
 800ad6c:	2f00      	cmp	r7, #0
 800ad6e:	f000 80d4 	beq.w	800af1a <_printf_i+0x1ca>
 800ad72:	2f58      	cmp	r7, #88	; 0x58
 800ad74:	f000 80c0 	beq.w	800aef8 <_printf_i+0x1a8>
 800ad78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad80:	e03a      	b.n	800adf8 <_printf_i+0xa8>
 800ad82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad86:	2b15      	cmp	r3, #21
 800ad88:	d8f6      	bhi.n	800ad78 <_printf_i+0x28>
 800ad8a:	a101      	add	r1, pc, #4	; (adr r1, 800ad90 <_printf_i+0x40>)
 800ad8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad90:	0800ade9 	.word	0x0800ade9
 800ad94:	0800adfd 	.word	0x0800adfd
 800ad98:	0800ad79 	.word	0x0800ad79
 800ad9c:	0800ad79 	.word	0x0800ad79
 800ada0:	0800ad79 	.word	0x0800ad79
 800ada4:	0800ad79 	.word	0x0800ad79
 800ada8:	0800adfd 	.word	0x0800adfd
 800adac:	0800ad79 	.word	0x0800ad79
 800adb0:	0800ad79 	.word	0x0800ad79
 800adb4:	0800ad79 	.word	0x0800ad79
 800adb8:	0800ad79 	.word	0x0800ad79
 800adbc:	0800af01 	.word	0x0800af01
 800adc0:	0800ae29 	.word	0x0800ae29
 800adc4:	0800aebb 	.word	0x0800aebb
 800adc8:	0800ad79 	.word	0x0800ad79
 800adcc:	0800ad79 	.word	0x0800ad79
 800add0:	0800af23 	.word	0x0800af23
 800add4:	0800ad79 	.word	0x0800ad79
 800add8:	0800ae29 	.word	0x0800ae29
 800addc:	0800ad79 	.word	0x0800ad79
 800ade0:	0800ad79 	.word	0x0800ad79
 800ade4:	0800aec3 	.word	0x0800aec3
 800ade8:	682b      	ldr	r3, [r5, #0]
 800adea:	1d1a      	adds	r2, r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	602a      	str	r2, [r5, #0]
 800adf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adf8:	2301      	movs	r3, #1
 800adfa:	e09f      	b.n	800af3c <_printf_i+0x1ec>
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	0607      	lsls	r7, r0, #24
 800ae02:	f103 0104 	add.w	r1, r3, #4
 800ae06:	6029      	str	r1, [r5, #0]
 800ae08:	d501      	bpl.n	800ae0e <_printf_i+0xbe>
 800ae0a:	681e      	ldr	r6, [r3, #0]
 800ae0c:	e003      	b.n	800ae16 <_printf_i+0xc6>
 800ae0e:	0646      	lsls	r6, r0, #25
 800ae10:	d5fb      	bpl.n	800ae0a <_printf_i+0xba>
 800ae12:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	da03      	bge.n	800ae22 <_printf_i+0xd2>
 800ae1a:	232d      	movs	r3, #45	; 0x2d
 800ae1c:	4276      	negs	r6, r6
 800ae1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae22:	485a      	ldr	r0, [pc, #360]	; (800af8c <_printf_i+0x23c>)
 800ae24:	230a      	movs	r3, #10
 800ae26:	e012      	b.n	800ae4e <_printf_i+0xfe>
 800ae28:	682b      	ldr	r3, [r5, #0]
 800ae2a:	6820      	ldr	r0, [r4, #0]
 800ae2c:	1d19      	adds	r1, r3, #4
 800ae2e:	6029      	str	r1, [r5, #0]
 800ae30:	0605      	lsls	r5, r0, #24
 800ae32:	d501      	bpl.n	800ae38 <_printf_i+0xe8>
 800ae34:	681e      	ldr	r6, [r3, #0]
 800ae36:	e002      	b.n	800ae3e <_printf_i+0xee>
 800ae38:	0641      	lsls	r1, r0, #25
 800ae3a:	d5fb      	bpl.n	800ae34 <_printf_i+0xe4>
 800ae3c:	881e      	ldrh	r6, [r3, #0]
 800ae3e:	4853      	ldr	r0, [pc, #332]	; (800af8c <_printf_i+0x23c>)
 800ae40:	2f6f      	cmp	r7, #111	; 0x6f
 800ae42:	bf0c      	ite	eq
 800ae44:	2308      	moveq	r3, #8
 800ae46:	230a      	movne	r3, #10
 800ae48:	2100      	movs	r1, #0
 800ae4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae4e:	6865      	ldr	r5, [r4, #4]
 800ae50:	60a5      	str	r5, [r4, #8]
 800ae52:	2d00      	cmp	r5, #0
 800ae54:	bfa2      	ittt	ge
 800ae56:	6821      	ldrge	r1, [r4, #0]
 800ae58:	f021 0104 	bicge.w	r1, r1, #4
 800ae5c:	6021      	strge	r1, [r4, #0]
 800ae5e:	b90e      	cbnz	r6, 800ae64 <_printf_i+0x114>
 800ae60:	2d00      	cmp	r5, #0
 800ae62:	d04b      	beq.n	800aefc <_printf_i+0x1ac>
 800ae64:	4615      	mov	r5, r2
 800ae66:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae6a:	fb03 6711 	mls	r7, r3, r1, r6
 800ae6e:	5dc7      	ldrb	r7, [r0, r7]
 800ae70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae74:	4637      	mov	r7, r6
 800ae76:	42bb      	cmp	r3, r7
 800ae78:	460e      	mov	r6, r1
 800ae7a:	d9f4      	bls.n	800ae66 <_printf_i+0x116>
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d10b      	bne.n	800ae98 <_printf_i+0x148>
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	07de      	lsls	r6, r3, #31
 800ae84:	d508      	bpl.n	800ae98 <_printf_i+0x148>
 800ae86:	6923      	ldr	r3, [r4, #16]
 800ae88:	6861      	ldr	r1, [r4, #4]
 800ae8a:	4299      	cmp	r1, r3
 800ae8c:	bfde      	ittt	le
 800ae8e:	2330      	movle	r3, #48	; 0x30
 800ae90:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae94:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ae98:	1b52      	subs	r2, r2, r5
 800ae9a:	6122      	str	r2, [r4, #16]
 800ae9c:	f8cd a000 	str.w	sl, [sp]
 800aea0:	464b      	mov	r3, r9
 800aea2:	aa03      	add	r2, sp, #12
 800aea4:	4621      	mov	r1, r4
 800aea6:	4640      	mov	r0, r8
 800aea8:	f7ff fee4 	bl	800ac74 <_printf_common>
 800aeac:	3001      	adds	r0, #1
 800aeae:	d14a      	bne.n	800af46 <_printf_i+0x1f6>
 800aeb0:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb4:	b004      	add	sp, #16
 800aeb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	f043 0320 	orr.w	r3, r3, #32
 800aec0:	6023      	str	r3, [r4, #0]
 800aec2:	4833      	ldr	r0, [pc, #204]	; (800af90 <_printf_i+0x240>)
 800aec4:	2778      	movs	r7, #120	; 0x78
 800aec6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	6829      	ldr	r1, [r5, #0]
 800aece:	061f      	lsls	r7, r3, #24
 800aed0:	f851 6b04 	ldr.w	r6, [r1], #4
 800aed4:	d402      	bmi.n	800aedc <_printf_i+0x18c>
 800aed6:	065f      	lsls	r7, r3, #25
 800aed8:	bf48      	it	mi
 800aeda:	b2b6      	uxthmi	r6, r6
 800aedc:	07df      	lsls	r7, r3, #31
 800aede:	bf48      	it	mi
 800aee0:	f043 0320 	orrmi.w	r3, r3, #32
 800aee4:	6029      	str	r1, [r5, #0]
 800aee6:	bf48      	it	mi
 800aee8:	6023      	strmi	r3, [r4, #0]
 800aeea:	b91e      	cbnz	r6, 800aef4 <_printf_i+0x1a4>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	f023 0320 	bic.w	r3, r3, #32
 800aef2:	6023      	str	r3, [r4, #0]
 800aef4:	2310      	movs	r3, #16
 800aef6:	e7a7      	b.n	800ae48 <_printf_i+0xf8>
 800aef8:	4824      	ldr	r0, [pc, #144]	; (800af8c <_printf_i+0x23c>)
 800aefa:	e7e4      	b.n	800aec6 <_printf_i+0x176>
 800aefc:	4615      	mov	r5, r2
 800aefe:	e7bd      	b.n	800ae7c <_printf_i+0x12c>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	6826      	ldr	r6, [r4, #0]
 800af04:	6961      	ldr	r1, [r4, #20]
 800af06:	1d18      	adds	r0, r3, #4
 800af08:	6028      	str	r0, [r5, #0]
 800af0a:	0635      	lsls	r5, r6, #24
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	d501      	bpl.n	800af14 <_printf_i+0x1c4>
 800af10:	6019      	str	r1, [r3, #0]
 800af12:	e002      	b.n	800af1a <_printf_i+0x1ca>
 800af14:	0670      	lsls	r0, r6, #25
 800af16:	d5fb      	bpl.n	800af10 <_printf_i+0x1c0>
 800af18:	8019      	strh	r1, [r3, #0]
 800af1a:	2300      	movs	r3, #0
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	4615      	mov	r5, r2
 800af20:	e7bc      	b.n	800ae9c <_printf_i+0x14c>
 800af22:	682b      	ldr	r3, [r5, #0]
 800af24:	1d1a      	adds	r2, r3, #4
 800af26:	602a      	str	r2, [r5, #0]
 800af28:	681d      	ldr	r5, [r3, #0]
 800af2a:	6862      	ldr	r2, [r4, #4]
 800af2c:	2100      	movs	r1, #0
 800af2e:	4628      	mov	r0, r5
 800af30:	f7f5 f94e 	bl	80001d0 <memchr>
 800af34:	b108      	cbz	r0, 800af3a <_printf_i+0x1ea>
 800af36:	1b40      	subs	r0, r0, r5
 800af38:	6060      	str	r0, [r4, #4]
 800af3a:	6863      	ldr	r3, [r4, #4]
 800af3c:	6123      	str	r3, [r4, #16]
 800af3e:	2300      	movs	r3, #0
 800af40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af44:	e7aa      	b.n	800ae9c <_printf_i+0x14c>
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	462a      	mov	r2, r5
 800af4a:	4649      	mov	r1, r9
 800af4c:	4640      	mov	r0, r8
 800af4e:	47d0      	blx	sl
 800af50:	3001      	adds	r0, #1
 800af52:	d0ad      	beq.n	800aeb0 <_printf_i+0x160>
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	079b      	lsls	r3, r3, #30
 800af58:	d413      	bmi.n	800af82 <_printf_i+0x232>
 800af5a:	68e0      	ldr	r0, [r4, #12]
 800af5c:	9b03      	ldr	r3, [sp, #12]
 800af5e:	4298      	cmp	r0, r3
 800af60:	bfb8      	it	lt
 800af62:	4618      	movlt	r0, r3
 800af64:	e7a6      	b.n	800aeb4 <_printf_i+0x164>
 800af66:	2301      	movs	r3, #1
 800af68:	4632      	mov	r2, r6
 800af6a:	4649      	mov	r1, r9
 800af6c:	4640      	mov	r0, r8
 800af6e:	47d0      	blx	sl
 800af70:	3001      	adds	r0, #1
 800af72:	d09d      	beq.n	800aeb0 <_printf_i+0x160>
 800af74:	3501      	adds	r5, #1
 800af76:	68e3      	ldr	r3, [r4, #12]
 800af78:	9903      	ldr	r1, [sp, #12]
 800af7a:	1a5b      	subs	r3, r3, r1
 800af7c:	42ab      	cmp	r3, r5
 800af7e:	dcf2      	bgt.n	800af66 <_printf_i+0x216>
 800af80:	e7eb      	b.n	800af5a <_printf_i+0x20a>
 800af82:	2500      	movs	r5, #0
 800af84:	f104 0619 	add.w	r6, r4, #25
 800af88:	e7f5      	b.n	800af76 <_printf_i+0x226>
 800af8a:	bf00      	nop
 800af8c:	0800dc92 	.word	0x0800dc92
 800af90:	0800dca3 	.word	0x0800dca3

0800af94 <std>:
 800af94:	2300      	movs	r3, #0
 800af96:	b510      	push	{r4, lr}
 800af98:	4604      	mov	r4, r0
 800af9a:	e9c0 3300 	strd	r3, r3, [r0]
 800af9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afa2:	6083      	str	r3, [r0, #8]
 800afa4:	8181      	strh	r1, [r0, #12]
 800afa6:	6643      	str	r3, [r0, #100]	; 0x64
 800afa8:	81c2      	strh	r2, [r0, #14]
 800afaa:	6183      	str	r3, [r0, #24]
 800afac:	4619      	mov	r1, r3
 800afae:	2208      	movs	r2, #8
 800afb0:	305c      	adds	r0, #92	; 0x5c
 800afb2:	f000 f903 	bl	800b1bc <memset>
 800afb6:	4b05      	ldr	r3, [pc, #20]	; (800afcc <std+0x38>)
 800afb8:	6263      	str	r3, [r4, #36]	; 0x24
 800afba:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <std+0x3c>)
 800afbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800afbe:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <std+0x40>)
 800afc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afc2:	4b05      	ldr	r3, [pc, #20]	; (800afd8 <std+0x44>)
 800afc4:	6224      	str	r4, [r4, #32]
 800afc6:	6323      	str	r3, [r4, #48]	; 0x30
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	0800b0f5 	.word	0x0800b0f5
 800afd0:	0800b117 	.word	0x0800b117
 800afd4:	0800b14f 	.word	0x0800b14f
 800afd8:	0800b173 	.word	0x0800b173

0800afdc <stdio_exit_handler>:
 800afdc:	4a02      	ldr	r2, [pc, #8]	; (800afe8 <stdio_exit_handler+0xc>)
 800afde:	4903      	ldr	r1, [pc, #12]	; (800afec <stdio_exit_handler+0x10>)
 800afe0:	4803      	ldr	r0, [pc, #12]	; (800aff0 <stdio_exit_handler+0x14>)
 800afe2:	f000 b869 	b.w	800b0b8 <_fwalk_sglue>
 800afe6:	bf00      	nop
 800afe8:	2000000c 	.word	0x2000000c
 800afec:	0800cc61 	.word	0x0800cc61
 800aff0:	20000018 	.word	0x20000018

0800aff4 <cleanup_stdio>:
 800aff4:	6841      	ldr	r1, [r0, #4]
 800aff6:	4b0c      	ldr	r3, [pc, #48]	; (800b028 <cleanup_stdio+0x34>)
 800aff8:	4299      	cmp	r1, r3
 800affa:	b510      	push	{r4, lr}
 800affc:	4604      	mov	r4, r0
 800affe:	d001      	beq.n	800b004 <cleanup_stdio+0x10>
 800b000:	f001 fe2e 	bl	800cc60 <_fflush_r>
 800b004:	68a1      	ldr	r1, [r4, #8]
 800b006:	4b09      	ldr	r3, [pc, #36]	; (800b02c <cleanup_stdio+0x38>)
 800b008:	4299      	cmp	r1, r3
 800b00a:	d002      	beq.n	800b012 <cleanup_stdio+0x1e>
 800b00c:	4620      	mov	r0, r4
 800b00e:	f001 fe27 	bl	800cc60 <_fflush_r>
 800b012:	68e1      	ldr	r1, [r4, #12]
 800b014:	4b06      	ldr	r3, [pc, #24]	; (800b030 <cleanup_stdio+0x3c>)
 800b016:	4299      	cmp	r1, r3
 800b018:	d004      	beq.n	800b024 <cleanup_stdio+0x30>
 800b01a:	4620      	mov	r0, r4
 800b01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b020:	f001 be1e 	b.w	800cc60 <_fflush_r>
 800b024:	bd10      	pop	{r4, pc}
 800b026:	bf00      	nop
 800b028:	20001db0 	.word	0x20001db0
 800b02c:	20001e18 	.word	0x20001e18
 800b030:	20001e80 	.word	0x20001e80

0800b034 <global_stdio_init.part.0>:
 800b034:	b510      	push	{r4, lr}
 800b036:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <global_stdio_init.part.0+0x30>)
 800b038:	4c0b      	ldr	r4, [pc, #44]	; (800b068 <global_stdio_init.part.0+0x34>)
 800b03a:	4a0c      	ldr	r2, [pc, #48]	; (800b06c <global_stdio_init.part.0+0x38>)
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	4620      	mov	r0, r4
 800b040:	2200      	movs	r2, #0
 800b042:	2104      	movs	r1, #4
 800b044:	f7ff ffa6 	bl	800af94 <std>
 800b048:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b04c:	2201      	movs	r2, #1
 800b04e:	2109      	movs	r1, #9
 800b050:	f7ff ffa0 	bl	800af94 <std>
 800b054:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b058:	2202      	movs	r2, #2
 800b05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b05e:	2112      	movs	r1, #18
 800b060:	f7ff bf98 	b.w	800af94 <std>
 800b064:	20001ee8 	.word	0x20001ee8
 800b068:	20001db0 	.word	0x20001db0
 800b06c:	0800afdd 	.word	0x0800afdd

0800b070 <__sfp_lock_acquire>:
 800b070:	4801      	ldr	r0, [pc, #4]	; (800b078 <__sfp_lock_acquire+0x8>)
 800b072:	f000 b91f 	b.w	800b2b4 <__retarget_lock_acquire_recursive>
 800b076:	bf00      	nop
 800b078:	20001ef1 	.word	0x20001ef1

0800b07c <__sfp_lock_release>:
 800b07c:	4801      	ldr	r0, [pc, #4]	; (800b084 <__sfp_lock_release+0x8>)
 800b07e:	f000 b91a 	b.w	800b2b6 <__retarget_lock_release_recursive>
 800b082:	bf00      	nop
 800b084:	20001ef1 	.word	0x20001ef1

0800b088 <__sinit>:
 800b088:	b510      	push	{r4, lr}
 800b08a:	4604      	mov	r4, r0
 800b08c:	f7ff fff0 	bl	800b070 <__sfp_lock_acquire>
 800b090:	6a23      	ldr	r3, [r4, #32]
 800b092:	b11b      	cbz	r3, 800b09c <__sinit+0x14>
 800b094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b098:	f7ff bff0 	b.w	800b07c <__sfp_lock_release>
 800b09c:	4b04      	ldr	r3, [pc, #16]	; (800b0b0 <__sinit+0x28>)
 800b09e:	6223      	str	r3, [r4, #32]
 800b0a0:	4b04      	ldr	r3, [pc, #16]	; (800b0b4 <__sinit+0x2c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1f5      	bne.n	800b094 <__sinit+0xc>
 800b0a8:	f7ff ffc4 	bl	800b034 <global_stdio_init.part.0>
 800b0ac:	e7f2      	b.n	800b094 <__sinit+0xc>
 800b0ae:	bf00      	nop
 800b0b0:	0800aff5 	.word	0x0800aff5
 800b0b4:	20001ee8 	.word	0x20001ee8

0800b0b8 <_fwalk_sglue>:
 800b0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0bc:	4607      	mov	r7, r0
 800b0be:	4688      	mov	r8, r1
 800b0c0:	4614      	mov	r4, r2
 800b0c2:	2600      	movs	r6, #0
 800b0c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b0cc:	d505      	bpl.n	800b0da <_fwalk_sglue+0x22>
 800b0ce:	6824      	ldr	r4, [r4, #0]
 800b0d0:	2c00      	cmp	r4, #0
 800b0d2:	d1f7      	bne.n	800b0c4 <_fwalk_sglue+0xc>
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0da:	89ab      	ldrh	r3, [r5, #12]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d907      	bls.n	800b0f0 <_fwalk_sglue+0x38>
 800b0e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	d003      	beq.n	800b0f0 <_fwalk_sglue+0x38>
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	47c0      	blx	r8
 800b0ee:	4306      	orrs	r6, r0
 800b0f0:	3568      	adds	r5, #104	; 0x68
 800b0f2:	e7e9      	b.n	800b0c8 <_fwalk_sglue+0x10>

0800b0f4 <__sread>:
 800b0f4:	b510      	push	{r4, lr}
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fc:	f000 f88c 	bl	800b218 <_read_r>
 800b100:	2800      	cmp	r0, #0
 800b102:	bfab      	itete	ge
 800b104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b106:	89a3      	ldrhlt	r3, [r4, #12]
 800b108:	181b      	addge	r3, r3, r0
 800b10a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b10e:	bfac      	ite	ge
 800b110:	6563      	strge	r3, [r4, #84]	; 0x54
 800b112:	81a3      	strhlt	r3, [r4, #12]
 800b114:	bd10      	pop	{r4, pc}

0800b116 <__swrite>:
 800b116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11a:	461f      	mov	r7, r3
 800b11c:	898b      	ldrh	r3, [r1, #12]
 800b11e:	05db      	lsls	r3, r3, #23
 800b120:	4605      	mov	r5, r0
 800b122:	460c      	mov	r4, r1
 800b124:	4616      	mov	r6, r2
 800b126:	d505      	bpl.n	800b134 <__swrite+0x1e>
 800b128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12c:	2302      	movs	r3, #2
 800b12e:	2200      	movs	r2, #0
 800b130:	f000 f860 	bl	800b1f4 <_lseek_r>
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b13a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	4632      	mov	r2, r6
 800b142:	463b      	mov	r3, r7
 800b144:	4628      	mov	r0, r5
 800b146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b14a:	f000 b877 	b.w	800b23c <_write_r>

0800b14e <__sseek>:
 800b14e:	b510      	push	{r4, lr}
 800b150:	460c      	mov	r4, r1
 800b152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b156:	f000 f84d 	bl	800b1f4 <_lseek_r>
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	bf15      	itete	ne
 800b160:	6560      	strne	r0, [r4, #84]	; 0x54
 800b162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b16a:	81a3      	strheq	r3, [r4, #12]
 800b16c:	bf18      	it	ne
 800b16e:	81a3      	strhne	r3, [r4, #12]
 800b170:	bd10      	pop	{r4, pc}

0800b172 <__sclose>:
 800b172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b176:	f000 b82d 	b.w	800b1d4 <_close_r>
	...

0800b17c <_vsiprintf_r>:
 800b17c:	b500      	push	{lr}
 800b17e:	b09b      	sub	sp, #108	; 0x6c
 800b180:	9100      	str	r1, [sp, #0]
 800b182:	9104      	str	r1, [sp, #16]
 800b184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b188:	9105      	str	r1, [sp, #20]
 800b18a:	9102      	str	r1, [sp, #8]
 800b18c:	4905      	ldr	r1, [pc, #20]	; (800b1a4 <_vsiprintf_r+0x28>)
 800b18e:	9103      	str	r1, [sp, #12]
 800b190:	4669      	mov	r1, sp
 800b192:	f001 fbe1 	bl	800c958 <_svfiprintf_r>
 800b196:	9b00      	ldr	r3, [sp, #0]
 800b198:	2200      	movs	r2, #0
 800b19a:	701a      	strb	r2, [r3, #0]
 800b19c:	b01b      	add	sp, #108	; 0x6c
 800b19e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1a2:	bf00      	nop
 800b1a4:	ffff0208 	.word	0xffff0208

0800b1a8 <vsiprintf>:
 800b1a8:	4613      	mov	r3, r2
 800b1aa:	460a      	mov	r2, r1
 800b1ac:	4601      	mov	r1, r0
 800b1ae:	4802      	ldr	r0, [pc, #8]	; (800b1b8 <vsiprintf+0x10>)
 800b1b0:	6800      	ldr	r0, [r0, #0]
 800b1b2:	f7ff bfe3 	b.w	800b17c <_vsiprintf_r>
 800b1b6:	bf00      	nop
 800b1b8:	20000064 	.word	0x20000064

0800b1bc <memset>:
 800b1bc:	4402      	add	r2, r0
 800b1be:	4603      	mov	r3, r0
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d100      	bne.n	800b1c6 <memset+0xa>
 800b1c4:	4770      	bx	lr
 800b1c6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ca:	e7f9      	b.n	800b1c0 <memset+0x4>

0800b1cc <_localeconv_r>:
 800b1cc:	4800      	ldr	r0, [pc, #0]	; (800b1d0 <_localeconv_r+0x4>)
 800b1ce:	4770      	bx	lr
 800b1d0:	20000158 	.word	0x20000158

0800b1d4 <_close_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4d06      	ldr	r5, [pc, #24]	; (800b1f0 <_close_r+0x1c>)
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4604      	mov	r4, r0
 800b1dc:	4608      	mov	r0, r1
 800b1de:	602b      	str	r3, [r5, #0]
 800b1e0:	f7f9 f8a2 	bl	8004328 <_close>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_close_r+0x1a>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_close_r+0x1a>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	20001eec 	.word	0x20001eec

0800b1f4 <_lseek_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4d07      	ldr	r5, [pc, #28]	; (800b214 <_lseek_r+0x20>)
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	4608      	mov	r0, r1
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	2200      	movs	r2, #0
 800b200:	602a      	str	r2, [r5, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	f7f9 f89c 	bl	8004340 <_lseek>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_lseek_r+0x1e>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_lseek_r+0x1e>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	20001eec 	.word	0x20001eec

0800b218 <_read_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4d07      	ldr	r5, [pc, #28]	; (800b238 <_read_r+0x20>)
 800b21c:	4604      	mov	r4, r0
 800b21e:	4608      	mov	r0, r1
 800b220:	4611      	mov	r1, r2
 800b222:	2200      	movs	r2, #0
 800b224:	602a      	str	r2, [r5, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	f7f9 f862 	bl	80042f0 <_read>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_read_r+0x1e>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_read_r+0x1e>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	20001eec 	.word	0x20001eec

0800b23c <_write_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4d07      	ldr	r5, [pc, #28]	; (800b25c <_write_r+0x20>)
 800b240:	4604      	mov	r4, r0
 800b242:	4608      	mov	r0, r1
 800b244:	4611      	mov	r1, r2
 800b246:	2200      	movs	r2, #0
 800b248:	602a      	str	r2, [r5, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	f7f9 f85e 	bl	800430c <_write>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_write_r+0x1e>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_write_r+0x1e>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	20001eec 	.word	0x20001eec

0800b260 <__errno>:
 800b260:	4b01      	ldr	r3, [pc, #4]	; (800b268 <__errno+0x8>)
 800b262:	6818      	ldr	r0, [r3, #0]
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20000064 	.word	0x20000064

0800b26c <__libc_init_array>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	4d0d      	ldr	r5, [pc, #52]	; (800b2a4 <__libc_init_array+0x38>)
 800b270:	4c0d      	ldr	r4, [pc, #52]	; (800b2a8 <__libc_init_array+0x3c>)
 800b272:	1b64      	subs	r4, r4, r5
 800b274:	10a4      	asrs	r4, r4, #2
 800b276:	2600      	movs	r6, #0
 800b278:	42a6      	cmp	r6, r4
 800b27a:	d109      	bne.n	800b290 <__libc_init_array+0x24>
 800b27c:	4d0b      	ldr	r5, [pc, #44]	; (800b2ac <__libc_init_array+0x40>)
 800b27e:	4c0c      	ldr	r4, [pc, #48]	; (800b2b0 <__libc_init_array+0x44>)
 800b280:	f002 f892 	bl	800d3a8 <_init>
 800b284:	1b64      	subs	r4, r4, r5
 800b286:	10a4      	asrs	r4, r4, #2
 800b288:	2600      	movs	r6, #0
 800b28a:	42a6      	cmp	r6, r4
 800b28c:	d105      	bne.n	800b29a <__libc_init_array+0x2e>
 800b28e:	bd70      	pop	{r4, r5, r6, pc}
 800b290:	f855 3b04 	ldr.w	r3, [r5], #4
 800b294:	4798      	blx	r3
 800b296:	3601      	adds	r6, #1
 800b298:	e7ee      	b.n	800b278 <__libc_init_array+0xc>
 800b29a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b29e:	4798      	blx	r3
 800b2a0:	3601      	adds	r6, #1
 800b2a2:	e7f2      	b.n	800b28a <__libc_init_array+0x1e>
 800b2a4:	0800dff4 	.word	0x0800dff4
 800b2a8:	0800dff4 	.word	0x0800dff4
 800b2ac:	0800dff4 	.word	0x0800dff4
 800b2b0:	0800dff8 	.word	0x0800dff8

0800b2b4 <__retarget_lock_acquire_recursive>:
 800b2b4:	4770      	bx	lr

0800b2b6 <__retarget_lock_release_recursive>:
 800b2b6:	4770      	bx	lr

0800b2b8 <quorem>:
 800b2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	6903      	ldr	r3, [r0, #16]
 800b2be:	690c      	ldr	r4, [r1, #16]
 800b2c0:	42a3      	cmp	r3, r4
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	db7e      	blt.n	800b3c4 <quorem+0x10c>
 800b2c6:	3c01      	subs	r4, #1
 800b2c8:	f101 0814 	add.w	r8, r1, #20
 800b2cc:	f100 0514 	add.w	r5, r0, #20
 800b2d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b2da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b2e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2ee:	d331      	bcc.n	800b354 <quorem+0x9c>
 800b2f0:	f04f 0e00 	mov.w	lr, #0
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	46ac      	mov	ip, r5
 800b2f8:	46f2      	mov	sl, lr
 800b2fa:	f850 2b04 	ldr.w	r2, [r0], #4
 800b2fe:	b293      	uxth	r3, r2
 800b300:	fb06 e303 	mla	r3, r6, r3, lr
 800b304:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b308:	0c1a      	lsrs	r2, r3, #16
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	ebaa 0303 	sub.w	r3, sl, r3
 800b310:	f8dc a000 	ldr.w	sl, [ip]
 800b314:	fa13 f38a 	uxtah	r3, r3, sl
 800b318:	fb06 220e 	mla	r2, r6, lr, r2
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	9b00      	ldr	r3, [sp, #0]
 800b320:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b324:	b292      	uxth	r2, r2
 800b326:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b32a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b32e:	f8bd 3000 	ldrh.w	r3, [sp]
 800b332:	4581      	cmp	r9, r0
 800b334:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b338:	f84c 3b04 	str.w	r3, [ip], #4
 800b33c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b340:	d2db      	bcs.n	800b2fa <quorem+0x42>
 800b342:	f855 300b 	ldr.w	r3, [r5, fp]
 800b346:	b92b      	cbnz	r3, 800b354 <quorem+0x9c>
 800b348:	9b01      	ldr	r3, [sp, #4]
 800b34a:	3b04      	subs	r3, #4
 800b34c:	429d      	cmp	r5, r3
 800b34e:	461a      	mov	r2, r3
 800b350:	d32c      	bcc.n	800b3ac <quorem+0xf4>
 800b352:	613c      	str	r4, [r7, #16]
 800b354:	4638      	mov	r0, r7
 800b356:	f001 f9a5 	bl	800c6a4 <__mcmp>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	db22      	blt.n	800b3a4 <quorem+0xec>
 800b35e:	3601      	adds	r6, #1
 800b360:	4629      	mov	r1, r5
 800b362:	2000      	movs	r0, #0
 800b364:	f858 2b04 	ldr.w	r2, [r8], #4
 800b368:	f8d1 c000 	ldr.w	ip, [r1]
 800b36c:	b293      	uxth	r3, r2
 800b36e:	1ac3      	subs	r3, r0, r3
 800b370:	0c12      	lsrs	r2, r2, #16
 800b372:	fa13 f38c 	uxtah	r3, r3, ip
 800b376:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b37a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b37e:	b29b      	uxth	r3, r3
 800b380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b384:	45c1      	cmp	r9, r8
 800b386:	f841 3b04 	str.w	r3, [r1], #4
 800b38a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b38e:	d2e9      	bcs.n	800b364 <quorem+0xac>
 800b390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b394:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b398:	b922      	cbnz	r2, 800b3a4 <quorem+0xec>
 800b39a:	3b04      	subs	r3, #4
 800b39c:	429d      	cmp	r5, r3
 800b39e:	461a      	mov	r2, r3
 800b3a0:	d30a      	bcc.n	800b3b8 <quorem+0x100>
 800b3a2:	613c      	str	r4, [r7, #16]
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	b003      	add	sp, #12
 800b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	6812      	ldr	r2, [r2, #0]
 800b3ae:	3b04      	subs	r3, #4
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	d1ce      	bne.n	800b352 <quorem+0x9a>
 800b3b4:	3c01      	subs	r4, #1
 800b3b6:	e7c9      	b.n	800b34c <quorem+0x94>
 800b3b8:	6812      	ldr	r2, [r2, #0]
 800b3ba:	3b04      	subs	r3, #4
 800b3bc:	2a00      	cmp	r2, #0
 800b3be:	d1f0      	bne.n	800b3a2 <quorem+0xea>
 800b3c0:	3c01      	subs	r4, #1
 800b3c2:	e7eb      	b.n	800b39c <quorem+0xe4>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	e7ee      	b.n	800b3a6 <quorem+0xee>

0800b3c8 <_dtoa_r>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	ed2d 8b04 	vpush	{d8-d9}
 800b3d0:	69c5      	ldr	r5, [r0, #28]
 800b3d2:	b093      	sub	sp, #76	; 0x4c
 800b3d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b3d8:	ec57 6b10 	vmov	r6, r7, d0
 800b3dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b3e0:	9107      	str	r1, [sp, #28]
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	920a      	str	r2, [sp, #40]	; 0x28
 800b3e6:	930d      	str	r3, [sp, #52]	; 0x34
 800b3e8:	b975      	cbnz	r5, 800b408 <_dtoa_r+0x40>
 800b3ea:	2010      	movs	r0, #16
 800b3ec:	f000 fe2a 	bl	800c044 <malloc>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	61e0      	str	r0, [r4, #28]
 800b3f4:	b920      	cbnz	r0, 800b400 <_dtoa_r+0x38>
 800b3f6:	4bae      	ldr	r3, [pc, #696]	; (800b6b0 <_dtoa_r+0x2e8>)
 800b3f8:	21ef      	movs	r1, #239	; 0xef
 800b3fa:	48ae      	ldr	r0, [pc, #696]	; (800b6b4 <_dtoa_r+0x2ec>)
 800b3fc:	f001 fc90 	bl	800cd20 <__assert_func>
 800b400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b404:	6005      	str	r5, [r0, #0]
 800b406:	60c5      	str	r5, [r0, #12]
 800b408:	69e3      	ldr	r3, [r4, #28]
 800b40a:	6819      	ldr	r1, [r3, #0]
 800b40c:	b151      	cbz	r1, 800b424 <_dtoa_r+0x5c>
 800b40e:	685a      	ldr	r2, [r3, #4]
 800b410:	604a      	str	r2, [r1, #4]
 800b412:	2301      	movs	r3, #1
 800b414:	4093      	lsls	r3, r2
 800b416:	608b      	str	r3, [r1, #8]
 800b418:	4620      	mov	r0, r4
 800b41a:	f000 ff07 	bl	800c22c <_Bfree>
 800b41e:	69e3      	ldr	r3, [r4, #28]
 800b420:	2200      	movs	r2, #0
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	1e3b      	subs	r3, r7, #0
 800b426:	bfbb      	ittet	lt
 800b428:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b42c:	9303      	strlt	r3, [sp, #12]
 800b42e:	2300      	movge	r3, #0
 800b430:	2201      	movlt	r2, #1
 800b432:	bfac      	ite	ge
 800b434:	f8c8 3000 	strge.w	r3, [r8]
 800b438:	f8c8 2000 	strlt.w	r2, [r8]
 800b43c:	4b9e      	ldr	r3, [pc, #632]	; (800b6b8 <_dtoa_r+0x2f0>)
 800b43e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b442:	ea33 0308 	bics.w	r3, r3, r8
 800b446:	d11b      	bne.n	800b480 <_dtoa_r+0xb8>
 800b448:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b44a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b44e:	6013      	str	r3, [r2, #0]
 800b450:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b454:	4333      	orrs	r3, r6
 800b456:	f000 8593 	beq.w	800bf80 <_dtoa_r+0xbb8>
 800b45a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b45c:	b963      	cbnz	r3, 800b478 <_dtoa_r+0xb0>
 800b45e:	4b97      	ldr	r3, [pc, #604]	; (800b6bc <_dtoa_r+0x2f4>)
 800b460:	e027      	b.n	800b4b2 <_dtoa_r+0xea>
 800b462:	4b97      	ldr	r3, [pc, #604]	; (800b6c0 <_dtoa_r+0x2f8>)
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	3308      	adds	r3, #8
 800b468:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b46a:	6013      	str	r3, [r2, #0]
 800b46c:	9800      	ldr	r0, [sp, #0]
 800b46e:	b013      	add	sp, #76	; 0x4c
 800b470:	ecbd 8b04 	vpop	{d8-d9}
 800b474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b478:	4b90      	ldr	r3, [pc, #576]	; (800b6bc <_dtoa_r+0x2f4>)
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	3303      	adds	r3, #3
 800b47e:	e7f3      	b.n	800b468 <_dtoa_r+0xa0>
 800b480:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b484:	2200      	movs	r2, #0
 800b486:	ec51 0b17 	vmov	r0, r1, d7
 800b48a:	eeb0 8a47 	vmov.f32	s16, s14
 800b48e:	eef0 8a67 	vmov.f32	s17, s15
 800b492:	2300      	movs	r3, #0
 800b494:	f7f5 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 800b498:	4681      	mov	r9, r0
 800b49a:	b160      	cbz	r0, 800b4b6 <_dtoa_r+0xee>
 800b49c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b49e:	2301      	movs	r3, #1
 800b4a0:	6013      	str	r3, [r2, #0]
 800b4a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 8568 	beq.w	800bf7a <_dtoa_r+0xbb2>
 800b4aa:	4b86      	ldr	r3, [pc, #536]	; (800b6c4 <_dtoa_r+0x2fc>)
 800b4ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	e7da      	b.n	800b46c <_dtoa_r+0xa4>
 800b4b6:	aa10      	add	r2, sp, #64	; 0x40
 800b4b8:	a911      	add	r1, sp, #68	; 0x44
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b4c0:	eef0 0a68 	vmov.f32	s1, s17
 800b4c4:	f001 f994 	bl	800c7f0 <__d2b>
 800b4c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	2d00      	cmp	r5, #0
 800b4d0:	d07f      	beq.n	800b5d2 <_dtoa_r+0x20a>
 800b4d2:	ee18 3a90 	vmov	r3, s17
 800b4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b4de:	ec51 0b18 	vmov	r0, r1, d8
 800b4e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b4e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b4ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	4b75      	ldr	r3, [pc, #468]	; (800b6c8 <_dtoa_r+0x300>)
 800b4f4:	f7f4 fec8 	bl	8000288 <__aeabi_dsub>
 800b4f8:	a367      	add	r3, pc, #412	; (adr r3, 800b698 <_dtoa_r+0x2d0>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f5 f87b 	bl	80005f8 <__aeabi_dmul>
 800b502:	a367      	add	r3, pc, #412	; (adr r3, 800b6a0 <_dtoa_r+0x2d8>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f4 fec0 	bl	800028c <__adddf3>
 800b50c:	4606      	mov	r6, r0
 800b50e:	4628      	mov	r0, r5
 800b510:	460f      	mov	r7, r1
 800b512:	f7f5 f807 	bl	8000524 <__aeabi_i2d>
 800b516:	a364      	add	r3, pc, #400	; (adr r3, 800b6a8 <_dtoa_r+0x2e0>)
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	f7f5 f86c 	bl	80005f8 <__aeabi_dmul>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	4630      	mov	r0, r6
 800b526:	4639      	mov	r1, r7
 800b528:	f7f4 feb0 	bl	800028c <__adddf3>
 800b52c:	4606      	mov	r6, r0
 800b52e:	460f      	mov	r7, r1
 800b530:	f7f5 fb12 	bl	8000b58 <__aeabi_d2iz>
 800b534:	2200      	movs	r2, #0
 800b536:	4683      	mov	fp, r0
 800b538:	2300      	movs	r3, #0
 800b53a:	4630      	mov	r0, r6
 800b53c:	4639      	mov	r1, r7
 800b53e:	f7f5 facd 	bl	8000adc <__aeabi_dcmplt>
 800b542:	b148      	cbz	r0, 800b558 <_dtoa_r+0x190>
 800b544:	4658      	mov	r0, fp
 800b546:	f7f4 ffed 	bl	8000524 <__aeabi_i2d>
 800b54a:	4632      	mov	r2, r6
 800b54c:	463b      	mov	r3, r7
 800b54e:	f7f5 fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b552:	b908      	cbnz	r0, 800b558 <_dtoa_r+0x190>
 800b554:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b558:	f1bb 0f16 	cmp.w	fp, #22
 800b55c:	d857      	bhi.n	800b60e <_dtoa_r+0x246>
 800b55e:	4b5b      	ldr	r3, [pc, #364]	; (800b6cc <_dtoa_r+0x304>)
 800b560:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	ec51 0b18 	vmov	r0, r1, d8
 800b56c:	f7f5 fab6 	bl	8000adc <__aeabi_dcmplt>
 800b570:	2800      	cmp	r0, #0
 800b572:	d04e      	beq.n	800b612 <_dtoa_r+0x24a>
 800b574:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b578:	2300      	movs	r3, #0
 800b57a:	930c      	str	r3, [sp, #48]	; 0x30
 800b57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b57e:	1b5b      	subs	r3, r3, r5
 800b580:	1e5a      	subs	r2, r3, #1
 800b582:	bf45      	ittet	mi
 800b584:	f1c3 0301 	rsbmi	r3, r3, #1
 800b588:	9305      	strmi	r3, [sp, #20]
 800b58a:	2300      	movpl	r3, #0
 800b58c:	2300      	movmi	r3, #0
 800b58e:	9206      	str	r2, [sp, #24]
 800b590:	bf54      	ite	pl
 800b592:	9305      	strpl	r3, [sp, #20]
 800b594:	9306      	strmi	r3, [sp, #24]
 800b596:	f1bb 0f00 	cmp.w	fp, #0
 800b59a:	db3c      	blt.n	800b616 <_dtoa_r+0x24e>
 800b59c:	9b06      	ldr	r3, [sp, #24]
 800b59e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b5a2:	445b      	add	r3, fp
 800b5a4:	9306      	str	r3, [sp, #24]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	9308      	str	r3, [sp, #32]
 800b5aa:	9b07      	ldr	r3, [sp, #28]
 800b5ac:	2b09      	cmp	r3, #9
 800b5ae:	d868      	bhi.n	800b682 <_dtoa_r+0x2ba>
 800b5b0:	2b05      	cmp	r3, #5
 800b5b2:	bfc4      	itt	gt
 800b5b4:	3b04      	subgt	r3, #4
 800b5b6:	9307      	strgt	r3, [sp, #28]
 800b5b8:	9b07      	ldr	r3, [sp, #28]
 800b5ba:	f1a3 0302 	sub.w	r3, r3, #2
 800b5be:	bfcc      	ite	gt
 800b5c0:	2500      	movgt	r5, #0
 800b5c2:	2501      	movle	r5, #1
 800b5c4:	2b03      	cmp	r3, #3
 800b5c6:	f200 8085 	bhi.w	800b6d4 <_dtoa_r+0x30c>
 800b5ca:	e8df f003 	tbb	[pc, r3]
 800b5ce:	3b2e      	.short	0x3b2e
 800b5d0:	5839      	.short	0x5839
 800b5d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b5d6:	441d      	add	r5, r3
 800b5d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b5dc:	2b20      	cmp	r3, #32
 800b5de:	bfc1      	itttt	gt
 800b5e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b5e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b5e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b5ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b5f0:	bfd6      	itet	le
 800b5f2:	f1c3 0320 	rsble	r3, r3, #32
 800b5f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b5fa:	fa06 f003 	lslle.w	r0, r6, r3
 800b5fe:	f7f4 ff81 	bl	8000504 <__aeabi_ui2d>
 800b602:	2201      	movs	r2, #1
 800b604:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b608:	3d01      	subs	r5, #1
 800b60a:	920e      	str	r2, [sp, #56]	; 0x38
 800b60c:	e76f      	b.n	800b4ee <_dtoa_r+0x126>
 800b60e:	2301      	movs	r3, #1
 800b610:	e7b3      	b.n	800b57a <_dtoa_r+0x1b2>
 800b612:	900c      	str	r0, [sp, #48]	; 0x30
 800b614:	e7b2      	b.n	800b57c <_dtoa_r+0x1b4>
 800b616:	9b05      	ldr	r3, [sp, #20]
 800b618:	eba3 030b 	sub.w	r3, r3, fp
 800b61c:	9305      	str	r3, [sp, #20]
 800b61e:	f1cb 0300 	rsb	r3, fp, #0
 800b622:	9308      	str	r3, [sp, #32]
 800b624:	2300      	movs	r3, #0
 800b626:	930b      	str	r3, [sp, #44]	; 0x2c
 800b628:	e7bf      	b.n	800b5aa <_dtoa_r+0x1e2>
 800b62a:	2300      	movs	r3, #0
 800b62c:	9309      	str	r3, [sp, #36]	; 0x24
 800b62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b630:	2b00      	cmp	r3, #0
 800b632:	dc52      	bgt.n	800b6da <_dtoa_r+0x312>
 800b634:	2301      	movs	r3, #1
 800b636:	9301      	str	r3, [sp, #4]
 800b638:	9304      	str	r3, [sp, #16]
 800b63a:	461a      	mov	r2, r3
 800b63c:	920a      	str	r2, [sp, #40]	; 0x28
 800b63e:	e00b      	b.n	800b658 <_dtoa_r+0x290>
 800b640:	2301      	movs	r3, #1
 800b642:	e7f3      	b.n	800b62c <_dtoa_r+0x264>
 800b644:	2300      	movs	r3, #0
 800b646:	9309      	str	r3, [sp, #36]	; 0x24
 800b648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b64a:	445b      	add	r3, fp
 800b64c:	9301      	str	r3, [sp, #4]
 800b64e:	3301      	adds	r3, #1
 800b650:	2b01      	cmp	r3, #1
 800b652:	9304      	str	r3, [sp, #16]
 800b654:	bfb8      	it	lt
 800b656:	2301      	movlt	r3, #1
 800b658:	69e0      	ldr	r0, [r4, #28]
 800b65a:	2100      	movs	r1, #0
 800b65c:	2204      	movs	r2, #4
 800b65e:	f102 0614 	add.w	r6, r2, #20
 800b662:	429e      	cmp	r6, r3
 800b664:	d93d      	bls.n	800b6e2 <_dtoa_r+0x31a>
 800b666:	6041      	str	r1, [r0, #4]
 800b668:	4620      	mov	r0, r4
 800b66a:	f000 fd9f 	bl	800c1ac <_Balloc>
 800b66e:	9000      	str	r0, [sp, #0]
 800b670:	2800      	cmp	r0, #0
 800b672:	d139      	bne.n	800b6e8 <_dtoa_r+0x320>
 800b674:	4b16      	ldr	r3, [pc, #88]	; (800b6d0 <_dtoa_r+0x308>)
 800b676:	4602      	mov	r2, r0
 800b678:	f240 11af 	movw	r1, #431	; 0x1af
 800b67c:	e6bd      	b.n	800b3fa <_dtoa_r+0x32>
 800b67e:	2301      	movs	r3, #1
 800b680:	e7e1      	b.n	800b646 <_dtoa_r+0x27e>
 800b682:	2501      	movs	r5, #1
 800b684:	2300      	movs	r3, #0
 800b686:	9307      	str	r3, [sp, #28]
 800b688:	9509      	str	r5, [sp, #36]	; 0x24
 800b68a:	f04f 33ff 	mov.w	r3, #4294967295
 800b68e:	9301      	str	r3, [sp, #4]
 800b690:	9304      	str	r3, [sp, #16]
 800b692:	2200      	movs	r2, #0
 800b694:	2312      	movs	r3, #18
 800b696:	e7d1      	b.n	800b63c <_dtoa_r+0x274>
 800b698:	636f4361 	.word	0x636f4361
 800b69c:	3fd287a7 	.word	0x3fd287a7
 800b6a0:	8b60c8b3 	.word	0x8b60c8b3
 800b6a4:	3fc68a28 	.word	0x3fc68a28
 800b6a8:	509f79fb 	.word	0x509f79fb
 800b6ac:	3fd34413 	.word	0x3fd34413
 800b6b0:	0800dcc1 	.word	0x0800dcc1
 800b6b4:	0800dcd8 	.word	0x0800dcd8
 800b6b8:	7ff00000 	.word	0x7ff00000
 800b6bc:	0800dcbd 	.word	0x0800dcbd
 800b6c0:	0800dcb4 	.word	0x0800dcb4
 800b6c4:	0800dc91 	.word	0x0800dc91
 800b6c8:	3ff80000 	.word	0x3ff80000
 800b6cc:	0800ddc8 	.word	0x0800ddc8
 800b6d0:	0800dd30 	.word	0x0800dd30
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d8:	e7d7      	b.n	800b68a <_dtoa_r+0x2c2>
 800b6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	9304      	str	r3, [sp, #16]
 800b6e0:	e7ba      	b.n	800b658 <_dtoa_r+0x290>
 800b6e2:	3101      	adds	r1, #1
 800b6e4:	0052      	lsls	r2, r2, #1
 800b6e6:	e7ba      	b.n	800b65e <_dtoa_r+0x296>
 800b6e8:	69e3      	ldr	r3, [r4, #28]
 800b6ea:	9a00      	ldr	r2, [sp, #0]
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	9b04      	ldr	r3, [sp, #16]
 800b6f0:	2b0e      	cmp	r3, #14
 800b6f2:	f200 80a8 	bhi.w	800b846 <_dtoa_r+0x47e>
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	f000 80a5 	beq.w	800b846 <_dtoa_r+0x47e>
 800b6fc:	f1bb 0f00 	cmp.w	fp, #0
 800b700:	dd38      	ble.n	800b774 <_dtoa_r+0x3ac>
 800b702:	4bc0      	ldr	r3, [pc, #768]	; (800ba04 <_dtoa_r+0x63c>)
 800b704:	f00b 020f 	and.w	r2, fp, #15
 800b708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b70c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b710:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b714:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b718:	d019      	beq.n	800b74e <_dtoa_r+0x386>
 800b71a:	4bbb      	ldr	r3, [pc, #748]	; (800ba08 <_dtoa_r+0x640>)
 800b71c:	ec51 0b18 	vmov	r0, r1, d8
 800b720:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b724:	f7f5 f892 	bl	800084c <__aeabi_ddiv>
 800b728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b72c:	f008 080f 	and.w	r8, r8, #15
 800b730:	2503      	movs	r5, #3
 800b732:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ba08 <_dtoa_r+0x640>
 800b736:	f1b8 0f00 	cmp.w	r8, #0
 800b73a:	d10a      	bne.n	800b752 <_dtoa_r+0x38a>
 800b73c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b740:	4632      	mov	r2, r6
 800b742:	463b      	mov	r3, r7
 800b744:	f7f5 f882 	bl	800084c <__aeabi_ddiv>
 800b748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b74c:	e02b      	b.n	800b7a6 <_dtoa_r+0x3de>
 800b74e:	2502      	movs	r5, #2
 800b750:	e7ef      	b.n	800b732 <_dtoa_r+0x36a>
 800b752:	f018 0f01 	tst.w	r8, #1
 800b756:	d008      	beq.n	800b76a <_dtoa_r+0x3a2>
 800b758:	4630      	mov	r0, r6
 800b75a:	4639      	mov	r1, r7
 800b75c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b760:	f7f4 ff4a 	bl	80005f8 <__aeabi_dmul>
 800b764:	3501      	adds	r5, #1
 800b766:	4606      	mov	r6, r0
 800b768:	460f      	mov	r7, r1
 800b76a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b76e:	f109 0908 	add.w	r9, r9, #8
 800b772:	e7e0      	b.n	800b736 <_dtoa_r+0x36e>
 800b774:	f000 809f 	beq.w	800b8b6 <_dtoa_r+0x4ee>
 800b778:	f1cb 0600 	rsb	r6, fp, #0
 800b77c:	4ba1      	ldr	r3, [pc, #644]	; (800ba04 <_dtoa_r+0x63c>)
 800b77e:	4fa2      	ldr	r7, [pc, #648]	; (800ba08 <_dtoa_r+0x640>)
 800b780:	f006 020f 	and.w	r2, r6, #15
 800b784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	ec51 0b18 	vmov	r0, r1, d8
 800b790:	f7f4 ff32 	bl	80005f8 <__aeabi_dmul>
 800b794:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b798:	1136      	asrs	r6, r6, #4
 800b79a:	2300      	movs	r3, #0
 800b79c:	2502      	movs	r5, #2
 800b79e:	2e00      	cmp	r6, #0
 800b7a0:	d17e      	bne.n	800b8a0 <_dtoa_r+0x4d8>
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1d0      	bne.n	800b748 <_dtoa_r+0x380>
 800b7a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 8084 	beq.w	800b8ba <_dtoa_r+0x4f2>
 800b7b2:	4b96      	ldr	r3, [pc, #600]	; (800ba0c <_dtoa_r+0x644>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	f7f5 f98f 	bl	8000adc <__aeabi_dcmplt>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d07b      	beq.n	800b8ba <_dtoa_r+0x4f2>
 800b7c2:	9b04      	ldr	r3, [sp, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d078      	beq.n	800b8ba <_dtoa_r+0x4f2>
 800b7c8:	9b01      	ldr	r3, [sp, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	dd39      	ble.n	800b842 <_dtoa_r+0x47a>
 800b7ce:	4b90      	ldr	r3, [pc, #576]	; (800ba10 <_dtoa_r+0x648>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	f7f4 ff0f 	bl	80005f8 <__aeabi_dmul>
 800b7da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7de:	9e01      	ldr	r6, [sp, #4]
 800b7e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f7f4 fe9a 	bl	8000524 <__aeabi_i2d>
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	f7f4 ff00 	bl	80005f8 <__aeabi_dmul>
 800b7f8:	4b86      	ldr	r3, [pc, #536]	; (800ba14 <_dtoa_r+0x64c>)
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f7f4 fd46 	bl	800028c <__adddf3>
 800b800:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b808:	9303      	str	r3, [sp, #12]
 800b80a:	2e00      	cmp	r6, #0
 800b80c:	d158      	bne.n	800b8c0 <_dtoa_r+0x4f8>
 800b80e:	4b82      	ldr	r3, [pc, #520]	; (800ba18 <_dtoa_r+0x650>)
 800b810:	2200      	movs	r2, #0
 800b812:	4640      	mov	r0, r8
 800b814:	4649      	mov	r1, r9
 800b816:	f7f4 fd37 	bl	8000288 <__aeabi_dsub>
 800b81a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b81e:	4680      	mov	r8, r0
 800b820:	4689      	mov	r9, r1
 800b822:	f7f5 f979 	bl	8000b18 <__aeabi_dcmpgt>
 800b826:	2800      	cmp	r0, #0
 800b828:	f040 8296 	bne.w	800bd58 <_dtoa_r+0x990>
 800b82c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b830:	4640      	mov	r0, r8
 800b832:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b836:	4649      	mov	r1, r9
 800b838:	f7f5 f950 	bl	8000adc <__aeabi_dcmplt>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	f040 8289 	bne.w	800bd54 <_dtoa_r+0x98c>
 800b842:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f2c0 814e 	blt.w	800baea <_dtoa_r+0x722>
 800b84e:	f1bb 0f0e 	cmp.w	fp, #14
 800b852:	f300 814a 	bgt.w	800baea <_dtoa_r+0x722>
 800b856:	4b6b      	ldr	r3, [pc, #428]	; (800ba04 <_dtoa_r+0x63c>)
 800b858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b85c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b862:	2b00      	cmp	r3, #0
 800b864:	f280 80dc 	bge.w	800ba20 <_dtoa_r+0x658>
 800b868:	9b04      	ldr	r3, [sp, #16]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f300 80d8 	bgt.w	800ba20 <_dtoa_r+0x658>
 800b870:	f040 826f 	bne.w	800bd52 <_dtoa_r+0x98a>
 800b874:	4b68      	ldr	r3, [pc, #416]	; (800ba18 <_dtoa_r+0x650>)
 800b876:	2200      	movs	r2, #0
 800b878:	4640      	mov	r0, r8
 800b87a:	4649      	mov	r1, r9
 800b87c:	f7f4 febc 	bl	80005f8 <__aeabi_dmul>
 800b880:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b884:	f7f5 f93e 	bl	8000b04 <__aeabi_dcmpge>
 800b888:	9e04      	ldr	r6, [sp, #16]
 800b88a:	4637      	mov	r7, r6
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f040 8245 	bne.w	800bd1c <_dtoa_r+0x954>
 800b892:	9d00      	ldr	r5, [sp, #0]
 800b894:	2331      	movs	r3, #49	; 0x31
 800b896:	f805 3b01 	strb.w	r3, [r5], #1
 800b89a:	f10b 0b01 	add.w	fp, fp, #1
 800b89e:	e241      	b.n	800bd24 <_dtoa_r+0x95c>
 800b8a0:	07f2      	lsls	r2, r6, #31
 800b8a2:	d505      	bpl.n	800b8b0 <_dtoa_r+0x4e8>
 800b8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8a8:	f7f4 fea6 	bl	80005f8 <__aeabi_dmul>
 800b8ac:	3501      	adds	r5, #1
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	1076      	asrs	r6, r6, #1
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	e773      	b.n	800b79e <_dtoa_r+0x3d6>
 800b8b6:	2502      	movs	r5, #2
 800b8b8:	e775      	b.n	800b7a6 <_dtoa_r+0x3de>
 800b8ba:	9e04      	ldr	r6, [sp, #16]
 800b8bc:	465f      	mov	r7, fp
 800b8be:	e792      	b.n	800b7e6 <_dtoa_r+0x41e>
 800b8c0:	9900      	ldr	r1, [sp, #0]
 800b8c2:	4b50      	ldr	r3, [pc, #320]	; (800ba04 <_dtoa_r+0x63c>)
 800b8c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8c8:	4431      	add	r1, r6
 800b8ca:	9102      	str	r1, [sp, #8]
 800b8cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8ce:	eeb0 9a47 	vmov.f32	s18, s14
 800b8d2:	eef0 9a67 	vmov.f32	s19, s15
 800b8d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b8da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8de:	2900      	cmp	r1, #0
 800b8e0:	d044      	beq.n	800b96c <_dtoa_r+0x5a4>
 800b8e2:	494e      	ldr	r1, [pc, #312]	; (800ba1c <_dtoa_r+0x654>)
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	f7f4 ffb1 	bl	800084c <__aeabi_ddiv>
 800b8ea:	ec53 2b19 	vmov	r2, r3, d9
 800b8ee:	f7f4 fccb 	bl	8000288 <__aeabi_dsub>
 800b8f2:	9d00      	ldr	r5, [sp, #0]
 800b8f4:	ec41 0b19 	vmov	d9, r0, r1
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	f7f5 f92c 	bl	8000b58 <__aeabi_d2iz>
 800b900:	4606      	mov	r6, r0
 800b902:	f7f4 fe0f 	bl	8000524 <__aeabi_i2d>
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	4640      	mov	r0, r8
 800b90c:	4649      	mov	r1, r9
 800b90e:	f7f4 fcbb 	bl	8000288 <__aeabi_dsub>
 800b912:	3630      	adds	r6, #48	; 0x30
 800b914:	f805 6b01 	strb.w	r6, [r5], #1
 800b918:	ec53 2b19 	vmov	r2, r3, d9
 800b91c:	4680      	mov	r8, r0
 800b91e:	4689      	mov	r9, r1
 800b920:	f7f5 f8dc 	bl	8000adc <__aeabi_dcmplt>
 800b924:	2800      	cmp	r0, #0
 800b926:	d164      	bne.n	800b9f2 <_dtoa_r+0x62a>
 800b928:	4642      	mov	r2, r8
 800b92a:	464b      	mov	r3, r9
 800b92c:	4937      	ldr	r1, [pc, #220]	; (800ba0c <_dtoa_r+0x644>)
 800b92e:	2000      	movs	r0, #0
 800b930:	f7f4 fcaa 	bl	8000288 <__aeabi_dsub>
 800b934:	ec53 2b19 	vmov	r2, r3, d9
 800b938:	f7f5 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	f040 80b6 	bne.w	800baae <_dtoa_r+0x6e6>
 800b942:	9b02      	ldr	r3, [sp, #8]
 800b944:	429d      	cmp	r5, r3
 800b946:	f43f af7c 	beq.w	800b842 <_dtoa_r+0x47a>
 800b94a:	4b31      	ldr	r3, [pc, #196]	; (800ba10 <_dtoa_r+0x648>)
 800b94c:	ec51 0b19 	vmov	r0, r1, d9
 800b950:	2200      	movs	r2, #0
 800b952:	f7f4 fe51 	bl	80005f8 <__aeabi_dmul>
 800b956:	4b2e      	ldr	r3, [pc, #184]	; (800ba10 <_dtoa_r+0x648>)
 800b958:	ec41 0b19 	vmov	d9, r0, r1
 800b95c:	2200      	movs	r2, #0
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f4 fe49 	bl	80005f8 <__aeabi_dmul>
 800b966:	4680      	mov	r8, r0
 800b968:	4689      	mov	r9, r1
 800b96a:	e7c5      	b.n	800b8f8 <_dtoa_r+0x530>
 800b96c:	ec51 0b17 	vmov	r0, r1, d7
 800b970:	f7f4 fe42 	bl	80005f8 <__aeabi_dmul>
 800b974:	9b02      	ldr	r3, [sp, #8]
 800b976:	9d00      	ldr	r5, [sp, #0]
 800b978:	930f      	str	r3, [sp, #60]	; 0x3c
 800b97a:	ec41 0b19 	vmov	d9, r0, r1
 800b97e:	4649      	mov	r1, r9
 800b980:	4640      	mov	r0, r8
 800b982:	f7f5 f8e9 	bl	8000b58 <__aeabi_d2iz>
 800b986:	4606      	mov	r6, r0
 800b988:	f7f4 fdcc 	bl	8000524 <__aeabi_i2d>
 800b98c:	3630      	adds	r6, #48	; 0x30
 800b98e:	4602      	mov	r2, r0
 800b990:	460b      	mov	r3, r1
 800b992:	4640      	mov	r0, r8
 800b994:	4649      	mov	r1, r9
 800b996:	f7f4 fc77 	bl	8000288 <__aeabi_dsub>
 800b99a:	f805 6b01 	strb.w	r6, [r5], #1
 800b99e:	9b02      	ldr	r3, [sp, #8]
 800b9a0:	429d      	cmp	r5, r3
 800b9a2:	4680      	mov	r8, r0
 800b9a4:	4689      	mov	r9, r1
 800b9a6:	f04f 0200 	mov.w	r2, #0
 800b9aa:	d124      	bne.n	800b9f6 <_dtoa_r+0x62e>
 800b9ac:	4b1b      	ldr	r3, [pc, #108]	; (800ba1c <_dtoa_r+0x654>)
 800b9ae:	ec51 0b19 	vmov	r0, r1, d9
 800b9b2:	f7f4 fc6b 	bl	800028c <__adddf3>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	4649      	mov	r1, r9
 800b9be:	f7f5 f8ab 	bl	8000b18 <__aeabi_dcmpgt>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d173      	bne.n	800baae <_dtoa_r+0x6e6>
 800b9c6:	ec53 2b19 	vmov	r2, r3, d9
 800b9ca:	4914      	ldr	r1, [pc, #80]	; (800ba1c <_dtoa_r+0x654>)
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	f7f4 fc5b 	bl	8000288 <__aeabi_dsub>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4640      	mov	r0, r8
 800b9d8:	4649      	mov	r1, r9
 800b9da:	f7f5 f87f 	bl	8000adc <__aeabi_dcmplt>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f43f af2f 	beq.w	800b842 <_dtoa_r+0x47a>
 800b9e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b9e6:	1e6b      	subs	r3, r5, #1
 800b9e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9ee:	2b30      	cmp	r3, #48	; 0x30
 800b9f0:	d0f8      	beq.n	800b9e4 <_dtoa_r+0x61c>
 800b9f2:	46bb      	mov	fp, r7
 800b9f4:	e04a      	b.n	800ba8c <_dtoa_r+0x6c4>
 800b9f6:	4b06      	ldr	r3, [pc, #24]	; (800ba10 <_dtoa_r+0x648>)
 800b9f8:	f7f4 fdfe 	bl	80005f8 <__aeabi_dmul>
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	4689      	mov	r9, r1
 800ba00:	e7bd      	b.n	800b97e <_dtoa_r+0x5b6>
 800ba02:	bf00      	nop
 800ba04:	0800ddc8 	.word	0x0800ddc8
 800ba08:	0800dda0 	.word	0x0800dda0
 800ba0c:	3ff00000 	.word	0x3ff00000
 800ba10:	40240000 	.word	0x40240000
 800ba14:	401c0000 	.word	0x401c0000
 800ba18:	40140000 	.word	0x40140000
 800ba1c:	3fe00000 	.word	0x3fe00000
 800ba20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba24:	9d00      	ldr	r5, [sp, #0]
 800ba26:	4642      	mov	r2, r8
 800ba28:	464b      	mov	r3, r9
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	f7f4 ff0d 	bl	800084c <__aeabi_ddiv>
 800ba32:	f7f5 f891 	bl	8000b58 <__aeabi_d2iz>
 800ba36:	9001      	str	r0, [sp, #4]
 800ba38:	f7f4 fd74 	bl	8000524 <__aeabi_i2d>
 800ba3c:	4642      	mov	r2, r8
 800ba3e:	464b      	mov	r3, r9
 800ba40:	f7f4 fdda 	bl	80005f8 <__aeabi_dmul>
 800ba44:	4602      	mov	r2, r0
 800ba46:	460b      	mov	r3, r1
 800ba48:	4630      	mov	r0, r6
 800ba4a:	4639      	mov	r1, r7
 800ba4c:	f7f4 fc1c 	bl	8000288 <__aeabi_dsub>
 800ba50:	9e01      	ldr	r6, [sp, #4]
 800ba52:	9f04      	ldr	r7, [sp, #16]
 800ba54:	3630      	adds	r6, #48	; 0x30
 800ba56:	f805 6b01 	strb.w	r6, [r5], #1
 800ba5a:	9e00      	ldr	r6, [sp, #0]
 800ba5c:	1bae      	subs	r6, r5, r6
 800ba5e:	42b7      	cmp	r7, r6
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	d134      	bne.n	800bad0 <_dtoa_r+0x708>
 800ba66:	f7f4 fc11 	bl	800028c <__adddf3>
 800ba6a:	4642      	mov	r2, r8
 800ba6c:	464b      	mov	r3, r9
 800ba6e:	4606      	mov	r6, r0
 800ba70:	460f      	mov	r7, r1
 800ba72:	f7f5 f851 	bl	8000b18 <__aeabi_dcmpgt>
 800ba76:	b9c8      	cbnz	r0, 800baac <_dtoa_r+0x6e4>
 800ba78:	4642      	mov	r2, r8
 800ba7a:	464b      	mov	r3, r9
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	4639      	mov	r1, r7
 800ba80:	f7f5 f822 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba84:	b110      	cbz	r0, 800ba8c <_dtoa_r+0x6c4>
 800ba86:	9b01      	ldr	r3, [sp, #4]
 800ba88:	07db      	lsls	r3, r3, #31
 800ba8a:	d40f      	bmi.n	800baac <_dtoa_r+0x6e4>
 800ba8c:	4651      	mov	r1, sl
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 fbcc 	bl	800c22c <_Bfree>
 800ba94:	2300      	movs	r3, #0
 800ba96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ba98:	702b      	strb	r3, [r5, #0]
 800ba9a:	f10b 0301 	add.w	r3, fp, #1
 800ba9e:	6013      	str	r3, [r2, #0]
 800baa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f43f ace2 	beq.w	800b46c <_dtoa_r+0xa4>
 800baa8:	601d      	str	r5, [r3, #0]
 800baaa:	e4df      	b.n	800b46c <_dtoa_r+0xa4>
 800baac:	465f      	mov	r7, fp
 800baae:	462b      	mov	r3, r5
 800bab0:	461d      	mov	r5, r3
 800bab2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bab6:	2a39      	cmp	r2, #57	; 0x39
 800bab8:	d106      	bne.n	800bac8 <_dtoa_r+0x700>
 800baba:	9a00      	ldr	r2, [sp, #0]
 800babc:	429a      	cmp	r2, r3
 800babe:	d1f7      	bne.n	800bab0 <_dtoa_r+0x6e8>
 800bac0:	9900      	ldr	r1, [sp, #0]
 800bac2:	2230      	movs	r2, #48	; 0x30
 800bac4:	3701      	adds	r7, #1
 800bac6:	700a      	strb	r2, [r1, #0]
 800bac8:	781a      	ldrb	r2, [r3, #0]
 800baca:	3201      	adds	r2, #1
 800bacc:	701a      	strb	r2, [r3, #0]
 800bace:	e790      	b.n	800b9f2 <_dtoa_r+0x62a>
 800bad0:	4ba3      	ldr	r3, [pc, #652]	; (800bd60 <_dtoa_r+0x998>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	f7f4 fd90 	bl	80005f8 <__aeabi_dmul>
 800bad8:	2200      	movs	r2, #0
 800bada:	2300      	movs	r3, #0
 800badc:	4606      	mov	r6, r0
 800bade:	460f      	mov	r7, r1
 800bae0:	f7f4 fff2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d09e      	beq.n	800ba26 <_dtoa_r+0x65e>
 800bae8:	e7d0      	b.n	800ba8c <_dtoa_r+0x6c4>
 800baea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baec:	2a00      	cmp	r2, #0
 800baee:	f000 80ca 	beq.w	800bc86 <_dtoa_r+0x8be>
 800baf2:	9a07      	ldr	r2, [sp, #28]
 800baf4:	2a01      	cmp	r2, #1
 800baf6:	f300 80ad 	bgt.w	800bc54 <_dtoa_r+0x88c>
 800bafa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	f000 80a5 	beq.w	800bc4c <_dtoa_r+0x884>
 800bb02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb06:	9e08      	ldr	r6, [sp, #32]
 800bb08:	9d05      	ldr	r5, [sp, #20]
 800bb0a:	9a05      	ldr	r2, [sp, #20]
 800bb0c:	441a      	add	r2, r3
 800bb0e:	9205      	str	r2, [sp, #20]
 800bb10:	9a06      	ldr	r2, [sp, #24]
 800bb12:	2101      	movs	r1, #1
 800bb14:	441a      	add	r2, r3
 800bb16:	4620      	mov	r0, r4
 800bb18:	9206      	str	r2, [sp, #24]
 800bb1a:	f000 fc3d 	bl	800c398 <__i2b>
 800bb1e:	4607      	mov	r7, r0
 800bb20:	b165      	cbz	r5, 800bb3c <_dtoa_r+0x774>
 800bb22:	9b06      	ldr	r3, [sp, #24]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	dd09      	ble.n	800bb3c <_dtoa_r+0x774>
 800bb28:	42ab      	cmp	r3, r5
 800bb2a:	9a05      	ldr	r2, [sp, #20]
 800bb2c:	bfa8      	it	ge
 800bb2e:	462b      	movge	r3, r5
 800bb30:	1ad2      	subs	r2, r2, r3
 800bb32:	9205      	str	r2, [sp, #20]
 800bb34:	9a06      	ldr	r2, [sp, #24]
 800bb36:	1aed      	subs	r5, r5, r3
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	9306      	str	r3, [sp, #24]
 800bb3c:	9b08      	ldr	r3, [sp, #32]
 800bb3e:	b1f3      	cbz	r3, 800bb7e <_dtoa_r+0x7b6>
 800bb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	f000 80a3 	beq.w	800bc8e <_dtoa_r+0x8c6>
 800bb48:	2e00      	cmp	r6, #0
 800bb4a:	dd10      	ble.n	800bb6e <_dtoa_r+0x7a6>
 800bb4c:	4639      	mov	r1, r7
 800bb4e:	4632      	mov	r2, r6
 800bb50:	4620      	mov	r0, r4
 800bb52:	f000 fce1 	bl	800c518 <__pow5mult>
 800bb56:	4652      	mov	r2, sl
 800bb58:	4601      	mov	r1, r0
 800bb5a:	4607      	mov	r7, r0
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 fc31 	bl	800c3c4 <__multiply>
 800bb62:	4651      	mov	r1, sl
 800bb64:	4680      	mov	r8, r0
 800bb66:	4620      	mov	r0, r4
 800bb68:	f000 fb60 	bl	800c22c <_Bfree>
 800bb6c:	46c2      	mov	sl, r8
 800bb6e:	9b08      	ldr	r3, [sp, #32]
 800bb70:	1b9a      	subs	r2, r3, r6
 800bb72:	d004      	beq.n	800bb7e <_dtoa_r+0x7b6>
 800bb74:	4651      	mov	r1, sl
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 fcce 	bl	800c518 <__pow5mult>
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	2101      	movs	r1, #1
 800bb80:	4620      	mov	r0, r4
 800bb82:	f000 fc09 	bl	800c398 <__i2b>
 800bb86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	f340 8081 	ble.w	800bc92 <_dtoa_r+0x8ca>
 800bb90:	461a      	mov	r2, r3
 800bb92:	4601      	mov	r1, r0
 800bb94:	4620      	mov	r0, r4
 800bb96:	f000 fcbf 	bl	800c518 <__pow5mult>
 800bb9a:	9b07      	ldr	r3, [sp, #28]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	4606      	mov	r6, r0
 800bba0:	dd7a      	ble.n	800bc98 <_dtoa_r+0x8d0>
 800bba2:	f04f 0800 	mov.w	r8, #0
 800bba6:	6933      	ldr	r3, [r6, #16]
 800bba8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bbac:	6918      	ldr	r0, [r3, #16]
 800bbae:	f000 fba5 	bl	800c2fc <__hi0bits>
 800bbb2:	f1c0 0020 	rsb	r0, r0, #32
 800bbb6:	9b06      	ldr	r3, [sp, #24]
 800bbb8:	4418      	add	r0, r3
 800bbba:	f010 001f 	ands.w	r0, r0, #31
 800bbbe:	f000 8094 	beq.w	800bcea <_dtoa_r+0x922>
 800bbc2:	f1c0 0320 	rsb	r3, r0, #32
 800bbc6:	2b04      	cmp	r3, #4
 800bbc8:	f340 8085 	ble.w	800bcd6 <_dtoa_r+0x90e>
 800bbcc:	9b05      	ldr	r3, [sp, #20]
 800bbce:	f1c0 001c 	rsb	r0, r0, #28
 800bbd2:	4403      	add	r3, r0
 800bbd4:	9305      	str	r3, [sp, #20]
 800bbd6:	9b06      	ldr	r3, [sp, #24]
 800bbd8:	4403      	add	r3, r0
 800bbda:	4405      	add	r5, r0
 800bbdc:	9306      	str	r3, [sp, #24]
 800bbde:	9b05      	ldr	r3, [sp, #20]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	dd05      	ble.n	800bbf0 <_dtoa_r+0x828>
 800bbe4:	4651      	mov	r1, sl
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f000 fcef 	bl	800c5cc <__lshift>
 800bbee:	4682      	mov	sl, r0
 800bbf0:	9b06      	ldr	r3, [sp, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	dd05      	ble.n	800bc02 <_dtoa_r+0x83a>
 800bbf6:	4631      	mov	r1, r6
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 fce6 	bl	800c5cc <__lshift>
 800bc00:	4606      	mov	r6, r0
 800bc02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d072      	beq.n	800bcee <_dtoa_r+0x926>
 800bc08:	4631      	mov	r1, r6
 800bc0a:	4650      	mov	r0, sl
 800bc0c:	f000 fd4a 	bl	800c6a4 <__mcmp>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	da6c      	bge.n	800bcee <_dtoa_r+0x926>
 800bc14:	2300      	movs	r3, #0
 800bc16:	4651      	mov	r1, sl
 800bc18:	220a      	movs	r2, #10
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 fb28 	bl	800c270 <__multadd>
 800bc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc26:	4682      	mov	sl, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 81b0 	beq.w	800bf8e <_dtoa_r+0xbc6>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	4639      	mov	r1, r7
 800bc32:	220a      	movs	r2, #10
 800bc34:	4620      	mov	r0, r4
 800bc36:	f000 fb1b 	bl	800c270 <__multadd>
 800bc3a:	9b01      	ldr	r3, [sp, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	4607      	mov	r7, r0
 800bc40:	f300 8096 	bgt.w	800bd70 <_dtoa_r+0x9a8>
 800bc44:	9b07      	ldr	r3, [sp, #28]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	dc59      	bgt.n	800bcfe <_dtoa_r+0x936>
 800bc4a:	e091      	b.n	800bd70 <_dtoa_r+0x9a8>
 800bc4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc52:	e758      	b.n	800bb06 <_dtoa_r+0x73e>
 800bc54:	9b04      	ldr	r3, [sp, #16]
 800bc56:	1e5e      	subs	r6, r3, #1
 800bc58:	9b08      	ldr	r3, [sp, #32]
 800bc5a:	42b3      	cmp	r3, r6
 800bc5c:	bfbf      	itttt	lt
 800bc5e:	9b08      	ldrlt	r3, [sp, #32]
 800bc60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bc62:	9608      	strlt	r6, [sp, #32]
 800bc64:	1af3      	sublt	r3, r6, r3
 800bc66:	bfb4      	ite	lt
 800bc68:	18d2      	addlt	r2, r2, r3
 800bc6a:	1b9e      	subge	r6, r3, r6
 800bc6c:	9b04      	ldr	r3, [sp, #16]
 800bc6e:	bfbc      	itt	lt
 800bc70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bc72:	2600      	movlt	r6, #0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	bfb7      	itett	lt
 800bc78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800bc7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800bc80:	1a9d      	sublt	r5, r3, r2
 800bc82:	2300      	movlt	r3, #0
 800bc84:	e741      	b.n	800bb0a <_dtoa_r+0x742>
 800bc86:	9e08      	ldr	r6, [sp, #32]
 800bc88:	9d05      	ldr	r5, [sp, #20]
 800bc8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc8c:	e748      	b.n	800bb20 <_dtoa_r+0x758>
 800bc8e:	9a08      	ldr	r2, [sp, #32]
 800bc90:	e770      	b.n	800bb74 <_dtoa_r+0x7ac>
 800bc92:	9b07      	ldr	r3, [sp, #28]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	dc19      	bgt.n	800bccc <_dtoa_r+0x904>
 800bc98:	9b02      	ldr	r3, [sp, #8]
 800bc9a:	b9bb      	cbnz	r3, 800bccc <_dtoa_r+0x904>
 800bc9c:	9b03      	ldr	r3, [sp, #12]
 800bc9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bca2:	b99b      	cbnz	r3, 800bccc <_dtoa_r+0x904>
 800bca4:	9b03      	ldr	r3, [sp, #12]
 800bca6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bcaa:	0d1b      	lsrs	r3, r3, #20
 800bcac:	051b      	lsls	r3, r3, #20
 800bcae:	b183      	cbz	r3, 800bcd2 <_dtoa_r+0x90a>
 800bcb0:	9b05      	ldr	r3, [sp, #20]
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	9305      	str	r3, [sp, #20]
 800bcb6:	9b06      	ldr	r3, [sp, #24]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	9306      	str	r3, [sp, #24]
 800bcbc:	f04f 0801 	mov.w	r8, #1
 800bcc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f47f af6f 	bne.w	800bba6 <_dtoa_r+0x7de>
 800bcc8:	2001      	movs	r0, #1
 800bcca:	e774      	b.n	800bbb6 <_dtoa_r+0x7ee>
 800bccc:	f04f 0800 	mov.w	r8, #0
 800bcd0:	e7f6      	b.n	800bcc0 <_dtoa_r+0x8f8>
 800bcd2:	4698      	mov	r8, r3
 800bcd4:	e7f4      	b.n	800bcc0 <_dtoa_r+0x8f8>
 800bcd6:	d082      	beq.n	800bbde <_dtoa_r+0x816>
 800bcd8:	9a05      	ldr	r2, [sp, #20]
 800bcda:	331c      	adds	r3, #28
 800bcdc:	441a      	add	r2, r3
 800bcde:	9205      	str	r2, [sp, #20]
 800bce0:	9a06      	ldr	r2, [sp, #24]
 800bce2:	441a      	add	r2, r3
 800bce4:	441d      	add	r5, r3
 800bce6:	9206      	str	r2, [sp, #24]
 800bce8:	e779      	b.n	800bbde <_dtoa_r+0x816>
 800bcea:	4603      	mov	r3, r0
 800bcec:	e7f4      	b.n	800bcd8 <_dtoa_r+0x910>
 800bcee:	9b04      	ldr	r3, [sp, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	dc37      	bgt.n	800bd64 <_dtoa_r+0x99c>
 800bcf4:	9b07      	ldr	r3, [sp, #28]
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	dd34      	ble.n	800bd64 <_dtoa_r+0x99c>
 800bcfa:	9b04      	ldr	r3, [sp, #16]
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	b963      	cbnz	r3, 800bd1c <_dtoa_r+0x954>
 800bd02:	4631      	mov	r1, r6
 800bd04:	2205      	movs	r2, #5
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 fab2 	bl	800c270 <__multadd>
 800bd0c:	4601      	mov	r1, r0
 800bd0e:	4606      	mov	r6, r0
 800bd10:	4650      	mov	r0, sl
 800bd12:	f000 fcc7 	bl	800c6a4 <__mcmp>
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f73f adbb 	bgt.w	800b892 <_dtoa_r+0x4ca>
 800bd1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1e:	9d00      	ldr	r5, [sp, #0]
 800bd20:	ea6f 0b03 	mvn.w	fp, r3
 800bd24:	f04f 0800 	mov.w	r8, #0
 800bd28:	4631      	mov	r1, r6
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f000 fa7e 	bl	800c22c <_Bfree>
 800bd30:	2f00      	cmp	r7, #0
 800bd32:	f43f aeab 	beq.w	800ba8c <_dtoa_r+0x6c4>
 800bd36:	f1b8 0f00 	cmp.w	r8, #0
 800bd3a:	d005      	beq.n	800bd48 <_dtoa_r+0x980>
 800bd3c:	45b8      	cmp	r8, r7
 800bd3e:	d003      	beq.n	800bd48 <_dtoa_r+0x980>
 800bd40:	4641      	mov	r1, r8
 800bd42:	4620      	mov	r0, r4
 800bd44:	f000 fa72 	bl	800c22c <_Bfree>
 800bd48:	4639      	mov	r1, r7
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f000 fa6e 	bl	800c22c <_Bfree>
 800bd50:	e69c      	b.n	800ba8c <_dtoa_r+0x6c4>
 800bd52:	2600      	movs	r6, #0
 800bd54:	4637      	mov	r7, r6
 800bd56:	e7e1      	b.n	800bd1c <_dtoa_r+0x954>
 800bd58:	46bb      	mov	fp, r7
 800bd5a:	4637      	mov	r7, r6
 800bd5c:	e599      	b.n	800b892 <_dtoa_r+0x4ca>
 800bd5e:	bf00      	nop
 800bd60:	40240000 	.word	0x40240000
 800bd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f000 80c8 	beq.w	800befc <_dtoa_r+0xb34>
 800bd6c:	9b04      	ldr	r3, [sp, #16]
 800bd6e:	9301      	str	r3, [sp, #4]
 800bd70:	2d00      	cmp	r5, #0
 800bd72:	dd05      	ble.n	800bd80 <_dtoa_r+0x9b8>
 800bd74:	4639      	mov	r1, r7
 800bd76:	462a      	mov	r2, r5
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f000 fc27 	bl	800c5cc <__lshift>
 800bd7e:	4607      	mov	r7, r0
 800bd80:	f1b8 0f00 	cmp.w	r8, #0
 800bd84:	d05b      	beq.n	800be3e <_dtoa_r+0xa76>
 800bd86:	6879      	ldr	r1, [r7, #4]
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 fa0f 	bl	800c1ac <_Balloc>
 800bd8e:	4605      	mov	r5, r0
 800bd90:	b928      	cbnz	r0, 800bd9e <_dtoa_r+0x9d6>
 800bd92:	4b83      	ldr	r3, [pc, #524]	; (800bfa0 <_dtoa_r+0xbd8>)
 800bd94:	4602      	mov	r2, r0
 800bd96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bd9a:	f7ff bb2e 	b.w	800b3fa <_dtoa_r+0x32>
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	3202      	adds	r2, #2
 800bda2:	0092      	lsls	r2, r2, #2
 800bda4:	f107 010c 	add.w	r1, r7, #12
 800bda8:	300c      	adds	r0, #12
 800bdaa:	f000 ffab 	bl	800cd04 <memcpy>
 800bdae:	2201      	movs	r2, #1
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f000 fc0a 	bl	800c5cc <__lshift>
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	9304      	str	r3, [sp, #16]
 800bdbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	9308      	str	r3, [sp, #32]
 800bdc6:	9b02      	ldr	r3, [sp, #8]
 800bdc8:	f003 0301 	and.w	r3, r3, #1
 800bdcc:	46b8      	mov	r8, r7
 800bdce:	9306      	str	r3, [sp, #24]
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	9b04      	ldr	r3, [sp, #16]
 800bdd4:	4631      	mov	r1, r6
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	4650      	mov	r0, sl
 800bdda:	9301      	str	r3, [sp, #4]
 800bddc:	f7ff fa6c 	bl	800b2b8 <quorem>
 800bde0:	4641      	mov	r1, r8
 800bde2:	9002      	str	r0, [sp, #8]
 800bde4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bde8:	4650      	mov	r0, sl
 800bdea:	f000 fc5b 	bl	800c6a4 <__mcmp>
 800bdee:	463a      	mov	r2, r7
 800bdf0:	9005      	str	r0, [sp, #20]
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	f000 fc71 	bl	800c6dc <__mdiff>
 800bdfa:	68c2      	ldr	r2, [r0, #12]
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	bb02      	cbnz	r2, 800be42 <_dtoa_r+0xa7a>
 800be00:	4601      	mov	r1, r0
 800be02:	4650      	mov	r0, sl
 800be04:	f000 fc4e 	bl	800c6a4 <__mcmp>
 800be08:	4602      	mov	r2, r0
 800be0a:	4629      	mov	r1, r5
 800be0c:	4620      	mov	r0, r4
 800be0e:	9209      	str	r2, [sp, #36]	; 0x24
 800be10:	f000 fa0c 	bl	800c22c <_Bfree>
 800be14:	9b07      	ldr	r3, [sp, #28]
 800be16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be18:	9d04      	ldr	r5, [sp, #16]
 800be1a:	ea43 0102 	orr.w	r1, r3, r2
 800be1e:	9b06      	ldr	r3, [sp, #24]
 800be20:	4319      	orrs	r1, r3
 800be22:	d110      	bne.n	800be46 <_dtoa_r+0xa7e>
 800be24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be28:	d029      	beq.n	800be7e <_dtoa_r+0xab6>
 800be2a:	9b05      	ldr	r3, [sp, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dd02      	ble.n	800be36 <_dtoa_r+0xa6e>
 800be30:	9b02      	ldr	r3, [sp, #8]
 800be32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800be36:	9b01      	ldr	r3, [sp, #4]
 800be38:	f883 9000 	strb.w	r9, [r3]
 800be3c:	e774      	b.n	800bd28 <_dtoa_r+0x960>
 800be3e:	4638      	mov	r0, r7
 800be40:	e7ba      	b.n	800bdb8 <_dtoa_r+0x9f0>
 800be42:	2201      	movs	r2, #1
 800be44:	e7e1      	b.n	800be0a <_dtoa_r+0xa42>
 800be46:	9b05      	ldr	r3, [sp, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	db04      	blt.n	800be56 <_dtoa_r+0xa8e>
 800be4c:	9907      	ldr	r1, [sp, #28]
 800be4e:	430b      	orrs	r3, r1
 800be50:	9906      	ldr	r1, [sp, #24]
 800be52:	430b      	orrs	r3, r1
 800be54:	d120      	bne.n	800be98 <_dtoa_r+0xad0>
 800be56:	2a00      	cmp	r2, #0
 800be58:	dded      	ble.n	800be36 <_dtoa_r+0xa6e>
 800be5a:	4651      	mov	r1, sl
 800be5c:	2201      	movs	r2, #1
 800be5e:	4620      	mov	r0, r4
 800be60:	f000 fbb4 	bl	800c5cc <__lshift>
 800be64:	4631      	mov	r1, r6
 800be66:	4682      	mov	sl, r0
 800be68:	f000 fc1c 	bl	800c6a4 <__mcmp>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	dc03      	bgt.n	800be78 <_dtoa_r+0xab0>
 800be70:	d1e1      	bne.n	800be36 <_dtoa_r+0xa6e>
 800be72:	f019 0f01 	tst.w	r9, #1
 800be76:	d0de      	beq.n	800be36 <_dtoa_r+0xa6e>
 800be78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800be7c:	d1d8      	bne.n	800be30 <_dtoa_r+0xa68>
 800be7e:	9a01      	ldr	r2, [sp, #4]
 800be80:	2339      	movs	r3, #57	; 0x39
 800be82:	7013      	strb	r3, [r2, #0]
 800be84:	462b      	mov	r3, r5
 800be86:	461d      	mov	r5, r3
 800be88:	3b01      	subs	r3, #1
 800be8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800be8e:	2a39      	cmp	r2, #57	; 0x39
 800be90:	d06c      	beq.n	800bf6c <_dtoa_r+0xba4>
 800be92:	3201      	adds	r2, #1
 800be94:	701a      	strb	r2, [r3, #0]
 800be96:	e747      	b.n	800bd28 <_dtoa_r+0x960>
 800be98:	2a00      	cmp	r2, #0
 800be9a:	dd07      	ble.n	800beac <_dtoa_r+0xae4>
 800be9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bea0:	d0ed      	beq.n	800be7e <_dtoa_r+0xab6>
 800bea2:	9a01      	ldr	r2, [sp, #4]
 800bea4:	f109 0301 	add.w	r3, r9, #1
 800bea8:	7013      	strb	r3, [r2, #0]
 800beaa:	e73d      	b.n	800bd28 <_dtoa_r+0x960>
 800beac:	9b04      	ldr	r3, [sp, #16]
 800beae:	9a08      	ldr	r2, [sp, #32]
 800beb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d043      	beq.n	800bf40 <_dtoa_r+0xb78>
 800beb8:	4651      	mov	r1, sl
 800beba:	2300      	movs	r3, #0
 800bebc:	220a      	movs	r2, #10
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 f9d6 	bl	800c270 <__multadd>
 800bec4:	45b8      	cmp	r8, r7
 800bec6:	4682      	mov	sl, r0
 800bec8:	f04f 0300 	mov.w	r3, #0
 800becc:	f04f 020a 	mov.w	r2, #10
 800bed0:	4641      	mov	r1, r8
 800bed2:	4620      	mov	r0, r4
 800bed4:	d107      	bne.n	800bee6 <_dtoa_r+0xb1e>
 800bed6:	f000 f9cb 	bl	800c270 <__multadd>
 800beda:	4680      	mov	r8, r0
 800bedc:	4607      	mov	r7, r0
 800bede:	9b04      	ldr	r3, [sp, #16]
 800bee0:	3301      	adds	r3, #1
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	e775      	b.n	800bdd2 <_dtoa_r+0xa0a>
 800bee6:	f000 f9c3 	bl	800c270 <__multadd>
 800beea:	4639      	mov	r1, r7
 800beec:	4680      	mov	r8, r0
 800beee:	2300      	movs	r3, #0
 800bef0:	220a      	movs	r2, #10
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 f9bc 	bl	800c270 <__multadd>
 800bef8:	4607      	mov	r7, r0
 800befa:	e7f0      	b.n	800bede <_dtoa_r+0xb16>
 800befc:	9b04      	ldr	r3, [sp, #16]
 800befe:	9301      	str	r3, [sp, #4]
 800bf00:	9d00      	ldr	r5, [sp, #0]
 800bf02:	4631      	mov	r1, r6
 800bf04:	4650      	mov	r0, sl
 800bf06:	f7ff f9d7 	bl	800b2b8 <quorem>
 800bf0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bf0e:	9b00      	ldr	r3, [sp, #0]
 800bf10:	f805 9b01 	strb.w	r9, [r5], #1
 800bf14:	1aea      	subs	r2, r5, r3
 800bf16:	9b01      	ldr	r3, [sp, #4]
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	dd07      	ble.n	800bf2c <_dtoa_r+0xb64>
 800bf1c:	4651      	mov	r1, sl
 800bf1e:	2300      	movs	r3, #0
 800bf20:	220a      	movs	r2, #10
 800bf22:	4620      	mov	r0, r4
 800bf24:	f000 f9a4 	bl	800c270 <__multadd>
 800bf28:	4682      	mov	sl, r0
 800bf2a:	e7ea      	b.n	800bf02 <_dtoa_r+0xb3a>
 800bf2c:	9b01      	ldr	r3, [sp, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	bfc8      	it	gt
 800bf32:	461d      	movgt	r5, r3
 800bf34:	9b00      	ldr	r3, [sp, #0]
 800bf36:	bfd8      	it	le
 800bf38:	2501      	movle	r5, #1
 800bf3a:	441d      	add	r5, r3
 800bf3c:	f04f 0800 	mov.w	r8, #0
 800bf40:	4651      	mov	r1, sl
 800bf42:	2201      	movs	r2, #1
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 fb41 	bl	800c5cc <__lshift>
 800bf4a:	4631      	mov	r1, r6
 800bf4c:	4682      	mov	sl, r0
 800bf4e:	f000 fba9 	bl	800c6a4 <__mcmp>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	dc96      	bgt.n	800be84 <_dtoa_r+0xabc>
 800bf56:	d102      	bne.n	800bf5e <_dtoa_r+0xb96>
 800bf58:	f019 0f01 	tst.w	r9, #1
 800bf5c:	d192      	bne.n	800be84 <_dtoa_r+0xabc>
 800bf5e:	462b      	mov	r3, r5
 800bf60:	461d      	mov	r5, r3
 800bf62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf66:	2a30      	cmp	r2, #48	; 0x30
 800bf68:	d0fa      	beq.n	800bf60 <_dtoa_r+0xb98>
 800bf6a:	e6dd      	b.n	800bd28 <_dtoa_r+0x960>
 800bf6c:	9a00      	ldr	r2, [sp, #0]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d189      	bne.n	800be86 <_dtoa_r+0xabe>
 800bf72:	f10b 0b01 	add.w	fp, fp, #1
 800bf76:	2331      	movs	r3, #49	; 0x31
 800bf78:	e796      	b.n	800bea8 <_dtoa_r+0xae0>
 800bf7a:	4b0a      	ldr	r3, [pc, #40]	; (800bfa4 <_dtoa_r+0xbdc>)
 800bf7c:	f7ff ba99 	b.w	800b4b2 <_dtoa_r+0xea>
 800bf80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f47f aa6d 	bne.w	800b462 <_dtoa_r+0x9a>
 800bf88:	4b07      	ldr	r3, [pc, #28]	; (800bfa8 <_dtoa_r+0xbe0>)
 800bf8a:	f7ff ba92 	b.w	800b4b2 <_dtoa_r+0xea>
 800bf8e:	9b01      	ldr	r3, [sp, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dcb5      	bgt.n	800bf00 <_dtoa_r+0xb38>
 800bf94:	9b07      	ldr	r3, [sp, #28]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	f73f aeb1 	bgt.w	800bcfe <_dtoa_r+0x936>
 800bf9c:	e7b0      	b.n	800bf00 <_dtoa_r+0xb38>
 800bf9e:	bf00      	nop
 800bfa0:	0800dd30 	.word	0x0800dd30
 800bfa4:	0800dc90 	.word	0x0800dc90
 800bfa8:	0800dcb4 	.word	0x0800dcb4

0800bfac <_free_r>:
 800bfac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfae:	2900      	cmp	r1, #0
 800bfb0:	d044      	beq.n	800c03c <_free_r+0x90>
 800bfb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfb6:	9001      	str	r0, [sp, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f1a1 0404 	sub.w	r4, r1, #4
 800bfbe:	bfb8      	it	lt
 800bfc0:	18e4      	addlt	r4, r4, r3
 800bfc2:	f000 f8e7 	bl	800c194 <__malloc_lock>
 800bfc6:	4a1e      	ldr	r2, [pc, #120]	; (800c040 <_free_r+0x94>)
 800bfc8:	9801      	ldr	r0, [sp, #4]
 800bfca:	6813      	ldr	r3, [r2, #0]
 800bfcc:	b933      	cbnz	r3, 800bfdc <_free_r+0x30>
 800bfce:	6063      	str	r3, [r4, #4]
 800bfd0:	6014      	str	r4, [r2, #0]
 800bfd2:	b003      	add	sp, #12
 800bfd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bfd8:	f000 b8e2 	b.w	800c1a0 <__malloc_unlock>
 800bfdc:	42a3      	cmp	r3, r4
 800bfde:	d908      	bls.n	800bff2 <_free_r+0x46>
 800bfe0:	6825      	ldr	r5, [r4, #0]
 800bfe2:	1961      	adds	r1, r4, r5
 800bfe4:	428b      	cmp	r3, r1
 800bfe6:	bf01      	itttt	eq
 800bfe8:	6819      	ldreq	r1, [r3, #0]
 800bfea:	685b      	ldreq	r3, [r3, #4]
 800bfec:	1949      	addeq	r1, r1, r5
 800bfee:	6021      	streq	r1, [r4, #0]
 800bff0:	e7ed      	b.n	800bfce <_free_r+0x22>
 800bff2:	461a      	mov	r2, r3
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	b10b      	cbz	r3, 800bffc <_free_r+0x50>
 800bff8:	42a3      	cmp	r3, r4
 800bffa:	d9fa      	bls.n	800bff2 <_free_r+0x46>
 800bffc:	6811      	ldr	r1, [r2, #0]
 800bffe:	1855      	adds	r5, r2, r1
 800c000:	42a5      	cmp	r5, r4
 800c002:	d10b      	bne.n	800c01c <_free_r+0x70>
 800c004:	6824      	ldr	r4, [r4, #0]
 800c006:	4421      	add	r1, r4
 800c008:	1854      	adds	r4, r2, r1
 800c00a:	42a3      	cmp	r3, r4
 800c00c:	6011      	str	r1, [r2, #0]
 800c00e:	d1e0      	bne.n	800bfd2 <_free_r+0x26>
 800c010:	681c      	ldr	r4, [r3, #0]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	6053      	str	r3, [r2, #4]
 800c016:	440c      	add	r4, r1
 800c018:	6014      	str	r4, [r2, #0]
 800c01a:	e7da      	b.n	800bfd2 <_free_r+0x26>
 800c01c:	d902      	bls.n	800c024 <_free_r+0x78>
 800c01e:	230c      	movs	r3, #12
 800c020:	6003      	str	r3, [r0, #0]
 800c022:	e7d6      	b.n	800bfd2 <_free_r+0x26>
 800c024:	6825      	ldr	r5, [r4, #0]
 800c026:	1961      	adds	r1, r4, r5
 800c028:	428b      	cmp	r3, r1
 800c02a:	bf04      	itt	eq
 800c02c:	6819      	ldreq	r1, [r3, #0]
 800c02e:	685b      	ldreq	r3, [r3, #4]
 800c030:	6063      	str	r3, [r4, #4]
 800c032:	bf04      	itt	eq
 800c034:	1949      	addeq	r1, r1, r5
 800c036:	6021      	streq	r1, [r4, #0]
 800c038:	6054      	str	r4, [r2, #4]
 800c03a:	e7ca      	b.n	800bfd2 <_free_r+0x26>
 800c03c:	b003      	add	sp, #12
 800c03e:	bd30      	pop	{r4, r5, pc}
 800c040:	20001ef4 	.word	0x20001ef4

0800c044 <malloc>:
 800c044:	4b02      	ldr	r3, [pc, #8]	; (800c050 <malloc+0xc>)
 800c046:	4601      	mov	r1, r0
 800c048:	6818      	ldr	r0, [r3, #0]
 800c04a:	f000 b823 	b.w	800c094 <_malloc_r>
 800c04e:	bf00      	nop
 800c050:	20000064 	.word	0x20000064

0800c054 <sbrk_aligned>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	4e0e      	ldr	r6, [pc, #56]	; (800c090 <sbrk_aligned+0x3c>)
 800c058:	460c      	mov	r4, r1
 800c05a:	6831      	ldr	r1, [r6, #0]
 800c05c:	4605      	mov	r5, r0
 800c05e:	b911      	cbnz	r1, 800c066 <sbrk_aligned+0x12>
 800c060:	f000 fe40 	bl	800cce4 <_sbrk_r>
 800c064:	6030      	str	r0, [r6, #0]
 800c066:	4621      	mov	r1, r4
 800c068:	4628      	mov	r0, r5
 800c06a:	f000 fe3b 	bl	800cce4 <_sbrk_r>
 800c06e:	1c43      	adds	r3, r0, #1
 800c070:	d00a      	beq.n	800c088 <sbrk_aligned+0x34>
 800c072:	1cc4      	adds	r4, r0, #3
 800c074:	f024 0403 	bic.w	r4, r4, #3
 800c078:	42a0      	cmp	r0, r4
 800c07a:	d007      	beq.n	800c08c <sbrk_aligned+0x38>
 800c07c:	1a21      	subs	r1, r4, r0
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 fe30 	bl	800cce4 <_sbrk_r>
 800c084:	3001      	adds	r0, #1
 800c086:	d101      	bne.n	800c08c <sbrk_aligned+0x38>
 800c088:	f04f 34ff 	mov.w	r4, #4294967295
 800c08c:	4620      	mov	r0, r4
 800c08e:	bd70      	pop	{r4, r5, r6, pc}
 800c090:	20001ef8 	.word	0x20001ef8

0800c094 <_malloc_r>:
 800c094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c098:	1ccd      	adds	r5, r1, #3
 800c09a:	f025 0503 	bic.w	r5, r5, #3
 800c09e:	3508      	adds	r5, #8
 800c0a0:	2d0c      	cmp	r5, #12
 800c0a2:	bf38      	it	cc
 800c0a4:	250c      	movcc	r5, #12
 800c0a6:	2d00      	cmp	r5, #0
 800c0a8:	4607      	mov	r7, r0
 800c0aa:	db01      	blt.n	800c0b0 <_malloc_r+0x1c>
 800c0ac:	42a9      	cmp	r1, r5
 800c0ae:	d905      	bls.n	800c0bc <_malloc_r+0x28>
 800c0b0:	230c      	movs	r3, #12
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	2600      	movs	r6, #0
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c190 <_malloc_r+0xfc>
 800c0c0:	f000 f868 	bl	800c194 <__malloc_lock>
 800c0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c0c8:	461c      	mov	r4, r3
 800c0ca:	bb5c      	cbnz	r4, 800c124 <_malloc_r+0x90>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	f7ff ffc0 	bl	800c054 <sbrk_aligned>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	d155      	bne.n	800c186 <_malloc_r+0xf2>
 800c0da:	f8d8 4000 	ldr.w	r4, [r8]
 800c0de:	4626      	mov	r6, r4
 800c0e0:	2e00      	cmp	r6, #0
 800c0e2:	d145      	bne.n	800c170 <_malloc_r+0xdc>
 800c0e4:	2c00      	cmp	r4, #0
 800c0e6:	d048      	beq.n	800c17a <_malloc_r+0xe6>
 800c0e8:	6823      	ldr	r3, [r4, #0]
 800c0ea:	4631      	mov	r1, r6
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	eb04 0903 	add.w	r9, r4, r3
 800c0f2:	f000 fdf7 	bl	800cce4 <_sbrk_r>
 800c0f6:	4581      	cmp	r9, r0
 800c0f8:	d13f      	bne.n	800c17a <_malloc_r+0xe6>
 800c0fa:	6821      	ldr	r1, [r4, #0]
 800c0fc:	1a6d      	subs	r5, r5, r1
 800c0fe:	4629      	mov	r1, r5
 800c100:	4638      	mov	r0, r7
 800c102:	f7ff ffa7 	bl	800c054 <sbrk_aligned>
 800c106:	3001      	adds	r0, #1
 800c108:	d037      	beq.n	800c17a <_malloc_r+0xe6>
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	442b      	add	r3, r5
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	f8d8 3000 	ldr.w	r3, [r8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d038      	beq.n	800c18a <_malloc_r+0xf6>
 800c118:	685a      	ldr	r2, [r3, #4]
 800c11a:	42a2      	cmp	r2, r4
 800c11c:	d12b      	bne.n	800c176 <_malloc_r+0xe2>
 800c11e:	2200      	movs	r2, #0
 800c120:	605a      	str	r2, [r3, #4]
 800c122:	e00f      	b.n	800c144 <_malloc_r+0xb0>
 800c124:	6822      	ldr	r2, [r4, #0]
 800c126:	1b52      	subs	r2, r2, r5
 800c128:	d41f      	bmi.n	800c16a <_malloc_r+0xd6>
 800c12a:	2a0b      	cmp	r2, #11
 800c12c:	d917      	bls.n	800c15e <_malloc_r+0xca>
 800c12e:	1961      	adds	r1, r4, r5
 800c130:	42a3      	cmp	r3, r4
 800c132:	6025      	str	r5, [r4, #0]
 800c134:	bf18      	it	ne
 800c136:	6059      	strne	r1, [r3, #4]
 800c138:	6863      	ldr	r3, [r4, #4]
 800c13a:	bf08      	it	eq
 800c13c:	f8c8 1000 	streq.w	r1, [r8]
 800c140:	5162      	str	r2, [r4, r5]
 800c142:	604b      	str	r3, [r1, #4]
 800c144:	4638      	mov	r0, r7
 800c146:	f104 060b 	add.w	r6, r4, #11
 800c14a:	f000 f829 	bl	800c1a0 <__malloc_unlock>
 800c14e:	f026 0607 	bic.w	r6, r6, #7
 800c152:	1d23      	adds	r3, r4, #4
 800c154:	1af2      	subs	r2, r6, r3
 800c156:	d0ae      	beq.n	800c0b6 <_malloc_r+0x22>
 800c158:	1b9b      	subs	r3, r3, r6
 800c15a:	50a3      	str	r3, [r4, r2]
 800c15c:	e7ab      	b.n	800c0b6 <_malloc_r+0x22>
 800c15e:	42a3      	cmp	r3, r4
 800c160:	6862      	ldr	r2, [r4, #4]
 800c162:	d1dd      	bne.n	800c120 <_malloc_r+0x8c>
 800c164:	f8c8 2000 	str.w	r2, [r8]
 800c168:	e7ec      	b.n	800c144 <_malloc_r+0xb0>
 800c16a:	4623      	mov	r3, r4
 800c16c:	6864      	ldr	r4, [r4, #4]
 800c16e:	e7ac      	b.n	800c0ca <_malloc_r+0x36>
 800c170:	4634      	mov	r4, r6
 800c172:	6876      	ldr	r6, [r6, #4]
 800c174:	e7b4      	b.n	800c0e0 <_malloc_r+0x4c>
 800c176:	4613      	mov	r3, r2
 800c178:	e7cc      	b.n	800c114 <_malloc_r+0x80>
 800c17a:	230c      	movs	r3, #12
 800c17c:	603b      	str	r3, [r7, #0]
 800c17e:	4638      	mov	r0, r7
 800c180:	f000 f80e 	bl	800c1a0 <__malloc_unlock>
 800c184:	e797      	b.n	800c0b6 <_malloc_r+0x22>
 800c186:	6025      	str	r5, [r4, #0]
 800c188:	e7dc      	b.n	800c144 <_malloc_r+0xb0>
 800c18a:	605b      	str	r3, [r3, #4]
 800c18c:	deff      	udf	#255	; 0xff
 800c18e:	bf00      	nop
 800c190:	20001ef4 	.word	0x20001ef4

0800c194 <__malloc_lock>:
 800c194:	4801      	ldr	r0, [pc, #4]	; (800c19c <__malloc_lock+0x8>)
 800c196:	f7ff b88d 	b.w	800b2b4 <__retarget_lock_acquire_recursive>
 800c19a:	bf00      	nop
 800c19c:	20001ef0 	.word	0x20001ef0

0800c1a0 <__malloc_unlock>:
 800c1a0:	4801      	ldr	r0, [pc, #4]	; (800c1a8 <__malloc_unlock+0x8>)
 800c1a2:	f7ff b888 	b.w	800b2b6 <__retarget_lock_release_recursive>
 800c1a6:	bf00      	nop
 800c1a8:	20001ef0 	.word	0x20001ef0

0800c1ac <_Balloc>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	69c6      	ldr	r6, [r0, #28]
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	460d      	mov	r5, r1
 800c1b4:	b976      	cbnz	r6, 800c1d4 <_Balloc+0x28>
 800c1b6:	2010      	movs	r0, #16
 800c1b8:	f7ff ff44 	bl	800c044 <malloc>
 800c1bc:	4602      	mov	r2, r0
 800c1be:	61e0      	str	r0, [r4, #28]
 800c1c0:	b920      	cbnz	r0, 800c1cc <_Balloc+0x20>
 800c1c2:	4b18      	ldr	r3, [pc, #96]	; (800c224 <_Balloc+0x78>)
 800c1c4:	4818      	ldr	r0, [pc, #96]	; (800c228 <_Balloc+0x7c>)
 800c1c6:	216b      	movs	r1, #107	; 0x6b
 800c1c8:	f000 fdaa 	bl	800cd20 <__assert_func>
 800c1cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1d0:	6006      	str	r6, [r0, #0]
 800c1d2:	60c6      	str	r6, [r0, #12]
 800c1d4:	69e6      	ldr	r6, [r4, #28]
 800c1d6:	68f3      	ldr	r3, [r6, #12]
 800c1d8:	b183      	cbz	r3, 800c1fc <_Balloc+0x50>
 800c1da:	69e3      	ldr	r3, [r4, #28]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1e2:	b9b8      	cbnz	r0, 800c214 <_Balloc+0x68>
 800c1e4:	2101      	movs	r1, #1
 800c1e6:	fa01 f605 	lsl.w	r6, r1, r5
 800c1ea:	1d72      	adds	r2, r6, #5
 800c1ec:	0092      	lsls	r2, r2, #2
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 fdb4 	bl	800cd5c <_calloc_r>
 800c1f4:	b160      	cbz	r0, 800c210 <_Balloc+0x64>
 800c1f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c1fa:	e00e      	b.n	800c21a <_Balloc+0x6e>
 800c1fc:	2221      	movs	r2, #33	; 0x21
 800c1fe:	2104      	movs	r1, #4
 800c200:	4620      	mov	r0, r4
 800c202:	f000 fdab 	bl	800cd5c <_calloc_r>
 800c206:	69e3      	ldr	r3, [r4, #28]
 800c208:	60f0      	str	r0, [r6, #12]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d1e4      	bne.n	800c1da <_Balloc+0x2e>
 800c210:	2000      	movs	r0, #0
 800c212:	bd70      	pop	{r4, r5, r6, pc}
 800c214:	6802      	ldr	r2, [r0, #0]
 800c216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c21a:	2300      	movs	r3, #0
 800c21c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c220:	e7f7      	b.n	800c212 <_Balloc+0x66>
 800c222:	bf00      	nop
 800c224:	0800dcc1 	.word	0x0800dcc1
 800c228:	0800dd41 	.word	0x0800dd41

0800c22c <_Bfree>:
 800c22c:	b570      	push	{r4, r5, r6, lr}
 800c22e:	69c6      	ldr	r6, [r0, #28]
 800c230:	4605      	mov	r5, r0
 800c232:	460c      	mov	r4, r1
 800c234:	b976      	cbnz	r6, 800c254 <_Bfree+0x28>
 800c236:	2010      	movs	r0, #16
 800c238:	f7ff ff04 	bl	800c044 <malloc>
 800c23c:	4602      	mov	r2, r0
 800c23e:	61e8      	str	r0, [r5, #28]
 800c240:	b920      	cbnz	r0, 800c24c <_Bfree+0x20>
 800c242:	4b09      	ldr	r3, [pc, #36]	; (800c268 <_Bfree+0x3c>)
 800c244:	4809      	ldr	r0, [pc, #36]	; (800c26c <_Bfree+0x40>)
 800c246:	218f      	movs	r1, #143	; 0x8f
 800c248:	f000 fd6a 	bl	800cd20 <__assert_func>
 800c24c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c250:	6006      	str	r6, [r0, #0]
 800c252:	60c6      	str	r6, [r0, #12]
 800c254:	b13c      	cbz	r4, 800c266 <_Bfree+0x3a>
 800c256:	69eb      	ldr	r3, [r5, #28]
 800c258:	6862      	ldr	r2, [r4, #4]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c260:	6021      	str	r1, [r4, #0]
 800c262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c266:	bd70      	pop	{r4, r5, r6, pc}
 800c268:	0800dcc1 	.word	0x0800dcc1
 800c26c:	0800dd41 	.word	0x0800dd41

0800c270 <__multadd>:
 800c270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c274:	690d      	ldr	r5, [r1, #16]
 800c276:	4607      	mov	r7, r0
 800c278:	460c      	mov	r4, r1
 800c27a:	461e      	mov	r6, r3
 800c27c:	f101 0c14 	add.w	ip, r1, #20
 800c280:	2000      	movs	r0, #0
 800c282:	f8dc 3000 	ldr.w	r3, [ip]
 800c286:	b299      	uxth	r1, r3
 800c288:	fb02 6101 	mla	r1, r2, r1, r6
 800c28c:	0c1e      	lsrs	r6, r3, #16
 800c28e:	0c0b      	lsrs	r3, r1, #16
 800c290:	fb02 3306 	mla	r3, r2, r6, r3
 800c294:	b289      	uxth	r1, r1
 800c296:	3001      	adds	r0, #1
 800c298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c29c:	4285      	cmp	r5, r0
 800c29e:	f84c 1b04 	str.w	r1, [ip], #4
 800c2a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2a6:	dcec      	bgt.n	800c282 <__multadd+0x12>
 800c2a8:	b30e      	cbz	r6, 800c2ee <__multadd+0x7e>
 800c2aa:	68a3      	ldr	r3, [r4, #8]
 800c2ac:	42ab      	cmp	r3, r5
 800c2ae:	dc19      	bgt.n	800c2e4 <__multadd+0x74>
 800c2b0:	6861      	ldr	r1, [r4, #4]
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	3101      	adds	r1, #1
 800c2b6:	f7ff ff79 	bl	800c1ac <_Balloc>
 800c2ba:	4680      	mov	r8, r0
 800c2bc:	b928      	cbnz	r0, 800c2ca <__multadd+0x5a>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	4b0c      	ldr	r3, [pc, #48]	; (800c2f4 <__multadd+0x84>)
 800c2c2:	480d      	ldr	r0, [pc, #52]	; (800c2f8 <__multadd+0x88>)
 800c2c4:	21ba      	movs	r1, #186	; 0xba
 800c2c6:	f000 fd2b 	bl	800cd20 <__assert_func>
 800c2ca:	6922      	ldr	r2, [r4, #16]
 800c2cc:	3202      	adds	r2, #2
 800c2ce:	f104 010c 	add.w	r1, r4, #12
 800c2d2:	0092      	lsls	r2, r2, #2
 800c2d4:	300c      	adds	r0, #12
 800c2d6:	f000 fd15 	bl	800cd04 <memcpy>
 800c2da:	4621      	mov	r1, r4
 800c2dc:	4638      	mov	r0, r7
 800c2de:	f7ff ffa5 	bl	800c22c <_Bfree>
 800c2e2:	4644      	mov	r4, r8
 800c2e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2e8:	3501      	adds	r5, #1
 800c2ea:	615e      	str	r6, [r3, #20]
 800c2ec:	6125      	str	r5, [r4, #16]
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f4:	0800dd30 	.word	0x0800dd30
 800c2f8:	0800dd41 	.word	0x0800dd41

0800c2fc <__hi0bits>:
 800c2fc:	0c03      	lsrs	r3, r0, #16
 800c2fe:	041b      	lsls	r3, r3, #16
 800c300:	b9d3      	cbnz	r3, 800c338 <__hi0bits+0x3c>
 800c302:	0400      	lsls	r0, r0, #16
 800c304:	2310      	movs	r3, #16
 800c306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c30a:	bf04      	itt	eq
 800c30c:	0200      	lsleq	r0, r0, #8
 800c30e:	3308      	addeq	r3, #8
 800c310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c314:	bf04      	itt	eq
 800c316:	0100      	lsleq	r0, r0, #4
 800c318:	3304      	addeq	r3, #4
 800c31a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c31e:	bf04      	itt	eq
 800c320:	0080      	lsleq	r0, r0, #2
 800c322:	3302      	addeq	r3, #2
 800c324:	2800      	cmp	r0, #0
 800c326:	db05      	blt.n	800c334 <__hi0bits+0x38>
 800c328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c32c:	f103 0301 	add.w	r3, r3, #1
 800c330:	bf08      	it	eq
 800c332:	2320      	moveq	r3, #32
 800c334:	4618      	mov	r0, r3
 800c336:	4770      	bx	lr
 800c338:	2300      	movs	r3, #0
 800c33a:	e7e4      	b.n	800c306 <__hi0bits+0xa>

0800c33c <__lo0bits>:
 800c33c:	6803      	ldr	r3, [r0, #0]
 800c33e:	f013 0207 	ands.w	r2, r3, #7
 800c342:	d00c      	beq.n	800c35e <__lo0bits+0x22>
 800c344:	07d9      	lsls	r1, r3, #31
 800c346:	d422      	bmi.n	800c38e <__lo0bits+0x52>
 800c348:	079a      	lsls	r2, r3, #30
 800c34a:	bf49      	itett	mi
 800c34c:	085b      	lsrmi	r3, r3, #1
 800c34e:	089b      	lsrpl	r3, r3, #2
 800c350:	6003      	strmi	r3, [r0, #0]
 800c352:	2201      	movmi	r2, #1
 800c354:	bf5c      	itt	pl
 800c356:	6003      	strpl	r3, [r0, #0]
 800c358:	2202      	movpl	r2, #2
 800c35a:	4610      	mov	r0, r2
 800c35c:	4770      	bx	lr
 800c35e:	b299      	uxth	r1, r3
 800c360:	b909      	cbnz	r1, 800c366 <__lo0bits+0x2a>
 800c362:	0c1b      	lsrs	r3, r3, #16
 800c364:	2210      	movs	r2, #16
 800c366:	b2d9      	uxtb	r1, r3
 800c368:	b909      	cbnz	r1, 800c36e <__lo0bits+0x32>
 800c36a:	3208      	adds	r2, #8
 800c36c:	0a1b      	lsrs	r3, r3, #8
 800c36e:	0719      	lsls	r1, r3, #28
 800c370:	bf04      	itt	eq
 800c372:	091b      	lsreq	r3, r3, #4
 800c374:	3204      	addeq	r2, #4
 800c376:	0799      	lsls	r1, r3, #30
 800c378:	bf04      	itt	eq
 800c37a:	089b      	lsreq	r3, r3, #2
 800c37c:	3202      	addeq	r2, #2
 800c37e:	07d9      	lsls	r1, r3, #31
 800c380:	d403      	bmi.n	800c38a <__lo0bits+0x4e>
 800c382:	085b      	lsrs	r3, r3, #1
 800c384:	f102 0201 	add.w	r2, r2, #1
 800c388:	d003      	beq.n	800c392 <__lo0bits+0x56>
 800c38a:	6003      	str	r3, [r0, #0]
 800c38c:	e7e5      	b.n	800c35a <__lo0bits+0x1e>
 800c38e:	2200      	movs	r2, #0
 800c390:	e7e3      	b.n	800c35a <__lo0bits+0x1e>
 800c392:	2220      	movs	r2, #32
 800c394:	e7e1      	b.n	800c35a <__lo0bits+0x1e>
	...

0800c398 <__i2b>:
 800c398:	b510      	push	{r4, lr}
 800c39a:	460c      	mov	r4, r1
 800c39c:	2101      	movs	r1, #1
 800c39e:	f7ff ff05 	bl	800c1ac <_Balloc>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	b928      	cbnz	r0, 800c3b2 <__i2b+0x1a>
 800c3a6:	4b05      	ldr	r3, [pc, #20]	; (800c3bc <__i2b+0x24>)
 800c3a8:	4805      	ldr	r0, [pc, #20]	; (800c3c0 <__i2b+0x28>)
 800c3aa:	f240 1145 	movw	r1, #325	; 0x145
 800c3ae:	f000 fcb7 	bl	800cd20 <__assert_func>
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	6144      	str	r4, [r0, #20]
 800c3b6:	6103      	str	r3, [r0, #16]
 800c3b8:	bd10      	pop	{r4, pc}
 800c3ba:	bf00      	nop
 800c3bc:	0800dd30 	.word	0x0800dd30
 800c3c0:	0800dd41 	.word	0x0800dd41

0800c3c4 <__multiply>:
 800c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c8:	4691      	mov	r9, r2
 800c3ca:	690a      	ldr	r2, [r1, #16]
 800c3cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	bfb8      	it	lt
 800c3d4:	460b      	movlt	r3, r1
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	bfbc      	itt	lt
 800c3da:	464c      	movlt	r4, r9
 800c3dc:	4699      	movlt	r9, r3
 800c3de:	6927      	ldr	r7, [r4, #16]
 800c3e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c3e4:	68a3      	ldr	r3, [r4, #8]
 800c3e6:	6861      	ldr	r1, [r4, #4]
 800c3e8:	eb07 060a 	add.w	r6, r7, sl
 800c3ec:	42b3      	cmp	r3, r6
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	bfb8      	it	lt
 800c3f2:	3101      	addlt	r1, #1
 800c3f4:	f7ff feda 	bl	800c1ac <_Balloc>
 800c3f8:	b930      	cbnz	r0, 800c408 <__multiply+0x44>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	4b44      	ldr	r3, [pc, #272]	; (800c510 <__multiply+0x14c>)
 800c3fe:	4845      	ldr	r0, [pc, #276]	; (800c514 <__multiply+0x150>)
 800c400:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c404:	f000 fc8c 	bl	800cd20 <__assert_func>
 800c408:	f100 0514 	add.w	r5, r0, #20
 800c40c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c410:	462b      	mov	r3, r5
 800c412:	2200      	movs	r2, #0
 800c414:	4543      	cmp	r3, r8
 800c416:	d321      	bcc.n	800c45c <__multiply+0x98>
 800c418:	f104 0314 	add.w	r3, r4, #20
 800c41c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c420:	f109 0314 	add.w	r3, r9, #20
 800c424:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c428:	9202      	str	r2, [sp, #8]
 800c42a:	1b3a      	subs	r2, r7, r4
 800c42c:	3a15      	subs	r2, #21
 800c42e:	f022 0203 	bic.w	r2, r2, #3
 800c432:	3204      	adds	r2, #4
 800c434:	f104 0115 	add.w	r1, r4, #21
 800c438:	428f      	cmp	r7, r1
 800c43a:	bf38      	it	cc
 800c43c:	2204      	movcc	r2, #4
 800c43e:	9201      	str	r2, [sp, #4]
 800c440:	9a02      	ldr	r2, [sp, #8]
 800c442:	9303      	str	r3, [sp, #12]
 800c444:	429a      	cmp	r2, r3
 800c446:	d80c      	bhi.n	800c462 <__multiply+0x9e>
 800c448:	2e00      	cmp	r6, #0
 800c44a:	dd03      	ble.n	800c454 <__multiply+0x90>
 800c44c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c450:	2b00      	cmp	r3, #0
 800c452:	d05b      	beq.n	800c50c <__multiply+0x148>
 800c454:	6106      	str	r6, [r0, #16]
 800c456:	b005      	add	sp, #20
 800c458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45c:	f843 2b04 	str.w	r2, [r3], #4
 800c460:	e7d8      	b.n	800c414 <__multiply+0x50>
 800c462:	f8b3 a000 	ldrh.w	sl, [r3]
 800c466:	f1ba 0f00 	cmp.w	sl, #0
 800c46a:	d024      	beq.n	800c4b6 <__multiply+0xf2>
 800c46c:	f104 0e14 	add.w	lr, r4, #20
 800c470:	46a9      	mov	r9, r5
 800c472:	f04f 0c00 	mov.w	ip, #0
 800c476:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c47a:	f8d9 1000 	ldr.w	r1, [r9]
 800c47e:	fa1f fb82 	uxth.w	fp, r2
 800c482:	b289      	uxth	r1, r1
 800c484:	fb0a 110b 	mla	r1, sl, fp, r1
 800c488:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c48c:	f8d9 2000 	ldr.w	r2, [r9]
 800c490:	4461      	add	r1, ip
 800c492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c496:	fb0a c20b 	mla	r2, sl, fp, ip
 800c49a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c49e:	b289      	uxth	r1, r1
 800c4a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4a4:	4577      	cmp	r7, lr
 800c4a6:	f849 1b04 	str.w	r1, [r9], #4
 800c4aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4ae:	d8e2      	bhi.n	800c476 <__multiply+0xb2>
 800c4b0:	9a01      	ldr	r2, [sp, #4]
 800c4b2:	f845 c002 	str.w	ip, [r5, r2]
 800c4b6:	9a03      	ldr	r2, [sp, #12]
 800c4b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4bc:	3304      	adds	r3, #4
 800c4be:	f1b9 0f00 	cmp.w	r9, #0
 800c4c2:	d021      	beq.n	800c508 <__multiply+0x144>
 800c4c4:	6829      	ldr	r1, [r5, #0]
 800c4c6:	f104 0c14 	add.w	ip, r4, #20
 800c4ca:	46ae      	mov	lr, r5
 800c4cc:	f04f 0a00 	mov.w	sl, #0
 800c4d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c4d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c4d8:	fb09 220b 	mla	r2, r9, fp, r2
 800c4dc:	4452      	add	r2, sl
 800c4de:	b289      	uxth	r1, r1
 800c4e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4e4:	f84e 1b04 	str.w	r1, [lr], #4
 800c4e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c4ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4f0:	f8be 1000 	ldrh.w	r1, [lr]
 800c4f4:	fb09 110a 	mla	r1, r9, sl, r1
 800c4f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c4fc:	4567      	cmp	r7, ip
 800c4fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c502:	d8e5      	bhi.n	800c4d0 <__multiply+0x10c>
 800c504:	9a01      	ldr	r2, [sp, #4]
 800c506:	50a9      	str	r1, [r5, r2]
 800c508:	3504      	adds	r5, #4
 800c50a:	e799      	b.n	800c440 <__multiply+0x7c>
 800c50c:	3e01      	subs	r6, #1
 800c50e:	e79b      	b.n	800c448 <__multiply+0x84>
 800c510:	0800dd30 	.word	0x0800dd30
 800c514:	0800dd41 	.word	0x0800dd41

0800c518 <__pow5mult>:
 800c518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c51c:	4615      	mov	r5, r2
 800c51e:	f012 0203 	ands.w	r2, r2, #3
 800c522:	4606      	mov	r6, r0
 800c524:	460f      	mov	r7, r1
 800c526:	d007      	beq.n	800c538 <__pow5mult+0x20>
 800c528:	4c25      	ldr	r4, [pc, #148]	; (800c5c0 <__pow5mult+0xa8>)
 800c52a:	3a01      	subs	r2, #1
 800c52c:	2300      	movs	r3, #0
 800c52e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c532:	f7ff fe9d 	bl	800c270 <__multadd>
 800c536:	4607      	mov	r7, r0
 800c538:	10ad      	asrs	r5, r5, #2
 800c53a:	d03d      	beq.n	800c5b8 <__pow5mult+0xa0>
 800c53c:	69f4      	ldr	r4, [r6, #28]
 800c53e:	b97c      	cbnz	r4, 800c560 <__pow5mult+0x48>
 800c540:	2010      	movs	r0, #16
 800c542:	f7ff fd7f 	bl	800c044 <malloc>
 800c546:	4602      	mov	r2, r0
 800c548:	61f0      	str	r0, [r6, #28]
 800c54a:	b928      	cbnz	r0, 800c558 <__pow5mult+0x40>
 800c54c:	4b1d      	ldr	r3, [pc, #116]	; (800c5c4 <__pow5mult+0xac>)
 800c54e:	481e      	ldr	r0, [pc, #120]	; (800c5c8 <__pow5mult+0xb0>)
 800c550:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c554:	f000 fbe4 	bl	800cd20 <__assert_func>
 800c558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c55c:	6004      	str	r4, [r0, #0]
 800c55e:	60c4      	str	r4, [r0, #12]
 800c560:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c568:	b94c      	cbnz	r4, 800c57e <__pow5mult+0x66>
 800c56a:	f240 2171 	movw	r1, #625	; 0x271
 800c56e:	4630      	mov	r0, r6
 800c570:	f7ff ff12 	bl	800c398 <__i2b>
 800c574:	2300      	movs	r3, #0
 800c576:	f8c8 0008 	str.w	r0, [r8, #8]
 800c57a:	4604      	mov	r4, r0
 800c57c:	6003      	str	r3, [r0, #0]
 800c57e:	f04f 0900 	mov.w	r9, #0
 800c582:	07eb      	lsls	r3, r5, #31
 800c584:	d50a      	bpl.n	800c59c <__pow5mult+0x84>
 800c586:	4639      	mov	r1, r7
 800c588:	4622      	mov	r2, r4
 800c58a:	4630      	mov	r0, r6
 800c58c:	f7ff ff1a 	bl	800c3c4 <__multiply>
 800c590:	4639      	mov	r1, r7
 800c592:	4680      	mov	r8, r0
 800c594:	4630      	mov	r0, r6
 800c596:	f7ff fe49 	bl	800c22c <_Bfree>
 800c59a:	4647      	mov	r7, r8
 800c59c:	106d      	asrs	r5, r5, #1
 800c59e:	d00b      	beq.n	800c5b8 <__pow5mult+0xa0>
 800c5a0:	6820      	ldr	r0, [r4, #0]
 800c5a2:	b938      	cbnz	r0, 800c5b4 <__pow5mult+0x9c>
 800c5a4:	4622      	mov	r2, r4
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7ff ff0b 	bl	800c3c4 <__multiply>
 800c5ae:	6020      	str	r0, [r4, #0]
 800c5b0:	f8c0 9000 	str.w	r9, [r0]
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	e7e4      	b.n	800c582 <__pow5mult+0x6a>
 800c5b8:	4638      	mov	r0, r7
 800c5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5be:	bf00      	nop
 800c5c0:	0800de90 	.word	0x0800de90
 800c5c4:	0800dcc1 	.word	0x0800dcc1
 800c5c8:	0800dd41 	.word	0x0800dd41

0800c5cc <__lshift>:
 800c5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	6849      	ldr	r1, [r1, #4]
 800c5d4:	6923      	ldr	r3, [r4, #16]
 800c5d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5da:	68a3      	ldr	r3, [r4, #8]
 800c5dc:	4607      	mov	r7, r0
 800c5de:	4691      	mov	r9, r2
 800c5e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5e4:	f108 0601 	add.w	r6, r8, #1
 800c5e8:	42b3      	cmp	r3, r6
 800c5ea:	db0b      	blt.n	800c604 <__lshift+0x38>
 800c5ec:	4638      	mov	r0, r7
 800c5ee:	f7ff fddd 	bl	800c1ac <_Balloc>
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	b948      	cbnz	r0, 800c60a <__lshift+0x3e>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	4b28      	ldr	r3, [pc, #160]	; (800c69c <__lshift+0xd0>)
 800c5fa:	4829      	ldr	r0, [pc, #164]	; (800c6a0 <__lshift+0xd4>)
 800c5fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c600:	f000 fb8e 	bl	800cd20 <__assert_func>
 800c604:	3101      	adds	r1, #1
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	e7ee      	b.n	800c5e8 <__lshift+0x1c>
 800c60a:	2300      	movs	r3, #0
 800c60c:	f100 0114 	add.w	r1, r0, #20
 800c610:	f100 0210 	add.w	r2, r0, #16
 800c614:	4618      	mov	r0, r3
 800c616:	4553      	cmp	r3, sl
 800c618:	db33      	blt.n	800c682 <__lshift+0xb6>
 800c61a:	6920      	ldr	r0, [r4, #16]
 800c61c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c620:	f104 0314 	add.w	r3, r4, #20
 800c624:	f019 091f 	ands.w	r9, r9, #31
 800c628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c62c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c630:	d02b      	beq.n	800c68a <__lshift+0xbe>
 800c632:	f1c9 0e20 	rsb	lr, r9, #32
 800c636:	468a      	mov	sl, r1
 800c638:	2200      	movs	r2, #0
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	fa00 f009 	lsl.w	r0, r0, r9
 800c640:	4310      	orrs	r0, r2
 800c642:	f84a 0b04 	str.w	r0, [sl], #4
 800c646:	f853 2b04 	ldr.w	r2, [r3], #4
 800c64a:	459c      	cmp	ip, r3
 800c64c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c650:	d8f3      	bhi.n	800c63a <__lshift+0x6e>
 800c652:	ebac 0304 	sub.w	r3, ip, r4
 800c656:	3b15      	subs	r3, #21
 800c658:	f023 0303 	bic.w	r3, r3, #3
 800c65c:	3304      	adds	r3, #4
 800c65e:	f104 0015 	add.w	r0, r4, #21
 800c662:	4584      	cmp	ip, r0
 800c664:	bf38      	it	cc
 800c666:	2304      	movcc	r3, #4
 800c668:	50ca      	str	r2, [r1, r3]
 800c66a:	b10a      	cbz	r2, 800c670 <__lshift+0xa4>
 800c66c:	f108 0602 	add.w	r6, r8, #2
 800c670:	3e01      	subs	r6, #1
 800c672:	4638      	mov	r0, r7
 800c674:	612e      	str	r6, [r5, #16]
 800c676:	4621      	mov	r1, r4
 800c678:	f7ff fdd8 	bl	800c22c <_Bfree>
 800c67c:	4628      	mov	r0, r5
 800c67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c682:	f842 0f04 	str.w	r0, [r2, #4]!
 800c686:	3301      	adds	r3, #1
 800c688:	e7c5      	b.n	800c616 <__lshift+0x4a>
 800c68a:	3904      	subs	r1, #4
 800c68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c690:	f841 2f04 	str.w	r2, [r1, #4]!
 800c694:	459c      	cmp	ip, r3
 800c696:	d8f9      	bhi.n	800c68c <__lshift+0xc0>
 800c698:	e7ea      	b.n	800c670 <__lshift+0xa4>
 800c69a:	bf00      	nop
 800c69c:	0800dd30 	.word	0x0800dd30
 800c6a0:	0800dd41 	.word	0x0800dd41

0800c6a4 <__mcmp>:
 800c6a4:	b530      	push	{r4, r5, lr}
 800c6a6:	6902      	ldr	r2, [r0, #16]
 800c6a8:	690c      	ldr	r4, [r1, #16]
 800c6aa:	1b12      	subs	r2, r2, r4
 800c6ac:	d10e      	bne.n	800c6cc <__mcmp+0x28>
 800c6ae:	f100 0314 	add.w	r3, r0, #20
 800c6b2:	3114      	adds	r1, #20
 800c6b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6c4:	42a5      	cmp	r5, r4
 800c6c6:	d003      	beq.n	800c6d0 <__mcmp+0x2c>
 800c6c8:	d305      	bcc.n	800c6d6 <__mcmp+0x32>
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	bd30      	pop	{r4, r5, pc}
 800c6d0:	4283      	cmp	r3, r0
 800c6d2:	d3f3      	bcc.n	800c6bc <__mcmp+0x18>
 800c6d4:	e7fa      	b.n	800c6cc <__mcmp+0x28>
 800c6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c6da:	e7f7      	b.n	800c6cc <__mcmp+0x28>

0800c6dc <__mdiff>:
 800c6dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	4606      	mov	r6, r0
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	4690      	mov	r8, r2
 800c6ea:	f7ff ffdb 	bl	800c6a4 <__mcmp>
 800c6ee:	1e05      	subs	r5, r0, #0
 800c6f0:	d110      	bne.n	800c714 <__mdiff+0x38>
 800c6f2:	4629      	mov	r1, r5
 800c6f4:	4630      	mov	r0, r6
 800c6f6:	f7ff fd59 	bl	800c1ac <_Balloc>
 800c6fa:	b930      	cbnz	r0, 800c70a <__mdiff+0x2e>
 800c6fc:	4b3a      	ldr	r3, [pc, #232]	; (800c7e8 <__mdiff+0x10c>)
 800c6fe:	4602      	mov	r2, r0
 800c700:	f240 2137 	movw	r1, #567	; 0x237
 800c704:	4839      	ldr	r0, [pc, #228]	; (800c7ec <__mdiff+0x110>)
 800c706:	f000 fb0b 	bl	800cd20 <__assert_func>
 800c70a:	2301      	movs	r3, #1
 800c70c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c714:	bfa4      	itt	ge
 800c716:	4643      	movge	r3, r8
 800c718:	46a0      	movge	r8, r4
 800c71a:	4630      	mov	r0, r6
 800c71c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c720:	bfa6      	itte	ge
 800c722:	461c      	movge	r4, r3
 800c724:	2500      	movge	r5, #0
 800c726:	2501      	movlt	r5, #1
 800c728:	f7ff fd40 	bl	800c1ac <_Balloc>
 800c72c:	b920      	cbnz	r0, 800c738 <__mdiff+0x5c>
 800c72e:	4b2e      	ldr	r3, [pc, #184]	; (800c7e8 <__mdiff+0x10c>)
 800c730:	4602      	mov	r2, r0
 800c732:	f240 2145 	movw	r1, #581	; 0x245
 800c736:	e7e5      	b.n	800c704 <__mdiff+0x28>
 800c738:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c73c:	6926      	ldr	r6, [r4, #16]
 800c73e:	60c5      	str	r5, [r0, #12]
 800c740:	f104 0914 	add.w	r9, r4, #20
 800c744:	f108 0514 	add.w	r5, r8, #20
 800c748:	f100 0e14 	add.w	lr, r0, #20
 800c74c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c750:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c754:	f108 0210 	add.w	r2, r8, #16
 800c758:	46f2      	mov	sl, lr
 800c75a:	2100      	movs	r1, #0
 800c75c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c760:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c764:	fa11 f88b 	uxtah	r8, r1, fp
 800c768:	b299      	uxth	r1, r3
 800c76a:	0c1b      	lsrs	r3, r3, #16
 800c76c:	eba8 0801 	sub.w	r8, r8, r1
 800c770:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c774:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c778:	fa1f f888 	uxth.w	r8, r8
 800c77c:	1419      	asrs	r1, r3, #16
 800c77e:	454e      	cmp	r6, r9
 800c780:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c784:	f84a 3b04 	str.w	r3, [sl], #4
 800c788:	d8e8      	bhi.n	800c75c <__mdiff+0x80>
 800c78a:	1b33      	subs	r3, r6, r4
 800c78c:	3b15      	subs	r3, #21
 800c78e:	f023 0303 	bic.w	r3, r3, #3
 800c792:	3304      	adds	r3, #4
 800c794:	3415      	adds	r4, #21
 800c796:	42a6      	cmp	r6, r4
 800c798:	bf38      	it	cc
 800c79a:	2304      	movcc	r3, #4
 800c79c:	441d      	add	r5, r3
 800c79e:	4473      	add	r3, lr
 800c7a0:	469e      	mov	lr, r3
 800c7a2:	462e      	mov	r6, r5
 800c7a4:	4566      	cmp	r6, ip
 800c7a6:	d30e      	bcc.n	800c7c6 <__mdiff+0xea>
 800c7a8:	f10c 0203 	add.w	r2, ip, #3
 800c7ac:	1b52      	subs	r2, r2, r5
 800c7ae:	f022 0203 	bic.w	r2, r2, #3
 800c7b2:	3d03      	subs	r5, #3
 800c7b4:	45ac      	cmp	ip, r5
 800c7b6:	bf38      	it	cc
 800c7b8:	2200      	movcc	r2, #0
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c7c0:	b17a      	cbz	r2, 800c7e2 <__mdiff+0x106>
 800c7c2:	6107      	str	r7, [r0, #16]
 800c7c4:	e7a4      	b.n	800c710 <__mdiff+0x34>
 800c7c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800c7ca:	fa11 f288 	uxtah	r2, r1, r8
 800c7ce:	1414      	asrs	r4, r2, #16
 800c7d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c7d4:	b292      	uxth	r2, r2
 800c7d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c7da:	f84e 2b04 	str.w	r2, [lr], #4
 800c7de:	1421      	asrs	r1, r4, #16
 800c7e0:	e7e0      	b.n	800c7a4 <__mdiff+0xc8>
 800c7e2:	3f01      	subs	r7, #1
 800c7e4:	e7ea      	b.n	800c7bc <__mdiff+0xe0>
 800c7e6:	bf00      	nop
 800c7e8:	0800dd30 	.word	0x0800dd30
 800c7ec:	0800dd41 	.word	0x0800dd41

0800c7f0 <__d2b>:
 800c7f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c7f4:	460f      	mov	r7, r1
 800c7f6:	2101      	movs	r1, #1
 800c7f8:	ec59 8b10 	vmov	r8, r9, d0
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	f7ff fcd5 	bl	800c1ac <_Balloc>
 800c802:	4604      	mov	r4, r0
 800c804:	b930      	cbnz	r0, 800c814 <__d2b+0x24>
 800c806:	4602      	mov	r2, r0
 800c808:	4b24      	ldr	r3, [pc, #144]	; (800c89c <__d2b+0xac>)
 800c80a:	4825      	ldr	r0, [pc, #148]	; (800c8a0 <__d2b+0xb0>)
 800c80c:	f240 310f 	movw	r1, #783	; 0x30f
 800c810:	f000 fa86 	bl	800cd20 <__assert_func>
 800c814:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c81c:	bb2d      	cbnz	r5, 800c86a <__d2b+0x7a>
 800c81e:	9301      	str	r3, [sp, #4]
 800c820:	f1b8 0300 	subs.w	r3, r8, #0
 800c824:	d026      	beq.n	800c874 <__d2b+0x84>
 800c826:	4668      	mov	r0, sp
 800c828:	9300      	str	r3, [sp, #0]
 800c82a:	f7ff fd87 	bl	800c33c <__lo0bits>
 800c82e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c832:	b1e8      	cbz	r0, 800c870 <__d2b+0x80>
 800c834:	f1c0 0320 	rsb	r3, r0, #32
 800c838:	fa02 f303 	lsl.w	r3, r2, r3
 800c83c:	430b      	orrs	r3, r1
 800c83e:	40c2      	lsrs	r2, r0
 800c840:	6163      	str	r3, [r4, #20]
 800c842:	9201      	str	r2, [sp, #4]
 800c844:	9b01      	ldr	r3, [sp, #4]
 800c846:	61a3      	str	r3, [r4, #24]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	bf14      	ite	ne
 800c84c:	2202      	movne	r2, #2
 800c84e:	2201      	moveq	r2, #1
 800c850:	6122      	str	r2, [r4, #16]
 800c852:	b1bd      	cbz	r5, 800c884 <__d2b+0x94>
 800c854:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c858:	4405      	add	r5, r0
 800c85a:	603d      	str	r5, [r7, #0]
 800c85c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c860:	6030      	str	r0, [r6, #0]
 800c862:	4620      	mov	r0, r4
 800c864:	b003      	add	sp, #12
 800c866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c86a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c86e:	e7d6      	b.n	800c81e <__d2b+0x2e>
 800c870:	6161      	str	r1, [r4, #20]
 800c872:	e7e7      	b.n	800c844 <__d2b+0x54>
 800c874:	a801      	add	r0, sp, #4
 800c876:	f7ff fd61 	bl	800c33c <__lo0bits>
 800c87a:	9b01      	ldr	r3, [sp, #4]
 800c87c:	6163      	str	r3, [r4, #20]
 800c87e:	3020      	adds	r0, #32
 800c880:	2201      	movs	r2, #1
 800c882:	e7e5      	b.n	800c850 <__d2b+0x60>
 800c884:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c88c:	6038      	str	r0, [r7, #0]
 800c88e:	6918      	ldr	r0, [r3, #16]
 800c890:	f7ff fd34 	bl	800c2fc <__hi0bits>
 800c894:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c898:	e7e2      	b.n	800c860 <__d2b+0x70>
 800c89a:	bf00      	nop
 800c89c:	0800dd30 	.word	0x0800dd30
 800c8a0:	0800dd41 	.word	0x0800dd41

0800c8a4 <__ssputs_r>:
 800c8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a8:	688e      	ldr	r6, [r1, #8]
 800c8aa:	461f      	mov	r7, r3
 800c8ac:	42be      	cmp	r6, r7
 800c8ae:	680b      	ldr	r3, [r1, #0]
 800c8b0:	4682      	mov	sl, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	4690      	mov	r8, r2
 800c8b6:	d82c      	bhi.n	800c912 <__ssputs_r+0x6e>
 800c8b8:	898a      	ldrh	r2, [r1, #12]
 800c8ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8be:	d026      	beq.n	800c90e <__ssputs_r+0x6a>
 800c8c0:	6965      	ldr	r5, [r4, #20]
 800c8c2:	6909      	ldr	r1, [r1, #16]
 800c8c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8c8:	eba3 0901 	sub.w	r9, r3, r1
 800c8cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8d0:	1c7b      	adds	r3, r7, #1
 800c8d2:	444b      	add	r3, r9
 800c8d4:	106d      	asrs	r5, r5, #1
 800c8d6:	429d      	cmp	r5, r3
 800c8d8:	bf38      	it	cc
 800c8da:	461d      	movcc	r5, r3
 800c8dc:	0553      	lsls	r3, r2, #21
 800c8de:	d527      	bpl.n	800c930 <__ssputs_r+0x8c>
 800c8e0:	4629      	mov	r1, r5
 800c8e2:	f7ff fbd7 	bl	800c094 <_malloc_r>
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	b360      	cbz	r0, 800c944 <__ssputs_r+0xa0>
 800c8ea:	6921      	ldr	r1, [r4, #16]
 800c8ec:	464a      	mov	r2, r9
 800c8ee:	f000 fa09 	bl	800cd04 <memcpy>
 800c8f2:	89a3      	ldrh	r3, [r4, #12]
 800c8f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8fc:	81a3      	strh	r3, [r4, #12]
 800c8fe:	6126      	str	r6, [r4, #16]
 800c900:	6165      	str	r5, [r4, #20]
 800c902:	444e      	add	r6, r9
 800c904:	eba5 0509 	sub.w	r5, r5, r9
 800c908:	6026      	str	r6, [r4, #0]
 800c90a:	60a5      	str	r5, [r4, #8]
 800c90c:	463e      	mov	r6, r7
 800c90e:	42be      	cmp	r6, r7
 800c910:	d900      	bls.n	800c914 <__ssputs_r+0x70>
 800c912:	463e      	mov	r6, r7
 800c914:	6820      	ldr	r0, [r4, #0]
 800c916:	4632      	mov	r2, r6
 800c918:	4641      	mov	r1, r8
 800c91a:	f000 f9c9 	bl	800ccb0 <memmove>
 800c91e:	68a3      	ldr	r3, [r4, #8]
 800c920:	1b9b      	subs	r3, r3, r6
 800c922:	60a3      	str	r3, [r4, #8]
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	4433      	add	r3, r6
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	2000      	movs	r0, #0
 800c92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c930:	462a      	mov	r2, r5
 800c932:	f000 fa3b 	bl	800cdac <_realloc_r>
 800c936:	4606      	mov	r6, r0
 800c938:	2800      	cmp	r0, #0
 800c93a:	d1e0      	bne.n	800c8fe <__ssputs_r+0x5a>
 800c93c:	6921      	ldr	r1, [r4, #16]
 800c93e:	4650      	mov	r0, sl
 800c940:	f7ff fb34 	bl	800bfac <_free_r>
 800c944:	230c      	movs	r3, #12
 800c946:	f8ca 3000 	str.w	r3, [sl]
 800c94a:	89a3      	ldrh	r3, [r4, #12]
 800c94c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c950:	81a3      	strh	r3, [r4, #12]
 800c952:	f04f 30ff 	mov.w	r0, #4294967295
 800c956:	e7e9      	b.n	800c92c <__ssputs_r+0x88>

0800c958 <_svfiprintf_r>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	4698      	mov	r8, r3
 800c95e:	898b      	ldrh	r3, [r1, #12]
 800c960:	061b      	lsls	r3, r3, #24
 800c962:	b09d      	sub	sp, #116	; 0x74
 800c964:	4607      	mov	r7, r0
 800c966:	460d      	mov	r5, r1
 800c968:	4614      	mov	r4, r2
 800c96a:	d50e      	bpl.n	800c98a <_svfiprintf_r+0x32>
 800c96c:	690b      	ldr	r3, [r1, #16]
 800c96e:	b963      	cbnz	r3, 800c98a <_svfiprintf_r+0x32>
 800c970:	2140      	movs	r1, #64	; 0x40
 800c972:	f7ff fb8f 	bl	800c094 <_malloc_r>
 800c976:	6028      	str	r0, [r5, #0]
 800c978:	6128      	str	r0, [r5, #16]
 800c97a:	b920      	cbnz	r0, 800c986 <_svfiprintf_r+0x2e>
 800c97c:	230c      	movs	r3, #12
 800c97e:	603b      	str	r3, [r7, #0]
 800c980:	f04f 30ff 	mov.w	r0, #4294967295
 800c984:	e0d0      	b.n	800cb28 <_svfiprintf_r+0x1d0>
 800c986:	2340      	movs	r3, #64	; 0x40
 800c988:	616b      	str	r3, [r5, #20]
 800c98a:	2300      	movs	r3, #0
 800c98c:	9309      	str	r3, [sp, #36]	; 0x24
 800c98e:	2320      	movs	r3, #32
 800c990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c994:	f8cd 800c 	str.w	r8, [sp, #12]
 800c998:	2330      	movs	r3, #48	; 0x30
 800c99a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb40 <_svfiprintf_r+0x1e8>
 800c99e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9a2:	f04f 0901 	mov.w	r9, #1
 800c9a6:	4623      	mov	r3, r4
 800c9a8:	469a      	mov	sl, r3
 800c9aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9ae:	b10a      	cbz	r2, 800c9b4 <_svfiprintf_r+0x5c>
 800c9b0:	2a25      	cmp	r2, #37	; 0x25
 800c9b2:	d1f9      	bne.n	800c9a8 <_svfiprintf_r+0x50>
 800c9b4:	ebba 0b04 	subs.w	fp, sl, r4
 800c9b8:	d00b      	beq.n	800c9d2 <_svfiprintf_r+0x7a>
 800c9ba:	465b      	mov	r3, fp
 800c9bc:	4622      	mov	r2, r4
 800c9be:	4629      	mov	r1, r5
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	f7ff ff6f 	bl	800c8a4 <__ssputs_r>
 800c9c6:	3001      	adds	r0, #1
 800c9c8:	f000 80a9 	beq.w	800cb1e <_svfiprintf_r+0x1c6>
 800c9cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9ce:	445a      	add	r2, fp
 800c9d0:	9209      	str	r2, [sp, #36]	; 0x24
 800c9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f000 80a1 	beq.w	800cb1e <_svfiprintf_r+0x1c6>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9e6:	f10a 0a01 	add.w	sl, sl, #1
 800c9ea:	9304      	str	r3, [sp, #16]
 800c9ec:	9307      	str	r3, [sp, #28]
 800c9ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9f2:	931a      	str	r3, [sp, #104]	; 0x68
 800c9f4:	4654      	mov	r4, sl
 800c9f6:	2205      	movs	r2, #5
 800c9f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9fc:	4850      	ldr	r0, [pc, #320]	; (800cb40 <_svfiprintf_r+0x1e8>)
 800c9fe:	f7f3 fbe7 	bl	80001d0 <memchr>
 800ca02:	9a04      	ldr	r2, [sp, #16]
 800ca04:	b9d8      	cbnz	r0, 800ca3e <_svfiprintf_r+0xe6>
 800ca06:	06d0      	lsls	r0, r2, #27
 800ca08:	bf44      	itt	mi
 800ca0a:	2320      	movmi	r3, #32
 800ca0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca10:	0711      	lsls	r1, r2, #28
 800ca12:	bf44      	itt	mi
 800ca14:	232b      	movmi	r3, #43	; 0x2b
 800ca16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca20:	d015      	beq.n	800ca4e <_svfiprintf_r+0xf6>
 800ca22:	9a07      	ldr	r2, [sp, #28]
 800ca24:	4654      	mov	r4, sl
 800ca26:	2000      	movs	r0, #0
 800ca28:	f04f 0c0a 	mov.w	ip, #10
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca32:	3b30      	subs	r3, #48	; 0x30
 800ca34:	2b09      	cmp	r3, #9
 800ca36:	d94d      	bls.n	800cad4 <_svfiprintf_r+0x17c>
 800ca38:	b1b0      	cbz	r0, 800ca68 <_svfiprintf_r+0x110>
 800ca3a:	9207      	str	r2, [sp, #28]
 800ca3c:	e014      	b.n	800ca68 <_svfiprintf_r+0x110>
 800ca3e:	eba0 0308 	sub.w	r3, r0, r8
 800ca42:	fa09 f303 	lsl.w	r3, r9, r3
 800ca46:	4313      	orrs	r3, r2
 800ca48:	9304      	str	r3, [sp, #16]
 800ca4a:	46a2      	mov	sl, r4
 800ca4c:	e7d2      	b.n	800c9f4 <_svfiprintf_r+0x9c>
 800ca4e:	9b03      	ldr	r3, [sp, #12]
 800ca50:	1d19      	adds	r1, r3, #4
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	9103      	str	r1, [sp, #12]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	bfbb      	ittet	lt
 800ca5a:	425b      	neglt	r3, r3
 800ca5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ca60:	9307      	strge	r3, [sp, #28]
 800ca62:	9307      	strlt	r3, [sp, #28]
 800ca64:	bfb8      	it	lt
 800ca66:	9204      	strlt	r2, [sp, #16]
 800ca68:	7823      	ldrb	r3, [r4, #0]
 800ca6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ca6c:	d10c      	bne.n	800ca88 <_svfiprintf_r+0x130>
 800ca6e:	7863      	ldrb	r3, [r4, #1]
 800ca70:	2b2a      	cmp	r3, #42	; 0x2a
 800ca72:	d134      	bne.n	800cade <_svfiprintf_r+0x186>
 800ca74:	9b03      	ldr	r3, [sp, #12]
 800ca76:	1d1a      	adds	r2, r3, #4
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	9203      	str	r2, [sp, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	bfb8      	it	lt
 800ca80:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca84:	3402      	adds	r4, #2
 800ca86:	9305      	str	r3, [sp, #20]
 800ca88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cb50 <_svfiprintf_r+0x1f8>
 800ca8c:	7821      	ldrb	r1, [r4, #0]
 800ca8e:	2203      	movs	r2, #3
 800ca90:	4650      	mov	r0, sl
 800ca92:	f7f3 fb9d 	bl	80001d0 <memchr>
 800ca96:	b138      	cbz	r0, 800caa8 <_svfiprintf_r+0x150>
 800ca98:	9b04      	ldr	r3, [sp, #16]
 800ca9a:	eba0 000a 	sub.w	r0, r0, sl
 800ca9e:	2240      	movs	r2, #64	; 0x40
 800caa0:	4082      	lsls	r2, r0
 800caa2:	4313      	orrs	r3, r2
 800caa4:	3401      	adds	r4, #1
 800caa6:	9304      	str	r3, [sp, #16]
 800caa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caac:	4825      	ldr	r0, [pc, #148]	; (800cb44 <_svfiprintf_r+0x1ec>)
 800caae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cab2:	2206      	movs	r2, #6
 800cab4:	f7f3 fb8c 	bl	80001d0 <memchr>
 800cab8:	2800      	cmp	r0, #0
 800caba:	d038      	beq.n	800cb2e <_svfiprintf_r+0x1d6>
 800cabc:	4b22      	ldr	r3, [pc, #136]	; (800cb48 <_svfiprintf_r+0x1f0>)
 800cabe:	bb1b      	cbnz	r3, 800cb08 <_svfiprintf_r+0x1b0>
 800cac0:	9b03      	ldr	r3, [sp, #12]
 800cac2:	3307      	adds	r3, #7
 800cac4:	f023 0307 	bic.w	r3, r3, #7
 800cac8:	3308      	adds	r3, #8
 800caca:	9303      	str	r3, [sp, #12]
 800cacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cace:	4433      	add	r3, r6
 800cad0:	9309      	str	r3, [sp, #36]	; 0x24
 800cad2:	e768      	b.n	800c9a6 <_svfiprintf_r+0x4e>
 800cad4:	fb0c 3202 	mla	r2, ip, r2, r3
 800cad8:	460c      	mov	r4, r1
 800cada:	2001      	movs	r0, #1
 800cadc:	e7a6      	b.n	800ca2c <_svfiprintf_r+0xd4>
 800cade:	2300      	movs	r3, #0
 800cae0:	3401      	adds	r4, #1
 800cae2:	9305      	str	r3, [sp, #20]
 800cae4:	4619      	mov	r1, r3
 800cae6:	f04f 0c0a 	mov.w	ip, #10
 800caea:	4620      	mov	r0, r4
 800caec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caf0:	3a30      	subs	r2, #48	; 0x30
 800caf2:	2a09      	cmp	r2, #9
 800caf4:	d903      	bls.n	800cafe <_svfiprintf_r+0x1a6>
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d0c6      	beq.n	800ca88 <_svfiprintf_r+0x130>
 800cafa:	9105      	str	r1, [sp, #20]
 800cafc:	e7c4      	b.n	800ca88 <_svfiprintf_r+0x130>
 800cafe:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb02:	4604      	mov	r4, r0
 800cb04:	2301      	movs	r3, #1
 800cb06:	e7f0      	b.n	800caea <_svfiprintf_r+0x192>
 800cb08:	ab03      	add	r3, sp, #12
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	462a      	mov	r2, r5
 800cb0e:	4b0f      	ldr	r3, [pc, #60]	; (800cb4c <_svfiprintf_r+0x1f4>)
 800cb10:	a904      	add	r1, sp, #16
 800cb12:	4638      	mov	r0, r7
 800cb14:	f7fd fe78 	bl	800a808 <_printf_float>
 800cb18:	1c42      	adds	r2, r0, #1
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	d1d6      	bne.n	800cacc <_svfiprintf_r+0x174>
 800cb1e:	89ab      	ldrh	r3, [r5, #12]
 800cb20:	065b      	lsls	r3, r3, #25
 800cb22:	f53f af2d 	bmi.w	800c980 <_svfiprintf_r+0x28>
 800cb26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb28:	b01d      	add	sp, #116	; 0x74
 800cb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2e:	ab03      	add	r3, sp, #12
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	462a      	mov	r2, r5
 800cb34:	4b05      	ldr	r3, [pc, #20]	; (800cb4c <_svfiprintf_r+0x1f4>)
 800cb36:	a904      	add	r1, sp, #16
 800cb38:	4638      	mov	r0, r7
 800cb3a:	f7fe f909 	bl	800ad50 <_printf_i>
 800cb3e:	e7eb      	b.n	800cb18 <_svfiprintf_r+0x1c0>
 800cb40:	0800de9c 	.word	0x0800de9c
 800cb44:	0800dea6 	.word	0x0800dea6
 800cb48:	0800a809 	.word	0x0800a809
 800cb4c:	0800c8a5 	.word	0x0800c8a5
 800cb50:	0800dea2 	.word	0x0800dea2

0800cb54 <__sflush_r>:
 800cb54:	898a      	ldrh	r2, [r1, #12]
 800cb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	0710      	lsls	r0, r2, #28
 800cb5e:	460c      	mov	r4, r1
 800cb60:	d458      	bmi.n	800cc14 <__sflush_r+0xc0>
 800cb62:	684b      	ldr	r3, [r1, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	dc05      	bgt.n	800cb74 <__sflush_r+0x20>
 800cb68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dc02      	bgt.n	800cb74 <__sflush_r+0x20>
 800cb6e:	2000      	movs	r0, #0
 800cb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	d0f9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb80:	682f      	ldr	r7, [r5, #0]
 800cb82:	6a21      	ldr	r1, [r4, #32]
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	d032      	beq.n	800cbee <__sflush_r+0x9a>
 800cb88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	075a      	lsls	r2, r3, #29
 800cb8e:	d505      	bpl.n	800cb9c <__sflush_r+0x48>
 800cb90:	6863      	ldr	r3, [r4, #4]
 800cb92:	1ac0      	subs	r0, r0, r3
 800cb94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb96:	b10b      	cbz	r3, 800cb9c <__sflush_r+0x48>
 800cb98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb9a:	1ac0      	subs	r0, r0, r3
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	4602      	mov	r2, r0
 800cba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cba2:	6a21      	ldr	r1, [r4, #32]
 800cba4:	4628      	mov	r0, r5
 800cba6:	47b0      	blx	r6
 800cba8:	1c43      	adds	r3, r0, #1
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	d106      	bne.n	800cbbc <__sflush_r+0x68>
 800cbae:	6829      	ldr	r1, [r5, #0]
 800cbb0:	291d      	cmp	r1, #29
 800cbb2:	d82b      	bhi.n	800cc0c <__sflush_r+0xb8>
 800cbb4:	4a29      	ldr	r2, [pc, #164]	; (800cc5c <__sflush_r+0x108>)
 800cbb6:	410a      	asrs	r2, r1
 800cbb8:	07d6      	lsls	r6, r2, #31
 800cbba:	d427      	bmi.n	800cc0c <__sflush_r+0xb8>
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	6062      	str	r2, [r4, #4]
 800cbc0:	04d9      	lsls	r1, r3, #19
 800cbc2:	6922      	ldr	r2, [r4, #16]
 800cbc4:	6022      	str	r2, [r4, #0]
 800cbc6:	d504      	bpl.n	800cbd2 <__sflush_r+0x7e>
 800cbc8:	1c42      	adds	r2, r0, #1
 800cbca:	d101      	bne.n	800cbd0 <__sflush_r+0x7c>
 800cbcc:	682b      	ldr	r3, [r5, #0]
 800cbce:	b903      	cbnz	r3, 800cbd2 <__sflush_r+0x7e>
 800cbd0:	6560      	str	r0, [r4, #84]	; 0x54
 800cbd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbd4:	602f      	str	r7, [r5, #0]
 800cbd6:	2900      	cmp	r1, #0
 800cbd8:	d0c9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cbda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbde:	4299      	cmp	r1, r3
 800cbe0:	d002      	beq.n	800cbe8 <__sflush_r+0x94>
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	f7ff f9e2 	bl	800bfac <_free_r>
 800cbe8:	2000      	movs	r0, #0
 800cbea:	6360      	str	r0, [r4, #52]	; 0x34
 800cbec:	e7c0      	b.n	800cb70 <__sflush_r+0x1c>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b0      	blx	r6
 800cbf4:	1c41      	adds	r1, r0, #1
 800cbf6:	d1c8      	bne.n	800cb8a <__sflush_r+0x36>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0c5      	beq.n	800cb8a <__sflush_r+0x36>
 800cbfe:	2b1d      	cmp	r3, #29
 800cc00:	d001      	beq.n	800cc06 <__sflush_r+0xb2>
 800cc02:	2b16      	cmp	r3, #22
 800cc04:	d101      	bne.n	800cc0a <__sflush_r+0xb6>
 800cc06:	602f      	str	r7, [r5, #0]
 800cc08:	e7b1      	b.n	800cb6e <__sflush_r+0x1a>
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc10:	81a3      	strh	r3, [r4, #12]
 800cc12:	e7ad      	b.n	800cb70 <__sflush_r+0x1c>
 800cc14:	690f      	ldr	r7, [r1, #16]
 800cc16:	2f00      	cmp	r7, #0
 800cc18:	d0a9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cc1a:	0793      	lsls	r3, r2, #30
 800cc1c:	680e      	ldr	r6, [r1, #0]
 800cc1e:	bf08      	it	eq
 800cc20:	694b      	ldreq	r3, [r1, #20]
 800cc22:	600f      	str	r7, [r1, #0]
 800cc24:	bf18      	it	ne
 800cc26:	2300      	movne	r3, #0
 800cc28:	eba6 0807 	sub.w	r8, r6, r7
 800cc2c:	608b      	str	r3, [r1, #8]
 800cc2e:	f1b8 0f00 	cmp.w	r8, #0
 800cc32:	dd9c      	ble.n	800cb6e <__sflush_r+0x1a>
 800cc34:	6a21      	ldr	r1, [r4, #32]
 800cc36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc38:	4643      	mov	r3, r8
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	47b0      	blx	r6
 800cc40:	2800      	cmp	r0, #0
 800cc42:	dc06      	bgt.n	800cc52 <__sflush_r+0xfe>
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	e78e      	b.n	800cb70 <__sflush_r+0x1c>
 800cc52:	4407      	add	r7, r0
 800cc54:	eba8 0800 	sub.w	r8, r8, r0
 800cc58:	e7e9      	b.n	800cc2e <__sflush_r+0xda>
 800cc5a:	bf00      	nop
 800cc5c:	dfbffffe 	.word	0xdfbffffe

0800cc60 <_fflush_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	690b      	ldr	r3, [r1, #16]
 800cc64:	4605      	mov	r5, r0
 800cc66:	460c      	mov	r4, r1
 800cc68:	b913      	cbnz	r3, 800cc70 <_fflush_r+0x10>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	b118      	cbz	r0, 800cc7a <_fflush_r+0x1a>
 800cc72:	6a03      	ldr	r3, [r0, #32]
 800cc74:	b90b      	cbnz	r3, 800cc7a <_fflush_r+0x1a>
 800cc76:	f7fe fa07 	bl	800b088 <__sinit>
 800cc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f3      	beq.n	800cc6a <_fflush_r+0xa>
 800cc82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc84:	07d0      	lsls	r0, r2, #31
 800cc86:	d404      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc88:	0599      	lsls	r1, r3, #22
 800cc8a:	d402      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc8e:	f7fe fb11 	bl	800b2b4 <__retarget_lock_acquire_recursive>
 800cc92:	4628      	mov	r0, r5
 800cc94:	4621      	mov	r1, r4
 800cc96:	f7ff ff5d 	bl	800cb54 <__sflush_r>
 800cc9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc9c:	07da      	lsls	r2, r3, #31
 800cc9e:	4605      	mov	r5, r0
 800cca0:	d4e4      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	059b      	lsls	r3, r3, #22
 800cca6:	d4e1      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccaa:	f7fe fb04 	bl	800b2b6 <__retarget_lock_release_recursive>
 800ccae:	e7dd      	b.n	800cc6c <_fflush_r+0xc>

0800ccb0 <memmove>:
 800ccb0:	4288      	cmp	r0, r1
 800ccb2:	b510      	push	{r4, lr}
 800ccb4:	eb01 0402 	add.w	r4, r1, r2
 800ccb8:	d902      	bls.n	800ccc0 <memmove+0x10>
 800ccba:	4284      	cmp	r4, r0
 800ccbc:	4623      	mov	r3, r4
 800ccbe:	d807      	bhi.n	800ccd0 <memmove+0x20>
 800ccc0:	1e43      	subs	r3, r0, #1
 800ccc2:	42a1      	cmp	r1, r4
 800ccc4:	d008      	beq.n	800ccd8 <memmove+0x28>
 800ccc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccce:	e7f8      	b.n	800ccc2 <memmove+0x12>
 800ccd0:	4402      	add	r2, r0
 800ccd2:	4601      	mov	r1, r0
 800ccd4:	428a      	cmp	r2, r1
 800ccd6:	d100      	bne.n	800ccda <memmove+0x2a>
 800ccd8:	bd10      	pop	{r4, pc}
 800ccda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cce2:	e7f7      	b.n	800ccd4 <memmove+0x24>

0800cce4 <_sbrk_r>:
 800cce4:	b538      	push	{r3, r4, r5, lr}
 800cce6:	4d06      	ldr	r5, [pc, #24]	; (800cd00 <_sbrk_r+0x1c>)
 800cce8:	2300      	movs	r3, #0
 800ccea:	4604      	mov	r4, r0
 800ccec:	4608      	mov	r0, r1
 800ccee:	602b      	str	r3, [r5, #0]
 800ccf0:	f7f7 fb28 	bl	8004344 <_sbrk>
 800ccf4:	1c43      	adds	r3, r0, #1
 800ccf6:	d102      	bne.n	800ccfe <_sbrk_r+0x1a>
 800ccf8:	682b      	ldr	r3, [r5, #0]
 800ccfa:	b103      	cbz	r3, 800ccfe <_sbrk_r+0x1a>
 800ccfc:	6023      	str	r3, [r4, #0]
 800ccfe:	bd38      	pop	{r3, r4, r5, pc}
 800cd00:	20001eec 	.word	0x20001eec

0800cd04 <memcpy>:
 800cd04:	440a      	add	r2, r1
 800cd06:	4291      	cmp	r1, r2
 800cd08:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd0c:	d100      	bne.n	800cd10 <memcpy+0xc>
 800cd0e:	4770      	bx	lr
 800cd10:	b510      	push	{r4, lr}
 800cd12:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd1a:	4291      	cmp	r1, r2
 800cd1c:	d1f9      	bne.n	800cd12 <memcpy+0xe>
 800cd1e:	bd10      	pop	{r4, pc}

0800cd20 <__assert_func>:
 800cd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd22:	4614      	mov	r4, r2
 800cd24:	461a      	mov	r2, r3
 800cd26:	4b09      	ldr	r3, [pc, #36]	; (800cd4c <__assert_func+0x2c>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	68d8      	ldr	r0, [r3, #12]
 800cd2e:	b14c      	cbz	r4, 800cd44 <__assert_func+0x24>
 800cd30:	4b07      	ldr	r3, [pc, #28]	; (800cd50 <__assert_func+0x30>)
 800cd32:	9100      	str	r1, [sp, #0]
 800cd34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd38:	4906      	ldr	r1, [pc, #24]	; (800cd54 <__assert_func+0x34>)
 800cd3a:	462b      	mov	r3, r5
 800cd3c:	f000 f872 	bl	800ce24 <fiprintf>
 800cd40:	f000 f882 	bl	800ce48 <abort>
 800cd44:	4b04      	ldr	r3, [pc, #16]	; (800cd58 <__assert_func+0x38>)
 800cd46:	461c      	mov	r4, r3
 800cd48:	e7f3      	b.n	800cd32 <__assert_func+0x12>
 800cd4a:	bf00      	nop
 800cd4c:	20000064 	.word	0x20000064
 800cd50:	0800deb7 	.word	0x0800deb7
 800cd54:	0800dec4 	.word	0x0800dec4
 800cd58:	0800def2 	.word	0x0800def2

0800cd5c <_calloc_r>:
 800cd5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd5e:	fba1 2402 	umull	r2, r4, r1, r2
 800cd62:	b94c      	cbnz	r4, 800cd78 <_calloc_r+0x1c>
 800cd64:	4611      	mov	r1, r2
 800cd66:	9201      	str	r2, [sp, #4]
 800cd68:	f7ff f994 	bl	800c094 <_malloc_r>
 800cd6c:	9a01      	ldr	r2, [sp, #4]
 800cd6e:	4605      	mov	r5, r0
 800cd70:	b930      	cbnz	r0, 800cd80 <_calloc_r+0x24>
 800cd72:	4628      	mov	r0, r5
 800cd74:	b003      	add	sp, #12
 800cd76:	bd30      	pop	{r4, r5, pc}
 800cd78:	220c      	movs	r2, #12
 800cd7a:	6002      	str	r2, [r0, #0]
 800cd7c:	2500      	movs	r5, #0
 800cd7e:	e7f8      	b.n	800cd72 <_calloc_r+0x16>
 800cd80:	4621      	mov	r1, r4
 800cd82:	f7fe fa1b 	bl	800b1bc <memset>
 800cd86:	e7f4      	b.n	800cd72 <_calloc_r+0x16>

0800cd88 <__ascii_mbtowc>:
 800cd88:	b082      	sub	sp, #8
 800cd8a:	b901      	cbnz	r1, 800cd8e <__ascii_mbtowc+0x6>
 800cd8c:	a901      	add	r1, sp, #4
 800cd8e:	b142      	cbz	r2, 800cda2 <__ascii_mbtowc+0x1a>
 800cd90:	b14b      	cbz	r3, 800cda6 <__ascii_mbtowc+0x1e>
 800cd92:	7813      	ldrb	r3, [r2, #0]
 800cd94:	600b      	str	r3, [r1, #0]
 800cd96:	7812      	ldrb	r2, [r2, #0]
 800cd98:	1e10      	subs	r0, r2, #0
 800cd9a:	bf18      	it	ne
 800cd9c:	2001      	movne	r0, #1
 800cd9e:	b002      	add	sp, #8
 800cda0:	4770      	bx	lr
 800cda2:	4610      	mov	r0, r2
 800cda4:	e7fb      	b.n	800cd9e <__ascii_mbtowc+0x16>
 800cda6:	f06f 0001 	mvn.w	r0, #1
 800cdaa:	e7f8      	b.n	800cd9e <__ascii_mbtowc+0x16>

0800cdac <_realloc_r>:
 800cdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb0:	4680      	mov	r8, r0
 800cdb2:	4614      	mov	r4, r2
 800cdb4:	460e      	mov	r6, r1
 800cdb6:	b921      	cbnz	r1, 800cdc2 <_realloc_r+0x16>
 800cdb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	f7ff b969 	b.w	800c094 <_malloc_r>
 800cdc2:	b92a      	cbnz	r2, 800cdd0 <_realloc_r+0x24>
 800cdc4:	f7ff f8f2 	bl	800bfac <_free_r>
 800cdc8:	4625      	mov	r5, r4
 800cdca:	4628      	mov	r0, r5
 800cdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd0:	f000 f841 	bl	800ce56 <_malloc_usable_size_r>
 800cdd4:	4284      	cmp	r4, r0
 800cdd6:	4607      	mov	r7, r0
 800cdd8:	d802      	bhi.n	800cde0 <_realloc_r+0x34>
 800cdda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdde:	d812      	bhi.n	800ce06 <_realloc_r+0x5a>
 800cde0:	4621      	mov	r1, r4
 800cde2:	4640      	mov	r0, r8
 800cde4:	f7ff f956 	bl	800c094 <_malloc_r>
 800cde8:	4605      	mov	r5, r0
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d0ed      	beq.n	800cdca <_realloc_r+0x1e>
 800cdee:	42bc      	cmp	r4, r7
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	bf28      	it	cs
 800cdf6:	463a      	movcs	r2, r7
 800cdf8:	f7ff ff84 	bl	800cd04 <memcpy>
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4640      	mov	r0, r8
 800ce00:	f7ff f8d4 	bl	800bfac <_free_r>
 800ce04:	e7e1      	b.n	800cdca <_realloc_r+0x1e>
 800ce06:	4635      	mov	r5, r6
 800ce08:	e7df      	b.n	800cdca <_realloc_r+0x1e>

0800ce0a <__ascii_wctomb>:
 800ce0a:	b149      	cbz	r1, 800ce20 <__ascii_wctomb+0x16>
 800ce0c:	2aff      	cmp	r2, #255	; 0xff
 800ce0e:	bf85      	ittet	hi
 800ce10:	238a      	movhi	r3, #138	; 0x8a
 800ce12:	6003      	strhi	r3, [r0, #0]
 800ce14:	700a      	strbls	r2, [r1, #0]
 800ce16:	f04f 30ff 	movhi.w	r0, #4294967295
 800ce1a:	bf98      	it	ls
 800ce1c:	2001      	movls	r0, #1
 800ce1e:	4770      	bx	lr
 800ce20:	4608      	mov	r0, r1
 800ce22:	4770      	bx	lr

0800ce24 <fiprintf>:
 800ce24:	b40e      	push	{r1, r2, r3}
 800ce26:	b503      	push	{r0, r1, lr}
 800ce28:	4601      	mov	r1, r0
 800ce2a:	ab03      	add	r3, sp, #12
 800ce2c:	4805      	ldr	r0, [pc, #20]	; (800ce44 <fiprintf+0x20>)
 800ce2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce32:	6800      	ldr	r0, [r0, #0]
 800ce34:	9301      	str	r3, [sp, #4]
 800ce36:	f000 f83f 	bl	800ceb8 <_vfiprintf_r>
 800ce3a:	b002      	add	sp, #8
 800ce3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce40:	b003      	add	sp, #12
 800ce42:	4770      	bx	lr
 800ce44:	20000064 	.word	0x20000064

0800ce48 <abort>:
 800ce48:	b508      	push	{r3, lr}
 800ce4a:	2006      	movs	r0, #6
 800ce4c:	f000 fa0c 	bl	800d268 <raise>
 800ce50:	2001      	movs	r0, #1
 800ce52:	f7f7 fa47 	bl	80042e4 <_exit>

0800ce56 <_malloc_usable_size_r>:
 800ce56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce5a:	1f18      	subs	r0, r3, #4
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	bfbc      	itt	lt
 800ce60:	580b      	ldrlt	r3, [r1, r0]
 800ce62:	18c0      	addlt	r0, r0, r3
 800ce64:	4770      	bx	lr

0800ce66 <__sfputc_r>:
 800ce66:	6893      	ldr	r3, [r2, #8]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	b410      	push	{r4}
 800ce6e:	6093      	str	r3, [r2, #8]
 800ce70:	da08      	bge.n	800ce84 <__sfputc_r+0x1e>
 800ce72:	6994      	ldr	r4, [r2, #24]
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	db01      	blt.n	800ce7c <__sfputc_r+0x16>
 800ce78:	290a      	cmp	r1, #10
 800ce7a:	d103      	bne.n	800ce84 <__sfputc_r+0x1e>
 800ce7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce80:	f000 b934 	b.w	800d0ec <__swbuf_r>
 800ce84:	6813      	ldr	r3, [r2, #0]
 800ce86:	1c58      	adds	r0, r3, #1
 800ce88:	6010      	str	r0, [r2, #0]
 800ce8a:	7019      	strb	r1, [r3, #0]
 800ce8c:	4608      	mov	r0, r1
 800ce8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <__sfputs_r>:
 800ce94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce96:	4606      	mov	r6, r0
 800ce98:	460f      	mov	r7, r1
 800ce9a:	4614      	mov	r4, r2
 800ce9c:	18d5      	adds	r5, r2, r3
 800ce9e:	42ac      	cmp	r4, r5
 800cea0:	d101      	bne.n	800cea6 <__sfputs_r+0x12>
 800cea2:	2000      	movs	r0, #0
 800cea4:	e007      	b.n	800ceb6 <__sfputs_r+0x22>
 800cea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceaa:	463a      	mov	r2, r7
 800ceac:	4630      	mov	r0, r6
 800ceae:	f7ff ffda 	bl	800ce66 <__sfputc_r>
 800ceb2:	1c43      	adds	r3, r0, #1
 800ceb4:	d1f3      	bne.n	800ce9e <__sfputs_r+0xa>
 800ceb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ceb8 <_vfiprintf_r>:
 800ceb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cebc:	460d      	mov	r5, r1
 800cebe:	b09d      	sub	sp, #116	; 0x74
 800cec0:	4614      	mov	r4, r2
 800cec2:	4698      	mov	r8, r3
 800cec4:	4606      	mov	r6, r0
 800cec6:	b118      	cbz	r0, 800ced0 <_vfiprintf_r+0x18>
 800cec8:	6a03      	ldr	r3, [r0, #32]
 800ceca:	b90b      	cbnz	r3, 800ced0 <_vfiprintf_r+0x18>
 800cecc:	f7fe f8dc 	bl	800b088 <__sinit>
 800ced0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ced2:	07d9      	lsls	r1, r3, #31
 800ced4:	d405      	bmi.n	800cee2 <_vfiprintf_r+0x2a>
 800ced6:	89ab      	ldrh	r3, [r5, #12]
 800ced8:	059a      	lsls	r2, r3, #22
 800ceda:	d402      	bmi.n	800cee2 <_vfiprintf_r+0x2a>
 800cedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cede:	f7fe f9e9 	bl	800b2b4 <__retarget_lock_acquire_recursive>
 800cee2:	89ab      	ldrh	r3, [r5, #12]
 800cee4:	071b      	lsls	r3, r3, #28
 800cee6:	d501      	bpl.n	800ceec <_vfiprintf_r+0x34>
 800cee8:	692b      	ldr	r3, [r5, #16]
 800ceea:	b99b      	cbnz	r3, 800cf14 <_vfiprintf_r+0x5c>
 800ceec:	4629      	mov	r1, r5
 800ceee:	4630      	mov	r0, r6
 800cef0:	f000 f93a 	bl	800d168 <__swsetup_r>
 800cef4:	b170      	cbz	r0, 800cf14 <_vfiprintf_r+0x5c>
 800cef6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cef8:	07dc      	lsls	r4, r3, #31
 800cefa:	d504      	bpl.n	800cf06 <_vfiprintf_r+0x4e>
 800cefc:	f04f 30ff 	mov.w	r0, #4294967295
 800cf00:	b01d      	add	sp, #116	; 0x74
 800cf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf06:	89ab      	ldrh	r3, [r5, #12]
 800cf08:	0598      	lsls	r0, r3, #22
 800cf0a:	d4f7      	bmi.n	800cefc <_vfiprintf_r+0x44>
 800cf0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf0e:	f7fe f9d2 	bl	800b2b6 <__retarget_lock_release_recursive>
 800cf12:	e7f3      	b.n	800cefc <_vfiprintf_r+0x44>
 800cf14:	2300      	movs	r3, #0
 800cf16:	9309      	str	r3, [sp, #36]	; 0x24
 800cf18:	2320      	movs	r3, #32
 800cf1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf22:	2330      	movs	r3, #48	; 0x30
 800cf24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d0d8 <_vfiprintf_r+0x220>
 800cf28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf2c:	f04f 0901 	mov.w	r9, #1
 800cf30:	4623      	mov	r3, r4
 800cf32:	469a      	mov	sl, r3
 800cf34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf38:	b10a      	cbz	r2, 800cf3e <_vfiprintf_r+0x86>
 800cf3a:	2a25      	cmp	r2, #37	; 0x25
 800cf3c:	d1f9      	bne.n	800cf32 <_vfiprintf_r+0x7a>
 800cf3e:	ebba 0b04 	subs.w	fp, sl, r4
 800cf42:	d00b      	beq.n	800cf5c <_vfiprintf_r+0xa4>
 800cf44:	465b      	mov	r3, fp
 800cf46:	4622      	mov	r2, r4
 800cf48:	4629      	mov	r1, r5
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f7ff ffa2 	bl	800ce94 <__sfputs_r>
 800cf50:	3001      	adds	r0, #1
 800cf52:	f000 80a9 	beq.w	800d0a8 <_vfiprintf_r+0x1f0>
 800cf56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf58:	445a      	add	r2, fp
 800cf5a:	9209      	str	r2, [sp, #36]	; 0x24
 800cf5c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f000 80a1 	beq.w	800d0a8 <_vfiprintf_r+0x1f0>
 800cf66:	2300      	movs	r3, #0
 800cf68:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf70:	f10a 0a01 	add.w	sl, sl, #1
 800cf74:	9304      	str	r3, [sp, #16]
 800cf76:	9307      	str	r3, [sp, #28]
 800cf78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf7c:	931a      	str	r3, [sp, #104]	; 0x68
 800cf7e:	4654      	mov	r4, sl
 800cf80:	2205      	movs	r2, #5
 800cf82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf86:	4854      	ldr	r0, [pc, #336]	; (800d0d8 <_vfiprintf_r+0x220>)
 800cf88:	f7f3 f922 	bl	80001d0 <memchr>
 800cf8c:	9a04      	ldr	r2, [sp, #16]
 800cf8e:	b9d8      	cbnz	r0, 800cfc8 <_vfiprintf_r+0x110>
 800cf90:	06d1      	lsls	r1, r2, #27
 800cf92:	bf44      	itt	mi
 800cf94:	2320      	movmi	r3, #32
 800cf96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf9a:	0713      	lsls	r3, r2, #28
 800cf9c:	bf44      	itt	mi
 800cf9e:	232b      	movmi	r3, #43	; 0x2b
 800cfa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfa4:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfaa:	d015      	beq.n	800cfd8 <_vfiprintf_r+0x120>
 800cfac:	9a07      	ldr	r2, [sp, #28]
 800cfae:	4654      	mov	r4, sl
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	f04f 0c0a 	mov.w	ip, #10
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfbc:	3b30      	subs	r3, #48	; 0x30
 800cfbe:	2b09      	cmp	r3, #9
 800cfc0:	d94d      	bls.n	800d05e <_vfiprintf_r+0x1a6>
 800cfc2:	b1b0      	cbz	r0, 800cff2 <_vfiprintf_r+0x13a>
 800cfc4:	9207      	str	r2, [sp, #28]
 800cfc6:	e014      	b.n	800cff2 <_vfiprintf_r+0x13a>
 800cfc8:	eba0 0308 	sub.w	r3, r0, r8
 800cfcc:	fa09 f303 	lsl.w	r3, r9, r3
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	9304      	str	r3, [sp, #16]
 800cfd4:	46a2      	mov	sl, r4
 800cfd6:	e7d2      	b.n	800cf7e <_vfiprintf_r+0xc6>
 800cfd8:	9b03      	ldr	r3, [sp, #12]
 800cfda:	1d19      	adds	r1, r3, #4
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	9103      	str	r1, [sp, #12]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	bfbb      	ittet	lt
 800cfe4:	425b      	neglt	r3, r3
 800cfe6:	f042 0202 	orrlt.w	r2, r2, #2
 800cfea:	9307      	strge	r3, [sp, #28]
 800cfec:	9307      	strlt	r3, [sp, #28]
 800cfee:	bfb8      	it	lt
 800cff0:	9204      	strlt	r2, [sp, #16]
 800cff2:	7823      	ldrb	r3, [r4, #0]
 800cff4:	2b2e      	cmp	r3, #46	; 0x2e
 800cff6:	d10c      	bne.n	800d012 <_vfiprintf_r+0x15a>
 800cff8:	7863      	ldrb	r3, [r4, #1]
 800cffa:	2b2a      	cmp	r3, #42	; 0x2a
 800cffc:	d134      	bne.n	800d068 <_vfiprintf_r+0x1b0>
 800cffe:	9b03      	ldr	r3, [sp, #12]
 800d000:	1d1a      	adds	r2, r3, #4
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	9203      	str	r2, [sp, #12]
 800d006:	2b00      	cmp	r3, #0
 800d008:	bfb8      	it	lt
 800d00a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d00e:	3402      	adds	r4, #2
 800d010:	9305      	str	r3, [sp, #20]
 800d012:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d0e8 <_vfiprintf_r+0x230>
 800d016:	7821      	ldrb	r1, [r4, #0]
 800d018:	2203      	movs	r2, #3
 800d01a:	4650      	mov	r0, sl
 800d01c:	f7f3 f8d8 	bl	80001d0 <memchr>
 800d020:	b138      	cbz	r0, 800d032 <_vfiprintf_r+0x17a>
 800d022:	9b04      	ldr	r3, [sp, #16]
 800d024:	eba0 000a 	sub.w	r0, r0, sl
 800d028:	2240      	movs	r2, #64	; 0x40
 800d02a:	4082      	lsls	r2, r0
 800d02c:	4313      	orrs	r3, r2
 800d02e:	3401      	adds	r4, #1
 800d030:	9304      	str	r3, [sp, #16]
 800d032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d036:	4829      	ldr	r0, [pc, #164]	; (800d0dc <_vfiprintf_r+0x224>)
 800d038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d03c:	2206      	movs	r2, #6
 800d03e:	f7f3 f8c7 	bl	80001d0 <memchr>
 800d042:	2800      	cmp	r0, #0
 800d044:	d03f      	beq.n	800d0c6 <_vfiprintf_r+0x20e>
 800d046:	4b26      	ldr	r3, [pc, #152]	; (800d0e0 <_vfiprintf_r+0x228>)
 800d048:	bb1b      	cbnz	r3, 800d092 <_vfiprintf_r+0x1da>
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	3307      	adds	r3, #7
 800d04e:	f023 0307 	bic.w	r3, r3, #7
 800d052:	3308      	adds	r3, #8
 800d054:	9303      	str	r3, [sp, #12]
 800d056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d058:	443b      	add	r3, r7
 800d05a:	9309      	str	r3, [sp, #36]	; 0x24
 800d05c:	e768      	b.n	800cf30 <_vfiprintf_r+0x78>
 800d05e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d062:	460c      	mov	r4, r1
 800d064:	2001      	movs	r0, #1
 800d066:	e7a6      	b.n	800cfb6 <_vfiprintf_r+0xfe>
 800d068:	2300      	movs	r3, #0
 800d06a:	3401      	adds	r4, #1
 800d06c:	9305      	str	r3, [sp, #20]
 800d06e:	4619      	mov	r1, r3
 800d070:	f04f 0c0a 	mov.w	ip, #10
 800d074:	4620      	mov	r0, r4
 800d076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d07a:	3a30      	subs	r2, #48	; 0x30
 800d07c:	2a09      	cmp	r2, #9
 800d07e:	d903      	bls.n	800d088 <_vfiprintf_r+0x1d0>
 800d080:	2b00      	cmp	r3, #0
 800d082:	d0c6      	beq.n	800d012 <_vfiprintf_r+0x15a>
 800d084:	9105      	str	r1, [sp, #20]
 800d086:	e7c4      	b.n	800d012 <_vfiprintf_r+0x15a>
 800d088:	fb0c 2101 	mla	r1, ip, r1, r2
 800d08c:	4604      	mov	r4, r0
 800d08e:	2301      	movs	r3, #1
 800d090:	e7f0      	b.n	800d074 <_vfiprintf_r+0x1bc>
 800d092:	ab03      	add	r3, sp, #12
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	462a      	mov	r2, r5
 800d098:	4b12      	ldr	r3, [pc, #72]	; (800d0e4 <_vfiprintf_r+0x22c>)
 800d09a:	a904      	add	r1, sp, #16
 800d09c:	4630      	mov	r0, r6
 800d09e:	f7fd fbb3 	bl	800a808 <_printf_float>
 800d0a2:	4607      	mov	r7, r0
 800d0a4:	1c78      	adds	r0, r7, #1
 800d0a6:	d1d6      	bne.n	800d056 <_vfiprintf_r+0x19e>
 800d0a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0aa:	07d9      	lsls	r1, r3, #31
 800d0ac:	d405      	bmi.n	800d0ba <_vfiprintf_r+0x202>
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	059a      	lsls	r2, r3, #22
 800d0b2:	d402      	bmi.n	800d0ba <_vfiprintf_r+0x202>
 800d0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0b6:	f7fe f8fe 	bl	800b2b6 <__retarget_lock_release_recursive>
 800d0ba:	89ab      	ldrh	r3, [r5, #12]
 800d0bc:	065b      	lsls	r3, r3, #25
 800d0be:	f53f af1d 	bmi.w	800cefc <_vfiprintf_r+0x44>
 800d0c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0c4:	e71c      	b.n	800cf00 <_vfiprintf_r+0x48>
 800d0c6:	ab03      	add	r3, sp, #12
 800d0c8:	9300      	str	r3, [sp, #0]
 800d0ca:	462a      	mov	r2, r5
 800d0cc:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <_vfiprintf_r+0x22c>)
 800d0ce:	a904      	add	r1, sp, #16
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	f7fd fe3d 	bl	800ad50 <_printf_i>
 800d0d6:	e7e4      	b.n	800d0a2 <_vfiprintf_r+0x1ea>
 800d0d8:	0800de9c 	.word	0x0800de9c
 800d0dc:	0800dea6 	.word	0x0800dea6
 800d0e0:	0800a809 	.word	0x0800a809
 800d0e4:	0800ce95 	.word	0x0800ce95
 800d0e8:	0800dea2 	.word	0x0800dea2

0800d0ec <__swbuf_r>:
 800d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ee:	460e      	mov	r6, r1
 800d0f0:	4614      	mov	r4, r2
 800d0f2:	4605      	mov	r5, r0
 800d0f4:	b118      	cbz	r0, 800d0fe <__swbuf_r+0x12>
 800d0f6:	6a03      	ldr	r3, [r0, #32]
 800d0f8:	b90b      	cbnz	r3, 800d0fe <__swbuf_r+0x12>
 800d0fa:	f7fd ffc5 	bl	800b088 <__sinit>
 800d0fe:	69a3      	ldr	r3, [r4, #24]
 800d100:	60a3      	str	r3, [r4, #8]
 800d102:	89a3      	ldrh	r3, [r4, #12]
 800d104:	071a      	lsls	r2, r3, #28
 800d106:	d525      	bpl.n	800d154 <__swbuf_r+0x68>
 800d108:	6923      	ldr	r3, [r4, #16]
 800d10a:	b31b      	cbz	r3, 800d154 <__swbuf_r+0x68>
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	6922      	ldr	r2, [r4, #16]
 800d110:	1a98      	subs	r0, r3, r2
 800d112:	6963      	ldr	r3, [r4, #20]
 800d114:	b2f6      	uxtb	r6, r6
 800d116:	4283      	cmp	r3, r0
 800d118:	4637      	mov	r7, r6
 800d11a:	dc04      	bgt.n	800d126 <__swbuf_r+0x3a>
 800d11c:	4621      	mov	r1, r4
 800d11e:	4628      	mov	r0, r5
 800d120:	f7ff fd9e 	bl	800cc60 <_fflush_r>
 800d124:	b9e0      	cbnz	r0, 800d160 <__swbuf_r+0x74>
 800d126:	68a3      	ldr	r3, [r4, #8]
 800d128:	3b01      	subs	r3, #1
 800d12a:	60a3      	str	r3, [r4, #8]
 800d12c:	6823      	ldr	r3, [r4, #0]
 800d12e:	1c5a      	adds	r2, r3, #1
 800d130:	6022      	str	r2, [r4, #0]
 800d132:	701e      	strb	r6, [r3, #0]
 800d134:	6962      	ldr	r2, [r4, #20]
 800d136:	1c43      	adds	r3, r0, #1
 800d138:	429a      	cmp	r2, r3
 800d13a:	d004      	beq.n	800d146 <__swbuf_r+0x5a>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	07db      	lsls	r3, r3, #31
 800d140:	d506      	bpl.n	800d150 <__swbuf_r+0x64>
 800d142:	2e0a      	cmp	r6, #10
 800d144:	d104      	bne.n	800d150 <__swbuf_r+0x64>
 800d146:	4621      	mov	r1, r4
 800d148:	4628      	mov	r0, r5
 800d14a:	f7ff fd89 	bl	800cc60 <_fflush_r>
 800d14e:	b938      	cbnz	r0, 800d160 <__swbuf_r+0x74>
 800d150:	4638      	mov	r0, r7
 800d152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d154:	4621      	mov	r1, r4
 800d156:	4628      	mov	r0, r5
 800d158:	f000 f806 	bl	800d168 <__swsetup_r>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	d0d5      	beq.n	800d10c <__swbuf_r+0x20>
 800d160:	f04f 37ff 	mov.w	r7, #4294967295
 800d164:	e7f4      	b.n	800d150 <__swbuf_r+0x64>
	...

0800d168 <__swsetup_r>:
 800d168:	b538      	push	{r3, r4, r5, lr}
 800d16a:	4b2a      	ldr	r3, [pc, #168]	; (800d214 <__swsetup_r+0xac>)
 800d16c:	4605      	mov	r5, r0
 800d16e:	6818      	ldr	r0, [r3, #0]
 800d170:	460c      	mov	r4, r1
 800d172:	b118      	cbz	r0, 800d17c <__swsetup_r+0x14>
 800d174:	6a03      	ldr	r3, [r0, #32]
 800d176:	b90b      	cbnz	r3, 800d17c <__swsetup_r+0x14>
 800d178:	f7fd ff86 	bl	800b088 <__sinit>
 800d17c:	89a3      	ldrh	r3, [r4, #12]
 800d17e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d182:	0718      	lsls	r0, r3, #28
 800d184:	d422      	bmi.n	800d1cc <__swsetup_r+0x64>
 800d186:	06d9      	lsls	r1, r3, #27
 800d188:	d407      	bmi.n	800d19a <__swsetup_r+0x32>
 800d18a:	2309      	movs	r3, #9
 800d18c:	602b      	str	r3, [r5, #0]
 800d18e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	f04f 30ff 	mov.w	r0, #4294967295
 800d198:	e034      	b.n	800d204 <__swsetup_r+0x9c>
 800d19a:	0758      	lsls	r0, r3, #29
 800d19c:	d512      	bpl.n	800d1c4 <__swsetup_r+0x5c>
 800d19e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1a0:	b141      	cbz	r1, 800d1b4 <__swsetup_r+0x4c>
 800d1a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1a6:	4299      	cmp	r1, r3
 800d1a8:	d002      	beq.n	800d1b0 <__swsetup_r+0x48>
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	f7fe fefe 	bl	800bfac <_free_r>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	6363      	str	r3, [r4, #52]	; 0x34
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1ba:	81a3      	strh	r3, [r4, #12]
 800d1bc:	2300      	movs	r3, #0
 800d1be:	6063      	str	r3, [r4, #4]
 800d1c0:	6923      	ldr	r3, [r4, #16]
 800d1c2:	6023      	str	r3, [r4, #0]
 800d1c4:	89a3      	ldrh	r3, [r4, #12]
 800d1c6:	f043 0308 	orr.w	r3, r3, #8
 800d1ca:	81a3      	strh	r3, [r4, #12]
 800d1cc:	6923      	ldr	r3, [r4, #16]
 800d1ce:	b94b      	cbnz	r3, 800d1e4 <__swsetup_r+0x7c>
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d1d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1da:	d003      	beq.n	800d1e4 <__swsetup_r+0x7c>
 800d1dc:	4621      	mov	r1, r4
 800d1de:	4628      	mov	r0, r5
 800d1e0:	f000 f884 	bl	800d2ec <__smakebuf_r>
 800d1e4:	89a0      	ldrh	r0, [r4, #12]
 800d1e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1ea:	f010 0301 	ands.w	r3, r0, #1
 800d1ee:	d00a      	beq.n	800d206 <__swsetup_r+0x9e>
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	60a3      	str	r3, [r4, #8]
 800d1f4:	6963      	ldr	r3, [r4, #20]
 800d1f6:	425b      	negs	r3, r3
 800d1f8:	61a3      	str	r3, [r4, #24]
 800d1fa:	6923      	ldr	r3, [r4, #16]
 800d1fc:	b943      	cbnz	r3, 800d210 <__swsetup_r+0xa8>
 800d1fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d202:	d1c4      	bne.n	800d18e <__swsetup_r+0x26>
 800d204:	bd38      	pop	{r3, r4, r5, pc}
 800d206:	0781      	lsls	r1, r0, #30
 800d208:	bf58      	it	pl
 800d20a:	6963      	ldrpl	r3, [r4, #20]
 800d20c:	60a3      	str	r3, [r4, #8]
 800d20e:	e7f4      	b.n	800d1fa <__swsetup_r+0x92>
 800d210:	2000      	movs	r0, #0
 800d212:	e7f7      	b.n	800d204 <__swsetup_r+0x9c>
 800d214:	20000064 	.word	0x20000064

0800d218 <_raise_r>:
 800d218:	291f      	cmp	r1, #31
 800d21a:	b538      	push	{r3, r4, r5, lr}
 800d21c:	4604      	mov	r4, r0
 800d21e:	460d      	mov	r5, r1
 800d220:	d904      	bls.n	800d22c <_raise_r+0x14>
 800d222:	2316      	movs	r3, #22
 800d224:	6003      	str	r3, [r0, #0]
 800d226:	f04f 30ff 	mov.w	r0, #4294967295
 800d22a:	bd38      	pop	{r3, r4, r5, pc}
 800d22c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d22e:	b112      	cbz	r2, 800d236 <_raise_r+0x1e>
 800d230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d234:	b94b      	cbnz	r3, 800d24a <_raise_r+0x32>
 800d236:	4620      	mov	r0, r4
 800d238:	f000 f830 	bl	800d29c <_getpid_r>
 800d23c:	462a      	mov	r2, r5
 800d23e:	4601      	mov	r1, r0
 800d240:	4620      	mov	r0, r4
 800d242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d246:	f000 b817 	b.w	800d278 <_kill_r>
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d00a      	beq.n	800d264 <_raise_r+0x4c>
 800d24e:	1c59      	adds	r1, r3, #1
 800d250:	d103      	bne.n	800d25a <_raise_r+0x42>
 800d252:	2316      	movs	r3, #22
 800d254:	6003      	str	r3, [r0, #0]
 800d256:	2001      	movs	r0, #1
 800d258:	e7e7      	b.n	800d22a <_raise_r+0x12>
 800d25a:	2400      	movs	r4, #0
 800d25c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d260:	4628      	mov	r0, r5
 800d262:	4798      	blx	r3
 800d264:	2000      	movs	r0, #0
 800d266:	e7e0      	b.n	800d22a <_raise_r+0x12>

0800d268 <raise>:
 800d268:	4b02      	ldr	r3, [pc, #8]	; (800d274 <raise+0xc>)
 800d26a:	4601      	mov	r1, r0
 800d26c:	6818      	ldr	r0, [r3, #0]
 800d26e:	f7ff bfd3 	b.w	800d218 <_raise_r>
 800d272:	bf00      	nop
 800d274:	20000064 	.word	0x20000064

0800d278 <_kill_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	4d07      	ldr	r5, [pc, #28]	; (800d298 <_kill_r+0x20>)
 800d27c:	2300      	movs	r3, #0
 800d27e:	4604      	mov	r4, r0
 800d280:	4608      	mov	r0, r1
 800d282:	4611      	mov	r1, r2
 800d284:	602b      	str	r3, [r5, #0]
 800d286:	f7f7 f825 	bl	80042d4 <_kill>
 800d28a:	1c43      	adds	r3, r0, #1
 800d28c:	d102      	bne.n	800d294 <_kill_r+0x1c>
 800d28e:	682b      	ldr	r3, [r5, #0]
 800d290:	b103      	cbz	r3, 800d294 <_kill_r+0x1c>
 800d292:	6023      	str	r3, [r4, #0]
 800d294:	bd38      	pop	{r3, r4, r5, pc}
 800d296:	bf00      	nop
 800d298:	20001eec 	.word	0x20001eec

0800d29c <_getpid_r>:
 800d29c:	f7f7 b818 	b.w	80042d0 <_getpid>

0800d2a0 <__swhatbuf_r>:
 800d2a0:	b570      	push	{r4, r5, r6, lr}
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2a8:	2900      	cmp	r1, #0
 800d2aa:	b096      	sub	sp, #88	; 0x58
 800d2ac:	4615      	mov	r5, r2
 800d2ae:	461e      	mov	r6, r3
 800d2b0:	da0d      	bge.n	800d2ce <__swhatbuf_r+0x2e>
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d2b8:	f04f 0100 	mov.w	r1, #0
 800d2bc:	bf0c      	ite	eq
 800d2be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d2c2:	2340      	movne	r3, #64	; 0x40
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	6031      	str	r1, [r6, #0]
 800d2c8:	602b      	str	r3, [r5, #0]
 800d2ca:	b016      	add	sp, #88	; 0x58
 800d2cc:	bd70      	pop	{r4, r5, r6, pc}
 800d2ce:	466a      	mov	r2, sp
 800d2d0:	f000 f848 	bl	800d364 <_fstat_r>
 800d2d4:	2800      	cmp	r0, #0
 800d2d6:	dbec      	blt.n	800d2b2 <__swhatbuf_r+0x12>
 800d2d8:	9901      	ldr	r1, [sp, #4]
 800d2da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d2de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d2e2:	4259      	negs	r1, r3
 800d2e4:	4159      	adcs	r1, r3
 800d2e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2ea:	e7eb      	b.n	800d2c4 <__swhatbuf_r+0x24>

0800d2ec <__smakebuf_r>:
 800d2ec:	898b      	ldrh	r3, [r1, #12]
 800d2ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2f0:	079d      	lsls	r5, r3, #30
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	460c      	mov	r4, r1
 800d2f6:	d507      	bpl.n	800d308 <__smakebuf_r+0x1c>
 800d2f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2fc:	6023      	str	r3, [r4, #0]
 800d2fe:	6123      	str	r3, [r4, #16]
 800d300:	2301      	movs	r3, #1
 800d302:	6163      	str	r3, [r4, #20]
 800d304:	b002      	add	sp, #8
 800d306:	bd70      	pop	{r4, r5, r6, pc}
 800d308:	ab01      	add	r3, sp, #4
 800d30a:	466a      	mov	r2, sp
 800d30c:	f7ff ffc8 	bl	800d2a0 <__swhatbuf_r>
 800d310:	9900      	ldr	r1, [sp, #0]
 800d312:	4605      	mov	r5, r0
 800d314:	4630      	mov	r0, r6
 800d316:	f7fe febd 	bl	800c094 <_malloc_r>
 800d31a:	b948      	cbnz	r0, 800d330 <__smakebuf_r+0x44>
 800d31c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d320:	059a      	lsls	r2, r3, #22
 800d322:	d4ef      	bmi.n	800d304 <__smakebuf_r+0x18>
 800d324:	f023 0303 	bic.w	r3, r3, #3
 800d328:	f043 0302 	orr.w	r3, r3, #2
 800d32c:	81a3      	strh	r3, [r4, #12]
 800d32e:	e7e3      	b.n	800d2f8 <__smakebuf_r+0xc>
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	6020      	str	r0, [r4, #0]
 800d334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d338:	81a3      	strh	r3, [r4, #12]
 800d33a:	9b00      	ldr	r3, [sp, #0]
 800d33c:	6163      	str	r3, [r4, #20]
 800d33e:	9b01      	ldr	r3, [sp, #4]
 800d340:	6120      	str	r0, [r4, #16]
 800d342:	b15b      	cbz	r3, 800d35c <__smakebuf_r+0x70>
 800d344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d348:	4630      	mov	r0, r6
 800d34a:	f000 f81d 	bl	800d388 <_isatty_r>
 800d34e:	b128      	cbz	r0, 800d35c <__smakebuf_r+0x70>
 800d350:	89a3      	ldrh	r3, [r4, #12]
 800d352:	f023 0303 	bic.w	r3, r3, #3
 800d356:	f043 0301 	orr.w	r3, r3, #1
 800d35a:	81a3      	strh	r3, [r4, #12]
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	431d      	orrs	r5, r3
 800d360:	81a5      	strh	r5, [r4, #12]
 800d362:	e7cf      	b.n	800d304 <__smakebuf_r+0x18>

0800d364 <_fstat_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	4d07      	ldr	r5, [pc, #28]	; (800d384 <_fstat_r+0x20>)
 800d368:	2300      	movs	r3, #0
 800d36a:	4604      	mov	r4, r0
 800d36c:	4608      	mov	r0, r1
 800d36e:	4611      	mov	r1, r2
 800d370:	602b      	str	r3, [r5, #0]
 800d372:	f7f6 ffdd 	bl	8004330 <_fstat>
 800d376:	1c43      	adds	r3, r0, #1
 800d378:	d102      	bne.n	800d380 <_fstat_r+0x1c>
 800d37a:	682b      	ldr	r3, [r5, #0]
 800d37c:	b103      	cbz	r3, 800d380 <_fstat_r+0x1c>
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	bd38      	pop	{r3, r4, r5, pc}
 800d382:	bf00      	nop
 800d384:	20001eec 	.word	0x20001eec

0800d388 <_isatty_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	4d06      	ldr	r5, [pc, #24]	; (800d3a4 <_isatty_r+0x1c>)
 800d38c:	2300      	movs	r3, #0
 800d38e:	4604      	mov	r4, r0
 800d390:	4608      	mov	r0, r1
 800d392:	602b      	str	r3, [r5, #0]
 800d394:	f7f6 ffd2 	bl	800433c <_isatty>
 800d398:	1c43      	adds	r3, r0, #1
 800d39a:	d102      	bne.n	800d3a2 <_isatty_r+0x1a>
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	b103      	cbz	r3, 800d3a2 <_isatty_r+0x1a>
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
 800d3a4:	20001eec 	.word	0x20001eec

0800d3a8 <_init>:
 800d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3aa:	bf00      	nop
 800d3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ae:	bc08      	pop	{r3}
 800d3b0:	469e      	mov	lr, r3
 800d3b2:	4770      	bx	lr

0800d3b4 <_fini>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	bf00      	nop
 800d3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3ba:	bc08      	pop	{r3}
 800d3bc:	469e      	mov	lr, r3
 800d3be:	4770      	bx	lr
