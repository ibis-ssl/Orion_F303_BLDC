
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  08009640  08009640  00019640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c5c  08009c5c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009c5c  08009c5c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c5c  08009c5c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c60  08009c60  00019c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          000013e8  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200015c8  200015c8  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002378b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a1b  00000000  00000000  0004399b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001abf7  00000000  00000000  000483b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001100  00000000  00000000  00062fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002c00  00000000  00000000  000640b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f81e  00000000  00000000  00066cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000065c9  00000000  00000000  000864ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0008ca97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d28  00000000  00000000  0008cae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009624 	.word	0x08009624

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009624 	.word	0x08009624

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c8a:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000c8c:	2400      	movs	r4, #0
{
 8000c8e:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c90:	4621      	mov	r1, r4
 8000c92:	eb0d 0002 	add.w	r0, sp, r2
  ADC_MultiModeTypeDef multimode = {0};
 8000c96:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000c9e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000ca2:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca4:	9404      	str	r4, [sp, #16]
 8000ca6:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ca8:	f005 ff86 	bl	8006bb8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	483c      	ldr	r0, [pc, #240]	; (8000da0 <MX_ADC1_Init+0x118>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cae:	2301      	movs	r3, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000cba:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbc:	2304      	movs	r3, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cbe:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc2:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ccc:	8304      	strh	r4, [r0, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cce:	6084      	str	r4, [r0, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd4:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd6:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cda:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cdc:	f001 fba8 	bl	8002430 <HAL_ADC_Init>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d143      	bne.n	8000d6c <MX_ADC1_Init+0xe4>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce6:	482e      	ldr	r0, [pc, #184]	; (8000da0 <MX_ADC1_Init+0x118>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cea:	a901      	add	r1, sp, #4
 8000cec:	f002 f998 	bl	8003020 <HAL_ADCEx_MultiModeConfigChannel>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d14b      	bne.n	8000d8c <MX_ADC1_Init+0x104>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	4828      	ldr	r0, [pc, #160]	; (8000da0 <MX_ADC1_Init+0x118>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_1;
 8000d04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000d08:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0c:	f001 fd70 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d138      	bne.n	8000d86 <MX_ADC1_Init+0xfe>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 3;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d14:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8000d98 <MX_ADC1_Init+0x110>
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d18:	2103      	movs	r1, #3
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d1a:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d1c:	2201      	movs	r2, #1
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000d1e:	2404      	movs	r4, #4
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d20:	9110      	str	r1, [sp, #64]	; 0x40
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d22:	481f      	ldr	r0, [pc, #124]	; (8000da0 <MX_ADC1_Init+0x118>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d24:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d26:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d28:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d2c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d30:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000d34:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d36:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d3a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d3e:	f001 ff21 	bl	8002b84 <HAL_ADCEx_InjectedConfigChannel>
 8000d42:	b9e8      	cbnz	r0, 8000d80 <MX_ADC1_Init+0xf8>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d44:	2204      	movs	r2, #4
 8000d46:	2302      	movs	r3, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d48:	4815      	ldr	r0, [pc, #84]	; (8000da0 <MX_ADC1_Init+0x118>)
 8000d4a:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d4c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d50:	f001 ff18 	bl	8002b84 <HAL_ADCEx_InjectedConfigChannel>
 8000d54:	b988      	cbnz	r0, 8000d7a <MX_ADC1_Init+0xf2>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d56:	2205      	movs	r2, #5
 8000d58:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_ADC1_Init+0x118>)
 8000d5c:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d62:	f001 ff0f 	bl	8002b84 <HAL_ADCEx_InjectedConfigChannel>
 8000d66:	b920      	cbnz	r0, 8000d72 <MX_ADC1_Init+0xea>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d68:	b014      	add	sp, #80	; 0x50
 8000d6a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d6c:	f000 fd3c 	bl	80017e8 <Error_Handler>
 8000d70:	e7b8      	b.n	8000ce4 <MX_ADC1_Init+0x5c>
    Error_Handler();
 8000d72:	f000 fd39 	bl	80017e8 <Error_Handler>
}
 8000d76:	b014      	add	sp, #80	; 0x50
 8000d78:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d7a:	f000 fd35 	bl	80017e8 <Error_Handler>
 8000d7e:	e7ea      	b.n	8000d56 <MX_ADC1_Init+0xce>
    Error_Handler();
 8000d80:	f000 fd32 	bl	80017e8 <Error_Handler>
 8000d84:	e7de      	b.n	8000d44 <MX_ADC1_Init+0xbc>
    Error_Handler();
 8000d86:	f000 fd2f 	bl	80017e8 <Error_Handler>
 8000d8a:	e7c3      	b.n	8000d14 <MX_ADC1_Init+0x8c>
    Error_Handler();
 8000d8c:	f000 fd2c 	bl	80017e8 <Error_Handler>
 8000d90:	e7b0      	b.n	8000cf4 <MX_ADC1_Init+0x6c>
 8000d92:	bf00      	nop
 8000d94:	f3af 8000 	nop.w
 8000d98:	00000001 	.word	0x00000001
 8000d9c:	00000040 	.word	0x00000040
 8000da0:	20000200 	.word	0x20000200
 8000da4:	00000000 	.word	0x00000000

08000da8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000da8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	2400      	movs	r4, #0
{
 8000dac:	b090      	sub	sp, #64	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	4621      	mov	r1, r4
 8000db2:	a806      	add	r0, sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000db4:	e9cd 4400 	strd	r4, r4, [sp]
 8000db8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000dbc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dc0:	f005 fefa 	bl	8006bb8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <MX_ADC2_Init+0xc0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <MX_ADC2_Init+0xc4>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dc8:	8304      	strh	r4, [r0, #24]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dce:	e9c0 2300 	strd	r2, r3, [r0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dda:	2304      	movs	r3, #4
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dde:	6104      	str	r4, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de4:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000de6:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000de8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dec:	6143      	str	r3, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dee:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df0:	f001 fb1e 	bl	8002430 <HAL_ADC_Init>
 8000df4:	bb38      	cbnz	r0, 8000e46 <MX_ADC2_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000df6:	2201      	movs	r2, #1
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfe:	481a      	ldr	r0, [pc, #104]	; (8000e68 <MX_ADC2_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000e00:	2200      	movs	r2, #0
 8000e02:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e04:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_1;
 8000e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e0e:	f001 fcef 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8000e12:	b9f8      	cbnz	r0, 8000e54 <MX_ADC2_Init+0xac>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e14:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8000e60 <MX_ADC2_Init+0xb8>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000e18:	2004      	movs	r0, #4
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e1a:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e1c:	2201      	movs	r2, #1
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000e1e:	9008      	str	r0, [sp, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e20:	a906      	add	r1, sp, #24
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_ADC2_Init+0xc0>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e24:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e26:	e9cd 2206 	strd	r2, r2, [sp, #24]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e2a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e2e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000e32:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e34:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e38:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e3c:	f001 fea2 	bl	8002b84 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	b920      	cbnz	r0, 8000e4c <MX_ADC2_Init+0xa4>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e42:	b010      	add	sp, #64	; 0x40
 8000e44:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e46:	f000 fccf 	bl	80017e8 <Error_Handler>
 8000e4a:	e7d4      	b.n	8000df6 <MX_ADC2_Init+0x4e>
    Error_Handler();
 8000e4c:	f000 fccc 	bl	80017e8 <Error_Handler>
}
 8000e50:	b010      	add	sp, #64	; 0x40
 8000e52:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e54:	f000 fcc8 	bl	80017e8 <Error_Handler>
 8000e58:	e7dc      	b.n	8000e14 <MX_ADC2_Init+0x6c>
 8000e5a:	bf00      	nop
 8000e5c:	f3af 8000 	nop.w
 8000e60:	00000001 	.word	0x00000001
 8000e64:	00000040 	.word	0x00000040
 8000e68:	20000250 	.word	0x20000250
 8000e6c:	50000100 	.word	0x50000100

08000e70 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e70:	b510      	push	{r4, lr}

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e72:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000e74:	2400      	movs	r4, #0
{
 8000e76:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e78:	eb0d 0002 	add.w	r0, sp, r2
 8000e7c:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000e7e:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000e86:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000e8a:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8c:	9404      	str	r4, [sp, #16]
 8000e8e:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e90:	f005 fe92 	bl	8006bb8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e94:	482c      	ldr	r0, [pc, #176]	; (8000f48 <MX_ADC3_Init+0xd8>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e96:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <MX_ADC3_Init+0xdc>)
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e98:	8304      	strh	r4, [r0, #24]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e9e:	e9c0 2300 	strd	r2, r3, [r0]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	2304      	movs	r3, #4
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	6084      	str	r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eae:	6104      	str	r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eb0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb4:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000eb6:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000eb8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	6143      	str	r3, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ebe:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ec0:	f001 fab6 	bl	8002430 <HAL_ADC_Init>
 8000ec4:	bb78      	cbnz	r0, 8000f26 <MX_ADC3_Init+0xb6>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <MX_ADC3_Init+0xd8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eca:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ecc:	a901      	add	r1, sp, #4
 8000ece:	f002 f8a7 	bl	8003020 <HAL_ADCEx_MultiModeConfigChannel>
 8000ed2:	bb90      	cbnz	r0, 8000f3a <MX_ADC3_Init+0xca>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000edc:	481a      	ldr	r0, [pc, #104]	; (8000f48 <MX_ADC3_Init+0xd8>)
  sConfig.Channel = ADC_CHANNEL_5;
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ee2:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eec:	f001 fc80 	bl	80027f0 <HAL_ADC_ConfigChannel>
 8000ef0:	bb00      	cbnz	r0, 8000f34 <MX_ADC3_Init+0xc4>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000ef2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8000f40 <MX_ADC3_Init+0xd0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000ef6:	2201      	movs	r2, #1
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000ef8:	2005      	movs	r0, #5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000efa:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000efc:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000f00:	2404      	movs	r4, #4
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_ADC3_Init+0xd8>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f04:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f06:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f08:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f0c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f10:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000f12:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f14:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f18:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f1c:	f001 fe32 	bl	8002b84 <HAL_ADCEx_InjectedConfigChannel>
 8000f20:	b920      	cbnz	r0, 8000f2c <MX_ADC3_Init+0xbc>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f22:	b014      	add	sp, #80	; 0x50
 8000f24:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f26:	f000 fc5f 	bl	80017e8 <Error_Handler>
 8000f2a:	e7cc      	b.n	8000ec6 <MX_ADC3_Init+0x56>
    Error_Handler();
 8000f2c:	f000 fc5c 	bl	80017e8 <Error_Handler>
}
 8000f30:	b014      	add	sp, #80	; 0x50
 8000f32:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f34:	f000 fc58 	bl	80017e8 <Error_Handler>
 8000f38:	e7db      	b.n	8000ef2 <MX_ADC3_Init+0x82>
    Error_Handler();
 8000f3a:	f000 fc55 	bl	80017e8 <Error_Handler>
 8000f3e:	e7c9      	b.n	8000ed4 <MX_ADC3_Init+0x64>
 8000f40:	00000001 	.word	0x00000001
 8000f44:	00000040 	.word	0x00000040
 8000f48:	200002a0 	.word	0x200002a0
 8000f4c:	50000400 	.word	0x50000400

08000f50 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f50:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000f52:	6802      	ldr	r2, [r0, #0]
{
 8000f54:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8000f58:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000f60:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000f64:	930c      	str	r3, [sp, #48]	; 0x30
  if(adcHandle->Instance==ADC1)
 8000f66:	d024      	beq.n	8000fb2 <HAL_ADC_MspInit+0x62>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <HAL_ADC_MspInit+0x140>)
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d005      	beq.n	8000f7a <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000f6e:	4b49      	ldr	r3, [pc, #292]	; (8001094 <HAL_ADC_MspInit+0x144>)
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d063      	beq.n	800103c <HAL_ADC_MspInit+0xec>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f74:	b00f      	add	sp, #60	; 0x3c
 8000f76:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f7a:	4a47      	ldr	r2, [pc, #284]	; (8001098 <HAL_ADC_MspInit+0x148>)
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f80:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f84:	d04f      	beq.n	8001026 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b45      	ldr	r3, [pc, #276]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f92:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8001080 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	a908      	add	r1, sp, #32
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fa2:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f002 fe36 	bl	8003c18 <HAL_GPIO_Init>
}
 8000fac:	b00f      	add	sp, #60	; 0x3c
 8000fae:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fb2:	4a39      	ldr	r2, [pc, #228]	; (8001098 <HAL_ADC_MspInit+0x148>)
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fb8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fbc:	d028      	beq.n	8001010 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000fce:	9202      	str	r2, [sp, #8]
 8000fd0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd2:	695a      	ldr	r2, [r3, #20]
 8000fd4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fe2:	2209      	movs	r2, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fe6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fec:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f002 fe11 	bl	8003c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001080 <HAL_ADC_MspInit+0x130>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ffc:	4828      	ldr	r0, [pc, #160]	; (80010a0 <HAL_ADC_MspInit+0x150>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001000:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001002:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001006:	f002 fe07 	bl	8003c18 <HAL_GPIO_Init>
}
 800100a:	b00f      	add	sp, #60	; 0x3c
 800100c:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	9b01      	ldr	r3, [sp, #4]
 8001024:	e7cb      	b.n	8000fbe <HAL_ADC_MspInit+0x6e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	9304      	str	r3, [sp, #16]
 8001038:	9b04      	ldr	r3, [sp, #16]
 800103a:	e7a4      	b.n	8000f86 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800103c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001040:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001044:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001088 <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001048:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <HAL_ADC_MspInit+0x154>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800104c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001058:	9206      	str	r2, [sp, #24]
 800105a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800106e:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f002 fdd0 	bl	8003c18 <HAL_GPIO_Init>
}
 8001078:	e77c      	b.n	8000f74 <HAL_ADC_MspInit+0x24>
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	00000010 	.word	0x00000010
 8001084:	00000003 	.word	0x00000003
 8001088:	00002000 	.word	0x00002000
 800108c:	00000003 	.word	0x00000003
 8001090:	50000100 	.word	0x50000100
 8001094:	50000400 	.word	0x50000400
 8001098:	200001fc 	.word	0x200001fc
 800109c:	40021000 	.word	0x40021000
 80010a0:	48001400 	.word	0x48001400
 80010a4:	48000400 	.word	0x48000400

080010a8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80010a8:	b510      	push	{r4, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_CAN_Init+0x34>)
 80010ac:	4c0c      	ldr	r4, [pc, #48]	; (80010e0 <MX_CAN_Init+0x38>)
  hcan.Init.Prescaler = 2;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80010ae:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 2;
 80010b0:	2202      	movs	r2, #2
 80010b2:	e9c0 4200 	strd	r4, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80010b6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 80010ba:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
  hcan.Init.TimeTriggeredMode = DISABLE;
 80010be:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80010c0:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_6TQ;
 80010c6:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80010ca:	f002 f83d 	bl	8003148 <HAL_CAN_Init>
 80010ce:	b900      	cbnz	r0, 80010d2 <MX_CAN_Init+0x2a>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80010d0:	bd10      	pop	{r4, pc}
 80010d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80010d6:	f000 bb87 	b.w	80017e8 <Error_Handler>
 80010da:	bf00      	nop
 80010dc:	200002f0 	.word	0x200002f0
 80010e0:	40006400 	.word	0x40006400

080010e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010e4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <HAL_CAN_MspInit+0xa4>)
 80010e8:	6802      	ldr	r2, [r0, #0]
{
 80010ea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 80010ee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80010f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80010f8:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN)
 80010fa:	d001      	beq.n	8001100 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80010fc:	b009      	add	sp, #36	; 0x24
 80010fe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001100:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800110c:	61da      	str	r2, [r3, #28]
 800110e:	69da      	ldr	r2, [r3, #28]
 8001110:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001114:	9200      	str	r2, [sp, #0]
 8001116:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001128:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800112c:	2302      	movs	r3, #2
 800112e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001136:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001138:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800113a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f002 fd6a 	bl	8003c18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8001144:	4622      	mov	r2, r4
 8001146:	4621      	mov	r1, r4
 8001148:	2013      	movs	r0, #19
 800114a:	f002 fa5b 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 800114e:	2013      	movs	r0, #19
 8001150:	f002 fa96 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001154:	4622      	mov	r2, r4
 8001156:	4621      	mov	r1, r4
 8001158:	2014      	movs	r0, #20
 800115a:	f002 fa53 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800115e:	2014      	movs	r0, #20
 8001160:	f002 fa8e 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 8001164:	4622      	mov	r2, r4
 8001166:	2101      	movs	r1, #1
 8001168:	2015      	movs	r0, #21
 800116a:	f002 fa4b 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800116e:	2015      	movs	r0, #21
 8001170:	f002 fa86 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 8001174:	4622      	mov	r2, r4
 8001176:	2101      	movs	r1, #1
 8001178:	2016      	movs	r0, #22
 800117a:	f002 fa43 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 800117e:	2016      	movs	r0, #22
 8001180:	f002 fa7e 	bl	8003680 <HAL_NVIC_EnableIRQ>
}
 8001184:	b009      	add	sp, #36	; 0x24
 8001186:	bd30      	pop	{r4, r5, pc}
 8001188:	40006400 	.word	0x40006400

0800118c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_DMA_Init+0x30>)
{
 800118e:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001190:	6959      	ldr	r1, [r3, #20]
 8001192:	f041 0101 	orr.w	r1, r1, #1
 8001196:	6159      	str	r1, [r3, #20]
 8001198:	695b      	ldr	r3, [r3, #20]
{
 800119a:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80011a4:	200e      	movs	r0, #14
 80011a6:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80011aa:	f002 fa2b 	bl	8003604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011ae:	200e      	movs	r0, #14

}
 80011b0:	b003      	add	sp, #12
 80011b2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80011b6:	f002 ba63 	b.w	8003680 <HAL_NVIC_EnableIRQ>
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	2400      	movs	r4, #0
{
 80011c6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80011cc:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <MX_GPIO_Init+0xd4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d4:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011d6:	4d30      	ldr	r5, [pc, #192]	; (8001298 <MX_GPIO_Init+0xd8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80011d8:	4e30      	ldr	r6, [pc, #192]	; (800129c <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011de:	615a      	str	r2, [r3, #20]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80011e6:	9200      	str	r2, [sp, #0]
 80011e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ea:	695a      	ldr	r2, [r3, #20]
 80011ec:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80011f0:	615a      	str	r2, [r3, #20]
 80011f2:	695a      	ldr	r2, [r3, #20]
 80011f4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001202:	615a      	str	r2, [r3, #20]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800120a:	9202      	str	r2, [sp, #8]
 800120c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800121c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800121e:	4622      	mov	r2, r4
 8001220:	4628      	mov	r0, r5
 8001222:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001228:	f002 fde0 	bl	8003dec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800122c:	4622      	mov	r2, r4
 800122e:	4630      	mov	r0, r6
 8001230:	21c0      	movs	r1, #192	; 0xc0
 8001232:	f002 fddb 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001236:	f04f 0800 	mov.w	r8, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123a:	a904      	add	r1, sp, #16
 800123c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800123e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001242:	2301      	movs	r3, #1
 8001244:	f04f 0900 	mov.w	r9, #0
 8001248:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800124c:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	f002 fce2 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001254:	a904      	add	r1, sp, #16
 8001256:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001258:	2201      	movs	r2, #1
 800125a:	2300      	movs	r3, #0
 800125c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f002 fcd9 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001266:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	4628      	mov	r0, r5
 800126a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800126c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800126e:	220e      	movs	r2, #14
 8001270:	2300      	movs	r3, #0
 8001272:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001276:	f002 fccf 	bl	8003c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800127a:	22c0      	movs	r2, #192	; 0xc0
 800127c:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127e:	a904      	add	r1, sp, #16
 8001280:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001282:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001286:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f002 fcc5 	bl	8003c18 <HAL_GPIO_Init>

}
 800128e:	b00a      	add	sp, #40	; 0x28
 8001290:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	48000800 	.word	0x48000800
 800129c:	48000400 	.word	0x48000400

080012a0 <_write>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int f getc(FILE *f)
#endif
*/
int _write(int file, char *ptr, int len)
{
 80012a0:	b510      	push	{r4, lr}
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len);
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <_write+0x10>)
{
 80012a4:	4614      	mov	r4, r2
	HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ptr, len);
 80012a6:	b292      	uxth	r2, r2
 80012a8:	f003 ff46 	bl	8005138 <HAL_UART_Transmit_DMA>
	return len;
}
 80012ac:	4620      	mov	r0, r4
 80012ae:	bd10      	pop	{r4, pc}
 80012b0:	2000150c 	.word	0x2000150c

080012b4 <checkAngle>:
// -0.1 / 2.50  -> 60deg
// + 2.6-2.7 = 4.3 - 1.7
// 4.3
// - 6.0-6.1 = 4.3 + 1.7
void checkAngle(motor)
{
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	calib[motor].radian_ave += getElecRadianMA702(motor);
 80012b6:	4e33      	ldr	r6, [pc, #204]	; (8001384 <checkAngle+0xd0>)
 80012b8:	eb06 1540 	add.w	r5, r6, r0, lsl #5
{
 80012bc:	4604      	mov	r4, r0
	calib[motor].radian_ave += getElecRadianMA702(motor);
 80012be:	f000 fb99 	bl	80019f4 <getElecRadianMA702>
	calib[motor].ave_cnt++;
 80012c2:	68ab      	ldr	r3, [r5, #8]
	calib[motor].radian_ave += getElecRadianMA702(motor);
 80012c4:	edd5 7a01 	vldr	s15, [r5, #4]
	if (calib[motor].pre_raw > 63335 / 2 && getRawMA702(motor) < 63335 / 2 && calib_rotation_speed < 0)
 80012c8:	68ea      	ldr	r2, [r5, #12]
	calib[motor].ave_cnt++;
 80012ca:	3301      	adds	r3, #1
	calib[motor].radian_ave += getElecRadianMA702(motor);
 80012cc:	ee37 0a80 	vadd.f32	s0, s15, s0
	calib[motor].ave_cnt++;
 80012d0:	60ab      	str	r3, [r5, #8]
	if (calib[motor].pre_raw > 63335 / 2 && getRawMA702(motor) < 63335 / 2 && calib_rotation_speed < 0)
 80012d2:	f647 33b3 	movw	r3, #31667	; 0x7bb3
 80012d6:	429a      	cmp	r2, r3
	calib[motor].radian_ave += getElecRadianMA702(motor);
 80012d8:	ed85 0a01 	vstr	s0, [r5, #4]
 80012dc:	ea4f 1744 	mov.w	r7, r4, lsl #5
	if (calib[motor].pre_raw > 63335 / 2 && getRawMA702(motor) < 63335 / 2 && calib_rotation_speed < 0)
 80012e0:	dc0b      	bgt.n	80012fa <checkAngle+0x46>
		calib[motor].result_ccw_cnt++;
		calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
		calib[motor].radian_ave = 0;
		calib[motor].ave_cnt = 0;
	}
	if (calib[motor].pre_raw < 63335 / 2 && getRawMA702(motor) > 63335 / 2 && calib_rotation_speed > 0)
 80012e2:	19f5      	adds	r5, r6, r7
 80012e4:	f647 33b2 	movw	r3, #31666	; 0x7bb2
 80012e8:	68ea      	ldr	r2, [r5, #12]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dd27      	ble.n	800133e <checkAngle+0x8a>
		calib[motor].result_cw_cnt++;
		calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
		calib[motor].radian_ave = 0;
		calib[motor].ave_cnt = 0;
	}
	calib[motor].pre_raw = getRawMA702(motor);
 80012ee:	4620      	mov	r0, r4
 80012f0:	f000 fb88 	bl	8001a04 <getRawMA702>
 80012f4:	443e      	add	r6, r7
 80012f6:	60f0      	str	r0, [r6, #12]
}
 80012f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (calib[motor].pre_raw > 63335 / 2 && getRawMA702(motor) < 63335 / 2 && calib_rotation_speed < 0)
 80012fa:	4620      	mov	r0, r4
 80012fc:	f000 fb82 	bl	8001a04 <getRawMA702>
 8001300:	f647 33b2 	movw	r3, #31666	; 0x7bb2
 8001304:	4298      	cmp	r0, r3
 8001306:	dcec      	bgt.n	80012e2 <checkAngle+0x2e>
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <checkAngle+0xd4>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	d5e2      	bpl.n	80012e2 <checkAngle+0x2e>
		calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 800131c:	edd5 7a02 	vldr	s15, [r5, #8]
 8001320:	edd5 6a01 	vldr	s13, [r5, #4]
		calib[motor].radian_ave = 0;
 8001324:	606b      	str	r3, [r5, #4]
		calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		calib[motor].ave_cnt = 0;
 800132a:	2300      	movs	r3, #0
		calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 800132c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		calib[motor].ave_cnt = 0;
 8001330:	60ab      	str	r3, [r5, #8]
		calib[motor].result_ccw_cnt++;
 8001332:	69eb      	ldr	r3, [r5, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61eb      	str	r3, [r5, #28]
		calib[motor].result_ccw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001338:	ed85 7a06 	vstr	s14, [r5, #24]
 800133c:	e7d1      	b.n	80012e2 <checkAngle+0x2e>
	if (calib[motor].pre_raw < 63335 / 2 && getRawMA702(motor) > 63335 / 2 && calib_rotation_speed > 0)
 800133e:	4620      	mov	r0, r4
 8001340:	f000 fb60 	bl	8001a04 <getRawMA702>
 8001344:	f647 33b3 	movw	r3, #31667	; 0x7bb3
 8001348:	4298      	cmp	r0, r3
 800134a:	ddd0      	ble.n	80012ee <checkAngle+0x3a>
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <checkAngle+0xd4>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	ddc6      	ble.n	80012ee <checkAngle+0x3a>
		calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001360:	edd5 7a02 	vldr	s15, [r5, #8]
 8001364:	edd5 6a01 	vldr	s13, [r5, #4]
		calib[motor].radian_ave = 0;
 8001368:	606b      	str	r3, [r5, #4]
		calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 800136a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		calib[motor].ave_cnt = 0;
 800136e:	2300      	movs	r3, #0
		calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 8001370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		calib[motor].ave_cnt = 0;
 8001374:	60ab      	str	r3, [r5, #8]
		calib[motor].result_cw_cnt++;
 8001376:	696b      	ldr	r3, [r5, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	616b      	str	r3, [r5, #20]
		calib[motor].result_cw = calib[motor].radian_ave / calib[motor].ave_cnt;
 800137c:	ed85 7a04 	vstr	s14, [r5, #16]
 8001380:	e7b5      	b.n	80012ee <checkAngle+0x3a>
 8001382:	bf00      	nop
 8001384:	2000032c 	.word	0x2000032c
 8001388:	20000000 	.word	0x20000000
 800138c:	00000000 	.word	0x00000000

08001390 <HAL_TIM_PeriodElapsedCallback>:
		setOutputRadianM1(getElecRadianMA702(1) + offset_radian, output_voltage, 24);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// TIM1 : M1
	// TIM8 : M0
	static bool motor_select_toggle = false;

	if (htim == &htim1)
 8001392:	4b95      	ldr	r3, [pc, #596]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001394:	4298      	cmp	r0, r3
{
 8001396:	ed2d 8b02 	vpush	{d8}
	if (htim == &htim1)
 800139a:	d003      	beq.n	80013a4 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
	}
	else if (htim == &htim8)
 800139c:	4b93      	ldr	r3, [pc, #588]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800139e:	4298      	cmp	r0, r3
 80013a0:	f000 80f1 	beq.w	8001586 <HAL_TIM_PeriodElapsedCallback+0x1f6>
	{
		return;
	}

	motor_select_toggle = !motor_select_toggle;
 80013a4:	4c92      	ldr	r4, [pc, #584]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x260>)

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80013a6:	4893      	ldr	r0, [pc, #588]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
	motor_select_toggle = !motor_select_toggle;
 80013a8:	7823      	ldrb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
	motor_select_toggle = !motor_select_toggle;
 80013ac:	4053      	eors	r3, r2
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80013ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	motor_select_toggle = !motor_select_toggle;
 80013b2:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80013b4:	f002 fd1a 	bl	8003dec <HAL_GPIO_WritePin>
	if (calibration_mode)
 80013b8:	4b8f      	ldr	r3, [pc, #572]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80013ba:	781d      	ldrb	r5, [r3, #0]
 80013bc:	2d00      	cmp	r5, #0
 80013be:	d04f      	beq.n	8001460 <HAL_TIM_PeriodElapsedCallback+0xd0>
	offset_radian -= calib_rotation_speed;
 80013c0:	4b8e      	ldr	r3, [pc, #568]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80013c2:	4d8f      	ldr	r5, [pc, #572]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ed95 8a00 	vldr	s16, [r5]
	{
		calibrationProcess(motor_select_toggle);
 80013cc:	7824      	ldrb	r4, [r4, #0]
	offset_radian -= calib_rotation_speed;
 80013ce:	ee38 8a67 	vsub.f32	s16, s16, s15
	if (offset_radian > M_PI * 2)
 80013d2:	ee18 0a10 	vmov	r0, s16
 80013d6:	f7ff f8b7 	bl	8000548 <__aeabi_f2d>
 80013da:	a381      	add	r3, pc, #516	; (adr r3, 80015e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	4606      	mov	r6, r0
 80013e2:	460f      	mov	r7, r1
 80013e4:	f7ff fb98 	bl	8000b18 <__aeabi_dcmpgt>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	f040 80cf 	bne.w	800158c <HAL_TIM_PeriodElapsedCallback+0x1fc>
	if (offset_radian < 0)
 80013ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	offset_radian -= calib_rotation_speed;
 80013f6:	ed85 8a00 	vstr	s16, [r5]
	if (offset_radian < 0)
 80013fa:	f100 80dd 	bmi.w	80015b8 <HAL_TIM_PeriodElapsedCallback+0x228>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013fe:	487d      	ldr	r0, [pc, #500]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (motor)
 8001406:	2c00      	cmp	r4, #0
 8001408:	f000 8097 	beq.w	800153a <HAL_TIM_PeriodElapsedCallback+0x1aa>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800140c:	f002 fcee 	bl	8003dec <HAL_GPIO_WritePin>
	adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001410:	2101      	movs	r1, #1
 8001412:	487c      	ldr	r0, [pc, #496]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001414:	4c7c      	ldr	r4, [pc, #496]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001416:	f001 f9d5 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800141a:	2102      	movs	r1, #2
	adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800141c:	4603      	mov	r3, r0
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800141e:	4879      	ldr	r0, [pc, #484]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x274>)
	adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001420:	6023      	str	r3, [r4, #0]
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001422:	f001 f9cf 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
	adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001426:	2103      	movs	r1, #3
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001428:	4603      	mov	r3, r0
	adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800142a:	4876      	ldr	r0, [pc, #472]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x274>)
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800142c:	60e3      	str	r3, [r4, #12]
	adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800142e:	f001 f9c9 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
 8001432:	4603      	mov	r3, r0
	HAL_ADCEx_InjectedStart(&hadc1);
 8001434:	4873      	ldr	r0, [pc, #460]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x274>)
	adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001436:	6123      	str	r3, [r4, #16]
	HAL_ADCEx_InjectedStart(&hadc1);
 8001438:	f001 f93c 	bl	80026b4 <HAL_ADCEx_InjectedStart>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800143c:	486d      	ldr	r0, [pc, #436]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	f002 fcd2 	bl	8003dec <HAL_GPIO_WritePin>
		updateMA702_M0();
 8001448:	f000 fa36 	bl	80018b8 <updateMA702_M0>
		setOutputRadianM0(offset_radian, output_voltage, 24);
 800144c:	4b6f      	ldr	r3, [pc, #444]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800144e:	ed95 0a00 	vldr	s0, [r5]
 8001452:	edd3 0a00 	vldr	s1, [r3]
 8001456:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 800145a:	f000 fdb5 	bl	8001fc8 <setOutputRadianM0>
 800145e:	e035      	b.n	80014cc <HAL_TIM_PeriodElapsedCallback+0x13c>
	if (motor)
 8001460:	7824      	ldrb	r4, [r4, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001462:	4864      	ldr	r0, [pc, #400]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (motor)
 800146a:	2c00      	cmp	r4, #0
 800146c:	d038      	beq.n	80014e0 <HAL_TIM_PeriodElapsedCallback+0x150>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800146e:	f002 fcbd 	bl	8003dec <HAL_GPIO_WritePin>
	adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001472:	2101      	movs	r1, #1
 8001474:	4863      	ldr	r0, [pc, #396]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001476:	4c64      	ldr	r4, [pc, #400]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001478:	f001 f9a4 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800147c:	2102      	movs	r1, #2
	adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 800147e:	4603      	mov	r3, r0
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001480:	4860      	ldr	r0, [pc, #384]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x274>)
	adc_raw.cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1);
 8001482:	6023      	str	r3, [r4, #0]
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 8001484:	f001 f99e 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
	adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001488:	2103      	movs	r1, #3
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800148a:	4603      	mov	r3, r0
	adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 800148c:	485d      	ldr	r0, [pc, #372]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x274>)
	adc_raw.temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2);
 800148e:	60e3      	str	r3, [r4, #12]
	adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001490:	f001 f998 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
 8001494:	4603      	mov	r3, r0
	HAL_ADCEx_InjectedStart(&hadc1);
 8001496:	485b      	ldr	r0, [pc, #364]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x274>)
	adc_raw.temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3);
 8001498:	6123      	str	r3, [r4, #16]
	HAL_ADCEx_InjectedStart(&hadc1);
 800149a:	f001 f90b 	bl	80026b4 <HAL_ADCEx_InjectedStart>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800149e:	462a      	mov	r2, r5
 80014a0:	4854      	ldr	r0, [pc, #336]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80014a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a6:	f002 fca1 	bl	8003dec <HAL_GPIO_WritePin>
		updateMA702_M0();
 80014aa:	f000 fa05 	bl	80018b8 <updateMA702_M0>
		setOutputRadianM0(getElecRadianMA702(0) + offset_radian, output_voltage, 24);
 80014ae:	4628      	mov	r0, r5
 80014b0:	f000 faa0 	bl	80019f4 <getElecRadianMA702>
 80014b4:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80014b6:	4b55      	ldr	r3, [pc, #340]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80014b8:	edd2 7a00 	vldr	s15, [r2]
 80014bc:	edd3 0a00 	vldr	s1, [r3]
 80014c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80014c4:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 80014c8:	f000 fd7e 	bl	8001fc8 <setOutputRadianM0>
	{
		motorProcess(motor_select_toggle);
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
}
 80014cc:	ecbd 8b02 	vpop	{d8}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80014d0:	4848      	ldr	r0, [pc, #288]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
}
 80014d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014dc:	f002 bc86 	b.w	8003dec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014e0:	f002 fc84 	bl	8003dec <HAL_GPIO_WritePin>
	adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80014e4:	2101      	movs	r1, #1
 80014e6:	484a      	ldr	r0, [pc, #296]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80014e8:	4d47      	ldr	r5, [pc, #284]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80014ea:	f001 f96b 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
	adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80014ee:	2101      	movs	r1, #1
	adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80014f0:	4603      	mov	r3, r0
	adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80014f2:	4848      	ldr	r0, [pc, #288]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x284>)
	adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 80014f4:	60ab      	str	r3, [r5, #8]
	adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80014f6:	f001 f965 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
 80014fa:	4603      	mov	r3, r0
	HAL_ADCEx_InjectedStart(&hadc2);
 80014fc:	4845      	ldr	r0, [pc, #276]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x284>)
	adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 80014fe:	606b      	str	r3, [r5, #4]
	HAL_ADCEx_InjectedStart(&hadc2);
 8001500:	f001 f8d8 	bl	80026b4 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart(&hadc3);
 8001504:	4842      	ldr	r0, [pc, #264]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001506:	f001 f8d5 	bl	80026b4 <HAL_ADCEx_InjectedStart>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800150a:	4622      	mov	r2, r4
 800150c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001510:	4838      	ldr	r0, [pc, #224]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001512:	f002 fc6b 	bl	8003dec <HAL_GPIO_WritePin>
		updateMA702_M1();
 8001516:	f000 fa1f 	bl	8001958 <updateMA702_M1>
		setOutputRadianM1(getElecRadianMA702(1) + offset_radian, output_voltage, 24);
 800151a:	2001      	movs	r0, #1
 800151c:	f000 fa6a 	bl	80019f4 <getElecRadianMA702>
 8001520:	4a37      	ldr	r2, [pc, #220]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001522:	4b3a      	ldr	r3, [pc, #232]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001524:	edd2 7a00 	vldr	s15, [r2]
 8001528:	edd3 0a00 	vldr	s1, [r3]
 800152c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001530:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8001534:	f000 fdac 	bl	8002090 <setOutputRadianM1>
 8001538:	e7c8      	b.n	80014cc <HAL_TIM_PeriodElapsedCallback+0x13c>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800153a:	f002 fc57 	bl	8003dec <HAL_GPIO_WritePin>
	adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 800153e:	2101      	movs	r1, #1
 8001540:	4833      	ldr	r0, [pc, #204]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001542:	4e31      	ldr	r6, [pc, #196]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001544:	f001 f93e 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
	adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001548:	2101      	movs	r1, #1
	adc_raw.batt_v = HAL_ADCEx_InjectedGetValue(&hadc3, ADC_INJECTED_RANK_1);
 800154a:	60b0      	str	r0, [r6, #8]
	adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 800154c:	4831      	ldr	r0, [pc, #196]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800154e:	f001 f939 	bl	80027c4 <HAL_ADCEx_InjectedGetValue>
 8001552:	4603      	mov	r3, r0
	HAL_ADCEx_InjectedStart(&hadc2);
 8001554:	482f      	ldr	r0, [pc, #188]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x284>)
	adc_raw.cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2, ADC_INJECTED_RANK_1);
 8001556:	6073      	str	r3, [r6, #4]
	HAL_ADCEx_InjectedStart(&hadc2);
 8001558:	f001 f8ac 	bl	80026b4 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart(&hadc3);
 800155c:	482c      	ldr	r0, [pc, #176]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800155e:	f001 f8a9 	bl	80026b4 <HAL_ADCEx_InjectedStart>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001562:	4824      	ldr	r0, [pc, #144]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001564:	4622      	mov	r2, r4
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	f002 fc3f 	bl	8003dec <HAL_GPIO_WritePin>
		updateMA702_M1();
 800156e:	f000 f9f3 	bl	8001958 <updateMA702_M1>
		setOutputRadianM1(offset_radian, output_voltage, 24);
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001574:	ed95 0a00 	vldr	s0, [r5]
 8001578:	edd3 0a00 	vldr	s1, [r3]
 800157c:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8001580:	f000 fd86 	bl	8002090 <setOutputRadianM1>
 8001584:	e7a2      	b.n	80014cc <HAL_TIM_PeriodElapsedCallback+0x13c>
}
 8001586:	ecbd 8b02 	vpop	{d8}
 800158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		offset_radian -= M_PI * 2;
 800158c:	a314      	add	r3, pc, #80	; (adr r3, 80015e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	4630      	mov	r0, r6
 8001594:	4639      	mov	r1, r7
 8001596:	f7fe fe77 	bl	8000288 <__aeabi_dsub>
 800159a:	f7ff fb25 	bl	8000be8 <__aeabi_d2f>
 800159e:	4603      	mov	r3, r0
		checkAngle(motor);
 80015a0:	4620      	mov	r0, r4
		offset_radian -= M_PI * 2;
 80015a2:	602b      	str	r3, [r5, #0]
		checkAngle(motor);
 80015a4:	f7ff fe86 	bl	80012b4 <checkAngle>
	if (offset_radian < 0)
 80015a8:	ed95 8a00 	vldr	s16, [r5]
 80015ac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b4:	f57f af23 	bpl.w	80013fe <HAL_TIM_PeriodElapsedCallback+0x6e>
		offset_radian += M_PI * 2;
 80015b8:	ee18 0a10 	vmov	r0, s16
 80015bc:	f7fe ffc4 	bl	8000548 <__aeabi_f2d>
 80015c0:	a307      	add	r3, pc, #28	; (adr r3, 80015e0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80015c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c6:	f7fe fe61 	bl	800028c <__adddf3>
 80015ca:	f7ff fb0d 	bl	8000be8 <__aeabi_d2f>
 80015ce:	4603      	mov	r3, r0
		checkAngle(motor);
 80015d0:	4620      	mov	r0, r4
		offset_radian += M_PI * 2;
 80015d2:	602b      	str	r3, [r5, #0]
		checkAngle(motor);
 80015d4:	f7ff fe6e 	bl	80012b4 <checkAngle>
 80015d8:	e711      	b.n	80013fe <HAL_TIM_PeriodElapsedCallback+0x6e>
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	54442d18 	.word	0x54442d18
 80015e4:	401921fb 	.word	0x401921fb
 80015e8:	20000430 	.word	0x20000430
 80015ec:	2000047c 	.word	0x2000047c
 80015f0:	20000398 	.word	0x20000398
 80015f4:	48000800 	.word	0x48000800
 80015f8:	2000036c 	.word	0x2000036c
 80015fc:	20000000 	.word	0x20000000
 8001600:	2000039c 	.word	0x2000039c
 8001604:	20000200 	.word	0x20000200
 8001608:	20000318 	.word	0x20000318
 800160c:	200003a0 	.word	0x200003a0
 8001610:	200002a0 	.word	0x200002a0
 8001614:	20000250 	.word	0x20000250

08001618 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t can_rx_cnt = 0;
uint8_t can_rx_data[8];
CAN_RxHeaderTypeDef can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001618:	b508      	push	{r3, lr}
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data) != HAL_OK)
 800161a:	4a06      	ldr	r2, [pc, #24]	; (8001634 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800161e:	2100      	movs	r1, #0
 8001620:	f001 fe12 	bl	8003248 <HAL_CAN_GetRxMessage>
 8001624:	b108      	cbz	r0, 800162a <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001626:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001628:	e7fe      	b.n	8001628 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
	can_rx_cnt++;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800162c:	6813      	ldr	r3, [r2, #0]
 800162e:	3301      	adds	r3, #1
 8001630:	6013      	str	r3, [r2, #0]
}
 8001632:	bd08      	pop	{r3, pc}
 8001634:	2000037c 	.word	0x2000037c
 8001638:	20000374 	.word	0x20000374
 800163c:	20000370 	.word	0x20000370

08001640 <writeFlash>:
void writeFlash(void){
 8001640:	b500      	push	{lr}
	erase.TypeErase = TYPEERASE_PAGES;
 8001642:	490f      	ldr	r1, [pc, #60]	; (8001680 <writeFlash+0x40>)
void writeFlash(void){
 8001644:	b087      	sub	sp, #28
	uint32_t page_error = 0;
 8001646:	2200      	movs	r2, #0
	erase.NbPages = 1;
 8001648:	2301      	movs	r3, #1
	erase.TypeErase = TYPEERASE_PAGES;
 800164a:	2000      	movs	r0, #0
	uint32_t page_error = 0;
 800164c:	9201      	str	r2, [sp, #4]
	erase.NbPages = 1;
 800164e:	9304      	str	r3, [sp, #16]
	erase.TypeErase = TYPEERASE_PAGES;
 8001650:	e9cd 0102 	strd	r0, r1, [sp, #8]
	HAL_FLASH_Unlock();
 8001654:	f002 fa1a 	bl	8003a8c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase, &page_error);
 8001658:	a901      	add	r1, sp, #4
 800165a:	a802      	add	r0, sp, #8
 800165c:	f002 fa7a 	bl	8003b54 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8001660:	f002 fa28 	bl	8003ab4 <HAL_FLASH_Lock>
	HAL_FLASH_Unlock();
 8001664:	f002 fa12 	bl	8003a8c <HAL_FLASH_Unlock>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, 0x801F000, flash_raw);
 8001668:	4905      	ldr	r1, [pc, #20]	; (8001680 <writeFlash+0x40>)
 800166a:	4a06      	ldr	r2, [pc, #24]	; (8001684 <writeFlash+0x44>)
 800166c:	2300      	movs	r3, #0
 800166e:	2002      	movs	r0, #2
 8001670:	f002 f942 	bl	80038f8 <HAL_FLASH_Program>
	HAL_FLASH_Lock();
 8001674:	f002 fa1e 	bl	8003ab4 <HAL_FLASH_Lock>
}
 8001678:	b007      	add	sp, #28
 800167a:	f85d fb04 	ldr.w	pc, [sp], #4
 800167e:	bf00      	nop
 8001680:	0801f000 	.word	0x0801f000
 8001684:	41200000 	.word	0x41200000

08001688 <SystemClock_Config>:
{
 8001688:	b510      	push	{r4, lr}
 800168a:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168c:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168e:	223c      	movs	r2, #60	; 0x3c
 8001690:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001696:	e9cd 1101 	strd	r1, r1, [sp, #4]
 800169a:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	9100      	str	r1, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a4:	f005 fa88 	bl	8006bb8 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b4:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80016ba:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016be:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c0:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80016c6:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f002 fb96 	bl	8003df8 <HAL_RCC_OscConfig>
 80016cc:	b108      	cbz	r0, 80016d2 <SystemClock_Config+0x4a>
 80016ce:	b672      	cpsid	i
	while (1)
 80016d0:	e7fe      	b.n	80016d0 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d2:	220f      	movs	r2, #15
 80016d4:	2302      	movs	r3, #2
 80016d6:	e9cd 2300 	strd	r2, r3, [sp]
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80016e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e4:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ea:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ec:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ee:	f002 fe6b 	bl	80043c8 <HAL_RCC_ClockConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b108      	cbz	r0, 80016fa <SystemClock_Config+0x72>
 80016f6:	b672      	cpsid	i
	while (1)
 80016f8:	e7fe      	b.n	80016f8 <SystemClock_Config+0x70>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80016fa:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001720 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80016fe:	f243 0201 	movw	r2, #12289	; 0x3001
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001702:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001704:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8001708:	9210      	str	r2, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800170a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	f002 ffb6 	bl	800467c <HAL_RCCEx_PeriphCLKConfig>
 8001710:	b108      	cbz	r0, 8001716 <SystemClock_Config+0x8e>
 8001712:	b672      	cpsid	i
	while (1)
 8001714:	e7fe      	b.n	8001714 <SystemClock_Config+0x8c>
}
 8001716:	b020      	add	sp, #128	; 0x80
 8001718:	bd10      	pop	{r4, pc}
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
	...

08001728 <main>:
{
 8001728:	b508      	push	{r3, lr}
  HAL_Init();
 800172a:	f000 fdd5 	bl	80022d8 <HAL_Init>
  SystemClock_Config();
 800172e:	f7ff ffab 	bl	8001688 <SystemClock_Config>
  MX_GPIO_Init();
 8001732:	f7ff fd45 	bl	80011c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001736:	f7ff fd29 	bl	800118c <MX_DMA_Init>
  MX_ADC1_Init();
 800173a:	f7ff faa5 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 800173e:	f7ff fb33 	bl	8000da8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001742:	f7ff fb95 	bl	8000e70 <MX_ADC3_Init>
  MX_CAN_Init();
 8001746:	f7ff fcaf 	bl	80010a8 <MX_CAN_Init>
  MX_SPI1_Init();
 800174a:	f000 f84f 	bl	80017ec <MX_SPI1_Init>
  MX_TIM1_Init();
 800174e:	f000 fad3 	bl	8001cf8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001752:	f000 fb65 	bl	8001e20 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001756:	f000 fcfd 	bl	8002154 <MX_USART1_UART_Init>
	initFirstSin();
 800175a:	f000 fbfd 	bl	8001f58 <initFirstSin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800175e:	481d      	ldr	r0, [pc, #116]	; (80017d4 <main+0xac>)
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001766:	f002 fb41 	bl	8003dec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800176a:	481a      	ldr	r0, [pc, #104]	; (80017d4 <main+0xac>)
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001772:	f002 fb3b 	bl	8003dec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001776:	2201      	movs	r2, #1
 8001778:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800177c:	4815      	ldr	r0, [pc, #84]	; (80017d4 <main+0xac>)
 800177e:	f002 fb35 	bl	8003dec <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001786:	f000 fdcb 	bl	8002320 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800178a:	4812      	ldr	r0, [pc, #72]	; (80017d4 <main+0xac>)
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001792:	f002 fb2b 	bl	8003dec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001796:	480f      	ldr	r0, [pc, #60]	; (80017d4 <main+0xac>)
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179e:	f002 fb25 	bl	8003dec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <main+0xac>)
 80017aa:	f002 fb1f 	bl	8003dec <HAL_GPIO_WritePin>
	printf("Orion VV driver V1 start! ");
 80017ae:	480a      	ldr	r0, [pc, #40]	; (80017d8 <main+0xb0>)
 80017b0:	f005 fe74 	bl	800749c <iprintf>
	printf(" flash = %f\n", flash_raw);
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <main+0xb4>)
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	f7fe fec6 	bl	8000548 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4807      	ldr	r0, [pc, #28]	; (80017e0 <main+0xb8>)
 80017c2:	f005 fe6b 	bl	800749c <iprintf>
	user_offet_radian = 1.0;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <main+0xbc>)
 80017c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017cc:	601a      	str	r2, [r3, #0]
	writeFlash();
 80017ce:	f7ff ff37 	bl	8001640 <writeFlash>
	while (1)
 80017d2:	e7fe      	b.n	80017d2 <main+0xaa>
 80017d4:	48000800 	.word	0x48000800
 80017d8:	08009640 	.word	0x08009640
 80017dc:	0801f000 	.word	0x0801f000
 80017e0:	0800965c 	.word	0x0800965c
 80017e4:	200003a4 	.word	0x200003a4

080017e8 <Error_Handler>:
 80017e8:	b672      	cpsid	i
	while (1)
 80017ea:	e7fe      	b.n	80017ea <Error_Handler+0x2>

080017ec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017ec:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <MX_SPI1_Init+0x48>)
 80017f0:	4c11      	ldr	r4, [pc, #68]	; (8001838 <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017f2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017f6:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017fa:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017fc:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80017fe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001802:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001804:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001806:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800180a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800180e:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001812:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001814:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001816:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800181a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800181e:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001822:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001824:	f003 f840 	bl	80048a8 <HAL_SPI_Init>
 8001828:	b900      	cbnz	r0, 800182c <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800182a:	bd10      	pop	{r4, pc}
 800182c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001830:	f7ff bfda 	b.w	80017e8 <Error_Handler>
 8001834:	200003a8 	.word	0x200003a8
 8001838:	40013000 	.word	0x40013000
 800183c:	00000000 	.word	0x00000000

08001840 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001840:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_SPI_MspInit+0x70>)
 8001844:	6801      	ldr	r1, [r0, #0]
{
 8001846:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 800184a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001850:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001854:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8001856:	d001      	beq.n	800185c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001858:	b008      	add	sp, #32
 800185a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001860:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001864:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80018a8 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001868:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	4812      	ldr	r0, [pc, #72]	; (80018b4 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800186c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001870:	619a      	str	r2, [r3, #24]
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001878:	9200      	str	r2, [sp, #0]
 800187a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001892:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001896:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f002 f9bc 	bl	8003c18 <HAL_GPIO_Init>
}
 80018a0:	b008      	add	sp, #32
 80018a2:	bd10      	pop	{r4, pc}
 80018a4:	f3af 8000 	nop.w
 80018a8:	00000038 	.word	0x00000038
 80018ac:	00000002 	.word	0x00000002
 80018b0:	40013000 	.word	0x40013000
 80018b4:	48000400 	.word	0x48000400

080018b8 <updateMA702_M0>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
inline void updateMA702_M0(void){
 80018b8:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80018ba:	4821      	ldr	r0, [pc, #132]	; (8001940 <updateMA702_M0+0x88>)

  ma702[1].pre_raw = ma702[1].enc_raw;
 80018bc:	4c21      	ldr	r4, [pc, #132]	; (8001944 <updateMA702_M0+0x8c>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2140      	movs	r1, #64	; 0x40
 80018c2:	f002 fa93 	bl	8003dec <HAL_GPIO_WritePin>

  ma702[1].enc_raw = hspi1.Instance->DR;
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <updateMA702_M0+0x90>)
  ma702[1].pre_raw = ma702[1].enc_raw;
 80018c8:	6961      	ldr	r1, [r4, #20]
  ma702[1].enc_raw = hspi1.Instance->DR;
 80018ca:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 80018cc:	2300      	movs	r3, #0
  ma702[1].enc_raw = hspi1.Instance->DR;
 80018ce:	68d0      	ldr	r0, [r2, #12]
  ma702[1].pre_raw = ma702[1].enc_raw;
 80018d0:	61e1      	str	r1, [r4, #28]
  hspi1.Instance->DR = 0;
 80018d2:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 80018d4:	6893      	ldr	r3, [r2, #8]
 80018d6:	07db      	lsls	r3, r3, #31
 80018d8:	d5fc      	bpl.n	80018d4 <updateMA702_M0+0x1c>
  {
  }
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80018da:	68d2      	ldr	r2, [r2, #12]

  ma702[1].enc_elec = 5461 - (ma702[1].enc_raw % 5461);
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <updateMA702_M0+0x94>)
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80018de:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80018e2:	400a      	ands	r2, r1
  ma702[1].enc_elec = 5461 - (ma702[1].enc_raw % 5461);
 80018e4:	fb83 1302 	smull	r1, r3, r3, r2
 80018e8:	4413      	add	r3, r2
 80018ea:	f241 5155 	movw	r1, #5461	; 0x1555
 80018ee:	131b      	asrs	r3, r3, #12
 80018f0:	fb01 2313 	mls	r3, r1, r3, r2
 80018f4:	1acb      	subs	r3, r1, r3
  ma702[1].output_radian = (float)ma702[1].enc_elec / 5461 * 2 * M_PI;
 80018f6:	ee07 3a90 	vmov	s15, r3
 80018fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fe:	eddf 7a14 	vldr	s15, [pc, #80]	; 8001950 <updateMA702_M0+0x98>
  ma702[1].enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001902:	6162      	str	r2, [r4, #20]
  ma702[1].output_radian = (float)ma702[1].enc_elec / 5461 * 2 * M_PI;
 8001904:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[1].enc_elec = 5461 - (ma702[1].enc_raw % 5461);
 8001908:	61a3      	str	r3, [r4, #24]
  ma702[1].output_radian = (float)ma702[1].enc_elec / 5461 * 2 * M_PI;
 800190a:	ee17 0a90 	vmov	r0, s15
 800190e:	f7fe fe1b 	bl	8000548 <__aeabi_f2d>
 8001912:	a309      	add	r3, pc, #36	; (adr r3, 8001938 <updateMA702_M0+0x80>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fe6e 	bl	80005f8 <__aeabi_dmul>
 800191c:	f7ff f964 	bl	8000be8 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	6123      	str	r3, [r4, #16]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001924:	4806      	ldr	r0, [pc, #24]	; (8001940 <updateMA702_M0+0x88>)
}
 8001926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800192a:	2201      	movs	r2, #1
 800192c:	2140      	movs	r1, #64	; 0x40
 800192e:	f002 ba5d 	b.w	8003dec <HAL_GPIO_WritePin>
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	54442d18 	.word	0x54442d18
 800193c:	400921fb 	.word	0x400921fb
 8001940:	48000400 	.word	0x48000400
 8001944:	2000040c 	.word	0x2000040c
 8001948:	200003a8 	.word	0x200003a8
 800194c:	c003000d 	.word	0xc003000d
 8001950:	39c00300 	.word	0x39c00300
 8001954:	00000000 	.word	0x00000000

08001958 <updateMA702_M1>:


inline void updateMA702_M1(void)
{
 8001958:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800195a:	4821      	ldr	r0, [pc, #132]	; (80019e0 <updateMA702_M1+0x88>)

  ma702[0].pre_raw = ma702[0].enc_raw;
 800195c:	4c21      	ldr	r4, [pc, #132]	; (80019e4 <updateMA702_M1+0x8c>)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	f002 fa43 	bl	8003dec <HAL_GPIO_WritePin>

  ma702[0].enc_raw = hspi1.Instance->DR;
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <updateMA702_M1+0x90>)
  ma702[0].pre_raw = ma702[0].enc_raw;
 8001968:	6861      	ldr	r1, [r4, #4]
  ma702[0].enc_raw = hspi1.Instance->DR;
 800196a:	681a      	ldr	r2, [r3, #0]
  hspi1.Instance->DR = 0;
 800196c:	2300      	movs	r3, #0
  ma702[0].enc_raw = hspi1.Instance->DR;
 800196e:	68d0      	ldr	r0, [r2, #12]
  ma702[0].pre_raw = ma702[0].enc_raw;
 8001970:	60e1      	str	r1, [r4, #12]
  hspi1.Instance->DR = 0;
 8001972:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001974:	6893      	ldr	r3, [r2, #8]
 8001976:	07db      	lsls	r3, r3, #31
 8001978:	d5fc      	bpl.n	8001974 <updateMA702_M1+0x1c>
  {
  }
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 800197a:	68d2      	ldr	r2, [r2, #12]

  ma702[0].enc_elec = 5461 - (ma702[0].enc_raw % 5461);
 800197c:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <updateMA702_M1+0x94>)
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 800197e:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8001982:	400a      	ands	r2, r1
  ma702[0].enc_elec = 5461 - (ma702[0].enc_raw % 5461);
 8001984:	fb83 1302 	smull	r1, r3, r3, r2
 8001988:	4413      	add	r3, r2
 800198a:	f241 5155 	movw	r1, #5461	; 0x1555
 800198e:	131b      	asrs	r3, r3, #12
 8001990:	fb01 2313 	mls	r3, r1, r3, r2
 8001994:	1acb      	subs	r3, r1, r3
  ma702[0].output_radian = (float)ma702[0].enc_elec / 5461 * 2 * M_PI;
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199e:	eddf 7a14 	vldr	s15, [pc, #80]	; 80019f0 <updateMA702_M1+0x98>
  ma702[0].enc_raw = hspi1.Instance->DR & 0xFFFC;
 80019a2:	6062      	str	r2, [r4, #4]
  ma702[0].output_radian = (float)ma702[0].enc_elec / 5461 * 2 * M_PI;
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702[0].enc_elec = 5461 - (ma702[0].enc_raw % 5461);
 80019a8:	60a3      	str	r3, [r4, #8]
  ma702[0].output_radian = (float)ma702[0].enc_elec / 5461 * 2 * M_PI;
 80019aa:	ee17 0a90 	vmov	r0, s15
 80019ae:	f7fe fdcb 	bl	8000548 <__aeabi_f2d>
 80019b2:	a309      	add	r3, pc, #36	; (adr r3, 80019d8 <updateMA702_M1+0x80>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fe1e 	bl	80005f8 <__aeabi_dmul>
 80019bc:	f7ff f914 	bl	8000be8 <__aeabi_d2f>
 80019c0:	4603      	mov	r3, r0
 80019c2:	6023      	str	r3, [r4, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80019c4:	4806      	ldr	r0, [pc, #24]	; (80019e0 <updateMA702_M1+0x88>)
}
 80019c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80019ca:	2201      	movs	r2, #1
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	f002 ba0d 	b.w	8003dec <HAL_GPIO_WritePin>
 80019d2:	bf00      	nop
 80019d4:	f3af 8000 	nop.w
 80019d8:	54442d18 	.word	0x54442d18
 80019dc:	400921fb 	.word	0x400921fb
 80019e0:	48000400 	.word	0x48000400
 80019e4:	2000040c 	.word	0x2000040c
 80019e8:	200003a8 	.word	0x200003a8
 80019ec:	c003000d 	.word	0xc003000d
 80019f0:	39c00300 	.word	0x39c00300

080019f4 <getElecRadianMA702>:


inline float getElecRadianMA702(int motor)
{
  return ma702[motor].output_radian;
 80019f4:	4b02      	ldr	r3, [pc, #8]	; (8001a00 <getElecRadianMA702+0xc>)
 80019f6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
 80019fa:	ed90 0a00 	vldr	s0, [r0]
 80019fe:	4770      	bx	lr
 8001a00:	2000040c 	.word	0x2000040c

08001a04 <getRawMA702>:
inline int getRawMA702(int motor)
{
  return ma702[motor].enc_raw;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <getRawMA702+0xc>)
 8001a06:	eb03 1000 	add.w	r0, r3, r0, lsl #4
}
 8001a0a:	6840      	ldr	r0, [r0, #4]
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	2000040c 	.word	0x2000040c

08001a14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_MspInit+0x2c>)
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	619a      	str	r2, [r3, #24]
 8001a1e:	699a      	ldr	r2, [r3, #24]
{
 8001a20:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	f002 0201 	and.w	r2, r2, #1
 8001a26:	9200      	str	r2, [sp, #0]
 8001a28:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a30:	61da      	str	r2, [r3, #28]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3c:	b002      	add	sp, #8
 8001a3e:	4770      	bx	lr
 8001a40:	40021000 	.word	0x40021000

08001a44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler>
 8001a46:	bf00      	nop

08001a48 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <HardFault_Handler>
 8001a4a:	bf00      	nop

08001a4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <MemManage_Handler>
 8001a4e:	bf00      	nop

08001a50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <BusFault_Handler>
 8001a52:	bf00      	nop

08001a54 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler>
 8001a56:	bf00      	nop

08001a58 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop

08001a5c <DebugMon_Handler>:
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop

08001a60 <PendSV_Handler>:
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop

08001a64 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 bc4a 	b.w	80022fc <HAL_IncTick>

08001a68 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a68:	4801      	ldr	r0, [pc, #4]	; (8001a70 <DMA1_Channel4_IRQHandler+0x8>)
 8001a6a:	f001 befb 	b.w	8003864 <HAL_DMA_IRQHandler>
 8001a6e:	bf00      	nop
 8001a70:	200014c8 	.word	0x200014c8

08001a74 <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001a74:	4801      	ldr	r0, [pc, #4]	; (8001a7c <USB_HP_CAN_TX_IRQHandler+0x8>)
 8001a76:	f001 bc89 	b.w	800338c <HAL_CAN_IRQHandler>
 8001a7a:	bf00      	nop
 8001a7c:	200002f0 	.word	0x200002f0

08001a80 <USB_LP_CAN_RX0_IRQHandler>:
 8001a80:	4801      	ldr	r0, [pc, #4]	; (8001a88 <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001a82:	f001 bc83 	b.w	800338c <HAL_CAN_IRQHandler>
 8001a86:	bf00      	nop
 8001a88:	200002f0 	.word	0x200002f0

08001a8c <CAN_RX1_IRQHandler>:
 8001a8c:	4801      	ldr	r0, [pc, #4]	; (8001a94 <CAN_RX1_IRQHandler+0x8>)
 8001a8e:	f001 bc7d 	b.w	800338c <HAL_CAN_IRQHandler>
 8001a92:	bf00      	nop
 8001a94:	200002f0 	.word	0x200002f0

08001a98 <CAN_SCE_IRQHandler>:
 8001a98:	4801      	ldr	r0, [pc, #4]	; (8001aa0 <CAN_SCE_IRQHandler+0x8>)
 8001a9a:	f001 bc77 	b.w	800338c <HAL_CAN_IRQHandler>
 8001a9e:	bf00      	nop
 8001aa0:	200002f0 	.word	0x200002f0

08001aa4 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001aa4:	4801      	ldr	r0, [pc, #4]	; (8001aac <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001aa6:	f003 b889 	b.w	8004bbc <HAL_TIM_IRQHandler>
 8001aaa:	bf00      	nop
 8001aac:	20000430 	.word	0x20000430

08001ab0 <TIM1_CC_IRQHandler>:
 8001ab0:	4801      	ldr	r0, [pc, #4]	; (8001ab8 <TIM1_CC_IRQHandler+0x8>)
 8001ab2:	f003 b883 	b.w	8004bbc <HAL_TIM_IRQHandler>
 8001ab6:	bf00      	nop
 8001ab8:	20000430 	.word	0x20000430

08001abc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001abc:	4801      	ldr	r0, [pc, #4]	; (8001ac4 <USART1_IRQHandler+0x8>)
 8001abe:	f003 bc23 	b.w	8005308 <HAL_UART_IRQHandler>
 8001ac2:	bf00      	nop
 8001ac4:	2000150c 	.word	0x2000150c

08001ac8 <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001ac8:	4801      	ldr	r0, [pc, #4]	; (8001ad0 <TIM8_UP_IRQHandler+0x8>)
 8001aca:	f003 b877 	b.w	8004bbc <HAL_TIM_IRQHandler>
 8001ace:	bf00      	nop
 8001ad0:	2000047c 	.word	0x2000047c

08001ad4 <TIM8_CC_IRQHandler>:
 8001ad4:	4801      	ldr	r0, [pc, #4]	; (8001adc <TIM8_CC_IRQHandler+0x8>)
 8001ad6:	f003 b871 	b.w	8004bbc <HAL_TIM_IRQHandler>
 8001ada:	bf00      	nop
 8001adc:	2000047c 	.word	0x2000047c

08001ae0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	4770      	bx	lr

08001ae4 <_kill>:

int _kill(int pid, int sig)
{
 8001ae4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ae6:	f005 f83d 	bl	8006b64 <__errno>
 8001aea:	2316      	movs	r3, #22
 8001aec:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001aee:	f04f 30ff 	mov.w	r0, #4294967295
 8001af2:	bd08      	pop	{r3, pc}

08001af4 <_exit>:

void _exit (int status)
{
 8001af4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001af6:	f005 f835 	bl	8006b64 <__errno>
 8001afa:	2316      	movs	r3, #22
 8001afc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001afe:	e7fe      	b.n	8001afe <_exit+0xa>

08001b00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b00:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	1e16      	subs	r6, r2, #0
 8001b04:	dd07      	ble.n	8001b16 <_read+0x16>
 8001b06:	460c      	mov	r4, r1
 8001b08:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001b0a:	f3af 8000 	nop.w
 8001b0e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b12:	42a5      	cmp	r5, r4
 8001b14:	d1f9      	bne.n	8001b0a <_read+0xa>
	}

return len;
}
 8001b16:	4630      	mov	r0, r6
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
 8001b1a:	bf00      	nop

08001b1c <_close>:
}

int _close(int file)
{
	return -1;
}
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop

08001b24 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b28:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b30:	2001      	movs	r0, #1
 8001b32:	4770      	bx	lr

08001b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b34:	2000      	movs	r0, #0
 8001b36:	4770      	bx	lr

08001b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b38:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3a:	4c0c      	ldr	r4, [pc, #48]	; (8001b6c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <_sbrk+0x38>)
 8001b3e:	490d      	ldr	r1, [pc, #52]	; (8001b74 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001b40:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b42:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001b44:	b12a      	cbz	r2, 8001b52 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b46:	4410      	add	r0, r2
 8001b48:	4288      	cmp	r0, r1
 8001b4a:	d807      	bhi.n	8001b5c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001b4c:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001b4e:	4610      	mov	r0, r2
 8001b50:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <_sbrk+0x40>)
 8001b54:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4410      	add	r0, r2
 8001b58:	4288      	cmp	r0, r1
 8001b5a:	d9f7      	bls.n	8001b4c <_sbrk+0x14>
    errno = ENOMEM;
 8001b5c:	f005 f802 	bl	8006b64 <__errno>
 8001b60:	230c      	movs	r3, #12
    return (void *)-1;
 8001b62:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8001b66:	6003      	str	r3, [r0, #0]
}
 8001b68:	4610      	mov	r0, r2
 8001b6a:	bd10      	pop	{r4, pc}
 8001b6c:	2000042c 	.word	0x2000042c
 8001b70:	20008000 	.word	0x20008000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	200015c8 	.word	0x200015c8

08001b7c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b7c:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <SystemInit+0x10>)
 8001b7e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b82:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b86:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001b90:	b500      	push	{lr}

  if(tim_pwmHandle->Instance==TIM1)
 8001b92:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <HAL_TIM_PWM_MspInit+0x8c>)
 8001b94:	6803      	ldr	r3, [r0, #0]
 8001b96:	4293      	cmp	r3, r2
{
 8001b98:	b083      	sub	sp, #12
  if(tim_pwmHandle->Instance==TIM1)
 8001b9a:	d005      	beq.n	8001ba8 <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM8)
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <HAL_TIM_PWM_MspInit+0x90>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d01f      	beq.n	8001be2 <HAL_TIM_PWM_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001ba2:	b003      	add	sp, #12
 8001ba4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_TIM_PWM_MspInit+0x94>)
 8001baa:	6998      	ldr	r0, [r3, #24]
 8001bac:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001bb0:	6198      	str	r0, [r3, #24]
 8001bb2:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bba:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bbc:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bbe:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc0:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bc2:	f001 fd1f 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bc6:	2019      	movs	r0, #25
 8001bc8:	f001 fd5a 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	201b      	movs	r0, #27
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	f001 fd17 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bd6:	201b      	movs	r0, #27
}
 8001bd8:	b003      	add	sp, #12
 8001bda:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001bde:	f001 bd4f 	b.w	8003680 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_TIM_PWM_MspInit+0x94>)
 8001be4:	6998      	ldr	r0, [r3, #24]
 8001be6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8001bea:	6198      	str	r0, [r3, #24]
 8001bec:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001bf4:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bf6:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001bf8:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bfa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001bfc:	f001 fd02 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001c00:	202c      	movs	r0, #44	; 0x2c
 8001c02:	f001 fd3d 	bl	8003680 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	202e      	movs	r0, #46	; 0x2e
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	f001 fcfa 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c10:	202e      	movs	r0, #46	; 0x2e
}
 8001c12:	b003      	add	sp, #12
 8001c14:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001c18:	f001 bd32 	b.w	8003680 <HAL_NVIC_EnableIRQ>
 8001c1c:	40012c00 	.word	0x40012c00
 8001c20:	40013400 	.word	0x40013400
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c28:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8001c2a:	6802      	ldr	r2, [r0, #0]
 8001c2c:	492e      	ldr	r1, [pc, #184]	; (8001ce8 <HAL_TIM_MspPostInit+0xc0>)
{
 8001c2e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8001c32:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001c38:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001c3c:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8001c3e:	d004      	beq.n	8001c4a <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_TIM_MspPostInit+0xc4>)
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d032      	beq.n	8001cac <HAL_TIM_MspPostInit+0x84>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001c46:	b00a      	add	sp, #40	; 0x28
 8001c48:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c4e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c52:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001c62:	9201      	str	r2, [sp, #4]
 8001c64:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c70:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c76:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001c7a:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8001c7e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001c84:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f001 ffc5 	bl	8003c18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c8e:	2203      	movs	r2, #3
 8001c90:	2302      	movs	r3, #2
 8001c92:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	4816      	ldr	r0, [pc, #88]	; (8001cf0 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001c98:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ca0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f001 ffb8 	bl	8003c18 <HAL_GPIO_Init>
}
 8001ca8:	b00a      	add	sp, #40	; 0x28
 8001caa:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cac:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001cb0:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8001ce0 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb4:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	480f      	ldr	r0, [pc, #60]	; (8001cf4 <HAL_TIM_MspPostInit+0xcc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001cbc:	615a      	str	r2, [r3, #20]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001cc8:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001cca:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001cd0:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f001 ffa1 	bl	8003c18 <HAL_GPIO_Init>
}
 8001cd6:	b00a      	add	sp, #40	; 0x28
 8001cd8:	bd10      	pop	{r4, pc}
 8001cda:	bf00      	nop
 8001cdc:	f3af 8000 	nop.w
 8001ce0:	00001dc0 	.word	0x00001dc0
 8001ce4:	00000002 	.word	0x00000002
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	40013400 	.word	0x40013400
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	48000800 	.word	0x48000800

08001cf8 <MX_TIM1_Init>:
{
 8001cf8:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfa:	2400      	movs	r4, #0
{
 8001cfc:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cfe:	222c      	movs	r2, #44	; 0x2c
 8001d00:	4621      	mov	r1, r4
 8001d02:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d08:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001d0c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001d10:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d14:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d16:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d18:	f004 ff4e 	bl	8006bb8 <memset>
  htim1.Instance = TIM1;
 8001d1c:	483e      	ldr	r0, [pc, #248]	; (8001e18 <MX_TIM1_Init+0x120>)
  htim1.Init.Prescaler = 1;
 8001d1e:	4a3f      	ldr	r2, [pc, #252]	; (8001e1c <MX_TIM1_Init+0x124>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d20:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 2400;
 8001d28:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8001d2c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8001d30:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d34:	f002 feb2 	bl	8004a9c <HAL_TIM_PWM_Init>
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	d148      	bne.n	8001dce <MX_TIM1_Init+0xd6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001d3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d40:	2270      	movs	r2, #112	; 0x70
 8001d42:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d46:	4834      	ldr	r0, [pc, #208]	; (8001e18 <MX_TIM1_Init+0x120>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001d48:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d4a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001d4c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d4e:	f003 f961 	bl	8005014 <HAL_TIMEx_MasterConfigSynchronization>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d14e      	bne.n	8001df4 <MX_TIM1_Init+0xfc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d56:	2060      	movs	r0, #96	; 0x60
 8001d58:	2100      	movs	r1, #0
 8001d5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001d5e:	2000      	movs	r0, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001d66:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d6a:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d6c:	482a      	ldr	r0, [pc, #168]	; (8001e18 <MX_TIM1_Init+0x120>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d6e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d70:	a904      	add	r1, sp, #16
 8001d72:	f003 f81b 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d139      	bne.n	8001dee <MX_TIM1_Init+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d7a:	4827      	ldr	r0, [pc, #156]	; (8001e18 <MX_TIM1_Init+0x120>)
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	a904      	add	r1, sp, #16
 8001d80:	f003 f814 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001d84:	bb80      	cbnz	r0, 8001de8 <MX_TIM1_Init+0xf0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d86:	4824      	ldr	r0, [pc, #144]	; (8001e18 <MX_TIM1_Init+0x120>)
 8001d88:	2208      	movs	r2, #8
 8001d8a:	a904      	add	r1, sp, #16
 8001d8c:	f003 f80e 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001d90:	bb38      	cbnz	r0, 8001de2 <MX_TIM1_Init+0xea>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d92:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001e00 <MX_TIM1_Init+0x108>
 8001d96:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001d9a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001e08 <MX_TIM1_Init+0x110>
 8001d9e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001da2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001e10 <MX_TIM1_Init+0x118>
 8001da6:	2200      	movs	r2, #0
 8001da8:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001daa:	2400      	movs	r4, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dac:	481a      	ldr	r0, [pc, #104]	; (8001e18 <MX_TIM1_Init+0x120>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dae:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001db0:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001db2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001db6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001dba:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001dbe:	f003 f96f 	bl	80050a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dc2:	b938      	cbnz	r0, 8001dd4 <MX_TIM1_Init+0xdc>
  HAL_TIM_MspPostInit(&htim1);
 8001dc4:	4814      	ldr	r0, [pc, #80]	; (8001e18 <MX_TIM1_Init+0x120>)
 8001dc6:	f7ff ff2f 	bl	8001c28 <HAL_TIM_MspPostInit>
}
 8001dca:	b018      	add	sp, #96	; 0x60
 8001dcc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001dce:	f7ff fd0b 	bl	80017e8 <Error_Handler>
 8001dd2:	e7b3      	b.n	8001d3c <MX_TIM1_Init+0x44>
    Error_Handler();
 8001dd4:	f7ff fd08 	bl	80017e8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 8001dd8:	480f      	ldr	r0, [pc, #60]	; (8001e18 <MX_TIM1_Init+0x120>)
 8001dda:	f7ff ff25 	bl	8001c28 <HAL_TIM_MspPostInit>
}
 8001dde:	b018      	add	sp, #96	; 0x60
 8001de0:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001de2:	f7ff fd01 	bl	80017e8 <Error_Handler>
 8001de6:	e7d4      	b.n	8001d92 <MX_TIM1_Init+0x9a>
    Error_Handler();
 8001de8:	f7ff fcfe 	bl	80017e8 <Error_Handler>
 8001dec:	e7cb      	b.n	8001d86 <MX_TIM1_Init+0x8e>
    Error_Handler();
 8001dee:	f7ff fcfb 	bl	80017e8 <Error_Handler>
 8001df2:	e7c2      	b.n	8001d7a <MX_TIM1_Init+0x82>
    Error_Handler();
 8001df4:	f7ff fcf8 	bl	80017e8 <Error_Handler>
 8001df8:	e7ad      	b.n	8001d56 <MX_TIM1_Init+0x5e>
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	00000000 	.word	0x00000000
 8001e04:	0000000a 	.word	0x0000000a
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	00002000 	.word	0x00002000
 8001e10:	02000000 	.word	0x02000000
 8001e14:	00000000 	.word	0x00000000
 8001e18:	20000430 	.word	0x20000430
 8001e1c:	40012c00 	.word	0x40012c00

08001e20 <MX_TIM8_Init>:
{
 8001e20:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e22:	2400      	movs	r4, #0
{
 8001e24:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e26:	222c      	movs	r2, #44	; 0x2c
 8001e28:	4621      	mov	r1, r4
 8001e2a:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e30:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001e34:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001e38:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3c:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3e:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e40:	f004 feba 	bl	8006bb8 <memset>
  htim8.Instance = TIM8;
 8001e44:	4842      	ldr	r0, [pc, #264]	; (8001f50 <MX_TIM8_Init+0x130>)
  htim8.Init.Prescaler = 1;
 8001e46:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <MX_TIM8_Init+0x134>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 2400;
 8001e50:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8001e54:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 8001e58:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e5c:	f002 fe1e 	bl	8004a9c <HAL_TIM_PWM_Init>
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d14a      	bne.n	8001efa <MX_TIM8_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e68:	2270      	movs	r2, #112	; 0x70
 8001e6a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e6e:	4838      	ldr	r0, [pc, #224]	; (8001f50 <MX_TIM8_Init+0x130>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e70:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e72:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e74:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e76:	f003 f8cd 	bl	8005014 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d150      	bne.n	8001f20 <MX_TIM8_Init+0x100>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e7e:	2060      	movs	r0, #96	; 0x60
 8001e80:	2100      	movs	r1, #0
 8001e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001e86:	2000      	movs	r0, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001e8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e92:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e94:	482e      	ldr	r0, [pc, #184]	; (8001f50 <MX_TIM8_Init+0x130>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e96:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e98:	a904      	add	r1, sp, #16
 8001e9a:	f002 ff87 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d13b      	bne.n	8001f1a <MX_TIM8_Init+0xfa>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ea2:	482b      	ldr	r0, [pc, #172]	; (8001f50 <MX_TIM8_Init+0x130>)
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	a904      	add	r1, sp, #16
 8001ea8:	f002 ff80 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001eac:	bb90      	cbnz	r0, 8001f14 <MX_TIM8_Init+0xf4>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eae:	4828      	ldr	r0, [pc, #160]	; (8001f50 <MX_TIM8_Init+0x130>)
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	a904      	add	r1, sp, #16
 8001eb4:	f002 ff7a 	bl	8004dac <HAL_TIM_PWM_ConfigChannel>
 8001eb8:	bb48      	cbnz	r0, 8001f0e <MX_TIM8_Init+0xee>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eba:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001f28 <MX_TIM8_Init+0x108>
 8001ebe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001ec2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001f30 <MX_TIM8_Init+0x110>
 8001ec6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001eca:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001f38 <MX_TIM8_Init+0x118>
 8001ece:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001ed2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001f40 <MX_TIM8_Init+0x120>
 8001ed6:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8001eda:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8001f48 <MX_TIM8_Init+0x128>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ede:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ee0:	481b      	ldr	r0, [pc, #108]	; (8001f50 <MX_TIM8_Init+0x130>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee2:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ee4:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ee6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001eea:	f003 f8d9 	bl	80050a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001eee:	b938      	cbnz	r0, 8001f00 <MX_TIM8_Init+0xe0>
  HAL_TIM_MspPostInit(&htim8);
 8001ef0:	4817      	ldr	r0, [pc, #92]	; (8001f50 <MX_TIM8_Init+0x130>)
 8001ef2:	f7ff fe99 	bl	8001c28 <HAL_TIM_MspPostInit>
}
 8001ef6:	b018      	add	sp, #96	; 0x60
 8001ef8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001efa:	f7ff fc75 	bl	80017e8 <Error_Handler>
 8001efe:	e7b1      	b.n	8001e64 <MX_TIM8_Init+0x44>
    Error_Handler();
 8001f00:	f7ff fc72 	bl	80017e8 <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 8001f04:	4812      	ldr	r0, [pc, #72]	; (8001f50 <MX_TIM8_Init+0x130>)
 8001f06:	f7ff fe8f 	bl	8001c28 <HAL_TIM_MspPostInit>
}
 8001f0a:	b018      	add	sp, #96	; 0x60
 8001f0c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001f0e:	f7ff fc6b 	bl	80017e8 <Error_Handler>
 8001f12:	e7d2      	b.n	8001eba <MX_TIM8_Init+0x9a>
    Error_Handler();
 8001f14:	f7ff fc68 	bl	80017e8 <Error_Handler>
 8001f18:	e7c9      	b.n	8001eae <MX_TIM8_Init+0x8e>
    Error_Handler();
 8001f1a:	f7ff fc65 	bl	80017e8 <Error_Handler>
 8001f1e:	e7c0      	b.n	8001ea2 <MX_TIM8_Init+0x82>
    Error_Handler();
 8001f20:	f7ff fc62 	bl	80017e8 <Error_Handler>
 8001f24:	e7ab      	b.n	8001e7e <MX_TIM8_Init+0x5e>
 8001f26:	bf00      	nop
	...
 8001f34:	0000000a 	.word	0x0000000a
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	00002000 	.word	0x00002000
 8001f40:	00000004 	.word	0x00000004
 8001f44:	00000000 	.word	0x00000000
 8001f48:	02000000 	.word	0x02000000
 8001f4c:	00000004 	.word	0x00000004
 8001f50:	2000047c 	.word	0x2000047c
 8001f54:	40013400 	.word	0x40013400

08001f58 <initFirstSin>:
}

/* USER CODE BEGIN 1 */
float rad_to_sin_cnv_array[1024] = {0};
inline void initFirstSin(void)
{
 8001f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < 1024; i++)
  {
    float temp_rad = (float)i / 256 * M_PI * 2;
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8001f5a:	4d19      	ldr	r5, [pc, #100]	; (8001fc0 <initFirstSin+0x68>)
 8001f5c:	2300      	movs	r3, #0
    float temp_rad = (float)i / 256 * M_PI * 2;
 8001f5e:	a716      	add	r7, pc, #88	; (adr r7, 8001fb8 <initFirstSin+0x60>)
 8001f60:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 8001f64:	ed2d 8b02 	vpush	{d8}
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8001f68:	f845 3b04 	str.w	r3, [r5], #4
    float temp_rad = (float)i / 256 * M_PI * 2;
 8001f6c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8001fc4 <initFirstSin+0x6c>
  for (int i = 0; i < 1024; i++)
 8001f70:	2401      	movs	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8001f72:	ee07 4a90 	vmov	s15, r4
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 1024; i++)
 8001f7a:	3401      	adds	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8001f7c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8001f80:	ee17 0a90 	vmov	r0, s15
 8001f84:	f7fe fae0 	bl	8000548 <__aeabi_f2d>
 8001f88:	4632      	mov	r2, r6
 8001f8a:	463b      	mov	r3, r7
 8001f8c:	f7fe fb34 	bl	80005f8 <__aeabi_dmul>
 8001f90:	f7fe fe2a 	bl	8000be8 <__aeabi_d2f>
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8001f94:	f7fe fad8 	bl	8000548 <__aeabi_f2d>
 8001f98:	ec41 0b10 	vmov	d0, r0, r1
 8001f9c:	f003 fd98 	bl	8005ad0 <sin>
 8001fa0:	ec51 0b10 	vmov	r0, r1, d0
 8001fa4:	f7fe fe20 	bl	8000be8 <__aeabi_d2f>
  for (int i = 0; i < 1024; i++)
 8001fa8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8001fac:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < 1024; i++)
 8001fb0:	d1df      	bne.n	8001f72 <initFirstSin+0x1a>
    // printf("rad %4.3f sin %4.3f\n",temp_rad,rad_to_sin_cnv_array[i]);
    // HAL_Delay(1);
  }
}
 8001fb2:	ecbd 8b02 	vpop	{d8}
 8001fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fb8:	54442d18 	.word	0x54442d18
 8001fbc:	401921fb 	.word	0x401921fb
 8001fc0:	200004c8 	.word	0x200004c8
 8001fc4:	3b800000 	.word	0x3b800000

08001fc8 <setOutputRadianM0>:
{
  return rad_to_sin_cnv_array[(uint8_t)(rad / (M_PI * 2) * 256)];
}

inline void setOutputRadianM0(float out_rad, float output_voltage, float battery_voltage)
{
 8001fc8:	b508      	push	{r3, lr}
 8001fca:	eef0 0ae0 	vabs.f32	s1, s1
  const int pwm_cnt_centor = 700;
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > 24)
 8001fce:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 8001fd2:	eef4 0ae7 	vcmpe.f32	s1, s15
 8001fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8001fda:	ed2d 8b02 	vpush	{d8}
 8001fde:	ee10 0a10 	vmov	r0, s0
  if (output_voltage > 24)
 8001fe2:	dc3c      	bgt.n	800205e <setOutputRadianM0+0x96>
  {
    output_voltage = 0;
  }
  voltage_propotional_cnt = output_voltage / 24 * pwm_cnt_centor;
 8001fe4:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8002078 <setOutputRadianM0+0xb0>
 8001fe8:	ee20 8a88 	vmul.f32	s16, s1, s16
 8001fec:	eebd 8ac8 	vcvt.s32.f32	s16, s16

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8001ff0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 8001ff4:	f7fe faa8 	bl	8000548 <__aeabi_f2d>
 8001ff8:	a31b      	add	r3, pc, #108	; (adr r3, 8002068 <setOutputRadianM0+0xa0>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe f945 	bl	800028c <__adddf3>
 8002002:	a31b      	add	r3, pc, #108	; (adr r3, 8002070 <setOutputRadianM0+0xa8>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe faf6 	bl	80005f8 <__aeabi_dmul>
 800200c:	f7fe fdcc 	bl	8000ba8 <__aeabi_d2uiz>
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <setOutputRadianM0+0xb4>)
 8002012:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8002080 <setOutputRadianM0+0xb8>
 8002016:	b2c0      	uxtb	r0, r0
 8002018:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 800201c:	ed91 7a00 	vldr	s14, [r1]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002020:	edd1 5a55 	vldr	s11, [r1, #340]	; 0x154
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002024:	ed91 6aaa 	vldr	s12, [r1, #680]	; 0x2a8
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <setOutputRadianM0+0xbc>)
 800202a:	eef0 6a67 	vmov.f32	s13, s15
 800202e:	eee7 6a08 	vfma.f32	s13, s14, s16
 8002032:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002034:	eeb0 7a67 	vmov.f32	s14, s15
 8002038:	eea5 7a88 	vfma.f32	s14, s11, s16
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 800203c:	eee6 7a08 	vfma.f32	s15, s12, s16
}
 8002040:	ecbd 8b02 	vpop	{d8}
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002044:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002048:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 800204c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002050:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002054:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002058:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 800205c:	bd08      	pop	{r3, pc}
 800205e:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8002088 <setOutputRadianM0+0xc0>
 8002062:	e7c7      	b.n	8001ff4 <setOutputRadianM0+0x2c>
 8002064:	f3af 8000 	nop.w
 8002068:	54442d18 	.word	0x54442d18
 800206c:	402921fb 	.word	0x402921fb
 8002070:	3d5bfeba 	.word	0x3d5bfeba
 8002074:	40444ad1 	.word	0x40444ad1
 8002078:	41e95556 	.word	0x41e95556
 800207c:	200004c8 	.word	0x200004c8
 8002080:	442f0000 	.word	0x442f0000
 8002084:	20000430 	.word	0x20000430
	...

08002090 <setOutputRadianM1>:

inline void setOutputRadianM1(float out_rad, float output_voltage, float battery_voltage)
{
 8002090:	b508      	push	{r3, lr}
 8002092:	eef0 0ae0 	vabs.f32	s1, s1
  const int pwm_cnt_centor = 700;
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > 24)
 8002096:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 800209a:	eef4 0ae7 	vcmpe.f32	s1, s15
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80020a2:	ed2d 8b02 	vpush	{d8}
 80020a6:	ee10 0a10 	vmov	r0, s0
  if (output_voltage > 24)
 80020aa:	dc3c      	bgt.n	8002126 <setOutputRadianM1+0x96>
  {
    output_voltage = 0;
  }
  voltage_propotional_cnt = output_voltage / 24 * pwm_cnt_centor;
 80020ac:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8002140 <setOutputRadianM1+0xb0>
 80020b0:	ee20 8a88 	vmul.f32	s16, s1, s16
 80020b4:	eebd 8ac8 	vcvt.s32.f32	s16, s16

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80020b8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 80020bc:	f7fe fa44 	bl	8000548 <__aeabi_f2d>
 80020c0:	a31b      	add	r3, pc, #108	; (adr r3, 8002130 <setOutputRadianM1+0xa0>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe f8e1 	bl	800028c <__adddf3>
 80020ca:	a31b      	add	r3, pc, #108	; (adr r3, 8002138 <setOutputRadianM1+0xa8>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	f7fe fa92 	bl	80005f8 <__aeabi_dmul>
 80020d4:	f7fe fd68 	bl	8000ba8 <__aeabi_d2uiz>
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80020d8:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <setOutputRadianM1+0xb4>)
 80020da:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8002148 <setOutputRadianM1+0xb8>
 80020de:	b2c0      	uxtb	r0, r0
 80020e0:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 80020e4:	ed91 7a00 	vldr	s14, [r1]
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80020e8:	edd1 5a55 	vldr	s11, [r1, #340]	; 0x154
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 80020ec:	ed91 6aaa 	vldr	s12, [r1, #680]	; 0x2a8
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80020f0:	4b16      	ldr	r3, [pc, #88]	; (800214c <setOutputRadianM1+0xbc>)
 80020f2:	eef0 6a67 	vmov.f32	s13, s15
 80020f6:	eee7 6a08 	vfma.f32	s13, s14, s16
 80020fa:	681b      	ldr	r3, [r3, #0]
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 80020fc:	eeb0 7a67 	vmov.f32	s14, s15
 8002100:	eea5 7a88 	vfma.f32	s14, s11, s16
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002104:	eee6 7a08 	vfma.f32	s15, s12, s16
}
 8002108:	ecbd 8b02 	vpop	{d8}
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 800210c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002110:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim8.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002118:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
  htim8.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 800211c:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  htim8.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002120:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8002124:	bd08      	pop	{r3, pc}
 8002126:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8002150 <setOutputRadianM1+0xc0>
 800212a:	e7c7      	b.n	80020bc <setOutputRadianM1+0x2c>
 800212c:	f3af 8000 	nop.w
 8002130:	54442d18 	.word	0x54442d18
 8002134:	402921fb 	.word	0x402921fb
 8002138:	3d5bfeba 	.word	0x3d5bfeba
 800213c:	40444ad1 	.word	0x40444ad1
 8002140:	41e95556 	.word	0x41e95556
 8002144:	200004c8 	.word	0x200004c8
 8002148:	442f0000 	.word	0x442f0000
 800214c:	2000047c 	.word	0x2000047c
 8002150:	00000000 	.word	0x00000000

08002154 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002154:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002156:	480b      	ldr	r0, [pc, #44]	; (8002184 <MX_USART1_UART_Init+0x30>)
 8002158:	4c0b      	ldr	r4, [pc, #44]	; (8002188 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 800215a:	490c      	ldr	r1, [pc, #48]	; (800218c <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800215c:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800215e:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 8002160:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002164:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002168:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800216c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002170:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002174:	f003 fc40 	bl	80059f8 <HAL_UART_Init>
 8002178:	b900      	cbnz	r0, 800217c <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800217a:	bd10      	pop	{r4, pc}
 800217c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002180:	f7ff bb32 	b.w	80017e8 <Error_Handler>
 8002184:	2000150c 	.word	0x2000150c
 8002188:	40013800 	.word	0x40013800
 800218c:	001e8480 	.word	0x001e8480

08002190 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002190:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8002192:	4b26      	ldr	r3, [pc, #152]	; (800222c <HAL_UART_MspInit+0x9c>)
 8002194:	6802      	ldr	r2, [r0, #0]
{
 8002196:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 800219a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80021a0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80021a4:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 80021a6:	d001      	beq.n	80021ac <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021a8:	b008      	add	sp, #32
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ac:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80021b0:	4605      	mov	r5, r0
 80021b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b4:	481e      	ldr	r0, [pc, #120]	; (8002230 <HAL_UART_MspInit+0xa0>)
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80021b6:	4e1f      	ldr	r6, [pc, #124]	; (8002234 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021bc:	619a      	str	r2, [r3, #24]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80021ce:	615a      	str	r2, [r3, #20]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021d8:	2230      	movs	r2, #48	; 0x30
 80021da:	2302      	movs	r3, #2
 80021dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021e8:	2307      	movs	r3, #7
 80021ea:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ec:	f001 fd14 	bl	8003c18 <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_UART_MspInit+0xa8>)
 80021f2:	2310      	movs	r3, #16
 80021f4:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80021f8:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002200:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002204:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002208:	f001 fa62 	bl	80036d0 <HAL_DMA_Init>
 800220c:	b958      	cbnz	r0, 8002226 <HAL_UART_MspInit+0x96>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	4611      	mov	r1, r2
 8002212:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002214:	66ee      	str	r6, [r5, #108]	; 0x6c
 8002216:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002218:	f001 f9f4 	bl	8003604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800221c:	2025      	movs	r0, #37	; 0x25
 800221e:	f001 fa2f 	bl	8003680 <HAL_NVIC_EnableIRQ>
}
 8002222:	b008      	add	sp, #32
 8002224:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002226:	f7ff fadf 	bl	80017e8 <Error_Handler>
 800222a:	e7f0      	b.n	800220e <HAL_UART_MspInit+0x7e>
 800222c:	40013800 	.word	0x40013800
 8002230:	48000800 	.word	0x48000800
 8002234:	200014c8 	.word	0x200014c8
 8002238:	40020044 	.word	0x40020044

0800223c <Reset_Handler>:
 800223c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002274 <LoopForever+0x2>
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <LoopForever+0x6>)
 8002242:	490e      	ldr	r1, [pc, #56]	; (800227c <LoopForever+0xa>)
 8002244:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <LoopForever+0xe>)
 8002246:	2300      	movs	r3, #0
 8002248:	e002      	b.n	8002250 <LoopCopyDataInit>

0800224a <CopyDataInit>:
 800224a:	58d4      	ldr	r4, [r2, r3]
 800224c:	50c4      	str	r4, [r0, r3]
 800224e:	3304      	adds	r3, #4

08002250 <LoopCopyDataInit>:
 8002250:	18c4      	adds	r4, r0, r3
 8002252:	428c      	cmp	r4, r1
 8002254:	d3f9      	bcc.n	800224a <CopyDataInit>
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <LoopForever+0x12>)
 8002258:	4c0b      	ldr	r4, [pc, #44]	; (8002288 <LoopForever+0x16>)
 800225a:	2300      	movs	r3, #0
 800225c:	e001      	b.n	8002262 <LoopFillZerobss>

0800225e <FillZerobss>:
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	3204      	adds	r2, #4

08002262 <LoopFillZerobss>:
 8002262:	42a2      	cmp	r2, r4
 8002264:	d3fb      	bcc.n	800225e <FillZerobss>
 8002266:	f7ff fc89 	bl	8001b7c <SystemInit>
 800226a:	f004 fc81 	bl	8006b70 <__libc_init_array>
 800226e:	f7ff fa5b 	bl	8001728 <main>

08002272 <LoopForever>:
 8002272:	e7fe      	b.n	8002272 <LoopForever>
 8002274:	20008000 	.word	0x20008000
 8002278:	20000000 	.word	0x20000000
 800227c:	200001e0 	.word	0x200001e0
 8002280:	08009c64 	.word	0x08009c64
 8002284:	200001e0 	.word	0x200001e0
 8002288:	200015c8 	.word	0x200015c8

0800228c <ADC1_2_IRQHandler>:
 800228c:	e7fe      	b.n	800228c <ADC1_2_IRQHandler>
	...

08002290 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002290:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002292:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_InitTick+0x3c>)
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_InitTick+0x40>)
 8002296:	7812      	ldrb	r2, [r2, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
{
 800229a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800229c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80022a4:	fbb3 f0f0 	udiv	r0, r3, r0
 80022a8:	f001 f9f8 	bl	800369c <HAL_SYSTICK_Config>
 80022ac:	b908      	cbnz	r0, 80022b2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	2d0f      	cmp	r5, #15
 80022b0:	d901      	bls.n	80022b6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80022b2:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80022b4:	bd38      	pop	{r3, r4, r5, pc}
 80022b6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	4602      	mov	r2, r0
 80022ba:	4629      	mov	r1, r5
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f001 f9a0 	bl	8003604 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_InitTick+0x44>)
 80022c6:	4620      	mov	r0, r4
 80022c8:	601d      	str	r5, [r3, #0]
}
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
 80022cc:	20000008 	.word	0x20000008
 80022d0:	20000004 	.word	0x20000004
 80022d4:	2000000c 	.word	0x2000000c

080022d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d8:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <HAL_Init+0x20>)
{
 80022da:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	f043 0310 	orr.w	r3, r3, #16
 80022e2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f001 f97b 	bl	80035e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ea:	200f      	movs	r0, #15
 80022ec:	f7ff ffd0 	bl	8002290 <HAL_InitTick>
  HAL_MspInit();
 80022f0:	f7ff fb90 	bl	8001a14 <HAL_MspInit>
}
 80022f4:	2000      	movs	r0, #0
 80022f6:	bd08      	pop	{r3, pc}
 80022f8:	40022000 	.word	0x40022000

080022fc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <HAL_IncTick+0x10>)
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_IncTick+0x14>)
 8002300:	6811      	ldr	r1, [r2, #0]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	440b      	add	r3, r1
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20001590 	.word	0x20001590
 8002310:	20000008 	.word	0x20000008

08002314 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002314:	4b01      	ldr	r3, [pc, #4]	; (800231c <HAL_GetTick+0x8>)
 8002316:	6818      	ldr	r0, [r3, #0]
}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20001590 	.word	0x20001590

08002320 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff fff6 	bl	8002314 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002328:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800232a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800232c:	d002      	beq.n	8002334 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <HAL_Delay+0x20>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	1b43      	subs	r3, r0, r5
 800233a:	42a3      	cmp	r3, r4
 800233c:	d3fa      	bcc.n	8002334 <HAL_Delay+0x14>
  {
  }
}
 800233e:	bd38      	pop	{r3, r4, r5, pc}
 8002340:	20000008 	.word	0x20000008

08002344 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002344:	6802      	ldr	r2, [r0, #0]
{
 8002346:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002348:	6893      	ldr	r3, [r2, #8]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002352:	2000      	movs	r0, #0
}
 8002354:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002356:	6811      	ldr	r1, [r2, #0]
 8002358:	07cc      	lsls	r4, r1, #31
 800235a:	d5fa      	bpl.n	8002352 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800235c:	6891      	ldr	r1, [r2, #8]
 800235e:	f001 010d 	and.w	r1, r1, #13
 8002362:	2901      	cmp	r1, #1
 8002364:	4604      	mov	r4, r0
 8002366:	d009      	beq.n	800237c <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002368:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800236a:	f042 0210 	orr.w	r2, r2, #16
 800236e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002370:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002372:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6463      	str	r3, [r4, #68]	; 0x44
}
 800237a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 800237c:	6893      	ldr	r3, [r2, #8]
 800237e:	2103      	movs	r1, #3
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6093      	str	r3, [r2, #8]
 8002386:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8002388:	f7ff ffc4 	bl	8002314 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8002392:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002394:	d403      	bmi.n	800239e <ADC_Disable+0x5a>
 8002396:	e7dc      	b.n	8002352 <ADC_Disable+0xe>
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	07db      	lsls	r3, r3, #31
 800239c:	d5d9      	bpl.n	8002352 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800239e:	f7ff ffb9 	bl	8002314 <HAL_GetTick>
 80023a2:	1b40      	subs	r0, r0, r5
 80023a4:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023a6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023a8:	d9f6      	bls.n	8002398 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	07d2      	lsls	r2, r2, #31
 80023ae:	d5f3      	bpl.n	8002398 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023b2:	f043 0310 	orr.w	r3, r3, #16
 80023b6:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80023ba:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023bc:	4303      	orrs	r3, r0
 80023be:	6463      	str	r3, [r4, #68]	; 0x44
}
 80023c0:	bd38      	pop	{r3, r4, r5, pc}
 80023c2:	bf00      	nop

080023c4 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023c4:	6802      	ldr	r2, [r0, #0]
{
 80023c6:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023c8:	6893      	ldr	r3, [r2, #8]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b01      	cmp	r3, #1
{
 80023d0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023d2:	d025      	beq.n	8002420 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80023d4:	6891      	ldr	r1, [r2, #8]
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <ADC_Enable+0x68>)
 80023d8:	4219      	tst	r1, r3
 80023da:	d008      	beq.n	80023ee <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023de:	f043 0310 	orr.w	r3, r3, #16
 80023e2:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80023e6:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e8:	4303      	orrs	r3, r0
 80023ea:	6463      	str	r3, [r4, #68]	; 0x44
}
 80023ec:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80023ee:	6893      	ldr	r3, [r2, #8]
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80023f6:	f7ff ff8d 	bl	8002314 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023fa:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 80023fc:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	07d9      	lsls	r1, r3, #31
 8002402:	d40b      	bmi.n	800241c <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002404:	f7ff ff86 	bl	8002314 <HAL_GetTick>
 8002408:	1b43      	subs	r3, r0, r5
 800240a:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800240c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800240e:	d9f6      	bls.n	80023fe <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	07d2      	lsls	r2, r2, #31
 8002414:	d5e2      	bpl.n	80023dc <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	07d9      	lsls	r1, r3, #31
 800241a:	d5f3      	bpl.n	8002404 <ADC_Enable+0x40>
  return HAL_OK;
 800241c:	2000      	movs	r0, #0
}
 800241e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002420:	6813      	ldr	r3, [r2, #0]
 8002422:	07d8      	lsls	r0, r3, #31
 8002424:	d5d6      	bpl.n	80023d4 <ADC_Enable+0x10>
  return HAL_OK;
 8002426:	2000      	movs	r0, #0
 8002428:	e7f9      	b.n	800241e <ADC_Enable+0x5a>
 800242a:	bf00      	nop
 800242c:	8000003f 	.word	0x8000003f

08002430 <HAL_ADC_Init>:
{
 8002430:	b530      	push	{r4, r5, lr}
 8002432:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8002438:	2800      	cmp	r0, #0
 800243a:	f000 809c 	beq.w	8002576 <HAL_ADC_Init+0x146>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002440:	f013 0310 	ands.w	r3, r3, #16
 8002444:	4604      	mov	r4, r0
 8002446:	d118      	bne.n	800247a <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002448:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800244a:	2d00      	cmp	r5, #0
 800244c:	f000 8096 	beq.w	800257c <HAL_ADC_Init+0x14c>
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002450:	6822      	ldr	r2, [r4, #0]
 8002452:	6891      	ldr	r1, [r2, #8]
 8002454:	00c9      	lsls	r1, r1, #3
 8002456:	f140 8082 	bpl.w	800255e <HAL_ADC_Init+0x12e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800245a:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800245c:	008d      	lsls	r5, r1, #2
 800245e:	d47e      	bmi.n	800255e <HAL_ADC_Init+0x12e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002460:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002462:	06c8      	lsls	r0, r1, #27
 8002464:	d400      	bmi.n	8002468 <HAL_ADC_Init+0x38>
 8002466:	b163      	cbz	r3, 8002482 <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 8002468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800246a:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 800246e:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8002470:	f043 0310 	orr.w	r3, r3, #16
 8002474:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002476:	b003      	add	sp, #12
 8002478:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800247a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800247c:	06da      	lsls	r2, r3, #27
 800247e:	d4f3      	bmi.n	8002468 <HAL_ADC_Init+0x38>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002480:	6802      	ldr	r2, [r0, #0]
 8002482:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002484:	f010 0004 	ands.w	r0, r0, #4
 8002488:	d1ee      	bne.n	8002468 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 800248a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800248c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002490:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002494:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249a:	f000 80d9 	beq.w	8002650 <HAL_ADC_Init+0x220>
 800249e:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <HAL_ADC_Init+0x264>)
 80024a0:	429a      	cmp	r2, r3
 80024a2:	f000 80dd 	beq.w	8002660 <HAL_ADC_Init+0x230>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024a6:	497c      	ldr	r1, [pc, #496]	; (8002698 <HAL_ADC_Init+0x268>)
 80024a8:	428a      	cmp	r2, r1
 80024aa:	d074      	beq.n	8002596 <HAL_ADC_Init+0x166>
 80024ac:	4b7b      	ldr	r3, [pc, #492]	; (800269c <HAL_ADC_Init+0x26c>)
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d072      	beq.n	8002598 <HAL_ADC_Init+0x168>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024b2:	6893      	ldr	r3, [r2, #8]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	f000 80e3 	beq.w	8002684 <HAL_ADC_Init+0x254>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024be:	4d78      	ldr	r5, [pc, #480]	; (80026a0 <HAL_ADC_Init+0x270>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 80024c0:	68ab      	ldr	r3, [r5, #8]
 80024c2:	6861      	ldr	r1, [r4, #4]
 80024c4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024c8:	430b      	orrs	r3, r1
 80024ca:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80024cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024ce:	68e1      	ldr	r1, [r4, #12]
 80024d0:	7e65      	ldrb	r5, [r4, #25]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	68a3      	ldr	r3, [r4, #8]
 80024d6:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024da:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80024de:	bf18      	it	ne
 80024e0:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80024e4:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024e8:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80024ea:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024ee:	f000 8093 	beq.w	8002618 <HAL_ADC_Init+0x1e8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80024f4:	2901      	cmp	r1, #1
 80024f6:	d00b      	beq.n	8002510 <HAL_ADC_Init+0xe0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80024f8:	4867      	ldr	r0, [pc, #412]	; (8002698 <HAL_ADC_Init+0x268>)
 80024fa:	4282      	cmp	r2, r0
 80024fc:	f000 809c 	beq.w	8002638 <HAL_ADC_Init+0x208>
 8002500:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002504:	4282      	cmp	r2, r0
 8002506:	f000 8097 	beq.w	8002638 <HAL_ADC_Init+0x208>
 800250a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800250c:	4303      	orrs	r3, r0
 800250e:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002510:	6891      	ldr	r1, [r2, #8]
 8002512:	f011 0f0c 	tst.w	r1, #12
 8002516:	d10c      	bne.n	8002532 <HAL_ADC_Init+0x102>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002518:	68d1      	ldr	r1, [r2, #12]
 800251a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800251e:	f021 0102 	bic.w	r1, r1, #2
 8002522:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002524:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002528:	7e20      	ldrb	r0, [r4, #24]
 800252a:	0049      	lsls	r1, r1, #1
 800252c:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8002530:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8002532:	68d0      	ldr	r0, [r2, #12]
 8002534:	495b      	ldr	r1, [pc, #364]	; (80026a4 <HAL_ADC_Init+0x274>)
 8002536:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002538:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800253a:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800253c:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800253e:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002540:	d072      	beq.n	8002628 <HAL_ADC_Init+0x1f8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002542:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002544:	f023 030f 	bic.w	r3, r3, #15
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800254a:	2000      	movs	r0, #0
 800254c:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800254e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002550:	f023 0303 	bic.w	r3, r3, #3
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6423      	str	r3, [r4, #64]	; 0x40
}
 800255a:	b003      	add	sp, #12
 800255c:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800255e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002560:	f023 0312 	bic.w	r3, r3, #18
 8002564:	f043 0310 	orr.w	r3, r3, #16
 8002568:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002574:	e778      	b.n	8002468 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 8002576:	2001      	movs	r0, #1
}
 8002578:	b003      	add	sp, #12
 800257a:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 800257c:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8002580:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8002582:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8002586:	f7fe fce3 	bl	8000f50 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	6893      	ldr	r3, [r2, #8]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	d511      	bpl.n	80025b6 <HAL_ADC_Init+0x186>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002592:	462b      	mov	r3, r5
 8002594:	e75d      	b.n	8002452 <HAL_ADC_Init+0x22>
 8002596:	4941      	ldr	r1, [pc, #260]	; (800269c <HAL_ADC_Init+0x26c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002598:	4d41      	ldr	r5, [pc, #260]	; (80026a0 <HAL_ADC_Init+0x270>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800259a:	6893      	ldr	r3, [r2, #8]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d058      	beq.n	8002656 <HAL_ADC_Init+0x226>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80025a4:	688b      	ldr	r3, [r1, #8]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d188      	bne.n	80024c0 <HAL_ADC_Init+0x90>
 80025ae:	680b      	ldr	r3, [r1, #0]
 80025b0:	07db      	lsls	r3, r3, #31
 80025b2:	d48b      	bmi.n	80024cc <HAL_ADC_Init+0x9c>
 80025b4:	e784      	b.n	80024c0 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 80025b6:	4620      	mov	r0, r4
 80025b8:	f7ff fec4 	bl	8002344 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 80025be:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025c0:	06d0      	lsls	r0, r2, #27
 80025c2:	f53f af45 	bmi.w	8002450 <HAL_ADC_Init+0x20>
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f47f af42 	bne.w	8002450 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 80025cc:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80025ce:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 80025d0:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 80025d4:	f021 0102 	bic.w	r1, r1, #2
 80025d8:	f041 0102 	orr.w	r1, r1, #2
 80025dc:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80025de:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025e0:	4931      	ldr	r1, [pc, #196]	; (80026a8 <HAL_ADC_Init+0x278>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80025e2:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 80025e6:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80025e8:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025ea:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80025ec:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80025f0:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025f2:	482e      	ldr	r0, [pc, #184]	; (80026ac <HAL_ADC_Init+0x27c>)
 80025f4:	fba0 0101 	umull	r0, r1, r0, r1
 80025f8:	0c89      	lsrs	r1, r1, #18
 80025fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80025fe:	0049      	lsls	r1, r1, #1
 8002600:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8002602:	9901      	ldr	r1, [sp, #4]
 8002604:	2900      	cmp	r1, #0
 8002606:	f43f af24 	beq.w	8002452 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800260a:	9901      	ldr	r1, [sp, #4]
 800260c:	3901      	subs	r1, #1
 800260e:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8002610:	9901      	ldr	r1, [sp, #4]
 8002612:	2900      	cmp	r1, #0
 8002614:	d1f9      	bne.n	800260a <HAL_ADC_Init+0x1da>
 8002616:	e71c      	b.n	8002452 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002618:	bb35      	cbnz	r5, 8002668 <HAL_ADC_Init+0x238>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800261a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800261c:	3901      	subs	r1, #1
 800261e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002626:	e764      	b.n	80024f2 <HAL_ADC_Init+0xc2>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002628:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800262a:	69e3      	ldr	r3, [r4, #28]
 800262c:	f021 010f 	bic.w	r1, r1, #15
 8002630:	3b01      	subs	r3, #1
 8002632:	430b      	orrs	r3, r1
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	e788      	b.n	800254a <HAL_ADC_Init+0x11a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002638:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 800263c:	d01f      	beq.n	800267e <HAL_ADC_Init+0x24e>
 800263e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002642:	d024      	beq.n	800268e <HAL_ADC_Init+0x25e>
 8002644:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8002648:	bf08      	it	eq
 800264a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800264e:	e75c      	b.n	800250a <HAL_ADC_Init+0xda>
 8002650:	4910      	ldr	r1, [pc, #64]	; (8002694 <HAL_ADC_Init+0x264>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002652:	4d17      	ldr	r5, [pc, #92]	; (80026b0 <HAL_ADC_Init+0x280>)
 8002654:	e7a1      	b.n	800259a <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002656:	6813      	ldr	r3, [r2, #0]
 8002658:	07db      	lsls	r3, r3, #31
 800265a:	f53f af37 	bmi.w	80024cc <HAL_ADC_Init+0x9c>
 800265e:	e7a1      	b.n	80025a4 <HAL_ADC_Init+0x174>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002660:	4d13      	ldr	r5, [pc, #76]	; (80026b0 <HAL_ADC_Init+0x280>)
 8002662:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002666:	e798      	b.n	800259a <HAL_ADC_Init+0x16a>
        ADC_STATE_CLR_SET(hadc->State,
 8002668:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800266a:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 800266e:	f041 0120 	orr.w	r1, r1, #32
 8002672:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002674:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002676:	f041 0101 	orr.w	r1, r1, #1
 800267a:	6461      	str	r1, [r4, #68]	; 0x44
 800267c:	e739      	b.n	80024f2 <HAL_ADC_Init+0xc2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800267e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002682:	e742      	b.n	800250a <HAL_ADC_Init+0xda>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	07d9      	lsls	r1, r3, #31
 8002688:	f53f af20 	bmi.w	80024cc <HAL_ADC_Init+0x9c>
 800268c:	e717      	b.n	80024be <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800268e:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8002692:	e73a      	b.n	800250a <HAL_ADC_Init+0xda>
 8002694:	50000100 	.word	0x50000100
 8002698:	50000400 	.word	0x50000400
 800269c:	50000500 	.word	0x50000500
 80026a0:	50000700 	.word	0x50000700
 80026a4:	fff0c007 	.word	0xfff0c007
 80026a8:	20000004 	.word	0x20000004
 80026ac:	431bde83 	.word	0x431bde83
 80026b0:	50000300 	.word	0x50000300

080026b4 <HAL_ADCEx_InjectedStart>:
{
 80026b4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80026b6:	6803      	ldr	r3, [r0, #0]
 80026b8:	689d      	ldr	r5, [r3, #8]
 80026ba:	f015 0508 	ands.w	r5, r5, #8
 80026be:	d129      	bne.n	8002714 <HAL_ADCEx_InjectedStart+0x60>
    __HAL_LOCK(hadc);
 80026c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	4604      	mov	r4, r0
 80026c8:	d024      	beq.n	8002714 <HAL_ADCEx_InjectedStart+0x60>
 80026ca:	2301      	movs	r3, #1
 80026cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 80026d0:	f7ff fe78 	bl	80023c4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80026d4:	b9d8      	cbnz	r0, 800270e <HAL_ADCEx_InjectedStart+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 80026d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026d8:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 80026da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026e6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 80026ea:	6423      	str	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026ec:	d014      	beq.n	8002718 <HAL_ADCEx_InjectedStart+0x64>
 80026ee:	4b32      	ldr	r3, [pc, #200]	; (80027b8 <HAL_ADCEx_InjectedStart+0x104>)
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d042      	beq.n	800277a <HAL_ADCEx_InjectedStart+0xc6>
 80026f4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	06d9      	lsls	r1, r3, #27
 80026fc:	d00e      	beq.n	800271c <HAL_ADCEx_InjectedStart+0x68>
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_ADCEx_InjectedStart+0x108>)
 8002700:	429a      	cmp	r2, r3
 8002702:	d00b      	beq.n	800271c <HAL_ADCEx_InjectedStart+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002704:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270a:	6423      	str	r3, [r4, #64]	; 0x40
 800270c:	e00a      	b.n	8002724 <HAL_ADCEx_InjectedStart+0x70>
      __HAL_UNLOCK(hadc);
 800270e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 8002712:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8002714:	2002      	movs	r0, #2
}
 8002716:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002718:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_ADCEx_InjectedStart+0x10c>)
 800271a:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800271c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800271e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002722:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002724:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002726:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        ADC_CLEAR_ERRORCODE(hadc);
 800272a:	bf08      	it	eq
 800272c:	6463      	streq	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800272e:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002730:	2360      	movs	r3, #96	; 0x60
      __HAL_UNLOCK(hadc);
 8002732:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002736:	6013      	str	r3, [r2, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002738:	68d3      	ldr	r3, [r2, #12]
 800273a:	019b      	lsls	r3, r3, #6
 800273c:	d4e9      	bmi.n	8002712 <HAL_ADCEx_InjectedStart+0x5e>
 800273e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002742:	d01f      	beq.n	8002784 <HAL_ADCEx_InjectedStart+0xd0>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <HAL_ADCEx_InjectedStart+0x104>)
 8002746:	429a      	cmp	r2, r3
 8002748:	d027      	beq.n	800279a <HAL_ADCEx_InjectedStart+0xe6>
 800274a:	f8d3 1608 	ldr.w	r1, [r3, #1544]	; 0x608
 800274e:	06cd      	lsls	r5, r1, #27
 8002750:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002754:	d00c      	beq.n	8002770 <HAL_ADCEx_InjectedStart+0xbc>
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	f001 011f 	and.w	r1, r1, #31
 800275c:	2906      	cmp	r1, #6
 800275e:	d007      	beq.n	8002770 <HAL_ADCEx_InjectedStart+0xbc>
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	2b07      	cmp	r3, #7
 8002768:	d002      	beq.n	8002770 <HAL_ADCEx_InjectedStart+0xbc>
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_ADCEx_InjectedStart+0x108>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d1d0      	bne.n	8002712 <HAL_ADCEx_InjectedStart+0x5e>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8002770:	6893      	ldr	r3, [r2, #8]
 8002772:	f043 0308 	orr.w	r3, r3, #8
 8002776:	6093      	str	r3, [r2, #8]
}
 8002778:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_ADCEx_InjectedStart+0x10c>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	06db      	lsls	r3, r3, #27
 8002780:	d0cc      	beq.n	800271c <HAL_ADCEx_InjectedStart+0x68>
 8002782:	e7bf      	b.n	8002704 <HAL_ADCEx_InjectedStart+0x50>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_ADCEx_InjectedStart+0x10c>)
 8002786:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002788:	06c9      	lsls	r1, r1, #27
 800278a:	d0f1      	beq.n	8002770 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 800278c:	6899      	ldr	r1, [r3, #8]
 800278e:	f001 011f 	and.w	r1, r1, #31
 8002792:	2906      	cmp	r1, #6
 8002794:	d0ec      	beq.n	8002770 <HAL_ADCEx_InjectedStart+0xbc>
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	e7ea      	b.n	8002770 <HAL_ADCEx_InjectedStart+0xbc>
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_ADCEx_InjectedStart+0x10c>)
 800279c:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 800279e:	06cc      	lsls	r4, r1, #27
 80027a0:	d0e6      	beq.n	8002770 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	f001 011f 	and.w	r1, r1, #31
 80027a8:	2906      	cmp	r1, #6
 80027aa:	d0e1      	beq.n	8002770 <HAL_ADCEx_InjectedStart+0xbc>
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	d0dc      	beq.n	8002770 <HAL_ADCEx_InjectedStart+0xbc>
}
 80027b6:	bd38      	pop	{r3, r4, r5, pc}
 80027b8:	50000100 	.word	0x50000100
 80027bc:	50000400 	.word	0x50000400
 80027c0:	50000300 	.word	0x50000300

080027c4 <HAL_ADCEx_InjectedGetValue>:
  switch(InjectedRank)
 80027c4:	2903      	cmp	r1, #3
 80027c6:	d007      	beq.n	80027d8 <HAL_ADCEx_InjectedGetValue+0x14>
 80027c8:	2904      	cmp	r1, #4
 80027ca:	d00d      	beq.n	80027e8 <HAL_ADCEx_InjectedGetValue+0x24>
 80027cc:	2902      	cmp	r1, #2
 80027ce:	d007      	beq.n	80027e0 <HAL_ADCEx_InjectedGetValue+0x1c>
      tmp_jdr = hadc->Instance->JDR1;
 80027d0:	6803      	ldr	r3, [r0, #0]
 80027d2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 80027d6:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 80027d8:	6803      	ldr	r3, [r0, #0]
 80027da:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 80027de:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 80027e0:	6803      	ldr	r3, [r0, #0]
 80027e2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 80027e6:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 80027e8:	6803      	ldr	r3, [r0, #0]
 80027ea:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 80027ee:	4770      	bx	lr

080027f0 <HAL_ADC_ConfigChannel>:
{
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80027f2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80027f6:	68cc      	ldr	r4, [r1, #12]
{
 80027f8:	b083      	sub	sp, #12
 80027fa:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80027fc:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002804:	f000 8106 	beq.w	8002a14 <HAL_ADC_ConfigChannel+0x224>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002808:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800280a:	2001      	movs	r0, #1
 800280c:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002810:	6895      	ldr	r5, [r2, #8]
 8002812:	076d      	lsls	r5, r5, #29
 8002814:	d43a      	bmi.n	800288c <HAL_ADC_ConfigChannel+0x9c>
    if (sConfig->Rank < 5U)
 8002816:	6848      	ldr	r0, [r1, #4]
 8002818:	2804      	cmp	r0, #4
 800281a:	f200 808b 	bhi.w	8002934 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 800281e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002822:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002824:	680d      	ldr	r5, [r1, #0]
 8002826:	0040      	lsls	r0, r0, #1
 8002828:	f04f 0c1f 	mov.w	ip, #31
 800282c:	fa0c fc00 	lsl.w	ip, ip, r0
 8002830:	ea26 0c0c 	bic.w	ip, r6, ip
 8002834:	fa05 f000 	lsl.w	r0, r5, r0
 8002838:	ea4c 0000 	orr.w	r0, ip, r0
 800283c:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800283e:	6890      	ldr	r0, [r2, #8]
 8002840:	f010 0f0c 	tst.w	r0, #12
 8002844:	d134      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002846:	2d09      	cmp	r5, #9
 8002848:	f200 808b 	bhi.w	8002962 <HAL_ADC_ConfigChannel+0x172>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800284c:	6950      	ldr	r0, [r2, #20]
 800284e:	688e      	ldr	r6, [r1, #8]
 8002850:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8002854:	f04f 0c07 	mov.w	ip, #7
 8002858:	fa0c fc0e 	lsl.w	ip, ip, lr
 800285c:	fa06 f60e 	lsl.w	r6, r6, lr
 8002860:	ea20 000c 	bic.w	r0, r0, ip
 8002864:	4330      	orrs	r0, r6
 8002866:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002868:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 800286a:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800286c:	694f      	ldr	r7, [r1, #20]
 800286e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002872:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8002874:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002876:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 800287a:	2e03      	cmp	r6, #3
 800287c:	f200 8146 	bhi.w	8002b0c <HAL_ADC_ConfigChannel+0x31c>
 8002880:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002884:	0108000d 	.word	0x0108000d
 8002888:	00f400fe 	.word	0x00f400fe
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288e:	f042 0220 	orr.w	r2, r2, #32
 8002892:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800289a:	b003      	add	sp, #12
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 800289e:	6e17      	ldr	r7, [r2, #96]	; 0x60
 80028a0:	4ea9      	ldr	r6, [pc, #676]	; (8002b48 <HAL_ADC_ConfigChannel+0x358>)
 80028a2:	403e      	ands	r6, r7
 80028a4:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 80028a8:	4330      	orrs	r0, r6
 80028aa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80028ae:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028b0:	6890      	ldr	r0, [r2, #8]
 80028b2:	f000 0003 	and.w	r0, r0, #3
 80028b6:	2801      	cmp	r0, #1
 80028b8:	f000 80a7 	beq.w	8002a0a <HAL_ADC_ConfigChannel+0x21a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028bc:	2c01      	cmp	r4, #1
 80028be:	f000 80ac 	beq.w	8002a1a <HAL_ADC_ConfigChannel+0x22a>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028c2:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 80028c6:	2001      	movs	r0, #1
 80028c8:	40a8      	lsls	r0, r5
 80028ca:	ea21 0100 	bic.w	r1, r1, r0
 80028ce:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028d2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80028d6:	d078      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x1da>
 80028d8:	499c      	ldr	r1, [pc, #624]	; (8002b4c <HAL_ADC_ConfigChannel+0x35c>)
 80028da:	428a      	cmp	r2, r1
 80028dc:	d075      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x1da>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028de:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e0:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028e4:	d074      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80028e6:	2d11      	cmp	r5, #17
 80028e8:	f040 80ac 	bne.w	8002a44 <HAL_ADC_ConfigChannel+0x254>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80028ec:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80028ee:	01c4      	lsls	r4, r0, #7
 80028f0:	d471      	bmi.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028f2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80028f6:	d070      	beq.n	80029da <HAL_ADC_ConfigChannel+0x1ea>
 80028f8:	4894      	ldr	r0, [pc, #592]	; (8002b4c <HAL_ADC_ConfigChannel+0x35c>)
 80028fa:	4282      	cmp	r2, r0
 80028fc:	f000 80dd 	beq.w	8002aba <HAL_ADC_ConfigChannel+0x2ca>
 8002900:	4c93      	ldr	r4, [pc, #588]	; (8002b50 <HAL_ADC_ConfigChannel+0x360>)
 8002902:	42a2      	cmp	r2, r4
 8002904:	f000 80fc 	beq.w	8002b00 <HAL_ADC_ConfigChannel+0x310>
 8002908:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800290c:	4282      	cmp	r2, r0
 800290e:	d065      	beq.n	80029dc <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002910:	6890      	ldr	r0, [r2, #8]
 8002912:	f000 0003 	and.w	r0, r0, #3
 8002916:	2801      	cmp	r0, #1
 8002918:	f000 80f4 	beq.w	8002b04 <HAL_ADC_ConfigChannel+0x314>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800291c:	2d10      	cmp	r5, #16
 800291e:	d05a      	beq.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002920:	2d11      	cmp	r5, #17
 8002922:	d058      	beq.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002924:	2d12      	cmp	r5, #18
 8002926:	d156      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002928:	688a      	ldr	r2, [r1, #8]
 800292a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292e:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002930:	608a      	str	r2, [r1, #8]
 8002932:	e7af      	b.n	8002894 <HAL_ADC_ConfigChannel+0xa4>
    else if (sConfig->Rank < 10U)
 8002934:	2809      	cmp	r0, #9
 8002936:	d925      	bls.n	8002984 <HAL_ADC_ConfigChannel+0x194>
    else if (sConfig->Rank < 15U)
 8002938:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800293a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800293e:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8002942:	f200 8085 	bhi.w	8002a50 <HAL_ADC_ConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002946:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8002948:	680d      	ldr	r5, [r1, #0]
 800294a:	383c      	subs	r0, #60	; 0x3c
 800294c:	f04f 0c1f 	mov.w	ip, #31
 8002950:	fa0c fc00 	lsl.w	ip, ip, r0
 8002954:	ea26 060c 	bic.w	r6, r6, ip
 8002958:	fa05 f000 	lsl.w	r0, r5, r0
 800295c:	4330      	orrs	r0, r6
 800295e:	6390      	str	r0, [r2, #56]	; 0x38
 8002960:	e76d      	b.n	800283e <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002962:	688f      	ldr	r7, [r1, #8]
 8002964:	6990      	ldr	r0, [r2, #24]
 8002966:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800296a:	3e1e      	subs	r6, #30
 800296c:	f04f 0e07 	mov.w	lr, #7
 8002970:	fa07 fc06 	lsl.w	ip, r7, r6
 8002974:	fa0e f606 	lsl.w	r6, lr, r6
 8002978:	ea20 0006 	bic.w	r0, r0, r6
 800297c:	ea40 000c 	orr.w	r0, r0, ip
 8002980:	6190      	str	r0, [r2, #24]
 8002982:	e771      	b.n	8002868 <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->SQR2,
 8002984:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002988:	0040      	lsls	r0, r0, #1
 800298a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800298c:	680d      	ldr	r5, [r1, #0]
 800298e:	381e      	subs	r0, #30
 8002990:	f04f 0c1f 	mov.w	ip, #31
 8002994:	fa0c fc00 	lsl.w	ip, ip, r0
 8002998:	ea26 060c 	bic.w	r6, r6, ip
 800299c:	fa05 f000 	lsl.w	r0, r5, r0
 80029a0:	4330      	orrs	r0, r6
 80029a2:	6350      	str	r0, [r2, #52]	; 0x34
 80029a4:	e74b      	b.n	800283e <HAL_ADC_ConfigChannel+0x4e>
        MODIFY_REG(hadc->Instance->SMPR1,
 80029a6:	1c6c      	adds	r4, r5, #1
 80029a8:	688e      	ldr	r6, [r1, #8]
 80029aa:	6950      	ldr	r0, [r2, #20]
 80029ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80029b0:	2107      	movs	r1, #7
 80029b2:	40a1      	lsls	r1, r4
 80029b4:	40a6      	lsls	r6, r4
 80029b6:	ea20 0101 	bic.w	r1, r0, r1
 80029ba:	4331      	orrs	r1, r6
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029bc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 80029c0:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029c2:	d008      	beq.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
 80029c4:	4961      	ldr	r1, [pc, #388]	; (8002b4c <HAL_ADC_ConfigChannel+0x35c>)
 80029c6:	428a      	cmp	r2, r1
 80029c8:	d105      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029ca:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029cc:	4961      	ldr	r1, [pc, #388]	; (8002b54 <HAL_ADC_ConfigChannel+0x364>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029ce:	d18a      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0xf6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80029d0:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029d2:	0206      	lsls	r6, r0, #8
 80029d4:	d58d      	bpl.n	80028f2 <HAL_ADC_ConfigChannel+0x102>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d6:	2000      	movs	r0, #0
 80029d8:	e75c      	b.n	8002894 <HAL_ADC_ConfigChannel+0xa4>
 80029da:	4c5c      	ldr	r4, [pc, #368]	; (8002b4c <HAL_ADC_ConfigChannel+0x35c>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80029dc:	6890      	ldr	r0, [r2, #8]
 80029de:	f000 0003 	and.w	r0, r0, #3
 80029e2:	2801      	cmp	r0, #1
 80029e4:	d060      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x2b8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029e6:	68a0      	ldr	r0, [r4, #8]
 80029e8:	f000 0003 	and.w	r0, r0, #3
 80029ec:	2801      	cmp	r0, #1
 80029ee:	d067      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x2d0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029f0:	2d10      	cmp	r5, #16
 80029f2:	d069      	beq.n	8002ac8 <HAL_ADC_ConfigChannel+0x2d8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80029f4:	2d11      	cmp	r5, #17
 80029f6:	d195      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x134>
 80029f8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80029fc:	d1eb      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80029fe:	688a      	ldr	r2, [r1, #8]
 8002a00:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a04:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002a06:	608a      	str	r2, [r1, #8]
 8002a08:	e744      	b.n	8002894 <HAL_ADC_ConfigChannel+0xa4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a0a:	6810      	ldr	r0, [r2, #0]
 8002a0c:	07c7      	lsls	r7, r0, #31
 8002a0e:	f57f af55 	bpl.w	80028bc <HAL_ADC_ConfigChannel+0xcc>
 8002a12:	e7e0      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
  __HAL_LOCK(hadc);
 8002a14:	2002      	movs	r0, #2
}
 8002a16:	b003      	add	sp, #12
 8002a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a1a:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8002a1e:	40ac      	lsls	r4, r5
 8002a20:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a22:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002a24:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a28:	d9bd      	bls.n	80029a6 <HAL_ADC_ConfigChannel+0x1b6>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002a2a:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8002a2e:	688e      	ldr	r6, [r1, #8]
 8002a30:	6990      	ldr	r0, [r2, #24]
 8002a32:	3c1b      	subs	r4, #27
 8002a34:	2107      	movs	r1, #7
 8002a36:	40a1      	lsls	r1, r4
 8002a38:	40a6      	lsls	r6, r4
 8002a3a:	ea20 0101 	bic.w	r1, r0, r1
 8002a3e:	4331      	orrs	r1, r6
 8002a40:	6191      	str	r1, [r2, #24]
 8002a42:	e746      	b.n	80028d2 <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a44:	2d12      	cmp	r5, #18
 8002a46:	d1c6      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002a48:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a4a:	0240      	lsls	r0, r0, #9
 8002a4c:	d4c3      	bmi.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
 8002a4e:	e750      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002a50:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8002a52:	680d      	ldr	r5, [r1, #0]
 8002a54:	385a      	subs	r0, #90	; 0x5a
 8002a56:	f04f 0c1f 	mov.w	ip, #31
 8002a5a:	fa0c fc00 	lsl.w	ip, ip, r0
 8002a5e:	ea26 060c 	bic.w	r6, r6, ip
 8002a62:	fa05 f000 	lsl.w	r0, r5, r0
 8002a66:	4330      	orrs	r0, r6
 8002a68:	63d0      	str	r0, [r2, #60]	; 0x3c
 8002a6a:	e6e8      	b.n	800283e <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002a6c:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8002a6e:	4e36      	ldr	r6, [pc, #216]	; (8002b48 <HAL_ADC_ConfigChannel+0x358>)
 8002a70:	403e      	ands	r6, r7
 8002a72:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002a76:	4330      	orrs	r0, r6
 8002a78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002a7c:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8002a7e:	e717      	b.n	80028b0 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002a80:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8002a82:	4e31      	ldr	r6, [pc, #196]	; (8002b48 <HAL_ADC_ConfigChannel+0x358>)
 8002a84:	403e      	ands	r6, r7
 8002a86:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002a8a:	4330      	orrs	r0, r6
 8002a8c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002a90:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8002a92:	e70d      	b.n	80028b0 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002a94:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8002a96:	4e2c      	ldr	r6, [pc, #176]	; (8002b48 <HAL_ADC_ConfigChannel+0x358>)
 8002a98:	403e      	ands	r6, r7
 8002a9a:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002a9e:	4330      	orrs	r0, r6
 8002aa0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002aa4:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8002aa6:	e703      	b.n	80028b0 <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002aa8:	6810      	ldr	r0, [r2, #0]
 8002aaa:	07c6      	lsls	r6, r0, #31
 8002aac:	d59b      	bpl.n	80029e6 <HAL_ADC_ConfigChannel+0x1f6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab0:	f042 0220 	orr.w	r2, r2, #32
        tmp_hal_status = HAL_ERROR;
 8002ab4:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002ab8:	e6ec      	b.n	8002894 <HAL_ADC_ConfigChannel+0xa4>
 8002aba:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8002abe:	e78d      	b.n	80029dc <HAL_ADC_ConfigChannel+0x1ec>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	07c0      	lsls	r0, r0, #31
 8002ac4:	d4f3      	bmi.n	8002aae <HAL_ADC_ConfigChannel+0x2be>
 8002ac6:	e793      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x200>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ac8:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002acc:	d183      	bne.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ace:	4a22      	ldr	r2, [pc, #136]	; (8002b58 <HAL_ADC_ConfigChannel+0x368>)
 8002ad0:	4c22      	ldr	r4, [pc, #136]	; (8002b5c <HAL_ADC_ConfigChannel+0x36c>)
 8002ad2:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ad4:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ad6:	fba4 4202 	umull	r4, r2, r4, r2
 8002ada:	0c92      	lsrs	r2, r2, #18
 8002adc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ae0:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002ae6:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ae8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002aea:	9a01      	ldr	r2, [sp, #4]
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	f43f af72 	beq.w	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
            wait_loop_index--;
 8002af2:	9a01      	ldr	r2, [sp, #4]
 8002af4:	3a01      	subs	r2, #1
 8002af6:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002af8:	9a01      	ldr	r2, [sp, #4]
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	d1f9      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x302>
 8002afe:	e76a      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x1e6>
 8002b00:	4c17      	ldr	r4, [pc, #92]	; (8002b60 <HAL_ADC_ConfigChannel+0x370>)
 8002b02:	e76b      	b.n	80029dc <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	07d7      	lsls	r7, r2, #31
 8002b08:	d4d1      	bmi.n	8002aae <HAL_ADC_ConfigChannel+0x2be>
 8002b0a:	e707      	b.n	800291c <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b0c:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002b0e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002b12:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8002b16:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8002b1a:	d023      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x374>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b1c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002b1e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002b22:	4286      	cmp	r6, r0
 8002b24:	d023      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x37e>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b26:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002b28:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002b2c:	4286      	cmp	r6, r0
 8002b2e:	d023      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x388>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b30:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002b32:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002b36:	4286      	cmp	r6, r0
 8002b38:	f47f aeba 	bne.w	80028b0 <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002b3c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002b3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002b42:	66d0      	str	r0, [r2, #108]	; 0x6c
 8002b44:	e6b4      	b.n	80028b0 <HAL_ADC_ConfigChannel+0xc0>
 8002b46:	bf00      	nop
 8002b48:	83fff000 	.word	0x83fff000
 8002b4c:	50000100 	.word	0x50000100
 8002b50:	50000400 	.word	0x50000400
 8002b54:	50000300 	.word	0x50000300
 8002b58:	20000004 	.word	0x20000004
 8002b5c:	431bde83 	.word	0x431bde83
 8002b60:	50000500 	.word	0x50000500
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002b64:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002b66:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002b6a:	6610      	str	r0, [r2, #96]	; 0x60
 8002b6c:	e7d6      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x32c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002b6e:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002b70:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002b74:	6650      	str	r0, [r2, #100]	; 0x64
 8002b76:	e7d6      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x336>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002b78:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002b7a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002b7e:	6690      	str	r0, [r2, #104]	; 0x68
 8002b80:	e7d6      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x340>
 8002b82:	bf00      	nop

08002b84 <HAL_ADCEx_InjectedConfigChannel>:
{
 8002b84:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002b86:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b8a:	6905      	ldr	r5, [r0, #16]
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b8c:	68cc      	ldr	r4, [r1, #12]
{
 8002b8e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002b90:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002b92:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8002b94:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002b96:	f000 81ac 	beq.w	8002ef2 <HAL_ADCEx_InjectedConfigChannel+0x36e>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002ba0:	b365      	cbz	r5, 8002bfc <HAL_ADCEx_InjectedConfigChannel+0x78>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8002ba2:	698f      	ldr	r7, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002ba4:	429f      	cmp	r7, r3
 8002ba6:	d029      	beq.n	8002bfc <HAL_ADCEx_InjectedConfigChannel+0x78>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002ba8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8002baa:	2d00      	cmp	r5, #0
 8002bac:	f040 812b 	bne.w	8002e06 <HAL_ADCEx_InjectedConfigChannel+0x282>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002bb0:	6a0d      	ldr	r5, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002bb2:	64c7      	str	r7, [r0, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002bb4:	2d01      	cmp	r5, #1
 8002bb6:	f000 81f1 	beq.w	8002f9c <HAL_ADCEx_InjectedConfigChannel+0x418>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002bba:	6803      	ldr	r3, [r0, #0]
 8002bbc:	4aab      	ldr	r2, [pc, #684]	; (8002e6c <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	f107 37ff 	add.w	r7, r7, #4294967295
 8002bc4:	f000 81e2 	beq.w	8002f8c <HAL_ADCEx_InjectedConfigChannel+0x408>
 8002bc8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	f000 81dd 	beq.w	8002f8c <HAL_ADCEx_InjectedConfigChannel+0x408>
 8002bd2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002bd4:	433a      	orrs	r2, r7
 8002bd6:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002bd8:	684d      	ldr	r5, [r1, #4]
 8002bda:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8002bdc:	64c7      	str	r7, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002bde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002be2:	006d      	lsls	r5, r5, #1
 8002be4:	3502      	adds	r5, #2
 8002be6:	271f      	movs	r7, #31
 8002be8:	40ae      	lsls	r6, r5
 8002bea:	fa07 f505 	lsl.w	r5, r7, r5
 8002bee:	ea22 0205 	bic.w	r2, r2, r5
 8002bf2:	4332      	orrs	r2, r6
 8002bf4:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf6:	f04f 0c00 	mov.w	ip, #0
 8002bfa:	e00a      	b.n	8002c12 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002bfc:	684b      	ldr	r3, [r1, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	f000 80e5 	beq.w	8002dce <HAL_ADCEx_InjectedConfigChannel+0x24a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	6c02      	ldr	r2, [r0, #64]	; 0x40
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002c06:	6803      	ldr	r3, [r0, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c08:	f042 0220 	orr.w	r2, r2, #32
 8002c0c:	6402      	str	r2, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8002c0e:	f04f 0c01 	mov.w	ip, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	0712      	lsls	r2, r2, #28
 8002c16:	d40d      	bmi.n	8002c34 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8002c18:	7f4a      	ldrb	r2, [r1, #29]
 8002c1a:	2a00      	cmp	r2, #0
 8002c1c:	f040 80c0 	bne.w	8002da0 <HAL_ADCEx_InjectedConfigChannel+0x21c>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8002c20:	7f0a      	ldrb	r2, [r1, #28]
 8002c22:	68dd      	ldr	r5, [r3, #12]
 8002c24:	7f8e      	ldrb	r6, [r1, #30]
 8002c26:	0512      	lsls	r2, r2, #20
 8002c28:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8002c2c:	ea42 5246 	orr.w	r2, r2, r6, lsl #21
 8002c30:	432a      	orrs	r2, r5
 8002c32:	60da      	str	r2, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	f012 0f0c 	tst.w	r2, #12
 8002c3a:	d13a      	bne.n	8002cb2 <HAL_ADCEx_InjectedConfigChannel+0x12e>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002c3c:	6a0a      	ldr	r2, [r1, #32]
 8002c3e:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002c46:	f000 814f 	beq.w	8002ee8 <HAL_ADCEx_InjectedConfigChannel+0x364>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002c4a:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002c4c:	7f4a      	ldrb	r2, [r1, #29]
 8002c4e:	2a01      	cmp	r2, #1
 8002c50:	f000 812c 	beq.w	8002eac <HAL_ADCEx_InjectedConfigChannel+0x328>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002c54:	680e      	ldr	r6, [r1, #0]
 8002c56:	2e09      	cmp	r6, #9
 8002c58:	f240 8094 	bls.w	8002d84 <HAL_ADCEx_InjectedConfigChannel+0x200>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8002c5c:	688d      	ldr	r5, [r1, #8]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
 8002c64:	f1ae 0e1e 	sub.w	lr, lr, #30
 8002c68:	2707      	movs	r7, #7
 8002c6a:	fa05 f50e 	lsl.w	r5, r5, lr
 8002c6e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8002c72:	ea22 020e 	bic.w	r2, r2, lr
 8002c76:	432a      	orrs	r2, r5
 8002c78:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002c7a:	68da      	ldr	r2, [r3, #12]
    switch (sConfigInjected->InjectedOffsetNumber)
 8002c7c:	690d      	ldr	r5, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002c7e:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8002c82:	694a      	ldr	r2, [r1, #20]
 8002c84:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    switch (sConfigInjected->InjectedOffsetNumber)
 8002c88:	3d01      	subs	r5, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8002c8a:	fa02 f20e 	lsl.w	r2, r2, lr
    switch (sConfigInjected->InjectedOffsetNumber)
 8002c8e:	2d03      	cmp	r5, #3
 8002c90:	f200 8190 	bhi.w	8002fb4 <HAL_ADCEx_InjectedConfigChannel+0x430>
 8002c94:	e8df f015 	tbh	[pc, r5, lsl #1]
 8002c98:	01000004 	.word	0x01000004
 8002c9c:	00e000f6 	.word	0x00e000f6
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8002ca0:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8002ca4:	4d72      	ldr	r5, [pc, #456]	; (8002e70 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8002ca6:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 8002ca8:	4035      	ands	r5, r6
 8002caa:	432a      	orrs	r2, r5
 8002cac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cb0:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	f002 0203 	and.w	r2, r2, #3
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	d041      	beq.n	8002d40 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cbc:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002cbe:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cc0:	d044      	beq.n	8002d4c <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002cc2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002cc6:	2401      	movs	r4, #1
 8002cc8:	4094      	lsls	r4, r2
 8002cca:	ea21 0104 	bic.w	r1, r1, r4
 8002cce:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd6:	d02c      	beq.n	8002d32 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 8002cd8:	4966      	ldr	r1, [pc, #408]	; (8002e74 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8002cda:	428b      	cmp	r3, r1
 8002cdc:	d029      	beq.n	8002d32 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cde:	2a10      	cmp	r2, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce0:	4965      	ldr	r1, [pc, #404]	; (8002e78 <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ce2:	d029      	beq.n	8002d38 <HAL_ADCEx_InjectedConfigChannel+0x1b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002ce4:	2a11      	cmp	r2, #17
 8002ce6:	d16c      	bne.n	8002dc2 <HAL_ADCEx_InjectedConfigChannel+0x23e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002ce8:	688c      	ldr	r4, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8002cea:	01e5      	lsls	r5, r4, #7
 8002cec:	d41b      	bmi.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cf2:	f000 8103 	beq.w	8002efc <HAL_ADCEx_InjectedConfigChannel+0x378>
 8002cf6:	4c5f      	ldr	r4, [pc, #380]	; (8002e74 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8002cf8:	42a3      	cmp	r3, r4
 8002cfa:	f000 80dd 	beq.w	8002eb8 <HAL_ADCEx_InjectedConfigChannel+0x334>
 8002cfe:	4d5b      	ldr	r5, [pc, #364]	; (8002e6c <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8002d00:	42ab      	cmp	r3, r5
 8002d02:	f000 814f 	beq.w	8002fa4 <HAL_ADCEx_InjectedConfigChannel+0x420>
 8002d06:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d0a:	42a3      	cmp	r3, r4
 8002d0c:	f000 80d6 	beq.w	8002ebc <HAL_ADCEx_InjectedConfigChannel+0x338>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d10:	689c      	ldr	r4, [r3, #8]
 8002d12:	f004 0403 	and.w	r4, r4, #3
 8002d16:	2c01      	cmp	r4, #1
 8002d18:	f000 8132 	beq.w	8002f80 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d1c:	2a10      	cmp	r2, #16
 8002d1e:	d002      	beq.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d20:	2a11      	cmp	r2, #17
 8002d22:	f040 80d9 	bne.w	8002ed8 <HAL_ADCEx_InjectedConfigChannel+0x354>
  __HAL_UNLOCK(hadc);
 8002d26:	2300      	movs	r3, #0
 8002d28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002d2c:	4660      	mov	r0, ip
 8002d2e:	b003      	add	sp, #12
 8002d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d32:	2a10      	cmp	r2, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d34:	4951      	ldr	r1, [pc, #324]	; (8002e7c <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d36:	d1d5      	bne.n	8002ce4 <HAL_ADCEx_InjectedConfigChannel+0x160>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d38:	688c      	ldr	r4, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d3a:	0226      	lsls	r6, r4, #8
 8002d3c:	d5d7      	bpl.n	8002cee <HAL_ADCEx_InjectedConfigChannel+0x16a>
 8002d3e:	e7f2      	b.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	07d7      	lsls	r7, r2, #31
 8002d44:	d4ef      	bmi.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d46:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002d48:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d4a:	d1ba      	bne.n	8002cc2 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002d4c:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8002d50:	4094      	lsls	r4, r2
 8002d52:	432c      	orrs	r4, r5
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002d54:	2a09      	cmp	r2, #9
        MODIFY_REG(hadc->Instance->SMPR2,
 8002d56:	688d      	ldr	r5, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8002d58:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8002d5c:	d86f      	bhi.n	8002e3e <HAL_ADCEx_InjectedConfigChannel+0x2ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d5e:	1c54      	adds	r4, r2, #1
 8002d60:	6959      	ldr	r1, [r3, #20]
 8002d62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002d66:	2607      	movs	r6, #7
 8002d68:	40a5      	lsls	r5, r4
 8002d6a:	fa06 f404 	lsl.w	r4, r6, r4
 8002d6e:	ea21 0104 	bic.w	r1, r1, r4
 8002d72:	4329      	orrs	r1, r5
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8002d78:	6159      	str	r1, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d7a:	d0d4      	beq.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 8002d7c:	493d      	ldr	r1, [pc, #244]	; (8002e74 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8002d7e:	428b      	cmp	r3, r1
 8002d80:	d1ad      	bne.n	8002cde <HAL_ADCEx_InjectedConfigChannel+0x15a>
 8002d82:	e7d0      	b.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	688d      	ldr	r5, [r1, #8]
 8002d88:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8002d8c:	f04f 0e07 	mov.w	lr, #7
 8002d90:	fa0e fe07 	lsl.w	lr, lr, r7
 8002d94:	40bd      	lsls	r5, r7
 8002d96:	ea22 020e 	bic.w	r2, r2, lr
 8002d9a:	432a      	orrs	r2, r5
 8002d9c:	615a      	str	r2, [r3, #20]
 8002d9e:	e76c      	b.n	8002c7a <HAL_ADCEx_InjectedConfigChannel+0xf6>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	7f8d      	ldrb	r5, [r1, #30]
 8002da4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002da8:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8002dac:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8002dae:	7f0a      	ldrb	r2, [r1, #28]
 8002db0:	2a01      	cmp	r2, #1
 8002db2:	f47f af3f 	bne.w	8002c34 <HAL_ADCEx_InjectedConfigChannel+0xb0>
        tmp_hal_status = HAL_ERROR;
 8002db6:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002db8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002dba:	f042 0220 	orr.w	r2, r2, #32
 8002dbe:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002dc0:	e738      	b.n	8002c34 <HAL_ADCEx_InjectedConfigChannel+0xb0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002dc2:	2a12      	cmp	r2, #18
 8002dc4:	d1af      	bne.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002dc6:	688c      	ldr	r4, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8002dc8:	0264      	lsls	r4, r4, #9
 8002dca:	d4ac      	bmi.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 8002dcc:	e78f      	b.n	8002cee <HAL_ADCEx_InjectedConfigChannel+0x16a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002dce:	6a0d      	ldr	r5, [r1, #32]
 8002dd0:	2d01      	cmp	r5, #1
 8002dd2:	f000 809f 	beq.w	8002f14 <HAL_ADCEx_InjectedConfigChannel+0x390>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8002dd6:	680b      	ldr	r3, [r1, #0]
 8002dd8:	4e24      	ldr	r6, [pc, #144]	; (8002e6c <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8002dda:	021a      	lsls	r2, r3, #8
 8002ddc:	6803      	ldr	r3, [r0, #0]
 8002dde:	42b3      	cmp	r3, r6
 8002de0:	f000 809c 	beq.w	8002f1c <HAL_ADCEx_InjectedConfigChannel+0x398>
 8002de4:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8002de8:	42b3      	cmp	r3, r6
 8002dea:	f000 8097 	beq.w	8002f1c <HAL_ADCEx_InjectedConfigChannel+0x398>
 8002dee:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8002df0:	4332      	orrs	r2, r6
 8002df2:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->JSQR           ,
 8002df4:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8002df6:	4e22      	ldr	r6, [pc, #136]	; (8002e80 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 8002df8:	4035      	ands	r5, r6
 8002dfa:	4315      	orrs	r5, r2
 8002dfc:	64dd      	str	r5, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8002dfe:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e00:	f04f 0c00 	mov.w	ip, #0
 8002e04:	e705      	b.n	8002c12 <HAL_ADCEx_InjectedConfigChannel+0x8e>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002e06:	684b      	ldr	r3, [r1, #4]
 8002e08:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8002e0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      hadc->InjectionConfig.ChannelCount --;
 8002e0e:	1e6f      	subs	r7, r5, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	680d      	ldr	r5, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8002e14:	64c7      	str	r7, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002e16:	3302      	adds	r3, #2
 8002e18:	fa05 fc03 	lsl.w	ip, r5, r3
 8002e1c:	251f      	movs	r5, #31
 8002e1e:	409d      	lsls	r5, r3
 8002e20:	ea26 0505 	bic.w	r5, r6, r5
 8002e24:	ea45 050c 	orr.w	r5, r5, ip
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002e28:	6803      	ldr	r3, [r0, #0]
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002e2a:	6485      	str	r5, [r0, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8002e2c:	2f00      	cmp	r7, #0
 8002e2e:	d1e7      	bne.n	8002e00 <HAL_ADCEx_InjectedConfigChannel+0x27c>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8002e30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e32:	4e13      	ldr	r6, [pc, #76]	; (8002e80 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 8002e34:	4032      	ands	r2, r6
 8002e36:	4315      	orrs	r5, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e38:	46bc      	mov	ip, r7
        MODIFY_REG(hadc->Instance->JSQR              ,
 8002e3a:	64dd      	str	r5, [r3, #76]	; 0x4c
 8002e3c:	e6e9      	b.n	8002c12 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002e3e:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8002e42:	6999      	ldr	r1, [r3, #24]
 8002e44:	3c1b      	subs	r4, #27
 8002e46:	2607      	movs	r6, #7
 8002e48:	40a5      	lsls	r5, r4
 8002e4a:	fa06 f404 	lsl.w	r4, r6, r4
 8002e4e:	ea21 0104 	bic.w	r1, r1, r4
 8002e52:	4329      	orrs	r1, r5
 8002e54:	6199      	str	r1, [r3, #24]
 8002e56:	e73c      	b.n	8002cd2 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8002e58:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8002e5c:	4d04      	ldr	r5, [pc, #16]	; (8002e70 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8002e5e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8002e60:	4035      	ands	r5, r6
 8002e62:	432a      	orrs	r2, r5
 8002e64:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e68:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8002e6a:	e722      	b.n	8002cb2 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8002e6c:	50000400 	.word	0x50000400
 8002e70:	83fff000 	.word	0x83fff000
 8002e74:	50000100 	.word	0x50000100
 8002e78:	50000700 	.word	0x50000700
 8002e7c:	50000300 	.word	0x50000300
 8002e80:	82082000 	.word	0x82082000
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8002e84:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8002e88:	4d60      	ldr	r5, [pc, #384]	; (800300c <HAL_ADCEx_InjectedConfigChannel+0x488>)
 8002e8a:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8002e8c:	4035      	ands	r5, r6
 8002e8e:	432a      	orrs	r2, r5
 8002e90:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002e94:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8002e96:	e70c      	b.n	8002cb2 <HAL_ADCEx_InjectedConfigChannel+0x12e>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 8002e98:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8002e9c:	4d5b      	ldr	r5, [pc, #364]	; (800300c <HAL_ADCEx_InjectedConfigChannel+0x488>)
 8002e9e:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8002ea0:	4035      	ands	r5, r6
 8002ea2:	432a      	orrs	r2, r5
 8002ea4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ea8:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8002eaa:	e702      	b.n	8002cb2 <HAL_ADCEx_InjectedConfigChannel+0x12e>
        tmp_hal_status = HAL_ERROR;
 8002eac:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eae:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002eb0:	f042 0220 	orr.w	r2, r2, #32
 8002eb4:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002eb6:	e6cd      	b.n	8002c54 <HAL_ADCEx_InjectedConfigChannel+0xd0>
 8002eb8:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ebc:	689c      	ldr	r4, [r3, #8]
 8002ebe:	f004 0403 	and.w	r4, r4, #3
 8002ec2:	2c01      	cmp	r4, #1
 8002ec4:	d01c      	beq.n	8002f00 <HAL_ADCEx_InjectedConfigChannel+0x37c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ec6:	68ac      	ldr	r4, [r5, #8]
 8002ec8:	f004 0403 	and.w	r4, r4, #3
 8002ecc:	2c01      	cmp	r4, #1
 8002ece:	d02d      	beq.n	8002f2c <HAL_ADCEx_InjectedConfigChannel+0x3a8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ed0:	2a10      	cmp	r2, #16
 8002ed2:	d02f      	beq.n	8002f34 <HAL_ADCEx_InjectedConfigChannel+0x3b0>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002ed4:	2a11      	cmp	r2, #17
 8002ed6:	d04a      	beq.n	8002f6e <HAL_ADCEx_InjectedConfigChannel+0x3ea>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8002ed8:	2a12      	cmp	r2, #18
 8002eda:	f47f af24 	bne.w	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ede:	688b      	ldr	r3, [r1, #8]
 8002ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ee4:	608b      	str	r3, [r1, #8]
 8002ee6:	e71e      	b.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8002ee8:	7f4d      	ldrb	r5, [r1, #29]
 8002eea:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	e6b0      	b.n	8002c54 <HAL_ADCEx_InjectedConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 8002ef2:	f04f 0c02 	mov.w	ip, #2
}
 8002ef6:	4660      	mov	r0, ip
 8002ef8:	b003      	add	sp, #12
 8002efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002efc:	4d44      	ldr	r5, [pc, #272]	; (8003010 <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8002efe:	e7dd      	b.n	8002ebc <HAL_ADCEx_InjectedConfigChannel+0x338>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f00:	681c      	ldr	r4, [r3, #0]
 8002f02:	07e6      	lsls	r6, r4, #31
 8002f04:	d5df      	bpl.n	8002ec6 <HAL_ADCEx_InjectedConfigChannel+0x342>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f08:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8002f0c:	f04f 0c01 	mov.w	ip, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f10:	6403      	str	r3, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002f12:	e708      	b.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8002f14:	680a      	ldr	r2, [r1, #0]
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002f16:	6803      	ldr	r3, [r0, #0]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8002f18:	0212      	lsls	r2, r2, #8
 8002f1a:	e76b      	b.n	8002df4 <HAL_ADCEx_InjectedConfigChannel+0x270>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8002f1c:	2d08      	cmp	r5, #8
 8002f1e:	d033      	beq.n	8002f88 <HAL_ADCEx_InjectedConfigChannel+0x404>
 8002f20:	2d14      	cmp	r5, #20
 8002f22:	d043      	beq.n	8002fac <HAL_ADCEx_InjectedConfigChannel+0x428>
 8002f24:	2d1c      	cmp	r5, #28
 8002f26:	bf08      	it	eq
 8002f28:	2510      	moveq	r5, #16
 8002f2a:	e760      	b.n	8002dee <HAL_ADCEx_InjectedConfigChannel+0x26a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002f2c:	682c      	ldr	r4, [r5, #0]
 8002f2e:	07e4      	lsls	r4, r4, #31
 8002f30:	d4e9      	bmi.n	8002f06 <HAL_ADCEx_InjectedConfigChannel+0x382>
 8002f32:	e7cd      	b.n	8002ed0 <HAL_ADCEx_InjectedConfigChannel+0x34c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f38:	f47f aef5 	bne.w	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f3c:	4b35      	ldr	r3, [pc, #212]	; (8003014 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8002f3e:	4c36      	ldr	r4, [pc, #216]	; (8003018 <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8002f40:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002f42:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f44:	fba4 4303 	umull	r4, r3, r4, r3
 8002f48:	0c9b      	lsrs	r3, r3, #18
 8002f4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002f4e:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002f50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f54:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f56:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002f58:	9b01      	ldr	r3, [sp, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f43f aee3 	beq.w	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
            wait_loop_index--;
 8002f60:	9b01      	ldr	r3, [sp, #4]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002f66:	9b01      	ldr	r3, [sp, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f9      	bne.n	8002f60 <HAL_ADCEx_InjectedConfigChannel+0x3dc>
 8002f6c:	e6db      	b.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f72:	f47f aed8 	bne.w	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f76:	688b      	ldr	r3, [r1, #8]
 8002f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f7c:	608b      	str	r3, [r1, #8]
 8002f7e:	e6d2      	b.n	8002d26 <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	07df      	lsls	r7, r3, #31
 8002f84:	d4bf      	bmi.n	8002f06 <HAL_ADCEx_InjectedConfigChannel+0x382>
 8002f86:	e6c9      	b.n	8002d1c <HAL_ADCEx_InjectedConfigChannel+0x198>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8002f88:	2534      	movs	r5, #52	; 0x34
 8002f8a:	e730      	b.n	8002dee <HAL_ADCEx_InjectedConfigChannel+0x26a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002f8c:	2d08      	cmp	r5, #8
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8002f90:	2d14      	cmp	r5, #20
 8002f92:	d00d      	beq.n	8002fb0 <HAL_ADCEx_InjectedConfigChannel+0x42c>
 8002f94:	2d1c      	cmp	r5, #28
 8002f96:	bf08      	it	eq
 8002f98:	2510      	moveq	r5, #16
 8002f9a:	e61a      	b.n	8002bd2 <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8002f9c:	1e7a      	subs	r2, r7, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002f9e:	6803      	ldr	r3, [r0, #0]
 8002fa0:	4617      	mov	r7, r2
 8002fa2:	e619      	b.n	8002bd8 <HAL_ADCEx_InjectedConfigChannel+0x54>
 8002fa4:	4d1d      	ldr	r5, [pc, #116]	; (800301c <HAL_ADCEx_InjectedConfigChannel+0x498>)
 8002fa6:	e789      	b.n	8002ebc <HAL_ADCEx_InjectedConfigChannel+0x338>
 8002fa8:	2534      	movs	r5, #52	; 0x34
 8002faa:	e612      	b.n	8002bd2 <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8002fac:	251c      	movs	r5, #28
 8002fae:	e71e      	b.n	8002dee <HAL_ADCEx_InjectedConfigChannel+0x26a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002fb0:	251c      	movs	r5, #28
 8002fb2:	e60e      	b.n	8002bd2 <HAL_ADCEx_InjectedConfigChannel+0x4e>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002fb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fb6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002fba:	ebb2 6f86 	cmp.w	r2, r6, lsl #26
 8002fbe:	ea4f 6586 	mov.w	r5, r6, lsl #26
 8002fc2:	d014      	beq.n	8002fee <HAL_ADCEx_InjectedConfigChannel+0x46a>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002fc4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fc6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002fca:	4295      	cmp	r5, r2
 8002fcc:	d014      	beq.n	8002ff8 <HAL_ADCEx_InjectedConfigChannel+0x474>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002fce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fd0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002fd4:	4295      	cmp	r5, r2
 8002fd6:	d014      	beq.n	8003002 <HAL_ADCEx_InjectedConfigChannel+0x47e>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8002fd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fda:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002fde:	4295      	cmp	r5, r2
 8002fe0:	f47f ae67 	bne.w	8002cb2 <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002fe4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002fe6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fea:	66da      	str	r2, [r3, #108]	; 0x6c
 8002fec:	e661      	b.n	8002cb2 <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002fee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ff0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ff4:	661a      	str	r2, [r3, #96]	; 0x60
 8002ff6:	e7e5      	b.n	8002fc4 <HAL_ADCEx_InjectedConfigChannel+0x440>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002ff8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ffa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ffe:	665a      	str	r2, [r3, #100]	; 0x64
 8003000:	e7e5      	b.n	8002fce <HAL_ADCEx_InjectedConfigChannel+0x44a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003002:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003004:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003008:	669a      	str	r2, [r3, #104]	; 0x68
 800300a:	e7e5      	b.n	8002fd8 <HAL_ADCEx_InjectedConfigChannel+0x454>
 800300c:	83fff000 	.word	0x83fff000
 8003010:	50000100 	.word	0x50000100
 8003014:	20000004 	.word	0x20000004
 8003018:	431bde83 	.word	0x431bde83
 800301c:	50000500 	.word	0x50000500

08003020 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003020:	6803      	ldr	r3, [r0, #0]
 8003022:	4a45      	ldr	r2, [pc, #276]	; (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8003024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8003028:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800302a:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800302c:	d00e      	beq.n	800304c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 800302e:	4293      	cmp	r3, r2
 8003030:	d00a      	beq.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8003032:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8003036:	4293      	cmp	r3, r2
 8003038:	d04b      	beq.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 800303a:	4c40      	ldr	r4, [pc, #256]	; (800313c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 800303c:	42a3      	cmp	r3, r4
 800303e:	d005      	beq.n	800304c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8003040:	2201      	movs	r2, #1
} 
 8003042:	4610      	mov	r0, r2
 8003044:	bcf0      	pop	{r4, r5, r6, r7}
 8003046:	4770      	bx	lr
 8003048:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 800304c:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 8003050:	f1bc 0f01 	cmp.w	ip, #1
 8003054:	d043      	beq.n	80030de <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8003056:	2401      	movs	r4, #1
 8003058:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800305c:	689c      	ldr	r4, [r3, #8]
 800305e:	0766      	lsls	r6, r4, #29
 8003060:	d50a      	bpl.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003062:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003064:	f043 0320 	orr.w	r3, r3, #32
    tmp_hal_status = HAL_ERROR;
 8003068:	2201      	movs	r2, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800306a:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800306c:	2300      	movs	r3, #0
 800306e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
} 
 8003072:	bcf0      	pop	{r4, r5, r6, r7}
 8003074:	4610      	mov	r0, r2
 8003076:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003078:	6894      	ldr	r4, [r2, #8]
 800307a:	0764      	lsls	r4, r4, #29
 800307c:	d4f1      	bmi.n	8003062 <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800307e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003082:	d046      	beq.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003084:	4f2c      	ldr	r7, [pc, #176]	; (8003138 <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8003086:	4e2e      	ldr	r6, [pc, #184]	; (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8003088:	4c2e      	ldr	r4, [pc, #184]	; (8003144 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 800308a:	42bb      	cmp	r3, r7
 800308c:	bf08      	it	eq
 800308e:	4634      	moveq	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003090:	b34d      	cbz	r5, 80030e6 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003092:	68a6      	ldr	r6, [r4, #8]
 8003094:	684f      	ldr	r7, [r1, #4]
 8003096:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 800309a:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 800309e:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 80030a2:	ea46 060c 	orr.w	r6, r6, ip
 80030a6:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030a8:	689e      	ldr	r6, [r3, #8]
 80030aa:	f006 0603 	and.w	r6, r6, #3
 80030ae:	2e01      	cmp	r6, #1
 80030b0:	d03d      	beq.n	800312e <HAL_ADCEx_MultiModeConfigChannel+0x10e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030b2:	6893      	ldr	r3, [r2, #8]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d030      	beq.n	800311e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80030bc:	68a2      	ldr	r2, [r4, #8]
 80030be:	688b      	ldr	r3, [r1, #8]
 80030c0:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80030c4:	431d      	orrs	r5, r3
 80030c6:	f022 020f 	bic.w	r2, r2, #15
 80030ca:	4315      	orrs	r5, r2
 80030cc:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ce:	2200      	movs	r2, #0
 80030d0:	e7cc      	b.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 80030d2:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 80030d6:	4a19      	ldr	r2, [pc, #100]	; (800313c <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80030d8:	f1bc 0f01 	cmp.w	ip, #1
 80030dc:	d1bb      	bne.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80030de:	2202      	movs	r2, #2
} 
 80030e0:	4610      	mov	r0, r2
 80030e2:	bcf0      	pop	{r4, r5, r6, r7}
 80030e4:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030e6:	68a1      	ldr	r1, [r4, #8]
 80030e8:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80030ec:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030ee:	6899      	ldr	r1, [r3, #8]
 80030f0:	f001 0103 	and.w	r1, r1, #3
 80030f4:	2901      	cmp	r1, #1
 80030f6:	d016      	beq.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x106>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030f8:	6893      	ldr	r3, [r2, #8]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d009      	beq.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003102:	68a3      	ldr	r3, [r4, #8]
 8003104:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003108:	f023 030f 	bic.w	r3, r3, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800310c:	2200      	movs	r2, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800310e:	60a3      	str	r3, [r4, #8]
 8003110:	e7ac      	b.n	800306c <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003112:	4c0b      	ldr	r4, [pc, #44]	; (8003140 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8003114:	e7bc      	b.n	8003090 <HAL_ADCEx_MultiModeConfigChannel+0x70>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	07db      	lsls	r3, r3, #31
 800311a:	d4d8      	bmi.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800311c:	e7f1      	b.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800311e:	6813      	ldr	r3, [r2, #0]
 8003120:	07de      	lsls	r6, r3, #31
 8003122:	d4d4      	bmi.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003124:	e7ca      	b.n	80030bc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	07d9      	lsls	r1, r3, #31
 800312a:	d4d0      	bmi.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800312c:	e7e4      	b.n	80030f8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	07df      	lsls	r7, r3, #31
 8003132:	d5be      	bpl.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003134:	e7cb      	b.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003136:	bf00      	nop
 8003138:	50000100 	.word	0x50000100
 800313c:	50000500 	.word	0x50000500
 8003140:	50000300 	.word	0x50000300
 8003144:	50000700 	.word	0x50000700

08003148 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003148:	2800      	cmp	r0, #0
 800314a:	d07b      	beq.n	8003244 <HAL_CAN_Init+0xfc>
{
 800314c:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800314e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003152:	4604      	mov	r4, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d072      	beq.n	800323e <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003158:	6822      	ldr	r2, [r4, #0]
 800315a:	6813      	ldr	r3, [r2, #0]
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003162:	f7ff f8d7 	bl	8002314 <HAL_GetTick>
 8003166:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003168:	e004      	b.n	8003174 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800316a:	f7ff f8d3 	bl	8002314 <HAL_GetTick>
 800316e:	1b43      	subs	r3, r0, r5
 8003170:	2b0a      	cmp	r3, #10
 8003172:	d85b      	bhi.n	800322c <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	07d1      	lsls	r1, r2, #31
 800317a:	d5f6      	bpl.n	800316a <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	f022 0202 	bic.w	r2, r2, #2
 8003182:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003184:	f7ff f8c6 	bl	8002314 <HAL_GetTick>
 8003188:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800318a:	e004      	b.n	8003196 <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800318c:	f7ff f8c2 	bl	8002314 <HAL_GetTick>
 8003190:	1b40      	subs	r0, r0, r5
 8003192:	280a      	cmp	r0, #10
 8003194:	d84a      	bhi.n	800322c <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	0792      	lsls	r2, r2, #30
 800319c:	d4f6      	bmi.n	800318c <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800319e:	7e22      	ldrb	r2, [r4, #24]
 80031a0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	bf0c      	ite	eq
 80031a6:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031aa:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80031ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031b0:	7e62      	ldrb	r2, [r4, #25]
 80031b2:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	bf0c      	ite	eq
 80031b8:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031bc:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80031c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031c2:	7ea2      	ldrb	r2, [r4, #26]
 80031c4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	bf0c      	ite	eq
 80031ca:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031ce:	f022 0220 	bicne.w	r2, r2, #32
 80031d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031d4:	7ee2      	ldrb	r2, [r4, #27]
 80031d6:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	bf0c      	ite	eq
 80031dc:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031e0:	f042 0210 	orrne.w	r2, r2, #16
 80031e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80031e6:	7f22      	ldrb	r2, [r4, #28]
 80031e8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	bf0c      	ite	eq
 80031ee:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80031f2:	f022 0208 	bicne.w	r2, r2, #8
 80031f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80031f8:	7f62      	ldrb	r2, [r4, #29]
 80031fa:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	bf0c      	ite	eq
 8003200:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003204:	f022 0204 	bicne.w	r2, r2, #4
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800320a:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 800320e:	6921      	ldr	r1, [r4, #16]
 8003210:	4302      	orrs	r2, r0
 8003212:	430a      	orrs	r2, r1
 8003214:	6960      	ldr	r0, [r4, #20]
 8003216:	6861      	ldr	r1, [r4, #4]
 8003218:	4302      	orrs	r2, r0
 800321a:	3901      	subs	r1, #1
 800321c:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800321e:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003220:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003222:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003224:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003226:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 800322a:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800322c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800322e:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003236:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 800323a:	2001      	movs	r0, #1
}
 800323c:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800323e:	f7fd ff51 	bl	80010e4 <HAL_CAN_MspInit>
 8003242:	e789      	b.n	8003158 <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8003244:	2001      	movs	r0, #1
}
 8003246:	4770      	bx	lr

08003248 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003248:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800324a:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800324e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003252:	f1be 0f01 	cmp.w	lr, #1
{
 8003256:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003258:	d86d      	bhi.n	8003336 <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800325a:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800325c:	b951      	cbnz	r1, 8003274 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800325e:	68c4      	ldr	r4, [r0, #12]
 8003260:	07a5      	lsls	r5, r4, #30
 8003262:	d10a      	bne.n	800327a <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003264:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 800326c:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800326e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003272:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003274:	6904      	ldr	r4, [r0, #16]
 8003276:	07a4      	lsls	r4, r4, #30
 8003278:	d0f4      	beq.n	8003264 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800327a:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 800327e:	010c      	lsls	r4, r1, #4
 8003280:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003284:	f005 0504 	and.w	r5, r5, #4
 8003288:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800328a:	2d00      	cmp	r5, #0
 800328c:	d05a      	beq.n	8003344 <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800328e:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003292:	08ed      	lsrs	r5, r5, #3
 8003294:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003296:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 800329a:	f005 0502 	and.w	r5, r5, #2
 800329e:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032a0:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032a4:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032a8:	f005 050f 	and.w	r5, r5, #15
 80032ac:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032ae:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032b0:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80032b8:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032ba:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032bc:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032c0:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032c2:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032c4:	f8dc 2000 	ldr.w	r2, [ip]
 80032c8:	4422      	add	r2, r4
 80032ca:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80032ce:	0a12      	lsrs	r2, r2, #8
 80032d0:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032d2:	f8dc 2000 	ldr.w	r2, [ip]
 80032d6:	4422      	add	r2, r4
 80032d8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80032dc:	0c12      	lsrs	r2, r2, #16
 80032de:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80032e0:	f8dc 2000 	ldr.w	r2, [ip]
 80032e4:	4422      	add	r2, r4
 80032e6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80032ea:	0e12      	lsrs	r2, r2, #24
 80032ec:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032ee:	f8dc 2000 	ldr.w	r2, [ip]
 80032f2:	4422      	add	r2, r4
 80032f4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80032f8:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032fa:	f8dc 2000 	ldr.w	r2, [ip]
 80032fe:	4422      	add	r2, r4
 8003300:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003304:	0a12      	lsrs	r2, r2, #8
 8003306:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003308:	f8dc 2000 	ldr.w	r2, [ip]
 800330c:	4422      	add	r2, r4
 800330e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003312:	0c12      	lsrs	r2, r2, #16
 8003314:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003316:	f8dc 2000 	ldr.w	r2, [ip]
 800331a:	4422      	add	r2, r4
 800331c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003320:	0e12      	lsrs	r2, r2, #24
 8003322:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003324:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003328:	b989      	cbnz	r1, 800334e <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800332a:	68d3      	ldr	r3, [r2, #12]
 800332c:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8003330:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003336:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 800333c:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800333e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003342:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003344:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003348:	0d6d      	lsrs	r5, r5, #21
 800334a:	6015      	str	r5, [r2, #0]
 800334c:	e7a3      	b.n	8003296 <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800334e:	6913      	ldr	r3, [r2, #16]
 8003350:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8003354:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003356:	6113      	str	r3, [r2, #16]
}
 8003358:	bd70      	pop	{r4, r5, r6, pc}
 800335a:	bf00      	nop

0800335c <HAL_CAN_TxMailbox0CompleteCallback>:
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop

08003360 <HAL_CAN_TxMailbox1CompleteCallback>:
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <HAL_CAN_TxMailbox2CompleteCallback>:
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop

08003368 <HAL_CAN_TxMailbox0AbortCallback>:
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop

0800336c <HAL_CAN_TxMailbox1AbortCallback>:
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop

08003370 <HAL_CAN_TxMailbox2AbortCallback>:
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop

08003374 <HAL_CAN_RxFifo0FullCallback>:
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop

0800337c <HAL_CAN_RxFifo1FullCallback>:
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop

08003380 <HAL_CAN_SleepCallback>:
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop

08003388 <HAL_CAN_ErrorCallback>:
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop

0800338c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800338c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003390:	6803      	ldr	r3, [r0, #0]
 8003392:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003394:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003398:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800339a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800339e:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80033a2:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033a6:	f014 0601 	ands.w	r6, r4, #1
{
 80033aa:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033ac:	d025      	beq.n	80033fa <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80033ae:	f017 0601 	ands.w	r6, r7, #1
 80033b2:	f040 808f 	bne.w	80034d4 <HAL_CAN_IRQHandler+0x148>
 80033b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80033be:	05f8      	lsls	r0, r7, #23
 80033c0:	d50d      	bpl.n	80033de <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80033c2:	682b      	ldr	r3, [r5, #0]
 80033c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033c8:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80033ca:	05bb      	lsls	r3, r7, #22
 80033cc:	f100 80be 	bmi.w	800354c <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80033d0:	0578      	lsls	r0, r7, #21
 80033d2:	f100 80e4 	bmi.w	800359e <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033d6:	053b      	lsls	r3, r7, #20
 80033d8:	f140 80f0 	bpl.w	80035bc <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80033dc:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033de:	03f8      	lsls	r0, r7, #15
 80033e0:	d50b      	bpl.n	80033fa <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033e2:	682b      	ldr	r3, [r5, #0]
 80033e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033e8:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033ea:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033ec:	f100 80ba 	bmi.w	8003564 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033f0:	037a      	lsls	r2, r7, #13
 80033f2:	f140 80cf 	bpl.w	8003594 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033f6:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033fa:	0727      	lsls	r7, r4, #28
 80033fc:	d502      	bpl.n	8003404 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033fe:	f01b 0f10 	tst.w	fp, #16
 8003402:	d161      	bne.n	80034c8 <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003404:	0760      	lsls	r0, r4, #29
 8003406:	d503      	bpl.n	8003410 <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003408:	f01b 0f08 	tst.w	fp, #8
 800340c:	f040 808c 	bne.w	8003528 <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003410:	07a1      	lsls	r1, r4, #30
 8003412:	d504      	bpl.n	800341e <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003414:	682b      	ldr	r3, [r5, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	079a      	lsls	r2, r3, #30
 800341a:	f040 808c 	bne.w	8003536 <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800341e:	0663      	lsls	r3, r4, #25
 8003420:	d502      	bpl.n	8003428 <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003422:	f01a 0f10 	tst.w	sl, #16
 8003426:	d149      	bne.n	80034bc <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003428:	06a7      	lsls	r7, r4, #26
 800342a:	d502      	bpl.n	8003432 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800342c:	f01a 0f08 	tst.w	sl, #8
 8003430:	d173      	bne.n	800351a <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003432:	06e0      	lsls	r0, r4, #27
 8003434:	d503      	bpl.n	800343e <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003436:	682b      	ldr	r3, [r5, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	0799      	lsls	r1, r3, #30
 800343c:	d162      	bne.n	8003504 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800343e:	03a2      	lsls	r2, r4, #14
 8003440:	d502      	bpl.n	8003448 <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003442:	f018 0f10 	tst.w	r8, #16
 8003446:	d161      	bne.n	800350c <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003448:	03e3      	lsls	r3, r4, #15
 800344a:	d502      	bpl.n	8003452 <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800344c:	f018 0f08 	tst.w	r8, #8
 8003450:	d175      	bne.n	800353e <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003452:	0427      	lsls	r7, r4, #16
 8003454:	d505      	bpl.n	8003462 <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003456:	f018 0f04 	tst.w	r8, #4
 800345a:	d106      	bne.n	800346a <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800345c:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800345e:	2204      	movs	r2, #4
 8003460:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003462:	2e00      	cmp	r6, #0
 8003464:	d146      	bne.n	80034f4 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800346a:	05e0      	lsls	r0, r4, #23
 800346c:	d504      	bpl.n	8003478 <HAL_CAN_IRQHandler+0xec>
 800346e:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8003472:	bf18      	it	ne
 8003474:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003478:	05a1      	lsls	r1, r4, #22
 800347a:	d504      	bpl.n	8003486 <HAL_CAN_IRQHandler+0xfa>
 800347c:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8003480:	bf18      	it	ne
 8003482:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003486:	0562      	lsls	r2, r4, #21
 8003488:	d504      	bpl.n	8003494 <HAL_CAN_IRQHandler+0x108>
 800348a:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800348e:	bf18      	it	ne
 8003490:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003494:	0523      	lsls	r3, r4, #20
 8003496:	d5e1      	bpl.n	800345c <HAL_CAN_IRQHandler+0xd0>
 8003498:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 800349c:	d0de      	beq.n	800345c <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 800349e:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 80034a2:	f000 809a 	beq.w	80035da <HAL_CAN_IRQHandler+0x24e>
 80034a6:	d861      	bhi.n	800356c <HAL_CAN_IRQHandler+0x1e0>
 80034a8:	f1b9 0f20 	cmp.w	r9, #32
 80034ac:	f000 8083 	beq.w	80035b6 <HAL_CAN_IRQHandler+0x22a>
 80034b0:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80034b4:	d168      	bne.n	8003588 <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 80034b6:	f046 0620 	orr.w	r6, r6, #32
            break;
 80034ba:	e05f      	b.n	800357c <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80034c0:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80034c4:	611a      	str	r2, [r3, #16]
 80034c6:	e7af      	b.n	8003428 <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034c8:	682b      	ldr	r3, [r5, #0]
 80034ca:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034cc:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	e797      	b.n	8003404 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034d4:	2201      	movs	r2, #1
 80034d6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034d8:	07bb      	lsls	r3, r7, #30
 80034da:	d43b      	bmi.n	8003554 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034dc:	077e      	lsls	r6, r7, #29
 80034de:	d460      	bmi.n	80035a2 <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034e0:	f017 0608 	ands.w	r6, r7, #8
 80034e4:	d06e      	beq.n	80035c4 <HAL_CAN_IRQHandler+0x238>
 80034e6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80034ea:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034ee:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80034f2:	e764      	b.n	80033be <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 80034f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80034f6:	431e      	orrs	r6, r3
    HAL_CAN_ErrorCallback(hcan);
 80034f8:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 80034fa:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80034fc:	f7ff ff44 	bl	8003388 <HAL_CAN_ErrorCallback>
}
 8003500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003504:	4628      	mov	r0, r5
 8003506:	f7ff ff37 	bl	8003378 <HAL_CAN_RxFifo1MsgPendingCallback>
 800350a:	e798      	b.n	800343e <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	2210      	movs	r2, #16
 8003510:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8003512:	4628      	mov	r0, r5
 8003514:	f7ff ff34 	bl	8003380 <HAL_CAN_SleepCallback>
 8003518:	e796      	b.n	8003448 <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800351a:	682b      	ldr	r3, [r5, #0]
 800351c:	2208      	movs	r2, #8
 800351e:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003520:	4628      	mov	r0, r5
 8003522:	f7ff ff2b 	bl	800337c <HAL_CAN_RxFifo1FullCallback>
 8003526:	e784      	b.n	8003432 <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	2208      	movs	r2, #8
 800352c:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800352e:	4628      	mov	r0, r5
 8003530:	f7ff ff20 	bl	8003374 <HAL_CAN_RxFifo0FullCallback>
 8003534:	e76c      	b.n	8003410 <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003536:	4628      	mov	r0, r5
 8003538:	f7fe f86e 	bl	8001618 <HAL_CAN_RxFifo0MsgPendingCallback>
 800353c:	e76f      	b.n	800341e <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800353e:	682b      	ldr	r3, [r5, #0]
 8003540:	2208      	movs	r2, #8
 8003542:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003544:	4628      	mov	r0, r5
 8003546:	f7ff ff1d 	bl	8003384 <HAL_CAN_WakeUpFromRxMsgCallback>
 800354a:	e782      	b.n	8003452 <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800354c:	4628      	mov	r0, r5
 800354e:	f7ff ff07 	bl	8003360 <HAL_CAN_TxMailbox1CompleteCallback>
 8003552:	e744      	b.n	80033de <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003554:	f7ff ff02 	bl	800335c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003558:	2600      	movs	r6, #0
 800355a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800355e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003562:	e72c      	b.n	80033be <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003564:	4628      	mov	r0, r5
 8003566:	f7ff fefd 	bl	8003364 <HAL_CAN_TxMailbox2CompleteCallback>
 800356a:	e746      	b.n	80033fa <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 800356c:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8003570:	d01e      	beq.n	80035b0 <HAL_CAN_IRQHandler+0x224>
 8003572:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8003576:	bf08      	it	eq
 8003578:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800357c:	682b      	ldr	r3, [r5, #0]
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003584:	619a      	str	r2, [r3, #24]
 8003586:	e76a      	b.n	800345e <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 8003588:	f1b9 0f10 	cmp.w	r9, #16
 800358c:	d1f6      	bne.n	800357c <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 800358e:	f046 0608 	orr.w	r6, r6, #8
            break;
 8003592:	e7f3      	b.n	800357c <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003594:	033b      	lsls	r3, r7, #12
 8003596:	d51c      	bpl.n	80035d2 <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003598:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 800359c:	e72d      	b.n	80033fa <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800359e:	4616      	mov	r6, r2
 80035a0:	e71d      	b.n	80033de <HAL_CAN_IRQHandler+0x52>
 80035a2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80035a6:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80035aa:	f44f 6600 	mov.w	r6, #2048	; 0x800
 80035ae:	e706      	b.n	80033be <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 80035b0:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80035b4:	e7e2      	b.n	800357c <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035b6:	f046 0610 	orr.w	r6, r6, #16
            break;
 80035ba:	e7df      	b.n	800357c <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80035bc:	4628      	mov	r0, r5
 80035be:	f7ff fed5 	bl	800336c <HAL_CAN_TxMailbox1AbortCallback>
 80035c2:	e70c      	b.n	80033de <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80035c4:	f7ff fed0 	bl	8003368 <HAL_CAN_TxMailbox0AbortCallback>
 80035c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035d0:	e6f5      	b.n	80033be <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035d2:	4628      	mov	r0, r5
 80035d4:	f7ff fecc 	bl	8003370 <HAL_CAN_TxMailbox2AbortCallback>
 80035d8:	e70f      	b.n	80033fa <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 80035da:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80035de:	e7cd      	b.n	800357c <HAL_CAN_IRQHandler+0x1f0>

080035e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4907      	ldr	r1, [pc, #28]	; (8003600 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80035e2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80035fa:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003604:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_NVIC_SetPriority+0x74>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800360c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360e:	f1c3 0e07 	rsb	lr, r3, #7
 8003612:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003616:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800361a:	bf28      	it	cs
 800361c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003620:	f1bc 0f06 	cmp.w	ip, #6
 8003624:	d91b      	bls.n	800365e <HAL_NVIC_SetPriority+0x5a>
 8003626:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003628:	f04f 3cff 	mov.w	ip, #4294967295
 800362c:	fa0c fc03 	lsl.w	ip, ip, r3
 8003630:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	f04f 3cff 	mov.w	ip, #4294967295
 8003638:	fa0c fc0e 	lsl.w	ip, ip, lr
 800363c:	ea21 010c 	bic.w	r1, r1, ip
 8003640:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003642:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003648:	db0c      	blt.n	8003664 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800364e:	0109      	lsls	r1, r1, #4
 8003650:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003654:	b2c9      	uxtb	r1, r1
 8003656:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800365a:	f85d fb04 	ldr.w	pc, [sp], #4
 800365e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003660:	4613      	mov	r3, r2
 8003662:	e7e7      	b.n	8003634 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_NVIC_SetPriority+0x78>)
 8003666:	f000 000f 	and.w	r0, r0, #15
 800366a:	0109      	lsls	r1, r1, #4
 800366c:	4403      	add	r3, r0
 800366e:	b2c9      	uxtb	r1, r1
 8003670:	7619      	strb	r1, [r3, #24]
 8003672:	f85d fb04 	ldr.w	pc, [sp], #4
 8003676:	bf00      	nop
 8003678:	e000ed00 	.word	0xe000ed00
 800367c:	e000ecfc 	.word	0xe000ecfc

08003680 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003680:	2800      	cmp	r0, #0
 8003682:	db08      	blt.n	8003696 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003684:	0941      	lsrs	r1, r0, #5
 8003686:	4a04      	ldr	r2, [pc, #16]	; (8003698 <HAL_NVIC_EnableIRQ+0x18>)
 8003688:	f000 001f 	and.w	r0, r0, #31
 800368c:	2301      	movs	r3, #1
 800368e:	fa03 f000 	lsl.w	r0, r3, r0
 8003692:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003696:	4770      	bx	lr
 8003698:	e000e100 	.word	0xe000e100

0800369c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800369c:	3801      	subs	r0, #1
 800369e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80036a2:	d210      	bcs.n	80036c6 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036a4:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036aa:	4c08      	ldr	r4, [pc, #32]	; (80036cc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ae:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80036b2:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ba:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036bc:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 80036be:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c2:	6119      	str	r1, [r3, #16]
 80036c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80036c6:	2001      	movs	r0, #1
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80036d0:	2800      	cmp	r0, #0
 80036d2:	d035      	beq.n	8003740 <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036d4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 80036d8:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036da:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80036dc:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 80036de:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e0:	6902      	ldr	r2, [r0, #16]
 80036e2:	4323      	orrs	r3, r4
 80036e4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e6:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 80036ea:	4323      	orrs	r3, r4
 80036ec:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ee:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036f0:	4c14      	ldr	r4, [pc, #80]	; (8003744 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 80036f2:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 80036f4:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036f6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80036fa:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80036fe:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003700:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 8003702:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003704:	d912      	bls.n	800372c <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <HAL_DMA_Init+0x78>)
 8003708:	4a10      	ldr	r2, [pc, #64]	; (800374c <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 800370a:	4c11      	ldr	r4, [pc, #68]	; (8003750 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800370c:	440b      	add	r3, r1
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 8003716:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371a:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 800371c:	8401      	strh	r1, [r0, #32]
 800371e:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003722:	6382      	str	r2, [r0, #56]	; 0x38
}  
 8003724:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8003728:	4610      	mov	r0, r2
}  
 800372a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_DMA_Init+0x84>)
 800372e:	4a07      	ldr	r2, [pc, #28]	; (800374c <HAL_DMA_Init+0x7c>)
 8003730:	440b      	add	r3, r1
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8003738:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800373c:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 800373e:	e7ea      	b.n	8003716 <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8003740:	2001      	movs	r0, #1
}  
 8003742:	4770      	bx	lr
 8003744:	40020407 	.word	0x40020407
 8003748:	bffdfbf8 	.word	0xbffdfbf8
 800374c:	cccccccd 	.word	0xcccccccd
 8003750:	40020400 	.word	0x40020400
 8003754:	bffdfff8 	.word	0xbffdfff8

08003758 <HAL_DMA_Start_IT>:
{
 8003758:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 800375a:	f890 4020 	ldrb.w	r4, [r0, #32]
 800375e:	2c01      	cmp	r4, #1
 8003760:	d039      	beq.n	80037d6 <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8003762:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003766:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003768:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 800376a:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800376e:	d005      	beq.n	800377c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8003770:	2300      	movs	r3, #0
 8003772:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8003776:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8003778:	2002      	movs	r0, #2
} 
 800377a:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 800377c:	2502      	movs	r5, #2
 800377e:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003782:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003784:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003786:	2500      	movs	r5, #0
 8003788:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800378a:	6825      	ldr	r5, [r4, #0]
 800378c:	f025 0501 	bic.w	r5, r5, #1
 8003790:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003792:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003794:	fa0c f505 	lsl.w	r5, ip, r5
 8003798:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 800379a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800379c:	6843      	ldr	r3, [r0, #4]
 800379e:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80037a0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 80037a2:	bf0b      	itete	eq
 80037a4:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80037a6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80037a8:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80037aa:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80037ac:	b153      	cbz	r3, 80037c4 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	f043 030e 	orr.w	r3, r3, #14
 80037b4:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80037be:	6023      	str	r3, [r4, #0]
} 
 80037c0:	bc70      	pop	{r4, r5, r6}
 80037c2:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	f043 030a 	orr.w	r3, r3, #10
 80037ca:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	f023 0304 	bic.w	r3, r3, #4
 80037d2:	6023      	str	r3, [r4, #0]
 80037d4:	e7ef      	b.n	80037b6 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80037d6:	2002      	movs	r0, #2
} 
 80037d8:	bc70      	pop	{r4, r5, r6}
 80037da:	4770      	bx	lr

080037dc <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037dc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80037e0:	2a02      	cmp	r2, #2
{
 80037e2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e4:	d006      	beq.n	80037f4 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e6:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80037e8:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ea:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80037ec:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80037f0:	2001      	movs	r0, #1
}
 80037f2:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037f4:	6802      	ldr	r2, [r0, #0]
 80037f6:	6811      	ldr	r1, [r2, #0]
 80037f8:	f021 010e 	bic.w	r1, r1, #14
{
 80037fc:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80037fe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003800:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003802:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003804:	6811      	ldr	r1, [r2, #0]
 8003806:	f021 0101 	bic.w	r1, r1, #1
 800380a:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800380c:	2201      	movs	r2, #1
 800380e:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 8003810:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003814:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 8003816:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 8003818:	2000      	movs	r0, #0
}
 800381a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003820:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8003824:	2a02      	cmp	r2, #2
 8003826:	d003      	beq.n	8003830 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003828:	2204      	movs	r2, #4
 800382a:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800382c:	2001      	movs	r0, #1
}
 800382e:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003830:	6802      	ldr	r2, [r0, #0]
 8003832:	6811      	ldr	r1, [r2, #0]
 8003834:	f021 010e 	bic.w	r1, r1, #14
{  
 8003838:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800383a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800383c:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800383e:	6811      	ldr	r1, [r2, #0]
 8003840:	f021 0101 	bic.w	r1, r1, #1
 8003844:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003846:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003848:	2101      	movs	r1, #1
 800384a:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 800384c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800384e:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8003850:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8003854:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003858:	b112      	cbz	r2, 8003860 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 800385a:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 800385c:	2000      	movs	r0, #0
}
 800385e:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	4610      	mov	r0, r2
}
 8003862:	bd10      	pop	{r4, pc}

08003864 <HAL_DMA_IRQHandler>:
{
 8003864:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003866:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003868:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800386a:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800386c:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800386e:	2304      	movs	r3, #4
 8003870:	4093      	lsls	r3, r2
 8003872:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8003874:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003876:	d00e      	beq.n	8003896 <HAL_DMA_IRQHandler+0x32>
 8003878:	f015 0f04 	tst.w	r5, #4
 800387c:	d00b      	beq.n	8003896 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800387e:	6822      	ldr	r2, [r4, #0]
 8003880:	0692      	lsls	r2, r2, #26
 8003882:	d403      	bmi.n	800388c <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	f022 0204 	bic.w	r2, r2, #4
 800388a:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 800388c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800388e:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8003890:	b1ca      	cbz	r2, 80038c6 <HAL_DMA_IRQHandler+0x62>
}  
 8003892:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8003894:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003896:	2302      	movs	r3, #2
 8003898:	4093      	lsls	r3, r2
 800389a:	420b      	tst	r3, r1
 800389c:	d015      	beq.n	80038ca <HAL_DMA_IRQHandler+0x66>
 800389e:	f015 0f02 	tst.w	r5, #2
 80038a2:	d012      	beq.n	80038ca <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038a4:	6822      	ldr	r2, [r4, #0]
 80038a6:	0692      	lsls	r2, r2, #26
 80038a8:	d406      	bmi.n	80038b8 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	f022 020a 	bic.w	r2, r2, #10
 80038b0:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80038b2:	2201      	movs	r2, #1
 80038b4:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 80038b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80038ba:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 80038bc:	2100      	movs	r1, #0
 80038be:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	d1e5      	bne.n	8003892 <HAL_DMA_IRQHandler+0x2e>
}  
 80038c6:	bc70      	pop	{r4, r5, r6}
 80038c8:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038ca:	2308      	movs	r3, #8
 80038cc:	4093      	lsls	r3, r2
 80038ce:	420b      	tst	r3, r1
 80038d0:	d0f9      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x62>
 80038d2:	072b      	lsls	r3, r5, #28
 80038d4:	d5f7      	bpl.n	80038c6 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038d6:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 80038d8:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038da:	f023 030e 	bic.w	r3, r3, #14
 80038de:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80038e0:	2301      	movs	r3, #1
 80038e2:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 80038e6:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80038ea:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 80038ec:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038ee:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 80038f0:	2900      	cmp	r1, #0
 80038f2:	d0e8      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x62>
}  
 80038f4:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80038f6:	4708      	bx	r1

080038f8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0U;
  uint8_t nbiterations = 0U;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038fc:	f8df a188 	ldr.w	sl, [pc, #392]	; 8003a88 <HAL_FLASH_Program+0x190>
{
 8003900:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8003902:	f89a 3018 	ldrb.w	r3, [sl, #24]
 8003906:	2b01      	cmp	r3, #1
{
 8003908:	b083      	sub	sp, #12
  __HAL_LOCK(&pFlash);
 800390a:	f000 80ad 	beq.w	8003a68 <HAL_FLASH_Program+0x170>
 800390e:	2301      	movs	r3, #1
 8003910:	4606      	mov	r6, r0
 8003912:	4688      	mov	r8, r1
 8003914:	4693      	mov	fp, r2
 8003916:	f88a 3018 	strb.w	r3, [sl, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800391a:	f7fe fcfb 	bl	8002314 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800391e:	4d59      	ldr	r5, [pc, #356]	; (8003a84 <HAL_FLASH_Program+0x18c>)
  uint32_t tickstart = HAL_GetTick();
 8003920:	4604      	mov	r4, r0
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003922:	f24c 3750 	movw	r7, #50000	; 0xc350
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003926:	e005      	b.n	8003934 <HAL_FLASH_Program+0x3c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003928:	f7fe fcf4 	bl	8002314 <HAL_GetTick>
 800392c:	1b00      	subs	r0, r0, r4
 800392e:	42b8      	cmp	r0, r7
 8003930:	f200 8083 	bhi.w	8003a3a <HAL_FLASH_Program+0x142>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003934:	68eb      	ldr	r3, [r5, #12]
 8003936:	07db      	lsls	r3, r3, #31
 8003938:	d4f6      	bmi.n	8003928 <HAL_FLASH_Program+0x30>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800393a:	68eb      	ldr	r3, [r5, #12]
 800393c:	0698      	lsls	r0, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800393e:	bf44      	itt	mi
 8003940:	2320      	movmi	r3, #32
 8003942:	60eb      	strmi	r3, [r5, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003944:	4b4f      	ldr	r3, [pc, #316]	; (8003a84 <HAL_FLASH_Program+0x18c>)
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	06d1      	lsls	r1, r2, #27
 800394a:	d478      	bmi.n	8003a3e <HAL_FLASH_Program+0x146>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800394c:	68df      	ldr	r7, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800394e:	f017 0704 	ands.w	r7, r7, #4
 8003952:	d174      	bne.n	8003a3e <HAL_FLASH_Program+0x146>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003954:	2e01      	cmp	r6, #1
 8003956:	d003      	beq.n	8003960 <HAL_FLASH_Program+0x68>
      nbiterations = 4U;
 8003958:	2e02      	cmp	r6, #2
 800395a:	bf0c      	ite	eq
 800395c:	2602      	moveq	r6, #2
 800395e:	2604      	movne	r6, #4
    for (index = 0U; index < nbiterations; index++)
 8003960:	eb08 0346 	add.w	r3, r8, r6, lsl #1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003964:	4c47      	ldr	r4, [pc, #284]	; (8003a84 <HAL_FLASH_Program+0x18c>)
 8003966:	9301      	str	r3, [sp, #4]
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003968:	f24c 3650 	movw	r6, #50000	; 0xc350
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800396c:	f1c7 0220 	rsb	r2, r7, #32
 8003970:	fa09 f202 	lsl.w	r2, r9, r2
 8003974:	fa2b f307 	lsr.w	r3, fp, r7
 8003978:	4313      	orrs	r3, r2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800397a:	2200      	movs	r2, #0
 800397c:	f8ca 201c 	str.w	r2, [sl, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003980:	f1a7 0120 	sub.w	r1, r7, #32
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003984:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003986:	fa29 f101 	lsr.w	r1, r9, r1
 800398a:	430b      	orrs	r3, r1
 800398c:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8003994:	f8a8 3000 	strh.w	r3, [r8]
  uint32_t tickstart = HAL_GetTick();
 8003998:	f7fe fcbc 	bl	8002314 <HAL_GetTick>
 800399c:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800399e:	e004      	b.n	80039aa <HAL_FLASH_Program+0xb2>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80039a0:	f7fe fcb8 	bl	8002314 <HAL_GetTick>
 80039a4:	1b40      	subs	r0, r0, r5
 80039a6:	42b0      	cmp	r0, r6
 80039a8:	d81f      	bhi.n	80039ea <HAL_FLASH_Program+0xf2>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80039aa:	68e3      	ldr	r3, [r4, #12]
 80039ac:	07db      	lsls	r3, r3, #31
 80039ae:	d4f7      	bmi.n	80039a0 <HAL_FLASH_Program+0xa8>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80039b0:	68e3      	ldr	r3, [r4, #12]
 80039b2:	0698      	lsls	r0, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80039b4:	bf44      	itt	mi
 80039b6:	2320      	movmi	r3, #32
 80039b8:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80039ba:	68e3      	ldr	r3, [r4, #12]
 80039bc:	06d9      	lsls	r1, r3, #27
 80039be:	d41a      	bmi.n	80039f6 <HAL_FLASH_Program+0xfe>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80039c0:	68e0      	ldr	r0, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80039c2:	f010 0004 	ands.w	r0, r0, #4
 80039c6:	d116      	bne.n	80039f6 <HAL_FLASH_Program+0xfe>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80039c8:	6923      	ldr	r3, [r4, #16]
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6123      	str	r3, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 80039d0:	9b01      	ldr	r3, [sp, #4]
 80039d2:	f108 0802 	add.w	r8, r8, #2
 80039d6:	4598      	cmp	r8, r3
 80039d8:	f107 0710 	add.w	r7, r7, #16
 80039dc:	d1c6      	bne.n	800396c <HAL_FLASH_Program+0x74>
  __HAL_UNLOCK(&pFlash);
 80039de:	2300      	movs	r3, #0
 80039e0:	f88a 3018 	strb.w	r3, [sl, #24]
}
 80039e4:	b003      	add	sp, #12
 80039e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80039ea:	6923      	ldr	r3, [r4, #16]
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	2003      	movs	r0, #3
 80039f2:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 80039f4:	e7f3      	b.n	80039de <HAL_FLASH_Program+0xe6>
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_FLASH_Program+0x18c>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f013 0310 	ands.w	r3, r3, #16
 80039fe:	d01a      	beq.n	8003a36 <HAL_FLASH_Program+0x13e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a00:	f8da 301c 	ldr.w	r3, [sl, #28]
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	f8ca 301c 	str.w	r3, [sl, #28]
 8003a0c:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8003a0e:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a10:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_FLASH_Program+0x18c>)
 8003a12:	68d2      	ldr	r2, [r2, #12]
 8003a14:	0752      	lsls	r2, r2, #29
 8003a16:	d506      	bpl.n	8003a26 <HAL_FLASH_Program+0x12e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003a18:	f8da 201c 	ldr.w	r2, [sl, #28]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8003a20:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003a22:	f8ca 201c 	str.w	r2, [sl, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a26:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <HAL_FLASH_Program+0x18c>)
 8003a28:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003a2a:	6913      	ldr	r3, [r2, #16]
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
    return HAL_ERROR;
 8003a30:	2001      	movs	r0, #1
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003a32:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8003a34:	e7d3      	b.n	80039de <HAL_FLASH_Program+0xe6>
 8003a36:	2104      	movs	r1, #4
 8003a38:	e7ea      	b.n	8003a10 <HAL_FLASH_Program+0x118>
 8003a3a:	2003      	movs	r0, #3
 8003a3c:	e7cf      	b.n	80039de <HAL_FLASH_Program+0xe6>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_FLASH_Program+0x18c>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f013 0310 	ands.w	r3, r3, #16
 8003a46:	d113      	bne.n	8003a70 <HAL_FLASH_Program+0x178>
 8003a48:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <HAL_FLASH_Program+0x18c>)
 8003a4c:	68d2      	ldr	r2, [r2, #12]
 8003a4e:	0752      	lsls	r2, r2, #29
 8003a50:	d506      	bpl.n	8003a60 <HAL_FLASH_Program+0x168>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003a52:	f8da 201c 	ldr.w	r2, [sl, #28]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8003a5a:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003a5c:	f8ca 201c 	str.w	r2, [sl, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a60:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <HAL_FLASH_Program+0x18c>)
    return HAL_ERROR;
 8003a62:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003a64:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 8003a66:	e7ba      	b.n	80039de <HAL_FLASH_Program+0xe6>
  __HAL_LOCK(&pFlash);
 8003a68:	2002      	movs	r0, #2
}
 8003a6a:	b003      	add	sp, #12
 8003a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003a70:	f8da 301c 	ldr.w	r3, [sl, #28]
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	f8ca 301c 	str.w	r3, [sl, #28]
 8003a7c:	2114      	movs	r1, #20
    flags |= FLASH_FLAG_WRPERR;
 8003a7e:	2310      	movs	r3, #16
 8003a80:	e7e3      	b.n	8003a4a <HAL_FLASH_Program+0x152>
 8003a82:	bf00      	nop
 8003a84:	40022000 	.word	0x40022000
 8003a88:	20001598 	.word	0x20001598

08003a8c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a8c:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_FLASH_Unlock+0x1c>)
 8003a8e:	6918      	ldr	r0, [r3, #16]
 8003a90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a94:	d006      	beq.n	8003aa4 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a96:	4905      	ldr	r1, [pc, #20]	; (8003aac <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a98:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003a9a:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003a9c:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003a9e:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	45670123 	.word	0x45670123
 8003ab0:	cdef89ab 	.word	0xcdef89ab

08003ab4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ab4:	4a03      	ldr	r2, [pc, #12]	; (8003ac4 <HAL_FLASH_Lock+0x10>)
 8003ab6:	6913      	ldr	r3, [r2, #16]
 8003ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 8003abc:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003abe:	6113      	str	r3, [r2, #16]
}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40022000 	.word	0x40022000

08003ac8 <FLASH_WaitForLastOperation>:
{
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003acc:	f7fe fc22 	bl	8002314 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003ad0:	4e1e      	ldr	r6, [pc, #120]	; (8003b4c <FLASH_WaitForLastOperation+0x84>)
  uint32_t tickstart = HAL_GetTick();
 8003ad2:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003ad4:	1c60      	adds	r0, r4, #1
 8003ad6:	d112      	bne.n	8003afe <FLASH_WaitForLastOperation+0x36>
 8003ad8:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <FLASH_WaitForLastOperation+0x84>)
 8003ada:	68d3      	ldr	r3, [r2, #12]
 8003adc:	07d9      	lsls	r1, r3, #31
 8003ade:	d4fc      	bmi.n	8003ada <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003ae0:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <FLASH_WaitForLastOperation+0x84>)
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	0690      	lsls	r0, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ae6:	bf44      	itt	mi
 8003ae8:	2220      	movmi	r2, #32
 8003aea:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <FLASH_WaitForLastOperation+0x84>)
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	06d1      	lsls	r1, r2, #27
 8003af2:	d40f      	bmi.n	8003b14 <FLASH_WaitForLastOperation+0x4c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003af4:	68d8      	ldr	r0, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003af6:	f010 0004 	ands.w	r0, r0, #4
 8003afa:	d10b      	bne.n	8003b14 <FLASH_WaitForLastOperation+0x4c>
}
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003afe:	68f3      	ldr	r3, [r6, #12]
 8003b00:	07db      	lsls	r3, r3, #31
 8003b02:	d5ed      	bpl.n	8003ae0 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003b04:	b124      	cbz	r4, 8003b10 <FLASH_WaitForLastOperation+0x48>
 8003b06:	f7fe fc05 	bl	8002314 <HAL_GetTick>
 8003b0a:	1b40      	subs	r0, r0, r5
 8003b0c:	42a0      	cmp	r0, r4
 8003b0e:	d9e1      	bls.n	8003ad4 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8003b10:	2003      	movs	r0, #3
}
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <FLASH_WaitForLastOperation+0x84>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f013 0310 	ands.w	r3, r3, #16
 8003b1c:	d014      	beq.n	8003b48 <FLASH_WaitForLastOperation+0x80>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b1e:	490c      	ldr	r1, [pc, #48]	; (8003b50 <FLASH_WaitForLastOperation+0x88>)
 8003b20:	69ca      	ldr	r2, [r1, #28]
 8003b22:	f042 0202 	orr.w	r2, r2, #2
 8003b26:	2014      	movs	r0, #20
    flags |= FLASH_FLAG_WRPERR;
 8003b28:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b2a:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b2c:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <FLASH_WaitForLastOperation+0x84>)
 8003b2e:	68d2      	ldr	r2, [r2, #12]
 8003b30:	0752      	lsls	r2, r2, #29
 8003b32:	d505      	bpl.n	8003b40 <FLASH_WaitForLastOperation+0x78>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b34:	4906      	ldr	r1, [pc, #24]	; (8003b50 <FLASH_WaitForLastOperation+0x88>)
 8003b36:	69ca      	ldr	r2, [r1, #28]
 8003b38:	f042 0201 	orr.w	r2, r2, #1
    flags |= FLASH_FLAG_PGERR;
 8003b3c:	4603      	mov	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b3e:	61ca      	str	r2, [r1, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b40:	4a02      	ldr	r2, [pc, #8]	; (8003b4c <FLASH_WaitForLastOperation+0x84>)
    return HAL_ERROR;
 8003b42:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b44:	60d3      	str	r3, [r2, #12]
}
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	2004      	movs	r0, #4
 8003b4a:	e7ef      	b.n	8003b2c <FLASH_WaitForLastOperation+0x64>
 8003b4c:	40022000 	.word	0x40022000
 8003b50:	20001598 	.word	0x20001598

08003b54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b58:	4e2d      	ldr	r6, [pc, #180]	; (8003c10 <HAL_FLASHEx_Erase+0xbc>)
 8003b5a:	7e33      	ldrb	r3, [r6, #24]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d054      	beq.n	8003c0a <HAL_FLASHEx_Erase+0xb6>
 8003b60:	2301      	movs	r3, #1
 8003b62:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b64:	6803      	ldr	r3, [r0, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	4681      	mov	r9, r0
 8003b6a:	d031      	beq.n	8003bd0 <HAL_FLASHEx_Erase+0x7c>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b70:	4688      	mov	r8, r1
 8003b72:	f7ff ffa9 	bl	8003ac8 <FLASH_WaitForLastOperation>
 8003b76:	4607      	mov	r7, r0
 8003b78:	bb78      	cbnz	r0, 8003bda <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7e:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003b82:	e9d9 5301 	ldrd	r5, r3, [r9, #4]
 8003b86:	eb05 23c3 	add.w	r3, r5, r3, lsl #11
        for(address = pEraseInit->PageAddress;
 8003b8a:	429d      	cmp	r5, r3
 8003b8c:	d225      	bcs.n	8003bda <HAL_FLASHEx_Erase+0x86>
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003b8e:	4c21      	ldr	r4, [pc, #132]	; (8003c14 <HAL_FLASHEx_Erase+0xc0>)
 8003b90:	e007      	b.n	8003ba2 <HAL_FLASHEx_Erase+0x4e>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003b92:	e9d9 3201 	ldrd	r3, r2, [r9, #4]
            address += FLASH_PAGE_SIZE)
 8003b96:	f505 6500 	add.w	r5, r5, #2048	; 0x800
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003b9a:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8003b9e:	42ab      	cmp	r3, r5
 8003ba0:	d91c      	bls.n	8003bdc <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ba2:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003ba4:	6923      	ldr	r3, [r4, #16]
 8003ba6:	f043 0302 	orr.w	r3, r3, #2
 8003baa:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003bac:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bae:	6923      	ldr	r3, [r4, #16]
 8003bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb4:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bb6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bba:	f7ff ff85 	bl	8003ac8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003bbe:	6923      	ldr	r3, [r4, #16]
 8003bc0:	f023 0302 	bic.w	r3, r3, #2
 8003bc4:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d0e3      	beq.n	8003b92 <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8003bca:	f8c8 5000 	str.w	r5, [r8]
            break;
 8003bce:	e005      	b.n	8003bdc <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bd4:	f7ff ff78 	bl	8003ac8 <FLASH_WaitForLastOperation>
 8003bd8:	b120      	cbz	r0, 8003be4 <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bda:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	7633      	strb	r3, [r6, #24]
}
 8003be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003be4:	4c0b      	ldr	r4, [pc, #44]	; (8003c14 <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003be6:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	f043 0304 	orr.w	r3, r3, #4
 8003bee:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003bf0:	6923      	ldr	r3, [r4, #16]
 8003bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bf6:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bfc:	f7ff ff64 	bl	8003ac8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003c00:	6923      	ldr	r3, [r4, #16]
 8003c02:	f023 0304 	bic.w	r3, r3, #4
 8003c06:	6123      	str	r3, [r4, #16]
 8003c08:	e7e8      	b.n	8003bdc <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 8003c0a:	2002      	movs	r0, #2
}
 8003c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c10:	20001598 	.word	0x20001598
 8003c14:	40022000 	.word	0x40022000

08003c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c1c:	680c      	ldr	r4, [r1, #0]
{
 8003c1e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c20:	2c00      	cmp	r4, #0
 8003c22:	d07e      	beq.n	8003d22 <HAL_GPIO_Init+0x10a>
 8003c24:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c28:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 8003de8 <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00u;
 8003c2c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c2e:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c32:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c34:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8003c38:	ea15 0804 	ands.w	r8, r5, r4
 8003c3c:	d06b      	beq.n	8003d16 <HAL_GPIO_Init+0xfe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c3e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8003c42:	f007 0203 	and.w	r2, r7, #3
 8003c46:	1e51      	subs	r1, r2, #1
 8003c48:	2901      	cmp	r1, #1
 8003c4a:	d96d      	bls.n	8003d28 <HAL_GPIO_Init+0x110>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4c:	2a03      	cmp	r2, #3
 8003c4e:	f040 80ac 	bne.w	8003daa <HAL_GPIO_Init+0x192>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c52:	fa02 f20c 	lsl.w	r2, r2, ip
 8003c56:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8003c58:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c5a:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c5c:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c5e:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003c62:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c64:	d057      	beq.n	8003d16 <HAL_GPIO_Init+0xfe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c66:	f8da 2018 	ldr.w	r2, [sl, #24]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	f8ca 2018 	str.w	r2, [sl, #24]
 8003c72:	f8da 2018 	ldr.w	r2, [sl, #24]
 8003c76:	f002 0201 	and.w	r2, r2, #1
 8003c7a:	9203      	str	r2, [sp, #12]
 8003c7c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c7e:	f023 0203 	bic.w	r2, r3, #3
 8003c82:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003c86:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c8a:	f003 0103 	and.w	r1, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c8e:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c90:	0089      	lsls	r1, r1, #2
 8003c92:	260f      	movs	r6, #15
 8003c94:	fa06 fe01 	lsl.w	lr, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c98:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c9c:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ca0:	d015      	beq.n	8003cce <HAL_GPIO_Init+0xb6>
 8003ca2:	4e4c      	ldr	r6, [pc, #304]	; (8003dd4 <HAL_GPIO_Init+0x1bc>)
 8003ca4:	42b0      	cmp	r0, r6
 8003ca6:	f000 808b 	beq.w	8003dc0 <HAL_GPIO_Init+0x1a8>
 8003caa:	4e4b      	ldr	r6, [pc, #300]	; (8003dd8 <HAL_GPIO_Init+0x1c0>)
 8003cac:	42b0      	cmp	r0, r6
 8003cae:	f000 808b 	beq.w	8003dc8 <HAL_GPIO_Init+0x1b0>
 8003cb2:	4e4a      	ldr	r6, [pc, #296]	; (8003ddc <HAL_GPIO_Init+0x1c4>)
 8003cb4:	42b0      	cmp	r0, r6
 8003cb6:	d07d      	beq.n	8003db4 <HAL_GPIO_Init+0x19c>
 8003cb8:	4e49      	ldr	r6, [pc, #292]	; (8003de0 <HAL_GPIO_Init+0x1c8>)
 8003cba:	42b0      	cmp	r0, r6
 8003cbc:	bf0b      	itete	eq
 8003cbe:	f04f 0e04 	moveq.w	lr, #4
 8003cc2:	2605      	movne	r6, #5
 8003cc4:	fa0e f101 	lsleq.w	r1, lr, r1
 8003cc8:	fa06 f101 	lslne.w	r1, r6, r1
 8003ccc:	430d      	orrs	r5, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cce:	6095      	str	r5, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cd0:	4a44      	ldr	r2, [pc, #272]	; (8003de4 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003cd2:	4944      	ldr	r1, [pc, #272]	; (8003de4 <HAL_GPIO_Init+0x1cc>)
        temp = EXTI->IMR;
 8003cd4:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8003cd6:	ea6f 0508 	mvn.w	r5, r8
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cda:	03fe      	lsls	r6, r7, #15
        temp &= ~(iocurrent);
 8003cdc:	bf54      	ite	pl
 8003cde:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003ce0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 8003ce4:	600a      	str	r2, [r1, #0]

        temp = EXTI->EMR;
 8003ce6:	684a      	ldr	r2, [r1, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ce8:	03b9      	lsls	r1, r7, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8003cea:	493e      	ldr	r1, [pc, #248]	; (8003de4 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8003cec:	bf54      	ite	pl
 8003cee:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003cf0:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8003cf4:	604a      	str	r2, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf6:	6889      	ldr	r1, [r1, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003cf8:	4a3a      	ldr	r2, [pc, #232]	; (8003de4 <HAL_GPIO_Init+0x1cc>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cfa:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8003cfc:	bf54      	ite	pl
 8003cfe:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8003d00:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 8003d04:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 8003d06:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d08:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003d0a:	4936      	ldr	r1, [pc, #216]	; (8003de4 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8003d0c:	bf54      	ite	pl
 8003d0e:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8003d10:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8003d14:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 8003d16:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d18:	fa34 f203 	lsrs.w	r2, r4, r3
 8003d1c:	f10c 0c02 	add.w	ip, ip, #2
 8003d20:	d188      	bne.n	8003c34 <HAL_GPIO_Init+0x1c>
  }
}
 8003d22:	b005      	add	sp, #20
 8003d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003d28:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d2a:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d2e:	f04f 0e03 	mov.w	lr, #3
 8003d32:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003d36:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d3a:	fa06 f60c 	lsl.w	r6, r6, ip
 8003d3e:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8003d40:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d42:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8003d46:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d4a:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d4e:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8003d52:	409d      	lsls	r5, r3
 8003d54:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8003d58:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8003d5a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d5c:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d60:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8003d64:	fa05 f50c 	lsl.w	r5, r5, ip
 8003d68:	ea45 050e 	orr.w	r5, r5, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003d6e:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d70:	fa02 f20c 	lsl.w	r2, r2, ip
 8003d74:	f47f af70 	bne.w	8003c58 <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 8003d78:	08dd      	lsrs	r5, r3, #3
 8003d7a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003d7e:	9501      	str	r5, [sp, #4]
 8003d80:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d82:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3u];
 8003d86:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d88:	f003 0e07 	and.w	lr, r3, #7
 8003d8c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003d90:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d92:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d96:	fa06 fe0e 	lsl.w	lr, r6, lr
 8003d9a:	9e00      	ldr	r6, [sp, #0]
 8003d9c:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003da0:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003da2:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003da6:	6235      	str	r5, [r6, #32]
 8003da8:	e756      	b.n	8003c58 <HAL_GPIO_Init+0x40>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003daa:	2103      	movs	r1, #3
 8003dac:	fa01 f10c 	lsl.w	r1, r1, ip
 8003db0:	43c9      	mvns	r1, r1
 8003db2:	e7d2      	b.n	8003d5a <HAL_GPIO_Init+0x142>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003db4:	f04f 0e03 	mov.w	lr, #3
 8003db8:	fa0e f101 	lsl.w	r1, lr, r1
 8003dbc:	430d      	orrs	r5, r1
 8003dbe:	e786      	b.n	8003cce <HAL_GPIO_Init+0xb6>
 8003dc0:	fa0b f101 	lsl.w	r1, fp, r1
 8003dc4:	430d      	orrs	r5, r1
 8003dc6:	e782      	b.n	8003cce <HAL_GPIO_Init+0xb6>
 8003dc8:	f04f 0e02 	mov.w	lr, #2
 8003dcc:	fa0e f101 	lsl.w	r1, lr, r1
 8003dd0:	430d      	orrs	r5, r1
 8003dd2:	e77c      	b.n	8003cce <HAL_GPIO_Init+0xb6>
 8003dd4:	48000400 	.word	0x48000400
 8003dd8:	48000800 	.word	0x48000800
 8003ddc:	48000c00 	.word	0x48000c00
 8003de0:	48001000 	.word	0x48001000
 8003de4:	40010400 	.word	0x40010400
 8003de8:	40021000 	.word	0x40021000

08003dec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dec:	b10a      	cbz	r2, 8003df2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dee:	6181      	str	r1, [r0, #24]
 8003df0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003df2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop

08003df8 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	f000 828c 	beq.w	8004316 <HAL_RCC_OscConfig+0x51e>
{
 8003dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e02:	6803      	ldr	r3, [r0, #0]
 8003e04:	07d9      	lsls	r1, r3, #31
{
 8003e06:	b083      	sub	sp, #12
 8003e08:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e0a:	d54f      	bpl.n	8003eac <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e0c:	49b4      	ldr	r1, [pc, #720]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
 8003e0e:	684a      	ldr	r2, [r1, #4]
 8003e10:	f002 020c 	and.w	r2, r2, #12
 8003e14:	2a04      	cmp	r2, #4
 8003e16:	f000 816d 	beq.w	80040f4 <HAL_RCC_OscConfig+0x2fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e1a:	684a      	ldr	r2, [r1, #4]
 8003e1c:	f002 020c 	and.w	r2, r2, #12
 8003e20:	2a08      	cmp	r2, #8
 8003e22:	f000 8163 	beq.w	80040ec <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e26:	6863      	ldr	r3, [r4, #4]
 8003e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e2c:	d017      	beq.n	8003e5e <HAL_RCC_OscConfig+0x66>
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 819c 	beq.w	800416c <HAL_RCC_OscConfig+0x374>
 8003e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e38:	f000 8258 	beq.w	80042ec <HAL_RCC_OscConfig+0x4f4>
 8003e3c:	4ba8      	ldr	r3, [pc, #672]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e4c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e4e:	4aa4      	ldr	r2, [pc, #656]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
 8003e50:	68a1      	ldr	r1, [r4, #8]
 8003e52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e54:	f023 030f 	bic.w	r3, r3, #15
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e5c:	e00a      	b.n	8003e74 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5e:	4aa0      	ldr	r2, [pc, #640]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
 8003e60:	6813      	ldr	r3, [r2, #0]
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e68:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e6a:	68a1      	ldr	r1, [r4, #8]
 8003e6c:	f023 030f 	bic.w	r3, r3, #15
 8003e70:	430b      	orrs	r3, r1
 8003e72:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fe fa4e 	bl	8002314 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e78:	4f99      	ldr	r7, [pc, #612]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 8003e7a:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e80:	2601      	movs	r6, #1
 8003e82:	e005      	b.n	8003e90 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe fa46 	bl	8002314 <HAL_GetTick>
 8003e88:	1b40      	subs	r0, r0, r5
 8003e8a:	2864      	cmp	r0, #100	; 0x64
 8003e8c:	f200 816a 	bhi.w	8004164 <HAL_RCC_OscConfig+0x36c>
 8003e90:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	fa98 f3a8 	rbit	r3, r8
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	f003 031f 	and.w	r3, r3, #31
 8003ea2:	fa06 f303 	lsl.w	r3, r6, r3
 8003ea6:	4213      	tst	r3, r2
 8003ea8:	d0ec      	beq.n	8003e84 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	079f      	lsls	r7, r3, #30
 8003eae:	d541      	bpl.n	8003f34 <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003eb0:	4a8b      	ldr	r2, [pc, #556]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
 8003eb2:	6851      	ldr	r1, [r2, #4]
 8003eb4:	f011 0f0c 	tst.w	r1, #12
 8003eb8:	f000 80c8 	beq.w	800404c <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ebc:	6851      	ldr	r1, [r2, #4]
 8003ebe:	f001 010c 	and.w	r1, r1, #12
 8003ec2:	2908      	cmp	r1, #8
 8003ec4:	f000 80be 	beq.w	8004044 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ec8:	6922      	ldr	r2, [r4, #16]
 8003eca:	2a00      	cmp	r2, #0
 8003ecc:	f000 81ad 	beq.w	800422a <HAL_RCC_OscConfig+0x432>
 8003ed0:	2501      	movs	r5, #1
 8003ed2:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ede:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ee2:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4f7e      	ldr	r7, [pc, #504]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
        __HAL_RCC_HSI_ENABLE();
 8003ee6:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fa14 	bl	8002314 <HAL_GetTick>
 8003eec:	f04f 0802 	mov.w	r8, #2
 8003ef0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef2:	e005      	b.n	8003f00 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ef4:	f7fe fa0e 	bl	8002314 <HAL_GetTick>
 8003ef8:	1b80      	subs	r0, r0, r6
 8003efa:	2802      	cmp	r0, #2
 8003efc:	f200 8132 	bhi.w	8004164 <HAL_RCC_OscConfig+0x36c>
 8003f00:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	fa98 f3a8 	rbit	r3, r8
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	fa05 f303 	lsl.w	r3, r5, r3
 8003f16:	4213      	tst	r3, r2
 8003f18:	d0ec      	beq.n	8003ef4 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	6839      	ldr	r1, [r7, #0]
 8003f1c:	22f8      	movs	r2, #248	; 0xf8
 8003f1e:	fa92 f2a2 	rbit	r2, r2
 8003f22:	6963      	ldr	r3, [r4, #20]
 8003f24:	fab2 f282 	clz	r2, r2
 8003f28:	4093      	lsls	r3, r2
 8003f2a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	071d      	lsls	r5, r3, #28
 8003f36:	d421      	bmi.n	8003f7c <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f38:	0758      	lsls	r0, r3, #29
 8003f3a:	d54c      	bpl.n	8003fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3c:	4b68      	ldr	r3, [pc, #416]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	00d1      	lsls	r1, r2, #3
 8003f42:	f140 80c1 	bpl.w	80040c8 <HAL_RCC_OscConfig+0x2d0>
    FlagStatus       pwrclkchanged = RESET;
 8003f46:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4d66      	ldr	r5, [pc, #408]	; (80040e4 <HAL_RCC_OscConfig+0x2ec>)
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	05da      	lsls	r2, r3, #23
 8003f50:	f140 80f8 	bpl.w	8004144 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f54:	68e3      	ldr	r3, [r4, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	f000 818d 	beq.w	8004276 <HAL_RCC_OscConfig+0x47e>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 812e 	beq.w	80041be <HAL_RCC_OscConfig+0x3c6>
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	4b5e      	ldr	r3, [pc, #376]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
 8003f66:	6a1a      	ldr	r2, [r3, #32]
 8003f68:	f000 81cd 	beq.w	8004306 <HAL_RCC_OscConfig+0x50e>
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	621a      	str	r2, [r3, #32]
 8003f72:	6a1a      	ldr	r2, [r3, #32]
 8003f74:	f022 0204 	bic.w	r2, r2, #4
 8003f78:	621a      	str	r2, [r3, #32]
 8003f7a:	e181      	b.n	8004280 <HAL_RCC_OscConfig+0x488>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f7c:	69a2      	ldr	r2, [r4, #24]
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d07b      	beq.n	800407a <HAL_RCC_OscConfig+0x282>
 8003f82:	2501      	movs	r5, #1
 8003f84:	fa95 f2a5 	rbit	r2, r5
      __HAL_RCC_LSI_ENABLE();
 8003f88:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8a:	4f55      	ldr	r7, [pc, #340]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_ENABLE();
 8003f8c:	fab2 f282 	clz	r2, r2
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f04f 0802 	mov.w	r8, #2
 8003f98:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8003f9a:	f7fe f9bb 	bl	8002314 <HAL_GetTick>
 8003f9e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa0:	e005      	b.n	8003fae <HAL_RCC_OscConfig+0x1b6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa2:	f7fe f9b7 	bl	8002314 <HAL_GetTick>
 8003fa6:	1b80      	subs	r0, r0, r6
 8003fa8:	2802      	cmp	r0, #2
 8003faa:	f200 80db 	bhi.w	8004164 <HAL_RCC_OscConfig+0x36c>
 8003fae:	fa98 f3a8 	rbit	r3, r8
 8003fb2:	fa98 f3a8 	rbit	r3, r8
 8003fb6:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	fa98 f3a8 	rbit	r3, r8
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa05 f303 	lsl.w	r3, r5, r3
 8003fcc:	4213      	tst	r3, r2
 8003fce:	d0e8      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	0758      	lsls	r0, r3, #29
 8003fd4:	d4b2      	bmi.n	8003f3c <HAL_RCC_OscConfig+0x144>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd6:	69e0      	ldr	r0, [r4, #28]
 8003fd8:	b380      	cbz	r0, 800403c <HAL_RCC_OscConfig+0x244>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fda:	4d41      	ldr	r5, [pc, #260]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
 8003fdc:	686b      	ldr	r3, [r5, #4]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	f000 8171 	beq.w	80042ca <HAL_RCC_OscConfig+0x4d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe8:	2802      	cmp	r0, #2
 8003fea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fee:	f000 8194 	beq.w	800431a <HAL_RCC_OscConfig+0x522>
 8003ff2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ffe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe f984 	bl	8002314 <HAL_GetTick>
 800400c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004010:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004012:	2601      	movs	r6, #1
 8004014:	e005      	b.n	8004022 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004016:	f7fe f97d 	bl	8002314 <HAL_GetTick>
 800401a:	1b00      	subs	r0, r0, r4
 800401c:	2802      	cmp	r0, #2
 800401e:	f200 80a1 	bhi.w	8004164 <HAL_RCC_OscConfig+0x36c>
 8004022:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004026:	682a      	ldr	r2, [r5, #0]
 8004028:	fa97 f3a7 	rbit	r3, r7
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	fa06 f303 	lsl.w	r3, r6, r3
 8004038:	4213      	tst	r3, r2
 800403a:	d1ec      	bne.n	8004016 <HAL_RCC_OscConfig+0x21e>
        }
      }
    }
  }

  return HAL_OK;
 800403c:	2000      	movs	r0, #0
}
 800403e:	b003      	add	sp, #12
 8004040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004044:	6852      	ldr	r2, [r2, #4]
 8004046:	03d6      	lsls	r6, r2, #15
 8004048:	f53f af3e 	bmi.w	8003ec8 <HAL_RCC_OscConfig+0xd0>
 800404c:	2202      	movs	r2, #2
 800404e:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004052:	4923      	ldr	r1, [pc, #140]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
 8004054:	6808      	ldr	r0, [r1, #0]
 8004056:	fa92 f2a2 	rbit	r2, r2
 800405a:	fab2 f282 	clz	r2, r2
 800405e:	f002 021f 	and.w	r2, r2, #31
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f202 	lsl.w	r2, r1, r2
 8004068:	4202      	tst	r2, r0
 800406a:	d05a      	beq.n	8004122 <HAL_RCC_OscConfig+0x32a>
 800406c:	6922      	ldr	r2, [r4, #16]
 800406e:	428a      	cmp	r2, r1
 8004070:	d057      	beq.n	8004122 <HAL_RCC_OscConfig+0x32a>
        return HAL_ERROR;
 8004072:	2001      	movs	r0, #1
}
 8004074:	b003      	add	sp, #12
 8004076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800407a:	2601      	movs	r6, #1
 800407c:	fa96 f1a6 	rbit	r1, r6
      __HAL_RCC_LSI_DISABLE();
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004082:	4f17      	ldr	r7, [pc, #92]	; (80040e0 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_DISABLE();
 8004084:	fab1 f181 	clz	r1, r1
 8004088:	440b      	add	r3, r1
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	f04f 0802 	mov.w	r8, #2
 8004090:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004092:	f7fe f93f 	bl	8002314 <HAL_GetTick>
 8004096:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004098:	e004      	b.n	80040a4 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800409a:	f7fe f93b 	bl	8002314 <HAL_GetTick>
 800409e:	1b40      	subs	r0, r0, r5
 80040a0:	2802      	cmp	r0, #2
 80040a2:	d85f      	bhi.n	8004164 <HAL_RCC_OscConfig+0x36c>
 80040a4:	fa98 f3a8 	rbit	r3, r8
 80040a8:	fa98 f3a8 	rbit	r3, r8
 80040ac:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b2:	fa98 f3a8 	rbit	r3, r8
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	fa06 f303 	lsl.w	r3, r6, r3
 80040c2:	4213      	tst	r3, r2
 80040c4:	d1e9      	bne.n	800409a <HAL_RCC_OscConfig+0x2a2>
 80040c6:	e783      	b.n	8003fd0 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c8:	69da      	ldr	r2, [r3, #28]
 80040ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80040ce:	61da      	str	r2, [r3, #28]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80040da:	f04f 0801 	mov.w	r8, #1
 80040de:	e734      	b.n	8003f4a <HAL_RCC_OscConfig+0x152>
 80040e0:	40021000 	.word	0x40021000
 80040e4:	40007000 	.word	0x40007000
 80040e8:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040ec:	684a      	ldr	r2, [r1, #4]
 80040ee:	03d2      	lsls	r2, r2, #15
 80040f0:	f57f ae99 	bpl.w	8003e26 <HAL_RCC_OscConfig+0x2e>
 80040f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80040f8:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	49b1      	ldr	r1, [pc, #708]	; (80043c4 <HAL_RCC_OscConfig+0x5cc>)
 80040fe:	6808      	ldr	r0, [r1, #0]
 8004100:	fa92 f2a2 	rbit	r2, r2
 8004104:	fab2 f282 	clz	r2, r2
 8004108:	f002 021f 	and.w	r2, r2, #31
 800410c:	2101      	movs	r1, #1
 800410e:	fa01 f202 	lsl.w	r2, r1, r2
 8004112:	4202      	tst	r2, r0
 8004114:	f43f aeca 	beq.w	8003eac <HAL_RCC_OscConfig+0xb4>
 8004118:	6862      	ldr	r2, [r4, #4]
 800411a:	2a00      	cmp	r2, #0
 800411c:	f47f aec6 	bne.w	8003eac <HAL_RCC_OscConfig+0xb4>
 8004120:	e7a7      	b.n	8004072 <HAL_RCC_OscConfig+0x27a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4da8      	ldr	r5, [pc, #672]	; (80043c4 <HAL_RCC_OscConfig+0x5cc>)
 8004124:	22f8      	movs	r2, #248	; 0xf8
 8004126:	6828      	ldr	r0, [r5, #0]
 8004128:	fa92 f2a2 	rbit	r2, r2
 800412c:	fab2 f182 	clz	r1, r2
 8004130:	6962      	ldr	r2, [r4, #20]
 8004132:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8004136:	408a      	lsls	r2, r1
 8004138:	4302      	orrs	r2, r0
 800413a:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413c:	071d      	lsls	r5, r3, #28
 800413e:	f57f aefb 	bpl.w	8003f38 <HAL_RCC_OscConfig+0x140>
 8004142:	e71b      	b.n	8003f7c <HAL_RCC_OscConfig+0x184>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004144:	682b      	ldr	r3, [r5, #0]
 8004146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800414c:	f7fe f8e2 	bl	8002314 <HAL_GetTick>
 8004150:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004152:	682b      	ldr	r3, [r5, #0]
 8004154:	05db      	lsls	r3, r3, #23
 8004156:	f53f aefd 	bmi.w	8003f54 <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fe f8db 	bl	8002314 <HAL_GetTick>
 800415e:	1b80      	subs	r0, r0, r6
 8004160:	2864      	cmp	r0, #100	; 0x64
 8004162:	d9f6      	bls.n	8004152 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8004164:	2003      	movs	r0, #3
}
 8004166:	b003      	add	sp, #12
 8004168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800416c:	4d95      	ldr	r5, [pc, #596]	; (80043c4 <HAL_RCC_OscConfig+0x5cc>)
 800416e:	682b      	ldr	r3, [r5, #0]
 8004170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004174:	602b      	str	r3, [r5, #0]
 8004176:	682b      	ldr	r3, [r5, #0]
 8004178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800417c:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800417e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004180:	68a2      	ldr	r2, [r4, #8]
 8004182:	f023 030f 	bic.w	r3, r3, #15
 8004186:	4313      	orrs	r3, r2
 8004188:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 800418a:	f7fe f8c3 	bl	8002314 <HAL_GetTick>
 800418e:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8004192:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004194:	2701      	movs	r7, #1
 8004196:	e004      	b.n	80041a2 <HAL_RCC_OscConfig+0x3aa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004198:	f7fe f8bc 	bl	8002314 <HAL_GetTick>
 800419c:	1b80      	subs	r0, r0, r6
 800419e:	2864      	cmp	r0, #100	; 0x64
 80041a0:	d8e0      	bhi.n	8004164 <HAL_RCC_OscConfig+0x36c>
 80041a2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041a6:	682a      	ldr	r2, [r5, #0]
 80041a8:	fa98 f3a8 	rbit	r3, r8
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	f003 031f 	and.w	r3, r3, #31
 80041b4:	fa07 f303 	lsl.w	r3, r7, r3
 80041b8:	4213      	tst	r3, r2
 80041ba:	d1ed      	bne.n	8004198 <HAL_RCC_OscConfig+0x3a0>
 80041bc:	e675      	b.n	8003eaa <HAL_RCC_OscConfig+0xb2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041be:	4d81      	ldr	r5, [pc, #516]	; (80043c4 <HAL_RCC_OscConfig+0x5cc>)
 80041c0:	6a2b      	ldr	r3, [r5, #32]
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	622b      	str	r3, [r5, #32]
 80041c8:	6a2b      	ldr	r3, [r5, #32]
 80041ca:	f023 0304 	bic.w	r3, r3, #4
 80041ce:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80041d0:	f7fe f8a0 	bl	8002314 <HAL_GetTick>
 80041d4:	f04f 0902 	mov.w	r9, #2
 80041d8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041da:	2701      	movs	r7, #1
 80041dc:	e013      	b.n	8004206 <HAL_RCC_OscConfig+0x40e>
 80041de:	fa99 f3a9 	rbit	r3, r9
 80041e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80041e4:	fa99 f3a9 	rbit	r3, r9
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	fa07 f303 	lsl.w	r3, r7, r3
 80041f4:	4213      	tst	r3, r2
 80041f6:	d00e      	beq.n	8004216 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fe f88c 	bl	8002314 <HAL_GetTick>
 80041fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8004200:	1b80      	subs	r0, r0, r6
 8004202:	4298      	cmp	r0, r3
 8004204:	d8ae      	bhi.n	8004164 <HAL_RCC_OscConfig+0x36c>
 8004206:	fa99 f3a9 	rbit	r3, r9
 800420a:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0e5      	beq.n	80041de <HAL_RCC_OscConfig+0x3e6>
 8004212:	6a2a      	ldr	r2, [r5, #32]
 8004214:	e7e6      	b.n	80041e4 <HAL_RCC_OscConfig+0x3ec>
    if(pwrclkchanged == SET)
 8004216:	f1b8 0f00 	cmp.w	r8, #0
 800421a:	f43f aedc 	beq.w	8003fd6 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_DISABLE();
 800421e:	4a69      	ldr	r2, [pc, #420]	; (80043c4 <HAL_RCC_OscConfig+0x5cc>)
 8004220:	69d3      	ldr	r3, [r2, #28]
 8004222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004226:	61d3      	str	r3, [r2, #28]
 8004228:	e6d5      	b.n	8003fd6 <HAL_RCC_OscConfig+0x1de>
 800422a:	2601      	movs	r6, #1
 800422c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8004230:	fab3 f383 	clz	r3, r3
 8004234:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004238:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800423c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	4f61      	ldr	r7, [pc, #388]	; (80043c4 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_HSI_DISABLE();
 8004240:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004242:	f7fe f867 	bl	8002314 <HAL_GetTick>
 8004246:	f04f 0802 	mov.w	r8, #2
 800424a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424c:	e004      	b.n	8004258 <HAL_RCC_OscConfig+0x460>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800424e:	f7fe f861 	bl	8002314 <HAL_GetTick>
 8004252:	1b40      	subs	r0, r0, r5
 8004254:	2802      	cmp	r0, #2
 8004256:	d885      	bhi.n	8004164 <HAL_RCC_OscConfig+0x36c>
 8004258:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	fa98 f3a8 	rbit	r3, r8
 8004262:	fab3 f383 	clz	r3, r3
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	fa06 f303 	lsl.w	r3, r6, r3
 800426e:	4213      	tst	r3, r2
 8004270:	d1ed      	bne.n	800424e <HAL_RCC_OscConfig+0x456>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	e65e      	b.n	8003f34 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004276:	4a53      	ldr	r2, [pc, #332]	; (80043c4 <HAL_RCC_OscConfig+0x5cc>)
 8004278:	6a13      	ldr	r3, [r2, #32]
 800427a:	f043 0301 	orr.w	r3, r3, #1
 800427e:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004280:	f7fe f848 	bl	8002314 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004284:	4f4f      	ldr	r7, [pc, #316]	; (80043c4 <HAL_RCC_OscConfig+0x5cc>)
      tickstart = HAL_GetTick();
 8004286:	4605      	mov	r5, r0
 8004288:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800428c:	2601      	movs	r6, #1
 800428e:	e014      	b.n	80042ba <HAL_RCC_OscConfig+0x4c2>
 8004290:	fa99 f3a9 	rbit	r3, r9
 8004294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004296:	fa99 f3a9 	rbit	r3, r9
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	fa06 f303 	lsl.w	r3, r6, r3
 80042a6:	4213      	tst	r3, r2
 80042a8:	d1b5      	bne.n	8004216 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7fe f833 	bl	8002314 <HAL_GetTick>
 80042ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80042b2:	1b40      	subs	r0, r0, r5
 80042b4:	4298      	cmp	r0, r3
 80042b6:	f63f af55 	bhi.w	8004164 <HAL_RCC_OscConfig+0x36c>
 80042ba:	fa99 f3a9 	rbit	r3, r9
 80042be:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0e4      	beq.n	8004290 <HAL_RCC_OscConfig+0x498>
 80042c6:	6a3a      	ldr	r2, [r7, #32]
 80042c8:	e7e5      	b.n	8004296 <HAL_RCC_OscConfig+0x49e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042ca:	2801      	cmp	r0, #1
 80042cc:	f43f aeb7 	beq.w	800403e <HAL_RCC_OscConfig+0x246>
        pll_config = RCC->CFGR;
 80042d0:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042d2:	6a22      	ldr	r2, [r4, #32]
 80042d4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80042d8:	4291      	cmp	r1, r2
 80042da:	f47f aeca 	bne.w	8004072 <HAL_RCC_OscConfig+0x27a>
 80042de:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80042e4:	1a18      	subs	r0, r3, r0
 80042e6:	bf18      	it	ne
 80042e8:	2001      	movne	r0, #1
 80042ea:	e6a8      	b.n	800403e <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042f0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e5a3      	b.n	8003e4e <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004306:	f042 0204 	orr.w	r2, r2, #4
 800430a:	621a      	str	r2, [r3, #32]
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	621a      	str	r2, [r3, #32]
 8004314:	e7b4      	b.n	8004280 <HAL_RCC_OscConfig+0x488>
    return HAL_ERROR;
 8004316:	2001      	movs	r0, #1
}
 8004318:	4770      	bx	lr
 800431a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800431e:	fab3 f383 	clz	r3, r3
 8004322:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004326:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004330:	f7fd fff0 	bl	8002314 <HAL_GetTick>
 8004334:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8004338:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800433a:	2701      	movs	r7, #1
 800433c:	e005      	b.n	800434a <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433e:	f7fd ffe9 	bl	8002314 <HAL_GetTick>
 8004342:	1b80      	subs	r0, r0, r6
 8004344:	2802      	cmp	r0, #2
 8004346:	f63f af0d 	bhi.w	8004164 <HAL_RCC_OscConfig+0x36c>
 800434a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434e:	682a      	ldr	r2, [r5, #0]
 8004350:	fa98 f3a8 	rbit	r3, r8
 8004354:	fab3 f383 	clz	r3, r3
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa07 f303 	lsl.w	r3, r7, r3
 8004360:	4213      	tst	r3, r2
 8004362:	d1ec      	bne.n	800433e <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004364:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8004368:	686a      	ldr	r2, [r5, #4]
 800436a:	430b      	orrs	r3, r1
 800436c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004370:	4313      	orrs	r3, r2
 8004372:	606b      	str	r3, [r5, #4]
 8004374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004378:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800437c:	fab3 f383 	clz	r3, r3
 8004380:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004384:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004388:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800438a:	4d0e      	ldr	r5, [pc, #56]	; (80043c4 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_PLL_ENABLE();
 800438c:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 800438e:	f7fd ffc1 	bl	8002314 <HAL_GetTick>
 8004392:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004396:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004398:	2601      	movs	r6, #1
 800439a:	e005      	b.n	80043a8 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439c:	f7fd ffba 	bl	8002314 <HAL_GetTick>
 80043a0:	1b00      	subs	r0, r0, r4
 80043a2:	2802      	cmp	r0, #2
 80043a4:	f63f aede 	bhi.w	8004164 <HAL_RCC_OscConfig+0x36c>
 80043a8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ac:	682a      	ldr	r2, [r5, #0]
 80043ae:	fa97 f3a7 	rbit	r3, r7
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	fa06 f303 	lsl.w	r3, r6, r3
 80043be:	4213      	tst	r3, r2
 80043c0:	d0ec      	beq.n	800439c <HAL_RCC_OscConfig+0x5a4>
 80043c2:	e63b      	b.n	800403c <HAL_RCC_OscConfig+0x244>
 80043c4:	40021000 	.word	0x40021000

080043c8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043c8:	2800      	cmp	r0, #0
 80043ca:	f000 80c8 	beq.w	800455e <HAL_RCC_ClockConfig+0x196>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043ce:	4a6f      	ldr	r2, [pc, #444]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	6813      	ldr	r3, [r2, #0]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	428b      	cmp	r3, r1
{
 80043d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043dc:	460d      	mov	r5, r1
 80043de:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043e0:	d20c      	bcs.n	80043fc <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	f023 0307 	bic.w	r3, r3, #7
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ec:	6813      	ldr	r3, [r2, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	428b      	cmp	r3, r1
 80043f4:	d002      	beq.n	80043fc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80043f6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 80043f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	079f      	lsls	r7, r3, #30
 8004400:	d506      	bpl.n	8004410 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004402:	4963      	ldr	r1, [pc, #396]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004404:	68a0      	ldr	r0, [r4, #8]
 8004406:	684a      	ldr	r2, [r1, #4]
 8004408:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800440c:	4302      	orrs	r2, r0
 800440e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004410:	07de      	lsls	r6, r3, #31
 8004412:	d52f      	bpl.n	8004474 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004414:	6861      	ldr	r1, [r4, #4]
 8004416:	2901      	cmp	r1, #1
 8004418:	f000 80a3 	beq.w	8004562 <HAL_RCC_ClockConfig+0x19a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441c:	2902      	cmp	r1, #2
 800441e:	f000 808b 	beq.w	8004538 <HAL_RCC_ClockConfig+0x170>
 8004422:	2202      	movs	r2, #2
 8004424:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004428:	4b59      	ldr	r3, [pc, #356]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	fa92 f2a2 	rbit	r2, r2
 8004430:	fab2 f282 	clz	r2, r2
 8004434:	f002 021f 	and.w	r2, r2, #31
 8004438:	2301      	movs	r3, #1
 800443a:	fa03 f202 	lsl.w	r2, r3, r2
 800443e:	4202      	tst	r2, r0
 8004440:	d0d9      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004442:	4e53      	ldr	r6, [pc, #332]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004444:	6873      	ldr	r3, [r6, #4]
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	430b      	orrs	r3, r1
 800444c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800444e:	f7fd ff61 	bl	8002314 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004452:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004456:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004458:	e005      	b.n	8004466 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800445a:	f7fd ff5b 	bl	8002314 <HAL_GetTick>
 800445e:	1bc0      	subs	r0, r0, r7
 8004460:	4540      	cmp	r0, r8
 8004462:	f200 8090 	bhi.w	8004586 <HAL_RCC_ClockConfig+0x1be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	6873      	ldr	r3, [r6, #4]
 8004468:	6862      	ldr	r2, [r4, #4]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004472:	d1f2      	bne.n	800445a <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004474:	4a45      	ldr	r2, [pc, #276]	; (800458c <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	6813      	ldr	r3, [r2, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	42ab      	cmp	r3, r5
 800447e:	d909      	bls.n	8004494 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004480:	6813      	ldr	r3, [r2, #0]
 8004482:	f023 0307 	bic.w	r3, r3, #7
 8004486:	432b      	orrs	r3, r5
 8004488:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	6813      	ldr	r3, [r2, #0]
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	42ab      	cmp	r3, r5
 8004492:	d1b0      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	6823      	ldr	r3, [r4, #0]
 8004496:	0758      	lsls	r0, r3, #29
 8004498:	d506      	bpl.n	80044a8 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800449a:	493d      	ldr	r1, [pc, #244]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800449c:	68e0      	ldr	r0, [r4, #12]
 800449e:	684a      	ldr	r2, [r1, #4]
 80044a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044a4:	4302      	orrs	r2, r0
 80044a6:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a8:	0719      	lsls	r1, r3, #28
 80044aa:	d507      	bpl.n	80044bc <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ac:	4a38      	ldr	r2, [pc, #224]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 80044ae:	6921      	ldr	r1, [r4, #16]
 80044b0:	6853      	ldr	r3, [r2, #4]
 80044b2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80044b6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044ba:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80044bc:	4934      	ldr	r1, [pc, #208]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 80044be:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044c0:	f002 030c 	and.w	r3, r2, #12
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d017      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044c8:	4932      	ldr	r1, [pc, #200]	; (8004594 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 80044cc:	22f0      	movs	r2, #240	; 0xf0
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	fa92 f2a2 	rbit	r2, r2
 80044d4:	fab2 f282 	clz	r2, r2
 80044d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044dc:	40d3      	lsrs	r3, r2
 80044de:	4a2e      	ldr	r2, [pc, #184]	; (8004598 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 80044e0:	482e      	ldr	r0, [pc, #184]	; (800459c <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044e2:	5cd3      	ldrb	r3, [r2, r3]
 80044e4:	4a2e      	ldr	r2, [pc, #184]	; (80045a0 <HAL_RCC_ClockConfig+0x1d8>)
  HAL_InitTick (uwTickPrio);
 80044e6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044e8:	fa21 f303 	lsr.w	r3, r1, r3
 80044ec:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80044ee:	f7fd fecf 	bl	8002290 <HAL_InitTick>
  return HAL_OK;
 80044f2:	2000      	movs	r0, #0
}
 80044f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044f8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80044fc:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004500:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 8004504:	fab3 f383 	clz	r3, r3
 8004508:	4c26      	ldr	r4, [pc, #152]	; (80045a4 <HAL_RCC_ClockConfig+0x1dc>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800450a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800450c:	fa20 f303 	lsr.w	r3, r0, r3
 8004510:	200f      	movs	r0, #15
 8004512:	5ce3      	ldrb	r3, [r4, r3]
 8004514:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004518:	fab0 f080 	clz	r0, r0
 800451c:	f001 010f 	and.w	r1, r1, #15
 8004520:	40c1      	lsrs	r1, r0
 8004522:	4c21      	ldr	r4, [pc, #132]	; (80045a8 <HAL_RCC_ClockConfig+0x1e0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004524:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004526:	5c60      	ldrb	r0, [r4, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004528:	bf4a      	itet	mi
 800452a:	491a      	ldrmi	r1, [pc, #104]	; (8004594 <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800452c:	491f      	ldrpl	r1, [pc, #124]	; (80045ac <HAL_RCC_ClockConfig+0x1e4>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800452e:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004532:	fb03 f101 	mul.w	r1, r3, r1
 8004536:	e7c8      	b.n	80044ca <HAL_RCC_ClockConfig+0x102>
 8004538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800453c:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 8004542:	6810      	ldr	r0, [r2, #0]
 8004544:	fa93 f3a3 	rbit	r3, r3
 8004548:	fab3 f383 	clz	r3, r3
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	2201      	movs	r2, #1
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	4203      	tst	r3, r0
 8004558:	f47f af73 	bne.w	8004442 <HAL_RCC_ClockConfig+0x7a>
 800455c:	e74b      	b.n	80043f6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800455e:	2001      	movs	r0, #1
}
 8004560:	4770      	bx	lr
 8004562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004566:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456a:	4b09      	ldr	r3, [pc, #36]	; (8004590 <HAL_RCC_ClockConfig+0x1c8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	fa92 f2a2 	rbit	r2, r2
 8004572:	fab2 f282 	clz	r2, r2
 8004576:	f002 021f 	and.w	r2, r2, #31
 800457a:	fa01 f202 	lsl.w	r2, r1, r2
 800457e:	421a      	tst	r2, r3
 8004580:	f47f af5f 	bne.w	8004442 <HAL_RCC_ClockConfig+0x7a>
 8004584:	e737      	b.n	80043f6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8004586:	2003      	movs	r0, #3
 8004588:	e736      	b.n	80043f8 <HAL_RCC_ClockConfig+0x30>
 800458a:	bf00      	nop
 800458c:	40022000 	.word	0x40022000
 8004590:	40021000 	.word	0x40021000
 8004594:	007a1200 	.word	0x007a1200
 8004598:	0800966c 	.word	0x0800966c
 800459c:	2000000c 	.word	0x2000000c
 80045a0:	20000004 	.word	0x20000004
 80045a4:	08009684 	.word	0x08009684
 80045a8:	08009694 	.word	0x08009694
 80045ac:	003d0900 	.word	0x003d0900

080045b0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80045b0:	4915      	ldr	r1, [pc, #84]	; (8004608 <HAL_RCC_GetSysClockFreq+0x58>)
 80045b2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80045b4:	f003 020c 	and.w	r2, r3, #12
 80045b8:	2a08      	cmp	r2, #8
 80045ba:	d001      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80045bc:	4813      	ldr	r0, [pc, #76]	; (800460c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80045be:	4770      	bx	lr
{
 80045c0:	b410      	push	{r4}
 80045c2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045c6:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045ca:	fab2 f282 	clz	r2, r2
 80045ce:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80045d2:	4c0f      	ldr	r4, [pc, #60]	; (8004610 <HAL_RCC_GetSysClockFreq+0x60>)
 80045d4:	40d0      	lsrs	r0, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045d6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045d8:	5c20      	ldrb	r0, [r4, r0]
 80045da:	210f      	movs	r1, #15
 80045dc:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045e0:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045e2:	fab1 f181 	clz	r1, r1
 80045e6:	f002 020f 	and.w	r2, r2, #15
 80045ea:	4c0a      	ldr	r4, [pc, #40]	; (8004614 <HAL_RCC_GetSysClockFreq+0x64>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045ec:	bf4c      	ite	mi
 80045ee:	4b07      	ldrmi	r3, [pc, #28]	; (800460c <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045f0:	4b09      	ldrpl	r3, [pc, #36]	; (8004618 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045f2:	fa22 f201 	lsr.w	r2, r2, r1
 80045f6:	5ca2      	ldrb	r2, [r4, r2]
}
 80045f8:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045fc:	bf48      	it	mi
 80045fe:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004602:	fb03 f000 	mul.w	r0, r3, r0
}
 8004606:	4770      	bx	lr
 8004608:	40021000 	.word	0x40021000
 800460c:	007a1200 	.word	0x007a1200
 8004610:	08009684 	.word	0x08009684
 8004614:	08009694 	.word	0x08009694
 8004618:	003d0900 	.word	0x003d0900

0800461c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <HAL_RCC_GetPCLK1Freq+0x24>)
 800461e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	fa92 f2a2 	rbit	r2, r2
 8004628:	fab2 f282 	clz	r2, r2
 800462c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004630:	4904      	ldr	r1, [pc, #16]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8004632:	4805      	ldr	r0, [pc, #20]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004634:	40d3      	lsrs	r3, r2
 8004636:	6800      	ldr	r0, [r0, #0]
 8004638:	5ccb      	ldrb	r3, [r1, r3]
}    
 800463a:	40d8      	lsrs	r0, r3
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	0800967c 	.word	0x0800967c
 8004648:	20000004 	.word	0x20000004

0800464c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800464c:	4b08      	ldr	r3, [pc, #32]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x24>)
 800464e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	fa92 f2a2 	rbit	r2, r2
 8004658:	fab2 f282 	clz	r2, r2
 800465c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004660:	4904      	ldr	r1, [pc, #16]	; (8004674 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8004662:	4805      	ldr	r0, [pc, #20]	; (8004678 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004664:	40d3      	lsrs	r3, r2
 8004666:	6800      	ldr	r0, [r0, #0]
 8004668:	5ccb      	ldrb	r3, [r1, r3]
} 
 800466a:	40d8      	lsrs	r0, r3
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	0800967c 	.word	0x0800967c
 8004678:	20000004 	.word	0x20000004

0800467c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800467c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004680:	6803      	ldr	r3, [r0, #0]
 8004682:	03dd      	lsls	r5, r3, #15
{
 8004684:	b083      	sub	sp, #12
 8004686:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004688:	d540      	bpl.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800468a:	4b84      	ldr	r3, [pc, #528]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	00d0      	lsls	r0, r2, #3
 8004690:	f140 80ba 	bpl.w	8004808 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004694:	4e82      	ldr	r6, [pc, #520]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004696:	6833      	ldr	r3, [r6, #0]
 8004698:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 800469a:	f04f 0500 	mov.w	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469e:	f140 80c3 	bpl.w	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046a2:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800489c <HAL_RCCEx_PeriphCLKConfig+0x220>
 80046a6:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046aa:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80046ae:	d020      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046b0:	6861      	ldr	r1, [r4, #4]
 80046b2:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d01c      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ba:	f8d8 1020 	ldr.w	r1, [r8, #32]
 80046be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046c2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80046c6:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ca:	4f76      	ldr	r7, [pc, #472]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80046cc:	fab2 f282 	clz	r2, r2
 80046d0:	443a      	add	r2, r7
 80046d2:	0092      	lsls	r2, r2, #2
 80046d4:	2601      	movs	r6, #1
 80046d6:	6016      	str	r6, [r2, #0]
 80046d8:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	443b      	add	r3, r7
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046e8:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 80046ea:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046ee:	f100 80af 	bmi.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046f2:	6861      	ldr	r1, [r4, #4]
 80046f4:	4a69      	ldr	r2, [pc, #420]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80046f6:	6a13      	ldr	r3, [r2, #32]
 80046f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004700:	b11d      	cbz	r5, 800470a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004702:	69d3      	ldr	r3, [r2, #28]
 8004704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004708:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800470a:	6823      	ldr	r3, [r4, #0]
 800470c:	07df      	lsls	r7, r3, #31
 800470e:	d506      	bpl.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004710:	4962      	ldr	r1, [pc, #392]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004712:	68a0      	ldr	r0, [r4, #8]
 8004714:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004716:	f022 0203 	bic.w	r2, r2, #3
 800471a:	4302      	orrs	r2, r0
 800471c:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800471e:	079e      	lsls	r6, r3, #30
 8004720:	d506      	bpl.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004722:	495e      	ldr	r1, [pc, #376]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004724:	68e0      	ldr	r0, [r4, #12]
 8004726:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004728:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800472c:	4302      	orrs	r2, r0
 800472e:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004730:	075d      	lsls	r5, r3, #29
 8004732:	d506      	bpl.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004734:	4959      	ldr	r1, [pc, #356]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004736:	6920      	ldr	r0, [r4, #16]
 8004738:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800473a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800473e:	4302      	orrs	r2, r0
 8004740:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004742:	0698      	lsls	r0, r3, #26
 8004744:	d506      	bpl.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004746:	4955      	ldr	r1, [pc, #340]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004748:	69e0      	ldr	r0, [r4, #28]
 800474a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800474c:	f022 0210 	bic.w	r2, r2, #16
 8004750:	4302      	orrs	r2, r0
 8004752:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004754:	0399      	lsls	r1, r3, #14
 8004756:	d506      	bpl.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004758:	4950      	ldr	r1, [pc, #320]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800475a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800475c:	684a      	ldr	r2, [r1, #4]
 800475e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004762:	4302      	orrs	r2, r0
 8004764:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004766:	065a      	lsls	r2, r3, #25
 8004768:	d506      	bpl.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800476a:	494c      	ldr	r1, [pc, #304]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800476c:	6a20      	ldr	r0, [r4, #32]
 800476e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004770:	f022 0220 	bic.w	r2, r2, #32
 8004774:	4302      	orrs	r2, r0
 8004776:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004778:	071f      	lsls	r7, r3, #28
 800477a:	d506      	bpl.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800477c:	4947      	ldr	r1, [pc, #284]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800477e:	6960      	ldr	r0, [r4, #20]
 8004780:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004782:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004786:	4302      	orrs	r2, r0
 8004788:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800478a:	06de      	lsls	r6, r3, #27
 800478c:	d506      	bpl.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800478e:	4943      	ldr	r1, [pc, #268]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004790:	69a0      	ldr	r0, [r4, #24]
 8004792:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004794:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004798:	4302      	orrs	r2, r0
 800479a:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800479c:	059d      	lsls	r5, r3, #22
 800479e:	d506      	bpl.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047a0:	493e      	ldr	r1, [pc, #248]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80047a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80047a4:	684a      	ldr	r2, [r1, #4]
 80047a6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80047aa:	4302      	orrs	r2, r0
 80047ac:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047ae:	0618      	lsls	r0, r3, #24
 80047b0:	d506      	bpl.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047b2:	493a      	ldr	r1, [pc, #232]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80047b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80047b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80047b8:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80047bc:	4302      	orrs	r2, r0
 80047be:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047c0:	05d9      	lsls	r1, r3, #23
 80047c2:	d506      	bpl.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047c4:	4935      	ldr	r1, [pc, #212]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80047c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80047c8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80047ca:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 80047ce:	4302      	orrs	r2, r0
 80047d0:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047d2:	04da      	lsls	r2, r3, #19
 80047d4:	d506      	bpl.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047d6:	4931      	ldr	r1, [pc, #196]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80047d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80047da:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80047dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047e0:	4302      	orrs	r2, r0
 80047e2:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80047e4:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 80047e8:	d103      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80047ea:	4618      	mov	r0, r3
}
 80047ec:	b003      	add	sp, #12
 80047ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80047f2:	4a2a      	ldr	r2, [pc, #168]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80047f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80047f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 80047fc:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80047fe:	430b      	orrs	r3, r1
 8004800:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004802:	b003      	add	sp, #12
 8004804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004808:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480a:	4e25      	ldr	r6, [pc, #148]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800480c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004810:	61da      	str	r2, [r3, #28]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 8004820:	f04f 0501 	mov.w	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004824:	f53f af3d 	bmi.w	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004830:	f7fd fd70 	bl	8002314 <HAL_GetTick>
 8004834:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	6833      	ldr	r3, [r6, #0]
 8004838:	05da      	lsls	r2, r3, #23
 800483a:	f53f af32 	bmi.w	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483e:	f7fd fd69 	bl	8002314 <HAL_GetTick>
 8004842:	1bc0      	subs	r0, r0, r7
 8004844:	2864      	cmp	r0, #100	; 0x64
 8004846:	d9f6      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 8004848:	2003      	movs	r0, #3
}
 800484a:	b003      	add	sp, #12
 800484c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8004850:	f7fd fd60 	bl	8002314 <HAL_GetTick>
 8004854:	f04f 0902 	mov.w	r9, #2
 8004858:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	e015      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800485c:	fa99 f3a9 	rbit	r3, r9
 8004860:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004864:	fa99 f3a9 	rbit	r3, r9
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa06 f303 	lsl.w	r3, r6, r3
 8004874:	4213      	tst	r3, r2
 8004876:	f47f af3c 	bne.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487a:	f7fd fd4b 	bl	8002314 <HAL_GetTick>
 800487e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004882:	1bc0      	subs	r0, r0, r7
 8004884:	4298      	cmp	r0, r3
 8004886:	d8df      	bhi.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004888:	fa99 f3a9 	rbit	r3, r9
 800488c:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0e3      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8004894:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004898:	e7e4      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
 80048a0:	40007000 	.word	0x40007000
 80048a4:	10908100 	.word	0x10908100

080048a8 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d077      	beq.n	800499c <HAL_SPI_Init+0xf4>
{
 80048ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80048b2:	4604      	mov	r4, r0
 80048b4:	2e00      	cmp	r6, #0
 80048b6:	d058      	beq.n	800496a <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048b8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048be:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048c2:	2200      	movs	r2, #0
 80048c4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80048c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d059      	beq.n	8004982 <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048ce:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048d0:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80048d2:	2302      	movs	r3, #2
 80048d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80048d8:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048da:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80048de:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80048e2:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048e4:	d947      	bls.n	8004976 <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048e6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80048ea:	d159      	bne.n	80049a0 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048ee:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048f0:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 80048f4:	68a3      	ldr	r3, [r4, #8]
 80048f6:	6a27      	ldr	r7, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048f8:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048fc:	6862      	ldr	r2, [r4, #4]
 80048fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004902:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8004906:	431a      	orrs	r2, r3
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	431a      	orrs	r2, r3
 8004910:	6963      	ldr	r3, [r4, #20]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	f006 0c10 	and.w	ip, r6, #16
 8004922:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004926:	69a6      	ldr	r6, [r4, #24]
 8004928:	69e3      	ldr	r3, [r4, #28]
 800492a:	f003 0838 	and.w	r8, r3, #56	; 0x38
 800492e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8004932:	4313      	orrs	r3, r2
 8004934:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8004938:	ea43 0308 	orr.w	r3, r3, r8
 800493c:	433b      	orrs	r3, r7
 800493e:	432b      	orrs	r3, r5
 8004940:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004942:	0c33      	lsrs	r3, r6, #16
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	ea4e 0303 	orr.w	r3, lr, r3
 800494c:	ea43 030c 	orr.w	r3, r3, ip
 8004950:	4303      	orrs	r3, r0
 8004952:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004954:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004956:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800495c:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800495e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004960:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004962:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496a:	6843      	ldr	r3, [r0, #4]
 800496c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004970:	d0a5      	beq.n	80048be <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004972:	61c6      	str	r6, [r0, #28]
 8004974:	e7a3      	b.n	80048be <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004976:	d00b      	beq.n	8004990 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004978:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800497c:	2500      	movs	r5, #0
 800497e:	62a5      	str	r5, [r4, #40]	; 0x28
 8004980:	e7b8      	b.n	80048f4 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8004982:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004986:	4620      	mov	r0, r4
 8004988:	f7fc ff5a 	bl	8001840 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800498c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800498e:	e79e      	b.n	80048ce <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004992:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004996:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 800499a:	e7ab      	b.n	80048f4 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 800499c:	2001      	movs	r0, #1
}
 800499e:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049a0:	2000      	movs	r0, #0
 80049a2:	e7eb      	b.n	800497c <HAL_SPI_Init+0xd4>

080049a4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a4:	6a03      	ldr	r3, [r0, #32]
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ac:	6a03      	ldr	r3, [r0, #32]
{
 80049ae:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049b2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049ba:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80049be:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049c0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80049c2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80049c6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049c8:	4d13      	ldr	r5, [pc, #76]	; (8004a18 <TIM_OC1_SetConfig+0x74>)
 80049ca:	42a8      	cmp	r0, r5
 80049cc:	d00f      	beq.n	80049ee <TIM_OC1_SetConfig+0x4a>
 80049ce:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80049d2:	42a8      	cmp	r0, r5
 80049d4:	d00b      	beq.n	80049ee <TIM_OC1_SetConfig+0x4a>
 80049d6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80049da:	42a8      	cmp	r0, r5
 80049dc:	d007      	beq.n	80049ee <TIM_OC1_SetConfig+0x4a>
 80049de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049e2:	42a8      	cmp	r0, r5
 80049e4:	d003      	beq.n	80049ee <TIM_OC1_SetConfig+0x4a>
 80049e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80049ea:	42a8      	cmp	r0, r5
 80049ec:	d10d      	bne.n	8004a0a <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049ee:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80049f0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80049f4:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049fa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80049fe:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a02:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a06:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a0a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a0c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004a0e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004a10:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8004a12:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004a14:	6203      	str	r3, [r0, #32]
}
 8004a16:	4770      	bx	lr
 8004a18:	40012c00 	.word	0x40012c00

08004a1c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a1c:	6a03      	ldr	r3, [r0, #32]
 8004a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a22:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a24:	6a03      	ldr	r3, [r0, #32]
{
 8004a26:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a32:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004a36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a38:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004a3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a42:	4d15      	ldr	r5, [pc, #84]	; (8004a98 <TIM_OC3_SetConfig+0x7c>)
 8004a44:	42a8      	cmp	r0, r5
 8004a46:	d010      	beq.n	8004a6a <TIM_OC3_SetConfig+0x4e>
 8004a48:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004a4c:	42a8      	cmp	r0, r5
 8004a4e:	d00c      	beq.n	8004a6a <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a50:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004a54:	42a8      	cmp	r0, r5
 8004a56:	d00f      	beq.n	8004a78 <TIM_OC3_SetConfig+0x5c>
 8004a58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a5c:	42a8      	cmp	r0, r5
 8004a5e:	d00b      	beq.n	8004a78 <TIM_OC3_SetConfig+0x5c>
 8004a60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a64:	42a8      	cmp	r0, r5
 8004a66:	d10f      	bne.n	8004a88 <TIM_OC3_SetConfig+0x6c>
 8004a68:	e006      	b.n	8004a78 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a6a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a70:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a78:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a7c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a80:	ea46 0c05 	orr.w	ip, r6, r5
 8004a84:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a88:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a8a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004a8c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004a8e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8004a90:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004a92:	6203      	str	r3, [r0, #32]
}
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40012c00 	.word	0x40012c00

08004a9c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	f000 8081 	beq.w	8004ba4 <HAL_TIM_PWM_Init+0x108>
{
 8004aa2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d06d      	beq.n	8004b8e <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab2:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ab4:	493c      	ldr	r1, [pc, #240]	; (8004ba8 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004abc:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004abe:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac0:	d051      	beq.n	8004b66 <HAL_TIM_PWM_Init+0xca>
 8004ac2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004ac6:	d021      	beq.n	8004b0c <HAL_TIM_PWM_Init+0x70>
 8004ac8:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004acc:	428a      	cmp	r2, r1
 8004ace:	d01d      	beq.n	8004b0c <HAL_TIM_PWM_Init+0x70>
 8004ad0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ad4:	428a      	cmp	r2, r1
 8004ad6:	d019      	beq.n	8004b0c <HAL_TIM_PWM_Init+0x70>
 8004ad8:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8004adc:	428a      	cmp	r2, r1
 8004ade:	d042      	beq.n	8004b66 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae0:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8004ae4:	428a      	cmp	r2, r1
 8004ae6:	d057      	beq.n	8004b98 <HAL_TIM_PWM_Init+0xfc>
 8004ae8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004aec:	428a      	cmp	r2, r1
 8004aee:	d053      	beq.n	8004b98 <HAL_TIM_PWM_Init+0xfc>
 8004af0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004af4:	428a      	cmp	r2, r1
 8004af6:	d04f      	beq.n	8004b98 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af8:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004afa:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b00:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004b02:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004b04:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b06:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b08:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b0a:	e010      	b.n	8004b2e <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8004b0c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b14:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b1a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b22:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b24:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004b26:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004b28:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b2a:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b2c:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b32:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004b3a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004b3e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004b42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004b46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004b52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b56:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004b5a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004b5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004b62:	2000      	movs	r0, #0
}
 8004b64:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004b66:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b68:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b6e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b74:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b76:	69a1      	ldr	r1, [r4, #24]
 8004b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b7c:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004b7e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b80:	68e3      	ldr	r3, [r4, #12]
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004b88:	6963      	ldr	r3, [r4, #20]
 8004b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b8c:	e7cf      	b.n	8004b2e <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8004b8e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004b92:	f7fc fffd 	bl	8001b90 <HAL_TIM_PWM_MspInit>
 8004b96:	e78c      	b.n	8004ab2 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b98:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b9a:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ba0:	4303      	orrs	r3, r0
 8004ba2:	e7e9      	b.n	8004b78 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8004ba4:	2001      	movs	r0, #1
}
 8004ba6:	4770      	bx	lr
 8004ba8:	40012c00 	.word	0x40012c00

08004bac <HAL_TIM_OC_DelayElapsedCallback>:
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop

08004bb0 <HAL_TIM_IC_CaptureCallback>:
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop

08004bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop

08004bb8 <HAL_TIM_TriggerCallback>:
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bbc:	6803      	ldr	r3, [r0, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	0791      	lsls	r1, r2, #30
{
 8004bc2:	b510      	push	{r4, lr}
 8004bc4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bc6:	d502      	bpl.n	8004bce <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	0792      	lsls	r2, r2, #30
 8004bcc:	d468      	bmi.n	8004ca0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bce:	691a      	ldr	r2, [r3, #16]
 8004bd0:	0752      	lsls	r2, r2, #29
 8004bd2:	d502      	bpl.n	8004bda <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	0750      	lsls	r0, r2, #29
 8004bd8:	d44f      	bmi.n	8004c7a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	0711      	lsls	r1, r2, #28
 8004bde:	d502      	bpl.n	8004be6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	0712      	lsls	r2, r2, #28
 8004be4:	d437      	bmi.n	8004c56 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	06d0      	lsls	r0, r2, #27
 8004bea:	d502      	bpl.n	8004bf2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	06d1      	lsls	r1, r2, #27
 8004bf0:	d41e      	bmi.n	8004c30 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	07d2      	lsls	r2, r2, #31
 8004bf6:	d502      	bpl.n	8004bfe <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	07d0      	lsls	r0, r2, #31
 8004bfc:	d469      	bmi.n	8004cd2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bfe:	691a      	ldr	r2, [r3, #16]
 8004c00:	0611      	lsls	r1, r2, #24
 8004c02:	d502      	bpl.n	8004c0a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	0612      	lsls	r2, r2, #24
 8004c08:	d46b      	bmi.n	8004ce2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	05d0      	lsls	r0, r2, #23
 8004c0e:	d502      	bpl.n	8004c16 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	0611      	lsls	r1, r2, #24
 8004c14:	d46d      	bmi.n	8004cf2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	0652      	lsls	r2, r2, #25
 8004c1a:	d502      	bpl.n	8004c22 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	0650      	lsls	r0, r2, #25
 8004c20:	d46f      	bmi.n	8004d02 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	0691      	lsls	r1, r2, #26
 8004c26:	d502      	bpl.n	8004c2e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	0692      	lsls	r2, r2, #26
 8004c2c:	d449      	bmi.n	8004cc2 <HAL_TIM_IRQHandler+0x106>
}
 8004c2e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c30:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c34:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c36:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c38:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004c40:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c42:	d16f      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c44:	f7ff ffb2 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7ff ffb3 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c50:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	7722      	strb	r2, [r4, #28]
 8004c54:	e7cd      	b.n	8004bf2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c56:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c5c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004c64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c66:	d15a      	bne.n	8004d1e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c68:	f7ff ffa0 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f7ff ffa1 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c74:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c76:	7722      	strb	r2, [r4, #28]
 8004c78:	e7b5      	b.n	8004be6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c7a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c7e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c80:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c82:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c8c:	d144      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	f7ff ff8d 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7ff ff8e 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c98:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c9a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9c:	7722      	strb	r2, [r4, #28]
 8004c9e:	e79c      	b.n	8004bda <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ca4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ca6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ca8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	0799      	lsls	r1, r3, #30
 8004cae:	d130      	bne.n	8004d12 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb0:	f7ff ff7c 	bl	8004bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f7ff ff7d 	bl	8004bb4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cbc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	7722      	strb	r2, [r4, #28]
 8004cc0:	e785      	b.n	8004bce <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cc2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004cc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cc8:	611a      	str	r2, [r3, #16]
}
 8004cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004cce:	f000 ba2d 	b.w	800512c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd2:	f06f 0201 	mvn.w	r2, #1
 8004cd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f7fc fb59 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cde:	6823      	ldr	r3, [r4, #0]
 8004ce0:	e78d      	b.n	8004bfe <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ce2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f000 fa21 	bl	8005130 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	e78b      	b.n	8004c0a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cf6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f000 fa1b 	bl	8005134 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	e789      	b.n	8004c16 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d06:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f7ff ff55 	bl	8004bb8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	e787      	b.n	8004c22 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004d12:	f7ff ff4d 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004d16:	e7d0      	b.n	8004cba <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d18:	f7ff ff4a 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e7bc      	b.n	8004c98 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	f7ff ff47 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004d22:	e7a6      	b.n	8004c72 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d24:	f7ff ff44 	bl	8004bb0 <HAL_TIM_IC_CaptureCallback>
 8004d28:	e791      	b.n	8004c4e <HAL_TIM_IRQHandler+0x92>
 8004d2a:	bf00      	nop

08004d2c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2c:	6a03      	ldr	r3, [r0, #32]
 8004d2e:	f023 0310 	bic.w	r3, r3, #16
 8004d32:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004d34:	6a03      	ldr	r3, [r0, #32]
{
 8004d36:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8004d38:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004d3a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d3e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004d42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004d4c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d54:	4d14      	ldr	r5, [pc, #80]	; (8004da8 <TIM_OC2_SetConfig+0x7c>)
 8004d56:	42a8      	cmp	r0, r5
 8004d58:	d010      	beq.n	8004d7c <TIM_OC2_SetConfig+0x50>
 8004d5a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004d5e:	42a8      	cmp	r0, r5
 8004d60:	d00c      	beq.n	8004d7c <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d62:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004d66:	42a8      	cmp	r0, r5
 8004d68:	d00f      	beq.n	8004d8a <TIM_OC2_SetConfig+0x5e>
 8004d6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d6e:	42a8      	cmp	r0, r5
 8004d70:	d00b      	beq.n	8004d8a <TIM_OC2_SetConfig+0x5e>
 8004d72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d76:	42a8      	cmp	r0, r5
 8004d78:	d10f      	bne.n	8004d9a <TIM_OC2_SetConfig+0x6e>
 8004d7a:	e006      	b.n	8004d8a <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d7c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d82:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d8a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d8e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d92:	ea46 0c05 	orr.w	ip, r6, r5
 8004d96:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004d9a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004d9c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004d9e:	6182      	str	r2, [r0, #24]
}
 8004da0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8004da2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004da4:	6203      	str	r3, [r0, #32]
}
 8004da6:	4770      	bx	lr
 8004da8:	40012c00 	.word	0x40012c00

08004dac <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004dac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	f000 812b 	beq.w	800500c <HAL_TIM_PWM_ConfigChannel+0x260>
 8004db6:	2301      	movs	r3, #1
{
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4604      	mov	r4, r0
 8004dbc:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8004dbe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004dc2:	2a14      	cmp	r2, #20
 8004dc4:	d816      	bhi.n	8004df4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004dc6:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004dca:	005d      	.short	0x005d
 8004dcc:	00150015 	.word	0x00150015
 8004dd0:	00720015 	.word	0x00720015
 8004dd4:	00150015 	.word	0x00150015
 8004dd8:	00880015 	.word	0x00880015
 8004ddc:	00150015 	.word	0x00150015
 8004de0:	009d0015 	.word	0x009d0015
 8004de4:	00150015 	.word	0x00150015
 8004de8:	00e00015 	.word	0x00e00015
 8004dec:	00150015 	.word	0x00150015
 8004df0:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 8004df4:	2300      	movs	r3, #0
 8004df6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004dfa:	2001      	movs	r0, #1
}
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004dfe:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e00:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e02:	6a1a      	ldr	r2, [r3, #32]
 8004e04:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004e08:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004e0a:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004e0c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004e0e:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e10:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004e14:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e18:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e1c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e1e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e22:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e26:	4e7a      	ldr	r6, [pc, #488]	; (8005010 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004e28:	42b3      	cmp	r3, r6
 8004e2a:	d00f      	beq.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004e2c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004e30:	42b3      	cmp	r3, r6
 8004e32:	d00b      	beq.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004e34:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004e38:	42b3      	cmp	r3, r6
 8004e3a:	d007      	beq.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004e3c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004e40:	42b3      	cmp	r3, r6
 8004e42:	d003      	beq.n	8004e4c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8004e44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004e48:	42b3      	cmp	r3, r6
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0xaa>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e4c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e4e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e52:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e56:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e58:	6559      	str	r1, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e5a:	6869      	ldr	r1, [r5, #4]
 8004e5c:	65d9      	str	r1, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e62:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e64:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004e68:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e6a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e6c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004e70:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e74:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004e80:	2000      	movs	r0, #0
}
 8004e82:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e84:	6800      	ldr	r0, [r0, #0]
 8004e86:	f7ff fd8d 	bl	80049a4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e8a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e8c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e8e:	6999      	ldr	r1, [r3, #24]
 8004e90:	f041 0108 	orr.w	r1, r1, #8
 8004e94:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e96:	6999      	ldr	r1, [r3, #24]
 8004e98:	f021 0104 	bic.w	r1, r1, #4
 8004e9c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e9e:	699a      	ldr	r2, [r3, #24]
 8004ea0:	4302      	orrs	r2, r0
 8004ea2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2000      	movs	r0, #0
}
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004eae:	6800      	ldr	r0, [r0, #0]
 8004eb0:	f7ff ff3c 	bl	8004d2c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eb4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eb6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004eb8:	6999      	ldr	r1, [r3, #24]
 8004eba:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004ebe:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ec0:	6999      	ldr	r1, [r3, #24]
 8004ec2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004ec6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004ece:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2000      	movs	r0, #0
}
 8004ed8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004eda:	6800      	ldr	r0, [r0, #0]
 8004edc:	f7ff fd9e 	bl	8004a1c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ee0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ee2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ee4:	69d9      	ldr	r1, [r3, #28]
 8004ee6:	f041 0108 	orr.w	r1, r1, #8
 8004eea:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eec:	69d9      	ldr	r1, [r3, #28]
 8004eee:	f021 0104 	bic.w	r1, r1, #4
 8004ef2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ef4:	69da      	ldr	r2, [r3, #28]
 8004ef6:	4302      	orrs	r2, r0
 8004ef8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004efa:	2300      	movs	r3, #0
 8004efc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004f00:	2000      	movs	r0, #0
}
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f04:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f06:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f08:	6a1a      	ldr	r2, [r3, #32]
 8004f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f0e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004f10:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004f12:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004f14:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f16:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004f1a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f1e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f22:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f28:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2c:	4e38      	ldr	r6, [pc, #224]	; (8005010 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004f2e:	42b3      	cmp	r3, r6
 8004f30:	d00f      	beq.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004f32:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004f36:	42b3      	cmp	r3, r6
 8004f38:	d00b      	beq.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004f3a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004f3e:	42b3      	cmp	r3, r6
 8004f40:	d007      	beq.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004f42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004f46:	42b3      	cmp	r3, r6
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8004f4a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004f4e:	42b3      	cmp	r3, r6
 8004f50:	d104      	bne.n	8004f5c <HAL_TIM_PWM_ConfigChannel+0x1b0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f52:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f54:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f58:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8004f5c:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004f5e:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004f60:	6869      	ldr	r1, [r5, #4]
 8004f62:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004f64:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f66:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f68:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f6a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004f6e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f70:	69d9      	ldr	r1, [r3, #28]
 8004f72:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004f76:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f78:	69da      	ldr	r2, [r3, #28]
 8004f7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004f7e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004f80:	2300      	movs	r3, #0
 8004f82:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004f86:	2000      	movs	r0, #0
}
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f8a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004f8c:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004f94:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004f96:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004f98:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004f9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f9c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004fa0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8004fa4:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fa6:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8004fa8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004fac:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb0:	4e17      	ldr	r6, [pc, #92]	; (8005010 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8004fb2:	42b3      	cmp	r3, r6
 8004fb4:	d00f      	beq.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004fb6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004fba:	42b3      	cmp	r3, r6
 8004fbc:	d00b      	beq.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004fbe:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8004fc2:	42b3      	cmp	r3, r6
 8004fc4:	d007      	beq.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004fc6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004fca:	42b3      	cmp	r3, r6
 8004fcc:	d003      	beq.n	8004fd6 <HAL_TIM_PWM_ConfigChannel+0x22a>
 8004fce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004fd2:	42b3      	cmp	r3, r6
 8004fd4:	d104      	bne.n	8004fe0 <HAL_TIM_PWM_ConfigChannel+0x234>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fd6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fd8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fdc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8004fe0:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004fe2:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004fe4:	6869      	ldr	r1, [r5, #4]
 8004fe6:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8004fe8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fea:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fec:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fee:	f041 0108 	orr.w	r1, r1, #8
 8004ff2:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ff6:	f021 0104 	bic.w	r1, r1, #4
 8004ffa:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ffe:	432a      	orrs	r2, r5
 8005000:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8005002:	2300      	movs	r3, #0
 8005004:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005008:	2000      	movs	r0, #0
}
 800500a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800500c:	2002      	movs	r0, #2
}
 800500e:	4770      	bx	lr
 8005010:	40012c00 	.word	0x40012c00

08005014 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005014:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d03a      	beq.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 800501c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800501e:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005020:	4d1d      	ldr	r5, [pc, #116]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005022:	2302      	movs	r3, #2
 8005024:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005028:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800502a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800502c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800502e:	d026      	beq.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8005030:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005034:	42aa      	cmp	r2, r5
 8005036:	d022      	beq.n	800507e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005038:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800503e:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005040:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005044:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005046:	d00c      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005048:	4b14      	ldr	r3, [pc, #80]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800504a:	429a      	cmp	r2, r3
 800504c:	d009      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800504e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005052:	429a      	cmp	r2, r3
 8005054:	d005      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005056:	42aa      	cmp	r2, r5
 8005058:	d003      	beq.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800505a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800505e:	429a      	cmp	r2, r3
 8005060:	d104      	bne.n	800506c <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005062:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005064:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005068:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800506a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800506c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800506e:	2201      	movs	r2, #1
 8005070:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005074:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005078:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800507a:	4618      	mov	r0, r3
}
 800507c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800507e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005080:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005084:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005086:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800508c:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800508e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005090:	e7e7      	b.n	8005062 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8005092:	2002      	movs	r0, #2
}
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400

080050a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d03d      	beq.n	8005124 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 80050a8:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050aa:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b2:	4602      	mov	r2, r0
 80050b4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050b6:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050b8:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050be:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050c4:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050c6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050cc:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050ce:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050d4:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050d6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050dc:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80050de:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050e0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050e4:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80050e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80050ea:	4c0f      	ldr	r4, [pc, #60]	; (8005128 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80050ec:	42a0      	cmp	r0, r4
 80050ee:	d00b      	beq.n	8005108 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80050f0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80050f4:	42a0      	cmp	r0, r4
 80050f6:	d007      	beq.n	8005108 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80050f8:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80050fa:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80050fc:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005100:	4608      	mov	r0, r1
}
 8005102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005106:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005108:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800510a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800510e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005112:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005114:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800511a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800511c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005120:	430b      	orrs	r3, r1
 8005122:	e7e9      	b.n	80050f8 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005124:	2002      	movs	r0, #2
}
 8005126:	4770      	bx	lr
 8005128:	40012c00 	.word	0x40012c00

0800512c <HAL_TIMEx_CommutCallback>:
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop

08005130 <HAL_TIMEx_BreakCallback>:
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop

08005134 <HAL_TIMEx_Break2Callback>:
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop

08005138 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800513a:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800513c:	2e20      	cmp	r6, #32
 800513e:	d140      	bne.n	80051c2 <HAL_UART_Transmit_DMA+0x8a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005140:	2900      	cmp	r1, #0
 8005142:	d03c      	beq.n	80051be <HAL_UART_Transmit_DMA+0x86>
 8005144:	2a00      	cmp	r2, #0
 8005146:	d03a      	beq.n	80051be <HAL_UART_Transmit_DMA+0x86>
 8005148:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800514a:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 800514e:	2801      	cmp	r0, #1
 8005150:	d037      	beq.n	80051c2 <HAL_UART_Transmit_DMA+0x8a>
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    if (huart->hdmatx != NULL)
 8005152:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8005154:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005158:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800515a:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800515c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005162:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005164:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8005168:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800516c:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800516e:	b190      	cbz	r0, 8005196 <HAL_UART_Transmit_DMA+0x5e>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005170:	f8df c064 	ldr.w	ip, [pc, #100]	; 80051d8 <HAL_UART_Transmit_DMA+0xa0>

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005174:	6347      	str	r7, [r0, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005176:	4613      	mov	r3, r2
 8005178:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800517a:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800517e:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80051dc <HAL_UART_Transmit_DMA+0xa4>
 8005182:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005186:	f8df c058 	ldr.w	ip, [pc, #88]	; 80051e0 <HAL_UART_Transmit_DMA+0xa8>
 800518a:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800518e:	3228      	adds	r2, #40	; 0x28
 8005190:	f7fe fae2 	bl	8003758 <HAL_DMA_Start_IT>
 8005194:	b9b8      	cbnz	r0, 80051c6 <HAL_UART_Transmit_DMA+0x8e>

        return HAL_ERROR;
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	2140      	movs	r1, #64	; 0x40

    __HAL_UNLOCK(huart);
 800519a:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800519c:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 800519e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a2:	f102 0308 	add.w	r3, r2, #8
 80051a6:	e853 3f00 	ldrex	r3, [r3]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80051aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	f102 0008 	add.w	r0, r2, #8
 80051b2:	e840 3100 	strex	r1, r3, [r0]
 80051b6:	2900      	cmp	r1, #0
 80051b8:	d1f3      	bne.n	80051a2 <HAL_UART_Transmit_DMA+0x6a>

    return HAL_OK;
 80051ba:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80051bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80051be:	2001      	movs	r0, #1
}
 80051c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80051c2:	2002      	movs	r0, #2
}
 80051c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80051c6:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 80051c8:	f884 7074 	strb.w	r7, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80051cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_ERROR;
 80051d0:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 80051d2:	67a6      	str	r6, [r4, #120]	; 0x78
}
 80051d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d6:	bf00      	nop
 80051d8:	080051e9 	.word	0x080051e9
 80051dc:	08005231 	.word	0x08005231
 80051e0:	08005241 	.word	0x08005241

080051e4 <HAL_UART_TxCpltCallback>:
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80051e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80051ea:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d018      	beq.n	8005224 <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	6802      	ldr	r2, [r0, #0]
 80051f6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	f102 0308 	add.w	r3, r2, #8
 80051fe:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	f102 0008 	add.w	r0, r2, #8
 800520a:	e840 3100 	strex	r1, r3, [r0]
 800520e:	2900      	cmp	r1, #0
 8005210:	d1f3      	bne.n	80051fa <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	e842 3100 	strex	r1, r3, [r2]
 800521e:	2900      	cmp	r1, #0
 8005220:	d1f7      	bne.n	8005212 <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005222:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005224:	f7ff ffde 	bl	80051e4 <HAL_UART_TxCpltCallback>
}
 8005228:	bd08      	pop	{r3, pc}
 800522a:	bf00      	nop

0800522c <HAL_UART_TxHalfCpltCallback>:
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop

08005230 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005230:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005232:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005234:	f7ff fffa 	bl	800522c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005238:	bd08      	pop	{r3, pc}
 800523a:	bf00      	nop

0800523c <HAL_UART_ErrorCallback>:
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop

08005240 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005240:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005242:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005244:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8005246:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005248:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	0612      	lsls	r2, r2, #24
 800524e:	d501      	bpl.n	8005254 <UART_DMAError+0x14>
 8005250:	2921      	cmp	r1, #33	; 0x21
 8005252:	d00d      	beq.n	8005270 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	0652      	lsls	r2, r2, #25
 8005258:	d501      	bpl.n	800525e <UART_DMAError+0x1e>
 800525a:	2c22      	cmp	r4, #34	; 0x22
 800525c:	d016      	beq.n	800528c <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800525e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005262:	f043 0310 	orr.w	r3, r3, #16
 8005266:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800526a:	f7ff ffe7 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800526e:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8005270:	2200      	movs	r2, #0
 8005272:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005276:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800527a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	e843 2100 	strex	r1, r2, [r3]
 8005282:	2900      	cmp	r1, #0
 8005284:	d1f7      	bne.n	8005276 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8005286:	2220      	movs	r2, #32
 8005288:	6782      	str	r2, [r0, #120]	; 0x78
}
 800528a:	e7e3      	b.n	8005254 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 800528c:	2200      	movs	r2, #0
 800528e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	e843 2100 	strex	r1, r2, [r3]
 800529e:	2900      	cmp	r1, #0
 80052a0:	d1f7      	bne.n	8005292 <UART_DMAError+0x52>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	f103 0208 	add.w	r2, r3, #8
 80052a6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052aa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ae:	f103 0408 	add.w	r4, r3, #8
 80052b2:	e844 2100 	strex	r1, r2, [r4]
 80052b6:	2900      	cmp	r1, #0
 80052b8:	d1f3      	bne.n	80052a2 <UART_DMAError+0x62>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ba:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80052bc:	2a01      	cmp	r2, #1
 80052be:	d005      	beq.n	80052cc <UART_DMAError+0x8c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80052c2:	2220      	movs	r2, #32
 80052c4:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->RxISR = NULL;
 80052c6:	6643      	str	r3, [r0, #100]	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c8:	6603      	str	r3, [r0, #96]	; 0x60
}
 80052ca:	e7c8      	b.n	800525e <UART_DMAError+0x1e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	e843 2100 	strex	r1, r2, [r3]
 80052d8:	2900      	cmp	r1, #0
 80052da:	d0f1      	beq.n	80052c0 <UART_DMAError+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	e853 2f00 	ldrex	r2, [r3]
 80052e0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	e843 2100 	strex	r1, r2, [r3]
 80052e8:	2900      	cmp	r1, #0
 80052ea:	d1ef      	bne.n	80052cc <UART_DMAError+0x8c>
 80052ec:	e7e8      	b.n	80052c0 <UART_DMAError+0x80>
 80052ee:	bf00      	nop

080052f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052f0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80052fa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052fe:	f7ff ff9d 	bl	800523c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005302:	bd08      	pop	{r3, pc}

08005304 <HAL_UARTEx_RxEventCallback>:
}
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop

08005308 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005308:	6803      	ldr	r3, [r0, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800530c:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800530e:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 8005312:	ea12 0f0c 	tst.w	r2, ip
{
 8005316:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005318:	689d      	ldr	r5, [r3, #8]
{
 800531a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800531c:	d17c      	bne.n	8005418 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800531e:	0696      	lsls	r6, r2, #26
 8005320:	d502      	bpl.n	8005328 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005322:	068e      	lsls	r6, r1, #26
 8005324:	f100 8110 	bmi.w	8005548 <HAL_UART_IRQHandler+0x240>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005328:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800532a:	2801      	cmp	r0, #1
 800532c:	d024      	beq.n	8005378 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800532e:	02d6      	lsls	r6, r2, #11
 8005330:	d502      	bpl.n	8005338 <HAL_UART_IRQHandler+0x30>
 8005332:	0268      	lsls	r0, r5, #9
 8005334:	f100 810d 	bmi.w	8005552 <HAL_UART_IRQHandler+0x24a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005338:	0616      	lsls	r6, r2, #24
 800533a:	d414      	bmi.n	8005366 <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800533c:	0650      	lsls	r0, r2, #25
 800533e:	d501      	bpl.n	8005344 <HAL_UART_IRQHandler+0x3c>
 8005340:	064a      	lsls	r2, r1, #25
 8005342:	d400      	bmi.n	8005346 <HAL_UART_IRQHandler+0x3e>
}
 8005344:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800534a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	e843 2100 	strex	r1, r2, [r3]
 8005352:	2900      	cmp	r1, #0
 8005354:	d1f7      	bne.n	8005346 <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005356:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005358:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800535a:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 800535c:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff ff40 	bl	80051e4 <HAL_UART_TxCpltCallback>
}
 8005364:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005366:	060d      	lsls	r5, r1, #24
 8005368:	d5e8      	bpl.n	800533c <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 800536a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0e9      	beq.n	8005344 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8005370:	4620      	mov	r0, r4
}
 8005372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005376:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005378:	06d6      	lsls	r6, r2, #27
 800537a:	d5d8      	bpl.n	800532e <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800537c:	06c8      	lsls	r0, r1, #27
 800537e:	d5d6      	bpl.n	800532e <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005380:	2210      	movs	r2, #16
 8005382:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	0652      	lsls	r2, r2, #25
 8005388:	f140 8100 	bpl.w	800558c <HAL_UART_IRQHandler+0x284>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800538c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800538e:	6802      	ldr	r2, [r0, #0]
 8005390:	6852      	ldr	r2, [r2, #4]
 8005392:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005394:	2a00      	cmp	r2, #0
 8005396:	d0d5      	beq.n	8005344 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005398:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800539c:	4291      	cmp	r1, r2
 800539e:	d9d1      	bls.n	8005344 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 80053a0:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053a4:	6982      	ldr	r2, [r0, #24]
 80053a6:	2a20      	cmp	r2, #32
 80053a8:	d02e      	beq.n	8005408 <HAL_UART_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	e843 2100 	strex	r1, r2, [r3]
 80053b6:	2900      	cmp	r1, #0
 80053b8:	d1f7      	bne.n	80053aa <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	f103 0208 	add.w	r2, r3, #8
 80053be:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	f103 0508 	add.w	r5, r3, #8
 80053ca:	e845 2100 	strex	r1, r2, [r5]
 80053ce:	2900      	cmp	r1, #0
 80053d0:	d1f3      	bne.n	80053ba <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	f103 0208 	add.w	r2, r3, #8
 80053d6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	f103 0508 	add.w	r5, r3, #8
 80053e2:	e845 2100 	strex	r1, r2, [r5]
 80053e6:	2900      	cmp	r1, #0
 80053e8:	d1f3      	bne.n	80053d2 <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 80053ea:	2220      	movs	r2, #32
 80053ec:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ee:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	e843 2100 	strex	r1, r2, [r3]
 80053fc:	2900      	cmp	r1, #0
 80053fe:	d1f7      	bne.n	80053f0 <HAL_UART_IRQHandler+0xe8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005400:	f7fe f9ec 	bl	80037dc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005404:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005408:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800540c:	1ac9      	subs	r1, r1, r3
 800540e:	4620      	mov	r0, r4
 8005410:	b289      	uxth	r1, r1
 8005412:	f7ff ff77 	bl	8005304 <HAL_UARTEx_RxEventCallback>
}
 8005416:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005418:	4879      	ldr	r0, [pc, #484]	; (8005600 <HAL_UART_IRQHandler+0x2f8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 800541a:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800541e:	4008      	ands	r0, r1
 8005420:	4330      	orrs	r0, r6
 8005422:	d081      	beq.n	8005328 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005424:	07d5      	lsls	r5, r2, #31
 8005426:	d509      	bpl.n	800543c <HAL_UART_IRQHandler+0x134>
 8005428:	05c8      	lsls	r0, r1, #23
 800542a:	d507      	bpl.n	800543c <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800542c:	2001      	movs	r0, #1
 800542e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005430:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005434:	f040 0001 	orr.w	r0, r0, #1
 8005438:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800543c:	0795      	lsls	r5, r2, #30
 800543e:	d57e      	bpl.n	800553e <HAL_UART_IRQHandler+0x236>
 8005440:	b18e      	cbz	r6, 8005466 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005442:	2002      	movs	r0, #2
 8005444:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005446:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800544a:	f040 0004 	orr.w	r0, r0, #4
 800544e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005452:	0750      	lsls	r0, r2, #29
 8005454:	d507      	bpl.n	8005466 <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005456:	2004      	movs	r0, #4
 8005458:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800545a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800545e:	f040 0002 	orr.w	r0, r0, #2
 8005462:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005466:	0710      	lsls	r0, r2, #28
 8005468:	d50b      	bpl.n	8005482 <HAL_UART_IRQHandler+0x17a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800546a:	f001 0020 	and.w	r0, r1, #32
 800546e:	4330      	orrs	r0, r6
 8005470:	d007      	beq.n	8005482 <HAL_UART_IRQHandler+0x17a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005472:	2008      	movs	r0, #8
 8005474:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005476:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800547a:	f040 0008 	orr.w	r0, r0, #8
 800547e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005482:	0516      	lsls	r6, r2, #20
 8005484:	d50a      	bpl.n	800549c <HAL_UART_IRQHandler+0x194>
 8005486:	014d      	lsls	r5, r1, #5
 8005488:	d508      	bpl.n	800549c <HAL_UART_IRQHandler+0x194>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800548a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800548e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005490:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005494:	f040 0020 	orr.w	r0, r0, #32
 8005498:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800549c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80054a0:	2800      	cmp	r0, #0
 80054a2:	f43f af4f 	beq.w	8005344 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054a6:	0690      	lsls	r0, r2, #26
 80054a8:	d506      	bpl.n	80054b8 <HAL_UART_IRQHandler+0x1b0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054aa:	0689      	lsls	r1, r1, #26
 80054ac:	d504      	bpl.n	80054b8 <HAL_UART_IRQHandler+0x1b0>
        if (huart->RxISR != NULL)
 80054ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054b0:	b112      	cbz	r2, 80054b8 <HAL_UART_IRQHandler+0x1b0>
          huart->RxISR(huart);
 80054b2:	4620      	mov	r0, r4
 80054b4:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054b6:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 80054b8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054bc:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054be:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054c2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80054c6:	4315      	orrs	r5, r2
 80054c8:	f000 8094 	beq.w	80055f4 <HAL_UART_IRQHandler+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	e843 2100 	strex	r1, r2, [r3]
 80054d8:	2900      	cmp	r1, #0
 80054da:	d1f7      	bne.n	80054cc <HAL_UART_IRQHandler+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054dc:	f103 0208 	add.w	r2, r3, #8
 80054e0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	f103 0008 	add.w	r0, r3, #8
 80054ec:	e840 2100 	strex	r1, r2, [r0]
 80054f0:	2900      	cmp	r1, #0
 80054f2:	d1f3      	bne.n	80054dc <HAL_UART_IRQHandler+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80054f6:	2a01      	cmp	r2, #1
 80054f8:	d033      	beq.n	8005562 <HAL_UART_IRQHandler+0x25a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80054fc:	2120      	movs	r1, #32
 80054fe:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005502:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8005504:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005506:	064a      	lsls	r2, r1, #25
 8005508:	d53c      	bpl.n	8005584 <HAL_UART_IRQHandler+0x27c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550a:	f103 0208 	add.w	r2, r3, #8
 800550e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	f103 0008 	add.w	r0, r3, #8
 800551a:	e840 2100 	strex	r1, r2, [r0]
 800551e:	2900      	cmp	r1, #0
 8005520:	d1f3      	bne.n	800550a <HAL_UART_IRQHandler+0x202>
          if (huart->hdmarx != NULL)
 8005522:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005524:	b370      	cbz	r0, 8005584 <HAL_UART_IRQHandler+0x27c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005526:	4b37      	ldr	r3, [pc, #220]	; (8005604 <HAL_UART_IRQHandler+0x2fc>)
 8005528:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800552a:	f7fe f979 	bl	8003820 <HAL_DMA_Abort_IT>
 800552e:	2800      	cmp	r0, #0
 8005530:	f43f af08 	beq.w	8005344 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005534:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8005536:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800553a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800553c:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800553e:	0755      	lsls	r5, r2, #29
 8005540:	d591      	bpl.n	8005466 <HAL_UART_IRQHandler+0x15e>
 8005542:	2e00      	cmp	r6, #0
 8005544:	d187      	bne.n	8005456 <HAL_UART_IRQHandler+0x14e>
 8005546:	e78e      	b.n	8005466 <HAL_UART_IRQHandler+0x15e>
      if (huart->RxISR != NULL)
 8005548:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800554a:	2b00      	cmp	r3, #0
 800554c:	f47f af11 	bne.w	8005372 <HAL_UART_IRQHandler+0x6a>
 8005550:	e6f8      	b.n	8005344 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005552:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8005556:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005558:	621a      	str	r2, [r3, #32]
}
 800555a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800555e:	f000 bab3 	b.w	8005ac8 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005566:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	e843 2100 	strex	r1, r2, [r3]
 800556e:	2900      	cmp	r1, #0
 8005570:	d0c3      	beq.n	80054fa <HAL_UART_IRQHandler+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	e853 2f00 	ldrex	r2, [r3]
 8005576:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	e843 2100 	strex	r1, r2, [r3]
 800557e:	2900      	cmp	r1, #0
 8005580:	d1ef      	bne.n	8005562 <HAL_UART_IRQHandler+0x25a>
 8005582:	e7ba      	b.n	80054fa <HAL_UART_IRQHandler+0x1f2>
            HAL_UART_ErrorCallback(huart);
 8005584:	4620      	mov	r0, r4
 8005586:	f7ff fe59 	bl	800523c <HAL_UART_ErrorCallback>
}
 800558a:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800558c:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8005590:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8005594:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005596:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005598:	2a00      	cmp	r2, #0
 800559a:	f43f aed3 	beq.w	8005344 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800559e:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 80055a2:	1a51      	subs	r1, r2, r1
 80055a4:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80055a6:	2900      	cmp	r1, #0
 80055a8:	f43f aecc 	beq.w	8005344 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	e843 2000 	strex	r0, r2, [r3]
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d1f7      	bne.n	80055ac <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	f103 0208 	add.w	r2, r3, #8
 80055c0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	f103 0508 	add.w	r5, r3, #8
 80055cc:	e845 2000 	strex	r0, r2, [r5]
 80055d0:	2800      	cmp	r0, #0
 80055d2:	d1f3      	bne.n	80055bc <HAL_UART_IRQHandler+0x2b4>
        huart->RxState = HAL_UART_STATE_READY;
 80055d4:	2220      	movs	r2, #32
 80055d6:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 80055d8:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055da:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	e843 2000 	strex	r0, r2, [r3]
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d1f7      	bne.n	80055dc <HAL_UART_IRQHandler+0x2d4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055ec:	4620      	mov	r0, r4
 80055ee:	f7ff fe89 	bl	8005304 <HAL_UARTEx_RxEventCallback>
}
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80055f4:	4620      	mov	r0, r4
 80055f6:	f7ff fe21 	bl	800523c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fa:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80055fe:	bd70      	pop	{r4, r5, r6, pc}
 8005600:	04000120 	.word	0x04000120
 8005604:	080052f1 	.word	0x080052f1

08005608 <UART_SetConfig>:
{
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800560c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800560e:	6883      	ldr	r3, [r0, #8]
 8005610:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005612:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005614:	69e1      	ldr	r1, [r4, #28]
 8005616:	432b      	orrs	r3, r5
 8005618:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800561a:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800561e:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005620:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005624:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005626:	4303      	orrs	r3, r0
 8005628:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800562a:	6853      	ldr	r3, [r2, #4]
 800562c:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 800562e:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005634:	4303      	orrs	r3, r0
 8005636:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005638:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800563a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800563c:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005640:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005642:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005644:	487d      	ldr	r0, [pc, #500]	; (800583c <UART_SetConfig+0x234>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005646:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005648:	4282      	cmp	r2, r0
 800564a:	d046      	beq.n	80056da <UART_SetConfig+0xd2>
 800564c:	4b7c      	ldr	r3, [pc, #496]	; (8005840 <UART_SetConfig+0x238>)
 800564e:	429a      	cmp	r2, r3
 8005650:	d00f      	beq.n	8005672 <UART_SetConfig+0x6a>
 8005652:	4b7c      	ldr	r3, [pc, #496]	; (8005844 <UART_SetConfig+0x23c>)
 8005654:	429a      	cmp	r2, r3
 8005656:	f000 80a3 	beq.w	80057a0 <UART_SetConfig+0x198>
 800565a:	4b7b      	ldr	r3, [pc, #492]	; (8005848 <UART_SetConfig+0x240>)
 800565c:	429a      	cmp	r2, r3
 800565e:	f000 80b4 	beq.w	80057ca <UART_SetConfig+0x1c2>
 8005662:	4b7a      	ldr	r3, [pc, #488]	; (800584c <UART_SetConfig+0x244>)
 8005664:	429a      	cmp	r2, r3
 8005666:	d063      	beq.n	8005730 <UART_SetConfig+0x128>
  huart->RxISR = NULL;
 8005668:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800566a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    switch (clocksource)
 800566e:	2001      	movs	r0, #1
}
 8005670:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005672:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800567c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005680:	d069      	beq.n	8005756 <UART_SetConfig+0x14e>
 8005682:	d80f      	bhi.n	80056a4 <UART_SetConfig+0x9c>
 8005684:	2b00      	cmp	r3, #0
 8005686:	d05c      	beq.n	8005742 <UART_SetConfig+0x13a>
 8005688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568c:	d1ec      	bne.n	8005668 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005692:	d066      	beq.n	8005762 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005694:	f7fe ff8c 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005698:	b960      	cbnz	r0, 80056b4 <UART_SetConfig+0xac>
  huart->RxISR = NULL;
 800569a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800569c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80056a0:	2000      	movs	r0, #0
}
 80056a2:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a8:	d1de      	bne.n	8005668 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056aa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80056ae:	f000 80c2 	beq.w	8005836 <UART_SetConfig+0x22e>
    switch (clocksource)
 80056b2:	4867      	ldr	r0, [pc, #412]	; (8005850 <UART_SetConfig+0x248>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056b4:	6863      	ldr	r3, [r4, #4]
 80056b6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80056ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80056be:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056c0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80056c4:	f1a3 0110 	sub.w	r1, r3, #16
 80056c8:	4291      	cmp	r1, r2
 80056ca:	d8cd      	bhi.n	8005668 <UART_SetConfig+0x60>
        huart->Instance->BRR = usartdiv;
 80056cc:	6822      	ldr	r2, [r4, #0]
 80056ce:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80056d0:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80056d2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 80056d6:	2000      	movs	r0, #0
}
 80056d8:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056da:	4b5e      	ldr	r3, [pc, #376]	; (8005854 <UART_SetConfig+0x24c>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d906      	bls.n	80056f6 <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056e8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80056ec:	f000 8082 	beq.w	80057f4 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7fe ffac 	bl	800464c <HAL_RCC_GetPCLK2Freq>
        break;
 80056f4:	e7d0      	b.n	8005698 <UART_SetConfig+0x90>
 80056f6:	4a58      	ldr	r2, [pc, #352]	; (8005858 <UART_SetConfig+0x250>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056f8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80056fc:	5cd3      	ldrb	r3, [r2, r3]
 80056fe:	d07f      	beq.n	8005800 <UART_SetConfig+0x1f8>
    switch (clocksource)
 8005700:	2b08      	cmp	r3, #8
 8005702:	d8b1      	bhi.n	8005668 <UART_SetConfig+0x60>
 8005704:	a201      	add	r2, pc, #4	; (adr r2, 800570c <UART_SetConfig+0x104>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005749 	.word	0x08005749
 8005710:	080056f1 	.word	0x080056f1
 8005714:	080056b3 	.word	0x080056b3
 8005718:	08005669 	.word	0x08005669
 800571c:	08005695 	.word	0x08005695
 8005720:	08005669 	.word	0x08005669
 8005724:	08005669 	.word	0x08005669
 8005728:	08005669 	.word	0x08005669
 800572c:	0800575d 	.word	0x0800575d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005730:	4b48      	ldr	r3, [pc, #288]	; (8005854 <UART_SetConfig+0x24c>)
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800573c:	d00b      	beq.n	8005756 <UART_SetConfig+0x14e>
 800573e:	d82b      	bhi.n	8005798 <UART_SetConfig+0x190>
 8005740:	b92b      	cbnz	r3, 800574e <UART_SetConfig+0x146>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005742:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005746:	d058      	beq.n	80057fa <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005748:	f7fe ff68 	bl	800461c <HAL_RCC_GetPCLK1Freq>
        break;
 800574c:	e7a4      	b.n	8005698 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800574e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005752:	d09c      	beq.n	800568e <UART_SetConfig+0x86>
 8005754:	e788      	b.n	8005668 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005756:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800575a:	d069      	beq.n	8005830 <UART_SetConfig+0x228>
        pclk = (uint32_t) LSE_VALUE;
 800575c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005760:	e7a8      	b.n	80056b4 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fe ff25 	bl	80045b0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005766:	2800      	cmp	r0, #0
 8005768:	d097      	beq.n	800569a <UART_SetConfig+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800576a:	0043      	lsls	r3, r0, #1
 800576c:	6862      	ldr	r2, [r4, #4]
 800576e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005772:	fbb3 f3f2 	udiv	r3, r3, r2
 8005776:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005778:	f1a2 0010 	sub.w	r0, r2, #16
 800577c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005780:	4288      	cmp	r0, r1
 8005782:	f63f af71 	bhi.w	8005668 <UART_SetConfig+0x60>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005786:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 800578a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800578c:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800578e:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8005792:	4313      	orrs	r3, r2
 8005794:	60cb      	str	r3, [r1, #12]
 8005796:	e780      	b.n	800569a <UART_SetConfig+0x92>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005798:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800579c:	d085      	beq.n	80056aa <UART_SetConfig+0xa2>
 800579e:	e763      	b.n	8005668 <UART_SetConfig+0x60>
 80057a0:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80057aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80057ae:	d0d2      	beq.n	8005756 <UART_SetConfig+0x14e>
 80057b0:	d806      	bhi.n	80057c0 <UART_SetConfig+0x1b8>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0c5      	beq.n	8005742 <UART_SetConfig+0x13a>
 80057b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057ba:	f43f af68 	beq.w	800568e <UART_SetConfig+0x86>
 80057be:	e753      	b.n	8005668 <UART_SetConfig+0x60>
 80057c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80057c4:	f43f af71 	beq.w	80056aa <UART_SetConfig+0xa2>
 80057c8:	e74e      	b.n	8005668 <UART_SetConfig+0x60>
 80057ca:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80057ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80057d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057d8:	d0bd      	beq.n	8005756 <UART_SetConfig+0x14e>
 80057da:	d806      	bhi.n	80057ea <UART_SetConfig+0x1e2>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0b0      	beq.n	8005742 <UART_SetConfig+0x13a>
 80057e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e4:	f43f af53 	beq.w	800568e <UART_SetConfig+0x86>
 80057e8:	e73e      	b.n	8005668 <UART_SetConfig+0x60>
 80057ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057ee:	f43f af5c 	beq.w	80056aa <UART_SetConfig+0xa2>
 80057f2:	e739      	b.n	8005668 <UART_SetConfig+0x60>
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f4:	f7fe ff2a 	bl	800464c <HAL_RCC_GetPCLK2Freq>
        break;
 80057f8:	e7b5      	b.n	8005766 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80057fa:	f7fe ff0f 	bl	800461c <HAL_RCC_GetPCLK1Freq>
        break;
 80057fe:	e7b2      	b.n	8005766 <UART_SetConfig+0x15e>
    switch (clocksource)
 8005800:	2b08      	cmp	r3, #8
 8005802:	f63f af31 	bhi.w	8005668 <UART_SetConfig+0x60>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <UART_SetConfig+0x204>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	080057fb 	.word	0x080057fb
 8005810:	080057f5 	.word	0x080057f5
 8005814:	08005837 	.word	0x08005837
 8005818:	08005669 	.word	0x08005669
 800581c:	08005763 	.word	0x08005763
 8005820:	08005669 	.word	0x08005669
 8005824:	08005669 	.word	0x08005669
 8005828:	08005669 	.word	0x08005669
 800582c:	08005831 	.word	0x08005831
 8005830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005834:	e79a      	b.n	800576c <UART_SetConfig+0x164>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005836:	4b09      	ldr	r3, [pc, #36]	; (800585c <UART_SetConfig+0x254>)
 8005838:	e798      	b.n	800576c <UART_SetConfig+0x164>
 800583a:	bf00      	nop
 800583c:	40013800 	.word	0x40013800
 8005840:	40004400 	.word	0x40004400
 8005844:	40004800 	.word	0x40004800
 8005848:	40004c00 	.word	0x40004c00
 800584c:	40005000 	.word	0x40005000
 8005850:	007a1200 	.word	0x007a1200
 8005854:	40021000 	.word	0x40021000
 8005858:	080096a4 	.word	0x080096a4
 800585c:	00f42400 	.word	0x00f42400

08005860 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005862:	07da      	lsls	r2, r3, #31
{
 8005864:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005866:	d506      	bpl.n	8005876 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005868:	6801      	ldr	r1, [r0, #0]
 800586a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800586c:	684a      	ldr	r2, [r1, #4]
 800586e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005872:	4322      	orrs	r2, r4
 8005874:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005876:	079c      	lsls	r4, r3, #30
 8005878:	d506      	bpl.n	8005888 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800587a:	6801      	ldr	r1, [r0, #0]
 800587c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800587e:	684a      	ldr	r2, [r1, #4]
 8005880:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005884:	4322      	orrs	r2, r4
 8005886:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005888:	0759      	lsls	r1, r3, #29
 800588a:	d506      	bpl.n	800589a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800588c:	6801      	ldr	r1, [r0, #0]
 800588e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005890:	684a      	ldr	r2, [r1, #4]
 8005892:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005896:	4322      	orrs	r2, r4
 8005898:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800589a:	071a      	lsls	r2, r3, #28
 800589c:	d506      	bpl.n	80058ac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800589e:	6801      	ldr	r1, [r0, #0]
 80058a0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80058a2:	684a      	ldr	r2, [r1, #4]
 80058a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058a8:	4322      	orrs	r2, r4
 80058aa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058ac:	06dc      	lsls	r4, r3, #27
 80058ae:	d506      	bpl.n	80058be <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058b0:	6801      	ldr	r1, [r0, #0]
 80058b2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80058b4:	688a      	ldr	r2, [r1, #8]
 80058b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058ba:	4322      	orrs	r2, r4
 80058bc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058be:	0699      	lsls	r1, r3, #26
 80058c0:	d506      	bpl.n	80058d0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058c2:	6801      	ldr	r1, [r0, #0]
 80058c4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80058c6:	688a      	ldr	r2, [r1, #8]
 80058c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058cc:	4322      	orrs	r2, r4
 80058ce:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058d0:	065a      	lsls	r2, r3, #25
 80058d2:	d509      	bpl.n	80058e8 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058d4:	6801      	ldr	r1, [r0, #0]
 80058d6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80058d8:	684a      	ldr	r2, [r1, #4]
 80058da:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80058de:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058e0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058e4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058e6:	d00b      	beq.n	8005900 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058e8:	061b      	lsls	r3, r3, #24
 80058ea:	d506      	bpl.n	80058fa <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ec:	6802      	ldr	r2, [r0, #0]
 80058ee:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80058f0:	6853      	ldr	r3, [r2, #4]
 80058f2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80058f6:	430b      	orrs	r3, r1
 80058f8:	6053      	str	r3, [r2, #4]
}
 80058fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058fe:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005900:	684a      	ldr	r2, [r1, #4]
 8005902:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005904:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005908:	4322      	orrs	r2, r4
 800590a:	604a      	str	r2, [r1, #4]
 800590c:	e7ec      	b.n	80058e8 <UART_AdvFeatureConfig+0x88>
 800590e:	bf00      	nop

08005910 <UART_WaitOnFlagUntilTimeout>:
{
 8005910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005914:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005918:	6804      	ldr	r4, [r0, #0]
{
 800591a:	4607      	mov	r7, r0
 800591c:	460e      	mov	r6, r1
 800591e:	4615      	mov	r5, r2
 8005920:	4699      	mov	r9, r3
 8005922:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005926:	d10a      	bne.n	800593e <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005928:	69e3      	ldr	r3, [r4, #28]
 800592a:	ea36 0303 	bics.w	r3, r6, r3
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	429d      	cmp	r5, r3
 8005936:	d0f7      	beq.n	8005928 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8005938:	2000      	movs	r0, #0
}
 800593a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800593e:	69e3      	ldr	r3, [r4, #28]
 8005940:	ea36 0303 	bics.w	r3, r6, r3
 8005944:	bf0c      	ite	eq
 8005946:	2301      	moveq	r3, #1
 8005948:	2300      	movne	r3, #0
 800594a:	42ab      	cmp	r3, r5
 800594c:	d1f4      	bne.n	8005938 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594e:	f7fc fce1 	bl	8002314 <HAL_GetTick>
 8005952:	eba0 0009 	sub.w	r0, r0, r9
 8005956:	4540      	cmp	r0, r8
 8005958:	d831      	bhi.n	80059be <UART_WaitOnFlagUntilTimeout+0xae>
 800595a:	f1b8 0f00 	cmp.w	r8, #0
 800595e:	d02e      	beq.n	80059be <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005960:	683c      	ldr	r4, [r7, #0]
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	0759      	lsls	r1, r3, #29
 8005966:	4622      	mov	r2, r4
 8005968:	d5db      	bpl.n	8005922 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800596a:	69e3      	ldr	r3, [r4, #28]
 800596c:	051b      	lsls	r3, r3, #20
 800596e:	d5d8      	bpl.n	8005922 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005970:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005974:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800597a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	e844 3100 	strex	r1, r3, [r4]
 8005982:	b139      	cbz	r1, 8005994 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	e852 3f00 	ldrex	r3, [r2]
 8005988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	e842 3100 	strex	r1, r3, [r2]
 8005990:	2900      	cmp	r1, #0
 8005992:	d1f7      	bne.n	8005984 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	f102 0308 	add.w	r3, r2, #8
 8005998:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	f102 0008 	add.w	r0, r2, #8
 80059a4:	e840 3100 	strex	r1, r3, [r0]
 80059a8:	2900      	cmp	r1, #0
 80059aa:	d1f3      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 80059ac:	2320      	movs	r3, #32
 80059ae:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80059b0:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80059b4:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 80059b6:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 80059bc:	e7bd      	b.n	800593a <UART_WaitOnFlagUntilTimeout+0x2a>
 80059be:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	e842 3100 	strex	r1, r3, [r2]
 80059cc:	2900      	cmp	r1, #0
 80059ce:	d1f7      	bne.n	80059c0 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	f102 0308 	add.w	r3, r2, #8
 80059d4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	f102 0008 	add.w	r0, r2, #8
 80059e0:	e840 3100 	strex	r1, r3, [r0]
 80059e4:	2900      	cmp	r1, #0
 80059e6:	d1f3      	bne.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 80059e8:	2320      	movs	r3, #32
 80059ea:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80059ec:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059f0:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 80059f2:	2003      	movs	r0, #3
 80059f4:	e7a1      	b.n	800593a <UART_WaitOnFlagUntilTimeout+0x2a>
 80059f6:	bf00      	nop

080059f8 <HAL_UART_Init>:
  if (huart == NULL)
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d062      	beq.n	8005ac2 <HAL_UART_Init+0xca>
{
 80059fc:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80059fe:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8005a00:	b082      	sub	sp, #8
 8005a02:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d049      	beq.n	8005a9c <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 8005a08:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a0a:	2324      	movs	r3, #36	; 0x24
 8005a0c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8005a0e:	6813      	ldr	r3, [r2, #0]
 8005a10:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a14:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005a16:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a18:	f7ff fdf6 	bl	8005608 <UART_SetConfig>
 8005a1c:	2801      	cmp	r0, #1
 8005a1e:	d03a      	beq.n	8005a96 <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d133      	bne.n	8005a8e <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8005a2e:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 8005a36:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005a38:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8005a3c:	f041 0101 	orr.w	r1, r1, #1
 8005a40:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a42:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 8005a46:	f7fc fc65 	bl	8002314 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8005a50:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a52:	d40c      	bmi.n	8005a6e <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	075b      	lsls	r3, r3, #29
 8005a58:	d425      	bmi.n	8005aa6 <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5a:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8005a60:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005a64:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8005a66:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	6623      	str	r3, [r4, #96]	; 0x60
}
 8005a6a:	b002      	add	sp, #8
 8005a6c:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	462a      	mov	r2, r5
 8005a76:	4603      	mov	r3, r0
 8005a78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7ff ff47 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8005a82:	b9e0      	cbnz	r0, 8005abe <HAL_UART_Init+0xc6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a84:	6823      	ldr	r3, [r4, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	075b      	lsls	r3, r3, #29
 8005a8a:	d40c      	bmi.n	8005aa6 <HAL_UART_Init+0xae>
 8005a8c:	e7e5      	b.n	8005a5a <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f7ff fee6 	bl	8005860 <UART_AdvFeatureConfig>
 8005a94:	e7c7      	b.n	8005a26 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8005a96:	2001      	movs	r0, #1
}
 8005a98:	b002      	add	sp, #8
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8005a9c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8005aa0:	f7fc fb76 	bl	8002190 <HAL_UART_MspInit>
 8005aa4:	e7b0      	b.n	8005a08 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	4633      	mov	r3, r6
 8005ab0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ab4:	4620      	mov	r0, r4
 8005ab6:	f7ff ff2b 	bl	8005910 <UART_WaitOnFlagUntilTimeout>
 8005aba:	2800      	cmp	r0, #0
 8005abc:	d0cd      	beq.n	8005a5a <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 8005abe:	2003      	movs	r0, #3
 8005ac0:	e7d3      	b.n	8005a6a <HAL_UART_Init+0x72>
    return HAL_ERROR;
 8005ac2:	2001      	movs	r0, #1
}
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop

08005ac8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	0000      	movs	r0, r0
	...

08005ad0 <sin>:
 8005ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ad2:	ec53 2b10 	vmov	r2, r3, d0
 8005ad6:	4828      	ldr	r0, [pc, #160]	; (8005b78 <sin+0xa8>)
 8005ad8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005adc:	4281      	cmp	r1, r0
 8005ade:	dc07      	bgt.n	8005af0 <sin+0x20>
 8005ae0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005b70 <sin+0xa0>
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	b005      	add	sp, #20
 8005ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aec:	f000 be6c 	b.w	80067c8 <__kernel_sin>
 8005af0:	4822      	ldr	r0, [pc, #136]	; (8005b7c <sin+0xac>)
 8005af2:	4281      	cmp	r1, r0
 8005af4:	dd09      	ble.n	8005b0a <sin+0x3a>
 8005af6:	ee10 0a10 	vmov	r0, s0
 8005afa:	4619      	mov	r1, r3
 8005afc:	f7fa fbc4 	bl	8000288 <__aeabi_dsub>
 8005b00:	ec41 0b10 	vmov	d0, r0, r1
 8005b04:	b005      	add	sp, #20
 8005b06:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b0a:	4668      	mov	r0, sp
 8005b0c:	f000 f838 	bl	8005b80 <__ieee754_rem_pio2>
 8005b10:	f000 0003 	and.w	r0, r0, #3
 8005b14:	2801      	cmp	r0, #1
 8005b16:	d00c      	beq.n	8005b32 <sin+0x62>
 8005b18:	2802      	cmp	r0, #2
 8005b1a:	d011      	beq.n	8005b40 <sin+0x70>
 8005b1c:	b9f0      	cbnz	r0, 8005b5c <sin+0x8c>
 8005b1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b22:	ed9d 0b00 	vldr	d0, [sp]
 8005b26:	2001      	movs	r0, #1
 8005b28:	f000 fe4e 	bl	80067c8 <__kernel_sin>
 8005b2c:	ec51 0b10 	vmov	r0, r1, d0
 8005b30:	e7e6      	b.n	8005b00 <sin+0x30>
 8005b32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b36:	ed9d 0b00 	vldr	d0, [sp]
 8005b3a:	f000 fa2d 	bl	8005f98 <__kernel_cos>
 8005b3e:	e7f5      	b.n	8005b2c <sin+0x5c>
 8005b40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b44:	ed9d 0b00 	vldr	d0, [sp]
 8005b48:	2001      	movs	r0, #1
 8005b4a:	f000 fe3d 	bl	80067c8 <__kernel_sin>
 8005b4e:	ec53 2b10 	vmov	r2, r3, d0
 8005b52:	ee10 0a10 	vmov	r0, s0
 8005b56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005b5a:	e7d1      	b.n	8005b00 <sin+0x30>
 8005b5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b60:	ed9d 0b00 	vldr	d0, [sp]
 8005b64:	f000 fa18 	bl	8005f98 <__kernel_cos>
 8005b68:	e7f1      	b.n	8005b4e <sin+0x7e>
 8005b6a:	bf00      	nop
 8005b6c:	f3af 8000 	nop.w
	...
 8005b78:	3fe921fb 	.word	0x3fe921fb
 8005b7c:	7fefffff 	.word	0x7fefffff

08005b80 <__ieee754_rem_pio2>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	ed2d 8b02 	vpush	{d8}
 8005b88:	ec55 4b10 	vmov	r4, r5, d0
 8005b8c:	4bca      	ldr	r3, [pc, #808]	; (8005eb8 <__ieee754_rem_pio2+0x338>)
 8005b8e:	b08b      	sub	sp, #44	; 0x2c
 8005b90:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005b94:	4598      	cmp	r8, r3
 8005b96:	4682      	mov	sl, r0
 8005b98:	9502      	str	r5, [sp, #8]
 8005b9a:	dc08      	bgt.n	8005bae <__ieee754_rem_pio2+0x2e>
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	ed80 0b00 	vstr	d0, [r0]
 8005ba4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005ba8:	f04f 0b00 	mov.w	fp, #0
 8005bac:	e028      	b.n	8005c00 <__ieee754_rem_pio2+0x80>
 8005bae:	4bc3      	ldr	r3, [pc, #780]	; (8005ebc <__ieee754_rem_pio2+0x33c>)
 8005bb0:	4598      	cmp	r8, r3
 8005bb2:	dc78      	bgt.n	8005ca6 <__ieee754_rem_pio2+0x126>
 8005bb4:	9b02      	ldr	r3, [sp, #8]
 8005bb6:	4ec2      	ldr	r6, [pc, #776]	; (8005ec0 <__ieee754_rem_pio2+0x340>)
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	ee10 0a10 	vmov	r0, s0
 8005bbe:	a3b0      	add	r3, pc, #704	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x300>)
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	dd39      	ble.n	8005c3c <__ieee754_rem_pio2+0xbc>
 8005bc8:	f7fa fb5e 	bl	8000288 <__aeabi_dsub>
 8005bcc:	45b0      	cmp	r8, r6
 8005bce:	4604      	mov	r4, r0
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	d01b      	beq.n	8005c0c <__ieee754_rem_pio2+0x8c>
 8005bd4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x308>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f7fa fb55 	bl	8000288 <__aeabi_dsub>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	e9ca 2300 	strd	r2, r3, [sl]
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa fb4d 	bl	8000288 <__aeabi_dsub>
 8005bee:	a3a6      	add	r3, pc, #664	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x308>)
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	f7fa fb48 	bl	8000288 <__aeabi_dsub>
 8005bf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005bfc:	f04f 0b01 	mov.w	fp, #1
 8005c00:	4658      	mov	r0, fp
 8005c02:	b00b      	add	sp, #44	; 0x2c
 8005c04:	ecbd 8b02 	vpop	{d8}
 8005c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005e90 <__ieee754_rem_pio2+0x310>)
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f7fa fb39 	bl	8000288 <__aeabi_dsub>
 8005c16:	a3a0      	add	r3, pc, #640	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x318>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	460d      	mov	r5, r1
 8005c20:	f7fa fb32 	bl	8000288 <__aeabi_dsub>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	e9ca 2300 	strd	r2, r3, [sl]
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f7fa fb2a 	bl	8000288 <__aeabi_dsub>
 8005c34:	a398      	add	r3, pc, #608	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x318>)
 8005c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3a:	e7db      	b.n	8005bf4 <__ieee754_rem_pio2+0x74>
 8005c3c:	f7fa fb26 	bl	800028c <__adddf3>
 8005c40:	45b0      	cmp	r8, r6
 8005c42:	4604      	mov	r4, r0
 8005c44:	460d      	mov	r5, r1
 8005c46:	d016      	beq.n	8005c76 <__ieee754_rem_pio2+0xf6>
 8005c48:	a38f      	add	r3, pc, #572	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x308>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	f7fa fb1d 	bl	800028c <__adddf3>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	e9ca 2300 	strd	r2, r3, [sl]
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	f7fa fb13 	bl	8000288 <__aeabi_dsub>
 8005c62:	a389      	add	r3, pc, #548	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x308>)
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f7fa fb10 	bl	800028c <__adddf3>
 8005c6c:	f04f 3bff 	mov.w	fp, #4294967295
 8005c70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005c74:	e7c4      	b.n	8005c00 <__ieee754_rem_pio2+0x80>
 8005c76:	a386      	add	r3, pc, #536	; (adr r3, 8005e90 <__ieee754_rem_pio2+0x310>)
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f7fa fb06 	bl	800028c <__adddf3>
 8005c80:	a385      	add	r3, pc, #532	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x318>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	4604      	mov	r4, r0
 8005c88:	460d      	mov	r5, r1
 8005c8a:	f7fa faff 	bl	800028c <__adddf3>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	e9ca 2300 	strd	r2, r3, [sl]
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fa faf5 	bl	8000288 <__aeabi_dsub>
 8005c9e:	a37e      	add	r3, pc, #504	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x318>)
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	e7e0      	b.n	8005c68 <__ieee754_rem_pio2+0xe8>
 8005ca6:	4b87      	ldr	r3, [pc, #540]	; (8005ec4 <__ieee754_rem_pio2+0x344>)
 8005ca8:	4598      	cmp	r8, r3
 8005caa:	f300 80d9 	bgt.w	8005e60 <__ieee754_rem_pio2+0x2e0>
 8005cae:	f000 fe49 	bl	8006944 <fabs>
 8005cb2:	ec55 4b10 	vmov	r4, r5, d0
 8005cb6:	ee10 0a10 	vmov	r0, s0
 8005cba:	a379      	add	r3, pc, #484	; (adr r3, 8005ea0 <__ieee754_rem_pio2+0x320>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	f7fa fc99 	bl	80005f8 <__aeabi_dmul>
 8005cc6:	4b80      	ldr	r3, [pc, #512]	; (8005ec8 <__ieee754_rem_pio2+0x348>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f7fa fadf 	bl	800028c <__adddf3>
 8005cce:	f7fa ff43 	bl	8000b58 <__aeabi_d2iz>
 8005cd2:	4683      	mov	fp, r0
 8005cd4:	f7fa fc26 	bl	8000524 <__aeabi_i2d>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	ec43 2b18 	vmov	d8, r2, r3
 8005ce0:	a367      	add	r3, pc, #412	; (adr r3, 8005e80 <__ieee754_rem_pio2+0x300>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f7fa fc87 	bl	80005f8 <__aeabi_dmul>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f7fa fac9 	bl	8000288 <__aeabi_dsub>
 8005cf6:	a364      	add	r3, pc, #400	; (adr r3, 8005e88 <__ieee754_rem_pio2+0x308>)
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	460f      	mov	r7, r1
 8005d00:	ec51 0b18 	vmov	r0, r1, d8
 8005d04:	f7fa fc78 	bl	80005f8 <__aeabi_dmul>
 8005d08:	f1bb 0f1f 	cmp.w	fp, #31
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	460d      	mov	r5, r1
 8005d10:	dc0d      	bgt.n	8005d2e <__ieee754_rem_pio2+0x1ae>
 8005d12:	4b6e      	ldr	r3, [pc, #440]	; (8005ecc <__ieee754_rem_pio2+0x34c>)
 8005d14:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d1c:	4543      	cmp	r3, r8
 8005d1e:	d006      	beq.n	8005d2e <__ieee754_rem_pio2+0x1ae>
 8005d20:	4622      	mov	r2, r4
 8005d22:	462b      	mov	r3, r5
 8005d24:	4630      	mov	r0, r6
 8005d26:	4639      	mov	r1, r7
 8005d28:	f7fa faae 	bl	8000288 <__aeabi_dsub>
 8005d2c:	e00f      	b.n	8005d4e <__ieee754_rem_pio2+0x1ce>
 8005d2e:	462b      	mov	r3, r5
 8005d30:	4622      	mov	r2, r4
 8005d32:	4630      	mov	r0, r6
 8005d34:	4639      	mov	r1, r7
 8005d36:	f7fa faa7 	bl	8000288 <__aeabi_dsub>
 8005d3a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005d3e:	9303      	str	r3, [sp, #12]
 8005d40:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005d44:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005d48:	f1b8 0f10 	cmp.w	r8, #16
 8005d4c:	dc02      	bgt.n	8005d54 <__ieee754_rem_pio2+0x1d4>
 8005d4e:	e9ca 0100 	strd	r0, r1, [sl]
 8005d52:	e039      	b.n	8005dc8 <__ieee754_rem_pio2+0x248>
 8005d54:	a34e      	add	r3, pc, #312	; (adr r3, 8005e90 <__ieee754_rem_pio2+0x310>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	ec51 0b18 	vmov	r0, r1, d8
 8005d5e:	f7fa fc4b 	bl	80005f8 <__aeabi_dmul>
 8005d62:	4604      	mov	r4, r0
 8005d64:	460d      	mov	r5, r1
 8005d66:	4602      	mov	r2, r0
 8005d68:	460b      	mov	r3, r1
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	4639      	mov	r1, r7
 8005d6e:	f7fa fa8b 	bl	8000288 <__aeabi_dsub>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4680      	mov	r8, r0
 8005d78:	4689      	mov	r9, r1
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	f7fa fa83 	bl	8000288 <__aeabi_dsub>
 8005d82:	4622      	mov	r2, r4
 8005d84:	462b      	mov	r3, r5
 8005d86:	f7fa fa7f 	bl	8000288 <__aeabi_dsub>
 8005d8a:	a343      	add	r3, pc, #268	; (adr r3, 8005e98 <__ieee754_rem_pio2+0x318>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	4604      	mov	r4, r0
 8005d92:	460d      	mov	r5, r1
 8005d94:	ec51 0b18 	vmov	r0, r1, d8
 8005d98:	f7fa fc2e 	bl	80005f8 <__aeabi_dmul>
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	462b      	mov	r3, r5
 8005da0:	f7fa fa72 	bl	8000288 <__aeabi_dsub>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4604      	mov	r4, r0
 8005daa:	460d      	mov	r5, r1
 8005dac:	4640      	mov	r0, r8
 8005dae:	4649      	mov	r1, r9
 8005db0:	f7fa fa6a 	bl	8000288 <__aeabi_dsub>
 8005db4:	9a03      	ldr	r2, [sp, #12]
 8005db6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b31      	cmp	r3, #49	; 0x31
 8005dbe:	dc24      	bgt.n	8005e0a <__ieee754_rem_pio2+0x28a>
 8005dc0:	e9ca 0100 	strd	r0, r1, [sl]
 8005dc4:	4646      	mov	r6, r8
 8005dc6:	464f      	mov	r7, r9
 8005dc8:	e9da 8900 	ldrd	r8, r9, [sl]
 8005dcc:	4630      	mov	r0, r6
 8005dce:	4642      	mov	r2, r8
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	f7fa fa58 	bl	8000288 <__aeabi_dsub>
 8005dd8:	462b      	mov	r3, r5
 8005dda:	4622      	mov	r2, r4
 8005ddc:	f7fa fa54 	bl	8000288 <__aeabi_dsub>
 8005de0:	9b02      	ldr	r3, [sp, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005de8:	f6bf af0a 	bge.w	8005c00 <__ieee754_rem_pio2+0x80>
 8005dec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005df0:	f8ca 3004 	str.w	r3, [sl, #4]
 8005df4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005df8:	f8ca 8000 	str.w	r8, [sl]
 8005dfc:	f8ca 0008 	str.w	r0, [sl, #8]
 8005e00:	f8ca 300c 	str.w	r3, [sl, #12]
 8005e04:	f1cb 0b00 	rsb	fp, fp, #0
 8005e08:	e6fa      	b.n	8005c00 <__ieee754_rem_pio2+0x80>
 8005e0a:	a327      	add	r3, pc, #156	; (adr r3, 8005ea8 <__ieee754_rem_pio2+0x328>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	ec51 0b18 	vmov	r0, r1, d8
 8005e14:	f7fa fbf0 	bl	80005f8 <__aeabi_dmul>
 8005e18:	4604      	mov	r4, r0
 8005e1a:	460d      	mov	r5, r1
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4640      	mov	r0, r8
 8005e22:	4649      	mov	r1, r9
 8005e24:	f7fa fa30 	bl	8000288 <__aeabi_dsub>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	460f      	mov	r7, r1
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	f7fa fa28 	bl	8000288 <__aeabi_dsub>
 8005e38:	4622      	mov	r2, r4
 8005e3a:	462b      	mov	r3, r5
 8005e3c:	f7fa fa24 	bl	8000288 <__aeabi_dsub>
 8005e40:	a31b      	add	r3, pc, #108	; (adr r3, 8005eb0 <__ieee754_rem_pio2+0x330>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	4604      	mov	r4, r0
 8005e48:	460d      	mov	r5, r1
 8005e4a:	ec51 0b18 	vmov	r0, r1, d8
 8005e4e:	f7fa fbd3 	bl	80005f8 <__aeabi_dmul>
 8005e52:	4622      	mov	r2, r4
 8005e54:	462b      	mov	r3, r5
 8005e56:	f7fa fa17 	bl	8000288 <__aeabi_dsub>
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	460d      	mov	r5, r1
 8005e5e:	e75f      	b.n	8005d20 <__ieee754_rem_pio2+0x1a0>
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <__ieee754_rem_pio2+0x350>)
 8005e62:	4598      	cmp	r8, r3
 8005e64:	dd36      	ble.n	8005ed4 <__ieee754_rem_pio2+0x354>
 8005e66:	ee10 2a10 	vmov	r2, s0
 8005e6a:	462b      	mov	r3, r5
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	4629      	mov	r1, r5
 8005e70:	f7fa fa0a 	bl	8000288 <__aeabi_dsub>
 8005e74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005e78:	e9ca 0100 	strd	r0, r1, [sl]
 8005e7c:	e694      	b.n	8005ba8 <__ieee754_rem_pio2+0x28>
 8005e7e:	bf00      	nop
 8005e80:	54400000 	.word	0x54400000
 8005e84:	3ff921fb 	.word	0x3ff921fb
 8005e88:	1a626331 	.word	0x1a626331
 8005e8c:	3dd0b461 	.word	0x3dd0b461
 8005e90:	1a600000 	.word	0x1a600000
 8005e94:	3dd0b461 	.word	0x3dd0b461
 8005e98:	2e037073 	.word	0x2e037073
 8005e9c:	3ba3198a 	.word	0x3ba3198a
 8005ea0:	6dc9c883 	.word	0x6dc9c883
 8005ea4:	3fe45f30 	.word	0x3fe45f30
 8005ea8:	2e000000 	.word	0x2e000000
 8005eac:	3ba3198a 	.word	0x3ba3198a
 8005eb0:	252049c1 	.word	0x252049c1
 8005eb4:	397b839a 	.word	0x397b839a
 8005eb8:	3fe921fb 	.word	0x3fe921fb
 8005ebc:	4002d97b 	.word	0x4002d97b
 8005ec0:	3ff921fb 	.word	0x3ff921fb
 8005ec4:	413921fb 	.word	0x413921fb
 8005ec8:	3fe00000 	.word	0x3fe00000
 8005ecc:	080096a8 	.word	0x080096a8
 8005ed0:	7fefffff 	.word	0x7fefffff
 8005ed4:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005ed8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005edc:	ee10 0a10 	vmov	r0, s0
 8005ee0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005ee4:	ee10 6a10 	vmov	r6, s0
 8005ee8:	460f      	mov	r7, r1
 8005eea:	f7fa fe35 	bl	8000b58 <__aeabi_d2iz>
 8005eee:	f7fa fb19 	bl	8000524 <__aeabi_i2d>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	4639      	mov	r1, r7
 8005efa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005efe:	f7fa f9c3 	bl	8000288 <__aeabi_dsub>
 8005f02:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <__ieee754_rem_pio2+0x410>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	f7fa fb77 	bl	80005f8 <__aeabi_dmul>
 8005f0a:	460f      	mov	r7, r1
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	f7fa fe23 	bl	8000b58 <__aeabi_d2iz>
 8005f12:	f7fa fb07 	bl	8000524 <__aeabi_i2d>
 8005f16:	4602      	mov	r2, r0
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	4639      	mov	r1, r7
 8005f1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005f22:	f7fa f9b1 	bl	8000288 <__aeabi_dsub>
 8005f26:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <__ieee754_rem_pio2+0x410>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f7fa fb65 	bl	80005f8 <__aeabi_dmul>
 8005f2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f32:	ad04      	add	r5, sp, #16
 8005f34:	f04f 0803 	mov.w	r8, #3
 8005f38:	46a9      	mov	r9, r5
 8005f3a:	2600      	movs	r6, #0
 8005f3c:	2700      	movs	r7, #0
 8005f3e:	4632      	mov	r2, r6
 8005f40:	463b      	mov	r3, r7
 8005f42:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005f46:	46c3      	mov	fp, r8
 8005f48:	3d08      	subs	r5, #8
 8005f4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f4e:	f7fa fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d1f3      	bne.n	8005f3e <__ieee754_rem_pio2+0x3be>
 8005f56:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <__ieee754_rem_pio2+0x414>)
 8005f58:	9301      	str	r3, [sp, #4]
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	4622      	mov	r2, r4
 8005f60:	465b      	mov	r3, fp
 8005f62:	4651      	mov	r1, sl
 8005f64:	4648      	mov	r0, r9
 8005f66:	f000 f8df 	bl	8006128 <__kernel_rem_pio2>
 8005f6a:	9b02      	ldr	r3, [sp, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	4683      	mov	fp, r0
 8005f70:	f6bf ae46 	bge.w	8005c00 <__ieee754_rem_pio2+0x80>
 8005f74:	e9da 2100 	ldrd	r2, r1, [sl]
 8005f78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f7c:	e9ca 2300 	strd	r2, r3, [sl]
 8005f80:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005f84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f88:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005f8c:	e73a      	b.n	8005e04 <__ieee754_rem_pio2+0x284>
 8005f8e:	bf00      	nop
 8005f90:	41700000 	.word	0x41700000
 8005f94:	08009728 	.word	0x08009728

08005f98 <__kernel_cos>:
 8005f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	ec57 6b10 	vmov	r6, r7, d0
 8005fa0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005fa4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005fa8:	ed8d 1b00 	vstr	d1, [sp]
 8005fac:	da07      	bge.n	8005fbe <__kernel_cos+0x26>
 8005fae:	ee10 0a10 	vmov	r0, s0
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	f7fa fdd0 	bl	8000b58 <__aeabi_d2iz>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	f000 8088 	beq.w	80060ce <__kernel_cos+0x136>
 8005fbe:	4632      	mov	r2, r6
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	4630      	mov	r0, r6
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	f7fa fb17 	bl	80005f8 <__aeabi_dmul>
 8005fca:	4b51      	ldr	r3, [pc, #324]	; (8006110 <__kernel_cos+0x178>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	460d      	mov	r5, r1
 8005fd2:	f7fa fb11 	bl	80005f8 <__aeabi_dmul>
 8005fd6:	a340      	add	r3, pc, #256	; (adr r3, 80060d8 <__kernel_cos+0x140>)
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	4682      	mov	sl, r0
 8005fde:	468b      	mov	fp, r1
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	f7fa fb08 	bl	80005f8 <__aeabi_dmul>
 8005fe8:	a33d      	add	r3, pc, #244	; (adr r3, 80060e0 <__kernel_cos+0x148>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa f94d 	bl	800028c <__adddf3>
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	f7fa faff 	bl	80005f8 <__aeabi_dmul>
 8005ffa:	a33b      	add	r3, pc, #236	; (adr r3, 80060e8 <__kernel_cos+0x150>)
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f7fa f942 	bl	8000288 <__aeabi_dsub>
 8006004:	4622      	mov	r2, r4
 8006006:	462b      	mov	r3, r5
 8006008:	f7fa faf6 	bl	80005f8 <__aeabi_dmul>
 800600c:	a338      	add	r3, pc, #224	; (adr r3, 80060f0 <__kernel_cos+0x158>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	f7fa f93b 	bl	800028c <__adddf3>
 8006016:	4622      	mov	r2, r4
 8006018:	462b      	mov	r3, r5
 800601a:	f7fa faed 	bl	80005f8 <__aeabi_dmul>
 800601e:	a336      	add	r3, pc, #216	; (adr r3, 80060f8 <__kernel_cos+0x160>)
 8006020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006024:	f7fa f930 	bl	8000288 <__aeabi_dsub>
 8006028:	4622      	mov	r2, r4
 800602a:	462b      	mov	r3, r5
 800602c:	f7fa fae4 	bl	80005f8 <__aeabi_dmul>
 8006030:	a333      	add	r3, pc, #204	; (adr r3, 8006100 <__kernel_cos+0x168>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa f929 	bl	800028c <__adddf3>
 800603a:	4622      	mov	r2, r4
 800603c:	462b      	mov	r3, r5
 800603e:	f7fa fadb 	bl	80005f8 <__aeabi_dmul>
 8006042:	4622      	mov	r2, r4
 8006044:	462b      	mov	r3, r5
 8006046:	f7fa fad7 	bl	80005f8 <__aeabi_dmul>
 800604a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800604e:	4604      	mov	r4, r0
 8006050:	460d      	mov	r5, r1
 8006052:	4630      	mov	r0, r6
 8006054:	4639      	mov	r1, r7
 8006056:	f7fa facf 	bl	80005f8 <__aeabi_dmul>
 800605a:	460b      	mov	r3, r1
 800605c:	4602      	mov	r2, r0
 800605e:	4629      	mov	r1, r5
 8006060:	4620      	mov	r0, r4
 8006062:	f7fa f911 	bl	8000288 <__aeabi_dsub>
 8006066:	4b2b      	ldr	r3, [pc, #172]	; (8006114 <__kernel_cos+0x17c>)
 8006068:	4598      	cmp	r8, r3
 800606a:	4606      	mov	r6, r0
 800606c:	460f      	mov	r7, r1
 800606e:	dc10      	bgt.n	8006092 <__kernel_cos+0xfa>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4650      	mov	r0, sl
 8006076:	4659      	mov	r1, fp
 8006078:	f7fa f906 	bl	8000288 <__aeabi_dsub>
 800607c:	460b      	mov	r3, r1
 800607e:	4926      	ldr	r1, [pc, #152]	; (8006118 <__kernel_cos+0x180>)
 8006080:	4602      	mov	r2, r0
 8006082:	2000      	movs	r0, #0
 8006084:	f7fa f900 	bl	8000288 <__aeabi_dsub>
 8006088:	ec41 0b10 	vmov	d0, r0, r1
 800608c:	b003      	add	sp, #12
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	4b22      	ldr	r3, [pc, #136]	; (800611c <__kernel_cos+0x184>)
 8006094:	4920      	ldr	r1, [pc, #128]	; (8006118 <__kernel_cos+0x180>)
 8006096:	4598      	cmp	r8, r3
 8006098:	bfcc      	ite	gt
 800609a:	4d21      	ldrgt	r5, [pc, #132]	; (8006120 <__kernel_cos+0x188>)
 800609c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80060a0:	2400      	movs	r4, #0
 80060a2:	4622      	mov	r2, r4
 80060a4:	462b      	mov	r3, r5
 80060a6:	2000      	movs	r0, #0
 80060a8:	f7fa f8ee 	bl	8000288 <__aeabi_dsub>
 80060ac:	4622      	mov	r2, r4
 80060ae:	4680      	mov	r8, r0
 80060b0:	4689      	mov	r9, r1
 80060b2:	462b      	mov	r3, r5
 80060b4:	4650      	mov	r0, sl
 80060b6:	4659      	mov	r1, fp
 80060b8:	f7fa f8e6 	bl	8000288 <__aeabi_dsub>
 80060bc:	4632      	mov	r2, r6
 80060be:	463b      	mov	r3, r7
 80060c0:	f7fa f8e2 	bl	8000288 <__aeabi_dsub>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4640      	mov	r0, r8
 80060ca:	4649      	mov	r1, r9
 80060cc:	e7da      	b.n	8006084 <__kernel_cos+0xec>
 80060ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006108 <__kernel_cos+0x170>
 80060d2:	e7db      	b.n	800608c <__kernel_cos+0xf4>
 80060d4:	f3af 8000 	nop.w
 80060d8:	be8838d4 	.word	0xbe8838d4
 80060dc:	bda8fae9 	.word	0xbda8fae9
 80060e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80060e4:	3e21ee9e 	.word	0x3e21ee9e
 80060e8:	809c52ad 	.word	0x809c52ad
 80060ec:	3e927e4f 	.word	0x3e927e4f
 80060f0:	19cb1590 	.word	0x19cb1590
 80060f4:	3efa01a0 	.word	0x3efa01a0
 80060f8:	16c15177 	.word	0x16c15177
 80060fc:	3f56c16c 	.word	0x3f56c16c
 8006100:	5555554c 	.word	0x5555554c
 8006104:	3fa55555 	.word	0x3fa55555
 8006108:	00000000 	.word	0x00000000
 800610c:	3ff00000 	.word	0x3ff00000
 8006110:	3fe00000 	.word	0x3fe00000
 8006114:	3fd33332 	.word	0x3fd33332
 8006118:	3ff00000 	.word	0x3ff00000
 800611c:	3fe90000 	.word	0x3fe90000
 8006120:	3fd20000 	.word	0x3fd20000
 8006124:	00000000 	.word	0x00000000

08006128 <__kernel_rem_pio2>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	ed2d 8b02 	vpush	{d8}
 8006130:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006134:	f112 0f14 	cmn.w	r2, #20
 8006138:	9308      	str	r3, [sp, #32]
 800613a:	9101      	str	r1, [sp, #4]
 800613c:	4bc4      	ldr	r3, [pc, #784]	; (8006450 <__kernel_rem_pio2+0x328>)
 800613e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8006140:	900b      	str	r0, [sp, #44]	; 0x2c
 8006142:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006146:	9302      	str	r3, [sp, #8]
 8006148:	9b08      	ldr	r3, [sp, #32]
 800614a:	f103 33ff 	add.w	r3, r3, #4294967295
 800614e:	bfa8      	it	ge
 8006150:	1ed4      	subge	r4, r2, #3
 8006152:	9306      	str	r3, [sp, #24]
 8006154:	bfb2      	itee	lt
 8006156:	2400      	movlt	r4, #0
 8006158:	2318      	movge	r3, #24
 800615a:	fb94 f4f3 	sdivge	r4, r4, r3
 800615e:	f06f 0317 	mvn.w	r3, #23
 8006162:	fb04 3303 	mla	r3, r4, r3, r3
 8006166:	eb03 0a02 	add.w	sl, r3, r2
 800616a:	9b02      	ldr	r3, [sp, #8]
 800616c:	9a06      	ldr	r2, [sp, #24]
 800616e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006440 <__kernel_rem_pio2+0x318>
 8006172:	eb03 0802 	add.w	r8, r3, r2
 8006176:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006178:	1aa7      	subs	r7, r4, r2
 800617a:	ae22      	add	r6, sp, #136	; 0x88
 800617c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006180:	2500      	movs	r5, #0
 8006182:	4545      	cmp	r5, r8
 8006184:	dd13      	ble.n	80061ae <__kernel_rem_pio2+0x86>
 8006186:	9b08      	ldr	r3, [sp, #32]
 8006188:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006440 <__kernel_rem_pio2+0x318>
 800618c:	aa22      	add	r2, sp, #136	; 0x88
 800618e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006192:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8006196:	f04f 0800 	mov.w	r8, #0
 800619a:	9b02      	ldr	r3, [sp, #8]
 800619c:	4598      	cmp	r8, r3
 800619e:	dc2f      	bgt.n	8006200 <__kernel_rem_pio2+0xd8>
 80061a0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80061a4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80061a8:	462f      	mov	r7, r5
 80061aa:	2600      	movs	r6, #0
 80061ac:	e01b      	b.n	80061e6 <__kernel_rem_pio2+0xbe>
 80061ae:	42ef      	cmn	r7, r5
 80061b0:	d407      	bmi.n	80061c2 <__kernel_rem_pio2+0x9a>
 80061b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80061b6:	f7fa f9b5 	bl	8000524 <__aeabi_i2d>
 80061ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80061be:	3501      	adds	r5, #1
 80061c0:	e7df      	b.n	8006182 <__kernel_rem_pio2+0x5a>
 80061c2:	ec51 0b18 	vmov	r0, r1, d8
 80061c6:	e7f8      	b.n	80061ba <__kernel_rem_pio2+0x92>
 80061c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80061d0:	f7fa fa12 	bl	80005f8 <__aeabi_dmul>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061dc:	f7fa f856 	bl	800028c <__adddf3>
 80061e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061e4:	3601      	adds	r6, #1
 80061e6:	9b06      	ldr	r3, [sp, #24]
 80061e8:	429e      	cmp	r6, r3
 80061ea:	f1a7 0708 	sub.w	r7, r7, #8
 80061ee:	ddeb      	ble.n	80061c8 <__kernel_rem_pio2+0xa0>
 80061f0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80061f4:	f108 0801 	add.w	r8, r8, #1
 80061f8:	ecab 7b02 	vstmia	fp!, {d7}
 80061fc:	3508      	adds	r5, #8
 80061fe:	e7cc      	b.n	800619a <__kernel_rem_pio2+0x72>
 8006200:	9b02      	ldr	r3, [sp, #8]
 8006202:	aa0e      	add	r2, sp, #56	; 0x38
 8006204:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006208:	930d      	str	r3, [sp, #52]	; 0x34
 800620a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800620c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006210:	9c02      	ldr	r4, [sp, #8]
 8006212:	930c      	str	r3, [sp, #48]	; 0x30
 8006214:	00e3      	lsls	r3, r4, #3
 8006216:	930a      	str	r3, [sp, #40]	; 0x28
 8006218:	ab9a      	add	r3, sp, #616	; 0x268
 800621a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800621e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006222:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006226:	ab72      	add	r3, sp, #456	; 0x1c8
 8006228:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800622c:	46c3      	mov	fp, r8
 800622e:	46a1      	mov	r9, r4
 8006230:	f1b9 0f00 	cmp.w	r9, #0
 8006234:	f1a5 0508 	sub.w	r5, r5, #8
 8006238:	dc77      	bgt.n	800632a <__kernel_rem_pio2+0x202>
 800623a:	ec47 6b10 	vmov	d0, r6, r7
 800623e:	4650      	mov	r0, sl
 8006240:	f000 fc0a 	bl	8006a58 <scalbn>
 8006244:	ec57 6b10 	vmov	r6, r7, d0
 8006248:	2200      	movs	r2, #0
 800624a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800624e:	ee10 0a10 	vmov	r0, s0
 8006252:	4639      	mov	r1, r7
 8006254:	f7fa f9d0 	bl	80005f8 <__aeabi_dmul>
 8006258:	ec41 0b10 	vmov	d0, r0, r1
 800625c:	f000 fb7c 	bl	8006958 <floor>
 8006260:	4b7c      	ldr	r3, [pc, #496]	; (8006454 <__kernel_rem_pio2+0x32c>)
 8006262:	ec51 0b10 	vmov	r0, r1, d0
 8006266:	2200      	movs	r2, #0
 8006268:	f7fa f9c6 	bl	80005f8 <__aeabi_dmul>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4630      	mov	r0, r6
 8006272:	4639      	mov	r1, r7
 8006274:	f7fa f808 	bl	8000288 <__aeabi_dsub>
 8006278:	460f      	mov	r7, r1
 800627a:	4606      	mov	r6, r0
 800627c:	f7fa fc6c 	bl	8000b58 <__aeabi_d2iz>
 8006280:	9004      	str	r0, [sp, #16]
 8006282:	f7fa f94f 	bl	8000524 <__aeabi_i2d>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4630      	mov	r0, r6
 800628c:	4639      	mov	r1, r7
 800628e:	f7f9 fffb 	bl	8000288 <__aeabi_dsub>
 8006292:	f1ba 0f00 	cmp.w	sl, #0
 8006296:	4606      	mov	r6, r0
 8006298:	460f      	mov	r7, r1
 800629a:	dd6d      	ble.n	8006378 <__kernel_rem_pio2+0x250>
 800629c:	1e62      	subs	r2, r4, #1
 800629e:	ab0e      	add	r3, sp, #56	; 0x38
 80062a0:	9d04      	ldr	r5, [sp, #16]
 80062a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80062a6:	f1ca 0118 	rsb	r1, sl, #24
 80062aa:	fa40 f301 	asr.w	r3, r0, r1
 80062ae:	441d      	add	r5, r3
 80062b0:	408b      	lsls	r3, r1
 80062b2:	1ac0      	subs	r0, r0, r3
 80062b4:	ab0e      	add	r3, sp, #56	; 0x38
 80062b6:	9504      	str	r5, [sp, #16]
 80062b8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80062bc:	f1ca 0317 	rsb	r3, sl, #23
 80062c0:	fa40 fb03 	asr.w	fp, r0, r3
 80062c4:	f1bb 0f00 	cmp.w	fp, #0
 80062c8:	dd65      	ble.n	8006396 <__kernel_rem_pio2+0x26e>
 80062ca:	9b04      	ldr	r3, [sp, #16]
 80062cc:	2200      	movs	r2, #0
 80062ce:	3301      	adds	r3, #1
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	4615      	mov	r5, r2
 80062d4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80062d8:	4294      	cmp	r4, r2
 80062da:	f300 809c 	bgt.w	8006416 <__kernel_rem_pio2+0x2ee>
 80062de:	f1ba 0f00 	cmp.w	sl, #0
 80062e2:	dd07      	ble.n	80062f4 <__kernel_rem_pio2+0x1cc>
 80062e4:	f1ba 0f01 	cmp.w	sl, #1
 80062e8:	f000 80c0 	beq.w	800646c <__kernel_rem_pio2+0x344>
 80062ec:	f1ba 0f02 	cmp.w	sl, #2
 80062f0:	f000 80c6 	beq.w	8006480 <__kernel_rem_pio2+0x358>
 80062f4:	f1bb 0f02 	cmp.w	fp, #2
 80062f8:	d14d      	bne.n	8006396 <__kernel_rem_pio2+0x26e>
 80062fa:	4632      	mov	r2, r6
 80062fc:	463b      	mov	r3, r7
 80062fe:	4956      	ldr	r1, [pc, #344]	; (8006458 <__kernel_rem_pio2+0x330>)
 8006300:	2000      	movs	r0, #0
 8006302:	f7f9 ffc1 	bl	8000288 <__aeabi_dsub>
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	2d00      	cmp	r5, #0
 800630c:	d043      	beq.n	8006396 <__kernel_rem_pio2+0x26e>
 800630e:	4650      	mov	r0, sl
 8006310:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006448 <__kernel_rem_pio2+0x320>
 8006314:	f000 fba0 	bl	8006a58 <scalbn>
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	ec53 2b10 	vmov	r2, r3, d0
 8006320:	f7f9 ffb2 	bl	8000288 <__aeabi_dsub>
 8006324:	4606      	mov	r6, r0
 8006326:	460f      	mov	r7, r1
 8006328:	e035      	b.n	8006396 <__kernel_rem_pio2+0x26e>
 800632a:	4b4c      	ldr	r3, [pc, #304]	; (800645c <__kernel_rem_pio2+0x334>)
 800632c:	2200      	movs	r2, #0
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f7fa f961 	bl	80005f8 <__aeabi_dmul>
 8006336:	f7fa fc0f 	bl	8000b58 <__aeabi_d2iz>
 800633a:	f7fa f8f3 	bl	8000524 <__aeabi_i2d>
 800633e:	4602      	mov	r2, r0
 8006340:	460b      	mov	r3, r1
 8006342:	ec43 2b18 	vmov	d8, r2, r3
 8006346:	4b46      	ldr	r3, [pc, #280]	; (8006460 <__kernel_rem_pio2+0x338>)
 8006348:	2200      	movs	r2, #0
 800634a:	f7fa f955 	bl	80005f8 <__aeabi_dmul>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4630      	mov	r0, r6
 8006354:	4639      	mov	r1, r7
 8006356:	f7f9 ff97 	bl	8000288 <__aeabi_dsub>
 800635a:	f7fa fbfd 	bl	8000b58 <__aeabi_d2iz>
 800635e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006362:	f84b 0b04 	str.w	r0, [fp], #4
 8006366:	ec51 0b18 	vmov	r0, r1, d8
 800636a:	f7f9 ff8f 	bl	800028c <__adddf3>
 800636e:	f109 39ff 	add.w	r9, r9, #4294967295
 8006372:	4606      	mov	r6, r0
 8006374:	460f      	mov	r7, r1
 8006376:	e75b      	b.n	8006230 <__kernel_rem_pio2+0x108>
 8006378:	d106      	bne.n	8006388 <__kernel_rem_pio2+0x260>
 800637a:	1e63      	subs	r3, r4, #1
 800637c:	aa0e      	add	r2, sp, #56	; 0x38
 800637e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006382:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006386:	e79d      	b.n	80062c4 <__kernel_rem_pio2+0x19c>
 8006388:	4b36      	ldr	r3, [pc, #216]	; (8006464 <__kernel_rem_pio2+0x33c>)
 800638a:	2200      	movs	r2, #0
 800638c:	f7fa fbba 	bl	8000b04 <__aeabi_dcmpge>
 8006390:	2800      	cmp	r0, #0
 8006392:	d13d      	bne.n	8006410 <__kernel_rem_pio2+0x2e8>
 8006394:	4683      	mov	fp, r0
 8006396:	2200      	movs	r2, #0
 8006398:	2300      	movs	r3, #0
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	f7fa fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	f000 80c0 	beq.w	8006528 <__kernel_rem_pio2+0x400>
 80063a8:	1e65      	subs	r5, r4, #1
 80063aa:	462b      	mov	r3, r5
 80063ac:	2200      	movs	r2, #0
 80063ae:	9902      	ldr	r1, [sp, #8]
 80063b0:	428b      	cmp	r3, r1
 80063b2:	da6c      	bge.n	800648e <__kernel_rem_pio2+0x366>
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	f000 8089 	beq.w	80064cc <__kernel_rem_pio2+0x3a4>
 80063ba:	ab0e      	add	r3, sp, #56	; 0x38
 80063bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80063c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80ad 	beq.w	8006524 <__kernel_rem_pio2+0x3fc>
 80063ca:	4650      	mov	r0, sl
 80063cc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006448 <__kernel_rem_pio2+0x320>
 80063d0:	f000 fb42 	bl	8006a58 <scalbn>
 80063d4:	ab9a      	add	r3, sp, #616	; 0x268
 80063d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80063da:	ec57 6b10 	vmov	r6, r7, d0
 80063de:	00ec      	lsls	r4, r5, #3
 80063e0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80063e4:	46aa      	mov	sl, r5
 80063e6:	f1ba 0f00 	cmp.w	sl, #0
 80063ea:	f280 80d6 	bge.w	800659a <__kernel_rem_pio2+0x472>
 80063ee:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006440 <__kernel_rem_pio2+0x318>
 80063f2:	462e      	mov	r6, r5
 80063f4:	2e00      	cmp	r6, #0
 80063f6:	f2c0 8104 	blt.w	8006602 <__kernel_rem_pio2+0x4da>
 80063fa:	ab72      	add	r3, sp, #456	; 0x1c8
 80063fc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006400:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006468 <__kernel_rem_pio2+0x340>
 8006404:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006408:	f04f 0800 	mov.w	r8, #0
 800640c:	1baf      	subs	r7, r5, r6
 800640e:	e0ea      	b.n	80065e6 <__kernel_rem_pio2+0x4be>
 8006410:	f04f 0b02 	mov.w	fp, #2
 8006414:	e759      	b.n	80062ca <__kernel_rem_pio2+0x1a2>
 8006416:	f8d8 3000 	ldr.w	r3, [r8]
 800641a:	b955      	cbnz	r5, 8006432 <__kernel_rem_pio2+0x30a>
 800641c:	b123      	cbz	r3, 8006428 <__kernel_rem_pio2+0x300>
 800641e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006422:	f8c8 3000 	str.w	r3, [r8]
 8006426:	2301      	movs	r3, #1
 8006428:	3201      	adds	r2, #1
 800642a:	f108 0804 	add.w	r8, r8, #4
 800642e:	461d      	mov	r5, r3
 8006430:	e752      	b.n	80062d8 <__kernel_rem_pio2+0x1b0>
 8006432:	1acb      	subs	r3, r1, r3
 8006434:	f8c8 3000 	str.w	r3, [r8]
 8006438:	462b      	mov	r3, r5
 800643a:	e7f5      	b.n	8006428 <__kernel_rem_pio2+0x300>
 800643c:	f3af 8000 	nop.w
	...
 800644c:	3ff00000 	.word	0x3ff00000
 8006450:	08009870 	.word	0x08009870
 8006454:	40200000 	.word	0x40200000
 8006458:	3ff00000 	.word	0x3ff00000
 800645c:	3e700000 	.word	0x3e700000
 8006460:	41700000 	.word	0x41700000
 8006464:	3fe00000 	.word	0x3fe00000
 8006468:	08009830 	.word	0x08009830
 800646c:	1e62      	subs	r2, r4, #1
 800646e:	ab0e      	add	r3, sp, #56	; 0x38
 8006470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006474:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006478:	a90e      	add	r1, sp, #56	; 0x38
 800647a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800647e:	e739      	b.n	80062f4 <__kernel_rem_pio2+0x1cc>
 8006480:	1e62      	subs	r2, r4, #1
 8006482:	ab0e      	add	r3, sp, #56	; 0x38
 8006484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006488:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800648c:	e7f4      	b.n	8006478 <__kernel_rem_pio2+0x350>
 800648e:	a90e      	add	r1, sp, #56	; 0x38
 8006490:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006494:	3b01      	subs	r3, #1
 8006496:	430a      	orrs	r2, r1
 8006498:	e789      	b.n	80063ae <__kernel_rem_pio2+0x286>
 800649a:	3301      	adds	r3, #1
 800649c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80064a0:	2900      	cmp	r1, #0
 80064a2:	d0fa      	beq.n	800649a <__kernel_rem_pio2+0x372>
 80064a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064a6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80064aa:	446a      	add	r2, sp
 80064ac:	3a98      	subs	r2, #152	; 0x98
 80064ae:	920a      	str	r2, [sp, #40]	; 0x28
 80064b0:	9a08      	ldr	r2, [sp, #32]
 80064b2:	18e3      	adds	r3, r4, r3
 80064b4:	18a5      	adds	r5, r4, r2
 80064b6:	aa22      	add	r2, sp, #136	; 0x88
 80064b8:	f104 0801 	add.w	r8, r4, #1
 80064bc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80064c0:	9304      	str	r3, [sp, #16]
 80064c2:	9b04      	ldr	r3, [sp, #16]
 80064c4:	4543      	cmp	r3, r8
 80064c6:	da04      	bge.n	80064d2 <__kernel_rem_pio2+0x3aa>
 80064c8:	461c      	mov	r4, r3
 80064ca:	e6a3      	b.n	8006214 <__kernel_rem_pio2+0xec>
 80064cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064ce:	2301      	movs	r3, #1
 80064d0:	e7e4      	b.n	800649c <__kernel_rem_pio2+0x374>
 80064d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064d4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80064d8:	f7fa f824 	bl	8000524 <__aeabi_i2d>
 80064dc:	e8e5 0102 	strd	r0, r1, [r5], #8
 80064e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e2:	46ab      	mov	fp, r5
 80064e4:	461c      	mov	r4, r3
 80064e6:	f04f 0900 	mov.w	r9, #0
 80064ea:	2600      	movs	r6, #0
 80064ec:	2700      	movs	r7, #0
 80064ee:	9b06      	ldr	r3, [sp, #24]
 80064f0:	4599      	cmp	r9, r3
 80064f2:	dd06      	ble.n	8006502 <__kernel_rem_pio2+0x3da>
 80064f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80064fa:	f108 0801 	add.w	r8, r8, #1
 80064fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006500:	e7df      	b.n	80064c2 <__kernel_rem_pio2+0x39a>
 8006502:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006506:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800650a:	f7fa f875 	bl	80005f8 <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4630      	mov	r0, r6
 8006514:	4639      	mov	r1, r7
 8006516:	f7f9 feb9 	bl	800028c <__adddf3>
 800651a:	f109 0901 	add.w	r9, r9, #1
 800651e:	4606      	mov	r6, r0
 8006520:	460f      	mov	r7, r1
 8006522:	e7e4      	b.n	80064ee <__kernel_rem_pio2+0x3c6>
 8006524:	3d01      	subs	r5, #1
 8006526:	e748      	b.n	80063ba <__kernel_rem_pio2+0x292>
 8006528:	ec47 6b10 	vmov	d0, r6, r7
 800652c:	f1ca 0000 	rsb	r0, sl, #0
 8006530:	f000 fa92 	bl	8006a58 <scalbn>
 8006534:	ec57 6b10 	vmov	r6, r7, d0
 8006538:	4ba0      	ldr	r3, [pc, #640]	; (80067bc <__kernel_rem_pio2+0x694>)
 800653a:	ee10 0a10 	vmov	r0, s0
 800653e:	2200      	movs	r2, #0
 8006540:	4639      	mov	r1, r7
 8006542:	f7fa fadf 	bl	8000b04 <__aeabi_dcmpge>
 8006546:	b1f8      	cbz	r0, 8006588 <__kernel_rem_pio2+0x460>
 8006548:	4b9d      	ldr	r3, [pc, #628]	; (80067c0 <__kernel_rem_pio2+0x698>)
 800654a:	2200      	movs	r2, #0
 800654c:	4630      	mov	r0, r6
 800654e:	4639      	mov	r1, r7
 8006550:	f7fa f852 	bl	80005f8 <__aeabi_dmul>
 8006554:	f7fa fb00 	bl	8000b58 <__aeabi_d2iz>
 8006558:	4680      	mov	r8, r0
 800655a:	f7f9 ffe3 	bl	8000524 <__aeabi_i2d>
 800655e:	4b97      	ldr	r3, [pc, #604]	; (80067bc <__kernel_rem_pio2+0x694>)
 8006560:	2200      	movs	r2, #0
 8006562:	f7fa f849 	bl	80005f8 <__aeabi_dmul>
 8006566:	460b      	mov	r3, r1
 8006568:	4602      	mov	r2, r0
 800656a:	4639      	mov	r1, r7
 800656c:	4630      	mov	r0, r6
 800656e:	f7f9 fe8b 	bl	8000288 <__aeabi_dsub>
 8006572:	f7fa faf1 	bl	8000b58 <__aeabi_d2iz>
 8006576:	1c65      	adds	r5, r4, #1
 8006578:	ab0e      	add	r3, sp, #56	; 0x38
 800657a:	f10a 0a18 	add.w	sl, sl, #24
 800657e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006582:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006586:	e720      	b.n	80063ca <__kernel_rem_pio2+0x2a2>
 8006588:	4630      	mov	r0, r6
 800658a:	4639      	mov	r1, r7
 800658c:	f7fa fae4 	bl	8000b58 <__aeabi_d2iz>
 8006590:	ab0e      	add	r3, sp, #56	; 0x38
 8006592:	4625      	mov	r5, r4
 8006594:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006598:	e717      	b.n	80063ca <__kernel_rem_pio2+0x2a2>
 800659a:	ab0e      	add	r3, sp, #56	; 0x38
 800659c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80065a0:	f7f9 ffc0 	bl	8000524 <__aeabi_i2d>
 80065a4:	4632      	mov	r2, r6
 80065a6:	463b      	mov	r3, r7
 80065a8:	f7fa f826 	bl	80005f8 <__aeabi_dmul>
 80065ac:	4b84      	ldr	r3, [pc, #528]	; (80067c0 <__kernel_rem_pio2+0x698>)
 80065ae:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80065b2:	2200      	movs	r2, #0
 80065b4:	4630      	mov	r0, r6
 80065b6:	4639      	mov	r1, r7
 80065b8:	f7fa f81e 	bl	80005f8 <__aeabi_dmul>
 80065bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065c0:	4606      	mov	r6, r0
 80065c2:	460f      	mov	r7, r1
 80065c4:	e70f      	b.n	80063e6 <__kernel_rem_pio2+0x2be>
 80065c6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80065ca:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80065ce:	f7fa f813 	bl	80005f8 <__aeabi_dmul>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065da:	f7f9 fe57 	bl	800028c <__adddf3>
 80065de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065e2:	f108 0801 	add.w	r8, r8, #1
 80065e6:	9b02      	ldr	r3, [sp, #8]
 80065e8:	4598      	cmp	r8, r3
 80065ea:	dc01      	bgt.n	80065f0 <__kernel_rem_pio2+0x4c8>
 80065ec:	45b8      	cmp	r8, r7
 80065ee:	ddea      	ble.n	80065c6 <__kernel_rem_pio2+0x49e>
 80065f0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80065f4:	ab4a      	add	r3, sp, #296	; 0x128
 80065f6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80065fa:	ed87 7b00 	vstr	d7, [r7]
 80065fe:	3e01      	subs	r6, #1
 8006600:	e6f8      	b.n	80063f4 <__kernel_rem_pio2+0x2cc>
 8006602:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006604:	2b02      	cmp	r3, #2
 8006606:	dc0b      	bgt.n	8006620 <__kernel_rem_pio2+0x4f8>
 8006608:	2b00      	cmp	r3, #0
 800660a:	dc35      	bgt.n	8006678 <__kernel_rem_pio2+0x550>
 800660c:	d059      	beq.n	80066c2 <__kernel_rem_pio2+0x59a>
 800660e:	9b04      	ldr	r3, [sp, #16]
 8006610:	f003 0007 	and.w	r0, r3, #7
 8006614:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006618:	ecbd 8b02 	vpop	{d8}
 800661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006620:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006622:	2b03      	cmp	r3, #3
 8006624:	d1f3      	bne.n	800660e <__kernel_rem_pio2+0x4e6>
 8006626:	ab4a      	add	r3, sp, #296	; 0x128
 8006628:	4423      	add	r3, r4
 800662a:	9306      	str	r3, [sp, #24]
 800662c:	461c      	mov	r4, r3
 800662e:	469a      	mov	sl, r3
 8006630:	9502      	str	r5, [sp, #8]
 8006632:	9b02      	ldr	r3, [sp, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f1aa 0a08 	sub.w	sl, sl, #8
 800663a:	dc6b      	bgt.n	8006714 <__kernel_rem_pio2+0x5ec>
 800663c:	46aa      	mov	sl, r5
 800663e:	f1ba 0f01 	cmp.w	sl, #1
 8006642:	f1a4 0408 	sub.w	r4, r4, #8
 8006646:	f300 8085 	bgt.w	8006754 <__kernel_rem_pio2+0x62c>
 800664a:	9c06      	ldr	r4, [sp, #24]
 800664c:	2000      	movs	r0, #0
 800664e:	3408      	adds	r4, #8
 8006650:	2100      	movs	r1, #0
 8006652:	2d01      	cmp	r5, #1
 8006654:	f300 809d 	bgt.w	8006792 <__kernel_rem_pio2+0x66a>
 8006658:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800665c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006660:	f1bb 0f00 	cmp.w	fp, #0
 8006664:	f040 809b 	bne.w	800679e <__kernel_rem_pio2+0x676>
 8006668:	9b01      	ldr	r3, [sp, #4]
 800666a:	e9c3 5600 	strd	r5, r6, [r3]
 800666e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006672:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006676:	e7ca      	b.n	800660e <__kernel_rem_pio2+0x4e6>
 8006678:	3408      	adds	r4, #8
 800667a:	ab4a      	add	r3, sp, #296	; 0x128
 800667c:	441c      	add	r4, r3
 800667e:	462e      	mov	r6, r5
 8006680:	2000      	movs	r0, #0
 8006682:	2100      	movs	r1, #0
 8006684:	2e00      	cmp	r6, #0
 8006686:	da36      	bge.n	80066f6 <__kernel_rem_pio2+0x5ce>
 8006688:	f1bb 0f00 	cmp.w	fp, #0
 800668c:	d039      	beq.n	8006702 <__kernel_rem_pio2+0x5da>
 800668e:	4602      	mov	r2, r0
 8006690:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006694:	9c01      	ldr	r4, [sp, #4]
 8006696:	e9c4 2300 	strd	r2, r3, [r4]
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80066a2:	f7f9 fdf1 	bl	8000288 <__aeabi_dsub>
 80066a6:	ae4c      	add	r6, sp, #304	; 0x130
 80066a8:	2401      	movs	r4, #1
 80066aa:	42a5      	cmp	r5, r4
 80066ac:	da2c      	bge.n	8006708 <__kernel_rem_pio2+0x5e0>
 80066ae:	f1bb 0f00 	cmp.w	fp, #0
 80066b2:	d002      	beq.n	80066ba <__kernel_rem_pio2+0x592>
 80066b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066b8:	4619      	mov	r1, r3
 80066ba:	9b01      	ldr	r3, [sp, #4]
 80066bc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80066c0:	e7a5      	b.n	800660e <__kernel_rem_pio2+0x4e6>
 80066c2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80066c6:	eb0d 0403 	add.w	r4, sp, r3
 80066ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80066ce:	2000      	movs	r0, #0
 80066d0:	2100      	movs	r1, #0
 80066d2:	2d00      	cmp	r5, #0
 80066d4:	da09      	bge.n	80066ea <__kernel_rem_pio2+0x5c2>
 80066d6:	f1bb 0f00 	cmp.w	fp, #0
 80066da:	d002      	beq.n	80066e2 <__kernel_rem_pio2+0x5ba>
 80066dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80066e0:	4619      	mov	r1, r3
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	e9c3 0100 	strd	r0, r1, [r3]
 80066e8:	e791      	b.n	800660e <__kernel_rem_pio2+0x4e6>
 80066ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80066ee:	f7f9 fdcd 	bl	800028c <__adddf3>
 80066f2:	3d01      	subs	r5, #1
 80066f4:	e7ed      	b.n	80066d2 <__kernel_rem_pio2+0x5aa>
 80066f6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80066fa:	f7f9 fdc7 	bl	800028c <__adddf3>
 80066fe:	3e01      	subs	r6, #1
 8006700:	e7c0      	b.n	8006684 <__kernel_rem_pio2+0x55c>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	e7c5      	b.n	8006694 <__kernel_rem_pio2+0x56c>
 8006708:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800670c:	f7f9 fdbe 	bl	800028c <__adddf3>
 8006710:	3401      	adds	r4, #1
 8006712:	e7ca      	b.n	80066aa <__kernel_rem_pio2+0x582>
 8006714:	e9da 8900 	ldrd	r8, r9, [sl]
 8006718:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800671c:	9b02      	ldr	r3, [sp, #8]
 800671e:	3b01      	subs	r3, #1
 8006720:	9302      	str	r3, [sp, #8]
 8006722:	4632      	mov	r2, r6
 8006724:	463b      	mov	r3, r7
 8006726:	4640      	mov	r0, r8
 8006728:	4649      	mov	r1, r9
 800672a:	f7f9 fdaf 	bl	800028c <__adddf3>
 800672e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4640      	mov	r0, r8
 8006738:	4649      	mov	r1, r9
 800673a:	f7f9 fda5 	bl	8000288 <__aeabi_dsub>
 800673e:	4632      	mov	r2, r6
 8006740:	463b      	mov	r3, r7
 8006742:	f7f9 fda3 	bl	800028c <__adddf3>
 8006746:	ed9d 7b08 	vldr	d7, [sp, #32]
 800674a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800674e:	ed8a 7b00 	vstr	d7, [sl]
 8006752:	e76e      	b.n	8006632 <__kernel_rem_pio2+0x50a>
 8006754:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006758:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800675c:	4640      	mov	r0, r8
 800675e:	4632      	mov	r2, r6
 8006760:	463b      	mov	r3, r7
 8006762:	4649      	mov	r1, r9
 8006764:	f7f9 fd92 	bl	800028c <__adddf3>
 8006768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4640      	mov	r0, r8
 8006772:	4649      	mov	r1, r9
 8006774:	f7f9 fd88 	bl	8000288 <__aeabi_dsub>
 8006778:	4632      	mov	r2, r6
 800677a:	463b      	mov	r3, r7
 800677c:	f7f9 fd86 	bl	800028c <__adddf3>
 8006780:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006784:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006788:	ed84 7b00 	vstr	d7, [r4]
 800678c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006790:	e755      	b.n	800663e <__kernel_rem_pio2+0x516>
 8006792:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006796:	f7f9 fd79 	bl	800028c <__adddf3>
 800679a:	3d01      	subs	r5, #1
 800679c:	e759      	b.n	8006652 <__kernel_rem_pio2+0x52a>
 800679e:	9b01      	ldr	r3, [sp, #4]
 80067a0:	9a01      	ldr	r2, [sp, #4]
 80067a2:	601d      	str	r5, [r3, #0]
 80067a4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80067a8:	605c      	str	r4, [r3, #4]
 80067aa:	609f      	str	r7, [r3, #8]
 80067ac:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80067b0:	60d3      	str	r3, [r2, #12]
 80067b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067b6:	6110      	str	r0, [r2, #16]
 80067b8:	6153      	str	r3, [r2, #20]
 80067ba:	e728      	b.n	800660e <__kernel_rem_pio2+0x4e6>
 80067bc:	41700000 	.word	0x41700000
 80067c0:	3e700000 	.word	0x3e700000
 80067c4:	00000000 	.word	0x00000000

080067c8 <__kernel_sin>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	ed2d 8b04 	vpush	{d8-d9}
 80067d0:	eeb0 8a41 	vmov.f32	s16, s2
 80067d4:	eef0 8a61 	vmov.f32	s17, s3
 80067d8:	ec55 4b10 	vmov	r4, r5, d0
 80067dc:	b083      	sub	sp, #12
 80067de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80067e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80067e6:	9001      	str	r0, [sp, #4]
 80067e8:	da06      	bge.n	80067f8 <__kernel_sin+0x30>
 80067ea:	ee10 0a10 	vmov	r0, s0
 80067ee:	4629      	mov	r1, r5
 80067f0:	f7fa f9b2 	bl	8000b58 <__aeabi_d2iz>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d051      	beq.n	800689c <__kernel_sin+0xd4>
 80067f8:	4622      	mov	r2, r4
 80067fa:	462b      	mov	r3, r5
 80067fc:	4620      	mov	r0, r4
 80067fe:	4629      	mov	r1, r5
 8006800:	f7f9 fefa 	bl	80005f8 <__aeabi_dmul>
 8006804:	4682      	mov	sl, r0
 8006806:	468b      	mov	fp, r1
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4620      	mov	r0, r4
 800680e:	4629      	mov	r1, r5
 8006810:	f7f9 fef2 	bl	80005f8 <__aeabi_dmul>
 8006814:	a341      	add	r3, pc, #260	; (adr r3, 800691c <__kernel_sin+0x154>)
 8006816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681a:	4680      	mov	r8, r0
 800681c:	4689      	mov	r9, r1
 800681e:	4650      	mov	r0, sl
 8006820:	4659      	mov	r1, fp
 8006822:	f7f9 fee9 	bl	80005f8 <__aeabi_dmul>
 8006826:	a33f      	add	r3, pc, #252	; (adr r3, 8006924 <__kernel_sin+0x15c>)
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f7f9 fd2c 	bl	8000288 <__aeabi_dsub>
 8006830:	4652      	mov	r2, sl
 8006832:	465b      	mov	r3, fp
 8006834:	f7f9 fee0 	bl	80005f8 <__aeabi_dmul>
 8006838:	a33c      	add	r3, pc, #240	; (adr r3, 800692c <__kernel_sin+0x164>)
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f7f9 fd25 	bl	800028c <__adddf3>
 8006842:	4652      	mov	r2, sl
 8006844:	465b      	mov	r3, fp
 8006846:	f7f9 fed7 	bl	80005f8 <__aeabi_dmul>
 800684a:	a33a      	add	r3, pc, #232	; (adr r3, 8006934 <__kernel_sin+0x16c>)
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f7f9 fd1a 	bl	8000288 <__aeabi_dsub>
 8006854:	4652      	mov	r2, sl
 8006856:	465b      	mov	r3, fp
 8006858:	f7f9 fece 	bl	80005f8 <__aeabi_dmul>
 800685c:	a337      	add	r3, pc, #220	; (adr r3, 800693c <__kernel_sin+0x174>)
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f7f9 fd13 	bl	800028c <__adddf3>
 8006866:	9b01      	ldr	r3, [sp, #4]
 8006868:	4606      	mov	r6, r0
 800686a:	460f      	mov	r7, r1
 800686c:	b9eb      	cbnz	r3, 80068aa <__kernel_sin+0xe2>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4650      	mov	r0, sl
 8006874:	4659      	mov	r1, fp
 8006876:	f7f9 febf 	bl	80005f8 <__aeabi_dmul>
 800687a:	a325      	add	r3, pc, #148	; (adr r3, 8006910 <__kernel_sin+0x148>)
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f7f9 fd02 	bl	8000288 <__aeabi_dsub>
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	f7f9 feb6 	bl	80005f8 <__aeabi_dmul>
 800688c:	4602      	mov	r2, r0
 800688e:	460b      	mov	r3, r1
 8006890:	4620      	mov	r0, r4
 8006892:	4629      	mov	r1, r5
 8006894:	f7f9 fcfa 	bl	800028c <__adddf3>
 8006898:	4604      	mov	r4, r0
 800689a:	460d      	mov	r5, r1
 800689c:	ec45 4b10 	vmov	d0, r4, r5
 80068a0:	b003      	add	sp, #12
 80068a2:	ecbd 8b04 	vpop	{d8-d9}
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	4b1b      	ldr	r3, [pc, #108]	; (8006918 <__kernel_sin+0x150>)
 80068ac:	ec51 0b18 	vmov	r0, r1, d8
 80068b0:	2200      	movs	r2, #0
 80068b2:	f7f9 fea1 	bl	80005f8 <__aeabi_dmul>
 80068b6:	4632      	mov	r2, r6
 80068b8:	ec41 0b19 	vmov	d9, r0, r1
 80068bc:	463b      	mov	r3, r7
 80068be:	4640      	mov	r0, r8
 80068c0:	4649      	mov	r1, r9
 80068c2:	f7f9 fe99 	bl	80005f8 <__aeabi_dmul>
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	ec51 0b19 	vmov	r0, r1, d9
 80068ce:	f7f9 fcdb 	bl	8000288 <__aeabi_dsub>
 80068d2:	4652      	mov	r2, sl
 80068d4:	465b      	mov	r3, fp
 80068d6:	f7f9 fe8f 	bl	80005f8 <__aeabi_dmul>
 80068da:	ec53 2b18 	vmov	r2, r3, d8
 80068de:	f7f9 fcd3 	bl	8000288 <__aeabi_dsub>
 80068e2:	a30b      	add	r3, pc, #44	; (adr r3, 8006910 <__kernel_sin+0x148>)
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	4606      	mov	r6, r0
 80068ea:	460f      	mov	r7, r1
 80068ec:	4640      	mov	r0, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	f7f9 fe82 	bl	80005f8 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4630      	mov	r0, r6
 80068fa:	4639      	mov	r1, r7
 80068fc:	f7f9 fcc6 	bl	800028c <__adddf3>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4620      	mov	r0, r4
 8006906:	4629      	mov	r1, r5
 8006908:	f7f9 fcbe 	bl	8000288 <__aeabi_dsub>
 800690c:	e7c4      	b.n	8006898 <__kernel_sin+0xd0>
 800690e:	bf00      	nop
 8006910:	55555549 	.word	0x55555549
 8006914:	3fc55555 	.word	0x3fc55555
 8006918:	3fe00000 	.word	0x3fe00000
 800691c:	5acfd57c 	.word	0x5acfd57c
 8006920:	3de5d93a 	.word	0x3de5d93a
 8006924:	8a2b9ceb 	.word	0x8a2b9ceb
 8006928:	3e5ae5e6 	.word	0x3e5ae5e6
 800692c:	57b1fe7d 	.word	0x57b1fe7d
 8006930:	3ec71de3 	.word	0x3ec71de3
 8006934:	19c161d5 	.word	0x19c161d5
 8006938:	3f2a01a0 	.word	0x3f2a01a0
 800693c:	1110f8a6 	.word	0x1110f8a6
 8006940:	3f811111 	.word	0x3f811111

08006944 <fabs>:
 8006944:	ec51 0b10 	vmov	r0, r1, d0
 8006948:	ee10 2a10 	vmov	r2, s0
 800694c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006950:	ec43 2b10 	vmov	d0, r2, r3
 8006954:	4770      	bx	lr
	...

08006958 <floor>:
 8006958:	ec51 0b10 	vmov	r0, r1, d0
 800695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006964:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006968:	2e13      	cmp	r6, #19
 800696a:	ee10 5a10 	vmov	r5, s0
 800696e:	ee10 8a10 	vmov	r8, s0
 8006972:	460c      	mov	r4, r1
 8006974:	dc32      	bgt.n	80069dc <floor+0x84>
 8006976:	2e00      	cmp	r6, #0
 8006978:	da14      	bge.n	80069a4 <floor+0x4c>
 800697a:	a333      	add	r3, pc, #204	; (adr r3, 8006a48 <floor+0xf0>)
 800697c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006980:	f7f9 fc84 	bl	800028c <__adddf3>
 8006984:	2200      	movs	r2, #0
 8006986:	2300      	movs	r3, #0
 8006988:	f7fa f8c6 	bl	8000b18 <__aeabi_dcmpgt>
 800698c:	b138      	cbz	r0, 800699e <floor+0x46>
 800698e:	2c00      	cmp	r4, #0
 8006990:	da57      	bge.n	8006a42 <floor+0xea>
 8006992:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006996:	431d      	orrs	r5, r3
 8006998:	d001      	beq.n	800699e <floor+0x46>
 800699a:	4c2d      	ldr	r4, [pc, #180]	; (8006a50 <floor+0xf8>)
 800699c:	2500      	movs	r5, #0
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	e025      	b.n	80069f0 <floor+0x98>
 80069a4:	4f2b      	ldr	r7, [pc, #172]	; (8006a54 <floor+0xfc>)
 80069a6:	4137      	asrs	r7, r6
 80069a8:	ea01 0307 	and.w	r3, r1, r7
 80069ac:	4303      	orrs	r3, r0
 80069ae:	d01f      	beq.n	80069f0 <floor+0x98>
 80069b0:	a325      	add	r3, pc, #148	; (adr r3, 8006a48 <floor+0xf0>)
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	f7f9 fc69 	bl	800028c <__adddf3>
 80069ba:	2200      	movs	r2, #0
 80069bc:	2300      	movs	r3, #0
 80069be:	f7fa f8ab 	bl	8000b18 <__aeabi_dcmpgt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d0eb      	beq.n	800699e <floor+0x46>
 80069c6:	2c00      	cmp	r4, #0
 80069c8:	bfbe      	ittt	lt
 80069ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80069ce:	fa43 f606 	asrlt.w	r6, r3, r6
 80069d2:	19a4      	addlt	r4, r4, r6
 80069d4:	ea24 0407 	bic.w	r4, r4, r7
 80069d8:	2500      	movs	r5, #0
 80069da:	e7e0      	b.n	800699e <floor+0x46>
 80069dc:	2e33      	cmp	r6, #51	; 0x33
 80069de:	dd0b      	ble.n	80069f8 <floor+0xa0>
 80069e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80069e4:	d104      	bne.n	80069f0 <floor+0x98>
 80069e6:	ee10 2a10 	vmov	r2, s0
 80069ea:	460b      	mov	r3, r1
 80069ec:	f7f9 fc4e 	bl	800028c <__adddf3>
 80069f0:	ec41 0b10 	vmov	d0, r0, r1
 80069f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80069fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006a00:	fa23 f707 	lsr.w	r7, r3, r7
 8006a04:	4207      	tst	r7, r0
 8006a06:	d0f3      	beq.n	80069f0 <floor+0x98>
 8006a08:	a30f      	add	r3, pc, #60	; (adr r3, 8006a48 <floor+0xf0>)
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	f7f9 fc3d 	bl	800028c <__adddf3>
 8006a12:	2200      	movs	r2, #0
 8006a14:	2300      	movs	r3, #0
 8006a16:	f7fa f87f 	bl	8000b18 <__aeabi_dcmpgt>
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d0bf      	beq.n	800699e <floor+0x46>
 8006a1e:	2c00      	cmp	r4, #0
 8006a20:	da02      	bge.n	8006a28 <floor+0xd0>
 8006a22:	2e14      	cmp	r6, #20
 8006a24:	d103      	bne.n	8006a2e <floor+0xd6>
 8006a26:	3401      	adds	r4, #1
 8006a28:	ea25 0507 	bic.w	r5, r5, r7
 8006a2c:	e7b7      	b.n	800699e <floor+0x46>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006a34:	fa03 f606 	lsl.w	r6, r3, r6
 8006a38:	4435      	add	r5, r6
 8006a3a:	4545      	cmp	r5, r8
 8006a3c:	bf38      	it	cc
 8006a3e:	18e4      	addcc	r4, r4, r3
 8006a40:	e7f2      	b.n	8006a28 <floor+0xd0>
 8006a42:	2500      	movs	r5, #0
 8006a44:	462c      	mov	r4, r5
 8006a46:	e7aa      	b.n	800699e <floor+0x46>
 8006a48:	8800759c 	.word	0x8800759c
 8006a4c:	7e37e43c 	.word	0x7e37e43c
 8006a50:	bff00000 	.word	0xbff00000
 8006a54:	000fffff 	.word	0x000fffff

08006a58 <scalbn>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	ec55 4b10 	vmov	r4, r5, d0
 8006a5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006a62:	4606      	mov	r6, r0
 8006a64:	462b      	mov	r3, r5
 8006a66:	b99a      	cbnz	r2, 8006a90 <scalbn+0x38>
 8006a68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a6c:	4323      	orrs	r3, r4
 8006a6e:	d036      	beq.n	8006ade <scalbn+0x86>
 8006a70:	4b39      	ldr	r3, [pc, #228]	; (8006b58 <scalbn+0x100>)
 8006a72:	4629      	mov	r1, r5
 8006a74:	ee10 0a10 	vmov	r0, s0
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f7f9 fdbd 	bl	80005f8 <__aeabi_dmul>
 8006a7e:	4b37      	ldr	r3, [pc, #220]	; (8006b5c <scalbn+0x104>)
 8006a80:	429e      	cmp	r6, r3
 8006a82:	4604      	mov	r4, r0
 8006a84:	460d      	mov	r5, r1
 8006a86:	da10      	bge.n	8006aaa <scalbn+0x52>
 8006a88:	a32b      	add	r3, pc, #172	; (adr r3, 8006b38 <scalbn+0xe0>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	e03a      	b.n	8006b06 <scalbn+0xae>
 8006a90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006a94:	428a      	cmp	r2, r1
 8006a96:	d10c      	bne.n	8006ab2 <scalbn+0x5a>
 8006a98:	ee10 2a10 	vmov	r2, s0
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f7f9 fbf4 	bl	800028c <__adddf3>
 8006aa4:	4604      	mov	r4, r0
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	e019      	b.n	8006ade <scalbn+0x86>
 8006aaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006aae:	460b      	mov	r3, r1
 8006ab0:	3a36      	subs	r2, #54	; 0x36
 8006ab2:	4432      	add	r2, r6
 8006ab4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ab8:	428a      	cmp	r2, r1
 8006aba:	dd08      	ble.n	8006ace <scalbn+0x76>
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	a120      	add	r1, pc, #128	; (adr r1, 8006b40 <scalbn+0xe8>)
 8006ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ac4:	da1c      	bge.n	8006b00 <scalbn+0xa8>
 8006ac6:	a120      	add	r1, pc, #128	; (adr r1, 8006b48 <scalbn+0xf0>)
 8006ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006acc:	e018      	b.n	8006b00 <scalbn+0xa8>
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	dd08      	ble.n	8006ae4 <scalbn+0x8c>
 8006ad2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006ad6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ada:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ade:	ec45 4b10 	vmov	d0, r4, r5
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006ae8:	da19      	bge.n	8006b1e <scalbn+0xc6>
 8006aea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006aee:	429e      	cmp	r6, r3
 8006af0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006af4:	dd0a      	ble.n	8006b0c <scalbn+0xb4>
 8006af6:	a112      	add	r1, pc, #72	; (adr r1, 8006b40 <scalbn+0xe8>)
 8006af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1e2      	bne.n	8006ac6 <scalbn+0x6e>
 8006b00:	a30f      	add	r3, pc, #60	; (adr r3, 8006b40 <scalbn+0xe8>)
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f7f9 fd77 	bl	80005f8 <__aeabi_dmul>
 8006b0a:	e7cb      	b.n	8006aa4 <scalbn+0x4c>
 8006b0c:	a10a      	add	r1, pc, #40	; (adr r1, 8006b38 <scalbn+0xe0>)
 8006b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0b8      	beq.n	8006a88 <scalbn+0x30>
 8006b16:	a10e      	add	r1, pc, #56	; (adr r1, 8006b50 <scalbn+0xf8>)
 8006b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b1c:	e7b4      	b.n	8006a88 <scalbn+0x30>
 8006b1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b22:	3236      	adds	r2, #54	; 0x36
 8006b24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <scalbn+0x108>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	e7e8      	b.n	8006b06 <scalbn+0xae>
 8006b34:	f3af 8000 	nop.w
 8006b38:	c2f8f359 	.word	0xc2f8f359
 8006b3c:	01a56e1f 	.word	0x01a56e1f
 8006b40:	8800759c 	.word	0x8800759c
 8006b44:	7e37e43c 	.word	0x7e37e43c
 8006b48:	8800759c 	.word	0x8800759c
 8006b4c:	fe37e43c 	.word	0xfe37e43c
 8006b50:	c2f8f359 	.word	0xc2f8f359
 8006b54:	81a56e1f 	.word	0x81a56e1f
 8006b58:	43500000 	.word	0x43500000
 8006b5c:	ffff3cb0 	.word	0xffff3cb0
 8006b60:	3c900000 	.word	0x3c900000

08006b64 <__errno>:
 8006b64:	4b01      	ldr	r3, [pc, #4]	; (8006b6c <__errno+0x8>)
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	20000010 	.word	0x20000010

08006b70 <__libc_init_array>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	4d0d      	ldr	r5, [pc, #52]	; (8006ba8 <__libc_init_array+0x38>)
 8006b74:	4c0d      	ldr	r4, [pc, #52]	; (8006bac <__libc_init_array+0x3c>)
 8006b76:	1b64      	subs	r4, r4, r5
 8006b78:	10a4      	asrs	r4, r4, #2
 8006b7a:	2600      	movs	r6, #0
 8006b7c:	42a6      	cmp	r6, r4
 8006b7e:	d109      	bne.n	8006b94 <__libc_init_array+0x24>
 8006b80:	4d0b      	ldr	r5, [pc, #44]	; (8006bb0 <__libc_init_array+0x40>)
 8006b82:	4c0c      	ldr	r4, [pc, #48]	; (8006bb4 <__libc_init_array+0x44>)
 8006b84:	f002 fd4e 	bl	8009624 <_init>
 8006b88:	1b64      	subs	r4, r4, r5
 8006b8a:	10a4      	asrs	r4, r4, #2
 8006b8c:	2600      	movs	r6, #0
 8006b8e:	42a6      	cmp	r6, r4
 8006b90:	d105      	bne.n	8006b9e <__libc_init_array+0x2e>
 8006b92:	bd70      	pop	{r4, r5, r6, pc}
 8006b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b98:	4798      	blx	r3
 8006b9a:	3601      	adds	r6, #1
 8006b9c:	e7ee      	b.n	8006b7c <__libc_init_array+0xc>
 8006b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba2:	4798      	blx	r3
 8006ba4:	3601      	adds	r6, #1
 8006ba6:	e7f2      	b.n	8006b8e <__libc_init_array+0x1e>
 8006ba8:	08009c5c 	.word	0x08009c5c
 8006bac:	08009c5c 	.word	0x08009c5c
 8006bb0:	08009c5c 	.word	0x08009c5c
 8006bb4:	08009c60 	.word	0x08009c60

08006bb8 <memset>:
 8006bb8:	4402      	add	r2, r0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d100      	bne.n	8006bc2 <memset+0xa>
 8006bc0:	4770      	bx	lr
 8006bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bc6:	e7f9      	b.n	8006bbc <memset+0x4>

08006bc8 <__cvt>:
 8006bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	ec55 4b10 	vmov	r4, r5, d0
 8006bd0:	2d00      	cmp	r5, #0
 8006bd2:	460e      	mov	r6, r1
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	462b      	mov	r3, r5
 8006bd8:	bfbb      	ittet	lt
 8006bda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bde:	461d      	movlt	r5, r3
 8006be0:	2300      	movge	r3, #0
 8006be2:	232d      	movlt	r3, #45	; 0x2d
 8006be4:	700b      	strb	r3, [r1, #0]
 8006be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006be8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bec:	4691      	mov	r9, r2
 8006bee:	f023 0820 	bic.w	r8, r3, #32
 8006bf2:	bfbc      	itt	lt
 8006bf4:	4622      	movlt	r2, r4
 8006bf6:	4614      	movlt	r4, r2
 8006bf8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bfc:	d005      	beq.n	8006c0a <__cvt+0x42>
 8006bfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c02:	d100      	bne.n	8006c06 <__cvt+0x3e>
 8006c04:	3601      	adds	r6, #1
 8006c06:	2102      	movs	r1, #2
 8006c08:	e000      	b.n	8006c0c <__cvt+0x44>
 8006c0a:	2103      	movs	r1, #3
 8006c0c:	ab03      	add	r3, sp, #12
 8006c0e:	9301      	str	r3, [sp, #4]
 8006c10:	ab02      	add	r3, sp, #8
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	ec45 4b10 	vmov	d0, r4, r5
 8006c18:	4653      	mov	r3, sl
 8006c1a:	4632      	mov	r2, r6
 8006c1c:	f000 fda4 	bl	8007768 <_dtoa_r>
 8006c20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c24:	4607      	mov	r7, r0
 8006c26:	d102      	bne.n	8006c2e <__cvt+0x66>
 8006c28:	f019 0f01 	tst.w	r9, #1
 8006c2c:	d022      	beq.n	8006c74 <__cvt+0xac>
 8006c2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c32:	eb07 0906 	add.w	r9, r7, r6
 8006c36:	d110      	bne.n	8006c5a <__cvt+0x92>
 8006c38:	783b      	ldrb	r3, [r7, #0]
 8006c3a:	2b30      	cmp	r3, #48	; 0x30
 8006c3c:	d10a      	bne.n	8006c54 <__cvt+0x8c>
 8006c3e:	2200      	movs	r2, #0
 8006c40:	2300      	movs	r3, #0
 8006c42:	4620      	mov	r0, r4
 8006c44:	4629      	mov	r1, r5
 8006c46:	f7f9 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c4a:	b918      	cbnz	r0, 8006c54 <__cvt+0x8c>
 8006c4c:	f1c6 0601 	rsb	r6, r6, #1
 8006c50:	f8ca 6000 	str.w	r6, [sl]
 8006c54:	f8da 3000 	ldr.w	r3, [sl]
 8006c58:	4499      	add	r9, r3
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4620      	mov	r0, r4
 8006c60:	4629      	mov	r1, r5
 8006c62:	f7f9 ff31 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c66:	b108      	cbz	r0, 8006c6c <__cvt+0xa4>
 8006c68:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c6c:	2230      	movs	r2, #48	; 0x30
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	454b      	cmp	r3, r9
 8006c72:	d307      	bcc.n	8006c84 <__cvt+0xbc>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c78:	1bdb      	subs	r3, r3, r7
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	b004      	add	sp, #16
 8006c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c84:	1c59      	adds	r1, r3, #1
 8006c86:	9103      	str	r1, [sp, #12]
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	e7f0      	b.n	8006c6e <__cvt+0xa6>

08006c8c <__exponent>:
 8006c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2900      	cmp	r1, #0
 8006c92:	bfb8      	it	lt
 8006c94:	4249      	neglt	r1, r1
 8006c96:	f803 2b02 	strb.w	r2, [r3], #2
 8006c9a:	bfb4      	ite	lt
 8006c9c:	222d      	movlt	r2, #45	; 0x2d
 8006c9e:	222b      	movge	r2, #43	; 0x2b
 8006ca0:	2909      	cmp	r1, #9
 8006ca2:	7042      	strb	r2, [r0, #1]
 8006ca4:	dd2a      	ble.n	8006cfc <__exponent+0x70>
 8006ca6:	f10d 0407 	add.w	r4, sp, #7
 8006caa:	46a4      	mov	ip, r4
 8006cac:	270a      	movs	r7, #10
 8006cae:	46a6      	mov	lr, r4
 8006cb0:	460a      	mov	r2, r1
 8006cb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006cb6:	fb07 1516 	mls	r5, r7, r6, r1
 8006cba:	3530      	adds	r5, #48	; 0x30
 8006cbc:	2a63      	cmp	r2, #99	; 0x63
 8006cbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8006cc2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	dcf1      	bgt.n	8006cae <__exponent+0x22>
 8006cca:	3130      	adds	r1, #48	; 0x30
 8006ccc:	f1ae 0502 	sub.w	r5, lr, #2
 8006cd0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006cd4:	1c44      	adds	r4, r0, #1
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4561      	cmp	r1, ip
 8006cda:	d30a      	bcc.n	8006cf2 <__exponent+0x66>
 8006cdc:	f10d 0209 	add.w	r2, sp, #9
 8006ce0:	eba2 020e 	sub.w	r2, r2, lr
 8006ce4:	4565      	cmp	r5, ip
 8006ce6:	bf88      	it	hi
 8006ce8:	2200      	movhi	r2, #0
 8006cea:	4413      	add	r3, r2
 8006cec:	1a18      	subs	r0, r3, r0
 8006cee:	b003      	add	sp, #12
 8006cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cf6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cfa:	e7ed      	b.n	8006cd8 <__exponent+0x4c>
 8006cfc:	2330      	movs	r3, #48	; 0x30
 8006cfe:	3130      	adds	r1, #48	; 0x30
 8006d00:	7083      	strb	r3, [r0, #2]
 8006d02:	70c1      	strb	r1, [r0, #3]
 8006d04:	1d03      	adds	r3, r0, #4
 8006d06:	e7f1      	b.n	8006cec <__exponent+0x60>

08006d08 <_printf_float>:
 8006d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0c:	ed2d 8b02 	vpush	{d8}
 8006d10:	b08d      	sub	sp, #52	; 0x34
 8006d12:	460c      	mov	r4, r1
 8006d14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d18:	4616      	mov	r6, r2
 8006d1a:	461f      	mov	r7, r3
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	f001 fcc9 	bl	80086b4 <_localeconv_r>
 8006d22:	f8d0 a000 	ldr.w	sl, [r0]
 8006d26:	4650      	mov	r0, sl
 8006d28:	f7f9 fa52 	bl	80001d0 <strlen>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	9305      	str	r3, [sp, #20]
 8006d34:	f8d8 3000 	ldr.w	r3, [r8]
 8006d38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d3c:	3307      	adds	r3, #7
 8006d3e:	f023 0307 	bic.w	r3, r3, #7
 8006d42:	f103 0208 	add.w	r2, r3, #8
 8006d46:	f8c8 2000 	str.w	r2, [r8]
 8006d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d5a:	9307      	str	r3, [sp, #28]
 8006d5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d60:	ee08 0a10 	vmov	s16, r0
 8006d64:	4b9f      	ldr	r3, [pc, #636]	; (8006fe4 <_printf_float+0x2dc>)
 8006d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d6e:	f7f9 fedd 	bl	8000b2c <__aeabi_dcmpun>
 8006d72:	bb88      	cbnz	r0, 8006dd8 <_printf_float+0xd0>
 8006d74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d78:	4b9a      	ldr	r3, [pc, #616]	; (8006fe4 <_printf_float+0x2dc>)
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	f7f9 feb7 	bl	8000af0 <__aeabi_dcmple>
 8006d82:	bb48      	cbnz	r0, 8006dd8 <_printf_float+0xd0>
 8006d84:	2200      	movs	r2, #0
 8006d86:	2300      	movs	r3, #0
 8006d88:	4640      	mov	r0, r8
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	f7f9 fea6 	bl	8000adc <__aeabi_dcmplt>
 8006d90:	b110      	cbz	r0, 8006d98 <_printf_float+0x90>
 8006d92:	232d      	movs	r3, #45	; 0x2d
 8006d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d98:	4b93      	ldr	r3, [pc, #588]	; (8006fe8 <_printf_float+0x2e0>)
 8006d9a:	4894      	ldr	r0, [pc, #592]	; (8006fec <_printf_float+0x2e4>)
 8006d9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006da0:	bf94      	ite	ls
 8006da2:	4698      	movls	r8, r3
 8006da4:	4680      	movhi	r8, r0
 8006da6:	2303      	movs	r3, #3
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	9b05      	ldr	r3, [sp, #20]
 8006dac:	f023 0204 	bic.w	r2, r3, #4
 8006db0:	6022      	str	r2, [r4, #0]
 8006db2:	f04f 0900 	mov.w	r9, #0
 8006db6:	9700      	str	r7, [sp, #0]
 8006db8:	4633      	mov	r3, r6
 8006dba:	aa0b      	add	r2, sp, #44	; 0x2c
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 f9d8 	bl	8007174 <_printf_common>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	f040 8090 	bne.w	8006eea <_printf_float+0x1e2>
 8006dca:	f04f 30ff 	mov.w	r0, #4294967295
 8006dce:	b00d      	add	sp, #52	; 0x34
 8006dd0:	ecbd 8b02 	vpop	{d8}
 8006dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	4640      	mov	r0, r8
 8006dde:	4649      	mov	r1, r9
 8006de0:	f7f9 fea4 	bl	8000b2c <__aeabi_dcmpun>
 8006de4:	b140      	cbz	r0, 8006df8 <_printf_float+0xf0>
 8006de6:	464b      	mov	r3, r9
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bfbc      	itt	lt
 8006dec:	232d      	movlt	r3, #45	; 0x2d
 8006dee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006df2:	487f      	ldr	r0, [pc, #508]	; (8006ff0 <_printf_float+0x2e8>)
 8006df4:	4b7f      	ldr	r3, [pc, #508]	; (8006ff4 <_printf_float+0x2ec>)
 8006df6:	e7d1      	b.n	8006d9c <_printf_float+0x94>
 8006df8:	6863      	ldr	r3, [r4, #4]
 8006dfa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dfe:	9206      	str	r2, [sp, #24]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	d13f      	bne.n	8006e84 <_printf_float+0x17c>
 8006e04:	2306      	movs	r3, #6
 8006e06:	6063      	str	r3, [r4, #4]
 8006e08:	9b05      	ldr	r3, [sp, #20]
 8006e0a:	6861      	ldr	r1, [r4, #4]
 8006e0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e10:	2300      	movs	r3, #0
 8006e12:	9303      	str	r3, [sp, #12]
 8006e14:	ab0a      	add	r3, sp, #40	; 0x28
 8006e16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e1a:	ab09      	add	r3, sp, #36	; 0x24
 8006e1c:	ec49 8b10 	vmov	d0, r8, r9
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	6022      	str	r2, [r4, #0]
 8006e24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f7ff fecd 	bl	8006bc8 <__cvt>
 8006e2e:	9b06      	ldr	r3, [sp, #24]
 8006e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e32:	2b47      	cmp	r3, #71	; 0x47
 8006e34:	4680      	mov	r8, r0
 8006e36:	d108      	bne.n	8006e4a <_printf_float+0x142>
 8006e38:	1cc8      	adds	r0, r1, #3
 8006e3a:	db02      	blt.n	8006e42 <_printf_float+0x13a>
 8006e3c:	6863      	ldr	r3, [r4, #4]
 8006e3e:	4299      	cmp	r1, r3
 8006e40:	dd41      	ble.n	8006ec6 <_printf_float+0x1be>
 8006e42:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e46:	fa5f fb8b 	uxtb.w	fp, fp
 8006e4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e4e:	d820      	bhi.n	8006e92 <_printf_float+0x18a>
 8006e50:	3901      	subs	r1, #1
 8006e52:	465a      	mov	r2, fp
 8006e54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e58:	9109      	str	r1, [sp, #36]	; 0x24
 8006e5a:	f7ff ff17 	bl	8006c8c <__exponent>
 8006e5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e60:	1813      	adds	r3, r2, r0
 8006e62:	2a01      	cmp	r2, #1
 8006e64:	4681      	mov	r9, r0
 8006e66:	6123      	str	r3, [r4, #16]
 8006e68:	dc02      	bgt.n	8006e70 <_printf_float+0x168>
 8006e6a:	6822      	ldr	r2, [r4, #0]
 8006e6c:	07d2      	lsls	r2, r2, #31
 8006e6e:	d501      	bpl.n	8006e74 <_printf_float+0x16c>
 8006e70:	3301      	adds	r3, #1
 8006e72:	6123      	str	r3, [r4, #16]
 8006e74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d09c      	beq.n	8006db6 <_printf_float+0xae>
 8006e7c:	232d      	movs	r3, #45	; 0x2d
 8006e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e82:	e798      	b.n	8006db6 <_printf_float+0xae>
 8006e84:	9a06      	ldr	r2, [sp, #24]
 8006e86:	2a47      	cmp	r2, #71	; 0x47
 8006e88:	d1be      	bne.n	8006e08 <_printf_float+0x100>
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1bc      	bne.n	8006e08 <_printf_float+0x100>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e7b9      	b.n	8006e06 <_printf_float+0xfe>
 8006e92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e96:	d118      	bne.n	8006eca <_printf_float+0x1c2>
 8006e98:	2900      	cmp	r1, #0
 8006e9a:	6863      	ldr	r3, [r4, #4]
 8006e9c:	dd0b      	ble.n	8006eb6 <_printf_float+0x1ae>
 8006e9e:	6121      	str	r1, [r4, #16]
 8006ea0:	b913      	cbnz	r3, 8006ea8 <_printf_float+0x1a0>
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	07d0      	lsls	r0, r2, #31
 8006ea6:	d502      	bpl.n	8006eae <_printf_float+0x1a6>
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	440b      	add	r3, r1
 8006eac:	6123      	str	r3, [r4, #16]
 8006eae:	65a1      	str	r1, [r4, #88]	; 0x58
 8006eb0:	f04f 0900 	mov.w	r9, #0
 8006eb4:	e7de      	b.n	8006e74 <_printf_float+0x16c>
 8006eb6:	b913      	cbnz	r3, 8006ebe <_printf_float+0x1b6>
 8006eb8:	6822      	ldr	r2, [r4, #0]
 8006eba:	07d2      	lsls	r2, r2, #31
 8006ebc:	d501      	bpl.n	8006ec2 <_printf_float+0x1ba>
 8006ebe:	3302      	adds	r3, #2
 8006ec0:	e7f4      	b.n	8006eac <_printf_float+0x1a4>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e7f2      	b.n	8006eac <_printf_float+0x1a4>
 8006ec6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ecc:	4299      	cmp	r1, r3
 8006ece:	db05      	blt.n	8006edc <_printf_float+0x1d4>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	6121      	str	r1, [r4, #16]
 8006ed4:	07d8      	lsls	r0, r3, #31
 8006ed6:	d5ea      	bpl.n	8006eae <_printf_float+0x1a6>
 8006ed8:	1c4b      	adds	r3, r1, #1
 8006eda:	e7e7      	b.n	8006eac <_printf_float+0x1a4>
 8006edc:	2900      	cmp	r1, #0
 8006ede:	bfd4      	ite	le
 8006ee0:	f1c1 0202 	rsble	r2, r1, #2
 8006ee4:	2201      	movgt	r2, #1
 8006ee6:	4413      	add	r3, r2
 8006ee8:	e7e0      	b.n	8006eac <_printf_float+0x1a4>
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	055a      	lsls	r2, r3, #21
 8006eee:	d407      	bmi.n	8006f00 <_printf_float+0x1f8>
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b8      	blx	r7
 8006efa:	3001      	adds	r0, #1
 8006efc:	d12c      	bne.n	8006f58 <_printf_float+0x250>
 8006efe:	e764      	b.n	8006dca <_printf_float+0xc2>
 8006f00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f04:	f240 80e0 	bls.w	80070c8 <_printf_float+0x3c0>
 8006f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f7f9 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d034      	beq.n	8006f82 <_printf_float+0x27a>
 8006f18:	4a37      	ldr	r2, [pc, #220]	; (8006ff8 <_printf_float+0x2f0>)
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	f43f af51 	beq.w	8006dca <_printf_float+0xc2>
 8006f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	db02      	blt.n	8006f36 <_printf_float+0x22e>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	07d8      	lsls	r0, r3, #31
 8006f34:	d510      	bpl.n	8006f58 <_printf_float+0x250>
 8006f36:	ee18 3a10 	vmov	r3, s16
 8006f3a:	4652      	mov	r2, sl
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4628      	mov	r0, r5
 8006f40:	47b8      	blx	r7
 8006f42:	3001      	adds	r0, #1
 8006f44:	f43f af41 	beq.w	8006dca <_printf_float+0xc2>
 8006f48:	f04f 0800 	mov.w	r8, #0
 8006f4c:	f104 091a 	add.w	r9, r4, #26
 8006f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f52:	3b01      	subs	r3, #1
 8006f54:	4543      	cmp	r3, r8
 8006f56:	dc09      	bgt.n	8006f6c <_printf_float+0x264>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	079b      	lsls	r3, r3, #30
 8006f5c:	f100 8105 	bmi.w	800716a <_printf_float+0x462>
 8006f60:	68e0      	ldr	r0, [r4, #12]
 8006f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f64:	4298      	cmp	r0, r3
 8006f66:	bfb8      	it	lt
 8006f68:	4618      	movlt	r0, r3
 8006f6a:	e730      	b.n	8006dce <_printf_float+0xc6>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	464a      	mov	r2, r9
 8006f70:	4631      	mov	r1, r6
 8006f72:	4628      	mov	r0, r5
 8006f74:	47b8      	blx	r7
 8006f76:	3001      	adds	r0, #1
 8006f78:	f43f af27 	beq.w	8006dca <_printf_float+0xc2>
 8006f7c:	f108 0801 	add.w	r8, r8, #1
 8006f80:	e7e6      	b.n	8006f50 <_printf_float+0x248>
 8006f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dc39      	bgt.n	8006ffc <_printf_float+0x2f4>
 8006f88:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <_printf_float+0x2f0>)
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4628      	mov	r0, r5
 8006f90:	47b8      	blx	r7
 8006f92:	3001      	adds	r0, #1
 8006f94:	f43f af19 	beq.w	8006dca <_printf_float+0xc2>
 8006f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d102      	bne.n	8006fa6 <_printf_float+0x29e>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	07d9      	lsls	r1, r3, #31
 8006fa4:	d5d8      	bpl.n	8006f58 <_printf_float+0x250>
 8006fa6:	ee18 3a10 	vmov	r3, s16
 8006faa:	4652      	mov	r2, sl
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	47b8      	blx	r7
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f43f af09 	beq.w	8006dca <_printf_float+0xc2>
 8006fb8:	f04f 0900 	mov.w	r9, #0
 8006fbc:	f104 0a1a 	add.w	sl, r4, #26
 8006fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc2:	425b      	negs	r3, r3
 8006fc4:	454b      	cmp	r3, r9
 8006fc6:	dc01      	bgt.n	8006fcc <_printf_float+0x2c4>
 8006fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fca:	e792      	b.n	8006ef2 <_printf_float+0x1ea>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4652      	mov	r2, sl
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	f43f aef7 	beq.w	8006dca <_printf_float+0xc2>
 8006fdc:	f109 0901 	add.w	r9, r9, #1
 8006fe0:	e7ee      	b.n	8006fc0 <_printf_float+0x2b8>
 8006fe2:	bf00      	nop
 8006fe4:	7fefffff 	.word	0x7fefffff
 8006fe8:	08009884 	.word	0x08009884
 8006fec:	08009888 	.word	0x08009888
 8006ff0:	08009890 	.word	0x08009890
 8006ff4:	0800988c 	.word	0x0800988c
 8006ff8:	08009894 	.word	0x08009894
 8006ffc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007000:	429a      	cmp	r2, r3
 8007002:	bfa8      	it	ge
 8007004:	461a      	movge	r2, r3
 8007006:	2a00      	cmp	r2, #0
 8007008:	4691      	mov	r9, r2
 800700a:	dc37      	bgt.n	800707c <_printf_float+0x374>
 800700c:	f04f 0b00 	mov.w	fp, #0
 8007010:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007014:	f104 021a 	add.w	r2, r4, #26
 8007018:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800701a:	9305      	str	r3, [sp, #20]
 800701c:	eba3 0309 	sub.w	r3, r3, r9
 8007020:	455b      	cmp	r3, fp
 8007022:	dc33      	bgt.n	800708c <_printf_float+0x384>
 8007024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007028:	429a      	cmp	r2, r3
 800702a:	db3b      	blt.n	80070a4 <_printf_float+0x39c>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	07da      	lsls	r2, r3, #31
 8007030:	d438      	bmi.n	80070a4 <_printf_float+0x39c>
 8007032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007034:	9a05      	ldr	r2, [sp, #20]
 8007036:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007038:	1a9a      	subs	r2, r3, r2
 800703a:	eba3 0901 	sub.w	r9, r3, r1
 800703e:	4591      	cmp	r9, r2
 8007040:	bfa8      	it	ge
 8007042:	4691      	movge	r9, r2
 8007044:	f1b9 0f00 	cmp.w	r9, #0
 8007048:	dc35      	bgt.n	80070b6 <_printf_float+0x3ae>
 800704a:	f04f 0800 	mov.w	r8, #0
 800704e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007052:	f104 0a1a 	add.w	sl, r4, #26
 8007056:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800705a:	1a9b      	subs	r3, r3, r2
 800705c:	eba3 0309 	sub.w	r3, r3, r9
 8007060:	4543      	cmp	r3, r8
 8007062:	f77f af79 	ble.w	8006f58 <_printf_float+0x250>
 8007066:	2301      	movs	r3, #1
 8007068:	4652      	mov	r2, sl
 800706a:	4631      	mov	r1, r6
 800706c:	4628      	mov	r0, r5
 800706e:	47b8      	blx	r7
 8007070:	3001      	adds	r0, #1
 8007072:	f43f aeaa 	beq.w	8006dca <_printf_float+0xc2>
 8007076:	f108 0801 	add.w	r8, r8, #1
 800707a:	e7ec      	b.n	8007056 <_printf_float+0x34e>
 800707c:	4613      	mov	r3, r2
 800707e:	4631      	mov	r1, r6
 8007080:	4642      	mov	r2, r8
 8007082:	4628      	mov	r0, r5
 8007084:	47b8      	blx	r7
 8007086:	3001      	adds	r0, #1
 8007088:	d1c0      	bne.n	800700c <_printf_float+0x304>
 800708a:	e69e      	b.n	8006dca <_printf_float+0xc2>
 800708c:	2301      	movs	r3, #1
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	9205      	str	r2, [sp, #20]
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	f43f ae97 	beq.w	8006dca <_printf_float+0xc2>
 800709c:	9a05      	ldr	r2, [sp, #20]
 800709e:	f10b 0b01 	add.w	fp, fp, #1
 80070a2:	e7b9      	b.n	8007018 <_printf_float+0x310>
 80070a4:	ee18 3a10 	vmov	r3, s16
 80070a8:	4652      	mov	r2, sl
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	d1be      	bne.n	8007032 <_printf_float+0x32a>
 80070b4:	e689      	b.n	8006dca <_printf_float+0xc2>
 80070b6:	9a05      	ldr	r2, [sp, #20]
 80070b8:	464b      	mov	r3, r9
 80070ba:	4442      	add	r2, r8
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	d1c1      	bne.n	800704a <_printf_float+0x342>
 80070c6:	e680      	b.n	8006dca <_printf_float+0xc2>
 80070c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ca:	2a01      	cmp	r2, #1
 80070cc:	dc01      	bgt.n	80070d2 <_printf_float+0x3ca>
 80070ce:	07db      	lsls	r3, r3, #31
 80070d0:	d538      	bpl.n	8007144 <_printf_float+0x43c>
 80070d2:	2301      	movs	r3, #1
 80070d4:	4642      	mov	r2, r8
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	f43f ae74 	beq.w	8006dca <_printf_float+0xc2>
 80070e2:	ee18 3a10 	vmov	r3, s16
 80070e6:	4652      	mov	r2, sl
 80070e8:	4631      	mov	r1, r6
 80070ea:	4628      	mov	r0, r5
 80070ec:	47b8      	blx	r7
 80070ee:	3001      	adds	r0, #1
 80070f0:	f43f ae6b 	beq.w	8006dca <_printf_float+0xc2>
 80070f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070f8:	2200      	movs	r2, #0
 80070fa:	2300      	movs	r3, #0
 80070fc:	f7f9 fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007100:	b9d8      	cbnz	r0, 800713a <_printf_float+0x432>
 8007102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007104:	f108 0201 	add.w	r2, r8, #1
 8007108:	3b01      	subs	r3, #1
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	d10e      	bne.n	8007132 <_printf_float+0x42a>
 8007114:	e659      	b.n	8006dca <_printf_float+0xc2>
 8007116:	2301      	movs	r3, #1
 8007118:	4652      	mov	r2, sl
 800711a:	4631      	mov	r1, r6
 800711c:	4628      	mov	r0, r5
 800711e:	47b8      	blx	r7
 8007120:	3001      	adds	r0, #1
 8007122:	f43f ae52 	beq.w	8006dca <_printf_float+0xc2>
 8007126:	f108 0801 	add.w	r8, r8, #1
 800712a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712c:	3b01      	subs	r3, #1
 800712e:	4543      	cmp	r3, r8
 8007130:	dcf1      	bgt.n	8007116 <_printf_float+0x40e>
 8007132:	464b      	mov	r3, r9
 8007134:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007138:	e6dc      	b.n	8006ef4 <_printf_float+0x1ec>
 800713a:	f04f 0800 	mov.w	r8, #0
 800713e:	f104 0a1a 	add.w	sl, r4, #26
 8007142:	e7f2      	b.n	800712a <_printf_float+0x422>
 8007144:	2301      	movs	r3, #1
 8007146:	4642      	mov	r2, r8
 8007148:	e7df      	b.n	800710a <_printf_float+0x402>
 800714a:	2301      	movs	r3, #1
 800714c:	464a      	mov	r2, r9
 800714e:	4631      	mov	r1, r6
 8007150:	4628      	mov	r0, r5
 8007152:	47b8      	blx	r7
 8007154:	3001      	adds	r0, #1
 8007156:	f43f ae38 	beq.w	8006dca <_printf_float+0xc2>
 800715a:	f108 0801 	add.w	r8, r8, #1
 800715e:	68e3      	ldr	r3, [r4, #12]
 8007160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007162:	1a5b      	subs	r3, r3, r1
 8007164:	4543      	cmp	r3, r8
 8007166:	dcf0      	bgt.n	800714a <_printf_float+0x442>
 8007168:	e6fa      	b.n	8006f60 <_printf_float+0x258>
 800716a:	f04f 0800 	mov.w	r8, #0
 800716e:	f104 0919 	add.w	r9, r4, #25
 8007172:	e7f4      	b.n	800715e <_printf_float+0x456>

08007174 <_printf_common>:
 8007174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007178:	4616      	mov	r6, r2
 800717a:	4699      	mov	r9, r3
 800717c:	688a      	ldr	r2, [r1, #8]
 800717e:	690b      	ldr	r3, [r1, #16]
 8007180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007184:	4293      	cmp	r3, r2
 8007186:	bfb8      	it	lt
 8007188:	4613      	movlt	r3, r2
 800718a:	6033      	str	r3, [r6, #0]
 800718c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007190:	4607      	mov	r7, r0
 8007192:	460c      	mov	r4, r1
 8007194:	b10a      	cbz	r2, 800719a <_printf_common+0x26>
 8007196:	3301      	adds	r3, #1
 8007198:	6033      	str	r3, [r6, #0]
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	0699      	lsls	r1, r3, #26
 800719e:	bf42      	ittt	mi
 80071a0:	6833      	ldrmi	r3, [r6, #0]
 80071a2:	3302      	addmi	r3, #2
 80071a4:	6033      	strmi	r3, [r6, #0]
 80071a6:	6825      	ldr	r5, [r4, #0]
 80071a8:	f015 0506 	ands.w	r5, r5, #6
 80071ac:	d106      	bne.n	80071bc <_printf_common+0x48>
 80071ae:	f104 0a19 	add.w	sl, r4, #25
 80071b2:	68e3      	ldr	r3, [r4, #12]
 80071b4:	6832      	ldr	r2, [r6, #0]
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	42ab      	cmp	r3, r5
 80071ba:	dc26      	bgt.n	800720a <_printf_common+0x96>
 80071bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071c0:	1e13      	subs	r3, r2, #0
 80071c2:	6822      	ldr	r2, [r4, #0]
 80071c4:	bf18      	it	ne
 80071c6:	2301      	movne	r3, #1
 80071c8:	0692      	lsls	r2, r2, #26
 80071ca:	d42b      	bmi.n	8007224 <_printf_common+0xb0>
 80071cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071d0:	4649      	mov	r1, r9
 80071d2:	4638      	mov	r0, r7
 80071d4:	47c0      	blx	r8
 80071d6:	3001      	adds	r0, #1
 80071d8:	d01e      	beq.n	8007218 <_printf_common+0xa4>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	68e5      	ldr	r5, [r4, #12]
 80071de:	6832      	ldr	r2, [r6, #0]
 80071e0:	f003 0306 	and.w	r3, r3, #6
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	bf08      	it	eq
 80071e8:	1aad      	subeq	r5, r5, r2
 80071ea:	68a3      	ldr	r3, [r4, #8]
 80071ec:	6922      	ldr	r2, [r4, #16]
 80071ee:	bf0c      	ite	eq
 80071f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071f4:	2500      	movne	r5, #0
 80071f6:	4293      	cmp	r3, r2
 80071f8:	bfc4      	itt	gt
 80071fa:	1a9b      	subgt	r3, r3, r2
 80071fc:	18ed      	addgt	r5, r5, r3
 80071fe:	2600      	movs	r6, #0
 8007200:	341a      	adds	r4, #26
 8007202:	42b5      	cmp	r5, r6
 8007204:	d11a      	bne.n	800723c <_printf_common+0xc8>
 8007206:	2000      	movs	r0, #0
 8007208:	e008      	b.n	800721c <_printf_common+0xa8>
 800720a:	2301      	movs	r3, #1
 800720c:	4652      	mov	r2, sl
 800720e:	4649      	mov	r1, r9
 8007210:	4638      	mov	r0, r7
 8007212:	47c0      	blx	r8
 8007214:	3001      	adds	r0, #1
 8007216:	d103      	bne.n	8007220 <_printf_common+0xac>
 8007218:	f04f 30ff 	mov.w	r0, #4294967295
 800721c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007220:	3501      	adds	r5, #1
 8007222:	e7c6      	b.n	80071b2 <_printf_common+0x3e>
 8007224:	18e1      	adds	r1, r4, r3
 8007226:	1c5a      	adds	r2, r3, #1
 8007228:	2030      	movs	r0, #48	; 0x30
 800722a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800722e:	4422      	add	r2, r4
 8007230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007238:	3302      	adds	r3, #2
 800723a:	e7c7      	b.n	80071cc <_printf_common+0x58>
 800723c:	2301      	movs	r3, #1
 800723e:	4622      	mov	r2, r4
 8007240:	4649      	mov	r1, r9
 8007242:	4638      	mov	r0, r7
 8007244:	47c0      	blx	r8
 8007246:	3001      	adds	r0, #1
 8007248:	d0e6      	beq.n	8007218 <_printf_common+0xa4>
 800724a:	3601      	adds	r6, #1
 800724c:	e7d9      	b.n	8007202 <_printf_common+0x8e>
	...

08007250 <_printf_i>:
 8007250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	7e0f      	ldrb	r7, [r1, #24]
 8007256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007258:	2f78      	cmp	r7, #120	; 0x78
 800725a:	4691      	mov	r9, r2
 800725c:	4680      	mov	r8, r0
 800725e:	460c      	mov	r4, r1
 8007260:	469a      	mov	sl, r3
 8007262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007266:	d807      	bhi.n	8007278 <_printf_i+0x28>
 8007268:	2f62      	cmp	r7, #98	; 0x62
 800726a:	d80a      	bhi.n	8007282 <_printf_i+0x32>
 800726c:	2f00      	cmp	r7, #0
 800726e:	f000 80d8 	beq.w	8007422 <_printf_i+0x1d2>
 8007272:	2f58      	cmp	r7, #88	; 0x58
 8007274:	f000 80a3 	beq.w	80073be <_printf_i+0x16e>
 8007278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800727c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007280:	e03a      	b.n	80072f8 <_printf_i+0xa8>
 8007282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007286:	2b15      	cmp	r3, #21
 8007288:	d8f6      	bhi.n	8007278 <_printf_i+0x28>
 800728a:	a101      	add	r1, pc, #4	; (adr r1, 8007290 <_printf_i+0x40>)
 800728c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007290:	080072e9 	.word	0x080072e9
 8007294:	080072fd 	.word	0x080072fd
 8007298:	08007279 	.word	0x08007279
 800729c:	08007279 	.word	0x08007279
 80072a0:	08007279 	.word	0x08007279
 80072a4:	08007279 	.word	0x08007279
 80072a8:	080072fd 	.word	0x080072fd
 80072ac:	08007279 	.word	0x08007279
 80072b0:	08007279 	.word	0x08007279
 80072b4:	08007279 	.word	0x08007279
 80072b8:	08007279 	.word	0x08007279
 80072bc:	08007409 	.word	0x08007409
 80072c0:	0800732d 	.word	0x0800732d
 80072c4:	080073eb 	.word	0x080073eb
 80072c8:	08007279 	.word	0x08007279
 80072cc:	08007279 	.word	0x08007279
 80072d0:	0800742b 	.word	0x0800742b
 80072d4:	08007279 	.word	0x08007279
 80072d8:	0800732d 	.word	0x0800732d
 80072dc:	08007279 	.word	0x08007279
 80072e0:	08007279 	.word	0x08007279
 80072e4:	080073f3 	.word	0x080073f3
 80072e8:	682b      	ldr	r3, [r5, #0]
 80072ea:	1d1a      	adds	r2, r3, #4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	602a      	str	r2, [r5, #0]
 80072f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0a3      	b.n	8007444 <_printf_i+0x1f4>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	6829      	ldr	r1, [r5, #0]
 8007300:	0606      	lsls	r6, r0, #24
 8007302:	f101 0304 	add.w	r3, r1, #4
 8007306:	d50a      	bpl.n	800731e <_printf_i+0xce>
 8007308:	680e      	ldr	r6, [r1, #0]
 800730a:	602b      	str	r3, [r5, #0]
 800730c:	2e00      	cmp	r6, #0
 800730e:	da03      	bge.n	8007318 <_printf_i+0xc8>
 8007310:	232d      	movs	r3, #45	; 0x2d
 8007312:	4276      	negs	r6, r6
 8007314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007318:	485e      	ldr	r0, [pc, #376]	; (8007494 <_printf_i+0x244>)
 800731a:	230a      	movs	r3, #10
 800731c:	e019      	b.n	8007352 <_printf_i+0x102>
 800731e:	680e      	ldr	r6, [r1, #0]
 8007320:	602b      	str	r3, [r5, #0]
 8007322:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007326:	bf18      	it	ne
 8007328:	b236      	sxthne	r6, r6
 800732a:	e7ef      	b.n	800730c <_printf_i+0xbc>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	6820      	ldr	r0, [r4, #0]
 8007330:	1d19      	adds	r1, r3, #4
 8007332:	6029      	str	r1, [r5, #0]
 8007334:	0601      	lsls	r1, r0, #24
 8007336:	d501      	bpl.n	800733c <_printf_i+0xec>
 8007338:	681e      	ldr	r6, [r3, #0]
 800733a:	e002      	b.n	8007342 <_printf_i+0xf2>
 800733c:	0646      	lsls	r6, r0, #25
 800733e:	d5fb      	bpl.n	8007338 <_printf_i+0xe8>
 8007340:	881e      	ldrh	r6, [r3, #0]
 8007342:	4854      	ldr	r0, [pc, #336]	; (8007494 <_printf_i+0x244>)
 8007344:	2f6f      	cmp	r7, #111	; 0x6f
 8007346:	bf0c      	ite	eq
 8007348:	2308      	moveq	r3, #8
 800734a:	230a      	movne	r3, #10
 800734c:	2100      	movs	r1, #0
 800734e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007352:	6865      	ldr	r5, [r4, #4]
 8007354:	60a5      	str	r5, [r4, #8]
 8007356:	2d00      	cmp	r5, #0
 8007358:	bfa2      	ittt	ge
 800735a:	6821      	ldrge	r1, [r4, #0]
 800735c:	f021 0104 	bicge.w	r1, r1, #4
 8007360:	6021      	strge	r1, [r4, #0]
 8007362:	b90e      	cbnz	r6, 8007368 <_printf_i+0x118>
 8007364:	2d00      	cmp	r5, #0
 8007366:	d04d      	beq.n	8007404 <_printf_i+0x1b4>
 8007368:	4615      	mov	r5, r2
 800736a:	fbb6 f1f3 	udiv	r1, r6, r3
 800736e:	fb03 6711 	mls	r7, r3, r1, r6
 8007372:	5dc7      	ldrb	r7, [r0, r7]
 8007374:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007378:	4637      	mov	r7, r6
 800737a:	42bb      	cmp	r3, r7
 800737c:	460e      	mov	r6, r1
 800737e:	d9f4      	bls.n	800736a <_printf_i+0x11a>
 8007380:	2b08      	cmp	r3, #8
 8007382:	d10b      	bne.n	800739c <_printf_i+0x14c>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	07de      	lsls	r6, r3, #31
 8007388:	d508      	bpl.n	800739c <_printf_i+0x14c>
 800738a:	6923      	ldr	r3, [r4, #16]
 800738c:	6861      	ldr	r1, [r4, #4]
 800738e:	4299      	cmp	r1, r3
 8007390:	bfde      	ittt	le
 8007392:	2330      	movle	r3, #48	; 0x30
 8007394:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007398:	f105 35ff 	addle.w	r5, r5, #4294967295
 800739c:	1b52      	subs	r2, r2, r5
 800739e:	6122      	str	r2, [r4, #16]
 80073a0:	f8cd a000 	str.w	sl, [sp]
 80073a4:	464b      	mov	r3, r9
 80073a6:	aa03      	add	r2, sp, #12
 80073a8:	4621      	mov	r1, r4
 80073aa:	4640      	mov	r0, r8
 80073ac:	f7ff fee2 	bl	8007174 <_printf_common>
 80073b0:	3001      	adds	r0, #1
 80073b2:	d14c      	bne.n	800744e <_printf_i+0x1fe>
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	b004      	add	sp, #16
 80073ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073be:	4835      	ldr	r0, [pc, #212]	; (8007494 <_printf_i+0x244>)
 80073c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80073c4:	6829      	ldr	r1, [r5, #0]
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80073cc:	6029      	str	r1, [r5, #0]
 80073ce:	061d      	lsls	r5, r3, #24
 80073d0:	d514      	bpl.n	80073fc <_printf_i+0x1ac>
 80073d2:	07df      	lsls	r7, r3, #31
 80073d4:	bf44      	itt	mi
 80073d6:	f043 0320 	orrmi.w	r3, r3, #32
 80073da:	6023      	strmi	r3, [r4, #0]
 80073dc:	b91e      	cbnz	r6, 80073e6 <_printf_i+0x196>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	f023 0320 	bic.w	r3, r3, #32
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	2310      	movs	r3, #16
 80073e8:	e7b0      	b.n	800734c <_printf_i+0xfc>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	f043 0320 	orr.w	r3, r3, #32
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	2378      	movs	r3, #120	; 0x78
 80073f4:	4828      	ldr	r0, [pc, #160]	; (8007498 <_printf_i+0x248>)
 80073f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073fa:	e7e3      	b.n	80073c4 <_printf_i+0x174>
 80073fc:	0659      	lsls	r1, r3, #25
 80073fe:	bf48      	it	mi
 8007400:	b2b6      	uxthmi	r6, r6
 8007402:	e7e6      	b.n	80073d2 <_printf_i+0x182>
 8007404:	4615      	mov	r5, r2
 8007406:	e7bb      	b.n	8007380 <_printf_i+0x130>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	6826      	ldr	r6, [r4, #0]
 800740c:	6961      	ldr	r1, [r4, #20]
 800740e:	1d18      	adds	r0, r3, #4
 8007410:	6028      	str	r0, [r5, #0]
 8007412:	0635      	lsls	r5, r6, #24
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	d501      	bpl.n	800741c <_printf_i+0x1cc>
 8007418:	6019      	str	r1, [r3, #0]
 800741a:	e002      	b.n	8007422 <_printf_i+0x1d2>
 800741c:	0670      	lsls	r0, r6, #25
 800741e:	d5fb      	bpl.n	8007418 <_printf_i+0x1c8>
 8007420:	8019      	strh	r1, [r3, #0]
 8007422:	2300      	movs	r3, #0
 8007424:	6123      	str	r3, [r4, #16]
 8007426:	4615      	mov	r5, r2
 8007428:	e7ba      	b.n	80073a0 <_printf_i+0x150>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	1d1a      	adds	r2, r3, #4
 800742e:	602a      	str	r2, [r5, #0]
 8007430:	681d      	ldr	r5, [r3, #0]
 8007432:	6862      	ldr	r2, [r4, #4]
 8007434:	2100      	movs	r1, #0
 8007436:	4628      	mov	r0, r5
 8007438:	f7f8 fed2 	bl	80001e0 <memchr>
 800743c:	b108      	cbz	r0, 8007442 <_printf_i+0x1f2>
 800743e:	1b40      	subs	r0, r0, r5
 8007440:	6060      	str	r0, [r4, #4]
 8007442:	6863      	ldr	r3, [r4, #4]
 8007444:	6123      	str	r3, [r4, #16]
 8007446:	2300      	movs	r3, #0
 8007448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800744c:	e7a8      	b.n	80073a0 <_printf_i+0x150>
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	462a      	mov	r2, r5
 8007452:	4649      	mov	r1, r9
 8007454:	4640      	mov	r0, r8
 8007456:	47d0      	blx	sl
 8007458:	3001      	adds	r0, #1
 800745a:	d0ab      	beq.n	80073b4 <_printf_i+0x164>
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	079b      	lsls	r3, r3, #30
 8007460:	d413      	bmi.n	800748a <_printf_i+0x23a>
 8007462:	68e0      	ldr	r0, [r4, #12]
 8007464:	9b03      	ldr	r3, [sp, #12]
 8007466:	4298      	cmp	r0, r3
 8007468:	bfb8      	it	lt
 800746a:	4618      	movlt	r0, r3
 800746c:	e7a4      	b.n	80073b8 <_printf_i+0x168>
 800746e:	2301      	movs	r3, #1
 8007470:	4632      	mov	r2, r6
 8007472:	4649      	mov	r1, r9
 8007474:	4640      	mov	r0, r8
 8007476:	47d0      	blx	sl
 8007478:	3001      	adds	r0, #1
 800747a:	d09b      	beq.n	80073b4 <_printf_i+0x164>
 800747c:	3501      	adds	r5, #1
 800747e:	68e3      	ldr	r3, [r4, #12]
 8007480:	9903      	ldr	r1, [sp, #12]
 8007482:	1a5b      	subs	r3, r3, r1
 8007484:	42ab      	cmp	r3, r5
 8007486:	dcf2      	bgt.n	800746e <_printf_i+0x21e>
 8007488:	e7eb      	b.n	8007462 <_printf_i+0x212>
 800748a:	2500      	movs	r5, #0
 800748c:	f104 0619 	add.w	r6, r4, #25
 8007490:	e7f5      	b.n	800747e <_printf_i+0x22e>
 8007492:	bf00      	nop
 8007494:	08009896 	.word	0x08009896
 8007498:	080098a7 	.word	0x080098a7

0800749c <iprintf>:
 800749c:	b40f      	push	{r0, r1, r2, r3}
 800749e:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <iprintf+0x2c>)
 80074a0:	b513      	push	{r0, r1, r4, lr}
 80074a2:	681c      	ldr	r4, [r3, #0]
 80074a4:	b124      	cbz	r4, 80074b0 <iprintf+0x14>
 80074a6:	69a3      	ldr	r3, [r4, #24]
 80074a8:	b913      	cbnz	r3, 80074b0 <iprintf+0x14>
 80074aa:	4620      	mov	r0, r4
 80074ac:	f001 f864 	bl	8008578 <__sinit>
 80074b0:	ab05      	add	r3, sp, #20
 80074b2:	9a04      	ldr	r2, [sp, #16]
 80074b4:	68a1      	ldr	r1, [r4, #8]
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	4620      	mov	r0, r4
 80074ba:	f001 fe21 	bl	8009100 <_vfiprintf_r>
 80074be:	b002      	add	sp, #8
 80074c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074c4:	b004      	add	sp, #16
 80074c6:	4770      	bx	lr
 80074c8:	20000010 	.word	0x20000010

080074cc <__swbuf_r>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	460e      	mov	r6, r1
 80074d0:	4614      	mov	r4, r2
 80074d2:	4605      	mov	r5, r0
 80074d4:	b118      	cbz	r0, 80074de <__swbuf_r+0x12>
 80074d6:	6983      	ldr	r3, [r0, #24]
 80074d8:	b90b      	cbnz	r3, 80074de <__swbuf_r+0x12>
 80074da:	f001 f84d 	bl	8008578 <__sinit>
 80074de:	4b21      	ldr	r3, [pc, #132]	; (8007564 <__swbuf_r+0x98>)
 80074e0:	429c      	cmp	r4, r3
 80074e2:	d12b      	bne.n	800753c <__swbuf_r+0x70>
 80074e4:	686c      	ldr	r4, [r5, #4]
 80074e6:	69a3      	ldr	r3, [r4, #24]
 80074e8:	60a3      	str	r3, [r4, #8]
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	071a      	lsls	r2, r3, #28
 80074ee:	d52f      	bpl.n	8007550 <__swbuf_r+0x84>
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	b36b      	cbz	r3, 8007550 <__swbuf_r+0x84>
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	6820      	ldr	r0, [r4, #0]
 80074f8:	1ac0      	subs	r0, r0, r3
 80074fa:	6963      	ldr	r3, [r4, #20]
 80074fc:	b2f6      	uxtb	r6, r6
 80074fe:	4283      	cmp	r3, r0
 8007500:	4637      	mov	r7, r6
 8007502:	dc04      	bgt.n	800750e <__swbuf_r+0x42>
 8007504:	4621      	mov	r1, r4
 8007506:	4628      	mov	r0, r5
 8007508:	f000 ffa2 	bl	8008450 <_fflush_r>
 800750c:	bb30      	cbnz	r0, 800755c <__swbuf_r+0x90>
 800750e:	68a3      	ldr	r3, [r4, #8]
 8007510:	3b01      	subs	r3, #1
 8007512:	60a3      	str	r3, [r4, #8]
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	6022      	str	r2, [r4, #0]
 800751a:	701e      	strb	r6, [r3, #0]
 800751c:	6963      	ldr	r3, [r4, #20]
 800751e:	3001      	adds	r0, #1
 8007520:	4283      	cmp	r3, r0
 8007522:	d004      	beq.n	800752e <__swbuf_r+0x62>
 8007524:	89a3      	ldrh	r3, [r4, #12]
 8007526:	07db      	lsls	r3, r3, #31
 8007528:	d506      	bpl.n	8007538 <__swbuf_r+0x6c>
 800752a:	2e0a      	cmp	r6, #10
 800752c:	d104      	bne.n	8007538 <__swbuf_r+0x6c>
 800752e:	4621      	mov	r1, r4
 8007530:	4628      	mov	r0, r5
 8007532:	f000 ff8d 	bl	8008450 <_fflush_r>
 8007536:	b988      	cbnz	r0, 800755c <__swbuf_r+0x90>
 8007538:	4638      	mov	r0, r7
 800753a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <__swbuf_r+0x9c>)
 800753e:	429c      	cmp	r4, r3
 8007540:	d101      	bne.n	8007546 <__swbuf_r+0x7a>
 8007542:	68ac      	ldr	r4, [r5, #8]
 8007544:	e7cf      	b.n	80074e6 <__swbuf_r+0x1a>
 8007546:	4b09      	ldr	r3, [pc, #36]	; (800756c <__swbuf_r+0xa0>)
 8007548:	429c      	cmp	r4, r3
 800754a:	bf08      	it	eq
 800754c:	68ec      	ldreq	r4, [r5, #12]
 800754e:	e7ca      	b.n	80074e6 <__swbuf_r+0x1a>
 8007550:	4621      	mov	r1, r4
 8007552:	4628      	mov	r0, r5
 8007554:	f000 f80c 	bl	8007570 <__swsetup_r>
 8007558:	2800      	cmp	r0, #0
 800755a:	d0cb      	beq.n	80074f4 <__swbuf_r+0x28>
 800755c:	f04f 37ff 	mov.w	r7, #4294967295
 8007560:	e7ea      	b.n	8007538 <__swbuf_r+0x6c>
 8007562:	bf00      	nop
 8007564:	08009968 	.word	0x08009968
 8007568:	08009988 	.word	0x08009988
 800756c:	08009948 	.word	0x08009948

08007570 <__swsetup_r>:
 8007570:	4b32      	ldr	r3, [pc, #200]	; (800763c <__swsetup_r+0xcc>)
 8007572:	b570      	push	{r4, r5, r6, lr}
 8007574:	681d      	ldr	r5, [r3, #0]
 8007576:	4606      	mov	r6, r0
 8007578:	460c      	mov	r4, r1
 800757a:	b125      	cbz	r5, 8007586 <__swsetup_r+0x16>
 800757c:	69ab      	ldr	r3, [r5, #24]
 800757e:	b913      	cbnz	r3, 8007586 <__swsetup_r+0x16>
 8007580:	4628      	mov	r0, r5
 8007582:	f000 fff9 	bl	8008578 <__sinit>
 8007586:	4b2e      	ldr	r3, [pc, #184]	; (8007640 <__swsetup_r+0xd0>)
 8007588:	429c      	cmp	r4, r3
 800758a:	d10f      	bne.n	80075ac <__swsetup_r+0x3c>
 800758c:	686c      	ldr	r4, [r5, #4]
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007594:	0719      	lsls	r1, r3, #28
 8007596:	d42c      	bmi.n	80075f2 <__swsetup_r+0x82>
 8007598:	06dd      	lsls	r5, r3, #27
 800759a:	d411      	bmi.n	80075c0 <__swsetup_r+0x50>
 800759c:	2309      	movs	r3, #9
 800759e:	6033      	str	r3, [r6, #0]
 80075a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	f04f 30ff 	mov.w	r0, #4294967295
 80075aa:	e03e      	b.n	800762a <__swsetup_r+0xba>
 80075ac:	4b25      	ldr	r3, [pc, #148]	; (8007644 <__swsetup_r+0xd4>)
 80075ae:	429c      	cmp	r4, r3
 80075b0:	d101      	bne.n	80075b6 <__swsetup_r+0x46>
 80075b2:	68ac      	ldr	r4, [r5, #8]
 80075b4:	e7eb      	b.n	800758e <__swsetup_r+0x1e>
 80075b6:	4b24      	ldr	r3, [pc, #144]	; (8007648 <__swsetup_r+0xd8>)
 80075b8:	429c      	cmp	r4, r3
 80075ba:	bf08      	it	eq
 80075bc:	68ec      	ldreq	r4, [r5, #12]
 80075be:	e7e6      	b.n	800758e <__swsetup_r+0x1e>
 80075c0:	0758      	lsls	r0, r3, #29
 80075c2:	d512      	bpl.n	80075ea <__swsetup_r+0x7a>
 80075c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075c6:	b141      	cbz	r1, 80075da <__swsetup_r+0x6a>
 80075c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075cc:	4299      	cmp	r1, r3
 80075ce:	d002      	beq.n	80075d6 <__swsetup_r+0x66>
 80075d0:	4630      	mov	r0, r6
 80075d2:	f001 fc8b 	bl	8008eec <_free_r>
 80075d6:	2300      	movs	r3, #0
 80075d8:	6363      	str	r3, [r4, #52]	; 0x34
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075e0:	81a3      	strh	r3, [r4, #12]
 80075e2:	2300      	movs	r3, #0
 80075e4:	6063      	str	r3, [r4, #4]
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f043 0308 	orr.w	r3, r3, #8
 80075f0:	81a3      	strh	r3, [r4, #12]
 80075f2:	6923      	ldr	r3, [r4, #16]
 80075f4:	b94b      	cbnz	r3, 800760a <__swsetup_r+0x9a>
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007600:	d003      	beq.n	800760a <__swsetup_r+0x9a>
 8007602:	4621      	mov	r1, r4
 8007604:	4630      	mov	r0, r6
 8007606:	f001 f881 	bl	800870c <__smakebuf_r>
 800760a:	89a0      	ldrh	r0, [r4, #12]
 800760c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007610:	f010 0301 	ands.w	r3, r0, #1
 8007614:	d00a      	beq.n	800762c <__swsetup_r+0xbc>
 8007616:	2300      	movs	r3, #0
 8007618:	60a3      	str	r3, [r4, #8]
 800761a:	6963      	ldr	r3, [r4, #20]
 800761c:	425b      	negs	r3, r3
 800761e:	61a3      	str	r3, [r4, #24]
 8007620:	6923      	ldr	r3, [r4, #16]
 8007622:	b943      	cbnz	r3, 8007636 <__swsetup_r+0xc6>
 8007624:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007628:	d1ba      	bne.n	80075a0 <__swsetup_r+0x30>
 800762a:	bd70      	pop	{r4, r5, r6, pc}
 800762c:	0781      	lsls	r1, r0, #30
 800762e:	bf58      	it	pl
 8007630:	6963      	ldrpl	r3, [r4, #20]
 8007632:	60a3      	str	r3, [r4, #8]
 8007634:	e7f4      	b.n	8007620 <__swsetup_r+0xb0>
 8007636:	2000      	movs	r0, #0
 8007638:	e7f7      	b.n	800762a <__swsetup_r+0xba>
 800763a:	bf00      	nop
 800763c:	20000010 	.word	0x20000010
 8007640:	08009968 	.word	0x08009968
 8007644:	08009988 	.word	0x08009988
 8007648:	08009948 	.word	0x08009948

0800764c <quorem>:
 800764c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	6903      	ldr	r3, [r0, #16]
 8007652:	690c      	ldr	r4, [r1, #16]
 8007654:	42a3      	cmp	r3, r4
 8007656:	4607      	mov	r7, r0
 8007658:	f2c0 8081 	blt.w	800775e <quorem+0x112>
 800765c:	3c01      	subs	r4, #1
 800765e:	f101 0814 	add.w	r8, r1, #20
 8007662:	f100 0514 	add.w	r5, r0, #20
 8007666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007674:	3301      	adds	r3, #1
 8007676:	429a      	cmp	r2, r3
 8007678:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800767c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007680:	fbb2 f6f3 	udiv	r6, r2, r3
 8007684:	d331      	bcc.n	80076ea <quorem+0x9e>
 8007686:	f04f 0e00 	mov.w	lr, #0
 800768a:	4640      	mov	r0, r8
 800768c:	46ac      	mov	ip, r5
 800768e:	46f2      	mov	sl, lr
 8007690:	f850 2b04 	ldr.w	r2, [r0], #4
 8007694:	b293      	uxth	r3, r2
 8007696:	fb06 e303 	mla	r3, r6, r3, lr
 800769a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800769e:	b29b      	uxth	r3, r3
 80076a0:	ebaa 0303 	sub.w	r3, sl, r3
 80076a4:	f8dc a000 	ldr.w	sl, [ip]
 80076a8:	0c12      	lsrs	r2, r2, #16
 80076aa:	fa13 f38a 	uxtah	r3, r3, sl
 80076ae:	fb06 e202 	mla	r2, r6, r2, lr
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	9b00      	ldr	r3, [sp, #0]
 80076b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076ba:	b292      	uxth	r2, r2
 80076bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80076c8:	4581      	cmp	r9, r0
 80076ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ce:	f84c 3b04 	str.w	r3, [ip], #4
 80076d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076d6:	d2db      	bcs.n	8007690 <quorem+0x44>
 80076d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80076dc:	b92b      	cbnz	r3, 80076ea <quorem+0x9e>
 80076de:	9b01      	ldr	r3, [sp, #4]
 80076e0:	3b04      	subs	r3, #4
 80076e2:	429d      	cmp	r5, r3
 80076e4:	461a      	mov	r2, r3
 80076e6:	d32e      	bcc.n	8007746 <quorem+0xfa>
 80076e8:	613c      	str	r4, [r7, #16]
 80076ea:	4638      	mov	r0, r7
 80076ec:	f001 fae6 	bl	8008cbc <__mcmp>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	db24      	blt.n	800773e <quorem+0xf2>
 80076f4:	3601      	adds	r6, #1
 80076f6:	4628      	mov	r0, r5
 80076f8:	f04f 0c00 	mov.w	ip, #0
 80076fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007700:	f8d0 e000 	ldr.w	lr, [r0]
 8007704:	b293      	uxth	r3, r2
 8007706:	ebac 0303 	sub.w	r3, ip, r3
 800770a:	0c12      	lsrs	r2, r2, #16
 800770c:	fa13 f38e 	uxtah	r3, r3, lr
 8007710:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007718:	b29b      	uxth	r3, r3
 800771a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800771e:	45c1      	cmp	r9, r8
 8007720:	f840 3b04 	str.w	r3, [r0], #4
 8007724:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007728:	d2e8      	bcs.n	80076fc <quorem+0xb0>
 800772a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800772e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007732:	b922      	cbnz	r2, 800773e <quorem+0xf2>
 8007734:	3b04      	subs	r3, #4
 8007736:	429d      	cmp	r5, r3
 8007738:	461a      	mov	r2, r3
 800773a:	d30a      	bcc.n	8007752 <quorem+0x106>
 800773c:	613c      	str	r4, [r7, #16]
 800773e:	4630      	mov	r0, r6
 8007740:	b003      	add	sp, #12
 8007742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007746:	6812      	ldr	r2, [r2, #0]
 8007748:	3b04      	subs	r3, #4
 800774a:	2a00      	cmp	r2, #0
 800774c:	d1cc      	bne.n	80076e8 <quorem+0x9c>
 800774e:	3c01      	subs	r4, #1
 8007750:	e7c7      	b.n	80076e2 <quorem+0x96>
 8007752:	6812      	ldr	r2, [r2, #0]
 8007754:	3b04      	subs	r3, #4
 8007756:	2a00      	cmp	r2, #0
 8007758:	d1f0      	bne.n	800773c <quorem+0xf0>
 800775a:	3c01      	subs	r4, #1
 800775c:	e7eb      	b.n	8007736 <quorem+0xea>
 800775e:	2000      	movs	r0, #0
 8007760:	e7ee      	b.n	8007740 <quorem+0xf4>
 8007762:	0000      	movs	r0, r0
 8007764:	0000      	movs	r0, r0
	...

08007768 <_dtoa_r>:
 8007768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	ed2d 8b04 	vpush	{d8-d9}
 8007770:	ec57 6b10 	vmov	r6, r7, d0
 8007774:	b093      	sub	sp, #76	; 0x4c
 8007776:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007778:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800777c:	9106      	str	r1, [sp, #24]
 800777e:	ee10 aa10 	vmov	sl, s0
 8007782:	4604      	mov	r4, r0
 8007784:	9209      	str	r2, [sp, #36]	; 0x24
 8007786:	930c      	str	r3, [sp, #48]	; 0x30
 8007788:	46bb      	mov	fp, r7
 800778a:	b975      	cbnz	r5, 80077aa <_dtoa_r+0x42>
 800778c:	2010      	movs	r0, #16
 800778e:	f000 fffd 	bl	800878c <malloc>
 8007792:	4602      	mov	r2, r0
 8007794:	6260      	str	r0, [r4, #36]	; 0x24
 8007796:	b920      	cbnz	r0, 80077a2 <_dtoa_r+0x3a>
 8007798:	4ba7      	ldr	r3, [pc, #668]	; (8007a38 <_dtoa_r+0x2d0>)
 800779a:	21ea      	movs	r1, #234	; 0xea
 800779c:	48a7      	ldr	r0, [pc, #668]	; (8007a3c <_dtoa_r+0x2d4>)
 800779e:	f001 fe45 	bl	800942c <__assert_func>
 80077a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077a6:	6005      	str	r5, [r0, #0]
 80077a8:	60c5      	str	r5, [r0, #12]
 80077aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ac:	6819      	ldr	r1, [r3, #0]
 80077ae:	b151      	cbz	r1, 80077c6 <_dtoa_r+0x5e>
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	604a      	str	r2, [r1, #4]
 80077b4:	2301      	movs	r3, #1
 80077b6:	4093      	lsls	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
 80077ba:	4620      	mov	r0, r4
 80077bc:	f001 f83c 	bl	8008838 <_Bfree>
 80077c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	1e3b      	subs	r3, r7, #0
 80077c8:	bfaa      	itet	ge
 80077ca:	2300      	movge	r3, #0
 80077cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077d0:	f8c8 3000 	strge.w	r3, [r8]
 80077d4:	4b9a      	ldr	r3, [pc, #616]	; (8007a40 <_dtoa_r+0x2d8>)
 80077d6:	bfbc      	itt	lt
 80077d8:	2201      	movlt	r2, #1
 80077da:	f8c8 2000 	strlt.w	r2, [r8]
 80077de:	ea33 030b 	bics.w	r3, r3, fp
 80077e2:	d11b      	bne.n	800781c <_dtoa_r+0xb4>
 80077e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077f0:	4333      	orrs	r3, r6
 80077f2:	f000 8592 	beq.w	800831a <_dtoa_r+0xbb2>
 80077f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f8:	b963      	cbnz	r3, 8007814 <_dtoa_r+0xac>
 80077fa:	4b92      	ldr	r3, [pc, #584]	; (8007a44 <_dtoa_r+0x2dc>)
 80077fc:	e022      	b.n	8007844 <_dtoa_r+0xdc>
 80077fe:	4b92      	ldr	r3, [pc, #584]	; (8007a48 <_dtoa_r+0x2e0>)
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	3308      	adds	r3, #8
 8007804:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007806:	6013      	str	r3, [r2, #0]
 8007808:	9801      	ldr	r0, [sp, #4]
 800780a:	b013      	add	sp, #76	; 0x4c
 800780c:	ecbd 8b04 	vpop	{d8-d9}
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	4b8b      	ldr	r3, [pc, #556]	; (8007a44 <_dtoa_r+0x2dc>)
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	3303      	adds	r3, #3
 800781a:	e7f3      	b.n	8007804 <_dtoa_r+0x9c>
 800781c:	2200      	movs	r2, #0
 800781e:	2300      	movs	r3, #0
 8007820:	4650      	mov	r0, sl
 8007822:	4659      	mov	r1, fp
 8007824:	f7f9 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8007828:	ec4b ab19 	vmov	d9, sl, fp
 800782c:	4680      	mov	r8, r0
 800782e:	b158      	cbz	r0, 8007848 <_dtoa_r+0xe0>
 8007830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007832:	2301      	movs	r3, #1
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 856b 	beq.w	8008314 <_dtoa_r+0xbac>
 800783e:	4883      	ldr	r0, [pc, #524]	; (8007a4c <_dtoa_r+0x2e4>)
 8007840:	6018      	str	r0, [r3, #0]
 8007842:	1e43      	subs	r3, r0, #1
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	e7df      	b.n	8007808 <_dtoa_r+0xa0>
 8007848:	ec4b ab10 	vmov	d0, sl, fp
 800784c:	aa10      	add	r2, sp, #64	; 0x40
 800784e:	a911      	add	r1, sp, #68	; 0x44
 8007850:	4620      	mov	r0, r4
 8007852:	f001 fad9 	bl	8008e08 <__d2b>
 8007856:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800785a:	ee08 0a10 	vmov	s16, r0
 800785e:	2d00      	cmp	r5, #0
 8007860:	f000 8084 	beq.w	800796c <_dtoa_r+0x204>
 8007864:	ee19 3a90 	vmov	r3, s19
 8007868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800786c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007870:	4656      	mov	r6, sl
 8007872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800787a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800787e:	4b74      	ldr	r3, [pc, #464]	; (8007a50 <_dtoa_r+0x2e8>)
 8007880:	2200      	movs	r2, #0
 8007882:	4630      	mov	r0, r6
 8007884:	4639      	mov	r1, r7
 8007886:	f7f8 fcff 	bl	8000288 <__aeabi_dsub>
 800788a:	a365      	add	r3, pc, #404	; (adr r3, 8007a20 <_dtoa_r+0x2b8>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 feb2 	bl	80005f8 <__aeabi_dmul>
 8007894:	a364      	add	r3, pc, #400	; (adr r3, 8007a28 <_dtoa_r+0x2c0>)
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f7f8 fcf7 	bl	800028c <__adddf3>
 800789e:	4606      	mov	r6, r0
 80078a0:	4628      	mov	r0, r5
 80078a2:	460f      	mov	r7, r1
 80078a4:	f7f8 fe3e 	bl	8000524 <__aeabi_i2d>
 80078a8:	a361      	add	r3, pc, #388	; (adr r3, 8007a30 <_dtoa_r+0x2c8>)
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f7f8 fea3 	bl	80005f8 <__aeabi_dmul>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4630      	mov	r0, r6
 80078b8:	4639      	mov	r1, r7
 80078ba:	f7f8 fce7 	bl	800028c <__adddf3>
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	f7f9 f949 	bl	8000b58 <__aeabi_d2iz>
 80078c6:	2200      	movs	r2, #0
 80078c8:	9000      	str	r0, [sp, #0]
 80078ca:	2300      	movs	r3, #0
 80078cc:	4630      	mov	r0, r6
 80078ce:	4639      	mov	r1, r7
 80078d0:	f7f9 f904 	bl	8000adc <__aeabi_dcmplt>
 80078d4:	b150      	cbz	r0, 80078ec <_dtoa_r+0x184>
 80078d6:	9800      	ldr	r0, [sp, #0]
 80078d8:	f7f8 fe24 	bl	8000524 <__aeabi_i2d>
 80078dc:	4632      	mov	r2, r6
 80078de:	463b      	mov	r3, r7
 80078e0:	f7f9 f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 80078e4:	b910      	cbnz	r0, 80078ec <_dtoa_r+0x184>
 80078e6:	9b00      	ldr	r3, [sp, #0]
 80078e8:	3b01      	subs	r3, #1
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	9b00      	ldr	r3, [sp, #0]
 80078ee:	2b16      	cmp	r3, #22
 80078f0:	d85a      	bhi.n	80079a8 <_dtoa_r+0x240>
 80078f2:	9a00      	ldr	r2, [sp, #0]
 80078f4:	4b57      	ldr	r3, [pc, #348]	; (8007a54 <_dtoa_r+0x2ec>)
 80078f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	ec51 0b19 	vmov	r0, r1, d9
 8007902:	f7f9 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8007906:	2800      	cmp	r0, #0
 8007908:	d050      	beq.n	80079ac <_dtoa_r+0x244>
 800790a:	9b00      	ldr	r3, [sp, #0]
 800790c:	3b01      	subs	r3, #1
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2300      	movs	r3, #0
 8007912:	930b      	str	r3, [sp, #44]	; 0x2c
 8007914:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007916:	1b5d      	subs	r5, r3, r5
 8007918:	1e6b      	subs	r3, r5, #1
 800791a:	9305      	str	r3, [sp, #20]
 800791c:	bf45      	ittet	mi
 800791e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007922:	9304      	strmi	r3, [sp, #16]
 8007924:	2300      	movpl	r3, #0
 8007926:	2300      	movmi	r3, #0
 8007928:	bf4c      	ite	mi
 800792a:	9305      	strmi	r3, [sp, #20]
 800792c:	9304      	strpl	r3, [sp, #16]
 800792e:	9b00      	ldr	r3, [sp, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	db3d      	blt.n	80079b0 <_dtoa_r+0x248>
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	9a00      	ldr	r2, [sp, #0]
 8007938:	920a      	str	r2, [sp, #40]	; 0x28
 800793a:	4413      	add	r3, r2
 800793c:	9305      	str	r3, [sp, #20]
 800793e:	2300      	movs	r3, #0
 8007940:	9307      	str	r3, [sp, #28]
 8007942:	9b06      	ldr	r3, [sp, #24]
 8007944:	2b09      	cmp	r3, #9
 8007946:	f200 8089 	bhi.w	8007a5c <_dtoa_r+0x2f4>
 800794a:	2b05      	cmp	r3, #5
 800794c:	bfc4      	itt	gt
 800794e:	3b04      	subgt	r3, #4
 8007950:	9306      	strgt	r3, [sp, #24]
 8007952:	9b06      	ldr	r3, [sp, #24]
 8007954:	f1a3 0302 	sub.w	r3, r3, #2
 8007958:	bfcc      	ite	gt
 800795a:	2500      	movgt	r5, #0
 800795c:	2501      	movle	r5, #1
 800795e:	2b03      	cmp	r3, #3
 8007960:	f200 8087 	bhi.w	8007a72 <_dtoa_r+0x30a>
 8007964:	e8df f003 	tbb	[pc, r3]
 8007968:	59383a2d 	.word	0x59383a2d
 800796c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007970:	441d      	add	r5, r3
 8007972:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007976:	2b20      	cmp	r3, #32
 8007978:	bfc1      	itttt	gt
 800797a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800797e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007982:	fa0b f303 	lslgt.w	r3, fp, r3
 8007986:	fa26 f000 	lsrgt.w	r0, r6, r0
 800798a:	bfda      	itte	le
 800798c:	f1c3 0320 	rsble	r3, r3, #32
 8007990:	fa06 f003 	lslle.w	r0, r6, r3
 8007994:	4318      	orrgt	r0, r3
 8007996:	f7f8 fdb5 	bl	8000504 <__aeabi_ui2d>
 800799a:	2301      	movs	r3, #1
 800799c:	4606      	mov	r6, r0
 800799e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80079a2:	3d01      	subs	r5, #1
 80079a4:	930e      	str	r3, [sp, #56]	; 0x38
 80079a6:	e76a      	b.n	800787e <_dtoa_r+0x116>
 80079a8:	2301      	movs	r3, #1
 80079aa:	e7b2      	b.n	8007912 <_dtoa_r+0x1aa>
 80079ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80079ae:	e7b1      	b.n	8007914 <_dtoa_r+0x1ac>
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	9a00      	ldr	r2, [sp, #0]
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	9304      	str	r3, [sp, #16]
 80079b8:	4253      	negs	r3, r2
 80079ba:	9307      	str	r3, [sp, #28]
 80079bc:	2300      	movs	r3, #0
 80079be:	930a      	str	r3, [sp, #40]	; 0x28
 80079c0:	e7bf      	b.n	8007942 <_dtoa_r+0x1da>
 80079c2:	2300      	movs	r3, #0
 80079c4:	9308      	str	r3, [sp, #32]
 80079c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	dc55      	bgt.n	8007a78 <_dtoa_r+0x310>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079d2:	461a      	mov	r2, r3
 80079d4:	9209      	str	r2, [sp, #36]	; 0x24
 80079d6:	e00c      	b.n	80079f2 <_dtoa_r+0x28a>
 80079d8:	2301      	movs	r3, #1
 80079da:	e7f3      	b.n	80079c4 <_dtoa_r+0x25c>
 80079dc:	2300      	movs	r3, #0
 80079de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e0:	9308      	str	r3, [sp, #32]
 80079e2:	9b00      	ldr	r3, [sp, #0]
 80079e4:	4413      	add	r3, r2
 80079e6:	9302      	str	r3, [sp, #8]
 80079e8:	3301      	adds	r3, #1
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	9303      	str	r3, [sp, #12]
 80079ee:	bfb8      	it	lt
 80079f0:	2301      	movlt	r3, #1
 80079f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079f4:	2200      	movs	r2, #0
 80079f6:	6042      	str	r2, [r0, #4]
 80079f8:	2204      	movs	r2, #4
 80079fa:	f102 0614 	add.w	r6, r2, #20
 80079fe:	429e      	cmp	r6, r3
 8007a00:	6841      	ldr	r1, [r0, #4]
 8007a02:	d93d      	bls.n	8007a80 <_dtoa_r+0x318>
 8007a04:	4620      	mov	r0, r4
 8007a06:	f000 fed7 	bl	80087b8 <_Balloc>
 8007a0a:	9001      	str	r0, [sp, #4]
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d13b      	bne.n	8007a88 <_dtoa_r+0x320>
 8007a10:	4b11      	ldr	r3, [pc, #68]	; (8007a58 <_dtoa_r+0x2f0>)
 8007a12:	4602      	mov	r2, r0
 8007a14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a18:	e6c0      	b.n	800779c <_dtoa_r+0x34>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e7df      	b.n	80079de <_dtoa_r+0x276>
 8007a1e:	bf00      	nop
 8007a20:	636f4361 	.word	0x636f4361
 8007a24:	3fd287a7 	.word	0x3fd287a7
 8007a28:	8b60c8b3 	.word	0x8b60c8b3
 8007a2c:	3fc68a28 	.word	0x3fc68a28
 8007a30:	509f79fb 	.word	0x509f79fb
 8007a34:	3fd34413 	.word	0x3fd34413
 8007a38:	080098c5 	.word	0x080098c5
 8007a3c:	080098dc 	.word	0x080098dc
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	080098c1 	.word	0x080098c1
 8007a48:	080098b8 	.word	0x080098b8
 8007a4c:	08009895 	.word	0x08009895
 8007a50:	3ff80000 	.word	0x3ff80000
 8007a54:	08009a30 	.word	0x08009a30
 8007a58:	08009937 	.word	0x08009937
 8007a5c:	2501      	movs	r5, #1
 8007a5e:	2300      	movs	r3, #0
 8007a60:	9306      	str	r3, [sp, #24]
 8007a62:	9508      	str	r5, [sp, #32]
 8007a64:	f04f 33ff 	mov.w	r3, #4294967295
 8007a68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2312      	movs	r3, #18
 8007a70:	e7b0      	b.n	80079d4 <_dtoa_r+0x26c>
 8007a72:	2301      	movs	r3, #1
 8007a74:	9308      	str	r3, [sp, #32]
 8007a76:	e7f5      	b.n	8007a64 <_dtoa_r+0x2fc>
 8007a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a7e:	e7b8      	b.n	80079f2 <_dtoa_r+0x28a>
 8007a80:	3101      	adds	r1, #1
 8007a82:	6041      	str	r1, [r0, #4]
 8007a84:	0052      	lsls	r2, r2, #1
 8007a86:	e7b8      	b.n	80079fa <_dtoa_r+0x292>
 8007a88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a8a:	9a01      	ldr	r2, [sp, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	2b0e      	cmp	r3, #14
 8007a92:	f200 809d 	bhi.w	8007bd0 <_dtoa_r+0x468>
 8007a96:	2d00      	cmp	r5, #0
 8007a98:	f000 809a 	beq.w	8007bd0 <_dtoa_r+0x468>
 8007a9c:	9b00      	ldr	r3, [sp, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dd32      	ble.n	8007b08 <_dtoa_r+0x3a0>
 8007aa2:	4ab7      	ldr	r2, [pc, #732]	; (8007d80 <_dtoa_r+0x618>)
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007aac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ab0:	9b00      	ldr	r3, [sp, #0]
 8007ab2:	05d8      	lsls	r0, r3, #23
 8007ab4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ab8:	d516      	bpl.n	8007ae8 <_dtoa_r+0x380>
 8007aba:	4bb2      	ldr	r3, [pc, #712]	; (8007d84 <_dtoa_r+0x61c>)
 8007abc:	ec51 0b19 	vmov	r0, r1, d9
 8007ac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ac4:	f7f8 fec2 	bl	800084c <__aeabi_ddiv>
 8007ac8:	f007 070f 	and.w	r7, r7, #15
 8007acc:	4682      	mov	sl, r0
 8007ace:	468b      	mov	fp, r1
 8007ad0:	2503      	movs	r5, #3
 8007ad2:	4eac      	ldr	r6, [pc, #688]	; (8007d84 <_dtoa_r+0x61c>)
 8007ad4:	b957      	cbnz	r7, 8007aec <_dtoa_r+0x384>
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	464b      	mov	r3, r9
 8007ada:	4650      	mov	r0, sl
 8007adc:	4659      	mov	r1, fp
 8007ade:	f7f8 feb5 	bl	800084c <__aeabi_ddiv>
 8007ae2:	4682      	mov	sl, r0
 8007ae4:	468b      	mov	fp, r1
 8007ae6:	e028      	b.n	8007b3a <_dtoa_r+0x3d2>
 8007ae8:	2502      	movs	r5, #2
 8007aea:	e7f2      	b.n	8007ad2 <_dtoa_r+0x36a>
 8007aec:	07f9      	lsls	r1, r7, #31
 8007aee:	d508      	bpl.n	8007b02 <_dtoa_r+0x39a>
 8007af0:	4640      	mov	r0, r8
 8007af2:	4649      	mov	r1, r9
 8007af4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007af8:	f7f8 fd7e 	bl	80005f8 <__aeabi_dmul>
 8007afc:	3501      	adds	r5, #1
 8007afe:	4680      	mov	r8, r0
 8007b00:	4689      	mov	r9, r1
 8007b02:	107f      	asrs	r7, r7, #1
 8007b04:	3608      	adds	r6, #8
 8007b06:	e7e5      	b.n	8007ad4 <_dtoa_r+0x36c>
 8007b08:	f000 809b 	beq.w	8007c42 <_dtoa_r+0x4da>
 8007b0c:	9b00      	ldr	r3, [sp, #0]
 8007b0e:	4f9d      	ldr	r7, [pc, #628]	; (8007d84 <_dtoa_r+0x61c>)
 8007b10:	425e      	negs	r6, r3
 8007b12:	4b9b      	ldr	r3, [pc, #620]	; (8007d80 <_dtoa_r+0x618>)
 8007b14:	f006 020f 	and.w	r2, r6, #15
 8007b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	ec51 0b19 	vmov	r0, r1, d9
 8007b24:	f7f8 fd68 	bl	80005f8 <__aeabi_dmul>
 8007b28:	1136      	asrs	r6, r6, #4
 8007b2a:	4682      	mov	sl, r0
 8007b2c:	468b      	mov	fp, r1
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2502      	movs	r5, #2
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d17a      	bne.n	8007c2c <_dtoa_r+0x4c4>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1d3      	bne.n	8007ae2 <_dtoa_r+0x37a>
 8007b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8082 	beq.w	8007c46 <_dtoa_r+0x4de>
 8007b42:	4b91      	ldr	r3, [pc, #580]	; (8007d88 <_dtoa_r+0x620>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	4650      	mov	r0, sl
 8007b48:	4659      	mov	r1, fp
 8007b4a:	f7f8 ffc7 	bl	8000adc <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d079      	beq.n	8007c46 <_dtoa_r+0x4de>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d076      	beq.n	8007c46 <_dtoa_r+0x4de>
 8007b58:	9b02      	ldr	r3, [sp, #8]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dd36      	ble.n	8007bcc <_dtoa_r+0x464>
 8007b5e:	9b00      	ldr	r3, [sp, #0]
 8007b60:	4650      	mov	r0, sl
 8007b62:	4659      	mov	r1, fp
 8007b64:	1e5f      	subs	r7, r3, #1
 8007b66:	2200      	movs	r2, #0
 8007b68:	4b88      	ldr	r3, [pc, #544]	; (8007d8c <_dtoa_r+0x624>)
 8007b6a:	f7f8 fd45 	bl	80005f8 <__aeabi_dmul>
 8007b6e:	9e02      	ldr	r6, [sp, #8]
 8007b70:	4682      	mov	sl, r0
 8007b72:	468b      	mov	fp, r1
 8007b74:	3501      	adds	r5, #1
 8007b76:	4628      	mov	r0, r5
 8007b78:	f7f8 fcd4 	bl	8000524 <__aeabi_i2d>
 8007b7c:	4652      	mov	r2, sl
 8007b7e:	465b      	mov	r3, fp
 8007b80:	f7f8 fd3a 	bl	80005f8 <__aeabi_dmul>
 8007b84:	4b82      	ldr	r3, [pc, #520]	; (8007d90 <_dtoa_r+0x628>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	f7f8 fb80 	bl	800028c <__adddf3>
 8007b8c:	46d0      	mov	r8, sl
 8007b8e:	46d9      	mov	r9, fp
 8007b90:	4682      	mov	sl, r0
 8007b92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b96:	2e00      	cmp	r6, #0
 8007b98:	d158      	bne.n	8007c4c <_dtoa_r+0x4e4>
 8007b9a:	4b7e      	ldr	r3, [pc, #504]	; (8007d94 <_dtoa_r+0x62c>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	f7f8 fb71 	bl	8000288 <__aeabi_dsub>
 8007ba6:	4652      	mov	r2, sl
 8007ba8:	465b      	mov	r3, fp
 8007baa:	4680      	mov	r8, r0
 8007bac:	4689      	mov	r9, r1
 8007bae:	f7f8 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	f040 8295 	bne.w	80080e2 <_dtoa_r+0x97a>
 8007bb8:	4652      	mov	r2, sl
 8007bba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f7f8 ff8b 	bl	8000adc <__aeabi_dcmplt>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	f040 8289 	bne.w	80080de <_dtoa_r+0x976>
 8007bcc:	ec5b ab19 	vmov	sl, fp, d9
 8007bd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f2c0 8148 	blt.w	8007e68 <_dtoa_r+0x700>
 8007bd8:	9a00      	ldr	r2, [sp, #0]
 8007bda:	2a0e      	cmp	r2, #14
 8007bdc:	f300 8144 	bgt.w	8007e68 <_dtoa_r+0x700>
 8007be0:	4b67      	ldr	r3, [pc, #412]	; (8007d80 <_dtoa_r+0x618>)
 8007be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007be6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f280 80d5 	bge.w	8007d9c <_dtoa_r+0x634>
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f300 80d1 	bgt.w	8007d9c <_dtoa_r+0x634>
 8007bfa:	f040 826f 	bne.w	80080dc <_dtoa_r+0x974>
 8007bfe:	4b65      	ldr	r3, [pc, #404]	; (8007d94 <_dtoa_r+0x62c>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	4640      	mov	r0, r8
 8007c04:	4649      	mov	r1, r9
 8007c06:	f7f8 fcf7 	bl	80005f8 <__aeabi_dmul>
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	465b      	mov	r3, fp
 8007c0e:	f7f8 ff79 	bl	8000b04 <__aeabi_dcmpge>
 8007c12:	9e03      	ldr	r6, [sp, #12]
 8007c14:	4637      	mov	r7, r6
 8007c16:	2800      	cmp	r0, #0
 8007c18:	f040 8245 	bne.w	80080a6 <_dtoa_r+0x93e>
 8007c1c:	9d01      	ldr	r5, [sp, #4]
 8007c1e:	2331      	movs	r3, #49	; 0x31
 8007c20:	f805 3b01 	strb.w	r3, [r5], #1
 8007c24:	9b00      	ldr	r3, [sp, #0]
 8007c26:	3301      	adds	r3, #1
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	e240      	b.n	80080ae <_dtoa_r+0x946>
 8007c2c:	07f2      	lsls	r2, r6, #31
 8007c2e:	d505      	bpl.n	8007c3c <_dtoa_r+0x4d4>
 8007c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c34:	f7f8 fce0 	bl	80005f8 <__aeabi_dmul>
 8007c38:	3501      	adds	r5, #1
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	1076      	asrs	r6, r6, #1
 8007c3e:	3708      	adds	r7, #8
 8007c40:	e777      	b.n	8007b32 <_dtoa_r+0x3ca>
 8007c42:	2502      	movs	r5, #2
 8007c44:	e779      	b.n	8007b3a <_dtoa_r+0x3d2>
 8007c46:	9f00      	ldr	r7, [sp, #0]
 8007c48:	9e03      	ldr	r6, [sp, #12]
 8007c4a:	e794      	b.n	8007b76 <_dtoa_r+0x40e>
 8007c4c:	9901      	ldr	r1, [sp, #4]
 8007c4e:	4b4c      	ldr	r3, [pc, #304]	; (8007d80 <_dtoa_r+0x618>)
 8007c50:	4431      	add	r1, r6
 8007c52:	910d      	str	r1, [sp, #52]	; 0x34
 8007c54:	9908      	ldr	r1, [sp, #32]
 8007c56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	d043      	beq.n	8007cea <_dtoa_r+0x582>
 8007c62:	494d      	ldr	r1, [pc, #308]	; (8007d98 <_dtoa_r+0x630>)
 8007c64:	2000      	movs	r0, #0
 8007c66:	f7f8 fdf1 	bl	800084c <__aeabi_ddiv>
 8007c6a:	4652      	mov	r2, sl
 8007c6c:	465b      	mov	r3, fp
 8007c6e:	f7f8 fb0b 	bl	8000288 <__aeabi_dsub>
 8007c72:	9d01      	ldr	r5, [sp, #4]
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	4649      	mov	r1, r9
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f7f8 ff6c 	bl	8000b58 <__aeabi_d2iz>
 8007c80:	4606      	mov	r6, r0
 8007c82:	f7f8 fc4f 	bl	8000524 <__aeabi_i2d>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	f7f8 fafb 	bl	8000288 <__aeabi_dsub>
 8007c92:	3630      	adds	r6, #48	; 0x30
 8007c94:	f805 6b01 	strb.w	r6, [r5], #1
 8007c98:	4652      	mov	r2, sl
 8007c9a:	465b      	mov	r3, fp
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	4689      	mov	r9, r1
 8007ca0:	f7f8 ff1c 	bl	8000adc <__aeabi_dcmplt>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	d163      	bne.n	8007d70 <_dtoa_r+0x608>
 8007ca8:	4642      	mov	r2, r8
 8007caa:	464b      	mov	r3, r9
 8007cac:	4936      	ldr	r1, [pc, #216]	; (8007d88 <_dtoa_r+0x620>)
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f7f8 faea 	bl	8000288 <__aeabi_dsub>
 8007cb4:	4652      	mov	r2, sl
 8007cb6:	465b      	mov	r3, fp
 8007cb8:	f7f8 ff10 	bl	8000adc <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f040 80b5 	bne.w	8007e2c <_dtoa_r+0x6c4>
 8007cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cc4:	429d      	cmp	r5, r3
 8007cc6:	d081      	beq.n	8007bcc <_dtoa_r+0x464>
 8007cc8:	4b30      	ldr	r3, [pc, #192]	; (8007d8c <_dtoa_r+0x624>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4650      	mov	r0, sl
 8007cce:	4659      	mov	r1, fp
 8007cd0:	f7f8 fc92 	bl	80005f8 <__aeabi_dmul>
 8007cd4:	4b2d      	ldr	r3, [pc, #180]	; (8007d8c <_dtoa_r+0x624>)
 8007cd6:	4682      	mov	sl, r0
 8007cd8:	468b      	mov	fp, r1
 8007cda:	4640      	mov	r0, r8
 8007cdc:	4649      	mov	r1, r9
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f7f8 fc8a 	bl	80005f8 <__aeabi_dmul>
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	4689      	mov	r9, r1
 8007ce8:	e7c6      	b.n	8007c78 <_dtoa_r+0x510>
 8007cea:	4650      	mov	r0, sl
 8007cec:	4659      	mov	r1, fp
 8007cee:	f7f8 fc83 	bl	80005f8 <__aeabi_dmul>
 8007cf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cf4:	9d01      	ldr	r5, [sp, #4]
 8007cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf8:	4682      	mov	sl, r0
 8007cfa:	468b      	mov	fp, r1
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	4640      	mov	r0, r8
 8007d00:	f7f8 ff2a 	bl	8000b58 <__aeabi_d2iz>
 8007d04:	4606      	mov	r6, r0
 8007d06:	f7f8 fc0d 	bl	8000524 <__aeabi_i2d>
 8007d0a:	3630      	adds	r6, #48	; 0x30
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4640      	mov	r0, r8
 8007d12:	4649      	mov	r1, r9
 8007d14:	f7f8 fab8 	bl	8000288 <__aeabi_dsub>
 8007d18:	f805 6b01 	strb.w	r6, [r5], #1
 8007d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1e:	429d      	cmp	r5, r3
 8007d20:	4680      	mov	r8, r0
 8007d22:	4689      	mov	r9, r1
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	d124      	bne.n	8007d74 <_dtoa_r+0x60c>
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <_dtoa_r+0x630>)
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	4659      	mov	r1, fp
 8007d30:	f7f8 faac 	bl	800028c <__adddf3>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4640      	mov	r0, r8
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	f7f8 feec 	bl	8000b18 <__aeabi_dcmpgt>
 8007d40:	2800      	cmp	r0, #0
 8007d42:	d173      	bne.n	8007e2c <_dtoa_r+0x6c4>
 8007d44:	4652      	mov	r2, sl
 8007d46:	465b      	mov	r3, fp
 8007d48:	4913      	ldr	r1, [pc, #76]	; (8007d98 <_dtoa_r+0x630>)
 8007d4a:	2000      	movs	r0, #0
 8007d4c:	f7f8 fa9c 	bl	8000288 <__aeabi_dsub>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4640      	mov	r0, r8
 8007d56:	4649      	mov	r1, r9
 8007d58:	f7f8 fec0 	bl	8000adc <__aeabi_dcmplt>
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	f43f af35 	beq.w	8007bcc <_dtoa_r+0x464>
 8007d62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d64:	1e6b      	subs	r3, r5, #1
 8007d66:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d6c:	2b30      	cmp	r3, #48	; 0x30
 8007d6e:	d0f8      	beq.n	8007d62 <_dtoa_r+0x5fa>
 8007d70:	9700      	str	r7, [sp, #0]
 8007d72:	e049      	b.n	8007e08 <_dtoa_r+0x6a0>
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <_dtoa_r+0x624>)
 8007d76:	f7f8 fc3f 	bl	80005f8 <__aeabi_dmul>
 8007d7a:	4680      	mov	r8, r0
 8007d7c:	4689      	mov	r9, r1
 8007d7e:	e7bd      	b.n	8007cfc <_dtoa_r+0x594>
 8007d80:	08009a30 	.word	0x08009a30
 8007d84:	08009a08 	.word	0x08009a08
 8007d88:	3ff00000 	.word	0x3ff00000
 8007d8c:	40240000 	.word	0x40240000
 8007d90:	401c0000 	.word	0x401c0000
 8007d94:	40140000 	.word	0x40140000
 8007d98:	3fe00000 	.word	0x3fe00000
 8007d9c:	9d01      	ldr	r5, [sp, #4]
 8007d9e:	4656      	mov	r6, sl
 8007da0:	465f      	mov	r7, fp
 8007da2:	4642      	mov	r2, r8
 8007da4:	464b      	mov	r3, r9
 8007da6:	4630      	mov	r0, r6
 8007da8:	4639      	mov	r1, r7
 8007daa:	f7f8 fd4f 	bl	800084c <__aeabi_ddiv>
 8007dae:	f7f8 fed3 	bl	8000b58 <__aeabi_d2iz>
 8007db2:	4682      	mov	sl, r0
 8007db4:	f7f8 fbb6 	bl	8000524 <__aeabi_i2d>
 8007db8:	4642      	mov	r2, r8
 8007dba:	464b      	mov	r3, r9
 8007dbc:	f7f8 fc1c 	bl	80005f8 <__aeabi_dmul>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007dcc:	f7f8 fa5c 	bl	8000288 <__aeabi_dsub>
 8007dd0:	f805 6b01 	strb.w	r6, [r5], #1
 8007dd4:	9e01      	ldr	r6, [sp, #4]
 8007dd6:	9f03      	ldr	r7, [sp, #12]
 8007dd8:	1bae      	subs	r6, r5, r6
 8007dda:	42b7      	cmp	r7, r6
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	d135      	bne.n	8007e4e <_dtoa_r+0x6e6>
 8007de2:	f7f8 fa53 	bl	800028c <__adddf3>
 8007de6:	4642      	mov	r2, r8
 8007de8:	464b      	mov	r3, r9
 8007dea:	4606      	mov	r6, r0
 8007dec:	460f      	mov	r7, r1
 8007dee:	f7f8 fe93 	bl	8000b18 <__aeabi_dcmpgt>
 8007df2:	b9d0      	cbnz	r0, 8007e2a <_dtoa_r+0x6c2>
 8007df4:	4642      	mov	r2, r8
 8007df6:	464b      	mov	r3, r9
 8007df8:	4630      	mov	r0, r6
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	f7f8 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e00:	b110      	cbz	r0, 8007e08 <_dtoa_r+0x6a0>
 8007e02:	f01a 0f01 	tst.w	sl, #1
 8007e06:	d110      	bne.n	8007e2a <_dtoa_r+0x6c2>
 8007e08:	4620      	mov	r0, r4
 8007e0a:	ee18 1a10 	vmov	r1, s16
 8007e0e:	f000 fd13 	bl	8008838 <_Bfree>
 8007e12:	2300      	movs	r3, #0
 8007e14:	9800      	ldr	r0, [sp, #0]
 8007e16:	702b      	strb	r3, [r5, #0]
 8007e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	6018      	str	r0, [r3, #0]
 8007e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f43f acf1 	beq.w	8007808 <_dtoa_r+0xa0>
 8007e26:	601d      	str	r5, [r3, #0]
 8007e28:	e4ee      	b.n	8007808 <_dtoa_r+0xa0>
 8007e2a:	9f00      	ldr	r7, [sp, #0]
 8007e2c:	462b      	mov	r3, r5
 8007e2e:	461d      	mov	r5, r3
 8007e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e34:	2a39      	cmp	r2, #57	; 0x39
 8007e36:	d106      	bne.n	8007e46 <_dtoa_r+0x6de>
 8007e38:	9a01      	ldr	r2, [sp, #4]
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d1f7      	bne.n	8007e2e <_dtoa_r+0x6c6>
 8007e3e:	9901      	ldr	r1, [sp, #4]
 8007e40:	2230      	movs	r2, #48	; 0x30
 8007e42:	3701      	adds	r7, #1
 8007e44:	700a      	strb	r2, [r1, #0]
 8007e46:	781a      	ldrb	r2, [r3, #0]
 8007e48:	3201      	adds	r2, #1
 8007e4a:	701a      	strb	r2, [r3, #0]
 8007e4c:	e790      	b.n	8007d70 <_dtoa_r+0x608>
 8007e4e:	4ba6      	ldr	r3, [pc, #664]	; (80080e8 <_dtoa_r+0x980>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	f7f8 fbd1 	bl	80005f8 <__aeabi_dmul>
 8007e56:	2200      	movs	r2, #0
 8007e58:	2300      	movs	r3, #0
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	f7f8 fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d09d      	beq.n	8007da2 <_dtoa_r+0x63a>
 8007e66:	e7cf      	b.n	8007e08 <_dtoa_r+0x6a0>
 8007e68:	9a08      	ldr	r2, [sp, #32]
 8007e6a:	2a00      	cmp	r2, #0
 8007e6c:	f000 80d7 	beq.w	800801e <_dtoa_r+0x8b6>
 8007e70:	9a06      	ldr	r2, [sp, #24]
 8007e72:	2a01      	cmp	r2, #1
 8007e74:	f300 80ba 	bgt.w	8007fec <_dtoa_r+0x884>
 8007e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e7a:	2a00      	cmp	r2, #0
 8007e7c:	f000 80b2 	beq.w	8007fe4 <_dtoa_r+0x87c>
 8007e80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e84:	9e07      	ldr	r6, [sp, #28]
 8007e86:	9d04      	ldr	r5, [sp, #16]
 8007e88:	9a04      	ldr	r2, [sp, #16]
 8007e8a:	441a      	add	r2, r3
 8007e8c:	9204      	str	r2, [sp, #16]
 8007e8e:	9a05      	ldr	r2, [sp, #20]
 8007e90:	2101      	movs	r1, #1
 8007e92:	441a      	add	r2, r3
 8007e94:	4620      	mov	r0, r4
 8007e96:	9205      	str	r2, [sp, #20]
 8007e98:	f000 fd86 	bl	80089a8 <__i2b>
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	dd0c      	ble.n	8007ebc <_dtoa_r+0x754>
 8007ea2:	9b05      	ldr	r3, [sp, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dd09      	ble.n	8007ebc <_dtoa_r+0x754>
 8007ea8:	42ab      	cmp	r3, r5
 8007eaa:	9a04      	ldr	r2, [sp, #16]
 8007eac:	bfa8      	it	ge
 8007eae:	462b      	movge	r3, r5
 8007eb0:	1ad2      	subs	r2, r2, r3
 8007eb2:	9204      	str	r2, [sp, #16]
 8007eb4:	9a05      	ldr	r2, [sp, #20]
 8007eb6:	1aed      	subs	r5, r5, r3
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	9305      	str	r3, [sp, #20]
 8007ebc:	9b07      	ldr	r3, [sp, #28]
 8007ebe:	b31b      	cbz	r3, 8007f08 <_dtoa_r+0x7a0>
 8007ec0:	9b08      	ldr	r3, [sp, #32]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 80af 	beq.w	8008026 <_dtoa_r+0x8be>
 8007ec8:	2e00      	cmp	r6, #0
 8007eca:	dd13      	ble.n	8007ef4 <_dtoa_r+0x78c>
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4632      	mov	r2, r6
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 fe29 	bl	8008b28 <__pow5mult>
 8007ed6:	ee18 2a10 	vmov	r2, s16
 8007eda:	4601      	mov	r1, r0
 8007edc:	4607      	mov	r7, r0
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 fd78 	bl	80089d4 <__multiply>
 8007ee4:	ee18 1a10 	vmov	r1, s16
 8007ee8:	4680      	mov	r8, r0
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 fca4 	bl	8008838 <_Bfree>
 8007ef0:	ee08 8a10 	vmov	s16, r8
 8007ef4:	9b07      	ldr	r3, [sp, #28]
 8007ef6:	1b9a      	subs	r2, r3, r6
 8007ef8:	d006      	beq.n	8007f08 <_dtoa_r+0x7a0>
 8007efa:	ee18 1a10 	vmov	r1, s16
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fe12 	bl	8008b28 <__pow5mult>
 8007f04:	ee08 0a10 	vmov	s16, r0
 8007f08:	2101      	movs	r1, #1
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 fd4c 	bl	80089a8 <__i2b>
 8007f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	4606      	mov	r6, r0
 8007f16:	f340 8088 	ble.w	800802a <_dtoa_r+0x8c2>
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	4601      	mov	r1, r0
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fe02 	bl	8008b28 <__pow5mult>
 8007f24:	9b06      	ldr	r3, [sp, #24]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	4606      	mov	r6, r0
 8007f2a:	f340 8081 	ble.w	8008030 <_dtoa_r+0x8c8>
 8007f2e:	f04f 0800 	mov.w	r8, #0
 8007f32:	6933      	ldr	r3, [r6, #16]
 8007f34:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f38:	6918      	ldr	r0, [r3, #16]
 8007f3a:	f000 fce5 	bl	8008908 <__hi0bits>
 8007f3e:	f1c0 0020 	rsb	r0, r0, #32
 8007f42:	9b05      	ldr	r3, [sp, #20]
 8007f44:	4418      	add	r0, r3
 8007f46:	f010 001f 	ands.w	r0, r0, #31
 8007f4a:	f000 8092 	beq.w	8008072 <_dtoa_r+0x90a>
 8007f4e:	f1c0 0320 	rsb	r3, r0, #32
 8007f52:	2b04      	cmp	r3, #4
 8007f54:	f340 808a 	ble.w	800806c <_dtoa_r+0x904>
 8007f58:	f1c0 001c 	rsb	r0, r0, #28
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	4403      	add	r3, r0
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	9b05      	ldr	r3, [sp, #20]
 8007f64:	4403      	add	r3, r0
 8007f66:	4405      	add	r5, r0
 8007f68:	9305      	str	r3, [sp, #20]
 8007f6a:	9b04      	ldr	r3, [sp, #16]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	dd07      	ble.n	8007f80 <_dtoa_r+0x818>
 8007f70:	ee18 1a10 	vmov	r1, s16
 8007f74:	461a      	mov	r2, r3
 8007f76:	4620      	mov	r0, r4
 8007f78:	f000 fe30 	bl	8008bdc <__lshift>
 8007f7c:	ee08 0a10 	vmov	s16, r0
 8007f80:	9b05      	ldr	r3, [sp, #20]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dd05      	ble.n	8007f92 <_dtoa_r+0x82a>
 8007f86:	4631      	mov	r1, r6
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f000 fe26 	bl	8008bdc <__lshift>
 8007f90:	4606      	mov	r6, r0
 8007f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d06e      	beq.n	8008076 <_dtoa_r+0x90e>
 8007f98:	ee18 0a10 	vmov	r0, s16
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	f000 fe8d 	bl	8008cbc <__mcmp>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	da67      	bge.n	8008076 <_dtoa_r+0x90e>
 8007fa6:	9b00      	ldr	r3, [sp, #0]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	ee18 1a10 	vmov	r1, s16
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 fc61 	bl	800887c <__multadd>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	ee08 0a10 	vmov	s16, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 81b1 	beq.w	8008328 <_dtoa_r+0xbc0>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	4639      	mov	r1, r7
 8007fca:	220a      	movs	r2, #10
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fc55 	bl	800887c <__multadd>
 8007fd2:	9b02      	ldr	r3, [sp, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	f300 808e 	bgt.w	80080f8 <_dtoa_r+0x990>
 8007fdc:	9b06      	ldr	r3, [sp, #24]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	dc51      	bgt.n	8008086 <_dtoa_r+0x91e>
 8007fe2:	e089      	b.n	80080f8 <_dtoa_r+0x990>
 8007fe4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007fea:	e74b      	b.n	8007e84 <_dtoa_r+0x71c>
 8007fec:	9b03      	ldr	r3, [sp, #12]
 8007fee:	1e5e      	subs	r6, r3, #1
 8007ff0:	9b07      	ldr	r3, [sp, #28]
 8007ff2:	42b3      	cmp	r3, r6
 8007ff4:	bfbf      	itttt	lt
 8007ff6:	9b07      	ldrlt	r3, [sp, #28]
 8007ff8:	9607      	strlt	r6, [sp, #28]
 8007ffa:	1af2      	sublt	r2, r6, r3
 8007ffc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ffe:	bfb6      	itet	lt
 8008000:	189b      	addlt	r3, r3, r2
 8008002:	1b9e      	subge	r6, r3, r6
 8008004:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	bfb8      	it	lt
 800800a:	2600      	movlt	r6, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	bfb7      	itett	lt
 8008010:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008014:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008018:	1a9d      	sublt	r5, r3, r2
 800801a:	2300      	movlt	r3, #0
 800801c:	e734      	b.n	8007e88 <_dtoa_r+0x720>
 800801e:	9e07      	ldr	r6, [sp, #28]
 8008020:	9d04      	ldr	r5, [sp, #16]
 8008022:	9f08      	ldr	r7, [sp, #32]
 8008024:	e73b      	b.n	8007e9e <_dtoa_r+0x736>
 8008026:	9a07      	ldr	r2, [sp, #28]
 8008028:	e767      	b.n	8007efa <_dtoa_r+0x792>
 800802a:	9b06      	ldr	r3, [sp, #24]
 800802c:	2b01      	cmp	r3, #1
 800802e:	dc18      	bgt.n	8008062 <_dtoa_r+0x8fa>
 8008030:	f1ba 0f00 	cmp.w	sl, #0
 8008034:	d115      	bne.n	8008062 <_dtoa_r+0x8fa>
 8008036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800803a:	b993      	cbnz	r3, 8008062 <_dtoa_r+0x8fa>
 800803c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008040:	0d1b      	lsrs	r3, r3, #20
 8008042:	051b      	lsls	r3, r3, #20
 8008044:	b183      	cbz	r3, 8008068 <_dtoa_r+0x900>
 8008046:	9b04      	ldr	r3, [sp, #16]
 8008048:	3301      	adds	r3, #1
 800804a:	9304      	str	r3, [sp, #16]
 800804c:	9b05      	ldr	r3, [sp, #20]
 800804e:	3301      	adds	r3, #1
 8008050:	9305      	str	r3, [sp, #20]
 8008052:	f04f 0801 	mov.w	r8, #1
 8008056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008058:	2b00      	cmp	r3, #0
 800805a:	f47f af6a 	bne.w	8007f32 <_dtoa_r+0x7ca>
 800805e:	2001      	movs	r0, #1
 8008060:	e76f      	b.n	8007f42 <_dtoa_r+0x7da>
 8008062:	f04f 0800 	mov.w	r8, #0
 8008066:	e7f6      	b.n	8008056 <_dtoa_r+0x8ee>
 8008068:	4698      	mov	r8, r3
 800806a:	e7f4      	b.n	8008056 <_dtoa_r+0x8ee>
 800806c:	f43f af7d 	beq.w	8007f6a <_dtoa_r+0x802>
 8008070:	4618      	mov	r0, r3
 8008072:	301c      	adds	r0, #28
 8008074:	e772      	b.n	8007f5c <_dtoa_r+0x7f4>
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dc37      	bgt.n	80080ec <_dtoa_r+0x984>
 800807c:	9b06      	ldr	r3, [sp, #24]
 800807e:	2b02      	cmp	r3, #2
 8008080:	dd34      	ble.n	80080ec <_dtoa_r+0x984>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	9302      	str	r3, [sp, #8]
 8008086:	9b02      	ldr	r3, [sp, #8]
 8008088:	b96b      	cbnz	r3, 80080a6 <_dtoa_r+0x93e>
 800808a:	4631      	mov	r1, r6
 800808c:	2205      	movs	r2, #5
 800808e:	4620      	mov	r0, r4
 8008090:	f000 fbf4 	bl	800887c <__multadd>
 8008094:	4601      	mov	r1, r0
 8008096:	4606      	mov	r6, r0
 8008098:	ee18 0a10 	vmov	r0, s16
 800809c:	f000 fe0e 	bl	8008cbc <__mcmp>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	f73f adbb 	bgt.w	8007c1c <_dtoa_r+0x4b4>
 80080a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a8:	9d01      	ldr	r5, [sp, #4]
 80080aa:	43db      	mvns	r3, r3
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	f04f 0800 	mov.w	r8, #0
 80080b2:	4631      	mov	r1, r6
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fbbf 	bl	8008838 <_Bfree>
 80080ba:	2f00      	cmp	r7, #0
 80080bc:	f43f aea4 	beq.w	8007e08 <_dtoa_r+0x6a0>
 80080c0:	f1b8 0f00 	cmp.w	r8, #0
 80080c4:	d005      	beq.n	80080d2 <_dtoa_r+0x96a>
 80080c6:	45b8      	cmp	r8, r7
 80080c8:	d003      	beq.n	80080d2 <_dtoa_r+0x96a>
 80080ca:	4641      	mov	r1, r8
 80080cc:	4620      	mov	r0, r4
 80080ce:	f000 fbb3 	bl	8008838 <_Bfree>
 80080d2:	4639      	mov	r1, r7
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fbaf 	bl	8008838 <_Bfree>
 80080da:	e695      	b.n	8007e08 <_dtoa_r+0x6a0>
 80080dc:	2600      	movs	r6, #0
 80080de:	4637      	mov	r7, r6
 80080e0:	e7e1      	b.n	80080a6 <_dtoa_r+0x93e>
 80080e2:	9700      	str	r7, [sp, #0]
 80080e4:	4637      	mov	r7, r6
 80080e6:	e599      	b.n	8007c1c <_dtoa_r+0x4b4>
 80080e8:	40240000 	.word	0x40240000
 80080ec:	9b08      	ldr	r3, [sp, #32]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80ca 	beq.w	8008288 <_dtoa_r+0xb20>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	9302      	str	r3, [sp, #8]
 80080f8:	2d00      	cmp	r5, #0
 80080fa:	dd05      	ble.n	8008108 <_dtoa_r+0x9a0>
 80080fc:	4639      	mov	r1, r7
 80080fe:	462a      	mov	r2, r5
 8008100:	4620      	mov	r0, r4
 8008102:	f000 fd6b 	bl	8008bdc <__lshift>
 8008106:	4607      	mov	r7, r0
 8008108:	f1b8 0f00 	cmp.w	r8, #0
 800810c:	d05b      	beq.n	80081c6 <_dtoa_r+0xa5e>
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fb51 	bl	80087b8 <_Balloc>
 8008116:	4605      	mov	r5, r0
 8008118:	b928      	cbnz	r0, 8008126 <_dtoa_r+0x9be>
 800811a:	4b87      	ldr	r3, [pc, #540]	; (8008338 <_dtoa_r+0xbd0>)
 800811c:	4602      	mov	r2, r0
 800811e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008122:	f7ff bb3b 	b.w	800779c <_dtoa_r+0x34>
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	3202      	adds	r2, #2
 800812a:	0092      	lsls	r2, r2, #2
 800812c:	f107 010c 	add.w	r1, r7, #12
 8008130:	300c      	adds	r0, #12
 8008132:	f000 fb33 	bl	800879c <memcpy>
 8008136:	2201      	movs	r2, #1
 8008138:	4629      	mov	r1, r5
 800813a:	4620      	mov	r0, r4
 800813c:	f000 fd4e 	bl	8008bdc <__lshift>
 8008140:	9b01      	ldr	r3, [sp, #4]
 8008142:	f103 0901 	add.w	r9, r3, #1
 8008146:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800814a:	4413      	add	r3, r2
 800814c:	9305      	str	r3, [sp, #20]
 800814e:	f00a 0301 	and.w	r3, sl, #1
 8008152:	46b8      	mov	r8, r7
 8008154:	9304      	str	r3, [sp, #16]
 8008156:	4607      	mov	r7, r0
 8008158:	4631      	mov	r1, r6
 800815a:	ee18 0a10 	vmov	r0, s16
 800815e:	f7ff fa75 	bl	800764c <quorem>
 8008162:	4641      	mov	r1, r8
 8008164:	9002      	str	r0, [sp, #8]
 8008166:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800816a:	ee18 0a10 	vmov	r0, s16
 800816e:	f000 fda5 	bl	8008cbc <__mcmp>
 8008172:	463a      	mov	r2, r7
 8008174:	9003      	str	r0, [sp, #12]
 8008176:	4631      	mov	r1, r6
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fdbb 	bl	8008cf4 <__mdiff>
 800817e:	68c2      	ldr	r2, [r0, #12]
 8008180:	f109 3bff 	add.w	fp, r9, #4294967295
 8008184:	4605      	mov	r5, r0
 8008186:	bb02      	cbnz	r2, 80081ca <_dtoa_r+0xa62>
 8008188:	4601      	mov	r1, r0
 800818a:	ee18 0a10 	vmov	r0, s16
 800818e:	f000 fd95 	bl	8008cbc <__mcmp>
 8008192:	4602      	mov	r2, r0
 8008194:	4629      	mov	r1, r5
 8008196:	4620      	mov	r0, r4
 8008198:	9207      	str	r2, [sp, #28]
 800819a:	f000 fb4d 	bl	8008838 <_Bfree>
 800819e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80081a2:	ea43 0102 	orr.w	r1, r3, r2
 80081a6:	9b04      	ldr	r3, [sp, #16]
 80081a8:	430b      	orrs	r3, r1
 80081aa:	464d      	mov	r5, r9
 80081ac:	d10f      	bne.n	80081ce <_dtoa_r+0xa66>
 80081ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081b2:	d02a      	beq.n	800820a <_dtoa_r+0xaa2>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	dd02      	ble.n	80081c0 <_dtoa_r+0xa58>
 80081ba:	9b02      	ldr	r3, [sp, #8]
 80081bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081c0:	f88b a000 	strb.w	sl, [fp]
 80081c4:	e775      	b.n	80080b2 <_dtoa_r+0x94a>
 80081c6:	4638      	mov	r0, r7
 80081c8:	e7ba      	b.n	8008140 <_dtoa_r+0x9d8>
 80081ca:	2201      	movs	r2, #1
 80081cc:	e7e2      	b.n	8008194 <_dtoa_r+0xa2c>
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	db04      	blt.n	80081de <_dtoa_r+0xa76>
 80081d4:	9906      	ldr	r1, [sp, #24]
 80081d6:	430b      	orrs	r3, r1
 80081d8:	9904      	ldr	r1, [sp, #16]
 80081da:	430b      	orrs	r3, r1
 80081dc:	d122      	bne.n	8008224 <_dtoa_r+0xabc>
 80081de:	2a00      	cmp	r2, #0
 80081e0:	ddee      	ble.n	80081c0 <_dtoa_r+0xa58>
 80081e2:	ee18 1a10 	vmov	r1, s16
 80081e6:	2201      	movs	r2, #1
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fcf7 	bl	8008bdc <__lshift>
 80081ee:	4631      	mov	r1, r6
 80081f0:	ee08 0a10 	vmov	s16, r0
 80081f4:	f000 fd62 	bl	8008cbc <__mcmp>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	dc03      	bgt.n	8008204 <_dtoa_r+0xa9c>
 80081fc:	d1e0      	bne.n	80081c0 <_dtoa_r+0xa58>
 80081fe:	f01a 0f01 	tst.w	sl, #1
 8008202:	d0dd      	beq.n	80081c0 <_dtoa_r+0xa58>
 8008204:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008208:	d1d7      	bne.n	80081ba <_dtoa_r+0xa52>
 800820a:	2339      	movs	r3, #57	; 0x39
 800820c:	f88b 3000 	strb.w	r3, [fp]
 8008210:	462b      	mov	r3, r5
 8008212:	461d      	mov	r5, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800821a:	2a39      	cmp	r2, #57	; 0x39
 800821c:	d071      	beq.n	8008302 <_dtoa_r+0xb9a>
 800821e:	3201      	adds	r2, #1
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	e746      	b.n	80080b2 <_dtoa_r+0x94a>
 8008224:	2a00      	cmp	r2, #0
 8008226:	dd07      	ble.n	8008238 <_dtoa_r+0xad0>
 8008228:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800822c:	d0ed      	beq.n	800820a <_dtoa_r+0xaa2>
 800822e:	f10a 0301 	add.w	r3, sl, #1
 8008232:	f88b 3000 	strb.w	r3, [fp]
 8008236:	e73c      	b.n	80080b2 <_dtoa_r+0x94a>
 8008238:	9b05      	ldr	r3, [sp, #20]
 800823a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800823e:	4599      	cmp	r9, r3
 8008240:	d047      	beq.n	80082d2 <_dtoa_r+0xb6a>
 8008242:	ee18 1a10 	vmov	r1, s16
 8008246:	2300      	movs	r3, #0
 8008248:	220a      	movs	r2, #10
 800824a:	4620      	mov	r0, r4
 800824c:	f000 fb16 	bl	800887c <__multadd>
 8008250:	45b8      	cmp	r8, r7
 8008252:	ee08 0a10 	vmov	s16, r0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	f04f 020a 	mov.w	r2, #10
 800825e:	4641      	mov	r1, r8
 8008260:	4620      	mov	r0, r4
 8008262:	d106      	bne.n	8008272 <_dtoa_r+0xb0a>
 8008264:	f000 fb0a 	bl	800887c <__multadd>
 8008268:	4680      	mov	r8, r0
 800826a:	4607      	mov	r7, r0
 800826c:	f109 0901 	add.w	r9, r9, #1
 8008270:	e772      	b.n	8008158 <_dtoa_r+0x9f0>
 8008272:	f000 fb03 	bl	800887c <__multadd>
 8008276:	4639      	mov	r1, r7
 8008278:	4680      	mov	r8, r0
 800827a:	2300      	movs	r3, #0
 800827c:	220a      	movs	r2, #10
 800827e:	4620      	mov	r0, r4
 8008280:	f000 fafc 	bl	800887c <__multadd>
 8008284:	4607      	mov	r7, r0
 8008286:	e7f1      	b.n	800826c <_dtoa_r+0xb04>
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	9302      	str	r3, [sp, #8]
 800828c:	9d01      	ldr	r5, [sp, #4]
 800828e:	ee18 0a10 	vmov	r0, s16
 8008292:	4631      	mov	r1, r6
 8008294:	f7ff f9da 	bl	800764c <quorem>
 8008298:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800829c:	9b01      	ldr	r3, [sp, #4]
 800829e:	f805 ab01 	strb.w	sl, [r5], #1
 80082a2:	1aea      	subs	r2, r5, r3
 80082a4:	9b02      	ldr	r3, [sp, #8]
 80082a6:	4293      	cmp	r3, r2
 80082a8:	dd09      	ble.n	80082be <_dtoa_r+0xb56>
 80082aa:	ee18 1a10 	vmov	r1, s16
 80082ae:	2300      	movs	r3, #0
 80082b0:	220a      	movs	r2, #10
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 fae2 	bl	800887c <__multadd>
 80082b8:	ee08 0a10 	vmov	s16, r0
 80082bc:	e7e7      	b.n	800828e <_dtoa_r+0xb26>
 80082be:	9b02      	ldr	r3, [sp, #8]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	bfc8      	it	gt
 80082c4:	461d      	movgt	r5, r3
 80082c6:	9b01      	ldr	r3, [sp, #4]
 80082c8:	bfd8      	it	le
 80082ca:	2501      	movle	r5, #1
 80082cc:	441d      	add	r5, r3
 80082ce:	f04f 0800 	mov.w	r8, #0
 80082d2:	ee18 1a10 	vmov	r1, s16
 80082d6:	2201      	movs	r2, #1
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 fc7f 	bl	8008bdc <__lshift>
 80082de:	4631      	mov	r1, r6
 80082e0:	ee08 0a10 	vmov	s16, r0
 80082e4:	f000 fcea 	bl	8008cbc <__mcmp>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	dc91      	bgt.n	8008210 <_dtoa_r+0xaa8>
 80082ec:	d102      	bne.n	80082f4 <_dtoa_r+0xb8c>
 80082ee:	f01a 0f01 	tst.w	sl, #1
 80082f2:	d18d      	bne.n	8008210 <_dtoa_r+0xaa8>
 80082f4:	462b      	mov	r3, r5
 80082f6:	461d      	mov	r5, r3
 80082f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fc:	2a30      	cmp	r2, #48	; 0x30
 80082fe:	d0fa      	beq.n	80082f6 <_dtoa_r+0xb8e>
 8008300:	e6d7      	b.n	80080b2 <_dtoa_r+0x94a>
 8008302:	9a01      	ldr	r2, [sp, #4]
 8008304:	429a      	cmp	r2, r3
 8008306:	d184      	bne.n	8008212 <_dtoa_r+0xaaa>
 8008308:	9b00      	ldr	r3, [sp, #0]
 800830a:	3301      	adds	r3, #1
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	2331      	movs	r3, #49	; 0x31
 8008310:	7013      	strb	r3, [r2, #0]
 8008312:	e6ce      	b.n	80080b2 <_dtoa_r+0x94a>
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <_dtoa_r+0xbd4>)
 8008316:	f7ff ba95 	b.w	8007844 <_dtoa_r+0xdc>
 800831a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800831c:	2b00      	cmp	r3, #0
 800831e:	f47f aa6e 	bne.w	80077fe <_dtoa_r+0x96>
 8008322:	4b07      	ldr	r3, [pc, #28]	; (8008340 <_dtoa_r+0xbd8>)
 8008324:	f7ff ba8e 	b.w	8007844 <_dtoa_r+0xdc>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	dcae      	bgt.n	800828c <_dtoa_r+0xb24>
 800832e:	9b06      	ldr	r3, [sp, #24]
 8008330:	2b02      	cmp	r3, #2
 8008332:	f73f aea8 	bgt.w	8008086 <_dtoa_r+0x91e>
 8008336:	e7a9      	b.n	800828c <_dtoa_r+0xb24>
 8008338:	08009937 	.word	0x08009937
 800833c:	08009894 	.word	0x08009894
 8008340:	080098b8 	.word	0x080098b8

08008344 <__sflush_r>:
 8008344:	898a      	ldrh	r2, [r1, #12]
 8008346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834a:	4605      	mov	r5, r0
 800834c:	0710      	lsls	r0, r2, #28
 800834e:	460c      	mov	r4, r1
 8008350:	d458      	bmi.n	8008404 <__sflush_r+0xc0>
 8008352:	684b      	ldr	r3, [r1, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	dc05      	bgt.n	8008364 <__sflush_r+0x20>
 8008358:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	dc02      	bgt.n	8008364 <__sflush_r+0x20>
 800835e:	2000      	movs	r0, #0
 8008360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008366:	2e00      	cmp	r6, #0
 8008368:	d0f9      	beq.n	800835e <__sflush_r+0x1a>
 800836a:	2300      	movs	r3, #0
 800836c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008370:	682f      	ldr	r7, [r5, #0]
 8008372:	602b      	str	r3, [r5, #0]
 8008374:	d032      	beq.n	80083dc <__sflush_r+0x98>
 8008376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008378:	89a3      	ldrh	r3, [r4, #12]
 800837a:	075a      	lsls	r2, r3, #29
 800837c:	d505      	bpl.n	800838a <__sflush_r+0x46>
 800837e:	6863      	ldr	r3, [r4, #4]
 8008380:	1ac0      	subs	r0, r0, r3
 8008382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008384:	b10b      	cbz	r3, 800838a <__sflush_r+0x46>
 8008386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008388:	1ac0      	subs	r0, r0, r3
 800838a:	2300      	movs	r3, #0
 800838c:	4602      	mov	r2, r0
 800838e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	4628      	mov	r0, r5
 8008394:	47b0      	blx	r6
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	d106      	bne.n	80083aa <__sflush_r+0x66>
 800839c:	6829      	ldr	r1, [r5, #0]
 800839e:	291d      	cmp	r1, #29
 80083a0:	d82c      	bhi.n	80083fc <__sflush_r+0xb8>
 80083a2:	4a2a      	ldr	r2, [pc, #168]	; (800844c <__sflush_r+0x108>)
 80083a4:	40ca      	lsrs	r2, r1
 80083a6:	07d6      	lsls	r6, r2, #31
 80083a8:	d528      	bpl.n	80083fc <__sflush_r+0xb8>
 80083aa:	2200      	movs	r2, #0
 80083ac:	6062      	str	r2, [r4, #4]
 80083ae:	04d9      	lsls	r1, r3, #19
 80083b0:	6922      	ldr	r2, [r4, #16]
 80083b2:	6022      	str	r2, [r4, #0]
 80083b4:	d504      	bpl.n	80083c0 <__sflush_r+0x7c>
 80083b6:	1c42      	adds	r2, r0, #1
 80083b8:	d101      	bne.n	80083be <__sflush_r+0x7a>
 80083ba:	682b      	ldr	r3, [r5, #0]
 80083bc:	b903      	cbnz	r3, 80083c0 <__sflush_r+0x7c>
 80083be:	6560      	str	r0, [r4, #84]	; 0x54
 80083c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083c2:	602f      	str	r7, [r5, #0]
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d0ca      	beq.n	800835e <__sflush_r+0x1a>
 80083c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083cc:	4299      	cmp	r1, r3
 80083ce:	d002      	beq.n	80083d6 <__sflush_r+0x92>
 80083d0:	4628      	mov	r0, r5
 80083d2:	f000 fd8b 	bl	8008eec <_free_r>
 80083d6:	2000      	movs	r0, #0
 80083d8:	6360      	str	r0, [r4, #52]	; 0x34
 80083da:	e7c1      	b.n	8008360 <__sflush_r+0x1c>
 80083dc:	6a21      	ldr	r1, [r4, #32]
 80083de:	2301      	movs	r3, #1
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b0      	blx	r6
 80083e4:	1c41      	adds	r1, r0, #1
 80083e6:	d1c7      	bne.n	8008378 <__sflush_r+0x34>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0c4      	beq.n	8008378 <__sflush_r+0x34>
 80083ee:	2b1d      	cmp	r3, #29
 80083f0:	d001      	beq.n	80083f6 <__sflush_r+0xb2>
 80083f2:	2b16      	cmp	r3, #22
 80083f4:	d101      	bne.n	80083fa <__sflush_r+0xb6>
 80083f6:	602f      	str	r7, [r5, #0]
 80083f8:	e7b1      	b.n	800835e <__sflush_r+0x1a>
 80083fa:	89a3      	ldrh	r3, [r4, #12]
 80083fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008400:	81a3      	strh	r3, [r4, #12]
 8008402:	e7ad      	b.n	8008360 <__sflush_r+0x1c>
 8008404:	690f      	ldr	r7, [r1, #16]
 8008406:	2f00      	cmp	r7, #0
 8008408:	d0a9      	beq.n	800835e <__sflush_r+0x1a>
 800840a:	0793      	lsls	r3, r2, #30
 800840c:	680e      	ldr	r6, [r1, #0]
 800840e:	bf08      	it	eq
 8008410:	694b      	ldreq	r3, [r1, #20]
 8008412:	600f      	str	r7, [r1, #0]
 8008414:	bf18      	it	ne
 8008416:	2300      	movne	r3, #0
 8008418:	eba6 0807 	sub.w	r8, r6, r7
 800841c:	608b      	str	r3, [r1, #8]
 800841e:	f1b8 0f00 	cmp.w	r8, #0
 8008422:	dd9c      	ble.n	800835e <__sflush_r+0x1a>
 8008424:	6a21      	ldr	r1, [r4, #32]
 8008426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008428:	4643      	mov	r3, r8
 800842a:	463a      	mov	r2, r7
 800842c:	4628      	mov	r0, r5
 800842e:	47b0      	blx	r6
 8008430:	2800      	cmp	r0, #0
 8008432:	dc06      	bgt.n	8008442 <__sflush_r+0xfe>
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800843a:	81a3      	strh	r3, [r4, #12]
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	e78e      	b.n	8008360 <__sflush_r+0x1c>
 8008442:	4407      	add	r7, r0
 8008444:	eba8 0800 	sub.w	r8, r8, r0
 8008448:	e7e9      	b.n	800841e <__sflush_r+0xda>
 800844a:	bf00      	nop
 800844c:	20400001 	.word	0x20400001

08008450 <_fflush_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	690b      	ldr	r3, [r1, #16]
 8008454:	4605      	mov	r5, r0
 8008456:	460c      	mov	r4, r1
 8008458:	b913      	cbnz	r3, 8008460 <_fflush_r+0x10>
 800845a:	2500      	movs	r5, #0
 800845c:	4628      	mov	r0, r5
 800845e:	bd38      	pop	{r3, r4, r5, pc}
 8008460:	b118      	cbz	r0, 800846a <_fflush_r+0x1a>
 8008462:	6983      	ldr	r3, [r0, #24]
 8008464:	b90b      	cbnz	r3, 800846a <_fflush_r+0x1a>
 8008466:	f000 f887 	bl	8008578 <__sinit>
 800846a:	4b14      	ldr	r3, [pc, #80]	; (80084bc <_fflush_r+0x6c>)
 800846c:	429c      	cmp	r4, r3
 800846e:	d11b      	bne.n	80084a8 <_fflush_r+0x58>
 8008470:	686c      	ldr	r4, [r5, #4]
 8008472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0ef      	beq.n	800845a <_fflush_r+0xa>
 800847a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800847c:	07d0      	lsls	r0, r2, #31
 800847e:	d404      	bmi.n	800848a <_fflush_r+0x3a>
 8008480:	0599      	lsls	r1, r3, #22
 8008482:	d402      	bmi.n	800848a <_fflush_r+0x3a>
 8008484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008486:	f000 f91a 	bl	80086be <__retarget_lock_acquire_recursive>
 800848a:	4628      	mov	r0, r5
 800848c:	4621      	mov	r1, r4
 800848e:	f7ff ff59 	bl	8008344 <__sflush_r>
 8008492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008494:	07da      	lsls	r2, r3, #31
 8008496:	4605      	mov	r5, r0
 8008498:	d4e0      	bmi.n	800845c <_fflush_r+0xc>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	059b      	lsls	r3, r3, #22
 800849e:	d4dd      	bmi.n	800845c <_fflush_r+0xc>
 80084a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084a2:	f000 f90d 	bl	80086c0 <__retarget_lock_release_recursive>
 80084a6:	e7d9      	b.n	800845c <_fflush_r+0xc>
 80084a8:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <_fflush_r+0x70>)
 80084aa:	429c      	cmp	r4, r3
 80084ac:	d101      	bne.n	80084b2 <_fflush_r+0x62>
 80084ae:	68ac      	ldr	r4, [r5, #8]
 80084b0:	e7df      	b.n	8008472 <_fflush_r+0x22>
 80084b2:	4b04      	ldr	r3, [pc, #16]	; (80084c4 <_fflush_r+0x74>)
 80084b4:	429c      	cmp	r4, r3
 80084b6:	bf08      	it	eq
 80084b8:	68ec      	ldreq	r4, [r5, #12]
 80084ba:	e7da      	b.n	8008472 <_fflush_r+0x22>
 80084bc:	08009968 	.word	0x08009968
 80084c0:	08009988 	.word	0x08009988
 80084c4:	08009948 	.word	0x08009948

080084c8 <std>:
 80084c8:	2300      	movs	r3, #0
 80084ca:	b510      	push	{r4, lr}
 80084cc:	4604      	mov	r4, r0
 80084ce:	e9c0 3300 	strd	r3, r3, [r0]
 80084d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084d6:	6083      	str	r3, [r0, #8]
 80084d8:	8181      	strh	r1, [r0, #12]
 80084da:	6643      	str	r3, [r0, #100]	; 0x64
 80084dc:	81c2      	strh	r2, [r0, #14]
 80084de:	6183      	str	r3, [r0, #24]
 80084e0:	4619      	mov	r1, r3
 80084e2:	2208      	movs	r2, #8
 80084e4:	305c      	adds	r0, #92	; 0x5c
 80084e6:	f7fe fb67 	bl	8006bb8 <memset>
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <std+0x38>)
 80084ec:	6263      	str	r3, [r4, #36]	; 0x24
 80084ee:	4b05      	ldr	r3, [pc, #20]	; (8008504 <std+0x3c>)
 80084f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80084f2:	4b05      	ldr	r3, [pc, #20]	; (8008508 <std+0x40>)
 80084f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <std+0x44>)
 80084f8:	6224      	str	r4, [r4, #32]
 80084fa:	6323      	str	r3, [r4, #48]	; 0x30
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	bf00      	nop
 8008500:	08009381 	.word	0x08009381
 8008504:	080093a3 	.word	0x080093a3
 8008508:	080093db 	.word	0x080093db
 800850c:	080093ff 	.word	0x080093ff

08008510 <_cleanup_r>:
 8008510:	4901      	ldr	r1, [pc, #4]	; (8008518 <_cleanup_r+0x8>)
 8008512:	f000 b8af 	b.w	8008674 <_fwalk_reent>
 8008516:	bf00      	nop
 8008518:	08008451 	.word	0x08008451

0800851c <__sfmoreglue>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	2268      	movs	r2, #104	; 0x68
 8008520:	1e4d      	subs	r5, r1, #1
 8008522:	4355      	muls	r5, r2
 8008524:	460e      	mov	r6, r1
 8008526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800852a:	f000 fd4b 	bl	8008fc4 <_malloc_r>
 800852e:	4604      	mov	r4, r0
 8008530:	b140      	cbz	r0, 8008544 <__sfmoreglue+0x28>
 8008532:	2100      	movs	r1, #0
 8008534:	e9c0 1600 	strd	r1, r6, [r0]
 8008538:	300c      	adds	r0, #12
 800853a:	60a0      	str	r0, [r4, #8]
 800853c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008540:	f7fe fb3a 	bl	8006bb8 <memset>
 8008544:	4620      	mov	r0, r4
 8008546:	bd70      	pop	{r4, r5, r6, pc}

08008548 <__sfp_lock_acquire>:
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <__sfp_lock_acquire+0x8>)
 800854a:	f000 b8b8 	b.w	80086be <__retarget_lock_acquire_recursive>
 800854e:	bf00      	nop
 8008550:	200015b9 	.word	0x200015b9

08008554 <__sfp_lock_release>:
 8008554:	4801      	ldr	r0, [pc, #4]	; (800855c <__sfp_lock_release+0x8>)
 8008556:	f000 b8b3 	b.w	80086c0 <__retarget_lock_release_recursive>
 800855a:	bf00      	nop
 800855c:	200015b9 	.word	0x200015b9

08008560 <__sinit_lock_acquire>:
 8008560:	4801      	ldr	r0, [pc, #4]	; (8008568 <__sinit_lock_acquire+0x8>)
 8008562:	f000 b8ac 	b.w	80086be <__retarget_lock_acquire_recursive>
 8008566:	bf00      	nop
 8008568:	200015ba 	.word	0x200015ba

0800856c <__sinit_lock_release>:
 800856c:	4801      	ldr	r0, [pc, #4]	; (8008574 <__sinit_lock_release+0x8>)
 800856e:	f000 b8a7 	b.w	80086c0 <__retarget_lock_release_recursive>
 8008572:	bf00      	nop
 8008574:	200015ba 	.word	0x200015ba

08008578 <__sinit>:
 8008578:	b510      	push	{r4, lr}
 800857a:	4604      	mov	r4, r0
 800857c:	f7ff fff0 	bl	8008560 <__sinit_lock_acquire>
 8008580:	69a3      	ldr	r3, [r4, #24]
 8008582:	b11b      	cbz	r3, 800858c <__sinit+0x14>
 8008584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008588:	f7ff bff0 	b.w	800856c <__sinit_lock_release>
 800858c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008590:	6523      	str	r3, [r4, #80]	; 0x50
 8008592:	4b13      	ldr	r3, [pc, #76]	; (80085e0 <__sinit+0x68>)
 8008594:	4a13      	ldr	r2, [pc, #76]	; (80085e4 <__sinit+0x6c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	62a2      	str	r2, [r4, #40]	; 0x28
 800859a:	42a3      	cmp	r3, r4
 800859c:	bf04      	itt	eq
 800859e:	2301      	moveq	r3, #1
 80085a0:	61a3      	streq	r3, [r4, #24]
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 f820 	bl	80085e8 <__sfp>
 80085a8:	6060      	str	r0, [r4, #4]
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 f81c 	bl	80085e8 <__sfp>
 80085b0:	60a0      	str	r0, [r4, #8]
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 f818 	bl	80085e8 <__sfp>
 80085b8:	2200      	movs	r2, #0
 80085ba:	60e0      	str	r0, [r4, #12]
 80085bc:	2104      	movs	r1, #4
 80085be:	6860      	ldr	r0, [r4, #4]
 80085c0:	f7ff ff82 	bl	80084c8 <std>
 80085c4:	68a0      	ldr	r0, [r4, #8]
 80085c6:	2201      	movs	r2, #1
 80085c8:	2109      	movs	r1, #9
 80085ca:	f7ff ff7d 	bl	80084c8 <std>
 80085ce:	68e0      	ldr	r0, [r4, #12]
 80085d0:	2202      	movs	r2, #2
 80085d2:	2112      	movs	r1, #18
 80085d4:	f7ff ff78 	bl	80084c8 <std>
 80085d8:	2301      	movs	r3, #1
 80085da:	61a3      	str	r3, [r4, #24]
 80085dc:	e7d2      	b.n	8008584 <__sinit+0xc>
 80085de:	bf00      	nop
 80085e0:	08009880 	.word	0x08009880
 80085e4:	08008511 	.word	0x08008511

080085e8 <__sfp>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	4607      	mov	r7, r0
 80085ec:	f7ff ffac 	bl	8008548 <__sfp_lock_acquire>
 80085f0:	4b1e      	ldr	r3, [pc, #120]	; (800866c <__sfp+0x84>)
 80085f2:	681e      	ldr	r6, [r3, #0]
 80085f4:	69b3      	ldr	r3, [r6, #24]
 80085f6:	b913      	cbnz	r3, 80085fe <__sfp+0x16>
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7ff ffbd 	bl	8008578 <__sinit>
 80085fe:	3648      	adds	r6, #72	; 0x48
 8008600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008604:	3b01      	subs	r3, #1
 8008606:	d503      	bpl.n	8008610 <__sfp+0x28>
 8008608:	6833      	ldr	r3, [r6, #0]
 800860a:	b30b      	cbz	r3, 8008650 <__sfp+0x68>
 800860c:	6836      	ldr	r6, [r6, #0]
 800860e:	e7f7      	b.n	8008600 <__sfp+0x18>
 8008610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008614:	b9d5      	cbnz	r5, 800864c <__sfp+0x64>
 8008616:	4b16      	ldr	r3, [pc, #88]	; (8008670 <__sfp+0x88>)
 8008618:	60e3      	str	r3, [r4, #12]
 800861a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800861e:	6665      	str	r5, [r4, #100]	; 0x64
 8008620:	f000 f84c 	bl	80086bc <__retarget_lock_init_recursive>
 8008624:	f7ff ff96 	bl	8008554 <__sfp_lock_release>
 8008628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800862c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008630:	6025      	str	r5, [r4, #0]
 8008632:	61a5      	str	r5, [r4, #24]
 8008634:	2208      	movs	r2, #8
 8008636:	4629      	mov	r1, r5
 8008638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800863c:	f7fe fabc 	bl	8006bb8 <memset>
 8008640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008648:	4620      	mov	r0, r4
 800864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864c:	3468      	adds	r4, #104	; 0x68
 800864e:	e7d9      	b.n	8008604 <__sfp+0x1c>
 8008650:	2104      	movs	r1, #4
 8008652:	4638      	mov	r0, r7
 8008654:	f7ff ff62 	bl	800851c <__sfmoreglue>
 8008658:	4604      	mov	r4, r0
 800865a:	6030      	str	r0, [r6, #0]
 800865c:	2800      	cmp	r0, #0
 800865e:	d1d5      	bne.n	800860c <__sfp+0x24>
 8008660:	f7ff ff78 	bl	8008554 <__sfp_lock_release>
 8008664:	230c      	movs	r3, #12
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	e7ee      	b.n	8008648 <__sfp+0x60>
 800866a:	bf00      	nop
 800866c:	08009880 	.word	0x08009880
 8008670:	ffff0001 	.word	0xffff0001

08008674 <_fwalk_reent>:
 8008674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008678:	4606      	mov	r6, r0
 800867a:	4688      	mov	r8, r1
 800867c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008680:	2700      	movs	r7, #0
 8008682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008686:	f1b9 0901 	subs.w	r9, r9, #1
 800868a:	d505      	bpl.n	8008698 <_fwalk_reent+0x24>
 800868c:	6824      	ldr	r4, [r4, #0]
 800868e:	2c00      	cmp	r4, #0
 8008690:	d1f7      	bne.n	8008682 <_fwalk_reent+0xe>
 8008692:	4638      	mov	r0, r7
 8008694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008698:	89ab      	ldrh	r3, [r5, #12]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d907      	bls.n	80086ae <_fwalk_reent+0x3a>
 800869e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086a2:	3301      	adds	r3, #1
 80086a4:	d003      	beq.n	80086ae <_fwalk_reent+0x3a>
 80086a6:	4629      	mov	r1, r5
 80086a8:	4630      	mov	r0, r6
 80086aa:	47c0      	blx	r8
 80086ac:	4307      	orrs	r7, r0
 80086ae:	3568      	adds	r5, #104	; 0x68
 80086b0:	e7e9      	b.n	8008686 <_fwalk_reent+0x12>
	...

080086b4 <_localeconv_r>:
 80086b4:	4800      	ldr	r0, [pc, #0]	; (80086b8 <_localeconv_r+0x4>)
 80086b6:	4770      	bx	lr
 80086b8:	20000164 	.word	0x20000164

080086bc <__retarget_lock_init_recursive>:
 80086bc:	4770      	bx	lr

080086be <__retarget_lock_acquire_recursive>:
 80086be:	4770      	bx	lr

080086c0 <__retarget_lock_release_recursive>:
 80086c0:	4770      	bx	lr

080086c2 <__swhatbuf_r>:
 80086c2:	b570      	push	{r4, r5, r6, lr}
 80086c4:	460e      	mov	r6, r1
 80086c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ca:	2900      	cmp	r1, #0
 80086cc:	b096      	sub	sp, #88	; 0x58
 80086ce:	4614      	mov	r4, r2
 80086d0:	461d      	mov	r5, r3
 80086d2:	da08      	bge.n	80086e6 <__swhatbuf_r+0x24>
 80086d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	602a      	str	r2, [r5, #0]
 80086dc:	061a      	lsls	r2, r3, #24
 80086de:	d410      	bmi.n	8008702 <__swhatbuf_r+0x40>
 80086e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086e4:	e00e      	b.n	8008704 <__swhatbuf_r+0x42>
 80086e6:	466a      	mov	r2, sp
 80086e8:	f000 fee0 	bl	80094ac <_fstat_r>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	dbf1      	blt.n	80086d4 <__swhatbuf_r+0x12>
 80086f0:	9a01      	ldr	r2, [sp, #4]
 80086f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086fa:	425a      	negs	r2, r3
 80086fc:	415a      	adcs	r2, r3
 80086fe:	602a      	str	r2, [r5, #0]
 8008700:	e7ee      	b.n	80086e0 <__swhatbuf_r+0x1e>
 8008702:	2340      	movs	r3, #64	; 0x40
 8008704:	2000      	movs	r0, #0
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	b016      	add	sp, #88	; 0x58
 800870a:	bd70      	pop	{r4, r5, r6, pc}

0800870c <__smakebuf_r>:
 800870c:	898b      	ldrh	r3, [r1, #12]
 800870e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008710:	079d      	lsls	r5, r3, #30
 8008712:	4606      	mov	r6, r0
 8008714:	460c      	mov	r4, r1
 8008716:	d507      	bpl.n	8008728 <__smakebuf_r+0x1c>
 8008718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	6123      	str	r3, [r4, #16]
 8008720:	2301      	movs	r3, #1
 8008722:	6163      	str	r3, [r4, #20]
 8008724:	b002      	add	sp, #8
 8008726:	bd70      	pop	{r4, r5, r6, pc}
 8008728:	ab01      	add	r3, sp, #4
 800872a:	466a      	mov	r2, sp
 800872c:	f7ff ffc9 	bl	80086c2 <__swhatbuf_r>
 8008730:	9900      	ldr	r1, [sp, #0]
 8008732:	4605      	mov	r5, r0
 8008734:	4630      	mov	r0, r6
 8008736:	f000 fc45 	bl	8008fc4 <_malloc_r>
 800873a:	b948      	cbnz	r0, 8008750 <__smakebuf_r+0x44>
 800873c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008740:	059a      	lsls	r2, r3, #22
 8008742:	d4ef      	bmi.n	8008724 <__smakebuf_r+0x18>
 8008744:	f023 0303 	bic.w	r3, r3, #3
 8008748:	f043 0302 	orr.w	r3, r3, #2
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	e7e3      	b.n	8008718 <__smakebuf_r+0xc>
 8008750:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <__smakebuf_r+0x7c>)
 8008752:	62b3      	str	r3, [r6, #40]	; 0x28
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	6020      	str	r0, [r4, #0]
 8008758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	9b00      	ldr	r3, [sp, #0]
 8008760:	6163      	str	r3, [r4, #20]
 8008762:	9b01      	ldr	r3, [sp, #4]
 8008764:	6120      	str	r0, [r4, #16]
 8008766:	b15b      	cbz	r3, 8008780 <__smakebuf_r+0x74>
 8008768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876c:	4630      	mov	r0, r6
 800876e:	f000 feaf 	bl	80094d0 <_isatty_r>
 8008772:	b128      	cbz	r0, 8008780 <__smakebuf_r+0x74>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f023 0303 	bic.w	r3, r3, #3
 800877a:	f043 0301 	orr.w	r3, r3, #1
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	89a0      	ldrh	r0, [r4, #12]
 8008782:	4305      	orrs	r5, r0
 8008784:	81a5      	strh	r5, [r4, #12]
 8008786:	e7cd      	b.n	8008724 <__smakebuf_r+0x18>
 8008788:	08008511 	.word	0x08008511

0800878c <malloc>:
 800878c:	4b02      	ldr	r3, [pc, #8]	; (8008798 <malloc+0xc>)
 800878e:	4601      	mov	r1, r0
 8008790:	6818      	ldr	r0, [r3, #0]
 8008792:	f000 bc17 	b.w	8008fc4 <_malloc_r>
 8008796:	bf00      	nop
 8008798:	20000010 	.word	0x20000010

0800879c <memcpy>:
 800879c:	440a      	add	r2, r1
 800879e:	4291      	cmp	r1, r2
 80087a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80087a4:	d100      	bne.n	80087a8 <memcpy+0xc>
 80087a6:	4770      	bx	lr
 80087a8:	b510      	push	{r4, lr}
 80087aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087b2:	4291      	cmp	r1, r2
 80087b4:	d1f9      	bne.n	80087aa <memcpy+0xe>
 80087b6:	bd10      	pop	{r4, pc}

080087b8 <_Balloc>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087bc:	4604      	mov	r4, r0
 80087be:	460d      	mov	r5, r1
 80087c0:	b976      	cbnz	r6, 80087e0 <_Balloc+0x28>
 80087c2:	2010      	movs	r0, #16
 80087c4:	f7ff ffe2 	bl	800878c <malloc>
 80087c8:	4602      	mov	r2, r0
 80087ca:	6260      	str	r0, [r4, #36]	; 0x24
 80087cc:	b920      	cbnz	r0, 80087d8 <_Balloc+0x20>
 80087ce:	4b18      	ldr	r3, [pc, #96]	; (8008830 <_Balloc+0x78>)
 80087d0:	4818      	ldr	r0, [pc, #96]	; (8008834 <_Balloc+0x7c>)
 80087d2:	2166      	movs	r1, #102	; 0x66
 80087d4:	f000 fe2a 	bl	800942c <__assert_func>
 80087d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087dc:	6006      	str	r6, [r0, #0]
 80087de:	60c6      	str	r6, [r0, #12]
 80087e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80087e2:	68f3      	ldr	r3, [r6, #12]
 80087e4:	b183      	cbz	r3, 8008808 <_Balloc+0x50>
 80087e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087ee:	b9b8      	cbnz	r0, 8008820 <_Balloc+0x68>
 80087f0:	2101      	movs	r1, #1
 80087f2:	fa01 f605 	lsl.w	r6, r1, r5
 80087f6:	1d72      	adds	r2, r6, #5
 80087f8:	0092      	lsls	r2, r2, #2
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fb60 	bl	8008ec0 <_calloc_r>
 8008800:	b160      	cbz	r0, 800881c <_Balloc+0x64>
 8008802:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008806:	e00e      	b.n	8008826 <_Balloc+0x6e>
 8008808:	2221      	movs	r2, #33	; 0x21
 800880a:	2104      	movs	r1, #4
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fb57 	bl	8008ec0 <_calloc_r>
 8008812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008814:	60f0      	str	r0, [r6, #12]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e4      	bne.n	80087e6 <_Balloc+0x2e>
 800881c:	2000      	movs	r0, #0
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	6802      	ldr	r2, [r0, #0]
 8008822:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008826:	2300      	movs	r3, #0
 8008828:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800882c:	e7f7      	b.n	800881e <_Balloc+0x66>
 800882e:	bf00      	nop
 8008830:	080098c5 	.word	0x080098c5
 8008834:	080099a8 	.word	0x080099a8

08008838 <_Bfree>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800883c:	4605      	mov	r5, r0
 800883e:	460c      	mov	r4, r1
 8008840:	b976      	cbnz	r6, 8008860 <_Bfree+0x28>
 8008842:	2010      	movs	r0, #16
 8008844:	f7ff ffa2 	bl	800878c <malloc>
 8008848:	4602      	mov	r2, r0
 800884a:	6268      	str	r0, [r5, #36]	; 0x24
 800884c:	b920      	cbnz	r0, 8008858 <_Bfree+0x20>
 800884e:	4b09      	ldr	r3, [pc, #36]	; (8008874 <_Bfree+0x3c>)
 8008850:	4809      	ldr	r0, [pc, #36]	; (8008878 <_Bfree+0x40>)
 8008852:	218a      	movs	r1, #138	; 0x8a
 8008854:	f000 fdea 	bl	800942c <__assert_func>
 8008858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800885c:	6006      	str	r6, [r0, #0]
 800885e:	60c6      	str	r6, [r0, #12]
 8008860:	b13c      	cbz	r4, 8008872 <_Bfree+0x3a>
 8008862:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008864:	6862      	ldr	r2, [r4, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800886c:	6021      	str	r1, [r4, #0]
 800886e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008872:	bd70      	pop	{r4, r5, r6, pc}
 8008874:	080098c5 	.word	0x080098c5
 8008878:	080099a8 	.word	0x080099a8

0800887c <__multadd>:
 800887c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008880:	690d      	ldr	r5, [r1, #16]
 8008882:	4607      	mov	r7, r0
 8008884:	460c      	mov	r4, r1
 8008886:	461e      	mov	r6, r3
 8008888:	f101 0c14 	add.w	ip, r1, #20
 800888c:	2000      	movs	r0, #0
 800888e:	f8dc 3000 	ldr.w	r3, [ip]
 8008892:	b299      	uxth	r1, r3
 8008894:	fb02 6101 	mla	r1, r2, r1, r6
 8008898:	0c1e      	lsrs	r6, r3, #16
 800889a:	0c0b      	lsrs	r3, r1, #16
 800889c:	fb02 3306 	mla	r3, r2, r6, r3
 80088a0:	b289      	uxth	r1, r1
 80088a2:	3001      	adds	r0, #1
 80088a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088a8:	4285      	cmp	r5, r0
 80088aa:	f84c 1b04 	str.w	r1, [ip], #4
 80088ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088b2:	dcec      	bgt.n	800888e <__multadd+0x12>
 80088b4:	b30e      	cbz	r6, 80088fa <__multadd+0x7e>
 80088b6:	68a3      	ldr	r3, [r4, #8]
 80088b8:	42ab      	cmp	r3, r5
 80088ba:	dc19      	bgt.n	80088f0 <__multadd+0x74>
 80088bc:	6861      	ldr	r1, [r4, #4]
 80088be:	4638      	mov	r0, r7
 80088c0:	3101      	adds	r1, #1
 80088c2:	f7ff ff79 	bl	80087b8 <_Balloc>
 80088c6:	4680      	mov	r8, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <__multadd+0x5a>
 80088ca:	4602      	mov	r2, r0
 80088cc:	4b0c      	ldr	r3, [pc, #48]	; (8008900 <__multadd+0x84>)
 80088ce:	480d      	ldr	r0, [pc, #52]	; (8008904 <__multadd+0x88>)
 80088d0:	21b5      	movs	r1, #181	; 0xb5
 80088d2:	f000 fdab 	bl	800942c <__assert_func>
 80088d6:	6922      	ldr	r2, [r4, #16]
 80088d8:	3202      	adds	r2, #2
 80088da:	f104 010c 	add.w	r1, r4, #12
 80088de:	0092      	lsls	r2, r2, #2
 80088e0:	300c      	adds	r0, #12
 80088e2:	f7ff ff5b 	bl	800879c <memcpy>
 80088e6:	4621      	mov	r1, r4
 80088e8:	4638      	mov	r0, r7
 80088ea:	f7ff ffa5 	bl	8008838 <_Bfree>
 80088ee:	4644      	mov	r4, r8
 80088f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088f4:	3501      	adds	r5, #1
 80088f6:	615e      	str	r6, [r3, #20]
 80088f8:	6125      	str	r5, [r4, #16]
 80088fa:	4620      	mov	r0, r4
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	08009937 	.word	0x08009937
 8008904:	080099a8 	.word	0x080099a8

08008908 <__hi0bits>:
 8008908:	0c03      	lsrs	r3, r0, #16
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	b9d3      	cbnz	r3, 8008944 <__hi0bits+0x3c>
 800890e:	0400      	lsls	r0, r0, #16
 8008910:	2310      	movs	r3, #16
 8008912:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008916:	bf04      	itt	eq
 8008918:	0200      	lsleq	r0, r0, #8
 800891a:	3308      	addeq	r3, #8
 800891c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008920:	bf04      	itt	eq
 8008922:	0100      	lsleq	r0, r0, #4
 8008924:	3304      	addeq	r3, #4
 8008926:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800892a:	bf04      	itt	eq
 800892c:	0080      	lsleq	r0, r0, #2
 800892e:	3302      	addeq	r3, #2
 8008930:	2800      	cmp	r0, #0
 8008932:	db05      	blt.n	8008940 <__hi0bits+0x38>
 8008934:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008938:	f103 0301 	add.w	r3, r3, #1
 800893c:	bf08      	it	eq
 800893e:	2320      	moveq	r3, #32
 8008940:	4618      	mov	r0, r3
 8008942:	4770      	bx	lr
 8008944:	2300      	movs	r3, #0
 8008946:	e7e4      	b.n	8008912 <__hi0bits+0xa>

08008948 <__lo0bits>:
 8008948:	6803      	ldr	r3, [r0, #0]
 800894a:	f013 0207 	ands.w	r2, r3, #7
 800894e:	4601      	mov	r1, r0
 8008950:	d00b      	beq.n	800896a <__lo0bits+0x22>
 8008952:	07da      	lsls	r2, r3, #31
 8008954:	d423      	bmi.n	800899e <__lo0bits+0x56>
 8008956:	0798      	lsls	r0, r3, #30
 8008958:	bf49      	itett	mi
 800895a:	085b      	lsrmi	r3, r3, #1
 800895c:	089b      	lsrpl	r3, r3, #2
 800895e:	2001      	movmi	r0, #1
 8008960:	600b      	strmi	r3, [r1, #0]
 8008962:	bf5c      	itt	pl
 8008964:	600b      	strpl	r3, [r1, #0]
 8008966:	2002      	movpl	r0, #2
 8008968:	4770      	bx	lr
 800896a:	b298      	uxth	r0, r3
 800896c:	b9a8      	cbnz	r0, 800899a <__lo0bits+0x52>
 800896e:	0c1b      	lsrs	r3, r3, #16
 8008970:	2010      	movs	r0, #16
 8008972:	b2da      	uxtb	r2, r3
 8008974:	b90a      	cbnz	r2, 800897a <__lo0bits+0x32>
 8008976:	3008      	adds	r0, #8
 8008978:	0a1b      	lsrs	r3, r3, #8
 800897a:	071a      	lsls	r2, r3, #28
 800897c:	bf04      	itt	eq
 800897e:	091b      	lsreq	r3, r3, #4
 8008980:	3004      	addeq	r0, #4
 8008982:	079a      	lsls	r2, r3, #30
 8008984:	bf04      	itt	eq
 8008986:	089b      	lsreq	r3, r3, #2
 8008988:	3002      	addeq	r0, #2
 800898a:	07da      	lsls	r2, r3, #31
 800898c:	d403      	bmi.n	8008996 <__lo0bits+0x4e>
 800898e:	085b      	lsrs	r3, r3, #1
 8008990:	f100 0001 	add.w	r0, r0, #1
 8008994:	d005      	beq.n	80089a2 <__lo0bits+0x5a>
 8008996:	600b      	str	r3, [r1, #0]
 8008998:	4770      	bx	lr
 800899a:	4610      	mov	r0, r2
 800899c:	e7e9      	b.n	8008972 <__lo0bits+0x2a>
 800899e:	2000      	movs	r0, #0
 80089a0:	4770      	bx	lr
 80089a2:	2020      	movs	r0, #32
 80089a4:	4770      	bx	lr
	...

080089a8 <__i2b>:
 80089a8:	b510      	push	{r4, lr}
 80089aa:	460c      	mov	r4, r1
 80089ac:	2101      	movs	r1, #1
 80089ae:	f7ff ff03 	bl	80087b8 <_Balloc>
 80089b2:	4602      	mov	r2, r0
 80089b4:	b928      	cbnz	r0, 80089c2 <__i2b+0x1a>
 80089b6:	4b05      	ldr	r3, [pc, #20]	; (80089cc <__i2b+0x24>)
 80089b8:	4805      	ldr	r0, [pc, #20]	; (80089d0 <__i2b+0x28>)
 80089ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80089be:	f000 fd35 	bl	800942c <__assert_func>
 80089c2:	2301      	movs	r3, #1
 80089c4:	6144      	str	r4, [r0, #20]
 80089c6:	6103      	str	r3, [r0, #16]
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	bf00      	nop
 80089cc:	08009937 	.word	0x08009937
 80089d0:	080099a8 	.word	0x080099a8

080089d4 <__multiply>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	4691      	mov	r9, r2
 80089da:	690a      	ldr	r2, [r1, #16]
 80089dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	bfb8      	it	lt
 80089e4:	460b      	movlt	r3, r1
 80089e6:	460c      	mov	r4, r1
 80089e8:	bfbc      	itt	lt
 80089ea:	464c      	movlt	r4, r9
 80089ec:	4699      	movlt	r9, r3
 80089ee:	6927      	ldr	r7, [r4, #16]
 80089f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089f4:	68a3      	ldr	r3, [r4, #8]
 80089f6:	6861      	ldr	r1, [r4, #4]
 80089f8:	eb07 060a 	add.w	r6, r7, sl
 80089fc:	42b3      	cmp	r3, r6
 80089fe:	b085      	sub	sp, #20
 8008a00:	bfb8      	it	lt
 8008a02:	3101      	addlt	r1, #1
 8008a04:	f7ff fed8 	bl	80087b8 <_Balloc>
 8008a08:	b930      	cbnz	r0, 8008a18 <__multiply+0x44>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	4b44      	ldr	r3, [pc, #272]	; (8008b20 <__multiply+0x14c>)
 8008a0e:	4845      	ldr	r0, [pc, #276]	; (8008b24 <__multiply+0x150>)
 8008a10:	f240 115d 	movw	r1, #349	; 0x15d
 8008a14:	f000 fd0a 	bl	800942c <__assert_func>
 8008a18:	f100 0514 	add.w	r5, r0, #20
 8008a1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a20:	462b      	mov	r3, r5
 8008a22:	2200      	movs	r2, #0
 8008a24:	4543      	cmp	r3, r8
 8008a26:	d321      	bcc.n	8008a6c <__multiply+0x98>
 8008a28:	f104 0314 	add.w	r3, r4, #20
 8008a2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a30:	f109 0314 	add.w	r3, r9, #20
 8008a34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008a38:	9202      	str	r2, [sp, #8]
 8008a3a:	1b3a      	subs	r2, r7, r4
 8008a3c:	3a15      	subs	r2, #21
 8008a3e:	f022 0203 	bic.w	r2, r2, #3
 8008a42:	3204      	adds	r2, #4
 8008a44:	f104 0115 	add.w	r1, r4, #21
 8008a48:	428f      	cmp	r7, r1
 8008a4a:	bf38      	it	cc
 8008a4c:	2204      	movcc	r2, #4
 8008a4e:	9201      	str	r2, [sp, #4]
 8008a50:	9a02      	ldr	r2, [sp, #8]
 8008a52:	9303      	str	r3, [sp, #12]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d80c      	bhi.n	8008a72 <__multiply+0x9e>
 8008a58:	2e00      	cmp	r6, #0
 8008a5a:	dd03      	ble.n	8008a64 <__multiply+0x90>
 8008a5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d05a      	beq.n	8008b1a <__multiply+0x146>
 8008a64:	6106      	str	r6, [r0, #16]
 8008a66:	b005      	add	sp, #20
 8008a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6c:	f843 2b04 	str.w	r2, [r3], #4
 8008a70:	e7d8      	b.n	8008a24 <__multiply+0x50>
 8008a72:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a76:	f1ba 0f00 	cmp.w	sl, #0
 8008a7a:	d024      	beq.n	8008ac6 <__multiply+0xf2>
 8008a7c:	f104 0e14 	add.w	lr, r4, #20
 8008a80:	46a9      	mov	r9, r5
 8008a82:	f04f 0c00 	mov.w	ip, #0
 8008a86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a8a:	f8d9 1000 	ldr.w	r1, [r9]
 8008a8e:	fa1f fb82 	uxth.w	fp, r2
 8008a92:	b289      	uxth	r1, r1
 8008a94:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a9c:	f8d9 2000 	ldr.w	r2, [r9]
 8008aa0:	4461      	add	r1, ip
 8008aa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008aa6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008aaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008aae:	b289      	uxth	r1, r1
 8008ab0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ab4:	4577      	cmp	r7, lr
 8008ab6:	f849 1b04 	str.w	r1, [r9], #4
 8008aba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008abe:	d8e2      	bhi.n	8008a86 <__multiply+0xb2>
 8008ac0:	9a01      	ldr	r2, [sp, #4]
 8008ac2:	f845 c002 	str.w	ip, [r5, r2]
 8008ac6:	9a03      	ldr	r2, [sp, #12]
 8008ac8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008acc:	3304      	adds	r3, #4
 8008ace:	f1b9 0f00 	cmp.w	r9, #0
 8008ad2:	d020      	beq.n	8008b16 <__multiply+0x142>
 8008ad4:	6829      	ldr	r1, [r5, #0]
 8008ad6:	f104 0c14 	add.w	ip, r4, #20
 8008ada:	46ae      	mov	lr, r5
 8008adc:	f04f 0a00 	mov.w	sl, #0
 8008ae0:	f8bc b000 	ldrh.w	fp, [ip]
 8008ae4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ae8:	fb09 220b 	mla	r2, r9, fp, r2
 8008aec:	4492      	add	sl, r2
 8008aee:	b289      	uxth	r1, r1
 8008af0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008af4:	f84e 1b04 	str.w	r1, [lr], #4
 8008af8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008afc:	f8be 1000 	ldrh.w	r1, [lr]
 8008b00:	0c12      	lsrs	r2, r2, #16
 8008b02:	fb09 1102 	mla	r1, r9, r2, r1
 8008b06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b0a:	4567      	cmp	r7, ip
 8008b0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b10:	d8e6      	bhi.n	8008ae0 <__multiply+0x10c>
 8008b12:	9a01      	ldr	r2, [sp, #4]
 8008b14:	50a9      	str	r1, [r5, r2]
 8008b16:	3504      	adds	r5, #4
 8008b18:	e79a      	b.n	8008a50 <__multiply+0x7c>
 8008b1a:	3e01      	subs	r6, #1
 8008b1c:	e79c      	b.n	8008a58 <__multiply+0x84>
 8008b1e:	bf00      	nop
 8008b20:	08009937 	.word	0x08009937
 8008b24:	080099a8 	.word	0x080099a8

08008b28 <__pow5mult>:
 8008b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	4615      	mov	r5, r2
 8008b2e:	f012 0203 	ands.w	r2, r2, #3
 8008b32:	4606      	mov	r6, r0
 8008b34:	460f      	mov	r7, r1
 8008b36:	d007      	beq.n	8008b48 <__pow5mult+0x20>
 8008b38:	4c25      	ldr	r4, [pc, #148]	; (8008bd0 <__pow5mult+0xa8>)
 8008b3a:	3a01      	subs	r2, #1
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b42:	f7ff fe9b 	bl	800887c <__multadd>
 8008b46:	4607      	mov	r7, r0
 8008b48:	10ad      	asrs	r5, r5, #2
 8008b4a:	d03d      	beq.n	8008bc8 <__pow5mult+0xa0>
 8008b4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008b4e:	b97c      	cbnz	r4, 8008b70 <__pow5mult+0x48>
 8008b50:	2010      	movs	r0, #16
 8008b52:	f7ff fe1b 	bl	800878c <malloc>
 8008b56:	4602      	mov	r2, r0
 8008b58:	6270      	str	r0, [r6, #36]	; 0x24
 8008b5a:	b928      	cbnz	r0, 8008b68 <__pow5mult+0x40>
 8008b5c:	4b1d      	ldr	r3, [pc, #116]	; (8008bd4 <__pow5mult+0xac>)
 8008b5e:	481e      	ldr	r0, [pc, #120]	; (8008bd8 <__pow5mult+0xb0>)
 8008b60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b64:	f000 fc62 	bl	800942c <__assert_func>
 8008b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b6c:	6004      	str	r4, [r0, #0]
 8008b6e:	60c4      	str	r4, [r0, #12]
 8008b70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b78:	b94c      	cbnz	r4, 8008b8e <__pow5mult+0x66>
 8008b7a:	f240 2171 	movw	r1, #625	; 0x271
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f7ff ff12 	bl	80089a8 <__i2b>
 8008b84:	2300      	movs	r3, #0
 8008b86:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	6003      	str	r3, [r0, #0]
 8008b8e:	f04f 0900 	mov.w	r9, #0
 8008b92:	07eb      	lsls	r3, r5, #31
 8008b94:	d50a      	bpl.n	8008bac <__pow5mult+0x84>
 8008b96:	4639      	mov	r1, r7
 8008b98:	4622      	mov	r2, r4
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff ff1a 	bl	80089d4 <__multiply>
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	4680      	mov	r8, r0
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7ff fe47 	bl	8008838 <_Bfree>
 8008baa:	4647      	mov	r7, r8
 8008bac:	106d      	asrs	r5, r5, #1
 8008bae:	d00b      	beq.n	8008bc8 <__pow5mult+0xa0>
 8008bb0:	6820      	ldr	r0, [r4, #0]
 8008bb2:	b938      	cbnz	r0, 8008bc4 <__pow5mult+0x9c>
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4630      	mov	r0, r6
 8008bba:	f7ff ff0b 	bl	80089d4 <__multiply>
 8008bbe:	6020      	str	r0, [r4, #0]
 8008bc0:	f8c0 9000 	str.w	r9, [r0]
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	e7e4      	b.n	8008b92 <__pow5mult+0x6a>
 8008bc8:	4638      	mov	r0, r7
 8008bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bce:	bf00      	nop
 8008bd0:	08009af8 	.word	0x08009af8
 8008bd4:	080098c5 	.word	0x080098c5
 8008bd8:	080099a8 	.word	0x080099a8

08008bdc <__lshift>:
 8008bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be0:	460c      	mov	r4, r1
 8008be2:	6849      	ldr	r1, [r1, #4]
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008bea:	68a3      	ldr	r3, [r4, #8]
 8008bec:	4607      	mov	r7, r0
 8008bee:	4691      	mov	r9, r2
 8008bf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008bf4:	f108 0601 	add.w	r6, r8, #1
 8008bf8:	42b3      	cmp	r3, r6
 8008bfa:	db0b      	blt.n	8008c14 <__lshift+0x38>
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	f7ff fddb 	bl	80087b8 <_Balloc>
 8008c02:	4605      	mov	r5, r0
 8008c04:	b948      	cbnz	r0, 8008c1a <__lshift+0x3e>
 8008c06:	4602      	mov	r2, r0
 8008c08:	4b2a      	ldr	r3, [pc, #168]	; (8008cb4 <__lshift+0xd8>)
 8008c0a:	482b      	ldr	r0, [pc, #172]	; (8008cb8 <__lshift+0xdc>)
 8008c0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c10:	f000 fc0c 	bl	800942c <__assert_func>
 8008c14:	3101      	adds	r1, #1
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	e7ee      	b.n	8008bf8 <__lshift+0x1c>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f100 0114 	add.w	r1, r0, #20
 8008c20:	f100 0210 	add.w	r2, r0, #16
 8008c24:	4618      	mov	r0, r3
 8008c26:	4553      	cmp	r3, sl
 8008c28:	db37      	blt.n	8008c9a <__lshift+0xbe>
 8008c2a:	6920      	ldr	r0, [r4, #16]
 8008c2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c30:	f104 0314 	add.w	r3, r4, #20
 8008c34:	f019 091f 	ands.w	r9, r9, #31
 8008c38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008c40:	d02f      	beq.n	8008ca2 <__lshift+0xc6>
 8008c42:	f1c9 0e20 	rsb	lr, r9, #32
 8008c46:	468a      	mov	sl, r1
 8008c48:	f04f 0c00 	mov.w	ip, #0
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	fa02 f209 	lsl.w	r2, r2, r9
 8008c52:	ea42 020c 	orr.w	r2, r2, ip
 8008c56:	f84a 2b04 	str.w	r2, [sl], #4
 8008c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5e:	4298      	cmp	r0, r3
 8008c60:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008c64:	d8f2      	bhi.n	8008c4c <__lshift+0x70>
 8008c66:	1b03      	subs	r3, r0, r4
 8008c68:	3b15      	subs	r3, #21
 8008c6a:	f023 0303 	bic.w	r3, r3, #3
 8008c6e:	3304      	adds	r3, #4
 8008c70:	f104 0215 	add.w	r2, r4, #21
 8008c74:	4290      	cmp	r0, r2
 8008c76:	bf38      	it	cc
 8008c78:	2304      	movcc	r3, #4
 8008c7a:	f841 c003 	str.w	ip, [r1, r3]
 8008c7e:	f1bc 0f00 	cmp.w	ip, #0
 8008c82:	d001      	beq.n	8008c88 <__lshift+0xac>
 8008c84:	f108 0602 	add.w	r6, r8, #2
 8008c88:	3e01      	subs	r6, #1
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	612e      	str	r6, [r5, #16]
 8008c8e:	4621      	mov	r1, r4
 8008c90:	f7ff fdd2 	bl	8008838 <_Bfree>
 8008c94:	4628      	mov	r0, r5
 8008c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	e7c1      	b.n	8008c26 <__lshift+0x4a>
 8008ca2:	3904      	subs	r1, #4
 8008ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cac:	4298      	cmp	r0, r3
 8008cae:	d8f9      	bhi.n	8008ca4 <__lshift+0xc8>
 8008cb0:	e7ea      	b.n	8008c88 <__lshift+0xac>
 8008cb2:	bf00      	nop
 8008cb4:	08009937 	.word	0x08009937
 8008cb8:	080099a8 	.word	0x080099a8

08008cbc <__mcmp>:
 8008cbc:	b530      	push	{r4, r5, lr}
 8008cbe:	6902      	ldr	r2, [r0, #16]
 8008cc0:	690c      	ldr	r4, [r1, #16]
 8008cc2:	1b12      	subs	r2, r2, r4
 8008cc4:	d10e      	bne.n	8008ce4 <__mcmp+0x28>
 8008cc6:	f100 0314 	add.w	r3, r0, #20
 8008cca:	3114      	adds	r1, #20
 8008ccc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008cd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008cd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008cd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008cdc:	42a5      	cmp	r5, r4
 8008cde:	d003      	beq.n	8008ce8 <__mcmp+0x2c>
 8008ce0:	d305      	bcc.n	8008cee <__mcmp+0x32>
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	bd30      	pop	{r4, r5, pc}
 8008ce8:	4283      	cmp	r3, r0
 8008cea:	d3f3      	bcc.n	8008cd4 <__mcmp+0x18>
 8008cec:	e7fa      	b.n	8008ce4 <__mcmp+0x28>
 8008cee:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf2:	e7f7      	b.n	8008ce4 <__mcmp+0x28>

08008cf4 <__mdiff>:
 8008cf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4620      	mov	r0, r4
 8008d00:	4690      	mov	r8, r2
 8008d02:	f7ff ffdb 	bl	8008cbc <__mcmp>
 8008d06:	1e05      	subs	r5, r0, #0
 8008d08:	d110      	bne.n	8008d2c <__mdiff+0x38>
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f7ff fd53 	bl	80087b8 <_Balloc>
 8008d12:	b930      	cbnz	r0, 8008d22 <__mdiff+0x2e>
 8008d14:	4b3a      	ldr	r3, [pc, #232]	; (8008e00 <__mdiff+0x10c>)
 8008d16:	4602      	mov	r2, r0
 8008d18:	f240 2132 	movw	r1, #562	; 0x232
 8008d1c:	4839      	ldr	r0, [pc, #228]	; (8008e04 <__mdiff+0x110>)
 8008d1e:	f000 fb85 	bl	800942c <__assert_func>
 8008d22:	2301      	movs	r3, #1
 8008d24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2c:	bfa4      	itt	ge
 8008d2e:	4643      	movge	r3, r8
 8008d30:	46a0      	movge	r8, r4
 8008d32:	4630      	mov	r0, r6
 8008d34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008d38:	bfa6      	itte	ge
 8008d3a:	461c      	movge	r4, r3
 8008d3c:	2500      	movge	r5, #0
 8008d3e:	2501      	movlt	r5, #1
 8008d40:	f7ff fd3a 	bl	80087b8 <_Balloc>
 8008d44:	b920      	cbnz	r0, 8008d50 <__mdiff+0x5c>
 8008d46:	4b2e      	ldr	r3, [pc, #184]	; (8008e00 <__mdiff+0x10c>)
 8008d48:	4602      	mov	r2, r0
 8008d4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008d4e:	e7e5      	b.n	8008d1c <__mdiff+0x28>
 8008d50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008d54:	6926      	ldr	r6, [r4, #16]
 8008d56:	60c5      	str	r5, [r0, #12]
 8008d58:	f104 0914 	add.w	r9, r4, #20
 8008d5c:	f108 0514 	add.w	r5, r8, #20
 8008d60:	f100 0e14 	add.w	lr, r0, #20
 8008d64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008d68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008d6c:	f108 0210 	add.w	r2, r8, #16
 8008d70:	46f2      	mov	sl, lr
 8008d72:	2100      	movs	r1, #0
 8008d74:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d7c:	fa1f f883 	uxth.w	r8, r3
 8008d80:	fa11 f18b 	uxtah	r1, r1, fp
 8008d84:	0c1b      	lsrs	r3, r3, #16
 8008d86:	eba1 0808 	sub.w	r8, r1, r8
 8008d8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d92:	fa1f f888 	uxth.w	r8, r8
 8008d96:	1419      	asrs	r1, r3, #16
 8008d98:	454e      	cmp	r6, r9
 8008d9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d9e:	f84a 3b04 	str.w	r3, [sl], #4
 8008da2:	d8e7      	bhi.n	8008d74 <__mdiff+0x80>
 8008da4:	1b33      	subs	r3, r6, r4
 8008da6:	3b15      	subs	r3, #21
 8008da8:	f023 0303 	bic.w	r3, r3, #3
 8008dac:	3304      	adds	r3, #4
 8008dae:	3415      	adds	r4, #21
 8008db0:	42a6      	cmp	r6, r4
 8008db2:	bf38      	it	cc
 8008db4:	2304      	movcc	r3, #4
 8008db6:	441d      	add	r5, r3
 8008db8:	4473      	add	r3, lr
 8008dba:	469e      	mov	lr, r3
 8008dbc:	462e      	mov	r6, r5
 8008dbe:	4566      	cmp	r6, ip
 8008dc0:	d30e      	bcc.n	8008de0 <__mdiff+0xec>
 8008dc2:	f10c 0203 	add.w	r2, ip, #3
 8008dc6:	1b52      	subs	r2, r2, r5
 8008dc8:	f022 0203 	bic.w	r2, r2, #3
 8008dcc:	3d03      	subs	r5, #3
 8008dce:	45ac      	cmp	ip, r5
 8008dd0:	bf38      	it	cc
 8008dd2:	2200      	movcc	r2, #0
 8008dd4:	441a      	add	r2, r3
 8008dd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008dda:	b17b      	cbz	r3, 8008dfc <__mdiff+0x108>
 8008ddc:	6107      	str	r7, [r0, #16]
 8008dde:	e7a3      	b.n	8008d28 <__mdiff+0x34>
 8008de0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008de4:	fa11 f288 	uxtah	r2, r1, r8
 8008de8:	1414      	asrs	r4, r2, #16
 8008dea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008dee:	b292      	uxth	r2, r2
 8008df0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008df4:	f84e 2b04 	str.w	r2, [lr], #4
 8008df8:	1421      	asrs	r1, r4, #16
 8008dfa:	e7e0      	b.n	8008dbe <__mdiff+0xca>
 8008dfc:	3f01      	subs	r7, #1
 8008dfe:	e7ea      	b.n	8008dd6 <__mdiff+0xe2>
 8008e00:	08009937 	.word	0x08009937
 8008e04:	080099a8 	.word	0x080099a8

08008e08 <__d2b>:
 8008e08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e0c:	4689      	mov	r9, r1
 8008e0e:	2101      	movs	r1, #1
 8008e10:	ec57 6b10 	vmov	r6, r7, d0
 8008e14:	4690      	mov	r8, r2
 8008e16:	f7ff fccf 	bl	80087b8 <_Balloc>
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	b930      	cbnz	r0, 8008e2c <__d2b+0x24>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	4b25      	ldr	r3, [pc, #148]	; (8008eb8 <__d2b+0xb0>)
 8008e22:	4826      	ldr	r0, [pc, #152]	; (8008ebc <__d2b+0xb4>)
 8008e24:	f240 310a 	movw	r1, #778	; 0x30a
 8008e28:	f000 fb00 	bl	800942c <__assert_func>
 8008e2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e34:	bb35      	cbnz	r5, 8008e84 <__d2b+0x7c>
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	d028      	beq.n	8008e8e <__d2b+0x86>
 8008e3c:	4668      	mov	r0, sp
 8008e3e:	9600      	str	r6, [sp, #0]
 8008e40:	f7ff fd82 	bl	8008948 <__lo0bits>
 8008e44:	9900      	ldr	r1, [sp, #0]
 8008e46:	b300      	cbz	r0, 8008e8a <__d2b+0x82>
 8008e48:	9a01      	ldr	r2, [sp, #4]
 8008e4a:	f1c0 0320 	rsb	r3, r0, #32
 8008e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e52:	430b      	orrs	r3, r1
 8008e54:	40c2      	lsrs	r2, r0
 8008e56:	6163      	str	r3, [r4, #20]
 8008e58:	9201      	str	r2, [sp, #4]
 8008e5a:	9b01      	ldr	r3, [sp, #4]
 8008e5c:	61a3      	str	r3, [r4, #24]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	bf14      	ite	ne
 8008e62:	2202      	movne	r2, #2
 8008e64:	2201      	moveq	r2, #1
 8008e66:	6122      	str	r2, [r4, #16]
 8008e68:	b1d5      	cbz	r5, 8008ea0 <__d2b+0x98>
 8008e6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e6e:	4405      	add	r5, r0
 8008e70:	f8c9 5000 	str.w	r5, [r9]
 8008e74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e78:	f8c8 0000 	str.w	r0, [r8]
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	b003      	add	sp, #12
 8008e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e88:	e7d5      	b.n	8008e36 <__d2b+0x2e>
 8008e8a:	6161      	str	r1, [r4, #20]
 8008e8c:	e7e5      	b.n	8008e5a <__d2b+0x52>
 8008e8e:	a801      	add	r0, sp, #4
 8008e90:	f7ff fd5a 	bl	8008948 <__lo0bits>
 8008e94:	9b01      	ldr	r3, [sp, #4]
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	6122      	str	r2, [r4, #16]
 8008e9c:	3020      	adds	r0, #32
 8008e9e:	e7e3      	b.n	8008e68 <__d2b+0x60>
 8008ea0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ea4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ea8:	f8c9 0000 	str.w	r0, [r9]
 8008eac:	6918      	ldr	r0, [r3, #16]
 8008eae:	f7ff fd2b 	bl	8008908 <__hi0bits>
 8008eb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008eb6:	e7df      	b.n	8008e78 <__d2b+0x70>
 8008eb8:	08009937 	.word	0x08009937
 8008ebc:	080099a8 	.word	0x080099a8

08008ec0 <_calloc_r>:
 8008ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ec2:	fba1 2402 	umull	r2, r4, r1, r2
 8008ec6:	b94c      	cbnz	r4, 8008edc <_calloc_r+0x1c>
 8008ec8:	4611      	mov	r1, r2
 8008eca:	9201      	str	r2, [sp, #4]
 8008ecc:	f000 f87a 	bl	8008fc4 <_malloc_r>
 8008ed0:	9a01      	ldr	r2, [sp, #4]
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	b930      	cbnz	r0, 8008ee4 <_calloc_r+0x24>
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	b003      	add	sp, #12
 8008eda:	bd30      	pop	{r4, r5, pc}
 8008edc:	220c      	movs	r2, #12
 8008ede:	6002      	str	r2, [r0, #0]
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	e7f8      	b.n	8008ed6 <_calloc_r+0x16>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7fd fe67 	bl	8006bb8 <memset>
 8008eea:	e7f4      	b.n	8008ed6 <_calloc_r+0x16>

08008eec <_free_r>:
 8008eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d044      	beq.n	8008f7c <_free_r+0x90>
 8008ef2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef6:	9001      	str	r0, [sp, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f1a1 0404 	sub.w	r4, r1, #4
 8008efe:	bfb8      	it	lt
 8008f00:	18e4      	addlt	r4, r4, r3
 8008f02:	f000 fb19 	bl	8009538 <__malloc_lock>
 8008f06:	4a1e      	ldr	r2, [pc, #120]	; (8008f80 <_free_r+0x94>)
 8008f08:	9801      	ldr	r0, [sp, #4]
 8008f0a:	6813      	ldr	r3, [r2, #0]
 8008f0c:	b933      	cbnz	r3, 8008f1c <_free_r+0x30>
 8008f0e:	6063      	str	r3, [r4, #4]
 8008f10:	6014      	str	r4, [r2, #0]
 8008f12:	b003      	add	sp, #12
 8008f14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f18:	f000 bb14 	b.w	8009544 <__malloc_unlock>
 8008f1c:	42a3      	cmp	r3, r4
 8008f1e:	d908      	bls.n	8008f32 <_free_r+0x46>
 8008f20:	6825      	ldr	r5, [r4, #0]
 8008f22:	1961      	adds	r1, r4, r5
 8008f24:	428b      	cmp	r3, r1
 8008f26:	bf01      	itttt	eq
 8008f28:	6819      	ldreq	r1, [r3, #0]
 8008f2a:	685b      	ldreq	r3, [r3, #4]
 8008f2c:	1949      	addeq	r1, r1, r5
 8008f2e:	6021      	streq	r1, [r4, #0]
 8008f30:	e7ed      	b.n	8008f0e <_free_r+0x22>
 8008f32:	461a      	mov	r2, r3
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	b10b      	cbz	r3, 8008f3c <_free_r+0x50>
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	d9fa      	bls.n	8008f32 <_free_r+0x46>
 8008f3c:	6811      	ldr	r1, [r2, #0]
 8008f3e:	1855      	adds	r5, r2, r1
 8008f40:	42a5      	cmp	r5, r4
 8008f42:	d10b      	bne.n	8008f5c <_free_r+0x70>
 8008f44:	6824      	ldr	r4, [r4, #0]
 8008f46:	4421      	add	r1, r4
 8008f48:	1854      	adds	r4, r2, r1
 8008f4a:	42a3      	cmp	r3, r4
 8008f4c:	6011      	str	r1, [r2, #0]
 8008f4e:	d1e0      	bne.n	8008f12 <_free_r+0x26>
 8008f50:	681c      	ldr	r4, [r3, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	6053      	str	r3, [r2, #4]
 8008f56:	4421      	add	r1, r4
 8008f58:	6011      	str	r1, [r2, #0]
 8008f5a:	e7da      	b.n	8008f12 <_free_r+0x26>
 8008f5c:	d902      	bls.n	8008f64 <_free_r+0x78>
 8008f5e:	230c      	movs	r3, #12
 8008f60:	6003      	str	r3, [r0, #0]
 8008f62:	e7d6      	b.n	8008f12 <_free_r+0x26>
 8008f64:	6825      	ldr	r5, [r4, #0]
 8008f66:	1961      	adds	r1, r4, r5
 8008f68:	428b      	cmp	r3, r1
 8008f6a:	bf04      	itt	eq
 8008f6c:	6819      	ldreq	r1, [r3, #0]
 8008f6e:	685b      	ldreq	r3, [r3, #4]
 8008f70:	6063      	str	r3, [r4, #4]
 8008f72:	bf04      	itt	eq
 8008f74:	1949      	addeq	r1, r1, r5
 8008f76:	6021      	streq	r1, [r4, #0]
 8008f78:	6054      	str	r4, [r2, #4]
 8008f7a:	e7ca      	b.n	8008f12 <_free_r+0x26>
 8008f7c:	b003      	add	sp, #12
 8008f7e:	bd30      	pop	{r4, r5, pc}
 8008f80:	200015bc 	.word	0x200015bc

08008f84 <sbrk_aligned>:
 8008f84:	b570      	push	{r4, r5, r6, lr}
 8008f86:	4e0e      	ldr	r6, [pc, #56]	; (8008fc0 <sbrk_aligned+0x3c>)
 8008f88:	460c      	mov	r4, r1
 8008f8a:	6831      	ldr	r1, [r6, #0]
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	b911      	cbnz	r1, 8008f96 <sbrk_aligned+0x12>
 8008f90:	f000 f9e6 	bl	8009360 <_sbrk_r>
 8008f94:	6030      	str	r0, [r6, #0]
 8008f96:	4621      	mov	r1, r4
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f000 f9e1 	bl	8009360 <_sbrk_r>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d00a      	beq.n	8008fb8 <sbrk_aligned+0x34>
 8008fa2:	1cc4      	adds	r4, r0, #3
 8008fa4:	f024 0403 	bic.w	r4, r4, #3
 8008fa8:	42a0      	cmp	r0, r4
 8008faa:	d007      	beq.n	8008fbc <sbrk_aligned+0x38>
 8008fac:	1a21      	subs	r1, r4, r0
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f000 f9d6 	bl	8009360 <_sbrk_r>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d101      	bne.n	8008fbc <sbrk_aligned+0x38>
 8008fb8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	bd70      	pop	{r4, r5, r6, pc}
 8008fc0:	200015c0 	.word	0x200015c0

08008fc4 <_malloc_r>:
 8008fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc8:	1ccd      	adds	r5, r1, #3
 8008fca:	f025 0503 	bic.w	r5, r5, #3
 8008fce:	3508      	adds	r5, #8
 8008fd0:	2d0c      	cmp	r5, #12
 8008fd2:	bf38      	it	cc
 8008fd4:	250c      	movcc	r5, #12
 8008fd6:	2d00      	cmp	r5, #0
 8008fd8:	4607      	mov	r7, r0
 8008fda:	db01      	blt.n	8008fe0 <_malloc_r+0x1c>
 8008fdc:	42a9      	cmp	r1, r5
 8008fde:	d905      	bls.n	8008fec <_malloc_r+0x28>
 8008fe0:	230c      	movs	r3, #12
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	2600      	movs	r6, #0
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fec:	4e2e      	ldr	r6, [pc, #184]	; (80090a8 <_malloc_r+0xe4>)
 8008fee:	f000 faa3 	bl	8009538 <__malloc_lock>
 8008ff2:	6833      	ldr	r3, [r6, #0]
 8008ff4:	461c      	mov	r4, r3
 8008ff6:	bb34      	cbnz	r4, 8009046 <_malloc_r+0x82>
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	f7ff ffc2 	bl	8008f84 <sbrk_aligned>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	4604      	mov	r4, r0
 8009004:	d14d      	bne.n	80090a2 <_malloc_r+0xde>
 8009006:	6834      	ldr	r4, [r6, #0]
 8009008:	4626      	mov	r6, r4
 800900a:	2e00      	cmp	r6, #0
 800900c:	d140      	bne.n	8009090 <_malloc_r+0xcc>
 800900e:	6823      	ldr	r3, [r4, #0]
 8009010:	4631      	mov	r1, r6
 8009012:	4638      	mov	r0, r7
 8009014:	eb04 0803 	add.w	r8, r4, r3
 8009018:	f000 f9a2 	bl	8009360 <_sbrk_r>
 800901c:	4580      	cmp	r8, r0
 800901e:	d13a      	bne.n	8009096 <_malloc_r+0xd2>
 8009020:	6821      	ldr	r1, [r4, #0]
 8009022:	3503      	adds	r5, #3
 8009024:	1a6d      	subs	r5, r5, r1
 8009026:	f025 0503 	bic.w	r5, r5, #3
 800902a:	3508      	adds	r5, #8
 800902c:	2d0c      	cmp	r5, #12
 800902e:	bf38      	it	cc
 8009030:	250c      	movcc	r5, #12
 8009032:	4629      	mov	r1, r5
 8009034:	4638      	mov	r0, r7
 8009036:	f7ff ffa5 	bl	8008f84 <sbrk_aligned>
 800903a:	3001      	adds	r0, #1
 800903c:	d02b      	beq.n	8009096 <_malloc_r+0xd2>
 800903e:	6823      	ldr	r3, [r4, #0]
 8009040:	442b      	add	r3, r5
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	e00e      	b.n	8009064 <_malloc_r+0xa0>
 8009046:	6822      	ldr	r2, [r4, #0]
 8009048:	1b52      	subs	r2, r2, r5
 800904a:	d41e      	bmi.n	800908a <_malloc_r+0xc6>
 800904c:	2a0b      	cmp	r2, #11
 800904e:	d916      	bls.n	800907e <_malloc_r+0xba>
 8009050:	1961      	adds	r1, r4, r5
 8009052:	42a3      	cmp	r3, r4
 8009054:	6025      	str	r5, [r4, #0]
 8009056:	bf18      	it	ne
 8009058:	6059      	strne	r1, [r3, #4]
 800905a:	6863      	ldr	r3, [r4, #4]
 800905c:	bf08      	it	eq
 800905e:	6031      	streq	r1, [r6, #0]
 8009060:	5162      	str	r2, [r4, r5]
 8009062:	604b      	str	r3, [r1, #4]
 8009064:	4638      	mov	r0, r7
 8009066:	f104 060b 	add.w	r6, r4, #11
 800906a:	f000 fa6b 	bl	8009544 <__malloc_unlock>
 800906e:	f026 0607 	bic.w	r6, r6, #7
 8009072:	1d23      	adds	r3, r4, #4
 8009074:	1af2      	subs	r2, r6, r3
 8009076:	d0b6      	beq.n	8008fe6 <_malloc_r+0x22>
 8009078:	1b9b      	subs	r3, r3, r6
 800907a:	50a3      	str	r3, [r4, r2]
 800907c:	e7b3      	b.n	8008fe6 <_malloc_r+0x22>
 800907e:	6862      	ldr	r2, [r4, #4]
 8009080:	42a3      	cmp	r3, r4
 8009082:	bf0c      	ite	eq
 8009084:	6032      	streq	r2, [r6, #0]
 8009086:	605a      	strne	r2, [r3, #4]
 8009088:	e7ec      	b.n	8009064 <_malloc_r+0xa0>
 800908a:	4623      	mov	r3, r4
 800908c:	6864      	ldr	r4, [r4, #4]
 800908e:	e7b2      	b.n	8008ff6 <_malloc_r+0x32>
 8009090:	4634      	mov	r4, r6
 8009092:	6876      	ldr	r6, [r6, #4]
 8009094:	e7b9      	b.n	800900a <_malloc_r+0x46>
 8009096:	230c      	movs	r3, #12
 8009098:	603b      	str	r3, [r7, #0]
 800909a:	4638      	mov	r0, r7
 800909c:	f000 fa52 	bl	8009544 <__malloc_unlock>
 80090a0:	e7a1      	b.n	8008fe6 <_malloc_r+0x22>
 80090a2:	6025      	str	r5, [r4, #0]
 80090a4:	e7de      	b.n	8009064 <_malloc_r+0xa0>
 80090a6:	bf00      	nop
 80090a8:	200015bc 	.word	0x200015bc

080090ac <__sfputc_r>:
 80090ac:	6893      	ldr	r3, [r2, #8]
 80090ae:	3b01      	subs	r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	b410      	push	{r4}
 80090b4:	6093      	str	r3, [r2, #8]
 80090b6:	da08      	bge.n	80090ca <__sfputc_r+0x1e>
 80090b8:	6994      	ldr	r4, [r2, #24]
 80090ba:	42a3      	cmp	r3, r4
 80090bc:	db01      	blt.n	80090c2 <__sfputc_r+0x16>
 80090be:	290a      	cmp	r1, #10
 80090c0:	d103      	bne.n	80090ca <__sfputc_r+0x1e>
 80090c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090c6:	f7fe ba01 	b.w	80074cc <__swbuf_r>
 80090ca:	6813      	ldr	r3, [r2, #0]
 80090cc:	1c58      	adds	r0, r3, #1
 80090ce:	6010      	str	r0, [r2, #0]
 80090d0:	7019      	strb	r1, [r3, #0]
 80090d2:	4608      	mov	r0, r1
 80090d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090d8:	4770      	bx	lr

080090da <__sfputs_r>:
 80090da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090dc:	4606      	mov	r6, r0
 80090de:	460f      	mov	r7, r1
 80090e0:	4614      	mov	r4, r2
 80090e2:	18d5      	adds	r5, r2, r3
 80090e4:	42ac      	cmp	r4, r5
 80090e6:	d101      	bne.n	80090ec <__sfputs_r+0x12>
 80090e8:	2000      	movs	r0, #0
 80090ea:	e007      	b.n	80090fc <__sfputs_r+0x22>
 80090ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f0:	463a      	mov	r2, r7
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7ff ffda 	bl	80090ac <__sfputc_r>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d1f3      	bne.n	80090e4 <__sfputs_r+0xa>
 80090fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009100 <_vfiprintf_r>:
 8009100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	460d      	mov	r5, r1
 8009106:	b09d      	sub	sp, #116	; 0x74
 8009108:	4614      	mov	r4, r2
 800910a:	4698      	mov	r8, r3
 800910c:	4606      	mov	r6, r0
 800910e:	b118      	cbz	r0, 8009118 <_vfiprintf_r+0x18>
 8009110:	6983      	ldr	r3, [r0, #24]
 8009112:	b90b      	cbnz	r3, 8009118 <_vfiprintf_r+0x18>
 8009114:	f7ff fa30 	bl	8008578 <__sinit>
 8009118:	4b89      	ldr	r3, [pc, #548]	; (8009340 <_vfiprintf_r+0x240>)
 800911a:	429d      	cmp	r5, r3
 800911c:	d11b      	bne.n	8009156 <_vfiprintf_r+0x56>
 800911e:	6875      	ldr	r5, [r6, #4]
 8009120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009122:	07d9      	lsls	r1, r3, #31
 8009124:	d405      	bmi.n	8009132 <_vfiprintf_r+0x32>
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	059a      	lsls	r2, r3, #22
 800912a:	d402      	bmi.n	8009132 <_vfiprintf_r+0x32>
 800912c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800912e:	f7ff fac6 	bl	80086be <__retarget_lock_acquire_recursive>
 8009132:	89ab      	ldrh	r3, [r5, #12]
 8009134:	071b      	lsls	r3, r3, #28
 8009136:	d501      	bpl.n	800913c <_vfiprintf_r+0x3c>
 8009138:	692b      	ldr	r3, [r5, #16]
 800913a:	b9eb      	cbnz	r3, 8009178 <_vfiprintf_r+0x78>
 800913c:	4629      	mov	r1, r5
 800913e:	4630      	mov	r0, r6
 8009140:	f7fe fa16 	bl	8007570 <__swsetup_r>
 8009144:	b1c0      	cbz	r0, 8009178 <_vfiprintf_r+0x78>
 8009146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009148:	07dc      	lsls	r4, r3, #31
 800914a:	d50e      	bpl.n	800916a <_vfiprintf_r+0x6a>
 800914c:	f04f 30ff 	mov.w	r0, #4294967295
 8009150:	b01d      	add	sp, #116	; 0x74
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	4b7b      	ldr	r3, [pc, #492]	; (8009344 <_vfiprintf_r+0x244>)
 8009158:	429d      	cmp	r5, r3
 800915a:	d101      	bne.n	8009160 <_vfiprintf_r+0x60>
 800915c:	68b5      	ldr	r5, [r6, #8]
 800915e:	e7df      	b.n	8009120 <_vfiprintf_r+0x20>
 8009160:	4b79      	ldr	r3, [pc, #484]	; (8009348 <_vfiprintf_r+0x248>)
 8009162:	429d      	cmp	r5, r3
 8009164:	bf08      	it	eq
 8009166:	68f5      	ldreq	r5, [r6, #12]
 8009168:	e7da      	b.n	8009120 <_vfiprintf_r+0x20>
 800916a:	89ab      	ldrh	r3, [r5, #12]
 800916c:	0598      	lsls	r0, r3, #22
 800916e:	d4ed      	bmi.n	800914c <_vfiprintf_r+0x4c>
 8009170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009172:	f7ff faa5 	bl	80086c0 <__retarget_lock_release_recursive>
 8009176:	e7e9      	b.n	800914c <_vfiprintf_r+0x4c>
 8009178:	2300      	movs	r3, #0
 800917a:	9309      	str	r3, [sp, #36]	; 0x24
 800917c:	2320      	movs	r3, #32
 800917e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009182:	f8cd 800c 	str.w	r8, [sp, #12]
 8009186:	2330      	movs	r3, #48	; 0x30
 8009188:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800934c <_vfiprintf_r+0x24c>
 800918c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009190:	f04f 0901 	mov.w	r9, #1
 8009194:	4623      	mov	r3, r4
 8009196:	469a      	mov	sl, r3
 8009198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800919c:	b10a      	cbz	r2, 80091a2 <_vfiprintf_r+0xa2>
 800919e:	2a25      	cmp	r2, #37	; 0x25
 80091a0:	d1f9      	bne.n	8009196 <_vfiprintf_r+0x96>
 80091a2:	ebba 0b04 	subs.w	fp, sl, r4
 80091a6:	d00b      	beq.n	80091c0 <_vfiprintf_r+0xc0>
 80091a8:	465b      	mov	r3, fp
 80091aa:	4622      	mov	r2, r4
 80091ac:	4629      	mov	r1, r5
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7ff ff93 	bl	80090da <__sfputs_r>
 80091b4:	3001      	adds	r0, #1
 80091b6:	f000 80aa 	beq.w	800930e <_vfiprintf_r+0x20e>
 80091ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091bc:	445a      	add	r2, fp
 80091be:	9209      	str	r2, [sp, #36]	; 0x24
 80091c0:	f89a 3000 	ldrb.w	r3, [sl]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80a2 	beq.w	800930e <_vfiprintf_r+0x20e>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f04f 32ff 	mov.w	r2, #4294967295
 80091d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d4:	f10a 0a01 	add.w	sl, sl, #1
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	9307      	str	r3, [sp, #28]
 80091dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091e0:	931a      	str	r3, [sp, #104]	; 0x68
 80091e2:	4654      	mov	r4, sl
 80091e4:	2205      	movs	r2, #5
 80091e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ea:	4858      	ldr	r0, [pc, #352]	; (800934c <_vfiprintf_r+0x24c>)
 80091ec:	f7f6 fff8 	bl	80001e0 <memchr>
 80091f0:	9a04      	ldr	r2, [sp, #16]
 80091f2:	b9d8      	cbnz	r0, 800922c <_vfiprintf_r+0x12c>
 80091f4:	06d1      	lsls	r1, r2, #27
 80091f6:	bf44      	itt	mi
 80091f8:	2320      	movmi	r3, #32
 80091fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091fe:	0713      	lsls	r3, r2, #28
 8009200:	bf44      	itt	mi
 8009202:	232b      	movmi	r3, #43	; 0x2b
 8009204:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009208:	f89a 3000 	ldrb.w	r3, [sl]
 800920c:	2b2a      	cmp	r3, #42	; 0x2a
 800920e:	d015      	beq.n	800923c <_vfiprintf_r+0x13c>
 8009210:	9a07      	ldr	r2, [sp, #28]
 8009212:	4654      	mov	r4, sl
 8009214:	2000      	movs	r0, #0
 8009216:	f04f 0c0a 	mov.w	ip, #10
 800921a:	4621      	mov	r1, r4
 800921c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009220:	3b30      	subs	r3, #48	; 0x30
 8009222:	2b09      	cmp	r3, #9
 8009224:	d94e      	bls.n	80092c4 <_vfiprintf_r+0x1c4>
 8009226:	b1b0      	cbz	r0, 8009256 <_vfiprintf_r+0x156>
 8009228:	9207      	str	r2, [sp, #28]
 800922a:	e014      	b.n	8009256 <_vfiprintf_r+0x156>
 800922c:	eba0 0308 	sub.w	r3, r0, r8
 8009230:	fa09 f303 	lsl.w	r3, r9, r3
 8009234:	4313      	orrs	r3, r2
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	46a2      	mov	sl, r4
 800923a:	e7d2      	b.n	80091e2 <_vfiprintf_r+0xe2>
 800923c:	9b03      	ldr	r3, [sp, #12]
 800923e:	1d19      	adds	r1, r3, #4
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	9103      	str	r1, [sp, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	bfbb      	ittet	lt
 8009248:	425b      	neglt	r3, r3
 800924a:	f042 0202 	orrlt.w	r2, r2, #2
 800924e:	9307      	strge	r3, [sp, #28]
 8009250:	9307      	strlt	r3, [sp, #28]
 8009252:	bfb8      	it	lt
 8009254:	9204      	strlt	r2, [sp, #16]
 8009256:	7823      	ldrb	r3, [r4, #0]
 8009258:	2b2e      	cmp	r3, #46	; 0x2e
 800925a:	d10c      	bne.n	8009276 <_vfiprintf_r+0x176>
 800925c:	7863      	ldrb	r3, [r4, #1]
 800925e:	2b2a      	cmp	r3, #42	; 0x2a
 8009260:	d135      	bne.n	80092ce <_vfiprintf_r+0x1ce>
 8009262:	9b03      	ldr	r3, [sp, #12]
 8009264:	1d1a      	adds	r2, r3, #4
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	9203      	str	r2, [sp, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	bfb8      	it	lt
 800926e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009272:	3402      	adds	r4, #2
 8009274:	9305      	str	r3, [sp, #20]
 8009276:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800935c <_vfiprintf_r+0x25c>
 800927a:	7821      	ldrb	r1, [r4, #0]
 800927c:	2203      	movs	r2, #3
 800927e:	4650      	mov	r0, sl
 8009280:	f7f6 ffae 	bl	80001e0 <memchr>
 8009284:	b140      	cbz	r0, 8009298 <_vfiprintf_r+0x198>
 8009286:	2340      	movs	r3, #64	; 0x40
 8009288:	eba0 000a 	sub.w	r0, r0, sl
 800928c:	fa03 f000 	lsl.w	r0, r3, r0
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	4303      	orrs	r3, r0
 8009294:	3401      	adds	r4, #1
 8009296:	9304      	str	r3, [sp, #16]
 8009298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929c:	482c      	ldr	r0, [pc, #176]	; (8009350 <_vfiprintf_r+0x250>)
 800929e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092a2:	2206      	movs	r2, #6
 80092a4:	f7f6 ff9c 	bl	80001e0 <memchr>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d03f      	beq.n	800932c <_vfiprintf_r+0x22c>
 80092ac:	4b29      	ldr	r3, [pc, #164]	; (8009354 <_vfiprintf_r+0x254>)
 80092ae:	bb1b      	cbnz	r3, 80092f8 <_vfiprintf_r+0x1f8>
 80092b0:	9b03      	ldr	r3, [sp, #12]
 80092b2:	3307      	adds	r3, #7
 80092b4:	f023 0307 	bic.w	r3, r3, #7
 80092b8:	3308      	adds	r3, #8
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092be:	443b      	add	r3, r7
 80092c0:	9309      	str	r3, [sp, #36]	; 0x24
 80092c2:	e767      	b.n	8009194 <_vfiprintf_r+0x94>
 80092c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c8:	460c      	mov	r4, r1
 80092ca:	2001      	movs	r0, #1
 80092cc:	e7a5      	b.n	800921a <_vfiprintf_r+0x11a>
 80092ce:	2300      	movs	r3, #0
 80092d0:	3401      	adds	r4, #1
 80092d2:	9305      	str	r3, [sp, #20]
 80092d4:	4619      	mov	r1, r3
 80092d6:	f04f 0c0a 	mov.w	ip, #10
 80092da:	4620      	mov	r0, r4
 80092dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e0:	3a30      	subs	r2, #48	; 0x30
 80092e2:	2a09      	cmp	r2, #9
 80092e4:	d903      	bls.n	80092ee <_vfiprintf_r+0x1ee>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0c5      	beq.n	8009276 <_vfiprintf_r+0x176>
 80092ea:	9105      	str	r1, [sp, #20]
 80092ec:	e7c3      	b.n	8009276 <_vfiprintf_r+0x176>
 80092ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80092f2:	4604      	mov	r4, r0
 80092f4:	2301      	movs	r3, #1
 80092f6:	e7f0      	b.n	80092da <_vfiprintf_r+0x1da>
 80092f8:	ab03      	add	r3, sp, #12
 80092fa:	9300      	str	r3, [sp, #0]
 80092fc:	462a      	mov	r2, r5
 80092fe:	4b16      	ldr	r3, [pc, #88]	; (8009358 <_vfiprintf_r+0x258>)
 8009300:	a904      	add	r1, sp, #16
 8009302:	4630      	mov	r0, r6
 8009304:	f7fd fd00 	bl	8006d08 <_printf_float>
 8009308:	4607      	mov	r7, r0
 800930a:	1c78      	adds	r0, r7, #1
 800930c:	d1d6      	bne.n	80092bc <_vfiprintf_r+0x1bc>
 800930e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009310:	07d9      	lsls	r1, r3, #31
 8009312:	d405      	bmi.n	8009320 <_vfiprintf_r+0x220>
 8009314:	89ab      	ldrh	r3, [r5, #12]
 8009316:	059a      	lsls	r2, r3, #22
 8009318:	d402      	bmi.n	8009320 <_vfiprintf_r+0x220>
 800931a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800931c:	f7ff f9d0 	bl	80086c0 <__retarget_lock_release_recursive>
 8009320:	89ab      	ldrh	r3, [r5, #12]
 8009322:	065b      	lsls	r3, r3, #25
 8009324:	f53f af12 	bmi.w	800914c <_vfiprintf_r+0x4c>
 8009328:	9809      	ldr	r0, [sp, #36]	; 0x24
 800932a:	e711      	b.n	8009150 <_vfiprintf_r+0x50>
 800932c:	ab03      	add	r3, sp, #12
 800932e:	9300      	str	r3, [sp, #0]
 8009330:	462a      	mov	r2, r5
 8009332:	4b09      	ldr	r3, [pc, #36]	; (8009358 <_vfiprintf_r+0x258>)
 8009334:	a904      	add	r1, sp, #16
 8009336:	4630      	mov	r0, r6
 8009338:	f7fd ff8a 	bl	8007250 <_printf_i>
 800933c:	e7e4      	b.n	8009308 <_vfiprintf_r+0x208>
 800933e:	bf00      	nop
 8009340:	08009968 	.word	0x08009968
 8009344:	08009988 	.word	0x08009988
 8009348:	08009948 	.word	0x08009948
 800934c:	08009b04 	.word	0x08009b04
 8009350:	08009b0e 	.word	0x08009b0e
 8009354:	08006d09 	.word	0x08006d09
 8009358:	080090db 	.word	0x080090db
 800935c:	08009b0a 	.word	0x08009b0a

08009360 <_sbrk_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d06      	ldr	r5, [pc, #24]	; (800937c <_sbrk_r+0x1c>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	602b      	str	r3, [r5, #0]
 800936c:	f7f8 fbe4 	bl	8001b38 <_sbrk>
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	d102      	bne.n	800937a <_sbrk_r+0x1a>
 8009374:	682b      	ldr	r3, [r5, #0]
 8009376:	b103      	cbz	r3, 800937a <_sbrk_r+0x1a>
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	bd38      	pop	{r3, r4, r5, pc}
 800937c:	200015c4 	.word	0x200015c4

08009380 <__sread>:
 8009380:	b510      	push	{r4, lr}
 8009382:	460c      	mov	r4, r1
 8009384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009388:	f000 f8e2 	bl	8009550 <_read_r>
 800938c:	2800      	cmp	r0, #0
 800938e:	bfab      	itete	ge
 8009390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009392:	89a3      	ldrhlt	r3, [r4, #12]
 8009394:	181b      	addge	r3, r3, r0
 8009396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800939a:	bfac      	ite	ge
 800939c:	6563      	strge	r3, [r4, #84]	; 0x54
 800939e:	81a3      	strhlt	r3, [r4, #12]
 80093a0:	bd10      	pop	{r4, pc}

080093a2 <__swrite>:
 80093a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a6:	461f      	mov	r7, r3
 80093a8:	898b      	ldrh	r3, [r1, #12]
 80093aa:	05db      	lsls	r3, r3, #23
 80093ac:	4605      	mov	r5, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	4616      	mov	r6, r2
 80093b2:	d505      	bpl.n	80093c0 <__swrite+0x1e>
 80093b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b8:	2302      	movs	r3, #2
 80093ba:	2200      	movs	r2, #0
 80093bc:	f000 f898 	bl	80094f0 <_lseek_r>
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	4632      	mov	r2, r6
 80093ce:	463b      	mov	r3, r7
 80093d0:	4628      	mov	r0, r5
 80093d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093d6:	f000 b817 	b.w	8009408 <_write_r>

080093da <__sseek>:
 80093da:	b510      	push	{r4, lr}
 80093dc:	460c      	mov	r4, r1
 80093de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e2:	f000 f885 	bl	80094f0 <_lseek_r>
 80093e6:	1c43      	adds	r3, r0, #1
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	bf15      	itete	ne
 80093ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80093ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093f6:	81a3      	strheq	r3, [r4, #12]
 80093f8:	bf18      	it	ne
 80093fa:	81a3      	strhne	r3, [r4, #12]
 80093fc:	bd10      	pop	{r4, pc}

080093fe <__sclose>:
 80093fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009402:	f000 b831 	b.w	8009468 <_close_r>
	...

08009408 <_write_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d07      	ldr	r5, [pc, #28]	; (8009428 <_write_r+0x20>)
 800940c:	4604      	mov	r4, r0
 800940e:	4608      	mov	r0, r1
 8009410:	4611      	mov	r1, r2
 8009412:	2200      	movs	r2, #0
 8009414:	602a      	str	r2, [r5, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	f7f7 ff42 	bl	80012a0 <_write>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	d102      	bne.n	8009426 <_write_r+0x1e>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b103      	cbz	r3, 8009426 <_write_r+0x1e>
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	200015c4 	.word	0x200015c4

0800942c <__assert_func>:
 800942c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800942e:	4614      	mov	r4, r2
 8009430:	461a      	mov	r2, r3
 8009432:	4b09      	ldr	r3, [pc, #36]	; (8009458 <__assert_func+0x2c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4605      	mov	r5, r0
 8009438:	68d8      	ldr	r0, [r3, #12]
 800943a:	b14c      	cbz	r4, 8009450 <__assert_func+0x24>
 800943c:	4b07      	ldr	r3, [pc, #28]	; (800945c <__assert_func+0x30>)
 800943e:	9100      	str	r1, [sp, #0]
 8009440:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009444:	4906      	ldr	r1, [pc, #24]	; (8009460 <__assert_func+0x34>)
 8009446:	462b      	mov	r3, r5
 8009448:	f000 f81e 	bl	8009488 <fiprintf>
 800944c:	f000 f89f 	bl	800958e <abort>
 8009450:	4b04      	ldr	r3, [pc, #16]	; (8009464 <__assert_func+0x38>)
 8009452:	461c      	mov	r4, r3
 8009454:	e7f3      	b.n	800943e <__assert_func+0x12>
 8009456:	bf00      	nop
 8009458:	20000010 	.word	0x20000010
 800945c:	08009b15 	.word	0x08009b15
 8009460:	08009b22 	.word	0x08009b22
 8009464:	08009b50 	.word	0x08009b50

08009468 <_close_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d06      	ldr	r5, [pc, #24]	; (8009484 <_close_r+0x1c>)
 800946c:	2300      	movs	r3, #0
 800946e:	4604      	mov	r4, r0
 8009470:	4608      	mov	r0, r1
 8009472:	602b      	str	r3, [r5, #0]
 8009474:	f7f8 fb52 	bl	8001b1c <_close>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d102      	bne.n	8009482 <_close_r+0x1a>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	b103      	cbz	r3, 8009482 <_close_r+0x1a>
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	bd38      	pop	{r3, r4, r5, pc}
 8009484:	200015c4 	.word	0x200015c4

08009488 <fiprintf>:
 8009488:	b40e      	push	{r1, r2, r3}
 800948a:	b503      	push	{r0, r1, lr}
 800948c:	4601      	mov	r1, r0
 800948e:	ab03      	add	r3, sp, #12
 8009490:	4805      	ldr	r0, [pc, #20]	; (80094a8 <fiprintf+0x20>)
 8009492:	f853 2b04 	ldr.w	r2, [r3], #4
 8009496:	6800      	ldr	r0, [r0, #0]
 8009498:	9301      	str	r3, [sp, #4]
 800949a:	f7ff fe31 	bl	8009100 <_vfiprintf_r>
 800949e:	b002      	add	sp, #8
 80094a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094a4:	b003      	add	sp, #12
 80094a6:	4770      	bx	lr
 80094a8:	20000010 	.word	0x20000010

080094ac <_fstat_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4d07      	ldr	r5, [pc, #28]	; (80094cc <_fstat_r+0x20>)
 80094b0:	2300      	movs	r3, #0
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	4611      	mov	r1, r2
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	f7f8 fb33 	bl	8001b24 <_fstat>
 80094be:	1c43      	adds	r3, r0, #1
 80094c0:	d102      	bne.n	80094c8 <_fstat_r+0x1c>
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	b103      	cbz	r3, 80094c8 <_fstat_r+0x1c>
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	bd38      	pop	{r3, r4, r5, pc}
 80094ca:	bf00      	nop
 80094cc:	200015c4 	.word	0x200015c4

080094d0 <_isatty_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d06      	ldr	r5, [pc, #24]	; (80094ec <_isatty_r+0x1c>)
 80094d4:	2300      	movs	r3, #0
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7f8 fb28 	bl	8001b30 <_isatty>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_isatty_r+0x1a>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_isatty_r+0x1a>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	200015c4 	.word	0x200015c4

080094f0 <_lseek_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4d07      	ldr	r5, [pc, #28]	; (8009510 <_lseek_r+0x20>)
 80094f4:	4604      	mov	r4, r0
 80094f6:	4608      	mov	r0, r1
 80094f8:	4611      	mov	r1, r2
 80094fa:	2200      	movs	r2, #0
 80094fc:	602a      	str	r2, [r5, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	f7f8 fb18 	bl	8001b34 <_lseek>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_lseek_r+0x1e>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_lseek_r+0x1e>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	200015c4 	.word	0x200015c4

08009514 <__ascii_mbtowc>:
 8009514:	b082      	sub	sp, #8
 8009516:	b901      	cbnz	r1, 800951a <__ascii_mbtowc+0x6>
 8009518:	a901      	add	r1, sp, #4
 800951a:	b142      	cbz	r2, 800952e <__ascii_mbtowc+0x1a>
 800951c:	b14b      	cbz	r3, 8009532 <__ascii_mbtowc+0x1e>
 800951e:	7813      	ldrb	r3, [r2, #0]
 8009520:	600b      	str	r3, [r1, #0]
 8009522:	7812      	ldrb	r2, [r2, #0]
 8009524:	1e10      	subs	r0, r2, #0
 8009526:	bf18      	it	ne
 8009528:	2001      	movne	r0, #1
 800952a:	b002      	add	sp, #8
 800952c:	4770      	bx	lr
 800952e:	4610      	mov	r0, r2
 8009530:	e7fb      	b.n	800952a <__ascii_mbtowc+0x16>
 8009532:	f06f 0001 	mvn.w	r0, #1
 8009536:	e7f8      	b.n	800952a <__ascii_mbtowc+0x16>

08009538 <__malloc_lock>:
 8009538:	4801      	ldr	r0, [pc, #4]	; (8009540 <__malloc_lock+0x8>)
 800953a:	f7ff b8c0 	b.w	80086be <__retarget_lock_acquire_recursive>
 800953e:	bf00      	nop
 8009540:	200015b8 	.word	0x200015b8

08009544 <__malloc_unlock>:
 8009544:	4801      	ldr	r0, [pc, #4]	; (800954c <__malloc_unlock+0x8>)
 8009546:	f7ff b8bb 	b.w	80086c0 <__retarget_lock_release_recursive>
 800954a:	bf00      	nop
 800954c:	200015b8 	.word	0x200015b8

08009550 <_read_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4d07      	ldr	r5, [pc, #28]	; (8009570 <_read_r+0x20>)
 8009554:	4604      	mov	r4, r0
 8009556:	4608      	mov	r0, r1
 8009558:	4611      	mov	r1, r2
 800955a:	2200      	movs	r2, #0
 800955c:	602a      	str	r2, [r5, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	f7f8 face 	bl	8001b00 <_read>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_read_r+0x1e>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_read_r+0x1e>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	200015c4 	.word	0x200015c4

08009574 <__ascii_wctomb>:
 8009574:	b149      	cbz	r1, 800958a <__ascii_wctomb+0x16>
 8009576:	2aff      	cmp	r2, #255	; 0xff
 8009578:	bf85      	ittet	hi
 800957a:	238a      	movhi	r3, #138	; 0x8a
 800957c:	6003      	strhi	r3, [r0, #0]
 800957e:	700a      	strbls	r2, [r1, #0]
 8009580:	f04f 30ff 	movhi.w	r0, #4294967295
 8009584:	bf98      	it	ls
 8009586:	2001      	movls	r0, #1
 8009588:	4770      	bx	lr
 800958a:	4608      	mov	r0, r1
 800958c:	4770      	bx	lr

0800958e <abort>:
 800958e:	b508      	push	{r3, lr}
 8009590:	2006      	movs	r0, #6
 8009592:	f000 f82b 	bl	80095ec <raise>
 8009596:	2001      	movs	r0, #1
 8009598:	f7f8 faac 	bl	8001af4 <_exit>

0800959c <_raise_r>:
 800959c:	291f      	cmp	r1, #31
 800959e:	b538      	push	{r3, r4, r5, lr}
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	d904      	bls.n	80095b0 <_raise_r+0x14>
 80095a6:	2316      	movs	r3, #22
 80095a8:	6003      	str	r3, [r0, #0]
 80095aa:	f04f 30ff 	mov.w	r0, #4294967295
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095b2:	b112      	cbz	r2, 80095ba <_raise_r+0x1e>
 80095b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095b8:	b94b      	cbnz	r3, 80095ce <_raise_r+0x32>
 80095ba:	4620      	mov	r0, r4
 80095bc:	f000 f830 	bl	8009620 <_getpid_r>
 80095c0:	462a      	mov	r2, r5
 80095c2:	4601      	mov	r1, r0
 80095c4:	4620      	mov	r0, r4
 80095c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095ca:	f000 b817 	b.w	80095fc <_kill_r>
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d00a      	beq.n	80095e8 <_raise_r+0x4c>
 80095d2:	1c59      	adds	r1, r3, #1
 80095d4:	d103      	bne.n	80095de <_raise_r+0x42>
 80095d6:	2316      	movs	r3, #22
 80095d8:	6003      	str	r3, [r0, #0]
 80095da:	2001      	movs	r0, #1
 80095dc:	e7e7      	b.n	80095ae <_raise_r+0x12>
 80095de:	2400      	movs	r4, #0
 80095e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095e4:	4628      	mov	r0, r5
 80095e6:	4798      	blx	r3
 80095e8:	2000      	movs	r0, #0
 80095ea:	e7e0      	b.n	80095ae <_raise_r+0x12>

080095ec <raise>:
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <raise+0xc>)
 80095ee:	4601      	mov	r1, r0
 80095f0:	6818      	ldr	r0, [r3, #0]
 80095f2:	f7ff bfd3 	b.w	800959c <_raise_r>
 80095f6:	bf00      	nop
 80095f8:	20000010 	.word	0x20000010

080095fc <_kill_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4d07      	ldr	r5, [pc, #28]	; (800961c <_kill_r+0x20>)
 8009600:	2300      	movs	r3, #0
 8009602:	4604      	mov	r4, r0
 8009604:	4608      	mov	r0, r1
 8009606:	4611      	mov	r1, r2
 8009608:	602b      	str	r3, [r5, #0]
 800960a:	f7f8 fa6b 	bl	8001ae4 <_kill>
 800960e:	1c43      	adds	r3, r0, #1
 8009610:	d102      	bne.n	8009618 <_kill_r+0x1c>
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	b103      	cbz	r3, 8009618 <_kill_r+0x1c>
 8009616:	6023      	str	r3, [r4, #0]
 8009618:	bd38      	pop	{r3, r4, r5, pc}
 800961a:	bf00      	nop
 800961c:	200015c4 	.word	0x200015c4

08009620 <_getpid_r>:
 8009620:	f7f8 ba5e 	b.w	8001ae0 <_getpid>

08009624 <_init>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	bf00      	nop
 8009628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962a:	bc08      	pop	{r3}
 800962c:	469e      	mov	lr, r3
 800962e:	4770      	bx	lr

08009630 <_fini>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	bf00      	nop
 8009634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009636:	bc08      	pop	{r3}
 8009638:	469e      	mov	lr, r3
 800963a:	4770      	bx	lr
