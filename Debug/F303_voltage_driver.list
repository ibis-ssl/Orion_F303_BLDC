
F303_voltage_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b4  08009ec0  08009ec0  00019ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a574  0800a574  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a574  0800a574  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a574  0800a574  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a574  0800a574  0001a574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a578  0800a578  0001a578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000013d0  200001e0  200001e0  000201e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200015b0  200015b0  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002200c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000435a  00000000  00000000  00042218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00019ade  00000000  00000000  00046572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001030  00000000  00000000  00060050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002778  00000000  00000000  00061080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e103  00000000  00000000  000637f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006013  00000000  00000000  000818fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0008790e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ad4  00000000  00000000  00087960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ea4 	.word	0x08009ea4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009ea4 	.word	0x08009ea4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c88:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c8a:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000c8c:	2400      	movs	r4, #0
{
 8000c8e:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000c90:	4621      	mov	r1, r4
 8000c92:	eb0d 0002 	add.w	r0, sp, r2
  ADC_MultiModeTypeDef multimode = {0};
 8000c96:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000c9e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000ca2:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca4:	9404      	str	r4, [sp, #16]
 8000ca6:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000ca8:	f006 fb52 	bl	8007350 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	483c      	ldr	r0, [pc, #240]	; (8000da0 <MX_ADC1_Init+0x118>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cae:	2301      	movs	r3, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cb8:	6103      	str	r3, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8000cba:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbc:	2304      	movs	r3, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cbe:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc2:	6143      	str	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ccc:	8304      	strh	r4, [r0, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cce:	6084      	str	r4, [r0, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cd0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd4:	60c4      	str	r4, [r0, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cd6:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cda:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cdc:	f001 fcc8 	bl	8002670 <HAL_ADC_Init>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d143      	bne.n	8000d6c <MX_ADC1_Init+0xe4>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce4:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce6:	482e      	ldr	r0, [pc, #184]	; (8000da0 <MX_ADC1_Init+0x118>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ce8:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cea:	a901      	add	r1, sp, #4
 8000cec:	f002 fb9a 	bl	8003424 <HAL_ADCEx_MultiModeConfigChannel>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d14b      	bne.n	8000d8c <MX_ADC1_Init+0x104>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	4828      	ldr	r0, [pc, #160]	; (8000da0 <MX_ADC1_Init+0x118>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_1;
 8000d04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000d08:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0c:	f001 ff72 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d138      	bne.n	8000d86 <MX_ADC1_Init+0xfe>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 3;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d14:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8000d98 <MX_ADC1_Init+0x110>
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d18:	2103      	movs	r1, #3
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d1a:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d1c:	2201      	movs	r2, #1
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000d1e:	2404      	movs	r4, #4
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000d20:	9110      	str	r1, [sp, #64]	; 0x40
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d22:	481f      	ldr	r0, [pc, #124]	; (8000da0 <MX_ADC1_Init+0x118>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000d24:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d26:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d28:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000d2c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000d30:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000d34:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000d36:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000d3a:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d3e:	f002 f923 	bl	8002f88 <HAL_ADCEx_InjectedConfigChannel>
 8000d42:	b9e8      	cbnz	r0, 8000d80 <MX_ADC1_Init+0xf8>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d44:	2204      	movs	r2, #4
 8000d46:	2302      	movs	r3, #2
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d48:	4815      	ldr	r0, [pc, #84]	; (8000da0 <MX_ADC1_Init+0x118>)
 8000d4a:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000d4c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d50:	f002 f91a 	bl	8002f88 <HAL_ADCEx_InjectedConfigChannel>
 8000d54:	b988      	cbnz	r0, 8000d7a <MX_ADC1_Init+0xf2>
    Error_Handler();
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d56:	2205      	movs	r2, #5
 8000d58:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <MX_ADC1_Init+0x118>)
 8000d5c:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000d5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000d62:	f002 f911 	bl	8002f88 <HAL_ADCEx_InjectedConfigChannel>
 8000d66:	b920      	cbnz	r0, 8000d72 <MX_ADC1_Init+0xea>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d68:	b014      	add	sp, #80	; 0x50
 8000d6a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d6c:	f000 ff1e 	bl	8001bac <Error_Handler>
 8000d70:	e7b8      	b.n	8000ce4 <MX_ADC1_Init+0x5c>
    Error_Handler();
 8000d72:	f000 ff1b 	bl	8001bac <Error_Handler>
}
 8000d76:	b014      	add	sp, #80	; 0x50
 8000d78:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000d7a:	f000 ff17 	bl	8001bac <Error_Handler>
 8000d7e:	e7ea      	b.n	8000d56 <MX_ADC1_Init+0xce>
    Error_Handler();
 8000d80:	f000 ff14 	bl	8001bac <Error_Handler>
 8000d84:	e7de      	b.n	8000d44 <MX_ADC1_Init+0xbc>
    Error_Handler();
 8000d86:	f000 ff11 	bl	8001bac <Error_Handler>
 8000d8a:	e7c3      	b.n	8000d14 <MX_ADC1_Init+0x8c>
    Error_Handler();
 8000d8c:	f000 ff0e 	bl	8001bac <Error_Handler>
 8000d90:	e7b0      	b.n	8000cf4 <MX_ADC1_Init+0x6c>
 8000d92:	bf00      	nop
 8000d94:	f3af 8000 	nop.w
 8000d98:	00000001 	.word	0x00000001
 8000d9c:	00000040 	.word	0x00000040
 8000da0:	20000200 	.word	0x20000200
 8000da4:	00000000 	.word	0x00000000

08000da8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000da8:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000daa:	2400      	movs	r4, #0
{
 8000dac:	b090      	sub	sp, #64	; 0x40
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dae:	2228      	movs	r2, #40	; 0x28
 8000db0:	4621      	mov	r1, r4
 8000db2:	a806      	add	r0, sp, #24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000db4:	e9cd 4400 	strd	r4, r4, [sp]
 8000db8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000dbc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000dc0:	f006 fac6 	bl	8007350 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <MX_ADC2_Init+0xc0>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <MX_ADC2_Init+0xc4>)
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dc8:	8304      	strh	r4, [r0, #24]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dce:	e9c0 2300 	strd	r2, r3, [r0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dda:	2304      	movs	r3, #4
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	6084      	str	r4, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dde:	6104      	str	r4, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de4:	60c4      	str	r4, [r0, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000de6:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000de8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dec:	6143      	str	r3, [r0, #20]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dee:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df0:	f001 fc3e 	bl	8002670 <HAL_ADC_Init>
 8000df4:	bb38      	cbnz	r0, 8000e46 <MX_ADC2_Init+0x9e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000df6:	2201      	movs	r2, #1
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e9cd 2300 	strd	r2, r3, [sp]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dfe:	481a      	ldr	r0, [pc, #104]	; (8000e68 <MX_ADC2_Init+0xc0>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000e00:	2200      	movs	r2, #0
 8000e02:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e04:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_1;
 8000e06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e0e:	f001 fef1 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 8000e12:	b9f8      	cbnz	r0, 8000e54 <MX_ADC2_Init+0xac>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e14:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8000e60 <MX_ADC2_Init+0xb8>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000e18:	2004      	movs	r0, #4
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e1a:	2300      	movs	r3, #0
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000e1c:	2201      	movs	r2, #1
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000e1e:	9008      	str	r0, [sp, #32]
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e20:	a906      	add	r1, sp, #24
 8000e22:	4811      	ldr	r0, [pc, #68]	; (8000e68 <MX_ADC2_Init+0xc0>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000e24:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000e26:	e9cd 2206 	strd	r2, r2, [sp, #24]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000e2a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000e2e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000e32:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000e34:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000e38:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000e3c:	f002 f8a4 	bl	8002f88 <HAL_ADCEx_InjectedConfigChannel>
 8000e40:	b920      	cbnz	r0, 8000e4c <MX_ADC2_Init+0xa4>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e42:	b010      	add	sp, #64	; 0x40
 8000e44:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e46:	f000 feb1 	bl	8001bac <Error_Handler>
 8000e4a:	e7d4      	b.n	8000df6 <MX_ADC2_Init+0x4e>
    Error_Handler();
 8000e4c:	f000 feae 	bl	8001bac <Error_Handler>
}
 8000e50:	b010      	add	sp, #64	; 0x40
 8000e52:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000e54:	f000 feaa 	bl	8001bac <Error_Handler>
 8000e58:	e7dc      	b.n	8000e14 <MX_ADC2_Init+0x6c>
 8000e5a:	bf00      	nop
 8000e5c:	f3af 8000 	nop.w
 8000e60:	00000001 	.word	0x00000001
 8000e64:	00000040 	.word	0x00000040
 8000e68:	20000250 	.word	0x20000250
 8000e6c:	50000100 	.word	0x50000100

08000e70 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e70:	b510      	push	{r4, lr}

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
  ADC_ChannelConfTypeDef sConfig = {0};
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e72:	2228      	movs	r2, #40	; 0x28
  ADC_MultiModeTypeDef multimode = {0};
 8000e74:	2400      	movs	r4, #0
{
 8000e76:	b094      	sub	sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e78:	eb0d 0002 	add.w	r0, sp, r2
 8000e7c:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8000e7e:	e9cd 4402 	strd	r4, r4, [sp, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000e86:	e9cd 4407 	strd	r4, r4, [sp, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8000e8a:	9401      	str	r4, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8c:	9404      	str	r4, [sp, #16]
 8000e8e:	9409      	str	r4, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000e90:	f006 fa5e 	bl	8007350 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e94:	482c      	ldr	r0, [pc, #176]	; (8000f48 <MX_ADC3_Init+0xd8>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e96:	4a2d      	ldr	r2, [pc, #180]	; (8000f4c <MX_ADC3_Init+0xdc>)
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc3.Init.NbrOfConversion = 1;
  hadc3.Init.DMAContinuousRequests = DISABLE;
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e98:	8304      	strh	r4, [r0, #24]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e9e:	e9c0 2300 	strd	r2, r3, [r0]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eaa:	2304      	movs	r3, #4
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	6084      	str	r4, [r0, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eae:	6104      	str	r4, [r0, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eb0:	f880 4020 	strb.w	r4, [r0, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb4:	60c4      	str	r4, [r0, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000eb6:	61c2      	str	r2, [r0, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000eb8:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebc:	6143      	str	r3, [r0, #20]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ebe:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ec0:	f001 fbd6 	bl	8002670 <HAL_ADC_Init>
 8000ec4:	bb78      	cbnz	r0, 8000f26 <MX_ADC3_Init+0xb6>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ec8:	481f      	ldr	r0, [pc, #124]	; (8000f48 <MX_ADC3_Init+0xd8>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eca:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000ecc:	a901      	add	r1, sp, #4
 8000ece:	f002 faa9 	bl	8003424 <HAL_ADCEx_MultiModeConfigChannel>
 8000ed2:	bb90      	cbnz	r0, 8000f3a <MX_ADC3_Init+0xca>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000edc:	481a      	ldr	r0, [pc, #104]	; (8000f48 <MX_ADC3_Init+0xd8>)
  sConfig.Channel = ADC_CHANNEL_5;
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ee2:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_5;
 8000ee4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000eec:	f001 fe82 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 8000ef0:	bb00      	cbnz	r0, 8000f34 <MX_ADC3_Init+0xc4>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
  sConfigInjected.InjectedNbrOfConversion = 1;
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000ef2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8000f40 <MX_ADC3_Init+0xd0>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000ef6:	2201      	movs	r2, #1
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000ef8:	2005      	movs	r0, #5
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000efa:	2300      	movs	r3, #0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000efc:	e9cd 020a 	strd	r0, r2, [sp, #40]	; 0x28
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000f00:	2404      	movs	r4, #4
  sConfigInjected.AutoInjectedConv = DISABLE;
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
  sConfigInjected.QueueInjectedContext = DISABLE;
  sConfigInjected.InjectedOffset = 0;
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f02:	4811      	ldr	r0, [pc, #68]	; (8000f48 <MX_ADC3_Init+0xd8>)
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000f04:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f06:	a90a      	add	r1, sp, #40	; 0x28
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8000f08:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000f0c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  sConfigInjected.InjectedNbrOfConversion = 1;
 8000f10:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000f12:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000f14:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000f18:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000f1c:	f002 f834 	bl	8002f88 <HAL_ADCEx_InjectedConfigChannel>
 8000f20:	b920      	cbnz	r0, 8000f2c <MX_ADC3_Init+0xbc>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f22:	b014      	add	sp, #80	; 0x50
 8000f24:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f26:	f000 fe41 	bl	8001bac <Error_Handler>
 8000f2a:	e7cc      	b.n	8000ec6 <MX_ADC3_Init+0x56>
    Error_Handler();
 8000f2c:	f000 fe3e 	bl	8001bac <Error_Handler>
}
 8000f30:	b014      	add	sp, #80	; 0x50
 8000f32:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f34:	f000 fe3a 	bl	8001bac <Error_Handler>
 8000f38:	e7db      	b.n	8000ef2 <MX_ADC3_Init+0x82>
    Error_Handler();
 8000f3a:	f000 fe37 	bl	8001bac <Error_Handler>
 8000f3e:	e7c9      	b.n	8000ed4 <MX_ADC3_Init+0x64>
 8000f40:	00000001 	.word	0x00000001
 8000f44:	00000040 	.word	0x00000040
 8000f48:	200002a0 	.word	0x200002a0
 8000f4c:	50000400 	.word	0x50000400

08000f50 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f50:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8000f52:	6802      	ldr	r2, [r0, #0]
{
 8000f54:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	2300      	movs	r3, #0
  if(adcHandle->Instance==ADC1)
 8000f58:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8000f60:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000f64:	930c      	str	r3, [sp, #48]	; 0x30
  if(adcHandle->Instance==ADC1)
 8000f66:	d024      	beq.n	8000fb2 <HAL_ADC_MspInit+0x62>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000f68:	4b49      	ldr	r3, [pc, #292]	; (8001090 <HAL_ADC_MspInit+0x140>)
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d005      	beq.n	8000f7a <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC3)
 8000f6e:	4b49      	ldr	r3, [pc, #292]	; (8001094 <HAL_ADC_MspInit+0x144>)
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d063      	beq.n	800103c <HAL_ADC_MspInit+0xec>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f74:	b00f      	add	sp, #60	; 0x3c
 8000f76:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f7a:	4a47      	ldr	r2, [pc, #284]	; (8001098 <HAL_ADC_MspInit+0x148>)
 8000f7c:	6813      	ldr	r3, [r2, #0]
 8000f7e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f80:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f84:	d04f      	beq.n	8001026 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b45      	ldr	r3, [pc, #276]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f8e:	615a      	str	r2, [r3, #20]
 8000f90:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f92:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8001080 <HAL_ADC_MspInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	a908      	add	r1, sp, #32
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fa2:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa6:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f002 ffc8 	bl	8003f3c <HAL_GPIO_Init>
}
 8000fac:	b00f      	add	sp, #60	; 0x3c
 8000fae:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fb2:	4a39      	ldr	r2, [pc, #228]	; (8001098 <HAL_ADC_MspInit+0x148>)
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fb8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fbc:	d028      	beq.n	8001010 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	695a      	ldr	r2, [r3, #20]
 8000fca:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000fce:	9202      	str	r2, [sp, #8]
 8000fd0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd2:	695a      	ldr	r2, [r3, #20]
 8000fd4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000fd8:	615a      	str	r2, [r3, #20]
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fe2:	2209      	movs	r2, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fe6:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000fec:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f002 ffa3 	bl	8003f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8001080 <HAL_ADC_MspInit+0x130>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ffc:	4828      	ldr	r0, [pc, #160]	; (80010a0 <HAL_ADC_MspInit+0x150>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001000:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001002:	ed8d 7b08 	vstr	d7, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001006:	f002 ff99 	bl	8003f3c <HAL_GPIO_Init>
}
 800100a:	b00f      	add	sp, #60	; 0x3c
 800100c:	f85d fb04 	ldr.w	pc, [sp], #4
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8001012:	695a      	ldr	r2, [r3, #20]
 8001014:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	9b01      	ldr	r3, [sp, #4]
 8001024:	e7cb      	b.n	8000fbe <HAL_ADC_MspInit+0x6e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_ADC_MspInit+0x14c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	9304      	str	r3, [sp, #16]
 8001038:	9b04      	ldr	r3, [sp, #16]
 800103a:	e7a4      	b.n	8000f86 <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC34_CLK_ENABLE();
 800103c:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001040:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001044:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001088 <HAL_ADC_MspInit+0x138>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8001048:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	4816      	ldr	r0, [pc, #88]	; (80010a4 <HAL_ADC_MspInit+0x154>)
    __HAL_RCC_ADC34_CLK_ENABLE();
 800104c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001050:	615a      	str	r2, [r3, #20]
 8001052:	695a      	ldr	r2, [r3, #20]
 8001054:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001058:	9206      	str	r2, [sp, #24]
 800105a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800106e:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	9b07      	ldr	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f002 ff62 	bl	8003f3c <HAL_GPIO_Init>
}
 8001078:	e77c      	b.n	8000f74 <HAL_ADC_MspInit+0x24>
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	00000010 	.word	0x00000010
 8001084:	00000003 	.word	0x00000003
 8001088:	00002000 	.word	0x00002000
 800108c:	00000003 	.word	0x00000003
 8001090:	50000100 	.word	0x50000100
 8001094:	50000400 	.word	0x50000400
 8001098:	200001fc 	.word	0x200001fc
 800109c:	40021000 	.word	0x40021000
 80010a0:	48001400 	.word	0x48001400
 80010a4:	48000400 	.word	0x48000400

080010a8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80010a8:	b510      	push	{r4, lr}
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_CAN_Init+0x34>)
 80010ac:	4c0c      	ldr	r4, [pc, #48]	; (80010e0 <MX_CAN_Init+0x38>)
  hcan.Init.Prescaler = 2;
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80010ae:	2300      	movs	r3, #0
  hcan.Init.Prescaler = 2;
 80010b0:	2202      	movs	r2, #2
 80010b2:	e9c0 4200 	strd	r4, r2, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 80010b6:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 80010ba:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
  hcan.Init.TimeTriggeredMode = DISABLE;
 80010be:	6183      	str	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = DISABLE;
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80010c0:	8383      	strh	r3, [r0, #28]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 80010c6:	e9c0 1204 	strd	r1, r2, [r0, #16]
  hcan.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80010ca:	f002 fa3f 	bl	800354c <HAL_CAN_Init>
 80010ce:	b900      	cbnz	r0, 80010d2 <MX_CAN_Init+0x2a>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80010d0:	bd10      	pop	{r4, pc}
 80010d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80010d6:	f000 bd69 	b.w	8001bac <Error_Handler>
 80010da:	bf00      	nop
 80010dc:	200002f0 	.word	0x200002f0
 80010e0:	40006400 	.word	0x40006400

080010e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010e4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(canHandle->Instance==CAN)
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <HAL_CAN_MspInit+0xa4>)
 80010e8:	6802      	ldr	r2, [r0, #0]
{
 80010ea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	2400      	movs	r4, #0
  if(canHandle->Instance==CAN)
 80010ee:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80010f4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80010f8:	9406      	str	r4, [sp, #24]
  if(canHandle->Instance==CAN)
 80010fa:	d001      	beq.n	8001100 <HAL_CAN_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80010fc:	b009      	add	sp, #36	; 0x24
 80010fe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001100:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800110c:	61da      	str	r2, [r3, #28]
 800110e:	69da      	ldr	r2, [r3, #28]
 8001110:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8001114:	9200      	str	r2, [sp, #0]
 8001116:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	695a      	ldr	r2, [r3, #20]
 800111a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800111e:	615a      	str	r2, [r3, #20]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001128:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800112c:	2302      	movs	r3, #2
 800112e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001136:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001138:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800113a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f002 fefc 	bl	8003f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 8001144:	4622      	mov	r2, r4
 8001146:	4621      	mov	r1, r4
 8001148:	2013      	movs	r0, #19
 800114a:	f002 fd7d 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 800114e:	2013      	movs	r0, #19
 8001150:	f002 fdb8 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001154:	4622      	mov	r2, r4
 8001156:	4621      	mov	r1, r4
 8001158:	2014      	movs	r0, #20
 800115a:	f002 fd75 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800115e:	2014      	movs	r0, #20
 8001160:	f002 fdb0 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 1, 0);
 8001164:	4622      	mov	r2, r4
 8001166:	2101      	movs	r1, #1
 8001168:	2015      	movs	r0, #21
 800116a:	f002 fd6d 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800116e:	2015      	movs	r0, #21
 8001170:	f002 fda8 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN_SCE_IRQn, 1, 0);
 8001174:	4622      	mov	r2, r4
 8001176:	2101      	movs	r1, #1
 8001178:	2016      	movs	r0, #22
 800117a:	f002 fd65 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_SCE_IRQn);
 800117e:	2016      	movs	r0, #22
 8001180:	f002 fda0 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
}
 8001184:	b009      	add	sp, #36	; 0x24
 8001186:	bd30      	pop	{r4, r5, pc}
 8001188:	40006400 	.word	0x40006400

0800118c <CAN_Filter_Init>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Init(uint16_t board_addr)
{
 800118c:	b530      	push	{r4, r5, lr}
  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
  sFilterConfig.FilterBank = 0;
  sFilterConfig.FilterIdHigh = (0x100 + board_addr) << 5;
 800118e:	f500 7480 	add.w	r4, r0, #256	; 0x100
{
 8001192:	b08b      	sub	sp, #44	; 0x2c
  sFilterConfig.FilterIdLow = (0x300 + board_addr) << 5;
 8001194:	f500 7040 	add.w	r0, r0, #768	; 0x300
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001198:	2101      	movs	r1, #1
  sFilterConfig.FilterIdLow = (0x300 + board_addr) << 5;
 800119a:	0143      	lsls	r3, r0, #5
  sFilterConfig.FilterIdHigh = (0x100 + board_addr) << 5;
 800119c:	0164      	lsls	r4, r4, #5
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800119e:	2200      	movs	r2, #0
  sFilterConfig.FilterIdLow = (0x300 + board_addr) << 5;
 80011a0:	e9cd 4300 	strd	r4, r3, [sp]
  sFilterConfig.FilterMaskIdHigh = 0x010 << 5;
 80011a4:	f44f 7500 	mov.w	r5, #512	; 0x200
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80011a8:	9106      	str	r1, [sp, #24]
  sFilterConfig.FilterMaskIdLow = 0x110 << 5;
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
  sFilterConfig.FilterActivation = ENABLE;
 80011aa:	9108      	str	r1, [sp, #32]
  sFilterConfig.FilterMaskIdLow = 0x110 << 5;
 80011ac:	f44f 5308 	mov.w	r3, #8704	; 0x2200
  sFilterConfig.SlaveStartFilterBank = 0;
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80011b0:	480e      	ldr	r0, [pc, #56]	; (80011ec <CAN_Filter_Init+0x60>)
  sFilterConfig.FilterMaskIdHigh = 0x010 << 5;
 80011b2:	9502      	str	r5, [sp, #8]
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80011b4:	4669      	mov	r1, sp
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011b6:	e9cd 3203 	strd	r3, r2, [sp, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80011ba:	9207      	str	r2, [sp, #28]
  sFilterConfig.FilterBank = 0;
 80011bc:	9205      	str	r2, [sp, #20]
  sFilterConfig.SlaveStartFilterBank = 0;
 80011be:	9209      	str	r2, [sp, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80011c0:	f002 fa44 	bl	800364c <HAL_CAN_ConfigFilter>
 80011c4:	b930      	cbnz	r0, 80011d4 <CAN_Filter_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <CAN_Filter_Init+0x60>)
 80011c8:	2102      	movs	r1, #2
 80011ca:	f002 fbd7 	bl	800397c <HAL_CAN_ActivateNotification>
 80011ce:	b948      	cbnz	r0, 80011e4 <CAN_Filter_Init+0x58>
  {
    Error_Handler();
  }
}
 80011d0:	b00b      	add	sp, #44	; 0x2c
 80011d2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80011d4:	f000 fcea 	bl	8001bac <Error_Handler>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <CAN_Filter_Init+0x60>)
 80011da:	2102      	movs	r1, #2
 80011dc:	f002 fbce 	bl	800397c <HAL_CAN_ActivateNotification>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d0f5      	beq.n	80011d0 <CAN_Filter_Init+0x44>
    Error_Handler();
 80011e4:	f000 fce2 	bl	8001bac <Error_Handler>
}
 80011e8:	b00b      	add	sp, #44	; 0x2c
 80011ea:	bd30      	pop	{r4, r5, pc}
 80011ec:	200002f0 	.word	0x200002f0

080011f0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_DMA_Init+0x30>)
{
 80011f2:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f4:	6959      	ldr	r1, [r3, #20]
 80011f6:	f041 0101 	orr.w	r1, r1, #1
 80011fa:	6159      	str	r1, [r3, #20]
 80011fc:	695b      	ldr	r3, [r3, #20]
{
 80011fe:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001200:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001208:	200e      	movs	r0, #14
 800120a:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800120c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800120e:	f002 fd1b 	bl	8003c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001212:	200e      	movs	r0, #14

}
 8001214:	b003      	add	sp, #12
 8001216:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800121a:	f002 bd53 	b.w	8003cc4 <HAL_NVIC_EnableIRQ>
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001224:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	2400      	movs	r4, #0
{
 800122a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001230:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_GPIO_Init+0xd4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800123a:	4d30      	ldr	r5, [pc, #192]	; (80012fc <MX_GPIO_Init+0xd8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800123c:	4e30      	ldr	r6, [pc, #192]	; (8001300 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800124a:	9200      	str	r2, [sp, #0]
 800124c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800124e:	695a      	ldr	r2, [r3, #20]
 8001250:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	695a      	ldr	r2, [r3, #20]
 8001258:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800125c:	9201      	str	r2, [sp, #4]
 800125e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800126e:	9202      	str	r2, [sp, #8]
 8001270:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	695a      	ldr	r2, [r3, #20]
 8001274:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001280:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001282:	4622      	mov	r2, r4
 8001284:	4628      	mov	r0, r5
 8001286:	f44f 4160 	mov.w	r1, #57344	; 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800128c:	f002 ff46 	bl	800411c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001290:	4622      	mov	r2, r4
 8001292:	4630      	mov	r0, r6
 8001294:	21c0      	movs	r1, #192	; 0xc0
 8001296:	f002 ff41 	bl	800411c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800129a:	f04f 0800 	mov.w	r8, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129e:	a904      	add	r1, sp, #16
 80012a0:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012a2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80012a6:	2301      	movs	r3, #1
 80012a8:	f04f 0900 	mov.w	r9, #0
 80012ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012b0:	e9cd 8906 	strd	r8, r9, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b4:	f002 fe42 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	a904      	add	r1, sp, #16
 80012ba:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012bc:	2201      	movs	r2, #1
 80012be:	2300      	movs	r3, #0
 80012c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f002 fe39 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ca:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	4628      	mov	r0, r5
 80012ce:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80012d2:	220e      	movs	r2, #14
 80012d4:	2300      	movs	r3, #0
 80012d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012da:	f002 fe2f 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012de:	22c0      	movs	r2, #192	; 0xc0
 80012e0:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	a904      	add	r1, sp, #16
 80012e4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80012ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f002 fe25 	bl	8003f3c <HAL_GPIO_Init>

}
 80012f2:	b00a      	add	sp, #40	; 0x28
 80012f4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	48000800 	.word	0x48000800
 8001300:	48000400 	.word	0x48000400

08001304 <_write>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int f getc(FILE *f)
#endif
*/
int _write(int file, char *ptr, int len){
 8001304:	b508      	push	{r3, lr}
	HAL_UART_Transmit_DMA(&huart1, ptr, len);
 8001306:	b292      	uxth	r2, r2
 8001308:	4801      	ldr	r0, [pc, #4]	; (8001310 <_write+0xc>)
 800130a:	f004 fa6f 	bl	80057ec <HAL_UART_Transmit_DMA>
}
 800130e:	bd08      	pop	{r3, pc}
 8001310:	20001518 	.word	0x20001518

08001314 <HAL_UART_RxCpltCallback>:
uint8_t uart_rx_buf[10] = {0};
bool uart_rx_flag = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uart_rx_flag = true;
 8001314:	4b01      	ldr	r3, [pc, #4]	; (800131c <HAL_UART_RxCpltCallback+0x8>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
}
 800131a:	4770      	bx	lr
 800131c:	200003c2 	.word	0x200003c2

08001320 <HAL_TIM_PeriodElapsedCallback>:
int adc_raw_cs_m0,adc_raw_cs_m1,adc_raw_batt_v,adc_raw_temp_m0,adc_raw_temp_m1;
int pre_cs_m0;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001320:	b538      	push	{r3, r4, r5, lr}
	static uint32_t speed_calc_cycle = 0;
	static int32_t pre_diff_cnt = 0, diff_accel;
	if (htim == &htim1)
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001324:	4298      	cmp	r0, r3
 8001326:	d002      	beq.n	800132e <HAL_TIM_PeriodElapsedCallback+0xe>
			{
				diff_accel_min = diff_accel;
			}
		}
		*/
	}else if(htim == &htim8){
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800132a:	4298      	cmp	r0, r3
 800132c:	d000      	beq.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x10>
			}
		}

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
	}
}
 800132e:	bd38      	pop	{r3, r4, r5, pc}
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001330:	4845      	ldr	r0, [pc, #276]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x128>)
		  pre_cs_m0 = adc_raw_cs_m0;
 8001332:	4c46      	ldr	r4, [pc, #280]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x12c>)
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	f002 feef 	bl	800411c <HAL_GPIO_WritePin>
		  pre_cs_m0 = adc_raw_cs_m0;
 800133e:	4b44      	ldr	r3, [pc, #272]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001340:	6822      	ldr	r2, [r4, #0]
		adc_raw_batt_v = HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_1);
 8001342:	4844      	ldr	r0, [pc, #272]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x134>)
		  pre_cs_m0 = adc_raw_cs_m0;
 8001344:	601a      	str	r2, [r3, #0]
		adc_raw_batt_v = HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_1);
 8001346:	2101      	movs	r1, #1
 8001348:	f001 fc3e 	bl	8002bc8 <HAL_ADCEx_InjectedGetValue>
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800134e:	4602      	mov	r2, r0
		adc_raw_cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2,ADC_INJECTED_RANK_1);
 8001350:	2101      	movs	r1, #1
 8001352:	4842      	ldr	r0, [pc, #264]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x13c>)
		adc_raw_batt_v = HAL_ADCEx_InjectedGetValue(&hadc3,ADC_INJECTED_RANK_1);
 8001354:	601a      	str	r2, [r3, #0]
		adc_raw_cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2,ADC_INJECTED_RANK_1);
 8001356:	f001 fc37 	bl	8002bc8 <HAL_ADCEx_InjectedGetValue>
 800135a:	4b41      	ldr	r3, [pc, #260]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800135c:	4602      	mov	r2, r0
		adc_raw_cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1);
 800135e:	2101      	movs	r1, #1
 8001360:	4840      	ldr	r0, [pc, #256]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x144>)
		adc_raw_cs_m1 = HAL_ADCEx_InjectedGetValue(&hadc2,ADC_INJECTED_RANK_1);
 8001362:	601a      	str	r2, [r3, #0]
		adc_raw_cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1);
 8001364:	f001 fc30 	bl	8002bc8 <HAL_ADCEx_InjectedGetValue>
		adc_raw_temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 8001368:	2102      	movs	r1, #2
		adc_raw_cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1);
 800136a:	4603      	mov	r3, r0
		adc_raw_temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 800136c:	483d      	ldr	r0, [pc, #244]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x144>)
		adc_raw_cs_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1);
 800136e:	6023      	str	r3, [r4, #0]
		adc_raw_temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 8001370:	f001 fc2a 	bl	8002bc8 <HAL_ADCEx_InjectedGetValue>
 8001374:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x148>)
		adc_raw_temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3);
 8001376:	2103      	movs	r1, #3
		adc_raw_temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 8001378:	4602      	mov	r2, r0
		adc_raw_temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3);
 800137a:	483a      	ldr	r0, [pc, #232]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x144>)
		adc_raw_temp_m0 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_2);
 800137c:	601a      	str	r2, [r3, #0]
		adc_raw_temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3);
 800137e:	f001 fc23 	bl	8002bc8 <HAL_ADCEx_InjectedGetValue>
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001384:	4602      	mov	r2, r0
		HAL_ADCEx_InjectedStart(&hadc1);
 8001386:	4837      	ldr	r0, [pc, #220]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x144>)
		adc_raw_temp_m1 = HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_3);
 8001388:	601a      	str	r2, [r3, #0]
		HAL_ADCEx_InjectedStart(&hadc1);
 800138a:	f001 fb95 	bl	8002ab8 <HAL_ADCEx_InjectedStart>
		HAL_ADCEx_InjectedStart(&hadc2);
 800138e:	4833      	ldr	r0, [pc, #204]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001390:	f001 fb92 	bl	8002ab8 <HAL_ADCEx_InjectedStart>
		HAL_ADCEx_InjectedStart(&hadc3);
 8001394:	482f      	ldr	r0, [pc, #188]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001396:	f001 fb8f 	bl	8002ab8 <HAL_ADCEx_InjectedStart>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800139a:	482b      	ldr	r0, [pc, #172]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a2:	f002 febb 	bl	800411c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80013a6:	4828      	ldr	r0, [pc, #160]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ae:	f002 feb5 	bl	800411c <HAL_GPIO_WritePin>
		updateMA702_M1();
 80013b2:	f000 fc61 	bl	8001c78 <updateMA702_M1>
		setOutputRadianTIM1(getRadianM702_M1() + offset_radian, output_voltage, 24);
 80013b6:	f000 fca9 	bl	8001d0c <getRadianM702_M1>
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80013be:	edd2 7a00 	vldr	s15, [r2]
 80013c2:	edd3 0a00 	vldr	s1, [r3]
 80013c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80013ca:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 80013ce:	f000 ff7f 	bl	80022d0 <setOutputRadianTIM1>
		speed_calc_cycle++;
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	3301      	adds	r3, #1
		if (speed_calc_cycle >= 200)
 80013d8:	2bc7      	cmp	r3, #199	; 0xc7
 80013da:	d922      	bls.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x102>
			int temp_diff_cnt = enc_raw - pre_enc_raw;
 80013dc:	4927      	ldr	r1, [pc, #156]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80013de:	4828      	ldr	r0, [pc, #160]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80013e0:	680b      	ldr	r3, [r1, #0]
 80013e2:	8800      	ldrh	r0, [r0, #0]
			pre_enc_raw = enc_raw;
 80013e4:	6008      	str	r0, [r1, #0]
			speed_calc_cycle = 0;
 80013e6:	2400      	movs	r4, #0
			int temp_diff_cnt = enc_raw - pre_enc_raw;
 80013e8:	1ac3      	subs	r3, r0, r3
			speed_calc_cycle = 0;
 80013ea:	6014      	str	r4, [r2, #0]
			if (temp_diff_cnt > 30000)
 80013ec:	f247 5230 	movw	r2, #30000	; 0x7530
 80013f0:	4293      	cmp	r3, r2
 80013f2:	dc1f      	bgt.n	8001434 <HAL_TIM_PeriodElapsedCallback+0x114>
			else if (temp_diff_cnt < -30000)
 80013f4:	4a23      	ldr	r2, [pc, #140]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80013f6:	4293      	cmp	r3, r2
				diff_cnt = temp_diff_cnt + 65535;
 80013f8:	bfb8      	it	lt
 80013fa:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80013fe:	4a22      	ldr	r2, [pc, #136]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001400:	bfb8      	it	lt
 8001402:	33ff      	addlt	r3, #255	; 0xff
				diff_cnt = temp_diff_cnt;
 8001404:	6013      	str	r3, [r2, #0]
			diff_accel = diff_cnt - pre_diff_cnt;
 8001406:	4a21      	ldr	r2, [pc, #132]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x16c>)
			if (diff_accel > diff_accel_max)
 8001408:	4921      	ldr	r1, [pc, #132]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x170>)
			diff_accel = diff_cnt - pre_diff_cnt;
 800140a:	6814      	ldr	r4, [r2, #0]
			if (diff_accel > diff_accel_max)
 800140c:	6808      	ldr	r0, [r1, #0]
			pre_diff_cnt = 0;
 800140e:	2500      	movs	r5, #0
			diff_accel = diff_cnt - pre_diff_cnt;
 8001410:	1b1b      	subs	r3, r3, r4
			pre_diff_cnt = 0;
 8001412:	6015      	str	r5, [r2, #0]
			if (diff_accel < diff_accel_min)
 8001414:	4a1f      	ldr	r2, [pc, #124]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x174>)
			if (diff_accel > diff_accel_max)
 8001416:	4283      	cmp	r3, r0
				diff_accel_max = diff_accel;
 8001418:	bfc8      	it	gt
 800141a:	600b      	strgt	r3, [r1, #0]
			if (diff_accel < diff_accel_min)
 800141c:	6811      	ldr	r1, [r2, #0]
 800141e:	428b      	cmp	r3, r1
 8001420:	da00      	bge.n	8001424 <HAL_TIM_PeriodElapsedCallback+0x104>
				diff_accel_min = diff_accel;
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001430:	f002 be74 	b.w	800411c <HAL_GPIO_WritePin>
				diff_cnt = temp_diff_cnt - 65535;
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001436:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800143a:	3bff      	subs	r3, #255	; 0xff
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e7e2      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8001440:	2000043c 	.word	0x2000043c
 8001444:	20000488 	.word	0x20000488
 8001448:	48000800 	.word	0x48000800
 800144c:	2000031c 	.word	0x2000031c
 8001450:	200003a8 	.word	0x200003a8
 8001454:	200002a0 	.word	0x200002a0
 8001458:	20000318 	.word	0x20000318
 800145c:	20000250 	.word	0x20000250
 8001460:	20000320 	.word	0x20000320
 8001464:	20000200 	.word	0x20000200
 8001468:	20000324 	.word	0x20000324
 800146c:	20000328 	.word	0x20000328
 8001470:	200003a0 	.word	0x200003a0
 8001474:	200003a4 	.word	0x200003a4
 8001478:	200003b4 	.word	0x200003b4
 800147c:	200003b0 	.word	0x200003b0
 8001480:	20000388 	.word	0x20000388
 8001484:	ffff8ad0 	.word	0xffff8ad0
 8001488:	20000384 	.word	0x20000384
 800148c:	200003ac 	.word	0x200003ac
 8001490:	2000037c 	.word	0x2000037c
 8001494:	20000380 	.word	0x20000380

08001498 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint32_t can_rx_cnt = 0;
uint8_t can_rx_data[8];
CAN_RxHeaderTypeDef   can_rx_header;
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8001498:	b508      	push	{r3, lr}
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data) != HAL_OK)
 800149a:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 800149e:	2100      	movs	r1, #0
 80014a0:	f002 f9e2 	bl	8003868 <HAL_CAN_GetRxMessage>
 80014a4:	b108      	cbz	r0, 80014aa <HAL_CAN_RxFifo0MsgPendingCallback+0x12>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014a8:	e7fe      	b.n	80014a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
	can_rx_cnt++;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80014ac:	6813      	ldr	r3, [r2, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	bd08      	pop	{r3, pc}
 80014b4:	20000360 	.word	0x20000360
 80014b8:	20000358 	.word	0x20000358
 80014bc:	20000354 	.word	0x20000354

080014c0 <runMode>:
{
 80014c0:	b570      	push	{r4, r5, r6, lr}
	if (offset_radian > M_PI * 2)
 80014c2:	4d5d      	ldr	r5, [pc, #372]	; (8001638 <runMode+0x178>)
{
 80014c4:	b082      	sub	sp, #8
	if (offset_radian > M_PI * 2)
 80014c6:	6828      	ldr	r0, [r5, #0]
 80014c8:	f7ff f83e 	bl	8000548 <__aeabi_f2d>
 80014cc:	a356      	add	r3, pc, #344	; (adr r3, 8001628 <runMode+0x168>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff fb21 	bl	8000b18 <__aeabi_dcmpgt>
 80014d6:	b108      	cbz	r0, 80014dc <runMode+0x1c>
		offset_radian = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	602b      	str	r3, [r5, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 80014dc:	4857      	ldr	r0, [pc, #348]	; (800163c <runMode+0x17c>)
		output_voltage = 2.0;
 80014de:	4c58      	ldr	r4, [pc, #352]	; (8001640 <runMode+0x180>)
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 80014e0:	2101      	movs	r1, #1
 80014e2:	f002 fe15 	bl	8004110 <HAL_GPIO_ReadPin>
 80014e6:	b910      	cbnz	r0, 80014ee <runMode+0x2e>
		output_voltage = 2.0;
 80014e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014ec:	6023      	str	r3, [r4, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 80014ee:	4853      	ldr	r0, [pc, #332]	; (800163c <runMode+0x17c>)
 80014f0:	2102      	movs	r1, #2
 80014f2:	f002 fe0d 	bl	8004110 <HAL_GPIO_ReadPin>
 80014f6:	b910      	cbnz	r0, 80014fe <runMode+0x3e>
		output_voltage = -2.0;
 80014f8:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80014fc:	6023      	str	r3, [r4, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0)
 80014fe:	484f      	ldr	r0, [pc, #316]	; (800163c <runMode+0x17c>)
 8001500:	2104      	movs	r1, #4
 8001502:	f002 fe05 	bl	8004110 <HAL_GPIO_ReadPin>
 8001506:	2800      	cmp	r0, #0
 8001508:	d15f      	bne.n	80015ca <runMode+0x10a>
		motor_accel = 0;
 800150a:	4e4e      	ldr	r6, [pc, #312]	; (8001644 <runMode+0x184>)
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 800150c:	484b      	ldr	r0, [pc, #300]	; (800163c <runMode+0x17c>)
		motor_accel = 0;
 800150e:	2300      	movs	r3, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 8001510:	2108      	movs	r1, #8
		output_voltage = 0;
 8001512:	6023      	str	r3, [r4, #0]
		motor_accel = 0;
 8001514:	6033      	str	r3, [r6, #0]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 8001516:	f002 fdfb 	bl	8004110 <HAL_GPIO_ReadPin>
 800151a:	2800      	cmp	r0, #0
 800151c:	d07b      	beq.n	8001616 <runMode+0x156>
	if (output_voltage > 0)
 800151e:	edd4 7a00 	vldr	s15, [r4]
		offset_radian = -2.4 + user_offet_radian;
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <runMode+0x188>)
	if (output_voltage > 0)
 8001524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		offset_radian = -2.4 + user_offet_radian;
 800152c:	6818      	ldr	r0, [r3, #0]
	if (output_voltage > 0)
 800152e:	dd08      	ble.n	8001542 <runMode+0x82>
		offset_radian = -2.4 + user_offet_radian;
 8001530:	f7ff f80a 	bl	8000548 <__aeabi_f2d>
 8001534:	a33e      	add	r3, pc, #248	; (adr r3, 8001630 <runMode+0x170>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7fe fea5 	bl	8000288 <__aeabi_dsub>
 800153e:	f7ff fb53 	bl	8000be8 <__aeabi_d2f>
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001542:	4b42      	ldr	r3, [pc, #264]	; (800164c <runMode+0x18c>)
 8001544:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001650 <runMode+0x190>
 8001548:	edd3 7a00 	vldr	s15, [r3]
	if (max_speed_p < spd_rps)
 800154c:	4b41      	ldr	r3, [pc, #260]	; (8001654 <runMode+0x194>)
 800154e:	6028      	str	r0, [r5, #0]
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if (max_speed_p < spd_rps)
 8001554:	ed93 7a00 	vldr	s14, [r3]
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001558:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (max_speed_p < spd_rps)
 800155c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	d425      	bmi.n	80015b2 <runMode+0xf2>
	if (max_speed_m > spd_rps)
 8001566:	4a3c      	ldr	r2, [pc, #240]	; (8001658 <runMode+0x198>)
 8001568:	ed92 7a00 	vldr	s14, [r2]
 800156c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d505      	bpl.n	8001582 <runMode+0xc2>
		max_offset_m = offset_radian;
 8001576:	4c39      	ldr	r4, [pc, #228]	; (800165c <runMode+0x19c>)
		max_speed_m = spd_rps;
 8001578:	edc2 7a00 	vstr	s15, [r2]
		max_speed_p = 0;
 800157c:	2100      	movs	r1, #0
		max_offset_m = offset_radian;
 800157e:	6020      	str	r0, [r4, #0]
		max_speed_p = 0;
 8001580:	6019      	str	r1, [r3, #0]
	printf("CS M0 %6d M1 %6d / BV %6d Temp %6d %6d \n",adc_raw_cs_m0,adc_raw_cs_m1,adc_raw_batt_v,adc_raw_temp_m0,adc_raw_temp_m1);
 8001582:	4c37      	ldr	r4, [pc, #220]	; (8001660 <runMode+0x1a0>)
 8001584:	4837      	ldr	r0, [pc, #220]	; (8001664 <runMode+0x1a4>)
 8001586:	6824      	ldr	r4, [r4, #0]
 8001588:	6800      	ldr	r0, [r0, #0]
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <runMode+0x1a8>)
 800158c:	4a37      	ldr	r2, [pc, #220]	; (800166c <runMode+0x1ac>)
 800158e:	4938      	ldr	r1, [pc, #224]	; (8001670 <runMode+0x1b0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	6809      	ldr	r1, [r1, #0]
 8001596:	e9cd 0400 	strd	r0, r4, [sp]
 800159a:	4836      	ldr	r0, [pc, #216]	; (8001674 <runMode+0x1b4>)
 800159c:	f006 fb4a 	bl	8007c34 <iprintf>
	diff_accel_max = -5000;
 80015a0:	4935      	ldr	r1, [pc, #212]	; (8001678 <runMode+0x1b8>)
	diff_accel_min = 5000;
 80015a2:	4b36      	ldr	r3, [pc, #216]	; (800167c <runMode+0x1bc>)
	diff_accel_max = -5000;
 80015a4:	4836      	ldr	r0, [pc, #216]	; (8001680 <runMode+0x1c0>)
 80015a6:	6008      	str	r0, [r1, #0]
	diff_accel_min = 5000;
 80015a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ac:	601a      	str	r2, [r3, #0]
}
 80015ae:	b002      	add	sp, #8
 80015b0:	bd70      	pop	{r4, r5, r6, pc}
		max_speed_m = 0;
 80015b2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001684 <runMode+0x1c4>
		max_offset_p = offset_radian;
 80015b6:	4934      	ldr	r1, [pc, #208]	; (8001688 <runMode+0x1c8>)
		max_speed_m = 0;
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <runMode+0x198>)
		max_speed_p = spd_rps;
 80015ba:	edc3 7a00 	vstr	s15, [r3]
		max_speed_m = 0;
 80015be:	eeb0 7a66 	vmov.f32	s14, s13
		max_offset_p = offset_radian;
 80015c2:	6008      	str	r0, [r1, #0]
		max_speed_m = 0;
 80015c4:	edc2 6a00 	vstr	s13, [r2]
 80015c8:	e7d0      	b.n	800156c <runMode+0xac>
	output_voltage += motor_accel;
 80015ca:	4e1e      	ldr	r6, [pc, #120]	; (8001644 <runMode+0x184>)
 80015cc:	edd4 7a00 	vldr	s15, [r4]
 80015d0:	edd6 6a00 	vldr	s13, [r6]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 80015d4:	4819      	ldr	r0, [pc, #100]	; (800163c <runMode+0x17c>)
	output_voltage += motor_accel;
 80015d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
	if (output_voltage > 20.0)
 80015da:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80015de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (output_voltage < -20.0)
 80015e6:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
		motor_accel = -0.5;
 80015ea:	bfc8      	it	gt
 80015ec:	f04f 433f 	movgt.w	r3, #3204448256	; 0xbf000000
	if (output_voltage < -20.0)
 80015f0:	eef4 7ac7 	vcmpe.f32	s15, s14
		motor_accel = -0.5;
 80015f4:	bfc8      	it	gt
 80015f6:	6033      	strgt	r3, [r6, #0]
	if (output_voltage < -20.0)
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		motor_accel = 0.5;
 80015fc:	bf48      	it	mi
 80015fe:	f04f 537c 	movmi.w	r3, #1056964608	; 0x3f000000
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 8001602:	f04f 0108 	mov.w	r1, #8
		motor_accel = 0.5;
 8001606:	bf48      	it	mi
 8001608:	6033      	strmi	r3, [r6, #0]
	output_voltage += motor_accel;
 800160a:	edc4 7a00 	vstr	s15, [r4]
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) == 0)
 800160e:	f002 fd7f 	bl	8004110 <HAL_GPIO_ReadPin>
 8001612:	2800      	cmp	r0, #0
 8001614:	d183      	bne.n	800151e <runMode+0x5e>
		motor_accel = 0.1;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <runMode+0x1cc>)
		printf("start auto speed!!\n");
 8001618:	481d      	ldr	r0, [pc, #116]	; (8001690 <runMode+0x1d0>)
		motor_accel = 0.1;
 800161a:	6033      	str	r3, [r6, #0]
		printf("start auto speed!!\n");
 800161c:	f006 fb90 	bl	8007d40 <puts>
 8001620:	e77d      	b.n	800151e <runMode+0x5e>
 8001622:	bf00      	nop
 8001624:	f3af 8000 	nop.w
 8001628:	54442d18 	.word	0x54442d18
 800162c:	401921fb 	.word	0x401921fb
 8001630:	33333333 	.word	0x33333333
 8001634:	40033333 	.word	0x40033333
 8001638:	200003a0 	.word	0x200003a0
 800163c:	48000800 	.word	0x48000800
 8001640:	200003a4 	.word	0x200003a4
 8001644:	2000039c 	.word	0x2000039c
 8001648:	200003c4 	.word	0x200003c4
 800164c:	20000384 	.word	0x20000384
 8001650:	3ca280a2 	.word	0x3ca280a2
 8001654:	20000398 	.word	0x20000398
 8001658:	20000394 	.word	0x20000394
 800165c:	2000038c 	.word	0x2000038c
 8001660:	20000328 	.word	0x20000328
 8001664:	20000324 	.word	0x20000324
 8001668:	20000318 	.word	0x20000318
 800166c:	20000320 	.word	0x20000320
 8001670:	2000031c 	.word	0x2000031c
 8001674:	08009ed4 	.word	0x08009ed4
 8001678:	2000037c 	.word	0x2000037c
 800167c:	20000380 	.word	0x20000380
 8001680:	ffffec78 	.word	0xffffec78
 8001684:	00000000 	.word	0x00000000
 8001688:	20000390 	.word	0x20000390
 800168c:	3dcccccd 	.word	0x3dcccccd
 8001690:	08009ec0 	.word	0x08009ec0

08001694 <forceStop>:
void forceStop(void){
 8001694:	b538      	push	{r3, r4, r5, lr}
	HAL_TIM_Base_Stop_IT(&htim1);
 8001696:	4c0d      	ldr	r4, [pc, #52]	; (80016cc <forceStop+0x38>)
	HAL_TIM_Base_Stop_IT(&htim8);
 8001698:	4d0d      	ldr	r5, [pc, #52]	; (80016d0 <forceStop+0x3c>)
	HAL_TIM_Base_Stop_IT(&htim1);
 800169a:	4620      	mov	r0, r4
 800169c:	f003 fbd0 	bl	8004e40 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 80016a0:	4628      	mov	r0, r5
 80016a2:	f003 fbcd 	bl	8004e40 <HAL_TIM_Base_Stop_IT>
	htim8.Instance->CCR1 = 0;
 80016a6:	6829      	ldr	r1, [r5, #0]
	htim1.Instance->CCR1 = 0;
 80016a8:	6822      	ldr	r2, [r4, #0]
	htim8.Instance->CCR1 = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	634b      	str	r3, [r1, #52]	; 0x34
	htim8.Instance->CCR2 = 0;
 80016ae:	638b      	str	r3, [r1, #56]	; 0x38
	htim8.Instance->CCR3 = 0;
 80016b0:	63cb      	str	r3, [r1, #60]	; 0x3c
	htim1.Instance->CCR1 = 0;
 80016b2:	6353      	str	r3, [r2, #52]	; 0x34
	htim1.Instance->CCR2 = 0;
 80016b4:	6393      	str	r3, [r2, #56]	; 0x38
	htim1.Instance->CCR3 = 0;
 80016b6:	63d3      	str	r3, [r2, #60]	; 0x3c
	__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim8);
 80016b8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80016ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016be:	644b      	str	r3, [r1, #68]	; 0x44
	__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(&htim1);
 80016c0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80016c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016c6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80016c8:	bd38      	pop	{r3, r4, r5, pc}
 80016ca:	bf00      	nop
 80016cc:	2000043c 	.word	0x2000043c
 80016d0:	20000488 	.word	0x20000488
 80016d4:	00000000 	.word	0x00000000

080016d8 <SystemClock_Config>:
{
 80016d8:	b510      	push	{r4, lr}
 80016da:	b0a0      	sub	sp, #128	; 0x80
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016dc:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016de:	223c      	movs	r2, #60	; 0x3c
 80016e0:	a810      	add	r0, sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e6:	e9cd 1101 	strd	r1, r1, [sp, #4]
 80016ea:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	9100      	str	r1, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f4:	f005 fe2c 	bl	8007350 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001702:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001704:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001706:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800170a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001710:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001714:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001716:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	f002 fd06 	bl	8004128 <HAL_RCC_OscConfig>
 800171c:	b108      	cbz	r0, 8001722 <SystemClock_Config+0x4a>
 800171e:	b672      	cpsid	i
	while (1)
 8001720:	e7fe      	b.n	8001720 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	220f      	movs	r2, #15
 8001724:	2302      	movs	r3, #2
 8001726:	e9cd 2300 	strd	r2, r3, [sp]
 800172a:	2200      	movs	r2, #0
 800172c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001730:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001734:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001736:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800173a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800173c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800173e:	f002 ffdb 	bl	80046f8 <HAL_RCC_ClockConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	b108      	cbz	r0, 800174a <SystemClock_Config+0x72>
 8001746:	b672      	cpsid	i
	while (1)
 8001748:	e7fe      	b.n	8001748 <SystemClock_Config+0x70>
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800174a:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001770 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800174e:	f243 0201 	movw	r2, #12289	; 0x3001
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001752:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001754:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8001758:	9210      	str	r2, [sp, #64]	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800175a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175c:	f003 f926 	bl	80049ac <HAL_RCCEx_PeriphCLKConfig>
 8001760:	b108      	cbz	r0, 8001766 <SystemClock_Config+0x8e>
 8001762:	b672      	cpsid	i
	while (1)
 8001764:	e7fe      	b.n	8001764 <SystemClock_Config+0x8c>
}
 8001766:	b020      	add	sp, #128	; 0x80
 8001768:	bd10      	pop	{r4, pc}
 800176a:	bf00      	nop
 800176c:	f3af 8000 	nop.w
	...

08001778 <main>:
{
 8001778:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800177c:	b085      	sub	sp, #20
  HAL_Init();
 800177e:	f000 fecb 	bl	8002518 <HAL_Init>
  SystemClock_Config();
 8001782:	f7ff ffa9 	bl	80016d8 <SystemClock_Config>
  MX_GPIO_Init();
 8001786:	f7ff fd4d 	bl	8001224 <MX_GPIO_Init>
  MX_DMA_Init();
 800178a:	f7ff fd31 	bl	80011f0 <MX_DMA_Init>
  MX_ADC1_Init();
 800178e:	f7ff fa7b 	bl	8000c88 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001792:	f7ff fb09 	bl	8000da8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001796:	f7ff fb6b 	bl	8000e70 <MX_ADC3_Init>
  MX_CAN_Init();
 800179a:	f7ff fc85 	bl	80010a8 <MX_CAN_Init>
  MX_SPI1_Init();
 800179e:	f000 fa07 	bl	8001bb0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80017a2:	f000 fc2d 	bl	8002000 <MX_TIM1_Init>
  MX_TIM8_Init();
 80017a6:	f000 fcbf 	bl	8002128 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80017aa:	f000 fdf3 	bl	8002394 <MX_USART1_UART_Init>
  initFirstSin();
 80017ae:	f000 fd57 	bl	8002260 <initFirstSin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80017b2:	48c7      	ldr	r0, [pc, #796]	; (8001ad0 <main+0x358>)
	HAL_TIM_PWM_Init(&htim8);
 80017b4:	4dc7      	ldr	r5, [pc, #796]	; (8001ad4 <main+0x35c>)
 80017b6:	4fc8      	ldr	r7, [pc, #800]	; (8001ad8 <main+0x360>)
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 80017b8:	ed9f 9ac8 	vldr	s18, [pc, #800]	; 8001adc <main+0x364>
		offset_radian = 0;
 80017bc:	eddf 8ac8 	vldr	s17, [pc, #800]	; 8001ae0 <main+0x368>
 80017c0:	f8df a370 	ldr.w	sl, [pc, #880]	; 8001b34 <main+0x3bc>
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 80017c4:	f8df 9370 	ldr.w	r9, [pc, #880]	; 8001b38 <main+0x3c0>
			if(HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1) > 3000){
 80017c8:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8001af8 <main+0x380>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d2:	f002 fca3 	bl	800411c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80017d6:	48be      	ldr	r0, [pc, #760]	; (8001ad0 <main+0x358>)
 80017d8:	2201      	movs	r2, #1
 80017da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017de:	f002 fc9d 	bl	800411c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e8:	48b9      	ldr	r0, [pc, #740]	; (8001ad0 <main+0x358>)
 80017ea:	f002 fc97 	bl	800411c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80017ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f2:	f000 feb5 	bl	8002560 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017f6:	48b6      	ldr	r0, [pc, #728]	; (8001ad0 <main+0x358>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	f002 fc8d 	bl	800411c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001802:	48b3      	ldr	r0, [pc, #716]	; (8001ad0 <main+0x358>)
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	f002 fc87 	bl	800411c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001814:	48ae      	ldr	r0, [pc, #696]	; (8001ad0 <main+0x358>)
 8001816:	f002 fc81 	bl	800411c <HAL_GPIO_WritePin>
  printf("Orion VV driver V1 start! \n");
 800181a:	48b2      	ldr	r0, [pc, #712]	; (8001ae4 <main+0x36c>)
 800181c:	f006 fa90 	bl	8007d40 <puts>
	enc_raw = hspi1.Instance->DR;
 8001820:	4bb1      	ldr	r3, [pc, #708]	; (8001ae8 <main+0x370>)
 8001822:	49b2      	ldr	r1, [pc, #712]	; (8001aec <main+0x374>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68d8      	ldr	r0, [r3, #12]
	__HAL_SPI_ENABLE(&hspi1);
 8001828:	681c      	ldr	r4, [r3, #0]
	enc_raw = hspi1.Instance->DR;
 800182a:	8008      	strh	r0, [r1, #0]
	__HAL_SPI_ENABLE(&hspi1);
 800182c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8001830:	601c      	str	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001832:	2201      	movs	r2, #1
 8001834:	48ae      	ldr	r0, [pc, #696]	; (8001af0 <main+0x378>)
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001836:	4caf      	ldr	r4, [pc, #700]	; (8001af4 <main+0x37c>)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	f002 fc6f 	bl	800411c <HAL_GPIO_WritePin>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800183e:	2100      	movs	r1, #0
 8001840:	48ad      	ldr	r0, [pc, #692]	; (8001af8 <main+0x380>)
 8001842:	f001 f8ef 	bl	8002a24 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001846:	2100      	movs	r1, #0
 8001848:	48ac      	ldr	r0, [pc, #688]	; (8001afc <main+0x384>)
 800184a:	f001 f8eb 	bl	8002a24 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800184e:	2100      	movs	r1, #0
 8001850:	48ab      	ldr	r0, [pc, #684]	; (8001b00 <main+0x388>)
 8001852:	f001 f8e7 	bl	8002a24 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc1);
 8001856:	48a8      	ldr	r0, [pc, #672]	; (8001af8 <main+0x380>)
 8001858:	f001 f84c 	bl	80028f4 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 800185c:	48a7      	ldr	r0, [pc, #668]	; (8001afc <main+0x384>)
 800185e:	f001 f849 	bl	80028f4 <HAL_ADC_Start>
	HAL_ADC_Start(&hadc3);
 8001862:	48a7      	ldr	r0, [pc, #668]	; (8001b00 <main+0x388>)
 8001864:	f001 f846 	bl	80028f4 <HAL_ADC_Start>
	HAL_TIM_PWM_Init(&htim8);
 8001868:	4628      	mov	r0, r5
 800186a:	f003 fb01 	bl	8004e70 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800186e:	2100      	movs	r1, #0
 8001870:	4628      	mov	r0, r5
 8001872:	f003 fb85 	bl	8004f80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001876:	2100      	movs	r1, #0
 8001878:	4628      	mov	r0, r5
 800187a:	f003 fe47 	bl	800550c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800187e:	2104      	movs	r1, #4
 8001880:	4628      	mov	r0, r5
 8001882:	f003 fb7d 	bl	8004f80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 8001886:	2104      	movs	r1, #4
 8001888:	4628      	mov	r0, r5
 800188a:	f003 fe3f 	bl	800550c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800188e:	2108      	movs	r1, #8
 8001890:	4628      	mov	r0, r5
 8001892:	f003 fb75 	bl	8004f80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
 8001896:	2108      	movs	r1, #8
 8001898:	4628      	mov	r0, r5
 800189a:	f003 fe37 	bl	800550c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800189e:	2100      	movs	r1, #0
 80018a0:	4620      	mov	r0, r4
 80018a2:	f003 fb6d 	bl	8004f80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80018a6:	2100      	movs	r1, #0
 80018a8:	4620      	mov	r0, r4
 80018aa:	f003 fe2f 	bl	800550c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80018ae:	2104      	movs	r1, #4
 80018b0:	4620      	mov	r0, r4
 80018b2:	f003 fb65 	bl	8004f80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80018b6:	2104      	movs	r1, #4
 80018b8:	4620      	mov	r0, r4
 80018ba:	f003 fe27 	bl	800550c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80018be:	2108      	movs	r1, #8
 80018c0:	4620      	mov	r0, r4
 80018c2:	f003 fb5d 	bl	8004f80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80018c6:	2108      	movs	r1, #8
 80018c8:	4620      	mov	r0, r4
 80018ca:	f003 fe1f 	bl	800550c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80018ce:	210c      	movs	r1, #12
 80018d0:	4620      	mov	r0, r4
 80018d2:	f003 fb55 	bl	8004f80 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_4);
 80018d6:	210c      	movs	r1, #12
 80018d8:	4620      	mov	r0, r4
 80018da:	f003 fe17 	bl	800550c <HAL_TIMEx_PWMN_Start>
	htim1.Instance->CNT = 0;
 80018de:	6822      	ldr	r2, [r4, #0]
	htim8.Instance->CNT = 1000;
 80018e0:	682b      	ldr	r3, [r5, #0]
	htim1.Instance->CNT = 0;
 80018e2:	2600      	movs	r6, #0
 80018e4:	6256      	str	r6, [r2, #36]	; 0x24
	htim8.Instance->CNT = 1000;
 80018e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim1);
 80018ec:	4620      	mov	r0, r4
 80018ee:	f003 fa6d 	bl	8004dcc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim8);
 80018f2:	4628      	mov	r0, r5
 80018f4:	f003 fa6a 	bl	8004dcc <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80018f8:	4982      	ldr	r1, [pc, #520]	; (8001b04 <main+0x38c>)
 80018fa:	4883      	ldr	r0, [pc, #524]	; (8001b08 <main+0x390>)
 80018fc:	4d83      	ldr	r5, [pc, #524]	; (8001b0c <main+0x394>)
 80018fe:	4c84      	ldr	r4, [pc, #528]	; (8001b10 <main+0x398>)
 8001900:	2201      	movs	r2, #1
 8001902:	f003 fef9 	bl	80056f8 <HAL_UART_Receive_IT>
	CAN_Filter_Init(0);
 8001906:	4630      	mov	r0, r6
 8001908:	f7ff fc40 	bl	800118c <CAN_Filter_Init>
	HAL_CAN_Start(&hcan);
 800190c:	4881      	ldr	r0, [pc, #516]	; (8001b14 <main+0x39c>)
 800190e:	4e82      	ldr	r6, [pc, #520]	; (8001b18 <main+0x3a0>)
 8001910:	f001 ff14 	bl	800373c <HAL_CAN_Start>
	printf("start main loop!\n");
 8001914:	4881      	ldr	r0, [pc, #516]	; (8001b1c <main+0x3a4>)
 8001916:	f006 fa13 	bl	8007d40 <puts>
		if (uart_rx_flag)
 800191a:	7833      	ldrb	r3, [r6, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d13c      	bne.n	800199a <main+0x222>
		if (calibration_mode)
 8001920:	f897 b000 	ldrb.w	fp, [r7]
 8001924:	f1bb 0f00 	cmp.w	fp, #0
 8001928:	f000 8108 	beq.w	8001b3c <main+0x3c4>
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 800192c:	6828      	ldr	r0, [r5, #0]
 800192e:	f7fe fe0b 	bl	8000548 <__aeabi_f2d>
	float spd_rps = (float)diff_cnt / 65535 * 26 * 50;
 8001932:	edda 7a00 	vldr	s15, [sl]
 8001936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	printf("offset %+10.5f, spd %+10.5f\n", offset_radian, spd_rps);
 800193a:	4602      	mov	r2, r0
 800193c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8001940:	460b      	mov	r3, r1
 8001942:	ee17 0a90 	vmov	r0, s15
 8001946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800194a:	f7fe fdfd 	bl	8000548 <__aeabi_f2d>
 800194e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001952:	e9cd 0100 	strd	r0, r1, [sp]
 8001956:	4648      	mov	r0, r9
 8001958:	f006 f96c 	bl	8007c34 <iprintf>
	offset_radian += 0.05;
 800195c:	6828      	ldr	r0, [r5, #0]
 800195e:	f7fe fdf3 	bl	8000548 <__aeabi_f2d>
 8001962:	a357      	add	r3, pc, #348	; (adr r3, 8001ac0 <main+0x348>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fc90 	bl	800028c <__adddf3>
 800196c:	f7ff f93c 	bl	8000be8 <__aeabi_d2f>
 8001970:	ee08 0a10 	vmov	s16, r0
	if (offset_radian > M_PI * 2)
 8001974:	f7fe fde8 	bl	8000548 <__aeabi_f2d>
 8001978:	a353      	add	r3, pc, #332	; (adr r3, 8001ac8 <main+0x350>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7ff f8cb 	bl	8000b18 <__aeabi_dcmpgt>
	offset_radian += 0.05;
 8001982:	2800      	cmp	r0, #0
 8001984:	bf18      	it	ne
 8001986:	eeb0 8a68 	vmovne.f32	s16, s17
			HAL_Delay(100);
 800198a:	2064      	movs	r0, #100	; 0x64
	offset_radian += 0.05;
 800198c:	ed85 8a00 	vstr	s16, [r5]
			HAL_Delay(100);
 8001990:	f000 fde6 	bl	8002560 <HAL_Delay>
		if (uart_rx_flag)
 8001994:	7833      	ldrb	r3, [r6, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0c2      	beq.n	8001920 <main+0x1a8>
			uart_rx_flag = false;
 800199a:	2300      	movs	r3, #0
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 800199c:	4959      	ldr	r1, [pc, #356]	; (8001b04 <main+0x38c>)
 800199e:	485a      	ldr	r0, [pc, #360]	; (8001b08 <main+0x390>)
			uart_rx_flag = false;
 80019a0:	7033      	strb	r3, [r6, #0]
			HAL_UART_Receive_IT(&huart1, uart_rx_buf, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	f003 fea8 	bl	80056f8 <HAL_UART_Receive_IT>
			switch (uart_rx_buf[0])
 80019a8:	4b56      	ldr	r3, [pc, #344]	; (8001b04 <main+0x38c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b30      	cmp	r3, #48	; 0x30
 80019ae:	f000 80e3 	beq.w	8001b78 <main+0x400>
 80019b2:	3b61      	subs	r3, #97	; 0x61
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	2a16      	cmp	r2, #22
 80019b8:	d8b2      	bhi.n	8001920 <main+0x1a8>
 80019ba:	2b16      	cmp	r3, #22
 80019bc:	d8b0      	bhi.n	8001920 <main+0x1a8>
 80019be:	a201      	add	r2, pc, #4	; (adr r2, 80019c4 <main+0x24c>)
 80019c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c4:	08001aa1 	.word	0x08001aa1
 80019c8:	08001921 	.word	0x08001921
 80019cc:	08001a89 	.word	0x08001a89
 80019d0:	08001921 	.word	0x08001921
 80019d4:	08001921 	.word	0x08001921
 80019d8:	08001921 	.word	0x08001921
 80019dc:	08001921 	.word	0x08001921
 80019e0:	08001921 	.word	0x08001921
 80019e4:	08001921 	.word	0x08001921
 80019e8:	08001921 	.word	0x08001921
 80019ec:	08001921 	.word	0x08001921
 80019f0:	08001a75 	.word	0x08001a75
 80019f4:	08001921 	.word	0x08001921
 80019f8:	08001921 	.word	0x08001921
 80019fc:	08001921 	.word	0x08001921
 8001a00:	08001a65 	.word	0x08001a65
 8001a04:	08001a49 	.word	0x08001a49
 8001a08:	08001921 	.word	0x08001921
 8001a0c:	08001a35 	.word	0x08001a35
 8001a10:	08001921 	.word	0x08001921
 8001a14:	08001921 	.word	0x08001921
 8001a18:	08001921 	.word	0x08001921
 8001a1c:	08001a21 	.word	0x08001a21
				output_voltage += 0.5;
 8001a20:	4b3f      	ldr	r3, [pc, #252]	; (8001b20 <main+0x3a8>)
 8001a22:	edd3 7a00 	vldr	s15, [r3]
 8001a26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a2e:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001a32:	e775      	b.n	8001920 <main+0x1a8>
				output_voltage -= 0.5;
 8001a34:	4b3a      	ldr	r3, [pc, #232]	; (8001b20 <main+0x3a8>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a42:	edc3 7a00 	vstr	s15, [r3]
				break;
 8001a46:	e76b      	b.n	8001920 <main+0x1a8>
				user_offet_radian += 0.05;
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <main+0x3ac>)
 8001a4a:	6818      	ldr	r0, [r3, #0]
 8001a4c:	f7fe fd7c 	bl	8000548 <__aeabi_f2d>
 8001a50:	a31b      	add	r3, pc, #108	; (adr r3, 8001ac0 <main+0x348>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fc19 	bl	800028c <__adddf3>
 8001a5a:	f7ff f8c5 	bl	8000be8 <__aeabi_d2f>
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <main+0x3ac>)
 8001a60:	6018      	str	r0, [r3, #0]
				break;
 8001a62:	e75d      	b.n	8001920 <main+0x1a8>
				motor_accel = 0.5;
 8001a64:	4a30      	ldr	r2, [pc, #192]	; (8001b28 <main+0x3b0>)
				printf("start auto speed!!\n");
 8001a66:	4831      	ldr	r0, [pc, #196]	; (8001b2c <main+0x3b4>)
				motor_accel = 0.5;
 8001a68:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001a6c:	6013      	str	r3, [r2, #0]
				printf("start auto speed!!\n");
 8001a6e:	f006 f967 	bl	8007d40 <puts>
				break;
 8001a72:	e755      	b.n	8001920 <main+0x1a8>
				motor_accel = 0;
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <main+0x3b0>)
				printf("stop auto speed!!\n");
 8001a76:	482e      	ldr	r0, [pc, #184]	; (8001b30 <main+0x3b8>)
				motor_accel = 0;
 8001a78:	edc3 8a00 	vstr	s17, [r3]
				output_voltage = 0;
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <main+0x3a8>)
 8001a7e:	edc3 8a00 	vstr	s17, [r3]
				printf("stop auto speed!!\n");
 8001a82:	f006 f95d 	bl	8007d40 <puts>
				break;
 8001a86:	e74b      	b.n	8001920 <main+0x1a8>
				user_offet_radian = 0;
 8001a88:	4b26      	ldr	r3, [pc, #152]	; (8001b24 <main+0x3ac>)
				output_voltage = 2.0;
 8001a8a:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <main+0x3a8>)
				user_offet_radian = 0;
 8001a8c:	edc3 8a00 	vstr	s17, [r3]
				calibration_mode = true;
 8001a90:	2301      	movs	r3, #1
 8001a92:	703b      	strb	r3, [r7, #0]
				output_voltage = 2.0;
 8001a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
				offset_radian = 0;
 8001a98:	edc5 8a00 	vstr	s17, [r5]
				output_voltage = 2.0;
 8001a9c:	6013      	str	r3, [r2, #0]
		if (calibration_mode)
 8001a9e:	e745      	b.n	800192c <main+0x1b4>
				user_offet_radian -= 0.05;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	; (8001b24 <main+0x3ac>)
 8001aa2:	6818      	ldr	r0, [r3, #0]
 8001aa4:	f7fe fd50 	bl	8000548 <__aeabi_f2d>
 8001aa8:	a305      	add	r3, pc, #20	; (adr r3, 8001ac0 <main+0x348>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fbeb 	bl	8000288 <__aeabi_dsub>
 8001ab2:	f7ff f899 	bl	8000be8 <__aeabi_d2f>
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <main+0x3ac>)
 8001ab8:	6018      	str	r0, [r3, #0]
				break;
 8001aba:	e731      	b.n	8001920 <main+0x1a8>
 8001abc:	f3af 8000 	nop.w
 8001ac0:	9999999a 	.word	0x9999999a
 8001ac4:	3fa99999 	.word	0x3fa99999
 8001ac8:	54442d18 	.word	0x54442d18
 8001acc:	401921fb 	.word	0x401921fb
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	20000488 	.word	0x20000488
 8001ad8:	2000032c 	.word	0x2000032c
 8001adc:	3ca280a2 	.word	0x3ca280a2
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	08009f20 	.word	0x08009f20
 8001ae8:	200003c8 	.word	0x200003c8
 8001aec:	20000388 	.word	0x20000388
 8001af0:	48000400 	.word	0x48000400
 8001af4:	2000043c 	.word	0x2000043c
 8001af8:	20000200 	.word	0x20000200
 8001afc:	20000250 	.word	0x20000250
 8001b00:	200002a0 	.word	0x200002a0
 8001b04:	200003b8 	.word	0x200003b8
 8001b08:	20001518 	.word	0x20001518
 8001b0c:	200003a0 	.word	0x200003a0
 8001b10:	20000338 	.word	0x20000338
 8001b14:	200002f0 	.word	0x200002f0
 8001b18:	200003c2 	.word	0x200003c2
 8001b1c:	08009f3c 	.word	0x08009f3c
 8001b20:	200003a4 	.word	0x200003a4
 8001b24:	200003c4 	.word	0x200003c4
 8001b28:	2000039c 	.word	0x2000039c
 8001b2c:	08009ec0 	.word	0x08009ec0
 8001b30:	08009f50 	.word	0x08009f50
 8001b34:	20000384 	.word	0x20000384
 8001b38:	08009f00 	.word	0x08009f00
			runMode();
 8001b3c:	f7ff fcc0 	bl	80014c0 <runMode>
			if(HAL_ADCEx_InjectedGetValue(&hadc1,ADC_INJECTED_RANK_1) > 3000){
 8001b40:	2101      	movs	r1, #1
 8001b42:	4640      	mov	r0, r8
 8001b44:	f001 f840 	bl	8002bc8 <HAL_ADCEx_InjectedGetValue>
 8001b48:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b4c:	4298      	cmp	r0, r3
 8001b4e:	d819      	bhi.n	8001b84 <main+0x40c>
			HAL_Delay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f000 fd05 	bl	8002560 <HAL_Delay>
			can_data[0] = 0;
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <main+0x418>)
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <main+0x41c>)
 8001b5a:	6013      	str	r3, [r2, #0]
			can_header.RTR = CAN_RTR_DATA;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	6123      	str	r3, [r4, #16]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001b60:	490d      	ldr	r1, [pc, #52]	; (8001b98 <main+0x420>)
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <main+0x424>)
			can_header.RTR = CAN_RTR_DATA;
 8001b64:	f8c4 b00c 	str.w	fp, [r4, #12]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <main+0x428>)
			can_header.StdId = 0x00;
 8001b6a:	f8c4 b000 	str.w	fp, [r4]
			can_header.TransmitGlobalTime = DISABLE;
 8001b6e:	f884 b014 	strb.w	fp, [r4, #20]
			HAL_CAN_AddTxMessage(&hcan,&can_header,can_data,&can_mailbox);
 8001b72:	f001 fe15 	bl	80037a0 <HAL_CAN_AddTxMessage>
 8001b76:	e6d0      	b.n	800191a <main+0x1a2>
				printf("enter sleep!\n");
 8001b78:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <main+0x42c>)
 8001b7a:	f006 f8e1 	bl	8007d40 <puts>
				forceStop();
 8001b7e:	f7ff fd89 	bl	8001694 <forceStop>
				while (1)
 8001b82:	e7fe      	b.n	8001b82 <main+0x40a>
				forceStop();
 8001b84:	f7ff fd86 	bl	8001694 <forceStop>
				printf("over current!!\n");
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <main+0x430>)
 8001b8a:	f006 f8d9 	bl	8007d40 <puts>
				while(1);
 8001b8e:	e7fe      	b.n	8001b8e <main+0x416>
 8001b90:	20000330 	.word	0x20000330
 8001b94:	01010000 	.word	0x01010000
 8001b98:	20000338 	.word	0x20000338
 8001b9c:	20000350 	.word	0x20000350
 8001ba0:	200002f0 	.word	0x200002f0
 8001ba4:	08009f64 	.word	0x08009f64
 8001ba8:	08009f74 	.word	0x08009f74

08001bac <Error_Handler>:
 8001bac:	b672      	cpsid	i
	while (1)
 8001bae:	e7fe      	b.n	8001bae <Error_Handler+0x2>

08001bb0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001bb0:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bb2:	4811      	ldr	r0, [pc, #68]	; (8001bf8 <MX_SPI1_Init+0x48>)
 8001bb4:	4c11      	ldr	r4, [pc, #68]	; (8001bfc <MX_SPI1_Init+0x4c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bb6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bba:	e9c0 4200 	strd	r4, r2, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bbe:	2202      	movs	r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc0:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001bc2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001bc6:	2401      	movs	r4, #1
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001bc8:	6102      	str	r2, [r0, #16]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bca:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001bce:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bd2:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001bd6:	2108      	movs	r1, #8
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001bd8:	2207      	movs	r2, #7
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bda:	e9c0 1307 	strd	r1, r3, [r0, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bde:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001be2:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001be6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001be8:	f002 fff6 	bl	8004bd8 <HAL_SPI_Init>
 8001bec:	b900      	cbnz	r0, 8001bf0 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bee:	bd10      	pop	{r4, pc}
 8001bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001bf4:	f7ff bfda 	b.w	8001bac <Error_Handler>
 8001bf8:	200003c8 	.word	0x200003c8
 8001bfc:	40013000 	.word	0x40013000

08001c00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c00:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8001c02:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <HAL_SPI_MspInit+0x70>)
 8001c04:	6801      	ldr	r1, [r0, #0]
{
 8001c06:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	2300      	movs	r3, #0
  if(spiHandle->Instance==SPI1)
 8001c0a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001c10:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001c14:	9306      	str	r3, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8001c16:	d001      	beq.n	8001c1c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c18:	b008      	add	sp, #32
 8001c1a:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c20:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c24:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001c68 <HAL_SPI_MspInit+0x68>
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c28:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	4812      	ldr	r0, [pc, #72]	; (8001c74 <HAL_SPI_MspInit+0x74>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c30:	619a      	str	r2, [r3, #24]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c38:	9200      	str	r2, [sp, #0]
 8001c3a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c42:	615a      	str	r2, [r3, #20]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c4c:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c4e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c50:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c52:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f002 f96e 	bl	8003f3c <HAL_GPIO_Init>
}
 8001c60:	b008      	add	sp, #32
 8001c62:	bd10      	pop	{r4, pc}
 8001c64:	f3af 8000 	nop.w
 8001c68:	00000038 	.word	0x00000038
 8001c6c:	00000002 	.word	0x00000002
 8001c70:	40013000 	.word	0x40013000
 8001c74:	48000400 	.word	0x48000400

08001c78 <updateMA702_M1>:
}


inline void updateMA702_M1(void)
{
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2180      	movs	r1, #128	; 0x80
{
 8001c7c:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c7e:	481e      	ldr	r0, [pc, #120]	; (8001cf8 <updateMA702_M1+0x80>)
 8001c80:	f002 fa4c 	bl	800411c <HAL_GPIO_WritePin>

  ma702_1.enc_raw = hspi1.Instance->DR;
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <updateMA702_M1+0x84>)
 8001c86:	6812      	ldr	r2, [r2, #0]
  hspi1.Instance->DR = 0;
 8001c88:	2300      	movs	r3, #0
  ma702_1.enc_raw = hspi1.Instance->DR;
 8001c8a:	68d1      	ldr	r1, [r2, #12]
  hspi1.Instance->DR = 0;
 8001c8c:	60d3      	str	r3, [r2, #12]
  while (__HAL_SPI_GET_FLAG(&hspi1, SPI_FLAG_RXNE) == RESET)
 8001c8e:	6893      	ldr	r3, [r2, #8]
 8001c90:	07db      	lsls	r3, r3, #31
 8001c92:	d5fc      	bpl.n	8001c8e <updateMA702_M1+0x16>
  {
  }
  ma702_1.enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001c94:	68d2      	ldr	r2, [r2, #12]

  ma702_1.enc_elec = 5461 - (ma702_1.enc_raw % 5461);
 8001c96:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <updateMA702_M1+0x88>)
  ma702_1.enc_raw = hspi1.Instance->DR & 0xFFFC;
 8001c98:	4c1a      	ldr	r4, [pc, #104]	; (8001d04 <updateMA702_M1+0x8c>)
 8001c9a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8001c9e:	400a      	ands	r2, r1
  ma702_1.enc_elec = 5461 - (ma702_1.enc_raw % 5461);
 8001ca0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f241 5155 	movw	r1, #5461	; 0x1555
 8001caa:	131b      	asrs	r3, r3, #12
 8001cac:	fb01 2313 	mls	r3, r1, r3, r2
 8001cb0:	1acb      	subs	r3, r1, r3
  ma702_1.output_radian = (float)ma702_1.enc_elec / 5461 * 2 * M_PI;
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cba:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001d08 <updateMA702_M1+0x90>
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
  ma702_1.enc_elec = 5461 - (ma702_1.enc_raw % 5461);
 8001cc2:	e9c4 2301 	strd	r2, r3, [r4, #4]
  ma702_1.output_radian = (float)ma702_1.enc_elec / 5461 * 2 * M_PI;
 8001cc6:	ee17 0a90 	vmov	r0, s15
 8001cca:	f7fe fc3d 	bl	8000548 <__aeabi_f2d>
 8001cce:	a308      	add	r3, pc, #32	; (adr r3, 8001cf0 <updateMA702_M1+0x78>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fc90 	bl	80005f8 <__aeabi_dmul>
 8001cd8:	f7fe ff86 	bl	8000be8 <__aeabi_d2f>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	6023      	str	r3, [r4, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <updateMA702_M1+0x80>)
}
 8001ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	2180      	movs	r1, #128	; 0x80
 8001cea:	f002 ba17 	b.w	800411c <HAL_GPIO_WritePin>
 8001cee:	bf00      	nop
 8001cf0:	54442d18 	.word	0x54442d18
 8001cf4:	400921fb 	.word	0x400921fb
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	200003c8 	.word	0x200003c8
 8001d00:	c003000d 	.word	0xc003000d
 8001d04:	2000042c 	.word	0x2000042c
 8001d08:	39c00300 	.word	0x39c00300

08001d0c <getRadianM702_M1>:
float getRadianM702_M0(void){
	return ma702_0.output_radian;
}

float getRadianM702_M1(void){
	return ma702_1.output_radian;
 8001d0c:	4b01      	ldr	r3, [pc, #4]	; (8001d14 <getRadianM702_M1+0x8>)
}
 8001d0e:	ed93 0a00 	vldr	s0, [r3]
 8001d12:	4770      	bx	lr
 8001d14:	2000042c 	.word	0x2000042c

08001d18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_MspInit+0x2c>)
 8001d1a:	699a      	ldr	r2, [r3, #24]
 8001d1c:	f042 0201 	orr.w	r2, r2, #1
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	699a      	ldr	r2, [r3, #24]
{
 8001d24:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	f002 0201 	and.w	r2, r2, #1
 8001d2a:	9200      	str	r2, [sp, #0]
 8001d2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d34:	61da      	str	r2, [r3, #28]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d40:	b002      	add	sp, #8
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000

08001d48 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <NMI_Handler>
 8001d4a:	bf00      	nop

08001d4c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <HardFault_Handler>
 8001d4e:	bf00      	nop

08001d50 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <MemManage_Handler>
 8001d52:	bf00      	nop

08001d54 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <BusFault_Handler>
 8001d56:	bf00      	nop

08001d58 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler>
 8001d5a:	bf00      	nop

08001d5c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop

08001d60 <DebugMon_Handler>:
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop

08001d64 <PendSV_Handler>:
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop

08001d68 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d68:	f000 bbe8 	b.w	800253c <HAL_IncTick>

08001d6c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d6c:	4801      	ldr	r0, [pc, #4]	; (8001d74 <DMA1_Channel4_IRQHandler+0x8>)
 8001d6e:	f002 b89b 	b.w	8003ea8 <HAL_DMA_IRQHandler>
 8001d72:	bf00      	nop
 8001d74:	200014d4 	.word	0x200014d4

08001d78 <USB_HP_CAN_TX_IRQHandler>:
void USB_HP_CAN_TX_IRQHandler(void)
{
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d78:	4801      	ldr	r0, [pc, #4]	; (8001d80 <USB_HP_CAN_TX_IRQHandler+0x8>)
 8001d7a:	f001 be29 	b.w	80039d0 <HAL_CAN_IRQHandler>
 8001d7e:	bf00      	nop
 8001d80:	200002f0 	.word	0x200002f0

08001d84 <USB_LP_CAN_RX0_IRQHandler>:
 8001d84:	4801      	ldr	r0, [pc, #4]	; (8001d8c <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8001d86:	f001 be23 	b.w	80039d0 <HAL_CAN_IRQHandler>
 8001d8a:	bf00      	nop
 8001d8c:	200002f0 	.word	0x200002f0

08001d90 <CAN_RX1_IRQHandler>:
 8001d90:	4801      	ldr	r0, [pc, #4]	; (8001d98 <CAN_RX1_IRQHandler+0x8>)
 8001d92:	f001 be1d 	b.w	80039d0 <HAL_CAN_IRQHandler>
 8001d96:	bf00      	nop
 8001d98:	200002f0 	.word	0x200002f0

08001d9c <CAN_SCE_IRQHandler>:
 8001d9c:	4801      	ldr	r0, [pc, #4]	; (8001da4 <CAN_SCE_IRQHandler+0x8>)
 8001d9e:	f001 be17 	b.w	80039d0 <HAL_CAN_IRQHandler>
 8001da2:	bf00      	nop
 8001da4:	200002f0 	.word	0x200002f0

08001da8 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001da8:	4801      	ldr	r0, [pc, #4]	; (8001db0 <TIM1_UP_TIM16_IRQHandler+0x8>)
 8001daa:	f003 b983 	b.w	80050b4 <HAL_TIM_IRQHandler>
 8001dae:	bf00      	nop
 8001db0:	2000043c 	.word	0x2000043c

08001db4 <TIM1_CC_IRQHandler>:
 8001db4:	4801      	ldr	r0, [pc, #4]	; (8001dbc <TIM1_CC_IRQHandler+0x8>)
 8001db6:	f003 b97d 	b.w	80050b4 <HAL_TIM_IRQHandler>
 8001dba:	bf00      	nop
 8001dbc:	2000043c 	.word	0x2000043c

08001dc0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc0:	4801      	ldr	r0, [pc, #4]	; (8001dc8 <USART1_IRQHandler+0x8>)
 8001dc2:	f003 bdfb 	b.w	80059bc <HAL_UART_IRQHandler>
 8001dc6:	bf00      	nop
 8001dc8:	20001518 	.word	0x20001518

08001dcc <TIM8_UP_IRQHandler>:
void TIM8_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001dcc:	4801      	ldr	r0, [pc, #4]	; (8001dd4 <TIM8_UP_IRQHandler+0x8>)
 8001dce:	f003 b971 	b.w	80050b4 <HAL_TIM_IRQHandler>
 8001dd2:	bf00      	nop
 8001dd4:	20000488 	.word	0x20000488

08001dd8 <TIM8_CC_IRQHandler>:
 8001dd8:	4801      	ldr	r0, [pc, #4]	; (8001de0 <TIM8_CC_IRQHandler+0x8>)
 8001dda:	f003 b96b 	b.w	80050b4 <HAL_TIM_IRQHandler>
 8001dde:	bf00      	nop
 8001de0:	20000488 	.word	0x20000488

08001de4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001de4:	2001      	movs	r0, #1
 8001de6:	4770      	bx	lr

08001de8 <_kill>:

int _kill(int pid, int sig)
{
 8001de8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001dea:	f005 fa87 	bl	80072fc <__errno>
 8001dee:	2316      	movs	r3, #22
 8001df0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001df2:	f04f 30ff 	mov.w	r0, #4294967295
 8001df6:	bd08      	pop	{r3, pc}

08001df8 <_exit>:

void _exit (int status)
{
 8001df8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001dfa:	f005 fa7f 	bl	80072fc <__errno>
 8001dfe:	2316      	movs	r3, #22
 8001e00:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001e02:	e7fe      	b.n	8001e02 <_exit+0xa>

08001e04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e04:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	1e16      	subs	r6, r2, #0
 8001e08:	dd07      	ble.n	8001e1a <_read+0x16>
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001e0e:	f3af 8000 	nop.w
 8001e12:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	42a5      	cmp	r5, r4
 8001e18:	d1f9      	bne.n	8001e0e <_read+0xa>
	}

return len;
}
 8001e1a:	4630      	mov	r0, r6
 8001e1c:	bd70      	pop	{r4, r5, r6, pc}
 8001e1e:	bf00      	nop

08001e20 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2c:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001e2e:	2000      	movs	r0, #0
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop

08001e34 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001e34:	2001      	movs	r0, #1
 8001e36:	4770      	bx	lr

08001e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001e38:	2000      	movs	r0, #0
 8001e3a:	4770      	bx	lr

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3e:	4c0c      	ldr	r4, [pc, #48]	; (8001e70 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <_sbrk+0x38>)
 8001e42:	490d      	ldr	r1, [pc, #52]	; (8001e78 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001e44:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e46:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001e48:	b12a      	cbz	r2, 8001e56 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4410      	add	r0, r2
 8001e4c:	4288      	cmp	r0, r1
 8001e4e:	d807      	bhi.n	8001e60 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e50:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001e52:	4610      	mov	r0, r2
 8001e54:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <_sbrk+0x40>)
 8001e58:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4410      	add	r0, r2
 8001e5c:	4288      	cmp	r0, r1
 8001e5e:	d9f7      	bls.n	8001e50 <_sbrk+0x14>
    errno = ENOMEM;
 8001e60:	f005 fa4c 	bl	80072fc <__errno>
 8001e64:	230c      	movs	r3, #12
    return (void *)-1;
 8001e66:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8001e6a:	6003      	str	r3, [r0, #0]
}
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	bd10      	pop	{r4, pc}
 8001e70:	20000438 	.word	0x20000438
 8001e74:	20008000 	.word	0x20008000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	200015b0 	.word	0x200015b0

08001e80 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4a03      	ldr	r2, [pc, #12]	; (8001e90 <SystemInit+0x10>)
 8001e82:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <HAL_TIM_PWM_MspInit>:
  HAL_TIM_MspPostInit(&htim8);

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e94:	b500      	push	{lr}

  if(tim_pwmHandle->Instance==TIM1)
 8001e96:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e98:	6803      	ldr	r3, [r0, #0]
 8001e9a:	4293      	cmp	r3, r2
{
 8001e9c:	b083      	sub	sp, #12
  if(tim_pwmHandle->Instance==TIM1)
 8001e9e:	d005      	beq.n	8001eac <HAL_TIM_PWM_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_pwmHandle->Instance==TIM8)
 8001ea0:	4a20      	ldr	r2, [pc, #128]	; (8001f24 <HAL_TIM_PWM_MspInit+0x90>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_TIM_PWM_MspInit+0x52>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001ea6:	b003      	add	sp, #12
 8001ea8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eac:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_TIM_PWM_MspInit+0x94>)
 8001eae:	6998      	ldr	r0, [r3, #24]
 8001eb0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001eb4:	6198      	str	r0, [r3, #24]
 8001eb6:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ebe:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec0:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ec2:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ec6:	f001 febf 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001eca:	2019      	movs	r0, #25
 8001ecc:	f001 fefa 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	201b      	movs	r0, #27
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	f001 feb7 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001eda:	201b      	movs	r0, #27
}
 8001edc:	b003      	add	sp, #12
 8001ede:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001ee2:	f001 beef 	b.w	8003cc4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <HAL_TIM_PWM_MspInit+0x94>)
 8001ee8:	6998      	ldr	r0, [r3, #24]
 8001eea:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8001eee:	6198      	str	r0, [r3, #24]
 8001ef0:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001ef8:	4611      	mov	r1, r2
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001efa:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001efc:	202c      	movs	r0, #44	; 0x2c
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001efe:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8001f00:	f001 fea2 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001f04:	202c      	movs	r0, #44	; 0x2c
 8001f06:	f001 fedd 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	202e      	movs	r0, #46	; 0x2e
 8001f0e:	4611      	mov	r1, r2
 8001f10:	f001 fe9a 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001f14:	202e      	movs	r0, #46	; 0x2e
}
 8001f16:	b003      	add	sp, #12
 8001f18:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001f1c:	f001 bed2 	b.w	8003cc4 <HAL_NVIC_EnableIRQ>
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40013400 	.word	0x40013400
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	00000000 	.word	0x00000000

08001f30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f30:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8001f32:	6802      	ldr	r2, [r0, #0]
 8001f34:	492e      	ldr	r1, [pc, #184]	; (8001ff0 <HAL_TIM_MspPostInit+0xc0>)
{
 8001f36:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8001f3a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001f40:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001f44:	9308      	str	r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8001f46:	d004      	beq.n	8001f52 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM8)
 8001f48:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_TIM_MspPostInit+0xc4>)
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d032      	beq.n	8001fb4 <HAL_TIM_MspPostInit+0x84>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f4e:	b00a      	add	sp, #40	; 0x28
 8001f50:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f56:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f5a:	2406      	movs	r4, #6
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f62:	615a      	str	r2, [r3, #20]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f6a:	9201      	str	r2, [sp, #4]
 8001f6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f74:	615a      	str	r2, [r3, #20]
 8001f76:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f78:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f80:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001f82:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8001f86:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001f8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f90:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f92:	f001 ffd3 	bl	8003f3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f96:	2203      	movs	r2, #3
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9e:	4816      	ldr	r0, [pc, #88]	; (8001ff8 <HAL_TIM_MspPostInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001fa0:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fac:	f001 ffc6 	bl	8003f3c <HAL_GPIO_Init>
}
 8001fb0:	b00a      	add	sp, #40	; 0x28
 8001fb2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb4:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001fb8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8001fe8 <HAL_TIM_MspPostInit+0xb8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbc:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbe:	480f      	ldr	r0, [pc, #60]	; (8001ffc <HAL_TIM_MspPostInit+0xcc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001fc4:	615a      	str	r2, [r3, #20]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fcc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fce:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001fd0:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10
 8001fd2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001fd8:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	f001 ffaf 	bl	8003f3c <HAL_GPIO_Init>
}
 8001fde:	b00a      	add	sp, #40	; 0x28
 8001fe0:	bd10      	pop	{r4, pc}
 8001fe2:	bf00      	nop
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	00001dc0 	.word	0x00001dc0
 8001fec:	00000002 	.word	0x00000002
 8001ff0:	40012c00 	.word	0x40012c00
 8001ff4:	40013400 	.word	0x40013400
 8001ff8:	48000400 	.word	0x48000400
 8001ffc:	48000800 	.word	0x48000800

08002000 <MX_TIM1_Init>:
{
 8002000:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002002:	2400      	movs	r4, #0
{
 8002004:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002006:	222c      	movs	r2, #44	; 0x2c
 8002008:	4621      	mov	r1, r4
 800200a:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002010:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002014:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002018:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201c:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800201e:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002020:	f005 f996 	bl	8007350 <memset>
  htim1.Instance = TIM1;
 8002024:	483e      	ldr	r0, [pc, #248]	; (8002120 <MX_TIM1_Init+0x120>)
  htim1.Init.Prescaler = 1;
 8002026:	4a3f      	ldr	r2, [pc, #252]	; (8002124 <MX_TIM1_Init+0x124>)
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	6184      	str	r4, [r0, #24]
  htim1.Init.Prescaler = 1;
 800202a:	2301      	movs	r3, #1
 800202c:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.Period = 2000;
 8002030:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002034:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim1.Init.RepetitionCounter = 0;
 8002038:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800203c:	f002 ff18 	bl	8004e70 <HAL_TIM_PWM_Init>
 8002040:	2800      	cmp	r0, #0
 8002042:	d148      	bne.n	80020d6 <MX_TIM1_Init+0xd6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002048:	2270      	movs	r2, #112	; 0x70
 800204a:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800204e:	4834      	ldr	r0, [pc, #208]	; (8002120 <MX_TIM1_Init+0x120>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002050:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002052:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002054:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002056:	f003 fabd 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	2800      	cmp	r0, #0
 800205c:	d14e      	bne.n	80020fc <MX_TIM1_Init+0xfc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800205e:	2060      	movs	r0, #96	; 0x60
 8002060:	2100      	movs	r1, #0
 8002062:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002066:	2000      	movs	r0, #0
 8002068:	2100      	movs	r1, #0
 800206a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800206e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002072:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002074:	482a      	ldr	r0, [pc, #168]	; (8002120 <MX_TIM1_Init+0x120>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002076:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002078:	a904      	add	r1, sp, #16
 800207a:	f003 f913 	bl	80052a4 <HAL_TIM_PWM_ConfigChannel>
 800207e:	2800      	cmp	r0, #0
 8002080:	d139      	bne.n	80020f6 <MX_TIM1_Init+0xf6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002082:	4827      	ldr	r0, [pc, #156]	; (8002120 <MX_TIM1_Init+0x120>)
 8002084:	2204      	movs	r2, #4
 8002086:	a904      	add	r1, sp, #16
 8002088:	f003 f90c 	bl	80052a4 <HAL_TIM_PWM_ConfigChannel>
 800208c:	bb80      	cbnz	r0, 80020f0 <MX_TIM1_Init+0xf0>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800208e:	4824      	ldr	r0, [pc, #144]	; (8002120 <MX_TIM1_Init+0x120>)
 8002090:	2208      	movs	r2, #8
 8002092:	a904      	add	r1, sp, #16
 8002094:	f003 f906 	bl	80052a4 <HAL_TIM_PWM_ConfigChannel>
 8002098:	bb38      	cbnz	r0, 80020ea <MX_TIM1_Init+0xea>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800209a:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002108 <MX_TIM1_Init+0x108>
 800209e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80020a2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002110 <MX_TIM1_Init+0x110>
 80020a6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80020aa:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002118 <MX_TIM1_Init+0x118>
 80020ae:	2200      	movs	r2, #0
 80020b0:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020b2:	2400      	movs	r4, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020b4:	481a      	ldr	r0, [pc, #104]	; (8002120 <MX_TIM1_Init+0x120>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020b6:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020b8:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80020be:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80020c2:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020c6:	f003 facb 	bl	8005660 <HAL_TIMEx_ConfigBreakDeadTime>
 80020ca:	b938      	cbnz	r0, 80020dc <MX_TIM1_Init+0xdc>
  HAL_TIM_MspPostInit(&htim1);
 80020cc:	4814      	ldr	r0, [pc, #80]	; (8002120 <MX_TIM1_Init+0x120>)
 80020ce:	f7ff ff2f 	bl	8001f30 <HAL_TIM_MspPostInit>
}
 80020d2:	b018      	add	sp, #96	; 0x60
 80020d4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80020d6:	f7ff fd69 	bl	8001bac <Error_Handler>
 80020da:	e7b3      	b.n	8002044 <MX_TIM1_Init+0x44>
    Error_Handler();
 80020dc:	f7ff fd66 	bl	8001bac <Error_Handler>
  HAL_TIM_MspPostInit(&htim1);
 80020e0:	480f      	ldr	r0, [pc, #60]	; (8002120 <MX_TIM1_Init+0x120>)
 80020e2:	f7ff ff25 	bl	8001f30 <HAL_TIM_MspPostInit>
}
 80020e6:	b018      	add	sp, #96	; 0x60
 80020e8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80020ea:	f7ff fd5f 	bl	8001bac <Error_Handler>
 80020ee:	e7d4      	b.n	800209a <MX_TIM1_Init+0x9a>
    Error_Handler();
 80020f0:	f7ff fd5c 	bl	8001bac <Error_Handler>
 80020f4:	e7cb      	b.n	800208e <MX_TIM1_Init+0x8e>
    Error_Handler();
 80020f6:	f7ff fd59 	bl	8001bac <Error_Handler>
 80020fa:	e7c2      	b.n	8002082 <MX_TIM1_Init+0x82>
    Error_Handler();
 80020fc:	f7ff fd56 	bl	8001bac <Error_Handler>
 8002100:	e7ad      	b.n	800205e <MX_TIM1_Init+0x5e>
 8002102:	bf00      	nop
 8002104:	f3af 8000 	nop.w
 8002108:	00000000 	.word	0x00000000
 800210c:	0000000a 	.word	0x0000000a
 8002110:	00000000 	.word	0x00000000
 8002114:	00002000 	.word	0x00002000
 8002118:	02000000 	.word	0x02000000
 800211c:	00000000 	.word	0x00000000
 8002120:	2000043c 	.word	0x2000043c
 8002124:	40012c00 	.word	0x40012c00

08002128 <MX_TIM8_Init>:
{
 8002128:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212a:	2400      	movs	r4, #0
{
 800212c:	b098      	sub	sp, #96	; 0x60
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800212e:	222c      	movs	r2, #44	; 0x2c
 8002130:	4621      	mov	r1, r4
 8002132:	a80c      	add	r0, sp, #48	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002134:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002138:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800213c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8002140:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	9400      	str	r4, [sp, #0]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002146:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002148:	f005 f902 	bl	8007350 <memset>
  htim8.Instance = TIM8;
 800214c:	4842      	ldr	r0, [pc, #264]	; (8002258 <MX_TIM8_Init+0x130>)
  htim8.Init.Prescaler = 1;
 800214e:	4a43      	ldr	r2, [pc, #268]	; (800225c <MX_TIM8_Init+0x134>)
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	6184      	str	r4, [r0, #24]
  htim8.Init.Prescaler = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	e9c0 2300 	strd	r2, r3, [r0]
  htim8.Init.Period = 2000;
 8002158:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800215c:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim8.Init.RepetitionCounter = 0;
 8002160:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002164:	f002 fe84 	bl	8004e70 <HAL_TIM_PWM_Init>
 8002168:	2800      	cmp	r0, #0
 800216a:	d14a      	bne.n	8002202 <MX_TIM8_Init+0xda>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800216c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002170:	2270      	movs	r2, #112	; 0x70
 8002172:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002176:	4838      	ldr	r0, [pc, #224]	; (8002258 <MX_TIM8_Init+0x130>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002178:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800217a:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800217c:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800217e:	f003 fa29 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002182:	2800      	cmp	r0, #0
 8002184:	d150      	bne.n	8002228 <MX_TIM8_Init+0x100>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002186:	2060      	movs	r0, #96	; 0x60
 8002188:	2100      	movs	r1, #0
 800218a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800218e:	2000      	movs	r0, #0
 8002190:	2100      	movs	r1, #0
 8002192:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002196:	e9cd 0108 	strd	r0, r1, [sp, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800219a:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219c:	482e      	ldr	r0, [pc, #184]	; (8002258 <MX_TIM8_Init+0x130>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800219e:	920a      	str	r2, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a0:	a904      	add	r1, sp, #16
 80021a2:	f003 f87f 	bl	80052a4 <HAL_TIM_PWM_ConfigChannel>
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d13b      	bne.n	8002222 <MX_TIM8_Init+0xfa>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021aa:	482b      	ldr	r0, [pc, #172]	; (8002258 <MX_TIM8_Init+0x130>)
 80021ac:	2204      	movs	r2, #4
 80021ae:	a904      	add	r1, sp, #16
 80021b0:	f003 f878 	bl	80052a4 <HAL_TIM_PWM_ConfigChannel>
 80021b4:	bb90      	cbnz	r0, 800221c <MX_TIM8_Init+0xf4>
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021b6:	4828      	ldr	r0, [pc, #160]	; (8002258 <MX_TIM8_Init+0x130>)
 80021b8:	2208      	movs	r2, #8
 80021ba:	a904      	add	r1, sp, #16
 80021bc:	f003 f872 	bl	80052a4 <HAL_TIM_PWM_ConfigChannel>
 80021c0:	bb48      	cbnz	r0, 8002216 <MX_TIM8_Init+0xee>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021c2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002230 <MX_TIM8_Init+0x108>
 80021c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80021ca:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002238 <MX_TIM8_Init+0x110>
 80021ce:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80021d2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002240 <MX_TIM8_Init+0x118>
 80021d6:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80021da:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002248 <MX_TIM8_Init+0x120>
 80021de:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80021e2:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8002250 <MX_TIM8_Init+0x128>
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021e6:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80021e8:	481b      	ldr	r0, [pc, #108]	; (8002258 <MX_TIM8_Init+0x130>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021ea:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80021ec:	a90c      	add	r1, sp, #48	; 0x30
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021ee:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80021f2:	f003 fa35 	bl	8005660 <HAL_TIMEx_ConfigBreakDeadTime>
 80021f6:	b938      	cbnz	r0, 8002208 <MX_TIM8_Init+0xe0>
  HAL_TIM_MspPostInit(&htim8);
 80021f8:	4817      	ldr	r0, [pc, #92]	; (8002258 <MX_TIM8_Init+0x130>)
 80021fa:	f7ff fe99 	bl	8001f30 <HAL_TIM_MspPostInit>
}
 80021fe:	b018      	add	sp, #96	; 0x60
 8002200:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002202:	f7ff fcd3 	bl	8001bac <Error_Handler>
 8002206:	e7b1      	b.n	800216c <MX_TIM8_Init+0x44>
    Error_Handler();
 8002208:	f7ff fcd0 	bl	8001bac <Error_Handler>
  HAL_TIM_MspPostInit(&htim8);
 800220c:	4812      	ldr	r0, [pc, #72]	; (8002258 <MX_TIM8_Init+0x130>)
 800220e:	f7ff fe8f 	bl	8001f30 <HAL_TIM_MspPostInit>
}
 8002212:	b018      	add	sp, #96	; 0x60
 8002214:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002216:	f7ff fcc9 	bl	8001bac <Error_Handler>
 800221a:	e7d2      	b.n	80021c2 <MX_TIM8_Init+0x9a>
    Error_Handler();
 800221c:	f7ff fcc6 	bl	8001bac <Error_Handler>
 8002220:	e7c9      	b.n	80021b6 <MX_TIM8_Init+0x8e>
    Error_Handler();
 8002222:	f7ff fcc3 	bl	8001bac <Error_Handler>
 8002226:	e7c0      	b.n	80021aa <MX_TIM8_Init+0x82>
    Error_Handler();
 8002228:	f7ff fcc0 	bl	8001bac <Error_Handler>
 800222c:	e7ab      	b.n	8002186 <MX_TIM8_Init+0x5e>
 800222e:	bf00      	nop
	...
 800223c:	0000000a 	.word	0x0000000a
 8002240:	00000000 	.word	0x00000000
 8002244:	00002000 	.word	0x00002000
 8002248:	00000004 	.word	0x00000004
 800224c:	00000000 	.word	0x00000000
 8002250:	02000000 	.word	0x02000000
 8002254:	00000004 	.word	0x00000004
 8002258:	20000488 	.word	0x20000488
 800225c:	40013400 	.word	0x40013400

08002260 <initFirstSin>:
}

/* USER CODE BEGIN 1 */
float rad_to_sin_cnv_array[1024] = {0};
inline void initFirstSin(void)
{
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (int i = 0; i < 1024; i++)
  {
    float temp_rad = (float)i / 256 * M_PI * 2;
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8002262:	4d19      	ldr	r5, [pc, #100]	; (80022c8 <initFirstSin+0x68>)
 8002264:	2300      	movs	r3, #0
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002266:	a716      	add	r7, pc, #88	; (adr r7, 80022c0 <initFirstSin+0x60>)
 8002268:	e9d7 6700 	ldrd	r6, r7, [r7]
{
 800226c:	ed2d 8b02 	vpush	{d8}
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 8002270:	f845 3b04 	str.w	r3, [r5], #4
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002274:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80022cc <initFirstSin+0x6c>
  for (int i = 0; i < 1024; i++)
 8002278:	2401      	movs	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 800227a:	ee07 4a90 	vmov	s15, r4
 800227e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  for (int i = 0; i < 1024; i++)
 8002282:	3401      	adds	r4, #1
    float temp_rad = (float)i / 256 * M_PI * 2;
 8002284:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002288:	ee17 0a90 	vmov	r0, s15
 800228c:	f7fe f95c 	bl	8000548 <__aeabi_f2d>
 8002290:	4632      	mov	r2, r6
 8002292:	463b      	mov	r3, r7
 8002294:	f7fe f9b0 	bl	80005f8 <__aeabi_dmul>
 8002298:	f7fe fca6 	bl	8000be8 <__aeabi_d2f>
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 800229c:	f7fe f954 	bl	8000548 <__aeabi_f2d>
 80022a0:	ec41 0b10 	vmov	d0, r0, r1
 80022a4:	f003 ffe0 	bl	8006268 <sin>
 80022a8:	ec51 0b10 	vmov	r0, r1, d0
 80022ac:	f7fe fc9c 	bl	8000be8 <__aeabi_d2f>
  for (int i = 0; i < 1024; i++)
 80022b0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    rad_to_sin_cnv_array[i] = sin(temp_rad);
 80022b4:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < 1024; i++)
 80022b8:	d1df      	bne.n	800227a <initFirstSin+0x1a>
    // printf("rad %4.3f sin %4.3f\n",temp_rad,rad_to_sin_cnv_array[i]);
    // HAL_Delay(1);
  }
}
 80022ba:	ecbd 8b02 	vpop	{d8}
 80022be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022c0:	54442d18 	.word	0x54442d18
 80022c4:	401921fb 	.word	0x401921fb
 80022c8:	200004d4 	.word	0x200004d4
 80022cc:	3b800000 	.word	0x3b800000

080022d0 <setOutputRadianTIM1>:
{
  return rad_to_sin_cnv_array[(uint8_t)(rad / (M_PI * 2) * 256)];
}

inline void setOutputRadianTIM1(float out_rad, float output_voltage, float battery_voltage)
{
 80022d0:	b508      	push	{r3, lr}
 80022d2:	eef0 0ae0 	vabs.f32	s1, s1
  const int pwm_cnt_centor = 700;
  if (output_voltage < 0)
  {
    output_voltage = -output_voltage;
  }
  if (output_voltage > 24)
 80022d6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
 80022da:	eef4 0ae7 	vcmpe.f32	s1, s15
 80022de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80022e2:	ed2d 8b02 	vpush	{d8}
 80022e6:	ee10 0a10 	vmov	r0, s0
  if (output_voltage > 24)
 80022ea:	dc3c      	bgt.n	8002366 <setOutputRadianTIM1+0x96>
  {
    output_voltage = 0;
  }
  voltage_propotional_cnt = output_voltage / 24 * pwm_cnt_centor;
 80022ec:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8002380 <setOutputRadianTIM1+0xb0>
 80022f0:	ee20 8a88 	vmul.f32	s16, s1, s16
 80022f4:	eebd 8ac8 	vcvt.s32.f32	s16, s16

  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 80022f8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  uint16_t rad_to_cnt = (uint8_t)((out_rad + M_PI * 4) / (M_PI * 2) * 255);
 80022fc:	f7fe f924 	bl	8000548 <__aeabi_f2d>
 8002300:	a31b      	add	r3, pc, #108	; (adr r3, 8002370 <setOutputRadianTIM1+0xa0>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	f7fd ffc1 	bl	800028c <__adddf3>
 800230a:	a31b      	add	r3, pc, #108	; (adr r3, 8002378 <setOutputRadianTIM1+0xa8>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f7fe f972 	bl	80005f8 <__aeabi_dmul>
 8002314:	f7fe fc48 	bl	8000ba8 <__aeabi_d2uiz>
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <setOutputRadianTIM1+0xb4>)
 800231a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8002388 <setOutputRadianTIM1+0xb8>
 800231e:	b2c0      	uxtb	r0, r0
 8002320:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8002324:	ed91 7a00 	vldr	s14, [r1]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002328:	edd1 5a55 	vldr	s11, [r1, #340]	; 0x154
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 800232c:	ed91 6aaa 	vldr	s12, [r1, #680]	; 0x2a8
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002330:	4b16      	ldr	r3, [pc, #88]	; (800238c <setOutputRadianTIM1+0xbc>)
 8002332:	eef0 6a67 	vmov.f32	s13, s15
 8002336:	eee7 6a08 	vfma.f32	s13, s14, s16
 800233a:	681b      	ldr	r3, [r3, #0]
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 800233c:	eeb0 7a67 	vmov.f32	s14, s15
 8002340:	eea5 7a88 	vfma.f32	s14, s11, s16
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002344:	eee6 7a08 	vfma.f32	s15, s12, s16
}
 8002348:	ecbd 8b02 	vpop	{d8}
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 800234c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 8002350:	eebc 7ac7 	vcvt.u32.f32	s14, s14
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  htim1.Instance->CCR1 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[rad_to_cnt];
 8002358:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[85 + rad_to_cnt];
 800235c:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = pwm_cnt_centor + voltage_propotional_cnt * rad_to_sin_cnv_array[170 + rad_to_cnt];
 8002360:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
}
 8002364:	bd08      	pop	{r3, pc}
 8002366:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8002390 <setOutputRadianTIM1+0xc0>
 800236a:	e7c7      	b.n	80022fc <setOutputRadianTIM1+0x2c>
 800236c:	f3af 8000 	nop.w
 8002370:	54442d18 	.word	0x54442d18
 8002374:	402921fb 	.word	0x402921fb
 8002378:	3d5bfeba 	.word	0x3d5bfeba
 800237c:	40444ad1 	.word	0x40444ad1
 8002380:	41e95556 	.word	0x41e95556
 8002384:	200004d4 	.word	0x200004d4
 8002388:	442f0000 	.word	0x442f0000
 800238c:	2000043c 	.word	0x2000043c
 8002390:	00000000 	.word	0x00000000

08002394 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002394:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002396:	480b      	ldr	r0, [pc, #44]	; (80023c4 <MX_USART1_UART_Init+0x30>)
 8002398:	4c0b      	ldr	r4, [pc, #44]	; (80023c8 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 2000000;
 800239a:	490c      	ldr	r1, [pc, #48]	; (80023cc <MX_USART1_UART_Init+0x38>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800239c:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800239e:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 2000000;
 80023a0:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a8:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023b0:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023b4:	f003 feec 	bl	8006190 <HAL_UART_Init>
 80023b8:	b900      	cbnz	r0, 80023bc <MX_USART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023ba:	bd10      	pop	{r4, pc}
 80023bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80023c0:	f7ff bbf4 	b.w	8001bac <Error_Handler>
 80023c4:	20001518 	.word	0x20001518
 80023c8:	40013800 	.word	0x40013800
 80023cc:	001e8480 	.word	0x001e8480

080023d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023d0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_UART_MspInit+0x9c>)
 80023d4:	6802      	ldr	r2, [r0, #0]
{
 80023d6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 80023da:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80023e0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80023e4:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 80023e6:	d001      	beq.n	80023ec <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023e8:	b008      	add	sp, #32
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ec:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80023f0:	4605      	mov	r5, r0
 80023f2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f4:	481e      	ldr	r0, [pc, #120]	; (8002470 <HAL_UART_MspInit+0xa0>)
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80023f6:	4e1f      	ldr	r6, [pc, #124]	; (8002474 <HAL_UART_MspInit+0xa4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80023f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fc:	619a      	str	r2, [r3, #24]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002404:	9200      	str	r2, [sp, #0]
 8002406:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800240e:	615a      	str	r2, [r3, #20]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002416:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002418:	2230      	movs	r2, #48	; 0x30
 800241a:	2302      	movs	r3, #2
 800241c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002428:	2307      	movs	r3, #7
 800242a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800242c:	f001 fd86 	bl	8003f3c <HAL_GPIO_Init>
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002430:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_UART_MspInit+0xa8>)
 8002432:	2310      	movs	r3, #16
 8002434:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002438:	4630      	mov	r0, r6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	e9c6 4302 	strd	r4, r3, [r6, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002440:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002444:	e9c6 4406 	strd	r4, r4, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002448:	f001 fc64 	bl	8003d14 <HAL_DMA_Init>
 800244c:	b958      	cbnz	r0, 8002466 <HAL_UART_MspInit+0x96>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	4611      	mov	r1, r2
 8002452:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002454:	66ee      	str	r6, [r5, #108]	; 0x6c
 8002456:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002458:	f001 fbf6 	bl	8003c48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800245c:	2025      	movs	r0, #37	; 0x25
 800245e:	f001 fc31 	bl	8003cc4 <HAL_NVIC_EnableIRQ>
}
 8002462:	b008      	add	sp, #32
 8002464:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002466:	f7ff fba1 	bl	8001bac <Error_Handler>
 800246a:	e7f0      	b.n	800244e <HAL_UART_MspInit+0x7e>
 800246c:	40013800 	.word	0x40013800
 8002470:	48000800 	.word	0x48000800
 8002474:	200014d4 	.word	0x200014d4
 8002478:	40020044 	.word	0x40020044

0800247c <Reset_Handler>:
 800247c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b4 <LoopForever+0x2>
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <LoopForever+0x6>)
 8002482:	490e      	ldr	r1, [pc, #56]	; (80024bc <LoopForever+0xa>)
 8002484:	4a0e      	ldr	r2, [pc, #56]	; (80024c0 <LoopForever+0xe>)
 8002486:	2300      	movs	r3, #0
 8002488:	e002      	b.n	8002490 <LoopCopyDataInit>

0800248a <CopyDataInit>:
 800248a:	58d4      	ldr	r4, [r2, r3]
 800248c:	50c4      	str	r4, [r0, r3]
 800248e:	3304      	adds	r3, #4

08002490 <LoopCopyDataInit>:
 8002490:	18c4      	adds	r4, r0, r3
 8002492:	428c      	cmp	r4, r1
 8002494:	d3f9      	bcc.n	800248a <CopyDataInit>
 8002496:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <LoopForever+0x12>)
 8002498:	4c0b      	ldr	r4, [pc, #44]	; (80024c8 <LoopForever+0x16>)
 800249a:	2300      	movs	r3, #0
 800249c:	e001      	b.n	80024a2 <LoopFillZerobss>

0800249e <FillZerobss>:
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	3204      	adds	r2, #4

080024a2 <LoopFillZerobss>:
 80024a2:	42a2      	cmp	r2, r4
 80024a4:	d3fb      	bcc.n	800249e <FillZerobss>
 80024a6:	f7ff fceb 	bl	8001e80 <SystemInit>
 80024aa:	f004 ff2d 	bl	8007308 <__libc_init_array>
 80024ae:	f7ff f963 	bl	8001778 <main>

080024b2 <LoopForever>:
 80024b2:	e7fe      	b.n	80024b2 <LoopForever>
 80024b4:	20008000 	.word	0x20008000
 80024b8:	20000000 	.word	0x20000000
 80024bc:	200001dc 	.word	0x200001dc
 80024c0:	0800a57c 	.word	0x0800a57c
 80024c4:	200001e0 	.word	0x200001e0
 80024c8:	200015b0 	.word	0x200015b0

080024cc <ADC1_2_IRQHandler>:
 80024cc:	e7fe      	b.n	80024cc <ADC1_2_IRQHandler>
	...

080024d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d2:	4a0e      	ldr	r2, [pc, #56]	; (800250c <HAL_InitTick+0x3c>)
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_InitTick+0x40>)
 80024d6:	7812      	ldrb	r2, [r2, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
{
 80024da:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e0:	fbb0 f0f2 	udiv	r0, r0, r2
 80024e4:	fbb3 f0f0 	udiv	r0, r3, r0
 80024e8:	f001 fbfa 	bl	8003ce0 <HAL_SYSTICK_Config>
 80024ec:	b908      	cbnz	r0, 80024f2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ee:	2d0f      	cmp	r5, #15
 80024f0:	d901      	bls.n	80024f6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80024f2:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80024f4:	bd38      	pop	{r3, r4, r5, pc}
 80024f6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f8:	4602      	mov	r2, r0
 80024fa:	4629      	mov	r1, r5
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f001 fba2 	bl	8003c48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_InitTick+0x44>)
 8002506:	4620      	mov	r0, r4
 8002508:	601d      	str	r5, [r3, #0]
}
 800250a:	bd38      	pop	{r3, r4, r5, pc}
 800250c:	20000004 	.word	0x20000004
 8002510:	20000000 	.word	0x20000000
 8002514:	20000008 	.word	0x20000008

08002518 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002518:	4a07      	ldr	r2, [pc, #28]	; (8002538 <HAL_Init+0x20>)
{
 800251a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800251c:	6813      	ldr	r3, [r2, #0]
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002524:	2003      	movs	r0, #3
 8002526:	f001 fb7d 	bl	8003c24 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800252a:	200f      	movs	r0, #15
 800252c:	f7ff ffd0 	bl	80024d0 <HAL_InitTick>
  HAL_MspInit();
 8002530:	f7ff fbf2 	bl	8001d18 <HAL_MspInit>
}
 8002534:	2000      	movs	r0, #0
 8002536:	bd08      	pop	{r3, pc}
 8002538:	40022000 	.word	0x40022000

0800253c <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800253c:	4a03      	ldr	r2, [pc, #12]	; (800254c <HAL_IncTick+0x10>)
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <HAL_IncTick+0x14>)
 8002540:	6811      	ldr	r1, [r2, #0]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	440b      	add	r3, r1
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	2000159c 	.word	0x2000159c
 8002550:	20000004 	.word	0x20000004

08002554 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8002554:	4b01      	ldr	r3, [pc, #4]	; (800255c <HAL_GetTick+0x8>)
 8002556:	6818      	ldr	r0, [r3, #0]
}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000159c 	.word	0x2000159c

08002560 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002560:	b538      	push	{r3, r4, r5, lr}
 8002562:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff fff6 	bl	8002554 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002568:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800256a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800256c:	d002      	beq.n	8002574 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_Delay+0x20>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	1b43      	subs	r3, r0, r5
 800257a:	42a3      	cmp	r3, r4
 800257c:	d3fa      	bcc.n	8002574 <HAL_Delay+0x14>
  {
  }
}
 800257e:	bd38      	pop	{r3, r4, r5, pc}
 8002580:	20000004 	.word	0x20000004

08002584 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002584:	6802      	ldr	r2, [r0, #0]
{
 8002586:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002588:	6893      	ldr	r3, [r2, #8]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d001      	beq.n	8002596 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002592:	2000      	movs	r0, #0
}
 8002594:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002596:	6811      	ldr	r1, [r2, #0]
 8002598:	07cc      	lsls	r4, r1, #31
 800259a:	d5fa      	bpl.n	8002592 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800259c:	6891      	ldr	r1, [r2, #8]
 800259e:	f001 010d 	and.w	r1, r1, #13
 80025a2:	2901      	cmp	r1, #1
 80025a4:	4604      	mov	r4, r0
 80025a6:	d009      	beq.n	80025bc <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80025aa:	f042 0210 	orr.w	r2, r2, #16
 80025ae:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80025b0:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6463      	str	r3, [r4, #68]	; 0x44
}
 80025ba:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 80025bc:	6893      	ldr	r3, [r2, #8]
 80025be:	2103      	movs	r1, #3
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6093      	str	r3, [r2, #8]
 80025c6:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80025c8:	f7ff ffc4 	bl	8002554 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80025d2:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025d4:	d403      	bmi.n	80025de <ADC_Disable+0x5a>
 80025d6:	e7dc      	b.n	8002592 <ADC_Disable+0xe>
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	07db      	lsls	r3, r3, #31
 80025dc:	d5d9      	bpl.n	8002592 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025de:	f7ff ffb9 	bl	8002554 <HAL_GetTick>
 80025e2:	1b40      	subs	r0, r0, r5
 80025e4:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025e6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025e8:	d9f6      	bls.n	80025d8 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	d5f3      	bpl.n	80025d8 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f2:	f043 0310 	orr.w	r3, r3, #16
 80025f6:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80025fa:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025fc:	4303      	orrs	r3, r0
 80025fe:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002600:	bd38      	pop	{r3, r4, r5, pc}
 8002602:	bf00      	nop

08002604 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002604:	6802      	ldr	r2, [r0, #0]
{
 8002606:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002608:	6893      	ldr	r3, [r2, #8]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b01      	cmp	r3, #1
{
 8002610:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002612:	d025      	beq.n	8002660 <ADC_Enable+0x5c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002614:	6891      	ldr	r1, [r2, #8]
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <ADC_Enable+0x68>)
 8002618:	4219      	tst	r1, r3
 800261a:	d008      	beq.n	800262e <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800261e:	f043 0310 	orr.w	r3, r3, #16
 8002622:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002624:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8002626:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002628:	4303      	orrs	r3, r0
 800262a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800262c:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800262e:	6893      	ldr	r3, [r2, #8]
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8002636:	f7ff ff8d 	bl	8002554 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800263a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 800263c:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	07d9      	lsls	r1, r3, #31
 8002642:	d40b      	bmi.n	800265c <ADC_Enable+0x58>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002644:	f7ff ff86 	bl	8002554 <HAL_GetTick>
 8002648:	1b43      	subs	r3, r0, r5
 800264a:	2b02      	cmp	r3, #2
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800264c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800264e:	d9f6      	bls.n	800263e <ADC_Enable+0x3a>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	07d2      	lsls	r2, r2, #31
 8002654:	d5e2      	bpl.n	800261c <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	07d9      	lsls	r1, r3, #31
 800265a:	d5f3      	bpl.n	8002644 <ADC_Enable+0x40>
  return HAL_OK;
 800265c:	2000      	movs	r0, #0
}
 800265e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002660:	6813      	ldr	r3, [r2, #0]
 8002662:	07d8      	lsls	r0, r3, #31
 8002664:	d5d6      	bpl.n	8002614 <ADC_Enable+0x10>
  return HAL_OK;
 8002666:	2000      	movs	r0, #0
 8002668:	e7f9      	b.n	800265e <ADC_Enable+0x5a>
 800266a:	bf00      	nop
 800266c:	8000003f 	.word	0x8000003f

08002670 <HAL_ADC_Init>:
{
 8002670:	b530      	push	{r4, r5, lr}
 8002672:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8002678:	2800      	cmp	r0, #0
 800267a:	f000 809c 	beq.w	80027b6 <HAL_ADC_Init+0x146>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800267e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002680:	f013 0310 	ands.w	r3, r3, #16
 8002684:	4604      	mov	r4, r0
 8002686:	d118      	bne.n	80026ba <HAL_ADC_Init+0x4a>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002688:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800268a:	2d00      	cmp	r5, #0
 800268c:	f000 8096 	beq.w	80027bc <HAL_ADC_Init+0x14c>
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002690:	6822      	ldr	r2, [r4, #0]
 8002692:	6891      	ldr	r1, [r2, #8]
 8002694:	00c9      	lsls	r1, r1, #3
 8002696:	f140 8082 	bpl.w	800279e <HAL_ADC_Init+0x12e>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800269a:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800269c:	008d      	lsls	r5, r1, #2
 800269e:	d47e      	bmi.n	800279e <HAL_ADC_Init+0x12e>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026a0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026a2:	06c8      	lsls	r0, r1, #27
 80026a4:	d400      	bmi.n	80026a8 <HAL_ADC_Init+0x38>
 80026a6:	b163      	cbz	r3, 80026c2 <HAL_ADC_Init+0x52>
    ADC_STATE_CLR_SET(hadc->State,
 80026a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80026aa:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 80026ae:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80026b0:	f043 0310 	orr.w	r3, r3, #16
 80026b4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80026b6:	b003      	add	sp, #12
 80026b8:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026bc:	06da      	lsls	r2, r3, #27
 80026be:	d4f3      	bmi.n	80026a8 <HAL_ADC_Init+0x38>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80026c0:	6802      	ldr	r2, [r0, #0]
 80026c2:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80026c4:	f010 0004 	ands.w	r0, r0, #4
 80026c8:	d1ee      	bne.n	80026a8 <HAL_ADC_Init+0x38>
    ADC_STATE_CLR_SET(hadc->State,
 80026ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80026cc:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 80026d0:	f041 0102 	orr.w	r1, r1, #2
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 80026d8:	6421      	str	r1, [r4, #64]	; 0x40
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026da:	f000 80d9 	beq.w	8002890 <HAL_ADC_Init+0x220>
 80026de:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <HAL_ADC_Init+0x264>)
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f000 80dd 	beq.w	80028a0 <HAL_ADC_Init+0x230>
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026e6:	497c      	ldr	r1, [pc, #496]	; (80028d8 <HAL_ADC_Init+0x268>)
 80026e8:	428a      	cmp	r2, r1
 80026ea:	d074      	beq.n	80027d6 <HAL_ADC_Init+0x166>
 80026ec:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <HAL_ADC_Init+0x26c>)
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d072      	beq.n	80027d8 <HAL_ADC_Init+0x168>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80026f2:	6893      	ldr	r3, [r2, #8]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	f000 80e3 	beq.w	80028c4 <HAL_ADC_Init+0x254>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026fe:	4d78      	ldr	r5, [pc, #480]	; (80028e0 <HAL_ADC_Init+0x270>)
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002700:	68ab      	ldr	r3, [r5, #8]
 8002702:	6861      	ldr	r1, [r4, #4]
 8002704:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002708:	430b      	orrs	r3, r1
 800270a:	60ab      	str	r3, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800270c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800270e:	68e1      	ldr	r1, [r4, #12]
 8002710:	7e65      	ldrb	r5, [r4, #25]
 8002712:	2b01      	cmp	r3, #1
 8002714:	68a3      	ldr	r3, [r4, #8]
 8002716:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800271a:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800271e:	bf18      	it	ne
 8002720:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002724:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002728:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800272a:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800272e:	f000 8093 	beq.w	8002858 <HAL_ADC_Init+0x1e8>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002732:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002734:	2901      	cmp	r1, #1
 8002736:	d00b      	beq.n	8002750 <HAL_ADC_Init+0xe0>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002738:	4867      	ldr	r0, [pc, #412]	; (80028d8 <HAL_ADC_Init+0x268>)
 800273a:	4282      	cmp	r2, r0
 800273c:	f000 809c 	beq.w	8002878 <HAL_ADC_Init+0x208>
 8002740:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002744:	4282      	cmp	r2, r0
 8002746:	f000 8097 	beq.w	8002878 <HAL_ADC_Init+0x208>
 800274a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800274c:	4303      	orrs	r3, r0
 800274e:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002750:	6891      	ldr	r1, [r2, #8]
 8002752:	f011 0f0c 	tst.w	r1, #12
 8002756:	d10c      	bne.n	8002772 <HAL_ADC_Init+0x102>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002758:	68d1      	ldr	r1, [r2, #12]
 800275a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800275e:	f021 0102 	bic.w	r1, r1, #2
 8002762:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002764:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002768:	7e20      	ldrb	r0, [r4, #24]
 800276a:	0049      	lsls	r1, r1, #1
 800276c:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8002770:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8002772:	68d0      	ldr	r0, [r2, #12]
 8002774:	495b      	ldr	r1, [pc, #364]	; (80028e4 <HAL_ADC_Init+0x274>)
 8002776:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002778:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 800277a:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800277c:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 800277e:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002780:	d072      	beq.n	8002868 <HAL_ADC_Init+0x1f8>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002782:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002784:	f023 030f 	bic.w	r3, r3, #15
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 800278a:	2000      	movs	r0, #0
 800278c:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800278e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002790:	f023 0303 	bic.w	r3, r3, #3
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6423      	str	r3, [r4, #64]	; 0x40
}
 800279a:	b003      	add	sp, #12
 800279c:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800279e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027a0:	f023 0312 	bic.w	r3, r3, #18
 80027a4:	f043 0310 	orr.w	r3, r3, #16
 80027a8:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80027b4:	e778      	b.n	80026a8 <HAL_ADC_Init+0x38>
    return HAL_ERROR;
 80027b6:	2001      	movs	r0, #1
}
 80027b8:	b003      	add	sp, #12
 80027ba:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 80027bc:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80027c0:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 80027c2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80027c6:	f7fe fbc3 	bl	8000f50 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	6893      	ldr	r3, [r2, #8]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	d511      	bpl.n	80027f6 <HAL_ADC_Init+0x186>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d2:	462b      	mov	r3, r5
 80027d4:	e75d      	b.n	8002692 <HAL_ADC_Init+0x22>
 80027d6:	4941      	ldr	r1, [pc, #260]	; (80028dc <HAL_ADC_Init+0x26c>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d8:	4d41      	ldr	r5, [pc, #260]	; (80028e0 <HAL_ADC_Init+0x270>)
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027da:	6893      	ldr	r3, [r2, #8]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d058      	beq.n	8002896 <HAL_ADC_Init+0x226>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027e4:	688b      	ldr	r3, [r1, #8]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d188      	bne.n	8002700 <HAL_ADC_Init+0x90>
 80027ee:	680b      	ldr	r3, [r1, #0]
 80027f0:	07db      	lsls	r3, r3, #31
 80027f2:	d48b      	bmi.n	800270c <HAL_ADC_Init+0x9c>
 80027f4:	e784      	b.n	8002700 <HAL_ADC_Init+0x90>
        tmp_hal_status = ADC_Disable(hadc);
 80027f6:	4620      	mov	r0, r4
 80027f8:	f7ff fec4 	bl	8002584 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        tmp_hal_status = ADC_Disable(hadc);
 80027fe:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002800:	06d0      	lsls	r0, r2, #27
 8002802:	f53f af45 	bmi.w	8002690 <HAL_ADC_Init+0x20>
 8002806:	2b00      	cmp	r3, #0
 8002808:	f47f af42 	bne.w	8002690 <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 800280c:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800280e:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8002810:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002814:	f021 0102 	bic.w	r1, r1, #2
 8002818:	f041 0102 	orr.w	r1, r1, #2
 800281c:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800281e:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002820:	4931      	ldr	r1, [pc, #196]	; (80028e8 <HAL_ADC_Init+0x278>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002822:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8002826:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002828:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800282a:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800282c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002830:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002832:	482e      	ldr	r0, [pc, #184]	; (80028ec <HAL_ADC_Init+0x27c>)
 8002834:	fba0 0101 	umull	r0, r1, r0, r1
 8002838:	0c89      	lsrs	r1, r1, #18
 800283a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800283e:	0049      	lsls	r1, r1, #1
 8002840:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8002842:	9901      	ldr	r1, [sp, #4]
 8002844:	2900      	cmp	r1, #0
 8002846:	f43f af24 	beq.w	8002692 <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800284a:	9901      	ldr	r1, [sp, #4]
 800284c:	3901      	subs	r1, #1
 800284e:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8002850:	9901      	ldr	r1, [sp, #4]
 8002852:	2900      	cmp	r1, #0
 8002854:	d1f9      	bne.n	800284a <HAL_ADC_Init+0x1da>
 8002856:	e71c      	b.n	8002692 <HAL_ADC_Init+0x22>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002858:	bb35      	cbnz	r5, 80028a8 <HAL_ADC_Init+0x238>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800285a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800285c:	3901      	subs	r1, #1
 800285e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002866:	e764      	b.n	8002732 <HAL_ADC_Init+0xc2>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002868:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800286a:	69e3      	ldr	r3, [r4, #28]
 800286c:	f021 010f 	bic.w	r1, r1, #15
 8002870:	3b01      	subs	r3, #1
 8002872:	430b      	orrs	r3, r1
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	e788      	b.n	800278a <HAL_ADC_Init+0x11a>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002878:	f5b1 7f30 	cmp.w	r1, #704	; 0x2c0
 800287c:	d01f      	beq.n	80028be <HAL_ADC_Init+0x24e>
 800287e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002882:	d024      	beq.n	80028ce <HAL_ADC_Init+0x25e>
 8002884:	f5b1 7fe0 	cmp.w	r1, #448	; 0x1c0
 8002888:	bf08      	it	eq
 800288a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 800288e:	e75c      	b.n	800274a <HAL_ADC_Init+0xda>
 8002890:	4910      	ldr	r1, [pc, #64]	; (80028d4 <HAL_ADC_Init+0x264>)
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002892:	4d17      	ldr	r5, [pc, #92]	; (80028f0 <HAL_ADC_Init+0x280>)
 8002894:	e7a1      	b.n	80027da <HAL_ADC_Init+0x16a>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002896:	6813      	ldr	r3, [r2, #0]
 8002898:	07db      	lsls	r3, r3, #31
 800289a:	f53f af37 	bmi.w	800270c <HAL_ADC_Init+0x9c>
 800289e:	e7a1      	b.n	80027e4 <HAL_ADC_Init+0x174>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028a0:	4d13      	ldr	r5, [pc, #76]	; (80028f0 <HAL_ADC_Init+0x280>)
 80028a2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80028a6:	e798      	b.n	80027da <HAL_ADC_Init+0x16a>
        ADC_STATE_CLR_SET(hadc->State,
 80028a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80028aa:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80028ae:	f041 0120 	orr.w	r1, r1, #32
 80028b2:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80028b6:	f041 0101 	orr.w	r1, r1, #1
 80028ba:	6461      	str	r1, [r4, #68]	; 0x44
 80028bc:	e739      	b.n	8002732 <HAL_ADC_Init+0xc2>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80028be:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80028c2:	e742      	b.n	800274a <HAL_ADC_Init+0xda>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80028c4:	6813      	ldr	r3, [r2, #0]
 80028c6:	07d9      	lsls	r1, r3, #31
 80028c8:	f53f af20 	bmi.w	800270c <HAL_ADC_Init+0x9c>
 80028cc:	e717      	b.n	80026fe <HAL_ADC_Init+0x8e>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80028ce:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80028d2:	e73a      	b.n	800274a <HAL_ADC_Init+0xda>
 80028d4:	50000100 	.word	0x50000100
 80028d8:	50000400 	.word	0x50000400
 80028dc:	50000500 	.word	0x50000500
 80028e0:	50000700 	.word	0x50000700
 80028e4:	fff0c007 	.word	0xfff0c007
 80028e8:	20000000 	.word	0x20000000
 80028ec:	431bde83 	.word	0x431bde83
 80028f0:	50000300 	.word	0x50000300

080028f4 <HAL_ADC_Start>:
{
 80028f4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028f6:	6803      	ldr	r3, [r0, #0]
 80028f8:	689d      	ldr	r5, [r3, #8]
 80028fa:	f015 0504 	ands.w	r5, r5, #4
 80028fe:	d12c      	bne.n	800295a <HAL_ADC_Start+0x66>
    __HAL_LOCK(hadc);
 8002900:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	4604      	mov	r4, r0
 8002908:	d027      	beq.n	800295a <HAL_ADC_Start+0x66>
 800290a:	2301      	movs	r3, #1
 800290c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8002910:	f7ff fe78 	bl	8002604 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002914:	b9f0      	cbnz	r0, 8002954 <HAL_ADC_Start+0x60>
      ADC_STATE_CLR_SET(hadc->State,
 8002916:	6c22      	ldr	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002918:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 800291a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 800292a:	6422      	str	r2, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800292c:	d017      	beq.n	800295e <HAL_ADC_Start+0x6a>
 800292e:	4a3a      	ldr	r2, [pc, #232]	; (8002a18 <HAL_ADC_Start+0x124>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d068      	beq.n	8002a06 <HAL_ADC_Start+0x112>
 8002934:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	06d5      	lsls	r5, r2, #27
 800293c:	d011      	beq.n	8002962 <HAL_ADC_Start+0x6e>
 800293e:	4937      	ldr	r1, [pc, #220]	; (8002a1c <HAL_ADC_Start+0x128>)
 8002940:	428b      	cmp	r3, r1
 8002942:	d00e      	beq.n	8002962 <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002944:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002946:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800294a:	6422      	str	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800294c:	68ca      	ldr	r2, [r1, #12]
 800294e:	0192      	lsls	r2, r2, #6
 8002950:	d514      	bpl.n	800297c <HAL_ADC_Start+0x88>
 8002952:	e00d      	b.n	8002970 <HAL_ADC_Start+0x7c>
      __HAL_UNLOCK(hadc);
 8002954:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 8002958:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 800295a:	2002      	movs	r0, #2
}
 800295c:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800295e:	4a30      	ldr	r2, [pc, #192]	; (8002a20 <HAL_ADC_Start+0x12c>)
 8002960:	6892      	ldr	r2, [r2, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002962:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002964:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002968:	6422      	str	r2, [r4, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	0191      	lsls	r1, r2, #6
 800296e:	d505      	bpl.n	800297c <HAL_ADC_Start+0x88>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002970:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002972:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002976:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800297a:	6422      	str	r2, [r4, #64]	; 0x40
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800297e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002982:	bf1c      	itt	ne
 8002984:	6c62      	ldrne	r2, [r4, #68]	; 0x44
 8002986:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 800298a:	6462      	str	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 800298c:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800298e:	221c      	movs	r2, #28
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
      __HAL_UNLOCK(hadc);
 8002994:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002998:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800299a:	d01a      	beq.n	80029d2 <HAL_ADC_Start+0xde>
 800299c:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_ADC_Start+0x124>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d022      	beq.n	80029e8 <HAL_ADC_Start+0xf4>
 80029a2:	f8d2 1608 	ldr.w	r1, [r2, #1544]	; 0x608
 80029a6:	06cd      	lsls	r5, r1, #27
 80029a8:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 80029ac:	d00c      	beq.n	80029c8 <HAL_ADC_Start+0xd4>
 80029ae:	6891      	ldr	r1, [r2, #8]
 80029b0:	f001 011f 	and.w	r1, r1, #31
 80029b4:	2905      	cmp	r1, #5
 80029b6:	d007      	beq.n	80029c8 <HAL_ADC_Start+0xd4>
 80029b8:	6892      	ldr	r2, [r2, #8]
 80029ba:	f002 021f 	and.w	r2, r2, #31
 80029be:	2a09      	cmp	r2, #9
 80029c0:	d002      	beq.n	80029c8 <HAL_ADC_Start+0xd4>
 80029c2:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <HAL_ADC_Start+0x128>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d1c7      	bne.n	8002958 <HAL_ADC_Start+0x64>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	f042 0204 	orr.w	r2, r2, #4
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <HAL_ADC_Start+0x12c>)
 80029d4:	6891      	ldr	r1, [r2, #8]
 80029d6:	06cc      	lsls	r4, r1, #27
 80029d8:	d0f6      	beq.n	80029c8 <HAL_ADC_Start+0xd4>
 80029da:	6891      	ldr	r1, [r2, #8]
 80029dc:	f001 011f 	and.w	r1, r1, #31
 80029e0:	2905      	cmp	r1, #5
 80029e2:	d0f1      	beq.n	80029c8 <HAL_ADC_Start+0xd4>
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	e7ef      	b.n	80029c8 <HAL_ADC_Start+0xd4>
 80029e8:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <HAL_ADC_Start+0x12c>)
 80029ea:	6891      	ldr	r1, [r2, #8]
 80029ec:	06c9      	lsls	r1, r1, #27
 80029ee:	d0eb      	beq.n	80029c8 <HAL_ADC_Start+0xd4>
 80029f0:	6891      	ldr	r1, [r2, #8]
 80029f2:	f001 011f 	and.w	r1, r1, #31
 80029f6:	2905      	cmp	r1, #5
 80029f8:	d0e6      	beq.n	80029c8 <HAL_ADC_Start+0xd4>
 80029fa:	6892      	ldr	r2, [r2, #8]
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2a09      	cmp	r2, #9
 8002a02:	d0e1      	beq.n	80029c8 <HAL_ADC_Start+0xd4>
}
 8002a04:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a06:	4a06      	ldr	r2, [pc, #24]	; (8002a20 <HAL_ADC_Start+0x12c>)
 8002a08:	6892      	ldr	r2, [r2, #8]
 8002a0a:	06d2      	lsls	r2, r2, #27
 8002a0c:	d0a9      	beq.n	8002962 <HAL_ADC_Start+0x6e>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a10:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002a14:	e797      	b.n	8002946 <HAL_ADC_Start+0x52>
 8002a16:	bf00      	nop
 8002a18:	50000100 	.word	0x50000100
 8002a1c:	50000400 	.word	0x50000400
 8002a20:	50000300 	.word	0x50000300

08002a24 <HAL_ADCEx_Calibration_Start>:
{
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002a26:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d040      	beq.n	8002ab0 <HAL_ADCEx_Calibration_Start+0x8c>
 8002a2e:	2701      	movs	r7, #1
 8002a30:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
  tmp_hal_status = ADC_Disable(hadc);
 8002a34:	4604      	mov	r4, r0
 8002a36:	460d      	mov	r5, r1
 8002a38:	f7ff fda4 	bl	8002584 <ADC_Disable>
  if (tmp_hal_status == HAL_OK)
 8002a3c:	4606      	mov	r6, r0
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	d131      	bne.n	8002aa6 <HAL_ADCEx_Calibration_Start+0x82>
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002a42:	6823      	ldr	r3, [r4, #0]
    hadc->State = HAL_ADC_STATE_READY;
 8002a44:	6427      	str	r7, [r4, #64]	; 0x40
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002a46:	689a      	ldr	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a48:	42bd      	cmp	r5, r7
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8002a4a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002a4e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a50:	d103      	bne.n	8002a5a <HAL_ADCEx_Calibration_Start+0x36>
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002a60:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8002a62:	f7ff fd77 	bl	8002554 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002a66:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();  
 8002a68:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	da14      	bge.n	8002a9a <HAL_ADCEx_Calibration_Start+0x76>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a70:	f7ff fd70 	bl	8002554 <HAL_GetTick>
 8002a74:	1b43      	subs	r3, r0, r5
 8002a76:	2b0a      	cmp	r3, #10
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002a78:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002a7a:	d9f6      	bls.n	8002a6a <HAL_ADCEx_Calibration_Start+0x46>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	2a00      	cmp	r2, #0
 8002a80:	daf3      	bge.n	8002a6a <HAL_ADCEx_Calibration_Start+0x46>
          ADC_STATE_CLR_SET(hadc->State,
 8002a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
          __HAL_UNLOCK(hadc);
 8002a84:	2200      	movs	r2, #0
          ADC_STATE_CLR_SET(hadc->State,
 8002a86:	f023 0312 	bic.w	r3, r3, #18
 8002a8a:	f043 0310 	orr.w	r3, r3, #16
          return HAL_ERROR;
 8002a8e:	2601      	movs	r6, #1
          __HAL_UNLOCK(hadc);
 8002a90:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          ADC_STATE_CLR_SET(hadc->State,
 8002a94:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002a96:	4630      	mov	r0, r6
 8002a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8002a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a9c:	f023 0303 	bic.w	r3, r3, #3
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002aac:	4630      	mov	r0, r6
 8002aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8002ab0:	2602      	movs	r6, #2
}
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab6:	bf00      	nop

08002ab8 <HAL_ADCEx_InjectedStart>:
{
 8002ab8:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002aba:	6803      	ldr	r3, [r0, #0]
 8002abc:	689d      	ldr	r5, [r3, #8]
 8002abe:	f015 0508 	ands.w	r5, r5, #8
 8002ac2:	d129      	bne.n	8002b18 <HAL_ADCEx_InjectedStart+0x60>
    __HAL_LOCK(hadc);
 8002ac4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	4604      	mov	r4, r0
 8002acc:	d024      	beq.n	8002b18 <HAL_ADCEx_InjectedStart+0x60>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    tmp_hal_status = ADC_Enable(hadc);
 8002ad4:	f7ff fd96 	bl	8002604 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002ad8:	b9d8      	cbnz	r0, 8002b12 <HAL_ADCEx_InjectedStart+0x5a>
      ADC_STATE_CLR_SET(hadc->State,
 8002ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002adc:	6822      	ldr	r2, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002ade:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002aea:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      ADC_STATE_CLR_SET(hadc->State,
 8002aee:	6423      	str	r3, [r4, #64]	; 0x40
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002af0:	d014      	beq.n	8002b1c <HAL_ADCEx_InjectedStart+0x64>
 8002af2:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_ADCEx_InjectedStart+0x104>)
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d042      	beq.n	8002b7e <HAL_ADCEx_InjectedStart+0xc6>
 8002af8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	06d9      	lsls	r1, r3, #27
 8002b00:	d00e      	beq.n	8002b20 <HAL_ADCEx_InjectedStart+0x68>
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_ADCEx_InjectedStart+0x108>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d00b      	beq.n	8002b20 <HAL_ADCEx_InjectedStart+0x68>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0e:	6423      	str	r3, [r4, #64]	; 0x40
 8002b10:	e00a      	b.n	8002b28 <HAL_ADCEx_InjectedStart+0x70>
      __HAL_UNLOCK(hadc);
 8002b12:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
}
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8002b18:	2002      	movs	r0, #2
}
 8002b1a:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b1c:	4b29      	ldr	r3, [pc, #164]	; (8002bc4 <HAL_ADCEx_InjectedStart+0x10c>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b26:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b2a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        ADC_CLEAR_ERRORCODE(hadc);
 8002b2e:	bf08      	it	eq
 8002b30:	6463      	streq	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8002b32:	2100      	movs	r1, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002b34:	2360      	movs	r3, #96	; 0x60
      __HAL_UNLOCK(hadc);
 8002b36:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8002b3a:	6013      	str	r3, [r2, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002b3c:	68d3      	ldr	r3, [r2, #12]
 8002b3e:	019b      	lsls	r3, r3, #6
 8002b40:	d4e9      	bmi.n	8002b16 <HAL_ADCEx_InjectedStart+0x5e>
 8002b42:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002b46:	d01f      	beq.n	8002b88 <HAL_ADCEx_InjectedStart+0xd0>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_ADCEx_InjectedStart+0x104>)
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d027      	beq.n	8002b9e <HAL_ADCEx_InjectedStart+0xe6>
 8002b4e:	f8d3 1608 	ldr.w	r1, [r3, #1544]	; 0x608
 8002b52:	06cd      	lsls	r5, r1, #27
 8002b54:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8002b58:	d00c      	beq.n	8002b74 <HAL_ADCEx_InjectedStart+0xbc>
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	f001 011f 	and.w	r1, r1, #31
 8002b60:	2906      	cmp	r1, #6
 8002b62:	d007      	beq.n	8002b74 <HAL_ADCEx_InjectedStart+0xbc>
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2b07      	cmp	r3, #7
 8002b6c:	d002      	beq.n	8002b74 <HAL_ADCEx_InjectedStart+0xbc>
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_ADCEx_InjectedStart+0x108>)
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d1d0      	bne.n	8002b16 <HAL_ADCEx_InjectedStart+0x5e>
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8002b74:	6893      	ldr	r3, [r2, #8]
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6093      	str	r3, [r2, #8]
}
 8002b7c:	bd38      	pop	{r3, r4, r5, pc}
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_ADCEx_InjectedStart+0x10c>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	06db      	lsls	r3, r3, #27
 8002b84:	d0cc      	beq.n	8002b20 <HAL_ADCEx_InjectedStart+0x68>
 8002b86:	e7bf      	b.n	8002b08 <HAL_ADCEx_InjectedStart+0x50>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002b88:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <HAL_ADCEx_InjectedStart+0x10c>)
 8002b8a:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002b8c:	06c9      	lsls	r1, r1, #27
 8002b8e:	d0f1      	beq.n	8002b74 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002b90:	6899      	ldr	r1, [r3, #8]
 8002b92:	f001 011f 	and.w	r1, r1, #31
 8002b96:	2906      	cmp	r1, #6
 8002b98:	d0ec      	beq.n	8002b74 <HAL_ADCEx_InjectedStart+0xbc>
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	e7ea      	b.n	8002b74 <HAL_ADCEx_InjectedStart+0xbc>
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <HAL_ADCEx_InjectedStart+0x10c>)
 8002ba0:	6899      	ldr	r1, [r3, #8]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 8002ba2:	06cc      	lsls	r4, r1, #27
 8002ba4:	d0e6      	beq.n	8002b74 <HAL_ADCEx_InjectedStart+0xbc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	f001 011f 	and.w	r1, r1, #31
 8002bac:	2906      	cmp	r1, #6
 8002bae:	d0e1      	beq.n	8002b74 <HAL_ADCEx_InjectedStart+0xbc>
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2b07      	cmp	r3, #7
 8002bb8:	d0dc      	beq.n	8002b74 <HAL_ADCEx_InjectedStart+0xbc>
}
 8002bba:	bd38      	pop	{r3, r4, r5, pc}
 8002bbc:	50000100 	.word	0x50000100
 8002bc0:	50000400 	.word	0x50000400
 8002bc4:	50000300 	.word	0x50000300

08002bc8 <HAL_ADCEx_InjectedGetValue>:
  switch(InjectedRank)
 8002bc8:	2903      	cmp	r1, #3
 8002bca:	d007      	beq.n	8002bdc <HAL_ADCEx_InjectedGetValue+0x14>
 8002bcc:	2904      	cmp	r1, #4
 8002bce:	d00d      	beq.n	8002bec <HAL_ADCEx_InjectedGetValue+0x24>
 8002bd0:	2902      	cmp	r1, #2
 8002bd2:	d007      	beq.n	8002be4 <HAL_ADCEx_InjectedGetValue+0x1c>
      tmp_jdr = hadc->Instance->JDR1;
 8002bd4:	6803      	ldr	r3, [r0, #0]
 8002bd6:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 8002bda:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8002bdc:	6803      	ldr	r3, [r0, #0]
 8002bde:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
      break;
 8002be2:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR2;
 8002be4:	6803      	ldr	r3, [r0, #0]
 8002be6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
      break;
 8002bea:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8002bec:	6803      	ldr	r3, [r0, #0]
 8002bee:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
      break;
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_ADC_ConfigChannel>:
{
 8002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002bf6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002bfa:	68cc      	ldr	r4, [r1, #12]
{
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002c00:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002c08:	f000 8106 	beq.w	8002e18 <HAL_ADC_ConfigChannel+0x224>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c0c:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c14:	6895      	ldr	r5, [r2, #8]
 8002c16:	076d      	lsls	r5, r5, #29
 8002c18:	d43a      	bmi.n	8002c90 <HAL_ADC_ConfigChannel+0x9c>
    if (sConfig->Rank < 5U)
 8002c1a:	6848      	ldr	r0, [r1, #4]
 8002c1c:	2804      	cmp	r0, #4
 8002c1e:	f200 808b 	bhi.w	8002d38 <HAL_ADC_ConfigChannel+0x144>
      MODIFY_REG(hadc->Instance->SQR1,
 8002c22:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c26:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8002c28:	680d      	ldr	r5, [r1, #0]
 8002c2a:	0040      	lsls	r0, r0, #1
 8002c2c:	f04f 0c1f 	mov.w	ip, #31
 8002c30:	fa0c fc00 	lsl.w	ip, ip, r0
 8002c34:	ea26 0c0c 	bic.w	ip, r6, ip
 8002c38:	fa05 f000 	lsl.w	r0, r5, r0
 8002c3c:	ea4c 0000 	orr.w	r0, ip, r0
 8002c40:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c42:	6890      	ldr	r0, [r2, #8]
 8002c44:	f010 0f0c 	tst.w	r0, #12
 8002c48:	d134      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c4a:	2d09      	cmp	r5, #9
 8002c4c:	f200 808b 	bhi.w	8002d66 <HAL_ADC_ConfigChannel+0x172>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c50:	6950      	ldr	r0, [r2, #20]
 8002c52:	688e      	ldr	r6, [r1, #8]
 8002c54:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8002c58:	f04f 0c07 	mov.w	ip, #7
 8002c5c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002c60:	fa06 f60e 	lsl.w	r6, r6, lr
 8002c64:	ea20 000c 	bic.w	r0, r0, ip
 8002c68:	4330      	orrs	r0, r6
 8002c6a:	6150      	str	r0, [r2, #20]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002c6c:	68d0      	ldr	r0, [r2, #12]
    switch (sConfig->OffsetNumber)
 8002c6e:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002c70:	694f      	ldr	r7, [r1, #20]
 8002c72:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002c76:	0040      	lsls	r0, r0, #1
    switch (sConfig->OffsetNumber)
 8002c78:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002c7a:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8002c7e:	2e03      	cmp	r6, #3
 8002c80:	f200 8146 	bhi.w	8002f10 <HAL_ADC_ConfigChannel+0x31c>
 8002c84:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002c88:	0108000d 	.word	0x0108000d
 8002c8c:	00f400fe 	.word	0x00f400fe
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c92:	f042 0220 	orr.w	r2, r2, #32
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002c9e:	b003      	add	sp, #12
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002ca2:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8002ca4:	4ea9      	ldr	r6, [pc, #676]	; (8002f4c <HAL_ADC_ConfigChannel+0x358>)
 8002ca6:	403e      	ands	r6, r7
 8002ca8:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002cac:	4330      	orrs	r0, r6
 8002cae:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002cb2:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cb4:	6890      	ldr	r0, [r2, #8]
 8002cb6:	f000 0003 	and.w	r0, r0, #3
 8002cba:	2801      	cmp	r0, #1
 8002cbc:	f000 80a7 	beq.w	8002e0e <HAL_ADC_ConfigChannel+0x21a>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002cc0:	2c01      	cmp	r4, #1
 8002cc2:	f000 80ac 	beq.w	8002e1e <HAL_ADC_ConfigChannel+0x22a>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002cc6:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8002cca:	2001      	movs	r0, #1
 8002ccc:	40a8      	lsls	r0, r5
 8002cce:	ea21 0100 	bic.w	r1, r1, r0
 8002cd2:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cd6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002cda:	d078      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x1da>
 8002cdc:	499c      	ldr	r1, [pc, #624]	; (8002f50 <HAL_ADC_ConfigChannel+0x35c>)
 8002cde:	428a      	cmp	r2, r1
 8002ce0:	d075      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x1da>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ce2:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ce4:	f501 61c0 	add.w	r1, r1, #1536	; 0x600
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ce8:	d074      	beq.n	8002dd4 <HAL_ADC_ConfigChannel+0x1e0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002cea:	2d11      	cmp	r5, #17
 8002cec:	f040 80ac 	bne.w	8002e48 <HAL_ADC_ConfigChannel+0x254>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002cf0:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002cf2:	01c4      	lsls	r4, r0, #7
 8002cf4:	d471      	bmi.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002cf6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002cfa:	d070      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x1ea>
 8002cfc:	4894      	ldr	r0, [pc, #592]	; (8002f50 <HAL_ADC_ConfigChannel+0x35c>)
 8002cfe:	4282      	cmp	r2, r0
 8002d00:	f000 80dd 	beq.w	8002ebe <HAL_ADC_ConfigChannel+0x2ca>
 8002d04:	4c93      	ldr	r4, [pc, #588]	; (8002f54 <HAL_ADC_ConfigChannel+0x360>)
 8002d06:	42a2      	cmp	r2, r4
 8002d08:	f000 80fc 	beq.w	8002f04 <HAL_ADC_ConfigChannel+0x310>
 8002d0c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002d10:	4282      	cmp	r2, r0
 8002d12:	d065      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d14:	6890      	ldr	r0, [r2, #8]
 8002d16:	f000 0003 	and.w	r0, r0, #3
 8002d1a:	2801      	cmp	r0, #1
 8002d1c:	f000 80f4 	beq.w	8002f08 <HAL_ADC_ConfigChannel+0x314>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002d20:	2d10      	cmp	r5, #16
 8002d22:	d05a      	beq.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d24:	2d11      	cmp	r5, #17
 8002d26:	d058      	beq.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d28:	2d12      	cmp	r5, #18
 8002d2a:	d156      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d2c:	688a      	ldr	r2, [r1, #8]
 8002d2e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d32:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002d34:	608a      	str	r2, [r1, #8]
 8002d36:	e7af      	b.n	8002c98 <HAL_ADC_ConfigChannel+0xa4>
    else if (sConfig->Rank < 10U)
 8002d38:	2809      	cmp	r0, #9
 8002d3a:	d925      	bls.n	8002d88 <HAL_ADC_ConfigChannel+0x194>
    else if (sConfig->Rank < 15U)
 8002d3c:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002d42:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8002d46:	f200 8085 	bhi.w	8002e54 <HAL_ADC_ConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d4a:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8002d4c:	680d      	ldr	r5, [r1, #0]
 8002d4e:	383c      	subs	r0, #60	; 0x3c
 8002d50:	f04f 0c1f 	mov.w	ip, #31
 8002d54:	fa0c fc00 	lsl.w	ip, ip, r0
 8002d58:	ea26 060c 	bic.w	r6, r6, ip
 8002d5c:	fa05 f000 	lsl.w	r0, r5, r0
 8002d60:	4330      	orrs	r0, r6
 8002d62:	6390      	str	r0, [r2, #56]	; 0x38
 8002d64:	e76d      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d66:	688f      	ldr	r7, [r1, #8]
 8002d68:	6990      	ldr	r0, [r2, #24]
 8002d6a:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8002d6e:	3e1e      	subs	r6, #30
 8002d70:	f04f 0e07 	mov.w	lr, #7
 8002d74:	fa07 fc06 	lsl.w	ip, r7, r6
 8002d78:	fa0e f606 	lsl.w	r6, lr, r6
 8002d7c:	ea20 0006 	bic.w	r0, r0, r6
 8002d80:	ea40 000c 	orr.w	r0, r0, ip
 8002d84:	6190      	str	r0, [r2, #24]
 8002d86:	e771      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x78>
      MODIFY_REG(hadc->Instance->SQR2,
 8002d88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002d8c:	0040      	lsls	r0, r0, #1
 8002d8e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8002d90:	680d      	ldr	r5, [r1, #0]
 8002d92:	381e      	subs	r0, #30
 8002d94:	f04f 0c1f 	mov.w	ip, #31
 8002d98:	fa0c fc00 	lsl.w	ip, ip, r0
 8002d9c:	ea26 060c 	bic.w	r6, r6, ip
 8002da0:	fa05 f000 	lsl.w	r0, r5, r0
 8002da4:	4330      	orrs	r0, r6
 8002da6:	6350      	str	r0, [r2, #52]	; 0x34
 8002da8:	e74b      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4e>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002daa:	1c6c      	adds	r4, r5, #1
 8002dac:	688e      	ldr	r6, [r1, #8]
 8002dae:	6950      	ldr	r0, [r2, #20]
 8002db0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002db4:	2107      	movs	r1, #7
 8002db6:	40a1      	lsls	r1, r4
 8002db8:	40a6      	lsls	r6, r4
 8002dba:	ea20 0101 	bic.w	r1, r0, r1
 8002dbe:	4331      	orrs	r1, r6
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dc0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 8002dc4:	6151      	str	r1, [r2, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dc6:	d008      	beq.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
 8002dc8:	4961      	ldr	r1, [pc, #388]	; (8002f50 <HAL_ADC_ConfigChannel+0x35c>)
 8002dca:	428a      	cmp	r2, r1
 8002dcc:	d105      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dce:	2d10      	cmp	r5, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dd0:	4961      	ldr	r1, [pc, #388]	; (8002f58 <HAL_ADC_ConfigChannel+0x364>)
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dd2:	d18a      	bne.n	8002cea <HAL_ADC_ConfigChannel+0xf6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002dd4:	6888      	ldr	r0, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dd6:	0206      	lsls	r6, r0, #8
 8002dd8:	d58d      	bpl.n	8002cf6 <HAL_ADC_ConfigChannel+0x102>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dda:	2000      	movs	r0, #0
 8002ddc:	e75c      	b.n	8002c98 <HAL_ADC_ConfigChannel+0xa4>
 8002dde:	4c5c      	ldr	r4, [pc, #368]	; (8002f50 <HAL_ADC_ConfigChannel+0x35c>)
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002de0:	6890      	ldr	r0, [r2, #8]
 8002de2:	f000 0003 	and.w	r0, r0, #3
 8002de6:	2801      	cmp	r0, #1
 8002de8:	d060      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x2b8>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002dea:	68a0      	ldr	r0, [r4, #8]
 8002dec:	f000 0003 	and.w	r0, r0, #3
 8002df0:	2801      	cmp	r0, #1
 8002df2:	d067      	beq.n	8002ec4 <HAL_ADC_ConfigChannel+0x2d0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002df4:	2d10      	cmp	r5, #16
 8002df6:	d069      	beq.n	8002ecc <HAL_ADC_ConfigChannel+0x2d8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002df8:	2d11      	cmp	r5, #17
 8002dfa:	d195      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x134>
 8002dfc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002e00:	d1eb      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002e02:	688a      	ldr	r2, [r1, #8]
 8002e04:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e08:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002e0a:	608a      	str	r2, [r1, #8]
 8002e0c:	e744      	b.n	8002c98 <HAL_ADC_ConfigChannel+0xa4>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e0e:	6810      	ldr	r0, [r2, #0]
 8002e10:	07c7      	lsls	r7, r0, #31
 8002e12:	f57f af55 	bpl.w	8002cc0 <HAL_ADC_ConfigChannel+0xcc>
 8002e16:	e7e0      	b.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
  __HAL_LOCK(hadc);
 8002e18:	2002      	movs	r0, #2
}
 8002e1a:	b003      	add	sp, #12
 8002e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e1e:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8002e22:	40ac      	lsls	r4, r5
 8002e24:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e26:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e28:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e2c:	d9bd      	bls.n	8002daa <HAL_ADC_ConfigChannel+0x1b6>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002e2e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8002e32:	688e      	ldr	r6, [r1, #8]
 8002e34:	6990      	ldr	r0, [r2, #24]
 8002e36:	3c1b      	subs	r4, #27
 8002e38:	2107      	movs	r1, #7
 8002e3a:	40a1      	lsls	r1, r4
 8002e3c:	40a6      	lsls	r6, r4
 8002e3e:	ea20 0101 	bic.w	r1, r0, r1
 8002e42:	4331      	orrs	r1, r6
 8002e44:	6191      	str	r1, [r2, #24]
 8002e46:	e746      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e48:	2d12      	cmp	r5, #18
 8002e4a:	d1c6      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e4c:	6888      	ldr	r0, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e4e:	0240      	lsls	r0, r0, #9
 8002e50:	d4c3      	bmi.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
 8002e52:	e750      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x102>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002e54:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8002e56:	680d      	ldr	r5, [r1, #0]
 8002e58:	385a      	subs	r0, #90	; 0x5a
 8002e5a:	f04f 0c1f 	mov.w	ip, #31
 8002e5e:	fa0c fc00 	lsl.w	ip, ip, r0
 8002e62:	ea26 060c 	bic.w	r6, r6, ip
 8002e66:	fa05 f000 	lsl.w	r0, r5, r0
 8002e6a:	4330      	orrs	r0, r6
 8002e6c:	63d0      	str	r0, [r2, #60]	; 0x3c
 8002e6e:	e6e8      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4e>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002e70:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8002e72:	4e36      	ldr	r6, [pc, #216]	; (8002f4c <HAL_ADC_ConfigChannel+0x358>)
 8002e74:	403e      	ands	r6, r7
 8002e76:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002e7a:	4330      	orrs	r0, r6
 8002e7c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002e80:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8002e82:	e717      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002e84:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8002e86:	4e31      	ldr	r6, [pc, #196]	; (8002f4c <HAL_ADC_ConfigChannel+0x358>)
 8002e88:	403e      	ands	r6, r7
 8002e8a:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002e8e:	4330      	orrs	r0, r6
 8002e90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002e94:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8002e96:	e70d      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002e98:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8002e9a:	4e2c      	ldr	r6, [pc, #176]	; (8002f4c <HAL_ADC_ConfigChannel+0x358>)
 8002e9c:	403e      	ands	r6, r7
 8002e9e:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002ea2:	4330      	orrs	r0, r6
 8002ea4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8002ea8:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8002eaa:	e703      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002eac:	6810      	ldr	r0, [r2, #0]
 8002eae:	07c6      	lsls	r6, r0, #31
 8002eb0:	d59b      	bpl.n	8002dea <HAL_ADC_ConfigChannel+0x1f6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eb4:	f042 0220 	orr.w	r2, r2, #32
        tmp_hal_status = HAL_ERROR;
 8002eb8:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002ebc:	e6ec      	b.n	8002c98 <HAL_ADC_ConfigChannel+0xa4>
 8002ebe:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8002ec2:	e78d      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x1ec>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002ec4:	6820      	ldr	r0, [r4, #0]
 8002ec6:	07c0      	lsls	r0, r0, #31
 8002ec8:	d4f3      	bmi.n	8002eb2 <HAL_ADC_ConfigChannel+0x2be>
 8002eca:	e793      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x200>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ecc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002ed0:	d183      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ed2:	4a22      	ldr	r2, [pc, #136]	; (8002f5c <HAL_ADC_ConfigChannel+0x368>)
 8002ed4:	4c22      	ldr	r4, [pc, #136]	; (8002f60 <HAL_ADC_ConfigChannel+0x36c>)
 8002ed6:	6812      	ldr	r2, [r2, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ed8:	6888      	ldr	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eda:	fba4 4202 	umull	r4, r2, r4, r2
 8002ede:	0c92      	lsrs	r2, r2, #18
 8002ee0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ee4:	0052      	lsls	r2, r2, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ee6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002eea:	6088      	str	r0, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eec:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002eee:	9a01      	ldr	r2, [sp, #4]
 8002ef0:	2a00      	cmp	r2, #0
 8002ef2:	f43f af72 	beq.w	8002dda <HAL_ADC_ConfigChannel+0x1e6>
            wait_loop_index--;
 8002ef6:	9a01      	ldr	r2, [sp, #4]
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8002efc:	9a01      	ldr	r2, [sp, #4]
 8002efe:	2a00      	cmp	r2, #0
 8002f00:	d1f9      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x302>
 8002f02:	e76a      	b.n	8002dda <HAL_ADC_ConfigChannel+0x1e6>
 8002f04:	4c17      	ldr	r4, [pc, #92]	; (8002f64 <HAL_ADC_ConfigChannel+0x370>)
 8002f06:	e76b      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x1ec>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	07d7      	lsls	r7, r2, #31
 8002f0c:	d4d1      	bmi.n	8002eb2 <HAL_ADC_ConfigChannel+0x2be>
 8002f0e:	e707      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x12c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f10:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002f12:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002f16:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8002f1a:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8002f1e:	d023      	beq.n	8002f68 <HAL_ADC_ConfigChannel+0x374>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f20:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002f22:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002f26:	4286      	cmp	r6, r0
 8002f28:	d023      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x37e>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f2a:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002f2c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002f30:	4286      	cmp	r6, r0
 8002f32:	d023      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x388>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f34:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002f36:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002f3a:	4286      	cmp	r6, r0
 8002f3c:	f47f aeba 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002f40:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8002f42:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002f46:	66d0      	str	r0, [r2, #108]	; 0x6c
 8002f48:	e6b4      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0xc0>
 8002f4a:	bf00      	nop
 8002f4c:	83fff000 	.word	0x83fff000
 8002f50:	50000100 	.word	0x50000100
 8002f54:	50000400 	.word	0x50000400
 8002f58:	50000300 	.word	0x50000300
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	431bde83 	.word	0x431bde83
 8002f64:	50000500 	.word	0x50000500
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f68:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8002f6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002f6e:	6610      	str	r0, [r2, #96]	; 0x60
 8002f70:	e7d6      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x32c>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002f72:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8002f74:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002f78:	6650      	str	r0, [r2, #100]	; 0x64
 8002f7a:	e7d6      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x336>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f7c:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8002f7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002f82:	6690      	str	r0, [r2, #104]	; 0x68
 8002f84:	e7d6      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x340>
 8002f86:	bf00      	nop

08002f88 <HAL_ADCEx_InjectedConfigChannel>:
{
 8002f88:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002f8a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f8e:	6905      	ldr	r5, [r0, #16]
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f90:	68cc      	ldr	r4, [r1, #12]
{
 8002f92:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002f94:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002f96:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8002f98:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002f9a:	f000 81ac 	beq.w	80032f6 <HAL_ADCEx_InjectedConfigChannel+0x36e>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002fa4:	b365      	cbz	r5, 8003000 <HAL_ADCEx_InjectedConfigChannel+0x78>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8002fa6:	698f      	ldr	r7, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002fa8:	429f      	cmp	r7, r3
 8002faa:	d029      	beq.n	8003000 <HAL_ADCEx_InjectedConfigChannel+0x78>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002fac:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8002fae:	2d00      	cmp	r5, #0
 8002fb0:	f040 812b 	bne.w	800320a <HAL_ADCEx_InjectedConfigChannel+0x282>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002fb4:	6a0d      	ldr	r5, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002fb6:	64c7      	str	r7, [r0, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002fb8:	2d01      	cmp	r5, #1
 8002fba:	f000 81f1 	beq.w	80033a0 <HAL_ADCEx_InjectedConfigChannel+0x418>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002fbe:	6803      	ldr	r3, [r0, #0]
 8002fc0:	4aab      	ldr	r2, [pc, #684]	; (8003270 <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	f107 37ff 	add.w	r7, r7, #4294967295
 8002fc8:	f000 81e2 	beq.w	8003390 <HAL_ADCEx_InjectedConfigChannel+0x408>
 8002fcc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	f000 81dd 	beq.w	8003390 <HAL_ADCEx_InjectedConfigChannel+0x408>
 8002fd6:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002fd8:	433a      	orrs	r2, r7
 8002fda:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002fdc:	684d      	ldr	r5, [r1, #4]
 8002fde:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8002fe0:	64c7      	str	r7, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fe6:	006d      	lsls	r5, r5, #1
 8002fe8:	3502      	adds	r5, #2
 8002fea:	271f      	movs	r7, #31
 8002fec:	40ae      	lsls	r6, r5
 8002fee:	fa07 f505 	lsl.w	r5, r7, r5
 8002ff2:	ea22 0205 	bic.w	r2, r2, r5
 8002ff6:	4332      	orrs	r2, r6
 8002ff8:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffa:	f04f 0c00 	mov.w	ip, #0
 8002ffe:	e00a      	b.n	8003016 <HAL_ADCEx_InjectedConfigChannel+0x8e>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003000:	684b      	ldr	r3, [r1, #4]
 8003002:	2b01      	cmp	r3, #1
 8003004:	f000 80e5 	beq.w	80031d2 <HAL_ADCEx_InjectedConfigChannel+0x24a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003008:	6c02      	ldr	r2, [r0, #64]	; 0x40
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800300a:	6803      	ldr	r3, [r0, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300c:	f042 0220 	orr.w	r2, r2, #32
 8003010:	6402      	str	r2, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8003012:	f04f 0c01 	mov.w	ip, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	0712      	lsls	r2, r2, #28
 800301a:	d40d      	bmi.n	8003038 <HAL_ADCEx_InjectedConfigChannel+0xb0>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800301c:	7f4a      	ldrb	r2, [r1, #29]
 800301e:	2a00      	cmp	r2, #0
 8003020:	f040 80c0 	bne.w	80031a4 <HAL_ADCEx_InjectedConfigChannel+0x21c>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003024:	7f0a      	ldrb	r2, [r1, #28]
 8003026:	68dd      	ldr	r5, [r3, #12]
 8003028:	7f8e      	ldrb	r6, [r1, #30]
 800302a:	0512      	lsls	r2, r2, #20
 800302c:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003030:	ea42 5246 	orr.w	r2, r2, r6, lsl #21
 8003034:	432a      	orrs	r2, r5
 8003036:	60da      	str	r2, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	f012 0f0c 	tst.w	r2, #12
 800303e:	d13a      	bne.n	80030b6 <HAL_ADCEx_InjectedConfigChannel+0x12e>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003040:	6a0a      	ldr	r2, [r1, #32]
 8003042:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800304a:	f000 814f 	beq.w	80032ec <HAL_ADCEx_InjectedConfigChannel+0x364>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800304e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003050:	7f4a      	ldrb	r2, [r1, #29]
 8003052:	2a01      	cmp	r2, #1
 8003054:	f000 812c 	beq.w	80032b0 <HAL_ADCEx_InjectedConfigChannel+0x328>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003058:	680e      	ldr	r6, [r1, #0]
 800305a:	2e09      	cmp	r6, #9
 800305c:	f240 8094 	bls.w	8003188 <HAL_ADCEx_InjectedConfigChannel+0x200>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003060:	688d      	ldr	r5, [r1, #8]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
 8003068:	f1ae 0e1e 	sub.w	lr, lr, #30
 800306c:	2707      	movs	r7, #7
 800306e:	fa05 f50e 	lsl.w	r5, r5, lr
 8003072:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003076:	ea22 020e 	bic.w	r2, r2, lr
 800307a:	432a      	orrs	r2, r5
 800307c:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800307e:	68da      	ldr	r2, [r3, #12]
    switch (sConfigInjected->InjectedOffsetNumber)
 8003080:	690d      	ldr	r5, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003082:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8003086:	694a      	ldr	r2, [r1, #20]
 8003088:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    switch (sConfigInjected->InjectedOffsetNumber)
 800308c:	3d01      	subs	r5, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800308e:	fa02 f20e 	lsl.w	r2, r2, lr
    switch (sConfigInjected->InjectedOffsetNumber)
 8003092:	2d03      	cmp	r5, #3
 8003094:	f200 8190 	bhi.w	80033b8 <HAL_ADCEx_InjectedConfigChannel+0x430>
 8003098:	e8df f015 	tbh	[pc, r5, lsl #1]
 800309c:	01000004 	.word	0x01000004
 80030a0:	00e000f6 	.word	0x00e000f6
      MODIFY_REG(hadc->Instance->OFR1                               ,
 80030a4:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80030a8:	4d72      	ldr	r5, [pc, #456]	; (8003274 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 80030aa:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 80030ac:	4035      	ands	r5, r6
 80030ae:	432a      	orrs	r2, r5
 80030b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030b4:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	f002 0203 	and.w	r2, r2, #3
 80030bc:	2a01      	cmp	r2, #1
 80030be:	d041      	beq.n	8003144 <HAL_ADCEx_InjectedConfigChannel+0x1bc>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030c0:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80030c2:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030c4:	d044      	beq.n	8003150 <HAL_ADCEx_InjectedConfigChannel+0x1c8>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80030c6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80030ca:	2401      	movs	r4, #1
 80030cc:	4094      	lsls	r4, r2
 80030ce:	ea21 0104 	bic.w	r1, r1, r4
 80030d2:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030da:	d02c      	beq.n	8003136 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
 80030dc:	4966      	ldr	r1, [pc, #408]	; (8003278 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 80030de:	428b      	cmp	r3, r1
 80030e0:	d029      	beq.n	8003136 <HAL_ADCEx_InjectedConfigChannel+0x1ae>
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80030e2:	2a10      	cmp	r2, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e4:	4965      	ldr	r1, [pc, #404]	; (800327c <HAL_ADCEx_InjectedConfigChannel+0x2f4>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80030e6:	d029      	beq.n	800313c <HAL_ADCEx_InjectedConfigChannel+0x1b4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030e8:	2a11      	cmp	r2, #17
 80030ea:	d16c      	bne.n	80031c6 <HAL_ADCEx_InjectedConfigChannel+0x23e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030ec:	688c      	ldr	r4, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80030ee:	01e5      	lsls	r5, r4, #7
 80030f0:	d41b      	bmi.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80030f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f6:	f000 8103 	beq.w	8003300 <HAL_ADCEx_InjectedConfigChannel+0x378>
 80030fa:	4c5f      	ldr	r4, [pc, #380]	; (8003278 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 80030fc:	42a3      	cmp	r3, r4
 80030fe:	f000 80dd 	beq.w	80032bc <HAL_ADCEx_InjectedConfigChannel+0x334>
 8003102:	4d5b      	ldr	r5, [pc, #364]	; (8003270 <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 8003104:	42ab      	cmp	r3, r5
 8003106:	f000 814f 	beq.w	80033a8 <HAL_ADCEx_InjectedConfigChannel+0x420>
 800310a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800310e:	42a3      	cmp	r3, r4
 8003110:	f000 80d6 	beq.w	80032c0 <HAL_ADCEx_InjectedConfigChannel+0x338>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003114:	689c      	ldr	r4, [r3, #8]
 8003116:	f004 0403 	and.w	r4, r4, #3
 800311a:	2c01      	cmp	r4, #1
 800311c:	f000 8132 	beq.w	8003384 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003120:	2a10      	cmp	r2, #16
 8003122:	d002      	beq.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003124:	2a11      	cmp	r2, #17
 8003126:	f040 80d9 	bne.w	80032dc <HAL_ADCEx_InjectedConfigChannel+0x354>
  __HAL_UNLOCK(hadc);
 800312a:	2300      	movs	r3, #0
 800312c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003130:	4660      	mov	r0, ip
 8003132:	b003      	add	sp, #12
 8003134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003136:	2a10      	cmp	r2, #16
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003138:	4951      	ldr	r1, [pc, #324]	; (8003280 <HAL_ADCEx_InjectedConfigChannel+0x2f8>)
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800313a:	d1d5      	bne.n	80030e8 <HAL_ADCEx_InjectedConfigChannel+0x160>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800313c:	688c      	ldr	r4, [r1, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800313e:	0226      	lsls	r6, r4, #8
 8003140:	d5d7      	bpl.n	80030f2 <HAL_ADCEx_InjectedConfigChannel+0x16a>
 8003142:	e7f2      	b.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	07d7      	lsls	r7, r2, #31
 8003148:	d4ef      	bmi.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 800314a:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800314c:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 800314e:	d1ba      	bne.n	80030c6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003150:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8003154:	4094      	lsls	r4, r2
 8003156:	432c      	orrs	r4, r5
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003158:	2a09      	cmp	r2, #9
        MODIFY_REG(hadc->Instance->SMPR2,
 800315a:	688d      	ldr	r5, [r1, #8]
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 800315c:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003160:	d86f      	bhi.n	8003242 <HAL_ADCEx_InjectedConfigChannel+0x2ba>
        MODIFY_REG(hadc->Instance->SMPR1,
 8003162:	1c54      	adds	r4, r2, #1
 8003164:	6959      	ldr	r1, [r3, #20]
 8003166:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800316a:	2607      	movs	r6, #7
 800316c:	40a5      	lsls	r5, r4
 800316e:	fa06 f404 	lsl.w	r4, r6, r4
 8003172:	ea21 0104 	bic.w	r1, r1, r4
 8003176:	4329      	orrs	r1, r5
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
        MODIFY_REG(hadc->Instance->SMPR1,
 800317c:	6159      	str	r1, [r3, #20]
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800317e:	d0d4      	beq.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 8003180:	493d      	ldr	r1, [pc, #244]	; (8003278 <HAL_ADCEx_InjectedConfigChannel+0x2f0>)
 8003182:	428b      	cmp	r3, r1
 8003184:	d1ad      	bne.n	80030e2 <HAL_ADCEx_InjectedConfigChannel+0x15a>
 8003186:	e7d0      	b.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	688d      	ldr	r5, [r1, #8]
 800318c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8003190:	f04f 0e07 	mov.w	lr, #7
 8003194:	fa0e fe07 	lsl.w	lr, lr, r7
 8003198:	40bd      	lsls	r5, r7
 800319a:	ea22 020e 	bic.w	r2, r2, lr
 800319e:	432a      	orrs	r2, r5
 80031a0:	615a      	str	r2, [r3, #20]
 80031a2:	e76c      	b.n	800307e <HAL_ADCEx_InjectedConfigChannel+0xf6>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	7f8d      	ldrb	r5, [r1, #30]
 80031a8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80031ac:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 80031b0:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80031b2:	7f0a      	ldrb	r2, [r1, #28]
 80031b4:	2a01      	cmp	r2, #1
 80031b6:	f47f af3f 	bne.w	8003038 <HAL_ADCEx_InjectedConfigChannel+0xb0>
        tmp_hal_status = HAL_ERROR;
 80031ba:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80031be:	f042 0220 	orr.w	r2, r2, #32
 80031c2:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80031c4:	e738      	b.n	8003038 <HAL_ADCEx_InjectedConfigChannel+0xb0>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80031c6:	2a12      	cmp	r2, #18
 80031c8:	d1af      	bne.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80031ca:	688c      	ldr	r4, [r1, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80031cc:	0264      	lsls	r4, r4, #9
 80031ce:	d4ac      	bmi.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
 80031d0:	e78f      	b.n	80030f2 <HAL_ADCEx_InjectedConfigChannel+0x16a>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031d2:	6a0d      	ldr	r5, [r1, #32]
 80031d4:	2d01      	cmp	r5, #1
 80031d6:	f000 809f 	beq.w	8003318 <HAL_ADCEx_InjectedConfigChannel+0x390>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80031da:	680b      	ldr	r3, [r1, #0]
 80031dc:	4e24      	ldr	r6, [pc, #144]	; (8003270 <HAL_ADCEx_InjectedConfigChannel+0x2e8>)
 80031de:	021a      	lsls	r2, r3, #8
 80031e0:	6803      	ldr	r3, [r0, #0]
 80031e2:	42b3      	cmp	r3, r6
 80031e4:	f000 809c 	beq.w	8003320 <HAL_ADCEx_InjectedConfigChannel+0x398>
 80031e8:	f506 7680 	add.w	r6, r6, #256	; 0x100
 80031ec:	42b3      	cmp	r3, r6
 80031ee:	f000 8097 	beq.w	8003320 <HAL_ADCEx_InjectedConfigChannel+0x398>
 80031f2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80031f4:	4332      	orrs	r2, r6
 80031f6:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->JSQR           ,
 80031f8:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80031fa:	4e22      	ldr	r6, [pc, #136]	; (8003284 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 80031fc:	4035      	ands	r5, r6
 80031fe:	4315      	orrs	r5, r2
 8003200:	64dd      	str	r5, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003202:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003204:	f04f 0c00 	mov.w	ip, #0
 8003208:	e705      	b.n	8003016 <HAL_ADCEx_InjectedConfigChannel+0x8e>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800320a:	684b      	ldr	r3, [r1, #4]
 800320c:	6c86      	ldr	r6, [r0, #72]	; 0x48
 800320e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      hadc->InjectionConfig.ChannelCount --;
 8003212:	1e6f      	subs	r7, r5, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	680d      	ldr	r5, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8003218:	64c7      	str	r7, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800321a:	3302      	adds	r3, #2
 800321c:	fa05 fc03 	lsl.w	ip, r5, r3
 8003220:	251f      	movs	r5, #31
 8003222:	409d      	lsls	r5, r3
 8003224:	ea26 0505 	bic.w	r5, r6, r5
 8003228:	ea45 050c 	orr.w	r5, r5, ip
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800322c:	6803      	ldr	r3, [r0, #0]
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800322e:	6485      	str	r5, [r0, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8003230:	2f00      	cmp	r7, #0
 8003232:	d1e7      	bne.n	8003204 <HAL_ADCEx_InjectedConfigChannel+0x27c>
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003236:	4e13      	ldr	r6, [pc, #76]	; (8003284 <HAL_ADCEx_InjectedConfigChannel+0x2fc>)
 8003238:	4032      	ands	r2, r6
 800323a:	4315      	orrs	r5, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323c:	46bc      	mov	ip, r7
        MODIFY_REG(hadc->Instance->JSQR              ,
 800323e:	64dd      	str	r5, [r3, #76]	; 0x4c
 8003240:	e6e9      	b.n	8003016 <HAL_ADCEx_InjectedConfigChannel+0x8e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003242:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8003246:	6999      	ldr	r1, [r3, #24]
 8003248:	3c1b      	subs	r4, #27
 800324a:	2607      	movs	r6, #7
 800324c:	40a5      	lsls	r5, r4
 800324e:	fa06 f404 	lsl.w	r4, r6, r4
 8003252:	ea21 0104 	bic.w	r1, r1, r4
 8003256:	4329      	orrs	r1, r5
 8003258:	6199      	str	r1, [r3, #24]
 800325a:	e73c      	b.n	80030d6 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 800325c:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8003260:	4d04      	ldr	r5, [pc, #16]	; (8003274 <HAL_ADCEx_InjectedConfigChannel+0x2ec>)
 8003262:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8003264:	4035      	ands	r5, r6
 8003266:	432a      	orrs	r2, r5
 8003268:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800326c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800326e:	e722      	b.n	80030b6 <HAL_ADCEx_InjectedConfigChannel+0x12e>
 8003270:	50000400 	.word	0x50000400
 8003274:	83fff000 	.word	0x83fff000
 8003278:	50000100 	.word	0x50000100
 800327c:	50000700 	.word	0x50000700
 8003280:	50000300 	.word	0x50000300
 8003284:	82082000 	.word	0x82082000
      MODIFY_REG(hadc->Instance->OFR3                               ,
 8003288:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 800328c:	4d60      	ldr	r5, [pc, #384]	; (8003410 <HAL_ADCEx_InjectedConfigChannel+0x488>)
 800328e:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8003290:	4035      	ands	r5, r6
 8003292:	432a      	orrs	r2, r5
 8003294:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003298:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800329a:	e70c      	b.n	80030b6 <HAL_ADCEx_InjectedConfigChannel+0x12e>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 800329c:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80032a0:	4d5b      	ldr	r5, [pc, #364]	; (8003410 <HAL_ADCEx_InjectedConfigChannel+0x488>)
 80032a2:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 80032a4:	4035      	ands	r5, r6
 80032a6:	432a      	orrs	r2, r5
 80032a8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80032ac:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80032ae:	e702      	b.n	80030b6 <HAL_ADCEx_InjectedConfigChannel+0x12e>
        tmp_hal_status = HAL_ERROR;
 80032b0:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80032b4:	f042 0220 	orr.w	r2, r2, #32
 80032b8:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80032ba:	e6cd      	b.n	8003058 <HAL_ADCEx_InjectedConfigChannel+0xd0>
 80032bc:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032c0:	689c      	ldr	r4, [r3, #8]
 80032c2:	f004 0403 	and.w	r4, r4, #3
 80032c6:	2c01      	cmp	r4, #1
 80032c8:	d01c      	beq.n	8003304 <HAL_ADCEx_InjectedConfigChannel+0x37c>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80032ca:	68ac      	ldr	r4, [r5, #8]
 80032cc:	f004 0403 	and.w	r4, r4, #3
 80032d0:	2c01      	cmp	r4, #1
 80032d2:	d02d      	beq.n	8003330 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032d4:	2a10      	cmp	r2, #16
 80032d6:	d02f      	beq.n	8003338 <HAL_ADCEx_InjectedConfigChannel+0x3b0>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80032d8:	2a11      	cmp	r2, #17
 80032da:	d04a      	beq.n	8003372 <HAL_ADCEx_InjectedConfigChannel+0x3ea>
        else if (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80032dc:	2a12      	cmp	r2, #18
 80032de:	f47f af24 	bne.w	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80032e2:	688b      	ldr	r3, [r1, #8]
 80032e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032e8:	608b      	str	r3, [r1, #8]
 80032ea:	e71e      	b.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 80032ec:	7f4d      	ldrb	r5, [r1, #29]
 80032ee:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 80032f2:	60da      	str	r2, [r3, #12]
 80032f4:	e6b0      	b.n	8003058 <HAL_ADCEx_InjectedConfigChannel+0xd0>
  __HAL_LOCK(hadc);
 80032f6:	f04f 0c02 	mov.w	ip, #2
}
 80032fa:	4660      	mov	r0, ip
 80032fc:	b003      	add	sp, #12
 80032fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003300:	4d44      	ldr	r5, [pc, #272]	; (8003414 <HAL_ADCEx_InjectedConfigChannel+0x48c>)
 8003302:	e7dd      	b.n	80032c0 <HAL_ADCEx_InjectedConfigChannel+0x338>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003304:	681c      	ldr	r4, [r3, #0]
 8003306:	07e6      	lsls	r6, r4, #31
 8003308:	d5df      	bpl.n	80032ca <HAL_ADCEx_InjectedConfigChannel+0x342>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800330a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800330c:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8003310:	f04f 0c01 	mov.w	ip, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003314:	6403      	str	r3, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003316:	e708      	b.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003318:	680a      	ldr	r2, [r1, #0]
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 800331a:	6803      	ldr	r3, [r0, #0]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 800331c:	0212      	lsls	r2, r2, #8
 800331e:	e76b      	b.n	80031f8 <HAL_ADCEx_InjectedConfigChannel+0x270>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003320:	2d08      	cmp	r5, #8
 8003322:	d033      	beq.n	800338c <HAL_ADCEx_InjectedConfigChannel+0x404>
 8003324:	2d14      	cmp	r5, #20
 8003326:	d043      	beq.n	80033b0 <HAL_ADCEx_InjectedConfigChannel+0x428>
 8003328:	2d1c      	cmp	r5, #28
 800332a:	bf08      	it	eq
 800332c:	2510      	moveq	r5, #16
 800332e:	e760      	b.n	80031f2 <HAL_ADCEx_InjectedConfigChannel+0x26a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003330:	682c      	ldr	r4, [r5, #0]
 8003332:	07e4      	lsls	r4, r4, #31
 8003334:	d4e9      	bmi.n	800330a <HAL_ADCEx_InjectedConfigChannel+0x382>
 8003336:	e7cd      	b.n	80032d4 <HAL_ADCEx_InjectedConfigChannel+0x34c>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333c:	f47f aef5 	bne.w	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_ADCEx_InjectedConfigChannel+0x490>)
 8003342:	4c36      	ldr	r4, [pc, #216]	; (800341c <HAL_ADCEx_InjectedConfigChannel+0x494>)
 8003344:	681b      	ldr	r3, [r3, #0]
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003346:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003348:	fba4 4303 	umull	r4, r3, r4, r3
 800334c:	0c9b      	lsrs	r3, r3, #18
 800334e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003352:	005b      	lsls	r3, r3, #1
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003354:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003358:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800335a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800335c:	9b01      	ldr	r3, [sp, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f43f aee3 	beq.w	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
            wait_loop_index--;
 8003364:	9b01      	ldr	r3, [sp, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800336a:	9b01      	ldr	r3, [sp, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f9      	bne.n	8003364 <HAL_ADCEx_InjectedConfigChannel+0x3dc>
 8003370:	e6db      	b.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003372:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003376:	f47f aed8 	bne.w	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800337a:	688b      	ldr	r3, [r1, #8]
 800337c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003380:	608b      	str	r3, [r1, #8]
 8003382:	e6d2      	b.n	800312a <HAL_ADCEx_InjectedConfigChannel+0x1a2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	07df      	lsls	r7, r3, #31
 8003388:	d4bf      	bmi.n	800330a <HAL_ADCEx_InjectedConfigChannel+0x382>
 800338a:	e6c9      	b.n	8003120 <HAL_ADCEx_InjectedConfigChannel+0x198>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800338c:	2534      	movs	r5, #52	; 0x34
 800338e:	e730      	b.n	80031f2 <HAL_ADCEx_InjectedConfigChannel+0x26a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003390:	2d08      	cmp	r5, #8
 8003392:	d00b      	beq.n	80033ac <HAL_ADCEx_InjectedConfigChannel+0x424>
 8003394:	2d14      	cmp	r5, #20
 8003396:	d00d      	beq.n	80033b4 <HAL_ADCEx_InjectedConfigChannel+0x42c>
 8003398:	2d1c      	cmp	r5, #28
 800339a:	bf08      	it	eq
 800339c:	2510      	moveq	r5, #16
 800339e:	e61a      	b.n	8002fd6 <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 80033a0:	1e7a      	subs	r2, r7, #1
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80033a2:	6803      	ldr	r3, [r0, #0]
 80033a4:	4617      	mov	r7, r2
 80033a6:	e619      	b.n	8002fdc <HAL_ADCEx_InjectedConfigChannel+0x54>
 80033a8:	4d1d      	ldr	r5, [pc, #116]	; (8003420 <HAL_ADCEx_InjectedConfigChannel+0x498>)
 80033aa:	e789      	b.n	80032c0 <HAL_ADCEx_InjectedConfigChannel+0x338>
 80033ac:	2534      	movs	r5, #52	; 0x34
 80033ae:	e612      	b.n	8002fd6 <HAL_ADCEx_InjectedConfigChannel+0x4e>
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80033b0:	251c      	movs	r5, #28
 80033b2:	e71e      	b.n	80031f2 <HAL_ADCEx_InjectedConfigChannel+0x26a>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 80033b4:	251c      	movs	r5, #28
 80033b6:	e60e      	b.n	8002fd6 <HAL_ADCEx_InjectedConfigChannel+0x4e>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80033b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033ba:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80033be:	ebb2 6f86 	cmp.w	r2, r6, lsl #26
 80033c2:	ea4f 6586 	mov.w	r5, r6, lsl #26
 80033c6:	d014      	beq.n	80033f2 <HAL_ADCEx_InjectedConfigChannel+0x46a>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80033c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033ca:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80033ce:	4295      	cmp	r5, r2
 80033d0:	d014      	beq.n	80033fc <HAL_ADCEx_InjectedConfigChannel+0x474>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80033d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033d4:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80033d8:	4295      	cmp	r5, r2
 80033da:	d014      	beq.n	8003406 <HAL_ADCEx_InjectedConfigChannel+0x47e>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 80033dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033de:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80033e2:	4295      	cmp	r5, r2
 80033e4:	f47f ae67 	bne.w	80030b6 <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80033e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80033f0:	e661      	b.n	80030b6 <HAL_ADCEx_InjectedConfigChannel+0x12e>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80033f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033f8:	661a      	str	r2, [r3, #96]	; 0x60
 80033fa:	e7e5      	b.n	80033c8 <HAL_ADCEx_InjectedConfigChannel+0x440>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80033fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003402:	665a      	str	r2, [r3, #100]	; 0x64
 8003404:	e7e5      	b.n	80033d2 <HAL_ADCEx_InjectedConfigChannel+0x44a>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003406:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003408:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800340c:	669a      	str	r2, [r3, #104]	; 0x68
 800340e:	e7e5      	b.n	80033dc <HAL_ADCEx_InjectedConfigChannel+0x454>
 8003410:	83fff000 	.word	0x83fff000
 8003414:	50000100 	.word	0x50000100
 8003418:	20000000 	.word	0x20000000
 800341c:	431bde83 	.word	0x431bde83
 8003420:	50000500 	.word	0x50000500

08003424 <HAL_ADCEx_MultiModeConfigChannel>:
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003424:	6803      	ldr	r3, [r0, #0]
 8003426:	4a45      	ldr	r2, [pc, #276]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 8003428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800342c:	b4f0      	push	{r4, r5, r6, r7}
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800342e:	680d      	ldr	r5, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003430:	d00e      	beq.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8003432:	4293      	cmp	r3, r2
 8003434:	d00a      	beq.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x28>
 8003436:	f502 7240 	add.w	r2, r2, #768	; 0x300
 800343a:	4293      	cmp	r3, r2
 800343c:	d04b      	beq.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
 800343e:	4c40      	ldr	r4, [pc, #256]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 8003440:	42a3      	cmp	r3, r4
 8003442:	d005      	beq.n	8003450 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
    return HAL_ERROR;
 8003444:	2201      	movs	r2, #1
} 
 8003446:	4610      	mov	r0, r2
 8003448:	bcf0      	pop	{r4, r5, r6, r7}
 800344a:	4770      	bx	lr
 800344c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8003450:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 8003454:	f1bc 0f01 	cmp.w	ip, #1
 8003458:	d043      	beq.n	80034e2 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 800345a:	2401      	movs	r4, #1
 800345c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003460:	689c      	ldr	r4, [r3, #8]
 8003462:	0766      	lsls	r6, r4, #29
 8003464:	d50a      	bpl.n	800347c <HAL_ADCEx_MultiModeConfigChannel+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003466:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003468:	f043 0320 	orr.w	r3, r3, #32
    tmp_hal_status = HAL_ERROR;
 800346c:	2201      	movs	r2, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800346e:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003470:	2300      	movs	r3, #0
 8003472:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
} 
 8003476:	bcf0      	pop	{r4, r5, r6, r7}
 8003478:	4610      	mov	r0, r2
 800347a:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800347c:	6894      	ldr	r4, [r2, #8]
 800347e:	0764      	lsls	r4, r4, #29
 8003480:	d4f1      	bmi.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0x42>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003486:	d046      	beq.n	8003516 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003488:	4f2c      	ldr	r7, [pc, #176]	; (800353c <HAL_ADCEx_MultiModeConfigChannel+0x118>)
 800348a:	4e2e      	ldr	r6, [pc, #184]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 800348c:	4c2e      	ldr	r4, [pc, #184]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0x124>)
 800348e:	42bb      	cmp	r3, r7
 8003490:	bf08      	it	eq
 8003492:	4634      	moveq	r4, r6
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003494:	b34d      	cbz	r5, 80034ea <HAL_ADCEx_MultiModeConfigChannel+0xc6>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003496:	68a6      	ldr	r6, [r4, #8]
 8003498:	684f      	ldr	r7, [r1, #4]
 800349a:	f426 4c60 	bic.w	ip, r6, #57344	; 0xe000
 800349e:	f890 6030 	ldrb.w	r6, [r0, #48]	; 0x30
 80034a2:	ea47 3646 	orr.w	r6, r7, r6, lsl #13
 80034a6:	ea46 060c 	orr.w	r6, r6, ip
 80034aa:	60a6      	str	r6, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034ac:	689e      	ldr	r6, [r3, #8]
 80034ae:	f006 0603 	and.w	r6, r6, #3
 80034b2:	2e01      	cmp	r6, #1
 80034b4:	d03d      	beq.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x10e>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80034b6:	6893      	ldr	r3, [r2, #8]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d030      	beq.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80034c0:	68a2      	ldr	r2, [r4, #8]
 80034c2:	688b      	ldr	r3, [r1, #8]
 80034c4:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80034c8:	431d      	orrs	r5, r3
 80034ca:	f022 020f 	bic.w	r2, r2, #15
 80034ce:	4315      	orrs	r5, r2
 80034d0:	60a5      	str	r5, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d2:	2200      	movs	r2, #0
 80034d4:	e7cc      	b.n	8003470 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
  __HAL_LOCK(hadc);
 80034d6:	f890 c03c 	ldrb.w	ip, [r0, #60]	; 0x3c
 80034da:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_ADCEx_MultiModeConfigChannel+0x11c>)
 80034dc:	f1bc 0f01 	cmp.w	ip, #1
 80034e0:	d1bb      	bne.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80034e2:	2202      	movs	r2, #2
} 
 80034e4:	4610      	mov	r0, r2
 80034e6:	bcf0      	pop	{r4, r5, r6, r7}
 80034e8:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80034ea:	68a1      	ldr	r1, [r4, #8]
 80034ec:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80034f0:	60a1      	str	r1, [r4, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80034f2:	6899      	ldr	r1, [r3, #8]
 80034f4:	f001 0103 	and.w	r1, r1, #3
 80034f8:	2901      	cmp	r1, #1
 80034fa:	d016      	beq.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0x106>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80034fc:	6893      	ldr	r3, [r2, #8]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d009      	beq.n	800351a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003506:	68a3      	ldr	r3, [r4, #8]
 8003508:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800350c:	f023 030f 	bic.w	r3, r3, #15
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003510:	2200      	movs	r2, #0
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003512:	60a3      	str	r3, [r4, #8]
 8003514:	e7ac      	b.n	8003470 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003516:	4c0b      	ldr	r4, [pc, #44]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0x120>)
 8003518:	e7bc      	b.n	8003494 <HAL_ADCEx_MultiModeConfigChannel+0x70>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800351a:	6813      	ldr	r3, [r2, #0]
 800351c:	07db      	lsls	r3, r3, #31
 800351e:	d4d8      	bmi.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003520:	e7f1      	b.n	8003506 <HAL_ADCEx_MultiModeConfigChannel+0xe2>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	07de      	lsls	r6, r3, #31
 8003526:	d4d4      	bmi.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003528:	e7ca      	b.n	80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	07d9      	lsls	r1, r3, #31
 800352e:	d4d0      	bmi.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003530:	e7e4      	b.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0xd8>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	07df      	lsls	r7, r3, #31
 8003536:	d5be      	bpl.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003538:	e7cb      	b.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800353a:	bf00      	nop
 800353c:	50000100 	.word	0x50000100
 8003540:	50000500 	.word	0x50000500
 8003544:	50000300 	.word	0x50000300
 8003548:	50000700 	.word	0x50000700

0800354c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800354c:	2800      	cmp	r0, #0
 800354e:	d07b      	beq.n	8003648 <HAL_CAN_Init+0xfc>
{
 8003550:	b538      	push	{r3, r4, r5, lr}
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003552:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003556:	4604      	mov	r4, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d072      	beq.n	8003642 <HAL_CAN_Init+0xf6>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800355c:	6822      	ldr	r2, [r4, #0]
 800355e:	6813      	ldr	r3, [r2, #0]
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003566:	f7fe fff5 	bl	8002554 <HAL_GetTick>
 800356a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800356c:	e004      	b.n	8003578 <HAL_CAN_Init+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800356e:	f7fe fff1 	bl	8002554 <HAL_GetTick>
 8003572:	1b43      	subs	r3, r0, r5
 8003574:	2b0a      	cmp	r3, #10
 8003576:	d85b      	bhi.n	8003630 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	07d1      	lsls	r1, r2, #31
 800357e:	d5f6      	bpl.n	800356e <HAL_CAN_Init+0x22>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	f022 0202 	bic.w	r2, r2, #2
 8003586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003588:	f7fe ffe4 	bl	8002554 <HAL_GetTick>
 800358c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800358e:	e004      	b.n	800359a <HAL_CAN_Init+0x4e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003590:	f7fe ffe0 	bl	8002554 <HAL_GetTick>
 8003594:	1b40      	subs	r0, r0, r5
 8003596:	280a      	cmp	r0, #10
 8003598:	d84a      	bhi.n	8003630 <HAL_CAN_Init+0xe4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	0792      	lsls	r2, r2, #30
 80035a0:	d4f6      	bmi.n	8003590 <HAL_CAN_Init+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035a2:	7e22      	ldrb	r2, [r4, #24]
 80035a4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	bf0c      	ite	eq
 80035aa:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035ae:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80035b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035b4:	7e62      	ldrb	r2, [r4, #25]
 80035b6:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	bf0c      	ite	eq
 80035bc:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035c0:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80035c6:	7ea2      	ldrb	r2, [r4, #26]
 80035c8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	bf0c      	ite	eq
 80035ce:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035d2:	f022 0220 	bicne.w	r2, r2, #32
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80035d8:	7ee2      	ldrb	r2, [r4, #27]
 80035da:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	bf0c      	ite	eq
 80035e0:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035e4:	f042 0210 	orrne.w	r2, r2, #16
 80035e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035ea:	7f22      	ldrb	r2, [r4, #28]
 80035ec:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	bf0c      	ite	eq
 80035f2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035f6:	f022 0208 	bicne.w	r2, r2, #8
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035fc:	7f62      	ldrb	r2, [r4, #29]
 80035fe:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	bf0c      	ite	eq
 8003604:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003608:	f022 0204 	bicne.w	r2, r2, #4
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800360e:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
 8003612:	6921      	ldr	r1, [r4, #16]
 8003614:	4302      	orrs	r2, r0
 8003616:	430a      	orrs	r2, r1
 8003618:	6960      	ldr	r0, [r4, #20]
 800361a:	6861      	ldr	r1, [r4, #4]
 800361c:	4302      	orrs	r2, r0
 800361e:	3901      	subs	r1, #1
 8003620:	430a      	orrs	r2, r1
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003622:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003624:	2101      	movs	r1, #1
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003626:	61da      	str	r2, [r3, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003628:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800362a:	f884 1020 	strb.w	r1, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 800362e:	bd38      	pop	{r3, r4, r5, pc}
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003630:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003632:	2205      	movs	r2, #5
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003638:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800363a:	f884 2020 	strb.w	r2, [r4, #32]
      return HAL_ERROR;
 800363e:	2001      	movs	r0, #1
}
 8003640:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8003642:	f7fd fd4f 	bl	80010e4 <HAL_CAN_MspInit>
 8003646:	e789      	b.n	800355c <HAL_CAN_Init+0x10>
    return HAL_ERROR;
 8003648:	2001      	movs	r0, #1
}
 800364a:	4770      	bx	lr

0800364c <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800364c:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8003650:	3a01      	subs	r2, #1
 8003652:	2a01      	cmp	r2, #1
{
 8003654:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003656:	d905      	bls.n	8003664 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003658:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800365a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 800365e:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003660:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003662:	4770      	bx	lr
  CAN_TypeDef *can_ip = hcan->Instance;
 8003664:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003666:	6948      	ldr	r0, [r1, #20]
{
 8003668:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800366a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800366e:	f044 0401 	orr.w	r4, r4, #1
 8003672:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003676:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800367a:	2501      	movs	r5, #1
 800367c:	f000 021f 	and.w	r2, r0, #31
 8003680:	fa05 f202 	lsl.w	r2, r5, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003684:	69cd      	ldr	r5, [r1, #28]
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003686:	ea24 0402 	bic.w	r4, r4, r2
 800368a:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
 800368e:	43d4      	mvns	r4, r2
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003690:	2d00      	cmp	r5, #0
 8003692:	d13d      	bne.n	8003710 <HAL_CAN_ConfigFilter+0xc4>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003694:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003698:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800369a:	4025      	ands	r5, r4
 800369c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036a0:	888d      	ldrh	r5, [r1, #4]
 80036a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036a6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036aa:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036ae:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80036b0:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036b2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036b6:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80036ba:	6988      	ldr	r0, [r1, #24]
 80036bc:	bb10      	cbnz	r0, 8003704 <HAL_CAN_ConfigFilter+0xb8>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80036be:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80036c2:	4020      	ands	r0, r4
 80036c4:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036c8:	6908      	ldr	r0, [r1, #16]
 80036ca:	b9a8      	cbnz	r0, 80036f8 <HAL_CAN_ConfigFilter+0xac>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036cc:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80036d0:	4004      	ands	r4, r0
 80036d2:	f8c3 4214 	str.w	r4, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036d6:	6a09      	ldr	r1, [r1, #32]
 80036d8:	2901      	cmp	r1, #1
 80036da:	d104      	bne.n	80036e6 <HAL_CAN_ConfigFilter+0x9a>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80036dc:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 80036e0:	430a      	orrs	r2, r1
 80036e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036e6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80036ea:	f022 0201 	bic.w	r2, r2, #1
    return HAL_OK;
 80036ee:	2000      	movs	r0, #0
}
 80036f0:	bc70      	pop	{r4, r5, r6}
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80036f6:	4770      	bx	lr
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036f8:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80036fc:	4310      	orrs	r0, r2
 80036fe:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8003702:	e7e8      	b.n	80036d6 <HAL_CAN_ConfigFilter+0x8a>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003704:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003708:	4310      	orrs	r0, r2
 800370a:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
 800370e:	e7db      	b.n	80036c8 <HAL_CAN_ConfigFilter+0x7c>
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003710:	2d01      	cmp	r5, #1
 8003712:	d1d2      	bne.n	80036ba <HAL_CAN_ConfigFilter+0x6e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003714:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003718:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800371a:	4315      	orrs	r5, r2
 800371c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003720:	888d      	ldrh	r5, [r1, #4]
 8003722:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003726:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800372a:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800372e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003730:	898d      	ldrh	r5, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003732:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003736:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
 800373a:	e7be      	b.n	80036ba <HAL_CAN_ConfigFilter+0x6e>

0800373c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800373c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800373e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003742:	2b01      	cmp	r3, #1
{
 8003744:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8003746:	d006      	beq.n	8003756 <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003748:	6a43      	ldr	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800374a:	2601      	movs	r6, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800374c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003750:	6243      	str	r3, [r0, #36]	; 0x24
  }
}
 8003752:	4630      	mov	r0, r6
 8003754:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003756:	6802      	ldr	r2, [r0, #0]
 8003758:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 800375a:	2302      	movs	r3, #2
 800375c:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003760:	6813      	ldr	r3, [r2, #0]
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003768:	f7fe fef4 	bl	8002554 <HAL_GetTick>
 800376c:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800376e:	e004      	b.n	800377a <HAL_CAN_Start+0x3e>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003770:	f7fe fef0 	bl	8002554 <HAL_GetTick>
 8003774:	1b43      	subs	r3, r0, r5
 8003776:	2b0a      	cmp	r3, #10
 8003778:	d808      	bhi.n	800378c <HAL_CAN_Start+0x50>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f013 0301 	ands.w	r3, r3, #1
 8003782:	d1f5      	bne.n	8003770 <HAL_CAN_Start+0x34>
    return HAL_OK;
 8003784:	461e      	mov	r6, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003786:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003788:	4630      	mov	r0, r6
 800378a:	bd70      	pop	{r4, r5, r6, pc}
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800378c:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800378e:	2205      	movs	r2, #5
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003796:	f884 2020 	strb.w	r2, [r4, #32]
}
 800379a:	4630      	mov	r0, r6
 800379c:	bd70      	pop	{r4, r5, r6, pc}
 800379e:	bf00      	nop

080037a0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80037a0:	b430      	push	{r4, r5}
 80037a2:	4684      	mov	ip, r0
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037a4:	f890 0020 	ldrb.w	r0, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037a8:	f8dc 5000 	ldr.w	r5, [ip]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037ac:	3801      	subs	r0, #1
 80037ae:	2801      	cmp	r0, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037b0:	68ac      	ldr	r4, [r5, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80037b2:	d835      	bhi.n	8003820 <HAL_CAN_AddTxMessage+0x80>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037b4:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80037b8:	d03b      	beq.n	8003832 <HAL_CAN_AddTxMessage+0x92>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80037ba:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80037be:	2c03      	cmp	r4, #3
 80037c0:	d049      	beq.n	8003856 <HAL_CAN_AddTxMessage+0xb6>

        return HAL_ERROR;
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80037c2:	2001      	movs	r0, #1
 80037c4:	40a0      	lsls	r0, r4
 80037c6:	6018      	str	r0, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80037c8:	688b      	ldr	r3, [r1, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d03a      	beq.n	8003844 <HAL_CAN_AddTxMessage+0xa4>
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
                                                           pHeader->IDE |
 80037ce:	68c8      	ldr	r0, [r1, #12]
 80037d0:	4303      	orrs	r3, r0
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037d2:	6848      	ldr	r0, [r1, #4]
                                                           pHeader->IDE |
 80037d4:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80037d8:	f104 0018 	add.w	r0, r4, #24
 80037dc:	0100      	lsls	r0, r0, #4
 80037de:	502b      	str	r3, [r5, r0]
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80037e0:	eb05 1c04 	add.w	ip, r5, r4, lsl #4
 80037e4:	690b      	ldr	r3, [r1, #16]
 80037e6:	f8cc 3184 	str.w	r3, [ip, #388]	; 0x184

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80037ea:	7d09      	ldrb	r1, [r1, #20]
 80037ec:	2901      	cmp	r1, #1
 80037ee:	ea4f 1304 	mov.w	r3, r4, lsl #4
 80037f2:	d105      	bne.n	8003800 <HAL_CAN_AddTxMessage+0x60>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80037f4:	f8dc 1184 	ldr.w	r1, [ip, #388]	; 0x184
 80037f8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80037fc:	f8cc 1184 	str.w	r1, [ip, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003800:	442b      	add	r3, r5
 8003802:	6851      	ldr	r1, [r2, #4]
 8003804:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800380e:	f8dc 3180 	ldr.w	r3, [ip, #384]	; 0x180
 8003812:	f043 0301 	orr.w	r3, r3, #1

      /* Return function status */
      return HAL_OK;
 8003816:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003818:	bc30      	pop	{r4, r5}
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800381a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
}
 800381e:	4770      	bx	lr
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003820:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 8003828:	2001      	movs	r0, #1
}
 800382a:	bc30      	pop	{r4, r5}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800382c:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003830:	4770      	bx	lr
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003832:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003836:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
      return HAL_ERROR;
 800383a:	2001      	movs	r0, #1
}
 800383c:	bc30      	pop	{r4, r5}
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800383e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003842:	4770      	bx	lr
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003844:	68cb      	ldr	r3, [r1, #12]
 8003846:	6808      	ldr	r0, [r1, #0]
 8003848:	ea43 5040 	orr.w	r0, r3, r0, lsl #21
 800384c:	f104 0318 	add.w	r3, r4, #24
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	50e8      	str	r0, [r5, r3]
 8003854:	e7c4      	b.n	80037e0 <HAL_CAN_AddTxMessage+0x40>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003856:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 800385a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
        return HAL_ERROR;
 800385e:	2001      	movs	r0, #1
}
 8003860:	bc30      	pop	{r4, r5}
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003862:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003866:	4770      	bx	lr

08003868 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003868:	b570      	push	{r4, r5, r6, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800386a:	f890 e020 	ldrb.w	lr, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800386e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003872:	f1be 0f01 	cmp.w	lr, #1
{
 8003876:	4684      	mov	ip, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003878:	d86d      	bhi.n	8003956 <HAL_CAN_GetRxMessage+0xee>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800387a:	6800      	ldr	r0, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800387c:	b951      	cbnz	r1, 8003894 <HAL_CAN_GetRxMessage+0x2c>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800387e:	68c4      	ldr	r4, [r0, #12]
 8003880:	07a5      	lsls	r5, r4, #30
 8003882:	d10a      	bne.n	800389a <HAL_CAN_GetRxMessage+0x32>
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003884:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8003888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000

        return HAL_ERROR;
 800388c:	2001      	movs	r0, #1
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800388e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 8003892:	bd70      	pop	{r4, r5, r6, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003894:	6904      	ldr	r4, [r0, #16]
 8003896:	07a4      	lsls	r4, r4, #30
 8003898:	d0f4      	beq.n	8003884 <HAL_CAN_GetRxMessage+0x1c>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800389a:	eb00 1e01 	add.w	lr, r0, r1, lsl #4
 800389e:	010c      	lsls	r4, r1, #4
 80038a0:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80038a4:	f005 0504 	and.w	r5, r5, #4
 80038a8:	6095      	str	r5, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	d05a      	beq.n	8003964 <HAL_CAN_GetRxMessage+0xfc>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80038ae:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80038b2:	08ed      	lsrs	r5, r5, #3
 80038b4:	6055      	str	r5, [r2, #4]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80038b6:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 80038ba:	f005 0502 	and.w	r5, r5, #2
 80038be:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80038c0:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80038c4:	f8de 61b4 	ldr.w	r6, [lr, #436]	; 0x1b4
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80038c8:	f005 050f 	and.w	r5, r5, #15
 80038cc:	6115      	str	r5, [r2, #16]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038ce:	4420      	add	r0, r4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80038d0:	f8de 51b4 	ldr.w	r5, [lr, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80038d4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80038d8:	6196      	str	r6, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80038da:	0c2d      	lsrs	r5, r5, #16
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038dc:	f8d0 61b8 	ldr.w	r6, [r0, #440]	; 0x1b8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80038e0:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80038e2:	701e      	strb	r6, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80038e4:	f8dc 2000 	ldr.w	r2, [ip]
 80038e8:	4422      	add	r2, r4
 80038ea:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80038ee:	0a12      	lsrs	r2, r2, #8
 80038f0:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038f2:	f8dc 2000 	ldr.w	r2, [ip]
 80038f6:	4422      	add	r2, r4
 80038f8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80038fc:	0c12      	lsrs	r2, r2, #16
 80038fe:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003900:	f8dc 2000 	ldr.w	r2, [ip]
 8003904:	4422      	add	r2, r4
 8003906:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800390a:	0e12      	lsrs	r2, r2, #24
 800390c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800390e:	f8dc 2000 	ldr.w	r2, [ip]
 8003912:	4422      	add	r2, r4
 8003914:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003918:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800391a:	f8dc 2000 	ldr.w	r2, [ip]
 800391e:	4422      	add	r2, r4
 8003920:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003924:	0a12      	lsrs	r2, r2, #8
 8003926:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003928:	f8dc 2000 	ldr.w	r2, [ip]
 800392c:	4422      	add	r2, r4
 800392e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003932:	0c12      	lsrs	r2, r2, #16
 8003934:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003936:	f8dc 2000 	ldr.w	r2, [ip]
 800393a:	4422      	add	r2, r4
 800393c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8003940:	0e12      	lsrs	r2, r2, #24
 8003942:	71da      	strb	r2, [r3, #7]
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003944:	f8dc 2000 	ldr.w	r2, [ip]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003948:	b989      	cbnz	r1, 800396e <HAL_CAN_GetRxMessage+0x106>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800394a:	68d3      	ldr	r3, [r2, #12]
 800394c:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8003950:	4608      	mov	r0, r1
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003952:	60d3      	str	r3, [r2, #12]
}
 8003954:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003956:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    return HAL_ERROR;
 800395c:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800395e:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
}
 8003962:	bd70      	pop	{r4, r5, r6, pc}
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003964:	f8de 51b0 	ldr.w	r5, [lr, #432]	; 0x1b0
 8003968:	0d6d      	lsrs	r5, r5, #21
 800396a:	6015      	str	r5, [r2, #0]
 800396c:	e7a3      	b.n	80038b6 <HAL_CAN_GetRxMessage+0x4e>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800396e:	6913      	ldr	r3, [r2, #16]
 8003970:	f043 0320 	orr.w	r3, r3, #32
    return HAL_OK;
 8003974:	2000      	movs	r0, #0
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003976:	6113      	str	r3, [r2, #16]
}
 8003978:	bd70      	pop	{r4, r5, r6, pc}
 800397a:	bf00      	nop

0800397c <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800397c:	f890 2020 	ldrb.w	r2, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003980:	3a01      	subs	r2, #1
 8003982:	2a01      	cmp	r2, #1
{
 8003984:	4603      	mov	r3, r0
  if ((state == HAL_CAN_STATE_READY) ||
 8003986:	d905      	bls.n	8003994 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003988:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800398a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000

    return HAL_ERROR;
 800398e:	2001      	movs	r0, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8003992:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003994:	6802      	ldr	r2, [r0, #0]
 8003996:	6953      	ldr	r3, [r2, #20]
 8003998:	4319      	orrs	r1, r3
    return HAL_OK;
 800399a:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800399c:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800399e:	4770      	bx	lr

080039a0 <HAL_CAN_TxMailbox0CompleteCallback>:
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop

080039a4 <HAL_CAN_TxMailbox1CompleteCallback>:
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop

080039a8 <HAL_CAN_TxMailbox2CompleteCallback>:
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop

080039ac <HAL_CAN_TxMailbox0AbortCallback>:
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop

080039b0 <HAL_CAN_TxMailbox1AbortCallback>:
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <HAL_CAN_TxMailbox2AbortCallback>:
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop

080039b8 <HAL_CAN_RxFifo0FullCallback>:
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop

080039bc <HAL_CAN_RxFifo1MsgPendingCallback>:
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop

080039c0 <HAL_CAN_RxFifo1FullCallback>:
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop

080039c4 <HAL_CAN_SleepCallback>:
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop

080039c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop

080039cc <HAL_CAN_ErrorCallback>:
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop

080039d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80039d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80039d4:	6803      	ldr	r3, [r0, #0]
 80039d6:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80039d8:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039dc:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80039de:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80039e2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039e6:	f8d3 9018 	ldr.w	r9, [r3, #24]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039ea:	f014 0601 	ands.w	r6, r4, #1
{
 80039ee:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039f0:	d025      	beq.n	8003a3e <HAL_CAN_IRQHandler+0x6e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039f2:	f017 0601 	ands.w	r6, r7, #1
 80039f6:	f040 808f 	bne.w	8003b18 <HAL_CAN_IRQHandler+0x148>
 80039fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a02:	05f8      	lsls	r0, r7, #23
 8003a04:	d50d      	bpl.n	8003a22 <HAL_CAN_IRQHandler+0x52>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003a0c:	6098      	str	r0, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a0e:	05bb      	lsls	r3, r7, #22
 8003a10:	f100 80be 	bmi.w	8003b90 <HAL_CAN_IRQHandler+0x1c0>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a14:	0578      	lsls	r0, r7, #21
 8003a16:	f100 80e4 	bmi.w	8003be2 <HAL_CAN_IRQHandler+0x212>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a1a:	053b      	lsls	r3, r7, #20
 8003a1c:	f140 80f0 	bpl.w	8003c00 <HAL_CAN_IRQHandler+0x230>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a20:	460e      	mov	r6, r1
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a22:	03f8      	lsls	r0, r7, #15
 8003a24:	d50b      	bpl.n	8003a3e <HAL_CAN_IRQHandler+0x6e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a26:	682b      	ldr	r3, [r5, #0]
 8003a28:	f44f 3280 	mov.w	r2, #65536	; 0x10000

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a2c:	03b9      	lsls	r1, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a2e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a30:	f100 80ba 	bmi.w	8003ba8 <HAL_CAN_IRQHandler+0x1d8>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a34:	037a      	lsls	r2, r7, #13
 8003a36:	f140 80cf 	bpl.w	8003bd8 <HAL_CAN_IRQHandler+0x208>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a3a:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003a3e:	0727      	lsls	r7, r4, #28
 8003a40:	d502      	bpl.n	8003a48 <HAL_CAN_IRQHandler+0x78>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003a42:	f01b 0f10 	tst.w	fp, #16
 8003a46:	d161      	bne.n	8003b0c <HAL_CAN_IRQHandler+0x13c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003a48:	0760      	lsls	r0, r4, #29
 8003a4a:	d503      	bpl.n	8003a54 <HAL_CAN_IRQHandler+0x84>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003a4c:	f01b 0f08 	tst.w	fp, #8
 8003a50:	f040 808c 	bne.w	8003b6c <HAL_CAN_IRQHandler+0x19c>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003a54:	07a1      	lsls	r1, r4, #30
 8003a56:	d504      	bpl.n	8003a62 <HAL_CAN_IRQHandler+0x92>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	079a      	lsls	r2, r3, #30
 8003a5e:	f040 808c 	bne.w	8003b7a <HAL_CAN_IRQHandler+0x1aa>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003a62:	0663      	lsls	r3, r4, #25
 8003a64:	d502      	bpl.n	8003a6c <HAL_CAN_IRQHandler+0x9c>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003a66:	f01a 0f10 	tst.w	sl, #16
 8003a6a:	d149      	bne.n	8003b00 <HAL_CAN_IRQHandler+0x130>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003a6c:	06a7      	lsls	r7, r4, #26
 8003a6e:	d502      	bpl.n	8003a76 <HAL_CAN_IRQHandler+0xa6>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003a70:	f01a 0f08 	tst.w	sl, #8
 8003a74:	d173      	bne.n	8003b5e <HAL_CAN_IRQHandler+0x18e>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003a76:	06e0      	lsls	r0, r4, #27
 8003a78:	d503      	bpl.n	8003a82 <HAL_CAN_IRQHandler+0xb2>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003a7a:	682b      	ldr	r3, [r5, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	0799      	lsls	r1, r3, #30
 8003a80:	d162      	bne.n	8003b48 <HAL_CAN_IRQHandler+0x178>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003a82:	03a2      	lsls	r2, r4, #14
 8003a84:	d502      	bpl.n	8003a8c <HAL_CAN_IRQHandler+0xbc>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003a86:	f018 0f10 	tst.w	r8, #16
 8003a8a:	d161      	bne.n	8003b50 <HAL_CAN_IRQHandler+0x180>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003a8c:	03e3      	lsls	r3, r4, #15
 8003a8e:	d502      	bpl.n	8003a96 <HAL_CAN_IRQHandler+0xc6>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003a90:	f018 0f08 	tst.w	r8, #8
 8003a94:	d175      	bne.n	8003b82 <HAL_CAN_IRQHandler+0x1b2>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003a96:	0427      	lsls	r7, r4, #16
 8003a98:	d505      	bpl.n	8003aa6 <HAL_CAN_IRQHandler+0xd6>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003a9a:	f018 0f04 	tst.w	r8, #4
 8003a9e:	d106      	bne.n	8003aae <HAL_CAN_IRQHandler+0xde>
          default:
            break;
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003aa0:	682b      	ldr	r3, [r5, #0]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003aa6:	2e00      	cmp	r6, #0
 8003aa8:	d146      	bne.n	8003b38 <HAL_CAN_IRQHandler+0x168>
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003aaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003aae:	05e0      	lsls	r0, r4, #23
 8003ab0:	d504      	bpl.n	8003abc <HAL_CAN_IRQHandler+0xec>
 8003ab2:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8003ab6:	bf18      	it	ne
 8003ab8:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003abc:	05a1      	lsls	r1, r4, #22
 8003abe:	d504      	bpl.n	8003aca <HAL_CAN_IRQHandler+0xfa>
 8003ac0:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8003ac4:	bf18      	it	ne
 8003ac6:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003aca:	0562      	lsls	r2, r4, #21
 8003acc:	d504      	bpl.n	8003ad8 <HAL_CAN_IRQHandler+0x108>
 8003ace:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8003ad2:	bf18      	it	ne
 8003ad4:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ad8:	0523      	lsls	r3, r4, #20
 8003ada:	d5e1      	bpl.n	8003aa0 <HAL_CAN_IRQHandler+0xd0>
 8003adc:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8003ae0:	d0de      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0xd0>
        switch (esrflags & CAN_ESR_LEC)
 8003ae2:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 8003ae6:	f000 809a 	beq.w	8003c1e <HAL_CAN_IRQHandler+0x24e>
 8003aea:	d861      	bhi.n	8003bb0 <HAL_CAN_IRQHandler+0x1e0>
 8003aec:	f1b9 0f20 	cmp.w	r9, #32
 8003af0:	f000 8083 	beq.w	8003bfa <HAL_CAN_IRQHandler+0x22a>
 8003af4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8003af8:	d168      	bne.n	8003bcc <HAL_CAN_IRQHandler+0x1fc>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003afa:	f046 0620 	orr.w	r6, r6, #32
            break;
 8003afe:	e05f      	b.n	8003bc0 <HAL_CAN_IRQHandler+0x1f0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b04:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b08:	611a      	str	r2, [r3, #16]
 8003b0a:	e7af      	b.n	8003a6c <HAL_CAN_IRQHandler+0x9c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	2210      	movs	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b10:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	e797      	b.n	8003a48 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003b18:	2201      	movs	r2, #1
 8003b1a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003b1c:	07bb      	lsls	r3, r7, #30
 8003b1e:	d43b      	bmi.n	8003b98 <HAL_CAN_IRQHandler+0x1c8>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b20:	077e      	lsls	r6, r7, #29
 8003b22:	d460      	bmi.n	8003be6 <HAL_CAN_IRQHandler+0x216>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b24:	f017 0608 	ands.w	r6, r7, #8
 8003b28:	d06e      	beq.n	8003c08 <HAL_CAN_IRQHandler+0x238>
 8003b2a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8003b2e:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b32:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8003b36:	e764      	b.n	8003a02 <HAL_CAN_IRQHandler+0x32>
    hcan->ErrorCode |= errorcode;
 8003b38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b3a:	431e      	orrs	r6, r3
    HAL_CAN_ErrorCallback(hcan);
 8003b3c:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8003b3e:	626e      	str	r6, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8003b40:	f7ff ff44 	bl	80039cc <HAL_CAN_ErrorCallback>
}
 8003b44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f7ff ff37 	bl	80039bc <HAL_CAN_RxFifo1MsgPendingCallback>
 8003b4e:	e798      	b.n	8003a82 <HAL_CAN_IRQHandler+0xb2>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	2210      	movs	r2, #16
 8003b54:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8003b56:	4628      	mov	r0, r5
 8003b58:	f7ff ff34 	bl	80039c4 <HAL_CAN_SleepCallback>
 8003b5c:	e796      	b.n	8003a8c <HAL_CAN_IRQHandler+0xbc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b5e:	682b      	ldr	r3, [r5, #0]
 8003b60:	2208      	movs	r2, #8
 8003b62:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b64:	4628      	mov	r0, r5
 8003b66:	f7ff ff2b 	bl	80039c0 <HAL_CAN_RxFifo1FullCallback>
 8003b6a:	e784      	b.n	8003a76 <HAL_CAN_IRQHandler+0xa6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	2208      	movs	r2, #8
 8003b70:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b72:	4628      	mov	r0, r5
 8003b74:	f7ff ff20 	bl	80039b8 <HAL_CAN_RxFifo0FullCallback>
 8003b78:	e76c      	b.n	8003a54 <HAL_CAN_IRQHandler+0x84>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	f7fd fc8c 	bl	8001498 <HAL_CAN_RxFifo0MsgPendingCallback>
 8003b80:	e76f      	b.n	8003a62 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003b82:	682b      	ldr	r3, [r5, #0]
 8003b84:	2208      	movs	r2, #8
 8003b86:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f7ff ff1d 	bl	80039c8 <HAL_CAN_WakeUpFromRxMsgCallback>
 8003b8e:	e782      	b.n	8003a96 <HAL_CAN_IRQHandler+0xc6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b90:	4628      	mov	r0, r5
 8003b92:	f7ff ff07 	bl	80039a4 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b96:	e744      	b.n	8003a22 <HAL_CAN_IRQHandler+0x52>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b98:	f7ff ff02 	bl	80039a0 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003b9c:	2600      	movs	r6, #0
 8003b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ba6:	e72c      	b.n	8003a02 <HAL_CAN_IRQHandler+0x32>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f7ff fefd 	bl	80039a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003bae:	e746      	b.n	8003a3e <HAL_CAN_IRQHandler+0x6e>
        switch (esrflags & CAN_ESR_LEC)
 8003bb0:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 8003bb4:	d01e      	beq.n	8003bf4 <HAL_CAN_IRQHandler+0x224>
 8003bb6:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 8003bba:	bf08      	it	eq
 8003bbc:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003bc0:	682b      	ldr	r3, [r5, #0]
 8003bc2:	699a      	ldr	r2, [r3, #24]
 8003bc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003bc8:	619a      	str	r2, [r3, #24]
 8003bca:	e76a      	b.n	8003aa2 <HAL_CAN_IRQHandler+0xd2>
        switch (esrflags & CAN_ESR_LEC)
 8003bcc:	f1b9 0f10 	cmp.w	r9, #16
 8003bd0:	d1f6      	bne.n	8003bc0 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_STF;
 8003bd2:	f046 0608 	orr.w	r6, r6, #8
            break;
 8003bd6:	e7f3      	b.n	8003bc0 <HAL_CAN_IRQHandler+0x1f0>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003bd8:	033b      	lsls	r3, r7, #12
 8003bda:	d51c      	bpl.n	8003c16 <HAL_CAN_IRQHandler+0x246>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003bdc:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 8003be0:	e72d      	b.n	8003a3e <HAL_CAN_IRQHandler+0x6e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003be2:	4616      	mov	r6, r2
 8003be4:	e71d      	b.n	8003a22 <HAL_CAN_IRQHandler+0x52>
 8003be6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003bea:	f44f 4190 	mov.w	r1, #18432	; 0x4800
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003bee:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8003bf2:	e706      	b.n	8003a02 <HAL_CAN_IRQHandler+0x32>
            errorcode |= HAL_CAN_ERROR_BD;
 8003bf4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 8003bf8:	e7e2      	b.n	8003bc0 <HAL_CAN_IRQHandler+0x1f0>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003bfa:	f046 0610 	orr.w	r6, r6, #16
            break;
 8003bfe:	e7df      	b.n	8003bc0 <HAL_CAN_IRQHandler+0x1f0>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003c00:	4628      	mov	r0, r5
 8003c02:	f7ff fed5 	bl	80039b0 <HAL_CAN_TxMailbox1AbortCallback>
 8003c06:	e70c      	b.n	8003a22 <HAL_CAN_IRQHandler+0x52>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c08:	f7ff fed0 	bl	80039ac <HAL_CAN_TxMailbox0AbortCallback>
 8003c0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c14:	e6f5      	b.n	8003a02 <HAL_CAN_IRQHandler+0x32>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003c16:	4628      	mov	r0, r5
 8003c18:	f7ff fecc 	bl	80039b4 <HAL_CAN_TxMailbox2AbortCallback>
 8003c1c:	e70f      	b.n	8003a3e <HAL_CAN_IRQHandler+0x6e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c1e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 8003c22:	e7cd      	b.n	8003bc0 <HAL_CAN_IRQHandler+0x1f0>

08003c24 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c24:	4907      	ldr	r1, [pc, #28]	; (8003c44 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003c26:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c28:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c2a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c32:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c34:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c36:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003c3e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c48:	4b1c      	ldr	r3, [pc, #112]	; (8003cbc <HAL_NVIC_SetPriority+0x74>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c50:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c52:	f1c3 0e07 	rsb	lr, r3, #7
 8003c56:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c5a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c5e:	bf28      	it	cs
 8003c60:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c64:	f1bc 0f06 	cmp.w	ip, #6
 8003c68:	d91b      	bls.n	8003ca2 <HAL_NVIC_SetPriority+0x5a>
 8003c6a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c6c:	f04f 3cff 	mov.w	ip, #4294967295
 8003c70:	fa0c fc03 	lsl.w	ip, ip, r3
 8003c74:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c78:	f04f 3cff 	mov.w	ip, #4294967295
 8003c7c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003c80:	ea21 010c 	bic.w	r1, r1, ip
 8003c84:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003c86:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003c8c:	db0c      	blt.n	8003ca8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c8e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003c92:	0109      	lsls	r1, r1, #4
 8003c94:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003c98:	b2c9      	uxtb	r1, r1
 8003c9a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ca2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	e7e7      	b.n	8003c78 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_NVIC_SetPriority+0x78>)
 8003caa:	f000 000f 	and.w	r0, r0, #15
 8003cae:	0109      	lsls	r1, r1, #4
 8003cb0:	4403      	add	r3, r0
 8003cb2:	b2c9      	uxtb	r1, r1
 8003cb4:	7619      	strb	r1, [r3, #24]
 8003cb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cba:	bf00      	nop
 8003cbc:	e000ed00 	.word	0xe000ed00
 8003cc0:	e000ecfc 	.word	0xe000ecfc

08003cc4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	db08      	blt.n	8003cda <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc8:	0941      	lsrs	r1, r0, #5
 8003cca:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <HAL_NVIC_EnableIRQ+0x18>)
 8003ccc:	f000 001f 	and.w	r0, r0, #31
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	fa03 f000 	lsl.w	r0, r3, r0
 8003cd6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003cda:	4770      	bx	lr
 8003cdc:	e000e100 	.word	0xe000e100

08003ce0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce0:	3801      	subs	r0, #1
 8003ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003ce6:	d210      	bcs.n	8003d0a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce8:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cea:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cee:	4c08      	ldr	r4, [pc, #32]	; (8003d10 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cf0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003cf6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cfa:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfc:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cfe:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d00:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003d02:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d06:	6119      	str	r1, [r3, #16]
 8003d08:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d035      	beq.n	8003d84 <HAL_DMA_Init+0x70>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d18:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
{ 
 8003d1c:	b410      	push	{r4}
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d1e:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8003d20:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 8003d22:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d24:	6902      	ldr	r2, [r0, #16]
 8003d26:	4323      	orrs	r3, r4
 8003d28:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d2a:	e9d0 4205 	ldrd	r4, r2, [r0, #20]
 8003d2e:	4323      	orrs	r3, r4
 8003d30:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d32:	69c2      	ldr	r2, [r0, #28]
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d34:	4c14      	ldr	r4, [pc, #80]	; (8003d88 <HAL_DMA_Init+0x74>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d36:	4313      	orrs	r3, r2
  tmp = hdma->Instance->CCR;
 8003d38:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d3a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8003d3e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8003d42:	4313      	orrs	r3, r2
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d44:	42a1      	cmp	r1, r4
  hdma->Instance->CCR = tmp;  
 8003d46:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d48:	d912      	bls.n	8003d70 <HAL_DMA_Init+0x5c>
    hdma->DmaBaseAddress = DMA1;
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_DMA_Init+0x78>)
 8003d4c:	4a10      	ldr	r2, [pc, #64]	; (8003d90 <HAL_DMA_Init+0x7c>)
    hdma->DmaBaseAddress = DMA2;
 8003d4e:	4c11      	ldr	r4, [pc, #68]	; (8003d94 <HAL_DMA_Init+0x80>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d50:	440b      	add	r3, r1
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	009b      	lsls	r3, r3, #2
  hdma->Lock = HAL_UNLOCKED;
 8003d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d5e:	2200      	movs	r2, #0
  hdma->Lock = HAL_UNLOCKED;
 8003d60:	8401      	strh	r1, [r0, #32]
 8003d62:	e9c0 430f 	strd	r4, r3, [r0, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d66:	6382      	str	r2, [r0, #56]	; 0x38
}  
 8003d68:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8003d6c:	4610      	mov	r0, r2
}  
 8003d6e:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_DMA_Init+0x84>)
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <HAL_DMA_Init+0x7c>)
 8003d74:	440b      	add	r3, r1
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	091b      	lsrs	r3, r3, #4
    hdma->DmaBaseAddress = DMA1;
 8003d7c:	f2a4 4407 	subw	r4, r4, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d80:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA1;
 8003d82:	e7ea      	b.n	8003d5a <HAL_DMA_Init+0x46>
    return HAL_ERROR;
 8003d84:	2001      	movs	r0, #1
}  
 8003d86:	4770      	bx	lr
 8003d88:	40020407 	.word	0x40020407
 8003d8c:	bffdfbf8 	.word	0xbffdfbf8
 8003d90:	cccccccd 	.word	0xcccccccd
 8003d94:	40020400 	.word	0x40020400
 8003d98:	bffdfff8 	.word	0xbffdfff8

08003d9c <HAL_DMA_Start_IT>:
{
 8003d9c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8003d9e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003da2:	2c01      	cmp	r4, #1
 8003da4:	d039      	beq.n	8003e1a <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8003da6:	f890 c021 	ldrb.w	ip, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8003daa:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dac:	45a4      	cmp	ip, r4
  __HAL_LOCK(hdma);
 8003dae:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003db2:	d005      	beq.n	8003dc0 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8003db4:	2300      	movs	r3, #0
 8003db6:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8003dba:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8003dbc:	2002      	movs	r0, #2
} 
 8003dbe:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003dc0:	2502      	movs	r5, #2
 8003dc2:	f880 5021 	strb.w	r5, [r0, #33]	; 0x21
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003dc6:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003dc8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dca:	2500      	movs	r5, #0
 8003dcc:	6385      	str	r5, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003dce:	6825      	ldr	r5, [r4, #0]
 8003dd0:	f025 0501 	bic.w	r5, r5, #1
 8003dd4:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003dd6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003dd8:	fa0c f505 	lsl.w	r5, ip, r5
 8003ddc:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8003dde:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003de0:	6843      	ldr	r3, [r0, #4]
 8003de2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8003de4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->Instance->CPAR = DstAddress;
 8003de6:	bf0b      	itete	eq
 8003de8:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003dea:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003dec:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003dee:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003df0:	b153      	cbz	r3, 8003e08 <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	f043 030e 	orr.w	r3, r3, #14
 8003df8:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8003e00:	2000      	movs	r0, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003e02:	6023      	str	r3, [r4, #0]
} 
 8003e04:	bc70      	pop	{r4, r5, r6}
 8003e06:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	f043 030a 	orr.w	r3, r3, #10
 8003e0e:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	f023 0304 	bic.w	r3, r3, #4
 8003e16:	6023      	str	r3, [r4, #0]
 8003e18:	e7ef      	b.n	8003dfa <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8003e1a:	2002      	movs	r0, #2
} 
 8003e1c:	bc70      	pop	{r4, r5, r6}
 8003e1e:	4770      	bx	lr

08003e20 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e20:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8003e24:	2a02      	cmp	r2, #2
{
 8003e26:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e28:	d006      	beq.n	8003e38 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e2a:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 8003e2c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e2e:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003e30:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8003e34:	2001      	movs	r0, #1
}
 8003e36:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e38:	6802      	ldr	r2, [r0, #0]
 8003e3a:	6811      	ldr	r1, [r2, #0]
 8003e3c:	f021 010e 	bic.w	r1, r1, #14
{
 8003e40:	b410      	push	{r4}
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e42:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003e44:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e46:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e48:	6811      	ldr	r1, [r2, #0]
 8003e4a:	f021 0101 	bic.w	r1, r1, #1
 8003e4e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e50:	2201      	movs	r2, #1
 8003e52:	40a2      	lsls	r2, r4
  __HAL_UNLOCK(hdma);
 8003e54:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e58:	6042      	str	r2, [r0, #4]
  __HAL_UNLOCK(hdma);
 8003e5a:	8419      	strh	r1, [r3, #32]
  return HAL_OK;
 8003e5c:	2000      	movs	r0, #0
}
 8003e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e64:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8003e68:	2a02      	cmp	r2, #2
 8003e6a:	d003      	beq.n	8003e74 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8003e70:	2001      	movs	r0, #1
}
 8003e72:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e74:	6802      	ldr	r2, [r0, #0]
 8003e76:	6811      	ldr	r1, [r2, #0]
 8003e78:	f021 010e 	bic.w	r1, r1, #14
{  
 8003e7c:	b510      	push	{r4, lr}
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e7e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e80:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e82:	6811      	ldr	r1, [r2, #0]
 8003e84:	f021 0101 	bic.w	r1, r1, #1
 8003e88:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4091      	lsls	r1, r2
    if(hdma->XferAbortCallback != NULL)
 8003e90:	6b42      	ldr	r2, [r0, #52]	; 0x34
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e92:	6061      	str	r1, [r4, #4]
    __HAL_UNLOCK(hdma);
 8003e94:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8003e98:	f8a0 c020 	strh.w	ip, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003e9c:	b112      	cbz	r2, 8003ea4 <HAL_DMA_Abort_IT+0x40>
      hdma->XferAbortCallback(hdma);
 8003e9e:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003ea0:	2000      	movs	r0, #0
}
 8003ea2:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003ea4:	4610      	mov	r0, r2
}
 8003ea6:	bd10      	pop	{r4, pc}

08003ea8 <HAL_DMA_IRQHandler>:
{
 8003ea8:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eaa:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003eac:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eae:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003eb0:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8003eb8:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003eba:	d00e      	beq.n	8003eda <HAL_DMA_IRQHandler+0x32>
 8003ebc:	f015 0f04 	tst.w	r5, #4
 8003ec0:	d00b      	beq.n	8003eda <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ec2:	6822      	ldr	r2, [r4, #0]
 8003ec4:	0692      	lsls	r2, r2, #26
 8003ec6:	d403      	bmi.n	8003ed0 <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ec8:	6822      	ldr	r2, [r4, #0]
 8003eca:	f022 0204 	bic.w	r2, r2, #4
 8003ece:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ed0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003ed2:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8003ed4:	b1ca      	cbz	r2, 8003f0a <HAL_DMA_IRQHandler+0x62>
}  
 8003ed6:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8003ed8:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003eda:	2302      	movs	r3, #2
 8003edc:	4093      	lsls	r3, r2
 8003ede:	420b      	tst	r3, r1
 8003ee0:	d015      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x66>
 8003ee2:	f015 0f02 	tst.w	r5, #2
 8003ee6:	d012      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	0692      	lsls	r2, r2, #26
 8003eec:	d406      	bmi.n	8003efc <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003eee:	6822      	ldr	r2, [r4, #0]
 8003ef0:	f022 020a 	bic.w	r2, r2, #10
 8003ef4:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8003efc:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003efe:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 8003f00:	2100      	movs	r1, #0
 8003f02:	f880 1020 	strb.w	r1, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8003f06:	2a00      	cmp	r2, #0
 8003f08:	d1e5      	bne.n	8003ed6 <HAL_DMA_IRQHandler+0x2e>
}  
 8003f0a:	bc70      	pop	{r4, r5, r6}
 8003f0c:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f0e:	2308      	movs	r3, #8
 8003f10:	4093      	lsls	r3, r2
 8003f12:	420b      	tst	r3, r1
 8003f14:	d0f9      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x62>
 8003f16:	072b      	lsls	r3, r5, #28
 8003f18:	d5f7      	bpl.n	8003f0a <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f1a:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8003f1c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f1e:	f023 030e 	bic.w	r3, r3, #14
 8003f22:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f24:	2301      	movs	r3, #1
 8003f26:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8003f2a:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f2e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma); 
 8003f30:	8404      	strh	r4, [r0, #32]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f32:	6383      	str	r3, [r0, #56]	; 0x38
    if(hdma->XferErrorCallback != NULL)
 8003f34:	2900      	cmp	r1, #0
 8003f36:	d0e8      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x62>
}  
 8003f38:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8003f3a:	4708      	bx	r1

08003f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f40:	680c      	ldr	r4, [r1, #0]
{
 8003f42:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f44:	2c00      	cmp	r4, #0
 8003f46:	d07e      	beq.n	8004046 <HAL_GPIO_Init+0x10a>
 8003f48:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f4c:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 800410c <HAL_GPIO_Init+0x1d0>
  uint32_t position = 0x00u;
 8003f50:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f52:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f56:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f58:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 8003f5c:	ea15 0804 	ands.w	r8, r5, r4
 8003f60:	d06b      	beq.n	800403a <HAL_GPIO_Init+0xfe>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f62:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8003f66:	f007 0203 	and.w	r2, r7, #3
 8003f6a:	1e51      	subs	r1, r2, #1
 8003f6c:	2901      	cmp	r1, #1
 8003f6e:	d96d      	bls.n	800404c <HAL_GPIO_Init+0x110>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f70:	2a03      	cmp	r2, #3
 8003f72:	f040 80ac 	bne.w	80040ce <HAL_GPIO_Init+0x192>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f76:	fa02 f20c 	lsl.w	r2, r2, ip
 8003f7a:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 8003f7c:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003f7e:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f80:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f82:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003f86:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f88:	d057      	beq.n	800403a <HAL_GPIO_Init+0xfe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8a:	f8da 2018 	ldr.w	r2, [sl, #24]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	f8ca 2018 	str.w	r2, [sl, #24]
 8003f96:	f8da 2018 	ldr.w	r2, [sl, #24]
 8003f9a:	f002 0201 	and.w	r2, r2, #1
 8003f9e:	9203      	str	r2, [sp, #12]
 8003fa0:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003fa2:	f023 0203 	bic.w	r2, r3, #3
 8003fa6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003faa:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fae:	f003 0103 	and.w	r1, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003fb2:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fb4:	0089      	lsls	r1, r1, #2
 8003fb6:	260f      	movs	r6, #15
 8003fb8:	fa06 fe01 	lsl.w	lr, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fbc:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fc0:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fc4:	d015      	beq.n	8003ff2 <HAL_GPIO_Init+0xb6>
 8003fc6:	4e4c      	ldr	r6, [pc, #304]	; (80040f8 <HAL_GPIO_Init+0x1bc>)
 8003fc8:	42b0      	cmp	r0, r6
 8003fca:	f000 808b 	beq.w	80040e4 <HAL_GPIO_Init+0x1a8>
 8003fce:	4e4b      	ldr	r6, [pc, #300]	; (80040fc <HAL_GPIO_Init+0x1c0>)
 8003fd0:	42b0      	cmp	r0, r6
 8003fd2:	f000 808b 	beq.w	80040ec <HAL_GPIO_Init+0x1b0>
 8003fd6:	4e4a      	ldr	r6, [pc, #296]	; (8004100 <HAL_GPIO_Init+0x1c4>)
 8003fd8:	42b0      	cmp	r0, r6
 8003fda:	d07d      	beq.n	80040d8 <HAL_GPIO_Init+0x19c>
 8003fdc:	4e49      	ldr	r6, [pc, #292]	; (8004104 <HAL_GPIO_Init+0x1c8>)
 8003fde:	42b0      	cmp	r0, r6
 8003fe0:	bf0b      	itete	eq
 8003fe2:	f04f 0e04 	moveq.w	lr, #4
 8003fe6:	2605      	movne	r6, #5
 8003fe8:	fa0e f101 	lsleq.w	r1, lr, r1
 8003fec:	fa06 f101 	lslne.w	r1, r6, r1
 8003ff0:	430d      	orrs	r5, r1
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ff2:	6095      	str	r5, [r2, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ff4:	4a44      	ldr	r2, [pc, #272]	; (8004108 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003ff6:	4944      	ldr	r1, [pc, #272]	; (8004108 <HAL_GPIO_Init+0x1cc>)
        temp = EXTI->IMR;
 8003ff8:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
 8003ffa:	ea6f 0508 	mvn.w	r5, r8
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ffe:	03fe      	lsls	r6, r7, #15
        temp &= ~(iocurrent);
 8004000:	bf54      	ite	pl
 8004002:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004004:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR = temp;
 8004008:	600a      	str	r2, [r1, #0]

        temp = EXTI->EMR;
 800400a:	684a      	ldr	r2, [r1, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800400c:	03b9      	lsls	r1, r7, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800400e:	493e      	ldr	r1, [pc, #248]	; (8004108 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8004010:	bf54      	ite	pl
 8004012:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004014:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8004018:	604a      	str	r2, [r1, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800401a:	6889      	ldr	r1, [r1, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800401c:	4a3a      	ldr	r2, [pc, #232]	; (8004108 <HAL_GPIO_Init+0x1cc>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800401e:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8004020:	bf54      	ite	pl
 8004022:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8004024:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 8004028:	6091      	str	r1, [r2, #8]

        temp = EXTI->FTSR;
 800402a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800402c:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800402e:	4936      	ldr	r1, [pc, #216]	; (8004108 <HAL_GPIO_Init+0x1cc>)
        temp &= ~(iocurrent);
 8004030:	bf54      	ite	pl
 8004032:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8004034:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8004038:	60ca      	str	r2, [r1, #12]
      }
    }

    position++;
 800403a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800403c:	fa34 f203 	lsrs.w	r2, r4, r3
 8004040:	f10c 0c02 	add.w	ip, ip, #2
 8004044:	d188      	bne.n	8003f58 <HAL_GPIO_Init+0x1c>
  }
}
 8004046:	b005      	add	sp, #20
 8004048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800404c:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800404e:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004052:	f04f 0e03 	mov.w	lr, #3
 8004056:	fa0e fe0c 	lsl.w	lr, lr, ip
 800405a:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 800405e:	fa06 f60c 	lsl.w	r6, r6, ip
 8004062:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 8004064:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004066:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 800406a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800406e:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004072:	f3c7 1500 	ubfx	r5, r7, #4, #1
 8004076:	409d      	lsls	r5, r3
 8004078:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 800407c:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 800407e:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004080:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004084:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8004088:	fa05 f50c 	lsl.w	r5, r5, ip
 800408c:	ea45 050e 	orr.w	r5, r5, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004090:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004092:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004094:	fa02 f20c 	lsl.w	r2, r2, ip
 8004098:	f47f af70 	bne.w	8003f7c <HAL_GPIO_Init+0x40>
        temp = GPIOx->AFR[position >> 3u];
 800409c:	08dd      	lsrs	r5, r3, #3
 800409e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80040a2:	9501      	str	r5, [sp, #4]
 80040a4:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040a6:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3u];
 80040aa:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040ac:	f003 0e07 	and.w	lr, r3, #7
 80040b0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80040b4:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040b6:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040ba:	fa06 fe0e 	lsl.w	lr, r6, lr
 80040be:	9e00      	ldr	r6, [sp, #0]
 80040c0:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3u] = temp;
 80040c4:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040c6:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3u] = temp;
 80040ca:	6235      	str	r5, [r6, #32]
 80040cc:	e756      	b.n	8003f7c <HAL_GPIO_Init+0x40>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040ce:	2103      	movs	r1, #3
 80040d0:	fa01 f10c 	lsl.w	r1, r1, ip
 80040d4:	43c9      	mvns	r1, r1
 80040d6:	e7d2      	b.n	800407e <HAL_GPIO_Init+0x142>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040d8:	f04f 0e03 	mov.w	lr, #3
 80040dc:	fa0e f101 	lsl.w	r1, lr, r1
 80040e0:	430d      	orrs	r5, r1
 80040e2:	e786      	b.n	8003ff2 <HAL_GPIO_Init+0xb6>
 80040e4:	fa0b f101 	lsl.w	r1, fp, r1
 80040e8:	430d      	orrs	r5, r1
 80040ea:	e782      	b.n	8003ff2 <HAL_GPIO_Init+0xb6>
 80040ec:	f04f 0e02 	mov.w	lr, #2
 80040f0:	fa0e f101 	lsl.w	r1, lr, r1
 80040f4:	430d      	orrs	r5, r1
 80040f6:	e77c      	b.n	8003ff2 <HAL_GPIO_Init+0xb6>
 80040f8:	48000400 	.word	0x48000400
 80040fc:	48000800 	.word	0x48000800
 8004100:	48000c00 	.word	0x48000c00
 8004104:	48001000 	.word	0x48001000
 8004108:	40010400 	.word	0x40010400
 800410c:	40021000 	.word	0x40021000

08004110 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004110:	6903      	ldr	r3, [r0, #16]
 8004112:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004114:	bf14      	ite	ne
 8004116:	2001      	movne	r0, #1
 8004118:	2000      	moveq	r0, #0
 800411a:	4770      	bx	lr

0800411c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800411c:	b10a      	cbz	r2, 8004122 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800411e:	6181      	str	r1, [r0, #24]
 8004120:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004122:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop

08004128 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004128:	2800      	cmp	r0, #0
 800412a:	f000 828c 	beq.w	8004646 <HAL_RCC_OscConfig+0x51e>
{
 800412e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004132:	6803      	ldr	r3, [r0, #0]
 8004134:	07d9      	lsls	r1, r3, #31
{
 8004136:	b083      	sub	sp, #12
 8004138:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413a:	d54f      	bpl.n	80041dc <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800413c:	49b4      	ldr	r1, [pc, #720]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
 800413e:	684a      	ldr	r2, [r1, #4]
 8004140:	f002 020c 	and.w	r2, r2, #12
 8004144:	2a04      	cmp	r2, #4
 8004146:	f000 816d 	beq.w	8004424 <HAL_RCC_OscConfig+0x2fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800414a:	684a      	ldr	r2, [r1, #4]
 800414c:	f002 020c 	and.w	r2, r2, #12
 8004150:	2a08      	cmp	r2, #8
 8004152:	f000 8163 	beq.w	800441c <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004156:	6863      	ldr	r3, [r4, #4]
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415c:	d017      	beq.n	800418e <HAL_RCC_OscConfig+0x66>
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 819c 	beq.w	800449c <HAL_RCC_OscConfig+0x374>
 8004164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004168:	f000 8258 	beq.w	800461c <HAL_RCC_OscConfig+0x4f4>
 800416c:	4ba8      	ldr	r3, [pc, #672]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800417c:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800417e:	4aa4      	ldr	r2, [pc, #656]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
 8004180:	68a1      	ldr	r1, [r4, #8]
 8004182:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004184:	f023 030f 	bic.w	r3, r3, #15
 8004188:	430b      	orrs	r3, r1
 800418a:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418e:	4aa0      	ldr	r2, [pc, #640]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
 8004190:	6813      	ldr	r3, [r2, #0]
 8004192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004196:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004198:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800419a:	68a1      	ldr	r1, [r4, #8]
 800419c:	f023 030f 	bic.w	r3, r3, #15
 80041a0:	430b      	orrs	r3, r1
 80041a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fe f9d6 	bl	8002554 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a8:	4f99      	ldr	r7, [pc, #612]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 80041aa:	4605      	mov	r5, r0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b0:	2601      	movs	r6, #1
 80041b2:	e005      	b.n	80041c0 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fe f9ce 	bl	8002554 <HAL_GetTick>
 80041b8:	1b40      	subs	r0, r0, r5
 80041ba:	2864      	cmp	r0, #100	; 0x64
 80041bc:	f200 816a 	bhi.w	8004494 <HAL_RCC_OscConfig+0x36c>
 80041c0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	fa98 f3a8 	rbit	r3, r8
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	fa06 f303 	lsl.w	r3, r6, r3
 80041d6:	4213      	tst	r3, r2
 80041d8:	d0ec      	beq.n	80041b4 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	079f      	lsls	r7, r3, #30
 80041de:	d541      	bpl.n	8004264 <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80041e0:	4a8b      	ldr	r2, [pc, #556]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
 80041e2:	6851      	ldr	r1, [r2, #4]
 80041e4:	f011 0f0c 	tst.w	r1, #12
 80041e8:	f000 80c8 	beq.w	800437c <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80041ec:	6851      	ldr	r1, [r2, #4]
 80041ee:	f001 010c 	and.w	r1, r1, #12
 80041f2:	2908      	cmp	r1, #8
 80041f4:	f000 80be 	beq.w	8004374 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f8:	6922      	ldr	r2, [r4, #16]
 80041fa:	2a00      	cmp	r2, #0
 80041fc:	f000 81ad 	beq.w	800455a <HAL_RCC_OscConfig+0x432>
 8004200:	2501      	movs	r5, #1
 8004202:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004206:	fab3 f383 	clz	r3, r3
 800420a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800420e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004212:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004214:	4f7e      	ldr	r7, [pc, #504]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
        __HAL_RCC_HSI_ENABLE();
 8004216:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8004218:	f7fe f99c 	bl	8002554 <HAL_GetTick>
 800421c:	f04f 0802 	mov.w	r8, #2
 8004220:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004222:	e005      	b.n	8004230 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004224:	f7fe f996 	bl	8002554 <HAL_GetTick>
 8004228:	1b80      	subs	r0, r0, r6
 800422a:	2802      	cmp	r0, #2
 800422c:	f200 8132 	bhi.w	8004494 <HAL_RCC_OscConfig+0x36c>
 8004230:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	fa98 f3a8 	rbit	r3, r8
 800423a:	fab3 f383 	clz	r3, r3
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	fa05 f303 	lsl.w	r3, r5, r3
 8004246:	4213      	tst	r3, r2
 8004248:	d0ec      	beq.n	8004224 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424a:	6839      	ldr	r1, [r7, #0]
 800424c:	22f8      	movs	r2, #248	; 0xf8
 800424e:	fa92 f2a2 	rbit	r2, r2
 8004252:	6963      	ldr	r3, [r4, #20]
 8004254:	fab2 f282 	clz	r2, r2
 8004258:	4093      	lsls	r3, r2
 800425a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800425e:	4313      	orrs	r3, r2
 8004260:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	071d      	lsls	r5, r3, #28
 8004266:	d421      	bmi.n	80042ac <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004268:	0758      	lsls	r0, r3, #29
 800426a:	d54c      	bpl.n	8004306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426c:	4b68      	ldr	r3, [pc, #416]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	00d1      	lsls	r1, r2, #3
 8004272:	f140 80c1 	bpl.w	80043f8 <HAL_RCC_OscConfig+0x2d0>
    FlagStatus       pwrclkchanged = RESET;
 8004276:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427a:	4d66      	ldr	r5, [pc, #408]	; (8004414 <HAL_RCC_OscConfig+0x2ec>)
 800427c:	682b      	ldr	r3, [r5, #0]
 800427e:	05da      	lsls	r2, r3, #23
 8004280:	f140 80f8 	bpl.w	8004474 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004284:	68e3      	ldr	r3, [r4, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	f000 818d 	beq.w	80045a6 <HAL_RCC_OscConfig+0x47e>
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 812e 	beq.w	80044ee <HAL_RCC_OscConfig+0x3c6>
 8004292:	2b05      	cmp	r3, #5
 8004294:	4b5e      	ldr	r3, [pc, #376]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
 8004296:	6a1a      	ldr	r2, [r3, #32]
 8004298:	f000 81cd 	beq.w	8004636 <HAL_RCC_OscConfig+0x50e>
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	621a      	str	r2, [r3, #32]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	f022 0204 	bic.w	r2, r2, #4
 80042a8:	621a      	str	r2, [r3, #32]
 80042aa:	e181      	b.n	80045b0 <HAL_RCC_OscConfig+0x488>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042ac:	69a2      	ldr	r2, [r4, #24]
 80042ae:	2a00      	cmp	r2, #0
 80042b0:	d07b      	beq.n	80043aa <HAL_RCC_OscConfig+0x282>
 80042b2:	2501      	movs	r5, #1
 80042b4:	fa95 f2a5 	rbit	r2, r5
      __HAL_RCC_LSI_ENABLE();
 80042b8:	4b57      	ldr	r3, [pc, #348]	; (8004418 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ba:	4f55      	ldr	r7, [pc, #340]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_ENABLE();
 80042bc:	fab2 f282 	clz	r2, r2
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	f04f 0802 	mov.w	r8, #2
 80042c8:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 80042ca:	f7fe f943 	bl	8002554 <HAL_GetTick>
 80042ce:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d0:	e005      	b.n	80042de <HAL_RCC_OscConfig+0x1b6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fe f93f 	bl	8002554 <HAL_GetTick>
 80042d6:	1b80      	subs	r0, r0, r6
 80042d8:	2802      	cmp	r0, #2
 80042da:	f200 80db 	bhi.w	8004494 <HAL_RCC_OscConfig+0x36c>
 80042de:	fa98 f3a8 	rbit	r3, r8
 80042e2:	fa98 f3a8 	rbit	r3, r8
 80042e6:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ec:	fa98 f3a8 	rbit	r3, r8
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	fa05 f303 	lsl.w	r3, r5, r3
 80042fc:	4213      	tst	r3, r2
 80042fe:	d0e8      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	0758      	lsls	r0, r3, #29
 8004304:	d4b2      	bmi.n	800426c <HAL_RCC_OscConfig+0x144>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004306:	69e0      	ldr	r0, [r4, #28]
 8004308:	b380      	cbz	r0, 800436c <HAL_RCC_OscConfig+0x244>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800430a:	4d41      	ldr	r5, [pc, #260]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
 800430c:	686b      	ldr	r3, [r5, #4]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	2b08      	cmp	r3, #8
 8004314:	f000 8171 	beq.w	80045fa <HAL_RCC_OscConfig+0x4d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004318:	2802      	cmp	r0, #2
 800431a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800431e:	f000 8194 	beq.w	800464a <HAL_RCC_OscConfig+0x522>
 8004322:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800432e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fe f90c 	bl	8002554 <HAL_GetTick>
 800433c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004340:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004342:	2601      	movs	r6, #1
 8004344:	e005      	b.n	8004352 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fe f905 	bl	8002554 <HAL_GetTick>
 800434a:	1b00      	subs	r0, r0, r4
 800434c:	2802      	cmp	r0, #2
 800434e:	f200 80a1 	bhi.w	8004494 <HAL_RCC_OscConfig+0x36c>
 8004352:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004356:	682a      	ldr	r2, [r5, #0]
 8004358:	fa97 f3a7 	rbit	r3, r7
 800435c:	fab3 f383 	clz	r3, r3
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	fa06 f303 	lsl.w	r3, r6, r3
 8004368:	4213      	tst	r3, r2
 800436a:	d1ec      	bne.n	8004346 <HAL_RCC_OscConfig+0x21e>
        }
      }
    }
  }

  return HAL_OK;
 800436c:	2000      	movs	r0, #0
}
 800436e:	b003      	add	sp, #12
 8004370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004374:	6852      	ldr	r2, [r2, #4]
 8004376:	03d6      	lsls	r6, r2, #15
 8004378:	f53f af3e 	bmi.w	80041f8 <HAL_RCC_OscConfig+0xd0>
 800437c:	2202      	movs	r2, #2
 800437e:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	4923      	ldr	r1, [pc, #140]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
 8004384:	6808      	ldr	r0, [r1, #0]
 8004386:	fa92 f2a2 	rbit	r2, r2
 800438a:	fab2 f282 	clz	r2, r2
 800438e:	f002 021f 	and.w	r2, r2, #31
 8004392:	2101      	movs	r1, #1
 8004394:	fa01 f202 	lsl.w	r2, r1, r2
 8004398:	4202      	tst	r2, r0
 800439a:	d05a      	beq.n	8004452 <HAL_RCC_OscConfig+0x32a>
 800439c:	6922      	ldr	r2, [r4, #16]
 800439e:	428a      	cmp	r2, r1
 80043a0:	d057      	beq.n	8004452 <HAL_RCC_OscConfig+0x32a>
        return HAL_ERROR;
 80043a2:	2001      	movs	r0, #1
}
 80043a4:	b003      	add	sp, #12
 80043a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043aa:	2601      	movs	r6, #1
 80043ac:	fa96 f1a6 	rbit	r1, r6
      __HAL_RCC_LSI_DISABLE();
 80043b0:	4b19      	ldr	r3, [pc, #100]	; (8004418 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b2:	4f17      	ldr	r7, [pc, #92]	; (8004410 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_DISABLE();
 80043b4:	fab1 f181 	clz	r1, r1
 80043b8:	440b      	add	r3, r1
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	f04f 0802 	mov.w	r8, #2
 80043c0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80043c2:	f7fe f8c7 	bl	8002554 <HAL_GetTick>
 80043c6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c8:	e004      	b.n	80043d4 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ca:	f7fe f8c3 	bl	8002554 <HAL_GetTick>
 80043ce:	1b40      	subs	r0, r0, r5
 80043d0:	2802      	cmp	r0, #2
 80043d2:	d85f      	bhi.n	8004494 <HAL_RCC_OscConfig+0x36c>
 80043d4:	fa98 f3a8 	rbit	r3, r8
 80043d8:	fa98 f3a8 	rbit	r3, r8
 80043dc:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	fa98 f3a8 	rbit	r3, r8
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	fa06 f303 	lsl.w	r3, r6, r3
 80043f2:	4213      	tst	r3, r2
 80043f4:	d1e9      	bne.n	80043ca <HAL_RCC_OscConfig+0x2a2>
 80043f6:	e783      	b.n	8004300 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80043fe:	61da      	str	r2, [r3, #28]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800440a:	f04f 0801 	mov.w	r8, #1
 800440e:	e734      	b.n	800427a <HAL_RCC_OscConfig+0x152>
 8004410:	40021000 	.word	0x40021000
 8004414:	40007000 	.word	0x40007000
 8004418:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800441c:	684a      	ldr	r2, [r1, #4]
 800441e:	03d2      	lsls	r2, r2, #15
 8004420:	f57f ae99 	bpl.w	8004156 <HAL_RCC_OscConfig+0x2e>
 8004424:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004428:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	49b1      	ldr	r1, [pc, #708]	; (80046f4 <HAL_RCC_OscConfig+0x5cc>)
 800442e:	6808      	ldr	r0, [r1, #0]
 8004430:	fa92 f2a2 	rbit	r2, r2
 8004434:	fab2 f282 	clz	r2, r2
 8004438:	f002 021f 	and.w	r2, r2, #31
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f202 	lsl.w	r2, r1, r2
 8004442:	4202      	tst	r2, r0
 8004444:	f43f aeca 	beq.w	80041dc <HAL_RCC_OscConfig+0xb4>
 8004448:	6862      	ldr	r2, [r4, #4]
 800444a:	2a00      	cmp	r2, #0
 800444c:	f47f aec6 	bne.w	80041dc <HAL_RCC_OscConfig+0xb4>
 8004450:	e7a7      	b.n	80043a2 <HAL_RCC_OscConfig+0x27a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4da8      	ldr	r5, [pc, #672]	; (80046f4 <HAL_RCC_OscConfig+0x5cc>)
 8004454:	22f8      	movs	r2, #248	; 0xf8
 8004456:	6828      	ldr	r0, [r5, #0]
 8004458:	fa92 f2a2 	rbit	r2, r2
 800445c:	fab2 f182 	clz	r1, r2
 8004460:	6962      	ldr	r2, [r4, #20]
 8004462:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 8004466:	408a      	lsls	r2, r1
 8004468:	4302      	orrs	r2, r0
 800446a:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446c:	071d      	lsls	r5, r3, #28
 800446e:	f57f aefb 	bpl.w	8004268 <HAL_RCC_OscConfig+0x140>
 8004472:	e71b      	b.n	80042ac <HAL_RCC_OscConfig+0x184>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800447c:	f7fe f86a 	bl	8002554 <HAL_GetTick>
 8004480:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004482:	682b      	ldr	r3, [r5, #0]
 8004484:	05db      	lsls	r3, r3, #23
 8004486:	f53f aefd 	bmi.w	8004284 <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7fe f863 	bl	8002554 <HAL_GetTick>
 800448e:	1b80      	subs	r0, r0, r6
 8004490:	2864      	cmp	r0, #100	; 0x64
 8004492:	d9f6      	bls.n	8004482 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8004494:	2003      	movs	r0, #3
}
 8004496:	b003      	add	sp, #12
 8004498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449c:	4d95      	ldr	r5, [pc, #596]	; (80046f4 <HAL_RCC_OscConfig+0x5cc>)
 800449e:	682b      	ldr	r3, [r5, #0]
 80044a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a4:	602b      	str	r3, [r5, #0]
 80044a6:	682b      	ldr	r3, [r5, #0]
 80044a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ac:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044ae:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80044b0:	68a2      	ldr	r2, [r4, #8]
 80044b2:	f023 030f 	bic.w	r3, r3, #15
 80044b6:	4313      	orrs	r3, r2
 80044b8:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 80044ba:	f7fe f84b 	bl	8002554 <HAL_GetTick>
 80044be:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80044c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c4:	2701      	movs	r7, #1
 80044c6:	e004      	b.n	80044d2 <HAL_RCC_OscConfig+0x3aa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fe f844 	bl	8002554 <HAL_GetTick>
 80044cc:	1b80      	subs	r0, r0, r6
 80044ce:	2864      	cmp	r0, #100	; 0x64
 80044d0:	d8e0      	bhi.n	8004494 <HAL_RCC_OscConfig+0x36c>
 80044d2:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	682a      	ldr	r2, [r5, #0]
 80044d8:	fa98 f3a8 	rbit	r3, r8
 80044dc:	fab3 f383 	clz	r3, r3
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	fa07 f303 	lsl.w	r3, r7, r3
 80044e8:	4213      	tst	r3, r2
 80044ea:	d1ed      	bne.n	80044c8 <HAL_RCC_OscConfig+0x3a0>
 80044ec:	e675      	b.n	80041da <HAL_RCC_OscConfig+0xb2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ee:	4d81      	ldr	r5, [pc, #516]	; (80046f4 <HAL_RCC_OscConfig+0x5cc>)
 80044f0:	6a2b      	ldr	r3, [r5, #32]
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	622b      	str	r3, [r5, #32]
 80044f8:	6a2b      	ldr	r3, [r5, #32]
 80044fa:	f023 0304 	bic.w	r3, r3, #4
 80044fe:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004500:	f7fe f828 	bl	8002554 <HAL_GetTick>
 8004504:	f04f 0902 	mov.w	r9, #2
 8004508:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450a:	2701      	movs	r7, #1
 800450c:	e013      	b.n	8004536 <HAL_RCC_OscConfig+0x40e>
 800450e:	fa99 f3a9 	rbit	r3, r9
 8004512:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004514:	fa99 f3a9 	rbit	r3, r9
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	fa07 f303 	lsl.w	r3, r7, r3
 8004524:	4213      	tst	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004528:	f7fe f814 	bl	8002554 <HAL_GetTick>
 800452c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004530:	1b80      	subs	r0, r0, r6
 8004532:	4298      	cmp	r0, r3
 8004534:	d8ae      	bhi.n	8004494 <HAL_RCC_OscConfig+0x36c>
 8004536:	fa99 f3a9 	rbit	r3, r9
 800453a:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0e5      	beq.n	800450e <HAL_RCC_OscConfig+0x3e6>
 8004542:	6a2a      	ldr	r2, [r5, #32]
 8004544:	e7e6      	b.n	8004514 <HAL_RCC_OscConfig+0x3ec>
    if(pwrclkchanged == SET)
 8004546:	f1b8 0f00 	cmp.w	r8, #0
 800454a:	f43f aedc 	beq.w	8004306 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_DISABLE();
 800454e:	4a69      	ldr	r2, [pc, #420]	; (80046f4 <HAL_RCC_OscConfig+0x5cc>)
 8004550:	69d3      	ldr	r3, [r2, #28]
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	61d3      	str	r3, [r2, #28]
 8004558:	e6d5      	b.n	8004306 <HAL_RCC_OscConfig+0x1de>
 800455a:	2601      	movs	r6, #1
 800455c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8004560:	fab3 f383 	clz	r3, r3
 8004564:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004568:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800456c:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	4f61      	ldr	r7, [pc, #388]	; (80046f4 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_HSI_DISABLE();
 8004570:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004572:	f7fd ffef 	bl	8002554 <HAL_GetTick>
 8004576:	f04f 0802 	mov.w	r8, #2
 800457a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457c:	e004      	b.n	8004588 <HAL_RCC_OscConfig+0x460>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800457e:	f7fd ffe9 	bl	8002554 <HAL_GetTick>
 8004582:	1b40      	subs	r0, r0, r5
 8004584:	2802      	cmp	r0, #2
 8004586:	d885      	bhi.n	8004494 <HAL_RCC_OscConfig+0x36c>
 8004588:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	fa98 f3a8 	rbit	r3, r8
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	fa06 f303 	lsl.w	r3, r6, r3
 800459e:	4213      	tst	r3, r2
 80045a0:	d1ed      	bne.n	800457e <HAL_RCC_OscConfig+0x456>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	e65e      	b.n	8004264 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045a6:	4a53      	ldr	r2, [pc, #332]	; (80046f4 <HAL_RCC_OscConfig+0x5cc>)
 80045a8:	6a13      	ldr	r3, [r2, #32]
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80045b0:	f7fd ffd0 	bl	8002554 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b4:	4f4f      	ldr	r7, [pc, #316]	; (80046f4 <HAL_RCC_OscConfig+0x5cc>)
      tickstart = HAL_GetTick();
 80045b6:	4605      	mov	r5, r0
 80045b8:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	2601      	movs	r6, #1
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x4c2>
 80045c0:	fa99 f3a9 	rbit	r3, r9
 80045c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c6:	fa99 f3a9 	rbit	r3, r9
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	f003 031f 	and.w	r3, r3, #31
 80045d2:	fa06 f303 	lsl.w	r3, r6, r3
 80045d6:	4213      	tst	r3, r2
 80045d8:	d1b5      	bne.n	8004546 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fd ffbb 	bl	8002554 <HAL_GetTick>
 80045de:	f241 3388 	movw	r3, #5000	; 0x1388
 80045e2:	1b40      	subs	r0, r0, r5
 80045e4:	4298      	cmp	r0, r3
 80045e6:	f63f af55 	bhi.w	8004494 <HAL_RCC_OscConfig+0x36c>
 80045ea:	fa99 f3a9 	rbit	r3, r9
 80045ee:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0e4      	beq.n	80045c0 <HAL_RCC_OscConfig+0x498>
 80045f6:	6a3a      	ldr	r2, [r7, #32]
 80045f8:	e7e5      	b.n	80045c6 <HAL_RCC_OscConfig+0x49e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045fa:	2801      	cmp	r0, #1
 80045fc:	f43f aeb7 	beq.w	800436e <HAL_RCC_OscConfig+0x246>
        pll_config = RCC->CFGR;
 8004600:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004602:	6a22      	ldr	r2, [r4, #32]
 8004604:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004608:	4291      	cmp	r1, r2
 800460a:	f47f aeca 	bne.w	80043a2 <HAL_RCC_OscConfig+0x27a>
 800460e:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004610:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8004614:	1a18      	subs	r0, r3, r0
 8004616:	bf18      	it	ne
 8004618:	2001      	movne	r0, #1
 800461a:	e6a8      	b.n	800436e <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800461c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004620:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e5a3      	b.n	800417e <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004636:	f042 0204 	orr.w	r2, r2, #4
 800463a:	621a      	str	r2, [r3, #32]
 800463c:	6a1a      	ldr	r2, [r3, #32]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	621a      	str	r2, [r3, #32]
 8004644:	e7b4      	b.n	80045b0 <HAL_RCC_OscConfig+0x488>
    return HAL_ERROR;
 8004646:	2001      	movs	r0, #1
}
 8004648:	4770      	bx	lr
 800464a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800464e:	fab3 f383 	clz	r3, r3
 8004652:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004656:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004660:	f7fd ff78 	bl	8002554 <HAL_GetTick>
 8004664:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8004668:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800466a:	2701      	movs	r7, #1
 800466c:	e005      	b.n	800467a <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466e:	f7fd ff71 	bl	8002554 <HAL_GetTick>
 8004672:	1b80      	subs	r0, r0, r6
 8004674:	2802      	cmp	r0, #2
 8004676:	f63f af0d 	bhi.w	8004494 <HAL_RCC_OscConfig+0x36c>
 800467a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800467e:	682a      	ldr	r2, [r5, #0]
 8004680:	fa98 f3a8 	rbit	r3, r8
 8004684:	fab3 f383 	clz	r3, r3
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	fa07 f303 	lsl.w	r3, r7, r3
 8004690:	4213      	tst	r3, r2
 8004692:	d1ec      	bne.n	800466e <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004694:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8004698:	686a      	ldr	r2, [r5, #4]
 800469a:	430b      	orrs	r3, r1
 800469c:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80046a0:	4313      	orrs	r3, r2
 80046a2:	606b      	str	r3, [r5, #4]
 80046a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80046ac:	fab3 f383 	clz	r3, r3
 80046b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80046b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80046b8:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ba:	4d0e      	ldr	r5, [pc, #56]	; (80046f4 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_PLL_ENABLE();
 80046bc:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 80046be:	f7fd ff49 	bl	8002554 <HAL_GetTick>
 80046c2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80046c6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046c8:	2601      	movs	r6, #1
 80046ca:	e005      	b.n	80046d8 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046cc:	f7fd ff42 	bl	8002554 <HAL_GetTick>
 80046d0:	1b00      	subs	r0, r0, r4
 80046d2:	2802      	cmp	r0, #2
 80046d4:	f63f aede 	bhi.w	8004494 <HAL_RCC_OscConfig+0x36c>
 80046d8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046dc:	682a      	ldr	r2, [r5, #0]
 80046de:	fa97 f3a7 	rbit	r3, r7
 80046e2:	fab3 f383 	clz	r3, r3
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	fa06 f303 	lsl.w	r3, r6, r3
 80046ee:	4213      	tst	r3, r2
 80046f0:	d0ec      	beq.n	80046cc <HAL_RCC_OscConfig+0x5a4>
 80046f2:	e63b      	b.n	800436c <HAL_RCC_OscConfig+0x244>
 80046f4:	40021000 	.word	0x40021000

080046f8 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046f8:	2800      	cmp	r0, #0
 80046fa:	f000 80c8 	beq.w	800488e <HAL_RCC_ClockConfig+0x196>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046fe:	4a6f      	ldr	r2, [pc, #444]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	6813      	ldr	r3, [r2, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	428b      	cmp	r3, r1
{
 8004708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470c:	460d      	mov	r5, r1
 800470e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004710:	d20c      	bcs.n	800472c <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	6813      	ldr	r3, [r2, #0]
 8004714:	f023 0307 	bic.w	r3, r3, #7
 8004718:	430b      	orrs	r3, r1
 800471a:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471c:	6813      	ldr	r3, [r2, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	428b      	cmp	r3, r1
 8004724:	d002      	beq.n	800472c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004726:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 8004728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	079f      	lsls	r7, r3, #30
 8004730:	d506      	bpl.n	8004740 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004732:	4963      	ldr	r1, [pc, #396]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	68a0      	ldr	r0, [r4, #8]
 8004736:	684a      	ldr	r2, [r1, #4]
 8004738:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800473c:	4302      	orrs	r2, r0
 800473e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004740:	07de      	lsls	r6, r3, #31
 8004742:	d52f      	bpl.n	80047a4 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004744:	6861      	ldr	r1, [r4, #4]
 8004746:	2901      	cmp	r1, #1
 8004748:	f000 80a3 	beq.w	8004892 <HAL_RCC_ClockConfig+0x19a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474c:	2902      	cmp	r1, #2
 800474e:	f000 808b 	beq.w	8004868 <HAL_RCC_ClockConfig+0x170>
 8004752:	2202      	movs	r2, #2
 8004754:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004758:	4b59      	ldr	r3, [pc, #356]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	fa92 f2a2 	rbit	r2, r2
 8004760:	fab2 f282 	clz	r2, r2
 8004764:	f002 021f 	and.w	r2, r2, #31
 8004768:	2301      	movs	r3, #1
 800476a:	fa03 f202 	lsl.w	r2, r3, r2
 800476e:	4202      	tst	r2, r0
 8004770:	d0d9      	beq.n	8004726 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004772:	4e53      	ldr	r6, [pc, #332]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004774:	6873      	ldr	r3, [r6, #4]
 8004776:	f023 0303 	bic.w	r3, r3, #3
 800477a:	430b      	orrs	r3, r1
 800477c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800477e:	f7fd fee9 	bl	8002554 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004782:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004786:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004788:	e005      	b.n	8004796 <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478a:	f7fd fee3 	bl	8002554 <HAL_GetTick>
 800478e:	1bc0      	subs	r0, r0, r7
 8004790:	4540      	cmp	r0, r8
 8004792:	f200 8090 	bhi.w	80048b6 <HAL_RCC_ClockConfig+0x1be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	6873      	ldr	r3, [r6, #4]
 8004798:	6862      	ldr	r2, [r4, #4]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80047a2:	d1f2      	bne.n	800478a <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a4:	4a45      	ldr	r2, [pc, #276]	; (80048bc <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	42ab      	cmp	r3, r5
 80047ae:	d909      	bls.n	80047c4 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b0:	6813      	ldr	r3, [r2, #0]
 80047b2:	f023 0307 	bic.w	r3, r3, #7
 80047b6:	432b      	orrs	r3, r5
 80047b8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	6813      	ldr	r3, [r2, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	42ab      	cmp	r3, r5
 80047c2:	d1b0      	bne.n	8004726 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	0758      	lsls	r0, r3, #29
 80047c8:	d506      	bpl.n	80047d8 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ca:	493d      	ldr	r1, [pc, #244]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 80047cc:	68e0      	ldr	r0, [r4, #12]
 80047ce:	684a      	ldr	r2, [r1, #4]
 80047d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047d4:	4302      	orrs	r2, r0
 80047d6:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	0719      	lsls	r1, r3, #28
 80047da:	d507      	bpl.n	80047ec <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047dc:	4a38      	ldr	r2, [pc, #224]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	6921      	ldr	r1, [r4, #16]
 80047e0:	6853      	ldr	r3, [r2, #4]
 80047e2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80047e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80047ea:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80047ec:	4934      	ldr	r1, [pc, #208]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ee:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047f0:	f002 030c 	and.w	r3, r2, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d017      	beq.n	8004828 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047f8:	4932      	ldr	r1, [pc, #200]	; (80048c4 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 80047fc:	22f0      	movs	r2, #240	; 0xf0
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	fa92 f2a2 	rbit	r2, r2
 8004804:	fab2 f282 	clz	r2, r2
 8004808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480c:	40d3      	lsrs	r3, r2
 800480e:	4a2e      	ldr	r2, [pc, #184]	; (80048c8 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8004810:	482e      	ldr	r0, [pc, #184]	; (80048cc <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004812:	5cd3      	ldrb	r3, [r2, r3]
 8004814:	4a2e      	ldr	r2, [pc, #184]	; (80048d0 <HAL_RCC_ClockConfig+0x1d8>)
  HAL_InitTick (uwTickPrio);
 8004816:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004818:	fa21 f303 	lsr.w	r3, r1, r3
 800481c:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800481e:	f7fd fe57 	bl	80024d0 <HAL_InitTick>
  return HAL_OK;
 8004822:	2000      	movs	r0, #0
}
 8004824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004828:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800482c:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004830:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 8004834:	fab3 f383 	clz	r3, r3
 8004838:	4c26      	ldr	r4, [pc, #152]	; (80048d4 <HAL_RCC_ClockConfig+0x1dc>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800483a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800483c:	fa20 f303 	lsr.w	r3, r0, r3
 8004840:	200f      	movs	r0, #15
 8004842:	5ce3      	ldrb	r3, [r4, r3]
 8004844:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004848:	fab0 f080 	clz	r0, r0
 800484c:	f001 010f 	and.w	r1, r1, #15
 8004850:	40c1      	lsrs	r1, r0
 8004852:	4c21      	ldr	r4, [pc, #132]	; (80048d8 <HAL_RCC_ClockConfig+0x1e0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004854:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004856:	5c60      	ldrb	r0, [r4, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004858:	bf4a      	itet	mi
 800485a:	491a      	ldrmi	r1, [pc, #104]	; (80048c4 <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800485c:	491f      	ldrpl	r1, [pc, #124]	; (80048dc <HAL_RCC_ClockConfig+0x1e4>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800485e:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004862:	fb03 f101 	mul.w	r1, r3, r1
 8004866:	e7c8      	b.n	80047fa <HAL_RCC_ClockConfig+0x102>
 8004868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800486c:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004870:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004872:	6810      	ldr	r0, [r2, #0]
 8004874:	fa93 f3a3 	rbit	r3, r3
 8004878:	fab3 f383 	clz	r3, r3
 800487c:	f003 031f 	and.w	r3, r3, #31
 8004880:	2201      	movs	r2, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	4203      	tst	r3, r0
 8004888:	f47f af73 	bne.w	8004772 <HAL_RCC_ClockConfig+0x7a>
 800488c:	e74b      	b.n	8004726 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800488e:	2001      	movs	r0, #1
}
 8004890:	4770      	bx	lr
 8004892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004896:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	fa92 f2a2 	rbit	r2, r2
 80048a2:	fab2 f282 	clz	r2, r2
 80048a6:	f002 021f 	and.w	r2, r2, #31
 80048aa:	fa01 f202 	lsl.w	r2, r1, r2
 80048ae:	421a      	tst	r2, r3
 80048b0:	f47f af5f 	bne.w	8004772 <HAL_RCC_ClockConfig+0x7a>
 80048b4:	e737      	b.n	8004726 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80048b6:	2003      	movs	r0, #3
 80048b8:	e736      	b.n	8004728 <HAL_RCC_ClockConfig+0x30>
 80048ba:	bf00      	nop
 80048bc:	40022000 	.word	0x40022000
 80048c0:	40021000 	.word	0x40021000
 80048c4:	007a1200 	.word	0x007a1200
 80048c8:	08009f84 	.word	0x08009f84
 80048cc:	20000008 	.word	0x20000008
 80048d0:	20000000 	.word	0x20000000
 80048d4:	08009f9c 	.word	0x08009f9c
 80048d8:	08009fac 	.word	0x08009fac
 80048dc:	003d0900 	.word	0x003d0900

080048e0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80048e0:	4915      	ldr	r1, [pc, #84]	; (8004938 <HAL_RCC_GetSysClockFreq+0x58>)
 80048e2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80048e4:	f003 020c 	and.w	r2, r3, #12
 80048e8:	2a08      	cmp	r2, #8
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80048ec:	4813      	ldr	r0, [pc, #76]	; (800493c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80048ee:	4770      	bx	lr
{
 80048f0:	b410      	push	{r4}
 80048f2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80048f6:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80048fa:	fab2 f282 	clz	r2, r2
 80048fe:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8004902:	4c0f      	ldr	r4, [pc, #60]	; (8004940 <HAL_RCC_GetSysClockFreq+0x60>)
 8004904:	40d0      	lsrs	r0, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004906:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004908:	5c20      	ldrb	r0, [r4, r0]
 800490a:	210f      	movs	r1, #15
 800490c:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004910:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004912:	fab1 f181 	clz	r1, r1
 8004916:	f002 020f 	and.w	r2, r2, #15
 800491a:	4c0a      	ldr	r4, [pc, #40]	; (8004944 <HAL_RCC_GetSysClockFreq+0x64>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800491c:	bf4c      	ite	mi
 800491e:	4b07      	ldrmi	r3, [pc, #28]	; (800493c <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004920:	4b09      	ldrpl	r3, [pc, #36]	; (8004948 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004922:	fa22 f201 	lsr.w	r2, r2, r1
 8004926:	5ca2      	ldrb	r2, [r4, r2]
}
 8004928:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800492c:	bf48      	it	mi
 800492e:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004932:	fb03 f000 	mul.w	r0, r3, r0
}
 8004936:	4770      	bx	lr
 8004938:	40021000 	.word	0x40021000
 800493c:	007a1200 	.word	0x007a1200
 8004940:	08009f9c 	.word	0x08009f9c
 8004944:	08009fac 	.word	0x08009fac
 8004948:	003d0900 	.word	0x003d0900

0800494c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800494c:	4b08      	ldr	r3, [pc, #32]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x24>)
 800494e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	fa92 f2a2 	rbit	r2, r2
 8004958:	fab2 f282 	clz	r2, r2
 800495c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004960:	4904      	ldr	r1, [pc, #16]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8004962:	4805      	ldr	r0, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004964:	40d3      	lsrs	r3, r2
 8004966:	6800      	ldr	r0, [r0, #0]
 8004968:	5ccb      	ldrb	r3, [r1, r3]
}    
 800496a:	40d8      	lsrs	r0, r3
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	08009f94 	.word	0x08009f94
 8004978:	20000000 	.word	0x20000000

0800497c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800497c:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800497e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	fa92 f2a2 	rbit	r2, r2
 8004988:	fab2 f282 	clz	r2, r2
 800498c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004990:	4904      	ldr	r1, [pc, #16]	; (80049a4 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8004992:	4805      	ldr	r0, [pc, #20]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004994:	40d3      	lsrs	r3, r2
 8004996:	6800      	ldr	r0, [r0, #0]
 8004998:	5ccb      	ldrb	r3, [r1, r3]
} 
 800499a:	40d8      	lsrs	r0, r3
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40021000 	.word	0x40021000
 80049a4:	08009f94 	.word	0x08009f94
 80049a8:	20000000 	.word	0x20000000

080049ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049b0:	6803      	ldr	r3, [r0, #0]
 80049b2:	03dd      	lsls	r5, r3, #15
{
 80049b4:	b083      	sub	sp, #12
 80049b6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049b8:	d540      	bpl.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ba:	4b84      	ldr	r3, [pc, #528]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	00d0      	lsls	r0, r2, #3
 80049c0:	f140 80ba 	bpl.w	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c4:	4e82      	ldr	r6, [pc, #520]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80049c6:	6833      	ldr	r3, [r6, #0]
 80049c8:	05d9      	lsls	r1, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 80049ca:	f04f 0500 	mov.w	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ce:	f140 80c3 	bpl.w	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049d2:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>
 80049d6:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80049de:	d020      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049e0:	6861      	ldr	r1, [r4, #4]
 80049e2:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d01c      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049ea:	f8d8 1020 	ldr.w	r1, [r8, #32]
 80049ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049f2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80049f6:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049fa:	4f76      	ldr	r7, [pc, #472]	; (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80049fc:	fab2 f282 	clz	r2, r2
 8004a00:	443a      	add	r2, r7
 8004a02:	0092      	lsls	r2, r2, #2
 8004a04:	2601      	movs	r6, #1
 8004a06:	6016      	str	r6, [r2, #0]
 8004a08:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a0c:	fab3 f383 	clz	r3, r3
 8004a10:	443b      	add	r3, r7
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a18:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8004a1a:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a1e:	f100 80af 	bmi.w	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004a22:	6861      	ldr	r1, [r4, #4]
 8004a24:	4a69      	ldr	r2, [pc, #420]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a26:	6a13      	ldr	r3, [r2, #32]
 8004a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a30:	b11d      	cbz	r5, 8004a3a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a32:	69d3      	ldr	r3, [r2, #28]
 8004a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a38:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	07df      	lsls	r7, r3, #31
 8004a3e:	d506      	bpl.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a40:	4962      	ldr	r1, [pc, #392]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a42:	68a0      	ldr	r0, [r4, #8]
 8004a44:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004a46:	f022 0203 	bic.w	r2, r2, #3
 8004a4a:	4302      	orrs	r2, r0
 8004a4c:	630a      	str	r2, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a4e:	079e      	lsls	r6, r3, #30
 8004a50:	d506      	bpl.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a52:	495e      	ldr	r1, [pc, #376]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a54:	68e0      	ldr	r0, [r4, #12]
 8004a56:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004a58:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004a5c:	4302      	orrs	r2, r0
 8004a5e:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a60:	075d      	lsls	r5, r3, #29
 8004a62:	d506      	bpl.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a64:	4959      	ldr	r1, [pc, #356]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a66:	6920      	ldr	r0, [r4, #16]
 8004a68:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004a6a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004a6e:	4302      	orrs	r2, r0
 8004a70:	630a      	str	r2, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a72:	0698      	lsls	r0, r3, #26
 8004a74:	d506      	bpl.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a76:	4955      	ldr	r1, [pc, #340]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a78:	69e0      	ldr	r0, [r4, #28]
 8004a7a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004a7c:	f022 0210 	bic.w	r2, r2, #16
 8004a80:	4302      	orrs	r2, r0
 8004a82:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a84:	0399      	lsls	r1, r3, #14
 8004a86:	d506      	bpl.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a88:	4950      	ldr	r1, [pc, #320]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a8a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a8c:	684a      	ldr	r2, [r1, #4]
 8004a8e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004a92:	4302      	orrs	r2, r0
 8004a94:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a96:	065a      	lsls	r2, r3, #25
 8004a98:	d506      	bpl.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a9a:	494c      	ldr	r1, [pc, #304]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a9c:	6a20      	ldr	r0, [r4, #32]
 8004a9e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004aa0:	f022 0220 	bic.w	r2, r2, #32
 8004aa4:	4302      	orrs	r2, r0
 8004aa6:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aa8:	071f      	lsls	r7, r3, #28
 8004aaa:	d506      	bpl.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aac:	4947      	ldr	r1, [pc, #284]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004aae:	6960      	ldr	r0, [r4, #20]
 8004ab0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004ab2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004ab6:	4302      	orrs	r2, r0
 8004ab8:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aba:	06de      	lsls	r6, r3, #27
 8004abc:	d506      	bpl.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004abe:	4943      	ldr	r1, [pc, #268]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ac0:	69a0      	ldr	r0, [r4, #24]
 8004ac2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004ac4:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004ac8:	4302      	orrs	r2, r0
 8004aca:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004acc:	059d      	lsls	r5, r3, #22
 8004ace:	d506      	bpl.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ad0:	493e      	ldr	r1, [pc, #248]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ad2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004ad4:	684a      	ldr	r2, [r1, #4]
 8004ad6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004ada:	4302      	orrs	r2, r0
 8004adc:	604a      	str	r2, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004ade:	0618      	lsls	r0, r3, #24
 8004ae0:	d506      	bpl.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ae2:	493a      	ldr	r1, [pc, #232]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ae4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ae6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004ae8:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8004aec:	4302      	orrs	r2, r0
 8004aee:	62ca      	str	r2, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004af0:	05d9      	lsls	r1, r3, #23
 8004af2:	d506      	bpl.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004af4:	4935      	ldr	r1, [pc, #212]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004af6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004af8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004afa:	f422 5278 	bic.w	r2, r2, #15872	; 0x3e00
 8004afe:	4302      	orrs	r2, r0
 8004b00:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b02:	04da      	lsls	r2, r3, #19
 8004b04:	d506      	bpl.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b06:	4931      	ldr	r1, [pc, #196]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b08:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b0a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b10:	4302      	orrs	r2, r0
 8004b12:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b14:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
 8004b18:	d103      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b1a:	4618      	mov	r0, r3
}
 8004b1c:	b003      	add	sp, #12
 8004b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b22:	4a2a      	ldr	r2, [pc, #168]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  return HAL_OK;
 8004b2c:	2000      	movs	r0, #0
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
}
 8004b32:	b003      	add	sp, #12
 8004b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b38:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3a:	4e25      	ldr	r6, [pc, #148]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x224>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b40:	61da      	str	r2, [r3, #28]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b48:	9301      	str	r3, [sp, #4]
 8004b4a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	05d9      	lsls	r1, r3, #23
      pwrclkchanged = SET;
 8004b50:	f04f 0501 	mov.w	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	f53f af3d 	bmi.w	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b58:	6833      	ldr	r3, [r6, #0]
 8004b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004b60:	f7fd fcf8 	bl	8002554 <HAL_GetTick>
 8004b64:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b66:	6833      	ldr	r3, [r6, #0]
 8004b68:	05da      	lsls	r2, r3, #23
 8004b6a:	f53f af32 	bmi.w	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b6e:	f7fd fcf1 	bl	8002554 <HAL_GetTick>
 8004b72:	1bc0      	subs	r0, r0, r7
 8004b74:	2864      	cmp	r0, #100	; 0x64
 8004b76:	d9f6      	bls.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
          return HAL_TIMEOUT;
 8004b78:	2003      	movs	r0, #3
}
 8004b7a:	b003      	add	sp, #12
 8004b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8004b80:	f7fd fce8 	bl	8002554 <HAL_GetTick>
 8004b84:	f04f 0902 	mov.w	r9, #2
 8004b88:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8a:	e015      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8004b8c:	fa99 f3a9 	rbit	r3, r9
 8004b90:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004b94:	fa99 f3a9 	rbit	r3, r9
 8004b98:	fab3 f383 	clz	r3, r3
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa06 f303 	lsl.w	r3, r6, r3
 8004ba4:	4213      	tst	r3, r2
 8004ba6:	f47f af3c 	bne.w	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fd fcd3 	bl	8002554 <HAL_GetTick>
 8004bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8004bb2:	1bc0      	subs	r0, r0, r7
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	d8df      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004bb8:	fa99 f3a9 	rbit	r3, r9
 8004bbc:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0e3      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8004bc4:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004bc8:	e7e4      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004bca:	bf00      	nop
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	40007000 	.word	0x40007000
 8004bd4:	10908100 	.word	0x10908100

08004bd8 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	d077      	beq.n	8004ccc <HAL_SPI_Init+0xf4>
{
 8004bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004be0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004be2:	4604      	mov	r4, r0
 8004be4:	2e00      	cmp	r6, #0
 8004be6:	d058      	beq.n	8004c9a <HAL_SPI_Init+0xc2>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bee:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d059      	beq.n	8004cb2 <HAL_SPI_Init+0xda>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bfe:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c00:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004c02:	2302      	movs	r3, #2
 8004c04:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8004c08:	6808      	ldr	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c0a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8004c0e:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8004c12:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c14:	d947      	bls.n	8004ca6 <HAL_SPI_Init+0xce>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c16:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 8004c1a:	d159      	bne.n	8004cd0 <HAL_SPI_Init+0xf8>
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c1e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c20:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8004c24:	68a3      	ldr	r3, [r4, #8]
 8004c26:	6a27      	ldr	r7, [r4, #32]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c28:	f402 6e70 	and.w	lr, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c2c:	6862      	ldr	r2, [r4, #4]
 8004c2e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c32:	f402 7282 	and.w	r2, r2, #260	; 0x104
 8004c36:	431a      	orrs	r2, r3
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	6963      	ldr	r3, [r4, #20]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	f006 0c10 	and.w	ip, r6, #16
 8004c52:	ea43 0e0e 	orr.w	lr, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c56:	69a6      	ldr	r6, [r4, #24]
 8004c58:	69e3      	ldr	r3, [r4, #28]
 8004c5a:	f003 0838 	and.w	r8, r3, #56	; 0x38
 8004c5e:	f406 7300 	and.w	r3, r6, #512	; 0x200
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8004c68:	ea43 0308 	orr.w	r3, r3, r8
 8004c6c:	433b      	orrs	r3, r7
 8004c6e:	432b      	orrs	r3, r5
 8004c70:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c72:	0c33      	lsrs	r3, r6, #16
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	ea4e 0303 	orr.w	r3, lr, r3
 8004c7c:	ea43 030c 	orr.w	r3, r3, ip
 8004c80:	4303      	orrs	r3, r0
 8004c82:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c84:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c86:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004c8c:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c8e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c90:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c92:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8004c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c9a:	6843      	ldr	r3, [r0, #4]
 8004c9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ca0:	d0a5      	beq.n	8004bee <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ca2:	61c6      	str	r6, [r0, #28]
 8004ca4:	e7a3      	b.n	8004bee <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_SPI_Init+0xe8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ca8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cac:	2500      	movs	r5, #0
 8004cae:	62a5      	str	r5, [r4, #40]	; 0x28
 8004cb0:	e7b8      	b.n	8004c24 <HAL_SPI_Init+0x4c>
    hspi->Lock = HAL_UNLOCKED;
 8004cb2:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7fc ffa2 	bl	8001c00 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cbc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004cbe:	e79e      	b.n	8004bfe <HAL_SPI_Init+0x26>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cc2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc6:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
 8004cca:	e7ab      	b.n	8004c24 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 8004ccc:	2001      	movs	r0, #1
}
 8004cce:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	e7eb      	b.n	8004cac <HAL_SPI_Init+0xd4>

08004cd4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cd4:	6a03      	ldr	r3, [r0, #32]
 8004cd6:	f023 0301 	bic.w	r3, r3, #1
 8004cda:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cdc:	6a03      	ldr	r3, [r0, #32]
{
 8004cde:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ce2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004cea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004cee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cf0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004cf2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004cf6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf8:	4d13      	ldr	r5, [pc, #76]	; (8004d48 <TIM_OC1_SetConfig+0x74>)
 8004cfa:	42a8      	cmp	r0, r5
 8004cfc:	d00f      	beq.n	8004d1e <TIM_OC1_SetConfig+0x4a>
 8004cfe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004d02:	42a8      	cmp	r0, r5
 8004d04:	d00b      	beq.n	8004d1e <TIM_OC1_SetConfig+0x4a>
 8004d06:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004d0a:	42a8      	cmp	r0, r5
 8004d0c:	d007      	beq.n	8004d1e <TIM_OC1_SetConfig+0x4a>
 8004d0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d12:	42a8      	cmp	r0, r5
 8004d14:	d003      	beq.n	8004d1e <TIM_OC1_SetConfig+0x4a>
 8004d16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d1a:	42a8      	cmp	r0, r5
 8004d1c:	d10d      	bne.n	8004d3a <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d1e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d20:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004d24:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d26:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d2a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d2e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d32:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d36:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d3a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004d3c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004d3e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004d40:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8004d42:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004d44:	6203      	str	r3, [r0, #32]
}
 8004d46:	4770      	bx	lr
 8004d48:	40012c00 	.word	0x40012c00

08004d4c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d4c:	6a03      	ldr	r3, [r0, #32]
 8004d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d52:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d54:	6a03      	ldr	r3, [r0, #32]
{
 8004d56:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d62:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004d66:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d68:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004d6a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d72:	4d15      	ldr	r5, [pc, #84]	; (8004dc8 <TIM_OC3_SetConfig+0x7c>)
 8004d74:	42a8      	cmp	r0, r5
 8004d76:	d010      	beq.n	8004d9a <TIM_OC3_SetConfig+0x4e>
 8004d78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004d7c:	42a8      	cmp	r0, r5
 8004d7e:	d00c      	beq.n	8004d9a <TIM_OC3_SetConfig+0x4e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d80:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004d84:	42a8      	cmp	r0, r5
 8004d86:	d00f      	beq.n	8004da8 <TIM_OC3_SetConfig+0x5c>
 8004d88:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d8c:	42a8      	cmp	r0, r5
 8004d8e:	d00b      	beq.n	8004da8 <TIM_OC3_SetConfig+0x5c>
 8004d90:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d94:	42a8      	cmp	r0, r5
 8004d96:	d10f      	bne.n	8004db8 <TIM_OC3_SetConfig+0x6c>
 8004d98:	e006      	b.n	8004da8 <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d9a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004da0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004da8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dac:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004db0:	ea46 0c05 	orr.w	ip, r6, r5
 8004db4:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004db8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004dba:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004dbc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004dbe:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8004dc0:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004dc2:	6203      	str	r3, [r0, #32]
}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40012c00 	.word	0x40012c00

08004dcc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004dcc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d122      	bne.n	8004e1a <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd6:	4917      	ldr	r1, [pc, #92]	; (8004e34 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dde:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de8:	d019      	beq.n	8004e1e <HAL_TIM_Base_Start_IT+0x52>
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dee:	d016      	beq.n	8004e1e <HAL_TIM_Base_Start_IT+0x52>
 8004df0:	4a11      	ldr	r2, [pc, #68]	; (8004e38 <HAL_TIM_Base_Start_IT+0x6c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_TIM_Base_Start_IT+0x52>
 8004df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00f      	beq.n	8004e1e <HAL_TIM_Base_Start_IT+0x52>
 8004dfe:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <HAL_TIM_Base_Start_IT+0x52>
 8004e06:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d007      	beq.n	8004e1e <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004e14:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	4770      	bx	lr
    return HAL_ERROR;
 8004e1a:	2001      	movs	r0, #1
 8004e1c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e1e:	6899      	ldr	r1, [r3, #8]
 8004e20:	4a06      	ldr	r2, [pc, #24]	; (8004e3c <HAL_TIM_Base_Start_IT+0x70>)
 8004e22:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e24:	2a06      	cmp	r2, #6
 8004e26:	d002      	beq.n	8004e2e <HAL_TIM_Base_Start_IT+0x62>
 8004e28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004e2c:	d1ef      	bne.n	8004e0e <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8004e2e:	2000      	movs	r0, #0
}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40012c00 	.word	0x40012c00
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	00010007 	.word	0x00010007

08004e40 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004e40:	6803      	ldr	r3, [r0, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8004e4a:	6a1a      	ldr	r2, [r3, #32]
 8004e4c:	f241 1111 	movw	r1, #4369	; 0x1111
 8004e50:	420a      	tst	r2, r1
 8004e52:	d108      	bne.n	8004e66 <HAL_TIM_Base_Stop_IT+0x26>
 8004e54:	6a19      	ldr	r1, [r3, #32]
 8004e56:	f240 4244 	movw	r2, #1092	; 0x444
 8004e5a:	4211      	tst	r1, r2
 8004e5c:	d103      	bne.n	8004e66 <HAL_TIM_Base_Stop_IT+0x26>
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f000 8081 	beq.w	8004f78 <HAL_TIM_PWM_Init+0x108>
{
 8004e76:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e78:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d06d      	beq.n	8004f62 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e86:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e88:	493c      	ldr	r1, [pc, #240]	; (8004f7c <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e90:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004e92:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e94:	d051      	beq.n	8004f3a <HAL_TIM_PWM_Init+0xca>
 8004e96:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004e9a:	d021      	beq.n	8004ee0 <HAL_TIM_PWM_Init+0x70>
 8004e9c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004ea0:	428a      	cmp	r2, r1
 8004ea2:	d01d      	beq.n	8004ee0 <HAL_TIM_PWM_Init+0x70>
 8004ea4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ea8:	428a      	cmp	r2, r1
 8004eaa:	d019      	beq.n	8004ee0 <HAL_TIM_PWM_Init+0x70>
 8004eac:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8004eb0:	428a      	cmp	r2, r1
 8004eb2:	d042      	beq.n	8004f3a <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eb4:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8004eb8:	428a      	cmp	r2, r1
 8004eba:	d057      	beq.n	8004f6c <HAL_TIM_PWM_Init+0xfc>
 8004ebc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ec0:	428a      	cmp	r2, r1
 8004ec2:	d053      	beq.n	8004f6c <HAL_TIM_PWM_Init+0xfc>
 8004ec4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ec8:	428a      	cmp	r2, r1
 8004eca:	d04f      	beq.n	8004f6c <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ecc:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ece:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ed4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004ed6:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004ed8:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eda:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004edc:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ede:	e010      	b.n	8004f02 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8004ee0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ee8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eee:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef8:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004efa:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004efc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004efe:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f00:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004f02:	2301      	movs	r3, #1
 8004f04:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f06:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004f0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004f12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004f16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004f26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f2a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004f2e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004f32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004f36:	2000      	movs	r0, #0
}
 8004f38:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004f3a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f42:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f48:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f4a:	69a1      	ldr	r1, [r4, #24]
 8004f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f50:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004f52:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f54:	68e3      	ldr	r3, [r4, #12]
 8004f56:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f58:	6863      	ldr	r3, [r4, #4]
 8004f5a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004f5c:	6963      	ldr	r3, [r4, #20]
 8004f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f60:	e7cf      	b.n	8004f02 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8004f62:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004f66:	f7fc ff95 	bl	8001e94 <HAL_TIM_PWM_MspInit>
 8004f6a:	e78c      	b.n	8004e86 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f6e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f74:	4303      	orrs	r3, r0
 8004f76:	e7e9      	b.n	8004f4c <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8004f78:	2001      	movs	r0, #1
}
 8004f7a:	4770      	bx	lr
 8004f7c:	40012c00 	.word	0x40012c00

08004f80 <HAL_TIM_PWM_Start>:
 8004f80:	2900      	cmp	r1, #0
 8004f82:	d14a      	bne.n	800501a <HAL_TIM_PWM_Start+0x9a>
 8004f84:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d160      	bne.n	800504e <HAL_TIM_PWM_Start+0xce>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8004f92:	6803      	ldr	r3, [r0, #0]
 8004f94:	2201      	movs	r2, #1
 8004f96:	6a18      	ldr	r0, [r3, #32]
 8004f98:	f001 011f 	and.w	r1, r1, #31
 8004f9c:	fa02 f101 	lsl.w	r1, r2, r1
 8004fa0:	ea20 0001 	bic.w	r0, r0, r1
 8004fa4:	6218      	str	r0, [r3, #32]
 8004fa6:	6a18      	ldr	r0, [r3, #32]
 8004fa8:	4a3b      	ldr	r2, [pc, #236]	; (8005098 <HAL_TIM_PWM_Start+0x118>)
 8004faa:	4301      	orrs	r1, r0
 8004fac:	4293      	cmp	r3, r2
 8004fae:	6219      	str	r1, [r3, #32]
 8004fb0:	d059      	beq.n	8005066 <HAL_TIM_PWM_Start+0xe6>
 8004fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x52>
 8004fba:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d007      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x52>
 8004fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_PWM_Start+0x52>
 8004fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d103      	bne.n	8004fda <HAL_TIM_PWM_Start+0x5a>
 8004fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44
 8004fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fde:	d00e      	beq.n	8004ffe <HAL_TIM_PWM_Start+0x7e>
 8004fe0:	4a2e      	ldr	r2, [pc, #184]	; (800509c <HAL_TIM_PWM_Start+0x11c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <HAL_TIM_PWM_Start+0x7e>
 8004fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <HAL_TIM_PWM_Start+0x7e>
 8004fee:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_PWM_Start+0x7e>
 8004ff6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d107      	bne.n	800500e <HAL_TIM_PWM_Start+0x8e>
 8004ffe:	6899      	ldr	r1, [r3, #8]
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <HAL_TIM_PWM_Start+0x120>)
 8005002:	400a      	ands	r2, r1
 8005004:	2a06      	cmp	r2, #6
 8005006:	d024      	beq.n	8005052 <HAL_TIM_PWM_Start+0xd2>
 8005008:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800500c:	d021      	beq.n	8005052 <HAL_TIM_PWM_Start+0xd2>
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	2000      	movs	r0, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	4770      	bx	lr
 800501a:	2904      	cmp	r1, #4
 800501c:	d01b      	beq.n	8005056 <HAL_TIM_PWM_Start+0xd6>
 800501e:	2908      	cmp	r1, #8
 8005020:	d026      	beq.n	8005070 <HAL_TIM_PWM_Start+0xf0>
 8005022:	290c      	cmp	r1, #12
 8005024:	d00f      	beq.n	8005046 <HAL_TIM_PWM_Start+0xc6>
 8005026:	2910      	cmp	r1, #16
 8005028:	d02e      	beq.n	8005088 <HAL_TIM_PWM_Start+0x108>
 800502a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800502e:	2b01      	cmp	r3, #1
 8005030:	d10d      	bne.n	800504e <HAL_TIM_PWM_Start+0xce>
 8005032:	2908      	cmp	r1, #8
 8005034:	d020      	beq.n	8005078 <HAL_TIM_PWM_Start+0xf8>
 8005036:	290c      	cmp	r1, #12
 8005038:	d022      	beq.n	8005080 <HAL_TIM_PWM_Start+0x100>
 800503a:	2910      	cmp	r1, #16
 800503c:	d028      	beq.n	8005090 <HAL_TIM_PWM_Start+0x110>
 800503e:	2302      	movs	r3, #2
 8005040:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8005044:	e7a5      	b.n	8004f92 <HAL_TIM_PWM_Start+0x12>
 8005046:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800504a:	2b01      	cmp	r3, #1
 800504c:	d018      	beq.n	8005080 <HAL_TIM_PWM_Start+0x100>
 800504e:	2001      	movs	r0, #1
 8005050:	4770      	bx	lr
 8005052:	2000      	movs	r0, #0
 8005054:	4770      	bx	lr
 8005056:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800505a:	2b01      	cmp	r3, #1
 800505c:	d1f7      	bne.n	800504e <HAL_TIM_PWM_Start+0xce>
 800505e:	2302      	movs	r3, #2
 8005060:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8005064:	e795      	b.n	8004f92 <HAL_TIM_PWM_Start+0x12>
 8005066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005068:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800506c:	645a      	str	r2, [r3, #68]	; 0x44
 800506e:	e7c6      	b.n	8004ffe <HAL_TIM_PWM_Start+0x7e>
 8005070:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005074:	2b01      	cmp	r3, #1
 8005076:	d1ea      	bne.n	800504e <HAL_TIM_PWM_Start+0xce>
 8005078:	2302      	movs	r3, #2
 800507a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800507e:	e788      	b.n	8004f92 <HAL_TIM_PWM_Start+0x12>
 8005080:	2302      	movs	r3, #2
 8005082:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005086:	e784      	b.n	8004f92 <HAL_TIM_PWM_Start+0x12>
 8005088:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800508c:	2b01      	cmp	r3, #1
 800508e:	d1de      	bne.n	800504e <HAL_TIM_PWM_Start+0xce>
 8005090:	2302      	movs	r3, #2
 8005092:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8005096:	e77c      	b.n	8004f92 <HAL_TIM_PWM_Start+0x12>
 8005098:	40012c00 	.word	0x40012c00
 800509c:	40000400 	.word	0x40000400
 80050a0:	00010007 	.word	0x00010007

080050a4 <HAL_TIM_OC_DelayElapsedCallback>:
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop

080050a8 <HAL_TIM_IC_CaptureCallback>:
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop

080050ac <HAL_TIM_PWM_PulseFinishedCallback>:
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop

080050b0 <HAL_TIM_TriggerCallback>:
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop

080050b4 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050b4:	6803      	ldr	r3, [r0, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	0791      	lsls	r1, r2, #30
{
 80050ba:	b510      	push	{r4, lr}
 80050bc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050be:	d502      	bpl.n	80050c6 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	0792      	lsls	r2, r2, #30
 80050c4:	d468      	bmi.n	8005198 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	0752      	lsls	r2, r2, #29
 80050ca:	d502      	bpl.n	80050d2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	0750      	lsls	r0, r2, #29
 80050d0:	d44f      	bmi.n	8005172 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	0711      	lsls	r1, r2, #28
 80050d6:	d502      	bpl.n	80050de <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	0712      	lsls	r2, r2, #28
 80050dc:	d437      	bmi.n	800514e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	06d0      	lsls	r0, r2, #27
 80050e2:	d502      	bpl.n	80050ea <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	06d1      	lsls	r1, r2, #27
 80050e8:	d41e      	bmi.n	8005128 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	07d2      	lsls	r2, r2, #31
 80050ee:	d502      	bpl.n	80050f6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	07d0      	lsls	r0, r2, #31
 80050f4:	d469      	bmi.n	80051ca <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	0611      	lsls	r1, r2, #24
 80050fa:	d502      	bpl.n	8005102 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	0612      	lsls	r2, r2, #24
 8005100:	d46b      	bmi.n	80051da <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	05d0      	lsls	r0, r2, #23
 8005106:	d502      	bpl.n	800510e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	0611      	lsls	r1, r2, #24
 800510c:	d46d      	bmi.n	80051ea <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	0652      	lsls	r2, r2, #25
 8005112:	d502      	bpl.n	800511a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	0650      	lsls	r0, r2, #25
 8005118:	d46f      	bmi.n	80051fa <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	0691      	lsls	r1, r2, #26
 800511e:	d502      	bpl.n	8005126 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	0692      	lsls	r2, r2, #26
 8005124:	d449      	bmi.n	80051ba <HAL_TIM_IRQHandler+0x106>
}
 8005126:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005128:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800512c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800512e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005130:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005138:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513a:	d16f      	bne.n	800521c <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513c:	f7ff ffb2 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	4620      	mov	r0, r4
 8005142:	f7ff ffb3 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005148:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	7722      	strb	r2, [r4, #28]
 800514c:	e7cd      	b.n	80050ea <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800514e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005152:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005154:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005156:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800515c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800515e:	d15a      	bne.n	8005216 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005160:	f7ff ffa0 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	4620      	mov	r0, r4
 8005166:	f7ff ffa1 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800516c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	7722      	strb	r2, [r4, #28]
 8005170:	e7b5      	b.n	80050de <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005172:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005176:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005178:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005184:	d144      	bne.n	8005210 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	f7ff ff8d 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518a:	4620      	mov	r0, r4
 800518c:	f7ff ff8e 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005190:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005192:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005194:	7722      	strb	r2, [r4, #28]
 8005196:	e79c      	b.n	80050d2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005198:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800519e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	0799      	lsls	r1, r3, #30
 80051a6:	d130      	bne.n	800520a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a8:	f7ff ff7c 	bl	80050a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ac:	4620      	mov	r0, r4
 80051ae:	f7ff ff7d 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051b4:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	7722      	strb	r2, [r4, #28]
 80051b8:	e785      	b.n	80050c6 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051ba:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80051be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c0:	611a      	str	r2, [r3, #16]
}
 80051c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80051c6:	f000 ba91 	b.w	80056ec <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051ca:	f06f 0201 	mvn.w	r2, #1
 80051ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80051d0:	4620      	mov	r0, r4
 80051d2:	f7fc f8a5 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	e78d      	b.n	80050f6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 fa85 	bl	80056f0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	e78b      	b.n	8005102 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 fa7f 	bl	80056f4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051f6:	6823      	ldr	r3, [r4, #0]
 80051f8:	e789      	b.n	800510e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005200:	4620      	mov	r0, r4
 8005202:	f7ff ff55 	bl	80050b0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	e787      	b.n	800511a <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800520a:	f7ff ff4d 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 800520e:	e7d0      	b.n	80051b2 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8005210:	f7ff ff4a 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8005214:	e7bc      	b.n	8005190 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	f7ff ff47 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 800521a:	e7a6      	b.n	800516a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800521c:	f7ff ff44 	bl	80050a8 <HAL_TIM_IC_CaptureCallback>
 8005220:	e791      	b.n	8005146 <HAL_TIM_IRQHandler+0x92>
 8005222:	bf00      	nop

08005224 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005224:	6a03      	ldr	r3, [r0, #32]
 8005226:	f023 0310 	bic.w	r3, r3, #16
 800522a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800522c:	6a03      	ldr	r3, [r0, #32]
{
 800522e:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005230:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005232:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005234:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005236:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800523a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800523e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005242:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005244:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005248:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800524c:	4d14      	ldr	r5, [pc, #80]	; (80052a0 <TIM_OC2_SetConfig+0x7c>)
 800524e:	42a8      	cmp	r0, r5
 8005250:	d010      	beq.n	8005274 <TIM_OC2_SetConfig+0x50>
 8005252:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005256:	42a8      	cmp	r0, r5
 8005258:	d00c      	beq.n	8005274 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800525a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800525e:	42a8      	cmp	r0, r5
 8005260:	d00f      	beq.n	8005282 <TIM_OC2_SetConfig+0x5e>
 8005262:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005266:	42a8      	cmp	r0, r5
 8005268:	d00b      	beq.n	8005282 <TIM_OC2_SetConfig+0x5e>
 800526a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800526e:	42a8      	cmp	r0, r5
 8005270:	d10f      	bne.n	8005292 <TIM_OC2_SetConfig+0x6e>
 8005272:	e006      	b.n	8005282 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005274:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005276:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800527a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005282:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005286:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800528a:	ea46 0c05 	orr.w	ip, r6, r5
 800528e:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005292:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005294:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005296:	6182      	str	r2, [r0, #24]
}
 8005298:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 800529a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800529c:	6203      	str	r3, [r0, #32]
}
 800529e:	4770      	bx	lr
 80052a0:	40012c00 	.word	0x40012c00

080052a4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80052a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	f000 812b 	beq.w	8005504 <HAL_TIM_PWM_ConfigChannel+0x260>
 80052ae:	2301      	movs	r3, #1
{
 80052b0:	b570      	push	{r4, r5, r6, lr}
 80052b2:	4604      	mov	r4, r0
 80052b4:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 80052b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80052ba:	2a14      	cmp	r2, #20
 80052bc:	d816      	bhi.n	80052ec <HAL_TIM_PWM_ConfigChannel+0x48>
 80052be:	e8df f012 	tbh	[pc, r2, lsl #1]
 80052c2:	005d      	.short	0x005d
 80052c4:	00150015 	.word	0x00150015
 80052c8:	00720015 	.word	0x00720015
 80052cc:	00150015 	.word	0x00150015
 80052d0:	00880015 	.word	0x00880015
 80052d4:	00150015 	.word	0x00150015
 80052d8:	009d0015 	.word	0x009d0015
 80052dc:	00150015 	.word	0x00150015
 80052e0:	00e00015 	.word	0x00e00015
 80052e4:	00150015 	.word	0x00150015
 80052e8:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 80052ec:	2300      	movs	r3, #0
 80052ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80052f2:	2001      	movs	r0, #1
}
 80052f4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052f6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f8:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052fa:	6a1a      	ldr	r2, [r3, #32]
 80052fc:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005300:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005302:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005304:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005306:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005308:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800530c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005310:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005314:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005316:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800531a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531e:	4e7a      	ldr	r6, [pc, #488]	; (8005508 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005320:	42b3      	cmp	r3, r6
 8005322:	d00f      	beq.n	8005344 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005324:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005328:	42b3      	cmp	r3, r6
 800532a:	d00b      	beq.n	8005344 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800532c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005330:	42b3      	cmp	r3, r6
 8005332:	d007      	beq.n	8005344 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005334:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005338:	42b3      	cmp	r3, r6
 800533a:	d003      	beq.n	8005344 <HAL_TIM_PWM_ConfigChannel+0xa0>
 800533c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005340:	42b3      	cmp	r3, r6
 8005342:	d104      	bne.n	800534e <HAL_TIM_PWM_ConfigChannel+0xaa>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005344:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005346:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800534a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534e:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005350:	6559      	str	r1, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005352:	6869      	ldr	r1, [r5, #4]
 8005354:	65d9      	str	r1, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005356:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005358:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800535a:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800535c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005360:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005362:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005364:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005368:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800536a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800536c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005370:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8005372:	2300      	movs	r3, #0
 8005374:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005378:	2000      	movs	r0, #0
}
 800537a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800537c:	6800      	ldr	r0, [r0, #0]
 800537e:	f7ff fca9 	bl	8004cd4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005382:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005384:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005386:	6999      	ldr	r1, [r3, #24]
 8005388:	f041 0108 	orr.w	r1, r1, #8
 800538c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800538e:	6999      	ldr	r1, [r3, #24]
 8005390:	f021 0104 	bic.w	r1, r1, #4
 8005394:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	4302      	orrs	r2, r0
 800539a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800539c:	2300      	movs	r3, #0
 800539e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	2000      	movs	r0, #0
}
 80053a4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a6:	6800      	ldr	r0, [r0, #0]
 80053a8:	f7ff ff3c 	bl	8005224 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053ac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053ae:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b0:	6999      	ldr	r1, [r3, #24]
 80053b2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80053b6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b8:	6999      	ldr	r1, [r3, #24]
 80053ba:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80053be:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80053c6:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80053c8:	2300      	movs	r3, #0
 80053ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80053ce:	2000      	movs	r0, #0
}
 80053d0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053d2:	6800      	ldr	r0, [r0, #0]
 80053d4:	f7ff fcba 	bl	8004d4c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053d8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053da:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053dc:	69d9      	ldr	r1, [r3, #28]
 80053de:	f041 0108 	orr.w	r1, r1, #8
 80053e2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053e4:	69d9      	ldr	r1, [r3, #28]
 80053e6:	f021 0104 	bic.w	r1, r1, #4
 80053ea:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	4302      	orrs	r2, r0
 80053f0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80053f2:	2300      	movs	r3, #0
 80053f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2000      	movs	r0, #0
}
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053fc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053fe:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005406:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005408:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800540a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800540c:	69d9      	ldr	r1, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800540e:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005412:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005416:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800541a:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800541c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005420:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005424:	4e38      	ldr	r6, [pc, #224]	; (8005508 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8005426:	42b3      	cmp	r3, r6
 8005428:	d00f      	beq.n	800544a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800542a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800542e:	42b3      	cmp	r3, r6
 8005430:	d00b      	beq.n	800544a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8005432:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005436:	42b3      	cmp	r3, r6
 8005438:	d007      	beq.n	800544a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 800543a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800543e:	42b3      	cmp	r3, r6
 8005440:	d003      	beq.n	800544a <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8005442:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005446:	42b3      	cmp	r3, r6
 8005448:	d104      	bne.n	8005454 <HAL_TIM_PWM_ConfigChannel+0x1b0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800544a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800544c:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005450:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8005454:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005456:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005458:	6869      	ldr	r1, [r5, #4]
 800545a:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800545c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545e:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005460:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005462:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005466:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005468:	69d9      	ldr	r1, [r3, #28]
 800546a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800546e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005470:	69da      	ldr	r2, [r3, #28]
 8005472:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005476:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005478:	2300      	movs	r3, #0
 800547a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800547e:	2000      	movs	r0, #0
}
 8005480:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005482:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005484:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800548c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800548e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005490:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005492:	6d59      	ldr	r1, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005494:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005498:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800549c:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800549e:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80054a0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80054a4:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a8:	4e17      	ldr	r6, [pc, #92]	; (8005508 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80054aa:	42b3      	cmp	r3, r6
 80054ac:	d00f      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x22a>
 80054ae:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80054b2:	42b3      	cmp	r3, r6
 80054b4:	d00b      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x22a>
 80054b6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80054ba:	42b3      	cmp	r3, r6
 80054bc:	d007      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x22a>
 80054be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80054c2:	42b3      	cmp	r3, r6
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_PWM_ConfigChannel+0x22a>
 80054c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80054ca:	42b3      	cmp	r3, r6
 80054cc:	d104      	bne.n	80054d8 <HAL_TIM_PWM_ConfigChannel+0x234>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054ce:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054d0:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054d4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80054d8:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80054da:	6559      	str	r1, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80054dc:	6869      	ldr	r1, [r5, #4]
 80054de:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 80054e0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054e2:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054e4:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054e6:	f041 0108 	orr.w	r1, r1, #8
 80054ea:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ee:	f021 0104 	bic.w	r1, r1, #4
 80054f2:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054f6:	432a      	orrs	r2, r5
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 80054fa:	2300      	movs	r3, #0
 80054fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2000      	movs	r0, #0
}
 8005502:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8005504:	2002      	movs	r0, #2
}
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00

0800550c <HAL_TIMEx_PWMN_Start>:
 800550c:	2900      	cmp	r1, #0
 800550e:	d13a      	bne.n	8005586 <HAL_TIMEx_PWMN_Start+0x7a>
 8005510:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8005514:	2b01      	cmp	r3, #1
 8005516:	d142      	bne.n	800559e <HAL_TIMEx_PWMN_Start+0x92>
 8005518:	2302      	movs	r3, #2
 800551a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800551e:	6803      	ldr	r3, [r0, #0]
 8005520:	2204      	movs	r2, #4
 8005522:	6a18      	ldr	r0, [r3, #32]
 8005524:	f001 011f 	and.w	r1, r1, #31
 8005528:	fa02 f101 	lsl.w	r1, r2, r1
 800552c:	ea20 0001 	bic.w	r0, r0, r1
 8005530:	6218      	str	r0, [r3, #32]
 8005532:	6a1a      	ldr	r2, [r3, #32]
 8005534:	4824      	ldr	r0, [pc, #144]	; (80055c8 <HAL_TIMEx_PWMN_Start+0xbc>)
 8005536:	4311      	orrs	r1, r2
 8005538:	6219      	str	r1, [r3, #32]
 800553a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553c:	4283      	cmp	r3, r0
 800553e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005542:	645a      	str	r2, [r3, #68]	; 0x44
 8005544:	d011      	beq.n	800556a <HAL_TIMEx_PWMN_Start+0x5e>
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554a:	d00e      	beq.n	800556a <HAL_TIMEx_PWMN_Start+0x5e>
 800554c:	4a1f      	ldr	r2, [pc, #124]	; (80055cc <HAL_TIMEx_PWMN_Start+0xc0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00b      	beq.n	800556a <HAL_TIMEx_PWMN_Start+0x5e>
 8005552:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005556:	4293      	cmp	r3, r2
 8005558:	d007      	beq.n	800556a <HAL_TIMEx_PWMN_Start+0x5e>
 800555a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <HAL_TIMEx_PWMN_Start+0x5e>
 8005562:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005566:	4293      	cmp	r3, r2
 8005568:	d107      	bne.n	800557a <HAL_TIMEx_PWMN_Start+0x6e>
 800556a:	6899      	ldr	r1, [r3, #8]
 800556c:	4a18      	ldr	r2, [pc, #96]	; (80055d0 <HAL_TIMEx_PWMN_Start+0xc4>)
 800556e:	400a      	ands	r2, r1
 8005570:	2a06      	cmp	r2, #6
 8005572:	d016      	beq.n	80055a2 <HAL_TIMEx_PWMN_Start+0x96>
 8005574:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005578:	d013      	beq.n	80055a2 <HAL_TIMEx_PWMN_Start+0x96>
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	2000      	movs	r0, #0
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	4770      	bx	lr
 8005586:	2904      	cmp	r1, #4
 8005588:	d00d      	beq.n	80055a6 <HAL_TIMEx_PWMN_Start+0x9a>
 800558a:	2908      	cmp	r1, #8
 800558c:	d013      	beq.n	80055b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800558e:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8005592:	2b01      	cmp	r3, #1
 8005594:	d103      	bne.n	800559e <HAL_TIMEx_PWMN_Start+0x92>
 8005596:	2302      	movs	r3, #2
 8005598:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 800559c:	e7bf      	b.n	800551e <HAL_TIMEx_PWMN_Start+0x12>
 800559e:	2001      	movs	r0, #1
 80055a0:	4770      	bx	lr
 80055a2:	2000      	movs	r0, #0
 80055a4:	4770      	bx	lr
 80055a6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d1f7      	bne.n	800559e <HAL_TIMEx_PWMN_Start+0x92>
 80055ae:	2302      	movs	r3, #2
 80055b0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 80055b4:	e7b3      	b.n	800551e <HAL_TIMEx_PWMN_Start+0x12>
 80055b6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d1ef      	bne.n	800559e <HAL_TIMEx_PWMN_Start+0x92>
 80055be:	2302      	movs	r3, #2
 80055c0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
 80055c4:	e7ab      	b.n	800551e <HAL_TIMEx_PWMN_Start+0x12>
 80055c6:	bf00      	nop
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40000400 	.word	0x40000400
 80055d0:	00010007 	.word	0x00010007

080055d4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d03a      	beq.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
{
 80055dc:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055de:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055e0:	4d1d      	ldr	r5, [pc, #116]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  htim->State = HAL_TIM_STATE_BUSY;
 80055e2:	2302      	movs	r3, #2
 80055e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055e8:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80055ea:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80055ec:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055ee:	d026      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80055f0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80055f4:	42aa      	cmp	r2, r5
 80055f6:	d022      	beq.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f8:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055fe:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005600:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005604:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005606:	d00c      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005608:	4b14      	ldr	r3, [pc, #80]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800560a:	429a      	cmp	r2, r3
 800560c:	d009      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800560e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005612:	429a      	cmp	r2, r3
 8005614:	d005      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8005616:	42aa      	cmp	r2, r5
 8005618:	d003      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800561a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800561e:	429a      	cmp	r2, r3
 8005620:	d104      	bne.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005622:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005624:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005628:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800562a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800562c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800562e:	2201      	movs	r2, #1
 8005630:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005634:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005638:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800563a:	4618      	mov	r0, r3
}
 800563c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800563e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005640:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005644:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005646:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800564c:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800564e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005650:	e7e7      	b.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 8005652:	2002      	movs	r0, #2
}
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40000400 	.word	0x40000400

08005660 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005660:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d03d      	beq.n	80056e4 <HAL_TIMEx_ConfigBreakDeadTime+0x84>
{
 8005668:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800566a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	4602      	mov	r2, r0
 8005674:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005676:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005678:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800567a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800567e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005680:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005684:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005686:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800568c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800568e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005694:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005696:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800569c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800569e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056a0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056a4:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056aa:	4c0f      	ldr	r4, [pc, #60]	; (80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 80056ac:	42a0      	cmp	r0, r4
 80056ae:	d00b      	beq.n	80056c8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 80056b0:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80056b4:	42a0      	cmp	r0, r4
 80056b6:	d007      	beq.n	80056c8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80056b8:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80056ba:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80056bc:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80056c0:	4608      	mov	r0, r1
}
 80056c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056c6:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056c8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80056ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056ce:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056d2:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056d4:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056da:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056dc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80056e0:	430b      	orrs	r3, r1
 80056e2:	e7e9      	b.n	80056b8 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 80056e4:	2002      	movs	r0, #2
}
 80056e6:	4770      	bx	lr
 80056e8:	40012c00 	.word	0x40012c00

080056ec <HAL_TIMEx_CommutCallback>:
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop

080056f0 <HAL_TIMEx_BreakCallback>:
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop

080056f4 <HAL_TIMEx_Break2Callback>:
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop

080056f8 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056f8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80056fa:	2b20      	cmp	r3, #32
 80056fc:	d159      	bne.n	80057b2 <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 80056fe:	2900      	cmp	r1, #0
 8005700:	d055      	beq.n	80057ae <HAL_UART_Receive_IT+0xb6>
 8005702:	2a00      	cmp	r2, #0
 8005704:	d053      	beq.n	80057ae <HAL_UART_Receive_IT+0xb6>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8005706:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800570a:	2b01      	cmp	r3, #1
 800570c:	d051      	beq.n	80057b2 <HAL_UART_Receive_IT+0xba>
{
 800570e:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8005710:	2401      	movs	r4, #1
 8005712:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005716:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005718:	2400      	movs	r4, #0
 800571a:	6604      	str	r4, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800571c:	685c      	ldr	r4, [r3, #4]
 800571e:	0224      	lsls	r4, r4, #8
 8005720:	d50e      	bpl.n	8005740 <HAL_UART_Receive_IT+0x48>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	e853 4f00 	ldrex	r4, [r3]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005726:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	e843 4500 	strex	r5, r4, [r3]
 800572e:	b13d      	cbz	r5, 8005740 <HAL_UART_Receive_IT+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	e853 cf00 	ldrex	ip, [r3]
 8005734:	f04c 6c80 	orr.w	ip, ip, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	e843 c400 	strex	r4, ip, [r3]
 800573c:	2c00      	cmp	r4, #0
 800573e:	d1f7      	bne.n	8005730 <HAL_UART_Receive_IT+0x38>
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005740:	6884      	ldr	r4, [r0, #8]
  huart->pRxBuffPtr  = pData;
 8005742:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxISR       = NULL;
 8005744:	2500      	movs	r5, #0
  UART_MASK_COMPUTATION(huart);
 8005746:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 800574a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 800574e:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005752:	6645      	str	r5, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8005754:	d02f      	beq.n	80057b6 <HAL_UART_Receive_IT+0xbe>
 8005756:	2c00      	cmp	r4, #0
 8005758:	d13c      	bne.n	80057d4 <HAL_UART_Receive_IT+0xdc>
 800575a:	6902      	ldr	r2, [r0, #16]
 800575c:	2a00      	cmp	r2, #0
 800575e:	d13c      	bne.n	80057da <HAL_UART_Receive_IT+0xe2>
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005766:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005768:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800576e:	67c2      	str	r2, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	f103 0208 	add.w	r2, r3, #8
 8005774:	e852 2f00 	ldrex	r2, [r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005778:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	f103 0408 	add.w	r4, r3, #8
 8005780:	e844 2100 	strex	r1, r2, [r4]
 8005784:	2900      	cmp	r1, #0
 8005786:	d1f3      	bne.n	8005770 <HAL_UART_Receive_IT+0x78>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005788:	6882      	ldr	r2, [r0, #8]
 800578a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800578e:	d01a      	beq.n	80057c6 <HAL_UART_Receive_IT+0xce>
  {
    huart->RxISR = UART_RxISR_16BIT;
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005790:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <HAL_UART_Receive_IT+0xec>)
 8005792:	6642      	str	r2, [r0, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005794:	2100      	movs	r1, #0
 8005796:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	e853 2f00 	ldrex	r2, [r3]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800579e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	e843 2000 	strex	r0, r2, [r3]
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d1f7      	bne.n	800579a <HAL_UART_Receive_IT+0xa2>
}
 80057aa:	bc30      	pop	{r4, r5}
 80057ac:	4770      	bx	lr
      return HAL_ERROR;
 80057ae:	2001      	movs	r0, #1
 80057b0:	4770      	bx	lr
    return HAL_BUSY;
 80057b2:	2002      	movs	r0, #2
}
 80057b4:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 80057b6:	6902      	ldr	r2, [r0, #16]
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	d1d1      	bne.n	8005760 <HAL_UART_Receive_IT+0x68>
 80057bc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80057c0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80057c4:	e7cf      	b.n	8005766 <HAL_UART_Receive_IT+0x6e>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c6:	6904      	ldr	r4, [r0, #16]
    huart->RxISR = UART_RxISR_16BIT;
 80057c8:	4a06      	ldr	r2, [pc, #24]	; (80057e4 <HAL_UART_Receive_IT+0xec>)
 80057ca:	4907      	ldr	r1, [pc, #28]	; (80057e8 <HAL_UART_Receive_IT+0xf0>)
 80057cc:	2c00      	cmp	r4, #0
 80057ce:	bf08      	it	eq
 80057d0:	460a      	moveq	r2, r1
 80057d2:	e7de      	b.n	8005792 <HAL_UART_Receive_IT+0x9a>
  UART_MASK_COMPUTATION(huart);
 80057d4:	f8a0 505c 	strh.w	r5, [r0, #92]	; 0x5c
 80057d8:	e7c5      	b.n	8005766 <HAL_UART_Receive_IT+0x6e>
 80057da:	227f      	movs	r2, #127	; 0x7f
 80057dc:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 80057e0:	e7c1      	b.n	8005766 <HAL_UART_Receive_IT+0x6e>
 80057e2:	bf00      	nop
 80057e4:	08005d61 	.word	0x08005d61
 80057e8:	08005d21 	.word	0x08005d21

080057ec <HAL_UART_Transmit_DMA>:
{
 80057ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80057ee:	6f86      	ldr	r6, [r0, #120]	; 0x78
 80057f0:	2e20      	cmp	r6, #32
 80057f2:	d140      	bne.n	8005876 <HAL_UART_Transmit_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 80057f4:	2900      	cmp	r1, #0
 80057f6:	d03c      	beq.n	8005872 <HAL_UART_Transmit_DMA+0x86>
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d03a      	beq.n	8005872 <HAL_UART_Transmit_DMA+0x86>
 80057fc:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 80057fe:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8005802:	2801      	cmp	r0, #1
 8005804:	d037      	beq.n	8005876 <HAL_UART_Transmit_DMA+0x8a>
    if (huart->hdmatx != NULL)
 8005806:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8005808:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580c:	2700      	movs	r7, #0
    __HAL_LOCK(huart);
 800580e:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005810:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005812:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
    huart->pTxBuffPtr  = pData;
 8005816:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005818:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 800581c:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005820:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8005822:	b190      	cbz	r0, 800584a <HAL_UART_Transmit_DMA+0x5e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005824:	f8df c064 	ldr.w	ip, [pc, #100]	; 800588c <HAL_UART_Transmit_DMA+0xa0>
      huart->hdmatx->XferAbortCallback = NULL;
 8005828:	6347      	str	r7, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800582a:	4613      	mov	r3, r2
 800582c:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800582e:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005832:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8005890 <HAL_UART_Transmit_DMA+0xa4>
 8005836:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800583a:	f8df c058 	ldr.w	ip, [pc, #88]	; 8005894 <HAL_UART_Transmit_DMA+0xa8>
 800583e:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005842:	3228      	adds	r2, #40	; 0x28
 8005844:	f7fe faaa 	bl	8003d9c <HAL_DMA_Start_IT>
 8005848:	b9b8      	cbnz	r0, 800587a <HAL_UART_Transmit_DMA+0x8e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 800584e:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005850:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8005852:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005856:	f102 0308 	add.w	r3, r2, #8
 800585a:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800585e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	f102 0008 	add.w	r0, r2, #8
 8005866:	e840 3100 	strex	r1, r3, [r0]
 800586a:	2900      	cmp	r1, #0
 800586c:	d1f3      	bne.n	8005856 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 800586e:	2000      	movs	r0, #0
}
 8005870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8005872:	2001      	movs	r0, #1
}
 8005874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8005876:	2002      	movs	r0, #2
}
 8005878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800587a:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);
 800587c:	f884 7074 	strb.w	r7, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005880:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_ERROR;
 8005884:	4628      	mov	r0, r5
        huart->gState = HAL_UART_STATE_READY;
 8005886:	67a6      	str	r6, [r4, #120]	; 0x78
}
 8005888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588a:	bf00      	nop
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058e5 	.word	0x080058e5
 8005894:	080058f5 	.word	0x080058f5

08005898 <HAL_UART_TxCpltCallback>:
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop

0800589c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800589c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800589e:	6983      	ldr	r3, [r0, #24]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d018      	beq.n	80058d8 <UART_DMATransmitCplt+0x3c>
  {
    huart->TxXferCount = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	6802      	ldr	r2, [r0, #0]
 80058aa:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	f102 0308 	add.w	r3, r2, #8
 80058b2:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	f102 0008 	add.w	r0, r2, #8
 80058be:	e840 3100 	strex	r1, r3, [r0]
 80058c2:	2900      	cmp	r1, #0
 80058c4:	d1f3      	bne.n	80058ae <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	e842 3100 	strex	r1, r3, [r2]
 80058d2:	2900      	cmp	r1, #0
 80058d4:	d1f7      	bne.n	80058c6 <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058d6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80058d8:	f7ff ffde 	bl	8005898 <HAL_UART_TxCpltCallback>
}
 80058dc:	bd08      	pop	{r3, pc}
 80058de:	bf00      	nop

080058e0 <HAL_UART_TxHalfCpltCallback>:
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop

080058e4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058e4:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80058e8:	f7ff fffa 	bl	80058e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ec:	bd08      	pop	{r3, pc}
 80058ee:	bf00      	nop

080058f0 <HAL_UART_ErrorCallback>:
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop

080058f4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058f4:	6a40      	ldr	r0, [r0, #36]	; 0x24

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058f6:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058f8:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 80058fa:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058fc:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	0612      	lsls	r2, r2, #24
 8005902:	d501      	bpl.n	8005908 <UART_DMAError+0x14>
 8005904:	2921      	cmp	r1, #33	; 0x21
 8005906:	d00d      	beq.n	8005924 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	0652      	lsls	r2, r2, #25
 800590c:	d501      	bpl.n	8005912 <UART_DMAError+0x1e>
 800590e:	2c22      	cmp	r4, #34	; 0x22
 8005910:	d016      	beq.n	8005940 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005912:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005916:	f043 0310 	orr.w	r3, r3, #16
 800591a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800591e:	f7ff ffe7 	bl	80058f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005922:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8005924:	2200      	movs	r2, #0
 8005926:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800592e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	e843 2100 	strex	r1, r2, [r3]
 8005936:	2900      	cmp	r1, #0
 8005938:	d1f7      	bne.n	800592a <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 800593a:	2220      	movs	r2, #32
 800593c:	6782      	str	r2, [r0, #120]	; 0x78
}
 800593e:	e7e3      	b.n	8005908 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8005940:	2200      	movs	r2, #0
 8005942:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800594a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	e843 2100 	strex	r1, r2, [r3]
 8005952:	2900      	cmp	r1, #0
 8005954:	d1f7      	bne.n	8005946 <UART_DMAError+0x52>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	f103 0208 	add.w	r2, r3, #8
 800595a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	f103 0408 	add.w	r4, r3, #8
 8005966:	e844 2100 	strex	r1, r2, [r4]
 800596a:	2900      	cmp	r1, #0
 800596c:	d1f3      	bne.n	8005956 <UART_DMAError+0x62>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005970:	2a01      	cmp	r2, #1
 8005972:	d005      	beq.n	8005980 <UART_DMAError+0x8c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005974:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005976:	2220      	movs	r2, #32
 8005978:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->RxISR = NULL;
 800597a:	6643      	str	r3, [r0, #100]	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800597c:	6603      	str	r3, [r0, #96]	; 0x60
}
 800597e:	e7c8      	b.n	8005912 <UART_DMAError+0x1e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	e843 2100 	strex	r1, r2, [r3]
 800598c:	2900      	cmp	r1, #0
 800598e:	d0f1      	beq.n	8005974 <UART_DMAError+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	e853 2f00 	ldrex	r2, [r3]
 8005994:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	e843 2100 	strex	r1, r2, [r3]
 800599c:	2900      	cmp	r1, #0
 800599e:	d1ef      	bne.n	8005980 <UART_DMAError+0x8c>
 80059a0:	e7e8      	b.n	8005974 <UART_DMAError+0x80>
 80059a2:	bf00      	nop

080059a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059ae:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059b2:	f7ff ff9d 	bl	80058f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b6:	bd08      	pop	{r3, pc}

080059b8 <HAL_UARTEx_RxEventCallback>:
}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop

080059bc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059bc:	6803      	ldr	r3, [r0, #0]
 80059be:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059c0:	6819      	ldr	r1, [r3, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059c2:	f640 0c0f 	movw	ip, #2063	; 0x80f
  if (errorflags == 0U)
 80059c6:	ea12 0f0c 	tst.w	r2, ip
{
 80059ca:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059cc:	689d      	ldr	r5, [r3, #8]
{
 80059ce:	4604      	mov	r4, r0
  if (errorflags == 0U)
 80059d0:	d17c      	bne.n	8005acc <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059d2:	0696      	lsls	r6, r2, #26
 80059d4:	d502      	bpl.n	80059dc <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059d6:	068e      	lsls	r6, r1, #26
 80059d8:	f100 8110 	bmi.w	8005bfc <HAL_UART_IRQHandler+0x240>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059dc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80059de:	2801      	cmp	r0, #1
 80059e0:	d024      	beq.n	8005a2c <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059e2:	02d6      	lsls	r6, r2, #11
 80059e4:	d502      	bpl.n	80059ec <HAL_UART_IRQHandler+0x30>
 80059e6:	0268      	lsls	r0, r5, #9
 80059e8:	f100 810d 	bmi.w	8005c06 <HAL_UART_IRQHandler+0x24a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059ec:	0616      	lsls	r6, r2, #24
 80059ee:	d414      	bmi.n	8005a1a <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059f0:	0650      	lsls	r0, r2, #25
 80059f2:	d501      	bpl.n	80059f8 <HAL_UART_IRQHandler+0x3c>
 80059f4:	064a      	lsls	r2, r1, #25
 80059f6:	d400      	bmi.n	80059fa <HAL_UART_IRQHandler+0x3e>
}
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	e843 2100 	strex	r1, r2, [r3]
 8005a06:	2900      	cmp	r1, #0
 8005a08:	d1f7      	bne.n	80059fa <HAL_UART_IRQHandler+0x3e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a0c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005a0e:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8005a10:	66a3      	str	r3, [r4, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a12:	4620      	mov	r0, r4
 8005a14:	f7ff ff40 	bl	8005898 <HAL_UART_TxCpltCallback>
}
 8005a18:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005a1a:	060d      	lsls	r5, r1, #24
 8005a1c:	d5e8      	bpl.n	80059f0 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 8005a1e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0e9      	beq.n	80059f8 <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 8005a24:	4620      	mov	r0, r4
}
 8005a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005a2a:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a2c:	06d6      	lsls	r6, r2, #27
 8005a2e:	d5d8      	bpl.n	80059e2 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a30:	06c8      	lsls	r0, r1, #27
 8005a32:	d5d6      	bpl.n	80059e2 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a34:	2210      	movs	r2, #16
 8005a36:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	0652      	lsls	r2, r2, #25
 8005a3c:	f140 8100 	bpl.w	8005c40 <HAL_UART_IRQHandler+0x284>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a40:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005a42:	6802      	ldr	r2, [r0, #0]
 8005a44:	6852      	ldr	r2, [r2, #4]
 8005a46:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005a48:	2a00      	cmp	r2, #0
 8005a4a:	d0d5      	beq.n	80059f8 <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a4c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005a50:	4291      	cmp	r1, r2
 8005a52:	d9d1      	bls.n	80059f8 <HAL_UART_IRQHandler+0x3c>
        huart->RxXferCount = nb_remaining_rx_data;
 8005a54:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a58:	6982      	ldr	r2, [r0, #24]
 8005a5a:	2a20      	cmp	r2, #32
 8005a5c:	d02e      	beq.n	8005abc <HAL_UART_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	e843 2100 	strex	r1, r2, [r3]
 8005a6a:	2900      	cmp	r1, #0
 8005a6c:	d1f7      	bne.n	8005a5e <HAL_UART_IRQHandler+0xa2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	f103 0208 	add.w	r2, r3, #8
 8005a72:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a76:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	f103 0508 	add.w	r5, r3, #8
 8005a7e:	e845 2100 	strex	r1, r2, [r5]
 8005a82:	2900      	cmp	r1, #0
 8005a84:	d1f3      	bne.n	8005a6e <HAL_UART_IRQHandler+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	f103 0208 	add.w	r2, r3, #8
 8005a8a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	f103 0508 	add.w	r5, r3, #8
 8005a96:	e845 2100 	strex	r1, r2, [r5]
 8005a9a:	2900      	cmp	r1, #0
 8005a9c:	d1f3      	bne.n	8005a86 <HAL_UART_IRQHandler+0xca>
          huart->RxState = HAL_UART_STATE_READY;
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa2:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	e843 2100 	strex	r1, r2, [r3]
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	d1f7      	bne.n	8005aa4 <HAL_UART_IRQHandler+0xe8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ab4:	f7fe f9b4 	bl	8003e20 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ab8:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8005abc:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005ac0:	1ac9      	subs	r1, r1, r3
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	b289      	uxth	r1, r1
 8005ac6:	f7ff ff77 	bl	80059b8 <HAL_UARTEx_RxEventCallback>
}
 8005aca:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005acc:	4879      	ldr	r0, [pc, #484]	; (8005cb4 <HAL_UART_IRQHandler+0x2f8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ace:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ad2:	4008      	ands	r0, r1
 8005ad4:	4330      	orrs	r0, r6
 8005ad6:	d081      	beq.n	80059dc <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ad8:	07d5      	lsls	r5, r2, #31
 8005ada:	d509      	bpl.n	8005af0 <HAL_UART_IRQHandler+0x134>
 8005adc:	05c8      	lsls	r0, r1, #23
 8005ade:	d507      	bpl.n	8005af0 <HAL_UART_IRQHandler+0x134>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ae0:	2001      	movs	r0, #1
 8005ae2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ae4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005ae8:	f040 0001 	orr.w	r0, r0, #1
 8005aec:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005af0:	0795      	lsls	r5, r2, #30
 8005af2:	d57e      	bpl.n	8005bf2 <HAL_UART_IRQHandler+0x236>
 8005af4:	b18e      	cbz	r6, 8005b1a <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005af6:	2002      	movs	r0, #2
 8005af8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005afa:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005afe:	f040 0004 	orr.w	r0, r0, #4
 8005b02:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b06:	0750      	lsls	r0, r2, #29
 8005b08:	d507      	bpl.n	8005b1a <HAL_UART_IRQHandler+0x15e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b0a:	2004      	movs	r0, #4
 8005b0c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b0e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005b12:	f040 0002 	orr.w	r0, r0, #2
 8005b16:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b1a:	0710      	lsls	r0, r2, #28
 8005b1c:	d50b      	bpl.n	8005b36 <HAL_UART_IRQHandler+0x17a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b1e:	f001 0020 	and.w	r0, r1, #32
 8005b22:	4330      	orrs	r0, r6
 8005b24:	d007      	beq.n	8005b36 <HAL_UART_IRQHandler+0x17a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b26:	2008      	movs	r0, #8
 8005b28:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b2a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005b2e:	f040 0008 	orr.w	r0, r0, #8
 8005b32:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b36:	0516      	lsls	r6, r2, #20
 8005b38:	d50a      	bpl.n	8005b50 <HAL_UART_IRQHandler+0x194>
 8005b3a:	014d      	lsls	r5, r1, #5
 8005b3c:	d508      	bpl.n	8005b50 <HAL_UART_IRQHandler+0x194>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b42:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b44:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005b48:	f040 0020 	orr.w	r0, r0, #32
 8005b4c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b50:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005b54:	2800      	cmp	r0, #0
 8005b56:	f43f af4f 	beq.w	80059f8 <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b5a:	0690      	lsls	r0, r2, #26
 8005b5c:	d506      	bpl.n	8005b6c <HAL_UART_IRQHandler+0x1b0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b5e:	0689      	lsls	r1, r1, #26
 8005b60:	d504      	bpl.n	8005b6c <HAL_UART_IRQHandler+0x1b0>
        if (huart->RxISR != NULL)
 8005b62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b64:	b112      	cbz	r2, 8005b6c <HAL_UART_IRQHandler+0x1b0>
          huart->RxISR(huart);
 8005b66:	4620      	mov	r0, r4
 8005b68:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b6a:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8005b6c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b70:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005b72:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b76:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005b7a:	4315      	orrs	r5, r2
 8005b7c:	f000 8094 	beq.w	8005ca8 <HAL_UART_IRQHandler+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	e843 2100 	strex	r1, r2, [r3]
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	d1f7      	bne.n	8005b80 <HAL_UART_IRQHandler+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	f103 0208 	add.w	r2, r3, #8
 8005b94:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b98:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	f103 0008 	add.w	r0, r3, #8
 8005ba0:	e840 2100 	strex	r1, r2, [r0]
 8005ba4:	2900      	cmp	r1, #0
 8005ba6:	d1f3      	bne.n	8005b90 <HAL_UART_IRQHandler+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005baa:	2a01      	cmp	r2, #1
 8005bac:	d033      	beq.n	8005c16 <HAL_UART_IRQHandler+0x25a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bae:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005bb0:	2120      	movs	r1, #32
 8005bb2:	67e1      	str	r1, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	6622      	str	r2, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb6:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8005bb8:	6662      	str	r2, [r4, #100]	; 0x64
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bba:	064a      	lsls	r2, r1, #25
 8005bbc:	d53c      	bpl.n	8005c38 <HAL_UART_IRQHandler+0x27c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbe:	f103 0208 	add.w	r2, r3, #8
 8005bc2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	f103 0008 	add.w	r0, r3, #8
 8005bce:	e840 2100 	strex	r1, r2, [r0]
 8005bd2:	2900      	cmp	r1, #0
 8005bd4:	d1f3      	bne.n	8005bbe <HAL_UART_IRQHandler+0x202>
          if (huart->hdmarx != NULL)
 8005bd6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005bd8:	b370      	cbz	r0, 8005c38 <HAL_UART_IRQHandler+0x27c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bda:	4b37      	ldr	r3, [pc, #220]	; (8005cb8 <HAL_UART_IRQHandler+0x2fc>)
 8005bdc:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bde:	f7fe f941 	bl	8003e64 <HAL_DMA_Abort_IT>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	f43f af08 	beq.w	80059f8 <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005be8:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8005bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005bf0:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bf2:	0755      	lsls	r5, r2, #29
 8005bf4:	d591      	bpl.n	8005b1a <HAL_UART_IRQHandler+0x15e>
 8005bf6:	2e00      	cmp	r6, #0
 8005bf8:	d187      	bne.n	8005b0a <HAL_UART_IRQHandler+0x14e>
 8005bfa:	e78e      	b.n	8005b1a <HAL_UART_IRQHandler+0x15e>
      if (huart->RxISR != NULL)
 8005bfc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f47f af11 	bne.w	8005a26 <HAL_UART_IRQHandler+0x6a>
 8005c04:	e6f8      	b.n	80059f8 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8005c0a:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005c12:	f000 bb25 	b.w	8006260 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c16:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c1a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	e843 2100 	strex	r1, r2, [r3]
 8005c22:	2900      	cmp	r1, #0
 8005c24:	d0c3      	beq.n	8005bae <HAL_UART_IRQHandler+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	e853 2f00 	ldrex	r2, [r3]
 8005c2a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	e843 2100 	strex	r1, r2, [r3]
 8005c32:	2900      	cmp	r1, #0
 8005c34:	d1ef      	bne.n	8005c16 <HAL_UART_IRQHandler+0x25a>
 8005c36:	e7ba      	b.n	8005bae <HAL_UART_IRQHandler+0x1f2>
            HAL_UART_ErrorCallback(huart);
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f7ff fe59 	bl	80058f0 <HAL_UART_ErrorCallback>
}
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c40:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
      if ((huart->RxXferCount > 0U)
 8005c44:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8005c48:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c4a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	f43f aed3 	beq.w	80059f8 <HAL_UART_IRQHandler+0x3c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c52:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8005c56:	1a51      	subs	r1, r2, r1
 8005c58:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005c5a:	2900      	cmp	r1, #0
 8005c5c:	f43f aecc 	beq.w	80059f8 <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	e843 2000 	strex	r0, r2, [r3]
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d1f7      	bne.n	8005c60 <HAL_UART_IRQHandler+0x2a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	f103 0208 	add.w	r2, r3, #8
 8005c74:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c78:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	f103 0508 	add.w	r5, r3, #8
 8005c80:	e845 2000 	strex	r0, r2, [r5]
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d1f3      	bne.n	8005c70 <HAL_UART_IRQHandler+0x2b4>
        huart->RxState = HAL_UART_STATE_READY;
 8005c88:	2220      	movs	r2, #32
 8005c8a:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->RxISR = NULL;
 8005c8c:	6660      	str	r0, [r4, #100]	; 0x64
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c8e:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c94:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	e843 2000 	strex	r0, r2, [r3]
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d1f7      	bne.n	8005c90 <HAL_UART_IRQHandler+0x2d4>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f7ff fe89 	bl	80059b8 <HAL_UARTEx_RxEventCallback>
}
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f7ff fe21 	bl	80058f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cae:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
 8005cb4:	04000120 	.word	0x04000120
 8005cb8:	080059a5 	.word	0x080059a5

08005cbc <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 8005cbc:	b508      	push	{r3, lr}
 8005cbe:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc8:	e843 2100 	strex	r1, r2, [r3]
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	d1f7      	bne.n	8005cc0 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	f103 0208 	add.w	r2, r3, #8
 8005cd4:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	f103 0c08 	add.w	ip, r3, #8
 8005ce0:	e84c 2100 	strex	r1, r2, [ip]
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	d1f3      	bne.n	8005cd0 <UART_RxISR_16BIT.part.0+0x14>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ce8:	2220      	movs	r2, #32
 8005cea:	67c2      	str	r2, [r0, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cec:	6e02      	ldr	r2, [r0, #96]	; 0x60
      huart->RxISR = NULL;
 8005cee:	6641      	str	r1, [r0, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf0:	2a01      	cmp	r2, #1
 8005cf2:	d112      	bne.n	8005d1a <UART_RxISR_16BIT.part.0+0x5e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf4:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	e843 2100 	strex	r1, r2, [r3]
 8005d02:	2900      	cmp	r1, #0
 8005d04:	d1f7      	bne.n	8005cf6 <UART_RxISR_16BIT.part.0+0x3a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d06:	69da      	ldr	r2, [r3, #28]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d08:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d0c:	06d2      	lsls	r2, r2, #27
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d0e:	bf44      	itt	mi
 8005d10:	2210      	movmi	r2, #16
 8005d12:	621a      	strmi	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d14:	f7ff fe50 	bl	80059b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d18:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8005d1a:	f7fb fafb 	bl	8001314 <HAL_UART_RxCpltCallback>
}
 8005d1e:	bd08      	pop	{r3, pc}

08005d20 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d20:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005d22:	2a22      	cmp	r2, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d24:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d26:	d004      	beq.n	8005d32 <UART_RxISR_16BIT+0x12>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d28:	6993      	ldr	r3, [r2, #24]
 8005d2a:	f043 0308 	orr.w	r3, r3, #8
 8005d2e:	6193      	str	r3, [r2, #24]
  }
}
 8005d30:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d32:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8005d34:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 8005d38:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005d3a:	ea02 020c 	and.w	r2, r2, ip
 8005d3e:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8005d42:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005d46:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005d48:	3a01      	subs	r2, #1
 8005d4a:	b292      	uxth	r2, r2
 8005d4c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005d50:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ea      	bne.n	8005d30 <UART_RxISR_16BIT+0x10>
 8005d5a:	f7ff bfaf 	b.w	8005cbc <UART_RxISR_16BIT.part.0>
 8005d5e:	bf00      	nop

08005d60 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d60:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8005d62:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d64:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d66:	d004      	beq.n	8005d72 <UART_RxISR_8BIT+0x12>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d68:	6993      	ldr	r3, [r2, #24]
 8005d6a:	f043 0308 	orr.w	r3, r3, #8
 8005d6e:	6193      	str	r3, [r2, #24]
}
 8005d70:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d72:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005d74:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
 8005d78:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005d7a:	ea02 020c 	and.w	r2, r2, ip
 8005d7e:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8005d80:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8005d84:	6d41      	ldr	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005d86:	3a01      	subs	r2, #1
 8005d88:	b292      	uxth	r2, r2
 8005d8a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8005d8e:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8005d92:	3101      	adds	r1, #1
    if (huart->RxXferCount == 0U)
 8005d94:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 8005d96:	6541      	str	r1, [r0, #84]	; 0x54
    if (huart->RxXferCount == 0U)
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	d1e9      	bne.n	8005d70 <UART_RxISR_8BIT+0x10>
 8005d9c:	f7ff bf8e 	b.w	8005cbc <UART_RxISR_16BIT.part.0>

08005da0 <UART_SetConfig>:
{
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005da4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005da6:	6883      	ldr	r3, [r0, #8]
 8005da8:	6925      	ldr	r5, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005daa:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dac:	69e1      	ldr	r1, [r4, #28]
 8005dae:	432b      	orrs	r3, r5
 8005db0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005db2:	f420 4016 	bic.w	r0, r0, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005db6:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005db8:	f020 000c 	bic.w	r0, r0, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dbc:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dbe:	4303      	orrs	r3, r0
 8005dc0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc2:	6853      	ldr	r3, [r2, #4]
 8005dc4:	68e0      	ldr	r0, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 8005dc6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dcc:	4303      	orrs	r3, r0
 8005dce:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd0:	6890      	ldr	r0, [r2, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dd2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd4:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 8005dd8:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dda:	4303      	orrs	r3, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ddc:	487d      	ldr	r0, [pc, #500]	; (8005fd4 <UART_SetConfig+0x234>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dde:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005de0:	4282      	cmp	r2, r0
 8005de2:	d046      	beq.n	8005e72 <UART_SetConfig+0xd2>
 8005de4:	4b7c      	ldr	r3, [pc, #496]	; (8005fd8 <UART_SetConfig+0x238>)
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d00f      	beq.n	8005e0a <UART_SetConfig+0x6a>
 8005dea:	4b7c      	ldr	r3, [pc, #496]	; (8005fdc <UART_SetConfig+0x23c>)
 8005dec:	429a      	cmp	r2, r3
 8005dee:	f000 80a3 	beq.w	8005f38 <UART_SetConfig+0x198>
 8005df2:	4b7b      	ldr	r3, [pc, #492]	; (8005fe0 <UART_SetConfig+0x240>)
 8005df4:	429a      	cmp	r2, r3
 8005df6:	f000 80b4 	beq.w	8005f62 <UART_SetConfig+0x1c2>
 8005dfa:	4b7a      	ldr	r3, [pc, #488]	; (8005fe4 <UART_SetConfig+0x244>)
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d063      	beq.n	8005ec8 <UART_SetConfig+0x128>
  huart->RxISR = NULL;
 8005e00:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005e02:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    switch (clocksource)
 8005e06:	2001      	movs	r0, #1
}
 8005e08:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e0a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e18:	d069      	beq.n	8005eee <UART_SetConfig+0x14e>
 8005e1a:	d80f      	bhi.n	8005e3c <UART_SetConfig+0x9c>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d05c      	beq.n	8005eda <UART_SetConfig+0x13a>
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e24:	d1ec      	bne.n	8005e00 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e26:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005e2a:	d066      	beq.n	8005efa <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2c:	f7fe fd58 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005e30:	b960      	cbnz	r0, 8005e4c <UART_SetConfig+0xac>
  huart->RxISR = NULL;
 8005e32:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005e34:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8005e38:	2000      	movs	r0, #0
}
 8005e3a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e40:	d1de      	bne.n	8005e00 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e42:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005e46:	f000 80c2 	beq.w	8005fce <UART_SetConfig+0x22e>
    switch (clocksource)
 8005e4a:	4867      	ldr	r0, [pc, #412]	; (8005fe8 <UART_SetConfig+0x248>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e56:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e58:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005e5c:	f1a3 0110 	sub.w	r1, r3, #16
 8005e60:	4291      	cmp	r1, r2
 8005e62:	d8cd      	bhi.n	8005e00 <UART_SetConfig+0x60>
        huart->Instance->BRR = usartdiv;
 8005e64:	6822      	ldr	r2, [r4, #0]
 8005e66:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8005e68:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005e6a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8005e6e:	2000      	movs	r0, #0
}
 8005e70:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e72:	4b5e      	ldr	r3, [pc, #376]	; (8005fec <UART_SetConfig+0x24c>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d906      	bls.n	8005e8e <UART_SetConfig+0xee>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e80:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005e84:	f000 8082 	beq.w	8005f8c <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e88:	f7fe fd78 	bl	800497c <HAL_RCC_GetPCLK2Freq>
        break;
 8005e8c:	e7d0      	b.n	8005e30 <UART_SetConfig+0x90>
 8005e8e:	4a58      	ldr	r2, [pc, #352]	; (8005ff0 <UART_SetConfig+0x250>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e90:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005e94:	5cd3      	ldrb	r3, [r2, r3]
 8005e96:	d07f      	beq.n	8005f98 <UART_SetConfig+0x1f8>
    switch (clocksource)
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d8b1      	bhi.n	8005e00 <UART_SetConfig+0x60>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x104>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ee1 	.word	0x08005ee1
 8005ea8:	08005e89 	.word	0x08005e89
 8005eac:	08005e4b 	.word	0x08005e4b
 8005eb0:	08005e01 	.word	0x08005e01
 8005eb4:	08005e2d 	.word	0x08005e2d
 8005eb8:	08005e01 	.word	0x08005e01
 8005ebc:	08005e01 	.word	0x08005e01
 8005ec0:	08005e01 	.word	0x08005e01
 8005ec4:	08005ef5 	.word	0x08005ef5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ec8:	4b48      	ldr	r3, [pc, #288]	; (8005fec <UART_SetConfig+0x24c>)
 8005eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ecc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ed4:	d00b      	beq.n	8005eee <UART_SetConfig+0x14e>
 8005ed6:	d82b      	bhi.n	8005f30 <UART_SetConfig+0x190>
 8005ed8:	b92b      	cbnz	r3, 8005ee6 <UART_SetConfig+0x146>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eda:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005ede:	d058      	beq.n	8005f92 <UART_SetConfig+0x1f2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f7fe fd34 	bl	800494c <HAL_RCC_GetPCLK1Freq>
        break;
 8005ee4:	e7a4      	b.n	8005e30 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eea:	d09c      	beq.n	8005e26 <UART_SetConfig+0x86>
 8005eec:	e788      	b.n	8005e00 <UART_SetConfig+0x60>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eee:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005ef2:	d069      	beq.n	8005fc8 <UART_SetConfig+0x228>
        pclk = (uint32_t) LSE_VALUE;
 8005ef4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005ef8:	e7a8      	b.n	8005e4c <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 8005efa:	f7fe fcf1 	bl	80048e0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d097      	beq.n	8005e32 <UART_SetConfig+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f02:	0043      	lsls	r3, r0, #1
 8005f04:	6862      	ldr	r2, [r4, #4]
 8005f06:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f0e:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f10:	f1a2 0010 	sub.w	r0, r2, #16
 8005f14:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005f18:	4288      	cmp	r0, r1
 8005f1a:	f63f af71 	bhi.w	8005e00 <UART_SetConfig+0x60>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f1e:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 8005f22:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f24:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f26:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60cb      	str	r3, [r1, #12]
 8005f2e:	e780      	b.n	8005e32 <UART_SetConfig+0x92>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f34:	d085      	beq.n	8005e42 <UART_SetConfig+0xa2>
 8005f36:	e763      	b.n	8005e00 <UART_SetConfig+0x60>
 8005f38:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005f42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005f46:	d0d2      	beq.n	8005eee <UART_SetConfig+0x14e>
 8005f48:	d806      	bhi.n	8005f58 <UART_SetConfig+0x1b8>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0c5      	beq.n	8005eda <UART_SetConfig+0x13a>
 8005f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f52:	f43f af68 	beq.w	8005e26 <UART_SetConfig+0x86>
 8005f56:	e753      	b.n	8005e00 <UART_SetConfig+0x60>
 8005f58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005f5c:	f43f af71 	beq.w	8005e42 <UART_SetConfig+0xa2>
 8005f60:	e74e      	b.n	8005e00 <UART_SetConfig+0x60>
 8005f62:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f70:	d0bd      	beq.n	8005eee <UART_SetConfig+0x14e>
 8005f72:	d806      	bhi.n	8005f82 <UART_SetConfig+0x1e2>
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0b0      	beq.n	8005eda <UART_SetConfig+0x13a>
 8005f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7c:	f43f af53 	beq.w	8005e26 <UART_SetConfig+0x86>
 8005f80:	e73e      	b.n	8005e00 <UART_SetConfig+0x60>
 8005f82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f86:	f43f af5c 	beq.w	8005e42 <UART_SetConfig+0xa2>
 8005f8a:	e739      	b.n	8005e00 <UART_SetConfig+0x60>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f8c:	f7fe fcf6 	bl	800497c <HAL_RCC_GetPCLK2Freq>
        break;
 8005f90:	e7b5      	b.n	8005efe <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f92:	f7fe fcdb 	bl	800494c <HAL_RCC_GetPCLK1Freq>
        break;
 8005f96:	e7b2      	b.n	8005efe <UART_SetConfig+0x15e>
    switch (clocksource)
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	f63f af31 	bhi.w	8005e00 <UART_SetConfig+0x60>
 8005f9e:	a201      	add	r2, pc, #4	; (adr r2, 8005fa4 <UART_SetConfig+0x204>)
 8005fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa4:	08005f93 	.word	0x08005f93
 8005fa8:	08005f8d 	.word	0x08005f8d
 8005fac:	08005fcf 	.word	0x08005fcf
 8005fb0:	08005e01 	.word	0x08005e01
 8005fb4:	08005efb 	.word	0x08005efb
 8005fb8:	08005e01 	.word	0x08005e01
 8005fbc:	08005e01 	.word	0x08005e01
 8005fc0:	08005e01 	.word	0x08005e01
 8005fc4:	08005fc9 	.word	0x08005fc9
 8005fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fcc:	e79a      	b.n	8005f04 <UART_SetConfig+0x164>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <UART_SetConfig+0x254>)
 8005fd0:	e798      	b.n	8005f04 <UART_SetConfig+0x164>
 8005fd2:	bf00      	nop
 8005fd4:	40013800 	.word	0x40013800
 8005fd8:	40004400 	.word	0x40004400
 8005fdc:	40004800 	.word	0x40004800
 8005fe0:	40004c00 	.word	0x40004c00
 8005fe4:	40005000 	.word	0x40005000
 8005fe8:	007a1200 	.word	0x007a1200
 8005fec:	40021000 	.word	0x40021000
 8005ff0:	08009fbc 	.word	0x08009fbc
 8005ff4:	00f42400 	.word	0x00f42400

08005ff8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ff8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ffa:	07da      	lsls	r2, r3, #31
{
 8005ffc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ffe:	d506      	bpl.n	800600e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006000:	6801      	ldr	r1, [r0, #0]
 8006002:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006004:	684a      	ldr	r2, [r1, #4]
 8006006:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800600a:	4322      	orrs	r2, r4
 800600c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800600e:	079c      	lsls	r4, r3, #30
 8006010:	d506      	bpl.n	8006020 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006012:	6801      	ldr	r1, [r0, #0]
 8006014:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006016:	684a      	ldr	r2, [r1, #4]
 8006018:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800601c:	4322      	orrs	r2, r4
 800601e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006020:	0759      	lsls	r1, r3, #29
 8006022:	d506      	bpl.n	8006032 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006024:	6801      	ldr	r1, [r0, #0]
 8006026:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006028:	684a      	ldr	r2, [r1, #4]
 800602a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800602e:	4322      	orrs	r2, r4
 8006030:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006032:	071a      	lsls	r2, r3, #28
 8006034:	d506      	bpl.n	8006044 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006036:	6801      	ldr	r1, [r0, #0]
 8006038:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800603a:	684a      	ldr	r2, [r1, #4]
 800603c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006040:	4322      	orrs	r2, r4
 8006042:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006044:	06dc      	lsls	r4, r3, #27
 8006046:	d506      	bpl.n	8006056 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006048:	6801      	ldr	r1, [r0, #0]
 800604a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800604c:	688a      	ldr	r2, [r1, #8]
 800604e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006052:	4322      	orrs	r2, r4
 8006054:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006056:	0699      	lsls	r1, r3, #26
 8006058:	d506      	bpl.n	8006068 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800605a:	6801      	ldr	r1, [r0, #0]
 800605c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800605e:	688a      	ldr	r2, [r1, #8]
 8006060:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006064:	4322      	orrs	r2, r4
 8006066:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006068:	065a      	lsls	r2, r3, #25
 800606a:	d509      	bpl.n	8006080 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800606c:	6801      	ldr	r1, [r0, #0]
 800606e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006070:	684a      	ldr	r2, [r1, #4]
 8006072:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006076:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006078:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800607c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800607e:	d00b      	beq.n	8006098 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006080:	061b      	lsls	r3, r3, #24
 8006082:	d506      	bpl.n	8006092 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006084:	6802      	ldr	r2, [r0, #0]
 8006086:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006088:	6853      	ldr	r3, [r2, #4]
 800608a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800608e:	430b      	orrs	r3, r1
 8006090:	6053      	str	r3, [r2, #4]
}
 8006092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006096:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006098:	684a      	ldr	r2, [r1, #4]
 800609a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800609c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80060a0:	4322      	orrs	r2, r4
 80060a2:	604a      	str	r2, [r1, #4]
 80060a4:	e7ec      	b.n	8006080 <UART_AdvFeatureConfig+0x88>
 80060a6:	bf00      	nop

080060a8 <UART_WaitOnFlagUntilTimeout>:
{
 80060a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b0:	6804      	ldr	r4, [r0, #0]
{
 80060b2:	4607      	mov	r7, r0
 80060b4:	460e      	mov	r6, r1
 80060b6:	4615      	mov	r5, r2
 80060b8:	4699      	mov	r9, r3
 80060ba:	f1b8 3fff 	cmp.w	r8, #4294967295
 80060be:	d10a      	bne.n	80060d6 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c0:	69e3      	ldr	r3, [r4, #28]
 80060c2:	ea36 0303 	bics.w	r3, r6, r3
 80060c6:	bf0c      	ite	eq
 80060c8:	2301      	moveq	r3, #1
 80060ca:	2300      	movne	r3, #0
 80060cc:	429d      	cmp	r5, r3
 80060ce:	d0f7      	beq.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 80060d0:	2000      	movs	r0, #0
}
 80060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d6:	69e3      	ldr	r3, [r4, #28]
 80060d8:	ea36 0303 	bics.w	r3, r6, r3
 80060dc:	bf0c      	ite	eq
 80060de:	2301      	moveq	r3, #1
 80060e0:	2300      	movne	r3, #0
 80060e2:	42ab      	cmp	r3, r5
 80060e4:	d1f4      	bne.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e6:	f7fc fa35 	bl	8002554 <HAL_GetTick>
 80060ea:	eba0 0009 	sub.w	r0, r0, r9
 80060ee:	4540      	cmp	r0, r8
 80060f0:	d831      	bhi.n	8006156 <UART_WaitOnFlagUntilTimeout+0xae>
 80060f2:	f1b8 0f00 	cmp.w	r8, #0
 80060f6:	d02e      	beq.n	8006156 <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060f8:	683c      	ldr	r4, [r7, #0]
 80060fa:	6823      	ldr	r3, [r4, #0]
 80060fc:	0759      	lsls	r1, r3, #29
 80060fe:	4622      	mov	r2, r4
 8006100:	d5db      	bpl.n	80060ba <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006102:	69e3      	ldr	r3, [r4, #28]
 8006104:	051b      	lsls	r3, r3, #20
 8006106:	d5d8      	bpl.n	80060ba <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800610c:	6223      	str	r3, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006112:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	e844 3100 	strex	r1, r3, [r4]
 800611a:	b139      	cbz	r1, 800612c <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	e852 3f00 	ldrex	r3, [r2]
 8006120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	e842 3100 	strex	r1, r3, [r2]
 8006128:	2900      	cmp	r1, #0
 800612a:	d1f7      	bne.n	800611c <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612c:	f102 0308 	add.w	r3, r2, #8
 8006130:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006134:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	f102 0008 	add.w	r0, r2, #8
 800613c:	e840 3100 	strex	r1, r3, [r0]
 8006140:	2900      	cmp	r1, #0
 8006142:	d1f3      	bne.n	800612c <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8006144:	2320      	movs	r3, #32
 8006146:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8006148:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800614c:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 800614e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006150:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 8006154:	e7bd      	b.n	80060d2 <UART_WaitOnFlagUntilTimeout+0x2a>
 8006156:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800615c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	e842 3100 	strex	r1, r3, [r2]
 8006164:	2900      	cmp	r1, #0
 8006166:	d1f7      	bne.n	8006158 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	f102 0308 	add.w	r3, r2, #8
 800616c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	f102 0008 	add.w	r0, r2, #8
 8006178:	e840 3100 	strex	r1, r3, [r0]
 800617c:	2900      	cmp	r1, #0
 800617e:	d1f3      	bne.n	8006168 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 8006180:	2320      	movs	r3, #32
 8006182:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8006184:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006188:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 800618a:	2003      	movs	r0, #3
 800618c:	e7a1      	b.n	80060d2 <UART_WaitOnFlagUntilTimeout+0x2a>
 800618e:	bf00      	nop

08006190 <HAL_UART_Init>:
  if (huart == NULL)
 8006190:	2800      	cmp	r0, #0
 8006192:	d062      	beq.n	800625a <HAL_UART_Init+0xca>
{
 8006194:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006196:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8006198:	b082      	sub	sp, #8
 800619a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800619c:	2b00      	cmp	r3, #0
 800619e:	d049      	beq.n	8006234 <HAL_UART_Init+0xa4>
  __HAL_UART_DISABLE(huart);
 80061a0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80061a2:	2324      	movs	r3, #36	; 0x24
 80061a4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061ac:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80061ae:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061b0:	f7ff fdf6 	bl	8005da0 <UART_SetConfig>
 80061b4:	2801      	cmp	r0, #1
 80061b6:	d03a      	beq.n	800622e <HAL_UART_Init+0x9e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d133      	bne.n	8006226 <HAL_UART_Init+0x96>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	6859      	ldr	r1, [r3, #4]
 80061c2:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80061c6:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c8:	6899      	ldr	r1, [r3, #8]
 80061ca:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80061ce:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80061d0:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d2:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80061d4:	f041 0101 	orr.w	r1, r1, #1
 80061d8:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061da:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 80061de:	f7fc f9b9 	bl	8002554 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80061e8:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061ea:	d40c      	bmi.n	8006206 <HAL_UART_Init+0x76>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	075b      	lsls	r3, r3, #29
 80061f0:	d425      	bmi.n	800623e <HAL_UART_Init+0xae>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80061f4:	2220      	movs	r2, #32
 80061f6:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80061f8:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80061fc:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 80061fe:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006200:	6623      	str	r3, [r4, #96]	; 0x60
}
 8006202:	b002      	add	sp, #8
 8006204:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006206:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	462a      	mov	r2, r5
 800620e:	4603      	mov	r3, r0
 8006210:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006214:	4620      	mov	r0, r4
 8006216:	f7ff ff47 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 800621a:	b9e0      	cbnz	r0, 8006256 <HAL_UART_Init+0xc6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	075b      	lsls	r3, r3, #29
 8006222:	d40c      	bmi.n	800623e <HAL_UART_Init+0xae>
 8006224:	e7e5      	b.n	80061f2 <HAL_UART_Init+0x62>
    UART_AdvFeatureConfig(huart);
 8006226:	4620      	mov	r0, r4
 8006228:	f7ff fee6 	bl	8005ff8 <UART_AdvFeatureConfig>
 800622c:	e7c7      	b.n	80061be <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800622e:	2001      	movs	r0, #1
}
 8006230:	b002      	add	sp, #8
 8006232:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8006234:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8006238:	f7fc f8ca 	bl	80023d0 <HAL_UART_MspInit>
 800623c:	e7b0      	b.n	80061a0 <HAL_UART_Init+0x10>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800623e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	2200      	movs	r2, #0
 8006246:	4633      	mov	r3, r6
 8006248:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800624c:	4620      	mov	r0, r4
 800624e:	f7ff ff2b 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 8006252:	2800      	cmp	r0, #0
 8006254:	d0cd      	beq.n	80061f2 <HAL_UART_Init+0x62>
      return HAL_TIMEOUT;
 8006256:	2003      	movs	r0, #3
 8006258:	e7d3      	b.n	8006202 <HAL_UART_Init+0x72>
    return HAL_ERROR;
 800625a:	2001      	movs	r0, #1
}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop

08006260 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	0000      	movs	r0, r0
	...

08006268 <sin>:
 8006268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800626a:	ec53 2b10 	vmov	r2, r3, d0
 800626e:	4828      	ldr	r0, [pc, #160]	; (8006310 <sin+0xa8>)
 8006270:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006274:	4281      	cmp	r1, r0
 8006276:	dc07      	bgt.n	8006288 <sin+0x20>
 8006278:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006308 <sin+0xa0>
 800627c:	2000      	movs	r0, #0
 800627e:	b005      	add	sp, #20
 8006280:	f85d eb04 	ldr.w	lr, [sp], #4
 8006284:	f000 be6c 	b.w	8006f60 <__kernel_sin>
 8006288:	4822      	ldr	r0, [pc, #136]	; (8006314 <sin+0xac>)
 800628a:	4281      	cmp	r1, r0
 800628c:	dd09      	ble.n	80062a2 <sin+0x3a>
 800628e:	ee10 0a10 	vmov	r0, s0
 8006292:	4619      	mov	r1, r3
 8006294:	f7f9 fff8 	bl	8000288 <__aeabi_dsub>
 8006298:	ec41 0b10 	vmov	d0, r0, r1
 800629c:	b005      	add	sp, #20
 800629e:	f85d fb04 	ldr.w	pc, [sp], #4
 80062a2:	4668      	mov	r0, sp
 80062a4:	f000 f838 	bl	8006318 <__ieee754_rem_pio2>
 80062a8:	f000 0003 	and.w	r0, r0, #3
 80062ac:	2801      	cmp	r0, #1
 80062ae:	d00c      	beq.n	80062ca <sin+0x62>
 80062b0:	2802      	cmp	r0, #2
 80062b2:	d011      	beq.n	80062d8 <sin+0x70>
 80062b4:	b9f0      	cbnz	r0, 80062f4 <sin+0x8c>
 80062b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062ba:	ed9d 0b00 	vldr	d0, [sp]
 80062be:	2001      	movs	r0, #1
 80062c0:	f000 fe4e 	bl	8006f60 <__kernel_sin>
 80062c4:	ec51 0b10 	vmov	r0, r1, d0
 80062c8:	e7e6      	b.n	8006298 <sin+0x30>
 80062ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062ce:	ed9d 0b00 	vldr	d0, [sp]
 80062d2:	f000 fa2d 	bl	8006730 <__kernel_cos>
 80062d6:	e7f5      	b.n	80062c4 <sin+0x5c>
 80062d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062dc:	ed9d 0b00 	vldr	d0, [sp]
 80062e0:	2001      	movs	r0, #1
 80062e2:	f000 fe3d 	bl	8006f60 <__kernel_sin>
 80062e6:	ec53 2b10 	vmov	r2, r3, d0
 80062ea:	ee10 0a10 	vmov	r0, s0
 80062ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80062f2:	e7d1      	b.n	8006298 <sin+0x30>
 80062f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80062f8:	ed9d 0b00 	vldr	d0, [sp]
 80062fc:	f000 fa18 	bl	8006730 <__kernel_cos>
 8006300:	e7f1      	b.n	80062e6 <sin+0x7e>
 8006302:	bf00      	nop
 8006304:	f3af 8000 	nop.w
	...
 8006310:	3fe921fb 	.word	0x3fe921fb
 8006314:	7fefffff 	.word	0x7fefffff

08006318 <__ieee754_rem_pio2>:
 8006318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631c:	ed2d 8b02 	vpush	{d8}
 8006320:	ec55 4b10 	vmov	r4, r5, d0
 8006324:	4bca      	ldr	r3, [pc, #808]	; (8006650 <__ieee754_rem_pio2+0x338>)
 8006326:	b08b      	sub	sp, #44	; 0x2c
 8006328:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800632c:	4598      	cmp	r8, r3
 800632e:	4682      	mov	sl, r0
 8006330:	9502      	str	r5, [sp, #8]
 8006332:	dc08      	bgt.n	8006346 <__ieee754_rem_pio2+0x2e>
 8006334:	2200      	movs	r2, #0
 8006336:	2300      	movs	r3, #0
 8006338:	ed80 0b00 	vstr	d0, [r0]
 800633c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006340:	f04f 0b00 	mov.w	fp, #0
 8006344:	e028      	b.n	8006398 <__ieee754_rem_pio2+0x80>
 8006346:	4bc3      	ldr	r3, [pc, #780]	; (8006654 <__ieee754_rem_pio2+0x33c>)
 8006348:	4598      	cmp	r8, r3
 800634a:	dc78      	bgt.n	800643e <__ieee754_rem_pio2+0x126>
 800634c:	9b02      	ldr	r3, [sp, #8]
 800634e:	4ec2      	ldr	r6, [pc, #776]	; (8006658 <__ieee754_rem_pio2+0x340>)
 8006350:	2b00      	cmp	r3, #0
 8006352:	ee10 0a10 	vmov	r0, s0
 8006356:	a3b0      	add	r3, pc, #704	; (adr r3, 8006618 <__ieee754_rem_pio2+0x300>)
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	4629      	mov	r1, r5
 800635e:	dd39      	ble.n	80063d4 <__ieee754_rem_pio2+0xbc>
 8006360:	f7f9 ff92 	bl	8000288 <__aeabi_dsub>
 8006364:	45b0      	cmp	r8, r6
 8006366:	4604      	mov	r4, r0
 8006368:	460d      	mov	r5, r1
 800636a:	d01b      	beq.n	80063a4 <__ieee754_rem_pio2+0x8c>
 800636c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006620 <__ieee754_rem_pio2+0x308>)
 800636e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006372:	f7f9 ff89 	bl	8000288 <__aeabi_dsub>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	e9ca 2300 	strd	r2, r3, [sl]
 800637e:	4620      	mov	r0, r4
 8006380:	4629      	mov	r1, r5
 8006382:	f7f9 ff81 	bl	8000288 <__aeabi_dsub>
 8006386:	a3a6      	add	r3, pc, #664	; (adr r3, 8006620 <__ieee754_rem_pio2+0x308>)
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f7f9 ff7c 	bl	8000288 <__aeabi_dsub>
 8006390:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006394:	f04f 0b01 	mov.w	fp, #1
 8006398:	4658      	mov	r0, fp
 800639a:	b00b      	add	sp, #44	; 0x2c
 800639c:	ecbd 8b02 	vpop	{d8}
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	a3a0      	add	r3, pc, #640	; (adr r3, 8006628 <__ieee754_rem_pio2+0x310>)
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f7f9 ff6d 	bl	8000288 <__aeabi_dsub>
 80063ae:	a3a0      	add	r3, pc, #640	; (adr r3, 8006630 <__ieee754_rem_pio2+0x318>)
 80063b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b4:	4604      	mov	r4, r0
 80063b6:	460d      	mov	r5, r1
 80063b8:	f7f9 ff66 	bl	8000288 <__aeabi_dsub>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	e9ca 2300 	strd	r2, r3, [sl]
 80063c4:	4620      	mov	r0, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	f7f9 ff5e 	bl	8000288 <__aeabi_dsub>
 80063cc:	a398      	add	r3, pc, #608	; (adr r3, 8006630 <__ieee754_rem_pio2+0x318>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	e7db      	b.n	800638c <__ieee754_rem_pio2+0x74>
 80063d4:	f7f9 ff5a 	bl	800028c <__adddf3>
 80063d8:	45b0      	cmp	r8, r6
 80063da:	4604      	mov	r4, r0
 80063dc:	460d      	mov	r5, r1
 80063de:	d016      	beq.n	800640e <__ieee754_rem_pio2+0xf6>
 80063e0:	a38f      	add	r3, pc, #572	; (adr r3, 8006620 <__ieee754_rem_pio2+0x308>)
 80063e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e6:	f7f9 ff51 	bl	800028c <__adddf3>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	e9ca 2300 	strd	r2, r3, [sl]
 80063f2:	4620      	mov	r0, r4
 80063f4:	4629      	mov	r1, r5
 80063f6:	f7f9 ff47 	bl	8000288 <__aeabi_dsub>
 80063fa:	a389      	add	r3, pc, #548	; (adr r3, 8006620 <__ieee754_rem_pio2+0x308>)
 80063fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006400:	f7f9 ff44 	bl	800028c <__adddf3>
 8006404:	f04f 3bff 	mov.w	fp, #4294967295
 8006408:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800640c:	e7c4      	b.n	8006398 <__ieee754_rem_pio2+0x80>
 800640e:	a386      	add	r3, pc, #536	; (adr r3, 8006628 <__ieee754_rem_pio2+0x310>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7f9 ff3a 	bl	800028c <__adddf3>
 8006418:	a385      	add	r3, pc, #532	; (adr r3, 8006630 <__ieee754_rem_pio2+0x318>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	4604      	mov	r4, r0
 8006420:	460d      	mov	r5, r1
 8006422:	f7f9 ff33 	bl	800028c <__adddf3>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	e9ca 2300 	strd	r2, r3, [sl]
 800642e:	4620      	mov	r0, r4
 8006430:	4629      	mov	r1, r5
 8006432:	f7f9 ff29 	bl	8000288 <__aeabi_dsub>
 8006436:	a37e      	add	r3, pc, #504	; (adr r3, 8006630 <__ieee754_rem_pio2+0x318>)
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	e7e0      	b.n	8006400 <__ieee754_rem_pio2+0xe8>
 800643e:	4b87      	ldr	r3, [pc, #540]	; (800665c <__ieee754_rem_pio2+0x344>)
 8006440:	4598      	cmp	r8, r3
 8006442:	f300 80d9 	bgt.w	80065f8 <__ieee754_rem_pio2+0x2e0>
 8006446:	f000 fe49 	bl	80070dc <fabs>
 800644a:	ec55 4b10 	vmov	r4, r5, d0
 800644e:	ee10 0a10 	vmov	r0, s0
 8006452:	a379      	add	r3, pc, #484	; (adr r3, 8006638 <__ieee754_rem_pio2+0x320>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	4629      	mov	r1, r5
 800645a:	f7fa f8cd 	bl	80005f8 <__aeabi_dmul>
 800645e:	4b80      	ldr	r3, [pc, #512]	; (8006660 <__ieee754_rem_pio2+0x348>)
 8006460:	2200      	movs	r2, #0
 8006462:	f7f9 ff13 	bl	800028c <__adddf3>
 8006466:	f7fa fb77 	bl	8000b58 <__aeabi_d2iz>
 800646a:	4683      	mov	fp, r0
 800646c:	f7fa f85a 	bl	8000524 <__aeabi_i2d>
 8006470:	4602      	mov	r2, r0
 8006472:	460b      	mov	r3, r1
 8006474:	ec43 2b18 	vmov	d8, r2, r3
 8006478:	a367      	add	r3, pc, #412	; (adr r3, 8006618 <__ieee754_rem_pio2+0x300>)
 800647a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647e:	f7fa f8bb 	bl	80005f8 <__aeabi_dmul>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	f7f9 fefd 	bl	8000288 <__aeabi_dsub>
 800648e:	a364      	add	r3, pc, #400	; (adr r3, 8006620 <__ieee754_rem_pio2+0x308>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	4606      	mov	r6, r0
 8006496:	460f      	mov	r7, r1
 8006498:	ec51 0b18 	vmov	r0, r1, d8
 800649c:	f7fa f8ac 	bl	80005f8 <__aeabi_dmul>
 80064a0:	f1bb 0f1f 	cmp.w	fp, #31
 80064a4:	4604      	mov	r4, r0
 80064a6:	460d      	mov	r5, r1
 80064a8:	dc0d      	bgt.n	80064c6 <__ieee754_rem_pio2+0x1ae>
 80064aa:	4b6e      	ldr	r3, [pc, #440]	; (8006664 <__ieee754_rem_pio2+0x34c>)
 80064ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 80064b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b4:	4543      	cmp	r3, r8
 80064b6:	d006      	beq.n	80064c6 <__ieee754_rem_pio2+0x1ae>
 80064b8:	4622      	mov	r2, r4
 80064ba:	462b      	mov	r3, r5
 80064bc:	4630      	mov	r0, r6
 80064be:	4639      	mov	r1, r7
 80064c0:	f7f9 fee2 	bl	8000288 <__aeabi_dsub>
 80064c4:	e00f      	b.n	80064e6 <__ieee754_rem_pio2+0x1ce>
 80064c6:	462b      	mov	r3, r5
 80064c8:	4622      	mov	r2, r4
 80064ca:	4630      	mov	r0, r6
 80064cc:	4639      	mov	r1, r7
 80064ce:	f7f9 fedb 	bl	8000288 <__aeabi_dsub>
 80064d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80064d6:	9303      	str	r3, [sp, #12]
 80064d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80064dc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80064e0:	f1b8 0f10 	cmp.w	r8, #16
 80064e4:	dc02      	bgt.n	80064ec <__ieee754_rem_pio2+0x1d4>
 80064e6:	e9ca 0100 	strd	r0, r1, [sl]
 80064ea:	e039      	b.n	8006560 <__ieee754_rem_pio2+0x248>
 80064ec:	a34e      	add	r3, pc, #312	; (adr r3, 8006628 <__ieee754_rem_pio2+0x310>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	ec51 0b18 	vmov	r0, r1, d8
 80064f6:	f7fa f87f 	bl	80005f8 <__aeabi_dmul>
 80064fa:	4604      	mov	r4, r0
 80064fc:	460d      	mov	r5, r1
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4630      	mov	r0, r6
 8006504:	4639      	mov	r1, r7
 8006506:	f7f9 febf 	bl	8000288 <__aeabi_dsub>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	4680      	mov	r8, r0
 8006510:	4689      	mov	r9, r1
 8006512:	4630      	mov	r0, r6
 8006514:	4639      	mov	r1, r7
 8006516:	f7f9 feb7 	bl	8000288 <__aeabi_dsub>
 800651a:	4622      	mov	r2, r4
 800651c:	462b      	mov	r3, r5
 800651e:	f7f9 feb3 	bl	8000288 <__aeabi_dsub>
 8006522:	a343      	add	r3, pc, #268	; (adr r3, 8006630 <__ieee754_rem_pio2+0x318>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	4604      	mov	r4, r0
 800652a:	460d      	mov	r5, r1
 800652c:	ec51 0b18 	vmov	r0, r1, d8
 8006530:	f7fa f862 	bl	80005f8 <__aeabi_dmul>
 8006534:	4622      	mov	r2, r4
 8006536:	462b      	mov	r3, r5
 8006538:	f7f9 fea6 	bl	8000288 <__aeabi_dsub>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4604      	mov	r4, r0
 8006542:	460d      	mov	r5, r1
 8006544:	4640      	mov	r0, r8
 8006546:	4649      	mov	r1, r9
 8006548:	f7f9 fe9e 	bl	8000288 <__aeabi_dsub>
 800654c:	9a03      	ldr	r2, [sp, #12]
 800654e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b31      	cmp	r3, #49	; 0x31
 8006556:	dc24      	bgt.n	80065a2 <__ieee754_rem_pio2+0x28a>
 8006558:	e9ca 0100 	strd	r0, r1, [sl]
 800655c:	4646      	mov	r6, r8
 800655e:	464f      	mov	r7, r9
 8006560:	e9da 8900 	ldrd	r8, r9, [sl]
 8006564:	4630      	mov	r0, r6
 8006566:	4642      	mov	r2, r8
 8006568:	464b      	mov	r3, r9
 800656a:	4639      	mov	r1, r7
 800656c:	f7f9 fe8c 	bl	8000288 <__aeabi_dsub>
 8006570:	462b      	mov	r3, r5
 8006572:	4622      	mov	r2, r4
 8006574:	f7f9 fe88 	bl	8000288 <__aeabi_dsub>
 8006578:	9b02      	ldr	r3, [sp, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006580:	f6bf af0a 	bge.w	8006398 <__ieee754_rem_pio2+0x80>
 8006584:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006588:	f8ca 3004 	str.w	r3, [sl, #4]
 800658c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006590:	f8ca 8000 	str.w	r8, [sl]
 8006594:	f8ca 0008 	str.w	r0, [sl, #8]
 8006598:	f8ca 300c 	str.w	r3, [sl, #12]
 800659c:	f1cb 0b00 	rsb	fp, fp, #0
 80065a0:	e6fa      	b.n	8006398 <__ieee754_rem_pio2+0x80>
 80065a2:	a327      	add	r3, pc, #156	; (adr r3, 8006640 <__ieee754_rem_pio2+0x328>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	ec51 0b18 	vmov	r0, r1, d8
 80065ac:	f7fa f824 	bl	80005f8 <__aeabi_dmul>
 80065b0:	4604      	mov	r4, r0
 80065b2:	460d      	mov	r5, r1
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4640      	mov	r0, r8
 80065ba:	4649      	mov	r1, r9
 80065bc:	f7f9 fe64 	bl	8000288 <__aeabi_dsub>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4606      	mov	r6, r0
 80065c6:	460f      	mov	r7, r1
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	f7f9 fe5c 	bl	8000288 <__aeabi_dsub>
 80065d0:	4622      	mov	r2, r4
 80065d2:	462b      	mov	r3, r5
 80065d4:	f7f9 fe58 	bl	8000288 <__aeabi_dsub>
 80065d8:	a31b      	add	r3, pc, #108	; (adr r3, 8006648 <__ieee754_rem_pio2+0x330>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	4604      	mov	r4, r0
 80065e0:	460d      	mov	r5, r1
 80065e2:	ec51 0b18 	vmov	r0, r1, d8
 80065e6:	f7fa f807 	bl	80005f8 <__aeabi_dmul>
 80065ea:	4622      	mov	r2, r4
 80065ec:	462b      	mov	r3, r5
 80065ee:	f7f9 fe4b 	bl	8000288 <__aeabi_dsub>
 80065f2:	4604      	mov	r4, r0
 80065f4:	460d      	mov	r5, r1
 80065f6:	e75f      	b.n	80064b8 <__ieee754_rem_pio2+0x1a0>
 80065f8:	4b1b      	ldr	r3, [pc, #108]	; (8006668 <__ieee754_rem_pio2+0x350>)
 80065fa:	4598      	cmp	r8, r3
 80065fc:	dd36      	ble.n	800666c <__ieee754_rem_pio2+0x354>
 80065fe:	ee10 2a10 	vmov	r2, s0
 8006602:	462b      	mov	r3, r5
 8006604:	4620      	mov	r0, r4
 8006606:	4629      	mov	r1, r5
 8006608:	f7f9 fe3e 	bl	8000288 <__aeabi_dsub>
 800660c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006610:	e9ca 0100 	strd	r0, r1, [sl]
 8006614:	e694      	b.n	8006340 <__ieee754_rem_pio2+0x28>
 8006616:	bf00      	nop
 8006618:	54400000 	.word	0x54400000
 800661c:	3ff921fb 	.word	0x3ff921fb
 8006620:	1a626331 	.word	0x1a626331
 8006624:	3dd0b461 	.word	0x3dd0b461
 8006628:	1a600000 	.word	0x1a600000
 800662c:	3dd0b461 	.word	0x3dd0b461
 8006630:	2e037073 	.word	0x2e037073
 8006634:	3ba3198a 	.word	0x3ba3198a
 8006638:	6dc9c883 	.word	0x6dc9c883
 800663c:	3fe45f30 	.word	0x3fe45f30
 8006640:	2e000000 	.word	0x2e000000
 8006644:	3ba3198a 	.word	0x3ba3198a
 8006648:	252049c1 	.word	0x252049c1
 800664c:	397b839a 	.word	0x397b839a
 8006650:	3fe921fb 	.word	0x3fe921fb
 8006654:	4002d97b 	.word	0x4002d97b
 8006658:	3ff921fb 	.word	0x3ff921fb
 800665c:	413921fb 	.word	0x413921fb
 8006660:	3fe00000 	.word	0x3fe00000
 8006664:	08009fc0 	.word	0x08009fc0
 8006668:	7fefffff 	.word	0x7fefffff
 800666c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006670:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006674:	ee10 0a10 	vmov	r0, s0
 8006678:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800667c:	ee10 6a10 	vmov	r6, s0
 8006680:	460f      	mov	r7, r1
 8006682:	f7fa fa69 	bl	8000b58 <__aeabi_d2iz>
 8006686:	f7f9 ff4d 	bl	8000524 <__aeabi_i2d>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4630      	mov	r0, r6
 8006690:	4639      	mov	r1, r7
 8006692:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006696:	f7f9 fdf7 	bl	8000288 <__aeabi_dsub>
 800669a:	4b23      	ldr	r3, [pc, #140]	; (8006728 <__ieee754_rem_pio2+0x410>)
 800669c:	2200      	movs	r2, #0
 800669e:	f7f9 ffab 	bl	80005f8 <__aeabi_dmul>
 80066a2:	460f      	mov	r7, r1
 80066a4:	4606      	mov	r6, r0
 80066a6:	f7fa fa57 	bl	8000b58 <__aeabi_d2iz>
 80066aa:	f7f9 ff3b 	bl	8000524 <__aeabi_i2d>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066ba:	f7f9 fde5 	bl	8000288 <__aeabi_dsub>
 80066be:	4b1a      	ldr	r3, [pc, #104]	; (8006728 <__ieee754_rem_pio2+0x410>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	f7f9 ff99 	bl	80005f8 <__aeabi_dmul>
 80066c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80066ca:	ad04      	add	r5, sp, #16
 80066cc:	f04f 0803 	mov.w	r8, #3
 80066d0:	46a9      	mov	r9, r5
 80066d2:	2600      	movs	r6, #0
 80066d4:	2700      	movs	r7, #0
 80066d6:	4632      	mov	r2, r6
 80066d8:	463b      	mov	r3, r7
 80066da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80066de:	46c3      	mov	fp, r8
 80066e0:	3d08      	subs	r5, #8
 80066e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80066e6:	f7fa f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d1f3      	bne.n	80066d6 <__ieee754_rem_pio2+0x3be>
 80066ee:	4b0f      	ldr	r3, [pc, #60]	; (800672c <__ieee754_rem_pio2+0x414>)
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	2302      	movs	r3, #2
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4622      	mov	r2, r4
 80066f8:	465b      	mov	r3, fp
 80066fa:	4651      	mov	r1, sl
 80066fc:	4648      	mov	r0, r9
 80066fe:	f000 f8df 	bl	80068c0 <__kernel_rem_pio2>
 8006702:	9b02      	ldr	r3, [sp, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	4683      	mov	fp, r0
 8006708:	f6bf ae46 	bge.w	8006398 <__ieee754_rem_pio2+0x80>
 800670c:	e9da 2100 	ldrd	r2, r1, [sl]
 8006710:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006714:	e9ca 2300 	strd	r2, r3, [sl]
 8006718:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800671c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006720:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006724:	e73a      	b.n	800659c <__ieee754_rem_pio2+0x284>
 8006726:	bf00      	nop
 8006728:	41700000 	.word	0x41700000
 800672c:	0800a040 	.word	0x0800a040

08006730 <__kernel_cos>:
 8006730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	ec57 6b10 	vmov	r6, r7, d0
 8006738:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800673c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006740:	ed8d 1b00 	vstr	d1, [sp]
 8006744:	da07      	bge.n	8006756 <__kernel_cos+0x26>
 8006746:	ee10 0a10 	vmov	r0, s0
 800674a:	4639      	mov	r1, r7
 800674c:	f7fa fa04 	bl	8000b58 <__aeabi_d2iz>
 8006750:	2800      	cmp	r0, #0
 8006752:	f000 8088 	beq.w	8006866 <__kernel_cos+0x136>
 8006756:	4632      	mov	r2, r6
 8006758:	463b      	mov	r3, r7
 800675a:	4630      	mov	r0, r6
 800675c:	4639      	mov	r1, r7
 800675e:	f7f9 ff4b 	bl	80005f8 <__aeabi_dmul>
 8006762:	4b51      	ldr	r3, [pc, #324]	; (80068a8 <__kernel_cos+0x178>)
 8006764:	2200      	movs	r2, #0
 8006766:	4604      	mov	r4, r0
 8006768:	460d      	mov	r5, r1
 800676a:	f7f9 ff45 	bl	80005f8 <__aeabi_dmul>
 800676e:	a340      	add	r3, pc, #256	; (adr r3, 8006870 <__kernel_cos+0x140>)
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	4682      	mov	sl, r0
 8006776:	468b      	mov	fp, r1
 8006778:	4620      	mov	r0, r4
 800677a:	4629      	mov	r1, r5
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	a33d      	add	r3, pc, #244	; (adr r3, 8006878 <__kernel_cos+0x148>)
 8006782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006786:	f7f9 fd81 	bl	800028c <__adddf3>
 800678a:	4622      	mov	r2, r4
 800678c:	462b      	mov	r3, r5
 800678e:	f7f9 ff33 	bl	80005f8 <__aeabi_dmul>
 8006792:	a33b      	add	r3, pc, #236	; (adr r3, 8006880 <__kernel_cos+0x150>)
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f7f9 fd76 	bl	8000288 <__aeabi_dsub>
 800679c:	4622      	mov	r2, r4
 800679e:	462b      	mov	r3, r5
 80067a0:	f7f9 ff2a 	bl	80005f8 <__aeabi_dmul>
 80067a4:	a338      	add	r3, pc, #224	; (adr r3, 8006888 <__kernel_cos+0x158>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f7f9 fd6f 	bl	800028c <__adddf3>
 80067ae:	4622      	mov	r2, r4
 80067b0:	462b      	mov	r3, r5
 80067b2:	f7f9 ff21 	bl	80005f8 <__aeabi_dmul>
 80067b6:	a336      	add	r3, pc, #216	; (adr r3, 8006890 <__kernel_cos+0x160>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f7f9 fd64 	bl	8000288 <__aeabi_dsub>
 80067c0:	4622      	mov	r2, r4
 80067c2:	462b      	mov	r3, r5
 80067c4:	f7f9 ff18 	bl	80005f8 <__aeabi_dmul>
 80067c8:	a333      	add	r3, pc, #204	; (adr r3, 8006898 <__kernel_cos+0x168>)
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f7f9 fd5d 	bl	800028c <__adddf3>
 80067d2:	4622      	mov	r2, r4
 80067d4:	462b      	mov	r3, r5
 80067d6:	f7f9 ff0f 	bl	80005f8 <__aeabi_dmul>
 80067da:	4622      	mov	r2, r4
 80067dc:	462b      	mov	r3, r5
 80067de:	f7f9 ff0b 	bl	80005f8 <__aeabi_dmul>
 80067e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067e6:	4604      	mov	r4, r0
 80067e8:	460d      	mov	r5, r1
 80067ea:	4630      	mov	r0, r6
 80067ec:	4639      	mov	r1, r7
 80067ee:	f7f9 ff03 	bl	80005f8 <__aeabi_dmul>
 80067f2:	460b      	mov	r3, r1
 80067f4:	4602      	mov	r2, r0
 80067f6:	4629      	mov	r1, r5
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7f9 fd45 	bl	8000288 <__aeabi_dsub>
 80067fe:	4b2b      	ldr	r3, [pc, #172]	; (80068ac <__kernel_cos+0x17c>)
 8006800:	4598      	cmp	r8, r3
 8006802:	4606      	mov	r6, r0
 8006804:	460f      	mov	r7, r1
 8006806:	dc10      	bgt.n	800682a <__kernel_cos+0xfa>
 8006808:	4602      	mov	r2, r0
 800680a:	460b      	mov	r3, r1
 800680c:	4650      	mov	r0, sl
 800680e:	4659      	mov	r1, fp
 8006810:	f7f9 fd3a 	bl	8000288 <__aeabi_dsub>
 8006814:	460b      	mov	r3, r1
 8006816:	4926      	ldr	r1, [pc, #152]	; (80068b0 <__kernel_cos+0x180>)
 8006818:	4602      	mov	r2, r0
 800681a:	2000      	movs	r0, #0
 800681c:	f7f9 fd34 	bl	8000288 <__aeabi_dsub>
 8006820:	ec41 0b10 	vmov	d0, r0, r1
 8006824:	b003      	add	sp, #12
 8006826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682a:	4b22      	ldr	r3, [pc, #136]	; (80068b4 <__kernel_cos+0x184>)
 800682c:	4920      	ldr	r1, [pc, #128]	; (80068b0 <__kernel_cos+0x180>)
 800682e:	4598      	cmp	r8, r3
 8006830:	bfcc      	ite	gt
 8006832:	4d21      	ldrgt	r5, [pc, #132]	; (80068b8 <__kernel_cos+0x188>)
 8006834:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006838:	2400      	movs	r4, #0
 800683a:	4622      	mov	r2, r4
 800683c:	462b      	mov	r3, r5
 800683e:	2000      	movs	r0, #0
 8006840:	f7f9 fd22 	bl	8000288 <__aeabi_dsub>
 8006844:	4622      	mov	r2, r4
 8006846:	4680      	mov	r8, r0
 8006848:	4689      	mov	r9, r1
 800684a:	462b      	mov	r3, r5
 800684c:	4650      	mov	r0, sl
 800684e:	4659      	mov	r1, fp
 8006850:	f7f9 fd1a 	bl	8000288 <__aeabi_dsub>
 8006854:	4632      	mov	r2, r6
 8006856:	463b      	mov	r3, r7
 8006858:	f7f9 fd16 	bl	8000288 <__aeabi_dsub>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4640      	mov	r0, r8
 8006862:	4649      	mov	r1, r9
 8006864:	e7da      	b.n	800681c <__kernel_cos+0xec>
 8006866:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80068a0 <__kernel_cos+0x170>
 800686a:	e7db      	b.n	8006824 <__kernel_cos+0xf4>
 800686c:	f3af 8000 	nop.w
 8006870:	be8838d4 	.word	0xbe8838d4
 8006874:	bda8fae9 	.word	0xbda8fae9
 8006878:	bdb4b1c4 	.word	0xbdb4b1c4
 800687c:	3e21ee9e 	.word	0x3e21ee9e
 8006880:	809c52ad 	.word	0x809c52ad
 8006884:	3e927e4f 	.word	0x3e927e4f
 8006888:	19cb1590 	.word	0x19cb1590
 800688c:	3efa01a0 	.word	0x3efa01a0
 8006890:	16c15177 	.word	0x16c15177
 8006894:	3f56c16c 	.word	0x3f56c16c
 8006898:	5555554c 	.word	0x5555554c
 800689c:	3fa55555 	.word	0x3fa55555
 80068a0:	00000000 	.word	0x00000000
 80068a4:	3ff00000 	.word	0x3ff00000
 80068a8:	3fe00000 	.word	0x3fe00000
 80068ac:	3fd33332 	.word	0x3fd33332
 80068b0:	3ff00000 	.word	0x3ff00000
 80068b4:	3fe90000 	.word	0x3fe90000
 80068b8:	3fd20000 	.word	0x3fd20000
 80068bc:	00000000 	.word	0x00000000

080068c0 <__kernel_rem_pio2>:
 80068c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c4:	ed2d 8b02 	vpush	{d8}
 80068c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80068cc:	f112 0f14 	cmn.w	r2, #20
 80068d0:	9308      	str	r3, [sp, #32]
 80068d2:	9101      	str	r1, [sp, #4]
 80068d4:	4bc4      	ldr	r3, [pc, #784]	; (8006be8 <__kernel_rem_pio2+0x328>)
 80068d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80068d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80068da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068de:	9302      	str	r3, [sp, #8]
 80068e0:	9b08      	ldr	r3, [sp, #32]
 80068e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068e6:	bfa8      	it	ge
 80068e8:	1ed4      	subge	r4, r2, #3
 80068ea:	9306      	str	r3, [sp, #24]
 80068ec:	bfb2      	itee	lt
 80068ee:	2400      	movlt	r4, #0
 80068f0:	2318      	movge	r3, #24
 80068f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80068f6:	f06f 0317 	mvn.w	r3, #23
 80068fa:	fb04 3303 	mla	r3, r4, r3, r3
 80068fe:	eb03 0a02 	add.w	sl, r3, r2
 8006902:	9b02      	ldr	r3, [sp, #8]
 8006904:	9a06      	ldr	r2, [sp, #24]
 8006906:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006bd8 <__kernel_rem_pio2+0x318>
 800690a:	eb03 0802 	add.w	r8, r3, r2
 800690e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8006910:	1aa7      	subs	r7, r4, r2
 8006912:	ae22      	add	r6, sp, #136	; 0x88
 8006914:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006918:	2500      	movs	r5, #0
 800691a:	4545      	cmp	r5, r8
 800691c:	dd13      	ble.n	8006946 <__kernel_rem_pio2+0x86>
 800691e:	9b08      	ldr	r3, [sp, #32]
 8006920:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8006bd8 <__kernel_rem_pio2+0x318>
 8006924:	aa22      	add	r2, sp, #136	; 0x88
 8006926:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800692a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	9b02      	ldr	r3, [sp, #8]
 8006934:	4598      	cmp	r8, r3
 8006936:	dc2f      	bgt.n	8006998 <__kernel_rem_pio2+0xd8>
 8006938:	ed8d 8b04 	vstr	d8, [sp, #16]
 800693c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8006940:	462f      	mov	r7, r5
 8006942:	2600      	movs	r6, #0
 8006944:	e01b      	b.n	800697e <__kernel_rem_pio2+0xbe>
 8006946:	42ef      	cmn	r7, r5
 8006948:	d407      	bmi.n	800695a <__kernel_rem_pio2+0x9a>
 800694a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800694e:	f7f9 fde9 	bl	8000524 <__aeabi_i2d>
 8006952:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006956:	3501      	adds	r5, #1
 8006958:	e7df      	b.n	800691a <__kernel_rem_pio2+0x5a>
 800695a:	ec51 0b18 	vmov	r0, r1, d8
 800695e:	e7f8      	b.n	8006952 <__kernel_rem_pio2+0x92>
 8006960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006964:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006968:	f7f9 fe46 	bl	80005f8 <__aeabi_dmul>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006974:	f7f9 fc8a 	bl	800028c <__adddf3>
 8006978:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800697c:	3601      	adds	r6, #1
 800697e:	9b06      	ldr	r3, [sp, #24]
 8006980:	429e      	cmp	r6, r3
 8006982:	f1a7 0708 	sub.w	r7, r7, #8
 8006986:	ddeb      	ble.n	8006960 <__kernel_rem_pio2+0xa0>
 8006988:	ed9d 7b04 	vldr	d7, [sp, #16]
 800698c:	f108 0801 	add.w	r8, r8, #1
 8006990:	ecab 7b02 	vstmia	fp!, {d7}
 8006994:	3508      	adds	r5, #8
 8006996:	e7cc      	b.n	8006932 <__kernel_rem_pio2+0x72>
 8006998:	9b02      	ldr	r3, [sp, #8]
 800699a:	aa0e      	add	r2, sp, #56	; 0x38
 800699c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80069a0:	930d      	str	r3, [sp, #52]	; 0x34
 80069a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80069a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80069a8:	9c02      	ldr	r4, [sp, #8]
 80069aa:	930c      	str	r3, [sp, #48]	; 0x30
 80069ac:	00e3      	lsls	r3, r4, #3
 80069ae:	930a      	str	r3, [sp, #40]	; 0x28
 80069b0:	ab9a      	add	r3, sp, #616	; 0x268
 80069b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80069ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80069be:	ab72      	add	r3, sp, #456	; 0x1c8
 80069c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80069c4:	46c3      	mov	fp, r8
 80069c6:	46a1      	mov	r9, r4
 80069c8:	f1b9 0f00 	cmp.w	r9, #0
 80069cc:	f1a5 0508 	sub.w	r5, r5, #8
 80069d0:	dc77      	bgt.n	8006ac2 <__kernel_rem_pio2+0x202>
 80069d2:	ec47 6b10 	vmov	d0, r6, r7
 80069d6:	4650      	mov	r0, sl
 80069d8:	f000 fc0a 	bl	80071f0 <scalbn>
 80069dc:	ec57 6b10 	vmov	r6, r7, d0
 80069e0:	2200      	movs	r2, #0
 80069e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80069e6:	ee10 0a10 	vmov	r0, s0
 80069ea:	4639      	mov	r1, r7
 80069ec:	f7f9 fe04 	bl	80005f8 <__aeabi_dmul>
 80069f0:	ec41 0b10 	vmov	d0, r0, r1
 80069f4:	f000 fb7c 	bl	80070f0 <floor>
 80069f8:	4b7c      	ldr	r3, [pc, #496]	; (8006bec <__kernel_rem_pio2+0x32c>)
 80069fa:	ec51 0b10 	vmov	r0, r1, d0
 80069fe:	2200      	movs	r2, #0
 8006a00:	f7f9 fdfa 	bl	80005f8 <__aeabi_dmul>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4630      	mov	r0, r6
 8006a0a:	4639      	mov	r1, r7
 8006a0c:	f7f9 fc3c 	bl	8000288 <__aeabi_dsub>
 8006a10:	460f      	mov	r7, r1
 8006a12:	4606      	mov	r6, r0
 8006a14:	f7fa f8a0 	bl	8000b58 <__aeabi_d2iz>
 8006a18:	9004      	str	r0, [sp, #16]
 8006a1a:	f7f9 fd83 	bl	8000524 <__aeabi_i2d>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4630      	mov	r0, r6
 8006a24:	4639      	mov	r1, r7
 8006a26:	f7f9 fc2f 	bl	8000288 <__aeabi_dsub>
 8006a2a:	f1ba 0f00 	cmp.w	sl, #0
 8006a2e:	4606      	mov	r6, r0
 8006a30:	460f      	mov	r7, r1
 8006a32:	dd6d      	ble.n	8006b10 <__kernel_rem_pio2+0x250>
 8006a34:	1e62      	subs	r2, r4, #1
 8006a36:	ab0e      	add	r3, sp, #56	; 0x38
 8006a38:	9d04      	ldr	r5, [sp, #16]
 8006a3a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006a3e:	f1ca 0118 	rsb	r1, sl, #24
 8006a42:	fa40 f301 	asr.w	r3, r0, r1
 8006a46:	441d      	add	r5, r3
 8006a48:	408b      	lsls	r3, r1
 8006a4a:	1ac0      	subs	r0, r0, r3
 8006a4c:	ab0e      	add	r3, sp, #56	; 0x38
 8006a4e:	9504      	str	r5, [sp, #16]
 8006a50:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006a54:	f1ca 0317 	rsb	r3, sl, #23
 8006a58:	fa40 fb03 	asr.w	fp, r0, r3
 8006a5c:	f1bb 0f00 	cmp.w	fp, #0
 8006a60:	dd65      	ble.n	8006b2e <__kernel_rem_pio2+0x26e>
 8006a62:	9b04      	ldr	r3, [sp, #16]
 8006a64:	2200      	movs	r2, #0
 8006a66:	3301      	adds	r3, #1
 8006a68:	9304      	str	r3, [sp, #16]
 8006a6a:	4615      	mov	r5, r2
 8006a6c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006a70:	4294      	cmp	r4, r2
 8006a72:	f300 809c 	bgt.w	8006bae <__kernel_rem_pio2+0x2ee>
 8006a76:	f1ba 0f00 	cmp.w	sl, #0
 8006a7a:	dd07      	ble.n	8006a8c <__kernel_rem_pio2+0x1cc>
 8006a7c:	f1ba 0f01 	cmp.w	sl, #1
 8006a80:	f000 80c0 	beq.w	8006c04 <__kernel_rem_pio2+0x344>
 8006a84:	f1ba 0f02 	cmp.w	sl, #2
 8006a88:	f000 80c6 	beq.w	8006c18 <__kernel_rem_pio2+0x358>
 8006a8c:	f1bb 0f02 	cmp.w	fp, #2
 8006a90:	d14d      	bne.n	8006b2e <__kernel_rem_pio2+0x26e>
 8006a92:	4632      	mov	r2, r6
 8006a94:	463b      	mov	r3, r7
 8006a96:	4956      	ldr	r1, [pc, #344]	; (8006bf0 <__kernel_rem_pio2+0x330>)
 8006a98:	2000      	movs	r0, #0
 8006a9a:	f7f9 fbf5 	bl	8000288 <__aeabi_dsub>
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	460f      	mov	r7, r1
 8006aa2:	2d00      	cmp	r5, #0
 8006aa4:	d043      	beq.n	8006b2e <__kernel_rem_pio2+0x26e>
 8006aa6:	4650      	mov	r0, sl
 8006aa8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006be0 <__kernel_rem_pio2+0x320>
 8006aac:	f000 fba0 	bl	80071f0 <scalbn>
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	ec53 2b10 	vmov	r2, r3, d0
 8006ab8:	f7f9 fbe6 	bl	8000288 <__aeabi_dsub>
 8006abc:	4606      	mov	r6, r0
 8006abe:	460f      	mov	r7, r1
 8006ac0:	e035      	b.n	8006b2e <__kernel_rem_pio2+0x26e>
 8006ac2:	4b4c      	ldr	r3, [pc, #304]	; (8006bf4 <__kernel_rem_pio2+0x334>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	4639      	mov	r1, r7
 8006aca:	f7f9 fd95 	bl	80005f8 <__aeabi_dmul>
 8006ace:	f7fa f843 	bl	8000b58 <__aeabi_d2iz>
 8006ad2:	f7f9 fd27 	bl	8000524 <__aeabi_i2d>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	ec43 2b18 	vmov	d8, r2, r3
 8006ade:	4b46      	ldr	r3, [pc, #280]	; (8006bf8 <__kernel_rem_pio2+0x338>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f7f9 fd89 	bl	80005f8 <__aeabi_dmul>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4630      	mov	r0, r6
 8006aec:	4639      	mov	r1, r7
 8006aee:	f7f9 fbcb 	bl	8000288 <__aeabi_dsub>
 8006af2:	f7fa f831 	bl	8000b58 <__aeabi_d2iz>
 8006af6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006afa:	f84b 0b04 	str.w	r0, [fp], #4
 8006afe:	ec51 0b18 	vmov	r0, r1, d8
 8006b02:	f7f9 fbc3 	bl	800028c <__adddf3>
 8006b06:	f109 39ff 	add.w	r9, r9, #4294967295
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	460f      	mov	r7, r1
 8006b0e:	e75b      	b.n	80069c8 <__kernel_rem_pio2+0x108>
 8006b10:	d106      	bne.n	8006b20 <__kernel_rem_pio2+0x260>
 8006b12:	1e63      	subs	r3, r4, #1
 8006b14:	aa0e      	add	r2, sp, #56	; 0x38
 8006b16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006b1a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8006b1e:	e79d      	b.n	8006a5c <__kernel_rem_pio2+0x19c>
 8006b20:	4b36      	ldr	r3, [pc, #216]	; (8006bfc <__kernel_rem_pio2+0x33c>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	f7f9 ffee 	bl	8000b04 <__aeabi_dcmpge>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d13d      	bne.n	8006ba8 <__kernel_rem_pio2+0x2e8>
 8006b2c:	4683      	mov	fp, r0
 8006b2e:	2200      	movs	r2, #0
 8006b30:	2300      	movs	r3, #0
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7f9 ffc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f000 80c0 	beq.w	8006cc0 <__kernel_rem_pio2+0x400>
 8006b40:	1e65      	subs	r5, r4, #1
 8006b42:	462b      	mov	r3, r5
 8006b44:	2200      	movs	r2, #0
 8006b46:	9902      	ldr	r1, [sp, #8]
 8006b48:	428b      	cmp	r3, r1
 8006b4a:	da6c      	bge.n	8006c26 <__kernel_rem_pio2+0x366>
 8006b4c:	2a00      	cmp	r2, #0
 8006b4e:	f000 8089 	beq.w	8006c64 <__kernel_rem_pio2+0x3a4>
 8006b52:	ab0e      	add	r3, sp, #56	; 0x38
 8006b54:	f1aa 0a18 	sub.w	sl, sl, #24
 8006b58:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 80ad 	beq.w	8006cbc <__kernel_rem_pio2+0x3fc>
 8006b62:	4650      	mov	r0, sl
 8006b64:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8006be0 <__kernel_rem_pio2+0x320>
 8006b68:	f000 fb42 	bl	80071f0 <scalbn>
 8006b6c:	ab9a      	add	r3, sp, #616	; 0x268
 8006b6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006b72:	ec57 6b10 	vmov	r6, r7, d0
 8006b76:	00ec      	lsls	r4, r5, #3
 8006b78:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8006b7c:	46aa      	mov	sl, r5
 8006b7e:	f1ba 0f00 	cmp.w	sl, #0
 8006b82:	f280 80d6 	bge.w	8006d32 <__kernel_rem_pio2+0x472>
 8006b86:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8006bd8 <__kernel_rem_pio2+0x318>
 8006b8a:	462e      	mov	r6, r5
 8006b8c:	2e00      	cmp	r6, #0
 8006b8e:	f2c0 8104 	blt.w	8006d9a <__kernel_rem_pio2+0x4da>
 8006b92:	ab72      	add	r3, sp, #456	; 0x1c8
 8006b94:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006b98:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006c00 <__kernel_rem_pio2+0x340>
 8006b9c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8006ba0:	f04f 0800 	mov.w	r8, #0
 8006ba4:	1baf      	subs	r7, r5, r6
 8006ba6:	e0ea      	b.n	8006d7e <__kernel_rem_pio2+0x4be>
 8006ba8:	f04f 0b02 	mov.w	fp, #2
 8006bac:	e759      	b.n	8006a62 <__kernel_rem_pio2+0x1a2>
 8006bae:	f8d8 3000 	ldr.w	r3, [r8]
 8006bb2:	b955      	cbnz	r5, 8006bca <__kernel_rem_pio2+0x30a>
 8006bb4:	b123      	cbz	r3, 8006bc0 <__kernel_rem_pio2+0x300>
 8006bb6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006bba:	f8c8 3000 	str.w	r3, [r8]
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	3201      	adds	r2, #1
 8006bc2:	f108 0804 	add.w	r8, r8, #4
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	e752      	b.n	8006a70 <__kernel_rem_pio2+0x1b0>
 8006bca:	1acb      	subs	r3, r1, r3
 8006bcc:	f8c8 3000 	str.w	r3, [r8]
 8006bd0:	462b      	mov	r3, r5
 8006bd2:	e7f5      	b.n	8006bc0 <__kernel_rem_pio2+0x300>
 8006bd4:	f3af 8000 	nop.w
	...
 8006be4:	3ff00000 	.word	0x3ff00000
 8006be8:	0800a188 	.word	0x0800a188
 8006bec:	40200000 	.word	0x40200000
 8006bf0:	3ff00000 	.word	0x3ff00000
 8006bf4:	3e700000 	.word	0x3e700000
 8006bf8:	41700000 	.word	0x41700000
 8006bfc:	3fe00000 	.word	0x3fe00000
 8006c00:	0800a148 	.word	0x0800a148
 8006c04:	1e62      	subs	r2, r4, #1
 8006c06:	ab0e      	add	r3, sp, #56	; 0x38
 8006c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006c10:	a90e      	add	r1, sp, #56	; 0x38
 8006c12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006c16:	e739      	b.n	8006a8c <__kernel_rem_pio2+0x1cc>
 8006c18:	1e62      	subs	r2, r4, #1
 8006c1a:	ab0e      	add	r3, sp, #56	; 0x38
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006c24:	e7f4      	b.n	8006c10 <__kernel_rem_pio2+0x350>
 8006c26:	a90e      	add	r1, sp, #56	; 0x38
 8006c28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	e789      	b.n	8006b46 <__kernel_rem_pio2+0x286>
 8006c32:	3301      	adds	r3, #1
 8006c34:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006c38:	2900      	cmp	r1, #0
 8006c3a:	d0fa      	beq.n	8006c32 <__kernel_rem_pio2+0x372>
 8006c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c3e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8006c42:	446a      	add	r2, sp
 8006c44:	3a98      	subs	r2, #152	; 0x98
 8006c46:	920a      	str	r2, [sp, #40]	; 0x28
 8006c48:	9a08      	ldr	r2, [sp, #32]
 8006c4a:	18e3      	adds	r3, r4, r3
 8006c4c:	18a5      	adds	r5, r4, r2
 8006c4e:	aa22      	add	r2, sp, #136	; 0x88
 8006c50:	f104 0801 	add.w	r8, r4, #1
 8006c54:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	9b04      	ldr	r3, [sp, #16]
 8006c5c:	4543      	cmp	r3, r8
 8006c5e:	da04      	bge.n	8006c6a <__kernel_rem_pio2+0x3aa>
 8006c60:	461c      	mov	r4, r3
 8006c62:	e6a3      	b.n	80069ac <__kernel_rem_pio2+0xec>
 8006c64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c66:	2301      	movs	r3, #1
 8006c68:	e7e4      	b.n	8006c34 <__kernel_rem_pio2+0x374>
 8006c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006c70:	f7f9 fc58 	bl	8000524 <__aeabi_i2d>
 8006c74:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c7a:	46ab      	mov	fp, r5
 8006c7c:	461c      	mov	r4, r3
 8006c7e:	f04f 0900 	mov.w	r9, #0
 8006c82:	2600      	movs	r6, #0
 8006c84:	2700      	movs	r7, #0
 8006c86:	9b06      	ldr	r3, [sp, #24]
 8006c88:	4599      	cmp	r9, r3
 8006c8a:	dd06      	ble.n	8006c9a <__kernel_rem_pio2+0x3da>
 8006c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c8e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8006c92:	f108 0801 	add.w	r8, r8, #1
 8006c96:	930a      	str	r3, [sp, #40]	; 0x28
 8006c98:	e7df      	b.n	8006c5a <__kernel_rem_pio2+0x39a>
 8006c9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006c9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8006ca2:	f7f9 fca9 	bl	80005f8 <__aeabi_dmul>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4630      	mov	r0, r6
 8006cac:	4639      	mov	r1, r7
 8006cae:	f7f9 faed 	bl	800028c <__adddf3>
 8006cb2:	f109 0901 	add.w	r9, r9, #1
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	460f      	mov	r7, r1
 8006cba:	e7e4      	b.n	8006c86 <__kernel_rem_pio2+0x3c6>
 8006cbc:	3d01      	subs	r5, #1
 8006cbe:	e748      	b.n	8006b52 <__kernel_rem_pio2+0x292>
 8006cc0:	ec47 6b10 	vmov	d0, r6, r7
 8006cc4:	f1ca 0000 	rsb	r0, sl, #0
 8006cc8:	f000 fa92 	bl	80071f0 <scalbn>
 8006ccc:	ec57 6b10 	vmov	r6, r7, d0
 8006cd0:	4ba0      	ldr	r3, [pc, #640]	; (8006f54 <__kernel_rem_pio2+0x694>)
 8006cd2:	ee10 0a10 	vmov	r0, s0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4639      	mov	r1, r7
 8006cda:	f7f9 ff13 	bl	8000b04 <__aeabi_dcmpge>
 8006cde:	b1f8      	cbz	r0, 8006d20 <__kernel_rem_pio2+0x460>
 8006ce0:	4b9d      	ldr	r3, [pc, #628]	; (8006f58 <__kernel_rem_pio2+0x698>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 fc86 	bl	80005f8 <__aeabi_dmul>
 8006cec:	f7f9 ff34 	bl	8000b58 <__aeabi_d2iz>
 8006cf0:	4680      	mov	r8, r0
 8006cf2:	f7f9 fc17 	bl	8000524 <__aeabi_i2d>
 8006cf6:	4b97      	ldr	r3, [pc, #604]	; (8006f54 <__kernel_rem_pio2+0x694>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f7f9 fc7d 	bl	80005f8 <__aeabi_dmul>
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4602      	mov	r2, r0
 8006d02:	4639      	mov	r1, r7
 8006d04:	4630      	mov	r0, r6
 8006d06:	f7f9 fabf 	bl	8000288 <__aeabi_dsub>
 8006d0a:	f7f9 ff25 	bl	8000b58 <__aeabi_d2iz>
 8006d0e:	1c65      	adds	r5, r4, #1
 8006d10:	ab0e      	add	r3, sp, #56	; 0x38
 8006d12:	f10a 0a18 	add.w	sl, sl, #24
 8006d16:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006d1a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006d1e:	e720      	b.n	8006b62 <__kernel_rem_pio2+0x2a2>
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	f7f9 ff18 	bl	8000b58 <__aeabi_d2iz>
 8006d28:	ab0e      	add	r3, sp, #56	; 0x38
 8006d2a:	4625      	mov	r5, r4
 8006d2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006d30:	e717      	b.n	8006b62 <__kernel_rem_pio2+0x2a2>
 8006d32:	ab0e      	add	r3, sp, #56	; 0x38
 8006d34:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006d38:	f7f9 fbf4 	bl	8000524 <__aeabi_i2d>
 8006d3c:	4632      	mov	r2, r6
 8006d3e:	463b      	mov	r3, r7
 8006d40:	f7f9 fc5a 	bl	80005f8 <__aeabi_dmul>
 8006d44:	4b84      	ldr	r3, [pc, #528]	; (8006f58 <__kernel_rem_pio2+0x698>)
 8006d46:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	4639      	mov	r1, r7
 8006d50:	f7f9 fc52 	bl	80005f8 <__aeabi_dmul>
 8006d54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d58:	4606      	mov	r6, r0
 8006d5a:	460f      	mov	r7, r1
 8006d5c:	e70f      	b.n	8006b7e <__kernel_rem_pio2+0x2be>
 8006d5e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8006d62:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8006d66:	f7f9 fc47 	bl	80005f8 <__aeabi_dmul>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d72:	f7f9 fa8b 	bl	800028c <__adddf3>
 8006d76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d7a:	f108 0801 	add.w	r8, r8, #1
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	4598      	cmp	r8, r3
 8006d82:	dc01      	bgt.n	8006d88 <__kernel_rem_pio2+0x4c8>
 8006d84:	45b8      	cmp	r8, r7
 8006d86:	ddea      	ble.n	8006d5e <__kernel_rem_pio2+0x49e>
 8006d88:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006d8c:	ab4a      	add	r3, sp, #296	; 0x128
 8006d8e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006d92:	ed87 7b00 	vstr	d7, [r7]
 8006d96:	3e01      	subs	r6, #1
 8006d98:	e6f8      	b.n	8006b8c <__kernel_rem_pio2+0x2cc>
 8006d9a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	dc0b      	bgt.n	8006db8 <__kernel_rem_pio2+0x4f8>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dc35      	bgt.n	8006e10 <__kernel_rem_pio2+0x550>
 8006da4:	d059      	beq.n	8006e5a <__kernel_rem_pio2+0x59a>
 8006da6:	9b04      	ldr	r3, [sp, #16]
 8006da8:	f003 0007 	and.w	r0, r3, #7
 8006dac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006db0:	ecbd 8b02 	vpop	{d8}
 8006db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d1f3      	bne.n	8006da6 <__kernel_rem_pio2+0x4e6>
 8006dbe:	ab4a      	add	r3, sp, #296	; 0x128
 8006dc0:	4423      	add	r3, r4
 8006dc2:	9306      	str	r3, [sp, #24]
 8006dc4:	461c      	mov	r4, r3
 8006dc6:	469a      	mov	sl, r3
 8006dc8:	9502      	str	r5, [sp, #8]
 8006dca:	9b02      	ldr	r3, [sp, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f1aa 0a08 	sub.w	sl, sl, #8
 8006dd2:	dc6b      	bgt.n	8006eac <__kernel_rem_pio2+0x5ec>
 8006dd4:	46aa      	mov	sl, r5
 8006dd6:	f1ba 0f01 	cmp.w	sl, #1
 8006dda:	f1a4 0408 	sub.w	r4, r4, #8
 8006dde:	f300 8085 	bgt.w	8006eec <__kernel_rem_pio2+0x62c>
 8006de2:	9c06      	ldr	r4, [sp, #24]
 8006de4:	2000      	movs	r0, #0
 8006de6:	3408      	adds	r4, #8
 8006de8:	2100      	movs	r1, #0
 8006dea:	2d01      	cmp	r5, #1
 8006dec:	f300 809d 	bgt.w	8006f2a <__kernel_rem_pio2+0x66a>
 8006df0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006df4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8006df8:	f1bb 0f00 	cmp.w	fp, #0
 8006dfc:	f040 809b 	bne.w	8006f36 <__kernel_rem_pio2+0x676>
 8006e00:	9b01      	ldr	r3, [sp, #4]
 8006e02:	e9c3 5600 	strd	r5, r6, [r3]
 8006e06:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006e0a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006e0e:	e7ca      	b.n	8006da6 <__kernel_rem_pio2+0x4e6>
 8006e10:	3408      	adds	r4, #8
 8006e12:	ab4a      	add	r3, sp, #296	; 0x128
 8006e14:	441c      	add	r4, r3
 8006e16:	462e      	mov	r6, r5
 8006e18:	2000      	movs	r0, #0
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	da36      	bge.n	8006e8e <__kernel_rem_pio2+0x5ce>
 8006e20:	f1bb 0f00 	cmp.w	fp, #0
 8006e24:	d039      	beq.n	8006e9a <__kernel_rem_pio2+0x5da>
 8006e26:	4602      	mov	r2, r0
 8006e28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e2c:	9c01      	ldr	r4, [sp, #4]
 8006e2e:	e9c4 2300 	strd	r2, r3, [r4]
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8006e3a:	f7f9 fa25 	bl	8000288 <__aeabi_dsub>
 8006e3e:	ae4c      	add	r6, sp, #304	; 0x130
 8006e40:	2401      	movs	r4, #1
 8006e42:	42a5      	cmp	r5, r4
 8006e44:	da2c      	bge.n	8006ea0 <__kernel_rem_pio2+0x5e0>
 8006e46:	f1bb 0f00 	cmp.w	fp, #0
 8006e4a:	d002      	beq.n	8006e52 <__kernel_rem_pio2+0x592>
 8006e4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e50:	4619      	mov	r1, r3
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e58:	e7a5      	b.n	8006da6 <__kernel_rem_pio2+0x4e6>
 8006e5a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8006e5e:	eb0d 0403 	add.w	r4, sp, r3
 8006e62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8006e66:	2000      	movs	r0, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	da09      	bge.n	8006e82 <__kernel_rem_pio2+0x5c2>
 8006e6e:	f1bb 0f00 	cmp.w	fp, #0
 8006e72:	d002      	beq.n	8006e7a <__kernel_rem_pio2+0x5ba>
 8006e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e78:	4619      	mov	r1, r3
 8006e7a:	9b01      	ldr	r3, [sp, #4]
 8006e7c:	e9c3 0100 	strd	r0, r1, [r3]
 8006e80:	e791      	b.n	8006da6 <__kernel_rem_pio2+0x4e6>
 8006e82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e86:	f7f9 fa01 	bl	800028c <__adddf3>
 8006e8a:	3d01      	subs	r5, #1
 8006e8c:	e7ed      	b.n	8006e6a <__kernel_rem_pio2+0x5aa>
 8006e8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e92:	f7f9 f9fb 	bl	800028c <__adddf3>
 8006e96:	3e01      	subs	r6, #1
 8006e98:	e7c0      	b.n	8006e1c <__kernel_rem_pio2+0x55c>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	e7c5      	b.n	8006e2c <__kernel_rem_pio2+0x56c>
 8006ea0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006ea4:	f7f9 f9f2 	bl	800028c <__adddf3>
 8006ea8:	3401      	adds	r4, #1
 8006eaa:	e7ca      	b.n	8006e42 <__kernel_rem_pio2+0x582>
 8006eac:	e9da 8900 	ldrd	r8, r9, [sl]
 8006eb0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006eb4:	9b02      	ldr	r3, [sp, #8]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	9302      	str	r3, [sp, #8]
 8006eba:	4632      	mov	r2, r6
 8006ebc:	463b      	mov	r3, r7
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	4649      	mov	r1, r9
 8006ec2:	f7f9 f9e3 	bl	800028c <__adddf3>
 8006ec6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	f7f9 f9d9 	bl	8000288 <__aeabi_dsub>
 8006ed6:	4632      	mov	r2, r6
 8006ed8:	463b      	mov	r3, r7
 8006eda:	f7f9 f9d7 	bl	800028c <__adddf3>
 8006ede:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006ee2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ee6:	ed8a 7b00 	vstr	d7, [sl]
 8006eea:	e76e      	b.n	8006dca <__kernel_rem_pio2+0x50a>
 8006eec:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006ef0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4632      	mov	r2, r6
 8006ef8:	463b      	mov	r3, r7
 8006efa:	4649      	mov	r1, r9
 8006efc:	f7f9 f9c6 	bl	800028c <__adddf3>
 8006f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	4640      	mov	r0, r8
 8006f0a:	4649      	mov	r1, r9
 8006f0c:	f7f9 f9bc 	bl	8000288 <__aeabi_dsub>
 8006f10:	4632      	mov	r2, r6
 8006f12:	463b      	mov	r3, r7
 8006f14:	f7f9 f9ba 	bl	800028c <__adddf3>
 8006f18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f20:	ed84 7b00 	vstr	d7, [r4]
 8006f24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f28:	e755      	b.n	8006dd6 <__kernel_rem_pio2+0x516>
 8006f2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006f2e:	f7f9 f9ad 	bl	800028c <__adddf3>
 8006f32:	3d01      	subs	r5, #1
 8006f34:	e759      	b.n	8006dea <__kernel_rem_pio2+0x52a>
 8006f36:	9b01      	ldr	r3, [sp, #4]
 8006f38:	9a01      	ldr	r2, [sp, #4]
 8006f3a:	601d      	str	r5, [r3, #0]
 8006f3c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8006f40:	605c      	str	r4, [r3, #4]
 8006f42:	609f      	str	r7, [r3, #8]
 8006f44:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8006f48:	60d3      	str	r3, [r2, #12]
 8006f4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f4e:	6110      	str	r0, [r2, #16]
 8006f50:	6153      	str	r3, [r2, #20]
 8006f52:	e728      	b.n	8006da6 <__kernel_rem_pio2+0x4e6>
 8006f54:	41700000 	.word	0x41700000
 8006f58:	3e700000 	.word	0x3e700000
 8006f5c:	00000000 	.word	0x00000000

08006f60 <__kernel_sin>:
 8006f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	ed2d 8b04 	vpush	{d8-d9}
 8006f68:	eeb0 8a41 	vmov.f32	s16, s2
 8006f6c:	eef0 8a61 	vmov.f32	s17, s3
 8006f70:	ec55 4b10 	vmov	r4, r5, d0
 8006f74:	b083      	sub	sp, #12
 8006f76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006f7e:	9001      	str	r0, [sp, #4]
 8006f80:	da06      	bge.n	8006f90 <__kernel_sin+0x30>
 8006f82:	ee10 0a10 	vmov	r0, s0
 8006f86:	4629      	mov	r1, r5
 8006f88:	f7f9 fde6 	bl	8000b58 <__aeabi_d2iz>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d051      	beq.n	8007034 <__kernel_sin+0xd4>
 8006f90:	4622      	mov	r2, r4
 8006f92:	462b      	mov	r3, r5
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 fb2e 	bl	80005f8 <__aeabi_dmul>
 8006f9c:	4682      	mov	sl, r0
 8006f9e:	468b      	mov	fp, r1
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 fb26 	bl	80005f8 <__aeabi_dmul>
 8006fac:	a341      	add	r3, pc, #260	; (adr r3, 80070b4 <__kernel_sin+0x154>)
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	4680      	mov	r8, r0
 8006fb4:	4689      	mov	r9, r1
 8006fb6:	4650      	mov	r0, sl
 8006fb8:	4659      	mov	r1, fp
 8006fba:	f7f9 fb1d 	bl	80005f8 <__aeabi_dmul>
 8006fbe:	a33f      	add	r3, pc, #252	; (adr r3, 80070bc <__kernel_sin+0x15c>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	f7f9 f960 	bl	8000288 <__aeabi_dsub>
 8006fc8:	4652      	mov	r2, sl
 8006fca:	465b      	mov	r3, fp
 8006fcc:	f7f9 fb14 	bl	80005f8 <__aeabi_dmul>
 8006fd0:	a33c      	add	r3, pc, #240	; (adr r3, 80070c4 <__kernel_sin+0x164>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7f9 f959 	bl	800028c <__adddf3>
 8006fda:	4652      	mov	r2, sl
 8006fdc:	465b      	mov	r3, fp
 8006fde:	f7f9 fb0b 	bl	80005f8 <__aeabi_dmul>
 8006fe2:	a33a      	add	r3, pc, #232	; (adr r3, 80070cc <__kernel_sin+0x16c>)
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f7f9 f94e 	bl	8000288 <__aeabi_dsub>
 8006fec:	4652      	mov	r2, sl
 8006fee:	465b      	mov	r3, fp
 8006ff0:	f7f9 fb02 	bl	80005f8 <__aeabi_dmul>
 8006ff4:	a337      	add	r3, pc, #220	; (adr r3, 80070d4 <__kernel_sin+0x174>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f7f9 f947 	bl	800028c <__adddf3>
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	4606      	mov	r6, r0
 8007002:	460f      	mov	r7, r1
 8007004:	b9eb      	cbnz	r3, 8007042 <__kernel_sin+0xe2>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4650      	mov	r0, sl
 800700c:	4659      	mov	r1, fp
 800700e:	f7f9 faf3 	bl	80005f8 <__aeabi_dmul>
 8007012:	a325      	add	r3, pc, #148	; (adr r3, 80070a8 <__kernel_sin+0x148>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 f936 	bl	8000288 <__aeabi_dsub>
 800701c:	4642      	mov	r2, r8
 800701e:	464b      	mov	r3, r9
 8007020:	f7f9 faea 	bl	80005f8 <__aeabi_dmul>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4620      	mov	r0, r4
 800702a:	4629      	mov	r1, r5
 800702c:	f7f9 f92e 	bl	800028c <__adddf3>
 8007030:	4604      	mov	r4, r0
 8007032:	460d      	mov	r5, r1
 8007034:	ec45 4b10 	vmov	d0, r4, r5
 8007038:	b003      	add	sp, #12
 800703a:	ecbd 8b04 	vpop	{d8-d9}
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <__kernel_sin+0x150>)
 8007044:	ec51 0b18 	vmov	r0, r1, d8
 8007048:	2200      	movs	r2, #0
 800704a:	f7f9 fad5 	bl	80005f8 <__aeabi_dmul>
 800704e:	4632      	mov	r2, r6
 8007050:	ec41 0b19 	vmov	d9, r0, r1
 8007054:	463b      	mov	r3, r7
 8007056:	4640      	mov	r0, r8
 8007058:	4649      	mov	r1, r9
 800705a:	f7f9 facd 	bl	80005f8 <__aeabi_dmul>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	ec51 0b19 	vmov	r0, r1, d9
 8007066:	f7f9 f90f 	bl	8000288 <__aeabi_dsub>
 800706a:	4652      	mov	r2, sl
 800706c:	465b      	mov	r3, fp
 800706e:	f7f9 fac3 	bl	80005f8 <__aeabi_dmul>
 8007072:	ec53 2b18 	vmov	r2, r3, d8
 8007076:	f7f9 f907 	bl	8000288 <__aeabi_dsub>
 800707a:	a30b      	add	r3, pc, #44	; (adr r3, 80070a8 <__kernel_sin+0x148>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	4606      	mov	r6, r0
 8007082:	460f      	mov	r7, r1
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 fab6 	bl	80005f8 <__aeabi_dmul>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4630      	mov	r0, r6
 8007092:	4639      	mov	r1, r7
 8007094:	f7f9 f8fa 	bl	800028c <__adddf3>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4620      	mov	r0, r4
 800709e:	4629      	mov	r1, r5
 80070a0:	f7f9 f8f2 	bl	8000288 <__aeabi_dsub>
 80070a4:	e7c4      	b.n	8007030 <__kernel_sin+0xd0>
 80070a6:	bf00      	nop
 80070a8:	55555549 	.word	0x55555549
 80070ac:	3fc55555 	.word	0x3fc55555
 80070b0:	3fe00000 	.word	0x3fe00000
 80070b4:	5acfd57c 	.word	0x5acfd57c
 80070b8:	3de5d93a 	.word	0x3de5d93a
 80070bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80070c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80070c4:	57b1fe7d 	.word	0x57b1fe7d
 80070c8:	3ec71de3 	.word	0x3ec71de3
 80070cc:	19c161d5 	.word	0x19c161d5
 80070d0:	3f2a01a0 	.word	0x3f2a01a0
 80070d4:	1110f8a6 	.word	0x1110f8a6
 80070d8:	3f811111 	.word	0x3f811111

080070dc <fabs>:
 80070dc:	ec51 0b10 	vmov	r0, r1, d0
 80070e0:	ee10 2a10 	vmov	r2, s0
 80070e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80070e8:	ec43 2b10 	vmov	d0, r2, r3
 80070ec:	4770      	bx	lr
	...

080070f0 <floor>:
 80070f0:	ec51 0b10 	vmov	r0, r1, d0
 80070f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80070fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007100:	2e13      	cmp	r6, #19
 8007102:	ee10 5a10 	vmov	r5, s0
 8007106:	ee10 8a10 	vmov	r8, s0
 800710a:	460c      	mov	r4, r1
 800710c:	dc32      	bgt.n	8007174 <floor+0x84>
 800710e:	2e00      	cmp	r6, #0
 8007110:	da14      	bge.n	800713c <floor+0x4c>
 8007112:	a333      	add	r3, pc, #204	; (adr r3, 80071e0 <floor+0xf0>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 f8b8 	bl	800028c <__adddf3>
 800711c:	2200      	movs	r2, #0
 800711e:	2300      	movs	r3, #0
 8007120:	f7f9 fcfa 	bl	8000b18 <__aeabi_dcmpgt>
 8007124:	b138      	cbz	r0, 8007136 <floor+0x46>
 8007126:	2c00      	cmp	r4, #0
 8007128:	da57      	bge.n	80071da <floor+0xea>
 800712a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800712e:	431d      	orrs	r5, r3
 8007130:	d001      	beq.n	8007136 <floor+0x46>
 8007132:	4c2d      	ldr	r4, [pc, #180]	; (80071e8 <floor+0xf8>)
 8007134:	2500      	movs	r5, #0
 8007136:	4621      	mov	r1, r4
 8007138:	4628      	mov	r0, r5
 800713a:	e025      	b.n	8007188 <floor+0x98>
 800713c:	4f2b      	ldr	r7, [pc, #172]	; (80071ec <floor+0xfc>)
 800713e:	4137      	asrs	r7, r6
 8007140:	ea01 0307 	and.w	r3, r1, r7
 8007144:	4303      	orrs	r3, r0
 8007146:	d01f      	beq.n	8007188 <floor+0x98>
 8007148:	a325      	add	r3, pc, #148	; (adr r3, 80071e0 <floor+0xf0>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 f89d 	bl	800028c <__adddf3>
 8007152:	2200      	movs	r2, #0
 8007154:	2300      	movs	r3, #0
 8007156:	f7f9 fcdf 	bl	8000b18 <__aeabi_dcmpgt>
 800715a:	2800      	cmp	r0, #0
 800715c:	d0eb      	beq.n	8007136 <floor+0x46>
 800715e:	2c00      	cmp	r4, #0
 8007160:	bfbe      	ittt	lt
 8007162:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007166:	fa43 f606 	asrlt.w	r6, r3, r6
 800716a:	19a4      	addlt	r4, r4, r6
 800716c:	ea24 0407 	bic.w	r4, r4, r7
 8007170:	2500      	movs	r5, #0
 8007172:	e7e0      	b.n	8007136 <floor+0x46>
 8007174:	2e33      	cmp	r6, #51	; 0x33
 8007176:	dd0b      	ble.n	8007190 <floor+0xa0>
 8007178:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800717c:	d104      	bne.n	8007188 <floor+0x98>
 800717e:	ee10 2a10 	vmov	r2, s0
 8007182:	460b      	mov	r3, r1
 8007184:	f7f9 f882 	bl	800028c <__adddf3>
 8007188:	ec41 0b10 	vmov	d0, r0, r1
 800718c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007190:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007194:	f04f 33ff 	mov.w	r3, #4294967295
 8007198:	fa23 f707 	lsr.w	r7, r3, r7
 800719c:	4207      	tst	r7, r0
 800719e:	d0f3      	beq.n	8007188 <floor+0x98>
 80071a0:	a30f      	add	r3, pc, #60	; (adr r3, 80071e0 <floor+0xf0>)
 80071a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a6:	f7f9 f871 	bl	800028c <__adddf3>
 80071aa:	2200      	movs	r2, #0
 80071ac:	2300      	movs	r3, #0
 80071ae:	f7f9 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d0bf      	beq.n	8007136 <floor+0x46>
 80071b6:	2c00      	cmp	r4, #0
 80071b8:	da02      	bge.n	80071c0 <floor+0xd0>
 80071ba:	2e14      	cmp	r6, #20
 80071bc:	d103      	bne.n	80071c6 <floor+0xd6>
 80071be:	3401      	adds	r4, #1
 80071c0:	ea25 0507 	bic.w	r5, r5, r7
 80071c4:	e7b7      	b.n	8007136 <floor+0x46>
 80071c6:	2301      	movs	r3, #1
 80071c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80071cc:	fa03 f606 	lsl.w	r6, r3, r6
 80071d0:	4435      	add	r5, r6
 80071d2:	4545      	cmp	r5, r8
 80071d4:	bf38      	it	cc
 80071d6:	18e4      	addcc	r4, r4, r3
 80071d8:	e7f2      	b.n	80071c0 <floor+0xd0>
 80071da:	2500      	movs	r5, #0
 80071dc:	462c      	mov	r4, r5
 80071de:	e7aa      	b.n	8007136 <floor+0x46>
 80071e0:	8800759c 	.word	0x8800759c
 80071e4:	7e37e43c 	.word	0x7e37e43c
 80071e8:	bff00000 	.word	0xbff00000
 80071ec:	000fffff 	.word	0x000fffff

080071f0 <scalbn>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	ec55 4b10 	vmov	r4, r5, d0
 80071f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80071fa:	4606      	mov	r6, r0
 80071fc:	462b      	mov	r3, r5
 80071fe:	b99a      	cbnz	r2, 8007228 <scalbn+0x38>
 8007200:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007204:	4323      	orrs	r3, r4
 8007206:	d036      	beq.n	8007276 <scalbn+0x86>
 8007208:	4b39      	ldr	r3, [pc, #228]	; (80072f0 <scalbn+0x100>)
 800720a:	4629      	mov	r1, r5
 800720c:	ee10 0a10 	vmov	r0, s0
 8007210:	2200      	movs	r2, #0
 8007212:	f7f9 f9f1 	bl	80005f8 <__aeabi_dmul>
 8007216:	4b37      	ldr	r3, [pc, #220]	; (80072f4 <scalbn+0x104>)
 8007218:	429e      	cmp	r6, r3
 800721a:	4604      	mov	r4, r0
 800721c:	460d      	mov	r5, r1
 800721e:	da10      	bge.n	8007242 <scalbn+0x52>
 8007220:	a32b      	add	r3, pc, #172	; (adr r3, 80072d0 <scalbn+0xe0>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	e03a      	b.n	800729e <scalbn+0xae>
 8007228:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800722c:	428a      	cmp	r2, r1
 800722e:	d10c      	bne.n	800724a <scalbn+0x5a>
 8007230:	ee10 2a10 	vmov	r2, s0
 8007234:	4620      	mov	r0, r4
 8007236:	4629      	mov	r1, r5
 8007238:	f7f9 f828 	bl	800028c <__adddf3>
 800723c:	4604      	mov	r4, r0
 800723e:	460d      	mov	r5, r1
 8007240:	e019      	b.n	8007276 <scalbn+0x86>
 8007242:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007246:	460b      	mov	r3, r1
 8007248:	3a36      	subs	r2, #54	; 0x36
 800724a:	4432      	add	r2, r6
 800724c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007250:	428a      	cmp	r2, r1
 8007252:	dd08      	ble.n	8007266 <scalbn+0x76>
 8007254:	2d00      	cmp	r5, #0
 8007256:	a120      	add	r1, pc, #128	; (adr r1, 80072d8 <scalbn+0xe8>)
 8007258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800725c:	da1c      	bge.n	8007298 <scalbn+0xa8>
 800725e:	a120      	add	r1, pc, #128	; (adr r1, 80072e0 <scalbn+0xf0>)
 8007260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007264:	e018      	b.n	8007298 <scalbn+0xa8>
 8007266:	2a00      	cmp	r2, #0
 8007268:	dd08      	ble.n	800727c <scalbn+0x8c>
 800726a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800726e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007272:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007276:	ec45 4b10 	vmov	d0, r4, r5
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007280:	da19      	bge.n	80072b6 <scalbn+0xc6>
 8007282:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007286:	429e      	cmp	r6, r3
 8007288:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800728c:	dd0a      	ble.n	80072a4 <scalbn+0xb4>
 800728e:	a112      	add	r1, pc, #72	; (adr r1, 80072d8 <scalbn+0xe8>)
 8007290:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e2      	bne.n	800725e <scalbn+0x6e>
 8007298:	a30f      	add	r3, pc, #60	; (adr r3, 80072d8 <scalbn+0xe8>)
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f7f9 f9ab 	bl	80005f8 <__aeabi_dmul>
 80072a2:	e7cb      	b.n	800723c <scalbn+0x4c>
 80072a4:	a10a      	add	r1, pc, #40	; (adr r1, 80072d0 <scalbn+0xe0>)
 80072a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d0b8      	beq.n	8007220 <scalbn+0x30>
 80072ae:	a10e      	add	r1, pc, #56	; (adr r1, 80072e8 <scalbn+0xf8>)
 80072b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072b4:	e7b4      	b.n	8007220 <scalbn+0x30>
 80072b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80072ba:	3236      	adds	r2, #54	; 0x36
 80072bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80072c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80072c4:	4620      	mov	r0, r4
 80072c6:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <scalbn+0x108>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	e7e8      	b.n	800729e <scalbn+0xae>
 80072cc:	f3af 8000 	nop.w
 80072d0:	c2f8f359 	.word	0xc2f8f359
 80072d4:	01a56e1f 	.word	0x01a56e1f
 80072d8:	8800759c 	.word	0x8800759c
 80072dc:	7e37e43c 	.word	0x7e37e43c
 80072e0:	8800759c 	.word	0x8800759c
 80072e4:	fe37e43c 	.word	0xfe37e43c
 80072e8:	c2f8f359 	.word	0xc2f8f359
 80072ec:	81a56e1f 	.word	0x81a56e1f
 80072f0:	43500000 	.word	0x43500000
 80072f4:	ffff3cb0 	.word	0xffff3cb0
 80072f8:	3c900000 	.word	0x3c900000

080072fc <__errno>:
 80072fc:	4b01      	ldr	r3, [pc, #4]	; (8007304 <__errno+0x8>)
 80072fe:	6818      	ldr	r0, [r3, #0]
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	2000000c 	.word	0x2000000c

08007308 <__libc_init_array>:
 8007308:	b570      	push	{r4, r5, r6, lr}
 800730a:	4d0d      	ldr	r5, [pc, #52]	; (8007340 <__libc_init_array+0x38>)
 800730c:	4c0d      	ldr	r4, [pc, #52]	; (8007344 <__libc_init_array+0x3c>)
 800730e:	1b64      	subs	r4, r4, r5
 8007310:	10a4      	asrs	r4, r4, #2
 8007312:	2600      	movs	r6, #0
 8007314:	42a6      	cmp	r6, r4
 8007316:	d109      	bne.n	800732c <__libc_init_array+0x24>
 8007318:	4d0b      	ldr	r5, [pc, #44]	; (8007348 <__libc_init_array+0x40>)
 800731a:	4c0c      	ldr	r4, [pc, #48]	; (800734c <__libc_init_array+0x44>)
 800731c:	f002 fdc2 	bl	8009ea4 <_init>
 8007320:	1b64      	subs	r4, r4, r5
 8007322:	10a4      	asrs	r4, r4, #2
 8007324:	2600      	movs	r6, #0
 8007326:	42a6      	cmp	r6, r4
 8007328:	d105      	bne.n	8007336 <__libc_init_array+0x2e>
 800732a:	bd70      	pop	{r4, r5, r6, pc}
 800732c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007330:	4798      	blx	r3
 8007332:	3601      	adds	r6, #1
 8007334:	e7ee      	b.n	8007314 <__libc_init_array+0xc>
 8007336:	f855 3b04 	ldr.w	r3, [r5], #4
 800733a:	4798      	blx	r3
 800733c:	3601      	adds	r6, #1
 800733e:	e7f2      	b.n	8007326 <__libc_init_array+0x1e>
 8007340:	0800a574 	.word	0x0800a574
 8007344:	0800a574 	.word	0x0800a574
 8007348:	0800a574 	.word	0x0800a574
 800734c:	0800a578 	.word	0x0800a578

08007350 <memset>:
 8007350:	4402      	add	r2, r0
 8007352:	4603      	mov	r3, r0
 8007354:	4293      	cmp	r3, r2
 8007356:	d100      	bne.n	800735a <memset+0xa>
 8007358:	4770      	bx	lr
 800735a:	f803 1b01 	strb.w	r1, [r3], #1
 800735e:	e7f9      	b.n	8007354 <memset+0x4>

08007360 <__cvt>:
 8007360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007364:	ec55 4b10 	vmov	r4, r5, d0
 8007368:	2d00      	cmp	r5, #0
 800736a:	460e      	mov	r6, r1
 800736c:	4619      	mov	r1, r3
 800736e:	462b      	mov	r3, r5
 8007370:	bfbb      	ittet	lt
 8007372:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007376:	461d      	movlt	r5, r3
 8007378:	2300      	movge	r3, #0
 800737a:	232d      	movlt	r3, #45	; 0x2d
 800737c:	700b      	strb	r3, [r1, #0]
 800737e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007380:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007384:	4691      	mov	r9, r2
 8007386:	f023 0820 	bic.w	r8, r3, #32
 800738a:	bfbc      	itt	lt
 800738c:	4622      	movlt	r2, r4
 800738e:	4614      	movlt	r4, r2
 8007390:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007394:	d005      	beq.n	80073a2 <__cvt+0x42>
 8007396:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800739a:	d100      	bne.n	800739e <__cvt+0x3e>
 800739c:	3601      	adds	r6, #1
 800739e:	2102      	movs	r1, #2
 80073a0:	e000      	b.n	80073a4 <__cvt+0x44>
 80073a2:	2103      	movs	r1, #3
 80073a4:	ab03      	add	r3, sp, #12
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	ab02      	add	r3, sp, #8
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	ec45 4b10 	vmov	d0, r4, r5
 80073b0:	4653      	mov	r3, sl
 80073b2:	4632      	mov	r2, r6
 80073b4:	f000 fe18 	bl	8007fe8 <_dtoa_r>
 80073b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073bc:	4607      	mov	r7, r0
 80073be:	d102      	bne.n	80073c6 <__cvt+0x66>
 80073c0:	f019 0f01 	tst.w	r9, #1
 80073c4:	d022      	beq.n	800740c <__cvt+0xac>
 80073c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073ca:	eb07 0906 	add.w	r9, r7, r6
 80073ce:	d110      	bne.n	80073f2 <__cvt+0x92>
 80073d0:	783b      	ldrb	r3, [r7, #0]
 80073d2:	2b30      	cmp	r3, #48	; 0x30
 80073d4:	d10a      	bne.n	80073ec <__cvt+0x8c>
 80073d6:	2200      	movs	r2, #0
 80073d8:	2300      	movs	r3, #0
 80073da:	4620      	mov	r0, r4
 80073dc:	4629      	mov	r1, r5
 80073de:	f7f9 fb73 	bl	8000ac8 <__aeabi_dcmpeq>
 80073e2:	b918      	cbnz	r0, 80073ec <__cvt+0x8c>
 80073e4:	f1c6 0601 	rsb	r6, r6, #1
 80073e8:	f8ca 6000 	str.w	r6, [sl]
 80073ec:	f8da 3000 	ldr.w	r3, [sl]
 80073f0:	4499      	add	r9, r3
 80073f2:	2200      	movs	r2, #0
 80073f4:	2300      	movs	r3, #0
 80073f6:	4620      	mov	r0, r4
 80073f8:	4629      	mov	r1, r5
 80073fa:	f7f9 fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 80073fe:	b108      	cbz	r0, 8007404 <__cvt+0xa4>
 8007400:	f8cd 900c 	str.w	r9, [sp, #12]
 8007404:	2230      	movs	r2, #48	; 0x30
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	454b      	cmp	r3, r9
 800740a:	d307      	bcc.n	800741c <__cvt+0xbc>
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007410:	1bdb      	subs	r3, r3, r7
 8007412:	4638      	mov	r0, r7
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	b004      	add	sp, #16
 8007418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741c:	1c59      	adds	r1, r3, #1
 800741e:	9103      	str	r1, [sp, #12]
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e7f0      	b.n	8007406 <__cvt+0xa6>

08007424 <__exponent>:
 8007424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007426:	4603      	mov	r3, r0
 8007428:	2900      	cmp	r1, #0
 800742a:	bfb8      	it	lt
 800742c:	4249      	neglt	r1, r1
 800742e:	f803 2b02 	strb.w	r2, [r3], #2
 8007432:	bfb4      	ite	lt
 8007434:	222d      	movlt	r2, #45	; 0x2d
 8007436:	222b      	movge	r2, #43	; 0x2b
 8007438:	2909      	cmp	r1, #9
 800743a:	7042      	strb	r2, [r0, #1]
 800743c:	dd2a      	ble.n	8007494 <__exponent+0x70>
 800743e:	f10d 0407 	add.w	r4, sp, #7
 8007442:	46a4      	mov	ip, r4
 8007444:	270a      	movs	r7, #10
 8007446:	46a6      	mov	lr, r4
 8007448:	460a      	mov	r2, r1
 800744a:	fb91 f6f7 	sdiv	r6, r1, r7
 800744e:	fb07 1516 	mls	r5, r7, r6, r1
 8007452:	3530      	adds	r5, #48	; 0x30
 8007454:	2a63      	cmp	r2, #99	; 0x63
 8007456:	f104 34ff 	add.w	r4, r4, #4294967295
 800745a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800745e:	4631      	mov	r1, r6
 8007460:	dcf1      	bgt.n	8007446 <__exponent+0x22>
 8007462:	3130      	adds	r1, #48	; 0x30
 8007464:	f1ae 0502 	sub.w	r5, lr, #2
 8007468:	f804 1c01 	strb.w	r1, [r4, #-1]
 800746c:	1c44      	adds	r4, r0, #1
 800746e:	4629      	mov	r1, r5
 8007470:	4561      	cmp	r1, ip
 8007472:	d30a      	bcc.n	800748a <__exponent+0x66>
 8007474:	f10d 0209 	add.w	r2, sp, #9
 8007478:	eba2 020e 	sub.w	r2, r2, lr
 800747c:	4565      	cmp	r5, ip
 800747e:	bf88      	it	hi
 8007480:	2200      	movhi	r2, #0
 8007482:	4413      	add	r3, r2
 8007484:	1a18      	subs	r0, r3, r0
 8007486:	b003      	add	sp, #12
 8007488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800748e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007492:	e7ed      	b.n	8007470 <__exponent+0x4c>
 8007494:	2330      	movs	r3, #48	; 0x30
 8007496:	3130      	adds	r1, #48	; 0x30
 8007498:	7083      	strb	r3, [r0, #2]
 800749a:	70c1      	strb	r1, [r0, #3]
 800749c:	1d03      	adds	r3, r0, #4
 800749e:	e7f1      	b.n	8007484 <__exponent+0x60>

080074a0 <_printf_float>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	ed2d 8b02 	vpush	{d8}
 80074a8:	b08d      	sub	sp, #52	; 0x34
 80074aa:	460c      	mov	r4, r1
 80074ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80074b0:	4616      	mov	r6, r2
 80074b2:	461f      	mov	r7, r3
 80074b4:	4605      	mov	r5, r0
 80074b6:	f001 fd3d 	bl	8008f34 <_localeconv_r>
 80074ba:	f8d0 a000 	ldr.w	sl, [r0]
 80074be:	4650      	mov	r0, sl
 80074c0:	f7f8 fe86 	bl	80001d0 <strlen>
 80074c4:	2300      	movs	r3, #0
 80074c6:	930a      	str	r3, [sp, #40]	; 0x28
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	f8d8 3000 	ldr.w	r3, [r8]
 80074d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80074d4:	3307      	adds	r3, #7
 80074d6:	f023 0307 	bic.w	r3, r3, #7
 80074da:	f103 0208 	add.w	r2, r3, #8
 80074de:	f8c8 2000 	str.w	r2, [r8]
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074f2:	9307      	str	r3, [sp, #28]
 80074f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80074f8:	ee08 0a10 	vmov	s16, r0
 80074fc:	4b9f      	ldr	r3, [pc, #636]	; (800777c <_printf_float+0x2dc>)
 80074fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007502:	f04f 32ff 	mov.w	r2, #4294967295
 8007506:	f7f9 fb11 	bl	8000b2c <__aeabi_dcmpun>
 800750a:	bb88      	cbnz	r0, 8007570 <_printf_float+0xd0>
 800750c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007510:	4b9a      	ldr	r3, [pc, #616]	; (800777c <_printf_float+0x2dc>)
 8007512:	f04f 32ff 	mov.w	r2, #4294967295
 8007516:	f7f9 faeb 	bl	8000af0 <__aeabi_dcmple>
 800751a:	bb48      	cbnz	r0, 8007570 <_printf_float+0xd0>
 800751c:	2200      	movs	r2, #0
 800751e:	2300      	movs	r3, #0
 8007520:	4640      	mov	r0, r8
 8007522:	4649      	mov	r1, r9
 8007524:	f7f9 fada 	bl	8000adc <__aeabi_dcmplt>
 8007528:	b110      	cbz	r0, 8007530 <_printf_float+0x90>
 800752a:	232d      	movs	r3, #45	; 0x2d
 800752c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007530:	4b93      	ldr	r3, [pc, #588]	; (8007780 <_printf_float+0x2e0>)
 8007532:	4894      	ldr	r0, [pc, #592]	; (8007784 <_printf_float+0x2e4>)
 8007534:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007538:	bf94      	ite	ls
 800753a:	4698      	movls	r8, r3
 800753c:	4680      	movhi	r8, r0
 800753e:	2303      	movs	r3, #3
 8007540:	6123      	str	r3, [r4, #16]
 8007542:	9b05      	ldr	r3, [sp, #20]
 8007544:	f023 0204 	bic.w	r2, r3, #4
 8007548:	6022      	str	r2, [r4, #0]
 800754a:	f04f 0900 	mov.w	r9, #0
 800754e:	9700      	str	r7, [sp, #0]
 8007550:	4633      	mov	r3, r6
 8007552:	aa0b      	add	r2, sp, #44	; 0x2c
 8007554:	4621      	mov	r1, r4
 8007556:	4628      	mov	r0, r5
 8007558:	f000 f9d8 	bl	800790c <_printf_common>
 800755c:	3001      	adds	r0, #1
 800755e:	f040 8090 	bne.w	8007682 <_printf_float+0x1e2>
 8007562:	f04f 30ff 	mov.w	r0, #4294967295
 8007566:	b00d      	add	sp, #52	; 0x34
 8007568:	ecbd 8b02 	vpop	{d8}
 800756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007570:	4642      	mov	r2, r8
 8007572:	464b      	mov	r3, r9
 8007574:	4640      	mov	r0, r8
 8007576:	4649      	mov	r1, r9
 8007578:	f7f9 fad8 	bl	8000b2c <__aeabi_dcmpun>
 800757c:	b140      	cbz	r0, 8007590 <_printf_float+0xf0>
 800757e:	464b      	mov	r3, r9
 8007580:	2b00      	cmp	r3, #0
 8007582:	bfbc      	itt	lt
 8007584:	232d      	movlt	r3, #45	; 0x2d
 8007586:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800758a:	487f      	ldr	r0, [pc, #508]	; (8007788 <_printf_float+0x2e8>)
 800758c:	4b7f      	ldr	r3, [pc, #508]	; (800778c <_printf_float+0x2ec>)
 800758e:	e7d1      	b.n	8007534 <_printf_float+0x94>
 8007590:	6863      	ldr	r3, [r4, #4]
 8007592:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007596:	9206      	str	r2, [sp, #24]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	d13f      	bne.n	800761c <_printf_float+0x17c>
 800759c:	2306      	movs	r3, #6
 800759e:	6063      	str	r3, [r4, #4]
 80075a0:	9b05      	ldr	r3, [sp, #20]
 80075a2:	6861      	ldr	r1, [r4, #4]
 80075a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075a8:	2300      	movs	r3, #0
 80075aa:	9303      	str	r3, [sp, #12]
 80075ac:	ab0a      	add	r3, sp, #40	; 0x28
 80075ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80075b2:	ab09      	add	r3, sp, #36	; 0x24
 80075b4:	ec49 8b10 	vmov	d0, r8, r9
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	6022      	str	r2, [r4, #0]
 80075bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075c0:	4628      	mov	r0, r5
 80075c2:	f7ff fecd 	bl	8007360 <__cvt>
 80075c6:	9b06      	ldr	r3, [sp, #24]
 80075c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ca:	2b47      	cmp	r3, #71	; 0x47
 80075cc:	4680      	mov	r8, r0
 80075ce:	d108      	bne.n	80075e2 <_printf_float+0x142>
 80075d0:	1cc8      	adds	r0, r1, #3
 80075d2:	db02      	blt.n	80075da <_printf_float+0x13a>
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	4299      	cmp	r1, r3
 80075d8:	dd41      	ble.n	800765e <_printf_float+0x1be>
 80075da:	f1ab 0b02 	sub.w	fp, fp, #2
 80075de:	fa5f fb8b 	uxtb.w	fp, fp
 80075e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075e6:	d820      	bhi.n	800762a <_printf_float+0x18a>
 80075e8:	3901      	subs	r1, #1
 80075ea:	465a      	mov	r2, fp
 80075ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075f0:	9109      	str	r1, [sp, #36]	; 0x24
 80075f2:	f7ff ff17 	bl	8007424 <__exponent>
 80075f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075f8:	1813      	adds	r3, r2, r0
 80075fa:	2a01      	cmp	r2, #1
 80075fc:	4681      	mov	r9, r0
 80075fe:	6123      	str	r3, [r4, #16]
 8007600:	dc02      	bgt.n	8007608 <_printf_float+0x168>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	07d2      	lsls	r2, r2, #31
 8007606:	d501      	bpl.n	800760c <_printf_float+0x16c>
 8007608:	3301      	adds	r3, #1
 800760a:	6123      	str	r3, [r4, #16]
 800760c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007610:	2b00      	cmp	r3, #0
 8007612:	d09c      	beq.n	800754e <_printf_float+0xae>
 8007614:	232d      	movs	r3, #45	; 0x2d
 8007616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800761a:	e798      	b.n	800754e <_printf_float+0xae>
 800761c:	9a06      	ldr	r2, [sp, #24]
 800761e:	2a47      	cmp	r2, #71	; 0x47
 8007620:	d1be      	bne.n	80075a0 <_printf_float+0x100>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1bc      	bne.n	80075a0 <_printf_float+0x100>
 8007626:	2301      	movs	r3, #1
 8007628:	e7b9      	b.n	800759e <_printf_float+0xfe>
 800762a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800762e:	d118      	bne.n	8007662 <_printf_float+0x1c2>
 8007630:	2900      	cmp	r1, #0
 8007632:	6863      	ldr	r3, [r4, #4]
 8007634:	dd0b      	ble.n	800764e <_printf_float+0x1ae>
 8007636:	6121      	str	r1, [r4, #16]
 8007638:	b913      	cbnz	r3, 8007640 <_printf_float+0x1a0>
 800763a:	6822      	ldr	r2, [r4, #0]
 800763c:	07d0      	lsls	r0, r2, #31
 800763e:	d502      	bpl.n	8007646 <_printf_float+0x1a6>
 8007640:	3301      	adds	r3, #1
 8007642:	440b      	add	r3, r1
 8007644:	6123      	str	r3, [r4, #16]
 8007646:	65a1      	str	r1, [r4, #88]	; 0x58
 8007648:	f04f 0900 	mov.w	r9, #0
 800764c:	e7de      	b.n	800760c <_printf_float+0x16c>
 800764e:	b913      	cbnz	r3, 8007656 <_printf_float+0x1b6>
 8007650:	6822      	ldr	r2, [r4, #0]
 8007652:	07d2      	lsls	r2, r2, #31
 8007654:	d501      	bpl.n	800765a <_printf_float+0x1ba>
 8007656:	3302      	adds	r3, #2
 8007658:	e7f4      	b.n	8007644 <_printf_float+0x1a4>
 800765a:	2301      	movs	r3, #1
 800765c:	e7f2      	b.n	8007644 <_printf_float+0x1a4>
 800765e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007664:	4299      	cmp	r1, r3
 8007666:	db05      	blt.n	8007674 <_printf_float+0x1d4>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	6121      	str	r1, [r4, #16]
 800766c:	07d8      	lsls	r0, r3, #31
 800766e:	d5ea      	bpl.n	8007646 <_printf_float+0x1a6>
 8007670:	1c4b      	adds	r3, r1, #1
 8007672:	e7e7      	b.n	8007644 <_printf_float+0x1a4>
 8007674:	2900      	cmp	r1, #0
 8007676:	bfd4      	ite	le
 8007678:	f1c1 0202 	rsble	r2, r1, #2
 800767c:	2201      	movgt	r2, #1
 800767e:	4413      	add	r3, r2
 8007680:	e7e0      	b.n	8007644 <_printf_float+0x1a4>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	055a      	lsls	r2, r3, #21
 8007686:	d407      	bmi.n	8007698 <_printf_float+0x1f8>
 8007688:	6923      	ldr	r3, [r4, #16]
 800768a:	4642      	mov	r2, r8
 800768c:	4631      	mov	r1, r6
 800768e:	4628      	mov	r0, r5
 8007690:	47b8      	blx	r7
 8007692:	3001      	adds	r0, #1
 8007694:	d12c      	bne.n	80076f0 <_printf_float+0x250>
 8007696:	e764      	b.n	8007562 <_printf_float+0xc2>
 8007698:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800769c:	f240 80e0 	bls.w	8007860 <_printf_float+0x3c0>
 80076a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076a4:	2200      	movs	r2, #0
 80076a6:	2300      	movs	r3, #0
 80076a8:	f7f9 fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d034      	beq.n	800771a <_printf_float+0x27a>
 80076b0:	4a37      	ldr	r2, [pc, #220]	; (8007790 <_printf_float+0x2f0>)
 80076b2:	2301      	movs	r3, #1
 80076b4:	4631      	mov	r1, r6
 80076b6:	4628      	mov	r0, r5
 80076b8:	47b8      	blx	r7
 80076ba:	3001      	adds	r0, #1
 80076bc:	f43f af51 	beq.w	8007562 <_printf_float+0xc2>
 80076c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076c4:	429a      	cmp	r2, r3
 80076c6:	db02      	blt.n	80076ce <_printf_float+0x22e>
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	07d8      	lsls	r0, r3, #31
 80076cc:	d510      	bpl.n	80076f0 <_printf_float+0x250>
 80076ce:	ee18 3a10 	vmov	r3, s16
 80076d2:	4652      	mov	r2, sl
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	f43f af41 	beq.w	8007562 <_printf_float+0xc2>
 80076e0:	f04f 0800 	mov.w	r8, #0
 80076e4:	f104 091a 	add.w	r9, r4, #26
 80076e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ea:	3b01      	subs	r3, #1
 80076ec:	4543      	cmp	r3, r8
 80076ee:	dc09      	bgt.n	8007704 <_printf_float+0x264>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	079b      	lsls	r3, r3, #30
 80076f4:	f100 8105 	bmi.w	8007902 <_printf_float+0x462>
 80076f8:	68e0      	ldr	r0, [r4, #12]
 80076fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076fc:	4298      	cmp	r0, r3
 80076fe:	bfb8      	it	lt
 8007700:	4618      	movlt	r0, r3
 8007702:	e730      	b.n	8007566 <_printf_float+0xc6>
 8007704:	2301      	movs	r3, #1
 8007706:	464a      	mov	r2, r9
 8007708:	4631      	mov	r1, r6
 800770a:	4628      	mov	r0, r5
 800770c:	47b8      	blx	r7
 800770e:	3001      	adds	r0, #1
 8007710:	f43f af27 	beq.w	8007562 <_printf_float+0xc2>
 8007714:	f108 0801 	add.w	r8, r8, #1
 8007718:	e7e6      	b.n	80076e8 <_printf_float+0x248>
 800771a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800771c:	2b00      	cmp	r3, #0
 800771e:	dc39      	bgt.n	8007794 <_printf_float+0x2f4>
 8007720:	4a1b      	ldr	r2, [pc, #108]	; (8007790 <_printf_float+0x2f0>)
 8007722:	2301      	movs	r3, #1
 8007724:	4631      	mov	r1, r6
 8007726:	4628      	mov	r0, r5
 8007728:	47b8      	blx	r7
 800772a:	3001      	adds	r0, #1
 800772c:	f43f af19 	beq.w	8007562 <_printf_float+0xc2>
 8007730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007734:	4313      	orrs	r3, r2
 8007736:	d102      	bne.n	800773e <_printf_float+0x29e>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	07d9      	lsls	r1, r3, #31
 800773c:	d5d8      	bpl.n	80076f0 <_printf_float+0x250>
 800773e:	ee18 3a10 	vmov	r3, s16
 8007742:	4652      	mov	r2, sl
 8007744:	4631      	mov	r1, r6
 8007746:	4628      	mov	r0, r5
 8007748:	47b8      	blx	r7
 800774a:	3001      	adds	r0, #1
 800774c:	f43f af09 	beq.w	8007562 <_printf_float+0xc2>
 8007750:	f04f 0900 	mov.w	r9, #0
 8007754:	f104 0a1a 	add.w	sl, r4, #26
 8007758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775a:	425b      	negs	r3, r3
 800775c:	454b      	cmp	r3, r9
 800775e:	dc01      	bgt.n	8007764 <_printf_float+0x2c4>
 8007760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007762:	e792      	b.n	800768a <_printf_float+0x1ea>
 8007764:	2301      	movs	r3, #1
 8007766:	4652      	mov	r2, sl
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	f43f aef7 	beq.w	8007562 <_printf_float+0xc2>
 8007774:	f109 0901 	add.w	r9, r9, #1
 8007778:	e7ee      	b.n	8007758 <_printf_float+0x2b8>
 800777a:	bf00      	nop
 800777c:	7fefffff 	.word	0x7fefffff
 8007780:	0800a19c 	.word	0x0800a19c
 8007784:	0800a1a0 	.word	0x0800a1a0
 8007788:	0800a1a8 	.word	0x0800a1a8
 800778c:	0800a1a4 	.word	0x0800a1a4
 8007790:	0800a1ac 	.word	0x0800a1ac
 8007794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007796:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007798:	429a      	cmp	r2, r3
 800779a:	bfa8      	it	ge
 800779c:	461a      	movge	r2, r3
 800779e:	2a00      	cmp	r2, #0
 80077a0:	4691      	mov	r9, r2
 80077a2:	dc37      	bgt.n	8007814 <_printf_float+0x374>
 80077a4:	f04f 0b00 	mov.w	fp, #0
 80077a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077ac:	f104 021a 	add.w	r2, r4, #26
 80077b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077b2:	9305      	str	r3, [sp, #20]
 80077b4:	eba3 0309 	sub.w	r3, r3, r9
 80077b8:	455b      	cmp	r3, fp
 80077ba:	dc33      	bgt.n	8007824 <_printf_float+0x384>
 80077bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077c0:	429a      	cmp	r2, r3
 80077c2:	db3b      	blt.n	800783c <_printf_float+0x39c>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	07da      	lsls	r2, r3, #31
 80077c8:	d438      	bmi.n	800783c <_printf_float+0x39c>
 80077ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077cc:	9a05      	ldr	r2, [sp, #20]
 80077ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80077d0:	1a9a      	subs	r2, r3, r2
 80077d2:	eba3 0901 	sub.w	r9, r3, r1
 80077d6:	4591      	cmp	r9, r2
 80077d8:	bfa8      	it	ge
 80077da:	4691      	movge	r9, r2
 80077dc:	f1b9 0f00 	cmp.w	r9, #0
 80077e0:	dc35      	bgt.n	800784e <_printf_float+0x3ae>
 80077e2:	f04f 0800 	mov.w	r8, #0
 80077e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077ea:	f104 0a1a 	add.w	sl, r4, #26
 80077ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	eba3 0309 	sub.w	r3, r3, r9
 80077f8:	4543      	cmp	r3, r8
 80077fa:	f77f af79 	ble.w	80076f0 <_printf_float+0x250>
 80077fe:	2301      	movs	r3, #1
 8007800:	4652      	mov	r2, sl
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	f43f aeaa 	beq.w	8007562 <_printf_float+0xc2>
 800780e:	f108 0801 	add.w	r8, r8, #1
 8007812:	e7ec      	b.n	80077ee <_printf_float+0x34e>
 8007814:	4613      	mov	r3, r2
 8007816:	4631      	mov	r1, r6
 8007818:	4642      	mov	r2, r8
 800781a:	4628      	mov	r0, r5
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	d1c0      	bne.n	80077a4 <_printf_float+0x304>
 8007822:	e69e      	b.n	8007562 <_printf_float+0xc2>
 8007824:	2301      	movs	r3, #1
 8007826:	4631      	mov	r1, r6
 8007828:	4628      	mov	r0, r5
 800782a:	9205      	str	r2, [sp, #20]
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f ae97 	beq.w	8007562 <_printf_float+0xc2>
 8007834:	9a05      	ldr	r2, [sp, #20]
 8007836:	f10b 0b01 	add.w	fp, fp, #1
 800783a:	e7b9      	b.n	80077b0 <_printf_float+0x310>
 800783c:	ee18 3a10 	vmov	r3, s16
 8007840:	4652      	mov	r2, sl
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	d1be      	bne.n	80077ca <_printf_float+0x32a>
 800784c:	e689      	b.n	8007562 <_printf_float+0xc2>
 800784e:	9a05      	ldr	r2, [sp, #20]
 8007850:	464b      	mov	r3, r9
 8007852:	4442      	add	r2, r8
 8007854:	4631      	mov	r1, r6
 8007856:	4628      	mov	r0, r5
 8007858:	47b8      	blx	r7
 800785a:	3001      	adds	r0, #1
 800785c:	d1c1      	bne.n	80077e2 <_printf_float+0x342>
 800785e:	e680      	b.n	8007562 <_printf_float+0xc2>
 8007860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007862:	2a01      	cmp	r2, #1
 8007864:	dc01      	bgt.n	800786a <_printf_float+0x3ca>
 8007866:	07db      	lsls	r3, r3, #31
 8007868:	d538      	bpl.n	80078dc <_printf_float+0x43c>
 800786a:	2301      	movs	r3, #1
 800786c:	4642      	mov	r2, r8
 800786e:	4631      	mov	r1, r6
 8007870:	4628      	mov	r0, r5
 8007872:	47b8      	blx	r7
 8007874:	3001      	adds	r0, #1
 8007876:	f43f ae74 	beq.w	8007562 <_printf_float+0xc2>
 800787a:	ee18 3a10 	vmov	r3, s16
 800787e:	4652      	mov	r2, sl
 8007880:	4631      	mov	r1, r6
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	f43f ae6b 	beq.w	8007562 <_printf_float+0xc2>
 800788c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007890:	2200      	movs	r2, #0
 8007892:	2300      	movs	r3, #0
 8007894:	f7f9 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8007898:	b9d8      	cbnz	r0, 80078d2 <_printf_float+0x432>
 800789a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789c:	f108 0201 	add.w	r2, r8, #1
 80078a0:	3b01      	subs	r3, #1
 80078a2:	4631      	mov	r1, r6
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b8      	blx	r7
 80078a8:	3001      	adds	r0, #1
 80078aa:	d10e      	bne.n	80078ca <_printf_float+0x42a>
 80078ac:	e659      	b.n	8007562 <_printf_float+0xc2>
 80078ae:	2301      	movs	r3, #1
 80078b0:	4652      	mov	r2, sl
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	f43f ae52 	beq.w	8007562 <_printf_float+0xc2>
 80078be:	f108 0801 	add.w	r8, r8, #1
 80078c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c4:	3b01      	subs	r3, #1
 80078c6:	4543      	cmp	r3, r8
 80078c8:	dcf1      	bgt.n	80078ae <_printf_float+0x40e>
 80078ca:	464b      	mov	r3, r9
 80078cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80078d0:	e6dc      	b.n	800768c <_printf_float+0x1ec>
 80078d2:	f04f 0800 	mov.w	r8, #0
 80078d6:	f104 0a1a 	add.w	sl, r4, #26
 80078da:	e7f2      	b.n	80078c2 <_printf_float+0x422>
 80078dc:	2301      	movs	r3, #1
 80078de:	4642      	mov	r2, r8
 80078e0:	e7df      	b.n	80078a2 <_printf_float+0x402>
 80078e2:	2301      	movs	r3, #1
 80078e4:	464a      	mov	r2, r9
 80078e6:	4631      	mov	r1, r6
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	f43f ae38 	beq.w	8007562 <_printf_float+0xc2>
 80078f2:	f108 0801 	add.w	r8, r8, #1
 80078f6:	68e3      	ldr	r3, [r4, #12]
 80078f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078fa:	1a5b      	subs	r3, r3, r1
 80078fc:	4543      	cmp	r3, r8
 80078fe:	dcf0      	bgt.n	80078e2 <_printf_float+0x442>
 8007900:	e6fa      	b.n	80076f8 <_printf_float+0x258>
 8007902:	f04f 0800 	mov.w	r8, #0
 8007906:	f104 0919 	add.w	r9, r4, #25
 800790a:	e7f4      	b.n	80078f6 <_printf_float+0x456>

0800790c <_printf_common>:
 800790c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	4616      	mov	r6, r2
 8007912:	4699      	mov	r9, r3
 8007914:	688a      	ldr	r2, [r1, #8]
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800791c:	4293      	cmp	r3, r2
 800791e:	bfb8      	it	lt
 8007920:	4613      	movlt	r3, r2
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007928:	4607      	mov	r7, r0
 800792a:	460c      	mov	r4, r1
 800792c:	b10a      	cbz	r2, 8007932 <_printf_common+0x26>
 800792e:	3301      	adds	r3, #1
 8007930:	6033      	str	r3, [r6, #0]
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	0699      	lsls	r1, r3, #26
 8007936:	bf42      	ittt	mi
 8007938:	6833      	ldrmi	r3, [r6, #0]
 800793a:	3302      	addmi	r3, #2
 800793c:	6033      	strmi	r3, [r6, #0]
 800793e:	6825      	ldr	r5, [r4, #0]
 8007940:	f015 0506 	ands.w	r5, r5, #6
 8007944:	d106      	bne.n	8007954 <_printf_common+0x48>
 8007946:	f104 0a19 	add.w	sl, r4, #25
 800794a:	68e3      	ldr	r3, [r4, #12]
 800794c:	6832      	ldr	r2, [r6, #0]
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	42ab      	cmp	r3, r5
 8007952:	dc26      	bgt.n	80079a2 <_printf_common+0x96>
 8007954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007958:	1e13      	subs	r3, r2, #0
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	bf18      	it	ne
 800795e:	2301      	movne	r3, #1
 8007960:	0692      	lsls	r2, r2, #26
 8007962:	d42b      	bmi.n	80079bc <_printf_common+0xb0>
 8007964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007968:	4649      	mov	r1, r9
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	3001      	adds	r0, #1
 8007970:	d01e      	beq.n	80079b0 <_printf_common+0xa4>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	68e5      	ldr	r5, [r4, #12]
 8007976:	6832      	ldr	r2, [r6, #0]
 8007978:	f003 0306 	and.w	r3, r3, #6
 800797c:	2b04      	cmp	r3, #4
 800797e:	bf08      	it	eq
 8007980:	1aad      	subeq	r5, r5, r2
 8007982:	68a3      	ldr	r3, [r4, #8]
 8007984:	6922      	ldr	r2, [r4, #16]
 8007986:	bf0c      	ite	eq
 8007988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800798c:	2500      	movne	r5, #0
 800798e:	4293      	cmp	r3, r2
 8007990:	bfc4      	itt	gt
 8007992:	1a9b      	subgt	r3, r3, r2
 8007994:	18ed      	addgt	r5, r5, r3
 8007996:	2600      	movs	r6, #0
 8007998:	341a      	adds	r4, #26
 800799a:	42b5      	cmp	r5, r6
 800799c:	d11a      	bne.n	80079d4 <_printf_common+0xc8>
 800799e:	2000      	movs	r0, #0
 80079a0:	e008      	b.n	80079b4 <_printf_common+0xa8>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4652      	mov	r2, sl
 80079a6:	4649      	mov	r1, r9
 80079a8:	4638      	mov	r0, r7
 80079aa:	47c0      	blx	r8
 80079ac:	3001      	adds	r0, #1
 80079ae:	d103      	bne.n	80079b8 <_printf_common+0xac>
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b8:	3501      	adds	r5, #1
 80079ba:	e7c6      	b.n	800794a <_printf_common+0x3e>
 80079bc:	18e1      	adds	r1, r4, r3
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	2030      	movs	r0, #48	; 0x30
 80079c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079c6:	4422      	add	r2, r4
 80079c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079d0:	3302      	adds	r3, #2
 80079d2:	e7c7      	b.n	8007964 <_printf_common+0x58>
 80079d4:	2301      	movs	r3, #1
 80079d6:	4622      	mov	r2, r4
 80079d8:	4649      	mov	r1, r9
 80079da:	4638      	mov	r0, r7
 80079dc:	47c0      	blx	r8
 80079de:	3001      	adds	r0, #1
 80079e0:	d0e6      	beq.n	80079b0 <_printf_common+0xa4>
 80079e2:	3601      	adds	r6, #1
 80079e4:	e7d9      	b.n	800799a <_printf_common+0x8e>
	...

080079e8 <_printf_i>:
 80079e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	7e0f      	ldrb	r7, [r1, #24]
 80079ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079f0:	2f78      	cmp	r7, #120	; 0x78
 80079f2:	4691      	mov	r9, r2
 80079f4:	4680      	mov	r8, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	469a      	mov	sl, r3
 80079fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079fe:	d807      	bhi.n	8007a10 <_printf_i+0x28>
 8007a00:	2f62      	cmp	r7, #98	; 0x62
 8007a02:	d80a      	bhi.n	8007a1a <_printf_i+0x32>
 8007a04:	2f00      	cmp	r7, #0
 8007a06:	f000 80d8 	beq.w	8007bba <_printf_i+0x1d2>
 8007a0a:	2f58      	cmp	r7, #88	; 0x58
 8007a0c:	f000 80a3 	beq.w	8007b56 <_printf_i+0x16e>
 8007a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a18:	e03a      	b.n	8007a90 <_printf_i+0xa8>
 8007a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a1e:	2b15      	cmp	r3, #21
 8007a20:	d8f6      	bhi.n	8007a10 <_printf_i+0x28>
 8007a22:	a101      	add	r1, pc, #4	; (adr r1, 8007a28 <_printf_i+0x40>)
 8007a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a95 	.word	0x08007a95
 8007a30:	08007a11 	.word	0x08007a11
 8007a34:	08007a11 	.word	0x08007a11
 8007a38:	08007a11 	.word	0x08007a11
 8007a3c:	08007a11 	.word	0x08007a11
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007a11 	.word	0x08007a11
 8007a48:	08007a11 	.word	0x08007a11
 8007a4c:	08007a11 	.word	0x08007a11
 8007a50:	08007a11 	.word	0x08007a11
 8007a54:	08007ba1 	.word	0x08007ba1
 8007a58:	08007ac5 	.word	0x08007ac5
 8007a5c:	08007b83 	.word	0x08007b83
 8007a60:	08007a11 	.word	0x08007a11
 8007a64:	08007a11 	.word	0x08007a11
 8007a68:	08007bc3 	.word	0x08007bc3
 8007a6c:	08007a11 	.word	0x08007a11
 8007a70:	08007ac5 	.word	0x08007ac5
 8007a74:	08007a11 	.word	0x08007a11
 8007a78:	08007a11 	.word	0x08007a11
 8007a7c:	08007b8b 	.word	0x08007b8b
 8007a80:	682b      	ldr	r3, [r5, #0]
 8007a82:	1d1a      	adds	r2, r3, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	602a      	str	r2, [r5, #0]
 8007a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a90:	2301      	movs	r3, #1
 8007a92:	e0a3      	b.n	8007bdc <_printf_i+0x1f4>
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	6829      	ldr	r1, [r5, #0]
 8007a98:	0606      	lsls	r6, r0, #24
 8007a9a:	f101 0304 	add.w	r3, r1, #4
 8007a9e:	d50a      	bpl.n	8007ab6 <_printf_i+0xce>
 8007aa0:	680e      	ldr	r6, [r1, #0]
 8007aa2:	602b      	str	r3, [r5, #0]
 8007aa4:	2e00      	cmp	r6, #0
 8007aa6:	da03      	bge.n	8007ab0 <_printf_i+0xc8>
 8007aa8:	232d      	movs	r3, #45	; 0x2d
 8007aaa:	4276      	negs	r6, r6
 8007aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab0:	485e      	ldr	r0, [pc, #376]	; (8007c2c <_printf_i+0x244>)
 8007ab2:	230a      	movs	r3, #10
 8007ab4:	e019      	b.n	8007aea <_printf_i+0x102>
 8007ab6:	680e      	ldr	r6, [r1, #0]
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007abe:	bf18      	it	ne
 8007ac0:	b236      	sxthne	r6, r6
 8007ac2:	e7ef      	b.n	8007aa4 <_printf_i+0xbc>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	6820      	ldr	r0, [r4, #0]
 8007ac8:	1d19      	adds	r1, r3, #4
 8007aca:	6029      	str	r1, [r5, #0]
 8007acc:	0601      	lsls	r1, r0, #24
 8007ace:	d501      	bpl.n	8007ad4 <_printf_i+0xec>
 8007ad0:	681e      	ldr	r6, [r3, #0]
 8007ad2:	e002      	b.n	8007ada <_printf_i+0xf2>
 8007ad4:	0646      	lsls	r6, r0, #25
 8007ad6:	d5fb      	bpl.n	8007ad0 <_printf_i+0xe8>
 8007ad8:	881e      	ldrh	r6, [r3, #0]
 8007ada:	4854      	ldr	r0, [pc, #336]	; (8007c2c <_printf_i+0x244>)
 8007adc:	2f6f      	cmp	r7, #111	; 0x6f
 8007ade:	bf0c      	ite	eq
 8007ae0:	2308      	moveq	r3, #8
 8007ae2:	230a      	movne	r3, #10
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007aea:	6865      	ldr	r5, [r4, #4]
 8007aec:	60a5      	str	r5, [r4, #8]
 8007aee:	2d00      	cmp	r5, #0
 8007af0:	bfa2      	ittt	ge
 8007af2:	6821      	ldrge	r1, [r4, #0]
 8007af4:	f021 0104 	bicge.w	r1, r1, #4
 8007af8:	6021      	strge	r1, [r4, #0]
 8007afa:	b90e      	cbnz	r6, 8007b00 <_printf_i+0x118>
 8007afc:	2d00      	cmp	r5, #0
 8007afe:	d04d      	beq.n	8007b9c <_printf_i+0x1b4>
 8007b00:	4615      	mov	r5, r2
 8007b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b06:	fb03 6711 	mls	r7, r3, r1, r6
 8007b0a:	5dc7      	ldrb	r7, [r0, r7]
 8007b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b10:	4637      	mov	r7, r6
 8007b12:	42bb      	cmp	r3, r7
 8007b14:	460e      	mov	r6, r1
 8007b16:	d9f4      	bls.n	8007b02 <_printf_i+0x11a>
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d10b      	bne.n	8007b34 <_printf_i+0x14c>
 8007b1c:	6823      	ldr	r3, [r4, #0]
 8007b1e:	07de      	lsls	r6, r3, #31
 8007b20:	d508      	bpl.n	8007b34 <_printf_i+0x14c>
 8007b22:	6923      	ldr	r3, [r4, #16]
 8007b24:	6861      	ldr	r1, [r4, #4]
 8007b26:	4299      	cmp	r1, r3
 8007b28:	bfde      	ittt	le
 8007b2a:	2330      	movle	r3, #48	; 0x30
 8007b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b34:	1b52      	subs	r2, r2, r5
 8007b36:	6122      	str	r2, [r4, #16]
 8007b38:	f8cd a000 	str.w	sl, [sp]
 8007b3c:	464b      	mov	r3, r9
 8007b3e:	aa03      	add	r2, sp, #12
 8007b40:	4621      	mov	r1, r4
 8007b42:	4640      	mov	r0, r8
 8007b44:	f7ff fee2 	bl	800790c <_printf_common>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d14c      	bne.n	8007be6 <_printf_i+0x1fe>
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	b004      	add	sp, #16
 8007b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b56:	4835      	ldr	r0, [pc, #212]	; (8007c2c <_printf_i+0x244>)
 8007b58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b5c:	6829      	ldr	r1, [r5, #0]
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b64:	6029      	str	r1, [r5, #0]
 8007b66:	061d      	lsls	r5, r3, #24
 8007b68:	d514      	bpl.n	8007b94 <_printf_i+0x1ac>
 8007b6a:	07df      	lsls	r7, r3, #31
 8007b6c:	bf44      	itt	mi
 8007b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b72:	6023      	strmi	r3, [r4, #0]
 8007b74:	b91e      	cbnz	r6, 8007b7e <_printf_i+0x196>
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	f023 0320 	bic.w	r3, r3, #32
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	2310      	movs	r3, #16
 8007b80:	e7b0      	b.n	8007ae4 <_printf_i+0xfc>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	f043 0320 	orr.w	r3, r3, #32
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	2378      	movs	r3, #120	; 0x78
 8007b8c:	4828      	ldr	r0, [pc, #160]	; (8007c30 <_printf_i+0x248>)
 8007b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b92:	e7e3      	b.n	8007b5c <_printf_i+0x174>
 8007b94:	0659      	lsls	r1, r3, #25
 8007b96:	bf48      	it	mi
 8007b98:	b2b6      	uxthmi	r6, r6
 8007b9a:	e7e6      	b.n	8007b6a <_printf_i+0x182>
 8007b9c:	4615      	mov	r5, r2
 8007b9e:	e7bb      	b.n	8007b18 <_printf_i+0x130>
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	6826      	ldr	r6, [r4, #0]
 8007ba4:	6961      	ldr	r1, [r4, #20]
 8007ba6:	1d18      	adds	r0, r3, #4
 8007ba8:	6028      	str	r0, [r5, #0]
 8007baa:	0635      	lsls	r5, r6, #24
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	d501      	bpl.n	8007bb4 <_printf_i+0x1cc>
 8007bb0:	6019      	str	r1, [r3, #0]
 8007bb2:	e002      	b.n	8007bba <_printf_i+0x1d2>
 8007bb4:	0670      	lsls	r0, r6, #25
 8007bb6:	d5fb      	bpl.n	8007bb0 <_printf_i+0x1c8>
 8007bb8:	8019      	strh	r1, [r3, #0]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	6123      	str	r3, [r4, #16]
 8007bbe:	4615      	mov	r5, r2
 8007bc0:	e7ba      	b.n	8007b38 <_printf_i+0x150>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	1d1a      	adds	r2, r3, #4
 8007bc6:	602a      	str	r2, [r5, #0]
 8007bc8:	681d      	ldr	r5, [r3, #0]
 8007bca:	6862      	ldr	r2, [r4, #4]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f7f8 fb06 	bl	80001e0 <memchr>
 8007bd4:	b108      	cbz	r0, 8007bda <_printf_i+0x1f2>
 8007bd6:	1b40      	subs	r0, r0, r5
 8007bd8:	6060      	str	r0, [r4, #4]
 8007bda:	6863      	ldr	r3, [r4, #4]
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	2300      	movs	r3, #0
 8007be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be4:	e7a8      	b.n	8007b38 <_printf_i+0x150>
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	462a      	mov	r2, r5
 8007bea:	4649      	mov	r1, r9
 8007bec:	4640      	mov	r0, r8
 8007bee:	47d0      	blx	sl
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d0ab      	beq.n	8007b4c <_printf_i+0x164>
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	079b      	lsls	r3, r3, #30
 8007bf8:	d413      	bmi.n	8007c22 <_printf_i+0x23a>
 8007bfa:	68e0      	ldr	r0, [r4, #12]
 8007bfc:	9b03      	ldr	r3, [sp, #12]
 8007bfe:	4298      	cmp	r0, r3
 8007c00:	bfb8      	it	lt
 8007c02:	4618      	movlt	r0, r3
 8007c04:	e7a4      	b.n	8007b50 <_printf_i+0x168>
 8007c06:	2301      	movs	r3, #1
 8007c08:	4632      	mov	r2, r6
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	47d0      	blx	sl
 8007c10:	3001      	adds	r0, #1
 8007c12:	d09b      	beq.n	8007b4c <_printf_i+0x164>
 8007c14:	3501      	adds	r5, #1
 8007c16:	68e3      	ldr	r3, [r4, #12]
 8007c18:	9903      	ldr	r1, [sp, #12]
 8007c1a:	1a5b      	subs	r3, r3, r1
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	dcf2      	bgt.n	8007c06 <_printf_i+0x21e>
 8007c20:	e7eb      	b.n	8007bfa <_printf_i+0x212>
 8007c22:	2500      	movs	r5, #0
 8007c24:	f104 0619 	add.w	r6, r4, #25
 8007c28:	e7f5      	b.n	8007c16 <_printf_i+0x22e>
 8007c2a:	bf00      	nop
 8007c2c:	0800a1ae 	.word	0x0800a1ae
 8007c30:	0800a1bf 	.word	0x0800a1bf

08007c34 <iprintf>:
 8007c34:	b40f      	push	{r0, r1, r2, r3}
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <iprintf+0x2c>)
 8007c38:	b513      	push	{r0, r1, r4, lr}
 8007c3a:	681c      	ldr	r4, [r3, #0]
 8007c3c:	b124      	cbz	r4, 8007c48 <iprintf+0x14>
 8007c3e:	69a3      	ldr	r3, [r4, #24]
 8007c40:	b913      	cbnz	r3, 8007c48 <iprintf+0x14>
 8007c42:	4620      	mov	r0, r4
 8007c44:	f001 f8d8 	bl	8008df8 <__sinit>
 8007c48:	ab05      	add	r3, sp, #20
 8007c4a:	9a04      	ldr	r2, [sp, #16]
 8007c4c:	68a1      	ldr	r1, [r4, #8]
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	4620      	mov	r0, r4
 8007c52:	f001 fe95 	bl	8009980 <_vfiprintf_r>
 8007c56:	b002      	add	sp, #8
 8007c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5c:	b004      	add	sp, #16
 8007c5e:	4770      	bx	lr
 8007c60:	2000000c 	.word	0x2000000c

08007c64 <_puts_r>:
 8007c64:	b570      	push	{r4, r5, r6, lr}
 8007c66:	460e      	mov	r6, r1
 8007c68:	4605      	mov	r5, r0
 8007c6a:	b118      	cbz	r0, 8007c74 <_puts_r+0x10>
 8007c6c:	6983      	ldr	r3, [r0, #24]
 8007c6e:	b90b      	cbnz	r3, 8007c74 <_puts_r+0x10>
 8007c70:	f001 f8c2 	bl	8008df8 <__sinit>
 8007c74:	69ab      	ldr	r3, [r5, #24]
 8007c76:	68ac      	ldr	r4, [r5, #8]
 8007c78:	b913      	cbnz	r3, 8007c80 <_puts_r+0x1c>
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f001 f8bc 	bl	8008df8 <__sinit>
 8007c80:	4b2c      	ldr	r3, [pc, #176]	; (8007d34 <_puts_r+0xd0>)
 8007c82:	429c      	cmp	r4, r3
 8007c84:	d120      	bne.n	8007cc8 <_puts_r+0x64>
 8007c86:	686c      	ldr	r4, [r5, #4]
 8007c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c8a:	07db      	lsls	r3, r3, #31
 8007c8c:	d405      	bmi.n	8007c9a <_puts_r+0x36>
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	0598      	lsls	r0, r3, #22
 8007c92:	d402      	bmi.n	8007c9a <_puts_r+0x36>
 8007c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c96:	f001 f952 	bl	8008f3e <__retarget_lock_acquire_recursive>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	0719      	lsls	r1, r3, #28
 8007c9e:	d51d      	bpl.n	8007cdc <_puts_r+0x78>
 8007ca0:	6923      	ldr	r3, [r4, #16]
 8007ca2:	b1db      	cbz	r3, 8007cdc <_puts_r+0x78>
 8007ca4:	3e01      	subs	r6, #1
 8007ca6:	68a3      	ldr	r3, [r4, #8]
 8007ca8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cac:	3b01      	subs	r3, #1
 8007cae:	60a3      	str	r3, [r4, #8]
 8007cb0:	bb39      	cbnz	r1, 8007d02 <_puts_r+0x9e>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da38      	bge.n	8007d28 <_puts_r+0xc4>
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	210a      	movs	r1, #10
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f000 f848 	bl	8007d50 <__swbuf_r>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d011      	beq.n	8007ce8 <_puts_r+0x84>
 8007cc4:	250a      	movs	r5, #10
 8007cc6:	e011      	b.n	8007cec <_puts_r+0x88>
 8007cc8:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <_puts_r+0xd4>)
 8007cca:	429c      	cmp	r4, r3
 8007ccc:	d101      	bne.n	8007cd2 <_puts_r+0x6e>
 8007cce:	68ac      	ldr	r4, [r5, #8]
 8007cd0:	e7da      	b.n	8007c88 <_puts_r+0x24>
 8007cd2:	4b1a      	ldr	r3, [pc, #104]	; (8007d3c <_puts_r+0xd8>)
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	bf08      	it	eq
 8007cd8:	68ec      	ldreq	r4, [r5, #12]
 8007cda:	e7d5      	b.n	8007c88 <_puts_r+0x24>
 8007cdc:	4621      	mov	r1, r4
 8007cde:	4628      	mov	r0, r5
 8007ce0:	f000 f888 	bl	8007df4 <__swsetup_r>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d0dd      	beq.n	8007ca4 <_puts_r+0x40>
 8007ce8:	f04f 35ff 	mov.w	r5, #4294967295
 8007cec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cee:	07da      	lsls	r2, r3, #31
 8007cf0:	d405      	bmi.n	8007cfe <_puts_r+0x9a>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	059b      	lsls	r3, r3, #22
 8007cf6:	d402      	bmi.n	8007cfe <_puts_r+0x9a>
 8007cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cfa:	f001 f921 	bl	8008f40 <__retarget_lock_release_recursive>
 8007cfe:	4628      	mov	r0, r5
 8007d00:	bd70      	pop	{r4, r5, r6, pc}
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da04      	bge.n	8007d10 <_puts_r+0xac>
 8007d06:	69a2      	ldr	r2, [r4, #24]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	dc06      	bgt.n	8007d1a <_puts_r+0xb6>
 8007d0c:	290a      	cmp	r1, #10
 8007d0e:	d004      	beq.n	8007d1a <_puts_r+0xb6>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	6022      	str	r2, [r4, #0]
 8007d16:	7019      	strb	r1, [r3, #0]
 8007d18:	e7c5      	b.n	8007ca6 <_puts_r+0x42>
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 f817 	bl	8007d50 <__swbuf_r>
 8007d22:	3001      	adds	r0, #1
 8007d24:	d1bf      	bne.n	8007ca6 <_puts_r+0x42>
 8007d26:	e7df      	b.n	8007ce8 <_puts_r+0x84>
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	250a      	movs	r5, #10
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	6022      	str	r2, [r4, #0]
 8007d30:	701d      	strb	r5, [r3, #0]
 8007d32:	e7db      	b.n	8007cec <_puts_r+0x88>
 8007d34:	0800a280 	.word	0x0800a280
 8007d38:	0800a2a0 	.word	0x0800a2a0
 8007d3c:	0800a260 	.word	0x0800a260

08007d40 <puts>:
 8007d40:	4b02      	ldr	r3, [pc, #8]	; (8007d4c <puts+0xc>)
 8007d42:	4601      	mov	r1, r0
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f7ff bf8d 	b.w	8007c64 <_puts_r>
 8007d4a:	bf00      	nop
 8007d4c:	2000000c 	.word	0x2000000c

08007d50 <__swbuf_r>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	460e      	mov	r6, r1
 8007d54:	4614      	mov	r4, r2
 8007d56:	4605      	mov	r5, r0
 8007d58:	b118      	cbz	r0, 8007d62 <__swbuf_r+0x12>
 8007d5a:	6983      	ldr	r3, [r0, #24]
 8007d5c:	b90b      	cbnz	r3, 8007d62 <__swbuf_r+0x12>
 8007d5e:	f001 f84b 	bl	8008df8 <__sinit>
 8007d62:	4b21      	ldr	r3, [pc, #132]	; (8007de8 <__swbuf_r+0x98>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	d12b      	bne.n	8007dc0 <__swbuf_r+0x70>
 8007d68:	686c      	ldr	r4, [r5, #4]
 8007d6a:	69a3      	ldr	r3, [r4, #24]
 8007d6c:	60a3      	str	r3, [r4, #8]
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	071a      	lsls	r2, r3, #28
 8007d72:	d52f      	bpl.n	8007dd4 <__swbuf_r+0x84>
 8007d74:	6923      	ldr	r3, [r4, #16]
 8007d76:	b36b      	cbz	r3, 8007dd4 <__swbuf_r+0x84>
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	6820      	ldr	r0, [r4, #0]
 8007d7c:	1ac0      	subs	r0, r0, r3
 8007d7e:	6963      	ldr	r3, [r4, #20]
 8007d80:	b2f6      	uxtb	r6, r6
 8007d82:	4283      	cmp	r3, r0
 8007d84:	4637      	mov	r7, r6
 8007d86:	dc04      	bgt.n	8007d92 <__swbuf_r+0x42>
 8007d88:	4621      	mov	r1, r4
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 ffa0 	bl	8008cd0 <_fflush_r>
 8007d90:	bb30      	cbnz	r0, 8007de0 <__swbuf_r+0x90>
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	60a3      	str	r3, [r4, #8]
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	6022      	str	r2, [r4, #0]
 8007d9e:	701e      	strb	r6, [r3, #0]
 8007da0:	6963      	ldr	r3, [r4, #20]
 8007da2:	3001      	adds	r0, #1
 8007da4:	4283      	cmp	r3, r0
 8007da6:	d004      	beq.n	8007db2 <__swbuf_r+0x62>
 8007da8:	89a3      	ldrh	r3, [r4, #12]
 8007daa:	07db      	lsls	r3, r3, #31
 8007dac:	d506      	bpl.n	8007dbc <__swbuf_r+0x6c>
 8007dae:	2e0a      	cmp	r6, #10
 8007db0:	d104      	bne.n	8007dbc <__swbuf_r+0x6c>
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 ff8b 	bl	8008cd0 <_fflush_r>
 8007dba:	b988      	cbnz	r0, 8007de0 <__swbuf_r+0x90>
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <__swbuf_r+0x9c>)
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	d101      	bne.n	8007dca <__swbuf_r+0x7a>
 8007dc6:	68ac      	ldr	r4, [r5, #8]
 8007dc8:	e7cf      	b.n	8007d6a <__swbuf_r+0x1a>
 8007dca:	4b09      	ldr	r3, [pc, #36]	; (8007df0 <__swbuf_r+0xa0>)
 8007dcc:	429c      	cmp	r4, r3
 8007dce:	bf08      	it	eq
 8007dd0:	68ec      	ldreq	r4, [r5, #12]
 8007dd2:	e7ca      	b.n	8007d6a <__swbuf_r+0x1a>
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	f000 f80c 	bl	8007df4 <__swsetup_r>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d0cb      	beq.n	8007d78 <__swbuf_r+0x28>
 8007de0:	f04f 37ff 	mov.w	r7, #4294967295
 8007de4:	e7ea      	b.n	8007dbc <__swbuf_r+0x6c>
 8007de6:	bf00      	nop
 8007de8:	0800a280 	.word	0x0800a280
 8007dec:	0800a2a0 	.word	0x0800a2a0
 8007df0:	0800a260 	.word	0x0800a260

08007df4 <__swsetup_r>:
 8007df4:	4b32      	ldr	r3, [pc, #200]	; (8007ec0 <__swsetup_r+0xcc>)
 8007df6:	b570      	push	{r4, r5, r6, lr}
 8007df8:	681d      	ldr	r5, [r3, #0]
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	b125      	cbz	r5, 8007e0a <__swsetup_r+0x16>
 8007e00:	69ab      	ldr	r3, [r5, #24]
 8007e02:	b913      	cbnz	r3, 8007e0a <__swsetup_r+0x16>
 8007e04:	4628      	mov	r0, r5
 8007e06:	f000 fff7 	bl	8008df8 <__sinit>
 8007e0a:	4b2e      	ldr	r3, [pc, #184]	; (8007ec4 <__swsetup_r+0xd0>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	d10f      	bne.n	8007e30 <__swsetup_r+0x3c>
 8007e10:	686c      	ldr	r4, [r5, #4]
 8007e12:	89a3      	ldrh	r3, [r4, #12]
 8007e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e18:	0719      	lsls	r1, r3, #28
 8007e1a:	d42c      	bmi.n	8007e76 <__swsetup_r+0x82>
 8007e1c:	06dd      	lsls	r5, r3, #27
 8007e1e:	d411      	bmi.n	8007e44 <__swsetup_r+0x50>
 8007e20:	2309      	movs	r3, #9
 8007e22:	6033      	str	r3, [r6, #0]
 8007e24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2e:	e03e      	b.n	8007eae <__swsetup_r+0xba>
 8007e30:	4b25      	ldr	r3, [pc, #148]	; (8007ec8 <__swsetup_r+0xd4>)
 8007e32:	429c      	cmp	r4, r3
 8007e34:	d101      	bne.n	8007e3a <__swsetup_r+0x46>
 8007e36:	68ac      	ldr	r4, [r5, #8]
 8007e38:	e7eb      	b.n	8007e12 <__swsetup_r+0x1e>
 8007e3a:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <__swsetup_r+0xd8>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	bf08      	it	eq
 8007e40:	68ec      	ldreq	r4, [r5, #12]
 8007e42:	e7e6      	b.n	8007e12 <__swsetup_r+0x1e>
 8007e44:	0758      	lsls	r0, r3, #29
 8007e46:	d512      	bpl.n	8007e6e <__swsetup_r+0x7a>
 8007e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e4a:	b141      	cbz	r1, 8007e5e <__swsetup_r+0x6a>
 8007e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d002      	beq.n	8007e5a <__swsetup_r+0x66>
 8007e54:	4630      	mov	r0, r6
 8007e56:	f001 fc89 	bl	800976c <_free_r>
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e64:	81a3      	strh	r3, [r4, #12]
 8007e66:	2300      	movs	r3, #0
 8007e68:	6063      	str	r3, [r4, #4]
 8007e6a:	6923      	ldr	r3, [r4, #16]
 8007e6c:	6023      	str	r3, [r4, #0]
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	f043 0308 	orr.w	r3, r3, #8
 8007e74:	81a3      	strh	r3, [r4, #12]
 8007e76:	6923      	ldr	r3, [r4, #16]
 8007e78:	b94b      	cbnz	r3, 8007e8e <__swsetup_r+0x9a>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e84:	d003      	beq.n	8007e8e <__swsetup_r+0x9a>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f001 f87f 	bl	8008f8c <__smakebuf_r>
 8007e8e:	89a0      	ldrh	r0, [r4, #12]
 8007e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e94:	f010 0301 	ands.w	r3, r0, #1
 8007e98:	d00a      	beq.n	8007eb0 <__swsetup_r+0xbc>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60a3      	str	r3, [r4, #8]
 8007e9e:	6963      	ldr	r3, [r4, #20]
 8007ea0:	425b      	negs	r3, r3
 8007ea2:	61a3      	str	r3, [r4, #24]
 8007ea4:	6923      	ldr	r3, [r4, #16]
 8007ea6:	b943      	cbnz	r3, 8007eba <__swsetup_r+0xc6>
 8007ea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007eac:	d1ba      	bne.n	8007e24 <__swsetup_r+0x30>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	0781      	lsls	r1, r0, #30
 8007eb2:	bf58      	it	pl
 8007eb4:	6963      	ldrpl	r3, [r4, #20]
 8007eb6:	60a3      	str	r3, [r4, #8]
 8007eb8:	e7f4      	b.n	8007ea4 <__swsetup_r+0xb0>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e7f7      	b.n	8007eae <__swsetup_r+0xba>
 8007ebe:	bf00      	nop
 8007ec0:	2000000c 	.word	0x2000000c
 8007ec4:	0800a280 	.word	0x0800a280
 8007ec8:	0800a2a0 	.word	0x0800a2a0
 8007ecc:	0800a260 	.word	0x0800a260

08007ed0 <quorem>:
 8007ed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	6903      	ldr	r3, [r0, #16]
 8007ed6:	690c      	ldr	r4, [r1, #16]
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	4607      	mov	r7, r0
 8007edc:	f2c0 8081 	blt.w	8007fe2 <quorem+0x112>
 8007ee0:	3c01      	subs	r4, #1
 8007ee2:	f101 0814 	add.w	r8, r1, #20
 8007ee6:	f100 0514 	add.w	r5, r0, #20
 8007eea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eee:	9301      	str	r3, [sp, #4]
 8007ef0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	429a      	cmp	r2, r3
 8007efc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f04:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f08:	d331      	bcc.n	8007f6e <quorem+0x9e>
 8007f0a:	f04f 0e00 	mov.w	lr, #0
 8007f0e:	4640      	mov	r0, r8
 8007f10:	46ac      	mov	ip, r5
 8007f12:	46f2      	mov	sl, lr
 8007f14:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f18:	b293      	uxth	r3, r2
 8007f1a:	fb06 e303 	mla	r3, r6, r3, lr
 8007f1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	ebaa 0303 	sub.w	r3, sl, r3
 8007f28:	f8dc a000 	ldr.w	sl, [ip]
 8007f2c:	0c12      	lsrs	r2, r2, #16
 8007f2e:	fa13 f38a 	uxtah	r3, r3, sl
 8007f32:	fb06 e202 	mla	r2, r6, r2, lr
 8007f36:	9300      	str	r3, [sp, #0]
 8007f38:	9b00      	ldr	r3, [sp, #0]
 8007f3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f3e:	b292      	uxth	r2, r2
 8007f40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f48:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f4c:	4581      	cmp	r9, r0
 8007f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f52:	f84c 3b04 	str.w	r3, [ip], #4
 8007f56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f5a:	d2db      	bcs.n	8007f14 <quorem+0x44>
 8007f5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f60:	b92b      	cbnz	r3, 8007f6e <quorem+0x9e>
 8007f62:	9b01      	ldr	r3, [sp, #4]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	429d      	cmp	r5, r3
 8007f68:	461a      	mov	r2, r3
 8007f6a:	d32e      	bcc.n	8007fca <quorem+0xfa>
 8007f6c:	613c      	str	r4, [r7, #16]
 8007f6e:	4638      	mov	r0, r7
 8007f70:	f001 fae4 	bl	800953c <__mcmp>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	db24      	blt.n	8007fc2 <quorem+0xf2>
 8007f78:	3601      	adds	r6, #1
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	f04f 0c00 	mov.w	ip, #0
 8007f80:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f84:	f8d0 e000 	ldr.w	lr, [r0]
 8007f88:	b293      	uxth	r3, r2
 8007f8a:	ebac 0303 	sub.w	r3, ip, r3
 8007f8e:	0c12      	lsrs	r2, r2, #16
 8007f90:	fa13 f38e 	uxtah	r3, r3, lr
 8007f94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fa2:	45c1      	cmp	r9, r8
 8007fa4:	f840 3b04 	str.w	r3, [r0], #4
 8007fa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007fac:	d2e8      	bcs.n	8007f80 <quorem+0xb0>
 8007fae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fb6:	b922      	cbnz	r2, 8007fc2 <quorem+0xf2>
 8007fb8:	3b04      	subs	r3, #4
 8007fba:	429d      	cmp	r5, r3
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	d30a      	bcc.n	8007fd6 <quorem+0x106>
 8007fc0:	613c      	str	r4, [r7, #16]
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	b003      	add	sp, #12
 8007fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	3b04      	subs	r3, #4
 8007fce:	2a00      	cmp	r2, #0
 8007fd0:	d1cc      	bne.n	8007f6c <quorem+0x9c>
 8007fd2:	3c01      	subs	r4, #1
 8007fd4:	e7c7      	b.n	8007f66 <quorem+0x96>
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	3b04      	subs	r3, #4
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	d1f0      	bne.n	8007fc0 <quorem+0xf0>
 8007fde:	3c01      	subs	r4, #1
 8007fe0:	e7eb      	b.n	8007fba <quorem+0xea>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	e7ee      	b.n	8007fc4 <quorem+0xf4>
	...

08007fe8 <_dtoa_r>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	ed2d 8b04 	vpush	{d8-d9}
 8007ff0:	ec57 6b10 	vmov	r6, r7, d0
 8007ff4:	b093      	sub	sp, #76	; 0x4c
 8007ff6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ff8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ffc:	9106      	str	r1, [sp, #24]
 8007ffe:	ee10 aa10 	vmov	sl, s0
 8008002:	4604      	mov	r4, r0
 8008004:	9209      	str	r2, [sp, #36]	; 0x24
 8008006:	930c      	str	r3, [sp, #48]	; 0x30
 8008008:	46bb      	mov	fp, r7
 800800a:	b975      	cbnz	r5, 800802a <_dtoa_r+0x42>
 800800c:	2010      	movs	r0, #16
 800800e:	f000 fffd 	bl	800900c <malloc>
 8008012:	4602      	mov	r2, r0
 8008014:	6260      	str	r0, [r4, #36]	; 0x24
 8008016:	b920      	cbnz	r0, 8008022 <_dtoa_r+0x3a>
 8008018:	4ba7      	ldr	r3, [pc, #668]	; (80082b8 <_dtoa_r+0x2d0>)
 800801a:	21ea      	movs	r1, #234	; 0xea
 800801c:	48a7      	ldr	r0, [pc, #668]	; (80082bc <_dtoa_r+0x2d4>)
 800801e:	f001 fe45 	bl	8009cac <__assert_func>
 8008022:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008026:	6005      	str	r5, [r0, #0]
 8008028:	60c5      	str	r5, [r0, #12]
 800802a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800802c:	6819      	ldr	r1, [r3, #0]
 800802e:	b151      	cbz	r1, 8008046 <_dtoa_r+0x5e>
 8008030:	685a      	ldr	r2, [r3, #4]
 8008032:	604a      	str	r2, [r1, #4]
 8008034:	2301      	movs	r3, #1
 8008036:	4093      	lsls	r3, r2
 8008038:	608b      	str	r3, [r1, #8]
 800803a:	4620      	mov	r0, r4
 800803c:	f001 f83c 	bl	80090b8 <_Bfree>
 8008040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	1e3b      	subs	r3, r7, #0
 8008048:	bfaa      	itet	ge
 800804a:	2300      	movge	r3, #0
 800804c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008050:	f8c8 3000 	strge.w	r3, [r8]
 8008054:	4b9a      	ldr	r3, [pc, #616]	; (80082c0 <_dtoa_r+0x2d8>)
 8008056:	bfbc      	itt	lt
 8008058:	2201      	movlt	r2, #1
 800805a:	f8c8 2000 	strlt.w	r2, [r8]
 800805e:	ea33 030b 	bics.w	r3, r3, fp
 8008062:	d11b      	bne.n	800809c <_dtoa_r+0xb4>
 8008064:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008066:	f242 730f 	movw	r3, #9999	; 0x270f
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008070:	4333      	orrs	r3, r6
 8008072:	f000 8592 	beq.w	8008b9a <_dtoa_r+0xbb2>
 8008076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008078:	b963      	cbnz	r3, 8008094 <_dtoa_r+0xac>
 800807a:	4b92      	ldr	r3, [pc, #584]	; (80082c4 <_dtoa_r+0x2dc>)
 800807c:	e022      	b.n	80080c4 <_dtoa_r+0xdc>
 800807e:	4b92      	ldr	r3, [pc, #584]	; (80082c8 <_dtoa_r+0x2e0>)
 8008080:	9301      	str	r3, [sp, #4]
 8008082:	3308      	adds	r3, #8
 8008084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	9801      	ldr	r0, [sp, #4]
 800808a:	b013      	add	sp, #76	; 0x4c
 800808c:	ecbd 8b04 	vpop	{d8-d9}
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	4b8b      	ldr	r3, [pc, #556]	; (80082c4 <_dtoa_r+0x2dc>)
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	3303      	adds	r3, #3
 800809a:	e7f3      	b.n	8008084 <_dtoa_r+0x9c>
 800809c:	2200      	movs	r2, #0
 800809e:	2300      	movs	r3, #0
 80080a0:	4650      	mov	r0, sl
 80080a2:	4659      	mov	r1, fp
 80080a4:	f7f8 fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80080a8:	ec4b ab19 	vmov	d9, sl, fp
 80080ac:	4680      	mov	r8, r0
 80080ae:	b158      	cbz	r0, 80080c8 <_dtoa_r+0xe0>
 80080b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080b2:	2301      	movs	r3, #1
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 856b 	beq.w	8008b94 <_dtoa_r+0xbac>
 80080be:	4883      	ldr	r0, [pc, #524]	; (80082cc <_dtoa_r+0x2e4>)
 80080c0:	6018      	str	r0, [r3, #0]
 80080c2:	1e43      	subs	r3, r0, #1
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	e7df      	b.n	8008088 <_dtoa_r+0xa0>
 80080c8:	ec4b ab10 	vmov	d0, sl, fp
 80080cc:	aa10      	add	r2, sp, #64	; 0x40
 80080ce:	a911      	add	r1, sp, #68	; 0x44
 80080d0:	4620      	mov	r0, r4
 80080d2:	f001 fad9 	bl	8009688 <__d2b>
 80080d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80080da:	ee08 0a10 	vmov	s16, r0
 80080de:	2d00      	cmp	r5, #0
 80080e0:	f000 8084 	beq.w	80081ec <_dtoa_r+0x204>
 80080e4:	ee19 3a90 	vmov	r3, s19
 80080e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80080f0:	4656      	mov	r6, sl
 80080f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80080f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80080fe:	4b74      	ldr	r3, [pc, #464]	; (80082d0 <_dtoa_r+0x2e8>)
 8008100:	2200      	movs	r2, #0
 8008102:	4630      	mov	r0, r6
 8008104:	4639      	mov	r1, r7
 8008106:	f7f8 f8bf 	bl	8000288 <__aeabi_dsub>
 800810a:	a365      	add	r3, pc, #404	; (adr r3, 80082a0 <_dtoa_r+0x2b8>)
 800810c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008110:	f7f8 fa72 	bl	80005f8 <__aeabi_dmul>
 8008114:	a364      	add	r3, pc, #400	; (adr r3, 80082a8 <_dtoa_r+0x2c0>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	f7f8 f8b7 	bl	800028c <__adddf3>
 800811e:	4606      	mov	r6, r0
 8008120:	4628      	mov	r0, r5
 8008122:	460f      	mov	r7, r1
 8008124:	f7f8 f9fe 	bl	8000524 <__aeabi_i2d>
 8008128:	a361      	add	r3, pc, #388	; (adr r3, 80082b0 <_dtoa_r+0x2c8>)
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f7f8 fa63 	bl	80005f8 <__aeabi_dmul>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4630      	mov	r0, r6
 8008138:	4639      	mov	r1, r7
 800813a:	f7f8 f8a7 	bl	800028c <__adddf3>
 800813e:	4606      	mov	r6, r0
 8008140:	460f      	mov	r7, r1
 8008142:	f7f8 fd09 	bl	8000b58 <__aeabi_d2iz>
 8008146:	2200      	movs	r2, #0
 8008148:	9000      	str	r0, [sp, #0]
 800814a:	2300      	movs	r3, #0
 800814c:	4630      	mov	r0, r6
 800814e:	4639      	mov	r1, r7
 8008150:	f7f8 fcc4 	bl	8000adc <__aeabi_dcmplt>
 8008154:	b150      	cbz	r0, 800816c <_dtoa_r+0x184>
 8008156:	9800      	ldr	r0, [sp, #0]
 8008158:	f7f8 f9e4 	bl	8000524 <__aeabi_i2d>
 800815c:	4632      	mov	r2, r6
 800815e:	463b      	mov	r3, r7
 8008160:	f7f8 fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008164:	b910      	cbnz	r0, 800816c <_dtoa_r+0x184>
 8008166:	9b00      	ldr	r3, [sp, #0]
 8008168:	3b01      	subs	r3, #1
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	9b00      	ldr	r3, [sp, #0]
 800816e:	2b16      	cmp	r3, #22
 8008170:	d85a      	bhi.n	8008228 <_dtoa_r+0x240>
 8008172:	9a00      	ldr	r2, [sp, #0]
 8008174:	4b57      	ldr	r3, [pc, #348]	; (80082d4 <_dtoa_r+0x2ec>)
 8008176:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	ec51 0b19 	vmov	r0, r1, d9
 8008182:	f7f8 fcab 	bl	8000adc <__aeabi_dcmplt>
 8008186:	2800      	cmp	r0, #0
 8008188:	d050      	beq.n	800822c <_dtoa_r+0x244>
 800818a:	9b00      	ldr	r3, [sp, #0]
 800818c:	3b01      	subs	r3, #1
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	2300      	movs	r3, #0
 8008192:	930b      	str	r3, [sp, #44]	; 0x2c
 8008194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008196:	1b5d      	subs	r5, r3, r5
 8008198:	1e6b      	subs	r3, r5, #1
 800819a:	9305      	str	r3, [sp, #20]
 800819c:	bf45      	ittet	mi
 800819e:	f1c5 0301 	rsbmi	r3, r5, #1
 80081a2:	9304      	strmi	r3, [sp, #16]
 80081a4:	2300      	movpl	r3, #0
 80081a6:	2300      	movmi	r3, #0
 80081a8:	bf4c      	ite	mi
 80081aa:	9305      	strmi	r3, [sp, #20]
 80081ac:	9304      	strpl	r3, [sp, #16]
 80081ae:	9b00      	ldr	r3, [sp, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	db3d      	blt.n	8008230 <_dtoa_r+0x248>
 80081b4:	9b05      	ldr	r3, [sp, #20]
 80081b6:	9a00      	ldr	r2, [sp, #0]
 80081b8:	920a      	str	r2, [sp, #40]	; 0x28
 80081ba:	4413      	add	r3, r2
 80081bc:	9305      	str	r3, [sp, #20]
 80081be:	2300      	movs	r3, #0
 80081c0:	9307      	str	r3, [sp, #28]
 80081c2:	9b06      	ldr	r3, [sp, #24]
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	f200 8089 	bhi.w	80082dc <_dtoa_r+0x2f4>
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	bfc4      	itt	gt
 80081ce:	3b04      	subgt	r3, #4
 80081d0:	9306      	strgt	r3, [sp, #24]
 80081d2:	9b06      	ldr	r3, [sp, #24]
 80081d4:	f1a3 0302 	sub.w	r3, r3, #2
 80081d8:	bfcc      	ite	gt
 80081da:	2500      	movgt	r5, #0
 80081dc:	2501      	movle	r5, #1
 80081de:	2b03      	cmp	r3, #3
 80081e0:	f200 8087 	bhi.w	80082f2 <_dtoa_r+0x30a>
 80081e4:	e8df f003 	tbb	[pc, r3]
 80081e8:	59383a2d 	.word	0x59383a2d
 80081ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80081f0:	441d      	add	r5, r3
 80081f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	bfc1      	itttt	gt
 80081fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008202:	fa0b f303 	lslgt.w	r3, fp, r3
 8008206:	fa26 f000 	lsrgt.w	r0, r6, r0
 800820a:	bfda      	itte	le
 800820c:	f1c3 0320 	rsble	r3, r3, #32
 8008210:	fa06 f003 	lslle.w	r0, r6, r3
 8008214:	4318      	orrgt	r0, r3
 8008216:	f7f8 f975 	bl	8000504 <__aeabi_ui2d>
 800821a:	2301      	movs	r3, #1
 800821c:	4606      	mov	r6, r0
 800821e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008222:	3d01      	subs	r5, #1
 8008224:	930e      	str	r3, [sp, #56]	; 0x38
 8008226:	e76a      	b.n	80080fe <_dtoa_r+0x116>
 8008228:	2301      	movs	r3, #1
 800822a:	e7b2      	b.n	8008192 <_dtoa_r+0x1aa>
 800822c:	900b      	str	r0, [sp, #44]	; 0x2c
 800822e:	e7b1      	b.n	8008194 <_dtoa_r+0x1ac>
 8008230:	9b04      	ldr	r3, [sp, #16]
 8008232:	9a00      	ldr	r2, [sp, #0]
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	9304      	str	r3, [sp, #16]
 8008238:	4253      	negs	r3, r2
 800823a:	9307      	str	r3, [sp, #28]
 800823c:	2300      	movs	r3, #0
 800823e:	930a      	str	r3, [sp, #40]	; 0x28
 8008240:	e7bf      	b.n	80081c2 <_dtoa_r+0x1da>
 8008242:	2300      	movs	r3, #0
 8008244:	9308      	str	r3, [sp, #32]
 8008246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008248:	2b00      	cmp	r3, #0
 800824a:	dc55      	bgt.n	80082f8 <_dtoa_r+0x310>
 800824c:	2301      	movs	r3, #1
 800824e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008252:	461a      	mov	r2, r3
 8008254:	9209      	str	r2, [sp, #36]	; 0x24
 8008256:	e00c      	b.n	8008272 <_dtoa_r+0x28a>
 8008258:	2301      	movs	r3, #1
 800825a:	e7f3      	b.n	8008244 <_dtoa_r+0x25c>
 800825c:	2300      	movs	r3, #0
 800825e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008260:	9308      	str	r3, [sp, #32]
 8008262:	9b00      	ldr	r3, [sp, #0]
 8008264:	4413      	add	r3, r2
 8008266:	9302      	str	r3, [sp, #8]
 8008268:	3301      	adds	r3, #1
 800826a:	2b01      	cmp	r3, #1
 800826c:	9303      	str	r3, [sp, #12]
 800826e:	bfb8      	it	lt
 8008270:	2301      	movlt	r3, #1
 8008272:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008274:	2200      	movs	r2, #0
 8008276:	6042      	str	r2, [r0, #4]
 8008278:	2204      	movs	r2, #4
 800827a:	f102 0614 	add.w	r6, r2, #20
 800827e:	429e      	cmp	r6, r3
 8008280:	6841      	ldr	r1, [r0, #4]
 8008282:	d93d      	bls.n	8008300 <_dtoa_r+0x318>
 8008284:	4620      	mov	r0, r4
 8008286:	f000 fed7 	bl	8009038 <_Balloc>
 800828a:	9001      	str	r0, [sp, #4]
 800828c:	2800      	cmp	r0, #0
 800828e:	d13b      	bne.n	8008308 <_dtoa_r+0x320>
 8008290:	4b11      	ldr	r3, [pc, #68]	; (80082d8 <_dtoa_r+0x2f0>)
 8008292:	4602      	mov	r2, r0
 8008294:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008298:	e6c0      	b.n	800801c <_dtoa_r+0x34>
 800829a:	2301      	movs	r3, #1
 800829c:	e7df      	b.n	800825e <_dtoa_r+0x276>
 800829e:	bf00      	nop
 80082a0:	636f4361 	.word	0x636f4361
 80082a4:	3fd287a7 	.word	0x3fd287a7
 80082a8:	8b60c8b3 	.word	0x8b60c8b3
 80082ac:	3fc68a28 	.word	0x3fc68a28
 80082b0:	509f79fb 	.word	0x509f79fb
 80082b4:	3fd34413 	.word	0x3fd34413
 80082b8:	0800a1dd 	.word	0x0800a1dd
 80082bc:	0800a1f4 	.word	0x0800a1f4
 80082c0:	7ff00000 	.word	0x7ff00000
 80082c4:	0800a1d9 	.word	0x0800a1d9
 80082c8:	0800a1d0 	.word	0x0800a1d0
 80082cc:	0800a1ad 	.word	0x0800a1ad
 80082d0:	3ff80000 	.word	0x3ff80000
 80082d4:	0800a348 	.word	0x0800a348
 80082d8:	0800a24f 	.word	0x0800a24f
 80082dc:	2501      	movs	r5, #1
 80082de:	2300      	movs	r3, #0
 80082e0:	9306      	str	r3, [sp, #24]
 80082e2:	9508      	str	r5, [sp, #32]
 80082e4:	f04f 33ff 	mov.w	r3, #4294967295
 80082e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082ec:	2200      	movs	r2, #0
 80082ee:	2312      	movs	r3, #18
 80082f0:	e7b0      	b.n	8008254 <_dtoa_r+0x26c>
 80082f2:	2301      	movs	r3, #1
 80082f4:	9308      	str	r3, [sp, #32]
 80082f6:	e7f5      	b.n	80082e4 <_dtoa_r+0x2fc>
 80082f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082fe:	e7b8      	b.n	8008272 <_dtoa_r+0x28a>
 8008300:	3101      	adds	r1, #1
 8008302:	6041      	str	r1, [r0, #4]
 8008304:	0052      	lsls	r2, r2, #1
 8008306:	e7b8      	b.n	800827a <_dtoa_r+0x292>
 8008308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800830a:	9a01      	ldr	r2, [sp, #4]
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	9b03      	ldr	r3, [sp, #12]
 8008310:	2b0e      	cmp	r3, #14
 8008312:	f200 809d 	bhi.w	8008450 <_dtoa_r+0x468>
 8008316:	2d00      	cmp	r5, #0
 8008318:	f000 809a 	beq.w	8008450 <_dtoa_r+0x468>
 800831c:	9b00      	ldr	r3, [sp, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd32      	ble.n	8008388 <_dtoa_r+0x3a0>
 8008322:	4ab7      	ldr	r2, [pc, #732]	; (8008600 <_dtoa_r+0x618>)
 8008324:	f003 030f 	and.w	r3, r3, #15
 8008328:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800832c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008330:	9b00      	ldr	r3, [sp, #0]
 8008332:	05d8      	lsls	r0, r3, #23
 8008334:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008338:	d516      	bpl.n	8008368 <_dtoa_r+0x380>
 800833a:	4bb2      	ldr	r3, [pc, #712]	; (8008604 <_dtoa_r+0x61c>)
 800833c:	ec51 0b19 	vmov	r0, r1, d9
 8008340:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008344:	f7f8 fa82 	bl	800084c <__aeabi_ddiv>
 8008348:	f007 070f 	and.w	r7, r7, #15
 800834c:	4682      	mov	sl, r0
 800834e:	468b      	mov	fp, r1
 8008350:	2503      	movs	r5, #3
 8008352:	4eac      	ldr	r6, [pc, #688]	; (8008604 <_dtoa_r+0x61c>)
 8008354:	b957      	cbnz	r7, 800836c <_dtoa_r+0x384>
 8008356:	4642      	mov	r2, r8
 8008358:	464b      	mov	r3, r9
 800835a:	4650      	mov	r0, sl
 800835c:	4659      	mov	r1, fp
 800835e:	f7f8 fa75 	bl	800084c <__aeabi_ddiv>
 8008362:	4682      	mov	sl, r0
 8008364:	468b      	mov	fp, r1
 8008366:	e028      	b.n	80083ba <_dtoa_r+0x3d2>
 8008368:	2502      	movs	r5, #2
 800836a:	e7f2      	b.n	8008352 <_dtoa_r+0x36a>
 800836c:	07f9      	lsls	r1, r7, #31
 800836e:	d508      	bpl.n	8008382 <_dtoa_r+0x39a>
 8008370:	4640      	mov	r0, r8
 8008372:	4649      	mov	r1, r9
 8008374:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008378:	f7f8 f93e 	bl	80005f8 <__aeabi_dmul>
 800837c:	3501      	adds	r5, #1
 800837e:	4680      	mov	r8, r0
 8008380:	4689      	mov	r9, r1
 8008382:	107f      	asrs	r7, r7, #1
 8008384:	3608      	adds	r6, #8
 8008386:	e7e5      	b.n	8008354 <_dtoa_r+0x36c>
 8008388:	f000 809b 	beq.w	80084c2 <_dtoa_r+0x4da>
 800838c:	9b00      	ldr	r3, [sp, #0]
 800838e:	4f9d      	ldr	r7, [pc, #628]	; (8008604 <_dtoa_r+0x61c>)
 8008390:	425e      	negs	r6, r3
 8008392:	4b9b      	ldr	r3, [pc, #620]	; (8008600 <_dtoa_r+0x618>)
 8008394:	f006 020f 	and.w	r2, r6, #15
 8008398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	ec51 0b19 	vmov	r0, r1, d9
 80083a4:	f7f8 f928 	bl	80005f8 <__aeabi_dmul>
 80083a8:	1136      	asrs	r6, r6, #4
 80083aa:	4682      	mov	sl, r0
 80083ac:	468b      	mov	fp, r1
 80083ae:	2300      	movs	r3, #0
 80083b0:	2502      	movs	r5, #2
 80083b2:	2e00      	cmp	r6, #0
 80083b4:	d17a      	bne.n	80084ac <_dtoa_r+0x4c4>
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1d3      	bne.n	8008362 <_dtoa_r+0x37a>
 80083ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f000 8082 	beq.w	80084c6 <_dtoa_r+0x4de>
 80083c2:	4b91      	ldr	r3, [pc, #580]	; (8008608 <_dtoa_r+0x620>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	4650      	mov	r0, sl
 80083c8:	4659      	mov	r1, fp
 80083ca:	f7f8 fb87 	bl	8000adc <__aeabi_dcmplt>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d079      	beq.n	80084c6 <_dtoa_r+0x4de>
 80083d2:	9b03      	ldr	r3, [sp, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d076      	beq.n	80084c6 <_dtoa_r+0x4de>
 80083d8:	9b02      	ldr	r3, [sp, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dd36      	ble.n	800844c <_dtoa_r+0x464>
 80083de:	9b00      	ldr	r3, [sp, #0]
 80083e0:	4650      	mov	r0, sl
 80083e2:	4659      	mov	r1, fp
 80083e4:	1e5f      	subs	r7, r3, #1
 80083e6:	2200      	movs	r2, #0
 80083e8:	4b88      	ldr	r3, [pc, #544]	; (800860c <_dtoa_r+0x624>)
 80083ea:	f7f8 f905 	bl	80005f8 <__aeabi_dmul>
 80083ee:	9e02      	ldr	r6, [sp, #8]
 80083f0:	4682      	mov	sl, r0
 80083f2:	468b      	mov	fp, r1
 80083f4:	3501      	adds	r5, #1
 80083f6:	4628      	mov	r0, r5
 80083f8:	f7f8 f894 	bl	8000524 <__aeabi_i2d>
 80083fc:	4652      	mov	r2, sl
 80083fe:	465b      	mov	r3, fp
 8008400:	f7f8 f8fa 	bl	80005f8 <__aeabi_dmul>
 8008404:	4b82      	ldr	r3, [pc, #520]	; (8008610 <_dtoa_r+0x628>)
 8008406:	2200      	movs	r2, #0
 8008408:	f7f7 ff40 	bl	800028c <__adddf3>
 800840c:	46d0      	mov	r8, sl
 800840e:	46d9      	mov	r9, fp
 8008410:	4682      	mov	sl, r0
 8008412:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008416:	2e00      	cmp	r6, #0
 8008418:	d158      	bne.n	80084cc <_dtoa_r+0x4e4>
 800841a:	4b7e      	ldr	r3, [pc, #504]	; (8008614 <_dtoa_r+0x62c>)
 800841c:	2200      	movs	r2, #0
 800841e:	4640      	mov	r0, r8
 8008420:	4649      	mov	r1, r9
 8008422:	f7f7 ff31 	bl	8000288 <__aeabi_dsub>
 8008426:	4652      	mov	r2, sl
 8008428:	465b      	mov	r3, fp
 800842a:	4680      	mov	r8, r0
 800842c:	4689      	mov	r9, r1
 800842e:	f7f8 fb73 	bl	8000b18 <__aeabi_dcmpgt>
 8008432:	2800      	cmp	r0, #0
 8008434:	f040 8295 	bne.w	8008962 <_dtoa_r+0x97a>
 8008438:	4652      	mov	r2, sl
 800843a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800843e:	4640      	mov	r0, r8
 8008440:	4649      	mov	r1, r9
 8008442:	f7f8 fb4b 	bl	8000adc <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	f040 8289 	bne.w	800895e <_dtoa_r+0x976>
 800844c:	ec5b ab19 	vmov	sl, fp, d9
 8008450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008452:	2b00      	cmp	r3, #0
 8008454:	f2c0 8148 	blt.w	80086e8 <_dtoa_r+0x700>
 8008458:	9a00      	ldr	r2, [sp, #0]
 800845a:	2a0e      	cmp	r2, #14
 800845c:	f300 8144 	bgt.w	80086e8 <_dtoa_r+0x700>
 8008460:	4b67      	ldr	r3, [pc, #412]	; (8008600 <_dtoa_r+0x618>)
 8008462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008466:	e9d3 8900 	ldrd	r8, r9, [r3]
 800846a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	f280 80d5 	bge.w	800861c <_dtoa_r+0x634>
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	f300 80d1 	bgt.w	800861c <_dtoa_r+0x634>
 800847a:	f040 826f 	bne.w	800895c <_dtoa_r+0x974>
 800847e:	4b65      	ldr	r3, [pc, #404]	; (8008614 <_dtoa_r+0x62c>)
 8008480:	2200      	movs	r2, #0
 8008482:	4640      	mov	r0, r8
 8008484:	4649      	mov	r1, r9
 8008486:	f7f8 f8b7 	bl	80005f8 <__aeabi_dmul>
 800848a:	4652      	mov	r2, sl
 800848c:	465b      	mov	r3, fp
 800848e:	f7f8 fb39 	bl	8000b04 <__aeabi_dcmpge>
 8008492:	9e03      	ldr	r6, [sp, #12]
 8008494:	4637      	mov	r7, r6
 8008496:	2800      	cmp	r0, #0
 8008498:	f040 8245 	bne.w	8008926 <_dtoa_r+0x93e>
 800849c:	9d01      	ldr	r5, [sp, #4]
 800849e:	2331      	movs	r3, #49	; 0x31
 80084a0:	f805 3b01 	strb.w	r3, [r5], #1
 80084a4:	9b00      	ldr	r3, [sp, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	e240      	b.n	800892e <_dtoa_r+0x946>
 80084ac:	07f2      	lsls	r2, r6, #31
 80084ae:	d505      	bpl.n	80084bc <_dtoa_r+0x4d4>
 80084b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b4:	f7f8 f8a0 	bl	80005f8 <__aeabi_dmul>
 80084b8:	3501      	adds	r5, #1
 80084ba:	2301      	movs	r3, #1
 80084bc:	1076      	asrs	r6, r6, #1
 80084be:	3708      	adds	r7, #8
 80084c0:	e777      	b.n	80083b2 <_dtoa_r+0x3ca>
 80084c2:	2502      	movs	r5, #2
 80084c4:	e779      	b.n	80083ba <_dtoa_r+0x3d2>
 80084c6:	9f00      	ldr	r7, [sp, #0]
 80084c8:	9e03      	ldr	r6, [sp, #12]
 80084ca:	e794      	b.n	80083f6 <_dtoa_r+0x40e>
 80084cc:	9901      	ldr	r1, [sp, #4]
 80084ce:	4b4c      	ldr	r3, [pc, #304]	; (8008600 <_dtoa_r+0x618>)
 80084d0:	4431      	add	r1, r6
 80084d2:	910d      	str	r1, [sp, #52]	; 0x34
 80084d4:	9908      	ldr	r1, [sp, #32]
 80084d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084de:	2900      	cmp	r1, #0
 80084e0:	d043      	beq.n	800856a <_dtoa_r+0x582>
 80084e2:	494d      	ldr	r1, [pc, #308]	; (8008618 <_dtoa_r+0x630>)
 80084e4:	2000      	movs	r0, #0
 80084e6:	f7f8 f9b1 	bl	800084c <__aeabi_ddiv>
 80084ea:	4652      	mov	r2, sl
 80084ec:	465b      	mov	r3, fp
 80084ee:	f7f7 fecb 	bl	8000288 <__aeabi_dsub>
 80084f2:	9d01      	ldr	r5, [sp, #4]
 80084f4:	4682      	mov	sl, r0
 80084f6:	468b      	mov	fp, r1
 80084f8:	4649      	mov	r1, r9
 80084fa:	4640      	mov	r0, r8
 80084fc:	f7f8 fb2c 	bl	8000b58 <__aeabi_d2iz>
 8008500:	4606      	mov	r6, r0
 8008502:	f7f8 f80f 	bl	8000524 <__aeabi_i2d>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4640      	mov	r0, r8
 800850c:	4649      	mov	r1, r9
 800850e:	f7f7 febb 	bl	8000288 <__aeabi_dsub>
 8008512:	3630      	adds	r6, #48	; 0x30
 8008514:	f805 6b01 	strb.w	r6, [r5], #1
 8008518:	4652      	mov	r2, sl
 800851a:	465b      	mov	r3, fp
 800851c:	4680      	mov	r8, r0
 800851e:	4689      	mov	r9, r1
 8008520:	f7f8 fadc 	bl	8000adc <__aeabi_dcmplt>
 8008524:	2800      	cmp	r0, #0
 8008526:	d163      	bne.n	80085f0 <_dtoa_r+0x608>
 8008528:	4642      	mov	r2, r8
 800852a:	464b      	mov	r3, r9
 800852c:	4936      	ldr	r1, [pc, #216]	; (8008608 <_dtoa_r+0x620>)
 800852e:	2000      	movs	r0, #0
 8008530:	f7f7 feaa 	bl	8000288 <__aeabi_dsub>
 8008534:	4652      	mov	r2, sl
 8008536:	465b      	mov	r3, fp
 8008538:	f7f8 fad0 	bl	8000adc <__aeabi_dcmplt>
 800853c:	2800      	cmp	r0, #0
 800853e:	f040 80b5 	bne.w	80086ac <_dtoa_r+0x6c4>
 8008542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008544:	429d      	cmp	r5, r3
 8008546:	d081      	beq.n	800844c <_dtoa_r+0x464>
 8008548:	4b30      	ldr	r3, [pc, #192]	; (800860c <_dtoa_r+0x624>)
 800854a:	2200      	movs	r2, #0
 800854c:	4650      	mov	r0, sl
 800854e:	4659      	mov	r1, fp
 8008550:	f7f8 f852 	bl	80005f8 <__aeabi_dmul>
 8008554:	4b2d      	ldr	r3, [pc, #180]	; (800860c <_dtoa_r+0x624>)
 8008556:	4682      	mov	sl, r0
 8008558:	468b      	mov	fp, r1
 800855a:	4640      	mov	r0, r8
 800855c:	4649      	mov	r1, r9
 800855e:	2200      	movs	r2, #0
 8008560:	f7f8 f84a 	bl	80005f8 <__aeabi_dmul>
 8008564:	4680      	mov	r8, r0
 8008566:	4689      	mov	r9, r1
 8008568:	e7c6      	b.n	80084f8 <_dtoa_r+0x510>
 800856a:	4650      	mov	r0, sl
 800856c:	4659      	mov	r1, fp
 800856e:	f7f8 f843 	bl	80005f8 <__aeabi_dmul>
 8008572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008574:	9d01      	ldr	r5, [sp, #4]
 8008576:	930f      	str	r3, [sp, #60]	; 0x3c
 8008578:	4682      	mov	sl, r0
 800857a:	468b      	mov	fp, r1
 800857c:	4649      	mov	r1, r9
 800857e:	4640      	mov	r0, r8
 8008580:	f7f8 faea 	bl	8000b58 <__aeabi_d2iz>
 8008584:	4606      	mov	r6, r0
 8008586:	f7f7 ffcd 	bl	8000524 <__aeabi_i2d>
 800858a:	3630      	adds	r6, #48	; 0x30
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	f7f7 fe78 	bl	8000288 <__aeabi_dsub>
 8008598:	f805 6b01 	strb.w	r6, [r5], #1
 800859c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800859e:	429d      	cmp	r5, r3
 80085a0:	4680      	mov	r8, r0
 80085a2:	4689      	mov	r9, r1
 80085a4:	f04f 0200 	mov.w	r2, #0
 80085a8:	d124      	bne.n	80085f4 <_dtoa_r+0x60c>
 80085aa:	4b1b      	ldr	r3, [pc, #108]	; (8008618 <_dtoa_r+0x630>)
 80085ac:	4650      	mov	r0, sl
 80085ae:	4659      	mov	r1, fp
 80085b0:	f7f7 fe6c 	bl	800028c <__adddf3>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4640      	mov	r0, r8
 80085ba:	4649      	mov	r1, r9
 80085bc:	f7f8 faac 	bl	8000b18 <__aeabi_dcmpgt>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d173      	bne.n	80086ac <_dtoa_r+0x6c4>
 80085c4:	4652      	mov	r2, sl
 80085c6:	465b      	mov	r3, fp
 80085c8:	4913      	ldr	r1, [pc, #76]	; (8008618 <_dtoa_r+0x630>)
 80085ca:	2000      	movs	r0, #0
 80085cc:	f7f7 fe5c 	bl	8000288 <__aeabi_dsub>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4640      	mov	r0, r8
 80085d6:	4649      	mov	r1, r9
 80085d8:	f7f8 fa80 	bl	8000adc <__aeabi_dcmplt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	f43f af35 	beq.w	800844c <_dtoa_r+0x464>
 80085e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085e4:	1e6b      	subs	r3, r5, #1
 80085e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085ec:	2b30      	cmp	r3, #48	; 0x30
 80085ee:	d0f8      	beq.n	80085e2 <_dtoa_r+0x5fa>
 80085f0:	9700      	str	r7, [sp, #0]
 80085f2:	e049      	b.n	8008688 <_dtoa_r+0x6a0>
 80085f4:	4b05      	ldr	r3, [pc, #20]	; (800860c <_dtoa_r+0x624>)
 80085f6:	f7f7 ffff 	bl	80005f8 <__aeabi_dmul>
 80085fa:	4680      	mov	r8, r0
 80085fc:	4689      	mov	r9, r1
 80085fe:	e7bd      	b.n	800857c <_dtoa_r+0x594>
 8008600:	0800a348 	.word	0x0800a348
 8008604:	0800a320 	.word	0x0800a320
 8008608:	3ff00000 	.word	0x3ff00000
 800860c:	40240000 	.word	0x40240000
 8008610:	401c0000 	.word	0x401c0000
 8008614:	40140000 	.word	0x40140000
 8008618:	3fe00000 	.word	0x3fe00000
 800861c:	9d01      	ldr	r5, [sp, #4]
 800861e:	4656      	mov	r6, sl
 8008620:	465f      	mov	r7, fp
 8008622:	4642      	mov	r2, r8
 8008624:	464b      	mov	r3, r9
 8008626:	4630      	mov	r0, r6
 8008628:	4639      	mov	r1, r7
 800862a:	f7f8 f90f 	bl	800084c <__aeabi_ddiv>
 800862e:	f7f8 fa93 	bl	8000b58 <__aeabi_d2iz>
 8008632:	4682      	mov	sl, r0
 8008634:	f7f7 ff76 	bl	8000524 <__aeabi_i2d>
 8008638:	4642      	mov	r2, r8
 800863a:	464b      	mov	r3, r9
 800863c:	f7f7 ffdc 	bl	80005f8 <__aeabi_dmul>
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4630      	mov	r0, r6
 8008646:	4639      	mov	r1, r7
 8008648:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800864c:	f7f7 fe1c 	bl	8000288 <__aeabi_dsub>
 8008650:	f805 6b01 	strb.w	r6, [r5], #1
 8008654:	9e01      	ldr	r6, [sp, #4]
 8008656:	9f03      	ldr	r7, [sp, #12]
 8008658:	1bae      	subs	r6, r5, r6
 800865a:	42b7      	cmp	r7, r6
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	d135      	bne.n	80086ce <_dtoa_r+0x6e6>
 8008662:	f7f7 fe13 	bl	800028c <__adddf3>
 8008666:	4642      	mov	r2, r8
 8008668:	464b      	mov	r3, r9
 800866a:	4606      	mov	r6, r0
 800866c:	460f      	mov	r7, r1
 800866e:	f7f8 fa53 	bl	8000b18 <__aeabi_dcmpgt>
 8008672:	b9d0      	cbnz	r0, 80086aa <_dtoa_r+0x6c2>
 8008674:	4642      	mov	r2, r8
 8008676:	464b      	mov	r3, r9
 8008678:	4630      	mov	r0, r6
 800867a:	4639      	mov	r1, r7
 800867c:	f7f8 fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 8008680:	b110      	cbz	r0, 8008688 <_dtoa_r+0x6a0>
 8008682:	f01a 0f01 	tst.w	sl, #1
 8008686:	d110      	bne.n	80086aa <_dtoa_r+0x6c2>
 8008688:	4620      	mov	r0, r4
 800868a:	ee18 1a10 	vmov	r1, s16
 800868e:	f000 fd13 	bl	80090b8 <_Bfree>
 8008692:	2300      	movs	r3, #0
 8008694:	9800      	ldr	r0, [sp, #0]
 8008696:	702b      	strb	r3, [r5, #0]
 8008698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800869a:	3001      	adds	r0, #1
 800869c:	6018      	str	r0, [r3, #0]
 800869e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f43f acf1 	beq.w	8008088 <_dtoa_r+0xa0>
 80086a6:	601d      	str	r5, [r3, #0]
 80086a8:	e4ee      	b.n	8008088 <_dtoa_r+0xa0>
 80086aa:	9f00      	ldr	r7, [sp, #0]
 80086ac:	462b      	mov	r3, r5
 80086ae:	461d      	mov	r5, r3
 80086b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086b4:	2a39      	cmp	r2, #57	; 0x39
 80086b6:	d106      	bne.n	80086c6 <_dtoa_r+0x6de>
 80086b8:	9a01      	ldr	r2, [sp, #4]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d1f7      	bne.n	80086ae <_dtoa_r+0x6c6>
 80086be:	9901      	ldr	r1, [sp, #4]
 80086c0:	2230      	movs	r2, #48	; 0x30
 80086c2:	3701      	adds	r7, #1
 80086c4:	700a      	strb	r2, [r1, #0]
 80086c6:	781a      	ldrb	r2, [r3, #0]
 80086c8:	3201      	adds	r2, #1
 80086ca:	701a      	strb	r2, [r3, #0]
 80086cc:	e790      	b.n	80085f0 <_dtoa_r+0x608>
 80086ce:	4ba6      	ldr	r3, [pc, #664]	; (8008968 <_dtoa_r+0x980>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	f7f7 ff91 	bl	80005f8 <__aeabi_dmul>
 80086d6:	2200      	movs	r2, #0
 80086d8:	2300      	movs	r3, #0
 80086da:	4606      	mov	r6, r0
 80086dc:	460f      	mov	r7, r1
 80086de:	f7f8 f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d09d      	beq.n	8008622 <_dtoa_r+0x63a>
 80086e6:	e7cf      	b.n	8008688 <_dtoa_r+0x6a0>
 80086e8:	9a08      	ldr	r2, [sp, #32]
 80086ea:	2a00      	cmp	r2, #0
 80086ec:	f000 80d7 	beq.w	800889e <_dtoa_r+0x8b6>
 80086f0:	9a06      	ldr	r2, [sp, #24]
 80086f2:	2a01      	cmp	r2, #1
 80086f4:	f300 80ba 	bgt.w	800886c <_dtoa_r+0x884>
 80086f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086fa:	2a00      	cmp	r2, #0
 80086fc:	f000 80b2 	beq.w	8008864 <_dtoa_r+0x87c>
 8008700:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008704:	9e07      	ldr	r6, [sp, #28]
 8008706:	9d04      	ldr	r5, [sp, #16]
 8008708:	9a04      	ldr	r2, [sp, #16]
 800870a:	441a      	add	r2, r3
 800870c:	9204      	str	r2, [sp, #16]
 800870e:	9a05      	ldr	r2, [sp, #20]
 8008710:	2101      	movs	r1, #1
 8008712:	441a      	add	r2, r3
 8008714:	4620      	mov	r0, r4
 8008716:	9205      	str	r2, [sp, #20]
 8008718:	f000 fd86 	bl	8009228 <__i2b>
 800871c:	4607      	mov	r7, r0
 800871e:	2d00      	cmp	r5, #0
 8008720:	dd0c      	ble.n	800873c <_dtoa_r+0x754>
 8008722:	9b05      	ldr	r3, [sp, #20]
 8008724:	2b00      	cmp	r3, #0
 8008726:	dd09      	ble.n	800873c <_dtoa_r+0x754>
 8008728:	42ab      	cmp	r3, r5
 800872a:	9a04      	ldr	r2, [sp, #16]
 800872c:	bfa8      	it	ge
 800872e:	462b      	movge	r3, r5
 8008730:	1ad2      	subs	r2, r2, r3
 8008732:	9204      	str	r2, [sp, #16]
 8008734:	9a05      	ldr	r2, [sp, #20]
 8008736:	1aed      	subs	r5, r5, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	9305      	str	r3, [sp, #20]
 800873c:	9b07      	ldr	r3, [sp, #28]
 800873e:	b31b      	cbz	r3, 8008788 <_dtoa_r+0x7a0>
 8008740:	9b08      	ldr	r3, [sp, #32]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 80af 	beq.w	80088a6 <_dtoa_r+0x8be>
 8008748:	2e00      	cmp	r6, #0
 800874a:	dd13      	ble.n	8008774 <_dtoa_r+0x78c>
 800874c:	4639      	mov	r1, r7
 800874e:	4632      	mov	r2, r6
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fe29 	bl	80093a8 <__pow5mult>
 8008756:	ee18 2a10 	vmov	r2, s16
 800875a:	4601      	mov	r1, r0
 800875c:	4607      	mov	r7, r0
 800875e:	4620      	mov	r0, r4
 8008760:	f000 fd78 	bl	8009254 <__multiply>
 8008764:	ee18 1a10 	vmov	r1, s16
 8008768:	4680      	mov	r8, r0
 800876a:	4620      	mov	r0, r4
 800876c:	f000 fca4 	bl	80090b8 <_Bfree>
 8008770:	ee08 8a10 	vmov	s16, r8
 8008774:	9b07      	ldr	r3, [sp, #28]
 8008776:	1b9a      	subs	r2, r3, r6
 8008778:	d006      	beq.n	8008788 <_dtoa_r+0x7a0>
 800877a:	ee18 1a10 	vmov	r1, s16
 800877e:	4620      	mov	r0, r4
 8008780:	f000 fe12 	bl	80093a8 <__pow5mult>
 8008784:	ee08 0a10 	vmov	s16, r0
 8008788:	2101      	movs	r1, #1
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fd4c 	bl	8009228 <__i2b>
 8008790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008792:	2b00      	cmp	r3, #0
 8008794:	4606      	mov	r6, r0
 8008796:	f340 8088 	ble.w	80088aa <_dtoa_r+0x8c2>
 800879a:	461a      	mov	r2, r3
 800879c:	4601      	mov	r1, r0
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 fe02 	bl	80093a8 <__pow5mult>
 80087a4:	9b06      	ldr	r3, [sp, #24]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	4606      	mov	r6, r0
 80087aa:	f340 8081 	ble.w	80088b0 <_dtoa_r+0x8c8>
 80087ae:	f04f 0800 	mov.w	r8, #0
 80087b2:	6933      	ldr	r3, [r6, #16]
 80087b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80087b8:	6918      	ldr	r0, [r3, #16]
 80087ba:	f000 fce5 	bl	8009188 <__hi0bits>
 80087be:	f1c0 0020 	rsb	r0, r0, #32
 80087c2:	9b05      	ldr	r3, [sp, #20]
 80087c4:	4418      	add	r0, r3
 80087c6:	f010 001f 	ands.w	r0, r0, #31
 80087ca:	f000 8092 	beq.w	80088f2 <_dtoa_r+0x90a>
 80087ce:	f1c0 0320 	rsb	r3, r0, #32
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	f340 808a 	ble.w	80088ec <_dtoa_r+0x904>
 80087d8:	f1c0 001c 	rsb	r0, r0, #28
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	4403      	add	r3, r0
 80087e0:	9304      	str	r3, [sp, #16]
 80087e2:	9b05      	ldr	r3, [sp, #20]
 80087e4:	4403      	add	r3, r0
 80087e6:	4405      	add	r5, r0
 80087e8:	9305      	str	r3, [sp, #20]
 80087ea:	9b04      	ldr	r3, [sp, #16]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dd07      	ble.n	8008800 <_dtoa_r+0x818>
 80087f0:	ee18 1a10 	vmov	r1, s16
 80087f4:	461a      	mov	r2, r3
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 fe30 	bl	800945c <__lshift>
 80087fc:	ee08 0a10 	vmov	s16, r0
 8008800:	9b05      	ldr	r3, [sp, #20]
 8008802:	2b00      	cmp	r3, #0
 8008804:	dd05      	ble.n	8008812 <_dtoa_r+0x82a>
 8008806:	4631      	mov	r1, r6
 8008808:	461a      	mov	r2, r3
 800880a:	4620      	mov	r0, r4
 800880c:	f000 fe26 	bl	800945c <__lshift>
 8008810:	4606      	mov	r6, r0
 8008812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008814:	2b00      	cmp	r3, #0
 8008816:	d06e      	beq.n	80088f6 <_dtoa_r+0x90e>
 8008818:	ee18 0a10 	vmov	r0, s16
 800881c:	4631      	mov	r1, r6
 800881e:	f000 fe8d 	bl	800953c <__mcmp>
 8008822:	2800      	cmp	r0, #0
 8008824:	da67      	bge.n	80088f6 <_dtoa_r+0x90e>
 8008826:	9b00      	ldr	r3, [sp, #0]
 8008828:	3b01      	subs	r3, #1
 800882a:	ee18 1a10 	vmov	r1, s16
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	220a      	movs	r2, #10
 8008832:	2300      	movs	r3, #0
 8008834:	4620      	mov	r0, r4
 8008836:	f000 fc61 	bl	80090fc <__multadd>
 800883a:	9b08      	ldr	r3, [sp, #32]
 800883c:	ee08 0a10 	vmov	s16, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 81b1 	beq.w	8008ba8 <_dtoa_r+0xbc0>
 8008846:	2300      	movs	r3, #0
 8008848:	4639      	mov	r1, r7
 800884a:	220a      	movs	r2, #10
 800884c:	4620      	mov	r0, r4
 800884e:	f000 fc55 	bl	80090fc <__multadd>
 8008852:	9b02      	ldr	r3, [sp, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	4607      	mov	r7, r0
 8008858:	f300 808e 	bgt.w	8008978 <_dtoa_r+0x990>
 800885c:	9b06      	ldr	r3, [sp, #24]
 800885e:	2b02      	cmp	r3, #2
 8008860:	dc51      	bgt.n	8008906 <_dtoa_r+0x91e>
 8008862:	e089      	b.n	8008978 <_dtoa_r+0x990>
 8008864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800886a:	e74b      	b.n	8008704 <_dtoa_r+0x71c>
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	1e5e      	subs	r6, r3, #1
 8008870:	9b07      	ldr	r3, [sp, #28]
 8008872:	42b3      	cmp	r3, r6
 8008874:	bfbf      	itttt	lt
 8008876:	9b07      	ldrlt	r3, [sp, #28]
 8008878:	9607      	strlt	r6, [sp, #28]
 800887a:	1af2      	sublt	r2, r6, r3
 800887c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800887e:	bfb6      	itet	lt
 8008880:	189b      	addlt	r3, r3, r2
 8008882:	1b9e      	subge	r6, r3, r6
 8008884:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	bfb8      	it	lt
 800888a:	2600      	movlt	r6, #0
 800888c:	2b00      	cmp	r3, #0
 800888e:	bfb7      	itett	lt
 8008890:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008894:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008898:	1a9d      	sublt	r5, r3, r2
 800889a:	2300      	movlt	r3, #0
 800889c:	e734      	b.n	8008708 <_dtoa_r+0x720>
 800889e:	9e07      	ldr	r6, [sp, #28]
 80088a0:	9d04      	ldr	r5, [sp, #16]
 80088a2:	9f08      	ldr	r7, [sp, #32]
 80088a4:	e73b      	b.n	800871e <_dtoa_r+0x736>
 80088a6:	9a07      	ldr	r2, [sp, #28]
 80088a8:	e767      	b.n	800877a <_dtoa_r+0x792>
 80088aa:	9b06      	ldr	r3, [sp, #24]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	dc18      	bgt.n	80088e2 <_dtoa_r+0x8fa>
 80088b0:	f1ba 0f00 	cmp.w	sl, #0
 80088b4:	d115      	bne.n	80088e2 <_dtoa_r+0x8fa>
 80088b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088ba:	b993      	cbnz	r3, 80088e2 <_dtoa_r+0x8fa>
 80088bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088c0:	0d1b      	lsrs	r3, r3, #20
 80088c2:	051b      	lsls	r3, r3, #20
 80088c4:	b183      	cbz	r3, 80088e8 <_dtoa_r+0x900>
 80088c6:	9b04      	ldr	r3, [sp, #16]
 80088c8:	3301      	adds	r3, #1
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	9b05      	ldr	r3, [sp, #20]
 80088ce:	3301      	adds	r3, #1
 80088d0:	9305      	str	r3, [sp, #20]
 80088d2:	f04f 0801 	mov.w	r8, #1
 80088d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f47f af6a 	bne.w	80087b2 <_dtoa_r+0x7ca>
 80088de:	2001      	movs	r0, #1
 80088e0:	e76f      	b.n	80087c2 <_dtoa_r+0x7da>
 80088e2:	f04f 0800 	mov.w	r8, #0
 80088e6:	e7f6      	b.n	80088d6 <_dtoa_r+0x8ee>
 80088e8:	4698      	mov	r8, r3
 80088ea:	e7f4      	b.n	80088d6 <_dtoa_r+0x8ee>
 80088ec:	f43f af7d 	beq.w	80087ea <_dtoa_r+0x802>
 80088f0:	4618      	mov	r0, r3
 80088f2:	301c      	adds	r0, #28
 80088f4:	e772      	b.n	80087dc <_dtoa_r+0x7f4>
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	dc37      	bgt.n	800896c <_dtoa_r+0x984>
 80088fc:	9b06      	ldr	r3, [sp, #24]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	dd34      	ble.n	800896c <_dtoa_r+0x984>
 8008902:	9b03      	ldr	r3, [sp, #12]
 8008904:	9302      	str	r3, [sp, #8]
 8008906:	9b02      	ldr	r3, [sp, #8]
 8008908:	b96b      	cbnz	r3, 8008926 <_dtoa_r+0x93e>
 800890a:	4631      	mov	r1, r6
 800890c:	2205      	movs	r2, #5
 800890e:	4620      	mov	r0, r4
 8008910:	f000 fbf4 	bl	80090fc <__multadd>
 8008914:	4601      	mov	r1, r0
 8008916:	4606      	mov	r6, r0
 8008918:	ee18 0a10 	vmov	r0, s16
 800891c:	f000 fe0e 	bl	800953c <__mcmp>
 8008920:	2800      	cmp	r0, #0
 8008922:	f73f adbb 	bgt.w	800849c <_dtoa_r+0x4b4>
 8008926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008928:	9d01      	ldr	r5, [sp, #4]
 800892a:	43db      	mvns	r3, r3
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	4631      	mov	r1, r6
 8008934:	4620      	mov	r0, r4
 8008936:	f000 fbbf 	bl	80090b8 <_Bfree>
 800893a:	2f00      	cmp	r7, #0
 800893c:	f43f aea4 	beq.w	8008688 <_dtoa_r+0x6a0>
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	d005      	beq.n	8008952 <_dtoa_r+0x96a>
 8008946:	45b8      	cmp	r8, r7
 8008948:	d003      	beq.n	8008952 <_dtoa_r+0x96a>
 800894a:	4641      	mov	r1, r8
 800894c:	4620      	mov	r0, r4
 800894e:	f000 fbb3 	bl	80090b8 <_Bfree>
 8008952:	4639      	mov	r1, r7
 8008954:	4620      	mov	r0, r4
 8008956:	f000 fbaf 	bl	80090b8 <_Bfree>
 800895a:	e695      	b.n	8008688 <_dtoa_r+0x6a0>
 800895c:	2600      	movs	r6, #0
 800895e:	4637      	mov	r7, r6
 8008960:	e7e1      	b.n	8008926 <_dtoa_r+0x93e>
 8008962:	9700      	str	r7, [sp, #0]
 8008964:	4637      	mov	r7, r6
 8008966:	e599      	b.n	800849c <_dtoa_r+0x4b4>
 8008968:	40240000 	.word	0x40240000
 800896c:	9b08      	ldr	r3, [sp, #32]
 800896e:	2b00      	cmp	r3, #0
 8008970:	f000 80ca 	beq.w	8008b08 <_dtoa_r+0xb20>
 8008974:	9b03      	ldr	r3, [sp, #12]
 8008976:	9302      	str	r3, [sp, #8]
 8008978:	2d00      	cmp	r5, #0
 800897a:	dd05      	ble.n	8008988 <_dtoa_r+0x9a0>
 800897c:	4639      	mov	r1, r7
 800897e:	462a      	mov	r2, r5
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fd6b 	bl	800945c <__lshift>
 8008986:	4607      	mov	r7, r0
 8008988:	f1b8 0f00 	cmp.w	r8, #0
 800898c:	d05b      	beq.n	8008a46 <_dtoa_r+0xa5e>
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fb51 	bl	8009038 <_Balloc>
 8008996:	4605      	mov	r5, r0
 8008998:	b928      	cbnz	r0, 80089a6 <_dtoa_r+0x9be>
 800899a:	4b87      	ldr	r3, [pc, #540]	; (8008bb8 <_dtoa_r+0xbd0>)
 800899c:	4602      	mov	r2, r0
 800899e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80089a2:	f7ff bb3b 	b.w	800801c <_dtoa_r+0x34>
 80089a6:	693a      	ldr	r2, [r7, #16]
 80089a8:	3202      	adds	r2, #2
 80089aa:	0092      	lsls	r2, r2, #2
 80089ac:	f107 010c 	add.w	r1, r7, #12
 80089b0:	300c      	adds	r0, #12
 80089b2:	f000 fb33 	bl	800901c <memcpy>
 80089b6:	2201      	movs	r2, #1
 80089b8:	4629      	mov	r1, r5
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 fd4e 	bl	800945c <__lshift>
 80089c0:	9b01      	ldr	r3, [sp, #4]
 80089c2:	f103 0901 	add.w	r9, r3, #1
 80089c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80089ca:	4413      	add	r3, r2
 80089cc:	9305      	str	r3, [sp, #20]
 80089ce:	f00a 0301 	and.w	r3, sl, #1
 80089d2:	46b8      	mov	r8, r7
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	4607      	mov	r7, r0
 80089d8:	4631      	mov	r1, r6
 80089da:	ee18 0a10 	vmov	r0, s16
 80089de:	f7ff fa77 	bl	8007ed0 <quorem>
 80089e2:	4641      	mov	r1, r8
 80089e4:	9002      	str	r0, [sp, #8]
 80089e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80089ea:	ee18 0a10 	vmov	r0, s16
 80089ee:	f000 fda5 	bl	800953c <__mcmp>
 80089f2:	463a      	mov	r2, r7
 80089f4:	9003      	str	r0, [sp, #12]
 80089f6:	4631      	mov	r1, r6
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fdbb 	bl	8009574 <__mdiff>
 80089fe:	68c2      	ldr	r2, [r0, #12]
 8008a00:	f109 3bff 	add.w	fp, r9, #4294967295
 8008a04:	4605      	mov	r5, r0
 8008a06:	bb02      	cbnz	r2, 8008a4a <_dtoa_r+0xa62>
 8008a08:	4601      	mov	r1, r0
 8008a0a:	ee18 0a10 	vmov	r0, s16
 8008a0e:	f000 fd95 	bl	800953c <__mcmp>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4629      	mov	r1, r5
 8008a16:	4620      	mov	r0, r4
 8008a18:	9207      	str	r2, [sp, #28]
 8008a1a:	f000 fb4d 	bl	80090b8 <_Bfree>
 8008a1e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008a22:	ea43 0102 	orr.w	r1, r3, r2
 8008a26:	9b04      	ldr	r3, [sp, #16]
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	464d      	mov	r5, r9
 8008a2c:	d10f      	bne.n	8008a4e <_dtoa_r+0xa66>
 8008a2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a32:	d02a      	beq.n	8008a8a <_dtoa_r+0xaa2>
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	dd02      	ble.n	8008a40 <_dtoa_r+0xa58>
 8008a3a:	9b02      	ldr	r3, [sp, #8]
 8008a3c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008a40:	f88b a000 	strb.w	sl, [fp]
 8008a44:	e775      	b.n	8008932 <_dtoa_r+0x94a>
 8008a46:	4638      	mov	r0, r7
 8008a48:	e7ba      	b.n	80089c0 <_dtoa_r+0x9d8>
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	e7e2      	b.n	8008a14 <_dtoa_r+0xa2c>
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	db04      	blt.n	8008a5e <_dtoa_r+0xa76>
 8008a54:	9906      	ldr	r1, [sp, #24]
 8008a56:	430b      	orrs	r3, r1
 8008a58:	9904      	ldr	r1, [sp, #16]
 8008a5a:	430b      	orrs	r3, r1
 8008a5c:	d122      	bne.n	8008aa4 <_dtoa_r+0xabc>
 8008a5e:	2a00      	cmp	r2, #0
 8008a60:	ddee      	ble.n	8008a40 <_dtoa_r+0xa58>
 8008a62:	ee18 1a10 	vmov	r1, s16
 8008a66:	2201      	movs	r2, #1
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f000 fcf7 	bl	800945c <__lshift>
 8008a6e:	4631      	mov	r1, r6
 8008a70:	ee08 0a10 	vmov	s16, r0
 8008a74:	f000 fd62 	bl	800953c <__mcmp>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	dc03      	bgt.n	8008a84 <_dtoa_r+0xa9c>
 8008a7c:	d1e0      	bne.n	8008a40 <_dtoa_r+0xa58>
 8008a7e:	f01a 0f01 	tst.w	sl, #1
 8008a82:	d0dd      	beq.n	8008a40 <_dtoa_r+0xa58>
 8008a84:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a88:	d1d7      	bne.n	8008a3a <_dtoa_r+0xa52>
 8008a8a:	2339      	movs	r3, #57	; 0x39
 8008a8c:	f88b 3000 	strb.w	r3, [fp]
 8008a90:	462b      	mov	r3, r5
 8008a92:	461d      	mov	r5, r3
 8008a94:	3b01      	subs	r3, #1
 8008a96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a9a:	2a39      	cmp	r2, #57	; 0x39
 8008a9c:	d071      	beq.n	8008b82 <_dtoa_r+0xb9a>
 8008a9e:	3201      	adds	r2, #1
 8008aa0:	701a      	strb	r2, [r3, #0]
 8008aa2:	e746      	b.n	8008932 <_dtoa_r+0x94a>
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	dd07      	ble.n	8008ab8 <_dtoa_r+0xad0>
 8008aa8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008aac:	d0ed      	beq.n	8008a8a <_dtoa_r+0xaa2>
 8008aae:	f10a 0301 	add.w	r3, sl, #1
 8008ab2:	f88b 3000 	strb.w	r3, [fp]
 8008ab6:	e73c      	b.n	8008932 <_dtoa_r+0x94a>
 8008ab8:	9b05      	ldr	r3, [sp, #20]
 8008aba:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008abe:	4599      	cmp	r9, r3
 8008ac0:	d047      	beq.n	8008b52 <_dtoa_r+0xb6a>
 8008ac2:	ee18 1a10 	vmov	r1, s16
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	220a      	movs	r2, #10
 8008aca:	4620      	mov	r0, r4
 8008acc:	f000 fb16 	bl	80090fc <__multadd>
 8008ad0:	45b8      	cmp	r8, r7
 8008ad2:	ee08 0a10 	vmov	s16, r0
 8008ad6:	f04f 0300 	mov.w	r3, #0
 8008ada:	f04f 020a 	mov.w	r2, #10
 8008ade:	4641      	mov	r1, r8
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	d106      	bne.n	8008af2 <_dtoa_r+0xb0a>
 8008ae4:	f000 fb0a 	bl	80090fc <__multadd>
 8008ae8:	4680      	mov	r8, r0
 8008aea:	4607      	mov	r7, r0
 8008aec:	f109 0901 	add.w	r9, r9, #1
 8008af0:	e772      	b.n	80089d8 <_dtoa_r+0x9f0>
 8008af2:	f000 fb03 	bl	80090fc <__multadd>
 8008af6:	4639      	mov	r1, r7
 8008af8:	4680      	mov	r8, r0
 8008afa:	2300      	movs	r3, #0
 8008afc:	220a      	movs	r2, #10
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 fafc 	bl	80090fc <__multadd>
 8008b04:	4607      	mov	r7, r0
 8008b06:	e7f1      	b.n	8008aec <_dtoa_r+0xb04>
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	9302      	str	r3, [sp, #8]
 8008b0c:	9d01      	ldr	r5, [sp, #4]
 8008b0e:	ee18 0a10 	vmov	r0, s16
 8008b12:	4631      	mov	r1, r6
 8008b14:	f7ff f9dc 	bl	8007ed0 <quorem>
 8008b18:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	f805 ab01 	strb.w	sl, [r5], #1
 8008b22:	1aea      	subs	r2, r5, r3
 8008b24:	9b02      	ldr	r3, [sp, #8]
 8008b26:	4293      	cmp	r3, r2
 8008b28:	dd09      	ble.n	8008b3e <_dtoa_r+0xb56>
 8008b2a:	ee18 1a10 	vmov	r1, s16
 8008b2e:	2300      	movs	r3, #0
 8008b30:	220a      	movs	r2, #10
 8008b32:	4620      	mov	r0, r4
 8008b34:	f000 fae2 	bl	80090fc <__multadd>
 8008b38:	ee08 0a10 	vmov	s16, r0
 8008b3c:	e7e7      	b.n	8008b0e <_dtoa_r+0xb26>
 8008b3e:	9b02      	ldr	r3, [sp, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	bfc8      	it	gt
 8008b44:	461d      	movgt	r5, r3
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	bfd8      	it	le
 8008b4a:	2501      	movle	r5, #1
 8008b4c:	441d      	add	r5, r3
 8008b4e:	f04f 0800 	mov.w	r8, #0
 8008b52:	ee18 1a10 	vmov	r1, s16
 8008b56:	2201      	movs	r2, #1
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 fc7f 	bl	800945c <__lshift>
 8008b5e:	4631      	mov	r1, r6
 8008b60:	ee08 0a10 	vmov	s16, r0
 8008b64:	f000 fcea 	bl	800953c <__mcmp>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	dc91      	bgt.n	8008a90 <_dtoa_r+0xaa8>
 8008b6c:	d102      	bne.n	8008b74 <_dtoa_r+0xb8c>
 8008b6e:	f01a 0f01 	tst.w	sl, #1
 8008b72:	d18d      	bne.n	8008a90 <_dtoa_r+0xaa8>
 8008b74:	462b      	mov	r3, r5
 8008b76:	461d      	mov	r5, r3
 8008b78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b7c:	2a30      	cmp	r2, #48	; 0x30
 8008b7e:	d0fa      	beq.n	8008b76 <_dtoa_r+0xb8e>
 8008b80:	e6d7      	b.n	8008932 <_dtoa_r+0x94a>
 8008b82:	9a01      	ldr	r2, [sp, #4]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d184      	bne.n	8008a92 <_dtoa_r+0xaaa>
 8008b88:	9b00      	ldr	r3, [sp, #0]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	2331      	movs	r3, #49	; 0x31
 8008b90:	7013      	strb	r3, [r2, #0]
 8008b92:	e6ce      	b.n	8008932 <_dtoa_r+0x94a>
 8008b94:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <_dtoa_r+0xbd4>)
 8008b96:	f7ff ba95 	b.w	80080c4 <_dtoa_r+0xdc>
 8008b9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f47f aa6e 	bne.w	800807e <_dtoa_r+0x96>
 8008ba2:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <_dtoa_r+0xbd8>)
 8008ba4:	f7ff ba8e 	b.w	80080c4 <_dtoa_r+0xdc>
 8008ba8:	9b02      	ldr	r3, [sp, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dcae      	bgt.n	8008b0c <_dtoa_r+0xb24>
 8008bae:	9b06      	ldr	r3, [sp, #24]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	f73f aea8 	bgt.w	8008906 <_dtoa_r+0x91e>
 8008bb6:	e7a9      	b.n	8008b0c <_dtoa_r+0xb24>
 8008bb8:	0800a24f 	.word	0x0800a24f
 8008bbc:	0800a1ac 	.word	0x0800a1ac
 8008bc0:	0800a1d0 	.word	0x0800a1d0

08008bc4 <__sflush_r>:
 8008bc4:	898a      	ldrh	r2, [r1, #12]
 8008bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bca:	4605      	mov	r5, r0
 8008bcc:	0710      	lsls	r0, r2, #28
 8008bce:	460c      	mov	r4, r1
 8008bd0:	d458      	bmi.n	8008c84 <__sflush_r+0xc0>
 8008bd2:	684b      	ldr	r3, [r1, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	dc05      	bgt.n	8008be4 <__sflush_r+0x20>
 8008bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	dc02      	bgt.n	8008be4 <__sflush_r+0x20>
 8008bde:	2000      	movs	r0, #0
 8008be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008be6:	2e00      	cmp	r6, #0
 8008be8:	d0f9      	beq.n	8008bde <__sflush_r+0x1a>
 8008bea:	2300      	movs	r3, #0
 8008bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bf0:	682f      	ldr	r7, [r5, #0]
 8008bf2:	602b      	str	r3, [r5, #0]
 8008bf4:	d032      	beq.n	8008c5c <__sflush_r+0x98>
 8008bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	075a      	lsls	r2, r3, #29
 8008bfc:	d505      	bpl.n	8008c0a <__sflush_r+0x46>
 8008bfe:	6863      	ldr	r3, [r4, #4]
 8008c00:	1ac0      	subs	r0, r0, r3
 8008c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c04:	b10b      	cbz	r3, 8008c0a <__sflush_r+0x46>
 8008c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c08:	1ac0      	subs	r0, r0, r3
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c10:	6a21      	ldr	r1, [r4, #32]
 8008c12:	4628      	mov	r0, r5
 8008c14:	47b0      	blx	r6
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	d106      	bne.n	8008c2a <__sflush_r+0x66>
 8008c1c:	6829      	ldr	r1, [r5, #0]
 8008c1e:	291d      	cmp	r1, #29
 8008c20:	d82c      	bhi.n	8008c7c <__sflush_r+0xb8>
 8008c22:	4a2a      	ldr	r2, [pc, #168]	; (8008ccc <__sflush_r+0x108>)
 8008c24:	40ca      	lsrs	r2, r1
 8008c26:	07d6      	lsls	r6, r2, #31
 8008c28:	d528      	bpl.n	8008c7c <__sflush_r+0xb8>
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	6062      	str	r2, [r4, #4]
 8008c2e:	04d9      	lsls	r1, r3, #19
 8008c30:	6922      	ldr	r2, [r4, #16]
 8008c32:	6022      	str	r2, [r4, #0]
 8008c34:	d504      	bpl.n	8008c40 <__sflush_r+0x7c>
 8008c36:	1c42      	adds	r2, r0, #1
 8008c38:	d101      	bne.n	8008c3e <__sflush_r+0x7a>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b903      	cbnz	r3, 8008c40 <__sflush_r+0x7c>
 8008c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8008c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c42:	602f      	str	r7, [r5, #0]
 8008c44:	2900      	cmp	r1, #0
 8008c46:	d0ca      	beq.n	8008bde <__sflush_r+0x1a>
 8008c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c4c:	4299      	cmp	r1, r3
 8008c4e:	d002      	beq.n	8008c56 <__sflush_r+0x92>
 8008c50:	4628      	mov	r0, r5
 8008c52:	f000 fd8b 	bl	800976c <_free_r>
 8008c56:	2000      	movs	r0, #0
 8008c58:	6360      	str	r0, [r4, #52]	; 0x34
 8008c5a:	e7c1      	b.n	8008be0 <__sflush_r+0x1c>
 8008c5c:	6a21      	ldr	r1, [r4, #32]
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b0      	blx	r6
 8008c64:	1c41      	adds	r1, r0, #1
 8008c66:	d1c7      	bne.n	8008bf8 <__sflush_r+0x34>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0c4      	beq.n	8008bf8 <__sflush_r+0x34>
 8008c6e:	2b1d      	cmp	r3, #29
 8008c70:	d001      	beq.n	8008c76 <__sflush_r+0xb2>
 8008c72:	2b16      	cmp	r3, #22
 8008c74:	d101      	bne.n	8008c7a <__sflush_r+0xb6>
 8008c76:	602f      	str	r7, [r5, #0]
 8008c78:	e7b1      	b.n	8008bde <__sflush_r+0x1a>
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c80:	81a3      	strh	r3, [r4, #12]
 8008c82:	e7ad      	b.n	8008be0 <__sflush_r+0x1c>
 8008c84:	690f      	ldr	r7, [r1, #16]
 8008c86:	2f00      	cmp	r7, #0
 8008c88:	d0a9      	beq.n	8008bde <__sflush_r+0x1a>
 8008c8a:	0793      	lsls	r3, r2, #30
 8008c8c:	680e      	ldr	r6, [r1, #0]
 8008c8e:	bf08      	it	eq
 8008c90:	694b      	ldreq	r3, [r1, #20]
 8008c92:	600f      	str	r7, [r1, #0]
 8008c94:	bf18      	it	ne
 8008c96:	2300      	movne	r3, #0
 8008c98:	eba6 0807 	sub.w	r8, r6, r7
 8008c9c:	608b      	str	r3, [r1, #8]
 8008c9e:	f1b8 0f00 	cmp.w	r8, #0
 8008ca2:	dd9c      	ble.n	8008bde <__sflush_r+0x1a>
 8008ca4:	6a21      	ldr	r1, [r4, #32]
 8008ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ca8:	4643      	mov	r3, r8
 8008caa:	463a      	mov	r2, r7
 8008cac:	4628      	mov	r0, r5
 8008cae:	47b0      	blx	r6
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	dc06      	bgt.n	8008cc2 <__sflush_r+0xfe>
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cba:	81a3      	strh	r3, [r4, #12]
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	e78e      	b.n	8008be0 <__sflush_r+0x1c>
 8008cc2:	4407      	add	r7, r0
 8008cc4:	eba8 0800 	sub.w	r8, r8, r0
 8008cc8:	e7e9      	b.n	8008c9e <__sflush_r+0xda>
 8008cca:	bf00      	nop
 8008ccc:	20400001 	.word	0x20400001

08008cd0 <_fflush_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	690b      	ldr	r3, [r1, #16]
 8008cd4:	4605      	mov	r5, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	b913      	cbnz	r3, 8008ce0 <_fflush_r+0x10>
 8008cda:	2500      	movs	r5, #0
 8008cdc:	4628      	mov	r0, r5
 8008cde:	bd38      	pop	{r3, r4, r5, pc}
 8008ce0:	b118      	cbz	r0, 8008cea <_fflush_r+0x1a>
 8008ce2:	6983      	ldr	r3, [r0, #24]
 8008ce4:	b90b      	cbnz	r3, 8008cea <_fflush_r+0x1a>
 8008ce6:	f000 f887 	bl	8008df8 <__sinit>
 8008cea:	4b14      	ldr	r3, [pc, #80]	; (8008d3c <_fflush_r+0x6c>)
 8008cec:	429c      	cmp	r4, r3
 8008cee:	d11b      	bne.n	8008d28 <_fflush_r+0x58>
 8008cf0:	686c      	ldr	r4, [r5, #4]
 8008cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d0ef      	beq.n	8008cda <_fflush_r+0xa>
 8008cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cfc:	07d0      	lsls	r0, r2, #31
 8008cfe:	d404      	bmi.n	8008d0a <_fflush_r+0x3a>
 8008d00:	0599      	lsls	r1, r3, #22
 8008d02:	d402      	bmi.n	8008d0a <_fflush_r+0x3a>
 8008d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d06:	f000 f91a 	bl	8008f3e <__retarget_lock_acquire_recursive>
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	f7ff ff59 	bl	8008bc4 <__sflush_r>
 8008d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d14:	07da      	lsls	r2, r3, #31
 8008d16:	4605      	mov	r5, r0
 8008d18:	d4e0      	bmi.n	8008cdc <_fflush_r+0xc>
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	059b      	lsls	r3, r3, #22
 8008d1e:	d4dd      	bmi.n	8008cdc <_fflush_r+0xc>
 8008d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d22:	f000 f90d 	bl	8008f40 <__retarget_lock_release_recursive>
 8008d26:	e7d9      	b.n	8008cdc <_fflush_r+0xc>
 8008d28:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <_fflush_r+0x70>)
 8008d2a:	429c      	cmp	r4, r3
 8008d2c:	d101      	bne.n	8008d32 <_fflush_r+0x62>
 8008d2e:	68ac      	ldr	r4, [r5, #8]
 8008d30:	e7df      	b.n	8008cf2 <_fflush_r+0x22>
 8008d32:	4b04      	ldr	r3, [pc, #16]	; (8008d44 <_fflush_r+0x74>)
 8008d34:	429c      	cmp	r4, r3
 8008d36:	bf08      	it	eq
 8008d38:	68ec      	ldreq	r4, [r5, #12]
 8008d3a:	e7da      	b.n	8008cf2 <_fflush_r+0x22>
 8008d3c:	0800a280 	.word	0x0800a280
 8008d40:	0800a2a0 	.word	0x0800a2a0
 8008d44:	0800a260 	.word	0x0800a260

08008d48 <std>:
 8008d48:	2300      	movs	r3, #0
 8008d4a:	b510      	push	{r4, lr}
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d56:	6083      	str	r3, [r0, #8]
 8008d58:	8181      	strh	r1, [r0, #12]
 8008d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8008d5c:	81c2      	strh	r2, [r0, #14]
 8008d5e:	6183      	str	r3, [r0, #24]
 8008d60:	4619      	mov	r1, r3
 8008d62:	2208      	movs	r2, #8
 8008d64:	305c      	adds	r0, #92	; 0x5c
 8008d66:	f7fe faf3 	bl	8007350 <memset>
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <std+0x38>)
 8008d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <std+0x3c>)
 8008d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d72:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <std+0x40>)
 8008d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d76:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <std+0x44>)
 8008d78:	6224      	str	r4, [r4, #32]
 8008d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8008d7c:	bd10      	pop	{r4, pc}
 8008d7e:	bf00      	nop
 8008d80:	08009c01 	.word	0x08009c01
 8008d84:	08009c23 	.word	0x08009c23
 8008d88:	08009c5b 	.word	0x08009c5b
 8008d8c:	08009c7f 	.word	0x08009c7f

08008d90 <_cleanup_r>:
 8008d90:	4901      	ldr	r1, [pc, #4]	; (8008d98 <_cleanup_r+0x8>)
 8008d92:	f000 b8af 	b.w	8008ef4 <_fwalk_reent>
 8008d96:	bf00      	nop
 8008d98:	08008cd1 	.word	0x08008cd1

08008d9c <__sfmoreglue>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	2268      	movs	r2, #104	; 0x68
 8008da0:	1e4d      	subs	r5, r1, #1
 8008da2:	4355      	muls	r5, r2
 8008da4:	460e      	mov	r6, r1
 8008da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008daa:	f000 fd4b 	bl	8009844 <_malloc_r>
 8008dae:	4604      	mov	r4, r0
 8008db0:	b140      	cbz	r0, 8008dc4 <__sfmoreglue+0x28>
 8008db2:	2100      	movs	r1, #0
 8008db4:	e9c0 1600 	strd	r1, r6, [r0]
 8008db8:	300c      	adds	r0, #12
 8008dba:	60a0      	str	r0, [r4, #8]
 8008dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008dc0:	f7fe fac6 	bl	8007350 <memset>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}

08008dc8 <__sfp_lock_acquire>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	; (8008dd0 <__sfp_lock_acquire+0x8>)
 8008dca:	f000 b8b8 	b.w	8008f3e <__retarget_lock_acquire_recursive>
 8008dce:	bf00      	nop
 8008dd0:	200015a1 	.word	0x200015a1

08008dd4 <__sfp_lock_release>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	; (8008ddc <__sfp_lock_release+0x8>)
 8008dd6:	f000 b8b3 	b.w	8008f40 <__retarget_lock_release_recursive>
 8008dda:	bf00      	nop
 8008ddc:	200015a1 	.word	0x200015a1

08008de0 <__sinit_lock_acquire>:
 8008de0:	4801      	ldr	r0, [pc, #4]	; (8008de8 <__sinit_lock_acquire+0x8>)
 8008de2:	f000 b8ac 	b.w	8008f3e <__retarget_lock_acquire_recursive>
 8008de6:	bf00      	nop
 8008de8:	200015a2 	.word	0x200015a2

08008dec <__sinit_lock_release>:
 8008dec:	4801      	ldr	r0, [pc, #4]	; (8008df4 <__sinit_lock_release+0x8>)
 8008dee:	f000 b8a7 	b.w	8008f40 <__retarget_lock_release_recursive>
 8008df2:	bf00      	nop
 8008df4:	200015a2 	.word	0x200015a2

08008df8 <__sinit>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	f7ff fff0 	bl	8008de0 <__sinit_lock_acquire>
 8008e00:	69a3      	ldr	r3, [r4, #24]
 8008e02:	b11b      	cbz	r3, 8008e0c <__sinit+0x14>
 8008e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e08:	f7ff bff0 	b.w	8008dec <__sinit_lock_release>
 8008e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e10:	6523      	str	r3, [r4, #80]	; 0x50
 8008e12:	4b13      	ldr	r3, [pc, #76]	; (8008e60 <__sinit+0x68>)
 8008e14:	4a13      	ldr	r2, [pc, #76]	; (8008e64 <__sinit+0x6c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	bf04      	itt	eq
 8008e1e:	2301      	moveq	r3, #1
 8008e20:	61a3      	streq	r3, [r4, #24]
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 f820 	bl	8008e68 <__sfp>
 8008e28:	6060      	str	r0, [r4, #4]
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	f000 f81c 	bl	8008e68 <__sfp>
 8008e30:	60a0      	str	r0, [r4, #8]
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 f818 	bl	8008e68 <__sfp>
 8008e38:	2200      	movs	r2, #0
 8008e3a:	60e0      	str	r0, [r4, #12]
 8008e3c:	2104      	movs	r1, #4
 8008e3e:	6860      	ldr	r0, [r4, #4]
 8008e40:	f7ff ff82 	bl	8008d48 <std>
 8008e44:	68a0      	ldr	r0, [r4, #8]
 8008e46:	2201      	movs	r2, #1
 8008e48:	2109      	movs	r1, #9
 8008e4a:	f7ff ff7d 	bl	8008d48 <std>
 8008e4e:	68e0      	ldr	r0, [r4, #12]
 8008e50:	2202      	movs	r2, #2
 8008e52:	2112      	movs	r1, #18
 8008e54:	f7ff ff78 	bl	8008d48 <std>
 8008e58:	2301      	movs	r3, #1
 8008e5a:	61a3      	str	r3, [r4, #24]
 8008e5c:	e7d2      	b.n	8008e04 <__sinit+0xc>
 8008e5e:	bf00      	nop
 8008e60:	0800a198 	.word	0x0800a198
 8008e64:	08008d91 	.word	0x08008d91

08008e68 <__sfp>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	4607      	mov	r7, r0
 8008e6c:	f7ff ffac 	bl	8008dc8 <__sfp_lock_acquire>
 8008e70:	4b1e      	ldr	r3, [pc, #120]	; (8008eec <__sfp+0x84>)
 8008e72:	681e      	ldr	r6, [r3, #0]
 8008e74:	69b3      	ldr	r3, [r6, #24]
 8008e76:	b913      	cbnz	r3, 8008e7e <__sfp+0x16>
 8008e78:	4630      	mov	r0, r6
 8008e7a:	f7ff ffbd 	bl	8008df8 <__sinit>
 8008e7e:	3648      	adds	r6, #72	; 0x48
 8008e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	d503      	bpl.n	8008e90 <__sfp+0x28>
 8008e88:	6833      	ldr	r3, [r6, #0]
 8008e8a:	b30b      	cbz	r3, 8008ed0 <__sfp+0x68>
 8008e8c:	6836      	ldr	r6, [r6, #0]
 8008e8e:	e7f7      	b.n	8008e80 <__sfp+0x18>
 8008e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e94:	b9d5      	cbnz	r5, 8008ecc <__sfp+0x64>
 8008e96:	4b16      	ldr	r3, [pc, #88]	; (8008ef0 <__sfp+0x88>)
 8008e98:	60e3      	str	r3, [r4, #12]
 8008e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8008ea0:	f000 f84c 	bl	8008f3c <__retarget_lock_init_recursive>
 8008ea4:	f7ff ff96 	bl	8008dd4 <__sfp_lock_release>
 8008ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008eb0:	6025      	str	r5, [r4, #0]
 8008eb2:	61a5      	str	r5, [r4, #24]
 8008eb4:	2208      	movs	r2, #8
 8008eb6:	4629      	mov	r1, r5
 8008eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ebc:	f7fe fa48 	bl	8007350 <memset>
 8008ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ec8:	4620      	mov	r0, r4
 8008eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ecc:	3468      	adds	r4, #104	; 0x68
 8008ece:	e7d9      	b.n	8008e84 <__sfp+0x1c>
 8008ed0:	2104      	movs	r1, #4
 8008ed2:	4638      	mov	r0, r7
 8008ed4:	f7ff ff62 	bl	8008d9c <__sfmoreglue>
 8008ed8:	4604      	mov	r4, r0
 8008eda:	6030      	str	r0, [r6, #0]
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d1d5      	bne.n	8008e8c <__sfp+0x24>
 8008ee0:	f7ff ff78 	bl	8008dd4 <__sfp_lock_release>
 8008ee4:	230c      	movs	r3, #12
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	e7ee      	b.n	8008ec8 <__sfp+0x60>
 8008eea:	bf00      	nop
 8008eec:	0800a198 	.word	0x0800a198
 8008ef0:	ffff0001 	.word	0xffff0001

08008ef4 <_fwalk_reent>:
 8008ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef8:	4606      	mov	r6, r0
 8008efa:	4688      	mov	r8, r1
 8008efc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f00:	2700      	movs	r7, #0
 8008f02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f06:	f1b9 0901 	subs.w	r9, r9, #1
 8008f0a:	d505      	bpl.n	8008f18 <_fwalk_reent+0x24>
 8008f0c:	6824      	ldr	r4, [r4, #0]
 8008f0e:	2c00      	cmp	r4, #0
 8008f10:	d1f7      	bne.n	8008f02 <_fwalk_reent+0xe>
 8008f12:	4638      	mov	r0, r7
 8008f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f18:	89ab      	ldrh	r3, [r5, #12]
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d907      	bls.n	8008f2e <_fwalk_reent+0x3a>
 8008f1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f22:	3301      	adds	r3, #1
 8008f24:	d003      	beq.n	8008f2e <_fwalk_reent+0x3a>
 8008f26:	4629      	mov	r1, r5
 8008f28:	4630      	mov	r0, r6
 8008f2a:	47c0      	blx	r8
 8008f2c:	4307      	orrs	r7, r0
 8008f2e:	3568      	adds	r5, #104	; 0x68
 8008f30:	e7e9      	b.n	8008f06 <_fwalk_reent+0x12>
	...

08008f34 <_localeconv_r>:
 8008f34:	4800      	ldr	r0, [pc, #0]	; (8008f38 <_localeconv_r+0x4>)
 8008f36:	4770      	bx	lr
 8008f38:	20000160 	.word	0x20000160

08008f3c <__retarget_lock_init_recursive>:
 8008f3c:	4770      	bx	lr

08008f3e <__retarget_lock_acquire_recursive>:
 8008f3e:	4770      	bx	lr

08008f40 <__retarget_lock_release_recursive>:
 8008f40:	4770      	bx	lr

08008f42 <__swhatbuf_r>:
 8008f42:	b570      	push	{r4, r5, r6, lr}
 8008f44:	460e      	mov	r6, r1
 8008f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f4a:	2900      	cmp	r1, #0
 8008f4c:	b096      	sub	sp, #88	; 0x58
 8008f4e:	4614      	mov	r4, r2
 8008f50:	461d      	mov	r5, r3
 8008f52:	da08      	bge.n	8008f66 <__swhatbuf_r+0x24>
 8008f54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	602a      	str	r2, [r5, #0]
 8008f5c:	061a      	lsls	r2, r3, #24
 8008f5e:	d410      	bmi.n	8008f82 <__swhatbuf_r+0x40>
 8008f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f64:	e00e      	b.n	8008f84 <__swhatbuf_r+0x42>
 8008f66:	466a      	mov	r2, sp
 8008f68:	f000 fee0 	bl	8009d2c <_fstat_r>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	dbf1      	blt.n	8008f54 <__swhatbuf_r+0x12>
 8008f70:	9a01      	ldr	r2, [sp, #4]
 8008f72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f7a:	425a      	negs	r2, r3
 8008f7c:	415a      	adcs	r2, r3
 8008f7e:	602a      	str	r2, [r5, #0]
 8008f80:	e7ee      	b.n	8008f60 <__swhatbuf_r+0x1e>
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	2000      	movs	r0, #0
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	b016      	add	sp, #88	; 0x58
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}

08008f8c <__smakebuf_r>:
 8008f8c:	898b      	ldrh	r3, [r1, #12]
 8008f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f90:	079d      	lsls	r5, r3, #30
 8008f92:	4606      	mov	r6, r0
 8008f94:	460c      	mov	r4, r1
 8008f96:	d507      	bpl.n	8008fa8 <__smakebuf_r+0x1c>
 8008f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	6123      	str	r3, [r4, #16]
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	6163      	str	r3, [r4, #20]
 8008fa4:	b002      	add	sp, #8
 8008fa6:	bd70      	pop	{r4, r5, r6, pc}
 8008fa8:	ab01      	add	r3, sp, #4
 8008faa:	466a      	mov	r2, sp
 8008fac:	f7ff ffc9 	bl	8008f42 <__swhatbuf_r>
 8008fb0:	9900      	ldr	r1, [sp, #0]
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f000 fc45 	bl	8009844 <_malloc_r>
 8008fba:	b948      	cbnz	r0, 8008fd0 <__smakebuf_r+0x44>
 8008fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc0:	059a      	lsls	r2, r3, #22
 8008fc2:	d4ef      	bmi.n	8008fa4 <__smakebuf_r+0x18>
 8008fc4:	f023 0303 	bic.w	r3, r3, #3
 8008fc8:	f043 0302 	orr.w	r3, r3, #2
 8008fcc:	81a3      	strh	r3, [r4, #12]
 8008fce:	e7e3      	b.n	8008f98 <__smakebuf_r+0xc>
 8008fd0:	4b0d      	ldr	r3, [pc, #52]	; (8009008 <__smakebuf_r+0x7c>)
 8008fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	6020      	str	r0, [r4, #0]
 8008fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	9b00      	ldr	r3, [sp, #0]
 8008fe0:	6163      	str	r3, [r4, #20]
 8008fe2:	9b01      	ldr	r3, [sp, #4]
 8008fe4:	6120      	str	r0, [r4, #16]
 8008fe6:	b15b      	cbz	r3, 8009000 <__smakebuf_r+0x74>
 8008fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fec:	4630      	mov	r0, r6
 8008fee:	f000 feaf 	bl	8009d50 <_isatty_r>
 8008ff2:	b128      	cbz	r0, 8009000 <__smakebuf_r+0x74>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f023 0303 	bic.w	r3, r3, #3
 8008ffa:	f043 0301 	orr.w	r3, r3, #1
 8008ffe:	81a3      	strh	r3, [r4, #12]
 8009000:	89a0      	ldrh	r0, [r4, #12]
 8009002:	4305      	orrs	r5, r0
 8009004:	81a5      	strh	r5, [r4, #12]
 8009006:	e7cd      	b.n	8008fa4 <__smakebuf_r+0x18>
 8009008:	08008d91 	.word	0x08008d91

0800900c <malloc>:
 800900c:	4b02      	ldr	r3, [pc, #8]	; (8009018 <malloc+0xc>)
 800900e:	4601      	mov	r1, r0
 8009010:	6818      	ldr	r0, [r3, #0]
 8009012:	f000 bc17 	b.w	8009844 <_malloc_r>
 8009016:	bf00      	nop
 8009018:	2000000c 	.word	0x2000000c

0800901c <memcpy>:
 800901c:	440a      	add	r2, r1
 800901e:	4291      	cmp	r1, r2
 8009020:	f100 33ff 	add.w	r3, r0, #4294967295
 8009024:	d100      	bne.n	8009028 <memcpy+0xc>
 8009026:	4770      	bx	lr
 8009028:	b510      	push	{r4, lr}
 800902a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800902e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009032:	4291      	cmp	r1, r2
 8009034:	d1f9      	bne.n	800902a <memcpy+0xe>
 8009036:	bd10      	pop	{r4, pc}

08009038 <_Balloc>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800903c:	4604      	mov	r4, r0
 800903e:	460d      	mov	r5, r1
 8009040:	b976      	cbnz	r6, 8009060 <_Balloc+0x28>
 8009042:	2010      	movs	r0, #16
 8009044:	f7ff ffe2 	bl	800900c <malloc>
 8009048:	4602      	mov	r2, r0
 800904a:	6260      	str	r0, [r4, #36]	; 0x24
 800904c:	b920      	cbnz	r0, 8009058 <_Balloc+0x20>
 800904e:	4b18      	ldr	r3, [pc, #96]	; (80090b0 <_Balloc+0x78>)
 8009050:	4818      	ldr	r0, [pc, #96]	; (80090b4 <_Balloc+0x7c>)
 8009052:	2166      	movs	r1, #102	; 0x66
 8009054:	f000 fe2a 	bl	8009cac <__assert_func>
 8009058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800905c:	6006      	str	r6, [r0, #0]
 800905e:	60c6      	str	r6, [r0, #12]
 8009060:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009062:	68f3      	ldr	r3, [r6, #12]
 8009064:	b183      	cbz	r3, 8009088 <_Balloc+0x50>
 8009066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800906e:	b9b8      	cbnz	r0, 80090a0 <_Balloc+0x68>
 8009070:	2101      	movs	r1, #1
 8009072:	fa01 f605 	lsl.w	r6, r1, r5
 8009076:	1d72      	adds	r2, r6, #5
 8009078:	0092      	lsls	r2, r2, #2
 800907a:	4620      	mov	r0, r4
 800907c:	f000 fb60 	bl	8009740 <_calloc_r>
 8009080:	b160      	cbz	r0, 800909c <_Balloc+0x64>
 8009082:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009086:	e00e      	b.n	80090a6 <_Balloc+0x6e>
 8009088:	2221      	movs	r2, #33	; 0x21
 800908a:	2104      	movs	r1, #4
 800908c:	4620      	mov	r0, r4
 800908e:	f000 fb57 	bl	8009740 <_calloc_r>
 8009092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009094:	60f0      	str	r0, [r6, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e4      	bne.n	8009066 <_Balloc+0x2e>
 800909c:	2000      	movs	r0, #0
 800909e:	bd70      	pop	{r4, r5, r6, pc}
 80090a0:	6802      	ldr	r2, [r0, #0]
 80090a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090a6:	2300      	movs	r3, #0
 80090a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090ac:	e7f7      	b.n	800909e <_Balloc+0x66>
 80090ae:	bf00      	nop
 80090b0:	0800a1dd 	.word	0x0800a1dd
 80090b4:	0800a2c0 	.word	0x0800a2c0

080090b8 <_Bfree>:
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090bc:	4605      	mov	r5, r0
 80090be:	460c      	mov	r4, r1
 80090c0:	b976      	cbnz	r6, 80090e0 <_Bfree+0x28>
 80090c2:	2010      	movs	r0, #16
 80090c4:	f7ff ffa2 	bl	800900c <malloc>
 80090c8:	4602      	mov	r2, r0
 80090ca:	6268      	str	r0, [r5, #36]	; 0x24
 80090cc:	b920      	cbnz	r0, 80090d8 <_Bfree+0x20>
 80090ce:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <_Bfree+0x3c>)
 80090d0:	4809      	ldr	r0, [pc, #36]	; (80090f8 <_Bfree+0x40>)
 80090d2:	218a      	movs	r1, #138	; 0x8a
 80090d4:	f000 fdea 	bl	8009cac <__assert_func>
 80090d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090dc:	6006      	str	r6, [r0, #0]
 80090de:	60c6      	str	r6, [r0, #12]
 80090e0:	b13c      	cbz	r4, 80090f2 <_Bfree+0x3a>
 80090e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090e4:	6862      	ldr	r2, [r4, #4]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090ec:	6021      	str	r1, [r4, #0]
 80090ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090f2:	bd70      	pop	{r4, r5, r6, pc}
 80090f4:	0800a1dd 	.word	0x0800a1dd
 80090f8:	0800a2c0 	.word	0x0800a2c0

080090fc <__multadd>:
 80090fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009100:	690d      	ldr	r5, [r1, #16]
 8009102:	4607      	mov	r7, r0
 8009104:	460c      	mov	r4, r1
 8009106:	461e      	mov	r6, r3
 8009108:	f101 0c14 	add.w	ip, r1, #20
 800910c:	2000      	movs	r0, #0
 800910e:	f8dc 3000 	ldr.w	r3, [ip]
 8009112:	b299      	uxth	r1, r3
 8009114:	fb02 6101 	mla	r1, r2, r1, r6
 8009118:	0c1e      	lsrs	r6, r3, #16
 800911a:	0c0b      	lsrs	r3, r1, #16
 800911c:	fb02 3306 	mla	r3, r2, r6, r3
 8009120:	b289      	uxth	r1, r1
 8009122:	3001      	adds	r0, #1
 8009124:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009128:	4285      	cmp	r5, r0
 800912a:	f84c 1b04 	str.w	r1, [ip], #4
 800912e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009132:	dcec      	bgt.n	800910e <__multadd+0x12>
 8009134:	b30e      	cbz	r6, 800917a <__multadd+0x7e>
 8009136:	68a3      	ldr	r3, [r4, #8]
 8009138:	42ab      	cmp	r3, r5
 800913a:	dc19      	bgt.n	8009170 <__multadd+0x74>
 800913c:	6861      	ldr	r1, [r4, #4]
 800913e:	4638      	mov	r0, r7
 8009140:	3101      	adds	r1, #1
 8009142:	f7ff ff79 	bl	8009038 <_Balloc>
 8009146:	4680      	mov	r8, r0
 8009148:	b928      	cbnz	r0, 8009156 <__multadd+0x5a>
 800914a:	4602      	mov	r2, r0
 800914c:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <__multadd+0x84>)
 800914e:	480d      	ldr	r0, [pc, #52]	; (8009184 <__multadd+0x88>)
 8009150:	21b5      	movs	r1, #181	; 0xb5
 8009152:	f000 fdab 	bl	8009cac <__assert_func>
 8009156:	6922      	ldr	r2, [r4, #16]
 8009158:	3202      	adds	r2, #2
 800915a:	f104 010c 	add.w	r1, r4, #12
 800915e:	0092      	lsls	r2, r2, #2
 8009160:	300c      	adds	r0, #12
 8009162:	f7ff ff5b 	bl	800901c <memcpy>
 8009166:	4621      	mov	r1, r4
 8009168:	4638      	mov	r0, r7
 800916a:	f7ff ffa5 	bl	80090b8 <_Bfree>
 800916e:	4644      	mov	r4, r8
 8009170:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009174:	3501      	adds	r5, #1
 8009176:	615e      	str	r6, [r3, #20]
 8009178:	6125      	str	r5, [r4, #16]
 800917a:	4620      	mov	r0, r4
 800917c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009180:	0800a24f 	.word	0x0800a24f
 8009184:	0800a2c0 	.word	0x0800a2c0

08009188 <__hi0bits>:
 8009188:	0c03      	lsrs	r3, r0, #16
 800918a:	041b      	lsls	r3, r3, #16
 800918c:	b9d3      	cbnz	r3, 80091c4 <__hi0bits+0x3c>
 800918e:	0400      	lsls	r0, r0, #16
 8009190:	2310      	movs	r3, #16
 8009192:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009196:	bf04      	itt	eq
 8009198:	0200      	lsleq	r0, r0, #8
 800919a:	3308      	addeq	r3, #8
 800919c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091a0:	bf04      	itt	eq
 80091a2:	0100      	lsleq	r0, r0, #4
 80091a4:	3304      	addeq	r3, #4
 80091a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091aa:	bf04      	itt	eq
 80091ac:	0080      	lsleq	r0, r0, #2
 80091ae:	3302      	addeq	r3, #2
 80091b0:	2800      	cmp	r0, #0
 80091b2:	db05      	blt.n	80091c0 <__hi0bits+0x38>
 80091b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091b8:	f103 0301 	add.w	r3, r3, #1
 80091bc:	bf08      	it	eq
 80091be:	2320      	moveq	r3, #32
 80091c0:	4618      	mov	r0, r3
 80091c2:	4770      	bx	lr
 80091c4:	2300      	movs	r3, #0
 80091c6:	e7e4      	b.n	8009192 <__hi0bits+0xa>

080091c8 <__lo0bits>:
 80091c8:	6803      	ldr	r3, [r0, #0]
 80091ca:	f013 0207 	ands.w	r2, r3, #7
 80091ce:	4601      	mov	r1, r0
 80091d0:	d00b      	beq.n	80091ea <__lo0bits+0x22>
 80091d2:	07da      	lsls	r2, r3, #31
 80091d4:	d423      	bmi.n	800921e <__lo0bits+0x56>
 80091d6:	0798      	lsls	r0, r3, #30
 80091d8:	bf49      	itett	mi
 80091da:	085b      	lsrmi	r3, r3, #1
 80091dc:	089b      	lsrpl	r3, r3, #2
 80091de:	2001      	movmi	r0, #1
 80091e0:	600b      	strmi	r3, [r1, #0]
 80091e2:	bf5c      	itt	pl
 80091e4:	600b      	strpl	r3, [r1, #0]
 80091e6:	2002      	movpl	r0, #2
 80091e8:	4770      	bx	lr
 80091ea:	b298      	uxth	r0, r3
 80091ec:	b9a8      	cbnz	r0, 800921a <__lo0bits+0x52>
 80091ee:	0c1b      	lsrs	r3, r3, #16
 80091f0:	2010      	movs	r0, #16
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	b90a      	cbnz	r2, 80091fa <__lo0bits+0x32>
 80091f6:	3008      	adds	r0, #8
 80091f8:	0a1b      	lsrs	r3, r3, #8
 80091fa:	071a      	lsls	r2, r3, #28
 80091fc:	bf04      	itt	eq
 80091fe:	091b      	lsreq	r3, r3, #4
 8009200:	3004      	addeq	r0, #4
 8009202:	079a      	lsls	r2, r3, #30
 8009204:	bf04      	itt	eq
 8009206:	089b      	lsreq	r3, r3, #2
 8009208:	3002      	addeq	r0, #2
 800920a:	07da      	lsls	r2, r3, #31
 800920c:	d403      	bmi.n	8009216 <__lo0bits+0x4e>
 800920e:	085b      	lsrs	r3, r3, #1
 8009210:	f100 0001 	add.w	r0, r0, #1
 8009214:	d005      	beq.n	8009222 <__lo0bits+0x5a>
 8009216:	600b      	str	r3, [r1, #0]
 8009218:	4770      	bx	lr
 800921a:	4610      	mov	r0, r2
 800921c:	e7e9      	b.n	80091f2 <__lo0bits+0x2a>
 800921e:	2000      	movs	r0, #0
 8009220:	4770      	bx	lr
 8009222:	2020      	movs	r0, #32
 8009224:	4770      	bx	lr
	...

08009228 <__i2b>:
 8009228:	b510      	push	{r4, lr}
 800922a:	460c      	mov	r4, r1
 800922c:	2101      	movs	r1, #1
 800922e:	f7ff ff03 	bl	8009038 <_Balloc>
 8009232:	4602      	mov	r2, r0
 8009234:	b928      	cbnz	r0, 8009242 <__i2b+0x1a>
 8009236:	4b05      	ldr	r3, [pc, #20]	; (800924c <__i2b+0x24>)
 8009238:	4805      	ldr	r0, [pc, #20]	; (8009250 <__i2b+0x28>)
 800923a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800923e:	f000 fd35 	bl	8009cac <__assert_func>
 8009242:	2301      	movs	r3, #1
 8009244:	6144      	str	r4, [r0, #20]
 8009246:	6103      	str	r3, [r0, #16]
 8009248:	bd10      	pop	{r4, pc}
 800924a:	bf00      	nop
 800924c:	0800a24f 	.word	0x0800a24f
 8009250:	0800a2c0 	.word	0x0800a2c0

08009254 <__multiply>:
 8009254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	4691      	mov	r9, r2
 800925a:	690a      	ldr	r2, [r1, #16]
 800925c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009260:	429a      	cmp	r2, r3
 8009262:	bfb8      	it	lt
 8009264:	460b      	movlt	r3, r1
 8009266:	460c      	mov	r4, r1
 8009268:	bfbc      	itt	lt
 800926a:	464c      	movlt	r4, r9
 800926c:	4699      	movlt	r9, r3
 800926e:	6927      	ldr	r7, [r4, #16]
 8009270:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009274:	68a3      	ldr	r3, [r4, #8]
 8009276:	6861      	ldr	r1, [r4, #4]
 8009278:	eb07 060a 	add.w	r6, r7, sl
 800927c:	42b3      	cmp	r3, r6
 800927e:	b085      	sub	sp, #20
 8009280:	bfb8      	it	lt
 8009282:	3101      	addlt	r1, #1
 8009284:	f7ff fed8 	bl	8009038 <_Balloc>
 8009288:	b930      	cbnz	r0, 8009298 <__multiply+0x44>
 800928a:	4602      	mov	r2, r0
 800928c:	4b44      	ldr	r3, [pc, #272]	; (80093a0 <__multiply+0x14c>)
 800928e:	4845      	ldr	r0, [pc, #276]	; (80093a4 <__multiply+0x150>)
 8009290:	f240 115d 	movw	r1, #349	; 0x15d
 8009294:	f000 fd0a 	bl	8009cac <__assert_func>
 8009298:	f100 0514 	add.w	r5, r0, #20
 800929c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092a0:	462b      	mov	r3, r5
 80092a2:	2200      	movs	r2, #0
 80092a4:	4543      	cmp	r3, r8
 80092a6:	d321      	bcc.n	80092ec <__multiply+0x98>
 80092a8:	f104 0314 	add.w	r3, r4, #20
 80092ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092b0:	f109 0314 	add.w	r3, r9, #20
 80092b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092b8:	9202      	str	r2, [sp, #8]
 80092ba:	1b3a      	subs	r2, r7, r4
 80092bc:	3a15      	subs	r2, #21
 80092be:	f022 0203 	bic.w	r2, r2, #3
 80092c2:	3204      	adds	r2, #4
 80092c4:	f104 0115 	add.w	r1, r4, #21
 80092c8:	428f      	cmp	r7, r1
 80092ca:	bf38      	it	cc
 80092cc:	2204      	movcc	r2, #4
 80092ce:	9201      	str	r2, [sp, #4]
 80092d0:	9a02      	ldr	r2, [sp, #8]
 80092d2:	9303      	str	r3, [sp, #12]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d80c      	bhi.n	80092f2 <__multiply+0x9e>
 80092d8:	2e00      	cmp	r6, #0
 80092da:	dd03      	ble.n	80092e4 <__multiply+0x90>
 80092dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d05a      	beq.n	800939a <__multiply+0x146>
 80092e4:	6106      	str	r6, [r0, #16]
 80092e6:	b005      	add	sp, #20
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ec:	f843 2b04 	str.w	r2, [r3], #4
 80092f0:	e7d8      	b.n	80092a4 <__multiply+0x50>
 80092f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80092f6:	f1ba 0f00 	cmp.w	sl, #0
 80092fa:	d024      	beq.n	8009346 <__multiply+0xf2>
 80092fc:	f104 0e14 	add.w	lr, r4, #20
 8009300:	46a9      	mov	r9, r5
 8009302:	f04f 0c00 	mov.w	ip, #0
 8009306:	f85e 2b04 	ldr.w	r2, [lr], #4
 800930a:	f8d9 1000 	ldr.w	r1, [r9]
 800930e:	fa1f fb82 	uxth.w	fp, r2
 8009312:	b289      	uxth	r1, r1
 8009314:	fb0a 110b 	mla	r1, sl, fp, r1
 8009318:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800931c:	f8d9 2000 	ldr.w	r2, [r9]
 8009320:	4461      	add	r1, ip
 8009322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009326:	fb0a c20b 	mla	r2, sl, fp, ip
 800932a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800932e:	b289      	uxth	r1, r1
 8009330:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009334:	4577      	cmp	r7, lr
 8009336:	f849 1b04 	str.w	r1, [r9], #4
 800933a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800933e:	d8e2      	bhi.n	8009306 <__multiply+0xb2>
 8009340:	9a01      	ldr	r2, [sp, #4]
 8009342:	f845 c002 	str.w	ip, [r5, r2]
 8009346:	9a03      	ldr	r2, [sp, #12]
 8009348:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800934c:	3304      	adds	r3, #4
 800934e:	f1b9 0f00 	cmp.w	r9, #0
 8009352:	d020      	beq.n	8009396 <__multiply+0x142>
 8009354:	6829      	ldr	r1, [r5, #0]
 8009356:	f104 0c14 	add.w	ip, r4, #20
 800935a:	46ae      	mov	lr, r5
 800935c:	f04f 0a00 	mov.w	sl, #0
 8009360:	f8bc b000 	ldrh.w	fp, [ip]
 8009364:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009368:	fb09 220b 	mla	r2, r9, fp, r2
 800936c:	4492      	add	sl, r2
 800936e:	b289      	uxth	r1, r1
 8009370:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009374:	f84e 1b04 	str.w	r1, [lr], #4
 8009378:	f85c 2b04 	ldr.w	r2, [ip], #4
 800937c:	f8be 1000 	ldrh.w	r1, [lr]
 8009380:	0c12      	lsrs	r2, r2, #16
 8009382:	fb09 1102 	mla	r1, r9, r2, r1
 8009386:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800938a:	4567      	cmp	r7, ip
 800938c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009390:	d8e6      	bhi.n	8009360 <__multiply+0x10c>
 8009392:	9a01      	ldr	r2, [sp, #4]
 8009394:	50a9      	str	r1, [r5, r2]
 8009396:	3504      	adds	r5, #4
 8009398:	e79a      	b.n	80092d0 <__multiply+0x7c>
 800939a:	3e01      	subs	r6, #1
 800939c:	e79c      	b.n	80092d8 <__multiply+0x84>
 800939e:	bf00      	nop
 80093a0:	0800a24f 	.word	0x0800a24f
 80093a4:	0800a2c0 	.word	0x0800a2c0

080093a8 <__pow5mult>:
 80093a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093ac:	4615      	mov	r5, r2
 80093ae:	f012 0203 	ands.w	r2, r2, #3
 80093b2:	4606      	mov	r6, r0
 80093b4:	460f      	mov	r7, r1
 80093b6:	d007      	beq.n	80093c8 <__pow5mult+0x20>
 80093b8:	4c25      	ldr	r4, [pc, #148]	; (8009450 <__pow5mult+0xa8>)
 80093ba:	3a01      	subs	r2, #1
 80093bc:	2300      	movs	r3, #0
 80093be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093c2:	f7ff fe9b 	bl	80090fc <__multadd>
 80093c6:	4607      	mov	r7, r0
 80093c8:	10ad      	asrs	r5, r5, #2
 80093ca:	d03d      	beq.n	8009448 <__pow5mult+0xa0>
 80093cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093ce:	b97c      	cbnz	r4, 80093f0 <__pow5mult+0x48>
 80093d0:	2010      	movs	r0, #16
 80093d2:	f7ff fe1b 	bl	800900c <malloc>
 80093d6:	4602      	mov	r2, r0
 80093d8:	6270      	str	r0, [r6, #36]	; 0x24
 80093da:	b928      	cbnz	r0, 80093e8 <__pow5mult+0x40>
 80093dc:	4b1d      	ldr	r3, [pc, #116]	; (8009454 <__pow5mult+0xac>)
 80093de:	481e      	ldr	r0, [pc, #120]	; (8009458 <__pow5mult+0xb0>)
 80093e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80093e4:	f000 fc62 	bl	8009cac <__assert_func>
 80093e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80093ec:	6004      	str	r4, [r0, #0]
 80093ee:	60c4      	str	r4, [r0, #12]
 80093f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80093f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80093f8:	b94c      	cbnz	r4, 800940e <__pow5mult+0x66>
 80093fa:	f240 2171 	movw	r1, #625	; 0x271
 80093fe:	4630      	mov	r0, r6
 8009400:	f7ff ff12 	bl	8009228 <__i2b>
 8009404:	2300      	movs	r3, #0
 8009406:	f8c8 0008 	str.w	r0, [r8, #8]
 800940a:	4604      	mov	r4, r0
 800940c:	6003      	str	r3, [r0, #0]
 800940e:	f04f 0900 	mov.w	r9, #0
 8009412:	07eb      	lsls	r3, r5, #31
 8009414:	d50a      	bpl.n	800942c <__pow5mult+0x84>
 8009416:	4639      	mov	r1, r7
 8009418:	4622      	mov	r2, r4
 800941a:	4630      	mov	r0, r6
 800941c:	f7ff ff1a 	bl	8009254 <__multiply>
 8009420:	4639      	mov	r1, r7
 8009422:	4680      	mov	r8, r0
 8009424:	4630      	mov	r0, r6
 8009426:	f7ff fe47 	bl	80090b8 <_Bfree>
 800942a:	4647      	mov	r7, r8
 800942c:	106d      	asrs	r5, r5, #1
 800942e:	d00b      	beq.n	8009448 <__pow5mult+0xa0>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	b938      	cbnz	r0, 8009444 <__pow5mult+0x9c>
 8009434:	4622      	mov	r2, r4
 8009436:	4621      	mov	r1, r4
 8009438:	4630      	mov	r0, r6
 800943a:	f7ff ff0b 	bl	8009254 <__multiply>
 800943e:	6020      	str	r0, [r4, #0]
 8009440:	f8c0 9000 	str.w	r9, [r0]
 8009444:	4604      	mov	r4, r0
 8009446:	e7e4      	b.n	8009412 <__pow5mult+0x6a>
 8009448:	4638      	mov	r0, r7
 800944a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800944e:	bf00      	nop
 8009450:	0800a410 	.word	0x0800a410
 8009454:	0800a1dd 	.word	0x0800a1dd
 8009458:	0800a2c0 	.word	0x0800a2c0

0800945c <__lshift>:
 800945c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	460c      	mov	r4, r1
 8009462:	6849      	ldr	r1, [r1, #4]
 8009464:	6923      	ldr	r3, [r4, #16]
 8009466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800946a:	68a3      	ldr	r3, [r4, #8]
 800946c:	4607      	mov	r7, r0
 800946e:	4691      	mov	r9, r2
 8009470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009474:	f108 0601 	add.w	r6, r8, #1
 8009478:	42b3      	cmp	r3, r6
 800947a:	db0b      	blt.n	8009494 <__lshift+0x38>
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff fddb 	bl	8009038 <_Balloc>
 8009482:	4605      	mov	r5, r0
 8009484:	b948      	cbnz	r0, 800949a <__lshift+0x3e>
 8009486:	4602      	mov	r2, r0
 8009488:	4b2a      	ldr	r3, [pc, #168]	; (8009534 <__lshift+0xd8>)
 800948a:	482b      	ldr	r0, [pc, #172]	; (8009538 <__lshift+0xdc>)
 800948c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009490:	f000 fc0c 	bl	8009cac <__assert_func>
 8009494:	3101      	adds	r1, #1
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	e7ee      	b.n	8009478 <__lshift+0x1c>
 800949a:	2300      	movs	r3, #0
 800949c:	f100 0114 	add.w	r1, r0, #20
 80094a0:	f100 0210 	add.w	r2, r0, #16
 80094a4:	4618      	mov	r0, r3
 80094a6:	4553      	cmp	r3, sl
 80094a8:	db37      	blt.n	800951a <__lshift+0xbe>
 80094aa:	6920      	ldr	r0, [r4, #16]
 80094ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094b0:	f104 0314 	add.w	r3, r4, #20
 80094b4:	f019 091f 	ands.w	r9, r9, #31
 80094b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094c0:	d02f      	beq.n	8009522 <__lshift+0xc6>
 80094c2:	f1c9 0e20 	rsb	lr, r9, #32
 80094c6:	468a      	mov	sl, r1
 80094c8:	f04f 0c00 	mov.w	ip, #0
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	fa02 f209 	lsl.w	r2, r2, r9
 80094d2:	ea42 020c 	orr.w	r2, r2, ip
 80094d6:	f84a 2b04 	str.w	r2, [sl], #4
 80094da:	f853 2b04 	ldr.w	r2, [r3], #4
 80094de:	4298      	cmp	r0, r3
 80094e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80094e4:	d8f2      	bhi.n	80094cc <__lshift+0x70>
 80094e6:	1b03      	subs	r3, r0, r4
 80094e8:	3b15      	subs	r3, #21
 80094ea:	f023 0303 	bic.w	r3, r3, #3
 80094ee:	3304      	adds	r3, #4
 80094f0:	f104 0215 	add.w	r2, r4, #21
 80094f4:	4290      	cmp	r0, r2
 80094f6:	bf38      	it	cc
 80094f8:	2304      	movcc	r3, #4
 80094fa:	f841 c003 	str.w	ip, [r1, r3]
 80094fe:	f1bc 0f00 	cmp.w	ip, #0
 8009502:	d001      	beq.n	8009508 <__lshift+0xac>
 8009504:	f108 0602 	add.w	r6, r8, #2
 8009508:	3e01      	subs	r6, #1
 800950a:	4638      	mov	r0, r7
 800950c:	612e      	str	r6, [r5, #16]
 800950e:	4621      	mov	r1, r4
 8009510:	f7ff fdd2 	bl	80090b8 <_Bfree>
 8009514:	4628      	mov	r0, r5
 8009516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800951a:	f842 0f04 	str.w	r0, [r2, #4]!
 800951e:	3301      	adds	r3, #1
 8009520:	e7c1      	b.n	80094a6 <__lshift+0x4a>
 8009522:	3904      	subs	r1, #4
 8009524:	f853 2b04 	ldr.w	r2, [r3], #4
 8009528:	f841 2f04 	str.w	r2, [r1, #4]!
 800952c:	4298      	cmp	r0, r3
 800952e:	d8f9      	bhi.n	8009524 <__lshift+0xc8>
 8009530:	e7ea      	b.n	8009508 <__lshift+0xac>
 8009532:	bf00      	nop
 8009534:	0800a24f 	.word	0x0800a24f
 8009538:	0800a2c0 	.word	0x0800a2c0

0800953c <__mcmp>:
 800953c:	b530      	push	{r4, r5, lr}
 800953e:	6902      	ldr	r2, [r0, #16]
 8009540:	690c      	ldr	r4, [r1, #16]
 8009542:	1b12      	subs	r2, r2, r4
 8009544:	d10e      	bne.n	8009564 <__mcmp+0x28>
 8009546:	f100 0314 	add.w	r3, r0, #20
 800954a:	3114      	adds	r1, #20
 800954c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800955c:	42a5      	cmp	r5, r4
 800955e:	d003      	beq.n	8009568 <__mcmp+0x2c>
 8009560:	d305      	bcc.n	800956e <__mcmp+0x32>
 8009562:	2201      	movs	r2, #1
 8009564:	4610      	mov	r0, r2
 8009566:	bd30      	pop	{r4, r5, pc}
 8009568:	4283      	cmp	r3, r0
 800956a:	d3f3      	bcc.n	8009554 <__mcmp+0x18>
 800956c:	e7fa      	b.n	8009564 <__mcmp+0x28>
 800956e:	f04f 32ff 	mov.w	r2, #4294967295
 8009572:	e7f7      	b.n	8009564 <__mcmp+0x28>

08009574 <__mdiff>:
 8009574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	460c      	mov	r4, r1
 800957a:	4606      	mov	r6, r0
 800957c:	4611      	mov	r1, r2
 800957e:	4620      	mov	r0, r4
 8009580:	4690      	mov	r8, r2
 8009582:	f7ff ffdb 	bl	800953c <__mcmp>
 8009586:	1e05      	subs	r5, r0, #0
 8009588:	d110      	bne.n	80095ac <__mdiff+0x38>
 800958a:	4629      	mov	r1, r5
 800958c:	4630      	mov	r0, r6
 800958e:	f7ff fd53 	bl	8009038 <_Balloc>
 8009592:	b930      	cbnz	r0, 80095a2 <__mdiff+0x2e>
 8009594:	4b3a      	ldr	r3, [pc, #232]	; (8009680 <__mdiff+0x10c>)
 8009596:	4602      	mov	r2, r0
 8009598:	f240 2132 	movw	r1, #562	; 0x232
 800959c:	4839      	ldr	r0, [pc, #228]	; (8009684 <__mdiff+0x110>)
 800959e:	f000 fb85 	bl	8009cac <__assert_func>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	bfa4      	itt	ge
 80095ae:	4643      	movge	r3, r8
 80095b0:	46a0      	movge	r8, r4
 80095b2:	4630      	mov	r0, r6
 80095b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095b8:	bfa6      	itte	ge
 80095ba:	461c      	movge	r4, r3
 80095bc:	2500      	movge	r5, #0
 80095be:	2501      	movlt	r5, #1
 80095c0:	f7ff fd3a 	bl	8009038 <_Balloc>
 80095c4:	b920      	cbnz	r0, 80095d0 <__mdiff+0x5c>
 80095c6:	4b2e      	ldr	r3, [pc, #184]	; (8009680 <__mdiff+0x10c>)
 80095c8:	4602      	mov	r2, r0
 80095ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095ce:	e7e5      	b.n	800959c <__mdiff+0x28>
 80095d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095d4:	6926      	ldr	r6, [r4, #16]
 80095d6:	60c5      	str	r5, [r0, #12]
 80095d8:	f104 0914 	add.w	r9, r4, #20
 80095dc:	f108 0514 	add.w	r5, r8, #20
 80095e0:	f100 0e14 	add.w	lr, r0, #20
 80095e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80095e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80095ec:	f108 0210 	add.w	r2, r8, #16
 80095f0:	46f2      	mov	sl, lr
 80095f2:	2100      	movs	r1, #0
 80095f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80095f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80095fc:	fa1f f883 	uxth.w	r8, r3
 8009600:	fa11 f18b 	uxtah	r1, r1, fp
 8009604:	0c1b      	lsrs	r3, r3, #16
 8009606:	eba1 0808 	sub.w	r8, r1, r8
 800960a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800960e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009612:	fa1f f888 	uxth.w	r8, r8
 8009616:	1419      	asrs	r1, r3, #16
 8009618:	454e      	cmp	r6, r9
 800961a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800961e:	f84a 3b04 	str.w	r3, [sl], #4
 8009622:	d8e7      	bhi.n	80095f4 <__mdiff+0x80>
 8009624:	1b33      	subs	r3, r6, r4
 8009626:	3b15      	subs	r3, #21
 8009628:	f023 0303 	bic.w	r3, r3, #3
 800962c:	3304      	adds	r3, #4
 800962e:	3415      	adds	r4, #21
 8009630:	42a6      	cmp	r6, r4
 8009632:	bf38      	it	cc
 8009634:	2304      	movcc	r3, #4
 8009636:	441d      	add	r5, r3
 8009638:	4473      	add	r3, lr
 800963a:	469e      	mov	lr, r3
 800963c:	462e      	mov	r6, r5
 800963e:	4566      	cmp	r6, ip
 8009640:	d30e      	bcc.n	8009660 <__mdiff+0xec>
 8009642:	f10c 0203 	add.w	r2, ip, #3
 8009646:	1b52      	subs	r2, r2, r5
 8009648:	f022 0203 	bic.w	r2, r2, #3
 800964c:	3d03      	subs	r5, #3
 800964e:	45ac      	cmp	ip, r5
 8009650:	bf38      	it	cc
 8009652:	2200      	movcc	r2, #0
 8009654:	441a      	add	r2, r3
 8009656:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800965a:	b17b      	cbz	r3, 800967c <__mdiff+0x108>
 800965c:	6107      	str	r7, [r0, #16]
 800965e:	e7a3      	b.n	80095a8 <__mdiff+0x34>
 8009660:	f856 8b04 	ldr.w	r8, [r6], #4
 8009664:	fa11 f288 	uxtah	r2, r1, r8
 8009668:	1414      	asrs	r4, r2, #16
 800966a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800966e:	b292      	uxth	r2, r2
 8009670:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009674:	f84e 2b04 	str.w	r2, [lr], #4
 8009678:	1421      	asrs	r1, r4, #16
 800967a:	e7e0      	b.n	800963e <__mdiff+0xca>
 800967c:	3f01      	subs	r7, #1
 800967e:	e7ea      	b.n	8009656 <__mdiff+0xe2>
 8009680:	0800a24f 	.word	0x0800a24f
 8009684:	0800a2c0 	.word	0x0800a2c0

08009688 <__d2b>:
 8009688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800968c:	4689      	mov	r9, r1
 800968e:	2101      	movs	r1, #1
 8009690:	ec57 6b10 	vmov	r6, r7, d0
 8009694:	4690      	mov	r8, r2
 8009696:	f7ff fccf 	bl	8009038 <_Balloc>
 800969a:	4604      	mov	r4, r0
 800969c:	b930      	cbnz	r0, 80096ac <__d2b+0x24>
 800969e:	4602      	mov	r2, r0
 80096a0:	4b25      	ldr	r3, [pc, #148]	; (8009738 <__d2b+0xb0>)
 80096a2:	4826      	ldr	r0, [pc, #152]	; (800973c <__d2b+0xb4>)
 80096a4:	f240 310a 	movw	r1, #778	; 0x30a
 80096a8:	f000 fb00 	bl	8009cac <__assert_func>
 80096ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80096b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096b4:	bb35      	cbnz	r5, 8009704 <__d2b+0x7c>
 80096b6:	2e00      	cmp	r6, #0
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	d028      	beq.n	800970e <__d2b+0x86>
 80096bc:	4668      	mov	r0, sp
 80096be:	9600      	str	r6, [sp, #0]
 80096c0:	f7ff fd82 	bl	80091c8 <__lo0bits>
 80096c4:	9900      	ldr	r1, [sp, #0]
 80096c6:	b300      	cbz	r0, 800970a <__d2b+0x82>
 80096c8:	9a01      	ldr	r2, [sp, #4]
 80096ca:	f1c0 0320 	rsb	r3, r0, #32
 80096ce:	fa02 f303 	lsl.w	r3, r2, r3
 80096d2:	430b      	orrs	r3, r1
 80096d4:	40c2      	lsrs	r2, r0
 80096d6:	6163      	str	r3, [r4, #20]
 80096d8:	9201      	str	r2, [sp, #4]
 80096da:	9b01      	ldr	r3, [sp, #4]
 80096dc:	61a3      	str	r3, [r4, #24]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	bf14      	ite	ne
 80096e2:	2202      	movne	r2, #2
 80096e4:	2201      	moveq	r2, #1
 80096e6:	6122      	str	r2, [r4, #16]
 80096e8:	b1d5      	cbz	r5, 8009720 <__d2b+0x98>
 80096ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80096ee:	4405      	add	r5, r0
 80096f0:	f8c9 5000 	str.w	r5, [r9]
 80096f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80096f8:	f8c8 0000 	str.w	r0, [r8]
 80096fc:	4620      	mov	r0, r4
 80096fe:	b003      	add	sp, #12
 8009700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009708:	e7d5      	b.n	80096b6 <__d2b+0x2e>
 800970a:	6161      	str	r1, [r4, #20]
 800970c:	e7e5      	b.n	80096da <__d2b+0x52>
 800970e:	a801      	add	r0, sp, #4
 8009710:	f7ff fd5a 	bl	80091c8 <__lo0bits>
 8009714:	9b01      	ldr	r3, [sp, #4]
 8009716:	6163      	str	r3, [r4, #20]
 8009718:	2201      	movs	r2, #1
 800971a:	6122      	str	r2, [r4, #16]
 800971c:	3020      	adds	r0, #32
 800971e:	e7e3      	b.n	80096e8 <__d2b+0x60>
 8009720:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009724:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009728:	f8c9 0000 	str.w	r0, [r9]
 800972c:	6918      	ldr	r0, [r3, #16]
 800972e:	f7ff fd2b 	bl	8009188 <__hi0bits>
 8009732:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009736:	e7df      	b.n	80096f8 <__d2b+0x70>
 8009738:	0800a24f 	.word	0x0800a24f
 800973c:	0800a2c0 	.word	0x0800a2c0

08009740 <_calloc_r>:
 8009740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009742:	fba1 2402 	umull	r2, r4, r1, r2
 8009746:	b94c      	cbnz	r4, 800975c <_calloc_r+0x1c>
 8009748:	4611      	mov	r1, r2
 800974a:	9201      	str	r2, [sp, #4]
 800974c:	f000 f87a 	bl	8009844 <_malloc_r>
 8009750:	9a01      	ldr	r2, [sp, #4]
 8009752:	4605      	mov	r5, r0
 8009754:	b930      	cbnz	r0, 8009764 <_calloc_r+0x24>
 8009756:	4628      	mov	r0, r5
 8009758:	b003      	add	sp, #12
 800975a:	bd30      	pop	{r4, r5, pc}
 800975c:	220c      	movs	r2, #12
 800975e:	6002      	str	r2, [r0, #0]
 8009760:	2500      	movs	r5, #0
 8009762:	e7f8      	b.n	8009756 <_calloc_r+0x16>
 8009764:	4621      	mov	r1, r4
 8009766:	f7fd fdf3 	bl	8007350 <memset>
 800976a:	e7f4      	b.n	8009756 <_calloc_r+0x16>

0800976c <_free_r>:
 800976c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800976e:	2900      	cmp	r1, #0
 8009770:	d044      	beq.n	80097fc <_free_r+0x90>
 8009772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009776:	9001      	str	r0, [sp, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f1a1 0404 	sub.w	r4, r1, #4
 800977e:	bfb8      	it	lt
 8009780:	18e4      	addlt	r4, r4, r3
 8009782:	f000 fb19 	bl	8009db8 <__malloc_lock>
 8009786:	4a1e      	ldr	r2, [pc, #120]	; (8009800 <_free_r+0x94>)
 8009788:	9801      	ldr	r0, [sp, #4]
 800978a:	6813      	ldr	r3, [r2, #0]
 800978c:	b933      	cbnz	r3, 800979c <_free_r+0x30>
 800978e:	6063      	str	r3, [r4, #4]
 8009790:	6014      	str	r4, [r2, #0]
 8009792:	b003      	add	sp, #12
 8009794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009798:	f000 bb14 	b.w	8009dc4 <__malloc_unlock>
 800979c:	42a3      	cmp	r3, r4
 800979e:	d908      	bls.n	80097b2 <_free_r+0x46>
 80097a0:	6825      	ldr	r5, [r4, #0]
 80097a2:	1961      	adds	r1, r4, r5
 80097a4:	428b      	cmp	r3, r1
 80097a6:	bf01      	itttt	eq
 80097a8:	6819      	ldreq	r1, [r3, #0]
 80097aa:	685b      	ldreq	r3, [r3, #4]
 80097ac:	1949      	addeq	r1, r1, r5
 80097ae:	6021      	streq	r1, [r4, #0]
 80097b0:	e7ed      	b.n	800978e <_free_r+0x22>
 80097b2:	461a      	mov	r2, r3
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	b10b      	cbz	r3, 80097bc <_free_r+0x50>
 80097b8:	42a3      	cmp	r3, r4
 80097ba:	d9fa      	bls.n	80097b2 <_free_r+0x46>
 80097bc:	6811      	ldr	r1, [r2, #0]
 80097be:	1855      	adds	r5, r2, r1
 80097c0:	42a5      	cmp	r5, r4
 80097c2:	d10b      	bne.n	80097dc <_free_r+0x70>
 80097c4:	6824      	ldr	r4, [r4, #0]
 80097c6:	4421      	add	r1, r4
 80097c8:	1854      	adds	r4, r2, r1
 80097ca:	42a3      	cmp	r3, r4
 80097cc:	6011      	str	r1, [r2, #0]
 80097ce:	d1e0      	bne.n	8009792 <_free_r+0x26>
 80097d0:	681c      	ldr	r4, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	6053      	str	r3, [r2, #4]
 80097d6:	4421      	add	r1, r4
 80097d8:	6011      	str	r1, [r2, #0]
 80097da:	e7da      	b.n	8009792 <_free_r+0x26>
 80097dc:	d902      	bls.n	80097e4 <_free_r+0x78>
 80097de:	230c      	movs	r3, #12
 80097e0:	6003      	str	r3, [r0, #0]
 80097e2:	e7d6      	b.n	8009792 <_free_r+0x26>
 80097e4:	6825      	ldr	r5, [r4, #0]
 80097e6:	1961      	adds	r1, r4, r5
 80097e8:	428b      	cmp	r3, r1
 80097ea:	bf04      	itt	eq
 80097ec:	6819      	ldreq	r1, [r3, #0]
 80097ee:	685b      	ldreq	r3, [r3, #4]
 80097f0:	6063      	str	r3, [r4, #4]
 80097f2:	bf04      	itt	eq
 80097f4:	1949      	addeq	r1, r1, r5
 80097f6:	6021      	streq	r1, [r4, #0]
 80097f8:	6054      	str	r4, [r2, #4]
 80097fa:	e7ca      	b.n	8009792 <_free_r+0x26>
 80097fc:	b003      	add	sp, #12
 80097fe:	bd30      	pop	{r4, r5, pc}
 8009800:	200015a4 	.word	0x200015a4

08009804 <sbrk_aligned>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	4e0e      	ldr	r6, [pc, #56]	; (8009840 <sbrk_aligned+0x3c>)
 8009808:	460c      	mov	r4, r1
 800980a:	6831      	ldr	r1, [r6, #0]
 800980c:	4605      	mov	r5, r0
 800980e:	b911      	cbnz	r1, 8009816 <sbrk_aligned+0x12>
 8009810:	f000 f9e6 	bl	8009be0 <_sbrk_r>
 8009814:	6030      	str	r0, [r6, #0]
 8009816:	4621      	mov	r1, r4
 8009818:	4628      	mov	r0, r5
 800981a:	f000 f9e1 	bl	8009be0 <_sbrk_r>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	d00a      	beq.n	8009838 <sbrk_aligned+0x34>
 8009822:	1cc4      	adds	r4, r0, #3
 8009824:	f024 0403 	bic.w	r4, r4, #3
 8009828:	42a0      	cmp	r0, r4
 800982a:	d007      	beq.n	800983c <sbrk_aligned+0x38>
 800982c:	1a21      	subs	r1, r4, r0
 800982e:	4628      	mov	r0, r5
 8009830:	f000 f9d6 	bl	8009be0 <_sbrk_r>
 8009834:	3001      	adds	r0, #1
 8009836:	d101      	bne.n	800983c <sbrk_aligned+0x38>
 8009838:	f04f 34ff 	mov.w	r4, #4294967295
 800983c:	4620      	mov	r0, r4
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	200015a8 	.word	0x200015a8

08009844 <_malloc_r>:
 8009844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009848:	1ccd      	adds	r5, r1, #3
 800984a:	f025 0503 	bic.w	r5, r5, #3
 800984e:	3508      	adds	r5, #8
 8009850:	2d0c      	cmp	r5, #12
 8009852:	bf38      	it	cc
 8009854:	250c      	movcc	r5, #12
 8009856:	2d00      	cmp	r5, #0
 8009858:	4607      	mov	r7, r0
 800985a:	db01      	blt.n	8009860 <_malloc_r+0x1c>
 800985c:	42a9      	cmp	r1, r5
 800985e:	d905      	bls.n	800986c <_malloc_r+0x28>
 8009860:	230c      	movs	r3, #12
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	2600      	movs	r6, #0
 8009866:	4630      	mov	r0, r6
 8009868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986c:	4e2e      	ldr	r6, [pc, #184]	; (8009928 <_malloc_r+0xe4>)
 800986e:	f000 faa3 	bl	8009db8 <__malloc_lock>
 8009872:	6833      	ldr	r3, [r6, #0]
 8009874:	461c      	mov	r4, r3
 8009876:	bb34      	cbnz	r4, 80098c6 <_malloc_r+0x82>
 8009878:	4629      	mov	r1, r5
 800987a:	4638      	mov	r0, r7
 800987c:	f7ff ffc2 	bl	8009804 <sbrk_aligned>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	4604      	mov	r4, r0
 8009884:	d14d      	bne.n	8009922 <_malloc_r+0xde>
 8009886:	6834      	ldr	r4, [r6, #0]
 8009888:	4626      	mov	r6, r4
 800988a:	2e00      	cmp	r6, #0
 800988c:	d140      	bne.n	8009910 <_malloc_r+0xcc>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	4631      	mov	r1, r6
 8009892:	4638      	mov	r0, r7
 8009894:	eb04 0803 	add.w	r8, r4, r3
 8009898:	f000 f9a2 	bl	8009be0 <_sbrk_r>
 800989c:	4580      	cmp	r8, r0
 800989e:	d13a      	bne.n	8009916 <_malloc_r+0xd2>
 80098a0:	6821      	ldr	r1, [r4, #0]
 80098a2:	3503      	adds	r5, #3
 80098a4:	1a6d      	subs	r5, r5, r1
 80098a6:	f025 0503 	bic.w	r5, r5, #3
 80098aa:	3508      	adds	r5, #8
 80098ac:	2d0c      	cmp	r5, #12
 80098ae:	bf38      	it	cc
 80098b0:	250c      	movcc	r5, #12
 80098b2:	4629      	mov	r1, r5
 80098b4:	4638      	mov	r0, r7
 80098b6:	f7ff ffa5 	bl	8009804 <sbrk_aligned>
 80098ba:	3001      	adds	r0, #1
 80098bc:	d02b      	beq.n	8009916 <_malloc_r+0xd2>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	442b      	add	r3, r5
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	e00e      	b.n	80098e4 <_malloc_r+0xa0>
 80098c6:	6822      	ldr	r2, [r4, #0]
 80098c8:	1b52      	subs	r2, r2, r5
 80098ca:	d41e      	bmi.n	800990a <_malloc_r+0xc6>
 80098cc:	2a0b      	cmp	r2, #11
 80098ce:	d916      	bls.n	80098fe <_malloc_r+0xba>
 80098d0:	1961      	adds	r1, r4, r5
 80098d2:	42a3      	cmp	r3, r4
 80098d4:	6025      	str	r5, [r4, #0]
 80098d6:	bf18      	it	ne
 80098d8:	6059      	strne	r1, [r3, #4]
 80098da:	6863      	ldr	r3, [r4, #4]
 80098dc:	bf08      	it	eq
 80098de:	6031      	streq	r1, [r6, #0]
 80098e0:	5162      	str	r2, [r4, r5]
 80098e2:	604b      	str	r3, [r1, #4]
 80098e4:	4638      	mov	r0, r7
 80098e6:	f104 060b 	add.w	r6, r4, #11
 80098ea:	f000 fa6b 	bl	8009dc4 <__malloc_unlock>
 80098ee:	f026 0607 	bic.w	r6, r6, #7
 80098f2:	1d23      	adds	r3, r4, #4
 80098f4:	1af2      	subs	r2, r6, r3
 80098f6:	d0b6      	beq.n	8009866 <_malloc_r+0x22>
 80098f8:	1b9b      	subs	r3, r3, r6
 80098fa:	50a3      	str	r3, [r4, r2]
 80098fc:	e7b3      	b.n	8009866 <_malloc_r+0x22>
 80098fe:	6862      	ldr	r2, [r4, #4]
 8009900:	42a3      	cmp	r3, r4
 8009902:	bf0c      	ite	eq
 8009904:	6032      	streq	r2, [r6, #0]
 8009906:	605a      	strne	r2, [r3, #4]
 8009908:	e7ec      	b.n	80098e4 <_malloc_r+0xa0>
 800990a:	4623      	mov	r3, r4
 800990c:	6864      	ldr	r4, [r4, #4]
 800990e:	e7b2      	b.n	8009876 <_malloc_r+0x32>
 8009910:	4634      	mov	r4, r6
 8009912:	6876      	ldr	r6, [r6, #4]
 8009914:	e7b9      	b.n	800988a <_malloc_r+0x46>
 8009916:	230c      	movs	r3, #12
 8009918:	603b      	str	r3, [r7, #0]
 800991a:	4638      	mov	r0, r7
 800991c:	f000 fa52 	bl	8009dc4 <__malloc_unlock>
 8009920:	e7a1      	b.n	8009866 <_malloc_r+0x22>
 8009922:	6025      	str	r5, [r4, #0]
 8009924:	e7de      	b.n	80098e4 <_malloc_r+0xa0>
 8009926:	bf00      	nop
 8009928:	200015a4 	.word	0x200015a4

0800992c <__sfputc_r>:
 800992c:	6893      	ldr	r3, [r2, #8]
 800992e:	3b01      	subs	r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	b410      	push	{r4}
 8009934:	6093      	str	r3, [r2, #8]
 8009936:	da08      	bge.n	800994a <__sfputc_r+0x1e>
 8009938:	6994      	ldr	r4, [r2, #24]
 800993a:	42a3      	cmp	r3, r4
 800993c:	db01      	blt.n	8009942 <__sfputc_r+0x16>
 800993e:	290a      	cmp	r1, #10
 8009940:	d103      	bne.n	800994a <__sfputc_r+0x1e>
 8009942:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009946:	f7fe ba03 	b.w	8007d50 <__swbuf_r>
 800994a:	6813      	ldr	r3, [r2, #0]
 800994c:	1c58      	adds	r0, r3, #1
 800994e:	6010      	str	r0, [r2, #0]
 8009950:	7019      	strb	r1, [r3, #0]
 8009952:	4608      	mov	r0, r1
 8009954:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009958:	4770      	bx	lr

0800995a <__sfputs_r>:
 800995a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995c:	4606      	mov	r6, r0
 800995e:	460f      	mov	r7, r1
 8009960:	4614      	mov	r4, r2
 8009962:	18d5      	adds	r5, r2, r3
 8009964:	42ac      	cmp	r4, r5
 8009966:	d101      	bne.n	800996c <__sfputs_r+0x12>
 8009968:	2000      	movs	r0, #0
 800996a:	e007      	b.n	800997c <__sfputs_r+0x22>
 800996c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009970:	463a      	mov	r2, r7
 8009972:	4630      	mov	r0, r6
 8009974:	f7ff ffda 	bl	800992c <__sfputc_r>
 8009978:	1c43      	adds	r3, r0, #1
 800997a:	d1f3      	bne.n	8009964 <__sfputs_r+0xa>
 800997c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009980 <_vfiprintf_r>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	460d      	mov	r5, r1
 8009986:	b09d      	sub	sp, #116	; 0x74
 8009988:	4614      	mov	r4, r2
 800998a:	4698      	mov	r8, r3
 800998c:	4606      	mov	r6, r0
 800998e:	b118      	cbz	r0, 8009998 <_vfiprintf_r+0x18>
 8009990:	6983      	ldr	r3, [r0, #24]
 8009992:	b90b      	cbnz	r3, 8009998 <_vfiprintf_r+0x18>
 8009994:	f7ff fa30 	bl	8008df8 <__sinit>
 8009998:	4b89      	ldr	r3, [pc, #548]	; (8009bc0 <_vfiprintf_r+0x240>)
 800999a:	429d      	cmp	r5, r3
 800999c:	d11b      	bne.n	80099d6 <_vfiprintf_r+0x56>
 800999e:	6875      	ldr	r5, [r6, #4]
 80099a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099a2:	07d9      	lsls	r1, r3, #31
 80099a4:	d405      	bmi.n	80099b2 <_vfiprintf_r+0x32>
 80099a6:	89ab      	ldrh	r3, [r5, #12]
 80099a8:	059a      	lsls	r2, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_vfiprintf_r+0x32>
 80099ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099ae:	f7ff fac6 	bl	8008f3e <__retarget_lock_acquire_recursive>
 80099b2:	89ab      	ldrh	r3, [r5, #12]
 80099b4:	071b      	lsls	r3, r3, #28
 80099b6:	d501      	bpl.n	80099bc <_vfiprintf_r+0x3c>
 80099b8:	692b      	ldr	r3, [r5, #16]
 80099ba:	b9eb      	cbnz	r3, 80099f8 <_vfiprintf_r+0x78>
 80099bc:	4629      	mov	r1, r5
 80099be:	4630      	mov	r0, r6
 80099c0:	f7fe fa18 	bl	8007df4 <__swsetup_r>
 80099c4:	b1c0      	cbz	r0, 80099f8 <_vfiprintf_r+0x78>
 80099c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c8:	07dc      	lsls	r4, r3, #31
 80099ca:	d50e      	bpl.n	80099ea <_vfiprintf_r+0x6a>
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	b01d      	add	sp, #116	; 0x74
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	4b7b      	ldr	r3, [pc, #492]	; (8009bc4 <_vfiprintf_r+0x244>)
 80099d8:	429d      	cmp	r5, r3
 80099da:	d101      	bne.n	80099e0 <_vfiprintf_r+0x60>
 80099dc:	68b5      	ldr	r5, [r6, #8]
 80099de:	e7df      	b.n	80099a0 <_vfiprintf_r+0x20>
 80099e0:	4b79      	ldr	r3, [pc, #484]	; (8009bc8 <_vfiprintf_r+0x248>)
 80099e2:	429d      	cmp	r5, r3
 80099e4:	bf08      	it	eq
 80099e6:	68f5      	ldreq	r5, [r6, #12]
 80099e8:	e7da      	b.n	80099a0 <_vfiprintf_r+0x20>
 80099ea:	89ab      	ldrh	r3, [r5, #12]
 80099ec:	0598      	lsls	r0, r3, #22
 80099ee:	d4ed      	bmi.n	80099cc <_vfiprintf_r+0x4c>
 80099f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099f2:	f7ff faa5 	bl	8008f40 <__retarget_lock_release_recursive>
 80099f6:	e7e9      	b.n	80099cc <_vfiprintf_r+0x4c>
 80099f8:	2300      	movs	r3, #0
 80099fa:	9309      	str	r3, [sp, #36]	; 0x24
 80099fc:	2320      	movs	r3, #32
 80099fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a06:	2330      	movs	r3, #48	; 0x30
 8009a08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bcc <_vfiprintf_r+0x24c>
 8009a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a10:	f04f 0901 	mov.w	r9, #1
 8009a14:	4623      	mov	r3, r4
 8009a16:	469a      	mov	sl, r3
 8009a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a1c:	b10a      	cbz	r2, 8009a22 <_vfiprintf_r+0xa2>
 8009a1e:	2a25      	cmp	r2, #37	; 0x25
 8009a20:	d1f9      	bne.n	8009a16 <_vfiprintf_r+0x96>
 8009a22:	ebba 0b04 	subs.w	fp, sl, r4
 8009a26:	d00b      	beq.n	8009a40 <_vfiprintf_r+0xc0>
 8009a28:	465b      	mov	r3, fp
 8009a2a:	4622      	mov	r2, r4
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f7ff ff93 	bl	800995a <__sfputs_r>
 8009a34:	3001      	adds	r0, #1
 8009a36:	f000 80aa 	beq.w	8009b8e <_vfiprintf_r+0x20e>
 8009a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a3c:	445a      	add	r2, fp
 8009a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009a40:	f89a 3000 	ldrb.w	r3, [sl]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 80a2 	beq.w	8009b8e <_vfiprintf_r+0x20e>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a54:	f10a 0a01 	add.w	sl, sl, #1
 8009a58:	9304      	str	r3, [sp, #16]
 8009a5a:	9307      	str	r3, [sp, #28]
 8009a5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a60:	931a      	str	r3, [sp, #104]	; 0x68
 8009a62:	4654      	mov	r4, sl
 8009a64:	2205      	movs	r2, #5
 8009a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6a:	4858      	ldr	r0, [pc, #352]	; (8009bcc <_vfiprintf_r+0x24c>)
 8009a6c:	f7f6 fbb8 	bl	80001e0 <memchr>
 8009a70:	9a04      	ldr	r2, [sp, #16]
 8009a72:	b9d8      	cbnz	r0, 8009aac <_vfiprintf_r+0x12c>
 8009a74:	06d1      	lsls	r1, r2, #27
 8009a76:	bf44      	itt	mi
 8009a78:	2320      	movmi	r3, #32
 8009a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a7e:	0713      	lsls	r3, r2, #28
 8009a80:	bf44      	itt	mi
 8009a82:	232b      	movmi	r3, #43	; 0x2b
 8009a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a88:	f89a 3000 	ldrb.w	r3, [sl]
 8009a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a8e:	d015      	beq.n	8009abc <_vfiprintf_r+0x13c>
 8009a90:	9a07      	ldr	r2, [sp, #28]
 8009a92:	4654      	mov	r4, sl
 8009a94:	2000      	movs	r0, #0
 8009a96:	f04f 0c0a 	mov.w	ip, #10
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa0:	3b30      	subs	r3, #48	; 0x30
 8009aa2:	2b09      	cmp	r3, #9
 8009aa4:	d94e      	bls.n	8009b44 <_vfiprintf_r+0x1c4>
 8009aa6:	b1b0      	cbz	r0, 8009ad6 <_vfiprintf_r+0x156>
 8009aa8:	9207      	str	r2, [sp, #28]
 8009aaa:	e014      	b.n	8009ad6 <_vfiprintf_r+0x156>
 8009aac:	eba0 0308 	sub.w	r3, r0, r8
 8009ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	9304      	str	r3, [sp, #16]
 8009ab8:	46a2      	mov	sl, r4
 8009aba:	e7d2      	b.n	8009a62 <_vfiprintf_r+0xe2>
 8009abc:	9b03      	ldr	r3, [sp, #12]
 8009abe:	1d19      	adds	r1, r3, #4
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	9103      	str	r1, [sp, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	bfbb      	ittet	lt
 8009ac8:	425b      	neglt	r3, r3
 8009aca:	f042 0202 	orrlt.w	r2, r2, #2
 8009ace:	9307      	strge	r3, [sp, #28]
 8009ad0:	9307      	strlt	r3, [sp, #28]
 8009ad2:	bfb8      	it	lt
 8009ad4:	9204      	strlt	r2, [sp, #16]
 8009ad6:	7823      	ldrb	r3, [r4, #0]
 8009ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8009ada:	d10c      	bne.n	8009af6 <_vfiprintf_r+0x176>
 8009adc:	7863      	ldrb	r3, [r4, #1]
 8009ade:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae0:	d135      	bne.n	8009b4e <_vfiprintf_r+0x1ce>
 8009ae2:	9b03      	ldr	r3, [sp, #12]
 8009ae4:	1d1a      	adds	r2, r3, #4
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	9203      	str	r2, [sp, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	bfb8      	it	lt
 8009aee:	f04f 33ff 	movlt.w	r3, #4294967295
 8009af2:	3402      	adds	r4, #2
 8009af4:	9305      	str	r3, [sp, #20]
 8009af6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009bdc <_vfiprintf_r+0x25c>
 8009afa:	7821      	ldrb	r1, [r4, #0]
 8009afc:	2203      	movs	r2, #3
 8009afe:	4650      	mov	r0, sl
 8009b00:	f7f6 fb6e 	bl	80001e0 <memchr>
 8009b04:	b140      	cbz	r0, 8009b18 <_vfiprintf_r+0x198>
 8009b06:	2340      	movs	r3, #64	; 0x40
 8009b08:	eba0 000a 	sub.w	r0, r0, sl
 8009b0c:	fa03 f000 	lsl.w	r0, r3, r0
 8009b10:	9b04      	ldr	r3, [sp, #16]
 8009b12:	4303      	orrs	r3, r0
 8009b14:	3401      	adds	r4, #1
 8009b16:	9304      	str	r3, [sp, #16]
 8009b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1c:	482c      	ldr	r0, [pc, #176]	; (8009bd0 <_vfiprintf_r+0x250>)
 8009b1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b22:	2206      	movs	r2, #6
 8009b24:	f7f6 fb5c 	bl	80001e0 <memchr>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d03f      	beq.n	8009bac <_vfiprintf_r+0x22c>
 8009b2c:	4b29      	ldr	r3, [pc, #164]	; (8009bd4 <_vfiprintf_r+0x254>)
 8009b2e:	bb1b      	cbnz	r3, 8009b78 <_vfiprintf_r+0x1f8>
 8009b30:	9b03      	ldr	r3, [sp, #12]
 8009b32:	3307      	adds	r3, #7
 8009b34:	f023 0307 	bic.w	r3, r3, #7
 8009b38:	3308      	adds	r3, #8
 8009b3a:	9303      	str	r3, [sp, #12]
 8009b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b3e:	443b      	add	r3, r7
 8009b40:	9309      	str	r3, [sp, #36]	; 0x24
 8009b42:	e767      	b.n	8009a14 <_vfiprintf_r+0x94>
 8009b44:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b48:	460c      	mov	r4, r1
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	e7a5      	b.n	8009a9a <_vfiprintf_r+0x11a>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	3401      	adds	r4, #1
 8009b52:	9305      	str	r3, [sp, #20]
 8009b54:	4619      	mov	r1, r3
 8009b56:	f04f 0c0a 	mov.w	ip, #10
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b60:	3a30      	subs	r2, #48	; 0x30
 8009b62:	2a09      	cmp	r2, #9
 8009b64:	d903      	bls.n	8009b6e <_vfiprintf_r+0x1ee>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d0c5      	beq.n	8009af6 <_vfiprintf_r+0x176>
 8009b6a:	9105      	str	r1, [sp, #20]
 8009b6c:	e7c3      	b.n	8009af6 <_vfiprintf_r+0x176>
 8009b6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b72:	4604      	mov	r4, r0
 8009b74:	2301      	movs	r3, #1
 8009b76:	e7f0      	b.n	8009b5a <_vfiprintf_r+0x1da>
 8009b78:	ab03      	add	r3, sp, #12
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	462a      	mov	r2, r5
 8009b7e:	4b16      	ldr	r3, [pc, #88]	; (8009bd8 <_vfiprintf_r+0x258>)
 8009b80:	a904      	add	r1, sp, #16
 8009b82:	4630      	mov	r0, r6
 8009b84:	f7fd fc8c 	bl	80074a0 <_printf_float>
 8009b88:	4607      	mov	r7, r0
 8009b8a:	1c78      	adds	r0, r7, #1
 8009b8c:	d1d6      	bne.n	8009b3c <_vfiprintf_r+0x1bc>
 8009b8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b90:	07d9      	lsls	r1, r3, #31
 8009b92:	d405      	bmi.n	8009ba0 <_vfiprintf_r+0x220>
 8009b94:	89ab      	ldrh	r3, [r5, #12]
 8009b96:	059a      	lsls	r2, r3, #22
 8009b98:	d402      	bmi.n	8009ba0 <_vfiprintf_r+0x220>
 8009b9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b9c:	f7ff f9d0 	bl	8008f40 <__retarget_lock_release_recursive>
 8009ba0:	89ab      	ldrh	r3, [r5, #12]
 8009ba2:	065b      	lsls	r3, r3, #25
 8009ba4:	f53f af12 	bmi.w	80099cc <_vfiprintf_r+0x4c>
 8009ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009baa:	e711      	b.n	80099d0 <_vfiprintf_r+0x50>
 8009bac:	ab03      	add	r3, sp, #12
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	462a      	mov	r2, r5
 8009bb2:	4b09      	ldr	r3, [pc, #36]	; (8009bd8 <_vfiprintf_r+0x258>)
 8009bb4:	a904      	add	r1, sp, #16
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f7fd ff16 	bl	80079e8 <_printf_i>
 8009bbc:	e7e4      	b.n	8009b88 <_vfiprintf_r+0x208>
 8009bbe:	bf00      	nop
 8009bc0:	0800a280 	.word	0x0800a280
 8009bc4:	0800a2a0 	.word	0x0800a2a0
 8009bc8:	0800a260 	.word	0x0800a260
 8009bcc:	0800a41c 	.word	0x0800a41c
 8009bd0:	0800a426 	.word	0x0800a426
 8009bd4:	080074a1 	.word	0x080074a1
 8009bd8:	0800995b 	.word	0x0800995b
 8009bdc:	0800a422 	.word	0x0800a422

08009be0 <_sbrk_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d06      	ldr	r5, [pc, #24]	; (8009bfc <_sbrk_r+0x1c>)
 8009be4:	2300      	movs	r3, #0
 8009be6:	4604      	mov	r4, r0
 8009be8:	4608      	mov	r0, r1
 8009bea:	602b      	str	r3, [r5, #0]
 8009bec:	f7f8 f926 	bl	8001e3c <_sbrk>
 8009bf0:	1c43      	adds	r3, r0, #1
 8009bf2:	d102      	bne.n	8009bfa <_sbrk_r+0x1a>
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	b103      	cbz	r3, 8009bfa <_sbrk_r+0x1a>
 8009bf8:	6023      	str	r3, [r4, #0]
 8009bfa:	bd38      	pop	{r3, r4, r5, pc}
 8009bfc:	200015ac 	.word	0x200015ac

08009c00 <__sread>:
 8009c00:	b510      	push	{r4, lr}
 8009c02:	460c      	mov	r4, r1
 8009c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c08:	f000 f8e2 	bl	8009dd0 <_read_r>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	bfab      	itete	ge
 8009c10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c12:	89a3      	ldrhlt	r3, [r4, #12]
 8009c14:	181b      	addge	r3, r3, r0
 8009c16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c1a:	bfac      	ite	ge
 8009c1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c1e:	81a3      	strhlt	r3, [r4, #12]
 8009c20:	bd10      	pop	{r4, pc}

08009c22 <__swrite>:
 8009c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c26:	461f      	mov	r7, r3
 8009c28:	898b      	ldrh	r3, [r1, #12]
 8009c2a:	05db      	lsls	r3, r3, #23
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	4616      	mov	r6, r2
 8009c32:	d505      	bpl.n	8009c40 <__swrite+0x1e>
 8009c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c38:	2302      	movs	r3, #2
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f000 f898 	bl	8009d70 <_lseek_r>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	463b      	mov	r3, r7
 8009c50:	4628      	mov	r0, r5
 8009c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c56:	f000 b817 	b.w	8009c88 <_write_r>

08009c5a <__sseek>:
 8009c5a:	b510      	push	{r4, lr}
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c62:	f000 f885 	bl	8009d70 <_lseek_r>
 8009c66:	1c43      	adds	r3, r0, #1
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	bf15      	itete	ne
 8009c6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c76:	81a3      	strheq	r3, [r4, #12]
 8009c78:	bf18      	it	ne
 8009c7a:	81a3      	strhne	r3, [r4, #12]
 8009c7c:	bd10      	pop	{r4, pc}

08009c7e <__sclose>:
 8009c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c82:	f000 b831 	b.w	8009ce8 <_close_r>
	...

08009c88 <_write_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d07      	ldr	r5, [pc, #28]	; (8009ca8 <_write_r+0x20>)
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	4608      	mov	r0, r1
 8009c90:	4611      	mov	r1, r2
 8009c92:	2200      	movs	r2, #0
 8009c94:	602a      	str	r2, [r5, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f7f7 fb34 	bl	8001304 <_write>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_write_r+0x1e>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_write_r+0x1e>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	200015ac 	.word	0x200015ac

08009cac <__assert_func>:
 8009cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cae:	4614      	mov	r4, r2
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4b09      	ldr	r3, [pc, #36]	; (8009cd8 <__assert_func+0x2c>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4605      	mov	r5, r0
 8009cb8:	68d8      	ldr	r0, [r3, #12]
 8009cba:	b14c      	cbz	r4, 8009cd0 <__assert_func+0x24>
 8009cbc:	4b07      	ldr	r3, [pc, #28]	; (8009cdc <__assert_func+0x30>)
 8009cbe:	9100      	str	r1, [sp, #0]
 8009cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cc4:	4906      	ldr	r1, [pc, #24]	; (8009ce0 <__assert_func+0x34>)
 8009cc6:	462b      	mov	r3, r5
 8009cc8:	f000 f81e 	bl	8009d08 <fiprintf>
 8009ccc:	f000 f89f 	bl	8009e0e <abort>
 8009cd0:	4b04      	ldr	r3, [pc, #16]	; (8009ce4 <__assert_func+0x38>)
 8009cd2:	461c      	mov	r4, r3
 8009cd4:	e7f3      	b.n	8009cbe <__assert_func+0x12>
 8009cd6:	bf00      	nop
 8009cd8:	2000000c 	.word	0x2000000c
 8009cdc:	0800a42d 	.word	0x0800a42d
 8009ce0:	0800a43a 	.word	0x0800a43a
 8009ce4:	0800a468 	.word	0x0800a468

08009ce8 <_close_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4d06      	ldr	r5, [pc, #24]	; (8009d04 <_close_r+0x1c>)
 8009cec:	2300      	movs	r3, #0
 8009cee:	4604      	mov	r4, r0
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	602b      	str	r3, [r5, #0]
 8009cf4:	f7f8 f894 	bl	8001e20 <_close>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_close_r+0x1a>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_close_r+0x1a>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	200015ac 	.word	0x200015ac

08009d08 <fiprintf>:
 8009d08:	b40e      	push	{r1, r2, r3}
 8009d0a:	b503      	push	{r0, r1, lr}
 8009d0c:	4601      	mov	r1, r0
 8009d0e:	ab03      	add	r3, sp, #12
 8009d10:	4805      	ldr	r0, [pc, #20]	; (8009d28 <fiprintf+0x20>)
 8009d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d16:	6800      	ldr	r0, [r0, #0]
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	f7ff fe31 	bl	8009980 <_vfiprintf_r>
 8009d1e:	b002      	add	sp, #8
 8009d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d24:	b003      	add	sp, #12
 8009d26:	4770      	bx	lr
 8009d28:	2000000c 	.word	0x2000000c

08009d2c <_fstat_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4d07      	ldr	r5, [pc, #28]	; (8009d4c <_fstat_r+0x20>)
 8009d30:	2300      	movs	r3, #0
 8009d32:	4604      	mov	r4, r0
 8009d34:	4608      	mov	r0, r1
 8009d36:	4611      	mov	r1, r2
 8009d38:	602b      	str	r3, [r5, #0]
 8009d3a:	f7f8 f875 	bl	8001e28 <_fstat>
 8009d3e:	1c43      	adds	r3, r0, #1
 8009d40:	d102      	bne.n	8009d48 <_fstat_r+0x1c>
 8009d42:	682b      	ldr	r3, [r5, #0]
 8009d44:	b103      	cbz	r3, 8009d48 <_fstat_r+0x1c>
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	bd38      	pop	{r3, r4, r5, pc}
 8009d4a:	bf00      	nop
 8009d4c:	200015ac 	.word	0x200015ac

08009d50 <_isatty_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4d06      	ldr	r5, [pc, #24]	; (8009d6c <_isatty_r+0x1c>)
 8009d54:	2300      	movs	r3, #0
 8009d56:	4604      	mov	r4, r0
 8009d58:	4608      	mov	r0, r1
 8009d5a:	602b      	str	r3, [r5, #0]
 8009d5c:	f7f8 f86a 	bl	8001e34 <_isatty>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d102      	bne.n	8009d6a <_isatty_r+0x1a>
 8009d64:	682b      	ldr	r3, [r5, #0]
 8009d66:	b103      	cbz	r3, 8009d6a <_isatty_r+0x1a>
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	bd38      	pop	{r3, r4, r5, pc}
 8009d6c:	200015ac 	.word	0x200015ac

08009d70 <_lseek_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4d07      	ldr	r5, [pc, #28]	; (8009d90 <_lseek_r+0x20>)
 8009d74:	4604      	mov	r4, r0
 8009d76:	4608      	mov	r0, r1
 8009d78:	4611      	mov	r1, r2
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	602a      	str	r2, [r5, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f7f8 f85a 	bl	8001e38 <_lseek>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_lseek_r+0x1e>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_lseek_r+0x1e>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	200015ac 	.word	0x200015ac

08009d94 <__ascii_mbtowc>:
 8009d94:	b082      	sub	sp, #8
 8009d96:	b901      	cbnz	r1, 8009d9a <__ascii_mbtowc+0x6>
 8009d98:	a901      	add	r1, sp, #4
 8009d9a:	b142      	cbz	r2, 8009dae <__ascii_mbtowc+0x1a>
 8009d9c:	b14b      	cbz	r3, 8009db2 <__ascii_mbtowc+0x1e>
 8009d9e:	7813      	ldrb	r3, [r2, #0]
 8009da0:	600b      	str	r3, [r1, #0]
 8009da2:	7812      	ldrb	r2, [r2, #0]
 8009da4:	1e10      	subs	r0, r2, #0
 8009da6:	bf18      	it	ne
 8009da8:	2001      	movne	r0, #1
 8009daa:	b002      	add	sp, #8
 8009dac:	4770      	bx	lr
 8009dae:	4610      	mov	r0, r2
 8009db0:	e7fb      	b.n	8009daa <__ascii_mbtowc+0x16>
 8009db2:	f06f 0001 	mvn.w	r0, #1
 8009db6:	e7f8      	b.n	8009daa <__ascii_mbtowc+0x16>

08009db8 <__malloc_lock>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__malloc_lock+0x8>)
 8009dba:	f7ff b8c0 	b.w	8008f3e <__retarget_lock_acquire_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	200015a0 	.word	0x200015a0

08009dc4 <__malloc_unlock>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__malloc_unlock+0x8>)
 8009dc6:	f7ff b8bb 	b.w	8008f40 <__retarget_lock_release_recursive>
 8009dca:	bf00      	nop
 8009dcc:	200015a0 	.word	0x200015a0

08009dd0 <_read_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d07      	ldr	r5, [pc, #28]	; (8009df0 <_read_r+0x20>)
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	f7f8 f810 	bl	8001e04 <_read>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_read_r+0x1e>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_read_r+0x1e>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	200015ac 	.word	0x200015ac

08009df4 <__ascii_wctomb>:
 8009df4:	b149      	cbz	r1, 8009e0a <__ascii_wctomb+0x16>
 8009df6:	2aff      	cmp	r2, #255	; 0xff
 8009df8:	bf85      	ittet	hi
 8009dfa:	238a      	movhi	r3, #138	; 0x8a
 8009dfc:	6003      	strhi	r3, [r0, #0]
 8009dfe:	700a      	strbls	r2, [r1, #0]
 8009e00:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e04:	bf98      	it	ls
 8009e06:	2001      	movls	r0, #1
 8009e08:	4770      	bx	lr
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4770      	bx	lr

08009e0e <abort>:
 8009e0e:	b508      	push	{r3, lr}
 8009e10:	2006      	movs	r0, #6
 8009e12:	f000 f82b 	bl	8009e6c <raise>
 8009e16:	2001      	movs	r0, #1
 8009e18:	f7f7 ffee 	bl	8001df8 <_exit>

08009e1c <_raise_r>:
 8009e1c:	291f      	cmp	r1, #31
 8009e1e:	b538      	push	{r3, r4, r5, lr}
 8009e20:	4604      	mov	r4, r0
 8009e22:	460d      	mov	r5, r1
 8009e24:	d904      	bls.n	8009e30 <_raise_r+0x14>
 8009e26:	2316      	movs	r3, #22
 8009e28:	6003      	str	r3, [r0, #0]
 8009e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e32:	b112      	cbz	r2, 8009e3a <_raise_r+0x1e>
 8009e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e38:	b94b      	cbnz	r3, 8009e4e <_raise_r+0x32>
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 f830 	bl	8009ea0 <_getpid_r>
 8009e40:	462a      	mov	r2, r5
 8009e42:	4601      	mov	r1, r0
 8009e44:	4620      	mov	r0, r4
 8009e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e4a:	f000 b817 	b.w	8009e7c <_kill_r>
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d00a      	beq.n	8009e68 <_raise_r+0x4c>
 8009e52:	1c59      	adds	r1, r3, #1
 8009e54:	d103      	bne.n	8009e5e <_raise_r+0x42>
 8009e56:	2316      	movs	r3, #22
 8009e58:	6003      	str	r3, [r0, #0]
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	e7e7      	b.n	8009e2e <_raise_r+0x12>
 8009e5e:	2400      	movs	r4, #0
 8009e60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e64:	4628      	mov	r0, r5
 8009e66:	4798      	blx	r3
 8009e68:	2000      	movs	r0, #0
 8009e6a:	e7e0      	b.n	8009e2e <_raise_r+0x12>

08009e6c <raise>:
 8009e6c:	4b02      	ldr	r3, [pc, #8]	; (8009e78 <raise+0xc>)
 8009e6e:	4601      	mov	r1, r0
 8009e70:	6818      	ldr	r0, [r3, #0]
 8009e72:	f7ff bfd3 	b.w	8009e1c <_raise_r>
 8009e76:	bf00      	nop
 8009e78:	2000000c 	.word	0x2000000c

08009e7c <_kill_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d07      	ldr	r5, [pc, #28]	; (8009e9c <_kill_r+0x20>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	4611      	mov	r1, r2
 8009e88:	602b      	str	r3, [r5, #0]
 8009e8a:	f7f7 ffad 	bl	8001de8 <_kill>
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	d102      	bne.n	8009e98 <_kill_r+0x1c>
 8009e92:	682b      	ldr	r3, [r5, #0]
 8009e94:	b103      	cbz	r3, 8009e98 <_kill_r+0x1c>
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	bd38      	pop	{r3, r4, r5, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200015ac 	.word	0x200015ac

08009ea0 <_getpid_r>:
 8009ea0:	f7f7 bfa0 	b.w	8001de4 <_getpid>

08009ea4 <_init>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	bf00      	nop
 8009ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eaa:	bc08      	pop	{r3}
 8009eac:	469e      	mov	lr, r3
 8009eae:	4770      	bx	lr

08009eb0 <_fini>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	bf00      	nop
 8009eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb6:	bc08      	pop	{r3}
 8009eb8:	469e      	mov	lr, r3
 8009eba:	4770      	bx	lr
